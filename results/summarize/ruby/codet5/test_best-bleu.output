0	Prints the summary of the message .
1	Returns an array of bad files from the given line .
2	Verify that ejson keys are not prunable .
3	Returns the compressor for the current system .
4	Create the . bff file .
5	Returns a list of files that match the given pattern .
6	Sync a directory .
7	Returns the relative path of the given path relative to the given parent
8	Clean up any previously mounted disks .
9	Copy assets to dmg
10	Write the transform file .
11	Write the package metadata to disk .
12	Check for bad libraries
13	Check for aix dependencies
14	Check the dependencies of the current project .
15	Reads the shared libs from the system .
16	Check if the current library has unsafe dependencies .
17	Returns the digest for the given path .
18	Updates the digest with the file contents .
19	Returns a list of packages to publish .
20	Write the distribution file to the staging directory .
21	Returns an Artifact object for the given artifact .
22	Creates a new build for the given packages .
23	Creates a new artifactory client .
24	Returns a hash of metadata properties for a package .
25	Returns the remote path for the given package .
26	Sets the value of the parameters hash .
27	Adds a Wix Light Extension .
28	Set the wix light delay validation option .
29	Adds a WixCandle extension .
30	Write the localization file to the staging directory
31	Write the parameters . wxi . erb file
32	Write the source . wxs . erb file
33	Write the bundle . wxs . erb file
34	Resolve a dependency to its build version
35	Append the build start time to the version string .
36	Returns true if the given version has a timestamp
37	Construct the build_version from the source type .
38	Renders the content of a template .
39	Add a warning message to the log .
40	Add a message to the log .
41	Add a shell command to the build .
42	Make a shell command .
43	Create an appbundle command .
44	Create a new rake build command .
45	Writes a file to the project directory .
46	Delete a file or directory .
47	Copy files from source to destination .
48	Update config . guess and config . sub .
49	Write the tar . gz file to the package directory .
50	Create a tarball for this package .
51	Clean the project directory .
52	Deploy the file to the project .
53	Extract the downloaded file to a temporary directory .
54	Returns the digest type for this checksum .
55	Verify the checksum of the downloaded file .
56	Create a new signing identity object .
57	Sign a package .
58	Get the certificate subject for this project .
59	Returns the manifest entry for the given name .
60	Sets the source of the repository .
61	Returns the version of the software .
62	Add a file to the whitelist .
63	Returns the path to the project file for this software .
64	Prepends a path to the environment variable .
65	Returns the overrides for this project .
66	Returns the version for the cache .
67	Returns the fetcher instance for the given source .
68	Returns the SHA256 hash for this builder .
69	Canonicalizes the source hash .
70	Write the makeselfinst template to the staging directory .
71	Create the cache directory .
72	Returns the tag for this software .
73	Perform an incremental cache update
74	Remove all git directories
75	Renders the manifest file .
76	Run a shell command .
77	Calls shellout with the given arguments .
78	Attempts to retry the given block .
79	Returns a safe path for the given pieces .
80	Returns the compiler safe path .
81	Create a directory .
82	Remove a directory .
83	Copy a file
84	Remove a file or directory .
85	Create a new file .
86	Create a link to a file .
87	Validate the project s license information .
88	Get the content of the project license file
89	Returns the license map for this project .
90	Process dependency licensing information .
91	Collect license files for a software .
92	Write the prototype file .
93	Returns the content of the package file .
94	Validates that the package file exists .
95	Returns the key for the given package .
96	Returns a string representation of the version tag .
97	Returns the build start time .
98	Save the data to a file .
99	Set the vendor of the device .
100	Set the license of the project .
101	Returns the path to the build file .
102	Renders the RPM signing template with the given block .
103	Publish a package with the given pattern .
104	Creates a new BuildVersion instance .
105	Register a package with the given id .
106	Adds a block to the compressors hash .
107	Override the value of a symbol .
108	Returns the path to the license file .
109	Returns true if the given software is a dependency of this software .
110	Returns a new Manifest object .
111	Write the text manifest file .
112	Write the conffiles file to the debian directory .
113	Returns the total size of the package .
114	Returns true if the directory is empty .
115	Force the project directory to be recreated .
116	Returns the current revision
117	Returns true if the given revision is a commit .
118	Convert the number to SSH format .
119	Compute the need_bits and data [ need_bytes ] .
120	Returns the parameters of the KexDH group .
121	Build the signature buffer
122	This method is called when the site is loaded .
123	Check if any of the load validations pass
124	Raise a UnsupportedBlockError if the block is not supported .
125	Merge the find_args and runtime_args .
126	Recombine find_args and runtime_args .
127	Returns an array of elements to check .
128	Returns true if the url matches the expected mappings .
129	Returns a hash of component mappings for the given component .
130	Creates a new URI from the given pattern .
131	Returns the substitution value for the given index .
132	Returns an Enumerator for the given number of times .
133	Build an Enumerator from an array .
134	Creates an Enumerator for the given LockQueue .
135	Creates a new ActiveRecordEnumerator .
136	Build an active record enumeration on batches .
137	Returns an array of batches .
138	Creates a new PaperTrail object .
139	Returns the limit for the version of this item .
140	Called when the model is created .
141	Called when the model is destroyed .
142	Called when the model is updated .
143	Called when the model is touching .
144	Check that the item subtype column is present .
145	Returns true if the record should be saved .
146	Squash the given changes .
147	Convert an object to a node .
148	Returns an instance of ancestry_base_class with the specified depth .
149	Sets the orphan strategy .
150	Takes an array of nodes to arrange .
151	Returns an array of serializable objects for the given options .
152	Build ancestry from parent_id
153	Rebuild the depth cache for this model .
154	Returns an array of conditions for the given object .
155	Returns the default params for the request .
156	Returns a hash with all valid options .
157	Reset the GITLAB API configuration .
158	Get the HTTParty config from the given options
159	Start a new timer .
160	Sets the timeout for the socket .
161	Returns the amount of time remaining after the given timeout .
162	Builds the schemas for the given parent schema .
163	Create a new schema from a hash .
164	Returns true if the given subject matches the given conditions .
165	Add an alias to an action .
166	Expand an array of actions .
167	Returns an array of aliases for the given action .
168	Returns a list of relevant rules for the given action and subject .
169	Create a new fake file .
170	Yields each filename in the path .
171	Traverse the tree and yield each node in reverse order .
172	Iterate through the path and yield the result .
173	Calculate the C checksum .
174	Calculate the k_checksum .
175	Adds the barcode to the PDF .
176	Returns an array of characters .
177	Returns an array of characters .
178	Calculate the checksum of the number .
179	Returns an encoding string for the given bars .
180	Render the barcode to the given context .
181	Render the image to a PNG file .
182	Renders the image as a PSSurface .
183	Render the image to a PDF .
184	Render the image to an SVG file .
185	Set the maximum number of threads to use .
186	Returns true if the browser is online .
187	Perform a HEAD request and return the response .
188	Create a connection to the database
189	Ensure a commit exists in the repository .
190	Creates the parents for the given commit .
191	Creates a new user s followers .
192	Creates a new follower for a user .
193	Returns the user with the given email and name .
194	Creates a repo in the database .
195	Creates the project_languages table .
196	Returns a list of commits for a fork .
197	Returns the fork point for the given owner and repo
198	Creates orgs for the given user .
199	Creates a participation for a user in an organization .
200	Ensure the user is an organization .
201	Creates commit comments for a commit .
202	Returns a list of watchers for the given owner and repo .
203	Returns a list of all pull requests for a repository .
204	Creates a pull request history entry .
205	Returns true if the PR is an intra branch .
206	Creates a new repo with the given owner and repo .
207	Creates a fork of a repository .
208	Creates an issue for the given owner and repo .
209	Ensure an issue exists in the repository .
210	Returns an array of issue events for an issue .
211	Creates an issue event for an issue .
212	Returns an array of issue comments .
213	Creates a comment for an issue .
214	Returns a list of labels for a repository .
215	Returns the repo label with the given name .
216	Returns an array of labels for an issue
217	Assign a label to an issue
218	Returns the result of a transaction .
219	Store a commit in the database .
220	Log a message to the logger .
221	Perform a paged API request .
222	Returns the last modified time for the given URL .
223	Returns the number of pages for the given url .
224	Parse a link string into a hash .
225	Parse the result from the request .
226	Perform an HTTP request .
227	Attach this socket to the given IP address .
228	Connect to the given adapter .
229	Retrieve a commit by its SHA
230	Retrieve a list of commits for a repository .
231	Retrieve all organizations for a user
232	Retrieve the list of stargazers for a user and repo
233	Retrieve a stargazer from a repository
234	Get all events for a repository
235	Retrieve the master branch diff
236	Retrieve the default branch for a repository .
237	Process the command options .
238	Validate the options
239	Create a new AMQP client .
240	Read a value from a hash .
241	Returns a string that matches the given location .
242	Validate the usage of the responder .
243	Validate the options for this responder .
244	Deliver messages to Kafka .
245	Log a notice signal to Karafka .
246	Finds an embedding by ID .
247	Creates a new TensorStream instance with the given parameters .
248	Loads the given pbfile .
249	Assert that two arrays are equal .
250	Returns a list of gradients for the given tensor .
251	Generate a random normal distribution .
252	Creates an eye operation .
253	Create a new GLOROT uniform initializer .
254	Creates a random uniform initializer .
255	Returns a slice of the input array .
256	Returns an array of zeros .
257	Returns the logical AND operator .
258	Returns the mean of the input tensor .
259	Concatenates the given values with the given axis .
260	Returns a list of dynamic partitions .
261	Add a where clause to the query .
262	Returns the angle of a floating point .
263	Calculate the acos of a floating point .
264	Returns the angle of a floating point .
265	Cast a tensor to the specified data type .
266	Print a string to the console .
267	Calculate the secitude of a floating point
268	Returns the square root of the input .
269	Log a floating point .
270	Evaluate a floating point .
271	Pads a tensor with a number of paddings .
272	Returns the result of the gather operation .
273	Creates a new stack with the given values .
274	Unpack a value into an array .
275	Returns a case statement .
276	Add an internal operation to the graph .
277	Return an array with the broadcasted dimensions .
278	Apply a vector operation to a vector2 .
279	Transposes an array with the given permutation .
280	Add two inputs .
281	Returns the maximum value of the input array .
282	Returns the value of the ceil operation .
283	Returns the value of the Cosine operator .
284	Returns the floor of the input vector .
285	Modifies two inputs
286	Calculates the power of two inputs .
287	Compute the product of two tensors .
288	Generate a random uniform distribution .
289	Create a range operation .
290	Returns the rank of the input tensor .
291	Round an array of floats .
292	Returns the RMSQRT of the input .
293	Returns the shape of the input tensor .
294	Create a sigmoid operation .
295	Returns the sin of the input vector .
296	Subtracts two inputs
297	Returns the sum of the inputs along the specified axis .
298	Returns the tangent of the input vector .
299	Computes the Tanh operator .
300	Return the top k elements of the input array .
301	Returns an array of zeros .
302	Convert the model to a YAML file .
303	Sets the default device for this object .
304	Loads an Operation from a YAML string .
305	Add a variable to the graph .
306	Creates a new VariableScope .
307	Creates a new session .
308	Creates a new placeholder .
309	Check if value is a dense tensor .
310	Apply data type coercion to the given arguments .
311	Add an audio to a customization .
312	Create an event .
313	Zero - pad a string to the specified length .
314	Check the length of a string against the given length .
315	Check the length of a string .
316	Check that the given string is a valid HMAC key .
317	Check that the given string is a String .
318	Compute the authenticator for a message .
319	Verify the message against the provided authenticator .
320	Creates a new message with the given message .
321	Open an encrypted message .
322	Reopen all appenders .
323	Returns a new SemanticLogger instance .
324	Measure a message at the given level .
325	Creates a new Log instance .
326	Creates a new SemanticLogger with the given tags .
327	Push a list of tags to the logger .
328	Returns true if the log should be filtered .
329	Adds a log entry to the logger .
330	Creates a new Log instance .
331	Measure a method .
332	Adds a log message to the logger .
333	Creates a new SemanticLogger instance .
334	Assign a message payload and exception to a block .
335	Yields each exception in the chain .
336	Extract the file and line number from the stack .
337	Returns the message for the given corrections .
338	Returns a hash of variables for the given message .
339	Run the unit .
340	Returns a new Flor instance with the given name .
341	Returns true if there is a row waiter .
342	Returns the node with the given ID .
343	Returns a hash of variables for a node .
344	Returns the on_error_parent of this node .
345	Decrement the count by one .
346	Lock the queue and process the job .
347	Lock a job in all queues .
348	Calls a method on the receiver .
349	Override the default method_missing method .
350	Removes the given params from the URL .
351	Parse a user info node .
352	Run the given command asynchronously .
353	Returns the exit code .
354	Import a method from the given source .
355	Import methods from the given source .
356	Import all methods from the given source .
357	Returns a new Function with the given name .
358	Returns the value of the given function or raises an exception .
359	Returns the AST representation of the method .
360	Returns a proc that returns the result of calling the function .
361	Returns an array of values from the given pattern .
362	Interpolates a string into a string .
363	Add commands to the before context .
364	Create a new window .
365	Add a tab to the current context .
366	Runs the given commands in the context .
367	Set a write operation on a key .
368	Write a DELETE command .
369	Write a TOUCH command .
370	Write a set exists command .
371	Set the read header for a key
372	Set the operation for the given key .
373	Write the header .
374	Write the header with the given policy .
375	Returns true if all nodes are done
376	Get a connection from the pool .
377	Parse an Aerospike record .
378	Returns a random node
379	Returns the node with the given name
380	Prepend a set of bins to a key .
381	Get the header for the given key .
382	Execute a batch exists command for the given keys .
383	Register an Aerospike UDF .
384	Remove a udf from the cluster .
385	Returns a list of UDFs
386	Execute a UDF on the cluster .
387	Create an index on the cluster .
388	Drop an index from a set .
389	Scan a node in the cluster .
390	Drop a user from the cluster .
391	Change the password of a user .
392	Grant roles to a user .
393	Query all users in the cluster .
394	Returns the next record in the queue .
395	Iterate over all records in the collection .
396	Create an intercom script tag .
397	Move a vector to a new location .
398	Returns the absolute size of the tile .
399	Returns the screen position of the map .
400	Returns the map position .
401	Returns true if the given point is in the map
402	Animate the image once .
403	Draw the image .
404	Update the image .
405	Draw the image .
406	Set the text .
407	Sets the position of the node .
408	Draw the image .
409	Draw the value at z_index .
410	Update the mouse position .
411	Set the value of the button .
412	Draw the image .
413	Draw the text .
414	Write a line .
415	Write a breaking paragraph .
416	Add a message to the global queue .
417	Returns the index of the first entry that matches the given message .
418	Check the timestamps of the monitorings .
419	Create a global definition for the given fit entity .
420	Check if the device info record is valid
421	Open a log file .
422	Set the FIT file type .
423	Check if the activity is valid .
424	Returns the total gps distance in meters .
425	Returns the vo2max value for this user .
426	Write the data to the given IO .
427	Create a new fit data record .
428	Check if the activity contains any laps in the FIT file
429	Register a new field .
430	Register a field with the given number .
431	Check if the captcha field is blank .
432	Deliver the contact .
433	Returns the mail form attributes for this object .
434	Start the server .
435	Restart the server .
436	Create a new client .
437	Upconfig the zk server .
438	Create a new zookeeper instance with the given options .
439	Creates a new collection .
440	Clean up the instance directory .
441	Returns a list of all the signals for this class .
442	Add another Duration to this Duration .
443	Returns the number of days from the beginning of the week
444	Reset to the initial state .
445	Advance the progress bar .
446	Yields each element in the collection .
447	Update the configuration .
448	Render the current line .
449	Move the cursor to the next row .
450	Write data to the terminal .
451	Finish rendering .
452	Stop rendering .
453	Log a message to the console .
454	Pads the message to fit the last render width .
455	Lock the object if it is not already locked
456	Setup the tracery
457	Expand and post the given text using the grammar .
458	Runs the on_reply and on_boost callbacks .
459	Send a reply to an account .
460	Runs the on_reply callback .
461	Stores the mention data .
462	Setup the streaming client
463	Parse the service name from a path .
464	Connect to any of the servers .
465	Write data to the socket .
466	Reads a number of bytes from the socket .
467	Close the socket .
468	Returns true if the socket is alive .
469	Connect to a socket .
470	Write data to the socket .
471	Connect to the given address using the given ssl context .
472	Sets the party mode for this topology .
473	Get the first device IP
474	Get the topology of the first device .
475	Find a resource by its ID
476	Returns a list of all items .
477	Validate the given form .
478	Creates a new Validator instance .
479	Adds or updates an XML element .
480	Returns an IPMT value .
481	Returns the nper for the given rate .
482	Calculates the PMT factor .
483	Returns a newton rate .
484	Calculate the number of cashflows for a discount .
485	Returns the irr value for the given values .
486	Returns a newton iteration .
487	Returns the summary of the event .
488	Load the file into memory .
489	repacks a file or memory .
490	Loads a relationship from the resource .
491	Returns a native representation of the response body .
492	Call a function on the given address .
493	Send a function to the server .
494	Parse the url .
495	Call a method on the server .
496	Returns the JSONRPC params for the given method .
497	Create a new Faraday connection .
498	Send a transfer transaction .
499	Replace the data with a new value .
500	Returns a JSON representation of the object .
501	Creates a new instance of Time with the given label .
502	Creates a new group with the given arguments .
503	Creates a new group with the given arguments .
504	Authenticate the client with the given options .
505	Creates a new object with the given uuid .
506	Create a PBXFileReference with the given path and uuid
507	Add a file reference to the project .
508	Remove all seeds
509	Configure the build phase .
510	Returns true if the given file is a valid source file
511	Creates a new Aspell instance .
512	Returns a list of files to check
513	Read the spell config file .
514	Report duplicates between two dictionaries .
515	Get the configuration for the spell .
516	Checks the file for misspelled lines .
517	Check if the given path is writable
518	Check that an option is not already used
519	Post - processing
520	Returns an array of entities for the current directory .
521	Convert a string to a byte array .
522	Packs a set of files .
523	Packs the symbolic links .
524	Packs an array of entities .
525	Creates a new list header .
526	Creates a list body component .
527	Renders the td content for a column .
528	Creates a new CardBody component .
529	Renders the footer of the card
530	Add a group to the list .
531	Render an image box .
532	Add an HTML item to the list .
533	Returns the html options for this component .
534	Creates a new Nav component .
535	Renders the alert body .
536	Returns whether the content is a tap or not .
537	Adds the html data to the component .
538	Add html data to html options .
539	Returns the name of the header .
540	Add a column to the table .
541	Renders a DropdownLink widget .
542	Create a new rails plugin .
543	Copy the gem to the site directory .
544	Make a map from an item .
545	Returns an array of files for the given class .
546	Returns a list of files matching the given extension .
547	Dispatch a command to the server .
548	Creates a new SparkEngine instance .
549	Loads the fixtures for the given name .
550	avoid duplicate image names
551	Returns the scope params for the current request
552	Convert pkey string to hash
553	Update the values of the model .
554	Returns true if update_params is valid for scope
555	Acquire a new lock .
556	Unlocks a token from the cache .
557	Apply the given options to this object .
558	Show the notification .
559	Update the notification .
560	Download data from Youtube .
561	Returns the value for the given method .
562	Convert the options hash to a command string .
563	Returns a new Options object with the given hash .
564	Returns the value for the given method .
565	Modify all keys in the store by applying the given block .
566	Sanitize the keys .
567	Returns a representer for the given format .
568	Creates a variable text field .
569	Set the home position .
570	Draw a border
571	Reset the barcode fields to default values
572	Draw a Barby Code39
573	Adds a field to the label data .
574	Apply the slug to the current locale .
575	Returns true if the record is new with a slug
576	Returns true if the slug has changed
577	Returns a string representation of the distance between two dates .
578	Calculates the approximate distance between two dates .
579	Track an error .
580	Process a batch
581	Process all pre - processors for the given control
582	Executes the post - processors for the given control .
583	Execute the dependencies of a control .
584	Execute all screens for the given control .
585	Creates a new RedisKey instance .
586	Normalize a set of redis keys .
587	Create a redis alias for the given name .
588	Store redis keys
589	Returns a hash of redis configuration options .
590	Returns true if the model exists .
591	Check if an alias exists
592	Returns true if the item is valid for the given redis key .
593	Validate that the redis key is valid
594	Returns a hash of redis_fields_config
595	Find a model by its alias name
596	Get an object from the database .
597	Get an item by its alias key
598	Create a new instance with the given key
599	Converts a value to redis
600	Transform a value to a given type .
601	Parse a value to a given type .
602	Update the object with the given arguments .
603	Destroy all aliases
604	Add an account to the keychain .
605	Get the nsqds for a given lookupd
606	Discovers multiple nsqlookupds at once .
607	Calls the given block with retries .
608	Show all the children of this object .
609	Parses the given string and returns the next repeat .
610	Find a node by its name .
611	Find a field in this segment .
612	Parse the given string .
613	Returns a string representation of the object .
614	Returns the regular expression for this field .
615	Find the field with the given name .
616	Parse a loop definition from a string .
617	Create a new loop instance .
618	Process a loop .
619	Process a X12 segment
620	Returns a string representation of this node .
621	Calculate the sortable values for each response field .
622	Normalize the responses of the form
623	Audit responses
624	Creates a new NodeBuilder .
625	Creates a new builder with the given arguments .
626	Creates a new Rewriter instance .
627	Creates a new Selection instance .
628	Adds a configuration hash to the class .
629	Check if the given pid exists .
630	Wait for a process to exit .
631	Upload module changes to remote repository .
632	Get the branches and revision infos for the given sha1s .
633	Get the revision info for a given revision .
634	Commit changes to the repository .
635	Get the riminfo for a given revision
636	Copy the files from the source repository to the destination directory .
637	Get the rev history status for a given revision
638	Returns a RevStatus object for the given revision .
639	Returns the module status for a given revision .
640	Returns a RevStatus object for the given directory .
641	Builds the history status for a given revision .
642	Returns a RevStatus object for the given revision .
643	Sync the git repository to the remote repository .
644	Synchronizes the modules .
645	Returns true if the given rev is an ancestor of the given ancestor .
646	Get the parent of the given rev .
647	Returns a string containing the commit message .
648	Returns an array of OpenStruct objects representing the pmmap extensions .
649	Returns an array of os objects grouped by name .
650	Calculate the checksum for the given directory .
651	Returns the current branch
652	Returns true if the given branch is a remote branch
653	Returns the SHA1 of the given revision .
654	Return a hash with the rev info for a given revision .
655	Returns a list of remote branch refs
656	Export the given revision to the given directory .
657	Creates a temporary directory for exporting the given revision .
658	Upload the modules to Rim .
659	Upload all modules in parallel .
660	Returns a list of all the revisions for a given revision .
661	Fetch the module from the remote repository
662	Assign an attribute to an item .
663	Creates a new instance of the Factory .
664	Create a new crank job .
665	Calls the method on the view context .
666	Creates a new Presenter for the given object .
667	Pushes a gem to the server .
668	Returns an interpolator for the given interpolant .
669	Returns a lines selector for the given target and attributes .
670	Get the number of requests for this client .
671	Build a date select shell .
672	Returns the label for the given method .
673	Read the value from the input stream .
674	Pack a value .
675	Returns a new instance of RSpec .
676	Returns an array of Jekyll static files
677	Returns an array of all the asset files .
678	Get daily activity report data
679	Run a report request .
680	Generate a unique string .
681	Draw the paperback .
682	Generates a report from XCov .
683	Output the report .
684	Process the report .
685	Update the CRC with the given data .
686	Make an HTTP request to the API .
687	Creates a new string generator .
688	Convert a string value to a Time object .
689	Convert the values to a hash .
690	Notify the user of a message .
691	Runs the given command on the child process .
692	Wrap a list of strings with the given width .
693	Save the data to the database .
694	Delete a reference by its key .
695	Merge this hash with another hash .
696	Add a strong reference to an object .
697	Returns the object of the reference .
698	Delete a key from the map .
699	Add a reference to this object .
700	Creates an OAuth2 client .
701	Creates a default middleware .
702	Load the request params and format
703	Returns a hash with error information .
704	Setup the Nimbu instance .
705	Returns the arguments for this command .
706	Reset the configuration to the defaults .
707	Returns an array of invalid FTS filters .
708	Add all the parameters to the object .
709	Set the parameters from the given hash .
710	Creates a new parameter .
711	Returns true if the module has a parameter named + name + .
712	Returns the parameter with the given name .
713	Set the value of a parameter .
714	Iterate over all parameters in this module .
715	Creates a new DataMapper instance .
716	Commit the transaction .
717	Yields this transaction within the given block .
718	Read the next message from the stream .
719	Creates a new Report instance .
720	Infer the type of a field .
721	Validates an instance node against this survey .
722	Returns true if this node is the root of the given instance node .
723	Build a link between this node and another node .
724	This method is called before the node map is destroyed .
725	Validate the value of an instance node .
726	Returns true if the given instance is answered .
727	Returns true if the given instance is answered .
728	Returns a clone of this node .
729	Returns an array of ancestors until the node is not an ancestor of the given class .
730	Returns an array of all children that are not an ancestor of the given class .
731	Returns true if this node has infinite loops
732	Validate the instance node against the minimum value .
733	Checks if the given instance node is valid .
734	Returns true if the node is valid .
735	Returns the question for this node .
736	Returns the next question in the survey .
737	Remove the link from this question .
738	Returns the index of the sibling of this node .
739	Move the node up .
740	Move the node to the right .
741	Checks if the given instance node is valid .
742	Returns the number of nodes above this node .
743	Returns the number of nodes below this node .
744	Validate that the value is within the maximum length of the node .
745	Build the first question for the given node .
746	Returns an array of edges
747	Validate the parent instance node .
748	Update the question type .
749	Remove an answer from this question .
750	Builds an answer from an answer node .
751	Remove the link from this survey .
752	This method is called before the survey is destroyed .
753	Creates a table for the given collection .
754	Returns the default class for the given collection .
755	Returns an array of events for the given targets .
756	Returns the writer for the given format .
757	Add an animation group to the scene .
758	Adds a mouse movement action .
759	Add a notification to the list of custom notifications .
760	Fire events for held buttons
761	Fire events for a custom notification .
762	Dispatches an event to the target .
763	Add a model to the model hash .
764	This method is called after the actor is initialized .
765	Fire events for the current state .
766	Add events to the current state .
767	Define a new control .
768	Create a new window and show it
769	Show the rectangle in the scene .
770	Returns a string representation of the table .
771	Add a cell to the table .
772	Returns an array of action links .
773	Renders a link to an action .
774	Adds a scene to the scenes hash .
775	Apply post filters to a new scene .
776	Returns a hash with the default missing scene .
777	Returns an array of all scenes for the given scenes
778	Returns the given actor or actor name .
779	Fire events for a notification .
780	Enqueue an update operation after the given number of milliseconds .
781	Adds actors to the scene .
782	Register all animations for this actor .
783	Register an actor factory .
784	Update all the updaters .
785	Draw all the drawers .
786	Transition to the given scene or scene name
787	Prepare to transition from scene to new scene .
788	Returns a hash of all drawers that can be saved to the view .
789	Create a new model .
790	Load properties from the options hash .
791	Get all the activities for a user .
792	Get the body measurements for a user
793	Returns a list of Weights for a user .
794	Get a user s sleep series
795	Perform an HTTP request .
796	Set the content type of the file .
797	Send a request to a channel .
798	Fetch a response from a channel .
799	Register an event handler .
800	Download the source .
801	Check the files in the feed definition .
802	Check the columns of each file .
803	Fetch the HTTP fallback identifier from the head request .
804	Define a parameter method with the given names .
805	Find the columns in the CSV file .
806	Map a set of models to a Nidyx object .
807	Generate an object from the schema .
808	Resolve array references
809	Parses the schema and writes the results to the output directory .
810	Read a JSON schema from the given path .
811	Returns the signature of the given params
812	Yields each resource file in the folder .
813	Yields each Webspicy resource .
814	Returns the real url for the given url .
815	Convert a filter to a proc .
816	Creates a new Folder object .
817	Returns the Finitio data system .
818	Run the task for the given direction
819	Sets the status of the migration failure .
820	Returns whether the task is runnable or not .
821	Returns true if the task is completed or false if it is not .
822	Step the status .
823	Time it to run the task
824	Print a list of paragraphs .
825	Returns a hash representation of the columns .
826	Renders the pages and directories .
827	Add a page to the page list .
828	Adds aliases for the given page to the given path hash .
829	Parse the headers from the given content file .
830	Returns a hash of all variable files for this page .
831	Returns the last menu at the given depth
832	Returns the name of a string .
833	Removes all HTML tags from the given string .
834	Populate the node with the children .
835	Returns a string representation of the tree .
836	Returns the parent of the given heading .
837	Returns the ID of the given type .
838	Returns a link to show info .
839	Link to a route
840	Link to trust request
841	Sends a trust request to the browser .
842	Render the page to a file .
843	Symlinks the given path to another path .
844	Renders the content files for this page .
845	Get a friend
846	Get a user listing
847	Comment a thing
848	Submit a user to a subreddit .
849	Vote a user
850	Returns true if the given string is correct .
851	Returns a text field with a random answer .
852	Delete an image from a subreddit
853	Set the stylesheet for a subreddit
854	Subscribe to a subreddit
855	Get all the reddits for this user
856	Get all reddits
857	Add a moderator to a subreddit .
858	Add a user to a friend
859	Bans a user
860	Remove a moderator from a subreddit
861	Remove a user from a subreddit .
862	Unban a user
863	Returns a response from the Webserver
864	Log in to T2 .
865	Authenticates to T2 .
866	Delete a user
867	Returns a list of messages
868	Clear flair templates
869	Delete a user s flair
870	Delete a flair template
871	Set the flair configuration for a subreddit .
872	Send a flair csv to a subreddit .
873	Create a new user s flair template
874	Select a flair template
875	Toggle flair mode
876	Get a list of comments
877	Get the listing for a specific subreddit .
878	Distinguish a user from another user .
879	Remove an item from the modhash
880	Get modlog for a subreddit
881	Send a POST request to Maxmind .
882	Set the lifespan .
883	Returns a div of the code .
884	Sets the instance variables .
885	Render the object with the given method .
886	Join a collection with a string or a block .
887	Open a publication session for a channel .
888	Post a message to a topic .
889	Expire a message from a session .
890	Validates that the value is not blank .
891	Validates the given XML
892	Default Savon options .
893	Read a publication from the server .
894	Open a session for a channel .
895	Post a message to a topic .
896	Expire a request .
897	Read a response from the server .
898	Remove a response from a request .
899	Create a new session .
900	Post a response to a request .
901	Create a channel
902	Add security tokens to a channel .
903	Remove security tokens from a channel .
904	Get a channel by its URI .
905	Returns a list of channels .
906	Update the backend
907	Set the phrase .
908	Returns a string representation of this Time object .
909	Convert the latitude to the specified format .
910	Get a list of all projects
911	Get a project by its ID .
912	Get all the experiments for a project .
913	Get an experiment by ID .
914	Get the stats for an experiment .
915	Returns a list of variations for an experiment .
916	Get a variation by ID .
917	Returns an array of audiences for a project .
918	Returns the audience with the given ID .
919	Perform a GET request to the given url .
920	Get a set of keys from the cache .
921	Get a random number from the given number of bytes
922	Returns a random number with the given bit length .
923	Add a column to the query .
924	Returns a list of keys in the database .
925	Render an autocomplete field to add an item .
926	Fetch a record from the database .
927	Search the database for the given expression .
928	Returns the frequency of the given string .
929	Return the top n scores .
930	Set the background and color of the image .
931	Create a new Cabinet object .
932	Returns a list of all keys in the database .
933	Get a value from the BTree .
934	Set the value of a key .
935	Remove a key from the map .
936	Returns a list of all keys in the map .
937	Set the value of the element at the given position .
938	Returns a list of all keys in the tab .
939	Returns a hash with the values for the given keys .
940	Raises a TokyoError
941	Yields each item in the list .
942	Find an icon by its name .
943	Get the columns of a table
944	Returns true if the column is numeric .
945	Deal with a valid option .
946	Creates a new context with the given arguments .
947	Expects the subject to raise an error .
948	Expects the subject to not raise an error
949	Login a user to Janus .
950	Removes the user from the Janus session .
951	Set the user for the current session .
952	Unset a user from the janus session
953	Returns the user for the given scope .
954	Returns the namespace of the application .
955	Extract the version number from the CDN .
956	Warm up the cache .
957	Warm up the cache from local files
958	Warm up the cache from the CDN
959	Returns the default cache path .
960	Download the cache file .
961	Sends a message to the console .
962	Check if cache version is up to date
963	Fetch the version from the cache .
964	Create a new SBDB
965	Runs the strategies for the given scope .
966	Run the given strategy .
967	Runs the given script .
968	Prints a hex string .
969	Read input by 6 words
970	Returns an array of select statements .
971	Update an index .
972	Returns the first row of the result set
973	Dispatches a method to the worker .
974	Add a node to the layout .
975	Returns the node with the given name .
976	Converts an attribute list to a canonical hash .
977	Imagine the given character or model .
978	Sets the current hash to the given hash .
979	Creates a new blank instance with the given exception class or message .
980	Check if the file length is excesive
981	Sends a POST request to the API .
982	Perform a multi - search .
983	Adds a whereabouts method to the model .
984	Sets the validators for the given class .
985	Create a new address class .
986	This is the main event loop .
987	Returns a hash of attributes and their values .
988	Checks if the given version is supported by Bugzilla .
989	Run the server .
990	Validate the options passed in .
991	Find all the mails in the imap .
992	Convert a string to rainbow
993	Returns a prime that is large enough for the given input
994	Enhance content with the given separator .
995	Convert an integer to a string .
996	Convert a string to an integer .
997	Convert a character to a code point
998	Returns true if the string is a subset of the charset .
999	Returns an array of Point objects .
1000	Validate the metadata file .
1001	Notify the server of a create event .
1002	Notify the server of changes that have been saved .
1003	Notify the server that the channel has been destroyed .
1004	Sets the logger for the given object .
1005	Returns a hash of rates for this scraper .
1006	Parse the source string .
1007	Grab a string from the source .
1008	Get comments for a list of bugs
1009	Save the persist state to disk .
1010	Read all pages from the database .
1011	Read a response from the producer .
1012	Add a line filter .
1013	Write each node to stdout .
1014	Replace all nodes with the given template .
1015	Rename all nodes with the given template .
1016	Commit the page with the given markup .
1017	Commit the history of the given revisions .
1018	Scan the spec string and add it to the specification list .
1019	Convert the body to textile .
1020	Prints a string to the console .
1021	Execute a command and return its exit code .
1022	Upload a file to the remote server .
1023	Download a file to the remote server .
1024	Write data to a remote file .
1025	Returns the distance between this point and another point .
1026	Returns true if the given point is within the bounding box
1027	Send a method to the subject .
1028	Output the result of the match .
1029	Get information about a user .
1030	Adds a block to the options hash
1031	Add a column to the table .
1032	Declares columns from a hash .
1033	Create a new Dreader instance .
1034	Returns the line number for the given exception .
1035	Returns a list of backtrace locations for the given exception .
1036	Drain the given queue .
1037	Returns a hash representation of the nodes .
1038	Get a single sentence from the API .
1039	Returns the list of nodes .
1040	Builds a list of sentences from a hash .
1041	Read all pages from the database .
1042	Filters the results based on the given params .
1043	Returns a list of sites .
1044	Get a site query
1045	Returns the rate time for the given currency code
1046	Set the output file .
1047	Log a message to the logger .
1048	Returns a hash with the option names and fields as keys .
1049	Returns an array of all the selected options .
1050	Transmits a packet .
1051	Returns true if this block is an ancestor of the given block_start .
1052	Returns a hash of all built - in object ids
1053	Creates a new instance of Clacks .
1054	Reopen the given io with the given path .
1055	Check if a process is running .
1056	Write the pid to a file .
1057	Parse the mead string .
1058	Load documents from a list of file names .
1059	Save all documents to a file .
1060	Prints all the documents .
1061	Runs the given block on each of the given files .
1062	Returns a selection of nodes that match the given paths .
1063	Returns a selection that matches the given selectors .
1064	Execute the given program and block .
1065	Yields each node in the selection .
1066	tagify the input string
1067	Creates a new OptionGroup instance .
1068	Create a new Caramel configuration file
1069	Set the jobs_active_record_relation_symbol for this workflow
1070	Check if we need to retry an exception record .
1071	Run the mixml tool .
1072	Returns a list of all entities .
1073	Returns true if the request was successful .
1074	Get a single resource .
1075	Perform a PUT request .
1076	Make an HTTP request to V3 .
1077	Add a token to the marking .
1078	Get the credentials for the current user .
1079	Perform a GET request .
1080	Sends a POST request to the server .
1081	Sends a POST request to the server .
1082	Perform a PUT request .
1083	Make an HTTP PUT request .
1084	Authenticate to AMEE
1085	Returns true if the response is ok .
1086	Perform an HTTP request .
1087	Runs the request and returns the response .
1088	Create a new TimedPlace .
1089	Returns the transition with the given name .
1090	Stop the simulation .
1091	Define an output arc .
1092	Fire the event .
1093	Sends a POST request to the server .
1094	Install librarian
1095	Install librarian modules
1096	Get a Crisis by its identifier .
1097	Get the current crises stats
1098	Get user stats
1099	Creates a new instance of this class .
1100	Adds an array of tokens to the token store .
1101	Delete one or more tokens .
1102	Add joins to the query .
1103	Add where clauses to the query .
1104	Load the classes from the result .
1105	Search for a word in the database .
1106	Returns a hash containing all the words that match the query .
1107	Returns the authorization header for the client login .
1108	Returns the folder for the current app .
1109	Find the first version . rb file in the app folder .
1110	Returns the version of the current application .
1111	Bump the app version to the given version .
1112	Load the project .
1113	Prints the help message for the current app .
1114	Add an array of objects to the queue .
1115	Set the time of the clock .
1116	Sends a message to the WebSocket .
1117	Sends a POST request to the API .
1118	Delete a resource .
1119	Returns the metadata for the given instance .
1120	Returns a hash of Vagrantomatic instances metadata .
1121	Reads a CSV file .
1122	Write data to a CSV file .
1123	Convert an array of rows to a string .
1124	Add a value to this object .
1125	Rotate a set of EC2 instances .
1126	Wait until all instances are in the specified state .
1127	Reads the file at the given path .
1128	Write a value to a file .
1129	Returns a list of all the files in a directory .
1130	Returns the sum of the totals for each model .
1131	Returns the sum of all the totals for this model .
1132	Returns a label with the timestamp and nanosecond .
1133	Add an object to this context .
1134	Sets the object configurations for this object .
1135	Create a new Httperf job .
1136	Returns a url with the given path and params .
1137	Returns true if the given string is a valid URL
1138	Assumes that two objects are equal .
1139	Assures that the given object is of the given class .
1140	Validates that the given object is a non - empty string .
1141	Assit a block .
1142	Poll for a given number of seconds .
1143	Get the maindata for a given response_id
1144	Add trackers to a torrent .
1145	Download a list of URLs .
1146	Delete a torrent and its data .
1147	Set the location of a torrent .
1148	Increase the priority of a torrent .
1149	Decreases the priority of a torrent .
1150	Maximize the priority of a torrent .
1151	Minimize the priority of a torrent .
1152	Set the priority of a file .
1153	Set the download limit for a torrent .
1154	Set the upload limit for a torrent .
1155	Returns the MD5 digest of a file .
1156	Returns an array of keys .
1157	Yields each value in the bucket .
1158	Run a command .
1159	Get the list of clicks
1160	Builds a list of instances .
1161	Checks if the given scope name is defined in the record class .
1162	Sets up the configuration object .
1163	Mark new entries as seen
1164	Set the header options for the given curl object
1165	Store the feed summary to the backend .
1166	Returns an error manager for the given URI .
1167	Perform an HTTP request .
1168	Make an HTTP GET request .
1169	Perform an HTTP DELETE request .
1170	Make an HTTP PUT request .
1171	Sends a POST request to the API .
1172	Get an article by ID .
1173	Upload an image from a file .
1174	Sends an HTTP PUT request to the given URI .
1175	Returns the relative path of the given path .
1176	Create an index from a directory .
1177	Sets the accessors for this table .
1178	Adds a row to the row list .
1179	Returns the HTML for a footnote .
1180	Returns the HTML for a footnote .
1181	Create an instance action .
1182	Adds an error to the errors hash .
1183	Returns an array of coordinates of neighbors between x and y .
1184	Returns the RSRoot Merchant object for the given id .
1185	Encode a text frame .
1186	Add a permission to the admin role .
1187	Sends a POST request to the API .
1188	Create a network
1189	Create a network port .
1190	Move a port to a list of subnets
1191	Write JSON data to the response .
1192	Redirect to the given url .
1193	Get a list of servers
1194	Create a new server
1195	Add an action to a server
1196	Delete an image
1197	Get a resource from the API .
1198	Sets the basepath for this file .
1199	Returns the list of commissions .
1200	Get the leagues for the current season
1201	Returns an anonymous method that matches the given arguments .
1202	Fetch a value from the table .
1203	Returns the value at the given column .
1204	Returns the values at the given columns .
1205	Set the value of an accessor .
1206	Authenticate to the Unfuddle API
1207	Get a list of routers
1208	Create a new router
1209	Delete a router interface
1210	Returns the first object matching the given method .
1211	Load the configuration files .
1212	Returns a list of providers .
1213	Returns a list of all the categories .
1214	Creates a new instance of this class .
1215	Check if the plan is up to date
1216	Creates a new instance with the given name and arguments .
1217	Returns the list of deals for this query .
1218	Get the rsqoot deal with the given id .
1219	Returns the total deals for the current page .
1220	Returns an array of deals with the same title .
1221	Loads the cookies from a file .
1222	Dump the cookies to a file .
1223	Set the value of an element .
1224	Update by expiration time
1225	Perform a GET request .
1226	Returns a list of images .
1227	Create an image .
1228	Replace the memberships for an image
1229	Add a member to an image .
1230	Create a directory .
1231	Copy a file to a directory .
1232	Copies a file to another directory .
1233	Creates a symlink to a file .
1234	Change the mode of a file .
1235	Removes the given directory and creates it .
1236	Copy the metadata from src to dst .
1237	Write a block to a temporary file .
1238	Handles incoming requests .
1239	Read the config file and parse it into a hash
1240	Returns an array of email addresses .
1241	Add a plural rule to the list .
1242	Add a singular rule to the list .
1243	Generate a regular expression for the given singular and plural .
1244	Execute the command .
1245	Creates the output directory .
1246	Run all the jobs in the queue
1247	Authenticate a user with a password .
1248	Add a service to the system .
1249	Add an endpoint
1250	Get all endpoints for a token
1251	Disable a method .
1252	Creates a new instance of the disabled method .
1253	Execute a method on an object .
1254	Adds a method to the class .
1255	Convert a secret to a public key .
1256	Returns true if two points are the same .
1257	Returns the x corresponding to the given y .
1258	Decompress a point .
1259	Convert a secret to a public point .
1260	Returns the first part with the given name .
