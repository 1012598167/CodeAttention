0	Prints the summary of the result .
1	Find any bad files in the output
2	Confirm that the EJSON keys secret is not prunable
3	Returns the compressor for the current system .
4	Create . bff file
5	Find all files that match the given pattern .
6	Synchronize a directory with another directory .
7	Returns the relative path for the given path and parent .
8	Clean up any previously mounted disks .
9	Copy assets to dmg
10	Renders the doc - transform file .
11	Renders the package metadata .
12	Check for bad libraries in otool
13	Check for bad libraries
14	Check the LDD file for bad libraries .
15	Calls shellout with the given command .
16	Check if current_library has unsafe dependencies
17	Digest the file at the given path .
18	Updates the digest with the contents of a file .
19	Returns the list of packages that should be published .
20	Renders the distribution . xml . erb file .
21	Returns the artifact for the given artifact .
22	Creates a build for the given list of packages .
23	Creates a new Artifactory client .
24	Returns a hash of metadata properties for a package .
25	Returns the remote path for the given package .
26	Sets the parameters of the request .
27	Adds a Wix Light Extension .
28	The wix - light - delay - validation option .
29	Adds a WixCandle extension .
30	Renders the localization file .
31	Renders the parameters . wxi . erb file .
32	Renders the source . wxs . erb template .
33	Renders the bundle . wxs . erb template
34	Resolve a dependency to its build version .
35	Append build start time if not present
36	Returns true if the given version has a timestamp
37	Construct a build_version based on the source type .
38	Renders the content of a template .
39	Add a deprecation warning to the log .
40	Add a message to the log .
41	Execute a shell command .
42	Make a new project .
43	Create an appbundle command .
44	Create a rake build command .
45	Create a touch command .
46	Delete all files in the given path .
47	Copy files from the source directory to the destination directory
48	Update config . guess and config . sub .
49	Write the tarball to the staging directory .
50	Packaging the package into a tarball .
51	Clean up the project directory .
52	If the downloaded file is an archive copy it to the project directory .
53	Extract the downloaded file to a temporary directory .
54	Returns the digest type of the checksum .
55	Verify the checksum of the downloaded file .
56	Generate a signing identity hash .
57	Signs the given package file .
58	Returns the certificate subject for this certificate .
59	Returns the manifest entry for the given name .
60	Sets the source for this repository .
61	Returns the version of the software .
62	Add a file to the whitelist .
63	Returns the path to the downloaded project file for this software .
64	Prepend a path to the current environment .
65	Returns the overrides for this project .
66	Returns the current version for the cache .
67	Returns the fetcher instance for the given source .
68	Returns the SHA256 digest of the project and the builder .
69	Canonicalizes a source hash .
70	Write makeselfinst . erb template to staging_dir
71	Create cache directory if it doesn t exist
72	Returns the tag for this software .
73	Perform incremental cache update
74	Removes all required git directories .
75	Renders the AppxManifest . xml . erb template
76	Execute a shellout command .
77	Runs the shellout command with the given arguments .
78	Try to retry the given block with a number of retries .
79	Returns a safe path for use with windows .
80	Returns a safe path for the given path .
81	Create a directory
82	Remove a directory .
83	Copy a file
84	Remove a file from the filesystem .
85	Creates a file at the given path .
86	Creates a symlink between two files .
87	Validate the project s license information .
88	Returns the content of the project license file .
89	Returns a map of component names to license information .
90	Process transitive dependency licensing information
91	Collect license files for a given software .
92	Write prototype file to staging directory
93	Returns the content of the package file .
94	Validates the package .
95	Returns the key for the given package .
96	Returns the version number for this build .
97	Returns the start time of the build .
98	Save the model to disk .
99	Returns the Omnibus vendor .
100	Sets the license for this project .
101	Returns the absolute path to the build file .
102	Executes the given block with the RPM signing passphrase .
103	Publishes a package with the given pattern .
104	Sets the build version for this project .
105	Register a package with the given ID .
106	Adds a block to the compressors hash .
107	Override a configuration variable with a value .
108	Returns the path to the license file .
109	Returns true if the given software is a dependency of this software .
110	Builds the manifest for this version .
111	Write the text manifest file .
112	Renders the conffiles . erb template for the project .
113	Returns the total size of the package .
114	Returns true if the directory is empty .
115	Force the project directory to be recreated .
116	Returns the current revision of the repository .
117	Returns true if the given revision is a commit .
118	Convert to SSH format .
119	Compute the number of bits that need to be written .
120	compute minimum DH bits and need bits
121	Builds the signature buffer from the result .
122	Runs the given block when the site is loaded .
123	Returns true if all load validations pass .
124	Raises an UnsupportedBlockError if has_block is false .
125	Merge find_args and runtime_args .
126	Recombine find_args and runtime_args
127	Returns an array of elements to check .
128	Returns true if the url matches the expected mappings .
129	Returns a hash of component mappings for the given URI .
130	Returns a sanitized URI for this url matcher .
131	Returns the substitution value for the given index .
132	Builds an enumerator for the given number of times .
133	Builds an enumerator from an array .
134	Builds an enumerator for the given LockQueue .
135	Returns an enumerator that iterates over the active records .
136	Build an active record enumeration on batches .
137	Returns an enumerator of batches of size batch_size .
138	reify the object column
139	Returns the limit for the version of the item .
140	This is called when the model is created .
141	Adds a on_destroy hook to the model class .
142	Called when the model is about to be updated .
143	This method is called when the model is touching .
144	Check presence of item subtype column
145	Returns true if the version should be saved .
146	Squashes the given changes .
147	Convert an object to a node .
148	Returns an instance of ancestry_base_class with the specified depth .
149	Sets the orphan strategy .
150	Takes an array of ancestry objects and returns an array of ancestry objects .
151	Takes an array of nodes and yields them to the given block .
152	Builds ancestry from the given parent_id .
153	Rebuild the depth cache .
154	Returns an array of conditions that can be applied to an object .
155	Returns the default params for the request .
156	Returns a hash with all valid options .
157	Resets the GITLAB configuration .
158	Get HTTParty config from options .
159	Start a new timer .
160	Set the timeout for this socket .
161	Returns the amount of time remaining after the given timeout .
162	Builds the schemas for the given parent schema .
163	Create a new schema for the given object .
164	Returns true if the subject matches the conditions .
165	Alias an action to a target .
166	Expand aliased actions .
167	Returns an array of aliases for the given action .
168	Returns the rules that are relevant to the given action and subject .
169	Create a missing file .
170	Calls the given block once for each filename in the directory .
171	Yields each node in the tree in reverse order .
172	Given a path and a block returns a new File object .
173	Calculate the c checksum .
174	Calculate the k checksum .
175	Annotate the barcode with the barcode .
176	Returns an array of all characters in the character set .
177	Returns an array of characters .
178	Returns the checksum of the number .
179	Returns the encoding for the given bars .
180	Render the barcode to a cairo context .
181	Render the image to a png file .
182	Renders the image as a PSSurface .
183	Render the image to a PDF file .
184	Renders the image as an SVG document .
185	Set the maximum number of threads to use .
186	Returns true if the page is online .
187	Perform a HEAD request and get the response .
188	Connect to the database and run migrations
189	Ensure the given commit exists in the given repository .
190	Ensure the parents of the given commit .
191	Ensure that the given user is a follower of the given user .
192	Ensure that the specified user is a follower of the specified user .
193	Ensure that the user with the given email address exists in the database .
194	Ensure a repository exists in the database .
195	Ensure the project_languages table exists for the given owner and repo
196	Tries to retrieve the commits for a fork point .
197	Ensure that the fork point is a fork point .
198	Creates orgs for a given user .
199	Ensure that a user is participated in an organization .
200	Ensure the given user is an organization .
201	Ensure the commit s comments are stored in the database .
202	Ensure the watchers for the given owner and repo exist .
203	Create a list of pull requests for a repository .
204	Ensure that a pull request history entry with the given timestamp exists .
205	Returns true if the PR is an intra branch
206	Returns a list of existing forks for the given owner and repo .
207	Adds a fork to a repository .
208	Returns an array of issues for a given repository .
209	Ensure an issue exists in the repository
210	Returns an array of issue events for an issue
211	Ensure an issue event exists in the repository
212	Returns an array of comments for an issue
213	Ensure an issue comment exists in the repository .
214	Returns an array of labels for a given repository .
215	Ensure that the repo label with the given name exists .
216	Ensure labels for an issue
217	Assign a label to an issue
218	Execute the given block in a transaction .
219	Store a commit
220	Log a message at the given level .
221	Perform a paged API request .
222	Returns the last - modified time for the given URL and etag .
223	Returns the number of pages for a given URL .
224	Parses a list of links .
225	Parses the result of a request .
226	Perform a raw API request .
227	Attaches this socket to the given IP address .
228	Connect to the given adapter .
229	Retrieve a commit by its SHA
230	Retrieve commits from a repository
231	Retrieve all organizations for a user
232	Retrieve a list of stargazers for a user and repo .
233	Retrieve a stargazers watcher for a user and repo
234	Get the events for a repository
235	Retrieve the diff between a master branch and a parent branch
236	Retrieve the default branch for a repository
237	Process the command s options .
238	Validate the options .
239	Create a client for AMQP .
240	Read a value from a hash .
241	Filters the given location .
242	Validate the usage of the responder .
243	Validates the options of the responder .
244	Deliver messages to Kafka .
245	Send a notice signal to the process .
246	Perform an embedding lookup .
247	Takes an array of params and returns the result of the embedding lookup .
248	Load a protobuf file .
249	Assert that two arrays are equal .
250	Returns a list of gradients between two tensors .
251	Create a random normal distribution .
252	Compute the eye of a matrix .
253	Create a GLOROT uniform initializer .
254	Creates a random uniform initializer .
255	Slice an array of numbers .
256	Creates an array of ones .
257	Performs logical AND operation .
258	Reduce the mean of a tensor along the specified axis .
259	Concatenates two arrays or arrays .
260	Dynamic partition operation .
261	Create a where statement .
262	Approximate a floating point value .
263	Calculates the ACOS value of a floating point .
264	Computes the angle of a floating point .
265	Casts the input to the specified data type .
266	Print data to the console .
267	Calculates the magnitude of a floating point
268	Calculates the square root of a floating point .
269	Log a floating point
270	Evaluate a floating point value .
271	Pad a tensor with the given paddings .
272	Create a gather operation .
273	Packs an array of values on the given axis .
274	Unpacks a value into an array .
275	Create a case operation .
276	Add an internal operation .
277	Broadcasts an array of dimensions .
278	Apply a vector operation to two arrays .
279	Transpose an array with perm
280	Add two inputs
281	Return the maximum value of a numeric array .
282	Approximate the absolute value of a floating point value .
283	Computes the cosine of a floating point vector .
284	Computes the floor of a floating point value .
285	Modulo operation
286	Computes the power of two inputs .
287	Computes the product of two inputs .
288	Generate a random uniform value .
289	Create a range operation .
290	Returns the rank of the input .
291	Round a floating point value .
292	Approximate square root of a floating point .
293	Returns the shape of the input tensor .
294	Creates a sigmoid operation .
295	Computes the sin product of two floats .
296	Subtracts two inputs
297	Compute the sum of the inputs along the specified axis .
298	Computes the Tan operation .
299	Computes the Tanh operation .
300	Return the top k elements of input
301	Zero one or more elements .
302	Convert the model to the output file .
303	Add a device to the default device list .
304	Load operations from a YAML string .
305	Assign a value to a variable .
306	Create a new VariableScope for this TensorStream .
307	Creates a TensorStream session .
308	Creates a placeholder .
309	Check if value is a dense tensor
310	Apply data type coercion
311	Add an audio to a customization
312	Create an event
313	Zero pads a string to the specified number of bytes .
314	Check that the length of a string is equal to the given length .
315	Check the length of a string .
316	Check that the given string is a valid HMAC key .
317	Check that the given string is valid UTF - 8 .
318	Authenticates a message .
319	Verify the provided authenticator and message .
320	Creates a new AES - 256 - CBC box .
321	Open an encrypted message .
322	Reopen all appenders .
323	Returns the current logger .
324	Measure a message at the given level .
325	Log the backtrace of the current thread
326	Creates a tagged logger with the given tags .
327	Pushes one or more tags to the logger .
328	Returns true if the given log should be filtered .
329	Log the given message payload and exception .
330	Executes the given block with the given parameters .
331	Measure a method .
332	Add a log to the logger .
333	Initialize a new SemanticLogger object .
334	Assign message payload and exception to the given block .
335	Yields each exception to the given block .
336	Extract the file and line number from the stack .
337	Returns a formatted message for the given corrections .
338	Gather variables from a message .
339	Run the execution .
340	Route a message to a specific tasker
341	Returns true if there is a row waiter .
342	Returns the node with the given ID .
343	Returns a hash of variables for the given node .
344	Returns the on_error_parent of this node .
345	Decrement the count by one .
346	Lock the queue and process the job .
347	Lock a job on all queues .
348	Call the job s method .
349	Override to_ary method_missing to merge options
350	Removes the given params from the URL .
351	Parse user info
352	Run a command asynchronously .
353	Return a random exit code based on rex - simplify - fail - chance
354	Imports a method from a source object .
355	Imports + names + from + source + .
356	Imports all methods from the given source .
357	Returns the result of calling + fn + with + args + .
358	Fetch a function from the store .
359	Returns an AST representation of the command .
360	Returns a proc that can be used as a callback .
361	Interpolates values from a pattern match .
362	Interpolates the given replacement string with the given match .
363	Add commands to the before context .
364	Create a new window .
365	Create a new tab .
366	Runs the given commands in the current context .
367	Set write operation for a set of bins .
368	Write a DELETE command .
369	Write a TOUCH command .
370	Write a SETEXISTS command .
371	Set the header for a read operation .
372	Set operations for a given key .
373	Write the message header .
374	Write a header with a given policy .
375	Returns true if all nodes in the cluster are done
376	Get a connection from the pool .
377	Parse a record from the buffer .
378	Returns a random node
379	Finds a node by its name .
380	Prepend a set of bins to the given key .
381	Get the header value for the given key .
382	Check if a set of keys exists in the cluster .
383	Register a UDF file .
384	Remove a UDF file .
385	List UDFs
386	Execute a UDF on all nodes .
387	Create an index in the specified set .
388	Drop an existing index
389	Runs a scan on the given node .
390	Drop a user from the cluster .
391	Change the password of a user .
392	Grant roles to a user
393	Queries the users in the cluster .
394	Returns the next record from the queue .
395	Calls the given block once for each record .
396	Creates an intercom script tag .
397	Move a vector free by the given speed .
398	Returns the absolute size of the tile
399	Returns the screen position of the map .
400	Returns the position of the map at the given coordinates .
401	Returns true if the given point is in the map
402	Animate the image once .
403	Draw the image .
404	Update the state of the image .
405	Draw the text .
406	Set the text .
407	Set the position of the text .
408	Draw the graph .
409	Draw the gauge .
410	Update the buttons .
411	Set the value of the button .
412	Draw the image .
413	Draw the text .
414	Write a line .
415	Write a breaking paragraph .
416	Add a message to the global queue .
417	Returns the index of the first entry that matches the given message .
418	Check the timestamps of the monitorings .
419	Creates a global field definition for the given fit entity .
420	Check the device info record
421	Open a log file .
422	Sets the FIT file type .
423	Check the activity .
424	Returns the total gps distance in meters .
425	Returns the vo2max of all events and user data .
426	Write the metadata to the given IO object .
427	Create a new fit data record .
428	Check that the given activity is contained in the FIT file .
429	Register a new field .
430	Register an alternate field .
431	Returns true if the captcha is spam .
432	Sends the contact to the user .
433	Returns a hash of mail form attributes .
434	Start the server .
435	Restarts the server .
436	Create a new client .
437	Upconfig a node .
438	Downconfig a Zk node
439	Creates a collection with the given options .
440	Clean up the instance directory .
441	Returns a list of all the signals of the current class .
442	Add two durations .
443	Returns the number of days to the beginning of the week
444	Reset the renderer to its initial state .
445	Advance the progress bar .
446	Iterate over the elements of the collection and yield them to the given block .
447	Updates the configuration with the given options .
448	Render the line .
449	Move the cursor to the next row .
450	Write data to the terminal .
451	Finish rendering .
452	Stop rendering .
453	Log a message to the console .
454	Pads out the given message if necessary .
455	Lock this job exclusively .
456	Set up the tracery
457	Expand and post the given text using the given rules .
458	Runs the user s interact action .
459	Send a reply to an account .
460	Runs the on_reply callback .
461	Store the mention data for this reply
462	Setup streaming client
463	Parse the service name from the given path .
464	Connect to any of the servers .
465	Writes data to the socket .
466	Read a number of bytes from the socket .
467	Close the socket .
468	Returns true if the socket is alive
469	Connect to the given socket .
470	Write data to the socket .
471	Connect to the specified address using an SSL context .
472	Join all speakers to the new master
473	Discover the first device for the zone player .
474	Returns the topology of the first device .
475	Find a resource by ID
476	Returns a list of all items in the collection
477	Validate the given form .
478	Creates a default validation .
479	Update the given XML object .
480	Calculate an IPMT value .
481	Returns the nper for a given rate pmt pv and fv
482	Calculates PMT value .
483	Returns a newton rate of nper pmt pv fv
484	Calculates the total number of cashflows with the given discount .
485	Returns the irr of the given array of values .
486	Returns a newton iteration of r n p x y w
487	Returns the summary of the event .
488	Load the directory tree from the file .
489	Repacks the buffer using a temporary file .
490	Loads a relationship from the resource .
491	Returns a native representation of the response body .
492	Call a function on the given address .
493	Send a function to a private key .
494	Parse the url and set the host port and scheme
495	Call a method on the server .
496	Returns the JSONRPC params for a given method .
497	Returns a Faraday connection
498	Transfer a value to a specific address .
499	Replace the current object with the new object .
500	Returns a JSON representation of the object .
501	Runs the given block in the context of the given label .
502	Group the results of executing the given block .
503	Group the results of the given block .
504	Authenticates the request .
505	Creates a new object with the given UUID .
506	Creates a PBXFileReference with the given path and uuid .
507	Add a reference to a PBX build file .
508	Remove all seeds and locks
509	Initialize the build phase for each target .
510	Returns true if the filename is a valid source file .
511	Returns a new instance of Aspell .
512	Returns the list of files to check
513	Read the config file and return it as a hash .
514	Report duplicates in both dictionaries .
515	Returns a hash with the current configuration .
516	Check the given file for misspelled lines
517	Check if the given path is writable .
518	Raises an error if the option is already used
519	Post - processing of the options .
520	Returns a list of entities in the current directory .
521	Convert a string to bytes .
522	Packs a set of files .
523	Packs symbolic links .
524	Packs the given entities .
525	Creates a list header .
526	Creates a list body .
527	Returns the td content for a given column .
528	Adds a body to the card .
529	Displays the footer of a card .
530	Displays a group of Cards .
531	Displays an image box .
532	Adds an HTML item to the list .
533	Returns the HTML options for this component .
534	Add a nav item .
535	Renders the body of the alert .
536	Returns true if the given content is a tap .
537	Add data to html_data
538	Adds a data attribute to the options hash .
539	Translate a column s header name .
540	Adds a column to the table .
541	Adds a link button to the dropdown .
542	Runs the rails plugin in a temporary directory .
543	Copy the gem to the site directory .
544	Convert an item to a map .
545	Adds the given class to the list of files .
546	Find all assets that match the given extension .
547	Dispatches a command to the server .
548	Watch for changes .
549	Loads the fixtures for the given name .
550	Removes duplicate image names
551	Returns the scope params for the current request .
552	Convert pkey string to hash
553	Update the values of a dynamic scaffold .
554	Returns true if the update params are valid for the current scope .
555	Acquire a lock on the redis server .
556	Unlocks a previously grabbed token .
557	Apply the given options to this object .
558	Show the notification .
559	Updates the notification .
560	Download a video from Youtube .
561	Returns the value associated with the given method .
562	Convert the options hash to a command line .
563	Returns a new options hash merged with this options .
564	Returns the value for the given method .
565	Modifies the keys in the store by applying the given block .
566	Sanitize the keys .
567	Returns a representer for the given format and model
568	Generate a variable text field .
569	Add a home position .
570	Draw a border
571	Reset the barcode fields to default values
572	Draw a Barby Code39 barcode
573	Adds a field to the label data .
574	Applies the slug to all locales .
575	Returns true if the record is new with slugs
576	Returns true if the slug has changed .
577	Returns a string representation of the distance between two times .
578	Calculates the approximate distance between two times .
579	Track an error .
580	Processes the given batch .
581	Processes the given control s pre - processors .
582	Execute post - processors for the given control .
583	Execute the dependencies of a control .
584	Execute all screens in the given control .
585	Validates the redis_key configuration .
586	Normalize a set of redis key metrics
587	Create a redis alias for the given name .
588	Store redis keys for this object .
589	Returns a hash with the configured redis fields .
590	Returns true if the model exists .
591	Check if an alias exists
592	valid_item_for_redis_key?
593	Raises an ArgumentError if the redis key is not valid
594	Returns a hash with redis_fields_config .
595	Find a model by its alias
596	Get a record by id
597	Get a model by its alias key
598	Returns a new instance with the given key .
599	Converts the given value to a redis value .
600	Converts the given value to the given type .
601	Parses the given value according to the given type .
602	Updates the object with the given args .
603	Destroy aliases .
604	Add a user to the keychain .
605	Get the nsqds for a given lookupd
606	Discovers multiple nsqlookupds at a time .
607	Calls the given block with retries .
608	Show all segments and fields .
609	Repeats the given string if it has more than one repeat .
610	Find a node by name .
611	Find a field in this segment .
612	Parses the given string .
613	Returns a string representation of this repeat .
614	Returns the regular expression for this field .
615	Find a field by name .
616	Parses the given string .
617	Create a new loop instance .
618	Processes the given loop .
619	Process a X12 segment
620	Returns a string representation of the loop
621	Calculate the sortable values for each response field .
622	Normalize the responses of the form .
623	Audit responses for each response field
624	Add a tag to the stack .
625	Creates a new Builder with the given arguments .
626	Rewrite this selector to a CSS selector .
627	Select elements by CSS selector .
628	Adds the given configuration hash to this object .
629	Check if the given pid exists .
630	Waits for a process to exit .
631	Upload module changes to remote repository .
632	Given a list of sha1s returns a Struct with branches and revision infos .
633	Get the revision info for a given SHA1 .
634	Commit the given message to the given branch
635	Get the riminfo for a given revision
636	Copy the revision files from the source repository to the destination repository .
637	Get the history status of a given revision .
638	Returns a RevStatus object for the given revision .
639	Get the module status for a given revision .
640	Returns a RevStatus object for the given directory .
641	Builds the history status for a given revision .
642	Returns a RevStatus object for a given revision .
643	Syncs the repository to the remote repository .
644	Synchronize all modules
645	Returns true if the given rev is an ancestor of the given ancestor .
646	Gets the parent of a given revision .
647	Get the commit message for a list of changed modules
648	Returns an array of os objects representing the PMM extensions for the given data .
649	Returns an array of os objects grouped by path .
650	Calculate the checksum of the given RimInfo .
651	Returns the current branch .
652	Returns true if the given branch is a remote branch
653	Gets the SHA1 of a given revision .
654	Return a hash with all the information about a given revision .
655	Returns a list of remote branch refs
656	Export the given revision to the given directory .
657	Export a file within an exported revision .
658	Upload the modules to the remote repository .
659	Upload all modules in parallel .
660	Get the list of revisions that can be uploaded .
661	Fetch the module from the remote repository .
662	Assign an attribute to an item .
663	Build an item and raise an exception if it fails .
664	Create a crank job
665	Override method_missing to call the view context if it exists
666	Creates a presenter for the given object .
667	Pushes a gem to the specified method .
668	Interpolate linear and cubic splines .
669	Returns the lines selector for the given target and attributes .
670	Get the number of requests for a given client
671	Creates a date select box .
672	Generates a label for a given method .
673	Read a value from an input stream .
674	Packs the given value .
675	Check if the method is a Be Has or That operator .
676	Returns an array of Jekyll static files
677	Returns an array of all the asset files in the engine . assets_path
678	Get daily activity report data
679	Create a run report request .
680	Generate a random unique string .
681	Draw the paperback of a QR Code .
682	produce xccoverage report
683	Output the given report .
684	Process a Danger report .
685	Update the CRC with the given data .
686	Perform an HTTP request using the access token .
687	Returns a string with random characters .
688	Convert a string value to a Rational value .
689	Convert the values to a hash .
690	Notifies the user of a message .
691	Eagerly execute a command using PTY .
692	Wrap a list of text .
693	Save the data to the output_path .
694	Removes the reference with the given key .
695	Merge two hashes together .
696	Add a strong reference to an object .
697	Returns the object of the reference .
698	Deletes the value associated with the given key .
699	Add a reference to the stack .
700	Returns an OAuth2 client .
701	Creates a default middleware .
702	Load the adapter from the request parameters .
703	Returns a hash with error information .
704	Sets up the Nimbu configuration .
705	Returns the arguments for this command .
706	Resets the instance variables to their defaults .
707	Returns an array of invalid FTS filters .
708	Add all parameters to the given object .
709	Set the parameters to the given hash .
710	Defines a class parameter .
711	Returns true if the module has a parameter named + name + .
712	Returns the parameter with the given name .
713	Set the value of a parameter .
714	Calls the given block for each parameter .
715	Link all the given things to this repository .
716	Commit the transaction with the given block .
717	Yields this transaction within the given block .
718	Read the next message from the stream .
719	Initializes a new QueryReport .
720	Infer the type of a field .
721	Validates an instance node .
722	Returns true if instance_node is the root node of this node
723	Builds a link between this node and another node .
724	Before destroy_rebuild_node_map is called
725	Validate the instance node .
726	Returns true if the given instance is answered .
727	Returns true if the given instance is answered .
728	Returns a recursive clone of this node .
729	Returns the ancestors until the given class is not an ancestor of the given class .
730	Returns an array of all children that are not an ancestor of the given class .
731	Returns true if this node has infinite loops
732	Validate instance node
733	Validate instance node and question node
734	Validates that the given instance is valid for this node .
735	Returns the question associated with this node .
736	Returns the next question in this question .
737	Remove a link from this node .
738	Returns the index of the sibling node .
739	Move this node up .
740	Move this node down
741	Returns true if the instance node is valid
742	Returns the number of nodes above this node .
743	Returns the number of nodes below this node .
744	Validates the instance node against the given instance node .
745	Builds the first question for the given question node .
746	Returns an array of edges for this graph .
747	Validate parent instance node
748	Updates the question type .
749	Remove an answer from this question
750	Builds an answer for this question .
751	Remove link to next question
752	before_destroy_rebuild_node_map is called
753	Creates a table for the given collection .
754	Returns the default class for the given collection .
755	Returns an array of events for the given targets .
756	Returns the writer for the given format .
757	Animate an actor or actor name .
758	Adds a mouse movement action .
759	Adds a notification to the list of custom notifications .
760	Fire events for held buttons
761	Fire events for a specific notification .
762	fire event for notification
763	Adds a model to the models_hash .
764	Called after the actor has been initialized .
765	Fire events for the given notification .
766	Add events to current state .
767	Defines a control with the given name .
768	Starts the window and displays it .
769	Show the rectangle .
770	Renders the table data .
771	Adds a cell to the table .
772	Renders the action cells for the given actions .
773	Renders a link to an action .
774	Adds a scene to the scenes hash .
775	Apply post filters to a new scene .
776	Returns a hash with a default missing scene .
777	Returns an array of all scenes for the given scenes .
778	Returns the given actor or actor name .
779	Fire an event for a notification .
780	Runs the given block after the given number of ticks .
781	Add actors to scene
782	Register all the registered animations .
783	Register an actor .
784	Update all the updaters .
785	Draw all drawers .
786	Transition to the given scene or name
787	Prepare to transition from this scene to new_scene
788	Returns a hash of all drawers that are saveable to the view .
789	Create a new model
790	Load properties from the options hash .
791	Get the activities for a user
792	Get body measurements for a user
793	Returns a list of weight measures for a user .
794	Get sleep series for a user
795	Perform a request to the Withings API
796	Set the content type of the file .
797	Send a request to a channel
798	Fetch a response from a channel .
799	Register an event handler .
800	Downloads the source file into a temporary directory .
801	Check the files in the feed definition .
802	Check the columns of all found files .
803	Fetch the HTTP fallback identifier from the head request .
804	Defines a parameter method .
805	Find required and optional columns
806	Map a set of models to a Nidyx object .
807	Generate a schema for the given path .
808	Returns an array of class names for an array of objects .
809	Runs the Nidyx compiler with the given schema and options .
810	Read the schema at the given path .
811	Returns the signature of the given params
812	Iterates over each resource file in the given folder .
813	Calls the given block once for each resource .
814	Converts a URL to a real URL .
815	Convert a filter to a proc .
816	Add a folder to this node .
817	Returns the Finitio data system .
818	Runs the action in the given direction .
819	Sets the failure of the migration .
820	Returns whether the task is runnable or not .
821	Returns true if the task is completed or not .
822	Step the status .
823	Time the execution of the task
824	Print a list of paragraphs .
825	Returns a hash of column names to columns .
826	Render all pages and directories
827	Adds a page to the page list .
828	Adds aliases to the given path_hash .
829	Parses the headers from the given file .
830	Returns a hash of all variable files in the current directory .
831	Returns the last menu at the given depth
832	Returns the name of a string .
833	Removes all HTML tags from the given string .
834	Populate the node with the children .
835	Returns an HTML representation of this list .
836	Returns the parent of the given heading .
837	Returns the type id for a given type .
838	link_to_info link_to_type_id item_id
839	Creates a link to show a route to a specific destination .
840	Link to request trust
841	Sends a request trust request to the given URL .
842	Render the page to a file .
843	Symlinks the given path to another path .
844	Render the content files .
845	Get a friend by name and friend_id
846	Get user listing
847	Comment a thing
848	Submit a user to a subreddit .
849	Vote an individual .
850	Returns true if the given string is correct .
851	Generates a label and text field for a given gotcha question .
852	Delete an image from a subreddit .
853	Set the stylesheet for a subreddit
854	Subscribes to a subreddit .
855	Get a list of all reddits for the current user .
856	Get a list of all reddits
857	Add a moderator to a subreddit .
858	Add a user to a subreddit .
859	Bans a user
860	Remove a moderator from a subreddit .
861	Remove a user from a container
862	Unbans a user
863	Make a GET request to the Webserver .
864	Log in to T2
865	Authenticates a user .
866	Delete a user
867	Returns a list of all messages in the mailbox .
868	Clear flair templates
869	Delete a user s flair
870	Delete a flair template
871	Set flair configuration for a subreddit .
872	Send a flair csv to a subreddit
873	Create a flair template for a subreddit .
874	Select a flair template
875	Enable or disable flairing
876	Get a list of comments
877	Get a listing of the users in a subreddit .
878	distinguish a user or group
879	Remove an item from the account .
880	Get modlog for a subreddit
881	Send a POST request to Minfraud
882	Set the lifespan
883	Divide the code .
884	Sets all of the given instance variables .
885	Render a method on an object .
886	Join a collection with the given glue .
887	Open a publication session for a channel .
888	Post a message to a list of topics
889	Expire a message s publication .
890	Validates that the given value is not blank .
891	Validates the given XML string .
892	Default Savon options .
893	Reads a publication for a given session ID .
894	Open a session for the specified channel .
895	Post a message to a topic
896	Expire a request .
897	Read a response from a request .
898	Remove a response from a request .
899	Open a session for a set of topics
900	Post a response to a request message
901	Create a channel
902	Add security tokens to a channel .
903	Remove Security Tokens from a channel .
904	Get a channel by its URI
905	Get a list of channels
906	Update the backend .
907	set the phrase
908	Returns a string representation of this Time .
909	Convert the latitude value to the specified format .
910	Get a list of all projects
911	Retrieve a project by ID .
912	Retrieve a list of experiments for a project .
913	Retrieve an experiment
914	Retrieve the stats for an experiment
915	Retrieve a list of variations for an experiment .
916	Retrieve a variation
917	Retrieve a list of audiences for a project .
918	Retrieve an audience by ID .
919	Perform an HTTP GET request
920	Get a value from the list stored at key
921	Get a random number from the given number of bytes .
922	Get a random number with the specified number of bits .
923	Add a column to the query .
924	Returns a list of all keys in the database .
925	Autocomplete to add an item
926	Fetch a record from the database .
927	Search the table for the given expression .
928	Returns the frequency of each character in the string .
929	Top n scores
930	Recolor the image .
931	Compact the database to the target_path .
932	Returns a list of all keys in the Firmware database .
933	Get the value at the given key .
934	Set the value at the given key .
935	Remove the value at the given key .
936	Returns an array of the keys in the map .
937	Set the value at index a to value b .
938	Returns a list of all keys in the FWM table .
939	Returns a hash with the value at the given keys .
940	Raises a TokyoError .
941	Calls the given block for each row in the table .
942	Find an icon by its name .
943	Get the columns of a given table
944	Returns true if the column is numeric .
945	Check that the given options are valid .
946	Defines a context with the given arguments .
947	Expects the subject to raise an error .
948	Expects the subject to not raise an error .
949	Login a user .
950	Logout the current user .
951	Set the user for the current session .
952	Removes a user from the session .
953	Returns the user associated with the given scope .
954	Returns the namespace of the application .
955	Extract the version number from the CDN .
956	Warm up the cache .
957	Warm up cache from local files
958	Warm up the cache from the CDN
959	Returns the default cache path .
960	Download the cache file to the specified path .
961	Send a message to the console .
962	Check if cache version is up to date
963	Fetch the version from the cache .
964	Create a new database .
965	Runs the strategies in the given scope .
966	Runs the given strategy .
967	Runs the given script with the given parameters .
968	Prints a hex encoded string .
969	Reads an array of words from the input stream and yields them .
970	Returns a select statement .
971	Update an index with the given attributes
972	Returns the first row of the result set
973	Dispatches the given method to the worker .
974	Add a node to this layout
975	Returns the node with the given name .
976	Canonicalizes the given attribute_list .
977	Creates an image for the given character or model
978	Yields the given block with the given temp_current .
979	Raise an exception with a given message or exception class .
980	Check if the audio file is longer than the limit
981	Sends a POST request to the API .
982	Perform a multi - search against the given queries .
983	Adds a whereabouts method to the model .
984	Sets the validators for the given class .
985	Creates a new address class .
986	Start the receive loop
987	Returns a hash of arel attributes and their values .
988	Raises NoMethodError if the given version is not supported by this bugzilla .
989	Run the server .
990	Validate options .
991	Find a mail from an IMAP server .
992	Return a rainbow color string
993	Finds a prime that is large enough for the given input .
994	Enhance content with given separator
995	Convert an integer to a string .
996	Convert a string to an integer .
997	Convert a character to its corresponding codepoint .
998	Returns true if the string is a subset of the character set .
999	Returns an array of Point objects with the given number of points .
1000	Validate the metadata file .
1001	Notify the server of a create event .
1002	Notifies the server of changes that this object has changed .
1003	Notifies the server that this object has been destroyed .
1004	Sets the logger for this logger .
1005	Fetch the rate data for this scraper .
1006	Parse a target string .
1007	Grabs the width of the image .
1008	Returns a list of comments for the given bugs .
1009	Saves the configuration to the persist_file .
1010	Read all pages from the database .
1011	Read a response from the consumer .
1012	Add a line filter .
1013	Write all nodes to stdout .
1014	Replace all nodes with the given template .
1015	Rename all nodes with the given template .
1016	Commit the revision of a page .
1017	Commit the given history of pages .
1018	Scan a format specification string .
1019	Convert the body to textile format .
1020	Prints a debug message .
1021	Execute a command on the connection .
1022	Upload a file to the remote server .
1023	Download a file from the remote server .
1024	Writes data to a remote file .
1025	Returns the distance between this point and another point .
1026	Returns true if the given point is covering the surface .
1027	Sends the given method to the subject .
1028	Output the result of the match .
1029	Gets information about a user .
1030	Sets the options for this command .
1031	Add a column to the table .
1032	Declare columns from a hash .
1033	Create a new Dreader instance .
1034	Returns the line number for the given exception .
1035	Given a file path and an exception returns an array of backtrace locations that match the given file path .
1036	Drains the given queue .
1037	Returns a hash representation of all nodes in the graph .
1038	Builds a sentence from the given parameters .
1039	Returns a sorted list of nodes .
1040	Builds a sentence from a hash of nodes .
1041	Read all pages from the database .
1042	Filters the results based on the given params .
1043	Get a list of all sites
1044	Perform a site query
1045	Returns the rate time of the pair .
1046	Set the output file .
1047	Log a message at the given level .
1048	Returns a hash with the option names and fields as keys .
1049	Returns an array of all the selected options
1050	Transmits a packet .
1051	Returns true if this block is a strict ancestor of the given block start .
1052	Returns the built - in object IDs .
1053	Create a daemon daemon .
1054	Reopen an IO object .
1055	Check if the process is running at the given path .
1056	Write pid to file
1057	Parses the mead argument .
1058	Load documents from a list of file names .
1059	Saves all documents to a file .
1060	Prints all documents
1061	Runs the given block for each of the given file names .
1062	Returns a selection that matches the given XPath expression .
1063	Returns a selection that matches the given CSS selectors .
1064	Execute a block of code .
1065	Yields each node in the given selection .
1066	tagify the input string
1067	Creates an option group .
1068	Create a new caramel configuration file .
1069	Sets the jobs_active_record_relation_symbol for this model .
1070	Check if we need to retry if we need to retry
1071	Runs the mixml tool .
1072	Returns a list of all entities in the water
1073	Returns true if the status is set .
1074	Perform a GET request to a V3 endpoint .
1075	Perform a PUT request to the + path + .
1076	Perform an HTTP request to the V3 API
1077	Add a token to the Marking .
1078	Authorize the current user to the OOB server .
1079	Perform a GET request
1080	Perform a POST request
1081	Perform a raw POST request to a path with the given body .
1082	Perform a PUT request .
1083	Sends a PUT request to a Typhoeus server .
1084	Authenticate to the AMEE server
1085	Check if the response is ok .
1086	Perform an HTTP request .
1087	Runs the request and returns the response
1088	Create a timed place .
1089	Find a transition by name .
1090	Initialize a new Simulation .
1091	Defines an output arc for a given place .
1092	Fire the transition .
1093	Sends a text request to the server .
1094	Install librarian
1095	install librarian - puppet modules
1096	Get a specific crisis
1097	Get the current crises stats
1098	Get user statistics
1099	Defines the pose content for the given source methods .
1100	Add one or more tokens to the token set .
1101	Deletes the given tokens from the token store .
1102	Add joins to the query .
1103	Adds where clauses to the query .
1104	Load the classes from the result .
1105	Search for a given word
1106	Returns a hash of matches for each word in the query .
1107	Returns the Authorization header for a Google Login request .
1108	Returns the folder for the given app name .
1109	Returns the minimum file name of the version . rb file .
1110	Returns the version of the current app .
1111	Bump the app version to the given version .
1112	Load the project from the dev . yml file .
1113	Prints the help for the current app .
1114	Add one or more objects to the waiting queue .
1115	Set the time to the given value .
1116	Send a message to the WebSocket .
1117	Perform an HTTP POST request .
1118	Deletes the resource .
1119	Returns the metadata for the specified instance .
1120	Gets the metadata for all instances in the Vagrant VM .
1121	Reads a CSV file .
1122	Writes a CSV file to + path + .
1123	Convert an array of rows and columns to a string .
1124	Add a value to the schema .
1125	Rotate a set of EC2 instances .
1126	Waits for all instances to be in the specified state
1127	Reads the file at the given path .
1128	Write a value to a file at the given path .
1129	Get the directory at the given path .
1130	Returns a hash with the sum of the totals for each model .
1131	Returns a hash with the sum of the totals for each model .
1132	Convert the TAI timestamp to a label .
1133	Store an object in the cache .
1134	Adds a hash of configuration options to the configuration .
1135	Create a new Httperf job .
1136	Returns the url for a given path and params .
1137	Returns true if the given string is a valid URL .
1138	Verify that two objects are equal .
1139	Assits that the given object is of the given class .
1140	Assits that the given argument is a non - empty string .
1141	Assit a block .
1142	Poll the server for a given number of seconds .
1143	Get the main data for a given response ID .
1144	Add trackers to a torrent .
1145	Download a list of URLs .
1146	Deletes a torrent and its associated data .
1147	Set the location of a torrent .
1148	Increase the priority of a torrent .
1149	Decreases the priority of a torrent .
1150	Maximize priority for a set of torrent hashes
1151	Minimize priority of a list of hashes .
1152	Set priority of a file
1153	Set the download limit for a torrent .
1154	Set the upload limit for a torrent .
1155	Gets the MD5 of a file .
1156	Returns all keys in the bucket .
1157	Iterates over all keys in the bucket .
1158	Run a command .
1159	Returns an array of SqootClicks .
1160	Create instances based on the build options .
1161	Check that the given scope_name is defined in the target enum .
1162	Configure the revenc . conf file
1163	Mark new entries as seen .
1164	Sets the header options for the given curl object .
1165	Store the summary for the given feed to the backend .
1166	Raises a RopenstackError based on the response from the API .
1167	Perform an HTTP request .
1168	Perform a GET request
1169	Perform a DELETE request to the given URI
1170	Perform a PUT request .
1171	Perform a POST request to the given URI .
1172	Get an article by ID
1173	Upload an image from a file .
1174	Perform an octect PUT request to the given URI .
1175	Returns the path relative to the current directory .
1176	Create a new Haml index .
1177	Defines the accessors of the table .
1178	Adds a row to the table .
1179	Returns an inline footnote with the given id and time
1180	Returns the HTML for a footnote .
1181	Perform an instance action
1182	Adds an error to the errors hash .
1183	Returns an array of coordinates of neighbors between x and y .
1184	Returns the merchant with the given id .
1185	Encode a text frame .
1186	Declares the challah_permission class .
1187	Sends a POST request to the API .
1188	Create a network
1189	Create a port on a network
1190	Move a port to a list of subnets
1191	Writes JSON data to the response .
1192	Redirect the user to + url +
1193	Get a list of servers
1194	Create a server
1195	Execute an action on a server
1196	Delete an image
1197	Perform a GET request .
1198	Sets the basepath for this file .
1199	Returns the commissions for this query .
1200	Get leagues for the current season
1201	Matches an anonymous method with the given arguments .
1202	Fetch a value from a column .
1203	Returns the value at the given column .
1204	Returns an array of the values at the specified columns .
1205	Set the value of an accessor .
1206	Authenticates with the Unfuddle API
1207	Get a list of routers
1208	Create a router
1209	Remove a router interface
1210	Returns the first record that matches the given method .
1211	Load the configuration files .
1212	Returns a list of Sqoot providers .
1213	Returns an array of SqootCategory objects .
1214	Declare the challah_role class .
1215	Check if plan_id_was has changed
1216	Calls method_missing on the object and returns the result .
1217	Returns a list of deals .
1218	Get a single deal by id
1219	Returns the total number of deals in the current page
1220	Returns an array of deals with the same title .
1221	Load cookies from a file .
1222	Dump the cookies to a file .
1223	Set the value of an element .
1224	Updates the expired_in option with the given value .
1225	Perform a GET request .
1226	Get image details
1227	Create an image
1228	Replace the memberships for an image .
1229	Add a member to an image
1230	Create a directory .
1231	Copies a file or directory .
1232	Copies a file or directory to another .
1233	Create a symbolic link to a file .
1234	Change the file s mode .
1235	Removes the given directory and creates it .
1236	Copy metadata from src to dst
1237	Create a temporary file and write it to + path + .
1238	Handles incoming requests .
1239	Read the config file and return it as a hash
1240	Replaces email addresses with link tags .
1241	Add a plural rule and a replacement rule .
1242	Adds a singular rule and a replacement rule .
1243	Generate irregular patterns for singular and plural .
1244	Execute the command .
1245	Output the results to the output directory .
1246	Run the rate step
1247	Authenticates the given user and password .
1248	Add a service
1249	Add an endpoint
1250	Get all endpoints for a given token
1251	Disables a method .
1252	Returns a proc that can be used to disable this feature .
1253	Execute the method on the given object .
1254	Alias the method with the original method .
1255	Convert a secret to a public key .
1256	Returns true if two points are equal .
1257	recover the x value for the given y and sign .
1258	Decompress a point value .
1259	Convert a secret to a public point .
1260	Returns the part with the given name .
