0	Generates a string representation of the current position .
1	Runs the given block with the given options .
2	Raise an exception if not already exists
3	Calculate the current configuration
4	Creates a new Rakefile .
5	Finds a specific version of the specified file .
6	Create a new source file .
7	Returns the relative path for this node .
8	Calls the given block for this machine .
9	Creates a new Archivefile .
10	Create a new document from the given hash .
11	Create a new JSS file
12	Checks if the given file exists .
13	Check the contents of a given block
14	Check if the contents of the given file exists
15	Reads a list of files from the given block .
16	Checks if the given block is available
17	Creates a new Tuple with the given parameters .
18	Creates a new Archive object from the given hash .
19	Builds a list of all versions of the given parameters
20	Create a new Client instance .
21	Returns the contents of a specific resource .
22	Builds a list of available packages for the given account
23	Create a new Client object .
24	Returns a hash containing all the contents of the given parameters .
25	Returns the full path for the given package .
26	Create a new instance of the given parameters
27	Constructor for a specific string
28	Returns true if the given value is a valid Wavefront value .
29	Creates a new Client instance .
30	Writes the given block to the local file .
31	Create a new Client object .
32	Create a new JSS file .
33	Create a new JSS file .
34	Builds a new version of the specified version .
35	Add a new version number to the current version .
36	Returns true if the version is valid
37	Builds a new version of the given target .
38	Create a new instance from the given hash .
39	Creates a new Prediction instance .
40	Creates a new Message instance .
41	Creates a new Client instance .
42	Create a new Client instance .
43	Builds a list of versions of the given block .
44	Create a new RSpec object .
45	Create a new Client object .
46	Deletes the specified path from the file .
47	Copies the given file to the destination directory .
48	Creates a new version of the given block .
49	Create a new zip file .
50	Create a new tarball .
51	Cleans up the specified directory .
52	Creates a new archive .
53	Extracts the contents of the given file .
54	Return a new Tuple with the given parameters
55	Returns true if the file has been processed .
56	Returns the signature of a specific signature .
57	Create a new Client instance .
58	Returns the contents of a specific topic
59	Returns a new instance of the given feature
60	Returns the full path for the given input .
61	Return a new version of the application .
62	Get a list of files for the given target .
63	Create a new Client object .
64	Prepend a path to a list of files .
65	Returns the contents of the given block .
66	Returns the version of the current version number
67	Returns the full path for the given target .
68	Creates a new Message instance from the given hash .
69	Returns the full path for the given source .
70	Creates a new Tuple instance .
71	Create a new cache
72	Generates a list of tags for the given object .
73	Creates a new repository instance .
74	Finds all the files in the given directory
75	Generate the contents of a file
76	Initialize a new Client instance .
77	Runs a shell command .
78	Creates a new instance of the given block .
79	Returns the contents of a file .
80	Returns the full path for the given command .
81	Creates a new repository .
82	Deletes the specified directory .
83	Copies the given file to the destination directory .
84	Removes a file from the given path .
85	Create a new file .
86	Creates a new Link
87	Validates the specified configuration .
88	Return the license content of this project
89	Builds a list of files for the given project .
90	Extracts the dependencies from a hash
91	Constructor for a specific version of file
92	Constructor for a file
93	Returns the contents of the given file if it exists .
94	Create a new instance of the given package .
95	Create a new Client instance .
96	Builds the final version of the given hash
97	Creates a new Client instance .
98	Create a new instance of the given file .
99	Gets the value of a specific parameter .
100	Constructor for a specific string
101	Builds a list of files from the given path .
102	Creates a new Client instance .
103	Creates a new instance of the given package .
104	Builds a new version of the specified parameter .
105	Returns a new instance of the given package .
106	Creates a new filter object
107	Returns the value of the given block .
108	Creates a new Tuple .
109	Determines if the given name is valid .
110	Builds the manifest from the manifest
111	Finds the contents of the current document .
112	Create a new CSV file
113	Returns the size of the given package .
114	Returns true if the given directory contains the given name .
115	Create a new tempfile .
116	Get the current version of the current repository
117	Returns true if the current repository has changed .
118	Creates a new Client instance .
119	Returns the number of bits of the given bitmap .
120	Get the number of bytes for the given channel .
121	Builds a message from the given hash .
122	Loads the specified content .
123	Returns true if this object is loaded .
124	Create a new instance of the given block .
125	Creates a new instance of the given arguments .
126	Creates a new Tuple with the given arguments .
127	Gets the list of elements of the given block .
128	Returns true if the given value is a hash .
129	Returns a hash of the given address
130	Generates a string representation of the given address .
131	Returns the value of the given hash .
132	Builds an array of hashes using the given parameters .
133	Creates a new instance of the given block .
134	Initialize a new Client instance
135	Creates a new Client instance .
136	Creates a new instance of the given hash .
137	Returns the contents of the specified file .
138	Creates a new RDF object .
139	Creates a new version of the given string .
140	This method is called when creating a new page
141	Creates a new record from the database .
142	This method should be called when the event fires .
143	Call this method with the given parameters
144	Determine whether the given input is in the correct format .
145	Returns true if the current object matches the given block .
146	Returns a hash containing all the keys of the given block .
147	Converts the given object into a hash .
148	Returns an array containing all possible arguments for the given type .
149	Creates a new Client instance .
150	Builds an array with the given options .
151	Creates a new instance of the given block .
152	Builds a list of known nodes from the given hash .
153	Reloads the given value from the database .
154	Returns the first element for this node .
155	Create a new Client object .
156	Create a new instance of the given options .
157	Creates a new Client object .
158	Returns a hash containing the given options .
159	Starts a timer .
160	Set the duration of a message
161	Set the duration of the given block .
162	Helper method to create a new schema
163	Helper method to create a new schema
164	Returns true if the given block matches the given options .
165	This method is called when an action is called .
166	Creates a new Controller instance .
167	Creates a new instance of the given block .
168	Returns the contents of the given subject .
169	Create a new JSS file .
170	Creates a new instance of the given block .
171	Creates a new instance of the given block .
172	Return a new Tuple with the given parameters
173	Calculates the number of checksum
174	Calculates the number of checksum
175	Creates a new instance of the document .
176	Returns the full list of characters in the given string .
177	Returns the number of characters in the given string .
178	Calculate the number of checksum
179	Create a new instance of the given string .
180	Returns a new instance of the given window .
181	Create a new instance .
182	Creates a new Stream instance .
183	Converts a single document into a single document .
184	Converts the given path to a CSV file .
185	Returns the number of threads of the current thread pool .
186	Returns true if the site exists
187	Get the full path from the given hash .
188	This method is called when the database is found .
189	Create a new instance of the given block .
190	Create a new instance of the given block
191	Returns a hash with the given parameters .
192	Creates a new follower instance .
193	Creates a new user with the given name .
194	Helper method for creating a new repository
195	Returns the contents of the given tag .
196	Returns true if the given block has been initialized .
197	Creates a new instance of the given block .
198	Checks if the user has a valid session .
199	Returns the status of the given action .
200	Gets the status of the given user .
201	Create a new instance of the given comment list .
202	Returns the status of the given block .
203	Check if the object has been set
204	This method is called when a request is completed .
205	Returns the full path to the given address .
206	Creates a new instance of the given block .
207	Create a new instance of the given block .
208	Returns a hash containing all the given options .
209	Check if a user has been set .
210	Returns an array containing all registered issues for the given object .
211	Determines if the given object is registered .
212	Create a new instance of the given object .
213	Check if the user has been set
214	Check if the given file has been set
215	Create a new instance of the given label .
216	Determines whether the given label is a single record .
217	Create a new instance of the given label .
218	Creates a new transaction .
219	Helper method for creating a new repository
220	Convenience method to log a message .
221	Parses a single document .
222	Returns a hash of the given address .
223	Returns the number of pages in the given query .
224	Parse a list of links
225	Parses the given string and returns the result of a single document .
226	Initialize a new Client instance
227	Creates a new Client instance .
228	Creates a new Client instance .
229	Get a list of all commits in this repository
230	Return a list of all commits in this repository
231	Gets the details of a user s account .
232	Get a list of all registered listeners for a given item .
233	Returns a hash of the given name .
234	Get the list of events for this room
235	Returns the full path of the given block .
236	Retrieve the default value associated with the given name .
237	Create a new instance of the given options .
238	Raises an exception if it exists .
239	Create a new Client instance
240	Retrieve the value of a given key .
241	Returns a string representation of the specified location .
242	Checks if the given resource is valid .
243	Initialize a new Client object .
244	Creates a new Client instance .
245	Checks for a given signal .
246	Creates a new broker instance .
247	Creates a new DICOM object .
248	Initialize a new Client object
249	Asserts the value of the given hash .
250	Instantiates a new graph
251	Creates a new instance of the given block .
252	Creates a new image .
253	Creates a new DICOM object .
254	Creates a new DICOM object .
255	Creates a new Map instance .
256	Creates a new Tuple with the specified attributes
257	Converts the given input data to a specific element .
258	Parses the given number of targets .
259	Converts the given attributes into a hash .
260	Creates a new instance of the given block .
261	Converts the given argument to a list of conditions .
262	Checks for the given input .
263	Creates a new Tuple with the given name .
264	Creates a new Tuple .
265	Creates a new Stream instance .
266	Creates a new instance of the given input .
267	Return a new Tuple with the given name .
268	Return a new Tuple with the given parameters .
269	Creates a new instance of the given input .
270	Parses the given input .
271	Creates a new Client object .
272	Fetch all the parameters for a given model .
273	Add a value to the stack .
274	Unpack the given address
275	Create a new instance of the given options .
276	Creates a new Strings instance .
277	Creates a new instance of the given parameters .
278	Return a new Tuple with the given parameters .
279	Creates a new Tuple with the given parameters .
280	Creates a new Particle .
281	Parses the given parameters .
282	Creates a new Tuple .
283	Convert the given input to the given array .
284	Creates a new Stream object .
285	Creates a new instance of the given input .
286	Creates a new Particle .
287	Creates a new DICOM object .
288	Creates a new Tuple with the given name .
289	Creates a new Range object .
290	Searches for the given input .
291	Runs the given input .
292	Return a new Tuple with the given parameters .
293	Create a new instance with the given options .
294	Creates a new Tuple object .
295	Parses the given input data .
296	Creates a new Particle .
297	Converts the given input data to a single target .
298	Creates a new Tuple .
299	Creates a new Tuple instance .
300	Return a new Tuple with the given parameters
301	Returns a hash of the elements of the specified type .
302	Create a new instance of the given block
303	Creates a new DICOM object .
304	Creates a new Strings instance .
305	Creates a new StructureSet .
306	Creates a new instance of the given block .
307	Creates a new instance of the given block .
308	Creates a new DICOM object .
309	Returns an array containing the correct values for the given object .
310	Creates a new Tuple with the given parameters .
311	Creates a new instance with the given options .
312	Creates a new Event instance .
313	Returns the number of messages to be printed .
314	Returns the length of the given string .
315	Returns the value of the given string .
316	Checks if the given value is valid .
317	Checks if the given string is valid .
318	Creates a new Client instance .
319	Creates a new Message instance .
320	Creates a new Message .
321	Creates a new Message .
322	Retrieve the default values of the given block .
323	Initialize the logger
324	Creates a new measurement instance .
325	Returns the status of the given block .
326	Creates a new instance of the given block .
327	Create a new instance with the given parameters
328	Returns true if the given argument is a valid filter .
329	Creates a new Logger instance .
330	Initialize a new Client instance .
331	Creates a new instance of the given block .
332	Initialize a new Client instance .
333	Creates a new Message instance .
334	Creates a new Particle instance .
335	Calls the given block once for each item in the context .
336	Extracts the first line from the supplied hash .
337	Returns a string representation of the current message .
338	Returns a hash containing all the keys of the given block .
339	Creates a new Tuple .
340	Creates a new instance of the given route name .
341	Returns true if the row is a row
342	Returns the contents of the given block .
343	Returns the list of elements of the given block .
344	Returns a new instance of the given element .
345	Fetches a single document .
346	Creates a new Client instance .
347	Creates a new Client instance .
348	Initialize a new Client object .
349	Merges the given options into a hash .
350	Removes the given parameter from the query .
351	Parses the user input data .
352	Initialize a new Client instance .
353	This method is called when an error occurs .
354	Creates a new instance of the given method .
355	Extracts the given methods from the given hash .
356	Returns the contents of a given source file .
357	Creates a new instance of the given block .
358	Retrieve the contents of a given block .
359	Convert the given argument to a hash .
360	Create a new instance of the given block .
361	Creates a new instance of the given pattern
362	Creates a new instance of the given string .
363	Runs the given block with the given options .
364	Creates a new Client object .
365	Create a new Client object .
366	Runs the given block with the given arguments .
367	Create a new instance of the given block .
368	Creates a new Client instance .
369	Set the default value for a given key
370	Sets the current value for a given key .
371	Set the contents of the given block .
372	Create a new instance of the given parameters
373	Writes the given string to the current index .
374	Creates or updates a single document .
375	Return a list of all nodes that have been processed .
376	Get the number of connections for this session .
377	Extracts a single record from the supplied hash .
378	Creates a new instance of the given block .
379	Finds the specified node by name .
380	Create a new Client instance .
381	Get the contents of a given block .
382	Creates a new instance of the given block .
383	Creates a new DICOM object .
384	Create a new JSS file .
385	Create a new Client object from the supplied list .
386	Executes the given block and returns the results of a single document .
387	Creates a new instance of the specified parameter .
388	Create a new instance .
389	Create a new Client instance .
390	Creates a new Client instance .
391	Create a new Client instance .
392	Creates a new Client
393	Creates a new Client instance .
394	Returns the next message for the given record .
395	Creates a new instance of the given block .
396	Creates a new Client instance .
397	Determines if the given object is negative .
398	Returns the width of the image .
399	Get the color of the screen
400	Get the coordinates of a specific pixel .
401	Return a new Tuple with the given coordinates .
402	Creates a new Tuple instance .
403	Creates a new Map instance .
404	Updates the current state of the screen .
405	Draws the given text .
406	Sets the text of the given block .
407	Set the coordinates of the given text .
408	Draws an image .
409	Creates a new Str object .
410	Creates a new Client object .
411	Sets the value of the given block .
412	Draws a new image .
413	Draws a single document .
414	Generates a single line of the text .
415	Writes the given block to the correct color .
416	Creates a new instance of the given message .
417	Returns the status of the given block .
418	Returns true if the given string is a valid DICOM object .
419	Creates a new Client instance .
420	Checks if the given string is valid .
421	Creates a new Logger instance .
422	Create a new instance of the given type .
423	Create a new instance of the given block .
424	Gets the duration of the given block .
425	Create a new instance of the given block .
426	Creates a new DICOM object .
427	Create a new record based on the provided data type .
428	Determines if the given file has been set .
429	Create a new instance .
430	Returns an array of field names .
431	Returns true if the message matches the given input .
432	Send a notification message
433	Builds a hash of attributes from the given hash .
434	Initialize a new Client instance .
435	Creates a new Client instance .
436	Create a new client .
437	Create a new instance of the given options .
438	Creates a new Client instance .
439	Creates a new instance of the given block .
440	Checks if the given file exists .
441	Returns a hash of the given parameters .
442	Creates a new Duration object .
443	Returns the number of days to the given day .
444	Creates a new Client object .
445	Creates a new Client object .
446	Creates a new instance of the given block .
447	Initialize a new Client object .
448	Creates a new Client object .
449	Move the given row to the given row .
450	Creates a new Tuple .
451	Creates a new Tuple with the given name .
452	Calls the given block if it exists .
453	Creates a new Client instance .
454	Creates a new Client instance .
455	This method is called when a worker is found .
456	Creates a new RDF pattern .
457	Create a new instance with the given parameters .
458	This method is called when the event occurs .
459	Creates a new message with the given name .
460	Creates a new Client instance .
461	Creates a new Link object .
462	Creates a new Stream instance .
463	Parse the given name of a file .
464	Creates a new Client instance .
465	Creates a new Client object .
466	Creates a new Client object .
467	Execute the given block .
468	This method is called when a connection is available .
469	Create a new Socket object .
470	Creates a new TCP connection .
471	Constructs a new Client object .
472	Creates a new instance of the given block .
473	Returns true if the current page is currently active .
474	Get the first element of a particular node .
475	Finds a single resource by id
476	Returns a list of all objects that match the specified query .
477	Create a new instance with the given parameters
478	Creates a new instance of the given block .
479	Helper method to create a new XML document .
480	Creates a new instance of the given block .
481	Creates a new Tuple .
482	Creates a new instance of the given block .
483	Runs the given block .
484	Returns the next value of the given block .
485	Sets the value of the given string .
486	Return a new Tuple with the given parameters .
487	Returns the summary of the given block .
488	Creates a new Strings object .
489	Get the contents of a file .
490	Get the link for the given object
491	Extracts the response from the given hash .
492	Calls the given block and returns the result as a string .
493	Creates a new Client instance .
494	Parse the given URL .
495	Create a new instance of the given parameters
496	Builds the given hash of parameters
497	Creates a new Faraday instance
498	Perform a single transaction .
499	Returns a new instance with the given arguments .
500	Creates a new Client object .
501	Returns a string representation of the given block .
502	Creates a new instance of the given block .
503	Creates a new instance of the given block .
504	Create a new Client object .
505	Creates a new instance of the given class .
506	Create a new instance of the given file
507	Creates a new DICOM object .
508	Removes the contents of the given block
509	Creates a new PhidgetManager .
510	Returns true if the given file exists
511	Creates a new RSpecifier instance .
512	Returns a hash of all the files that have been loaded .
513	Loads the given YAML file .
514	Returns a list of files in the given directory .
515	Create a new instance from the given hash .
516	Parses the given file and returns it .
517	Writes if a file exists .
518	Check if the option has been set .
519	Create a new instance of the given parameters
520	Returns the number of files in the given directory .
521	Converts an array of bytes to a string .
522	Extracts the contents of the given file .
523	This function generate the link for a given file .
524	Creates a new Packet object .
525	Returns the contents of a specific element
526	Returns the contents of the specified element .
527	Creates a new instance of the given string .
528	This method is used to create a new card .
529	Returns the contents of a given string .
530	Returns a list of all items in a particular card .
531	This method is used to create a new card .
532	Returns the contents of the given block .
533	Returns the contents of a specific component .
534	Creates a new Layout object .
535	Builds a notification message .
536	Creates a new filter object .
537	Returns the contents of a specific component .
538	Creates a new DICOM object .
539	Creates a new Client instance .
540	Creates a new Column with the given parameters .
541	Create a new link
542	Create a new Gemfile .
543	Create a new Client instance .
544	Create a new instance from the given hash .
545	Adds an array of files to the given target .
546	Finds all the files in the given directory .
547	Creates a new Client instance .
548	Creates a new Client instance .
549	Loads the configuration from the given hash .
550	Extracts a list of files from the given block .
551	Creates a new instance of the given scope .
552	returns a hash of keyspecs
553	Modify the current model .
554	Checks if the given parameter is valid .
555	Create a new Client instance .
556	Retrieve the contents of the given block .
557	Create a new instance of the given block .
558	Defines a new notification object .
559	Creates a new notification object .
560	Creates a new torrent .
561	Creates a new instance of the given block .
562	Converts the given options into a hash .
563	Returns a hash with the given name .
564	Create a new instance from the server
565	Create a new Client object .
566	Internal helper method
567	Returns the full path for the given model .
568	Generates a single string representation of the current document .
569	Returns a string representation of the given color .
570	Draws a single rectangle .
571	This method is used to generate the default values .
572	Get a list of code for a given window .
573	Add a field to the collection .
574	Builds a local version of the given block .
575	Returns a new instance of the given tag .
576	Returns true if the current object matches the given string .
577	Returns the number of events in the given range .
578	Returns the number of words in the given range .
579	Runs the given block on the given parameters .
580	Calls the given block on the server .
581	Preprocesses the configuration of the given parameters .
582	Handles the processing of the given block .
583	Executes the given block in a hash .
584	Executes the given block with the given options .
585	Create a new instance of the given field name .
586	Create a new instance of the given color .
587	Create a new instance of the given field name .
588	Create a new Client instance .
589	Create a new instance of this class .
590	Returns true if the given value exists .
591	Returns true if the given name exists
592	Returns true if the given value is a valid key .
593	Returns a hash containing all the keys of the given field name .
594	Create a new instance of the given parameters
595	Returns a new instance of the given name .
596	Create a new instance of the given hash .
597	Returns a new instance of the given model .
598	Create a new instance of the given block .
599	Create a new instance from the given hash .
600	Transforms a value into a specific format .
601	Parses the given value into a hash .
602	Creates a new Client object .
603	Create a new instance with the given name .
604	Creates a new Client instance .
605	Get a list of available brokers
606	Creates a new instance of the given block .
607	Creates a new instance of the given block .
608	Get the number of elements for a given field .
609	Gets the current number of occurrences of the given block .
610	Finds the first element with the given name .
611	Creates a new Tuple instance .
612	Parses the given string and returns it .
613	Returns a string representation of this node .
614	Returns an array of all occurrences of the given block .
615	Finds the first element in the given string .
616	Creates a new instance of the given block .
617	Creates a new instance of the given block .
618	Runs the given block with the given key .
619	Creates a new instance of the given segment .
620	Creates a new Stream instance .
621	Returns a hash of all the elements of the given type .
622	Creates a new instance of the given block .
623	Get the list of vulnerabilities for this document .
624	Creates a new instance of the given block .
625	Creates a new HMAC instance .
626	Creates a new Client instance .
627	Returns a string representing the current selector .
628	Creates a new Map instance .
629	Returns true if the PID exists .
630	Returns true if the process is executed .
631	Given a list of files and updates the current state of the given block .
632	Returns the full list of elements of the given block .
633	Get the details of a particular document .
634	Creates a new Client instance .
635	Get the final version of a specific resource
636	Get a list of files in the current directory .
637	Get a list of all relevant versions of the given block
638	Get the status of a given file .
639	This method returns true if the current directory exists
640	Get the status of a file or directory
641	Return the status of a given file
642	Get the status of a given feature
643	Initialize a new Client instance .
644	Generates a list of files in the given directory .
645	Returns true if the given block is a valid session .
646	Get the status of a specific session .
647	Get the number of commits in the given hash
648	Extracts the data from the supplied hash .
649	Converts the given input data to a hash .
650	Returns the number of files that match the given block .
651	Initialize a new branch
652	Returns true if the given file has been enabled .
653	returns a hash of the current target with the given name
654	Loads the given number of commits to the given array .
655	Generates a list of all possible values for the given block .
656	Extracts the contents of a given file .
657	Recursively creates a new version of the given file .
658	Get the current version of a particular branch
659	Creates a new instance of the given module .
660	Get the current revision of the given file .
661	Get the correct version of the given module name
662	Creates a new instance of the given attribute .
663	Create a new instance of the given block .
664	Create a new Client object for the given block .
665	Helper method to create a new instance of the given object .
666	Creates a new instance of the given block .
667	Create a new Client object .
668	Creates a new Tuple with the given parameters .
669	Returns a new instance of the given selector .
670	Create a new Client instance .
671	Create a new Client object
672	Generates a label with the given options .
673	Reads a single value from the pool .
674	Parses the given packer object .
675	Specifies the given method with the given arguments .
676	Create a new Client object
677	Returns a list of all assets in the given directory
678	Retrieve the current page of a given item .
679	Create a new Client instance .
680	Creates a new instance of the given block .
681	Extracts the document from the given hash .
682	Create a new Client instance .
683	Calls the given block if it exists .
684	Create a new file .
685	Creates a new instance of the given block .
686	Perform an HTTP request .
687	Creates a new instance of the given string .
688	Converts the given input to a string .
689	Create a new instance of the given hash .
690	Creates a new Client object .
691	Runs the given block inside the command line .
692	Stores the given text in the list .
693	Initialize a new Client
694	Returns a new instance of the given object .
695	Create a new instance of the given block .
696	Define a new object
697	Returns the object reference to the current object .
698	Deletes the given key .
699	Helper method for creating a new object .
700	Creates a new Client instance .
701	Returns a hash with the given parameters
702	Initialize a new Client object
703	Get the correct version of the given model
704	Initialize a new Client object .
705	Adds a new option to the console .
706	Configures all options to default values
707	Retrieve the first version of the given block .
708	Creates a new instance of the given object .
709	Sets the name of the given parameters .
710	Define a new method .
711	Determines if the given name is defined
712	Get the first parameter for the given name .
713	Sets the name of the given parameter .
714	Creates a new instance of the given block .
715	Creates a new Link
716	Executes the given block with the given options .
717	Create a new instance of the given block
718	Get the next message for this channel .
719	Create a new Client instance .
720	Returns a hash of the given name .
721	Returns true if the node is valid .
722	Returns true if the node has a given name .
723	Creates a new Link
724	Recursively create a new node .
725	Validate the given block
726	Returns true if the given argument is true .
727	Returns true if the given block is true .
728	Recursively creates a new Node .
729	Get the last element of this node .
730	Get the last element of this node .
731	Returns true if the node has the given length
732	Create a new instance of the given block
733	Checks whether the node is a valid session .
734	Checks if the given node is valid
735	Return true if the node matches the specified node .
736	Return the next node for this node .
737	Finds a single document by its name .
738	Returns the last sibling index of this node .
739	Move the given list of nodes .
740	Move the given list of nodes .
741	Create a new instance of the given block
742	Get the list of elements of the given block .
743	Get the list of elements for this node .
744	Create a new instance of the given block
745	Builds a single document from the given hash .
746	Returns an array containing all edges of the given nodes .
747	Determines if the node is valid .
748	returns a new object from the list of available types
749	Removes the given answer from the given list
750	Get the correct answer for a specific question
751	Return a new List with the given name
752	Recursively create a new node .
753	Creates a new TableWrapper object .
754	Returns a new instance of the given class .
755	Returns the list of events for the given target .
756	Returns the full path for the given input .
757	Creates a new actor .
758	Returns an array of transitions for this object .
759	Creates a new Client instance .
760	This method is called when the event fires .
761	Returns the status of the given target .
762	This method is called when the event fires .
763	Creates a new Map instance .
764	Initialize the Client
765	Returns the status of the given event .
766	Creates a new Client instance .
767	Create a new instance of the given options .
768	Starts the application .
769	Returns a new Color object with the given name .
770	Create a new instance of the given block .
771	Creates a new TableWrapper object .
772	Creates a new Client instance .
773	Helper method for creating a new link
774	Internal method to create a new Scene object
775	Creates a new filter object .
776	Returns a hash containing all the keys of the given block .
777	Returns the contents of the given block
778	Creates a new Client instance .
779	Returns the status of the given event .
780	Add a new value to the given block .
781	Creates a new Scene instance .
782	Creates a new instance of the given block .
783	Creates a new actor .
784	Initialize a new List
785	Fetches the contents of the given block .
786	Recursively creates a new Scene object .
787	Sets up the current state of the given block .
788	Returns the contents of a given hash .
789	Create a new instance .
790	Initialize a new Client instance
791	Get the list of activities for a given timeline
792	Get the number of measurements for this document .
793	Returns the number of weights for a given user
794	Get a specific category
795	Perform an HTTP request
796	Creates a new Client instance .
797	Creates a new Client instance .
798	Retrieve the value of a block
799	Returns a new instance of the given block .
800	Downloads the given file into the given source .
801	Returns the contents of the specified file .
802	Returns the contents of the specified file .
803	Returns the status of the given block .
804	Create a new instance of the given parameters .
805	Retrieve the list of values for a given column .
806	Creates a new Map instance .
807	Create a new instance with the given name .
808	Returns a hash containing all the keys of the given object .
809	Runs the given block with the given options .
810	Reads the given metadata from the given hash .
811	Create a new Client object .
812	Calls the given block once for each resource .
813	Calls the given block once for each resource .
814	Convert the given URL to a hash
815	Return a new Tuple with the given parameters .
816	Creates a new instance of the given block .
817	Loads the data from the configuration file .
818	Create a new instance of the given block
819	Creates a new instance of the given block .
820	Returns true if the current page has a given value .
821	Returns true if the current state is complete .
822	Returns the status of the given block .
823	Runs the given block and returns a Hash .
824	Creates a new Structure with the given name .
825	Returns a Hash containing all the keys of the given column .
826	Builds a list of files
827	Adds a list of files to this page .
828	Adds a new array to the current page .
829	Parse the given string into a single document .
830	Returns the full list of files in the given directory .
831	Retrieve the last value for the given table
832	Returns a string representing the given name .
833	Extracts all the tags from the given hash .
834	Helper method for creating a new node
835	Creates a new instance of the document .
836	Returns the full path for the given subject .
837	Get the first identifier for the given type
838	Creates a new Link object .
839	Creates a new Link object .
840	Creates a new Link
841	Builds a single document from the supplied hash .
842	Builds a list of files in the given directory .
843	Returns the full path to the given hash .
844	Builds a list of files in the given directory .
845	Returns a new Client object with the given name .
846	Get the list of users for a given user .
847	Creates a new comment
848	Creates a new submission tag .
849	Creates a new object .
850	Returns true if the given string is an empty string .
851	Get a single message from the given hash .
852	Creates a new Image instance .
853	Set the default stylesheets
854	Creates a new Client instance .
855	Retrieves a list of all of the UUIDs
856	Returns the status of a given query .
857	Returns a new container instance .
858	Add a collaborator to the repository
859	Returns a new user with the given name .
860	Remove a container from the given URL .
861	Remove a column from the repository
862	Removes a user from the given block .
863	Creates a new Client instance .
864	Creates a new Client instance .
865	Create a new Client object .
866	Deletes a user with the given name .
867	Returns an array of messages for the given address .
868	Create a new Client
869	Delete the given user s attributes
870	Delete a template
871	Creates a new configuration object .
872	Create a new CSV file .
873	Create a new instance
874	Create a new instance for a given template
875	Create a new instance .
876	Returns the list of comments for the given tag .
877	Returns the list of tags for this room
878	Returns a new instance of the given feature
879	Remove a single document from the API
880	Returns the most recent version of a given tag .
881	Perform a POST request .
882	Create a new Time object
883	Creates a new Scan object .
884	Creates a new instance of the given block .
885	Creates a new object .
886	Creates a new instance of the given string .
887	Retrieves the current state of a document .
888	Create a new instance of the given post .
889	Retrieve the status of a message .
890	Validates the specified value for the given key .
891	Checks whether the given argument is a valid XML string .
892	Sets the default value of the given block .
893	Reads a single document from the specified stream .
894	Create a new Client object .
895	Create a new Client object .
896	Create a new Client instance .
897	Reads a response from the given hash .
898	Removes a single message from the server
899	Creates a new Client object .
900	Creates a new Response object .
901	Creates a new channel .
902	Creates a new Client instance .
903	Creates a new Strings object .
904	Get a specific channel .
905	Get the list of channels for a given channel .
906	Get the number of messages for this room .
907	Returns the status of a specific topic .
908	Returns a string representation of the current object .
909	Converts the given location to a serial format .
910	Get all the projects in the project .
911	Get a single project
912	Get a single project
913	Get a specific experiment
914	Get a specific identifier
915	Get a specific experiment
916	Get a specific version of a specific category
917	Get a list of all projects
918	Get an array of all subscribers
919	Initialize a new Client object .
920	Get the contents of a given block .
921	Returns the number of bytes of the given block .
922	Returns the number of bytes of the given block .
923	Perform a query .
924	Returns a hash of all possible keys of the given type .
925	Adds a new option to the collection .
926	Retrieve the value of a file .
927	Finds the given block with the given options .
928	Creates a new Strings instance .
929	Returns a hash of the given parameters
930	Creates a new Tilt object .
931	Return a new Tuple with the given path .
932	Create a new instance of the supplied string .
933	Get the contents of a given string .
934	Sets the value of the given block .
935	Deletes the given key .
936	Returns the number of bytes of the given block .
937	Returns a new Tuple with the given options .
938	Returns a hash of the current keychain .
939	Get the value of a given key
940	Create a new instance of the given block .
941	Creates a new Tuple .
942	Finds a file with the given name .
943	Get a list of all possible columns in the given table .
944	Returns true if the column name exists
945	Runs the given hash with the given options .
946	Creates a new Context object .
947	Raises an exception if it does not exist
948	Raises an exception if the user does not exist
949	Initialize a new Client instance
950	Creates a new Client instance .
951	Creates a new Client instance .
952	Removes the given user s permissions
953	Creates a new Client instance .
954	Create a new Client object .
955	Extracts the details of a particular version .
956	Creates a new version with the given name .
957	Create a new instance from the given hash
958	Create a new instance from the given hash
959	Returns the full path to the specified directory .
960	Creates a new Cache .
961	Creates a new Client object .
962	Validates the specified version .
963	Retrieve the current version of the given block
964	Creates a new DICOM object .
965	Runs the given strategy .
966	Runs the given strategy .
967	Creates a new Client instance .
968	Returns a new Tuple with the given options .
969	Returns the first part of the input stream .
970	Returns an array of conditions matching the given block .
971	Update a single attribute
972	Creates a new Client instance .
973	Creates a new Worker instance .
974	Adds a new node to this node .
975	Returns the name of the specified element .
976	Get the list of attributes from a hash
977	Creates a new instance .
978	Creates a new instance of the given block .
979	Raises an exception if it fails .
980	Calculates the maximum length of the file .
981	Creates a new Client object .
982	Performs a single query .
983	Returns the address of this address .
984	Asserts that the given field is valid .
985	Create a new instance .
986	Initialize a new Client instance .
987	Retrieve the list of values for a given attribute
988	Returns a new version of the supplied block
989	Create a new Client instance .
990	Returns an array of valid email addresses .
991	Finds a single record with the given options .
992	Creates a new instance of the given string .
993	Converts the given input to the given array .
994	Creates a new Filter object .
995	Creates a new Tuple instance .
996	Converts the given string into a hash .
997	Converts the given number of bytes to the given string .
998	Returns true if the given string is false otherwise .
999	Return a new Tuple with the given parameters .
1000	Create a new record from the given hash .
1001	Creates a new Client instance .
1002	Generates a new Client object .
1003	Creates a new channel .
1004	Initialize a new instance of the given object .
1005	Returns the value of the given block
1006	Parses the given string and returns the result .
1007	Retrieve the current value of the given block .
1008	Returns an array of bugs for the given comment
1009	Returns the current state of this document .
1010	Get the contents of a given hash
1011	Initialize a new Client instance .
1012	Creates a new filter object .
1013	Creates a new Client instance .
1014	Replace the contents of a template .
1015	Create a new instance of the given node .
1016	Creates a new Page instance .
1017	Builds a single document from the given hash .
1018	Return a new Tuple with the given parameters
1019	Returns a string representation of this document .
1020	Runs the given block with the given options .
1021	Creates a new Client instance .
1022	Sends a file to the remote server .
1023	Retrieve the contents of a file .
1024	Creates a new remote file .
1025	Calculates the distance of this object .
1026	Returns true if the given color is equal .
1027	Creates a new Client instance .
1028	Gets the status of the given block .
1029	Get the details of a particular user
1030	Initialize a new Client instance .
1031	Helper method for creating a new column
1032	Returns a hash containing all the keys of the given block .
1033	Builds a single document from the given hash .
1034	Returns a new instance of the specified config file .
1035	Returns the contents of the specified file .
1036	Creates a new Client instance .
1037	Get a list of hashes of the given object .
1038	Return a new Tuple with the given arguments .
1039	Retrieve the list of nodes in the given block .
1040	Builds a single sentence
1041	Get the number of pages of the given query .
1042	Extracts the parameters from the given hash .
1043	Get a list of all sites associated with the given name .
1044	Retrieve a list of all known sites in the site
1045	Returns a new Time object with the given URL
1046	Creates a new IO object .
1047	Creates a new Logger instance .
1048	Returns a hash with the given options .
1049	Returns a hash containing all the keys of the given options .
1050	Creates a new Client instance .
1051	Returns true if the given block is in the context of this node .
1052	Builds the given hash of the given object .
1053	Create a new Client object .
1054	Initialize a new Client object .
1055	Returns true if the current process is running .
1056	Create a new PID file .
1057	Parse the supplied data .
1058	Initialize a new Client object
1059	Creates a new Client object .
1060	Gets all the attributes of the document .
1061	Executes the given block with the given name .
1062	Initialize a new Client instance .
1063	Selects a list of files that match the given block .
1064	Runs the given block with the given options .
1065	Returns a list of nodes that match the given block .
1066	Create a new instance of the given tag .
1067	Creates a new selector .
1068	Create a new Client object .
1069	Returns true if the job has been created .
1070	Initialize a new Client instance
1071	Runs the given block on the server .
1072	Get the list of assets from the given list .
1073	Handles the status of the given block .
1074	Create a new Client object .
1075	Creates a new DICOM object .
1076	Create a new Client object .
1077	Creates a new Client instance .
1078	Create a new Client object
1079	Creates a new Client instance .
1080	Perform a POST request .
1081	Create a new instance of the given path .
1082	Performs a PUT request .
1083	Builds a single document
1084	Creates a new Client instance .
1085	This function return true if the response is an empty string .
1086	Initialize a new Client instance
1087	Creates a new Client instance .
1088	Create a new Client instance .
1089	Return a new Tuple with the given name
1090	Starts an existing simulation .
1091	Creates a new instance .
1092	Creates a new Tuple .
1093	Creates a new Client instance .
1094	Create a new Gemfile .
1095	Gets the contents of the given block .
1096	Get a single element
1097	Get the details of a particular resource
1098	Get the details of a particular user
1099	Creates a new Tuple instance .
1100	Creates a new Tuple instance .
1101	Creates a new Tuple .
1102	Creates a new Tuple .
1103	Adds a single row to the table
1104	Get a list of files that have been loaded .
1105	Creates a new Client instance .
1106	Get the class names of the given query .
1107	Creates a new Client instance .
1108	Creates a new Client instance .
1109	Get the current version of the given file
1110	Get the current version of a particular cell
1111	Creates a new version number
1112	Loads the specified file .
1113	Create a new Client object .
1114	Creates a new Map object .
1115	Create a new Time object .
1116	Creates a new Client object .
1117	Initialize a new Client instance .
1118	Create a new Client object .
1119	Create a new instance of the given block .
1120	Create a new instance of the given block
1121	Create a new CSV file .
1122	Create a new CSV file .
1123	Creates a new CSV file .
1124	Defines a new Tuple .
1125	Return a new Tuple with the given parameters
1126	Calls the given block until it has been processed .
1127	Reads the given data from the socket .
1128	Creates a new Client object .
1129	Create a new Client object .
1130	Get the number of pages for a given model .
1131	Calculates the sum of the current model .
1132	Convert to a string .
1133	Creates a new instance from the given hash .
1134	Builds a hash of config objects .
1135	Perform a multipart request
1136	Creates a new instance of the given path .
1137	Returns true if the url is a string or false otherwise .
1138	Returns true if the given value is equal .
1139	Returns true if the object matches the given type .
1140	Returns a string representation of this object .
1141	Executes a block of code against the given block .
1142	Initialize a new Client object .
1143	Initialize a new Client object .
1144	Creates a new Client instance .
1145	Initialize a new Client
1146	Creates a new torrent .
1147	Creates a new Client instance .
1148	Modifies the given hash of the given options .
1149	Determine if the given block is a hash .
1150	Determine if the given block is available
1151	Determine if the user has been set .
1152	Determine if the given file exists
1153	Modify the given file .
1154	Set the limit of a torrent .
1155	Returns the contents of a given file or nil if it exists .
1156	Returns a hash containing all the keys of the given block .
1157	Creates a new instance of the given block .
1158	Initialize a new Client instance
1159	Returns an array of bytes for the given block .
1160	Creates a new instance of the given options .
1161	Creates a new instance of the given block .
1162	Creates a new RSpec object .
1163	This method is called when a single document is found .
1164	Creates a new Client instance .
1165	Retrieve the result of the given block
1166	Create a new instance of the given block .
1167	Initialize a new Client instance
1168	Create a new Client object .
1169	Create a new Client object .
1170	Create a new Client object .
1171	Initialize a new Client object .
1172	Returns a single document
1173	Creates a new DICOM object .
1174	Initialize a new Client object
1175	Returns the relative path to the given directory
1176	Returns the contents of the given index .
1177	Returns the contents of the given block .
1178	Creates a new TableWrapper object .
1179	Creates a new Link object .
1180	Creates a new DICOM object .
1181	Helper method for creating a new Scene instance .
1182	Add an error to the given hash
1183	Return all neighbors of the given neighbors
1184	Returns a hash with the given name .
1185	Creates a new DICOM object .
1186	Creates a new Session instance
1187	Create a new Client object .
1188	Create a new network instance .
1189	Creates a new instance of the given port
1190	Sends a list of files to the given host .
1191	Create a new instance of the given object .
1192	Returns the full path to the given address .
1193	Gets the details of a server .
1194	Creates a new Client instance .
1195	Perform a specific action
1196	Delete a specific image
1197	Perform an HTTP request .
1198	Creates a new Map instance .
1199	Gets a list of all channels for the specified subscription .
1200	Returns the first league for a given season
1201	Creates a new instance of the given block .
1202	Retrieve the value of a given column .
1203	Retrieve the column by name
1204	Returns an array containing the values of the given block .
1205	Creates a new instance of the given resource .
1206	Initialize a new Client object .
1207	Returns a list of all hosts that belong to the server
1208	Create a new instance for the given channel
1209	Disconnects the given router to the server .
1210	Get a list of available methods that match the given object .
1211	Create a new YAML file .
1212	Get the list of available channels that have been set .
1213	Retrieve the list of available categories .
1214	Creates a new Client instance .
1215	Return a new Tuple with the given name or id
1216	Creates a new instance of the given attribute .
1217	Retrieves information about the specified array .
1218	Retrieve a single value from the pool
1219	Get the total number of pages for a given channel .
1220	Retrieve a list of assets from the queue .
1221	Loads the given hash of the given parameters .
1222	Create a new instance of the given file .
1223	Get the element of a particular selector .
1224	Determine if the current session has expired
1225	Initialize a new Client instance .
1226	Get a list of images associated with the given ID .
1227	Create a new image .
1228	Get a list of members for this room .
1229	Add a member to the given address
1230	Create a new container .
1231	Creates a new container .
1232	Creates a new DICOM object .
1233	Creates a new DICOM object .
1234	Creates a new Client object .
1235	Create a new container .
1236	Create a new instance of the given metadata file .
1237	Creates a new Tuple .
1238	Create a new Client object .
1239	Create a new JSS file .
1240	Returns the text of the given address .
1241	Creates a new instance of the given string .
1242	Creates a new instance of the given block .
1243	Returns a new RDD with the given name as a string .
1244	Create a new Client instance .
1245	Get the output of an array
1246	Runs the given block .
1247	Creates a new Client instance .
1248	Add a service to the server
1249	Create a new Client instance .
1250	Get a list of all supported configurations for a given resource .
1251	Disables the given block .
1252	Create a new Client object .
1253	Creates a new Client object .
1254	Create a new instance of the given method .
1255	Create a new Client object .
1256	Converts the given argument to a string .
1257	This function return a new object with the given offset .
1258	Convert the given string to a single pixel value .
1259	Creates a new instance of the given string .
1260	Returns the full number of parts of the given block .
