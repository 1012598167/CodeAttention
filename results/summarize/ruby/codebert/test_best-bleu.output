0	Prints a status message .
1	returns a hash of filenames for the command line
2	Checks if all the keys of the specified keypath .
3	Gets the compression level of the compression system .
4	Create a new file
5	Finds a pattern matching the pattern .
6	Create a new source file .
7	Returns the relative path for the given parent .
8	Remove all volumes from disk
9	Copies assets to disk .
10	Renders the template file .
11	Renders the metadata file .
12	Check if we need to check if we need to check for the local libraries .
13	Check if we need to check for external libraries
14	Check if dependency exists
15	Opens the shared libraries for a shared library
16	Checks if a list of libraries are not found .
17	Returns the digest of a file .
18	Updates the contents of a file from the digest .
19	Returns the list of packages for all available packages .
20	Renders the distribution distribution .
21	Returns an artifact of the artifact specified by the artifact .
22	Gets the build information for the build .
23	Create a new instance
24	Returns metadata about the package metadata
25	Returns the remote file for the given package .
26	Sets the parameters for this object .
27	Adds a new extension .
28	Ensure that the delay is valid .
29	Adds an extension to the client .
30	Renders the local language
31	Renders the parameters
32	Renders source files
33	Renders the bundle .
34	Resolve a build dependency .
35	Add a timestamp to the current version .
36	Returns true if the version is a version of the version
37	Returns the version of the source
38	Renders the template .
39	Define a warning .
40	Add a message to the log
41	Execute a build command .
42	Runs the command
43	Builds an application .
44	Run the rake task
45	Create a new project .
46	Delete all files in the project
47	Copy the source files to the project .
48	Updates the YAML gem .
49	Writes the tarball to the target .
50	Create a tarball
51	Clean up the project
52	Copies the contents of the project .
53	Extract the temporary file from the tarball
54	Returns the digest of the digest type .
55	Verifies the checksum .
56	Gets the signature for the given identifier .
57	Sign a package .
58	Returns the name of the certificate .
59	Retrieve the manifest from the manifest .
60	Create a new source file .
61	Returns the version of the version .
62	Adds a list of files to the current file .
63	Returns the downloaded project
64	Prepend a path to the given path .
65	Determine if the override of the current project .
66	Returns the version of the cache .
67	Returns the fetcher for the given source .
68	Create a new Archive .
69	Convert the source to a hash
70	Create a new instance
71	Create a cache
72	Returns the version of the package
73	Initialize a new cache
74	Remove all git directories in the git directory
75	Renders the manifest
76	Run the shell command .
77	Run the shell .
78	Executes a block of retryable with retry .
79	Returns the path for the given path
80	Returns the path for the given path
81	Create directories .
82	Remove a directory from the directory
83	Copies a file to the destination file .
84	Remove a file from the specified path
85	Create a new file .
86	Create a link .
87	Raises an exception if it exists .
88	Get the license content
89	Returns a map for the project
90	Processes the dependencies of a dependency .
91	Collect license information for a package
92	= begin Function to write files
93	Returns the content of the package .
94	Validate the metadata file .
95	Returns a key for the package .
96	Generate a version of the VERSION version
97	Returns the start time for the build time
98	Save the configuration to a file
99	Sets the name of the suite .
100	Set the license
101	Returns the build path for the build directory .
102	Helper method to generate a RPM file .
103	Publishes a package .
104	Returns the version of the version .
105	Adds a package .
106	Create a new block .
107	Set a value for a given name
108	Returns the license file .
109	Checks if a dependency exists
110	Builds the manifest
111	Write the manifest
112	Write the configuration file
113	Determine the current package .
114	Returns true if the directory contains a directory
115	Create a new project
116	Returns the current revision of the current revision .
117	Returns true if the given revision exists .
118	Convert a SSH command to the SSH port .
119	Calculates the minimum bits of this bitbase .
120	returns a hash of all the parameters
121	Builds the signature of a signature .
122	Called when a site has been loaded .
123	Returns true if the collection has been loaded .
124	Raises an exception if the block is an exception .
125	Merge the arguments for the target .
126	Combines a hash of arguments .
127	Returns the list of elements that are present .
128	Checks if the URL matches the given URL .
129	Matches a component from a URI component .
130	Returns the URL for a URL .
131	Returns the value for the given index .
132	Builds a new enumerator .
133	Builds an array
134	Builds a block from the queue .
135	Builds a list of records for the current record .
136	Builds an array of records for the specified query .
137	Returns a batch of rows in the collection .
138	Returns true if the object is a column .
139	Returns the version of the version .
140	Called when a record has been created .
141	This method should be called when there is no effect .
142	this method should be called before_update_update_update_save_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update
143	This method should be called before the callbacks .
144	Check the item type of the item type .
145	Returns true if the version is a new version of the previous version
146	Recursively cleans all changes in the tree .
147	Convert a node to a node .
148	Sets up a level scope .
149	Set the ancestors for this collection
150	Finds the nodes in the order .
151	Converts an array of children into a hash .
152	Builds the parents of the parent of this node .
153	Recursively rebuild the cache
154	Returns true if the node matches the given node .
155	Create a new Client object .
156	Create a hash of options .
157	Reset configuration values
158	Gets the HTTP header for the webhook
159	Start a timer .
160	Set timeout timeout
161	Returns the timeout for the timeout .
162	Builds the schema from the schema
163	Handle the schema
164	Returns true if the conditions matches the given conditions .
165	Define an alias
166	Expands a list of aliases for the given action .
167	Returns an array of aliases for the given action .
168	Returns a list of rules for the subject
169	Create a new file
170	Iterates over each file in the directory .
171	Recursively traverses all nodes in a tree .
172	Initializes the current directory .
173	Calculate the checksum
174	Calculate the checksum
175	Create a new image object .
176	Returns the UTF - encoded string .
177	Returns an array of characters from the string .
178	Calculate checksum
179	Returns an array of bars .
180	Renders a chart .
181	Serialize the image
182	Renders the image .
183	Generate a PDF
184	Returns a string representation of the image .
185	Set the number of threads
186	Returns true if the current page exists .
187	Make a GET request
188	Create a new database .
189	Ensure that the commit has been committed .
190	Ensures that the commit has changed .
191	Ensures that user is a user .
192	Ensures user is a user .
193	Create a new user with the given name .
194	Ensures the repository exists .
195	Ensures the translations of the repository .
196	Creates a new branch for the repo .
197	Check that the fork branch exists .
198	Ensures that the user is active .
199	Ensure the participant exists .
200	Ensures that the user is valid .
201	Ensures that the commit is saved .
202	Ensures the user s watcher for a user .
203	Ensures the pull request for a pull request
204	Ensure the pull request is a single request
205	Returns true if the branch is a branch
206	Recursively find all forks for a repo
207	Ensure the given branch exists
208	Ensures that the repository contains issues .
209	Ensure that the issue is a single issue
210	Ensures that the specified event has changed .
211	Ensure that the event has a specific issue .
212	Ensures that the issue has changed .
213	Ensure the issue is a single issue
214	Ensures the labels for the repository
215	Ensure that the repository exists .
216	Ensures labels for issues
217	Ensure that the label is associated with a label .
218	Create a new transaction .
219	Store the commit s commit
220	Logs a message .
221	Perform an API request
222	Gets the last time of a tag .
223	Returns the number of pages for the given URL .
224	Parses links
225	Parses the result of the result
226	Perform a HTTP request .
227	Attach connection to the server
228	Connect to the adapter
229	Retrieve a commit from the repository
230	Fetches the commit for a commit
231	Retrieve the organization for a user .
232	Gets the list of watchers for a user .
233	Gets the watcher for a user .
234	Get all events for a repository
235	Retrieve the branch for a branch
236	Retrieve the default branch for a branch
237	Processes the command - line arguments
238	Raise an error .
239	Creates a new queue .
240	Read a value from a key
241	Filter the location .
242	Checks if a message is available .
243	Validates the options hash .
244	Deliver messages
245	Synchronously .
246	Creates a new mapping for the given mapping .
247	Creates a new mapping of layers .
248	Loads the file
249	Asserts the comparison .
250	Returns the gradient for each vector of the inputs
251	Creates a new normalization object .
252	Define an image
253	Create a new Tuple object .
254	Create a new instance .
255	Create a new slice .
256	Create a new DataSet .
257	adds two operations
258	Searches the results of the given dataset .
259	Add an array of values .
260	Create a partition .
261	Define a condition
262	Creates a scalar argument .
263	Creates a DICOM object .
264	Creates a new Tuple .
265	Calls a new Tuple .
266	Prints a message .
267	Creates a new integer .
268	Calculates the number of points for a given number .
269	Logs a given argument .
270	Creates a new Point .
271	Create a new matrix .
272	Perform a metric .
273	Pushes a stack .
274	Unpack a single value .
275	Creates a new sentence .
276	adds an op
277	Creates a new array of arrays .
278	Yields two arrays of two arrays .
279	Multiply a new matrix with the same elements of the given array .
280	Add a new operation to the database .
281	Calculate the results of an array .
282	Calculates the number of fractions of a numeric value .
283	Create a scalar object
284	Creates a new Tuple .
285	Modify operator .
286	Pops an array of two elements .
287	Creates a new DICOM object .
288	Creates a new RDD .
289	Create a new range .
290	Create a new rank .
291	Adds a float to the number of numbers .
292	Sets the number of vectors for a given column .
293	Creates a new Shape object .
294	Calculates a numeric value for a column .
295	Creates a scalar argument .
296	Subscribes a sub - one or more operations .
297	Calculates the sum of an array of columns .
298	Creates a new Tuple .
299	Creates a new Tuple .
300	Returns the first element for a given key .
301	Create a new array .
302	Convert the input to a stream
303	Create a new device .
304	Initializes a new Stream object
305	Creates a new variable .
306	Create a new scope .
307	Creates a new Stream .
308	Create a new Tuple object .
309	Ensures that the given value is valid for each dimension .
310	Applies an array of types to a float type
311	Add an audio file .
312	Create a new event
313	Pad the message .
314	Check that the length of length length is a length of length .
315	Check if a string is valid
316	Check that the HMAC key is valid .
317	Check if the string is valid
318	Creates a new authenticator instance .
319	Verify the message of a message
320	Create a new cipher
321	Open a new message .
322	Create a new instance .
323	Returns the logger instance .
324	Measure a level .
325	Create a new trace .
326	Create a new tag .
327	Push a list of tags .
328	Returns true if the log is a valid filter .
329	Creates a new Logger instance .
330	Create a new instance .
331	Create a new instance .
332	Add a message to the logger .
333	Assign an exception to a single metric
334	Assign a message to the payload .
335	Calls the given exception .
336	Extracts the name from the stack .
337	Generates a message for a message
338	Gathers all variables that match the given block .
339	Start the execution process .
340	Route a message .
341	Determine if the data is present
342	Gets the node for the given node .
343	get all variables for a domain
344	Looks up the parent of a child process .
345	Increment the cache .
346	Processes a job .
347	Returns a lock for the job
348	Call the given job
349	Merge options hash with options
350	Remove a query from the query
351	Parses information about the user .
352	Run a command on the server .
353	Returns the exit code for the given exception .
354	Add a method to the registry .
355	Imports a method to import the given methods .
356	Imports the given class to the source module .
357	Create a new object with the given arguments .
358	Fetch the method from the cache
359	Convert AST to AST
360	Create a new proc
361	Create a new pattern from the pattern .
362	Replaces the replacement with the given pattern .
363	Runs the command .
364	Run the window .
365	Create a new tab .
366	Run the command .
367	Set the range of keys for the given block .
368	Set the value for a key
369	Set the key at the specified key
370	Write key to file .
371	Set the header for the command
372	Set the operation .
373	Write header header
374	Create a header for the header
375	Check if all nodes are completed .
376	Returns the connection for the connection .
377	Parses a single record .
378	Returns a random node from the list of nodes .
379	Gets a node by name .
380	Prepend a key
381	Get a single header from the server .
382	Returns true if the key exists .
383	Registers a DICOM object .
384	Remove a Nexpose firewall
385	Retrieves information about the specified UUID .
386	Executes a query against the specified query .
387	Create a new index
388	Drop an existing index
389	Perform a scan .
390	Drop a user .
391	Change the user with the given password .
392	Creates a new role .
393	Queries the users for a user .
394	Returns the next record .
395	Iterate over each record .
396	Initializes a new Context
397	Move the given line .
398	Returns the dimensions of this image .
399	Returns the position of the screen .
400	Get the coordinates of the image map .
401	Returns true if the bounds of the bounds of the map .
402	Performs an animation .
403	Draw a map .
404	Updates the current image .
405	Draws the text .
406	Sets the text of the text .
407	Set the position of the given text
408	Draws an image .
409	Draws the background .
410	Updates the current button .
411	Set the value for the given value
412	Draws an image .
413	Draws a text field .
414	Create a line .
415	Write a paragraph
416	Add a message to the queue .
417	Gets the message for the given message .
418	Checks the timestamp of the timestamp for the given timestamp .
419	Create a new model object
420	Check the device information .
421	Open a log file
422	Set the type of the file type
423	Check that the activity is valid
424	Calculates the distance of the measurements of the measurements .
425	Calculates the max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_list .
426	Creates a new IO object .
427	Create a new record .
428	Check the activity of the session .
429	Register a field .
430	Register a field
431	Checks if the captcha message exists .
432	Send the notification to the contact .
433	Returns a hash of attributes for the form of attributes .
434	Start the server
435	Start the server .
436	Create a new client
437	Updates the configuration .
438	Sets up the configuration .
439	Create a new collection .
440	Clean up the configuration file .
441	Returns an array of signals for the current class .
442	Creates a new Duration .
443	Returns the start of the week .
444	Reset the current value for the current page .
445	Initializes a new collector .
446	Iterate over each collection in the collection .
447	Update configuration .
448	Initializes the cursor .
449	Move a cursor to the cursor .
450	Writes the data to the screen .
451	Finish the screen
452	Stop the cursor .
453	Logs a message .
454	Prepend a message to the screen .
455	Sets the lock for the worker .
456	Setup the bot .
457	Performs a post .
458	Runs the chat .
459	Creates a new message .
460	Runs the chat .
461	Sets information about the user .
462	Setup a stream for the client .
463	Parses a service name .
464	Connect to the server .
465	Write data to socket
466	Create a new socket .
467	Close the connection to the server
468	Returns true if the socket is alive .
469	Connect to a socket .
470	Write data to socket
471	Connect to a socket .
472	returns a new participant for this participant .
473	Determine if device is available
474	Returns a list of all players in the server .
475	Find resource by id
476	get all records
477	Validates the attributes of the record .
478	Validates that the model is valid .
479	Updates an XML element .
480	Returns the frequency for a given frequency .
481	Returns an array of frequencies for a given frequency .
482	Returns a value for a given frequency
483	Runs the given predicate .
484	Calculates the sum of the sum of the budget .
485	returns an array of equations
486	Given a new N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
487	Returns the summary of the event .
488	Initializes the Tuple object .
489	Parses a temp file .
490	Loads a relationship from a relationship
491	Convert the response to a JSON object
492	Call the function with a function .
493	Send a transaction
494	Parses a URL .
495	Make a RPC call to the server
496	Convenience method to generate a JSON call
497	Creates a new connection .
498	Creates a new transaction .
499	Replaces a new string with the given value .
500	Create a new object .
501	Generate a block .
502	Generates a group of strings .
503	Generates a group of arguments .
504	Initializes the client .
505	Create a new instance of a class
506	Add a reference to the remote file .
507	Add a file to the project .
508	Remove all directories that have been removed
509	Configures the build phases of the target .
510	Check if source is a source file
511	Returns the class .
512	Returns a list of files that should be included .
513	Loads the configuration from a file .
514	Prints a list of duplicates in the database .
515	Returns the config file .
516	Checks if the file matches the given file .
517	Check if the file exists
518	Check if the option is a symbol
519	Processes the results of the results of the required parameters .
520	Get all entries in a directory
521	Convert a string to a string .
522	packs the files in the collection
523	Parses the links of the link .
524	Pack up the entity .
525	Adds a header to the list .
526	Builds a list of content items
527	Renders the header for a row .
528	Returns the contents of the card .
529	Renders the footer .
530	Displays a list of group items .
531	Renders an image .
532	Create a new item .
533	Merge the options hash .
534	Renders a navigation .
535	Renders the notification .
536	Returns true if the current options can be used to be true .
537	Returns the HTML for HTML tags .
538	add data to html
539	Sets the header for a column .
540	Add a column to the data .
541	Displays a link .
542	Create a new engine .
543	Copies the configuration file .
544	Convert a hash to a hash
545	Adds files to the given class .
546	Find all files in the asset path
547	Send a command to the pool
548	Create a new Thread
549	Loads the fixture configuration .
550	Checks if the image name exists .
551	Returns a hash of parameters for a scope .
552	Convert a key to a hash
553	Update the values of the parameters .
554	Returns true if the params exists .
555	Create a new lock
556	Unlocks the token for a token .
557	Applies options .
558	Shows the notification .
559	Updates the notification .
560	Downloads the given URL .
561	Gets information about the info hash .
562	Convert the command to a hash
563	Create a new instance with the given key .
564	Delegates to the given block .
565	Remove old keys from the store
566	Sanitize keys
567	Returns a representation of the model .
568	Generates a field for a field
569	Calculates the position of the home
570	draw a border
571	Resets default values to default values
572	draw a barcode
573	Adds a field to the field .
574	Applies the slug to the local locale .
575	Returns true if the current language exists
576	Returns true if the language exists in the locale .
577	Returns a string representation of the duration .
578	Returns a string representation of the given time .
579	Track errors .
580	Processes a batch of batch .
581	Preprocess processors
582	Processes each post .
583	Executes a list of dependencies .
584	Runs the screen .
585	Returns a redis key for the given field .
586	Convert keys to redis
587	Creates a new instance of a class .
588	Stores the redis keys of the redis key .
589	Returns a hash of fields for the configuration .
590	Check if it exists .
591	Check if a given alias exists .
592	Check if a key is a valid key
593	Validates the redis keys of a redis key .
594	Convert arguments to a hash
595	Finds a given alias .
596	Get the value for a given key
597	Returns an instance of a given alias .
598	Create a new instance .
599	convert to redis to redis
600	Transforms a value based on the given type .
601	Parses a value .
602	Update the attributes of the object .
603	Removes all aliases from Redis .
604	Add a token to the client .
605	Gets the DNS DNS for the given DNS topics .
606	Create a new cluster .
607	Creates a new connection .
608	Shows the data for a field .
609	Parses a repeat repetition .
610	Find a single element from a single element .
611	Handles a field .
612	Parses a string .
613	Renders all elements .
614	Extracts a regular expression for a regular expression .
615	Find a field from a string .
616	Parse a loop
617	Create a new event .
618	Processes a loop .
619	Processes a single segment .
620	Render the node .
621	calculate the list of values for the response
622	Normalizes the response to the list of fields .
623	Audit all the responses for a response .
624	Creates a new tag .
625	Create a new AST .
626	Rewrite the selected selector .
627	Selects the selected elements with the selected selector .
628	Adds a configuration to the configuration hash .
629	Returns true if the process exists .
630	Wait for a process .
631	Upload changes to the current repository
632	get information about a branch
633	Get the details of a specific revision .
634	Commit changes to Git repository
635	Get the details of a specific version .
636	Copies files to the current directory
637	Gets the history of the history of a commit .
638	Returns the status of the given revision .
639	Gets the status of a specific module .
640	Gets the status of a directory .
641	Builds the history of the history of the history .
642	Get the status of a specific revision .
643	Sets up the current branch .
644	Sets up the modules for the module .
645	Check if the current document is a descendant of the current document .
646	Get the parent of the commit .
647	Returns a string representation of the Git repository .
648	Extract data from mappings
649	Converts a list of files to a map of files .
650	Calculate the checksum for a given file .
651	Gets the current branch of the branch .
652	Check if the remote branch exists
653	Returns the first revision of the given revision .
654	Returns a hash of information about the given revision .
655	Get the remotes of a branch
656	Export an archive
657	Deletes a temporary directory .
658	Uploads the current module
659	Uploads a list of modules .
660	Get a list of revisions of the current revision .
661	Fetches the remote repository from remote repository
662	Assign an attribute .
663	Returns an array of errors .
664	Creates a new task
665	Delegates to the current context .
666	Create a new object .
667	Send a pull request to the gem
668	Evaluate interpolation
669	Returns a selector for a given anchor
670	Run the request .
671	select a date
672	Creates a label .
673	Read a value from the buffer .
674	Pack a value .
675	Creates a new instance of the builder .
676	Returns an array of static files
677	Returns an array of all assets that are included in the asset paths .
678	Get a list of activities for a specific activity .
679	Run a report on the server .
680	Generate a random random random random entropy from the given block
681	Draws the QR code .
682	Create a new report
683	Output a report
684	Processes a list of targets .
685	Updates the contents of the buffer .
686	Perform an HTTP request
687	Create a new string .
688	Convert a string to a string
689	Convert a hash to a hash
690	Send a notification message .
691	Run the command
692	Wrap a list of words in the list .
693	Saves the database .
694	Remove a reference from the cache
695	Merge two hashes with another hash .
696	Adds a new object to the cache .
697	Get the object s object .
698	Remove a reference from the cache .
699	Create a new object .
700	Create a new OAuth client
701	Returns the middleware for this controller .
702	Initializes a new Client instance .
703	Returns a hash with the error message .
704	Sets up the options hash .
705	Sets the arguments for the given arguments .
706	Reset all defaults to default values
707	Returns an array of all filters that match the specified filter .
708	Extend an object from the request .
709	Set the name of the parameters
710	Define a new class
711	Checks if the parameters exists .
712	Get the name of the parameter .
713	Set the parameter for this class
714	Yields each parameter for each parameter .
715	Link to the model
716	Commit the current transaction .
717	Stops the current transaction .
718	Read the next message .
719	Create a report .
720	Extract a field from the database .
721	Validates the node instance .
722	Returns true if the node is a valid instance .
723	Builds a new object .
724	This method should be called before this node .
725	Checks if the instance is valid .
726	Returns true if the instance is a valid instance .
727	Returns true if the instance is a valid instance .
728	clone recursively recurse
729	Returns the ancestors of this node .
730	Return the children of this node .
731	Returns true if the node is a valid loop .
732	Validates that the value is valid .
733	Validates the node .
734	Check if node is valid .
735	Get the answers for a survey .
736	get the next question .
737	remove the node from the list
738	Returns the index of this node .
739	Move all nodes to this node .
740	Move the node to this node .
741	Check if the node is valid
742	Returns the number of ancestors for this node .
743	Returns the number of children of the node .
744	Validates the value of a node .
745	Builds a single question .
746	Return all edges for this node .
747	Validates the node instance of a node instance .
748	Updates the given type .
749	Remove a survey .
750	Builds the answer .
751	remove the data from the server
752	this method should be called before this node .
753	Creates a table for a table .
754	Returns the class for the collection
755	Returns the list of targets for a list of targets .
756	Gets the writer for the specified writer .
757	Create a new animation object .
758	Register a mouse event .
759	Defines a notification notification .
760	Trigger all the keys of the button .
761	Call all notifications for the given notification
762	Runs an event .
763	Adds a model to the model .
764	Creates a new transition .
765	Called when the event fires .
766	Adds an event to the target .
767	Creates a new controller .
768	Starts the window .
769	Create a new image .
770	Creates a new TableWrapper object .
771	Creates a new table .
772	Adds an action to the list of links .
773	Creates a link for a given action .
774	Adds a scene to the scene .
775	Applies the post filters
776	Creates a hash with default values .
777	Returns an array of all objects for the given scene .
778	Returns the name of the actor .
779	Send an event to the notification
780	Create a new callback .
781	Adds a new actor to the scene .
782	Register a new animation
783	Register an actor
784	The update_update_update_update_update_update_all_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_updated_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_update_at
785	This method returns the drawer objects that have been loaded .
786	Creates a new Scene object .
787	Prepare a new Scene object
788	Returns hash representation of the drawer object
789	Create a model
790	Loads the properties of a hash .
791	Get activity for a specific activity
792	Get a list of measurements for a user .
793	Get the weight for the metric
794	Get a series for a user
795	Perform a request
796	Sets the content type of the file type .
797	Send a request to a channel
798	Fetch a response from a channel .
799	Register a handler .
800	Download the source to the source
801	Check the files in the source file .
802	Check if the file exists
803	Fetch header from HTTP header
804	Define a parameter
805	Finds all valid columns in the table
806	Create a new Mapper object
807	Generate a path for a given path .
808	Resolves an array of references to a reference .
809	Runs the schema
810	Reads a schema from the schema .
811	Generates the parameters for a request
812	Yields each resource in the configuration file
813	Enumerates all resources for a resource .
814	Convert a URL to a host
815	Convert a predicate to a filter .
816	Adds a child to the specified folder .
817	Returns the system data .
818	Runs the execution
819	Sets the failure handler .
820	Returns true if the current state should be run .
821	Returns true if the status is completed .
822	Processes a step .
823	Runs the task .
824	print a section
825	Returns a Hash containing all columns for this column .
826	Render all pages .
827	Add a page to the page .
828	Adds aliases to the locale .
829	Parses the contents of a file .
830	search for variables
831	Returns the last level of the top level of the last level .
832	Convert a string to a string
833	Removes HTML tags from HTML tags
834	Populate the contents of a node
835	Serialize the children
836	Returns the parent of the given level .
837	Returns the type of the DICOM object .
838	Creates a link to a specific type .
839	Creates a link
840	Creates a link that can be used to be used to be used to be used to translate the user .
841	Requests a trust that can be used to be used to be used for HTTPS .
842	Renders the contents of a file .
843	Sets a symlink .
844	Renders the content .
845	Returns a user s friends .
846	Get information about a user
847	adds a comment
848	Submit a user .
849	Called on the server .
850	Returns true if the string matches the given string .
851	Generates a captcha tag .
852	Delete an image
853	Set the contents of a site
854	Subscribe to a bot .
855	returns a list of topics
856	Get a list of categories
857	Add a modifier .
858	Add a user to the creator .
859	Dispatches a user .
860	Remove a user .
861	Remove a user from the repository .
862	Unregister a user .
863	Make a GET request
864	Logs a user .
865	Authenticates the user .
866	delete the user s password
867	Get a list of messages .
868	Clears the templates for a user
869	Delete a user
870	Delete a draft template
871	settings for a user
872	Check if a user is draft
873	This function renders a page for a user
874	Select a template
875	Enable or disable chat
876	Get comment
877	Get list of subscribers
878	Detects a user
879	Remove a user .
880	Get a list of logged in reddit .
881	Send a request to the server
882	Set the expiration time for this period
883	Returns the number of lines for the table .
884	Set up the instance variables
885	Renders an object .
886	Joins an Array of strings into a string .
887	Open a session .
888	Post a subscription
889	Expire a subscription
890	Validates that the value is present .
891	Validates that the XML document is valid .
892	Set defaults to defaults
893	Reads a subscription
894	Open a session .
895	Create a POST request
896	Expire a request
897	Read a response from a response
898	Remove a response from a response
899	Create a new channel .
900	Create a POST request .
901	Create a new channel
902	Adds a security token to the security token .
903	Remove a security token from this channel .
904	Get a channel
905	Gets all channels associated with this channel .
906	Updates the Redis database .
907	set phrase
908	Returns a string representation of the date .
909	Convert to latitude
910	Get all projects
911	Get a specific Project
912	Get a list of projects
913	Get a specific experiment
914	Get statistics
915	Get a list of variations
916	Get a specific variation
917	Get a list of Projects
918	Get a single audience .
919	Make a GET request
920	Get the value for a given key .
921	Generate a random integer
922	returns a random bit of random bits
923	Adds a field to the database .
924	Returns a list of keys for the table .
925	Creates a new autocomplete object .
926	Fetches data from the database .
927	Performs a search .
928	Converts a sequence of words into a string .
929	Returns an array of scores
930	Renders the image .
931	Compact a new copy of two files .
932	Returns a list of keys of files .
933	Gets the code for the given key .
934	Set up a new Tuple .
935	Removes a value from the cache .
936	Returns an array of keys .
937	Change the list of values .
938	Returns a list of keys of keys .
939	Get a value for a given key .
940	Raises an error .
941	Iterate over each key in the table .
942	Finds an icon .
943	Get all columns in the table
944	Returns true if the column is numeric
945	Takes an array of options hash and returns an array of options hash
946	Set a context for a given context
947	raise an exception
948	raise an exception
949	Logs a user .
950	Logout the user s scope .
951	Set the user s session
952	Unset the user s scope .
953	Returns the user associated with the given scope .
954	Returns the namespace for the application .
955	Extract the version information from the application
956	Create a new cache
957	Updates the cache
958	Updates the cache
959	Gets the default path for the given path .
960	Download the cache
961	Send a message .
962	Validate the cache .
963	Fetch the cache from the cache
964	Create a new database .
965	Run all strategies
966	Runs a strategy .
967	Executes a command on the server .
968	Prints a hex representation of the hex format .
969	Reads words from a string
970	Returns a list of conditions for a query .
971	Update an existing index .
972	Queries the database .
973	Dispatch worker methods
974	Adds a node to this node .
975	Find node by name
976	Convert a hash of attributes to a hash .
977	Create a new model
978	Create a new hash with the given keys .
979	Create a new exception .
980	Check if the file is valid .
981	Make API call to API
982	Performs a query .
983	Define associated model class
984	Sets validations for the given class .
985	Create a class
986	Create a new reader .
987	Returns an array of values for the given hash .
988	Checks that the version version of a version of the version .
989	Run the stack
990	Validates that the IMAP IMAP IMAP IMAP IMAP .
991	Finds an IMAP IMAP IMAP IMAP IMAP IMAP .
992	Convert a string to a string .
993	Determine whether a new Tuple is valid .
994	Adds a string to the given string .
995	Convert a integer to a string .
996	Convert a string to a string
997	Convert the given character to the given string .
998	Returns true if the given string matches the given string .
999	Creates a new Point instance .
1000	Validates the metadata .
1001	Send a message to this channel .
1002	Sets the changes of the record .
1003	Destroy a channel .
1004	Creates a new logger instance .
1005	Fetches the data from a hash
1006	Parses the output of the target .
1007	Returns the string representation of the buffer .
1008	Get comments
1009	Save the configuration to the configuration file
1010	Reads all pages from the wiki .
1011	Read a response from the response .
1012	Adds a line to the specified line .
1013	Write the AST to the AST .
1014	Replaces the template with the given template .
1015	Rename a template .
1016	This function creates a new commit .
1017	commit changes to a specific revision
1018	Extracts a scan string from a string .
1019	Returns a string representation of the text .
1020	Outputs a debug message .
1021	Executes a command on the server .
1022	Upload a remote file .
1023	Download the remote server .
1024	Writes a file to the remote server .
1025	Calculates distance between two points .
1026	Returns true if the point is at the given point .
1027	Delegates to the subject
1028	Outputs a formatted output
1029	Gets information about a user .
1030	Sets the options hash .
1031	Add a column .
1032	Create a new Column
1033	Reads data from a file
1034	Finds the backtrace from the stack .
1035	Returns the backtrace from the backtrace .
1036	Extract all queues from the queue .
1037	Get the hash of the node .
1038	Build a sentence from the sentence .
1039	Returns the list of nodes for this node .
1040	Build a sentence from a hash
1041	get pages from wiki
1042	Filters the results with the given params .
1043	Get a list of sites .
1044	Queries a site for a site .
1045	Returns the rate of the season
1046	Set the output to the output file
1047	Logs a message .
1048	Returns a hash of options for a given field .
1049	Returns an array containing all the names of the selected fields .
1050	Send a packet to the server .
1051	Returns true if this node is ancestor .
1052	Returns an array of built objects for this object .
1053	Initializes a new instance .
1054	Create a new IO object .
1055	Returns true if the process is running .
1056	Write pid file to pid file
1057	Parses the command line arguments .
1058	Loads the documents from the specified file .
1059	Save the document to the document .
1060	Prints all the documents for the document .
1061	Sets all files in the batch .
1062	Evaluates the nodes on the given block .
1063	Returns an element with the selected selector .
1064	Evaluate function
1065	Yields the selected nodes from the selected nodes .
1066	Create a new tag .
1067	Creates a new option .
1068	Create a new configuration file .
1069	Returns the current model for the current model
1070	This method is called when a new exception is encountered .
1071	Run the command .
1072	Displays the list of entities for the given entity .
1073	Gets the status of the status
1074	Perform a HTTP request
1075	Performs a PUT request .
1076	Perform a HTTP request
1077	Adds a token to the queue .
1078	Authenticate via the client .
1079	Make a GET request to a path
1080	Make a POST request .
1081	Make a HTTP POST request .
1082	Performs a PUT request .
1083	Make a HTTP request .
1084	Create a new Client object .
1085	Determine if the response is valid
1086	Create a HTTP request .
1087	Run the HTTP request
1088	Create a new Place
1089	Create a new transition
1090	Runs the simulation
1091	Create a new Beam
1092	Invokes the packet for the transition
1093	Send a text request to the server
1094	install the Gemfile
1095	install puppet modules
1096	Gets the details of a breach .
1097	Gets the stats for a particular endpoint .
1098	Get the stats for a user
1099	This method returns an array of text elements of the text .
1100	add tokens to tokens
1101	Delete all tokens from the stack
1102	Adds a query to the table .
1103	Adds a query to the table .
1104	Loads the classes from the cache
1105	Search for wordwords
1106	A search for searchwords
1107	Authorization header for client
1108	Returns the folder for the application .
1109	Return the version of the application
1110	Returns the version of the application .
1111	Updates the version of the application .
1112	Load project files
1113	Display help help
1114	Adds a token to the token .
1115	Sets the time of the time to set the time to the time .
1116	Send a message to the server
1117	Create a new HTTP POST request .
1118	Delete a resource
1119	Returns a hash of configuration attributes
1120	Returns a hash of all instances of the instance
1121	Read a CSV file from the CSV file
1122	Write a file to the file
1123	Serialize a CSV file
1124	Adds a value to this type .
1125	takes a new EC2 and returns the new instance .
1126	Waits for all instances of the pool .
1127	Read a socket .
1128	Write a value to the socket
1129	Get a list of all available directories .
1130	Calculates the total statistics for the model
1131	Calculates the total sum of the model
1132	Create a label
1133	Store a new object in the context
1134	Configure a configuration object .
1135	Create a new HTTP request
1136	Creates a new URL .
1137	Returns true if the URL matches the string .
1138	Asserts the given arguments .
1139	Asserts the type of the given type .
1140	Assigns a string with the given value .
1141	Assigns a block .
1142	Perform a polling request
1143	sync data to server
1144	Add a torrent .
1145	Download all available commands
1146	Delete torrent files
1147	Sets a command on the server .
1148	Increment a new torrent .
1149	Decrement a new torrent
1150	Create a new torrent .
1151	Takes a list of torrents that can be used to reduce the torrent .
1152	Set a command
1153	Set the torrent limit .
1154	Set the limit
1155	Returns the digest of a file .
1156	Return a hash of keys in the cache .
1157	Yield each key to the bucket
1158	Run the command
1159	Returns the list of events that have been triggered .
1160	Builds all instances of a template
1161	Raises an exception if it exists
1162	= begin rdoc
1163	Mark a list of entries that have been processed .
1164	Set HTTP headers
1165	Store the data for the feed
1166	Raises an error message
1167	Perform a HTTP request .
1168	Make a GET request .
1169	Perform a DELETE request .
1170	Perform a PUT request .
1171	Make a POST request .
1172	Get an article
1173	Upload a file to an image .
1174	PUT an HTUT request
1175	Returns the path for the given path .
1176	Indexes a file .
1177	Create accessor for accessors
1178	Add a row to this table .
1179	Builds a markdown table .
1180	Builds the footer .
1181	Sets an instance of instance variables .
1182	Add an error to the error
1183	Returns an array of vertices of vertices .
1184	Gets a merchant by id .
1185	Encodes a message .
1186	Declares the role for the user
1187	Make a POST request .
1188	Create a network .
1189	Create a port
1190	Move a subnet to the specified port .
1191	Serializes the JSON data .
1192	Redirect to url
1193	Get servers by ID
1194	Create a server .
1195	Perform a server
1196	Delete an image
1197	Make a GET request
1198	Sets the path to the file .
1199	Returns a list of tickets for the team .
1200	Returns a list of players for a team .
1201	Create a new instance of the method .
1202	Fetch data from a given column .
1203	Get the column at index .
1204	Get all values for the given range
1205	Accessor for accessor methods
1206	Initialize a new Client object .
1207	Get all routers
1208	Create a new Router
1209	Remove a network interface
1210	Finds all methods matching the query .
1211	Loads the config file .
1212	Gets the provider for the current query .
1213	Returns an array of categories .
1214	Creates a role for a role
1215	Check the plan for the plan
1216	Create a new instance of object .
1217	This method gets called when you want to update the same time .
1218	Retrieve a single shot
1219	Total number of pages for a page
1220	Uniques and returns a list of titles
1221	Load cookies from the cookie
1222	Dumps the cookie into a hash .
1223	set value for element
1224	Updates the expiration time in the cache .
1225	Perform a GET request
1226	Get an image
1227	Create an image
1228	Replaces a member with a member
1229	Add a member to this member .
1230	Create a directory .
1231	Create a new file .
1232	Moves a file to the destination directory .
1233	Create a new file .
1234	Change the file .
1235	Create a new directory .
1236	Copies the metadata file .
1237	Create a new temp file .
1238	Handle incoming requests
1239	Returns a hash of config file
1240	Replaces email addresses with email addresses .
1241	Insert a plural rule .
1242	Insert a single rule .
1243	Removes a plural from a single plural
1244	Executes a command on the server .
1245	Writes the results to the output directory .
1246	Runs the output
1247	Create a new Client .
1248	Add a service to the service
1249	Add an endpoint to the server
1250	Get the endpoint for a token
1251	Disables a method for a specific method .
1252	Creates a Proc object .
1253	Perform an alias .
1254	Create a new alias .
1255	Convert the password to a public key
1256	Calculates the difference between two points .
1257	Recursively compares the given vector .
1258	Decode a point at the given point .
1259	Convert the secret to a secret
1260	Returns the name of a part of a name .
