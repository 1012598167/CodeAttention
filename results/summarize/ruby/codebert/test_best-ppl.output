0	Prints the status of the status .
1	Returns an array of files that have been processed .
2	Checks if all the keys are not in the cache .
3	Gets the value of the compressor .
4	Create a new file
5	Returns a list of patterns that match the pattern .
6	Creates a new source .
7	Returns the relative path to the given path .
8	Removes disk files from disk
9	Copies assets .
10	Writes the transformation to a file
11	Renders the metadata file .
12	Checks if the lib files exists .
13	Checks if the lib libraries are installed .
14	Check if a dependency exists
15	Reads the shared libraries for this library .
16	Checks if a list of libraries are not found .
17	Generate a digest of the digest .
18	Generate a digest of the digest .
19	Returns the list of packages that have been downloaded .
20	Renders the distribution distribution .
21	Creates a new artifact for this artifact .
22	Creates a new build .
23	Creates a new instance .
24	Returns the metadata for this package .
25	Returns the path for this package .
26	Sets the parameters for this URI .
27	Creates a new light .
28	Calculates the status of a delay .
29	Add an extension .
30	Renders the local file .
31	Renders the parameters .
32	Renders the source file .
33	Writes the bundle .
34	Resolve a dependency
35	Append timestamp to the specified version
36	Returns true if the version is a version of the current version
37	Returns the version of the source
38	Render an ERB template
39	Define a warning .
40	Add a message to the logger .
41	Execute a command .
42	Creates a new machine .
43	Builds an application .
44	Execute a rake task
45	Creates a new project .
46	Deletes the project .
47	Copy the source to the project .
48	Updates the configuration .
49	Writes the tarball .
50	Create a tarball
51	Clean up the project
52	Copies the archive to disk .
53	Extracts the local tarball file .
54	Returns the digest of the digest .
55	Verifies the checksumum .
56	Creates a new Identity .
57	Signs a package .
58	Get the certificate .
59	Retrieve the manifest from the manifest .
60	Create a new source .
61	Returns a new version of the application .
62	Creates a whitelist .
63	Gets the source for the given project .
64	Prepend a path to the given path .
65	Returns a hash of the config .
66	Returns the version of the cache .
67	Fetches the source for the source
68	Generate a digest of the digest .
69	Convert the source to a hash
70	Writes a tempfile
71	Create a cache .
72	Returns the version of the package
73	Initialize a new cache
74	Remove directories from the git directory
75	Generate the manifest
76	Executes a command .
77	Executes a shell .
78	Execute a block with retry .
79	Converts a path to the path .
80	Returns the path to the path
81	Create a directory .
82	Remove a directory
83	Copies a file .
84	Remove a file .
85	Creates a new file .
86	Create a link
87	Validates the license .
88	Returns the contents of the project
89	Returns the mapping of the project .
90	Processes the dependencies of a dependency .
91	Collects a license file .
92	Writes a DICOM object .
93	Returns the content of the package .
94	Checks if the metadata exists .
95	Generates a key for the package .
96	Returns the version of the current version
97	Returns the start of the build time .
98	Saves the file to disk .
99	Gets the user s name .
100	Set the license .
101	Returns the path for a file
102	Create a new RPM file .
103	Publish a package .
104	Returns the version of this version .
105	Adds a package to the package .
106	Create a new filter .
107	Set a value from a hash .
108	Get the license file .
109	Checks if a dependency exists
110	Builds the manifest
111	Write the manifest
112	Writes the configuration file
113	Returns the size of the package .
114	Returns true if the given directory exists
115	Creates a new project .
116	Get the current revision of the current revision .
117	Checks if a commit has a given revision .
118	Convert a command to the SSH port .
119	Calculates the minimum bits of this bitfield .
120	Get the parameters for this network .
121	Builds the signature of the signature .
122	Initialize a new site .
123	Checks if the object has been loaded .
124	Raise an exception
125	Merge arguments from the arguments .
126	Combines a hash of arguments .
127	Returns an array of elements that matches the given item .
128	Checks if the given URL matches the given URL .
129	Matches the component for this component .
130	Convert a URL to a URL
131	Returns the value for the given index .
132	Creates a new enumerator .
133	Build an enumerator .
134	Creates a new queue .
135	Builds an Enumerator .
136	Builds an Enumerator .
137	Returns an array of rows in the collection .
138	Define a new column .
139	Returns the version of the version .
140	This method is called when a paper is created .
141	Declare a record .
142	Save the model
143	This method should be called when a callbacks
144	Check the item type of the item type
145	Returns true if the version is a new version of the current version .
146	Recursively cleans all changes .
147	Convert a node to this node .
148	Creates a new scope .
149	Creates a new strategy .
150	order of nodes
151	Applies an array of children to the given node .
152	Builds the parents of the parent .
153	Recursively rebuild the cache
154	Returns the children of the given node .
155	Initialize a new Client object
156	Returns a hash of options .
157	Reset metadata .
158	Get the HTTParty config .
159	Starts a new timer .
160	Set timeout timeout
161	Determine if timeout is timeout
162	Builds a schema .
163	Initialize a schema
164	Checks if the given action matches the given conditions .
165	Aliases an alias .
166	Expands an array of actions for the given action .
167	Returns an array of aliases for the given alias .
168	Returns the rules for this rule .
169	Create a new file
170	Iterates over each file in the directory .
171	Return an enumeration of the tree .
172	Enumerate a path
173	Calculate checksum
174	Calculate checksum
175	Draw a bar .
176	Returns the UTF - encoded string .
177	Returns a string representing the given string .
178	Calculate checksum
179	Returns an array of bars .
180	Renders a chart .
181	Creates a new image .
182	Creates a new Renderer .
183	Generate a PDF
184	Returns a string representation of the image .
185	Set the connection .
186	Returns true if the current state exists
187	Make an HTTP GET request
188	Returns the database .
189	Ensure that the commit is a commit .
190	Creates a new branch for the given commit .
191	Ensures that user is a user .
192	Creates a new user .
193	Creates a new user with the given name .
194	Creates a new repository .
195	Creates a new repository for this project .
196	Creates a new branch for this repo .
197	Check if a fork branch exists
198	Ensures that the user exists in the organization .
199	Ensure that the participant exists .
200	Ensure that the user is a valid organization .
201	Ensures that the commit is saved .
202	Creates a watcher for a user .
203	Creates a pull request for the given repository
204	Check if the pull request has a pull request
205	Check if a branch is a branch
206	Creates a new branch for this repo .
207	Creates a new fork for this fork .
208	Ensure that the given commit is in the repository
209	Ensure the given commit is a single issue
210	Enables an issue for a specific issue
211	Ensure that the given commit is a specific issue
212	Ensure that the issue has changed .
213	Ensure that the issue is a single issue
214	Ensures that the repository is in the repository
215	Creates a new repository
216	Ensures that labels are associated with labels
217	Creates a new label for the given label
218	Creates a new transaction .
219	Store a commit .
220	Logs a message .
221	Perform an API request
222	Retrieve the last time of a tag .
223	Get the number of pages
224	Parse links
225	Parses the result of the result
226	Perform a HTTP request
227	Attach connection to the server
228	Connects to the adapter
229	Retrieve a commit from the repository
230	Retrieve a single commit
231	Retrieve a user s organization
232	Retrieve a list of watchers for a user .
233	Retrieve a watcher
234	List all events for this repository
235	Retrieve the branch of a branch
236	Retrieve the default branch for a branch
237	Parse options .
238	Raise an error .
239	Creates a new queue .
240	Read a value from a hash
241	Filter the location .
242	Validates a message to be used as a message .
243	Validates the default message .
244	Initialize a new Producer .
245	Activate a signal
246	Creates a mapping for the given mapping .
247	Creates a new mapping for the given parameters .
248	Loads the ruby file
249	Asserts the comparison .
250	Retrieves the gradient of the inputs .
251	Creates a random number of random parameters .
252	Define an edge
253	Creates a new DICOM object .
254	Creates a new stream .
255	Creates a new slice .
256	Creates a new DataSet .
257	adds two operations
258	Redirects the mean of the data .
259	Creates a new Tuple .
260	Create a partition with the specified data .
261	Define a condition
262	Creates a numeric value .
263	Creates a DICOM object .
264	Creates a new object .
265	Creates a new Tuple .
266	Prints the input .
267	Creates a new integer .
268	Creates a new number .
269	Logs a given argument .
270	Creates a new number .
271	Applies a padding to the input .
272	Gathers a measurement .
273	Assign an array of values .
274	Unpack the value .
275	Creates a new rule .
276	Creates a new instance .
277	Creates a new array of arrays .
278	Opens an array of two arrays .
279	Transforms a new matrix with the same elements .
280	Add a new Tuple .
281	Calculate an array of arguments .
282	Calculates the number of numbers
283	Creates a scalar
284	Creates a new float
285	Modify operation .
286	Parses the number of elements .
287	Creates a DICOM object .
288	Creates a random random random block .
289	Create a range .
290	Create a new rank .
291	Creates a new number .
292	Computes the number of squares .
293	Creates a new shape .
294	Creates a linearity of an integer .
295	Creates a scalar
296	Multiply a sub - sub - one or more elements .
297	Calculates the sum of the column .
298	Creates a scalar
299	Creates a new Tuple .
300	Fetches the first iteration .
301	Creates a new object .
302	Convert a stream to the stream
303	Creates a new device .
304	Loads a stream from the stream .
305	Creates a new variable .
306	Creates a new scope .
307	Creates a new session .
308	Creates a new Tuple object .
309	Checks if the given value is valid .
310	Applies the value to the given type .
311	Add an audio video .
312	Create a new event
313	Pad this message .
314	Check that the length length of the given length is a string .
315	Check that the given string is valid
316	Check that the HMAC key is valid
317	Check if the string is valid
318	Creates a new authenticator instance .
319	Verify a message
320	Creates a new cipher .
321	Open a new message .
322	Opens a new writer .
323	Returns the logger .
324	Creates a new measurement .
325	Returns the trace of the given block .
326	Creates a new tag .
327	Push a list of tags
328	Checks if the given filter filters .
329	Logs a message .
330	Measure the log .
331	Creates a new measurement .
332	Creates a new logger .
333	Assign a message to the log .
334	Assign a message to the payload .
335	Iterates through an exception .
336	Extracts the name of the stack .
337	Generates a message for a message .
338	Gives the list of rules for the given block .
339	Run the command .
340	Route a message .
341	Returns true if the data is present .
342	Get the node for this node .
343	Returns an array of variables for this node .
344	Lookup the error for a child node
345	Decrement a cache
346	Waits for a job .
347	Creates a new job .
348	Executes a job .
349	Merge options .
350	Remove a query from the query
351	Parse the user s children
352	Run a command .
353	Returns the exit code for the given exit code .
354	Add a method to the given method .
355	Implements method to import methods
356	Applies the given methods to the registry .
357	Retrieve a function with the given args .
358	Fetches the method .
359	Creates a new AST .
360	Creates a new proc .
361	Extracts keys from the pattern .
362	Interpolate the replacement of the given pattern .
363	Runs a command .
364	Run a window .
365	Creates a new tab .
366	Run the command .
367	Create a write operation .
368	Set the key .
369	Set a key
370	Create a key .
371	Set the header .
372	Set the operation .
373	Write header header
374	Creates a new policy .
375	Checks if all nodes are completed .
376	Returns the connection for the connection
377	Parse a single record .
378	Returns a random random node for this node .
379	Get the node by name
380	Prepend a key
381	Get a single header
382	Checks if the key has been set .
383	Registers a DICOM object .
384	Removes a DICOM object .
385	Retrieves a list of DICOM objects .
386	Executes the given query for a given query .
387	Create a new index .
388	Drop an existing index
389	Perform a scan .
390	Drop an existing user .
391	Change the password for the user .
392	Creates a role .
393	Queries the users for a user .
394	Retrieve the next record .
395	Iterate over each record .
396	Creates a new code tag .
397	Move the given line .
398	Get the dimensions of this image .
399	Get the coordinates of the screen .
400	Get the coordinates of the image .
401	Returns true if the map contains the given bounds .
402	Performs an animation .
403	Draw a map .
404	Updates the current image .
405	Draws the text .
406	Sets the text field .
407	Set the position of this node
408	Draws an image .
409	Draw a color .
410	Updates the current widget .
411	Set the value for this widget
412	Draws a color .
413	Draws the text .
414	Creates a new line .
415	Write a paragraph .
416	Add a message to the log .
417	Gets the message for the given message .
418	Check timestamps for the given timestamp
419	Create a new model .
420	Check the device information .
421	Opens an IO object .
422	Set the type of the type .
423	Check that the activity is valid
424	Calculates the distance of a measurement .
425	Calculates the max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_value .
426	Creates a new IO object .
427	Creates a new instance of the supplied data .
428	Check if the activity has a session
429	Define a field .
430	Define a field .
431	Checks if a captcha message exists .
432	Creates a new mail .
433	Returns a hash of attributes for the form .
434	Start the server
435	Start the server .
436	Create a new client
437	Updates the configuration .
438	Searches the configuration .
439	Creates a new collection .
440	Clean up the configuration file .
441	Returns an array of signals for this class .
442	Creates a new Duration object .
443	Returns the start of the week .
444	Reset the value for the current page .
445	Initialize a new cursor .
446	Executes an enumerator .
447	Update the configuration .
448	Renders the screen .
449	Move a cursor to the cursor
450	Writes data to the console .
451	Finish the terminal .
452	Stop the terminal .
453	Logs a message .
454	Draws a message .
455	Creates a new lock .
456	Create a new survey .
457	Expands a pattern into a grammar .
458	Runs the chat .
459	Creates a new message .
460	Runs the chat .
461	Creates a new friendship .
462	Setup the server .
463	Parses a service
464	Connects to the server .
465	Write data to socket
466	Reads a socket .
467	Close the connection
468	Checks if the socket is available
469	Connects to a socket .
470	Write socket to socket
471	Connects to a socket .
472	Determines the participant for this participant .
473	Determine if the device is available
474	Fetches a list of devices for this zone .
475	Find a single resource
476	Fetches the results from the API .
477	Creates a new instance of the collection .
478	Creates a new validator .
479	Updates an XML element .
480	Returns the frequency for a given frequency .
481	Calculates a voltage for the given frequency .
482	Fetches the frequency for a given frequency .
483	Perform a statistical rate
484	Calculates the sum of the given amount .
485	Calculate the solr
486	Creates a new N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
487	Returns the summary of the event .
488	Loads the given block .
489	Replace the contents of the file .
490	Loads a relationship from a relationship
491	Instantiate a new Entity object
492	Call the function for a function .
493	Sends a transaction .
494	Parse the url and parse it
495	Call this method to call the given method .
496	Creates a new RPC request .
497	Creates a connection
498	Creates a new transaction .
499	Replaces a new string with the given data .
500	Creates a new object .
501	Creates a new block .
502	Generates a group .
503	Creates a group .
504	Initialize the client .
505	Creates a new instance of this class .
506	Creates a new reference to the given path .
507	Add a reference to a file .
508	Removes all directories from the given directory
509	Configures the target phases of the target .
510	Check if the source is a source file
511	Returns the class .
512	Returns a list of files that should be checked .
513	Read config file
514	Prints a hash of hashes to the given hash .
515	Returns the config file .
516	Checks if the file exists
517	Check if the file exists
518	Check if the option is a symbol
519	Raises an error if the result is defined .
520	Returns a list of all entries in a directory
521	Convert a string into a string .
522	Applies the files to the files .
523	Pack the link to a path
524	Takes an array of entities into a hash .
525	Creates a header .
526	Creates a list of content .
527	Renders a row .
528	Creates a new card .
529	Renders the layout .
530	Creates a group .
531	Creates an image .
532	Creates a new item .
533	Merge options .
534	Renders a navigation .
535	Renders the notification .
536	Returns true if the current options can be passed in the current context .
537	Generates the HTML for a component .
538	adds data to html
539	Define a column
540	Creates a new column .
541	Creates a link .
542	Creates a new engine .
543	Copies the config file .
544	Convert a hash to a hash
545	Adds an asset to the specified directory
546	Find files in a directory
547	Dispatch a command to the console .
548	Watch for a thread
549	Loads the fixture configuration .
550	Ensures the image name of the image .
551	Returns a hash of parameters for this scope .
552	Convert a key to a hash
553	Update the values of the parameters .
554	Checks if the current parameters is valid .
555	Creates a new lock .
556	Unlock a token
557	Applies the options .
558	Show the notification .
559	Updates the notification .
560	Downloads a url
561	Handles accessor methods .
562	Convert the command to the command line .
563	Creates a new new instance .
564	Creates a new instance .
565	Modifies the block .
566	Sanitize keys
567	Returns a representation of this model .
568	Generates a label for a field .
569	Calculates the position of the home
570	draw a border
571	Resets the default value of a field .
572	draw a bar chart
573	Add a field to the field .
574	Applies the locale to the locale .
575	Returns true if the translation exists in the locale .
576	Returns true if the slug exists in the locale .
577	Returns a string representation of the given duration .
578	Calculates the duration of the given time .
579	Track errors for errors
580	Process a batch .
581	Preprocess processors
582	Run the post .
583	Executes the dependencies .
584	Executes the screen .
585	Returns a redis key for the given field .
586	Normalize a redis metric
587	Creates a new alias .
588	Stores the redis key for the redis hash
589	Returns a hash of config values .
590	Checks if the database exists .
591	Checks if a given alias exists .
592	Checks if a key is a redis key .
593	Validates the redis key for the redis key
594	Convert arguments to a hash
595	Finds a given alias .
596	Get the value for the given key .
597	Returns an array of the given alias .
598	Returns a new instance of the key
599	Convert a redis value to a hash
600	Transforms a value to the given type .
601	Parses the given value .
602	Creates a hash of attributes .
603	Destroys the alias .
604	Add a token to the user .
605	Retrieve a list of DNS topics for this domain .
606	Initializes a new instance of the cluster .
607	Creates a new connection .
608	Shows the children of the tree .
609	Parses a repeating repetition .
610	Finds a single element from the tree .
611	Creates a new DICOM object .
612	Parses a string .
613	Renders a list of elements .
614	Retrieves the regular expression for a regular expression .
615	Find a field from a string .
616	Parse a loop
617	Returns an instance of the specified name .
618	Processes a loop .
619	Processes a single segment .
620	Render the node .
621	Calculate the value for the given response .
622	Normalizes the response to the response .
623	Audit audits for a response .
624	Creates a new tag .
625	Creates a new AST .
626	Rewrite the selected selector .
627	Selects a select selector .
628	Adds a hash to the configuration .
629	Checks if a process exists .
630	Wait for a process .
631	Uploads a file to the repository .
632	Get the branches of a branch
633	Get the revision of the given revision .
634	Commit changes to commit changes
635	Get the info for the given revision .
636	Copies files to a directory
637	Gets the history of a commit .
638	Returns the status of the given revision .
639	Returns the status of a git directory .
640	Get the status of a directory .
641	Builds the history of the history .
642	Get the status of a specific revision .
643	Initialize a new branch
644	Recursively synchronize the module .
645	Check if the given argument is a descendant .
646	Get the parent of a commit .
647	Returns a string representation of the changes .
648	Retrieve the list of mappings .
649	Returns an array of files that match the specified format .
650	Calculate the checksum
651	Get the current branch .
652	Check if a branch exists
653	Returns the SHA of the given revision .
654	Returns the information about the given revision .
655	Get a list of branches
656	Export an archive
657	Creates a new temporary directory .
658	Upload the current environment
659	Uploads a list of modules .
660	Get a list of revisions for the given revision .
661	Fetches the remote repository from the repository
662	Assign an attribute .
663	Returns a hash of errors .
664	Creates a new job
665	Creates a new instance .
666	Creates a new object .
667	Push a gem
668	Generate an interpolation interpolation
669	Returns a selector for the given options .
670	Run the request .
671	select_select_select_select field
672	Creates a label .
673	Reads the value of a binary string .
674	Pack the value into a single value .
675	Creates a new operator .
676	Returns an array of static files
677	Returns an array of assets
678	Retrieve a summary of a specific activity .
679	Runs a report .
680	Generate a random random random random random entropy .
681	draw a ruby code
682	Create a new report
683	Outputs a report .
684	Processes a list of targets .
685	Updates the contents of the data .
686	Perform an HTTP request
687	Returns a string representation of the given string .
688	Convert a string to a timestamp
689	Convert a hash to a hash
690	Notify a notification .
691	Execute a command
692	Wrap a list of text .
693	Creates a new database .
694	Removes a reference from the cache
695	Merge a hash with another hash .
696	Add an object to the cache .
697	Get the object s object .
698	Removes a reference from the cache
699	Create a new object .
700	Creates a new OAuth client .
701	Creates a new adapter .
702	Initialize a new Controller instance
703	Returns the error message
704	Sets the options hash .
705	Sets the arguments .
706	Resets the default values for this object .
707	Returns an array of all filters that match the specified filter .
708	Extends an object to the object .
709	Sets the value of the parameters .
710	Define a class name for this class .
711	Checks if the given parameters exists .
712	Get the name of a parameter .
713	Set the parameter for this class .
714	Iterates over each of the parameters .
715	Link to this model .
716	Creates a new transaction .
717	Execute the block .
718	Retrieve the next message .
719	Creates a report .
720	Returns the field for the given field .
721	Validates a node .
722	Returns true if the node has been visited .
723	Builds a new node .
724	This method is called when the node has been done .
725	Validate node node
726	Returns true if the instance is a valid instance .
727	Returns true if the instance is a valid instance .
728	Creates a new node .
729	Returns the ancestors of this node .
730	Returns the children of this node .
731	Checks if the node is a recursive node .
732	Validates the value for this node .
733	Validates the node .
734	Check if node node is valid
735	Returns the node for this node .
736	Retrieves the children of the node .
737	Remove a tree from the tree
738	Return the sibling node for this node .
739	Move the node to this node .
740	Move the node .
741	Validate node node
742	Returns the number of ancestors .
743	Returns the number of children
744	Validates the value of a node .
745	Builds the node for the given node .
746	Return all edges for this node
747	Validates the node instance of a node
748	Updates the node .
749	Remove a question from the database
750	Builds a new survey object
751	Removes a node from the database .
752	Recursively rebuild the node .
753	Creates a table for a table .
754	Returns the class for the collection
755	Returns an array of targets for the specified list .
756	Returns the writer for the specified writer .
757	Creates a new actor .
758	Define a mouse event .
759	Defines a notification notification .
760	Executes a button .
761	Call all notifications for notifications
762	Runs an event .
763	Add a model to the model
764	Creates a new transition .
765	Called when the event fires .
766	Adds an event to the target .
767	Creates a new controller .
768	Starts the window .
769	Create a new image .
770	Creates a new table .
771	Creates a new cell .
772	Creates a list of links for the given action .
773	Creates a link for a given action .
774	Add a scene to the scene .
775	Applies a post .
776	Creates a hash of default settings .
777	Returns an array of all objects for this scene .
778	Returns the actor name for the given actor .
779	Sends an event to the notification .
780	Creates a new callback .
781	Creates a new actor .
782	Register a new animation
783	Register an actor
784	Returns the initializer .
785	This method is called from the drawer .
786	Creates a new Scene object .
787	Prepares the current scene .
788	Returns a hash representation of this object .
789	Create a model
790	Initialize a new configuration object .
791	Get a specific activity
792	Get a list of measurements
793	Returns the weight for this measurement
794	Retrieve a series by id
795	Perform a request
796	Sets the file type .
797	Send a request to a channel
798	Fetch a response from a channel
799	Register a handler
800	Downloads the source to the source
801	Checks if the files are found .
802	Check if a file exists
803	Fetches the header for the request .
804	Define a parameter .
805	Returns an array of columns that are defined in the schema .
806	Creates a new map .
807	Generate a path for a given path .
808	Resolves an array of references to a reference .
809	Runs the schema .
810	Reads a schema from the schema .
811	Generates the parameters for the request
812	Yields each resource for each resource .
813	Iterates over all resources in the specified resource .
814	Convert a url to a host .
815	Convert a filter to a filter .
816	Creates a folder .
817	Gets the system data from the database .
818	Runs the given block .
819	Sets the errors for this migration .
820	Checks if the current job is run .
821	Returns true if the status is completed .
822	Creates a new step .
823	Creates a new task
824	Prints the title .
825	Returns a hash of columns for this column .
826	Render the page .
827	Creates a new Page instance .
828	Add alias to the given path
829	Parse header content
830	Returns a hash of variables for a variable .
831	Retrieves the children of the tree .
832	Convert string to string
833	Removes HTML tags from HTML tags
834	Populate the contents of a node
835	Creates a new List .
836	Returns the parent of the parent .
837	Returns the type of the specified type .
838	Creates a link
839	Creates a link
840	Creates a link that can be used to be used to be used to link the user .
841	Perform an SSL request
842	Renders the contents of a file .
843	Creates a new symlink .
844	Renders content .
845	Initialize a friendship
846	Get a list of user
847	Create a comment
848	Submit a user
849	Creates a vote .
850	Checks if the given string is valid
851	Generates a captcha tag .
852	Delete an image
853	Set the contents of a site .
854	Subscribe to a user .
855	Get a list of users
856	Get a list of categories
857	Add a user .
858	Add a user to this user .
859	Dispatches a user .
860	Remove a user .
861	Remove a user .
862	Unregister a user
863	Initialize a new Client object
864	Logs a user .
865	Authenticates a user .
866	Delete a user .
867	Get a list of messages
868	Clears a list of templates .
869	Delete a user
870	Delete a template
871	Configure a user
872	Perform a CSV file
873	Renders a user
874	Select a template
875	toggle
876	Get a list of comments
877	Get a list of users
878	Gets the status of a user .
879	Remove a user .
880	Returns a list of logged in a user .
881	Create a new client .
882	Set the duration for this time
883	Calculates the lines of the line .
884	Creates a new instance of this instance .
885	Renders the object .
886	Joins an array of strings into a string .
887	Open a session .
888	Creates a new publisher
889	Expire a message
890	Validates that the given value is present .
891	Validate an XML document
892	Set defaults to options
893	Reads a subscription
894	Open a session .
895	Create a POST request
896	Expire a request
897	Reads a response from a response
898	Remove a response from a response
899	Creates a new channel .
900	Create a POST request
901	Creates a new channel .
902	Add a security token to this channel .
903	Remove a security token .
904	Get a channel
905	Get a list of all channels
906	Updates the Redis Redis .
907	Set the phrase
908	Creates a new Time object .
909	Convert the coordinates to a latitude .
910	Get all projects
911	Get a project
912	Retrieve a list of projects
913	Get a specific experiment
914	Retrieve statistics
915	Retrieve a list of variations
916	Get a single variation
917	Retrieve a list of projects .
918	Get a single audience
919	Perform a GET request
920	Retrieves a single key .
921	returns a random random string
922	returns a random bit of random bits
923	Add a constraint .
924	Returns the keys of the database .
925	Creates an attribute for a collection .
926	Fetches the data from the database .
927	Search for the given expression
928	Convert a string to a string
929	Returns an array of scores
930	Replace the color of the image .
931	Compact a new copy of the target .
932	Returns the list of keys for the given key .
933	Gets the number of code for the given key .
934	Creates a new instance .
935	Removes a key from the cache .
936	Returns an array of keys .
937	Return a List .
938	Returns a list of keys in the list .
939	Get a value for this key .
940	Raise error
941	Iterate over each key in the table .
942	Finds an icon .
943	Get a list of columns in the table .
944	Returns true if the column has a numeric value .
945	Converts an array of options to the given options .
946	Creates a new context .
947	raise an exception
948	Raise an exception
949	Logs a user .
950	Logs a user .
951	Creates a new user .
952	Removes a user from this scope .
953	Get the user s accessor .
954	Returns the namespace for the application .
955	Extracts the version of the application .
956	Updates the cache .
957	Create a new cache
958	Create a new cache
959	Returns the path for the cache .
960	Download the cache
961	Outputs a message .
962	Validate the cache
963	Fetch the version of the cache
964	Creates a new Database object .
965	Run strategies .
966	Runs a strategy .
967	Executes a script .
968	Prints a hex representation of the hex format .
969	Reads the words from the input .
970	Returns a list of conditions .
971	Update an existing index .
972	Queries the database .
973	Dispatch a worker worker
974	Add a node to this node .
975	Returns the node for this node .
976	Convert attributes to a hash
977	Creates a new model .
978	Creates a new hash with the given keys .
979	Create a new exception .
980	Check if the file is valid
981	Call API method
982	Performs a query .
983	Creates a new model .
984	Sets the valid attributes for the given class .
985	Creates a class for this class .
986	Initialize a new reader
987	Returns an array of attributes for this object .
988	Checks that the version of the version of the given version .
989	Run the server
990	Validates the IMAP mailbox .
991	Finds an IMAP IMAP mailbox .
992	Convert a string to a string .
993	Checks if the given number is valid
994	Adds a value to the given string .
995	Convert a string to a string .
996	Convert string to string
997	Convert a string to the given string .
998	Checks if the given string is set .
999	Creates a new Line .
1000	Validate the document .
1001	Send a new channel .
1002	Notifies the changes of the changes .
1003	Notify this channel .
1004	Define a logger
1005	Fetches the data for the given data .
1006	Parses the given target .
1007	Returns the string representation of the format .
1008	Get comments
1009	Save the configuration to the current configuration .
1010	Reads all pages from the wiki .
1011	Reads a response from the response .
1012	Creates a new filter .
1013	Writes a new AST .
1014	Replace the given node .
1015	Renames the node .
1016	Creates a new revision .
1017	Commit a commit .
1018	Creates a new scan .
1019	Returns a string representation of the text .
1020	Prints debug debug .
1021	Execute a command .
1022	Upload a file to the remote server
1023	Download a remote file
1024	Writes a file to the remote server .
1025	Calculates distance between two points
1026	Returns true if the point is at the specified point .
1027	Creates a new instance .
1028	Outputs a formatted string .
1029	Get user information about a user
1030	Sets the options .
1031	Define a column
1032	Create a new column .
1033	Reads data from the file
1034	Returns the backtrace for the given file .
1035	Returns the backtrace from the backtrace .
1036	Extract the queue from the queue
1037	Get a hash of the node .
1038	Initialize a new sentence .
1039	Returns the list of nodes for this node .
1040	Builds a sentence from a hash
1041	Reads a list of pages from the wiki .
1042	Filters the given params .
1043	Retrieve the site for a site .
1044	Queries a site for a site .
1045	Returns the rate of the rate .
1046	Set the output .
1047	Logs a message .
1048	Returns a hash of the options hash .
1049	Returns an array of the selected options for the selected field .
1050	Send a packet to the server
1051	Checks if the block is ancestor of the parent of the block .
1052	Returns an array of built objects for this object .
1053	Create a new shell .
1054	Opens a file .
1055	Checks if the current process is running .
1056	Writes a PID to disk .
1057	Parses the given hash .
1058	Initialize a new document
1059	Save the document to the document .
1060	Prints all the documents .
1061	Executes all files in the specified directory .
1062	Searches the children of the selected nodes .
1063	Creates a CSS selector .
1064	Executes the DSL .
1065	Executes the selected nodes with the selected nodes .
1066	Creates a new tag .
1067	Creates a new option .
1068	Execute a command .
1069	Declares this method for the current model .
1070	Perform a new task .
1071	Run the command .
1072	Prints the list of entities
1073	Handles accessor methods
1074	Perform a request
1075	Perform a PUT request .
1076	Perform an HTTP request
1077	Creates a new token .
1078	Authorize a client .
1079	Perform a GET request
1080	Perform a POST request .
1081	Make a POST request .
1082	Perform a PUT request .
1083	Perform a HTTP request
1084	Authenticate a request .
1085	Checks if the response is valid
1086	Perform an HTTP request
1087	Run a request .
1088	Creates a new Place
1089	Creates a new transition
1090	Runs the simulation
1091	Creates an Instruction
1092	Initialize a new listener
1093	Sends the text to the text .
1094	Instantiates the git library .
1095	install a module
1096	Retrieve a single reason
1097	Gets the stats for a particular endpoint .
1098	Get the statistics for a user
1099	Creates a new element of the text .
1100	Initialize a Hash of tokens .
1101	Removes all tokens from the stack .
1102	Adds a join to this table .
1103	Adds a query to the query .
1104	Loads the class from the query .
1105	Search for a word
1106	Returns the search for the search results
1107	Authenticates a client .
1108	Returns the path for the application .
1109	Returns the version of the application .
1110	Returns the version of the application .
1111	Rebuild the version of the application
1112	Load project configuration
1113	Display help help
1114	Add token to the token
1115	Sets the timestamp for this time .
1116	Send a message to the server
1117	Perform a POST request
1118	Deletes an API request .
1119	Returns a new instance of the configuration .
1120	Returns a hash of instance variables for this instance .
1121	Reads a CSV file
1122	Writes a new CSV file .
1123	Creates a new CSV object .
1124	Add a value to this type .
1125	Renders an existing H3 .
1126	Wait for all instances
1127	Reads a socket .
1128	Writes a value to the server .
1129	Retrieves a list of fields
1130	Calculates the statistics for the given model
1131	Calculates the total statistics for this model
1132	Returns a string representing the label .
1133	Creates a new instance .
1134	Configure a config object .
1135	Create a new HTTP request
1136	Creates a new url .
1137	Check if the url is a string
1138	Asserts the given arguments .
1139	Asserts that the given type is valid
1140	Asserts that the given string is a valid string
1141	Assigns a block .
1142	Wait for a polling request
1143	Synchronize the server .
1144	Add a tracker .
1145	Downloads a command .
1146	Delete a torrent
1147	Sets a command on a location .
1148	Increment the torrent .
1149	Decrement a torrent
1150	Create a new torrent .
1151	Redirects the torrent s torrent
1152	Set a file
1153	Set the torrent .
1154	Set the torrent .
1155	Returns the digest of a file
1156	Retrieve the keys of the bucket .
1157	Yield each key
1158	Run the command .
1159	Returns a list of events that have been triggered .
1160	Creates a new instance of this instance .
1161	Raises an exception if it exists .
1162	Sets the default configuration .
1163	Mark a list of entries for each entry .
1164	Set HTTP headers
1165	Store the data to store
1166	Raises an error message
1167	Perform a HTTP request
1168	Perform a request .
1169	Perform a DELETE request .
1170	Perform a PUT request
1171	Perform a POST request
1172	Retrieve an article
1173	Upload an image
1174	Perform an HTTP request
1175	Returns the absolute path for the given path .
1176	Index all entries for a path
1177	Defines accessors for accessors
1178	Creates a new row .
1179	Generate the notes for a note
1180	Generates the notes for the footer .
1181	Perform an instance of an instance
1182	Creates a new error .
1183	Returns an array of vertices
1184	Retrieve a single merchant
1185	Encodes the binary string .
1186	Creates a role for the user
1187	Perform a POST request
1188	Creates a network .
1189	Create a port
1190	Move a port to the port .
1191	Creates a new JSON object .
1192	Redirects to a url
1193	List all servers
1194	Create a new server
1195	Perform a server
1196	Delete an image
1197	Perform a GET request
1198	Set the path to the file .
1199	Retrieves the teams for a user .
1200	Returns a list of all pitchers for a team .
1201	Creates a new instance of the method .
1202	Fetches the data from the specified column .
1203	Get the column at index .
1204	Returns an array of values .
1205	Handles accessor methods .
1206	Authorize an API request .
1207	List all routers
1208	Creates a new controller .
1209	Remove an interface
1210	Returns the first method that matches the query .
1211	Loads the config file .
1212	Retrieve the provider for the current provider .
1213	Returns a list of categories .
1214	Creates a role .
1215	Check the plan for the plan
1216	Creates a new instance of the object .
1217	Retrieve the deals with the specified options .
1218	Retrieve a deal
1219	Total number of pages
1220	Removes the titles of the deals with the specified title .
1221	Loads the cookie from a hash
1222	Dumps all cookies as a hash .
1223	Set the elements of a selector .
1224	Updates the expiration time .
1225	Perform a GET request
1226	Get an image
1227	Create an image
1228	Replace a member with a member
1229	Add a member .
1230	Create a directory .
1231	Creates a new directory .
1232	Creates a new directory .
1233	Creates a new file .
1234	Change the file .
1235	Create a new directory .
1236	Copies a file .
1237	Creates a new tempfile .
1238	Handle incoming requests
1239	Create a config file
1240	Returns an array of email emails .
1241	Creates a plural replacement .
1242	Creates a new rule .
1243	Removes a plural from a plural
1244	Executes a command .
1245	Outputs the output .
1246	Run the job .
1247	Authenticates a user .
1248	Add a service
1249	Add an endpoint
1250	Get the endpoint for a token
1251	Disables a method .
1252	Creates a new Proc object .
1253	Execute an alias .
1254	Creates a new alias .
1255	Convert the public key to a public key .
1256	Calculates the difference between two points .
1257	Retrieves the value of the given value .
1258	Decodes the given string .
1259	Convert the secret to a secret
1260	Returns the name of a part of the name .
