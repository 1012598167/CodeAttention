0	Prints summary of the summary
1	Finds the output of a file
2	Checks if the Json file exists .
3	Returns the default compressor chain .
4	Creates a new BIFF file .
5	Extract files from a directory .
6	Recursively sync files to a directory .
7	Returns the path for the given file
8	Removes all disks from disk
9	Copies assets to disk
10	Renders the document for the project .
11	Renders pkg metadata
12	Checks that the library can be used for testing libraries
13	Checks that the library libraries are available
14	Check the library s dependencies .
15	Read library library library
16	Checks if the given library should be added to the library
17	Create a digest of the file
18	Update the digest from the file
19	Publishes all published packages to the target
20	Renders the distribution file .
21	Gets artifacts from the artifact .
22	Gets the build for the given package .
23	Creates a new Client object .
24	Gets metadata metadata for a package .
25	Returns the remote path for the given package
26	The parameters for this request .
27	Add windows light
28	set delay validation
29	Add an extension to the list
30	Renders the local file .
31	Renders the current parameters .
32	Renders the source file
33	Renders the bundle .
34	Resolve a dependency
35	Append version to version
36	Determine if the version is a valid version number
37	Constructor for the build
38	Renders an ERB template from the given source .
39	Adds a warning message .
40	Creates a new Logger instance .
41	Creates a new Shell command
42	Creates a new command .
43	Applies the app to the app
44	Create a new application .
45	Create a new file .
46	Delete all files in the directory
47	Copy source files to the destination directory
48	Updates the configuration .
49	Writes a tarball file .
50	Create a tarball file
51	Clean up the project directory
52	Copies the file to the directory
53	Extracts a tarball from a tarball .
54	Returns the digest for this source
55	Verify that the file is valid
56	Create a new signing object
57	Sign in a package
58	Return the certificate certificate
59	Gets the manifest for the given resource .
60	Sets the source for this configuration .
61	Returns the version of the current server
62	Add a file to whitelist
63	Determine the project from the server
64	Prepend a path to the environment
65	Create a new Project instance
66	Returns the current version of the cache
67	Returns the fetcher for the source file
68	Returns a hash of the sha .
69	Convert the given source to a github source
70	Renders a new instance
71	Create or create the cache
72	Generate the tag for the given package
73	Increment the version of the repository
74	Remove the git files and directories .
75	Renders the manifest .
76	Executes a shell command
77	Runs the shell command
78	Execute a block with retry if necessary
79	Convert a path to a string
80	Convert a path to a path
81	Create a new directory .
82	Remove the directory at the given path .
83	Copies the file to the source
84	Remove a file from the specified paths .
85	Create a new file .
86	Creates a new link
87	Validates the license information for the project .
88	Read content from the project file
89	Returns a hash of the project for the project .
90	Process the dependency files and their dependencies .
91	Collects the license files from the project .
92	Write the path to the file
93	The content of the content
94	Validate the package .
95	Generates a key for a package .
96	Returns the VERSION version of the VERSION
97	Returns the build time for this environment .
98	Saves the YAML file .
99	Retrieves the department name
100	The project .
101	Returns the path for the given file
102	This method is used to render a digital signature .
103	Publish a given class
104	Configures the build version of the API .
105	Register a package
106	Initialize the compressor
107	Registers a new value .
108	The path of the license file
109	Determine if a given package is given
110	Build the manifest from the manifest
111	Write text manifest to manifest
112	Renders the current file .
113	Gets the size of the package .
114	Is the given directory?
115	Called when the project is created .
116	Returns the current revision for the current repository
117	Returns true if the given commit exists
118	Convert a string to the SSH file .
119	Computes the required bit bits to be set
120	Gets the parameters for the key
121	Builds the signature buffer
122	Called when the site is loaded .
123	Determine if the configuration has been loaded .
124	Raise an exception if the object is given
125	Merges arguments and arguments into arguments .
126	Initialize a new instance
127	Returns an array of items that match the given item .
128	Checks if a URL matches the given URL .
129	Matches a component for a component .
130	Converts the url into a substitute template
131	Returns the value for the given index .
132	Builds an enumerable enumerator
133	Build an array of enumerable objects
134	Builds a lock queue
135	Builds the active records for the given scope .
136	Builds a batch of records from the query
137	Iterate over the CSV files
138	Replace the record with the correct object
139	Returns the current version of the current item .
140	Add a model to the model
141	Called when the model has been destroyed .
142	this method is called when the model has been updated .
143	this method is called when the paper is called when the paper has changed .
144	Check if the item is an item type of the model .
145	Determine if the record should be applied
146	Shashes all changes in the current directory
147	Convert a node to an object
148	Returns an array of ancestors for the given scope
149	Sets the parent strategy to set the parent class
150	Searches the ancestry of the specified node .
151	Renders an array with the specified node .
152	Builds the ancestry of the active records from the parent id .
153	Rebuild the ancestry of the model
154	Returns conditions for the given object
155	Request default parameters
156	Create a new options hash
157	Reset the contents of this environment
158	Parses the HTTParty configuration
159	Start a timer
160	Set timeout timeout
161	Gets the number of seconds .
162	Recursively build schema
163	Handle schema schema
164	Matches the conditions for the subject
165	Adds an alias to the target .
166	Expands a list of aliases to their aliases .
167	Returns the list of aliases for the given action .
168	Returns a list of rules for this action .
169	Create a new file .
170	Iterates over each file .
171	Iterates over the next graph .
172	Walks the next path to the current directory .
173	Calculate the sum of the checksum
174	Calculate the number of checksum
175	Draws a PDF line .
176	Returns a string of the charset .
177	Returns an array of string .
178	Calculate checksum
179	Returns a string representation of a given block .
180	Renders the given canvas .
181	Renders an image .
182	Renders a PUT object .
183	Renders the document to a string .
184	Render an SVG document
185	Sets the pool .
186	Returns true if the current page is online .
187	Sends a GET request to the specified path .
188	returns a new database
189	Ensure the given commit exists
190	Recursively checks if there is no parents of the commit parent .
191	Check user followers
192	Adds a follower to the user .
193	Create user with given email
194	Sets up the repository
195	Adds the project to the project
196	Recursively checks if the commit is committed
197	Finds the commit of a fork .
198	Ensures that the user belongs to the user
199	Checks if the user is a member of the participant
200	Ensures user is in the organization .
201	Save comments
202	Ensure that the user has watchers
203	Finds the pull request
204	ensure a pull request
205	Determine if the branch is a PR of the current branch
206	returns a list of forks for the repo
207	Add a fork to a fork
208	Recursively find issues
209	Ensure the issue is valid
210	Gets all events for the issue
211	Ensures that the issue is associated with issues
212	Get comments
213	Fetches comment
214	Recursively creates labels
215	Adds a label to the repo
216	Recursively generate labels
217	Ensure the label is assigned to issue
218	Runs the given block and returns the transaction .
219	Store the given commit
220	Logs a message
221	Perform an API request .
222	Gets the last request for the given URL .
223	Get number of pages for given URL
224	Parse links
225	Parses the request and returns the result as an array
226	Perform raw raw response
227	Attach a connection to the given IP address .
228	Connects to the adapter .
229	get commit from git
230	Retrieve list of commits
231	Retrieves organizations from a user
232	Gets the list of watchers for the watcher
233	Retrieve the watcher watcher
234	Get all events
235	Get the git branch
236	Retrieve the default branch
237	Parse command line options
238	Validate the configuration file .
239	Connect to a queue .
240	Read a value from a key
241	Extracts location parameters from a URL .
242	Validates the messages for this consumer .
243	Validate the options for this message .
244	Initializes the buffer .
245	Notice that a signal is present .
246	Creates a lookup for embeds and returns a hash based on the given parameters .
247	This method is used to build a lookup of vectors and assembler tags .
248	Loads the given pb file .
249	Asserts two arrays
250	Returns the gradient of the grader
251	Returns a random distribution
252	Create a new row
253	Returns the initializer for this generator
254	Generates a random value for this stream
255	Sets a slice of input objects .
256	Create a new instance
257	The logical operation
258	Reduce the mean of the input .
259	Concatenates one or more categories .
260	Creates a new partition with the given name .
261	Create a new filter
262	Convenience method .
263	Opens a floating point .
264	Searches a float
265	Opens a new instance of type type
266	Parses output .
267	Sets a number
268	Perform a numeric number
269	Logs a floating point .
270	Create a float
271	Pad to pad
272	Searches an array of elements
273	Push a stack .
274	Unpack a value from an array
275	Create a new class .
276	Add an operator to this method .
277	Broadcast values of arrays
278	Perform a vector of vectors
279	Transforms an array of permutations
280	Adds an array of two operations to the same name .
281	Executes an array of numeric streams .
282	Opens the difference of a float
283	Opens the distance of the motor
284	Opens a float of a float
285	Modifies the input of the input object .
286	Parses the number of input objects .
287	Applies operation to speed
288	Create a new UUID
289	Create a new Range object .
290	Returns the rank of the input .
291	Call this function
292	Searches the number of two streams .
293	Create a new instance of arguments
294	Simulates a motor
295	Opens a float of the motor
296	Subscribes operation
297	Calculates the sum of the given dimension .
298	Create a new float
299	Opens a float of float
300	Returns the top of the top of the top .
301	Create a new instance
302	Convert the given input to a checkpoint
303	Add a device to the device .
304	Loads a binary string from the input stream .
305	Creates a new variable
306	Create a new variable .
307	Create a new session .
308	Create a new Stream object
309	Checks if value is a value
310	Applies data type of input types
311	Adds an audio file to the application .
312	Create a new event
313	Create a new message .
314	Checks that the given string is length and length .
315	Check that the length is valid
316	Validate the HMAC key
317	Validates that the given string is valid
318	Initialize the authentication instance .
319	Verify that the message is valid .
320	Creates a new message .
321	Create a new message .
322	Re - reopen all appenders an appender .
323	Get logger instance
324	Defines a message to the log level .
325	Logs a message to the logger .
326	Adds a tag to the given block .
327	Pushes tags to the stack
328	Determine if the given log
329	Create a new Logger instance
330	Measure log and return a new log message
331	Create a new Logger instance .
332	Create a new Logger instance
333	Creates a new Logger instance .
334	Assigns a message to the optional message .
335	Yields each exception to the given block .
336	Extract the file from the stack
337	Generates a text message for the given suggestions .
338	Gets the local variables from the queue .
339	Run the execution of the process .
340	route task
341	Check if the row has been processed .
342	Get the node .
343	Get all vids for a node
344	Looks up an error on the parent node .
345	Decrement the cache
346	Start a job
347	Lock the job
348	Invoke the given job .
349	Merge options into a hash
350	Remove the query params from the query
351	Parses a user info hash .
352	Run the command .
353	Get exit code
354	Adds a method to the registry .
355	Adds a list of methods to the source
356	Import methods from the registry
357	Fetches the given function .
358	Fetch a symbol from the cache
359	Returns the AST for this command .
360	Create a proc with the given arguments
361	Extract keys from pattern
362	Interpolate a given value .
363	Sets a list of commands to be executed .
364	Create a new window .
365	Creates a new window .
366	Generates a list of commands for the current context
367	Set the contents of a write command .
368	Set the delete policy for the given key
369	Write a key to the server
370	Set the policy for the given key
371	Write the header to the client .
372	Sets the list of operations on the given policy .
373	Write header headers
374	Write the header to the policy .
375	Determine whether to be completed .
376	Gets the connection timeout .
377	Read a record from the database .
378	Get a random node from a list
379	Find node by name
380	Prepend a key to the bucket .
381	Read header .
382	Determine if a key exists .
383	Registers the given uuid to disk
384	Remove a disk from the disk
385	Get list of UUIDs
386	Execute a command on the database .
387	Create a new Index .
388	Delete an index
389	Perform a scan .
390	Remove a user from the cluster
391	Change the user s password
392	Lists all the roles of the user
393	Queries a list of users
394	Get the next record .
395	Iterates over each record .
396	Creates a new script tag
397	Move a point to the given position
398	Returns the position of the image
399	Get screen position of screen
400	Get pixel positions from the image
401	Determine whether the image is a map
402	Performs an animation on the given index .
403	Draw a map
404	Updates the current state of the device
405	Draws the text .
406	Set the text of the given text
407	Set the position of the given text
408	Draws a graph .
409	Draw a gradient
410	Updates the buttons .
411	Sets value for button
412	Draws a window
413	Draw text to the font
414	Write a line
415	Write a paragraph
416	Add a message to the queue .
417	Finds the entry for a message
418	Checks if the record is valid .
419	Creates a new inflate object for the given field definition
420	Validate the device information .
421	Open a log file
422	Set the Mach - file .
423	Validates that the record is valid
424	Calculates distance distance
425	Determine the max_max value of the current user
426	Writes the file .
427	Creates a new data object .
428	Check the session for the study .
429	Registers a field .
430	Defines a field .
431	Checks if the captcha field is valid .
432	Send the contact to contact
433	Returns a hash of form attributes
434	Create a new port instance .
435	Start the port .
436	Create a new port .
437	Updates the current connection .
438	Updates the current config .
439	Create a new collection with the given options .
440	Clean up and cleans up files
441	Get all registered classes
442	Creates a new Duration object .
443	Returns the number of days to the given week .
444	Reset the renderer .
445	Update progress information .
446	Iterates over the given block .
447	Update configuration options
448	Render the renderer .
449	Move cursor to the row
450	Write data to the screen
451	Finish the progress .
452	Stop the terminal .
453	Write a message to the screen .
454	pad the message to pad
455	Lock this job with the given time .
456	Setup the directory for the given directory
457	Creates a new post .
458	Runs the client .
459	reply to a user
460	Runs the bot .
461	Store the mention of a mention
462	Setup the stream for the client
463	Parses a service name .
464	Connect to the server
465	Write data to socket
466	Read a socket from the socket
467	Close the connection .
468	Returns true if the socket exists .
469	Connect to a socket .
470	Write data to socket .
471	Open SSL connection
472	Parses the voice party .
473	Determine the IP address for this IP address .
474	Returns a list of game players
475	Get resource by id
476	Returns all the resources
477	Initialize a new model .
478	Define a validation rule
479	Update the given XML node .
480	returns the number of method
481	Convenience method for converters
482	Parses the given parameter
483	Returns the rate of the given number
484	Calculates the balance of a given power
485	Performs an RDF IR function
486	Calculates a new particle
487	Returns summary summary for the event
488	Reads the contents of this file .
489	Replace the contents of this file .
490	Loads the relationships from a relationship
491	Returns a native representation of the native response
492	Call the given function
493	Send a function to a specific transaction .
494	Parses the URL .
495	Perform an HTTP call
496	Builds api request parameters
497	Connect to Faraday
498	Creates a new transaction with the given key .
499	Replace a new value with JSON data .
500	Serialize this object to JSON
501	Executes the given block .
502	Creates a new group .
503	Creates a new group .
504	Initializes the client .
505	Return a new instance of the given class .
506	Add a reference to a file .
507	Add a file to the project .
508	Remove the seed
509	Configures the targets for the target .
510	Check if a file is a valid source
511	Returns the text for the given word
512	Returns the list of files that should be included in the config file
513	Reads the configuration file into a YAML file
514	Parses the given dictionary and returns a list of dictionaries .
515	Reads the settings from the settings .
516	Recursively check for a file
517	Check if a path exists and write it .
518	Ensure that the given option is valid
519	Runs all the options .
520	Get all entries in the current directory
521	Convert a string to a string
522	Packs the given files to disk .
523	Packs all links in the workspace .
524	Packed entities into a collection
525	Add a header to the list
526	Defines a list of body
527	Returns the content of a column
528	Renders a custom controller .
529	Renders a footer .
530	Creates a list item list
531	Adds an image .
532	Creates a new content item
533	The component component for this component .
534	Creates a navigation navigation
535	Defines an alert message
536	Check if the content is a hash
537	Determine the component component for this component
538	Add data to the given hash
539	Renders header for column
540	Adds a column to the table .
541	Adds a button to a dropdown button
542	Runs the scaffold
543	Copies the new site .
544	Convert a map to a map .
545	Add all files to the given asset .
546	Find files matching asset_path
547	Dispatch an application .
548	Watch for every engine .
549	Loads the configuration for the given name .
550	Takes an image name and adds them to images .
551	Returns a hash of params that should be used in the scope .
552	Converts a key - key into a hash
553	Updates the values of the current model .
554	Validate params for the given scope .
555	Locks a lock with the given key .
556	Unlock a token
557	Applies the given options to the given block .
558	Shows notification .
559	Update the notification .
560	Download the upload
561	Provides information about accessor methods .
562	Builds the command line options for the URL .
563	Merges the given hash with options .
564	Provides accessor for accessors
565	Changes the keys of the store .
566	Transforms keys to a key
567	Searches for the model
568	Print a label
569	Add a position to the position
570	draw border border
571	Resets the default value for this chart
572	draw bar code
573	Add label to field
574	Builds the slug of the language
575	Returns true if the slug is a new slug .
576	Determine if the model has changed
577	Returns human readable string representation of the time
578	Return human readable string representation of time
579	Track errors
580	Processes the batch
581	Preprocess the given control .
582	Execute the given file .
583	Execute a dependency
584	Execute the screen .
585	Define a redis key
586	Normalizes the keys of the key
587	Define a redis method .
588	Store redis key keys
589	Build the Redis configuration hash
590	Returns true if the database exists .
591	Checks if the database exists .
592	Determine if the item is a valid key .
593	validate a redis key
594	Constructs a hash of arguments into a hash
595	Finds a search by its alias .
596	Get a single record by id
597	Retrieve a collection by alias
598	Create a new instance with the given key .
599	Transforms a value to the specified name .
600	Transforms a value from the given type .
601	Parses the given type .
602	Update the given key
603	Remove alias alias
604	Adds a key to account
605	Get a list of DNS queues
606	Recursively reconnects to the specified subscription
607	Yields a block to retry if necessary
608	Prints all fields of the fields
609	Runs the repetition of the repeat repetition .
610	Find a segment by name .
611	Handles an attribute from the segment .
612	Parses a parsed string .
613	Render an array of fields
614	Creates a new regex expression .
615	Find a field by name .
616	Parse the given string
617	Create a new instance of the given name .
618	Processes a sequence of the elements of the segment .
619	Processes a segment .
620	Render all the nodes
621	Calculate the sortable value for the given field
622	Normalizes the response fields of the form
623	Audit all response fields
624	Creates a new tag .
625	Adds a builder to the builder .
626	Rewrites the given selector .
627	Selects the elements matching the selector .
628	Initialize a new instance
629	Checks if the given pid exists .
630	Wait for a given process .
631	Uploads the module to the repository
632	Gets information about the branch of a branch .
633	Get information about a revision
634	add changes to commit
635	Gets the details of the revision .
636	Copies the files from the given revision .
637	Fetch status history for a given revision
638	Retrieve status of a revision
639	Get status of a module
640	Build the status of a directory
641	Builds the status of a revision for the given revision .
642	Retrieve status of a given revision
643	sync current branch
644	Synchronizes the module .
645	Checks if the given revision has a previous revision
646	Get the parent of a given revision .
647	Builds the commit message for this module .
648	returns an array of mappings
649	returns an array of files that are in the system .
650	calculate checksum
651	Get the current current branch
652	Check if a branch exists
653	Retrieve the SHA of the given revision .
654	Get information about a given revision
655	List all remote branches
656	Export a tarball file to a specific revision
657	Executes a file within a temporary directory
658	Uploads modules from current repository
659	Uploads the module .
660	Get a list of files from the current revision .
661	Fetches the repository
662	Assign attribute to an item
663	Returns a new instance of object .
664	Creates a new task
665	Delegate missing methods to the view .
666	Parses an object on the given object .
667	Send a gem to the gem
668	Creates a new interpolation object
669	Returns the selector for the given attributes .
670	Run a request
671	Build a select field for the given date
672	Creates a new label
673	Reads the value of + bytes .
674	Parses a value .
675	Determine whether or not match a symbol .
676	Array of static files
677	Returns an array of all files that have been loaded .
678	Retrieve a list of activities
679	Perform a report request
680	Generates a unique unique unique unique code
681	Draws the paper .
682	Produce coverage report
683	Outputs a markdown report
684	Process a report
685	Updates the contents of the given data .
686	Make an HTTP request
687	Returns a random string
688	Convert a tag to a tag
689	Creates a new Translation instance .
690	Send a notification message
691	Run a command .
692	Wrap a list of words within a given width .
693	Save the database .
694	Removes an object from the cache
695	Merges a new hash with the same name as a Hash .
696	Add a reference to this object
697	Get object object
698	Remove a key from the cache
699	Registers a new object .
700	Create a new client
701	Returns the default adapter for the given options
702	Load the adapter
703	Returns a hash of error message
704	Sets up initializer .
705	Add arguments to the command line .
706	Resets values to defaults .
707	Determine an array of filter filters .
708	Extend instance parameters
709	Sets up the parameters .
710	Defines a new class .
711	Checks if the parameter is a parameter
712	Get a parameter by name
713	Sets a parameter for this class .
714	Iterates over the parameters .
715	Link to this collection
716	Commit the current state of the current transaction .
717	Executes a transaction on the current transaction .
718	Read next message .
719	Create a report instance .
720	Returns the type of the given field
721	validate the node for this node
722	Determine if the given node is the root of the given node
723	Builds a link to the database .
724	This function rebuilds all the children of this node .
725	Validates that the instance is valid .
726	Returns true if the user has been answered .
727	Returns true if the user has been answered .
728	Recursively clone
729	Returns the ancestors of the given node .
730	Return all children of the given node
731	Determines whether this node has the specified node .
732	Validates the minimum value for the minimum .
733	Validates that the question has been set .
734	check if the node is valid
735	returns the question s question
736	Returns the next question .
737	Remove a question from the list .
738	Return the sibling index of this node .
739	Move the current node to the current node .
740	Move the current node to this node .
741	Validates the instance node instance .
742	Returns the number of children of this node
743	Return number of children
744	Validates that the instance is valid
745	Builds the question for this survey
746	Returns all edges of the graph
747	validate the child node
748	Change the answer of the question
749	Remove an answer from the survey
750	Builds the answer of the survey
751	Remove a question from the survey
752	This method should be called after the survey set .
753	Renders a table for the given collection .
754	Returns the default class for the collection
755	Find all events that match a target .
756	Determine if the specified format .
757	Adds an animation to the given actor .
758	Registers a command to be triggered .
759	Defines a custom notification .
760	These actions should be called when a button fires .
761	Fire notification notifications .
762	fire event
763	Adds a model to the model
764	Executes the transition of the actor .
765	fire event notifications
766	Adds events to the given target .
767	Defines a control control control .
768	Start the window
769	Draw a rectangle
770	Render data table
771	Declare a column
772	Renders the actions of an action
773	Creates a link for a resource
774	Adds a hash to the Scene .
775	Apply the post filter
776	Build a hash with default values
777	Returns an array of all images for the specified Scene .
778	Accessor for actor
779	Registers notification .
780	Adds an event to the list .
781	Add actors to this Scene .
782	Registers the actor .
783	Register a new actor
784	Updates the list of updates .
785	this method is used to draw all templates .
786	Changes the given scene to the given scene .
787	Prepare the transition to another actor
788	Returns a hash representation of the drawer .
789	Create a new model object
790	Initializes the configuration object .
791	Get activity activities
792	Get summary information for a user
793	Returns the weight for the user
794	Get series of a series
795	Perform an HTTP request
796	set the content type
797	Sends a request to a channel .
798	Fetch response from specified channel .
799	Register a new event handler
800	Download the source from the source
801	Check files and directories
802	check columns
803	Try to identify the HTTP request
804	Creates a new parameter
805	Finds column definitions
806	Map the mapping to model
807	Generate a new schema .
808	Resolve an array of references to an array
809	Runs the model and renders the given options .
810	Reads a schema from disk .
811	sign in params
812	YAML file
813	Yields each resource
814	Convert a url to a url
815	Convert a filter to a filter
816	Add a child to the specified folder
817	Returns the data structure of the current file .
818	Run the given block .
819	Set the failure status of the migration
820	Determines if the given task is running .
821	Returns true if the job is completed .
822	Prints a step .
823	Starts the task
824	Prints a print of the screen
825	Returns a hash of columns for each column
826	Renders the list of pages .
827	Add page to page
828	Add an alias to the page
829	Parse header content
830	Returns a hash of all variables for the page
831	Retrieves the last child of the given parent
832	Convert a name to a string
833	Strip HTML tags
834	Recursively iterate over children
835	Iterate through all items
836	Returns the parent of the document .
837	Gets the type of the type .
838	Creates a link link to the given type
839	Creates a link to a specific link
840	Creates a link for a given request
841	Sends a JavaScript URL that should be used to be used as JavaScript .
842	Renders the content of the page
843	Symlink to a path
844	Renders content to file
845	Follow a friend
846	Get a list of users for a user
847	Post comment
848	Submit a reddit to a user
849	vote a new vote
850	Checks if the given string is valid
851	Gets the captcha code for it .
852	delete an image
853	Sets the stylesheet to the current page .
854	subscribe to a user
855	Returns a listing of the wiki .
856	Returns a list of reddits for a specific reddit
857	Creates a new moderator
858	Add a friendship to a user
859	Add a friend to a user
860	Remove a friendship with the given user .
861	Removes a commenter from a user
862	Remove a friend from a user
863	Initialize a WebSocket object
864	Logs to login
865	Authenticate user to authenticate
866	delete a user
867	Get messages
868	Clears a list of options
869	delete a user
870	Delete a flair template
871	Configure a user s preferences
872	Sends a CSV file to CSV .
873	Template for a user
874	Select a flair template
875	Toggles the user toggles for a given user .
876	Get comments
877	Get a list of listings
878	Identifies the user
879	Remove a user from the subscription
880	Gets the list of the user logged in the user .
881	Sends a POST request to the API .
882	Set the expiration time for the expiration time .
883	This method returns the width of the screen .
884	Sets a new instance variable .
885	Override method to render an object
886	Joins a collection with the given block
887	Opens a subscription to the public channel .
888	Create a subscription
889	Expire a public message
890	Validates that the given value is valid
891	Validate the given XML string
892	Default options for Rails
893	Reads a subscription
894	Opens a session for a subscription
895	Create a new message
896	Expire a request
897	Read a response from a session
898	Remove a response from the request
899	Creates a new provider .
900	POST a message
901	Creates a new channel .
902	Add security tokens to the server
903	Remove security tokens from the server
904	Gets a specific channel .
905	Get list of channels
906	Updates redis
907	set phrase
908	Create a new Duration
909	Convert longitude to latitude
910	Get projects .
911	Retrieve a specific project
912	Get all experiments
913	Returns a specific experiment
914	Retrieve stats
915	Retrieve a list of variations for an experiment
916	Returns a specific variation
917	Retrieve all audions for a project
918	Retrieve information about a specific audience
919	Perform a GET request
920	get list of keys
921	generate a random number
922	Generates a random bit from the given bit bits .
923	Adds a condition to the conditions
924	Returns a list of keys .
925	Helper method to add_to_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete add_complete_complete_complete_complete_complete add_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete
926	Fetch item from database
927	Performs a search .
928	Returns a list of frequencies for a given string .
929	Find the top score
930	Reduce a new canvas .
931	Compute a new database with the given target path
932	Returns a list of keys .
933	Retrieves the value for a key .
934	Creates a new key
935	Delete item from key
936	Return a list of keys in the map
937	Remove the value from the list .
938	return list of keys
939	Returns a single value with the given keys .
940	Raises error error
941	Iterate over the item
942	Find icon by icon
943	Get the column names
944	Check if column is a column
945	Given a valid options hash
946	Create a new context with the given scope .
947	Raises an error when a message is raised .
948	Verify that the given message is a valid message .
949	Logs a user .
950	Logs out of the user
951	Sets a user session
952	Removes a user from the scope
953	Get the user s access token
954	Returns the namespace
955	Extract the version from the application
956	Updates the cache from the cache
957	Updates the cache from the cache
958	Updates the cache from the cache
959	Returns the path for the current page .
960	Download the cache
961	Send a message to the screen
962	Validates the version of the cache
963	Fetch version from cache
964	Creates a new DB .
965	Runs the configured strategies
966	Runs the user on the configured user .
967	Runs the command .
968	Prints the hex - formatted hex format .
969	Reads and yields the number of words from the input list
970	Perform a select query
971	Update attributes from the database .
972	Executes a new pool .
973	Dispatch to the worker
974	Add a node
975	Find a node by name
976	Convert the given attribute to a hash
977	Create an image
978	Create a new new cache with the given key
979	Create a new failure message
980	Check file size
981	Perform an API request
982	Performs a search query .
983	Defines an attribute for the class .
984	Set validations for fields
985	Create a new address class
986	Initialize a new EventMachine
987	Returns an array of YAML model
988	Raise a new version of the version
989	start the client
990	Validate options .
991	Find emails from IMAP
992	creates a rainbow string
993	Determine if the given value is a positive value .
994	Overrides the content of the content
995	Converts a string to a string .
996	Converts a string to a string .
997	Converts a character point to a given character string .
998	Returns true if the string contains the given string .
999	Creates a new Point object
1000	Validates the document .
1001	Subscribe to the channel
1002	Notifies the notification changes .
1003	notify the channel
1004	Registers the given logger .
1005	Fetch values from the API
1006	Parse a match pattern
1007	grab the text from the buffer
1008	Get comment details
1009	Saves the worker to save
1010	Read all pages of the wiki pages
1011	Read a response from the Producer
1012	Add a filter to the filter
1013	Write the given block to stdout .
1014	Replaces the given template .
1015	Renames the given template .
1016	Commit the document to a page
1017	Commit all revisions to the given page .
1018	Parse a scan format
1019	Convert the body to a string
1020	Print a debug message
1021	Executes a command .
1022	Upload a file to the server
1023	Download a file from the remote server
1024	Write a file to a remote file
1025	Return the distance between two points .
1026	Determines whether the given point is a point .
1027	Forward the subject to the subject
1028	Outputs the summary of the monitor
1029	Gets information about a user .
1030	Set the options for this block
1031	Defines a column
1032	Prepare a bulk query
1033	Reads the DICOM file
1034	Finds the line of the given config file .
1035	Extracts backtrace from specified config file
1036	Determines queue from queue
1037	Returns a hash containing the keys of the given node .
1038	Builds a sentence from the given parameters
1039	Returns a list of all nodes for the given sentence .
1040	Builds a sentence from a hash
1041	Reads pages from wiki
1042	Filter the keys of the given params
1043	Retrieves all sites
1044	Perform a query
1045	Returns the rate time for the user
1046	Set the output to the file
1047	Logs a message on the given level .
1048	Returns an array of the options hash
1049	Returns a list of all the selected values
1050	Sends a packet to the server
1051	Returns true if this node is the parent of this block
1052	Returns an array of objects that have been initialized .
1053	Sets up the daemon
1054	Open an IO file .
1055	Determines if a file exists .
1056	Write pid to pid file
1057	Parse the field
1058	Loads the XML document from the specified file .
1059	Saves the output to the output file .
1060	Prints all the documents .
1061	Execute all files in the cache
1062	Executes an XML document .
1063	Selects all elements in the selector .
1064	Executes the given DSL .
1065	Yields all nodes for the given selection .
1066	Creates a new string of tags
1067	Creates a new option .
1068	Create new configuration file .
1069	This method is called when you want to define the model .
1070	Recursively check for publishing exceptions
1071	Runs the configuration .
1072	Displays all posts
1073	Allow user to respond to status
1074	Perform a HTTP request
1075	Performs a PUT request .
1076	Initializes a new V3 instance .
1077	Add a token to the server
1078	Get the credentials for the user .
1079	Perform a GET request
1080	Perform a POST request .
1081	Perform a POST request .
1082	Perform a PUT request .
1083	Perform a PUT request .
1084	Sign in this session
1085	Validate response from request
1086	Perform an HTTP request
1087	run the request
1088	Create a new place
1089	Create a new transition
1090	Create a new simulation
1091	Defines an Output .
1092	fire event
1093	Send text to text
1094	install a list of the repo
1095	install the module for the given module
1096	Retrieves a vulnerability
1097	Get the current statuses
1098	Get user stats
1099	Create a new position object
1100	Adds tokens to token .
1101	Deletes the specified token from the list .
1102	Adds a join to the table
1103	Add conditions to the table
1104	Loads the classes from the query
1105	Search for a word
1106	This method merges the search results into a search .
1107	The HTTP header for the client
1108	Returns the directory for the app
1109	Find the version of the application .
1110	Gets the version of the application .
1111	Bump the version of the app
1112	Load the project from the project
1113	Displays the help screen
1114	Creates a new object .
1115	Set the given time to the clock
1116	Send a message to the channel .
1117	HTTP POST method
1118	Deletes an HTTP request .
1119	Returns a hash of the config file
1120	Retrieve metadata information from the Vagrantfile
1121	Reads a CSV file from the given path
1122	Write the given CSV data to a CSV file .
1123	Convert CSV data to a CSV format
1124	Add a value to a JSON type
1125	Takes an array of EC2 and returns an array of EC2
1126	Waits to wait for instances
1127	Read a file from the socket
1128	Write a socket to the socket .
1129	Get a list of fields in a directory .
1130	Calculates the total count for the given model
1131	Returns a hash of all stats
1132	Convert a Time object to a timestamp
1133	Create a new object
1134	Configures the configuration object .
1135	Perform HTTP request
1136	Creates a new url
1137	Ensure that the given string is a valid string .
1138	Asserts that this object is equal to the expected value .
1139	Asserts that the given object is the same as arguments .
1140	Asserts that the given string is empty
1141	Asserts the given block .
1142	Perform a polling request
1143	sync client data
1144	Add a torrent to the tracker
1145	Downloads a list of command
1146	delete torrents
1147	Sets a location to location .
1148	Increment a list of torrent files .
1149	Decrement the priority of a torrent .
1150	Makes a list of torrent s priority .
1151	Reduces a list of torrents .
1152	Sets a file priority .
1153	Sets the download torrent for a given torrent .
1154	Sets the limit of a torrent .
1155	return a hash of file
1156	Get the keys of the bucket
1157	Yield each key to the bucket
1158	Runs the command and returns the output .
1159	Retrieve the list of records
1160	Builds a new instance of instances
1161	Ensures that the given class name is defined .
1162	Load config files
1163	Adds new entries to the list of entries .
1164	Sets the HTTP headers for the request
1165	Stores the summary of the data stored in the backend .
1166	handle error message
1167	Perform HTTP request
1168	Perform a GET request .
1169	Perform a DELETE request .
1170	Perform a PUT request .
1171	Perform a POST request .
1172	Get an article
1173	Upload an image
1174	Perform a PUT request
1175	Returns the relative path to the relative path
1176	Build a list of entries
1177	Defines the accessors for the table
1178	Add a row to the table
1179	Generates HTML tag for a footnote
1180	Builds a footnote footnote
1181	Perform an action
1182	Add an error to the error
1183	returns all neighbors of the given coordinates
1184	Get merchant account
1185	Encodes the binary message to be encoded .
1186	Raise a role
1187	Perform a POST request
1188	Create a new network
1189	Create a port
1190	Move an existing port
1191	Write a JSON response to a JSON object .
1192	Redirects to given url
1193	Get list of servers
1194	Create a new server .
1195	Perform a server
1196	Delete an image
1197	Perform a GET request
1198	set the basename to the basename .
1199	Gets all the groups of the game .
1200	Returns a list of league
1201	Extracts a method for the given method .
1202	Fetch a column
1203	Retrieve a record from the given column .
1204	Returns an array of rows in the specified column
1205	Accessor method for accessors
1206	Authorizes the request to the given host .
1207	Retrieve a list of routers
1208	Create a new router
1209	Delete an interface
1210	Find all matching elements in the list
1211	Loads the YAML file .
1212	Get provider providers
1213	Get list of categories
1214	Role for role
1215	Checks if the plan is a plan .
1216	Handles missing methods
1217	Get list of records
1218	Retrieve a single deal
1219	Retrieve total number of deals
1220	Return a list of deals with the given titles
1221	Load cookies from a file
1222	Dumps cookies to a file .
1223	Sets the given element with the given selector .
1224	Updates the expiration time for the expiration time .
1225	Make a GET request .
1226	Get image details
1227	Create a new image
1228	Replace membership
1229	Add an image
1230	Creates a new directory .
1231	Copies the file .
1232	Makes a file .
1233	Lists a copy of a file
1234	Change the file
1235	Removes the given directory and cleans it .
1236	Copies metadata to file .
1237	Executes the given file .
1238	Create a new request .
1239	Fetch config from config file
1240	Replaces email addresses with email addresses
1241	Add a plural rule .
1242	Adds a plural rule to the specified rule .
1243	Determine a pluralized number of occurrences .
1244	Executes the command .
1245	Write results to the output directory
1246	Run the worker loop
1247	Create a new Client
1248	Add a service
1249	Add an endpoint
1250	Get list of Endpoints
1251	Disables the specified method .
1252	Converts the disabled method to the disabled method .
1253	Execute an alias
1254	Aliases the original method .
1255	convert a private key to a private key
1256	Returns true if the point is equal to this point .
1257	Calculate the x y value
1258	Decodes a decoded point into a string .
1259	convert a private key
1260	Return the part of a part
