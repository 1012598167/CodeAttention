0	Get administrator role .
1	Get admin user .
2	Handle the bread deleted .
3	Get categories translations
4	Get highest level menu item .
5	Creates a table name .
6	Handle breadcrumb .
7	Updates a table .
8	Updates the table .
9	Get diff of renamed columns
10	Get the diff of the original table
11	Returns the list of renamed columns
12	Returns an array of renamed indexes
13	Returns a thumbnail of the image .
14	Get thumbnail .
15	Determine if the given user can edit roles .
16	Get Widget Widmer
17	Prepare menu translations
18	Save the modified attributes .
19	Determine if the given user can read .
20	Show breadcrumb form .
21	Store a new breadcrumb .
22	Show breadcrumb form .
23	Update a breadtype .
24	Remove a breadtype .
25	Create a new relationship
26	Get the relationship field .
27	Handle the input .
28	Store new database
29	Edit a database .
30	Update the database .
31	Show data type .
32	Remove the given table .
33	Returns the URL of the current page .
34	Display menu .
35	Check if model is translatable .
36	Many - to - many relation .
37	Returns translated attribute value .
38	Query scope for a given translation .
39	Save translations .
40	Describes a table .
41	Handle breadcrumb .
42	Add missing storage symlink .
43	Register console commands .
44	Cleans the model data .
45	Delete bread images
46	Order items .
47	List relations .
48	Resolve relations .
49	Add the soft delete trait to the stub .
50	Validate breadcrumb
51	Get all fields with validation rules .
52	Verify Id Token
53	Retrieves verification certificates from a location .
54	Retrieve a list of public sign - on - off .
55	Set PHP security constants
56	Fetch an access token from OAuth2 service
57	Refresh an access token with a signed JWT .
58	Fetch an access token using a refresh token .
59	Performs an authorization request .
60	Check if access token is expired
61	Verify an access token
62	Add a scope
63	Execute the REST call .
64	Set the authentication configuration
65	Create OAuth2 service
66	Returns the number of retries for a given code
67	Moves the next chunk .
68	Parse HTTP response
69	Get data type
70	Combine a list of variables
71	Get the value .
72	Execute a request and return the response .
73	Decode HTTP response .
74	Map array data types
75	Get the object as a simple object .
76	Converts a Google_Model into a Simple_Model
77	Get mapped name
78	Checks if an array is an associative array .
79	Builds the AuthHandler
80	Find the config file
81	Define core constants
82	Set the emulate preparation mode .
83	Handle an exception or error
84	Get a list of queries that are executed .
85	Register globals
86	Get all options
87	Adds a new option
88	Deletes an option
89	Add placeholder .
90	Set the default namespace .
91	Set the default controller .
92	Set the default method .
93	Discover routes .
94	Set the default constraint .
95	Returns an array of available routes .
96	Get route options .
97	Add multiple routes .
98	Add a redirect route .
99	Check if a route is redirect .
100	Get the redirect code for a given route .
101	Add a route to the collection .
102	Add an OPTIONS route .
103	Set route environment .
104	Reverse a route
105	Determine the subdomain of the current domain .
106	Reset the routes .
107	Error handler .
108	Shutdown handler .
109	Determine the view for the given exception .
110	Render the exception .
111	Collects exception vars .
112	Determine the status code for the given exception .
113	Convert memory to human readable format .
114	Highlight a file .
115	Checks if value is alphanumeric
116	Match a string against a regular expression
117	Check if a string is a valid email address .
118	Check if a string is valid email address .
119	Check if a string is a valid URL .
120	Check if a string is a valid date .
121	Create a new exception for the move failed .
122	Check credit card number .
123	Checks if the given number is valid .
124	Moves file from source to destination .
125	Moves the Zend \ ez \ Zend \ Zend \ ez \ Zend \ Zend \ Zend \ Zend \ Zend \ ez \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ e .
126	Move Kint file
127	Initializes the session .
128	Configure the session sid length
129	Initialize session variables
130	Set session variable
131	Get session data
132	Push data to a key
133	Remove session data
134	Set flashdata
135	Get flashdata
136	Mark flashdata as flashdata
137	Get flash keys
138	Stores data in the cache
139	Get tempdata
140	Mark a key as tempdata
141	Unmark temporary variable
142	Get temporary keys
143	Sets the session cookie .
144	Check if the given key is valid .
145	Guesses type from file extension
146	Guesses the extension for a given type .
147	Redirect to another URI
148	Redirect to a route
149	Redirect to previous page
150	Set a flash message .
151	Run the filter .
152	Initializes the router .
153	Enable a filter .
154	Get request arguments
155	Format an object .
156	Sends the log to the response .
157	Detect the current locale .
158	Set locale .
159	Check if current request is secure
160	Decodes the response body as an array .
161	Fetch documents from the index .
162	Returns an array of POST data
163	Returns POST data
164	Returns GET data
165	Gets a cookie from the response .
166	Get the uploaded files .
167	Get file by ID .
168	Detect and set the URI
169	Detect request path .
170	Retrieve the type of HTTP response .
171	Parse request URI
172	Build the DSN .
173	Get Formatter for given mime type .
174	Throws an exception if the request is not valid .
175	Handle the after event
176	Resize image .
177	Crop image
178	Get ImageMagick version .
179	Get resource path
180	Add a foreign key
181	Drop a foreign key constraint
182	Set UNSIGNED attribute
183	Sets the default value for a field .
184	Process primary keys
185	Process foreign keys
186	Set locale .
187	Get a translation line .
188	Format a message .
189	Require a file
190	Adds the base URI .
191	Adds an image src
192	Adds a media src
193	Adds a manifest - src
194	Adds an object src attribute
195	Adds a plugin type .
196	Adds sandbox option .
197	Adds a script src
198	Adds a style src
199	Adds an option .
200	Generate nonces for a response .
201	Build the response headers .
202	Get the title .
203	Collects log messages .
204	Prepare params .
205	Determines the cell class and method .
206	Get result array
207	Get custom result object
208	Get the result array as an associative array .
209	Get the result object as an array
210	Get a single row
211	Get a custom row object .
212	Returns the current row array .
213	Returns the current row object .
214	Set a single row
215	Get first row of result set
216	Get the last row
217	Returns the next row
218	Returns the next row as an array
219	Matches a list of acceptable headers .
220	Check if the given parameters are acceptable .
221	Runs console command .
222	Show header header
223	Get all links for a group .
224	Make links
225	Store the current page .
226	Set URI path .
227	Get page count .
228	Get current page .
229	Check if a group has more than one page .
230	Get the number of last page .
231	Returns the page URI .
232	Returns the URI of the next page .
233	Returns the URI of the previous page .
234	Get the number of items per page .
235	Returns the page s details .
236	Ensure that a group exists .
237	Returns the number of years in the current time .
238	Returns the amount of months in the current time .
239	Returns the number of weeks in the current date .
240	Returns the number of days in the current year .
241	Returns the amount of hours in the current date .
242	Returns the amount of minutes in the current calendar .
243	Returns the difference between the current time .
244	Humanize time .
245	Load a database connection .
246	Load forge class
247	Has property changed
248	Map property
249	Mutate a date .
250	Cast value as JSON .
251	Determine if the given alias should be discovered .
252	Find all records
253	Get the first result of the query
254	Save data to database
255	Convert object to array .
256	Insert a record into the database .
257	Insert rows into the table .
258	Get the database builder instance .
259	Protect the given data
260	Clean validation rules .
261	Get validation rules .
262	Count all results .
263	Sets the authentication parameters .
264	Sets the form parameters .
265	Parse request options
266	Get request method
267	Send a cURL request
268	Apply request headers
269	Set response headers
270	Sends the request .
271	Updates the database to the given version .
272	Find all migrations .
273	Check migrations .
274	Returns the migration history .
275	Get migration name .
276	Returns the current plugin version .
277	Add migration history .
278	Remove migration history .
279	Ensure table exists .
280	Check a value against a specific rule .
281	Set the request with the given request .
282	Set validation rule .
283	Get a rule group .
284	Set rule group
285	Loads the rule sets .
286	Sets the error for a field .
287	Get error message .
288	Splits rules into rules
289	Reset the validation .
290	Recursively converts an array to XML
291	Cleans file names .
292	Sets the URI .
293	Get user info
294	Get query string
295	Gets a URI segment .
296	Sets a URI segment .
297	Creates a URI string .
298	Set authority .
299	Sets the URI scheme .
300	Sets the port number .
301	Set path .
302	Refresh the path .
303	Set the query string .
304	Decode a string .
305	Add query parameter
306	Keep query params
307	Filters the path .
308	Apply URI parts .
309	Resolves a relative URI
310	Merges two URI paths .
311	Remove dot segments from path
312	Append a value .
313	Prepend a value to the list
314	Returns the previous page .
315	Returns the next page .
316	Returns the first page .
317	Returns the last page .
318	Get current page .
319	Starts a timer .
320	Stops a timer .
321	Get elapsed time .
322	Get all timers .
323	Add a table alias
324	Executes a SQL query .
325	Executes a simple query
326	Sets the database connection .
327	Prepare a query .
328	Escape identifiers .
329	Call function .
330	List all tables in the database
331	Check if a table exists
332	Check if field exists
333	Get field data for a table .
334	Returns an array of index data .
335	Returns an array of foreign key fields .
336	Get the value of an environment property .
337	Registers the properties .
338	Get item from cache
339	Write data to file
340	Get file info
341	Get file info
342	Initializes the application .
343	Run the application .
344	Handles the request .
345	Starts benchmark .
346	Get response object
347	Force secure access .
348	Displays the page cache
349	Cache page .
350	Generate cache name .
351	Displays the performance metrics .
352	Try to get the route .
353	Start the controller .
354	Creates a controller
355	Run controller .
356	Gathers the output of the request
357	Stores the previous page URL
358	spoof the request method .
359	Get a cache adapter
360	Create alias from table name
361	Appends a where not in statement
362	prepare where in
363	Creates a like statement
364	Adds WHERE condition
365	Called when the WHERE clause ends .
366	Sets the offset for the query
367	Set the value of a key .
368	Returns the compiled select query .
369	Compile the final query
370	Count all rows
371	Get count of results
372	Creates a INSERT query
373	Returns the compiled insert query
374	Returns the compiled update query
375	Returns the compiled delete query .
376	Decrement the value of a column
377	Compiles the SELECT query
378	Compile HAVING clause into SQL .
379	Compile Group By
380	Compile ORDER BY .
381	Get operators .
382	Render the timeline .
383	Collects the timeline data .
384	Collect var data .
385	Round the given number .
386	Copies the image to a new location .
387	Get image properties
388	Releases the session lock .
389	Attach honeypot to response .
390	Prepare template .
391	Fetch the next row as object
392	Make table columns
393	Clear all rows .
394	Set properties from DB result
395	Set data from array
396	Set the path to the view .
397	Get error string
398	Store uploaded file .
399	Check file size
400	Check if file is image
401	Check if a file is in the given array of params .
402	Check the maximum image dimensions
403	Fetch all global variables for a given method .
404	Populates global variables .
405	Run a version of PHPCI .
406	Load data from table .
407	Run the migration .
408	Modify a column .
409	Creates the database table .
410	Copy data to temp table
411	Format fields .
412	Format keys .
413	Drop indexes .
414	Set CSRF cookie
415	Sets the CSRF hash for the cookie
416	Returns current time .
417	Parse a time .
418	Returns instance of time .
419	Returns a time in yesterday .
420	Returns a time object for tomorrow .
421	Create instance from date .
422	Create instance from time .
423	Creates a new Time instance .
424	Create a new Time object from a given format .
425	Creates a Time from a timestamp .
426	Creates a time instance .
427	Returns a DateTime object representing the current time .
428	Returns the age of the page .
429	Returns true if the day is daylight saving .
430	Set the month field .
431	Set the day of the month .
432	Set the minute .
433	Set the second .
434	Set a time value .
435	Set the timestamp .
436	Checks if two time are equal .
437	Check if two time are equal .
438	Get UTC time object
439	Callback function for Matcher
440	Callback function .
441	Convert string to UTF - 8 .
442	Convert a string to UTF - 8 .
443	Get a single file by name .
444	Create FileObject from array
445	Get syntax for dot notation .
446	Sets the binary .
447	Sets the file path .
448	Returns the content length of the file .
449	Set content type by mime type .
450	Get download file name
451	Get the content disposition for download .
452	Build the HTTP headers .
453	Sends the download body .
454	Send body by file path
455	Remap method .
456	Run a specific command
457	Create command list
458	Get a database connection .
459	Create a new Seeder instance .
460	Check if command is all namespace .
461	Add a test .
462	Run all tests .
463	Get the results of a report .
464	Set the query string .
465	Returns the compiled query string .
466	Returns the start time .
467	Get the duration as a string .
468	Set error code
469	Swaps the prefix
470	Compile the bindings .
471	Load the registered helpers .
472	Register the SPL autoloader .
473	Add a namespace .
474	Get the namespace for the given namespace .
475	Require a file .
476	Sanitizes a filename .
477	Discovers composer namespace .
478	Modify a date .
479	Creates a text excerpt .
480	Sanitizes a value .
481	Resolve nested variables .
482	Set the current database
483	Execute a SQL query .
484	Prepare query .
485	Returns the error message .
486	Execute a query
487	Get all field names for a table
488	Get cache handler
489	Get CLI request instance
490	Get a CURLRequest instance .
491	Get honeypot instance
492	Get language instance
493	Get the logger instance .
494	Get a negotiator instance .
495	Get view parser instance .
496	Get request instance
497	Get response instance
498	Get a RedirectResponse instance
499	Get router instance .
500	Get the security instance .
501	Get URI instance
502	Get validation instance
503	Describes a list of commands .
504	Pad title .
505	Generate CSV from result .
506	Get XML from a result .
507	Call a command .
508	Call a seeder .
509	Check if value is in list
510	Check if string is less than or equal to another string .
511	Determine if the field is required .
512	Determine if the field is required .
513	Validate request segments
514	Set the directory
515	Set request .
516	Sets the default controller .
517	Get the file size in bytes .
518	Renames the file .
519	Get the destination
520	Collect query .
521	Format the timeline data .
522	Locates a file .
523	Get class name from file .
524	Returns an array of paths for the given path .
525	Ensure file extension .
526	Find class name by path .
527	Try to locate a file
528	Render a view
529	Get excerpt from string
530	Set view data .
531	Sets a variable .
532	Render a section .
533	Render view .
534	Logs performance information .
535	Set image to file .
536	Ensures that the image is created .
537	Resize the image
538	Rotates image .
539	Flips image .
540	Adds text to the font .
541	Rotate the image
542	Get Exif data
543	Crops the image
544	Run CodeIgniter .
545	Render template .
546	Parse pair of data
547	Extract noparse blocks from template
548	Insert noparse blocks into template
549	Parse the conditionals .
550	Set left delimiters .
551	Replace a single template .
552	Checks if a key should be added to the data context
553	Add plugin .
554	Creates an image resource .
555	Get a specific header .
556	Check if header exists
557	Set a header .
558	Remove a header
559	Sets the HTTP protocol version .
560	Get header name by name
561	Configure session ID regex
562	Get the response reason .
563	Set link header
564	Sets the Content - Type header .
565	Get the response body .
566	Get the response as XML .
567	Format the response body .
568	Sets the response headers .
569	Send the response .
570	Sends the HTTP headers .
571	Set a cookie
572	Check if a cookie exists .
573	Get a cookie by name .
574	Deletes a cookie .
575	Send the cookies .
576	Downloads a file
577	Get a class by name .
578	Creates a configuration class .
579	Get a shared instance .
580	Get the autoloader instance
581	Get a file locator instance .
582	Reset the class loader .
583	Inject a mock
584	Discover services .
585	Get input .
586	Displays a form field .
587	Validates a field against a set of rules
588	Prints text to STDOUT .
589	Write error message to STDERR
590	Wait for a given number of seconds .
591	Returns a colorized string .
592	Wrap a string to a maximum length
593	Get option value
594	Render a table
595	Respond to a response .
596	Respond with response .
597	Respond with created response
598	Respond with DELETE request
599	Returns a failed response .
600	Returns a server error .
601	Handle CSRF verification .
602	Initialize events .
603	Get all listeners for an event .
604	Remove a listener from an event
605	Is referrer
606	Set the platform
607	Determine if the browser is a browser .
608	Set robots
609	Check if mobile is mobile
610	Sets type attribute
611	Initialize the config .
612	Prints text to screen
613	Initializes the qrcode style .
614	Format content .
615	Perform heartbeat .
616	Handle check sync .
617	Logs a message .
618	Gets the UUID from the server .
619	Show the qr code .
620	Wait for login .
621	Login to the WhatsApp server .
622	Save server to cache .
623	Logs before init .
624	Triggered after init success .
625	Send a status message to the WhatsApp server .
626	Download a file .
627	Get the content of a message .
628	Auto download message .
629	Check if the device is sync .
630	Synchronize the webapp server .
631	Generates a sync key .
632	Logs a message to the server .
633	Log a message .
634	Send a word to a user .
635	Fetch all contacts .
636	Store a list of contacts .
637	Fetch the members of the group .
638	Store the members in the chat .
639	Report an exception
640	Throw a fatal exception .
641	Validate the key .
642	Splits a JWT string into an array .
643	Parse the header of the request
644	Parse the claims from JWT .
645	Parse signature .
646	Determines the language used by the client .
647	Get the matches from the accepted languages header .
648	Cache routes per locale .
649	Build the route cache file .
650	Register Laravel localization services .
651	Register the commands .
652	Set current locale .
653	Get URL from route name .
654	Get supported locales .
655	Get supported locales
656	Get current locale direction .
657	Get current locale .
658	Returns the local locale for the current locale .
659	Check if locale is supported .
660	Get route name from path .
661	Find translated route by path .
662	Finds translated route by url .
663	Create a URL from a URI .
664	Normalize the attributes .
665	Load cached routes .
666	Make route path .
667	Encode a set of messages .
668	Encode produce partition .
669	Encode produce topic .
670	Decode a produce topic pair .
671	Produce partition pair .
672	Decode a message set .
673	Decode a message .
674	Creates a stream socket .
675	Selects resources from an array of sockets .
676	Unpacks binary data from binary data .
677	Check length of binary data
678	Is little endian system?
679	Get API version .
680	Get the text for the API .
681	Add a before route .
682	Add a route to the router .
683	Add a callback to the router .
684	Get request method
685	Get the base path of the application .
686	map a route
687	Find a route matching the given request .
688	Get current route .
689	Checks if the route matches the pattern .
690	Run a filter .
691	Get event by name
692	Clear all events
693	Execute a callback
694	Call a callback
695	Call a function
696	Invoke a method
697	Initializes the object
698	Get request body
699	Get request method
700	Get the proxy IP address
701	Parse query string
702	Set status code .
703	Set HTTP header
704	Sets the response headers
705	Send the response .
706	Initializes the framework .
707	Handle errors .
708	Handle an exception .
709	Register a framework method .
710	Register a framework method .
711	Gets a view variable .
712	Clear view variables
713	Start the application .
714	Stop the response .
715	Add a route to the router .
716	Halt the response
717	Default error handler .
718	Redirect to another URL .
719	JSON response .
720	jsonp callback
721	Set the ETag for the given id .
722	Set Last - Modified header
723	Registers a new class
724	Loads a class
725	Get instance by name
726	Creates a new instance of a class
727	Load a class
728	Add a directory
729	Renders a view .
730	Get template path
731	Determines if a graph is cyclic .
732	Get the average height of the graph .
733	Collapse an array
734	Fetch a list of files from an array of paths .
735	Traverses a tree node .
736	Get root nodes
737	Get installed packages .
738	Advances the progress bar .
739	Returns true if the stream supports ANSI .
740	Process no parameters .
741	Processes the token .
742	Initializes the instance .
743	Add a fixable message .
744	Merge a custom array .
745	Get the last pointer on a line .
746	Checks if the given token is an assignment token .
747	Check if the token is a namespace token .
748	Check if the current token is only sanitized .
749	Checks if the given code is safecasted .
750	Gets the array access keys .
751	Get the access key for an array .
752	Check if the current token is a comparison token .
753	Check if a function is in an array comparison .
754	Get the type of the use type .
755	Get interpolated variables
756	Checks if a function call has parameters .
757	Get the number of parameters for a function call .
758	Get a function call parameter .
759	Find an array open tag .
760	Determine the namespace for a given token .
761	Gets the declared namespace name .
762	Checks if the given token is a class constant .
763	Checks if the given token is a class property .
764	Check if a direct scope is valid .
765	Prepare regular expression .
766	Transform a string
767	Transform complex string
768	Returns a list of deprecated classes .
769	Process an arbitrary tstring token .
770	Processes parameters .
771	Retrieve a list of misspelled words .
772	Callback function .
773	Set config data
774	Get the tab width .
775	Process a global variable .
776	Add error to WordPress globals .
777	Setup group groups
778	Check if a token is targetted .
779	Check if the current token matches the given token .
780	Process variable token .
781	Check if a variable is prefixed or not .
782	Validates the prefixes .
783	Record potential prefix .
784	Setup groups cache
785	Validates the alignMultilineItems property .
786	Check if the passed parameter is a local data stream .
787	Process variable in string .
788	Merges the whitelisted properties
789	Checks whether a token should be ignored .
790	Gets the indentation size .
791	Get indentation string .
792	Adds a fix error .
793	Fix assignment error .
794	Checks if the given start and end token is valid .
795	Compare single and plural arguments .
796	Check text content
797	Checks if a token is targetted .
798	Check if the current token is match for the given token .
799	Get the fully qualified classname for a class .
800	Registers the assignment tokens .
801	Execute the closure .
802	Reserve a message from the queue .
803	Closes broker .
804	Validates the namespace .
805	Push job to queue .
806	Listen to the queue .
807	Execute a task .
808	Handle a message .
809	Run the loop .
810	Reserve a job .
811	Moves reserved time to reserved .
812	Serialize a job .
813	Delete a channel .
814	Runs the worker .
815	Handle a message .
816	Initializes the process .
817	Check if the process can continue .
818	Reserve a batch
819	Deletes a job .
820	Parses the XML parser .
821	Parse get elements .
822	Parses the inner XML tree .
823	Reads the next text node .
824	Parse the current element .
825	Parse the attributes .
826	Returns the deserializer for an element name .
827	Push a new context onto the stack .
828	Pop the current context .
829	Get a writer .
830	Parse XML .
831	Parse an XML string and return the result .
832	Writes a XML document .
833	Maps a value object to the XML parser .
834	Writes a value object .
835	Parse a clark - notation string .
836	Deserialize an XML object .
837	Deserialize an XML document .
838	Handles the start tag .
839	Write an element
840	Writes multiple attributes .
841	Writes an attribute .
842	Get the relations for a given model .
843	Validate a job name .
844	Validate command .
845	Create shell job
846	Creates a new scope and returns a closure that can be used to retrieve the stack trace .
847	Finish the timer .
848	Returns the current span .
849	Convert the TraceContext to a Span .
850	Starts the timer .
851	Sets the name of the trace .
852	Annotation method .
853	Sets the Remote Endpoint .
854	Generate a new token and attach it to the request .
855	Get variable from storage .
856	Get last key pair
857	Enforce the storage limit
858	Creates a sanitizer .
859	Set attributes on given DOMNode .
860	Returns the value of an attribute .
861	Process the default entity .
862	Process the default menu item .
863	Returns the type name for a given type FQCN .
864	Get form type options .
865	Initialize EasyAdmin .
866	Autocomplete action .
867	Lists all entity entities .
868	Edit action .
869	Finds and displays an entity .
870	Create a new entity
871	Deletes an entity .
872	Search action .
873	Displays a batch action .
874	Update an entity property .
875	Find all entities .
876	Create list query builder .
877	Find by query .
878	Create search query builder .
879	Create a form builder instance .
880	Get form options .
881	Create the entity form .
882	Creates a form to delete an entity .
883	Redirect to backend homepage
884	Sets the controller for the request .
885	Normalize the menu config .
886	Get entity configuration
887	Check if action is enabled .
888	Get action configuration .
889	Translate a choice .
890	Creates a Pagerfanta instance .
891	Processes the configuration .
892	Initializes the request .
893	Finds the current entity .
894	Get attributes normalizer .
895	Process class metadata .
896	Get default actions config .
897	Handle validation errors .
898	Finds entities by query .
899	Process config files .
900	Normalizes the entity config .
901	Returns a unique entity name .
902	Normalize backend view config .
903	Merge the form config .
904	Creates a list query builder .
905	Determine if the given field name is a Doctrine association .
906	Process backend field config .
907	Get excluded field names .
908	Filter a list of fields .
909	Run a shell command .
910	determine delete operation on statement
911	Check the syntax of a statement .
912	Check for uppercase
913	Reads the length from the database .
914	Builds a progress bar .
915	Logs a BulkException .
916	Get types from configuration
917	Get index configuration .
918	Get all providers .
919	Returns the providers for the given index .
920	Gets a provider by index and type .
921	Set the sorting .
922	Builds the index mapping .
923	Builds the index template mapping .
924	Builds the type mapping .
925	Fix properties .
926	Logs a query .
927	Transforms object to ElasticaDocument .
928	Get total hits .
929	Get results from elasticsearch .
930	Deletes all template indexes for a given template .
931	Gets the index .
932	Gets the persister for a given index and type .
933	Populates the index .
934	Refreshes the index .
935	Transform an object into a document .
936	Transform nested objects into array .
937	Normalize a value .
938	Transform object to document .
939	Get entity query builder .
940	Gets an index template .
941	Resets all index indexes .
942	Resets an index .
943	Resets the type of an index .
944	Switch index alias .
945	Loads the index finder .
946	Load type persistence integration .
947	Loads the Elastica to model transformer .
948	Load object persister service .
949	Loads the type provider .
950	Load type listener .
951	Get the Doctrine events for the given type .
952	Loads the type finder .
953	Loads index manager .
954	Loads index template manager .
955	Loads a driver .
956	Loads the serializer .
957	Creates the default manager alias .
958	Get dynamic template configuration node .
959	Get types configuration node .
960	Get id node .
961	Get the source node .
962	Get routing node .
963	Get the parent node .
964	Get all configuration nodes .
965	Adds the indexes configuration .
966	Adds the index templates configuration .
967	Transforms an array of ElasticaObjects .
968	Checks if an object is indexable .
969	Builds the callback for a given type .
970	Build an expression callback .
971	Get the callback for the given type and object .
972	Get expression variable name
973	Set root name .
974	Switch index alias .
975	Build an alias update request .
976	Cleans up a failed index .
977	Closes an index .
978	Returns the index name of an alias .
979	Logs query .
980	Handle post persist event .
981	Post update event handler .
982	Schedule the entity for removal .
983	Persists scheduled for insertion .
984	Schedules an object for deletion .
985	Check if object is indexable .
986	Returns the repository for the given entity
987	Transform an object into a Document .
988	Get a repository for a type
989	Make a cache client .
990	Register the Hashids factory class .
991	Verifies the hash of the given parameters .
992	Creates a Guzzle client .
993	Adds a cookie .
994	Add cookie headers to the request .
995	Clears all expired cookies .
996	Returns the hash of the given cookie .
997	Adds a header to the response .
998	Parse HTTP headers .
999	Handle request .
1000	Set the default options .
1001	Get client nonce .
1002	Calculates the A1 hash for authentication .
1003	Returns the HA2 hash .
1004	Generate the header for the request
1005	Get the response from the request .
1006	Get the qop attribute .
1007	Hash a value .
1008	Parse the authentication info header .
1009	Parses a string of name - value pairs .
1010	Parses the HTTP Authenticate header .
1011	Sets the MD5 algorithm .
1012	Set the HTTP method .
1013	Unquote a string .
1014	Add new parameters .
1015	Converts an array of headers to Buzz headers .
1016	Converts an array of HTTP headers into an array .
1017	Sends a request asynchronously .
1018	Sends a request .
1019	Execute all requests in the queue .
1020	Initializes the curl multi handle .
1021	Cleans up the queue
1022	Check if the route matches the given request .
1023	Check if the cookie has expired .
1024	Checks if the cookie matches the given domain .
1025	Check if route matches path .
1026	Set attributes from a set - cookie header .
1027	Releases a curl handle .
1028	Prepares a cURL resource .
1029	Set cURL options from request .
1030	Sends a request and returns the response .
1031	Record a request .
1032	Creates the image
1033	Add a cover .
1034	Add a TOC object .
1035	Create PDF .
1036	Ensure that the given input is a valid URL .
1037	Creates a Guzzle HTTP client .
1038	Create middleware stack
1039	Creates a PSR - 7 request .
1040	Sends a request asynchronously .
1041	Generates request options .
1042	Sends a HTTP call context .
1043	Throws an exception if the response code matches the expected status code .
1044	Adds a post parameter to an array of post parameters .
1045	Adds metadata headers .
1046	Adds the location header to the given response .
1047	Validates the given properties .
1048	Gets the value of a property .
1049	Sets the value of a property .
1050	Sets a property .
1051	Adds a property .
1052	Validates the table .
1053	Creates a getTableResult object from the given body .
1054	Computes the signature for the request .
1055	Generate the authorization header .
1056	Returns canonicalized headers .
1057	Computes the canonicalized resource for a table .
1058	Computes the canonicalized resource .
1059	Convert this instance to XML .
1060	Creates a SignedIdentifier from XML .
1061	Adds a signed identifier .
1062	Removes a signed identifier .
1063	Set operations .
1064	Adds a batch operation .
1065	Adds an INSERT entity to a table .
1066	Adds a delete entity to a table .
1067	Creates copy file result .
1068	Create a Message from ListMessages .
1069	Creates a QueueMessage from a peek response .
1070	Creates QueueMessage from parsed response .
1071	Initializes the configuration .
1072	Creates a development storage account settings .
1073	Gets the development storage account .
1074	Builds the service endpoint endpoint .
1075	Creates storage service settings .
1076	Creates a storage account from a given connection string .
1077	Creates a StorageServiceSettings object from a connection string .
1078	Encode a set of body parts .
1079	Decode MIME multipart .
1080	Creates a ListSharesResult from parsed response .
1081	Sets the share .
1082	Retry the request .
1083	Applies AND operator to two filters .
1084	Applies an OR operator to two filters .
1085	Applies equality operator .
1086	Applies a comparison filter to the left .
1087	Applies comparison operator .
1088	Returns a new filter with greater than operator .
1089	Applies less operator .
1090	Applies the left comparison to the left operator .
1091	Set the location .
1092	Unserializes a JSON string .
1093	Creates a PeekMessagesResult from parsed response .
1094	Creates GetEntityResult object from string
1095	Creates operations contexts for given operations .
1096	Constructs the operation context for a batch operation .
1097	Creates the batch request body .
1098	Constructs a delete entity context .
1099	Constructs a PSR - 7 EntityContext .
1100	Constructs a insert entity context .
1101	Returns the entity path .
1102	Sends a put or merge entity .
1103	Adds a query parameter to a query .
1104	Encode an array of values .
1105	Queries the table asynchronously .
1106	Create table .
1107	Creates a new table .
1108	Get table data .
1109	Gets the details of a table .
1110	Deletes a table .
1111	Deletes a table .
1112	Queries entities asynchronously .
1113	Insert or merge entity into table
1114	Insert or merge an entity into a table .
1115	Insert or replace entity in table
1116	Insert or replace an entity asynchronously .
1117	Update entity in table
1118	Updates an entity asynchronously .
1119	Merges entity into a table .
1120	Saves an entity asynchronously .
1121	Deletes an entity from a partition .
1122	Deletes an entity asynchronously .
1123	Gets entity asynchronously .
1124	Gets the entity asynchronously .
1125	Batch batch operation
1126	Batch async operation .
1127	Creates a ListDirectoryResult from parsed response .
1128	Sets the list of directories .
1129	Sets the files .
1130	Creates a directory resource from parsed response .
1131	Creates UpdateEntityResult .
1132	Sets the query parameters .
1133	Sets the list of status codes .
1134	Removes a header .
1135	Adds a history entry
1136	Appends a new entry to the log file .
1137	Creates a QueryTablesResult .
1138	Creates a ListMessagesResult object from parsed response .
1139	Sets the queue messages .
1140	Initializes the sources .
1141	Validates the hostname .
1142	Validates the URI .
1143	Checks if a method exists .
1144	Checks if string is a date string .
1145	Checks if given key exists in array .
1146	Get the range string .
1147	Lists queues .
1148	Clear messages in queue
1149	Create a message in queue .
1150	Creates a message in the queue .
1151	Create queue
1152	Creates a queue asynchronously .
1153	Deletes a message from the queue .
1154	Deletes a message from a queue .
1155	Deletes a queue
1156	Deletes a queue .
1157	Get queue metadata .
1158	Gets queue metadata .
1159	List messages in queue
1160	Lists messages in a queue .
1161	Peek messages in queue
1162	Peeks in a queue .
1163	Generates an account shared access token .
1164	Validates the signed service .
1165	Validates the signed resource type .
1166	Validates the signed permissions .
1167	Validates the signed protocol .
1168	Validate and sanitize string with given array .
1169	Generate canonical resource path .
1170	Parse error message .
1171	Gets the request ID .
1172	Returns the date of the response .
1173	Set the middlewares .
1174	Validates if the given value is a middleware .
1175	Parse a connection string
1176	Creates a new exception .
1177	Extracts the key from the current position .
1178	Extracts string from current position .
1179	Skip the operator character .
1180	Creates a new ShareAclResult .
1181	Adds additional headers to the request .
1182	Creates a setting requirement .
1183	Creates a setting with the given name .
1184	Check if a set of settings matches a given specification .
1185	Sets the next row key
1186	Sets the next partition key
1187	Processes the type .
1188	Validates a value against a type .
1189	Serialize a value .
1190	Serialize a query value .
1191	Unserializes a query value .
1192	Creates a ServiceProperties object from parsed response .
1193	Get cors array .
1194	Initializes the environment .
1195	Parses table entries .
1196	Serializes an entity .
1197	Parses raw entities .
1198	Sets the start date .
1199	Validates the permission .
1200	Create path for share and share .
1201	Returns the file share properties asynchronously .
1202	Sets the file share properties .
1203	Shares a list of resources .
1204	Create a share .
1205	Creates a share .
1206	Deletes a share .
1207	Get file share properties .
1208	Set share properties .
1209	Sets the file share properties .
1210	Get metadata of share .
1211	Set metadata for share .
1212	Sets the metadata of a share .
1213	Set permission for share .
1214	Sets the permission of a share .
1215	Lists directories and files .
1216	Lists directories and files .
1217	Creates a directory with the given path .
1218	Creates a directory asynchronously .
1219	Deletes a directory .
1220	Get directory properties
1221	Gets the directory s properties asynchronously .
1222	Get directory metadata
1223	Set the metadata of a directory .
1224	Creates a file .
1225	Creates a file asynchronously .
1226	Deletes a file .
1227	Deletes a file .
1228	Get file from share .
1229	Gets a file asynchronously .
1230	Get file s properties
1231	Gets file properties asynchronously .
1232	Set file properties
1233	Sets file properties .
1234	Get file metadata
1235	Set the metadata of a file .
1236	Sets the metadata of a file .
1237	Put a file in a given range .
1238	Saves a file range to a file .
1239	Creates a file from a given content .
1240	Creates a file asynchronously .
1241	Clears a range of file .
1242	Clears a range of file .
1243	List files in a folder .
1244	Lists files in a folder .
1245	Aborts a copy of a file .
1246	Aborts a copy of a file .
1247	Sets the type of the operation .
1248	Adds a parameter to the batch operation .
1249	Constructs an array of Response objects from the given body .
1250	Compares two headers using Content - Id .
1251	Creates a batch result .
1252	Get instance attributes .
1253	Serializes an array .
1254	Creates a Policy from parsed response .
1255	Get service properties .
1256	Set service properties
1257	Sets the service properties asynchronously .
1258	Retrieves service stats .
1259	Creates a ListQueuesResult from parsed response .
1260	Sets the queue .
1261	Gets the secondary endpoint from the URI .
1262	Serialize an array
1263	Convert object to boolean .
1264	Converts a RDF1 to a DateTime object .
1265	Converts a DateTime object to ISO 8601 format .
1266	Converts a value to a \ DateTime object
1267	Converts a number to decimal representation .
1268	Check if the content contains all non - zero characters .
1269	Appends a delimiter to a string .
1270	Checks if the request is sent to the server .
1271	Gets the location from a set of headers .
1272	Calculates the MD5 hash of a string .
1273	Validates the resource type .
1274	Creates update message result .
1275	Creates a new connection .
1276	Creates a middleware for a retry operation .
1277	Determine if the given status codes should be retry .
1278	Adds a query parameter to an array .
1279	Adds an optional header to an array .
1280	Creates a new GetFileResult object .
1281	Serialize headers .
1282	Serialize a request exception .
1283	Creates a QueueResult from parsed response .
1284	Creates insert entity .
1285	Creates query entities result .
1286	Formats HTTP headers .
1287	Creates a File .
1288	Applies middleware to the stack .
1289	Get available includes .
1290	Call the include method .
1291	Resolve the includes .
1292	Set error code and message
1293	Set data .
1294	Set the serializer .
1295	Get error output .
1296	Set the resource .
1297	Set the cursor .
1298	Set paginator .
1299	Add relations to the query .
1300	Add relations to the query .
1301	Set only fields .
1302	Sets the serializer .
1303	Transform resource .
1304	Prepare relations .
1305	Eager load relations .
1306	Set the paginator .
1307	Format a cursor .
1308	Merges the included data .
1309	Binds the transformer to the resource .
1310	Resolve the given data .
1311	Resolve a transformable item .
1312	Resolve a transformer .
1313	Render exception .
1314	Make an error .
1315	Make a resource .
1316	Parse filter options .
1317	Parse fieldsets .
1318	Parse fieldset .
1319	Resolve child includes .
1320	Register an error .
1321	Resolve an error
1322	Cleans an array .
1323	Bind a transformer .
1324	Resolve a transformer from the given data .
1325	Resolve the transformer .
1326	Register Laravel framework bindings .
1327	Register Lumen bindings .
1328	Decorate a response factory .
1329	Register serializer bindings .
1330	Register error bindings .
1331	Register fractal bindings .
1332	Register the transformer bindings .
1333	Register the transformation bindings .
1334	Boot the Laravel application .
1335	Set the collection .
1336	Format error response .
1337	Get the relations .
1338	Get the default relations .
1339	Extract the relations .
1340	Extracts the child relations from the given relations .
1341	Wrap nested relations .
1342	Apply query constraints .
1343	Resolve query constraint .
1344	Resolve a relation .
1345	Get the mapped transformers .
1346	Make resource instance .
1347	Include resource .
1348	Include a resource from a model .
1349	Check if resource should be cached .
1350	Make a resource .
1351	Make a resource from a resource .
1352	Instantiate resource .
1353	Determine if data should be created .
1354	Resolve resource key .
1355	Add decorator .
1356	Return a JsonResponse .
1357	Normalize the given data .
1358	Normalize a relation .
1359	Add transform .
1360	Convert an exception to an array .
1361	Convert default exception .
1362	Render exception .
1363	Makes a transform builder .
1364	Configures the terminal .
1365	Adds items .
1366	Sets the list of items .
1367	Selects the first item in the collection .
1368	Add custom control mappings .
1369	Remove a custom control mapping
1370	Displays the screen .
1371	Get selected item .
1372	Execute selected item .
1373	Renders the terminal .
1374	Draws the menu .
1375	Draws a single menu item .
1376	Closes this menu .
1377	Sets the default selected item .
1378	Checks if the given index can be select .
1379	Sets the selected item index .
1380	Returns the selected item .
1381	Wordwrap a string
1382	Generate the colour set code
1383	Calculates the content width .
1384	Gets the right hand padding .
1385	Sets the border
1386	Displays the menu .
1387	Calculates the coordinates of the dialogue .
1388	Writes a row to the table .
1389	Writes text to the terminal .
1390	Set article text .
1391	Calculate the art length .
1392	Displays the prompt .
1393	Get a connection .
1394	Make a new connection .
1395	Get the connection configuration .
1396	Compress the request body .
1397	Check if a rule exists
1398	Add additional arguments
1399	Set the list of arguments
1400	Set getopt options
1401	Add rules to the config
1402	Returns the options as string .
1403	Returns an array of parsed options .
1404	Convert this instance to a JSON string .
1405	Convert this instance to XML .
1406	get an option
1407	Get usage message
1408	Set options map .
1409	Set help map
1410	Parse command line arguments
1411	Parse short option cluster
1412	Parse single option
1413	Add rules to the rules list
1414	Add rules to Zend_Gets mode
1415	Get the OAuth header for the request .
1416	Get the base string for the request
1417	Prepare HTTP method .
1418	Generate a nonce
1419	Appends OAuth parameters to the query .
1420	Get the query as a string
1421	Create a new http client
1422	Returns the log destination location .
1423	Logs platform requests .
1424	Check if an operation is allowed
1425	Prepare methods metadata
1426	Convert wsdl to XML
1427	Copies a file to the public directory
1428	Cast to string
1429	Reads the IPPConfiguration from a XML file .
1430	Initialize the rules for the given XML object
1431	Populates json - only entities with special configuration
1432	Initialize OAuth settings from XML
1433	Initialize the request and response - compression format
1434	Initialize service baseUrl and logger
1435	Get entity by key
1436	Checks if a string is a valid XML string .
1437	Checks if the configuration is valid .
1438	Load webhooks class names and return array of class names
1439	Check if the class name is a valid webhooks class name .
1440	Returns an array of options for this instance
1441	Validate URN
1442	Add function
1443	Set the class name of the class
1444	Set the object
1445	Returns an array of functions .
1446	Set the persistence mode
1447	Creates a SoapServer instance
1448	Handle SOAP requests
1449	Deregisters a fault exception
1450	Create a SOAP fault
1451	Handle PHP errors
1452	Get OAuth2 Access Token Object
1453	Get the URL for the OAuth2 authorization code .
1454	Refresh OAuth2 Access Token
1455	Migrate OAuth2 TO OAuth2
1456	Parse a new access token from the response .
1457	Check if the refresh token is empty .
1458	Generate the authorization header for the client .
1459	Construct the HTTP header for the refresh token .
1460	Check the result .
1461	Get the error message from an error code .
1462	Convert object to array
1463	Serialize an object
1464	remove null properties
1465	Add a complex type
1466	Get the WSDL
1467	Adds bindings to the WSDL
1468	Add port type
1469	Adds types to the WSDL
1470	Add binding operations
1471	Add methods to the WSDL .
1472	Determine if the given type is a local type .
1473	Adds services to the WSDL .
1474	Get target namespace
1475	Returns an associative array of namespaces .
1476	Saves the classes to a directory .
1477	Load includes from XML .
1478	Return a DOM document .
1479	Save PHP files to a directory
1480	Convert an XML namespace to PHP .
1481	Set the baseURL .
1482	Returns the refresh token validation period in seconds .
1483	Gets the access token validation period for the access token .
1484	Gets the Refresh Token
1485	Get the Access Token Object
1486	Update access token .
1487	Get post xml from an arbitrary entity
1488	Creates a PHP object from an XML string
1489	Parses an array of response objects and returns the result .
1490	set cURL option
1491	Check TLS version of TLS .
1492	Throws an exception
1493	Verify variable type
1494	Generate object names
1495	Complete a property .
1496	Unmarshall an XML string .
1497	Gets the serializer for the current request
1498	Gets the compressor for the given request .
1499	Gets the RequestLogger instance for the given service
1500	Connect type to WSDL
1501	Get the default strategy
1502	Get the strategy for a complex type
1503	Add complex type
1504	Make reflection instance
1505	Populates property comments
1506	Creates a new instance from the given instance .
1507	Processes the given property values .
1508	Creates a new instance .
1509	Determine if the given entity is a morhing .
1510	Process a property value .
1511	Get an entity from the model .
1512	Update service context settings
1513	Setup the RestHandler
1514	Set log location
1515	Set the minor version of the service .
1516	Disables the log .
1517	Enable logging .
1518	Set the client name
1519	Creates a DataServiceService instance using the given settings .
1520	Configure OAuth2 login helper
1521	Update OAuth2 Token
1522	Setup the serializers
1523	Update an entity
1524	Adds a new Entity
1525	Deletes an Entity
1526	Uploads an object
1527	Send an email
1528	Executes a query .
1529	Append pagination info to query
1530	Searches for all entities
1531	Calls CDC
1532	Execute object serializer .
1533	Initialize POST request
1534	Get request parameters
1535	Fix tax service payload .
1536	Get export file name for PDF document
1537	Check if method is allowed
1538	Creates a new batch .
1539	Convert string to timestamp
1540	Checks if a timestamp is valid .
1541	Checks if the given value has changed since timestamp
1542	Get company info
1543	Get the list of online API rules .
1544	Get Access Token from array
1545	Get the refresh token from an array .
1546	Get the redirect URL from an array
1547	Save the file to the given directory
1548	Generate file name .
1549	Generate error from OAuth exception
1550	Parse the error response
1551	Check if the error body is in standard format
1552	Sets the response as a PSR - 7 response code .
1553	Parse the response from the client
1554	Set Fault Handler
1555	Set response headers
1556	Set the content type
1557	Set Intuit TID
1558	Get application menu
1559	Reconnect to the server
1560	Set the URI
1561	Set complex type strategy
1562	Add an operation to the SOAP server .
1563	Add a documentation element to the input document .
1564	Add types to the WSDL document
1565	Add a type
1566	Dump data to a file .
1567	Adds a schema section
1568	Configure OAuth from passed array
1569	Check if OAuth is valid
1570	Returns the base URL of the service
1571	Sets the XML format to use .
1572	Set Json format for Json .
1573	Disable Logger
1574	Set new log location
1575	Update the OAuth2 access token
1576	Get class properties .
1577	Get the current result
1578	Set the URI of the SOAP service
1579	Get the URI of the request
1580	Returns the request uri without parameters .
1581	Set complex type strategy
1582	Set a class
1583	Add a function
1584	Dump the WSDL to a file .
1585	Update the service context
1586	Sends the request and returns the response .
1587	Perform an OAuth1 API call
1588	Get the OAuth1 header for the OAuth1 request
1589	Perform OAuth2 API call
1590	Get the OAuth2 authorization header for the given OAuth2 access token .
1591	Logs an API response to the log .
1592	Logs a request to the log .
1593	Parses XML string to DOMDocument .
1594	Resets the compressor and Response Compressor
1595	Returns the destination URL for the request
1596	Append minor version to request URI
1597	Check HTTP Method
1598	Parse a URL
1599	Get accept content type .
1600	Convert a query string into an array
1601	Verify a payload against a signature
1602	Encrypt Payload by token
1603	Retrieve an IntuitBatchResponse by id
1604	Removes a batch request
1605	Convert an array to a message and code
1606	Iterates over a fault and returns an exception
1607	Get options for this instance
1608	Set request style
1609	Set the encoding method used to encode the message .
1610	Set proxy port
1611	Set the HTTPS certificate for the client
1612	Set stream context
1613	Set user agent
1614	Do the soap request
1615	Initialize the SoapClient object
1616	Add SoapInput Header
1617	Get functions from WSDL
1618	Get types from WSDL
1619	Get type name based on nesting level
1620	Creates an element from the WSDL and adds it to the schema
1621	Prepare the WSDL
1622	Adds an operation to the WSDL .
1623	Add an operation to the WSDL .
1624	Creates a reference element .
1625	Creates element with complex type
1626	Creates a simple element .
1627	Resolve a short namespace
1628	Parse doc comments
1629	Check if array is associate array
1630	Get Webhooks event from json string
1631	Verifies the payload .
1632	Check if key is in complex list
1633	Get class method
1634	Creates a IPReferenceType based on an array of data
1635	Get IPPid from provided data
1636	Merges two objects .
1637	Convert an array of headers to an array
1638	Set SSL .
1639	Converts an HTTP header array to an array .
1640	Adds a warning .
1641	Resolve from input .
1642	Set the name attribute .
1643	Scope by tag name .
1644	Boot the model trait .
1645	Tag model .
1646	Remove model tags .
1647	Add one tag to the model .
1648	Remove one tag from the model .
1649	Check if tag exists
1650	Scope with all of the given tags .
1651	Scope the query to be tagged .
1652	Query scope to remove all of the given tags .
1653	Scope the query to be not tagged .
1654	Rename a tag .
1655	Get popular tags .
1656	Get the fully qualified column name of the related model .
1657	Get the fully qualified foreign key name .
1658	Create a new taggable alias .
1659	Builds an array of tags .
1660	Get tag model keys .
1661	Make tag list
1662	Make tags array .
1663	Get all tags .
1664	Get the list of unused tags .
1665	Rename a tag .
1666	Get the fully qualified tag table name .
1667	Get the fully qualified table name .
1668	Save compound parameter data .
1669	Builds the URL .
1670	Get payload for single parameters .
1671	Get payload for a collection of compound parameters .
1672	Add index to string
1673	Get debug response
1674	Get endpoint .
1675	Sends a hit .
1676	Get http client options .
1677	Builds the request URL .
1678	Checks if the request has the minimum required parameters .
1679	Set parameter action
1680	Set a single parameter object
1681	Add an item to the collection
1682	Get a parameter object for a method .
1683	Get index from method arguments
1684	Get the class name of the class for a given method
1685	Make an HTTP POST request .
1686	Parse request options .
1687	Get readable items
1688	Add a supported card
1689	Set the year parameter .
1690	Validates the credit card
1691	Get the masked number
1692	Get supported brand
1693	Get a track by pattern
1694	Get the first name of the first name .
1695	Set billing name
1696	Set shipping name
1697	Get birthday .
1698	Set birthday .
1699	Initializes the request .
1700	Sets a parameter .
1701	Set card .
1702	Returns the formatted amount .
1703	Sets the amount of money .
1704	Sets the currency .
1705	Returns the numeric code for the currency .
1706	Get the decimal places for the currency
1707	Formats an amount with Currency .
1708	Replace all items
1709	Validates the response .
1710	Converts a string to camelCase
1711	Validate Luhn number .
1712	Returns the gateway short name from a class name .
1713	Get gateway class name from short name .
1714	Returns a fixed query builder .
1715	Get parent metadata for a property .
1716	Get pager .
1717	Returns the parent alias for the given alias .
1718	Helper method to add an object to a IPP .
1719	Find a record by ID
1720	Authenticate a user
1721	Set parent application ID
1722	Set Credit Card Info
1723	Retrieve the Credit Card Info
1724	Add an object to a realm
1725	Find a service by ID
1726	Sets the signature .
1727	Handle 500 errors .
1728	Logs the user login hook
1729	Check if a path is repeatable
1730	Check if a path exists
1731	Reorder the paths with the given paths
1732	Calls a function
1733	Calls static method
1734	Find a customer by name
1735	Set class application ID
1736	Retrieve Bill Address
1737	Set ShipMethod ID .
1738	Set the payment method ID .
1739	Generate field schema
1740	Recursively finds a child node at the given path .
1741	Add child at path
1742	Returns the children of this node .
1743	Remove an attribute
1744	Convert XML to XML
1745	Convert XML to array .
1746	Recursively converts a node into an array .
1747	Save XML to a file .
1748	Save a JSON object to a file .
1749	Casts a string to a certain length
1750	Decode UTF - 8 .
1751	Parse a DSN
1752	Extract requestID from XML
1753	Parse request ID and ident
1754	Check if a remote address matches the CIDR
1755	Create a new user
1756	Disable a user
1757	generate unique hash
1758	Check if a quickBooks ID exists .
1759	Initializes a database driver
1760	Checks if a driver is initialized
1761	List a list of objects
1762	Return a list of defined actions
1763	Escape a string
1764	Generate QR CodeIgniter
1765	Execute qbwc
1766	Add a customer add request
1767	Add a customer response to the response
1768	Catch all errors
1769	Queue a job processing
1770	Enqueue a task
1771	Recursively deletes a queue
1772	Queue left for a user
1773	Queue a report .
1774	Queue queued messages
1775	Called when an error occurs
1776	Last error handler
1777	Perform authentication
1778	Performs authentication check
1779	Logs a user out
1780	Creates a new company
1781	Initializes the driver
1782	Checks if the driver is initialized
1783	Logs a message
1784	Call a hook
1785	Connect to OAuth
1786	Sets the default values of the given configuration
1787	Dequeues recurring events .
1788	Extracts the identifiers from the XML .
1789	Extracts the status code from XML .
1790	Extracts the status message from XML .
1791	Call a mapped function
1792	Call a hook
1793	Handle an error
1794	Enqueue an action .
1795	Find an item by name
1796	Checks if a string starts with a given string .
1797	Execute a SQL query
1798	extracts the contents of a tag
1799	Extract tag attributes from a string
1800	Encode special characters
1801	Decode a string
1802	Check if a user is available
1803	Loads an OAuth token .
1804	Handle OAuth authentication
1805	Get widget menu
1806	Convert XML Schema to SQL Definition
1807	Transform a node
1808	Set a value in the object .
1809	Gets a value by key .
1810	Set full name and parent
1811	Set boolean type
1812	Set date type
1813	get date type
1814	Remove a key from the collection .
1815	Get a QTI object from a request .
1816	Convert object to XML
1817	Initializes the driver .
1818	Add an object to a realm
1819	Get the name of the person
1820	Set the first name of the user .
1821	Sets the SQL default values for SQL queries
1822	Get the status of a user .
1823	Delete a purchase order
1824	Reads the contents of a variable
1825	Loads XML from string .
1826	Parse XML .
1827	Formats the request as XML .
1828	Error handler function .
1829	Resolve quickbooks ticket id
1830	Write a config
1831	Read a config value
1832	Create a new user
1833	Get default username
1834	Login to company
1835	Check user authentication
1836	Save error log
1837	Enqueue a record
1838	Dequeues a re - queued entry
1839	Enqueue a queue entry
1840	Check if a queue is being processed
1841	Get the number of queues left for a user
1842	Get processed tickets
1843	Logs a message
1844	Execute a SQL query
1845	Return all fields of a table
1846	Select rows from a table
1847	Function to update a table
1848	Enqueue a prompt .
1849	Enqueue a recurring event
1850	Get the size of the queue .
1851	Retrieve a single address from the response
1852	Authenticate a user
1853	Find a company by ID
1854	Delete a customer credit
1855	Sends the HTTP request
1856	Sign an application .
1857	Generate a unique transaction ID
1858	Refund a credit card .
1859	Initialize the queue
1860	Factory method .
1861	Merges default array values
1862	Set response headers
1863	Create a new listing of all books
1864	Factory method .
1865	Handle SOAP request
1866	Recursively walk the collection
1867	Requests a Charge
1868	Retrieve a single Charge
1869	Retrieves a transaction by ID .
1870	Refund a payment .
1871	Store a Credit Card
1872	Store a credit card from a token .
1873	Retrieve a single card
1874	Retrieves a list of Credit Card objects
1875	Delete a card
1876	Handle an error .
1877	Make an HTTP request
1878	Map function to QuickBooks ID
1879	Map function to application ID
1880	Call add method .
1881	Filter actions by priority
1882	Check if required version is met
1883	Request a list deleted query
1884	Handle a ListDeletedQuery response
1885	Handle a transactionVoid request
1886	Handle a transaction response
1887	Sends a salesce request to a salesce
1888	Add a request to a job type add
1889	Build filter XML
1890	Flush all caches in a group .
1891	Flush cache by tags .
1892	Find a command by name .
1893	Run command .
1894	Checks if an extension can be loaded .
1895	Check if extension file can be loaded .
1896	Load the extension s localconf file .
1897	Load all extensions for an extension .
1898	Ensure that the TYPO3 configuration is available .
1899	Execute all scheduled tasks .
1900	Execute a single task .
1901	Executes the migration .
1902	Lock backend for Editor
1903	Unlocks backend for editors
1904	Create an admin user
1905	Lists all available upgrades .
1906	Generate package states
1907	Fix folder structure
1908	Setup extension if needed
1909	Execute action with arguments
1910	Create a new script event from composer run .
1911	Create a new instance from a command line .
1912	Creates a new instance of the TYPO3 command .
1913	Executes a sub - command .
1914	Handle exception .
1915	Creates an upgrade wizard .
1916	Wrap the given string to the given maximum length .
1917	Make a request to the given URL
1918	Make an absolute URL .
1919	Check third party extensions against third party extensions .
1920	List wizards .
1921	Executes a wizard
1922	Run the upgrade command
1923	Sub - process a sub - process command .
1924	Check extension compatibility
1925	Setup extension .
1926	Get the bundle structure .
1927	Get extension structure .
1928	Create extension structure .
1929	Generate XML for a given class
1930	Adds the attributes to the given class .
1931	Adds the documentation to the XML document .
1932	Resolves the command method name
1933	Map request arguments to controller arguments .
1934	Call a command method .
1935	Creates a default logger .
1936	Get short description
1937	Parse command definitions
1938	Returns the synopsis .
1939	Removes a step from the sequence .
1940	Invokes all registered steps .
1941	Invokes a step .
1942	Setup extensions .
1943	Setup all active extensions .
1944	Remove inactive packages
1945	List all installed packages .
1946	Flush all cache tables .
1947	Handles an error .
1948	Register installer scripts .
1949	Ask user to select a list of choices .
1950	Asks a question
1951	Asks a confirmation
1952	Asks a hidden response
1953	Asks and validates a question
1954	Ask a hidden response and validate it .
1955	Execute the console command .
1956	Write a log record
1957	Returns the number of performed updates
1958	Add a list of performed updates for a schema update .
1959	Adds errors for a schema update type .
1960	Remove a path
1961	Show the current configuration
1962	Show the active configuration
1963	Show a local configuration
1964	Set a config value
1965	After installation .
1966	Adds a flash message to the queue .
1967	Safely copy a file
1968	Generate an XSD schema
1969	Initializes the package management .
1970	Override class implementation
1971	Registers the implementation of a class
1972	Set a local configuration value .
1973	Converts a value to a target type
1974	Get type of element
1975	Check if target type is convertable
1976	Checks if a command is available .
1977	Configures the command .
1978	Executes the command
1979	Ensure that required environment variables are set .
1980	Initializes the compatibility layer .
1981	Handle the application .
1982	Render exception .
1983	Print exception .
1984	Output the exception trace .
1985	Returns a shorten file name
1986	Displays an error message
1987	Executes MySQL command .
1988	Executes a command in subprocess .
1989	Render the schema result .
1990	Render imported static data .
1991	Updates the schema of the given types .
1992	Builds the sequence for the given run level .
1993	Builds the essentials sequence .
1994	Build a basic runtime sequence .
1995	Flush all caches for a group
1996	Flush all caches by tags
1997	List available cache groups
1998	Hydrates the dictionary .
1999	Add the entry to the collector .
2000	Retrieve files number .
2001	Convert data to JSON .
2002	Get transaction description .
2003	Get a new token
2004	Check if the token has a valid token .
2005	Sets the start time .
2006	Sets the end time .
2007	Get all issues .
2008	Runs the task .
2009	Truncate and truncate a path
2010	Exits an error .
2011	Divide an array of tokens by comma .
2012	Trim whitespace .
2013	Call function usage checker
2014	Add a record to the repository
2015	Determines if colors support supported
2016	Get terminal size .
2017	Tries to autoload for an identifier .
2018	Locate class by name .
2019	Locate a function by name .
2020	Open autoloader
2021	Returns information about a file .
2022	Compile a constant fetch node .
2023	Compile a class constant fetch .
2024	Computes the class reflections for a given file .
2025	Checks if the given line contains a line .
2026	Returns all class names .
2027	Create object from class name .
2028	Create property from instance
2029	Returns the string representation of the doc block type .
2030	Finds all references of a type .
2031	Find a reflection in the array .
2032	Create a new instance from a class name and method name .
2033	Creates a new instance from a method instance .
2034	Create parameter from closure .
2035	Returns true if the type is null .
2036	Returns the type of the argument .
2037	Sets the type of parameter .
2038	Returns all functions .
2039	Create method from class name
2040	Create method from instance
2041	Returns the prototype of the method .
2042	Checks if the method is a constructor .
2043	Export a class name to a string .
2044	Creates a class from a node .
2045	Returns an array of methods .
2046	Returns an array of methods .
2047	Checks if a method exists .
2048	Returns the value of a constant .
2049	Returns the constructor of the class .
2050	Returns an array of class properties .
2051	Returns the parent class of the class .
2052	Returns the parent class names .
2053	Get the traits .
2054	Reflect the class for a named node .
2055	Checks if the object is an instance of the class .
2056	Checks if the class is a subclass of the given class .
2057	Checks if the class implements an interface .
2058	Returns true if the class is instantiable .
2059	Checks if the object can be cloned
2060	Get the hierarchy of the interface .
2061	Sets the value of a static property .
2062	Sets the class .
2063	Removes a class method .
2064	Adds method .
2065	Adds a property .
2066	Removes a property .
2067	Determine if the given Reflector is matching .
2068	Export instance as string
2069	Create a class from an object .
2070	Returns an array of reflection properties .
2071	Create property node from reflection .
2072	Populates the constructor .
2073	Sets the optional flag of a node .
2074	Returns the number of required parameters .
2075	Returns an array of parameters .
2076	Returns the parameter with the given name .
2077	Is variadic?
2078	Sets the return type .
2079	Returns the body code of the body .
2080	Get return statement AST
2081	Locate identifiers by type .
2082	Creates a Constant from a node .
2083	Returns the value of the constant .
2084	Get the set of modifiers .
2085	Generate doc for a class .
2086	Format the doc .
2087	Extract properties from the graph .
2088	Extracts the weight for a property .
2089	Checks if a type is an enum .
2090	Creates a properties map for given types .
2091	Converts a namespace to a directory .
2092	Fixes PHP code .
2093	Check if a property exists
2094	Extracts the cardinality of a property .
2095	Get property url
2096	Convert field type to PHP type .
2097	Get relation name
2098	Finishes the writing process .
2099	Flush the buffer
2100	Adds an item to the buffer .
2101	Adds a single language item .
2102	Add multi language item
2103	Returns an array of SitemapUrls .
2104	Set whether the sitemap should use gzip .
2105	Adds a sitemap .
2106	Writes data to the file .
2107	Writes the end of the file .
2108	Finish the compression .
2109	Set the expiration date .
2110	Set the key params .
2111	Set the parameters for a sub - key .
2112	Get usage string
2113	Get user id from given name
2114	Parses a user id string
2115	Check if process is running .
2116	Terminate process .
2117	Set operation name
2118	Handle error .
2119	Set error code
2120	Setter for data .
2121	Creates a bad passphrase exception .
2122	Get the passphrase for a key
2123	Returns the hash algorithm name .
2124	Sets whether or not the certificate can be signed .
2125	Sets if the file can be encrypted
2126	Parses a string into a sub - key .
2127	Parse a string into a timestamp .
2128	Delete a public key
2129	Get fingerprint of a key
2130	Encrypt data .
2131	Encrypts a file
2132	Encrypt and sign a string
2133	Encrypt and sign a file
2134	Decrypt and verify a string
2135	Decrypt and verify a file
2136	Sign a file .
2137	Add a decrypt key
2138	Add an encryption key
2139	Add a key to the list of signing keys
2140	Add a key to an array .
2141	Import a key .
2142	Export a key .
2143	Decrypt and verify a file
2144	Prepare input data
2145	Prepare output file
2146	Get public keys
2147	Sends a command to the buffer .
2148	Resets the state of the process .
2149	Run the process .
2150	Set operation .
2151	Set the pinent keys
2152	Get the current version of the binary .
2153	Retrieves data from the process .
2154	Set process data .
2155	Closes the subprocess
2156	Closes the agent launch process .
2157	Closes a pipe
2158	Closes idle agents
2159	Find the path to a binary
2160	Find the pin entry
2161	Print debug message
2162	Get the primary key
2163	Checks if the key can be signed .
2164	Returns true if the key can be encrypted .
2165	Sets the log filename .
2166	Log data to the log file .
2167	Connect to IRC server
2168	Parse a command line
2169	Parse user data from environment variable .
2170	Disconnect from the server .
2171	Sets message description
2172	Send Get Pin
2173	Send get info command
2174	Get raw data .
2175	Returns a string wrapped in a string
2176	Send data to stdout .
2177	Builds the messages from the given translations .
2178	Set comment before headers .
2179	Adds a multiline string to an array of lines .
2180	Get the main theme file data .
2181	Extract strings from file
2182	Get the file comment .
2183	Set default headers .
2184	Get file data .
2185	Get file data from string .
2186	Resolves the callable function .
2187	Determines if a comment is preceding a comment .
2188	Calculate the score for a file .
2189	Determine if the given directory contains matching the given matchers .
2190	Get files from a directory .
2191	Make a po file .
2192	Build JSON files .
2193	Remove JS strings from PO file
2194	Mark updates as successful .
2195	Mark all updates as complete
2196	Set success by hook .
2197	Checks if the list points are updated .
2198	Checks the status of all updates .
2199	Save progress .
2200	Render dropler .
2201	Generate hash from database .
2202	Compare config with given name
2203	Import module config .
2204	Import configs .
2205	Install modules .
2206	Check link .
2207	Check if link is active .
2208	Redirect to home page .
2209	Get a single file .
2210	Get items from data .
2211	Get total count from data
2212	Prepare string for like comparison
2213	Set the data .
2214	Resolve type .
2215	Resolves grid type .
2216	Render a grid .
2217	Render a grid cell .
2218	Get grid filter
2219	Get grid column operator .
2220	Check if a block exists .
2221	Walks down a SelectStatement AST node .
2222	Set the source
2223	Check if data is ready for export
2224	Process request data
2225	Process mass actions
2226	Process export .
2227	Process filters .
2228	Process session data .
2229	Prepare the result
2230	Set session data
2231	Gets a column by id .
2232	Returns true if the table has a column with the given id .
2233	Set order of columns .
2234	Add mass action
2235	Add a tweak
2236	Get all tweaks .
2237	Get a tweak
2238	Get the tweaks group for a specific group .
2239	Add row action
2240	Set query template
2241	Add export .
2242	Get route url
2243	Set filters .
2244	Set limits .
2245	Get page count
2246	Set maximum number of results
2247	Returns true if the title section is visible .
2248	Is filter section visible?
2249	Is the pager section visible?
2250	Sets the list of columns to hide .
2251	Hides the columns of the table .
2252	Get grid response
2253	Returns the raw data as an array .
2254	Get all filters from session .
2255	Get filter by id
2256	Has filter for given column
2257	Initializes the query builder .
2258	Render cell .
2259	Is visible .
2260	Sets the sort order .
2261	Set column size
2262	Set the data of the query .
2263	Get the data of the query .
2264	Set cell alignment .
2265	Returns an array of operators .
2266	Add a new column
2267	Sets the order of the columns .
2268	Add route parameters .
2269	Get route parameters .
2270	Execute the callback .
2271	Add type .
2272	Add column .
2273	Sets the DI container .
2274	Get the response .
2275	Get grid data .
2276	Returns a flat array of grid data .
2277	Set template .
2278	Gets a parameter .
2279	Get actions to render a row .
2280	Clear all items .
2281	Adds an element to the cart .
2282	Remove item from collection
2283	Get all items .
2284	Login to the server .
2285	Get the user profile and access token .
2286	Sets the value of the rememberUser property
2287	Login callback .
2288	Get the length of a string .
2289	Returns a slice of a string .
2290	Converts a string to lowercase .
2291	Converts a string to upper case .
2292	Get a function proxy for a function .
2293	Register a mock for remove
2294	Defines a function mock .
2295	Show language view
2296	Get country code
2297	Get the language code
2298	Get long code
2299	Get language name
2300	Set locale .
2301	Redirect to the home page .
2302	Redirect to language
2303	Set locale .
2304	Returns the index of the first element in the collection
2305	Removes the element at the given index .
2306	Take elements from the collection and return a new collection .
2307	Set the auth login
2308	Set OAuth bearer token
2309	Send a message
2310	Connect to SMTP server .
2311	Starts a TLS connection .
2312	Authenticate to server
2313	Authenticate OAuth bearer token
2314	Authenticate XOAuth2 server
2315	Send RSPT to the message
2316	Parse data
2317	Handles QUIT command
2318	Get code from SMTP server
2319	Sets the from name and email address .
2320	Set the fake from name and email address
2321	Finds the file for the given class .
2322	Finds a file for the given class .
2323	Load classes .
2324	Fix namespace declarations .
2325	Writes a cache file .
2326	Returns an ordered list of classes .
2327	Adds a set of prefixes .
2328	Registers a set of paths for a given prefix .
2329	Finds the file for the specified class .
2330	Parse a text .
2331	Detect line type .
2332	Parse a single block .
2333	Returns an array of inline markers for the class .
2334	Prepare the markers for rendering .
2335	Parse inline markers
2336	Parse emph strong .
2337	Identifies the HTML code of a line .
2338	Consume HTML tags .
2339	Determine if the given line is aenced code .
2340	Identify a header line .
2341	Consume a headline .
2342	Replace escaped characters .
2343	Parse a link .
2344	Parse an image .
2345	Parse inline code
2346	Consume the code from the given line .
2347	Determine if the given line is an uppercase
2348	Render a list block
2349	Consume a quote block .
2350	Consume a reference line .
2351	Render a headline .
2352	Parse a markdown
2353	Determine if the given line is a table .
2354	Consume a table block .
2355	Render a table
2356	Parse url from markdown
2357	Check if the subject is equal to another name .
2358	Creates a new DOMElement .
2359	Creates a new DOMElement with the given text .
2360	Validates images .
2361	Check for empty value
2362	Check for invalid csv property keys .
2363	Create an exporter .
2364	Adds a value to a usergroup .
2365	Validates document with schema .
2366	Adds a new name .
2367	Adds a summary .
2368	Adds a description .
2369	Add price .
2370	Add bonus .
2371	Add sales frequency .
2372	Adds the date added .
2373	Add sort .
2374	Validates the given value
2375	Gets the content of a hook .
2376	Set a hook .
2377	Set a hook .
2378	Remove a hook .
2379	Count the number of commits .
2380	Returns the reference bag .
2381	Get a commit object .
2382	Gets a tree node .
2383	Get Blob instance
2384	Get a log instance .
2385	Get the size of the repository .
2386	Executes a git shell command .
2387	Returns the description of the repository .
2388	run a command
2389	Clone a path to a directory .
2390	Returns an array of parent commits .
2391	Get a short message .
2392	Returns a list of branches in the current revision
2393	Initializes a new repository .
2394	Check if a repository is valid .
2395	Clone a repository
2396	Clone a branch .
2397	Clone a repository
2398	Get the list of lines grouped by commit .
2399	Returns the lines of the file .
2400	Gets a reference
2401	Get all branches .
2402	Returns an array of local branches .
2403	Returns an array of remote branches .
2404	Returns the content of the file .
2405	Returns the mimetype .
2406	Convert diff to array .
2407	Parse a text
2408	Write a query
2409	Write column name .
2410	Creates an array of columns .
2411	Creates a new Column object .
2412	Creates a new Table instance .
2413	Get the SQL for this object
2414	Boot the Eloquent model .
2415	Store a cache key for a model .
2416	Get cache keys
2417	Flush the cache keys for a model .
2418	Forget the cache of the model .
2419	Reset cache config .
2420	Generate cache key .
2421	Cache a query .
2422	Validate HppRequest
2423	Validate HppResponse
2424	Set the auto settle flag .
2425	Set flag for returnTSS
2426	Set if card is valid .
2427	Set whether or not the message should be sent .
2428	Set card storage flag
2429	Set flag for offer save card
2430	Set flag for payer .
2431	Set hpp version
2432	Generate default values .
2433	Encode the data .
2434	Decode the data .
2435	Encode the data to base64
2436	Decode base64 encoded data .
2437	Get field config rules
2438	Unpacks deferred results .
2439	Defines a deferred result .
2440	Get the key from the cursor
2441	Convert cursor to array
2442	Compiles list node .
2443	Creates request data .
2444	Get all sent sentences .
2445	Splits text into array of sentences
2446	Detect language from string
2447	Returns a list of language codes
2448	Get default fields
2449	Cache a row
2450	Get cached row
2451	Check if an offset exists
2452	Get row by offset .
2453	Set row by offset
2454	Unset an offset
2455	Returns the join field for the given table .
2456	Delete all records .
2457	Gets the class name for a given type and type .
2458	Set configuration parameter .
2459	Get field factory
2460	Execute a query .
2461	Executes a callable .
2462	Start a transaction
2463	Check if data is valid .
2464	Checks if a value is set .
2465	Edit multiple values .
2466	Delete model .
2467	Relate two rows .
2468	Unassociate two rows .
2469	Unassociate all tables between two tables .
2470	Get a select from one table .
2471	Get value name .
2472	The quota limits .
2473	The metric rules associated with the request .
2474	The producer destinations .
2475	The destinations for logging .
2476	A list of advices .
2477	The endpoints .
2478	Output only .
2479	The metrics for the request .
2480	Field violations .
2481	A list of operations .
2482	The view for the role .
2483	The list of permissions to include .
2484	Optional . The stage of the role .
2485	List of consumer destinations .
2486	A list of supported extensions .
2487	The list of providers .
2488	Optional . The list of files requested .
2489	Optional . The list of fields that match the request .
2490	Array of bounds .
2491	The role of the user .
2492	List of subpages .
2493	Optional . The keys of the list account .
2494	The list of recipients .
2495	The stack entries .
2496	The producer destinations .
2497	The destinations of the consumer .
2498	Required .
2499	The list of bindings .
2500	The metric costs .
2501	Pages .
2502	Optional . The action to modify .
2503	The list of source files .
2504	The list of service account keys .
2505	The list of service accounts .
2506	Optional . The support level for custom roles .
2507	Compute the policy delta .
2508	Optional . The examples of the distribution .
2509	Optional . Available features .
2510	The properties .
2511	Violation of quota failures .
2512	Optional . Type of private key .
2513	Optional .
2514	The details of the job .
2515	A list of binding delta .
2516	Required . Type of ServiceAccount .
2517	The roles of the user .
2518	The system parameters .
2519	Get the cache file path .
2520	Checks if a cache file exists
2521	Checks if a cache file exists .
2522	Saves cache to file
2523	Get cached data
2524	Retrieves data from cache .
2525	Checks if a blog is installed .
2526	Installs WordPress .
2527	Converts a multisite install .
2528	Installs a single site .
2529	Outputs the WordPress version .
2530	Get the checksums for a given version .
2531	Updates the blog .
2532	Get download URL .
2533	Returns an array of available updates .
2534	Download a package .
2535	Upgrade to the current version
2536	Build a table
2537	Render the admin head .
2538	Move meta box after title .
2539	Get post type .
2540	Get the title of the field .
2541	Render the meta box .
2542	Setup metabox .
2543	Get the class s meta information .
2544	Setup file .
2545	Setup meta data .
2546	Check if plugin is disabled .
2547	Creates a new instance of a property .
2548	Get a child property .
2549	Get an option value .
2550	Get post ID
2551	Generate an HTML ID .
2552	Generate the HTML name for the property .
2553	Check if slug matches slug
2554	Prepare value .
2555	Render the condition for the given rules .
2556	Set a single option
2557	Set a setting
2558	Setup default properties .
2559	Setup options .
2560	Setup options slug .
2561	Setup the default settings .
2562	Add attachment fields .
2563	Save post attachment
2564	Check if the entry is singleton .
2565	Get property meta value .
2566	Format a value .
2567	Retrieve a single property .
2568	Load the value of a property .
2569	Factory method for creating a store object
2570	Get a property s value .
2571	Determine if the current user can render .
2572	Render the row .
2573	Render hidden html .
2574	Render the label .
2575	Render the row .
2576	Render rules as JSON .
2577	Get field value .
2578	Decode a property .
2579	Get post data .
2580	Get pre - deep keys of an array
2581	Prepare post data .
2582	Prepare properties data .
2583	Sets the given data .
2584	Delete a cache entry
2585	Get the function for the current context .
2586	Retrieve a value from the registry .
2587	Update an item
2588	Recursively update the cache
2589	Get revision UI diff .
2590	Adds hidden meta boxes .
2591	Render a new post .
2592	Redirects to the referer .
2593	Setup the post type .
2594	Renames a post .
2595	Get the slug of the field .
2596	Get the source .
2597	Setup source .
2598	Setup the model .
2599	Initialize admin entries
2600	Add classes to the admin body .
2601	Renders a hidden form field .
2602	Get the entry type
2603	Add plugin row meta .
2604	Update front page type .
2605	Filters the settings page link .
2606	Get the templates for an entry .
2607	Prepare property value .
2608	Save post properties .
2609	Render the metabox .
2610	Save post .
2611	Overwrite post data
2612	Pre save callback .
2613	Save post meta boxes .
2614	Save post revision .
2615	Save post properties
2616	Restore a post revision .
2617	Check if a post ID is valid
2618	Displays the model .
2619	Display the rules by relation .
2620	Get rule slug
2621	Prepare conditions .
2622	Determine if the post type is allowed .
2623	Answers an array of classes for the body element .
2624	Returns an array of child page types .
2625	Get field labels .
2626	Get post type support .
2627	Remove post type support .
2628	Remove meta boxes .
2629	Setup hook .
2630	Setup post types .
2631	Setup page templates .
2632	Add MCE buttons .
2633	Remove buttons .
2634	Get the results from the database results .
2635	Load value for repeater
2636	Prepare properties .
2637	Prepare a property for JSON .
2638	Remove repeater rows .
2639	Render a JSON template .
2640	Render the repeater header .
2641	Render repeater rows .
2642	Register options .
2643	Get a setting .
2644	Prepare the response .
2645	Get the value of this field .
2646	Get list of users .
2647	Initialize the plugin .
2648	Load plugin textdomain .
2649	Require plugin files .
2650	Deactivate plugin .
2651	Determine if the current item is a string .
2652	Prepare the properties .
2653	Get the file ID from the given value .
2654	Get file value .
2655	Update file value .
2656	Bind a value to the container .
2657	Call a closure .
2658	Get class prefix
2659	Checks whether a service is singleton .
2660	Get a singleton instance by key .
2661	Remove an entry from the map .
2662	Override taxonomy labels
2663	Add page items menu
2664	Add post types menu
2665	Render admin view
2666	Autoload classes
2667	Get all registered sidebars .
2668	Get post type labels .
2669	Parse arguments .
2670	Parse post arguments .
2671	Parse term arguments .
2672	Get query arguments .
2673	Get the query result .
2674	Add help tabs .
2675	Adds a box .
2676	Call parent class
2677	Convert properties to array
2678	Get body classes .
2679	Returns list of registered boxes .
2680	Get a single property
2681	Get all properties .
2682	Merges two boxes .
2683	Sets up hooks .
2684	Render a tab .
2685	Load a link value .
2686	Prepare link array .
2687	Update a link value .
2688	Check if a taxonomy is allowed
2689	Render post stuff .
2690	Register post .
2691	Prepare response .
2692	Setup page fields .
2693	Get format arguments .
2694	Render a view file .
2695	Get a single option
2696	Convert property value
2697	Get the value of a condition .
2698	Get a deep value from a slug .
2699	Get value of condition
2700	Checks if a condition is equal to another .
2701	Checks if a condition is not equal to another .
2702	Checks if the condition is greater than the given value .
2703	Checks if a condition is not in a list .
2704	Checks if a condition is like a given value
2705	Get rule between values
2706	Checks if a condition is between two values .
2707	Check if a condition is not between two values .
2708	Get sort option .
2709	Get sort options
2710	Get posts .
2711	Sort the given values .
2712	Format a field value .
2713	Get the value of the given entry type .
2714	Lists all available plugin types .
2715	Render the tabs .
2716	Get the JSON ID .
2717	Get a layout by its slug .
2718	Load value for repeater
2719	Prepare layout properties .
2720	Render the hidden input .
2721	Render repeater row .
2722	Add taxonomy fields .
2723	Prepare taxonomy types
2724	Setup taxonomies hooks .
2725	Generate ajax url .
2726	Handle PAPI AJAX requests .
2727	Get entry type .
2728	Get posts .
2729	Get property .
2730	Get properties .
2731	Get rule result
2732	Get shortcode .
2733	Get terms .
2734	Gets a term .
2735	Renames a term .
2736	Manage post type columns .
2737	Handle custom column posts .
2738	Set sortable columns .
2739	Cleans up posts .
2740	Restrict page types .
2741	Format field value .
2742	Get taxonomy labels .
2743	Get taxonomy terms .
2744	Get term value .
2745	Prepare the given value .
2746	Search for a given search term
2747	Retrieves historical data for a given period
2748	Returns the quote for the given symbol
2749	Returns the exchange rate between two currencies .
2750	Returns exchange rates for given currencies .
2751	Fetches the quote for the given symbols .
2752	Get attributes for header .
2753	Render row .
2754	Render the appends .
2755	Get all images
2756	Set request parameters .
2757	Set default values
2758	Get the value of the given parameter .
2759	Make a group .
2760	Wrap the content of a group .
2761	Wrap a group .
2762	Adds a class to the options array .
2763	Register admin routes .
2764	Register assets routes .
2765	Register auth routes .
2766	Adds a process to the collection .
2767	Gets the process with the given status .
2768	Build out process tree .
2769	Optimizes the process .
2770	Count statuses .
2771	Count the results .
2772	Determine if the given class has failed .
2773	Get dependency tree for given class
2774	Outputs the given output .
2775	Write error to console .
2776	Initialize console .
2777	Get API version
2778	Returns the file s URL .
2779	Downloads the file .
2780	Select by partial text .
2781	Saves the given data to the legacy file .
2782	Save data .
2783	Load a legacy type
2784	Loads a legacy object from a file name
2785	Check if the socket is accessible .
2786	is Selenium server
2787	Returns the cloud service .
2788	Guesses the port for the given host and scheme .
2789	Detect cloud service by status .
2790	Build process .
2791	Get the excluded groups .
2792	Take a screenshot of a test .
2793	Get the path to a snapshot .
2794	Instantiate all listeners in the dispatcher .
2795	Get file path
2796	Quote an xpath attribute
2797	Optimizes the maximum distance of an out tree .
2798	Cast a string to a guess type
2799	Check the process timeout .
2800	Resolve the result of the process .
2801	Get list of executors .
2802	Setup capabilities .
2803	Sets custom configuration options .
2804	Retrieve configuration values .
2805	Dequeued processes without delay .
2806	Flush the process output .
2807	Return a list of items for the given type .
2808	Count summary .
2809	Update summary table
2810	Move summary table to given node .
2811	Update buttons .
2812	Add a favorite to a user .
2813	Remove a user s favorites .
2814	Toggle a user s favorite .
2815	Check if user is favorites for a given user .
2816	Return a list of favorited by user .
2817	Get the permissions for the user .
2818	Insert model to language files .
2819	Create view files .
2820	Create migration .
2821	Create events .
2822	Generate a stub file .
2823	Get stub path
2824	Check namespace .
2825	Check table availability
2826	Connect to one random server
2827	enable redis
2828	Connect to one server
2829	on one key server
2830	Call a Redis command
2831	sets the current database
2832	Delete multiple keys
2833	set a key
2834	Check if a key exists
2835	Type of a key
2836	expire a key
2837	Removes all keys from the cache
2838	Execute all todo
2839	Get the database size
2840	Add a Closure to execute
2841	Dispatch event .
2842	Add timing information .
2843	Replace the config placeholder in the event .
2844	Merges the tags of the event .
2845	Dispatches the memory usage .
2846	Dispatch request time .
2847	Create event from console event .
2848	Parse SRID
2849	Parse geometry .
2850	Parse point .
2851	Match coordinate value
2852	Parse point list
2853	Parse point lists
2854	Parse multi polygon
2855	Parse geometry collection
2856	Try to match a token .
2857	Handle syntax error .
2858	Creates an array of ResponseParts
2859	Get request time
2860	Creates the API client
2861	Send a command
2862	Returns the redirect URL
2863	Check render options
2864	Renders a view .
2865	Renders an image as base64
2866	Find documents .
2867	Finds a set of elements within an element .
2868	Set an attribute on a page
2869	Key event handler
2870	Generate a select_option field .
2871	Enable debug mode
2872	Set proxy
2873	Get the network traffic
2874	Get a list of all cookies .
2875	Set a cookie .
2876	Returns an array of javascript errors
2877	Get the error message of the browser .
2878	Compile a node .
2879	Compiles a route variable .
2880	Creates a Trie node .
2881	Flushes the text buffer .
2882	Lexes a number .
2883	Lexes a punctuation token .
2884	Lexes a quoted string .
2885	Lexes a single text character .
2886	Lexes a variable name .
2887	Adds a route to the collection .
2888	Get named route .
2889	Creates a new trie
2890	Normalize the name .
2891	Throws an exception if the current token is encountered .
2892	Returns current token .
2893	Returns the next token .
2894	Gets the next token if it matches the given type .
2895	Get the next token from the cursor .
2896	Add a child node .
2897	Add a child node to the trie
2898	Returns all child nodes .
2899	Add literal child node .
2900	Add variable child node .
2901	Build all routes .
2902	Adds a new route group .
2903	Maps a set of HTTP methods to a route .
2904	Apply the group attributes to the route builder .
2905	Apply the group constraints to the route builder .
2906	Apply middleware to the route builder .
2907	Apply group route templates
2908	Registers the rule factories .
2909	Recursively find match candidates .
2910	Build route .
2911	Maps a controller to a method .
2912	Set an attribute with the given name .
2913	Add many attributes .
2914	Add many constraints .
2915	Add many middleware .
2916	Add middleware .
2917	Parse a punctuation token
2918	Parse text node .
2919	Parse the tokens from the given AST .
2920	Parse variable .
2921	Parse variable rule .
2922	Checks if the route matches the given segment value .
2923	Group routes .
2924	Adds a route to the router .
2925	Dispatch the router .
2926	Compares request method .
2927	Compare domain with route domain .
2928	Compare uri against route
2929	Run the route .
2930	Arrange method parameters .
2931	Replace regex .
2932	Returns a regular expression for a parameter .
2933	Add a route that will respond to any route .
2934	Define a route parameter .
2935	Generate the URL for a route
2936	Prepare the request
2937	Returns the URI for the request .
2938	Validate API response .
2939	Validate API response .
2940	Validate API response .
2941	Gets a provider by name .
2942	Ensure that the response is not modified .
2943	Get details of an IP address
2944	Format details object .
2945	Get IPinfo details from IP address .
2946	Set element in cache
2947	Remove elements from the queue
2948	Make a POST request
2949	Get error html
2950	Group routes .
2951	Parse path .
2952	Check if path is variable route .
2953	Removes variable from the cache
2954	Set the map tree
2955	Get redirect URL
2956	check request middleware
2957	Run controller action
2958	init database connection
2959	Checks if header is valid .
2960	Get header by key
2961	Returns the last inserted row of data
2962	Get DI params
2963	Make a singleton instance
2964	Get a singleton instance
2965	Register an abstract
2966	Get instance of class
2967	Get instance with singleton
2968	run a class method
2969	Run the application .
2970	Initialize the database
2971	Add a pipe .
2972	create redis client
2973	Subscribe to a channel
2974	Subscribe to multiple channels .
2975	Resets the query
2976	Wrap the prepare SQL
2977	Execute prepared statement
2978	Bind parameters
2979	Wraps a table name
2980	Wrap a row
2981	Construct a condition
2982	Store the built - in array of build_attributes .
2983	Re - store build attributes
2984	Execute a sub - builder
2985	Sets select columns
2986	Sets a WHERE condition
2987	Adds a WHERE condition
2988	set where in
2989	Set where between condition
2990	Where null condition
2991	Adds a where condition
2992	Where Exists
2993	Set where in condition
2994	Sets the group by
2995	Adds a HAVING clause to the query .
2996	Adds a HAVING condition to the query .
2997	Set the order by clause
2998	Join a table
2999	Select from subquery
3000	Paginate the result
3001	Executes the SELECT query and returns all rows .
3002	Returns the first row of the result set
3003	Get a list of values from a field
3004	Executes a SQL query .
3005	Prepare a SQL statement
3006	Start a transaction .
3007	Handle exception .
3008	Generate an id .
3009	Generate a random id .
3010	Generate random string
3011	Normalize a DSN
3012	Creates a DQL object
3013	Evaluate an expression
3014	Start a transaction
3015	Commits current transaction
3016	Rollback a transaction
3017	Get last insert ID .
3018	Reset custom tag .
3019	Consume a SQL code .
3020	Escape soft escaped characters
3021	Render expression
3022	Get debug query
3023	Executes the query and returns all results .
3024	Get one row from the result set
3025	Get a single row from the result set
3026	Set the main table of the query
3027	Add a WHERE clause to the query .
3028	Render a condition
3029	Set the group for the route .
3030	Set field value .
3031	Add one or multiple options
3032	Set order of results
3033	Set template mode .
3034	Set the limit for the current template
3035	Parse a quoted string
3036	Checks if a string matches a regular expression .
3037	Creates the error message .
3038	Checks if a string starts with another string .
3039	Returns an array of variables matching the given value .
3040	Check if variable has been expanded .
3041	Fetch a variable expansion .
3042	Fetch the symbol symbol for a variable .
3043	Splits the variable default value into an array .
3044	Parse a variable .
3045	Parse the default value of a variable .
3046	Check if a variable exists
3047	Get a variable
3048	Parse a key .
3049	Parse content .
3050	Parse raw content
3051	Parse a CSV line .
3052	Parse export line
3053	Parse key - value pair
3054	Get the content of a specific key
3055	Start a task .
3056	Start a workflow
3057	Find a workflow .
3058	Returns the timestamp and duration of the buffer .
3059	Get class properties .
3060	Configures the Sitemap manager .
3061	Fix the sitemap configuration .
3062	Add a source .
3063	On block event .
3064	Returns the root menu .
3065	Returns an array of fonts .
3066	Get icon map
3067	Get CSS for all fonts .
3068	Hash a password
3069	Upgrade a password from a version1 .
3070	Execute the command
3071	Write SMKE credentials
3072	Get config array
3073	Checks if the current URI is filtered .
3074	Register commands .
3075	Find all available templates .
3076	Find all templates in a bundle .
3077	Execute a command .
3078	Returns a new instance of the current string
3079	Sanitizes a string for removing tags
3080	Replace the first occurrence of the string in the string
3081	Replace the last occurence of the string
3082	Returns a possessive .
3083	Get a new string segment
3084	Returns whether the collection contains a given value .
3085	Generate hash string
3086	Decrypt the response
3087	Encrypts a string with the given key
3088	Decrypts a string
3089	Generate hash string
3090	Decrypts the transaction data .
3091	Encrypts the hash of the payment .
3092	Add range .
3093	Add a new modifier
3094	Adds a range of pages .
3095	Adds a raw source .
3096	Adds a file .
3097	Adds files to the archive .
3098	Unserializes a LinkedCRS from an array .
3099	Set optional constructor arguments .
3100	Creates an exception for an invalid value .
3101	Creates an exception for an invalid property .
3102	Unserializes the named CRS object from JSON .
3103	Get the config path .
3104	Get the application namespace .
3105	Loads the cache .
3106	Creates a new master node .
3107	Get the native balance of the wallet .
3108	Get the native balance of the wallet .
3109	Get the balance value for a given asset .
3110	Get a balance for a custom asset
3111	Checks if a custom asset can be stopped
3112	Converts entropy bytes to hexadecimal .
3113	Converts a bitstring to hexadecimal string .
3114	Converts a mnemonic to an entropy string .
3115	Authorize a trustline .
3116	Revokes a trustline .
3117	Convert this object to XDR format .
3118	Decodes an opaque variable .
3119	Encode an optional value .
3120	Returns an array of unique bucket hashes
3121	Checks if account exists
3122	Sets whether authentication is required .
3123	Sets whether authentication can be used for authentication .
3124	Get the public key checksum .
3125	Decode a 16 - bit string .
3126	Parse raw data from raw data
3127	Sign the transaction
3128	Submits a transaction
3129	Parse patches from text
3130	Convert patches to text .
3131	Add context to a patch
3132	Deep clone a set of patches
3133	Bitap score .
3134	Convert a pattern to alphabet
3135	Get pretty html
3136	Convert to delta .
3137	Generate a diff from a delta string .
3138	Returns the levenshtein distance between two diffs .
3139	Compute the difference between two strings .
3140	Performs a diff between two lines .
3141	Bect two lines
3142	Returns the common prefix of two strings .
3143	Returns the common suffix of two strings .
3144	Check if two strings overlap between two strings .
3145	Check if two strings match .
3146	Performs the best match at the given index .
3147	Converts two lines to two chars .
3148	Get the recipients for the given notification .
3149	Get Laravel version .
3150	Register Pug compiler .
3151	Get plugin s config .
3152	Initialize the instance .
3153	Get the Pug .
3154	Get the cache path .
3155	Get an option .
3156	Determine if the given path is expired .
3157	Extract path from request
3158	Get amocrm client
3159	Get B2B family instance .
3160	Generate hash string
3161	Resolve a template file .
3162	Render a file .
3163	Extract options from a list of extensions .
3164	Remove options from the renderer .
3165	Resets the default options .
3166	Get a renderer instance .
3167	Add filter .
3168	Adds a keyword .
3169	Generate a textual cache directory from a source .
3170	Run the facade .
3171	Yield methods .
3172	Lists available methods
3173	Answers an array of errors for the given record .
3174	Returns a list of available meta items
3175	Mark list as duplicated
3176	Find duplicates in the list
3177	Remove empty attributes from list
3178	Process a single record
3179	Handle all releases .
3180	Get elapsed time
3181	Read all commands from the queue
3182	Converts an array of arguments to a string .
3183	Get and validate and validate arguments
3184	Throws exception if command is not supported .
3185	Registers the SPL autoloader .
3186	Unregister autoloader
3187	Get rediska path
3188	Returns a list of connections by key name .
3189	Get a connection by channel name .
3190	Get a list of channels by connection
3191	Retrieves a list of values from Rediska
3192	Set a configuration value
3193	Throws exception if transaction is not supported .
3194	Creates a queue
3195	Delete a queue
3196	Count the number of items in the queue
3197	Sends a message to the queue
3198	Receive messages from Redis
3199	Deletes a message
3200	Get total elapsed time
3201	Set a field to the store
3202	Set field value
3203	Increment a field
3204	delete a field
3205	Writes data to cache .
3206	Subscribe to a channel
3207	Publish a message
3208	Add a message to the buffer .
3209	Throw exception if redis is not supported
3210	Called to catch unserialization notice
3211	Add a queue
3212	Remove a queue
3213	Get the list of queues
3214	Watch a set of keys
3215	Unwatch all events
3216	Adds a command to the Redisk
3217	Create a new post
3218	Show all posts
3219	Factory method .
3220	Add a value to the set
3221	Get set length by score
3222	Get objects by score
3223	Remove objects by score
3224	Increment the score of a set
3225	Get set by rank
3226	Removes a set by rank .
3227	Return the rank of a given value
3228	Returns the result of a set of sets
3229	Intersect sets
3230	Returns an array of results as an array
3231	Set data from array
3232	Set Redisk Name
3233	Get a connection by key name
3234	Returns an array of connections
3235	Set Rediska connection
3236	Subscribe to Rediska
3237	Returns a Rediska_Config object .
3238	Set the key distributor
3239	Returns a serializer instance
3240	Returns a command object
3241	Returns the lowercase command name
3242	Execute all commands .
3243	Adds a command to the pipeline
3244	Writes the command to the connection .
3245	Sets the response callback
3246	Transforms a multi - bulk command array into a reply string .
3247	append to list
3248	Prepend to list
3249	Truncate the list
3250	Set value to index
3251	Inserts a value after a given value
3252	Inserts a value before another list
3253	Insert a value into the list
3254	Remove a value from the list
3255	Shift an item off the queue
3256	Shift from queue
3257	Remove a key from the list
3258	Pop from list
3259	Store data from array
3260	Load data from Rediska
3261	Save data to Redisk
3262	Remove a set of tags
3263	Cleans the cache
3264	Set cache directives
3265	Get set of sets that are not matching tags
3266	Retrieves information about a cache entry
3267	Collect expired tags
3268	Add a value to the set
3269	Remove a value from the set
3270	Moves a value to a set
3271	Compares this set with another set of sets
3272	Associates this set with another set of sets
3273	Compare two sets
3274	Retrieve Rediska instance
3275	Set the value of the key
3276	Set value and expire
3277	Set a bit
3278	Get or set a value for a key .
3279	Renders a list of followers .
3280	Renders a list of users following the given user .
3281	Follow a user
3282	move object to database
3283	Sets the expiration time of the cache entry
3284	Get Rediska instance
3285	Sets the stream mode .
3286	Add a rediska
3287	Get all instances
3288	Get an instance of Rediska
3289	Increment the value of a subject
3290	Reset a subject
3291	Get bucket name
3292	set multi increment transaction
3293	Set the get count part of a transaction
3294	Creates a socket connection .
3295	Returns the read buffer
3296	Reads data from Redis .
3297	Read a single line from Redis server .
3298	Sets the read timeout .
3299	Returns the stream context
3300	Read data from the socket .
3301	Validates a nonce .
3302	Declare and bind a queue to an exchange .
3303	Acknowledge a message
3304	Nack a message
3305	Get message properties .
3306	Start the daemon .
3307	Closes the daemon .
3308	Builds a new exception for an exception .
3309	Builds the queue handler
3310	Handle sync message
3311	Get the appropriate driver for the given connection
3312	Rejects a message .
3313	Closes the connection .
3314	Consume a message .
3315	Replace the model name .
3316	Qualify class name .
3317	Process request .
3318	Create a new row .
3319	Convert array to json .
3320	Edit action .
3321	Remove action .
3322	Returns true if the user is logged in .
3323	Render document .
3324	Read a string from the buffer .
3325	Get all achievement percentages for a given game .
3326	Closes the socket
3327	Receive a single packet from the server .
3328	Sends a data packet
3329	Get reply from master query
3330	Executes a RCON command .
3331	Retrieve RCON challenge
3332	Send RCON command
3333	Connect to the socket .
3334	Get all servers from the server .
3335	Fetches the data from the database .
3336	Converts a Community ID to Steam ID .
3337	Converts a SteamID to a Community ID .
3338	Resolve a user s SteamID URL
3339	Returns a list of user s friends .
3340	Fetch all games linked to this player .
3341	Returns a list of all the groups in this user .
3342	Get the Steam ID of the user .
3343	Get the most recent playtime for an application
3344	Get the total playtime for an application
3345	Fetches the profile data from the API .
3346	Rotate the IP address
3347	Initializes the socket .
3348	Authenticates the rcon server
3349	Connect to UDP server .
3350	Creates a new instance .
3351	Get a cached instance .
3352	Check if an item is cached .
3353	Caches the cache .
3354	Return an array of cache ids .
3355	Initializes the socket .
3356	Authenticate to the server .
3357	Closes the connection .
3358	Receives data from the socket .
3359	Selects stream resources
3360	Sends data to the socket .
3361	Get all news for an app
3362	Returns an array of class ids .
3363	Returns the number of members in the pool .
3364	Returns an array of members
3365	Fetch the members of the specified page .
3366	Internal fetch function .
3367	Get item schema .
3368	Fetch the inventory items from the database
3369	Get all of the bots that are equipped .
3370	Retrieves a list of golden gates
3371	Set the API key
3372	Queries the Steam API .
3373	Send a SteamPacket
3374	Get the list of players
3375	Handle a response for a specific request type
3376	Update the ping counter
3377	Update the players status
3378	Add information to the player .
3379	Get leaderboard by id
3380	Get leaderboards for a game
3381	Load the leaderboards for a game .
3382	Get the game leaderboard entry for the given steam id .
3383	Retrieves a range of entries from the leaderboard
3384	Load the data from the steam
3385	Loads the data for the given steam id .
3386	Parse the leaderboard entries .
3387	Create a SteamGame object from the game data .
3388	Checks if an application is up to date .
3389	Get current player count
3390	Get user stats for a given user .
3391	Show work order
3392	Store a newly created event .
3393	Show event .
3394	Update the specified event .
3395	Remove the specified event .
3396	Show work order .
3397	Displays a form to edit a work order .
3398	Update an existing WorkOrder .
3399	Get take action from work order .
3400	Take parts of work .
3401	Get stock .
3402	Save parts to the inventory .
3403	Show the work request .
3404	Show the form for editing a work request .
3405	Update the work request in storage .
3406	Remove the specified work request .
3407	Scope a query to a given location .
3408	Store a new report .
3409	Show a form to create a work order
3410	Store a work order .
3411	Show work order .
3412	Show form for attachment
3413	Update an attachment .
3414	Destroy an attachment .
3415	Show a form to create a report .
3416	Get the icon attribute .
3417	Display stock movements .
3418	Show stock movement .
3419	Rollback an item .
3420	Get status attribute .
3421	Get revised priority attribute .
3422	Close all pending sessions .
3423	Determine if the current user is logged in .
3424	Get started time label
3425	Returns label for the report
3426	Mark the job as completed .
3427	Generate a table of work orders .
3428	Show a form for a status .
3429	Display the list of priorities .
3430	Store a request .
3431	Displays a form to edit a priority
3432	Update a priority .
3433	Scope query for stock .
3434	Scope by SKU .
3435	Get current stock value
3436	Get theRevised metric name .
3437	Get operator from string
3438	Scope a query .
3439	Get file path attribute .
3440	Display statuses .
3441	Store status .
3442	Show status form
3443	Update status .
3444	create a new variant
3445	Store a new item .
3446	create a report
3447	Store a report .
3448	Table of work orders .
3449	Table of work orders .
3450	Render the work order sessions .
3451	Show a form for a work order .
3452	Render comment form .
3453	Handle uploaded files .
3454	Render assets table .
3455	Create a form for an asset .
3456	Return a table of inventory items .
3457	Show stock .
3458	Formular form .
3459	Generate inventory sidebar .
3460	Store a work order .
3461	Update the job attachment .
3462	Return a table with metrics .
3463	Generate a table of history records .
3464	Store a newly created image .
3465	Show image .
3466	Update the specified attachment .
3467	Display all metrics .
3468	Store a metric .
3469	Displays a form to edit a metric
3470	Display assets .
3471	Store a newly created asset .
3472	Displays a form to edit an asset
3473	Update the specified asset .
3474	Scope id .
3475	Return response .
3476	Retrieve an input parameter .
3477	Get the select hierarchy for a node .
3478	Get rendered node options
3479	Boot the view .
3480	Delete the attachment .
3481	Display stock .
3482	Show stock form
3483	Store stock .
3484	Show stock .
3485	Show stock form
3486	Update stock .
3487	Delete a stock .
3488	Display a specific metric .
3489	Show metric creation form .
3490	Store a newly created meter .
3491	Show a meter .
3492	Edit a meter .
3493	Update the meter in storage .
3494	Remove the meter from asset .
3495	Store a work order .
3496	Update a work order notification .
3497	Get started_at
3498	Format completed_at
3499	View all work orders .
3500	Form for comment .
3501	Get hours in seconds
3502	Format the start date
3503	Format event end date
3504	Format event end time
3505	Format the event frequency
3506	Returns the frequency of the event
3507	Get frequency of recurring event
3508	Show event tags .
3509	Store a new Inventory stock .
3510	Update the stock in storage .
3511	Remove the stock .
3512	Table for work orders .
3513	Generate a form for attachments .
3514	Attempt to authenticate the user .
3515	Handle the authenticated user .
3516	Handle LDAP user authentication .
3517	Triggers when the inventory is deleted .
3518	Executed when inventory is restored .
3519	Generate a table of priority orders .
3520	Show a form for a priority .
3521	Render a table for a work order .
3522	Formular form .
3523	Form for put action .
3524	Remove the specified Inventory item .
3525	Create a flash message .
3526	Create a work order .
3527	Store a work order .
3528	Display a listing of the eventable .
3529	Store a newly created event .
3530	Show event .
3531	Update the specified event .
3532	Remove the specified event .
3533	Scope for category
3534	Show the login form .
3535	Store a manual asset .
3536	Show the manual .
3537	Update the specified manual .
3538	Store work order .
3539	Detach a work order .
3540	Store a work request in storage .
3541	Delete a work request .
3542	Show stock view
3543	Show Stock Form
3544	Process a part of a product .
3545	Show stock form
3546	Handle PATCH request .
3547	Display the work requests .
3548	Displays a form to edit a work request
3549	Handle an update request .
3550	Show create form .
3551	Store a newly created category in storage .
3552	Show the form for editing the category .
3553	Update the specified category in storage .
3554	Remove the specified resource from storage .
3555	Table of work orders .
3556	Table of work orders .
3557	Triggers when a Inventory is deleted .
3558	Restore stock .
3559	Display the inventory .
3560	Store new Inventory .
3561	Show inventory item
3562	Edit an existing Inventory
3563	Table for Inventory .
3564	Render a table of stock movement .
3565	Form for Inventory .
3566	Show inventory bar .
3567	Table for work orders .
3568	Table of inventory .
3569	Build a navbar sidebar .
3570	Display a listing of work orders .
3571	Start a work order .
3572	End a work order .
3573	Get the change attribute .
3574	Store a newly created note .
3575	Show a note .
3576	Update the specified note in the inventory .
3577	Remove the specified note .
3578	Get the last movement attribute .
3579	Get last movement by attribute .
3580	Get quantity metric .
3581	Bulk put - back for a work order .
3582	Render back - all back - all products for a work order .
3583	End a work order .
3584	Table of work requests .
3585	Show a form for a work request .
3586	Store a work order .
3587	Remove a worker from the work order .
3588	Render datalist .
3589	Render a select option .
3590	Get appendage .
3591	Render a component .
3592	Get component data .
3593	Register the blade directives .
3594	Open model .
3595	Format label .
3596	Create a reset button .
3597	Create a submit input .
3598	Retrieve a request parameter .
3599	Create html link .
3600	Create a link .
3601	Render a listing element .
3602	Convert an array of attributes into a string .
3603	Register the html builder class .
3604	Register the form builder class .
3605	Create a search input .
3606	Create a datetime input .
3607	Create a file input field .
3608	Remove the first line from a string .
3609	Load a locale .
3610	Parse a locale file
3611	Get all patterns for a given word .
3612	Unify locale .
3613	Tokenize a string
3614	Process input string
3615	Set options
3616	Add a dictionary to the registry
3617	Get hyphenation patterns for a given word
3618	Set filters .
3619	Add a filter
3620	Set tokenizers
3621	Add tokenizer
3622	Creates a new Hyphenator instance
3623	Get text
3624	Get pattern
3625	Set options .
3626	Get the hyphenator options .
3627	Add a dictionary
3628	Add filter .
3629	Add tokenizer
3630	Get tokenizers .
3631	Get dictionary .
3632	Get filters .
3633	Hyphenate a string .
3634	Get hyphenation pattern
3635	Get pattern for given token .
3636	Set the default home path
3637	Get the default home path
3638	Set the home path
3639	Creates a new Hyphenator instance .
3640	Autoload class
3641	Replaces a token in the registry
3642	Returns the token with the given key
3643	Returns the merged pattern
3644	Get filter by key
3645	Filter the tokens
3646	Fetch the access token from the authorization code .
3647	Migrate orders .
3648	Migrate the order .
3649	Migrate shipping costs .
3650	Migrate order calculation
3651	Returns a list of products that have been bought .
3652	Ensure that the default page is set .
3653	Make a payment .
3654	Get gateway data
3655	Creates a payment for the given gateway
3656	Complete order payment
3657	Check if the order can be placed
3658	Return the name of the country
3659	Set the payment method
3660	Returns selected payment method
3661	Send a confirmation email
3662	Send an admin notification email
3663	Sends an email to the customer .
3664	Build the URL for a buyable action
3665	Redirect to the cart page
3666	Show the index page
3667	Returns HTML for debugging purposes .
3668	Get the filter string for this object
3669	Save the submitted form
3670	Save the user s details
3671	Get a modifier for the current order
3672	Get the unit price
3673	Calculate the total of the item
3674	Get the unique data of this model
3675	Calculate the totals for the order
3676	Get the product variant .
3677	Return a string representation of the address
3678	Gets the address of the node .
3679	Get the cart form
3680	Get the value of the weight field
3681	Get the weight of the product .
3682	Return the sum of the specified field
3683	Get the subtotal of the cart
3684	Publish product attributes
3685	Get the viewer for the given action
3686	Get the product for this product .
3687	Update the fields for the extended object
3688	Gets a variant by its attributes
3689	Generate variants for a given attribute type
3690	Deletes all owned records
3691	Get a component by type
3692	Get form fields
3693	Validates data against this component
3694	Get the data for this component
3695	Sets data for all components .
3696	Get the dependencies of a component
3697	Get current order
3698	Set current cart
3699	Find or create an Order
3700	Add an item to the order
3701	Remove a Buyable from the current order
3702	Remove an order item from the current order .
3703	Set quantity of buyable
3704	Update the quantity of an order item
3705	Find or make a buyable item
3706	Get an order for the given Buyable
3707	Archive the current cartid
3708	Calculate order value
3709	Generate a price field for display
3710	Find an image by filename
3711	Set the content of an object
3712	Answers a list of country codes .
3713	Returns a single country name
3714	Translate a country code to its name
3715	Get the current shopping cart
3716	Convert an array of values to a list of values
3717	Get a dropdown field
3718	Return a list of products that are visible to this category
3719	Get all child categories of this product category
3720	Get the child categories of this product
3721	Answers the groups menu for the product category .
3722	Get the nested title of the menu item .
3723	Returns the form for the edit order
3724	Display an order
3725	Find the next step
3726	Answers a list of products for the order .
3727	Returns the edit form
3728	Returns a subset of the given fields .
3729	Modifies the discount based on the order
3730	Set up steps .
3731	Redirect after init
3732	Returns true if the current action is the current step .
3733	Get position of action
3734	Find a link to the current page .
3735	Get a list of products
3736	Trim the decimal value
3737	Setup the fields for the product page .
3738	Answers an array of options for the category .
3739	Get category options without parent
3740	Answers an array of category IDs for the product .
3741	Get the selling price .
3742	Returns the product image
3743	Submits the payment
3744	Processes the payment form
3745	Cancel an order
3746	Get the list of card fields for the given gateway .
3747	Store an order in the session .
3748	Get the order IDs from the session .
3749	Get order by id
3750	Get the order actions form
3751	Validates member data
3752	Get a member by unique identifier .
3753	After the Member is logged in
3754	Get all of the past orders in the current member
3755	Generate a hidden field for the quantity link
3756	Get a list of existing address fields
3757	Returns a list of fields used in the order
3758	Get the default search context
3759	Gets a list of related objects
3760	Calculate order total
3761	Returns the class identifier for the given class name .
3762	Get the total number of grand paid .
3763	Get the link to the checkout page
3764	Determine if the payment can be paid
3765	Check if the member can be deleted
3766	Determine if the current user can view this page .
3767	Get the full name of the receiver
3768	Answers the billing address for the shipping address .
3769	Generate a reference for the order
3770	Handles before writing
3771	Deletes all related orders
3772	Provides an array of translation entities .
3773	Renders the field
3774	Generate a list of editable items
3775	Get the link to the account page .
3776	Get the link to the order page .
3777	Browse all available packages .
3778	Lists all installed packages .
3779	Gets the path of a package .
3780	Update packages .
3781	Uninstall a package .
3782	Get a Composer instance .
3783	Get a list of all installed packages .
3784	Get the Composer package index repository .
3785	Displays a list of packages .
3786	Gets a package by its short name .
3787	Get an array of installed packages .
3788	Get installed package by name .
3789	Get package name from a directory .
3790	Get the path to the composer . json file .
3791	Creates a default composer . json file .
3792	Get the raw git version .
3793	Guesses the version constraint from a given tag .
3794	Get the path of composer . json .
3795	Set the object of this object
3796	Load custom config
3797	Run the delete command .
3798	Process all jobs .
3799	Queue a job .
3800	Copies a job to the Descriptor .
3801	Get the next job in the queue .
3802	Check health of a queue
3803	Check if the default jobs are set
3804	Restart a stalled job
3805	Initialise a job
3806	Check if the time limit has been started .
3807	Checks if memory is too high .
3808	Parse memory from memory
3809	Get the filter for the job list .
3810	Run a single queue
3811	Process the job queue
3812	Queue a task
3813	Logs the status of a descriptor
3814	List all jobs
3815	Refresh the descriptor for this job
3816	Check if the queue is healthy
3817	Pause the job
3818	Resume this job
3819	Activate the queue on the queue
3820	Get the job directory
3821	Cleans up a job
3822	Get saved job messages
3823	Get the last saved job
3824	Get the string representation of the job type .
3825	Answers an array of type values for the job type .
3826	Setup the sitemap .
3827	Prepare the page for restart
3828	Complete the sitemap
3829	Run a queue of jobs
3830	Handle action .
3831	Get the title of the publish page
3832	Set up the tree
3833	Processes the page
3834	Get the queue from the request .
3835	Casts an ActiveRecord
3836	Index action .
3837	Saves the content of the css file
3838	Write data to shared memory
3839	Read data from shared memory
3840	Lists all sidebars .
3841	Lists all widgets .
3842	Adds a widget .
3843	Updates a widget .
3844	Moves a widget .
3845	Deactivates a widget .
3846	Deletes a widget .
3847	Resets all sidebars .
3848	Validate sidebar ID .
3849	Check if a widget exists .
3850	Get widget data .
3851	Move a sidebar widget .
3852	Get a single widget
3853	Sanitize widget options
3854	Generate a random integer .
3855	Generate a random string .
3856	Encode a string
3857	Decode a string
3858	Add a generator path
3859	Remove a generator path .
3860	Get the generator
3861	Load all available generators .
3862	Show form element
3863	Set read - only attribute
3864	Open form .
3865	Add prefix .
3866	Add suffix .
3867	Assemble addons .
3868	Sets the size class .
3869	Unscrub a message
3870	Client temperature FF
3871	Returns a list of nodes in the session .
3872	Returns the properties of a session .
3873	Evaluate a path
3874	Write an array of keys
3875	Get the webdriver information for the current user .
3876	Returns the aperture .
3877	Returns the author of the invoice .
3878	Returns the header of the message .
3879	Returns the Credit Credit .
3880	Returns the source of the notification .
3881	Returns the job title
3882	Returns the ISO language code .
3883	Returns the focus distance .
3884	Returns the width of the Terminal .
3885	Returns the height of the movie .
3886	Returns the title of the attachment .
3887	Returns the caption .
3888	Returns the copyright .
3889	Returns the keywords .
3890	Returns the camera name
3891	Returns the horizontal resolution .
3892	Returns the vertical resolution .
3893	Returns the version of the device .
3894	Returns the length of the document .
3895	Returns the creation date .
3896	Returns the color space .
3897	Returns the MIME type of the response .
3898	Returns the file size in bytes .
3899	Returns the orientation of the image .
3900	Returns the server s GPS value .
3901	Extracts the GPS coordinate from the given components
3902	Set the path to the tool .
3903	Get tool path
3904	Execute cli command
3905	Hydrate an object .
3906	Extract the GPS coordinates from a string
3907	Get mapper instance
3908	Get hydrator .
3909	Set options .
3910	Add required section
3911	get iptc data
3912	Factory method .
3913	Generates the prefix for the query .
3914	Normalizes the configuration .
3915	Translate a list of strings .
3916	Runs the queue
3917	Process all URLs in the queue
3918	Collects the changes for the given object
3919	Process all the URLs in the queue
3920	Gets module extensions garbage collector .
3921	Filters extensions by module
3922	Returns module blocks
3923	Get module settings
3924	Checks if metadata version is supported .
3925	Checks if a class exists .
3926	Check module version
3927	Check extended classes .
3928	Check template blocks
3929	Check module settings
3930	Check module templates
3931	Checks if module controllers are valid .
3932	Check module files
3933	Check module events
3934	Parse module ids .
3935	Parse shop config
3936	Returns array of available module ids
3937	Checks if plugin is enabled .
3938	Template variable getter . Returns module object
3939	Returns module cache
3940	Returns module installer object
3941	Fix a module
3942	Clean up module extensions .
3943	Adds module templates
3944	Adds module files
3945	Adds module events
3946	Adds module extensions
3947	Add module version
3948	Returns the difference between two arrays .
3949	Adds module settings
3950	Set module controllers
3951	Adds extensions to current module
3952	Returns list of installed modules
3953	Returns rendered template
3954	Block template
3955	Get http driver .
3956	Get the available http transport driver .
3957	Returns an array of HTTP transport names .
3958	Sets the CA options for the curl .
3959	Get a PSR - 7 response object .
3960	Checks if the current user is allowed to redirect .
3961	Make an OPTIONS request .
3962	Make a HEAD request .
3963	Make a TRACE request .
3964	Make a PATCH request .
3965	Returns true if the given path matches the given glob expression .
3966	Get extra parameter value by key .
3967	Get combined filters from a list of glob expressions .
3968	Activate the plugin .
3969	Checks if the given path matches any glob expressions .
3970	Checks if a path matches a glob expression .
3971	Returns the shop source path .
3972	Creates the installer for the given package .
3973	Installs a package
3974	Updates package .
3975	Copies shop source from package to target directory .
3976	Copies configuration file from shop source .
3977	Copies the setup files to the package .
3978	Checks if shop config file is not configured .
3979	Copies files from source to shop .
3980	Get filtered files from a directory .
3981	Returns absolute file path from shop package .
3982	Update packages .
3983	Copy a package .
3984	Returns the package source path .
3985	Nest a flat file system structure .
3986	Get a flat file list iterator .
3987	Copies a directory .
3988	Copies a file to the destination directory .
3989	Generates models .
3990	Traverses a list of classes and subclasses .
3991	Convert schema to JSON - LD array .
3992	Adds breadcrumb list .
3993	Render all models .
3994	Set HTML by view .
3995	Generate the HTML for the given HTML
3996	Resolves a path .
3997	Determine if the expected .
3998	Determine if the given array exists .
3999	Assert that the HTTP status code matches the given status code .
4000	Assert that the HTTP body contains the given content .
4001	Asserts that status code is JSON .
4002	Asserts that the status code is valid .
4003	Asserts that a document is fetched .
4004	Asserts that a response is fetched .
4005	Assert that a list of data is fetched .
4006	Assert that a list of data is fetched .
4007	Asserts that the given identifiers are fetched .
4008	Asserts that a resource is created .
4009	Assert that the HTTP status code is empty .
4010	Asserts that a JSON API does not contain data .
4011	Assert that an error status matches the given status .
4012	Asserts that a response has an exact error .
4013	Asserts errors .
4014	Get document document
4015	Set expected type .
4016	Assert that the response matches the given content .
4017	Assert that the resource is updated .
4018	Assert that the resource is deleted .
4019	Assert that a resource is included .
4020	Assert that the document is included .
4021	Asserts that the document is met .
4022	Asserts that the document matches the given array of meta data .
4023	Asserts a list of links .
4024	Asserts that the response matches the given status code .
4025	Asserts that a resource exists .
4026	Asserts that an identifier exists in a document .
4027	Asserts that a document is exact .
4028	Asserts that a document is not exact .
4029	Asserts that a document is subset of a list .
4030	Asserts that a document is exact in a list .
4031	Asserts that a set of elements are in a list .
4032	Asserts that a document is in an array .
4033	Asserts that a document is in a list of identifiers .
4034	Asserts that the specified identifiers are in the given document .
4035	Asserts that a list contains a resource .
4036	Asserts that a list contains a set of hashes .
4037	Asserts that a list contains exact values .
4038	Asserts that an array contains a hash of hashes .
4039	Assert that a document is exact .
4040	Asserts that a document contains an error .
4041	Assert that an array contains an exact error .
4042	Creates a message from a string .
4043	Cast a value to a class .
4044	Create from JSON string .
4045	Decode a JSON string .
4046	Get a value from the document .
4047	Determine if the document has at least one of the given pointers .
4048	Assert that the given pointers exists .
4049	Assert that the given pointers does not exist .
4050	Compare two strings .
4051	Compare two arrays .
4052	Check if value is resource identifier .
4053	Sort an array .
4054	Checks if the given value is identifiable .
4055	Sends the request .
4056	Send a message to a user .
4057	Reply to a user .
4058	Set allowed types
4059	Adds a message to the buffer .
4060	Writes message to debug mode .
4061	Adds a message .
4062	Get the message count for a given type .
4063	Parse variables from single line .
4064	Get variables from single line array .
4065	Validate vars array
4066	Is all items in the collection?
4067	Aggregate all elements
4068	Sorts an array
4069	Convert to array .
4070	Get the keys of the collection .
4071	Zips the current iterator and returns a new iterator .
4072	Returns an array of values .
4073	Reduces the collection to a single value .
4074	Converts generic keys to a generic key .
4075	Returns a new group by the given criteria .
4076	Reduces an iterable to a new value .
4077	Creates a new reduction .
4078	Dump composer . json .
4079	Get extra key
4080	Escape a predicate .
4081	Parse an IRI
4082	Get term context from field type .
4083	Persists the cache if needed .
4084	Returns the content of a bundle .
4085	Normalize field items .
4086	Deletes a cache entry
4087	Create translated instance .
4088	Get the URI of an entity .
4089	Get typed data ids .
4090	Build a cache backend
4091	Fetch data from cache .
4092	Run a callable with given arguments
4093	Add error message .
4094	Asks a question
4095	Execute the query and return the inserted ID .
4096	Create a new fixture .
4097	Override values .
4098	Insert a new record into the database .
4099	Extracts the primary key from the table .
4100	Set the current user .
4101	Copy stub files .
4102	Configure variables .
4103	Serialize the additional data .
4104	Checks if the event is swatches type .
4105	Loads the watch type .
4106	Handle the command .
4107	Prepare the name of the database seeder .
4108	Find attribute option watch by option id and store id .
4109	Returns the entity attribute by attribute id and attribute set .
4110	Returns the attribute option for the given entity type and value .
4111	Get attribute option by attribute id .
4112	Create DatabaseSeeders folder .
4113	Make a seeder file .
4114	Initialize an attribute .
4115	Setup DB transaction .
4116	Loads the attribute with the passed ID .
4117	Set path .
4118	Add form params .
4119	Sends a mock .
4120	Execute the menu .
4121	Inject the params into the request
4122	Returns the attribute by attribute code .
4123	Tries to tear down the registry .
4124	Pre load attribute id .
4125	Publish records .
4126	Assert that the response contains the given content .
4127	Decode the response body .
4128	Assert that the response contains the given data .
4129	Bootstrap test .
4130	Get Drupal root .
4131	Get the path to the environment file .
4132	Read environment file .
4133	Publish all bundles .
4134	Load all database seeders .
4135	Get entity type by code
4136	Returns the entity type ID .
4137	Sends a HTTP request to the given URI .
4138	Prepare the URI .
4139	Accept a distributed trace payload
4140	End a transaction
4141	Set application name
4142	Set user attributes
4143	Start a transaction
4144	Converts the given URL to an internal URL .
4145	Prepares constructor arguments
4146	Appends exception suffix to subject .
4147	Wrap an exception .
4148	Parse a CSV file .
4149	Load attribute group by id .
4150	Returns the list of eavAttributeGroups by attribute set .
4151	Finds the attribute group by entity type and attribute code .
4152	Creates a lexer config
4153	Returns the eavAttributeOptionValue identified by the passed option ID and store id .
4154	Creates a file resolver for the given subject .
4155	Find all core configs .
4156	Gets the system logger .
4157	Creates and returns a plugin instance .
4158	Merges the given entity with the given attributes .
4159	Create number converter .
4160	Cast value by backend type .
4161	Returns the entity type code .
4162	Returns the attributes of the entity .
4163	Returns an array of eav user - defined attributes .
4164	Get EAV attribute by attribute code
4165	Returns an array of available categories .
4166	Retrieves the categories with the passed store view .
4167	Returns a specific header .
4168	Add a header to the message .
4169	Map attribute code by attribute code .
4170	Tries to tear down the source directory .
4171	Register an observer
4172	Registers a callback
4173	Get callbacks by type
4174	Imports a single row .
4175	Prepare the store view code .
4176	Returns the store id for the passed store code .
4177	Returns the root category of the store .
4178	Resolve the original column name .
4179	Returns the original data .
4180	Returns whether the row has the original data .
4181	Wrap the exception in the exception .
4182	Append exception suffix
4183	Get new file name
4184	Uploads a file .
4185	Deletes a file .
4186	Returns all eav entity types .
4187	Returns eav entity type by entity type code .
4188	Serializes an array .
4189	Unserializes a CSV string .
4190	Returns the target directory .
4191	Creates an export config object
4192	Initializes the instance .
4193	Unserialize the attributes
4194	Serialize the attributes
4195	Get a prepared statement .
4196	Initializes all prepared statements .
4197	Parse additional attributes
4198	Generate the path for the given entity .
4199	Resolve a reference
4200	Adds a value to the cache .
4201	Get value from cache .
4202	Flush the cache .
4203	Load an attribute set .
4204	Returns the list of eavAttribute sets for the passed entity type .
4205	Returns the eavAttributeSet for the passed entity type and attribute set name .
4206	Returns the eavAttributeSet for the passed entity type and attribute code .
4207	Creates an export adapter for the given subject .
4208	Quote a string
4209	Returns the url rewrite for the given entity type and id .
4210	Returns the url rewrite for the passed entity type and store id .
4211	Notifies all observers .
4212	Check row consistency .
4213	Checks whether the row has a specific value .
4214	Creates a subject .
4215	Creates a serializer instance .
4216	Returns the list of eavAttributes for the passed entity type and attribute set name .
4217	Returns the attributes for the passed option value and store id .
4218	Returns the list of eavAttributes for the passed user .
4219	Returns the list of eavAttributes for the passed entity type .
4220	Returns the list of eavAttributes for the passed entity type .
4221	Find one attribute by option value and store id .
4222	Prepare observers .
4223	Resolve a path .
4224	Creates a directory .
4225	Set an attribute
4226	Increase counter for given key
4227	Merge attributes recursively
4228	Creates a filesystem adapter .
4229	Returns the categories for the passed store view .
4230	Returns all available root categories .
4231	Create event emitter
4232	Prepare listeners .
4233	Remove directory recursively
4234	Returns the swift mailer .
4235	Initializes the source directory .
4236	Returns an array of cached files .
4237	Get the list of SQL statements .
4238	Creates the import adapter for the given subject .
4239	Prepare callbacks for a subject .
4240	Returns the global data .
4241	Loads a prepared statement .
4242	Creates a date converter for the given subject .
4243	Override an array of artefacts
4244	Append an array of artefacts .
4245	Gets the artefacts for a type and entity .
4246	Creates a new artefact .
4247	Exports the artefacts .
4248	Find all available link types .
4249	Find all image types .
4250	Convert date to ISO 8601 format
4251	Convert number to decimal .
4252	Execute the job .
4253	Get all pattern keys
4254	Resolve pattern values
4255	Resolve pattern value
4256	Prepare regular expression
4257	Prepare ok filename
4258	Check if two files are equal .
4259	Returns an array of valid filenames
4260	Check if a file should be handled .
4261	Cleans up a file
4262	Returns all available tax classes .
4263	Warm the cache for all eavAttributeOptionValues .
4264	Returns all store websites .
4265	Find all stores .
4266	Finds all vouchers by entity ids .
4267	Returns a list of categories by entity id .
4268	Find all available customer groups .
4269	Get primary key member name .
4270	Clears the row .
4271	Render blade view
4272	Register rest routes .
4273	Get collection params
4274	Sanitize end date
4275	Retrieve a list of events .
4276	Maps events to events .
4277	Define category translations
4278	Decode post title and content
4279	After save .
4280	Save the location
4281	Save additional locations
4282	Save event categories
4283	Save event groups
4284	Save event tags
4285	Save occurences
4286	Save post language
4287	Get an event by its original ID .
4288	Check the filters .
4289	Remove expired occurrences
4290	Remove deleted events
4291	Remove expired events
4292	Filter taxonomies .
4293	Delete empty taxonomies .
4294	Render the location list
4295	Save the location
4296	Get the revision manifest .
4297	Remove metaboxes
4298	Convert serialized data to string
4299	Implode multi - dimensional array
4300	Register post type
4301	Add a table column
4302	Set the columns for the table .
4303	Convert columns to lowercase .
4304	Callback for table columns content
4305	Save a term
4306	Activate a new group .
4307	Remove empty value
4308	Get empty values
4309	Remove post meta
4310	Save post type
4311	Check if attachment exists .
4312	Submit form callback
4313	Add event date arguments .
4314	Filter events based on a post date
4315	Get a single event date
4316	Determine the next occurrence of an event .
4317	Get closest element in array
4318	Parse start date
4319	Save points
4320	Enqueue events and scripts
4321	Enqueue frontend scripts
4322	Format a short date
4323	Import events .
4324	Imports the publishing group parser
4325	Checks if the database table exists .
4326	Create the database table for the integration .
4327	Check if an event manager exists
4328	Make API request .
4329	Get event occurrences
4330	Get Event Meta
4331	Limits a string .
4332	Get a list of latitude points .
4333	Update widget settings
4334	Handle ajax pagination .
4335	Get all events for a module
4336	Get the categories of a module .
4337	Returns an array of event categories
4338	Get a list of groups for a module
4339	Get the tags for a module
4340	Returns the age range for a given module .
4341	Callback for OAuth request
4342	Sanitize input
4343	Get single view data
4344	Get user groups
4345	Update event group value
4346	Get event content .
4347	Filter event content lead .
4348	Get custom content
4349	Register event categories
4350	Register event tags
4351	Register event groups
4352	Add import buttons .
4353	Import events .
4354	Accept or deny a post
4355	Create a tunnel .
4356	Verify tunnel .
4357	run a command
4358	Sets a signal handler
4359	Signal handler .
4360	Run process .
4361	Edit action for container .
4362	Creates a DcGeneral environment .
4363	Get a widget .
4364	Render a widget .
4365	Process the input .
4366	Process a single property .
4367	Hijack the post .
4368	Handle an event .
4369	Creates a new imagine driver .
4370	Configure Imagick settings
4371	Injects the settings of imagine .
4372	Handle the buildWidget event .
4373	Get the widget class for a property .
4374	Get the widget s options for a widget .
4375	Execute the form .
4376	Dispatch model relationship .
4377	Process input .
4378	Handle the prePersist event .
4379	Handle post persist event .
4380	Translate label .
4381	Build the field sets .
4382	Dispatch the submit event .
4383	Get the headline of the record .
4384	Persists the model .
4385	Configure the CAS server
4386	Parses the configuration array into an array .
4387	Configure CAS validation .
4388	Gets the value of an attribute .
4389	Checks if an attribute exists .
4390	Logout .
4391	Sets the status code .
4392	Get the key of the row .
4393	Check if current row is an integer .
4394	Returns array of fragments from current url
4395	Add multiple containers from an array
4396	Build the query .
4397	Wrap fake query with row count
4398	Get a fake model query .
4399	Generate an activation link from a key
4400	Assign user to key
4401	Check if key is valid
4402	Read Paging data from request .
4403	Register templates
4404	Register custom handlers .
4405	Handle an authorization error .
4406	Handle a custom validation exception .
4407	Handle a ModelNotFoundException .
4408	Pop the last element from the queue .
4409	Retrieves component list .
4410	Attach event handlers
4411	Make a request .
4412	Check if asset is available .
4413	Sync assets to database .
4414	Update expired packages .
4415	Creates a new client .
4416	Get the connection URL .
4417	Get the port from the configuration .
4418	Ensure that the entity managers are configured .
4419	Terminate a process
4420	Locks a theme .
4421	Unlocks a theme .
4422	Clone a book .
4423	Build the parameter value from the filter url
4424	Builds the parameter filter widgets .
4425	Returns an array of sorted tables .
4426	Check if table is configured
4427	Configure the database .
4428	Get all migrations .
4429	Run all migrations .
4430	Rollback all migrations .
4431	Resolve migration state .
4432	Get migration table instance .
4433	Render a table .
4434	Mount indent to serialized string .
4435	Sets the primary keys of the table .
4436	Creates a new table .
4437	Update the table .
4438	Drops the table .
4439	Renames the table .
4440	Execute the blueprint .
4441	Get migration files .
4442	Creates a filename for the file .
4443	Bootstrap the application .
4444	Load Laravel application .
4445	Load initializer .
4446	Loads Laravel argument resolver service .
4447	Set mailtrap configuration
4448	Fetch MailTrap messages from Amazon .
4449	Get the mailtrap client .
4450	Reboot the Laravel framework .
4451	Resolves class arguments .
4452	Opens a stream
4453	Retrieve information about a path
4454	Get stream stats .
4455	Check if a file exists
4456	Get a filename for a given stream .
4457	Release a URI .
4458	Handle a command .
4459	Check if empty node is empty .
4460	Expose all public methods
4461	Handle XRL request
4462	Call a procedure
4463	Renders the input .
4464	Enable a Server
4465	Extract annotations from doc comment
4466	Returns a list of available methods
4467	Get method signature
4468	Get method help
4469	Call multiple multicall
4470	Load a XRL class
4471	Get the current version .
4472	Prints the usage information
4473	Parse a boolean value
4474	Parse a file
4475	Parse command line arguments .
4476	Main entry point .
4477	Check if service is resolved .
4478	Get an XML writer .
4479	Finalizes the output .
4480	Get an XML reader for the given URI .
4481	Reads the node and returns it .
4482	Read a start tag from the reader .
4483	Read a closing tag from the reader .
4484	Parse a text node .
4485	Check type .
4486	Create a checkbox .
4487	Create email input .
4488	Creates a select box .
4489	Register all the sections .
4490	Register a section .
4491	Register settings fields .
4492	Registers the settings .
4493	Displays the captcha .
4494	Generate javascript link .
4495	Generate HTML code to display multiple captcha attributes .
4496	Build the html code for a captcha attribute .
4497	Upload an asset .
4498	Get a project .
4499	Get all projects .
4500	Create a template for a project .
4501	Get a template .
4502	Get all available templates .
4503	Register a job .
4504	Retrieve a job
4505	Get jobs by template
4506	Gets the current user
4507	Gets the personal library for the current user .
4508	Merges job values .
4509	Get a single LDAP user from LDAP .
4510	Sets the LDAP configuration definition .
4511	Checks for LDAP error code .
4512	Set allowed types .
4513	Set LDAP credentials if needed .
4514	Switch domain if needed .
4515	Switch domain back to current domain .
4516	Throws an exception if the exception occurred .
4517	Get username password token .
4518	Add domain to the token .
4519	Transform value for LDAP .
4520	Get properties of an object .
4521	Set the LDAP object for a property .
4522	Set the ldap value for a property .
4523	Add the LdapPass factory
4524	Get the ldap values for the choice .
4525	Get objects by query .
4526	Get all operations .
4527	Set user roles .
4528	Check if a group belongs to the given roles .
4529	Check if a group with the given attribute exists in the collection .
4530	Logs a LogOperation .
4531	Save Media
4532	Update media by id .
4533	Get media by group .
4534	Remove a media .
4535	Parse options .
4536	Get file name .
4537	Check if file exists
4538	Rename the file
4539	Get the alt .
4540	Get title .
4541	Get field name
4542	Get the current weight .
4543	Save media to database .
4544	Remove existing media
4545	Put file into storage
4546	Clone folder
4547	Make a directory recursively .
4548	Clone a media .
4549	Register the pricing configuration .
4550	Register the bindings .
4551	add custom directives
4552	Get the config .
4553	Create a new svg
4554	Translate item variable
4555	Transform a value into a QTI string .
4556	Add a variable to the output .
4557	Check if variable is a QTI file placeholder .
4558	Test whether variable is QTI file .
4559	Convert a value to a QTI datatype .
4560	Create new revision from object .
4561	Returns the difference of two arrays .
4562	Set IP address
4563	Set language .
4564	Set the origin of the response .
4565	Resolve origin
4566	Set the timestamp .
4567	Pre save method .
4568	Process the schedule .
4569	Pre update method .
4570	Check if slug is unique
4571	Generate unique slug .
4572	Set the slug .
4573	Set the creation date .
4574	Set last modified date .
4575	Set route options .
4576	Set master model .
4577	Returns a list of children .
4578	Get the node s siblings .
4579	Load an object from source .
4580	Load an object from the cache .
4581	Add model to the cache .
4582	Returns the category items .
4583	Retrieve route pattern
4584	Retrieve the slug prefix .
4585	Retrieve the slug suffix .
4586	Is slug editable?
4587	Set slug .
4588	Generate the slug .
4589	Generate route pattern .
4590	Filter route token .
4591	Generate an object route .
4592	Get the URL of the post .
4593	Slugify a string .
4594	Finalize the slug .
4595	Delete object routes .
4596	Create route object loader .
4597	Get all revisions for this object .
4598	Set the publish date .
4599	Set expiration date .
4600	Set the publish status .
4601	Get status of publish .
4602	Show help information
4603	Rewrite the routes
4604	Resets the start of the iterator
4605	Returns the next row
4606	Browse the log
4607	Browse the logs
4608	Browse a log
4609	Browse events
4610	Returns the permissions of the user .
4611	Browse the tree
4612	Delete a single item
4613	Restore an item
4614	Sorts the list of items
4615	Checks if an item can be deleted .
4616	Get model title
4617	Returns an array of dropdown filters
4618	Returns post object
4619	Returns a single item
4620	Redirect to the index page
4621	Adds an option to the current filter
4622	Add multiple options
4623	Returns a single option
4624	Handle method call
4625	Update batch status
4626	sets a batch download id
4627	Handles the index action
4628	Finds the admin controllers
4629	Load admin controllers .
4630	Load an admin controller
4631	Loads an admin class
4632	Route to the current request
4633	Loads a view .
4634	load a csv data
4635	load an inline view
4636	load a search
4637	get filter value from filter object
4638	Loads a pagination component .
4639	load a cell
4640	Loads a user cell
4641	Load a date cell
4642	Load a datetime cell
4643	Load a boolean cell
4644	Loads the settings component table
4645	Adds a header button
4646	Render a dynamic table
4647	Save module preferences
4648	Execute the task
4649	Creates the source file
4650	Formats a row
4651	Add action .
4652	Set admin data
4653	Unset admin data
4654	Set a user s admin data
4655	Clear admin data
4656	Get all log files .
4657	Find a config file
4658	Loads the required JS assets
4659	Loads the CSS for the admin
4660	Loads the required libraries
4661	Auto load all components
4662	to be used for backwards compatibility
4663	Edit site settings
4664	Prepare whitelist .
4665	Recursively extract settings from a component
4666	Gets a source by its slug
4667	Gets a format by its slug
4668	Exports a data source
4669	Ajax for an exception
4670	function to add a link to an article
4671	Saves changes to database
4672	Returns all users .
4673	Returns the count of common users
4674	format an object
4675	Overload method .
4676	Validate user input
4677	Returns model class and id
4678	Format an object .
4679	Set current date
4680	Add daily html
4681	Set start of week
4682	Prints a string .
4683	Submits bonus
4684	Assign task to team
4685	Assign contract to an engagement
4686	Get finished report
4687	Get finish report
4688	Get finish report
4689	Get finish report
4690	Get finished report
4691	Get a list of engagements
4692	Get a specific engagement
4693	get full url
4694	Get a list of offers
4695	make a call to a contract
4696	Get a single report
4697	Get all user roles
4698	Get roles for specific user
4699	Invites a job
4700	Get company by type
4701	Get customer by company
4702	Get users in a team
4703	Get a list of jobs
4704	Get a specific job
4705	Create a job
4706	Edit a job
4707	delete a job
4708	get user info
4709	Get user information
4710	Get task by type
4711	Get room details
4712	Get room by offer
4713	Get room by company id
4714	Get a room by contract
4715	create room
4716	Send a message to a room
4717	Update room settings
4718	Update room metadata
4719	get a snapshot for a contract
4720	update a snapshot for a contract
4721	delete a snapshot for a contract
4722	Get active milestone
4723	Get submitted submissions
4724	Create a milestone
4725	update a milestone
4726	Delete a milestone
4727	Make a request to the API
4728	Publishes the packagekit
4729	Get the content of the request .
4730	Get accountKit data
4731	Display a list of contacts .
4732	Display contact .
4733	Show contact .
4734	Show contact .
4735	Update the contact .
4736	Remove the contact .
4737	Get all contacts .
4738	Get the value of a specific field .
4739	Determine if the given user can view the contact .
4740	Determine if the given user can update the given contact .
4741	Determine if the given user can delete the given contact .
4742	Show contact .
4743	Parse link .
4744	Returns an array of parsed preview data
4745	Get preview of a specific parser
4746	Add a parser .
4747	Remove a parser
4748	Add default parsers
4749	Get contrast from hex
4750	Encodes a path into a path
4751	Convert interval to string
4752	Bootstrap the download extension .
4753	Get data for all available regions .
4754	Returns an array of timezone options .
4755	Get the name of a model relation .
4756	Join a model into a query
4757	Get the AWS client .
4758	Converts a version string to a version number .
4759	Scope a query by key and value .
4760	Set availability_at .
4761	Get payload value .
4762	Convert bytes to human readable format
4763	Convert time offset to seconds
4764	Convert seconds to human readable format .
4765	Truncates a long text
4766	Add a permission to a topic
4767	Confirm Subscription
4768	Create a Topic
4769	Get the attributes of a Topic
4770	Retrieves a list of subscriptions .
4771	Get a list of subscriptions for a topic .
4772	List topics .
4773	Publish a message to a topic .
4774	Remove a permission from a Topic
4775	Set the attributes of a Topic
4776	Subscribe to a topic
4777	Create a platform endpoint
4778	Publish a Message to Endpoint
4779	Make a request to Amazon
4780	Converts SimpleXMLElement to array
4781	Clears all tasks
4782	Convert priority to priority
4783	Run the task .
4784	Customize the settings tabs .
4785	Get invitation by team code
4786	Create default settings tabs .
4787	Create a coupon from a Stripe coupon .
4788	Get a coupon by code .
4789	Get a coupon for a user .
4790	Get a single team .
4791	Get team roles
4792	Update user profile .
4793	Validate user profile .
4794	Update Stripe customer s email address
4795	Install JavaScript .
4796	Install the environment variables .
4797	Subscribe a plan .
4798	Change subscription plan .
4799	Update a card
4800	Update extra billing info .
4801	Cancel subscription .
4802	Resume a subscription .
4803	Download invoice .
4804	Get price .
4805	Set currency symbol
4806	Get trial days
4807	Get the cache tier .
4808	Get feature features .
4809	Get the current user .
4810	Create a new user from registration request .
4811	Create new user .
4812	Create default user .
4813	Create a subscription on Stripe .
4814	Register two factor authentication provider .
4815	Check if the given token is valid .
4816	Delete a user .
4817	Show the spark dashboard .
4818	Invites a user by email .
4819	Remove user by id .
4820	Send an email to a team .
4821	Accept a team invitation .
4822	Make a new Tab .
4823	Get the collection of tabs .
4824	Define the package s resources .
4825	Define services .
4826	Send a notification to the user .
4827	Handle invoice payment .
4828	Create a new team
4829	Get all teams for a given user .
4830	Get pending invitations for a given user .
4831	Attach user to team
4832	Find plan by ID .
4833	Get plans by tier .
4834	Get current team .
4835	Determine if this user owns the given team .
4836	Get the role of a team .
4837	Create a new team
4838	Show team settings form .
4839	Update a team
4840	Switch to a team
4841	Update a team member
4842	Remove a member from a team .
4843	Leave a team .
4844	Delete a team .
4845	Call custom validator .
4846	Call custom updater .
4847	Update the password .
4848	Enable TwoFactor Authentication
4849	Validate TwoFactor authentication .
4850	Disables two factor authentication .
4851	Redirect user to login page .
4852	Logout and redirect to the token page .
4853	Validate token .
4854	Register registration page .
4855	Validate registration .
4856	Validates the default registration .
4857	Validate the coupon code .
4858	Logout action .
4859	Flash message .
4860	Creates a new event .
4861	Register an exception .
4862	Exports an exception .
4863	Import an exception
4864	Normalizes an event .
4865	Get wp handler wrapper .
4866	Creates a cached event .
4867	Checks if an event is cached .
4868	Get cached event .
4869	Remove cached event .
4870	Creates a wrapper function for a WordPress event .
4871	Exports an exception .
4872	Imports an exception .
4873	Remove a WordPress hook .
4874	Replace WordPress hook .
4875	Get stack of messages
4876	Clears the reference bag .
4877	Sends a message to the pool .
4878	Deletes a task from the pool .
4879	Bootstrap the application .
4880	Filters an array .
4881	Flattens an array of arrays .
4882	Maps an array to a promise .
4883	Performs a parallel process .
4884	Converts a result array to an exception .
4885	Sets the number of arguments .
4886	Run a WordPress hook .
4887	Apply filters .
4888	Adds a WordPress hook .
4889	Wrap a promise .
4890	Resumes the loop .
4891	Stop loop .
4892	Destroy all sockets .
4893	Gets the socket for a worker .
4894	Removes the worker socket .
4895	Prepares a worker .
4896	Attach method handler .
4897	Creates a hash for a callable .
4898	Writes data to buffer .
4899	Pipe this stream to another stream .
4900	Read data from the socket .
4901	Handles incoming data .
4902	Check socket errors .
4903	Remove the read listener .
4904	Remove the write listener .
4905	Decodes a Phoebe message .
4906	Attach timer .
4907	Cancel the timer
4908	Submits a worker .
4909	Submits a worker to a worker .
4910	Submits a task .
4911	Submits a task to a worker .
4912	Stops a worker .
4913	Removes a worker .
4914	Sends a message to a worker .
4915	Sends a message to all workers .
4916	Iterates over all workers .
4917	Execute worker tick
4918	Spawn a worker .
4919	Checks if a worker is alive .
4920	Checks if a worker is shutdown .
4921	Handles a message .
4922	Handle stream closing .
4923	Read bytes from the stream .
4924	Read a UUID from the stream .
4925	Read list .
4926	Read a map .
4927	Read varint from buffer .
4928	Read decimal point .
4929	Register the bulkSms service .
4930	Bootstrap the package .
4931	Sends a message .
4932	Validate the response .
4933	Send bulk SMS
4934	Get the status for a batch
4935	Send bulk SMS .
4936	Generate CSV .
4937	Send the BulkS SMS .
4938	Set the message .
4939	Calculate concat count .
4940	Parse a SMS number .
4941	Send a batch .
4942	Finds dynamic entities by given filters .
4943	Count dynamic categories by given filters .
4944	Add filter to query builder .
4945	Add filter to query builder .
4946	Adds a filter to the query builder .
4947	Get the value of a field
4948	Get form fields
4949	Builds and returns a Mail object based on dynamic settings .
4950	Build configuration by type .
4951	Build admin mail configuration by dynamic translation .
4952	Builds the mail configuration for the given dynamic template .
4953	Get file fields by dynamic collection .
4954	Returns the collection id for the given dynamic .
4955	Get the email address from a dynamic .
4956	Get email address .
4957	Builds the form .
4958	Creates a dynamic form .
4959	Loads form entity .
4960	Get default values for form entity .
4961	Returns the webspace key of the current request .
4962	Check if password is valid
4963	Get password hash .
4964	Returns a list of dynamic entries .
4965	Returns list of fields .
4966	Deletes dynamic media .
4967	Get filters from request .
4968	Loads a form .
4969	Convert value to string .
4970	Get media urls .
4971	Returns the download url .
4972	Returns a list of choice choices .
4973	Get choice options .
4974	Get form by id .
4975	Saves the dynamic form .
4976	Returns the translation for the given locale .
4977	Returns the field with the given key
4978	Get fields not in array
4979	Serialize form field for given locale .
4980	Render form action .
4981	Returns the form with the given key .
4982	Handles the form submit .
4983	Handle form submit .
4984	Generate CSRF token .
4985	Get validation errors .
4986	Handle form submission .
4987	Saves the form .
4988	Upload media .
4989	Map media ids to entity
4990	Get the media data .
4991	Get MailChimp lists .
4992	Get builder .
4993	Returns block prefix
4994	Creates new collection .
4995	Loads the collection id .
4996	Get the width of the item
4997	Get the last width .
4998	Throws an exception from a PDOException .
4999	Sets the hostname
5000	Sets the unix socket
5001	Sets the memory flag
5002	Sets the file path
5003	Sets the database name
5004	Sets the charset .
5005	Ensure that the connection is connected .
5006	Configure PDO connection .
5007	Executes a SELECT query .
5008	Get all queues .
5009	Get a single queue .
5010	Add a message to a queue .
5011	Add messages to a queue .
5012	Get a single message by id .
5013	Touch a message .
5014	Release a message
5015	Add alerts to a queue .
5016	Delete an alert by id .
5017	Delete a queue .
5018	Update a queue .
5019	Create a queue .
5020	Replace subscribers of a queue .
5021	Remove a subscriber from a queue .
5022	Output data to json .
5023	Outputs XML as XML .
5024	Generate XML from provided data
5025	Output CSV .
5026	Flattens an array
5027	Execute the console command .
5028	Format server statistics .
5029	Format the usage
5030	Format uptime
5031	Adds a server to the pool .
5032	Add a list of servers .
5033	Checks if a server is valid .
5034	Retrieve a value from the cache .
5035	Store data in memcache
5036	Deletes a cache entry .
5037	Set cache client
5038	Retrieve a value from the cache .
5039	Delete a cache key
5040	Make an invalid argument exception .
5041	Populate builder with data .
5042	Set options .
5043	Set the notification .
5044	Set the payload data .
5045	Encode CDATA .
5046	Generate a URL for a non - authentication request .
5047	Returns authentication URL .
5048	Generate URL for advanced authentication
5049	Generate a simple authentication URL .
5050	Builds the HTTP authentication URL .
5051	Ensure channel parameter is set .
5052	Set the product ID .
5053	Get similar attributes
5054	Get similar records
5055	Writes string to file
5056	Autoload a class
5057	Sets the target .
5058	Trigger import action
5059	Trigger suggestion import .
5060	Apply the parameter mapping rules .
5061	Ensure channel parameter is set .
5062	Add required parameters
5063	Add an appender to the pool .
5064	Get the appenders
5065	Log a trace entry
5066	Log a debug message
5067	Log a warning message
5068	Logs a message to the logger .
5069	Logs an event .
5070	Logs an event to the logger .
5071	Remove an appender .
5072	Returns the effective log level .
5073	Get the logger hierarchy .
5074	Returns the logger with the given name .
5075	Resets the configuration
5076	Configures the application .
5077	Get the logger configurator .
5078	Sets the record count
5079	Add product IDs .
5080	Get recommendations .
5081	Track click .
5082	Track a cart .
5083	Track a checkout .
5084	Track a click on a recommendation .
5085	Track the login
5086	Set product IDs .
5087	Get the list of comparable attributes .
5088	Get the list of records .
5089	Format the event .
5090	Set a boolean value .
5091	Set the level of the logger .
5092	Set the file size .
5093	Setter for numeric value .
5094	Set the value of a string property .
5095	Returns the location information .
5096	Get start time .
5097	Get the time in milliseconds .
5098	get request instance
5099	Get the tag cloud
5100	Set the word count .
5101	Adds a feedback .
5102	Sets the product numbers .
5103	Add product numbers .
5104	Set pageId .
5105	Make a product campaign .
5106	Make a ShoppingCart Campaign Campaign .
5107	Get all campaigns .
5108	Retrieves the raw product campaigns
5109	Adds a converter to the converter chain .
5110	Gets a converter instance .
5111	Parses the modifiers into a LoggerFormatInfo object .
5112	Set the level of the logger root .
5113	Registers a renderer .
5114	Set the default renderer class .
5115	Get a mapping by class name .
5116	Retrieve whitelist server parameters
5117	Loads a configuration file .
5118	Converts a log file to a logger .
5119	Parses a logger value
5120	Parse appender configuration .
5121	Parse a renderer .
5122	Appends an event to syslog .
5123	Parse syslog option
5124	Parse the facility .
5125	Parse the syslog priority
5126	Appends an event to the mongo collection .
5127	Format an exception .
5128	Closes the collection
5129	Configure the logger .
5130	Create layout for appender .
5131	Set idsOnly .
5132	get follow search value
5133	Adds a filter to the chain
5134	Sets the response .
5135	Set session id
5136	Compare two LoggerLevel with another one .
5137	Get the level of LoggerLevel
5138	Returns the level of FATAL level .
5139	Returns the level of error level .
5140	Get the logger level warning level .
5141	Returns the Info LoggerLevel level .
5142	Returns the level of debug level
5143	Returns the level trace level .
5144	Get the level of all loggers
5145	Get the level of the log
5146	Get system property
5147	Convert given value to a LoggerLevel .
5148	Convert given value to string
5149	Substitute constants in a string
5150	Get a logger by name .
5151	Returns the current request target
5152	Activates the formatting pattern .
5153	Formats the given event .
5154	Add filter to filter
5155	Checks if the given level is the same as the threshold .
5156	Triggers a warning .
5157	Get suggestions .
5158	Get class name from factfinder
5159	Rollback .
5160	Initializes the database connection .
5161	Appends an event to the database .
5162	Format the log entries .
5163	Generates a URL based on the passed parameters .
5164	Get the feedback for a campaign
5165	get pushed products
5166	Get the active questions
5167	Get the advisor tree of all campaigns .
5168	Activate options .
5169	Appends an event to the log .
5170	Find a permission by its ID .
5171	Find a permission by its value .
5172	Render menu item
5173	Setup the layout .
5174	Get list of users
5175	Show create form
5176	Handle creating a new user
5177	Attempt to activate a user
5178	Show user informations
5179	Show group list
5180	Update a group
5181	Delete a user from a group .
5182	Add user in group
5183	Validates a group
5184	Load includes .
5185	Register breadcrumbs .
5186	Show dashboard .
5187	Log in a user .
5188	Get the list of permissions .
5189	Create a new permission
5190	Delete permission .
5191	Paginate the pdf
5192	Authenticate a user
5193	Generate a nonce .
5194	Check if flag exists
5195	Get rule by flag
5196	Determine if the rule expects a given flag .
5197	Check if flag is required
5198	Check if flag is optional
5199	Parse command line arguments
5200	Check if a string is a param
5201	Order parameters recursively
5202	Authenticate client
5203	Returns the report API
5204	Returns the Permissions API
5205	Returns the company API
5206	Get OAuth
5207	Make a request to the gateway
5208	Retrieves all elements of a report
5209	Get report metrics
5210	Retry the report if not ready .
5211	Get the sleep seconds .
5212	Parse the given options
5213	Make a GET request to the API .
5214	Get a list of images
5215	Get a list of videos
5216	Prints out a string .
5217	Get table definition
5218	Generate drop table definition .
5219	Get drop table data .
5220	Get the definition of a table .
5221	Generate drop - increment definition .
5222	Get foreign key definition .
5223	Get drop foreign keys .
5224	Get column definitions .
5225	Get the primary key .
5226	Get table comment .
5227	Gets the schema type for a column .
5228	Returns the definition of the other column .
5229	List all tables .
5230	Generate migration file
5231	Create a new table .
5232	Drop table .
5233	Generate a file .
5234	Prints function .
5235	Get function parameters .
5236	Start printf
5237	End printf
5238	Display the conclusion of a table .
5239	Fetches the web service
5240	Populates the data from the response
5241	Builds web service url
5242	Retrieves the groups from the LDAP server .
5243	Get a group by DN
5244	Get a list of users .
5245	Get a user by GUID
5246	Get a user by DN
5247	Get a user by email address
5248	Get a user by username .
5249	Get username by email address .
5250	Get the members of the LDAP group
5251	Update a group from LDAP .
5252	Create LDAP user
5253	Create an LDAP group
5254	Update LDAP user from a member .
5255	Update LDAP groups for a member
5256	Change the password of a member
5257	Delete LDAP member
5258	Update documents in index
5259	Connect to a TCP server .
5260	Disconnect from the server .
5261	Receive a string from the socket
5262	Send a string to the socket .
5263	Encode a string .
5264	Decode a string
5265	Read response from server
5266	Authenticate a client
5267	Check if the response time is consistent .
5268	Create LDAP user in LDAP .
5269	Write this object to the owner .
5270	Get message from session
5271	Show the lost password form
5272	Show password reset link
5273	Performs the LDAP search .
5274	Get a group by its GUID .
5275	Change the password of a user
5276	Set the password for a given DN
5277	Moves an attribute from one DN to another .
5278	Authenticate a user
5279	Try to authenticate
5280	Process the authentication request
5281	Validate SP metadata
5282	Get little endian
5283	Callback for select callback
5284	Select documents from the index
5285	Splits a hash string into an array
5286	Create a database instance .
5287	Get a table definition
5288	Get all tables .
5289	Fixes table indexes
5290	Compare two indexes
5291	Get one row from a table
5292	Build index name .
5293	Encode data .
5294	Generate a random key .
5295	Get supported info .
5296	Hash a string .
5297	Verifies the signature of a string .
5298	Verify the timestamp .
5299	Pop a string from a string
5300	Push string to string
5301	Convert a string to a string .
5302	Get error message .
5303	adds an error
5304	Set the main message
5305	Set the HTTP status code .
5306	Get error message
5307	Get all errors as a flat array
5308	Check if a field is valid
5309	Parse a schema into an array
5310	Require one or more fields
5311	Validates data against the schema .
5312	Validate a single field
5313	Validates an array
5314	Validate base64
5315	Validate a boolean value .
5316	Validates a datetime field .
5317	Validate a float .
5318	Validate an integer .
5319	Validates an object .
5320	Check if the given field is required
5321	Validate a string .
5322	Validate a timestamp .
5323	Get all addons
5324	Bootstrap all plugins .
5325	Get cached data
5326	Get class map
5327	Determine if the addon is enabled .
5328	Get information about an addon .
5329	Recursively find an addon recursively
5330	Scans an addon
5331	Scan a directory recursively
5332	Start an addon .
5333	Get HTTP headers .
5334	Call a user function
5335	Bind a callback to an event .
5336	Binds a class to an event .
5337	Dump all event handlers .
5338	Fire an event
5339	Fire event .
5340	Fire event .
5341	Check if function exists
5342	Get event name from callback
5343	Get handlers by event name
5344	Check if event handler exists
5345	Check if method exists
5346	Get driver value
5347	Set the value of the driver .
5348	Splits a hash from a hash
5349	Get the path to the default configuration file .
5350	Get session data
5351	Loads configuration from file .
5352	Save a configuration array .
5353	Matches all routes matching the given request .
5354	Add a route .
5355	Finalize the response
5356	Check if action exists
5357	Returns an array of allowed methods .
5358	Determine if the request matches the given request .
5359	Determine if the given condition fails .
5360	Get current response
5361	Creates a response from the given result .
5362	Set Content - Type header
5363	Set the asset path
5364	Set Content - Type from Accept header
5365	Get HTTP status message
5366	Set cookie value
5367	Set global cookies
5368	Gets or sets the meta of the resource .
5369	Set or get the data .
5370	Set HTTP headers .
5371	Set global headers
5372	Normalize a header name
5373	Send HTTP headers .
5374	Migrate a table
5375	Rename a table
5376	Drop index .
5377	Creates an index
5378	Force the given value to the given type .
5379	Get the primary key of a row .
5380	Get the list of available tables .
5381	Create route .
5382	Get or set the conditions .
5383	Get or set the HTTP methods .
5384	Get or set the mappings .
5385	Set global mappings
5386	Check if a field is mapped .
5387	Get mapped data .
5388	Check if a request matches the allowed HTTP methods .
5389	Get or set route pattern
5390	Dispatch callback .
5391	Get the regular expression for a route .
5392	Execute a SQL query
5393	Build a select query
5394	Build a bracket list
5395	Build an INSERT query
5396	Build an update statement .
5397	Render a column definition string .
5398	Build an index definition string .
5399	Get column orders .
5400	Get formats from database
5401	Translate a row
5402	Verify a password
5403	Encode a 64 bit string .
5404	Get current request
5405	Get the default environment variables .
5406	Get global environment variable .
5407	Parse server variables .
5408	Overrides environment variables
5409	Get an environment variable
5410	Set environment variable .
5411	Get HTTP headers .
5412	Get host and port
5413	Set file extension .
5414	Set path extension
5415	Set full path
5416	Set the port of the request .
5417	Gets GET parameter
5418	Set GET parameter
5419	Retrieve input from the request
5420	Get POST data
5421	Set request data
5422	Get the full url
5423	Parses the URL and sets the host properties
5424	Generate a full URL .
5425	Split a path and extension
5426	Reset the query .
5427	Define a new column .
5428	Generate column definition
5429	Define a primary key .
5430	Set table definition
5431	Sets the table name
5432	Add index .
5433	Render all robots
5434	Gets all orders .
5435	Get a single resource
5436	Validates the data .
5437	Get the value of an attribute
5438	Sets the attribute values .
5439	Check if API method is supported
5440	Check required attributes
5441	Check JUD ID .
5442	Returns a summary of the response .
5443	Get a model from the container .
5444	Get error summary
5445	Make a GET request
5446	Make a POST request .
5447	It converts attributes into correct type
5448	Validates the object
5449	Checks if a key exists in an array .
5450	Render the notification script
5451	Add a notification
5452	Link a delivery
5453	Convert a job object into an array
5454	Convert a job into a Job object .
5455	Free the pool .
5456	Frees the pool .
5457	Creates a new Dashboard chart .
5458	Handle a single relation request
5459	Sorts the list of records
5460	Return the link to the edit form
5461	Get the detail form
5462	Save the item in the database
5463	Returns an array of RSS feed items
5464	Get a list of recent edited posts
5465	If the member has not been created it will be overwritten
5466	Get the name of the template
5467	Generate a link to view all pages
5468	Generate a link to create a new model
5469	Get GridFields for a given page .
5470	Answers the GridField for the receiver .
5471	Get the tab for the current page
5472	Returns an array of GridField objects
5473	Get grid fields for a page
5474	Request account data .
5475	Clean error response
5476	Process filter
5477	Mapper account object
5478	Convert a JSON string to a report object
5479	Check if array key exists in array
5480	Fetch a token .
5481	Get the URL of the request
5482	Make a POST request .
5483	Make a GET request
5484	Make an HTTP request
5485	Make a cURL request
5486	Open a request to a request
5487	Get recent files
5488	Duplicate this dashboard panel
5489	Answers the template name for the current model .
5490	Generate a link to all model admin
5491	Get a list of all records in the model admin
5492	Get the list of models for a panel
5493	Provides a list of permissions for the dashboard
5494	Sorts the dashboard panel
5495	Set the default dashboard configuration
5496	Save the dashboard configuration
5497	Renders the panel
5498	Delete the panel
5499	Get the form for the configuration form
5500	Save the panel configuration
5501	Answers the icon for the receiver .
5502	Convert seconds to minutes
5503	Get the Google API instance .
5504	Overrides the default configuration for the dashboard
5505	Determine if the configuration is configured .
5506	Answers the path for the receiver .
5507	Generate the title for the chart
5508	Reads a float from the binary stream .
5509	Reads a file from a binary stream .
5510	Convert binary value to hexadecimal string
5511	Reads a number of bytes .
5512	Read a signed value from buffer .
5513	Decode a 16 bit integer .
5514	Read a signed value .
5515	Decode 64 bit integer .
5516	Read a signed value .
5517	Exports the given span .
5518	Get the callback for the client
5519	Parses the RobotsTxt content from the given URL .
5520	Get the applicable lines from the robots . txt content
5521	Build a regular expression for disallow expressions
5522	Retrieve robots txt content
5523	Get the URL of the robots . txt file .
5524	Initializes the crawler process
5525	Start multi process .
5526	Start the child process loop .
5527	Checks if the crawler has been aborted .
5528	Create the working directory
5529	Returns the processed process report .
5530	add a link priority
5531	Set follow mode
5532	Set the traffic limit
5533	Set the working directory
5534	Set proxy
5535	Set the connection timeout
5536	Set the connection timeout
5537	Resumes the aborted process
5538	Set the starting URL .
5539	Removes all redirect URLs
5540	Checks if the given URL matches the given rules .
5541	Adds a regex filter rule .
5542	Add URLs filter rules
5543	Marks a URL as follows .
5544	Checks if the cache contains URLs
5545	Get all URLs
5546	Add multiple URLs
5547	Starts a benchmark .
5548	Stop a benchmark .
5549	Resets all benchmark results .
5550	Get all benchmark results .
5551	Get current microtime
5552	Initializes the database connection .
5553	Generate a unique hash for a given URL .
5554	Get url priority
5555	Adds a link priority .
5556	Add link priority
5557	Adds a PHPCrawlerDocumentInfo to the queue .
5558	Get the next document
5559	Creates a PHPCrawlerUrlDescriptor from a URL .
5560	Sets the source URL .
5561	Find a redirect link in the http header
5562	Add post data
5563	Updates the status of the crawler
5564	Register child PID
5565	Get child process
5566	Kill child process
5567	Get IP Address
5568	Returns the host in the cache .
5569	Removes visitor .
5570	Traverses the given expression .
5571	Returns a new collection filtered by the given expression .
5572	Creates a new method .
5573	Format a value .
5574	Format an array of values .
5575	Writes a configuration array to the class .
5576	Retrieve a variable from the session .
5577	Returns an array of registered engines .
5578	Expands a flat array into a nested array .
5579	Split a token into conditions and conditions .
5580	Check if the given token matches the given key .
5581	Caches a value into the cache .
5582	Set all instances of the module
5583	Get the backtrace
5584	Export a variable .
5585	Register event listener .
5586	Parse a message
5587	Get the file path for a given key .
5588	Load a plugin .
5589	Loads the plugin configuration .
5590	Load all plugins .
5591	Loads a bootstrap file
5592	Read a config file
5593	Sets configuration .
5594	Read a configuration key
5595	Load all modules .
5596	Check plugins for a specific module
5597	Unloads a module
5598	Reload a module
5599	Get time of a module .
5600	Check if module is modified .
5601	Get module by name .
5602	Check if a module exists .
5603	Sets a module .
5604	Returns the value of a key .
5605	Set a cache key
5606	Get multiple values from the cache .
5607	Set multiple values
5608	Call method .
5609	Logs the start of the profile .
5610	Triggers the end of a join
5611	Get the profile key for the given join point .
5612	Prefix all arguments .
5613	Applies a prefix to a command .
5614	Evaluate the keys of a command .
5615	Set the expiration time .
5616	Sets the length .
5617	Read data from the socket .
5618	Sends data to the socket .
5619	Check if command can be executed
5620	Set the protocol version
5621	Converts an associative array to a string .
5622	Get the last key of the stack
5623	Prepares the connection
5624	Execute the request
5625	Reads raw data from the socket .
5626	Read an unsigned 64 - bit integer from the stream .
5627	Read a string from the stream .
5628	Read bytes from the stream .
5629	Read a record
5630	Add bytes to the request
5631	Unpacks a 64 bit integer .
5632	Resets OrientDB data .
5633	Returns the properties of the current Fusion object .
5634	Renders a component .
5635	Returns a string of class names .
5636	Retrieves a list of all ids of the ideal issuers .
5637	Get allowed products
5638	Process a list of products
5639	Create a Sale Order with an ideal order .
5640	Create SepaOrder .
5641	Create Sofort orders .
5642	Create a payconic order .
5643	Create a new order for a credit card .
5644	Create a Bancontact with Bancontact .
5645	Create a cash order on delivery order
5646	Create a new KlarnaOrder
5647	Creates a new paypal order .
5648	Create a new home pay order .
5649	Create a new order after payment .
5650	Create a new order .
5651	Get an order by ID .
5652	Post an order .
5653	Set the status of an order
5654	Create a payment using an IDE method .
5655	Create Payment Method
5656	Creates a new BankPaypal payment .
5657	Creates a new SageFort payment method .
5658	Create Payment Method
5659	Create a payment using Paypal .
5660	Creates a Payment using Homepay .
5661	Creates a PayCONQ transaction using PayCONQ .
5662	Create a new transaction .
5663	Remove null values .
5664	Creates an HTTP client .
5665	Get Endpoint
5666	Checks if the given value is a valid ISO3166 code .
5667	Builds the request .
5668	Execute a payment .
5669	Capture an authorized payment
5670	Create an authorization .
5671	Create a sale .
5672	Request an access token
5673	Builds a Link object from provided data .
5674	Builds a capture object from provided data .
5675	Builds a Money object from provided array .
5676	Build url array
5677	Build an access token from provided data
5678	Build a list of transactions .
5679	Build an array of transactions .
5680	Sends a request
5681	Builds payment object from given array .
5682	Build PaypalPaymentAuthorization object .
5683	Builds Payer object
5684	Build payer array
5685	Builds authorization object from provided array .
5686	Make string safe
5687	Make a safe string .
5688	Get attribute value by key .
5689	Check if mutator has mutator .
5690	Get reflection instance .
5691	Create favicon element .
5692	Creates a link element .
5693	Render ol element
5694	Create ul element .
5695	Get the value of a model attribute .
5696	Create a text input field .
5697	Create an email input field .
5698	Create a tel input field .
5699	Create a form input field .
5700	Create url input .
5701	Create a form color input .
5702	Get checkbox state .
5703	Get url action .
5704	Get route action .
5705	Get controller action .
5706	Inserts a string at a given position .
5707	Searches for a given string .
5708	Set the value at the specified index .
5709	Unset an index
5710	Fetches data from the stream .
5711	Parse file .
5712	Get line count .
5713	Unzip a file .
5714	Get the size of a URL
5715	Get files array .
5716	Free the stream .
5717	Removes the next byte from the buffer .
5718	Seek to given position .
5719	Inserts data into the buffer .
5720	Replaces the current element with the given data .
5721	Removes the element from the buffer .
5722	Publish a directory .
5723	Closes the connection .
5724	Get Admin 1 .
5725	Add country info to a query
5726	Scope a city .
5727	Search for countries by name
5728	Search by feature .
5729	Creates all pending redirects .
5730	Checks if the given node has the URI changed .
5731	Builds redirects .
5732	Creates a redirect from the given URI .
5733	Removes a node redirect if needed .
5734	Checks if the node is restricted by the current node type .
5735	Checks if the given node is restrict by path prefix .
5736	Returns all hostnames for the current site .
5737	Get UriBuilder .
5738	Load the name from a variable
5739	Validate URL suffix
5740	Render page picker
5741	Label callback
5742	Initializes the Debug Bar .
5743	Add plugin action links .
5744	Get the plugin s version .
5745	Get the remote version .
5746	Check file type and extension .
5747	Check file type and ext .
5748	Parse Readme contributors from a readme file .
5749	Get plugin slug by path .
5750	Get remote contributors .
5751	Validates the file
5752	Get a supported class loader
5753	Loads the content
5754	Creates an array of options .
5755	Get list of allowed tags
5756	Get allowed protocols
5757	Get allowed domains .
5758	Sanitize domain .
5759	Sanitizes an attribute value .
5760	Sanitize a URI value .
5761	Sanitize CSS .
5762	Loads an SVG .
5763	Strip comments from SVG .
5764	Duplicate flags
5765	Make loader loaders
5766	Pre parse loaders
5767	Make Namespace Loaders
5768	Parse the given array of options into an array .
5769	Make cache provider
5770	Make paths .
5771	Make a loader
5772	Make variables provider
5773	Load variables from cache .
5774	Merges globals into the given content .
5775	Get a resource by its name
5776	Creates the prefix for the current page
5777	Create the resources
5778	Add content to current page
5779	Get supported files
5780	Merge parent content
5781	Get a value from an array .
5782	Check if an array key exists
5783	Parse a variable
5784	Parse variable type .
5785	Fetch variables matching the given regular expression
5786	Fetch a variable
5787	Check if variable exists
5788	Performs the replacements in the given string .
5789	Exports a SVG .
5790	Remove multiple nodes from a DOMNodeList .
5791	Remove a node
5792	Set the base path
5793	Make relative path
5794	Search for resources
5795	Parse content .
5796	Parses the given imports .
5797	Import a resource
5798	Create resource provider
5799	Creates an import name from a resource
5800	Import resource .
5801	Check a boolean value .
5802	Get boolean value
5803	Get the aliases for a file .
5804	Update the extension of a filename .
5805	Check if a file is aliased .
5806	Check if an alias is allowed .
5807	Loads the configuration .
5808	Get supported files .
5809	Make an array of resources
5810	Check if cache is valid
5811	Make cache file
5812	Set the version of assets .
5813	Reads and parses the configuration file
5814	Sends a request .
5815	Set cURL options
5816	Execute a GET request
5817	Make a PUT request
5818	Execute DELETE request .
5819	Execute a POST request .
5820	Executes a HEAD request .
5821	Execute the curl request .
5822	Install an extension
5823	Add buckets .
5824	Perform a read request
5825	Write XML content to a URI
5826	Is valid XML?
5827	Sets up a range element
5828	Returns the values as element as element
5829	Adds the values options to the given element .
5830	Add aggregate element to dom
5831	Get request params
5832	Retrieve data from API
5833	Search for a key and value
5834	Retrieve a single key value
5835	Highlight a string
5836	Get the REST client .
5837	Get the REST client
5838	Get the REST client .
5839	Get REST API instance .
5840	Get a database instance .
5841	Get options instance .
5842	Autoload class
5843	Get the options as XML .
5844	Adds an option to a node .
5845	Add an option XML string to an option .
5846	Read a configuration
5847	Write query to database
5848	Delete a configuration
5849	Set search options
5850	Read a document
5851	Write to the document
5852	Delete a document
5853	Read metadata from document
5854	Writes the metadata
5855	Delete document metadata
5856	Set file content
5857	Get file mime type
5858	Log a SOAP call .
5859	Decode a SOAP reply
5860	Convert an associative array to an associative array
5861	Perform an LDAP sync
5862	Returns an array of PhpPhoneNames
5863	Returns a list of all phones by site
5864	Search by name
5865	Function to call Phone Search
5866	Get a phone by name
5867	Get directory numbers by name
5868	Returns a list of device pool names
5869	Get the list of site names for the current device pool .
5870	Get list of lines by site .
5871	Get line details by phone name .
5872	Get all object types by site
5873	Get object type by name
5874	Deletes an object type by its UUID
5875	Add capabilities .
5876	Get the latitude of the image .
5877	Get the longitude of the image .
5878	Get the body type of the response
5879	Get error message
5880	Get url string
5881	Creates a REST API
5882	Deletes the API .
5883	Wait until a request is successful .
5884	Check if the resource exists
5885	Get the current term as element
5886	Adds term options to given element
5887	Adds facet options to an element .
5888	Adds a fragment scope to an element .
5889	Set the content file .
5890	Get a result by URI
5891	Get a single result by index
5892	Get a facet by name
5893	Add constraints .
5894	Returns the extract metadata as element
5895	Add the preferred elements
5896	Returns the transform results as element
5897	Add collections .
5898	Delete a collection
5899	Add multiple permissions
5900	Deletes all permissions for a role
5901	Delete properties .
5902	Get the metadata as XML
5903	Loads role from XML
5904	Enable StaticProxy .
5905	Set the container .
5906	Compare two constraints .
5907	Compare two indexes .
5908	Compare two fields .
5909	Get fixture files .
5910	Compare two fields .
5911	Set the form .
5912	add a horizontal form
5913	Creates a label .
5914	Get validation errors .
5915	Create a new group
5916	Renders an action
5917	Creates a button
5918	Create an alert
5919	Create a password field .
5920	Create a form field .
5921	Creates a link .
5922	Creates a secure link
5923	Creates a link .
5924	Creates an action link .
5925	Create a mailto link .
5926	Create a non - null alert .
5927	Execute a replacement .
5928	Get short message .
5929	Retrieve data from Redis .
5930	Set a value in redis .
5931	Deletes basket item .
5932	Clear all basket items .
5933	Updates shop basket .
5934	Get literal value
5935	Get the type of a literal
5936	Get language code from a literal string
5937	Create an IRI
5938	Create a literal
5939	Check request MD5
5940	Builds XML response .
5941	Initializes the tokenizer .
5942	Tokenize input .
5943	Decobfuscate code .
5944	Obfuscate the given id and alias .
5945	Creates a default HTTP response .
5946	Get Statement with Group actor
5947	Get Statement with Statement Id .
5948	Returns a Statement with the given ID
5949	Get a statement with a sub statement .
5950	Creates an option instance .
5951	Creates a StatementResult object
5952	Attach event listener
5953	Attach view helper
5954	Get the file from the last attachment .
5955	Collect files .
5956	Cleans the layout .
5957	Attaches the ViewResolver .
5958	Attach pdf transformer
5959	Resolve a template path
5960	Registers an option .
5961	Gets an option .
5962	Get activity profile document .
5963	Get an agent profile document .
5964	Create a new state document .
5965	Add a behavior .
5966	Add a value to the bucket .
5967	Set default behavior .
5968	Set the default value .
5969	Execute the behavior .
5970	Get a behavior instance .
5971	Mark the behavior as default .
5972	Set the behavior .
5973	Start metrics .
5974	Stop feature metrics .
5975	Execute the strategy .
5976	Creates a new collection from the collection .
5977	Get the first element of the collection .
5978	Get the last element of the collection .
5979	Return the maximum value of the collection .
5980	Reject items with the given callback .
5981	Convert the collection to an array .
5982	Get arrayable items .
5983	Check if slug is enabled
5984	Parse feature map .
5985	Creates a new HashMap .
5986	Creates a bucket .
5987	Set the map .
5988	Generate a builder for a feature .
5989	Set the bucket .
5990	Describes a list of tables .
5991	Describes a table .
5992	Creates a database schema .
5993	Create a new table .
5994	Create one or more fields
5995	Create a new field
5996	Creates a set of table relationships .
5997	Create a relationship .
5998	Updates a set of tables .
5999	Update a table .
6000	Update table fields .
6001	Update field .
6002	Updates table relationships .
6003	Update a relationship .
6004	Deletes multiple tables .
6005	Deletes a table .
6006	Set the length of the field .
6007	Truncate a table
6008	Retrieves the response from the current LDAP connection .
6009	Rewinds the cursor to the first row .
6010	Escapes a value for LDAP
6011	Add entry to LDAP directory .
6012	Compare two attributes
6013	Connect to LDAP server .
6014	Perform a paged_result command .
6015	Binds to LDAP directory .
6016	Get the value of an option
6017	Add entry to current directory
6018	Deletes an entry
6019	Replace attribute values .
6020	Modify an LDAP entry .
6021	Modify multiple entries
6022	Renames an entry
6023	Binds to the ldap server
6024	Performs an LDAP search on a base DN
6025	Set an option on the LDAP connection .
6026	Verify that the operation failed .
6027	Add a set .
6028	Compute the reference set .
6029	Compute the product list .
6030	Returns an array of resource names .
6031	Loads a resource
6032	Compare two table names
6033	Adds a primary key constraint .
6034	Creates a SQL statement for creating a new view .
6035	Binds a value to a statement .
6036	Extract PDO type from type
6037	Extract the type from a database column .
6038	Extract the default value from a field .
6039	Add data to the request
6040	Generate query
6041	Creates a request
6042	Execute the request and return the response .
6043	Set HTTP Method
6044	Set the protocol
6045	Generate a query string from the given parameters .
6046	Sets the aggregators .
6047	Sets the filters .
6048	Sets post aggregators .
6049	Registers required javascript
6050	Validates all required parameters
6051	Get the JSON string as a JSON string .
6052	Render Swagger UI
6053	Prepares the database .
6054	Checks if a table has a given column
6055	Get column type .
6056	Update the database schema for the given table .
6057	Drop a table .
6058	Drops all tables .
6059	Rename a table .
6060	Execute a SQL statement .
6061	Add attachment from request
6062	Add media from file
6063	Add content from raw data
6064	Add content from a file
6065	Delete all thumbnails
6066	Get last modified time
6067	Get file name
6068	Delete all thumbnails
6069	Deletes a file
6070	Deletes empty directory
6071	Check if a directory is empty .
6072	Check if file exists
6073	Returns the path to the file .
6074	Get thumb filename
6075	Get default thumbnail options
6076	Make thumb .
6077	Get the public media path .
6078	Get temporary path
6079	Get the type for an enum type .
6080	Type a time column .
6081	Type a timestamp column .
6082	CURL write function
6083	Compile assets .
6084	Bootstrap the application .
6085	Normalize a URL
6086	Add a route to the application .
6087	Add GET route .
6088	Add POST route .
6089	Add PUT route .
6090	Adds a patch route .
6091	Add DELETE route .
6092	Add OPTIONS route .
6093	Adds a HEAD route .
6094	Render the view .
6095	Get the source .
6096	Create a migration .
6097	Ensure that a migration does not exist .
6098	Get stub content .
6099	Get the path to a file .
6100	Scope the query for the given model .
6101	Scope for a given subject .
6102	Build an array expression .
6103	Get the migration paths .
6104	Removes all compiled views
6105	Set query parameters
6106	Set headers .
6107	Set proxy information
6108	Set cookies .
6109	Set a cookie .
6110	Set request options
6111	Sends the HTTP request .
6112	Set request method .
6113	Build blueprint .
6114	Build the table definition .
6115	Build the commands .
6116	Add index .
6117	Add a float column
6118	Add double column
6119	Add a decimal column .
6120	Set nullable timestamps .
6121	Set timestamp timestamps to be created .
6122	Add a morphs field .
6123	Add nullable morphable columns .
6124	Adds a new column definition .
6125	Creates a reference name for a foreign key .
6126	Adds a value to an array .
6127	Collapse the given array .
6128	Read a value from an array .
6129	Fetch a value from an array .
6130	Retrieve a value from an array .
6131	Applies a callback to an array .
6132	Explode the pluck parameters into an array .
6133	Compute the levenshtein distance of a word
6134	Capitalize a string
6135	Convert a string to upper case .
6136	Format a Location .
6137	Create a Url instance
6138	Get composer command .
6139	Build request params
6140	Build the HTTP headers .
6141	Build the proxy URI .
6142	Build the cookies .
6143	Register model events .
6144	Register a model event .
6145	Boot the model events
6146	Remove event listeners .
6147	Creates a new location model query .
6148	Gets a location by its identifier .
6149	Get a location by its slug .
6150	Set a message .
6151	Overlay a message .
6152	Clear all messages .
6153	Add a task .
6154	Registers all services
6155	Register prefix .
6156	Register storage service
6157	Boot the module .
6158	Adds a LIKE condition
6159	Pluck dates from a column .
6160	Find a record by id .
6161	Retrieve the current user .
6162	Logout the user
6163	Logs in a user
6164	Retrieve a user from the database .
6165	Retrieve a user by their credentials .
6166	Register database profiler
6167	Register view profiler .
6168	Create migration file .
6169	Get events to be recorded .
6170	Dump an array
6171	Get variable id
6172	Generate array hash
6173	Check array recursion
6174	Check object recursion
6175	dump a variable
6176	Main action .
6177	Describe route .
6178	Add directories .
6179	Normalize class name to lowercase .
6180	Loads class .
6181	Require a class .
6182	Load the package s manifest .
6183	Writes the manifest .
6184	Load the messages from the registered drivers .
6185	Load a translation file .
6186	Set query constraint .
6187	Parse read data .
6188	Create new query instance
6189	Returns true if STDOUT supports color support .
6190	Apply colors to text .
6191	Get ran migrations .
6192	Get migrations .
6193	Run all pending migrations .
6194	Run the migration up .
6195	Get migrations for rollback .
6196	Rollback migrations .
6197	Rollback migrations .
6198	Rollback migrations .
6199	Run a migration down .
6200	Prepend to the database .
6201	Get migration files .
6202	Clears the loader .
6203	Defines a primary key .
6204	Defines a new column .
6205	Creates a timestampable field .
6206	Add a soft deleteable field .
6207	Adds a new column .
6208	Describes the column type .
6209	Check if option exists .
6210	Check if parent id is the same as parent .
6211	Scope the query to live posts .
6212	Get path attribute .
6213	Create a Phalcon instance .
6214	Generate the configuration
6215	Returns SQL to rename a table
6216	Boot the hasPermalink trait .
6217	Get the slug key name .
6218	Find similar slugs .
6219	Executes a SQL query .
6220	Execute an SQL statement .
6221	Describes the columns for a table .
6222	Executes a SELECT query and returns one result .
6223	Execute a query and return all results as an array .
6224	Creates a new INSERT query .
6225	Creates a new UPDATE statement .
6226	Creates a DELETE query .
6227	Add a limit statement
6228	Check if a table exists .
6229	Determine if a view exists .
6230	Creates a new database table .
6231	Creates a view .
6232	Drop a view .
6233	Adds a new column .
6234	Adds a column to a table .
6235	Drop a column from a table .
6236	Adds an index to a table .
6237	Drop an index from a table .
6238	Adds a primary key .
6239	Drop primary key .
6240	Adds a foreign key .
6241	Drop a foreign key .
6242	Describes the indexes for a table .
6243	Describes the references for a table .
6244	Define options for a table .
6245	Get query panel .
6246	Adds a new column to the schema .
6247	Modifies a column .
6248	Drops a column .
6249	Drops an index .
6250	Adds a primary key .
6251	Drops a foreign key .
6252	Creates a new database table .
6253	Creates a new view .
6254	Drops a table
6255	Drops a view .
6256	Bind paths in container .
6257	Has database connection .
6258	Registers the logger
6259	Bootstrap notifications .
6260	Get the fillable attributes .
6261	Determine if the given key is fillable .
6262	Convert an amount from one currency to another .
6263	Check if currency is active .
6264	Get all currencies .
6265	Register a set of modules
6266	Attaches a listener
6267	Generate a new password reset code .
6268	Complete password reset password
6269	Checks if the password reset code is valid .
6270	Complete user activation
6271	Prompts the user for input
6272	Register currency .
6273	Add middleware to the route .
6274	Creates a middleware instance .
6275	Get the ReflectionClass for a class .
6276	Set the value of a property .
6277	Gets the value of a property .
6278	Invoke method .
6279	Save data to cache .
6280	Determine if a cache key exists .
6281	Get user currency .
6282	Checks if two Coordinates are equal .
6283	Render block .
6284	Bind an event to an event .
6285	Sort events by name .
6286	Unbind an event
6287	Fires an event
6288	Get the DI container
6289	Check if header exists
6290	Set HTTP headers .
6291	Build HTTP headers .
6292	Check if two coordinates match .
6293	Get detailed message from exception .
6294	Main entry point .
6295	Register session services
6296	Converts this instance to a DateTime object .
6297	Prepare output file .
6298	Get the code of a file .
6299	Parse a configuration file .
6300	Registers all database services
6301	Get node data by id
6302	Filters the query by ancestor of the given node .
6303	Add WHERE BETWEEN condition
6304	Appends WHERE clause to the query .
6305	Gets the descendants of a model .
6306	Select the depth of the query .
6307	Wrap columns .
6308	Check if node has children
6309	Set default order .
6310	Moves a node .
6311	Make a new tree .
6312	Patch columns .
6313	Generate a patch for a column .
6314	Count errors .
6315	Fixes tree structure
6316	Rebuild the tree
6317	Boot the Purgeable trait .
6318	Add attributes to purgeable .
6319	Purges the attributes of the model .
6320	Get the original purge value .
6321	Get a value from the bag .
6322	Set item value .
6323	Remove an item from the bag .
6324	Saves the cache .
6325	Loads the cache .
6326	Compile function .
6327	Run the task .
6328	Handle after event
6329	Adds a HTTP header to the response
6330	Get the rate limiter
6331	Update the model .
6332	Log a migration .
6333	Create the migration repository .
6334	Get the database connection .
6335	Get database name
6336	Set an attribute
6337	Append an attribute to the attribute map
6338	Set html content .
6339	Add content to element
6340	Register a list of commands .
6341	Generate http routes cache
6342	Get a list of queries
6343	Check if the cache has too many attempts
6344	Hit cache .
6345	Retrieve the number of attempts for a cache entry .
6346	Clear cache by key
6347	Get time in cache
6348	Generate the cache
6349	Register the native filesystem .
6350	Set the facade instance .
6351	Receive a mock .
6352	Create a fresh mock instance .
6353	Determine if the facade is a mock .
6354	Resolve facade instance .
6355	Process select .
6356	Process selectAll .
6357	Parse template content .
6358	Process update .
6359	Attach all events
6360	Detach all events
6361	Geocode query .
6362	Reverse a query .
6363	Get the status for a list of ran migrations .
6364	Main action .
6365	Get http routes informations
6366	Set cURL options
6367	Parse curl infos
6368	Compile the constants .
6369	Start the process .
6370	Wait for the process .
6371	Stop the process .
6372	Close the process .
6373	Start the process .
6374	Optimizes the autoload process .
6375	Generate the output file
6376	Sets the value of a property in an array .
6377	Read a property from an object .
6378	Get a property from an object .
6379	Get a value from an object .
6380	Set a value in an object .
6381	Register error handler
6382	Error handler .
6383	Handle an error
6384	Resolve migration class .
6385	Determine if the log should be logged .
6386	Enable files in the log file system
6387	Use daily files .
6388	Register the logger .
6389	Sets up properties
6390	Logs error message
6391	Adds a page item to the list
6392	Get a single property
6393	Set a property .
6394	Set properties .
6395	Get the original value of a property .
6396	Check if the given property has a cast .
6397	Returns an array of dirty properties
6398	Create navbar header
6399	Adds a dropdown submenu to the menu .
6400	Add a button
6401	Flush all pending status messages .
6402	Adds an item to the body .
6403	Add CSS to the stylesheet
6404	Get a gravatar url
6405	Set the value at the given key .
6406	Get the database connection
6407	Get the locale instance .
6408	Add parameters to url
6409	Linkify links .
6410	Adds table footer columns
6411	Include css file
6412	Get the URL of the current request .
6413	Build post data .
6414	Get available locales
6415	Convert language code to default locale
6416	Sets the current locale .
6417	Setup a property .
6418	get all status messages
6419	Gets a list of Country objects in the Library
6420	Adds a new page element to list group
6421	Set the object name .
6422	Set the color of a string
6423	Get the color for the given type .
6424	Performs a GET request .
6425	Sends a POST request to the specified Context .
6426	Creates a DELETE request .
6427	Get the key of the current model
6428	Unset a single column
6429	Reindex data by column name
6430	Draws the pageParts
6431	Sets up context
6432	Get the count of items in the body
6433	Check if the body is empty .
6434	Add slashes to a string
6435	Connect to the database
6436	generate INSERT query
6437	Prepare select conditions
6438	Set object to object
6439	add a slide
6440	Finalize the widget
6441	Add a message to all registered loggers .
6442	Add Status Object
6443	Get tag name
6444	Get a tag property
6445	Finalizes the modal
6446	Clone the runner .
6447	Add ajax tab
6448	Echoes a trace
6449	Attaches an observer to the observable .
6450	Attaches an observer
6451	Detach an observer from an event .
6452	Detach all events for an observer
6453	Validate a Pod .
6454	Returns the connection
6455	Get driver instance
6456	Generate a binding parameter .
6457	Convert driver exception to array
6458	Creates a database .
6459	Deletes a database .
6460	Returns information about a database connection .
6461	Lists all databases in the current connection
6462	Returns the database connection .
6463	Set the connection name to use .
6464	Get a Toolbox object
6465	Sets the model formatter .
6466	Load a pod .
6467	Creates a new graph
6468	Rename a collection
6469	Returns information about an index .
6470	Load a vertex
6471	Process a save result
6472	Convert an array of documents to a Pod
6473	Convert array to Pod
6474	Convert driver document to pod
6475	Create a vertex
6476	Create edge
6477	Create a document
6478	Setup the model for a pod .
6479	Determine if the given model was stored .
6480	Adds a transaction
6481	Validates type .
6482	Array map function .
6483	Crawl a page .
6484	Parse url from node .
6485	Parse image from node .
6486	Parse HTML content .
6487	Parse the date from the given node .
6488	Loads a class
6489	Start the coverage .
6490	Initializes the config .
6491	Create Edge Edge
6492	Returns an array of Inbound Edges
6493	Convert object to driver document
6494	Encode an object .
6495	Creates a new collection .
6496	Deletes a collection .
6497	Renames a collection .
6498	Deletes a collection .
6499	Returns information about a collection
6500	Returns the statistics for a collection
6501	Returns the number of documents in the collection .
6502	Loads a collection
6503	Unloads a collection
6504	Get index information
6505	Get the list of geo fields for a collection
6506	Find a collection of entities
6507	Returns the collection name for the given type
6508	Deletes a user
6509	Returns user information .
6510	Deletes all AQL UserFunctions for a namespace
6511	Lists all registered user functions
6512	Returns the current version of the driver .
6513	Returns the current server version .
6514	Returns the timestamp of the current time .
6515	Set a specific property
6516	Remove a specific property
6517	Get a system property value
6518	Set the document id
6519	Set the distance and longitude coordinates .
6520	Reset the meta data .
6521	Returns an array representation of this document .
6522	Convert to JSON .
6523	Serialize the transaction
6524	Convert object to driver document
6525	Load data from driver
6526	Load data from array
6527	On event .
6528	Set the To model
6529	Gets the ID of the recipient .
6530	Set the from model
6531	Gets the id of the from_id
6532	Convert object to driver document
6533	Start a new transaction .
6534	Commits all pending operations .
6535	Clears all active transactions .
6536	Add a read collection
6537	Add a write collection
6538	Pauses the current transaction .
6539	Resumes the current transaction .
6540	Add a command
6541	Searches for commands by action and object
6542	Generate a random ID .
6543	Create a new graph
6544	Deletes a graph .
6545	Get information about a graph
6546	Returns an array of outbound Edges for a vertex
6547	Returns an array of filters
6548	Renders the filterbox
6549	Render all filters .
6550	Open a filter container .
6551	Closes a container .
6552	Open filter form
6553	Render the closing form
6554	Returns true if filter is active
6555	Render a filter button .
6556	Renders a reset button .
6557	Renders a back - to - list button .
6558	Get the store key for persist .
6559	Check if a filter parameter is valid .
6560	Returns an array of conditions for a fulltext search .
6561	Flattens a value options array .
6562	Returns a list of available filters
6563	Generate a redirect URL from posted data .
6564	Add filter params to url
6565	Set default filters
6566	Build a prepared statement
6567	Reduces the collection to a single value
6568	Checks if the given type is valid .
6569	Sets the value cast to the supplied type .
6570	Register bugsnag .
6571	Make a new client .
6572	Setup user detection .
6573	Setup client paths .
6574	Add stub .
6575	Add a stub to the pipeline .
6576	Creates a new pipeline with the given iterable .
6577	Set the keys in the collection .
6578	Returns a slice of the collection .
6579	Sorts the collection using the given comparator .
6580	Set multiple variables .
6581	Set variable .
6582	Get pathname of page
6583	Get script tag by name
6584	Checks if a script list is allowed to be used for inclusion .
6585	Converts a UTF - 8 string to a list of characters .
6586	Generates fake users .
6587	Get all layouts paths .
6588	Add global variables .
6589	Process all pages .
6590	Set a param in the feed
6591	Extracts param from SimpleXMLElement
6592	Run a git command .
6593	Sorts by date
6594	Remove item from feed
6595	Replaces an item with another feed .
6596	Merge another feed
6597	Slice items .
6598	Get all conflicting users .
6599	Insert a new record into the database .
6600	Writes feed items to XML
6601	Set the current buffer
6602	Fetch the schedule .
6603	Sort by date .
6604	Imports data from config
6605	Set data from data .
6606	Sets the source directory .
6607	Sets the destination directory .
6608	Finds the layout for a page .
6609	Returns fallback for a page .
6610	Parse the document .
6611	Returns section name
6612	Returns the permalink
6613	Setter for config
6614	Build all steps .
6615	Get current version
6616	Filter pages by variable
6617	Sorts an array by date .
6618	Creates a URL for a page .
6619	Minify CSS file .
6620	Converts a file to CSS .
6621	Get readtime .
6622	Hash a file .
6623	Collect pages .
6624	Render RSS feed
6625	Load an RSS feed
6626	Sniff the given input .
6627	Check if input is valid
6628	Sniff all tests .
6629	Run the sniff .
6630	Save a schedule .
6631	Render an RSS feed
6632	Creates a channel node .
6633	Get the author of feed item .
6634	Get URL for feed item .
6635	Checks if the given string contains XML syntax markers .
6636	Collect taxonomies from pages .
6637	Creates node pages .
6638	Compile the views .
6639	Compile all views in the given path .
6640	Compile a single view file .
6641	Generate diff .
6642	Parse a diff .
6643	Boot the application .
6644	Finish the application .
6645	Register active extensions .
6646	Register after event .
6647	Register service providers .
6648	Writes the manifest file .
6649	Register deferred service provider .
6650	Register queue service provider .
6651	Activate an extension .
6652	Map extension aliases .
6653	Register domain awareness .
6654	Detect application .
6655	Get an option value .
6656	Publish extension .
6657	Register extension .
6658	Get route by name .
6659	Activate an extension .
6660	Refresh the active extensions .
6661	Reset all active extensions .
6662	Determine if the given field should be excluded .
6663	Create an instance of Orchestra Platform driver .
6664	Bootstrap the application .
6665	Bootstrap extension configuration .
6666	Bootstrap the form .
6667	Register bootstrap menu handler .
6668	Bootstrap the sidebar placeholders .
6669	Bootstrap validation rules .
6670	Attach listener on event .
6671	Initiate the theme .
6672	Set theme .
6673	Boot theme .
6674	Resolve theme .
6675	Get all available theme paths .
6676	Get manifest files for a given theme .
6677	Validate the provided theme .
6678	Get available theme .
6679	Render a macro .
6680	Filters a value according to the configured format .
6681	Verify mode .
6682	Add path .
6683	Detect application extensions .
6684	Get the manifest contents .
6685	Generate the manifest config .
6686	Get composer lock data .
6687	Guesses the extension name from the manifest .
6688	Guess extension path .
6689	Resolve the package namespace .
6690	Validate an extension name .
6691	Register the view finder .
6692	Register theme .
6693	Detect all themes .
6694	Set current theme .
6695	Set theme resolver .
6696	Register the extension factory .
6697	Register extension config manager .
6698	Register the extension finder .
6699	Register the status checker .
6700	Execute the callback .
6701	Get the scheme .
6702	Set the domain handle .
6703	Get domain .
6704	Get the domain group .
6705	Determine if the current URI matches the given pattern .
6706	Get route prefix .
6707	Get the root .
6708	Get the base URL .
6709	Resolve the base URL from the given root .
6710	Parse a YAML string .
6711	Check for duplicate keys
6712	Registers a plugin .
6713	Deactivates a plugin .
6714	Register extension providers .
6715	Register extension plugin .
6716	Boot the application .
6717	Start the event .
6718	Fire extension event .
6719	Get the autoload files .
6720	Load autoloader file .
6721	Processes deprecated comment .
6722	Start the application .
6723	Generate a log message .
6724	Generate call trace
6725	Add an alert .
6726	Make a daemon process
6727	Fork process .
6728	Get the slug of this object
6729	Check if the slug is changed
6730	Sends the HTTP headers .
6731	Sets a cookie .
6732	Clear all cookies .
6733	Make request .
6734	Store the uploaded files in the given location .
6735	Exclude the given list of arguments
6736	Return an array with a regular expression .
6737	Return an array without htmlspecialchars
6738	creates a new array
6739	Removes all cache entries
6740	Combine less files
6741	Connect to the server .
6742	Execute an SSH command
6743	Determine if the client is a client server .
6744	Tries to find out the IP filter
6745	Create a named pipe
6746	Registers a Deployer .
6747	Gets the deployer .
6748	Adds a server .
6749	Set a list of servers .
6750	Gets a server .
6751	Deploy a server
6752	Returns an array of options .
6753	Processes the opening tag .
6754	Generate slug for ajax action
6755	Handle AJAX request .
6756	Trigger AJAX callback .
6757	Handle ajax request .
6758	Get post request parameter
6759	Generate a random hex string .
6760	Start the application .
6761	Clear all session variables
6762	Checks if a string is serialized .
6763	Handle slug action
6764	Add method .
6765	Updates the session
6766	Clear all session data
6767	Verifies a PHP session .
6768	Open a session
6769	Garbage collection .
6770	Match route .
6771	Get data page
6772	Checks if the model belongs to the given page .
6773	Load class metadata .
6774	Create the condition event .
6775	Initialize plugin instances
6776	Get plugin list
6777	Loads the Twig environment
6778	Set default language
6779	Check if the token is valid
6780	Loads a template and returns it .
6781	Adds a javascript variable to the script .
6782	Add a js file
6783	Add styles to the page
6784	Get file content
6785	get content with template
6786	get all scripts from config
6787	get all css assets
6788	Get path to install folder
6789	Checks if the current controller action is allowed to be performed .
6790	Get the access list for all roles
6791	Get roles chain
6792	Get user language
6793	Translate a choice .
6794	Get translation for given locale .
6795	Get translation file
6796	Get translation for id
6797	Get basic translation for given id and number .
6798	Generate a toggle command .
6799	Build the commands for a given attribute .
6800	Handle all translated attributes .
6801	Main entry point
6802	Prepare and return controller action
6803	Execute the ACL
6804	Execute auth
6805	Execute the routing rule .
6806	Set and app libraries
6807	Get a library instance
6808	Creates the core and controller
6809	Calls a method and returns the result
6810	get function arguments
6811	Get the role and user associated with the given token .
6812	Get role and user from id
6813	Returns current selected options .
6814	Set a bulk of input from an array of parameters
6815	Retrieve a parameter from the request
6816	Filters a variable
6817	Opens database connection
6818	Close a connection
6819	Execute a select query
6820	Executes a SELECT query and returns an associative array .
6821	Executes an INSERT query .
6822	Execute a delete query .
6823	Executes a SQL UPDATE query .
6824	Logout user .
6825	Sets the user id
6826	Sets the username
6827	Sets the role id
6828	Sets the role name
6829	Validates the value against the given method
6830	Returns an array of installed plugins .
6831	Search plugin directories
6832	Searches for a plugin factory class
6833	Checks if a file implements a plugin interface .
6834	Returns a string representation of a closure .
6835	Execute a closure .
6836	Execute a single command .
6837	Runs a command for Windows .
6838	Set the path to the autoloader .
6839	Check if the process is running .
6840	Kill process .
6841	Resets all log entries
6842	Create url from string
6843	Returns the best available image driver
6844	Builds the image
6845	Get proportional width
6846	Get proportional height
6847	Formats a number of bytes .
6848	Format bytes .
6849	Create a new session .
6850	Initialize driver instance
6851	Parse incoming request
6852	Generate the URL for the request .
6853	Gets a server parameter .
6854	Get the default input definition .
6855	Register commands .
6856	Get model path
6857	Add force option .
6858	Add model argument
6859	Validate model argument .
6860	Add table argument .
6861	Validate table argument .
6862	get model instance
6863	Generate file .
6864	Handle the request .
6865	Is seekable?
6866	Creates a parser with the given content type .
6867	Adds a new body parser .
6868	Add module argument
6869	Add controller argument .
6870	Creates a request .
6871	Creates a server request .
6872	Creates a new stream .
6873	Create a stream from a file .
6874	Creates a new uploaded file .
6875	Create Uri object from given string .
6876	Formats a number in bytes .
6877	Formats a number .
6878	Normalize bytes .
6879	Normalizes the precision .
6880	Returns an instance with the specified method name .
6881	Set Uri .
6882	Get target from uri
6883	Add a middleware to the stack
6884	Returns the reason phrase for the given code
6885	Get incoming message .
6886	Get user from incoming message .
6887	Get file extension
6888	Normalize a filename
6889	Returns the contents of the stream .
6890	Fix WordPress installation .
6891	Fix WordPress include folder
6892	Fix network admin url .
6893	Fix WordPress double slashes
6894	Adds filters to WordPress .
6895	Set wp folder name
6896	Convert url to full path
6897	URL - encodes a path
6898	URL path decode
6899	Returns the content of a directory
6900	Logs data to the database .
6901	Write a log entry .
6902	Record memory usage
6903	Record time Loader
6904	Write a log section
6905	Flips an array of keys
6906	Set the stream .
6907	Get hash of uploaded file
6908	Get the media type of the uploaded file .
6909	Get query params
6910	Check if request is ajax request
6911	Convert JSON string to Document
6912	Creates an array of entities from given array
6913	Creates actions from data array
6914	Creates an array of Field objects from the given array .
6915	Creates a Link object from an array of links .
6916	Sends a request .
6917	Call the given request .
6918	Prepare cURL options
6919	Set the URL for the request .
6920	Set request headers .
6921	Creates a PSR - 7 response .
6922	Splits the header and body of the response
6923	Parse HTTP headers .
6924	Count the total number of logs for a specific log type .
6925	Display the current page
6926	Gather files from files .
6927	Gathers data from GET section
6928	Gathers POST data from POST data .
6929	Gather session data from session .
6930	Get current microtime
6931	Returns summary of a log entry
6932	Create files array .
6933	Create an instance of UploadedFile .
6934	Flips an array of keys
6935	Recursive array merge recursively
6936	Add session driver .
6937	Add a new menu item .
6938	Show form for adding or editing .
6939	Attempt to edit an object .
6940	Redirect to edit form
6941	Set order .
6942	Deletes a record
6943	Get uploaded files .
6944	Return an instance with the specified uploaded files .
6945	Check uploaded files .
6946	Load HTTP headers .
6947	Return an instance with the specified attribute .
6948	Returns a new instance without the specified attribute .
6949	Checks if the last modification time is met
6950	Get a specific header .
6951	Sets the HTTP status code .
6952	Execute the middleware .
6953	Get MySQL version
6954	Authenticate a user .
6955	Find all active users
6956	Find all deactivated users
6957	Create a new user
6958	Get metric option .
6959	Set current language from post id .
6960	Check if a container is encrypted .
6961	Check if string is encrypted .
6962	Dump class .
6963	Export array as PHP code
6964	Run the pre - global process .
6965	Runs the post - global process .
6966	Creates an exception for the given token types .
6967	Make a new container
6968	Recover a record
6969	Processes new class extensions
6970	Processes new config classes
6971	Processes the configuration class .
6972	Process class .
6973	Sets the definitions .
6974	Gets a definition .
6975	Removes a definition .
6976	Sets the configuration classes .
6977	Generates all the Containers .
6978	Dump the container .
6979	It returns the inner value
6980	Set the address .
6981	Send a notice .
6982	Make a call .
6983	Create a response from an exception .
6984	Parse HTTP response .
6985	Sends a request to PerformerPermission .
6986	Wait for subscriber .
6987	Send a notification to the subscriber .
6988	Format layout template files .
6989	Save configuration to file .
6990	Dasherize a string
6991	Get a slice of the string .
6992	Get array of indices .
6993	Returns the value for the given option .
6994	Validates an array of values .
6995	Creates an option .
6996	Defines the reply to the reply stack .
6997	Get the value of a property .
6998	Get matchers .
6999	Compare two images
7000	Creates a gif for comparing images
7001	Create comparison image on different images
7002	Determine if the image is the same as the same .
7003	Add route for POST method
7004	Add a route to the routing table
7005	Match a route
7006	Run the router .
7007	Redirect to another URL
7008	Parse route parameters
7009	Get the date from a file .
7010	Handle save image
7011	Make a GET request .
7012	Make a POST request .
7013	Set authentication header
7014	Get configuration value .
7015	Validate config .
7016	Get excerpt from text
7017	Handle errors .
7018	Get all content extensions .
7019	Validates Widget Id .
7020	Set User Id
7021	Get all documents .
7022	Appends the given string to the current string .
7023	Prepend a string to the current string .
7024	Check if the string matches the given pattern .
7025	Limits the string .
7026	Generate a UUID .
7027	Joins a string into a string
7028	Converts the string to HTML entities .
7029	Cuts the string
7030	Limits the string .
7031	Truncates the string to truncate .
7032	Convert the string to a container .
7033	Encrypt string .
7034	Create JWT from encrypted string
7035	Convert to a container .
7036	Generate parser from a grammar file .
7037	Set organization settings
7038	Get documents from the current query .
7039	Set the number of results per page .
7040	Set the current page
7041	Convert value to number .
7042	Get a searchable value .
7043	Convert string to boolean .
7044	Get grammar .
7045	Create gif command
7046	Creates a command to convert images to gif
7047	Retrieves many tokens from the buffer .
7048	Format the value as a string .
7049	Checks if a property with the given name exists .
7050	Gets a property by name .
7051	Removes a property by name .
7052	Check if the class has a method with the given name .
7053	Gets a method by its name .
7054	Removes a method by name .
7055	Parse meta tags .
7056	Run a hook .
7057	Load all plugins .
7058	Setup the router .
7059	Get item by key .
7060	Set item by key .
7061	Push a value to a key .
7062	Search the collection for a given value .
7063	Items by field .
7064	Remove duplicates .
7065	Get all numeric keys .
7066	Join the collection .
7067	Join by key
7068	Get a list of items from the collection .
7069	Splits the collection into chunks .
7070	Filter the collection using the given function .
7071	Applies a callback to the collection .
7072	Merge items into current collection
7073	Merge array with given key
7074	Increase number of items
7075	Get a random key from the collection .
7076	Get a random item from the collection .
7077	Cuts the collection .
7078	Reject items by callback
7079	Remove a value from the bag .
7080	Reverse the collection .
7081	Group the collection by a given key .
7082	Get subset of collection
7083	Get rest after index
7084	Get rest after key
7085	Returns a new Collection with the given items .
7086	Take a specific key from the collection .
7087	Pull item from collection by key
7088	Returns an array containing the intersection of the current collection .
7089	Return a new instance with the given condition .
7090	Load from JSON .
7091	Create Container from file
7092	Create object from serialized string .
7093	Decode from encrypted data .
7094	Create object from string
7095	Create a where condition .
7096	Returns an array with the given key and value
7097	Convert iterator to array
7098	Get group by key
7099	Filter array recursively .
7100	Remove an item from the collection .
7101	Remove duplicates recursively
7102	Get a value from a key .
7103	Add or edit an object
7104	Returns the option string for the given value .
7105	Extract excerpt from posts
7106	Fetch a value from an array .
7107	Remove a key from an array .
7108	Get a value from an array .
7109	Check if a key exists in an array
7110	Set a value in an array .
7111	Searches for a given value in an array .
7112	Render a javascript library
7113	Deny access denied
7114	Get a new access token
7115	Sets the input ID .
7116	Set the bound of the polygon .
7117	Adds a type .
7118	Removes a type .
7119	Gets the restriction for a given type .
7120	Sets the component restrictions .
7121	Adds a restriction .
7122	Removes a component restriction .
7123	Sets the input attributes .
7124	Set an input attribute
7125	Identiptern .
7126	Convert image to Imagick .
7127	Compress an image .
7128	Compress a SVG .
7129	Compress PNG .
7130	Decode data url
7131	Generate one xpx
7132	Convert file extension to format
7133	Convert format to image extension
7134	convert file extension to mime type
7135	Convert format to compression type
7136	Convert image format to quality
7137	Set file extension
7138	Change file extension
7139	Parse format arguments .
7140	Sends the request to the given URL .
7141	Cleans input data
7142	Get upload limit
7143	Render a circle .
7144	Check if version is valid .
7145	Check if version is valid .
7146	Checks if the given version is a valid stable version .
7147	Create a new CSRF token .
7148	Create a form input .
7149	Verifies the session .
7150	Create request from globals .
7151	Get form data
7152	Returns parsed form data .
7153	Get parsed response
7154	Checks if the given URL URI is valid .
7155	Render a map type .
7156	Get first in email
7157	Get the last part of a name .
7158	Convert name to acronym
7159	convert variable name to var
7160	Checks if a string is HTML .
7161	Validate UUID .
7162	Get the shard id from the given UUID .
7163	Validates shard ID .
7164	Get the type ID from a UUID .
7165	Validates the type ID .
7166	Convert a UUID to a local ID .
7167	Validates a local ID .
7168	Parse a UUID .
7169	Build a 64 bit integer .
7170	Render a Polyline .
7171	Set the center of the circle .
7172	Sets the latitude .
7173	Sets the longitude .
7174	Set if the coordinate cannot be wrapped .
7175	Sets the control position .
7176	Sets the scale control style .
7177	Get the geocoder status .
7178	Get data from cache .
7179	Generate a sub path .
7180	Calculate sha1 keys .
7181	Get object from class name
7182	Match a string against a string
7183	Get template .
7184	Get strength of a password .
7185	Returns a reference to the process .
7186	Checks if the cache is valid .
7187	Checks if the given url matches the given hash .
7188	check map
7189	Check the contents of a file .
7190	Cache memcache
7191	Cache an item
7192	Get map from file
7193	Get map from file
7194	Check if the given URL is local .
7195	Check if variable is valid
7196	Converts a variable to an acronym .
7197	Generate a slug from a variable
7198	Convert a variable to camelCase
7199	Render a Size .
7200	Check if email is role - based on e - mail address .
7201	Parse an address string
7202	Parse email headers
7203	Parse attachments .
7204	Parses a content type to a string
7205	Parses a string representation to a class name
7206	Get the difference between two dates .
7207	Base64 encode .
7208	Decode a base64 encoded string .
7209	Create a new nonce .
7210	Create a hidden input .
7211	Verify a nonce .
7212	Sets the origins .
7213	Returns a human readable representation of the difference between two timestamps .
7214	Returns an array of items from the cache .
7215	Render a Marker .
7216	Build the JSON response .
7217	Render a Marker shape
7218	Renders the scale control style .
7219	Check if slug is valid
7220	Check if slug is reserved
7221	Convert slug to name
7222	Convert slug to var
7223	Sets the coordinates .
7224	Store the cache .
7225	Returns the entire repository .
7226	Parse the template
7227	Set template variables .
7228	Check if file has parent .
7229	Get parent variables .
7230	Get new child template
7231	Overrides default options
7232	Render a rotate control .
7233	Encode a value
7234	Decode HTML entities .
7235	Call controller action .
7236	Render a KML layer .
7237	Retrieve a value from the cache .
7238	Store a value in the cache .
7239	Clear cache by primary key
7240	Generate a new key .
7241	Generate a fully - qualified primary key .
7242	Compare two servers
7243	Add server connections .
7244	Render the html container .
7245	Renders the javascripts for the Autocomplete .
7246	Render an autocomplete .
7247	Register the seed command .
7248	Cleans up the session
7249	Disable gzip compression
7250	Sets the location .
7251	Sets the stopover .
7252	Get the error message for a given error code .
7253	Set file extension .
7254	Change file extension
7255	Checks if an option exists .
7256	Gets an option .
7257	Sets an asset option .
7258	Removes an option .
7259	Modify request attributes .
7260	Sets the zoom control style .
7261	Decode a hash id
7262	Sets the results .
7263	Sets the response status .
7264	Check if string is valid
7265	Determine if the browser is engine .
7266	Normalize a string
7267	Get page url
7268	Sets whether the distance matrix should be avoided .
7269	Set whether the distance matrix should be avoided .
7270	Sets the destinations .
7271	Adds a destination destination .
7272	Adds an origin coordinate .
7273	Sets the region of the request .
7274	Sets the language to use .
7275	Sets the travel mode .
7276	Sets the unit system .
7277	Get the control positions .
7278	Sets the status of the response .
7279	Render an overview map control .
7280	Render a Bound object
7281	Render the extends
7282	Prints all statistics .
7283	Sets the markers .
7284	Sets the view helpers .
7285	Gets a helper by name .
7286	Sets the extension helpers .
7287	Gets an extension helper .
7288	Removes an extension helper .
7289	Renders the HTML container .
7290	Render the stylesheet
7291	Render javascripts
7292	Render js libraries
7293	Render the js before a map
7294	Render JS after a map .
7295	Renders a map
7296	Render js container coordinates
7297	Renders the javascript container .
7298	Render js container points .
7299	Renders the javascript container sizes .
7300	Render a javascript map .
7301	Renders the js container .
7302	Renders the JSON encoded polylines .
7303	Render JS code of ground_overlay .
7304	Render js container
7305	Render js container of Polylines
7306	Renders the js container for a map
7307	Renders the js container .
7308	Render js container images
7309	Render js container markers .
7310	Render js container .
7311	Render KML Container
7312	Render js event manager
7313	Render js container extra .
7314	Render a map .
7315	Renders the map center .
7316	Renders a map bound
7317	Compute the coordinates of a map .
7318	Compute the bounds of a map .
7319	Compute points for a map
7320	Compute the size of the map .
7321	Compute the list of marker images
7322	Compute the markers for the map .
7323	Compute the list of info windows for a map .
7324	Render map controls
7325	Render a map control
7326	Generate a version 1 UUID .
7327	Generate a UUID .
7328	Generate a version 4 UUID .
7329	Generate v4 UUID .
7330	Get package by name .
7331	Iterate over all items
7332	Filter collection by callback
7333	Add package .
7334	Sets the address of the request .
7335	Sets the coordinate .
7336	Set the bound of the polygon .
7337	Sets the region of the request .
7338	Sets the request language .
7339	Load a template .
7340	Get route instance .
7341	Parse YAML .
7342	Sets flags for browser
7343	Sort an array by key
7344	Returns the request method .
7345	Returns the scheme .
7346	Get request host
7347	Get the root host .
7348	Checks if current request is SSL
7349	Is localhost?
7350	Sets the location type .
7351	Returns a regular expression that matches the given characters .
7352	Returns an array of all possible directions .
7353	Overrides the overload data .
7354	Overrides the overridden property data .
7355	Get the overridden property data .
7356	Overload properties
7357	Opens a URL .
7358	Sets the anchor of the marker .
7359	Sets the origin of the marker .
7360	Set scaled size .
7361	Set the size of the image .
7362	Render the InfoWindow
7363	Renders the open tag .
7364	Render the InfoWindow .
7365	Register module providers .
7366	Get an asset path .
7367	Load the routes for the module .
7368	Check if function is callable
7369	Render a groundover .
7370	Emit the HTTP response .
7371	Set a value in the cache .
7372	Get a value from the cache .
7373	Unset a key from the cache .
7374	Unset a pattern
7375	Add a value by reference
7376	Unset object by reference
7377	Unset cache by reference pattern
7378	Render a map type control .
7379	Convert a value to a string
7380	Wrapper for single quotes
7381	Wrapper for double quotes
7382	Renders the map type control style .
7383	Add a signature to a URL
7384	Get a search termHighlighter .
7385	Get shard id from string .
7386	Assigns a string to a shard .
7387	Sets the travel mode .
7388	Sets the prefix variable .
7389	Generate a list of available countries .
7390	Generate dropdown items .
7391	Render a street view control .
7392	Normalize a string
7393	Check if a value matches a regular expression
7394	Normalizes a string .
7395	Replace special characters in a string
7396	Converts a URL to a regular expression pattern .
7397	Sets the width unit .
7398	Sets the height unit .
7399	Generate a new key .
7400	Check if value is valid
7401	Strip query string from url
7402	Parse a query string
7403	build query string
7404	Add a SHA256 signature to a URL .
7405	Remove SHA256 signature from a URL .
7406	Check if a signature is OK .
7407	Sets the coordinates of the marker .
7408	Adds a coordinate to the shape .
7409	Get a customer .
7410	Update a customer
7411	Unit unit conversion .
7412	Get a scope entity by its identifier
7413	Render a scale control .
7414	Generate the url for a geocoder request
7415	Builds a GeocoderResponse from the provided response .
7416	Builds a GeocoderResult object .
7417	Builds the geocoder address components .
7418	Builds a GeocoderAddress component .
7419	Build a GeocoderGeoderGeometry object from the provided object .
7420	Process a distance matrix request .
7421	Generate the url for a given distance matrix .
7422	Parse the response
7423	Builds a response from a raw distance matrix .
7424	Build a list of distances from a set of rows .
7425	Builds a distance matrix response from a row of data .
7426	Builds a distanceMatrixResponse element .
7427	Render a point .
7428	Returns an array of parameter strings .
7429	Returns an array of parameters .
7430	Returns the current HTTP headers .
7431	Send HTTP response headers
7432	Sends no cache headers .
7433	Get status slug .
7434	Get status message .
7435	Sends the status header .
7436	Parse header string
7437	Recursively replace tags in a string
7438	Register migrations .
7439	Register module translations
7440	Set pixel offset
7441	Sets the open event .
7442	Renders a pan control .
7443	Get all mouse events
7444	Set the map type ids .
7445	Adds a map type id .
7446	Sets the map type control style .
7447	Set a cookie .
7448	Gets the value of a cookie .
7449	Render dom event
7450	Render dom event .
7451	Render an event .
7452	Render an event listener .
7453	Renders the animation .
7454	Render a zoom control .
7455	Sets the maximum execution time .
7456	Check if slug is valid .
7457	Returns all address components .
7458	Sets the address components .
7459	Sets the partial match .
7460	Generate a Gravatar URL .
7461	Set the center of the map .
7462	Returns whether a map option exists .
7463	Set map options .
7464	Gets a map option .
7465	Sets a map option .
7466	Removes a map option .
7467	Returns whether a stylesheet option exists .
7468	Set stylesheet options .
7469	Gets a stylesheet option .
7470	Sets a stylesheet option .
7471	Removes a stylesheet option .
7472	Set map type control
7473	Set the overview map controls .
7474	Sets the pan control .
7475	Sets the rotate control option .
7476	Set the scale control
7477	Set the street view control
7478	Set the zoom control
7479	Add a marker .
7480	Add an info window
7481	Add polyline
7482	Add an encoded polyline
7483	Add polygon .
7484	Add a rectangle .
7485	Add a circle
7486	Add a ground overlay .
7487	Saves a value to the cache .
7488	Deletes the cache .
7489	Set whether the directions should be avoided .
7490	Set whether the Directions should be avoided .
7491	Sets the destination .
7492	Set whether or not the Directions should be optimized .
7493	Sets the origin of the request .
7494	Sets whether or not the directions are available .
7495	Sets the region region .
7496	Sets the language code .
7497	Sets the travel mode .
7498	Sets the unit system .
7499	Set an array of waypoints
7500	Add a new Waypoint
7501	Check if the travel is valid
7502	Make a POST request to the specified URL .
7503	Log an issue .
7504	Log a review .
7505	Write log file lines
7506	Cleans the log event
7507	Rotate log files
7508	Get the response from the url .
7509	Parse document .
7510	Build a document .
7511	Parse a single section .
7512	Parse the YAML metadata .
7513	get query var
7514	Get a template
7515	Get a remote instance .
7516	Generate a remote hash .
7517	Convert a string to ASCII .
7518	Returns the status of the result set .
7519	Strip leading characters from a string
7520	Sets the steps .
7521	Renders a route .
7522	Builds the DirectionsResponse object from the given response .
7523	Builds the directions routes .
7524	Builds the directions route .
7525	Builds the directionsLegs .
7526	Builds a DirectionsLeg object from the API .
7527	Builds directions steps .
7528	Builds a DirectionsStep object from the JSON response .
7529	Lightens the color .
7530	Darkens the color .
7531	Set the color saturation .
7532	Desaturate color .
7533	Combine this color with another color .
7534	Starts a new session .
7535	Check if version is valid .
7536	Check if developer version is valid .
7537	Check if the given string is a stable version .
7538	Format the date .
7539	Get time for given version
7540	Return an instance with no - cache headers .
7541	Respond with success status
7542	Response with error .
7543	Output the response .
7544	Set the list of legs
7545	Sets the warnings .
7546	Sets the list of waypoints
7547	Renders the zoom control style .
7548	Gets metadata by key .
7549	Issues an access token
7550	Handle a resource request
7551	Get access token repository
7552	Add slashes to the path
7553	Remove slashes from a string
7554	Render Google Maps .
7555	Sets the elements .
7556	Render a control position .
7557	Get current IP address
7558	Get the region of an IP .
7559	Get the country of an IP address .
7560	Check if request is ajax .
7561	Check if request is api
7562	Get the current action name
7563	Check if action is being executed
7564	Subscribe a new user to a list .
7565	Get a member by email
7566	Update a user s status
7567	Delete a user from a list
7568	Generate a SHA1 hash of a string .
7569	Adjust the luminosity of a color
7570	Cleans hex .
7571	Remove numeric config arrays
7572	Creates request instance .
7573	Create request body
7574	Recursively removes numeric arrays
7575	Render a rectangle .
7576	Convert an array to html .
7577	Convert an array to a DOMElement
7578	Renders a Marker .
7579	Generate the license key .
7580	Get the libraries for a map .
7581	Escapes the order .
7582	Serialize a Closure .
7583	Unserialize a closure
7584	Serialize value to string
7585	Unserialize a value
7586	Render embedly .
7587	Get cached embed data
7588	Parse oEmbed via WordPress .
7589	Render a javascript polyline .
7590	Set the southwest coordinates of this object .
7591	Set the northEast of the bounding box .
7592	Returns the center of the polygon .
7593	Convert abbbibble to bytes
7594	Get the number of bytes from a remote server .
7595	Converts an array of URL components into a string .
7596	Render a coordinate .
7597	Render a MarkerImage
7598	Parse a string to pluralization
7599	Pluralize an array of XML elements
7600	Invalidate an exception for the given distance matrix request .
7601	Parse a host name into an array
7602	Parses an array of parts .
7603	Sets the marker position .
7604	Sets the marker animation .
7605	Sets the marker icon .
7606	Sets the shadow image .
7607	Sets the marker shape .
7608	Header ID callback
7609	Get first image url from markdown .
7610	Convert attributes to string .
7611	Sets the bound of the rectangle .
7612	Get error message .
7613	Get error messages
7614	Get error data
7615	Add error message
7616	Adds a coordinate to the polygon .
7617	Load HTML .
7618	Minify CSS code .
7619	Indent a node .
7620	Adds the organization reference to the document .
7621	Creates a view model for the password form
7622	Get the organization entity
7623	Create error view model
7624	Add blade file
7625	Reverse styles order
7626	Add the first asset to the engine
7627	Add after script
7628	Add meta data .
7629	Render meta tags .
7630	Controller action .
7631	Load a file .
7632	Create the query for the given parameters .
7633	Processes an email .
7634	Validates email address .
7635	Load user by email
7636	Load the organization .
7637	Proxy method .
7638	Gets the cursor cursor for an organization .
7639	Find an organization by name
7640	Find user by id
7641	Find by Employee
7642	Create an organization with the given name
7643	Find a draft .
7644	Initializes the contact form
7645	Check if user is employee .
7646	Update the permissions of the organization
7647	Set organization name
7648	Set user permissions
7649	Get the image
7650	Set contact .
7651	Get all employees
7652	Get employee by id or id
7653	Get all employees by role .
7654	Set creation options .
7655	Initializes the employees .
7656	Get formular
7657	Returns the URI of the image .
7658	Stores the organization image .
7659	Extract properties from object
7660	Hydrate a value .
7661	Check if the user has create permission for the given role .
7662	Configure company form
7663	Ensure that the order number is correct .
7664	Encrypts 3DES data
7665	Create Merchant Signature Notification Notifications
7666	Validates the notification signature
7667	Signs the payment parameters
7668	Make an HTTP request
7669	Get ticket articles for a ticket
7670	Make an HTTP request .
7671	Make a POST request .
7672	Make a PUT request .
7673	Get article for ticket
7674	Get the value of a specific key
7675	Get a single object
7676	Get all objects
7677	Create the object .
7678	Update the object .
7679	Delete the object .
7680	Get the URL for a method
7681	Get details about an object
7682	Method to add a ticket
7683	Search for a specific search term .
7684	Remove a ticket
7685	Deletes a shared memory block .
7686	High level function to fetch the proxy type .
7687	Get connection info
7688	Execute the loop .
7689	Execute request .
7690	Iterate over all items in the collection .
7691	Get an item from the collection .
7692	Get a copy of this copy
7693	Fetch data from the SDK
7694	Validates the rights .
7695	set a parameter
7696	Add multiple params
7697	Make request transaction
7698	Save photos .
7699	Start callback .
7700	Get access token
7701	Convert hits to items .
7702	Search by query .
7703	Replaces all dots except the last 3 digit .
7704	Replaces all dots except the last one .
7705	Replaces all dots except the last one .
7706	Convert IntlFormatter to malot formatter
7707	Convert malot formatter to intl format
7708	Adds picker configuration .
7709	Bind the Alexa request to the container .
7710	Register the middleware .
7711	Resumes the audio file .
7712	Get the AlexaRequest instance .
7713	Add the middleware to the beginning of the request .
7714	Check if a route matches the given request .
7715	Creates a new AlexaRoute instance .
7716	Get session value
7717	Update a slot
7718	Get the validators .
7719	Compile the route into a string .
7720	Get the certificate from the request .
7721	Prepare response data .
7722	Send a request through the router .
7723	Gather the application middleware .
7724	Persist the certificate .
7725	Retrieve a certificate from store .
7726	Calculates the file path for the given certificate .
7727	Set custom protected words
7728	Capitalize a string
7729	Normalize input .
7730	Process string parts
7731	Process first sentence words in parts .
7732	Process the last word in parts .
7733	Process a word
7734	Replace a string with a replacement .
7735	get a list of professional suffixes
7736	Breaks an array of words
7737	Check if a word is salutation
7738	Check if a word is a line suffix
7739	Generate PHP code for emoji constants .
7740	Pops a string .
7741	Convert a string to emojify .
7742	Get the first word from a string .
7743	Check if value is string .
7744	Get the last word from a string .
7745	Converts a string to lowercase .
7746	Markdown .
7747	Read time .
7748	Convert text to smartypants .
7749	Gets the substring after the first occurrence of a separator .
7750	Gets the substring after the last occurrence of the given separator .
7751	Gets the substring before the first occurrence of the given separator .
7752	Gets the substring before the last occurrence of the given separator .
7753	Converts a string to title .
7754	Trim a string .
7755	Trim the beginning of the string .
7756	Trim a set of characters .
7757	Convert a string to typogrify .
7758	Converts a string to upper case .
7759	Make widont
7760	Get setting by name
7761	Get icon from extension .
7762	Convert to array .
7763	Display blog blog .
7764	Show post .
7765	Store a newly created tag in storage .
7766	Show form for editing tag .
7767	Update the tag in storage .
7768	Remove the tag from storage .
7769	Display backend .
7770	Clear the cache .
7771	Handle the download process .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Publish blog configs .
7775	Handle translation .
7776	Register views .
7777	Show blog profile .
7778	Update the specified user profile .
7779	Saves the user login .
7780	Get the current browser version
7781	Get post fill data .
7782	Enable an extension .
7783	Disable an extension .
7784	Uninstalls an extension .
7785	Run the migration .
7786	Get enabled bootstrappers .
7787	Sanitise input .
7788	Display home page .
7789	Get post fields from model .
7790	Get tag index data .
7791	Normalize blog posts .
7792	Store a newly created post .
7793	Update post .
7794	Publish a theme .
7795	Publish theme views .
7796	Removes the theme
7797	Get the default theme .
7798	Get active plugin
7799	Get route middleware
7800	Get route middleware
7801	Get admin middleware
7802	Get blog main
7803	Get blog prefix
7804	Get admin prefix
7805	Get auth prefix
7806	Get password prefix
7807	Index action .
7808	Get the XML representation of the transaction .
7809	Scan file .
7810	Multiscurrency file
7811	contScan file
7812	Receive a response from the server
7813	Process single file .
7814	Validates a single file
7815	Sanitizes a file name .
7816	Deletes a file
7817	Move uploaded file to destination
7818	Get list of themes .
7819	Get asset path
7820	Get asset version
7821	Get the path to the theme .
7822	Make a directory .
7823	Make a file .
7824	Get the path to the assets folder .
7825	Get a template .
7826	Create new assets .
7827	Fetch the translation of a message
7828	Update a translation .
7829	Flags a translation .
7830	Create an asset .
7831	Download all translations .
7832	Upload all translations .
7833	Synchronize all translations .
7834	Loads messages .
7835	Copies values from parent to a project .
7836	Adds a hash for a script type
7837	Get the value of the attribute .
7838	Search class map .
7839	Search a PSR - 4 map .
7840	After save callback .
7841	Before the query .
7842	After query has finished .
7843	Synchronize a collection of products .
7844	Synchronize a list of products .
7845	Find a single product item .
7846	Check integrity of item .
7847	Build item data .
7848	Fill entity attributes
7849	Setup default criteria .
7850	Perform action
7851	Do before or after action .
7852	Validates the given action .
7853	Performs a query .
7854	Set paginate
7855	Toggles exceptions .
7856	Apply criteria to query
7857	Update an entity .
7858	Fetch a list of records .
7859	Find by key
7860	Finds a single entity by criteria .
7861	Get objects by criteria .
7862	Get objects by their keys
7863	Returns a list of rows .
7864	Create a new query with the given attributes .
7865	Replaces config value placeholders in a given value .
7866	Set view path
7867	Sends a file to the browser .
7868	Get the content type of a file .
7869	Map action to exception
7870	Sets an aspect definition .
7871	Sets a pointcut .
7872	Get a pointcut
7873	Returns a list of candidate files for the given path .
7874	Check if file is scannable
7875	Converts an error type to a human readable string .
7876	Invoke the action with the registered interceptors
7877	Invoke action method .
7878	Returns true if the connection has activity .
7879	Get a bean definition by name .
7880	Search and replace properties
7881	Returns an array of constructor arguments for a given definition .
7882	Instantiate a bean by its constructor .
7883	Try to instantiate a bean by its factory .
7884	Instantiates a bean by using the given factory .
7885	Instantiate a bean .
7886	Creates the bean dependencies .
7887	Apply an aspect to a bean .
7888	Apply specific aspects to the bean definition .
7889	Apply all aspects of the bean .
7890	Apply aspects to a bean definition .
7891	Creates a bean .
7892	Sets up the init and destroy method .
7893	Inject a non - setter method .
7894	Inject a property into a bean .
7895	Get a bean .
7896	Get a singleton instance
7897	Fill the bean in the bean
7898	PHP signal handler .
7899	Load a class .
7900	Make a child bean
7901	Populate classes per annotations .
7902	Loads an XML file .
7903	Loads the SimpleXMLElement .
7904	Closes the connection .
7905	Opens the socket .
7906	Free a peer
7907	Create proxy class
7908	Creates the code for a parameter
7909	Creates a method
7910	Creates proxy class
7911	Load a YAML file
7912	Loads the bean .
7913	Loads the client
7914	Opens the connection .
7915	Returns a cache instance based on the provided options
7916	Runs a bean definition .
7917	Executes the beforeCreate event .
7918	Executes the afterCreate event .
7919	Called when a bean is assembled .
7920	Executes the afterAssemble method .
7921	Opens the log file .
7922	Get interceptors for a method
7923	Returns the interceptors for the given method
7924	Call interceptors .
7925	Invoke the interceptors
7926	Invoke interceptors
7927	Closes the connection .
7928	Read data from the socket .
7929	Opens a TCP connection .
7930	Adds an array of objects .
7931	Build URI .
7932	Overwrite application config .
7933	Resolve file path .
7934	Returns published dropdown list .
7935	Finds the page model based on its alias .
7936	Build a link .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Registers translations .
7939	Registers plugin scripts .
7940	Returns the vote for the given object .
7941	Get the from address
7942	Loads a user by username
7943	Hydrates a user
7944	Creates a new user
7945	Sets the password of a user .
7946	Check if a user s password matches the given password .
7947	Check if user is logged in
7948	Finds one user by criteria .
7949	Find by criteria
7950	Creates a common find query
7951	Finds the number of documents matching the criteria
7952	Inserts a new user into the database .
7953	Updates a user .
7954	Deletes a user from the database .
7955	Validates the given user .
7956	Clears the identity map of a user
7957	Login as a user
7958	Initializes the signal handler
7959	Start a worker process
7960	Wait until all workers are complete .
7961	Get a result from the pool .
7962	Get all pending requests .
7963	Apply a process to the pool
7964	Get the number of pending workers .
7965	Send data to a socket .
7966	Fetch data from a socket .
7967	Generate SQL to update user data .
7968	Register a new user .
7969	Confirm email confirmation link
7970	Login action .
7971	Resend a confirmation email .
7972	View a user .
7973	Edit a user .
7974	Validates the email address .
7975	Register the UserController .
7976	Get the formats priorities .
7977	Get formatter .
7978	Format the payload .
7979	Detect the environment file .
7980	Determines the type of the response .
7981	Creates a middleware
7982	Run the router .
7983	Handle action .
7984	Execute the payload .
7985	Responder .
7986	Set status code .
7987	Get a command from a resource .
7988	Run the before commands .
7989	Get per page per page .
7990	Add where statements to query .
7991	Bootstrap the application .
7992	Allow a list of methods .
7993	Get or set the pattern .
7994	Returns an array of tokens .
7995	Returns the regular expression .
7996	Get all variables .
7997	Check if a request matches the route .
7998	Builds a list of variables .
7999	Dispatches the route .
8000	Generate a link for the current request .
8001	Parse a regular expression
8002	Determine if the route matches the given request .
8003	Generate a link
8004	Tokenize a pattern .
8005	Tokenize a pattern .
8006	Tokenize a pattern segment .
8007	Splits a pattern into segments .
8008	Parse a token into a regular expression .
8009	Scaffold a scope
8010	Bind a route to the router .
8011	Register a route group .
8012	Sets the route for a given request .
8013	Normalize a request .
8014	Routes a request .
8015	Returns a link to a named route .
8016	Clear all routes .
8017	Creates JS code for the workflow .
8018	Retrieves data from the cache .
8019	Get a new access token .
8020	List address books
8021	Get email addresses from book
8022	Add emails to address book
8023	Get cost of address book
8024	Create new campaign
8025	Add a sender
8026	Activate a sender
8027	Get list of subscriptions for a website
8028	Set subscription state
8029	Create a push task
8030	Generate a unique name for sendpulse .
8031	Send request to website .
8032	Send data to the API .
8033	Pre send to API
8034	Decode a single line - encoded response .
8035	Decode a URL encoded response .
8036	Fetch a list of mails
8037	Mark a message as processed .
8038	Get type of mail
8039	Auto refund .
8040	Auto - apply SSL
8041	Auto - replace SSL
8042	Auto revoke SSL SSL
8043	Collect SSL information
8044	Get a list of CVV - mail addresses
8045	SSL checker
8046	Send web host report
8047	Enter domain - control code
8048	Creates an exception from the response array
8049	Generate the meta tag .
8050	Set the description .
8051	Resets the properties .
8052	Register the services .
8053	Generate the open graph
8054	Add raw data
8055	Prepare data .
8056	Check if a URL contains a given URL .
8057	Validate the sitemap data .
8058	Fill index by index
8059	Fill the field with the given type .
8060	Set the index .
8061	Set the type of the query .
8062	Set index settings
8063	Deletes a document from the index .
8064	Creates a new index .
8065	Update index settings .
8066	Execute a raw request
8067	Convert request body to JSON
8068	Set the results of the query .
8069	Set the facets for the query .
8070	Composes the final query
8071	Converts an array of parameters to an array .
8072	Adds a node to the cluster .
8073	Add a filter to the query .
8074	Delete a document
8075	Sets documents .
8076	Execute the add command .
8077	Adds a request to the queue .
8078	Make a POST request .
8079	Make a PUT request
8080	Sends DELETE request
8081	Execute all requests .
8082	Add additional options
8083	Add random node to request
8084	Autodetect nodes
8085	Add a document to the current batch .
8086	Execute the batch command .
8087	Finalize the current command .
8088	Check if current command is update
8089	Get a gallery attached to a model
8090	create new album
8091	Create init Album
8092	Generate Album Name
8093	Uploads a picture
8094	Called when deleting a picture .
8095	Get resize to image
8096	Add image styles
8097	Deletes all image versions
8098	Save a picture
8099	Create extra images .
8100	Class constructor .
8101	Prepare an image
8102	Configure the database
8103	Configure the database
8104	Create config file
8105	Check summary for all operations .
8106	generate method
8107	Generates a link to upload pictures
8108	Renders a room
8109	Generate a showroom thumbnails
8110	Load scripts .
8111	Deletes a picture
8112	Action for sorting pictures
8113	List channel sections .
8114	Start the worker .
8115	Stop the process .
8116	Kill the process
8117	Send payload to socket
8118	Called when a worker starts
8119	fork process thread
8120	Constructs the Authn Request
8121	Parse a SAML response .
8122	Returns an array of binary binaries .
8123	Get all pending binaries .
8124	Update binary .
8125	Update a single binary
8126	Start selenium process .
8127	Clean the install directory
8128	Asserts that the Selenium process is started
8129	Registers the binary binaries .
8130	Create a binary .
8131	Check if external url is valid
8132	Returns the Linux file name .
8133	Save the compressed file to the given directory .
8134	Called when a notification is sent .
8135	Watch progress .
8136	Get the message for a given binary .
8137	Get post message .
8138	Add a pipe to the pipeline .
8139	Convert an item .
8140	Convert item value .
8141	Write an item
8142	Get the transport from the given request .
8143	Validates a password against a password .
8144	Get the taxonomy for the given entity .
8145	Check if the given value is valid .
8146	Get the descriptor for the field .
8147	Get an environment variable .
8148	Get client IP .
8149	Get current url
8150	Unparse a query string
8151	Checks if a property is null .
8152	Lookup an address
8153	Executes the inclusion of a variable .
8154	Execute action of config file
8155	Down the array down .
8156	Get up elements from array
8157	Updates a form .
8158	Get a single field from the payload .
8159	Recursively find a matching item .
8160	Call a callback on an item .
8161	Get an item from a form .
8162	Replace variables in template
8163	Load configuration from json
8164	Load configuration from url
8165	Set LatLng .
8166	Returns the LatLng object
8167	Return error response .
8168	Redirect to form .
8169	Create form aggregate .
8170	Remove item from form .
8171	Check if the autoload dump should be used .
8172	Get plugin class names .
8173	Get install name .
8174	Guesses the install name from a package name .
8175	Map root package extra value
8176	Creates a plugin config array .
8177	Get root package
8178	Get install path
8179	Initializes the install directory
8180	Generate the palettes .
8181	Get the meta palette of a palette .
8182	Creates an exception for a given context .
8183	Enter the theme context .
8184	Build context config .
8185	Returns the color for the given identifier .
8186	Rotate color .
8187	Convert HSV to RGB .
8188	Enter a context .
8189	Moves the current context .
8190	Switches the current context
8191	Loads the config from the bundles .
8192	Set service type argument .
8193	Get template groups
8194	Render a page picker
8195	Returns an array of all articles
8196	Get all modules
8197	Prepare template .
8198	Parse the given template
8199	Registers services with given tag .
8200	Initializes the environment .
8201	Initialize the layout .
8202	Adds a child to the element .
8203	Compiles PHTML .
8204	Compile a node
8205	Throw an exception
8206	Get PHP type from doctrine type .
8207	Gets the FileReflector for the given class .
8208	Get the doc block for a given property .
8209	Get the doc block from a property .
8210	Extract doc block from method .
8211	Get PHP type and class name from a doc type .
8212	Logs in the API .
8213	Initializes the HTTP client .
8214	Get the login token .
8215	Searches for a given query .
8216	Extracts a value from the extractors .
8217	Get tags .
8218	Downloads the image .
8219	Get all wall papers .
8220	Download all files in a directory .
8221	Extract type from a mutator .
8222	Extract type from accessor
8223	Extract type from reflection .
8224	Check if a property is public
8225	Returns the accessor method for a given property .
8226	Get the mutator method for a given property .
8227	Get property name from method name
8228	Loads the Laravel services .
8229	Creates the application
8230	Set a value ini .
8231	Set multiple values at once
8232	Removes a section .
8233	Merges a section .
8234	Renames a value .
8235	Renames a section .
8236	Reads ini file
8237	Reads and merges an INI object .
8238	Merges two INI object contents into an object .
8239	Convert INI value to string .
8240	Set a value in the top - level .
8241	Set the values of the current ini content
8242	Returns an array of all the values of the modifiers
8243	Removes a configuration value .
8244	Removes a section .
8245	Sets a configuration value .
8246	Set a value on the master .
8247	Set values on master reader .
8248	Get a value from master master .
8249	Returns an array of values from the master configuration
8250	Removes a value .
8251	Remove a value from the master .
8252	Check if the given name is a section .
8253	Get all values of a section .
8254	Creates a file loader .
8255	Get class name by short type .
8256	Make a new cookie .
8257	Execute the converter
8258	Determine the file to use .
8259	Prompts the bundle to be used .
8260	Writes the configuration to a file .
8261	Creates a dumper instance .
8262	Convert a string to another format
8263	Read session data from storage
8264	Get the routes .
8265	Sorts an array using the given callback .
8266	Sets the stream offset .
8267	Gather data .
8268	Put content to a file .
8269	Get options reader .
8270	Run the given route .
8271	Gather the middleware for the given route .
8272	Flattens an array .
8273	Load configuration files .
8274	Returns a closure that will call the middleware .
8275	Parse stage string .
8276	Call a Symfony console command .
8277	Sets default values for specified command .
8278	Get the php executable .
8279	Returns the Crebroker binary .
8280	Run a Symfony command .
8281	Returns the default input definition .
8282	Builds a tree of routes from the given array of routes .
8283	Adds a route to the given node .
8284	Get the first segment matcher .
8285	Create a filesystem manager .
8286	Create a cached factory .
8287	Returns the total number of executed statements .
8288	Return the memory usage .
8289	Profile a method call .
8290	Resolve alias .
8291	Checks if route matches pattern and translation .
8292	Create TwigEngine .
8293	Extends view factory .
8294	Extend engine resolver .
8295	Create a new TwigEnvironment .
8296	Create Twig loader .
8297	Parse data .
8298	Create a rule with given rules .
8299	Create a negative or optional validator .
8300	Create chainable validators .
8301	Parse string rule .
8302	Parse parameters .
8303	Starts a server process .
8304	Stop web server .
8305	Get process address .
8306	Check if the process is running .
8307	Creates a process instance .
8308	Get all event listeners .
8309	Removes a listener pattern from an event pattern .
8310	Check if subject contains wildcards .
8311	Adds a listener pattern .
8312	Read mandatory option .
8313	Build a multidimensional array .
8314	Prepare response .
8315	Get response .
8316	Get the displayer .
8317	Filter the displayers .
8318	Get the first filter from the Accept header .
8319	Add route lookup .
8320	Add multiple addresses .
8321	Create assets renderer .
8322	Register base collectors .
8323	Registers the collectors from the config .
8324	Extends event manager .
8325	Create a new session manager .
8326	Create route dispatcher .
8327	Create router .
8328	Create url generator .
8329	Detect the application environment .
8330	Get environment argument .
8331	Return a JS response .
8332	Generates a TOML builder from an array .
8333	Process an array of arrays .
8334	Get pretty metadata .
8335	Get loader paths .
8336	Build the table rows .
8337	Get Whoops instance .
8338	Add where clauses to route .
8339	Merge group attributes into route .
8340	Convert action array to controller action .
8341	Prepend the group namespace to the group .
8342	Prefix a URI .
8343	Update the route group .
8344	Creates a sanitizer .
8345	Adds a before bootstrapping callback .
8346	Adds a callback after bootstrapper .
8347	Bootstrap the application .
8348	Call all registered boot callbacks .
8349	Generate session id .
8350	Merge new flash messages .
8351	Load session .
8352	Reads data from storage .
8353	Writes the metadata to the handler .
8354	Resolve the current page .
8355	Secure input .
8356	Extends the event manager .
8357	Get files .
8358	Get twig files .
8359	Validate template .
8360	Display details .
8361	Displays text .
8362	Parse middleware group .
8363	Check mandatory options .
8364	Returns the requested configuration dimensions .
8365	Validates options .
8366	Check deprecated options .
8367	Register a resource .
8368	Get the resource URI .
8369	Get the resource wildcard .
8370	Get the resource prefix .
8371	Add resource destroy route .
8372	Get the nested resource URI .
8373	Get resource action .
8374	Get resource route name .
8375	Slice through the container .
8376	Get the middleware middleware .
8377	Find argument files .
8378	Returns the IP address of the current request .
8379	Checks if the given string is a valid IP address .
8380	Get the first IP address from a header .
8381	Set domain .
8382	Validate input .
8383	Validate the middleware class .
8384	Create a translation manager .
8385	Create schedule .
8386	Get computed data .
8387	Creates a Swift_Mailer instance .
8388	Creates a mailer .
8389	Set global address .
8390	Create tooltip group .
8391	Create tabs .
8392	Creates a table .
8393	Create html for dropdown menu
8394	Creates metrics .
8395	Duplicate a var
8396	Get VarCloner instance .
8397	Get the HtmlDumper instance .
8398	Appends code to the template .
8399	Appends code to buffer .
8400	Add twig extensions .
8401	Sort middleware by priority map .
8402	Move middleware .
8403	Create an aggregate driver .
8404	Creates an emergency logger .
8405	Create a single Monolog driver .
8406	Create a daily log driver .
8407	Create the syslog driver .
8408	Create an error log driver .
8409	Create a Slack logger instance .
8410	Create a custom logger .
8411	Create a Monolog driver .
8412	Push processors to Monolog .
8413	Create a server request from array .
8414	Returns the singular form of the given string .
8415	Matches the case of a string .
8416	Connects to local filesystem .
8417	Creates console console .
8418	Merge two groups .
8419	Format group suffix .
8420	Check for a specific environment file .
8421	Set environment file path .
8422	Get a transport instance .
8423	Create a transport .
8424	Check if transport is registered .
8425	Create a SMTP transport .
8426	Create MailgunTransport instance .
8427	Create a SparkPostTransport instance .
8428	Create a SESTransport instance .
8429	Create a repository .
8430	Update the route tree .
8431	Register console events .
8432	Extends the Twig environment .
8433	Register Viser twig extension .
8434	Get allowed HTTP methods .
8435	Adds a route .
8436	Checks whether the stream is pipe .
8437	Adds a mime type .
8438	Register a parser .
8439	Parse the payload .
8440	Get parser by type .
8441	Get format from payload .
8442	Set up the class
8443	Get the request duration .
8444	Stops a measure .
8445	Adds a measure .
8446	Identify the given exception .
8447	Generate a UUID .
8448	Set the headers .
8449	Validates the HTTP protocol version .
8450	Check if array contains only only strings .
8451	Filter a header value .
8452	Get the retry time .
8453	Get invoker .
8454	Creates an exception for the given configuration type .
8455	Extend cache item pool .
8456	Extend the traceable cache .
8457	Get an environment variable .
8458	Parse parameter .
8459	Replace the placeholder .
8460	Creates the database table
8461	Get PDO connection
8462	Connect to the database .
8463	Get all files in a directory .
8464	Render assets into html .
8465	Get the last modified time of asset .
8466	Run the call .
8467	Remove duplicate description .
8468	Extends the LogManager .
8469	Extends the profiler .
8470	Import SimpleXMLElement into SimpleXMLElement .
8471	Loads DOMDocument from a file .
8472	Loads a DOMDocument from a string .
8473	Converts a value to a PHP type .
8474	Validates a DOMDocument .
8475	Convert a string to a string .
8476	Check if the entry contains a header .
8477	Adds references .
8478	Process obsolete entry .
8479	Process previous entry .
8480	Extract multi lines .
8481	Extract the headers .
8482	Check if the given file is a file .
8483	Set error status .
8484	Set the stream .
8485	Validates the stream .
8486	Mock a service .
8487	Parse a command expression .
8488	Parse an argument token .
8489	Parse an option token .
8490	Extract the description from the token .
8491	Validates the cookie name .
8492	Validates the cookie value .
8493	Set a value for a given key .
8494	Get the To addresses .
8495	Create MongoDB driver .
8496	Create a redis cache driver .
8497	Create a Predis cache driver .
8498	Create a filesystem cache driver .
8499	Create a Memcached driver .
8500	Create a Memcache cache driver .
8501	Get a collector by name .
8502	Compiles the router .
8503	Create router class .
8504	Compiles a route tree .
8505	Compiles http method match .
8506	Compile disallowed HTTP methods .
8507	Compiles a found route .
8508	Returns the DebugProcessor of the logger .
8509	Compute the count of errors .
8510	Group log levels .
8511	Get the listener
8512	Bind listener to event .
8513	Unbind all events from the dispatcher .
8514	Creates a regular expression for the given event pattern .
8515	Get the value at the given key .
8516	Set data by key .
8517	Process parameters recursively .
8518	Process parameter .
8519	Renders the exception .
8520	Render exception .
8521	Renders the exception trace .
8522	Get the trace for an exception .
8523	Get the traced frames .
8524	Format an array of arguments .
8525	Returns the lines of a file .
8526	Get file contents
8527	Normalize path name .
8528	Resolve a binding .
8529	Resolves a class .
8530	Resolve method .
8531	Resolve a parameter .
8532	Resolve parameters .
8533	Get method reflection .
8534	Check if value is a function .
8535	Merges parameters .
8536	Writes a string to a file .
8537	Write to a file .
8538	Update a stream .
8539	Decrypts a resource .
8540	Encrypts a resource .
8541	Decrypt string .
8542	Encrypt string .
8543	Get stream from string .
8544	Create transport factory .
8545	Create mail manager .
8546	Get the version number from the XML document .
8547	Get the schema for a given xliff version .
8548	Fix location .
8549	Parse file visibility .
8550	Sanitizes the given data .
8551	Run global sanitizers .
8552	Sanitizes a field .
8553	Execute a sanitizer .
8554	Resolve the callback .
8555	Resolves a callable .
8556	Creates command from expression
8557	Get the default values from a callable .
8558	Assert that the callable is valid .
8559	Check if the callable is a static method .
8560	Create a cookie jar .
8561	Convert an element to a DOMDocument .
8562	Add node to DOMDocument .
8563	Adds a collection node .
8564	Creates a root element .
8565	Cast object class .
8566	Get all called listeners .
8567	Gets the list of not called listeners .
8568	Validate the same site .
8569	Normalizes the expiration time .
8570	Normalize domain name .
8571	Normalize path .
8572	Get the expiration timestamp .
8573	Start a new timer .
8574	Apply translation helpers .
8575	Extract helpers from translation string .
8576	Apply filters to translation .
8577	Log translation .
8578	Collects message .
8579	Display files .
8580	Displays file info .
8581	Returns an array of files .
8582	Get input from STDIN .
8583	Returns a recursive iterator for the given directory .
8584	Validates the event name .
8585	Converts a number to bytes .
8586	Converts a number to an integer .
8587	Get config from list adapter .
8588	Create a new instance .
8589	Adds a extractor .
8590	Create an alias loader .
8591	Get the cache path .
8592	Push a command to the queue .
8593	Determine if the given command should be queued .
8594	Create the session driver .
8595	Create a new migration session driver .
8596	Create a cache store instance .
8597	Build a session store .
8598	Build an encrypted session store .
8599	Parse route action .
8600	Get the first element of an array .
8601	Parse notes .
8602	Convert content to charset .
8603	Tag with given tag .
8604	Create log manager .
8605	Confirm to proceed .
8606	Get default confirm callback .
8607	Inject the given profiler into the given response .
8608	Collect data .
8609	Creates the template .
8610	Creates a profile .
8611	Parse log level .
8612	Start session .
8613	Store the previous URL in the session .
8614	Garbage collector .
8615	Add a cookie to the response .
8616	Creates a response view .
8617	Find a template by name .
8618	Normalize file name .
8619	Parse view .
8620	Adds content to a message .
8621	Send a Swift message .
8622	Determine if the given message should be sent .
8623	Create a message .
8624	Call the message builder .
8625	Create view .
8626	Handle the found route .
8627	Prepare the URI path .
8628	Generate router file .
8629	Generate route directory .
8630	Get the path to a file .
8631	Checks if the given options are supported .
8632	Get parser instance .
8633	Require a file
8634	Require a file .
8635	Creates a symlink .
8636	Set the directories .
8637	Add a directory .
8638	Import language file .
8639	Adds a messageCatalogue .
8640	Set a language fallback .
8641	Get language fallback .
8642	Add a presenter .
8643	Check for more pages .
8644	Returns display address .
8645	Find the front controller .
8646	Find hostname and port .
8647	Find the best port for the given host .
8648	Escape special characters .
8649	Get data .
8650	Creates an appends stream .
8651	Parse the given tokens .
8652	Seeks to the next whitespace .
8653	Gets the value of a token .
8654	Creates a traceablePDOor .
8655	Decrypt the cookies .
8656	Encrypt the response cookies .
8657	Create a new SetCookie instance .
8658	Register a Symfony command .
8659	Get the console instance .
8660	Initializes the project directories .
8661	Find a view for a named path .
8662	Get the namespace segments for a view .
8663	Find view in given paths .
8664	Get possible view files .
8665	Get event information .
8666	Render the set - cookie into a response .
8667	Extends Twig environment .
8668	Get all messages .
8669	Adds a message .
8670	Registers a middleware .
8671	Get logs from socket .
8672	Handle view exception .
8673	Get error exception .
8674	Returns the cache path .
8675	Ensure the statical proxy for the given alias .
8676	Format statical proxy stub .
8677	Register the markdown engine .
8678	Cleans the export .
8679	Adds tcomment to the output .
8680	Adds the references to the output .
8681	Adds flags to the output .
8682	Adds previous entry to the output .
8683	Add msgid to dump
8684	Adds the msgid plural to the dump entry .
8685	Adds a msgstr entry to the output .
8686	Adds headers to the message .
8687	Get pagination links .
8688	Create cache connector .
8689	Ensure that the command is correct .
8690	Check cron expression
8691	Run the command in the foreground .
8692	Run the command in background .
8693	Call all before callbacks .
8694	Call after callbacks .
8695	Returns a closure that is within a time interval .
8696	Checks if start time is between start and end time .
8697	Merges two matchers .
8698	Optimizes an array of matchers .
8699	Optimizes the given matcher .
8700	Optimizes a set of matchers .
8701	Create html displayer .
8702	Create a ViewDisplayer .
8703	Create a Whoops pretty displayer .
8704	Count the number of recipients .
8705	Bootstrap the application .
8706	Handle request through router .
8707	Render exception .
8708	Pipe the request through middleware and router .
8709	Compile an array of parameters into a string .
8710	Set the value at the given offset .
8711	Get invoker .
8712	Register a plain .
8713	Register a service binding .
8714	Register a singleton binding .
8715	Resolve an abstract type .
8716	Resolve an abstract type .
8717	Resolve a singleton instance .
8718	Extend resolved class .
8719	Format the given implementation .
8720	Returns the MessageID from the response .
8721	Convert emails array .
8722	Get a MIME part of a given message .
8723	Get the payload for the given message .
8724	Process the recipients .
8725	Process message parts .
8726	Process the headers .
8727	Checks the requirements of the command .
8728	Get the extension for the given path .
8729	Get view instance .
8730	Check if string ends with another string .
8731	Render the cookies into a cookie .
8732	Create a list of cookies from a cookie string .
8733	Sets the error .
8734	Sets the exit code .
8735	Generate a string representation of the given route .
8736	Prepare the route path .
8737	Check if the request scheme is required .
8738	Adds the port and scheme to the URI .
8739	Replace route parameters .
8740	Replace named parameters in path .
8741	Adds query string to the URI .
8742	Get route query string .
8743	Parse where expression .
8744	Get the middleware for the action .
8745	Get the list of disabled middleware .
8746	Adds a cookie to the collection .
8747	Split a cookie pair .
8748	Inject Content - Type header .
8749	Get number of words .
8750	Generate a random string .
8751	Replace the first occurrence of a string in a string .
8752	Replace the last occurence of a string .
8753	Replace a string by position .
8754	Returns the verbosity level .
8755	Runs the command .
8756	Call a console command .
8757	Call console command .
8758	Gets request argument .
8759	Gets request option
8760	Asks a question .
8761	Ask a question for a list of choices .
8762	Ask user choice .
8763	Render a table .
8764	Prints a line of text .
8765	Adds info line .
8766	Adds a comment .
8767	Adds a question to the console .
8768	Adds an error line .
8769	Print a warning message .
8770	Configure service using fluent definition .
8771	Adds parameters to the command .
8772	Get the response id from the response .
8773	Get the recipients of a message .
8774	Render template .
8775	Add exception to not report .
8776	Report an exception .
8777	Add a transformer .
8778	Handle error .
8779	Handle shutdown .
8780	Register exception handler .
8781	Registers the shutdown handler .
8782	Prepare an exception .
8783	Get the transformed exception .
8784	Get the log level for the exception .
8785	Check if the given exception should be reported .
8786	Add dumper .
8787	Dump data to a given format .
8788	Get dumper .
8789	Convert Swift_Entity to string .
8790	Get the resolved parameters .
8791	Convert code point to UTF - 8 .
8792	Register queueing dispatcher .
8793	Optimizes the route tree
8794	Extracts common parent node .
8795	Get SQL with parameters
8796	Tries to open a file .
8797	Creates a stream for the given resource .
8798	Copies the stream into a string .
8799	Copies a stream to another stream .
8800	Reads a line from the stream .
8801	Set the default path and domain .
8802	Get the path and domain .
8803	Get the pretty page handler .
8804	Updates the host from the URI .
8805	Filter method .
8806	Creates a Uri instance .
8807	Returns the path without the extension .
8808	Change file extension .
8809	Create cache manager .
8810	Receive a mock .
8811	Resolve static proxy instance .
8812	Check if the current instance is a mock .
8813	Returns the segment of the given command .
8814	Sets the file .
8815	Set the content disposition .
8816	Set Last - Modified header
8817	Returns a new instance with the specified value .
8818	Describes a command .
8819	Describes application commands .
8820	Get command names sorted by command names .
8821	Create the cookie tab .
8822	Prepare request attributes .
8823	Prepare request headers .
8824	Prepare server params .
8825	Get parsed body .
8826	Export value to string .
8827	Create a connection with the given key and key .
8828	Get cache config .
8829	Create a filesystem adapter .
8830	Parse a route .
8831	Generates a regular expression for a match .
8832	Get invoker .
8833	Check if an object exists .
8834	Get target language attribute from file .
8835	Creates a connection to vardump .
8836	Creates a dump server .
8837	Check if a path exists .
8838	Transforms a path .
8839	Get the contents of a directory .
8840	Filter the contents by type .
8841	Check if the request token matches the session token .
8842	Adds the cookie to the response .
8843	Sanitize collected messages .
8844	Compute the count of messages .
8845	Sort messages .
8846	Adds a stream .
8847	Closes all streams .
8848	Decode GIF .
8849	Decode extension .
8850	Decode image descriptor
8851	Decode image data .
8852	Set the order direction
8853	Returns the list of items .
8854	Load the paginated data .
8855	Set cities from array
8856	Set PSTN networks from an array .
8857	Load all IPN networks
8858	Load the cities from the country
8859	Get all countries
8860	Get a city by id
8861	Pads a string to PKCS5 .
8862	Get all countries
8863	Update all network networks
8864	Update multiple networks
8865	Create a new mapping
8866	Decode the delay .
8867	Has transparent color
8868	Decode proposal method .
8869	Get the size of the image .
8870	Get offset .
8871	Set offset .
8872	Get the country .
8873	Convert to array
8874	Populates assignment from array .
8875	Populate object from array
8876	Creates a new ID number .
8877	Generate unique hash
8878	Generate auth string
8879	Load calls history .
8880	Call a soap method
8881	Returns the frame with the given index .
8882	Add offset to first frame .
8883	Add a new size to the first frame .
8884	Returns the number of loops in the network .
8885	Returns true if the device has a global color table .
8886	Returns the number of global colors in the terminal .
8887	Get the background color index from the background descriptor .
8888	Add property to first frame .
8889	Creates a new frame with the given property .
8890	Convert object to array
8891	Get all prepaid balance
8892	Returns an array of prepaid balance .
8893	Returns an array of balances
8894	Change the balance of the payment
8895	Synchronize prepaid balance
8896	Set the canvas width and height .
8897	Set current canvas from decoded data
8898	Create a frame from GD resource .
8899	Encode this frame .
8900	Builds the descriptor for the graphical screen descriptor .
8901	Builds the Netscape extension .
8902	Builds a frame .
8903	Builds the GD control extension .
8904	Builds the image descriptor for a frame .
8905	Creates a DID number from an order .
8906	Set the autorenew status of the order
8907	Renew the order .
8908	Reloads the details of the invoice
8909	Updates the mapping of the entity
8910	Generate unique hash .
8911	Checks if an IP is in a given range .
8912	Gets a parameter .
8913	Link a metadata service to a service .
8914	Set service meta data .
8915	Adds metadata to a service .
8916	Removes a service
8917	Releases a service
8918	Gets a service by name .
8919	Creates a new instance from the given factory .
8920	Resolve service provider .
8921	Register a service provider .
8922	Registers a factory .
8923	Binds a class to the container .
8924	Bind a factory to a service
8925	Bind a factory to a service
8926	Returns the type of a service .
8927	Add argument .
8928	Add arguments from an array
8929	Resolve service arguments .
8930	Creates an instance of the class .
8931	Sets the list of tokens .
8932	Returns the current token .
8933	Returns the next token .
8934	Skips current token of given type .
8935	Returns the remaining tokens .
8936	Gets the tokens until the given type is encountered .
8937	Returns the tokens until a closing scope .
8938	Throw exception when unexpected token is encountered
8939	Parse a child node .
8940	Parses the parser .
8941	Sets the container name .
8942	Adds a service to the container .
8943	Adds services to the container .
8944	Adds a service definition .
8945	Imports a namespace .
8946	Validate service builder string .
8947	Generate a normalized service name .
8948	Generate the container .
8949	Returns the method name for the resolver method .
8950	Generates code for service arguments .
8951	Generate service metadata .
8952	Generate the resolver types .
8953	Generate the resolver method .
8954	Generate method for resolver methods .
8955	Create a ValueNode from a Token .
8956	Sets the value type .
8957	Generate a map of packages .
8958	Get the value of the token .
8959	Check if the token is a value .
8960	Check if the collection has a given key .
8961	Adds a value to the end of the collection .
8962	convert to PHP array
8963	Returns the next token .
8964	Returns an array of tokens .
8965	Handle the event .
8966	Execute a command
8967	Backup database
8968	Pull git repository
8969	Copy environment .
8970	Run composer command
8971	Run NPM .
8972	Seed database .
8973	Run deploy command
8974	Resolve a service
8975	Set cache directory
8976	Creates a container .
8977	Handle the incoming request .
8978	Import the paths from the vendor directory .
8979	Check if a path exists .
8980	Returns the code from a file .
8981	Get the code for a namespace .
8982	Parse the container .
8983	Handle a scope .
8984	Handle a scope import statement .
8985	Handle a parameter definition .
8986	Creates service arguments definition from argument array .
8987	Handle a service definition .
8988	Creates service definition from array .
8989	Add method call .
8990	Add method call .
8991	Add meta data .
8992	Determine if the request is origin of the origin .
8993	Check if request is authentic .
8994	Sets the value of the parameter .
8995	Get workout name by id
8996	Convert to string .
8997	Send request .
8998	Set type id
8999	Returns the end date .
9000	Returns the points as a string .
9001	Get the GPX .
9002	Collect response data .
9003	Get all models .
9004	Retrieve the payload for ajax request .
9005	Get callback response .
9006	Run a callback
9007	Sanitize handle .
9008	Validates all registered validations .
9009	Validates a single value against a single condition
9010	Set the size for a device
9011	Add a reset device .
9012	Get the size of a device .
9013	Build the column classes .
9014	Check if current user is a given role .
9015	Render the row .
9016	Render a single column
9017	Get the walk .
9018	Returns start row
9019	Returns the resets for the column
9020	Returns the index .
9021	Migrate from Legacy Content
9022	Register ajax handle .
9023	Handle ajax request
9024	Set the callback
9025	Add validation .
9026	Handle the response
9027	Get the response type
9028	Sends the response headers .
9029	Send the response body .
9030	Retrieves the content of a given URL .
9031	Checks if a GeoIP2 model method is supported .
9032	Toggle visibility of a record
9033	Checks if current user has access to current user
9034	Builds grid .
9035	Returns the column as a string .
9036	Add a column to a column
9037	Add columns for a column .
9038	Returns the resets for a given column
9039	Check if a column has reset for a given size .
9040	Get column resets as string
9041	Register a handle .
9042	Enqueue scripts .
9043	Get nonces .
9044	Get grids .
9045	Parse template .
9046	Hook to get content element .
9047	get grid elements
9048	Create grid row
9049	Protected add column
9050	Build grid columns .
9051	Fetch a single columnset
9052	Prepare custom classes .
9053	Build column resets
9054	Create grid by id .
9055	Hook to parse template
9056	Hook to add subcolumns
9057	Hook to add form field
9058	Get grids .
9059	Prepare container for grid
9060	Update subcolumns definition
9061	Append columnset id to palette
9062	Append column sizes to palette .
9063	Get all available types
9064	Returns an array of Grids .
9065	Get columns for module
9066	Get column orders
9067	Get column numbers
9068	Gets session variable
9069	Check if key exists
9070	Delete session data
9071	Load a value from the cache .
9072	Refresh the session .
9073	Parse grid tag
9074	Get the walker for the given identifier .
9075	Translate parameters .
9076	Returns encoder params .
9077	Get dec params
9078	Save dynamic data
9079	Check if the field is valid
9080	Save the field .
9081	Initializes the request .
9082	Render form fields .
9083	Get field value
9084	Get field values .
9085	Returns true if all entities are valid .
9086	Save all entities
9087	Assign dynamic fields to page object .
9088	Get field by locale
9089	Get repeaters by locale .
9090	Get entities by field id
9091	Get entity by id
9092	Duplicate this entity
9093	Initialize rule .
9094	Returns true if the form is valid .
9095	Render the group
9096	Save the group
9097	Get group by rule
9098	Check if a rule matches the given options .
9099	Initializes the group controls
9100	Get post post data
9101	Set the character
9102	Get true or false
9103	Render a row
9104	Returns an array of rows .
9105	Get dot from pixel map
9106	Prime a color
9107	Initialize repeater fields
9108	Create list form controls
9109	Create list control
9110	Creates field control object .
9111	Create header for repeater
9112	Save repeater translation
9113	Get the display value of the group
9114	Get field value by field id
9115	Get template name
9116	Returns the default template name .
9117	Initializes the field
9118	Get repeater value
9119	Get html id .
9120	Get html name .
9121	Save field translation
9122	Save field value
9123	Save repeater field
9124	Get option by key
9125	Forward forward .
9126	Move the cursor to the given position .
9127	Returns true if the task configuration has an ancestor of the task .
9128	Returns true if the task has a descendant of the given task .
9129	Resets the state .
9130	Check the input against the given conditions .
9131	Configures the wrapped condition options .
9132	Configures the condition options .
9133	Checks if a given value matches the given value .
9134	Check if an input is empty .
9135	Get the duration of the event .
9136	Contexts the given array of options .
9137	Find the best task in the given branches .
9138	Get the input code for the task .
9139	Check if the given state is resolved .
9140	Get file path .
9141	Sorts the process configuration
9142	Handle the iterator from input .
9143	Processes the output .
9144	Returns the number of lines in the file .
9145	Rewinds the stream .
9146	Clean the transformer code .
9147	Returns an array of dependency groups .
9148	Get the main task group .
9149	Checks for circular dependencies .
9150	Builds the dependencies for a task .
9151	Sorts the given dependencies .
9152	Resolve task configuration .
9153	Initializes the task .
9154	Processes a task .
9155	Handle a process state .
9156	Checks whether a process is managed .
9157	Validates the model
9158	Convert model to array
9159	Returns an array of model fields
9160	Unset a relation
9161	Format class name to relation name
9162	Add one to one relation
9163	Add one - to - many relation
9164	Add manyToMany relation
9165	Executes a query and returns a collection of objects
9166	Returns a collection of models
9167	Find one record
9168	Count the number of records
9169	Build a select query
9170	Executes a SELECT query
9171	Hydrate object with given data
9172	Delete a record from the database
9173	Update the record in the database
9174	Inserts the model into the database
9175	Set whether to keep memory
9176	Removes the current session .
9177	Get a model by its primary key
9178	Remove a model
9179	Get the index of a given pk
9180	Saves all elements
9181	Prefix where with table name
9182	Prefix order with table name
9183	Get column definition without column name .
9184	Register a new table
9185	Make a simple query object
9186	Make complex query object
9187	Get the model for a given slug .
9188	Maybe install a table .
9189	Maybe uninstall a table .
9190	Check if a given table is installed .
9191	Fire plugin event
9192	Save a post .
9193	Get the column of the foreign table .
9194	Parse default columns .
9195	Create a query from a model .
9196	Set selected columns .
9197	Select single column .
9198	Select all records .
9199	Add an expression .
9200	Set where clause
9201	Generate a where tag .
9202	Add a nested where clause .
9203	Add a where clause to the current query .
9204	Add a where clause to the query .
9205	Add a where date clause to the query .
9206	Filters the query for posts .
9207	Set the order by clause .
9208	Sets the order by expression .
9209	Set the group by
9210	Add a group by expression
9211	Join another table with another .
9212	Join subquery
9213	Paginate results .
9214	Iterate over the results of the query .
9215	Set relations .
9216	Parse a nested with a nested field .
9217	Assign a value to an array using dot notation .
9218	Make the limit tag
9219	Builds the SQL query
9220	Update the meta cache
9221	Find a record by primary key
9222	Find many records .
9223	Find a record by primary key .
9224	Find a record by primary key
9225	Get the first model matching the given attributes .
9226	Get the first model matching the given attributes .
9227	Update or create a record
9228	Handle eager loading .
9229	Execute nested eager load .
9230	Asserts that the operator is valid .
9231	Prepare column name .
9232	Escape a value for a column .
9233	Configure the model .
9234	Get the value of a column .
9235	Create a new record
9236	Order by column
9237	Add order by .
9238	Set all columns
9239	Build a map of models for eager load .
9240	Save comment .
9241	Get the default argument .
9242	Execute the query
9243	Parse the results of the query
9244	Parse select object
9245	Parse order arguments .
9246	Parse pagination arguments .
9247	Check if two numbers are equivalent .
9248	Determine if two changes .
9249	Fetches all models from the data source
9250	Delete all rows from the database
9251	Update data in database
9252	Returns the total number of pages .
9253	Paginate results .
9254	Return count of found models
9255	Returns count of models without pagination .
9256	Determine if the given offset exists .
9257	Set the value at the given offset .
9258	Get a model by offset .
9259	Build the query string .
9260	Check if the model is not booted .
9261	Boot traits .
9262	Fill the model .
9263	Pass the attributes to the model .
9264	Assign attributes to the model .
9265	Check if column is fillable .
9266	Set the attribute of the model .
9267	Set a raw attribute .
9268	Get attribute value .
9269	Get the raw attribute .
9270	Get the value of an attribute .
9271	Get the value of an attribute from an array .
9272	Get all relation methods .
9273	Get a relation
9274	Set the value of a relation .
9275	Get relation value .
9276	Refresh the model s attributes .
9277	Returns an array of model s attributes .
9278	Get object by primary key .
9279	Create a new instance from a query .
9280	Get the model s data from the database .
9281	Determine if the given row is cached .
9282	Update a record in the database .
9283	Saves the model to the database .
9284	Save has foreign relations .
9285	Save loaded relations
9286	Execute the save function .
9287	Do the actual save .
9288	Finish the save .
9289	Delete the model .
9290	Create many models .
9291	Fire a model event .
9292	Register a model event listener .
9293	Get the data to cache for this model .
9294	Register a global scope .
9295	Return a new instance without the global scopes .
9296	Create a fluent query with eager loaded relations .
9297	Return an array of attributes .
9298	Get comparison string
9299	Get the value of the expression
9300	Get a single row by primary key
9301	Get column by primary key
9302	Get by or many
9303	Count the records .
9304	Inserts data into the database .
9305	Update a row
9306	Deletes a row
9307	Delete many records .
9308	Generate an exception from the database error .
9309	Save term .
9310	Make a query object
9311	Fetch the results for eager load .
9312	Add new values
9313	Setter method .
9314	Sets the select field
9315	Resets the select fields
9316	Sets the table to update
9317	Sets the table to delete .
9318	Sets the insert type of the query
9319	Sets the FROM clause for the query
9320	Adds a JOIN statement to the query .
9321	Adds an AND condition to the query .
9322	Adds a where clause to the query .
9323	Resets the order by
9324	Sets the limit
9325	Resets the limit
9326	Boot Trash support .
9327	Get the results from the cache .
9328	Load a model from the cache .
9329	Load a collection from the cache .
9330	Cache the results .
9331	Cache a collection .
9332	Cache single result .
9333	Maybe register cache events
9334	Save user .
9335	Set the last updated timestamp .
9336	Get container parameters .
9337	Check if the container is cacheable .
9338	Bootstrap the container
9339	Loads the container configuration .
9340	Builds a column name for a given table .
9341	Do the actual save .
9342	Persist removed models .
9343	Save added models .
9344	Create a new instance .
9345	Initializes the Hmac authenticator .
9346	Create a new model
9347	Convert an asset to an input file
9348	Builds the result .
9349	Parse less asset .
9350	Send a message .
9351	Executes a query and returns the result .
9352	Count documents .
9353	Requeue a message .
9354	Sends a message to the queue .
9355	Verify sort array
9356	Add a message
9357	Gets the messages for a given type .
9358	Import issues from another repository
9359	Get a value by identifier .
9360	Checks if an identifier exists .
9361	Extend a service definition .
9362	Registers the service provider with the given provider .
9363	Add a service tag
9364	Find all services tagged with a given tag .
9365	Bootstrap the application .
9366	Initializes bundles .
9367	Get kernel parameters
9368	Validate content .
9369	Validates the content with the given retriever .
9370	Validates the schema without resolver .
9371	Get asset container .
9372	Render js assets .
9373	Render CSS assets .
9374	Returns an array of assets .
9375	Arrange an array of assets .
9376	Check if an asset is valid .
9377	New PostValidator .
9378	Creates a new XSD retriever .
9379	Returns a new XSltRetrieverter for the downloader .
9380	Retorna o Certificado
9381	Creates a new CFDIReader instance .
9382	Handle a command .
9383	Set a cookie .
9384	Gets a cookie value .
9385	Returns the first value of the first element in the array
9386	Check if the password is valid .
9387	Returns the node with the given path .
9388	Returns the value of the given attribute .
9389	Appends a child node to a SimpleXMLElement .
9390	Populates a SimpleXMLElement with the given node .
9391	Retrieve a single node from a node path .
9392	Check if given value is required .
9393	Add Doctrine queries to the DebugStack .
9394	Add timers .
9395	Get file size
9396	Appends a validator .
9397	Remove a validator .
9398	Get a validator by index
9399	Construct a new command .
9400	Run the factory .
9401	Check if filename is valid .
9402	Authorize a user
9403	Check if user is logged in
9404	Logs a user
9405	Logout the current user
9406	Add a constraint .
9407	Validate the input .
9408	Redirect action .
9409	Returns the path to the file
9410	Get message by index
9411	Generate custom post type name
9412	Get all functions
9413	Resolve command handler .
9414	Setup the report .
9415	Sum of nodes .
9416	Get input parameter
9417	Set sequence position .
9418	Generate a taxonomy name based on the class name
9419	Returns a redirect response .
9420	Register commands .
9421	Get bundle metadata .
9422	Gets the metadata for a namespace .
9423	Finds the namespace for a class .
9424	Add an asset .
9425	Renders a view .
9426	Save data into cache .
9427	Loads the DOMDocument from the given string .
9428	Remove all schemaLocations
9429	Removes all namespace nodes .
9430	Remove unused namespaces .
9431	Initialize the bindings
9432	Bind all registered registry items to the registry .
9433	Returns the file name of the class
9434	Initialize the context .
9435	Render the widget .
9436	Loads the configuration files
9437	Add a route that matches the request .
9438	Add a new route group .
9439	Create a new router group .
9440	Starts a block .
9441	Stops the block .
9442	Outputs a block .
9443	Creates a controller from a string .
9444	Instantiate a controller
9445	Checks if the given URL is valid .
9446	Finds a template .
9447	Set entity manager
9448	Set application connection
9449	Render a view
9450	Open the form .
9451	Add data transformers .
9452	Retrieve the public API endpoint .
9453	Make a request to market API
9454	Make an account request .
9455	Prepare the attributes .
9456	Add extra .
9457	Returns an object from the result set as an object
9458	Add a javascript script to the browser .
9459	Get connection instance
9460	Start a transaction
9461	Initialize the DOMNode .
9462	Render the DOM document
9463	Connect to the TCP server
9464	Enable WATCH .
9465	Sets the background color
9466	Set Manialink Image
9467	Set the image id
9468	Set the image focus
9469	Sets the image focusid
9470	Set ManiaScript Link
9471	Get config value
9472	Set a config value
9473	Get translation .
9474	Returns an array with a given callback function .
9475	Strip styles from a string
9476	Create a new redirect .
9477	Returns a list of numbers .
9478	Create a new instance of the cache driver
9479	Initializes the ManiaLink
9480	Begins a frame .
9481	End frame .
9482	Adds a redirect
9483	Inserts an XML string into the DOM .
9484	Build a new driver instance .
9485	Set Border
9486	register a font
9487	Handles an image
9488	Adds a text to the image .
9489	On image quality
9490	Get the redirect for the given request .
9491	Get redirect urls .
9492	Get the redirects .
9493	Set the icon size
9494	Set the card s icon
9495	Invoke a search
9496	Set file data
9497	Get limit string
9498	Get update string from array
9499	Gets a parameter
9500	Get a parameter by name
9501	Retrieve a POST parameter
9502	Restore a request parameter
9503	Redirect to manialink
9504	Creates a link string
9505	Create an absolute link
9506	Increment the position
9507	Increment the position
9508	Increment the position of the position
9509	Set move position
9510	Sets the scale
9511	Setter for validator
9512	Set the halign
9513	Set the alignment of the form .
9514	Set the width of the chart
9515	Set the size of the image
9516	Sets the image size
9517	Adds a button .
9518	Add a gap
9519	Get all response keys .
9520	Get all statuses .
9521	Handler for fatal error
9522	Compute the error message
9523	Returns a short message of an exception .
9524	Handle an incoming request .
9525	Uploads a file to the specified path
9526	Get current url
9527	Calculates position of given position
9528	Returns position of given position
9529	Get position of element
9530	Build select query .
9531	Quote a string
9532	reset all balance
9533	Delete accounts by asset type .
9534	Configure the class map .
9535	Get service ids
9536	Get the return type of a service
9537	Updates balance of payments .
9538	Get balance entry
9539	Get the hierarchy of the class .
9540	Change the Content - Type of the response .
9541	Parse a raw HTTP header
9542	Convert string to array
9543	Build a multidimensional array .
9544	Get asset types
9545	Validates balance .
9546	Close asset balance
9547	Checks if the given strategy is valid .
9548	Mutate method .
9549	Fetch data from url .
9550	Returns the request URL .
9551	Generate translation strings .
9552	Parse CSV file
9553	Localize CSV .
9554	Backup strings to disk .
9555	Get all type assets by asset type code .
9556	Returns the asset type id for the given account id .
9557	Get customer acces by asset type
9558	Get the system customer id .
9559	Creates an amount transaction .
9560	Builds the key for the strategies .
9561	Parse the opauth response .
9562	Login action .
9563	Render view .
9564	Get asset types
9565	Send the response .
9566	Authenticate the given response
9567	Verify the request token .
9568	Validate document url .
9569	Register the API client .
9570	Register the token class .
9571	Register services for console .
9572	Starts a new session .
9573	Get an array of class properties .
9574	Sets the status code and reason phrase .
9575	Parse CSS .
9576	Find the list of tokens in the css file
9577	Find end of a quoted string
9578	Find the end of a URL .
9579	Check rule .
9580	Merges multiple words
9581	Check selectors .
9582	Get selectors from a list of words
9583	Recursively parse a tree of tokens
9584	Set the current application key for the current request .
9585	Get the current application key .
9586	Adds a JSON type to the request .
9587	Build select query .
9588	Unpublish post
9589	Unpublish event
9590	Check if the post is active for the given post .
9591	Generate a unique token
9592	Generate a key for a key .
9593	Verify the given token .
9594	Generate HTTP headers .
9595	Generate query data .
9596	Get customer ID .
9597	Set fit transformation .
9598	Get the custom manipulations .
9599	Create account balance
9600	Fill object with properties
9601	Returns the URI .
9602	Set user info
9603	Sets the port
9604	Set path .
9605	Get a single segment
9606	Returns the value of a query parameter .
9607	Build the HTML code for the given tokens .
9608	Aggregate method .
9609	Get the configuration for a given strategy .
9610	Builds the configuration for a strategy .
9611	Composes the result .
9612	Execute an asset
9613	Executes an operation .
9614	Prepare log ids
9615	Validate transactions .
9616	Sets the headers .
9617	Set HTTP header .
9618	Adds a header .
9619	Remove a header .
9620	Adds a prefix to the set of paths .
9621	Adds a set of prefixes .
9622	Finds the file for a class .
9623	Finds file with known suffix .
9624	Convert object to array
9625	Cleans an array .
9626	Set code .
9627	Initializes the URI .
9628	Initialize query params
9629	Initialize uploaded files .
9630	Parse uploaded files .
9631	Parse multiple uploaded files .
9632	Check if the response has content type .
9633	Run the application .
9634	Dispatches the script
9635	Outputs a table
9636	Output error message .
9637	Output help command
9638	Get all available commands .
9639	Create a directory if not exists .
9640	Append stub to route file .
9641	Replace a string in the old file
9642	Dispatches the request and returns the response .
9643	Creates a Response for the given Response .
9644	Returns the page of the current page .
9645	Get the response .
9646	Builds the response for the given URI .
9647	Returns the page for the given URI .
9648	Returns the alias for the given URI .
9649	Displays a single User model .
9650	Creates a new I18nMessage model . If creation is successful the browser will be redirected to the view page .
9651	Add headline IDs to HTML .
9652	Run the route
9653	Run the CLI command
9654	Register services .
9655	Get instance of Markdown renderer
9656	Get the blades .
9657	Get migration files .
9658	Finds a page by its identifier
9659	Get the page name for a given page identifier .
9660	Builds the meta data for a page identifier
9661	Get Page Tree
9662	Returns a list of pages for a given path .
9663	Handle successful email authentication .
9664	Loads all messages from database .
9665	Send activation mail .
9666	Perform a list of results .
9667	Renders the template
9668	Render an expression .
9669	Resolve expression key path
9670	Recursively find all classes .
9671	Prepare configuration array .
9672	Returns the host of the request
9673	Gets a value by key
9674	Displays a single Message model .
9675	Updates an existing Message model . If update is successful the browser will be redirected to the view page .
9676	Deletes a Message model .
9677	Finds the I18nTranslation model based on its primary key value .
9678	Displays list of pages
9679	Returns the parsed content .
9680	Gets the sorting .
9681	get uri
9682	Get the url from the meta .
9683	Returns the title of the page .
9684	Make a GET request
9685	Builds the request URL .
9686	Handle the response .
9687	Initialize the configuration
9688	Profile profiler
9689	Get template .
9690	Returns the value for a given key path .
9691	Sets the root directory .
9692	Find class reflection .
9693	Get class reflection .
9694	Uploads a media .
9695	Insert media .
9696	Calculates the number of hours in a period
9697	Returns dirty data .
9698	Register a clean entity
9699	Get dirty fields .
9700	Adds the identifiers to the model .
9701	Get entity id from string or array
9702	Get tags .
9703	Get the real class name of an object
9704	Configure tab element factory .
9705	Deletes the base source
9706	Create title
9707	Renders PDF .
9708	Render image .
9709	Hydrate data into object
9710	Hydrate a list
9711	Deserialize data
9712	Deserialize data .
9713	Guesses the collection classname from provided data .
9714	Generate sitemap .
9715	Returns the navigation for given element id .
9716	Get iterator for element
9717	Checks if the attribute is unique
9718	Get extra property
9719	Generate a random string
9720	Limits a string .
9721	Get all files in a directory
9722	Generate short description
9723	Checks if a time slot is overlapping .
9724	Fetch all time slots that are not overlapping .
9725	Merges two time slots .
9726	Executes a GET request .
9727	Merges default parameters .
9728	Executes an HTTP request .
9729	Render backend view .
9730	Returns the iterator for the tab .
9731	Get grid iterator .
9732	Before save callback
9733	Processes the code definition
9734	Updates an existing Media model . If update is successful the browser will be redirected to the view page .
9735	Joins media .
9736	Upload media .
9737	Updates model data .
9738	List media
9739	Renders media row .
9740	Deletes a Media model .
9741	Sets the attribute list .
9742	Get the default model for this model .
9743	Creates the directories for the views .
9744	Export the views .
9745	Export the controllers .
9746	Export Routes .
9747	Check for missing packages
9748	Copy plugin plugins .
9749	Copy asset files .
9750	Copy less folders .
9751	Get settings by categories .
9752	Creates a navigation from a serialized string .
9753	Creates a new nav item from an array .
9754	Render a block .
9755	Get module by name .
9756	Serialize an object
9757	Returns the model name for the given key .
9758	Returns the class metadata for the given model name .
9759	Gets class metadata by id .
9760	Render tree .
9761	Get branch tree
9762	Remove from cache
9763	List all tags
9764	Find tag weights .
9765	Add tags to model
9766	Remove tags .
9767	Get tab parent options .
9768	Generate the columns for the tabs .
9769	Count required separators .
9770	Create separators .
9771	Create stop element .
9772	Create tab element .
9773	Get the stop element .
9774	add a member
9775	Returns select options .
9776	List status constants
9777	Returns a list of available types
9778	Get type label
9779	Get sorting order array
9780	Finds and replaces the value of the attribute .
9781	Moves the pointer to the next element .
9782	Get the title of the current item .
9783	Generate the active field for a given attribute .
9784	Make a router instance .
9785	Get driver instance by name .
9786	Call a driver .
9787	Call driver .
9788	Resolve dispatch dependencies .
9789	Get nested parameters .
9790	Find routeable attributes .
9791	Find restful route .
9792	Find the resource actionable .
9793	Get alternative resource action .
9794	Dispatch route .
9795	List all deliveries .
9796	Get calculator for shipping method
9797	Get shipping method by code
9798	Register a route .
9799	Build the resource schema .
9800	Update the shipping address .
9801	Call controller .
9802	Handle an Illuminate response .
9803	Handle response callback .
9804	Aborts an HTTP response .
9805	Determine if the given response is a non - HTML response .
9806	Registers error handler .
9807	Get options for an action .
9808	Deletes an item from the cache .
9809	Save cache item .
9810	Outputs a block .
9811	Retrieve a value from the cache .
9812	Set a cache entry
9813	Saves multiple cache items
9814	Deletes multiple cache items .
9815	Check if a cache entry exists .
9816	Get label .
9817	Full path name .
9818	Make tree .
9819	Send a command to the console .
9820	Set resource members
9821	Try to find a PSR - 7 class file for a class .
9822	Set the IAML account ID .
9823	Translate an exception .
9824	Get the console instance .
9825	Execute the PayPropi
9826	Returns an array of all the values of the enumerator .
9827	Get a list of containers .
9828	Update the container s properties .
9829	Check if a blob exists .
9830	Encode a JWT .
9831	Decode a JWT token .
9832	Get the payload of a token .
9833	Splits the token into segments .
9834	Get the expiration time .
9835	Creates a new index .
9836	Extracts the default value of a column .
9837	Add previous button
9838	Add next button
9839	Get the value of a button code
9840	Reveal object .
9841	Checks if a value is a RecordInterface object .
9842	Checks if a value is empty .
9843	Serialize data into a Record object .
9844	Parse the soap response into an array
9845	Get a datagrid by name
9846	Checks if a configurator exists .
9847	Finds the class name of the given format .
9848	Get a writer from the content negotiation .
9849	Transforms a DateTime object into a timestamp .
9850	Initializes the view .
9851	Read data from a payload .
9852	Parse a payload
9853	Write a payload
9854	Get a data reader
9855	Get a data writer
9856	Called before a test .
9857	Called after a test .
9858	Called after a step is executed .
9859	Initialize Laravel .
9860	Boot Laravel application .
9861	Go to a route .
9862	Go to an action .
9863	Get action name with namespace
9864	Checks that the current route matches the given route .
9865	See the current action matches the given action .
9866	Assert that a given key is present in the session .
9867	Checks that the form has errors .
9868	Checks that a form error occurred .
9869	Make the user logged in .
9870	Insert a new record into the database .
9871	Transforms a numeric value into a numeric string .
9872	Get number formatter .
9873	Nested array
9874	Flattens a multidimensional array
9875	Convert an array to a stdClass .
9876	Creates a new column .
9877	Builds the header view .
9878	Builds the cell view .
9879	Creates a new column .
9880	Checks if the type is a compound column .
9881	Get the base data for the gateway .
9882	Returns the shipping data for the order
9883	Returns the invoice data for the invoice .
9884	Sends request to gateway
9885	Trim a string .
9886	Converts FQCN to block prefix
9887	Transforms the value to a localized currency .
9888	Parse a value .
9889	Adds a unresolved column .
9890	Check if the uploaded file is valid .
9891	Resolve a file .
9892	Check if a record is updated
9893	Updates the edit form
9894	Update the edit form
9895	Lock a record
9896	Apply a config to the client
9897	Publish an item to a channel .
9898	Load translation file .
9899	Send request to client
9900	Build the URI from the given array .
9901	Store a newly created user .
9902	Show the form for editing the specified user .
9903	Update the specified user in storage .
9904	Remove the specified user .
9905	Creates a new MPDF instance
9906	Adds host header
9907	Build a Guzzle request .
9908	Executes the callable chain .
9909	Check if class exists .
9910	Run the loop .
9911	Ensure that the thread is running .
9912	Add a request to the queue .
9913	Publish multiple requests
9914	Returns the key for the given cursor
9915	Rewinds the cursor to the first element .
9916	Export this object as an array
9917	Set options from an array
9918	Make a publish call
9919	Make an HTTP request .
9920	Publish an item
9921	Imports headers from one message to another .
9922	Get protocol version
9923	Validate data .
9924	Load translation .
9925	Set local validator
9926	Get the validation errors .
9927	Update the callback .
9928	Get the locked message
9929	Determine if this member can be edited
9930	Check if an offset exists
9931	Sorts the collection using the given Closure .
9932	Parse the calendar information
9933	Format birthday .
9934	Validate birthday .
9935	Parses constants for a constant .
9936	Translate the given latitude
9937	when updating roles
9938	Response for syncs .
9939	on list of roles
9940	On role create create
9941	On user create
9942	on area create form
9943	Returns user form
9944	Add group menu
9945	Finds one object by criteria or returns new instance .
9946	Get a new object instance .
9947	Get the object factory .
9948	Removes entities by criteria .
9949	Removes one entity from the repository .
9950	Removes one or more objects .
9951	Refresh the object
9952	Detaches a list of objects
9953	Get supported method .
9954	Call supported method .
9955	Run the given action on the given object .
9956	Flush an array of objects .
9957	Prepare tag from bits .
9958	Set the current page
9959	Set the current page
9960	Update the specified permission in storage .
9961	Get paginator .
9962	Finds and throws an exception if found
9963	Boots extension components
9964	boot memory storage
9965	Load route parts
9966	Extend extended validation .
9967	Save the model
9968	Validate the model .
9969	Merge the rules
9970	Remove unnecessary attributes .
9971	Hash the attributes of the current user .
9972	Disable all filters .
9973	Disable a filter .
9974	Restore all filters .
9975	Restore the given filter .
9976	Get actions column
9977	Assigns the model to a given user .
9978	Check if the given code is successful .
9979	Returns template name
9980	Renders role form .
9981	renders edit form
9982	creates user form
9983	show edit form
9984	Store user in database
9985	updates user
9986	deletes a user
9987	Save user .
9988	Checks if the current page is within the given path .
9989	Get registered type
9990	Get the Etag for the visitor
9991	Get the timestamp field
9992	Calculates the hash of the collection
9993	Execute the query
9994	Executes the select query .
9995	Count the number of rows
9996	Get table name
9997	Returns the order by
9998	Set the order by
9999	Get the conditions as a string .
10000	Add a WHERE condition
10001	Set the join table
10002	Edit ACL action .
10003	updates role
10004	Sets the logger .
10005	Starts the process .
10006	Stop the process .
10007	Kill the process
10008	Add WHERE condition
10009	Get the where .
10010	Count the number of rows
10011	Executes the query and returns the first result .
10012	Returns an array of ids .
10013	Execute the query and return the result
10014	Load by type field
10015	Get the select fields for the current query
10016	Returns list of available modules
10017	Squash a resource
10018	Define all user permissions .
10019	Assign a role to a user
10020	Remove a role from a user
10021	Show form .
10022	Edit action .
10023	Store a role
10024	Update role
10025	Destroy role .
10026	Save a role .
10027	import permission
10028	Show acl
10029	Clear analytics data .
10030	Clear all message data
10031	make ACL
10032	Show form for editing role .
10033	return all admin roles for admin
10034	get statuses
10035	Get actions column
10036	Render user roles .
10037	Modify an entity
10038	Get a producer for a registered type
10039	Register a producer
10040	Registers a producer by type
10041	Get an object by id
10042	Get object by id
10043	Add object to the pool
10044	Store an object in the pool
10045	Count the number of records for a type
10046	Create a new finder instance .
10047	Get select one by type
10048	Get the escaped field names for a given type .
10049	Get the type order by clause .
10050	Get all trait names by type .
10051	Recursively get all trait names .
10052	Adaptable form fieldset .
10053	Get checked attribute .
10054	Prepares the active page .
10055	Triggers the tracking of logins
10056	Set email tracking
10057	Get site path from url
10058	Analyze a URL
10059	Returns basket product category path
10060	Check if two fields are equal .
10061	Loads data from a database row .
10062	Return a copy of this object
10063	Revert a field
10064	Get old field value
10065	Set field value
10066	Inserts the record into the database .
10067	Update the record in the database
10068	Refresh the generated field values
10069	Compare two values
10070	Generate the URI for a named route .
10071	Store role .
10072	Get errors for a field
10073	Check if field has error
10074	Add error to a field
10075	Prepare product title
10076	Modify by ContactController
10077	Modify by newsletter controller
10078	Modifies the status of a user
10079	Disable an event subscriber .
10080	Restores disabled event subscribers .
10081	Disable all event listeners .
10082	Disable an event listener .
10083	Restore all event listeners .
10084	Restore event listeners .
10085	Get the class name of a subscriber class .
10086	Check if the class is an event subscriber .
10087	Get all event listeners
10088	Returns active user id
10089	Returns active user email
10090	Generates a cache key .
10091	Generates an array of cache keys .
10092	Sends the request
10093	Check if a key exists
10094	Get a value from the store .
10095	Get a value from an object
10096	Set the value of a key .
10097	Adds a value to the array .
10098	Set a value in an array .
10099	Remove a value from the bag .
10100	Remove a value from an object
10101	Sets the logger
10102	Bootstrap the application .
10103	Set mail configuration
10104	Gets a field
10105	Convert a value to a string
10106	Get page size from request .
10107	Register the Capsule services .
10108	Validates the data
10109	Get singleton instance .
10110	Initializes the plugin
10111	Enqueue the script for the plugin
10112	Displays all notices .
10113	Register a notice .
10114	Dismiss notice AJAX
10115	Dismiss a notice .
10116	Dismiss a user .
10117	Dismiss global notice .
10118	Restore a notice .
10119	Restore a user .
10120	Restore global notice .
10121	Get dismissed notices .
10122	Check if notification is dismissed .
10123	Get a single notice
10124	Refine an item
10125	Refine a collection
10126	Include raw attachments
10127	Get items from raw data .
10128	Set the attachments .
10129	Parse relations .
10130	Attaches an attachment .
10131	Attaches a class to an attachment .
10132	Merges two arrays .
10133	Get response headers
10134	Get the card reference
10135	Get the customer reference
10136	Get class name
10137	Get the namespace of a class
10138	Finds the adder method for an object .
10139	Initializes the field mappings .
10140	Set translation lang
10141	Read a property .
10142	Displays the default entity manager .
10143	Call before action .
10144	Run after action .
10145	Extend collection with another collection
10146	Append data to collection
10147	Prepend entity to collection
10148	Check if a property is set .
10149	Get the last entity in the collection
10150	Get element moved by offset
10151	Checks if a field exists .
10152	Searches for a specific field with a given value
10153	Shift the beginning of the collection .
10154	Filter the collection by a callback
10155	Get collection by callback
10156	Splits the collection into chunks .
10157	Get a slice of the collection
10158	Splits the collection into chunks .
10159	Unset a value .
10160	Get distinct on a given property .
10161	Reverse the map
10162	Get all values for a property
10163	Bind collection to collection
10164	Group entities by field .
10165	Prepare scopes .
10166	Parse scope arguments
10167	Set type of variable
10168	Registers an annotation - based mapping driver .
10169	Convert string to CamelCase
10170	Prepare data for insert
10171	Updates cache data .
10172	Parse filter fields
10173	Parse filter values .
10174	Convert data to array
10175	Retrieve label
10176	Get additional styles by type
10177	Get additional styles by type
10178	Returns the link for this request
10179	Convert data to array
10180	Configure the model
10181	Get the database connection .
10182	Import a relationship
10183	Converts a class name to a string .
10184	Run the job .
10185	Deletes the record .
10186	Get class metadata .
10187	Flush the entity .
10188	Finds an entity
10189	Clears the entity manager .
10190	Removes an entity
10191	Refreshes an entity
10192	Gets the repository for the given entity
10193	Checks if the entity manager contains the given entity .
10194	Create a new EntityManager
10195	Process XCdr request
10196	Perform merge .
10197	Merges two lines
10198	Check if two lines are added
10199	Check if two lines are removed
10200	Send XCdr record
10201	Register WordPress services .
10202	Apply configs .
10203	Adds environment variables to the application .
10204	Get a job from the queue .
10205	Insert a job record into the queue .
10206	Request SOAP attribute
10207	Convert string to uppercase .
10208	Creates a new record
10209	Performs a read operation .
10210	Update a record
10211	Destroys a record
10212	Restore a record
10213	Get the count for a record
10214	Get a proxy instance .
10215	Closes all log output interfaces .
10216	Load all widgets
10217	Load theme options
10218	Called when a turn is started
10219	Add child element
10220	Store a newly created permission .
10221	Show the edit permission form .
10222	Update the specified permission in storage .
10223	Remove the specified permission from storage .
10224	Sets the adapter for the TeamSpeak3 plugin .
10225	Returns the type of the adapter
10226	Waits until the stream is ready .
10227	Method to get a list of channels .
10228	Get all games
10229	Convert data to array .
10230	Convert data to object
10231	Convert data to json .
10232	Convert data to string .
10233	Get value as integer .
10234	Filter data as float .
10235	Get boolean value as boolean .
10236	Generate the hydrator .
10237	Find all instance properties .
10238	Creates the constructor .
10239	Create the hydrate method .
10240	Updates application configuration .
10241	Checks if the given data can be created .
10242	Find one page by attribute .
10243	Find pages by attribute .
10244	Find one page by option .
10245	Find pages by option
10246	Register widget binding
10247	Register view parser
10248	register WxApplication
10249	Get database driver
10250	Get an invalid result .
10251	Start a timer .
10252	Subscribe to a signal
10253	Unsubscribes from a signal
10254	Get attribute value .
10255	Set primary key
10256	Execute a query and return the result
10257	Set column properties
10258	Strip the table from the given name .
10259	Selects a virtual server .
10260	Selects a server by port .
10261	Returns the port number of the TeamSpeak3 server .
10262	Returns the server object matching the given name .
10263	Returns the server matching the given unique identifier .
10264	Creates a new virtual server .
10265	Deletes a server .
10266	Starts a server .
10267	Stops the server process .
10268	Retrieve the permission list
10269	Returns a list of permissions for a specific permission
10270	Returns the permission ID of the specified permission name .
10271	Returns the name of the given permission ID for the given permission ID .
10272	Returns the category for the given permission ID .
10273	Returns an array of permissions for a specific permission
10274	Adds a log message to the server .
10275	Login to TeamSpeak3 server .
10276	Logs out the server .
10277	Sets the value of the specified parameter .
10278	Get validator
10279	Sets the content of the request .
10280	Parse a pageFetcher response .
10281	Returns the common application attributes .
10282	Get the value of an option
10283	Builds the options
10284	Execute a user command
10285	Ping the server
10286	sets an attribute
10287	Returns the formatted value for the currency .
10288	Formats the money for account
10289	Returns the rounded amount .
10290	Splits this money by a set of percentages .
10291	Prepares and injects given elements .
10292	Get user info
10293	Run the controller .
10294	Search router .
10295	Get the current request method
10296	get all logs
10297	DeathByCamels
10298	Convert bytes to human readable format
10299	Returns the codec name for the specified codec .
10300	Returns the group type name for the given group type .
10301	Returns the name of the specified permission type .
10302	Returns the log level for the specified level .
10303	Converts a log entry into an array .
10304	Get a list of results
10305	Get traits .
10306	Call a trait method .
10307	Call all registered events
10308	Retrieve attribute labels .
10309	Returns a list of attribute hints .
10310	Returns an associative array of this object as an associative array .
10311	Parses an error object into an error object .
10312	Fetches the reply object from a reply array .
10313	Gets the user s identity .
10314	Check if user has identity
10315	Restore the model .
10316	Get user by id
10317	Get followed games
10318	Get a list of timed notices
10319	Get a channel .
10320	Escapes special characters in the current string .
10321	Unescapes the current string .
10322	Get team by id
10323	Add a result .
10324	Get stream .
10325	Get Streams .
10326	Get a list of featured streams
10327	Get followed streams
10328	Returns a summary of all streams .
10329	Get the top posts .
10330	Returns the value of the element
10331	Tries to resolve a TSDNS hostname .
10332	Get configurables
10333	Sends a text message .
10334	Kicks a channel .
10335	Downloads the avatar .
10336	Bind events to the controller .
10337	Connects an event with the given constant
10338	Get a value from the query string
10339	Get base URI
10340	Sends a command to the server .
10341	Returns the next server event for the server .
10342	Returns an array of arguments for a command .
10343	Returns the TeamSpeak3 host object .
10344	Lists all registered extensions .
10345	Writes application configuration .
10346	Set the parent of the menu bar
10347	Retrieve the columns of a table .
10348	Creates a Transcoder instance .
10349	Get a value by case insensitive key .
10350	Set a header by case insensitive key .
10351	Return an array of timed notices
10352	Lists all extensions .
10353	Do the actual request .
10354	Runs install task .
10355	Deactivate extension .
10356	Activates an extension .
10357	Removes extension .
10358	Runs immediate task .
10359	Returns the TeamSpeak3Client object matching the given name .
10360	Downloads the channel icon .
10361	Sends a text message .
10362	Deletes the channel .
10363	Encode a JWT
10364	Sign a message
10365	Decode a JSON string
10366	Commits the cache .
10367	Bootstrap the application .
10368	Copies the channel group .
10369	Sends a text message .
10370	Get form class name .
10371	Gets an entity by id .
10372	Returns a list of entities
10373	Creates a new entity .
10374	Edits an entity .
10375	Deletes an entity .
10376	Reads a file .
10377	Parse a JSON string .
10378	Parse file .
10379	Normalize the id .
10380	Clean input attributes .
10381	Set label value
10382	Adds an element to the collection .
10383	Get the top level window .
10384	Remove an element
10385	Get element by id
10386	Loads the state from the file .
10387	Saves application state .
10388	Set data type
10389	A channel created event .
10390	Returns localized data field .
10391	Returns localized data field .
10392	Get package versioned data
10393	Get the value of a package s package data .
10394	Get human readable readme .
10395	Prepares a migration task .
10396	Builds a report task .
10397	Check if route matches request
10398	Parse regex route
10399	Check strictness .
10400	Returns the TeamSpeak3 profiler object .
10401	Initializes the transport object .
10402	Get blameable attributes .
10403	Get the timestamp attributes .
10404	Evaluate the attributes of the event .
10405	Initializes the observer .
10406	Before a request
10407	Post - request
10408	Reads data from the stream .
10409	Sends data to the server .
10410	Restore dump .
10411	Dump the database .
10412	Initializes the menu
10413	Add button to menu
10414	Run Wxgets .
10415	Populate columns with max value
10416	Populate all numeric columns with max value
10417	Transforms a JSON string to an associative array .
10418	Registers the Doctrine_orm_orm_Operator .
10419	Sets a file .
10420	Sets a post field .
10421	Set the raw content .
10422	Resolve an abstract .
10423	Bind a class to the container .
10424	Get the concrete class .
10425	Dispatch an event .
10426	Returns the type of spacer .
10427	Returns the alignment for a channel .
10428	Adds multiple permissions to a channel .
10429	Removes a set of specified permissions from a channel .
10430	Adds multiple permissions to a client .
10431	Removes a set of specified permissions from a client .
10432	Returns a list of files in a channel .
10433	Returns the TeamSpeak3Client object matching the given ID .
10434	Returns the TeamSpeak3Client object matching the given unique identifier .
10435	Moves a client to another channel .
10436	Kicks a client from the server .
10437	Removes a set of specified permissions from a client .
10438	Returns the server group object matching the given ID .
10439	Returns the server group object matching the given name and type .
10440	Adds multiple permissions to a server group
10441	Returns an array of profile information for the server group .
10442	Returns a ChannelGroup object matching the given ID .
10443	Returns the channel group matching the given name and type .
10444	Adds multiple permissions to a channel group .
10445	Sets the permissions of the current server .
10446	Saves an icon .
10447	Returns a new snapshot .
10448	Returns an array of log entries
10449	Adds a log message to the server .
10450	Sorts two TeamSpeak3Client objects .
10451	Sorts the list of two groups .
10452	Sorts a list of file names by comparing the list of file names .
10453	Copies the server group .
10454	Returns the name of an icon .
10455	Returns the class name .
10456	Returns the HTML of the ManiaScript object .
10457	Filters a list of nodes .
10458	Writes a cache file .
10459	Generate class name for Hydrator class .
10460	Connect to the TCP server .
10461	Displays the stream connection .
10462	Reads a single line from the stream .
10463	Checks if the given name can be created .
10464	Store a newly created role .
10465	Update the role in storage .
10466	Remove the role from storage .
10467	Send a GET request to the API .
10468	Returns the class for the ManiaSpeak3 plugin .
10469	Returns the icon of the ManiaSpeak3 plugin .
10470	Returns the complete text of the current page .
10471	Returns the HTML code for the flag of the TeamSpeak3 plugin .
10472	Sends the file transfer .
10473	Sends data to the server .
10474	Returns the contents of a TeamSpeak33 object .
10475	Get session context
10476	Returns type manager
10477	Get database connection
10478	Remove a database connection
10479	Process security filters
10480	Dispatches the request
10481	Get GET parameters
10482	Renders a view .
10483	Validate request object
10484	Dispatch view .
10485	Redirect to default module view
10486	Redirect to default user view
10487	Initialize user profile
10488	Gets the value of the user preference
10489	Get default permissions for group
10490	Returns the current view name
10491	Sets the current view name .
10492	Returns the current view set
10493	Sets the current view set .
10494	Set the base path of the application
10495	Get module path
10496	Generate SQL for a set of columns .
10497	Check string against hash
10498	Reads information from XML
10499	Set mail address to use mail
10500	Sends an email
10501	Log an email .
10502	Gets the info page
10503	Gets the path to a class with the path of a given class
10504	Load metadata class
10505	Get core lib file path
10506	Finds class file in cache .
10507	Fill person attributes
10508	Set a job by name .
10509	Process all jobs .
10510	Determine if the given date string is due to .
10511	Renders the label .
10512	Flattens a path .
10513	Merges the current configuration into the application .
10514	Creates a request .
10515	Store the responses in the cache .
10516	Get Plot Data
10517	Render XPlot
10518	Converts a mark to a color
10519	Convert a font to FF_1
10520	Get singleton instance
10521	Get an attribute by key .
10522	Set an attribute in a group .
10523	Get an attribute from a group .
10524	Find a record by id .
10525	Get the model
10526	Generate a unique id for a function
10527	Call all filters
10528	Add a callable to a hook
10529	Check if hook exists
10530	Call hook .
10531	Replace a hook
10532	Returns the count of registered filters .
10533	Check if the current action is a hook .
10534	Check if hook is called
10535	Add route to router
10536	Pipe middleware .
10537	Run the application .
10538	Send a signal .
10539	Set a container definition .
10540	Get a raw definition
10541	Encrypts a string
10542	Decrypts a value
10543	Get the default key
10544	Calculate arguments .
10545	Get string type
10546	Add application
10547	Get a sub route
10548	Serialize the node .
10549	Unserializes the route .
10550	Gets the actual year to the actual year .
10551	Get current time stamp
10552	Returns day name .
10553	Returns the short name of a day .
10554	Returns the month name .
10555	Returns the short month name .
10556	Format a date .
10557	Returns a formatted date .
10558	Registers base services
10559	Creates a section tree .
10560	Set owner .
10561	Remove comments from a string
10562	Minify CSS .
10563	Set a global variable .
10564	Quote a string
10565	Explode a generic string .
10566	Get a role by its name
10567	Add a role to a user
10568	Check if user has role
10569	Error handler .
10570	Exception handler .
10571	Get error message
10572	Get error backtrace
10573	Sets the name .
10574	Adds a setting .
10575	Adds a setting
10576	Unset an offset
10577	Set the current sync state .
10578	Collect sync data .
10579	Creates an expression context .
10580	Terminates this execution .
10581	Registers a child execution .
10582	Called when a child execution is terminated .
10583	Sets the scope .
10584	Creates a new execution .
10585	Creates a nested execution .
10586	Find all child executions .
10587	Recursively compute variables .
10588	Returns a variable .
10589	Gets a variable .
10590	Set a variable .
10591	Set a variable in the scope .
10592	Remove variable from scope .
10593	Removes a variable from the scope .
10594	Execute the node .
10595	Wait for the process to wait for a signal .
10596	Sends a signal .
10597	Take a transition .
10598	Inserts a concurrent execution into the current execution .
10599	load message from file
10600	Get translated message
10601	Get Zend_View object
10602	Check if given directory is readable .
10603	Check if given directory is readable .
10604	Check if given file path is readable .
10605	Checks if given file path is readable .
10606	Validate email address .
10607	Validate IP address .
10608	Check if given value is a valid IPv4 address .
10609	Validates that an IPv4 address is not reserved .
10610	Validate IPv6 address .
10611	Initializes the view .
10612	Check if attribute exists
10613	Check if class has method .
10614	Get method parameters
10615	Get method reflection
10616	Convert to array .
10617	Get the response of the SMS .
10618	Get blank line
10619	Returns the number of term cols .
10620	Get error block
10621	Get a single line of text
10622	Slice an array .
10623	set validation rules
10624	Complete the flow
10625	Get object by name .
10626	Creates and returns an object .
10627	Registers a namespace and extension
10628	Authenticate a user
10629	Retrieves a list of all contacts .
10630	Returns a list of liked media
10631	Sets a relationship
10632	Set object properties
10633	Find all records
10634	Count all rows in the database .
10635	Find by id
10636	Create a new record
10637	Execute the query .
10638	Execute the query .
10639	Check if the action can be proceed .
10640	Creates a link
10641	Add record to parent form
10642	Parse a picker map
10643	Converts an array of ReflectionClass instances to an array of ReflectionClass instances .
10644	Sets up the column mapping
10645	Get field by column name
10646	Get the key search rule
10647	Set Record Array
10648	Save old record
10649	Retrieves the record as array
10650	Convert sql array to recursively array
10651	Sets the SQL record for this object
10652	Gets the input field for a given join
10653	get join rule for join
10654	Get request method
10655	Get request URI
10656	Get options from doctrine .
10657	Get builder instance .
10658	Issues an access token
10659	Format a report .
10660	Decode a JSON file
10661	Validates a TOTP .
10662	Lists all Comment models .
10663	Do update action .
10664	Dispatch route .
10665	Implode an array
10666	Render CSV .
10667	Render the export
10668	Get data table for form
10669	Load variables in the session context
10670	Gets a property
10671	Returns the active record
10672	Set the active record id
10673	Fetches all records from the database
10674	Executes the query and returns the result set .
10675	Fetches the records from the database
10676	Count the number of records
10677	Run the search query .
10678	get number of records
10679	Fetch a single record
10680	generate script for shortcuts
10681	Get a config value .
10682	Bootstrap the application .
10683	Checks if a user is authenticated
10684	Sets the request .
10685	Sets the maximum age of the file .
10686	Fix the mime type of a file
10687	Validates a mime type .
10688	Checks if the file is text .
10689	Checks if the file is full file .
10690	Set file properties .
10691	Checks if the cache is valid .
10692	Reads from filesystem .
10693	Sends content .
10694	Cleans the source .
10695	Minify JS code
10696	Minify CSS code
10697	Wordwrap a string
10698	Returns text content .
10699	Sends text to browser
10700	Sets the allowed origin .
10701	Sends a file to the browser
10702	Register a new provider
10703	Denormalizes an object .
10704	Returns true if the given data supports the given type .
10705	Validate an array .
10706	Validate a model .
10707	Get action attribute .
10708	Get the url attribute .
10709	Go to the next page
10710	Go to the current page .
10711	Go back to the previous page
10712	Performs the final action
10713	Cancel the session .
10714	Renders the form
10715	Generate a random string .
10716	Check if a callback is empty .
10717	Helper function that returns the wrapped callable .
10718	Check if a container contains a given value .
10719	Merge anotherMI object into this one
10720	Creates an app .
10721	Dispatch event .
10722	Count documents by group .
10723	Aggregate a group
10724	Find a single document
10725	Get MongoIds from array of objects
10726	Normalize a date .
10727	Checks if a form is in the formRef libs libs
10728	Render the dashboard
10729	Get current page url
10730	Initializes all form fields
10731	Compare two integers
10732	Converts a value to an integer value .
10733	Finds all source files in a given path
10734	Register a namespace
10735	Builds the cache
10736	Find a composer autoloader class .
10737	Finds the vendor directory of a composer class .
10738	Get class loaders
10739	Get a middleware by name
10740	Set the value of a middleware
10741	Returns a copy of the printed string .
10742	Returns a new printable with an array limit .
10743	Quote string .
10744	Render an array .
10745	Generate an array pair .
10746	Format an array value .
10747	Generate string for object
10748	Reject an envelope
10749	Bootstrap middleware .
10750	Render a webpage
10751	Render the smarty
10752	Render a view
10753	Set response headers
10754	Create a new comment .
10755	List all files in a directory
10756	Sort modules .
10757	Get an array of routes
10758	Render menu items
10759	Render a single menu item .
10760	Write CSV to file .
10761	Configure command .
10762	Read configuration .
10763	Run checks .
10764	Run the export .
10765	Writes the cache .
10766	Loads a read - only cache .
10767	Initializes the command .
10768	Reads and executes a command .
10769	Runs a process .
10770	Check if value is chainable .
10771	Validates the form .
10772	Check if the field is satisfied by the given group .
10773	Complete the flow .
10774	Get the value of the field .
10775	Get the value of the field .
10776	Save old value
10777	Get the default value of the field
10778	Get the value on the field on create
10779	Get the value on update
10780	Checks if the field is required
10781	Check value type
10782	Check if data is valid
10783	Finds a template by name .
10784	Prepare name .
10785	Set theme to use .
10786	Register a theme
10787	Add a theme
10788	Returns the offset of an array
10789	Returns the key from an array
10790	Return the St deviation of a given array .
10791	Set middleware .
10792	Get action name
10793	Returns an array of route parameters .
10794	Check if a scheme matches the scheme .
10795	Check if the hostname matches the given hostname .
10796	Checks if the URI matches the route .
10797	Fetches a tree of records from the database .
10798	Fetch node path from node search rule
10799	Recursive function to get all child nodes
10800	Returns all settings .
10801	Get link value
10802	Get the text of the element
10803	Get new record
10804	Set the secret
10805	Convert float to binary .
10806	Format a number .
10807	Adds a table column to the query .
10808	Adds an SQL expression to the table .
10809	Resets the SQL
10810	Adds the order by
10811	Adds another SQL to the current query .
10812	add an association
10813	Get the SELECT statement for this query
10814	Gets data record by key
10815	Execute CLI action
10816	Get default template locations
10817	Render the select element
10818	Get fonts from Google .
10819	Check if the current route matches the given group .
10820	Validate input fields
10821	Validate uniqueness
10822	Check if record can be updated
10823	Check if record can be deleted
10824	Update a record
10825	Return an array of new record
10826	Generate the ID for this object
10827	Insert a new record
10828	Deletes a record
10829	Returns an array of fields that are onAudit .
10830	Execute the dependency trigger
10831	Get the join fields for a given join object
10832	Join a record with a given join object
10833	Check if record needs to be generated
10834	Runs the tests .
10835	Initializes the report
10836	Resolve route from request
10837	Resolves action parameters .
10838	Check if a setting exists .
10839	Get a setting by name .
10840	Returns all settings .
10841	Loads the settings .
10842	Sets the cache location .
10843	Prefixes CSS
10844	Protected prefix alignItems
10845	Protected prefix alignment rules
10846	Protected prefix align
10847	Prefix flex rules
10848	Get prefixes for spacing
10849	Get rules for prefix
10850	Comment a media .
10851	Performs a DELETE request
10852	Get filtered media by the given list of filters .
10853	Returns the preferred image
10854	Get a placeholder
10855	Create a rule from a string .
10856	Get property output
10857	Get the reflection method for the given object .
10858	Lists all sitemaps .
10859	Renders the sitemap .
10860	Get XML Tree
10861	Check if the access token is valid .
10862	Determine the access token
10863	Call a method .
10864	Check if call context has changed .
10865	Stores a command in the queue .
10866	Execute callback .
10867	Retrieve a phal object from the collection .
10868	Creates an environment file .
10869	Get pattern by name
10870	Merges the group config into the current one .
10871	Removes a record from the given data object .
10872	Remove a record from a MTO
10873	Removes a record from Mto1 .
10874	Casts to array
10875	Read metadata from XML
10876	Read meta collection
10877	Prefix the package with the given name .
10878	Checks if user can access
10879	Build redis driver .
10880	Get the model for a given table
10881	Add a resolver type
10882	Returns the resolver for the given type .
10883	Sets a resolver for a given type .
10884	Resolve a type
10885	Sets the authorative flag .
10886	Register a module
10887	Sort modules by path .
10888	Set the precedence of a module .
10889	Configure the main module from composer . json
10890	Find all modules in a given path .
10891	Get row checkbox by field name
10892	Registers services .
10893	Convert formatted string to value
10894	Convert value to string
10895	Converts a value to a number
10896	Convert number to string
10897	Convert a value to a date
10898	Convert date to string
10899	Convert a value to a datetime
10900	Convert datetime to string
10901	Convert value to currency
10902	Convert currency to value
10903	Convert a mask to a phone number
10904	Converts a datetime to another format
10905	Parse a formatted date
10906	Render DSN for MySQL driver .
10907	Render the DSN for PGSQL .
10908	Render the DSN parts .
10909	Public method for public insert
10910	Insert multiple data into a table
10911	Get the path of the request
10912	Get an entry .
10913	Format a query string .
10914	Format a value to a query string .
10915	Set the bind values
10916	Get DB profile .
10917	Format a report .
10918	Check if password is strong
10919	Validates email address
10920	Validate a date
10921	get error message
10922	Make input .
10923	Agrega una tabla
10924	Generate a new ID .
10925	Generate new system id
10926	Generate a new GUID
10927	get id from sql
10928	Get a visible attribute
10929	Set formatter
10930	Prepend a file to the format
10931	Close a file
10932	Get log path
10933	Get formatter by file extension .
10934	Get document manager .
10935	Render a view .
10936	Output a PDF to the browser
10937	Sets the base URL of the REST client .
10938	Make cURL request
10939	Retrieves many responses .
10940	Make a POST request to the endpoint .
10941	Sends many data to multiple endpoints .
10942	Push a job onto the queue .
10943	Creates the payload for the job .
10944	Returns the content element identifier .
10945	Returns the signature for an extension .
10946	Returns the signature for an extension .
10947	Get the title
10948	Removes a record from the form .
10949	Sorts the record by the given field
10950	Filter view children by view column
10951	Filter view children by system language .
10952	Set field value by db key .
10953	Get entity data as array
10954	Fill entity by data
10955	Extract a ZIP archive .
10956	Add files to zip archive .
10957	Extract a gzipped file .
10958	Read a line from a file .
10959	Get file size .
10960	Get classes from a file .
10961	Add route .
10962	Resolve route for given request .
10963	Resolves a config key .
10964	Check if key exists
10965	Gets a value by key .
10966	Load config file
10967	Get background details .
10968	Connects to Twitter .
10969	Check response status code
10970	Handle incoming message .
10971	Check if the status is a message .
10972	Read the next chunk size from the stream .
10973	Reads the JSON stream .
10974	Gets the value of a property .
10975	Get default value
10976	Get hidden attribute
10977	Get the text of the element
10978	Returns a map of shortcut keys
10979	Get context menu
10980	Get the html code for the event
10981	Get the redirect page for an event
10982	Returns the function type of an event
10983	Set form name
10984	Adjust form name
10985	Returns the formted function .
10986	Parse function name and params
10987	Call middleware .
10988	Clear all callbacks .
10989	Halt the current middleware .
10990	Reset the middleware .
10991	Creates an instance of an element
10992	Convert counter to string
10993	Make GET request
10994	Sends POST request
10995	Get the response for the request
10996	Determines if the redirect should follow .
10997	Check effective time
10998	Parse a string
10999	Parse a string
11000	Render form object .
11001	Render form
11002	Render form
11003	Displays a single entity .
11004	Create a new entity
11005	Call entity method .
11006	Get a single middleware
11007	Get default commands
11008	Updates a user .
11009	Returns the plugin s settings .
11010	Get the current user group .
11011	Get the direct members of the group
11012	Get effective membership
11013	Parse membership .
11014	Parse history
11015	Parse affiliate data .
11016	Parse search data
11017	Returns the current webpage object .
11018	Get element by name
11019	Returns error elements
11020	Render all sub forms
11021	Set the bundle class name
11022	Get translation key .
11023	Get list of words
11024	Load options from configs
11025	Remove a cache entry
11026	Get cache IDs
11027	Cleans all cached items
11028	Make a directory recursively
11029	Try to find a configuration file .
11030	Get config reader by file extension
11031	Add branch .
11032	Add route .
11033	Find a branch by its part
11034	Returns the next branch for the given URI part .
11035	Finds all records for an issue .
11036	Get wp content .
11037	Get list of categories
11038	Get WordPress menu
11039	Get list of pages
11040	Get list of recent posts
11041	Get post types .
11042	Get WordPress tags
11043	Get taxonomies .
11044	Get WordPress terms .
11045	Add a path to the search path .
11046	Set the precedence of a module .
11047	Returns the precedence of a module
11048	Clear the cache
11049	Get cached data
11050	Resolves a file to a path .
11051	Parse request URI
11052	Saves the stateholders in the session
11053	Get current step
11054	Get form inputs
11055	Cancel the session .
11056	Registers a sub type
11057	Get input from request
11058	Delete a cache file .
11059	Convert an array to seconds
11060	Get key words
11061	Finds all email addresses in a given string .
11062	Checks if a string contains an array .
11063	Redirect to another endpoint .
11064	Migrate up .
11065	Run the migration up to the specified directory .
11066	Set model id .
11067	Run the daemon .
11068	Check if a parameter exists
11069	Generate OAuth Request
11070	Generate the OAuth signature .
11071	Creates a new node .
11072	Creates a new transition .
11073	Add a setting .
11074	Add multiple settings .
11075	Get all settings .
11076	Get all cachable settings
11077	Returns all settings as array
11078	Returns the cached settings as array
11079	Get filtered settings
11080	Get filtered settings as array
11081	Render the tree .
11082	Render a node array
11083	Render single node item .
11084	Run the installer .
11085	Register the bundle for the given environment .
11086	Installs all the packages
11087	Initializes the command .
11088	Autoload class
11089	Loads a file .
11090	Forward to another route .
11091	set glyph icon
11092	Sets the query parameters .
11093	Sets the limit for the query .
11094	Get database connection
11095	Gets a property
11096	Returns the object associated with this association .
11097	Set an association
11098	Create annotations from a docblock .
11099	Create a connection from memory .
11100	Create a connection from a file .
11101	Get field by name
11102	Check if field exists
11103	Get field names .
11104	Get initial data model .
11105	Authorizes the index action .
11106	Checks if a request is allowed to create a new resource .
11107	Get a nested item
11108	Initialize the device
11109	Get export implementation .
11110	Returns the report implementation .
11111	Get runner implementation .
11112	Get cache implementation .
11113	Build the update SQL for the UPDATE query
11114	Builds the delete SQL for a record
11115	Get the style of the editcomb box
11116	Returns an array of child nodes .
11117	Get attribute value
11118	Returns an array of attributes .
11119	Gets a child node .
11120	Get literal value
11121	Cache menu if enabled .
11122	Handle the call
11123	Check if the request is valid .
11124	Check if call is a getter method .
11125	Is this call a setter .
11126	Prepare the call
11127	Get the response body
11128	Get the response from the response body
11129	Save an object variable
11130	Loads an object variable
11131	Saves all objects in the session
11132	Clear all session objects
11133	Saves a JSON array as a variable
11134	Set view history .
11135	Start timer .
11136	Prints elapsed time
11137	Increment the lap .
11138	Reset the timer
11139	Determine if the given value is a valid executable .
11140	Get redirect page
11141	Process data object .
11142	Process GET parameters
11143	Get the base URI
11144	Validate identity .
11145	Sets up the credentials
11146	Set visible attribute
11147	Get the first dump from the database .
11148	get from list
11149	Format a report .
11150	Call a middleware .
11151	Calls the getters for a property
11152	Call proxy methods .
11153	Calls proxy setters .
11154	Set catch halt exceptions
11155	Clear middleware .
11156	Disable middleware .
11157	Enable middleware .
11158	Get a single middleware .
11159	Get middleware collection by id .
11160	Group middleware .
11161	Check if middleware exists .
11162	Check if middleware is disabled .
11163	Check if middleware is enabled .
11164	Get middleware .
11165	Get middleware collection .
11166	Prepend a middleware to the middleware group .
11167	Add a middleware to the stack .
11168	Set the middleware context for the current request .
11169	Call middleware .
11170	Save settings to cache .
11171	Returns an array of forms from the given array
11172	Setup the bundle
11173	Find the transition for the given execution .
11174	Call a remote call
11175	Call ajax call
11176	Generate a link tag that can be used to create a link to confirm
11177	Return a submit button
11178	Cast key to string
11179	Check if middleware is abstract .
11180	Determine if the middleware is a collection .
11181	Resolve middleware .
11182	Resolve a middleware .
11183	Resolve many middleware .
11184	Resolve multiple middleware .
11185	Resolve a single middleware .
11186	Resolve single middleware .
11187	Render a report
11188	Get unique string
11189	Determine if the model has the given role .
11190	Determine if the user has the given role .
11191	Generate a hash
11192	Get curl info
11193	Perform the request .
11194	Check if a view has access to a specific role
11195	Get a view by name
11196	Format the report .
11197	Loads a XML document .
11198	Validates a file .
11199	Validates the schema .
11200	Resolve XIncludes .
11201	Get the value of an element .
11202	Get element by name
11203	Set the default namespace
11204	Register the environment namespace .
11205	Determines if the DOMDocument is an Environautautomaut automatployation document .
11206	Refresh the DOMXPath .
11207	Parses a libxml error into a string
11208	Get the resolvers for the given object .
11209	Check authorization params
11210	Create a new authorization request
11211	Complete the flow
11212	Prints the output of the request
11213	Get form inputs
11214	Redraw form
11215	Show client alert
11216	Show error message
11217	Call close popup .
11218	Execute client script
11219	Redirect to view
11220	Append scripts .
11221	Returns appended scripts .
11222	Append styles to a script .
11223	Get added styles
11224	Include client scripts
11225	Include RTE scripts .
11226	Include ckeditor scripts .
11227	Include the properties of the prop window .
11228	Include validator scripts
11229	Execute all action actions
11230	Composes action message
11231	Convert string to array
11232	Process form object errors
11233	Sets the list of subforms .
11234	Load a picker .
11235	Set request params
11236	Fetches the data set from the query
11237	Get element ID
11238	Automatically performs suggestion search .
11239	Render the context menu
11240	Render the HTML for the form
11241	Get event log message
11242	Get on event elements
11243	Run the event log
11244	Returns the element and event handlers
11245	Set client scripts .
11246	Removes a middleware from the stack .
11247	Run middleware .
11248	Create instance from string
11249	Generate a hash for a given timestamp .
11250	Decode a base32 string .
11251	Returns an iterator for the current directory .
11252	Returns a list of all files .
11253	Returns a list of directories .
11254	Returns an array of files .
11255	Make file .
11256	Make a directory .
11257	Move file to another path .
11258	Rename a file .
11259	Remove directory recursively
11260	Sets the field name .
11261	Sets the type .
11262	Sets the input format .
11263	Sets the value of the field
11264	Gets the value of the field .
11265	Save the children
11266	Add children to entity
11267	Returns an array of models .
11268	Outputs a list of models .
11269	Convert resource to array
11270	Generates a reCaptcha form
11271	Verifies a Google recaptcha response
11272	Get service object
11273	Render the error .
11274	Render HttpException .
11275	Render a CakePHP exception .
11276	Render a serializer exception .
11277	Render a validation serializer exception .
11278	Render error as json
11279	Render a HttpException as a JSON API response .
11280	Render exception as json
11281	Render a CakePHP exception .
11282	Default serializer render .
11283	Render a serializer exception
11284	Render a serializer exception .
11285	Default validation serializer render .
11286	Render a validation serializer .
11287	Render a validation serializer exception .
11288	Opens a session by ID
11289	Creates a session from cookie data
11290	Prepare text .
11291	Display text .
11292	Display empty lines .
11293	Initializes the command .
11294	On kernel response event .
11295	Initializes the debug bar .
11296	Starts a new session
11297	Checks if the current user agent is off .
11298	Regenerates the session
11299	Validates the session
11300	Link layers .
11301	Retrieve a parameter from the request .
11302	Register a process
11303	Print CLI header
11304	Parse raw body .
11305	Remove extra indentation .
11306	Add a request to the request .
11307	Parse query string from url
11308	Binds template
11309	Get a match for the given URI .
11310	Get the justification constant for a given value
11311	Returns an array of local files
11312	Extract documents link from html
11313	Check if link should be excluded
11314	Save a file
11315	Determine if a PDF exists .
11316	Get the next number .
11317	End the loop .
11318	Display text on screen
11319	Prints nl .
11320	Fit the algorithm to the given data set .
11321	Performs a prediction .
11322	Initializes the database table .
11323	Write a record to the database .
11324	Draws a list item
11325	Start a new line .
11326	Initialize the cache .
11327	Get the allowed size .
11328	Builds the form for a section .
11329	Get the form factory for the current request .
11330	Load fixtures from iterator .
11331	Resolves a relative URL .
11332	Install plugin .
11333	Composer plugin install .
11334	Run the composer installation .
11335	Updates a package .
11336	Called when composer is updated .
11337	Uninstall plugin .
11338	Uninstall plugin .
11339	Recursively removes the files matching the destination .
11340	Recursively delete a directory
11341	Set text colors
11342	Get current text area
11343	Calculates the width of the table .
11344	Scope by date .
11345	get field value
11346	Cast attribute .
11347	Cast attributes to array
11348	Set the value at the given key .
11349	Get a menu .
11350	Render tracker .
11351	Returns an array of service definitions .
11352	Parse the imports .
11353	Parse service definitions .
11354	Loads a configuration file .
11355	Recursively resolve services .
11356	Initializes the autoloader .
11357	Get api object
11358	Convert bytes into human readable format .
11359	Set the bullet
11360	Sets a new column definition .
11361	Calculates the total width of the table .
11362	Returns whether the table has a header text .
11363	Get the text of the header .
11364	Check if data is valid
11365	Calculates column widths .
11366	Draws the table
11367	Create a new session .
11368	Create a new session file .
11369	Save session data .
11370	Acquire a lock .
11371	Create a new section form .
11372	Creates a new instance of a class .
11373	Get the facts
11374	Parse the facts string into an array .
11375	Find by id
11376	Find a record by a where clause .
11377	Find all classes in the database
11378	Finds all entities by a given where clause .
11379	Creates a new model
11380	Update a record in the database .
11381	Parse notation
11382	Apply conditions to an expression
11383	Calculates the mean of the dataset .
11384	Create plugin client .
11385	Set the file .
11386	Adds a template .
11387	Checks if cache file is expired .
11388	Replace placeholders with blocks .
11389	Get template metadata .
11390	Builds a list of definition providers .
11391	Get the result of a formula .
11392	Save formula .
11393	Adds a header .
11394	Sets dropdown menu .
11395	Checks if the current user is granted to the current user .
11396	Downloads a file .
11397	Get the url for the given type and key .
11398	Sets album cover
11399	Get data by type
11400	Get the data from the given URL .
11401	Install the resources
11402	Check if date is valid
11403	Wrap a GUI frame
11404	Run the given commandline .
11405	Returns an array of methods for a class .
11406	Creates a new session .
11407	Send a new entity .
11408	Register providers .
11409	Register a provider from a file
11410	Get the facts .
11411	Populates the facts .
11412	Record a domain event .
11413	Apply domain event .
11414	Call plugin functions
11415	Draws the bar .
11416	Calculates the formula .
11417	Checks if the current request has a layout .
11418	Initializes the terminal state .
11419	Override the members of the given style .
11420	Clear styles .
11421	Sets text color .
11422	Set the fill color
11423	Setter for text colors
11424	Reverse colors .
11425	Factory method .
11426	Load all plugins .
11427	Show plugin in admin mode
11428	Checks if the cache is valid .
11429	Update the cache .
11430	Plugin hooks .
11431	Get a channel by name .
11432	Initializes loggers .
11433	Create a logger .
11434	Get a list of Location objects .
11435	Returns an instance of a class
11436	Returns an array of interfaces
11437	Get parent class
11438	Returns a list of methods
11439	Get all properties .
11440	Determine if the given type is defined .
11441	Add a materialized style .
11442	Get the aggregate styles .
11443	Rewrites paths .
11444	Wrap media rules in an array
11445	Replace the imports to the start of the given content .
11446	Gets data from archive .
11447	Deletes the archive .
11448	Get archive path
11449	Get archive file path
11450	Recursively cleans merged values .
11451	Filters an array .
11452	Return terminal screen size .
11453	Wrapper for style .
11454	Adds a script to the browser .
11455	Translate mailto .
11456	Returns a static form control .
11457	Generates a static form control .
11458	Adds a css style to an element .
11459	Make the directory .
11460	Set the files to publish .
11461	Initializes the user .
11462	Logs in the given identity .
11463	Regenerates the CSRF token .
11464	Login by cookie
11465	Get return url
11466	Check if login is required
11467	Renew the identity cookie .
11468	Renews the authentication status .
11469	Checks if the user has the specified permission
11470	Returns the list of days of week .
11471	Save uploaded file .
11472	Execute the query
11473	Add a DELETE query to the query
11474	Sets the table type to insert
11475	Add an inner join to the query
11476	Adds a where clause to the query .
11477	Adds a HAVING clause to the query .
11478	Returns the SQL for DELETE query .
11479	Creates a positional parameter .
11480	Binds the Monolog logger to the container .
11481	Binds the logger to the container .
11482	Sets the HTTP status code .
11483	Returns the formatted response body .
11484	Redirect to another url
11485	Create empty response
11486	Prepare the headers array
11487	Get all cookies from the request .
11488	Get default formatters .
11489	Extract auth user password from encoded string .
11490	Returns an array of scenarios .
11491	Fill scenario attributes
11492	Returns the form name .
11493	Get all public attributes .
11494	Validates the model .
11495	Validates multiple models .
11496	Translation message .
11497	Add attachment .
11498	Add plugin to request
11499	Send the request and return the response .
11500	Load a class
11501	Get all listeners .
11502	Set listener properties
11503	Get listener from annotation
11504	Returns option values
11505	Set options .
11506	Get a single key value
11507	Fill model from array
11508	Load entities from a directory .
11509	Extend the entity manager .
11510	Check all predictions .
11511	Process the extends xml
11512	Check if class method exists
11513	Check if class property exists
11514	Verify function .
11515	Verifies if the dispatcher is valid .
11516	Verify if dispatch is valid
11517	Get the dependencies for a dispatch .
11518	Get the dependencies for a dispatch .
11519	Dispatch class method .
11520	Dispatch class property .
11521	Get the class of the dispatcher .
11522	Dispatch function .
11523	Dispatch closure .
11524	Dispatch callable .
11525	Get the string of arguments as a string .
11526	Get request arguments .
11527	Parse request arguments .
11528	Generate a link to a named route
11529	Set the protocol version .
11530	Asserts the header values .
11531	Injects a header .
11532	Returns the current time .
11533	Check and update the fields of a cookie
11534	Stores a cookie .
11535	Adds all cookies from a response .
11536	Returns the cookies matching the given URL .
11537	Returns all cookies .
11538	Serialize the cookies into a string
11539	Unserializes the session .
11540	Check if the domain matches the request host .
11541	Return an instance of a CommandInterface
11542	Retrieve the arguments for a given command .
11543	Get the help for a specific command
11544	Return a singleton instance of frontend class
11545	Converts an expression to another .
11546	Parse expression part .
11547	Process a nested key
11548	Trim a unicode string
11549	Sets the encoding of the field
11550	Creates a new iterator exception .
11551	Initializes the translator .
11552	Initialize url language prefixes
11553	Get message formatter
11554	Start a transaction .
11555	Get the API request URL .
11556	Get the params for the API request
11557	Get the result lines from the API response
11558	Get success message .
11559	Find all budget by account id
11560	Get current language
11561	Parse the Accept - Language header
11562	Bind a binding .
11563	Make a class instance .
11564	Validates URL .
11565	Check if field is live variable
11566	Gets the value of a field .
11567	Wrap an object
11568	Return the field as a Date .
11569	Make session identifier .
11570	Encrypt session data
11571	Decrypt session data
11572	Generate session encryption key .
11573	Sets the encryption algorithm .
11574	Sets the hash algorithm .
11575	Prepares sets for update queries .
11576	Initialize service
11577	Gets a parameter .
11578	Check if target relation exists .
11579	Checks if a target attribute exists .
11580	Check if value exists .
11581	Generate the SQL statement for the given table .
11582	Renders a modal .
11583	Localize a file .
11584	Detaches the underlying stream
11585	Reads from the stream .
11586	Creates a new Request instance .
11587	Create request from globals .
11588	Set request server .
11589	Set request headers .
11590	Returns the request path .
11591	Get request path without query .
11592	Get http host .
11593	Sets request method .
11594	Get request method .
11595	Returns the mime type for a given format .
11596	Get the format for a given mime type .
11597	Returns request format .
11598	Renders a template .
11599	Init http client
11600	Add a middleware
11601	Create request application
11602	Set an alias .
11603	Set aliases .
11604	Get error log level
11605	Generate proxy .
11606	Returns a string of method call parameters
11607	Generate proxy class
11608	Get proxy properties .
11609	Get proxy methods
11610	Generate proxy class name .
11611	Get method declaration .
11612	Checks if a method can be proxied .
11613	Check if a list of methods can be proxy .
11614	Recursively traverse a tree structure
11615	Returns an array of method parameters
11616	Create a packagist hook
11617	Loads messages from database .
11618	Bootstrap the application .
11619	Bootstrap the application .
11620	Bootstrap core .
11621	Bootstrap the application container .
11622	Get environment variable .
11623	Set environment .
11624	Retrieve the application s configuration .
11625	Throw exception .
11626	Throws a new HttpRedirectException .
11627	Create a Response instance .
11628	Redirect to a route .
11629	Get a view instance .
11630	Get a value from the collection by key .
11631	Validate descriptor key .
11632	Validates descriptor for given key .
11633	Returns the cache invalidation settings .
11634	Set cache invalidation settings
11635	Initialize the logger
11636	Get log file path
11637	Verify a password .
11638	Set if config exists
11639	Renders the progress bar .
11640	Renders a progress bar .
11641	Process SOAP request
11642	Get SOAP server
11643	OnFlush event .
11644	Called when the cache is finished .
11645	Invalidate entity .
11646	Add tag to invalidate
11647	Returns a list of choice choices
11648	Set filter callback
11649	Apply the filter to the given value
11650	get refill percentage
11651	Get all SEO models .
11652	Set seoility attributes
11653	Get Seobility attributes
11654	Convert value to boolean
11655	Get the ordinate by an abscissa
11656	Calculates the abscissa by coordinates .
11657	Add attachment .
11658	Encode the message body .
11659	Encode the email to a file .
11660	Encode this part to a file .
11661	Adds a new MIME part to the message .
11662	Encode a quoted printable
11663	Build a header string
11664	Builds a parameter
11665	Explode quoted string
11666	Encode a header value
11667	Encodes a string using mb_string .
11668	Return the admin messages view .
11669	Returns the next line from the stream .
11670	Render menu items .
11671	Called before the action is called
11672	Set an option
11673	Returns a slug of a string .
11674	Returns a sentence .
11675	Extract gallery array
11676	Check if the session is valid .
11677	Get error message
11678	Set the same Site .
11679	Cleans and adds header .
11680	Finds classes in a given namespace .
11681	Get namespace path
11682	Get paths for a namespace
11683	Get namespace prefixes
11684	Get loader prefixes .
11685	Updates the session .
11686	Merges session data into the session .
11687	Get the session data from the session .
11688	Get the page from the query string .
11689	Returns the query string for the current page .
11690	Get filters as array
11691	Creates a form instance .
11692	Store the result in the session .
11693	Get pagination .
11694	Get previous record id and next record
11695	Convert to array .
11696	Add new field
11697	Process options .
11698	Get connection params
11699	Check if database is installed
11700	Returns the SQL string for this object
11701	Execute this query
11702	Get entity repository
11703	Creates a new entity .
11704	Save entity .
11705	Removes an entity from the registry .
11706	Commits all created models .
11707	Get store .
11708	Get store configuration .
11709	Get store instance from config .
11710	Validates the password
11711	Creates a new instance based on the accept header .
11712	Parse quality string
11713	Compare array of strings
11714	Calculate the earth radius of a latitude .
11715	Converts degrees to DMS .
11716	Convert degrees to decimal
11717	Encode production rendering
11718	Debug rendering
11719	Log the error message
11720	Generates a configuration file .
11721	Creates a configuration file .
11722	Saves messages to PHP file .
11723	Save messages to a PO file .
11724	Creates a time from array .
11725	Creates a time from a string .
11726	Creates a time from a date .
11727	Creates a time from seconds .
11728	Invalidate tags .
11729	Flush all tags .
11730	Encode tags .
11731	Register the package s config .
11732	Get all cookies .
11733	Set a cookie .
11734	Remove a cookie .
11735	Prompts the user for confirmation .
11736	Get the labels .
11737	Wrapper around live session
11738	Gets the table primary key .
11739	Gets the table foreign keys .
11740	Gets the table indexes .
11741	Gets a table uniques .
11742	Gets the metadata for a table .
11743	Gets the default values for a table .
11744	Get a parameter by key .
11745	Checks access for a given permission
11746	Enable distinct .
11747	Set the list of columns .
11748	Join a table
11749	Adds an inner join to the query .
11750	Left join method
11751	Left outer join
11752	Add a right join to the query
11753	Adds an outer join to the query .
11754	Adds a full outer join to the query .
11755	Sets the group by
11756	Set the HAVING condition .
11757	Add OR HAVING condition .
11758	Order by .
11759	Sets the limit and offset
11760	Sets the offset .
11761	Build the SQL query .
11762	Renders a link .
11763	Renders a button .
11764	Render locale switcher .
11765	Convert equations to string
11766	Get the ordinate by the given coordinates
11767	Get abscissa by position
11768	Finds a record by id
11769	Find one record by predicate
11770	Check if a record exists .
11771	Check if data exists by predicate
11772	Delete rows by predicate
11773	Deletes a record
11774	Function to update data
11775	Insert data into table
11776	Retrieve the relation instance .
11777	Returns the list of primary keys
11778	Get the primary key of the model
11779	Returns information about the column .
11780	Execute a statement
11781	Get predicate for primary key
11782	Checks data columns .
11783	Parse content as array
11784	Parse content as array
11785	Set the return type .
11786	Run the plugin .
11787	Enqueue hooks .
11788	Set type .
11789	Set the name of the field .
11790	Set the start position .
11791	Set the damage .
11792	Set hit level
11793	Set the meter gain value
11794	Defines the inputs .
11795	Add cancel ability .
11796	Set start frames
11797	Set animation frames
11798	Set the recovery frames
11799	Set head advantage on hit
11800	Define advantage on guard
11801	Builds the Move object .
11802	Send a message to slack
11803	Parse segments .
11804	Parse route data .
11805	Validate datum
11806	Searches for a given param .
11807	Call repository .
11808	Validates the class name .
11809	Check if file is image
11810	Returns the number of items in the directory
11811	Get the route path info
11812	Get the route and params from the command line .
11813	Returns a new instance with the specified scheme .
11814	Returns a new instance with the specified user and password .
11815	Returns an instance with the specified host .
11816	Returns a new instance with the specified port .
11817	Query array by key .
11818	Retrieves an array of key = > value pairs based on brackets .
11819	Set query variables
11820	Set a query variable
11821	Returns the complete URL .
11822	Normalizes the URI .
11823	Resolves a URL to another URL .
11824	Checks if the URI is fragment only .
11825	Get the canonical URL of the current request .
11826	Get the url of the request
11827	Get option by name
11828	Build query string
11829	Parse a URL
11830	Display text on screen
11831	Translate the message .
11832	Suggest request language
11833	Get new states list .
11834	Validate the states names .
11835	Switch to new states .
11836	Find all categories by budget id
11837	Displays login form .
11838	Logout user .
11839	Connects to the network .
11840	Get a parameter by name
11841	set html body
11842	add an HTML image
11843	Adds an attachment
11844	Convert a file to a string
11845	add a text part
11846	add a html part
11847	Adds an HTML image part to the given object .
11848	Adds an attachment part to an object .
11849	Encode headers .
11850	Checks if the parameters are set .
11851	Check if value is valid
11852	Initializes the item .
11853	Loads the permissions .
11854	Save the items .
11855	Save data to a file .
11856	Creates json response .
11857	Sets the callback .
11858	Set encoding options .
11859	Get layout .
11860	Get categories as string
11861	Update session entity
11862	Deletes the session
11863	Configure PPC command options .
11864	Load the Pm config from the console .
11865	Get the memory limit from ini file .
11866	Add a leaf node to the model .
11867	Render tool
11868	Add plugin .
11869	Retrieve a config value .
11870	Generate a URL .
11871	Add GET route
11872	Create html response
11873	Creates a redirect response .
11874	Set path segments .
11875	Get proxy class
11876	Get instance of class
11877	Get all records .
11878	Get a list of columns .
11879	Paginate the results .
11880	Find an entity by id .
11881	Persist an entity
11882	Deletes an entity
11883	Count entities .
11884	Creates a select query .
11885	Apply scopes to the given query builder .
11886	Applies orderBy to query builder .
11887	Make a new NoResult exception .
11888	Replace query parameters .
11889	Add method
11890	Get method by name
11891	Shutdown loop .
11892	Add multiple headers .
11893	Sets the link attribute .
11894	Creates a new request
11895	Creates a new photo instance .
11896	Checks if a value is a range
11897	Starts the session
11898	Regenerates the session ID
11899	Close the session
11900	Unset all session variables
11901	Destroys the session
11902	Decode session data
11903	Sets the session cache_expire
11904	Get a single instance of the class
11905	Get module options
11906	Returns the file size
11907	Set walk flag
11908	Set flag of array
11909	Set matrix data
11910	Gets a node by index
11911	Set the value of a vertex .
11912	Rewinds the position of the iterator
11913	Get previous position
11914	Get previous X position
11915	Get previous Y
11916	Set the previous position
11917	Get the next position
11918	get next x position
11919	Get the next Y
11920	Move forward to next position
11921	Seek to given position .
11922	Get current position
11923	Get the current key
11924	Returns true if the path is valid .
11925	Check if the key is a valid X .
11926	Check if the current position is valid .
11927	Returns the number of edges in the graph .
11928	Seek to an offset .
11929	Seek to an offset
11930	Check if an offset exists
11931	Returns the element at the given offset
11932	Set the value at the given offset
11933	Checks if the value is a boolean .
11934	Allow view methods for an object .
11935	Allow controller methods
11936	Set table name .
11937	Sets the FROM table .
11938	Add AND condition .
11939	Set or where conditions .
11940	Set a static rule .
11941	Set static rule reference
11942	Get a Zend_Filter_Interface object
11943	End the body .
11944	Register js file
11945	Registers a javascript var .
11946	Returns an array of default config files
11947	Returns a singleton instance of PEAR_Config class .
11948	Setup the channels array
11949	Reads a configuration file and merges it with the specified layer .
11950	Writes a configuration file .
11951	Read PEAR_Config data from a file
11952	Gets the default channel for the specified layer .
11953	Get a channel s value
11954	Set a list of channels
11955	Get configuration type
11956	Returns the documentation for a key
11957	Returns the prompt for a given key
11958	Returns the group for the given key .
11959	Returns the list of group names
11960	Returns all keys of a specific group
11961	get set values
11962	Returns a list of all available channels .
11963	Remove a configuration key
11964	Remove a layer from the configuration
11965	Determine if the layer is defined by the given key .
11966	Check if the given key exists in the configuration .
11967	Set the registry
11968	Process the extends section
11969	Replace constants in a given value .
11970	Get log callback .
11971	Checks if given value is valid .
11972	Returns an array of valid values .
11973	Returns an array of valid values .
11974	Sets the value of the enum .
11975	Initializes the postinstall class
11976	Start a post - install process .
11977	Add success .
11978	Increment the idle time of the client .
11979	Gets the estimated amount of virtual accounts .
11980	Get request methods .
11981	Disable WordPress auto update .
11982	Block wp - request
11983	Remove admin nag .
11984	Check if point is valid
11985	Returns true if the diagonal of the diagonal of the diagonal of the diagonal of the diagonal of the diagonal .
11986	Get the value of a composite key .
11987	Check if a composite key exists .
11988	Find application by id .
11989	Find all applications .
11990	Checks if two numbers are equal .
11991	Returns an array of digits .
11992	Builds a number from a list of digits .
11993	Validates a number value .
11994	Make a call to the server .
11995	Generate a cache key .
11996	Connect to Redis server .
11997	Get command string .
11998	Convert domain event message into MongoDB document .
11999	Get domain event message .
12000	Resets the form
12001	Normalizes the given messages .
12002	Process post validation .
12003	Attach form data event
12004	Get all configured forms .
12005	Remove string from array
12006	Get all entities .
12007	Swaps a new entity
12008	Attaches form elements to a form
12009	Set sub form data handler
12010	Removes all fields from form .
12011	Add a response to the queue
12012	Creates a PSR - 7 response from a string
12013	Create a PSR - 7 response from a file .
12014	Makes the head version of an entity
12015	Check if the entity needs a new version .
12016	Persist an entity
12017	Clear all versions of an entity .
12018	Clean up a directory .
12019	Check if key exists
12020	Move a key from source to another folder
12021	Try to reconnects to another filesystem
12022	Determine if the given key isistant .
12023	Create a path recursively
12024	Find an entity by ID .
12025	Create a new Entity
12026	Save an entity
12027	Deletes an entity .
12028	Validates the entity .
12029	Execute a select query .
12030	Builds and returns query builder .
12031	Set criteria in query .
12032	Set array criterion in query .
12033	Set order by .
12034	Save entity to database .
12035	Set the properties for a save create query .
12036	Set the properties for a save create statement .
12037	Returns the relations for the given entity .
12038	Ensure that all required properties are set .
12039	Broadcast a notification
12040	Execute a set of operations
12041	Get script src
12042	Render HTML tag .
12043	Display image tag .
12044	Display audio field .
12045	Verify a response
12046	Verify a request .
12047	Render script tag
12048	Render a script with a callback function
12049	Check key .
12050	Checks if the given value is a string .
12051	Send verify request .
12052	Initializes the widget
12053	Finds the view file for a given view .
12054	Render a php stateless file .
12055	Register post types .
12056	Generate a token .
12057	Generates a memory token .
12058	Execute the build command
12059	Message filter callback
12060	Log a notice
12061	Log an info message
12062	Log a debug message
12063	Logs raw message
12064	Profile end point .
12065	Logs a message .
12066	Converts a message to a string .
12067	Converts an exception to a string .
12068	Colorize text
12069	get callable data
12070	Replace placeholders in a message .
12071	Format a value .
12072	Find a seo model .
12073	Returns the table name for the given ActiveRecord object .
12074	Deletes all records for the given model .
12075	Save new Seo model
12076	Initialize database connection
12077	Common constructor .
12078	Get summary of all commands .
12079	Returns an array of shortcut names
12080	Get the help for a specific command
12081	get help args
12082	Handle post package event .
12083	Compile DSN into a string
12084	Escape a value
12085	Adds a template root .
12086	Get the count for a given column .
12087	Get count for multiple values
12088	Creates the count query .
12089	Get the entity manager
12090	Get current path .
12091	Loads a config
12092	Clears an entry .
12093	Returns the bundle with the given name .
12094	Sets a bundle .
12095	Clears a bundle .
12096	Invalidate an entity .
12097	Ensure that the dependencies database exists .
12098	Get the dependencies of a package
12099	Get the dependencies of a package
12100	Install a package
12101	Uninstall a package
12102	Rebuild the package s dependencies .
12103	Locks the dependency file
12104	Unlock the lock
12105	Retrieves the dependencies of this package
12106	Write the dependencies to the file .
12107	Auto load modules
12108	Register a module
12109	Get the content of a specific location
12110	Renders error view .
12111	Sets the foreground .
12112	Sets the background .
12113	Set black color .
12114	Set red color
12115	Set green color .
12116	Set yellow color
12117	Set blue color .
12118	Set MAGenta color .
12119	Set cyan color .
12120	Set white color .
12121	Resets color .
12122	Sets the background color .
12123	Removes an option .
12124	Formats the message .
12125	Logs a command .
12126	Get uploaded files .
12127	Set the raw state of the package .
12128	Returns an array of postinstall scripts
12129	Initializes postinstall scripts
12130	Fill package info from array
12131	Returns a list of files and directories
12132	Get the configuration for the package
12133	Check if the package is compatible with the package .
12134	Check if a package is a subpackage
12135	Get a dependency group by name
12136	Slices a key in an array
12137	Add the compiler pass to the compiler .
12138	Computes the modulo of two numbers .
12139	Calculates the modulo from two parts
12140	Update the observer .
12141	Log a message to the target .
12142	Select from repository entity
12143	Get the entity alias
12144	Delete a row from the database .
12145	Executes the UPDATE query .
12146	Sets the FROM table .
12147	Set the value of an alias .
12148	Add a group by .
12149	Add a group by
12150	Order by .
12151	Add order by
12152	Sets the maximum number of results .
12153	Paginate the results .
12154	Fetch one result
12155	Fetch a single result
12156	Fetch all results .
12157	Generate a parameter .
12158	Find unused parameter name
12159	Parse call methods .
12160	Call function methods .
12161	Is associative array?
12162	Creates description for given subject .
12163	add timestamp entry
12164	Returns the timestamp as a table
12165	Get page load time .
12166	Get the most consuming domain .
12167	Renders header .
12168	Render header image
12169	Renders the card body .
12170	Renders card footer .
12171	Get controller group
12172	Get option values
12173	Get help for action
12174	Get action options help
12175	Returns the headers collection .
12176	Check if user agent is Flash .
12177	Returns the raw body of the request
12178	Get request body params
12179	Get host info
12180	Get script url
12181	Get server params
12182	Returns the content types accepted by the client .
12183	Returns a list of languages accepted by the client .
12184	Returns an array of eZTags .
12185	Returns the CSRF token
12186	Generate a CSRF token .
12187	Get default server params .
12188	On login .
12189	Crop an image
12190	Make crop name .
12191	Crop a file
12192	Get the size of an image
12193	Returns the list of file permissions for a given file .
12194	Returns an array of annotations for the class .
12195	Get annotation matches from doc string .
12196	Sets an annotation .
12197	Set annotation arguments .
12198	Get annotation properties .
12199	Processes annotation properties
12200	Get argument list
12201	Determine the value of a class .
12202	Get annotation from annotation map
12203	Cleans the match .
12204	Returns an array of subscribed events
12205	Handle a custom command
12206	Handle help command
12207	Get the provider for a command
12208	Add a LEFT JOIN table to the query .
12209	Add a right join to the query .
12210	Add a right join clause to the query .
12211	Convert to SQL .
12212	Fetch all rows as array
12213	Sets the table name .
12214	Sets the object s structure .
12215	Sets the object database name .
12216	Sets the model name
12217	Build the object model
12218	Build the fields
12219	Register the validation factory class .
12220	Loads the services .
12221	Get the target site ID .
12222	Get the parent relation of a record
12223	Renders a single item .
12224	Executes all queries .
12225	Executes the query and returns a single result .
12226	Retrieves a single column .
12227	Returns the number of affected rows .
12228	Check if the table exists .
12229	Call a method prophecy .
12230	Find all calls that match a given function .
12231	PEAR registry constructor .
12232	Create the state directory
12233	Create a channel state dir
12234	Creates a channel directory
12235	Returns the channel file name
12236	Get the name of a channel from an alias .
12237	Get the alias for a given channel .
12238	Locks the registry
12239	Check if a channel exists
12240	Check if a mirror exists .
12241	Determine if the given alias is an alias .
12242	Returns information about a specific channel .
12243	Update a channel
12244	Check if the given data matches the given callback .
12245	Gets the tinyMCE file
12246	Initialize String with given value
12247	Get entity manager
12248	Resolve class name
12249	Validates the given value against the given hashes .
12250	Validate if route exists .
12251	Hard copy a directory
12252	Initializes widget .
12253	Get the next day
12254	Get previous day
12255	Create a random date range
12256	Get file from path
12257	Resolves a directory .
12258	Opens a file .
12259	Creates a file .
12260	Write to a file .
12261	Returns the contents of a file .
12262	Change mode .
12263	Locks a file
12264	Called when a file is locked .
12265	Ensure that the given value is a File object .
12266	Ensure that the given object is a directory .
12267	Check the lock timer .
12268	Get global variables .
12269	Render section .
12270	Adds a ON clause .
12271	Add a where clause to the query .
12272	Add a WHERE condition to the query .
12273	Convert array to collection
12274	It is a normal type .
12275	Get session data .
12276	Update a record
12277	Reverse down .
12278	Resets the database .
12279	Show the migration history .
12280	Lists new migrations .
12281	Creates a new migration .
12282	Revert a migration .
12283	Run migrations to a given time .
12284	Migrate to a specific version .
12285	Loads the database adapter
12286	Connect to database
12287	Add a cached query
12288	Get cached results
12289	Executes an array query
12290	Creates a new table
12291	Add fields to a table
12292	Get table info
12293	Checks if a table exists
12294	Build fields array
12295	Escape a string
12296	Clear the query
12297	Set where clause
12298	Set where string
12299	Set where in
12300	Simple OR WHERE
12301	Simple AND WHERE
12302	Set order by
12303	Get query string
12304	Get all results from the database .
12305	Get a single row from the result set .
12306	Get all core extensions
12307	Get ModelOperator instance
12308	Set the path to the filesystem
12309	Load structure files
12310	Returns structure for given model
12311	Save model structure
12312	Dump the data to a file
12313	Load data from models
12314	Find all transactions for a given account .
12315	Set the query state .
12316	Get the number of commands in the queue .
12317	Process all commands .
12318	Executes a query .
12319	Set connection status .
12320	Handle a single message
12321	Processes incoming data
12322	Cancel request .
12323	Redirect user to socialite .
12324	Login callback .
12325	Unlink a social provider .
12326	Update the settings .
12327	Check provider .
12328	Set the social network configuration .
12329	Register social user .
12330	Cleans up all expired timers .
12331	Pack a record into an array .
12332	Unpack a record
12333	Creates the cleanup timer .
12334	Check if menu item has submenu
12335	Set the account id
12336	Set the userId value
12337	Get Account Account
12338	Get current user
12339	Generate the next exception
12340	Cleans a string
12341	Initialize the config object
12342	Get the list of valid roles for a release .
12343	Get base install roles
12344	Shorten the string
12345	Set the blocksize
12346	Gets a value by key .
12347	Generate config names
12348	Merge data into one array
12349	Reads configuration data from config file .
12350	Read file s data
12351	Normalizes a config file path .
12352	Apply a domain event to the aggregate .
12353	Record a domain event .
12354	Set a related model
12355	Triggers the event .
12356	Redraws all visible components
12357	Redirect to destination
12358	Initializes plugin plugins .
12359	Set multiple variables
12360	Fetch from string
12361	Loads plugins from a directory
12362	Create BusinessHours from array .
12363	Shift business hours to given timezone .
12364	Flattens days intervals .
12365	validate a warning
12366	Returns the contents of a file
12367	Parse imports .
12368	Parse YAML .
12369	Set YAML parameters
12370	Calculate the request length
12371	Execute a command .
12372	Serialize a value
12373	Unpublish the given entity .
12374	Set the class name
12375	Set the ID column
12376	Set the name column
12377	Set data column
12378	Set lifetime column
12379	Set the modified column
12380	Set the created column
12381	Get all providers .
12382	Get all available providers .
12383	Bootstrap the application
12384	Registers the content negotiation service .
12385	Set the request format .
12386	Validate request content type .
12387	Execute a function
12388	Discovers a channel .
12389	Get a dependency2 object .
12390	Get the download directory
12391	Detects the cycle for a deprecation
12392	Sets up the dependencies graph
12393	Get url argument
12394	Outputs a string
12395	Get CLI arguments
12396	Register the NoCaptcha class .
12397	Register the validator rules .
12398	Register form macros .
12399	Load properties from XML file .
12400	Read from a file or file
12401	Return the XML representation of this channel .
12402	validate an error
12403	Get the base URL of a resource type .
12404	Resets functions for a specific type
12405	Set default PAR protocols
12406	Get a mirror for a server
12407	Set validation package
12408	Adds a function
12409	Add a mirror function
12410	Returns the validation package
12411	Returns the PEAR_Validation object for this instance .
12412	Check if a property can be getter .
12413	Check if a property can be set .
12414	Returns the cache file .
12415	Loads the cache parameters .
12416	Add an entry to the cache
12417	Gets a value from the cache .
12418	Gets an entry from the cache .
12419	Checks if a cache entry exists .
12420	Unset an entry .
12421	Applies site conditions to the query .
12422	Assigns a value to the array .
12423	Extract errors from an error .
12424	get model config file
12425	Get model definition
12426	Save model definition .
12427	Get the metadata from the request .
12428	Set field name
12429	Set field color
12430	Set field parser
12431	Aggregate style collection
12432	Make a cURL request .
12433	Proxy image proxy
12434	Create a validator .
12435	Validates a model attribute .
12436	Validates a value
12437	Initializes the application .
12438	Shutdown function .
12439	Generate a URL to a controller
12440	Returns the canonical URL of the current page .
12441	Normalize the route path .
12442	Check if all tests are working .
12443	Get all view names for a given schema .
12444	Get a value from the storage .
12445	Store a value in the cache .
12446	Store multiple values at once
12447	Pull a value from the store .
12448	Add a value to the cache .
12449	Retrieve a value from the cache .
12450	Deletes a key
12451	Cleans up a string
12452	Add default options to the command .
12453	Get the value of an option or a configuration array .
12454	Returns the value of an option with typecast .
12455	Load configuration from file .
12456	Load configuration from file .
12457	Render config .
12458	Render a value to a string
12459	Normalize config array path
12460	Set package version 2 . 1
12461	Clears the contents of the package
12462	Clears the dependencies tag
12463	Sets the package type
12464	Get current release version
12465	Adds an install tag to the current release .
12466	Adds an ignore tag
12467	Adds a binary package tag
12468	Adds a configure option
12469	Set the PHP install condition
12470	Set the OS install condition
12471	Set the arch install condition
12472	Generate a changelog entry
12473	Check if file is a video .
12474	Get video info
12475	Set field value
12476	Set field value
12477	Set field type
12478	Set field value
12479	Set the category id
12480	Set the value of the accountId virtual
12481	Create from start time and end time .
12482	Create instance from array .
12483	Loads a sqlite file .
12484	Creates a MySQL instance .
12485	Run a query and return the result .
12486	Get a list of all tables in the current database .
12487	Get a single row from the result set
12488	Get a single column from the result set
12489	Check if table exists
12490	Checks if a column exists .
12491	Get all primary keys of a table
12492	Get all column names from a table .
12493	Log query .
12494	Listen to bootstrap events
12495	Run the application .
12496	Sets the list of private keys
12497	Set a private key
12498	Set envelope keys
12499	Sets the compression
12500	Returns a formatted timestamp .
12501	Supprime une uilisateur
12502	Execute a function
12503	Creates migration history table .
12504	Add a filter to the chain
12505	Apply a filter to a class
12506	Adds the inverse relation to the result array .
12507	Populates the relation .
12508	Populates a single relation .
12509	Populates the relation with multiple models .
12510	Returns list of invalid properties
12511	Process array recursively
12512	Create entity from class
12513	Checks if text is equal to another .
12514	Returns whether this string ends with another text .
12515	Returns true if the string contains the given text .
12516	Returns a copy of this string .
12517	Replace a string with another text .
12518	Replace text by regex .
12519	Emits before save .
12520	Performs beforeDelete event .
12521	Refreshes the model
12522	Update all records in the database .
12523	Deletes all records from the database .
12524	Inserts a model into the database .
12525	Persists the model to the database .
12526	Deletes this object .
12527	Get methods .
12528	Get method identifier .
12529	Custom data callback .
12530	Get all commands
12531	Get the help for a controller
12532	Create a controller .
12533	Handle exception .
12534	Handle fatal error .
12535	Log an exception .
12536	Get exception trace .
12537	Reduce the trace of the exception .
12538	Proxy method with app property .
12539	Proxy method .
12540	Injects a variable into the list of arguments .
12541	Ensure that string is translated .
12542	Create a new repository
12543	Set up notification module
12544	Generate a random key
12545	Return an array of properties for data store .
12546	Registers a custom error class .
12547	Updates user .
12548	Make a request for a list of countries
12549	Encode a string .
12550	Get default reason phrase
12551	Get a specific header
12552	Get the response body .
12553	Decode data from gzip
12554	Check if table exists
12555	Remove all data from the database
12556	Checks if the pool has expired .
12557	Returns all headers .
12558	Get HTTP header name .
12559	Writes multiple messages .
12560	Write a message to the console .
12561	Set filter type
12562	Find a view in the given paths .
12563	Returns an array of possible file names for a given file name .
12564	Starts the session .
12565	Gets a value by id
12566	Sets a cookie .
12567	Removes a cache entry
12568	Generate a CSRF token .
12569	Validates a CSRF token .
12570	Humanize a table name .
12571	Deletes the file
12572	Move the file to another location .
12573	Cleans the filename
12574	Dispatches an event .
12575	Handle error messages
12576	Handle fatal errors
12577	Saves the item .
12578	Returns a string representation of this exception .
12579	Convert array to XML .
12580	Convert a header string to an array .
12581	Load a config file
12582	Set a config
12583	Get a configuration value .
12584	Build a stack of configs
12585	Parse config recursively
12586	parse config recursive
12587	Compile a join constraint into SQL .
12588	Compile a where null clause .
12589	Compile an insert statement into SQL .
12590	Compile an update query .
12591	Compile a delete query .
12592	Wrap the given value .
12593	Set the arguments for the function .
12594	Set promise .
12595	Set the prediction .
12596	Checks if a callable is callable .
12597	Creates a new Gallery instance .
12598	Connect to a user .
12599	Creates a new SQL query
12600	convert to sql string
12601	Scan a resource .
12602	Flattens the current value
12603	Returns a new collection with the given predicate .
12604	Execute the callback stack
12605	Execute a callback as reference
12606	Parse a callback function name
12607	Get image constraints
12608	Calculate the min value of an option .
12609	Returns the controller
12610	Get action name
12611	Resolve the request and process the response .
12612	Process dispatched data
12613	Process the response .
12614	Get router exception .
12615	Get terminal dimensions .
12616	Get the operating system .
12617	Translate a string
12618	Locates a file
12619	Formats the value as text .
12620	Formats the value as an email address .
12621	Formats the value as decimal .
12622	Formats the value as a short size .
12623	Creates a new model . If creation is successful the browser will be redirected to the view page .
12624	Updates an existing model . If update is successful the browser will be redirected to the view page .
12625	Check if class exists .
12626	Executes a query and returns the result
12627	Returns the first column of a given query
12628	Scope to exclude records .
12629	Scope only .
12630	Runs console request .
12631	Get value from array
12632	Get a header by name
12633	Remove a specific header .
12634	Returns a new instance with the given body .
12635	Get the icon for the payment type .
12636	Returns an array of all possible types
12637	Bind a template alias .
12638	Render exception .
12639	Format a message .
12640	Get the header for the request
12641	Convert an array to a header string .
12642	Combine a section into an array
12643	Walks down a nested array
12644	Explode a string into an array .
12645	Report an error
12646	error action
12647	Extract route parameters .
12648	Get controller instance .
12649	Generate the buttons
12650	Generate html for options
12651	Evaluate an expression
12652	Get details about a zone
12653	Adds a record .
12654	Retrieve a database table
12655	Retrieve transaction instance .
12656	Loads default metadata .
12657	Set parent id
12658	Get Budget Category
12659	get all category word
12660	Flush the cache
12661	Add a key to the collection .
12662	Remove a key from the collection .
12663	Deletes cache data for given tag
12664	Gets a boolean value .
12665	Creates a new Params instance .
12666	Extract parameters from a collection
12667	Logs console command .
12668	Push a new route group .
12669	Get all class annotations by type .
12670	Set service properties
12671	Get service from annotation
12672	Get service context from annotation
12673	Returns the cache component .
12674	Returns the query builder .
12675	Creates a component
12676	Get class name token .
12677	Generate a token for a class instance .
12678	List packages in a specific category .
12679	Get a list of available states
12680	Compile the command .
12681	Generate command arguments .
12682	Executes the compiled process .
12683	Save the model .
12684	Replace fields in the stream .
12685	Add route .
12686	Add GET route .
12687	Add post route .
12688	Add PUT route .
12689	Add PATCH route .
12690	Add DELETE route .
12691	Add a HEAD route .
12692	Get a route by name .
12693	Generate a route URL .
12694	Find the route matching the request .
12695	Matches a route .
12696	Is internal uri?
12697	Dispatch a request .
12698	Setup the router .
12699	Set dynamic route .
12700	Validate route url .
12701	Match static route .
12702	Match dynamic route .
12703	Get matched static route .
12704	Get matched route .
12705	Route request middleware .
12706	Handle the route response middleware .
12707	Get response from dispatch .
12708	Setup route collection from cache .
12709	Setup routes from annotations .
12710	Renders modal header .
12711	Renders toggle button .
12712	Gets the GettextFile object .
12713	Get a paginated result .
12714	Add filters to query builder .
12715	Filter by search .
12716	Add search filter .
12717	Add order by
12718	Adds the offset to the query .
12719	Adds the limit to the query builder .
12720	Find one entity by id
12721	Adds a join to a query builder .
12722	Get sort column from params
12723	Order by dataTables params .
12724	Checks if value is valid
12725	Replaces special characters in a string
12726	Reverse entities
12727	Get XML declaration .
12728	Returns the declaration of a document .
12729	Convert an array of attributes to a string
12730	Collapse empty tags
12731	Creates a new tag
12732	Creates a start element
12733	Split a qualified name into an array
12734	Check if a string is a valid XML name .
12735	Dispatch callable
12736	Tags response event handler .
12737	Invalidate tag cache .
12738	Validates the entity .
12739	Interpolate context .
12740	Checks if two points are the same space .
12741	Checks if two points are the same .
12742	Returns the intersection of two lines .
12743	Check if two lines are perpendant .
12744	Compare two lines
12745	Guesses the direction of two points .
12746	Get direction by coordinates
12747	Execute all commands .
12748	Prepare async query .
12749	Removes duplicated models .
12750	Executes a single query .
12751	Checks if the given value is valid .
12752	Asserts that the given value is valid .
12753	Performs the actual request .
12754	Build the request URI
12755	Set language
12756	Set the media type .
12757	Set result format
12758	Sets the maximum number of results .
12759	Set entity
12760	Sets the attribute .
12761	Sets the callback
12762	Set the explicit option for the field .
12763	Get the photos for a gallery .
12764	Log a message to the Debug UI
12765	Creates a temporary directory
12766	Read information from TG file .
12767	Extract information from a description file .
12768	Load information from XML file .
12769	Retrieves information from a file .
12770	Get offers with offers
12771	Get all offers with offers
12772	Searches for data
12773	Set log file handler
12774	Set mail handler
12775	Get all log entries
12776	Make a log entry
12777	Shutdown script
12778	Handle request
12779	Dispatches the request
12780	Init bundle
12781	Add boot error
12782	Add a constant path
12783	Add application path .
12784	Get the path of a stack entry
12785	Get the absolute path to a file .
12786	Get user information
12787	Set mode
12788	Loads the default application configuration .
12789	Initializes the base path .
12790	Load a reaction .
12791	Get the asset converter .
12792	Generate a hash for a file
12793	Add multiple replytos
12794	Add a new user
12795	Resumes a session from the database .
12796	Calculates an expression
12797	Get the URL of the user details .
12798	Executes a raw SQL query and returns the result .
12799	Generate meta tags for CSRF validation .
12800	Create a label tag .
12801	Creates a button tag .
12802	Creates a submit button .
12803	Create a submit input .
12804	Create a reset input .
12805	Create a hidden input field .
12806	Create a password input .
12807	Process boolean input options .
12808	Sets the number of hours .
12809	Sets the minutes .
12810	Sets the amount of seconds .
12811	Checks if the time elements are valid .
12812	Writes a file .
12813	Writes a resource to a file .
12814	Update a file .
12815	Updates a stream .
12816	Write to a file .
12817	Writes a resource to a file .
12818	Renames a file or directory .
12819	Copies a file .
12820	Returns the metadata of a file .
12821	Get the mimetype of a file .
12822	Get file size .
12823	Get the timestamp of a file .
12824	Returns the file visibility .
12825	Sets the visibility of a path .
12826	Sets the visibility of a path .
12827	Sets the visibility of a path .
12828	Returns the contents of a directory .
12829	Get local adapter .
12830	Get S3 Adapter
12831	Detect the current language based on the current language .
12832	Deserialize a request .
12833	Checks access for an object
12834	Parse a block
12835	Get path .
12836	Get Authentication object
12837	Get data from url
12838	Parse JSON data
12839	Get all data
12840	Get entity alias
12841	Create query builder instance
12842	Creates a ResultSetMappingBuilder .
12843	Find all identifiers .
12844	Returns the minimum value of a column .
12845	Paginate results .
12846	Checks if the given entity is a valid entity .
12847	Gets the identifier of an entity .
12848	Validates the entity
12849	Convert an entity to an array .
12850	Filter uploaded files .
12851	Get upload size limit
12852	Check if a key exists
12853	Handle the console command .
12854	Terminate the console command .
12855	Show account categories
12856	Execute the controller
12857	Set default time zone
12858	Execute the function
12859	Returns an array representation of the field .
12860	Initializes the instance .
12861	Get children list .
12862	Recursively detect loop .
12863	Invalidates the cache .
12864	Get the last batch number .
12865	Create html response
12866	Create Json response
12867	Creates a template response .
12868	Executes other tasks .
12869	Get the compression adapter
12870	Set the adapter
12871	Set the prefix .
12872	Get a value from the server .
12873	Show Hello
12874	Install tables
12875	Render system errors
12876	Get the serializer instance .
12877	Increment file version
12878	Get the response body .
12879	Parse the body as array
12880	Get the body of the response
12881	Executes a query and returns an array of results
12882	Set default values
12883	Set the body of the message
12884	Returns an array representation of the response
12885	Get unique validation rule
12886	Download a file from S3
12887	Get adapter for ADO connection
12888	Get the ADO connection ID from an AD connection .
12889	Log an error .
12890	Wraps a curl error into an exception
12891	Callback handler for reading body
12892	Send header to cURL
12893	Write the body in the response
12894	Add a command collection .
12895	Print time .
12896	Prints help for class
12897	Print html help
12898	Prints a line .
12899	Upload image file
12900	Cleans the html
12901	Before save callback .
12902	After find callback .
12903	Decodes a JSON attribute .
12904	Creates a new Parser instance .
12905	Sets the current locale
12906	Get localized question
12907	Establish a tunnel connection .
12908	Checks if the request can be keep alive .
12909	Disconnect from the server .
12910	Handles a redirect
12911	Checks if the server should use the server digest challenge .
12912	Check if proxy authentication should be used for proxy authentication
12913	Writes the request body .
12914	Read a chunked response .
12915	Build a select statement from an array
12916	Build a WHERE string from an array
12917	Build join string
12918	Builds the GROUP BY part of the query
12919	Prepare the dependencies for a field
12920	Merge the results of a data function
12921	Cleans a string
12922	Checks for a function call .
12923	Decode YAML .
12924	Start a session .
12925	Prepare and execute a query
12926	Insert data into a table
12927	Update data in a table
12928	Updates a row of data .
12929	Prepares and executes a select statement
12930	Executes a SELECT query and returns all rows .
12931	Returns an array of ids
12932	Executes a SELECT query and returns a single row .
12933	Get a single value from a select query
12934	Prepare a SQL query
12935	Execute a prepared statement
12936	fetches a prepared statement
12937	Get log .
12938	Parse value .
12939	Apply the filter to the given value
12940	Dispatch request .
12941	Terminate route middleware .
12942	Start element handler
12943	Ends the end of an element
12944	Run a command .
12945	Process the webhook .
12946	Modifies the behavior of the UploadableBehavior .
12947	Create a request from a JSON response .
12948	Opens the session .
12949	Read session data
12950	Destroys a session
12951	Writes the session data .
12952	Render a widget
12953	Template variable getter .
12954	Performs before run .
12955	Checks if application is set .
12956	Find a record by field .
12957	Destroy a record
12958	Get all data from the table
12959	Save the record to the database .
12960	Show a list of widgets
12961	Ajax for ajax
12962	verify account
12963	Loads the navigation bar
12964	check month
12965	Setup the installer .
12966	Execute the method .
12967	Get user s name
12968	Save user .
12969	Change the password of a user
12970	Add a concrete implementation to the container .
12971	Get a writer
12972	Parse the version string
12973	Compare two version .
12974	Returns a tree of child nodes .
12975	Returns the parent of this node
12976	Returns an array of parents .
12977	Recursively converts a container into an array .
12978	Apply a callback to all properties
12979	Create a css resource from a css url .
12980	Show the address book .
12981	Show the compose view .
12982	View message .
12983	Save messages .
12984	Append extensions to a list of paths .
12985	Destroys the current session
12986	Add an autoload method
12987	Remove an autoload method
12988	Remove aggregate object by classname
12989	getopt 2
12990	Do a single option
12991	Parse a short option
12992	Parse command line arguments
12993	Converts a directory into a struct
12994	Convert multiple files into struct
12995	Delete a file or directory .
12996	Creates a directory .
12997	Creates a temporary directory .
12998	remove temp files
12999	Find a file
13000	Get log instance .
13001	Set the budget ID
13002	Get Budget
13003	Get all transactions .
13004	Prepare value for use in Zend_Config
13005	Sets the URL of the request .
13006	Set request method
13007	Set authentication information
13008	Add a cookie to the request
13009	Set request body
13010	Returns the request body .
13011	Add a file upload
13012	Attaches an observer .
13013	Detach an observer .
13014	Set the last event
13015	Set the adapter
13016	Set cookie jar
13017	Sends the HTTP response .
13018	Detects the mime type of a file
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new setting entity .
13022	Edits an existing Setting entity .
13023	Adds a WHERE condition
13024	Set response status code
13025	Executes a delete query
13026	Check if event has listeners .
13027	Gets the value of a field .
13028	Format a message .
13029	Create AccessDeniedHttpException .
13030	Set flash message
13031	Commits the transaction
13032	format date string
13033	Formats a time
13034	Format a boolean value
13035	Sets the current time zone .
13036	Get an instance of a class
13037	Checks if a class exists .
13038	Creates an instance of a class
13039	Adds a resolver .
13040	Add an object to the container
13041	Get the connection pool
13042	Sends a query to the queue .
13043	Executes a query .
13044	Creates a new connection .
13045	Get the least busy connection
13046	Install assets .
13047	Returns the ReflectionClass for the given class name .
13048	Get class version
13049	Finds class name by version .
13050	Get class migration methods .
13051	Returns an array of required options for a class .
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new job entity .
13055	Edits an existing Job entity .
13056	Set client file name
13057	Guesses the file extension
13058	Get the mime type of the file
13059	Returns a human readable representation of the file .
13060	return a datetime as a datetime
13061	Get Cime as DateTime
13062	returns the mtime as a datetime
13063	Create a file from a file content
13064	Find all applications
13065	Find application by id .
13066	Create an application .
13067	Delete an application .
13068	Updates an application .
13069	Gets the start date interval after the given date .
13070	Gets the next date interval after the given date .
13071	Builds a DateTimeInterval object .
13072	Returns the day before the given day .
13073	Returns the day after the given day .
13074	Get information about a role
13075	Commits the current transaction .
13076	Rollbacks the current transaction
13077	Sets the transaction isolation level .
13078	Get the database connection .
13079	Set backend
13080	Log a debug message .
13081	Log an info message .
13082	Log a notice .
13083	Log a warning message .
13084	Log an error message .
13085	Log a critical message .
13086	Log an alert message .
13087	Log an emergency message .
13088	Logs a message to the logger .
13089	Returns the value of a property .
13090	Truncate html
13091	Implementation of PEAR_Installer .
13092	Deletes all files from a package
13093	add file operation
13094	Downloads a list of packages .
13095	Set the downloaded packages .
13096	Check if point is valid
13097	Creates a new iterator exception .
13098	Register the service providers .
13099	Add array attributes .
13100	Change classes by method .
13101	Parse CSS classes .
13102	Returns a JSON object for the database connection .
13103	Binds an abstract .
13104	Register an abstract .
13105	Register a new binding for an abstract .
13106	Checks if the given abstract is shared .
13107	Get the closure for the given binding .
13108	Add a dependency for a call parameter .
13109	Get the contextual concrete .
13110	Set request middleware
13111	Add middleware .
13112	Terminate all middleware .
13113	Render the web service
13114	Returns the WSDL
13115	Initialize minify options
13116	Convert to Unix timestamp .
13117	Convert timestamp to array
13118	Convert a date
13119	Get time left difference
13120	Get object properties
13121	Checks that the given function is exactly enough .
13122	Parse parameter values .
13123	Set a scenario parameter .
13124	Trim a string
13125	Prints a message .
13126	Execute all commands
13127	Adds a mock object .
13128	Creates a new object
13129	Updates user profile .
13130	Check if a namespace exists
13131	Get variable from a list of namespaces
13132	Make response .
13133	Render view .
13134	Return json response .
13135	Respond with jsonp .
13136	Create a redirect response .
13137	Redirect to a route .
13138	Validates email address .
13139	Get the difference in years .
13140	Get the difference in weekdays .
13141	Get the difference in seconds .
13142	Get the difference for the given date .
13143	Get commands from classes .
13144	Set command properties
13145	Get console command from annotation
13146	Get storage path .
13147	Finds a model based on its primary key value .
13148	get task parameter
13149	Make an HTTP request .
13150	Send a GET request .
13151	Send a POST request .
13152	Sends a HEAD request .
13153	Send PUT request
13154	Creates a PATCH request .
13155	Send a DELETE request .
13156	Desens a host .
13157	Starts a checkpoint .
13158	Merges data with given data
13159	Reads a file .
13160	Get a package by name
13161	Publish static file
13162	Clear init code
13163	Generate the code for this plugin .
13164	Evaluate PHP code .
13165	Initializes the template paths
13166	Add a template path .
13167	Wrap an object
13168	Returns all schema names .
13169	Returns all table names for the given schema .
13170	Refresh table metadata .
13171	Get table metadata
13172	Get table metadata .
13173	Set table metadata
13174	Get the cache key .
13175	Get an option
13176	Get the temp directory
13177	Initializes auth component .
13178	Create role
13179	Assigns a child role to a parent
13180	Register a function prophecy .
13181	Call a mock
13182	Gets a parameter .
13183	Resolves a parameter value .
13184	Convert a query to meta data
13185	Parse a query
13186	Render panes .
13187	Registers user .
13188	Set a new vector
13189	Opens the mcrypt cipher
13190	Initialize the mcrypt
13191	Connect to the API .
13192	Verify user credentials .
13193	Fetch user data .
13194	Get a new AuthExtension
13195	Add data tokens to object
13196	Get the OAuth protocol for the given credentials .
13197	Determine if the given credentials are valid .
13198	Determine if the given credentials are valid .
13199	Closes the stream .
13200	Attaches a stream .
13201	Returns the contents of the stream .
13202	Sets the stream resource .
13203	Writes data to a file .
13204	Get virtual account
13205	Get previous account
13206	Update a virtual account
13207	Set cache duration
13208	Set the transaction connection .
13209	Returns a single row from the result set
13210	Creates an INSERT statement .
13211	Execute the query .
13212	Log query .
13213	Queries the result of a single field .
13214	Execute the query .
13215	Check if query by pattern
13216	Execute an SQL query .
13217	Invoke action .
13218	Check if a specific layer is supported
13219	Prepare dom elements
13220	Distributed routing
13221	Renders error action
13222	Render debug info
13223	Render a view
13224	Initializes the bot .
13225	Add reponse
13226	Register a shortcode callback .
13227	Remove a short code
13228	Parse a shortcode tag
13229	Parse shortcode attributes
13230	Returns the download URL for a package .
13231	List packages in a specific category .
13232	Sorts the releases by version number
13233	Get array data
13234	get all hours
13235	Parses a HTML page .
13236	Find all accounts by user id
13237	Write application message
13238	Print usage message .
13239	Get usage path .
13240	Writes the arguments section .
13241	Write options section .
13242	Get option name .
13243	Generate a random roll .
13244	Sets the columns of the query .
13245	Adds a having predicate to the query .
13246	Adds a where clause to the query .
13247	Add a join to the query
13248	Add a left join to the query
13249	Add a right join to the query
13250	Get the select query .
13251	Execute the select statement
13252	Prefix table join condition
13253	Gets a value by key .
13254	Set a value by key .
13255	Remove a key
13256	Generate an INSERT query .
13257	Initializes the error stack .
13258	Returns a singleton instance of a singleton class .
13259	Handle error .
13260	Sets the message callback
13261	Sets the default callback
13262	Remove error from stack
13263	Pop a singleton error stack
13264	Returns whether or not the error occurred
13265	Get all errors
13266	Returns true if the error stack has errors
13267	Retrieves a list of error messages
13268	Convert an error into a string .
13269	Registers a configuration .
13270	Registers a provider .
13271	Registers a list of classes .
13272	Get autowired parameters .
13273	Set target directory
13274	Set the filter mode
13275	Get all routes for given classes .
13276	Set route properties
13277	Get class routes .
13278	Get a route from a controller route .
13279	Get route from annotation
13280	Publishes route annotations .
13281	Format the response .
13282	Format a jsonp response .
13283	Get host port .
13284	Get scheme host port
13285	Returns a new instance with the specified host .
13286	Returns a new instance with the specified port .
13287	Returns a new instance with the specified path .
13288	Returns a new instance with the specified query string .
13289	Returns a new instance with the specified fragment .
13290	Checks if the port is standard .
13291	Validates the scheme .
13292	Validates the port .
13293	Validates a package .
13294	Validates a single dependency
13295	Normalize a single dependency
13296	adds or removes the suffix of a word
13297	Tokenize a string
13298	Join array of keys and values
13299	Check if a table exists
13300	Map class name to table name
13301	Get a table from a class name
13302	Process version tag .
13303	Perform a discovery command .
13304	Perform a login .
13305	Perform a logout command .
13306	Convert a string to a separator
13307	Returns an array of migration files .
13308	Get a map of all application migrations .
13309	Publish method .
13310	Send request
13311	Check url
13312	Transforms a directory identifier into a directory entity .
13313	Creates an application builder .
13314	Creates an app builder from persisted data .
13315	Get application builder dependencies .
13316	Reset a file .
13317	Creates a new branch .
13318	Deletes a branch .
13319	Push a branch to the project .
13320	Create a pull request .
13321	Clone project .
13322	Called when a command is called
13323	run a command
13324	Connect to OAuth
13325	Add a file to the filter
13326	Get new file name
13327	Returns the filename for a given file
13328	get service by id
13329	Generate a service .
13330	Set a service
13331	Set an alias .
13332	Get a single parameter
13333	Set a parameter .
13334	Get service definition
13335	Sets a service definition .
13336	Initializes the task .
13337	Set user event from event .
13338	Convert model to array
13339	Check if the string is serialized .
13340	Check the callback against the given calls .
13341	Add route .
13342	Initializes the routes .
13343	Create controller instance
13344	Register a controller
13345	Register controller with annotations
13346	Register controller without annotations
13347	Get default controller and action
13348	Register an observer .
13349	Unregisters an observer .
13350	Auto set channel .
13351	Execute a command .
13352	Adds a flash message .
13353	Redirect to referer
13354	Configures the shared cache .
13355	Initializes the bot .
13356	Finalize middleware .
13357	Returns the configuration directory .
13358	Throws an exception if there are no arguments .
13359	Get connection instance
13360	Configure stfalcon tinymce bundle .
13361	Set user capabilities
13362	Create instance from environment .
13363	Create a new Locator from a path .
13364	Returns a list of available constants .
13365	Checks if the given constant is valid .
13366	Checks if a function is valid
13367	Check value against type
13368	Get adapter for pdo
13369	Create controller path
13370	Create cache path
13371	Update the WSDL .
13372	Compiles the service
13373	Returns the documentation of the controller
13374	Get all Soap controllers
13375	Builds the styles .
13376	Build Bootstrap CSS .
13377	Retrieve a single parameter
13378	Creates a new instance of the current URI .
13379	Adds a route .
13380	Returns a route for a static route .
13381	Check if static route exists .
13382	Add dynamic route .
13383	Check if dynamic route exists .
13384	Get named route .
13385	Create sub leaf nodes
13386	Locate a file
13387	Convert this number to another .
13388	Checks if two numbers are equal .
13389	Returns the decimal value of the digit .
13390	Adds another number to the current number
13391	Subtracts the given number from this number
13392	Multiplies this number by multiplicator
13393	Divide number by multiplicator
13394	Creates a database adapter
13395	Get alias list .
13396	Find aliases by query
13397	Replaces migration files .
13398	Reads a single line from the socket .
13399	Enables secure connection
13400	Check if the request has timed out
13401	Add route .
13402	Set items .
13403	Build an HTML string for a given siteKey .
13404	Prepare the name attribute .
13405	Check data attribute .
13406	Add a resource to the queue .
13407	Creates a day from an array of hours .
13408	Creates a day from an array .
13409	Checks if the interval is all day of the interval .
13410	Create a Request from an array .
13411	Set server info
13412	Set HTTP headers .
13413	Set POST fields
13414	Set query fields
13415	Get the header of the message
13416	Convert to array
13417	Add a command .
13418	Adds a parsed command .
13419	Get command by name .
13420	Removes a command .
13421	Find a command by path .
13422	Get all registered commands .
13423	Setup console .
13424	Setup console from cache .
13425	Returns an array of cached commands .
13426	Sets the separator
13427	Register event listener .
13428	Listen to multiple events .
13429	Checks if an event has a listener .
13430	Removes a listener from an event .
13431	Check if event has listeners .
13432	Add an event .
13433	Remove an event .
13434	Trigger an event .
13435	Setup events .
13436	Setup events from cache .
13437	Initializes the template
13438	Check if template exists
13439	Fetch template
13440	Loads data from a file .
13441	Save the data to the database .
13442	Initialize the reader .
13443	Initialize the writer .
13444	Get default options .
13445	Encrypt data .
13446	Decrypt data .
13447	Generate session key
13448	Throw an exception to stdout .
13449	Render an exception .
13450	Get the view file for the exception .
13451	Get response .
13452	Get exception data .
13453	Get stdio logger
13454	Read session data .
13455	Writes session data to the cache .
13456	Destroys a session .
13457	Updates the timestamp of the given id .
13458	Extract data from session record .
13459	Extract the timestamp from a record .
13460	Retrieves session data from the cache .
13461	Get message with variables
13462	Generate SQL statement for creating a constraint .
13463	Add auto increment
13464	Compiles a key .
13465	Adds foreign constraint .
13466	Get the SQL statement for a column .
13467	Run the plugin .
13468	Creates a new iterator exception .
13469	Render toggle button .
13470	Get response template
13471	Get module name
13472	Load class reflection .
13473	Loads the reflection for the given object .
13474	Load a property reflection .
13475	Get called method .
13476	Get class properties .
13477	Set property value
13478	Set multiple properties in an object .
13479	Load class annotations .
13480	Clears class reflections
13481	Checks if a class is instantiable .
13482	Get method reflection .
13483	Gets the reflection of an object or object
13484	Check method arguments
13485	Get reflection from cache .
13486	Add reflection to the cache .
13487	Get the cache key for a given type
13488	Get the class name of an object .
13489	Parse the doc comment summary
13490	Get class doc comment
13491	Get method doc comment
13492	Init by config
13493	Returns the namespace for the given class name .
13494	Remove indent from a string
13495	Post - process data
13496	Extracts photo array from source object
13497	Get all images for a photo
13498	Extracts the images from the given source .
13499	Find the placeholder start position .
13500	Build route path
13501	Search in router
13502	Replace placeholders in path .
13503	Initializes the widget .
13504	Preload messages .
13505	Find categories by pattern .
13506	Magic isset method .
13507	Send exception response .
13508	Get the content of the exception .
13509	Format path .
13510	Format a list of args .
13511	Escape html .
13512	Create a new validator .
13513	Transforms a string into an array of Input objects .
13514	Handle a connection disconnect .
13515	Attach a timer for a connection .
13516	Send a CTCP callback .
13517	Reaper callback .
13518	Get proxy command handler
13519	Show application config
13520	Loads bundles .
13521	Loads the messages .
13522	Set HTTP Headers
13523	Set environment variables
13524	Make a POST request
13525	Make a JSON RPC call
13526	Connect to database
13527	Escape a string
13528	Initialize the transformer
13529	Has slug field
13530	Get special fields
13531	Get all fields by type
13532	Convert to a date .
13533	Retrieve the language from the Accept - Language header .
13534	Gets the charset used by the client .
13535	Retrieve a MIME type from a list of acceptable types .
13536	Match accept header .
13537	Sort accept header
13538	Send HEAD request
13539	Convert charset .
13540	Get entity manager
13541	Get object structure
13542	get auto object
13543	get table structure
13544	get model from table
13545	Build the objects structure
13546	Prepare error .
13547	Check the budget .
13548	Check for a budget .
13549	Find by budget .
13550	Set field idParent
13551	Set field value
13552	Get account user
13553	Get the bank
13554	Parse a CSV file
13555	Get type icon
13556	Build a query
13557	Escape a single value
13558	Creates a redirect response .
13559	Set the redirect uri .
13560	Redirect to referer
13561	Throw exception .
13562	Filters a list of commands .
13563	Sorts commands by name .
13564	Output a command section .
13565	Initializes the session
13566	Start the timer .
13567	Get current timer .
13568	Display a timer
13569	Initialize provider by id
13570	Initializes the application .
13571	Initializes basic application .
13572	Locates the configs folder .
13573	Locates the class loader .
13574	Creates a new object or returns it .
13575	Get config reader
13576	Initialize the DI container
13577	Initialize static application
13578	Check if the given request matches the current token .
13579	Get the CSRF token from the request .
13580	Initializes the bot .
13581	Get the weather for a location
13582	Get the precipitation for a location
13583	Get the latitude and longitude for a given location .
13584	Add error message .
13585	Get English intensity .
13586	Get class annotations .
13587	Get annotations for a class .
13588	Get class and member annotations .
13589	Get property annotations .
13590	Get property annotations
13591	Returns an array of class annotations .
13592	Retrieve method annotations .
13593	Get method annotations
13594	Get methods annotations .
13595	Get function annotations .
13596	Filter annotations by type .
13597	Set annotation values .
13598	Get class reflection .
13599	Get property reflection .
13600	Get method reflection .
13601	Get function reflection .
13602	Returns an array of class names .
13603	Return the length of the polygon .
13604	Returns the center of this Point .
13605	Runs the widget .
13606	Renders a model field .
13607	Check if a key exists .
13608	Get display directory name
13609	Recursively finds all entries in the directory
13610	add a header
13611	Returns a list of headers .
13612	Creates a database .
13613	Returns an array of database tables
13614	Updates the database from the given structure
13615	Update table relations
13616	Update many table
13617	Generate the SQL for creating a table .
13618	Generate the SQL for a single column .
13619	Generate index SQL
13620	Generate constraint SQL
13621	Get key values by key type
13622	Returns a list of key values by type .
13623	Get annotations for a class .
13624	Get annotation from class .
13625	Get annotations for a property .
13626	Returns the annotation for a property .
13627	Get annotations for a method .
13628	Gets a method annotation .
13629	Get annotation reader
13630	Get method reflection .
13631	Retrieve a value from the cache .
13632	Sets a value to the cache .
13633	Get all paths from a key
13634	Process key .
13635	Check the event class name .
13636	Build the event .
13637	Get the average value of an array .
13638	Set the order by .
13639	Read parameters .
13640	Get a value from an object .
13641	Sets the value of an object property .
13642	Filters an array of objects .
13643	Set From Address .
13644	Adds an address to the mailer .
13645	Adds a reply - to address .
13646	Adds a CC address .
13647	Adds a BCC address .
13648	Adds an attachment to the mailer .
13649	Run the application .
13650	Set the referer
13651	Get the referer
13652	Build url from params
13653	Download the package
13654	Extract the package .
13655	Resets default locale translations .
13656	UTF - 8 aware alternative to strpos
13657	Create the sidebar menu .
13658	Add example menu
13659	Register the repository services .
13660	Publish pages .
13661	Execute the update query
13662	Loads the messages for a specific context
13663	Get all categories
13664	Get the file name from the response .
13665	Validate uploaded files .
13666	Initializes the result object .
13667	Get pattern .
13668	Sets the result attributes .
13669	Detect data by key
13670	Check if current environment is on shell .
13671	Get the config
13672	Returns the latitude of the LatLng object .
13673	Return the longitude of this Point as a DMS .
13674	Get the latitude range of the LatLng .
13675	Calculates the longitude range for the given distance .
13676	Sends the distance to the given location .
13677	Check if the given data matches the given data .
13678	Creates tables from config .
13679	Bundle multiple tables .
13680	Get a point
13681	Publish command .
13682	Checks if the current request matches the current URL .
13683	Generate a response for a given request .
13684	Retrieve data from cache .
13685	Check if string ends with another string .
13686	Counts the number of words in a given string .
13687	Create the user acting as a user .
13688	Initializes the session .
13689	Opens the session .
13690	Opens session .
13691	Registers the session handler
13692	Closes the session
13693	Destroy the session .
13694	Regenerates the session ID
13695	Read session data
13696	Write session data
13697	Destroys the session
13698	Set the value of a key .
13699	Remove a key
13700	Remove all session data
13701	Retrieve a flash variable from the flash bag .
13702	Get all flash messages
13703	Set a flash variable .
13704	Add a flash message .
13705	Remove a flash variable from the session .
13706	Remove all flash messages
13707	Freezes the session
13708	Unfreeze the session
13709	Create a new session cookie
13710	Determine if the given value is after the given date .
13711	Validates the date time after a given format .
13712	Validates a date format .
13713	Check the prophecy .
13714	Assign a value to an array .
13715	Get controller plugin config
13716	Execute a single rule .
13717	Process multiple dependencies
13718	Parses raw data into an array of fragments .
13719	Make view instance .
13720	Set view variables .
13721	Set view variable .
13722	Escape a string .
13723	Get template directory
13724	Set the layout .
13725	Set template .
13726	Render partial .
13727	End block .
13728	Renders the view .
13729	Get full path to template
13730	Render template .
13731	Renders a layout .
13732	Sets a route .
13733	Get separator line .
13734	Write a header message .
13735	Get all AbuseIONotifications
13736	Creates a notification by name
13737	Set key .
13738	Check if file should be renamed .
13739	Guesses the file extension
13740	Guess the filename of the file .
13741	Set rename .
13742	Downloads a file .
13743	Uploads a tinymce .
13744	Redirects the exception .
13745	Get cURL response
13746	Execute the request
13747	Set the path to the file of the cookie jar .
13748	Choose list of parameters
13749	Updates existing Item models .
13750	Initialize options .
13751	Write the configuration to a file
13752	Get exception from context array
13753	Convert exception to array .
13754	Render a view file
13755	Check if file is a core file
13756	Get exception name
13757	minify CSS links
13758	Generate minify URLs
13759	Set the amount default value
13760	Set field value
13761	Set field value
13762	Set is_Recurrent value
13763	Set the monthmask value
13764	get all BudgetCategory
13765	get all Budget Month
13766	Execute a SQL statement .
13767	Handle error .
13768	Load a path from a path .
13769	Updates the database connection .
13770	Drops all migrations .
13771	Inserts data into a table .
13772	Adds multiple rows to a table .
13773	Executes an UPDATE query .
13774	Deletes data from a table .
13775	Renames a table .
13776	Drops a table .
13777	Truncates a table .
13778	Drops a column from a table .
13779	Renames a column in a table .
13780	Alters a column .
13781	Adds a new primary key to a table .
13782	Drops a primary key .
13783	Adds a foreign key to a table .
13784	Drops a foreign key from a table .
13785	Creates an index on a table .
13786	Drops an index .
13787	Adds a comment on a column .
13788	Adds a comment to a table .
13789	Drops a comment from a table .
13790	Drops a comment from a table .
13791	Execute a promise .
13792	Logs a message .
13793	Validates regex .
13794	Capture the matched text .
13795	Splits the string using the regular expression
13796	Replace text with another text
13797	Renders the form configuration .
13798	Get the URL of the seurimage .
13799	Get a model by ID
13800	Get or create a model by id .
13801	Get list of models
13802	Save a model
13803	Deletes a record .
13804	Get objects by ids
13805	Get where ids with keys .
13806	Sets a raw cookie
13807	Connect to SOCKS3 server
13808	Save model to database .
13809	Set the record s data
13810	Convert object to array
13811	Get field value
13812	Set the value of the given field
13813	Get the predicate for the record primary key
13814	Parse a path .
13815	Validate path .
13816	Split segments by delimiter
13817	Parse path .
13818	Get route replacement .
13819	Cache helper .
13820	Flush the cache
13821	Process raw response data
13822	Invoke method .
13823	Get file content type
13824	Regenerates a session .
13825	Creates a new session id .
13826	Creates the garbage collector .
13827	Set the content .
13828	Set buttons .
13829	Add button .
13830	Validates type .
13831	Validates a modal size .
13832	Register the console commands .
13833	Parses a Tar File .
13834	Adds a string to the archive
13835	Check if a filename is malformed
13836	Parse a user event .
13837	Runs the migration from another object .
13838	Returns the unique keys of a table .
13839	Returns the primary key of a table .
13840	Returns the primary keys of a table .
13841	Get the priority .
13842	Get the validator .
13843	Load mime types
13844	Load mime aliases file
13845	Deletes a file or directory .
13846	Returns the permissions as a string .
13847	Convert permissions to octal string
13848	Add an inner join
13849	convert to sql string
13850	Execute the query
13851	Creates a SQL statement for creating a database table .
13852	Load all modules .
13853	Get the container .
13854	Initializes the chat .
13855	Set select statement type
13856	Sets the table name .
13857	Set the value of a column .
13858	Set where statement
13859	Adds a where clause to the query .
13860	Sets the order by ASC .
13861	Sets the ordering of the query .
13862	Get the current query
13863	Set where .
13864	Sets the order by .
13865	Get the select query .
13866	Get insert query
13867	Get update query
13868	Get the delete query .
13869	Get SET query .
13870	Get where query
13871	Get the ORDER BY query .
13872	Walks down an expression
13873	Displays a form to register
13874	Displays a form to edit a user .
13875	Returns the version of the SDK
13876	create route instance
13877	Handle request .
13878	Resolve action
13879	Get home url
13880	Set component definition
13881	restore uilisateur
13882	Get a user by id
13883	Returns all active users
13884	Saves messages to a file .
13885	Find a value in a list .
13886	Find all models with the given relations .
13887	Returns the next row .
13888	Reads a single column
13889	Read the next row as object
13890	Returns all results as an array
13891	Returns the number of columns in the result set .
13892	Finds the constraints for a given table .
13893	Get server version
13894	Publish the routes .
13895	Parse routes data
13896	Builds the expressions for the given path .
13897	Register a service alias
13898	Register a service .
13899	Bind a service in the context
13900	Get service from context
13901	Check if service exists
13902	Check if service has context
13903	Retrieve a service
13904	Make a service .
13905	Get singleton service
13906	Retrieve a service
13907	Generate context index .
13908	Setup services .
13909	Setup services from cache .
13910	Setup service providers .
13911	Get cacheable services .
13912	Get address lines
13913	Set the filter level
13914	Get the unique identifier of the model
13915	Register route in router
13916	Resolve action .
13917	Performs before action .
13918	Emits after action .
13919	Render partial .
13920	Renders ajax view .
13921	Get action methods
13922	Render a view in the layout .
13923	Render view .
13924	Normalize action method name
13925	Resolve error as html .
13926	Resolve error as array
13927	Get error data .
13928	Get exception name
13929	Validate action .
13930	Get action id from action method
13931	Get action method
13932	Convert color array to hex
13933	Converts RGB to RGB
13934	Image dominant color
13935	Retrieve stdin .
13936	Displays a prompt .
13937	Appends a file to an array of paths .
13938	Get Pg client
13939	Execute a query and return a promise .
13940	Writes the stream to the specified path .
13941	Creates a new server request from globals .
13942	Get a header from an array .
13943	Strip the query string from the path .
13944	Parse host and port from header .
13945	Normalize nested file spec .
13946	Check if string ends with another string
13947	Generate a random string
13948	Creates edges for given class
13949	Find annotations for a class
13950	Create a new record .
13951	Fetch all entities
13952	Update a record .
13953	Sets the HTTP status code .
13954	Sets the response headers .
13955	Returns the date header of the request .
13956	Sets the Date header .
13957	Add a cache control
13958	Get a cache control header
13959	Remove a cache control .
13960	Check if the response is cacheable .
13961	Returns the age of the response .
13962	Set the age of the response .
13963	Returns the Expires DateTime .
13964	Returns the maximum age of the response .
13965	Sets the shared max age of the response .
13966	Set the age of the response .
13967	Set Not Modified status
13968	Is valid .
13969	Checks if the response is informational .
13970	Check if the response is successful .
13971	Is redirection?
13972	Is client error?
13973	Check if the response is a redirect .
13974	Returns whether the response is empty .
13975	Closes output buffers .
13976	Initializes the request .
13977	Validates request method .
13978	Locate a command .
13979	Locate all paths for a given command .
13980	Download package .
13981	Remove installed packages
13982	Detect duplicate params
13983	Load a package from a file .
13984	Returns an array of parameters .
13985	Enables exceptions .
13986	Get difference between transactions and transactions .
13987	Adds the month to the monthmask .
13988	Returns true if the date has the given month .
13989	Get the length of the upload .
13990	Returns the request boundary
13991	Loads a user by username .
13992	Create user
13993	Set IP address .
13994	Renders view .
13995	Publishes the given stream .
13996	Materialize resource .
13997	Set query params .
13998	Retrieve message from cache
13999	Encrypts a message
14000	Decrypts a message
14001	Decrypt a JSON string .
14002	Encrypt object .
14003	Decrypt a JSON string .
14004	Get option value
14005	Initializes the object .
14006	Replace magic fields in html
14007	Convert Query object to QueryBuilder
14008	Convert rich text to text .
14009	Convert rich text to html
14010	Serialize a block .
14011	Returns a new instance with the given cookie .
14012	Sends the response .
14013	Validates the given status code .
