0	Get administrator role .
1	Get the user
2	Handle a bread deleted event .
3	Get categories translations
4	Get highest order item .
5	Create a unique name for the given columns and columns .
6	Handle bread added .
7	Updates a table .
8	Updates the table .
9	Returns diff between renamed columns
10	Returns a diff with the renamed columns .
11	Returns the names of the columns that are renamed .
12	Returns the name of the renamed indexes .
13	Returns a thumbnail .
14	Get thumbnail name
15	Determine if the user can edit the roles .
16	Return a list of Widget objects
17	Prepare menu translations
18	Save modified attributes .
19	Check if the given user is read .
20	Create a new breadcrumb .
21	Store a new bread .
22	Edit a table .
23	Update a bread type .
24	Destroy a given DataType .
25	Add a new relationship
26	Get the relationship field .
27	Handle the input .
28	Store new database
29	Edit database .
30	Update the database
31	Describes a database table .
32	Destroy a table
33	Returns URL to sort by field .
34	Display menu
35	Check if the model is translatable .
36	Many translations .
37	Returns translated attribute .
38	Returns a query scope for a given field and value .
39	Save translations .
40	Describe a database table .
41	Handle bread added .
42	Add missing storage symlink .
43	Register console commands
44	Removes the data from the given data .
45	Delete all thumbnails
46	Order items .
47	List relationships .
48	Resolve relations .
49	Add the soft deletes .
50	Validate breadcrumb
51	Filter fields with validation rules
52	Verify an ID token
53	Retrieve verification certificates from URL .
54	Get the certificate s signed - on certificate .
55	Set PHPsec constants
56	Fetches an access token by code
57	Fetches an access token with a signed JWT token .
58	Fetches an access token using a refresh token .
59	Authorizes the application .
60	Check if the access token is expired .
61	Verify an access token
62	Add a scope
63	Execute a REST request .
64	Set the auth config file
65	Create OAuth2 service
66	Returns the number of allowed retries .
67	Moves the stream to the next chunk .
68	Parse http response
69	Get data type
70	Combines a list of variables
71	Get the encoded value .
72	Executes an HTTP request .
73	Decodes a HTTP response .
74	Convert the given array to the correct type
75	Convert model data to simple object
76	Converts a Google_Model into a simple value
77	Returns the mapped name .
78	Check if the given array is an associative array .
79	Builds the AuthHandler
80	Find config file
81	Define core constants
82	Set emulate preparation mode
83	Handle a dead or error
84	Returns a list of executed queries .
85	Register globals
86	Get all options
87	Adds an option
88	Deletes an option
89	Add placeholder .
90	Set default namespace .
91	Set the default controller .
92	Set the default method .
93	Discover routes .
94	Set the default placeholder .
95	Get all defined routes .
96	Get route options .
97	Add multiple routes .
98	Add a redirect route
99	Check if a given route is a redirect .
100	Get redirect code .
101	Add a route to the route collection .
102	Create a new route instance .
103	Set route environment .
104	Reverse a route
105	Determine the current subdomain
106	Reset routes .
107	Error handler .
108	Shutdown handler .
109	Determine the view for the given exception .
110	Renders the view .
111	Collects exception vars .
112	Determines the status code for the given exception .
113	Returns a human readable representation of the given number of bytes .
114	Highlight a file .
115	Checks if value is alphanumeric
116	Perform a regular expression match .
117	Is email valid?
118	Validate email addresses
119	Check if a string is a valid URL .
120	Validate a date
121	Create a new instance for the move failed .
122	Check credit card number
123	Validates the given number .
124	Moves a file .
125	Move escaper classes to PHP classes
126	Move Kint file
127	Starts the session .
128	Configure the sid length
129	Initialize variables .
130	Sets a session variable
131	Get session data
132	Push data to a key .
133	Remove session data
134	Set flashdata .
135	Get flashdata
136	Mark a session as flashdata
137	Get flash keys
138	Stores a value in the cache .
139	Get tempdata
140	Mark a key as tempdata
141	Unmark tempdata .
142	Get temp keys
143	Sets the session cookie .
144	Check if the given key is valid .
145	Tries to guess the type from a file extension .
146	Tries to guess the extension from a file type .
147	Redirects to another URL .
148	Redirect to another route
149	Redirect back to previous URL
150	Flash a message to the session .
151	Runs the filter .
152	Initializes the router .
153	Enable a filter .
154	Get command arguments
155	Format an object
156	Sends the log to the response .
157	Detects the current locale .
158	Sets the current locale .
159	Check if the request is secure
160	Parse the response body
161	Fetches a get command
162	Gets all posts from the index .
163	Returns POST data
164	Returns GET data
165	Get cookies .
166	Get files .
167	Get file by ID .
168	Detect and set the base URL
169	Detect the path of the request .
170	Negotiator .
171	Parse the request URI
172	Build DSN .
173	Get Formatter for given mime type .
174	Runs before the request .
175	Runs after event
176	Resize image .
177	Crop the image
178	Gets the image version .
179	Get resource path
180	Add foreign key .
181	Drop a foreign key constraint
182	Handle UNSIGNED
183	Helper function for setting default value
184	Process primary keys .
185	Process foreign keys
186	Set locale .
187	Returns translated line .
188	Format message .
189	Require a file
190	Adds the base URI
191	Adds an image src option
192	Adds a media src option
193	Adds a manifest src
194	Adds an object src option
195	Adds a plugin type .
196	Adds sandbox option .
197	Adds a script src
198	Adds style src option
199	Adds an option to a target .
200	Generates nonce elements
201	Builds the headers
202	Get title .
203	Collect log data
204	Prepares parameters .
205	Determine the cell class and method .
206	Get result .
207	Get a custom result object
208	Get the result array as an associative array .
209	Get the result object as an array
210	Get a specific row
211	Get custom row object
212	Returns the current row as an array .
213	Returns the current row object .
214	Set a single row
215	Get first row
216	Get last row
217	Returns the next row
218	Returns the next row as an array
219	Matches a list of acceptable values .
220	Match parameters .
221	Runs the application .
222	Shows the header
223	Display page links .
224	Create links .
225	Store a group .
226	Set URI path .
227	Get the page count .
228	Get the current page .
229	Returns whether or not a group has more pages .
230	Get the last page .
231	Returns the page URI .
232	Returns the URI of the next page .
233	Returns the URI of the previous page .
234	Get the per page .
235	Get pagination details .
236	Ensure that a group exists
237	Returns the number of years in the current time .
238	Returns the number of months in the current time .
239	Returns the number of weeks in the current time .
240	Returns the number of days in the current year .
241	Returns the number of hours in the current date .
242	Returns the number of minutes in the current time .
243	Returns the difference between current time .
244	Humanize time .
245	Connects to the database .
246	Load forge class
247	Check if a property has changed .
248	Maps a property name to a property .
249	Mutate date value .
250	Cast value as JSON .
251	Determines if an extension is discovered .
252	Find all records
253	Returns the first row
254	Save data to database
255	Convert object to array
256	Inserts a record into the database
257	Insert multiple rows .
258	Retrieve the model builder instance .
259	Protects the given data
260	Clean validation rules
261	Get validation rules .
262	Count all records .
263	Set authentication .
264	Set the form parameters .
265	Parse options .
266	Get method .
267	Send a request to the given URL .
268	Apply request headers
269	Set response headers
270	Sends the request .
271	Updates the given version to the specified target version .
272	Find migrations .
273	Check migrations .
274	Returns the migration history .
275	Get migration name .
276	Returns the current version of the group .
277	Add migration history .
278	Remove migration history .
279	Ensure table exists .
280	Check a value against a rule .
281	Set request data
282	Set validation rule .
283	Get a rule group .
284	Sets the rules group .
285	Loads the rule sets .
286	Set validation error .
287	Get error message
288	Splits a string into rules
289	Reset the validation .
290	Convert array to XML
291	Clean file names .
292	Sets the URI .
293	Get user info
294	Get query string
295	Returns a URI segment .
296	Sets a URI segment .
297	Creates a URI string .
298	Set the authority
299	Sets the scheme
300	Sets the port .
301	Set path .
302	Refreshes the path .
303	Sets the query string .
304	Decode the given value
305	Add a query parameter
306	keep query params
307	Filters the path
308	Apply URI parts
309	Resolves a relative URI
310	Merges two URIs .
311	Remove dot segments .
312	Append a value to the value .
313	Prepends a value to the current value .
314	Returns the previous page .
315	Returns the next page .
316	Returns the first page .
317	Returns the last page .
318	Returns the current URI .
319	Starts a timer .
320	Stops a timer .
321	Get elapsed time .
322	Get all timers .
323	Add a table alias
324	Executes a SQL query .
325	Performs a simple SQL query .
326	Sets the connection to the database .
327	Prepare a query for execution .
328	Recursively escape identifiers .
329	Call function .
330	List all tables in the database
331	Check if the given table exists .
332	Check if field exists in table
333	Get all the fields of a table
334	Get the index data for a table .
335	Get the foreign key data for a table .
336	Get the value of an environment property .
337	Registers all configured registrars .
338	Get an item from the cache .
339	Write data to file
340	Get file info
341	Get file info
342	Initializes the application .
343	Runs the application .
344	Handles the request .
345	Starts the benchmark .
346	Get response object
347	Force HTTPS .
348	Displays the page cache
349	Cache page .
350	Generate cache name
351	Displays the benchmark results .
352	Attempts to route the given routes .
353	Start the controller .
354	Creates the controller
355	Runs a controller .
356	Gathers the output .
357	Stores the previous URL
358	Parses the request method .
359	Returns a handler for the given configuration .
360	Create alias from table name .
361	Appends a where not in condition
362	Prepare where in
363	Create a LIKE statement
364	Begins a WHERE condition
365	Called when a group is ended .
366	Sets the offset for the query
367	Set a key - value pair
368	Get the compiled select .
369	Compile the final query
370	returns number of rows
371	Get count of all results
372	Creates an INSERT statement
373	Compiles an insert query
374	Returns the compiled update query
375	Returns the compiled delete query
376	Decrement column value
377	Compiles a SELECT query
378	Compile where having clause
379	Compile GROUP BY
380	Compiles ORDER BY .
381	Get SQL operator
382	Renders the timeline .
383	Collect timeline data .
384	Collect var data .
385	Round the given number .
386	Copies the image .
387	Get image properties
388	Releases the session lock .
389	Attach a honeypot field to the response .
390	Prepare template .
391	Fetches the first row from the result set
392	Make table columns
393	Clears all rows .
394	Set fields from the result set
395	Set data from array
396	Set path to html file
397	Get the upload error string .
398	Store uploaded file .
399	Check file size
400	Check if file is an image
401	Check file mime type
402	Check max dimensions
403	Fetch a global variable .
404	Populates global variables .
405	Run a migration
406	Populate this object from a database table
407	Creates the migration .
408	Modify a column .
409	Create table .
410	Copy data from temp table to temp table
411	Format fields .
412	Format keys .
413	Drop all indexes .
414	Sets the CSRF cookie
415	Generate CSRF hash .
416	Returns the current time object .
417	Parses a time string .
418	Returns a new Time object .
419	Returns a new Time object .
420	Returns a new Time object .
421	Create instance from date .
422	Create a new instance from time .
423	Creates a new Time instance .
424	Create a new Time object from a given format .
425	Creates a Time from a timestamp .
426	Creates a new Time instance .
427	Returns a DateTime object as a DateTime object .
428	Returns the age of the node
429	Returns true if the timezone is daylight saving .
430	Set the month .
431	Set the day .
432	Set the minute value .
433	Set the second .
434	Set a time value .
435	Set timestamp .
436	Check if current time is equal to another .
437	Tells whether two time are equal .
438	Get DateTime object
439	Encode javascript matcher
440	Callback for CSS matcher
441	Convert string to UTF - 8 .
442	Convert string to UTF - 8 .
443	Get uploaded file .
444	Create an UploadedFile object from an array .
445	Get dot notation syntax
446	Sets the binary .
447	Sets the file path .
448	Returns the file s content length .
449	Sets the content type based on the mime type .
450	Get download file name
451	Get the content disposition .
452	Builds the HTTP headers .
453	Sends the body of the download .
454	Sends the body by file path
455	Removes an array of parameters .
456	Run a command
457	Create command list
458	Get a database connection .
459	Create a seeder instance .
460	Is all namespace .
461	Add a test .
462	Runs all tests .
463	Returns a formatted report .
464	Set SQL query .
465	Returns the final query string .
466	Get start time
467	Get duration as string
468	Sets the error
469	Swaps the prefix .
470	Compile the bindings .
471	Load the helpers .
472	Register SPL autoloader
473	Add a namespace
474	Get namespace .
475	Require a file .
476	Sanitizes a filename .
477	Discover Composer namespaces .
478	Modify date by adjustment
479	Creates an excerpt .
480	Sanitizes a value .
481	Resolves nested variables .
482	Sets the current database .
483	Execute a SQL query .
484	Prepare query .
485	Returns the error message .
486	Execute SQL query .
487	Get field names for a table
488	Get cache handler
489	Get CLI request instance
490	Returns a CURLRequest instance .
491	Get honeypot instance
492	Get language instance
493	Get logger instance
494	Get a negotiator instance .
495	Get a ViewParser instance .
496	Get an incoming request instance .
497	Get Response instance
498	Get a redirect response
499	Get router instance
500	Returns a security instance .
501	Get a URI instance
502	Get validation instance
503	Describe a list of commands .
504	Pad a title .
505	Converts a query result into a CSV string .
506	Converts a query result into an XML string .
507	Call a command .
508	Start seeder .
509	Check if value is in given list
510	Is string less than or equal to given max
511	Required .
512	Check if a field is required .
513	Validate request path
514	Set directory .
515	Sets the current request .
516	Sets the default controller
517	Get file size
518	Moves file to new location .
519	Get the destination path .
520	Collect query .
521	Format the timeline data .
522	Locates a file .
523	Get class name from file
524	Searches for files with given extension .
525	Ensure the given extension is valid .
526	Tries to find the fully qualified name of a namespace .
527	Try to locate a file .
528	Render a view .
529	Remove excerpt from string .
530	Set view data .
531	Sets a variable .
532	Render a section .
533	Include view
534	Logs performance data .
535	Reset image .
536	Ensures that the image has been created .
537	Resizes the image .
538	Rotates the image .
539	Flips the image .
540	Shortcut for text
541	Re - orient the image
542	Get EXIF data
543	Resizes the image .
544	Run CodeIgniter .
545	Render template .
546	Parse a pair of data
547	Extracts nooparse blocks .
548	Inserts noparse blocks into template
549	Parse the conditionals .
550	Sets the left delimiters .
551	Replace regular expression .
552	Determines if a key should be added to the data context .
553	Add a plugin .
554	Create an image resource .
555	Get a specific header .
556	Check if header exists
557	Set a header .
558	Remove a header .
559	Set the HTTP protocol version .
560	Get header name
561	Configure session ID regex
562	Get the reason .
563	Set Link header
564	Sets the Content - Type header .
565	Get response body .
566	Get the body as XML .
567	Format response body .
568	Sets the cache header .
569	Send the response .
570	Send the headers .
571	Sets a cookie .
572	Check if a cookie exists .
573	Get a cookie by name .
574	Deletes a cookie .
575	Send the cookies .
576	Create download response
577	Get instance of class
578	Create a configuration class
579	Returns a shared instance .
580	Get the autoloader instance .
581	Get the file locator .
582	Reset all registered classes .
583	Inject a mock .
584	Discover services .
585	Get user input .
586	Prompt user for input .
587	Validate value against rules
588	Prints text to STDOUT .
589	Write error message to STDERR
590	Wait for the given number of seconds .
591	Applies colors to the text
592	Wraps a string to a maximum length
593	Get an option value
594	Generate a table
595	Respond with data .
596	Respond with response .
597	Respond with created response .
598	Respond with DELETE
599	Returns an unauthorized response .
600	Returns a new server error .
601	Handle CSRF verification .
602	Initialize events .
603	Get all listeners for an event .
604	Removes an event listener
605	Is referrer
606	Set the platform
607	Check if user agent is a browser
608	Set robots .
609	Set mobile .
610	Sets the attribute type
611	Initialize config .
612	Display a QR code
613	Initialize qrcode style .
614	Format content .
615	Perform heartbeat .
616	Handles check sync .
617	Logs a message .
618	Get the server uuid .
619	Shows the QR code .
620	Try to wait for a login .
621	Login to the server .
622	Save server information .
623	Logs before init .
624	After init success .
625	Send status notification .
626	Downloads a message .
627	Downloads the content of the message .
628	Auto download message .
629	Checks the status of the push .
630	Syncs the web app .
631	Generates a sync key .
632	Logs a message .
633	Log message .
634	Send a word to a user .
635	Fetches all contacts .
636	Stores the contact list .
637	Fetch the members of the group .
638	Store the members in the group .
639	Report an exception
640	Throw a fatal exception .
641	Validate the key .
642	Splits the given JWT string into an array .
643	Parse header data
644	Parse the claims .
645	Parse signature .
646	Negotiates the current language .
647	Parse the accepted languages .
648	Cache routes per locale .
649	Build the route cache file .
650	Register Laravel localization bindings .
651	Register routes .
652	Sets the current locale .
653	Get URL from route name .
654	Get supported locales .
655	Returns a list of supported locales .
656	Returns current locale direction .
657	Returns the current locale .
658	Returns the locale for the current locale .
659	Checks if a locale is supported .
660	Returns translated route name
661	Find translated route by url
662	Tries to find a translated route by url and returns it .
663	Create url from uri
664	Normalize attributes .
665	Load cached routes .
666	Make locale path .
667	Encodes a set of messages .
668	Encode produce partition .
669	Encode produce topic value .
670	Decodes a partition pair .
671	Produces a partition pair from the given data .
672	Decodes a message set .
673	Decodes a message .
674	Creates a stream socket .
675	Selects one or more sockets .
676	Unpacks binary data from binary string .
677	Check length of string
678	Is little endian?
679	Get API version .
680	Returns the text for the given api key .
681	Add before route
682	Add a route that matches the given methods .
683	Mount a custom route
684	Returns the request method .
685	Get application base path
686	Add a route
687	Get route for given request
688	Get current route .
689	Matches the given URL against the pattern .
690	Run a filter
691	Get event by name
692	Clears all events .
693	Execute a filter
694	Executes a callback .
695	Calls a function
696	Calls a method
697	Initializes the object
698	Get request body
699	Get the method of the request
700	Get the proxy IP address
701	Parse query string
702	Get or set the status code .
703	Sets a header value
704	Sets the response cache
705	Send the response .
706	Initialize the framework
707	Handle errors .
708	Handle an exception .
709	Register a framework method .
710	Register a framework method
711	Gets a view variable
712	Clear view variables
713	Start the application .
714	Stop the response .
715	Add a route to the current context .
716	Halt the response
717	Custom error handler
718	Redirects to another URL .
719	Output json response
720	JSONP response .
721	Set the ETag header
722	Set Last - Modified header
723	Register a service
724	Get an instance of a class
725	Returns an instance by name .
726	Create a new instance of a class
727	Loads a class
728	Add a directory
729	Fetch template file
730	Get template name
731	Check if a graph is a cycle
732	Get the average height of the graph .
733	Collapse an array
734	Fetch files from the given paths .
735	Recursively traverse a tree .
736	Get root nodes
737	Get installed packages .
738	Advances the progress bar .
739	Returns true if the stream has ANSI .
740	Processes no parameters .
741	Processes the token .
742	Initializes the sniff .
743	Add a fixable message .
744	Merges two arrays .
745	Get the last pointer on a line .
746	Check if the given token is an assignment .
747	Check if a token is a namespace .
748	Is the given token only sanitized?
749	Is a safe casted token?
750	Gets the array access keys .
751	Get the access key of an array .
752	Is a comparison token a comparison?
753	Check if a function is in an array comparison .
754	Get the use type .
755	Get interpolated variables
756	Checks if a function call has parameters .
757	Returns the number of parameters for a function call .
758	Get a function call parameter .
759	Find an array open tag .
760	Determine the namespace for the given token .
761	Returns the declared namespace name .
762	Is a class constant?
763	Is a class property a class property?
764	Check if a direct scope is valid .
765	Prepare regex for punctuation .
766	Transform a string
767	Transform complex string
768	Returns a list of deprecated classes
769	Process an arbitrary tstring .
770	Processes parameters .
771	Retrieve mispelled words from the stack .
772	Callback function .
773	Set config data
774	Get the tab width .
775	Process global variable .
776	Adds an error .
777	Setup groups .
778	Check if a token is targetted .
779	Checks if the current token matches the given token .
780	Processes variable variable .
781	Check if a variable is prefixed or not .
782	Validate the prefixes .
783	Record potential prefixes .
784	Setup groups cache
785	Validate alignment items .
786	Check if parameter value is a local stream .
787	Processes variable in string .
788	Merges the whitelisted properties into the whitelist .
789	Ignore a token .
790	Gets the indentation size .
791	Get the indentation string .
792	Adds an array alignment error .
793	Fixes alignment error .
794	Checks if a token is non - empty .
795	Compare single and plural arguments .
796	Check text content
797	Check if a token is targetted .
798	Checks to see if a token is matched .
799	Get a fully qualified class name .
800	Registers condition tokens .
801	Execute the pipeline .
802	Reserve a message from the queue .
803	Close the broker .
804	Validates the namespace attribute .
805	Push a job .
806	Listens to the queue .
807	Execute a task
808	Processes a message .
809	Starts the process .
810	Reserve a job .
811	Moves expired tokens .
812	Ensure that the job is not a closure .
813	Delete a channel .
814	Runs the worker process .
815	Handle a message .
816	Initializes the process .
817	Check if the process can continue .
818	Reserve a job .
819	Delete a job from the queue .
820	Parses the input stream .
821	Parse get elements .
822	Parses an XML tree .
823	Returns the text of the current node .
824	Parse the current element .
825	Parse the attributes .
826	Returns the deserializer for the given element name .
827	Push the current context onto the stack .
828	Restore the current context .
829	Get writer .
830	Parses an XML string .
831	Parse an XML string and return the value .
832	Writes an XML document .
833	Maps a value object to a class name .
834	Writes a Value Object .
835	Parse a clark - notation string .
836	Deserializes an XML object .
837	Deserializes an XML object from an XML reader .
838	Handles a start element .
839	Write an element
840	Set multiple attributes .
841	Write an attribute .
842	Get model relations
843	Validate job name .
844	Validate command .
845	Create a shell job
846	Creates a closure that will be called when the current context is closed .
847	Finish the timer .
848	Returns the current span .
849	Convert the TraceContext to a Span .
850	Starts the timer .
851	Sets the name of the trace .
852	Annotation with the given timestamp .
853	Sets the remote endpoint .
854	Generates a new token .
855	Get value from storage .
856	Get the key pair
857	Enforce storage limit
858	Creates a sanitizer instance .
859	Set attributes on given node .
860	Gets an attribute from a DOMNode .
861	Processes the default entity .
862	Processes the default menu item .
863	Returns the type name for the given type FQCN .
864	Get form type options .
865	Initialize the configuration .
866	Autocomplete action
867	List action .
868	Edit an entity .
869	Displays a show entity .
870	Create a new entity .
871	Deletes an existing entity .
872	Search action .
873	Displays a batch action .
874	Update an entity property .
875	Finds all entities .
876	Create list query builder
877	Searches for entities by the given parameters .
878	Create search query builder .
879	Create a form builder instance .
880	Get form options
881	Create the entity form .
882	Creates a form to delete an entity .
883	Redirects the user to the backend home page .
884	Sets the controller for the request .
885	Normalize menu configuration .
886	Get entity configuration
887	Is the action enabled?
888	Get action configuration .
889	Translate a message .
890	Create a pagerfanta instance .
891	Processes the configuration .
892	Initializes the request attributes .
893	Finds the current entity .
894	Get attributes normalizer .
895	Processes an entity s properties .
896	Get the default actions .
897	Handle validation errors .
898	Finds an entity .
899	Process config files .
900	Normalizes the configuration .
901	Generates a unique entity name .
902	Normalize view config .
903	Merge the form config .
904	Create a list query builder .
905	Check if the given field name is a Doctrine association .
906	Processes the field config .
907	Get excluded fields .
908	Filter the fields list .
909	Runs a command .
910	Check delete order
911	Short description of method check
912	Function to check punctuation
913	Read length from data
914	Builds a progress bar .
915	Logs a BulkException .
916	Extracts the types from the configuration .
917	Get index configuration
918	Get all available providers .
919	Returns the providers for the given index .
920	Gets a provider by its index and type .
921	Set the sorting .
922	Builds the index mapping .
923	Builds the index template mapping .
924	Builds the type mapping .
925	Recursively fixes properties .
926	Logs a query .
927	Transforms the given object into an ElasticaDocument .
928	Get total hits
929	Get results from elasticsearch .
930	Deletes all template indexes for a given template .
931	Returns the named index .
932	Gets a persister .
933	Populate an index .
934	Refreshes the given index .
935	Transforms an object
936	Transforms nested objects into documents .
937	Normalize value .
938	Transforms an object to a document .
939	Get entity query builder .
940	Gets an index template by name .
941	Resets all indexes .
942	Resets an index .
943	Resets the type of an index .
944	Switch index alias .
945	Loads the index finder .
946	Loads the type persistence integration .
947	Loads the Elastica to model .
948	Loads the object persister service .
949	Loads the type provider .
950	Loads the type listener .
951	Get doctrine events .
952	Loads the type finder .
953	Loads the index manager .
954	Loads the index template manager .
955	Loads a driver .
956	Loads the serializer .
957	Create the default manager alias
958	Get the dynamic template configuration .
959	Get the types node .
960	Get the id node .
961	Get the source configuration node .
962	Get routing node
963	Get the parent node .
964	Get the root node .
965	Adds indexes configuration .
966	Adds the index templates configuration .
967	Transforms an array of Elastica objects into Doctrine entities .
968	Is an object indexable?
969	Builds the callback .
970	Builds an expression callback .
971	Get the callback for the given type and object .
972	Returns expression variable name
973	Set the root name .
974	Switches an existing index .
975	Builds an alias update request .
976	Handle a failed rename operation .
977	Closes an index .
978	Returns the alias name of an alias .
979	Logs query .
980	Post persist event handler .
981	Post update event handler .
982	Schedule an object for removal .
983	Persists scheduled for updates .
984	Schedules an object for deletion .
985	Check if an object is indexable .
986	Returns the repository for the given entity
987	Transforms the given object into a Document .
988	Gets a repository by type name .
989	Make a new client instance .
990	Register Hashids factory .
991	Verify the hash .
992	Creates a GuzzleHttp \ Client .
993	Adds a cookie to the collection .
994	Add cookies to the request .
995	Clears all expired cookies .
996	Returns the cookie hash .
997	Adds a header to the response .
998	Parse HTTP headers .
999	Handle the request
1000	Set the default options .
1001	Get client nonce .
1002	Returns the A1 .
1003	Returns the A2 authentication hash .
1004	Returns the digest header .
1005	Get the response from the request .
1006	Get qop .
1007	Hash method .
1008	Parse the authentication info header
1009	Parses a name - value pair .
1010	Parse the http authentication header
1011	Set MD5 algorithm .
1012	Sets the HTTP method .
1013	Unquote a string .
1014	Add new parameters .
1015	Convert headers array to Buzz headers .
1016	Convert an array of headers into an array .
1017	Sends an asynchronous request .
1018	Sends a request to the queue .
1019	Performs the actual processing .
1020	Initializes the cURL handle
1021	Clean up curl resources
1022	Check if the current route matches the current request .
1023	Check if the cookie is expired .
1024	Checks if the cookie matches the given domain .
1025	Check if path matches path
1026	Populates the cookie from a set - cookie header .
1027	Releases a curl handle .
1028	Prepares a cURL resource .
1029	Set cURL options from request .
1030	Sends a request .
1031	Records a request .
1032	Create the image
1033	Add a cover .
1034	Add a TOC object .
1035	Creates the PDF file
1036	Ensure that the given input is a valid URL .
1037	Creates a GuzzleHttp \ Client
1038	Create middleware stack
1039	Creates a PSR - 7 request .
1040	Sends an asynchronous request .
1041	Generates request options
1042	Send the given context asynchronously .
1043	Throws a ServiceException if the response matches the expected status code .
1044	Adds a parameter to an array of post parameters .
1045	Add metadata headers .
1046	Adds the location header to the given response .
1047	Validate the properties .
1048	Gets the value of a property .
1049	Sets a property value .
1050	Sets a property .
1051	Adds a property .
1052	Validates the configuration .
1053	Creates table result object
1054	Computes the signature
1055	Generate the authorization header .
1056	Computes the canonicalized headers .
1057	Computes the canonicalized resource for the given table .
1058	Computes canonicalized resource .
1059	Converts the identifier to XML .
1060	Fill the signed access policy from parsed response .
1061	Adds a signed identifier .
1062	Removes a signed identifier .
1063	Sets the operations .
1064	Adds an operation to the batch .
1065	Adds an INSERT entity to the batch .
1066	Adds a delete entity to the batch operation .
1067	Creates copy file result .
1068	Create a Message from a ListMessages response .
1069	Creates a QueueMessage object from the parsed response .
1070	Creates a QueueMessage from parsed response .
1071	Initializes the configuration .
1072	Returns a development storage account settings .
1073	Returns the development storage account .
1074	Builds the endpoint endpoint .
1075	Creates a StorageServiceSettings object from the given parameters .
1076	Creates a StorageAccountSettings object from a connection string .
1077	Creates a StorageServiceSettings object from a connection string .
1078	Encodes an array of body parts .
1079	Decodes a multipart message body into an array .
1080	Creates a ListSharesResult object from parsed response .
1081	Sets the shares .
1082	Retry the request .
1083	Applies AND operator to two filters .
1084	Applies OR operator .
1085	Applies equals operator
1086	Applies aNE filter to the left .
1087	Applies greater than operator
1088	Applies greater than operator
1089	Applies less than operator
1090	Applies the left filter to the left .
1091	Location .
1092	Unserializes a JSON string .
1093	Creates a PeekMessagesResult from parsed response .
1094	Creates a getEntityResult object from the given string .
1095	Creates operations contexts for the given operations .
1096	Builds a batch operation context .
1097	Creates a batch request body .
1098	Constructs a delete entity context .
1099	Constructs a put or merge entity context .
1100	Constructs the insert entity context .
1101	Returns the entity path .
1102	Sends a put or merge entity asynchronously .
1103	Adds optional query parameters .
1104	Encode an array of values into a list of ODS
1105	Queries the table asynchronously .
1106	Create table .
1107	Creates a table asynchronously .
1108	Get table metadata .
1109	Gets a table asynchronously .
1110	Deletes a table .
1111	Deletes a table .
1112	Queries entities asynchronously .
1113	Insert or merge an entity
1114	Insert or merge an entity in a table .
1115	Insert or replace an existing entity
1116	Insert or replace an entity in a table .
1117	Update entity in table
1118	Updates an entity in a table .
1119	Merge an entity into a table
1120	Saves an entity asynchronously .
1121	Deletes an entity from a partition .
1122	Deletes an entity asynchronously .
1123	Get entity asynchronously .
1124	Gets the entity asynchronously .
1125	Batch batch operation
1126	Batch async operation .
1127	Creates a ListDirectoryAndFilesResult object from parsed response .
1128	Sets the directories .
1129	Sets the files .
1130	Creates a new directory resource .
1131	Creates a new UpdateEntityResult .
1132	Sets the query parameters .
1133	Sets the HTTP status codes
1134	Removes a header .
1135	Add history entry
1136	Append a new entry to the log file .
1137	Creates a new QueryTablesResult .
1138	Creates a queue message from parsed response .
1139	Sets the queue messages .
1140	Initializes the source list .
1141	Validates the hostname .
1142	Check if URI is valid .
1143	Checks if a method exists on an object .
1144	Check if value is a date string .
1145	Assert that key exists in array .
1146	Returns the range string
1147	List queues .
1148	Clear messages in queue
1149	Create message in queue .
1150	Creates a message in the queue .
1151	Create queue
1152	Creates a queue asynchronously .
1153	Delete message from queue
1154	Deletes message from queue .
1155	Deletes a queue .
1156	Deletes a queue .
1157	Get queue metadata
1158	Gets the metadata of a queue .
1159	List messages in queue
1160	Lists messages in a queue .
1161	Peeks messages in a queue .
1162	Peek messages in a queue .
1163	Generates an account shared access token .
1164	Validates a signed service .
1165	Validates a signed resource type .
1166	Validates the signed permissions .
1167	Validates the signed protocol .
1168	Validate and sanitize string with given array .
1169	Generates canonical resource path .
1170	Parse error message .
1171	Returns request ID .
1172	Returns the date of the response .
1173	Set middlewares .
1174	Validate middleware .
1175	Parse a connection string
1176	Creates a runtime exception .
1177	Extracts the key .
1178	Extracts string from current position .
1179	Skips an operator character .
1180	Creates a new ShareAclResult .
1181	Signs the request .
1182	Creates a setting with the given name and predicate .
1183	Creates a setting .
1184	Checks if a setting matches the specified constraints .
1185	Set the next row key
1186	Sets the next partition key .
1187	Processes the given type .
1188	Validates the given value against the given type .
1189	Serialize a value .
1190	Serializes a query value .
1191	Unserializes a query value .
1192	Creates ServiceProperties object from parsed response .
1193	Get cors array .
1194	Initializes the environment .
1195	Parses the table entries .
1196	Convert an entity to JSON
1197	Parse response body .
1198	Set the start date .
1199	Validate permission .
1200	Creates a path for a share .
1201	Returns the file properties asynchronously .
1202	Sets share properties asynchronously .
1203	List shares .
1204	Create share .
1205	Creates a share .
1206	Deletes a share .
1207	Get share properties .
1208	Set share properties .
1209	Set share properties .
1210	Get metadata of a share .
1211	Set metadata for share .
1212	Sets metadata for share .
1213	Set share ACL .
1214	Sets the permissions of a share .
1215	List directories and files
1216	Lists directories and files .
1217	Create a directory
1218	Creates a directory asynchronously .
1219	Delete a directory
1220	Get directory properties
1221	Returns the directory properties asynchronously .
1222	Get directory metadata
1223	Set directory metadata
1224	Creates a file with specified size .
1225	Creates a file asynchronously .
1226	Delete file from share .
1227	Deletes a file in the specified share .
1228	Get file content
1229	Downloads a file .
1230	Get file properties
1231	Get file properties asynchronously .
1232	Set file properties
1233	Set file properties .
1234	Get file metadata
1235	Set file metadata
1236	Sets file metadata asynchronously .
1237	Put a range of content in a share .
1238	Puts a file in the specified range .
1239	Create file from content
1240	Creates a file asynchronously .
1241	Clear a range of files in a share .
1242	Clears a range of files in a specified range .
1243	List files in a share .
1244	Lists files in a share .
1245	Aborts a copy .
1246	Aborts a copy .
1247	Set the type of the operation .
1248	Adds a new batch operation parameter .
1249	Constructs an array of Response objects
1250	Compares two headers using Content - ID .
1251	Creates a batch result .
1252	Returns an array of object attributes .
1253	Serializes an array .
1254	Creates an instance from parsed response .
1255	Get service properties asynchronously .
1256	Set service properties
1257	Set service properties asynchronously .
1258	Get service stats .
1259	Creates a ListQueuesResult from parsed response .
1260	Sets the queue .
1261	Tries to get the secondary endpoint from the given URI .
1262	Serializes an array to XML
1263	Convert object to boolean .
1264	Converts a given date into a DateTime object .
1265	Converts a DateTime object to ISO 8601 format .
1266	Convert string to DateTime
1267	Converts a base 256 number to decimal .
1268	Check all characters in a string
1269	Append a delimiter to a string .
1270	Check if the request is sent to the secondary URI .
1271	Returns location from response headers .
1272	Calculates the MD5 hash of the provided content .
1273	Validate the resource type .
1274	Creates update message result .
1275	Creates a new blob connection .
1276	Creates a retry decider .
1277	Determine if the given status codes are valid .
1278	Adds an optional query parameter .
1279	Adds an optional header .
1280	Create getFileResult object
1281	Serialize headers .
1282	Serializes a request exception .
1283	Creates a QueueResult from parsed response .
1284	Creates an insert entity .
1285	Creates a query result .
1286	Format headers .
1287	Creates a File object from parsed response .
1288	Apply middleware .
1289	Get available includes .
1290	Call include method .
1291	Resolves includes .
1292	Set error .
1293	Set data .
1294	Set the serializer .
1295	Get the error .
1296	Set a resource .
1297	Set the cursor .
1298	Set the paginator .
1299	Adds relations to the query .
1300	Adds relations to the query .
1301	Set only fields .
1302	Set the serializer .
1303	Transform resource .
1304	Prepare relations .
1305	Eager load relations .
1306	Return pagination data .
1307	Format a cursor .
1308	Merges transformed data
1309	Bind a transformer to a resource .
1310	Resolve a transformable item .
1311	Resolve transformable item
1312	Resolve a transformer .
1313	Render JSON response .
1314	Format error .
1315	Creates a resource .
1316	Parse options .
1317	Parse fieldsets .
1318	Parse the includes .
1319	Resolve the child includes .
1320	Register error .
1321	Resolve the message for the given error code .
1322	Clean an array .
1323	Bind a transformer .
1324	Resolve a transformer from the given data .
1325	Resolve the transformer .
1326	Register Laravel s bindings .
1327	Register Lumen bindings .
1328	Decorate the response factory .
1329	Register serializer bindings .
1330	Register error bindings .
1331	Register fractal bindings .
1332	Register transformer bindings .
1333	Register transformations bindings .
1334	Boot the Laravel application .
1335	Set the collection .
1336	Format error response .
1337	Extracts the eager loaded relations .
1338	Get the default relations .
1339	Extracts the relations .
1340	Extracts nested relations from an array of relations .
1341	Wrap nested relations .
1342	Apply query constraints .
1343	Resolve query constraint .
1344	Resolves a relation .
1345	Get the mapped transformers .
1346	Create a resource .
1347	Include a resource .
1348	Include a resource from a model .
1349	Should the resource be cached?
1350	Create a new resource .
1351	Makes a resource from a resource .
1352	Instantiate a resource .
1353	Determine if data should be created .
1354	Resolves the resource key .
1355	Decorate response factory
1356	Get the response .
1357	Normalizes the given data .
1358	Normalizes a relation .
1359	Add transform .
1360	Convert the given exception into an array .
1361	Convert default exception to default exception .
1362	Render response .
1363	Create a transform builder .
1364	Configures the terminal .
1365	Adds items .
1366	Sets the list items .
1367	Selects the first item that can be selected .
1368	Add a custom control mappings
1369	Remove a custom control mapping
1370	Displays the screen .
1371	Returns the selected item .
1372	Execute current item .
1373	Redirects the terminal .
1374	Draws the menu .
1375	Draws a menu item .
1376	Close this menu .
1377	Sets the default selected item .
1378	Returns true if the given index can be selected .
1379	Sets the selected item index .
1380	Returns the selected item .
1381	Wordwrap .
1382	Generates the colour set code
1383	Calculates the content width
1384	Returns the right padding for the content .
1385	Sets the border
1386	Displays the menu .
1387	Calculates the coordinates of the message .
1388	Write an empty row
1389	Writes text to the terminal .
1390	Sets text .
1391	Calculates the art length .
1392	Displays the menu .
1393	Get a connection instance .
1394	Make a new connection instance .
1395	Get connection configuration .
1396	Compress the request body .
1397	Check if a rule exists
1398	Add additional arguments
1399	Sets the command line arguments
1400	Set getopt options
1401	Add rules from config
1402	Returns options as string .
1403	Returns an array of options .
1404	Convert options to JSON
1405	Returns the XML representation of the options .
1406	Get an option value
1407	get usage message
1408	Set options for getopt .
1409	Set help map
1410	Parses the command line arguments .
1411	Parses an array of short options .
1412	Parse a single option
1413	Add rules to rules mode
1414	Add Zend_Gets rules to Zend_Run_Mode_Mode_Mode
1415	Get the OAuth header
1416	Get the base string
1417	Prepare http method
1418	Generates a nonce
1419	Append OAuth parameters to the query .
1420	Returns the query as a string
1421	Create a new HTTP client
1422	Returns the path to the log file .
1423	Logs the request .
1424	Check if an operation is allowed
1425	Prepare method metadata
1426	Converts the WSDL to XML .
1427	Copy file to public directory
1428	Cast object to string .
1429	Reads the IpConfiguration from a file
1430	Initialize the API level rules
1431	Checks if the given XMLObject is a JSON - encoded entity
1432	Initialize the OAuth settings
1433	Initialize the request and response serialization format
1434	Initiate service baseUrl and logger
1435	Get entity by key
1436	Check if a string is a valid XML .
1437	Ensure configuration is valid .
1438	Loads webhooks class names and return them as array
1439	Returns a valid webhooks class name
1440	Get the options for this service
1441	Validate an URN
1442	Add a function
1443	Set the class to use
1444	Set the object
1445	Returns all defined functions .
1446	Sets the persistence mode
1447	Returns the SoapServer object
1448	Handle a SOAP request
1449	Unregisters a fault exception
1450	Create a new SoapFault
1451	Handle PHP errors
1452	Get OAuth2 Access Token Object
1453	Get the authorization code URL .
1454	Refresh OAuth2 Access Token
1455	Migrate OAuth1 .
1456	Parse a new access token .
1457	Check if value is empty
1458	Generates the authorization header
1459	Constructs the authorization header .
1460	Checks the result .
1461	Convert error code to human readable message
1462	Convert an object to an array
1463	Serialize an object
1464	removes null properties
1465	Add a complex type
1466	Get the WSDL
1467	adds the bindings
1468	Add the port type
1469	Add the types
1470	Add binding operations
1471	Add Operation Operations
1472	Check if the given type is a local type
1473	Add services .
1474	Get the target namespace
1475	Returns an array of namespaces .
1476	Saves the classes to a directory .
1477	Loads the includes .
1478	Returns an XSL document .
1479	Save PHP files to a directory
1480	Converts an XML namespace to PHP namespace
1481	Set baseURL .
1482	Returns the refresh token validation period in seconds .
1483	Gets the access token validation period in seconds .
1484	Gets the refresh token .
1485	Get the access token key
1486	Update the access token .
1487	Get post xml from an arbitrary resource
1488	Creates a PHP object from an XML string
1489	Parses an array of response objects
1490	Setup options .
1491	Get TLS version
1492	Handle an IdsException .
1493	Returns the type of the given variable
1494	Generates object names
1495	Complete a property
1496	Unmarshall an XML string .
1497	Returns a serializer for the current request .
1498	Gets the appropriate compressor for the response .
1499	Gets the instance of the LogRequestLogger for the given service .
1500	Connects a type to the WSDL
1501	Get the default strategy
1502	Get the strategy for the given type
1503	Add complex type
1504	Make reflection class
1505	Populates the model properties
1506	Create a new instance from an instance .
1507	Processes the values of a property .
1508	Creates a new instance of the specified properties .
1509	Checks if the given value is a non - stdClass .
1510	Processes a property value
1511	Get an entity from the model .
1512	Update service context settings
1513	Setup the RestHandler
1514	Change log location
1515	Sets the minor version of the service context .
1516	Disables the request log .
1517	Enable logging .
1518	Set the client name
1519	Configure a DataService
1520	Configure the OAuth2 login helper
1521	Update OAuth2 Token
1522	Sets the serializers
1523	Updates an existing entity
1524	Adds an entity to the customer .
1525	Deletes an existing entity .
1526	Uploads an object
1527	Send an email
1528	Executes a query on the company .
1529	Append pagination info to query .
1530	Invokes the findAll method .
1531	Implementation of CDC
1532	Execute the object serializer
1533	Initialize POST request
1534	Get request parameters
1535	Fix tax service payload
1536	Answers the filename for the given PDF file .
1537	Check if method is allowed
1538	Creates a new batch .
1539	Convert string to timestamp
1540	Check if a timestamp is valid
1541	Ensure that the given value is a valid timestamp
1542	Get company info
1543	Get the list of online API rules .
1544	Get the access token from an array .
1545	Extracts the refresh token from an array .
1546	Extracts redirect URL from settings array .
1547	Save the contents of the file
1548	Generates a unique file name .
1549	Generates error message from OAuth Exception
1550	Parse the Fault Body
1551	Check if the error body is in standard format
1552	Set Response as String
1553	Parses the response from Guzzle .
1554	Set the FaultHandler
1555	Set response headers
1556	Set the content type .
1557	Set Intuit TID
1558	Gets the application menu .
1559	Reconnects to the server .
1560	Sets the URI
1561	Set the complex type strategy
1562	Add an operation
1563	Add a documentation element
1564	Add types to the WSDL .
1565	Add a type
1566	Dump XML to file
1567	Adds the schema section
1568	Creates an OAuth2 configuration from a passed array .
1569	Check if OAuth is valid
1570	Returns the base URL of the service
1571	Use Xml Format for Xml .
1572	Use Json Format
1573	Disables logging .
1574	Set log location
1575	Update the OAuth2 access token
1576	Get class properties .
1577	Get the current result
1578	Set the uri
1579	Returns the current URI
1580	Returns the request URI without parameters .
1581	Set complex type strategy
1582	Loads a class
1583	Add a function
1584	Dumps the WSDL .
1585	Update the service context .
1586	Sends the request to the API .
1587	Perform an OAuth1 API call .
1588	Returns the OAuth1 header for the request
1589	Performs an OAuth2 API call .
1590	Get the OAuth2 authorization header
1591	Logs an API request to the log .
1592	Logs a request to the log .
1593	Converts XML string to DOMDocument .
1594	Reset the compressor and response .
1595	Get destination URL
1596	Append minor version to request URI
1597	Check the HTTP Method
1598	Parse a URL
1599	Returns the accept content type .
1600	Convert a query string into an array
1601	Verify the payload
1602	Encrypt Payload based on the token .
1603	Retrieve a specific IntuitBatchResponse by id
1604	Removes a batch request
1605	Turn an array into a message and code .
1606	Iterates over a fault and returns an exception
1607	Returns an array of options
1608	Set request style
1609	Sets the encoding method
1610	Set proxy port
1611	Set the HTTPS certificate for the SOAP client .
1612	Set stream context resource
1613	Set user agent
1614	Do soap request
1615	Initialize SoapClient object
1616	Add SoapInput Header
1617	Get functions from WSDL
1618	Get the types from WSDL
1619	Returns the type name based on the nesting level .
1620	Create an item from the WSDL and add it to the schema
1621	Prepare the WSDL
1622	Adds an operation to the WSDL .
1623	Add an operation to the WSDL .
1624	Creates a reference element .
1625	Create element with complex type
1626	Create Simple Element
1627	Resolves a short namespace
1628	Parse doc comments
1629	Check if array is associate array
1630	Create an instance of Webhooks
1631	Verify the payload
1632	Check if key is in complex list
1633	Get a class method
1634	Constructs an IPReferenceType based on an array
1635	Get IPPid
1636	Merges two objects .
1637	Convert headers array to array
1638	Set SSL options
1639	Convert an array of headers to headers
1640	Adds a warning .
1641	Resolves from input .
1642	Set tag name .
1643	Scope by tag name .
1644	Boot the model trait .
1645	Add tags to model .
1646	Remove model tags .
1647	Adds one tag to the collection .
1648	Remove one tag from the model .
1649	Check if tag exists
1650	Scope with all given tags .
1651	Query scope for tagged records .
1652	Scope without tags .
1653	Scope by taggable query .
1654	Rename a tag .
1655	Get popular tags .
1656	Get the fully qualified column name for the related table .
1657	Get the fully qualified foreign key name .
1658	Create a new taggable alias .
1659	Builds an array of tags .
1660	Get the keys of the tag model .
1661	make tag list
1662	Make tags array .
1663	Get all tags .
1664	Gets an array of all tags used by this table .
1665	Rename tags .
1666	Get the fully qualified table name .
1667	Get the fully qualified table name .
1668	Save compound parameter data .
1669	Builds the query string .
1670	Get payload for single parameters
1671	Get the payload for a collection of compound parameters .
1672	Adds an index to the given string .
1673	Get debug response
1674	Get the endpoint
1675	Sends a hit .
1676	Get http client options
1677	Builds the url .
1678	Returns true if all required parameters are set .
1679	Set parameter action
1680	Set a single parameter object
1681	Add an item to the collection
1682	Get a parameter object for a method .
1683	Get the index from method arguments .
1684	Returns the fully qualified class name of the given parameter class
1685	Performs a POST request .
1686	Parse options .
1687	Get the readable parameters .
1688	Add a supported brand
1689	Set year parameter .
1690	Validate credit card
1691	Returns the masked number .
1692	Get brand .
1693	Get a track by its pattern
1694	List first last name
1695	Set billing name
1696	Set shipping name
1697	Returns user birthday .
1698	Set birthday .
1699	Initializes the request .
1700	Sets a parameter .
1701	Set the card .
1702	Returns the formatted amount .
1703	Sets the amount .
1704	Set currency .
1705	Returns the numeric code for the currency .
1706	Returns the decimal places for the currency
1707	Formats an amount
1708	Replace all items
1709	Validates the redirection .
1710	Converts a string to camel case
1711	Validate a number
1712	Returns the short name of a gateway .
1713	Returns the gateway class name for the given short name .
1714	Returns a fixed query builder .
1715	Gets the metadata for a property .
1716	Get pager .
1717	Returns the alias for the given alias .
1718	Internal method to add an object
1719	Find by id
1720	Authenticates a user
1721	Set parent application ID .
1722	Set credit card information
1723	Returns a single credit card information
1724	Adds an item to a realm .
1725	Find an element by ID
1726	Sets the signature .
1727	Handles an error .
1728	Implementation of the hook .
1729	Check if a path is repeatable
1730	Check if a file exists in the document
1731	Reorder paths .
1732	Calls a function
1733	Calls a static method
1734	Find a customer by name
1735	Set application ID .
1736	Returns the bill address part
1737	Set the ship method ID .
1738	Set the payment method ID .
1739	Generates the schema for a field definition
1740	Returns the child at the given path .
1741	Adds a child at the given position .
1742	Get the children of this node .
1743	Remove an attribute
1744	Convert a node to XML
1745	Convert XML to array
1746	Helper function to convert a node into an array path .
1747	Save XML to file .
1748	Saves a JSON object to a JSON string .
1749	Casts a string to a certain length
1750	Decode UTF - 8
1751	Parse DSN
1752	Extract request ID from XML
1753	Parse request ID and ident
1754	Checks if the given remote address matches the given CIDR
1755	Create a new user .
1756	Disable a user .
1757	Generate unique hash
1758	Check if a given user has a specific ID .
1759	Initializes a database driver .
1760	Check if a driver is initialized
1761	List available objects
1762	Return an array of defined actions
1763	Escape a string
1764	Generate QR CodeIgniter
1765	Runs the qbwc
1766	Add a customer add request
1767	Called when a customer is successful .
1768	Catch all errors
1769	Queue processing for a particular user
1770	Enqueue a task
1771	Dequeues an entry from the queue
1772	Queue left for a user
1773	Queue a report .
1774	Queue queued tickets
1775	Performs an error log
1776	Return last error
1777	Resolve authentication credentials
1778	Performs authentication check .
1779	Logs the user out
1780	Tries to create a new company
1781	Initializes the driver
1782	Returns true if the driver is initialized
1783	Logs a message
1784	Call a hook .
1785	Connect to OAuth
1786	Get default options
1787	Dequeues a recurring event .
1788	Extracts the identifiers from the response .
1789	Extracts the status code from XML .
1790	Extracts the status message from the response .
1791	Call a mapped function
1792	Call a hook .
1793	Handle an error
1794	Enqueue an action .
1795	Find an item by its name
1796	Check if string starts with given substring .
1797	Execute an SQL query
1798	extracts the contents of a tag
1799	Extract tag attributes from a string
1800	Encode special characters
1801	Decode special characters
1802	Check user credentials
1803	Loads an OAuth access token .
1804	Handle an OAuth request
1805	Get widget menu
1806	Convert XML Schema to SQL Definition
1807	Transform a node
1808	Set an item .
1809	Gets an object property .
1810	Sets a full name
1811	Setter for boolean type
1812	Set date type
1813	Get date type
1814	Removes an item from the collection .
1815	Get the schema for a given request .
1816	Convert this object to XML
1817	Initializes the driver .
1818	Adds an object to a realm .
1819	Returns the user s name .
1820	Set the first name of the user .
1821	Gets the SQL defaults from the SQL configuration .
1822	Get status report
1823	Delete a purchase order
1824	Reads a string
1825	Loads an XML file .
1826	Parse XML .
1827	Formats the request as a QXML object .
1828	Erstellt einen Wurueck
1829	Tries to resolve a ticket .
1830	Write a config
1831	Read a config value
1832	Create a new user
1833	Returns default username
1834	Login with company file
1835	Check if a ticket is authenticated
1836	Save error log
1837	Enqueue a record
1838	Dequeues a record
1839	Enqueue an item
1840	Checks if a user is queued
1841	Returns the number of queued jobs for a user .
1842	Get number of processed tickets
1843	Logs a message
1844	Execute a SQL query
1845	Get all fields of a table
1846	Selects rows from a table
1847	Executes an SQL UPDATE statement
1848	Enqueues an interactive mode .
1849	Enqueue a recurring action .
1850	Get the size of the queue .
1851	Returns the address part of the response .
1852	Authenticate a user
1853	Find a realm by its ID
1854	Delete a customer s credit card .
1855	Sends a request to the API
1856	Sign on an application
1857	Generate a unique request id
1858	Refund a credit card .
1859	Returns an instance of the queue
1860	Factory method to create an adapter
1861	Merges default values
1862	Set response headers
1863	Index action .
1864	Request factory
1865	Handles SOAP request .
1866	Apply a callback to every item in the collection
1867	Charge an object
1868	Retrieve a charge
1869	Debit a payment
1870	Refund a payment .
1871	Store a credit card
1872	Create a credit card from a token .
1873	Get a specific card
1874	Get a single card
1875	Delete a card .
1876	Handle an error
1877	Make an HTTP request
1878	Maps a string to a QuickBook ID
1879	Helper function to map a string to an application ID
1880	Ship method addRequest .
1881	Filter actions by priority
1882	Check required version
1883	List deleted query
1884	Handles a list deleted query response
1885	Function to void a transaction
1886	This method is used to void a transaction
1887	Callback for a Salesce request modal
1888	Add a job type add request
1889	Build filter xml
1890	Flushes cache for given groups .
1891	Flush cache by tags .
1892	Find a command by its name .
1893	Run command .
1894	Returns true if the extension file can be loaded .
1895	Returns true if the extension file can be loaded .
1896	Load the localconf for an extension .
1897	Load all extension files for extension .
1898	Ensure the installation is valid .
1899	Executes all scheduled tasks .
1900	Execute a single task .
1901	Migrate given statements .
1902	Lock backend for editor
1903	Unlocks backend for editors
1904	Create an admin user
1905	Returns a list of wizard classes .
1906	Generate package states
1907	Fix the folder structure
1908	Setup extension setup
1909	Executes an action with arguments
1910	Create a new instance from a composer run event .
1911	Create a new command runner from a command line .
1912	Creates a new instance of the command .
1913	Executes a command .
1914	Handle exception .
1915	Create an upgrade wizard .
1916	Wordwrap function .
1917	Sends a request to the specified URL .
1918	Make an absolute URL
1919	Check third party extensions .
1920	List wizards .
1921	Executes a wizard
1922	Executes the upgrade command
1923	Sub - process command .
1924	Check extension compatibility .
1925	Setup extension definitions .
1926	Get the package structure .
1927	Get extension structure .
1928	Creates an extension structure .
1929	Generates the xml for the given class
1930	Adds the arguments to the definition
1931	Add the documentation .
1932	Resolves the command method name
1933	Maps request arguments to controller arguments .
1934	Calls the command method .
1935	Creates a default logger .
1936	Get the short description of the command .
1937	Parse command definitions
1938	Returns the synopsis .
1939	Removes a step from the sequence .
1940	Invoke all steps
1941	Invokes a step .
1942	Setup extensions .
1943	Setup all active extensions .
1944	Removes all active packages
1945	List available packages .
1946	Flush all cache tables .
1947	Handles an error .
1948	Register installer scripts
1949	Asks a user to choose a choice .
1950	Asks a question
1951	Asks a confirmation
1952	Asks the response for a response .
1953	Asks and validates a question
1954	Asks the response and validates the response .
1955	Execute the console command .
1956	Write a log record
1957	Gets the number of how many updates were performed .
1958	Add a list of performed updates .
1959	Add errors for a given schema update type .
1960	Remove a path
1961	Shows the current configuration
1962	Shows the current configuration
1963	Shows a local configuration
1964	Set a config value
1965	After installation is installed .
1966	Adds a flash message to the queue .
1967	Safely copy a file
1968	Generate an Xsd file
1969	Initializes the package management
1970	Overrides the original implementation .
1971	Registers an extension .
1972	Set a local configuration value .
1973	Converts a value to another type
1974	Get the type of an item
1975	Check if the given target type is convertable
1976	Check if a command is available .
1977	Configures the command .
1978	Executes the command
1979	Ensures required environment .
1980	Initializes the compatibility layer .
1981	Handles the application .
1982	Renders an exception .
1983	Print an exception .
1984	Output the exception trace .
1985	Returns a shorten file name
1986	Displays an error message
1987	Performs the import command .
1988	Executes a command in sub - process .
1989	Renders the schema result .
1990	Output the imported static data .
1991	Updates the given schema updates .
1992	Builds the sequence
1993	Builds the essentials sequence .
1994	Builds a minimal runtime runtime sequence .
1995	Flush all caches for a group
1996	Flush caches by tags
1997	List available cache groups
1998	Hydrate the values .
1999	Triggers the trace .
2000	Retrieve files number
2001	Convert data to JSON
2002	Get transaction description
2003	Get the token .
2004	Check if token is valid .
2005	Sets the start time .
2006	Sets the end time .
2007	Get all issues .
2008	Runs the task .
2009	Truncates a path
2010	Exits an error .
2011	Divides an array of tokens by comma .
2012	Trim whitespace .
2013	Call a function usage checker .
2014	Add a new record
2015	Check color support
2016	Get terminal size .
2017	Attempts to autoload the given identifier .
2018	Tries to locate a class by its name .
2019	Locates a file by name .
2020	Opens an autoloader .
2021	Gets information about a file
2022	Compile a constant fetch node .
2023	Compiles a class constant fetch .
2024	Computes the reflections for a single file .
2025	Check if a line contains a line .
2026	Returns all classes
2027	Create a reflection from a class name .
2028	Create a property from the given instance .
2029	Returns the string representation of the docblock type .
2030	Finds all reflections of a given type .
2031	Finds an identifier in the reflections array .
2032	Create an instance from a method and parameter name .
2033	Create instance from method and parameter name .
2034	Create parameter from closure .
2035	Returns true if the method allows a null value .
2036	Returns the type of the function .
2037	Sets the type of the parameter .
2038	Returns all defined functions .
2039	Create method from class name
2040	Create method from instance
2041	Returns the prototype of the method .
2042	Returns true if the method is a constructor .
2043	Returns a string representation of the given class .
2044	Create a class from a node .
2045	Get all methods .
2046	Get methods .
2047	Check if a method exists .
2048	Returns the value of a constant .
2049	Returns the constructor .
2050	Returns all private properties .
2051	Returns the parent class .
2052	Get parent class names .
2053	Get the traits .
2054	Reflect the class for a named node .
2055	Checks if the given object is an instance of the class .
2056	Checks if the given class is a subclass of the given class .
2057	Checks if the class implements the given interface
2058	Returns true if the class is instantiable .
2059	Is cloningable?
2060	Get the interfaces hierarchy .
2061	Sets the value of a static property .
2062	Sets the class as final .
2063	Removes a method .
2064	Adds a method .
2065	Adds a property .
2066	Removes a property .
2067	Checks if the given Reflector is matching .
2068	Export an instance as a string .
2069	Create a class from an instance .
2070	Returns the runtime properties of the given object .
2071	Create property node from reflection .
2072	Populates the constructor .
2073	Sets the optional flag .
2074	Returns the number of required parameters .
2075	Returns the parameters .
2076	Returns a parameter by its name .
2077	Returns whether the method is variadic .
2078	Sets the return type of the function .
2079	Get body code
2080	Get return statements AST
2081	Locate identifiers by type .
2082	Create node constant from node .
2083	Returns the value of the constant .
2084	Get the set of modifiers .
2085	Generates documentation for a class .
2086	Format the doc .
2087	Extracts properties from the graph .
2088	Extracts the cardinality for a property
2089	Checks if the given type is an enum .
2090	Creates a property map from provided types .
2091	Converts a namespace to a directory .
2092	Fixes PHPCs .
2093	Check if a property exists
2094	Extracts the cardinality of an element
2095	Get property url
2096	Convert PHP type to PHP type .
2097	Get relation name
2098	Finishes the file .
2099	Flushes the buffer
2100	Adds an item to the buffer .
2101	Adds a single language item
2102	Adds a multi - language item .
2103	Returns all sitemap urls
2104	Set use gzip .
2105	Adds a sitemap .
2106	Writes the given data to the file .
2107	Writes the end of the file .
2108	Finishes the compression .
2109	Set the expiration date .
2110	Set key parameters .
2111	Set parameters for a sub - key .
2112	Get usage string
2113	Get user id
2114	Parses a user id string
2115	Check if process is running
2116	Terminate the process .
2117	Set the operation name .
2118	Handle an error line
2119	Set error code
2120	Setter for data .
2121	Returns a bad passphrase exception .
2122	Get pin id from user input
2123	Returns the hash algorithm name .
2124	Sets the sign option
2125	Sets the file can encrypt
2126	Parses a string from a string .
2127	Parses a date string into a timestamp .
2128	Delete a public key
2129	Get fingerprint of a key
2130	Encrypt data
2131	Encrypt a file
2132	Encrypt and sign a string
2133	Encrypt and sign a file
2134	Decrypt and verify a string
2135	Decrypt and verify file
2136	Sign a file
2137	Add a decrypt key
2138	Add an encrypt key
2139	Add a key to the signing list .
2140	Adds a key to the given array .
2141	Import a key .
2142	Export a key
2143	Decrypt and verify signature
2144	Prepare input data .
2145	Prepare output file .
2146	Get private keys
2147	Sends command to buffer
2148	Reset the object .
2149	Run the command .
2150	Set operation .
2151	Set pin data
2152	Returns the current version .
2153	Get process data .
2154	Set process data
2155	Closes the sub - process .
2156	Closes the agent launch process .
2157	Close a pipe .
2158	Close idleAgents .
2159	Find the path to a binary .
2160	Get the pin entry
2161	Print debug message
2162	Returns the primary key .
2163	Returns true if the key can be signed .
2164	Returns true if the key can be encrypted .
2165	Set log filename
2166	Writes data to the log file .
2167	Connect to IRC server
2168	Parses a command line .
2169	Parses user data from environment variables .
2170	Disconnect from the stream .
2171	Sets the description .
2172	Get pin data
2173	Send get info command
2174	Get encoded data .
2175	Returns a string wrapped with the given prefix
2176	Send data to stdout .
2177	Builds an array of translations .
2178	Set the comment before headers .
2179	Adds a value to an array of lines .
2180	Get all theme files .
2181	Extract strings from file
2182	Get the file comment .
2183	Set default headers .
2184	Get file data
2185	Get file data from string .
2186	Resolves the name of the callable .
2187	Checks if the given node follows the given node .
2188	Calculates the score for a file .
2189	Check if the given directory contains any matching files .
2190	Get files from a directory .
2191	Convert PO file to JSON .
2192	Build JSON files .
2193	Removes JS strings from a PO file
2194	Mark updates as successful .
2195	Marks all updates as successful .
2196	Set success by hook .
2197	Calculates the updated points .
2198	Checks all available updates .
2199	Save progress .
2200	Render the profile .
2201	Generates a unique hash from the database .
2202	Compares config with given hash .
2203	Imports a config .
2204	Imports multiple configurations .
2205	Installs specified modules .
2206	Check link for link .
2207	Check if the link is active .
2208	Redirect to home page .
2209	Get file info
2210	Get items from data .
2211	Get total count from data .
2212	Prepare string for LIKE comparison
2213	Set the data
2214	Resolves the given type .
2215	Resolves options .
2216	Returns the grid .
2217	Get the cell value .
2218	Gets a grid filter
2219	Gets the grid column operator .
2220	Check if a block exists .
2221	Walks down a SelectStatement AST
2222	Sets the source
2223	Checks if the source data is ready for export
2224	Process request data
2225	Process a mass action
2226	Process export data
2227	Process filters .
2228	Processes session data
2229	Prepare data source
2230	Set session data
2231	Returns a column by its id .
2232	Returns true if the table has a column with the given id .
2233	Sets the order of columns .
2234	Add mass action
2235	Add a tweak
2236	Get query tweaks
2237	Get a tweak
2238	Returns the tweaks for a given group .
2239	Add row action
2240	Sets query template
2241	Add export .
2242	Get the route URL .
2243	Set filters .
2244	Set limits .
2245	Get the page count .
2246	Set max results
2247	Is the title section visible?
2248	Is the filter section visible?
2249	Is the pager section visible?
2250	Set the columns to show .
2251	Hides the columns that should be hide .
2252	Get grid response
2253	Returns the raw data as an array .
2254	Get the filters from the session .
2255	Get filter by id
2256	Check if column has filter
2257	Initializes the query builder .
2258	Renders the cell .
2259	Is the page visible?
2260	Sets the order .
2261	Set column size
2262	Set data .
2263	Get the data .
2264	Set cell alignment .
2265	Get the operators .
2266	Add a column to the table .
2267	Sets the order of the columns .
2268	Add route parameters .
2269	Get route parameters .
2270	Render a row .
2271	Add a grid type .
2272	Add a new column .
2273	Sets the container .
2274	Get the response .
2275	Get grid data .
2276	Get flat grid data
2277	Set template .
2278	Returns a parameter by name .
2279	Returns the actions to render a row .
2280	Clear all items .
2281	Adds an element to the cart .
2282	Remove item by unique id
2283	Get the menu items .
2284	Log in in the user .
2285	Get the current user .
2286	Set rememberUser value
2287	Login callback .
2288	Get length of a string
2289	Extracts a substring from a string .
2290	Converts a string to lowercase .
2291	Converts a string to upper case .
2292	Builds a function mock .
2293	Registers a mock for the given deactivating
2294	Defines a function mock .
2295	Show language flag .
2296	Get country code
2297	Get the code .
2298	Get language code
2299	Get locale name
2300	Set the locale .
2301	Redirect to the home page .
2302	Redirect back to previous language
2303	Set locale .
2304	Returns the index of the elements that match the given condition .
2305	Removes the element at the given index .
2306	Take elements until the condition is true .
2307	Set authentication
2308	Set OAuth bearer token
2309	Sends a message
2310	Connect to SMTP server .
2311	Starts a TLS request
2312	Authentication method .
2313	Auth OAuth Bearer
2314	XOAuth2 Authentication
2315	Perform an RPCT
2316	Parse data
2317	Handles QUIT command
2318	Get code from SMTP server
2319	Sets the From
2320	Sets the fake from name and email address
2321	Finds the file for the given class .
2322	Finds the file for the given class .
2323	Load a collection of classes
2324	Fixes namespace declarations
2325	Writes a cache file .
2326	Returns an ordered list of classes
2327	Add multiple prefixes
2328	Add a set of fallbackDirs .
2329	Finds the file for the specified class .
2330	Parse text .
2331	Attempt to detect the block type .
2332	Parse a block .
2333	Get inline markers .
2334	Prepares inline markers .
2335	Parse inline text
2336	Parse an emph strong .
2337	Identify an HTML element .
2338	Consumes HTML content .
2339	Identifies aenced code .
2340	Identifies a header line .
2341	Consume a headline .
2342	Replace escape characters .
2343	Parse link .
2344	Parse an image .
2345	Parse inline code .
2346	Consume a line of code .
2347	Tries to identify an element from a line
2348	Render a list block
2349	Consume a quote block .
2350	Consume a reference .
2351	Render a headline
2352	Parse aStrike .
2353	Identifies a table .
2354	Consume a table block
2355	Render a table
2356	Parse url from markdown
2357	Check if the subject ID is equal to another .
2358	Creates a new DOMElement .
2359	Creates a new DOMElement with the given text .
2360	Validate images .
2361	Check for empty value
2362	Checks for invalid csv property keys .
2363	Create an exporter .
2364	Add a property value
2365	Validates the given DOMDocument against the schema .
2366	Adds a new name .
2367	Adds a summary .
2368	Adds a description .
2369	Add price .
2370	Add bonus .
2371	Set sales frequency .
2372	Sets the date added .
2373	Add sort .
2374	Validate value .
2375	Returns the contents of a hook .
2376	Set a hook .
2377	Set a hook .
2378	Remove a hook .
2379	Count the number of commits .
2380	Returns the reference bag .
2381	Get a commit by hash .
2382	Returns the tree for the given hash .
2383	Returns the blob with the given hash .
2384	Get a log instance .
2385	Get the size of the repository .
2386	Executes a git shell command .
2387	Returns the description .
2388	run command .
2389	Clones a repository to another .
2390	Returns a list of all parents .
2391	Returns a short message .
2392	Returns a list of branches in the current revision .
2393	Initializes a new repository .
2394	Check if a repository is valid .
2395	Clone a repository .
2396	Clone a branch .
2397	Clone a repository
2398	Groups the lines of the commit .
2399	Returns the lines of the file .
2400	Returns a reference by fullname .
2401	Returns a list of all branches .
2402	Returns an array of local branches .
2403	Returns an array of remote branches .
2404	Returns the content of the file .
2405	Returns the mimetype .
2406	Returns diff as array
2407	Parses a text .
2408	Write a QueryInterface instance as a string .
2409	Write column name
2410	Create columns from arguments .
2411	Create a new Column object from an array of arguments .
2412	Creates a new instance of the given table
2413	Returns the sql string
2414	Boot the Eloquent Eloquent Eloquent .
2415	Store the cache key .
2416	Get cache keys
2417	Flush cache keys .
2418	Forget the cache .
2419	Reset cache configuration .
2420	Generate cache key .
2421	Cache a query .
2422	Validate an HppRequest
2423	Validate HppResponse
2424	Set the auto settle flag .
2425	Set flag to return .
2426	Sets the card only flag .
2427	Sets the DCC enable flag .
2428	Set card storage enable
2429	Set flag for offer save card
2430	Set flag for payerExists .
2431	Set the Hpp version .
2432	Generates default values
2433	Encodes the data .
2434	Decodes the data from base64 .
2435	Encodes the data
2436	Decode base64 data
2437	Get the rules associated with the field config .
2438	Unpacks deferred results .
2439	Helper method for resolving a deferred value .
2440	Get the key from the cursor .
2441	Convert cursor to array
2442	Compiles the list node .
2443	Creates the request data
2444	Returns an array of all parsed sentences .
2445	Splits text into sentences
2446	Detect language from string
2447	Returns the language codes .
2448	Get default values
2449	Add row to cache
2450	Get cached row by id
2451	Check if an offset exists
2452	Get row by offset .
2453	Set row value
2454	Unset an offset .
2455	Get join field .
2456	Delete model from database .
2457	Get class name by name and type .
2458	Sets a configuration value .
2459	Returns the field factory .
2460	Execute a query .
2461	Executes a callable
2462	Begin a transaction .
2463	Check if data is valid .
2464	Magic isset .
2465	Edit one or more values .
2466	Delete model from database .
2467	Relate rows to other
2468	Unrelate rows .
2469	Unrelate all tables .
2470	Select from table .
2471	Returns the translated value name .
2472	The quota limits .
2473	The metric rules .
2474	The destinations of the loggers .
2475	Destination of the destinations .
2476	A list of advices .
2477	The endpoints .
2478	The logs .
2479	The metrics .
2480	Field violations .
2481	A list of running operations .
2482	The view to create .
2483	Optional . The list of permissions to include .
2484	The stage of the role .
2485	The list of customer destinations .
2486	A list of supported extensions .
2487	The list of authentication providers .
2488	Optional . The collection of objects that are allowed to be imported .
2489	Optional . The collection of fields that are available in the scan .
2490	The bounding box coordinates .
2491	The role to create .
2492	The subpages .
2493	Required . The keys of the service account .
2494	The list of recipients .
2495	Output only . The stack entries .
2496	The destinations to be created .
2497	The destinations to be created .
2498	Required . Required .
2499	A list of bindings .
2500	The metric cost .
2501	Pages .
2502	The action for the change .
2503	Source files .
2504	The list of service account keys .
2505	The list of service accounts .
2506	Required .
2507	Policy modification .
2508	Optional .
2509	Optional . Available features .
2510	The properties .
2511	The quota violations .
2512	Required . The type of the private key .
2513	Required .
2514	The details of the job .
2515	Output only . The set of bindings .
2516	Required .
2517	The roles .
2518	Parameters .
2519	Get the full path to the cache file .
2520	Checks if the cache file exists
2521	Checks if a cache file exists .
2522	Sets the contents of a cache file .
2523	Returns the contents of a cache file .
2524	Get or create a cache file .
2525	Checks if a given plugin is installed .
2526	Installs WordPress .
2527	Converts a multisite install .
2528	Installs a single site .
2529	Outputs the WordPress version .
2530	Get WordPress checksums .
2531	Updates the database .
2532	Get the download URL .
2533	Gets updates .
2534	Downloads a package .
2535	Upgrade to current version
2536	Builds HTML table
2537	Outputs the admin head .
2538	Move meta box after title .
2539	Get the post type .
2540	Get the field title .
2541	Render the meta box .
2542	Setup meta box .
2543	Get the meta data of the current class .
2544	Setup file path .
2545	Setup meta data .
2546	Check if the page is disabled .
2547	Create a new Property object
2548	Get a property by slug .
2549	Get an option value .
2550	Get post ID .
2551	Generate an HTML ID .
2552	Generate HTML name for this property .
2553	Check if the slug matches the slug .
2554	Prepare value for insertion into database .
2555	Render is allowed by rules .
2556	Set option value
2557	Set a setting
2558	Setup default properties .
2559	Setup options .
2560	Setup the slug .
2561	Setup plugin settings .
2562	Modify the form fields .
2563	Save meta data .
2564	Check if the post type is a singleton .
2565	Get a property meta value .
2566	Format a value .
2567	Get a property .
2568	Load a property value .
2569	Factory method to create a Page instance .
2570	Get a property option .
2571	Can the page render?
2572	Render the row .
2573	Render HTML for the hidden field .
2574	Render the HTML for the label .
2575	Render the row html .
2576	Render rules JSON .
2577	Get field value .
2578	Decode a property .
2579	Get post data
2580	Get pre - deep keys and value .
2581	Prepare post data .
2582	Prepare properties data .
2583	Santize data .
2584	Delete a cache entry .
2585	Returns the function to generate a function .
2586	Get a value from the provider .
2587	Update an item
2588	Recursively updates the cache .
2589	Get diff between two pages .
2590	Adds hidden meta boxes .
2591	Loads a new post .
2592	Return redirect URL
2593	Setup hook .
2594	Renames a post .
2595	Get the slug of the field .
2596	Get the source .
2597	Setup source .
2598	Setup the model .
2599	Initializes the plugin .
2600	Add CSS classes to the admin body .
2601	Render the page type .
2602	Get the current entry type .
2603	Add plugin meta tags .
2604	Update front page type .
2605	Add settings link to settings page link .
2606	Get the templates for an entry .
2607	Prepare property value .
2608	Save options .
2609	Create a custom metabox .
2610	Save post .
2611	Overwrite post data
2612	Before save callback .
2613	Save meta boxes .
2614	Save page meta data .
2615	Save post properties .
2616	Restore a page revision .
2617	Check if a given post ID is valid .
2618	Display the given rules .
2619	Filter rules by relation .
2620	Returns the slug of a rule .
2621	Prepares conditions .
2622	Check if the current user is allowed .
2623	Get body classes
2624	Returns a list of page types .
2625	Get labels .
2626	Get post type supports .
2627	Remove post type support .
2628	Remove meta boxes .
2629	Setup hook .
2630	Setup post types .
2631	Setup page templates .
2632	Add buttons .
2633	Remove buttons .
2634	Get the results from the database .
2635	Load property value .
2636	Prepare items .
2637	Prepare a property for JSON .
2638	Remove repeater rows .
2639	Render JSON template .
2640	Render the table header .
2641	Render repeater rows .
2642	Register options .
2643	Get setting value .
2644	Prepare the response .
2645	Get the value of this field .
2646	Get the list of users .
2647	Initialize the plugin .
2648	Load plugin textdomain .
2649	Require files .
2650	Deactivate the plugin .
2651	Check if this item is a string .
2652	Prepare HTML properties .
2653	Get the file associated with the given value .
2654	Get the value of the file .
2655	Update a file value .
2656	Binds a value to the container .
2657	Call a closure .
2658	Get class prefix
2659	Check if a service is a singleton .
2660	Execute a callback once .
2661	Removes an entry from the cache .
2662	Override labels .
2663	Add page menu
2664	Add post types menu
2665	Render admin view
2666	Autoloads classes
2667	Get all registered sidebars .
2668	Get post type labels .
2669	Parse arguments .
2670	Parses post type arguments .
2671	Parses term arguments .
2672	Get query arguments .
2673	Get the query result .
2674	Add help tabs .
2675	Loads a box .
2676	Call parent class
2677	Convert properties to array
2678	Get body classes .
2679	Returns an array of registered boxes .
2680	Get a property by slug
2681	Get the list of properties .
2682	Merges two boxes .
2683	Initializes the plugin .
2684	Renders a tab .
2685	Loads a link value .
2686	Convert links to array
2687	Update a link value .
2688	Check if a post is allowed
2689	Render the metabox
2690	Register a WP_Post object .
2691	Prepare response data .
2692	Setup page types .
2693	Gets format arguments .
2694	Render a view file .
2695	Get option value
2696	Convert property value
2697	Convert a condition .
2698	Get deep value .
2699	Returns the value of a condition .
2700	Checks if a value is equal to another .
2701	Checks if a value is not equal to another .
2702	Checks if the value is greater than the given value .
2703	Checks if a value is not in an array .
2704	Checks if a value is like a string
2705	Get rule between values
2706	Checks if a condition is between two values .
2707	Checks if the condition is not between .
2708	Get sort option
2709	Get sort options .
2710	Get posts .
2711	Sort values .
2712	Update a value .
2713	Get the meta type value .
2714	Lists all available people .
2715	Render the tabs .
2716	Get JSON ID .
2717	Get settings .
2718	Load property value .
2719	Prepare layout properties .
2720	Render the layout input .
2721	Render repeater row .
2722	Add form fields .
2723	Prepare taxonomy types
2724	Setup taxonomies hooks .
2725	Render ajax url .
2726	Handle PAPI AJAX requests .
2727	Get the entry type .
2728	Get posts .
2729	Get property HTML .
2730	Get properties .
2731	Get rule result
2732	Get shortcode .
2733	Get terms .
2734	Gets a term .
2735	Renames a term .
2736	Manage column posts .
2737	Handle custom post type posts .
2738	Add sortable columns .
2739	Modify the query .
2740	Restrict page types .
2741	Format value .
2742	Get a list of all available taxonomy labels .
2743	Get terms .
2744	Get the value of a term .
2745	Prepare filter value .
2746	Perform a search .
2747	Returns historical data for a given price .
2748	Returns the quote for the given currency
2749	Returns the exchange rate .
2750	Returns exchange rates .
2751	Fetches the quotes for the given symbol .
2752	Get attributes for sorting header .
2753	Renders a row .
2754	Render the appends .
2755	Get all images
2756	Set request parameters
2757	Set default values
2758	Get the value of the given parameter .
2759	Make a group .
2760	Wrap content with errors .
2761	Wraps a group .
2762	Adds CSS class to options array .
2763	Register admin routes .
2764	Register assets routes .
2765	Register auth routes .
2766	Adds a process to the graph .
2767	Get processes by status
2768	Builds out process tree
2769	Optimize processes according to the given strategy .
2770	Get count of statuses .
2771	Counts results .
2772	Returns an array of failed processes .
2773	Get the dependencies for a given class
2774	Outputs the given output .
2775	Outputs an error .
2776	Initializes the console command .
2777	Get application version
2778	Returns the URL of the file .
2779	Downloads the file .
2780	Selects by partial text .
2781	Save legacy data
2782	Save data .
2783	Loads a legacy model .
2784	Loads a legacy object from a file
2785	Is the socket accessible?
2786	is Selenium Server
2787	Returns the cloud service .
2788	Try to guess the port for the given host and scheme .
2789	Detect cloud service by status .
2790	Build process .
2791	Returns the excluded groups .
2792	Take a webdriver test .
2793	Get the URL of the artifact .
2794	Instantiate all listeners in the given directory .
2795	Get file path
2796	Quotes an XPath attribute .
2797	Optimizes the maximum distance of an OutTree .
2798	Casts a value to a guessed data type
2799	Checks the process timeout .
2800	Resolve the result .
2801	Get the list of available executors .
2802	Setup the desired capabilities .
2803	Set custom configuration options
2804	Retrieve configuration values .
2805	Dequeued processes without delay .
2806	Flushes the output of the process .
2807	Return a list of items that have a given type .
2808	Count scenario summary
2809	Update summary table
2810	Move summary table .
2811	Update buttons in scenario .
2812	Add a favorite to a user .
2813	Remove a user s favorites .
2814	Toggle a user s favorite .
2815	Check if the given user is favorites .
2816	favorited by the user .
2817	Get the permissions for the current user .
2818	Insert model into language files .
2819	Create the view files .
2820	Create migration .
2821	Create events .
2822	Generate a stub file .
2823	Get stub path
2824	Check namespace .
2825	Check table exists
2826	Connect to one random redis server
2827	enable redis
2828	Connect to one Redis server
2829	Set Redis on one key server
2830	Calls a Redis command
2831	sets the current database
2832	Delete key from cache
2833	Set an item in the cache
2834	Check if a key exists
2835	Returns the type of a key
2836	expire key
2837	Removes all keys from the cache
2838	Execute all todo
2839	Get database size
2840	Add a function to execute
2841	Dispatch event .
2842	Add timing .
2843	Replace the placeholders in the config .
2844	Merge the tags .
2845	Dispatches the memory usage .
2846	Dispatch request time .
2847	Create a new event from a console event .
2848	Parse SRID
2849	Parse geometry .
2850	Parse point value
2851	Match coordinate value
2852	Parse point list
2853	Parse point lists
2854	Parse multi polygon .
2855	Parse geometry collection .
2856	Matches a token .
2857	Handle a syntax error .
2858	Creates an array of ResponseParts
2859	Get request time
2860	Create the PhantomJS API client
2861	Sends a command to the API
2862	Returns the redirect URL
2863	Check options for render
2864	Renders a view
2865	Render image as base64
2866	Finds by method .
2867	Finds documents within a given selector .
2868	Set an attribute on an element .
2869	Key event handler
2870	Selects an option for an element .
2871	Enable debug mode
2872	Set proxy
2873	Get the network traffic
2874	Get all cookies
2875	Set a cookie .
2876	Returns an array of javascript errors
2877	Gets the error message .
2878	Compiles a node .
2879	Compile routeVariable node
2880	Creates a new Trie node .
2881	Flushes text buffer .
2882	Reads a number .
2883	Lex a punctuation token .
2884	Lexes a quoted string .
2885	Lexs a single character .
2886	Lexes a variable name .
2887	Adds a Route .
2888	Get named route .
2889	Create a new trie
2890	Normalizes a route name .
2891	Checks if the current token is of the given type .
2892	Returns the current token .
2893	Returns the next token .
2894	If the current token matches the given type .
2895	Returns the next token .
2896	Add a child node .
2897	Add a child node
2898	Returns all children .
2899	Add literal child node
2900	Add variable child node .
2901	Builds all routes .
2902	Adds a route group .
2903	Registers a route with the given HTTP methods .
2904	Apply the group attributes to the route builder .
2905	Apply group constraints .
2906	Apply middleware bindings to the route builder .
2907	Apply group route templates
2908	Registers the rule factories .
2909	Recursively find match candidates .
2910	Build route .
2911	sets the route for the given controller and method
2912	Add an attribute with the given name .
2913	Add attributes .
2914	Add many constraints .
2915	Add many middleware .
2916	Add middleware .
2917	Parse punctuation .
2918	Parse text node
2919	Parse the given tokens .
2920	Parse a variable
2921	Parses a variable rule .
2922	Check if the given segment is a match .
2923	Group routes .
2924	Adds a route to the router .
2925	Dispatches the request
2926	Compares method .
2927	Compares domain .
2928	Compare uri with route uri
2929	Runs the given route .
2930	Arrange method parameters .
2931	Parse route regex .
2932	Returns a regex for a parameter .
2933	Adds a route for any route .
2934	Defines a route parameter .
2935	Returns the url for the given route .
2936	Prepares the request
2937	Builds the URI
2938	Validate response .
2939	Validate response .
2940	Validate API response .
2941	Get a provider by name .
2942	Ensures the HTTP headers are not modified .
2943	Get user details
2944	Format details object .
2945	Get information about an IP address .
2946	Add element to element queue
2947	Remove elements from the queue
2948	Make a POST request to the API
2949	Returns HTML error message .
2950	Registers a route group .
2951	Parse path .
2952	Check if a string is a variable route .
2953	Add variable to the cache control
2954	Sets the route map
2955	Returns redirect URL
2956	check middleware
2957	Runs a controller
2958	Initialize database connection
2959	Set HTTP headers .
2960	Get HTTP header value
2961	Get last inserted row
2962	Get DI parameters
2963	create a singleton instance
2964	Get a singleton instance
2965	Register an abstract
2966	Get an instance of a class
2967	Get an instance of a class
2968	run method of class
2969	Run the application .
2970	Initialize the database
2971	Add pipe .
2972	Initialize Redis .
2973	Subscribe to multiple channels .
2974	Subscribe to multiple channels .
2975	Reset the query
2976	Wrap the prepare SQL
2977	Execute the query
2978	Bind parameters to prepared statement
2979	Wraps a table name with prefix
2980	Wrap a row .
2981	Construct a condition object
2982	Stores the build attributes .
2983	Re - store build attributes .
2984	Execute a sub - builder .
2985	Specify columns to select
2986	Set a where condition
2987	Adds a WHERE condition to the query .
2988	Where in
2989	Where BETWEEN
2990	Where condition
2991	Adds a WHERE condition to the query
2992	Where Exists
2993	Where in condition
2994	Sets the GROUP BY clause
2995	Adds a HAVING condition to the query .
2996	Adds a HAVING condition to the query .
2997	Sets the order by clause
2998	Joins a table
2999	Create a FROM clause
3000	Paginate results
3001	Executes the query and returns all rows .
3002	Executes the query and returns the first row
3003	Returns a list of all values of a field
3004	Executes a SQL query .
3005	Prepares a SQL statement
3006	Begin a transaction .
3007	Handle an exception
3008	Generate an id .
3009	Generate a formated id .
3010	Generate random string
3011	Normalizes DSN .
3012	Create a new DQL object
3013	Executes the given expression
3014	Begin a transaction
3015	Commits a transaction
3016	Rollback a transaction
3017	Returns last inserted ID .
3018	Reset all arguments .
3019	Consume an SQL code
3020	Escape soft - escaped characters .
3021	Render expression
3022	Get query string
3023	Executes the query and returns all results .
3024	Get one row from the result set
3025	Returns the first row of the result set
3026	Specify one or multiple tables
3027	Where clause .
3028	Render a condition
3029	Add a group to the query .
3030	Set field value .
3031	Add an option to select
3032	Set order .
3033	Set template mode .
3034	Overrides the limit method
3035	Parse a string
3036	Fetch matches regex
3037	Builds the error message .
3038	Check if a string starts with a given line .
3039	Fetch variables matching the given value .
3040	Returns true if the variable has a parameter expansion .
3041	Fetch the expansion of a variable .
3042	Fetch the symbol for the given variable name and type .
3043	Splits the variable default
3044	Parse a variable parameter .
3045	Parse a default parameter .
3046	Check if a variable exists
3047	Get a variable
3048	Parse a key .
3049	Parse content .
3050	Parse raw content
3051	Parse a CSV line .
3052	Parse an export line
3053	Parse key - value pair
3054	Returns the content of the lines .
3055	Start a task .
3056	Start a workflow
3057	Returns the workflow with the given ID .
3058	Get timestamp from buffer .
3059	Get class properties
3060	Configure the sitemap .
3061	Fix sitemap configuration
3062	Add a source .
3063	Handle block event
3064	Returns the root menu .
3065	Get all available fonts .
3066	Get icon map
3067	Returns CSS for fonts .
3068	Hash and encrypt a password
3069	Upgrade from version1 .
3070	Execute the command
3071	Print SMKE credentials .
3072	Get config array
3073	Check if the current URI is filtered .
3074	Register commands .
3075	Find all templates .
3076	Find all views in a bundle .
3077	Execute a command .
3078	Returns a new string between two characters
3079	Sanitizes a string
3080	Replaces the first occurrence of the string in the string .
3081	Replace the last occurrence of the string with the given substring .
3082	Converts this string to a possessive .
3083	Returns a new string segment
3084	Returns whether the collection contains a given value .
3085	Generate hash string
3086	Decrypts the response
3087	Encrypts a plain text
3088	Decrypts a text
3089	Encrypts the hash .
3090	Decrypt the hash of the response .
3091	Encrypts the hash .
3092	Add range .
3093	Add a new modifier
3094	Add a range of pages .
3095	Add raw source .
3096	Adds a file .
3097	Add files .
3098	Unserializes a Linked CRS from an array .
3099	Set optional arguments
3100	Creates an exception for a given value .
3101	Creates an exception for an invalid property .
3102	Unserializes a named CRS object from an array .
3103	Get the config path .
3104	Get application namespace .
3105	Responds with configuration .
3106	Create a new master node
3107	Get the native balance of this asset .
3108	Get the balance of native balance .
3109	Get the balance value for an asset .
3110	Get the balance for an asset .
3111	Returns the balance of a custom asset
3112	Converts entropy bytes to hex string
3113	Converts a bit string into hexadecimal string
3114	Converts a MNemonic to its entropy .
3115	Authorize a trustline .
3116	Revokes a trustline .
3117	Get the XDR representation of this Address .
3118	Generates a opaque variable .
3119	Build an optional value .
3120	Get unique bucket hashes
3121	Check if account exists
3122	Sets the authentication required .
3123	Set auth revocation
3124	Get the public key checksum .
3125	Decodes an opaque - frame as a string .
3126	Parse raw data
3127	Sign the transaction
3128	Submits a transaction
3129	Creates a patch object from a text string .
3130	Convert patches to text .
3131	Add the context to the given patch .
3132	Deep copy of patches
3133	Get BitAP score
3134	Convert pattern to alphabet
3135	Get diff as html
3136	Returns the delta of the diff .
3137	Extract diffs from a delta string .
3138	Returns the levenshtein distance .
3139	Compute the difference between two strings .
3140	Compute diff between two lines
3141	Inits the difference between two lines .
3142	Find common prefix
3143	Find common suffix
3144	Finds overlap between two strings .
3145	Performs a partial match .
3146	Does the best match at the given index .
3147	Converts two lines to chunks
3148	Get the recipients .
3149	Get Laravel version .
3150	Register Pug compiler .
3151	Get plugin config .
3152	Initialize the instance .
3153	Gets Pug .
3154	Get the cache path .
3155	Get an option value .
3156	Checks if the cache is expired .
3157	Extracts the path .
3158	Returns the amocrm client .
3159	Get B2B family
3160	Generate hash string
3161	Resolves a file .
3162	Render a file .
3163	Get extension options .
3164	Remove options from the renderer
3165	Reset all options .
3166	Returns a renderer instance .
3167	Add filter .
3168	Add keyword .
3169	Returns a textual representation of the cache directory .
3170	Runs the facade .
3171	Get the available methods .
3172	List available methods .
3173	Answers an array of errors for the editor .
3174	Returns a list of available meta tags
3175	Marks a list as duplicated
3176	Finds all duplicates that are duplicated
3177	Remove empty attributes from the list
3178	Processes a single record
3179	Authorize all releases .
3180	Returns the elapsed time .
3181	Read from all commands
3182	Converts an array of arguments to a string .
3183	Get and validate arguments
3184	Throws exception if command is not supported .
3185	Registers the autoloader .
3186	Unregister the autoloader
3187	Get rediska path
3188	Returns the connections for the given key name .
3189	Get a connection by its name .
3190	Get the channels by connection
3191	Gets named configuration value
3192	Sets a configuration value
3193	Throw exception if not supported .
3194	Creates a new queue
3195	Delete a queue
3196	Get the number of items in a queue
3197	Sends a message to the queue
3198	Receive messages from redisk
3199	Deletes a message
3200	Get the total elapsed time
3201	Sets a value to the hash
3202	Sets a value
3203	Increment field value
3204	Remove field from database
3205	Writes data to the cache .
3206	Subscribe to one or more channels .
3207	Publishes a message
3208	Add a message to the buffer .
3209	Throw exception if not supported
3210	Catch unserialization notice .
3211	Add a queue
3212	Remove a queue by name
3213	Get queues cache .
3214	Watches one or more keys .
3215	Unwatch events .
3216	Add a command to the Redisk
3217	Create a new post
3218	List posts
3219	Factory method .
3220	Add a value to the set
3221	Get length of set
3222	Get objects by score
3223	Removes documents by score
3224	Increments the score for a given value .
3225	Get set by rank
3226	Removes from the set by rank .
3227	Returns the rank of a given value
3228	Convenience function for union sets
3229	Intersect two sets
3230	Returns an array of results as an array
3231	Set data from array
3232	Sets the resource name
3233	Get connection by key
3234	Returns the connections .
3235	Sets the connection associated with this connection
3236	Subscribe to a topic .
3237	Get Rediska config
3238	Set key distributor
3239	Returns the serializer
3240	Returns a command instance .
3241	Get command lowercase
3242	Execute all commands .
3243	Add a command to the pipeline
3244	Writes the command to the connection .
3245	Sets the response callback
3246	Transforms a multi - bulk command .
3247	Append a value to the list
3248	Prepends a value to the list
3249	Truncates the list
3250	Set key value
3251	Inserts a value after a given value
3252	Inserts a value before another list
3253	Inserts a value to a list
3254	Remove a value from the cache
3255	Remove item from list
3256	Shift an item off the list
3257	Remove a key from the list
3258	Pop item from list
3259	Store items from array
3260	Loads a document by id
3261	Save data to Redis
3262	Remove a set of tags
3263	Removes items from the cache
3264	Set cache directives
3265	Returns an array of set IDs not matching tags
3266	Returns the metadata of the given id .
3267	Collect expired tags
3268	Add a value to the set
3269	Remove a value from the cache
3270	Moves a key to another set
3271	Intersect with another set
3272	Combines this set with another set
3273	Compare two sets
3274	Returns Rediska instance
3275	Set the value of the key
3276	Set value and expire
3277	Sets a bit
3278	Get or set key value
3279	renders a list of users
3280	Displays a user s following action
3281	Follow a user
3282	Move object to database
3283	Set expiration time
3284	Get Rediska instance
3285	Sets the stream mode .
3286	Add a rediska
3287	Get all instances .
3288	Returns an instance of Rediska .
3289	Increment the value of the specified subject .
3290	Resets the cache
3291	Get bucket name .
3292	Set multi - increment transaction part
3293	Get the get count part of a bucket
3294	Creates a socket connection .
3295	Returns the read buffer .
3296	Read data from Redis .
3297	Reads a line from the Redis server .
3298	Sets the read timeout
3299	Returns the stream context .
3300	Reads data from the socket .
3301	Validate a nonce .
3302	Declares and binds a queue
3303	Ack message .
3304	Notify a message
3305	Get message properties
3306	Starts the daemon .
3307	Close the daemon .
3308	Builds a new exception .
3309	Builds the queue handler
3310	Handle sync message .
3311	Get an instance of the given connection
3312	Rejects a message .
3313	Close connection .
3314	Consume a message .
3315	Replace the model name .
3316	Qualify a class name .
3317	Process request .
3318	Create a new row .
3319	Convert array to json response
3320	Update an existing record .
3321	Remove a record .
3322	Vote on attribute
3323	Renders a document .
3324	Reads a string from the buffer .
3325	Get all achievements for a given game .
3326	Closes the socket .
3327	Receives a packet from the socket .
3328	Sends a data packet
3329	Get reply from master query
3330	Executes a command on the server .
3331	Returns the challenge number
3332	Send a RCON command
3333	Connect to the socket .
3334	Get the list of servers in a region .
3335	Fetches the schema from the database .
3336	Converts a Community ID to Steam ID .
3337	Convert SteamID to Community ID
3338	Resolves a user s SteamID URL
3339	Get user s friends .
3340	Fetches the games of this player .
3341	Gets the groups of this user .
3342	Get the Steam ID of the user .
3343	Get the most recent playtime for an app
3344	Get the total playtime for an application
3345	Fetches the profile data from the API .
3346	Rotate the IP address
3347	Initializes the socket .
3348	Authenticates the server with the given password .
3349	Connect to UDP .
3350	Creates a new instance of the specified class .
3351	Get an instance from the cache .
3352	Check if given id is cached .
3353	Create the cache .
3354	Get cache ids .
3355	Initializes the socket .
3356	Authenticates the connection .
3357	Close the socket .
3358	Receives data from the socket .
3359	Selects resources from the socket .
3360	Send data to socket .
3361	Get news for an app
3362	Returns an array of equipped classes .
3363	Get number of members in the group .
3364	Get members .
3365	Fetch the members of the group .
3366	Internal fetch function .
3367	Get item schema .
3368	Fetch the items from the database .
3369	Returns a list of bots equipped .
3370	Gets an array of all golden guards
3371	Set the API key
3372	Queries the Steam API .
3373	Send a SteamSocket packet
3374	Get the players hash .
3375	Handles the response for a given request type
3376	Update the ping counter
3377	Update the players information .
3378	Add information about this player .
3379	Get leaderboard by id
3380	Get leaderboards
3381	Loads the leaderboards for the given game .
3382	Get the game leaderboard for the given steam id .
3383	Get range of leaderboards
3384	Load data from SteamCondenser
3385	Loads the data for the given steam id .
3386	Parse the leaderboard entry .
3387	Creates a new SteamGame instance .
3388	Checks if an app is up to date .
3389	Gets the number of current players in the application .
3390	Get the stats for a user .
3391	Displays a work order
3392	Store a newly created event .
3393	Display the specified event .
3394	Update the specified event .
3395	Remove the specified event .
3396	Displays the work order .
3397	Display a form to edit an existing work order .
3398	Update an existing WorkOrder .
3399	Get take .
3400	Take parts of an item .
3401	Get put item .
3402	Put Parts to the inventory .
3403	Display the specified work request .
3404	Show the form for editing the work request .
3405	Update the specified work request .
3406	Remove the specified work request .
3407	Location scope .
3408	Store a new report .
3409	Display a form for creating a work order .
3410	Store work order .
3411	Display the specified work order .
3412	Display a form to edit an existing work order .
3413	Update an existing Attachment .
3414	Destroy an attachment .
3415	Return a form to create a report .
3416	Answers the icon for the notification type .
3417	Display a list of Stock Moves .
3418	Display the movement .
3419	Rollback an item .
3420	Get revision status .
3421	Get revised priority .
3422	Close all pending sessions .
3423	Returns true if the user is logged in .
3424	Get started time label
3425	Returns the completed at label
3426	Mark the job as completed .
3427	Renders the status table .
3428	Show status form .
3429	Display a listing of the priorities .
3430	Create a store request .
3431	Edit an existing priority
3432	Update a priority .
3433	Scope by stock .
3434	Scope by SKU
3435	Get current stock value
3436	Get the Revised metric attribute .
3437	Extract operator from string
3438	Sort by field .
3439	Get full path .
3440	Index action .
3441	Store a new status .
3442	Display a form to edit an existing status .
3443	Update status .
3444	Display a form to create a new item .
3445	Store a new item in the inventory .
3446	Display a form to create a report .
3447	Store a work order .
3448	Table with work orders .
3449	Table of work orders .
3450	Displays the sessions for the given table .
3451	Show a form to create a WorkOrder .
3452	Render comment form .
3453	Handle uploaded files .
3454	Table with asset .
3455	Return a form for an asset .
3456	Render a table for inventory items .
3457	Show stock data .
3458	Show the inventory form .
3459	The inventory sidebar .
3460	Store the uploaded files .
3461	Update an existing WorkOrder .
3462	Table view table .
3463	Renders a history table .
3464	Store the specified image in storage .
3465	Display the specified image .
3466	Update the specified image in storage .
3467	Display a listing of metrics .
3468	Store a new metric .
3469	Display an existing metric
3470	Display assets .
3471	Store a newly created asset .
3472	Display an existing asset
3473	Update the specified asset .
3474	Scope id .
3475	Return the response .
3476	Retrieve an input value
3477	Get select hierarchy .
3478	Get rendered node options
3479	Boot the views .
3480	Delete the attachment .
3481	Display a listing of stock
3482	Show stock form
3483	Store an item .
3484	Display a stock
3485	Edit an existing stock
3486	Update an existing stock .
3487	Destroy an item .
3488	Display the specified asset .
3489	Show a new metric .
3490	Store a newly created meter in storage .
3491	Display a specific meter .
3492	Edit an asset .
3493	Update the specified meter in storage .
3494	Remove the specified meter from the asset .
3495	Store a work order .
3496	Update the specified work order .
3497	Format started_at .
3498	Get completed_at .
3499	List all work orders .
3500	Form to create a comment .
3501	Get hours ago
3502	Format event start date
3503	Format event end date
3504	Format event end time
3505	Format the event frequency
3506	Returns the frequency of the event
3507	Get the frequency of the recurring event
3508	View tags .
3509	Store a new inventory stock .
3510	Update an existing stock .
3511	Remove the specified stock .
3512	Table of work orders .
3513	Form for creating an attachment .
3514	Attempt to authenticate the user .
3515	Handle the authenticated user .
3516	Handle the LDAP user .
3517	Called when a inventory item is deleted .
3518	Handle restoring events .
3519	Generates a table with the priorities .
3520	Return a form for a priority .
3521	Render a table for a work order .
3522	Form to create a take action .
3523	Form to create a stock .
3524	Remove the specified inventory item .
3525	Create a new flash message .
3526	Create a new work order .
3527	Store a new work order .
3528	Display a list of events .
3529	Store a newly created event .
3530	Display eventable .
3531	Update the specified event .
3532	Destroy the specified resource .
3533	Category scope .
3534	Show the form for the user .
3535	Store the specified asset .
3536	Display the specified manual .
3537	Update the specified asset .
3538	Store a work order .
3539	Detach work order .
3540	Store a new work request in storage .
3541	Remove the specified work request .
3542	Display a listing of stock
3543	Display the take action
3544	Process a part of an item .
3545	Displays the update form
3546	Processes a Partition .
3547	Display the index page .
3548	Display the form for editing the work request .
3549	Handle an update request .
3550	Show category create form .
3551	Store a newly created Category in storage .
3552	Show the form for editing the specified category .
3553	Update the specified Category in storage .
3554	Destroy the specified resource .
3555	Table of work orders .
3556	Table of work orders .
3557	Action when a Stock is deleted .
3558	When restoring items are deleted .
3559	Display the inventory .
3560	Store a new item .
3561	Displays an inventory item
3562	Edit an item
3563	Render inventory .
3564	Renders a table for inventory stock .
3565	Form for inventory stock .
3566	The inventory stock bar .
3567	Table of work orders .
3568	Table of inventory .
3569	Show the navbar of work orders .
3570	Display a listing of work orders .
3571	Start a work order .
3572	End a work order .
3573	Get the change attribute .
3574	Store a newly created note .
3575	Display a note .
3576	Update the specified note .
3577	Remove the specified note .
3578	Get the last movement attribute .
3579	Get last movement by attribute .
3580	Get quantity metric .
3581	Bulk put - back for item .
3582	Bulk update button .
3583	End a work order .
3584	Table of work requests .
3585	Form for creating a WorkRequest .
3586	Store a worked order .
3587	Remove the worker from the work order .
3588	Render datalist .
3589	Displays a placeholder option .
3590	Get the appended page .
3591	Render a component .
3592	Get component data .
3593	Register blade directives .
3594	Create model .
3595	Format the label .
3596	Return a reset input .
3597	Create a submit input .
3598	Get request parameter
3599	Returns a link with an asset .
3600	Create link .
3601	Render a listing element .
3602	Create HTML attributes .
3603	Register the html builder .
3604	Register the form builder .
3605	Create a search input .
3606	Create a datetime input .
3607	Create a file input field .
3608	Remove the first line from the XML string .
3609	Loads locale from file .
3610	Parses the given locale .
3611	Get all patterns for a given word
3612	Unify locale .
3613	Tokenize a string
3614	Tokenize the input .
3615	Set options
3616	Add a new dictionary
3617	Returns hyphenation patterns for given word
3618	Sets the filters .
3619	Add a filter
3620	Set tokenizers
3621	Add tokenizer
3622	Creates a new Hyphenator instance based on a file .
3623	Get text
3624	Get pattern
3625	Set options .
3626	Get Hyphenator options .
3627	Add a dictionary
3628	Add a filter
3629	Add tokenizer
3630	Returns tokenizers .
3631	Get the dictionary
3632	Get filters .
3633	Hyphenates the given string .
3634	Get hyphenation pattern
3635	Returns pattern for given token .
3636	Set the default home path
3637	Get the default home path .
3638	Set home path
3639	Returns a new Hyphenator instance .
3640	Autoload class
3641	Replaces an existing token
3642	Returns the token with the given key .
3643	Gets the merged pattern
3644	Get a filter by key
3645	Filter tokens .
3646	Fetches a new access token .
3647	Migrate orders .
3648	Migrate order .
3649	Migrate shipping values .
3650	Migrate order calculation
3651	Return an array of ids that have been used for each product
3652	Check if there is a default page for default pages .
3653	Create a new payment
3654	Get gateway data
3655	Creates a payment for the given gateway
3656	Completes the order
3657	Determine if the order can be placed .
3658	Returns the localized name of the country
3659	Sets the payment method
3660	Returns selected payment method
3661	Send confirmation email
3662	Send an admin notification
3663	Send an email to cancel the order
3664	Builds the URL for the given action and parameters .
3665	Redirects to the current page .
3666	Handles the index page .
3667	Display the debug page
3668	Answers the filter string for this object .
3669	Save the submitted form
3670	Save the account details
3671	Get a modifier for the current order
3672	Get the unit price
3673	Calculate the total of the item
3674	Return an array of unique data .
3675	Calculate the total amount of the item
3676	Get the product variant .
3677	Returns a string representation of the address
3678	Returns the associated address .
3679	Get the cart form .
3680	Get the value of the cost
3681	Get the weight of the item .
3682	Get the sum of a field
3683	Get the subtotal of the collection
3684	Prepare the product attributes
3685	Get the viewer for the given action .
3686	Get the current product .
3687	Updates the template fields
3688	Get a variant by its attributes
3689	Generate variations for a given attribute type
3690	Deletes all versions of this object
3691	Get a component by its type .
3692	Answers a form field list for the receiver .
3693	Validate the given data .
3694	Returns the data for this component
3695	Sets the data to this component .
3696	Get the dependencies for a given component
3697	Get current order .
3698	Set current order
3699	Find or create an order
3700	Adds a Buyable to the order
3701	Removes an item from the current order .
3702	Removes an order item from the current order .
3703	Set the quantity of a Buyable .
3704	Update the quantity of an order item .
3705	Find or create an item .
3706	Get an item for the given Buyable
3707	Archive the current order id .
3708	Return the value of the order
3709	Format price for display .
3710	Find image by filename
3711	Set the content of the document
3712	Answers an array of allowed countries .
3713	Returns the country name
3714	Get country name
3715	Get the current shopping cart .
3716	Convert an array of values to a value list
3717	Returns a dropdown field
3718	Returns a list of products that are visible to this category
3719	Returns an array of all child categories .
3720	Get product categories
3721	Answers the groups menu for the product category .
3722	Return a nested menu title .
3723	Return the form to edit an item
3724	Display an invoice
3725	Returns the next step
3726	Answers the list of available orders .
3727	Gets a form to edit an order
3728	Returns a subset of the given fields .
3729	Modify the amount of the item
3730	Setup steps .
3731	Redirects the current page to the current step
3732	Returns true if the given action is the current step .
3733	Returns the position of the action in the pipeline .
3734	Find a link to the current page .
3735	Gets a list of products
3736	Trims the amount of cents .
3737	Gets the fields used by the plugin .
3738	Answers an array of options for the category .
3739	Get category options without parent
3740	Answers an array of category IDs .
3741	Get the selling price .
3742	Returns the product image
3743	Submits the payment
3744	Processes the form
3745	Cancel an order
3746	Gets the CC fields for the card .
3747	Adds an order to the session .
3748	Get the order history .
3749	Get order by id
3750	Get the order actions form .
3751	Validate member data
3752	Get a member by unique identifier .
3753	After the user is logged in .
3754	Get the past orders that this member belongs to
3755	Generates a hidden field for the quantity_link
3756	Get existing address fields
3757	Generate the fields for the order
3758	Get the default search context
3759	Answers a list of related components .
3760	Calculates the order total
3761	Returns the Modifier for the given class name .
3762	Get the total paid amount
3763	Get the link to the order
3764	Determine if the payment can be paid
3765	Determine if this record can be deleted .
3766	Can the user view this page?
3767	Answers the user s name .
3768	Answers the billing address for the shipping address .
3769	Generate a unique reference for the order
3770	Before writing
3771	Deletes all related items
3772	Provide entity translation
3773	Renders the field
3774	Return a list of editable items
3775	Find the account link .
3776	Get the URL for an order .
3777	Browse all available packages .
3778	Lists all installed packages .
3779	Gets the path to a package .
3780	Update packages .
3781	Uninstall a package .
3782	Get Composer instance .
3783	Get all installed packages .
3784	Get the Composer repository .
3785	Generates a list of packages .
3786	Gets a package by its short name .
3787	Get list of installed packages .
3788	Get installed package by name .
3789	Get package name and version .
3790	Get the path to the composer . json file .
3791	Create the default composer . json file .
3792	Get the raw git version .
3793	Guesses the version constraint from a tag .
3794	Get the contents of composer . json .
3795	Sets the object
3796	Load custom config
3797	Removes all jobs from the queue .
3798	Processes the queued jobs .
3799	Queue a job .
3800	Copies a job to the Descriptor .
3801	Get the next queued job .
3802	Check health of jobs .
3803	Check default jobs
3804	Restart a stale job
3805	Initialise a job
3806	Returns true if the time limit has been reached .
3807	Check if the memory is too high .
3808	Parses a memory value
3809	Get a filter for a job list .
3810	Run a specific queue
3811	Processes a job queue
3812	Queue a task
3813	Logs the status of the given descriptor .
3814	List jobs
3815	Refresh the descriptor for this job
3816	Check if all jobs are healthy
3817	Pause the queue .
3818	Resumes this job
3819	Activate the job on the queue
3820	Get the path to the job cache directory
3821	Cleanup the job .
3822	Answers the saved job messages .
3823	Get the last saved job
3824	Answers the string representation of the job type .
3825	Answers an array of values for the type field .
3826	Initializes the site .
3827	Prepare the page to be processed .
3828	Complete the sitemap
3829	Starts a job queue
3830	Handle action .
3831	Get the title of the page
3832	Sets up the tree
3833	Processes the page
3834	Get the queue value .
3835	Casts an ActiveRecord
3836	Index action .
3837	Saves the CSS map
3838	Write data to shared memory
3839	Read data from shared memory
3840	Lists all sidebars .
3841	Lists all Widgets .
3842	Adds a widget .
3843	Updates a widget s options .
3844	Moves a widget .
3845	Deactivates a widget .
3846	Deletes a widget .
3847	Resets sidebars .
3848	Validate sidebar ID .
3849	Check if a widget exists .
3850	Get the widget data .
3851	Moves a sidebar widget .
3852	Get a single widget
3853	Sanitize widget options
3854	Generate a random integer .
3855	Get random string
3856	Encode a string
3857	Decode a string
3858	Add a generator path
3859	Remove a generator path .
3860	Get generator .
3861	Load all available generators .
3862	Show element as row
3863	Read only .
3864	Open a form .
3865	Add a prefix .
3866	Add suffix .
3867	Assemble addons .
3868	Sets the size .
3869	Unscribes a message from the session .
3870	Client temperature F
3871	Get all nodes of the given session .
3872	Get the properties of a session
3873	Evaluate template path
3874	Writes an array of keys to the cache .
3875	Get the browser type
3876	Returns the aperture .
3877	Returns the author .
3878	Returns the header .
3879	Returns the credit amount .
3880	Returns the Source
3881	Returns the job title
3882	Returns the country ISO
3883	Returns the focus distance .
3884	Returns the width of the terminal .
3885	Returns the height of the frame .
3886	Returns the title .
3887	Returns the caption .
3888	Returns the copyright .
3889	Returns keywords .
3890	Returns the camera name
3891	Returns the horizontal resolution .
3892	Returns the vertical resolution .
3893	Returns the software of the device .
3894	Returns the length of the image .
3895	Returns the creation date .
3896	Returns the current color space .
3897	Returns the MIME type .
3898	Returns the file size in bytes .
3899	Returns the orientation .
3900	Returns the system s GPS value
3901	Extracts the GS coordinate from the given components .
3902	Set the path to the tool file .
3903	Get tool path
3904	Execute cli command
3905	Hydrate an object
3906	Extracts the GPS coordinates from the given coordinates .
3907	Gets the mapper instance .
3908	Gets hydrator .
3909	Set options .
3910	Add required section
3911	get the data of an image
3912	Create a new adapter
3913	Generates table prefix
3914	Normalizes the configuration .
3915	Translates a list of strings .
3916	Starts a new build job
3917	Process the URLs that should be processed
3918	Collects the changes to the target site .
3919	Process the changes to the queue .
3920	Collects module extensions garbage .
3921	Returns extensions by module
3922	Returns module blocks
3923	Returns module settings
3924	Checks if metadata version is supported .
3925	Checks if a php file exists .
3926	Check module version
3927	Check extended classes .
3928	Check template blocks
3929	Check module settings
3930	Check module templates
3931	Checks if the module is valid .
3932	Check module files
3933	Check module events
3934	Parse module ids
3935	Parse shop configs
3936	Returns module ids
3937	Check if module is enabled .
3938	Returns module object
3939	Returns module cache
3940	Returns module installer object
3941	Fix a module
3942	Clean module extensions .
3943	Adds module templates files
3944	Adds module files
3945	Adds module events
3946	Adds module extensions
3947	Add module version
3948	Returns the difference between two arrays .
3949	Adds module settings
3950	Set module controllers
3951	Adds extensions to given module
3952	Returns list of installed modules
3953	Returns template string .
3954	Block active template block
3955	Returns an instance of the Http driver .
3956	Returns the first available http transport driver .
3957	Returns a list of available HTTP transports .
3958	Set the CA path and file path to the curl resource .
3959	Get response object
3960	Check if PHP is allowed allowed
3961	Make an OPTIONS request .
3962	Make a HEAD request .
3963	Make a TRACE request .
3964	Make a PATCH request .
3965	Returns true if the given path matches the given glob expression .
3966	Get extra parameter value by key .
3967	Combines the given list of glob expressions into an array .
3968	Activate the plugin .
3969	Returns true if the given path matches any of the given glob expressions .
3970	Checks if a given path matches a glob expression .
3971	Get shop source path .
3972	Creates the installer for the given package .
3973	Installs a package .
3974	Updates package .
3975	Copies shop source from package to target directory .
3976	Copy configuration file to target directory .
3977	Copies the setup files .
3978	Check if shop config file is not configured .
3979	Copies files from source to the installation .
3980	Returns the filtered files .
3981	Returns absolute file path from shop source .
3982	Update packages .
3983	Copy a package .
3984	Returns the source path .
3985	Nest flat file system structure .
3986	Returns a flat file list iterator .
3987	Copies a directory .
3988	Copies a file
3989	Generates models .
3990	Recursively traverses the classes of the given classes .
3991	Convert schema to JSON - LD .
3992	Add breadcrumb list
3993	Render all models .
3994	Set HTML By View
3995	Generates the HTML for the given HTML
3996	Resolves path .
3997	Compare expected values .
3998	Check if an array exists .
3999	Assert that the HTTP status code equals the given status .
4000	Assert that the given HTTP body contains the given content .
4001	Assert that the response is JSON .
4002	Assert that the response contains a JSON API .
4003	Assert that an array contains a data .
4004	Assert that the given data exists in the JSON API .
4005	Assert that an array contains a list of data in the array .
4006	Assert that a document is fetched .
4007	Assert that at least one element in the list of documents in order to be fetched .
4008	Asserts that a resource is created with a client id .
4009	Assert that the HTTP body is empty .
4010	Assert that the JSON API does not contain meta data .
4011	Assert that an error matches the given status .
4012	Assert that the response contains an error .
4013	Assert an array of JSON API errors .
4014	Get document .
4015	Set expected type .
4016	Assert that the response contains the expected content .
4017	Assert that the resource is updated .
4018	Assert that the resource is deleted .
4019	Assert that a resource is included .
4020	Assert that the document includes a given hash .
4021	Asserts that the document has meta data .
4022	Asserts that the document matches the given array .
4023	Asserts that the document matches the given array of links .
4024	Asserts that the response contains the given errors .
4025	Asserts that a resource exists in the document .
4026	Asserts that an identifier exists in the document .
4027	Asserts that an array contains an exact value .
4028	Assert that a document does not match a given value .
4029	Asserts that a document is contained in a list .
4030	Asserts that a document is exactly exact .
4031	Asserts that a set of elements in an array contains a subset of a set .
4032	Asserts that a document exists in the array .
4033	Asserts that a document contains only identifiers in a given array .
4034	Asserts that the given array contains the identifiers in the given document .
4035	Assert that a list contains a resource in a list .
4036	Asserts that a set contains a subset of a set .
4037	Assert that a list contains an exact value in a list .
4038	Assert that a list of includes contains a hash .
4039	Asserts that an array contains an exact error .
4040	Assert that a document contains an error .
4041	Assert that an array contains an exact error .
4042	Creates an instance from provided content .
4043	Cast the given value to an instance .
4044	Construct from JSON string .
4045	Decodes a JSON string .
4046	Get document by pointer
4047	Determine if the document has at least one of the given pointers .
4048	Assert that the given pointers exists .
4049	Assert that a member does not exist .
4050	Compare two variables .
4051	Compare two arrays .
4052	Check if value is resource identifier .
4053	Sort an array .
4054	Is the given value identifiable?
4055	Sends the request .
4056	Send a message to a user .
4057	Send a message to a user .
4058	Set allowed types
4059	Write to the buffer
4060	Write a message to debug mode .
4061	Add a message .
4062	Get message count
4063	Parses a single line as array
4064	Get variables from a multi - line array .
4065	Validate vars array
4066	Returns true if all elements of the collection passes the given strategy .
4067	Return a new AccumulateIterator .
4068	Sort an array
4069	Convert to array .
4070	Get the keys of the collection .
4071	Returns a new iterator .
4072	Get the values of the collection .
4073	Reduces the collection to a single value .
4074	Converts an array of keys to a key .
4075	Returns a new group by the given strategy .
4076	Reduces the elements of an iterable .
4077	Returns a new reduction .
4078	Dump the composer autoloader .
4079	Get extra key
4080	Escapes the given predicate prefix .
4081	Parses a compact IRI .
4082	Get term context from field type .
4083	Persists the cache content if needed .
4084	Returns the bundle s content
4085	Normalizes field items .
4086	Execute the delete function .
4087	Create a translated instance .
4088	Returns the canonical URL for the given entity .
4089	Get the typed data ids .
4090	Builds a cache backend
4091	Fetch data from cache .
4092	Runs a function
4093	Outputs an error message .
4094	Asks a question
4095	Execute an SQL query .
4096	Create a new record .
4097	Overrides values .
4098	Inserts a new record into the database .
4099	Extracts the primary key from the table .
4100	Sets the currently authenticated user .
4101	Copy stubs .
4102	Configure variables .
4103	Serialize the additional data .
4104	Checks if the passed data is a swatch type .
4105	Loads the watch type .
4106	Execute the command .
4107	Prepares a seeder name .
4108	Returns the attribute option watch by option ID .
4109	Returns the entity attribute by attribute id and attribute set .
4110	Get attribute option by attribute type and value .
4111	Get attribute option by attribute id .
4112	Create DatabaseSeeders folder .
4113	Create seeder file
4114	Initialize an attribute with the given value .
4115	Initialize database transaction
4116	Loads the attribute with the passed ID .
4117	Set node path
4118	Add form parameters .
4119	Sends a mock .
4120	Execute the menu .
4121	Inject the params into the request
4122	Returns the attribute by attribute code .
4123	Renames the registry .
4124	Pre - load attribute id .
4125	Publish records .
4126	Assert that the response body contains the given content .
4127	Parse the JSON response body .
4128	Assert that the response contains a given structure .
4129	Runs the test suite .
4130	Get Drupal root .
4131	Returns the path to the environment file .
4132	Read the environment file .
4133	Publish all bundles .
4134	Load database seeder .
4135	Get entity type by code
4136	Returns the entity type id .
4137	Sends a HTTP request to the menu .
4138	Prepares the given URI
4139	Accepts trusted trace payload
4140	End a transaction
4141	Set application name
4142	Set user attributes
4143	Start a transaction .
4144	Redirects to the given URL .
4145	Prepares constructor arguments
4146	Append suffix to subject .
4147	Wrap an exception in the subject .
4148	Parses a CSV file .
4149	Loads an attribute group by its ID .
4150	Returns all eav attribute groups for the passed attribute set .
4151	Returns the attribute group by the passed entity type and attribute group name .
4152	Create a LexerConfig instance
4153	Returns the eav attribute option value by option id and store .
4154	Create file resolver .
4155	Returns all available core config datas .
4156	Returns the requested logger .
4157	Create and return a plugin instance .
4158	Merges an entity with the given attributes .
4159	Create number converter for given subject .
4160	Cast value by backend type .
4161	Returns the entity type code .
4162	Returns the attributes .
4163	Returns the user defined attributes .
4164	Get EAV attribute by attribute code
4165	Returns the categories with the path .
4166	Returns the categories with the passed store view .
4167	Returns a HTTP header .
4168	Adds a Header .
4169	Map attribute code to attribute code .
4170	Sets the source directory .
4171	Registers an observer
4172	Register a callback
4173	Get callbacks by type
4174	Imports a row .
4175	Prepare the store view code .
4176	Returns the store id for the passed store code .
4177	Get root category
4178	Resolves original column name .
4179	Returns the original data .
4180	Returns true if the row contains the original data .
4181	Returns a custom exception with the given columns .
4182	Append exception suffix
4183	Get new file name
4184	Uploads a file
4185	Delete a file from the filesystem
4186	Returns all available entity types .
4187	Returns the eav entity type by its type code .
4188	Serializes an array .
4189	Unserializes CSV .
4190	Returns the target directory .
4191	Create an export config
4192	Initializes the configuration .
4193	Unserializes an attribute
4194	Serialize the attributes
4195	Get prepared statement .
4196	Prepares prepared statements .
4197	Parse additional attributes
4198	Generates the path for the passed entity .
4199	Resolves a reference to a reference
4200	Add a value to the cache .
4201	Get value from cache .
4202	Flushes the references .
4203	Loads an attribute set by its ID .
4204	Returns all eav attribute sets for the passed entity type .
4205	Returns the eavAttributeSet for the passed entity type and attribute set name .
4206	Returns the eavAttributeSet for the passed entity type and attribute set name .
4207	Creates an export adapter .
4208	Quotes a string
4209	Returns the url rewrite for the passed entity type and id .
4210	Return s the url rewriting for the passed entity type and store id .
4211	Notifies all registered observers .
4212	Checks the validity of a row
4213	Check if a value exists in the table
4214	Creates a subject .
4215	Creates a serializer instance .
4216	Returns the list of eav attributes for the passed entity type and attribute set name .
4217	Returns the eav attributes for the passed option value and store id .
4218	Returns the list of eav attributes by user_def .
4219	Returns the list of eav attributes for the passed entity type .
4220	Returns all eav attributes of the passed entity type .
4221	Finds and returns eav attributes by option value .
4222	Prepare observers .
4223	Resolves the path to a directory .
4224	Creates a directory
4225	Set an attribute
4226	Increase counter value
4227	Merge attributes recursively .
4228	Create a new filesystem adapter .
4229	Returns the categories of the passed store view .
4230	Returns all available root categories .
4231	Create event emitter
4232	Prepare event listeners .
4233	Remove a directory
4234	Returns the swift mailer .
4235	Initializes the source directory .
4236	Loads the cached files .
4237	Get the list of SQL statements .
4238	Initializes the import adapter .
4239	Prepare callbacks .
4240	Returns the global data .
4241	Get prepared statement by ID .
4242	Returns a DateConverter for the given subject .
4243	Override an array of artefacts
4244	Append an array of artefacts .
4245	Returns an array of artefacts for a given type and entity id .
4246	Creates a new artefact .
4247	Exports the data to a file .
4248	Returns all link types .
4249	Finds all image types .
4250	Converts a DateTime object to a PHP date .
4251	Converts number to decimal
4252	Execute the given subject .
4253	Get all pattern keys
4254	Returns an array of regular expressions
4255	Resolve pattern value
4256	Prepare the regular expression
4257	Prepare file name from parts
4258	Compare two filename .
4259	Returns an array of valid filenames
4260	Checks whether a file should be handled .
4261	Clean up a file
4262	Returns all available tax classes .
4263	Warms up all eav attribute option values .
4264	Returns all store websites .
4265	Finds all stores .
4266	Returns all vars by IDs .
4267	Returns the categories of the given entity id .
4268	Returns the available customer groups .
4269	Get primary key member name .
4270	Removes empty columns from the row .
4271	Render blade view
4272	Register rest routes
4273	Get collection params
4274	Sanitize end date
4275	Retrieve a list of events .
4276	Map events to events .
4277	Defines category translations
4278	Before save callback
4279	After save action .
4280	Saves the location
4281	Save additional locations
4282	Saves the categories
4283	Saves the groups .
4284	Saves the tags
4285	Save occurences
4286	Save post language
4287	Get an event by its original ID .
4288	Check the filters .
4289	Remove expired occurrences .
4290	Remove deleted events
4291	Remove expired events
4292	Filter taxonomies .
4293	Delete empty terms .
4294	Render the location list
4295	Save location data
4296	Get the revision manifest .
4297	Remove meta boxes .
4298	Convert serialized data to array
4299	Implode multi - dimensional array
4300	Register post type
4301	Add a table column .
4302	Get table columns .
4303	Convert columns to lowercase .
4304	Callback for table columns content .
4305	Save a term .
4306	Activates a new group .
4307	Remove empty values
4308	Get empty values
4309	Remove empty meta .
4310	Save the object
4311	Check if an attachment exists .
4312	Submit form callback
4313	Add date arguments to permalink posts .
4314	Filter events by post date
4315	Get the date for a single event .
4316	Get the next entrance date .
4317	Get closest element in array
4318	Convert a start date into parts
4319	Save draw points
4320	Enqueue admin scripts
4321	Enqueue frontend
4322	Format a date short date
4323	Import events .
4324	Import Event Manager Groups
4325	Ensure that the database table exists .
4326	Create database table .
4327	Check if an event manager exists
4328	Request API .
4329	Get events occurrences for a post
4330	Get Event Meta
4331	Limits a string .
4332	Get nearby locations .
4333	Updates an existing instance
4334	Ajax pagination .
4335	Get module events
4336	Get module categories .
4337	Returns an array of event categories
4338	Get the groups of a module
4339	Get the tags for a module
4340	Get the age range for a given module .
4341	Outputs the oauth request .
4342	Sanitize input
4343	Filter event data
4344	Get user groups
4345	Updates the group filter value .
4346	Get the event content .
4347	Get the event content lead .
4348	Get custom content
4349	Register event categories
4350	Register event tags
4351	Register event groups
4352	Add buttons to the view .
4353	Import events .
4354	Accept or deny a post
4355	Create a tunnel .
4356	Verify a tunnel .
4357	Runs a command
4358	Set signal handler
4359	Signal handler .
4360	Runs a process .
4361	Displays the edit form for the given container .
4362	Create and return a Container .
4363	Get a widget .
4364	Render a widget .
4365	Process the input .
4366	Process a single property .
4367	Hijack post data
4368	Handle an event .
4369	Creates a new imagine instance .
4370	Configure Imagick settings
4371	Injects the settings
4372	Handle the buildWidget event .
4373	Returns the widget class for the given property .
4374	Get the options for the widget .
4375	Processes the model .
4376	Enforce the model relationship .
4377	Processes the input .
4378	Handle the prePersist event .
4379	Handle post persist event .
4380	Translates the label .
4381	Builds the field sets .
4382	Handle the submit event .
4383	Returns the heading for the record .
4384	Do persist action .
4385	Configure CAS server
4386	Parse config .
4387	Configure CAS validation .
4388	Gets an attribute .
4389	Answers true if the specified attribute exists .
4390	Logout a user out .
4391	Sets the status code .
4392	Returns the key of the row .
4393	Checks if the current value is an integer key .
4394	Extracts the URL fragments from the API URL .
4395	Add containers from an array
4396	Builds a fake model query .
4397	Wraps the query with a row counter
4398	Get a fake model query .
4399	Generates an activation link from a key .
4400	Assign a user to a user
4401	Check key is valid
4402	Read Paging info from request .
4403	Register template files
4404	Register custom handlers .
4405	Handle an authorization error .
4406	Handle a validation exception .
4407	Handle a ModelNotFound exception .
4408	Get the last element from the queue .
4409	Get the components .
4410	Attach event handlers
4411	Makes a request to the API .
4412	Check if asset is available .
4413	Sync packages to database .
4414	Update expired packages .
4415	Creates a new client with the given connections .
4416	Get the URL for the connection .
4417	Get port .
4418	Ensure that the entity managers have been configured .
4419	Terminate a process
4420	Locks a theme .
4421	Unlocks a theme .
4422	Clones a book .
4423	Builds parameter value from filter url
4424	Builds the widget filters .
4425	Sort tables .
4426	Check if table is configured
4427	Configure the database .
4428	Get migrations .
4429	Run all migrations .
4430	Rollback all executed migrations .
4431	Resolve migration state .
4432	Get migration table .
4433	Render the given columns .
4434	Mount indents .
4435	Sets the primary keys of the table .
4436	Creates a new table .
4437	Updates the table .
4438	Drops the table .
4439	Renames the table .
4440	Execute the blueprint .
4441	Get migration files .
4442	Creates the filename for the given chunk .
4443	Bootstrap the application .
4444	Load Laravel application .
4445	Loads initializer .
4446	Loads the Laravel argument resolver service .
4447	Set mailtrap configuration
4448	Fetch the inbox .
4449	Get Mailtrap Client
4450	Reboot the kernel .
4451	Resolves arguments .
4452	Opens the stream .
4453	Retrieve information about a given URL
4454	Get stream stats
4455	Check if a file exists
4456	Returns a filename for the given stream .
4457	Releases a file
4458	Handles a command .
4459	Do empty node expansion .
4460	Expose all methods of the given object
4461	Handle XRL request
4462	Call XRL functions
4463	Renders the input .
4464	Enables XSL Server
4465	Extracts the parameters from the doc block .
4466	Returns a list of all available methods .
4467	Get method signature
4468	Get method help
4469	Call multiple multicall
4470	Load a XRL class
4471	Returns the current version .
4472	Prints the usage .
4473	Parses the given value to a boolean value
4474	Parse a file
4475	Parse command line arguments .
4476	Main entry point
4477	Check if service is resolved .
4478	Get an XML writer .
4479	Finalizes the XML writer .
4480	Get an XML reader
4481	Get the current node
4482	Reads an opening tag .
4483	Reads a closing tag .
4484	Parse a text node .
4485	Checks if the given value is an allowed type .
4486	Return a checkbox .
4487	Return email input .
4488	Create a select box .
4489	Register sections .
4490	Register a section .
4491	Register settings fields .
4492	Register the settings .
4493	Returns the HTML code for the captcha .
4494	Returns the javascript link to the client .
4495	Returns HTML code to display the captcha .
4496	Build the html code for a captcha attribute .
4497	Upload an asset .
4498	Get a project .
4499	Get projects .
4500	Create a new template .
4501	Get a template by id .
4502	Get all available templates .
4503	Creates a new job .
4504	Get job information .
4505	Get jobs by template
4506	Gets the currently logged in user .
4507	Gets the personal library for the authenticated user .
4508	Merges job values .
4509	Get an LDAP user from LDAP .
4510	Sets the LDAP configuration definition .
4511	Checks the LDAP error code for LDAP errors .
4512	Set allowed types .
4513	Set LDAP credentials if needed .
4514	Switch the domain if needed .
4515	Switch domain back to current context .
4516	Throws an exception .
4517	Get username password token .
4518	Adds the domain attribute to the token .
4519	Transforms the value for LDAP .
4520	Get properties of an object
4521	Sets the LDAP object for a property .
4522	Set the ldap value for a property .
4523	Builds the ldap configuration .
4524	Returns an array of values for the choice .
4525	Get LDAP objects by query .
4526	Get all operations .
4527	Set user roles .
4528	Checks if a group belongs to the given roles .
4529	Check if a group has an attribute with the given value .
4530	Logs the operation .
4531	Save media .
4532	Update the media by ID .
4533	Get media .
4534	Remove media .
4535	Parse options .
4536	Get the filename .
4537	Check if file exists
4538	Rename file .
4539	Get alt .
4540	Get the title .
4541	Get name .
4542	Get the weight .
4543	Database update .
4544	Removes an existing media .
4545	Put file
4546	Clone file .
4547	Create directory .
4548	Clone a media .
4549	Register pricing config .
4550	Register bindings .
4551	Register directives .
4552	Get the config .
4553	Create a new svg
4554	Transforms an item variable
4555	Transform a QTI file into a string
4556	Short description of method addVariable
4557	Check if a variable is a file placeholder
4558	Checks if the variable is a QTI file .
4559	Converts a value to a QTI datatype
4560	Create diff from object
4561	Returns the difference between two arrays .
4562	Set IP address
4563	Sets the language
4564	Set the origin .
4565	Resolve origin
4566	Set timestamp .
4567	Before save callback
4568	Process the schedule .
4569	Before update .
4570	Check if the slug is unique
4571	Generate a unique slug .
4572	Set the slug .
4573	Set the creation date .
4574	Set last modification date .
4575	Set route options
4576	Set master model .
4577	Returns the children of this node .
4578	Get siblings .
4579	Load an object from the source .
4580	Load an object from the cache .
4581	Add an object to the cache .
4582	Returns the category items .
4583	Retrieve route slug pattern
4584	Retrieve the slug prefix .
4585	Retrieve the slug suffix .
4586	Determine if the slug is editable .
4587	Set the slug .
4588	Generate the slug .
4589	Generate route pattern .
4590	Filter route token .
4591	Generates an object route .
4592	Get the URL of this object .
4593	Slugifies the given string .
4594	Finalize the slug .
4595	Delete object routes .
4596	Create a route object loader .
4597	Get all revisions for this object .
4598	Set the publication date .
4599	Set the expiry date .
4600	Set the publish status .
4601	Get the status of the published version .
4602	Displays the help page
4603	Rewrite the routes
4604	Reset the data source
4605	Returns the next row
4606	Browse a site
4607	Browse logs
4608	Browse a log
4609	Browse events
4610	Returns the permissions for the user
4611	Browse the hierarchy
4612	Delete an item
4613	Restore an item
4614	Sort items
4615	Checks if an item can be deleted .
4616	Get model title .
4617	Returns an array of dropdown filters
4618	Returns POST object
4619	Returns a single item
4620	Redirect to the index page
4621	Adds an option to the filter
4622	Add multiple options
4623	Returns an option by its index
4624	Handle method call .
4625	Sets a batch status
4626	Sets a batch download id
4627	Main controller action
4628	Finds the admin controllers
4629	Load admin controllers .
4630	Loads an admin controller
4631	Loads an admin class
4632	Routes the current request
4633	Loads a view file
4634	Load CSV data
4635	Loads an inline view
4636	load search data
4637	get filter value from filter object
4638	Loads a pagination component
4639	Load a cell
4640	Loads a user cell
4641	Renders a date cell
4642	Loads a datetime cell
4643	Loads a boolean cell
4644	Loads a settings component table
4645	Adds a new header button
4646	Displays a dynamic table
4647	Save module preferences
4648	Execute the command
4649	Creates the source file
4650	Formats a row
4651	Add an action
4652	Set admin data
4653	Unset admin data
4654	Unset admin data
4655	Clears all admin data for a user
4656	Get all log files
4657	Find a config file
4658	Loads required JS files
4659	Loads the admin CSS files
4660	Loads jQuery libraries
4661	Auto load all components
4662	For backwards compatibility .
4663	Site settings page
4664	Prepares whitelist
4665	Recursively extract settings from a settings array .
4666	Get a source by its slug
4667	Get a format by its slug
4668	Exports a data source
4669	Mark an execution failed
4670	Function to add a message
4671	Save changes to database
4672	Get all users .
4673	Helper function to get common elements common
4674	Formats an object
4675	Overrides parent method .
4676	Validate user input
4677	Returns the model class and id
4678	Formats an object
4679	Sets the current date
4680	Add daily html
4681	Set the start of the week
4682	Print a string .
4683	Submits bonus
4684	Assign a task to an engagement
4685	Assigns contract to an engagement
4686	Get a finished report
4687	Get finished report
4688	Get finished report
4689	Get finish report
4690	Get finish report
4691	Get a list of engagements
4692	Get an individual response
4693	get full url
4694	Get a list of offers
4695	Invokes an action for the given contract .
4696	Get a specific financial info
4697	get all user roles
4698	Get roles by user
4699	Invites a job
4700	Get company by type
4701	Get customer by company
4702	get users in a team
4703	Get a list of jobs
4704	Get a specific job
4705	Create a new job
4706	Edit a job
4707	delete a job
4708	get user info
4709	Get user information
4710	get task by type
4711	Get room details
4712	Get room by offer
4713	Get room by company id
4714	Get room by contract
4715	Create new room
4716	Sends a message to a room
4717	Update room settings
4718	Update room metadata
4719	get snapshot by contract id
4720	update a snapshot by contract id
4721	delete a snapshot by contract id
4722	Get active milestone status
4723	get submissions of a milestone
4724	create a new milestone
4725	Edit a milestone
4726	Delete a milestone
4727	Makes a request to the server
4728	Bootstrap the package .
4729	Get content body
4730	Get accountKit data
4731	Display a list of contacts .
4732	Display contact .
4733	Show contact .
4734	Show contact for editing .
4735	Update the contact .
4736	Remove the contact .
4737	Contact view .
4738	Get value from contact .
4739	Determine if the given user can view the contact .
4740	Determine if the given user can update the given contact .
4741	Determine if the given user can delete the given contact .
4742	Display a contact .
4743	Parse link html
4744	Returns an array of parsed preview data
4745	Returns the preview of the link
4746	Add a new parser .
4747	Removes a parser by name .
4748	Add default parsers
4749	Returns contrast color from hex
4750	Encodes a path with a trailing slash
4751	Convert interval to string
4752	Boot the DownloadAndCache extension
4753	Get timezone data .
4754	Returns an array of timezone options .
4755	Get the name of a related model .
4756	Joins a query with a primary model .
4757	Get the AWS client configuration .
4758	Converts a version number to an integer .
4759	Scope query by key and value .
4760	Set availability_at .
4761	Get the payload attribute .
4762	Convert bytes to human readable format
4763	Convert time offset to seconds
4764	Formats number of seconds .
4765	Truncates long text .
4766	Add a permission to a topic
4767	Confirm a subscription .
4768	Create a Topic
4769	Get Topic Attributes
4770	List subscriptions .
4771	List subscriptions for a topic
4772	List topics .
4773	Publish a Message to a Topic .
4774	Remove a permission from a Topic .
4775	Set Topic Attributes
4776	Subscribe to a Topic .
4777	Create a new platform endpoint
4778	Publish Message to Endpoint
4779	Sends the request to AWS API
4780	Converts SimpleXMLElement to array
4781	Clears all tasks
4782	Convert priority to priority
4783	Runs the task .
4784	Customize settings tabs .
4785	Get an invitation by team code .
4786	Create default settings tabs .
4787	Create a coupon from a Stripe coupon object .
4788	Get a coupon by code .
4789	Get the discount for a user .
4790	Get a team .
4791	Get team roles .
4792	Update user profile .
4793	Validate user profile .
4794	Update Stripe customer s email
4795	Install JavaScript .
4796	Install environment variables .
4797	Subscribe a subscription .
4798	Change subscription plan .
4799	Update a user s card
4800	Update extra billing info
4801	Cancel subscription .
4802	Resume a subscription .
4803	Download an invoice .
4804	Get or set price .
4805	Set currency symbol
4806	Set trial days
4807	Gets or sets the tier property .
4808	Set or get feature features .
4809	Get the currently logged in user .
4810	Create a user from registration request .
4811	Create new user .
4812	Create default user .
4813	Create a subscription on Stripe .
4814	Register a new user .
4815	Check if the given token is valid .
4816	Delete the given user .
4817	Display the spark settings .
4818	Invite a user by email .
4819	Remove user by id .
4820	Send an invite to a team .
4821	Accept a team invitation .
4822	Create a new tab .
4823	Get tabs displayable .
4824	Define the core resources .
4825	Define services .
4826	Notify an invoice .
4827	Handle invoice payment success .
4828	Create a new team .
4829	Get all teams for a user .
4830	Get pending invitations for a user .
4831	Attach user to team
4832	Find plan by ID .
4833	Get plans by tier .
4834	Get the current team .
4835	Check if the user owns the team .
4836	Get the role for a team .
4837	Create a new team
4838	Edit team settings .
4839	Update a team
4840	Switch the user to a team .
4841	Update a team member
4842	Remove a member from a team .
4843	Leave a team .
4844	Destroy the given team .
4845	Call a custom validator .
4846	Call a custom updater .
4847	Update the user s password .
4848	Enable TwoFactor Authentication
4849	Validate TwoFactor Authentication .
4850	Disables two factor authentication .
4851	Handle the authenticated user .
4852	Logout and redirect to the token screen .
4853	Validate token .
4854	Registration page .
4855	Validate registration .
4856	Validate default registration .
4857	Validate a coupon code .
4858	Logout action .
4859	Flash message .
4860	Creates a new event .
4861	Register an exception
4862	Export given exception as array
4863	Import given error
4864	Normalizes an event .
4865	Get a WordPress handler wrapper .
4866	Creates a cached event .
4867	Check if an event is cached .
4868	Get cached event .
4869	Removes an event from the cache .
4870	Creates a wrapper for a WordPress event .
4871	Exports an exception .
4872	Imports an exception .
4873	Removes a WordPress hook .
4874	Replace WordPress hook .
4875	Get the number of stacked messages
4876	Clears the pool .
4877	Sends a message to the pool .
4878	Refreshes a task .
4879	Initializes the instance .
4880	Filters an array .
4881	Converts an array into an array of arrays .
4882	Maps an array to a promise .
4883	Executes a function in parallel .
4884	Converts the given result into exceptions .
4885	Sets the number of arguments .
4886	Run a WordPress hook .
4887	Apply filters .
4888	Adds a WordPress hook .
4889	Wrap function result .
4890	Resumes streams .
4891	Stop timer .
4892	Destroy the socket .
4893	Gets the socket for a worker .
4894	Removes the worker socket .
4895	Prepares a worker .
4896	Attach method handler .
4897	Creates a hash for a callable .
4898	Writes data to buffer .
4899	Pipes this stream to another stream .
4900	Handles data received from the socket .
4901	Handle writing .
4902	Check socket errors .
4903	Remove the read listener .
4904	Removes the write listener .
4905	Decodes a phoebe message .
4906	Attach timer .
4907	Cancel timer .
4908	Submits a work .
4909	Submits a job to a worker .
4910	Submits an asynchronous task .
4911	Submits a task to a worker .
4912	Stops a worker .
4913	Removes a worker .
4914	Sends a message to a worker .
4915	Sends a message to all workers .
4916	Iterates over all workers .
4917	Called when timer is running .
4918	Spawns a new worker
4919	Checks if the given worker is still running .
4920	Checks if a worker is dead .
4921	Handles a message received by the worker .
4922	Handles the stream closing .
4923	Read bytes from the stream .
4924	Reads a UUID from the stream .
4925	Read list definition
4926	Read a map
4927	Read a varint from the buffer .
4928	Read a decimal value from the buffer .
4929	Register the bulkSms service .
4930	Boot the package .
4931	Sends a message .
4932	Validate the response from the BulkSMS API .
4933	Bulk send multiple SMS
4934	Get the status of a batch
4935	Sends the batch
4936	Generate CSV .
4937	Send sms .
4938	Sets the message .
4939	Calculate concat value
4940	Parse an email recipient .
4941	Send batch request
4942	Finds dynamic models by filters .
4943	Returns the number of dynamic models by the given filters .
4944	Add filter to query builder
4945	Add search filter .
4946	Add date range filter
4947	Get a field value
4948	Returns the form fields .
4949	Builds the mail configuration by dynamic settings .
4950	Builds configuration by type .
4951	Builds admin mail configuration from dynamic translation .
4952	Builds the mail configuration based on the dynamic translation .
4953	Get file fields by dynamic collection .
4954	Returns the collection id for the given dynamic .
4955	Get email from dynamic
4956	Get email .
4957	Builds a form .
4958	Creates the form .
4959	Loads a form entity .
4960	Returns default values .
4961	Returns the webspace key .
4962	Check the password .
4963	Returns the password .
4964	Returns a list of form elements .
4965	Returns list fields .
4966	Delete dynamic media .
4967	Get filters from request
4968	Loads form by id .
4969	Convert value to string .
4970	Get media urls .
4971	Returns the download url .
4972	Get available choices .
4973	Get choice options .
4974	Returns a form by id .
4975	Kernel request handler .
4976	Returns the translation for the given locale .
4977	Returns a field by its key .
4978	Get fields not in array .
4979	Serializes the form for the given locale .
4980	Handles form action .
4981	Returns the form with the given key .
4982	Handle form submit .
4983	Handles submitted form .
4984	Generates CSRF token .
4985	Get all form errors .
4986	Handles the form submission .
4987	Saves the form .
4988	Upload media .
4989	Map media ids .
4990	Get the media data .
4991	Get MailChimp lists
4992	Get builder instance .
4993	Returns block prefix .
4994	Create new collection .
4995	Loads the collection id .
4996	Returns the width of an item .
4997	Get the last width .
4998	Helper function to throw an exception .
4999	Sets the hostname
5000	Set unix socket
5001	Sets the memory flag
5002	Set file path
5003	Sets the database name .
5004	Sets the charset .
5005	Ensures that the connection has been established .
5006	Configures the connection .
5007	Execute a query and return the result .
5008	Get a list of queues .
5009	Get a specific queue .
5010	Add a message to a queue
5011	Add multiple messages to a queue
5012	Get message by id
5013	Touch a message .
5014	Release a message .
5015	Add a new alerts to a queue .
5016	Delete an alert by id .
5017	Delete a queue .
5018	Update a queue .
5019	Create a queue .
5020	Replace subscribers of a queue .
5021	Remove subscriber from a queue .
5022	Convert data to json
5023	Convert an array to XML
5024	Generate XML from given data
5025	Output CSV .
5026	Flatten an array
5027	Execute the command
5028	Format server statistics .
5029	Format the usage .
5030	Format an uptime value
5031	Add a server to the memcache server
5032	Add hosts to the pool .
5033	Checks if the given IP address is valid .
5034	Get a value from the cache .
5035	Stores a value in the cache .
5036	Deletes a value from the cache .
5037	Set cache client
5038	Get a cache key
5039	Delete a cache key
5040	Make an invalid argument exception .
5041	Populate builder with data .
5042	Set options .
5043	Set the notification .
5044	Set payload data .
5045	Encode CDATA .
5046	Generates a non - authentication URL for the given action and parameters .
5047	Returns authentication URL .
5048	Generate an advanced authentication URL
5049	This method is used to generate a basic authentication URL .
5050	Builds the URL for authentication .
5051	Ensure channel parameter is set .
5052	Set the product ID .
5053	Get the similar attributes .
5054	Get the similar records .
5055	Writes string to file .
5056	Autoloads a class
5057	Sets the target .
5058	Trigger import action
5059	Trigger import action
5060	Apply parameters .
5061	Ensure channel parameter is set .
5062	Add required parameters
5063	Adds an appender to the pool .
5064	Get an appender by name
5065	Logs trace message .
5066	Logs debug message
5067	Log a warning message .
5068	Logs a message with the given level .
5069	Logs an event .
5070	Logs an event
5071	Remove an appender .
5072	Returns the effective log level .
5073	Get the logger hierarchy .
5074	Returns the logger with the given name .
5075	Reset Configuration .
5076	Configures the application .
5077	Returns the configured logger configurator .
5078	Sets the record count .
5079	Add product IDs .
5080	Get recommendations .
5081	Track a click .
5082	Track a cart .
5083	Track a checkout .
5084	Track a recommendation click .
5085	Track the login .
5086	Set product IDs .
5087	Get the comparable attributes .
5088	Gets the comparison records .
5089	Apply formatting to string .
5090	Sets a boolean value .
5091	Sets the log level .
5092	Set file size .
5093	Setter for numeric values .
5094	Sets a string value .
5095	Gets the location information .
5096	Get started time
5097	Returns the time in milliseconds .
5098	Get request instance
5099	Get the tag cloud
5100	Set word count .
5101	Add a feedback .
5102	Sets the product numbers .
5103	Add product numbers .
5104	Set pageId .
5105	Make a product campaign .
5106	Make a shopping cart campaign .
5107	Get Campaigns .
5108	Get raw product campaigns
5109	Adds a converter to the converter chain .
5110	Gets the converter for a given word .
5111	Parses the formatting modifiers .
5112	Set the logger level .
5113	Add a renderer to the map .
5114	Sets the default renderer .
5115	Get mapping by class name
5116	Returns an array of whitelist server parameters
5117	Loads a configuration file .
5118	Converts a log string to a logger
5119	Parses a logger value
5120	Parses an appender configuration .
5121	Parse a renderer .
5122	Appends an event to the syslog .
5123	Parse syslog option string
5124	Parses the specified facility .
5125	Parses the priority value .
5126	Appends an event to the mongo collection .
5127	Format exception into array
5128	Closes the collection .
5129	Configures the logger .
5130	Creates the application layout .
5131	Set idsOnly .
5132	Get follow search value
5133	Add a filter to the chain
5134	Sets the response .
5135	Sets the session id
5136	Check if the logger level equals another one .
5137	Get the level of the logger
5138	Get the level of the FATAL level .
5139	Get the level of error
5140	Get the level warning level
5141	Get the info level
5142	Get the logger level
5143	Get the level of the trace level .
5144	Get the log level
5145	Get Log Level
5146	Get system property value
5147	Converts given value to a logger level .
5148	Convert given value to string .
5149	Replace constants in a string
5150	Get a logger by name .
5151	Returns the current request target
5152	Processes conversion pattern
5153	Formats the given event .
5154	Add a Filter
5155	Checks if the given level is the same as the threshold .
5156	Trigger a warning .
5157	Get suggestions .
5158	Returns the class name of the factfinder class
5159	Rollback .
5160	Connects to the database .
5161	Appends an event to the database .
5162	Formats an event
5163	Generates a URL based on the given parameters .
5164	Get a campaign feedback
5165	Get pushed products .
5166	Get the active questions .
5167	Get advisor tree
5168	Activate options .
5169	Append a logging event .
5170	Find a permission by ID .
5171	Find a permission by its value .
5172	Render a menu item
5173	Setup the layout .
5174	Get list of users
5175	Show the create form .
5176	Create user
5177	Attempts to activate a user .
5178	Show user informations
5179	List groups .
5180	Update group permissions
5181	Remove a user from a group .
5182	Add user in group
5183	Validate group values
5184	Load includes .
5185	Register breadcrumbs
5186	View dashboard .
5187	Handle the login form .
5188	List permissions .
5189	Create a new permission
5190	Delete permission .
5191	Outputs the pagination
5192	Authenticates a user .
5193	Generate a nonce
5194	Check if flag is set
5195	Returns the rule for the given flag .
5196	Determine if the given flag is required .
5197	Check if flag is required
5198	Check if flag is optional
5199	Parses the given arguments .
5200	Check if a string is a param
5201	Orders parameters according to given template
5202	Authenticate the HTTP client .
5203	Returns the report API
5204	Returns the permissions API
5205	Returns the company API
5206	Get OAuth API
5207	Makes a request to the API
5208	Gets the elements of a report
5209	Get report metrics
5210	Attempts to retry a report .
5211	Calculates the sleep seconds .
5212	Parse options .
5213	Get a list of images .
5214	Get a list of images .
5215	Get videos .
5216	Prints a string .
5217	Get table definition
5218	Generate drop table definition .
5219	Get the drop table definition .
5220	Get the definition of a table .
5221	Get drop key definition .
5222	Get foreign keys definition
5223	Get drop foreign keys definition .
5224	Get the columns definition .
5225	Get primary key .
5226	Get table comment
5227	Gets the schema type for a column .
5228	Returns the definition for the other column .
5229	List tables .
5230	Generate migration file
5231	Create table .
5232	Drop table .
5233	Generates a file .
5234	Prints a function .
5235	Get function parameters .
5236	Start printf
5237	End printf
5238	Display a conclusion .
5239	Fetches the web service .
5240	Populates the data from the response .
5241	Builds the webservices url
5242	Get groups .
5243	Get a group by DN
5244	Get users .
5245	Get a user by GUID
5246	Get a user by DN
5247	Get a user by email address
5248	Get a user by username
5249	Get username by email address
5250	Get the members of a given group
5251	Update a group from LDAP data
5252	Create LDAP user
5253	Create an LDAP group
5254	Update LDAP user from member data
5255	Update LDAP groups for a member .
5256	Change the password of a member
5257	Delete LDAP user from LDAP .
5258	Update an index
5259	Connect to a TCP server .
5260	Disconnect from socket
5261	Receive string from socket
5262	Send string to socket
5263	Encode a string
5264	Decode a string
5265	Read response from server
5266	Authenticate to the server
5267	Checks if the response time is consistent with the current time
5268	Create LDAP users
5269	Write this object to the owner .
5270	Get the message from the session
5271	The password form .
5272	Show the password reset link
5273	Performs a search on the LDAP server .
5274	Get a group by GUID
5275	Changes the password of a user
5276	Sets the password for the specified user .
5277	Moves one or more attributes .
5278	Attempt to authenticate a user
5279	Try to authenticate using the fallback authenticator class
5280	Process the SAML submission
5281	Validate the SP metadata .
5282	Get little endian
5283	Handle SELECT callback
5284	Selects one or more documents from the index .
5285	Splits the hash string into hash and salt .
5286	Create a new database driver .
5287	Get table definition
5288	Get all tables .
5289	Fixes the indexes of a table .
5290	Compare two indexes
5291	Get a single row from a table
5292	Builds an index name .
5293	Encodes data to JSON
5294	Generate a random key .
5295	Get supported info .
5296	Generate an HMAC signature .
5297	Verify the signature of a string .
5298	Verify the timestamp .
5299	Remove dots from string
5300	Push an item onto a string .
5301	Takes a string and turns it into a string .
5302	Get error message .
5303	Add error .
5304	Set the main message .
5305	Set the status code .
5306	Get error message .
5307	Get errors as a flat array
5308	Check if a field is valid .
5309	Parse an array into a schema
5310	Require one of the given fields
5311	Validates the given data
5312	Validate a field
5313	Validate an array
5314	Validate base64
5315	Validate a boolean value
5316	Validate a datetime value .
5317	Validate a float value
5318	Validate an integer value .
5319	Validates an object .
5320	Validate required field
5321	Validate a string .
5322	Validate a timestamp .
5323	Get all addons .
5324	Bootstrap plugins .
5325	Get cache from file
5326	Returns an array of classnames for the given classname .
5327	Determine if addon is enabled .
5328	Get addon info .
5329	Scan addon recursively
5330	Scans an addon .
5331	Scans a directory recursively
5332	Start an addon .
5333	Get HTTP headers .
5334	Call a user - defined callback .
5335	Bind a callback to an event .
5336	Binds a class to an event .
5337	Dump all event handlers .
5338	Fire an event .
5339	Fire an event
5340	Fire event .
5341	Check if function exists
5342	Get event name from callback
5343	Get handlers by name
5344	Check if an event has a handler
5345	Check if method exists
5346	Get driver value
5347	Sets the value of the driver .
5348	Splits the hash into salt and salt
5349	Set the default configuration path .
5350	Get config value
5351	Load configuration data
5352	Save config data
5353	Matches the given request .
5354	Add a route .
5355	Finalize the response
5356	Check if action exists .
5357	Check if an action is allowed
5358	Determine if the given request matches the pattern .
5359	Determine if the given value fails the condition .
5360	Get the current response .
5361	Convert a result into a response object
5362	set Content - Type
5363	set content asset
5364	Set the content type based on the accept header
5365	Get status message
5366	Set cookie value
5367	Set global cookies
5368	Set or get the meta data .
5369	Set or get data
5370	Set header value
5371	Get or set global headers
5372	Normalize header name
5373	Send HTTP headers .
5374	Alter a table alteration .
5375	Rename a table
5376	Drop an index .
5377	Creates a new index .
5378	Force the given value to the given type .
5379	Get primary key value
5380	Get table names from database .
5381	Create route .
5382	Get or set conditions .
5383	Get or set the HTTP methods .
5384	Get or set the mappings .
5385	Set global mappings
5386	Check if a name is mapped .
5387	Get mapped data .
5388	Check if the given request matches the allowed methods .
5389	Set route pattern
5390	Dispatch callback .
5391	Get the regex for a route pattern .
5392	Execute a SQL query
5393	Builds a SELECT query .
5394	Build a bracket list
5395	Build an INSERT query
5396	Build an upsert statement .
5397	Create a column definition string .
5398	Builds an index definition string .
5399	Get column orders
5400	Get formats from database .
5401	Translates a row
5402	Verify password hash
5403	Encode a 64 - bit integer .
5404	Get current request
5405	Get the default environment variables .
5406	Get global environment variable .
5407	Parse server variables
5408	Overrides environment variables
5409	Gets an environment variable .
5410	Set environment variable
5411	Get all headers .
5412	Get host and port
5413	Set file extension
5414	Set path extension
5415	Set Full Path
5416	Sets the port
5417	Gets a query parameter
5418	Set a query variable
5419	Gets an input value
5420	Get request data
5421	Set request data
5422	Returns the full URL
5423	Parses an URL and sets the components
5424	Returns a full URL .
5425	Split path and extension .
5426	Reset table .
5427	Define a new column .
5428	Create column definition
5429	Specifies a primary key .
5430	Sets the table definition
5431	Sets the table name
5432	Create an index .
5433	Render robots .
5434	Gets all orders .
5435	Returns a specific resource
5436	Validate a user .
5437	Returns the value of an attribute .
5438	Sets the attribute values .
5439	Check if API method is supported
5440	Check required attributes
5441	Sets the judo ID .
5442	Get error summary
5443	Returns an instance of the given model .
5444	Returns a summary of the error .
5445	Get a resource .
5446	Sends a POST request to the API .
5447	It converts attributes into correct type
5448	Validates the object
5449	Check if a key exists in an array .
5450	Returns the javascript code to render the notification
5451	Add a new notification
5452	Link a delivery
5453	Converts a job object into an array .
5454	Create Job object from JSON .
5455	Free the pool .
5456	Frees the pool .
5457	Create a new dashboard .
5458	Handle a single relation request
5459	Sorts the list of items
5460	Gets the link to the editor
5461	Generate the detail form
5462	Save the current item
5463	Returns an array of RSS feed items
5464	Get the most recently edited posts .
5465	If the member has not been created it will be created .
5466	Answers the template name for the receiver .
5467	Generate a link to view all
5468	Get the link to create a new record
5469	Get the GridFields for the given page .
5470	Answers the grid for the subject field .
5471	Gets the tab name for this subject
5472	Return a list of all the items in this form
5473	Get grid fields for a page
5474	Request account data .
5475	Clean error response
5476	Processes the filter
5477	Mapper account object
5478	Mapper json object
5479	Check if key exists in array
5480	Fetch the token .
5481	Get the URL of the current page .
5482	post request .
5483	Get all variables .
5484	Make an HTTP request
5485	Make a cURL request
5486	Open an HTTP request
5487	Get recent files
5488	Duplicate this page
5489	Answers the template for the current controller .
5490	Generate the view link for all models
5491	Get a list of all the records in this model
5492	Get the models for the given panel
5493	Provide access rights
5494	Sort the dashboard panel
5495	Sets the default dashboard configuration
5496	Apply the dashboard configuration to all users
5497	Renders the panel .
5498	Delete a page
5499	Get the configuration form .
5500	Save the panel configuration .
5501	Generate the icon for the section editor .
5502	Converts seconds to minutes
5503	Accessor for the API .
5504	Generate a dropdown configuration .
5505	Determine if the configuration has been configured .
5506	Answers the path for the subject .
5507	Get the title for this chart
5508	Reads a float from the binary stream .
5509	Reads a file .
5510	Convert binary value to hexadecimal string
5511	Reads a number of bytes from a binary reader .
5512	Read a signed integer from the buffer .
5513	Reads a 16 - bit integer from a binary stream .
5514	Decodes a signed integer .
5515	Reads 64 - bit integer from file .
5516	Decodes a signed integer .
5517	Exports the given span data into the batch .
5518	Get the callbacks .
5519	Parses the robots . txt file and returns regular expression
5520	Returns the lines of the given robots .
5521	Builds regular expression expressions
5522	Get robots . txt content
5523	Returns the URL of the robots . txt file .
5524	Initializes the crawler process .
5525	Starts the running process .
5526	Starts the child process loop .
5527	Checks if the crawler has an abort .
5528	Create the working directory
5529	Returns a process report .
5530	Add link priority
5531	Set the follow mode
5532	Set the traffic limit
5533	Set the working directory
5534	Set proxy
5535	Set connection timeout
5536	Set socket read timeout
5537	Resumes the aborted process
5538	Sets the starting URL .
5539	Removes all redirect URLs from the PHPCrawlerDocumentInfo .
5540	Checks if the given URL matches the given rules .
5541	Adds a regex filter to the list of URLs that should be applied to the page .
5542	Add URL Filter Rules
5543	Marks the given URL as follows .
5544	Returns true if there are any URLs in the cache
5545	Get all URLs
5546	Add multiple URLs
5547	Starts a benchmark .
5548	Stops a benchmark .
5549	Resets all benchmark results .
5550	Get all benchmark results .
5551	Get current time
5552	Open sqlite - cache file
5553	Returns the unique hash for a given URL .
5554	Get URL priority
5555	Add link priority .
5556	Add link priority
5557	Add a PHPCrawlerDocumentInfo to the queue
5558	Get the next document
5559	Creates a PHPCrawlerUrlDescriptor object from a URL .
5560	Sets the source URL .
5561	Finds a redirect link in the given HTTP header .
5562	Add post data
5563	updates the crawler status
5564	Register child process
5565	Returns list of child processes
5566	Kill all child processes
5567	Get the IP of a host
5568	Returns the host in the cache .
5569	Removes an expression visitor .
5570	Traverse expression .
5571	Returns a new collection filtered by the given expression .
5572	Creates a new method .
5573	Format a value .
5574	Format an array of values .
5575	Writes config values
5576	Consume a variable .
5577	Get an array of registered engines .
5578	Expand a flat array into a multidimensional array .
5579	Split token into conditions and conditions .
5580	Returns true if the given key matches the given token .
5581	Get an item from the cache .
5582	Set Instance of Message
5583	Gets the debug trace .
5584	Export a variable .
5585	Listen for incoming messages .
5586	Parse a message
5587	Returns the path to a file .
5588	Load a plugin .
5589	Load plugin configuration
5590	Load all plugins .
5591	Loads the bootstrap file .
5592	Reads a config file
5593	Config setter .
5594	Read configuration value
5595	Load modules .
5596	Get plugins path
5597	Unloads a module
5598	Reload a module
5599	Get time of a module was loaded .
5600	Check if module is modified .
5601	Get module by name
5602	Check if module exists
5603	Sets a module .
5604	Get a value from the cache .
5605	Set an item in the cache .
5606	Get multiple values from the cache .
5607	Set multiple times .
5608	Call a method on the pool .
5609	Called when a profile is started .
5610	Triggers the end of the join .
5611	Returns a unique key for the given joinPoint
5612	Removes all arguments from a command .
5613	Applies the given prefix to the command .
5614	Evaluates the command s arguments .
5615	Set the expiry time .
5616	Sets the length
5617	Read data from the socket .
5618	Send data to the socket
5619	Check if command can be executed
5620	Set the protocol version
5621	Converts data into tokens
5622	Get last key
5623	Prepares the connection
5624	Execute the request
5625	Reads raw data from the socket .
5626	Read an unsigned long from the stream .
5627	Reads a string from the buffer .
5628	Read bytes from the stream .
5629	Read a record
5630	Add bytes to the request
5631	Unpacks an unsigned 64 bit .
5632	Reset the data
5633	Returns the properties of the current Fusion .
5634	Renders a component
5635	Converts arguments to string .
5636	Get the ideal issuers .
5637	Get allowed products .
5638	Process product list
5639	Create an order with an ideal order .
5640	Create order with SepaOrder
5641	Create a Sofort order .
5642	Create a payconic order .
5643	Create a new order with a credit card .
5644	Create a Bancontact order
5645	Create a cash order on the delivery order
5646	Create a new Order with Klarna .
5647	Create a new order with a paypal .
5648	Create a new order with the home pay .
5649	Create a new order after payment .
5650	Create a new Order .
5651	Get an order by ID .
5652	Creates a new order .
5653	Set the status of an order
5654	Creates a new Payment
5655	Creates a payment with credit card
5656	Creates a payment with Sepa
5657	Creates a new PAYORT payment
5658	Creates a new Payment using BANcontacts
5659	Creates a new Payment using Paypal .
5660	Creates a new Payment
5661	Creates a new payconiq object
5662	Create a new Transaction object .
5663	Remove null values from an array .
5664	Create an instance of the Guzzle client .
5665	Get the endpoint for the given product
5666	Checks to see if the given value is a valid ISO3166 - 3166 - 2166 - 2166 - ISO - 3166 - 2166 - 1
5667	Builds the request body
5668	Execute an authorization .
5669	Capture an authorized payment
5670	Create an authorization .
5671	Create a new sale .
5672	Request an access token .
5673	Builds a Link object
5674	Builds a capture .
5675	Builds an Amount object
5676	Build url array
5677	Builds a new AccessToken object
5678	Build a list of transactions
5679	Transforms the transaction data into an array .
5680	Send a request and return the response .
5681	Builds a payment
5682	Builds a PaypalPaymentAuthorization object .
5683	Builds a Payer
5684	Builds an array of payer data
5685	Builds authorization object
5686	Turns a string into a safe string
5687	Generates a safe string based on the given character .
5688	Get value of attribute .
5689	Check if form mutator exists .
5690	Gets the reflection instance .
5691	Return favicon element .
5692	Returns link element .
5693	Displays an ol element .
5694	Displays a ul element .
5695	Get the value of a model attribute .
5696	Create text input .
5697	Create an email input field .
5698	Create a tel input field .
5699	Create a form number input .
5700	Create url input .
5701	Create color input .
5702	Get checkbox state .
5703	Get url action .
5704	Get route action .
5705	Get the controller action .
5706	Inserts a string at a given position .
5707	Searches for a given string .
5708	Sets the value at the specified index .
5709	Array access .
5710	Fetch data from the stream .
5711	Parse file .
5712	Get line count
5713	Unzip a file .
5714	Get size of url
5715	Get the files list .
5716	Frees the stream .
5717	Removes the first byte from the buffer .
5718	Seeks the iterator position .
5719	Inserts data into the buffer .
5720	Replaces the current element with the given data .
5721	Removes the element from the buffer .
5722	Publish a directory .
5723	Close the connection .
5724	Get admin 1 .
5725	Add country info to a query
5726	Search for city .
5727	Search for country
5728	Search by feature .
5729	Creates pending redirects .
5730	Checks if the given node is the same as the current workspace .
5731	Builds redirects .
5732	Creates a redirect from the old uri .
5733	Removes a redirect if needed .
5734	Check if the node is restricted by the current node type .
5735	Check if the node is restricted by path prefix .
5736	Returns all active domains .
5737	Get UriBuilder .
5738	Loads the name from the parameter value
5739	Validate URL suffix
5740	Render the page picker
5741	Label callback .
5742	Initializes the plugin .
5743	Add plugin actions .
5744	Get the current version of the plugin .
5745	Get the remote version .
5746	Check file type and extension .
5747	Check file type and extension .
5748	Parse a readme contributors section .
5749	Get plugin slug by path
5750	Get remote contributors .
5751	Validate the file
5752	Get a supported class loader
5753	Loads the content of the file
5754	Create options from environment variables .
5755	Get allowed tags .
5756	Get list of allowed protocols .
5757	Get allowed domains .
5758	Sanitize a domain .
5759	Sanitizes an attribute value .
5760	Sanitize a URI value .
5761	Sanitize CSS .
5762	Loads an SVG .
5763	Remove comments from SVG .
5764	Replicate flags .
5765	Make loader loaders
5766	PreParse loaders .
5767	Make Namespace Loaders
5768	Parse options .
5769	Creates the cache provider .
5770	Make paths .
5771	Create a loader
5772	Create the variables provider
5773	Load from cache
5774	Merge globals into content .
5775	Get a resource by filename
5776	Create a prefix for the current URL
5777	Create the resources
5778	Add content to this node
5779	Get supported files
5780	Merge parent content
5781	Internal get method .
5782	Check if array key exists
5783	Parse a value
5784	Parses the value according to the given type .
5785	Fetch variables matching regex
5786	Fetch a variable
5787	Check if a variable exists
5788	Do replacements .
5789	Exports a SVG .
5790	Removes elements from the DOM .
5791	Remove a DOMNode
5792	Set base path
5793	Make relative path
5794	Search for resources
5795	Parse content .
5796	Parses the given imports .
5797	Import a resource
5798	Create resource provider
5799	Creates an import name from a resource .
5800	Import a resource
5801	Returns a boolean value
5802	Get boolean value
5803	Get the aliases for a given file extension .
5804	Update filename extension
5805	Checks if a file is an alias .
5806	Check mime type .
5807	Loads a configuration file .
5808	Get supported files
5809	Returns an array of resources
5810	Check the cache .
5811	Create a cache file
5812	Sets the version of the assets file .
5813	Reads the contents of the file
5814	Send a HTTP request
5815	Set cURL options
5816	GET request
5817	Make a PUT request
5818	Execute a DELETE request
5819	Execute a POST request
5820	perform a HEAD request
5821	Execute the request .
5822	Install an extension
5823	Add buckets .
5824	Perform a read request
5825	Write the content to the given URI
5826	Is valid XML?
5827	Sets up this node
5828	Get values as Element
5829	Append values options option
5830	Append the aggregate element
5831	Get query params
5832	Retrieve a single resource
5833	Retrieve a key and value
5834	Retrieve a value from an element
5835	Highlight given content
5836	Get the REST client .
5837	Get the admin client
5838	Get the admin client
5839	Returns an instance of the API .
5840	Get database instance .
5841	Returns options object .
5842	Autoload a class
5843	Get the options as XML .
5844	Adds an option to a node .
5845	Adds an XML string to an option .
5846	Read a configuration
5847	Write the configuration to the database
5848	Delete a configuration
5849	Set search options
5850	Reads a document
5851	Write a document
5852	Delete a document
5853	Reads metadata from the service
5854	Writes the metadata
5855	Deletes the document metadata
5856	Set content from file
5857	Get file mime type
5858	Logs a soap call .
5859	Decode a SOAP reply
5860	Converts an associative array into an associative array .
5861	Perform an LDAP sync
5862	Returns a list of all available phone numbers
5863	Returns a list of all phones in a site
5864	Function to search by name
5865	Function to search a phone number
5866	Get a phone by name
5867	Returns a list of directories by name .
5868	Returns a list of all available device pool names
5869	Returns a list of all available site names .
5870	Get lines by site
5871	Get line details by phone name
5872	Return an array of all available card types
5873	Get an object type by its name
5874	Deletes an object type by its UUID
5875	Add capabilities .
5876	Get the latitude of the image .
5877	Get longitude from the image .
5878	Get body type
5879	Get error message
5880	Get url string
5881	Creates a REST API
5882	Deletes the API .
5883	Waits until a request is successful .
5884	Check if the API exists
5885	Get the term as Element
5886	Append term options
5887	Append facet options
5888	Append fragment scope
5889	Set the content file .
5890	Returns a single result by its URI .
5891	Get a single result by index
5892	Get a facet by name .
5893	Add constraints .
5894	Returns the extract metadata as element
5895	Add the preferred elements
5896	Returns the transform results as Element
5897	Add collections .
5898	Deletes a collection from the list .
5899	Add permissions .
5900	Deletes permissions from the role .
5901	Deletes properties .
5902	Get the metadata as XML
5903	Load a Role from XML
5904	Enable StaticProxy .
5905	Sets the container .
5906	Compare two constraints .
5907	Compare fixture indexes .
5908	Compare two fields .
5909	Get fixture files
5910	Compare the fields of a fixture .
5911	Sets the form .
5912	renders a horizontal form
5913	Returns a label .
5914	Return an error message .
5915	Create a form group
5916	Renders an action .
5917	Returns a Bootstrap button
5918	Returns an alert .
5919	Create a password field .
5920	Create a file field .
5921	Create a link tag .
5922	Create a secure link .
5923	Create a link route .
5924	Create action link .
5925	Create a mailto link .
5926	Create an empty alert .
5927	Execute regular expression .
5928	Get short message .
5929	Get data from redis .
5930	Set a value to the cache .
5931	Remove basket item .
5932	Clear all orders
5933	Updates an existing basket
5934	Get literal value
5935	Get the type of a literal
5936	Get the language of a literal
5937	Create an IRI
5938	Create a literal
5939	Check request MD5
5940	Builds XML response .
5941	Initializes the tokenizer .
5942	Tokenize input .
5943	Obfuscates the given code .
5944	Obfuscates the given identifier .
5945	Gets the default factory .
5946	Get Statement with group actor
5947	Get StatementWith StatementRef .
5948	Returns a Statement with the given id
5949	Get a statement with a sub statement
5950	Creates an option instance .
5951	Get a Statement Result
5952	Attach event listener
5953	Initialize the ViewHelper
5954	Get the file associated with the last file .
5955	Collect files .
5956	Cleans the layout .
5957	Attaches the ViewResolver
5958	Attach PDF Transformer
5959	Resolves a template file
5960	Registers an option .
5961	Gets an option .
5962	Get an activity profile document .
5963	Get an agent profile document .
5964	Get a state document .
5965	Add a behavior .
5966	Add a value to the bucket .
5967	Set default behavior .
5968	Set default value .
5969	Execute the behavior .
5970	Get a behavior instance .
5971	Set default behavior .
5972	Set the behavior .
5973	Start metrics .
5974	Stops feature metrics .
5975	Execute the behavior .
5976	Create a new collection from the collection .
5977	Get the first item from the collection .
5978	Get the last item from the collection .
5979	Return the max value of the collection
5980	Reject items from the collection .
5981	Convert items to array .
5982	Get arrayable items .
5983	Check if the given slug is enabled
5984	Parse feature map .
5985	Creates a new HashMap from an array of items .
5986	Creates a new bucket .
5987	Set the map
5988	Generates a builder for a feature .
5989	Set the bucket .
5990	Describes a set of tables .
5991	Get table schema .
5992	Create table schema .
5993	Create table .
5994	Create table fields
5995	Create a new field
5996	Create multiple relationships
5997	Create a relationship
5998	Update multiple tables .
5999	Update table properties .
6000	Update table fields
6001	Update a single field .
6002	Update multiple table relationships .
6003	Update a relationship .
6004	Delete one or more tables
6005	Deletes a table .
6006	Set the length of the field .
6007	Remove records from a table
6008	Returns the response of a paged result response .
6009	Rewinds the reader to the first row .
6010	Escapes a string for LDAP .
6011	Adds an entry to the current directory .
6012	Compare two attributes .
6013	Connect to Ldap server
6014	Opens a paged result .
6015	Binds to LDAP directory .
6016	Get an option value
6017	Add attributes to current entry
6018	Deletes an entry from the current attributes .
6019	Replace attribute values .
6020	Modify an entry
6021	Modify multiple entries
6022	Rename an entry
6023	Binds to the current LDAP server .
6024	Performs an LDAP search .
6025	Set an option on the current LDAP directory .
6026	Verify that the operation failed .
6027	Add a new set
6028	Compute the reference set .
6029	Compute the product list .
6030	Returns the names of a resource .
6031	Get resource by type and name
6032	Compare two table names .
6033	Adds a primary key constraint .
6034	Creates a create view statement .
6035	Binds a value to a statement
6036	Extract PDO type from type
6037	Extracts the type from a database column .
6038	Extract default value from a field .
6039	Add data to the request
6040	Generates query from parameters
6041	Creates an HTTP request
6042	Execute a query and return the response .
6043	Set HTTP Method
6044	Set protocol .
6045	Generates a JSON string from the given parameters .
6046	Sets the aggregators .
6047	Sets the filters .
6048	Sets post aggregators .
6049	Registers required javascript
6050	Validate all required parameters
6051	Convert all parameters to string
6052	Shows the Swagger UI
6053	Prepares migrations .
6054	Check if a column exists in a table
6055	Get column type .
6056	Update table .
6057	Drop a table .
6058	Drop all tables .
6059	Rename a table .
6060	Execute the given SQL statement .
6061	Add attachment from request
6062	Add an attachment from a file .
6063	Add content from raw data
6064	Add file from url
6065	Delete all thumbnails and files
6066	Get last modified time
6067	Returns unique file name
6068	Delete all thumbnails
6069	Delete file from disk .
6070	Delete empty directory
6071	Check if directory is empty
6072	Check if file exists
6073	Returns the path to the file .
6074	Get the thumbnail filename .
6075	Get default options
6076	Make thumb .
6077	Get the public path of the file .
6078	Get temporary path
6079	Return the type of an enum definition .
6080	Type a time column .
6081	Type a timestamp column .
6082	CURL write function .
6083	Compile assets .
6084	Bootstrap the application .
6085	Normalizes the given URL .
6086	Add route to application
6087	Add GET route
6088	Adds a POST route to the application .
6089	Add PUT route
6090	add a patch route
6091	Add DELETE route
6092	add OPTIONS route
6093	add HEAD route
6094	Renders the view .
6095	Get a source .
6096	Create a new migration .
6097	Ensure that a migration does not exist .
6098	Get stub content .
6099	Get the path to a file .
6100	Scope by a given user .
6101	Scope for a given subject .
6102	Builds an array expression .
6103	Get migration paths .
6104	Removes all compiled views .
6105	Set route parameters
6106	Set response headers
6107	Set proxy configuration
6108	Set cookies .
6109	Set a cookie
6110	Set options .
6111	Builds the request .
6112	Sets request parameters
6113	Build blueprint .
6114	Builds the table definition .
6115	Builds the commands for this table .
6116	Add a new index .
6117	Create a new float column
6118	Create a double column
6119	Create a new decimal column
6120	Specify timestamps .
6121	Set timestamps to null
6122	Add a morphs command
6123	Define a polymorphic relationship .
6124	Creates a new column definition .
6125	Create foreign key name .
6126	Adds a value to an array .
6127	Collapse the given array into an array .
6128	Reads a key from an array .
6129	Fetch value from array .
6130	Get item from array .
6131	Applies a callback to an array .
6132	Explode a pluck parameters .
6133	Compute the levenshtein algorithm .
6134	Converts a string to camel case .
6135	Converts a string to ucfirst .
6136	Formats a Location .
6137	Create a Url instance
6138	Get composer command .
6139	Builds request params
6140	Builds the headers .
6141	Build the proxy URI .
6142	Build cookies .
6143	Register a model event .
6144	Register a model event .
6145	Boot Nicer Events
6146	Remove event listeners .
6147	Creates a new location model query .
6148	Returns a location by its identifier .
6149	Get location by slug .
6150	Set a message .
6151	Overlay a message .
6152	Clear all messages .
6153	Add a command to the console .
6154	Registers all services
6155	Register prefix .
6156	Register storage service
6157	Boot the module .
6158	Adds a LIKE expression
6159	Plucks dates from a column .
6160	Find a record by its primary key .
6161	Retrieve the authenticated user .
6162	Logout the current user .
6163	Logs in a user .
6164	Retrieve a user by its identifier .
6165	Get user by credentials .
6166	Register database profiler
6167	Register view profiler
6168	Create migration file .
6169	Get the events to be recorded .
6170	Dump an array
6171	Get a variable id
6172	Generate array hash
6173	Check array recursion
6174	Check object recursion
6175	Debugging function .
6176	Main action .
6177	Describe a route .
6178	Add directories .
6179	Normalizes a class name .
6180	Loads a class .
6181	Requires a class .
6182	Loads the package manifest .
6183	Writes the manifest file .
6184	Load the translations from the drivers .
6185	Load translation file .
6186	Set query constraint .
6187	Parse read data .
6188	Create new query object
6189	Returns true if the STDOUT supports colors .
6190	Apply colors to text .
6191	Get ran migrations .
6192	Get migrations .
6193	Run the pending migrations .
6194	Run the migration up .
6195	Get migration migrations .
6196	Rollback migrations .
6197	Reset migrations .
6198	Reset migrations .
6199	Run a migration down .
6200	Prepend migration .
6201	Get migration files .
6202	Clears the loader .
6203	Defines a primary key .
6204	Defines a new column .
6205	Creates a timestampable field .
6206	Add a soft deleteable field .
6207	Add a new column .
6208	Defines a column type .
6209	Check if option exists .
6210	Check if parent is the same as the parent .
6211	Scope for live posts .
6212	Get path attribute .
6213	Create a Phalcon Crypt instance
6214	Generates the configuration cache
6215	Generate rename table SQL
6216	Boot the HasPermalink trait .
6217	Get the slug key .
6218	Find similar slugs .
6219	Execute an SQL query .
6220	Execute an SQL statement .
6221	Describe table columns .
6222	Returns the first row of a result set
6223	Executes an SQL query and returns all results as an array .
6224	Inserts data into a table .
6225	Executes an UPDATE statement .
6226	Creates a DELETE statement .
6227	Add a limit statement
6228	Check table exists .
6229	Check if a view exists .
6230	Creates a new database table .
6231	Create a view .
6232	Drop a view .
6233	Adds a new column .
6234	Specifies a column alteration .
6235	Drop a column .
6236	Adds an index to a table .
6237	Drop an index .
6238	Adds a primary key .
6239	Drop primary key .
6240	Add foreign key .
6241	Drop foreign key .
6242	Describe indexes .
6243	Describe table references .
6244	Create table options .
6245	Returns the query panel .
6246	Add a new column .
6247	Method to modify a column .
6248	Drops a column .
6249	Drops an index .
6250	Add primary key
6251	Drops a foreign key .
6252	Creates a new DB table .
6253	Creates a new view .
6254	Drops a table .
6255	Drops a view .
6256	Bind paths in the container .
6257	Check if settings table exists .
6258	Register Logger Service
6259	Boot the package .
6260	Get the fillable attributes .
6261	Check if a key is fillable .
6262	Convert from one currency to another
6263	Check if currency is active .
6264	Get all currencies .
6265	Register modules .
6266	attach listener
6267	Generate a random password reset code .
6268	Complete password reset
6269	Check reset password
6270	Complete user activation .
6271	Prompt user for input .
6272	Register currency .
6273	Route middleware .
6274	Instantiate a middleware .
6275	Returns the ReflectionClass for the given class name .
6276	Sets the value of a property .
6277	Gets the value of an object property .
6278	Invoke method .
6279	Save data to cache .
6280	Check if a key exists in the cache .
6281	Get user currency .
6282	Returns true if the coordinate is equal to another .
6283	Render block .
6284	Bind an event to an event .
6285	Sort events by priority .
6286	Unbind an event
6287	Fires an event
6288	Get the dependency injection container
6289	Check if header exists
6290	Set headers .
6291	Build the headers .
6292	Check if the coordinates match the coordinates .
6293	Get detailed message
6294	Runs the application .
6295	Registers session
6296	Returns a DateTime object as a DateTime object .
6297	Prepares output file .
6298	Get the code of a file .
6299	Parse a file .
6300	Registers services
6301	Get Node Data
6302	Finds nodes that are ancestor of given node .
6303	Applies WHERE between nodes .
6304	Applies WHERE to the query .
6305	Returns a collection of descendant nodes .
6306	Selects rows with depth .
6307	Wrap columns .
6308	Check if the model has children
6309	Set default order
6310	Moves a node .
6311	Make a gap .
6312	Patch columns .
6313	Create a patch for a column .
6314	Counts number of errors .
6315	Fixes the tree
6316	Rebuild the tree
6317	Boot the Purgeable trait .
6318	Add attributes to purgeable attributes
6319	Purge attributes from attributes .
6320	Get original purge value .
6321	Get item by key .
6322	Set item value .
6323	Remove item from collection .
6324	Save the cache .
6325	Loads the cache .
6326	Compile a function
6327	Main entry point .
6328	Handle after event
6329	Add HTTP header
6330	Get the rate limiter
6331	Update model attributes .
6332	Log a migration .
6333	Create the repository .
6334	Get table instance .
6335	Get database name .
6336	Set an attribute
6337	Append an attribute
6338	Set html content
6339	Add content to html element
6340	Register commands .
6341	Generate http routes cache
6342	Get executed SQL statements
6343	Check if the given key is too many attempts .
6344	Hit cache .
6345	Attempts to get the number of attempts in the cache .
6346	Removes an entry from the cache .
6347	Get time in cache .
6348	Generates the cache
6349	Register Filesystem .
6350	Swap the facade .
6351	Invoke the facade .
6352	Create a fresh mock instance .
6353	Check if the facade is a mock .
6354	Resolve facade instance .
6355	Process select .
6356	Process selectAll .
6357	Parse template content
6358	Process update .
6359	Attach all events
6360	Detach all space
6361	Geocode a given query .
6362	Reverse query .
6363	Get migration status
6364	Main action .
6365	Get http routes infos
6366	Set cURL options
6367	Parse curl informations
6368	Compile the constants file
6369	Starts the command .
6370	Wait for the given timeout .
6371	Stop the process .
6372	Close the process .
6373	Executes the command .
6374	Optimizes the autoload process .
6375	Generates the php file .
6376	Fills the given value with the given value .
6377	Read a property from an object .
6378	Fetch a property from an object .
6379	Get a value from an object .
6380	Set a value in an object .
6381	Register error handler
6382	Handle errors .
6383	Handle an error
6384	Resolves a migration file .
6385	Determine if the given level should be logged .
6386	Enables files .
6387	enable daily files
6388	Register logger .
6389	Set up properties
6390	Log query error
6391	Adds an item to the list
6392	Get a property .
6393	Set a property .
6394	Set object properties .
6395	Get original property .
6396	Check if a property has a cast .
6397	Returns an array of modified properties .
6398	Returns the header of the navbar
6399	Adds a dropdown submenu
6400	Add a button
6401	Flushes messages .
6402	Adds an item to the body .
6403	Add CSS styles
6404	Get user s avatar
6405	Array accessor .
6406	Returns a reference to the database connection
6407	Get or set the locale
6408	Add parameters to url
6409	Linkify links .
6410	Adds row footer tags
6411	Include CSS file
6412	Get the URL of the current request .
6413	Build POST data
6414	Get all available locales
6415	Converts language code to default locale
6416	Sets the current locale .
6417	Setup a property from options .
6418	get all status messages
6419	Gets the list of countries in the SDK .
6420	Adds an item to the list group
6421	Set the object name .
6422	Sets the color
6423	Returns the color for the given type .
6424	Performs a GET request .
6425	Performs a POST request .
6426	Creates a DELETE request .
6427	Get key from data
6428	Unset a column value
6429	Reindexes an array by column name
6430	Draws the page parts
6431	Set up context
6432	Get items count
6433	Is the body empty?
6434	Adds slashes to a string
6435	Connect to the database
6436	convert array to INSERT query
6437	Prepare SQL select
6438	Uses the given object to the given object .
6439	Add a slide
6440	Finalize the carousel
6441	Add message to loggers
6442	Add Status Message
6443	Returns tag name
6444	Gets a tag property
6445	Finalizes the modal
6446	Create a new instance of the runner .
6447	add ajax tab
6448	Triggers the trace
6449	Attach an observer to an observable sequence .
6450	Attaches an observer .
6451	Detach an observer .
6452	Detach all events for the given observer .
6453	Validate a Pod .
6454	Returns the connection .
6455	Gets the driver
6456	Generates a unique binding parameter
6457	Normalise driver exceptions
6458	Creates a database .
6459	Deletes a database .
6460	Returns information about a database .
6461	Returns a list of all databases in the current connection .
6462	Gets a database connection .
6463	Use a connection .
6464	Gets a Toolbox .
6465	Sets the model formatter .
6466	Loads a pod .
6467	Creates a new graph
6468	Rename a collection
6469	Get information about an index
6470	Load a vertex
6471	Process a save result .
6472	Convert an array of documents to Pod
6473	Convert an array into a pod .
6474	convert driver to pod
6475	Create a new Vertex
6476	Create a new Edge
6477	Create a new document
6478	Setup the model for the given pod .
6479	Determine the id of a given model
6480	Adds a command to the Transaction Manager .
6481	Validates the given type
6482	Array map function .
6483	Returns a Crawler instance .
6484	Parse URL .
6485	Parse image element
6486	Parse HTML content .
6487	Parse and return a DateTime object .
6488	Loads a class
6489	Start a coverage .
6490	Initializes the configuration .
6491	Create a new edge instance
6492	Get Inbound Edges
6493	Convert to driver document
6494	Encode an object .
6495	Creates a new collection .
6496	Deletes a collection .
6497	Renames a collection
6498	Deletes a collection .
6499	Returns information about a collection
6500	Returns information about a collection
6501	Returns the number of documents in the collection .
6502	Loads a collection .
6503	Unloads a collection
6504	Get information about an index
6505	Get geo fields for a given collection
6506	Returns a collection of entities
6507	Returns the collection name
6508	Deletes a user .
6509	Returns information about a user .
6510	Deletes all AQL functions for a namespace
6511	Returns a list of all registered user functions .
6512	Returns current platform version
6513	Returns current server version
6514	Returns the current time .
6515	Set the value of a specific property .
6516	Remove a pod property
6517	Get a system property value
6518	Set the document id
6519	Sets the distance information .
6520	Reset metadata .
6521	Returns an array representation of this object .
6522	Returns a JSON representation of this object .
6523	Returns a JSON representation of the transaction .
6524	Convert object to driver document
6525	Load document from driver
6526	Load from array
6527	Model event .
6528	Sets the To .
6529	Get the id of the to .
6530	Sets the from model .
6531	Get the from id of the object
6532	Convert to driver document
6533	Starts a transaction .
6534	Commit all operations .
6535	Clears all active transactions .
6536	Add a read collection
6537	Add a write collection
6538	Pauses the current transaction .
6539	Resumes the current transaction .
6540	Add a command
6541	Searches for commands by action and object
6542	Generate a random command id
6543	Create a new graph
6544	Deletes a graph .
6545	Get information about a specific graph
6546	Returns an array of Edges in the given vertex
6547	Returns the filters from the view variables .
6548	Renders the filterbox
6549	Render all widgets
6550	Open a filter container .
6551	Close a closing container .
6552	Open the filter form
6553	Closes the closing form .
6554	Returns true if the filter is active
6555	Return a filter button .
6556	Renders a reset button .
6557	Renders a back - to - list button .
6558	Generates a unique key for persist .
6559	Check if filter parameter is valid .
6560	Returns conditions for fulltext search .
6561	Flatten value options .
6562	Returns a list of available filters
6563	Returns a redirect URL from posted data
6564	Add list filter params
6565	Set default filters
6566	Build a prepared statement
6567	Reduces the collection to a single value .
6568	Sets the value of the given type .
6569	Maps the wrapped value to the supplied type .
6570	Register bugsnag .
6571	Make a new client
6572	Setup user detection .
6573	Sets up the project root .
6574	Add a stub to the pipeline .
6575	Starts a new pipeline builder .
6576	Creates a new pipeline with the given iterable .
6577	Set the keys of the collection .
6578	Returns a slice of the iterator .
6579	Sorts an array by a given value .
6580	Set multiple variables at once .
6581	Set page variable .
6582	Get pathname of page
6583	Get script tag by name
6584	Checks if a script list is allowed .
6585	Converts a string to a list of Unicode codepoints
6586	Generates spoofs .
6587	Get all layouts paths .
6588	Add global variables
6589	Processes the generator .
6590	Extracts a parameter from a SimpleXMLElement
6591	Extracts parameters from a SimpleXMLElement
6592	Run a git command .
6593	Sort array by date
6594	Removes an item from the feed .
6595	Replaces an item with another feed .
6596	Merge another feed
6597	Slice items .
6598	Returns a list of conflicting users .
6599	Inserts multiple records into the database .
6600	Writes the feed items
6601	Set the current element .
6602	Fetch scheduled schedules .
6603	Sort by date .
6604	Imports a config file
6605	Sets the data from the given data .
6606	Sets the source directory .
6607	Sets the destination directory .
6608	Find layout .
6609	Try to find a fallback template .
6610	Parse the document .
6611	Returns current section
6612	Returns the permalink
6613	Method to set property config
6614	Builds the steps .
6615	Get application version
6616	Filters pages by variable
6617	Sort an array by date .
6618	Creates a URL based on the given value .
6619	Minify a file
6620	Compiles a CSS file .
6621	Get readtime .
6622	Hash a file
6623	Collect pages .
6624	Renders an RSS feed
6625	Loads an RSS feed
6626	Sniff the given input .
6627	Check if input is of given type
6628	Runs the sniffer .
6629	Runs the sniff .
6630	Save a schedule .
6631	Render an RSS feed
6632	Create Item node
6633	Get feed author .
6634	Returns the URL of the comment .
6635	Check if content contains XML syntax markers .
6636	Collect taxonomies from pages .
6637	Create node pages
6638	Compile views .
6639	Compile all views .
6640	Compile a single view file .
6641	Generate diff .
6642	Parse diff .
6643	Boot extension .
6644	Finish the application .
6645	Register active extensions .
6646	Run after event .
6647	Register service providers .
6648	Writes the manifest file .
6649	Register deferred service provider .
6650	Load queued service provider .
6651	Activate an extension .
6652	Map extension aliases .
6653	Register domain awareness .
6654	Detect all available extensions .
6655	Get an option value .
6656	Publishes extension .
6657	Registers an extension .
6658	Get route .
6659	Activate an extension .
6660	Refresh an extension .
6661	Reset all active extensions .
6662	Returns true if the field should be excluded .
6663	Create an instance of Orchestra Platform .
6664	Bootstrap the application .
6665	Bootstrap extension configuration .
6666	Bootstrap the form .
6667	Bootstrap menu handler .
6668	Bootstrap sidebar placeholders .
6669	Bootstrap validation rules .
6670	Attach listener on event .
6671	Initiate the theme .
6672	Set theme .
6673	Boot theme .
6674	Resolve theme .
6675	Get all available theme paths .
6676	Get theme autoload files .
6677	Validate provided theme .
6678	Get all available themes .
6679	Render a macro .
6680	Filter a date .
6681	Verify mode .
6682	Add path .
6683	Detects Orchestra Platform Extensions .
6684	Get the contents of the manifest file .
6685	Generate the manifest config .
6686	Get composer lock data .
6687	Try to guess extension name from manifest .
6688	Guess the extension path .
6689	Resolves the package namespace .
6690	Validate an extension name .
6691	Register the view finder .
6692	Register theme .
6693	Detect all themes .
6694	Set current theme .
6695	Set theme resolver .
6696	Register extension service .
6697	Register extension config manager .
6698	Register the extension finder .
6699	Register status checker .
6700	Execute the callback .
6701	Get the scheme .
6702	Set the domain handle .
6703	Get domain .
6704	Get the route group .
6705	Check if the URI matches a given pattern .
6706	Get URL prefix .
6707	Get the root URL .
6708	Get the base URL .
6709	Resolves the base URL .
6710	Parse a YAML string .
6711	Check duplicate keys
6712	Activates a plugin .
6713	Deactivates a plugin .
6714	Register extension providers .
6715	Register extension plugin .
6716	Boot extension .
6717	Start the application .
6718	Fire extension event .
6719	Get composer autoload files .
6720	Loads an autoloader file .
6721	Processes the deprecated tags .
6722	Start the application .
6723	Generates a log message .
6724	Generate a call trace
6725	Add an alert .
6726	Asks a daemon
6727	Fork process .
6728	Get slug .
6729	Ensure the URLSlug is updated .
6730	Send the headers .
6731	Sets a cookie .
6732	Clear all cookies .
6733	Parse request arguments .
6734	Store uploaded files .
6735	returns except for given arguments
6736	Returns an array containing the keys matching the given regular expression .
6737	Return an array without htmlspecialchars
6738	Returns an array of integers in the collection .
6739	Removes all cache files
6740	Combines less files
6741	Connect to the SSH2 server .
6742	Execute command .
6743	Check if the current client is a client .
6744	Retrieve an IP Filter
6745	Create a new named pipe
6746	Register a deployer
6747	Returns the deployer .
6748	Adds a server .
6749	Set the servers .
6750	Returns the named server .
6751	Deploys a deployer .
6752	Get options from server options .
6753	Processes opening tag .
6754	Generates slug for ajax action
6755	Handle AJAX request .
6756	Trigger AJAX callback .
6757	Handle AJAX requests .
6758	Get post request
6759	Generate random hex
6760	Start profiling .
6761	Clears all session variables
6762	Is serialized string
6763	Sets the slug action .
6764	Add a method .
6765	Updates the session
6766	Clears all session data
6767	Verify that the user is a valid session .
6768	Open a session
6769	Garbage collection .
6770	Matches a route
6771	Get data page
6772	Is the page of the given page?
6773	Loads class metadata
6774	Create the condition event .
6775	Get all installed plugins
6776	Get list of plugins
6777	Loads the twig environment
6778	Set default language
6779	Check if the token is valid
6780	Get the content of a view
6781	Add a javascript variable to the script .
6782	Add a script to the page
6783	Add css file
6784	Returns the file content
6785	get content with template
6786	get all scripts
6787	Get all css assets
6788	Get install folder
6789	Check if the current controller action is allowed .
6790	Get the access rules from the roles chain
6791	Get roles chain
6792	Get user language
6793	Translates a choice .
6794	Returns the translation for the given locale .
6795	Get translation file
6796	Get translation for id
6797	Get the basic translation for the given id .
6798	Generate the toggle command .
6799	Builds the toggle command for a given attribute .
6800	Build the command for all translated attributes .
6801	Runs the application
6802	Prepare and return controller action
6803	Execute the ACL
6804	Execute authentication
6805	Execute the resolve route .
6806	Set and app libraries
6807	Get library instance
6808	Create the core and controller
6809	Calls a method and returns its value
6810	get function arguments
6811	Get the role and user associated with the given token .
6812	Get role and role from user
6813	Returns current options .
6814	Set a single parameter from an array of parameters
6815	Gets an input parameter
6816	Filters a variable
6817	Open database connection .
6818	Close a connection by name
6819	Execute an SQL query
6820	Executes a SELECT query and returns an associative array
6821	executes INSERT SQL statement
6822	Deletes a SQL query .
6823	Executes an SQL UPDATE statement .
6824	Logout action .
6825	Sets the user id
6826	Sets the username
6827	Sets the role id
6828	Sets the role name
6829	Validates the given value against the constraints
6830	Returns a list of installed plugins .
6831	Search plugin directories
6832	Searches the class for a plugin factory .
6833	Finds the first implementation of a file
6834	Returns a string representation of a closure .
6835	Executes a closure .
6836	Execute a command .
6837	Runs a command for Windows .
6838	Set path to autoloader
6839	Check if the process is running .
6840	Kill the process .
6841	Reset the log
6842	Create url from string
6843	Returns the available driver
6844	Builds the image
6845	Get proportional width
6846	Get proportional height
6847	Returns a formatted binary string .
6848	Format bytes .
6849	Create a new Session .
6850	Initialize driver .
6851	Parse the request
6852	Generates the URL for the current request .
6853	Get server parameter
6854	Get the default input definition .
6855	Register commands .
6856	Get model path
6857	Add force option
6858	Add model argument
6859	Validate model argument .
6860	Add table argument
6861	Validate table argument .
6862	Get table instance
6863	Generate file
6864	Handle the request .
6865	Is seekable?
6866	Create a parser with the given content type .
6867	Adds a body parser .
6868	Add module argument
6869	Add controller argument .
6870	Create request .
6871	Create server request .
6872	Create a stream .
6873	Create a stream from a file
6874	Create a new uploaded file .
6875	Create URI from string
6876	Format a number of bytes .
6877	Format a number .
6878	Normalizes bytes .
6879	Normalizes precision value .
6880	Returns an instance with the specified method name .
6881	Sets the URI .
6882	Returns the target string from the URI .
6883	Push a middleware onto the end of the stack .
6884	Returns the reason phrase for the given code .
6885	Get the incoming message .
6886	Get user from an incoming message .
6887	Get file extension
6888	Normalizes a filename
6889	Returns the contents of the stream .
6890	Fixes WordPress admin url .
6891	Fix WordPress include folder
6892	Fix WordPress admin URLs .
6893	Fix WordPress double slashes
6894	Initializes the framework .
6895	Set WordPress folder name .
6896	Convert URL to full path
6897	URL - encodes a path
6898	URL Path Decode
6899	Returns the content of a directory
6900	Logs a database entry .
6901	Logs a message .
6902	Record memory usage
6903	Record time loading .
6904	Write log sections
6905	Reverses a multi - dimensional array of keys .
6906	Set the stream .
6907	Returns hash of uploaded file
6908	Returns the media type of the uploaded file .
6909	Returns the query params .
6910	Check if the request is an ajax request
6911	Convert json to a document
6912	Returns an array of Entities
6913	Creates actions from data array .
6914	Returns an array of Field objects
6915	Returns an array of Link objects
6916	Sends a request .
6917	Call the given request .
6918	Prepare cURL options
6919	Set URL .
6920	Set request headers .
6921	Creates a Response instance .
6922	Splits the header into header and body .
6923	Parse header string
6924	Returns the total number of entries for a given logtype .
6925	Get the profiler .
6926	Gather files .
6927	Collect data from GET section
6928	Gather data from POST section
6929	Gather Session data
6930	Get current time
6931	Returns a summary of the log entry
6932	Create a list of uploaded files .
6933	Create an uploaded file
6934	Flips an array by keys
6935	Recursive array merge
6936	Adds the session driver to the request .
6937	Add a new menu item .
6938	Edit an existing record .
6939	Attempts to edit an object
6940	Redirect to the edit form .
6941	Order records .
6942	Deletes an entry
6943	Get uploaded files .
6944	Return an instance with the uploaded files set .
6945	Check uploaded files .
6946	Load the HTTP headers .
6947	Create a new request with the given attribute .
6948	Return an instance without the specified attribute .
6949	Checks if the given mtime is a 304 Modified
6950	Get a specific header .
6951	Set the status .
6952	Execute the middleware .
6953	Get MySQL version
6954	Authenticates the user with the given credentials .
6955	Find all users .
6956	Find all deactivated users
6957	Create a new user
6958	Get metric option .
6959	Set current language from post id .
6960	Check if the given string is an encrypted container .
6961	Check if string is encrypted
6962	Dump class
6963	Converts an array to PHP code .
6964	Runs global process .
6965	Post global process .
6966	Creates a new token for the given token types .
6967	Make a new container
6968	Recovers a record by id
6969	Processes new class extensions
6970	Processes the config classes .
6971	Process config class
6972	Processes a class .
6973	Sets the definitions .
6974	Returns a definition .
6975	Removes a definition .
6976	Sets the configuration classes .
6977	Generates all defined containers
6978	Dump the container definitions .
6979	It is an inner value
6980	Set the address .
6981	Issue a notice request .
6982	Call API method .
6983	Create response from exception
6984	Parse http response
6985	Sends a request to PerformerPermission .
6986	Waits for subscriber .
6987	Send an action result info .
6988	Format layout template files .
6989	Save data to a file .
6990	Converts a string to dashed form .
6991	Returns a slice of the string .
6992	Returns an array of indices .
6993	Get option value
6994	Validate options array argument .
6995	Creates an option instance .
6996	Sets the message to the reply stack .
6997	Returns the value of a property .
6998	Get matchers .
6999	Compare two images
7000	create gif on different images
7001	Create comparison image on different images
7002	Compares two images
7003	Add POST route
7004	Add a route to the routing table
7005	Try to match a given url .
7006	Runs the application .
7007	Redirect to another URL
7008	Parse route parameters
7009	Get the date from a file .
7010	Handle save image
7011	Make a GET request .
7012	Make a POST request .
7013	Set HTTP Authentication
7014	Get configuration value .
7015	Validate config .
7016	Get excerpt from text
7017	Handle errors .
7018	Get all content extensions .
7019	Validate Widget Id
7020	Set the user id
7021	Get documents .
7022	Append a string to the current string .
7023	Prepends a string to this string .
7024	Check if the string matches the given pattern .
7025	Limits the current string .
7026	Generate a random UUID
7027	Join Arrayable
7028	Converts this string to HTML entities .
7029	Extracts a substring from this string .
7030	Limits the string .
7031	Truncates the string .
7032	Parse the string into variables .
7033	Encrypt the string .
7034	Creates a JWT from a encrypted string .
7035	Convert to Container .
7036	Generates a parser from a grammar file .
7037	Set organization settings
7038	Get all documents .
7039	Sets the number of items per page
7040	Set the current page
7041	Get numberable value .
7042	Get a searchable value .
7043	Convert string to boolean .
7044	Get grammar .
7045	Create gif command
7046	Create a command to convert an image
7047	Get many tokens .
7048	Format this number as a string .
7049	Check if a property with the given name exists .
7050	Returns a property by name .
7051	Removes a property by its name .
7052	Check if method with given name exists
7053	Returns a method by its name .
7054	Removes a method by its name .
7055	Parse the meta .
7056	Runs a hook .
7057	Loads all plugins .
7058	Setup application route
7059	Get item by key .
7060	Set an item .
7061	Push a value to a given key .
7062	Search for a given value .
7063	Items by field .
7064	Get unique items .
7065	Get all numeric keys
7066	Joins the collection .
7067	Join items by key .
7068	Get a list of items .
7069	Splits the collection into chunks .
7070	Filters the collection using the given function .
7071	Applies a callback to an array .
7072	Merge items into current Collection .
7073	Merge item with given key
7074	Increase number of items
7075	Get a random key
7076	Get a random item from the collection .
7077	Cuts the collection .
7078	Reject items from the collection .
7079	Forget item .
7080	Reverses the collection .
7081	Group items by value .
7082	get Array except
7083	Get rest after index
7084	Get rest after key
7085	Compare two items and return a new Collection .
7086	Take items from the collection .
7087	Pull Offset Offset
7088	Returns the intersection of the current array .
7089	Specify a where condition .
7090	Create object from JSON .
7091	Create Container from file
7092	Create an instance from a serialized string .
7093	Create a new Container from an encrypted string .
7094	Create object from string
7095	Create a where condition .
7096	Get array where key is value
7097	Convert an iterator to an array .
7098	Get group by key .
7099	Filter items recursively .
7100	Remove an item from the collection .
7101	Recursively unique items .
7102	Get the value of a key .
7103	Add or edit an object
7104	Get option string
7105	Extract excerpt from given files .
7106	Fetch value from array .
7107	Remove a key from an array .
7108	Get a value from an array .
7109	Check if key exists in array
7110	Set a value in an array .
7111	Searches for a given value in an array .
7112	Render a javascript library
7113	Deny access denied .
7114	Create a new AccessToken
7115	Set the input id .
7116	Set the bounding box .
7117	Adds an autocomplete type .
7118	Removes a type .
7119	Gets the restriction for a given type .
7120	Sets the component restrictions .
7121	Adds a restriction .
7122	Removes a component restriction .
7123	Sets the input attributes .
7124	Sets an input attribute .
7125	Identify an image .
7126	Convert an image
7127	Compress an image .
7128	Compress SVG .
7129	Compress PNG .
7130	Decode data url
7131	Convert image to onepx
7132	Convert file extension to format
7133	Convert image format to extension
7134	Convert file extension to mime type
7135	Convert format to compression type
7136	Convert format to quality
7137	Set file extension .
7138	Change file extension .
7139	Parse format arguments .
7140	Sends the request to the given URL .
7141	Clean input data
7142	Get the upload limit
7143	Render a Circle .
7144	Check if version is valid
7145	Is valid dev version
7146	Check if the version is a valid stable version .
7147	Create CSRF token .
7148	Create HTML input .
7149	Verify user input
7150	Create request from globals
7151	Get the form data .
7152	Get parsed form data
7153	Get parsed response body
7154	Normalizes and validates an HTML - encoded URL .
7155	Render a map type id .
7156	Get first in email
7157	Returns the last part of a name .
7158	Convert name to acronym
7159	Convert name to var
7160	Checks if the given string is a valid HTML tag .
7161	Validate a UUID
7162	Converts a UUID into a shard id .
7163	Validate shard ID .
7164	Get the type id from a Uuid .
7165	Validate type ID .
7166	Convert a UUID into a local ID .
7167	Validate a local ID .
7168	Parse a UUID .
7169	Builds a unique identifier .
7170	Render a Polyline .
7171	Set the center of the overlay .
7172	Set the latitude .
7173	Set the longitude .
7174	Set the coordinates without wrapping .
7175	Sets the control position .
7176	Sets the scale control style .
7177	Get the geocoder status .
7178	Get data from cache .
7179	Create a sub - key
7180	Get sha1 keys .
7181	Get object from container
7182	Match string against regular expression
7183	Get template .
7184	Get strength of password .
7185	Returns a reference to the process .
7186	Checks whether or not the cache is valid .
7187	Checks the URL for the given URL and returns it .
7188	Checks the cache for the given url
7189	Checks the content of the given url .
7190	Cache memcache .
7191	Create a cache item
7192	Get cache map
7193	Get map from file
7194	Check if URL is local
7195	Check if variable is valid
7196	Converts a variable to an acronym .
7197	Convert a string to slug
7198	Convert a string to camel case
7199	Renders a Size .
7200	Check if email is role - based on e - mail
7201	Parse an address string
7202	Parse headers .
7203	Parse attachments .
7204	Parses the content type to a string representation
7205	Parses a string representation to a class
7206	Compute the difference between two floats .
7207	URL safe encode
7208	URL safe base64 decode
7209	Create a new nonce .
7210	Create a nonce input .
7211	Verify a nonce .
7212	Sets the origins .
7213	Returns a human readable representation of the time .
7214	Returns an array of items from the cache .
7215	Renders a marker .
7216	Builds json string
7217	Render a MarkerShape
7218	Renders the scale control style .
7219	Check if given slug is valid
7220	Check if a given slug is reserved .
7221	Convert slug to name .
7222	Convert slug to var
7223	Sets the coordinates .
7224	Store the cache .
7225	Scan all repositories .
7226	Parses the template file
7227	Set template variables .
7228	Check if a given file has a parent .
7229	Get parent variables .
7230	Get template file
7231	Overrides default options
7232	Renders a rotate control .
7233	Encodes a value
7234	Decodes HTML entities
7235	Calls a controller action
7236	Render a KML layer .
7237	Retrieve a value from the cache .
7238	Set a value in the cache .
7239	Clear cache by primary key
7240	Generate a unique key .
7241	Generate a fully - qualified primary key .
7242	Compare two servers .
7243	Maybe add server connections .
7244	Render an autocomplete container
7245	Renders javascripts .
7246	Renders an autocomplete .
7247	Register seeders .
7248	Close the current request
7249	Disable gzip compression .
7250	Sets the location .
7251	Set the stopover .
7252	Return a human - readable description of the upload error
7253	Set file extension .
7254	Changes file extension .
7255	Check if an option exists .
7256	Gets an option .
7257	Sets an asset option .
7258	Removes an option .
7259	Modify request attributes .
7260	Sets the zoom control style .
7261	Decodes a hash id
7262	Sets the results .
7263	Sets the response status .
7264	Check if given string is valid
7265	Returns true if the user agent is engine .
7266	Normalizes a string .
7267	Returns the URL for the specified page .
7268	Sets the distance between the distance matrix .
7269	Sets the distance of the distance matrix .
7270	Sets the destinations .
7271	Adds a destination to the request .
7272	Adds an origin coordinate .
7273	Sets the region of the address matrix .
7274	Sets the language to use .
7275	Sets the travel mode .
7276	Sets the unit system .
7277	Get the control positions .
7278	Sets the response status .
7279	Renders an overview map control .
7280	Renders a Bound object
7281	Render the extends
7282	Prints benchmark statistics .
7283	Sets markers .
7284	Sets the view helpers .
7285	Gets a helper by name .
7286	Sets the extension helpers .
7287	Gets an extension helper .
7288	Removes an extension helper .
7289	Renders the HTML container .
7290	Render the stylesheet
7291	Render javascripts
7292	Render JS libraries
7293	Renders JS before a map
7294	Renders JS after a map
7295	Renders a map
7296	Renders the javascript container coordinates .
7297	Renders the boundaries of the bound container .
7298	Renders the points .
7299	Renders the size of the container .
7300	Renders a map .
7301	Renders js containers .
7302	Renders the js container .
7303	Renders the js container .
7304	Renders the js container .
7305	Renders the js container .
7306	Renders js container rectangle .
7307	Renders the js container .
7308	Renders js container images .
7309	Renders js container markers .
7310	Render marker cluster .
7311	Render KML Container
7312	Render js container event manager
7313	Render JS container .
7314	Renders a map .
7315	Renders a map center
7316	Renders a map bound
7317	Compute the coordinates of a map .
7318	Compute the boundaries of a map .
7319	Compute points for a map
7320	Compute the sizes of a map .
7321	Compute marker images
7322	Compute marker shapes from the map .
7323	Compute the info window of a map .
7324	Render map controls
7325	Render a map control
7326	Generate a version 1 UUID
7327	Generates a version 3 UUID .
7328	Generate a version 4 UUID
7329	Generates a version 2 UUID .
7330	Get package by name .
7331	Run a callback on each item .
7332	Filter items by callback
7333	Add package .
7334	Sets the address of the request .
7335	Sets the coordinate .
7336	Set the bounding box .
7337	Sets the region of the request .
7338	Sets the request language .
7339	Loads a file .
7340	Returns route instance .
7341	Parse YAML .
7342	Sets flags on the page .
7343	Sort an array by key
7344	Returns the request method .
7345	Returns the scheme .
7346	Get request host
7347	Get the root host .
7348	Check if the current request is an SSL connection
7349	Is localhost?
7350	Sets the location type .
7351	Escapes special characters .
7352	Get all directions
7353	Overrides the original data .
7354	Overrides method data .
7355	Return an array of overload data .
7356	Overrides properties with new values
7357	Open a given URL .
7358	Sets the anchor of the image .
7359	Sets the origin of the marker image .
7360	Sets the scaled size .
7361	Sets the size of the image .
7362	Render a InfoWindow
7363	Renders the open tag .
7364	Render the info window
7365	Register module providers .
7366	Get the URL of an asset .
7367	Load routes .
7368	Check if a function is defined
7369	Render a ground overlay
7370	Emits the response .
7371	Set an item in the cache .
7372	Get a key from the cache .
7373	Unset a key from the cache .
7374	Unset a sub - key pattern .
7375	Add by reference
7376	Unset by reference
7377	Unset by reference pattern
7378	Renders a map type control .
7379	Convert a value to a string
7380	Wrapper for single quotes
7381	Converts a string to double quotes
7382	Renders the map type control style .
7383	Signs a URL
7384	Returns a search termHighlighter .
7385	Returns the shard id of a string .
7386	Assigns a string to sha1 .
7387	Sets the travel mode .
7388	Sets the prefix variable .
7389	Get country options .
7390	Generate HTML for dropdown items .
7391	Render a street view control .
7392	Normalizes a string
7393	Check if value matches given regular expression
7394	Normalizes a string .
7395	Replace special characters in a string .
7396	Converts a URL to a URI pattern
7397	Set the width unit .
7398	Set the height unit .
7399	Key generation .
7400	Check if value is valid
7401	Strip query string from url
7402	Parse a query url
7403	Build query string
7404	Adds a SHA256 signature to a URL .
7405	Remove SHA256 signature .
7406	Check SHA256 signature .
7407	Sets the coordinates .
7408	Adds a coordinate to the shape .
7409	Get a customer .
7410	Update an existing customer .
7411	Converts an amount to a given currency .
7412	Get scope entity by identifier
7413	Renders a scale control .
7414	Generates the url for a geocoder request
7415	Builds a Geocoder response .
7416	Builds a GeocoderResult object .
7417	Builds the geocoder address components .
7418	Builds a GeocoderAddress component .
7419	Builds a GeocoderGeoderGeometry object .
7420	Processes a distance matrix request .
7421	Generates the url for a distanceMatrixRequest
7422	Parse the response .
7423	Builds a distance matrix response .
7424	Builds an array of Rows from an array of rows
7425	Builds a distance matrix response from a single row .
7426	Builds a distance matrix response element .
7427	Renders a point
7428	Splits the parameter string into an array .
7429	Returns an array of parameters .
7430	Returns the current HTTP headers .
7431	Send HTTP response headers
7432	Sends no cache headers .
7433	Get status slug .
7434	Get status message .
7435	Send HTTP status .
7436	Parse header value
7437	Takes a string and turns it into HTML tags .
7438	Register migrations .
7439	Register module translations
7440	Set pixel offset
7441	Sets the open event .
7442	Renders a pan control .
7443	Get the available mouse events
7444	Sets the map type ids .
7445	Add a map type id .
7446	Set the map control style .
7447	Set a cookie .
7448	Get a cookie value
7449	Render dom event
7450	Render DomEventOnce once
7451	Renders an event .
7452	Renders an event once .
7453	Renders an animation .
7454	Render a zoom control .
7455	Get max execution time .
7456	Check if given slug is valid .
7457	Returns address components .
7458	Sets the address components .
7459	Set the partial match .
7460	Get Gravatar URL .
7461	Set the center of the map .
7462	Returns whether a map option exists .
7463	Set map options .
7464	Gets the map option .
7465	Sets a map option .
7466	Removes a map option .
7467	Returns true if the stylesheet option exists .
7468	Sets stylesheet options .
7469	Gets a stylesheet option .
7470	Sets a stylesheet option .
7471	Removes a stylesheet option .
7472	Set map type control
7473	Set the overview map control .
7474	Sets the pan control .
7475	Set the rotation control .
7476	Sets the scale control .
7477	Set the street view control .
7478	Set the zoom control
7479	Add marker .
7480	Add an info window
7481	Add a polyline
7482	Add an EncodedPolyline
7483	Add polygon
7484	Add rectangle .
7485	Add a circle
7486	Add a ground overlay .
7487	Sets a value to the cache .
7488	Delete the cache .
7489	Set direction to avoid highways
7490	Set whether or not to avoidolls .
7491	Sets the destination .
7492	Set whether or not to optimize the directions .
7493	Set the origin of the request .
7494	Set the route alternatives .
7495	Sets the region region .
7496	Sets the language .
7497	Sets the travel mode .
7498	Sets the unit system .
7499	Short description of method setWayPoints
7500	Add a new Waypoint
7501	Check if this is valid
7502	Submit JSON request
7503	Log issue .
7504	Log a review .
7505	Writes an array of lines to the log file .
7506	Clean event name
7507	Rotate log files
7508	Get response from url
7509	Parse document .
7510	Build a new document .
7511	Parse a section .
7512	Parses the metadata source .
7513	get query var
7514	Get a template
7515	Get remote OAuth .
7516	Get remote hash .
7517	Convert a string to ASCII
7518	Returns the status of the distance matrix .
7519	Strip leading characters from a string .
7520	Sets the steps .
7521	Renders a route .
7522	Builds a DirectionsResponse .
7523	Builds directions routes
7524	Builds a Route object from a route .
7525	Builds directionsLegs .
7526	Builds a DirectionsLeg .
7527	Builds directions steps
7528	Builds a DirectionsStep object from a response .
7529	Lightens the color .
7530	Darkens the color .
7531	Changes the color saturation .
7532	Change the color saturation .
7533	Combines this color with another color .
7534	Starts a new session .
7535	Check if the version is valid .
7536	Is valid dev version
7537	Check if the given version is a valid WS version .
7538	Returns a formatted date .
7539	Get time for given version .
7540	Return an instance with no - cache headers .
7541	Return a success response .
7542	Response with error
7543	Output the response .
7544	Set the legs
7545	Sets the warnings .
7546	Sets the list of possible ways .
7547	Renders the zoom control style .
7548	Returns metadata value .
7549	Issue an access token .
7550	Handle a resource request
7551	Get access token repository
7552	Adds a value to the path .
7553	Remove all slashes from a string
7554	Render Google Map
7555	Sets the elements .
7556	Renders a ControlPosition .
7557	Returns the current IP address .
7558	Get the region of an ip .
7559	Get country .
7560	Is an AJAX request?
7561	Check if request is api
7562	Gets the currently used REST action .
7563	Check if action is currently executing
7564	Subscribe a new user to a list .
7565	Get a single member
7566	Update a user s status
7567	Delete a user from a list
7568	Returns a SHA1 hash of a string .
7569	Adjusts the luminosity of a color .
7570	Cleans hex string
7571	Recursively removes numeric config arrays .
7572	Create request instance
7573	Create request body
7574	Recursively removes numeric arrays
7575	Renders a rectangle .
7576	Convert an array to html .
7577	Recursively converts an array into a DOMElement
7578	Renders a marker .
7579	Generate a license key .
7580	Returns a list of libraries used in a map .
7581	Escapes an order .
7582	Serialize a closure .
7583	Unserializes a closure .
7584	Serialize value to string
7585	Unserializes a value if it is serialized .
7586	Render embedly .
7587	Get cached embed data
7588	Embed string using WordPress .
7589	Renders an EncodedPolyline .
7590	Set the southwest coordinates of the bounding box .
7591	Set the northEast of the bounding box .
7592	Returns the center of the location .
7593	Convert binary string to bytes
7594	Get remote bytes .
7595	Builds a URL from the given parts .
7596	Renders a coordinate .
7597	Render a MarkerImage
7598	Parse an XML string into pluralization .
7599	Pluralizes an XML array
7600	Invalidate the distance matrix request .
7601	Parse a host name into an array .
7602	Unpacks parts from parts .
7603	Sets the marker position .
7604	Sets the marker animation .
7605	Sets the marker icon .
7606	Sets the shadow image .
7607	Sets the marker shape .
7608	Handle header ID callback
7609	Get first image url
7610	Filter attributes .
7611	Sets the bounding box .
7612	Get the default message .
7613	Get error messages .
7614	Get error data
7615	Add error message
7616	Adds a coordinate .
7617	Load an HTML string
7618	Minify stylesheets .
7619	Indents a node recursively .
7620	Sets the organization reference .
7621	Create the password view model
7622	Get the organization
7623	Create an error view model
7624	Add a blade file
7625	Reverse style order
7626	Add blade file
7627	Add two files
7628	Add meta data
7629	Render meta tags
7630	Controller action .
7631	Loads a file
7632	Create a query builder
7633	Processes invite email
7634	Validate email address .
7635	Get user by email
7636	Load organization .
7637	Proxy method to an organization .
7638	Gets the cursor for an organization .
7639	Find an organization by name
7640	Find user by id
7641	Find by Employee
7642	Create an organization with the given name
7643	Find a draft for a user
7644	initialize contact form
7645	Check if user is employee
7646	Update the user s permissions
7647	Set organization name
7648	Set user permissions
7649	Get the image from the set .
7650	Set contact .
7651	Get the organization employees
7652	Get employee by id or id
7653	Get employees by role
7654	Sets the creation options .
7655	Initializes the employees .
7656	Get the formular
7657	Returns the URI of the image
7658	Stores an organization image .
7659	Extracts values from an object
7660	Hydrate a value .
7661	Check if the user has create permission
7662	Configure the form .
7663	Ensure order number is correct
7664	Encrypt 3DES
7665	Creates a signature for Merchant Signature Notification
7666	Validates the signature
7667	Signs the given parameters
7668	Perform an HTTP request .
7669	Get all articles for a ticket
7670	Makes a request to the API .
7671	Make a POST request .
7672	Make a PUT request .
7673	Get Articles for ticket
7674	Get a value from the request .
7675	Get an object by ID .
7676	Get all objects
7677	Create a new object .
7678	Update the object
7679	Delete this object .
7680	Get the URL for a resource
7681	Get information about an object
7682	Method to add a ticket
7683	Search for items
7684	Remove tag from an object
7685	Deletes a shared memory block .
7686	High level function to fetch the proxy type .
7687	Get connection info
7688	Main loop .
7689	Execute the query .
7690	Iterate over the collection .
7691	Get an item from the collection .
7692	Get original source
7693	Fetches the data from the API .
7694	Validates the given permissions .
7695	Set a query parameter
7696	Set route params
7697	Makes a request transaction
7698	Save photos .
7699	Start callback .
7700	Gets an access token by code
7701	Convert hits to items
7702	Search by query .
7703	Replaces all dots except the last 3 digits .
7704	Replaces all dots except the last 2
7705	Replaces all dots except the last letter .
7706	Converts IntlFormatter to malot formatter
7707	Converts malot formatter to intl formatter
7708	Adds picker configuration .
7709	Bind Alexa Request .
7710	Register middleware .
7711	Resumes an audio file .
7712	Return the AlexaRequest instance .
7713	Add the middleware to the beginning of the request .
7714	Check if the given route matches the given route .
7715	Instantiate a new AlexaRoute instance .
7716	Get session value
7717	Update a slot .
7718	Get Alexa validator .
7719	Compile the route .
7720	Get the certificate from the request .
7721	Prepares the response data .
7722	Send a request through the router .
7723	Gather the application middleware .
7724	Save certificate .
7725	Retrieve a certificate from the store .
7726	Calculates the file path for the given certificate .
7727	Sets custom words .
7728	Capitalizes a string .
7729	Normalize input .
7730	Processes string parts
7731	Process first sentence words in parts .
7732	Process the last word in the parts .
7733	Processes a word
7734	Replace string with replacement
7735	Returns a list of professional suffixes
7736	Breaks a string into an array of words
7737	Check if a word is a salutation
7738	is line suffix
7739	Generate emoji constants
7740	Pops a string .
7741	Escapes an emojified string .
7742	Returns the first word of a string .
7743	Check if the given value is a string .
7744	Returns the last word of a string .
7745	Converts a string to lowercase .
7746	Converts string to Markdown .
7747	Read time of a string .
7748	Convert text to smartypants .
7749	Gets the substring after the first occurrence of a separator .
7750	Gets the substring after the last occurrence of a separator .
7751	Gets the substring before the first occurrence of a separator .
7752	Gets the substring before the last occurrence of a separator .
7753	Converts a string to titleize .
7754	Trims whitespace from a string .
7755	Trims whitespace from a string .
7756	Trims whitespace from a string .
7757	Converts a string to typography .
7758	Converts a string to upper case
7759	Wrapper for widont
7760	Get setting by name
7761	Returns the icon data as an array .
7762	Convert to array .
7763	Display blog settings .
7764	Display post .
7765	Store a newly created tag .
7766	Edit tag .
7767	Update the tag .
7768	Remove the tag .
7769	Display index page .
7770	Clear the cache .
7771	Store all files in the archive .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Handle configs .
7775	Handle translations .
7776	Register views .
7777	Display the profile page .
7778	Update the user profile .
7779	Handle the authenticated user .
7780	Get the current version
7781	Get post fill data .
7782	Enable an extension .
7783	Disables an extension .
7784	Uninstalls an extension .
7785	Migrate extension .
7786	Get enabled bootstrappers .
7787	Sanitise input .
7788	Index page .
7789	Get post fields from model .
7790	Get tag index data .
7791	Normalize blog index data .
7792	Store a newly created post .
7793	Update an existing post
7794	Publish the given theme .
7795	Publish theme views .
7796	Removes all themes .
7797	Returns the default theme .
7798	Get active plugin .
7799	Get route middleware
7800	Get route middleware
7801	Get admin middleware
7802	Get blog main path
7803	Get blog prefix
7804	Get admin prefix
7805	Get auth prefix
7806	Get password prefix
7807	Index page .
7808	Get the XML for the generate request .
7809	Scan file .
7810	Multiscan file
7811	Contscan a file .
7812	Receive a response from the server .
7813	Process single file .
7814	Validate a file
7815	Sanitizes a file name .
7816	Deletes a file
7817	Moves an uploaded file .
7818	Get all available themes .
7819	Get asset url
7820	Get version of asset
7821	Get theme path .
7822	Make directory .
7823	Make file .
7824	Get the assets path
7825	Get template file
7826	Create new assets .
7827	Fetches the translation of a message
7828	Update a translation
7829	Flags a translation .
7830	Create an asset for a message .
7831	Downloads all translations
7832	Upload all translations .
7833	Synchronize translations .
7834	Load messages into the target directory .
7835	Copies values from parent to project .
7836	Add a hash to the script source
7837	Gets the header value .
7838	Search class map .
7839	Search for PSR - 4 maps .
7840	After save callback .
7841	Before query .
7842	After query is executed .
7843	Synchronize new items .
7844	Synchronize an existing Habage item .
7845	Find a product item .
7846	Check the integrity of an item .
7847	Build item data .
7848	Sets the attributes of an entity .
7849	Setup default criteria .
7850	Perform action .
7851	Execute before or after action
7852	Validate the given action .
7853	Performs the query .
7854	Set paginate .
7855	Toggles exceptions .
7856	Applies criteria to query
7857	Update an entity .
7858	Fetch a list of rows .
7859	Find by key
7860	Find by criteria .
7861	Get objects by criteria .
7862	Get models by keys .
7863	Returns a list of all rows .
7864	Create a new query builder with the given attributes .
7865	Replace placeholders with values .
7866	Sets the view path .
7867	Send file to browser
7868	Get the content type of the file .
7869	Maps an action to a DispatchInfo object .
7870	Sets an aspect .
7871	Sets a pointcut .
7872	Get a specific pointcut
7873	Returns a list of candidate files for the given path .
7874	Check if file is scansable
7875	Converts an error type to a human readable string .
7876	Dispatches an action
7877	Invoke controller action .
7878	Returns true if there is an activity .
7879	Returns the bean definition .
7880	Search and replace properties .
7881	Returns an array of constructor arguments for the given definition .
7882	Instantiate a bean by its constructor .
7883	Instantiates a bean by its factory .
7884	Instantiates an instance of the given bean .
7885	Instantiate a bean .
7886	Create the bean dependencies .
7887	Apply an aspect to the target class .
7888	Internal method to apply all aspects of the bean .
7889	Apply all aspects of the bean .
7890	Apply aspects to the bean definition .
7891	Creates a bean .
7892	Initializes the bean .
7893	Injects a non - setter method .
7894	Injects a property of a bean .
7895	Get a bean
7896	Returns the container instance .
7897	Fill the bean
7898	Signal handler .
7899	Loads a class
7900	Creates a new child bean with the given name .
7901	Populate classes per annotations .
7902	Loads an XML file .
7903	Loads the XML file .
7904	Close socket .
7905	Opens the socket .
7906	Free a peer
7907	Create proxy class
7908	Creates a function signature
7909	Generate code for a method
7910	Creates a proxy class .
7911	Loads a YAML file .
7912	Loads the YAML file .
7913	Initializes the connection .
7914	Opens the connection .
7915	Retrieve cache from options
7916	This method is invoked by the lifecycle .
7917	Calls the beforeCreate method .
7918	Triggers the after create event .
7919	Calls the beforeAssemble method .
7920	Triggers the afterAssemble method .
7921	Open the log file .
7922	Get interceptors for method
7923	Returns the exception interceptors for the given method
7924	Call all interceptors
7925	Invokes the registered interceptors
7926	Invokes registered interceptors
7927	Closes the socket .
7928	Read data from the socket .
7929	Open a TCP connection .
7930	Adds an array of objects to the collection .
7931	Builds the URI
7932	Overwrite the application config .
7933	Resolves a file path .
7934	Get published dropdown list .
7935	Finds the page model based on its alias .
7936	Build a link .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Registers translations .
7939	Registers plugin scripts
7940	Returns the vote for the given object .
7941	Get the from address
7942	Loads a user by username
7943	Hydrate a user
7944	Creates a new user
7945	Sets a user s password .
7946	Check user password .
7947	Check if user is logged in
7948	Finds one user by criteria
7949	Builds a SELECT query based on the given criteria .
7950	Create common find sql
7951	Returns the number of rows matching criteria
7952	Inserts a user into the database .
7953	Updates an existing user
7954	Deletes a user from the database .
7955	Validate the given user .
7956	Clears the identity map for a user
7957	Log in as a user
7958	Initializes the signal handler .
7959	Start a worker .
7960	Waits for workers .
7961	Get a result from the pool .
7962	Get all pending processes
7963	Apply a process to the pool
7964	Get number of pending jobs
7965	Send data to a socket
7966	Fetch data from a socket
7967	Migrate down data from the database .
7968	Registers a user .
7969	Confirmation action .
7970	Displays the login page .
7971	Resend a confirmation email .
7972	Displays the specified user .
7973	Edit a user .
7974	Validates the data .
7975	Connects to the user .
7976	Get the formats priorities .
7977	Get formatter .
7978	Format the payload .
7979	Detect an environment file .
7980	Get the type of the response .
7981	Builds the middleware
7982	Run the application .
7983	Handle an action .
7984	Return the payload .
7985	Invoke the responder .
7986	Set the status .
7987	Get command from resource .
7988	Run before commands .
7989	Get per page value
7990	Add where statements to query .
7991	Bootstrap the package .
7992	Set allowed HTTP methods .
7993	Get or set the pattern for this route .
7994	Tokenize the pattern .
7995	Retrieve the regular expression .
7996	Returns the compiled template variables .
7997	Check if the given request matches the route .
7998	Builds the variables .
7999	Dispatches the route .
8000	Generates a URL for the current page .
8001	Compiles the regex .
8002	Check if a given request matches the current route .
8003	Generate a URL .
8004	Tokenize pattern .
8005	Tokenize a pattern
8006	Tokenizes a pattern expression
8007	Splits a pattern into segments .
8008	Parse a token .
8009	Creates a namespace with the given options .
8010	Binds a route to the router .
8011	Register a route group .
8012	Routes the given request .
8013	Normalizes the request .
8014	Routes the given request .
8015	Get link for named route .
8016	Clears the router .
8017	Creates JS code for the workflow .
8018	Returns the contents of the file .
8019	Get a new token .
8020	List address books
8021	Get email addresses from book
8022	Add email addresses to address book
8023	Get campaign cost
8024	Create new campaign
8025	Add new sender
8026	Activate a sender
8027	Get list of subscriptions for a website
8028	Change subscription state
8029	Create a push task
8030	Create a unique name for the sendpulse API .
8031	Sends a POST request to the website .
8032	Send request to API .
8033	Pre send to API
8034	Decode a single line - encoded response .
8035	Decodes a URL - encoded response string
8036	Fetch emails from the inbox
8037	Mark message as processed .
8038	Get type of mail
8039	Creates an auto refund .
8040	Auto - apply SSL
8041	Perform an auto - replace operation
8042	Perform an auto revoke SSL .
8043	Collect SSL data
8044	Get a list of CVEM email addresses
8045	SSL Checker
8046	Send web host report
8047	Enter the Domain Control Code
8048	Creates an exception based on the response array
8049	Generates meta tags
8050	Set the description .
8051	Reset the content
8052	Register services .
8053	Generates the html for the open graph
8054	Add raw data
8055	Prepare data .
8056	Check if a URL exists in the sitemap .
8057	Validate the sitemap data .
8058	Fill by index .
8059	Fill values with given type .
8060	Specify an index to be used for the query .
8061	Sets the type of the query .
8062	Set index settings
8063	Delete an index .
8064	Creates a new index .
8065	Updates the index settings .
8066	Execute the command
8067	Convert body to JSON
8068	Sort .
8069	Set the query s facets .
8070	Composes final query
8071	Converts an array of parameters to an array .
8072	Adds a node to the cluster .
8073	Adds a filter to the query .
8074	Delete a document
8075	Set the documents .
8076	Execute the execute command .
8077	Add a new request
8078	Make a POST request .
8079	Make a PUT request .
8080	Creates HTTP DELETE request .
8081	Execute the requests in parallel .
8082	Add additional options
8083	Add a random node to the request
8084	Autodetect nodes
8085	Add a document to the current batch command .
8086	Execute the command .
8087	Finalizes the current command .
8088	Check if the current command is being updated .
8089	Get a gallery attached to a model .
8090	Get init album
8091	Create an initial Album
8092	Generates an album name
8093	File upload action
8094	Deletes image versions .
8095	Get resize to size
8096	Add image styles
8097	Deletes all image versions
8098	Save a picture
8099	Create extra images .
8100	Class constructor .
8101	Prepare an image
8102	Configure Gallery
8103	Initializes the database .
8104	Create the config file
8105	Check summary .
8106	Generate code from service definitions
8107	Renders a link to upload pictures
8108	Renders a photo element
8109	Display a showroom message
8110	Loads the required scripts .
8111	Deletes a picture
8112	Action for sorting
8113	List channel sections
8114	Starts the worker .
8115	Stop the process .
8116	Kill the process
8117	Send payload to socket
8118	Called when the worker starts
8119	Fork a new thread
8120	Create AuthnRequest
8121	Parse a SAML Response .
8122	Returns an array of binary binaries .
8123	Get pending binaries .
8124	Update binaries .
8125	Update a binary
8126	Start selenium process .
8127	Removes all generated files
8128	Asserts that the selenium binary is valid .
8129	Register binaries in the process .
8130	Create a binary .
8131	Get a valid URL value
8132	Returns the Linux file name .
8133	Save the file to the given directory .
8134	Handle notification .
8135	Watch progress .
8136	Get the message that is up to update binary .
8137	Get the post message .
8138	Add a pipe to the pipeline .
8139	Convert an item
8140	Convert item value
8141	Write an item
8142	Get the transport from the request .
8143	Validates the password .
8144	Get the taxonomy for the given entity .
8145	Validate the value .
8146	Describes the constraints for the node .
8147	Get an environment variable .
8148	Get client ip .
8149	Get current URL
8150	Unparse query string
8151	Checks if a property is set .
8152	Lookup an address
8153	Executes the inclusion of the given value .
8154	Execute action of config file
8155	Down the array .
8156	Get an item up .
8157	Updates the form read .
8158	Get field from payload .
8159	Returns the matching item with the given uuid .
8160	Call a callback on an item .
8161	Get an item from the form .
8162	Replace variables with their values .
8163	Load configuration data
8164	Load configuration from url
8165	Set LatLng
8166	Returns the latLng object
8167	Return an error response .
8168	Redirects the user to the form .
8169	Create a form aggregate .
8170	Removes an item from a form .
8171	Check if the autoload dump is enabled .
8172	Get the plugin class names .
8173	Get install name .
8174	Guesses the install name from a package name .
8175	Map root package extra value
8176	Writes a plugin config .
8177	Get root package .
8178	Get install path .
8179	Initializes the install directory
8180	Generate the palettes .
8181	Get the meta palette of a palette .
8182	Creates an exception for a given context .
8183	Enter the theme context .
8184	Build context config .
8185	Returns the color for the given identifier .
8186	Rotates the color .
8187	Converts the given HSV value to RGB .
8188	Enter the context .
8189	Moves the current context .
8190	Switches the current context .
8191	Load config from bundles .
8192	Set service type argument .
8193	Get template groups
8194	Render the page picker .
8195	Get all articles
8196	Get all modules
8197	Prepares template .
8198	Parse the given template .
8199	Registers services tagged with given tag .
8200	Initializes the environment .
8201	Initialize the layout .
8202	Adds a child to the element .
8203	Compiles a PHP file .
8204	Compiles a node
8205	Throws a Pug exception .
8206	Converts doctrine type to PHP type .
8207	Returns the FileReflector for the given class .
8208	Get doc block
8209	Get the docblock from a property .
8210	Extracts the doc block from a method .
8211	Returns the php type and class .
8212	Logs in the API .
8213	Initializes the HTTP client .
8214	Get the login token .
8215	Searches for a given query .
8216	Extracts a value from the extractors array .
8217	Get tags .
8218	Downloads the image .
8219	Get all the wall papers .
8220	Downloads all images in the specified directory .
8221	Extract type from a mutator .
8222	Extract type from accessor
8223	Extract type from reflection .
8224	Check if property is public
8225	Returns the accessor method .
8226	Returns the ReflectionMethod for the given property .
8227	Get property name from method name
8228	Loads the Laravel services .
8229	Create an application
8230	Sets a value
8231	Set multiple configuration values .
8232	Removes a section .
8233	Merges a section
8234	Renames a value .
8235	Renames a section
8236	Reads ini file
8237	Reads and merges an INI file .
8238	Merges the contents of an INI object into the given object .
8239	Convert a value to a string .
8240	Set a value to the current ini content .
8241	Set the contents of the current ini content .
8242	Returns the values of all modifiers .
8243	Removes a configuration value .
8244	Removes the specified section .
8245	Sets a configuration value .
8246	Set a value on the master .
8247	Set values on master reader
8248	Get value from master master .
8249	Get master section values
8250	Removes a value .
8251	Removes a value from the master .
8252	Check if a section exists .
8253	Get all values of a section .
8254	Create a file loader .
8255	Returns the class name for the given short type .
8256	Make a new cookie
8257	Execute the converter command
8258	Determine the file to use .
8259	Choose bundle .
8260	Writes the configuration to a file .
8261	Create dumper .
8262	Converts a string to another format
8263	Read session from storage
8264	Get the routes .
8265	Sort an array .
8266	Sets the stream offset .
8267	Gather data .
8268	Put content to file .
8269	Get options reader .
8270	Run the given route .
8271	Gather the route middleware .
8272	Flatten an array .
8273	Load configuration files .
8274	Get a closure that can be used to create a middleware .
8275	Parse the stage string .
8276	Call a command .
8277	Sets the default values for a command .
8278	Get the current PHP binary .
8279	Get Crebroker binary
8280	Runs a Symfony command .
8281	Returns the default input definition .
8282	Builds RouteData from array of routes .
8283	Add route to given node .
8284	Get the first segment matcher .
8285	Create a new filesystem manager .
8286	Create a Cached factory .
8287	Get the total number of executed statements .
8288	Get the memory usage .
8289	Profile method call .
8290	Resolve alias .
8291	Returns true if the route matches the given pattern and translation .
8292	Create TwigEngine .
8293	Extend view factory .
8294	Extend Twig Engine Resolver .
8295	Create Twig Environment .
8296	Create Twig loader .
8297	Parse data .
8298	Create a rule .
8299	Create a negative or optional validator .
8300	Create a new rule based on given rules .
8301	Parse a string rule .
8302	Parse the parameters .
8303	Starts a web server .
8304	Stop web server .
8305	Returns the address of the process .
8306	Check if the process is running .
8307	Creates a process instance .
8308	Get all event listeners .
8309	Removes a listener from the given event pattern .
8310	Check if subject contains wildcards .
8311	Add listener pattern
8312	Read mandatory option .
8313	Build a multidimensional array .
8314	Returns a ResponseInterface instance .
8315	Get response .
8316	Get the displayer .
8317	Filter displayers .
8318	Get the first accepted filter .
8319	Add actions to the route .
8320	Add addresses .
8321	Create assets renderer .
8322	Register base collectors .
8323	Register collectors from config .
8324	Extend event manager .
8325	Create a new session manager .
8326	Create route dispatcher .
8327	Create router .
8328	Create url generator .
8329	Detect the application environment .
8330	Get an environment argument .
8331	Returns a JS response .
8332	From array .
8333	Processes an array of arrays .
8334	Get pretty metadata .
8335	Get the loader paths .
8336	Builds table rows .
8337	Get Whoops instance .
8338	Add where clauses to route .
8339	Merge group attributes into route .
8340	Convert action to controller action .
8341	Prepend the given uses .
8342	Prefix the URI .
8343	Update the route group .
8344	Create a new Sanitizer .
8345	Adds a before bootstrapping callback .
8346	Add after bootstrapper .
8347	Bootstraps the application .
8348	Call callbacks .
8349	Generate session id .
8350	Merge new flashes .
8351	Loads the session .
8352	Read from handler .
8353	Writes the data to the handler .
8354	Resolves the current page .
8355	Secure input .
8356	Extend event manager .
8357	Get files .
8358	Get twig files .
8359	Validate template .
8360	Display details .
8361	Display text .
8362	Parse a middleware group .
8363	Check mandatory options .
8364	Get the configuration dimensions .
8365	Validate options .
8366	Check deprecated options .
8367	Register a resource .
8368	Get the resource URI .
8369	Get the resource wildcard .
8370	Get the resource prefix .
8371	Add resource destroy route .
8372	Get the resource URI .
8373	Get resource action .
8374	Get resource route name .
8375	Slice through the container .
8376	Get a middleware .
8377	Find arguments .
8378	Returns the client s IP address .
8379	Checks if the given string is a valid IP address .
8380	Get the first IP address from a header .
8381	Set domain .
8382	Validate input .
8383	Validate the middleware class .
8384	Create translation manager .
8385	Create schedule .
8386	Get computed data .
8387	Creates a Swift_Mailer instance .
8388	Create the mailer .
8389	Set global address .
8390	Create a tooltip group
8391	Create tabs .
8392	Create table .
8393	Create html for dropdown menu
8394	Creates the metrics .
8395	Duplicate a variable
8396	Get the VarCloner instance .
8397	Returns the HTML Dumper .
8398	Append code .
8399	Append a line to the code .
8400	Add extensions .
8401	Sort middleware by priority .
8402	Move middleware .
8403	Create an instance of the aggregate driver .
8404	Create an instance of the logger .
8405	Creates a Monolog driver .
8406	Create a new Monolog driver .
8407	Create an instance of the syslog driver .
8408	Create an instance of the error log driver .
8409	Create a Slack logger instance .
8410	Create custom logger driver .
8411	Create a Monolog driver .
8412	Push processors to Monolog driver .
8413	Create server request from array .
8414	Returns the singular form of the given value .
8415	Matches a string with a case insensitive comparison .
8416	Connects to the local server .
8417	Create console application .
8418	Merge two groups .
8419	Format group suffix .
8420	Check for a specific environment file .
8421	Set environment file path .
8422	Get a transport instance .
8423	Create a new transport instance .
8424	Check if transport exists .
8425	Create the SMTP transport .
8426	Create MailgunTransport instance .
8427	Create a SparkPostTransport .
8428	Create a new SESTransport instance .
8429	Create repository instance .
8430	Update the route tree with new matchers .
8431	Register console events .
8432	Extend Twig Environment .
8433	Register the twig extension .
8434	Get allowed HTTP methods .
8435	Add route .
8436	Returns true if the stream is a pipe .
8437	Add a mime type
8438	Add a parser .
8439	Parse the payload .
8440	Get parser by type .
8441	Get format from payload .
8442	Sets up the configuration
8443	Get the request duration .
8444	Stops a measure .
8445	Add a new measure .
8446	Identify the given exception .
8447	Generate a version 4 UUID .
8448	Sets the headers .
8449	Validate the HTTP protocol version .
8450	Check if array contains only strings .
8451	Filter header value .
8452	Get the retry time .
8453	Get invoker .
8454	Creates an exception when a configuration value is invalid .
8455	Extend cache item pool .
8456	Extend the traceable cache decorator .
8457	Get an environment variable .
8458	Parse parameter .
8459	Replace the placeholder .
8460	Creates the table
8461	Get PDO connection .
8462	Connect to the database .
8463	Get files .
8464	Render assets into HTML .
8465	Get the last modified time of assets .
8466	Run the callback .
8467	Create a new cron job without overlapping .
8468	Extend the LogManager .
8469	Extend profiler .
8470	Import SimpleXMLElement into SimpleXMLElement .
8471	Loads a DOMDocument from a file .
8472	Loads a DOMDocument from an XML string .
8473	Converts a value to its PHP equivalent .
8474	Validates a DOMDocument .
8475	Converts a string to a string .
8476	Check if a message contains a header .
8477	Add references .
8478	Processes an obsolete entry .
8479	Process previous entry .
8480	Extract multi - line entries .
8481	Extracts the headers .
8482	Check if the given file is a file .
8483	Set error status .
8484	Set the stream .
8485	Validate the stream .
8486	Mock a service .
8487	Parse a command expression .
8488	Parse command argument .
8489	Parse an option .
8490	Extracts the description from the token .
8491	Validates the given cookie name .
8492	Validates the cookie value .
8493	Set value for key
8494	Get the to addresses .
8495	Create MongoDB driver .
8496	Create a Redis cache pool .
8497	Create a Predis cache pool .
8498	Create a filesystem cache driver .
8499	Create a Memcached cache driver .
8500	Create a Memcache cache driver .
8501	Get data collector by name .
8502	Compiles the router .
8503	Create router class template .
8504	Compiles a route tree .
8505	Compiles http method match .
8506	Compile a disallowed HTTP method or not .
8507	Compiles a found route .
8508	Get DebugProcessor
8509	Compute the count of errors .
8510	Group log levels .
8511	Returns the listener
8512	Bind listener to event manager
8513	Removes all events from the given dispatcher .
8514	Create a regular expression for the given event pattern .
8515	Get a value by key .
8516	Set value by key .
8517	Process parameters .
8518	Processes the given parameter .
8519	Render exception .
8520	Render exception .
8521	Renders the exception trace .
8522	Get the backtrace .
8523	Get traced frames .
8524	Format arguments .
8525	Get file lines .
8526	Get file contents
8527	Normalize path name .
8528	Resolve binding .
8529	Resolves a class .
8530	Resolves method .
8531	Resolve a parameter .
8532	Resolves parameters .
8533	Get method reflector .
8534	Check if value is a function .
8535	Merges parameters .
8536	Encrypts a string .
8537	Put contents to the file .
8538	Update stream .
8539	Decrypts a file .
8540	Encrypts a file .
8541	Decrypt given string .
8542	Encrypt given string .
8543	Create a stream from string
8544	Create transport factory .
8545	Create mail manager .
8546	Get the version number from an XML document .
8547	Returns the schema for the given xliff version .
8548	Fixes the schema location .
8549	Parse the visibility .
8550	Sanitize data .
8551	Run global sanitizers .
8552	Sanitizes a field .
8553	Executes the sanitizer .
8554	Resolve the callback .
8555	Resolves a command .
8556	Creates command from expression expression
8557	Gets the default values from a callable .
8558	Ensures that the callable is valid .
8559	Check if the callable is a static method .
8560	Create a cookie jar .
8561	Convert an array to XML .
8562	Add a node to the DOM .
8563	Add collection node .
8564	Create root element .
8565	Cast object .
8566	Get all called listeners .
8567	Get the list of not called listeners .
8568	Validate the same site .
8569	Normalizes the expiration time .
8570	Normalize domain name .
8571	Normalize path .
8572	Get the expiration timestamp .
8573	Starts a new profiling event .
8574	Apply translation helpers .
8575	Extract helpers from translation string .
8576	Apply filters .
8577	Log translation .
8578	Collects message .
8579	Display files .
8580	Displays JSON output .
8581	Get all files in a given directory .
8582	Get input from STDIN .
8583	Get directory iterator .
8584	Validates the given event name .
8585	Converts a number to bytes .
8586	Converts the given number to an integer .
8587	Get config from name .
8588	Create an extension .
8589	Add a extractor .
8590	Create an alias loader .
8591	Get the cache path .
8592	Push command to queue .
8593	Check if a command should be queued .
8594	Create the cookie driver .
8595	Create an instance of the Migrating session driver .
8596	Create a cache based on the given driver .
8597	Builds the session .
8598	Build an encrypted session store .
8599	Parse action .
8600	Returns the first element in the array
8601	Parses a notes element .
8602	Converts UTF - 8 to charset .
8603	Tag with given tag
8604	Create log manager .
8605	Confirm to proceed .
8606	Get the default confirm callback .
8607	Inject the profiler .
8608	Collect data .
8609	Creates the template .
8610	Creates a profile .
8611	Parse log level .
8612	Start session .
8613	Set the current URL to the session .
8614	Collect garbage .
8615	Add a cookie to the response .
8616	Create response view
8617	Find a template by name .
8618	Normalizes the file name .
8619	Parse view .
8620	Add content to message .
8621	Send Swift message .
8622	Send message .
8623	Create message .
8624	Call message builder .
8625	Create view .
8626	Handle the matched route .
8627	Prepare the URI path .
8628	Generate router file .
8629	Generate directory .
8630	Returns the path to a file .
8631	Checks the given options .
8632	Get parser .
8633	Get a file .
8634	Require a file .
8635	Creates symlink .
8636	Set directories .
8637	Add a directory .
8638	Import a file .
8639	Add messageCatalogue .
8640	Set a language fallback .
8641	Get language fallback .
8642	Add presenter .
8643	Check for more pages .
8644	Get display address .
8645	Finds the front controller .
8646	Find hostname and port .
8647	Find the best available port .
8648	Escape HTML .
8649	Sort data .
8650	Creates an append stream .
8651	Parses tokens .
8652	Seeks to the next whitespace .
8653	Returns the value of the given token .
8654	Create a TraceablePDor .
8655	Decrypt the cookies .
8656	Encrypt cookies .
8657	Create a new SetCookie instance .
8658	Register a command .
8659	Get console instance
8660	Initializes the project directories .
8661	Find a named path view .
8662	Get namespace segments .
8663	Find a view in the available paths .
8664	Get possible view files .
8665	Get event info .
8666	Render the Set - Cookie header into a Response .
8667	Extends the Twig Environment .
8668	Get messages sorted by time .
8669	Adds a message to the report .
8670	Alias a middleware .
8671	Get logs from socket .
8672	Handle view exception .
8673	Get error exception .
8674	Get cache path
8675	Ensure that a statical proxy exists .
8676	Format a statical proxy stub .
8677	Register the Markdown engine .
8678	Clean export string .
8679	Adds the tcomment to the output .
8680	Adds references to the output .
8681	Adds flags to the output .
8682	Adds the previous entry to the output .
8683	Add msgid to output
8684	Add plural plural to file
8685	Adds a msgstr to the output .
8686	Add headers to message .
8687	Get pagination links .
8688	Create cache connector .
8689	Ensure command is correct .
8690	Check cron expression .
8691	Run the command in the foreground .
8692	Run the command in the background .
8693	Call all before callbacks .
8694	Call after callbacks .
8695	Returns a closure that is within a time interval .
8696	Checks if start time is between start and end time .
8697	Merges two matchers .
8698	Optimizes an array of matchers .
8699	Optimizing a matcher .
8700	Optimizes the matchers .
8701	Create html displayer .
8702	Create ViewDisplayer .
8703	Create a Whoops pretty displayer .
8704	Get the number of recipients .
8705	Bootstrap the application .
8706	Handles the request .
8707	Render exception .
8708	Pipe the request through middleware and router .
8709	Compile parameters .
8710	Set the value at the specified offset .
8711	Get invoker .
8712	Bind a plain .
8713	Bind a service .
8714	Add a singleton binding .
8715	Resolve the given abstract .
8716	Resolve an abstract type .
8717	Resolves a singleton binding .
8718	Extend resolved binding .
8719	Format the binding implementation .
8720	Get message id from response .
8721	Convert emails array to string
8722	Get the first part of a message .
8723	Get the payload for the message .
8724	Process the recipients .
8725	Process message parts .
8726	Process the headers .
8727	Check requirements .
8728	Get an extension .
8729	Get view instance .
8730	Check if a string ends with another
8731	Render the cookies into the given request .
8732	Parse a set of cookies .
8733	Sets the error .
8734	Sets the exit code .
8735	Builds the URI for the given route .
8736	Prepare route path .
8737	Is the scheme required?
8738	Adds the port and scheme to the URI .
8739	Replace route parameters .
8740	Replace named parameters .
8741	Adds the query string to the given URI .
8742	Get route query string .
8743	Parse where expression .
8744	Get controller middleware .
8745	Get the list of disabled middleware .
8746	Adds a cookie to the collection .
8747	Split a cookie pair .
8748	Injects the Content - Type header .
8749	Returns a number of words .
8750	Returns a random string
8751	Replaces the first occurrence of a substring in a string .
8752	Replace the last occurrence of a string in a string .
8753	Replace part of string by position .
8754	Returns the verbosity value .
8755	Runs the application .
8756	Call command .
8757	Call console command .
8758	Returns a command argument .
8759	Get command options
8760	Asks a question
8761	Ask a question with a list of choices .
8762	Asks a user to choose a choice .
8763	Renders a table .
8764	Prints a line .
8765	Shortcut for line info .
8766	Output a comment .
8767	Shortcut for a line .
8768	Shortcut for line error
8769	Writes a warning message .
8770	Configures the command using a fluent definition .
8771	Specifies command arguments .
8772	Extracts the id from the response .
8773	Get recipients .
8774	Render template .
8775	Add not report exception .
8776	Report an exception .
8777	Add transformer .
8778	Handle errors .
8779	Handle shutdown .
8780	Register exception handler .
8781	Register shutdown handler .
8782	Prepare the given exception .
8783	Returns the transformed exception .
8784	Returns the log level for the given exception .
8785	Determine if the given exception should not be reported .
8786	Add dumper .
8787	Convert array to string
8788	Get dumper .
8789	Convert Swift_Message to string .
8790	Resolves parameters .
8791	Converts a numeric code point to UTF - 8 .
8792	Register queueing dispatcher .
8793	Optimizes route tree
8794	Extract common parent node .
8795	Get sql with parameters
8796	Try to open a file .
8797	Create a stream for the given input .
8798	Copies the given stream into a string .
8799	Copies a stream to another stream .
8800	Reads a line from a stream .
8801	Set default path and domain .
8802	Returns the path and domain .
8803	Returns the handler .
8804	Update host from uri .
8805	Filter method .
8806	Creates a URI instance .
8807	Returns the file without the extension .
8808	Changes file extension .
8809	Create cache manager .
8810	Receive a mock .
8811	Resolves a static proxy instance .
8812	Returns whether the instance is a mock .
8813	Returns the segment name for the given command .
8814	Set the file .
8815	Set the content disposition .
8816	Set Last - Modified header
8817	Returns a new instance with the specified value .
8818	Describes a command .
8819	Describes application commands .
8820	Get command info .
8821	Create the cookie tab .
8822	Prepare request attributes .
8823	Prepare request headers .
8824	Prepare server params .
8825	Get parsed body .
8826	Export the given value .
8827	Create a connection with an encryption key .
8828	Get cache configuration .
8829	Adapt adapter .
8830	Parse route pattern .
8831	Generates a regex from matches .
8832	Get invoker .
8833	Check if an object exists .
8834	Get target language from file .
8835	Creates a connection for vardump .
8836	Creates a dump server instance .
8837	Check if a path exists .
8838	Returns the transformed path .
8839	Get the contents of a directory .
8840	Filter contents by type .
8841	Check if the request tokens match the request .
8842	Adds the cookie to the response .
8843	Sanitize collected messages .
8844	Compute message count .
8845	Sort messages .
8846	Add a stream .
8847	Close stream .
8848	Decode GIF .
8849	Decode an image extension .
8850	Decode image descriptor .
8851	Decode image data
8852	Set order direction
8853	Returns the list of available templates .
8854	Load the pagination
8855	Sets cities from array .
8856	Sets the PSTN networks from an array .
8857	Loads the networks for the country
8858	Load cities from country
8859	Get all countries
8860	Get city by id
8861	Pads a string with PKCS5 padding .
8862	Get all countries
8863	Update all PST networks
8864	Update multiple networks
8865	Create a new mapping
8866	Decodes the delay from the payload .
8867	Returns true if the image has a transparent color .
8868	Decodes the proposal method .
8869	Get size .
8870	Get offset .
8871	Set offset .
8872	Returns the country .
8873	Convert to array
8874	Populate assign from array
8875	Populate object from array
8876	Create a new ID number .
8877	Generate unique hash
8878	Generate auth string
8879	Retrieve the call history .
8880	Call the soap method
8881	Get Frame by index
8882	Add offset to the first frame .
8883	Add new size .
8884	Returns the number of loops in the network .
8885	Returns true if the screen has a global color table .
8886	Returns the number of global colors in the terminal .
8887	Get background color index
8888	Adds a property to the first frame .
8889	Creates a new frame with the given property .
8890	Convert object to array
8891	Get all prepaid balance
8892	Get balances array
8893	Returns a list of all balances
8894	Change the balance
8895	Synchronize prepaid balance
8896	Set the canvas width and height .
8897	Uses a decoded frame from a decoded object
8898	Create a frame from GD resource
8899	Encodes the screen descriptor .
8900	Builds the logical screen descriptor .
8901	Builds the extension string .
8902	Builds a frame .
8903	Builds the GD control extension .
8904	Builds the image descriptor .
8905	Create a Shipment
8906	Sets the autorenew status of an order .
8907	Renew an order .
8908	Reloads the details of the invoice .
8909	Updates the mapping
8910	Generates unique hash .
8911	Check if an IP is in a given range
8912	Gets a parameter by name .
8913	Link a metadata service to a service
8914	Set service meta data .
8915	Add metadata .
8916	Removes a service from the container .
8917	Releases a service
8918	Resolves a service by name .
8919	Create a service instance from the given factory .
8920	Resolves service provider .
8921	Register a service provider .
8922	Bind a factory
8923	Binds a service
8924	Binds a factory to a service
8925	Binds a resolver for a service
8926	Returns the type of the given service .
8927	Add an argument .
8928	Add arguments from an array .
8929	Resolves arguments .
8930	Create an instance of the class .
8931	Sets the tokens .
8932	Returns the current token .
8933	Returns the next token .
8934	Skips all tokens of the given type .
8935	Returns the remaining tokens .
8936	Returns the tokens until the given type is encountered .
8937	Returns the tokens until a closing scope .
8938	Throw an exception when a token is encountered .
8939	Parse a child node .
8940	Parses the parser .
8941	Sets the container name .
8942	Add service definition
8943	Add services from array .
8944	Adds a service definition .
8945	Import services from a namespace
8946	Validate service builder string .
8947	Generates a normalized service name .
8948	Generates the container .
8949	Returns the name of the resolver method .
8950	Generate arguments code .
8951	Generates the metadata .
8952	Generate the resolver types .
8953	Generates the resolver methods .
8954	Generates code for resolver methods .
8955	Create a ValueNode from a Token .
8956	Sets the value type .
8957	Generates a map from all packages .
8958	Get token value
8959	Returns true if the token is a value .
8960	Check if the collection has the given key .
8961	Adds a value to the end of the array .
8962	convert to PHP array
8963	Returns the next token .
8964	Returns an array of tokens .
8965	Start the event .
8966	Executes a command
8967	Backup database
8968	Pull the repo
8969	Copy . env file
8970	Run composer command
8971	Run NPM command
8972	Seed database .
8973	Run the deploy command
8974	Resolves a service
8975	Set cache directory
8976	Creates a container .
8977	Handle incoming requests .
8978	Import the paths from the vendor directory .
8979	Check if a path exists .
8980	Gets the code from a file .
8981	Returns the code associated with the given name .
8982	Parses a container file .
8983	Handle a scope .
8984	Handle a scope import statement .
8985	Handle a parameter definition .
8986	Create arguments from argument array .
8987	Handle a service definition .
8988	Creates a service definition from an array .
8989	Defines a method call .
8990	Add method call .
8991	Add meta data .
8992	Determine if the request is an origin .
8993	Check if the request is authentic .
8994	Sets the value of the parameter .
8995	Get workout name by id
8996	Convert to string .
8997	Send the request .
8998	Set the type id
8999	Returns the end date .
9000	Returns the points as string .
9001	Returns the GPX .
9002	Collect response data .
9003	Get models .
9004	Get the AJAX payload .
9005	Get callback response .
9006	Run a callback .
9007	Sanitizes a handle .
9008	Validate all rules
9009	Validate a single value
9010	Set size for a specific device
9011	Add a reset .
9012	Returns the size of a given device .
9013	Builds the column classes .
9014	Check if current user is of given role .
9015	Begins the cell .
9016	Render a column .
9017	Get the walk .
9018	Returns the start row .
9019	Returns the reset string for the column .
9020	Returns the index .
9021	Migrate from legacy content
9022	Register an AJAX handler .
9023	Ajax handler .
9024	Set the callback
9025	Set validation rules .
9026	Handle response .
9027	Get the response type
9028	Sends the response headers .
9029	Send the response body .
9030	Returns the content of the given url .
9031	Is the given method supported by GeoIP2?
9032	Toggle visibility of a record .
9033	Check if the current user has access to this column
9034	Builds the grid .
9035	Returns a column as a string
9036	Add a column reset
9037	Add column sizes .
9038	Returns the columns for a given column
9039	Check if a column has reset for a given size .
9040	Returns column resets as string
9041	Register a handle .
9042	Enqueue scripts .
9043	Get nonces .
9044	Get grid sets
9045	Parse template .
9046	Hook to get content element .
9047	Get grid elements
9048	Protected create row
9049	Protected create column
9050	Build grid columns .
9051	Fetch a single columnset
9052	Prepares custom classes from result .
9053	Build the resets
9054	Get grid by id .
9055	Parse template .
9056	Hook called when the element is visible .
9057	Hook called when a form field is loaded .
9058	Get grid grids
9059	Prepare grid container
9060	Update subcolumns definition
9061	Append columnset id to the palette .
9062	Append column sizes to the palette .
9063	Get all available columns
9064	Get Grids .
9065	Get columns for module
9066	Get column orders
9067	Get column numbers
9068	Get session value
9069	Check if key exists
9070	Deletes a value from the session .
9071	Get a value from the cache .
9072	Reflash the current session .
9073	Parse the insert tag .
9074	Get the walker for the given column set .
9075	Translates parameters .
9076	Encoding params
9077	Returns decrypted dec params
9078	Save dynamic data .
9079	Check if value is valid
9080	Save the file .
9081	Initialize the request .
9082	Render form fields .
9083	Get field value
9084	Get field values
9085	Is the collection valid?
9086	Saves all entities
9087	Assign dynamic fields to page object .
9088	Get field by locale .
9089	Get repeaters by locale
9090	Get entities by field id
9091	Get entity by id
9092	Duplicate this entity
9093	Initializes the group .
9094	Check if the form is valid .
9095	Render the group controls
9096	Save the group
9097	Get group by rule
9098	Check if the given rule matches the given options .
9099	Init group control
9100	Get post data
9101	Set a character
9102	Returns true if the matrix is true .
9103	Renders a row .
9104	Returns the rows of the string .
9105	Get dot from pixel map
9106	Generate prime .
9107	Initialize form controls
9108	Create list control form control
9109	Create list control
9110	Create field control
9111	Create a new repeater
9112	Save repeater translations
9113	Get display value .
9114	Get field value by id .
9115	Get template name .
9116	Returns the default template name .
9117	Initializes the value
9118	Get repeater value
9119	Get html id
9120	Returns the html name for this field .
9121	Saves the field translation .
9122	Saves the field
9123	Save repeater field
9124	Get an option value
9125	Forward forward .
9126	Move the cursor to the next position .
9127	Returns true if the task has an ancestor .
9128	Returns true if the given task has a descendant
9129	Reset the state .
9130	Check the given input .
9131	Configures the wrapped condition options .
9132	Configures the condition options .
9133	Check if a given value matches the given value .
9134	Check if an input is empty .
9135	Get the duration of the event .
9136	Contextualize options .
9137	Find the best task to output
9138	Get the input code for the current task .
9139	Check whether the given state is resolved .
9140	Get file path .
9141	Sort configuration .
9142	Handle the input from the input .
9143	Processes the output .
9144	Returns the number of lines in the file .
9145	Rewinds the stream .
9146	Returns the transformed transformer code .
9147	Gets the dependency groups .
9148	Get the main task group .
9149	Check circular dependencies .
9150	Builds the dependencies for a task .
9151	Sort the given dependencies .
9152	Resolves the given task configuration .
9153	Initializes the task .
9154	Processes a task configuration .
9155	Handle a process state .
9156	Checks the given process configuration .
9157	Validate the model
9158	Convert to array
9159	Returns an array of model fields
9160	Unset a relation
9161	Format full class name to relation name
9162	Add one to one - to - one relation
9163	Add one - to - many relation
9164	Add manyToMany relation
9165	returns an array of objects
9166	Returns a collection of objects
9167	Find one record
9168	Returns the number of records in the database
9169	Builds a select query
9170	Executes a SELECT query
9171	Hydrate object with data
9172	Delete a row from the database
9173	Updates the record in the database
9174	Inserts a row into the database
9175	Set whether to keep memory
9176	Removes the session .
9177	Get a model by its primary key
9178	Remove a model
9179	Get the index of a given element
9180	Saves all elements
9181	Prefix where with table name
9182	Prefix order with table name
9183	Get column definition without column name .
9184	Register a new table
9185	Makes a simple query object
9186	Makes a complex query object
9187	Get the model for a given slug .
9188	Maybe install a table .
9189	Maybe uninstall a table .
9190	Check if a given table is installed .
9191	Fire a plugin event
9192	Save post .
9193	Get the foreign key .
9194	Parse default columns .
9195	Create a new query from a model .
9196	Set columns to select .
9197	Select single column .
9198	Select all records .
9199	Add an expression to the query .
9200	Set a where condition .
9201	Generate a where tag .
9202	Add a nested where clause .
9203	Add a WHERE clause to the current query .
9204	Add a where clause to the query .
9205	Add a date condition to the query .
9206	Filter results by meta .
9207	Set order by
9208	Sets the order by expression .
9209	Set the group by
9210	Add a GROUP BY expression .
9211	Join with another table
9212	Join subquery
9213	Paginate results .
9214	Loop the query and execute a callback .
9215	Set relations .
9216	Parses a nested set of results .
9217	Assign a value to an array using dot notation
9218	Make the limit tag
9219	Builds the sql
9220	Update the meta cache .
9221	Find a record by primary key .
9222	Find many records by primary keys .
9223	Find a record by primary key .
9224	Find a record by primary key .
9225	Get the first model matching the given attributes .
9226	Get the first model matching the given attributes .
9227	Update or create a record
9228	Handle eager loading .
9229	Execute a nested eager loading .
9230	Ensure operator is valid .
9231	Prepare column name .
9232	Escapes a value for storage .
9233	Configure the model .
9234	Get column value .
9235	Create a new record in the database .
9236	Set order by
9237	Add order by .
9238	All columns .
9239	Build an array of eager loaded models .
9240	Save comment .
9241	Get default argument .
9242	Execute SQL query .
9243	Parses the results of the query .
9244	Parse select object
9245	Parse order .
9246	Parse pagination arguments
9247	Compare two numbers .
9248	Determines if there are any changes in the database .
9249	Fetch the results from the data source .
9250	Delete rows from the database
9251	Update records in the database .
9252	Get total pages
9253	Paginate results .
9254	Returns the number of found models
9255	Returns number of models without limit .
9256	Check if an offset exists
9257	Set the value at the specified offset .
9258	Array access .
9259	Builds the query
9260	Boots the model if not already done .
9261	Boot the traits .
9262	Fill the model with data
9263	Wrapper for guid attributes .
9264	Wrapper for guarded attributes .
9265	Check if a given column is fillable .
9266	Set an attribute on the model .
9267	Set a raw attribute .
9268	Get attribute value .
9269	Get raw attribute .
9270	Get the value of an attribute .
9271	Get the value of an attribute .
9272	Get all relation methods
9273	Get a relation
9274	Set a relation value .
9275	Get relation value
9276	Refresh the model s attributes .
9277	Returns an array of attributes that have been modified .
9278	Get an object by its primary key .
9279	Create a new object from the query params .
9280	Get the data associated with the given primary key .
9281	Check if the given data is cached .
9282	Update a record in the database .
9283	Save the model .
9284	Save has foreign relations .
9285	Save loaded relations
9286	Do the actual save .
9287	Do the actual save .
9288	Finish save .
9289	Deletes the object from the database .
9290	Insert many models .
9291	Fire the model event .
9292	Register a callback for a model event .
9293	Get the data to cache .
9294	Register a global scope .
9295	Return a new instance without the global scope .
9296	Return a new query builder with eager loaded relations .
9297	Convert to array .
9298	Get the comparison .
9299	Get the value of the condition .
9300	Get one row by primary key
9301	Get a single column .
9302	Helper method to get by or many .
9303	Count rows .
9304	Inserts a row into the database .
9305	Update a row
9306	Deletes a row from the database .
9307	Delete many records from the database .
9308	Generate an exception from database error .
9309	Save term .
9310	Make a new query object
9311	Fetch the results for an Eager loading .
9312	Add new values to insert
9313	Sets the value of a property .
9314	Set the select mode
9315	Resets the select fields
9316	Sets the query to update
9317	Sets the table to delete .
9318	INSERT INTO statement
9319	Sets the FROM clause
9320	Adds a JOIN clause to the query .
9321	Adds an AND WHERE condition to the query .
9322	Adds a where condition to the query .
9323	Resets the order by clause
9324	Sets the LIMIT clause
9325	Resets the limit
9326	Boot Trash support .
9327	Get the results from the cache .
9328	Loads a model from the cache .
9329	Load a collection from the cache .
9330	Cache the results .
9331	Cache collection .
9332	Cache single result .
9333	Maybe register cache events .
9334	Save user .
9335	Set the last updated at .
9336	Get container parameters
9337	Is container cacheable?
9338	Boot the container .
9339	Loads the container configuration .
9340	Builds a column name for the given table .
9341	Do save .
9342	Save removed models .
9343	Save added models .
9344	Create a new instance .
9345	Initializes the authentication .
9346	Create a new model .
9347	Convert an asset
9348	Builds the final asset name .
9349	Parse less .
9350	Send a message .
9351	Executes a query and returns the result .
9352	Counts documents .
9353	Receue a message .
9354	Sends a message .
9355	Verify sort array
9356	Add a message
9357	Gets messages by type .
9358	Import issues from another issues
9359	Returns the value for the given identifier .
9360	Check if an offset exists
9361	Extends an existing service by its identifier .
9362	Registers the service with the given provider .
9363	Tag a service
9364	Finds all services tagged with the given tag .
9365	Bootstrap the application .
9366	Initializes bundles .
9367	Get kernel parameters
9368	Validate content
9369	Validates the content with the given retriever
9370	Validate the given content without a resolver .
9371	Get an asset container .
9372	Get JS from assets .
9373	Get all CSS assets .
9374	Get all assets .
9375	Arrange the assets .
9376	Check if an asset is valid .
9377	Create a new PostValidator
9378	Returns a new Xsdriever
9379	Returns a new XsltRetriever
9380	Create a new CertificadoValidator
9381	Create a new CFDIReader
9382	Handle a command .
9383	Set a cookie .
9384	Returns a cookie value .
9385	Returns the first element in the array .
9386	Check if the password is valid .
9387	Retrieve a single node .
9388	Returns the last attribute of a node .
9389	Append a child node to a SimpleXMLElement .
9390	Populates the destination node with the given nodes .
9391	Retrieve a node
9392	Check if given value is required .
9393	Add Doctrine queries .
9394	Add timers .
9395	Returns a human readable file size
9396	Append a validator .
9397	Remove a validator .
9398	Get a validator by index
9399	Construct a new command .
9400	Run the generator .
9401	Run filename checks .
9402	Authorizes the given credentials .
9403	Check if user is logged in
9404	Logs in a user
9405	Logout the current user
9406	Add a new constraints .
9407	Validate the given input .
9408	Redirect action .
9409	Returns file path .
9410	Get message by index
9411	Generates custom post type name
9412	Get functions .
9413	Resolve command handler .
9414	Initializes the report .
9415	Get sum of elements .
9416	Get input value
9417	Sets the position on the position .
9418	Generates a taxonomy name .
9419	Returns a redirect response .
9420	Register commands .
9421	Returns bundle metadata .
9422	Returns namespace metadata .
9423	Sets the namespace for a class .
9424	Add an asset .
9425	Renders a view .
9426	Save data to cache .
9427	Loads a CFD .
9428	Removes all schemaLocations .
9429	Removes all namespace nodes .
9430	Removes unused namespaces .
9431	Initializes the registry
9432	Binds the registry items to the registry .
9433	Returns the file name of the view .
9434	Initialize the context .
9435	Renders the view .
9436	Loads the configuration files .
9437	Adds a route that matches the given parameters .
9438	Defines a sub route .
9439	Create a new route group
9440	Starts a block .
9441	Stops the block .
9442	Outputs a block .
9443	Creates a controller from a string .
9444	Instantiate a controller
9445	Returns true if the given URL is valid .
9446	Try to find a template .
9447	Sets the entity manager
9448	Set application connection
9449	Renders a view
9450	Open the form .
9451	Add data transformers .
9452	Make a request to the public endpoint .
9453	Make a market request .
9454	Make account request .
9455	Prepare attributes .
9456	Add extra .
9457	Returns the first object of the result set
9458	Append a javascript script to the manialink .
9459	Get connection instance
9460	Begin a transaction
9461	Initialize the DOM Code
9462	Renders the page
9463	Connect to the TCP server
9464	Enables watching .
9465	Sets the background color
9466	Set the image
9467	Sets the image id
9468	Set the image focus
9469	Sets the image focusid
9470	Add a ManiaLink
9471	Get a configuration value .
9472	Set a config value .
9473	Get translation .
9474	Returns an array containing the values of the specified key .
9475	Strip CSS styles from a string
9476	Creates a new redirect .
9477	Creates a number .
9478	Get cache driver
9479	Initialize the ManiaLink
9480	Begins a frame
9481	End frame .
9482	Creates a redirect link
9483	Append an XML string to the DOM .
9484	Build a redirect driver .
9485	Set Border
9486	Declare a font
9487	Called on image
9488	Reads an image from an image .
9489	Callback for image quality
9490	Get the redirect for the given request .
9491	Get redirect urls .
9492	Get the redirects .
9493	set icon size
9494	Sets the card as selected
9495	Invokes an email
9496	Set file data
9497	Get LIMIT string
9498	Converts an array of values to an update string .
9499	Gets a parameter value
9500	Gets a parameter value
9501	Gets a POST parameter
9502	Restore a request parameter
9503	Redirect to manialink
9504	Create link string
9505	Create an absolute link
9506	Increment X position
9507	Increment the position
9508	Increment the position of the position
9509	Set the move position
9510	Sets the scale
9511	Set the halign
9512	Set cell halign
9513	Set cell alignment
9514	Sets the size of the chart
9515	Sets the size of the image
9516	Sets the size
9517	Adds a new button .
9518	Add a gap
9519	Get all the response keys .
9520	Get all redirect status
9521	Handle fatal exception
9522	Compute the error message
9523	Compute short message
9524	Get the response for a redirect .
9525	Upload file to server
9526	Returns the current URL
9527	Calculates the position of a position .
9528	Returns an aligned position .
9529	Get aligned position of element
9530	Builds query builder .
9531	Quotes a string
9532	Reset all balance .
9533	Delete accounts by asset type .
9534	Configures the autoloader
9535	Get service ids
9536	Get service return type
9537	Executes balance .
9538	Get balance entry .
9539	Gets the class hierarchy .
9540	Change Content - Type
9541	Parse a raw HTTP header
9542	Convert dot notation to array .
9543	Builds a multidimensional array .
9544	Get asset types
9545	Validates balance .
9546	Get last date balance
9547	Checks if the given strategy is valid .
9548	Mutate method .
9549	Fetch the results from the given URL .
9550	Returns the endpoint URL .
9551	Generate csv file
9552	Parse csv file
9553	Localize CSV
9554	Creates a backup file .
9555	Get all asset by asset type code .
9556	Get asset type id
9557	Get customer acc by asset type
9558	Get the system customer id .
9559	Creates amount transaction .
9560	Builds a key from a list of strategies .
9561	Parse callback
9562	Login action .
9563	Renders the view .
9564	Get asset types
9565	Send the response .
9566	Authenticates the given user response .
9567	Verify the request token .
9568	Validate the documentation URL .
9569	Register the API client .
9570	Register the token class .
9571	Register console commands for console .
9572	Starts a new session .
9573	Get a property by name .
9574	Sets the status code and reason phrase .
9575	Parse CSS .
9576	Searches for tokens .
9577	Find end of a quoted string
9578	Find the end of a URL
9579	Check rule .
9580	Merges the given array of words
9581	Returns the selectors .
9582	Get selectors from words
9583	Recursively parse a single token .
9584	Set the current application key for the current request .
9585	Get current application key .
9586	Adds the accepted JSON type to the request .
9587	Builds a SELECT query .
9588	Unpublish post
9589	Saves an unpublish event
9590	Is the scheduler active?
9591	Generate a unique token
9592	Generate a key for the given key .
9593	Verify the given token .
9594	Generate HTTP headers .
9595	Generate query data
9596	Get customer id .
9597	Change fit .
9598	Get the list of defined manipulations .
9599	Create new credit account
9600	Fills the object with given values .
9601	Get URI string
9602	Set username and password .
9603	Sets the port
9604	Set the file path .
9605	Returns the specified segment .
9606	Get query value
9607	Builds the tokens .
9608	Get aggregate values .
9609	Get configuration for given strategy
9610	Builds the configuration for the given strategy .
9611	Composes the result .
9612	Get an Account
9613	Binds a transaction .
9614	Prepare log and admin id
9615	Validate transaction .
9616	Sets the headers .
9617	Sets a header .
9618	Adds a header .
9619	Removes a header .
9620	Adds a PSR - 4 prefix .
9621	Adds multiple prefixes
9622	Finds the file for the given class name .
9623	Find file with known suffix
9624	Convert object to array
9625	Clean array .
9626	Set the code .
9627	Initializes the URI
9628	Init query params
9629	Initializes uploaded files .
9630	Parse uploaded files .
9631	Parse multiple uploaded files .
9632	Check if the response has a content type .
9633	Compile all files .
9634	Dispatches the command
9635	Converts an array into a CSV string
9636	Output error message
9637	Display help command
9638	Get all available commands .
9639	Make directory .
9640	Append the given stub .
9641	Replace a string with another .
9642	Dispatches the request .
9643	Creates a Response object from the given Response .
9644	Returns the page
9645	Get the response .
9646	Builds the Response object for the given URI .
9647	Returns the page for the given URI .
9648	Returns the alias for the given URI
9649	Displays a single User model .
9650	Creates a new Message model . If creation is successful the browser will be redirected to the index page .
9651	Converts headline elements to HTML elements
9652	Runs the route
9653	Runs the CLI command
9654	Register services .
9655	Returns an instance of Markdown renderer
9656	Get the login blade template .
9657	Get migration files .
9658	Finds a page by its identifier
9659	Gets the page name from a page identifier
9660	Builds the metadata for the given page identifier .
9661	Get Page Tree
9662	Returns a list of pages for the given path
9663	Command success .
9664	Load all messages from database .
9665	Send the activation mail .
9666	Performs a search .
9667	Renders the template
9668	Render an expression .
9669	Resolves expression key path .
9670	Finds classes in all bundles .
9671	Prepares configuration array .
9672	Returns the host
9673	Get a value from the container .
9674	Displays a single Message model .
9675	Updates an existing Message model . If update is successful the browser will be redirected to the index page .
9676	Deletes an existing Message model .
9677	Finds the I18nTranslation model based on the message id .
9678	List pages .
9679	Returns the parsed content .
9680	Gets the sorting .
9681	Get the URI for this resource
9682	Returns the URL of the resource .
9683	Returns the page title
9684	Makes a GET request to the API .
9685	Builds the request URL .
9686	Handle the response .
9687	Initialize the shared configuration
9688	Profile a profiler
9689	Get template content
9690	Returns the value for the given key
9691	Sets the root directory .
9692	Finds class reflections .
9693	Gets reflection for a class .
9694	Upload a media .
9695	Insert media .
9696	Returns the number of hours in a period
9697	Gets the dirty data .
9698	Register a clean entity
9699	Get dirty fields .
9700	Adds the identifiers to the model .
9701	Get an entity id from a string or array
9702	Get tags .
9703	Get the class name of an object .
9704	Configure tab element factory .
9705	Deletes the media
9706	Create the title
9707	Renders pdf .
9708	Render image .
9709	Converts raw data into object
9710	Hydrate a list
9711	Deserializes data into a collection
9712	Deserializes data .
9713	Try to guess the collection classname .
9714	Generates the sitemap .
9715	Get navigation for element
9716	Returns the iterator for the element
9717	Normalize unique values
9718	Get extra property .
9719	Generate random string
9720	Limits a string .
9721	Get all files in a directory
9722	Generates a short description
9723	Checks if a time slot is overlapping .
9724	Returns all non - overlapping time slots .
9725	Merges time slots .
9726	Get a resource .
9727	Merge default parameters .
9728	Executes a request .
9729	Renders the backend view .
9730	Returns the iterator .
9731	Returns the grid iterator .
9732	Before save callback
9733	Processes the content
9734	Updates an existing Media model . If update is successful the browser will be redirected to the view page .
9735	do media join action
9736	Upload media .
9737	Update user data
9738	List media
9739	Renders media row .
9740	Deletes an existing Media model . If deletion is successful the browser will be redirected to the index page .
9741	Sets the attribute list .
9742	Get the default model .
9743	Create directories .
9744	Export views .
9745	Export the controllers .
9746	Export Routes File .
9747	Check packages .
9748	Copy plugin files .
9749	Copy assets files .
9750	Copy less folders .
9751	Get settings by categories .
9752	Creates a new navigation from a serialized array .
9753	Creates a new NavItem from an array .
9754	Loads a block .
9755	Get module by name
9756	Serialize an object
9757	Returns the model name for the given mapping key .
9758	Get class metadata .
9759	Retrieves a class metadata by its key .
9760	Render tree .
9761	Get a branch tree
9762	Remove from cache .
9763	List tags .
9764	Find tag weights .
9765	Add tags .
9766	Remove tags .
9767	Get tab parent options .
9768	Generates the columns .
9769	Count required separators .
9770	Creates the tab separators .
9771	Create tab end element .
9772	Create tab element
9773	Get tab element .
9774	Add member icon
9775	Returns select options .
9776	Returns a list of status
9777	Returns a list of available types
9778	Get type label
9779	Get listing order .
9780	Find and replace text .
9781	Moves the iterator to the next item .
9782	Retrieve the title of the current item .
9783	Generates the active field .
9784	Make a router instance .
9785	Get driver instance .
9786	Call a driver .
9787	Call the driver .
9788	Resolve the dispatch dependencies .
9789	Get nested parameters .
9790	Find routeable attributes .
9791	Find the restful routeable .
9792	Finds the resource actionable .
9793	Get alternative resource action .
9794	Dispatches a route .
9795	List orders .
9796	Returns the calculator for the given shipping method .
9797	Get shipping method .
9798	Register a route .
9799	Builds the resource schema .
9800	Update the shipping address .
9801	Call controller .
9802	Handle an Illuminate response .
9803	Handle a response callback .
9804	Abort the response .
9805	Determine if the given response is an HTML response .
9806	Register error handler .
9807	Get options for an action
9808	Deletes an item from the cache .
9809	Save cache item .
9810	Outputs a block .
9811	Retrieve a value from the cache .
9812	Stores a value in the cache .
9813	Sets multiple values at once .
9814	Delete multiple items from the cache .
9815	Check if a value exists in the cache .
9816	Returns label element .
9817	Get full path name .
9818	Make a tree
9819	Type a command
9820	Set resource members
9821	Try to load a PSR - 7 file from a class name
9822	Set the AccountId property .
9823	Translates the given exception to a standardized exception .
9824	Get console instance .
9825	Execute the API request
9826	Returns an array of all available values .
9827	Returns a list of all containers in the bucket .
9828	Updates the properties of a container .
9829	Check if a blob exists on the server .
9830	Encodes a JWT .
9831	Decodes a JWT .
9832	Get the payload of the token .
9833	Split JWT token into parts .
9834	Get the expiration timestamp .
9835	Creates a new index .
9836	Extracts the default value from a column definition .
9837	Add previous button
9838	Add next button
9839	Returns the current button value .
9840	Reveal an object .
9841	Returns true if the given value is a RecordInterface object .
9842	Check if value is empty
9843	Converts raw data into a record .
9844	Parse SOAP response
9845	Get a configurator by name
9846	Checks if a configurator exists .
9847	Returns the writer class name for the specified format .
9848	Get a writer from the content negotiation .
9849	Transforms a DateTime object into a DateTime object .
9850	Initializes the view .
9851	Reads a payload .
9852	Parse a payload
9853	Writes a payload
9854	Get a data reader
9855	Get a writer for the given content type .
9856	Before each test .
9857	Runs after tests
9858	After step is executed
9859	Initialize Laravel .
9860	Bootstrap Laravel application
9861	Go through a route .
9862	Go through an action .
9863	Converts an action name to a namespace .
9864	Assert that the current URL matches the given route .
9865	Assert that the current URL matches the given action .
9866	Assert that the given key exists in the session .
9867	Assert that the form has errors .
9868	Assert that a form error occurred in the view .
9869	Make the user logged in .
9870	Inserts a record into the database .
9871	Transforms a number into a number .
9872	Returns the number formatter .
9873	Nest a multidimensional array into a single object
9874	Flatten a multidimensional array
9875	Convert an array to an object .
9876	Creates a new column .
9877	Builds the header view .
9878	Builds the cell view .
9879	Creates a new column instance .
9880	Returns whether the column is a compound column .
9881	Get the base data for the gateway
9882	Returns the shipping data
9883	Get invoice data
9884	Sends the request to the PagSeguro API
9885	Trim whitespace .
9886	Converts a FQCN to a block prefix .
9887	Transforms currency value
9888	Parses a value into its type .
9889	Add unresolved columns .
9890	Check if the file is a valid upload
9891	Resolves a file path
9892	Update the form for editing a record
9893	Updates the edit form .
9894	Updates the item edit form .
9895	Lock a record
9896	Apply the given configuration .
9897	Publishes an item to a channel .
9898	Loads a locale .
9899	Send request to API
9900	Builds the URI from the given array .
9901	Store a newly created user .
9902	Show the specified user .
9903	Update the specified user in storage .
9904	Remove the specified user .
9905	Create a new MPDF instance
9906	Adds host header
9907	Builds a Guzzle request .
9908	Executes the callable chain .
9909	Check if class exists .
9910	Main loop .
9911	Ensure that the thread is running .
9912	Add a request to the queue .
9913	Publish multiple callbacks
9914	Returns the key for the given cursor .
9915	Rewinds the collection
9916	Export this object as an array
9917	Set options from an array
9918	Make a publish call
9919	Make an HTTP request .
9920	Publish an item
9921	Imports headers from one message to another .
9922	Get protocol version
9923	Validate data .
9924	Load translate .
9925	Set local validator .
9926	Get validation errors .
9927	Update the number of calls .
9928	Get the locked message
9929	Determines if the current user can edit this member .
9930	Check if an offset exists
9931	Sort the collection
9932	Parses the given date .
9933	Format user birthday .
9934	Validate birthday .
9935	Parses the constant name of a constant .
9936	Translates the given latitude and returns a string
9937	when update is updated
9938	Response success .
9939	on list
9940	On edit role create
9941	On user create
9942	on area create form
9943	Returns user form
9944	Add group menu
9945	Finds an object by its criteria .
9946	Get a new object .
9947	Get the object factory .
9948	Remove entities from the storage .
9949	Removes one document from the collection .
9950	Remove one or more objects
9951	Refreshes the object manager .
9952	Detach a list of objects
9953	Get supported method .
9954	Call supported method .
9955	Run an action on an object .
9956	Flushes an array of objects .
9957	Prepare tag from bits .
9958	Set the pagination
9959	Set the current page
9960	Update the specified permission in storage .
9961	Get paginator .
9962	Get a paginated by a set of criteria .
9963	Boots extension components
9964	Boots application memory
9965	Load role parts
9966	Extend validation .
9967	Save the model
9968	Validate the model attributes .
9969	Merge validation rules
9970	Removes unnecessary attributes .
9971	Creates a hash based on the original attributes .
9972	Disable all filters .
9973	Disables a filter .
9974	Restore all disabled filters .
9975	Restore a given filter .
9976	Get actions column
9977	Assigns the model to the given user .
9978	Check if the given code is a successful response .
9979	Returns template name
9980	Role form .
9981	renders edit form
9982	create user form
9983	User changer
9984	create user
9985	Updates user information
9986	destroy user
9987	Save user .
9988	Returns true if the URL is within the given path .
9989	Get the registered type
9990	Get the Etag for a visitor
9991	Get timestamp field
9992	Calculates the hash of the collection
9993	Execute the query
9994	Returns the ids of the collection
9995	Returns the number of rows in the collection
9996	Get table name
9997	Returns the order by
9998	Set the order by
9999	Get the conditions as a string .
10000	Add WHERE condition
10001	Set Join Table
10002	Edit ACL action
10003	updates a role
10004	Set logger .
10005	Starts the process .
10006	Stop the thread .
10007	Kill the thread
10008	Add WHERE condition
10009	Get the where part of the query .
10010	Gets the number of rows in this table .
10011	Returns the first row
10012	Returns an array of ids .
10013	Execute this query
10014	Load by type .
10015	Returns the SELECT portion of the query
10016	Returns list of modules
10017	Shashes a single resource
10018	Define all permissions .
10019	Assign role to user
10020	Remove role from user
10021	View create action .
10022	Edit an existing record
10023	Store a role
10024	Update a role
10025	Destroy role .
10026	Save role .
10027	import permissions from role
10028	Action for viewing acl
10029	Clears all analytics data .
10030	Clears all message data
10031	Makes ACL menu
10032	Show role for editing .
10033	return users roles
10034	return statuses
10035	Returns action column
10036	Render user roles .
10037	Modify an entity
10038	Get a producer for the given type
10039	Register producer
10040	Register producer by class
10041	Get an object by its id
10042	Get object by id
10043	Add object to object pool
10044	Adds an object to the registry .
10045	Count the number of rows for a given type .
10046	Create a new finder
10047	Get select by type
10048	Returns the escaped fields for a given type .
10049	Get the order by clause .
10050	Get all trait names by type
10051	Recursively get all trait names .
10052	Adapts the given controls .
10053	Get checked attribute .
10054	Prepare an active page entity
10055	sets the login user id to the active page
10056	Set email tracking
10057	Returns the site path
10058	Splits a URL into components .
10059	Returns category path
10060	Compare two values .
10061	Loads the object from a database row .
10062	Copy current object
10063	Revert a field
10064	Gets the old value of a field .
10065	Set field value
10066	Inserts the row into the database .
10067	Update this object in the database
10068	Gets the generated fields values for the given id .
10069	Compare two values
10070	Generates a URI from named route name .
10071	when user has created role
10072	Get errors for a field
10073	Check if field has error
10074	Add an error
10075	Prepares product title
10076	if contact controller is not contact send
10077	Modify by newsletter controller
10078	Modify with user registration
10079	Disables an event subscriber .
10080	Restore event subscribers .
10081	Disables all event listeners .
10082	Disables an event listener .
10083	Restore all disabled event listeners .
10084	Restore event listeners .
10085	Get subscriber class name .
10086	Check if the given class is an event subscriber .
10087	Get event listeners .
10088	Returns active user id
10089	Returns active user email .
10090	Generates a cache key .
10091	Generates the cache keys .
10092	Send the request to the API .
10093	Check if an item exists
10094	Gets a value from an array .
10095	Get a value from an array or object
10096	Sets the value of an item .
10097	Puts a value in the collection .
10098	Sets a value in an array .
10099	Removes an item from the collection .
10100	Recursively remove a value from an array
10101	Sets a logger
10102	Bootstrap Service Provider
10103	Set mail configuration
10104	Returns the value of a field .
10105	Convert value to string
10106	Get page size .
10107	Register Capsule Service
10108	Validates the object
10109	Get singleton instance .
10110	Initializes the plugin .
10111	Loads the main script .
10112	Displays all notices .
10113	Register a notice .
10114	Handle dismiss notice AJAX
10115	Dismiss a notice .
10116	Dismiss a notice .
10117	Dismiss a notice .
10118	Restore a notice .
10119	Restore a user .
10120	Restore global notice .
10121	Get dismissed notices .
10122	Check if a notice is dismissed .
10123	Get a notice
10124	Processes a raw item
10125	Refine a collection
10126	Include attachments
10127	Get the raw items .
10128	Set the attachments .
10129	Parse relations .
10130	Attaches an attachment
10131	Returns an instance of the given class name .
10132	Merges two arrays .
10133	Get response headers
10134	Get the card reference .
10135	Get the customer reference .
10136	Get class name
10137	Get the namespace of a class
10138	Tries to find the correct method of an object .
10139	Initializes the field mappings .
10140	Sets the translation language
10141	Reads a property from an object
10142	Displays the entity manager .
10143	Call before action .
10144	Invokes after action .
10145	Extend collection with another collection
10146	Append data to collection
10147	Prepends an entity to the beginning of the collection
10148	Check if property is set
10149	return the last entity
10150	Get element moved by offset
10151	Check if a value exists .
10152	Search for a given value in the collection .
10153	Removes the first element from the collection .
10154	Filter the collection by a given callback
10155	Get a collection by a given callback
10156	Split collection into chunks
10157	Get a slice of the collection
10158	Splits this string into chunks
10159	Array access .
10160	Get distinct values from the collection .
10161	Reverse the map
10162	Get all values for a property
10163	Bind collection to collection
10164	Group by field .
10165	Prepares scopes .
10166	Parse scope arguments .
10167	Set the type of a variable
10168	This method is used to create an annotation based on an annotation reader .
10169	Converts a string to CamelCase
10170	Prepare data for insert
10171	Update cache data .
10172	Parse filter data
10173	Parse filter values .
10174	Convert array to object
10175	Returns the label
10176	Get additional styles by type
10177	Get additional styles by type
10178	Returns the URL for this request .
10179	Convert data to array
10180	Configure the model
10181	Get database connection .
10182	Import a relationship
10183	Converts a string to an underscore
10184	Start the job .
10185	Deletes the record .
10186	Get class metadata .
10187	Flushes an entity .
10188	Finds an entity by its id .
10189	Clears an entity .
10190	Removes an entity .
10191	Refreshes an entity .
10192	Returns the repository for the given entity name .
10193	Checks if an entity exists in the collection .
10194	Creates a new EntityManager instance .
10195	Process Xcdr request
10196	Performs a merge .
10197	Merges two lines
10198	Return an array of lines that have been added or modified .
10199	Check for lines removed
10200	Sends a CDR record to the XCdr record .
10201	Registers WordPress services .
10202	Apply configs .
10203	Add environment variables to the application
10204	Get a job from the queue .
10205	Insert a job record into the queue .
10206	Sends a request to the SOAP client
10207	Convert string to uppercase .
10208	Creates a new record
10209	Read a record
10210	Updates a record
10211	Destroys a record
10212	Method to recycle a record
10213	Gets the count for a record
10214	Get a proxy .
10215	Close all log output interfaces .
10216	Load all available widgets
10217	Load theme options .
10218	Called when a turn is started
10219	Add a child element .
10220	Store a newly created permission in storage .
10221	Show the form for editing the specified permission .
10222	Update the specified permission in storage .
10223	Remove the specified permission .
10224	Sets the adapter .
10225	Returns the type of the adapter .
10226	Waits until the stream is ready .
10227	Gets a list of active channels
10228	Get a list of games
10229	Convert json to array
10230	Convert data to object
10231	Convert data to json
10232	Convert data to string .
10233	Returns the value as an integer .
10234	Filter data as float
10235	Filter data as boolean .
10236	Generate the hydrator .
10237	Find all instance properties .
10238	Creates the constructor .
10239	Create the hydrate method .
10240	Update application configuration
10241	Create local composer . json file
10242	Find one page by attribute .
10243	Find pages by attribute .
10244	Find one page by option .
10245	Find pages by option
10246	Register widget binding
10247	Register View Parser
10248	Register WxPidget
10249	Get a driver instance .
10250	Returns a valid result .
10251	Starts a timer .
10252	Subscribe to a signal handler
10253	Unsubscribes from a signal
10254	Get attribute value
10255	Set primary keys
10256	Execute query and return result
10257	Set autoincrement properties
10258	Strip the column name from a table .
10259	Selects a virtual server .
10260	Selects a virtual server by port .
10261	Returns the port for the given server ID .
10262	Returns the server object matching the given name .
10263	Returns the first server matching the given unique identifier .
10264	Creates a new virtual server .
10265	Deletes a server .
10266	Starts a server .
10267	Stops the server process .
10268	Retrieve permission list
10269	Returns a list of permissions for a specific permission
10270	Returns the ID of the permission with the given name .
10271	Returns the name of the permission with the given ID .
10272	Returns the category for the given permission ID .
10273	Returns an array of permissions for a specified permission .
10274	Adds a message to the server .
10275	Tries to login to the server .
10276	Logs out the server .
10277	Sets a value for the current user s info .
10278	Get validator from service locator
10279	Sets the content of the request .
10280	Parse the result from the response .
10281	Get common application attributes .
10282	Get an option value
10283	Builds the options
10284	Executes a user command
10285	Ping the server .
10286	sets an attribute
10287	Returns the amount as a string .
10288	Formats the amount for account
10289	Returns the rounded amount .
10290	Splits this money by a given amount
10291	Validates and injects the given elements .
10292	Get user info
10293	Runs the application .
10294	Search for router
10295	Returns the request method .
10296	Get log entries
10297	Evaluates death byCamels
10298	Convert bytes to human readable format
10299	Returns the name of the specified codec .
10300	Returns the group type for the given type .
10301	Returns the text for the given permission type .
10302	Returns the specified log level .
10303	Converts a log entry into an array .
10304	Gets a list of users
10305	Get all traits .
10306	Calls a trait method .
10307	Call all registered events
10308	Retrieve attribute labels .
10309	Returns a list of attribute hints .
10310	Returns the object as an array .
10311	Fetches an error object from an error object .
10312	Fetches the reply from the server .
10313	Get user identity .
10314	Has User
10315	Restore the model from the database .
10316	Get user by id
10317	Gets a list of followed games
10318	Get the notices for the current user .
10319	Get channel by id .
10320	Escapes the characters in the string .
10321	Unescapes the string .
10322	Get team by id .
10323	Add a result .
10324	Get stream .
10325	Get Streams
10326	Get featured streams
10327	Get followed streams
10328	Gets a list of streams
10329	Get the top posts .
10330	Returns the value of the element .
10331	Sends the given TSDNS to the server .
10332	Get the configurables
10333	Sends a text message to the client .
10334	Kicks the channel .
10335	Downloads the user s avatar .
10336	Bind events to the controller .
10337	Connects event with specified constant value
10338	Get a query variable
10339	Get base URI
10340	Sends a command to the server .
10341	Returns a new event for the server .
10342	Returns an array of cells for a command .
10343	Returns the TeamSpeak3 host object .
10344	Displays list of active extensions .
10345	Writes the configuration file .
10346	Sets the parent element
10347	Return the columns of a table .
10348	Create Transcoder instance .
10349	Returns a value by case insensitive key .
10350	Sets an item by case insensitive key .
10351	Get all the notifications for the current user .
10352	Lists all extensions .
10353	Performs the actual request .
10354	Runs ajax task .
10355	Deactivate an extension .
10356	Activates an extension .
10357	Uninstalls an extension .
10358	Starts immediate task .
10359	Returns the TeamSpeak3Client object matching the given name .
10360	Downloads the channel icon .
10361	Sends a text message to the channel .
10362	Deletes the channel .
10363	Encode a payload
10364	Sign a message
10365	Json decode
10366	Commit the cache .
10367	Bootstrap extension .
10368	Creates a copy of the channel group .
10369	Sends a text message .
10370	Retrieve the form class name .
10371	Finds an entity by id .
10372	Returns a list of entities .
10373	Creates a new entity .
10374	Edits an entity .
10375	Deletes an entity with the given id .
10376	Reads a file .
10377	Parse JSON response .
10378	Parse a file .
10379	Normalize the id .
10380	Clean input attributes .
10381	Sets the label value
10382	Add element to collection
10383	Get the top level window .
10384	Remove an element
10385	Get element by id
10386	Loads state from file .
10387	Saves application state configuration .
10388	Set data type
10389	Called when a channel is created .
10390	Returns localized data field .
10391	Get localized data field
10392	Get package versioned data
10393	Get package data
10394	Convert readme data to human readable format
10395	Builds a migrate task .
10396	Builds a report task .
10397	Tries to match the request uri
10398	Parse regex route
10399	Check strictness
10400	Returns the TeamSpeak3 profiler .
10401	Initializes the transport object .
10402	Get blameable attributes .
10403	Get timestamp attributes .
10404	Evaluate attributes .
10405	Initialize events .
10406	Signs the request
10407	Called after a request is sent
10408	Reads data from the stream .
10409	Sends data to the stream .
10410	Restore database from dump file .
10411	Dump the database .
10412	Initializes the menu
10413	Add a button to the menu
10414	start the widget
10415	Populate columns with max value
10416	Populate all numeric columns with max value
10417	Transforms a JSON string into an assoc array
10418	Registers the doctrine_orm_orm_ doctrine_orm_orm_ doctrine_orm_orm_ doctrine_orm_ doctrine_config .
10419	Sets a file .
10420	Sets a post field .
10421	Sets the raw content .
10422	Resolve an abstract .
10423	Add a class to the container .
10424	Get the concrete class .
10425	Dispatch event .
10426	Returns the type of the channel .
10427	Returns the alignment for a channel .
10428	Adds a set of specified permissions to a channel .
10429	Removes a set of specified permissions from a channel .
10430	Adds a set of specified permissions to a client .
10431	Removes a set of specified permissions from a client .
10432	Returns the list of files in a channel .
10433	Returns the TeamSpeak3Client object matching the given ID .
10434	Returns the Client object matching the given unique identifier .
10435	Moves a client to another channel .
10436	Kicks a channel .
10437	Removes a set of specified permissions from a client .
10438	Returns the server group object matching the given ID .
10439	Returns the group object matching the given name .
10440	Adds a set of specified permissions to a server group .
10441	Returns an array of profile information for the server group .
10442	Returns the channel group matching the given ID .
10443	Returns the channel group object matching the given name .
10444	Adds a set of specified permissions to a channel group .
10445	Sets the permissions of the current user .
10446	Uploads an icon .
10447	Creates a new snapshot .
10448	Returns log entries
10449	Adds a message to the TeamSpeak3 server .
10450	Sorts the list of clients in the TeamSpeak3 server .
10451	Compares two groups .
10452	Sorts the list of files in a file list .
10453	Creates a copy of the server group .
10454	Returns the name of an icon .
10455	Returns the fully qualified class name of the object .
10456	Returns the HTML for the ManiaScript .
10457	Filters a list of nodes .
10458	Writes a file .
10459	Generates the hydrator class name .
10460	Connect to TCP server
10461	Disconnects the stream .
10462	Reads a line from the stream .
10463	Checks if the given name can be created .
10464	Store a newly created role .
10465	Update the specified role .
10466	Remove the specified role .
10467	Performs a GET request .
10468	Returns the CSS class for the current TeamSpeak3 plugin .
10469	Returns the icon for the current user .
10470	Returns the complete name of the current TeamSpeak3 plugin .
10471	Returns the HTML code for the country flag .
10472	Initializes the file transfer .
10473	Sends data to the server .
10474	Downloads a file from the server .
10475	Returns the session context .
10476	Returns the type manager .
10477	Get database connection
10478	Removes a database connection
10479	Process security filters
10480	Dispatches the request
10481	Get GET parameters
10482	Renders a view .
10483	Validate an object .
10484	Dispatches the view .
10485	Redirects to default module view
10486	Redirect user to default user view
10487	Initializes the user s profile
10488	Get user preference
10489	Get the default permission for a group .
10490	Returns the current view name
10491	Sets the view name .
10492	Returns the current view set
10493	Sets the current view set .
10494	Set the base path
10495	Get module path
10496	Generate SQL hash for given columns .
10497	Check string hash
10498	Read metadata from XML
10499	Use an account
10500	Send an email
10501	Logs an email
10502	Gets the info page
10503	Returns the file path to the given class name .
10504	Loads a metadata class .
10505	Returns core file path
10506	Finds a class file in the cache .
10507	Fill person with attributes
10508	Set a job
10509	Process all jobs .
10510	Determine if the given date string is a valid date .
10511	Renders the sort label .
10512	Flattens a path .
10513	Merge global config
10514	Creates a request .
10515	Store the cURL responses .
10516	Get Plot Data
10517	renders the XPlot
10518	Converts a mark to its equivalent
10519	Helper function to get the FF_FONT_FONT_FONT_FONT_FONT_FONT .
10520	Returns a singleton instance
10521	Get an attribute by key .
10522	Set an attribute in a group .
10523	Get an attribute from a group .
10524	Find a record by its primary key .
10525	Get the model
10526	Generates a unique ID for a function .
10527	Call all filters
10528	Append a hook .
10529	Check if hook exists .
10530	Call hook .
10531	Replace a function
10532	Returns the number of registered hooks .
10533	Check if a hook is in a do hook .
10534	Check if hook is called .
10535	Add route to router
10536	Pipe a route
10537	Runs application .
10538	Send a signal to the node .
10539	Set a definition .
10540	Get raw definition
10541	Encrypts the given value
10542	Decrypts value .
10543	Returns the default key
10544	Calculate arguments .
10545	Get string type
10546	Add an app
10547	Get sub route
10548	Serialize the node .
10549	Unserializes the node
10550	Returns the actual year to the actual year .
10551	Get current time stamp
10552	Returns day name .
10553	Returns the short name of the day .
10554	Returns month name .
10555	Returns the short name of the month .
10556	Format a date .
10557	Returns formatted date time
10558	Registers base services
10559	Post section tree .
10560	Set owner .
10561	Removes comments from a string .
10562	Minify CSS .
10563	Set global variable .
10564	Quote a string
10565	Explodes a generic string .
10566	Get role by role
10567	Add a role to the user .
10568	Check if user has role
10569	Error handler .
10570	Custom exception handler
10571	Get error message
10572	Get error backtrace
10573	Sets the name .
10574	Adds a setting .
10575	Adds a setting to the cache .
10576	Unset an offset .
10577	Set the sync state .
10578	Collect sync data .
10579	Creates an expression context .
10580	Terminates this execution .
10581	Registers a child execution .
10582	Called when a child execution is terminated .
10583	Sets the scope .
10584	Creates a new execution .
10585	Create a new execution .
10586	Returns all child executions .
10587	Recursively compute variables .
10588	Returns a variable .
10589	Gets a variable .
10590	Sets a variable .
10591	Sets a variable in the scope .
10592	Removes a variable from the scope .
10593	Removes a variable .
10594	Execute the command on the given node .
10595	Prompts to wait for execution .
10596	Sends a signal .
10597	Take transition .
10598	Inserts the current execution into the current execution .
10599	Load message from file
10600	Returns a string representation of the message
10601	Get Zend_View object
10602	Check if given directory is readable .
10603	Check if given directory is writable .
10604	Check if given file path is readable .
10605	Check if given file path is readable .
10606	Validate email address .
10607	Validate an IP address .
10608	Validate that the given value is an IPv4 address .
10609	Validate that an IPv4 address is not reserved .
10610	Validate an IPv6 address .
10611	Initializes the view .
10612	Check if attribute exists
10613	Check if method exists
10614	Get method parameters
10615	Get Reflection Method
10616	Convert object to array .
10617	Get SMS response .
10618	Returns a blank line
10619	Gets the number of columns in the command line .
10620	Get error block
10621	Get line of text
10622	Slices a portion of an array .
10623	Set validation rules
10624	Completes the flow
10625	Get an object by its name .
10626	Creates a new XML Object .
10627	Registers a namespace and extension
10628	Attempts to authenticate a user
10629	Retrieve a feed of the authenticated user .
10630	List liked media
10631	Sets a relationship
10632	Set object properties
10633	Finds all entities
10634	Returns the number of rows in the collection .
10635	Find a record by id
10636	Create a new record in the database
10637	Execute the query .
10638	Execute current sql query
10639	Check if the condition can be proceed .
10640	Create link element
10641	Add record to parent form
10642	Parses a picker map
10643	Converts an array of ReflectionClass instances into an array .
10644	Sets up the column mapping
10645	Returns the field associated with a given column .
10646	Returns the key search rule
10647	Set Record Array
10648	Save old record
10649	Convert to array .
10650	Converts the array to an associative array .
10651	Sets the value of the current record to the current object .
10652	Gets all input fields that match the given join
10653	Returns a join rule for given table join
10654	Returns the request method .
10655	Returns the request URI
10656	Get options from doctrine configuration
10657	Get builder instance .
10658	Issue an access token
10659	Format a report
10660	Decodes a JSON file
10661	Validate TOTP .
10662	Lists all Comment models .
10663	Do update action .
10664	Dispatches the request
10665	Implode an array
10666	Export a CSV file .
10667	Render a CSV file
10668	Get data table
10669	Load variables from the session
10670	Gets a property by name
10671	Returns the active record
10672	Set the active record id .
10673	Fetch the resultset
10674	Performs a direct fetch request
10675	Fetches the records from the database .
10676	Returns the number of records in the collection
10677	Execute the search query .
10678	get numberRecords
10679	Fetch a single record
10680	Generate JavaScript code for shortcut .
10681	Get a config value .
10682	Bootstrap services .
10683	Authenticates user by username and password
10684	Sets the request path .
10685	Sets the maximum age of the file .
10686	Convert a file to a mime type .
10687	Validates a mime type .
10688	Checks if the file is a text .
10689	Check full file .
10690	Set file properties
10691	Checks the cache of the request
10692	Reads from filesystem .
10693	Sends the content .
10694	Cleans the source string
10695	Minify JS .
10696	Minify CSS .
10697	Wordwrap function .
10698	Get text content .
10699	Sends text to browser
10700	Set Allow Origin
10701	Sends a file to the browser
10702	Register a new provider
10703	Denormalizes given data .
10704	Returns true if the given data supports the given type .
10705	Validate an array .
10706	Validate a model .
10707	Get the action attribute .
10708	Get the url attribute .
10709	Go to the next page .
10710	Go to the current page .
10711	Go back action .
10712	Perform the final action .
10713	Cancel the session .
10714	Renders the form state .
10715	Generate random string
10716	Check if the given callback is empty .
10717	Extracts a callable and returns the result .
10718	Check if the given value contains a given value .
10719	Merge anotherMI object into this one
10720	Create app .
10721	Dispatch event .
10722	Count documents by group .
10723	Aggregate a group
10724	Finds a document by its id .
10725	Get MongoIds from array of objects
10726	Normalize date .
10727	Check if a form is in the formRef libs
10728	Renders the page .
10729	Returns the URL of the current page
10730	Initializes all form objects
10731	Compare two integers .
10732	Returns an integer value
10733	Recursively find source files .
10734	Register a namespace
10735	Builds the cache
10736	Get composer autoloader .
10737	Finds the vendor directory .
10738	Get class loaders
10739	Get a middleware by name .
10740	Set a middleware by name .
10741	Return a new printable with the given string limit .
10742	Return a new printable with an array limit .
10743	Render string .
10744	Render array .
10745	Generate an array pair .
10746	Format an array value .
10747	Returns the string representation of the given value .
10748	Reject an envelope
10749	Add authentication middleware
10750	Render a webpage
10751	Renders the given webpage
10752	Render a view
10753	Set response headers
10754	Create a new comment .
10755	List all files in a directory
10756	Sort modules .
10757	Get all routes
10758	Render menu items
10759	Render a single menu item .
10760	Write CSV to file
10761	Set command options .
10762	Read configuration .
10763	Runs the checks .
10764	Run the export .
10765	Writes the cache .
10766	Returns a cached cache instance
10767	Initialize the command .
10768	executes command
10769	Flushes the given command to STDOUT .
10770	Check if given value is a chainable .
10771	Validates the form .
10772	Check if the condition is satisfied
10773	Complete the flow
10774	Gets the value of the field .
10775	Get the value of the column .
10776	Save old value
10777	Gets the default value
10778	Get the value on create
10779	Gets the value on update .
10780	Check required flag
10781	Check value type
10782	Validate the data
10783	Finds a template file
10784	Prepare theme name .
10785	Set theme .
10786	Register a theme
10787	Add a theme
10788	Returns the offset of an array
10789	Returns the key of an offset
10790	Return the standard deviation of the given array .
10791	Set middleware .
10792	Get action name
10793	Get route path parameters
10794	Returns true if the scheme matches the scheme .
10795	Checks if the hostname matches the given hostname .
10796	Checks if the given URI matches the given URI .
10797	Fetch a tree
10798	Fetch a node from the cache
10799	Recursively get all child nodes
10800	Returns settings .
10801	Get link value
10802	Gets the text value of this field .
10803	Get a new record
10804	Sets the secret
10805	Returns the binary representation of the given number .
10806	Get formatted number
10807	Adds a table column
10808	Adds an SQL expression to the table
10809	Reset SQL .
10810	Adds an order by
10811	Adds another SQL to the other query .
10812	Add an association to the main table
10813	Returns the SELECT part of the query
10814	Get a variable by key .
10815	Lists the application
10816	Get default template locations
10817	Renders the select box
10818	Get fonts from Google .
10819	Check if the current route matches a given group .
10820	Validate input fields
10821	Validate uniqueness
10822	Can record be updated
10823	Can record delete
10824	Updates an existing record
10825	Return a new record array
10826	Generates a unique ID for this object
10827	Insert a new record
10828	Delete one or more records
10829	Get all on audit fields
10830	Executes the specified trigger
10831	Get join fields
10832	Join one record with another
10833	Check if a record needs to be generated
10834	Runs the tests .
10835	Initializes the report
10836	Resolves route for given request
10837	Resolves action parameters .
10838	Check if a setting exists .
10839	Get a setting .
10840	Returns all settings .
10841	Loads the settings from the specified location .
10842	Sets the cache location .
10843	Prefixes CSS content
10844	Validator for prefix alignItems
10845	Get prefixing rules
10846	Validator for CSS alignments
10847	Filter flex rules
10848	Get prefixes for spacing
10849	Get CSS rules
10850	Post a comment on a media .
10851	Performs a DELETE request .
10852	Get the filtered media collection .
10853	Returns the preferred image
10854	Get the placeholder
10855	Create a new Rule from a string .
10856	Returns the formatted output
10857	Get eloquent method reflection .
10858	Index action .
10859	Renders sitemap action .
10860	Returns an array representing the XML structure .
10861	Check if the request is valid .
10862	Determines the access token .
10863	Call a method .
10864	Check if call context has changed .
10865	Stores a command .
10866	Execute a callback .
10867	Gets a procedure from the collection .
10868	Creates an environment file .
10869	Get pattern by name .
10870	Merges the group configuration into the current one .
10871	Removes a record from an object .
10872	Removes a record from a MTO
10873	Removes a record from a Mto1 .
10874	Convert snake_Attributes to snake_case
10875	Read metadata from XML
10876	Read meta collection
10877	Prefixes the given name with the package name .
10878	Check if user has access
10879	Builds the Redis driver .
10880	Get the model of a given table
10881	Add a resolver
10882	Returns the resolver for the given type .
10883	Sets a resolver for a given type .
10884	Resolves the given type and resolver .
10885	Set authorative .
10886	Register a module
10887	Sort modules .
10888	Sets the precedence of a module .
10889	Configure the main module from composer . json
10890	Find all modules in a given path
10891	Get row checkbox by field name
10892	Register services .
10893	Convert formatted string to value
10894	Convert value to string
10895	Convert value to number format
10896	Convert number to string
10897	Convert value to date format
10898	Convert date to string
10899	Convert a value to a datetime
10900	Convert a datetime value to a string
10901	Convert value to currency symbol
10902	Converts currency to value
10903	Convert a value to a phone number
10904	Converts a date time to another format
10905	Parse a date
10906	Render DSN for MySQL .
10907	Render the DSN for PGSQL .
10908	Render DSN parts .
10909	Insert data into database
10910	Insert multiple rows into database
10911	Get the path of the request
10912	Get an entry from the container .
10913	Format a query string .
10914	Format a value as a query string .
10915	Sets the bind values
10916	Get database profile
10917	Format a report
10918	Check that password is strong
10919	Validate email address
10920	Validate a date
10921	Get error message
10922	Make an adapter
10923	Agrega una tabla
10924	Generates a new ID .
10925	Generates a new system ID .
10926	Generates a new GUID .
10927	Get new id from sql
10928	Get a visible attribute
10929	Set formatter
10930	Prepares a file
10931	Close the log file
10932	Get log path
10933	Get formatter by extension
10934	Get document manager .
10935	Render a view .
10936	outputs the pdf
10937	Sets the base URL
10938	Create a cURL resource .
10939	Gets many responses .
10940	Make a POST request to the given endpoint .
10941	Sends many data to multiple endpoints .
10942	Push a job onto the queue .
10943	Creates the payload for the given job .
10944	Returns the content element identifier .
10945	Returns the content element signature .
10946	Returns the content element signature .
10947	Get the page title
10948	Removes a record .
10949	Sort a record by a given sort column
10950	Filter view children by view column
10951	Filter view children by system language .
10952	Set field value by db key .
10953	Get the data of an entity .
10954	Fill by data
10955	Extract a ZIP file .
10956	Add files to a zip archive .
10957	Extract a gzipped file .
10958	Read a line from a file .
10959	Get the size of a directory .
10960	Get all classes in a file .
10961	Adds a new route .
10962	Resolves route for given request
10963	Resolves a config key .
10964	Check if a value exists .
10965	Gets a config value .
10966	Load a config file
10967	Get background details .
10968	Connect to Twitter .
10969	Check response status code
10970	Handle message .
10971	Check if the given status is a message .
10972	Read the next chunk size
10973	Reads the stream .
10974	Gets a property value
10975	Get default value
10976	Get hidden attribute
10977	Gets the text value of this element
10978	Returns a map of key - value pairs for shortcut keys
10979	Get the context menu
10980	Get the function declaration .
10981	Get the redirect page for the given event .
10982	Returns the function type of an event .
10983	Set form name and element name
10984	Sets the form name
10985	Get formed function .
10986	Extracts the function name and parameters from a function string .
10987	Call a method .
10988	Clears the stack .
10989	Halt the current middleware .
10990	Reset the middleware .
10991	Create an instance of the specified element
10992	Convert counter to string
10993	Make GET request
10994	Make a POST request
10995	Get the response for the request
10996	Returns true if the browser should follow redirect .
10997	Check effective time
10998	Parse a string
10999	Parse a string
11000	Render form object .
11001	Render form
11002	Render form
11003	Displays a single entity .
11004	Store a new entity .
11005	Call the entity method .
11006	Get a middleware .
11007	Get the default commands .
11008	Updates the given user .
11009	Returns the plugin settings .
11010	Get group information
11011	Get the direct members of the group .
11012	Get effective member s membership
11013	Parse membership data .
11014	Parses the history
11015	Parse affiliate data
11016	Parses search results .
11017	Returns the current webpage object .
11018	Get element by name
11019	Returns error elements
11020	Renders all sub - forms .
11021	Set the bundle name
11022	Get translation key .
11023	Returns list of words .
11024	Load configs into options array
11025	Remove cache entry
11026	Get cache ids
11027	Remove all items from the cache
11028	Make directory
11029	Reads a configuration file .
11030	Get config reader by file extension
11031	Add branch .
11032	Add route .
11033	Find branch by part
11034	Returns the next branch with the given URI part .
11035	Find posts by issue .
11036	Get WordPress content .
11037	Get list of categories
11038	Get WordPress menus .
11039	Get Pages .
11040	Get WP posts .
11041	Get post types
11042	Get WordPress tags .
11043	Get taxonomies .
11044	Get WordPress terms .
11045	Add a path to the search path .
11046	Set the precedence of a module .
11047	Returns the precedence of a module
11048	Clears the resolve cache
11049	Get cached data
11050	Resolves a path to a file
11051	Parse request uri
11052	Saves the state of the object
11053	Get current step number
11054	Get form inputs .
11055	Cancel current session .
11056	Register a new sub - type Enum
11057	Get input value
11058	Delete cache file
11059	Convert to seconds
11060	Get key words .
11061	Finds emails in text .
11062	Checks if a string contains an array .
11063	Redirects to another endpoint .
11064	Migrate up .
11065	Run all migrations in a directory .
11066	Method to set property id
11067	Run the daemon .
11068	Check if a parameter exists
11069	Get the oauth request
11070	Calculates the OAuth signature .
11071	Creates a new node .
11072	Creates a new transition .
11073	Add setting .
11074	Add multiple settings .
11075	Get all settings .
11076	Retrieve all cachable settings .
11077	Returns all settings as array .
11078	Get all cachable settings .
11079	Get filtered settings .
11080	Returns all settings filtered by flag .
11081	Returns HTML to display the nodes
11082	Render node items
11083	Render a single node item .
11084	Runs the installer .
11085	Registers the bundle for the given environment .
11086	Installs the autoloader
11087	Initialize the application .
11088	Autoload a class
11089	Loads a file
11090	Forward to another route .
11091	set glyph icon
11092	Set query parameters .
11093	Set the query limit
11094	Get database connection .
11095	Gets a property by name
11096	Gets an object associated with this association .
11097	Set an association
11098	Parse a docblock
11099	Create a connection from memory .
11100	Create a connection from a file
11101	Get field by name
11102	Check if a field exists
11103	Get field names .
11104	Get initial data model .
11105	Authorizes an index request .
11106	Authorizes the request for creating a new resource .
11107	Get a nested item
11108	Initialize the user agent
11109	Get the export implementation .
11110	Returns the report implementation .
11111	Get runner implementation .
11112	Get cache implementation .
11113	Build the SQL to update a record .
11114	Builds the delete SQL query
11115	Get the style for the editcomb box
11116	Returns all child nodes .
11117	Get attribute value
11118	Returns the attributes of the node .
11119	Get a child node .
11120	Get the literal value of an element
11121	Cache menu if enabled .
11122	Handle the call .
11123	Check if the route is valid .
11124	Is this call a getter .
11125	Is this call a setter .
11126	Prepare the call .
11127	Get response body
11128	Convert the response body into an array
11129	Saves an object variable
11130	Loads an object variable
11131	Saves all view history objects .
11132	Clears all stored session objects
11133	Saves a JSON - encoded value as an array .
11134	Set view history .
11135	Start timer .
11136	Prints elapsed time
11137	Increment the elapsed time .
11138	Reset the timer
11139	Validate that the given value is a valid executable .
11140	Returns the redirect page
11141	Custom exception handler .
11142	Process URL input
11143	Get the base URI
11144	Validate identity .
11145	Sets up the credentials
11146	Set a visible attribute
11147	Get first dump from database .
11148	get from list
11149	Format a report
11150	Call a middleware .
11151	Call getters .
11152	Call proxy methods .
11153	Call setters .
11154	Set catchalt exceptions
11155	Clear middleware .
11156	Disable middleware .
11157	Enable middleware .
11158	Get middleware .
11159	Get a middleware group .
11160	Group middleware .
11161	Check if middleware exists .
11162	Check if middleware is disabled .
11163	Check if middleware is enabled .
11164	Get middleware .
11165	Get middleware collection .
11166	Prepend a middleware to the middleware stack .
11167	Push a middleware onto the stack .
11168	Set middleware context
11169	Call middleware .
11170	Save settings .
11171	Returns an array of form elements
11172	Setup the autoloader
11173	Find out the current transition .
11174	Wrapper for AJAX call
11175	Returns a JavaScript code for ajax call
11176	Returns HTML code for a link button tag .
11177	Return HTML code for submit button
11178	Cast key to string
11179	Check if middleware is abstract
11180	Check if middleware is a collection .
11181	Resolves a middleware .
11182	Resolve a middleware or throw an exception .
11183	Resolve middleware .
11184	Resolve many middleware .
11185	Resolves a single middleware .
11186	Resolve one middleware .
11187	renders a report
11188	Returns a unique string
11189	Check if the user has the given role .
11190	Determine if the user has the given role .
11191	Generates an encrypted hash
11192	Get curl info
11193	Perform the request .
11194	Check if a view has access to a specific role
11195	Get the view for the given view name
11196	Format a report
11197	Loads a DOMDocument .
11198	Validate a file .
11199	Validates the schema .
11200	Resolves Xinclude directives .
11201	Get element value
11202	Gets an XML element .
11203	Set the default namespace
11204	Register the environment namespace
11205	Checks if the given document is an environautautic configuration document .
11206	Refresh DOMXPath .
11207	Parses a libxml error .
11208	Get the resolvers for the given object .
11209	Check authorization params
11210	Creates a new authorization request .
11211	Completes the flow
11212	Prints the output of the request
11213	Get form inputs
11214	Redraw a form
11215	Show client alert
11216	Shows an error message
11217	Close popup .
11218	Runs a script
11219	Redirect to view
11220	Append scripts .
11221	Returns appended script .
11222	Append styles to a script .
11223	Returns the added stylesheet
11224	Include all JS related scripts
11225	Include RTE scripts
11226	Include ckeditor scripts
11227	Include the JavaScript for the prop window .
11228	Include validator scripts
11229	Execute all trigger actions
11230	Composes action message
11231	Convert string to array
11232	Process form object errors
11233	Sets the package sub - forms .
11234	Load a picker .
11235	Sets request params
11236	Fetches the data set
11237	Get element ID
11238	This method is used to auto suggest suggestion .
11239	Renders the context menu
11240	Render the HTML for this form
11241	Returns the event log message .
11242	Returns the list of onEventLog elements
11243	Run the event log
11244	Returns the element and event handlers
11245	Set JS scripts .
11246	Removes a middleware from the stack .
11247	Runs the middleware stack .
11248	Create new interval from string
11249	Generates a hash for the given timestamp and key
11250	Decodes a base32 string .
11251	Returns an iterator for all files .
11252	List all files .
11253	List directories .
11254	List files .
11255	Creates the file .
11256	Create a new directory
11257	Move file to new location
11258	Rename file .
11259	Remove directory .
11260	Set the field name .
11261	Sets the type .
11262	Sets the input format .
11263	Sets the value of this field .
11264	Gets the storage value .
11265	Saves the children
11266	Add child entities
11267	Get the list of models .
11268	Outputs a list of models .
11269	Convert resource to array
11270	Generates a reCaptcha form
11271	Verify a Google recaptcha
11272	Get service by name
11273	Render the error .
11274	Render Http Exception .
11275	Render CakePHP exception .
11276	Render serializer exception .
11277	Render a validation serializer exception .
11278	Render Http as json
11279	Render Http As JSON API
11280	Render CakePHP as JSON
11281	Render a CakePHP error .
11282	Default serializer render
11283	Render a serializer as JSON
11284	Render a serializer as JSON api exception
11285	Default validation serializer render
11286	Render a validation serializer as a JSON serializer .
11287	Render a validation serializer as a JsonSerializer exception .
11288	Opens a session by ID .
11289	Creates a new session .
11290	Prepare text .
11291	Display text .
11292	Display empty lines .
11293	Initializes the command .
11294	Kernel response event .
11295	Initializes the Debug Bar .
11296	Starts a new session
11297	Checks whether or not the request is hijacking
11298	Regenerates the session
11299	Validate the session .
11300	Link layers .
11301	Gets a backbone parameter
11302	Register the package
11303	Print CLI header
11304	Parse raw body .
11305	Remove extra indentation .
11306	Adds the request headers to the request .
11307	Parse a URL s query string
11308	Binds the template .
11309	Get a route s match .
11310	Returns the justification constant .
11311	Returns a list of available pdf files
11312	Extract documents link from html
11313	Check if link is excluded from exclude list
11314	Save a file
11315	Determine if a PDF exists .
11316	Returns the next ordered number .
11317	Ends the nesting .
11318	Display text .
11319	Print n lines .
11320	Fit the linear regression to a given data set .
11321	Performs a prediction .
11322	Initialize table .
11323	Write a record to the statement .
11324	Draws a list item
11325	Start a new line .
11326	Initialize the application .
11327	Get a specific size .
11328	Builds the form for a section .
11329	Returns the form factory .
11330	Load fixtures from fixture .
11331	Resolves a relative URL .
11332	Installs a package
11333	Install plugin files .
11334	Installs composer . json files .
11335	Updates a package .
11336	Called when composer is installed .
11337	Uninstall plugin .
11338	Uninstall composer plugin .
11339	Remove all files matching the given directory
11340	Recursively removes a directory
11341	Set text colors
11342	Get text area
11343	Calculates the width of an array .
11344	Get by date value
11345	Get date value
11346	Cast attribute .
11347	Cast attributes to array .
11348	Set a node at the given offset .
11349	Get a menu .
11350	Render tracker response .
11351	Returns definitions .
11352	Parses the imports .
11353	Parse service definitions .
11354	Loads a configuration file .
11355	Resolves services .
11356	Initializes the autoloader .
11357	Get api object
11358	Convert bytes into human readable format .
11359	Sets the bullet
11360	Sets a column definition .
11361	Calculates the total width
11362	Returns true if the table has a header .
11363	Gets the header text .
11364	Check column data
11365	Calculates the width for each column .
11366	Draws the table
11367	Creates a new session .
11368	Create a new session file .
11369	Save session data .
11370	Acquire a lock .
11371	Create section form .
11372	Creates a new instance of the specified class .
11373	Get the facts .
11374	Parses the fact string into an array .
11375	Find by id .
11376	Find by where clause
11377	Returns all objects from the database
11378	Finds all entities by a where clause
11379	Creates a new record in the database .
11380	Update data by where clause .
11381	Parse notation string
11382	Apply conditions to SQL expression
11383	Calculates the mean calculation .
11384	Create plugin client .
11385	Set file .
11386	Add a template .
11387	Removes the cached template file .
11388	Replace placeholders with blocks .
11389	Get template metadata .
11390	Builds the definition providers .
11391	Returns the result for the given formula name .
11392	Save formula .
11393	Add a new header .
11394	Sets dropdown .
11395	Checks if the current user is granted against the current user .
11396	Downloads a file .
11397	Returns the url for the given type and key .
11398	Sets album cover data
11399	Get data by key
11400	Get data from the URL .
11401	Install resources
11402	Check date validity
11403	Wrap the HTML frame
11404	Run the console command .
11405	Creates a new instance of a class
11406	Creates a new session .
11407	Sends a new entity .
11408	Register providers .
11409	Register provider from file
11410	Get facts .
11411	Populates the facts .
11412	Record a domain event .
11413	Apply domain event .
11414	Call plugin functions
11415	Draws the bar .
11416	Calculates the formula .
11417	Check if the current request has a layout .
11418	Initializes the terminal state .
11419	Overrides the members of the style .
11420	Clears styling .
11421	Sets text color .
11422	Sets the fill color
11423	Set text colors
11424	Reverse colors .
11425	Creates a function instance .
11426	Load plugins .
11427	Show plugin in admin page
11428	Checks the cache .
11429	Update cache .
11430	Register hooks .
11431	Get a channel by name .
11432	Create loggers .
11433	Create a logger .
11434	Get all locations .
11435	Returns an instance of a class
11436	Gets the interfaces for this class .
11437	Get parent class
11438	Get methods .
11439	Get all defined properties .
11440	Check if the given type is an admin
11441	Add a stylesheet
11442	Get the aggregate styles .
11443	Rewrites CSS paths .
11444	Wrap media rules
11445	Moves all imports to the start of the content .
11446	Gets a file by id .
11447	Remove a file from the archive .
11448	Get the path to the archive .
11449	Get archive file path
11450	Clean merged values .
11451	Filters an array by a given array .
11452	It returns terminal screen size .
11453	Use style .
11454	Preview script .
11455	Translates a mailto .
11456	Returns a translated form control .
11457	Generates a static control for a model attribute .
11458	Adds CSS style to HTML options .
11459	Create the directory .
11460	Set the files to publish .
11461	Initializes the user .
11462	Logs in the given identity .
11463	Regenerates CSRF token .
11464	Log in by cookie
11465	Get return url
11466	Check if a user is logged in .
11467	Renew the identity cookie
11468	Renew the authentication status .
11469	Checks if a user has a permission
11470	Returns the list of days of the week .
11471	Save uploaded file .
11472	Execute this query
11473	Set delete mode
11474	Sets the table type to insert
11475	Adds an INNER JOIN clause to the query .
11476	Adds a where expression to the query .
11477	Adds a having clause to the query .
11478	Returns the SQL for DELETE query
11479	Creates a positional parameter .
11480	Binds the logger to the container .
11481	Bind logger to container .
11482	Sets the HTTP status code .
11483	Returns the formatted response body .
11484	Redirect to another url
11485	Create empty response
11486	Get headers array
11487	Get the cookies .
11488	Returns default formatters .
11489	Extracts the auth user password from the encoded string .
11490	Returns an array of configured scenarios .
11491	Fill scenario attributes
11492	Returns the name of the form .
11493	Get all public attributes .
11494	Validates the model .
11495	Validates multiple models .
11496	Translation message .
11497	Add an attachment
11498	Add a plugin to the request .
11499	Send the request to the API .
11500	Load a class
11501	Get list of listeners
11502	Set listener properties
11503	Get listener from annotation
11504	Get command options
11505	Set options .
11506	Get a key value
11507	Fill model from array .
11508	Load Doctrine entities from a directory .
11509	Extend the Entity Manager .
11510	Check all predictions .
11511	Process the extends xml
11512	Check if class method exists
11513	Check if class property exists
11514	Check if function is callable
11515	Verify closure .
11516	Verify dispatch
11517	Get the dependencies of the dispatch .
11518	Get arguments for dispatch .
11519	Dispatch class method .
11520	Get a class property .
11521	Get the dispatcher class .
11522	Dispatch function .
11523	Dispatch a closure .
11524	Dispatches a callable .
11525	Returns string of arguments as string
11526	Get request arguments .
11527	Parse request arguments .
11528	Generate a URL to an asset
11529	Set the protocol version .
11530	Validate header values
11531	Injects a header .
11532	Returns the current timestamp .
11533	Check and update the cookie fields
11534	Stores a cookie .
11535	Adds cookies from HTTP response .
11536	Returns the cookies matching the given URL .
11537	Returns all cookies .
11538	Serializes the cookies .
11539	Unserializes a session
11540	Check if the request host matches the given domain .
11541	Creates a new command instance .
11542	Get the arguments for a given command .
11543	Returns the help for a given command
11544	Return a singleton instance of a frontend class
11545	Converts an expression to the target system .
11546	Parses an expression part .
11547	Process a nested key
11548	Trim characters from a string
11549	Sets the encoding
11550	Creates a new iterator exception .
11551	Initializes translations .
11552	Initialize URL language prefixes .
11553	Get message formatter
11554	Starts a transaction .
11555	Get API request url
11556	Get API request params
11557	Returns an array of success lines
11558	Get success message
11559	Find all budget by account id
11560	Get current language
11561	Parses the Accept - Language header
11562	Add a binding to the container .
11563	Create a class instance .
11564	Validate URL .
11565	Check if a given field name is a live variable
11566	Gets the value of an object .
11567	Wrap an object
11568	Return the field as a Date .
11569	Generate session identifier .
11570	Encrypt session data
11571	Decrypt session data
11572	Generates the encryption key .
11573	Set encryption algorithm
11574	Sets the md5 hash algorithm .
11575	Builds the SET statements for a table .
11576	Initializes the service
11577	Get parameter value
11578	Check target relation exists .
11579	Checks if the given target attribute exists in the target attribute .
11580	Check if value exists .
11581	Gets the clause .
11582	Renders a modal .
11583	Localizes a file .
11584	Detach the stream .
11585	Reads from the stream .
11586	Creates a new request instance .
11587	Create request from global variables .
11588	Set request server .
11589	Set request headers .
11590	Get request path
11591	Returns the path of the request .
11592	Get http host .
11593	Sets the request method .
11594	Returns the request method .
11595	Returns the mime type for the given format .
11596	Get format from mime type .
11597	Returns the request format .
11598	Renders a template .
11599	Initialize HTTP socket
11600	Add middleware
11601	Create a new request application
11602	Sets an alias .
11603	Set aliases .
11604	Get error log level .
11605	Generates a proxy .
11606	Returns a string of method call parameters
11607	Generates a proxy class
11608	Get proxy properties
11609	Get proxy methods
11610	Generate proxy class name
11611	Returns method declaration .
11612	Check if method can be proxied .
11613	Returns the methods that can be proxied .
11614	Recursively traverse the given structure .
11615	Get method parameters
11616	Create a Packagist hook
11617	Loads messages from cache .
11618	Initialize the framework .
11619	Bootstrap the application configuration .
11620	Bootstrap core
11621	Bootstrap the application container .
11622	Get environment variable .
11623	Set environment variable
11624	Get a configuration value .
11625	Abort the request .
11626	Create a new HTTP redirect exception .
11627	Create a new Response instance .
11628	Redirects to another route .
11629	Get a view instance .
11630	Get an item from the collection .
11631	Validate a descriptor key
11632	Validates the given descriptor .
11633	Get cache invalidation settings
11634	Set cache invalidation settings
11635	Initialize the logger
11636	Get log file path
11637	Verify a password .
11638	Set whether the config exists .
11639	Renders the progress bar .
11640	Renders a progress bar .
11641	Process SOAP request
11642	Get SOAP server
11643	OnFlush event .
11644	This method is invoked when the cache is triggered .
11645	Invalidates an entity .
11646	Add a tag to be invalidated .
11647	Returns a list of available SEX choices .
11648	Set filter callback
11649	Filter a value
11650	get refill percentage
11651	Get all seo elements
11652	Set seoility
11653	Get seoility data
11654	Convert value to boolean
11655	Calculates the ordinate by the given coordinates
11656	Calculates the abscissa by coordinates
11657	Add an attachment
11658	Encodes the message .
11659	Encodes the message to a file .
11660	Encode this part to a file .
11661	Adds a new MIME part to the message .
11662	Encodes a quoted printable string
11663	Builds a header parameter
11664	Builds a RFC2047 parameter
11665	Explode a quoted string
11666	Encodes a header value
11667	Encodes a string using mb_subscoding .
11668	Return the admin messages view .
11669	Returns the next line .
11670	Renders items .
11671	Reads annotations from the controller
11672	Set cache option
11673	Alias of a string .
11674	Creates a sentence .
11675	Extracts an array from the photoset
11676	Is the session valid?
11677	Get field error
11678	Set the same site .
11679	Cleans all translation files .
11680	Finds classes in a given namespace
11681	Get namespace path
11682	Get paths for a namespace
11683	Parses a namespace string into an array .
11684	Get loader prefixes .
11685	Update the session .
11686	Merges an array with new values .
11687	Get session data
11688	Returns the page number from the query string .
11689	Builds the query string .
11690	Get filters as array
11691	Create a Form instance .
11692	Stores the result in the session .
11693	Get pagination
11694	Returns the ID of the previous record .
11695	Convert to array .
11696	Add new field
11697	Process options .
11698	Get connection params
11699	Is database already installed
11700	Returns the sql string for this object
11701	Execute this query
11702	Get repository for entity
11703	Adds a new entity to the registry .
11704	Save an entity .
11705	Removes an entity from the registry .
11706	Commit all created models .
11707	Get store by name
11708	Get store configuration .
11709	Get store instance from config .
11710	Validate the password
11711	Creates a new instance based on the accept header .
11712	Parse a CSV header string
11713	Compare array with needle
11714	Calculate the radius of a given latitude .
11715	Converts degrees to DMS
11716	Convert degrees to decimal
11717	Enables production rendering
11718	Debug rendering
11719	Log the error message
11720	Generates a configuration file .
11721	Creates a configuration file .
11722	Saves messages to PHP file .
11723	Saves messages to a PO file .
11724	Creates instance from array .
11725	Creates a time from a string .
11726	Creates a time from a given date .
11727	Creates a time from seconds .
11728	Invalidate tags .
11729	Flushes all tags .
11730	Encode tags .
11731	Register the config file .
11732	Get all cookies .
11733	Sets a cookie .
11734	Remove a cookie .
11735	Prompt user for confirmation .
11736	Get labels .
11737	Wrapper for Session
11738	Returns table primary key metadata .
11739	Gets table foreign keys .
11740	Returns table indexes metadata .
11741	Returns table unique metadata .
11742	Returns table checks metadata .
11743	Gets default values for a table .
11744	Get parameter by key
11745	Checks access for a given permission
11746	Sets the distinct flag .
11747	Set the columns for the query .
11748	Join a table
11749	INNER JOIN
11750	Left Join
11751	Left outer join
11752	RIGHT Join
11753	INNER JOIN
11754	Adds a full OUTER JOIN clause to the query .
11755	Group by .
11756	Simple AND HAVING condition .
11757	OR HAVING condition .
11758	Order by .
11759	Sets the limit and offset
11760	Set offset .
11761	Builds the query
11762	Renders a link button .
11763	Renders a button .
11764	Renders the locale switcher .
11765	Convert to string
11766	Gets the ordinate by the given coordinates
11767	Returns the abscissa by coordinates
11768	Find record by id
11769	Find one record by predicate
11770	Checks if the given ID exists in the database .
11771	Check if a record exists in the database
11772	Delete rows by predicate
11773	Deletes record by id
11774	Function to update rows
11775	Insert data into table
11776	Relation object .
11777	Returns the primary keys of this table
11778	Get unique key
11779	Get column information .
11780	Execute a SQL statement
11781	Get the predicate for a primary key
11782	Checks if data columns exist in table .
11783	Parse the response content into an array .
11784	Parse the content as an object
11785	Set the return type .
11786	Runs the filters .
11787	Enqueue scripts .
11788	Set the type .
11789	Set the name .
11790	Defines the start position .
11791	Assign a damage
11792	Set hit level
11793	Set the meter gain value
11794	Define transformations .
11795	Add a cancel ability .
11796	Set the start frames
11797	Set the active frames .
11798	Set recovery frames
11799	Set the hit advantage
11800	Set the advantage on guard
11801	Builds a new Move .
11802	Send a message to slack
11803	Parse route segments
11804	Parse route data
11805	Validate datum
11806	Searches for a given param .
11807	Call repository generator .
11808	Validate class name
11809	Check if the file is an image
11810	Returns number of scanned files
11811	Get the route path info
11812	Get raw route and params
11813	Returns a new instance with the specified scheme .
11814	Create a new instance with the specified user information .
11815	Returns a new instance with the specified host .
11816	Returns a new instance with the specified port .
11817	Queries an array by key .
11818	Queries the value of an array using brackets .
11819	Sets query variables
11820	Set a query variable
11821	Returns the URL .
11822	Normalizes the URL .
11823	Resolves a URL .
11824	Check if the URI is a fragment only .
11825	Returns the canonical URL of the current request .
11826	Returns the current url
11827	Get option value
11828	Build query string
11829	Parse a URL
11830	Display a text
11831	Translates the message .
11832	Suggest the request language .
11833	Get the new states list .
11834	Validate state names .
11835	Switch to new states .
11836	Find categories by budget id
11837	Displays the login page .
11838	Logout user .
11839	Connects to the account .
11840	Get a parameter by name
11841	set html body
11842	adds an HTML image
11843	Adds an attachment
11844	Convert a file to a string
11845	Add a text part
11846	Add an HTML part to the message body
11847	Add an HTML image part
11848	Adds an attachment part to the given object .
11849	Encode headers .
11850	Checks the parameters to see if they are valid .
11851	Check if value is valid
11852	Initializes the filter .
11853	Load permissions from file .
11854	Save items .
11855	Save data to a file .
11856	Create Json response .
11857	Sets the callback .
11858	Set encoding options .
11859	Get layout .
11860	Returns the categories as a string
11861	Update session entity
11862	Delete session entity
11863	Configure the command options .
11864	Load configuration from command line .
11865	Returns the memory limit .
11866	Called when a model is created .
11867	Render tool .
11868	Adds a plugin to the application .
11869	Retrieve a configuration value .
11870	Generate a URL .
11871	Defines a GET route for the given route .
11872	Create html response
11873	Create a redirect response
11874	Sets the path segments .
11875	Returns a proxy instance .
11876	Returns an instance of the given classname
11877	Gets all entities .
11878	Get the given columns .
11879	Paginate the results .
11880	Find an object by its ID .
11881	Persist an entity
11882	Delete an entity
11883	Counts entities .
11884	Create a select query
11885	Apply scopes to a query builder
11886	Apply order by .
11887	Create a new NoResult exception .
11888	Replace placeholders with values .
11889	adds a method
11890	Get method by name
11891	Stop loop .
11892	Add multiple headers .
11893	Sets the link element .
11894	Create a new request
11895	Creates a new photo instance .
11896	Validates that the given value is within the specified range .
11897	Starts the session
11898	Regenerates the session id
11899	Writes the session file .
11900	Unset all session data
11901	Destroys the session
11902	Decode session data
11903	Sets session cache_expire
11904	Returns an instance of the reaction .
11905	Retrieve module options
11906	Returns the size of the file
11907	Set walk flag
11908	Set flag for array
11909	Sets matrix data
11910	Returns a node at the specified position .
11911	Set an element at the specified position .
11912	Rewinds the iterator .
11913	Get the previous node
11914	get previous x
11915	Get previous Y
11916	Set the previous position
11917	Advances the iterator to the next position .
11918	Advance x position
11919	Set the next Y
11920	Move forward to next position
11921	Seek to specified position .
11922	Returns the current position .
11923	Get the current key
11924	Returns true if the path is valid .
11925	Check if the key is a valid X .
11926	Determines whether or not the X axis is valid .
11927	Returns the number of edges in the polygon .
11928	Seek to an offset .
11929	Seek to an offset
11930	Check if an offset exists
11931	Returns the element at given offset .
11932	Set an offset
11933	Checks if the given value is a boolean .
11934	Allow access to an object
11935	Allow controller methods
11936	Set table name .
11937	Sets the FROM table .
11938	Simple AND WHERE condition .
11939	Where conditions .
11940	Sets a static rule .
11941	Sets a static rule reference .
11942	Get a Zend_Filter_Interface object
11943	End body .
11944	Register js file
11945	Registers a javascript variable .
11946	Returns the default config files .
11947	Returns a singleton config instance .
11948	Sets up the channels .
11949	Reads a configuration file .
11950	Writes a configuration file
11951	Read configuration data from a file
11952	Returns the default channel
11953	Get channel value
11954	Set the channels configuration
11955	Get configuration type
11956	Returns the documentation for a configuration key .
11957	Returns the prompt value .
11958	Returns the group for the specified key .
11959	Returns an array of group names
11960	Returns all keys of the given group
11961	Returns all valid values for a given key .
11962	Returns a list of all available configuration keys .
11963	Remove a configuration key
11964	Removes a layer from the configuration
11965	Get a layer definition
11966	Check if a specific key is defined .
11967	Sets a registry
11968	Processes the extends configuration
11969	Replace constants with their values .
11970	Get the log callback .
11971	Check if value is valid
11972	Returns an array of valid values .
11973	Returns an array of valid values .
11974	Sets the value of the enumeration .
11975	Initializes the object
11976	Initiates a new session .
11977	Add a success .
11978	Increment the idle time .
11979	Gets the estimated amount of the transaction .
11980	Get the allowed request methods .
11981	Disable WordPress auto update .
11982	Block wp request .
11983	Remove the admin nag
11984	Is valid point
11985	Returns true if the diagonal is a parallelogram .
11986	Get a property from the container .
11987	Check if a value exists in the container .
11988	Find application by id
11989	Finds all applications .
11990	Checks if two NumberSystem is equal .
11991	Returns the digits .
11992	Builds a number from the given digits .
11993	Validate number value
11994	Executes a command .
11995	Generates a unique key
11996	Connect to the Redis server .
11997	Returns the command string .
11998	Convert domain event message into MongoDB document .
11999	Returns a domain event message .
12000	Reset the object
12001	Normalizes message array
12002	Post validation .
12003	Attach form data event
12004	Get form definitions .
12005	Removes a string from an array .
12006	Fetches all the form elements
12007	Swap an entity with a form tag .
12008	Configures a form to be excluded from a form
12009	Set form data handler
12010	Remove excluded fields from form
12011	Add a response
12012	Creates a Response2_Response object from a string
12013	Creates a response from a file .
12014	Makes the head version of an entity
12015	Check if the entity needs a new version .
12016	Persist an entity
12017	Clear all versions of an entity
12018	Clean up directory .
12019	Check if the given key exists on the filesystem
12020	Moves a key .
12021	Reconnects to different fs .
12022	Checks if the given key is aistant directory .
12023	Creates a directory recursively
12024	Find an entity by id .
12025	Create a new entity .
12026	Save an entity .
12027	Delete an entity
12028	Validate an entity .
12029	Executes a SELECT query .
12030	Builds query builder .
12031	Set criteria in query .
12032	Set criterion in query .
12033	Set order by .
12034	Saves the given entity to the database .
12035	Sets the properties for a save create query .
12036	Set the properties for a save create statement .
12037	Gets the relations of an entity .
12038	Ensures that all required properties are set .
12039	Send message .
12040	Execute the given operation
12041	Get script src
12042	Display a div .
12043	Display image tag .
12044	Display audio .
12045	Verify a user s response .
12046	Verify the given request .
12047	Render script tag
12048	Render a script with a callback function .
12049	Check key .
12050	Check if value is string
12051	Send verify request .
12052	Initialize the theme
12053	Finds the path to a view file .
12054	Render a php stateless file
12055	Register post types .
12056	Generates a token .
12057	Generates a token .
12058	Run the build command
12059	Message filter callback
12060	Log a notice
12061	Log an info message
12062	Log a debug message
12063	Logs raw message
12064	Profile an Endpoint
12065	Logs a message .
12066	Converts a message to a string .
12067	Converts an Exception to a string .
12068	Colorizes text according to given colors .
12069	get callable data
12070	Process place holders .
12071	Format a value .
12072	Return seo object
12073	Returns the table name for the given active record .
12074	Deletes all records for the given model .
12075	Save Seo model
12076	Initialize database connection
12077	PHP command constructor .
12078	Get summary of all commands
12079	Returns a list of all available shortcuts .
12080	Get the help for a specific command
12081	get help args
12082	Handle package post package event
12083	Compile DSN string
12084	Escape a value
12085	Add a template root .
12086	Get the count for a given value .
12087	Get number of items in a collection
12088	Create the count query .
12089	Get the entity manager
12090	Get current path .
12091	Load a config
12092	Clears an entry .
12093	Returns a bundle .
12094	Sets a bundle entry .
12095	Clears a bundle .
12096	Invalidates an entity
12097	Ensures that the dependencies database is valid .
12098	Returns the dependencies of a package
12099	Get package dependencies
12100	Install a package
12101	Uninstall a package
12102	Rebuilds the dependency cache
12103	Lock the dependency file
12104	Unlock the mutex
12105	Get the dependency list
12106	Writes the dependencies file
12107	Auto load modules
12108	Register a module
12109	Renders a section
12110	Renders error view .
12111	Set foreground .
12112	Set format background .
12113	Sets the color to black .
12114	Set red color .
12115	Set green color .
12116	Set the yellow color .
12117	Set blue color .
12118	Set MAGenta color .
12119	Sets the colored color .
12120	Set white color .
12121	Resets the format .
12122	Sets the background color .
12123	Removes an option .
12124	Formats the message .
12125	Logs a command .
12126	Get the uploaded files .
12127	Sets the state of the package .
12128	Returns the list of registered postinstall scripts
12129	Initializes postinstall scripts
12130	Populate package info from array
12131	Returns a list of files in the archive
12132	Returns the configuration attributes .
12133	Check if the package is compatible
12134	Check if a package is a subpackage
12135	Get group by name
12136	Removes a key from an array
12137	Builds the manager .
12138	Calculates modulo
12139	Calculates the modulo from two parts
12140	Update event .
12141	Write message to target .
12142	Select from repository entity
12143	Get the entity alias
12144	Delete from database
12145	Overrides parent method .
12146	Add FROM clause
12147	Set an alias .
12148	Group by .
12149	Add a group by
12150	Order by .
12151	Add order by
12152	Sets limit and offset .
12153	Paginate the query .
12154	Fetch one result
12155	Returns a single result .
12156	Fetch all entities
12157	Creates a parameter
12158	Find an unused parameter name
12159	Parse method calls .
12160	Call functions .
12161	Is an associative array?
12162	Creates a description for the given subject .
12163	Record timestamp .
12164	Returns the timestamp as a table
12165	Get the current page load time .
12166	Get the most consumed domain .
12167	Renders the header .
12168	Renders the header image .
12169	Renders the body
12170	Renders the card footer .
12171	Get controller group
12172	Get options values .
12173	Get action arguments help
12174	Get the help for an action
12175	Returns the response headers .
12176	Returns true if the user agent is Flash .
12177	Returns the raw body
12178	Get body params
12179	Get host info
12180	Returns the script URL
12181	Get server params
12182	Returns the content types accepted by the client .
12183	Returns a list of available languages .
12184	Get the ETags .
12185	Get CSRF token
12186	Generates a CSRF token .
12187	Get server parameters .
12188	User login event
12189	Crop an image
12190	Make crop name .
12191	Crop the image
12192	Get size of image
12193	Returns an array of all permutations of a file .
12194	Returns the annotations for the given doc string .
12195	Get annotation matches .
12196	Sets an annotation .
12197	Set annotation arguments
12198	Get annotation properties .
12199	Processes annotation properties
12200	Get arguments list
12201	Determine the type of the given value .
12202	Get annotation from annotation map
12203	Cleans the match .
12204	Returns an array of subscribed events
12205	Handle a command .
12206	Handle command help
12207	Get provider for command
12208	Add a LEFT JOIN clause .
12209	Adds a RIGHT JOIN clause to the query .
12210	Add a RIGHT JOIN clause to the query .
12211	Convert to SQL string .
12212	Fetch all rows
12213	Sets the table name
12214	Set object structure
12215	Sets the object database name .
12216	Set object model name
12217	Build the model
12218	Builds the related fields
12219	Register the validation factory .
12220	Loads the services .
12221	Get target site id .
12222	Get parent relation
12223	Renders an item .
12224	Retrieve all rows from the collection .
12225	Executes the query and returns a single result .
12226	Gets the first column of the query .
12227	Gets the number of documents in the collection .
12228	Returns true if the table exists .
12229	Makes a call to a given namespace .
12230	Find calls for a given function name .
12231	PEAR registry constructor .
12232	Ensure that the directory exists .
12233	Create channel state dir
12234	Create channel directory
12235	Get channel file name
12236	Gets a channel from an alias
12237	Returns the channel alias
12238	Lock registry file
12239	Check if a channel exists
12240	Check if a mirror exists
12241	Check if an alias is an alias
12242	Returns information about a specific channel .
12243	Updates a channel
12244	Check if the given data matches the given callback .
12245	Get TinyMCE file
12246	Initialize String with given value
12247	Get entity manager
12248	Resolves a class
12249	Validate that the given value has the given hashes .
12250	Validate route exists .
12251	Hard copy from source directory
12252	Initializes the widget .
12253	Get the next day
12254	Get previous day
12255	Create date range
12256	Get file path
12257	Get a directory .
12258	Opens a file .
12259	Creates a new file .
12260	Writes the contents of a file .
12261	Get the contents of a file .
12262	Change file mode
12263	Lock a file .
12264	Called when a file is locked .
12265	Ensure that the given value is a File object .
12266	Ensure the given value is a directory .
12267	Check the lock timer .
12268	Get global variables
12269	Render section .
12270	Add ON clause .
12271	Add a where condition to the query .
12272	Add a WHERE condition to the query .
12273	Convert array to collection
12274	It is a normal .
12275	Get session by ID .
12276	Internal method to update a record
12277	Revert down migration .
12278	Reset the database .
12279	Gets the migration history .
12280	Generates a list of new migrations .
12281	Creates a new migration file .
12282	Revert a migration .
12283	Migrate migrations to given time .
12284	Migrate to another version .
12285	Loads the database adapter
12286	Connect to the database
12287	Add a cached query
12288	Get cached results
12289	Execute an array query
12290	Creates a new table
12291	Add columns to a table
12292	Get table info
12293	Checks if a given table exists .
12294	Build fields array
12295	Escape a string
12296	Clears the query
12297	Build where statement
12298	Add a WHERE string to the query
12299	Create a where in clause
12300	Where
12301	Simple AND WHERE
12302	Order by
12303	Get query string
12304	Get all rows from the database .
12305	Get a single record .
12306	Get all available extensions
12307	Get ModelOperator instance
12308	Sets the path to the FSSL storage
12309	Loads structure from yaml file
12310	Get model structure
12311	Save model structure
12312	Dump model data
12313	Load data from given models
12314	Find all transactions for a given account
12315	Set connection state .
12316	Returns the length of the backlog .
12317	Process all commands .
12318	Sends a query to the queue .
12319	Sets the connection status .
12320	Handles a message
12321	Parse message data
12322	Cancel request .
12323	Redirect user to socialite .
12324	Handle user authentication .
12325	Unlink a social provider .
12326	Update the settings .
12327	Check provider .
12328	Set the service configuration .
12329	Create social user .
12330	Cleans up expired timers .
12331	Pack a record .
12332	Unpack a record
12333	Creates the cleanup timer .
12334	Check if a menu item has a submenu .
12335	Set the account id
12336	Set user id
12337	Get the associated account
12338	Returns user object .
12339	Generate the next exception
12340	Strip HTML tags .
12341	Initializes the configuration object .
12342	Returns the valid roles for a given release .
12343	Return the base install roles
12344	Shorten the string
12345	Sets the blocksize
12346	Gets a value by key .
12347	Generate template names
12348	Merges data into one array .
12349	Read configuration data
12350	Read configuration file
12351	Normalizes a config file path .
12352	Apply a domain event .
12353	Record a domain event .
12354	Set related data
12355	This method is called when a presenter is called .
12356	Redraws all visible components
12357	Redirect to destination
12358	Initialize Twig plugins .
12359	Set multiple variables at once .
12360	Fetch template from string
12361	Loads plugins from a directory .
12362	Creates a BusinessHours from an array .
12363	Shifts the business hours to the given timezone .
12364	Flatten days intervals .
12365	validate a warning
12366	Returns the contents of a file
12367	Parse imports .
12368	Parse a yaml file .
12369	Sets YAML parameters .
12370	Calculates the request length
12371	Execute a command .
12372	Serialize a value
12373	Unpublish all other versions .
12374	Set the class name
12375	Set the ID column .
12376	Set the name column .
12377	Set data column
12378	Set the lifetime column .
12379	Set the modified column
12380	Sets the created column .
12381	Get the providers .
12382	Get all available providers .
12383	Boot the extension .
12384	Registers the content negotiation service
12385	Set the request format .
12386	Validate request content type
12387	Execute a function
12388	Discovers a channel .
12389	Get a dependency2 object
12390	Returns the path to the download directory
12391	Determines whether a cycle is a cycle
12392	Initializes the dependency graph
12393	Get url argument
12394	Outputs a line .
12395	Get command arguments
12396	Register the NoCaptcha class .
12397	Register validation rules .
12398	Register form macros .
12399	Read from XML file
12400	Read from any file
12401	Returns the XML representation of this channel .
12402	validate a validation error
12403	Returns the base URL of a resource type .
12404	Resets functions for a specific type .
12405	Sets the default PEAR protocols
12406	Get a mirror
12407	Set validation package
12408	Add a function
12409	Add a mirror function
12410	Returns the validation package
12411	Returns the PEAR_Validate object .
12412	Checks if a property can be read .
12413	Check if a property can be set .
12414	Returns the compiled template file .
12415	Loads the cache parameters .
12416	Add an entry to the cache .
12417	Gets a value from the cache .
12418	Returns the cache entry for the given identifier .
12419	Checks whether an entry exists .
12420	Unset an offset .
12421	Apply site conditions
12422	Assigns a value to an array .
12423	Extract an array of errors from an error object .
12424	Get the model config file
12425	Get model definition
12426	Saves the model definition .
12427	Get the metadata .
12428	Set value for field name
12429	Set value for field value
12430	Set field value
12431	Aggregate a collection
12432	Make a cURL resource .
12433	Proxy image proxy .
12434	Create a validator
12435	Validates a model attribute .
12436	Validate a value
12437	Runs the application .
12438	Shutdown function .
12439	Generate URL .
12440	Returns the canonical URL of the page .
12441	Normalizes the given route path .
12442	Check if all tests are running .
12443	Gets the view names .
12444	Gets a value from the session .
12445	Stores a value in the cache .
12446	Store multiple items in the cache .
12447	Get an item from the cache .
12448	Add a value to the cache .
12449	Get a value from the cache .
12450	Deletes a value from the storage .
12451	Filters out invalid characters
12452	Add default options
12453	Get option value or config value .
12454	Get option value with typecast
12455	Load configuration from file .
12456	Load config file
12457	Render config .
12458	Render a value
12459	Normalizes the config path .
12460	Set package 2 . 1
12461	Clears the contents of the package
12462	Clears all dependencies .
12463	Sets the package type
12464	Returns the current release name
12465	Add an install tag
12466	Adds an ignore tag
12467	Adds a binary package
12468	Add configure option
12469	Set PHP install condition
12470	Set the OS install condition
12471	Set the architecture condition
12472	Generates a changelog entry
12473	Check if the file is a video
12474	Returns information about the video .
12475	Set value for field value
12476	Set value for field value
12477	Set field type
12478	Set value for field value
12479	Set the category id
12480	Set the value of the accountIdVirtual value
12481	Construct from string values .
12482	Create instance from array .
12483	Returns an instance of a SQLite file .
12484	Create a new MySQL instance
12485	Runs a SQL query
12486	Get all table names
12487	Returns a single row from the result set
12488	Returns the first column of the first row of the result set
12489	Check if table exists
12490	Check if a column exists in a given table .
12491	Get all primary keys of a table
12492	Get column names
12493	Log query .
12494	Add event listener
12495	Run the application .
12496	Sets the list of keys to the validator
12497	Set the private key
12498	Set envelope key
12499	Sets the compression
12500	Returns a formatted timestamp .
12501	Supprimer une uisateur
12502	Execute a function
12503	Creates migration history table .
12504	Add a filter to the chain
12505	Static method to filter a value
12506	Adds the inverseOfOf relation to the result array .
12507	Populates the query builder .
12508	Populates a single relation asynchronously .
12509	Populates the relation async with multiple models .
12510	Returns list of invalid properties
12511	Processes an array
12512	Creates a new instance of the given class
12513	Check if text is equal to another .
12514	Checks if this text ends with another .
12515	Returns true if the text contains the given text .
12516	Returns a substring of the current text .
12517	Replace text with another text .
12518	Replace text by regex .
12519	Emit a beforeSave event .
12520	Performs beforeDelete event .
12521	Refreshes the model .
12522	Update all records in the database .
12523	Deletes all records
12524	Inserts a model into the database .
12525	Inserts a row in the database .
12526	Deletes this object from the database .
12527	Get methods .
12528	Get method identifier .
12529	Clean custom data .
12530	Get all available commands
12531	Get command help
12532	Create a controller .
12533	Handle an exception
12534	Handle fatal error .
12535	Logs an exception .
12536	Get exception trace
12537	Reduce exception trace .
12538	Proxy method with app property
12539	Proxy method with app .
12540	Injects a variable into the arguments array .
12541	Ensure string is translated .
12542	Create a new repository
12543	Runs startup function
12544	Generate a random key
12545	Return an array representation of the data store .
12546	Registers a custom error
12547	Updates a user .
12548	Make a request for countries
12549	Encode a string
12550	Get default reason phrase
12551	Returns the value of a header .
12552	Returns the response body .
12553	Decode the given data into an array .
12554	Check if table exists
12555	Removes all entries from the table
12556	Checks if there is a timeout .
12557	Get all headers .
12558	Get header name .
12559	Write multiple messages .
12560	Write a message to the console .
12561	Sets the filter type
12562	Returns the path to a view .
12563	Get the list of possible files for the given file name .
12564	Starts the session .
12565	Gets a value by id .
12566	Sets a cookie .
12567	Removes a cookie by its id .
12568	Generates a CSRF token .
12569	Validate a CSRF token .
12570	Humanize a table name .
12571	Deletes the file
12572	Moves the file
12573	Cleans the filename
12574	Dispatches an event
12575	Handle a warning
12576	Handle fatal errors
12577	Saves the item
12578	Returns a string representation of this exception .
12579	Convert array to XML
12580	Convert an HTML header string to an array .
12581	Load a config file
12582	Set a config
12583	Get a configuration value .
12584	Build a configuration stack
12585	Parse a configuration array
12586	Parse a configuration recursively
12587	Compile a join constraint into SQL .
12588	Compile a where null clause .
12589	Compile an insert statement .
12590	Compiles an update query .
12591	Compile a delete query .
12592	Wrap the given value into a string .
12593	Set the arguments for the function .
12594	Set promise .
12595	Set the given callback .
12596	Checks if the given callable is a callable .
12597	Creates a new Gallery instance .
12598	Connect to a user .
12599	Creates a new sql query
12600	convert to sql string
12601	Scans the given content and adds it to the queue .
12602	flatMap function
12603	Filters the collection using the given predicate .
12604	Execute the callback stack
12605	Execute a callback as reference
12606	Parse function name and arguments
12607	Get image constraints
12608	Calculates the min value of an option .
12609	Get the controller
12610	Returns the action
12611	Resolves the action .
12612	Process dispatched data
12613	Processes the response
12614	Get router exception .
12615	Get terminal size .
12616	Get the operating system .
12617	Translate one or more arguments
12618	Locates a file
12619	Formats the value as a text .
12620	Formats the value as an email .
12621	Formats the value as a decimal number .
12622	Formats the value as a short size .
12623	Creates a new model . If creation is successful the browser will be redirected to the index page .
12624	Updates an existing model . If update is successful the browser will be redirected to the index page .
12625	Check if class exists .
12626	Returns the first row of the result set
12627	Returns the first column of a given query
12628	Excludes soft deleted records .
12629	Scope only .
12630	Runs the console request .
12631	Get element from array .
12632	Get a header by name
12633	Returns an instance with the specified header .
12634	Get a new instance with the given body .
12635	Get payment icon .
12636	Returns a list of all possible types
12637	Binds an alias to a template .
12638	Render exception .
12639	Format message .
12640	Returns the value for the header .
12641	Convert an array to a header string .
12642	Combines sections into one section
12643	Walks down a node
12644	Explodes a string into an array .
12645	Send an error report
12646	error action
12647	Extracts route parameters from route parameters .
12648	Get the interaction controller .
12649	Returns HTML for buttons
12650	Returns HTML for options .
12651	Evaluate an expression
12652	Get information about a zone
12653	Adds a new record .
12654	Get a table from the database .
12655	Retrieve transaction .
12656	Load default metadata .
12657	Set parent id
12658	Get budget category
12659	get all category word
12660	Flush the cache
12661	Add a key to the collection .
12662	Removes an item from the collection .
12663	Remove cache items from the cache .
12664	Returns a boolean value .
12665	Create a new Params instance
12666	Extracts parameters from a collection
12667	Called when command is loaded .
12668	Push a new route group
12669	Get all annotations by type .
12670	Set service properties
12671	Get service from annotation
12672	Get ContainerContext from annotation
12673	Returns the cache component .
12674	Returns the query builder .
12675	Create component .
12676	Get class name token .
12677	Generates a token for the given object instance .
12678	List packages in a category
12679	Returns a list of available states .
12680	Compiles the command .
12681	Generates command arguments
12682	Executes the compiled command .
12683	Save the files .
12684	Replace field values .
12685	Add route to collection
12686	Add route .
12687	Add POST route
12688	Add PUT route
12689	Add PATCH route
12690	Add DELETE route .
12691	Add a HEAD route
12692	Get route by name .
12693	Generate URL for named route
12694	Get route for given request
12695	Tries to find a route .
12696	Is an internal URI?
12697	Dispatch the given request .
12698	Setup routing .
12699	Set dynamic route
12700	Validate route URL .
12701	Matches a static route .
12702	Match dynamic route .
12703	Get the matched static route .
12704	Get the matched dynamic route .
12705	Route request middleware .
12706	Register route response middleware .
12707	Get response from dispatch .
12708	Setup routes from cache .
12709	Setup routes from annotations .
12710	Renders modal header .
12711	Renders toggle button .
12712	Get gettext file
12713	Get a paginated result
12714	Add filters to the query builder .
12715	Filter by search .
12716	Add a search filter .
12717	Adds order by
12718	Adds the offset to the query builder .
12719	Adds the limit to the query builder
12720	Find an entity by ID
12721	Takes a query builder and adds it to a query builder .
12722	Get a sort column
12723	Add order by params
12724	Checks if value is a valid number
12725	Replaces special characters in a string
12726	Reverse entities
12727	Get XML declaration .
12728	Returns the declaration declaration .
12729	Converts an array of attributes to a string
12730	Collapse empty tags
12731	Create XML Tag
12732	Create a start element
12733	Splits a qualified name
12734	Check if a string is a valid XML name
12735	Dispatch callable
12736	Tags response event handler .
12737	Invalidate tags .
12738	Validate the entity .
12739	Interpolate context values .
12740	Returns true if two points are the same space .
12741	Compare two points
12742	Returns the intersection between two lines .
12743	Determines if two lines are perpendicular .
12744	Compare two lines
12745	Guesses the direction of two points .
12746	Get direction by coordinates
12747	Executes all commands .
12748	Prepares async asynchronously .
12749	Removes duplicated models .
12750	Executes the query and returns a single result .
12751	Checks if the given value is a valid header .
12752	Assert that header value is valid
12753	Makes a request to the API .
12754	Builds the request URI
12755	Set default language
12756	Set the media type
12757	Set result format
12758	Sets the pagination limit .
12759	Set Entity
12760	Sets the attribute .
12761	Set callback .
12762	Set the explicit option
12763	Get the photos for a given gallery .
12764	Logs message with specified level
12765	Creates a temporary directory
12766	Reads information from a TG file .
12767	Reads information from a package file
12768	Reads information from a XML file .
12769	Read a package file from a file .
12770	Get customer with offers
12771	Get all offers with offers
12772	Search by EAN
12773	Set file handler
12774	Set mail handler
12775	Get log entries
12776	Convert a log row into an array
12777	Shutdown function .
12778	Handle the request
12779	Dispatches the request
12780	Initialize bundle
12781	Add a boot error
12782	Initialize a constant path
12783	Add path .
12784	Get a path by name
12785	Returns the absolute path to the file .
12786	Get user information
12787	Set mode
12788	Load application configuration
12789	Initialize the base path
12790	Load a bundle
12791	Get the asset converter .
12792	Generates a unique hash for this reaction .
12793	Add reply to message
12794	Create a new user
12795	Resumes a session from the database .
12796	Calculates an expression
12797	Get URL to user details .
12798	Executes a query and returns the result as an array .
12799	Generate CSRF meta tags
12800	Creates a label tag .
12801	Creates a button tag .
12802	Creates a submit button .
12803	Create a submit input .
12804	Create a reset input .
12805	Create a hidden input field .
12806	Create a password input .
12807	Process boolean input .
12808	Sets the number of hours .
12809	Sets the minutes .
12810	Sets the number of seconds .
12811	Validate time elements .
12812	Writes a file .
12813	Write stream .
12814	Update a file .
12815	Update stream .
12816	Put file .
12817	Put stream .
12818	Rename file .
12819	Copies a file .
12820	Get metadata .
12821	Get the mimetype .
12822	Get file size .
12823	Get timestamp .
12824	Returns the visibility .
12825	Set visibility .
12826	Set the visibility .
12827	Set visibility .
12828	List directory contents
12829	Local adapter .
12830	Get S3 Adapter
12831	Processes the request language and sets the language based on the current language .
12832	Deserialize the request
12833	Checks access for an object
12834	Parse the block
12835	Get path .
12836	Get Authentication Object
12837	Get the data from a URL
12838	Parse json data
12839	Get all images
12840	Get entity alias
12841	Create query builder instance .
12842	Create a ResultSetMappingBuilder
12843	Finds all identifier fields .
12844	Get min value
12845	Paginate results .
12846	Checks if the given entity is an entity
12847	Gets the identifier of an entity .
12848	Validate an entity
12849	Convert an entity to an array .
12850	Filter uploaded files .
12851	Get size limit
12852	Check if a key exists
12853	Handle the console command .
12854	Terminate the application .
12855	Displays account categories
12856	Runs the application .
12857	Initialize timezone .
12858	Execute the function
12859	Convert to array
12860	Initializes the component .
12861	Get children list .
12862	Recursively detect loop .
12863	Invalidates the cache .
12864	Get last batch number
12865	Create html response
12866	Create Json Response
12867	Create Response object
12868	Main function .
12869	Get the compression adapter
12870	Set the stream adapter
12871	Set the prefix .
12872	Get value from server accessor .
12873	Example action .
12874	Install tables
12875	Displays system errors .
12876	Returns the serializer .
12877	Increment version number
12878	Get response body .
12879	Parse the response body
12880	Convert the response body into an object
12881	Executes a query and returns the results
12882	Set default values
12883	Set Response Body
12884	Convert to array
12885	Get unique validation rule
12886	Get file from S3
12887	Get the adapter
12888	Get Connection ID from AdoConnection
12889	Error action .
12890	Wraps a cURL error .
12891	Callback for reading body
12892	Callback for writeHeaders
12893	Callback function to write body
12894	Add command collection
12895	Print time .
12896	Prints console help
12897	Print html help
12898	Prints a line .
12899	Async image upload
12900	Clear HTML input
12901	Before save callback
12902	After find callback .
12903	Decodes a JSON attribute .
12904	Creates a new Parser instance .
12905	Sets the current locale
12906	Get localized question
12907	Establish a tunnel .
12908	Can the request keep alive?
12909	Disconnect from the socket .
12910	Handles redirects .
12911	Should we use the server digest authentication?
12912	Should the digest challenge be used?
12913	Writes the request body .
12914	Decodes a chunked response .
12915	Builds a select query
12916	Build a WHERE clause from an array
12917	Build join string
12918	Builds a GROUP BY clause
12919	Function to prepare property dependencies
12920	merge data mapping
12921	Cleans a string
12922	Checks that a function calls have been made .
12923	Decode YAML .
12924	Start a session .
12925	Execute a query and return the result
12926	Inserts data into a table
12927	Execute an UPDATE query
12928	Inserts a row into a table .
12929	Execute a SELECT query
12930	Executes a SELECT query and returns all rows .
12931	Returns an array of ids
12932	Returns a single row
12933	Get a single value from a select query
12934	Prepares a query
12935	Execute a prepared statement
12936	Returns the first row
12937	Get log .
12938	Parse the value
12939	Filter a string
12940	Dispatches a request .
12941	Terminate route middleware .
12942	Start element handler
12943	End handler .
12944	Run a command
12945	Process the message .
12946	Modify an UploadableBehavior .
12947	Create a new request from a JSON response
12948	Opens a session .
12949	Read a session
12950	Destroys a session
12951	Write session data
12952	Renders a widget
12953	Returns template id .
12954	This method is called before the test is executed .
12955	Check application config .
12956	Find a record by a given value .
12957	Destroy a record
12958	Get all rows from the table
12959	Save this record .
12960	Displays the dashboard page
12961	Ajax list action
12962	Verify account .
12963	Loads the navigation bar
12964	Check month
12965	Initializes the installer
12966	Execute the constructor .
12967	Get user s name .
12968	Save user .
12969	Change the user s password
12970	Add an implementation to the container
12971	Get writer from service locator
12972	Parse the version string
12973	Compares two version .
12974	Returns all children of given node .
12975	Returns the parent
12976	Returns a list of all parents .
12977	Recursively converts a Container into an array .
12978	Apply a modifier
12979	Creates a CSS resource from a CSS URL .
12980	Return the users address book .
12981	User compose view .
12982	View message view .
12983	Manage messages .
12984	Append extensions to the paths array .
12985	Destroys the current session
12986	Adds an autoloader to the autoload map
12987	Removes an autoloader
12988	Removes an aggregate object
12989	getopt 2
12990	Get an option value
12991	Parse a short option
12992	Parse command line arguments
12993	Converts a directory into a struct
12994	Convert multiple files into a struct
12995	Remove a file or directory
12996	Creates a directory
12997	Creates a temporary directory .
12998	Remove temp files
12999	Find a file
13000	Get log .
13001	Set the budgetId value
13002	Get budget .
13003	Get all transactions
13004	Prepare a configuration value
13005	Sets URL .
13006	Set request method
13007	Set authentication credentials
13008	Add a cookie to the request .
13009	Set request body
13010	Returns the request body .
13011	Add an uploaded file
13012	Attach an observer .
13013	Detach an observer .
13014	Sets the last event
13015	Set the adapter
13016	Set cookie jar
13017	Sends the HTTP request .
13018	Try to detect the mime type of a file
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new setting entity .
13022	Edits an existing Setting entity .
13023	Adds a WHERE condition to the query .
13024	Return an instance with the specified status code .
13025	Executes a remove query
13026	Check if event has listeners .
13027	Gets a field value
13028	Format a message .
13029	Create AccessDeniedHttpException .
13030	Sets a flash message .
13031	Commit save point
13032	format date string
13033	Formats a time
13034	Format a boolean value
13035	Sets the time zone
13036	Get a service by name
13037	Checks if the given class exists in the container .
13038	Creates an instance of the given class name .
13039	Add resolver .
13040	Add an object to the container
13041	Get connection pool .
13042	Sends a query to an observable sequence .
13043	Executes a query and returns an observable sequence .
13044	Create new connection .
13045	Get the least busy connection .
13046	Installs the assets .
13047	Returns the ReflectionClass for the given class name .
13048	Get class version
13049	Finds class name by version .
13050	Returns all migration methods for the given class .
13051	Returns the required options for a given class
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing Job entity .
13056	Set the file name of the client .
13057	Guesses the file extension
13058	Returns the MIME type of the file .
13059	Returns a human readable representation of the file .
13060	Get the AT time as a DateTime object
13061	Get Cime as DateTime
13062	Get the mtime as a datetime
13063	Create a file from a content string
13064	Find all applications
13065	Find application by id .
13066	Create an application .
13067	Deletes an application .
13068	Updates an existing application
13069	Returns the DateTimeInterval after the given date .
13070	Gets the DateTimeInterval after the given date .
13071	Builds DateTimeInterval from time interval .
13072	Returns the day before the given day .
13073	Gets the day after the given day .
13074	Returns information about a role
13075	Commits the current transaction .
13076	Rollback all active transactions .
13077	Sets the transaction isolation level .
13078	Get connection .
13079	Set backend
13080	Log a debug message .
13081	Log an info message .
13082	Logs a notice message .
13083	Creates a warning message .
13084	Creates an error message .
13085	Creates a critical message .
13086	Logs an alert message .
13087	Log an emergency message .
13088	Log message with given level .
13089	Gets a property of an object .
13090	Truncate HTML .
13091	Initializes the installer .
13092	Uninstall package files
13093	Adds a file operation to the transaction
13094	Downloads packages .
13095	Sets the list of packages to download .
13096	Is valid point
13097	Creates a new Iterating exception .
13098	Bind services to the container .
13099	Add array attributes .
13100	Change classes .
13101	Parse the CSS classes .
13102	Return a JSON Schema object
13103	Binds a binding if not already present .
13104	Register a shared binding
13105	Register a binding for binding .
13106	Check if an abstract is shared .
13107	Get the closure .
13108	Add a dependency for a call parameter .
13109	Get the contextual concrete .
13110	Add middleware to request
13111	Add middleware to the response .
13112	Terminate middleware .
13113	Handles the web service
13114	Returns the WSDL
13115	Initialize minify options
13116	Converts a date and time to a timestamp .
13117	Convert timestamp to array
13118	Converts a date to a given format
13119	Get time left difference
13120	Get all object properties
13121	Checks that the specified calls have been made .
13122	Parse parameter value .
13123	Set a scenario parameter .
13124	Trim a string
13125	Print a message .
13126	Download all files
13127	Add a mock object .
13128	Creates a new object
13129	Displays the profile page .
13130	Checks if an argument exists in the CLI environment .
13131	Returns the value of the specified arguments .
13132	Create a new response .
13133	Render view .
13134	Return JSON response .
13135	Create a JSONP response .
13136	Create a redirect response .
13137	Redirect to another route .
13138	Validate email address .
13139	Get the difference in years .
13140	Get the difference in weekdays .
13141	Get the difference in seconds .
13142	Get the difference between hours .
13143	Get commands from classes
13144	Set command properties
13145	Get command from annotation
13146	Get storage path .
13147	Finds the model based on its primary key value .
13148	Returns a parameter value
13149	Makes an HTTP request .
13150	Make a GET request .
13151	Make a POST request .
13152	Send a HEAD request .
13153	Send a PUT request .
13154	Send a PATCH request .
13155	Send a DELETE request .
13156	Desens the host
13157	Starts a checkpoint .
13158	Merge with data
13159	Reads a file .
13160	Get a package by name
13161	Initialize the static file .
13162	Clears the init code
13163	Generate the code for the initialization code .
13164	Evaluate PHP code .
13165	Initializes the template paths .
13166	Add a template path .
13167	Wrap an object
13168	Gets all schema names .
13169	Gets all table names .
13170	Refreshes table metadata .
13171	Get table metadata
13172	Get table metadata .
13173	Set table metadata
13174	Get cache key
13175	Get an option
13176	Get temp directory
13177	Initializes the component .
13178	Create role .
13179	Assigns a role to a parent
13180	Register a function prophecy .
13181	Call a mock
13182	Gets a parameter .
13183	Resolves a parameter value
13184	Convert query string to meta
13185	Parses a query .
13186	Renders tab panes .
13187	Registers the user .
13188	Set a new vector
13189	Open mcrypt cipher
13190	Initialize the mcrypt
13191	Connect to the API .
13192	Verify user credentials .
13193	Fetch user data .
13194	Create a new AuthExtension
13195	Add data tokens to the object
13196	Get the OAuth protocol from the credentials array .
13197	Check if the given credentials are an OAuth1 .
13198	Determines if the given credentials are OAuth2 .
13199	Closes the stream .
13200	Attach stream .
13201	Returns the contents of the stream .
13202	Sets the stream resource .
13203	Writes a file .
13204	Get the virtual account
13205	Get previous account
13206	Update an account virtual .
13207	Set cache duration
13208	Sets the connection .
13209	Returns a single row from the result set .
13210	Creates an INSERT statement .
13211	Executes the query .
13212	Log query .
13213	Returns the value of a single field .
13214	Internal function to execute query .
13215	Check query by pattern
13216	Execute an SQL query .
13217	Invokes action .
13218	Check if a specific layer is supported
13219	Prepare the DOM elements
13220	Distributed routing
13221	Renders error code
13222	Render debug info
13223	Renders view
13224	Initialize the bot .
13225	Add plugins .
13226	Register a short code callback .
13227	Remove a short code
13228	Parse a shortcode tag .
13229	Parse shortcode attributes
13230	Returns the download URL for a package
13231	List packages in a category
13232	Sort releases by version number
13233	Get array data
13234	get all hours
13235	Parses the page into an array .
13236	Find all accounts by user id
13237	Print application message
13238	Write usage message
13239	Get the usage path .
13240	Writes the arguments section .
13241	Outputs a section of options .
13242	Get option name .
13243	Generate a random roll from a summary .
13244	Set the columns for the query .
13245	Adds a having clause to the query .
13246	Adds a WHERE condition to the query
13247	Join a table
13248	Join a table with a left join
13249	Join table with right join
13250	Returns the select query string .
13251	Creates a ResultSet
13252	Prefixes table join condition
13253	Get a value from the collection .
13254	Set a value in the collection .
13255	Remove an item from the collection .
13256	Generate an INSERT statement .
13257	Initializes a new error stack .
13258	Returns a singleton instance of the given package .
13259	Handle an error
13260	Sets message callback
13261	Set default callback
13262	Remove the last error from the stack
13263	Removes an entry from the stack .
13264	Check if the validation has errors
13265	Returns an array of validation errors
13266	Returns whether or not the error stack has errors
13267	Returns an array of error messages .
13268	Converts an error into a string .
13269	Register a configuration array
13270	Registers an entry provider .
13271	Registers autowired classes .
13272	Get the autowired parameters .
13273	Set the target directory
13274	Set the filter mode
13275	Get all routes for given classes .
13276	Set route properties
13277	Get class routes .
13278	Returns a new route instance .
13279	Get route from annotation
13280	Publishes route annotations .
13281	Format the response as JSON
13282	Format a JSONP response
13283	Get host port .
13284	Returns scheme host port .
13285	Returns a new instance with the specified host .
13286	Returns a new instance with the specified port .
13287	Returns a new instance with the specified path .
13288	Returns a new instance with the specified query string .
13289	Returns a new instance with the specified fragment .
13290	Check if the URI is a standard port .
13291	Validate scheme .
13292	Validate port .
13293	Validates a package
13294	Validates a single dependency
13295	Normalize a single dependency
13296	Adds a suffix to a word
13297	Tokenize a string
13298	Join keys and values of an array
13299	Check if a table exists
13300	Map a class name to a table name .
13301	Get table from class name
13302	Processes the version tag .
13303	Do the discover command .
13304	Perform a login action .
13305	Perform a logout command .
13306	Convert a string to a separator
13307	Get migration files
13308	Get migration file paths
13309	Publishes a method
13310	Send request to given url
13311	Check url
13312	Transforms a domain specific directory into a directory object .
13313	Creates an AppBuilder .
13314	Creates an app builder from the persistence layer .
13315	Get application builder dependencies .
13316	Reset a git checkout .
13317	Creates a new branch .
13318	Deletes a branch .
13319	Push a branch to the project .
13320	Create a new pull request .
13321	Clones the project .
13322	Called when a command is called
13323	Runs a command
13324	Connect to the API .
13325	Add a file to the filter
13326	Returns new file name
13327	Returns the file name
13328	get service by id
13329	Generates a service .
13330	Sets a service
13331	Sets an alias .
13332	Get a specific parameter
13333	Set a parameter
13334	Get service definition
13335	Sets a service definition .
13336	Initializes the task .
13337	Fetch from user event
13338	Convert table to array
13339	Is serialized .
13340	Checks if the given calls have a prophecy .
13341	Add route .
13342	Initialize Routes .
13343	Create a controller instance
13344	Register a controller
13345	Register controller with annotations
13346	Register a controller without annotations
13347	Get the default controller and action
13348	Register an observable .
13349	Unregister an observable
13350	Auto set channel name
13351	Executes a command .
13352	Adds a flash message .
13353	Redirects to referer
13354	Configures shared cache .
13355	Initializes the bot .
13356	Finalize middleware .
13357	Get the configuration directory .
13358	Checks that the given calls match the expected arguments .
13359	Get connection class
13360	Configure stfalcon .
13361	Set user capabilities .
13362	Create a new instance from environment variables .
13363	Create a new locator from a path .
13364	Gets the enum options .
13365	Check if given constant is valid
13366	This method is used to check all the values of a function .
13367	Checks value for given type
13368	Get adapter for PDO
13369	Create controller path
13370	Create cache path
13371	Update the WSDL .
13372	Compiles the service
13373	Generates the documentation for the given controller class .
13374	Get Soap controllers
13375	Builds the styles .
13376	Builds the Bootstrap CSS .
13377	Get a parameter by key .
13378	Returns a new instance of the current URL .
13379	Add a route .
13380	Returns a route for the given method and method .
13381	Check if static route exists
13382	Adds dynamic route .
13383	Check if dynamic route exists .
13384	Get named route .
13385	Create sub - trees .
13386	Locate a file
13387	Converts this number to another .
13388	Check if number is equal to another .
13389	Returns the decimal value of the number .
13390	Add another number
13391	Subtracts a number from this number
13392	Multiplicator by the given multiplicator
13393	Divide this number by the given multiplicator
13394	Returns the adapter for the given mysql connection .
13395	Get aliases list .
13396	Find aliases by string
13397	Replaces migration files .
13398	Reads a line from the socket .
13399	Enables secure connection
13400	Checks if the request has timed out .
13401	Add route .
13402	Sets items .
13403	Builds HTML code for a site .
13404	Prepare the name attribute .
13405	Check data attribute .
13406	Add a resource to the queue .
13407	Creates a Day object from the given array .
13408	Creates a Day from an array .
13409	Returns true if the interval is all day of the given interval .
13410	Create request from array
13411	Set server info
13412	Set HTTP headers
13413	Set POST fields
13414	Set query fields
13415	Get header .
13416	Convert to array
13417	Add command .
13418	Adds a parsed command .
13419	Get command by name
13420	Removes a command .
13421	Find command by command path .
13422	Returns all available providers .
13423	Setup console .
13424	Load from cache .
13425	Returns an array of cached commands .
13426	Sets the separator
13427	Listen to an event .
13428	Listen for multiple events .
13429	Check if an event has a listener .
13430	Removes an event listener .
13431	Check if event has listeners
13432	Add an event .
13433	Remove an event .
13434	Triggers an event .
13435	Setup events .
13436	Setup events from cache .
13437	Initializes the template .
13438	Check if template exists
13439	Fetch template from file
13440	Loads configuration from file .
13441	Saves the file .
13442	Initialize reader .
13443	Initialize writer .
13444	Get default options .
13445	Encrypt given data
13446	Decrypt the given data .
13447	Generate session key
13448	Throws an exception to stdout .
13449	Render the given exception .
13450	Returns the view file for the given exception .
13451	Get response .
13452	Get exception data
13453	Get stdio logger
13454	Reads session data from cache .
13455	Writes session data to the cache .
13456	Destroys a session .
13457	Updates the timestamp of the given id .
13458	Extract data from session record .
13459	Extract timestamp from record .
13460	Retrieves session data from the cache .
13461	Get message with variables
13462	Generate SQL statement .
13463	Adds the autoincrement modifier
13464	Compiles a key .
13465	Adds foreign constraint .
13466	Gets column symbol .
13467	Runs the activation process .
13468	Creates a new iterator exception .
13469	Renders toggle button .
13470	Get response template
13471	Returns the module name
13472	Loads class reflection .
13473	Loads the reflection for the given object .
13474	Loads a property reflection .
13475	Get method name .
13476	Get class properties .
13477	Set property value
13478	Set multiple properties in an object .
13479	Loads class annotations .
13480	Clears reflection .
13481	Check if a class is instantiable .
13482	Get method reflection .
13483	Get class reflection .
13484	Check method arguments
13485	Get reflection from cache .
13486	Sets a reflection to the cache .
13487	Get cache key
13488	Returns the class name of an object .
13489	Parse the summary of the method .
13490	Get class doc
13491	Get method doc
13492	Init by config
13493	Returns the namespace for the given class name .
13494	Unindent a string
13495	Remove indentation
13496	Extracts array from source object
13497	Get the sizes of a photo
13498	Extract images from source .
13499	Returns the position of the placeholder start position .
13500	Build route path
13501	Search in route path
13502	Replace placeholders with values .
13503	Initializes the component .
13504	Load messages .
13505	Find categories by pattern .
13506	Magic isset .
13507	Send an exception to the browser .
13508	Get the content of the exception .
13509	Format a file path .
13510	Format arguments .
13511	Escape HTML .
13512	Set validation rules .
13513	Transforms a string into an array of Input objects
13514	Handle connection disconnect .
13515	Handle a message received from the queue .
13516	Calls the phone home .
13517	Caper callback .
13518	Get the command handler
13519	Default config action
13520	Loads bundles .
13521	Loads the messages .
13522	Set HTTP Headers
13523	Set environment variables
13524	Make a POST request
13525	json RPC method
13526	Connect to database
13527	Escape a string
13528	Initialize the transformer .
13529	Check if the form has a slug field .
13530	Get special fields
13531	Get all fields by type .
13532	Get date from time string
13533	Returns the accepted language .
13534	Get accepted charset .
13535	Returns the best accepted mime type .
13536	Match the accept header .
13537	Sort accept header
13538	Make a HEAD request
13539	Convert charset
13540	Get entity manager
13541	Get object structure
13542	get auto object
13543	get table structure
13544	Returns the current model
13545	Build Object Structure
13546	Prepare error string
13547	Check budget .
13548	Check if a budget exists .
13549	Find budget by budget ID .
13550	Set field idParent
13551	Set value for field main
13552	Get account user
13553	Get the bank
13554	Parse CSV file
13555	Get type icon
13556	Builds a query
13557	Escape a single value
13558	Create a redirect response .
13559	Set redirect url .
13560	Redirect to referer
13561	Throws a new HttpRedirectException .
13562	Filters a list of commands .
13563	Sort commands by name .
13564	Output a command section .
13565	Initializes the session
13566	Start timer .
13567	Get current time .
13568	Display time .
13569	Initialize provider by id
13570	Initializes the static application .
13571	Initializes the application .
13572	Locates the configs directory .
13573	Locates a class loader .
13574	Create object from configuration
13575	Get config reader
13576	Initialize the container
13577	Initialize static application
13578	Check if the given request matches the stored token .
13579	Get CSRF token from request .
13580	Initialize bot .
13581	Get the weather for the given location .
13582	Get the precipitation for a location
13583	Returns the latitude and longitude for the given location .
13584	Add error message
13585	Gets the English intensity .
13586	Get class annotations
13587	Get the annotations for a class .
13588	Returns the annotations for the given class .
13589	Get property annotations
13590	Get all annotations for a property .
13591	Get all annotations for the given class .
13592	Get the annotations for a method and method .
13593	Get method annotations
13594	Get annotations for all methods
13595	Get function annotations
13596	Filter annotations by type .
13597	Set annotation values
13598	Get class reflection .
13599	Get property reflection .
13600	Get method reflection .
13601	Get function reflection .
13602	Get the dependencies for the given parameters .
13603	Returns the length of the polygon .
13604	Returns the center of the polygon .
13605	Renders the form .
13606	Renders a field .
13607	Check if a value exists .
13608	Get display directory name
13609	Scan directory
13610	Adds a HTTP header to the list
13611	Returns a list of all headers .
13612	Creates a new DB .
13613	Returns a list of all database tables
13614	Updates the database from the given structure
13615	Function to update relational tables
13616	Update many table
13617	Generates the SQL for creating a table .
13618	Generates the SQL for a column .
13619	Generate index SQL
13620	Generate foreign key constraint SQL
13621	Get key values by key type .
13622	Get key values by key type .
13623	Get annotations for a class
13624	Get an annotation from a class .
13625	Get annotations for a property .
13626	Returns the annotation of a property .
13627	Returns the annotations for the specified method .
13628	Get an annotation from a method .
13629	Returns an indexed reader .
13630	Get method reflection
13631	Get a value from the cache .
13632	Sets a value to the cache .
13633	Splits the key into an array of paths
13634	Process key .
13635	Check the event class name .
13636	Build the last event .
13637	Get the average value of an array .
13638	Order by .
13639	Returns reflection parameters .
13640	Gets the value of an object .
13641	Sets the value of an object .
13642	Filters an array of objects .
13643	Set From .
13644	Adds an address to the mailer .
13645	Adds a Reply - To address
13646	Adds a CC address .
13647	Add carbon copy
13648	Adds an attachment .
13649	Runs the application .
13650	Set referer
13651	Get the referer
13652	Build url from params
13653	Download the package
13654	Extract the package .
13655	Reset default locale translations .
13656	UTF - 8 aware alternative to strpos
13657	Create the sidebar menu .
13658	Add example menu
13659	Register migration services .
13660	Publish pages .
13661	Executes an UPDATE query
13662	Load messages for a specific context
13663	Returns a sorted list of available categories .
13664	Extracts the file name from the response .
13665	Validate uploaded files .
13666	Initializes the result object .
13667	Get the pattern and version .
13668	Sets the result attributes .
13669	Detect data by family key .
13670	Determine if the current request is on a shell .
13671	Get the config
13672	Returns the latitude in degrees minutes .
13673	Returns the longitude as a longitude
13674	Calculate the range of the Latitude within a radius .
13675	Calculates the range of the geocodes within the radius .
13676	Retrieve the distance from the given location .
13677	Check if the given data matches the given data .
13678	Create tables from config .
13679	Bundle multiple schemas .
13680	Get a point .
13681	Publish command .
13682	Returns the matching URL fragment for the given request .
13683	Generates a response for a given request .
13684	Retrieve data from cache .
13685	Check if a string ends with another
13686	Counts the number of words in a string .
13687	Create the user acting as a user .
13688	Initializes the session
13689	Opens the session .
13690	Opens the session .
13691	Register the session handler
13692	Close the session .
13693	Destroy the session .
13694	Regenerates the session ID
13695	Read a session
13696	Write session data
13697	Destroys a session
13698	Set a value in the session .
13699	Remove a key
13700	Removes all session data
13701	Get flash value .
13702	Get all flash messages
13703	Sets a flash message .
13704	Add a flash message .
13705	Removes a flash message from the bag .
13706	Remove all flash messages
13707	Freezes the session
13708	Unfreeze the session
13709	Create a new session cookie
13710	Validate that an attribute is after a given date .
13711	Validate after date with given format .
13712	Validates that an attribute is a valid date format .
13713	Check prophecy .
13714	Assigns a value to an array .
13715	Get the plugin config
13716	Executes a rule .
13717	Process Multiple Dependencies
13718	Parses raw data
13719	Create a new view instance .
13720	Sets the view variables .
13721	Sets a view variable .
13722	Escape a string .
13723	Get template directory
13724	Sets the layout .
13725	Set template .
13726	Render partial .
13727	Stop block .
13728	Renders the view .
13729	Get full path to template file
13730	Renders template .
13731	Renders a layout .
13732	Sets a route .
13733	Get separator line
13734	Write header message .
13735	Get all warnings
13736	Create a notification object
13737	Set key .
13738	Should the file be renamed?
13739	Returns the file extension
13740	Try to guess the filename .
13741	Set rename .
13742	Downloads a file by key .
13743	Uploads a tinymce .
13744	Redirects the exception .
13745	Get cURL resource
13746	Execute the curl request .
13747	Set cookie file
13748	Choose parameters from item
13749	Updates existing Items models .
13750	Init options .
13751	Writes the configuration to a file
13752	Get exception from context
13753	Convert an exception to an array .
13754	Render file .
13755	Check if the given file is a core file
13756	Get exception name
13757	Function to generate CSS links
13758	Generate minify URLs
13759	Set value for field value
13760	Set value for field value
13761	Set value for field value
13762	Set field value
13763	Set month bitmask
13764	Get all budget categories
13765	Get Budget Month
13766	Execute an SQL statement .
13767	Return PDOException .
13768	Registers an autoloader .
13769	Upgrades the collection .
13770	Removes all migrations .
13771	Inserts rows into a table .
13772	Inserts multiple rows into a table .
13773	Updates rows in a table .
13774	Deletes rows from a table .
13775	Renames a table .
13776	Drops a table .
13777	Truncates a table .
13778	Drops a column from a table .
13779	Renames a column in a table .
13780	Alters a column .
13781	Creates a new primary key on a table .
13782	Drops a primary key .
13783	Creates a new foreign key .
13784	Drops a foreign key from a table .
13785	Creates a new index on a table .
13786	Drops an index on a table .
13787	Adds a comment on a column .
13788	Adds a comment on a table .
13789	Removes a comment from a column .
13790	Removes a comment from a table .
13791	Executes a command promise .
13792	Logs message .
13793	Validate regex .
13794	Match string with given text .
13795	Splits the string using the regular expression .
13796	Replace text with another text
13797	Config action .
13798	Gets the URL of the Seurimage class .
13799	Get an object by id .
13800	Get a model or create a new one .
13801	Returns a list of all rows in the database .
13802	Save a model
13803	Deletes a record from the database .
13804	Get items by ids
13805	Get where ids with keys
13806	Sets a raw cookie
13807	Connect to SOCKS3 server
13808	Saves the record to the database .
13809	Set record s data
13810	Convert object to array
13811	Get field value
13812	Set field value
13813	Get a predicate for the record primary key value
13814	Parse path .
13815	Validate path .
13816	Splits segments by delimiter
13817	Parse path .
13818	Get parameter replacement .
13819	Cache helper .
13820	Flushes the cache .
13821	Process response data
13822	Invokes an action .
13823	Get the content type of the file .
13824	Regenerates a session .
13825	Creates a new session id .
13826	Creates the garbage collector .
13827	Set the content .
13828	Sets buttons .
13829	Add button .
13830	Validate modal type .
13831	Validate modal size .
13832	Register console commands
13833	Initializes a Tar File .
13834	Add a file to the archive
13835	Check if a filename is malformed
13836	Parse command message .
13837	Migrate from another object
13838	Returns the unique keys of a table .
13839	Returns the primary key of a table .
13840	Returns the primary keys of a table .
13841	Returns the priority .
13842	Returns the validator .
13843	Load MIME types
13844	Load mime aliases file
13845	Removes a file or directory .
13846	Returns the permissions as a string .
13847	Converts permissions string to octal string .
13848	Inner Join
13849	convert to sql string
13850	Execute this query
13851	Create SQL statement .
13852	Loads all modules .
13853	Returns the container .
13854	Initialize the words .
13855	Sets the SELECT mode .
13856	Set table name .
13857	Sets the value of a column .
13858	Where .
13859	Adds a where condition
13860	Set order by ASC
13861	Set ORDER BY
13862	Get the current query .
13863	Set where .
13864	Set order by .
13865	Get select query
13866	Get insert query
13867	Get update query
13868	Get delete query
13869	Get SET statement .
13870	Get where query .
13871	Get ORDER BY .
13872	Walks down an expression .
13873	Displays a form to register a user .
13874	User edit form
13875	Returns the version string
13876	Create route instance
13877	Handle the request .
13878	Resolves an action
13879	Get home url
13880	Set component definition
13881	Ajoute une uuisateur
13882	Get user by id
13883	Returns all active users
13884	Saves message to file .
13885	Finds a value in a list .
13886	Searches for relations .
13887	Returns the next row .
13888	Reads a single column from the result set
13889	Read an object from the database
13890	Reads all rows from the result set .
13891	Get column count
13892	Finds table constraints .
13893	Get server version
13894	Publishes the routes
13895	Parse routes data
13896	Build path expressions
13897	Registers a service alias
13898	Register a service .
13899	Bind a service context
13900	Get service from context
13901	Check if service exists .
13902	Check if service has context
13903	Retrieve a service
13904	Make service .
13905	Returns a singleton service
13906	Get service by id
13907	Add context to service id
13908	Setup the container .
13909	Setup services from cache .
13910	Setup service providers .
13911	Get cacheable services
13912	Get address lines
13913	Sets the log level
13914	Gets the unique identifier for this group .
13915	Register routes in router
13916	Resolves action .
13917	Performs before action .
13918	Emits after action .
13919	Renders partial .
13920	Renders ajax view .
13921	Get action methods
13922	Render a view in a layout .
13923	Render view .
13924	Normalizes action method name
13925	Resolve error as html
13926	Resolves an error into an array .
13927	Get error data
13928	Returns the name of the exception
13929	Validate action
13930	Get action id from action method
13931	Returns action method name
13932	Convert color array to hex
13933	Convert color array to RGBA
13934	Get dominant color of image
13935	Get stdin stream .
13936	Prompt user for input .
13937	Append a file to an array of paths .
13938	Get PgClient .
13939	Executes an SQL query .
13940	Writes the contents of the file .
13941	Create a new server request from PHP globals .
13942	Returns a header value .
13943	Strip query string from url
13944	Parse the host and port from the host header .
13945	Normalizes a nested file spec .
13946	Check if a string ends with another
13947	Returns a random string
13948	Creates the edges for the given class .
13949	Searches for annotations
13950	Create a new record in the repository .
13951	Fetch all entities
13952	Update a record .
13953	Sets the status code .
13954	Sets the response headers .
13955	Returns the date header value
13956	Sets the Date header .
13957	Add cache control
13958	Get cache control value
13959	Remove a cache control .
13960	Check if the response is cacheable .
13961	Returns the age of the response .
13962	Set the max age of the response .
13963	Returns the Expires date .
13964	Returns the maximum age of the response .
13965	Set shared max age
13966	Sets the response s TTL .
13967	Set Not Modified status
13968	Is this token invalid?
13969	Is Informational?
13970	Is successful .
13971	Is this response a redirection?
13972	Is client error?
13973	Is the response a redirect?
13974	Is the response empty?
13975	Close output buffers .
13976	Initializes the request .
13977	Validate method .
13978	Locates a command .
13979	Locate all permutations for a command .
13980	Downloads package file
13981	Removes an installed package
13982	Detects duplicate parameters
13983	Read from file
13984	Returns parameters as array
13985	Enables exceptions .
13986	Get difference between transactions and transactions .
13987	Adds month to the monthmask .
13988	Returns true if the month has the given month .
13989	Get the length of the file .
13990	Returns the boundary .
13991	Loads a user by username .
13992	Create user .
13993	Set IP Address
13994	Renders a view
13995	Publishes a stream .
13996	Resource materialize .
13997	Add parameters .
13998	Fetch message from cache
13999	Encrypt a message
14000	Decrypt a message
14001	Decrypt json string
14002	Encrypt an object
14003	Decrypt json string
14004	Get cache option
14005	Initialize the object
14006	Replace magic fields in HTML
14007	Converts a Query object into a QueryBuilder
14008	Converts rich text into plain text .
14009	Converts rich text to HTML
14010	Converts a block into an HTML block .
14011	Returns a new instance with the given cookie .
14012	Send the response .
14013	Validate the given status code .
