0	Get the admin role .
1	Get a user .
2	Handle the deletion of a bread .
3	Translate categories .
4	Get the highest order menu item .
5	Creates a name for a column type .
6	Handle adding a new menu item .
7	Updates a table
8	Updates the table .
9	Returns the difference between the renamed columns and the original table
10	Get the difference between the renamed columns and the original table
11	Get the renamed columns .
12	Get the renamed indexes .
13	Returns a thumbnail for the given type and attribute .
14	Get thumbnail .
15	Check if a user has edit_users permission .
16	Returns a list of all available dimmers .
17	Prepare menu translations .
18	Saves the translations .
19	Check if the given user has read access to the given model .
20	Show the form for creating a new record .
21	Store a new bread .
22	Edit a data row .
23	Updates an existing Bread entity .
24	Destroy given Voyager model .
25	Add a new relationship .
26	Get the relationship field from the request .
27	Handle the request .
28	Store a new database connection .
29	Show the form for editing a database table .
30	Update a database table .
31	Show a table .
32	Deletes a table .
33	Returns the url to sort by .
34	Display a menu .
35	Get the translatable attributes .
36	Get all translations .
37	Returns translated attribute value .
38	Scope a query to include only translations that match the given criteria .
39	Save translations .
40	Describes a table .
41	Handle permissions .
42	Adds the storage symlink alert to the request .
43	Register the console commands .
44	Cleanup the data .
45	Deletes a breadcrumb image .
46	Order a Voyager model .
47	Generates a relation between this record and another record .
48	Resolves relations between two data types .
49	Add the soft delete option to the stub .
50	Validate a breadcrumb .
51	Get fields with validation rules .
52	Verify an ID token .
53	Retrieve the verification certificates from a location .
54	Get federated sign - on certificates .
55	Set PHPsec constants .
56	Fetches the OAuth2 access token with the given code
57	Fetch an OAuth2 access token with JWT assertion .
58	Fetch OAuth2 access token with refresh token .
59	Authorize a user .
60	Check if the access token is expired .
61	Verify an access token .
62	Add a scope to the request .
63	Executes a request .
64	Set auth config .
65	Create OAuth2 service .
66	Returns the number of allowed retries for the given error code .
67	Returns the next chunk of data .
68	Parse a HTTP response .
69	Get the data type .
70	Combine a list of variables .
71	Converts a string to a URL encoded string .
72	Executes a request .
73	Decode a HTTP response .
74	Maps the data types of the given array .
75	Convert the model to an stdClass
76	Converts a value to a SimpleObject .
77	Get the name of a mapping .
78	Check if an array is an associative array
79	Builds a new AuthHandler instance .
80	Finds the user defined config .
81	Defines the core constants .
82	Sets the state of emulation .
83	Handle a dead exception or an error .
84	Returns a list of all available queries .
85	Register globals .
86	Returns a list of all available options .
87	Adds a new option .
88	Deletes an option
89	Adds a placeholder .
90	Sets the default namespace .
91	Sets the default controller .
92	Sets the default route method .
93	Discover routes .
94	Set the default constraint .
95	Get all the routes for a given HTTP verb .
96	Returns the routes options .
97	Add multiple routes at once .
98	Add a redirect .
99	Check if a route is a redirect .
100	Returns the redirect code for the given from route .
101	Match one or more verbs .
102	Adds a route option to the route collection .
103	Set the route collection environment .
104	Reverses a route .
105	Determine the current subdomain .
106	Resets the routes .
107	Error handler .
108	Shutdown handler .
109	Determine the view for the given exception .
110	Render the exception .
111	Collect variables from exception .
112	Determines the exception codes .
113	Returns the memory description for a given number of bytes .
114	Highlights a file .
115	Returns true if the given value is an alpha - space .
116	Checks if a string matches a regular expression .
117	Check if a string is a valid email .
118	Check if email addresses are valid .
119	Check if a string is a valid URL .
120	Check if a string is a valid date
121	Creates a new instance for the HTTP . moveFailed error .
122	Check if a CCC number is valid .
123	Checks if the given number is a valid Luhn number .
124	Move a file from one location to another .
125	Moves the escaper class to a new directory .
126	Moves the kint . php file to the new location .
127	Starts the session .
128	Configure the session ID length .
129	Initializes the session variables
130	Set a value in the session
131	Get session data .
132	Push a value to the end of the array .
133	Removes a session variable .
134	Set flash data .
135	Get session flash data
136	Mark a key as flashdata
137	Get flash keys .
138	Set a value as a tempdata value .
139	Get session tempdata .
140	Mark a key as temporary data .
141	Unmarks a session variable
142	Returns an array of temporary session keys .
143	Sets the session cookie
144	Checks if a token is valid .
145	Guesses the mime type from the file extension .
146	Guesses the extension from a type .
147	Redirect to another URI .
148	Redirect to a route .
149	Redirect to the previous page .
150	Set flash data .
151	Runs the filter .
152	Initializes the container .
153	Enables a filter .
154	Returns a list of arguments .
155	Format an object .
156	Send logs .
157	Detect the locale .
158	Set the locale .
159	Check if the connection is secure
160	Returns a JSON representation of the response .
161	Executes a global get query .
162	Returns a POST request .
163	Get a post value .
164	Get a post value from a GET array .
165	Returns a cookie value .
166	Get all files .
167	Returns a file by ID .
168	Detects a URI based on protocol and baseURL .
169	Detects the path of the current request .
170	Negotiate a string type .
171	Parse the request URI
172	Builds the DSN .
173	Returns a formatter for the given mime type .
174	Check if the request is a bot .
175	Attaches the honeypot to the response .
176	Resizes the image .
177	Crops the image .
178	Get ImageMagick version .
179	Get the path to the resource .
180	Adds a foreign key .
181	Drop a foreign key from a table .
182	Checks if an attribute is an unsigned field .
183	Set the default value for a given attribute .
184	Processes the primary keys .
185	Processes the foreign keys .
186	Set the locale .
187	Get a single line .
188	Formats a message .
189	Require a file .
190	Add a base URI .
191	Add an image src option
192	Add a media src option
193	Add a manifest src option .
194	Add an object src option
195	Add a plugin type .
196	Add a sandbox option .
197	Add a script src option
198	Add a style src option
199	Adds an option to a target .
200	Generate CSP style nonces .
201	Build the headers for the response .
202	Returns the title of the message .
203	Collect logs .
204	Prepare params .
205	Determines the cell class based on the library .
206	Returns the result of the query .
207	Get a custom result object .
208	Returns the result array .
209	Returns the result object .
210	Returns a single row .
211	Returns the value of a custom result object .
212	Returns an array representation of the current row .
213	Returns a row object from the result set .
214	Sets a row .
215	Returns the first row of the result set
216	Returns the last row .
217	Returns the next row .
218	Returns an unbuffered row .
219	Matches an acceptable value against a supported type .
220	Checks if the given parameters match the supported ones .
221	Run the list command .
222	Shows the header .
223	Displays the links for a group .
224	Makes links for a page .
225	Store a page in a group .
226	Sets the URI path .
227	Get page count .
228	Returns the current page .
229	Returns true if the current page is in the given group .
230	Get the last page for a group .
231	Get the current page URI .
232	Returns the next page URI .
233	Returns the previous page URI .
234	Returns the number of items per page .
235	Get the pagination details for a group .
236	Ensure a group exists .
237	Returns the difference in years .
238	Returns the difference in months .
239	Get the number of weeks in the current time .
240	Get the number of days in the current time .
241	Get the difference in hours .
242	Returns the difference in minutes .
243	Returns the number of seconds in the current time .
244	Returns a human - readable version of the current time .
245	Loads a database connection .
246	Loads a Forge instance .
247	Check if a property has changed .
248	Get a datamap property .
249	Mutate a value to a DateTime instance .
250	Cast the value as a JSON string .
251	Determine if an alias should be discovered .
252	Find all records in the table .
253	Get the first record in the table .
254	Saves data to the database .
255	Converts a class to an array .
256	Inserts a new record into the database
257	Insert a batch of rows .
258	Get the model builder .
259	Performs the actual protection of the fields .
260	Clean validation rules .
261	Get validation rules .
262	Counts the number of soft deletes .
263	Set the auth configuration .
264	Set the form parameters .
265	Parse options .
266	Returns the method name .
267	Send a request using cURL
268	Apply request headers .
269	Set response headers .
270	Sends a curl request and returns the result .
271	Returns the current version of the database .
272	Find migrations .
273	Check migrations .
274	Returns the history of a group .
275	Get migration name .
276	Returns the version number of the group .
277	Add migration history .
278	Remove migration history .
279	Ensure that the database table exists .
280	Checks a value against a rule .
281	Add a request to the validation .
282	Set a validation rule for a field .
283	Returns the rule group .
284	Sets the rule group .
285	Loads all rule sets .
286	Sets an error for a field .
287	Get the error message for a validation rule .
288	Splits the rules into an array of unique rules .
289	Resets the validation to its original state .
290	Converts an array to XML .
291	Cleans the file names .
292	Set the URI part of the request .
293	Returns the user info .
294	Returns the query string .
295	Returns the URI segment with the given number .
296	Sets a URI segment .
297	Creates a URI string .
298	Set the authority .
299	Sets the scheme of the query .
300	Set the port .
301	Set the path .
302	Refreshes the path .
303	Sets the query .
304	Decodes a string .
305	Add a query to the query .
306	Keep query params .
307	Filters a path .
308	Applies the parts .
309	Resolves a relative URI .
310	Merges two URI paths .
311	Remove dot segments from a path .
312	Append a value to the current value .
313	Prepend a value to the end of the array .
314	Returns the previous page .
315	Returns the next page .
316	Returns the first page of the URI .
317	Returns the last page .
318	Returns the current page .
319	Starts a timer .
320	Stop a timer .
321	Returns the elapsed time for a timer .
322	Returns an array of timers
323	Add a table alias .
324	Executes a SQL query .
325	Execute a simple query .
326	Set the database table to be used with the query .
327	Prepares the connection .
328	Escapes the identifiers of an item .
329	Calls a function on the database .
330	Returns a list of tables in the database .
331	Checks if a table exists .
332	Check if a field exists in a table .
333	Get the field data for a table .
334	Returns the index data for a table .
335	Returns the foreign key data for a table .
336	Get the value of an environment variable
337	Register all registrars .
338	Returns an item from the cache .
339	Write data to a file .
340	Returns the file info for a given directory .
341	Get the file info .
342	Initializes the application .
343	Executes the request .
344	Handle a request .
345	Starts the benchmark .
346	Get the response object .
347	Protected force secure access
348	Displays the cached response .
349	Cache a page .
350	Generates the cache name .
351	Display performance metrics .
352	Try to route the request .
353	Start the controller .
354	Create a controller instance .
355	Run a controller .
356	Gathers the output .
357	Stores the previous URL in the session
358	Spoof the request method .
359	Get a handler from a config
360	Creates an alias from a table .
361	Appends WHERE IN clause with NOT IN operator
362	Add a where in clause to the query .
363	Generates a LIKE statement .
364	Add a group start clause to the query .
365	Set where grouping to end .
366	Set the offset .
367	Sets an object to the database .
368	Returns the compiled select string .
369	Compiles the final query .
370	Returns the number of rows in the database .
371	Count all results .
372	Creates a SQL statement for inserting multiple rows into a table .
373	Compiles an INSERT statement .
374	Returns the compiled update statement .
375	Compiles a delete query .
376	Decrements the value of a column .
377	Compiles the select statement .
378	Compile a where having clause .
379	Compiles the group by statement .
380	Compiles the ORDER BY clause .
381	Returns the operator for the given string .
382	Renders a timeline .
383	Collects timeline data from the given collectors .
384	Collect var data from all registered collectors .
385	Rounds a number to a given number .
386	Copies an image to another location .
387	Returns the properties of the image .
388	Releases the lock .
389	Attach a honeypot to a response .
390	Prepare the template .
391	Fetches an object from the database .
392	Make an array of columns .
393	Clears all data .
394	Set the heading from a DBResult object .
395	Sets the heading from an array .
396	Sets the path .
397	Get upload error string
398	Store a file in a folder .
399	Returns true if the requested file is larger than the max size .
400	Check if the request is an image .
401	Check if a file is in a list of mime types
402	Returns true if the width and height of an image are greater than the maximum allowed dimensions .
403	Fetches the values of a global method .
404	Populate globals .
405	Run migrations .
406	Creates a new instance from a table name .
407	Runs the forge .
408	Modify a column .
409	Creates the table .
410	Copies the data to the database .
411	Format the fields .
412	Format the keys .
413	Drops all indexes .
414	Sets the CSRF cookie .
415	Sets the CSRF hash .
416	Creates a new Time instance .
417	Parses a datetime string into a Time object .
418	Creates a new Time instance .
419	Creates a new Time object for yesterday .
420	Returns a new Time object for tomorrow .
421	Creates a new instance from a date .
422	Creates a new Time instance from a Time instance .
423	Creates a new Time object .
424	Creates a Time object from a formatted date .
425	Creates a Time object from a timestamp .
426	Creates a new Time instance .
427	Converts this timezone to a DateTime object
428	Returns the age of the user .
429	Returns the daylight saving time .
430	Set the Month attribute value .
431	Set the day of the month .
432	Sets the minute attribute value .
433	Sets the second .
434	Sets a time value .
435	Sets the current timestamp .
436	Returns true if the given test time is equal to our time .
437	Returns true if the current time is the same as the test time .
438	Converts a time object to a UTC object .
439	Converts a string to a javascript string .
440	Converts a string to a CSS string .
441	Convert a string to UTF - 8 .
442	Convert a string to UTF - 8 .
443	Get a file by name .
444	Create a UploadedFile object from an array .
445	Get the dot notation syntax for a given value .
446	Sets the download binary .
447	Sets the file path of the download .
448	Returns the content length of the binary .
449	Sets the content type by mime type .
450	Get download file name .
451	Returns the content disposition of the attachment .
452	Builds the headers .
453	Sends the download body .
454	Send body by file path
455	Remap params .
456	Run a command .
457	Creates a list of commands .
458	Connect to the database .
459	Creates a seeder instance .
460	Is all namespace .
461	Add a new test .
462	Run all the tests .
463	Returns the report .
464	Sets the query string .
465	Returns the query string .
466	Returns the start time in seconds .
467	Returns the duration in bytes .
468	Set error code and string .
469	Swaps the prefix of the original and final query string .
470	Compiles the binds .
471	Load all the helpers .
472	Register the autoloader .
473	Adds a namespace .
474	Returns the namespace for the given prefix .
475	Require a file .
476	Sanitizes a filename .
477	Discovers the composer namespaces .
478	Converts a date to a time .
479	Generates an excerpt from a string .
480	Sanitize a value .
481	Resolve nested variables .
482	Sets the database to use .
483	Executes a query on the connection .
484	Prepend the WHERE clause to the SQL .
485	Returns an array of error messages .
486	Executes a SQL query .
487	Returns an array of field names for a table .
488	Returns a Cache instance .
489	Creates a CLIRequest instance .
490	Creates a cURL request instance .
491	Create a new instance of  Config  Honeypot
492	Returns a language instance .
493	Returns a logger instance .
494	Returns a Negotiate instance .
495	Get a parser instance .
496	Create an IncomingRequest instance .
497	Returns a Response instance .
498	Creates a redirect response .
499	Returns a Router instance .
500	Create a security instance .
501	Creates a new URI instance .
502	Returns a Validation object .
503	Describe a list of commands .
504	Pads a title .
505	Returns a CSV string from a ResultInterface .
506	Get XML from a ResultInterface
507	Call a command .
508	Calls the specified seeder .
509	Check if value is in a list .
510	Checks if a string is less than or equal to another string .
511	Checks if a string contains all required fields .
512	Returns true if all required fields are not present .
513	Validate a request .
514	Sets the path to the directory .
515	Set the request parameters .
516	Sets the default controller .
517	Returns the size of the file .
518	Moves the file to a new location .
519	Returns the path to a file or directory .
520	Collects the results of a query .
521	Formats the timeline data .
522	Locates a file in a directory .
523	Returns the class name of a file .
524	Searches for a file with the given extension .
525	Ensure that the path contains the given extension .
526	Find a qualified class name from a path .
527	Load a legacy file .
528	Renders a view string .
529	Extracts an excerpt from a string .
530	Sets the data to render .
531	Set the value of a variable .
532	Renders a section .
533	Renders a view .
534	Logs the performance data .
535	Returns an instance with the specified file path .
536	Ensure the resource of the image .
537	Resizes the image to the specified width and height
538	Rotate the image .
539	Flips an image
540	Adds text to the message .
541	Reorients the object according to its orientation .
542	Get the exif data for the image .
543	Crops the image to fit the given dimensions .
544	Runs CodeIgniter .
545	Renders a template string .
546	Parse a pair of variables .
547	Extracts the noparse template from the given template .
548	Inserts a noparse template .
549	Parse conditionals .
550	Sets the left and right delimiters .
551	Replaces a single template with the given pattern .
552	Checks if a key should be added to a data context .
553	Add a plugin .
554	Creates a new image resource .
555	Returns a header by name .
556	Check if a header with the given name exists .
557	Sets a header .
558	Removes a header .
559	Set the HTTP protocol version .
560	Returns the header name .
561	Configures the session ID regex .
562	Returns the reason for the request .
563	Sets a pager link .
564	Sets the Content - Type header .
565	Get the body as JSON .
566	Get the body as an XML string .
567	Format the body according to the given format .
568	Sets the cache headers .
569	Sends the response .
570	Sends the HTTP response headers .
571	Sets a cookie .
572	Check if a cookie exists .
573	Get a cookie by name .
574	Deletes a cookie .
575	Send cookies to the browser .
576	Downloads a file .
577	Returns an instance of a class .
578	Creates a config class .
579	Get shared instance .
580	Get the autoloader instance .
581	Get a singleton locator instance .
582	Reset the autoloader .
583	Injects a mock .
584	Discover a module s services .
585	Returns the input as a string .
586	Prompt the user for input .
587	Validate a field against a set of rules
588	Prints text to STDOUT .
589	Writes error message to STDERR .
590	Wait for a message to be sent .
591	Adds a color to a text .
592	Wraps a string in a word .
593	Gets an option by name .
594	Converts an array to a table
595	Respond to a request .
596	Creates a fail response .
597	Respond with a created message .
598	Respond with a deleted message .
599	Perform an unauthorized request .
600	Fail a server error .
601	Check if the request is a CLI .
602	Initializes the module .
603	Returns the list of listeners for the given event name .
604	Removes an event listener .
605	Check if the current request is a referral .
606	Sets the platform .
607	Determine if the browser is enabled .
608	Sets the robot .
609	Determine if the agent is mobile .
610	Sets the type of an attribute .
611	Initialize vbot config .
612	Displays a qrcode text .
613	Initializes the qrcode style .
614	Formats the given content .
615	Heartbeat a time .
616	Check if the vbot is synchronized .
617	Logs a message .
618	Get the user uuid .
619	Show the qr code .
620	Wait for the user to login .
621	Returns the login data .
622	Saves the server configuration to the cache .
623	Called before init success .
624	After initialization success .
625	Send a status notification to the user .
626	Downloads a file using a callback
627	Get a resource .
628	Auto - download a message
629	Checks if the server is synced .
630	Perform webwx sync .
631	Generate a sync key .
632	Logs a string to the vbot
633	Logs a message .
634	Send a message to a user .
635	Fetch all contacts .
636	Store a list of users .
637	Fetches the members of a group .
638	Stores the members of a list of groups .
639	Reports an exception .
640	Throws all fatal exceptions .
641	Validate key .
642	Splits a JWT string into an array .
643	Parse the header .
644	Parse the claims .
645	Parse a signature .
646	Get a language key from the accepted languages .
647	Get the list of matches from the Accept - Language header .
648	Cache the routes for each locale .
649	Build the route cache file .
650	Register the bindings .
651	Register the commands .
652	Sets the current locale .
653	Returns the URL for the given route name and trans key name .
654	Returns the list of supported locales .
655	Returns the ordered list of supported locales .
656	Returns the current locale directory .
657	Get the current locale .
658	Returns the supported region for the current locale .
659	Checks if a locale is supported in supported locales .
660	Returns the route name from a path .
661	Finds a translated route by path and url_locale
662	Finds a translated route by url .
663	Create a URL from a URI .
664	Normalize the attributes .
665	Load cached routes .
666	Make the route path for the given locale and locale keys .
667	Encode a set of messages .
668	Encode produce partition .
669	Encode a production topic .
670	Produces a topic pair .
671	Produce a partition pair .
672	Decodes a message set .
673	Decodes a message .
674	Creates a socket connection .
675	Performs a SELECT on a stream .
676	Unpacks a set of bytes of a given type .
677	Checks the length of a string .
678	Returns true if system is little endian .
679	Get the API version for the given API key .
680	Get the API text for the given API key .
681	Add a before route .
682	Matches a route to a given pattern .
683	Mount a route .
684	Returns the HTTP request method
685	Returns the server base path .
686	Map a callback to a route .
687	Returns the route for the given request .
688	Get the current route .
689	Matches a URL against a pattern .
690	Runs a filter .
691	Get an event by name .
692	Clear all events and filters .
693	Executes a set of filters .
694	Executes a callback .
695	Call a function .
696	Invoke a method on an object
697	Initializes the object .
698	Get the request body .
699	Get the HTTP method .
700	Get proxy ip address
701	Parse a query string from a URL
702	Set or get the status code
703	Adds a header .
704	Sets the cache headers
705	Sends the message to the client .
706	Initializes the controller .
707	Handle a PHP error .
708	Handle an exception .
709	Adds a method to the dispatcher .
710	Registers a framework method .
711	Returns the value of a variable or all of them .
712	Clear a variable .
713	Starts the dispatcher .
714	Stop a response .
715	Adds a route to the router .
716	Handle a halt request
717	Handle 500 Internal Server Error
718	Redirect to another url .
719	Send a JSON response .
720	Send a jsonp request .
721	Send an ETag response .
722	Sends a last - modified HTTP response .
723	Registers a class .
724	Load a class .
725	Returns an instance by name .
726	Creates a new instance of a class .
727	Loads a class .
728	Adds a directory .
729	Renders a file and returns the result .
730	Get the path to a template file .
731	Checks if the graph is cyclic .
732	Returns the average height of the graph .
733	Collapses an array recursively .
734	Fetch a list of files and directories .
735	Traverses the tree node and returns the number of visited nodes .
736	Returns the root nodes of this node .
737	Get the list of installed composer lock packages .
738	Advances the cursor forward .
739	Checks if the current stream has an ANSI icon .
740	Processes no parameters .
741	Process a token .
742	Initializes the object .
743	Adds a fixable message to the stack .
744	Merge a custom array with a base array
745	Get the last token on a line .
746	Checks if the given token is an assignment .
747	Check if a token is name spaced .
748	Checks if the given token is only sanitized .
749	Check if a token is safe cast .
750	Get the access keys for an array of tokens .
751	Get the access key for an array .
752	Checks if a token is a comparison .
753	Checks if a token is in an array comparison .
754	Returns the use type for the given token .
755	Returns an array of variables that have been interpolated .
756	Check if a function call has parameters .
757	Returns the number of parameters a function can call .
758	Get a function call parameter .
759	find_array_open_close function .
760	Determines the namespace for the given token .
761	Returns the name of the declared namespace .
762	Check if a token is a class constant .
763	Check if a token is a class property .
764	Check if a direct scope is valid .
765	Prepares the regex .
766	Transforms a string according to a regular expression .
767	Transform a complex string .
768	Returns an array of deprecated classes .
769	Process an arbitrary tstring .
770	Processes a set of parameters .
771	Retrieves the mispelled words from a match stack .
772	Detects high pagination limit .
773	Set config data .
774	Get the tab width .
775	Process a global statement .
776	Adds an error to the phpcs file .
777	Setup the groups .
778	Checks if the given token is a target token .
779	Checks for matched tokens .
780	Process a variable variable .
781	Check if a variable is prefixed or whitelisted .
782	Validates the prefixes .
783	Record a potential prefix metric .
784	Setup the groups .
785	Validate align multiline items .
786	Check if a value is a local data stream .
787	Process a variable in a string
788	Merges the whitelisted properties with the whitelisted properties .
789	Ignores the given token .
790	Get the size of an indentation .
791	Get the indentation string for a given number of tabs
792	Adds an array alignment error .
793	Fixes an alignment error .
794	Checks if a token is false .
795	Compares two stack_ptr arrays .
796	Checks if a text token is valid .
797	Checks if the given token is a target token .
798	Checks if a token matches a given token .
799	Returns a namespace separated classname .
800	Registers the condition .
801	Execute the queue .
802	Reserve a message from the queue .
803	Closes the broker .
804	Validates the namespace attribute .
805	Push a job onto the queue .
806	Listen to a request .
807	Execute an exec .
808	Handle a message .
809	Runs the queue .
810	Reserve the pusher .
811	Moves the expired items to the new location .
812	Called before a job is pushed .
813	Delete a channel .
814	Runs a worker .
815	Handle a message .
816	Initialize the pcntl extension .
817	Check if the session can continue .
818	Reserve an entry in the index .
819	Delete a job .
820	Parse the XML into an array .
821	Parse the getElements method .
822	Parse the inner tree .
823	Reads text from the current node .
824	Parse current element .
825	Parse the attributes and return them as an array .
826	Get the deserializer for the given element name .
827	Pushes the context to the stack .
828	Removes the context from the stack .
829	Get the Writer instance .
830	Parse XML .
831	Parse an XML string and return the result .
832	Writes a value to a document .
833	Adds a value object to the map .
834	Write a value object to the cache .
835	Parses a clark - notation formatted string .
836	Deserialize XML .
837	Deserializes XML into a  Sabre  Uri object
838	Starts a new element .
839	Writes an element .
840	Writes an array of attributes .
841	Writes an attribute .
842	Get the model s relations .
843	Validate a job name .
844	Validate a command .
845	Create crontab job .
846	Create scope and retrieve it s closeer .
847	Finishes this task .
848	Returns the current span .
849	Convert a trace context to a Span object .
850	Starts the tracer .
851	Sets the name of the trace .
852	Annotate a value in the trace context .
853	Set the remote endpoint .
854	Generates a new token .
855	Get a value from storage .
856	Get the last key pair .
857	Enforce storage limit .
858	Creates a new SanitizerInterface instance .
859	Sets the attributes of the given node .
860	Get an attribute from a DOMNode .
861	Process the default entity .
862	Processes the default menu item .
863	Returns the type name for the given type FQCN .
864	Resolves form type options of a property .
865	Initializes the backend .
866	Autocomplete action .
867	List action .
868	Edits an existing EasyAdmin entity .
869	Displays an easyadmin entity .
870	Creates a new EasyAdmin entity .
871	Deletes the entity .
872	Search action .
873	Handles a batch action request .
874	Updates a property of an entity .
875	Finds all records for the given entity class .
876	Creates a list query builder .
877	Creates a search query builder for the given entity class .
878	Creates a search query builder .
879	Creates entity form builder .
880	Get the form options for an entity .
881	Creates a form to create an entity .
882	Creates a form to delete an entity .
883	Redirect to the backend homepage .
884	Handle the kernel controller event .
885	Normalizes menu config .
886	Returns the entity configuration .
887	Checks if an action is enabled for an entity .
888	Returns the configuration for an action .
889	Translates a message .
890	Create a Doctrine ORM paginator .
891	Process the backend config .
892	Initialize request attributes .
893	Finds the current item .
894	Get attributes normalizer .
895	Processes the entity properties metadata .
896	Get the default actions for the given view .
897	Handle form violations .
898	Returns a paginated list of results for an entity .
899	Processes the config files .
900	Normalizes Doctrine entity config .
901	Returns the unique entity name .
902	Normalize the view config .
903	Merges a form config with a child config .
904	Create a query builder for a list of entities .
905	Checks if a field name is a doctrine association .
906	Process field config .
907	Returns an array of excluded field names .
908	Filters a list of fields .
909	Run a command .
910	Performs a DELETE ORDER CHECK
911	Checks if a statement is a DESCRIBE statement
912	Checks if a statement has a certain offset .
913	Reads the length of a message .
914	Builds a progress bar .
915	Logs a BulkException .
916	Get the types from the configuration .
917	Returns the index configuration .
918	Get all providers .
919	Returns all registered providers for the given index .
920	Returns a provider for the given index and type .
921	Sets the sorting .
922	Builds the index mapping .
923	Builds the index template mapping .
924	Builds the mapping for a given type .
925	Fixes the properties .
926	Logs a query .
927	Transforms an object to an Elastica document .
928	Get total hits .
929	Get Elastica results .
930	Delete all indexes for a template .
931	Returns an index by name .
932	Returns a persister for the specified index and type .
933	Populates an index .
934	Refreshes the index .
935	Transforms an object into a document .
936	Transforms nested objects into documents .
937	Normalizes a value .
938	Transforms an object to a document .
939	Get the entity query builder .
940	Returns the index template by name .
941	Resets all indexes .
942	Resets an index .
943	Resets an index type .
944	Switches the alias of an index .
945	Load index finder .
946	Loads the type persistence integration .
947	Loads the Elastica model transformer .
948	Loads the object serializer persister .
949	Loads the type pager provider .
950	Loads the type listener .
951	Get Doctrine events .
952	Loads the type finder .
953	Loads the index manager .
954	Loads the index template manager .
955	Load a driver .
956	Loads the serializer .
957	Creates the default manager alias .
958	Get the dynamic template node .
959	Get the types node .
960	Get id node .
961	Get the source node .
962	Get the routing node .
963	Get the parent node .
964	Get all node .
965	Adds the indexes section .
966	Adds the index templates section .
967	Transforms Doctrine objects into Doctrine objects .
968	Checks if an object is indexable .
969	Builds a callback for the given type .
970	Builds an expression callback .
971	Returns the callback for the given type and object .
972	Get the expression variable .
973	Override the index root name .
974	Switch an index alias .
975	Builds the alias update request .
976	Cleanup a rename failure .
977	Closes an index .
978	Get aliased index .
979	Logs a query .
980	Post persist event handler .
981	Post update event handler .
982	Pre - remove event handler .
983	Persists the object if it s scheduled to be updated .
984	Schedule an object for deletion .
985	Check if an object can be indexed .
986	Get the repository for the given entity name .
987	Transforms an object into a Document .
988	Returns a repository by type name .
989	Make a Hashids instance .
990	Register the Hashids factory .
991	Verify a hash .
992	Creates a Guzzle instance .
993	Adds a cookie to the collection .
994	Adds cookie headers to the request .
995	Clear all expired cookies .
996	Returns the hash of a cookie .
997	Add a header to the response .
998	Parse HTTP headers .
999	Handle a request and return the next response .
1000	Set the middleware s options .
1001	Get the client nonce .
1002	Returns the A1 hash .
1003	Get HA2 hash .
1004	Returns the HTTP header .
1005	Get the response .
1006	Get the QOP .
1007	Returns the hash of the given value .
1008	Parse the authentication info header .
1009	Parse name value pairs .
1010	Parse the http authentication header .
1011	Sets the middleware algorithm .
1012	Sets the GET POST PUT or DELETE HTTP methods .
1013	Remove quotes from a string .
1014	Adds a new object to the queue .
1015	Converts an array of HTTP headers to a buzz string .
1016	Converts an array of PSR - 7 headers to a PSR - 7 array .
1017	Sends an asynchronous request .
1018	Sends a request to the API and returns the response .
1019	Executes the multi - cURL request
1020	Initialize a cURL multi handle .
1021	Cleans up the push queue .
1022	Checks if the current request matches the given request .
1023	Returns true if the item is expired .
1024	Checks if the cookie matches the given domain .
1025	Returns true if the path matches the given path false otherwise .
1026	Parse a set cookie header .
1027	Release a cURL handle .
1028	Prepares a cURL request .
1029	Sets the cURL options from the request .
1030	Sends a request and returns the response .
1031	Record a response .
1032	Creates an image .
1033	Add a cover to the form .
1034	Add a toc field to the command line .
1035	Creates the pdf file .
1036	Ensure that the input is a URL or a file .
1037	Create a GuzzleHttp  Client
1038	Create the middleware stack .
1039	Creates a request .
1040	Sends an asynchronous HTTP request .
1041	Generates the request options .
1042	Send a context asynchronously .
1043	Throws a ServiceException if an error occurs .
1044	Add a post parameter .
1045	Add metadata headers .
1046	Adds the location header to the response .
1047	Validate entity properties .
1048	Get a property value .
1049	Set a property value .
1050	Sets a property .
1051	Adds a new property .
1052	Checks if the table is valid .
1053	Creates a GetTableResult instance .
1054	Computes the signature of a resource .
1055	Returns the authorization header .
1056	Computes the canonicalized headers .
1057	Compute the canonicalized resource for a table .
1058	Computes a canonicalized resource .
1059	Serializes this object to XML .
1060	Get signed identifiers from XML array .
1061	Adds a signed identifier to the access policy .
1062	Removes a signed identifier .
1063	Sets the operations .
1064	Adds a batch operation .
1065	Adds an INSERT entity operation .
1066	Adds a delete entity operation .
1067	Creates a copy file result from the given headers .
1068	Create a new msg from a list of messages .
1069	Create a QueueMessage from a peek response .
1070	Creates a QueueMessage from a Create Message response .
1071	Initializes the instance .
1072	Creates a StorageServiceSettings object from a proxy URI .
1073	Get the development storage account .
1074	Returns the service endpoint .
1075	Create storage service settings .
1076	Creates a storage account from a connection string .
1077	Creates a TokenCredential from a connection string .
1078	Encode a body part as a multipart mime type .
1079	Decode a multipart mime body
1080	Creates a new ListSharesResult from the parsed response .
1081	Sets the token shares .
1082	Retry a request .
1083	Apply an AND filter to the left and right .
1084	Applies the or operator to the left and right .
1085	Apply an Equivalent Filter to the left and right .
1086	Apply a ne filter to the left and right .
1087	Apply a GE filter to the left and right .
1088	Apply a gt filter .
1089	Apply a lt filter .
1090	Apply a LE filter to the left and right .
1091	Sets the location .
1092	Unserialize a JSON string .
1093	Creates a new PeekMessagesResult from the parsed response .
1094	Creates a new GetEntityResult instance .
1095	Creates the operations contexts .
1096	Gets the context for an operation .
1097	Creates the request body from the given operations and contexts .
1098	Constructs the delete entity context .
1099	Constructs a put or merge entity context .
1100	Constructs the HttpCallContext for inserting an entity .
1101	Returns the entity path .
1102	Executes the putOrMerge command asynchronously .
1103	Adds an optional query to the query .
1104	Encode ODataUri values .
1105	Query all tables asynchronously .
1106	Creates a table asynchronously .
1107	Creates a table asynchronously .
1108	Gets a table .
1109	Get a table asynchronously .
1110	Deletes a table .
1111	Deletes a table asynchronously .
1112	Query entities asynchronously .
1113	Inserts or merges an entity into a table .
1114	Inserts or merges an entity asynchronously .
1115	Inserts or replaces an entity in a table .
1116	Inserts or replaces an entity asynchronously .
1117	Updates an entity asynchronously .
1118	Updates an entity asynchronously .
1119	Merge an entity into a table .
1120	Merges two entities asynchronously .
1121	Deletes an entity .
1122	Deletes an entity asynchronously .
1123	Get an entity asynchronously .
1124	Gets an entity asynchronously .
1125	Executes a batch of operations .
1126	Send a batch request asynchronously .
1127	Creates a new ListDirectoriesAndFilesResult from parsed response .
1128	Sets the directories .
1129	Sets a list of files .
1130	Creates a new Directory instance .
1131	Creates a new UpdateEntityResult instance .
1132	Sets the query parameters .
1133	Sets the status codes .
1134	Removes a header .
1135	Adds a new history entry .
1136	Appends a new entry to the path .
1137	Creates a new QueryTablesResult .
1138	Creates a new ListMessagesResult from the parsed response .
1139	Sets the queue messages .
1140	Initializes the connection source .
1141	Checks if a hostname is valid
1142	Checks if a URI is valid
1143	Checks if a method exists .
1144	Checks if value is a date string .
1145	Check if key exists in array .
1146	Returns the range string .
1147	Lists all queues asynchronously .
1148	Clear messages from a queue .
1149	Creates a new message asynchronously .
1150	Creates a new message asynchronously .
1151	Creates a new queue .
1152	Creates a queue asynchronously .
1153	Delete a message from a queue
1154	Deletes a message asynchronously .
1155	Deletes a queue .
1156	Delete a queue asynchronously
1157	Gets the metadata of a queue .
1158	Get Queue Metadata asynchronously
1159	List messages in a queue .
1160	List messages in a queue asynchronously .
1161	Peek messages from a queue .
1162	Peek messages asynchronously .
1163	Generates a shared access signature token for the given account .
1164	Validates and sanitizes a signed service .
1165	Validate and sanitize a signed resource type .
1166	Validates and sanitizes signed permissions .
1167	Validate and sanitize a signed protocol
1168	Validate and sanitize string with array .
1169	Generate canonical resource .
1170	Parses the XML response and returns an error message .
1171	Get the request ID from the response .
1172	Returns the response s date
1173	Set the middlewares .
1174	Validate if the given middleware is a callable or an IMiddleware .
1175	Parse the connection string .
1176	Creates a RuntimeException for the given position and error string .
1177	Extracts the key from the connection string .
1178	Extracts a string from the current value .
1179	Skips the operator .
1180	Creates a new ShareAclResult .
1181	Add headers to the request .
1182	Requires a setting with a function .
1183	Validates a setting value .
1184	Checks if the given settings match the given specification .
1185	Sets the next row key .
1186	Sets the next partition key .
1187	Processes a type .
1188	Validate an Edm value .
1189	Serializes a value for the given type .
1190	Serializes a query value .
1191	Unserializes a query value .
1192	Creates a new ServiceProperties object from the parsed response .
1193	Returns the corses as an array
1194	Initializes the environment source
1195	Parse the table entries from the request body .
1196	Gets the entity properties .
1197	Parse a JSON string into an array of Entities
1198	Sets the start date .
1199	Validate a permission .
1200	Creates a path for a file .
1201	Get the share properties asynchronously .
1202	Set the share properties asynchronously .
1203	List shares asynchronously
1204	Create a new share .
1205	Create a share asynchronously
1206	Deletes a share .
1207	Get a share s properties .
1208	Set the share properties .
1209	Set the share properties asynchronously
1210	Get the metadata for a shared file .
1211	Set the metadata for a shared file .
1212	Set the share metadata asynchronously .
1213	Sets a Share ACL .
1214	Set a Share ACL async
1215	List directories and files .
1216	List directories and files asynchronously
1217	Creates a new directory .
1218	Creates a directory asynchronously .
1219	Deletes a directory .
1220	Gets the properties of a directory .
1221	Gets the directory properties asynchronously .
1222	Gets the metadata for a directory .
1223	Sets the metadata for a directory .
1224	Create a new file asynchronously .
1225	Creates a new file asynchronously .
1226	Deletes a file on the server .
1227	Deletes a file asynchronously .
1228	Get a file from the filesystem .
1229	Gets a file asynchronously .
1230	Gets the properties of a file .
1231	Get the file properties asynchronously .
1232	Set a file s properties .
1233	Sets the file properties asynchronously .
1234	Get the metadata for a file .
1235	Set file metadata asynchronously .
1236	Sets the file metadata asynchronously .
1237	Puts a file in a range .
1238	Put a file range asynchronously .
1239	Creates a file from content .
1240	Creates a file from the given content asynchronously .
1241	Clear a file range .
1242	Clear a file range asynchronously
1243	Lists a file range .
1244	Lists a file range .
1245	Abort a copy .
1246	Abort a copy asynchronously
1247	Sets the batch operation type .
1248	Adds a parameter to the batch operation .
1249	Construct a response object from a response body .
1250	Compare two resources using ContentId .
1251	Creates a batch response .
1252	Returns the instance attributes .
1253	Serializes an array to XML .
1254	Creates an instance from a parsed response .
1255	Get service properties asynchronously
1256	Set the service properties .
1257	Set service properties asynchronously .
1258	Get service stats asynchronously
1259	Creates a new ListQueuesResult from parsed response .
1260	Set the queues .
1261	Try to get secondary endpoint from primary endpoint
1262	Serializes an array to XML .
1263	Convert an object to a boolean value .
1264	Converts RFC 1123 to DateTime .
1265	Returns an ISO - 8601 formatted date .
1266	Converts a value to a DateTime object .
1267	Converts a 256 - bit integer to decimal .
1268	Checks if a string contains all zeros .
1269	Appends a delimiter to a string .
1270	Check if the request was sent to a secondary URI .
1271	Gets the location from the given headers .
1272	Calculates the MD5 of a content .
1273	Validate a resource type .
1274	Creates a new UpdateMessageResult instance .
1275	Create a new retry resource .
1276	Creates a retry decision .
1277	Determine if a request should be retried .
1278	Adds an optional query parameter .
1279	Adds an optional header .
1280	Creates a new GetFileResult instance .
1281	Serializes an array of HTTP headers .
1282	Serializes a RequestException .
1283	Creates a new QueueMessageResult from the parsed response .
1284	Creates a new InsertEntityResult .
1285	Creates a new QueryEntitiesResult object .
1286	Formats an array of headers .
1287	Creates a new QP file from parsed data .
1288	Applies the middlewares to the result .
1289	Returns the list of available includes .
1290	Call the include method on a resource .
1291	Resolves scoped includes .
1292	Set error code and message .
1293	Set or get the data .
1294	Set the error serializer .
1295	Returns the error output .
1296	Create a new resource instance .
1297	Sets the resource cursor .
1298	Set the paginator .
1299	Adds a with clause to the query .
1300	Set the list of relations to be excluded from the query .
1301	Add one or more fields to the query .
1302	Set the serializer .
1303	Transforms the resource into a NullResource .
1304	Prepare the relations .
1305	Eager load relations .
1306	Get the pagination data .
1307	Converts a cursor to an array .
1308	Merges two arrays of data .
1309	Binds a resource to a transformable .
1310	Resolve transformable item .
1311	Resolve transformable item .
1312	Resolve a transformer .
1313	Render an exception .
1314	Creates a new ErrorSerializer instance .
1315	Create a new resource instance .
1316	Parse the options .
1317	Parse fieldsets .
1318	Parse a fieldset .
1319	Resolve child includes .
1320	Register a new error message .
1321	Resolves an error code .
1322	Cleans an array of parameters .
1323	Binds a transformable to this object .
1324	Resolve from data .
1325	Resolve a transformer .
1326	Register Laravel bindings .
1327	Register Lumen bindings .
1328	Decorate the response factory .
1329	Register the serializer bindings .
1330	Register the error bindings .
1331	Register Fractal bindings .
1332	Register the transformer bindings .
1333	Register the transformation bindings .
1334	Boot the Laravel application .
1335	Sets the collection data .
1336	Format an error response .
1337	Merges the requested relations with the requested relations .
1338	Returns the default relations .
1339	Extracts all available relations .
1340	Extract child relations from a relation identifier .
1341	Wrap a child relation with a constraint .
1342	Apply Query Constraints .
1343	Resolve query constraint .
1344	Resolve a relation .
1345	Get mapped transformers .
1346	Creates a resource instance .
1347	Include a resource .
1348	Include a resource from a model .
1349	Check if a resource should be cached .
1350	Make a new resource instance .
1351	Make a resource from a resource .
1352	Instatiate a resource .
1353	Determine if the given data should be created as a collection .
1354	Resolves the resource key .
1355	Set the decorator to use .
1356	Return a JsonResponse .
1357	Normalizes the given data .
1358	Normalize a relation .
1359	Transforms data using a given transformer .
1360	Converts an exception to a callable .
1361	Converts a default exception to a valid exception .
1362	Render an exception response .
1363	Creates a new TransformBuilder instance .
1364	Configure the terminal .
1365	Adds multiple items at once .
1366	Sets the collection items .
1367	Select the first item from the list .
1368	Adds a custom control mapping .
1369	Removes a custom control mapping .
1370	Displays the control .
1371	Returns the selected menu item .
1372	Executes the current item .
1373	Redraws the terminal .
1374	Draws the menu item .
1375	Draws a menu item .
1376	Closes the menu .
1377	Sets the default selected item .
1378	Returns true if the given index can be selected .
1379	Sets the selected item index .
1380	Returns the selected menu item .
1381	Wordwrap a string to a given width .
1382	Generates the colour set code .
1383	Calculates the content width .
1384	Returns the right hand padding for the given content length .
1385	Set border width .
1386	Displays the menu .
1387	Calculates the coordinates for the menu .
1388	Write empty row .
1389	Writes a text to the terminal .
1390	Sets the text of the article .
1391	Calculates the art length .
1392	Displays the menu .
1393	Get a connection instance .
1394	Create a new connection instance .
1395	Get a connection s configuration .
1396	Compresses the request .
1397	Check if a rule is set .
1398	Adds an array of arguments to the command .
1399	Sets the arguments to parse .
1400	Sets an array of options .
1401	Adds a set of rules .
1402	Returns the options as a string .
1403	Returns the options as an array .
1404	Convert to json .
1405	Returns the options as XML .
1406	Returns the option for the given flag
1407	Returns the usage message .
1408	Sets the rules aliases .
1409	Set the help for a rule .
1410	Parse the command line arguments into an array .
1411	Parse a short option cluster .
1412	Parse a single option .
1413	Add rules mode gnu .
1414	Add rules to the mode zend .
1415	Returns the OAuth header .
1416	Returns the base string for the request .
1417	Prepares the HTTP method .
1418	Sets the oauthNonce .
1419	Append OAuth parts to the query parameters .
1420	Returns a string representation of the query
1421	Creates a new client instance .
1422	Returns the log destination .
1423	Logs the platform requests .
1424	Check if an operation is allowed for an entity .
1425	Prepare reflection .
1426	Convert to XML .
1427	Copy file to public path .
1428	Cast a property to a string zero .
1429	Reads configuration from a file .
1430	Initializes the API entity rules .
1431	Populates an XML object with only JSON entities .
1432	Initializes the OAuth settings for the given XML object .
1433	Initializes the request and response serialization and compression format .
1434	Initialize Service Base Url and Logger .
1435	Gets an entity by its key .
1436	Checks if a string is valid XML .
1437	Verify the configuration .
1438	Loads all webhooks classes and returns them as an array .
1439	Checks if a given class is a valid webhooks class .
1440	Returns an array of options for the actor .
1441	Validate a URN
1442	Adds a function to the function list .
1443	Sets a Soap class
1444	Sets the Soap object .
1445	Returns a list of all available functions .
1446	Sets the persistence mode
1447	Gets the soap server instance .
1448	Handle a Soap request
1449	Deregisters a class as a fault exception
1450	Returns a fault message .
1451	Handles PHP errors .
1452	Get OAuth 2 Access Token Object .
1453	Returns the authorization code URL .
1454	Refresh OAuth 2 access token .
1455	Migrate from OAuth 1 to OAuth 2
1456	Parse a new access token from a response .
1457	Check if empty value was returned .
1458	Generate the authorization header .
1459	Constructs the HTTP header for the refresh token request
1460	Checks if the result is valid .
1461	Get the error message from an error code .
1462	Converts an Intuit object to an array .
1463	Serializes an entity .
1464	Removes null properties .
1465	Adds a complex type .
1466	Get the WSDL for a class .
1467	Adds the bindings to the WSDL .
1468	Adds the port type to the database .
1469	Adds the types to the method .
1470	Add binding operations
1471	Adds port operations to the WSDL
1472	Check if the given type is a local type .
1473	Add services to the WSDL .
1474	Get the target namespace .
1475	Returns an array of namespaces for a given xpath .
1476	Saves classes to a directory .
1477	Load includes from a DOMDocument .
1478	Get the XSD document as a DOMDocument
1479	Save PHP classes to a directory .
1480	Convert an XML namespace to a PHP namespace .
1481	Sets the base URL .
1482	Returns the refresh token validation period in seconds .
1483	Returns the access token validation period in seconds .
1484	Get the Refresh Token .
1485	Get the OAuth 2 Access Token .
1486	Update the access token .
1487	Get the post xml from an arbitrary entity .
1488	Convert an XML string into a POPO Object
1489	Parse arbitrary result objects .
1490	Setup cURL option .
1491	Check cURL version for TLS 1.2 .
1492	Handles IdsExceptions .
1493	Verify the type of a variable .
1494	Generates the object names for the given value .
1495	Completes a property .
1496	Unmarshal an XML string .
1497	Returns the serializer for the given request .
1498	Returns a compressor for the given service context and request .
1499	Get the request logging instance .
1500	Connects a type to a strategy .
1501	Returns the default strategy object .
1502	Returns a strategy object for a given type .
1503	Adds a complex type to the strategy .
1504	Creates a new reflection instance .
1505	Populates the properties comments .
1506	Creates a new instance of the class .
1507	Process the values of a property .
1508	Create a new instance of the given type with the given values .
1509	Checks if the given value is a morhing entity .
1510	Process a property value .
1511	Gets an entity from a model .
1512	Updates the service context settings for other services .
1513	Setup the RestHandler for the given service context .
1514	Sets the location of the log file
1515	Sets the service context s minimum version .
1516	Disables the request logger .
1517	Enables the request logging .
1518	Sets the client name .
1519	Configures a service context from a set of settings .
1520	Configure the OAuth2 login helper
1521	Updates an existing OAuth2Token .
1522	Setup the serializers .
1523	Updates an entity .
1524	Adds a new entity .
1525	Deletes an entity .
1526	Uploads a file to the Ipp server .
1527	Send an email to an entity
1528	Executes a method query .
1529	Append pagination info to query .
1530	Calls the FindAll method for the given entity name .
1531	Performs a CDC operation .
1532	Executes the object serializer
1533	Initialize a POST request .
1534	Get the request parameters .
1535	Fixes the tax service payload .
1536	Returns the name of the file to export for a given entity .
1537	Checks if the given method is allowed for the given entity
1538	Creates a new batch .
1539	Converts a string to a timestamp
1540	Checks if a timestamp is valid
1541	Verify that the input has changed since the given value .
1542	Get Company Info
1543	Get QuickBooksOnline API Entity Rules
1544	Get the access token from an array .
1545	Get the refresh token from an array .
1546	Get the redirect url from the settings .
1547	Saves a file in a directory
1548	Generate the file name .
1549	Generates an error from an OAuth exception
1550	Parse an error response .
1551	Check if the error body is in standard format .
1552	Sets the response as it is .
1553	Parse the response from cURL to an Intuit response .
1554	Set fault handler
1555	Set the response headers .
1556	Sets the content type .
1557	Sets the intuit tid .
1558	Get the app menu .
1559	Reconnects to the server
1560	Sets the current URI .
1561	Sets the WSDL strategy for complex types .
1562	Add an operation to a binding .
1563	Adds documentation to a node .
1564	Adds the types to the WSDL .
1565	Add a type to the list of included types
1566	Dump the response to a file
1567	Add a schema type section
1568	Configure from passed array .
1569	Check if OAuth is valid .
1570	Returns the base URL for the request .
1571	Set the request and response formats to XML .
1572	Set the request and response formats to JSON .
1573	Disables logging .
1574	Sets the new log location
1575	Updates the OAuth2 access token .
1576	Returns the class properties .
1577	Get the result of the query .
1578	Sets the Soap_AutoDiscover URI .
1579	Returns the URI for this request .
1580	Get the request URI without parameters
1581	Sets the complex type strategy .
1582	Set a SOAP class .
1583	Add a function to the WSDL .
1584	Dumps the contents of an autodiscovered file .
1585	Updates the service context .
1586	Sends a request to the Ipp API .
1587	Make an OAuth1 API call .
1588	Returns the OAuth1 authorization header .
1589	Handles OAuth2 API calls .
1590	Returns the OAuth 2 authorization header .
1591	Logs the API response to the logger .
1592	Logs an API request to the log .
1593	Parse a string into a DOMDocument .
1594	Resets the compressor and serializer .
1595	Returns the destination URL .
1596	Appends the minor version to the request URI .
1597	Check if the HTTP method is supported .
1598	Parse a URL and return the parameters .
1599	Returns the Accept Content Type for the given value .
1600	Convert a query string to an array
1601	Verify a payload .
1602	Encrypts a payload based on a hash algorithm .
1603	Get a single intuitBatchResponse .
1604	Removes a batch item from the queue .
1605	Convert an array to a message and code .
1606	Iterates over a fault and prepares an exception .
1607	Returns an array of options .
1608	Sets the request style .
1609	Set message encoding method .
1610	Set proxy port
1611	Set HTTPS client certificate .
1612	Sets the stream context .
1613	Sets the user agent .
1614	Calls the SoapClient_doRequest function .
1615	Initializes the SoapClient object
1616	Add a soap input header .
1617	Get SoapClient functions .
1618	Get SoapClient Types
1619	Get the type name based on nesting level .
1620	Add an element from wsdl and child types .
1621	Prepares the schema for rendering .
1622	Adds binding operations .
1623	Adds an operation to a port
1624	Creates a reference element .
1625	Creates an element with a complex type .
1626	Creates a simple DOM element .
1627	Resolves a namespace .
1628	Parse doc comments
1629	Check if an array is an associative array
1630	Get the webhooks event .
1631	Verify the payload .
1632	Check if a key is in a complex list .
1633	Gets a class method .
1634	Returns an instance of IPPReferenceType based on an array
1635	Returns the IPPid for the given data .
1636	Merges two objects .
1637	Returns the headers set for the cURL .
1638	Checks if the cURL supports TLS .
1639	Converts a header array to an array of headers
1640	Adds a warning to the sniff .
1641	Resolve from input .
1642	Sets the name attribute .
1643	Scope by name .
1644	Bootstrap being tagged .
1645	Add one or more tags to the model
1646	Removes one or more tags from the model .
1647	Adds a single tag .
1648	Removes a tag .
1649	Check if a tag exists .
1650	Scope with all tags .
1651	Check if a query scope is tagged .
1652	Scope the query without all tags .
1653	Returns true if the query scope is not tagged .
1654	Renames a tag .
1655	Get the most popular tags .
1656	Get the qualified name of the related pivot table with the alias .
1657	Returns a fully qualified foreign key name with alias .
1658	Creates a new taggable alias .
1659	Builds a tag array from the given tags .
1660	Returns the tag model keys .
1661	Creates a list of tags for a given model .
1662	Make an array of tags for a given field .
1663	Get all tags .
1664	Returns all tags that are not used .
1665	Rename tags .
1666	Get the fully qualified tag table name .
1667	Get the qualified table name for the pivot table .
1668	Saves compound parameter data .
1669	Builds the url with the given parameters .
1670	Get the payload for a single parameter .
1671	Returns the payload for compound parameters .
1672	Adds an index to the given string .
1673	Get the debug response .
1674	Get the debug endpoint .
1675	Send a hit to Google Analytics .
1676	Get the HTTP client options .
1677	Returns the PrepareUrl instance .
1678	Checks if there are minimum required parameters .
1679	Sets an action to a parameter .
1680	Sets a single parameter .
1681	Adds a parameter to a method .
1682	Returns the value of a parameter .
1683	Get the index from method arguments .
1684	Returns the full class name for the given parameter class and method name
1685	Sends a POST request to the given URL .
1686	Parse the request options .
1687	Returns an array of readable items .
1688	Add a supported card
1689	Sets a year parameter .
1690	Validates a credit card
1691	Returns the last four characters masked .
1692	Returns the brand of the product .
1693	Get a track by its pattern .
1694	Get the first and last name of a user .
1695	Set the billing name .
1696	Sets the shipping name .
1697	Get the user s birthday .
1698	Sets the birthday parameter .
1699	Initializes the parameter bag .
1700	Set a trait parameter .
1701	Set the card attribute value .
1702	Returns the amount in the current currency .
1703	Sets the Money value .
1704	Sets the currency .
1705	Returns the currency numeric code .
1706	Returns the decimal places for the current currency .
1707	Formats an amount as a currency .
1708	Replaces all items in the collection .
1709	Validates the redirection method .
1710	Converts a string to camelCase .
1711	Validates that a number is a Luhn number
1712	Returns the gateway short name .
1713	Get the gateway class name for the given short name .
1714	Returns a query builder that has been fixed .
1715	Get the parent metadata for a given property .
1716	Get a pager instance based on the type .
1717	Get the parent alias for a given alias .
1718	Adds an item to the IPP .
1719	Find a resource by id .
1720	Authenticate a user .
1721	Set the parent application ID .
1722	Set a credit card information
1723	Returns credit card information .
1724	Adds a resource to a QuickBooks IPP object .
1725	Find an employee by id .
1726	Set the signature method and keyfile .
1727	Handles 500 errors .
1728	Check if a user successfully logged in using a hook
1729	Check if a path is repeatable .
1730	Check if a path exists .
1731	Reorder paths .
1732	Call a function .
1733	Calls a static method
1734	Find a customer by its name .
1735	Set the QUICKBOOKS class application ID .
1736	Returns the billing address for the specified part .
1737	Set the Ship Method Application ID attribute value .
1738	Set the payment method application ID .
1739	Generate a schema for a field
1740	Returns the child at the given path .
1741	Add a child at a given path .
1742	Returns an array of all children matching the given pattern .
1743	Removes an attribute .
1744	Converts a node into an XML string .
1745	Returns this object as an array .
1746	Helper function for _asArrayPaths
1747	Saves the XML to the DB .
1748	Save a JSON file .
1749	Casts a string to a given length .
1750	Decode UTF - 8 characters .
1751	Parse a DSN .
1752	Extracts the request ID from an XML string
1753	Parses a request ID into an action and an identifier .
1754	Check if a CIDR is valid .
1755	Create a new user .
1756	Disable a user .
1757	Generates a unique hash .
1758	Check if a user has a QuickBooks ID .
1759	Initialize a QuickBooks driver .
1760	Initialize a QuickBooks driver .
1761	List QUICKBOOKS_OBJECT objects .
1762	Returns a list of QuickBooks actions .
1763	Escapes a string .
1764	Configure the Quickbooks . php file .
1765	Adds a new customer to the queue
1766	Add a new customer request .
1767	Add a customer response to a request
1768	Catchall errors .
1769	Queue processing a user .
1770	Recursion enqueue .
1771	Recurrence dequeue .
1772	Queue left a user .
1773	Queue a report .
1774	Queue a ticket for processing .
1775	Logs an error .
1776	Returns the last error for the given ticket .
1777	Resolve auth ticket .
1778	Check if a ticket is authenticated .
1779	Logs a user out .
1780	Create a QUICKBOOKS_DRIVER_AUTHCREATE hook
1781	Initializes the driver .
1782	Initializes the driver .
1783	Logs a message .
1784	Call a hook .
1785	Connect to an OAuth service provider .
1786	Set the defaults for the qbwc config .
1787	Handle recurring events .
1788	Extracts the identifiers from the XML .
1789	Extracts the status code from the given XML .
1790	Extracts the status message from an XML string .
1791	Call a mapped function
1792	Call a hook .
1793	Handle an error .
1794	Enqueue an action .
1795	Finds an item by its name .
1796	Checks if a string starts with another string .
1797	Executes a SQL query .
1798	Extracts the content of a tag .
1799	Extracts attributes from a tag .
1800	Encodes a string for qbxml .
1801	Decodes a string .
1802	Check if a user is logged in .
1803	Load oauth data
1804	Handle oauth request
1805	Get widget menu .
1806	Maps a schema to a SQL definition .
1807	Transforms a node into a table .
1808	Set a value in the object .
1809	Get a value from the object .
1810	Set a full name type
1811	Set a boolean type .
1812	Set a date type .
1813	Get the date type for a given key .
1814	Remove a value from the object .
1815	Get a schema object from a request .
1816	Returns this object as an XML string .
1817	Initializes the database .
1818	Adds a new resource to the IPP .
1819	Returns the user s name .
1820	Sets the user s first and last name .
1821	Merge SQL defaults into the config .
1822	Returns the status of the connection .
1823	Deletes a purchase order .
1824	Read the contents of a file .
1825	Load an xml file .
1826	Parse an error message from the backend .
1827	Returns the request as a QBXML string .
1828	e500 not found error handler
1829	Resolve ticket .
1830	Write a config value to the database
1831	Read a config value
1832	Creates a new user account .
1833	Returns the default qb_username
1834	Authenticates a user .
1835	Checks if a ticket is valid
1836	Log an error to the database
1837	Executes a recur enqueue .
1838	recur dequeue .
1839	Enqueue a queue
1840	Queue processing .
1841	Queue the left number of books .
1842	Check if a queue ticket has been processed
1843	Log a message to the database .
1844	Executes a query and returns the result .
1845	Returns an array of fields for a table .
1846	Creates a SELECT query
1847	Update an object in a table .
1848	Enqueue a random book .
1849	Run a recurring job .
1850	Get the number of items in the queue .
1851	Returns a single address .
1852	Authenticates a user .
1853	Find a resource by its id .
1854	Deletes a transaction .
1855	Sends a request to the QUICKBOOKS API .
1856	Sign on a HOSTED QBMS application .
1857	Generate a unique identifier for a transaction .
1858	Refunds a credit card amount .
1859	Initializes a new instance of the QuickBooks WebConnector .
1860	Create a new adapter instance .
1861	Merges the default values into the given array .
1862	Sets the HTTP headers .
1863	Displays a list of Quickbooks products .
1864	Create a new request instance .
1865	Handle the HTTP request .
1866	Walks through the collection using a callback .
1867	Charge an object or token .
1868	Returns a Charge object .
1869	Get a payment by id
1870	Refund a payment .
1871	Store a credit card .
1872	Create a credit card from a token .
1873	Get a credit card
1874	Returns an array of credit cards .
1875	Delete a card
1876	Handle an error .
1877	Performs an HTTP request .
1878	Map a function to a QuickBooks ID .
1879	Maps a function name to an application ID .
1880	Ships a method add request .
1881	Filter actions by priority .
1882	Checks if a version is required .
1883	Returns a QUICKBOOKS_SKIP for a list deleted query request .
1884	Generates a ListDeletedQueryResponse .
1885	Returns the XML for a VOID request .
1886	Generates a TxnVoid response .
1887	Add a request to the SalesReceiptMod
1888	Add a request to a job type
1889	Builds the XML for a filter .
1890	Flushes all caches in the given groups .
1891	Flushes the cache by tags and groups .
1892	Find a command by name .
1893	Run the command configuration .
1894	Check if we can load the localconf file for the given extension key .
1895	Checks if the given extension key can be loaded .
1896	Load ext - localconf . php for an extension .
1897	Loads the ext tables for an extension .
1898	Ensure that TYPO3 installation is possible .
1899	Executes scheduled tasks .
1900	Execute a single task .
1901	Migrate a set of SQL statements to a set of SQL statements
1902	Locks the backend for editors .
1903	Unlock the backend for editors .
1904	Create a new admin
1905	Lists all available upgrade wizards .
1906	Generate the package states .
1907	Fixes the folder structure
1908	Setup extension if possible .
1909	Executes an action with the given arguments .
1910	Creates a new instance from a composer run command .
1911	Creates a new typo3 command runner from a command run .
1912	Creates a new instance of Typo3 .
1913	Executes a command .
1914	Handle an exception .
1915	Creates an upgrade wizard .
1916	Wraps a string with indentation .
1917	Make a request to the API .
1918	Make an absolute url .
1919	Checks if the given extension keys are in the system .
1920	Lists all scheduled wizards .
1921	Execute a wizard command .
1922	Executes a TYPO3 upgrade command .
1923	Sub - process an upgrade command .
1924	Checks the compatibility of an extension .
1925	Setup extensions .
1926	Returns the structure .
1927	Get the extension structure for a package .
1928	Creates the extension structure definition for the given packages .
1929	Generate XML for a class name
1930	Adds the xsd attributes to an xml element .
1931	Adds documentation to a SimpleXMLElement
1932	Resolves the command method name .
1933	Maps request arguments to controller arguments .
1934	Calls a command method .
1935	Creates a default logger .
1936	Get a short description of the command .
1937	Parse method definitions .
1938	Returns the synopsis .
1939	Removes a step from the sequence .
1940	Invokes the given Bootstrap .
1941	Invokes a step .
1942	Setup the extensions .
1943	Setup active packages .
1944	Removes an inactive command .
1945	Lists available extensions .
1946	Force flush database cache tables .
1947	Handle a PHP error .
1948	Registers installer scripts .
1949	Asks a question to the user and returns the response .
1950	Ask the user a question .
1951	Ask the user a confirmation .
1952	Ask a hidden question to the user .
1953	Asks a question and validates it .
1954	Asks the user for a response and validates it .
1955	Execute the command .
1956	Write a log record .
1957	Returns the number of performed update types .
1958	Adds performed updates .
1959	Adds errors for a schema update .
1960	Removes a configuration from a list of paths .
1961	Shows a configuration file .
1962	Shows the active configuration .
1963	Show a local configuration .
1964	Sets a configuration value .
1965	After installation callback .
1966	Adds a flash message to the queue .
1967	Safely copy a file to the target directory .
1968	Generates an xml - schema for a given php namespace .
1969	Initializes the package manager .
1970	Override a class implementation .
1971	Registers an implementation of a class .
1972	Sets a local configuration value .
1973	Convert a value to a target type .
1974	Get the type of a value .
1975	Checks if the given type is a convertible type .
1976	Check if a command is available .
1977	Configure the command definition .
1978	Executes the command .
1979	Ensure the required environment is met .
1980	Initializes the compatibility layer .
1981	Handle the command input .
1982	Render an exception .
1983	Outputs an exception .
1984	Outputs the exception trace .
1985	Returns the possible shortened file name .
1986	Outputs an error message for a command .
1987	Imports data from MySQL database .
1988	Execute a command in a sub - process .
1989	Renders the result of the database schema update .
1990	Renders the result of the import into the database .
1991	Runs an array of schema update statements .
1992	Builds the sequence for the given run level .
1993	Build essential sequence .
1994	Builds the basic runtime sequence .
1995	Flushes all caches for the given groups .
1996	Flushes caches with the given tags .
1997	List cache groups .
1998	Hydrate the dictionary .
1999	Adds the dictionary to the collection .
2000	Returns the number of files in a path matching a regular expression .
2001	Convert a string to JSON .
2002	Returns the transaction description .
2003	Get the access token .
2004	Check if a token exists .
2005	Sets the start time parameter .
2006	Sets the endTime parameter .
2007	Get all issues of a given type .
2008	Runs the application .
2009	Normalizes and truncates a path .
2010	Exit the terminal with an error message .
2011	Divides an array of tokens by commas .
2012	Trims whitespaces from the given tokens .
2013	Call a function usage checker
2014	Add a record .
2015	Returns true if colors are possible .
2016	Get Windows terminal size .
2017	Attempts to autoload an identifier .
2018	Locates a class by name .
2019	Locates a function by name .
2020	Opens a stream .
2021	Returns the current status of a URL .
2022	Compiles a ConstantFetch expression .
2023	Compiles a class constant fetch .
2024	Computes the reflections for the given filename .
2025	Checks if the given reflection contains a line .
2026	Returns all registered identifiers .
2027	Creates a new instance from a class name and a property name .
2028	Create a new ReflectionClass from an instance and a property name .
2029	Returns all docblock type strings .
2030	Finds reflections of a specific identifier type .
2031	Finds a reflection in the array .
2032	Creates a new instance from a class name and a method name .
2033	Create a new instance from a class instance and a method .
2034	Creates a new parameter from a closure .
2035	Returns true if the node allows a null value .
2036	Returns the type of the node .
2037	Sets the parameter type .
2038	Returns all functions .
2039	Creates a new instance from a class name and a method name .
2040	Create a new instance from an instance and a method name .
2041	Returns the prototype of the method .
2042	Checks if the class is a constructor .
2043	Export a class name to a string .
2044	Creates a new class from a node .
2045	Get all methods .
2046	Returns a list of modified methods .
2047	Checks if a method exists .
2048	Returns the value of the specified constant .
2049	Returns the constructor of the method .
2050	Returns the properties of this class .
2051	Get the parent class of this node .
2052	Returns the parent class names .
2053	Returns the traits used by this node .
2054	Reflect the class for a named node .
2055	Checks if the given object is an instance of this class .
2056	Returns true if the given class is a subclass of the given class .
2057	Returns true if the class implements the specified interface .
2058	Returns true if the model is instantiable .
2059	Returns true if the object can be cloned .
2060	Returns the interfaces hierarchy .
2061	Set the value of a static property .
2062	Sets whether this node is final or not .
2063	Removes a method from the cache .
2064	Adds a method to the node .
2065	Adds a property to the model .
2066	Removes a property from this node .
2067	Checks if the given Reflection object is a valid Reflection object .
2068	Export a class instance to a string
2069	Creates a ReflectionClass from an object .
2070	Get runtime properties .
2071	Creates a property node from reflection .
2072	Populates the function abstract .
2073	Sets the node s optional flag .
2074	Returns the number of required parameters .
2075	Returns a list of parameters .
2076	Returns the parameter with the given name .
2077	Returns true if the model is variadic .
2078	Sets the return type .
2079	Returns the body code .
2080	Returns the return statements as an associative array .
2081	Locates all identifiers for the given identifier type .
2082	Create a new object from a node .
2083	Returns the value of this node .
2084	Returns the list of modifiers .
2085	Generates the documentation for a given class .
2086	Formats a Markdown document .
2087	Extracts all properties from the graphs .
2088	Extracts the cardinality for a property .
2089	Checks if a resource is an enumeration .
2090	Creates a properties map from the given types .
2091	Convert a namespace to a directory .
2092	Fixes Cs files .
2093	Check if a property exists .
2094	Extracts the rdf label from the id .
2095	Get the URL for a property .
2096	Convert a field to PHP type .
2097	Get the relation name .
2098	Finishes writing a file
2099	Flushes the buffer .
2100	Adds an item to the buffer .
2101	Add a single language item .
2102	Adds a language item to the list of languages .
2103	Returns an array of urls for a sitemap .
2104	Sets whether or not to gzip the sitemap .
2105	Adds a sitemap .
2106	Writes the given data to the file .
2107	Finishes the file .
2108	Finish the compression process .
2109	Sets the expiration date .
2110	Sets the key params
2111	Sets the sub - key parameters .
2112	Returns a usage string .
2113	Get a user id .
2114	Parses a string into a UserId object
2115	Check if this task is running .
2116	Terminate the task .
2117	Sets the operation .
2118	Handles an OpenPGP error .
2119	Sets the error code .
2120	Sets a value in the data array .
2121	Handle a bad pass exception
2122	Get a pin from a key
2123	Returns the hash algorithm name .
2124	Sets the canSign attribute .
2125	Sets if the request can be encrypted
2126	Parses a string into a GPG subkey .
2127	Converts a string to a timestamp .
2128	Delete a public key
2129	Returns the fingerprint of a key .
2130	Encrypt the given data .
2131	Encrypts a file .
2132	Encrypt and sign a string
2133	Encrypt and sign a file
2134	Decrypt and verify data .
2135	Decrypt and verify a file
2136	Signs a file .
2137	Adds a decrypt key .
2138	Add a key to encrypt
2139	Add a sign key .
2140	Adds a key to an array .
2141	Imports a secret key .
2142	Exports a key .
2143	Decrypt and verify a file .
2144	Prepares the input for the command .
2145	Prepares the output file .
2146	Returns an array of private key fingerprints .
2147	Send a command to the client .
2148	Resets the instance to its original state .
2149	Runs the GPG engine .
2150	Sets the operation .
2151	Set Pins .
2152	Returns the current version of GNU - PgG .
2153	Get the data for a given process .
2154	Set process data .
2155	Closes a sub process
2156	Close GPG - AgentLaunchProcess
2157	Closes a pipe .
2158	Closes the gpg - agent .
2159	Find a binary by name .
2160	Get PinEntry .
2161	Parse debug messages .
2162	Returns the primary key .
2163	Returns true if all subkeys can sign .
2164	Returns true if all sub keys can be encrypted .
2165	Sets the name of the log file .
2166	Writes data to the log file .
2167	Connect to the server .
2168	Parse a command line .
2169	Initialize pins from environment variables .
2170	Disconnects from the server
2171	Sets the PIN for the given text .
2172	Sends the getPin request .
2173	Sends the get info command .
2174	Get the raw URL encoded data .
2175	Get word wrapped data .
2176	Send data to stdout
2177	Build messages from translations .
2178	Set the comment before headers .
2179	Add a line to an array of lines .
2180	Get the main file data .
2181	Extracts the translation strings from the file .
2182	Get the file comment .
2183	Set default headers .
2184	Get the data from a file .
2185	Get the file data from a string .
2186	Resolve call expression .
2187	Check if a comment precedes a node .
2188	Calculate the score of a file matcher .
2189	Returns true if the given directory contains any of the children of the given path .
2190	Returns a list of files from a directory .
2191	Make a json from a file .
2192	Build json files .
2193	Removes JS strings from a Po file .
2194	Marks an update as successful .
2195	Mark all updates as successful .
2196	Set successful by hook .
2197	Checks the status of the given list points .
2198	Checks all list points .
2199	Saves the current user s progress .
2200	Render the Drupal 8 profile .
2201	Generates a hash from the database .
2202	Returns TRUE if the given configuration matches the given hash .
2203	Import a config file .
2204	Import configurations from an array of configs .
2205	Installs a set of modules
2206	Check if a link is active
2207	Check if link is active .
2208	Send a message to the home page .
2209	Get a file by hash .
2210	Get items from data .
2211	Get total count from data .
2212	Prepare string for like compare .
2213	Sets the data .
2214	Resolve grid type .
2215	Resolve options for a GridType .
2216	Returns a grid .
2217	Get grid cell .
2218	Get grid filter .
2219	Returns a grid column operator .
2220	Check if the given block exists in the given environment .
2221	Walks down a SelectStatement AST node .
2222	Sets the source .
2223	Check if the request is ready for a redirect .
2224	Process the request data .
2225	Processes all mass actions
2226	Processes an export .
2227	Process the filters .
2228	Process session data
2229	Prepares the query for execution .
2230	Set session data .
2231	Get column by id .
2232	Returns true if the table has a column with the given id
2233	Set the columns order .
2234	Add a mass action .
2235	Add a tweak .
2236	Get the list of tweaks .
2237	Get a specific tweak .
2238	Get a group of tweaks .
2239	Adds a row action .
2240	Set the template used to load the query .
2241	Add an export .
2242	Get the route url .
2243	Set filters .
2244	Set the limits .
2245	Returns the page count .
2246	Sets the maxResults value .
2247	Checks if the title section is visible .
2248	Check if the filter section is visible .
2249	Check if the pager section is visible .
2250	Sets whether or not to show columns .
2251	Sets the columns to be hidden .
2252	Get a grid response .
2253	Returns the raw data .
2254	Gets the filters for the current request .
2255	Returns the filter for the specified column .
2256	Checks if the query has a filter for the given column id .
2257	Initializes the query builder .
2258	Render a cell .
2259	Returns true if the role is visible .
2260	Sets the sort order .
2261	Set column size .
2262	Sets the query data .
2263	Returns the response data .
2264	Sets the alignment .
2265	Returns a list of all available operators .
2266	Add a column to the table .
2267	Sets the order of the columns .
2268	Add route parameters .
2269	Returns the route parameters mapping for the given name .
2270	Render a single row .
2271	Adds a grid type .
2272	Adds a column .
2273	Sets the Twig container .
2274	Returns the response .
2275	Get the grid data .
2276	Get the flat data of a grid .
2277	Set template .
2278	Returns the value of a parameter .
2279	Returns the list of actions to render for the given row .
2280	Clear all items .
2281	Adds an item to the cart .
2282	Remove an item from the collection .
2283	Returns an array of items .
2284	Login to the OpenID server .
2285	Returns the current user .
2286	Set or get the remember user attribute value .
2287	Call the auth0 service .
2288	Returns the length of a string .
2289	Slices a string from start to end .
2290	Convert a string to lowercase .
2291	Convert a string to uppercase .
2292	Returns a function mock .
2293	Register a mock disabler for the deactivatable .
2294	Defines a function mock .
2295	Show language flag .
2296	Returns the country code .
2297	Returns the code for the given name .
2298	Returns the long code .
2299	Returns the name for the given code .
2300	Sets the user s locale .
2301	Redirect to the home page .
2302	Returns the URL to the previous page .
2303	Set the locale .
2304	Returns the index of the elements where the given callable returns true .
2305	Removes the element at the given index from the interval .
2306	Takes the elements while executing a callable .
2307	Set the auth login
2308	Set the OAuth access token .
2309	Send a message to the server .
2310	Connect to SMTP server .
2311	STARTTLS method .
2312	Authenticates the user using AUTH LOGIN
2313	Generate OAuth Bearer .
2314	Authenticate with XOAuth2
2315	RCPT to .
2316	Converts the message to a string .
2317	Execute the QUIT command .
2318	Get the response code .
2319	Set the from name and email .
2320	Set the fake from .
2321	Finds a file by class name .
2322	Finds a file by class name .
2323	Loads a class .
2324	Fixes namespace declarations .
2325	Writes a cache file .
2326	Returns an array of ordered classes .
2327	Adds a list of prefixes .
2328	Adds a prefix to a list of paths .
2329	Finds a file by class name .
2330	Parse the given text and return the markup .
2331	Detects the block type of a line .
2332	Parse a block .
2333	Get inline markers .
2334	Prepares the inline markers .
2335	Parse inline text .
2336	Parse an emphasis string .
2337	Identify HTML .
2338	Consume html .
2339	Determines if the given line contains a fenced code .
2340	Identify a header line .
2341	Consumes a single header line .
2342	Replaces escaped characters in a string .
2343	Parse a link .
2344	Parse an image from markdown .
2345	Parse inline code
2346	Consumes a line of code .
2347	Identifies the uuid of a line .
2348	Renders a list block
2349	Consume quotes .
2350	Consume a reference .
2351	Renders the header tag .
2352	Parse a markdown string .
2353	Identify the table .
2354	Consumes a table .
2355	Render a table .
2356	Parse a URL .
2357	Checks if the subject and name id are equal .
2358	Creates a DOMElement object from a DOMDocument object .
2359	Creates a DOMElement with the given text .
2360	Validates an array of images .
2361	Check for empty value .
2362	Check for illegal csv property keys .
2363	Creates a new exporter .
2364	Adds a new property value .
2365	Validates the DOMDocument against the XSD schema .
2366	Adds a new user name .
2367	Adds a summary .
2368	Adds a description .
2369	Adds a new price
2370	Adds a bonus to the user .
2371	Add sales frequency .
2372	Adds a date added .
2373	Adds a sort value to the query .
2374	Validates a value .
2375	Get the contents of a hook
2376	Set a symlink to a hook
2377	Sets a hook .
2378	Removes a hook .
2379	Count the number of commits .
2380	Returns reference bag .
2381	Returns a commit object .
2382	Returns a tree with the given hash .
2383	Returns a Blob object .
2384	Returns a new Log instance .
2385	Get the size of the Git repository .
2386	Execute a git shell command .
2387	Returns the contents of the description file .
2388	Run a command .
2389	Clone a Git repository to a path .
2390	Returns the commits parents .
2391	Returns a short message .
2392	Returns a list of branches included in this revision .
2393	Initializes a repository .
2394	Check if a repository is valid .
2395	Clone a repository to another .
2396	Clone a branch to another branch .
2397	Create a clone of a repository .
2398	Returns an array of lines grouped by commit
2399	Returns the list of lines from the file .
2400	Get a reference by name .
2401	Returns all branches .
2402	Returns all local branches .
2403	Returns all remote branches .
2404	Get the content of the file .
2405	Returns the mimetype of the file
2406	Returns the raw diff as an array .
2407	Parse the given text into an array .
2408	Write a formatted query .
2409	Write column name .
2410	Creates an array of new columns .
2411	Creates a new column .
2412	Creates a new table instance .
2413	Returns a SQL string representation of the query .
2414	Boot the Eloquent cacheable class .
2415	Store a cache key .
2416	Get cache keys .
2417	Flushes the cache keys for a model .
2418	Forget the cache .
2419	Reset cache config .
2420	Generate a cache key .
2421	Cache a query .
2422	Validate a HppRequest
2423	Validate a HppResponse
2424	Adds an auto - settle flag .
2425	Add a return - tss
2426	Add ValidateCardOnly option
2427	Adds the dccEnable option
2428	Add cardStorageEnable
2429	Add offerSaveCard .
2430	Add payerExists .
2431	Add hpp version .
2432	Generates default values .
2433	Encode a string to a base64 string
2434	Decode base64 string .
2435	Encodes the data to base64 .
2436	Decode base64 .
2437	Get field config rules .
2438	Unpack deferred results .
2439	Resolves a deferred value .
2440	Convert a cursor to a key .
2441	Converts a cursor to an offset .
2442	Compile a list of nodes .
2443	Creates the request data .
2444	Get all sentences from the response .
2445	Splits a text .
2446	Detects the language of a text .
2447	Returns the list of language codes .
2448	Returns the default values for the table .
2449	Cache a row .
2450	Get a cached row .
2451	Check if an offset exists .
2452	Returns the row at the given offset .
2453	Sets a row at a given offset .
2454	Unset a cache entry .
2455	Returns the join field for the given table .
2456	Deletes this record from the database .
2457	Returns the class name for a field .
2458	Set a configuration value .
2459	Returns the field factory .
2460	Execute a query and return a PDOStatement
2461	Execute a transaction .
2462	Begin a transaction .
2463	Check if data is valid .
2464	Check if a value is set .
2465	Set multiple values at once .
2466	Delete record from database .
2467	Relates this row to another row .
2468	Unrelate one or more rows .
2469	Unrelate one or more tables .
2470	Returns a SELECT statement for this table .
2471	Gets the value name .
2472	Optional . The maximum number of quotas allowed .
2473	Optional . The metric rules to be applied .
2474	Optional . The producer destinations .
2475	Optional . The destination of the consumer logging .
2476	Optional . A list of advices .
2477	Optional . The list of endpoints .
2478	Optional . The logs associated with the request .
2479	Optional . The metrics associated with the request .
2480	List of field violations .
2481	Optional . The list of operations to execute .
2482	The role view .
2483	Optional . The list of included permissions .
2484	The role launch stage .
2485	Optional . The billing destination of the consumer .
2486	Optional . The list of extensions .
2487	Optional . A list of auth providers .
2488	Optional . The number of times the request was made .
2489	Optional . The type of data provided by the request .
2490	Optional . The list of bounds .
2491	Required . The role the user is assigned to .
2492	List of subpages .
2493	List service account key types .
2494	The recipients of the request .
2495	Optional . The list of stack entries .
2496	The producer destinations for this monitoring .
2497	Optional . The consumer destinations for the monitoring .
2498	Optional . The authentication requirements for this request .
2499	Optional . The list of bindings .
2500	The metric costs associated with the request .
2501	List of pages .
2502	Optional . The binding delta action .
2503	Optional . The list of source files .
2504	A list of account keys .
2505	Optional . The service accounts associated with the request .
2506	Required . The level of support for custom roles .
2507	The policy delta .
2508	Optional . The list of exemplars .
2509	Optional . The list of features .
2510	Optional . The properties of this object .
2511	A list of violations .
2512	Optional . The private key type of the account .
2513	Optional . The key algorithm used to generate the account key .
2514	Optional . Details of the request .
2515	Optional . The list of binding deltas .
2516	Optional . The public key type of the account .
2517	Optional . The roles the user is assigned to .
2518	Optional . The system parameters .
2519	Get a cache file .
2520	Checks if the given conditions are met .
2521	Check if a cache file exists .
2522	Sets the cache file .
2523	Get the contents of a cached file .
2524	Gets or creates a cache file .
2525	Check if WordPress is installed .
2526	Installs Wordpress .
2527	Installs a multisite network .
2528	Install a multisite database .
2529	Render a version of TinyMCE .
2530	Get the checksums for a WordPress version .
2531	Update the database .
2532	Get the URL to download a build .
2533	Get the list of available updates .
2534	Download a package .
2535	Upgrades the current instance to the latest version .
2536	Build a table .
2537	Renders the admin head
2538	Move the meta box after the title .
2539	Get the post type .
2540	Get the title of the box .
2541	Render meta box .
2542	Setup meta box .
2543	Get the meta data .
2544	Setup file .
2545	Setup meta data .
2546	Determine if the post is disabled .
2547	Creates a new instance of a property .
2548	Get a child property .
2549	Get the value of an option .
2550	Get the post id .
2551	Generates a unique html id .
2552	Returns the html name of this object .
2553	Check if slug is valid .
2554	Prepares a value for insertion into the database .
2555	Returns true if the condition is allowed by the given rules .
2556	Sets an option .
2557	Sets a setting .
2558	Setup the filter settings .
2559	Setup options .
2560	Setup options slug .
2561	Setup options settings .
2562	Edit an attachment .
2563	Save the post meta box .
2564	Check if the post type is a singleton .
2565	Get a property meta value .
2566	Format a property value .
2567	Get a property by slug .
2568	Loads a property value .
2569	Factory method to create a new page instance .
2570	Get the value of a property option .
2571	Returns true if the current user can render this object .
2572	Renders the row .
2573	Renders the hidden html .
2574	Renders the label html .
2575	Renders the HTML for the row .
2576	Render the rules json .
2577	Get the value of the post .
2578	Decode a property .
2579	Get the post data .
2580	Get the pre - deep keys value .
2581	Prepare the post data .
2582	Prepare the properties data .
2583	Sanitize the given value .
2584	Delete a cache entry .
2585	Returns a function that can be used to retrieve data from the database .
2586	Get a value by id and slug
2587	Updates an existing record .
2588	Deletes a value from the cache .
2589	Get the difference between two revisions .
2590	Add hidden meta boxes .
2591	Loads a new post .
2592	Redirect post location .
2593	Setup post types .
2594	Renames a post .
2595	Get the field s slug .
2596	Returns the source .
2597	Setup the source for the given value .
2598	Setup a rule .
2599	Initialize admin entry type .
2600	Get the admin body classes .
2601	Render the edit form after title .
2602	Get the entry type for the current page .
2603	Render a plugin meta row .
2604	Update the front page .
2605	WP - Link - Queries .
2606	Returns an array of templates for a given entry type .
2607	Prepare the value to be loaded .
2608	Saves the meta s properties .
2609	Get the metabox for a post type .
2610	Save a post .
2611	Overwrite post data .
2612	Pre save method .
2613	Save meta boxes .
2614	Save a revision .
2615	Save the properties of a post .
2616	Restore a revision of a post
2617	Validate a post ID .
2618	Displays the model by the given rules .
2619	Display a list of rules by relation .
2620	Get the slug of a rule .
2621	Prepare the rules .
2622	Check if the current user is allowed to post .
2623	Get the body classes .
2624	Returns a list of all child entry types .
2625	Get the list of labels .
2626	Get the post type supports .
2627	Remove post type support .
2628	Removes all meta boxes for the current post type .
2629	Setup post type support .
2630	Setup post types .
2631	Setup page templates .
2632	Add the mce_buttons filter .
2633	Removes the mce_buttons filter .
2634	Get the results of a row .
2635	Load a property value .
2636	Prepare a list of properties .
2637	Prepare a property for JSON .
2638	Removes rows for a repeater .
2639	Render a JSON template .
2640	Renders the repeater header .
2641	Renders the rows for repeaters .
2642	Registers the options .
2643	Returns the value of a setting .
2644	Prepares an array of settings for a response .
2645	Returns the user s ID .
2646	Returns an array of the user s capabilities .
2647	Initialize papi .
2648	Loads the textdomain .
2649	Require the required PHP files .
2650	Deactivate a plugin .
2651	Returns true if the item is a string .
2652	Prepares the properties for rendering .
2653	Get a single file .
2654	Get the value of a file .
2655	Update a file s value .
2656	Binds a singleton to this object .
2657	Call a closure .
2658	Get the class prefix .
2659	Checks if a class is a singleton .
2660	Create a new instance if it doesn t already exist .
2661	Removes an item from the collection .
2662	Overrides the labels of an entry type .
2663	Add the page items menu .
2664	Renders the post types submenu
2665	Render the admin view .
2666	Autoload a class .
2667	Get the list of sidebar items .
2668	Get the post type labels .
2669	Parse an array of args .
2670	Parse post type args .
2671	Parse term args .
2672	Get the meta query arguments .
2673	Get the result of the query .
2674	Adds the help tabs .
2675	Load a box .
2676	Call the parent register method .
2677	Converts an array of properties to an array of properties .
2678	Get the body classes .
2679	Returns the list of boxes .
2680	Get a property from a slug .
2681	Returns a list of all the properties .
2682	Merges the given boxes into a single array .
2683	Setup admin options .
2684	Create a tab .
2685	Load a value .
2686	Prepare an array for a link .
2687	Update a link s value .
2688	Returns true if the taxonomy is allowed .
2689	Renders the edit form
2690	Get a single post .
2691	Prepare a response for post processing .
2692	Setup REST API fields .
2693	Get the format args .
2694	Renders a file .
2695	Returns an option by key .
2696	Converts a property value based on a conditional rule .
2697	Get the converted value for a conditional rule .
2698	Get the deep value of a field .
2699	Get the value of a conditional rule .
2700	Checks if a value is equal to another value .
2701	Checks if a value is not equal to another value .
2702	Checks if a conditional rule is greater than another conditional rule .
2703	Checks if a value is not in a conditional rule .
2704	Checks if a conditional rule is like another one .
2705	Get the between values for a conditional rule
2706	Checks if a rule is between two values .
2707	Checks if a conditional rule is not between two values .
2708	Get the sort option for a post .
2709	Get the sort options .
2710	Get the items from the settings .
2711	Sort a post value .
2712	Update a post s value .
2713	Get the meta type value .
2714	Lists all Papi entry types .
2715	Generates the HTML for the tabs .
2716	Get the json id for a given key .
2717	Returns the layout with the given slug .
2718	Load a property .
2719	Prepare the layout properties .
2720	Render the layout input .
2721	Render a repeater row .
2722	Adds the form fields to the page .
2723	Prepares an array of taxonomy types .
2724	Setup the taxonomies hooks .
2725	Returns the ajax URL of the papi application .
2726	Handle PAPI AJAX requests .
2727	Get the entry type .
2728	Returns a list of posts .
2729	Get a property .
2730	Returns a list of properties .
2731	Get the rules result .
2732	Get a shortcode .
2733	Get a list of terms .
2734	Get a term .
2735	Renames a term .
2736	Returns the default columns for the page type post fields .
2737	Manage the custom column for a page type post .
2738	Set sortable columns for a page type .
2739	Pre - get posts .
2740	Restrict page types .
2741	Format a meta value .
2742	Returns an array of taxonomy labels .
2743	Get the terms for a taxonomy .
2744	Get the value of a term .
2745	Prepares a value for use in a query .
2746	Performs a search on Yahoo Finance .
2747	Get historical data .
2748	Get a quote for a symbol .
2749	Returns the exchange rate for the given currencies .
2750	Returns the exchange rates for the given currency pairs .
2751	Fetch quotes .
2752	Get the attributes for the header .
2753	Render a cell .
2754	Render the appends .
2755	Get all images .
2756	Set or get the with parameters .
2757	Sets default values for all items .
2758	Returns the value for the given parameter .
2759	Make a form group .
2760	Wraps the content with the error template .
2761	Wraps the given content in a form group .
2762	Add class to options .
2763	Register routes .
2764	Register assets routes .
2765	Register auth routes .
2766	Adds a process wrapper .
2767	Returns all processes with the given status .
2768	Builds the tree .
2769	Optimizes the order of all processes .
2770	Returns the number of statuses .
2771	Counts the number of completed processes .
2772	Failed dependencies of a given class .
2773	Get the dependency tree for a class .
2774	Outputs a message .
2775	Outputs an error message .
2776	Initializes the browser .
2777	Returns the version of the application .
2778	Returns the file url .
2779	Downloads a file and returns the size .
2780	Select by visible partial text .
2781	Saves the given data to a file .
2782	Saves data to the database .
2783	Load a legacy type .
2784	Load a Legacy object with the given name .
2785	Checks if the connection is accessible .
2786	Check if the server is a Selenium server .
2787	Get the cloud service .
2788	Guesses the port for the given host and scheme .
2789	Detect Cloud Service by Status .
2790	Builds the process .
2791	Returns the list of annotations to exclude .
2792	Take a snapshot of a WebDriver instance .
2793	Get the snapshot url .
2794	Instantiate an event dispatcher .
2795	Returns the path to the log file
2796	Quote an XPath attribute .
2797	Optimize vertices and vertices .
2798	Cast a value to a guessed data type .
2799	Check if the process exceeded the timeout .
2800	Resolve the result of the process .
2801	Returns a list of executors .
2802	Setup CI capabilities .
2803	Sets the custom configuration options .
2804	Retrieves the configuration values .
2805	Dequeue processes without delay .
2806	Flushes the output of a process
2807	Get a list of favorites for a given class .
2808	Counts the number of tests in a summary .
2809	Updates the summary table .
2810	Moves the stepContainerSummary node to the parent node .
2811	Update the buttons .
2812	Add a new favorite
2813	Remove a user s favorite
2814	Toggle favorite status .
2815	Check if a user is favorited .
2816	Get favorited by .
2817	Returns a list of all permissions .
2818	Inserts the model to the language files
2819	Create the view files .
2820	Create migration .
2821	Create the events .
2822	Generates a stub file .
2823	Returns the path to the package stubs
2824	Check if a namespace exists .
2825	Check table .
2826	Connect to a random Redis server
2827	On all Redis .
2828	Sets the redis to connect to on one server .
2829	On one - key server .
2830	Calls a Redis method .
2831	Sets the current database .
2832	Deletes a set of keys .
2833	Sets a value in the Redis cache .
2834	Check if a pattern exists
2835	Type a pattern .
2836	Expires a key with a given time .
2837	Flushes all records matching the pattern .
2838	exécute les todos
2839	Get the database size for a given id server
2840	Add a key to the execList .
2841	Dispatch a statsd event .
2842	Adds timing to a node .
2843	Replace the config placeholder .
2844	Merge the tags of the event into the config .
2845	Dispatch memory usage event .
2846	Dispatch statsd . time event .
2847	Creates a new instance from a console event .
2848	Returns the srid .
2849	Returns the geometry of the token .
2850	Returns the point of the point .
2851	Get the coordinate from the lexer .
2852	Returns a list of points .
2853	Returns an array of point lists .
2854	Parse a multi - polygon .
2855	Returns the geometry collection .
2856	Matches a token .
2857	Creates an exception for a syntax error .
2858	Creates an array of Response objects from the given response parts
2859	Get request time
2860	Create the api client
2861	Send a command to the API
2862	Returns the redirect url .
2863	Check render options
2864	Renders a file .
2865	Renders an image in base64 format .
2866	Executes the find command .
2867	Executes the find_within command .
2868	Set an attribute on a page .
2869	Add a key_event command .
2870	Selects a single option .
2871	Sets the debug mode .
2872	Set proxy .
2873	Returns the network traffic .
2874	Returns an array of cookies
2875	Set a cookie
2876	Returns an array of javascript errors
2877	Returns the error message for the page .
2878	Compiles a HostTrie node .
2879	Compiles a variable node .
2880	Creates a TrieNode .
2881	Flushes text buffer .
2882	Lexes a number .
2883	Lexes a punctuation token .
2884	Lexes a quoted string .
2885	Lexes a text char .
2886	Lexes a variable name .
2887	Adds a route .
2888	Returns a named route .
2889	Creates a new RootTrieNode .
2890	Normalizes a name .
2891	Expects a token of the given type and value .
2892	Get the current token .
2893	Returns the next token .
2894	Returns true if the current token matches the given type and the given value . Otherwise returns false .
2895	Peeks at a token .
2896	Add a child node .
2897	Adds a child node .
2898	Returns all children of this node .
2899	Adds a LiteralTrieNode to the list of literal children .
2900	Adds a variable child node to this node .
2901	Build all routes .
2902	Add a route group option to the stack .
2903	Maps a route template to a route template .
2904	Apply the group attributes to the route builder .
2905	Apply group constraints to the route builder .
2906	Apply group middleware to the route builder .
2907	Apply group route templates .
2908	Registers the rule factories .
2909	Returns a list of match candidates for the given node .
2910	Builds the route .
2911	Adds a method route action .
2912	Adds an attribute .
2913	Add many attributes at once .
2914	Add many - to - many constraints
2915	Add many middleware bindings .
2916	Add a middleware binding .
2917	Parse Punctuation .
2918	Parse a text token .
2919	Parse tokens .
2920	Parse a variable .
2921	Parse a variable rule .
2922	Checks if the given segment value is a valid route variable .
2923	Groups a set of routes into a single route .
2924	Maps a route to a controller .
2925	Dispatches the request to the router .
2926	Compares route and request method .
2927	Compares the route domain with the request domain .
2928	Compares route URI with request URI .
2929	Run the route .
2930	Arranges the parameters of a method .
2931	Returns the regex URI for the given route .
2932	Generates a regular expression for a parameter .
2933	Adds a route to the map .
2934	Defines a routing pattern .
2935	Returns the URI for a given route .
2936	Prepares the request to be sent .
2937	Returns the URI for the request .
2938	Validate a Wechat response .
2939	Validate Bit .ly response .
2940	Validate the API response .
2941	Returns a provider by name .
2942	Handle a request .
2943	Returns the request details .
2944	Formats the details object .
2945	Get the request details for the given IP address .
2946	Sets a value in the cache .
2947	Manage the size of the element queue .
2948	Send a POST request to the API .
2949	Returns HTML code for an error .
2950	Group routes by a filter .
2951	Parse a path .
2952	Check if a path is a variable route .
2953	Check if a variable route can be cached .
2954	Adds a callback to the map tree .
2955	Get a redirect url .
2956	Checks if a route middleware exists .
2957	Runs a dispatch .
2958	Initialize the database connection .
2959	Sends HTTP headers .
2960	Returns the value of the given header .
2961	Inserts a new record into the database and returns the last id .
2962	Get the di params .
2963	Creates a singleton instance of an object
2964	Get a singleton instance of a class
2965	Register a singleton instance of a class .
2966	Returns an instance of a class .
2967	Returns a singleton instance of a class .
2968	Runs a method on a class .
2969	Run the middleware .
2970	Initializes the database .
2971	Add a pipe to the pipeline .
2972	Initializes the Redis connection .
2973	Subscribe to one or more channels .
2974	Subscribe to one or more channels .
2975	Resets properties .
2976	Wrap the prepareSql method
2977	Executes the query
2978	Binds parameters to the PDO object .
2979	Wraps a table name with a prefix
2980	Wraps a string in a row .
2981	Converts a number of parameters into a condition constructor
2982	Store the build attributes .
2983	Restore the build attributes .
2984	Creates a sub - query builder .
2985	Generates a SELECT statement
2986	Set the WHERE clause .
2987	Add an OR WHERE condition to the query .
2988	Adds a where in condition to the query .
2989	Add a BETWEEN clause to the WHERE clause
2990	Add a where null condition to the query
2991	Adds a WHERE clause to the query .
2992	Adds a WHERE clause to the query .
2993	Adds a WHERE IN sub clause to the query .
2994	Group by field .
2995	Sets the HAVING condition .
2996	OR HAVING condition .
2997	Set the ORDER BY clause
2998	Add a JOIN clause
2999	Create a table from a sub - table .
3000	Paginate the results of a step
3001	Executes the query and returns all results
3002	Fetch a single row from the database .
3003	Returns a list of values for the specified field .
3004	Executes a SQL query .
3005	Prepares a SQL statement .
3006	Begin a transaction .
3007	Handle an exception .
3008	Generates a random id .
3009	Generates a random ID based on a formated alphabet and size .
3010	Normalize a random number .
3011	Normalizes a DSN .
3012	Create a dsql query .
3013	Executes an expression .
3014	Begin a transaction .
3015	Commits the current transaction .
3016	Rolls back the current transaction
3017	Returns the ID of the last insert .
3018	Resets the value of an argument .
3019	Consume a SQL code .
3020	Escape a soft - escaped value .
3021	Render the expression .
3022	Returns the debug query .
3023	Executes a query and returns the results as an array .
3024	Returns the first row of the result set .
3025	Returns the current row .
3026	Add a table to the table list .
3027	Add a where clause to the query .
3028	Renders a condition .
3029	Adds a group to the query .
3030	Sets the value of a field .
3031	Add an option to the command line .
3032	Adds an order clause to the query
3033	Sets the query mode .
3034	Add a limit to the template select .
3035	Parse a string .
3036	Fetch a string that matches a regular expression .
3037	Creates a message .
3038	Check if a string starts with a line .
3039	Fetch variable matches .
3040	Check if a variable has a parameter expansion .
3041	Fetches the parameter expiration for the given variable name .
3042	Fetch the symbol for a parameter expansion .
3043	Splits a variable s default value into an array .
3044	Parse a variable parameter .
3045	Assigns a default value to a variable .
3046	Check if the parser has a variable .
3047	Get the value of a variable .
3048	Parse a key .
3049	Do the parsing .
3050	Parse an array of raw lines .
3051	Parse a raw line .
3052	Parse an export line .
3053	Parse a key value
3054	Returns the content of a key .
3055	Start a task .
3056	Starts a workflow .
3057	Find a workflow .
3058	Returns the timestamp or duration of the current call .
3059	Returns the class properties for the given argument .
3060	Configures the sitemap .
3061	Fixes the configuration .
3062	Adds a source to a group .
3063	Adds a block to the event .
3064	Returns the root menu .
3065	Get the list of fonts .
3066	Returns a map of unicode characters to the font .
3067	Returns CSS for all fonts .
3068	Computes hash of password and encrypts it .
3069	Upgrade from version 1 . 0 to a new version .
3070	Executes the command .
3071	Write Smoke credentials .
3072	Get the config array from a YAML file .
3073	Checks if a start uri is filtered .
3074	Register the commands .
3075	Find all templates .
3076	Finds all templates in a bundle .
3077	Execute a command .
3078	Returns a copy of this string between the specified start and end .
3079	Sanitize a string for use in a teaser .
3080	Replaces the first character in the string with the given value .
3081	Replaces the last character in the string .
3082	Returns a possessive version of the string .
3083	Segment a string to a specific index .
3084	Returns whether a string contains a value .
3085	Encrypts the data .
3086	Decrypt a response .
3087	Encrypts plain text with a given key .
3088	Decrypts the text with the given key .
3089	Encrypt the order .
3090	Decrypt a response .
3091	Encrypt the account .
3092	Adds a range of values to the current value .
3093	Adds a modifier .
3094	Add a range of pages .
3095	Add raw source .
3096	Adds a file source .
3097	Adds an iterable to the collection .
3098	Unserialize Linked CRS from properties .
3099	Sets the optional constructor arguments .
3100	Create an exception for an invalid value .
3101	Creates an invalid property .
3102	jsonUnserializeFromProperties .
3103	Get the config file path .
3104	Get the application namespace .
3105	Loads the configuration .
3106	Creates a new master node .
3107	Returns the native asset balance .
3108	Returns the string representation of the native asset balance .
3109	Returns the value of a custom asset .
3110	Get the balance of a custom asset .
3111	Returns the string representation of a custom asset .
3112	Returns the entropy checksum in hexadecimal format .
3113	Converts a bitstring into hexadecimal string .
3114	Converts a mnemonic to entropy .
3115	Authorize a trustline .
3116	Revoke a trustline on an asset .
3117	Convert to XDR .
3118	Converts an opaque variable to bytes .
3119	Converts an optional value to an XdrEncodableInterface object
3120	Returns an array of bucket hashes .
3121	Checks if an account exists .
3122	Set if auth is required .
3123	Set whether auth is revocable .
3124	Get the public key checksum .
3125	Returns a fixed opaque string .
3126	Parse the raw data .
3127	Sign a key pair or secret key string .
3128	Submit a B64 transaction .
3129	Creates a patch object from a text string .
3130	Converts a list of patches to a string .
3131	Add a context to a patch .
3132	Creates a deep copy of the given patches .
3133	Calculate the bitap score .
3134	Generates an alphabet from a pattern .
3135	Generates pretty html code .
3136	Converts this object to a delta representation
3137	Creates an INSERT statement from a delta value .
3138	Calculate the levenshtein of the text .
3139	Compute the difference between two checklines .
3140	Generate a new line mode .
3141	Splits two text strings .
3142	Returns the common prefix of two strings .
3143	Common suffix .
3144	Returns the commont overlap between two strings .
3145	Parse two strings in a way that both longtext and shorttext are equal .
3146	Parse a half - match .
3147	Converts two lines of text to chars
3148	Get the recipients of a notification .
3149	Get Laravel s version .
3150	Register the Pug compiler .
3151	Get the plugin s config .
3152	Constructs the cache .
3153	Get the current pug .
3154	Returns the cache path .
3155	Returns the value of an option .
3156	Check if a path is expired .
3157	Extracts a path from the current path .
3158	Get the AMOCRM client .
3159	Get the B2BFamily instance .
3160	Generates a hash of the input .
3161	Resolve a file .
3162	Displays a file in the browser .
3163	Returns an array of extensions options .
3164	Removes an option from the renderer .
3165	Resets the rendering options .
3166	Returns a renderer instance .
3167	Add a filter to Phug .
3168	Adds a keyword to Phug .
3169	Creates a textual cache directory .
3170	Runs the command .
3171	Returns the list of available methods .
3172	Returns the list of available methods .
3173	Returns an array of SeoEditor errors .
3174	Returns a list of metadata .
3175	Mark duplicates .
3176	Find duplicates in a list .
3177	Remove empty attributes from list .
3178	Process a single record .
3179	Handle a request .
3180	Returns the elapsed time in seconds .
3181	Reads the response from the Redis server .
3182	Converts an array of arguments to a string
3183	Gets and validates arguments .
3184	Throws an exception if the command is not supported .
3185	Register spl autoloader
3186	Unregisters the autoloader
3187	Get the rediska path .
3188	Returns an array of connections by key name .
3189	Get a connection by channel name .
3190	Returns a list of PubSub channels associated with the given connection .
3191	Get a configuration value .
3192	Sets a configuration value .
3193	Throw an exception if Redis server is not supported .
3194	Create a new queue .
3195	Delete a queue .
3196	Returns the number of objects in the queue .
3197	Send a message to a queue
3198	Receive a message from a queue
3199	Delete message from queue
3200	Returns the total elapsed time in seconds .
3201	Sets the value of a field on the disk .
3202	Sets the value of a field .
3203	Increment the hash value of a field .
3204	Removes a field from the database .
3205	Write data to disk .
3206	Subscribes to a channel .
3207	Publish a message .
3208	Adds a message to the buffer .
3209	Throws exception if not supported .
3210	Throws an unserialized notice .
3211	Adds a new queue .
3212	Removes a queue by name .
3213	Returns the queues cache
3214	Watch for a specific key or keys .
3215	Unwatch the connection .
3216	Add a command to the list of commands .
3217	Creates a new user post .
3218	Displays a list of posts
3219	Factory method to create a new instance of Zend_Log_Config
3220	Add a value to a sorted set .
3221	Returns the length of the set by the score .
3222	Get a set by its score .
3223	Remove a set from the sorted set by score .
3224	Increment the score in the sorted set .
3225	Returns a set of items sorted by rank .
3226	Remove a set from the sorted set by rank .
3227	Returns the rank of the set with the given value .
3228	Unions a set or a set of sets with a given aggregation
3229	Intersects a set or a set with another set .
3230	Returns the results as an array .
3231	Creates a new set from an array .
3232	Sets the name of the manager .
3233	Get a connection by key name .
3234	Returns a list of connections .
3235	Sets the Rediska_Connection to the specified connection .
3236	Subscribe to a channel .
3237	Configures a Rediska_Connection instance .
3238	Set Key Distributor .
3239	Returns the Rediska serializer .
3240	Returns a command instance .
3241	Get the command s lower name and throw an exception if not present .
3242	Executes the command .
3243	Adds a command to Rediska .
3244	Writes to the server .
3245	Sets the response callback .
3246	Transforms a multi - bulk command .
3247	Append a value to the list .
3248	Prepend a value to the list .
3249	Truncates a list .
3250	Sets a value at a given index .
3251	Inserts a value after the given reference value .
3252	Inserts a value before the given reference value .
3253	Inserts a value into the list .
3254	Remove a value from the list .
3255	Shift a record from the list .
3256	Shifts the current block to a different timeout .
3257	Removes a key from the list .
3258	Pops a block from the list .
3259	Create a new instance from an array .
3260	Loads a transaction .
3261	Save a record to the database
3262	Remove a transaction by id .
3263	Removes all cache entries matching the given tags .
3264	Sets the directives .
3265	Returns an array of ids that are not matching the given tags .
3266	Get the metadatas for a given id .
3267	Collects the trash from the database .
3268	Add a value to the set .
3269	Removes a value from the set .
3270	Moves a value to another set .
3271	Intersects a set with another set .
3272	Creates a new comparison between two sets .
3273	Get the difference between two sets .
3274	Returns the diska instance .
3275	Sets the response s value .
3276	Sets the value and expires for the given number of seconds .
3277	Sets the bit at the given offset .
3278	Gets or sets the value of a key .
3279	Follower action .
3280	Displays a list of following users
3281	Follow a user .
3282	Move the object to a specific db index .
3283	Set expire time .
3284	Get rediska on .
3285	Sets the mode .
3286	Adds a Rediska instance .
3287	Returns all instances .
3288	Creates a Rediska instance from the given options .
3289	Increment a transaction .
3290	Reset the subject .
3291	Returns the bucket name .
3292	Set the part of a multi - increment transaction .
3293	Sets the mulit exec get count part .
3294	Creates a socket connection .
3295	Returns the read buffer .
3296	Read data from Redis server .
3297	Reads a line of data from the stream .
3298	Sets the read timeout .
3299	Returns the stream context .
3300	Reads data from the socket and throws an exception .
3301	Validates a nonce .
3302	Declares and binds a queue .
3303	Acknowledge a message .
3304	nack a message from the queue
3305	Get the message properties .
3306	Start the daemon .
3307	Stop daemon .
3308	Creates an exception .
3309	Build the queue handler .
3310	Handle a sync message .
3311	Returns a driver for the given connection .
3312	Rejects a message .
3313	Closes the channel .
3314	Consumes a message .
3315	Replace the model in the stub .
3316	Qualify a class name .
3317	Processes a request for an action .
3318	Creates a new model .
3319	Convert an array to JSON .
3320	Edit a model .
3321	Removes the model from the database .
3322	Vote on an attribute .
3323	Renders a document .
3324	Returns the string at the current position .
3325	Get the global percentages for an app .
3326	Closes the socket .
3327	Receives a packet from the socket .
3328	Sends a data packet .
3329	Get the reply from the server .
3330	Executes a rcon command .
3331	Get the RCON challenge .
3332	Sends a RCON command to the server .
3333	Connects to the server .
3334	Returns a list of all servers in a region
3335	Fetches a list of icon items .
3336	Converts a community id to a steam id
3337	Converts a Steam ID to a Community ID .
3338	Resolve a vanity URL
3339	Returns a list of all friends .
3340	Fetches the list of games owned by the user .
3341	Returns a list of Steam groups for the current user .
3342	Get the steam id 64
3343	Get the most recent playtime for an application .
3344	Get the total playtime for an application .
3345	Fetch the profile data .
3346	Rotates the IP address .
3347	Initializes the socket .
3348	Sends an RCONAuth request to the RCON server
3349	Connects to a UDP server
3350	Create a new instance of a class .
3351	Returns a cached instance .
3352	Check if the given id is cached .
3353	Cache a collection of ids .
3354	Get the cache ids .
3355	Initializes the socket .
3356	Authenticates with RCON .
3357	Closes the socket .
3358	Read data from socket .
3359	Returns true if the socket is selected false otherwise .
3360	Sends data to the socket .
3361	Get AppNews for app .
3362	Returns a list of classes that have been equipped .
3363	Returns the number of members .
3364	Returns a list of members .
3365	Fetch a single member list page .
3366	Fetch the current page .
3367	Get the item schema .
3368	Fetches the items from the Steam API .
3369	Returns a list of all the registered bots .
3370	Returns the list of golden wrenches .
3371	Sets the API key .
3372	Make a request to the Steam API .
3373	Send a data packet to the server .
3374	Returns the players .
3375	Handle the response for a given request type .
3376	Update the ping time .
3377	Update the players .
3378	Adds a new information to the player .
3379	Get a leaderboard by its ID .
3380	Returns the leaderboards for a game .
3381	Loads the leaderboards for a game .
3382	Returns a GameLeaderboardEntry for the given Steam ID .
3383	Get the range of entries between the first and last entry .
3384	Load data from a URL .
3385	Load data for a given steam id .
3386	Parse GameLeaderboardEntry from SimpleXMLElement
3387	Create a new SteamGame instance .
3388	Check if an application is up - to - date with Steam .
3389	Get the number of players in the team .
3390	Get user stats .
3391	Displays a listing of work orders .
3392	Store a new event .
3393	Show an event .
3394	Update an event .
3395	Delete an event .
3396	Show a work order .
3397	Show the form to edit a work order .
3398	Update a work order .
3399	Get a single take .
3400	Add parts to a work order .
3401	Get a put order .
3402	Processes the postPut action .
3403	Show a work request .
3404	Show the form for editing a work request .
3405	Update a work request .
3406	Delete a work request .
3407	Scope a location query .
3408	Creates a new report for an event .
3409	Displays a form to create a new work order .
3410	Store attachments .
3411	Show a work order attachment .
3412	Display the form to edit an attachment .
3413	Update an attachment .
3414	Destroy an attachment .
3415	Creates a form to update or update a work order .
3416	Get the icon attribute .
3417	Displays a listing of stock movements .
3418	Show a stock movement .
3419	Rolls back a stock movement .
3420	Get the updated status attribute .
3421	Get the revised priority attribute .
3422	Close all work order sessions .
3423	Checks if the current user is logged in .
3424	Returns the started at label .
3425	Returns the completed at label .
3426	Complete a task .
3427	Returns the table for the given status .
3428	Displays a form to update or update a work order status .
3429	Display a list of priority items .
3430	Store a new priority .
3431	Display the form to edit a work order priority .
3432	Update a priority .
3433	Scope a query by stock .
3434	Scope a query for a specific SKU .
3435	Get current stock .
3436	Get the name of a revisioned metric .
3437	Get an operator from a string .
3438	Scope a query for sorting .
3439	Get the full path to the file .
3440	Display a list of statuses .
3441	Store a new status .
3442	Display a form to edit an existing status .
3443	Update a status .
3444	Displays a form to create a new variant for an item .
3445	Store a new variant .
3446	Displays the form to create a new work order .
3447	Store a new report .
3448	Display a list of work orders .
3449	Get the table of assignments assigned to a user .
3450	Get all table sessions for a given work order .
3451	Creates a form to update or update a work order .
3452	Form a comment on a work order .
3453	Handle the uploaded files .
3454	Get the asset table .
3455	Displays a form to update or update an asset .
3456	Returns the inventory table .
3457	Returns the inventory stock table for the given Inventory item .
3458	Returns a form to create or update a Inventory entity .
3459	Returns the stock bar for the given Inventory item .
3460	Store an attachment .
3461	Update an attachment .
3462	Get the table for a given metric .
3463	Returns the history table for a collection of revisions .
3464	Store an asset .
3465	Show an asset .
3466	Update an asset image .
3467	Display a listing of metrics .
3468	Store a new metric .
3469	Display a form to edit a metric .
3470	Display a list of all assets .
3471	Store an asset .
3472	Show the form to edit an asset .
3473	Update an asset .
3474	Scope a query by id .
3475	Returns the response .
3476	Get an input by name .
3477	Returns an array of select options for the given belongs_to clause .
3478	Returns rendered node options .
3479	Bootstrap view composers .
3480	Handle an attachment .
3481	Displays a list of stocks for an item .
3482	Displays a form to create a new stock .
3483	Store an item in the inventory .
3484	Shows a single stock item .
3485	Displays a form to edit an existing stock .
3486	Update an existing stock .
3487	Destroy an item from the inventory .
3488	Display a single asset .
3489	Display a form to create a new asset .
3490	Store a new meter .
3491	Show a meter .
3492	Show the form for editing a meter .
3493	Update a meter .
3494	Destroy a meter .
3495	Store a new work order .
3496	Updates a work order notification
3497	Returns a formatted version of the start date .
3498	Returns the completed at formatted date .
3499	Display a list of assigned work orders .
3500	Creates a form to edit a work order .
3501	Get hours .
3502	Returns the start date as a formatted string .
3503	Returns the end date formatted .
3504	Get the end time formatted .
3505	Formats a recurFrequency event .
3506	Returns the recurrence of a rrule .
3507	Returns the number of recurrence days .
3508	Show the tags of the event .
3509	Store an inventory stock .
3510	Update an inventory stock .
3511	Deletes a stock .
3512	Get the table of attachments for a work order .
3513	Creates a form to upload a work order attachment .
3514	Attempt to authenticate a user .
3515	Handle a user was authenticated .
3516	Handle LDAP user was authenticated .
3517	Deletes the given stock .
3518	Restores an InventoryStock instance .
3519	Get the table for the given priority .
3520	Returns a form to update or create work orders .
3521	Create a table of stock information for a work order .
3522	Form to take a work order .
3523	Creates a form to put a work order .
3524	Destroys an inventory item .
3525	Create a flash message .
3526	Create a new work order .
3527	Store a new work order report .
3528	Display a list of routes .
3529	Store an event .
3530	Show a single event .
3531	Update an event .
3532	Destroy given event .
3533	Scope a category query .
3534	Builds the sign - in form .
3535	Store a manual .
3536	Show an asset manual .
3537	Update an asset manual .
3538	Store a work order .
3539	Remove a work order from an asset .
3540	Store an update for a work request .
3541	Destroy an update .
3542	Display a list of stock items for a work order .
3543	Returns a form to take a work order
3544	Take a Part .
3545	Display a form to put a work order .
3546	Perform a PUT on a part .
3547	Display a list of work requests .
3548	Show the form to edit a work request .
3549	Update an existing WorkHttpRequest
3550	Show a form to create a new category .
3551	Store a new resource in storage .
3552	Show the form for editing a category .
3553	Update a category .
3554	Delete a resource .
3555	Returns a table of sessions for a work order .
3556	Table per worker .
3557	Deletes all stocks from an Inventory .
3558	Restores the stocks of an Inventory .
3559	Returns the inventory view .
3560	Stores an item in the storage .
3561	Shows an inventory item .
3562	Display a form to edit an existing Inventory item .
3563	Creates a table for the given Inventory item .
3564	Returns a table of stock movements for an item .
3565	Returns a form to update or create a stock .
3566	Get Inventory stock navbar .
3567	Returns the table for the work order .
3568	Returns the inventory table .
3569	Display the work order parts navbar .
3570	Display a list of sessions for a given work order .
3571	Start a work order .
3572	End a work order .
3573	Get the change attribute .
3574	Store a new note in the inventory .
3575	Show a single note .
3576	Update a note .
3577	Remove a note from the inventory .
3578	Get the last movement attribute .
3579	Get last movement by attribute .
3580	Returns the quantity metric attribute .
3581	BTN put back some for workOrder .
3582	BTN PutBackAllForWorkOrder .
3583	Ends a work order .
3584	Display a list of work requests .
3585	Creates a form to submit a work request .
3586	Store a work order .
3587	Removes a worker from the work order .
3588	Generates a list of items .
3589	Returns a placeholder for an option .
3590	Get the appendage for a method .
3591	Renders a component .
3592	Get the data for a component .
3593	Register the blade compiler .
3594	Renders a model element .
3595	Format a label .
3596	Generates a reset form field .
3597	Creates a submit form field .
3598	Returns the value of a request parameter .
3599	Generates a link to an asset .
3600	Generates a link to a route .
3601	Creates a listing element .
3602	Returns an array of HTML attributes .
3603	Register the html builder .
3604	Register the form builder .
3605	Creates a search input field .
3606	Creates a datetime input field .
3607	Generates a file input .
3608	Removes the first line from an XML string .
3609	Loads the dictionary for the given locale .
3610	Parses a locale file .
3611	Get patterns for a word .
3612	Unify a locale .
3613	Tokenize a string .
3614	Runs the token registry .
3615	Set options .
3616	Add a dictionary to the registry
3617	Returns all hyphenation patterns for a given word .
3618	Set filters .
3619	Adds a filter .
3620	Sets the tokenizers .
3621	Add tokenizer .
3622	Factory method to create a new Ini file .
3623	Returns the text of the message .
3624	Returns the pattern .
3625	Sets the options .
3626	Returns the options .
3627	Add a dictionary .
3628	Add a filter .
3629	Add tokenizer .
3630	Returns an array of tokenizers .
3631	Returns a list of dictionary objects .
3632	Returns the list of filters .
3633	Hyphenates a string .
3634	Returns the hyphenation pattern for the given token registry .
3635	Get the pattern for a word token .
3636	Sets the default home path .
3637	Returns the default home path .
3638	Set the home path .
3639	Creates a Hyphenator instance .
3640	Autoloads a hydration class
3641	Replaces an existing token with a new token .
3642	Returns the token with the given key .
3643	Returns the merged pattern .
3644	Returns a filter by its key .
3645	Filter tokens .
3646	Fetch a new access token .
3647	Migrate orders .
3648	Migrate an Order .
3649	Migrate shipping values .
3650	Migrate order calculation .
3651	Generates the php code for a new product .
3652	Create default checkout pages if they don t exist .
3653	Initiate a payment .
3654	Returns the gateway data .
3655	Creates a new payment .
3656	Completes the order .
3657	Checks if order can be placed .
3658	Generates a nice country code .
3659	Sets the payment method .
3660	Returns the selected payment method .
3661	Sends confirmation email to shop admin .
3662	Sends a notification to the admin of the order .
3663	Sends a cancellation notification to the admin email .
3664	Builds the url for the given action and buyable .
3665	Direct to cart page .
3666	Returns the cart index page .
3667	Returns debug information .
3668	Returns the filter for this object .
3669	Submits a form to the shop
3670	Processes the update shop account form .
3671	Gets a modifier by class name .
3672	Returns the current unit price .
3673	Calculate the total amount .
3674	Get the unique data .
3675	Called before the order is written .
3676	Returns the product variation for this product .
3677	Returns the address as a string .
3678	Returns the current address .
3679	Returns the cart form .
3680	Returns the total weight of the item .
3681	Returns the weight of the order .
3682	Returns the sum of the items in the collection .
3683	Returns the subtotal of the collection .
3684	On beforeWrite callback .
3685	Returns the viewer for the given action .
3686	Returns the current version of the product .
3687	Add the Variations tab to the CMS .
3688	Returns a Variation by its attributes .
3689	Generate Variations from AttributeType .
3690	Deletes the owner from the database .
3691	Get a component by type .
3692	Returns a list of form fields .
3693	Validates the order data .
3694	Returns the order data .
3695	Sets the data for all components .
3696	Returns an array of data that is dependent on a component .
3697	Returns the current cart .
3698	Set current cart status .
3699	Finds or makes the current order .
3700	Adds a buyable to the order .
3701	Removes an item from the current order .
3702	Removes an OrderItem .
3703	Sets the quantity of a buyable .
3704	Update order item quantity .
3705	Find or make an item .
3706	Get a buyable .
3707	Archive order id .
3708	Get the value of the order .
3709	Creates a price field for display .
3710	Get an image by its filename .
3711	Set the content of a record .
3712	Returns a list of countries .
3713	Returns a single country
3714	Convert a country code to a name
3715	Returns true if the cart is empty false otherwise .
3716	Converts an associative array to a set of attributes .
3717	Returns a dropdown field for this product attribute .
3718	Returns a list of products that can be shown to the user .
3719	Get all child category ids .
3720	Returns all child categories of this product .
3721	Returns the groups menu for this product category .
3722	Generates a nested title .
3723	Displays the item edit form
3724	Print order .
3725	Returns the next step .
3726	Returns the order list .
3727	Returns a form to edit an Order entity .
3728	Get a subset of fields .
3729	Modify the order .
3730	Setup steps .
3731	Redirects the user to the shopping cart .
3732	Returns true if the action is the current step .
3733	Returns the position of the given action .
3734	Find a link for a page .
3735	Returns a list of products
3736	Trims the number of cents .
3737	getCMSFields method .
3738	Gets the product category options .
3739	Get category options without parent .
3740	Returns an array of product category IDs .
3741	Returns the selling price .
3742	Get the product image .
3743	Submit payment .
3744	Performs the payment .
3745	Cancels an order .
3746	Get the required CC fields for the given gateways .
3747	Adds an Order to the Session .
3748	Returns the order IDs for the current session .
3749	Get all orders from id .
3750	Returns the action form for the order .
3751	Create a new membership
3752	Get a Member by its unique identifier .
3753	Called after a member is logged in .
3754	Returns a list of previous orders .
3755	AJAX link hidden field
3756	Returns a list of address fields for the current user .
3757	Renders the CMS fields .
3758	Returns the default search context .
3759	Returns the components for the given component name and id .
3760	Calculates the total of the order .
3761	Returns a new OrderTotalCalculator instance for the given class name .
3762	Returns the total outstanding amount .
3763	Returns the link to this order .
3764	Checks if a member can pay .
3765	Checks if a member can delete a record .
3766	Returns true if the current user can view the page .
3767	Get the user s name .
3768	Returns the billing address .
3769	Generates a reference .
3770	Generates a reference if it is in the database .
3771	Deletes all items modifiers and payments .
3772	Returns an array of I18n entities .
3773	Returns a form field .
3774	Editable items .
3775	Finds the account page link .
3776	Returns a link to an order .
3777	Browse a list of packages .
3778	List installed packages .
3779	Get the path to a package .
3780	Updates the package manager .
3781	Uninstall a package .
3782	Get the composer instance .
3783	Get the community packages .
3784	Create a package index .
3785	Show a list of packages .
3786	Get a package by its shortened identifier .
3787	Get the list of installed packages .
3788	Get the installed package by its name .
3789	Get package name and version from composer . json file .
3790	Get the path to composer . json .
3791	Create the default composer json file .
3792	Get the raw git version .
3793	Guesses the version constraint to use from a tag .
3794	Get the contents of the composer . json . php backup file .
3795	Sets the object .
3796	Load custom config .
3797	Delete the queued jobs .
3798	Processes the cleanup .
3799	Queue a job .
3800	Copy the job data to the job descriptor .
3801	Get the next pending job .
3802	Checks the health of a job .
3803	Check the default jobs .
3804	Restarts a stalled job .
3805	Initialise a queued job
3806	Check if the session has passed the time limit .
3807	Check if the memory usage is too high .
3808	Parse a memory string .
3809	Get the job list filter .
3810	Run a queue .
3811	Process a queued job .
3812	Queue a task .
3813	Log the status of a descriptor .
3814	List all jobs .
3815	Refreshes the queued job descriptor .
3816	Check if a job is stalled .
3817	Pauses the job .
3818	Resumes the job .
3819	Activate on queue
3820	Get the job directory .
3821	Cleanup queued job .
3822	Returns the saved job messages .
3823	Returns the last message .
3824	Get the job type as a string .
3825	Get the job type values .
3826	Setup sitemap .
3827	Prepares the sitemap for re - use .
3828	Generate Google Sitemap . xml file
3829	Runs a process queue .
3830	Handle an action .
3831	Get the title of the item .
3832	Setup the process .
3833	Processes the current step .
3834	Get the queue for the given request .
3835	Cast a model .
3836	Lists all cachers .
3837	Saves a source map .
3838	Write data to the shared memory .
3839	Read data from shmop .
3840	List sidebars .
3841	List widgets .
3842	Add a widget to the sidebar
3843	Updates a widget .
3844	Moves a widget to another position .
3845	Deactivates a widget .
3846	Deletes a widget .
3847	Reset one or more registered sidebars .
3848	Validates a sidebar .
3849	Checks if a widget exists in the sidebars
3850	Get the data for a given widget .
3851	Move a widget from one sidebar to another .
3852	Get the widget object from the widget factory .
3853	Sanitize widget options .
3854	Returns a random integer .
3855	Generates a random string
3856	Encodes a string .
3857	Decodes a 32 - bit string .
3858	Adds a path to a generator
3859	Remove a generator path .
3860	Returns a generator .
3861	Loads all registered generators .
3862	Show this row as a row .
3863	Sets the element to read only .
3864	Opens a new form .
3865	Add a prefix to the element .
3866	Add a suffix to the element .
3867	Assemble addons .
3868	Sets the CSS size .
3869	Unscrubs a message .
3870	Client tempF .
3871	Returns all nodes in a session .
3872	Gets the properties of a session .
3873	Evaluate a path .
3874	Writes an array of keys to the redis cache .
3875	Get the webdriver .
3876	Returns the image s aperture .
3877	Returns the author .
3878	Returns the response s HEADLINE
3879	Returns the current credit card number .
3880	Returns the source of the request .
3881	Returns the job title .
3882	Returns the ISO code of the file .
3883	Returns the focal distance .
3884	Returns the width of the image .
3885	Returns the height of the image .
3886	Returns the title of the message .
3887	Returns the caption .
3888	Get the user s copyright .
3889	Returns the search keywords .
3890	Returns the current camera .
3891	Returns the current horizontal resolution .
3892	Returns the vertical resolution .
3893	Returns the installed software .
3894	Returns the current local length .
3895	Returns the creation date .
3896	Returns the color space .
3897	Returns the MIME type of the request .
3898	Returns the file size .
3899	Returns the current orientation .
3900	Returns the current location s GPS .
3901	Extracts the GPSC coordinate from the given components .
3902	Set the path to the exiftool binary .
3903	Get the tool path .
3904	Returns the output of a command .
3905	Hydrate an object with data .
3906	Extracts the GPSC coordinates from the given coordinates
3907	Returns the mapper .
3908	Returns the hydrator .
3909	Sets a list of options .
3910	Add required section .
3911	Get iptc data from a file
3912	Creates a new instance of the given type .
3913	Generates the table prefix .
3914	Normalize config .
3915	Returns a list of translations .
3916	Creates a new queued build job .
3917	Processes the URLs in the queue .
3918	Collects all the changes for the given context .
3919	Flushes the queued job changes .
3920	Get the module extensions garbage .
3921	Filter extensions by module
3922	Returns list of module blocks
3923	Returns module settings .
3924	Returns true if the module s metadata is supported .
3925	Checks if a PHP file exists .
3926	Checks module versions
3927	Checks if the extended classes are compatible .
3928	Checks if all template blocks exist .
3929	Check module settings
3930	Check module templates .
3931	Check if the current module is a controller .
3932	Check module files .
3933	Check module events .
3934	Parse module ids from command line arguments .
3935	Parse shop configs
3936	Template variable getter . Returns array of available module ids
3937	Check if Bootstrap is enabled .
3938	Returns module object
3939	Returns module cache object
3940	Returns the module installer .
3941	Fixes a module
3942	Cleans up the module extensions .
3943	Add template files to a module
3944	Add module files
3945	Adds module events .
3946	Add module extensions
3947	Add a module version
3948	Get the difference between two arrays .
3949	Adds module settings .
3950	Sets the module controllers .
3951	Adds extensions to module
3952	Returns the list of installed modules .
3953	Renders the template .
3954	Block oxtpl .
3955	Returns an Http instance .
3956	Get an available transport driver .
3957	Returns a list of all available HTTP transports .
3958	CURLOPT_CAINFO CURLOPT_CAINFO
3959	Creates a Response object from the given content and info .
3960	Check if redirects are allowed .
3961	Make an OPTIONS request to the API
3962	Make a HEAD request to the API .
3963	Make a TRANSPORT REQUEST with TRACE method
3964	Make a PATCH request .
3965	Check if given value is a valid glob expression .
3966	Get extra parameter value by key .
3967	Returns an array of combined filters .
3968	Activates the package installer .
3969	Checks if given value matches any of the given glob expressions .
3970	Checks if a path matches a glob expression list .
3971	Returns the shop source path .
3972	Creates an installer for the given package .
3973	Installs a package .
3974	Updates a package .
3975	Copy shop source from package to target directory .
3976	Copy configuration dir file within target directory .
3977	Copy setup files .
3978	Checks if config file is not configured or missing .
3979	Copy files from shop source directory to installation by filter .
3980	Returns a list of files filtered by a given filter .
3981	Returns the absolute path to the file from the installation .
3982	Update a package .
3983	Copies a package .
3984	Forms the source path of a package .
3985	Nests the given file system structure into the given file system structure .
3986	Returns a flat file list iterator for the given source path .
3987	Copies a directory .
3988	Copy a file from one location to another .
3989	Generate models .
3990	Traverses an array of classes .
3991	Convert schema to JSON - LD array .
3992	Adds breadcrumb list .
3993	Renders the json - encoded models .
3994	Sets the HTML to be rendered by the given view .
3995	Generates the styled HTML
3996	Resolves a path .
3997	Compare the expected values with the actual values .
3998	Checks if an item exists in the expected array .
3999	Asserts that the given HTTP status code matches the expected value .
4000	Asserts that the given HTTP body contains the given content .
4001	Asserts that a document is JSON .
4002	Asserts that a document is a JSON API .
4003	Assert that a document has been fetched .
4004	Assert that the given data is exactly what was fetched .
4005	Assert that a document was fetched many times in order .
4006	Assert that a document was fetched to many .
4007	Assert that a document was fetched to many in order .
4008	Assert that a document was created with an expected id .
4009	Asserts that the HTTP body content is empty .
4010	Asserts that the given content contains exactly the given metadata without the given data .
4011	Asserts the exact error status of a document .
4012	Asserts that the given document contains the given error .
4013	Asserts that a document has errors .
4014	Returns the current document .
4015	Sets the expected type .
4016	Asserts that the document has been fetched exactly .
4017	Assert that content has been updated .
4018	Assert that the item has been deleted .
4019	Assert that a resource is included .
4020	Assert that the document contains the given identifier .
4021	Asserts that a metadata is present in the document .
4022	Asserts that the metadata is exactly what was expected .
4023	Asserts that the document contains exactly the given links .
4024	Asserts that the document contains exact errors .
4025	Asserts a resource .
4026	Asserts the existence of an identifier in a document .
4027	Asserts that the given document contains exactly the given data .
4028	Asserts that the document is not exactly what was expected .
4029	Asserts that a document is only a subset of a list .
4030	Asserts that the given document is in the given list .
4031	Asserts that a document contains a list of data .
4032	Asserts that the given list is in the given order .
4033	Asserts that a document contains only identifiers in a list .
4034	Asserts that the identifiers list in the given document are in the order expected .
4035	Asserts that a list contains a resource .
4036	Asserts that a document in a list contains a hash .
4037	Asserts that the given document is in the given list .
4038	Asserts that a document is included in a list of documents .
4039	Asserts that the given document contains the given error .
4040	Asserts that a document contains an error .
4041	Asserts that the given document contains the given error .
4042	Creates a new instance from a string .
4043	Casts a document to an iterable .
4044	Creates a new instance from a JSON string .
4045	Decode a JSON string .
4046	Returns the document with the given pointer .
4047	Returns true if the document has at least one of the given paths .
4048	Asserts that a set of pointers exists .
4049	Asserts that a set of pointers do not exist .
4050	Checks if two values are exact .
4051	Checks if an array is a subset of an array .
4052	Check if the value is a resource identifier .
4053	Sorts an array by key .
4054	Checks if value is identifiable .
4055	Send a request to the API .
4056	Say something to a user .
4057	Reply to a user .
4058	Sets the allowed types .
4059	Write a message to the output buffer .
4060	Writes a message to the output if debugging is enabled .
4061	Adds a new message .
4062	Returns the number of messages for the given type .
4063	Get the vars from a single line array .
4064	Get vars from a multi - line array
4065	Validates a vars - docblock array
4066	Returns true if all items in the collection pass the strategy
4067	Accumulates this iterator using a closure .
4068	Merge a sorting function into an array .
4069	Converts this iterable to an array .
4070	Returns a list of all keys in the collection .
4071	Returns the iterator as a ZIP file .
4072	Get the values of this iterable .
4073	Reduces the iterator using a closure .
4074	Convert generic keys to a key .
4075	Returns a new Iterator instance grouped by the given strategy .
4076	Reduces an iterable using a closure .
4077	Adds a reduction .
4078	Dump composer . json .
4079	Get extra key .
4080	Escapes a prefix .
4081	Parse a compressed iri .
4082	Get the term context from a field type .
4083	Persists the content to the cache if needed .
4084	Returns the content of a bundle .
4085	Normalize field items .
4086	Performs a DELETE on all registered backends
4087	Creates a translated instance of a FieldItem .
4088	Get entity URI .
4089	Get typed data ids .
4090	Builds the cache backend .
4091	Fetch an item from the cache .
4092	Run a callable with a string .
4093	Output a single error line .
4094	Asks the user a question .
4095	Execute a query and return the last inserted id
4096	Create a new record in the database .
4097	Override a set of values .
4098	Inserts a new record into the database
4099	Extracts the primary key from the schema .
4100	Sets the user to act as .
4101	Copy stubs .
4102	Configure variables .
4103	Serializes additional data .
4104	Check if additional data is a swatch type .
4105	Loads a swatch type .
4106	Run all database seeders .
4107	Prepend a seeder to the given name .
4108	Find one by option id and store id
4109	Find one entity by attribute id and attribute set id
4110	Finds an option by entity type id attribute code store id and value .
4111	Returns the attribute option with the highest sort order for the given attribute id .
4112	Create the DatabaseSeeders folder .
4113	Create a database seeder .
4114	Initializes the attribute .
4115	Setup DB Transaction
4116	Loads an attribute from the database .
4117	Sets the node path .
4118	Add params .
4119	Sends a test response mock .
4120	Executes the command .
4121	Injects params from GET and DELETE methods
4122	Finds a Member by its attribute code .
4123	Merge pre - loaded attribute ids recursively .
4124	Pre load attribute id .
4125	Publishes a set of records .
4126	Assert that the response contains the given content .
4127	Decode the JSON response .
4128	Assert JSON structure .
4129	Runs the application .
4130	Get Drupal root directory .
4131	Get the path to the environment file .
4132	Reads an environment file .
4133	Publishes this bundle
4134	Loads the database seeders .
4135	Returns the entity type for the given code .
4136	Returns the ID of the entity type .
4137	Call a method and return the result .
4138	Prepare a URI .
4139	Accepts a distributed trace payload if it is HTTP safe .
4140	Ends a transaction .
4141	Set the application name .
4142	Sets the user attributes .
4143	Start a new transaction .
4144	Converts a URL to a URL .
4145	Prepares the constructor arguments .
4146	Append an exception suffix to the subject .
4147	Wraps an exception in the subject .
4148	Parse a mbstring file .
4149	Loads an attribute group .
4150	Returns an array of available EAV attribute groups for the passed attribute set id .
4151	Finds one attribute group by entity type code attribute set name and attribute group name .
4152	Creates a LexerConfig instance .
4153	Find one by option id and store id
4154	Creates a file resolver for a given subject .
4155	Returns all available core config datas
4156	Returns the requested system logger .
4157	Creates a new plugin instance .
4158	Merges the given attributes into the given entity .
4159	Creates a number converter for a given subject .
4160	Cast value by backend type .
4161	Returns the entity type code .
4162	Returns the attributes for the current entity .
4163	Get EAV User Defined Attributes
4164	Get EAV attribute by attribute code .
4165	Returns an array of categories with a path resolved .
4166	Get categories with resolved path by store view id .
4167	Returns the header with the given name .
4168	Adds a header .
4169	Map attribute code by header mapping .
4170	Tear down the subject s source directory .
4171	Registers an observer .
4172	Register a callback .
4173	Returns all callbacks of a given type .
4174	Imports a row .
4175	Prepare store view code
4176	Get the store ID for the passed store view code .
4177	Returns the root category .
4178	Resolves the original column name .
4179	Returns the original data .
4180	Check if the column has original data .
4181	Wraps the exception with the given column names .
4182	Appends an exception suffix .
4183	Returns a new filename for the given target filename .
4184	Uploads a file to the filesystem
4185	Delete a file from the filesystem
4186	Returns all available EntityTypes
4187	Finds one entity type by its entity type code .
4188	Serializes the configuration .
4189	Unserialize a CSV file .
4190	Returns the target directory .
4191	Create an ExporterConfig instance .
4192	Initializes the value csv serializer
4193	Unserializes the attributes .
4194	Serializes the object .
4195	Get a prepared statement .
4196	Initializes the connection .
4197	Parse additionalAttributes .
4198	Generates a URL for the given entity .
4199	Resolve a reference .
4200	Add a value to the cache .
4201	Get a value from the cache .
4202	Flushes the cache .
4203	Loads an attribute with the given identifier .
4204	Finds all available EAV attribute sets for an entity type id .
4205	Finds one entity type by entity type id and attribute set name
4206	Finds one entity by entity type code and attribute set name .
4207	Creates an export adapter for the given subject configuration
4208	Quotes a string .
4209	Finds all URL rewrites for a given entity type and entity id .
4210	Finds all URL rewrites for a given entity type id and store id
4211	Notify observers .
4212	Checks the consistency of a row
4213	Check if a header has a value .
4214	Creates a new import adapter instance .
4215	Creates a new import serializer .
4216	Finds all available EAV attributes by entity type id and attribute set name .
4217	Find all EAV attributes by option value and store id
4218	Returns all available EAV attributes by isUserDefined .
4219	Finds all available EAV attributes by entity type id and is user defined .
4220	Returns all available EAV attributes for the passed entity type ID .
4221	Find one by option value and store id
4222	Prepares observers for a given subject .
4223	Resolves a directory path .
4224	Creates a directory .
4225	Sets an attribute .
4226	raise a counter
4227	Merge attributes recursively .
4228	Creates a LeagueFilesystemAdapter for the given subject configuration .
4229	Find all categories by store view id
4230	Returns all root categories .
4231	Create a new emitter .
4232	Prepares the listeners for the given emitter .
4233	Removes a directory .
4234	Get the SwiftMailer instance .
4235	Initializes the source directory .
4236	Load files .
4237	Returns an array of SQL statements .
4238	Creates an import adapter for the given subject configuration
4239	Prepares the callbacks for the given subject .
4240	Returns an array of all global data .
4241	Loads a prepared statement .
4242	Creates a date converter for the given subject .
4243	Override artefacts .
4244	Appends an array of artefacts to the collection .
4245	Returns an array of artefacts by type and entity ID .
4246	Creates a new artefact .
4247	Exports the artifacts .
4248	Returns a list of all available link types .
4249	Returns all image types .
4250	Converts a date to the supplied format .
4251	Converts a number from one locale to another .
4252	Creates and executes a subject .
4253	Returns a list of all pattern keys .
4254	Resolves the pattern values .
4255	Resolve a pattern value .
4256	Prepares the pattern .
4257	Prepares the correct filename for the given parts .
4258	Check if two filenames are equal .
4259	Returns an array of ok filenames .
4260	Checks if a filename should be handled .
4261	Cleans up an OK file .
4262	Returns all available tax classes .
4263	Warms the cache for all eav attribute options .
4264	Returns all available storeWebsites .
4265	Finds all stores .
4266	Find all entities by entity ids .
4267	Finds an entity by its entity id .
4268	Finds all customer groups .
4269	Returns the name of the primary key of the Magento edition .
4270	Cleans up empty columns .
4271	Creates a new Blade instance .
4272	Register the REST routes .
4273	Returns the collection parameters .
4274	Sanitize the end date .
4275	Returns a list of events .
4276	Maps module s event data to a template controller .
4277	Defines the category translations .
4278	Before save callback .
4279	After save callback .
4280	Saves the location .
4281	Save additional locations .
4282	Saves the post categories .
4283	Saves the event groups .
4284	Saves the post tags .
4285	Saves the completed occasions .
4286	Saves the post language .
4287	Get event by original id
4288	Check if a filter is set .
4289	Remove expired occasions
4290	Remove Deleted Events
4291	Remove expired events .
4292	Filter event taxonomies .
4293	Delete empty taxonomies .
4294	Renders the location list .
4295	Save a location .
4296	Get the rev manifest .
4297	Removes meta boxes .
4298	Outputs meta data .
4299	Implode a multi - dimensional array .
4300	Register the post type
4301	Adds a table column .
4302	Get the table columns .
4303	Returns the table s sortable columns .
4304	Call the table columns content callback .
4305	Save a term in a taxonomy
4306	Activate a new group .
4307	Remove an empty value from the meta array .
4308	Returns empty values .
4309	Remove empty meta data .
4310	Saves the object to the database
4311	Check if an attachment exists .
4312	Renders the submit form .
4313	Add event date args to permalinks .
4314	Filter events by where clause .
4315	Returns a formatted date for a single event .
4316	Returns the date of the next event .
4317	Returns the closest item in an array .
4318	Converts a start date to an array of date parts
4319	Saves the points for the draw .
4320	Enqueue the Admin .
4321	Enqueue front .
4322	Formats a start date as a short date
4323	Import cron events .
4324	Import publishing groups .
4325	Check if a table exists in the database .
4326	Creates a database table .
4327	Check if an event exists .
4328	Make a request to the WordPress API .
4329	Get a list of events for a post .
4330	Get event meta for a given post .
4331	Returns a string with a limit .
4332	Get locations near a given latitude and longitude .
4333	Update an instance .
4334	Ajax pagination .
4335	Get all events for a module .
4336	Get module categories .
4337	Get event categories filterable by module id .
4338	Returns module groups .
4339	Returns event tags for a module .
4340	Returns the age range filter for a module .
4341	Callback for oauth - request
4342	Sanitize the input array .
4343	Returns data for a single view .
4344	Get the publishing groups for a post .
4345	Update a group value .
4346	Get the event content .
4347	Get a content lead .
4348	Get custom content .
4349	Register event categories .
4350	Register event tags .
4351	Register taxonomy event groups
4352	Add import buttons .
4353	Import events .
4354	Accept or deny a post .
4355	Create the tunnel .
4356	Verify the tunnel .
4357	Run a command .
4358	Sets a signal handler .
4359	Handle a signal .
4360	Run a process .
4361	Edits a container .
4362	Create a new DcGeneral environment .
4363	Returns a widget for a property .
4364	Render a widget .
4365	Processes a value bag .
4366	Processes a property .
4367	Takes a PropertyValueBag and turns it into a POST object .
4368	Handle an action event .
4369	Creates a new Imagine instance .
4370	Configure Imagick settings .
4371	Inject settings into Neos . Imagine . EnabledDrivers
4372	Handle the build widget event .
4373	Returns the widget class name for the given property .
4374	Get the options for a widget .
4375	Executes the form submission .
4376	Enforce the model relationship .
4377	Processes the form input .
4378	Handle the pre persist event .
4379	Handle the post persist event .
4380	Translates a label .
4381	Builds the field set .
4382	Handle the submit button .
4383	Get the Headline .
4384	Do persist .
4385	Configure CAS .
4386	Parse the CAS configuration .
4387	Configure the CAS server validation .
4388	Get a CAS attribute .
4389	Check if an attribute exists .
4390	Logout a user from CAS .
4391	Sets the status code .
4392	Returns the key of a model or null .
4393	Checks if the current value is an integer .
4394	Get fragments from url
4395	Creates a C4GContainer from an array
4396	Builds the query for the current page .
4397	Wraps the original query with a row counter .
4398	Get the fake model query .
4399	Generates an activation link from a key .
4400	Assign a user to an activation key
4401	Check if the given key is valid .
4402	Read paging info .
4403	Registers the templates .
4404	Register custom handlers .
4405	Handle an authorization error .
4406	Handle a custom validation exception .
4407	Handle a model not found exception .
4408	Pop a row from the top of the table .
4409	Get Bower components .
4410	Attach event handlers .
4411	Make a request to the API .
4412	Check if package is available .
4413	Sync all packages to database .
4414	Update expired packages .
4415	Creates a new client instance .
4416	Generates a URL from a configuration array .
4417	Get the port .
4418	Validates the entity managers configuration .
4419	Terminate a process .
4420	Locks a theme .
4421	Unlocks a theme .
4422	Clone a book .
4423	Builds the value of a parameter .
4424	Builds the filter widgets for a parameter
4425	Returns the sorted tables .
4426	Check if database is configured .
4427	Configure the database .
4428	Get all migrations .
4429	Run the migrations .
4430	Rollback migrations .
4431	Resolve migration state .
4432	Get migration table .
4433	Renders a list of values .
4434	Mount indents .
4435	Sets the primary keys of the table .
4436	Creates a new table
4437	Updates the table .
4438	Drops the table .
4439	Renames the table .
4440	Executes the blueprint .
4441	Get migration files .
4442	Creates a filename for a chunk .
4443	Bootstrap the application .
4444	Load the Laravel application .
4445	Loads the initializer .
4446	Loads the Laravel argument resolver .
4447	Apply the mailtrap configuration .
4448	Fetches the contents of an inbox .
4449	Request the Mailtrap API client .
4450	Reboot the Laravel kernel .
4451	Resolves class arguments .
4452	Opens a stream .
4453	Get stream stats for a given path .
4454	Get stream stats .
4455	Check if a file exists .
4456	Returns the filename of a stream .
4457	Releases a file .
4458	Handle a command .
4459	Checks if the empty node expansion worked .
4460	Expose a class to the user .
4461	Handle an XRL request
4462	Calls a procedure and returns the result .
4463	Render the checkbox input .
4464	Enable a server .
4465	Extracts the types from the doc .
4466	Returns a list of all available methods .
4467	Returns the signature for a method .
4468	Get the help for a method .
4469	Performs a multi - call .
4470	Loads a class .
4471	Returns the phar version .
4472	Print usage . txt
4473	Parse a bool value
4474	Parse the content of a file
4475	Parses an array of parameters into a DateTime object .
4476	Run the XRL command .
4477	Returns a Closure that has been resolved .
4478	Get the XML writer .
4479	Finalizes the XML writer .
4480	Get the XML reader .
4481	Reads a node .
4482	Expects an opening tag .
4483	Expects a closing tag .
4484	Parse a text node .
4485	Checks if the given value is of the given type .
4486	Creates a checkbox field .
4487	Creates an email field .
4488	Creates a select field .
4489	Registers the sections .
4490	Register the settings section .
4491	Register the fields for a section .
4492	Register the settings for a section .
4493	Displays the captcha .
4494	Returns the javascript code for the CAPTCHA link .
4495	Render multiple captcha javascript .
4496	Builds the captcha html .
4497	Upload an asset to Moovly .
4498	Get a project .
4499	Get a list of projects
4500	Create a template for a project .
4501	Get a template by ID .
4502	Returns an array of templates .
4503	Create a new job .
4504	Get a job by ID .
4505	Get jobs by template .
4506	Get the current user .
4507	Gets the personal library for the current user .
4508	Merges the post and pre values .
4509	Returns the LDAP user for the given attribute .
4510	Sets the LDAP config definition .
4511	Check ldap error code .
4512	Sets the allowed types for the given resolver .
4513	Set LDAP credentials if needed .
4514	Switch the domain if needed .
4515	Switch the domain back if needed .
4516	Hide or throw an exception .
4517	Get username and password token from request .
4518	Add domain to token if present .
4519	Transform value for DB .
4520	Get the LDAP object annotation properties .
4521	Set the LDAP object for the given property .
4522	Sets the LDAP value for a property .
4523	Builds the security extension .
4524	Get the LDAP values for the given choices .
4525	Get objects by LDAP query .
4526	Returns all operations for the given domain .
4527	Sets the roles for the given user .
4528	Check if LDAP has a group for a set of roles .
4529	Check if a group has a given attribute value .
4530	Logs the given log operation .
4531	Save media to a file .
4532	Update media by id
4533	Get media by group .
4534	Remove a media .
4535	Parse the options .
4536	Get the filename .
4537	Rename the file if it exists .
4538	Renames the file .
4539	Get the alt .
4540	Get the title .
4541	Returns the name of the option .
4542	Get the media weight .
4543	Save media to database .
4544	Remove existing media .
4545	Moves the storage to the new location .
4546	Clone the storage file .
4547	Make a directory .
4548	Clone a media .
4549	Boot the pricing config .
4550	Register the svg factory .
4551	Compile directives .
4552	Get the blades config .
4553	Create a svg .
4554	Transmit an item variable .
4555	Transforms a QtiFile to a string .
4556	Adds a variable to the output .
4557	Checks if a variable is a QTI file placeholder .
4558	Checks if a variable is a QTI file .
4559	Converts a string to a QTI datatype .
4560	Creates a revisionable object from an object .
4561	Calculates the difference between two arrays .
4562	Sets the user s IP address .
4563	Sets the language .
4564	Set the origin .
4565	Resolve the origin of the request .
4566	Sets the timestamp value .
4567	Pre save callback .
4568	Processes the object schedule .
4569	Sets the creation and last modification dates .
4570	Check if slug is unique .
4571	Generate a unique slug
4572	Set slug .
4573	Sets the creation date .
4574	Sets the last modification date .
4575	Set route options .
4576	Sets the master object .
4577	Returns a list of children .
4578	Returns the siblings of this node .
4579	Load an object from the source .
4580	Load an object from the cache .
4581	Add an object to the cache .
4582	Returns the category items .
4583	Returns the slug pattern .
4584	Get the slug prefix .
4585	Get slug suffix .
4586	Returns true if the slug is editable
4587	Set slug .
4588	Generates the slug .
4589	Generates a route pattern .
4590	Filter a route token .
4591	Generate an object route .
4592	Get the url for the current object .
4593	Slugify a string .
4594	Finalizes the slug .
4595	Delete object routes .
4596	Creates a collection loader for the route object .
4597	Get all revisions .
4598	Sets the publication date .
4599	Set the expiry date .
4600	Sets the publish status .
4601	Returns the publish date status .
4602	Displays the admin help page
4603	Rewrite routes .
4604	Resets the object .
4605	Returns the next item .
4606	Displays the logs page
4607	Displays the logs page .
4608	Loads the logs page
4609	Browse events .
4610	Returns an array of permissions
4611	Returns a list of items .
4612	Deletes an item from the database
4613	Restores the database .
4614	Sorts the models .
4615	Checks if a localised item can be deleted
4616	Get configuration title as single .
4617	Returns the index dropdown filters .
4618	Get the post object .
4619	Returns a single item .
4620	Redirect to the index page .
4621	Adds an option to the filter
4622	Adds an array of options to the query
4623	Returns an option by index .
4624	Handle method call
4625	Set the status of a batch
4626	Set the batch download id
4627	Lists all the admin controllers
4628	Load admin controllers .
4629	Load Admin Controllers .
4630	Load Admin Controller
4631	Loads an admin class .
4632	Route the request .
4633	Loads a view file
4634	Loads a CSV file
4635	Loads an inline view
4636	Load search data
4637	Returns the value of a filter at the given key .
4638	Load pagination data
4639	Loads a cell .
4640	Loads a user cell
4641	Loads a date cell .
4642	Load a datetime cell .
4643	Load a boolean cell
4644	Loads the settings component table .
4645	Adds a new header button .
4646	Creates a dynamic table .
4647	Post save action .
4648	Executes the export .
4649	Create the data export source .
4650	Formats a row .
4651	Add a new action .
4652	Set admin data .
4653	Unset admin data .
4654	Set unset admin data .
4655	Clear admin data .
4656	Get all log files .
4657	Find a config file .
4658	Load Nails JS components .
4659	Loads the css .
4660	Loads assets .
4661	Loads the modules .
4662	Returns the backwards compatibility of a binding .
4663	Sets the site settings .
4664	Prepares a whitelist .
4665	Extracts the fieldsets for a given component .
4666	Get a source by it s slug
4667	Get a format by it s slug
4668	Exports a source .
4669	Execution failed .
4670	Adds a new article
4671	Saves the model to the database
4672	Returns all user data .
4673	Returns count of common user data
4674	Formats an object .
4675	Returns a remap for a method
4676	Validate user input
4677	Get model class and item id .
4678	Format an object .
4679	Sets the current date .
4680	Adds a daily html .
4681	Set the start of a week .
4682	Prints a string .
4683	Submit a team bonus .
4684	Assign a task to a team .
4685	Assign a contract to an engagement .
4686	Get a report by a freelancer
4687	Get a report by freelancer team .
4688	Get a report by a provider company .
4689	Get the earnings for a buyer team .
4690	Get a report by buyer company .
4691	Get a list of engagements .
4692	Get a specific engagement .
4693	Get the full url for a given url .
4694	Get a list of available contractors
4695	Executes an action on a contract .
4696	Get a specific financial account .
4697	Get all user roles .
4698	Get the roles for a specific user .
4699	Invite a job candidate .
4700	Get a record by an agency .
4701	Get data by company .
4702	Get the list of users in a team
4703	Get a list of jobs .
4704	Get a specific job .
4705	Post a job .
4706	Edit a job .
4707	Delete a job .
4708	Get user info .
4709	Get a specific user .
4710	Get tasks by type .
4711	Get room details
4712	Get a room by offer
4713	Get a room by application id
4714	Get a room by contract id
4715	Create a new room for a company
4716	Send a message to a room
4717	Update room settings
4718	Updates a room metadata .
4719	Get a snapshot by contract id .
4720	Update a snapshot by contract .
4721	Delete a snapshot by contract .
4722	Get an active milestone .
4723	Get all submissions for a milestone
4724	Create a milestone .
4725	Edit a milestone
4726	Delete a milestone .
4727	Make a request to the UPWORK API
4728	Bootstrap the plugin .
4729	Get the content body .
4730	Get account kit data .
4731	Display a list of contacts .
4732	Show a contact .
4733	Display a form to create a new contact .
4734	Show the form for editing a contact .
4735	Update a contact .
4736	Delete a contact .
4737	Displays a contact gadget .
4738	Get a single contact .
4739	Check if the given user can view the contact .
4740	Check if a user can update a contact .
4741	Delete a contact .
4742	Display a list of contacts .
4743	Parse the HTML of a link .
4744	Returns all parsed previews .
4745	Get a preview of a parser .
4746	Adds a new parser .
4747	Removes a parser .
4748	Add the default parsers .
4749	Converts a hexadecimal color to a human readable color .
4750	Encloses a path .
4751	Converts an interval to a human readable format .
4752	Downloads and caches a file
4753	Returns a string representation of the current time .
4754	Returns an array of timezone options .
4755	Get the model relation .
4756	Add a model to a query .
4757	Get the client information .
4758	Convert a string to a number .
4759	Looks up a value in a query .
4760	Set the available_at attribute .
4761	Get payload attribute .
4762	Converts a number of bytes to a human readable format .
4763	Calculate the offset of the time .
4764	Returns a time in seconds .
4765	Truncates a string .
4766	Add a permission to a topic
4767	Confirm a subscription
4768	Creates a new topic
4769	Get Topic Attributes
4770	Returns a list of subscriptions
4771	List subscriptions to a topic
4772	List topics .
4773	Publish a message to a topic
4774	Removes a permission from a topic
4775	Sets a Topic Attributes
4776	Subscribe to a topic
4777	Creates a new platform endpoint
4778	Publish a message to an endpoint
4779	Make a request to the AWS API
4780	Process XML to array
4781	Clear all tasks .
4782	Converts the given priority to a human readable value .
4783	Runs the task .
4784	Customize settings tabs .
4785	Get a team invitation .
4786	Create default settings tabs .
4787	Creates a Coupon object from a Stripe Coupon object .
4788	Get a Stripe Coupon
4789	Retrieve a coupon for a user .
4790	Get a team .
4791	Get the team roles .
4792	Update the user s profile .
4793	Validates a user profile .
4794	Update the Stripe email address .
4795	Install javascript .
4796	Install the environment variables .
4797	Subscribe to a Stripe plan .
4798	Change subscription plan .
4799	Update a user s card
4800	Update extra billing info .
4801	Cancel subscription .
4802	Resume the current user s subscription .
4803	Downloads an invoice .
4804	Set or get price .
4805	Set or get currency symbol
4806	Set or get the trialDays attribute
4807	Set or get the tier .
4808	Set or get the features .
4809	Get the current user .
4810	Create a new user from a registration request .
4811	Create a new user .
4812	Create a default user .
4813	Create a subscription on Stripe .
4814	Register a user with TwoFactor .
4815	Check if a token is valid .
4816	Delete a protected user .
4817	Show the dashboard .
4818	Invite a user by email .
4819	Removes a user from the team by ID .
4820	Invite a user to a team .
4821	Accepts a team invitation .
4822	Create a new Tab instance .
4823	Return a list of tabs that are displayable .
4824	Defines the resources .
4825	Define the services .
4826	Notify a user about an invoice .
4827	Handle successful invoice payment .
4828	Create a new team .
4829	Get all teams for a user .
4830	Get pending invitations for a user .
4831	Attach user to team by invitation .
4832	Find a plan by id .
4833	Get a single plan by its tier .
4834	Get the current team .
4835	Check if the current user owns the given team .
4836	Get the role of a team .
4837	Store a new team .
4838	Show team settings .
4839	Update a team .
4840	Switch to the current team .
4841	Update a team member .
4842	Remove a team member .
4843	Leave a team .
4844	Destroy a team .
4845	Call a custom validator .
4846	Call a custom updater .
4847	Update the user s password .
4848	Enable Two - factor authentication .
4849	Validate enabling two factor authentication .
4850	Disable Two - factor authentication .
4851	Logout and redirect to token screen .
4852	Logout the user and redirect to the token screen .
4853	Create a new token .
4854	Returns the registration form .
4855	Validates registration .
4856	Validate the default registration .
4857	Validate the provided coupon code .
4858	Logs the user out .
4859	Translates a flash message .
4860	Creates a new event .
4861	Registers a new exception .
4862	Exports the given exception .
4863	Imports an exception .
4864	Normalizes an event .
4865	Get a wrapper for a WordPress handler .
4866	Creates a cached event .
4867	Check if an event has been cached .
4868	Returns a cached event .
4869	Removes an event from the event cache
4870	Creates a wrapper for a WP handler .
4871	Exports an exception .
4872	Imports a PHP exception .
4873	Removes a WP hook .
4874	Replace an existing WP hook .
4875	Get the number of items in the stack .
4876	Clears the ref bag .
4877	Sends a message to the pool .
4878	Derefs a task .
4879	Bootstrap the application .
4880	Filter an array using a callback function .
4881	Maps a multi - dimensional array to a flat representation .
4882	Maps an array to a callable function .
4883	Parallelizes a function to a pool .
4884	Convert a result array to a multi - reason exception .
4885	Sets the number of arguments .
4886	Run a plugin hook .
4887	Applies filters to a value .
4888	Adds a WP hook .
4889	Wrap a function result .
4890	Resumes the current stream .
4891	Stops the stream .
4892	Destroys the connection .
4893	Get worker socket .
4894	Remove worker socket
4895	Prepare worker .
4896	Attach a method handler to an event .
4897	Hash a callable .
4898	Writes the given data to the output buffer .
4899	Creates a writable stream .
4900	Read data from the socket .
4901	Handle a write request .
4902	Checks for socket errors .
4903	Removes the read listener .
4904	Removes the listener from the write stream .
4905	Decodes a phoebe message .
4906	Attaches a timer to the messenger .
4907	Cancels the timer .
4908	Submits a threaded work .
4909	Submit a work to a worker
4910	Submits an async task .
4911	Submit a task to a worker .
4912	Stops a worker .
4913	Remove worker .
4914	Send a message to a worker .
4915	Sends a message to all workers .
4916	Starts a timer for each worker .
4917	Internal timer tick
4918	Spawning worker .
4919	Check if worker is alive .
4920	Check worker shutdown .
4921	Handle a message .
4922	Closes a worker .
4923	Reads 4 bytes from the stream .
4924	Read a UUID from the stream .
4925	Reads a list definition .
4926	Read a map definition .
4927	Read a varint value .
4928	Reads a decimal value .
4929	Register the BulkSMS service .
4930	Bootstrap the application .
4931	Sends a message to a recipient .
4932	Validate a BulkSMS API response
4933	Sends multiple bulk SMS messages .
4934	Get the status for a given bulk SMS ID .
4935	Sends the bulk SMS .
4936	Generates a CSV string of all messages .
4937	Sends the bulk sms message .
4938	Sets the message .
4939	Calculates the concatenation limit .
4940	Parse a number .
4941	Send a batch .
4942	Find objects by a set of filters
4943	Returns the number of dynamic records matching the given filters .
4944	Adds filters to the query builder .
4945	Add the search filter to the query builder .
4946	Adds a date range filter to the query .
4947	Returns the value of a field .
4948	Returns the form fields .
4949	Build a config object by dynamic .
4950	Builds the AdminMailConfiguration by type and form data .
4951	Builds the admin mail configuration from a Dynamic object .
4952	Builds the website mail configuration by dynamic .
4953	Get file fields by dynamic .
4954	Get collection id by dynamic .
4955	Get email from dynamic .
4956	Get the email address .
4957	Builds the form for the given id type and locale .
4958	Creates a form .
4959	Loads a form entity .
4960	Get default values for all fields .
4961	Get webspace key .
4962	Check if the given checksum is valid .
4963	Get a checksum .
4964	Returns a list of form entries .
4965	Returns a list of fields .
4966	Deletes an attachment .
4967	Returns an array of filters .
4968	Load form by id .
4969	Convert a value to a string .
4970	Get the media urls for the given value .
4971	Get the download url .
4972	Get the list of choices .
4973	Get the choice options .
4974	Get form by id type and locale .
4975	Handle the kernel . request event .
4976	Returns the form translation for the given locale .
4977	Returns the field with the given key .
4978	Get all fields that are not in an array .
4979	Serializes the model for a given locale .
4980	Displays a form .
4981	Handles a single form submission .
4982	Handle the form submit .
4983	Handle form only submit .
4984	Displays a form with a hidden token .
4985	Returns an array of form errors .
4986	Handle a form .
4987	Saves the form .
4988	Upload media to the form .
4989	Maps media ids to entity .
4990	Get media data .
4991	Get MailChimp lists .
4992	Returns a builder .
4993	Returns the block prefix .
4994	Creates a new collection .
4995	Loads a collection id .
4996	Returns the item width number .
4997	Returns the width of the last item .
4998	Throws a new PDOException .
4999	Set hostname .
5000	Sets the unix socket .
5001	Sets the cache memory .
5002	Sets the file path .
5003	Sets the database name .
5004	Set charset .
5005	Ensure that the PDO instance is connected to the database .
5006	Configure the PDO connection .
5007	Executes a SELECT query and returns the result .
5008	Get a list of queues for this project .
5009	Get a queue .
5010	Send a message to an IronMQ queue
5011	Post messages to a queue .
5012	Get a single message by id .
5013	Touch a message in a queue
5014	Release a message from a queue
5015	Add alerts to a queue .
5016	Delete an alert by id
5017	Delete a queue
5018	Update a queue .
5019	Create a new queue .
5020	Replace subscribers in a queue .
5021	Remove subscribers from a queue
5022	Outputs a JSON string .
5023	Generates and outputs XML .
5024	Generate XML .
5025	Outputs a CSV file .
5026	Flattens an array .
5027	Executes the active cache client .
5028	Format server statistics .
5029	Formats a usage as MB .
5030	Formats the uptime .
5031	Add a server to the memcache
5032	Adds multiple servers .
5033	Proxies the connection to a server .
5034	Returns the value for the given key .
5035	Sets a value in the cache .
5036	Delete a key from the cache .
5037	Sets the cache client .
5038	Returns the value for the given key .
5039	Delete a key from the cache .
5040	Creates an exception for an invalid argument .
5041	Populate the builder with the given data .
5042	Get or set the options for this map .
5043	Get or set the notification .
5044	Set or get the payload data .
5045	Encode CDATA .
5046	Returns the url for a non - authentication action .
5047	Returns the authentication url for the given action .
5048	Builds an advanced authentication URL for the given action .
5049	Generates a simple authentication url .
5050	Returns the HTTP authentication URL for the given action .
5051	Ensure the channel parameter is set .
5052	Sets the product ID .
5053	Get similar attributes .
5054	Get similar records .
5055	Writes a string to the file .
5056	Autoloads a class .
5057	Sets the target property .
5058	Trigger data import .
5059	Triggers the import suggestion .
5060	Applies mapping rules to parameters .
5061	Ensure the channel parameter is set .
5062	Add the required parameters to the request .
5063	Adds an appender to the pool .
5064	Get an appender by name .
5065	Logs a message with a trace level .
5066	Logs a debug message .
5067	Logs a warning message .
5068	Logs a message at a given level .
5069	Log a LoggerLoggingEvent .
5070	Logs a forced event .
5071	Removes an appender .
5072	Get the effective level of the logger .
5073	Get LoggerHierarchy .
5074	Returns a logger instance .
5075	Resets the configuration hierarchy .
5076	Configures the application .
5077	Get a logger configurator .
5078	Sets the record count .
5079	Add product IDs .
5080	Returns the list of recommendations .
5081	Track a single click .
5082	Track a cart .
5083	Tracks a checkout .
5084	Tracks a single recommendation click .
5085	Tracks a user s login
5086	Sets the product IDs .
5087	Get comparable attributes .
5088	Get the comparedRecords .
5089	Converts a string to a string .
5090	Set a boolean value .
5091	Sets the level of a property .
5092	Sets the file size property .
5093	Sets the value of a property as a number .
5094	Set a string value for a property .
5095	Returns the location information .
5096	Returns the start time .
5097	Returns the log time in seconds .
5098	Returns the current request instance .
5099	Returns the tag cloud .
5100	Sets the word count .
5101	Adds feedback to the form .
5102	Set productNumber .
5103	Add productNumbers .
5104	Sets the page id .
5105	Make a new product campaign .
5106	Make a shopping cart campaign
5107	Get the list of campaigns .
5108	Get raw product campaigns
5109	Add a converter to the chain .
5110	Get a converter for a given word .
5111	Parse the modifiers .
5112	Sets the logger level .
5113	Adds a renderer to the map .
5114	Sets the default renderer .
5115	Get an object by its class name .
5116	Returns an array of whitelist server parameters .
5117	Loads configuration from INI file .
5118	Converts a path to a log file .
5119	Parse a logger value .
5120	Parse an appender .
5121	Parse the renderer .
5122	Appends an event to the syslog .
5123	Parse syslog option .
5124	Parse syslog facility .
5125	Parse syslog priority .
5126	Appends an event to the collection .
5127	Format an exception throwable .
5128	Closes the collection .
5129	Configure the LoggerHierarchy .
5130	Create an appender layout .
5131	Set idsOnly .
5132	Returns the value of the follow search field .
5133	Adds a filter to the end of the list .
5134	Sets the response .
5135	Set the session id .
5136	Returns true if this logger level is equal to another .
5137	Returns the OFF level of the logger .
5138	Returns the log level that is fatal .
5139	Returns the log level error .
5140	Returns a logger level warning .
5141	Returns the LoggerLevel INFO object .
5142	Returns the log level for debugging .
5143	Returns the log level trace .
5144	Returns a LoggerLevel containing all log levels .
5145	Converts an argument to a level .
5146	Get a system property .
5147	Converts a value to a logger level .
5148	Converts a value to string .
5149	Substitute constants in a string
5150	Get a logger by name .
5151	Returns the request target .
5152	Activates the logger s options .
5153	Formats the logging event to a string .
5154	Adds a filter to the list .
5155	Returns true if the given level is as severe as the threshold .
5156	Trigger a warning .
5157	Gets the list of suggestions .
5158	Returns the class name of a factfinder .
5159	Rolls over the backup to the next backup .
5160	Activates the plugin s options .
5161	Appends a LoggerLoggingEvent .
5162	Returns the formatted params .
5163	Generates a URL based on the given parameters .
5164	Returns the feedback for the given label .
5165	Get pushed products .
5166	Returns an array of all active questions .
5167	Get advisor tree .
5168	Activates date and time options .
5169	Appends a LoggerLoggingEvent .
5170	Find a permission by ID .
5171	Find a permission by its value .
5172	Renders a menu item
5173	Setup the layout .
5174	Returns the user index .
5175	Create a new user
5176	Create a new user
5177	Attempts to activate a user .
5178	Returns a list of user s permissions .
5179	Returns a paginated list of groups .
5180	Show a group .
5181	Deletes a user from a group
5182	Adds a user to a group
5183	Validates a group
5184	Load the include files .
5185	Register breadcrumbs helpers .
5186	Get the index page .
5187	Logs a user in .
5188	Returns a list of all permissions
5189	Create a new permission
5190	Delete a permission
5191	Paginates the pdf .
5192	Authenticates a user with the given credentials .
5193	Generate a nonce .
5194	Check if a flag is set .
5195	Returns a rule by flag .
5196	Check if a parameter is required .
5197	Check if a flag is required .
5198	Check if a flag is optional .
5199	Parse an array of options into a program name
5200	Check if a string is a parameter .
5201	Order parameters .
5202	Authenticate the user .
5203	Get the report API .
5204	Get the permissions API
5205	Get the company API .
5206	Get the OAuth API .
5207	Make a request to the API .
5208	Get all elements of a report suite
5209	Get metrics for a report suite
5210	Retry a report if it s not ready .
5211	Get the number of seconds it takes to sleep .
5212	Parse the options .
5213	Execute a GET request .
5214	Returns a list of images .
5215	Returns a list of videos .
5216	Converts a string to stdout
5217	Get a table definition .
5218	Returns the definition for a drop table .
5219	Returns the drop table data .
5220	Get a single key from a table .
5221	Returns the definition for dropping a primary key .
5222	Returns the foreign key of a table .
5223	Returns the definition for dropping foreign keys .
5224	Returns the columns definition .
5225	Returns the primary key of a table .
5226	Gets a table comment .
5227	Returns the schema type for a given column .
5228	Defines the other part of a column schema .
5229	Returns a list of table names .
5230	Generate migration file .
5231	Creates a new table
5232	Drops a table .
5233	Generates a template file .
5234	Returns the value of a function in a table .
5235	Returns the parameters for a given function .
5236	Start printing a string
5237	Ends a printf .
5238	Generates a conclusion for a dump .
5239	Fetches the webservices url .
5240	Populate the response .
5241	Set webservices url .
5242	Returns a list of groups .
5243	Get a group by its DN .
5244	Get a list of users .
5245	Gets a user by his GUID .
5246	Get a user by DN .
5247	Get a user by email .
5248	Get a user by username .
5249	Gets the user s username by email .
5250	Get the members of an LDAP group .
5251	Update group from LDAP .
5252	Create a new LDAP user for a member
5253	Create a new LDAP group
5254	Update LDAP from a Member .
5255	Update LDAP groups for a member .
5256	Sets the password of a member .
5257	Deletes an LDAP user .
5258	Updates a record in the database .
5259	Connects to the TCP server .
5260	Disconnects from the server .
5261	Reads a string from the socket .
5262	Send a string to the socket .
5263	Encode a string .
5264	Decodes a string .
5265	Reads a response from the server .
5266	Authenticates the user with the given auth key
5267	Check if the response time is consistent with the password time .
5268	Creates a user in LDAP if necessary .
5269	Writes to the database without synchronization .
5270	Get message from session .
5271	Returns the lost password form .
5272	Send password reset link
5273	Performs a ldap search .
5274	Returns a group by GUID .
5275	Change a user s password .
5276	Resets a user s password .
5277	Moves a record from one DN to another .
5278	Authenticate a user .
5279	Authenticate using the fallback LDAP authentication class .
5280	Authenticates user with SAML .
5281	Returns the SP metadata .
5282	Converts hexadecimal color to little endian .
5283	Executes a select query and returns the result as an array
5284	Performs a SELECT query .
5285	Splits a hash into its parts .
5286	Create a database instance .
5287	Returns a table definition .
5288	Returns all tables .
5289	Fixes indexes in a table .
5290	Compares two arrays .
5291	Get one row from a table .
5292	Build the index name for a table .
5293	Encodes a string according to a specification .
5294	Generates a random key .
5295	Returns a list of supported ciphers .
5296	Hash a string using HMAC .
5297	Verify the HMAC signature .
5298	Verify the timestamp .
5299	Pop a string from the end of a string .
5300	Push an item onto the end of a string
5301	Twig a string to a specific index .
5302	Returns the error message .
5303	Adds an error to the response .
5304	Get or set the main message .
5305	Get or set the status .
5306	Returns the error message .
5307	Returns all errors as a flat array .
5308	Checks if a field is valid
5309	Parse a schema .
5310	Require one of the given fieldnames .
5311	Validates data against the schema .
5312	Validates a field .
5313	Validate an array .
5314	Validates a base64 encoded value .
5315	Validate a boolean value
5316	Validate a datetime field .
5317	Validates a float value .
5318	Validates a value as an integer .
5319	Validates an object .
5320	Validate a required field .
5321	Validate a string .
5322	Validates a timestamp .
5323	Get all add - ons .
5324	Bootstrap the autoloader .
5325	Get a value from the cache .
5326	Returns the class map for the given classname .
5327	Returns the list of enabled addons .
5328	Get information about an addon .
5329	Scan add - ons recursively
5330	Scan add - on directory
5331	Scan addons recursively .
5332	Start an addon
5333	Returns the headers of the response .
5334	Calls a user function in an array .
5335	Bind a callback to an event .
5336	Binds a class to an event .
5337	Dumps event handlers .
5338	Fire event handlers .
5339	Fire an event with an array of callbacks .
5340	Fire a filter on the given event .
5341	Checks if a function exists .
5342	Get the event name from the callback .
5343	Returns the handlers with the given name .
5344	Check if an event handler exists .
5345	Check if a method exists in an object .
5346	Get the value of a driver .
5347	Set the value of the driver .
5348	Splits a hash into a salt and a value
5349	Get or set the default path .
5350	Get a value from an array .
5351	Load a configuration file .
5352	Save a config .
5353	Returns an array of routes that match the given request .
5354	Add a new route .
5355	Finalizes the response .
5356	Check if an action exists .
5357	Get the allowed methods for the given object and action .
5358	Returns true if the request matches the controller .
5359	Check if a condition fails .
5360	Returns the current Response instance .
5361	Creates a response object from a result .
5362	Get or set the Content - Type header .
5363	Get or set the content asset .
5364	Parse the Content - Type header from the Accept header .
5365	Returns a HTTP status message .
5366	Sets a cookie .
5367	Get a list of global cookies .
5368	Set or get the meta .
5369	Set or get the data .
5370	Add a header to the message .
5371	Returns the global headers .
5372	Normalize a header name .
5373	Flushes all headers .
5374	Attempts to alter a table .
5375	Renames a table .
5376	Drops an index .
5377	Creates an index for a table .
5378	Force the type of a value .
5379	Get the PK value of a row .
5380	Returns an array of table names .
5381	Create a new route instance .
5382	Set or get the conditions .
5383	Set or get the methods .
5384	Get or set mappings .
5385	Get or set global mappings .
5386	Check if a name is mapped .
5387	Get mapped data .
5388	Returns true if the request matches one of the requested methods .
5389	Set or get the pattern .
5390	Dispatch a callback .
5391	Returns a regular expression for a pattern .
5392	Executes a query against the database .
5393	Builds a select statement .
5394	Returns a list of columns in brackets .
5395	Builds an insert statement .
5396	Build an upsert statement .
5397	Returns a string representation of a column definition .
5398	Returns a string representation of an index definition .
5399	Get the order of columns .
5400	Get the formats from the database .
5401	Translate a row to the given format .
5402	Verify a password against a hash .
5403	Encode a 64 - bit password .
5404	Get or set the current request .
5405	Get or set the default environment .
5406	Get or set the global environment .
5407	Parse the server variables .
5408	Override the environment variables .
5409	Get the env value .
5410	Set an environment variable .
5411	Returns the HTTP headers .
5412	Get the host and port .
5413	Set the extension .
5414	Set the path extension .
5415	Set the full path .
5416	Sets the server port .
5417	Get a query parameter .
5418	Set a QUERY variable in the environment .
5419	Get an input from the environment .
5420	Get a value from the input or query .
5421	Set data to the query .
5422	Returns the URL for the request .
5423	Set the url .
5424	Makes a URL from a path .
5425	Splits a path into an ext and a path .
5426	Resets the object to its original state .
5427	Defines a column .
5428	Get the column definition .
5429	Add a primary key column .
5430	Execute the query .
5431	Get or set the table name .
5432	Returns an index for a given type .
5433	Returns a list of robots .
5434	Get all paging results .
5435	Find a resource .
5436	Validates a resource .
5437	Returns the value of an attribute .
5438	Sets the attribute values .
5439	Checks if an API method is supported
5440	Check required attributes .
5441	Check the judo id .
5442	Returns a summary of the response .
5443	Get a model .
5444	Returns the summary of the error .
5445	Get a resource .
5446	Make a POST request to the API .
5447	It coerces the attributes into the correct data type .
5448	Validates the object against the required attributes
5449	Checks if a key exists in an array .
5450	Renders the notifications .
5451	Add a new notification
5452	Create a new delivery .
5453	Converts a job to an array .
5454	Convert a JSON string to a Job object .
5455	Frees the poll .
5456	Free the datagram .
5457	Create a new dashboard chart
5458	Handle an item request .
5459	Sort a list of items .
5460	Returns a link to this item
5461	Displays the detail form
5462	Saves a detail into the dashboard .
5463	Returns an array of RSS items
5464	Get the most recent edits .
5465	Writes the dashboard panel to the database .
5466	Returns the template name for this field .
5467	Returns a link to view all of the subject pages
5468	Returns the link to create a new model
5469	Returns an array of GridFields for the given page .
5470	Get the grid for the subject page .
5471	Returns the tab name for the grid .
5472	Returns a list of the last edited items .
5473	Get all grids for a page .
5474	Request account data .
5475	Clean the error response .
5476	Process a filter .
5477	Maps web properties to account entries .
5478	Convert a JSON string to an object mapper .
5479	Checks if an array key exists .
5480	Fetch a token from the API .
5481	Returns the current URL .
5482	Make a POST request to the API
5483	Make a HTTP GET request .
5484	Make a request to the API .
5485	Make a cURL request
5486	Executes a fopen request
5487	Returns a list of the most recently edited files
5488	Duplicate this dashboard panel .
5489	Returns the template name .
5490	Returns the view all link .
5491	Returns a list of all the model admin items .
5492	Returns an array of managed models for the given panel .
5493	Returns a list of dashboard permissions .
5494	Sorts the dashboard panels .
5495	Sets the dashboard as the default for all new members .
5496	Apply this dashboard configuration to all members .
5497	Check if the panel can be viewed
5498	Deletes the panel .
5499	Displays a form to configure this panel
5500	Saves the configuration to the form .
5501	Get the site tree icon .
5502	Converts seconds to minutes .
5503	Get the gapi instance .
5504	Get the configuration for the dashboard .
5505	Check if the profile is configured .
5506	Returns the path to the page .
5507	Returns the chart title .
5508	Reads a floating - point string from a binary reader .
5509	Reads a segment from a binary file
5510	Converts hexadecimal string to hexadecimal
5511	Reads a Binary from the stream .
5512	Read a signed string from the stream .
5513	Reads a 16 - bit integer from the file .
5514	Reads a signed string from the stream .
5515	Reads a 64 - bit integer from the file .
5516	Read signed data from the stream .
5517	Exports the trace data .
5518	Get the TraceClient callback
5519	Parse Robots . txt .
5520	Get the lines that apply to a robots . txt file .
5521	Builds an array of regular expressions for the given base url .
5522	Get the robots . txt content .
5523	Get robots . txt url
5524	Initializes the crawler process .
5525	Sets the multiprocess mode .
5526	Starts the child process loop .
5527	Check for abort .
5528	Creates the working directory .
5529	Returns a PHPCrawlerProcessReport
5530	Add a regular expression to the link priority array
5531	Sets the follow mode .
5532	Sets the traffic limit .
5533	Set the working directory .
5534	Set a proxy for the page request .
5535	Sets the connection timeout .
5536	Sets the socket read timeout .
5537	Resumes a crawling process .
5538	Sets the starting URL .
5539	Keeps the redirect urls for this document .
5540	Checks if a URL matches rules .
5541	Adds a regex to the URL filter rules .
5542	Adds a set of rules to the URL filter .
5543	Marks a URL as followed .
5544	Checks if the database contains any URLs .
5545	Returns all URLs .
5546	Adds a list of URLs .
5547	Starts a new benchmark .
5548	Stops a benchmark .
5549	Reset all benchmarks .
5550	Returns all temporary benchmarks .
5551	Returns the time in microseconds .
5552	Opens the database connection .
5553	Returns a unique URL hash .
5554	Get the priority of a URL .
5555	Adds a regular expression to the URL priority .
5556	Adds a list of priority to the link
5557	Add a PHPCrawlerDocumentInfo to the queue
5558	Get next document info
5559	Creates a PHPCrawlerUrlDescriptor from a URL
5560	Sets the source URL .
5561	Finds the redirect link in the http header .
5562	Adds post data to a URL
5563	Updates the crawler status .
5564	Register a child PID .
5565	Returns an array of child process pids
5566	Kills all child processes .
5567	Get the IP address of a given hostname .
5568	Returns the host in the URL cache .
5569	Removes a visitor from the collection .
5570	Traverses the query for the given expression and returns the result .
5571	Filters a collection using the given expression .
5572	Creates a new method .
5573	Formats a value .
5574	Formats an array of values .
5575	Writes a configuration value to the config array .
5576	Consumes a variable .
5577	Get a list of configured engines .
5578	Expands a multidimensional array into a multidimensional array .
5579	Split token into token and conditions .
5580	Check if a key matches a token .
5581	Cache a value .
5582	Sets the messages instances .
5583	Generates a backtrace .
5584	Export a variable .
5585	Listen for a message .
5586	Parses a message and returns a config array .
5587	Get the path to a configuration file .
5588	Load a plugin .
5589	Loads the vendor config .
5590	Load all plugins .
5591	Bootstrap a plugin .
5592	Read a config value .
5593	Sets a configuration value .
5594	Read a config value .
5595	Loads modules from a directory .
5596	Checks if there are any plugins in a module .
5597	Unloads a module .
5598	Reloads a module .
5599	Returns the time the given module was loaded .
5600	Check if a module has been modified .
5601	Get a module .
5602	Checks if a module exists .
5603	Sets a new module at the given offset .
5604	Get a value from the cache .
5605	Set a value in the cache .
5606	Get multiple values .
5607	Set multiple values .
5608	Call a method on the pool .
5609	Logs the profile start event .
5610	Logs the end of the profile .
5611	Get the profile key .
5612	Get all arguments for a given command .
5613	Interleave a command with a prefix .
5614	Evaluates the keys of a command .
5615	Set the expires .
5616	Sets the length .
5617	Read data from the socket .
5618	Sends data to the socket .
5619	Check if a command can be executed .
5620	Sets the protocol version .
5621	Process OrientDBRecordDecoder data
5622	Get the last key in the stack .
5623	Prepares the command for execution .
5624	Executes the request .
5625	Read raw data from the socket .
5626	Reads a 64 - bit integer from the buffer .
5627	Read a string from the stream .
5628	Read bytes from the stream .
5629	Reads a single OrientDBRecord .
5630	Adds bytes to the request .
5631	Unpacks a 64 - bit integer .
5632	Resets the object s data
5633	Returns a list of Fusion properties .
5634	Renders a component .
5635	Returns a list of class names for the given arguments .
5636	Get the list of ideal issuers .
5637	Returns a list of allowed products .
5638	Processes the products .
5639	Creates a new order with special conditions .
5640	Create a new Sepa order .
5641	Creates a new Sofort order .
5642	Create a new Payconic order .
5643	Create a new credit card order .
5644	Create a new Bancontact Order .
5645	Create a CashOnDeliveryOrder .
5646	Creates a new order with klaraPay .
5647	Create a new PayPal order .
5648	Create a new Homepay order .
5649	Creates a new post order after payment .
5650	Creates a new order .
5651	Get an order by ID .
5652	Post an order .
5653	Sets the status of a captured order .
5654	Create a new PaymentMethod with an ideal payment method .
5655	Create a new payment with credit card .
5656	Create a new transaction with Sepa .
5657	Create a new payment with SOFORT .
5658	Create a new payment with BANCONTACT .
5659	Create a new payment with PayPal .
5660	Create a new payment with Homepay .
5661	Create a new payment method with Payconiq .
5662	Creates a new Transaction object .
5663	Removes null values from an array .
5664	Create ING API client .
5665	Get the endpoint for the given product .
5666	Checks if the given value is valid .
5667	Build the request body .
5668	Execute a payment
5669	Captures a payment .
5670	Authorize a payment .
5671	Create a new payment .
5672	Get an access token for a client
5673	Builds a link .
5674	Builds a Capture instance .
5675	Builds an Amount object from the given data
5676	Builds an array of URLs .
5677	Builds a new AccessToken
5678	Build a list of transactions .
5679	Builds an array of transactions .
5680	Sends a request to the API .
5681	Build a Payment
5682	Builds a Payer and Transactions object .
5683	Builds a Payer object from the given data
5684	Build an array from a PayerInterface instance .
5685	Builds the authorization .
5686	Makes a string safe to use .
5687	Make a safe string based on a letter
5688	Gets a form attribute value .
5689	Determine if the given key has a form mutator .
5690	Get the reflection instance .
5691	Render a favicon element .
5692	Render a link element .
5693	Renders an ol element .
5694	Render an Ul element .
5695	Get model value attribute .
5696	Creates a text input field .
5697	Adds an email field to the form .
5698	Create a tel input field .
5699	Add a number field to the form .
5700	Creates a URL input field .
5701	Creates a color input field .
5702	Get the checked state of a checkbox .
5703	Returns the url for the given attribute .
5704	Returns the route action for the attribute .
5705	Get the controller action for the attribute .
5706	Inserts a string at a given position .
5707	Searches for a position in the string .
5708	Sets the given data at the given index .
5709	Unsets a value at a given index .
5710	Fetch data from the buffer .
5711	Parse a file .
5712	Returns the number of lines in a file
5713	Unzips a zip file .
5714	Returns the size of the given url .
5715	Returns an array of files .
5716	Frees the stream .
5717	Removes a string from the stream .
5718	Seeks a position .
5719	Inserts data into the iterator .
5720	Replaces the iterator with the given data .
5721	Removes the iterator from the buffer .
5722	Publish a directory .
5723	Closes the resource .
5724	Scope the query to include all admin1 geonames .
5725	Scope for adding country info .
5726	Scope a query to include cities .
5727	Scope a query to include countries .
5728	Search by feature .
5729	Creates pending redirects .
5730	Checks if the URI of a node has changed .
5731	Builds redirects for the given node .
5732	Creates a redirect from a node .
5733	Removes a node redirect if needed .
5734	Check if a node is restricted by a node type .
5735	Checks if a node is restricted by its path .
5736	Returns the hostnames of all active domains .
5737	Returns the URI builder .
5738	Load a name from a variable .
5739	Validates a page .
5740	Returns a page picker .
5741	Returns HTML to display a label
5742	Initializes the plugin .
5743	Generate plugin action links .
5744	Get the version of the plugin .
5745	Get the remote version of the plugin
5746	Checks if a file type and extension match .
5747	Check if the file type and extension match .
5748	Parse contributors from readme . php file
5749	Get plugin s slug by path .
5750	Get remote contributors .
5751	Validate the file .
5752	Returns the supported class loader .
5753	Loads the content of the file .
5754	Creates options for the application .
5755	Returns a list of allowed tags .
5756	Get the list of allowed protocols .
5757	Get the list of allowed domains .
5758	Sanitize a domain .
5759	Sanitize an attribute value .
5760	Sanitize an iri value .
5761	Sanitize a CSS iri value .
5762	Load a svg
5763	Strip comments from a svg
5764	Replicate flags .
5765	Makes a list of loaders .
5766	Pre parse loaders
5767	Make a list of namespace loaders
5768	Parse options .
5769	Creates a new cache provider .
5770	Make paths .
5771	Creates a new loader provider .
5772	Makes a VariableProvider instance .
5773	Load from cache .
5774	Merge globals .
5775	Returns the specified resource .
5776	Create a prefix for a relative .
5777	Create resources .
5778	Adds a content to the list .
5779	Get supported files in directory .
5780	Merge parent content .
5781	Get a value from an array .
5782	Checks if an array key exists .
5783	Parse a value .
5784	Parse the type of a variable .
5785	Fetch the variables that match the given regex .
5786	Fetch the value of a variable .
5787	Check if a variable exists .
5788	Performs the replacements for the given value .
5789	Convert a DOMDocument to an SVG
5790	Removes a list of nodes from the DOM .
5791	Removes a node .
5792	Sets the path of the directory .
5793	Make the absolute path to a file .
5794	Searches for resources in the given content .
5795	Parse the content of a variable .
5796	Use imports .
5797	Import a resource from an import .
5798	Create a resource from an import .
5799	Creates an import name from a resource .
5800	Imports a resource .
5801	Check boolean value
5802	Returns a boolean value .
5803	Get the aliases for a mime extension .
5804	Update the filename extension .
5805	Check if an alias exists .
5806	Check if an alias is allowed for a mime type .
5807	Load config replacements .
5808	Get supported files recursively .
5809	Makes an array of resources from the given paths .
5810	Check if the cache is valid .
5811	Make the cache file .
5812	Set the version of the asset .
5813	Reads a YAML file .
5814	Sends a REST request .
5815	Set cURL options
5816	Executes a GET request .
5817	Performs a PUT request .
5818	Execute a DELETE request .
5819	Performs a POST request .
5820	Execute a HEAD request
5821	Execute a curl request
5822	Installs an XQuery extension
5823	Add buckets .
5824	Read data from a URI .
5825	Writes the XML content to the URI
5826	Check if the given XML is valid .
5827	Sets up a range element
5828	Get the values as an elm .
5829	Adds the values - option element to the given dom .
5830	Adds the aggregate element to the dom .
5831	Returns an array of params .
5832	Retrieve the results of a search query .
5833	Retrieve a value from a key .
5834	Retrieves a value from an element .
5835	Performs a highlight query .
5836	Returns a RESTC client .
5837	Returns a RESTClient instance .
5838	Returns a RESTC client .
5839	Returns a ResTAPI instance .
5840	Get a database instance .
5841	Returns a new option instance .
5842	Autoloads a class .
5843	Returns the options as an XML document .
5844	Adds an option to the DOM .
5845	Adds an option to the XML document .
5846	Read XML from a file
5847	Writes the query to the server .
5848	Delete a file .
5849	Sets the search options .
5850	Read a document .
5851	Sends a PUT request to the API
5852	Delete a document .
5853	Read a document s metadata
5854	Writes a metadata .
5855	Delete a document s metadata
5856	Set the content of a file
5857	Get the mime type of a file .
5858	Logs a SOAP call .
5859	Decode a SOAP reply
5860	Converts an ASSOCIATION KEY value to an array .
5861	Perform a LDAP sync
5862	Get a list of all available phone names .
5863	Returns a summary of all phones for a specific site .
5864	Search phone by name .
5865	Performs a phone search .
5866	Get a phone by its name
5867	Get directory numbers by name
5868	Get a list of device pools .
5869	Get the list of site names in the device pool .
5870	Get a list of lines for a given site .
5871	Get all the lines details for a given phone name .
5872	Get all object types by site .
5873	Get an object type by name
5874	Delete an object type by UUID
5875	Add capabilities .
5876	Get the latitude from the exif data
5877	Get the longitude from the exif .
5878	Get the body type .
5879	Returns the error message .
5880	Returns the url string .
5881	Create a new REST API
5882	Delete a module
5883	Wait until a response is received .
5884	Check if a REST API exists
5885	Get the constraint as an ellipsis .
5886	Adds the term options to the dom .
5887	Adds the facet options to the dom .
5888	Adds the fragment scope to the dom .
5889	Sets the content file .
5890	Get a result by its URI
5891	Returns a result by index .
5892	Returns the facet with the given name .
5893	Adds a set of constraints to the query .
5894	Get extracts as elem .
5895	Adds a list of elements to the preferred list .
5896	Returns the transform results as a DOM element .
5897	Add collections .
5898	Delete collections .
5899	Add permissions .
5900	Delete permissions for a role .
5901	Deletes one or more properties .
5902	Returns the REST API metadata as XML .
5903	Loads permissions from XML .
5904	Enable static proxy .
5905	Sets the container .
5906	Compares the constraints of two fixtures .
5907	Compares the indexes of two fixtures .
5908	Compares the presence of two fixtures .
5909	Get all fixture files .
5910	Compares the presence of the given fields in the live DB .
5911	Setup the form .
5912	Add a horizontal input field to the form
5913	Generates a control s label .
5914	Returns an error message .
5915	Creates a form group .
5916	Generates a form action .
5917	Generates a hyperlink .
5918	Renders an alert button
5919	Creates a password input field .
5920	Creates a file input field .
5921	Creates a hyperlink .
5922	Creates a secure link .
5923	Creates a link to a route .
5924	Creates a link to an action .
5925	Create a mailto link .
5926	Generates a none alert .
5927	Executes a replace command .
5928	Returns a short message .
5929	Get a value from the Redis cache .
5930	Set a value to a redis key .
5931	Removes a basket .
5932	Clears all items from cart .
5933	Updates the basket .
5934	Get a literal value .
5935	Returns the literal type for a given literal
5936	Get a literal language .
5937	Creates a new IRI .
5938	Creates a literal string .
5939	Checks if request is md5 .
5940	Builds an XML response for a function .
5941	Initializes the tokenizer .
5942	Tokenize the given input .
5943	Decodes an obfuscation code .
5944	Obfuscates an identifier .
5945	Returns a default factory .
5946	Gets a statement with a group actor .
5947	Gets a statement with a reference to the statement .
5948	Creates a new statement instance from a statement id .
5949	Get a statement with a sub - statement .
5950	Creates a new option instance .
5951	Returns the result of a statement .
5952	Attach a PDF to the layout .
5953	Initializes the view helper
5954	Returns the file object for the given file event
5955	Collect all files and append them to the PDF
5956	Cleans the layout .
5957	Attaches the view resolver .
5958	Attaches the pdf transformer
5959	Resolves a file name .
5960	Registers an option .
5961	Returns an option by name .
5962	Get ActivityProfileDocument .
5963	Returns an AgentProfileDocument object .
5964	Returns a StateDocument object .
5965	Adds a behavior .
5966	Add a value to the bucket .
5967	Defines a default behavior .
5968	Defines a default value .
5969	Executes a behavior .
5970	Get a behavior .
5971	Sets the default behavior to false .
5972	Sets a behavior .
5973	Start metrics .
5974	Stop metrics .
5975	Executes the strategy .
5976	Returns a new instance for each item in the collection .
5977	Get the first item in the collection .
5978	Returns the last item .
5979	Returns the maximum value of a given key .
5980	Rejects the given callback .
5981	Convert the collection to an array .
5982	Get arrayable items .
5983	Check if a slug is enabled .
5984	Parse a feature map .
5985	Creates a hash map from an array of items .
5986	Get Bucket .
5987	Set the map .
5988	Generate a builder for a feature .
5989	Sets the user bucket .
5990	Describes a list of tables .
5991	Describes a table .
5992	Creates a list of tables .
5993	Creates a new table .
5994	Creates a list of fields in a table .
5995	Creates a new field in a table .
5996	Creates a list of relationships .
5997	Creates a new relationship .
5998	Updates a set of tables .
5999	Updates a table .
6000	Updates a table s fields .
6001	Updates a field in a table .
6002	Updates a table s relationships .
6003	Update a relationship .
6004	Deletes a list of tables .
6005	Deletes a table .
6006	Sets the field s target length .
6007	Truncates a table .
6008	Paged result response .
6009	Rewinds the current row .
6010	Escapes a value from LDAP .
6011	Adds an entry to the LDAP database .
6012	Performs a ldap_compare .
6013	Connect to ldap server
6014	Paged a paged result .
6015	Bind to the LDAP server .
6016	Returns the value of an option .
6017	Modify an existing LDAP entry .
6018	Deletes an entry from the database .
6019	Replaces an existing entry in the database with a new one .
6020	Modify an entry in the LDAP .
6021	Modify a single entry in a batch
6022	Renames the LDAP resource .
6023	Bind a LDAP user to a LDAP server .
6024	Performs an LDAP search and returns the results .
6025	Sets an LDAP option .
6026	Verify the operation .
6027	Adds a set to the collection
6028	Computes the reference set .
6029	Computes the product .
6030	Returns the resource names for a given type and schema .
6031	Gets a resource by type .
6032	Compare two table names .
6033	Adds a primary key to a table
6034	Create a VIEW statement .
6035	Binds a value to a statement .
6036	Extracts a PDO type from a database type .
6037	Extracts the type of a column .
6038	Extracts a default value from a field .
6039	Add data to the form .
6040	Generates a query for a given IDruid .
6041	Creates a new request .
6042	Executes a query and returns the response .
6043	Set HTTP Method
6044	Sets the protocol to use .
6045	Generates a query for the given IDruidQueryParameters .
6046	Sets the aggregators .
6047	Sets the filters .
6048	Sets the post aggregaters .
6049	Registers the TinyMCE client script .
6050	Checks if all required parameters are set .
6051	Returns a JSON string representation of the request .
6052	Displays a list of documents .
6053	Prepare the database .
6054	Checks if a table has a column .
6055	Gets the type of a column .
6056	Update a table .
6057	Drops a table .
6058	Drops all tables .
6059	Renames a document .
6060	Executes a SQL query .
6061	Add a media tag from an uploaded file .
6062	Add a media from a file .
6063	Adds data from raw file .
6064	Adds a file from a URL .
6065	Deletes thumbnails and file .
6066	Returns the last modified time .
6067	Returns a unique name .
6068	Deletes thumbnails from the filesystem .
6069	Deletes a file .
6070	Deletes an empty directory .
6071	Check if a directory is empty .
6072	Check if a file exists .
6073	Returns the thumbnail .
6074	Get thumbnail filename .
6075	Get default thumbnail options .
6076	Make thumb .
6077	Get the public path to the asset .
6078	Returns the path to the temporary folder .
6079	Returns the enum type of a column .
6080	Type a time column .
6081	Type a timestamp column .
6082	Writes a curl function .
6083	Compile JS .
6084	Bootstrap the application .
6085	Normalizes a URL .
6086	Adds a pattern to the application .
6087	Adds a GET pattern .
6088	Adds a POST pattern to the application .
6089	Add a PUT pattern to the application .
6090	Adds a patch pattern to the application .
6091	Adds a DELETE pattern .
6092	Adds options to the application .
6093	Adds a head pattern to the application .
6094	Renders the file .
6095	Gets or sets a source .
6096	Create a migration .
6097	Ensure that a migration does not already exist .
6098	Get the stub file content .
6099	Get the path to a file .
6100	Scope the query to include users whose actions are triggered by a given causer .
6101	Scope for a given subject .
6102	Build an array opening expression .
6103	Get migration paths .
6104	Clears compiled views .
6105	Set the params .
6106	Sets the headers of the message .
6107	Set the proxy .
6108	Sets the cookies .
6109	Set a cookie .
6110	Sets the options .
6111	Send the request and return the response .
6112	Make a request to the API .
6113	Build the blueprint .
6114	Build the table definition .
6115	Builds the SQL commands .
6116	Adds an index to the table .
6117	Add a float column .
6118	Add a double column to the table .
6119	Add a decimal column .
6120	Get nullable timestamps .
6121	Returns nullable timestamps .
6122	Morphs a name
6123	Get a list of nullable morphs .
6124	Adds a column definition .
6125	Creates the reference name .
6126	Adds a value to an array .
6127	Collapse an array into a single array .
6128	Read a value from an array .
6129	Fetches an object from an array .
6130	Removes a value from an array .
6131	Maps an array using a callback function .
6132	Explode a Pluck parameter .
6133	Converts a word to levenshtein .
6134	Capitalizes a string .
6135	Returns a string with the first letter capitalized .
6136	Formats a Location with the given format .
6137	Register the application .
6138	Get composer . phar .
6139	Builds the request params .
6140	Build the headers .
6141	Build the proxy .
6142	Build the cookies header .
6143	Observe a class .
6144	Register a model event .
6145	Boots the NICER events .
6146	Flushes all event listeners .
6147	Creates a location model query .
6148	Get location by identifier .
6149	Get location by slug
6150	Flash a message to the browser .
6151	Overlay a message .
6152	Clears the session .
6153	Add a task to the queue .
6154	Registers the service provider .
6155	Register the prefix .
6156	Register a storage instance .
6157	Bootstrap the application .
6158	Adds a like clause to the query .
6159	Pluck a list of dates from a given column .
6160	Finds a model by its primary key or creates a new one .
6161	Get the current user .
6162	Logout the user .
6163	Logs in a user .
6164	Retrieve a user by identifier and remember token .
6165	Retrieves a user by credentials .
6166	Register the database profiler .
6167	Register the view profiler .
6168	Writes a migration file .
6169	Get the list of events to be recorded .
6170	Dump an array
6171	Gets the unique identifier of a variable .
6172	Generates an array hash .
6173	Check recursion of array
6174	Check object recursion
6175	Dumps a list of variables .
6176	Displays the header .
6177	Describes a route .
6178	Add directories .
6179	Normalize a class name
6180	Loads a mapped class .
6181	Require a class .
6182	Load the manifest file .
6183	Write the manifest file .
6184	Load a locale from a list of drivers .
6185	Loads a file from a path .
6186	Sets the query constraint .
6187	Parse read data .
6188	Creates a new query .
6189	Check if the current environment has color support .
6190	Apply foreground and background colors to text .
6191	Returns a raw migration data .
6192	Returns an array of migration steps .
6193	Run pending migrations .
6194	Run a migration up .
6195	Get the migrations for a rollback .
6196	Rollback migrations .
6197	Reset migrations .
6198	Reset migrations .
6199	Run a down migration .
6200	Pretend to run a migration .
6201	Returns a list of migration files .
6202	Clears the loader file .
6203	Adds a primary key column .
6204	Adds a column .
6205	Creates a timestampable field .
6206	Adds a soft delete behavior .
6207	Adds a column to the map
6208	Describe a column type .
6209	Checks if an option exists .
6210	Checks if the parent id is the same as the old id .
6211	Scope a query to live articles .
6212	Returns the path attribute .
6213	Register Phalcon .
6214	Generates the configuration cache
6215	Renames a table from one schema to another
6216	Bootstrap the hasPermalink trait .
6217	Get slug key name .
6218	Scope for finding similar slugs .
6219	Executes a SQL statement with placeholders .
6220	Executes a SQL statement .
6221	Describes the columns of a table .
6222	Executes a SELECT query and returns the first row .
6223	Executes a SELECT query and returns the results as an array .
6224	Inserts data into a table .
6225	Updates an existing record in the database .
6226	Deletes data from a table .
6227	Adds a limit query .
6228	Checks if a table exists .
6229	Checks if a view exists .
6230	Creates a new table .
6231	Creates a new view .
6232	Drops a view .
6233	Add a column to a table .
6234	Modifies a column in a table .
6235	Drops a column .
6236	Add an index to a table .
6237	Drops an index .
6238	Add a primary key to a table .
6239	Drops a primary key .
6240	Add a foreign key to a table .
6241	Drops a foreign key .
6242	Describes the indexes of a table .
6243	Describes a table s references .
6244	Adds a table option .
6245	Renders the storage panel .
6246	Add a column to a table .
6247	Modify a column .
6248	Drops a column .
6249	Drops an index from a table .
6250	Adds a primary key to a table .
6251	Drops a foreign key .
6252	Creates a table in the database .
6253	Creates a view instance .
6254	Drops a table .
6255	Drops a view .
6256	Bind paths in the container .
6257	Check if database exists .
6258	Register the logger .
6259	Bootstrap the application .
6260	Get the fillable attributes from an array .
6261	Check if a key is fillable .
6262	Converts an amount from one currency to another
6263	Check if currency is active .
6264	Get all currencies .
6265	Registers the modules .
6266	Attaches a listener .
6267	Generates a reset code .
6268	Completes a password reset
6269	Checks if the given reset code is valid .
6270	Completes user activation .
6271	Asks the user for input .
6272	Register the currency .
6273	Parse route middleware .
6274	Add a middleware to the application .
6275	Returns a ReflectionClass instance for the given class .
6276	Set the value of a property of an object .
6277	Get a property of an object .
6278	Invoke a method on an object .
6279	Saves a value to the cache .
6280	Checks if a key exists .
6281	Returns the user currency .
6282	Returns true if the coordinate is equal to another .
6283	Renders a language block .
6284	Binds a callback to an event .
6285	Sorts the emitter events .
6286	Unbind an event .
6287	Fires a single event .
6288	Returns the DI instance .
6289	Check if a header exists .
6290	Sets the headers .
6291	Build the headers .
6292	Checks the ellipsoid of two coordinates .
6293	Returns a detailed error message .
6294	Main action .
6295	Registers the session .
6296	Convert a DateTime to a DateTime object .
6297	Prepares a file for writing .
6298	Get the HTML code of a file .
6299	Parse a PHP file .
6300	Register the database .
6301	Get node data by id .
6302	Adds a where clause to the query .
6303	Adds a where between clause to the query .
6304	Add a WHERE clause to the query for a descendant of a node .
6305	Get the descendants of a model .
6306	Add a depth column to the query .
6307	Returns a set of wrapped columns .
6308	Check if the table has children .
6309	Set the default order .
6310	Move a node into a new position .
6311	Make a gap .
6312	Patches columns with given params .
6313	Parse a column .
6314	Counts the number of errors .
6315	Fixes the tree .
6316	Rebuilds the tree .
6317	Bootstrap the Purgeable trait .
6318	Add purgeable attributes .
6319	Purges the attributes of the model .
6320	Get the original purge value for an attribute .
6321	Returns a value from the collection .
6322	Set a value in the collection .
6323	Forget an item by key .
6324	Saves the collection .
6325	Loads the collection .
6326	Compiles a function name .
6327	Optimizes the application .
6328	Adds a header to the request .
6329	Add a header to the response .
6330	Get rate limiter .
6331	Update the model attributes .
6332	Log a migration .
6333	Create a new repository .
6334	Get the database table .
6335	Returns the database name .
6336	Sets an attribute .
6337	Appends a value to an attribute .
6338	Sets the content .
6339	Adds a content element
6340	Registers the given commands .
6341	Compile http - routes . php
6342	Get a list of queries .
6343	Check if a key has too many attempts .
6344	Hit a value in the cache .
6345	Get a cache entry .
6346	Clear cache by key .
6347	Check if a key is available in cache .
6348	Generate dotconst cache
6349	Register the native filesystem .
6350	Swaps an instance for another .
6351	Returns true if the facade should receive the given params .
6352	Create a fresh mock instance .
6353	Returns true if the facade accessor is a mock .
6354	Resolve a facade instance .
6355	Processes a select result .
6356	Processes a list of templates and returns an array of them .
6357	Parse the template content .
6358	Process update .
6359	Attach all listeners to the event handler .
6360	Detach all events from the event manager .
6361	Geocodes an address .
6362	Reverse a GeoQuery .
6363	Get the migration status for a given migration .
6364	Renders a list of routes .
6365	Get HTTP routes infos
6366	Set cURL options
6367	Gets information from cURL server
6368	Compiles a Dotconst configuration file .
6369	Start the error handler .
6370	Waits for the given timeout and step .
6371	Stops the process .
6372	Closes the process .
6373	Execute the command and wait for a response .
6374	Optimize memory .
6375	Generates the output .
6376	Fills a key with a value .
6377	Read a property from an object .
6378	Fetches a property from an object .
6379	Get a value from an object or array .
6380	Sets the value of a property in an object or array .
6381	Register error handlers .
6382	Handle an error .
6383	Handle an error .
6384	Resolve a migration file .
6385	Determine if a log level should be logged .
6386	Use log files .
6387	Use daily files .
6388	Register the logger .
6389	Setup the database .
6390	Logs SQL errors .
6391	Adds an item to the list smartly .
6392	Returns the value of a property .
6393	Set a property .
6394	Sets the properties of the model .
6395	Get the original value of a property .
6396	Check if a property has a cast .
6397	Returns the list of dirty properties .
6398	Creates a new navigation bar header .
6399	Adds a dropdown menu
6400	Adds a button to the menu
6401	Flushes all status messages .
6402	Add an item to the body .
6403	Adds a CSS element to the easeShared object .
6404	Returns a Gravatar image .
6405	Sets a value for a key .
6406	Get or set the shared database link .
6407	Get the shared locale .
6408	Adds parameters to a URL .
6409	Creates a link for a given value .
6410	Add row footer columns .
6411	Include a CSS file on a web page
6412	Generate a PHP self .
6413	Builds the post data .
6414	Returns all available locales .
6415	Converts a language to a locale .
6416	Sets the locale to use .
6417	Setup a property .
6418	Returns the status messages for this ease - shared .
6419	Returns a list of countries .
6420	Adds the list - group - item tag
6421	Sets the name of the object .
6422	Sets the color of a string
6423	Get the color for a given type .
6424	Make a HTTP GET request .
6425	Make a POST request to the API .
6426	Performs a DELETE request to the API .
6427	Returns the value of the key .
6428	Unsets a column value .
6429	Reindexes an array of data .
6430	Draws the page .
6431	Setup context .
6432	Returns the number of items in the body .
6433	Returns true if the body is empty .
6434	Adds slashes to a string
6435	Connect to the database .
6436	Converts an array to an INSERT query
6437	Prepares a select statement .
6438	Sets the object to be used .
6439	Add a slide .
6440	Finalizes the indicator .
6441	Adds a message to the log .
6442	Add a status message to the log .
6443	Returns the tag name .
6444	Get a tag property .
6445	Finalizes the modal .
6446	Clone the early runner .
6447	Add ajax tab .
6448	Prints a trace .
6449	Attaches an observer to an event .
6450	Attaches an observer to an event .
6451	Detach an observer from an event .
6452	Detach all events for an observer .
6453	Validate if the Pod belongs to this toolbox .
6454	Returns a connection instance .
6455	Returns the driver instance .
6456	Generate a binding parameter .
6457	Normalise the exceptions for the driver .
6458	Create a database .
6459	Deletes a database .
6460	Get information about a database
6461	Returns a list of all databases connected to the connection .
6462	Get the database connection .
6463	Sets the current connection to use .
6464	Returns a toolbox .
6465	Sets the model formatter .
6466	Load a Pod .
6467	Creates a new graph .
6468	Renames a collection .
6469	Returns information about a specific index .
6470	Loads a vertex .
6471	Processes a store result .
6472	Converts an array of documents to Pods .
6473	Converts an array to a Pod
6474	Converts a DriverDocument to Pod .
6475	Creates a new vertex .
6476	Create a new Edge .
6477	Creates a document .
6478	Setup the model .
6479	Determine if a model was previously stored .
6480	Adds a transaction command .
6481	Validate if a type is a graph
6482	Map a list of data to a callback .
6483	Crawls a page .
6484	Parse a URL .
6485	Parse an image .
6486	Parse a string .
6487	Parses a DateTime string into a DateTime object
6488	Loads a class .
6489	Starts the coverage .
6490	Initialize the config .
6491	Relate an edge to another model .
6492	Returns a list of inbound Edges .
6493	Convert this object to a DriverDocument object .
6494	Encodes an object to UTF - 8 .
6495	Create a new collection .
6496	Deletes a collection .
6497	Renames a collection .
6498	Deletes a collection .
6499	Get information about a collection .
6500	Get collection statistics .
6501	Counts the number of records in a collection .
6502	Loads a collection .
6503	Unloads a collection .
6504	Returns information about an index .
6505	Returns the geo fields for the AQL .
6506	Performs a search on any database type .
6507	Returns the collection name for the given type .
6508	Deletes a user .
6509	Get information about a user .
6510	Deletes Aql functions by namespace .
6511	Returns a list of registered Aql functions .
6512	Returns the server version .
6513	Get the server version .
6514	Returns the server time .
6515	Sets the value of a property .
6516	Removes a property from the pod .
6517	Gets the system property for a given key .
6518	Sets the document id
6519	Set the distance info for the query .
6520	Reset meta data .
6521	Converts the object to an array
6522	Returns a JSON representation of this object
6523	Returns the transaction as JSON .
6524	Convert this object to a driver document .
6525	Loads data from driver document .
6526	Load data from array .
6527	Called when event is triggered .
6528	Set the To model .
6529	Get the to id .
6530	Set the From model .
6531	Returns the from id .
6532	Convert this object to a driver document .
6533	Begin a new transaction .
6534	Commits the current transaction .
6535	Clear transaction info .
6536	Add a read collection .
6537	Add a write collection .
6538	Pauses the transaction .
6539	Resumes the transaction .
6540	Add a command to the current transaction .
6541	Searches for commands by action and object
6542	Generate a random id .
6543	Creates a graph .
6544	Deletes a graph .
6545	Returns information about a graph
6546	Get outbound Edges for a model .
6547	Returns the list of filters .
6548	Renders filterbox .
6549	Render all widgets .
6550	Opens the container .
6551	Closes the container .
6552	Opens the filter form .
6553	Closes the form .
6554	Determine if the filter is active .
6555	Creates a filter button .
6556	Returns a reset button .
6557	Returns a back to list button .
6558	Get the persistent storage key .
6559	Checks if a parameter is a filter .
6560	Returns fulltext search conditions .
6561	Flattens value options .
6562	Returns a list of filters .
6563	Generates a redirect url from POST data .
6564	Adds list filter parameters to the url .
6565	Set default filters .
6566	Build a query from a pdo and params
6567	Reduces the iterable using a callback .
6568	Check if a given type is valid .
6569	Casts an iterable to a specific type .
6570	Register the bugsnag service .
6571	Make a bugsnag client .
6572	Setup custom user detection .
6573	Setup the client s paths .
6574	Get the stub for the given pipeline name .
6575	Un - stub a pipeline .
6576	Creates a new pipeline with the steps of the given iterable .
6577	Set the keys of an iterable .
6578	Returns a slice of the iterable .
6579	Sorts the results by a given comparison .
6580	Set multiple variables at once .
6581	Sets a variable .
6582	Get the pathname for a page .
6583	Get a script tag .
6584	Checks if a combination of scripts is allowed .
6585	Convert a string to a list .
6586	Create username spoofs .
6587	Get all layouts paths .
6588	Add globals to the renderer .
6589	Process the generated pages .
6590	Sets a feed parameter .
6591	Extracts a parameter from a SimpleXMLElement object
6592	Run a git command .
6593	Sorts two arrays by date .
6594	Remove an item from the feed .
6595	Replaces an item in the feed .
6596	Merge a feed object into this one .
6597	Auto - slice the collection into an array .
6598	Returns a list of spoofed users .
6599	Creates a batch record .
6600	Writes the feed items .
6601	Sets the current value of the buffer .
6602	Buffers the schedules .
6603	Sorts the results by date .
6604	Import config .
6605	Sets the data .
6606	Sets the source directory .
6607	Sets the path to the destination directory .
6608	Finds the layout for a given page .
6609	Get the fallback layouts for a page .
6610	Parse the file .
6611	Returns the current section .
6612	Returns the permalink .
6613	Set the config .
6614	Builds the process .
6615	Get the version .
6616	Filter the pages by a variable .
6617	Sort an array by a given date
6618	Creates a URL for a site .
6619	Minify a file
6620	Converts a file to css .
6621	Get the read time of a text .
6622	Computes the hash of a file .
6623	Collect pages .
6624	Renders a feed .
6625	Loads a feed .
6626	Sniffer a string or an array of strings
6627	Check if the given input is of the given type .
6628	Sniffer all inputs .
6629	Sniffer the input and return the type name .
6630	Saves a schedule to the database .
6631	Render a feed .
6632	Creates a channel item from XMLManager .
6633	Gets the item s author .
6634	Get the feed comment route .
6635	Checks if the content contains XML syntax markers .
6636	Collects taxonomies from pages .
6637	Creates the node pages .
6638	Compile all views .
6639	Compile all views in a given path .
6640	Compile a single view file .
6641	Generate a diff .
6642	Parse a diff into chunks
6643	Boot the Orchestra instance .
6644	Finish all extensions .
6645	Register the active extensions .
6646	Called after the application is booted .
6647	Returns a list of available service providers .
6648	Write the manifest file .
6649	Register a deferred service provider .
6650	Load queued service provider .
6651	Activate an extension .
6652	Map extension aliases .
6653	Register domain awareness .
6654	Detect all available extensions .
6655	Get the value of an option .
6656	Publishes a plugin .
6657	Register an extension .
6658	Get a route by name .
6659	Activates an extension .
6660	Refreshes an extension .
6661	Reset an extension .
6662	Check if a field should be excluded .
6663	Create Orchestra driver .
6664	Bootstrap the application .
6665	Bootstrap the extension configuration .
6666	Bootstrap the form .
6667	Bootstrap menu handler .
6668	Bootstrap the sidebar placeholders .
6669	Bootstrap the validation rules .
6670	Attach a listener to an event .
6671	Initiates the request .
6672	Set the theme .
6673	Boot theme .
6674	Resolving theme .
6675	Returns all available theme paths .
6676	Get theme autoload files .
6677	Validate provided theme .
6678	Get available theme .
6679	Render a macro .
6680	Filter a value to a valid date .
6681	Verify the status of the extension .
6682	Add a path .
6683	Detect all extensions .
6684	Get the contents of a manifest file .
6685	Generate the manifest config .
6686	Get composer lock data .
6687	Guess the extension name from the manifest .
6688	Guess the extension path .
6689	Resolve extension namespace .
6690	Validate extension name .
6691	Register the view finder .
6692	Register Orchestra Theme Manager and finder .
6693	Detect the theme .
6694	Set the current theme .
6695	Set theme resolver .
6696	Register Orchestra Extension .
6697	Register the Orchestra Extension config manager .
6698	Register Orchestra Extension Finder .
6699	Register the extension status checker .
6700	Execute a file permission .
6701	Get the scheme .
6702	Set the domain and prefix .
6703	Returns the domain .
6704	Returns a group of domains .
6705	Check if a path matches a pattern .
6706	Get the domain prefix .
6707	Returns the root path .
6708	Returns the base url .
6709	Resolve base url from root .
6710	Safely parse YAML .
6711	Validates a duplicate key .
6712	Activates a service .
6713	Deactivates a service .
6714	Register extension providers .
6715	Register extension plugin .
6716	Boots all extensions .
6717	Starts an autoloader .
6718	Fire an event .
6719	Get the autoload files .
6720	Loads an autoloader file .
6721	Process deprecated code .
6722	Starts the application .
6723	Generates a log entry .
6724	Generate a call trace .
6725	Add an alert message to the json .
6726	Creates a new instance of the PCNTL daemon .
6727	Executes a pcntl fork .
6728	Get URLSegment slug .
6729	Called before a record is written to the database .
6730	Sends the headers to the browser
6731	Sets a cookie .
6732	Clear all cookies .
6733	Makes a request to the storage .
6734	Store files in a temporary location .
6735	Removes a value from the array .
6736	Generate a regular expression based on a condition .
6737	Returns the first element of the array with no HTML .
6738	Get an integer value from the array .
6739	Flushes the cache .
6740	Combines two or more files .
6741	Connect to a server .
6742	Executes an SSH command .
6743	Check if the server is a client .
6744	IP filter .
6745	Creates a named pipe .
6746	Register a deployer .
6747	Returns a registered deployer .
6748	Adds a new server .
6749	Set the list of servers .
6750	Returns a server instance .
6751	Deploys the given server and deployer .
6752	Returns the server options .
6753	Processes the opening of a file
6754	Get the ajax action slug .
6755	Get ajax request for a single action
6756	Trigger the ajax callback .
6757	Triggers an ajax callback
6758	Get a post request value .
6759	Generate a random hex .
6760	Start a session .
6761	Clear all session variables .
6762	Check if value is serialized .
6763	Handle item s slug .
6764	Add a closure to a method .
6765	Update a user s session
6766	Clear the current session .
6767	Verify a user s socket .
6768	Open a session .
6769	Delete all expired sessions .
6770	Matches a route against a rule .
6771	Returns an array of data for the current page
6772	Check if this is a page .
6773	Loads class metadata .
6774	Creates a new condition .
6775	Initializes all installed plugins .
6776	Returns a list of installed plugins .
6777	Load Twig .
6778	Set the default language for the user .
6779	Check if the token is valid and update the expire date .
6780	Get a view .
6781	Add a javascript variable .
6782	Adds a javascript file to the asset .
6783	Adds a css file to the stylesheet
6784	Returns the content of a file .
6785	Returns the content with the template .
6786	Get all scripts .
6787	Get all css assets
6788	Returns the path to an asset .
6789	Returns TRUE if the access is allowed for the given routing rule .
6790	Returns the access for the controller
6791	Returns the roles chain .
6792	Returns the language of a user
6793	Translates a single choice .
6794	Returns the translation for the given locale .
6795	Get the translations for a given locale .
6796	Returns the translation for the given id .
6797	Get the basic translation for a given translation id and number .
6798	Generates a toggle command .
6799	Generates the toggle commands for the given attribute .
6800	Handle the buildMetaModelOperations event .
6801	Creates the MVCA action .
6802	Prepare and create controller action
6803	Executes ACL .
6804	Execute auth .
6805	Resolve the route .
6806	Sets the app and structure libraries .
6807	Gets an instance of a library class .
6808	Create a new core and controller .
6809	Calls a class and method with input arguments .
6810	Returns an array of function arguments .
6811	Get role and user from token .
6812	Get role and user from user id
6813	Get current options .
6814	Set a bulk of input given an array of parameters .
6815	Returns the value of a parameter .
6816	Filter a variable
6817	Opens a database connection .
6818	Closes a connection .
6819	Executes a select query .
6820	Executes a SQL query and returns all results as an associative array .
6821	Execute a SQL query and return the last inserted id .
6822	Executes a delete query and returns the number of affected rows .
6823	Executes a SQL query and returns the number of affected rows .
6824	Logout the user .
6825	Sets the user id .
6826	Sets the username of the user .
6827	Sets the role id
6828	Sets the role name .
6829	Validates a value against a constraint .
6830	Returns an array of installed plugins .
6831	Searches for plugin directories .
6832	Searches for a plugin factory class .
6833	Checks if the given file implements the given implementation .
6834	Converts a closure to a string .
6835	Execute a closure .
6836	Execute a file .
6837	Run a command for Windows .
6838	Set the autoload file .
6839	Checks if a process is running .
6840	Kills the current process .
6841	Resets the cache .
6842	Create a new instance from a string .
6843	Returns the image driver .
6844	Build an image .
6845	Returns the proportional width of the image .
6846	Returns the proportional height of the image .
6847	Formats a binary string .
6848	Formats a number as a metric
6849	Creates a new session instance .
6850	Initializes the driver .
6851	Parse the content of the stream and return an array .
6852	Generates the URL for the request .
6853	Get a server parameter .
6854	Get the default input definition .
6855	Register the commands .
6856	Returns the path to a model .
6857	Add the force option to the definition .
6858	Adds the model argument to the definition .
6859	Validates the model argument .
6860	Adds the table argument to the definition .
6861	Validates the table argument .
6862	Returns table instance for given model .
6863	Generates a file .
6864	Handle the request and return the response .
6865	Check if the stream is seekable .
6866	Creates a new parser for the given stream .
6867	Adds a new body parser .
6868	Adds a module argument to the definition .
6869	Adds an argument to the controller definition .
6870	Creates a new request instance .
6871	Create a new server request instance .
6872	Creates a new stream .
6873	Creates a stream from a file .
6874	Creates a new uploaded file .
6875	Creates a new URI from a string .
6876	Formats a given number of bytes into a readable string .
6877	Formats a number .
6878	Normalizes a given number of bytes .
6879	Normalize the precision .
6880	Returns a new instance with the specified method .
6881	Sets the URI .
6882	Get the target from the URI .
6883	Push a middleware onto the middleware stack
6884	Returns the reason phrase for the given code .
6885	Get incoming messages .
6886	Get a user from an incoming message .
6887	Get the extension of a file .
6888	Normalize a filename to UTF - 8 .
6889	Returns the contents of the stream .
6890	Replaces wp - login . php with wp - admin . php .
6891	Fix wp - include folder .
6892	Fixes the network admin url filter .
6893	Fixes double slash urls .
6894	Initializes the plugin .
6895	Sets the name of the current WordPress folder .
6896	Convert a URL to a full path .
6897	Url path encode
6898	Decodes a URL path
6899	Returns the contents of a directory .
6900	Runs a database query .
6901	Write a log section .
6902	Writes the Memory Usage log section .
6903	Writes a time load log section .
6904	Write log sections .
6905	Recursively flips an array of files .
6906	Sets the uploaded file stream .
6907	Returns the hash of the uploaded file
6908	Returns the media type of the uploaded file .
6909	Get the query params .
6910	Check if the request is an ajax request
6911	Convert JSON to Document .
6912	Converts an array of entities into an Entity object
6913	Gets the actions from a data array .
6914	Get the fields from a data array .
6915	Get links from a data array .
6916	Sends a request and returns a promise .
6917	Executes the request and returns the response .
6918	Prepares the request for sending .
6919	Sets the url for the request .
6920	Sets the request headers .
6921	Creates a response from a result .
6922	Splits the header from the body .
6923	Parse headers .
6924	Count the total log type .
6925	Displays the profile .
6926	Collect all files included in the log section .
6927	Gathers the GET data for the log sections .
6928	Collects data from POST and section data .
6929	Collects the session data .
6930	Get the request time in microseconds .
6931	Generate a summary key for a log section .
6932	Create uploaded files .
6933	Creates a new uploaded file .
6934	Flips the keys of an array recursively .
6935	Merges two arrays recursively
6936	Processes the request and returns the response .
6937	Add a new menu
6938	Displays a form to edit an existing model .
6939	Attempt to edit an existing record .
6940	Redirect to edit page .
6941	Returns the order of the objects .
6942	Delete a model .
6943	Returns the uploaded files .
6944	Returns a new instance with the given uploaded files .
6945	Check if all uploaded files are valid .
6946	Loads the HTTP headers .
6947	Returns a new instance with the specified attribute .
6948	Removes an attribute from the request .
6949	Check if a given mtime is valid .
6950	Get a header by name .
6951	Set HTTP status .
6952	Executes the callable and returns the response .
6953	Returns the current MySQL version .
6954	Authenticates a user .
6955	Find all active users .
6956	Find all deactivated users .
6957	Add a new user .
6958	Returns the value of the metric option .
6959	Sets the current language from the post id .
6960	Checks if the given key is a container .
6961	Checks if a string is encrypted .
6962	Dumps the class .
6963	Exports an associative array .
6964	Pre global process .
6965	Performs the post global process .
6966	Returns a ParseException indicating that no token could be found for any of the given token types .
6967	Creates a new container .
6968	Recover an item from the database .
6969	Processes a new class extension .
6970	Process a new config class .
6971	Process a class s configuration .
6972	Processes a class .
6973	Sets the definitions .
6974	Returns a definition .
6975	Removes a definition .
6976	Set the config classes .
6977	Generates the container classes .
6978	Dumps a list of containers .
6979	It should return the inner value .
6980	Set the email address .
6981	Make a notice request .
6982	Make a call to the API .
6983	Create a response object from an exception .
6984	Parse RPC server HTTP response .
6985	Sends a request to the ZMQ server for action permission .
6986	Wait for a subscription message to be sent .
6987	Pushes the actionResultingPushDto to the subscriber socket .
6988	Formats the layout template files .
6989	Write the JSON to a file
6990	Dashes a value .
6991	Get a slice of the current line .
6992	Get the indices for the given start stop and step .
6993	Returns the option with the given value .
6994	Validates an array argument .
6995	Creates and validates an option .
6996	Declares the reply - to - reply - stack as a Messaging event .
6997	Returns the value of a property .
6998	Get the matchers .
6999	Compares two images .
7000	Create a diff gif on differences between two images .
7001	Creates a new comparison image on the difference between two images .
7002	Checks if two images are the same .
7003	Add a POST route .
7004	Add a route to the routing table
7005	Check if the given url matches the given HTTP method .
7006	Executes the request and returns the response .
7007	Redirects to the given URL .
7008	Parse the route parameters .
7009	Get the date from a file .
7010	Handle save image .
7011	Make a GET request to the remote server .
7012	Send a POST request to the remote server .
7013	Sets the authentication headers .
7014	Returns the configuration value for the given option .
7015	Validate config .
7016	Returns the excerpt of the given text .
7017	Throws an exception if an error occurs
7018	Get the dot extensions .
7019	Validate widget id .
7020	Set the cxense user id
7021	Get the list of documents .
7022	Appends a string to the end of the string
7023	Prepend a string to the end of the string .
7024	Returns true if the string matches the given pattern .
7025	Limits the number of words in a string .
7026	Creates a new UUID
7027	Joins an array with a string .
7028	Returns the string as an HTML entity .
7029	Cuts a string to a specified offset and length .
7030	Returns a new string with the given limit .
7031	Limits the string to a certain number of characters .
7032	Convert the string to a list of vars .
7033	Encrypt the JWT payload .
7034	Creates a JWT object from an encrypted string .
7035	Convert this object to a container .
7036	Generates a parser from a grammar file .
7037	Set the WP Xense settings .
7038	Returns a list of documents .
7039	Set the number of results per page .
7040	Set the search page .
7041	Get a value as a number .
7042	Get a searchable value .
7043	Get bool from string .
7044	Returns a formatted GRAMMAR string .
7045	Create a gif command .
7046	Create a gif command .
7047	Lookup many tokens .
7048	Returns a string representation of the number
7049	Check if the model has a property with the given name .
7050	Returns a property by its name .
7051	Removes a property by name .
7052	Checks if a method with the given name exists .
7053	Returns the method with the given name .
7054	Removes a method by name .
7055	Parse the meta .
7056	Runs all registered hooks .
7057	Load plugins .
7058	Setup the application route .
7059	Get a value from the collection .
7060	Set a value for a given key .
7061	Push a value to a key .
7062	Searches the collection for the given value .
7063	Get a list of keys by a field .
7064	Returns a new collection that is unique .
7065	Returns an array of keys that are not numeric .
7066	Joins the collection with another collection .
7067	Join by key .
7068	Returns a list of items .
7069	Returns an array of chunked items .
7070	Filter the collection using a callback function .
7071	Walks through the collection using a callback .
7072	Merges the given items into this container .
7073	Merge an array with a given key .
7074	Increases the number of items in the collection .
7075	Returns a random key .
7076	Returns a random item .
7077	Cuts the array to a given offset and length .
7078	Reject a callback .
7079	Forget an item .
7080	Reverses the array .
7081	Returns a new collection with the items grouped by a given key .
7082	Returns a copy of this object except for the index .
7083	Get the rest after index .
7084	Returns the rest after a key .
7085	Get the difference between two items .
7086	Get the value of a key .
7087	Pull an item from the collection .
7088	Returns a new collection with the values of the specified array intersected .
7089	Add a where condition to the query .
7090	Initialize from JSON .
7091	Converts a file to a container
7092	Initialize from serialized content .
7093	Decode a container from an encrypted string .
7094	Initialize from string .
7095	Add a WHERE condition to the query .
7096	Recursively iterates over an array and returns a new array .
7097	Converts an iterator to an array .
7098	Get a group by by key .
7099	Filter items recursively .
7100	Forget an item recursively .
7101	Recursively retrieve a unique value from an array .
7102	Get the value of a key .
7103	Adds or edits an object .
7104	Returns the command line option for the given value .
7105	Extract excerpts from posts .
7106	Fetches a value from an array .
7107	Forget the keys of an array .
7108	Get a value from an array .
7109	Check if a key exists in an array .
7110	Set a value in an array .
7111	Searches for a value in an array .
7112	Render a library .
7113	Deny htaccess access .
7114	Returns a new access token .
7115	Sets the input id .
7116	Set the bounding coordinates .
7117	Adds an autocomplete type .
7118	Removes an autocomplete type .
7119	Returns the component restriction for a given type .
7120	Sets the component restrictions .
7121	Adds a component restriction .
7122	Remove a component restriction .
7123	Sets the input attributes .
7124	Sets an input attribute .
7125	Identipattern method .
7126	Converts an Imagick object to a file .
7127	Compresses a file .
7128	Compress a svg file
7129	Compresses a PNG .
7130	Decode a data url .
7131	Returns a string representing a 1 px image .
7132	Convert a file extension to a format .
7133	Convert a file format to a file extension .
7134	Convert a file extension to a mime type
7135	Returns the compression type for the given format .
7136	Returns the compression quality for the given format .
7137	Set the format of the file .
7138	Change the format of a file
7139	Parse the format arguments .
7140	Sends the request and returns the response .
7141	Cleans the input data .
7142	Returns the maximum file size allowed .
7143	Renders a circle .
7144	Checks if a version is valid .
7145	Checks if the given version is a valid dev version .
7146	Checks if a version is valid stable .
7147	Create csrf file .
7148	Generates a hidden input element .
7149	Verifies a csrf string .
7150	Creates an instance from a global array .
7151	Get the form data as an array .
7152	Returns the form data .
7153	Get the JSON content of the request .
7154	Normalizes the qs - url - uri s AMQPs .
7155	Renders a map type .
7156	Returns the first email address in a given name .
7157	Returns the last occurrence of the given name .
7158	Convert a name to an acronym .
7159	Convert a variable name to a string .
7160	Checks if a string is a valid HTML tag .
7161	Validates a UUID .
7162	Returns the shard ID of a UUID .
7163	Validates a shard ID .
7164	Checks if the given UUID is a valid UUID .
7165	Validates a type ID .
7166	Get local id for a given UUID .
7167	Validates a local ID .
7168	Parse a UUID into an array of shard_id type_id and local_id
7169	Validates a shard ID type ID and local ID .
7170	Renders a polyline .
7171	Set the center of the coordinate .
7172	Set the coordinate latitude .
7173	Set the longitude .
7174	Sets the coordinate no wrapper .
7175	Sets the control position .
7176	Sets the scale control style .
7177	Get the status of the geocoder .
7178	Get a value from the cache .
7179	Get the sub - path of a shard .
7180	Get the sha1 keys for a given primary key and sub key .
7181	Get a class by name .
7182	Matches a string against a value
7183	Get a template file .
7184	Get the strength of a password .
7185	Checks if a sri id is present in the cache .
7186	Check if memcache is enabled .
7187	Check if a sri map is valid .
7188	Check if the map cache is valid .
7189	Checks the content of a URL .
7190	Cache a sri file .
7191	Enables or disables memcache .
7192	Get the map .
7193	Get the map cache .
7194	Check if the url is local .
7195	Checks if a variable is valid
7196	Convert variable to acronym .
7197	Convert a variable to its slug .
7198	Converts a variable to camelCase
7199	Render a Size .
7200	Check if the email is role - based .
7201	Parses an address string into an array of addresses .
7202	Parse headers .
7203	Parse attachments .
7204	Parses a content type to a representation .
7205	Parse a representation to a class name
7206	Calculate the difference between two numbers .
7207	UTF - 8 compliant url safe encoding .
7208	Decodes a base64 - encoded string to a url safe format .
7209	Create a new token .
7210	Generates a hidden input element .
7211	Verify if the session is active .
7212	Sets the origins .
7213	Calculate the human readable difference between two dates .
7214	Returns the items for the given keys .
7215	Renders a marker .
7216	Builds the JSON response .
7217	Render a MarkerShape
7218	Renders a scale control style .
7219	Check if slug is valid .
7220	Check if a slug is reserved
7221	Converts a slug to a name
7222	Convert a slug to a variable .
7223	Set the coordinates .
7224	Store the data in the cache .
7225	Returns all objects in the repository .
7226	Parse and return the parsed string .
7227	Sets the vars .
7228	Check if the file has a parent .
7229	Get parent vars .
7230	Get a template from a file .
7231	Returns the database seeder options .
7232	Renders a control .
7233	Encodes a string .
7234	Decodes a string .
7235	Calls an action .
7236	Renders a map .
7237	Get a value from the pool .
7238	Sets a value in the cache .
7239	Clear a key from the pool .
7240	Generate a unique key for a sub - key .
7241	Generate the nsp key .
7242	Check if the servers are different from each other .
7243	Maybe add server connections .
7244	Renders an html container .
7245	Render javascripts .
7246	Renders an Autocomplete object .
7247	Register the database seeder .
7248	Closes the connection at the beginning of the request queue .
7249	Turn gzip off .
7250	Sets the coordinate location .
7251	Set the direction stopover .
7252	Returns the upload error reason .
7253	Set a file extension .
7254	Change file extension .
7255	Check if the asset has an option .
7256	Returns an asset option .
7257	Sets an asset option .
7258	Removes an option .
7259	Modify the request attributes .
7260	Set the zoom control style .
7261	Decodes a hash id .
7262	Sets the results .
7263	Sets the response status .
7264	Check if string is valid .
7265	Checks if the current browser is a Gecko engine .
7266	Normalizes a value .
7267	Get the page URL .
7268	Sets whether or not the routes should be avoided .
7269	Set whether or not to avoid tolls .
7270	Sets the destinations .
7271	Adds a destination to the map .
7272	Add an origin to the coordinates .
7273	Sets the region for the distance matrix request .
7274	Sets the language of the distance matrix request .
7275	Set the travel mode
7276	Sets the unitSystem .
7277	Returns the control positions .
7278	Set the direction response status .
7279	Renders the overview map .
7280	Render a bound .
7281	Render the extends .
7282	Print all statistics .
7283	Sets the markers .
7284	Sets the helpers .
7285	Returns a helper by name .
7286	Sets the extension helpers .
7287	Returns an extension helper .
7288	Removes an extension helper .
7289	Renders the HTML container .
7290	Render the stylesheets for the given map .
7291	Render javascripts .
7292	Render javascript libraries .
7293	Renders the JavaScript before the given map .
7294	Render the javascript after the given map .
7295	Renders a javascript container
7296	Renders the javascript coordinates for the container .
7297	Render the bounds of a javascript container .
7298	Render javascript container points .
7299	Renders the javascript container sizes .
7300	Render a javascript container map .
7301	Renders the javascript circle map .
7302	Render javascript encoded polylines .
7303	Renders a javascript container s ground overlays .
7304	Render js container polygons .
7305	Renders polylines for a javascript container .
7306	Renders the rectangles of a javascript container .
7307	Render Javascript container info windows .
7308	Renders the JS container marker images .
7309	Renders a javascript container marker shape .
7310	Renders a javascript container marker cluster .
7311	Render javascript container KMLLayers .
7312	Renders a JS container event manager .
7313	Renders a javascript container .
7314	Render a map .
7315	Render a map center .
7316	Renders a bound map .
7317	Compute the coordinates for the given map .
7318	Compute the bounds of a map .
7319	Compute the points for a map .
7320	Compute the sizes for the given map .
7321	Compute the marker images .
7322	Computes the marker shapes for the given map .
7323	Compute the info windows for each marker in the map .
7324	Renders the map controls .
7325	Render a map control .
7326	Returns a string representation of a UuidGen version 1 .
7327	Returns a v3 UuidGen .
7328	Returns the v4 UUID .
7329	Returns the v4 x 2 UUIDs .
7330	Returns a package by name .
7331	Execute a callback for each item in the collection .
7332	Filter the collection using a callback .
7333	Adds a package contract to the collection .
7334	Set the address of the request .
7335	Sets the coordinate .
7336	Set the bounding coordinates .
7337	Sets the region of the request .
7338	Sets the language of the request .
7339	Load a file or directory .
7340	Returns a route .
7341	Parses a YAML string into an array .
7342	Set flags .
7343	Sort an array by key .
7344	Returns the HTTP request method .
7345	Returns the scheme of the connection .
7346	Returns the host name .
7347	Get the root host .
7348	Returns true if the connection is to an SSL server .
7349	Returns true if the host is a localhost .
7350	Sets the location type .
7351	- - - - - - - i a u M 0 e s c n v w - - - - - - - - -
7352	Returns the direction status .
7353	Overload data .
7354	Overload property data .
7355	Get writable overload property data .
7356	Overloads an object with data .
7357	Opens a URL .
7358	Sets the point anchor .
7359	Sets the point s origin .
7360	Sets the scaled size of the image .
7361	Sets the size of the image .
7362	Renders an InfoWindow .
7363	Renders the open tag .
7364	Renders an InfoWindow object .
7365	Register service providers .
7366	Get a URL for an asset .
7367	Load routes .
7368	Get the callable for a function .
7369	Renders a ground overlay .
7370	Emits the response body .
7371	Set a value in the cache .
7372	Get a sub - key from the cache
7373	Unsets a sub - key from the cache .
7374	Unset a pattern in the cache .
7375	Add a value to the cache by reference
7376	Unsets an item from the cache by reference
7377	Unset a key by a reference pattern .
7378	Renders a map type control .
7379	Returns the sql representation of the given value .
7380	Quotes a single value .
7381	Double quotes a value .
7382	Render a map type control style .
7383	Signs a URL .
7384	Returns a search term highlighter .
7385	Get the shard id of a string .
7386	Assigns the shard id to the given string .
7387	Set the travel mode .
7388	Set the prefix JavascriptVariable .
7389	Selects a list of options .
7390	Returns a list of dropdown items .
7391	Renders a control .
7392	Normalizes a string .
7393	Check if a value matches a regular expression .
7394	Normalize a value to a string .
7395	Returns a string with special characters bracketed .
7396	Converts a URL to a URI pattern .
7397	Sets the width unit .
7398	Sets the height unit .
7399	Generate a random key .
7400	Check if the given value is a valid 64 - bit integer .
7401	Strips a URL - URI QSL string .
7402	Parse a query string into an array of arguments .
7403	Builds a query string .
7404	Add a sha256 signature to the url .
7405	Removes the SHA - 256 signature from the URL .
7406	Check if a SHA - 256 signature is valid .
7407	Set the coordinates of the marker shape .
7408	Adds a poly coordinate to the MarkerShape
7409	Create a new customer .
7410	Update a customer .
7411	Returns the unit amount in the given currency .
7412	Get a scope entity by its identifier .
7413	Renders a scale control .
7414	Generates the URL for the given GeocoderRequest .
7415	Build a GeocoderResponse
7416	Build a GeocoderResult object from a GeocoderResult object .
7417	Returns an array of GeocoderAddressComponent objects .
7418	Build a GeocoderAddressComponent
7419	Builds a GeocoderGeometry object
7420	Process the DistanceMatrixRequest
7421	Generate a URL from a DistanceMatrixRequest
7422	Parse the response .
7423	Build a DistanceMatrixResponse
7424	Builds the distance matrix rows .
7425	Builds a DistanceMatrixResponseRow .
7426	Build DistanceMatrixResponseElement object
7427	Render a point .
7428	Extracts the parameters from a parameter string .
7429	Returns the parameters from the given string .
7430	Returns the current HTTP headers .
7431	Send the yes headers to the cache .
7432	Sends no - cache headers .
7433	Returns the slug for the given status .
7434	Returns the status message .
7435	Send a HTTP status header .
7436	Parse a header value .
7437	Returns HTML tags for a given value .
7438	Register migrations .
7439	Register the translations for the module .
7440	Set the pixed offset .
7441	Set the open event .
7442	Renders a control .
7443	Returns an array of mouse events
7444	Set map type ids
7445	Add a map type id
7446	Set the map type control style .
7447	Set a cookie s usage .
7448	Get the ue of a cookie .
7449	Render a DOM event .
7450	Renders a DOM event once .
7451	Renders an event .
7452	Renders an event once .
7453	Renders an animation .
7454	Renders a ZoomControl .
7455	Get max execution time .
7456	Check slug .
7457	Returns an array of address components .
7458	Sets the address components .
7459	Set partialMatch .
7460	Generate a Gravatar URL .
7461	Set the center of the coordinate .
7462	Returns true if the given map option exists .
7463	Set map options .
7464	Get a map option .
7465	Set a map option .
7466	Remove a map option .
7467	Checks if a stylesheet option exists .
7468	Sets the stylesheet options .
7469	Returns a stylesheet option .
7470	Sets a stylesheet option .
7471	Removes a stylesheet option .
7472	Set the map type control .
7473	Set the overview map control .
7474	Sets the pan control .
7475	Sets the rotate control .
7476	Sets the scale control .
7477	Sets the street view control .
7478	Set ZoomControl .
7479	Add a marker to the cluster .
7480	Adds an InfoWindow .
7481	Add a polyline .
7482	Adds an EncodedPolyline .
7483	Adds a polygon to the map .
7484	Adds a rectangle .
7485	Adds a circle .
7486	Adds a ground overlay .
7487	Sets a value in the cache file
7488	Deletes the file .
7489	Sets the avoidHighways property .
7490	Set the avoidTolls property .
7491	Sets the destination coordinate .
7492	Sets the optimizeWaypoints property .
7493	Set the origin of the coordinate .
7494	Set the provideRouteAlternatives property .
7495	Set the region of the direction request .
7496	Sets the language of the direction .
7497	Set the travel mode .
7498	Sets the UnitSystem .
7499	Sets the route waypoints .
7500	Add a new waypoint .
7501	Returns true if the route is valid .
7502	Performs a POST request with JSON data .
7503	Log an issue .
7504	Log a review .
7505	Writes log lines to file .
7506	Clean a log event .
7507	Rotate log files .
7508	Sends a response to the given URL .
7509	Parse a source string into a Contracts object .
7510	Builds a document .
7511	Parses a section of a string .
7512	Parse the metadata from a YAML string .
7513	Returns the value of a query variable .
7514	Get a template .
7515	Get a TwitterOAuth remote .
7516	Generate a remote hash .
7517	Transliterate a string to ASCII .
7518	Returns the distance matrix status .
7519	Strips leading characters from a string
7520	Sets the steps .
7521	Routes the request to the specified destination .
7522	Build directions response .
7523	Build directions routes .
7524	Build directions route
7525	Builds directions from an array of directions .
7526	Build directions leaf .
7527	Build directions steps .
7528	Build directions step .
7529	Lightens the image by a given percentage
7530	Darkens the image .
7531	Saturate the image with a given percentage .
7532	Desaturate the image with a given percentage
7533	Mixes the given HSL color with the given one .
7534	Start a new session .
7535	Checks if the given version is valid .
7536	Check if the given version is a valid dev version .
7537	Checks if the given version is valid and stable .
7538	Returns a string representation of a date .
7539	Returns the current time in seconds .
7540	Returns a new instance with all cache headers removed .
7541	Returns an instance with a success message .
7542	Returns a new instance with the specified error .
7543	Outputs the response .
7544	Set the body s legs .
7545	Sets the warnings .
7546	Sets the waypoint order .
7547	Renders the zoom control style .
7548	Get a metadata value .
7549	Issues an access token .
7550	Make a request to the resource server .
7551	Get AccessTokenRepository .
7552	Adds a value to the string .
7553	Remove a value from the string .
7554	Renders the json .
7555	Sets the list of elements .
7556	Renders a control position .
7557	Returns the current IP address .
7558	Returns the region for the given IP address .
7559	Returns the country for the given IP address .
7560	Determines if the request should be ajax .
7561	Check if the current request is an API
7562	Sets or gets the doing_rest_action property
7563	Checks if the user is doing an action .
7564	Subscribe a new user to a list .
7565	Get a single member from a list
7566	Update a user on a list .
7567	Delete a user from a list
7568	Returns a sha1 hexadecimal string .
7569	Adjusts the luminosity of a color .
7570	Cleans a hex string .
7571	Maybe empty numeric config arrays .
7572	Creates a new class .
7573	Create request body .
7574	Maybe empty numeric arrays .
7575	Renders a rectangle .
7576	Returns a string representation of the element .
7577	Converts an array to a DOMElement .
7578	Render a marker .
7579	Get the license number .
7580	Returns an array of Geometry libraries .
7581	Escapes the given order .
7582	Serializes a closure .
7583	Unserializes a closure .
7584	Maybe serialize a value .
7585	Unserializes a value if it s serialized .
7586	Returns the markup for an embed .
7587	Get the embedly cache .
7588	oEmbed via WordPress .
7589	Renders a polyline .
7590	Set the south - west coordinate .
7591	Set the North East Coordinate .
7592	Get the center of the coordinate .
7593	abbr bytes .
7594	Get remote bytes .
7595	Unset a string from a parts array .
7596	Renders a coordinate .
7597	Render a marker image .
7598	Parse an XML string and return the pluralized version .
7599	Pluralize XML .
7600	Creates an exception for the distance matrix request travel mode .
7601	Parse a host name into an array .
7602	Unparse the name and port parts .
7603	Set the position of the coordinate .
7604	Sets the marker animation .
7605	Sets the icon .
7606	Set MarkerShadow .
7607	Sets the shape of the Marker .
7608	Callback for header id .
7609	Get first image URL from markdown .
7610	Returns the attributes of a given value .
7611	Sets the bounding coordinates of the rectangle .
7612	Returns a message .
7613	Returns an array of error messages .
7614	Get the error data .
7615	Adds a new error .
7616	Add a coordinate to the coordinates array .
7617	Loads an HTML document .
7618	Minify the CSS and JS .
7619	Recursively indent a DOMNode .
7620	Post load event handler .
7621	Creates the set password view model .
7622	Get the organization entity .
7623	Create an error view model .
7624	Add a file to RoumenAsset .
7625	Reverse style order .
7626	Adds a file to be the first asset in the collection .
7627	Adds two files after each other .
7628	Add meta data .
7629	Renders the meta tag .
7630	Generate a view controller .
7631	Loads a file .
7632	Creates a query for the given parameters .
7633	Processes the email and sends invitation mail
7634	Validate an email address .
7635	Loads or creates a user .
7636	Loads the entity .
7637	Proxy a method to an organization
7638	Get the hiring organizations cursor .
7639	Finds an organization by name .
7640	Finds an entity by a user .
7641	Finds an entity by user or id .
7642	Creates an organization with the given name .
7643	Find a draft document by the given user .
7644	Initializes the contact form
7645	Check if a user is an employee .
7646	Update the user s permissions .
7647	Sets the organization name .
7648	Set the permissions .
7649	Get a single image .
7650	Set contact .
7651	Returns an array of employees .
7652	Get an employee by id .
7653	Returns all employees with the given role .
7654	Sets the email creation options .
7655	Initializes the form .
7656	Get the form to edit an organization .
7657	Returns the URI of an organization image .
7658	Store an organization image .
7659	Extracts referenced properties from an object .
7660	Hydrate a value .
7661	Check if a user is allowed to create a new job .
7662	Configure the form .
7663	Ensures that the order number is correct .
7664	Encrypts a merchant order using 3DES .
7665	Create merchant signature notif .
7666	Validates a notification signature
7667	Signs an order .
7668	Make a request to the API .
7669	Get Ticket Articles
7670	Make a request to the API .
7671	Make a POST request .
7672	Make a PUT request .
7673	Get for a specific ticket
7674	Get a value from the remote data .
7675	Gets information about an object .
7676	Get all values of the object
7677	Create a new object
7678	Updates the object .
7679	Deletes the object .
7680	Get the url for a method .
7681	Get a single object
7682	Add a new ticket
7683	Performs a search .
7684	Remove an item from the queue
7685	Tries to open a shmop file .
7686	Reads the proxy type from the table .
7687	Get the connection info for a given URL .
7688	Loads a user from the database .
7689	Executes all requests .
7690	Executes a callback for each item in the collection .
7691	Returns an item from the collection .
7692	Returns the source for the given id .
7693	Fetch data from the server .
7694	Validates a set of rights .
7695	Set a parameter .
7696	Add multiple parameters to the query .
7697	Make a request to the API .
7698	Save a photo
7699	Start callback .
7700	Get an access token
7701	Converts the hits to items .
7702	Search by query .
7703	Replaces all dot - separated characters except last - three .
7704	Replaces all dot - separated characters except the last two .
7705	Replaces all dot - separated characters except the last .
7706	Converts an intl formatter to a malot format
7707	Convert a malot formatter to an intl formatter
7708	Adds the picker node .
7709	Bind Alexa request .
7710	Register the middleware .
7711	Resume the audio player .
7712	Get the Alexa request instance .
7713	Adds the request middleware to the beginning of the class .
7714	Check if the given route matches the given request .
7715	Creates a new Alexa route .
7716	Get the value of a session variable .
7717	Updates a slot .
7718	Returns all validators .
7719	Compiles the route .
7720	Get the certificate from the signature chain .
7721	Prepare response data .
7722	Send a request through the router .
7723	Gathers the application middleware .
7724	Persists a certificate .
7725	Retrieves a certificate from the store .
7726	Calculates the file path for a given certificate chain URI .
7727	Sets the custom protected words .
7728	Capitalizes a string .
7729	Normalizes the input .
7730	Processes the given string parts .
7731	Process first sentence words in parts .
7732	Process last word in parts .
7733	Process a word .
7734	Replaces a pattern in a string .
7735	Get the pro suffix for a given name .
7736	Breaks a string into a list of words
7737	Checks if a word is a salutation .
7738	Checks if a word is a line suffix .
7739	Generate Emoji PHP constants .
7740	Creates a new hacksaw string .
7741	Emoji formatter .
7742	Get the first word in a string .
7743	Checks if a thingy is a string .
7744	Get the last word in a string .
7745	Converts a roman numeral string to lower case .
7746	Processes a string as Markdown .
7747	Read a number of words at a given time .
7748	Generates a smarty pants .
7749	Returns the substring after the first character of a string .
7750	Get the substring after the last occurrence of a separator .
7751	Returns the substring before the first character of a string .
7752	Returns the substring before the last character .
7753	Returns the title of a string .
7754	Trims a string .
7755	Trim a string to the left .
7756	Trim a string to the right
7757	Typegrify a string .
7758	Converts a roman numeral to upper case .
7759	Generates a widont .
7760	Get a setting by name .
7761	Get icon .
7762	Convert the composer object to an array .
7763	Displays a listing of a blog tag .
7764	Show a post .
7765	Store a new tag in the session .
7766	Show tag for editing .
7767	Update a tag .
7768	Delete a tag .
7769	Display a list of tools .
7770	Clears the cache .
7771	Handle the download process .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Handle configs .
7775	Handle translations .
7776	Loads and publishes the views
7777	Show profile page .
7778	Update a user profile .
7779	Authenticate a user .
7780	Returns the current extension version .
7781	Fills the post data .
7782	Enable an extension .
7783	Disable an extension .
7784	Uninstall an extension .
7785	Migrate an extension .
7786	Get a collection of enabled bootstrappers .
7787	Sanitise the input source .
7788	Lists all the posts .
7789	Get the post fields from a model .
7790	Get post index data for a given tag .
7791	Get normal index data .
7792	Store a new post .
7793	Update a post .
7794	Publish theme to public directory .
7795	Publish theme views .
7796	Unthemed a theme .
7797	Get the default theme .
7798	Returns the active key .
7799	Get the general route middleware .
7800	Get the installed route middleware .
7801	Get admin middleware .
7802	Returns the blog main path .
7803	Get the blog prefix .
7804	Get the admin prefix .
7805	Get the auth prefix .
7806	Get the password prefix .
7807	Display a list of posts and tags .
7808	Generates the request data .
7809	Scan a file .
7810	Performs a multi - scan on a file
7811	Performs a CONTSCAN command .
7812	Read a response from the socket .
7813	Process a single file .
7814	Validate a file .
7815	Sanitize a file name .
7816	Deletes a file .
7817	Moves an uploaded file to a new location .
7818	Get a list of themes .
7819	Get an asset url .
7820	Returns the version of an asset .
7821	Get the path to a theme .
7822	Make directory .
7823	Make a file .
7824	Get the asset path for a theme .
7825	Get the template content .
7826	Creates new assets .
7827	Fetches the translation for the given message .
7828	Updates the translation of a message .
7829	Flag a translation .
7830	Create an asset for a message .
7831	Downloads all translations .
7832	Uploads all translations .
7833	Synchronize all translations .
7834	Triggered when the archive is terminated .
7835	Copy values from parent to project .
7836	Adds a hash for a given type .
7837	Returns the value of the directive .
7838	Searches for classes in the composer class map .
7839	Searches for all PSR - 4 prefixes .
7840	Sync many to many relations after save .
7841	Before query .
7842	After query callback .
7843	Sync new wastage items .
7844	Sync existing wastage items .
7845	Find a product item by key .
7846	Checks the integrity of an item .
7847	Builds the item data .
7848	Fills the attributes of an entity .
7849	Setup default criteria .
7850	Perform an action on an object .
7851	Executes the given action before or after the given action .
7852	Returns true if the action is valid .
7853	Perform a query and return the result .
7854	Paginate the results .
7855	Toggle exceptions .
7856	Applies criteria to a query .
7857	Updates an entity with the given attributes .
7858	Executes a query and returns a list .
7859	Find a record by its key .
7860	Finds a record by the given criteria .
7861	Fetches a record by a criteria .
7862	Returns a collection by keys .
7863	Returns a list of records .
7864	Creates a new attribute query .
7865	Replace config value placeholders .
7866	Set the view path .
7867	Sends a file to the client
7868	Returns the mime_content_type of a file .
7869	Map exceptions to DispatchInfo objects .
7870	Sets an aspect definition
7871	Set a pointcut definition .
7872	Returns the value of an aspect manager pointcut .
7873	Returns an array of files that can be used for class scanning .
7874	Check if a path is scannable .
7875	Converts a PHP error type to a string
7876	Dispatches the request to the action handler .
7877	Invokes a method on an object .
7878	Checks if the current connection has an activity .
7879	Returns a bean definition by name
7880	Searches and replaces properties .
7881	Get the constructor arguments for a given definition .
7882	Instantiate a bean by its constructor .
7883	Instantiate bean by factory class .
7884	Instantiate a bean definition using the factory bean .
7885	Instantiate a bean definition .
7886	Create bean dependencies .
7887	Applies an aspect definition to a target class
7888	Apply specific aspects to a bean definition .
7889	Apply the global aspects to the bean definition .
7890	Applies specific and global aspects to a bean definition .
7891	Creates a bean .
7892	Setup init and shutdown methods .
7893	Injects a method into a bean if it is not set .
7894	Injects a property into a bean
7895	Get a bean by name .
7896	Returns a container instance .
7897	Fills a bean definition with information about the bean .
7898	Handle a signal .
7899	Loads a class .
7900	Makes a bean with the given name .
7901	Populates classes by annotations .
7902	Loads XML files .
7903	Loads the bean from the XML file .
7904	Closes the socket
7905	Opens the socket .
7906	Frees a peer .
7907	Creates a class based on the passed proxy methods .
7908	Create a parameter from a ReflectionParameter
7909	Creates a method .
7910	Creates a proxy class .
7911	Loads YAML files .
7912	Loads the . yaml file
7913	Loads the ami client .
7914	Opens the event listener .
7915	Returns a cache instance based on the given options .
7916	Called after a bean has been defined .
7917	Register lifecycle listeners before create .
7918	Called after a bean is created .
7919	BeforeAssemble loops through lifecycle listeners .
7920	AfterAssemble method .
7921	Opens the log .
7922	Returns the interceptors for the given method .
7923	Returns all exception interceptors for a given method .
7924	Calls the interceptors in the given method invocation .
7925	Invokes the exception interceptors for the given method .
7926	Invokes the interceptors of a method .
7927	Closes the socket .
7928	Reads from a buffer .
7929	Opens a connection to the TCP server
7930	Add an array of objects to the collection .
7931	Build a URI from a file path and line .
7932	Overwrite the app config .
7933	Resolves a file path .
7934	Returns a published drop down list .
7935	Finds the page model based on its alias .
7936	Build a new link instance .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Registers translations .
7939	Registers the JavaScript needed to render the dropdown menu .
7940	Vote for an object .
7941	Get the from address .
7942	Loads a user by its username .
7943	Hydrate a user object
7944	Create a new user .
7945	Sets the password of a user .
7946	Checks if a user s password matches the given one .
7947	Check if user is logged in .
7948	Find one user by criteria .
7949	Returns all records matching the given criteria .
7950	Creates the SQL for the common find query
7951	Returns the number of records matching the given criteria .
7952	Inserts a new user into the database
7953	Update a user .
7954	Deletes a user .
7955	Validates a user .
7956	Clears the identity map .
7957	Logs in as a user .
7958	Initializes the pcntl signal
7959	Reaper worker .
7960	Wait for the worker to complete .
7961	Get a result from the socket .
7962	Returns all pending processes .
7963	Applies a function to the pool .
7964	Get the number of pending jobs .
7965	Send data to a socket .
7966	Fetch data from a socket
7967	Migrate down data .
7968	Registers a new user .
7969	Confirm email action .
7970	Displays a login form .
7971	Resends a confirmation email to a user .
7972	View a user .
7973	Edit a user .
7974	Validates the email address .
7975	Connect to the service provider .
7976	Returns a list of priority formats .
7977	Format the Accept header .
7978	Format the response .
7979	Detect the . env file .
7980	Get the Accept header from the request .
7981	Creates a new instance of  Skrz  Meta  Fixtures  Protobuf  Middleware
7982	Run the middleware .
7983	Handle an action .
7984	Get the domain payload .
7985	Get the response from the responder .
7986	Get the HTTP status code .
7987	Get a command from a resource .
7988	Run before commands .
7989	Get the per page value from the model class .
7990	Adds where statements to the query .
7991	Bootstrap the application .
7992	Set the allow method .
7993	Sets the pattern .
7994	Returns the token for this pattern .
7995	Returns the current regex .
7996	Returns compiled variables .
7997	Matches a request against a host .
7998	Builds a list of variables from the given values .
7999	Dispatch middleware .
8000	Generates a link .
8001	Compiles the rule .
8002	Check if a request matches a given request .
8003	Generates a link .
8004	Tokenizes a pattern .
8005	Tokenizes a pattern .
8006	Tokenize a segment .
8007	Splits a pattern into segments .
8008	Compile a token into a regular expression .
8009	Converts an array of options into a scope .
8010	Binds a route to a pattern .
8011	Groups a route into a set of routes .
8012	Generate a route for the given request .
8013	Normalizes a request .
8014	Generates a route for the given request
8015	Create a link to a route .
8016	Clears the cache .
8017	Creates the javascript code for the current workflow .
8018	Returns the hash of the file .
8019	Get the access token .
8020	List AddressBooks .
8021	Get email addresses from book
8022	Add emails to a book
8023	Campaign cost .
8024	Create a campaign .
8025	Add a sender
8026	Activate a sender
8027	Lists all subscriptions for a website
8028	Set a subscription state
8029	Create a push task
8030	Returns the hash name for the sendpulse API .
8031	Send a POST request to the website .
8032	Sends the request to the API .
8033	Checks if the user provided an account .
8034	Decodes a new line encoded response .
8035	Decodes a url encoded response .
8036	Returns a list of all messages in a folder .
8037	Mark an imap as processed .
8038	Get the type of the mail .
8039	Auto Refund .
8040	Auto apply SSL
8041	Auto - replace SSL certificate
8042	Auto Revoke SSL
8043	Collect SSL .
8044	Get a list of DCV addresses
8045	SSH checker .
8046	Web Host Report
8047	Enters the correct Domain Control Validation Code
8048	Create an exception from a response array .
8049	Generates the meta tag
8050	Sets the description .
8051	Resets all properties .
8052	Register the plugin s bindings .
8053	Generates the OPENGRAPH template .
8054	Adds a raw entry .
8055	Prepare the data .
8056	Checks if a given url exists in the collection .
8057	Validate sitemap data .
8058	Fills the command list with the given command index .
8059	Fill the value with the given type .
8060	Adds an index to the query .
8061	Sets the parameter type .
8062	Set index settings .
8063	Deletes a record from the database .
8064	Creates a new command .
8065	Update settings .
8066	Executes the raw request
8067	Convert the request body to json .
8068	Sort a value .
8069	Add facets to the query .
8070	Composes the final query .
8071	Converts the given parameters to an array .
8072	Adds a node to the cluster
8073	Add a must condition .
8074	Deletes a document .
8075	Sets the documents method .
8076	Executes the command .
8077	Creates a new request instance .
8078	Make a POST request to the API .
8079	Make a PUT request .
8080	Make a DELETE HTTP request .
8081	Executes all pending requests .
8082	Adds multiple options at once .
8083	Executes the request .
8084	Parse all nodes .
8085	Add a document to a batch .
8086	Execute the current command .
8087	Finalizes the current command .
8088	Check the current command .
8089	Get Gallery .
8090	Initialize a new album .
8091	Initializes a new album
8092	Generate the album name .
8093	Upload an album
8094	After delete callback .
8095	Returns the resize to size array .
8096	Adds image styles to the gallery .
8097	Delete all versions of a picture
8098	Save a picture to an album
8099	Create extra images .
8100	Zebra_Image function .
8101	Prepares an image for rendering .
8102	Configure Gallery .
8103	Configures the database .
8104	Create the Gallery config file .
8105	Checks the summaries for all operations to generate docs
8106	Generates the code block .
8107	Generates a link to upload pictures
8108	Showroom widget .
8109	Showroom template .
8110	Loads Google API scripts .
8111	Delete a picture .
8112	Sorts photos .
8113	List Channel Sections .
8114	Start thread .
8115	Stops the process .
8116	Kills the process .
8117	Send a payload to the socket .
8118	Handle onWorkerStart event
8119	Fork thread .
8120	Creates an AuthnRequest instance .
8121	Parse SAML Response
8122	Returns all binaries matching the given predicate .
8123	Get pending binary .
8124	Updates a binary .
8125	Updates a binary .
8126	Starts a Selenium process .
8127	Cleans all installed files .
8128	Assert that the start conditions are met .
8129	Register binary drivers .
8130	Creates a new binary .
8131	Returns a valid external url value .
8132	Returns the Linux file name .
8133	Saves the file to a directory .
8134	Called when a notification is received .
8135	Watch the progress bar .
8136	Get a pre - message .
8137	Get a post message .
8138	Adds a pipe to the pipeline .
8139	Convert an item .
8140	Convert an item value .
8141	Writes an item to the pipe .
8142	Get the value from the value container .
8143	Validate a password against a password policy
8144	Get the taxonomy for the given entity .
8145	Checks if the given value is valid for the given entity .
8146	Get the taxonomy descriptor .
8147	Get env value
8148	Returns the client s IP address
8149	Returns the current URL .
8150	Unparse a query string .
8151	Checks if a property is set .
8152	Lookup a given address
8153	Checks if a value contains a specific action .
8154	Performs the action defined in the config file
8155	Removes an item from the end of an array .
8156	Moves an item up in an array .
8157	Updates the form read .
8158	Get a field from a payload .
8159	Returns the item matching the given uuid .
8160	Calls the given callable on each item in the form .
8161	Returns the item matching the given uuid
8162	Replaces variables in the given value .
8163	Loads configuration from JSON data .
8164	Load a configuration url from a JSON file .
8165	Set the latitude and longitude of the coordinates .
8166	Get the latitude longitude .
8167	Return a JsonResponse for error messages .
8168	Redirect to form .
8169	Creates a new aggregate for a user .
8170	Removes a form item .
8171	Check if AutoloadDump should be used .
8172	Returns an array of plugin class names for a package .
8173	Get install name .
8174	Guesses install name from package name .
8175	Maps a package s root package to a package s root package .
8176	Writes the plugin config .
8177	Get the root package .
8178	Returns the install path for a package .
8179	Initialize the install directory for the given package type .
8180	Generate the layout meta palette .
8181	Returns the meta palette of a palette .
8182	Creates a new exception when the context stack is empty .
8183	InitializeLayout event handler .
8184	Build the context config .
8185	Returns a color from the cache .
8186	Rotates the color .
8187	Converts a HSV color to a RGB color .
8188	Enters a context .
8189	Leave the current context .
8190	Switches the context .
8191	Load config from bundles .
8192	Sets the config types argument .
8193	Returns an array of templates for the given DataContainer .
8194	Page picker .
8195	Returns all articles .
8196	Returns all modules .
8197	Prepare a template for rendering .
8198	Parse the buffer for a template .
8199	Registers tagged services .
8200	Initializes the environment .
8201	Initializes the layout .
8202	Adds a child element
8203	Compiles a node .
8204	Compiles a node .
8205	Throws an exception .
8206	Get the PHP type for a doctrine type .
8207	Returns the file reflector for the given class .
8208	Gets a doc block for a class property .
8209	Get the DocBlock from a class property .
8210	Gets the DocBlock from a class method .
8211	Returns the PHP type and class name for a given doc type .
8212	Login a user .
8213	Initializes the client .
8214	Get the login token .
8215	Performs a search .
8216	Extract a value from a list of extractors
8217	Get all tags .
8218	Downloads an image from a directory .
8219	Returns a list of all wallpapers .
8220	Downloads all wallpapers from a directory .
8221	Extracts a property from a mutator .
8222	Extracts a property from an accessor .
8223	Extracts a type from a reflection type
8224	Check if a property is public .
8225	Returns the accessor method for the given property .
8226	Returns the mutator method for the given class and property .
8227	Get the property name for a method name .
8228	Load the Laravel service container .
8229	Creates a new application instance .
8230	Sets a value .
8231	Sets multiple values at once .
8232	Removes a section from the content .
8233	Merge a section .
8234	Renames a value .
8235	Renames a section .
8236	Reads an INI file .
8237	Reads an INI file and merges it with the given content .
8238	Merges two IniObjectContent objects .
8239	Converts an ini value to a string .
8240	Sets the top ini content .
8241	Sets the top ini content
8242	Returns the values for a given section .
8243	Removes a value from the modifiers .
8244	Removes a section .
8245	Sets a value in the overrider .
8246	Sets a value on master .
8247	Sets values on master .
8248	Gets a value from the master .
8249	Returns the values for the given section .
8250	Remove a value from the IniModifier .
8251	Removes a value from the master .
8252	Check if a section exists .
8253	Returns the values of a section .
8254	Creates a file loader for the given type .
8255	Get class name by short type .
8256	Make a cookie .
8257	Execute the command .
8258	Determines the file to use for the given output .
8259	Asks the user which bundle to convert .
8260	Writes the new config to the given file .
8261	Creates a dumper for the given type .
8262	Converts a string to a new format
8263	Read session data from storage .
8264	Returns an array of routes .
8265	Sort an array using a callback function .
8266	Sets the current offset .
8267	Collects the data to be rendered .
8268	Put the content to a file .
8269	Returns a config reader .
8270	Run a route .
8271	Gathers the middleware for the given route .
8272	Flattens a multi - dimensional array .
8273	Loads the configuration files .
8274	Returns a closure that can be used to slice through a stack .
8275	Parse a stage string .
8276	Call a Symfony command .
8277	Set the default values for a command .
8278	Returns a string representing a PHP binary string .
8279	Generates a cerebro binary string .
8280	Run a Symfony command .
8281	Returns the default input definition .
8282	Build MatchedRouteDataMap from an array of routes .
8283	Adds a route to a node .
8284	Returns the matcher for the given parameter index map .
8285	Creates a FilesystemManager instance .
8286	Creates a new cache factory .
8287	Returns the duration of the executed statements .
8288	Returns the memory usage of the executed statements .
8289	Performs a profile call .
8290	Resolve an alias .
8291	Returns true if the pattern matches the translation .
8292	Creates a twig engine instance .
8293	Extend the Twig view factory .
8294	Extend the engine resolver .
8295	Create a Twig environment .
8296	Creates a twig loader .
8297	Parse data .
8298	Creates a respect validation rule .
8299	Create a non - negative or optional validator based on a filter .
8300	Create respectable validators .
8301	Parse a string rule .
8302	Parse the parameters of a rule .
8303	Starts the server process .
8304	Stop web server .
8305	Get address from pid file
8306	Check if a pid file is running .
8307	Creates a process for the web server .
8308	Returns all event listeners for the given event name .
8309	Removes a listener from an event pattern .
8310	Check if subject has wildcards .
8311	Adds a listener pattern .
8312	Reads mandatory options .
8313	Build a multidimensional array .
8314	Prepares the response for the given exception .
8315	Returns a response object .
8316	Returns the displayer for the given request .
8317	Get filtered displayers .
8318	Returns the sorted list of accepts .
8319	Add route lookups .
8320	Adds an address to the list .
8321	Creates a new AssetsRenderer instance .
8322	Register the base collectors .
8323	Register collectors from config .
8324	Extends the event manager .
8325	Creates a session manager .
8326	Create a route dispatcher .
8327	Creates a router instance .
8328	Creates a UrlGenerator instance .
8329	Detects the current console environment .
8330	Get the value of the environment argument .
8331	Returns a js response .
8332	Creates a Toml object from an array .
8333	Processes an array of arrays .
8334	Get pretty meta data .
8335	Returns the loader paths .
8336	Builds the table rows .
8337	Get Whoops instance .
8338	Add the where clauses to the route .
8339	Merge the group attributes into the route .
8340	Converts an action to a controller action .
8341	Prepends the group namespace to the stack .
8342	Get the prefix for the URI .
8343	Update the group stack .
8344	Creates a new sanitizer instance .
8345	Adds a callback to be called before the application bootstrapping .
8346	Adds a callback to the bootstrapped callbacks array .
8347	Bootstraps the application using the given bootstraps .
8348	Calls boot callbacks .
8349	Generate session id .
8350	Merge new flashes .
8351	Load session data from handler .
8352	Read data from handler .
8353	Write data to handler .
8354	Resolve the current page .
8355	Secure a query input .
8356	Extend the event manager .
8357	Get a list of files and directories .
8358	Returns a list of Twig files .
8359	Validate the given template and file .
8360	Displays the given details .
8361	Displays a text message .
8362	Parse a middleware group .
8363	Check mandatory options .
8364	Returns an array of configuration dimensions .
8365	Validate options .
8366	Checks for deprecated options .
8367	Registers a resource .
8368	Get the resource URI .
8369	Get the wildcard for a resource .
8370	Get resource prefix .
8371	Adds a resource destroy action to the router .
8372	Get a nested resource URI .
8373	Returns a resource action .
8374	Get resource route name .
8375	Slice through the container .
8376	Get the request handler middleware .
8377	Finds argument files .
8378	Returns the current IP address .
8379	Checks if an IP address is valid .
8380	Returns the first IP address from a header .
8381	Set the domain .
8382	Validate middleware input .
8383	Validates a middleware .
8384	Creates a TranslationManager instance .
8385	Create a new scheduler instance .
8386	Returns the computed data for the given index .
8387	Creates a new Swift_Mailer instance .
8388	Creates a Mailer instance .
8389	Sets the global address .
8390	Creates a tooltip group
8391	Create tabs .
8392	Creates a table .
8393	Creates the dropdown menu content .
8394	Creates a list of metrics .
8395	Clone a variable .
8396	Get VarCloner instance .
8397	Get the HtmlDumper instance
8398	Appends code to the end of the string .
8399	Appends a line of code .
8400	Adds the Twig extensions .
8401	Performs a sort on the middleware .
8402	Move a middleware from one position to another .
8403	Create an aggregate driver .
8404	Creates an emergency log driver .
8405	Creates a monolog handler .
8406	Creates a new Monolog log driver .
8407	Creates a Syslog handler .
8408	Creates a new error log driver .
8409	Create slack handler .
8410	Creates a custom logger .
8411	Creates a monolog driver .
8412	Push processors to Monolog driver .
8413	Create a new server request from an array .
8414	Singularizes a value .
8415	Matches a value against a case comparison .
8416	Creates a local adapter instance .
8417	Create Cerebro application .
8418	Merges two arrays .
8419	Format group suffix .
8420	Checks for a specific environment file .
8421	Sets the path to the environment file .
8422	Get a Swift_Transport instance .
8423	Create a new transport .
8424	Check if a transport is available .
8425	Creates a Swift_SmtpTransport instance .
8426	Create a new MailgunTransport instance .
8427	Creates a new SparkPostTransport instance .
8428	Create SesTransport .
8429	Creates a repository instance .
8430	Update the RouteTreeNode .
8431	Register console events .
8432	Extend Twig environment .
8433	Register the Twig extension for Visio Twig .
8434	Returns an array of allowed HTTP methods .
8435	Adds a route to the route map .
8436	Checks if the current stream is a pipe .
8437	Add a mime type to the list of supported mime types
8438	Adds a new parser .
8439	Parses a payload into an array .
8440	Returns a ParserContract for the given type .
8441	Get the MIME type of the payload .
8442	Setup the class .
8443	Returns the request duration .
8444	Stops a measure .
8445	Add a measure to the request .
8446	Identifies the given exception as a string .
8447	Generates a UUID4 .
8448	Sets the headers .
8449	Validates the HTTP protocol version .
8450	Checks if an array contains only strings .
8451	Filter a header value .
8452	Get the retry time .
8453	Returns the Invoker instance .
8454	Creates a new exception for an invalid type .
8455	Extends the given container with a CacheItemPool .
8456	Extend a simple traceable cache .
8457	Get an environment variable .
8458	Parse a parameter .
8459	Replaces the parameter key with the new value .
8460	Creates the table .
8461	Get the PDO connection .
8462	Establishes a PDO connection .
8463	Get all files in a given directory .
8464	Render into html .
8465	Returns the modified time of the asset .
8466	Runs the callback .
8467	Skip a scheduled cron job without overlapping .
8468	Extend the log manager .
8469	Extends the profiler .
8470	Imports a DOMDocument .
8471	Load a DOMDocument from a file
8472	Loads XML from a string .
8473	Converts a string to a PHP value .
8474	Validates a DOMDocument against a schema .
8475	Converts a string to a string .
8476	Checks if an entry is a header .
8477	Adds references to the given data .
8478	Processes an obsolete entry .
8479	Process the previous entry .
8480	Extracts multiple lines from an entry .
8481	Extracts the headers from the given array .
8482	Checks if a file exists .
8483	Sets the upload error status .
8484	Sets the stream or file to upload .
8485	Validate that the upload is active .
8486	Mock a service .
8487	Parse a command expression .
8488	Parses a token into an InputArgument object .
8489	Parses an option token and returns an InputOption object .
8490	Extracts the description from the token .
8491	Validates the cookie name .
8492	Validate the cookie value .
8493	Sets a value for a key .
8494	Get the to addresses for the message .
8495	Create a mongodb driver .
8496	Create a new Redis cache pool instance .
8497	Create a predis driver instance .
8498	Create a new FilesystemCachePool instance .
8499	Create a new Memcached driver instance .
8500	Creates a new Memcache instance .
8501	Returns a data collector .
8502	Compiles a list of routes .
8503	Creates the template for a route class .
8504	Compiles a route tree .
8505	Compiles a route for HTTP method match .
8506	Compiles a HTTP_METHOD or NOT_FOUND clause into a PHP code .
8507	Compiles the found route into PHP code .
8508	Get the debug logger .
8509	Returns the count of computed errors .
8510	Group log levels .
8511	Returns the listener .
8512	Binds an event to the event manager .
8513	Unbinds the event listener from the event manager .
8514	Creates a regular expression for the given event pattern .
8515	Returns the value of a given key .
8516	Sets a value to a key .
8517	Processes the parameters .
8518	Process a parameter using the parameter processors .
8519	Renders the exception .
8520	Renders the exception editor .
8521	Render the exception trace .
8522	Returns the backtrace for the given exception .
8523	Returns the frames for the exception .
8524	Formats the arguments .
8525	Gets the lines from a file .
8526	Get the contents of a file .
8527	Normalizes a path name .
8528	Resolves a binding .
8529	Resolves a class .
8530	Resolves a method .
8531	Resolves a dependency .
8532	Resolves a set of parameters from a reflection .
8533	Get the ReflectionMethod for the given method .
8534	Check if value is a function .
8535	Merges the given parameters with the root parameters .
8536	Writes a file to the filesystem .
8537	Puts the contents of a file to the storage .
8538	Updates a stream .
8539	Decrypt a stream .
8540	Encrypt a stream .
8541	Decrypts a string .
8542	Encrypts a string .
8543	Read a stream from a string .
8544	Create a new TransportFactory .
8545	Creates a MailManager instance .
8546	Returns the version number of an XLIFF document .
8547	Returns the schema for a given xliff version .
8548	Fixes the location of the xliff file .
8549	Parse the visibility .
8550	Sanitizes an array of data .
8551	Run global sanitizers .
8552	Sanitizes a field .
8553	Executes a sanitizer .
8554	Resolve callback .
8555	Resolves an expression .
8556	Creates a command from an expression .
8557	Returns the default values for a command via reflection .
8558	Assert that the callable is valid .
8559	Is static call to non static method .
8560	Creates a cookie jar .
8561	Converts a DOMDocument to an HTML element .
8562	Adds a node to a document .
8563	Adds a collection node to the given document .
8564	Creates a root element .
8565	Casts the stub to an object .
8566	Returns an array of listeners that have been called .
8567	Returns an array of not called listeners .
8568	Validate that two sites are the same .
8569	Normalize the expiration time .
8570	Normalize a domain name .
8571	Normalizes a path .
8572	Get the timestamp of the cookie .
8573	Start an event .
8574	Applies the helpers to the given translation .
8575	Filter helpers from a translation string .
8576	Apply the filters to the translation .
8577	Logs a translation .
8578	Collects a message from the catalogue .
8579	Displays a list of files .
8580	Displays a JSON file .
8581	Returns a generator for the given file or directory .
8582	Get the STDIN string .
8583	Returns a recursive iterator for a directory .
8584	Validate the event name .
8585	Converts a number to bytes .
8586	Converts a number to an integer .
8587	Get config from adapter name .
8588	Create an extension .
8589	Adds a format extractor .
8590	Creates an alias loader .
8591	Returns the cache path .
8592	Push a command to the queue .
8593	Checks if a command should be queued .
8594	Create cookie session handler .
8595	Creates the MigratingSessionHandler .
8596	Creates a new session instance based on the provided cache driver .
8597	Build a session instance .
8598	Build the encrypted session .
8599	Parse a URI and return a list of uses .
8600	Returns the first value in an array .
8601	Parse Notes from SimpleXMLElement
8602	Convert a string from UTF - 8 to a charset .
8603	Adds a tag to the data .
8604	Creates a LogManager instance .
8605	Confirm to proceed .
8606	Get the default confirmation callback .
8607	Injects the profiler into the response .
8608	Collect data from collectors .
8609	Create a template for the token .
8610	Creates a new profile .
8611	Parse log level .
8612	Start a new session .
8613	Stores the current url .
8614	Collect the garbage from the session .
8615	Add a cookie to the response .
8616	Create a response view .
8617	Find a template by name .
8618	Normalizes a file name .
8619	Parse a view .
8620	Adds content to a message .
8621	Send a Swift message .
8622	Determine if a message should be sent .
8623	Create a new Message .
8624	Call a message builder .
8625	Creates a view .
8626	Handle a found route .
8627	Prepares URI path .
8628	Generate the route file .
8629	Generate route cache directory .
8630	Returns the path to a file .
8631	Checks if an option is supported .
8632	Get a Parser instance .
8633	Returns the required file path .
8634	Require a file only once .
8635	Create a symlink .
8636	Sets a list of directories .
8637	Add a directory .
8638	Imports a language file .
8639	Adds a message catalog .
8640	Set the fallback language .
8641	Returns the fallback language for the given language .
8642	Add a presenter .
8643	Check for more pages .
8644	Returns the display address .
8645	Finds the front controller .
8646	Finds the best hostname and port for the given configuration .
8647	Find the best port to run the web server on .
8648	Escapes special characters .
8649	Returns an array of sorted menus and icons .
8650	Creates an append stream .
8651	Parses an array of tokens into an array of messages .
8652	Seek to the next relevant token .
8653	Returns the value of the given token iterator .
8654	Creates a new TraceablePDODecorator instance .
8655	Decrypts the request cookies .
8656	Encrypts the response .
8657	Duplicate a cookie .
8658	Register a Symfony command .
8659	Get the Cerebro console instance .
8660	Initialize the project directories .
8661	Find a view by namespace .
8662	Returns the namespace segments for the given view .
8663	Find a view in the given paths .
8664	Get possible view files .
8665	Get event information .
8666	Renders the set - cookie header into the given response .
8667	Extend the Twig environment .
8668	Returns an array of messages .
8669	Adds a message to the message array .
8670	Add an alias to a middleware .
8671	Get the logs from a socket .
8672	Handle a view exception .
8673	Returns an ErrorException based on the given exception .
8674	Returns the cache path .
8675	Ensure that the staticalproxy alias exists .
8676	Formats a statical proxy stub .
8677	Register markdown engine .
8678	Clean export string .
8679	Adds the tcomment to the output .
8680	Adds references to the output .
8681	Adds the flags to the output .
8682	Adds the previous entry to the output
8683	Adds the msgid to the output .
8684	Adds the msgid_plural to the output .
8685	Adds msgstr to output .
8686	Add the header to the output .
8687	Returns pagination links .
8688	Creates a connection to the cache .
8689	Ensure that the user is correct .
8690	Returns true if the expression passes validation .
8691	Run the command in the foreground .
8692	Run the command in the background .
8693	Call the before callbacks .
8694	Call the afterCallbacks .
8695	Returns a closure that checks if a date is within a time interval .
8696	Checks if a date range is between midnight and midnight .
8697	Merges two arrays of CompoundMatcher objects .
8698	Optimize matchers .
8699	Optimize a segment matcher .
8700	Optimizes the matcher order .
8701	Creates a new HtmlDisplayer instance .
8702	Creates a ViewDisplayer instance .
8703	Creates a WhoopsPrettyDisplayer instance .
8704	Get the number of recipients for a Swift_Mime_SimpleMessage .
8705	Bootstraps the application .
8706	Handle a request .
8707	Render an exception .
8708	Pipe a request through middleware and router .
8709	Compile the parameters into a string .
8710	Sets a value at a given offset .
8711	Returns the Invoker instance .
8712	Adds a plain binding .
8713	Binds a service to the container .
8714	Binds a singleton .
8715	Resolves a plain binding .
8716	Resolve a service binding .
8717	Resolve a singleton binding .
8718	Extend resolved bindings .
8719	Contextual binding format .
8720	Returns the message ID from the response .
8721	Converts an array of email addresses to an array .
8722	Returns the MIME part for the given message and mime type .
8723	Get the message payload .
8724	Process the recipients of the message .
8725	Processes the message parts .
8726	Processes the message headers .
8727	Checks if all requirements are met .
8728	Returns the extension for the given path .
8729	Returns a view instance .
8730	Checks if a string ends with another .
8731	Renders the request into a cookie header .
8732	Get a list of cookies from a cookie string .
8733	Set the error .
8734	Sets the exit code .
8735	Converts a RouteContract to a URL .
8736	Prepare route path .
8737	Checks if the scheme is required for the given route .
8738	Add the port and scheme to the URI .
8739	Replace route parameters .
8740	Replace named parameters .
8741	Add route query string .
8742	Returns the query string for the route .
8743	Parse where clause .
8744	Get the controller middleware .
8745	Get the disabled middleware for the controller .
8746	Adds a cookie to the collection .
8747	Split a cookie pair .
8748	Inject the Content - Type headers .
8749	Returns the first 100 words of a string .
8750	Generates a random string
8751	Replaces the first character in a string .
8752	Replaces the last character in a string .
8753	Replaces a substring by its position .
8754	Returns the verbosity for the specified level .
8755	Runs the command .
8756	Call a command and return the output .
8757	Call a command silently .
8758	Get the value of an argument .
8759	Get an option from the input .
8760	Asks the user a question .
8761	Asks a question to the user with completion .
8762	Ask a question with a choice .
8763	Renders a table .
8764	Write a line of code .
8765	Generates an info line .
8766	Add a comment to a string .
8767	Asks the user a question .
8768	Writes an error line .
8769	Outputs a warning message .
8770	Configure using fluent definition .
8771	Adds the arguments and options to the command .
8772	Get the id of the given response .
8773	Get the recipients of a Swift_Mime_SimpleMessage
8774	Renders the template .
8775	Add a throwable to the report .
8776	Reports the given exception .
8777	Add a transformer .
8778	Handle a fatal error .
8779	Handle shutdown .
8780	Register the exception handler .
8781	Register the shutdown handler .
8782	Prepare an exception .
8783	Get the exception transformed .
8784	Returns the log level for the given exception .
8785	Determines if the exception should not be reported .
8786	Adds a dumper .
8787	Dumps an array to a given format .
8788	Returns a DumperContract for the given type .
8789	Returns the mime entity string .
8790	Returns the parameters of a function .
8791	Converts a code point to UTF - 8 .
8792	Register the bus queueing dispatcher .
8793	Optimizes a route tree .
8794	Extract the common parent node of two nodes .
8795	Returns the sql with the parameters .
8796	Tries to open a file using the given mode .
8797	Creates a stream for a given resource .
8798	Copy data from a stream to a string .
8799	Copy data from source to destination stream .
8800	Reads a line from a stream .
8801	Set default path and domain .
8802	Get the path and domain .
8803	Returns a handler instance .
8804	Update the host from the URI .
8805	Filter the HTTP method .
8806	Creates a UriInterface from a string or a string .
8807	Returns a file path without the file extension .
8808	Change the extension of a path .
8809	Creates a new cache manager instance .
8810	Check if a mock instance should receive a response .
8811	Resolve a static proxy instance .
8812	Returns true if the instance is a mock .
8813	Inflect the segment of a command .
8814	Set the content of a file .
8815	Sets the content disposition .
8816	Sets the last - modified header .
8817	Returns a new Cookie instance with the given value .
8818	Describes an object .
8819	Returns a description of the commands in the given application .
8820	Get namespace sorted command infos .
8821	Creates a cookie tab .
8822	Prepare request attributes .
8823	Prepares the request headers .
8824	Prepare server params .
8825	Returns the parsed request body .
8826	Export a value to a string .
8827	Get a crypted connection instance .
8828	Get the cache config .
8829	Creates a new filesystem adapter .
8830	Parses a route and returns an array of route segments .
8831	Generates a regular expression .
8832	Returns the InvokerInterface .
8833	Check if an object exists .
8834	Get target language from xliff file .
8835	Create a VAR dump connection .
8836	Create a DumpServer instance .
8837	Check if a path exists .
8838	Get the transformed path .
8839	Returns the contents of a directory .
8840	Filter the contents by type .
8841	Check if the session token matches the request token .
8842	Adds the set - cookie to the response .
8843	Sanitize collected messages .
8844	Computes the count of messages .
8845	Returns the sorted messages .
8846	Adds a stream .
8847	Closes the stream .
8848	Decodes the gif .
8849	Decode extension .
8850	Decodes an image descriptor .
8851	Decodes the image data .
8852	Sets the order direction
8853	Returns a list of items .
8854	Load a list of items from the response .
8855	Set the cities from an array .
8856	Sets the PSTN networks from an array .
8857	Loads PSTN networks for a country
8858	Load cities from didww regions
8859	Get a list of all countries
8860	Returns a city by its ID
8861	Pads a string with PKCS5 .
8862	Get a list of all supported countries
8863	Update all PSTN networks .
8864	Update an array of PSTNNetwork objects
8865	Create a new mapping .
8866	Decode delay .
8867	Returns true if the image has a transparent color .
8868	Decodes the display method .
8869	Get the size of the image .
8870	Returns the offset .
8871	Set the offset .
8872	Returns the country object
8873	Convert the number to an array .
8874	Creates an instance from a flat list .
8875	Create a map from an array .
8876	Creates a new unique number .
8877	Generates a unique hash
8878	Generates auth string
8879	Load history invoices .
8880	Make a SOAP call
8881	Returns the frame at the specified index .
8882	Adds an offset to the frame .
8883	Adds a size to the frame .
8884	Returns a list of loops .
8885	Returns true if the screen has a global color table .
8886	Returns the number of global colors .
8887	Returns the background color index .
8888	Adds a value to the first frame without a property .
8889	Creates a new frame with the given property .
8890	Convert the object to an array .
8891	Get all prepaid balances
8892	Returns an array of prepaid balances .
8893	Returns an array of prepaid balances
8894	Change prepaid balance
8895	Synchronize Prepaid Balance
8896	Sets the canvas width and height
8897	Set the offset from a Decoded Frame .
8898	Create a new frame from a GD resource .
8899	Encodes the screen .
8900	Builds the logical screen descriptor .
8901	Build the netscape extension .
8902	Builds the frame .
8903	Builds the control extension for the given frame .
8904	Builds the image descriptor .
8905	Create a new order .
8906	Change the auto - renew status of the order .
8907	Renew an existing order
8908	Reloads the service data .
8909	Updates the order mapping .
8910	Generates a unique hash for the order
8911	Checks if an IP is within a range .
8912	Get a parameter by name .
8913	Link a service to a key .
8914	Sets a metadata value for a service .
8915	Adds metadata for a service .
8916	Remove a service from the container .
8917	Release a shared service .
8918	Returns a service by name .
8919	Create a service instance from a factory .
8920	Resolve a service provider .
8921	Registers a service provider .
8922	Binds a class to a factory .
8923	Bind a class to a factory .
8924	Binds a resolver factory .
8925	Binds a factory to the resolver .
8926	Returns the resolver type for the given service name .
8927	Adds a service argument .
8928	Adds arguments from an array .
8929	Resolves the arguments .
8930	Creates a new instance of the class .
8931	Sets the tokens .
8932	Returns the current token .
8933	Returns the next token at the specified index .
8934	Skip a token of the given type .
8935	Returns the remaining tokens .
8936	Returns an array of tokens until the given token type is reached .
8937	Returns an array of tokens until a closing scope is reached .
8938	Return an exception for an unexpected token .
8939	Parses a child node .
8940	Parse the current node and return the result .
8941	Sets the container name .
8942	Adds a new service definition .
8943	Adds an array of service definitions .
8944	Adds a service definition .
8945	Imports a container namespace .
8946	Check if value is invalid service builder string .
8947	Generates a normalized service name .
8948	Generate the container .
8949	Returns the method name of the resolved service .
8950	Generates the code for the arguments .
8951	Generate meta data .
8952	Generates the resolver types .
8953	Generates the resolver mappings .
8954	Generates the resolver methods .
8955	Creates a ValueNode from a Token .
8956	Sets the value type .
8957	Generates an import map .
8958	Returns the value of the token .
8959	Returns true if token is a value .
8960	Check if an element with the given key exists in the collection .
8961	Push a value to the index .
8962	Converts a ctn array to a native PHP array .
8963	Returns the next token .
8964	Returns an array of tokens .
8965	Displays the auto - deploy notification .
8966	Execute a command and return the result .
8967	Backup database .
8968	Pull a git repo .
8969	Copies the . env file .
8970	Install composer .
8971	Run npm update command .
8972	Seed the database .
8973	Deploys the application .
8974	Resolves a service .
8975	Set the cache directory .
8976	Create a new container .
8977	Handle the request .
8978	Imports the container from a vendor directory .
8979	Check if a path exists .
8980	Get the container code from a file .
8981	Returns the code for the given path .
8982	Parse a container file .
8983	Handle a scope .
8984	Handle a scope import .
8985	Handle a parameter definition .
8986	Creates a ServiceArguments from a ArgumentArrayNode .
8987	Handle the service definition .
8988	Creates a service definition from an array .
8989	Add a method call to the service definition .
8990	Add a method call to the service .
8991	Add meta data .
8992	Check if the request is of origin .
8993	Check if the request is authentic .
8994	Set the value of this node .
8995	Get the name of the workout with the given ID .
8996	Returns a string representation of the time .
8997	Sends a POST request .
8998	Set workout type id
8999	Returns the end of the period .
9000	Returns the points as a string
9001	Returns the GPX for this track point .
9002	Collects the response data .
9003	Returns a list of models .
9004	Get ajax payload
9005	Get a response from a callback .
9006	Run a callback .
9007	Sanitize the handle .
9008	Validates all registered conditions .
9009	Validate a single value .
9010	Add a size for a specific device .
9011	Add a reset device .
9012	Returns the size of a device .
9013	Builds the column classes .
9014	Check if the current user has the given role .
9015	Returns the beginning of the row .
9016	Returns a string representation of the column
9017	Walks down the grid .
9018	Returns the beginning of a row .
9019	Returns all column resets .
9020	Returns the index .
9021	Migrate from legacy .
9022	Register the ajax handle .
9023	Ajax handler .
9024	Adds a callback to the handler .
9025	Add multiple validations at once .
9026	Handle a response from a callback
9027	Get the response type .
9028	Send the response headers .
9029	Send the response body .
9030	Returns the content of a URL .
9031	Check if the given method is supported by GeoIP2 .
9032	Toggle the visibility of a record
9033	Checks if the current user has access to the table .
9034	Build the grid .
9035	Returns a column name as a string
9036	Add a column reset .
9037	Add column resets .
9038	Returns all column resets for a given index .
9039	Check if a column has been reset for a given size .
9040	Get column resets as a string .
9041	Register a new action handle .
9042	Enqueue scripts .
9043	Get all registered nonces .
9044	Get the grids for a model .
9045	Hook to parse template .
9046	Hook for getContentElement .
9047	Returns an array of Bootstrap grid elements
9048	Create a row from a template .
9049	Creates a column .
9050	Build grid columns .
9051	Fetches a columnset from the database .
9052	Converts the result into an array of classes .
9053	Build column resets .
9054	Creates a grid by its id .
9055	Hook to parse template .
9056	Hook for isVisibleElement hook
9057	Hook to load a form field .
9058	Get grids .
9059	Prepare the container .
9060	Update the subcolumns definition .
9061	Append columnset id to palette
9062	Append the columns sizes to the palette .
9063	Returns an array of all columns types .
9064	Get Grids .
9065	Returns the columns for a module .
9066	Returns the order of columns .
9067	Returns the number of columns in the active record .
9068	Get a value from the session .
9069	Check if a key exists in the session .
9070	Deletes a session by key .
9071	Load a value from the cache .
9072	Reflash session data .
9073	Parse the insert tag .
9074	Get a walker for a given column set .
9075	Translate column set ids to column set ids .
9076	Returns enc params .
9077	Returns the dec params .
9078	Saves dynamic data .
9079	Checks if the field is valid .
9080	Saves the dynamic field .
9081	Initializes the request object .
9082	Render the fields for the given locale .
9083	Get the value of a field .
9084	Get the field values .
9085	Returns true if all entities are valid .
9086	Saves all entities in the collection .
9087	Assigns dynamic fields to page object .
9088	Get a FieldTranslation object by locale .
9089	Get repeaters by locale .
9090	Get entities by field id
9091	Scope a query to get an entity
9092	Duplicate a page .
9093	Initializes the template .
9094	Checks if all group fields are valid .
9095	Renders the item .
9096	Saves all group fields .
9097	Get a group by rule .
9098	Matches a rule against an array of options .
9099	Initialize a group .
9100	Get field post data .
9101	Sets a dot on the map .
9102	Get a dot from the map .
9103	Returns a single row .
9104	Returns a flattened array of chars .
9105	Get a dot from a map .
9106	Primes the X and Y coordinates
9107	Initializes repeater fields .
9108	Creates a list control after post data has been received .
9109	Creates a list control .
9110	Creates a field control .
9111	Creates a header repeater
9112	Saves this repeater .
9113	Returns the display value of all group fields .
9114	Returns a repeater value for a field .
9115	Get the template name .
9116	Returns the default template name .
9117	Initializes the value .
9118	Returns the model for this field .
9119	Returns the field s HTML id .
9120	Returns the HTML name of the field .
9121	Saves the field .
9122	Saves this field .
9123	Saves the repeater field
9124	Returns the value of an option .
9125	Forwards the current position by the given length .
9126	Moves the cursor up or down .
9127	Checks if the given task configuration has an ancestor .
9128	Checks if a task has a descendant .
9129	Resets the state of the command .
9130	Checks if a condition is met .
9131	Configure the condition options for the given wrapper key .
9132	Configures the condition options .
9133	Checks if the given value matches the given key .
9134	Check if a value is empty .
9135	Returns the duration of the subscription .
9136	Contextualizes an array of options .
9137	Find the best next task from a list of tasks .
9138	Get the input code for the given process state .
9139	Check if the state is resolved .
9140	Get file path .
9141	Process sorting .
9142	Handle iterator from input .
9143	Flushes the current state .
9144	Returns the line count of the file .
9145	Rewinds the stream to the first line .
9146	Get cleaned transformer code .
9147	Returns the list of dependencies .
9148	Returns the main task group .
9149	Checks if there are any circular dependencies .
9150	Builds the dependencies of a task .
9151	Sort dependencies .
9152	Resolves a task .
9153	Initializes the task .
9154	Flush a task .
9155	Handle a process state .
9156	Check process dependencies .
9157	Validate model .
9158	Converts the model to an array .
9159	Returns the model fields .
9160	Unset a relation .
9161	Converts a class name to a relation name .
9162	Add one to one relation
9163	Adds a one to many relation
9164	Add a many to many relation
9165	Executes a query and returns a collection of objects .
9166	Creates a new collection based on a WHERE clause
9167	Finds a single record in the database .
9168	Returns the number of records in the database .
9169	Builds a select query .
9170	Executes a select query
9171	Hydrate a collection of objects .
9172	Delete a record from the database
9173	Updates the model .
9174	Inserts the model into the database .
9175	Sets the keep_memory option to true .
9176	Removes the previous record from the cache .
9177	Returns the model for the specified primary key .
9178	Removes a model from the collection
9179	Returns the model index for the given key .
9180	Saves all elements .
9181	Prefix where with table .
9182	Prefix order with table name .
9183	Get the definition without a column name .
9184	Register a new complex_query and model in a table .
9185	Create a Simple_Query instance .
9186	Create a simple query object .
9187	Get a model by slug .
9188	Maybe install a table .
9189	Uninstalls a table .
9190	Check if a table is installed .
9191	Fire a plugin event .
9192	Saves a WP_Post .
9193	Get the column from the foreign table .
9194	Parse the default values for the columns .
9195	Create a new instance from a model .
9196	Selects one or more columns .
9197	Select a single column .
9198	Select all fields .
9199	Add an expression to the query .
9200	Add a where clause to the query .
9201	Generates a where tag .
9202	Add a nested where clause .
9203	Adds a where clause to the current query .
9204	Add an or where clause to the query .
9205	Add a WP_Date_Query where clause .
9206	Add a WHERE clause to the query .
9207	Order by .
9208	Orders columns by an expression .
9209	Group by .
9210	Group by expression .
9211	Joins another table to this one .
9212	Join a correlated subquery .
9213	Paginate the results .
9214	Returns true if each result matches the given callback .
9215	Parse a nested with relation .
9216	Parse a nested with clause .
9217	Assigns a value to an array by path .
9218	Make a limit tag .
9219	Builds the query builder .
9220	Update the meta cache .
9221	Find a record by primary key .
9222	Find many records by primary key .
9223	Find a model by primary key or throw an exception .
9224	Find a model by primary key or create a new one .
9225	Get the first model or a new model .
9226	Get the first model or create a new one .
9227	Update or create a model .
9228	Handle eager loading .
9229	Do a nested eager load .
9230	Asserts that the operator is valid .
9231	Prepare a column .
9232	Escape a column s value .
9233	Configures the model .
9234	Get the value of a single column .
9235	Creates a new row .
9236	Adds a ORDER BY clause to the query .
9237	Adds an ORDER BY clause .
9238	Set or get all columns .
9239	Builds an eager load map from the given models .
9240	Saves a comment .
9241	Get the default value for an argument .
9242	Executes the query and returns the result
9243	Parse the results .
9244	Parse a select .
9245	Parse the order argument .
9246	Parse pagination .
9247	Checks whether two numbers are numerically equivalent .
9248	Checks if two values have changed .
9249	Fetches all models from database .
9250	Deletes the model .
9251	Updates a model .
9252	Get the total number of pages .
9253	Paginates the results .
9254	Executes the count query and returns the found models .
9255	Returns the number of models without limit .
9256	Check if an offset exists .
9257	Set a value at the given offset .
9258	Returns the model at the given offset .
9259	Builds the query string .
9260	Boot the model if it s not booted .
9261	Boot all registered traits .
9262	Fill the model with data .
9263	Set the attribute to be guarded .
9264	Set the attribute to be unguarded .
9265	Check if a column is fillable .
9266	Sets the value of an attribute .
9267	Set a raw attribute .
9268	Get the value of an attribute .
9269	Get the raw value of an attribute .
9270	Get the value of an attribute .
9271	Get an attribute from an array .
9272	Returns a list of all available relations .
9273	Returns the relation object for the given attribute .
9274	Set the value of a relation .
9275	Get the value of a relation .
9276	Refreshes the model .
9277	Get the dirty attributes .
9278	Get an object by primary key .
9279	Create a new instance from a query .
9280	Get data from primary key .
9281	Check if data is cached .
9282	Update an item in the cache .
9283	Save a model .
9284	Save the has foreign relations .
9285	Save loaded relations .
9286	Save the model as an insert .
9287	Do save as update .
9288	Finish saving the model .
9289	Deletes this model from the database
9290	Create a many - to - many relationship
9291	Fire a model event .
9292	Register a listener for a model event
9293	Get the data to cache .
9294	Register a global scope .
9295	Returns a query with no global scopes .
9296	Returns a FluentQuery instance with the given relations .
9297	Returns the attributes as an array .
9298	Returns a query string for the comparison .
9299	Get the value of the comparison .
9300	Get a row by its primary key .
9301	Get a single column from the table .
9302	Get by or many by helper .
9303	Counts rows .
9304	Inserts a new record into the database
9305	Update a row in the database
9306	Deletes a row from the database
9307	Delete many records .
9308	Generate an exception from a database error .
9309	Saves a term .
9310	Make a query object .
9311	Fetch the results for an eager load .
9312	Adds a new value to the last inserted value
9313	Sets the name and value of the parameter .
9314	Set the query type to SELECT
9315	Reset the select field .
9316	Set the query type to UPDATE
9317	Set the DELETE query type .
9318	Sets the insert query type .
9319	Sets the FROM clause of the query .
9320	Add a JOIN clause to the query
9321	Adds a AND WHERE clause to the query .
9322	Add an OR WHERE clause to the query .
9323	Reset order by .
9324	Sets the LIMIT part of the query
9325	Reset the limit .
9326	Boot the trash support .
9327	Get the results of this collection .
9328	Load a model from the cache .
9329	Load a collection of models from cache .
9330	Cache the results .
9331	Cache a collection .
9332	Cache a single result .
9333	Maybe register cache events .
9334	Saves a WP_User
9335	Sets the last updated time .
9336	Returns the container parameters .
9337	Checks if the container is cacheable .
9338	Bootstrap the container .
9339	Load the container configuration .
9340	Build the column name for a table .
9341	Persist the values to the database .
9342	Persist removed records .
9343	Persists an added record in the database .
9344	Create a new uuid .
9345	Initializes the hmac_validator
9346	Creates a new model .
9347	Converts an asset to a file .
9348	Builds a result string from an asset .
9349	Parse a Less file .
9350	Sends a message to the API .
9351	Executes a GET query and returns an array of messages .
9352	Returns the number of records in the collection .
9353	Requeue a message .
9354	Sends a Message .
9355	Verify the sort .
9356	Add a message to the message collection .
9357	Returns a new instance of Messages .
9358	Import issues .
9359	Get a value by identifier .
9360	Checks if an alias exists .
9361	Extends an existing service definition .
9362	Register a service provider .
9363	Add a tag to the service .
9364	Find service ids tagged with a given tag .
9365	Bootstrap the application .
9366	Initializes the bundles .
9367	Returns an array of kernel parameters
9368	Validates the given content .
9369	Validate the content with the given retriever .
9370	Validate the content without a retriever .
9371	Get an AssetContainer instance .
9372	Output javascript assets .
9373	Output css .
9374	Returns the assets for the given type .
9375	Arranges an array of assets .
9376	Check if an asset s dependency is valid .
9377	Creates a new post validator .
9378	Create a new XsdRetriever instance .
9379	Creates a new XSLtRetriever instance .
9380	Create a new CertificadoValidator instance .
9381	Creates a new CFDI reader .
9382	Handle a command .
9383	Set a cookie .
9384	Get a cookie value .
9385	Get the first value from an array using a closure .
9386	Checks if a password is valid .
9387	Returns a node with the given path .
9388	Returns the attribute of the given node .
9389	Appends a child to a SimpleXMLElement .
9390	Populates the node .
9391	Retrieves a node from the comprobante .
9392	Checks if the given value is a required value .
9393	Adds Doctrine queries .
9394	Adds timers .
9395	Get the size of a file .
9396	Appends a validator to the list .
9397	Removes a validator .
9398	Returns a validator by index .
9399	Creates a new script instance with the given arguments .
9400	Runs the CFD factory .
9401	Runs the CFDI factory with the given filename .
9402	Authorizes a user .
9403	Returns true if the current user is logged in
9404	Logs in a user
9405	Logout the user .
9406	Adds a constraint .
9407	Validates input against constraints .
9408	Returns a RedirectResponse for a URL path .
9409	Get the path to the file .
9410	Returns the message at the specified index .
9411	Generate a custom post type name .
9412	Returns an array of Twig functions
9413	Resolves the handler for the given command .
9414	Setup the CFDI reader .
9415	Returns the sum of all nodes in the collection .
9416	Get an input by name .
9417	Sets a sequential position for a post type .
9418	Generate taxonomy name .
9419	Redirects the user to a specific route .
9420	Register the commands .
9421	Returns the metadata for a bundle .
9422	Returns the metadata for a given namespace .
9423	Finds the namespace and path for the given class metadata .
9424	Add an asset to the collection .
9425	Renders a view .
9426	Save a value to the cache .
9427	Loads an XML document .
9428	Removes all schemaLocations that are not part of the AST .
9429	Removes all non - SAT namespaces .
9430	Removes all namespaces that are not allowed .
9431	Initializes the bindings .
9432	Binds the registry items .
9433	Get the file name in dashed case .
9434	Initializes the context .
9435	Renders the template .
9436	Loads all config files .
9437	Matches a path with a given name .
9438	Add a route section .
9439	Group routes .
9440	Starts a block .
9441	Stops the block .
9442	Outputs a block .
9443	Create a controller instance .
9444	Instantiate a controller .
9445	Validates a url .
9446	Finds a twig template .
9447	Set Doctrine Entity Manager
9448	Set the connection for the application .
9449	Render a template view .
9450	Opens the form .
9451	Adds multiple data transformers at once
9452	Get a URL to a feed segment .
9453	Make a market request .
9454	Create a new account .
9455	Prepare an array of attributes .
9456	Add an extra value to the collection .
9457	Fetches an object from the result set
9458	Generates a dialog .
9459	Creates a new connection instance .
9460	Begin a new transaction
9461	Loads the maniacode .
9462	Render XML .
9463	Connects to the server .
9464	Watches the stream for changes .
9465	Set bgcolor .
9466	Sets the image .
9467	Sets the image id
9468	Sets the image focus .
9469	Sets the image focus id
9470	Add link to ManiaLib .
9471	Get a config value .
9472	Set a config value
9473	Returns a translated string .
9474	Returns an array of values for the given key .
9475	Strips styles from a string .
9476	Creates a new redirect .
9477	Invokes a number matching strategy .
9478	Returns the default cache driver .
9479	Loads ManiaLib .
9480	Starts a frame .
9481	Ends a frame .
9482	Generates a redirect link
9483	Appends an XML string to a DOMDocument
9484	Builds a driver instance .
9485	Set border width height and y index
9486	Declares a font .
9487	Callback for image .
9488	Add a font on an image .
9489	On image quality
9490	Get the redirect for the given request .
9491	Get all redirected URLs .
9492	Get all cached redirects .
9493	Sets the icon size .
9494	Sets the selected icon
9495	Invoke from to to .
9496	Sets the media filename .
9497	Returns a LIMIT string
9498	Returns the update string .
9499	Get a parameter value .
9500	Returns a parameter with a string value .
9501	Get a post with a strict name and message .
9502	Restores a parameter .
9503	Redirect arguments list .
9504	Creates a list of arguments for a link .
9505	Creates an argument list for an absolute link .
9506	Increments the position of the X - axis
9507	Increments the position of the Y - axis .
9508	Increment the position of a z - axis .
9509	Sets the position of the object .
9510	Sets the scale .
9511	Sets the valign .
9512	Set the halign .
9513	Set the alignment .
9514	Sets the image size X
9515	Set the size of the image .
9516	Sets the image size
9517	Adds a button to the list .
9518	Adds a gap .
9519	Returns a collection of HTTP response keys .
9520	Get all redirections .
9521	Handles a fatal error .
9522	Computes the message for the exception .
9523	Computes a short message .
9524	Handle a request and return the response .
9525	Uploads a file to the server
9526	Get the current request .
9527	Returns the aligned position of the image .
9528	Returns an aligned position for a given size and valign .
9529	Returns the aligned position of an element .
9530	Builds the ACC table .
9531	Quotes data .
9532	Reset all dao balances .
9533	Query delete by assets .
9534	Configures a composer autoloader .
9535	Returns an array of service ids .
9536	Get the return type of a service .
9537	Execute a transaction .
9538	Get a balance entry .
9539	Get the class hierarchy .
9540	Change the Content - Type header .
9541	Parse a raw header .
9542	Convert a string to an array .
9543	Builds a dimension array .
9544	Get the asset types .
9545	Executes an asset transaction .
9546	Returns the last date the balance is close .
9547	Check if opauth is valid .
9548	Mutate a property .
9549	Fetch a value from a URL .
9550	Returns the URL of the request .
9551	Generates the csv file .
9552	Parse a csvUrl into an array .
9553	Localizes a csvId .
9554	Backup a string to a file .
9555	Get all entities by asset type code
9556	Get asset type id by account id .
9557	Get customer asset by asset code
9558	Get system customer id
9559	Executes a request and returns the response .
9560	Builds the keys for the strategies .
9561	Parse an Opauth object into a callback transport
9562	Login action .
9563	Renders a page .
9564	Get the asset types .
9565	Sends the response .
9566	Authenticates the user with the given response data .
9567	Verify token .
9568	Validates a Google Docs URL .
9569	Register the API client .
9570	Register the token class .
9571	Register the commands for the console .
9572	Start a new session .
9573	Retrospect a class name to see if it exists in the hierarchy .
9574	Set status code and reason phrase .
9575	Parse a css string into a tree .
9576	Finds all tokens in a list .
9577	Finds the end of a quoted string .
9578	Finds the end of a URL
9579	Check if a rule is valid .
9580	Merges the given words into the given string .
9581	Checks the selectors .
9582	Returns an array of selectors for the given words .
9583	Parse tokens .
9584	Set the current app key for the request .
9585	Get the current application key .
9586	Adds a json accept type to the request .
9587	Builds the DB .
9588	Unpublishes a post
9589	Unpublish a post .
9590	Initializes the scheduler .
9591	Generate a secret and key .
9592	Generate a secret for a given key .
9593	Verify that a token is valid for the given key and time .
9594	Generate X - API - headers .
9595	Generate query data .
9596	Returns the customer id .
9597	Sets the fit manipulation .
9598	Returns the list of manipulations .
9599	Creates a new entity .
9600	Fills the property with the given values .
9601	Returns the URI .
9602	Set username and password .
9603	Sets the port .
9604	Sets the path to the file .
9605	Returns the segment at the given index .
9606	Get a query value .
9607	Builds the HTML code from the given tokens .
9608	Returns an aggregated array .
9609	Returns the configuration for the given strategy .
9610	Builds the oauth configuration .
9611	Compose a result object .
9612	Executes the request and returns the result .
9613	Executes a request and returns the response .
9614	Prepare log ids .
9615	Validate transactions .
9616	Sets the headers .
9617	Sets a header .
9618	Add a header to the message .
9619	Removes a header .
9620	Adds a prefix to a list of paths .
9621	Adds a set of PSR - 4 prefixes .
9622	Finds a file for a given class name .
9623	Finds a file by its suffix .
9624	Convert an object to an array .
9625	Cleans an array .
9626	Sets the code .
9627	Initializes the URI .
9628	Initialize query params .
9629	Initializes an array of uploaded files .
9630	Parse uploaded files .
9631	Parse multiple uploaded files .
9632	Check if the header has a content - type .
9633	Runs the application .
9634	Dispatch the command .
9635	Outputs a table .
9636	Output an error to STDERR
9637	Output help for all available commands .
9638	Get the list of available commands .
9639	Makes a directory if not exists .
9640	Append a route stub to a file .
9641	Replaces a string in a file and saves it
9642	Dispatches the request and returns the response .
9643	Creates a template response .
9644	Returns the current page .
9645	Get the response .
9646	Build a Response object for a given URI .
9647	Returns the page for the given URI .
9648	Get the alias for a given URI .
9649	Displays a single model .
9650	Creates a new I18nMessage model . If creation is successful the browser will be redirected to the view page .
9651	Adds headline ids to the given content .
9652	Dispatches the request .
9653	Runs the command controller .
9654	Register the service provider .
9655	Returns a Markdown renderer .
9656	Get the login blades .
9657	Get migrations .
9658	Find a page by its identifier .
9659	Returns the page name for the given page identifier .
9660	Builds the meta data for a page identifier .
9661	Get the page tree .
9662	Get pages for a given path .
9663	Generate a success message .
9664	Loads all messages from database .
9665	Send an activation mail to the given user .
9666	Performs a search and returns a list of matches .
9667	Renders the template .
9668	Renders an expression .
9669	Resolve expression key path .
9670	Returns a list of classes .
9671	Prepares the configuration array .
9672	Get the host .
9673	Get a value from the cache .
9674	Displays a single message .
9675	Updates a message model . If update is successful the browser will be redirected to the view page .
9676	Delete a message model .
9677	Finds the translation model for the given message id and language .
9678	List all pages .
9679	Returns the parsed content .
9680	Returns the sorting .
9681	Returns the URI of the request .
9682	Get the url from the meta file .
9683	Get the meta title .
9684	Executes a GET request .
9685	Builds the url for the request .
9686	Handle a response .
9687	Initializes the shared configuration .
9688	Creates a profile .
9689	Returns the template file .
9690	Returns value for given key path of object .
9691	Set the root directory .
9692	Finds class reflections .
9693	Gets a reflection of a class .
9694	Uploads a media file .
9695	Inserts a new media file .
9696	Returns the number of hours between start and end .
9697	Get the dirty data for a model .
9698	Register a clean entity .
9699	Get dirty fields from a serialized model .
9700	Adds identifiers to a new serialized model .
9701	Returns the id of the given serialized key .
9702	Get all tags .
9703	Get the real class name of an object .
9704	Configures the TabElement factory .
9705	Before delete callback .
9706	Creates the title .
9707	Render pdf preview .
9708	Renders the image .
9709	Hydrate an array of data into a single object .
9710	Hydrate a list into a Collection .
9711	Deserializes the given data into a collection .
9712	Deserializes the given data into an object .
9713	Guesses the collection classname from the given array .
9714	Builds the sitemap .
9715	Returns a navigation for the given element .
9716	Returns an iterator for the given element .
9717	Normalizes the attribute .
9718	Get an extra property .
9719	Generates a random string .
9720	Limits a string to a certain number of words .
9721	Returns a list of files in a directory
9722	Generates a short description .
9723	Checks if two time slots overlap .
9724	Returns an array of non - overlapped time slots .
9725	Merge overlapped time slots .
9726	Execute a GET request and return the resource .
9727	Merge the default parameters into the current request .
9728	Executes a request .
9729	Renders the backend view .
9730	Get navigation iterator .
9731	Get the grid iterator .
9732	Called before the attribute is saved .
9733	Processes the given content .
9734	Update an existing media model . If update is successful the browser will be redirected to the view page .
9735	Do media join
9736	Upload media .
9737	Updates post data .
9738	List media .
9739	Renders a row .
9740	Deletes an existing Media model . If deletion is successful the browser will be redirected to the view page .
9741	Set the attribute list for the model .
9742	Returns the default serialized model .
9743	Create directories .
9744	Export stub views .
9745	Exports the controllers .
9746	Exports the updated routes .
9747	Check packages .
9748	Copy all plugins .
9749	Copy the assets files .
9750	Copy less folders .
9751	Get settings by categories .
9752	Converts a serialized navigation definition into a Navigation object .
9753	Creates a new nav item from an array .
9754	Loads a block .
9755	Returns module .
9756	Serializes an entity .
9757	Returns the model name for the given key .
9758	Returns the class metadata for the given model name .
9759	Try to get class metadata by id .
9760	Renders the tree .
9761	Returns a list of branches .
9762	Removes an item from the cache .
9763	List all tags .
9764	Returns the tags weights .
9765	Add tags .
9766	Removes a set of tags .
9767	Get tab parent options .
9768	Generate columns .
9769	Count required separators .
9770	Creates tab separators .
9771	Creates a stop element .
9772	Create tab element .
9773	Get the stop element .
9774	Adds an icon to a row .
9775	Returns a list of select options .
9776	Returns a list of status constants .
9777	Returns a list of constants of a given type .
9778	Returns the label for a given type and const .
9779	Returns the listing order as an array .
9780	Finds and replaces a value in the current text .
9781	Moves to the next dropdown item .
9782	Returns the title of the current item .
9783	Generate the active field for the given attribute .
9784	Creates a new Router instance .
9785	Get a driver instance .
9786	Call a driver .
9787	Call a driver .
9788	Resolve dispatch dependencies .
9789	Get nested parameters .
9790	Finds the routable attributes .
9791	Find a restful route .
9792	Find the resource route for the given resolver .
9793	Returns an alternative resource action .
9794	Dispatch a route .
9795	Lists all available pickups .
9796	Returns the shipping method calculator .
9797	Returns the shipping method .
9798	Add a route .
9799	Builds the resource schema .
9800	Update the shipping address .
9801	Call a controller .
9802	Handle an illuminate response .
9803	Handle a response callback
9804	Abort a request .
9805	Determine if the response is a no - html response .
9806	Register a new ErrorHandler
9807	Get the options for the given action .
9808	Deletes an item from the cache
9809	Save an item to the cache .
9810	Output a message as a block .
9811	Get a value from the cache .
9812	Set a value in the cache .
9813	Set multiple values .
9814	Delete multiple cache entries .
9815	Check if a key exists in the cache .
9816	Returns the label .
9817	Returns the full path name .
9818	Creates a tree of categories .
9819	Types a command .
9820	Sets the resource members .
9821	Loads a PSR - 7 class .
9822	Set the account id
9823	Translates an exception .
9824	Get the console instance .
9825	Execute the paypro command
9826	Returns a cached list of constants .
9827	Returns a list of all containers .
9828	Updates the container properties .
9829	Check if a blob exists .
9830	Encode a JWT .
9831	Decode a JWT token .
9832	Get the payload of a token .
9833	Parse a JWT token into segments .
9834	Get or set the expiration timestamp .
9835	Generates a SQL statement for creating an index .
9836	Extracts a default value from a column schema .
9837	Add previous button
9838	Adds the next button .
9839	Get the current value of a block .
9840	Devuelve un objeto
9841	Checks if value is an object .
9842	Check if a value is empty .
9843	Serializes the given data to a record .
9844	Parse a SOAP response into an array
9845	Returns a datagrid configurator .
9846	Check if a configurator exists .
9847	Returns the writer class name by the given format .
9848	Get a writer from a ContentNegotiation
9849	Transforms a DateTime object into a DateTime object .
9850	Initializes the view .
9851	Reads data from a schema .
9852	Parse a payload .
9853	Write a payload .
9854	Returns a suitable reader for the given content type .
9855	Returns a data writer for the given content type .
9856	Called before a test .
9857	Called after a test .
9858	Clears resolved instances after a step .
9859	Initialize the Laravel client .
9860	Boot Laravel application .
9861	Am on a route .
9862	Am on a specific action .
9863	Get the namespace for the given action .
9864	See if the current route matches the given route .
9865	Checks if the current url matches the given action .
9866	Assert that the given key exists in the session .
9867	Assert that the form has errors .
9868	Assert that the given form error message is the same as the given one .
9869	Check if a user is logged in .
9870	Inserts a record into the database .
9871	Transforms a number into a string .
9872	Gets a number formatter .
9873	Nests an array into a stdClass .
9874	Converts a string to a flattened array .
9875	Objecty an array .
9876	Creates a new column instance .
9877	Builds the header view .
9878	Builds a cell view .
9879	Creates a new column instance .
9880	Checks if this column type is a compound column type .
9881	Returns the base data .
9882	Returns the shipping data for the card .
9883	Returns the invoice data .
9884	Sends the given data to the proximate endpoint
9885	Trims the end of a string .
9886	Convert a FQCN to a block prefix .
9887	Transforms a currency value .
9888	Parse a value .
9889	Adds a new unresolved column .
9890	Returns true if the uploaded file is valid .
9891	Resolves a filename .
9892	Updates the form for the given record .
9893	Updates the edit form .
9894	Updates the edit form for an item .
9895	Lock a record
9896	Apply the config to the client .
9897	Publish an item on a channel .
9898	Loads a locale .
9899	Sends a request and returns the response .
9900	Builds the query from the given parts .
9901	Store a new user .
9902	Show the form for editing a user .
9903	Updates a user .
9904	Destroy a user .
9905	Creates a new mpdf instance .
9906	Add the host header .
9907	Builds a Guzzle request instance .
9908	Executes the callable chain .
9909	Check if a class exists .
9910	Runs the thread .
9911	Ensure the thread is running .
9912	Add a request to the queue .
9913	Send a batch of requests to the PCC .
9914	Returns the key for the given cursor .
9915	Rewinds the cursor to the beginning .
9916	Exports this object to a string .
9917	Set options from an array .
9918	Make a public call to the API .
9919	Make a cURL request
9920	Publishes an item to a channel
9921	Imports the headers from one message to another .
9922	Returns the protocol version .
9923	Validates the data against the given rules .
9924	Loads the translation .
9925	Set the local validator .
9926	Get the validation errors .
9927	Updates the status of the request .
9928	Returns the locked message for this record being edited .
9929	Check if the current user is editing anyway .
9930	Checks if an offset exists .
9931	Performs a SELECT query using a Closure .
9932	Parse birthday and constellation .
9933	Returns the birthday in the given format .
9934	Validates a birthday .
9935	Parses a constellation .
9936	Translates a constellation .
9937	Updates ACLs .
9938	Sync success .
9939	onList event handler .
9940	on role create or edit
9941	on user create or edit
9942	onarea create event handler
9943	Displays a form to create or edit users .
9944	Adds a group to the ACL
9945	Finds an object by criteria or returns a new instance .
9946	Returns a new instance of the object .
9947	Get the object factory .
9948	Removes a record from the database by a given criteria .
9949	Removes a record from the database by a given criteria .
9950	Removes an object from the collection .
9951	Refreshes an existing backup .
9952	Detach a collection of objects .
9953	Returns the supported method .
9954	Calls a supported method .
9955	Runs the manager action on the given objects .
9956	Flushes the given objects .
9957	Prepare a tag from bits .
9958	Sets the pagination .
9959	Set the current page .
9960	Update an existing Permission .
9961	Get a paginator instance .
9962	Returns a paginated result or throws an exception .
9963	Boot extension components .
9964	Boot the ACL memory .
9965	Loads the parts of the RoleManager
9966	Extended Validation .
9967	Saves the model to the database
9968	Validates the model .
9969	Merge the validation rules .
9970	Purges unneeded attributes .
9971	Auto - hash the password .
9972	Disable all enabled filters .
9973	Disable a filter .
9974	Restores all disabled filters .
9975	Restores a filter .
9976	Returns an action column for a role .
9977	Assigns this object to a user .
9978	Checks if the given code is a successful HTTP response .
9979	Returns the current template name .
9980	Returns a new RoleForm instance .
9981	Edit an acl .
9982	Creates a new user .
9983	Edit a user .
9984	Store a new user .
9985	Updates a user .
9986	Destroy a user .
9987	Save a user .
9988	Check if a path is within the current url .
9989	Returns the registered type .
9990	Returns the ETag for the given visitor identifier
9991	Returns the timestamp field .
9992	Returns the hash of a timestamp field .
9993	Executes the query .
9994	Executes the ids query
9995	Returns the number of rows in the collection
9996	Returns the table name for this type .
9997	Returns the order by .
9998	Sets the order by value
9999	Returns the conditions as a string .
10000	Add a WHERE condition
10001	Set the join table and join field .
10002	Edit a metric .
10003	Update the ACL .
10004	Sets the logger .
10005	Starts the fork .
10006	Stops the session .
10007	Kills this instance .
10008	Add a WHERE condition .
10009	Get the where clause .
10010	Returns the number of cells in the database .
10011	Returns the first result from the query .
10012	Returns an array of ids .
10013	Executes the select query .
10014	Load by type field .
10015	Returns the SQL to select fields .
10016	Get all available Antares modules .
10017	Smashes a resource .
10018	Define all permissions .
10019	Assign a role to a user
10020	Remove a role from a user
10021	Create a form .
10022	Edit a model .
10023	Store a new role .
10024	Update a role .
10025	Destroy a role .
10026	Save a role .
10027	Import role permissions .
10028	ACL presenter .
10029	Clear all analytics data .
10030	Clear message data
10031	Make pane . left widget
10032	Show the form for editing a role .
10033	Scope the user roles .
10034	Get messages statuses .
10035	Returns an action column .
10036	Get the user roles .
10037	Modify an existing EntityInterface .
10038	Get the producer for a registered type .
10039	Registers a producer .
10040	Register a producer by its class
10041	Get an object by id
10042	Get object by id
10043	Add a value to the object pool .
10044	Remember an object in the database .
10045	Count the number of rows for a given type .
10046	Returns a finder for the given type .
10047	Returns the SQL select statement for the given type .
10048	Get the escaped type fields for a given type .
10049	Returns the escaped type order by .
10050	Get trait names by type .
10051	Recursively get trait names .
10052	Adaptee a fieldset .
10053	Determine if a control is checked .
10054	Prepares active page entity .
10055	Sets the logins tracking .
10056	Sets the tracking email of the active user .
10057	Returns the site path for the given url .
10058	Analyzes a URL .
10059	Returns basket product category path
10060	Checks if two values are the same .
10061	Loads data from a row .
10062	Creates and returns a copy of this object .
10063	Revert a field to its original value .
10064	Returns the old value of a field .
10065	Sets a field value
10066	Inserts a new record into the database .
10067	Updates the object .
10068	Refreshes the generated fields values .
10069	Compares the value of a field with a reference value .
10070	Generates a URI for a named route .
10071	Store a newly created role .
10072	Get field errors .
10073	Check if a field has an error .
10074	Adds an error to the list of errors
10075	Prepare product title .
10076	Modify by contact controller .
10077	Modifies the active page by the newsletter controller .
10078	Modify with user registration action
10079	Disables an event subscriber .
10080	Restores the event subscribers .
10081	Disable all event listeners for the given event .
10082	Disables an event listener .
10083	Restore all event listeners .
10084	Restores the event listeners for the given event .
10085	Get the subscriber class name .
10086	Checks if the given class is an event subscriber .
10087	Returns an array of event listeners .
10088	Gets the hashed id of the current active user .
10089	Returns the user s hashed email address .
10090	Generates a cache key .
10091	Generates a common key for all cache keys .
10092	Send the request to the API
10093	Checks if a key exists .
10094	Returns the value of the given key .
10095	Get a value from an array or object .
10096	Sets a value for a key .
10097	Puts a value in the collection .
10098	Sets a value at a given index .
10099	Removes a value from the collection .
10100	Removes a value from an item .
10101	Sets a logger .
10102	Bootstrap the application .
10103	Set mail config .
10104	Returns the value for the given key .
10105	Convert a value to a string .
10106	Get page size .
10107	Register the Capsule service .
10108	Checks if all required fields are set .
10109	Get the WP_Notice instance .
10110	Initialize the plugin .
10111	Registers and enqueues the tdp JS plugin .
10112	Displays the notices .
10113	Register a notice .
10114	Dismiss a notification ajax
10115	Dismiss a notice .
10116	Dismiss a user .
10117	Dismiss a global notice .
10118	Restore a notice .
10119	Restore a user notice .
10120	Restore a global notice .
10121	Get the list of dismissed notices for the current user .
10122	Check if a notice is dismissed .
10123	Get a notice by id .
10124	Refine an item .
10125	Refines a collection .
10126	Include attachments .
10127	Get an array of items from a raw query .
10128	Add attachments to the message .
10129	Parses an array of relations into an array of attachments .
10130	Attaches an attachment to the request .
10131	Attach a class to an attachment .
10132	Merge two arrays .
10133	Returns the response headers .
10134	Returns the card reference .
10135	Returns the customer reference .
10136	Gets the name of a class .
10137	Returns the namespace of a class .
10138	Finds the add method for a given key .
10139	Initialize the field mappings .
10140	Sets the translation language .
10141	Read a property from an object .
10142	default action .
10143	Invokes an action before a record .
10144	Executes an action after a record .
10145	Append a collection of entities to this collection .
10146	Append data to collection
10147	Prepend an entity to the end of the collection
10148	Checks if a property is set in the collection
10149	Returns the last entity in the collection .
10150	Returns the element moved by the given offset
10151	Check if a field has a given value .
10152	Searches for the given value in the given field .
10153	Shift a value from the beginning to the end .
10154	Filter the collection using a Closure .
10155	Get a collection of entities by a callback .
10156	Splits the collection into chunks of the given size .
10157	Returns a slice of the collection .
10158	Splits the collection into its parts .
10159	Unset a value at a given index .
10160	Set distinct values on a property .
10161	Reverses the array .
10162	Get all values for a property .
10163	Bind an entity to a collection .
10164	Group entities by field name .
10165	Prepare the scopes .
10166	Parse the scope arguments .
10167	Set the type of a variable
10168	Register annotation - based entities .
10169	Convert a string to camelCase
10170	Prepare data for insert .
10171	Updates the data .
10172	Parse the filter fields .
10173	Parse the filter values .
10174	Convert an array to an object .
10175	Returns the label .
10176	Get additional style by type
10177	Returns additional styles by type .
10178	Returns the link of the request .
10179	Converts an object to an array .
10180	Configures the model .
10181	Get the database connection .
10182	Import a field .
10183	Converts a string to an array .
10184	Fires the job .
10185	Deletes the record .
10186	Gets the metadata for a class .
10187	Flushes an entity .
10188	Finds an entity by ID .
10189	Clears the entity manager .
10190	Removes an entity .
10191	Refreshes an entity .
10192	Get the repository for the given entity name .
10193	Returns true if the given entity exists .
10194	Creates a new entity manager .
10195	Process xcdr request
10196	Perform a merge between two arrays .
10197	Merges two arrays .
10198	Adds or modifies lines .
10199	Get lines removed or modified .
10200	Notify a XCDR record .
10201	Register plugins .
10202	Apply configs to the container .
10203	Add env variables to the container .
10204	Pop a job from the queue .
10205	Inserts a job record into the queue .
10206	Request XcdrSetAttribute .
10207	Convert a string to uppercase .
10208	Creates a new record .
10209	Read a record .
10210	Update a record .
10211	Destroys the current record .
10212	Recycles the record .
10213	Returns the number of records in the collection .
10214	Get a proxy for a given key .
10215	Closes all log output interfaces .
10216	Load widgets .
10217	Loads the theme options .
10218	on XmlRpcEliteBeginTurn
10219	Add a child element .
10220	Store a new permission .
10221	Show the form for editing a permission .
10222	Update a permission .
10223	Destroy a permission
10224	Set adapter .
10225	Get adapter type
10226	Wait for a read from the stream .
10227	Get a list of channels
10228	Get a list of games
10229	Convert a JSON string to an array .
10230	Converts a JSON string to an object
10231	Convert a string to JSON .
10232	Returns a string representation of the given data .
10233	Converts a string to an integer .
10234	Returns a float value .
10235	Validate a boolean value .
10236	Generates an instance property map .
10237	Find all instance properties .
10238	Creates a property constructor .
10239	Creates the hydration method .
10240	Updates application config .
10241	Checks if a local composer . json file is available .
10242	Finds a page by its attribute .
10243	Find a page by its attribute .
10244	Finds a page by its option .
10245	Returns all pages matching the given option .
10246	Register widgets .
10247	Register the view parser .
10248	Register the launcher instance .
10249	Create a driver instance .
10250	Returns an invalid result .
10251	Starts a timer .
10252	Subscribe to a signal .
10253	Unsubscribe from a signal .
10254	Get attribute value .
10255	Set the keys of the column .
10256	Executes a query and returns an array of columns .
10257	Set the column properties .
10258	Strip the table name .
10259	Selects a virtual server .
10260	Select a server by port .
10261	Returns the virtual server port for the given server ID .
10262	Returns the server with the specified name .
10263	Returns a server by its unique identifier .
10264	Creates a new virtual server
10265	Deletes a server
10266	Starts a server
10267	Stops the server process .
10268	Returns the permission list .
10269	Find a permission
10270	Returns a permission ID by name .
10271	Returns a permission name by ID
10272	Get a category by ID .
10273	Check if a user has a given permission .
10274	Adds a new message to the log .
10275	Logs in to TeamSpeak .
10276	Logs the user out .
10277	Sets a whoami identifier .
10278	Returns a validator instance .
10279	Set cURL request content .
10280	Parses a result string into a PageFetcherResponseInterface object
10281	Common application attributes .
10282	Returns the value of an option .
10283	Build options .
10284	Creates a user command .
10285	Sends a ping request .
10286	Sets an attribute .
10287	Returns the formatted currency .
10288	Formats the amount for accounting .
10289	Returns the value rounded to the given fraction .
10290	Splits the amount by the given percentages .
10291	Prepares and injects elements .
10292	Get the user with the given access token
10293	Executes the request .
10294	Searches a route for a controller .
10295	Get the HTTP request method .
10296	Get all logs .
10297	Get the death by camels .
10298	Convert bytes to a human readable format
10299	Returns the correct codec for the given codec .
10300	Returns the group type .
10301	Returns the permission type for the given type .
10302	Returns the log level .
10303	Converts a log entry into an array
10304	Returns a list of items .
10305	Returns a list of traits .
10306	Call a trait method .
10307	Call trait events .
10308	Returns a list of attribute labels .
10309	Returns a list of all attribute hints .
10310	Converts this object to an array .
10311	Fetches the error message .
10312	Fetch a reply from the database .
10313	Returns the user identity .
10314	Returns true if the user has an identity .
10315	Restores a deleted attribute .
10316	Get a user .
10317	Get a list of games a user has followed .
10318	Returns a list of notices .
10319	Get a channel .
10320	Escapes the string .
10321	Unescapes the string .
10322	Get a team .
10323	Adds a result .
10324	Get the stream for a channel
10325	Get a list of streams
10326	Get a list of Featured Streams
10327	Get a list of streams that the user has followed .
10328	Get stream summary
10329	Get the top of the page .
10330	Returns the value of the element .
10331	Resolves a TSDNS hostname
10332	Access the configurables
10333	Sends a text message to the user
10334	Kicks the channel .
10335	Downloads the client avatar .
10336	Bind events to the collection .
10337	Connect an event to the collection .
10338	Get a query variable .
10339	Returns the base URI .
10340	Sends a request to the server
10341	Wait for a response from the server .
10342	Prepares a command for execution .
10343	Get TeamSpeak host .
10344	Displays the list of extensions .
10345	Writes application configuration file .
10346	Set the parent of the menu bar .
10347	Get the columns for a table .
10348	Create a new Transcoder instance .
10349	Returns the value of a header word by case - insensitive key .
10350	Set a header word by case - insensitive key .
10351	Returns an array of notices for the current user .
10352	Lists all extensions .
10353	Performs a cURL request .
10354	Run ajax task .
10355	Deactivates an extension .
10356	Activate an extension .
10357	Uninstalls an extension .
10358	Starts a task .
10359	Get a TeamSpeak client by name
10360	Downloads the icon .
10361	Sends a text message to this channel .
10362	Delete the channel .
10363	Encode a JWT .
10364	Sign a message with a given key
10365	Decodes a JSON string .
10366	Commits the changes to the file .
10367	Bootstrap the application .
10368	Copy a channel group .
10369	Sends a text message .
10370	Get the class name of the form .
10371	Get entity by id
10372	Returns a list of entities .
10373	Creates a new entity .
10374	Creates a new entity .
10375	Deletes an entity .
10376	Reads a file .
10377	Parse a JSON string .
10378	Parse a file and return the contents .
10379	Normalize the id .
10380	Remove invalid attributes from the input .
10381	Set the value of the element .
10382	Add an element to the collection .
10383	Returns the top level window .
10384	Remove an element from the collection .
10385	Get element by id
10386	Loads a state .
10387	Saves the state .
10388	Sets the data type .
10389	Create a new channel
10390	Get localized versioned data field .
10391	Returns a localized field from the given data .
10392	Get other package versioned data .
10393	Get other package data .
10394	Humanize a GithubMarkdown readme .
10395	Prepare a migration task for the given extension .
10396	Build a task .
10397	Matches a post to a server .
10398	Parse a regex route .
10399	Checks the strictness of the object .
10400	Returns the TeamSpeak3 profiler .
10401	Initializes the TeamSpeak transport
10402	Get blameable attributes .
10403	Get timestamp attributes .
10404	Evaluates the event s attributes .
10405	Base actions info trait init .
10406	Prepares the request for sending .
10407	After request callback .
10408	Reads data from the server
10409	Sends data to the server .
10410	Restore the database dump
10411	Dump the database
10412	Initializes the menu .
10413	Add a button to the menu
10414	Install WXWidgets 2
10415	Populate the columns with the longest value .
10416	Populate the numeric columns with the longest value .
10417	Transforms a JSON string into an array .
10418	Register the Doctrine Orm instance .
10419	Sets a file .
10420	Sets a post field .
10421	Sets the raw content .
10422	Resolve a class .
10423	Bind an abstract to a concrete .
10424	Get the concrete representation of an abstract .
10425	Dispatch an event .
10426	Gets the spacer type for a channel
10427	Returns the align value of a channel spacer .
10428	Assign a set of permissions to a channel
10429	Removes a specific permission from a channel
10430	Adds a permission to a channel client
10431	Removes a permission from a channel client
10432	Returns a list of files in a channel
10433	Get a TeamSpeak client by ID .
10434	Returns a client by unique identifier .
10435	Moves a client to another channel
10436	Kicks a client in the channel
10437	Remove a specific permission from a client
10438	Get server group by id
10439	Get server group by name
10440	Assigns a permission to a server group
10441	Returns an array of server group profiles
10442	Get channel group by id
10443	Get channel group by name
10444	Assign a set of permissions to a channel group
10445	Reset the user s permissions .
10446	Uploads a TeamSpeak icon
10447	Creates a new server snapshot
10448	View logs .
10449	Adds a new message to the log .
10450	Sorts a list of Client objects .
10451	Sorts the group list .
10452	Sorts a file list
10453	Copy a server group .
10454	Get icon name
10455	Returns the TeamSpeak3 class name .
10456	Returns the TeamSpeak viewer .
10457	Filter a list of nodes according to a set of rules
10458	Writes a cache file .
10459	Returns the hydration class name .
10460	Connect to the tcp server
10461	Disconnects from the server
10462	Read a single line from the stream .
10463	Checks if a class can be created .
10464	Store a new role .
10465	Update a role .
10466	Destroy a role
10467	Make a GET request to the given resource .
10468	Returns the corpus class name .
10469	Get the corpus icon .
10470	Returns the core name .
10471	Get suffix flag
10472	Initializes the file transfer
10473	Uploads a file to the server .
10474	Downloads a file from the server .
10475	Returns the session context
10476	Returns the type manager
10477	Get database connection
10478	Removes a database connection
10479	Processes the security filters
10480	Dispatch the current request .
10481	Get params from GET
10482	Renders a view .
10483	Validate request .
10484	Dispatches the view .
10485	Redirect to the default module view .
10486	Redirect to the default user view .
10487	Initialize the user profile .
10488	Returns the user preference .
10489	Returns the default permission for a group .
10490	Returns the current view name .
10491	Sets the current view name .
10492	Returns the current view set
10493	Sets the current view set .
10494	Sets the base path .
10495	Returns the module path .
10496	Generates a SQL hash for the given data .
10497	Checks if the string matches the given hash .
10498	Read the metadata from the XML .
10499	Use an account to send the mail .
10500	Send an e - mail .
10501	Log an email .
10502	Get information about a tag .
10503	Returns the path to an autoload lib file .
10504	Loads a metadata class .
10505	Returns the path to the core lib file for a class
10506	Find class file on cache .
10507	Fills a person with the given attributes .
10508	Sets a job .
10509	Process all jobs in the queue .
10510	Checks if a string is a valid date .
10511	Renders the label .
10512	Flattens a path .
10513	Returns the config array .
10514	Create a new record using cURL
10515	Store a WebResponse .
10516	Get the data for a plot .
10517	Render a XY Plot
10518	Returns the value of a mark .
10519	Returns the font to use .
10520	Returns a new instance of this class .
10521	Get an attribute by key .
10522	Set an attribute in a group .
10523	Get an attribute in a group .
10524	Find a model by id or create a new one .
10525	Returns the model set .
10526	Get a unique id for a function .
10527	Call all filters .
10528	Append a callable to a hook
10529	Check if a hook exists .
10530	Call a hook .
10531	Replace a hook with a function .
10532	Returns the number of hooks with the given name .
10533	Check if a hook should be executed .
10534	Check if a hook is called .
10535	Adds a new route .
10536	Add a route to the pipeline .
10537	Run the application .
10538	Signals a single execution .
10539	Sets a value in the container .
10540	Returns a raw definition .
10541	Encrypts the given value using the given key .
10542	Decrypts the given value using the given key .
10543	Returns the default key .
10544	Calculates the arguments .
10545	Get the type of a string .
10546	Add an app .
10547	Get a sub - route .
10548	Serializes the Route object into a string .
10549	Unserializes the object .
10550	Converts a begin year to an actual year .
10551	Get current timestamp .
10552	Returns the day name for a given day .
10553	Returns a short day name .
10554	Returns the month name .
10555	Returns a short month name .
10556	Format a date .
10557	Get a string representation of a datetime .
10558	Register the base services .
10559	Post a section tree .
10560	Sets the owner .
10561	Removes comments from the input .
10562	Minify CSS .
10563	Set a global variable .
10564	Quotes a value .
10565	Explode a generic string into a string .
10566	Returns the role associated with the given role .
10567	Add a role to the user .
10568	Check if the user has the given role .
10569	Error handler .
10570	Exception handler .
10571	Returns the output error message .
10572	Returns a backtrace of an error .
10573	Sets the name of the field .
10574	Adds a setting to the result .
10575	Adds a cachable setting .
10576	Unsets an offset .
10577	Set the sync state .
10578	Collect sync data .
10579	Returns the expression context .
10580	Terminate this process .
10581	Register a child execution .
10582	Check if a child execution has been terminated .
10583	Sets the scope .
10584	Creates a new execution .
10585	Creates a new nested execution .
10586	Find all child executions of a given node .
10587	Computes the variables of the current execution .
10588	Returns the value of a variable .
10589	Returns the value of a variable in the scope .
10590	Sets a variable in the scope .
10591	Sets a local variable .
10592	Remove a variable .
10593	Remove a variable from the scope .
10594	Execute the command on the given node .
10595	Wait for a signal to be sent .
10596	Send a signal to the server .
10597	Take a transition .
10598	Initiate a concurrent root .
10599	Load a message from an ini file .
10600	Get a message by id
10601	Returns a Zend_View object that can be used to create a Zend template .
10602	Checks if given value is a directory .
10603	Checks if given value is writable directory .
10604	Checks if given value is writable file .
10605	Checks if given value is readable file .
10606	Validate an email address .
10607	Validate an IP address .
10608	Validate an IPv4 address .
10609	Valid IPv4 address is not reserved .
10610	Validate an IPv6 address .
10611	Initializes the view .
10612	Checks if a class has an attribute .
10613	Checks if a class has a method .
10614	Returns the parameters of a method .
10615	Get a ReflectionMethod from an object .
10616	Returns the data as an array .
10617	Get a response from the MSN API .
10618	Get a blank line .
10619	Counts the number of term columns .
10620	Returns the error block .
10621	Returns a single line of text .
10622	Slices an array to a specific position .
10623	Set validation rules .
10624	Completes the request flow .
10625	Get an object from the object map .
10626	Creates a new object and returns it
10627	Registers an XML file .
10628	Authenticates a user with an authorization code .
10629	Get the user s feed .
10630	Get a list of media likes .
10631	Set a relationship for a user .
10632	Set the properties of this object .
10633	Fetch all records .
10634	Counts all rows .
10635	Find a record by id .
10636	Create a new record in the database .
10637	Executes a SELECT query .
10638	Executes the query and returns the results .
10639	Check if a condition can proceed .
10640	Creates a link .
10641	Picks a row to be passed to the parent form .
10642	Parse a picker map .
10643	Convert array of ReflectionClasses to self .
10644	Initializes the set up .
10645	Gets a field by column name .
10646	Returns the rule for a key search .
10647	Sets the record s value in the RecArr array .
10648	Saves an old record .
10649	Returns an array containing the values of a single record
10650	Converts an SQL Arr to a RecArr
10651	Sets a sql record .
10652	Returns the input record for a given join .
10653	Returns the join rule .
10654	Returns the HTTP method .
10655	Get the request URI .
10656	Gets a configuration option .
10657	Make a new instance .
10658	Issues an access token .
10659	Format a report .
10660	Decodes a JSON file .
10661	Validate a time stamp .
10662	Lists all Comment models .
10663	Updates an existing record .
10664	Execute the request and return the response .
10665	Implode a list to a string .
10666	Render CSV file .
10667	Render csv file
10668	Returns the data table for the given object .
10669	Loads all stateless variables from the session .
10670	Get the value of a property .
10671	Returns the current active record
10672	Sets the active record id .
10673	Fetch a single record from the database .
10674	Fetch a single record from the database
10675	Fetches a list of records matching a search rule .
10676	Returns the number of records in the database
10677	Runs the search .
10678	Returns the number of records in a table
10679	Fetches the next record from the result set
10680	Adds the SCKey JS to the form .
10681	Get a config value .
10682	Bootstrap the application .
10683	Authenticates a DBUser .
10684	Sets the request .
10685	Sets the max age .
10686	Change the mime type of a file .
10687	Check if input is a valid mime type
10688	Check if the file is a text file
10689	Check if the file is a full file .
10690	Sets the file properties .
10691	Check if cache is OK .
10692	Read data from the filesystem .
10693	Sends the content .
10694	Clean the source of the file .
10695	Squeezes the given content into a string .
10696	Convert cssmin to string
10697	Wrap text in words .
10698	Get the content of the file .
10699	Serves a text message .
10700	Set the allow origin .
10701	Sends the file .
10702	Registers a texting provider .
10703	Denormalizes the given data into an instance of the given class .
10704	Returns true if the message type supports denormalization .
10705	Validates data against a set of rules .
10706	Validates a model .
10707	Returns the action attribute .
10708	Returns the URL attribute .
10709	Goes to the next step .
10710	Skip the current step .
10711	Go back to the current page .
10712	Finishes the validation process .
10713	Cancels the session .
10714	Renders the form .
10715	Generates a random string .
10716	Check if a value is empty .
10717	Shortcut to a ternary function .
10718	Checks if the given value is contained in the given container .
10719	Merge another MIObj into this one
10720	Creates a Router instance .
10721	Dispatch an event .
10722	Counts the number of records in a field group .
10723	Aggregate a group .
10724	Find a document by id .
10725	Returns an array of MongoId objects .
10726	Normalizes a date to ISO8601 .
10727	Checks if the given form name is in the form reference library .
10728	Renders the web page .
10729	Get current page url
10730	Initializes all forms .
10731	Compares two integer values .
10732	Convert a value to an integer .
10733	Finds all source files in a directory .
10734	Registers a namespace .
10735	Builds the cache .
10736	Finds the Composer Autoloader class name .
10737	Find composer autoloader vendor directory .
10738	Returns all registered class loaders .
10739	Get a middleware or fallback .
10740	Set a middleware or fallback .
10741	Returns a new Printable with the given string limit .
10742	Returns a new Printable with the given array limit .
10743	Get a string representation of the given value .
10744	Returns a string representation of an array .
10745	Generates an array pair .
10746	Returns an array representation of the given value .
10747	Returns the object for the given value .
10748	Reject a transaction .
10749	Boots the router .
10750	Renders a Smarty page .
10751	Renders the Smarty template .
10752	Renders a PHP view .
10753	Set the headers for a view .
10754	Creates a new comment instance .
10755	Lists the contents of a directory .
10756	Sorts the modules .
10757	Returns the list of routes .
10758	Renders the menu items .
10759	Render a single menu item
10760	Writes data to CSV file .
10761	Configures the check .
10762	Read config from config handler
10763	Run the checks .
10764	Run the export command .
10765	Writes data to the cache .
10766	Get the loaded cache .
10767	Initializes the config .
10768	Executes a command and returns the output .
10769	Flushes a process .
10770	Check if value can be chained .
10771	Validates a form
10772	Check if the item is satisfied by the group item .
10773	Completes the flow for the given client .
10774	Returns the SQL value of the field .
10775	Returns the value of this object .
10776	Saves the old value .
10777	Returns the default value of the expression .
10778	Returns the value on create .
10779	Returns the value on update .
10780	Check if the expression is required .
10781	Checks the type of the value .
10782	Validates the expression .
10783	Finds a file by its name .
10784	Prepare a theme name .
10785	Sets the theme to use .
10786	Register a new theme .
10787	Adds a new theme to Twig .
10788	Convert a key to an offset .
10789	Convert an offset to a key .
10790	Returns the smallest deviation of the given array .
10791	Set the route middleware .
10792	Returns the action name .
10793	Returns the path parameters for the given path .
10794	Checks if a given scheme matches the current scheme .
10795	Matches the hostnames .
10796	Checks if the given URI matches the pattern .
10797	Fetch a tree of nodes based on a search rule
10798	Fetches the node path according to a search rule .
10799	Returns all child nodes of the given node .
10800	Returns an array of settings from the results .
10801	Returns the link expression .
10802	Gets the text of the form .
10803	Gets a new record from the data panel
10804	Sets the secret .
10805	Returns the binary representation of a number .
10806	Returns a string representation of a number .
10807	Adds a column to the table
10808	Adds a SQL expression .
10809	Resets the query string .
10810	Adds ORDER BY clause
10811	Adds the other SQL to the query .
10812	Adds an association to the table
10813	Returns the SQL statement for the query
10814	Get a DataRecord by key .
10815	Callback for console action .
10816	Returns the default template locations .
10817	Renders the object .
10818	Get Google Fonts .
10819	Checks if the model matches one of the given groups .
10820	Validates the input .
10821	Validates the uniqueness of the object .
10822	Check if a record can be updated
10823	Check if a record can be deleted
10824	Updates an existing record
10825	Returns a new record .
10826	Generates a new id
10827	Inserts a new record into the database
10828	Deletes a record from the database
10829	Returns an array of on audit fields .
10830	Runs the DOTrigger .
10831	Returns the join fields for the given join data object .
10832	Joins a record with another record .
10833	Check if ID needs to be generated .
10834	Runs the command .
10835	Initializes the report .
10836	Resolves the route .
10837	Resolves action parameters .
10838	Check if a setting has a given name .
10839	Get a setting by name .
10840	Get all settings .
10841	Loads the cache .
10842	Set the cache location .
10843	Prefixes the content with the prefix rules .
10844	Prefix align items .
10845	Prefix align content .
10846	Prefix flex - align with self .
10847	Prefixes the given value with Flex rules .
10848	Prefix content with justify rules .
10849	Get the prefix rules .
10850	Add a comment to a media .
10851	Performs a DELETE request .
10852	Returns a filtered collection of media .
10853	Returns the preferred image .
10854	Returns the placeholder .
10855	Create a rule from a string .
10856	Get the output .
10857	Get an Eloquent ReflectionMethod for the given object .
10858	Lists all sitemaps .
10859	Sitemap action .
10860	Returns the XML tree .
10861	Check if the request is a valid request .
10862	Determines the access token for the request .
10863	Call a middleware .
10864	Check if the call context has changed .
10865	Store a command in the cache .
10866	Executes a callback .
10867	Returns a Php object .
10868	Creates a phar .
10869	Get a pattern by name .
10870	Merge a group config with the current config .
10871	Removes a record from the database .
10872	Removes a record from a database table from a database table .
10873	Removes a record from a mto1 association
10874	Returns the ddv relations as an array .
10875	Read metadata from XML .
10876	Read meta collection from xml
10877	Prefix a package name .
10878	Returns true if the current user has access to the database .
10879	Builds the redis driver instance .
10880	Get the model for a table .
10881	Adds a new resolver type .
10882	Returns the resolver for the given type .
10883	Sets a resolver .
10884	Resolves a reference to a resolver .
10885	Set the authorative .
10886	Registers a module .
10887	Sorts modules by priority .
10888	Set the precedence of a module .
10889	Auto configure from composer . json
10890	Finds all modules in a directory .
10891	Get checkbox by field name .
10892	Register the service provider .
10893	Converts a formatted string to a value .
10894	Convert a value to a formatted string .
10895	Converts a value to a number .
10896	Convert a number to a formatted value .
10897	Convert a value to a date .
10898	Converts a datetime formatted value to a string .
10899	Convert a value to a datetime string .
10900	Converts a datetime formatted value to a string .
10901	Converts a value to a currency .
10902	Convert a currency symbol to a float .
10903	Convert a value to a phone number
10904	Converts a datetime format to the new format .
10905	Parse a date .
10906	Renders the DSN part for MySQL .
10907	Render the DSN part for PGSQL .
10908	Render DSN parts .
10909	Performs an INSERT on the database .
10910	Performs an INSERT multiple times
10911	Get the request path .
10912	Get a concrete by id .
10913	Format a query string .
10914	Format a query string value
10915	Set query string parameters .
10916	Get the database profile of a user .
10917	Format a report .
10918	Validates a strong password
10919	Validates an email address
10920	Validates a date .
10921	Returns the error message .
10922	Make a new collection .
10923	Agrega os atributos .
10924	Get a new id .
10925	Get a new system id
10926	Generates a new GUID
10927	Get new id with sql query .
10928	Get a visible attribute .
10929	Sets the formatter .
10930	Prepares a file for output .
10931	Closes a file .
10932	Returns the log file path .
10933	Get formatter by extension .
10934	Returns the document manager .
10935	Renders a view .
10936	Output a domPdf file
10937	Sets the base URL of the REST API .
10938	Makes a cURL request to the given endpoint
10939	Get many responses from a set of endpoints
10940	Send a POST request to the API .
10941	Performs a POST to a number of endpoints .
10942	Push a job to the queue .
10943	Create a JSON payload for a job .
10944	Returns the content element identifier for the given content element key .
10945	Converts an extension identifier to a content element signature
10946	Returns the content element signature .
10947	Get the title of the form .
10948	Removes a record from the database
10949	Sorts a record
10950	Filter view children by given column .
10951	Filter view children by sys_language_uid
10952	Set a field value by a db field name .
10953	Returns the data as an array .
10954	Fill the entity with the given data .
10955	Extracts a zip file to a directory .
10956	Add a file to a zip archive .
10957	Extracts a GZ file from an archive .
10958	Reads a line from a file .
10959	Returns the size of a file or directory .
10960	Gets the classes from a PHP file .
10961	Add a new route .
10962	Resolves the route for the given request .
10963	Resolve a config key .
10964	Check if a key exists .
10965	Gets a value from the cache .
10966	Load a config file .
10967	Get background details .
10968	Opens a new OAuth connection .
10969	Check response status code .
10970	Handle a JSON message .
10971	Check if the status string is a message .
10972	Read the next chunk size .
10973	Reads a JSON stream from the stream .
10974	Returns the value of a property
10975	Returns the default value .
10976	Get the hidden part of the expression .
10977	Gets the text of the form .
10978	Returns the function map for the SCKey .
10979	Returns the context menu .
10980	Returns the function name .
10981	Returns the redirect page .
10982	Returns the function type for the given event handler .
10983	Set the form name and elem name .
10984	Adjusts the form name .
10985	Returns the formated function .
10986	Parse a function name and params string
10987	Call a middleware .
10988	Clears the group .
10989	Handle the halt event .
10990	Resets the middleware .
10991	Creates a new data object .
10992	Convert a counter to a string .
10993	Executes a GET request
10994	Performs a POST request .
10995	Creates a Response object and returns it .
10996	Check if we should follow redirects .
10997	Check effective time
10998	Parse a string .
10999	Parse a multibyte string .
11000	Renders a form object
11001	Renders the Smarty form .
11002	Renders the PHP code for the given form .
11003	View an entity .
11004	Store a new resource .
11005	Calls an entity method .
11006	Create a middleware .
11007	Get the default commands .
11008	Updates a user .
11009	Returns the plugin s settings .
11010	Get the current group .
11011	Returns the current direct membership .
11012	Get the effective member of the group .
11013	Parse membership data .
11014	Parse the history .
11015	Parse the affiliate .
11016	Parse the search data .
11017	Returns the current view object .
11018	Returns the element with the given name
11019	Returns an array of error elements .
11020	Renders the subforms .
11021	Set bundle class .
11022	Get the translation key for the given key .
11023	Returns a list of words .
11024	Load configs .
11025	Remove an item from the cache .
11026	Returns a list of ids .
11027	Cleans the entire cache .
11028	Makes a directory .
11029	Reads an environaut config file .
11030	Get a config reader by extension .
11031	Add a route branch .
11032	Adds a route .
11033	Find a route branch by part .
11034	Returns the next RouteBranch matching the given URI part .
11035	Find a record by issue .
11036	Get WP - Contents .
11037	Get WordPress categories .
11038	Get WP menus .
11039	Get a list of WordPress pages .
11040	Get a list of recent WordPress posts .
11041	Get a list of WordPress post types .
11042	Get a list of WordPress tags .
11043	Get WordPress taxonomies .
11044	Returns a list of WordPress terms .
11045	Adds a path to the search path .
11046	Sets the precedence of a module
11047	Returns the precedence of a module .
11048	Clears the cache .
11049	Get cached data .
11050	Resolve a file .
11051	Parse the request URI .
11052	Saves the stateful variables to the session .
11053	Get the current step .
11054	Get form inputs .
11055	Cancels the session .
11056	Registers a new sub type enum .
11057	Get an input from the request .
11058	Delete a file or directory .
11059	Converts an expiration time to seconds .
11060	Gets the key words of a text .
11061	Find all email addresses in text .
11062	Checks if an array contains a query .
11063	Redirect to another endpoint .
11064	Migrate up a migration .
11065	Migrates a directory up
11066	Sets the id of this object .
11067	Executes the daemon .
11068	Check if a parameter exists .
11069	Generate an OAuth request .
11070	Get the OAuth signature .
11071	Adds a node to the collection .
11072	Adds a transition from one item to another .
11073	Adds a setting to the settings array .
11074	Add multiple settings at once .
11075	Get a list of settings .
11076	Get the cachable settings .
11077	Returns the settings as an array
11078	Returns the cachable settings as an array .
11079	Get settings filtered by groups and flags .
11080	Returns all settings filtered as an array .
11081	Renders the image .
11082	Renders an array of node items
11083	Renders a single node item
11084	Runs the application .
11085	Registers the bundle for the given environment .
11086	Installs the autoloaders .
11087	Initializes the plugin .
11088	Autoload a class .
11089	Load a file by id .
11090	Forwards a request to a specific route .
11091	Add glyph icon
11092	Sets the query parameters .
11093	Sets the limit for the query .
11094	Get the database connection .
11095	Get the value of a property .
11096	Get a reference object by name .
11097	Sets the object s association
11098	Parses a docblock into a collection of annotations .
11099	Creates a new connection from memory .
11100	Create a new Sqlite connection from a file
11101	Get a field from the collection .
11102	Checks if a field exists .
11103	Returns an array of field names .
11104	Returns the initial data model .
11105	Authorizes the index action .
11106	Authorize the create action .
11107	Get a nested object based on a pattern
11108	Initializes the user agent .
11109	Get the export implementor .
11110	Get the report implementor .
11111	Returns the runner implementation .
11112	Returns the cache implementor .
11113	Builds the UPDATE SQL .
11114	Builds the DELETE SQL .
11115	Get the style of the editcombobox
11116	Returns all child nodes of this node .
11117	Get attribute value .
11118	Returns the attributes of this node .
11119	Returns a child node .
11120	Get the literal value of an element .
11121	Cache a menu if configured .
11122	Handle a method call .
11123	Checks if a method is valid .
11124	Returns true if the current context is a getter .
11125	Returns true if the current context is a setter .
11126	Prepare the cURL call .
11127	Returns the response .
11128	Get the response JSON .
11129	Saves an object variable .
11130	Load an object variable
11131	Saves all objects in the session
11132	Clears all session objects .
11133	Saves a JSON array .
11134	Set the history of a view .
11135	Sets the start time and count .
11136	Counts the number of seconds elapsed .
11137	Sets the time elapsed between stop and start .
11138	Reset the timer .
11139	Check if the given value is a valid executable .
11140	Returns the redirect page .
11141	Processes a DataObject exception
11142	Processes the URL .
11143	Returns the base URI .
11144	Validate the identity .
11145	Setup the authentication result
11146	Set a visible attribute .
11147	Get the first dump as an array .
11148	Get data from a list .
11149	Format a report .
11150	Call a middleware .
11151	Call proxy getters .
11152	Call proxy middleware .
11153	Call proxy setters .
11154	Catch halted middleware .
11155	Clears the middleware .
11156	Disable a middleware .
11157	Enable a middleware .
11158	Get a middleware .
11159	Returns a middleware group .
11160	Sets the middleware group .
11161	Check if a given key exists in the middleware group .
11162	Check if a middleware is disabled .
11163	Check if a middleware is enabled .
11164	Get a middleware .
11165	Collect a middleware collection .
11166	Prepend a middleware to the end of the stack .
11167	Push a middleware to the end of the stack .
11168	Set a middleware context .
11169	Call a middleware and return the result .
11170	Saves the object to the database .
11171	Returns array of form attributes .
11172	Setup the autoloader .
11173	Finds outgoing transitions .
11174	Make a remote call .
11175	Returns a callable to submit the form .
11176	Generates a link tag .
11177	Generates a submit tag .
11178	Cast a key to a string .
11179	Check if a middleware is abstract .
11180	Checks if a middleware is a collection .
11181	Resolve a middleware .
11182	Resolves a middleware or throws an exception .
11183	Resolves a group of middleware .
11184	Resolves a group of middleware or throws an exception .
11185	Resolves a single middleware .
11186	Resolve a middleware or throw an exception .
11187	Renders a report .
11188	Returns a unique string
11189	Check if the user has the given role .
11190	Determine if the user has the given role .
11191	Returns the hash of the request .
11192	Get information about a cURL request
11193	Perform the request .
11194	Check if the current user has access to a view .
11195	Returns the view object that matches the given view name .
11196	Format a report .
11197	Loads an XML document .
11198	Validates the schema file .
11199	Validates a source schema .
11200	Resolve the XInclude directives in the current document .
11201	Returns the value of an element .
11202	Returns the element with the given name .
11203	Sets the default namespace .
11204	Register environmentnaut namespace .
11205	Returns true if the given document is an environmentnaut configuration document .
11206	Refreshes the XPath object .
11207	Parse a libxml error
11208	Get all resolvers for a given subject .
11209	Checks the authorization parameters .
11210	Creates a new authorization request .
11211	Completes the flow .
11212	Prints the output .
11213	Get form inputs
11214	Redraws a form .
11215	Show an alert to the client .
11216	Show error message .
11217	Closes the popup .
11218	Run a script on the client .
11219	Redirects to a view
11220	Append scripts .
11221	Returns an array of scripts that are appended to the current view
11222	Appends a set of styles to the css file .
11223	Returns an array of styles that should be appended to the current page .
11224	Include base client scripts
11225	Include RTE scripts .
11226	Include CKEditor scripts .
11227	Include the scriptaculous and window . js .
11228	Include validator scripts .
11229	Executes all trigger actions .
11230	Composes an action message
11231	Convert a string to an array
11232	Process form object errors .
11233	Sets the subforms .
11234	Loads a picker .
11235	Set request params
11236	Fetches the data set .
11237	Returns the element id .
11238	Auto Suggests a term
11239	Renders the context menu .
11240	Renders the context menu .
11241	Get the event log message .
11242	Returns an array of onEvent elements .
11243	Run the event log .
11244	Get the invoking element
11245	Sets the client scripts .
11246	Removes a middleware from the stack .
11247	Run the middleware stack .
11248	Create a DateTime instance from a string .
11249	Generate a secret key .
11250	Decodes a base32 string .
11251	List all iterators .
11252	Returns a list of all elements .
11253	Returns a list of directories .
11254	Returns a list of all files .
11255	Make the file if it doesn t exist .
11256	Make directory recursively .
11257	Move a file to a new location .
11258	Renames a file .
11259	Remove directory recursively .
11260	Sets the field name .
11261	Sets the type of the attribute .
11262	Sets the input format rule .
11263	Sets the value of the field
11264	Returns the storage value .
11265	Saves the children of this model .
11266	Adds children to an entity .
11267	Returns a list of models .
11268	Output a list of models .
11269	Converts a resource to an array .
11270	Generate the reCaptcha form .
11271	Verify reCAPTCHA .
11272	Returns a service object .
11273	Renders the error .
11274	Render an HTTP exception .
11275	Renders a CakeException .
11276	Renders a serializer exception .
11277	Renders a validation serializer exception .
11278	Render an HttpException as JSON
11279	Render an HttpException as JsonApi
11280	Renders a CakeException as JSON .
11281	Render a CakeException as a JSON API response .
11282	Renders a serializer exception .
11283	Renders the serializer as JSON .
11284	Renders the serializer as a JSON API .
11285	Renders the default validation serializer .
11286	Renders the validation serializer as JSON .
11287	Renders the validation serializer exception as a JSON API .
11288	Opens a session by ID .
11289	Create a new session based on cookie data .
11290	Prepares text for sending .
11291	Displays the given text .
11292	Display empty lines .
11293	Initializes the application .
11294	Called when a kernel response is received .
11295	Initializes the debug bar .
11296	Starts a session .
11297	Checks if the user s IP address matches the user s user agent .
11298	Regenerates the session id
11299	Validate session data
11300	Binds all layers to this structure .
11301	Parse the backbone of the request .
11302	Register a pxcmd
11303	Print the cli header .
11304	Parse raw body .
11305	Remove extra indentation from a string
11306	Handle a request and return the response .
11307	Parse a query string from a URL .
11308	Binds the page to the theme .
11309	Get the match for a given URI .
11310	Returns the value of a justification constant .
11311	Returns a list of local files .
11312	Extracts the documents link from the HTML .
11313	Excludes a link .
11314	Saves content to a file .
11315	Check if a pdf file exists .
11316	Get the next ordered number .
11317	Ends the nesting .
11318	Displays the given text .
11319	Displays a single line of text .
11320	Fits a DataSet to a learning rate .
11321	Calculates a LinearRegression against a DataSet .
11322	Initializes the table .
11323	Writes a record to the database .
11324	Draws a list item
11325	Starts a new line .
11326	Initializes the application .
11327	Get a size by name .
11328	Builds a form for a section .
11329	Returns the form factory .
11330	Load fixtures from iterator .
11331	Resolve a relative URL .
11332	Installs a package .
11333	Installs a composer plugin .
11334	Install a framework package .
11335	Updates a package .
11336	Update the composer framework .
11337	Uninstalls a package .
11338	Uninstalls a composer plugin .
11339	Removes a directory that matches a given path .
11340	Removes a directory .
11341	Sets the text and fill colors .
11342	Returns the text area .
11343	Calculates the width of a message .
11344	Scope get by date value
11345	Get the value of a date field .
11346	Casts an attribute .
11347	Convert the attributes to an array .
11348	Sets a value to a key .
11349	Get a menu .
11350	Set the configuration for the kernel response .
11351	Returns the service definitions .
11352	Parse the imports .
11353	Parse the service definitions .
11354	Loads a configuration from a local file .
11355	Resolves services .
11356	Initializes the autoloader .
11357	Get the API instance .
11358	Converts bytes to a human readable string .
11359	Sets the bullet to use .
11360	Sets a column definition .
11361	Calculates the total width of the column .
11362	Checks if the column has a header .
11363	Returns the header text .
11364	Check if data is valid .
11365	Calculates the width of a column .
11366	Draws a single row .
11367	Creates a new session file .
11368	Creates a new session file .
11369	Saves session data to a file .
11370	Acquires a session lock .
11371	Display a form to create a section .
11372	Creates a new instance of a class .
11373	Returns a list of facts .
11374	Parse facts .
11375	Find by id .
11376	Find a record by a where clause .
11377	Find all records in the database .
11378	Find all records matching the given WHERE clause .
11379	Creates a new record .
11380	Updates a record in the database using a WHERE clause .
11381	Parse notation .
11382	Applies the given conditions to the expression .
11383	Calculates the mean of the formulas .
11384	Create a new PluginClient .
11385	Set the contents of a file .
11386	Adds a template .
11387	Checks if the given template is a ttl template .
11388	Convert placeholders to blocks .
11389	Get the metadata for a template .
11390	Builds a definition provider from a Discovery object .
11391	Returns the result for the given formula .
11392	Saves a formula to the stack .
11393	Adds a header to an item .
11394	Sets the dropdown menu .
11395	Returns true if the given attributes are granted to the user .
11396	Downloads a file to the browser .
11397	Get the url for a given type and key .
11398	Sets the cover for a list of images
11399	Get data by type .
11400	Get the data from the URL .
11401	Installs a resource controller
11402	Checks if a date is valid
11403	Wraps the given content in a GUI frame .
11404	Runs an artisan command .
11405	Factory method .
11406	Creates a new session .
11407	Sends a new entity .
11408	Registers all providers .
11409	Register a new provider from a file .
11410	Get all facts .
11411	Populates the facts with data from all providers .
11412	Record a domain event .
11413	Apply the event to the given domain event .
11414	Call the plugin s functions .
11415	Draws a bar with the given data
11416	Calculate a formula .
11417	Check if the current request has a layout .
11418	Sets the terminal state .
11419	Override members to a style .
11420	Clears the styling .
11421	Sets the text color .
11422	Sets the fill color .
11423	Sets the text and fill colors .
11424	Reverse the text and fill colors .
11425	Creates a new instance of a function .
11426	Loads all plugins .
11427	Show plugins in admin .
11428	Check if cache is available .
11429	Updates the plugin cache .
11430	Load plugin hooks .
11431	Get a channel by name .
11432	Initializes the loggers .
11433	Create a logger instance .
11434	Returns a list of Location objects .
11435	Creates a new instance of a class .
11436	Returns an array of interfaces .
11437	Returns the parent class .
11438	Returns a list of methods .
11439	Returns a list of properties .
11440	Check if a type is defined .
11441	Add a style to a MaterializedResource .
11442	Returns the aggregated style .
11443	Rewrite the paths for the given styles .
11444	Wrap the media rules .
11445	Move imports to start .
11446	Get an archive by ID .
11447	Remove a file from the archive
11448	Get the path to the archive file .
11449	Get archive file path .
11450	Cleanup merged values .
11451	Filter an array using the given filters .
11452	It should return terminal screen size
11453	Returns a stylesheet for the given content .
11454	Generates a script .
11455	Sends a text message to an email address .
11456	Creates a static control for the given value .
11457	Adds a static control to an active model .
11458	Adds a CSS style .
11459	Make directory .
11460	Set the list of files to publish .
11461	Initializes this object .
11462	Logs in a user with the given identity .
11463	Regenerates the CSRF token from the request .
11464	Login by cookie .
11465	Get the return url .
11466	Check if the user is required to login .
11467	Renew the identity cookie .
11468	Renew auth status .
11469	Checks if a user has access to a permission
11470	Get the days of the week .
11471	Save the uploaded file to a directory .
11472	Executes the query .
11473	Add a DELETE statement to the query
11474	Set or get the insert query .
11475	Add an inner join to the query .
11476	Adds a WHERE clause .
11477	Adds a HAVING condition .
11478	Returns the SQL for DELETE .
11479	Creates a positional parameter .
11480	Bind the logger interface to the container .
11481	Bind the logger instance to the container .
11482	Sets the HTTP status code
11483	Returns the formatted response body .
11484	Redirects to a given url .
11485	Create an empty response .
11486	Prepares the headers array .
11487	Returns a list of cookies ready to be sent .
11488	Get default formatters .
11489	Extracts the auth user pass from the encoded string .
11490	Returns an array of scenario keys and attributes .
11491	Fills the attributes of the scenarios .
11492	Returns the form name of the model .
11493	Returns a list of all public attributes .
11494	Validates a set of attributes .
11495	Validate multiple models .
11496	Sends a T response .
11497	Add an attachment to the email .
11498	Add a plugin .
11499	Sends a request to the API .
11500	Loads a class .
11501	Returns a list of all registered listeners .
11502	Set the listener s properties .
11503	Creates an event listener from an annotation .
11504	Returns the options for an option .
11505	Sets an array of options .
11506	Get a key value by key type and key value
11507	Set MassAssignment from array .
11508	Load entities from a directory .
11509	Extends the entity manager .
11510	Checks if all predictions failed .
11511	Process extends .
11512	Verify class method .
11513	Verify class property .
11514	Verify that a function is callable .
11515	Verify that the closure is valid for the given Dispatch .
11516	Verifies a dispatch .
11517	Get all dependencies .
11518	Get the arguments for the given Dispatch .
11519	Dispatch a class method .
11520	Dispatch a class property .
11521	Dispatch a class .
11522	Dispatch a function .
11523	Dispatch a closure .
11524	Dispatch a callable .
11525	Returns the request arguments as a string .
11526	Returns the request arguments .
11527	Parse the request arguments .
11528	Generates a link .
11529	Set the protocol version .
11530	Asserts that all header values are valid .
11531	Injects a header .
11532	Returns the current date .
11533	Check and update cookies fields
11534	Stores a cookie .
11535	Adds the cookies from a response .
11536	Returns an array of cookies that match the given url .
11537	Get all cookies .
11538	Serializes the cookie collection .
11539	Unserializes the object .
11540	Check if a cookie domain matches a request .
11541	Registers a new command .
11542	Get the getopt arguments for a given command .
11543	Get help for a command
11544	Returns a singleton instance of the frontend class
11545	Converts an expression to a number system .
11546	Parse an expression part .
11547	Process a key .
11548	Trims unicode characters .
11549	Sets the encoding of this string
11550	Creates an iterator exception .
11551	Initializes the translations .
11552	Initializes URL language prefixes .
11553	Access the messageFormatter
11554	Start a new transaction .
11555	Returns the API request URL .
11556	Get the API request parameters .
11557	Returns an array of success messages .
11558	Returns a success message .
11559	Find all budgets by account id
11560	Get the current language .
11561	Parse Accept Language
11562	Bind a value to a binding .
11563	Make a new instance of a class .
11564	Validate a URL .
11565	Check if a field is a live variable .
11566	Creates a field object .
11567	Wrap an object in a ViewableWrapper
11568	Get the value of a field as a date .
11569	Generates a unique session identifier .
11570	Encrypts the session data .
11571	Decrypts the session data .
11572	Get the encryption key .
11573	Sets the encryption algorithm .
11574	Sets the hash algorithm .
11575	Prepare update sets .
11576	Initializes the service
11577	Get the value of a parameter .
11578	Check if the target relation exists .
11579	Checks if the target attribute exists on the model .
11580	Checks if value exists in query .
11581	Returns the SQL for a clause .
11582	Renders a modal .
11583	Localizes a file .
11584	Detach the stream .
11585	Reads a string from the stream .
11586	Creates a new Request instance .
11587	Creates a new request from the globals .
11588	Set the request server .
11589	Set the request headers .
11590	Returns the request path .
11591	Returns the current path only .
11592	Returns the http host .
11593	Set the request method .
11594	Returns the request method .
11595	Returns the mime type for the given format .
11596	Returns the format for the given mime type .
11597	Returns the request format .
11598	Render the template for the given controller method and parameters .
11599	Initializes the HTTP connection .
11600	Adds a middleware .
11601	Create a request application .
11602	Sets an alias for a path .
11603	Sets an array of aliases .
11604	Get the error log level for a given error code
11605	Generates a new proxy instance .
11606	Returns the parameters of a method call .
11607	Generates a proxy class .
11608	Gets the proxied properties of a class .
11609	Returns an array of methods that can be proxyed .
11610	Generate proxy class name .
11611	Returns the declaration of a method argument .
11612	Checks if a method can be proxyed .
11613	Checks if a method can be proxyed .
11614	Traverses the structure of an iterator .
11615	Returns the parameters of a method
11616	Create a new Packagist repository .
11617	Load messages from the database .
11618	Setup the application .
11619	Bootstrap config .
11620	Bootstrap the core .
11621	Bootstrap the application container .
11622	Get or set the current environment variable .
11623	Set env .
11624	Get or set a configuration item .
11625	Aborts a request .
11626	Throws an HttpRedirectException .
11627	Create a new response .
11628	Redirects to a route .
11629	Returns a view instance .
11630	Returns an item from the collection by key .
11631	Validates a descriptor key .
11632	Validates a descriptor .
11633	Get the cache invalidation settings .
11634	Set the cache invalidation settings .
11635	Initialize CarteBlanche .
11636	Get the path to the log file .
11637	Verify a password .
11638	Set whether or not this object exists .
11639	Render the progress bar .
11640	Renders the progress bar .
11641	Processes the SOAP request
11642	Get the SoapServer instance
11643	OnFlush event handler .
11644	Dispatches a post flush event .
11645	Invalidates an entity .
11646	Add a tag to the list of tags to invalidate
11647	Get the sexe of the choice .
11648	Sets the callback for this filter
11649	Filter a value using the callback function
11650	Returns the percentage of memory used to write to the cache .
11651	Get all seo for the model .
11652	Sets the SEO ability .
11653	Returns the seo attribute .
11654	Converts the value to a string .
11655	Get order by abscissa
11656	Returns the abscissa of this coordinate by its ordinal order .
11657	Adds an attachment to the message
11658	Encode the content - type
11659	Encode a string to a file .
11660	Encode a part to a file .
11661	Add a subpart to the MailMimePart
11662	_quotedPrintableEncode - QuotedPrintableEncode - QuotedPrintableEncode - QuotedPrintableEncode
11663	Build a header parameter .
11664	Builds a RFC2047 parameter
11665	Explodes a quoted string .
11666	Encodes a header value .
11667	Encodes a string as MB .
11668	Get the admin messages view .
11669	Returns the current line .
11670	Renders an array of items .
11671	Executes the action before the controller .
11672	Sets an option .
11673	Generates a slug .
11674	Generates a sentence .
11675	Extract gallery data .
11676	Returns true if the session is valid .
11677	Get error message for a field .
11678	Sets the sameSite attribute value .
11679	Cleans the translation files and adds the header if necessary .
11680	Returns an array of class names for a given namespace .
11681	Returns the path to a namespace .
11682	Returns the paths for a given namespace .
11683	Returns an array of namespace prefixes .
11684	Get loader prefixes .
11685	Updates the current session .
11686	Merges the current session with the passed values .
11687	Returns the session data .
11688	Get the page number from the query .
11689	Builds and returns the query string .
11690	Get the filters as an array .
11691	Creates a form .
11692	Store a result in the session .
11693	Get the pagination for the given query .
11694	Get the previous and next record id .
11695	Returns an array representation of the query .
11696	Adds a new field .
11697	Processes the configuration options .
11698	Get connection params .
11699	Check if a database is installed .
11700	Returns the sql string for this object .
11701	Executes the query and returns a ResultSet
11702	Returns the repository for the given entity .
11703	Creates a new model .
11704	Save an entity to the database .
11705	Remove an entity from the database .
11706	Commit created and save models .
11707	Get a store instance .
11708	Get the store config .
11709	Create a PDO instance from a config array .
11710	Validates the password .
11711	Creates a new instance from the given accept parameters .
11712	Parses a string into an array .
11713	Compares a string against a haystack .
11714	Returns the radius of the given latitude in degrees .
11715	Converts a coordinate from degrees to DMS .
11716	Convert a DMS to Dec .
11717	Render production error message .
11718	Renders the error message .
11719	Logs the error .
11720	Generates a configuration file for the command .
11721	Creates a configuration file template .
11722	Saves messages to a PHP file .
11723	Saves a list of messages to a pot file .
11724	Creates a Time instance from an array .
11725	Creates a Time object from a string
11726	Creates a Time object from a DateTime object .
11727	Converts a number of seconds to a Time object .
11728	Invalidate the given tags .
11729	Flushes all tags .
11730	Encodes the given tags .
11731	Register the package .
11732	Returns all cookies .
11733	Set a cookie .
11734	Removes a cookie .
11735	Confirm a dialog .
11736	Returns an array of labels .
11737	Get the session wrapped object .
11738	Get the primary key of a table .
11739	Returns table foreign keys .
11740	Returns the indexes of a table .
11741	Returns table uniques .
11742	Returns the checks for a table .
11743	Returns table default values .
11744	Get a parameter by key .
11745	Check if the user has access to the given permission .
11746	Enable or disable distinct .
11747	Set the columns .
11748	Add a JOIN clause to the query
11749	Adds an INNER JOIN clause .
11750	Add a left join to the query .
11751	Add a LEFT OUTER JOIN clause
11752	Add a RIGHT JOIN clause
11753	Add an outer join to the query .
11754	Adds a full outer join to the query .
11755	Set the group by field .
11756	Add an AND HAVING condition to the query .
11757	Adds a OR HAVING condition .
11758	Set the order by .
11759	Sets the limit and offset for the query
11760	Sets the offset .
11761	Builds the FROM clause .
11762	Renders a link .
11763	Renders a button .
11764	Renders the locale switcher .
11765	Convert the Equation to a string .
11766	Get the order by abscissa .
11767	Returns the abscissa for the given y coordinate .
11768	Find a record by id or throw an exception
11769	Finds a record by a predicate or throws an exception
11770	Check if a record exists .
11771	Checks if a record exists by a given predicate .
11772	Delete rows by a predicate
11773	Delete a record or throw an exception .
11774	Updates data in the database according to a predicate .
11775	Inserts a row into a table .
11776	Get the table s relation .
11777	Returns the primary keys of this table .
11778	Returns the primary key .
11779	Returns the columns information .
11780	Executes a SQL statement .
11781	Get the primary key predicate .
11782	Checks if specified columns exist in the table .
11783	Parse the content as an array .
11784	Parse the content as an object .
11785	Set the return type .
11786	Enqueue scripts .
11787	Enqueue all hooks of the given type .
11788	Sets the type .
11789	Sets the name of the field .
11790	Sets the start position .
11791	Set the damage to deal with .
11792	Set the hit level .
11793	Set the meter gain value .
11794	Set the inputs to be parsed .
11795	Adds a new cancel ability .
11796	Set the start frames .
11797	Set the number of active frames .
11798	Set recovery frames .
11799	Set the hit advantage on hit .
11800	Set the guard advantage .
11801	Builds a Move instance .
11802	Send a slack message .
11803	Parse a route .
11804	Parse route data .
11805	Validates a route parameter against a regular expression
11806	Finds the segment of a param .
11807	Call a repository .
11808	Validate class name .
11809	Check if the file is an image .
11810	Returns the number of files in the directory .
11811	Get the path to the console .
11812	Gets the route and params from the console .
11813	Returns a new instance with the specified scheme .
11814	Returns a new instance with the specified user and password .
11815	Returns a new instance with the specified host .
11816	Returns a new instance with the specified port .
11817	Returns a query array by key .
11818	Queries an array by a set of brackets .
11819	Sets the query variables .
11820	Set a query variable .
11821	Returns the url for the request .
11822	Normalizes the connection parameters .
11823	Resolves a reference .
11824	Returns true if the request is a fragment only request .
11825	Returns a canonical url
11826	Returns the requested url .
11827	Returns an option by name .
11828	Builds a query string .
11829	Parse a URL .
11830	Displays a text in a tab
11831	Translates the message .
11832	Suggests a language to use .
11833	Returns a list of new states .
11834	Filters the states names .
11835	Switch to new states .
11836	Find all items by budget id
11837	Displays the login form .
11838	Logout action .
11839	Connects to the given client .
11840	Get a parameter by name .
11841	Set HTML body .
11842	Adds an HTML image to the body .
11843	Add an attachment to the message .
11844	Converts a file to a string
11845	Add a text part to the mail object
11846	Returns a Mail_mimePart object containing the HTML part of the message .
11847	Add an HTML image part to the given object .
11848	Add an attachment part to an object
11849	Encode headers .
11850	Check if params are valid
11851	Checks if a value is valid
11852	Initializes the object .
11853	Loads the list of items .
11854	Save Promises .
11855	Saves data to file .
11856	Create a new JsonResponse
11857	Sets the callback .
11858	Set the encoding options .
11859	Get the layout .
11860	Returns all categories words as a string .
11861	Updates a session entity .
11862	Deletes a session entity .
11863	Configures the PM options .
11864	Loads the pm config .
11865	Get the ini memory limit .
11866	Called when model is created .
11867	Renders the view .
11868	Add a plugin to the application
11869	Get a config value .
11870	Generate a URL .
11871	Adds a GET route .
11872	Returns a HTML response .
11873	Creates a redirect response .
11874	Sets the path segments .
11875	Get the proxy class .
11876	Returns an instance of the given class .
11877	Get all results .
11878	Returns a list of columns for the given fields .
11879	Paginate the results .
11880	Find a document by id .
11881	Persists an entity .
11882	Deletes an entity .
11883	Returns the number of records in the collection .
11884	Creates a select query .
11885	Applies the given scopes to the given query builder .
11886	Apply the order by alias to the query builder .
11887	Creates a new no result exception .
11888	Replace query parameters .
11889	Adds a method .
11890	Get a RPC method by name .
11891	Shutdown loop .
11892	Add headers .
11893	Set a link to a URL .
11894	Create a new GuzzleRequest instance .
11895	Create a new PhotoAdapter instance .
11896	Returns a value in the given range .
11897	Start a new session
11898	Generate a new session id
11899	Closes the session .
11900	Unsets a session
11901	Destroys a session
11902	Decodes session data .
11903	Get the expiration date of the session cache .
11904	Returns an instance of this class .
11905	Get the module options .
11906	Returns the size of the file .
11907	Set the walk flag .
11908	Sets an array flag .
11909	Sets the matrix data .
11910	Returns the value at the specified index .
11911	Sets the value at the specified index .
11912	Rewinds the current position .
11913	Returns the previous step .
11914	Returns the previous X .
11915	Returns the previous Y .
11916	Returns the previous X and Y coordinates
11917	Moves the cursor to the next element
11918	Move to the next X .
11919	Move to the next Y .
11920	Moves the cursor to the next X and Y position .
11921	Seek to a specific index .
11922	Returns the current position .
11923	Get the value of the current key .
11924	Check if the current position is valid .
11925	Check if the key is a valid X .
11926	Check if the key is a valid Y .
11927	Returns the number of steps .
11928	Seek to offset .
11929	Seeks to an offset integer .
11930	Check if an offset exists .
11931	Returns the value at the given offset .
11932	Sets the value at the given offset .
11933	Returns true if the value is of the expected type .
11934	Allows view methods for a given object .
11935	Sets the allowed methods for a given object .
11936	Sets the table to be used .
11937	Set the from table .
11938	Add an AND WHERE clause .
11939	Set OR WHERE conditions .
11940	Sets a static rule .
11941	Set a static rule reference .
11942	Returns a rule object .
11943	Emits the end body event .
11944	Register a javascript file .
11945	Register a javascript variable .
11946	Returns the default configuration files .
11947	Get a singleton instance of PEAR .
11948	Setup the channels .
11949	Merge a config file .
11950	Write a config file .
11951	Read config data from a file
11952	Returns the default channel .
11953	Returns the value of a channel .
11954	Sets the channels .
11955	Returns the type of the given key .
11956	Returns the documentation for the given key .
11957	Returns the prompt for the given key .
11958	Returns the group for the given key .
11959	Returns a list of all configured groups .
11960	Returns the keys of a group .
11961	Get the set values for the given key .
11962	Returns the keys of the channels .
11963	Removes a channel .
11964	Removes a layer from the configuration
11965	Returns the layer defined by the given key .
11966	Returns true if the given key is defined in the configuration .
11967	Sets the registry .
11968	Process an extends clause
11969	Replaces the constants in the given value .
11970	Returns the log callback .
11971	Checks if given value is valid .
11972	Returns a list of valid values .
11973	Returns a list of valid values .
11974	Sets the value of this Enumeration .
11975	Initializes the plugin .
11976	Starts a new post - installation script session
11977	Add a success .
11978	Add idle time .
11979	Returns the estimated amount .
11980	Returns the request methods .
11981	Disable WordPress auto update filter .
11982	Block a WP request .
11983	Hide admin nag .
11984	Checks if a point is valid .
11985	Checks if this is a parallelogram .
11986	Get the value of a composite key .
11987	Check if a composite key exists in the container .
11988	Find an application in the repository .
11989	Find all applications .
11990	Checks if two NumberSystem are equal .
11991	Get the digits of a number .
11992	Builds a Number from the given digits .
11993	Validates a number value .
11994	Make a call to the server .
11995	Generate a unique key .
11996	Connect to Redis server .
11997	Returns a string representation of a command .
11998	Get MongoDocument for a domain event message .
11999	Returns a domain event message .
12000	Resets the session .
12001	Normalizes the message queue .
12002	Performs post validation on all entities .
12003	Register a form data event .
12004	Returns an array of form objects .
12005	Remove a string from an array .
12006	Returns an array of entities .
12007	Swaps an entity .
12008	Configures a form to exclude data .
12009	Add a form data handler to the form .
12010	Removes all excluded fields for the given tag from the form .
12011	Adds a response to the collection
12012	Creates a response from a string .
12013	Creates a response object from a file
12014	Makes a new Head version for the given entity .
12015	Check if an entity needs a new version .
12016	Persist an entity to the database .
12017	Clear all versions of an entity .
12018	Cleans up a filesystem path .
12019	Check if a key exists in the mount manager .
12020	Moves a key between two mounts .
12021	Reconnects to a remote FTP server .
12022	Checks if a key is a distant filesystem .
12023	Creates a directory if it doesn t exist .
12024	Find an entity by its primary key .
12025	Creates a new entity .
12026	Save an entity to the database .
12027	Deletes an entity .
12028	Validates an entity .
12029	Executes a SELECT statement .
12030	Creates a QueryBuilder instance .
12031	Sets criteria in a query .
12032	Set an array criterion in a query .
12033	Sets the order by in the query .
12034	Creates a delete record for the given type .
12035	Sets the properties for the save create delete query .
12036	Sets the properties for a save create delete statement .
12037	Returns the entity relations .
12038	Ensure required properties are set .
12039	Sends a Broadcast request .
12040	Executes a set of operations .
12041	Get script src .
12042	Displays a div .
12043	Generates an image element .
12044	Display an audio item .
12045	Verify a client .
12046	Verify a CAPTCHA request .
12047	Returns a script tag .
12048	Returns a script with the given callback .
12049	Checks if a key exists and is not empty .
12050	Checks if the value is a string
12051	Send a VERIFY request .
12052	Initializes the theme .
12053	Finds a view file .
12054	Renders a PHP file stateless .
12055	Registers post types .
12056	Generates a new token .
12057	Generates a new memory token .
12058	Executes the update command .
12059	Callback for message filter .
12060	Logs a notice message .
12061	Log an info message .
12062	Logs a debug message
12063	Logs a raw message .
12064	Profile end .
12065	Logs a message to the log .
12066	Converts a message to a string .
12067	Converts an error to a string .
12068	Colorizes a text with the given colors .
12069	Get Callee data .
12070	Processes the placeholders in the message .
12071	Formats a value .
12072	Finds a Seo model .
12073	Get the table name for the given ActiveRecord .
12074	Deletes all records from the database .
12075	Saves the model to the database
12076	Initialize mysql connection
12077	Add a command to PEAR_Command_Common
12078	Returns a list of all commands .
12079	Returns a list of available shortcuts .
12080	Get help for a given command .
12081	Get help arguments for a command .
12082	Called after a package has been installed .
12083	Compiles a DSN .
12084	Escapes a value .
12085	Add template root .
12086	Gets the number of items in a collection .
12087	Returns a multi - count .
12088	Creates a count query .
12089	Get the entity manager .
12090	Returns the current path .
12091	Load CarteBlanche configuration
12092	Clears an entry .
12093	Get a bundle by name .
12094	Sets a bundle .
12095	Clear a bundle .
12096	Invalidates an entity .
12097	Assert dependency database .
12098	Get the dependencies of a package .
12099	Returns the dependencies of a package .
12100	Installs a package .
12101	Uninstall a package
12102	Rebuild the database .
12103	Creates a dependency lock file .
12104	Unlocks a file .
12105	Returns the dependencies from the database .
12106	Writes the dependencies to the database .
12107	Auto load modules .
12108	Registers a module .
12109	Renders the content of a section .
12110	Render an error .
12111	Set the format foreground .
12112	Sets the background for this format .
12113	Sets the background color to black .
12114	Sets the color to red .
12115	Sets the background color to green .
12116	Sets the color to yellow .
12117	Sets the background color to blue .
12118	Sets the color to magenta .
12119	Sets the color to cyan .
12120	Sets the background color to white .
12121	Resets the color .
12122	Sets the background color .
12123	Removes an option .
12124	Formats a message .
12125	Logs a command .
12126	Returns an array of UploadedFileLeaves from an array of uploaded files
12127	Set the rawState state .
12128	List all postinstall scripts .
12129	Initialize the postinstall scripts .
12130	Set the package info from an array .
12131	Returns the list of files in the package .
12132	Returns an array of available configuration options .
12133	Checks if a package is compatible with the current version .
12134	Check if a package is a subpackage
12135	Get a dependency group by name .
12136	ksplice a key value pair into an array
12137	Add compilers to the container .
12138	Calculate the modulo of two numbers .
12139	Returns a module from an entire part .
12140	Updates the event log .
12141	Writes a message to the target .
12142	Select entity from repository .
12143	Returns the entity alias .
12144	Deletes the entity .
12145	Updates the entity .
12146	Add a from clause to the query .
12147	Set a value for a key .
12148	Add a group by clause to the query
12149	Add a group by .
12150	Sets the order of the query .
12151	Add a sort to the query .
12152	Sets the maximum number of results to return .
12153	Paginate the results .
12154	Fetches a single record from the database .
12155	Fetches a single record .
12156	Fetches all records .
12157	Adds a parameter to the query .
12158	Finds the name of an unused parameter .
12159	Parse call methods .
12160	Call functionality fields .
12161	Checks if the array is an associative array .
12162	Creates a description for the given subject .
12163	Add a timestamp to the current position .
12164	Returns the timestamp as a table
12165	Get the current page load time .
12166	Returns the most time consuming domain .
12167	Renders the header .
12168	Renders the header image .
12169	Renders the body .
12170	Renders the footer .
12171	Returns a group of controllers .
12172	Returns an array of options for the given action ID .
12173	Returns help for the given action .
12174	Gets help for the given action .
12175	Returns the response headers .
12176	Determines if the message is a flash message .
12177	Returns the raw request body
12178	Returns the body params
12179	Returns the host information .
12180	Returns the script url .
12181	Returns the server params
12182	Get Acceptable Content Types
12183	Returns an array of accepted languages
12184	Returns an array of ETags .
12185	Returns the CSRF token .
12186	Generates a random CSRF token .
12187	Get default server params .
12188	Called when a user logs in .
12189	Crops an image .
12190	Make a crop name .
12191	Perform cropping .
12192	Get the size of an image .
12193	Returns all possible permutations for a given file .
12194	Returns the annotations for a given doc string .
12195	Returns the annotation matches for the given doc string .
12196	Sets an annotation .
12197	Sets the annotation arguments .
12198	Returns an array of annotation properties .
12199	Process the annotation properties .
12200	Returns a list of arguments .
12201	Determines the value of a property .
12202	Get an annotation from the annotations map .
12203	Clean a match string .
12204	Returns an array of command handlers and command help .
12205	Handle the command .
12206	Handle a custom command .
12207	Returns the valid provider for the given command .
12208	Add a left join to the query
12209	Adds a right join to the query
12210	Adds a right join to the query .
12211	Compiles this query into SQL .
12212	Fetches all rows as a single column
12213	Sets the object table name .
12214	Sets the object structure .
12215	Sets the object database name .
12216	Set the model name .
12217	Builds the object model .
12218	Builds the fields from the structure .
12219	Register the validation factory .
12220	Loads the service definitions .
12221	Get the id of the target site .
12222	Returns the parent of a record .
12223	Renders an item .
12224	Get all results from the database .
12225	Executes a query and returns one result .
12226	Adds a column to the query .
12227	Returns the number of records in the database .
12228	Check if a database exists .
12229	Make a call to a namespace prophecy .
12230	Find calls by function name and arguments wildcard .
12231	Sets up the PEAR registry .
12232	Creates the state directory .
12233	Asserts the channel state directory .
12234	Creates the channels directory .
12235	Returns the channel file name .
12236	Get the channel name from the alias .
12237	Get the alias for a channel .
12238	Locks the registry .
12239	Checks if a channel exists .
12240	Check if a mirror exists on a channel .
12241	Check if the channel is an alias .
12242	Get information about a channel
12243	Update a channel .
12244	Returns true if the given data matches the property .
12245	Generates a tiny MCE file .
12246	Initializes a new Str object with the given value .
12247	Returns the entity manager .
12248	Resolve a class name .
12249	Validates a hash to attribute .
12250	Validate that a route exists .
12251	Copies the source directory to the target directory .
12252	Initializes the css class
12253	Returns the next day .
12254	Get the previous day .
12255	Create a date range .
12256	Get a file from a path .
12257	Returns the path to a directory .
12258	Opens a file .
12259	Creates a new file .
12260	Put contents into a file .
12261	Get the contents of a file .
12262	Change the mode of a file .
12263	Locks a file .
12264	Called when a file is locked .
12265	Ensure that the given path or object is a file .
12266	Ensure the path or object is a directory .
12267	Checks if the lock timer should be unlocked .
12268	Get the globals .
12269	Renders section .
12270	Add a ON clause to the query .
12271	Adds a where clause to the query .
12272	Add a where null condition to the query .
12273	Casts an array to a collection .
12274	It could be normal .
12275	Get a single row from the database .
12276	Updates an existing row .
12277	Runs down a migration .
12278	Performs a fresh migration .
12279	Returns the migration history for the given application .
12280	Gets a list of new migrations .
12281	Creates a migration .
12282	Migrate down a class .
12283	Migrate the application to the given time .
12284	Migrate the application to the given version .
12285	Loads the database adapter
12286	Connect to the database .
12287	Add a cached query .
12288	Get cached results for a query .
12289	Executes an array query .
12290	Adds a table to the database
12291	Add fields to a table
12292	Get information about a table .
12293	Check if a table exists
12294	Build an array of fields from a table structure
12295	Escapes a string .
12296	Clears all properties .
12297	Add a WHERE clause .
12298	Adds a where clause to the query .
12299	Adds a where in clause to the query
12300	Adds a OR WHERE condition .
12301	Adds an AND WHERE clause to the query .
12302	Sets the order by .
12303	Get the query string .
12304	Returns the results of the current query .
12305	Returns a single result .
12306	Returns an array of all available UI extensions
12307	Returns a ModelOperator instance
12308	Set the storage path .
12309	Load structure files
12310	Returns the structure of a model .
12311	Save model structure .
12312	Dump data .
12313	Load data .
12314	Find all transactions for an account .
12315	Set the query state .
12316	Get the length of the backlog .
12317	Process the command queue .
12318	Execute a query and return an observable object .
12319	Set the connection status .
12320	Handle a message .
12321	Processes the given data .
12322	Cancels the request .
12323	Redirects the user to the given provider .
12324	Callback function .
12325	Unlink a social provider .
12326	Update Facebook and Twitter client s settings .
12327	Check provider .
12328	Set the service provider config .
12329	Register a social service provider .
12330	Cleanup timer callback .
12331	Pack a record with data .
12332	Unpack a record .
12333	Creates a cleanup timer .
12334	Check if the menu has a submenu
12335	Set accountId .
12336	Set userId .
12337	Returns the account associated with this join .
12338	Returns the user associated with this join .
12339	Returns the next exception .
12340	Remove all tags from a string .
12341	Initializes the config .
12342	Returns an array of valid roles for a given release
12343	Get the base install roles .
12344	Shortens the string .
12345	Set the block size .
12346	Returns a value from the collection .
12347	Generates the names of the templates and extensions .
12348	Merges a set of data into this object .
12349	Read config data .
12350	Reads configuration data from a file
12351	Normalize config path .
12352	Applies the given domain event message to the aggregate .
12353	Record the domain event message .
12354	Set a related model .
12355	Attaches the presenter to the controller .
12356	Redraws nothing .
12357	Goes to a destination .
12358	Initializes Twig plugins .
12359	Sets a list of variables .
12360	Fetch the template from a string .
12361	Load plugins from a directory .
12362	Creates a BusinessHours instance from an associative array .
12363	Shift a BusinessHours object to a new timezone .
12364	Flattens the days intervals .
12365	Validates a warning .
12366	Get the contents of a file .
12367	Parse the imports .
12368	Parse a YAML file .
12369	Set YAML parameters .
12370	Calculates the request length .
12371	Executes a command .
12372	Serializes a value to XML
12373	Unpublishes other versions of an entity .
12374	Sets the class name .
12375	Set the ID column .
12376	Set the name column .
12377	Sets the data column .
12378	Sets the value of the lifetime column .
12379	Sets the modified column .
12380	Sets the created column .
12381	Get the list of providers .
12382	Get all available providers .
12383	Bootstrap the application .
12384	Registers the Conneg service
12385	Sets the request format .
12386	Validates the request content type .
12387	Executes a function .
12388	Discover a channel .
12389	Returns a dependency2 object .
12390	Returns the download directory .
12391	Detects a dependency cycle .
12392	Setup a graph .
12393	Get the url argument .
12394	Outputs a single line .
12395	Get the command line arguments .
12396	Register the NoCaptcha class .
12397	Register the validator rules .
12398	Register form macros .
12399	Creates a PEAR object from an XML file
12400	Creates a PEAR object from any XML file .
12401	Convert the channel to XML .
12402	Push an error to the stack .
12403	Returns the base URL of a resource .
12404	Reset all functions of a given type .
12405	Set Default PEAR Protocols
12406	Returns the server mirror for the given server .
12407	Sets the validation package for the given class and version
12408	Adds a function to the channel
12409	Adds a new error function to a channel .
12410	Returns the validation package .
12411	Get the PEAR_Validate object for the channel .
12412	Check if a property can be retrieved .
12413	Check if a property can be set
12414	Get the contents of the cache file .
12415	Loads the cache parameters .
12416	Adds an entry to the cache .
12417	Returns a value from the cache .
12418	Gets an entry by identifier .
12419	Check if an entry exists .
12420	Unsets an entry at the given offset .
12421	Applies conditions for current site .
12422	Assigns a value to an array of keys .
12423	Returns an array of error messages .
12424	Get the model s config file
12425	Gets the definition of the models .
12426	Save model definition to file .
12427	Get the params metadata .
12428	Sets the name of the model .
12429	Sets the current color .
12430	Set parser .
12431	Returns a StyleAggregate for the given collection .
12432	Creates a cURL request .
12433	Image proxy .
12434	Creates a validator for a model .
12435	Validates a model attribute .
12436	Validates a value .
12437	Initialize route and controller .
12438	Shutdown the application .
12439	Generate a URL for a controller action and param .
12440	Returns the canonical URL for the current route .
12441	Normalize the route path .
12442	Returns true if all tests have failed .
12443	Returns all view names for a given schema .
12444	Get a value from the cache .
12445	Set a value to a key .
12446	Set multiple values .
12447	Retrieve a value from the cache and delete it .
12448	Add a value to a key .
12449	Get a value from the cache and store it in the cache .
12450	Deletes a record by key .
12451	Filter a string
12452	Configure the default options .
12453	Gets an option or a config value .
12454	Gets an option with type cast .
12455	Load config from file .
12456	Loads the static config .
12457	Renders the config .
12458	Renders a value .
12459	Normalize config array path .
12460	Sets the package version 2_1
12461	Clears the contents of the package
12462	Clears all dependencies .
12463	Sets the package type
12464	Returns the current release .
12465	Adds an install tag to the current release
12466	Add an ignore tag to the tag .
12467	Adds a binary package to the filelist
12468	Adds a configuration option .
12469	Set PHP install condition
12470	Sets an OS install condition
12471	Sets an install condition for the current release .
12472	Generate a changelog entry .
12473	Check if the file is a video .
12474	Get video infos
12475	Sets the update date .
12476	Set the amount .
12477	Sets the field type .
12478	Set the comment .
12479	Sets category id
12480	Set the accountIdVirtual value
12481	Creates a TimeBuilder from a string .
12482	Creates an instance from an array .
12483	Creates a sqlite database instance .
12484	Creates a mysql database instance .
12485	Executes a query and returns the result .
12486	Returns an array of table names .
12487	Executes a SQL query and returns a single row .
12488	Returns the first column of the first row of the first row of the result set .
12489	Check if a table exists
12490	Checks if a column exists in a table
12491	Returns the primary keys of a table .
12492	Returns the column names of a table .
12493	Logs a query .
12494	Add a service aware entity listener to the bootstrap event
12495	Run the application .
12496	Sets the public keys .
12497	Set a private key .
12498	Sets the envelope key .
12499	Sets the compression .
12500	Get a formatted version of a DateTime object .
12501	Supprime un utilisateur
12502	Executes a function .
12503	Creates the migration history table .
12504	Adds a filter .
12505	Loads a class using Zend_Loader .
12506	Adds inverse relations to the result .
12507	Populates a relation .
12508	Populate a single relation asynchronously .
12509	Populate relation with multiple models asynchronously .
12510	Returns list of invalid properties
12511	Processes an array .
12512	Creates a new instance of a class .
12513	Checks if two strings are equal .
12514	Checks if the string ends with another string .
12515	Returns true if the string contains the given text .
12516	Returns a substring of the string .
12517	Replaces the given string with the given string .
12518	Replaces the text with the given regex .
12519	Emit before save event .
12520	Emit before delete event .
12521	Refreshes the primary key .
12522	Update all rows in a table .
12523	Deletes all records from the database .
12524	Performs an INSERT on the model .
12525	Inserts a new record into the database table .
12526	Deletes the object from the database .
12527	Returns the methods of the class .
12528	Get method identifier .
12529	Callback for custom data .
12530	Returns a list of commands .
12531	Get help for a command .
12532	Create a controller .
12533	Handle an exception .
12534	Handle a fatal error
12535	Logs an exception .
12536	Returns the exception trace .
12537	Reduces the stack trace .
12538	Proxy method with app property .
12539	Proxy method with app .
12540	Injects a variable to the arguments .
12541	Ensure that the string is translated .
12542	Create a new Github repository .
12543	Startup a notification module .
12544	Generate a random key .
12545	Returns an array of properties for the data store .
12546	Register a custom error class .
12547	Displays a user assignment .
12548	Request for a list of countries
12549	Encodes a string to HTML entities .
12550	Returns the default reason phrase .
12551	Get a specific HTTP header .
12552	Returns the response body .
12553	Decode and deflate data .
12554	Returns true if the entity exists .
12555	Clears the table .
12556	Checks if we re exiting and resizing .
12557	Returns an array of HTTP headers .
12558	Get the header name .
12559	Writes an array of messages to the console .
12560	Writes a message to the output stream
12561	Set the type of the constant .
12562	Find a resource in a list of paths .
12563	Get a list of possible files for an extension .
12564	Starts the session .
12565	Get an item from the collection .
12566	Sets a value for a given ID .
12567	Removes an item from the collection .
12568	Creates a CSRF token with the given id .
12569	Validates a CSRF token .
12570	Converts a name to human readable .
12571	Deletes a file or directory .
12572	Moves the file to another location .
12573	Cleans the filename .
12574	Dispatch an event .
12575	Handles deprecation messages .
12576	Handles fatal errors .
12577	Saves the item .
12578	Returns a string representation of the response .
12579	Converts an XML string to an XML string .
12580	Converts a string to an array .
12581	Load a config file .
12582	Set a config array .
12583	Get a configuration value from the registry .
12584	Builds the config stack .
12585	Parse a config .
12586	Parse a config value recursively
12587	Compile a join constraint .
12588	Add a where null clause to the query .
12589	Compile an INSERT query .
12590	Compile an update query into SQL .
12591	Compiles a delete query into SQL .
12592	Wrap a value in a string .
12593	Set the list of arguments to pass to the function .
12594	Bind to a promise .
12595	Binds a prediction .
12596	Check if a prediction should have a callback .
12597	Create a new Gallery instance .
12598	Establishes a connection to a user .
12599	Creates a new query .
12600	Defines the table to insert .
12601	Scans a GenericResource for a given content .
12602	Returns a flattened version of this Option .
12603	Filter the value using a predicate .
12604	Execute callback stack
12605	Execute a callback function as a reference .
12606	Parse a callback function name .
12607	Get Image Constraints
12608	Calculates the minimum value of an option .
12609	Returns the controller .
12610	Returns the action .
12611	Resolve the callable .
12612	Process the dispatched data .
12613	Processes the given response .
12614	Get a RouterException for the given error code .
12615	Get terminal sizes .
12616	Returns the operating system .
12617	Returns a translatable string .
12618	Locates a file .
12619	Returns the value as a text .
12620	Returns the value as an email address .
12621	Formats the value as a decimal value .
12622	Formats a value as a short size .
12623	Creates a new model . If creation is successful the browser will be redirected to the index page .
12624	Updates an existing item . If update is successful the browser will be redirected to the view page .
12625	Checks if the class exists .
12626	Fetches an object from the database .
12627	Fetch a single column from the query .
12628	Exclude trashed items .
12629	Scope a query to only include deleted items .
12630	Run a console request .
12631	Get an unset value from an array .
12632	Returns a header by name .
12633	Returns a new instance without the specified header .
12634	Returns a new instance with the given message body .
12635	Returns the icon for the payment .
12636	Returns an array of all available types
12637	Bind a generator callback to a template .
12638	Renders an exception .
12639	Formats a response message .
12640	Get the response data for the HTTP header .
12641	Converts an array to a header string .
12642	Combine an array of settings into a single section .
12643	Walks down a string .
12644	Explode a string into an array .
12645	Reports an error to the webmaster
12646	Router error 403 .
12647	Extracts route parameters from a path .
12648	Returns the controller instance .
12649	Returns the grid view buttons .
12650	Returns the HTML for the given options .
12651	Evaluates an expression .
12652	Get a zone
12653	Add a new record to the database .
12654	Get a table instance .
12655	Get the transaction instance .
12656	Loads default metadata from adapter .
12657	Sets the parent id
12658	Returns the budget category .
12659	Returns all category words .
12660	Flushes the cache .
12661	Add a key to the end of the collection .
12662	Remove an item from the collection by key .
12663	Remove cache datas .
12664	Get a boolean value .
12665	Create an instance of  Zend  Mvc  Controller  Params
12666	Extracts parameters from a collection .
12667	Triggered when console command is loaded .
12668	Push a route group onto the list of route groups .
12669	Returns all annotations for a given class and type .
12670	Sets the service properties of an annotation .
12671	Creates a service from an annotation .
12672	Get service context from annotation .
12673	Returns the cache object .
12674	Returns the query builder .
12675	Creates a component for the given interface .
12676	Returns the token for a stated class name .
12677	Gets the token for a declared class instance .
12678	Returns an array of packages for a given category .
12679	Check if a state is better than another state .
12680	Compiles the shell command .
12681	Generates the command line arguments .
12682	Executes a process .
12683	Save the layers to the filesystem .
12684	Replaces all fields in the stream .
12685	Add route to collection .
12686	Add a route for GET and HEAD requests
12687	Add a POST route .
12688	Adds a route for PUT request .
12689	Adds a route for PATCH request .
12690	Add a DELETE route .
12691	Add a HEAD route .
12692	Returns a named route .
12693	Generate route url .
12694	Get a route from a request .
12695	Matches a route .
12696	Checks if the given URI is an internal URI .
12697	Dispatch a route .
12698	Setup the route collection .
12699	Set the dynamic route .
12700	Validate the route url .
12701	Matches static route .
12702	Matches a route against a dynamic route .
12703	Returns a matched static route .
12704	Gets the dynamic route that matches the given path and method .
12705	Get the request middleware for the given route .
12706	Route the response middleware .
12707	Get a response from a dispatch .
12708	Setup from cache .
12709	Setup annotated routes .
12710	Renders the modal header
12711	Renders the toggle button .
12712	Gets the gettext file for a message .
12713	Get the result of a query as a Paginator
12714	Add filters to the query builder .
12715	Filter the query by a search parameter .
12716	Add search filter to query builder .
12717	Add the orderBy clause to the query builder .
12718	Adds the offset to the query builder
12719	Add limit to query builder .
12720	Find entity by id
12721	Adds a property to the join map .
12722	Get column for sorting data tables .
12723	Adds the order by clause to the query .
12724	Validates a number against a constraint .
12725	Replaces XML entities with XML entities
12726	Converts XML entities to XML entities
12727	Returns an XML declaration .
12728	Returns DOCTYPE declaration .
12729	Convert an array of attributes to a string
12730	Collapse empty tags .
12731	Creates an XML Tag .
12732	Creates a start element .
12733	Splits a qualified name into its namespace and local part
12734	Checks if the given string is a valid name
12735	Dispatch an ICallable object
12736	Add tags to the response .
12737	Invalidates the given tags .
12738	Validate the entity .
12739	Interpolate a message with the given context .
12740	Checks if two points share the same space .
12741	Checks if two points are the same .
12742	Get the intersection of two lines .
12743	Checks if two lines are perpendicular .
12744	Checks if two lines are parallels .
12745	Get direction by points .
12746	Get direction by coordinates .
12747	Get all results .
12748	Prepare the asynchronous via .
12749	Remove duplicated models .
12750	Executes a query and returns the first row .
12751	Checks if a string is valid
12752	Asserts that the given header value is valid .
12753	Executes the request and returns the result .
12754	Builds the request URI .
12755	Sets the language to use .
12756	Sets the media type .
12757	Sets the result format .
12758	Sets the maximum number of results to return .
12759	Sets the entity .
12760	Sets the media type attribute .
12761	Sets the callback .
12762	Set the explicit option .
12763	Returns an array of photos for the given gallery .
12764	Logs a message to the frontend
12765	Creates a temporary directory .
12766	Get information from a tgz file .
12767	Get the package info from a description file .
12768	Creates a PackageFile from an XML string .
12769	Creates a PEAR_PackageFile object from an info string .
12770	Returns a JSON - encodable object with the current URL s offers .
12771	Returns a list of all available offers .
12772	Searches for a record in the database .
12773	Set log file handler .
12774	Set the mail handler .
12775	Get all logs .
12776	Make a log row .
12777	Shutdown debugging .
12778	Handles a request .
12779	Distribute the request .
12780	Initializes the bundle .
12781	Adds a boot error .
12782	Initializes a constant path .
12783	Adds a path to the application directory .
12784	Returns the path to a stack entry .
12785	Get absolute path .
12786	Returns the current user who i am .
12787	Sets cart mode .
12788	Loads default application configuration .
12789	Initializes the application .
12790	Loads a bundle .
12791	Get the AssetConverter object
12792	Computes the hash of a file .
12793	Adds multiple reply - tos .
12794	Create a new user .
12795	Resume a session for a user .
12796	Calculates a number using the given expression .
12797	URL for user details .
12798	Executes a raw SQL query and returns the number of affected rows .
12799	Returns csrf meta tags .
12800	Creates a label tag .
12801	Creates a button tag .
12802	Creates a submit button .
12803	Creates a submit form input tag .
12804	Creates a reset input tag .
12805	Creates a hidden input field .
12806	Create a password input field .
12807	Process boolean input options
12808	Sets the time in hours .
12809	Sets the number of minutes .
12810	Sets the number of seconds .
12811	Checks if time elements are valid .
12812	Writes a file to the filesystem .
12813	Write a stream to the filesystem .
12814	Update the contents of a file .
12815	Updates a stream .
12816	Puts a file to the filesystem .
12817	Puts a stream to the flysystem .
12818	Renames a file .
12819	Copy a file to a new location .
12820	Returns the metadata for the given path .
12821	Returns the mimetype of the file .
12822	Returns the size of the file .
12823	Returns the timestamp of the file .
12824	Returns the visibility of the given path .
12825	Sets the visibility of a path .
12826	Sets the path s visibility to public .
12827	Set the path s visibility to private .
12828	Returns the contents of a directory .
12829	Get the local adapter .
12830	Get the S3 adapter .
12831	Processes the request .
12832	Deserializes a request .
12833	Checks if the user has access to the object .
12834	Parse a block .
12835	Get or set the path .
12836	Get the authentication object .
12837	Get data from url
12838	Parse JSON data .
12839	Get all data from url .
12840	Get the entity alias .
12841	Creates a new query builder instance .
12842	Creates a new result set mapping builder instance .
12843	Find all identifiers .
12844	Returns the min value of a column .
12845	Paginate the results .
12846	Returns true if the given entity is a transient .
12847	Returns the identifier for the given entity .
12848	Validates an entity .
12849	Converts an entity to an array .
12850	Filters an array of uploaded files .
12851	Returns the file size limit .
12852	Check if a key exists in the bag .
12853	Handle console commands .
12854	Terminate the console kernel .
12855	Renders the account categories .
12856	Runs the controller .
12857	Initializes the time zone .
12858	Executes a function .
12859	Returns an array representation of the field .
12860	Initializes the instance .
12861	Returns a list of all children .
12862	Detects if a child is a loop .
12863	Invalidate the cache .
12864	Get the last batch number .
12865	Returns a  Html Response
12866	Create a JSON response .
12867	Creates a template response .
12868	Executes the others command .
12869	Returns the Zend_Filter_CompressInterface instance
12870	Set the Zend_Filter_Compress_Interface adapter
12871	Sets the prefix .
12872	Get a value from the server accessor .
12873	Returns a list of all views .
12874	Installs the database .
12875	Returns an array of system errors .
12876	Get the serializer instance .
12877	Increment the version of a file .
12878	Get the body of the message .
12879	Get the body as an array .
12880	Get the body as an object .
12881	Get results from a query .
12882	Set defaults .
12883	Sets the response body .
12884	Returns the response as an array .
12885	Get the unique validation rule for a field .
12886	Create a new download from S3 .
12887	Get the adapter for a given ado connection
12888	Get ADOConnection id
12889	Logs an error .
12890	Wraps a curl error into an exception .
12891	Callback for reading the request body .
12892	Write a header to the request .
12893	Writes the response body .
12894	Add a command collection .
12895	Prints a time .
12896	Prints the console help .
12897	Prints help text for a class .
12898	Prints a line of code .
12899	Async upload .
12900	Removes all html tags .
12901	Before save callback .
12902	After find event handler .
12903	Decode a JSON attribute .
12904	Creates a new Bank instance .
12905	Set the locale .
12906	Get a localized question .
12907	Establishes a tunnel
12908	Check if the request can keep alive .
12909	Disconnect from the server .
12910	Handle a redirect
12911	Check if we should use server digest authentication .
12912	Check if we should use proxy digest authentication .
12913	Writes the request body .
12914	Read a chunked response from the socket
12915	Builds a SELECT statement .
12916	Build a WHERE clause
12917	Build a SQL JOIN .
12918	Builds a GROUP BY clause .
12919	Prepares the dependency handler .
12920	Merge a result array into a result array
12921	Cleans a string .
12922	Checks that at least one call has been made that match the given prophecy .
12923	Decode YAML .
12924	Start a new session .
12925	Executes a query and returns the result .
12926	Inserts data into a table .
12927	Executes an UPDATE query .
12928	Updates an existing record in the database .
12929	Executes a SELECT statement .
12930	Executes a select query and returns all rows .
12931	Returns an array of ids from a query .
12932	Executes a query and returns a single row .
12933	Returns a single value from the current row .
12934	Prepares a query for execution
12935	Execute a prepared statement
12936	Executes a SELECT statement
12937	Log a response .
12938	Parse a value .
12939	Filter a value according to the match pattern .
12940	Dispatch the router .
12941	Terminate the route middleware .
12942	Start parser handler
12943	End parser handler
12944	Run a command and return the result .
12945	Process the webhook .
12946	Modify the uploadable behavior .
12947	Creates a request from JSON .
12948	Open a session .
12949	Reads session data .
12950	Destroy a session
12951	Writes data to the session .
12952	Runs a widget .
12953	Returns the id of the item .
12954	Emits beforeRun event .
12955	Check application persistence .
12956	Creates a WHERE statement .
12957	Remove a record from the database .
12958	Get all rows from a table
12959	Save the record to the database .
12960	Returns a list item .
12961	Ajax list .
12962	Verify user account .
12963	Loads the nav bar
12964	Check the budget for a given month .
12965	Setup the installer .
12966	Execute the method .
12967	Get the user s first name .
12968	Save the user .
12969	Changes the user s password .
12970	Adds context bindings .
12971	Returns a writer instance .
12972	Parse the version string .
12973	Compares the current version against the given version .
12974	Get branch for given parent id .
12975	Returns the parent of this record .
12976	Returns the parents of this record .
12977	Converts a Container to an array .
12978	Applies a modifier to the object .
12979	Creates a CssResource from a CSS URL .
12980	Get the address book .
12981	Show a list of compose messages .
12982	View a message .
12983	Handle the POST request to manage messages .
12984	Appends the given extensions to the given paths .
12985	Destroys the current session
12986	Adds a method to the autoload map
12987	Remove a method from the autoload map
12988	Removes an aggregate object .
12989	Performs a GETOP 2 command .
12990	Performs a GET command .
12991	Parse a short option .
12992	Parse a command line argument .
12993	Converts a directory to a struct
12994	Converts multiple files to a struct .
12995	rm - rf - rf
12996	Create a new directory .
12997	Creates a temporary directory .
12998	Removes the system s temporary files
12999	Find a pattern in a directory .
13000	Returns a Log instance .
13001	Set budget id
13002	Returns the current budget .
13003	Get all transactions .
13004	Converts a value to a string .
13005	Sets the URL .
13006	Sets the request method .
13007	Sets the auth attribute .
13008	Adds a cookie to the request
13009	Set the request body .
13010	Get the response body .
13011	Adds an upload to the form .
13012	Attaches an observer .
13013	Detach an observer .
13014	Sets the last event .
13015	Set HTTP_Request2_Adapter
13016	Sets the cookie jar
13017	Sends the request
13018	Detect the mime type of a file .
13019	Displays a single setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new setting entity .
13022	Edits an existing Setting entity .
13023	Adds a WHERE clause to the query .
13024	Returns a new instance with the specified HTTP status code .
13025	Removes a row from the table
13026	Returns true if the given event has any listeners .
13027	Get a field value .
13028	Prints a message .
13029	Creates an access denied HTTP exception .
13030	Sets a flash message .
13031	Commits a transaction
13032	Formats a date .
13033	Formats a time string .
13034	Format a boolean value
13035	Sets the current time zone
13036	Returns a service instance .
13037	Checks if a service exists .
13038	Creates a new class instance .
13039	Adds a resolver to the list .
13040	Adds a service to the container
13041	Get the pool instance .
13042	Execute a query on the connection with the least busy connection .
13043	Executes an observable statement .
13044	Create a new PgConnection .
13045	Get the least busy connection old .
13046	Install assets .
13047	Returns the ReflectionClass for the given class name .
13048	Returns the version of a class .
13049	Find class name by version .
13050	Returns the class migration methods for the given class name .
13051	Returns the required options for a class .
13052	Displays a Job entity .
13053	Display a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing Job entity .
13056	Set client file name
13057	Guess the extension of the image .
13058	Returns the MIME type of the file .
13059	Get the human readable size of the file .
13060	Get a time as a datetime
13061	Returns the current CTime as a datetime .
13062	Returns the current MTime as a datetime .
13063	Creates a File object from a file content .
13064	Returns an array of all applications
13065	Find an application by id .
13066	Create a new YAML file .
13067	Deletes a row from the database .
13068	Updates the application .
13069	Returns the closest time interval before a given date .
13070	Returns the closest time interval after a given date .
13071	Builds a DateTimeInterval from a DateTime object .
13072	Returns the day before the given day number .
13073	Returns the day after the given day number .
13074	Get information about a role
13075	Commits the current transaction .
13076	Rolls back a transaction
13077	Sets the transaction isolation level .
13078	Get the database connection .
13079	Set the backend to use .
13080	Logs a debug message .
13081	Logs an info message .
13082	Logs a notice message .
13083	Logs a warning message .
13084	Logs an error message .
13085	Log a critical message .
13086	Logs an alert message .
13087	Logs an emergency message .
13088	Logs a message to the given log level .
13089	Get the value of a property of an object .
13090	Truncates an HTML string .
13091	Sets the frontend object to PEAR_Common .
13092	Deletes package files .
13093	Adds a new file operation .
13094	Downloads and installs a set of packages .
13095	Sets the list of downloaded packages .
13096	Checks if a point is valid .
13097	Creates an iterating exception .
13098	Register the service components .
13099	Adds an array of attributes .
13100	Change the classes .
13101	Parse the classes .
13102	Get the JSON column schema builder .
13103	Bind an object to the container if it does not already exist .
13104	Bind an abstract with a shared closure .
13105	Register a rebinding callback .
13106	Check if an abstract is shared .
13107	Get the closure .
13108	Add dependencies for a call parameter .
13109	Returns the contextual concrete for the given abstract .
13110	Requests the middleware for the given request .
13111	Adds middleware to the response .
13112	Terminate middleware .
13113	Returns a list of SOAP controllers .
13114	Renders a WSDL .
13115	Initialize the minify options .
13116	Converts a string to a timestamp .
13117	Converts a timestamp to an array .
13118	Converts a string from one format to another .
13119	Returns the time left of a timestamp
13120	Returns the properties of this object .
13121	Checks if the given prophecy matches the timestamp .
13122	Parse a parameter .
13123	Sets a parameter .
13124	Filter a string .
13125	Output a breakpoint message .
13126	Execute a download command on all channels .
13127	Adds a mock object to a class .
13128	Creates a new instance of a class
13129	Updates the user s profile .
13130	Check if a namespace exists .
13131	Returns a string representation of a variable .
13132	Make a response .
13133	Render a template and return the response .
13134	Returns a json response .
13135	Create a jsonp response .
13136	Creates a redirect response .
13137	Create a redirect route .
13138	Validate an email address .
13139	Returns the difference in years .
13140	Get the difference in weekdays .
13141	Returns the difference in seconds between two dates .
13142	Get the difference for humans .
13143	Returns an array of command annotations for the given classes .
13144	Set the properties of a command .
13145	Creates a console command from an annotation .
13146	Returns the storage path .
13147	Finds a model by id .
13148	Returns a parameter .
13149	Makes a HTTP request to the specified URI .
13150	Returns a GET request .
13151	Send a POST request to the given URI .
13152	Creates a head request .
13153	Send a PUT request to the given URI .
13154	Sends a HTTP PATCH request to the given URI .
13155	Creates a DELETE request .
13156	Parse host desensitization .
13157	Add a new checkpoint .
13158	Merge this object with the given data .
13159	Reads a file .
13160	Get a package by name .
13161	Initializes the config_static . php file .
13162	Clears the SilverStripe init code
13163	Returns the init code .
13164	Evaluate a PHP code .
13165	Initialize the template paths .
13166	Add a template path .
13167	Wraps an object with a viewable wrapper .
13168	Returns the schema names .
13169	Returns all table names for a given schema .
13170	Refreshes a table s metadata .
13171	Get the metadata for a table .
13172	Gets a table metadata as a raw array .
13173	Set a table metadata .
13174	Get the cache key for the given name .
13175	Get an option by name .
13176	Get tmp dir
13177	Initializes the application .
13178	Creates a new role .
13179	Assigns a role to a child .
13180	Register a function prophecy .
13181	Call a mock .
13182	Get a parameter by key .
13183	Resolves a string .
13184	Converts a query string to a meta string .
13185	Execute a query on Twitter .
13186	Renders panes .
13187	Register a new user .
13188	Sets the cipher vector .
13189	Opens the mcrypt cipher
13190	Initializes a cipher
13191	Connects to the API with the given credentials .
13192	Verify token credentials .
13193	Fetches the user data from the given URL .
13194	Get a new auth extension .
13195	Adds the tokens to the object .
13196	Returns the authentication protocol for the given credentials
13197	Check if the given credentialsKeys are Oauth1 .
13198	Check if the given credentialsKeys are Oauth2 .
13199	Closes the stream .
13200	Attaches a stream .
13201	Returns the contents of the stream .
13202	Set the stream resource .
13203	Writes data to a file .
13204	Get the account virtual .
13205	Get the previous account .
13206	Updates a virtual account .
13207	Set query cache duration .
13208	Sets the connection .
13209	Fetches a single result row .
13210	Performs an INSERT and RETURN SQL statement .
13211	Executes the query and returns the result .
13212	Log a query to the database .
13213	Query a scalar value .
13214	Executes an internal SQL query .
13215	Check if a query matches the given pattern .
13216	Executes a SQL statement .
13217	Invoke a closure .
13218	Check if the given layer is supported .
13219	Prepare DOM elements
13220	Redirects the user to the correct controller and action
13221	Renders an error .
13222	Render debug infos
13223	Displays a view .
13224	Initializes the bot .
13225	Add the response to the plugin .
13226	Register a short code .
13227	Removes a short code .
13228	Parse a short code tag .
13229	Parse short code attributes
13230	Returns the download URL for a package .
13231	Returns a list of packages for a given category .
13232	Sort releases by version number .
13233	Retorna un array con id et sens
13234	Get all hours .
13235	Parse a page into a DOM document
13236	Find all money account by user id .
13237	Output the application message .
13238	Outputs the usage message .
13239	Returns the usage path .
13240	Displays a section with the given arguments .
13241	Generate the options section .
13242	Get option name .
13243	Generates a malus roll based on a roll summary .
13244	Sets the columns to be selected .
13245	Adds a having predicate to the select .
13246	Adds a where condition to the query .
13247	Adds a JOIN clause to the query .
13248	Add a LEFT JOIN clause
13249	Adds a RIGHT JOIN clause .
13250	Returns the SQL string for the query .
13251	Executes the query and returns a ResultSet
13252	Prefix table join condition .
13253	Get a value from the collection .
13254	Set a value for a key .
13255	Remove an item from the collection .
13256	Creates an INSERT statement .
13257	Sets the PEAR error stack .
13258	Get a singleton instance of a package .
13259	Handle an error .
13260	Set error message callback
13261	Sets the default error callback .
13262	Removes an error from the error list .
13263	Pop a package from the stack .
13264	Check if there are errors .
13265	Returns a list of errors .
13266	Checks if a package has errors .
13267	Returns an array of errors .
13268	Returns the error message .
13269	Registers a configuration array .
13270	Registers a provider .
13271	Registers an array of autowired classes .
13272	Returns an array of autowired parameters .
13273	Sets the target directory .
13274	Sets the mode
13275	Returns an array of routes for the given classes .
13276	Sets the route properties .
13277	Returns an array of routes for the given classes .
13278	Returns a route built by a controller .
13279	Create a RouterRoute from an annotation .
13280	Publish route annotations .
13281	Format the response as JSON .
13282	Format the JSONP response .
13283	Returns the port of the host .
13284	Returns the scheme host port .
13285	Returns a copy of this Uri with the specified host .
13286	Returns a copy of this Uri with the port changed .
13287	Returns a copy of this Uri with the specified path .
13288	Returns a copy of this Uri with the specified query string .
13289	Returns a copy of this Uri with the specified fragment .
13290	Check if the current port is a standard port .
13291	Validate scheme .
13292	Validate TCP or UDP port .
13293	Validate a package
13294	Validates a dependency
13295	Normalize a dependency type .
13296	Adds or removes s to a word
13297	Tokenizes a string .
13298	Join the keys and values of an array .
13299	Checks if a table exists in the database
13300	Map a class name to a table name .
13301	Get a table instance from a class name .
13302	Processes the version tag in the file comment
13303	Performs a Discover command .
13304	Performs the login .
13305	Execute a logout command on the server .
13306	Converts a string containing a separator to a Zend_Filter_Filter_Filter object .
13307	Returns an array of migration files
13308	Get the migration to file map .
13309	Publishes a method
13310	Sends the request to the given url .
13311	Checks if the url is valid
13312	Transforms a value to a directory .
13313	Create a new app builder instance .
13314	Creates a new application builder from a persister .
13315	Get the dependencies of the application builder .
13316	Resets a file to its original state .
13317	Create a new branch .
13318	Delete a branch .
13319	Push a branch to Github .
13320	Create a pull request .
13321	Clone a project .
13322	phpize callback .
13323	Run a command .
13324	Connects to the API with the given credentials .
13325	Adds a file to the filter
13326	Get a new name for a file .
13327	Returns the name of a file .
13328	Get a service by id
13329	Generate a service from a definition .
13330	Set a service .
13331	Set alias .
13332	Get a parameter by id .
13333	Sets a parameter .
13334	Returns a service definition .
13335	Set a service definition .
13336	Initializes drush .
13337	Initialize from a user event .
13338	Converts a table to an array
13339	Check if the string is serialized .
13340	Checks if a prophecy is fulfilled .
13341	Add a new route .
13342	Initialize the controller routes .
13343	Creates an instance of a controller .
13344	Registers a controller .
13345	Register a controller with annotations .
13346	Register a controller without annotations .
13347	Get the default controller and action .
13348	Register an observer .
13349	Unregisters an observer .
13350	Auto set channel .
13351	Execute a command .
13352	Adds a flash message .
13353	Redirect to the referer .
13354	Configure shared cache .
13355	Initializes the bot .
13356	Finalize the middleware stack .
13357	Returns the configuration directory .
13358	Checks that a prophecy matches a set of calls .
13359	Returns an instance of the Persist Connection class .
13360	Configures the Stfalcon Tinymce bundle .
13361	Sets the editor capabilities .
13362	Creates a new Environment instance .
13363	Create a Locator from a path .
13364	Returns a list of options .
13365	Checks if a constant is valid
13366	Check if a value is a SKIP value .
13367	Checks if the given value is of the given type .
13368	Returns a PDO adapter instance .
13369	Creates the controller path .
13370	Creates the cache path .
13371	Updates the WSDL .
13372	Compiles the service url .
13373	Returns the documentation for the controller .
13374	Returns a list of registered soap controllers .
13375	Build Bootstrap CSS and Twig JS .
13376	Build Bootstrap CSS .
13377	Get a parameter by key .
13378	Creates a new instance from the given base .
13379	Adds a route .
13380	Get a static route .
13381	Check if a static route is set .
13382	Get a dynamic route .
13383	Checks if a dynamic route is set .
13384	Get a named route .
13385	Creates the sub - leaf .
13386	Locates a CarteBlanche file .
13387	Converts this NumberSystem to a new number system .
13388	Checks if this Number is equal to another Number .
13389	Returns the decimal value of the symbol .
13390	Adds a Number to this NumberSystem
13391	Subtracts the specified number from this number .
13392	Multiplies this Number by the given multiplicator .
13393	Divides this Number by the given multiplicator .
13394	Returns the adapter for the given mysqli
13395	Returns a list of aliases .
13396	Finds all aliases in a query .
13397	Replaces all files in the destination module .
13398	Read a single line from the socket .
13399	Enables crypto connection .
13400	Checks if the socket timed out .
13401	Add a route .
13402	Sets the list of items .
13403	Builds the HTML for a site .
13404	Prepare the name attribute .
13405	Checks if a data attribute is valid .
13406	Add a resource to the queue
13407	Creates a Day instance from an array of opening intervals .
13408	Create a DayInterface from an associative array .
13409	Checks if an interval is all day .
13410	Creates a new request from an array .
13411	Set server info .
13412	Sets the HTTP headers .
13413	Set the POST and REQUEST fields
13414	Sets the GET and REQUEST fields
13415	Returns a header .
13416	Returns an array representation of the request
13417	Adds a command to the queue .
13418	Add a parsed command .
13419	Returns the command with the given name .
13420	Removes a named command .
13421	Matches a command with the given path .
13422	Returns all commands .
13423	Setup the application .
13424	Setup from cache .
13425	Returns an array of cacheable commands .
13426	Sets the separator .
13427	Registers a listener for an event .
13428	Listen for many events .
13429	Checks if an event listener exists for the given event .
13430	Removes a listener from an event .
13431	Returns true if the event has any listeners .
13432	Adds an event to the collection .
13433	Removes an event .
13434	Trigger an event .
13435	Setup the event handler .
13436	Setup from cache .
13437	Initializes the template .
13438	Check if a template exists .
13439	Fetch template from file or string .
13440	Loads a file from the reader .
13441	Saves the model to the database .
13442	Initializes the reader .
13443	Initializes the writer .
13444	Returns an array of default options .
13445	Encrypts the given data with the given key .
13446	Decrypts the given data using the given key .
13447	Generates a unique key for the session .
13448	Throws an exception to stdout .
13449	Render an exception .
13450	Get the view file for an exception .
13451	Returns a Response object .
13452	Get the exception data .
13453	Get the stdioLogger instance .
13454	Read data from cache .
13455	Write session data to cache .
13456	Destroys a session .
13457	Update a timestamp .
13458	Extracts data from the session .
13459	Extracts the timestamp from the record .
13460	Get session data from cache .
13461	Returns the exception s message with variables .
13462	Add the constraint to the query .
13463	Adds the auto - increment clause to the column .
13464	Adds a new key .
13465	Adds a foreign key .
13466	Returns the syntax for a column .
13467	Jumpstart the application .
13468	Creates an iteration exception .
13469	Renders the toggle button .
13470	Get a response template .
13471	Returns the module name .
13472	Loads a class reflection .
13473	Loads a reflection for an object
13474	Loads a property from a class .
13475	Returns the name of the method that was called .
13476	Returns the properties of a class .
13477	Sets the value of an object property .
13478	Sets the value of the properties of an object .
13479	Loads class annotations .
13480	Clears the object reflections .
13481	Checks if a class is instantiable .
13482	Returns a ReflectionMethod instance for the given object or name and method name
13483	Gets a reflection of a class .
13484	Checks the arguments of a method
13485	Get a reflection from the cache .
13486	Sets a reflection to the cache .
13487	Get the cache key .
13488	Get the class name of an object .
13489	Parse doc comment summary .
13490	Get class doc data .
13491	Get the documentation for a method .
13492	Initialize by config .
13493	Returns the namespace for a given foundation class .
13494	Un indent a string
13495	Performs post - processing .
13496	Extract photo array from source .
13497	Fetches the images for a photo .
13498	Extract the images from a source array .
13499	Finds the start position of a placeholder .
13500	Builds the route path .
13501	Searches for a path in the router .
13502	Replace placeholders in a path .
13503	Initializes the object .
13504	Preload messages for a given category .
13505	Find categories by pattern .
13506	Check if a property is set .
13507	Sends an exception response .
13508	Returns the content for the given exception .
13509	Formats a path .
13510	Formats an array of arguments .
13511	Escape HTML special characters .
13512	Create a new validator instance with the given data .
13513	Transforms a string into an Input object
13514	Detach activity listener for disconnected connection .
13515	Handle the received event .
13516	Sends a callback to the home screen .
13517	Callback for GridReaper .
13518	Get proxy command handler .
13519	Displays the application config view .
13520	Load the bundles .
13521	Load messages from a JSON file .
13522	Set HTTP headers .
13523	Sets the server CGI environment variables .
13524	Sends a POST request .
13525	Send a JSON - RPC request .
13526	Connect to the database
13527	Escape a string using sqlite .
13528	Initializes the object .
13529	Check if this table has a slug field .
13530	Returns an array of special fields .
13531	Get fields by type .
13532	Returns a string representation of a date .
13533	Negotiate a language .
13534	Negotiates a charset .
13535	Negotiate MIME type .
13536	Match Accept header .
13537	Sorts the accept header .
13538	Opens a connection to the head server .
13539	Converts a string from one charset to another .
13540	Returns the entity manager .
13541	Get the object s structure .
13542	Returns the auto object for the given table and dbname
13543	Get the structure of a table
13544	Gets a model from the database .
13545	Builds the objects structure .
13546	Prepares an error .
13547	Checks a set of budgets .
13548	Check if budget is in recurrence .
13549	Find by budget id .
13550	Sets the ID parent .
13551	Set isMain .
13552	Returns the account user .
13553	Returns the bank object .
13554	Parse a csv file
13555	Returns the icon for the payment type .
13556	Builds a query .
13557	Escapes a single value .
13558	Creates a redirect response .
13559	Redirects the user to the given path .
13560	Redirect to the previous page .
13561	Throws an HttpRedirectException
13562	Filter a list of commands to the ones with the longest length .
13563	Sorts the given commands .
13564	Format a section of a command .
13565	Initializes the session .
13566	Starts a timer .
13567	Get a timer instance .
13568	Display a timer .
13569	Initialize the provided provider .
13570	Initializes the static application .
13571	Initializes the basic autoloader .
13572	Locate the configs directory .
13573	Locates the class loader .
13574	Creates a new object of the given type .
13575	Get a ConfigReader instance .
13576	Initializes the container .
13577	Initializes the static application .
13578	Check if two tokens match .
13579	Get the token from the request .
13580	Initializes the bot .
13581	Get the current weather for a location .
13582	Get the precipitation for a given event .
13583	Get the latitude and longitude for a location .
13584	Adds an error message to the response .
13585	Get English intensity .
13586	Returns the annotations for a class .
13587	Returns the class members annotations .
13588	Returns the class and its members annotations .
13589	Returns the annotations for a property .
13590	Returns an array of property annotations of a given type .
13591	Returns an array of class properties annotations .
13592	Returns the annotations for a method .
13593	Returns an array of method annotations of the given type .
13594	Returns an array of class methods annotations .
13595	Returns the annotations for a function .
13596	Filter annotations by type .
13597	Sets the annotation values .
13598	Returns a reflection of a class .
13599	Get a reflection for a property .
13600	Returns a ReflectionMethod .
13601	Get a reflection for a function .
13602	Get the dependencies for a given parameter .
13603	Returns the length of this node .
13604	Returns the center of the point .
13605	Runs the form .
13606	Add a field to a model attribute .
13607	Check if a key exists .
13608	Returns the display directory name .
13609	Scan a directory recursively
13610	Adds a header to the response .
13611	Return a list of headers .
13612	Creates a new database .
13613	Returns an array of all tables in the database
13614	Update the database from a database structure
13615	Update the database relations of the model .
13616	Update the many table .
13617	Generates the table SQL .
13618	Generates the SQL for a single column
13619	Generate index sql .
13620	Generates constraint sql .
13621	Returns a list of cached key values by key type .
13622	Returns a list of key values for a given key type .
13623	Get annotations for a class .
13624	Returns the exact annotation for the given class .
13625	Returns the annotations for a property .
13626	Returns the exact annotation for the given property .
13627	Get the annotations for a method .
13628	Returns the exact annotation for a method .
13629	Get the annotation reader instance .
13630	Get Reflection of a method
13631	Get an item from the cache .
13632	Set a value to the cache
13633	Get the paths for a given key .
13634	Process a key .
13635	Checks if the given event class name implements the LifeCycle event interface .
13636	Builds the event object .
13637	Returns the average value of an array
13638	Set the order by clause .
13639	Reads the parameters from the constructor .
13640	Get the value of a path in an object .
13641	Sets a value to an object .
13642	Filters an array of objects using the given expression .
13643	Sets the From address .
13644	Adds an address to the mailer .
13645	Adds a reply to address .
13646	Adds a CC address .
13647	Adds a BCC address .
13648	Add an attachment to the mail .
13649	Runs the container cache .
13650	Sets the referer .
13651	Returns the referer .
13652	Builds a URL from a parameter .
13653	Download the Crowdin package .
13654	Extracts a package .
13655	Resets the default locale translations .
13656	Get the position of the first occurrence of a string in a string .
13657	Creates the sidebar menu .
13658	Adds the example menu .
13659	Register the service provider .
13660	Publish pages .
13661	Executes the update query .
13662	Load messages from a file .
13663	Returns an array of categories .
13664	Returns the filename of the response .
13665	Validate leaf in uploaded files structure
13666	Initializes the result object .
13667	Returns the pattern id and version .
13668	Sets the attributes of the result object .
13669	Detect by key .
13670	Check if the server is running on shell .
13671	Get the config .
13672	Converts latitude to DMS .
13673	Returns a formatted DMS longitude .
13674	Calculate the latitude and angle for a given distance .
13675	Calculates the longitude for a given distance .
13676	Returns the distance between this object and the given location .
13677	Returns true if the given data matches any of the filters .
13678	Create tables from config .
13679	Bundle multiple schemas .
13680	Returns a point by name .
13681	Publish a console command .
13682	Get the url fragment that matches the current url fragment .
13683	Generates the response for the request .
13684	Retrieves the cached data for the first request .
13685	Checks if a string ends with another string .
13686	Count the number of words in a string
13687	Create a new acting as user .
13688	Initializes the session .
13689	Opens the session .
13690	Opens the session .
13691	Registers the session handler .
13692	Closes the session .
13693	Destroys the session .
13694	Regenerates the session id .
13695	Read a session
13696	Writes session data .
13697	Destroy session .
13698	Sets a value to a key .
13699	Removes an item from the collection .
13700	Remove all data from session .
13701	Returns the value of a flash parameter .
13702	Get all the flashes .
13703	Sets a flash parameter .
13704	Adds a flash parameter .
13705	Removes a flash parameter .
13706	Removes all flash params
13707	Freezes the current session .
13708	Unfreezes the session .
13709	Creates the session cookie .
13710	Validates an attribute s value after a specified date .
13711	Validate the date is after a given date with the given format .
13712	Validate the date format .
13713	Checks all predictions .
13714	Assigns a value to an array .
13715	Get controller plugin config .
13716	Executes a rule .
13717	Processes multiple dependencies
13718	Parse RichText fragments .
13719	Create a new view instance .
13720	Set the view variables .
13721	Set a view variable .
13722	Escapes the given value .
13723	Returns the template directory .
13724	Set or get the layout .
13725	Set view template .
13726	Render a partial .
13727	Ends a block .
13728	Renders the view .
13729	Get the full path for a template .
13730	Renders a template .
13731	Renders the layout .
13732	Sets the route .
13733	Get the sep line .
13734	Generates a header message .
13735	Returns a list of all notifications .
13736	Creates a new instance of the notification .
13737	Sets the cache key .
13738	Determine if the file should be renamed .
13739	Guesses the extension of the file .
13740	Guesses the filename of the file .
13741	Set rename .
13742	Download a file .
13743	Uploads a tinymce file .
13744	Handle kernel exceptions .
13745	Generates a cURL request .
13746	Execute the curl request and parse the response
13747	Set cookie file
13748	Choose one of many parameters .
13749	Lists all modules .
13750	Initializes the options .
13751	Writes the config to a file
13752	Get an exception from a context .
13753	Converts an exception to an array .
13754	Renders a file .
13755	Checks if the given file is a core file .
13756	Get the name of the exception .
13757	Before output callback .
13758	Minify a list of URLs .
13759	Set the default amount .
13760	Sets the date start .
13761	Sets the date end .
13762	Set isRecurrent .
13763	Set the monthBitmask value
13764	Get all budget categories .
13765	Get all budget months .
13766	Executes a prepared statement .
13767	Returns a PDOException for an SQL error .
13768	Registers an autoloader for a path .
13769	Creates a new transaction and returns the result .
13770	Run a down transaction .
13771	Inserts a row into a table .
13772	Insert a batch of rows into a table .
13773	Updates a table .
13774	Deletes data from a table .
13775	Renames a table .
13776	Drops a table .
13777	Truncates a table .
13778	Drop a column from a table .
13779	Renames a column in a table
13780	Alters a column in a table .
13781	Add a primary key to a table .
13782	Drops a primary key .
13783	Add a foreign key to a table .
13784	Drops a foreign key .
13785	Creates an index on a table .
13786	Drops an index on a table .
13787	Adds a comment on a column .
13788	Add a comment on a table .
13789	Drops a comment from a column .
13790	Drop a comment from a table .
13791	Execute a command promise .
13792	Logs a message .
13793	Validate a regular expression .
13794	Captures the given text .
13795	Splits a string into an array
13796	Replaces the given text with the given one .
13797	Config action .
13798	Get the Securimage url .
13799	Get model by id .
13800	Get a model or create a new one .
13801	Returns a list of dummy records .
13802	Save a model to the database .
13803	Delete a model .
13804	Returns a list of models where the id is in one of the given arrays .
13805	Get where id in with keys .
13806	Set a raw cookie
13807	Connect to a SOCKS5 proxy .
13808	Saves the current record to the database .
13809	Sets the data for the field .
13810	Get the data as an array .
13811	Returns the value of a field .
13812	Sets the value of a field .
13813	Get the primary key predicate for the current record .
13814	Parse a path .
13815	Validates the given path .
13816	Splits an array of segments into an array of segments .
13817	Parses a path into an array of segments .
13818	Get the replacement for a parameter .
13819	Cache a value .
13820	Flushes the cache .
13821	Process the raw response data .
13822	Invoke a method on an object .
13823	Returns the content type of the file .
13824	Regenerate an id .
13825	Create a session id .
13826	Creates the GC timer .
13827	Sets the content .
13828	Sets the buttons .
13829	Adds a button .
13830	Validate modal type .
13831	Validates a modal size .
13832	Register commands .
13833	Archive a tar file
13834	Adds a string to a file
13835	Check if a filename is a malicious filename .
13836	Parse the PRIVMSG command .
13837	Migrate from another object .
13838	Get the unique keys for a table .
13839	Returns the primary key of a table .
13840	Get the primary keys of a table .
13841	Returns the priority object .
13842	Returns the validator .
13843	Loads the mime types from a file
13844	Load mime aliases from file .
13845	Unlinks a directory .
13846	Get the permissions as a string .
13847	Returns the permissions as octal .
13848	Add an inner join to the query .
13849	Converts this select to SQL .
13850	Performs a search and returns the results .
13851	Create a table if not exists .
13852	Load all modules .
13853	Get the container instance .
13854	Initialize the swear jar .
13855	Adds a SELECT statement .
13856	Set the table to query on .
13857	Sets a column s value .
13858	Sets the where clause of the query .
13859	Add an OR WHERE clause to the current query .
13860	Sets the order by column to ASC .
13861	Set the query order by .
13862	Returns the query to execute .
13863	Set the where clause .
13864	Set order by .
13865	Get the select query .
13866	Get the insert query .
13867	Get update query .
13868	Get the delete query .
13869	Returns the SET statement .
13870	Returns the WHERE statement .
13871	Get the ORDER_BY query string .
13872	Walks down an expression tree and returns the result .
13873	Register a post .
13874	Edits a user .
13875	Returns the current version .
13876	Creates a new route .
13877	Handle the request .
13878	Resolves a route .
13879	Returns the home URL .
13880	Set a component .
13881	Restaurez un usager
13882	Get user by id
13883	Returns active user .
13884	Save messages to a file .
13885	Find a value in a list .
13886	Finds an ActiveRecord with a given set of models .
13887	Fetch the next row of results .
13888	Read a column from the database .
13889	Read an object from the database .
13890	Fetch all results .
13891	Returns the number of columns in the result set
13892	Finds the constraints for a table .
13893	Get the server version promise .
13894	Publish the routes .
13895	Parse the routes data .
13896	Builds the path expressions .
13897	Add a service alias .
13898	Binds a service to the container .
13899	Creates a new context for the given service context .
13900	Create a service from a ServiceContext .
13901	Check if a service exists .
13902	Checks if a service has a context .
13903	Get a service by id .
13904	Make a service .
13905	Returns a singleton for a given service .
13906	Gets a service by its ID .
13907	Context service id .
13908	Setup the container .
13909	Setup from cache .
13910	Setup service providers .
13911	Returns a cacheable array .
13912	Get address lines .
13913	Sets the filter level .
13914	Returns a unique id .
13915	Register the route in the router .
13916	Resolves an action .
13917	Emit beforeAction event .
13918	Emits an after action event .
13919	Render a partial .
13920	Render an ajax view .
13921	Get all public actions .
13922	Render the view in the layout .
13923	Renders a view .
13924	Normalize the action name .
13925	Resolves the error as an html string .
13926	Resolves an error as an array .
13927	Get the error data .
13928	Get the name of the exception .
13929	Validates an action .
13930	Returns the id of an action method .
13931	Returns the action method .
13932	Converts a color to hexadecimal
13933	Converts a color to RGBA .
13934	Get the dominant color of an image
13935	Creates a new promise for stdin .
13936	Prompts the user for input .
13937	Appends a file to the given paths .
13938	Get the PgClient instance .
13939	Executes a SQL statement .
13940	Writes data to a stream .
13941	Creates a ServerRequest from globals .
13942	Returns the value of a given header .
13943	Strip query string from path .
13944	Marshal the host and port from the header .
13945	Normalizes a nested file spec .
13946	Check if a string ends with a given string .
13947	Generates a random number
13948	Creates the edges of a graph .
13949	Returns an array of annotations for a given graph .
13950	Create a new record .
13951	Fetches all collections .
13952	Update a record in the database
13953	Sets the HTTP status code .
13954	Set the response headers .
13955	Returns the date header .
13956	Set the response s date header .
13957	Adds a cache control .
13958	Get cache control by name .
13959	Removes a cache control .
13960	Returns true if the object can be cached .
13961	Returns the user s age .
13962	Set the expiration date for the response .
13963	Returns the Expires header .
13964	Returns the maximum age .
13965	Shared maximum age .
13966	Set the shared maximum age in seconds .
13967	Sets the response as NOT_MODIFIED
13968	Checks if the status code is invalid .
13969	Checks if the status code is informational .
13970	Returns true if the request was successful .
13971	Checks if the request is a redirection .
13972	Checks if the request is a client error .
13973	Check if the request is a redirect .
13974	Checks if the response is empty .
13975	Close output buffers .
13976	Initializes the request .
13977	Validates the HTTP method .
13978	Locate a command .
13979	Locates all paths for a given command .
13980	Downloads the package file .
13981	Remove installed packages .
13982	Detect stub duplicates .
13983	Create a package from a file .
13984	Returns the body parameters as an array .
13985	Enable error handling .
13986	Returns the difference between this transaction and the global amount .
13987	Adds a month to the bitmask
13988	Check if a user has a given month .
13989	Returns the length of the request .
13990	Returns the HTTP request boundary .
13991	Load a user by username .
13992	Create a new user .
13993	Set the ip and port .
13994	Renders a view .
13995	Publishes a stream .
13996	Materializes a resource .
13997	Sets the params .
13998	Fetches the message from cache .
13999	Encrypts a message .
14000	Decrypts the message .
14001	Decrypt an array .
14002	Encrypts an object .
14003	Decrypt a JSON object .
14004	Returns an option by name .
14005	Initializes the object .
14006	Replaces magic fields in html .
14007	Converts a Query into a QueryBuilder .
14008	Returns the given rich text as a string .
14009	Convert rich text to html .
14010	Returns the given block as an html block .
14011	Returns an instance without the given cookie .
14012	Sends the response .
14013	Validates a status code .
