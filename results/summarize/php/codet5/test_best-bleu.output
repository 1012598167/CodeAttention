0	Get Administrator role
1	Get user .
2	Handle a bread delete event .
3	Categoria translations .
4	Get the highest order menu item .
5	Creates a unique name for the given parameters .
6	Handle a bread added event .
7	Updates a database table .
8	Updates the database table .
9	Gets the renamed columns diff .
10	Gets the renamed table diff .
11	Returns the list of renamed columns .
12	Returns the list of renamed indexes .
13	Get the thumbnail of an image .
14	Get thumbnail name .
15	Has the given user edit the given roles?
16	Get the dimmers .
17	Prepare menu translations
18	Save the translation model .
19	Checks whether the given user can read the given model .
20	Create a new bread .
21	Store a new bread .
22	Show the form for editing a bread .
23	Update a bread .
24	Delete a bread .
25	Add a relationship
26	Get the relationship field
27	Handle the input from the user .
28	Store a new database table .
29	Edit a database table .
30	Update table .
31	Show a database table
32	Delete a database table .
33	Get the URL to sort by this field .
34	Display menu .
35	Check if the model is translatable .
36	Many - to - many translations .
37	Returns the translated attribute value .
38	Scope a query to only include translations .
39	Save translations .
40	Get the description of a table .
41	Handle the BreadAdded event .
42	Add the storage symlink alert .
43	Register the console commands .
44	Cleanup the data for the given dataType .
45	Delete bread images .
46	Order data .
47	Get a list of relationships .
48	Resolve the relations .
49	Add the SoftDeletes trait for the given stub .
50	Validate Bread .
51	Get fields with validation rules .
52	Verify an id_token
53	Retrieve certificates from a URL .
54	Retrieve the list of federated sign - on certs .
55	Set phpsec constants
56	Fetch OAuth2 access token with authorization code
57	Fetch an OAuth2 access token with assertion grant .
58	Fetch an access token with a refresh token .
59	Authorize the user using the given HTTP client .
60	Check if the access token is expired .
61	Verify ID token
62	Add one or more scopes to the request
63	Execute a PSR - 7 request
64	Set auth config
65	Create OAuth2 service .
66	Returns the number of times the request should be retried .
67	Returns the next chunk of data .
68	Parses an HTTP response .
69	Get data type
70	Combine a list of variables
71	Get the encoded value .
72	Executes a request and returns the response .
73	Decode an HTTP response .
74	Map types from array to object
75	Returns the model as a simple object .
76	Recursively converts a value into a simple object
77	Get the mapped name
78	Checks if the given array is an associative array .
79	Build a new instance of Google_AuthHandler_Guzzle5AuthHandler
80	Find the config file
81	Define YOURLS constants
82	Sets the is_emulate_prepare attribute
83	Deal with dead or error
84	Get the list of queries .
85	Register global variables .
86	Get all options from the database
87	Add a new option
88	Delete an option from the database
89	Adds a route placeholder .
90	Set default namespace
91	Sets the default controller .
92	Set default method
93	Discover module s routes .
94	Set the default constraint for the route .
95	Get all routes for a given HTTP verb .
96	Get routes options .
97	Add multiple routes to the collection .
98	Add a redirect .
99	Check if a given route is a redirect .
100	Get redirect code .
101	Add a route to the collection .
102	Adds a OPTIONS route to the collection .
103	Set the route collection environment .
104	Reverse route .
105	Determine the current subdomain .
106	Reset all routes .
107	Custom error handler .
108	Shutdown handler .
109	Determines the view to use based on the given exception .
110	Renders the error view .
111	Collect the variables for the exception .
112	Determine the HTTP status code and exit status .
113	Returns a human - readable representation of the given number of bytes .
114	Highlights a file .
115	Check if a string contains only alphabetic characters
116	Performs a regular expression match .
117	Check if a string is a valid email address .
118	Check if a string is a valid email address .
119	Check if a string is a valid URL .
120	Check if a string is a valid date .
121	Create a new exception instance for a failed move operation .
122	Validate a CC number .
123	Check if Luhn number is valid .
124	Move file from source to destination .
125	Move Escaper classes
126	Move Kint .
127	Starts the session .
128	Configure the length of the session .
129	Init session vars
130	Set a value in the session
131	Get session data
132	Push data to a key .
133	Removes a value from the session .
134	Sets flashdata to the session .
135	Get flashdata .
136	Mark a variable as flashdata .
137	Returns a list of all flash keys .
138	Set temporary data .
139	Get tempdata from session
140	Mark a variable as tempdata
141	Unmark temporary data
142	Get temporary keys .
143	Sets the session cookie .
144	Checks the cache for a given key .
145	Guess the MIME type from a file extension .
146	Try to guess the file extension from a file type .
147	Redirects to a URI .
148	Redirects to a given route .
149	Redirects to the previous page .
150	Set a flash message .
151	Runs the filters in the given position .
152	Initializes the router .
153	Enables a filter .
154	Get arguments .
155	Format the object into an array
156	Send the logs to the client
157	Detects the locale based on the configuration .
158	Set the current locale .
159	Checks if the current request is over SSL .
160	Get the body as JSON .
161	Returns the results of a GET query .
162	Returns the results of a post query .
163	Returns a POST or GET parameter .
164	Retrieves GET data or POST data
165	Returns cookie data
166	Get all files .
167	Get a file by ID .
168	Detects and sets the URI .
169	Detect the path of the current request
170	Negotiates the given type .
171	Parses the request URI and returns it .
172	Builds the DSN .
173	Returns a Formatter instance for the given mime type .
174	Check if the request is a bot or not .
175	Add the honeypot to the response
176	Resizes the image .
177	Crops the image
178	Get the version of ImageMagick .
179	Get the path to the resource file
180	Adds a foreign key .
181	Drops a foreign key from a table
182	Protected Attribute Unsigned
183	Protected Attribute Default
184	Process primary keys .
185	Processes the foreign keys .
186	Set the locale .
187	Get a translation line .
188	Format a message .
189	Require a file
190	Adds the base URI option to the command .
191	Add an image src option to the command .
192	Add a media src option to the command .
193	Adds the manifestSrc option to the command .
194	Add an object src option to the command .
195	Add a plugin type option
196	Add sandbox option .
197	Adds a script src option to the command line .
198	Add a style src option to the command line .
199	Adds an option to a target .
200	Generate nonces for the response .
201	Build the headers for the response .
202	Get the title .
203	Collect logs .
204	Prepare params .
205	Determine the cell class and method .
206	Get the result as an array or an object
207	Get custom result object .
208	Get the results as an array .
209	Get the result object .
210	Get a row from the row data .
211	Returns the specified row from the custom result object .
212	Returns the specified number of rows from the result set
213	Get a row from the result set .
214	Set row data
215	Get first row
216	Get last row
217	Get next row
218	Returns the next row from the result set as an associative array or object .
219	Match the acceptable and supported headers .
220	Match parameters against acceptable and supported ones .
221	Runs CI .
222	Show CLI Tool Header
223	Returns the links for the given group .
224	Make links .
225	Stores a group page per page total and segment .
226	Sets the URI path .
227	Returns the number of pages in a group .
228	Returns the current page number .
229	Checks if a group has a next page .
230	Returns the last page number .
231	Get a page URI .
232	Returns the next page URI .
233	Returns the previous page URI .
234	Returns the number of pages in a group .
235	Returns the details for a given pagination group .
236	Ensure a group exists .
237	Returns the number of years .
238	Returns the difference in months .
239	Returns the number of weeks .
240	Returns the number of days .
241	Returns the difference in hours .
242	Returns the difference in minutes .
243	Returns the difference between two times in seconds .
244	Returns a human - readable representation of the time .
245	Loads a database connection .
246	Loads the forge class .
247	Checks if the given property has changed .
248	Map a datamap property .
249	Mutate the given value into a Time instance .
250	Casts a value to a JSON object .
251	Determine if an alias should be discovered .
252	Find data by limit and offset
253	Returns the first record from the database
254	Save data to database .
255	Converts a class to an array .
256	Inserts a new record into the database .
257	Insert a batch of rows into the table .
258	Get the model builder instance .
259	Protects the fields that are not in the allowed fields
260	Clean the validation rules .
261	Get validation rules .
262	Count all results .
263	Set authentication .
264	Sets the form parameters .
265	Parses the options and sets the base URI headers and config .
266	Returns the request method .
267	Sends the request and returns the output .
268	Apply request headers to curl options .
269	Set response headers
270	Sends the request and returns the output .
271	Move the table to a specific version .
272	Find all migrations .
273	Check migrations .
274	Returns the history of all versions .
275	Get migration name .
276	Returns the current version of the namespace .
277	Add migration history .
278	Remove migration history .
279	Ensure the database table exists .
280	Checks a value against a rule .
281	Adds data from a PSR - 7 request .
282	Set validation rule .
283	Returns the rule group .
284	Sets the rule group .
285	Loads the rule sets .
286	Sets an error for a field .
287	Get error message .
288	Splits a string into an array of rules .
289	Resets the validation object to its initial state .
290	Convert an array to XML
291	Clean file names .
292	Sets the request URI .
293	Get the user info .
294	Get the query string .
295	Returns the specified URI segment .
296	Sets a URI segment .
297	Creates a URI string .
298	Sets the authority part of the URL .
299	Sets the URL scheme .
300	Sets the port of the request .
301	Sets the request path .
302	Refresh the path .
303	Sets the query string .
304	Decode the given value .
305	Add a query parameter to the request .
306	Keep query params .
307	Filter the path .
308	Applies the parts of the url .
309	Resolve a relative URI
310	Merges two URIs .
311	Removes dot segments from a path
312	Append a value to the value array
313	Prepends a value to the value array .
314	Returns the previous page .
315	Returns the next URL .
316	Returns the first part of the URI .
317	Returns the last page .
318	Returns the current page .
319	Starts a timer .
320	Stops timer with given name .
321	Returns the elapsed time of a timer .
322	Get all timers .
323	Add table alias .
324	Executes a SQL query and returns the result .
325	Executes a simple SQL query .
326	Returns a builder instance for the given table name .
327	Executes a Closure and returns a prepared query object .
328	Escape an identifier .
329	Call a function .
330	Returns the list of all tables in the database .
331	Checks if a table exists .
332	Checks if a field exists in a table .
333	Get the field data for a table
334	Get index data for a table
335	Get foreign key data .
336	Get the value of an environment variable
337	Registers the module s properties .
338	Get item from cache .
339	Writes data to a file .
340	Get directory info
341	Get file info
342	Initializes the application .
343	Run the benchmark and return the response .
344	Process the request and return the response .
345	Starts the benchmark .
346	Get the response object
347	Force HTTPS access .
348	Retrieve the cached response and display it
349	Save the page to the cache .
350	Generate cache name .
351	Replace the elapsed time with the total execution time .
352	Try to route .
353	Starts the benchmarking of the controller constructor .
354	Create a new controller instance .
355	Run the controller .
356	Gathers the output from the output buffer .
357	Stores the previous URL in the session .
358	Spoof request method .
359	Get a handler from configuration .
360	Create an alias from a table name .
361	Adds a where not in clause to the query .
362	Adds a WHERE IN clause to the query .
363	Creates a like statement .
364	Begins the group .
365	End a group
366	Set the QB offset
367	Set a value to the QBSet
368	Returns the compiled select statement .
369	Compile final query .
370	Returns the number of rows in the table .
371	Counts the number of records in the database .
372	Helper method to insert multiple rows into a table .
373	Returns the compiled insert query
374	Compiles the update statement into a string .
375	Get the compiled delete query
376	Decrement a column
377	Compiles the select statement into a string .
378	Compiles a WHERE HAVING clause .
379	Compiles GROUP BY clause
380	Compiles the order by clause .
381	Get the operators in a string .
382	Renders the timeline .
383	Collect data from all collected collectors .
384	Collect data from collectors .
385	Rounds a number to a given number of increments
386	Copies the image to a new location .
387	Get image properties
388	Release the lock .
389	Attach a heleypot field to the response .
390	Prepare template .
391	Returns the first row of the result set as an object .
392	Make columns .
393	Clears the table .
394	Sets the data from the DB result object .
395	Sets the table data from an array .
396	Set path .
397	Get the upload error string .
398	Stores the uploaded file to the filesystem
399	Check if the file is larger than the max size .
400	Is the file an image?
401	Check if the mime type is in the list of allowed mime types
402	Check if file has max dimensions .
403	Fetch a method s global variables .
404	Populates the global variables for a given method .
405	Run migrations .
406	Sets the name of the database table .
407	Run the migration .
408	Modify a column .
409	Creates the database table .
410	Copy data from temp table to temp table
411	Format the fields .
412	Format the keys .
413	Drop all indexes .
414	Set CSRF cookie
415	Get the CSRF hash
416	Returns a Time instance for the current time .
417	Parses a datetime string into a Time object .
418	Returns a new Time instance for today .
419	Returns a new Time instance for yesterday .
420	Returns a new Time instance set to tomorrow .
421	Create a Carbon instance from a date .
422	Create a Carbon instance from a time .
423	Create a new Time instance .
424	Creates a Time object from a string
425	Create a Time instance from a timestamp .
426	Creates a Time instance from a DateTime instance .
427	Returns the current timestamp as a DateTime instance .
428	Get the age of the event in years .
429	Returns true if the calendar is in daylight saving mode .
430	Sets the month field value . Valid values are 1 to 12 .
431	Sets the day of the month .
432	Sets the minute field value
433	Sets the second of the hour . Valid values are 0 to 59 .
434	Sets the value of the field .
435	Converts a timestamp to a Time object .
436	Checks if another time is equal to this time .
437	Returns true if this date time is the same as the given time .
438	Returns a DateTime object with UTC timezone .
439	Javascript matcher .
440	Callback for the CSS matcher .
441	Converts a string to UTF - 8 .
442	Converts a string from UTF - 8 to the current encoding
443	Get a file by name .
444	Creates a UploadedFile object from an array .
445	Get Value Dot Notation Syntax
446	Sets the binary to be downloaded .
447	Sets the file path to be downloaded .
448	Get the content length .
449	Set Content - Type by MIME Type
450	Get download file name
451	Returns the Content - Disposition header .
452	Build the response headers .
453	Sends the body of the downloaded file .
454	Send body by file path
455	Remap method .
456	Run a command .
457	Create the list of commands .
458	Connect to the database .
459	Create a new seeder instance .
460	Check if we are in the all namespace .
461	Add a test .
462	Run all tests .
463	Get the report .
464	Sets the query to be executed
465	Returns the final query string .
466	Get the start time .
467	Get the elapsed time in seconds .
468	Sets the error code and error string
469	Swap a prefix in the final query string
470	Compiles the binds into a query string .
471	Load the helpers .
472	Register the class loader .
473	Add a namespace .
474	Returns a list of namespace prefixes .
475	Require a file
476	Sanitize a filename .
477	Discover Composer namespaces .
478	Modify a date
479	Create an excerpt from a string .
480	Sanitize the given value .
481	Resolve nested variables .
482	Sets the database name .
483	Executes a query and returns the results .
484	Prepare the query to be executed .
485	Get connection error .
486	Executes a query and returns the number of affected rows
487	Returns the field names for a table .
488	Get a cache handler .
489	Get a CLIRequest instance .
490	Create a new instance of CURLRequest .
491	Returns a honeypot instance .
492	Returns a language object .
493	Returns the logger instance .
494	Returns a Negotiate instance .
495	Get a Parser instance .
496	Create a new IncomingRequest instance .
497	Get a response instance .
498	Returns a redirect response .
499	Get a router instance .
500	Get security instance .
501	Get or set the URI instance .
502	Returns a validation instance .
503	Describes a list of commands .
504	Pads a title to a certain length .
505	Get CSV from ResultInterface
506	Get XML from ResultInterface
507	Call a command .
508	Call the specified seeder .
509	Checks if a value is in a list
510	Checks if a numeric string is less than or equal to a given number
511	Check if any of the given fields are present in the given data .
512	Check if a value is required without the given fields .
513	Validate controller path segments
514	Set the directory .
515	Set the request parameters .
516	Sets the default controller .
517	Get the size of the file in a given unit
518	Moves the file to a new location .
519	Get the destination path .
520	Collect queries .
521	Format the timeline data .
522	Locates a file using the autoloader .
523	Returns the class name of the class in the given file .
524	Search for a file in the namespaces .
525	Ensure the file extension is added to the path .
526	Find the fully qualified class name from a path .
527	Tries to locate a file in the legacy paths .
528	Render a view string .
529	Get an excerpt of a string .
530	Set data .
531	Sets a variable to be rendered
532	Renders a section .
533	Include a view .
534	Log the current performance .
535	Sets the image to be used with the given file .
536	Ensure the image resource exists .
537	Resizes the image to the specified dimensions .
538	Rotates the image .
539	Flips the image .
540	Adds a text to the image .
541	Re - orient the image .
542	Get Exif data
543	Fit image to given width and height .
544	Run the CodeIgniter development server
545	Render a template string .
546	Parse a pair from a template
547	Extract noparse blocks from template
548	Insert noparse blocks into template .
549	Parse the template for conditionals .
550	Set the left and right delimiters .
551	Replace a single pattern in a template .
552	Checks if a key should be escaped .
553	Add a plugin .
554	Creates an image resource .
555	Get the value of a header .
556	Check if a header exists
557	Sets a header to be sent .
558	Remove a header from the request
559	Sets the HTTP protocol version .
560	Get the header name .
561	Configure the session ID regex
562	Returns the reason for the response
563	Set the Link header .
564	Sets the Content - Type header .
565	Get the response body as JSON .
566	Get the body as XML .
567	Format the body .
568	Set the Cache - Control header
569	Sends the response .
570	Sends the response headers .
571	Sets a cookie .
572	Checks if a cookie with the given name and value exists .
573	Get a cookie by name .
574	Deletes a cookie .
575	Send the cookies .
576	Returns a download response .
577	Get an instance of a class .
578	Create a config class .
579	Get a shared instance .
580	Get the autoloader instance .
581	Get the locator .
582	Reset all internal variables .
583	Injects a mock .
584	Discover services .
585	Read input from STDIN .
586	Prompts the user for input
587	Validate a value against a set of rules
588	Print text to console .
589	Write a message to STDERR .
590	Wait for a given number of seconds .
591	Adds a color to a string .
592	Wrap a string to a certain number of characters .
593	Get the value of an option
594	Generate a table from an array of tbody and thead .
595	Respond with the given data .
596	Return an error response .
597	Respond created response
598	Respond with deleted .
599	Fail Unauthorized Response
600	Fail server error response .
601	Check if the request has access to the CSRF token and if so return the response .
602	Initialize the module .
603	Get all listeners for an event .
604	Removes a listener from an event .
605	Check if the current request is a referrer .
606	Set the platform of the agent .
607	Determine which browser to use .
608	Determine if the user is a robot .
609	Determine if the user agent is a mobile device .
610	Sets the attribute type .
611	Initializes the config .
612	Show QrCode text
613	Init qrcode style .
614	Format emoji content .
615	Check if the time is longer than 1800 seconds .
616	Handles a check sync .
617	Logs a message .
618	Get the fetch uuid .
619	Shows the login QrCode .
620	Waits for the login in wechat .
621	Get the login information from the server .
622	Saves the server information to the cache .
623	Called before the init process completes .
624	After init success .
625	Sends a status notification to the server .
626	Download a file .
627	Downloads a file and returns its content .
628	Tries to auto download the file .
629	Performs a sync check .
630	Performs a sync .
631	Generates a sync key .
632	Logs a string to the Vbot log .
633	Log a message
634	Sends a word to a user .
635	Fetch all contacts .
636	Stores a list of contacts .
637	Fetches the members of all groups and stores them in the cache .
638	Stores the members of a group .
639	Report the given exception .
640	Throw a fatal exception .
641	Validates the key provided by the signer .
642	Splits the JWT string into an array .
643	Parses the header from the given data .
644	Parses the claims .
645	Parse signature .
646	Negotiates the language based on the accepted languages .
647	Get the matches from the Accept - Language header .
648	Cache the routes for each locale .
649	Build the route cache file .
650	Register the application bindings .
651	Register route translations commands .
652	Set the current locale .
653	Get URL from route name translated .
654	Get supported locales .
655	Get the list of supported locales ordered by priority .
656	Returns the current locale direction .
657	Get the current locale .
658	Returns the regional name of the current locale .
659	Checks if a locale is in the list of supported locales .
660	Get the route name from a path .
661	Find a translated route by path .
662	Finds the translated route for the given url .
663	Create a URL from a URI .
664	Normalize the data attribute .
665	Load cached routes .
666	Make locale routes path .
667	Encodes a set of messages .
668	Encodes the produce_partition command .
669	Encodes a produce topic .
670	Produce a topic pair .
671	Produces a partition pair from the given data .
672	Decode a message set .
673	Decode a message .
674	Creates a socket connection to a remote server .
675	Select a set of sockets .
676	Unpacks a bit field and returns its value .
677	Check string length
678	Returns true if the current system is little endian .
679	Get API version .
680	Get the api text for a given apikey .
681	Register a before route .
682	Add a route to be executed after the route is matched .
683	Mount a function to a base route .
684	Get the request method
685	Returns the base path of the application .
686	Add a route to the collection
687	Tries to find a matching route for the given request .
688	Returns the current route .
689	Matches a URL against this route s pattern .
690	Run a filter and execute it .
691	Get an event by name .
692	Clear all events and filters .
693	Execute a set of filters .
694	Executes a callback .
695	Calls a function and returns the result .
696	Call a class method .
697	Initializes the request .
698	Get the request body
699	Returns the current request method .
700	Get proxy IP address
701	Parse a query string into an associative array
702	Get or set the status code .
703	Add a header to the request .
704	Sets the cache headers .
705	Sends the response .
706	Initialises the service .
707	Handles PHP errors .
708	Handle an exception .
709	Map a framework method to a callback .
710	Register a framework method .
711	Get the value of a variable .
712	Clear a variable or all variables .
713	Start the application .
714	Stop output buffering and send response .
715	Add a route to the router
716	Halts the application .
717	Output a 500 Internal Server Error
718	Redirects to a given URL .
719	Return a JSON encoded response
720	Return a JSONP response
721	Sets the ETag header for the response .
722	Sets the Last - Modified HTTP header .
723	Register a class
724	Load a class by name
725	Get an instance by name .
726	Creates a new instance of a class .
727	Load a class
728	Add a directory
729	Render a file and return the output .
730	Get template path
731	Check if a graph is cyclic .
732	Return the average height of the graph
733	Collapse a multi - dimensional array into a multi - dimensional array .
734	Fetch files from a list of paths .
735	Traverse the tree
736	Returns the root nodes of the graph .
737	Get composer . lock installed packages .
738	Advances the progress bar .
739	Returns true if the terminal supports ANSI characters .
740	Processes this test for when a function has no parameters .
741	Processes this test .
742	Initializes the token manager .
743	Adds a fixable error message .
744	Merge a custom array into a base array .
745	Get the last pointer on a line .
746	Checks if a token is an assignment .
747	Check if a token is a namespaced token .
748	Check whether a token is only sanitized .
749	Checks if the given token is a safe cast .
750	Get array access keys .
751	Get the array access key for a given array access token .
752	Checks if a given token is a comparison token .
753	Is this the current token an array comparison?
754	Get the use type .
755	Get the variables in the given string that are interpolated .
756	Checks if a function call has parameters .
757	Returns the number of parameters in a function call .
758	Gets a specific parameter for a function call .
759	Find the opener and closer for an array token .
760	Determine the namespace for a given token .
761	Returns the name of the namespace declared at the given token .
762	Test whether a T_CONST token is a class constant .
763	Test whether a T_CLASS or T_TRAIT token is a class property .
764	Check whether a token is a valid direct scope .
765	Prepare the punctuation regex .
766	Transforms a string using a regular expression .
767	Transform complex string
768	Get the groups .
769	Processes an arbitrary tstring .
770	Processes function parameters .
771	Retrieve mispellings from the match stack .
772	Callback used to set the pagination limit .
773	Set config data
774	Get the tab width .
775	Processes a global statement .
776	Add an error if WordPress globals are prohibited .
777	Setup the groups .
778	Is this token a targetted token?
779	Check for a token that matches a regular expression .
780	Processes a variable variable .
781	Check whether a variable is prefixed or whitelisted .
782	Validates the prefixes .
783	Record potential prefixes for a given construct .
784	Setup the groups array .
785	Validates the alignMultilineItems property .
786	Checks if the given value is a local data stream .
787	Processes variables in string format .
788	Merge the whitelist with the custom properties .
789	Check if a token should be ignored .
790	Returns the indentation size of the given token .
791	Returns the indentation string for the given number .
792	Adds an error for array alignment .
793	Fixes an alignment error .
794	Checks whether a range of tokens is falsy .
795	Compare the single and plural arguments .
796	Check that all text placeholders are ordered .
797	Checks if the given token is a targetted token .
798	Check for a matching token .
799	Get namespaced class name .
800	Register the tokens .
801	Execute the closure .
802	Reserves a message from the queue .
803	Closes the broker context .
804	Validates that namespace is associated with an existing directory .
805	Pushes a job to the queue .
806	Listen for events .
807	Execute a job .
808	Handle a message .
809	Runs the event loop .
810	Reserves a connection for the given channel .
811	Move expired records to the reserve time .
812	Serialize the job before pushing .
813	Delete a message from the queue .
814	Runs the worker .
815	Handle a message .
816	Initializes the process .
817	Returns true if the process can continue .
818	Reserves a new session id .
819	Delete a job from the queue .
820	Parses the XML document .
821	Parse get elements .
822	Parses the inner tree .
823	Reads text and returns it .
824	Parse the current element .
825	Parses the attributes of the current element .
826	Get a deserializer for an element name .
827	Pushes a new context onto the stack .
828	Removes the last context from the stack .
829	Returns a new instance of Writer
830	Parses an XML string .
831	Parses an XML string and returns its value .
832	Writes a value to the XML document .
833	Maps a value object to an element .
834	Write a value object
835	Parse clark - notation .
836	Deserialize MailSettings object from xml .
837	Creates a Uri object from XML .
838	Starts a new XML element .
839	Write element .
840	Write an array of attributes .
841	Adds an attribute to the XML document .
842	Get the relationships for the given model .
843	Validate a job name .
844	Validate command .
845	Creates a new ShellJob from a CronJob object
846	Creates a closure that can be used to retrieve the current trace context .
847	Finishes the timer .
848	Returns the current span .
849	Convert a TraceContext to a Span .
850	Starts recording a new trace .
851	Sets the name of the recorder .
852	Adds an annotation to the trace context .
853	Sets the remote endpoint .
854	Generate a new token and attach it to the request .
855	Get a value from the storage
856	Get the last key pair .
857	Enforces the storage limit .
858	Create a new sanitizer instance .
859	Sets the attributes of a tag node .
860	Gets the value of the attribute with the specified name .
861	Adds the default entity name to the backend configuration .
862	Processes the default menu item .
863	Returns the type name for a given type FQCN .
864	Get the form type options of a property .
865	Initializes the backend configuration .
866	Autocomplete action .
867	Lists all entities .
868	Edit an entity .
869	Finds and displays a specific entity .
870	Creates a new entity .
871	Deletes an existing entity entity .
872	Search action .
873	Handles the batch action
874	Update an entity property .
875	Find all entities .
876	Create list query builder .
877	Finds entities by a search query .
878	Create a search query builder for the entity .
879	Creates a form builder for the given entity .
880	Get the form options for the given entity .
881	Creates a form for the given entity .
882	Creates a form to delete a entity entity .
883	Redirect to backend homepage .
884	Add the custom controller to the request .
885	Normalize the menu config .
886	Returns the entity configuration .
887	Checks if the given action is enabled for the given entity .
888	Returns the configuration for an action .
889	Translate a message with the given number of times
890	Create a paginator for Doctrine ORM .
891	Process the backend configuration .
892	Initializes the request attributes .
893	Find the current item .
894	Returns the attribute normalizer .
895	Processes the entity properties metadata .
896	Get the default actions for a given view .
897	Handle form violations .
898	Finds entities by a given query .
899	Processes the config files .
900	Normalizes the entity configuration .
901	Returns a unique name for the given entity .
902	Normalize view config .
903	Merges the given form configuration into the given form configuration .
904	Create a list query builder .
905	Checks if the given field is a Doctrine association .
906	Processes the field configuration .
907	Get the list of excluded fields .
908	Filter a list of fields .
909	Runs a command and returns its exit code and output .
910	Delete Ordinal Check .
911	Check a D statement .
912	Check for an update statement .
913	Read length from data
914	Build a progress bar callback .
915	Logs a bulk exception .
916	Gets the types from the configuration .
917	Get the index configuration .
918	Get all providers .
919	Returns all providers registered for an index .
920	Returns the provider for the given index and type .
921	Set sorting .
922	Builds the index mapping .
923	Builds the index template mapping .
924	Builds the type mapping .
925	Fixes the properties .
926	Logs a query .
927	Transforms an object into an Elastica document .
928	Returns the total number of results .
929	Get Elastica results .
930	Delete all indexes for a template .
931	Returns the index with the given name .
932	Gets the persister for the given index and type .
933	Populate index .
934	Refreshes an index .
935	Transforms an object into a document .
936	Transforms a nested array or object into a document .
937	Normalize the given value .
938	Transforms an object into a document .
939	Get entity query builder .
940	Gets an index template by name .
941	Reset all indexes .
942	Resets an existing index .
943	Resets an index type .
944	Switches an index alias .
945	Loads the index finder .
946	Load type persistence integration .
947	Loads the elastica to model transformer service .
948	Get the object persister .
949	Load type pager provider .
950	Loads type listener .
951	Get doctrine events .
952	Load type finder .
953	Loads the index manager .
954	Loads the index template manager .
955	Loads the driver .
956	Loads the serializer .
957	Create the default manager alias .
958	Returns the dynamic_templates configuration node .
959	Returns the types configuration node .
960	Returns the _id configuration node .
961	Returns the _source configuration node .
962	Returns the _routing configuration node .
963	Returns the _parent configuration node .
964	Returns the _all configuration node .
965	Adds the index configuration .
966	Adds the index_templates configuration .
967	Transforms an array of Elastica objects into entities .
968	Checks if an object is indexable .
969	Builds the callback for the given type .
970	Builds the expression callback .
971	Get the callback for the given type .
972	Returns the expression variable name for the given object .
973	Set the root index name .
974	Switches an index to an alias .
975	Builds an alias update request .
976	Clean up an index alias due to a rename failure .
977	Closes an index .
978	Gets an aliased index .
979	Log a query .
980	Occur on postPersist events .
981	Occur on postUpdate events .
982	Occur on preRemove events .
983	Persists the scheduled entities .
984	Schedules the object for deletion .
985	Checks if an object is indexable .
986	Returns the repository for the given entity name .
987	Transforms an object into a document .
988	Returns the repository for the given type name .
989	Make a new Hashids client .
990	Register the factory class .
991	Verify hash .
992	Creates a Guzzle client .
993	Adds a cookie to the collection .
994	Adds the cookie headers to the given request .
995	Clear expired cookies .
996	Returns the cookie hash .
997	Add a header to the response .
998	Parse HTTP headers .
999	Add Authorization header to the request .
1000	Set the options for the middleware .
1001	Returns the client nonce .
1002	Get the A1 hash .
1003	Get the HA2 hash .
1004	Get the authentication header .
1005	Get the response .
1006	Get QOP .
1007	Hash value .
1008	Parse the authentication info header .
1009	Parse name value pairs .
1010	Parses the HTTP WWW - Authenticate header and sets the necessary properties .
1011	Set digest algorithm .
1012	Set the HTTP method .
1013	Unquotes a string .
1014	Add new parameters .
1015	Converts an array of headers into a buzz array .
1016	Converts an array of headers to PSR - 7 compatible array .
1017	Sends a PSR - 7 request asynchronously .
1018	Sends a request to the queue .
1019	Executes all requests in the queue .
1020	Initializes the cURL multi handle .
1021	Cleans up the queue .
1022	Checks if the route matches the given request .
1023	Check if the object is expired .
1024	Checks if the cookie s domain matches the given domain .
1025	Checks if the route matches the given path .
1026	Creates a cookie from a Set - Cookie header value .
1027	Release a cURL resource .
1028	Prepares a cURL request .
1029	Set options from a PSR - 7 request .
1030	Sends the given request and returns the response .
1031	Records a request and response to the log .
1032	Creates the image for the current page
1033	Add a cover to the command .
1034	Add TOC element
1035	Creates the PDF file .
1036	Ensure that the input is a URL or a file .
1037	Creates a GuzzleHttp \ Client instance .
1038	Create middleware stack
1039	Creates a PSR - 7 request .
1040	Sends a request asynchronously .
1041	Generates request options .
1042	Sends the given HTTP call context asynchronously .
1043	Throw ServiceException if response status code is not equal to expected
1044	Adds a POST parameter .
1045	Add metadata headers .
1046	Adds X - MS - CONTINUATION_LOCATION_MODE header to response .
1047	Validates entity properties .
1048	Returns the value of a property .
1049	Sets a property value .
1050	Sets a property .
1051	Adds a property to the model .
1052	Returns true if and only if the table is valid .
1053	Creates a new GetTableResult object from a string body .
1054	Computes the signature .
1055	Get the authorization header for the request .
1056	Compute canonicalized headers .
1057	Compute canonicalized resource for table .
1058	Compute the canonicalized resource .
1059	Serialize to xml string .
1060	Populates the properties with values from an XML array .
1061	Adds a signed identifier .
1062	Removes a signed identifier .
1063	Sets the list of operations .
1064	Adds an operation to the batch .
1065	Adds an entity to the batch insert operation .
1066	Add entity to batch delete .
1067	Creates CopyFileResult object from response headers .
1068	Creates a ListMessage from parsed response .
1069	Creates a QueueMessage object from parsed parsed response .
1070	Creates a QueueMessage object from parsed response .
1071	Initializes the class properties .
1072	Get development storage account .
1073	Gets the development storage account .
1074	Gets the service endpoint .
1075	Creates StorageServiceSettings object .
1076	Creates a StorageSettings object from a connection string .
1077	Creates a StorageServiceSettings object from a connection string .
1078	Encode a MIME multipart request .
1079	Decodes a MIME multipart string into an array .
1080	Creates ListSharesResult object from parsed response .
1081	Sets the list of shares .
1082	Tries to retry the request .
1083	Applies AND operator to two filters .
1084	Applies OR to the left and the right filters .
1085	Applies equality operator to two filters .
1086	Apply the ne operator to two filters .
1087	Applies the ge operator
1088	Creates a new filter using the greater than operator
1089	Creates a new filter using the lt operator .
1090	Applies the le operator to the left and the right filters
1091	Sets the location .
1092	Converts a serialized string into an array .
1093	Creates GetPeekMessagesResult object from parsed response .
1094	Creates a new GetEntityResult object .
1095	Create the operation contexts for the given operations .
1096	Get batch operation context .
1097	Creates request body parts for batch operations .
1098	Constructs DeleteEntityContext .
1099	Constructs put or merge entity request context .
1100	Constructs a request context for inserting an entity .
1101	Get entity path
1102	Put or Merge Entity asynchronously
1103	Adds optional query param .
1104	Encode an array of values for use in an OData Uri
1105	Queries tables .
1106	Create table .
1107	Creates a table in Cloud Storage asynchronously .
1108	Get table information .
1109	Gets a table asynchronously .
1110	Deletes a table .
1111	Deletes a table asynchronously .
1112	Queries entities in a table asynchronously .
1113	Insert a new entity or merge an existing entity
1114	Inserts or merges an entity into a table asynchronously .
1115	Inserts or replaces an existing entity in a table .
1116	Inserts or replaces an existing entity in a table asynchronously .
1117	Update an entity in a table .
1118	Updates an existing entity in a table asynchronously .
1119	Merge an entity into a table .
1120	Merge an entity into a table asynchronously .
1121	Deletes an entity .
1122	Deletes an entity in a table asynchronously .
1123	Get entity by partition key and row key .
1124	Gets an entity asynchronously .
1125	Sends multiple batch operations to the table .
1126	Creates a batch of table operations asynchronously .
1127	Creates ListDirectoriesAndFilesResult object from parsed response .
1128	Sets the directories .
1129	Sets the uploaded files .
1130	Creates Directory from parsed response body .
1131	Creates UpdateEntityResult object .
1132	Sets the query parameters .
1133	Sets the response status codes .
1134	Removes a header by its name .
1135	Adds an entry to the history .
1136	Append a new entry to the log file
1137	Creates a new QueryTablesResult object .
1138	Creates a ListMessagesResult object from parsed response
1139	Sets the queue messages .
1140	Initializes the connection string sources .
1141	Checks if a hostname is valid .
1142	Checks if a URI is valid .
1143	Checks if the specified method exists on the specified object instance .
1144	Checks if the given value is a valid date string .
1145	Checks if the given key exists in the given array .
1146	Returns the range string .
1147	List queues asynchronously .
1148	Clear all messages for a queue
1149	Creates a new message in the specified queue .
1150	Creates a queue message asynchronously .
1151	Creates a queue
1152	Creates a queue asynchronously .
1153	Deletes a message from a queue .
1154	Deletes a message in a queue asynchronously .
1155	Deletes a queue
1156	Deletes a queue asynchronously .
1157	Gets the metadata of a queue
1158	Gets queue metadata asynchronously .
1159	Lists all messages in a queue .
1160	Gets a list of messages in a queue asynchronously .
1161	Peek messages from the queue .
1162	Peeks messages in a queue asynchronously .
1163	Generates account shared access signature token .
1164	Validates and sanitizes a signed service string .
1165	Validates and sanitizes a signed resource type string .
1166	Validates and sanitizes the signed permissions .
1167	Sanitize the signed protocol .
1168	Sanitize string with array .
1169	Generates canonical resource path .
1170	Parses the error message from the response .
1171	Gets the request ID from the response .
1172	Gets the date of the response .
1173	Set the middlewares .
1174	Validates if given value is callable or IMiddleware .
1175	Parses a connection string .
1176	Creates a runtime exception .
1177	Extracts the next key from the connection string .
1178	Extracts a string from the current connection .
1179	Skips the operator character at the current position .
1180	Create a GetShareAclResult object .
1181	Adds additional headers to the request .
1182	Creates a setting requirement with predicate .
1183	Creates a setting with the given name .
1184	Matches a specification against a set of constraints
1185	Sets the next row key for this table .
1186	Sets the next partition key for this table .
1187	Process edm type .
1188	Validate a value against a given type .
1189	Serialize a value .
1190	Serialize a query value .
1191	Unserialize a query value .
1192	Creates ServiceProperties object from parsed response .
1193	Returns the cors rules as an array .
1194	Initialize the default sources .
1195	Parses table entries from the response body .
1196	Returns a JSON representation of the entity .
1197	Parses JSON body to Entities .
1198	Sets the start date .
1199	Validates permission .
1200	Creates a path for a file share .
1201	Gets properties of a share asynchronously .
1202	Set share properties asynchronously .
1203	List shares asynchronously .
1204	Creates a share .
1205	Create share asynchronously .
1206	Deletes a share .
1207	Gets the properties of a share .
1208	Set share properties .
1209	Set share properties asynchronously .
1210	Gets the metadata for a file share .
1211	Set share metadata .
1212	Set share metadata asynchronously
1213	Set share ACL
1214	Set share ACL asynchronously .
1215	Lists all directories and files under a given share .
1216	List directories and files asynchronously .
1217	Creates a directory on the server .
1218	Create directory asynchronously .
1219	Deletes a directory in a file share .
1220	Gets the properties of a directory .
1221	Gets properties of a directory .
1222	Get directory metadata .
1223	Set directory metadata
1224	Creates a file on the server .
1225	Create file asynchronously .
1226	Deletes a file from a file share .
1227	Deletes a file from a share .
1228	Gets a file from a share .
1229	Get file asynchronously .
1230	Gets the properties of a file .
1231	Gets file properties asynchronously .
1232	Set file properties .
1233	Set file properties asynchronously .
1234	Gets file metadata .
1235	Set file metadata
1236	Set file metadata asynchronously .
1237	Write content to a file in a given range .
1238	Uploads a file to a share asynchronously .
1239	Create file from content .
1240	Creates a file under the specified path with the specified content .
1241	Clear a file range in a file share .
1242	Clear a file range in a file share .
1243	List file range .
1244	Gets a list of files in a share asynchronously .
1245	Aborts a copy .
1246	Aborts a copy operation asynchronously .
1247	Sets batch operation type .
1248	Adds a parameter to the batch operation .
1249	Constructs an array of response objects from a MIME multipart response body .
1250	Compares two Resources using ContentId .
1251	Creates a batch result object .
1252	Get instance attributes .
1253	Serialize an array into an XML string .
1254	Creates a new GetParsedResponse object from parsed response .
1255	Gets service properties asynchronously .
1256	Set the service properties .
1257	Set service properties asynchronously .
1258	Gets service stats asynchronously .
1259	Creates ListQueuesResult object from parsed response .
1260	Sets the queues .
1261	Tries to get the secondary endpoint from the primary endpoint .
1262	Serialize an array into an XML string
1263	Convert a PHP boolean into a boolean .
1264	Converts a date in RFC1123 format to DateTime .
1265	Returns a date in ISO 8601 format .
1266	Converts a string to a DateTime object .
1267	Converts a base 256 number to decimal .
1268	Checks if a string contains all zero bytes .
1269	Append a delimiter to the end of a string .
1270	Checks if a request was sent to a secondary resource .
1271	Gets location mode from response headers .
1272	Calculate the MD5 hash of the given content .
1273	Validate resource type .
1274	Creates UpdateMessageResult object .
1275	Creates a new CouchbaseRetry object .
1276	Creates a retry decider for the given type .
1277	General retry decider
1278	Adds optional query parameter .
1279	Adds optional header .
1280	Creates a new GetFileResult object .
1281	Serialize headers into a string .
1282	Serialize a RequestException as a string .
1283	Creates CreateMessageResult object from parsed response .
1284	Creates InsertEntityResult object .
1285	Creates QueryEntitiesResult object .
1286	Format an array of headers .
1287	Creates File from parsed response body .
1288	Applies all registered middlewares to the given handler .
1289	Get available includes .
1290	Call the include method
1291	Resolve the requested includes for the given scope .
1292	Set the error code .
1293	Add data to the request .
1294	Set the error serializer .
1295	Get the error output .
1296	Create a new resource instance .
1297	Set cursor .
1298	Set the paginator for the resource .
1299	Add relation constraints to eager load .
1300	Set the relations to exclude from the query .
1301	Set the fields to be included in the query .
1302	Set the serializer .
1303	Get the transformed resource .
1304	Prepare the relations for eager loading .
1305	Eager load relations .
1306	Returns the pagination data .
1307	Transform a cursor into an array .
1308	Merge transformed data with included data
1309	Bind a transformable to a resource key .
1310	Resolve a transformable item .
1311	Resolve a transformable item .
1312	Resolve a transformer .
1313	Render the exception .
1314	Make an error array .
1315	Create an array from a resource .
1316	Parse filter options .
1317	Parse fieldsets .
1318	Parse a fieldset .
1319	Resolve child includes .
1320	Register error message .
1321	Resolve error message by error code .
1322	Clean an array of parameters .
1323	Bind a transformable to a transformer .
1324	Resolve a transformer from the given data .
1325	Resolve the transformer for the given transformable .
1326	Register the Laravel application bindings .
1327	Register Lumen bindings .
1328	Decorate the response factory .
1329	Register serializer bindings .
1330	Register error bindings .
1331	Register Fractal bindings .
1332	Register transformer bindings .
1333	Register transformation bindings .
1334	Boot the Laravel application .
1335	Set the data to be returned .
1336	Format an error response .
1337	Get the relations for the query .
1338	Get the default relations .
1339	Extract the relations from the given array .
1340	Extract the child relations from the given relations .
1341	Wrap the nested relations in a relation .
1342	Apply relation constraints to the query .
1343	Resolve query constraint .
1344	Resolve a relation .
1345	Get the transformers that are mapped to the given relations .
1346	Create a resource instance .
1347	Include a resource .
1348	Include a resource from a model .
1349	Determine if the given resource should be cached .
1350	Makes a resource instance .
1351	Makes a resource from a resource .
1352	Instatiate a resource .
1353	Determine if the given data should be created as a collection .
1354	Resolve resource key .
1355	Set the response factory decorator .
1356	Return the output as a JsonResponse .
1357	Normalize the given data .
1358	Normalize the given relation .
1359	Add a transformer to the response
1360	Convert the given exception .
1361	Convert the default exception .
1362	Render a response from an HttpException .
1363	Create a new transform builder instance .
1364	Configures the terminal .
1365	Adds items to the menu .
1366	Sets the list of items .
1367	Select first item .
1368	Add a custom control mapping .
1369	Removes a custom control mapping .
1370	Displays the terminal .
1371	Returns the currently selected item .
1372	Executes the current item .
1373	Redraws the terminal .
1374	Draws the menu .
1375	Draws a single menu item .
1376	Closes the menu .
1377	Sets the default selected item .
1378	Returns true if the item with the given index can be selected .
1379	Sets the selected item index .
1380	Returns the selected item .
1381	Wordwrap a string to a certain length
1382	Generate the coloursSetCode
1383	Calculates the content width .
1384	Returns the right hand padding .
1385	Sets the border of the table .
1386	Displays the menu .
1387	Calculates the position of the dialogue .
1388	Writes an empty row .
1389	Writes text to terminal .
1390	Sets the text of the art .
1391	Calculate art length .
1392	Displays the menu .
1393	Get a connection instance .
1394	Make a new connection instance .
1395	Get the configuration for the given connection .
1396	Compress the request body
1397	Checks if a specific option exists .
1398	Add arguments to the command line
1399	Set command line arguments
1400	Set the getopt options .
1401	Add rules to the query .
1402	Returns the options as a string .
1403	Returns the options as an array .
1404	Convert options to JSON
1405	Returns the options as XML string .
1406	Returns the value of the specified option .
1407	Get the usage message .
1408	Sets a map of flags to aliases .
1409	Sets help rules .
1410	Parse the command line arguments .
1411	Parse short option cluster
1412	Parse single option
1413	Add rules for GNU mode
1414	Add rules for Zend_Console_Getopt
1415	Get the OAuth header for the request
1416	Get the base string for the request
1417	Prepares the HTTP method .
1418	Set the nonce .
1419	Append OAuth parts to query parameters
1420	Returns the query as a string
1421	Create a http client based on the given name .
1422	Returns the location where the log should be written to .
1423	Log requests to the service request log file .
1424	Checks if an operation is allowed for an entity .
1425	Prepare reflection .
1426	Returns the WSDL s XML representation .
1427	Copy a file to the public directory
1428	Casts the value to a string if it is not empty .
1429	Read the configuration from a file
1430	Initializes the rules for the API Entity
1431	Populate Json Only Entities
1432	Initialize the OAuth settings from the IPP configuration .
1433	Initialize the request and response serialization and compression formats
1434	Get Base Url and Logger from XML Object
1435	Get entity by key
1436	Checks if a string is valid XML .
1437	Verify that the export strategy has been configured correctly .
1438	Load all webhooks classes and return their names
1439	Checks if the given class is a valid webhooks class .
1440	Returns the options for the request .
1441	Validate a URN
1442	Add a function to be executed
1443	Set the class to be registered
1444	Set the object
1445	Returns a list of all available functions .
1446	Sets the persistence mode
1447	Get the SoapServer instance .
1448	Handle a SOAP request
1449	Deregister a fault exception
1450	Return a SoapFault object
1451	Handles PHP errors .
1452	Get OAuth2 Access Token Object
1453	Returns the authorization code URL .
1454	Refresh the OAuth2 Access token
1455	Migrate OAuth1 to OAuth2
1456	Parse the response body and create a new OAuth2AccessToken object .
1457	Check if Empty Value Returned
1458	Generates the authorization header .
1459	Constructs the refresh token header .
1460	Check the result and throw an exception if any .
1461	Get a human - readable error message from an error code .
1462	Convert an object to a domain entity
1463	Serializes customer object
1464	Remove null properties
1465	Add a complex type to the WSDL
1466	Get the WSDL .
1467	Add the bindings to the WSDL
1468	Add the port type to the WSDL
1469	Add types to the WSDL
1470	Add binding operations to the WSDL
1471	Adds the port operations to the WSDL
1472	Check if the given type is a local type
1473	Add the service to the WSDL
1474	Get target namespace
1475	Get all namespaces
1476	Saves the classes to a directory .
1477	Load includes from a DOM document
1478	Get the XML representation of the XSD document
1479	Save generated classes to a directory .
1480	Converts an XML namespace to its PHP equivalent .
1481	Set the base URL .
1482	Returns the refresh token validation period in seconds .
1483	Get the validation period for OAuth 2 access token .
1484	Returns the refresh token .
1485	Returns the access token key .
1486	Update the access token and refresh token .
1487	get post xml from arbitrary entity
1488	Unmarshall XML into a PHP Object
1489	Parse the response from Intuit and return an array of PhpObjects
1490	Set Curl option
1491	Get version of TLS 1 . 2
1492	Handles an exception .
1493	Verify variable type
1494	Generate Object Names
1495	Complete a property
1496	Unmarshall an XML string into a binding object .
1497	Get serializer .
1498	Get the compressor for the current request or response .
1499	Get the request logging configuration .
1500	Connect type to strategy
1501	Get default strategy
1502	Get strategy of complex type
1503	Add complex type to composite strategy
1504	Make reflection for original class name
1505	Populate property comments .
1506	Forge an instance of a model .
1507	Process the values of a property .
1508	Creates a new instance of this class .
1509	Check if the given value is a mohing value .
1510	Process a property value .
1511	Returns the entity for the given index from the model .
1512	Update service context settings .
1513	Sets up the Rest Handler based on ServiceContext
1514	Set the log location
1515	Set the minor version of the service .
1516	Disables logging .
1517	Enable logging .
1518	Sets the client name .
1519	Construct a DataService object based on the passed settings .
1520	Configure OAuth2LoginHelper .
1521	Updates the OAuth2 token in the service context .
1522	Setup serializers .
1523	Update a company
1524	Adds an entity to the company .
1525	Delete an existing company .
1526	Upload a file to Ipp .
1527	Sends an email to a company
1528	Sends a query to Ipp . io .
1529	Append pagination info to the query .
1530	Find all entities .
1531	Method CDC .
1532	Execute the object serializer
1533	Initialize POST request
1534	Get the request parameters .
1535	Fixes the tax service payload .
1536	Get export file name for PDF
1537	Check if the entity is allowed for the given method
1538	Create a new batch
1539	Converts a date string to a timestamp
1540	Checks if a timestamp is a valid timestamp .
1541	Verify that input value is unix timestamp or date string
1542	Get Company Info
1543	Get the rules for the QuickBooks online API entity
1544	Get the access token from a settings array
1545	Get the refresh token from a settings array
1546	Get the redirect URL from settings .
1547	Save a file to a directory
1548	Generate a unique filename .
1549	Generate an error from an OAuth exception
1550	Parse the response from the intuit
1551	Is the error body in standard format?
1552	Set Response As ItIs
1553	Parse response to Intuit Response
1554	Set the fault handler .
1555	Set the response headers
1556	Sets the Content - Type .
1557	Set Intuit TID
1558	Gets the app menu for the account .
1559	Reconnects to the Core Service .
1560	Set the request URI
1561	Set the complex type strategy
1562	Adds an operation to a binding
1563	Adds a documentation to the given input node .
1564	Adds a types to the WSDL .
1565	Adds a type to the included types .
1566	Dump the XML to a file or to stdout .
1567	Adds the schema section to the WSDL .
1568	Configures the service context from the passed settings array .
1569	Check if OAuth settings are valid .
1570	Get the base URL for the service
1571	Set Ipp configuration to use xml .
1572	Set Ipp configuration to use JSON format
1573	Disables logging .
1574	Set Log Location
1575	Update the OAuth2 token in the IppConfiguration
1576	Get class properties
1577	Get the result of the query
1578	Sets the URI used to connect to the SOAP server
1579	Returns the URI of the request
1580	Returns the request URI without any parameters
1581	Set the complex type strategy
1582	Add a class to the WSDL
1583	Add a function to the WSDL
1584	Dump the contents of the WSDL to a file
1585	Updates the service context
1586	Sends a request to the Ipp API .
1587	Make an OAuth 1 API call
1588	Get OAuth1 Authorization header
1589	Make an OAuth2 API call
1590	Get the OAuth2 authorization header .
1591	Log an API response to the log .
1592	Log an API request to the log .
1593	Parse a string into a DOMDocument .
1594	Reset the compressor and serializer .
1595	Get the destination URL .
1596	Append the minor version number to the request URI .
1597	Check HTTP Method
1598	Parse a URL into an array of parameters .
1599	Returns the content type for the given value .
1600	Convert a query string to an array
1601	Verify PayLoad signature
1602	Encrypt payLoad based on token
1603	Get a batch response by id
1604	Removes a batch request by id
1605	Converts an array into a message and code .
1606	Iterate a fault and prepare an exception
1607	Returns the options as an associative array
1608	Set request style
1609	Set message encoding method
1610	Set the port of the proxy to connect to
1611	Set HTTPS client certificate path
1612	Sets the stream context resource
1613	Sets the User Agent
1614	Perform a SOAP request using the given client
1615	Initialize the SOAP client object
1616	Add a SoapInputHeader
1617	Get functions from WSDL
1618	Get types from WSDL
1619	Get the type name based on nesting level
1620	Adds an element to the WSDL .
1621	Prepare the WSDL .
1622	Add binding operations to the WSDL .
1623	Add a port operation to the WSDL
1624	Create a ref element
1625	Create a new element with complexType
1626	Create a simple element
1627	Resolve namespace from short name
1628	Parse doc comments
1629	Check if an array is associate
1630	Get Webhooks Event
1631	Verify the payload
1632	Check if the key is in the complex list .
1633	Get the ReflectionMethod for a given class and method name .
1634	Get the IPPReferenceType based on an array
1635	Get IPP id
1636	Merges two objects .
1637	Converts an array of headers to an array of headers
1638	Set the SSL options based on the TSL version
1639	Converts an associative array to an array of HTTP headers .
1640	Adds a warning to this sniff class .
1641	Resolve the configuration from the command input .
1642	Set tag name .
1643	Scope by tag name .
1644	Boot the taggable trait for the model .
1645	Tag the model with the given tags .
1646	Remove one or more tags from the model .
1647	Adds a tag to the model .
1648	Remove one tag from the model .
1649	Check if the model has a given tag .
1650	Scope a query to only include records with all of the given tags .
1651	Scope a query to only include records tagged .
1652	Scope a query to only include records with all of the given tags .
1653	Scope a query to only include records that are not tagged .
1654	Rename a tag .
1655	Get a list of popular tags .
1656	Get the fully qualified name of the related pivot key with an alias .
1657	Get the fully qualified foreign pivot key with an alias .
1658	Create a new alias for a taggable scope .
1659	Build a tag array from a string or array of tags .
1660	Get the tag model keys .
1661	Make a list of tags .
1662	Make a tag array from a model .
1663	Get all tags .
1664	Get all unused tags .
1665	Renames the tags of the model .
1666	Get the fully qualified tag table name .
1667	Get the fully qualified table name for the pivot table .
1668	Save compound parameter data
1669	Builds the URL with the given parameters .
1670	Get the single parameters payload .
1671	Get the compound parameters payload .
1672	Adds an index to a string
1673	Get debug response
1674	Get the endpoint .
1675	Sends a hit to the Google Analytics API
1676	Get the http client options .
1677	Get the prepare url .
1678	Check if there is a minimum required parameters .
1679	Set an action to a parameter
1680	Sets a single parameter for the given method .
1681	Add a parameter to the compound parameters collection .
1682	Returns the value of a single parameter .
1683	Get index from method arguments
1684	Get Full Parameter Class
1685	Performs a POST request and returns the response .
1686	Parse the request options .
1687	Returns a list of items that can be read .
1688	Add a supported brand .
1689	Sets the year parameter .
1690	Validate the credit card
1691	Returns a masked version of the number .
1692	Get the brand of the phone number .
1693	Get a single track by a regular expression
1694	Get first and last name from full name .
1695	Sets the billing first and last name .
1696	Set shipping first and last name .
1697	Get birthday .
1698	Sets the birthday .
1699	Initializes the request .
1700	Set a request parameter .
1701	Sets the card .
1702	Returns the amount .
1703	Sets the amount .
1704	Sets the currency .
1705	Returns the numeric representation of the currency .
1706	Returns the number of decimal places for the currency .
1707	Returns the formatted amount according to the currency .
1708	Replaces the collection with the given items .
1709	Validates the redirect .
1710	Converts a string to camelCase .
1711	Validate Luhn number
1712	Get gateway short name from class name .
1713	Gets the gateway class name from a short name .
1714	Returns the fixed query builder .
1715	Returns the parent metadata for the given property .
1716	Returns the pager for the given pager type .
1717	Returns the parent alias for the given alias .
1718	Adds an object to an IPP resource
1719	Finds a resource by ID
1720	Authenticates a user with a password
1721	Set the parent application ID of the customer .
1722	Set Credit Card Info
1723	Get Credit Card Info
1724	Adds an object to the sitemap .
1725	Finds an employee by ID .
1726	Sets the signature method and keyfile .
1727	This function handles the 500 errors and sends them to the user
1728	Logs a user login success
1729	Checks if a path is repeatable .
1730	Checks if a path exists .
1731	Reorders paths .
1732	Call a function
1733	Call static method
1734	Finds a customer by name
1735	Set the ApplicationID of a Class .
1736	Returns the bill address .
1737	Set the ship method application ID .
1738	Set the payment method application ID
1739	Generates the field schema .
1740	Get a child by path .
1741	Adds a child at a given path .
1742	Returns the children of this node optionally filtered by a pattern
1743	Removes an attribute from the element .
1744	Returns the XML representation of a node .
1745	Converts this object into an array .
1746	Helper function for asArrayPaths
1747	Returns the XML representation of the object .
1748	Save the root as JSON
1749	Truncate a string to a certain length
1750	Decodes a string from UTF - 8
1751	Parse a DSN string
1752	Extracts the request ID from an XML string .
1753	Parse the request ID into action and ident .
1754	Checks if a given CIDR matches a given remote address
1755	Authenticates a user using a DSN
1756	Disables a user
1757	Generate unique hash
1758	Checks if a book exists in the database
1759	Initializes a QuickBooks Driver
1760	Initializes a QuickBooks Driver
1761	Returns a list of defined objects
1762	Returns a list of defined actions
1763	Escapes a string for use in a query
1764	Generates the config . xml file
1765	Build the QBwc service .
1766	Add a new customer request
1767	Add a customer response
1768	This function is used to catch all the errors thrown by the server .
1769	Queues the processing of a user
1770	Enqueue an action for a user .
1771	Recurdequeues a user from the queue
1772	Queues a user to be left
1773	Queues a report for processing
1774	Queues a ticket for processing .
1775	Log an error .
1776	Get the last error message from the server
1777	Resolve an authentication ticket .
1778	Performs authentication check .
1779	Authenticates and logs out a user .
1780	Authenticates a user .
1781	Initializes the QuickBooks_Driver .
1782	Performs initialisation of the QuickBooks_Driver .
1783	Log a message
1784	Calls a specific hook
1785	Connects to an OAuth service .
1786	Returns the default configuration values .
1787	Dequeue recurring events .
1788	Extract the identifiers from the response .
1789	Extracts the status code from the response .
1790	Extracts the status message from an XML string .
1791	Call a mapped function
1792	Call a specific hook .
1793	Handles an error from the QuickBooks API .
1794	Enqueue an action to the queue
1795	Finds an item by name
1796	Checks whether a string starts with another string .
1797	Execute a query on the database
1798	Extract the contents of a tag from a string
1799	Extract a tag from a string
1800	Encode a string for QBXML
1801	Decode a string
1802	Check if user is logged in
1803	Load an access token from the server
1804	Handle the request
1805	Gets the widget menu
1806	Maps XML Schema to SQL Definition
1807	Transforms a schema node into an array of tables
1808	Sets a value in the object
1809	Get an item from the object
1810	Set a full name type
1811	Set a boolean type .
1812	Set date type
1813	Get date type
1814	Removes an item from the collection .
1815	Loads a schema object
1816	Returns the XML representation of the object
1817	Initialize the database .
1818	Adds a new participant object to the list .
1819	Gets the name of the user .
1820	Sets the name as first and last name .
1821	Returns the sql defaults for the given config .
1822	Returns the status of a connection .
1823	Delete a purchase order
1824	Read data from a file or a stream
1825	Loads an XML document from a file
1826	Parses the XML document .
1827	Returns the QBXML representation of this object .
1828	404 Not Found Error Handler
1829	Resolves a ticket from the database .
1830	Write a config value to the database
1831	Read a configuration value from the database
1832	Create a new user in the user table .
1833	Get the default username .
1834	Authenticates a user
1835	Check if the ticket is valid and if so update the touch_datetime field .
1836	Update the last error in the ticket table
1837	Enqueue a recursion .
1838	Dequeues a user from the queue
1839	Enqueue an action for a user
1840	Queues a task for processing
1841	Returns the number of users left in the queue
1842	Return the number of times the ticket has been processed .
1843	Log a message to the log table
1844	Execute a query and return the result
1845	Returns an array of all the fields of a table
1846	Select rows from a table
1847	Update a record in a table
1848	Enable or disable interactive mode .
1849	Enqueue a recurring cron task .
1850	Returns the number of items left in the queue .
1851	Returns the address part of the message .
1852	Authenticates an IPP .
1853	Finds a company by ID .
1854	Delete a vendor registration
1855	Makes a cURL request and returns the response .
1856	Signs on a QBMS application
1857	Generate a transaction request ID
1858	Refunds a credit card
1859	Initializes the queue
1860	Creates a new adapter instance
1861	Returns an array with default values .
1862	Send the request headers .
1863	Displays a list of logged in user .
1864	Creates a new request object
1865	Parses a raw http request and returns the response .
1866	Apply a callback to each item in the collection
1867	Captures a charge .
1868	Gets a charge
1869	Gets a Debit Transaction
1870	Refund a Payment .
1871	Stores a credit card
1872	Stores a credit card from a token
1873	Gets a credit card
1874	Gets a list of credit cards by ID .
1875	Deletes a credit card
1876	Handles an API error .
1877	Creates an HTTP request .
1878	Maps a book ID to a list of books
1879	Maps a user ID to an application ID .
1880	Performs an add action request .
1881	Filters a list of actions by priority .
1882	Check if the required version is greater than the current version .
1883	Creates a ListDeletedQueryRequest .
1884	Parses the ListDeletedQueryResponse and converts it into a ListDeletedQueryResponse object .
1885	Performs a Transaction void request .
1886	Performs a void transaction .
1887	Creates a SalesReceipt modification request .
1888	Adds a job type request .
1889	Builds the SQL filter
1890	Flushes all caches in a group .
1891	Flushes cache by tags and groups .
1892	Finds a command by name .
1893	Load the configuration from the composer . json file
1894	Checks if an extension can be loaded .
1895	Checks if an extension can be loaded .
1896	Loads the local configuration for an extension
1897	Loads the ext_tables . php for an extension
1898	Ensure that the installation is possible
1899	Executes all scheduled tasks .
1900	Executes a single task
1901	Migrate a set of statements into the database .
1902	Lock backend for editing
1903	Unlock backend for editors
1904	Create a new admin user
1905	Returns a list of available upgrade wizards .
1906	Generate package states . php file
1907	Fix the folder structure
1908	Setup extension if possible
1909	Executes an action with the given arguments
1910	Create a new ConsolePlugin instance from command line arguments .
1911	Create a command runner from command line arguments
1912	Creates a new console sub process .
1913	Executes a sub - command .
1914	Handles an exception .
1915	Create a new upgrade wizard .
1916	Word - wrap a string .
1917	Make a request to the specified URL
1918	Makes the given URL absolute .
1919	Check extension constraints
1920	List the upgrade wizards
1921	Execute a wizard
1922	Upgrade all the TYPO3 versions
1923	Sub process upgrade command .
1924	Check if the given extension is compatible with the current version .
1925	Installs the required extensions .
1926	Get the package structure .
1927	Get extension structure .
1928	Creates the extension structure for the given packages .
1929	Generates the XML for the given class .
1930	Add attributes to the xsd element .
1931	Adds a documentation element to the xsd parent node .
1932	Resolves the controller command method name .
1933	Maps request arguments to controller arguments .
1934	Call a command method .
1935	Creates a default logger instance .
1936	Returns the short description of the command .
1937	Parses the command definition .
1938	Returns the synopsis .
1939	Removes a step from the sequence .
1940	Invokes the start steps .
1941	Invokes a single step .
1942	Setup a list of extensions
1943	Setup all active packages .
1944	Remove inactive packages
1945	List all installed and inactive extensions
1946	Forces the cache tables to be flushed .
1947	Handles PHP errors .
1948	Register the installer scripts .
1949	Ask the user for a value from a list of choices .
1950	Asks a question .
1951	Asks a confirmation .
1952	Asks a response that is hidden by default .
1953	Asks and validates a question .
1954	Asks a response with a hidden validator and validates it .
1955	Describes the application .
1956	Write a log record to the output .
1957	Get the number of performed update types .
1958	Add a list of performed updates for a given schema update type .
1959	Add errors for a given update type .
1960	Remove one or more paths
1961	Show the configuration for a given path
1962	Show the active configuration for a path
1963	Show a local configuration
1964	Set a value for a path
1965	After installing an extension
1966	Adds a flash message to the queue .
1967	Copy the source file into the target path .
1968	Generate the XSD schema for a PHP namespace
1969	Initializes the package management .
1970	Override an existing implementation .
1971	Registers an implementation of a class .
1972	Sets a local configuration value .
1973	Converts a value to the given target type .
1974	Get the type of a path .
1975	Checks if the given type is convertible .
1976	Checks if the given command is available .
1977	Configures the command .
1978	Executes the command .
1979	Ensure required environment .
1980	Initializes the typo3 console compatibility layer .
1981	Handles the console command .
1982	Renders an exception .
1983	Output an exception .
1984	Output the exception trace .
1985	Returns the possible shortened file name .
1986	Display an error message
1987	Import a MySQL database .
1988	Executes a command in a sub process .
1989	Output schema update result
1990	Render imported static data result .
1991	Executes an array of schema update statements .
1992	Builds a sequence based on the run level .
1993	Builds the essential sequence .
1994	Build basic runtime sequence .
1995	Flush all caches for a group
1996	Flush all caches by tags
1997	List cache groups
1998	Hydrates the dictionary .
1999	Adds the trace to the collector .
2000	Retrieve the number of files matching the given regex .
2001	Convert data to JSON .
2002	Get the transaction description .
2003	Returns the access token .
2004	Check if token has expired
2005	Sets the start time .
2006	Sets the end time .
2007	Get all issues for a specific type .
2008	Runs the application and returns the exit code .
2009	Normalize and truncate a path
2010	Exit with error message
2011	Divides a list of tokens by commas .
2012	Trims whitespace from all tokens .
2013	Call a function usage checker .
2014	Adds a record to the collection .
2015	Check if colors are capable .
2016	get windows terminal size
2017	Tries to locate the class or function for the given identifier .
2018	Tries to locate a class by name .
2019	Locates a function by name .
2020	Opens the autoload file .
2021	Returns information about a file .
2022	Compiles a const fetch node into a PHP value .
2023	Compiles a ClassConstFetch node into PHP
2024	Compute the reflections for the given file .
2025	Checks if the given line number is contained in the given reflection .
2026	Returns all class identifiers .
2027	Create a new reflection object from class name and property name .
2028	Create a new reflection property from an instance .
2029	Returns the string representations of the docblock types .
2030	Find all reflections of the given type .
2031	Finds an identifier in an array of reflections .
2032	Create parameter from class name and method name .
2033	Create from class instance and method name .
2034	Create a ReflectionParameter from a closure .
2035	Checks whether the property allows a null value .
2036	Gets the type of the parameter .
2037	Sets the type of the parameter .
2038	Get all functions .
2039	Create a method from class name and method name .
2040	Create a reflection method from an instance .
2041	Returns the prototype of the method
2042	Checks if the method is a constructor .
2043	Exports a class to a string .
2044	Creates a new instance from a class node .
2045	Returns the methods of the class .
2046	Returns all methods indexed by name .
2047	Checks if the class has a method with the given name .
2048	Returns the value of a constant .
2049	Get the first constructor .
2050	Get the properties of this class including traits and ancestors .
2051	Gets the parent class of the class .
2052	Returns the parent class names of this class .
2053	Returns the traits imported in the file .
2054	Reflect a class for a named node
2055	Checks if the given object is an instance of this class .
2056	Checks if this class is a subclass of the given class name .
2057	Checks if the class implements the given interface .
2058	Returns true if the class is instantiable .
2059	Returns true if the object is instantiable and has a __clone method
2060	Get the interfaces hierarchy .
2061	Sets the value of a static property .
2062	Set the final modifier of the class .
2063	Removes a method from the class .
2064	Adds a method to the class .
2065	Adds a property to the class .
2066	Removes a property .
2067	Checks if the identifier matches the given reflector .
2068	Exports an instance to a string .
2069	Create a ReflectionClass from an object
2070	Gets the runtime properties of the object .
2071	Create a property node from reflection .
2072	Populates the abstract properties of a function .
2073	Sets the node optional flag .
2074	Returns the number of required parameters .
2075	Returns the parameters of the function .
2076	Returns the parameter with the given name .
2077	Returns true if the function has variadic parameters .
2078	Sets the return type of the function .
2079	Returns the body code as a string .
2080	Returns the return statements AST .
2081	Locates the identifiers for the given reflector and identifier type .
2082	Create a new reference from a node .
2083	Returns the constant value .
2084	Gets the visibility of the property .
2085	Generates the documentation for a class .
2086	Formats the doc block .
2087	Extract all properties from all graphs .
2088	Extract the cardinality for a property .
2089	Is enum type
2090	Create a map of properties .
2091	Converts a namespace to the output directory .
2092	Fixes Cs files .
2093	Checks if a property exists in the ontology .
2094	Extracts the cardinality of a label .
2095	Returns the property URL .
2096	Returns the PHP type of a field .
2097	Get relation name .
2098	Finishes writing a file .
2099	Flushes the current writer to the backend .
2100	Adds a new item to the cache .
2101	Add a single language item .
2102	Add a multi language item to the XML document .
2103	Returns the sitemap URLs .
2104	Set whether or not to use gzipping .
2105	Adds a sitemap .
2106	Writes data to the file .
2107	Finishes the current deflate process .
2108	Finishes the compression process .
2109	Sets the expiration date .
2110	Set key parameters
2111	Set the sub - key parameters .
2112	Returns a string representation of the key usage .
2113	Get User Id
2114	Parses a string into a UserId object .
2115	Checks if the process is still running .
2116	Terminate the process .
2117	Sets the operation to be executed
2118	Handles OpenPGP errors .
2119	Set the error code
2120	Set the value of a data variable .
2121	Throw a bad pass exception .
2122	Get passphrase from key id
2123	Returns the hash algorithm name .
2124	Sets whether or not the certificate can be signed .
2125	Sets whether encryption can be performed .
2126	Parse a sub key .
2127	Parses a date string into a timestamp .
2128	Delete a public key
2129	Get the fingerprint of a key .
2130	Encrypts data .
2131	Encrypt a file
2132	Encrypt and sign a string
2133	Encrypt and sign a file
2134	Decrypts and verifies data .
2135	Decrypt and verify a file
2136	Sign a file
2137	Add a key to be decrypted .
2138	Add an encrypt key .
2139	Add a sign key .
2140	Adds a key to the array .
2141	Import a secret key
2142	Export a key
2143	Decrypt and verify the given data .
2144	Prepares the input data .
2145	Prepare the output file to be written .
2146	Returns a list of public and secret keys .
2147	Sends a command to the pipeline .
2148	Reset the process to its initial state .
2149	Run the GPG engine .
2150	Sets the operation to be executed .
2151	Set pinentry user data
2152	Get the version of GnuPG .
2153	Returns the data of a process .
2154	Set process data
2155	Closes the subprocess .
2156	Closes the GPG - Agent LAUNCH PROCESS .
2157	Closes a pipe .
2158	Close idle agent processes .
2159	Find a binary by name .
2160	Get the path to the crypt - gpio - pinentry
2161	Print debug info
2162	Returns the primary key of the table
2163	Returns whether or not this key can be signed .
2164	Returns whether or not this key can be encrypted .
2165	Sets the log filename .
2166	Write data to log file .
2167	Connect to the pinentry server
2168	Parses a command line and sends it to the client .
2169	Initializes the passphrases from the ENV
2170	Disconnects from the server .
2171	Send description message
2172	Get the current pin
2173	Send info command
2174	Get encoded data .
2175	Get word wrapped data .
2176	Send data to the console .
2177	Builds an array of messages from the given translations .
2178	Sets the comment before headers .
2179	Adds a set of lines to the given array .
2180	Get the main file data .
2181	Extract the strings from the main file
2182	Get the file comment .
2183	Set default headers .
2184	Get data from a file .
2185	Get file data from a string .
2186	Resolve call expression .
2187	Checks if a comment precedes a node .
2188	Calculate the score of a file based on a list of matchers .
2189	Checks if the given directory contains any of the given matchers .
2190	Get files from a directory .
2191	Converts a po file to a json file .
2192	Build JSON files .
2193	Removes all JS strings from a PO file .
2194	Marks a set of updates as successful .
2195	Mark all updates as successful .
2196	Sets the successful_by_hook status for multiple keys .
2197	Check list points .
2198	Check all list points .
2199	Save progress .
2200	Renders the profile .
2201	Generates a config hash from the database .
2202	Compares a config name with a hash .
2203	Imports a module configuration .
2204	Import configs .
2205	Installs a list of modules
2206	Check link .
2207	Check if link is active .
2208	Redirects to the front page with a message .
2209	Get file .
2210	Get items from data
2211	Get total count from data
2212	Prepare string for like comparison
2213	Set the data .
2214	Resolve type .
2215	Resolve options for a grid type .
2216	Renders a grid .
2217	Get a grid cell .
2218	Get the filter for a grid .
2219	Get grid column operator .
2220	Checks if the given block exists in all templates .
2221	Walks down a SelectStatement AST node wrapping it in a path expression .
2222	Set the source .
2223	Check if request is ready for redirect
2224	Process request data
2225	Process mass actions
2226	Process export data
2227	Process the filters .
2228	Process session data
2229	Prepares the query for execution .
2230	Sets a session data .
2231	Returns a column by its ID .
2232	Returns true if the table has the given column .
2233	Set the order of columns .
2234	Adds a mass action
2235	Add a tweak .
2236	Get all tweaks .
2237	Get a single tweak by ID .
2238	Get all the tweaks for a given group .
2239	Add a row action
2240	Set request query template
2241	Adds an export
2242	Get route url
2243	Set the filters .
2244	Sets the limits .
2245	Returns the number of pages .
2246	Sets the maximum number of results per query .
2247	Check if the title section is visible .
2248	Check if filter section is visible
2249	Checks if the pager section is visible .
2250	Set the columns to be shown .
2251	Hide columns .
2252	Get grid response .
2253	Returns the raw data of the table .
2254	Get all filters from the session
2255	Gets a filter from the session
2256	Checks whether or not a column has a filter .
2257	Initializes the query builder .
2258	Render cell .
2259	Returns whether or not the entity is visible .
2260	Sets the order .
2261	Set column size
2262	Sets the query data .
2263	Get the data for the filter .
2264	Set the alignment .
2265	Get the operators to be applied to the query .
2266	Add a column to the table .
2267	Sets the order of columns .
2268	Add route parameters
2269	Get route parameters mapping .
2270	Renders the row .
2271	Add a type .
2272	Adds a column to the schema .
2273	Sets the container .
2274	Get the response .
2275	Get grid data .
2276	Get grid data as a flat array
2277	Set the template to use
2278	Returns a parameter by name .
2279	Returns the list of actions that should be rendered .
2280	Clear all items .
2281	Adds an item to the cart .
2282	Removes an item from the collection
2283	Get all items .
2284	Login to OpenId .
2285	Get user information
2286	Gets and Sets the rememberUser property
2287	Login callback .
2288	Get the length of a string
2289	Returns a portion of a string .
2290	Converts a string to lower case .
2291	Converts a string to upper case .
2292	Create a function mock
2293	Register for tear down .
2294	Define function mock .
2295	Show flag view .
2296	Get the country code .
2297	Returns the current language code .
2298	Get the long code for the given short .
2299	Get locale name by code .
2300	Set the current locale .
2301	Redirect to the home page .
2302	Redirect to the previous page .
2303	Set the application locale .
2304	Returns the index of the first element that passes the truth test .
2305	Removes the element at the given index .
2306	Returns the elements of this sequence that pass the truth test .
2307	Set the auth login
2308	Set OAuth token
2309	Send a message .
2310	Connect to the SMTP server .
2311	Starts a TLS connection
2312	Authenticates the user using AUTH LOGIN
2313	Authenticates the OAuth Bearer token .
2314	Authenticates the X - OAuth2 token .
2315	RCPT TO .
2316	Send the DATA command
2317	Send QUIT command
2318	Get the SMTP response code
2319	Sets the from address .
2320	Set fake from name and email .
2321	Finds a file by class name .
2322	Finds a file by class name .
2323	Loads a collection of classes .
2324	Fixes the namespace declaration .
2325	Write cache file .
2326	Returns a list of classes ordered by priority .
2327	Add multiple prefixes at once .
2328	Adds a set of paths for a given prefix .
2329	Find a file by class name
2330	Parses the given text and returns the markup .
2331	Detects the line type .
2332	Parses a single block .
2333	Returns an array of inline markers .
2334	Prepare the inline markers .
2335	Parses inline markers .
2336	Parse emph strong .
2337	Identify if a line is an HTML tag .
2338	Consumes HTML from lines .
2339	Identify fenced code
2340	Identify if the current line is a headline .
2341	Consume a headline .
2342	Replaces the escape characters in the given text .
2343	Parse a link .
2344	Parse an image .
2345	Parse inline code .
2346	Consumes the code from the given lines .
2347	Identifies whether a line is a UL .
2348	Renders a list block
2349	Consume a quote block .
2350	Consumes lines for references .
2351	Renders a single headline
2352	Parse strike .
2353	Identify if the current line is a table .
2354	Consume lines for a table .
2355	Render a table
2356	Parse a link .
2357	Checks whether the subject is equal to the given name id and format .
2358	Creates a new element in the given document .
2359	Create a new element with text .
2360	Validates an array of images .
2361	Check for empty value
2362	Checks for illegal csv property keys .
2363	Create a new exporter instance .
2364	Adds a value to the property .
2365	Validates the document against the XSD .
2366	Adds a name to the group .
2367	Adds a summary .
2368	Adds a description .
2369	Adds a price to the cart .
2370	Add bonus .
2371	Add sales frequency .
2372	Adds a date added to the event .
2373	Add sort .
2374	Validates the given value .
2375	Returns the contents of a hook .
2376	Sets a symlink to a hook .
2377	Set a hook .
2378	Removes a hook .
2379	Returns the number of commits in the repository .
2380	Returns the reference bag .
2381	Returns the commit with the specified hash .
2382	Returns the tree with the specified hash .
2383	Returns a blob by its hash .
2384	Get a log object .
2385	Returns the repository size in bytes .
2386	Executes a git shell command .
2387	Returns the description of the repository .
2388	Runs a command and returns its output .
2389	Clone the repository to the given path .
2390	Returns the parents of this commit .
2391	Get subject short message
2392	Returns a list of all branches in this repository including their references .
2393	Initializes a new repository .
2394	Check if a repository is valid .
2395	Clone a repository to a local path .
2396	Clone a branch to a local repository .
2397	Clones a repository .
2398	Returns the lines grouped by commit .
2399	Returns the lines of the file .
2400	Returns a reference by name .
2401	Returns an array of Branch references .
2402	Get all local branches .
2403	Returns the remote branches .
2404	Returns the content of the file .
2405	Returns the MIME type of the file .
2406	Return an array representation of this diff .
2407	Parses the given text and adds the fragments .
2408	Write a query as a formatted string .
2409	Write a column name .
2410	Create columns from an array of arguments
2411	Creates a new Column object from the given arguments .
2412	Creates a new table instance from a string or array .
2413	Get the SQL representation of the object .
2414	Boot the Eloquent trait for caching .
2415	Stores the cache key for a model
2416	Get cache keys .
2417	Flushes the cache keys for a model
2418	Forget all cache entries .
2419	Reset the cache configuration .
2420	Generate the cache key .
2421	Cache a query .
2422	Validate an HppRequest object
2423	Validate a response object
2424	Add auto settle flag .
2425	Add returnTss flag
2426	Add validateCardOnly flag
2427	Add DCC Enable flag
2428	Add Card Storage Enable flag
2429	Add offer save card flag .
2430	Add payerExists .
2431	Add HPP version .
2432	Generate default values .
2433	Base64 encode the transaction
2434	Decode the transaction data .
2435	Base64 encode the transaction
2436	Decode the transaction data .
2437	Get field config rules .
2438	Unpacks deferred results into an array .
2439	Resolve a field s value using a callback .
2440	Convert a cursor to a key .
2441	Returns the offset for the given cursor or the given default if the cursor is not found .
2442	List node compiler .
2443	Creates JSON - RPC request data .
2444	Get all sentences .
2445	Splits a text into sentences .
2446	Detects the language of the given text
2447	Returns the available language codes .
2448	Returns the default values for this field .
2449	Cache a row .
2450	Gets a row from the cache .
2451	Returns whether or not the given offset exists .
2452	Get row at given offset .
2453	Set the row at the given offset .
2454	Unset an item by ID .
2455	Returns the foreign key field for the given table .
2456	Delete the record from the database .
2457	Returns the class name for the given name and type .
2458	Sets a configuration value .
2459	Returns the field factory .
2460	Executes a query and returns the statement .
2461	Executes a callable in a transaction .
2462	Begin a transaction .
2463	Check if data is valid .
2464	Check if a value is set .
2465	Edit an array of values .
2466	Deletes the record from the database .
2467	Relate rows to this row .
2468	Unrelate a row from this row .
2469	Unrelate the current model from the given tables .
2470	Returns a select statement for the given table .
2471	Get value name .
2472	Limits for the specified cluster .
2473	Optional . The rules associated with the metric .
2474	Optional . The destination of the producer .
2475	Optional . The destinations of the logging consumer .
2476	List of advices .
2477	The endpoints that match the request .
2478	List of log descriptors .
2479	The metrics that match the request .
2480	A list of field violations .
2481	The long - running operations .
2482	The view of the role .
2483	Optional . The permissions to be included in the request .
2484	Optional . The status of the launch stage .
2485	Optional . The list of available consumer destinations .
2486	Optional . The list of extensions that match the request .
2487	Optional . The list of authentication providers .
2488	Optional . The list of requests that match the request .
2489	Optional . The names of the provided services .
2490	The maximum number of points that match the request .
2491	Required . The role to create .
2492	List of subpages .
2493	The list of service account keys that match the request .
2494	Optional . The recipients of the message .
2495	List of stack entries .
2496	Optional . The MonitoringDestination to create .
2497	A list of consumer destinations .
2498	Optional . The authorization requirements .
2499	A list of all bindings .
2500	A map from metric_name to metric_cost .
2501	The pages that match the request .
2502	The action of the delta .
2503	The source files to scan .
2504	A list of service account keys .
2505	The list of accounts that match the request .
2506	The level of support for custom roles .
2507	The difference between the current policy and the target policy .
2508	List of exemplars .
2509	Optional . The list of features that match the request .
2510	The list of properties that match the request .
2511	The quota failures .
2512	Optional . The private key type of the service account .
2513	Optional . The service account key algorithm to use .
2514	Optional . The details of the operation .
2515	The list of binding deltas .
2516	Optional . The service account public key type .
2517	Optional . The roles associated with the user .
2518	Optional . The system s parameters .
2519	Get the full path to the cache file
2520	Check cache conditions
2521	Checks if a cache file exists
2522	Sets a file in the cache .
2523	Get the contents of a cached file
2524	Get or create cache file
2525	Checks if WordPress is installed .
2526	Installs WordPress .
2527	Converts a network to a multisite .
2528	Installs a single multisite network .
2529	Displays the version of WP - CLI .
2530	Get Core Checksums .
2531	Updates the database .
2532	Get the URL for a wordpress download .
2533	Get the list of available updates .
2534	Downloads a package .
2535	Upgrades the current script to the new version .
2536	Builds a table from an associative array
2537	Admin head .
2538	Move meta box after title .
2539	Get the post type .
2540	Get the title of the box .
2541	Render the meta box .
2542	Setup the meta box .
2543	Get meta .
2544	Setup the file path and class name .
2545	Setup meta data .
2546	Check if this meta is disabled .
2547	Factory method to create a new property .
2548	Get a single child property .
2549	Get an option value .
2550	Get the post ID .
2551	Returns the HTML ID for this field
2552	Get the HTML name for a property .
2553	Check if the given slug matches this plugin s slug .
2554	Prepare the value for output .
2555	Render is allowed by rules .
2556	Set a single option .
2557	Set a single setting .
2558	Setup settings properties .
2559	Setup options .
2560	Setup options slug .
2561	Setup options settings .
2562	Add attachments to the edit form .
2563	Save attachment meta
2564	Check if the entry type is a singleton .
2565	Get property meta value
2566	Format a property value
2567	Get a single property .
2568	Load a value from the database .
2569	Create a page object from a post ID
2570	Get a property s option .
2571	Checks if the plugin can be rendered .
2572	Renders the row .
2573	Render the hidden HTML for the property .
2574	Render the label HTML .
2575	Render the table row HTML .
2576	Render the rules as JSON .
2577	Get the field value .
2578	Decode a property .
2579	Get post data .
2580	Get pre deep keys and value .
2581	Prepare post data .
2582	Prepare properties data .
2583	Santize data .
2584	Delete an item from the cache .
2585	Returns a function that can be used to get the value of this field .
2586	Get value by id and slug .
2587	Update an entry in the cache
2588	Clear the cache for the given id .
2589	Get revision ui diff .
2590	Add hidden meta box
2591	Load a new post
2592	Redirects the user to a new location .
2593	Setup plugin .
2594	Renames a post meta .
2595	Get field slug .
2596	Get the model s source .
2597	Setup source .
2598	Setup the object with the given rule .
2599	Initialize the admin interface .
2600	Add admin body classes .
2601	Add page type field to edit form .
2602	Get the entry type
2603	Add plugin meta links .
2604	Update front - page .
2605	Add the page type and post type to the results .
2606	Get all templates for a given meta id .
2607	Prepare the value for the property .
2608	Save meta data .
2609	Get metabox .
2610	Save a post
2611	Overwrite post data .
2612	Pre save hook .
2613	Save meta boxes .
2614	Save meta data for a specific revision .
2615	Save the post s properties .
2616	Restore the post revision data .
2617	Check if the post ID is valid .
2618	Display the given rules .
2619	Display conditional rules by relation .
2620	Get the slug for a rule
2621	Prepare conditional rules .
2622	Checks if the current user is allowed to access this post type .
2623	Get the body classes .
2624	Get the child types of this page .
2625	Get labels .
2626	Get the post type supports .
2627	Remove post type support .
2628	Remove custom meta boxes .
2629	Setup plugin .
2630	Setup post types .
2631	Setup page templates .
2632	Add MCE buttons filters .
2633	Reove mce buttons filter .
2634	Get the row results .
2635	Load the repeater value .
2636	Prepare the properties .
2637	Prepare a property for JSON
2638	Remove repeater rows from a post .
2639	Render the JSON template .
2640	Render the header of the repeater table .
2641	Render therepeater rows .
2642	Register all option types
2643	Get a setting value .
2644	Prepare the response .
2645	Gets the value of this field .
2646	Get a list of all users that have the required capabilities .
2647	Initialize the application .
2648	Load the papi text domain .
2649	Require PHP files .
2650	Deactivate Papi plugin .
2651	Returns true if all items are strings
2652	Prepare the render properties .
2653	Get the attachment ID .
2654	Get the file value .
2655	Update the file value .
2656	Bind a value to an identifier .
2657	Call a closure and return the result .
2658	Get the class prefix .
2659	Returns true if the given identifier is a singleton .
2660	Create a new instance only if it doesn t already exist .
2661	Removes an item from the cache .
2662	Override the labels of an entry type .
2663	Add page items menu .
2664	Create the post types menu .
2665	Render the page view
2666	Autoloads a class
2667	Get all registered sidebars .
2668	Get the post type labels .
2669	Parse post and term arguments .
2670	Parse the post type arguments .
2671	Parse term arguments .
2672	Get the query args .
2673	Execute the query and return the result .
2674	Add help tabs to the current screen .
2675	Add a box to the collection
2676	Call the parent register method if it exists
2677	Converts an array of properties to an array of properties .
2678	Get the body classes .
2679	Get all boxes .
2680	Get a specific property .
2681	Get the list of all properties .
2682	Merges the given boxes into a single array .
2683	Setup plugin .
2684	Generates a tab .
2685	Load a value from the database .
2686	Prepare a link array .
2687	Update the value of a field .
2688	Checks if the current user is allowed to access this taxonomy .
2689	Render the edit form .
2690	Get a WP_Post object .
2691	Prepare the response .
2692	Setup the page type fields .
2693	Get the format arguments for the given association .
2694	Render a file .
2695	Get an option by key .
2696	Convert property value
2697	Get the converted value .
2698	Get the deep value of a field .
2699	Get the value for the rule .
2700	Checks if a rule is equal to the current value .
2701	Checks if the given rule is not equal to the current value .
2702	Checks if the value of the rule is greater than the value of the rule
2703	Checks if a value is not in a rule
2704	Checks if the value of the property matches the given rule .
2705	Get between values
2706	Is a rule between two values?
2707	Return true if the value of the rule is not between the two values .
2708	Get the sort option .
2709	Get the sort options .
2710	Get a list of posts .
2711	Sort the values based on the sort option .
2712	Update a post s value .
2713	Get the meta type value .
2714	Lists all Papi entry types .
2715	Renders the tabs .
2716	Get the json id .
2717	Get a specific layout .
2718	Load the value for a repeater .
2719	Prepare the layout properties .
2720	Render the input field for the layout .
2721	Render the repeater row .
2722	Add taxonomy types to the form .
2723	Prepare a list of taxonomy types .
2724	Setup taxonomies hooks .
2725	Get the ajax url .
2726	Handles AJAX requests to PAPI .
2727	Get entry type .
2728	Get posts .
2729	Get property .
2730	Get the properties from the post .
2731	Get rules result .
2732	Get shortcode .
2733	Get taxonomy terms .
2734	Gets a term s properties .
2735	Renames a term .
2736	Manage page type posts columns .
2737	Manage page type posts custom column .
2738	Add the entry_type column if the page type is sortable .
2739	Pre - get posts .
2740	Restrict page types .
2741	Format the value .
2742	Get the taxonomy labels .
2743	Get the taxonomy terms .
2744	Get the value of a term .
2745	Prepare the value to be inserted into the form .
2746	Perform a search on the yahoo API .
2747	Get historical data .
2748	Returns the quote with the given symbol
2749	Returns the exchange rate between two currencies .
2750	Returns the exchange rates for the given currency pairs .
2751	Fetches the quotes for a set of symbols .
2752	Get the attributes for the header .
2753	Renders the cell .
2754	Renders the appends .
2755	Get all images .
2756	Adds additional parameters to the query .
2757	Set default values for all items
2758	Returns the value of the given parameter .
2759	Make a form group .
2760	Wrap the content with the error template .
2761	Wraps a form group in a div .
2762	Adds a class to the options .
2763	Register the admin routes .
2764	Register assets routes .
2765	Register Auth routes .
2766	Adds a process to the graph .
2767	Returns the processes with the given status .
2768	Builds the testcase tree .
2769	Optimize the tree according to the given strategy .
2770	Count the number of running processes .
2771	Counts the number of results .
2772	Fail all processes that depend on the given class .
2773	Get the dependency tree for the given class .
2774	Output the given output .
2775	Output an error message .
2776	Initializes the application .
2777	Returns the version of the application .
2778	Returns the file URL .
2779	Downloads the file and saves it to the filesystem .
2780	Selects the first select2 result with the given partial text .
2781	Save data to a file with a legacy name .
2782	Save data to the database .
2783	Loads a model from the database .
2784	Loads a Legacy instance with the given name .
2785	Checks if the selenium server is accessible .
2786	Checks if selenium server is running .
2787	Returns the Selenium Cloud service .
2788	Guesses the port based on the host and scheme .
2789	Detect Cloud Service by status .
2790	Builds the PHPUnit process .
2791	Get excluding groups from annotations .
2792	Take a snapshot of the current page
2793	Get the path to the snapshot file .
2794	Instantiates event listeners .
2795	Get log file path
2796	Quote an attribute to be used in an XPath query
2797	Calculate the max distance map of all sub trees .
2798	Casts the given value to the guessed data type .
2799	Checks the timeout of the process .
2800	Resolves the result of the process .
2801	Get list of executors .
2802	Setup CI capabilities .
2803	Sets custom configuration options .
2804	Retrieve configuration values .
2805	Dequeues testcase processes without delay .
2806	Flushes the output of a process .
2807	Get all favorites for a given class .
2808	Counts the total number of tests in a file .
2809	Update summary table
2810	Move the summary table to the target file
2811	Update step container buttons
2812	Add a user as favorite .
2813	Remove user s favorites .
2814	Toggle a user s favorite status .
2815	Check if a user has favorited this model .
2816	Get all users who are favorited by the current user .
2817	Get all the permissions that the user has access to .
2818	Insert model to language files .
2819	Create header button view files .
2820	Create migration .
2821	Create events .
2822	Generate a file .
2823	Get stub path .
2824	Check namespace .
2825	Check if table exists
2826	Connect to a random redis server
2827	on all servers
2828	on one server
2829	On one key server
2830	Call a redis command
2831	Set the current db
2832	Delete a set of keys
2833	Add a value to the cache .
2834	Check if a key exists
2835	Get the type of a key
2836	expire a key
2837	Flushes the cache
2838	Execute all commands in the queue
2839	Get db size of all servers
2840	Add a function to the execution list
2841	Dispatches a console event .
2842	Adds a timing to a node .
2843	Replaces the event placeholder with the event name .
2844	Merges the tags from the event and the configuration .
2845	Dispatches the memory usage event .
2846	Dispatch request time .
2847	Create a new event from a console event .
2848	Match and return SRID value
2849	Match and return geometry value
2850	Parse point expression
2851	Match and return coordinate value
2852	Returns points list
2853	Match and return point list
2854	Match and return multi polygon
2855	Match and return geometry collection
2856	Match given token
2857	Returns an instance of UnexpectedValueException for a syntax error .
2858	Creates an array of Response objects from the given response parts .
2859	Get request time
2860	Create PhantomJS API client
2861	Sends a command to the API .
2862	Get the redirection URL .
2863	Check render options
2864	Renders a CSS file .
2865	Renders a base64 image .
2866	Performs a find command .
2867	Find elements within a page
2868	Set an attribute on a page .
2869	Trigger a key event on an element
2870	Select a single option in a page
2871	Enable or disable debug mode .
2872	Set the proxy
2873	Get the network traffic
2874	Get all cookies
2875	Set a cookie
2876	Returns an array of JS errors
2877	Get the error message .
2878	Compiles the given node .
2879	Compiles variable node
2880	Creates a new host trie node .
2881	Flushes the text buffer to the given tokens .
2882	Lexes a number token
2883	Lexes a punctuation token .
2884	Lexes a quoted string .
2885	Lexes a single text character .
2886	Lexes a variable name
2887	Adds a route to the collection
2888	Returns a named route .
2889	Creates a new root trie .
2890	Normalize the name .
2891	Checks if the current token is of the given type and throws an exception otherwise .
2892	Returns the current token .
2893	Returns the next token .
2894	Returns true if the next token is of the given type and the given value matches the given type . Otherwise returns false .
2895	Peeks at the given number of tokens .
2896	Add child .
2897	Adds a child node .
2898	Returns all children of this node .
2899	Adds a literal node to the tree .
2900	Adds a child node to the variable children list .
2901	Builds all routes .
2902	Add a route group options to the stack .
2903	Maps HTTP methods to route builders .
2904	Apply group attributes to route builder .
2905	Apply group constraints to route builder .
2906	Apply the group middleware to the route builder .
2907	Apply group route templates
2908	Register rule factories .
2909	Get the candidates for the given node .
2910	Builds the route .
2911	Set the route to a controller method .
2912	Add an attribute to the request .
2913	Set many attributes .
2914	Add many constraints .
2915	Adds multiple middleware to the stack .
2916	Adds a middleware binding .
2917	Parses punctuation and adds it to the current node .
2918	Parses a text token .
2919	Parses the given tokens into a node .
2920	Parses a variable .
2921	Parses variable rule .
2922	Checks if this route matches the given segmentValue .
2923	Create a new route group .
2924	Add a route to the router .
2925	Dispatches the current route .
2926	Compares route method and request method .
2927	Compares the route domain with the request domain .
2928	Compares the route uri against the request uri .
2929	Runs the route and returns the response .
2930	Arranges method parameters .
2931	Regex uri .
2932	Returns a regular expression for a parameter .
2933	Adds a route mapped to any controller .
2934	Define a route parameter .
2935	Get the URL for a route .
2936	Prepares the request and publisher .
2937	Get the URI for the request .
2938	Validates Wechat response .
2939	Validates Bit . ly response .
2940	Validates Sina response .
2941	Returns a provider by its name .
2942	Handle an incoming request and return a response .
2943	Get the response details for a given IP address
2944	Format the details array into a Details object
2945	Get request details .
2946	Set an element in the cache
2947	Remove unused elements from the queue
2948	Sends a POST request to the API
2949	Return error html .
2950	Group routes by filter .
2951	Parse a path
2952	Check if the route is a variable route .
2953	Add an entry to the route cache
2954	Set the route map tree
2955	Get redirect url
2956	Check route middleware
2957	Run dispatching
2958	Initialize the database connections .
2959	Set the HTTP headers .
2960	Get HTTP header by key .
2961	Inserts a row into the table and returns the last inserted id
2962	Get the DI parameters .
2963	Add instance to singleton array
2964	Get a singleton instance by class name
2965	Register a class or interface .
2966	Get an instance of a class .
2967	Get instance with singleton
2968	Run a method on a class
2969	Run the global middleware .
2970	Initialize the database .
2971	Add a pipe .
2972	Initialize the Redis instance .
2973	Subscribe to one or more channels .
2974	Subscribe to multiple channels .
2975	Reset all internal variables .
2976	Wraps the table name with the real table name
2977	Executes the prepared statement
2978	Bind parameters to the statement
2979	Wraps a table name with the configured prefix .
2980	Wraps a row of code .
2981	Condition constructor .
2982	Stores the build attributes .
2983	Re - stores the build attributes from the given data array .
2984	Build a sub - query .
2985	Adds a select statement to the query
2986	Adds a WHERE condition to the query .
2987	Adds an OR condition to the current where clause .
2988	Adds a where in statement
2989	Adds a where between clause to the query
2990	Adds a where null clause
2991	Adds a WHERE clause to the query .
2992	Adds a whereExists statement to the query
2993	Add where in sub statement
2994	Adds a GROUP BY clause
2995	Adds a HAVING condition to the query .
2996	Adds a HAVING condition to the query .
2997	Order by clause
2998	Join a table
2999	Add a FROM clause to the query .
3000	Paginate the results .
3001	Returns the results as an associative array .
3002	Returns the first row of the result set as associative array
3003	Return a list of values for a field
3004	Executes a SQL statement and returns the result .
3005	Prepares a statement for execution .
3006	Begins a transaction
3007	Handle an exception and return the HTML .
3008	Generates a random ID .
3009	Returns a formated ID .
3010	Generate a normal random string .
3011	Normalize a DSN
3012	Create a new DSQL query .
3013	Executes the given expression on this connection
3014	Begin a transaction .
3015	Commits the current transaction
3016	Rolls back a transaction
3017	Last insert ID .
3018	Reset custom arguments .
3019	Consumes the given expression and returns the resulting string .
3020	Escape a value for soft - escaping .
3021	Render the expression
3022	Get debug query
3023	Executes the query and returns the results as an array .
3024	Returns a single cell value from the result set .
3025	Returns the first row of the result set .
3026	Set the main table for the query
3027	Add a where clause to the query .
3028	Render condition .
3029	Adds a group to the query .
3030	Add field to set
3031	Add an option to be selected .
3032	Sets the order of the results .
3033	Set the query mode .
3034	Limit the number of records returned
3035	Parse a string
3036	Fetch the matches of a string .
3037	Creates a new error message .
3038	Checks if a string starts with a line .
3039	Fetch the matches of an environment variable .
3040	Checks if a variable has a parameter expansion .
3041	Fetch parameter expansion
3042	Fetch the expansion symbol for a parameter
3043	Splits a variable name and its default value .
3044	Parse a variable parameter .
3045	Assign variable parameter default value
3046	Checks if a variable exists .
3047	Get the value of a variable .
3048	Parses a key .
3049	Parse the given content .
3050	Parse the raw lines .
3051	Parse a single line .
3052	Parses an export line
3053	Parses a key = value pair
3054	Get the content of the file .
3055	Starts a task worker .
3056	Start a workflow
3057	Find a workflow by name and custom id .
3058	Get timestamp or duration from buffer .
3059	Get the properties of a class .
3060	Configure the sitemap .
3061	Fixes the configuration .
3062	Add a source to a group .
3063	Handle block event .
3064	Get the root menu .
3065	Returns all available fonts .
3066	Returns the Unicode char map of the icon font .
3067	Returns the CSS for the Fonts
3068	Hash and encrypt a password .
3069	Upgrade to version 1 .
3070	Execute the init command .
3071	Writes smoke credentials
3072	Get the config as an array .
3073	Checks if the current uri matches the given start uri .
3074	Register the commands .
3075	Finds all templates .
3076	Find all templates in a bundle .
3077	Execute a console command .
3078	Get a substring between two substrings .
3079	Sanitize a string for ease .
3080	Replaces the first occurrence of the search string with the replacement string
3081	Replace the last occurrence of a string in this string
3082	Returns the possessive part of the string
3083	Splits the string by a delimiter and returns the segment at the given index .
3084	Returns true if the string contains the needle .
3085	Encrypt the transaction hash .
3086	Decrypts the response .
3087	Encrypts the given text with the given key
3088	Decrypts a text
3089	Encrypt the transaction hash
3090	Decrypts the transaction response .
3091	Encrypt the transaction data
3092	Add a range to the expression .
3093	Add a modifier .
3094	Add a range of pages .
3095	Adds a raw source .
3096	Adds a file source to the collection .
3097	Adds files from an iterator .
3098	Unserializes a linked CRS object from its JSON representation .
3099	Set optional constructor arguments .
3100	Creates an instance for an invalid value .
3101	Creates an instance for an invalid property .
3102	Unserializes a named CRS object from its JSON representation .
3103	Get the config path .
3104	Get the application namespace .
3105	Loads the cache configuration .
3106	Creates a new master node with the given entropy
3107	Returns the native balance of the asset
3108	Returns the native balance steops of the wallet
3109	Get the balance value for a custom asset .
3110	Get the balance for a custom asset .
3111	Get the balance for a specific asset
3112	Get checksum hex from entropy bytes
3113	Converts a bit string into a hexadecimal string .
3114	Converts a Menomic key to its entropy binary representation .
3115	Authorize a trustline
3116	Revokes a trustline .
3117	Returns the XDR representation of this object .
3118	Generate an opaque variable .
3119	Creates an optional XDR sequence .
3120	Get unique bucket hashes
3121	Checks if an account exists .
3122	Set whether authentication is required .
3123	Set whether authentication is revocable .
3124	Returns the public key checksum .
3125	Encode an XDR string .
3126	Parses raw data into TransactionResult object
3127	Signs the transaction .
3128	Submits a transaction .
3129	Parses a patch string into an array of PatchObject objects .
3130	Converts a list of patches into a text string .
3131	Adds a patch to the text .
3132	Clone an array of patches .
3133	Calculates the bitap score .
3134	Converts a pattern to a alphabet .
3135	Returns the diff in a pretty HTML format .
3136	Returns the diff as a delta string .
3137	Creates a diff from the given delta .
3138	Return the levenshtein distance between insertions and deletions .
3139	Compute the difference between two strings .
3140	Performs the line mode .
3141	Bisect split .
3142	Find the longest common prefix between two strings
3143	Find the longest common suffix between two strings
3144	Finds the longest common overlap between two strings .
3145	Given two strings this method will return the half - match of the first and second string .
3146	Find the longest common part of the longtext and the longest common part of the shorttext
3147	Returns the characters between two strings .
3148	Get the recipients for the notification .
3149	Get the version of Laravel .
3150	Register the pug compiler .
3151	Get the Pug config .
3152	Construct the cache manager .
3153	Get Pug .
3154	Get the cache path .
3155	Get an option by name .
3156	Checks if a file is expired .
3157	Extract the path from the request .
3158	Get the amocrm client .
3159	Get a B2BFamily resource .
3160	Print the hash of a string .
3161	Resolve a file path .
3162	Displays a file .
3163	Get the options for the given extensions .
3164	Removes options from a path .
3165	Reset the facade options .
3166	Returns a renderer instance .
3167	Add filter to Phug .
3168	Add keyword .
3169	Returns a textual representation of the cache directory .
3170	Run the command and return the output .
3171	Get all available methods .
3172	List available methods .
3173	Answers an array of validation errors for the given object .
3174	Answers a list of meta tags for the receiver .
3175	Mark the given list as duplicated
3176	Find duplicates in the given list .
3177	Remove empty attributes from the given list
3178	Process a record and return the ID of the page
3179	Authorize the request .
3180	Returns the elapsed time of the timer .
3181	Read data from the queue
3182	Converts an array of arguments into a string .
3183	Get and validate command arguments
3184	Throw exception if command is not supported .
3185	Register the auto loader .
3186	Unregisters the autoloader
3187	Get the path to the rediska directory
3188	Returns a list of connections for a given key name .
3189	Get a Redis connection by channel name .
3190	Returns the channels associated with the given connection .
3191	Get configuration values by name or pattern
3192	Set a configuration value
3193	Throw an exception if transaction is not supported .
3194	Create a new queue
3195	Delete a queue
3196	Count the number of items in a queue
3197	Send a message to a queue
3198	Receive messages from a queue
3199	Delete a message from the queue
3200	Returns the total elapsed time of all stopped profiles
3201	Sets a value to the cache
3202	Set the value of a field
3203	Increments a field value
3204	Removes a field from the cache
3205	Write data to cache
3206	Subscribe to one or more channels .
3207	Publishes a message to all subscribed subscriptions
3208	Add a message to the buffer
3209	Throw an exception if Rediska version is lower than 1 . 3 . 8
3210	Catch unserialization notice
3211	Adds a queue to the set
3212	Removes a queue from the set .
3213	Returns the queues cache .
3214	Watches a set of keys
3215	Unwatches the current watch
3216	Adds a Rediska command to the transaction .
3217	Add a new post
3218	Display a list of all posts
3219	Factory method to create a new log object
3220	Add a value to the sorted set
3221	Get set length by score
3222	Get members of this set sorted by score
3223	Removes items from the sorted set whose score is equal to the given score
3224	Increment the score of the set .
3225	Get a set sorted by score
3226	Remove items from the sorted set by rank
3227	Get the rank of a value in this set
3228	Performs a union of the given sets and returns the result .
3229	Intersects two or more sets
3230	Returns the collection as an associative array .
3231	Add an array of values to the set
3232	Set the name of the connection
3233	Returns the connection associated with the specified key name .
3234	Returns a list of all connections in the pool .
3235	Sets the connection to use .
3236	Subscribe to one or more channels
3237	Returns an instance of Rediska_Config .
3238	Set the key distributor to use
3239	Get the serializer
3240	Returns a Rediska command instance .
3241	Get command lower and throw exception if not found
3242	Execute the commands and return the results .
3243	Adds a command to the pipeline .
3244	Writes the command to the database .
3245	Set the response callback
3246	Transforms a multi bulk command into a string .
3247	Append a value to the list
3248	Prepends a value to the list
3249	Truncates the list
3250	Sets a value to the list
3251	Inserts a value into the list after the reference value .
3252	Inserts a value before an existing value in the list
3253	Inserts a value into the list .
3254	Removes a value from the list
3255	Shift an item from the list
3256	Shifts items from the list blocking
3257	Pop a value from the list
3258	Pop a value from the list blocking
3259	Create a list from an array
3260	Load a transaction by ID .
3261	Save data to Rediska
3262	Remove an item from the cache
3263	Remove all items from the cache
3264	Sets the cache directives .
3265	Get ids not matching tags
3266	Get the metadata for a cache entry
3267	Collects all expired members from the cache
3268	Adds a value to the cache
3269	Removes a value from the cache
3270	Move a value to a set
3271	Intersects two or more sets
3272	Returns the union of the given sets .
3273	Compare two or more sets
3274	Get the Rediska instance .
3275	Set a value to the cache
3276	Set a value in the cache and expire it
3277	Sets a bit at the given offset
3278	Get or set value
3279	Returns a list of users following the specified user .
3280	Shows a list of users following the given user .
3281	Follow a user
3282	Moves the cache item to the given database index .
3283	Sets the expire option
3284	Get rediska instance
3285	Sets the mode of the stream .
3286	Add a Rediska instance to the pool
3287	Get all instances .
3288	Create a Rediska instance from its options .
3289	Increment a subject
3290	Reset the cache for a subject .
3291	Get the bucket name .
3292	Set multi increment transaction part
3293	Set the get count part of a transaction
3294	Creates a socket connection to the host and port
3295	Get the read buffer .
3296	Read data from the server .
3297	Read a line from the socket .
3298	Sets the read timeout on the socket .
3299	Get the stream context .
3300	Read data from the socket and throw an exception on failure .
3301	Validates the nonce context .
3302	Declare a queue and bind it to an exchange
3303	Acknowledge a message
3304	Acknowledge a message
3305	Get the message properties .
3306	Start the daemon .
3307	Stop the daemon .
3308	Creates a new exception based on a timeout .
3309	Builds the handler .
3310	Handle a sync message
3311	Get the driver for the given connection
3312	Rejects a message
3313	Closes the connection and channel .
3314	Consumes a message .
3315	Replace the model name for the given stub .
3316	Qualify class name .
3317	Process the request and return the response .
3318	Create a new record .
3319	Converts an array into a json response .
3320	Handle the request to edit the model .
3321	Remove action GET | POST
3322	Vote on attribute .
3323	Renders a document .
3324	Gets the next string from the buffer
3325	Get Global Achievement Percentages for App
3326	Closes the socket .
3327	Receive a packet from the socket
3328	Sends a SteamPacket object to the server .
3329	Receives a reply from the Steam server .
3330	Sends a RCON command to the server .
3331	Gets the RCON challenge .
3332	Sends RCON command to server
3333	Connect to the given IP address and port .
3334	Returns the list of servers in the given region .
3335	Fetches the IEconItems schema .
3336	Converts a community ID to a Steam ID .
3337	Converts a SteamID to a community ID .
3338	Resolve a vanity url to a steamid .
3339	Fetches the user s friends .
3340	Fetches all games owned by this player .
3341	Fetches the group list for this user .
3342	Get the Steam ID using the custom URL .
3343	Get recent playtime
3344	Returns the total playtime for an application
3345	Internal method to fetch the user profile .
3346	Rotates the ip address .
3347	Init socket .
3348	Authenticates the RCON server
3349	Connect to the given IP address and port .
3350	Creates a new instance of the specified class and returns it .
3351	Get the cached instance .
3352	Check if an item is in the cache .
3353	Cache the entities .
3354	Get the cache ids .
3355	Init gold src socket
3356	Authenticates the RCON server .
3357	Closes the socket .
3358	Receive data from the socket .
3359	Performs a select on the socket .
3360	Sends data to the socket .
3361	Get news for app
3362	Get the classes that are equipped .
3363	Returns the number of users .
3364	Returns a list of all members .
3365	Fetches the members list page .
3366	Internal fetch function .
3367	Get the game item schema .
3368	Fetches the items from the ICECON server .
3369	Get all bots that are equipped .
3370	Get the list of wrench golden wrenches
3371	Set API key
3372	Make a request to Steam Web API
3373	Sends a SteamPacket to the SteamClient .
3374	Returns the hashes of all players in RCON
3375	Handles the response for the given request type .
3376	Update ping time
3377	Updates the status of all players in the RCON server
3378	Adds information to this player .
3379	Get a board from the leaderboards
3380	Get all leaderboards for a game
3381	Loads the Leaderboards for a game .
3382	Get the entry for a given Steam ID .
3383	Returns a range of leaderboard entries .
3384	Load data from server .
3385	Load data for given steamid .
3386	Parse the entries from the game leaderboard .
3387	Create a SteamGame instance based on the given game data .
3388	Check if the app is up to date .
3389	Get number of current players
3390	Get user stats .
3391	Work order parts overview page .
3392	Store a newly created event in storage .
3393	Display the specified Event .
3394	Update the specified Event in storage .
3395	Remove the specified Event from storage .
3396	Shows work order .
3397	Shows work order edit form .
3398	Update the work order .
3399	Get take .
3400	Add parts to the order .
3401	Get work order cut .
3402	Process the POST request and return the parts .
3403	Display work request .
3404	Show form for editing work request .
3405	Update the specified work request in storage .
3406	Remove the specified WorkRequest from storage .
3407	Scope a query to only include Locations .
3408	Store a newly created event report .
3409	Renders form for creating new attachments .
3410	Store a newly created work order attachment .
3411	Display work order attachment .
3412	Edits an existing attachment .
3413	Update an existing attachment .
3414	Destroy an attachment .
3415	Display work order report form .
3416	Get the notification icon .
3417	Display a listing of inventory movements .
3418	Display the specified movement .
3419	Rolls back an existing movement .
3420	Get the revised status attribute .
3421	Get the revised priority attribute .
3422	Close all work order sessions .
3423	Returns true if the current user is checked in .
3424	Get the started at label .
3425	Get the completed at label .
3426	Mark a task as completed .
3427	Display work - orders statuses .
3428	Display form for work - orders statuses .
3429	Lists all priorities .
3430	Store the request in the queue .
3431	Edit priority .
3432	Update the given priority .
3433	Scope by stock .
3434	Scope SKU .
3435	Get current stock attribute .
3436	Get the revised metric attribute .
3437	Get operator from string
3438	Sorts a query by a field and sort value .
3439	Get the full path .
3440	Lists all work orders statuses .
3441	Store a newly created Status in storage .
3442	Edit status .
3443	Update the specified Status in storage .
3444	Creates a new inventory variant .
3445	Store a newly created variant in inventory .
3446	Creates a new work order .
3447	Store a new report .
3448	Table for maintenance work orders .
3449	Table assigned .
3450	Table with sessions for work order .
3451	Create or update work order form .
3452	Get form for comment .
3453	Handle uploaded files .
3454	Asset maintenance table .
3455	Asset form .
3456	Inventory table .
3457	Table stocks .
3458	Inventory form .
3459	Navbar stocks .
3460	Store a newly created Attachment in storage .
3461	Update the given work order attachment .
3462	Table with metrics .
3463	Return a table with the history of the given revisions .
3464	Store a newly created image in storage .
3465	Display asset image .
3466	Update the specified Attachment in storage .
3467	Lists all metrics .
3468	Store a new metric .
3469	Shows metric edit form .
3470	Lists all assets .
3471	Store a newly created asset .
3472	Displays form for editing an asset .
3473	Update an existing asset .
3474	Scope by ID .
3475	Return the response .
3476	Get input value
3477	Get the select hierarchy .
3478	Get rendered node .
3479	Register view composers .
3480	Delete the attachment from the filesystem .
3481	Lists all stocks .
3482	Creates new stock .
3483	Store a newly created inventory in storage .
3484	Shows inventory item .
3485	Displays a form to edit an existing stock .
3486	Update an existing InventoryStock .
3487	Destroy an item .
3488	Display a listing of the asset .
3489	Display a form for creating a new meters .
3490	Store a newly created meter .
3491	Display the specified meter .
3492	Show the form for editing the specified meter .
3493	Update the specified meter in storage .
3494	Remove the specified meter from storage .
3495	Store a newly created work order notification .
3496	Update a work order notification .
3497	Get started_at formatted
3498	Get completed_at formatted
3499	Display list of work orders .
3500	Form for creating or updating a comment .
3501	Returns the number of hours .
3502	Format the start date of the event
3503	Format the end date of the event
3504	Returns the event end time as a formatted string
3505	Returns the recur frequency as a human - readable string
3506	recurFrequency Get the frequency of the event
3507	recurDays getter .
3508	Show event tags .
3509	Store a newly created inventory stock .
3510	Update the specified inventory stock .
3511	Remove the specified stock from storage .
3512	Show work order attachments table .
3513	Create form for work order attachments .
3514	Attempt to authenticate the user .
3515	Handle the user was authenticated .
3516	Adds the admin role to the user if the user was authenticated .
3517	Listen to the InventoryStock delete event .
3518	Restore all trashed movements .
3519	maintenance table with work orders priorities .
3520	maintenance form .
3521	Display work order stocks .
3522	Create work order take form .
3523	Form for put work order .
3524	Remove the specified inventory from storage .
3525	Create a new flash message .
3526	Create a new work order .
3527	Store a newly created work order report .
3528	Show the specified resource .
3529	Store a newly created event in storage .
3530	Show an event .
3531	Update the specified resource in storage .
3532	Remove the specified resource from storage .
3533	Scope a query to only include categories .
3534	Sign in form .
3535	Store a newly created Manual in storage .
3536	Display the specified Manual .
3537	Update the specified manual in the asset .
3538	Attach a work order to an asset .
3539	Remove work order from asset .
3540	Store a newly created work request
3541	Delete an existing work request update .
3542	Display work order stocks list .
3543	Returns the work order take form .
3544	Process a take request .
3545	Gets the stock of an item .
3546	Put an item to the work order .
3547	Shows work request list .
3548	Shows work request edit form .
3549	Update the work request .
3550	Show the form for creating a new category .
3551	Store a newly created category in storage .
3552	Show the form for editing the specified category .
3553	Update the specified category in storage .
3554	Remove the specified resource from storage .
3555	Show work order sessions .
3556	Table with work orders sessions per worker .
3557	Listen to the Inventory delete event .
3558	Restore all trashed stocks .
3559	Lists all inventory items .
3560	Store a newly created Inventory in storage .
3561	Show inventory .
3562	Edits an existing Inventory item .
3563	Inventory table .
3564	Table for inventory movements .
3565	Inventory stock form .
3566	Get Inventory navbar .
3567	Table for work orders .
3568	Display work order inventory .
3569	Renders the navigation bar for the work order parts .
3570	Display work order sessions list .
3571	Start work order .
3572	End work order .
3573	Get the change attribute .
3574	Store a newly created Note in storage .
3575	Display the specified Inventory Note .
3576	Update the specified Inventory Note in storage .
3577	Remove the specified Inventory Note from storage .
3578	Get last movement .
3579	Get last movement by attribute .
3580	Get quantity metric attribute .
3581	Put back some button for work order .
3582	Put back all button for work order .
3583	End the session .
3584	Table for maintenance work requests .
3585	Create or update WorkRequest form .
3586	Assign workers to the given work order .
3587	Remove the worker from the assignment .
3588	Create datalist .
3589	Renders a placeholder option .
3590	Get the appendage for a given method .
3591	Renders a component .
3592	Get component data .
3593	Register the blade compiler .
3594	Renders a model field .
3595	Format the label .
3596	Create a reset input field .
3597	Create a submit input .
3598	Get an input from the request .
3599	Create a link to an asset .
3600	Create a link to a named route .
3601	Create a listing element .
3602	Create html attributes .
3603	Register the html builder class .
3604	Register the form builder class .
3605	Create a search input field .
3606	Create datetime input .
3607	Create file input field .
3608	Remove the first line of an XML document .
3609	Loads the dictionary for the given locale
3610	Parse a locale . ini file
3611	Get the patterns for a word .
3612	Unify the locale .
3613	Tokenize a string
3614	Runs the tokenizer and returns a token registry .
3615	Set Hyphenator Options
3616	Add a dictionary to the registry
3617	Get hyphenation pattterns for a word
3618	Sets the filters .
3619	Add a filter .
3620	Sets the tokenizers .
3621	Add a tokenizer
3622	Creates a new Options object from a ini file
3623	Get the text
3624	Get the pattern
3625	Sets the options .
3626	Returns the Hyphenator options .
3627	Add a dictionary
3628	Add a filter
3629	Add a tokenizer
3630	Get the tokenizers .
3631	Returns the dictionary collection .
3632	Get filters .
3633	Hyphenates a string .
3634	Get Hyphenation Pattern
3635	Get the pattern for a word token
3636	Set default home path
3637	Get the default home path .
3638	Set the home directory path
3639	Factory method to create a new Hyphenator
3640	Autoload class .
3641	Replaces an existing token with a new one .
3642	Returns the token with the given key .
3643	Get merged pattern
3644	Get filter by key
3645	Apply the filters to the tokens .
3646	Fetches the access token for the given authorization code .
3647	Migrate orders .
3648	Migrate an order
3649	Migrate shipping values .
3650	Migrate order calculation
3651	Returns a DataObjectSet of all Products that allow purchase .
3652	Create default checkout page if needed
3653	Make an Omnipay payment
3654	Get gateway data
3655	Create a new payment for the given gateway
3656	Mark the order as paid and place the order in the database
3657	Check if the given order can be placed in the cart
3658	Returns a human readable version of the country code .
3659	Sets the payment method
3660	Returns the selected payment method .
3661	Send order confirmation email
3662	Sends an admin notification to the shop
3663	Send a notification to the user that the order has been cancelled
3664	Builds the URL for the given buyable object
3665	Redirect to the cart if possible
3666	Redirect to the shopping cart .
3667	Show the debug information for the current shopping cart
3668	Get the filter for this object .
3669	Handles the submission of the shop account form .
3670	Runs the saveInto action and returns the response .
3671	Get a specific modifier for the current order
3672	Return the price of the order unit if it is a cart .
3673	Calculate the total for this item
3674	Get the unique data for this model .
3675	Check if the order is a cart and if so calculate the totals .
3676	Answers the product variation associated with this object .
3677	Answers a string representation of the object .
3678	Gets the address associated with this location .
3679	Get the cart form
3680	Get the value of the weight cost table
3681	Gets the product weight for this product .
3682	Gets the sum of the items in the collection .
3683	Gets the subtotal of the cart .
3684	Before writing save attribute values
3685	Return the viewer for the given action
3686	Get the product associated with this object .
3687	Add variations fields to the CMS .
3688	Get a variation by attribute values
3689	Generates the variations for this item based on the attribute values
3690	Remove all variation records from the database after deleting the record .
3691	Get a component by type .
3692	Returns a FieldList containing all form fields for this form .
3693	Validates the given data against the order components
3694	Returns the order data .
3695	Sets the data to the order .
3696	Get the dependant data for a component
3697	Returns the current order
3698	Set the current order
3699	Returns the current order or creates a new one
3700	Adds a new item to the order .
3701	Remove an item from the current order .
3702	Remove an order item from the current order
3703	Sets the quantity of the order item .
3704	Update the quantity of an order item
3705	Find or make an item for the given Buyable
3706	Get the item associated with the given order
3707	Checks if the current order is a cart and if it is archives the order
3708	Returns the value for this order .
3709	Returns a price field for display
3710	Gets an Image object based on a FileFilename field
3711	Sets the content of an object .
3712	Answers an array of countries sorted by country code .
3713	Get a single country
3714	Translate ISO 3166 - 2166 country code to name
3715	Get the current cart
3716	Convert an array of values into a set of AttributeValue objects
3717	Get a dropdown field for this product attribute
3718	Answers a list of products that can be shown to the user .
3719	Get a list of all child categories of this category .
3720	Answers a list of the child categories of the product .
3721	Answers a list of categories that are in the groups menu of this category .
3722	Gets the title for a nested menu item .
3723	Add the print button to the form
3724	Print order .
3725	Get the next step .
3726	Answers a list of orders .
3727	Add a GridField to the CMS form .
3728	Get a subset of the given fields
3729	Modifies the subtotal
3730	Setup the steps for the checkout
3731	If we are in a shopping cart and we are not in a shopping cart then redirect to the correct action
3732	Answers true if the given step is the current step .
3733	Get the position of an action .
3734	Find a link to the current cart page
3735	Answers a list of all products in this category .
3736	Trims leading and trailing carriage returns .
3737	Answers the fields for the CMS interface .
3738	Answers an array of options for the category field .
3739	Get category options with no parent .
3740	Answers an array of product category IDs .
3741	Get the selling price for this order
3742	Answers the product image .
3743	Handles the submission of a payment
3744	Perform a Dopayment
3745	If the current user is allowed to cancel the order
3746	Get the CCC fields for a list of gateways
3747	Adds order to the session .
3748	Returns the order IDs from the session .
3749	Answers the order object for the given order ID .
3750	Get the actions form for this order
3751	Create a new Member
3752	Get a member by its unique identifier
3753	Save the MemberID to the ShoppingCart if enabled .
3754	Get all orders that belong to this member
3755	Answers a hidden field for displaying the quantity link for the current item .
3756	Get existing address fields
3757	Answers a FieldList for the CMS interface .
3758	Setup the default search context .
3759	Add order item components to the list .
3760	Calculates the order total
3761	Returns the order total modifier for the given class name
3762	Gets the total outstanding for the order
3763	Get the link to the order
3764	Check if the payment can be performed for the given user .
3765	Returns true if the member can delete this object .
3766	Answers true if the current user can view the record .
3767	Get the name of the member
3768	Get the billing address
3769	Generate a reference for this order
3770	Prepare the object before writing to the database
3771	Deletes all items and mods in this order
3772	Provides translation entities for the order status .
3773	Renders the cart field
3774	Answers a list of items that can be edited .
3775	Find the link to the account .
3776	Get the order link .
3777	Shows a list of all installed packages .
3778	Lists all installed packages .
3779	Gets the path to the package directory .
3780	Updates the installed packages .
3781	Uninstalls a package .
3782	Get the composer instance .
3783	Get all community packages .
3784	Get the package index repository .
3785	Display a list of packages .
3786	Get a package by its shortened identifier .
3787	Get installed packages .
3788	Get an installed package by its name .
3789	Get the package name and version from a given directory package .
3790	Get the composer . json path .
3791	Create the default composer . json file .
3792	Get the raw git version .
3793	Guess the version constraint from a tag .
3794	Get the path to the composer . json file and the decoded .
3795	Set the properties of this object .
3796	Load custom configuration .
3797	Delete all queued jobs .
3798	Run the cleanup process .
3799	Queue a job for execution
3800	Copies a queued job to the descriptor .
3801	Get the next pending job
3802	Checks the health of the job queue .
3803	Checks the default jobs .
3804	Restarts a stalled job
3805	Initialises a job based on the given job descriptor
3806	Checks if the current time has passed the time limit
3807	Checks if the current memory usage is too high
3808	Parses a memory string into a number of bytes
3809	Get the filter for the job list .
3810	Run the queue
3811	Process a queue of jobs
3812	Add a task to the queue
3813	Logs the status of a job descriptor .
3814	List all jobs
3815	Refreshes the queued job descriptor
3816	Check if all jobs are healthy and if so restart them .
3817	Pause the job
3818	Resumes the job
3819	Activate this job on the queue
3820	Get the path to the cache directory
3821	Cleans up a queued job
3822	Get the saved job messages
3823	Get the last saved job message
3824	Returns a string representation of the job type .
3825	Answers an array of allowed job types .
3826	Setup the site map
3827	Prepare for restart
3828	Complete the job
3829	Run the queue
3830	Handle an action on a gridfield
3831	Answers the title for the receiver .
3832	Setup the progress bar .
3833	Process the next step .
3834	Get the queue from the request .
3835	Casts a model into an array
3836	List all casters .
3837	Save the CSS source map
3838	Write data to shared memory
3839	Read data from shared memory
3840	Lists registered sidebars .
3841	Lists all widgets for a given sidebar .
3842	Adds a widget .
3843	Updates a widget s options .
3844	Moves a widget to a new position .
3845	Deactivates one or more widgets .
3846	Deletes one or more widgets .
3847	Resets all registered widgets for one or more sidebars .
3848	Validates the given sidebar ID .
3849	Check if the widget ID exists in the list of available sidebars widgets .
3850	Get widget data .
3851	Move a widget to a new position .
3852	Get the widget object for the given ID base .
3853	Sanitize a widget s options
3854	Returns a random integer between min and max .
3855	Returns a random string of a given length .
3856	Encodes a string to a UTF - 8 string .
3857	Decode a string
3858	Add a generator path .
3859	Removes a generator path .
3860	Returns the first available generator .
3861	Loads the available generators .
3862	Show the form as a row .
3863	Sets the element as read - only .
3864	Open a form .
3865	Add a prefix to the element .
3866	Add a suffix to the element .
3867	Assemble addons .
3868	Set the size of the sizable .
3869	Unscrubs a message .
3870	client Temperature - F
3871	Get a list of all nodes in a session
3872	Returns a list of all properties in a session .
3873	Evaluate a template file
3874	Writes the given keys to the Redis server .
3875	Get the webdriver .
3876	Returns the aspect ratio of the image .
3877	Returns the author of the message .
3878	Returns the user s headline .
3879	Get credit .
3880	Returns the source of the payment .
3881	Returns the job title
3882	Returns the ISO code of the phone number .
3883	Returns the focus distance .
3884	Returns the width of the image .
3885	Returns the height of the image in pixels .
3886	Returns the title of the message .
3887	Returns the caption .
3888	Returns the copyright .
3889	Returns the keywords .
3890	Returns the current camera .
3891	Returns the horizontal resolution .
3892	Returns the vertical resolution .
3893	Returns the machine name .
3894	Returns the focal length of the movie .
3895	Returns the creation date .
3896	Returns the color space .
3897	Returns the MIME type of the message .
3898	Returns the file size in bytes .
3899	Returns the orientation of the image .
3900	Returns the current GPS value
3901	Extract GPSCoordinate from components
3902	Sets the path to the exiftool binary .
3903	Get the path to the tool
3904	Get the output of a command via CLI .
3905	Hydrate an object with the given data .
3906	Extract GPSCoordinates .
3907	Get the mapper .
3908	Get hydrator .
3909	Set options .
3910	Add a required section .
3911	Get the iptc data of a file
3912	Factory method to create an instance of the specified type .
3913	Generates a unique prefix for this table .
3914	Normalizes the configuration .
3915	Translate a list of values .
3916	Run the cache full build job
3917	Process all the URLs that are currently being processed
3918	Collect changes to update and delete
3919	Flushes the static cache
3920	Garbage collection of installed and metadata extensions .
3921	Filters module extensions by module id
3922	Returns module blocks
3923	Returns module settings
3924	Checks if module metadata is supported .
3925	Checks if a PHP file with the given name exists
3926	Checks module versions
3927	Checks extended classes .
3928	Checks module blocks . Returns true on success .
3929	Checks module settings . Returns result .
3930	Check module templates .
3931	Checks module controller files .
3932	Checks module files .
3933	Check module events
3934	Parses module ids from command line arguments .
3935	Parses shop configs .
3936	Template variable getter . Returns available module ids
3937	Check if Oxid is enabled .
3938	Loads and returns module object
3939	Returns module cache object
3940	Returns module installer object
3941	Fixes a module
3942	Removes module extensions which are not registered in extension chain .
3943	Adds module templates to config
3944	Adds module files to config
3945	Adds module events
3946	Adds module extensions
3947	Adds module version
3948	Returns the difference between two arrays .
3949	Adds module settings .
3950	Sets module controllers
3951	Adds module extensions .
3952	Returns list of installed packages .
3953	Returns the rendered template
3954	Sets template block to active state
3955	Get Http instance .
3956	Get the available HTTP transport driver .
3957	Returns a list of supported HTTP transports
3958	Set the CURLOPT_CAINFO option value
3959	Parses the response and returns it .
3960	Check if redirects are allowed .
3961	Make an OPTIONS request .
3962	Make a HEAD request .
3963	Make a TRACE request .
3964	Make a PATCH request .
3965	Checks if the given path matches the given glob expression .
3966	Get extra parameter value by key .
3967	Get the combined filters from the list of glob expression lists .
3968	Activates the plugin .
3969	Checks if the given path matches any of the given glob expressions .
3970	Checks if a relative path matches a list of glob expressions .
3971	Returns the path to the shop source file .
3972	Creates the installer for the given package .
3973	Installs a package
3974	Updates the given package .
3975	Copies the shop source from the package to the target directory .
3976	Copies the configuration distribution file to the target directory .
3977	Copies the setup files from the package to the target directory .
3978	Checks if a shop config file is not configured or missing .
3979	Copies all files from the source package to the installation package .
3980	Get filtered files .
3981	Returns the absolute path to the file from the installation .
3982	Update the package .
3983	Copies the package to the target path .
3984	Form the source path from the extra parameter .
3985	Nests a flat file system structure .
3986	Get the flat file list iterator .
3987	Copies a directory recursively .
3988	Copies a file if it does not match the glob expression list
3989	Generates models .
3990	Traverses a list of classes and merges its properties with all parent classes .
3991	Returns a JSON - LD array representation of the given fields .
3992	Adds breadcrumb list .
3993	Renders the list of models .
3994	Renders the HTML of the page using the Template Service .
3995	Generates the styled HTML
3996	Resolves a path .
3997	Determine if the given array contains the expected values .
3998	Determine if an item exists in an array .
3999	Asserts that a response status code is equal to a given value .
4000	Asserts that the given HTTP body contains the given media type .
4001	Assert that a response is JSON .
4002	Assert that the response from the API is JSON - API .
4003	Assert that a fetched document is present .
4004	Assert that the data fetched from the API is exactly the same as the expected .
4005	Assert that a response from the server was fetched in order .
4006	Assert that a fetched document is a collection of documents .
4007	Assert that a fetched document is in order .
4008	Assert that a document was created with a client id .
4009	Asserts that the response has no content .
4010	Assert that the response contains exactly the given meta data .
4011	Assert that an error contains an exact status .
4012	Assert that the response body contains an exact error .
4013	Assert that a response contains an array of errors .
4014	Returns the response document .
4015	Sets the expected type .
4016	Assert that the response was fetched exactly as a single document .
4017	Assert that the record was updated .
4018	Assert that the page has been deleted .
4019	Assert that a resource is included .
4020	Assert that the document includes the given identifier .
4021	Assert that the document contains the given meta data .
4022	Assert exact meta .
4023	Assert that the document contains an exact set of links .
4024	Assert that the response contains an exact set of errors .
4025	Assert that a resource exists in a document .
4026	Assert that the document contains the given identifier .
4027	Asserts that the contents of a document matches the expected value .
4028	Asserts that a document does not contain an exact value .
4029	Asserts that a list of documents is contained in a collection .
4030	Asserts that the contents of a document are exactly in the expected list .
4031	Asserts that a list in order is contained in a document .
4032	Asserts that an exact list is in order .
4033	Asserts that the document identifiers are in a list .
4034	Asserts that a list of identifiers is in order .
4035	Assert that a list contains a resource .
4036	Asserts that a list contains a hash .
4037	Asserts that a list contains exact values .
4038	Asserts that the included set of documents contains the expected values .
4039	Assert that the document contains an exact error .
4040	Asserts that a document contains at least one of the given errors .
4041	Asserts that a document contains an exact error .
4042	Create an instance from a string or an array .
4043	Casts the given document to a collection .
4044	Creates a new document from a JSON string .
4045	Creates a document from a JSON string .
4046	Get a value from the document .
4047	Determine if the document contains at least one of the given pointers .
4048	Assert that the given members exist .
4049	Assert that at least one of the given pointers does not exist .
4050	Returns whether the expected value is the same as the actual value .
4051	Checks if the given array is a subset of the given array .
4052	Check if value is a resource identifier .
4053	Sort an array .
4054	Checks if given value is identifiable .
4055	Sends the request and returns the results .
4056	Tell a user the given text .
4057	Reply to a user .
4058	Set allowed types .
4059	Writes a message to the output buffer .
4060	Write a message to the output if debug is enabled .
4061	Add a message to the output .
4062	Returns the number of messages for the given type .
4063	Get an array of variables from a single line .
4064	Get the variables from a multi - line array .
4065	Validate the list of variables in the given docblock array .
4066	Returns true if all items in the collection pass the strategy function .
4067	Accumulate the iterator into a single value .
4068	Merges the elements in the array according to the given comparison function .
4069	Converts the object to an array .
4070	Returns an array of all keys in the collection .
4071	Returns a zipped version of the given iterables .
4072	Get the values of the collection .
4073	Reduces the iterator to a single value .
4074	Convert a list of keys and values to a key .
4075	Groups the results by the given strategy .
4076	Reduces a collection to a single value using a closure .
4077	Adds or subtracts a reduction .
4078	Dump the composer . json file .
4079	Get extra key .
4080	Escapes the prefix of a predicate .
4081	Parses a compacted IRI into its prefix and term parts
4082	Get term context from field type .
4083	Persists the cache if it s dirty .
4084	Return the content of an entity .
4085	Normalize field items .
4086	Deletes a record from the cache .
4087	Create a new translated instance .
4088	Get entity URI .
4089	Returns an array of data ids for the given types .
4090	Build a cache backend
4091	Fetches an item from the cache .
4092	Run a string function .
4093	Output an error message .
4094	Asks a question .
4095	Executes a row and returns the ID of the last inserted row .
4096	Create a new record .
4097	Override the values with the given overrides .
4098	Insert a new record into the database
4099	Extract the primary key from the table name .
4100	Sets the user that the session is acting as .
4101	Copy stubs .
4102	Configure variables .
4103	Serialize the additional_data value into an attribute array .
4104	Checks if the attribute is a swatch type .
4105	Return s the swatch type for the passed entity type and attribute code .
4106	Run database seeders .
4107	Prepare the seeder class name .
4108	Return s the swatch with the passed option ID and store ID .
4109	Return s the entity attribute for the passed attribute ID and attribute set ID .
4110	Return s the attribute option with the passed entity type code attribute code and store ID and value .
4111	Return s the attribute option with the passed attribute ID and the highest sort order .
4112	Create the DatabaseSeeders folder if not exists .
4113	Make seeder file
4114	Initialize the attribute with the passed attributes and returns an instance .
4115	Set up database transaction
4116	Return s the attribute with the passed attribute ID .
4117	Set the path .
4118	Add params to the request .
4119	Sends the request and returns the response .
4120	Executes the menu .
4121	Injects the parameters into the request .
4122	Return s the attribute with the passed attribute code .
4123	Tear down the object .
4124	Store the attribute code and attribute id in the pre - loaded array .
4125	Publish records .
4126	Assert that the response contains the given content .
4127	Get the response body as json .
4128	Assert that the response contains the given JSON structure .
4129	Bootstraps Drupal .
4130	Get Drupal root .
4131	Get the path to the environment file .
4132	Read the environment file .
4133	Publish all the bundles for this table
4134	Load the seeders .
4135	Returns the entity type for the given entity code .
4136	Return s the entity type ID for the passed entity type code .
4137	Makes a call to the Menu API
4138	Prepare a URI for use in a request .
4139	Accept Distributed Trace Payload HttpSafe
4140	End a transaction
4141	Set the application name .
4142	Set user attributes
4143	Start a new transaction
4144	Append the base path to the given url .
4145	Prepare the constructor arguments .
4146	Append exception suffix to subject .
4147	Wrap a column in an exception .
4148	Parses a CSV file .
4149	Loads an attribute group by ID .
4150	Return s the list of EAV attribute groups for the passed attribute set ID .
4151	Return s the EAV attribute group with the passed entity type code and attribute set name .
4152	Creates a LexerConfig object based on the current configuration .
4153	Return s the EAV attribute value with the passed option ID and store ID .
4154	Create file resolver
4155	Returns all available core config data .
4156	Returns the requested system logger .
4157	Creates a new plugin instance from the given configuration .
4158	Merge an entity with an attribute
4159	Create a new number converter instance .
4160	Cast value by backend type .
4161	Returns the entity type code .
4162	Return s the attributes for the entity type .
4163	Get EAV User Defined Attributes
4164	Get av attribute by attribute code
4165	Return s the categories with the resolved path .
4166	Return the categories with the resolved path .
4167	Returns the attribute with the given name .
4168	Adds a header to the end of the message
4169	Maps an attribute code to the attribute s header code .
4170	Tear down the subject .
4171	Registers an observer .
4172	Registers a callback for a specific type .
4173	Get callbacks by type .
4174	Import a row into the subject .
4175	Prepare the store view code .
4176	Return s the store ID for the passed store view code .
4177	Get root category
4178	Resolve the original column name .
4179	Return the original data of the row .
4180	Returns true if the column has a original data value .
4181	Wraps the original exception in a new exception .
4182	Append suffix to exception message .
4183	Get a new name for a file
4184	Uploads a media file to the images directory
4185	Deletes a file from the filesystem .
4186	Return s the list of entity types .
4187	Return s the entity type with the passed entity type code .
4188	Serializes an array into a string .
4189	Converts a serialized string into an array .
4190	Returns the target directory path .
4191	Creates a new ExporterConfig object based on the current configuration .
4192	Initializes the value csv serializer .
4193	Unserialize an additional attributes array .
4194	Serializes an array of attributes .
4195	Get a prepared statement by name .
4196	Initializes the prepared statements .
4197	Parse an additionalAttributes string into an array .
4198	Return s the path for the given entity .
4199	Resolve a reference .
4200	Add a value to the cache .
4201	Get a value from the cache .
4202	Flushes the cache .
4203	Load attribute set by ID .
4204	Return s the attribute sets for the passed entity type ID .
4205	Return s the entity type attribute set with the passed entity type ID and attribute set name .
4206	Return s the EAV attribute set with the passed entity type code and attribute set name .
4207	Create the export adapter .
4208	Quote a string for use in a query
4209	Return s the list of url rewrites for the passed entity type and entity id .
4210	Return s the list of url rewrites for the passed entity type and entity id and store id .
4211	Notify all observers .
4212	Check row consistency .
4213	Returns true if the value of the specified header is set .
4214	Creates a subject from the given subject configuration .
4215	Create a serializer for the given configuration .
4216	Return s the available EAV attributes for the passed entity type and attribute set .
4217	Return s the list of EAV attributes for the given option value and store ID .
4218	Return s the available EAV attributes for the passed user .
4219	Return s the available EAV attributes for the passed entity type ID and is user - defined .
4220	Return s the available EAV attributes for the passed entity type ID .
4221	Find EAV attribute by option value and store id
4222	Prepare a subject s observers .
4223	Resolve path .
4224	Create a directory on the filesystem
4225	Set an attribute
4226	Raise a counter .
4227	Merge attributes recursively
4228	Creates a new league filesystem adapter based on the subject configuration .
4229	Return s the list of categories that belong to the given store view .
4230	Return s the root categories .
4231	Creates a new emitter .
4232	Prepares the listeners for the given emitter
4233	Remove directory recursively
4234	Get the SwiftMailer instance .
4235	Initialize the source directory .
4236	Load the files for a serial number .
4237	Loads and returns the sql statements .
4238	Create the import adapter .
4239	Prepare the callbacks for the subject
4240	Returns the global data .
4241	Loads a prepared statement by ID .
4242	Create a date converter .
4243	Override artefacts .
4244	Append artefacts .
4245	Return s the artefacts for the given type and entity ID .
4246	Returns a new artefact array containing the given columns .
4247	Export the artefacts .
4248	Return s the available link types .
4249	Return s an associative array with the attribute code as key and the label as value .
4250	Converts a date string to a date string .
4251	Converts a number to a string .
4252	Import the subject .
4253	Get all pattern keys
4254	Resolve pattern values
4255	Resolve the pattern value .
4256	Prepare pattern .
4257	Prepare ok filename
4258	Checks if two filenames are the same .
4259	Returns an array of ok filenames
4260	Checks if the file should be handled .
4261	Clean up the OK file .
4262	Return s the list of all tax classes .
4263	Warm the cache for the EAV attribute option values .
4264	Return s the list of all store websites .
4265	Return s the list of all the available stores .
4266	Returns the category varchars for the given entity ids .
4267	Find category by entity id .
4268	Return s the list of customer groups .
4269	Get Magento edition primary key member name .
4270	Removes all empty columns from the row .
4271	Blade template .
4272	Register REST routes .
4273	Get collection params
4274	Sanitize the end date
4275	Get events by interval .
4276	Map module event data
4277	Define Category Translations
4278	Strip HTML tags before saving the post
4279	After save event
4280	Save post location
4281	Save additional locations
4282	Save event categories
4283	Save event groups
4284	Save Event Tags
4285	Save occasions for this event
4286	Save post language
4287	Get event by original ID .
4288	Check if category and tag filters are set .
4289	Remove expired occasions
4290	Remove deleted events from the database
4291	Remove expired events
4292	Checks if the event_filter_cat or event_filter_tag field is set .
4293	Delete empty taxonomies .
4294	Render the location list
4295	Save location meta
4296	Get the revision manifest .
4297	Remove meta boxes
4298	Output meta data .
4299	Implode a multi - dimensional array into a string .
4300	Register post type
4301	Adds a column to the table .
4302	Get table columns .
4303	Converts column names to sortable columns .
4304	Table columns content .
4305	Save a term
4306	Activates a new group
4307	Remove empty meta value .
4308	Check if meta value is empty .
4309	Remove empty meta
4310	Save the post
4311	Check if an attachment exists .
4312	Event manager submit form callback .
4313	Add event date args to permalinks .
4314	Filter the where clause .
4315	Get a single occasion date
4316	Get next occasion date
4317	Returns the closest item in an array
4318	Returns the date parts of a start date .
4319	Save Draw Points
4320	Enqueues the event manager admin .
4321	Enqueue styles and scripts for Event Manager Front .
4322	Format a start date as a short date
4323	Import Cron Events
4324	Import Publishing Groups
4325	Check if the database table exists
4326	Create the event database .
4327	Check if an event exists
4328	Request API .
4329	Get the occasions of an event
4330	Get event meta
4331	Limit the length of a string .
4332	Returns an array of geodesic data for a given location .
4333	Updates an instance .
4334	Ajax pagination .
4335	Get all events for a module
4336	Get module categories
4337	Get filterable categories
4338	Get module groups
4339	Get module tags
4340	Get the age filter range for a module
4341	OAuth request callback
4342	Sanitize an array of values .
4343	Returns the data for a single post
4344	Get User Groups
4345	Update the value for the group field
4346	Get the event s content .
4347	Get the event lead .
4348	Get custom content
4349	Register the event categories .
4350	Register the event tags .
4351	Register the event groups .
4352	Add Import Buttons
4353	Imports the events .
4354	Accept or deny
4355	Create tunnel .
4356	Verify tunnel .
4357	Run a command .
4358	Set signal handler
4359	Signal handler .
4360	Run a process .
4361	Edit a container action .
4362	Create the dc - general environment for the given container name .
4363	Get the widget for the given property .
4364	Render the widget for a property .
4365	Process a property value bag
4366	Process a single property .
4367	Hijack the POST array .
4368	Handle the event .
4369	Create an instance of the given class name .
4370	Configure Imagick settings
4371	Injects the imagine settings .
4372	Handle the build widget event .
4373	Get the widget class name .
4374	Get the options for the widget .
4375	Edit the model .
4376	Enforce model relationship .
4377	Process the input of the form .
4378	Dispatches the pre persist event .
4379	Dispatches the post persist event .
4380	Translates the label .
4381	Builds the field set .
4382	Handle the submit button .
4383	Get headline .
4384	Persists the model .
4385	Configure CAS .
4386	Parse the config array and set defaults .
4387	Configure CAS Validation
4388	This method is used to retrieve an attribute from the CAS server .
4389	This method is used to check if an attribute exists .
4390	Logout the CAS user .
4391	Sets the HTTP status code .
4392	Returns the primary key of a model or null if the model is null .
4393	Check if the current value is an integer key .
4394	Get the request fragment from the current URL
4395	Add containers from an array
4396	Build the query .
4397	Wrap the original query with a row counter .
4398	Get a fake model query from a wrapped query .
4399	Generate an activation link based on the given key and action .
4400	Assign a user to a key
4401	Check if a key is valid
4402	Read paging info from request .
4403	Register a set of templates .
4404	Register custom error handlers
4405	Handle an authorization error .
4406	Handle validation errors .
4407	Handle a model not found exception
4408	Removes and returns the top item from the queue
4409	Get all bower components .
4410	Attaches event handlers .
4411	Make a request to the API
4412	Checks if the package is available .
4413	Syncs packages to database .
4414	Updates expired packages .
4415	Creates a new client with the given names .
4416	Returns the connection URL .
4417	Get the port for the connection .
4418	Validates the entity managers .
4419	Terminate a process .
4420	Locks a theme .
4421	Unlocks a theme .
4422	Clones a book .
4423	Build a param value from the filter url .
4424	Build the filter widgets for a parameter .
4425	Returns an array of sorted tables .
4426	Checks if the configuration is configured .
4427	Configure migrations .
4428	Returns all migrations .
4429	Runs all migrations .
4430	Rolls back all migrations .
4431	Resolve the state of the migration .
4432	Get migration table instance .
4433	Renders the given source with the given format .
4434	Mount indentation to the serialized string .
4435	Set the primary keys of the table .
4436	Creates the table
4437	Update the table
4438	Drops the current table
4439	Renames the table .
4440	Executes the blueprint .
4441	Get the migration files .
4442	Create a new filename .
4443	Boot the application .
4444	Load Laravel Booter .
4445	Loads context initializer .
4446	Loads Laravel argument resolver .
4447	Apply MailTrap configuration
4448	Fetch an inbox from the MailTrap API .
4449	Request the Mailtrap . io client .
4450	Reboot the Laravel kernel .
4451	Resolves class arguments .
4452	Opens a stream .
4453	Returns information about a file or URL .
4454	Get stream stats .
4455	Check if a file is registered .
4456	Get the filename for a stream .
4457	Release a reference to a file
4458	Handle a command .
4459	Worked for empty node expansion
4460	Exposes a class or object to the current scope .
4461	Handles an XRL request .
4462	Call a procedure
4463	Renders checkbox list .
4464	Enable the XRL wrapper .
4465	Extracts the types from the doc block .
4466	Returns a list of all available HTTP methods .
4467	Get the signature of a method .
4468	Returns the help for a method .
4469	Execute multiple calls
4470	Load a class
4471	Returns the version of Erebot .
4472	Prints the usage . txt file
4473	Parses a bool value
4474	Parses a file and returns its content .
4475	Parse command line arguments .
4476	Runs the XRL command .
4477	Returns true if the given id has been resolved .
4478	Get the XML writer
4479	Finalizes the write and returns the result .
4480	Get the XMLReader for the given URI .
4481	Reads the XRL node .
4482	Expects an opening tag
4483	Expects an end tag
4484	Parses a text node
4485	Check value against allowed types
4486	Creates a checkbox field .
4487	Returns a form field for email .
4488	Create a select field .
4489	Run the configuration .
4490	Register section .
4491	Register section fields .
4492	Register section settings .
4493	Display the captcha .
4494	Returns a javascript link to the CAPTCHA client .
4495	Displays the multiple captcha widget .
4496	Build captcha html .
4497	Uploads an asset to Moovly .
4498	Get a project .
4499	Get all projects .
4500	Create a project template .
4501	Get a template by ID
4502	Get all templates .
4503	Creates a job in Moovly .
4504	Get a job by ID .
4505	Get all jobs for a template
4506	Get the current user .
4507	Get the personal library for the authenticated user .
4508	Merges two job values .
4509	Returns the LDAP user with the specified attribute value .
4510	Sets the ldap configuration .
4511	Check LDAP error code .
4512	Adds allowed types to the resolver .
4513	Sets the LDAP credentials if necessary .
4514	Switch domain if needed .
4515	Switch domain back if needed .
4516	Hide or throw an exception .
4517	Get the username and password token .
4518	Adds the domain parameter to the token if present .
4519	Transforms the value of an object into LDAP value .
4520	Get the ldap object annotation properties .
4521	Set the LdapObject for a property .
4522	Set the LdapValue for the given property .
4523	Builds the extension .
4524	Get the LDAP values for the given choices .
4525	Get LDAP objects by query .
4526	Get all operations .
4527	Sets the roles for the given user .
4528	Checks if a group exists for a set of roles .
4529	Checks if a group has a specific attribute with a specific value .
4530	Logs a log operation .
4531	Save media to database and storage .
4532	Update media by id .
4533	Get media by group or by weight .
4534	Removes a media from the public directory .
4535	Parse the options .
4536	Get the new filename .
4537	Checks if the file exists and renames it if not .
4538	Rename the file if it exists
4539	Get alt .
4540	Get the title .
4541	Get name .
4542	Get the weight .
4543	Save media to database .
4544	Remove existing media .
4545	Put the file to the new location .
4546	Clone media file
4547	Make directory if not exists .
4548	Clone media .
4549	Boots the config .
4550	Register the service provider .
4551	Sage directives .
4552	Get the config .
4553	Create SVG Element .
4554	transmit item variable
4555	Transform a value to a string
4556	Short description of method addVariable
4557	Short description of method isQtiFilePlaceHolder
4558	Checks whether a variable is a qti file variable
4559	Converts a value to a QTI datatype
4560	Create a new object from a RevisionableInterface
4561	Returns the difference between two arrays .
4562	Set the IP address .
4563	Sets the language .
4564	Sets the origin .
4565	Resolve the origin
4566	Sets the timestamp .
4567	Pre save hook .
4568	Process the object schedule .
4569	Sets creation and last modification dates to now
4570	Check if slug is unique
4571	Generate unique slug .
4572	Set the slug .
4573	Sets the creation date .
4574	Set the last modification date .
4575	Set route options
4576	Set the master model .
4577	Returns the children of this node .
4578	Returns the children of the node .
4579	Load object from source .
4580	Get an object from the object cache .
4581	Add an object to the cache .
4582	Retrieve all category items .
4583	Retrieve route slug pattern
4584	Retrieve the slug prefix .
4585	Retrieve the slug suffix .
4586	Check if the slug field is editable .
4587	Set slug .
4588	Generate the slug .
4589	Generate route pattern .
4590	Filter a route token value .
4591	Generate object route
4592	Get the URL for this object .
4593	Slugifies a string .
4594	Finalize the slug .
4595	Delete object routes .
4596	Create a route object collection loader .
4597	Get all revisions .
4598	Set the publication date .
4599	Set the expiry date .
4600	Set the publish status .
4601	Get the status of the model based on the publish date and expiry date .
4602	Display a list of Videos
4603	Rewrite the routes
4604	Resets the data array
4605	Returns the next item from the result set
4606	Browse a site
4607	Browse the site
4608	Browse a site
4609	Browse Logs events
4610	Get all user permissions .
4611	Browse the current page
4612	Deletes an item from the database
4613	Restores an item
4614	Sort the items in the database
4615	Checks if a localised item can be deleted
4616	Get Title Single
4617	Returns the list of dropdown filters to be used in the admin interface
4618	Get the post object
4619	Gets an item from the database
4620	Return the index page
4621	Adds an option to the list
4622	Adds an array of options to the select box
4623	Get option by index
4624	Handle a method call
4625	Sets a batch status
4626	Sets a batch download ID
4627	Display a list of all the admin controllers
4628	Finds all admin controllers .
4629	Load all admin controllers .
4630	Loads an admin controller file
4631	Loads an admin class
4632	Routes the request to the appropriate controller
4633	Loads a view from a file
4634	Load data from a CSV file
4635	Loads a view from an inline view file
4636	Loads a search component
4637	Searches for a filter by key and returns its value .
4638	Loads a pagination object
4639	Load a cell from a value
4640	Loads a user cell
4641	Loads a date cell
4642	Loads a datetime cell
4643	Loads a boolean cell
4644	Loads the settings table for the given component service and provider
4645	Add header button
4646	Returns a dynamic table view
4647	Saves a new navigation state
4648	Creates the export file and executes it .
4649	Creates the source file
4650	Formats a single row
4651	Add action .
4652	Set admin data
4653	Unset admin data
4654	Sets a value in the admin data table for a user
4655	Clear admin data for a user
4656	Get all log files
4657	Find a config file in the app s assets or in the app s assets folder .
4658	Loads the required JS files
4659	Loads the admin CSS files
4660	Loads the required libraries
4661	Auto loads the components
4662	Backwards compatibility .
4663	Returns the site settings
4664	Prepare the whitelist
4665	Extract fieldsets from settings array
4666	Get a source by it s slug
4667	Get a format by it s slug
4668	Exports a data source to a given format .
4669	Sends an email to a list of recipients when an exception occurs
4670	Adds an item to the basket
4671	Saves the changes to the database
4672	Get all users
4673	Adds common conditions to the query
4674	Formats an object
4675	Override the getRemap method to add model and item_id to the query
4676	Validate user input .
4677	Get the model class and id
4678	Formats an object
4679	Set the current date
4680	Add html to daily array
4681	Set the start of the week
4682	Print a message to the console
4683	Submit a bonus to a team .
4684	Assign a task to a team
4685	Assign a contract to an engagement
4686	Get Earnings by Freelancer
4687	Get Earnings for a Team
4688	Get Earnings by Freelancers Company
4689	Get earnings for a buyer team
4690	Get earnings by buyer company
4691	Get list of engagements
4692	Get a specific engagement
4693	get full url
4694	Get list of offers .
4695	Add an action to a contract
4696	Get a specific financial account report
4697	Get all user roles
4698	Get the roles associated with a specific user
4699	Invite a candidate to a job
4700	Get a company by agency .
4701	Get details by company .
4702	Get all users in a team
4703	Get a list of jobs
4704	Get a specific job
4705	Create a new job
4706	Edit a job
4707	Delete a job
4708	Get user info
4709	Get information about a user
4710	Get task by code
4711	Get room details
4712	Get room by offer id
4713	Get room by application id
4714	Get room by contract
4715	Create a room
4716	Send a message to a room
4717	Update room settings
4718	Update room metadata
4719	Get a snapshot by contract id and timestamp
4720	Update a snapshot by contract
4721	Delete a snapshot by contract id and timestamp
4722	Get the active milestone for a contract
4723	Get all submissions for a milestone
4724	Create a new milestone
4725	Edit a milestone
4726	Delete a milestone
4727	Make a request to the API
4728	Publish the accountkit config and js files .
4729	Get the body of the request .
4730	Get accountkit data .
4731	Display a list of contact .
4732	Display contact .
4733	Show contact form .
4734	Show contact for editing .
4735	Update the contact .
4736	Remove the contact .
4737	Contact gadget .
4738	Get contact field value .
4739	Determine if the given user can view the contact .
4740	Determine if the given user can update the contact .
4741	Remove contact from storage .
4742	Display contact list .
4743	Parse the HTML of a link .
4744	Returns the preview of the parsed link .
4745	Returns the preview of a parser
4746	Add a parser .
4747	Remove a parser .
4748	Add default parsers
4749	Get the contrast from a hex color .
4750	Enclose path .
4751	Converts a string to an interval .
4752	Boot the response extension
4753	Get the time zone data .
4754	Get options array .
4755	Get the model and method for a relation .
4756	Add a model join to the query .
4757	Get the AWS client .
4758	Converts a version string to a number .
4759	Query scope to lookup a key value .
4760	Set the available_at attribute
4761	Get the payload attribute .
4762	Converts a number of bytes into a human readable format
4763	Returns a time offset string .
4764	Format a number of seconds .
4765	Truncates a string to a certain length
4766	Add a permission to a topic
4767	Confirms a subscription
4768	Create a new Topic
4769	Get Topic Attributes
4770	Get list of subscriptions
4771	List Subscriptions By Topic
4772	Returns a list of all topics
4773	Publish a message to a topic
4774	Remove a permission from a topic
4775	Set Topic Attributes
4776	Subscribe to a topic
4777	Create a new Platform Endpoint
4778	Publish a message to a device
4779	Make a request to the API .
4780	Converts a SimpleXMLElement to an array
4781	Clears the persistence layer .
4782	Converts a priority to a priority constant .
4783	Runs the task in the queue .
4784	Customize the settings tabs .
4785	Get invitation by code .
4786	Create default settings tabs .
4787	Creates a Coupon from a Stripe Coupon object .
4788	Get Coupon .
4789	Get the coupon for the current user .
4790	Get the specified team .
4791	Get all team roles .
4792	Update the user s profile
4793	Validate user profile
4794	Update the email address of the Stripe customer .
4795	Installs SPARK JavaScript .
4796	Install AUTHY_KEY and STRIPE_SECRET environment variables .
4797	Subscribe to a Spark plan .
4798	Change the subscription plan .
4799	Update a user s card .
4800	Update user extra billing info .
4801	Cancel a subscription .
4802	Resume a subscription .
4803	Download an invoice .
4804	Set or get the price .
4805	Currency symbol getter and setter .
4806	Set or get trialDays property
4807	Get or set the tier .
4808	Set or get the features .
4809	Get the current user .
4810	Create a new user from a registration request .
4811	Create a new user .
4812	Create default user .
4813	Create subscription on stripe .
4814	Register a TwoFactorAuthenticatable user .
4815	Check if the given token is valid .
4816	Delete a TwoFactorAuthenticatable user .
4817	Show the settings dashboard .
4818	Invite a user .
4819	Remove user by id .
4820	Invite a user to a team .
4821	Accept a team invitation .
4822	Make a new Tab instance .
4823	Get a list of tabs that can be displayed .
4824	Define the application resources .
4825	Define the service bindings .
4826	Send a notification to a user .
4827	Handle invoice payment succeeded .
4828	Create team .
4829	Get all teams for a user .
4830	Get pending invitations for a user .
4831	Attach a user to a team by an invitation id .
4832	Find a plan by ID .
4833	Get all plans with the given tier .
4834	Get the current team .
4835	Checks if the user owns the given team .
4836	Get team role .
4837	Store a new team .
4838	Show the form for editing the specified team .
4839	Update a team .
4840	Switch the user to the given team .
4841	Update the role of a team member .
4842	Remove team member .
4843	Leave a team .
4844	Remove the specified team from storage .
4845	Call a custom validator .
4846	Call a custom updater .
4847	Update the user s password .
4848	Enable TwoFactor Auth .
4849	Validate the input when enabling TwoFactor Auth .
4850	Disable TwoFactor authentication .
4851	Check if the user is authenticated . If so logout and redirect to token screen .
4852	Logout the user and redirect to the token screen .
4853	Authenticates a user based on the token .
4854	Get the registration form .
4855	Validate the registration .
4856	Validate the default registration .
4857	Validate the coupon code .
4858	Logout the user .
4859	Flash a message to the user .
4860	Creates a new event instance .
4861	Register an exception
4862	Export given exception .
4863	Import an exception
4864	Normalizes an event .
4865	Gets a wrapper for a WP handler
4866	Creates a new cached event .
4867	Checks if an event has been cached .
4868	Get a cached event .
4869	Removes a cached event .
4870	Creates a wrapper for event propagation .
4871	Exports an exception as an array .
4872	Imports an exception .
4873	Removes a WordPress hook .
4874	Replaces a WordPress hook .
4875	Returns the number of busy messages in the stack
4876	Clears the reference bag .
4877	Sends a message to the message pool .
4878	Derefides a task from the queue .
4879	Bootstraps the socket .
4880	Applies a function to an array and removes elements that are not present in the array .
4881	Applies a function to an array using a pool of promises .
4882	Invokes the function for each element in the array using the given pool .
4883	Invokes a function in parallel with the given pool .
4884	Converts a result array into a MultiReasonException .
4885	Sets the number of arguments .
4886	Runs a WordPress hook .
4887	Apply WordPress filters .
4888	Adds a WordPress hook .
4889	Wraps the given function result in a promise .
4890	Resumes all open sockets .
4891	Stop the event loop .
4892	Closes all open streams .
4893	Returns the socket associated with the given worker .
4894	Removes the socket for the given worker .
4895	Prepares a worker for sending messages .
4896	Attaches a method handler to an event .
4897	Creates a unique hash for the given callable .
4898	Write data to the stream .
4899	Pipe this stream to a destination stream .
4900	Handles incoming data from the socket
4901	Sends the data to the socket .
4902	Check socket errors
4903	Removes the read listener from the socket .
4904	Removes the write listener from the socket
4905	Decodes a phoebe message .
4906	Attaches the internal timer to the event loop .
4907	Cancels the timer .
4908	Submits a work to a worker .
4909	Submits a work to a worker .
4910	Submits an asynchronous task .
4911	Submits a task to a worker .
4912	Stops a worker .
4913	Removes a worker from the queue .
4914	Sends a message to a worker .
4915	Broadcasts a message to all workers .
4916	The timer tick .
4917	Internal timer tick .
4918	Spawn a new worker .
4919	Checks if a worker is still running . If it is not spawns it and returns it .
4920	Checks if the worker is still running and terminates .
4921	Handles a message from a worker .
4922	Handles the termination of a worker .
4923	Reads data from the stream .
4924	Reads a UUID from the stream .
4925	Read list value
4926	Read a map definition .
4927	Reads varint from buffer .
4928	Read a decimal from the buffer .
4929	Register the service provider .
4930	Bootstrap the service provider .
4931	Send a message to a recipient .
4932	Validates bulk sms response .
4933	Send multiple bulk messages
4934	Get bulk status for batch id
4935	Send the batch
4936	Generates the CSV representation of the messages .
4937	Send the message and return the response .
4938	Sets the message .
4939	Calculates the number of characters that can be concatenated .
4940	Parse an SMS recipient number
4941	Send a batch request
4942	Finds entities by filters .
4943	Returns the number of dynamic records matching the given filters .
4944	Add filter to query builder .
4945	Add search filter to query builder .
4946	Add date range filter to query builder .
4947	Returns the value of a field .
4948	Get all form fields .
4949	Builds the configuration for the given dynamic .
4950	Build the configuration for the given type and data .
4951	Builds the admin mail configuration by dynamic .
4952	Build the website mail configuration by dynamic .
4953	Get file fields by dynamic .
4954	Get collection id by dynamic .
4955	Get the email from a Dynamic object
4956	Get email .
4957	Builds the form .
4958	Create form .
4959	Loads form entity .
4960	Returns the default values for the form entity .
4961	Returns webspace key .
4962	Check if the given checksum is valid .
4963	Get the checksum .
4964	Returns a list of dynamic entries .
4965	Returns all fields .
4966	Deletes a dynamic with the given id .
4967	Get filters from request .
4968	Loads form from request .
4969	Converts a value into a string .
4970	Get the media urls for a given value .
4971	Returns the download url .
4972	Get the choices .
4973	Get choice options .
4974	Get form by id .
4975	Handles the request .
4976	Returns the translation for the given locale .
4977	Get a field by key .
4978	Get fields not in array
4979	Serializes the form for the given locale .
4980	Form action .
4981	This method renders the form and returns the response .
4982	Handles the submitted configuration .
4983	Handles the form only for submit .
4984	Returns a response with a CSRF token .
4985	Get form errors .
4986	Handles the form submission .
4987	Saves the form data .
4988	Upload media .
4989	Maps media ids to entity .
4990	Get the media data .
4991	Get MailChimp lists .
4992	Get the builder with the given alias .
4993	Returns the block prefix .
4994	Creates a new collection .
4995	Loads collection id .
4996	Get item width number .
4997	Get last width .
4998	Re - throw a PDOException .
4999	Sets the hostname .
5000	Sets the unix socket to connect to
5001	Method to set property memory
5002	Sets the file path .
5003	Sets the database name .
5004	Sets the charset .
5005	Ensures that a connection is established .
5006	Configures the connection .
5007	Executes a query and returns the results .
5008	List all queues for a project
5009	Get a queue by name
5010	Send a message to a queue
5011	Send multiple messages to a queue
5012	Get a message by ID
5013	Touches a message
5014	Releases a message
5015	Adds an alert to a queue .
5016	Delete an alert by ID
5017	Delete a queue
5018	Update a queue
5019	Create a queue
5020	Replace a queue s subscribers hash
5021	Remove a subscriber from a queue
5022	Output json .
5023	Output XML .
5024	Generate XML from array or object
5025	Output data in CSV format .
5026	Flattens an array
5027	Executes the console command .
5028	Format server statistics .
5029	Format the usage in percent .
5030	Format the uptime
5031	Add server to memory manager
5032	Add multiple servers .
5033	Try to connect to a remote server .
5034	Gets a value from the cache
5035	Sets a value to the cache .
5036	Delete a value from the cache
5037	Set the cache client
5038	Get a value from the cache
5039	Delete a value from the cache
5040	Makes an InvalidArgumentException for the given data .
5041	Populate the builder with the given data .
5042	Set the options for the route .
5043	Set the notification .
5044	Set the payload data .
5045	Encode CDATA .
5046	Returns a non - authentication URL .
5047	Returns the authentication URL for the given action and parameters .
5048	Gets the URL to use for advanced authentication .
5049	Get a simple authentication URL .
5050	Returns the URL for an HTTP authentication request .
5051	Ensures that the channel parameter is set .
5052	Set Product ID
5053	Get the model s similar attributes .
5054	Get the similar records .
5055	Writes a string to the file .
5056	Autoload class .
5057	Set the output target .
5058	Trigger data import
5059	Trigger suggest import
5060	Applies mapping rules to parameters .
5061	Ensures that the channel parameter is set .
5062	Adds required parameters .
5063	Add an appender to the pool .
5064	Get appender by name .
5065	Log a message with the TRACE level
5066	Log a message with priority debug .
5067	Log a message object with priority warn .
5068	Logs a message .
5069	Logs a logging event .
5070	Forced log .
5071	Removes an appender .
5072	Returns the effective level of this logger .
5073	Returns the logger hierarchy .
5074	Returns the logger with the given name .
5075	Resets the configuration .
5076	Configure the hierarchy .
5077	Get a LoggerConfigurator instance .
5078	Set the record count
5079	Adds product IDs to the request .
5080	Get the recommendations .
5081	Track a click
5082	Track a cart
5083	Track a checkout
5084	Track a recommlist click .
5085	Track the login .
5086	Sets the list of product IDs .
5087	Get the comparable attributes .
5088	Get the compared records .
5089	Adds a string to the buffer .
5090	Set a boolean value .
5091	Set a level value for a property .
5092	Set a file size value .
5093	Set a numeric value for the given property .
5094	Convert a value to a string .
5095	Get the location information from the backtrace .
5096	Returns the current time .
5097	Returns the elapsed time of the event in milliseconds .
5098	Returns the request object
5099	Get tag cloud
5100	Sets the wordCount parameter in the request
5101	Add feedback .
5102	Sets the product numbers .
5103	Adds product numbers to the request
5104	Set the page id .
5105	Make Product Campaign .
5106	Make shopping cart campaign .
5107	Get all campaigns .
5108	Get raw product campaigns
5109	Adds a converter to the converter chain .
5110	Get the converter for the given word .
5111	Parses the formatting modifiers .
5112	Set the level of the logger .
5113	Adds a renderer to the map .
5114	Sets the default renderer .
5115	Get an object by class name .
5116	Get whitelist server parameters .
5117	Load a configuration file .
5118	Converts a log file to an array of loggers .
5119	Parses a logger configuration value .
5120	Parses an appender .
5121	Parse the renderer .
5122	Appends an event to syslog .
5123	Parses the option string and returns the corresponding value .
5124	Parses the facility constant and returns its value .
5125	Parses the priority of the message .
5126	Appends a logging event to the mongo collection .
5127	Converts an exception into an array .
5128	Closes the collection .
5129	Configures the logger with the given input .
5130	Create appender layout .
5131	Set the idsOnly flag
5132	Returns the value of the followSearch parameter
5133	Adds the next filter to the chain .
5134	Sets the response object .
5135	Sets the session id .
5136	Compares this logger level with another logger level .
5137	Returns the configured OFF level .
5138	Returns the fatal log level .
5139	Returns the error logger level .
5140	Returns LoggerLevel for WARN level
5141	Returns the info log level
5142	Get LoggerLevel for debug level
5143	Returns the trace log level
5144	Get Level All
5145	Returns the level corresponding to the passed argument .
5146	Get a system property .
5147	Converts a value to a logger level .
5148	Converts a value to a string .
5149	Substitute constants in a string .
5150	Get a logger by name .
5151	Returns the current request - target
5152	Activates logging options .
5153	Formats a logging event .
5154	Adds a filter to the chain .
5155	Checks if the given level is as severe as the given threshold .
5156	Trigger a warning .
5157	Get the suggestions .
5158	Get the fact finder class name
5159	Roll over the log file .
5160	Connects to the database and activates the logging options .
5161	Appends a logging event to the database .
5162	Formats the logging event .
5163	Generates a URL with the given parameters .
5164	Get the campaign feedback for a specific label
5165	Get pushed products .
5166	Returns the active questions of all campaigns .
5167	Returns the advisor tree for all campaigns .
5168	Activate options .
5169	Appends a logging event to the log .
5170	Find a permission by ID .
5171	Find a permission by its value .
5172	Render an item
5173	Setup the layout .
5174	Get list of users .
5175	Create a new user .
5176	Create a new user .
5177	Attempt to activate a user .
5178	Get the user details .
5179	Get the groups list .
5180	Update a group permissions
5181	Delete a user from a group
5182	Add a user to a group
5183	Validates a group
5184	Load the includes .
5185	Register helpers .
5186	Show the index page .
5187	Process the login form .
5188	Get permissions list .
5189	Create a new permission
5190	Delete a permission .
5191	Adds the pagination to the pdf
5192	Authenticates a user .
5193	Generate a nonce .
5194	Checks whether a flag is set .
5195	Returns the rule associated with the given flag .
5196	Returns true if the flag expects a parameter .
5197	Checks if the given flag is required .
5198	Checks whether the given flag is optional .
5199	Parses the command line arguments .
5200	Checks if the given string is a parameter .
5201	Order parameters .
5202	Authenticates the request
5203	Returns the report API
5204	Returns the permissions API
5205	Returns the company API
5206	Returns the OAuth API
5207	Makes a request to the API .
5208	Returns a list of report elements .
5209	Get all metrics for a report .
5210	Retry the request until the report is not ready .
5211	Get the sleep seconds .
5212	Parses an array of options .
5213	Get images .
5214	Returns a list of images .
5215	Retrieve a list of all videos .
5216	Prints a string with ANSI formatting .
5217	Returns the table definition .
5218	Returns the PHP code for dropping a table .
5219	Returns the code to drop a table .
5220	Get the key definition for a table
5221	Returns the PHP code for dropping a primary key .
5222	Returns the foreign key definition for a table
5223	Returns the code to drop all foreign keys from a table .
5224	Gets the columns definition .
5225	Returns the code for a primary key .
5226	Returns the table comment .
5227	Gets the schema type for a column .
5228	Creates the other column definition .
5229	Lists all tables in database .
5230	Generate Migration File
5231	Create table .
5232	Drop all tables in the database .
5233	Generate a file based on the given parameters .
5234	Prints out a table s data .
5235	Returns the parameters needed to apply the function .
5236	Starts a new execution of a string .
5237	End a string
5238	Output conclusion .
5239	Fetch the webservices .
5240	Populate the response object .
5241	Set Webservices URL
5242	Return a list of groups in the configured search locations .
5243	Get a group by DN .
5244	Return a list of LDAP users .
5245	Get a user by GUID .
5246	Get a user by DN .
5247	Get a user by email address .
5248	Get a user by username .
5249	Returns the canonical username of the user with the given email address .
5250	Get a list of LDAP group members from a DN
5251	Update a group from LDAP
5252	Adds a new LDAP user to LDAP .
5253	Create a new LDAP group
5254	Update an LDAP user from a Member object
5255	Update LDAP groups for a Member
5256	Change the password of a user
5257	Delete an LDAP member
5258	Updates one or more documents .
5259	Connect to the given server .
5260	Disconnects from the server .
5261	Receive a string from the socket
5262	Sends a string to the socket
5263	Encode a string
5264	Decode a string
5265	Read a response from the server
5266	Authenticates the server with the given key .
5267	Sleeps until the response time has passed
5268	Creates the LDAP user if required .
5269	Write the member without syncing .
5270	Get the message from the session
5271	Return a form to reset the password
5272	This function is called when a password has been sent to the LDAP server
5273	Perform a search and return the results .
5274	Get a group by GUID .
5275	Change the password of an LDAP entry
5276	Reset the password for a given DN .
5277	Moves an entry from one directory to another .
5278	Authenticates the user using the LDAPService
5279	Tries to authenticate using the configured fallback authenticator class
5280	Authenticates and validates the SAML response .
5281	Renders the SP metadata .
5282	Converts a little endian hexadecimal string to little endian .
5283	Select callback .
5284	Select one or more documents from the index .
5285	Splits the hash into hashFunc and salt .
5286	Create a new database instance .
5287	Returns the table definition for the specified table .
5288	Returns all tables in the database
5289	Fixes the indexes of a table .
5290	Compare two indexes .
5291	Get one record from the database .
5292	Builds the index name for the given table and index definition .
5293	Encode data .
5294	Generate a random key
5295	Get supported info .
5296	Sign a string using a hash method and a password .
5297	Verify the hmac .
5298	Verify that a timestamp is valid and is not expired .
5299	Remove the last dot from the string .
5300	Push an item onto the end of a string
5301	Add a value to the beginning of a string .
5302	Get the error message from an error array .
5303	Adds an error to the collection .
5304	Get or set the mainMessage property
5305	Get or set the response status code .
5306	Get error message .
5307	Get all errors as a flat array
5308	Check if a field is valid .
5309	Parse a schema array .
5310	Add a rule that requires one or more fields .
5311	Validates the data against the schema .
5312	Validate a single field .
5313	Validate an array
5314	Validate that a value is base64 encoded
5315	Validate a boolean value
5316	Validate that a value is a datetime
5317	Validate that a value is a float
5318	Validate that a value is an integer
5319	Validate an object
5320	Validates that a required value is set .
5321	Validate string type
5322	Validate that a value is a timestamp
5323	Get all registered addons .
5324	Bootstraps the addon classes .
5325	Get a value from the cache
5326	Get the class map for a class name .
5327	Get enabled addons .
5328	Returns information about an addon .
5329	Scan an addon directory recursively and add them to the array of addons .
5330	Scans a directory for addon classes .
5331	Scans the given directory for addons .
5332	Start an addon .
5333	Get all request headers .
5334	Call a callback and fire before and after events .
5335	Bind a callback to an event .
5336	Bind a class to an event .
5337	Dump all registered handlers .
5338	Fires an event
5339	Fires an event with an array of arguments
5340	Fires the filter for the given event
5341	Checks if a function exists .
5342	Get the event name from a callback
5343	Get handlers by name .
5344	Checks if an event has a handler
5345	Check if a method exists on an object .
5346	Get the value of a driver .
5347	Set the value of the driver .
5348	Splits a hash into the stored hash and the salt
5349	Get or set the default path .
5350	Get data by key
5351	Load configuration from a file
5352	Save a configuration array to a file .
5353	Matches the given request against all registered routes .
5354	Add a route to the router .
5355	Finalizes the response .
5356	Checks if an action exists on an object .
5357	Returns the allowed methods for the given object and action .
5358	Checks if the route matches the given request .
5359	Checks if a condition fails the given value .
5360	Get or set the current response .
5361	Create a response from the given result .
5362	Set or get the Content - Type header
5363	Set or get the content asset
5364	Sets the Content - Type based on the Accept header
5365	Returns the message for the given status code .
5366	Set or get cookies .
5367	Get or set global cookies .
5368	Set or get meta data
5369	Set or get the data
5370	Set or get request headers .
5371	Get or set global headers .
5372	Normalize header name .
5373	Flushes the headers .
5374	Alter table migration .
5375	Renames a table
5376	Drops an index
5377	Creates an index on a table .
5378	Force a value to a given type .
5379	Get the primary key value from a row .
5380	Get the list of tables in the database
5381	Creates a route instance .
5382	Get or set the conditions .
5383	Set or get the allowed HTTP methods .
5384	Get or set mappings .
5385	Get or set global mappings .
5386	Check if the given name is mapped .
5387	Get mapped data
5388	Checks if the given request matches the configured methods .
5389	Get or set the route pattern .
5390	Dispatches the callback and returns the result
5391	Get the regular expression for a route pattern .
5392	Execute a query and return the result
5393	Build a select statement .
5394	Returns the SQL for a list of values .
5395	Build an insert statement .
5396	Build an upsert statement .
5397	Build a column definition string .
5398	Build a string for an index definition .
5399	Returns a list of column orders for the given column definitions
5400	Get the formats from the database .
5401	Translate a row
5402	Verify a password against a hash .
5403	Encode a 64 - bit string .
5404	Get or set the current request .
5405	Get the default environment .
5406	Get the global environment variables .
5407	Parse server variables .
5408	Override environment variables .
5409	Get the value of an environment variable .
5410	Sets the environment variables .
5411	Get all headers .
5412	Get the host and port of the URL
5413	Sets the file extension to use .
5414	Sets the path extension .
5415	Set the full path
5416	Sets the server port
5417	Returns the query part of the request .
5418	Set a query part of the request
5419	Returns the value of a key from the INPUT array .
5420	Get data from input or query .
5421	Set a query or input value
5422	Get the URL of the current request .
5423	Sets the URL .
5424	Makes a URL from a path .
5425	Splits a path into its path and extension .
5426	Reset table columns indexes and options .
5427	Adds a column to the schema .
5428	Build the column definition .
5429	Add a primary key column .
5430	Execute the query .
5431	Get or set the table name .
5432	Add an index to the schema .
5433	Get all robots . txt files .
5434	Returns a paginated list of all items .
5435	Find a resource by ID .
5436	Validate the attribute values
5437	Returns the value of an attribute .
5438	Sets the attribute values .
5439	Check if API method is supported
5440	Check required attributes
5441	Check Judo ID
5442	Returns a summary of the error .
5443	Get a model from the container
5444	Get the summary of the error .
5445	Get resource by resource name .
5446	Sends a POST request to the specified resource .
5447	It coerces the attributes into the correct data type
5448	Validates data against required attributes
5449	Checks if a key exists in an array .
5450	Render toastr . js
5451	Add notification to session
5452	Add a delivery to the queue
5453	Converts a job object into an array .
5454	Converts the STUART response into a Job object .
5455	Frees the queue and rejects all delayed requests .
5456	Frees the datagram .
5457	Create a new DashboardChart
5458	Handles the item request
5459	Sets the sort order for the given items
5460	Get the link to the editor
5461	Create a detail form for editing an item
5462	Save the details for the dashboard panel
5463	Returns the RSS items for the feed .
5464	Get a list of recent edits
5465	If the Member has not been configured before write it to the database .
5466	Answers the template for the receiver .
5467	Get the link to view all pages
5468	Get the link to create a new model
5469	Get the gridfields for a given page
5470	Answers the GridField object for the receiver .
5471	Answers the tab name for the grid field .
5472	Answers a list of items in the grid .
5473	Get the grid fields for a page
5474	Request account data
5475	Cleans the error message .
5476	Process a filter string
5477	Account Object Mapper
5478	Takes a JSON string and converts it into an array
5479	Check if a key exists in an array
5480	Fetch a token from GAPI .
5481	Get url with get variables
5482	Make a POST request .
5483	Make a GET request .
5484	Make a request using the configured HTTP interface
5485	Make a cURL request to the API
5486	Make an HTTP request using fopen .
5487	Get a list of recent files
5488	Create a duplicate of this dashboard panel
5489	Answers the template name for the extended object .
5490	Return the link to view all of the models
5491	Return a list of all the items in the model admin
5492	Gets the list of managed models for the given panel
5493	Provides permissions for the CMS .
5494	Set the sorting order for the dashboard panels
5495	Set the default configuration for all new members
5496	Applies the dashboard configuration to all members
5497	Answers the panel object for the current user
5498	Delete the current panel
5499	Return a form to configure the dashboard
5500	Save panel configuration .
5501	Answers the icon for the receiver .
5502	Convert seconds to minutes
5503	Get the gapi object
5504	Add custom fields to the form
5505	Check if this plugin has been configured .
5506	Answers the path for the receiver .
5507	Answers the title for the chart .
5508	Read a floating - point value .
5509	Read a segment from the file .
5510	Converts a hexadecimal integer to an integer .
5511	Read a number of bits from the file
5512	Read a signed value .
5513	Read a 16 - bit int from the file .
5514	Reads signed integer from buffer .
5515	Reads 64 - bit integer from the file .
5516	Reads signed integer from buffer .
5517	Export the trace data .
5518	Get the callback .
5519	This method parses the robots . txt file and returns a list of regular expressions that can be used to follow the given user agent .
5520	Get applying lines from the given robots . txt - content
5521	Builds a list of regular expressions based on the applying lines
5522	Gets the Robots . txt content from the given URL
5523	Gets the robots . txt URL for the given URL .
5524	Initializes the crawler process
5525	Run multi - process crawl .
5526	Starts the child process .
5527	Checks the crawler for aborts .
5528	Create the working directory
5529	Returns the report of the crawling process .
5530	adds an entry to the link priority array
5531	Set URL Following Mode
5532	Set the traffic limit
5533	Set the working directory
5534	Set the proxy for the page request
5535	Set socket connection timeout
5536	Set the socket read timeout
5537	Resumes the crawling process
5538	Sets the starting URL .
5539	Removes all non - redirect URLs from the list .
5540	Checks if the given URL matches the rules defined in this class .
5541	Adds a URL filter rule to the list .
5542	Add multiple URL filter rules at once
5543	Marks a URL as followed
5544	Checks if there are any URLs in the cache
5545	Returns an array of all URLs in the archive
5546	Add multiple URLs at once
5547	Starts a benchmark
5548	Stops a benchmark by identifier
5549	Reset all benchmarks .
5550	Returns an array of all benchmarks .
5551	Get microtime .
5552	Establishes a connection to the cache server .
5553	Gets the distinct URL hash for the given URL descriptor
5554	Get the priority of a URL
5555	Adds a link priority to the list .
5556	Add a list of link priorities
5557	Adds a PHPCrawlerDocumentInfo object to the queue
5558	Returns the next document info in the database
5559	Creates a PHPCrawlerUrlDescriptor object from a URL string .
5560	Sets the source URL .
5561	Finds a redirect link in the given HTTP header and adds it to the link cache .
5562	Adds an array of post data to the current request
5563	Updates the status of the crawler
5564	Registers a child PID
5565	Get the list of child pids
5566	Kill all child processes
5567	Get the IP address of a host
5568	Checks if the host of the given URL is in the cache .
5569	Removes a visitor from the stack .
5570	Traverses the given expression using all registered visitors .
5571	Filters the given collection using the given expression .
5572	Create a new Method Expression object .
5573	Format a value .
5574	Format an array of values .
5575	Write a configuration value .
5576	Consumes a variable from the values array .
5577	Get all of the configured engines .
5578	Expands a multidimensional array into a flat array .
5579	Splits the token into conditions .
5580	Checks if a key matches a token .
5581	Get or set a value from the cache
5582	Sets the message and module manager .
5583	Returns a formatted backtrace .
5584	Exports a variable to a string .
5585	Listen for messages from Discord .
5586	Parses the given message and returns the parsed configuration .
5587	Get the full path to the configuration file .
5588	Load a plugin .
5589	Load config from vendor directory
5590	Load all plugins .
5591	Bootstraps a plugin .
5592	Read a config file
5593	Set one or more configuration options .
5594	Read configuration values .
5595	Load modules from a directory .
5596	Check all loaded plugins for a given module
5597	Unload a module
5598	Reloads a module .
5599	Returns the time the module has been loaded
5600	Returns the modified time of a module .
5601	Get a module by name .
5602	Checks if a module exists .
5603	Sets a module at a given offset .
5604	Get a value by key .
5605	Set a value in the cache .
5606	Get multiple values from cache .
5607	Set multiple values .
5608	Call a method on a database connection .
5609	Log the start of the profile
5610	Log the end of the profile
5611	Get the profile key .
5612	Adds a prefix to all the arguments of a command .
5613	Adds the given prefix to the command arguments .
5614	Evaluate the keys of a command .
5615	Sets the expiration time .
5616	Sets the length of the string
5617	Read data from the socket
5618	Send data to the server .
5619	Check if a command can be executed .
5620	Set the protocol version of the server .
5621	Process data into an array of tokens .
5622	Get the last key in the stack
5623	Prepare the OrientDB command .
5624	Execute the transaction .
5625	Read raw data from socket
5626	Reads an unsigned long from the stream .
5627	Reads a string .
5628	Read bytes from the stream .
5629	Read a record from the stream .
5630	Add bytes to the request buffer
5631	Unpacks a 64 - bit integer from a 64 - bit integer .
5632	Reset the data to it s initial state .
5633	Returns an associative array of all properties .
5634	Renders a component .
5635	Returns a string of class names based on the given arguments .
5636	Get the list of all issuers associated with the authenticated user .
5637	Get a list of all products that are allowed for Merchant API .
5638	Check if the payment method has access to the given products
5639	Create a new order with deals .
5640	Create a new order withSepa .
5641	Create a new order with Sofort .
5642	Create a new Payconic order .
5643	Create a new order with a credit card .
5644	Create a new order with banned contact .
5645	Create a Cash on Delivery Order
5646	Create a new order with klarna .
5647	Create an order using Paypal .
5648	Create a new Homepay order .
5649	Create a new order after Pay
5650	Create a new order .
5651	Get an order by ID .
5652	Create a new order .
5653	Sets the order captures status .
5654	Create a new payment method with IDEAL .
5655	Create a new payment method with a credit card .
5656	Create a payment method withSepa .
5657	Factory method to create a new payment method with SOFORT .
5658	Create a new order with bancontact payment method .
5659	Create a new payment method with Paypal .
5660	Create a homepay payment method with homepay .
5661	Create a new payment method with Payconiq .
5662	Factory method to create a new Payment instance .
5663	Remove empty values from an array .
5664	Create a new Client instance .
5665	Get the endpoint for the given product .
5666	Checks if a value is a valid ISO3166 code .
5667	Build request body
5668	Execute the payment with the given access token
5669	Capture a payment
5670	Make a request to Paylands API .
5671	Create a new payment
5672	Gets an access token .
5673	Builds a Link object from provided data
5674	Builds a capture object from provided data
5675	Builds an Amount object from the provided data .
5676	Build array with return_url and cancel_url keys
5677	Builds an access token from the provided data .
5678	Build a list of transactions .
5679	Converts an array of transactions into an array .
5680	Sends a request and returns the response .
5681	Builds a payment object from provided data
5682	Builds an authorization object from the provided data
5683	Builds payer object
5684	Returns an array representation of the given payer .
5685	Builds an authorization object from the provided data .
5686	Make a safe version of a string .
5687	Make a safe string
5688	Get form attribute value .
5689	Determine if the model has a form mutator .
5690	Get the ReflectionClass instance .
5691	Create a favicon element .
5692	Create a link element .
5693	Create ol element .
5694	Create ul element .
5695	Get the value of a model attribute .
5696	Create a text input field .
5697	Create email input field .
5698	Create a tel input field .
5699	Create a number input field .
5700	Create a URL input field .
5701	Create a color input field .
5702	Get checkbox checked state .
5703	Get url action .
5704	Get route action .
5705	Get controller action .
5706	Inserts a string at a given position .
5707	Searches for a given string in the data .
5708	Set the value at the given index .
5709	Removes a value from the collection .
5710	Fetches data from the buffer .
5711	Parse the file and execute the callback .
5712	Get number of lines in a file
5713	Unzip file .
5714	Get the size of a URL
5715	Returns the files array .
5716	Frees the stream .
5717	Removes the next string from the buffer .
5718	Seeks to a given position .
5719	Inserts a string into the buffer .
5720	Replaces the current element with the given string .
5721	Removes the current element from the buffer .
5722	Copy files from one directory to another .
5723	Closes the stream .
5724	Scope for admin1 .
5725	Add country info to query .
5726	Scope by city .
5727	Scope by country .
5728	Search by feature
5729	Creates all pending redirects .
5730	Returns true if the URI of the given node has changed in the given target workspace .
5731	Builds the redirects for the given node .
5732	Creates a redirect for the given node and dimension combination .
5733	Removes a redirect from the given node if enabled .
5734	Checks if a node is restricted by the current node type .
5735	Checks if a node is restricted by a path prefix .
5736	Returns the list of active hostnames for the current site .
5737	Get the UriBuilder instance .
5738	Loads the name of the field .
5739	Validate a page name and domain .
5740	Return the page picker
5741	Label callback .
5742	Init hook .
5743	Add plugin action links .
5744	Get the version of the plugin .
5745	Get the remote version .
5746	Check file type and extension .
5747	Check the file type and the file extension .
5748	Parse readme contributors .
5749	Get plugin slug by path .
5750	Get remote contributors .
5751	Validate the file
5752	Get a loader that supports the given data
5753	Loads the content of the file .
5754	Create the options for the application .
5755	Get a list of all the allowed tags .
5756	Get allowed protocols .
5757	Get allowed domains .
5758	Sanitize a domain .
5759	Sanitize an attribute value .
5760	Sanitize an IRI value .
5761	Sanitize a CSS IRI .
5762	Load an SVG .
5763	Strip comments from a SVG string .
5764	Get the replicate flags for a resource .
5765	Parse the options and make the loader objects
5766	Pre - parse the loaders
5767	Make namespace loaders
5768	Parse the given options into an array .
5769	Create the cache provider .
5770	Make path and cache paths .
5771	Make the loader .
5772	Makes the variables provider .
5773	Load the data from the cache
5774	Merge the globals into the content .
5775	Get a resource by its filename
5776	Create the current prefix .
5777	Create the resources
5778	Adds a content to the content array
5779	Get supported files in directory
5780	Merge the parent content into the current content
5781	Get a value from an array using dot notation .
5782	Check if an array key exists
5783	Parse a value according to the variable types
5784	Parse a value for a given type .
5785	Fetch variable matches
5786	Fetch a variable from the store
5787	Checks if a variable has been defined .
5788	Performs the replacements .
5789	Export SVG .
5790	Remove a set of nodes from the DOM .
5791	Removes a node from the DOM .
5792	Set the base path of the application .
5793	Make file and filename paths
5794	Search for resources
5795	Parse the content and add it to the returned_content
5796	Use the given imports .
5797	Import a single resource
5798	Creates a resource provider object based on the import parameters
5799	Create the name of the imported file .
5800	Import a resource provider
5801	Check boolean value
5802	Get boolean value
5803	Get mime aliases .
5804	Update the filename extension .
5805	Check mime type alias .
5806	Check if an alias is allowed .
5807	Load config replacements
5808	Get supported files recursively
5809	Makes an array of resource paths .
5810	Check cache .
5811	Make cache file
5812	Set the version of the asset
5813	Reads the config file
5814	Sends the request and returns the response .
5815	Set Curl Options
5816	Executes a GET request
5817	Execute a PUT request
5818	Executes a DELETE request
5819	Executes a POST request
5820	Execute a HEAD request
5821	Execute the request and return the response .
5822	Installs an XQuery extension
5823	Add buckets .
5824	Read the response from the server
5825	Writes the XML content to the server
5826	Check if an XML string is valid .
5827	Set up a range element
5828	Get values as element
5829	Add values - options
5830	Add aggregate element
5831	Get the parameters for the pagination .
5832	Retrieve search results
5833	Retrieve a single key - value pair
5834	Retrieve a KeyValue Element
5835	Highlights a content based on a query
5836	Get the Guzzle client .
5837	Get the manage client .
5838	Get the admin client .
5839	Get the REST API object
5840	Get the database instance .
5841	Returns an instance of the options service .
5842	Autoloads a class
5843	Get the options as XML
5844	Adds an option to the XML document .
5845	Adds an XML string as an option to the given root element .
5846	Read the configuration file .
5847	Write the query to the server
5848	Delete a query
5849	Set search options
5850	Read a document from the server
5851	Write the document to the server
5852	Delete a document
5853	Read the metadata of the document .
5854	Write metadata to the API .
5855	Delete all metadata for this document .
5856	Set the content from a file
5857	Get the mime type of a file
5858	Log a SOAP call .
5859	Decode a SOAP reply into an associative array
5860	Converts an associative array to an associative array
5861	Performs a LDAP sync .
5862	Return a list of phone names
5863	List all phones by site .
5864	Search for a phone by name
5865	Search for Phone
5866	Get Phone by name
5867	Get directory numbers by name
5868	Return a list of all device pools
5869	Get list of site names .
5870	Get all lines for a site .
5871	Get lines details by phone name .
5872	Get all object types by site .
5873	Get an object type by name
5874	Delete an object type by UUID
5875	Add one or more capabilities .
5876	Get the latitude of the Earth .
5877	Get longitude in degrees
5878	Get the body type
5879	Get the error message
5880	Get the URL string .
5881	Create a REST API
5882	Delete a module
5883	Wait until the request is successful .
5884	Checks if a resource exists .
5885	Get the term as XML element .
5886	Adds term - options to the given element
5887	Adds facet - options to the given element .
5888	Adds the fragment scope to the given element .
5889	Set the content of a file
5890	Get a result by its URI
5891	Get a result by its index
5892	Get a facet by name .
5893	Add one or more constraints .
5894	Get the extract metadata as an element
5895	Add preferred elements
5896	Returns the transform - results element .
5897	Add one or more collections .
5898	Delete one or more collections .
5899	Add permissions to the role .
5900	Delete permissions .
5901	Delete one or more properties .
5902	Get the metadata as XML
5903	Load a role from an XML string
5904	Enables the alias loader .
5905	Sets the service container .
5906	Compares fixture and live DB constraints .
5907	Compares fixture indexes with live DB indexes .
5908	Compare field presence .
5909	Returns an array of all files from the fixtures folder .
5910	Compare field presence .
5911	Sets the form type .
5912	Add horizontal form
5913	Generates a label
5914	Get the errors for a field .
5915	Create a form group
5916	Renders a form action .
5917	Create a hyperlink
5918	Creates an alert
5919	Create a password input field
5920	Creates a file input field .
5921	Create a hyperlink
5922	Create a secure link
5923	Create a hyperlink to a named route .
5924	Returns a hyperlink to an action .
5925	Create a mailto hyperlink
5926	Returns an alert with a default message .
5927	Execute mb_ereg_replace .
5928	Get the short message of the error
5929	Get a value from the cache
5930	Stores a value in the cache .
5931	Removes basket from cart
5932	Clears all cart items
5933	Updates shop basket
5934	Get the value of a literal
5935	Get the type of a literal
5936	Get the language of a literal
5937	Creates an IRI from a string
5938	Creates a literal for a given value .
5939	Check request md5
5940	Builds the XML response to send to PayPal .
5941	Tokenize the input string
5942	Tokenize a string
5943	Obfuscates the given code .
5944	Obfuscates the given ID and alias .
5945	Get the default factory .
5946	Get Statement with Group Actor .
5947	Get a Statement with a Statement Reference .
5948	Get statement with result .
5949	Returns a statement with a sub - statement .
5950	Creates a new option instance .
5951	Get the minimal statement .
5952	Attaches event listener
5953	Initializes the ViewHelper
5954	Get the last uploaded file
5955	Collect the files from the event .
5956	Clean the layout .
5957	Attaches the ViewResolver
5958	Attach PDF transformer
5959	Resolve the path to a PDF file
5960	Register an option .
5961	Gets an option by name .
5962	Returns the activity profile document .
5963	Returns the agent profile document .
5964	Get the state document .
5965	Add a behavior .
5966	Add a value to the model .
5967	Define a default behavior .
5968	Set the default value for this field .
5969	Executes the model s behavior .
5970	Get behavior by slug .
5971	Set default waived behavior .
5972	Set the behavior .
5973	Start metrics for a behavior
5974	Stop metrics for a behavior .
5975	Executes the behavior .
5976	Returns a new collection with every item in the collection divided by a step
5977	Get the first item from the collection .
5978	Get the last item from the collection .
5979	Get the maximum value of the collection .
5980	Rejects items that pass the given callback .
5981	Convert the collection to an array .
5982	Get arrayable items .
5983	Check if a bucket is enabled
5984	Parse feature map .
5985	Creates a new HashMap with the given items .
5986	Returns a bucket instance .
5987	Set the map
5988	Generates a builder for a feature .
5989	Set user bucket
5990	Describes a list of tables .
5991	Returns the description of a table .
5992	Create a set of tables .
5993	Create table .
5994	Create multiple table fields .
5995	Create a new field in a table
5996	Create multiple table relationships .
5997	Create a relationship .
5998	Updates the schema of a set of tables .
5999	Update table properties .
6000	Updates a table s fields .
6001	Update a field in a table
6002	Updates multiple table relationships .
6003	Update a relationship .
6004	Deletes multiple tables .
6005	Delete a table
6006	Set the target length .
6007	Truncates a table .
6008	Retrieves a paged result response .
6009	Rewinds the cursor to the first row .
6010	Escapes a value for use in LDAP .
6011	Adds an entry to the current directory .
6012	Compare an attribute with a value
6013	Connects to the given ldap server .
6014	Perform a paging operation on the current LDAP directory .
6015	Binds to LDAP directory .
6016	Returns the value of the specified option .
6017	Adds attributes to the current attributes list .
6018	Delete attribute values from current attributes
6019	Replaces attribute values with new ones .
6020	Modifies an entry in the current directory .
6021	Modifies multiple entries in the current directory .
6022	Rename an entry in the current directory
6023	Binds to the current LDAP directory using SASL .
6024	Search for objects in LDAP .
6025	Sets an option on the current entry .
6026	Verify operation .
6027	Adds a set .
6028	Compute the reference set .
6029	Compute the product .
6030	Get a list of resource names for a given type
6031	Get a resource by type .
6032	Compares two table names .
6033	Creates a SQL statement for creating a primary key .
6034	Creates a view statement
6035	Binds a value to a statement .
6036	Extract PDO type .
6037	Extracts the column type from a database column type string .
6038	Extracts the default value from a column schema .
6039	Adds data to the data array .
6040	Generates the query based on the given parameters .
6041	Creates a Guzzle \ Http \ Request object
6042	Executes an IDruid query .
6043	Set HTTP Method
6044	Set the protocol to use
6045	Generates the query string from the given query parameters
6046	Sets the aggregators array .
6047	Sets the filters .
6048	Sets the post aggregations .
6049	Registers TinyMce client script
6050	Validates that all required parameters are set .
6051	Get the JSON string representation of the request .
6052	Renders the index page
6053	Prepares the database .
6054	Checks if a table has a column .
6055	Returns the type of a column .
6056	Create and update a table .
6057	Drop a table .
6058	Drops all tables .
6059	Rename a file or directory .
6060	Execute a SQL statement .
6061	Add media from request .
6062	Add a media file to the attachment .
6063	Add data from raw data
6064	Add a file from a URL
6065	Delete all thumbnails and files .
6066	Returns the last modified time of a file .
6067	Returns unique file name .
6068	Delete all thumbnails .
6069	Deletes file from storage .
6070	Delete empty directory
6071	Check if the directory is empty .
6072	Check if file exists
6073	Returns the path to the thumb .
6074	Get thumb filename .
6075	Get default thumb options .
6076	Make a thumb .
6077	Get the public path for the attachment .
6078	Returns temporary file path .
6079	Get the column type for an enum type .
6080	Create a time column .
6081	Create a timestamp column .
6082	Callback for curl_write .
6083	Main action .
6084	Bootstrap the application .
6085	Normalize the given URL .
6086	Add a route to the application
6087	Adds a GET route .
6088	Add POST route .
6089	Adds a PUT route to the application .
6090	Add PATCH route .
6091	Add delete route .
6092	Add options to the application .
6093	Add HEAD route .
6094	Renders the view .
6095	Get a source by name .
6096	Create a new migration .
6097	Ensure that a migration class does not already exist .
6098	Get the stub file content .
6099	Get the path to the file .
6100	Scope by caused_by .
6101	Scope the given query for the given subject .
6102	Builds an array expression .
6103	Get the migration paths .
6104	Clear compiled views .
6105	Set the request parameters .
6106	Set request headers .
6107	Set proxy settings .
6108	Set the response cookies .
6109	Set a cookie value .
6110	Set options .
6111	Sends the request and returns the response .
6112	Make an HTTP request .
6113	Build the blueprint based on the action .
6114	Build the table definition .
6115	Builds the commands .
6116	Add an index to the query .
6117	Add a float column on the table .
6118	Add a double column on the table .
6119	Add a decimal column on the table .
6120	Set nullable timestamps .
6121	Add nullable timestamps to the table .
6122	Defines the required columns for a morph relationship .
6123	Add nullable morphs to the schema .
6124	Adds a column to the definition .
6125	Create reference name .
6126	Adds a value to an array if it does not exist .
6127	Collapse a multi - dimensional array into a single array .
6128	Read a value from an array
6129	Fetch a value from an array .
6130	Retrieves and removes a value from an array .
6131	Applies a callback to an array .
6132	Explode the given parameters into a value and key .
6133	Return the levenshtein distance of a word and a list of words
6134	Capitalizes a string .
6135	Capitalizes the first character of a string .
6136	Formats a location in the specified format .
6137	Register the url
6138	Get composer command .
6139	Build the request parameters .
6140	Build the HTTP headers .
6141	Build proxy .
6142	Build the Cookie header .
6143	Register model events .
6144	Register a model event .
6145	Boot Nicer events .
6146	Remove all event listeners for the model .
6147	Create a new location model query .
6148	Get a Location by its identifier .
6149	Get location by slug .
6150	Push a message to the queue .
6151	Overlay the last message .
6152	Clear all messages .
6153	Add task .
6154	Register the service provider
6155	Register the migration prefix
6156	Register the storage service .
6157	Boots the module .
6158	Adds a like statement to the query .
6159	Returns an array of dates grouped by month and year .
6160	Find a model by its primary key or create a new instance .
6161	Retrieve the currently logged in user .
6162	Log out the current user
6163	Log in a user
6164	Retrieve a user by identifier and remember me token .
6165	Retrieve a user based on the given credentials .
6166	Register DB profiler .
6167	Registers the view profiler .
6168	Write the migration file .
6169	Get the events that should be recorded .
6170	Dumps an array
6171	Get a unique id for a variable
6172	Generate a hash for an array
6173	Check if an array is recursive
6174	Check for recursion .
6175	Nuc Dumper .
6176	Main action for the application .
6177	Describe a route .
6178	Add directories .
6179	Normalize a class name .
6180	Tries to load a mapped class .
6181	Require a class .
6182	Load the package manifest .
6183	Writes the manifest file to disk .
6184	Load a locale group from the registered drivers .
6185	Load the locale group from the given path .
6186	Sets the constraint for the query .
6187	Parse read data .
6188	Creates a new query object .
6189	Returns true if STDOUT supports colorization .
6190	Applies colors to a text .
6191	Get ran migrations .
6192	Returns an array of migrations for the given number of steps .
6193	Run all pending migrations .
6194	Run the up migration .
6195	Get the migrations for rollback .
6196	Rollback migrations .
6197	Reset all migrations .
6198	Reset migrations .
6199	Run a migration down .
6200	Run a pretend migration .
6201	Get an array of migration files .
6202	Clears the loader and compile . php files .
6203	Create a primary key column .
6204	Adds a column to the model .
6205	Create a timestampable field .
6206	Add a soft delete behavior to the model .
6207	Adds a column to the model .
6208	Describes a column type .
6209	Check if an option exists .
6210	Check if the parent id is the same as the old one .
6211	Scope live posts .
6212	Get the path attribute .
6213	Register the crypt component
6214	Generate configuration cache
6215	Returns the SQL to rename a table
6216	Boot the HasPermalink trait .
6217	Get the slug key .
6218	Find similar slugs .
6219	Executes a SQL statement and returns the result .
6220	Executes a SQL statement and returns the number of affected rows
6221	Describes a table s columns .
6222	Returns the first row of the result set from the query as an associative array .
6223	Executes an SQL query and returns all results as an array .
6224	Inserts a new record into the database .
6225	Update one or more rows in a table
6226	Creates a DELETE statement .
6227	Adds a limit clause to the query .
6228	Checks if a table exists in the database .
6229	Checks if a view exists in the database .
6230	Creates a new table in the database .
6231	Creates a view based on the provided definition .
6232	Drops a view .
6233	Adds a column to a table .
6234	Modifies a column in a table .
6235	Drops a column from a table .
6236	Adds a new index to the table .
6237	Drops an index .
6238	Adds a primary key to a table .
6239	Drops a primary key from a table .
6240	Adds a foreign key to a table
6241	Drops a foreign key .
6242	Describes a table s indexes .
6243	Describes a table s references .
6244	Use this method to set table options .
6245	Get query panel .
6246	Adds a column to a table .
6247	Modifies a column .
6248	Drops a table column .
6249	Drops an index .
6250	Adds a primary key to a table .
6251	Drops a foreign key .
6252	Creates a new database table .
6253	Creates a view from the given definition .
6254	Drops a database table
6255	Drops a view .
6256	Bind paths in container .
6257	Returns TRUE if there is a database .
6258	Register the logger
6259	Bootstrap the service provider .
6260	Get the fillable attributes from an array
6261	Check if a key is fillable .
6262	Converts an amount from one currency to another .
6263	Check if currency is active .
6264	Get all currencies .
6265	Register modules .
6266	Attaches a listener
6267	Generate a random reset code .
6268	Complete the password reset process .
6269	Check if the reset code is valid .
6270	Complete user activation
6271	Prompts the user for a response .
6272	Register the currency class .
6273	Route middleware .
6274	Create and attach a middleware to the application .
6275	Returns the ReflectionClass for the given class .
6276	Sets the value of a property of an object .
6277	Get the value of a property of an object
6278	Invoke a method on an object .
6279	Save an item to the cache .
6280	Check if a cache key exists .
6281	Get user currency .
6282	Returns true if both coordinates are equal .
6283	Render a block by name .
6284	Binds a callback to an event .
6285	Sort events by priority .
6286	Unbind an event or an array of events
6287	Fires an event .
6288	Get the Di instance .
6289	Checks if a header exists .
6290	Set the request headers .
6291	Build the headers .
6292	Check coordinates ellipsoid
6293	Get detailed error message
6294	Main action .
6295	Register session services
6296	Returns the current time as a DateTime instance .
6297	Prepare the output file .
6298	Get the code from a PHP file .
6299	Parses a file .
6300	Register the database
6301	Get node data by id .
6302	Adds a where clause to the query .
6303	Adds a where between clause to the query .
6304	Add a whereDescendantOf clause to the query .
6305	Returns the descendants of the given id .
6306	Select the number of rows that have a depth .
6307	Wrap the left and right columns for the query .
6308	Returns whether or not this node has children
6309	Set default order .
6310	Moves a node into a new position .
6311	Make gap .
6312	Patch the lft and rgt columns .
6313	Patch a column
6314	Count the number of errors .
6315	Fixes the tree .
6316	Rebuilds the tree from the given data .
6317	Boots the Purgeable trait .
6318	Add attributes to the purgeable list .
6319	Remove attributes that should not be purged .
6320	Get the original purge value .
6321	Get an item from the collection .
6322	Sets a value to the collection .
6323	Remove an item from the collection .
6324	Saves the items to the database .
6325	Loads the items from the database .
6326	Compile a function .
6327	Main action of the application .
6328	Triggered after a request is sent .
6329	Add a header to the response object
6330	Returns the RateLimiter instance .
6331	Update model attributes .
6332	Log a migration to the database .
6333	Create repository .
6334	Get the table instance .
6335	Returns the name of the current database .
6336	Set an attribute .
6337	Append an attribute to the attribute map .
6338	Set the content of the element
6339	Add content to element
6340	Register the given commands .
6341	Generate http - routes cache
6342	Get a list of executed SQL queries .
6343	Check if there are too many attempts for the given key
6344	Hit cache .
6345	Get the number of attempts for the given key .
6346	Clear an item from the cache
6347	Get the amount of time the cache item is available in
6348	Generate dotconst cache
6349	Register the native filesystem .
6350	Swap the facade instance .
6351	Returns true if the facade should receive a value .
6352	Create a fresh mock instance for the facade .
6353	Check if the facade is a mock .
6354	Resolve facade instance .
6355	Processes the result of a select command .
6356	Process select all .
6357	Parses template content .
6358	Process update .
6359	Attaches events to the event manager .
6360	Detaches all events and closures .
6361	Performs a geocode query .
6362	Reverses a geo query .
6363	Get the status for the given ran migrations .
6364	The main action of the application .
6365	Get HTTP routes infos .
6366	Set cURL options .
6367	Get curl infos
6368	Compiles the config files into a PHP file .
6369	Start the process .
6370	Waits for the process to exit .
6371	Stop the process .
6372	Close the process .
6373	Starts and waits for the process to complete .
6374	Optimizes the autoload memory .
6375	Generate the output of the loader
6376	Fills an array with a given value .
6377	Read a property of an object .
6378	Fetches a property from an object or returns a default if the property does not exist .
6379	Get a value from an object using dot notation .
6380	Set a value to a target object .
6381	Register the error and exception handlers .
6382	Handles a PHP error .
6383	Handles an error .
6384	Resolve migration file .
6385	Determine if the given level should be logged .
6386	Add files to the logger
6387	Use daily files logger
6388	Register the logger class .
6389	Setup the database .
6390	Log sql error
6391	Adds a single item or an array of items to the list
6392	Get a single property
6393	Set a property value .
6394	Set the model properties .
6395	Get the original value of a property .
6396	Check if a property has a cast .
6397	Get the dirty properties .
6398	Create nav bar header .
6399	Add Drop down Submenu
6400	Add a button
6401	Flushes all status messages
6402	Adds an item to the body .
6403	Add a CSS to be applied to the cascade .
6404	Get gravatar url
6405	Sets a value to the content array .
6406	Get a reference to the database object .
6407	Return a reference to the locale object
6408	Add parameters to a URL
6409	Linkify a string .
6410	Add Row Footer Columns
6411	Include a CSS file into the current page
6412	Returns the current URL for the current PHP request .
6413	Build the post data .
6414	Get list of available locales
6415	Returns the default locale for a given language .
6416	Set the locale to use .
6417	Setup a property based on an array of options
6418	Returns all status messages .
6419	List all countries .
6420	Adds a single item to the list .
6421	Set the object name .
6422	Set ANSI codes
6423	Get the color for a type .
6424	Sends a GET request .
6425	Sends a POST request .
6426	Sends a DELETE request .
6427	Get the current key .
6428	Unsets the value of a column
6429	Reindexes an array by a column name
6430	Draws all the page parts .
6431	Sets up the context
6432	Returns the number of items in the collection .
6433	Returns true if the given element is empty .
6434	Add slashes to a string
6435	Connect to the database
6436	Insert data into table
6437	prepares a select statement
6438	Set the key column and table for the given object .
6439	Add a slide to the carousel
6440	Finalize the carousel .
6441	Add a message to all loggers
6442	Add a status message to the log
6443	Get tag name
6444	Get a tag property .
6445	Finalizes the modal .
6446	Clone the runner and set the next run time to now .
6447	Add ajax tab
6448	Print the trace of the request and response
6449	Attaches an event to the observable .
6450	Attaches an observer to an event .
6451	Detaches an observer from an event .
6452	Detach all events for an observer
6453	Validates a Pod .
6454	Returns the connection object .
6455	Get the driver .
6456	Generates a random binding parameter .
6457	Normalise the exception thrown by the driver
6458	Creates a database with the given name
6459	Deletes a database
6460	Returns information about a database .
6461	Returns a list of all databases in the current database
6462	Get the database connection .
6463	Sets the current connection to use .
6464	Get a toolbox by name
6465	Sets the model formatter .
6466	Loads a collection by ID .
6467	Create a graph
6468	Renames a collection
6469	Returns information about an index .
6470	Loads a vertex or edge from the graph
6471	Process store result
6472	Converts an array of documents into a list of Pods
6473	Convert an array to a Pod
6474	Convert a driver document to a pod model
6475	Create a new Vertex
6476	Create a new Edge model .
6477	Creates a new document .
6478	Setup model .
6479	Determine if the model was previously stored .
6480	Adds a command to the transaction manager .
6481	Validates a graph type .
6482	Applies a callback to a list of values .
6483	Crawls a page .
6484	Parses the href attribute of a node .
6485	Parses an image node .
6486	Parses a node into a string .
6487	Parses a date and returns a DateTime instance .
6488	Load class by class name
6489	Starts the coverage analysis .
6490	Initializes the configuration object .
6491	Relate this model to another model .
6492	Returns an array of Inbound Edges for this Node .
6493	Convert Vertex to Driver Document
6494	Encode an object to UTF - 8 .
6495	Create a new collection
6496	Deletes a collection
6497	Renames a collection
6498	Removes all data from a collection
6499	Get information about a collection
6500	Get collection statistics
6501	Returns the number of documents in a collection
6502	Loads a collection
6503	Unloads a collection
6504	Returns information about an index .
6505	Get the geo fields for an AQL query
6506	Finds all items in a collection
6507	Returns the collection name for the given document type .
6508	Deletes a user
6509	Gets information about a user
6510	Delete AQL functions by namespace
6511	Lists registered AQL functions
6512	Returns the current version of the server
6513	Returns the current server info .
6514	Returns the server time in seconds
6515	Sets a property value .
6516	Removes a value from the object .
6517	Get system property value .
6518	Set document id
6519	Sets the distance and reference coordinates for this query .
6520	Reset all meta data .
6521	Returns the document as an associative array .
6522	Returns a JSON representation of the object .
6523	Returns a JSON representation of the transaction .
6524	Convert this object to an ArangoDB document
6525	Loads a document from a driver
6526	Load data from an array
6527	Event handler .
6528	Sets the to model .
6529	Get the ID of the recipient .
6530	Sets the from model .
6531	Returns the ID of the From object .
6532	Convert ArangoEdge to Driver Document
6533	Begin a new transaction .
6534	Commit the current transaction .
6535	Clears the transaction info .
6536	Add read collection
6537	Add write collection
6538	Pause the transaction
6539	Resume the transaction .
6540	Add a command to the current transaction .
6541	Searches commands by action and object .
6542	Generate a random ID .
6543	Create a graph
6544	Drops a graph
6545	Get information about a graph
6546	get outbound edges for a model
6547	Returns the filters .
6548	Renders the filter box .
6549	Renders all filters .
6550	Opens the container .
6551	Close container .
6552	Open the filter form
6553	Close the form .
6554	Check if the filter is active .
6555	Renders a filter button .
6556	Renders a reset button .
6557	Renders a back to list button .
6558	Get persistend storage key .
6559	Check if the filter parameter is set in the URL .
6560	Get fulltext search conditions .
6561	Flattens an array of value options .
6562	Returns the filters for the current request .
6563	Get redirect url from post data .
6564	Add filter params to url array .
6565	Set default filters .
6566	Build a PDOStatement from a string .
6567	Reduce the collection to a single value using a callback
6568	Throws an exception if the iterable items are of the given type .
6569	Casts the values of the iterable into a given type .
6570	Register the bugsnag services .
6571	Make a new bugsnag client .
6572	Setup user detection .
6573	Setup the strip and project paths .
6574	Add stub .
6575	Unstub a stub .
6576	Create a new pipeline with the given iterable .
6577	Set the keys of the sequence .
6578	Returns a new sequence containing a specified subset of this sequence .
6579	Sorts the items in the collection using a comparison function .
6580	Set multiple variables at once .
6581	Set a page variable
6582	Get the path to the file
6583	Get the script tag for a given name
6584	Checks if a script combination is allowed
6585	Converts a UTF - 8 string to a list of Unicode codepoint .
6586	Create username spoofs
6587	Get all layouts paths .
6588	Add Phpoole globals .
6589	Process the progress bar .
6590	Set a feed parameter .
6591	Extracts the parameter from the given SimpleXMLElement .
6592	Runs a git command .
6593	Sort by date .
6594	Removes an item from the feed .
6595	Replaces a feed item with a new item .
6596	Merge another feed into this feed .
6597	Auto slice the collection .
6598	Returns a list of all users that conflict with this user .
6599	Insert multiple records into the database .
6600	Writes the items of the feed .
6601	Sets the current position in the buffer .
6602	Get all schedules in the buffer .
6603	Sort by date .
6604	Import config from array
6605	Set the data from the given data object
6606	Sets the source directory .
6607	Sets the destination directory .
6608	Find the layout for a given page
6609	Returns the fallback path for the given page .
6610	Parse the file into frontmatter and body .
6611	Returns the current section
6612	Returns the permalink
6613	Method to set property Config
6614	Build the application .
6615	Get version file
6616	Filter pages by variable and value .
6617	Sort an array by date .
6618	Creates a URL for the given value .
6619	Minify a file
6620	Converts a SCSS file to CSS file
6621	Get the read time of a text
6622	Hash a file
6623	Collect pages from phpoole
6624	Render an RSS feed
6625	Loads an RSS feed .
6626	Sniff the given input .
6627	Checks if input is of given type
6628	Sniff all the given inputs .
6629	Runs the sniffer for the given input .
6630	Save a schedule .
6631	Render an RSS feed
6632	Creates the item node .
6633	Get feed author .
6634	Get comments .
6635	Checks if the given content has XML syntax markers .
6636	Collect taxonomies from pages .
6637	Create page objects for each taxonomy
6638	Compile the views .
6639	Compile all views in the given path .
6640	Compiles a single view file .
6641	Generates a diff between two files .
6642	Parses a diff into an array of diff chunks .
6643	Boot Orchestra Platform extension .
6644	Finish all extensions .
6645	Register active extensions .
6646	Run the callback after booted .
6647	Set the provides for the application .
6648	Write the manifest file .
6649	Register deferred service provider .
6650	Load a queued service provider .
6651	Activate the given extension .
6652	Map extension aliases .
6653	Register domain awareness .
6654	Detect Orchestra Platform extensions .
6655	Get an option from an extension .
6656	Publish extension .
6657	Register a new extension .
6658	Get a route by name .
6659	Mark extension as activating .
6660	Refresh an extension s configuration .
6661	Resets an extension to its default values .
6662	Check if the field should be excluded from the query .
6663	Create an Orchestra Platform theme driver instance .
6664	Bootstrap the application .
6665	Bootstrap extension configuration .
6666	Bootstrap the form .
6667	Bootstrap menu handler .
6668	Bootstrap the sidebar placeholders .
6669	Bootstrap the validation rules .
6670	Attach a listener to an Orchestra extension event .
6671	Initiates the plugin .
6672	Set theme .
6673	Boot Orchestra Platform .
6674	Resolve theme .
6675	Get all available theme paths .
6676	Get the theme autoload files .
6677	Validate the provided theme .
6678	Get all available themes .
6679	Render a macro .
6680	Convert a value to a DateTime object
6681	Verify that safe mode is enabled .
6682	Add a path .
6683	Detect installed Orchestra Platform extension .
6684	Get the contents of the manifest file .
6685	Generate manifest config .
6686	Get composer lock data .
6687	Guess extension name from manifest .
6688	Guess extension path .
6689	Resolve extension namespace .
6690	Validate extension name .
6691	Register the view finder class .
6692	Register theme services .
6693	Detect all themes .
6694	Set the current theme .
6695	Set the theme resolver .
6696	Register Orchestra Platform extension .
6697	Register extension config manager .
6698	Register extension finder .
6699	Register Orchestra Platform status checker .
6700	Execute the listener .
6701	Get the scheme .
6702	Set the route handles .
6703	Get the domain pattern .
6704	Get the route group .
6705	Check if the route matches the given pattern .
6706	Get the route prefix .
6707	Get the root URL .
6708	Get the base URL .
6709	Resolves the base prefix and base url from the given root .
6710	Parse a YAML string into an array .
6711	Validates a YAML string for duplicate keys .
6712	Register and fire activating event
6713	Fires a deactivating event .
6714	Register extension providers .
6715	Register extension plugin .
6716	Boots the application .
6717	Start the application .
6718	Fire extension event .
6719	Get autoload files .
6720	Load the autoloader file .
6721	Process deprecated .
6722	Start the PHP error handler .
6723	Generate a log message .
6724	Generate call trace
6725	Add an alert to the response .
6726	Become a daemon .
6727	Forks the current process .
6728	Answers the slug for the extended object .
6729	Update the URLSlug if it has changed
6730	Sends the headers to the client
6731	Set a cookie .
6732	Clear all cookies .
6733	Performs the actual request .
6734	Stores the uploaded files to the given location .
6735	Remove one or more keys from the array
6736	Find all keys that match a regular expression .
6737	Remove all HTML tags from the array .
6738	Get an array with integer values
6739	Flushes the cache directory .
6740	Combine multiple less files into one single less file
6741	Connects to an SSH server .
6742	Executes a command on the server .
6743	Check if the current environment is a client - server .
6744	Get the IP address from the server
6745	Create a named pipe file .
6746	Register a deployer .
6747	Returns the deployer .
6748	Adds a server .
6749	Sets the servers .
6750	Returns a server by name .
6751	Deploy a server to a deployer .
6752	Returns the server options .
6753	Processes this test for when a keyword is open .
6754	Generate a slug for an ajax request .
6755	Ajax request for single action .
6756	Trigger AJAX callback .
6757	Handles AJAX requests .
6758	Get a value from the POST or GET request .
6759	Generate Random Hex
6760	Start session .
6761	Clear all session variables .
6762	Checks if a string is serialized .
6763	Handle the slug request .
6764	Adds a method to the class .
6765	Updates the current user .
6766	Clear all session data
6767	Verify socket address
6768	Open the session .
6769	Garbage collector .
6770	Match a route against a rule
6771	Get data page .
6772	Checks if the current page is the given page .
6773	Loads class metadata .
6774	Create the condition instance .
6775	Get list of installed plugins
6776	Get a list of all available plugins
6777	Loads the Twig Environment
6778	Sets default language for current user
6779	Check if the token is valid and update the expire date
6780	Get a view by name
6781	Adds a JS variable to the page
6782	Adds a JavaScript file to the page
6783	Add a CSS stylesheet to the page
6784	Get the content of a file
6785	Get content with template
6786	Get all scripts
6787	Get all CSS .
6788	Return asset path
6789	Returns TRUE if the action is allowed for the given routing rule
6790	Get the access rules for all roles
6791	Get the roles chain
6792	Get user language
6793	Translate a choice .
6794	Returns the translation for the given locale .
6795	Get translations from file
6796	Get translation for id .
6797	Get the basic translation for the given translation id .
6798	Generate the toggle command .
6799	Builds the commands for the given attribute .
6800	Handle the build meta model operations .
6801	Main entry point for the application
6802	Prepare and create controller action
6803	Execute the ACL
6804	Executes the authentication process
6805	Resolve route .
6806	Set app libraries and autoload structure .
6807	Get an instance of a library
6808	Create core and controller .
6809	Call class and method with input arguments
6810	Get the function arguments for a class method .
6811	Get the role and user from a token
6812	Returns the role and user for a given user ID
6813	Get current option value .
6814	Set the bulk of input given an array
6815	Gets the value of an input variable .
6816	Filter a variable
6817	Open a database connection .
6818	Closes a connection by name .
6819	Execute a query and return the PDOStatement
6820	Executes a SELECT query and returns the results as an associative array .
6821	Executes a SQL statement and returns the insert ID .
6822	Executes a SQL statement and returns the number of affected rows .
6823	Executes a SQL statement and returns the number of affected rows .
6824	Log out the guest user .
6825	Sets the user id .
6826	Sets the username .
6827	Sets the role id .
6828	Sets the role name .
6829	Checks if the given value is valid
6830	Returns the list of installed plugins .
6831	Search the plugin directories in the given path .
6832	Search the plugin factory class in the given plugin directory .
6833	Find the implementation of a plugin in a file .
6834	Returns the string representation of a closure .
6835	Execute a closure in a temporary file .
6836	Executes a file on the current operating system .
6837	Run a command for Windows .
6838	Sets the autoload file .
6839	Checks if the process is running .
6840	Kills the process .
6841	Reset the log .
6842	Creates a new instance from a string .
6843	Get image driver
6844	Builds an image from an array
6845	Returns proportional width from given height
6846	Returns proportional height from given width
6847	Format bytes as a binary string .
6848	Format a metric .
6849	Create a new session instance .
6850	Initializes the driver .
6851	Parse POST data
6852	Generates the URL for the current request .
6853	Get server param value
6854	Get the default input definition .
6855	Register the commands .
6856	Returns the path to the model file .
6857	Add the force option to the command .
6858	Add model argument
6859	Validates the model argument .
6860	Add table argument
6861	Validates the table argument .
6862	Get table instance
6863	Generate file .
6864	Handle the request and return the response .
6865	Checks if the stream is seekable
6866	Create a parser with the given content type .
6867	Add a new body parser .
6868	Add module argument
6869	Add controller argument
6870	Creates a PSR - 7 request .
6871	Creates a server request .
6872	Create a new stream .
6873	Create a stream from a file .
6874	Create a new uploaded file .
6875	Create a URI from a string
6876	Converts a number of bytes into a human readable string .
6877	Formats a floating point number .
6878	Normalize bytes .
6879	Normalize precision .
6880	Returns a new instance with the specified HTTP method .
6881	Sets the request URI .
6882	Get the target from the URI .
6883	Push a middleware onto the top of the stack
6884	Returns the reason phrase for the given status code .
6885	Get all messages .
6886	Gets the user from the incoming message .
6887	Get the extension of a file
6888	Normalize a filename
6889	Returns the contents of the stream .
6890	Fixes the wp - login . php and wp - admin URLs .
6891	Fixes the wp - includes folder .
6892	Fix network admin url filter .
6893	Removes double slash from URLs .
6894	Initializes WP - Bridge filters .
6895	Set the wp folder name .
6896	Convert a URL to a full path
6897	URL - encode a path
6898	Decodes a URL path .
6899	Returns the content of a directory
6900	Writes data to a database section .
6901	Write a log section
6902	Write data to the memory usage log
6903	Write a timeload section
6904	Writes log sections .
6905	Flip an array of files
6906	Sets the uploaded file stream .
6907	Get the hash of the uploaded file
6908	Returns the mime type of the uploaded file
6909	Get query params
6910	Checks if the current request is an ajax request
6911	Converts a JSON string to a document .
6912	Returns an array of entities from the given data array .
6913	Returns an array of actions from the given data array
6914	Returns an array of fields from the given data array
6915	Returns an array of Links from the given data array
6916	Sends a request and returns the response .
6917	Executes a request and returns the response .
6918	Prepare the request to be executed .
6919	Set the URL for the current request
6920	Sets the CURLOPT_HTTPHEADER option
6921	Creates a response from the result of the cURL request .
6922	Splits the header from the body .
6923	Parse HTTP headers .
6924	Returns the total number of log items for a given log type .
6925	gather all data and display it
6926	Gather the log files .
6927	Collects the GET section data from the request .
6928	Gather data for the Post section
6929	Collects the session data from the request .
6930	Returns the current microtime .
6931	Returns the summary for a specific section and match key .
6932	Creates an array of uploaded files .
6933	Create an UploadedFile object from the given data .
6934	Flips an array of files
6935	Merge two arrays recursively
6936	Add session driver to request
6937	Add a new menu item
6938	Show add or edit form .
6939	Attempt to edit an existing record .
6940	Redirect to edit page .
6941	Order the objects in the database .
6942	Delete an existing record .
6943	Returns the uploaded files .
6944	Returns a new request with the given uploaded files .
6945	Checks a list of uploaded files .
6946	Load headers from server variables .
6947	Return an instance with the specified request attribute .
6948	Remove an attribute from the request .
6949	Check If - Modified - Since header
6950	Get the value of a specific header .
6951	Sets the HTTP status code .
6952	Executes the middleware .
6953	Get the current MySQL version
6954	Authenticates a user with the given credentials .
6955	Find all models .
6956	Find all deactivate items .
6957	Add a new user .
6958	Returns the option for the metric .
6959	Set the current language from the post ID .
6960	Check if the given encrypted data is a valid container .
6961	Check if a string is encrypted .
6962	Dump the class .
6963	Export array as PHP code .
6964	Pre global process .
6965	Performs post - global processing .
6966	Returns a ParseException if no token could be found for any of the given token types .
6967	Make a new container instance .
6968	Recover a record by ID .
6969	Process the new class extensions .
6970	Process the new config classes .
6971	Process a configuration class .
6972	Process a class .
6973	Sets the definitions .
6974	Returns a definition by name .
6975	Removes a definition .
6976	Sets the config classes .
6977	Generates the containers .
6978	Dumps a list of containers .
6979	It returns inner value
6980	Sets the email address .
6981	Send a notice request to the API .
6982	Call the API method and return the response .
6983	Create a response from an exception
6984	Parse http response .
6985	Sends a request to perform an action on the Performer .
6986	Wait for subscriber to receive subscription .
6987	Send actionResulting msg to performer .
6988	Formats the layout template files .
6989	Write the model to a file .
6990	Dashes a value .
6991	Returns a slice of the string .
6992	Returns an array of indices between start and stop .
6993	Get the option for the command .
6994	Validates an array of options .
6995	Creates an option instance .
6996	Declare reply to reply stack messaging .
6997	Get the value of a property .
6998	Get matchers .
6999	Compare two images .
7000	Create diff gif on differences
7001	Create comparison image on differences
7002	Compare two images .
7003	Add route matched with POST method .
7004	Add a route to the routing table
7005	Find a route that matches the given url
7006	Runs the routing table .
7007	Redirects to another URL .
7008	Parse route parameters
7009	Get the date of a file
7010	handle save image
7011	Make a GET request to the API .
7012	Make a POST request to the API .
7013	Set authentication headers
7014	Returns the value of the specified configuration option .
7015	Validates configuration .
7016	Get the next excerpt from a string .
7017	Handles PHP errors .
7018	Get the list of extensions with dot notation .
7019	Validate the widgetId
7020	Set CXense User Id
7021	Get a list of all documents .
7022	Append a string to the current string .
7023	Prepends a string to the current one
7024	Checks if the string matches the given pattern .
7025	Limit the number of words in the string .
7026	Creates a random UUID .
7027	Joins the current string with the given string
7028	Converts the string to HTML entities .
7029	Cuts a portion of the string .
7030	Limit the number of characters in the string .
7031	Limit the number of characters in a string .
7032	Returns the parsed string as a container .
7033	Encrypt the token .
7034	Initialize from encrypted string .
7035	Return the value as a container .
7036	Generates a parser from a MetaGrammar file
7037	Set WpCxense settings
7038	Get all documents matching the query .
7039	Set per page .
7040	Set the current page .
7041	Get a numberable value .
7042	Get searchable value .
7043	Converts a string into a boolean .
7044	Get the grammar .
7045	Create gif command
7046	Create gif command line
7047	Lookup many tokens .
7048	Formats the value as a number .
7049	Check if a property with the given name exists .
7050	Returns a property by its name .
7051	Removes a property by its name .
7052	Checks if a method exists by its name .
7053	Returns a method by its name .
7054	Removes a method by name .
7055	Parse meta .
7056	Runs a plugin hook .
7057	Load all plugins .
7058	Setups the default router .
7059	Get an item from the collection .
7060	Set the value for the given key .
7061	Push a value to a given key .
7062	Search the collection for a given value .
7063	Get a collection of items keyed by a field .
7064	Returns a new collection with unique items .
7065	Returns all numeric keys in the collection
7066	Join the collection with a string .
7067	Join collection by key .
7068	Get a list of items by a given value .
7069	Split the collection into chunks .
7070	Filters the collection using a function .
7071	Apply a callback to every item in the collection
7072	Merge two arrays or Container instances .
7073	Merge items with key
7074	Increase the size of the collection .
7075	Get a random key from the collection .
7076	Get a random item from the collection .
7077	Cuts a portion of the collection .
7078	Rejects items that pass the given callback .
7079	Remove an item from the collection .
7080	Reverses the collection .
7081	Group the items by a given value .
7082	Remove an offset from the collection .
7083	Return a subset of this map after the given index .
7084	Get the value after a given key .
7085	Returns a new Collection containing the items that are not in the given collection .
7086	Take a value from the collection by key .
7087	Remove an item from the collection .
7088	Returns a new Collection containing all elements of this collection that are present in the given array .
7089	Adds a where condition to the query .
7090	Initialize from a JSON string .
7091	Load container from file
7092	Initialize from serialized content .
7093	Create a container from an encrypted token .
7094	Create a new instance from a string
7095	Add a where condition to the query .
7096	Returns an array where the given key is in the given array .
7097	Convert an iterator into an array .
7098	Get the group by value .
7099	Applies a function to an array recursively .
7100	Forget an item recursively .
7101	Recursively removes duplicate values from an array .
7102	Get a key .
7103	Add or edit object
7104	Returns the option string for the compose command .
7105	Parse the files and return an array of excerpts
7106	Fetch a value from an array using dot notation .
7107	Removes an item from an array using dot notation .
7108	Get an item from an array
7109	Checks if an item exists in an array
7110	Set a value in an array using dot notation .
7111	Searches an array for a value and returns its key or the default value if not found .
7112	Renders a javascript library
7113	Create . htaccess file .
7114	Get a new access token .
7115	Sets the autocomplete input id .
7116	Sets the bounding box .
7117	Adds a new autocomplete type .
7118	Removes a autocomplete type .
7119	Returns the autocomplete component restriction for the given type .
7120	Sets the list of component restrictions .
7121	Add a component restriction .
7122	Removes a component restriction .
7123	Sets the input attributes .
7124	Sets an input attribute .
7125	Performs an identipattern .
7126	Converts an image to another format .
7127	Compress an image .
7128	Compress SVG .
7129	Compress PNG .
7130	Decode data url .
7131	Returns the one pixel of this image in the specified format .
7132	File extension to format .
7133	Convert a format to a file extension .
7134	Convert file extension to mime type .
7135	Returns the compression type for the given format .
7136	Returns the compression quality for a given format .
7137	Format file extension .
7138	Change file format ext .
7139	Parses the format arguments .
7140	Sends the request and returns the response .
7141	Clean input data
7142	Limits PHP s maximum upload size and post size .
7143	Renders a circle .
7144	Checks if a version is valid .
7145	Checks if the given version is a valid development version .
7146	Checks if the given version is a valid stable version .
7147	Create CSRF token .
7148	Create hidden input with CSRF token .
7149	Verify CSRF .
7150	Create Request from globals .
7151	Get the form data .
7152	Get parsed form data .
7153	Get the JSON body .
7154	Normalize the amps of a URL URI .
7155	Render a map type identifier .
7156	Returns the first character of a given name .
7157	Get last name .
7158	Converts a name to an acronym .
7159	Converts a name to a variable name .
7160	Checks if a string is valid .
7161	Validates a UUID64 .
7162	Gets the shard id from a UUID .
7163	Validates a shard ID .
7164	Returns the type id of the given UUID .
7165	Validates a type ID .
7166	Returns the local ID of the UUID as defined in RFC 4646 .
7167	Validates a local ID .
7168	Parse the given UUID into shard type and local id .
7169	Builds a shard id type id and local id
7170	Renders a polyline .
7171	Set the center of the overlay .
7172	Sets the latitude .
7173	Sets the longitude .
7174	Sets the noWrap attribute for this Coordinate .
7175	Sets the control position .
7176	Sets the scale control style .
7177	Returns the status of the geocoder .
7178	Get a value from the cache
7179	Get sub path .
7180	SHA1 keys .
7181	Get an instance of a class .
7182	Match a string against a value
7183	Get Template Class
7184	Returns the strength of a password .
7185	Check process .
7186	Check if Memcache is enabled .
7187	Check the map for a given URL and return the SRI .
7188	Check map cache
7189	Check the contents of a URL .
7190	This is the main entry point for caching .
7191	Set SRI in Memcache .
7192	Get the map .
7193	Get the map cache .
7194	Check if the given URL is local
7195	Checks if a variable is valid .
7196	Convert to acronym .
7197	Converts a string to a slug .
7198	Converts a variable to camelCase .
7199	Renders a Size object
7200	Determine if the given email address is a role based .
7201	Parse addresses .
7202	Parse request headers .
7203	Parse attachments .
7204	Converts a Content - Type header to a JSON representation .
7205	Parse a representation string into a class name
7206	Get the difference between two float values .
7207	URL safe encode .
7208	URL - safe base64 decode .
7209	Create a new Nonce token .
7210	Create a hidden input field .
7211	Verifies a nonce .
7212	Sets the list of origins .
7213	Returns a human - readable representation of a time difference .
7214	Returns the items for the given keys .
7215	Renders a marker .
7216	Build the JSON response .
7217	Renders a marker shape
7218	Renders a scale control style .
7219	Check if slug is valid .
7220	Check if slug is reserved .
7221	Convert slug to name .
7222	Convert slug to variable name .
7223	Sets the coordinates .
7224	Store the configuration in the cache file .
7225	Get all repositories .
7226	Parse the template file .
7227	Set the template variables .
7228	Checks if a file has a parent .
7229	Get the parent vars .
7230	Get new child template .
7231	Adds the seeder class to the options .
7232	Render a RotateControl .
7233	Encode a value for HTML .
7234	Decode HTML entities .
7235	Call a controller action .
7236	Renders a KML layer .
7237	Get a value from the cache
7238	Add or update a value to the cache .
7239	Clear data from cache .
7240	Create a new namespaced primary key .
7241	Namespace prefix .
7242	Checks if the servers in the pool are different .
7243	Adds connections to the pool if necessary .
7244	Renders the html container for the given Autocomplete .
7245	Renders the Javascripts .
7246	Renders an Autocomplete .
7247	Register the service provider .
7248	Close the current request .
7249	Turn gzip off .
7250	Sets the location of the waypoint
7251	Sets the stopover value
7252	Returns a human - readable description of the given error code .
7253	Sets the file extension .
7254	Change file extension .
7255	Checks if an option exists .
7256	Returns an option value .
7257	Sets an asset option .
7258	Removes an option .
7259	Modify request attributes based on route match .
7260	Sets the zoom control style .
7261	Decode a single hash id .
7262	Sets the results .
7263	Sets the status of the response .
7264	Checks if a string is valid .
7265	Checks if the current browser is in the engine .
7266	Normalize the given value .
7267	Get the URL for a page .
7268	Sets the avoidHighways attribute of the distance matrix .
7269	Sets whether or not to avoid tolls should be performed .
7270	Sets the list of destinations .
7271	Add a destination to the distance matrix
7272	Adds an origin to the origin list .
7273	Sets the region of the distance matrix .
7274	Sets the language of the distance matrix
7275	Sets the travel mode of the distance matrix .
7276	Sets the unit of the distance matrix .
7277	Returns the control positions .
7278	Sets the response status .
7279	Render an overview map control .
7280	Renders a LatLngBounds object
7281	Renders the extends of a bound
7282	Print all benchmark statistics .
7283	Sets the markers .
7284	Sets the helpers .
7285	Returns a marker helper .
7286	Sets the extension helpers .
7287	Returns a specific extension helper .
7288	Removes an extension helper .
7289	Render the HTML container .
7290	Render the Stylesheets of a map
7291	Renders the javascripts for a map
7292	Renders the javascript libraries for the given map
7293	Renders the js before the map
7294	Render the js after each extension
7295	Render map js container
7296	Renders the javascript container coordinates .
7297	Render the bounds of a map
7298	Render map points in javascript container
7299	Render the JS container sizes .
7300	Renders a javascript container map .
7301	Render map circles in javascript container
7302	Render the javascript container encoded polylines
7303	Render the ground overlays of a map
7304	Render the javascript container of a map
7305	Render map polyline js container
7306	Render JS container rectangles
7307	Render the info windows of a map
7308	Renders the JS container marker images .
7309	Renders the JS container marker shapes .
7310	Render the js container marker cluster .
7311	Render KML layers
7312	Render js container event manager
7313	Render the extra javascript for the map
7314	Renders a map .
7315	Renders the center of a map
7316	Render map bound
7317	Computes the coordinates of the map
7318	Computes the bounds of the map
7319	Compute the points for the map
7320	Computes the sizes of the map
7321	Compute the marker images from the map
7322	Compute the marker shapes of a map
7323	Compute the info windows of the markers in a map
7324	Render map controls
7325	Render a map control .
7326	Generate a v1 UUID .
7327	Generates a version 3 UUID .
7328	Generate a v4 UUID .
7329	Generate a v4x2 UUID .
7330	Get package by name .
7331	Applies a callback to each item in the collection .
7332	Filters the collection using a callback .
7333	Add package to collection .
7334	Sets the geocoding address .
7335	Set the geocoding coordinate .
7336	Set the bounding box .
7337	Sets the region of the geocoding request .
7338	Sets the language of the geocoding request .
7339	Load a template file .
7340	Get route instance .
7341	Parse a YAML string into an array .
7342	Set flags for WordPress .
7343	Sort an array by key .
7344	Returns the current request method .
7345	Returns the scheme of the URL .
7346	Returns the current host .
7347	Returns the root host of the URI .
7348	Wether the current request is over SSL .
7349	Checks if the current host is a local host .
7350	Sets the location type .
7351	Escapes all non - ascii characters with VWS .
7352	Returns the status of the directional requests
7353	Overload data .
7354	overload property data
7355	Writable overload property data .
7356	Overload properties .
7357	Opens a URL .
7358	Set the marker image anchor .
7359	Set the origin of the marker image .
7360	Sets the scaled size of the image .
7361	Sets the size of the image .
7362	Renders the InfoWindow .
7363	Renders the open method .
7364	Renders the info window .
7365	Register module providers .
7366	Get the absolute path to an asset file .
7367	Load the routes for the modules .
7368	Check if a function should be executed .
7369	Renders a ground overlay .
7370	Emits a response .
7371	Sets a value in the cache .
7372	Get an item from the cache .
7373	Unset an item from the cache .
7374	Unsets an item from the cache based on a pattern .
7375	Add a value to cache by reference
7376	Unset cache by reference
7377	Unset cache by ref key pattern
7378	Renders a map type control .
7379	Quote a value for use in a query .
7380	Quote a string for use in a query
7381	Quote a value for use in a query
7382	Renders a map type control style .
7383	Signs a URL
7384	Get a highlighter for a search term .
7385	Generates a shard ID from a string .
7386	Assign a shard ID to a string .
7387	Sets the travel mode for the step .
7388	Sets the prefix of the javascript variable .
7389	Select options .
7390	Dropdown items .
7391	Render a StreetViewControl .
7392	Normalize the given value .
7393	Checks if a value matches a regular expression
7394	Normalize a string .
7395	brackets special characters
7396	Converts a URL to a URI pattern .
7397	Sets the width unit .
7398	Sets the height unit .
7399	Generate a new random key .
7400	Checks if the given value is a valid string .
7401	Strip the query string from a URL URI .
7402	Parse a query string into an array .
7403	Builds a query string .
7404	Add sha256 signature to url
7405	Remove SHA256 signature from URL URI
7406	Check sha256 signature
7407	Set the coordinates of the marker .
7408	Adds a poly coordinate to the marker .
7409	Create a new customer .
7410	Update a customer .
7411	Returns the unit of the given amount .
7412	Get scope entity by identifier
7413	Renders a ScaleControl .
7414	Generates the URL for a geocoder request .
7415	Builds a GeocoderResponse object from a response object .
7416	Builds a geocoder result object
7417	Builds the geocoder address components .
7418	Builds a GeocoderAddressComponent object from the provided JSON object .
7419	Builds GeocoderGeometry object from provided geocoder geometry .
7420	Process a distance matrix request and return the response .
7421	Generates the http query string for the given distance matrix request .
7422	Parse the response
7423	Builds a distance matrix response object .
7424	Build the distance matrix rows .
7425	Builds a distance matrix response row .
7426	Builds a DistanceMatrixResponseElement object from a DOMElement object .
7427	Renders a point .
7428	Extracts the parameter strings from a type parameter string .
7429	Parses a list of parameter strings .
7430	Returns the current request headers .
7431	Send yes cache headers .
7432	Send no cache headers .
7433	Status slug .
7434	Returns status message .
7435	Sends HTTP status .
7436	Parse HTTP headers .
7437	Remove tags from a string
7438	Register database migrations .
7439	Register module translations .
7440	Sets the pixel offset .
7441	Set info window open event .
7442	Render a PanControl .
7443	Returns an array of mouse events .
7444	Sets the map type ids .
7445	Add a map type id
7446	Sets the map type control style .
7447	Sets a cookie value .
7448	Returns the value of the specified cookie .
7449	Render a dom event .
7450	Renders a dom event once .
7451	Renders an event .
7452	Render event once
7453	Renders a Google Maps animation .
7454	Render a ZoomControl .
7455	Get the maximum execution time .
7456	Check slug .
7457	Returns the address components .
7458	Sets the list of address components .
7459	Sets the partial match of the geocoding result .
7460	URL gravatar .
7461	Sets the center of the map
7462	Checks if a map option exists .
7463	Sets the map options .
7464	Returns the map option value .
7465	Sets a map option .
7466	Removes a map option .
7467	Checks if a stylesheet option exists
7468	Sets the stylesheet options .
7469	Returns the value of a stylesheet option .
7470	Sets a stylesheet option
7471	Removes a stylesheet option
7472	Sets the map type control .
7473	Set the overview map control .
7474	Set Pan Control
7475	Set the value of the rotateControl property
7476	Set the scale control for this map .
7477	Set the street view control for this map .
7478	Set the zoom control
7479	Add a marker to the marker cluster
7480	Add an info window
7481	Add a new polyline
7482	Add an encoded polyline
7483	Add a polygon to the map
7484	Add a rectangle
7485	Add a circle
7486	Add ground overlay
7487	Sets a value to the cache .
7488	Deletes the cached value .
7489	Sets whether or not the request should avoid highways
7490	Sets whether or not to avoid tolls should be performed .
7491	Sets the destination of the request .
7492	Set whether or not to optimize the waypoints
7493	Sets the origin of the request .
7494	Sets whether or not to provide route alternatives .
7495	Sets the region of the direction request .
7496	Sets the language of the direction request .
7497	Sets the travelMode
7498	Sets the unit system of the direction request .
7499	Sets the list of waypoints .
7500	Add a waypoint .
7501	Checks if the transformation is valid .
7502	Make a POST request with JSON data .
7503	Log an issue .
7504	Log a review .
7505	Write log file lines .
7506	Cleans a log event .
7507	Maybe rotate log files .
7508	Make a cURL request and return the result as a stdClass .
7509	Parse a JSON - LD document .
7510	Build the document .
7511	Parse a section .
7512	Parses a YAML string into an array .
7513	Get query var .
7514	Get route template .
7515	Gets a remote OAuth object .
7516	Generate a hash for a remote request .
7517	Converts a value to ASCII .
7518	Returns the status of the distance matrix
7519	Strips leading whitespace from a string .
7520	Sets the steps .
7521	Create a new route and return the response .
7522	Build DirectionsResponse object from API response .
7523	Build the directions routes .
7524	Builds the directions route .
7525	Build directions legs .
7526	Builds DirectionsLeg object from provided directionsLeg object .
7527	Builds the directions steps .
7528	Builds the directions step .
7529	Lightens the current color by a given percentage .
7530	Darkens this color by a given percentage .
7531	Saturate the color by a given percentage .
7532	Desaturate the color by a given percentage .
7533	Mix the current color with another color .
7534	Starts a new session .
7535	Checks if a version is valid .
7536	Checks if the version is a valid development version .
7537	Checks if a version is a valid stable version .
7538	Get the date for a given version .
7539	Returns the time of the version .
7540	Return a new instance with no caching headers added .
7541	Returns a new instance with a success response .
7542	Response with error .
7543	Output the response .
7544	Sets the legs .
7545	Sets the list of warnings .
7546	Sets the waypoint order .
7547	Renders a zoom control style .
7548	Get metadata by key or all metadata .
7549	Issue an access token
7550	Resource Request .
7551	Retrieve access token repository .
7552	Adds a value to the collection .
7553	Remove a value from the session
7554	Render Google Map API .
7555	Sets the list of elements .
7556	Render a control position .
7557	Returns the current IP address .
7558	Get the region of an IP address .
7559	Get the country for a given IP address
7560	Check if request is ajax
7561	Check if this is an API request
7562	Get or set the currently doing REST action .
7563	Check if we are currently doing an action .
7564	Subscribe a new user to a list
7565	Get a single member from a list
7566	Update a list member
7567	Delete a user from a list
7568	Generates a SHA1 hash from a string .
7569	Adjust luminosity .
7570	Cleans a hexadecimal number .
7571	Maybe empty numeric arrays .
7572	Create a new request instance .
7573	Create a new RequestBody instance .
7574	Maybe empty numeric arrays .
7575	Renders a rectangle .
7576	Transforms an array into an HTML string .
7577	Convert a multidimensional array into a DOM element .
7578	Renders a marker .
7579	Generate a license key .
7580	Returns an array of library names for the given map
7581	Escapes the order .
7582	Serializes a Closure into a string .
7583	Unserialize a closure .
7584	Serialize a value into a string .
7585	Maybe unserialize a value .
7586	Embedly markup .
7587	Get embed - ly cache .
7588	Embed via WordPress .
7589	Renders a polyline .
7590	Set the south west coordinate .
7591	Sets the North East coordinate .
7592	Get the center of the zone .
7593	Convert a string to bytes .
7594	Get remote bytes .
7595	Un - build a URL from an array of parts .
7596	Render a LatLng object
7597	Renders a marker image .
7598	Parses an XML string and returns its plural form .
7599	Pluralizes an XML string .
7600	Invalid distance matrix request travel mode .
7601	Parse a host string into an array .
7602	Unparse the name and port from the parts .
7603	Set the marker position .
7604	Set the marker animation .
7605	Sets the icon of the marker .
7606	Set the marker shadow .
7607	Sets the marker shape .
7608	Header ID callback .
7609	Get first image url from markdown
7610	Convert a string into HTML attributes .
7611	Set the bounding box of the overlay .
7612	Get the message for the model .
7613	Get validation messages .
7614	Get the error data .
7615	Add error .
7616	Adds a coordinate to the polygon .
7617	Load an HTML document .
7618	Minify JavaScript and CSS .
7619	Indents the given node recursively .
7620	Adds the organization to the document if the document is an UserInterface .
7621	Creates a view model for the set password action
7622	Get the organization entity .
7623	Create a view model for an error
7624	Add elixir asset
7625	Reverses the styles order
7626	Add first asset
7627	Add a file after another file
7628	Add meta data .
7629	Render all meta tags .
7630	Load a controller from a file .
7631	Load a manifest file .
7632	Create query .
7633	Sends an invitation email to a user .
7634	Validate email .
7635	Load or create a user
7636	Loads the organization .
7637	Proxy to the organization .
7638	Get all hiring organizations .
7639	Find an organization by name
7640	Finds an entity by user id
7641	Find a employee by user id
7642	Creates a new organization entity with the given name .
7643	Find a draft document .
7644	Initialises the contact form .
7645	Returns true if the given user is a employee .
7646	Update the permissions for this organization .
7647	Set the organization name .
7648	Sets the permissions .
7649	Get image .
7650	Set the contact .
7651	Get employees .
7652	Returns the specified user s employee .
7653	Get Employees by Role
7654	Set the creation options .
7655	Initializes the employees fieldset .
7656	Returns the formular part of the organization
7657	Returns the URI of the organization image .
7658	Store an organization image .
7659	Extract values from an object
7660	Hydrate a value .
7661	Check if the user has permission to create jobs .
7662	Configure the form .
7663	Ensure that the order number is correct .
7664	Encrypt the merchant order with 3DES .
7665	Create Merchant Signature Notif
7666	Validates a notification signature
7667	Signs a DS_Merchant_Order
7668	Make a request to the API .
7669	Get ticket articles
7670	Make a request to the API .
7671	Make a POST request .
7672	Make a PUT request .
7673	Get this object for a ticket
7674	Get a value by key .
7675	Get an object
7676	Fetch all objects
7677	Create the object
7678	Update the object
7679	Delete the current object
7680	Get the URL for a resource method
7681	Get a ticket
7682	Add an item to a ticket
7683	Search for objects matching a search term .
7684	Remove a ticket from an object
7685	Deletes a shared memory block from a database file .
7686	High level function to fetch the proxy type
7687	Get connection info
7688	Executes the server loop .
7689	Executes the API request .
7690	Applies a callback to each item in the collection .
7691	Get an item from the collection .
7692	Get a source from the copy history
7693	Fetch data from Vk API
7694	Validates a permissions against a bitmask
7695	Set a query parameter .
7696	Add multiple params at once
7697	Create a request transaction .
7698	Save a photo
7699	Start callback .
7700	Get the access token for the given code .
7701	Converts the hit builder into an array of items .
7702	Executes a search query .
7703	Replaces all dots except the last three with an underscore .
7704	Replaces all dots except the last two .
7705	Replace all dots except the last .
7706	Converts an intl formatter to malot .
7707	Converts a malot - to - intl formatter to an intl - formatted string .
7708	Adds the configuration for the picker .
7709	Bind Alexa request to the IoC container .
7710	Register the Middleware .
7711	Resumes the audio player .
7712	Get Alexa request instance .
7713	Add the request middleware to the beginning of the application .
7714	Checks if a route matches a request
7715	Create Alexa Route instance .
7716	Get a value from the session .
7717	Update a slot .
7718	Get validators .
7719	Compiles the route
7720	Get the certificate from the request .
7721	Prepare response data
7722	Send the request through the Alexa router .
7723	Gather the middleware from the application .
7724	Persists the certificate .
7725	Retrieves the certificate from the store .
7726	Calculates the file path for the given certificate chain URI .
7727	Sets the list of custom protected words .
7728	Capitalizes a string .
7729	Normalizes all whitespace and punctuation in a string
7730	Process string parts .
7731	Process the first sentence words in parts
7732	Process the last word in parts
7733	Process a word .
7734	Replace a string using a regular expression .
7735	Get the professional suffix for the given name .
7736	Break the name into words
7737	Check if a word is a salutation
7738	Check if a word is a line suffix
7739	Generate Emoji PHP constants .
7740	Chop off a string .
7741	Wordsmith emojify .
7742	Get the first word of a string
7743	Checks if the given value is a string .
7744	Get the last word of a string
7745	Converts roman numerals to lower case .
7746	Converts a string into Markdown .
7747	Reads the time of a string
7748	WordSMith smartypants .
7749	Gets the substring after the first occurrence of a separator .
7750	Gets the substring after the last occurrence of a separator .
7751	Gets the substring before the first occurrence of a separator .
7752	Gets the substring before the last occurrence of a separator .
7753	Titleize a string .
7754	Trims whitespace from a string .
7755	Trims the left part of a string
7756	Trims the right part of a string
7757	Typogrify a string
7758	Roman numerals to upper case
7759	Wordsmith widont algorithm .
7760	Get a setting by name
7761	Get extension property icon
7762	Return the composer . json as an array .
7763	Display a listing of the specified tag .
7764	Show a post .
7765	Store a new tag in storage .
7766	Show tag for editing .
7767	Update the specified tag in storage .
7768	Destroy given tag .
7769	Show the index page .
7770	Clear the cache .
7771	Handle the download action .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Handle the config files .
7775	Handle the translations .
7776	Handle the package views .
7777	Show the profile page .
7778	Update the specified resource in storage .
7779	Log in the user .
7780	Get the current version of the canvas
7781	Fill post data .
7782	Enables an extension .
7783	Disables an extension
7784	Uninstalls an extension .
7785	Run the migrations for the extension .
7786	Get all enabled bootstrappers .
7787	Remove post_is_published_default from input
7788	Show the home page .
7789	Get the fields from the model .
7790	Get tag index data .
7791	Normal index data .
7792	Store a newly created post in storage .
7793	Update the post .
7794	Publishes a theme s public directory .
7795	Publish theme views .
7796	Untheme the theme .
7797	Returns the default theme .
7798	Get the active settings .
7799	get route middleware group
7800	Get installed middleware
7801	Get the admin middleware
7802	Get the current blog main path
7803	Get the blog prefix
7804	Get the admin prefix
7805	Get auth prefix
7806	Get password prefix
7807	Display a listing of posts and tags .
7808	Get the request data .
7809	Scan a file
7810	Multi - scan a file
7811	Perform a CONTSCAN command .
7812	Receive a response from the server .
7813	Process a single file .
7814	Validates a file .
7815	Sanitize a file name .
7816	Delete a file from the cache
7817	Moves an uploaded file to a new location .
7818	Get the list of themes .
7819	Get asset url
7820	Get the version of an asset
7821	Get the path to the theme .
7822	Make directory if not exists .
7823	Create a file if not exists .
7824	Get the path to the theme assets folder .
7825	Get the content of a template
7826	Create new assets .
7827	Fetch the translation for a message .
7828	Update a message translation .
7829	Flag a translation .
7830	Create asset .
7831	Downloads all translations .
7832	Upload all translations .
7833	Synchronize all translations .
7834	Callback for the MessageCatalogue . onTerminate event .
7835	Copy values from parent to projects .
7836	Add a hash to the directive .
7837	Returns the configured value .
7838	Search the class map for classes that match the namespace .
7839	Search for PSR - 4 mappings .
7840	After save callback .
7841	Before query callback .
7842	After the query has been executed we update the relation count .
7843	Sync new wastage items .
7844	Sync existing wastage items .
7845	Find product item by key .
7846	Check item integrity .
7847	Build item data
7848	Fill the given entity with the given attributes .
7849	Setup default criteria .
7850	Perform an action on an object
7851	Execute before or after action .
7852	Check if the attribute is valid .
7853	Performs the actual query .
7854	Set the pagination mode .
7855	Toggle exceptions .
7856	Applies the criteria to the query .
7857	Update an entity .
7858	Fetches a list of objects from the database .
7859	Find a model by its primary key .
7860	Finds a record by a set of criteria
7861	Get entities by criteria .
7862	Get items by keys .
7863	Get a list of models .
7864	Create a new query with the given attributes .
7865	Replaces placeholders in a configuration value .
7866	Sets the path to the view file
7867	Sends a file to the browser .
7868	Get the mime - type of a file
7869	Map an action to a controller exception .
7870	Sets an aspect
7871	Sets a new pointcut
7872	Returns the aspect manager pointcut
7873	Returns the list of candidate files for the class in the given path .
7874	Checks if a file is scannable .
7875	Returns a string representation of a PHP error constant .
7876	Dispatches an action .
7877	Invoke action method
7878	Checks whether the socket has activity
7879	Returns the bean definition with the passed name .
7880	Search and replace properties .
7881	Returns the constructor argument values for the given definition .
7882	Instantiates a bean using the bean definition s constructor .
7883	Instantiates a bean from the factory class .
7884	Instantiates a bean using the factory bean .
7885	Instantiates a bean from the bean definition .
7886	Create the bean dependencies .
7887	Apply an aspect to a target class
7888	Applies the specific aspects to the bean definition .
7889	Applies all global aspects to the bean definition .
7890	Applies all aspects to the bean definition .
7891	Creates a bean using the given definition .
7892	Setups the init and shutdown methods for the bean .
7893	Inject a non - setter method into a bean
7894	Inject a property of a bean
7895	Get a bean by name
7896	Returns the container instance .
7897	Fill the aware properties of a bean .
7898	Signal handler .
7899	Load a class
7900	Make a child bean .
7901	Populates the cache for each class annotated with the given annotations .
7902	Loads an XML file or an array of files .
7903	Loads the bean factory .
7904	Closes the connection .
7905	Opens a TCP connection .
7906	Free a peer .
7907	Creates the proxy class .
7908	Creates a string representation of a reflection parameter .
7909	Creates the code for a method
7910	Creates a proxy class .
7911	Load a YAML file into an associative array .
7912	Loads the bean factory from a YAML file .
7913	Load the AMI client
7914	Opens the event manager .
7915	Return a cache instance based on the cache impl
7916	Runs the after definition lifecycle listeners for a bean .
7917	Runs the beforeCreate lifecycle listeners for the bean definition .
7918	Runs the after create lifecycle listeners for the bean .
7919	Invokes the beforeAssemble lifecycle listeners for the bean .
7920	Invokes the afterAssemble lifecycle listeners for the bean .
7921	Opens the log file .
7922	Get all intercepted methods
7923	Returns the exception interceptors for a given method .
7924	Calls the interceptors for the given invocation
7925	Invokes the interceptor for an exception .
7926	Invokes the method and returns the result .
7927	Closes the socket .
7928	Read data from socket
7929	Opens a TCP connection .
7930	Adds an array of objects to the collection
7931	Builds the URI .
7932	Overwrite the app config .
7933	Resolve file path .
7934	Returns the published drop down list .
7935	Finds the Page model based on its alias . If the model is not found a 404 HTTP exception will be thrown .
7936	Build a link object .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Register the translations .
7939	Registers required client script .
7940	Returns the vote for an object with the given attributes .
7941	Get the from email address .
7942	Returns the user with the given username .
7943	Hydrate user data
7944	Creates a new user and returns it
7945	Sets the user s password .
7946	Checks if the given user matches the given password .
7947	Checks if the current user is logged in
7948	Finds a user by an array of criteria
7949	Find a record by an array of criteria
7950	Creates the common find sql
7951	Short description of method findCount
7952	Inserts a new user into the database .
7953	Update a user in the database .
7954	Deletes a user from the database .
7955	Validates the given user .
7956	Clear identity map
7957	Log in as a user .
7958	Initializes the signal handler .
7959	Reaper processes .
7960	Wait for all workers to complete .
7961	Get the next result from the pool .
7962	Get all the results from the pool .
7963	Apply a function to the pool .
7964	Get the number of pending jobs .
7965	Sends data to a socket
7966	Fetch data from a socket
7967	Migrate the data from the users table to the database .
7968	Register a new user .
7969	Confirms a user by email .
7970	Renders the login form .
7971	Resend a confirmation email .
7972	Renders a single user .
7973	Edits an existing user .
7974	Validates the user data .
7975	Connects to the application .
7976	Returns an array of supported formatters and their quality .
7977	Get the best formatter for the given request .
7978	Format the response .
7979	Detect path to . env file .
7980	Determine the preferred type based on the Accept header .
7981	Creates a new instance of this class .
7982	Run the application .
7983	Handle an action .
7984	Get the domain payload .
7985	Execute the responder and return the response .
7986	Create HTTP status response .
7987	Get the Command class name from a resource .
7988	Runs the before commands of a command .
7989	Get the per page from a model class .
7990	Add where statements to the query .
7991	Bootstrap the application services .
7992	Allow HTTP request methods .
7993	Get or set the route s pattern .
7994	Tokenize the pattern .
7995	Returns the compiled regular expression .
7996	Returns the current set of variables .
7997	Check if the route matches the given request
7998	Build the variables from the given values .
7999	Dispatches the request to the next middleware .
8000	Generate a URL based on the given parameters .
8001	Compile regex and variables .
8002	Check if the route matches the given request .
8003	Generate a URL based on the given parameters .
8004	Tokenize a pattern .
8005	Tokenizes a pattern .
8006	Tokenize a pattern segment .
8007	Splits a pattern into its segments .
8008	Compiles a token into a regular expression .
8009	Scopify options .
8010	Binds a route to a route .
8011	Add a route group .
8012	Creates a route for the given request .
8013	Normalizes a request array .
8014	Find the matching route for the given request .
8015	Create a URL to a named route .
8016	Clears the router .
8017	Creates the JSON representation of the workflow .
8018	Get the contents of the file .
8019	Get the access token .
8020	List address books
8021	Get emails from book
8022	Add emails to address book
8023	Get address book cost
8024	Create a campaign
8025	Add sender .
8026	Activate Sender by activation code
8027	Get list of website subscriptions
8028	Set subscription state
8029	Create a push task
8030	Hash the name .
8031	Send request to website .
8032	Sends request to API .
8033	Pre send to api check
8034	Decode a response string into an array .
8035	Decode a URL encoded response .
8036	Fetch mails from IMAP server
8037	Mark a message as processed
8038	Get the type of the mail .
8039	This method is used to send an auto refund request .
8040	Auto applies SSL
8041	Auto - replaces a SSL certificate
8042	Auto revoke SSL
8043	Collect SSL information
8044	Get a list of all available email addresses
8045	Sends the SSLCHECKER message to the server
8046	Report web host
8047	Enter the Domain Control Validation code
8048	Creates an exception based on the response array
8049	Generate meta tags
8050	Sets the description .
8051	Reset all properties to their default values .
8052	Register the service provider bindings .
8053	Generates the open graph .
8054	Adds a raw entry .
8055	Prepare data .
8056	Check if the sitemap contains a given URL .
8057	Validate sitemap data .
8058	Fill the index of all commands .
8059	Fill the type of all commands .
8060	Adds an index to the query .
8061	Adds a type to the query .
8062	Set the index settings
8063	Deletes a document from the index .
8064	Creates a new index
8065	Update the settings of an index
8066	Execute the raw request
8067	Returns the JSON representation of the query .
8068	Add a sort to the query .
8069	Add a facet to the query .
8070	Composes the final query .
8071	Convert params to array
8072	Add a node to the cluster .
8073	Add a must filter to the query .
8074	Delete a document from the database
8075	Add one or more documents to the command .
8076	Executes the command and returns the result .
8077	Add a new request to the queue
8078	Make a POST request .
8079	Make a PUT request .
8080	Make a DELETE request .
8081	Execute all pending requests
8082	Adds multiple options at once .
8083	Set a random node in the request
8084	Autodetect nodes .
8085	Add a new document to the batch command
8086	Executes the current command .
8087	Finalizes the current command .
8088	Check the current command
8089	Get the gallery for the given model
8090	Init a new Album
8091	Create an Album
8092	Generate Album Name
8093	Upload a picture
8094	Delete the picture from the database .
8095	Get resize to size
8096	Add image styles
8097	Delete all versions of a pictures
8098	Save a picture
8099	Create extra images
8100	Zebra_Image constructor .
8101	Prepare an image for saving
8102	Configure Gallery .
8103	Configure the database .
8104	Create plugin config file if not exists .
8105	Check summaries for all operations
8106	Generate the documentation .
8107	Renders a link to upload pictures
8108	showroom function .
8109	Generates the template for the showroom method .
8110	Load jQuery and SWipebox scripts
8111	Delete a picture .
8112	Action sort . Used to sort photos .
8113	Lists channel sections .
8114	Starts the worker .
8115	Stop the process
8116	Kill process .
8117	Sends a payload to the child .
8118	Called when the worker starts .
8119	Fork a new thread and execute the callback
8120	Get the AuthnRequest object
8121	Parse a SAML response .
8122	Returns the binaries .
8123	Get pending binaries .
8124	Update the installed binary .
8125	Update a single binary
8126	Starts the selenium process .
8127	Clean up the install directory .
8128	Assert start conditions
8129	Register selenium binaries .
8130	Creates a new binary .
8131	Get valid external URL value .
8132	Returns the name of the Linux file .
8133	Save the contents to a directory .
8134	Called when a notification is received from the client .
8135	Watch progress .
8136	Get the pre message for a binary update .
8137	Get post message .
8138	Add a pipe to the pipeline
8139	Convert a single item .
8140	Convert item value .
8141	Write item to pipe .
8142	Get transport from request .
8143	Validates a password according to the given policy .
8144	Get the taxonomy for the entity .
8145	Check if the given value is valid .
8146	Get entity descriptor .
8147	Get an environment variable .
8148	Returns the client IP address .
8149	Returns the current URL .
8150	Converts an array into a query string .
8151	Checks if a property is set .
8152	Lookup an address
8153	Do includes and extends .
8154	Execute actions defined in config file
8155	Downs an item in an array .
8156	Move an item up in an array .
8157	Updates the form with the given UUID .
8158	Get field from payload .
8159	Get a matching item from the collection .
8160	Fires an event when an item is added to an aggregate .
8161	Gets an item from an aggregate .
8162	Replaces variables in the given value with their respective values .
8163	Load configuration from JSON
8164	Load a JSON file as an array .
8165	Set the latitude and longitude
8166	Get latlng object
8167	Returns an error response .
8168	Redirects to form with given uuid .
8169	Creates a new aggregate form .
8170	Handles the removal of an item from a form .
8171	Check if we should use the post - autoload - dump script .
8172	Get the plugin class names for a given package .
8173	Get the install name of a package .
8174	Guess the install name from a package name .
8175	Map the root extra of a package .
8176	Writes the plugin configuration into a PHP array .
8177	Get the root package .
8178	Get the install path for a package .
8179	Initializes the install directory for the given package type
8180	Generate the layout palette .
8181	Get the meta palette of a palette .
8182	Create an exception that indicates that the stack is empty .
8183	Enter the theme context .
8184	Sets the application context configuration .
8185	Get color by identifier .
8186	Rotates the color .
8187	Converts HSV to RGB .
8188	Enter a context .
8189	Leaves the context .
8190	Switches the context .
8191	Load config from bundles .
8192	Set the config types argument .
8193	Get the templates for the given data container .
8194	Render the page picker .
8195	Get all articles
8196	Get all modules
8197	Prepare the template for rendering .
8198	Parse the buffer using the post render filter .
8199	Registers tagged services .
8200	Initializes the application environment .
8201	Initializes the layout .
8202	Add a child element .
8203	Compiles a PHTML string into PHTML .
8204	Compiles a node into PHTML .
8205	Throws an exception .
8206	Returns the PHP type for the given Doctrine type .
8207	Get the file reflector .
8208	Get the doc block for a property .
8209	Get the docblock from a class property .
8210	Extract the docblock from a method .
8211	Returns the PHP type and class for the given doc type .
8212	Logs in the user with the given username and password .
8213	Init client .
8214	Get login token from Wallhaven s homepage .
8215	Search for wallpapers .
8216	Extract a value from a list of extractors .
8217	Returns the list of tags .
8218	Downloads the image to the specified directory .
8219	Get the wallpapers .
8220	Downloads all wallpapers .
8221	Extract the PHP type of the property from the mutator .
8222	Extracts the type from an accessor method .
8223	Extract a type from a reflection type .
8224	Checks if the given property is public .
8225	Get the accessor method .
8226	Get the mutator method .
8227	Gets the property name from a method name .
8228	Load the Laravel extension .
8229	Create the PhpspecTestbench application .
8230	Set a configuration value .
8231	Sets multiple values at once .
8232	Removes a section .
8233	Merges a section
8234	Renames a value in a section
8235	Renames a section
8236	Read an INI file
8237	Read and merge an INI object
8238	Merges the content of an ini object into the given base content object .
8239	Create an INI value .
8240	Set an ini value
8241	Set the values of the last ini section
8242	Returns the modifiers values .
8243	Remove a value from all modifiers .
8244	Removes a section from all modifiers .
8245	Sets a value in a section .
8246	Set a value on the master
8247	Set values on master
8248	Get a value from the master section
8249	Returns the values of the specified section
8250	Removes a value
8251	Remove a value from the master ini file
8252	Is the given section?
8253	Returns the values of a section .
8254	Create file loader .
8255	Returns the class name for the given short type .
8256	Create a new cookie .
8257	Execute the convert command
8258	Determines the file to write to .
8259	Ask the user which bundle to convert
8260	Write config to file .
8261	Create a new Dumper instance .
8262	Converts a string to a new format .
8263	Read a session from the session storage
8264	Get the routes .
8265	Sorts an array using a callback .
8266	Sets the stream offset .
8267	Gather data .
8268	Writes content to a file .
8269	Gets the options reader for the current command .
8270	Run a route and return a response .
8271	Gather the middleware for the given route .
8272	Flatten a multidimensional array .
8273	Load configuration files .
8274	Returns a closure that can be used to handle a slice .
8275	Parses a stage string into its name and parameters .
8276	Call a command with the given parameters .
8277	Sets the default values for a command .
8278	Get the path to the PHP executable .
8279	Returns the cerebro binary path .
8280	Executes the given command and returns the exit code .
8281	Returns the default input definition .
8282	Builds the route tree from the provided routes .
8283	Adds a route to a route tree .
8284	Get the matcher for the first segment .
8285	Create a FilesystemManager instance .
8286	Create a new cached factory instance .
8287	Returns the sum of all executed statements and their durations .
8288	Returns the total memory usage of all executed statements .
8289	Profile a call to the database .
8290	Resolve class alias .
8291	Checks whether the route matches the given pattern and optional translation .
8292	Creates a new Twig engine instance .
8293	Extend the view factory .
8294	Extend the engine resolver .
8295	Creates a twig environment .
8296	Create the Twig loader .
8297	Parse the data into an array .
8298	Creates a new RespectValidator based on the given rules .
8299	Create negative or optional validator .
8300	Create chainable validators .
8301	Parse a string rule .
8302	Parse parameters based on rule .
8303	Starts the server process .
8304	Stop web server .
8305	Get address from pid file .
8306	Checks if the process is running .
8307	Creates the PHP process to run the web server .
8308	Returns all registered event listeners .
8309	Removes an event listener from an event pattern .
8310	Returns true if the subject contains wildcards .
8311	Adds a listener pattern .
8312	Read the mandatory options .
8313	Build a multidimensional array .
8314	Get the response for the given request and exception .
8315	Get the response for the given exception .
8316	Get the displayer .
8317	Get the filtered displayers .
8318	Sort the displayers by content type .
8319	Add route lookups .
8320	Add an address to the email .
8321	Creates a new AssetsRenderer instance .
8322	Register base collectors .
8323	Register profiler collectors from configuration .
8324	Extend the event manager .
8325	Create a session manager instance .
8326	Create route dispatcher .
8327	Create router instance .
8328	Create UrlGenerator instance .
8329	Detects the current environment .
8330	Get the value of the env argument .
8331	Renders the JS assets .
8332	Process array of arrays .
8333	Process array of arrays .
8334	Returns a human - readable representation of the metadata .
8335	Get the loader paths .
8336	Builds the table rows .
8337	Get Whoops instance .
8338	Add where clauses to route .
8339	Merge group attributes into route .
8340	Converts an action to a controller action .
8341	Prepend the group namespace to the given uses .
8342	Prepends the last group prefix to the URI .
8343	Update the group stack .
8344	Creates a new Sanitizer instance .
8345	Adds a callback to be executed before the application is bootstrapped .
8346	Add a callback to be executed after bootstrapping .
8347	Bootstraps the application with the given bootstraps .
8348	Call the registered boot callbacks .
8349	Generates a unique session id .
8350	Merges new flash messages .
8351	Loads session values from handler .
8352	Read data from handler .
8353	Write request to handler .
8354	Resolve the current page .
8355	Ensure that all the values in the query are properly encoded .
8356	Extend the event manager with a TraceableEventManager .
8357	Get the found files .
8358	Get finder .
8359	Validate a template file .
8360	Displays the details in the specified format .
8361	Display all Twig files with valid syntax .
8362	Parse a middleware group .
8363	Checks the mandatory options .
8364	Get the configuration dimensions .
8365	Validate options .
8366	Checks for deprecated options .
8367	Register a new route .
8368	Get the URI for a resource .
8369	Get the wildcard for a resource .
8370	Get the resource prefix .
8371	Add resource destroy route .
8372	Get a nested resource URI .
8373	Get resource action .
8374	Get the route name for a resource .
8375	Slice the traveler through the container .
8376	Returns a request handler middleware .
8377	Find argument files .
8378	Returns the user s IP address .
8379	Checks if the given string is a valid IP address .
8380	Get the first IP address from the header line .
8381	Set the message domain .
8382	Validates the input .
8383	Validates the given middleware .
8384	Create a translation manager instance .
8385	Creates a schedule instance .
8386	Get computed data .
8387	Create a Swift Mailer instance .
8388	Create a mailer instance .
8389	Set the global address .
8390	Create the tooltip group .
8391	Create tabs .
8392	Create the table .
8393	Create dropdown menu content .
8394	Create metrics .
8395	Clones a variable
8396	Get the VarCloner instance .
8397	Returns the HtmlDumper instance .
8398	Appends code to the buffer .
8399	Append a line of code .
8400	Add Twig extensions .
8401	Do sort middleware by priority map .
8402	Move a middleware from one position to another .
8403	Create an instance of the aggregate logger driver .
8404	Create an instance of the emergency log driver .
8405	Create a single logger instance .
8406	Create a daily logger instance .
8407	Create an instance of the syslog log driver .
8408	Create an instance of the error log driver .
8409	Create an instance of the Slack log driver .
8410	Create a custom logger driver .
8411	Creates the monolog log driver .
8412	Push processors to Monolog driver .
8413	Create a ServerRequest instance from an array .
8414	Returns the singular form of the given value .
8415	Match case .
8416	Returns a new instance of the local adapter .
8417	Create the cerebro application .
8418	Merge a new group into a new group .
8419	Formats the group suffix .
8420	Check for specific environment file .
8421	Set the environment file path .
8422	Get a transport instance .
8423	Create a new transport .
8424	Check if the service has a transport .
8425	Create a SMTP transport instance .
8426	Create a new mailgun transport instance .
8427	Create a SparkPostTransport instance .
8428	Creates a new SesTransport instance .
8429	Create repository instance .
8430	Updates the route tree with new matchers and contents .
8431	Register console events .
8432	Extend Twig Environment .
8433	Register the Viserio Twig extension .
8434	Returns an array of all allowed HTTP methods .
8435	Adds a route to the map .
8436	Checks if the stream is a pipe .
8437	Adds a mime type .
8438	Add parser .
8439	Parse a payload into an array .
8440	Get a parser for a given mime type .
8441	Get the MIME type of the payload .
8442	Set up class properties .
8443	Returns the request duration in microseconds .
8444	Stops a previously started measure .
8445	Adds a measure to the metrics .
8446	Returns a unique identifier for the given exception .
8447	Generates a version 4 UUID .
8448	Sets the headers .
8449	Validates HTTP protocol version .
8450	Checks if an array contains only strings .
8451	Filters a header value .
8452	Get the retry time .
8453	Get the invoker .
8454	Creates an instance for an invalid type .
8455	Extend the cache item pool .
8456	Extend the given cache with a simple traceable cache .
8457	Get an environment variable .
8458	Parse the parameter .
8459	Replaces the data with a new value .
8460	Creates the database table .
8461	Get the PDO connection .
8462	Connect to the database using a DSN .
8463	Get all files in a directory .
8464	Renders the assets into HTML .
8465	Get the last modified time of an asset type .
8466	Runs the callback and returns the response .
8467	The scheduled cron job should not be overlapping .
8468	Extend the log manager with a DebugProcessor if enabled .
8469	Extend profiler .
8470	Import a DOMDocument into a SimpleXMLElement .
8471	Loads a DOMDocument from a file .
8472	Load an XML string into a DOMDocument .
8473	Converts a PHP variable to its PHP equivalent .
8474	Validates a DOM document against a schema or a callable .
8475	Converts a string to a string .
8476	Checks if the given entry contains a valid header .
8477	Adds references to the given entry .
8478	Process obsolete entry .
8479	Process the previous entry .
8480	Extract multi lines .
8481	Extract headers from entries .
8482	Checks if the given file exists .
8483	Sets the uploaded file error status .
8484	Sets the stream or file .
8485	Validates the upload status and move status .
8486	Mock a service .
8487	Parses a command expression .
8488	Parses an argument token .
8489	Parses an option token .
8490	Extracts the description from a token .
8491	Validates the cookie name .
8492	Validates the cookie value .
8493	Set a value in the scope .
8494	Get the to addresses .
8495	Create an instance of the MongoDB cache driver .
8496	Create an instance of the redis cache driver .
8497	Create a new redis cache pool instance .
8498	Create a filesystem cache pool instance .
8499	Create a new Memcached cache pool instance .
8500	Create an instance of the memcache cache driver .
8501	Get collector by name .
8502	Compiles a set of routes into a route class template .
8503	Creates the router class template .
8504	Compiles the route tree .
8505	Compiles the route for a matching HTTP method .
8506	Compile disallowed http method or not found .
8507	Compile the found route .
8508	Returns the debug logger if any .
8509	Gets the computed error count .
8510	Groups the log levels by priority .
8511	Returns the event listener .
8512	Bind the event to the dispatcher .
8513	Unbind the event listeners from the dispatcher .
8514	Creates a regex for the given event pattern .
8515	Get the value for a given key .
8516	Set a value for a given key .
8517	Processes the parameters of the given data .
8518	Process parameter .
8519	Renders an exception .
8520	Renders the editor .
8521	Renders the exception trace .
8522	Get the backtrace for an exception .
8523	Get the stack trace of the exception .
8524	Formats an array of arguments .
8525	Returns a range of lines from a file .
8526	Get the contents of a file
8527	Normalize the name .
8528	Resolve a binding .
8529	Create a new instance of a class .
8530	Resolve a method .
8531	Resolve a parameter .
8532	Resolve the parameters .
8533	Get the reflector for the given method .
8534	Checks if the given value is a function .
8535	Merges parameters into the root parameters .
8536	Writes the contents of a file .
8537	Write a file to the filesystem .
8538	Updates the stream of a file .
8539	Decrypts a stream .
8540	Encrypt a stream .
8541	Decrypts a string .
8542	Encrypt a string .
8543	Get a stream from a string
8544	Creates a transport factory .
8545	Create a new mail manager instance .
8546	Get the version number of the XLIFF document .
8547	Returns the schema for the given XLIFF version .
8548	Fixes the location of an XML Schema .
8549	Parse the given visibility .
8550	Sanitize data according to the given rules .
8551	Run global sanitizers .
8552	Sanitize a single field .
8553	Executes the given sanitizer .
8554	Resolve the callback .
8555	Resolves a string expression to a command .
8556	Creates a new command from a string expression and a callable .
8557	Get the default values for the given callable .
8558	Asserts that the given callable is valid .
8559	Checks if the callable is a static call to a non - static method .
8560	Create a cookie jar instance .
8561	Converts a single element .
8562	Adds a node to the given element .
8563	Adds a collection node .
8564	Create root element .
8565	Casts an object to an array .
8566	Returns the list of all listeners that were called .
8567	Returns the list of uncalled listeners .
8568	Validate the sameSite attribute .
8569	Normalize the expiration time .
8570	Normalize domain .
8571	Normalize the path .
8572	Get the expiration timestamp .
8573	Start collector .
8574	Applies the helpers to the translation .
8575	Filter the helpers from a translation string .
8576	Applies filters to the translation .
8577	Log translation .
8578	Collects a single message .
8579	Displays the files in the given format .
8580	Displays the files info in JSON format .
8581	Get all files in a given directory .
8582	Gets the input from STDIN .
8583	Get directory iterator .
8584	Validates an event name .
8585	Converts a human - readable number to bytes .
8586	Converts a string to a number .
8587	Get configuration from name .
8588	Create a new instance .
8589	Adds a extractor to the collection .
8590	Create alias loader instance .
8591	Get the cache path .
8592	Push a command onto the queue .
8593	Determine if the given command should be queued .
8594	Create the cookie session driver .
8595	Create the migrating session driver .
8596	Create a session based store instance .
8597	Builds the session .
8598	Build the encrypted session store .
8599	Parse route action .
8600	Returns the first value that passes the callback .
8601	Parses a note element into an array .
8602	Convert from UTF - 8 to UTF - 8 .
8603	Add a tag to the data .
8604	Create a log manager instance .
8605	Confirm to proceed .
8606	Get the default confirm callback .
8607	Injects the profiler into the given response .
8608	Collect data .
8609	Create the template .
8610	Create a new profile .
8611	Parses a log level .
8612	Start the session for the given request .
8613	Store the current URL in the session .
8614	Collect garbage .
8615	Add the cookie to the response .
8616	Create a response from a template .
8617	Find a template by name .
8618	Normalize file name .
8619	Parse the given view .
8620	Adds the content to the message .
8621	Send a Swift message .
8622	Returns true if the message should be sent .
8623	Create a new message instance .
8624	Call a message builder .
8625	Creates a view with the given data .
8626	Handle a route found .
8627	Prepare the URI path .
8628	Generate router file .
8629	Generate route cache directory .
8630	Get the path to a file .
8631	Checks if the given options are supported .
8632	Get the parser .
8633	Get the contents of a file
8634	Require a file only if it exists .
8635	Creates a symlink to a file or a directory .
8636	Sets the directories .
8637	Add a directory .
8638	Imports a language file .
8639	Add a message catalogue .
8640	Set the fallback message catalogue for the given language .
8641	Get the fallback message catalogue for the given language .
8642	Add presenter .
8643	Checks for more pages .
8644	Returns the display address of the host .
8645	Finds the front controller file .
8646	Finds the hostname and port .
8647	Finds the best port available to run the web server .
8648	Escapes a string for HTML .
8649	Get sorted data .
8650	Create append stream .
8651	Parses the given tokens and returns an array of messages .
8652	Seeks to the next non - whitespace token in the iterator .
8653	Get the value from the iterator .
8654	Create a new TraceablePDODecorater instance .
8655	Decrypt the request cookies .
8656	Encrypt the response cookies .
8657	Create a new cookie instance from the given values .
8658	Register a console command .
8659	Get the console instance .
8660	Initializes the project directories .
8661	Find a view by it s name .
8662	Get the namespace segments .
8663	Find a view in a list of paths .
8664	Get possible view files .
8665	Get information about the listener .
8666	Render the cookies into a set - cookie header .
8667	Extend Twig Environment .
8668	Returns all messages .
8669	Add a message to the log .
8670	Add a middleware alias .
8671	Get logs from a socket .
8672	Handle view exception .
8673	Get error exception .
8674	Get the cache path .
8675	Ensure that a statistic proxy exists .
8676	Format the static proxy stub .
8677	Register the Markdown engine .
8678	Cleans up the export string .
8679	Adds the t - comment to the output .
8680	Adds references to the output .
8681	Adds flags to the output .
8682	Adds the previous entry to the output .
8683	Add msgid to the output .
8684	Add msgid_plural to the output .
8685	Adds the msgstr to the output .
8686	Add headers to the output .
8687	Get pagination links .
8688	Create the cache connector .
8689	Ensure the user is correct .
8690	Checks if cron expression passes
8691	Run the command in the foreground .
8692	Run the command in the background .
8693	Calls the before callbacks .
8694	Call all after callbacks .
8695	Returns a closure that returns a timestamp between the given start and end time .
8696	Is midnight between start and end time .
8697	Merges the parent and child matchers .
8698	Optimize an array of matchers .
8699	Optimizes the given matcher .
8700	Optimize the order of matchers .
8701	Create a new html displayer instance .
8702	Create a view displayer instance .
8703	Create a new WhoopsPrettyDisplayer instance .
8704	Get the number of recipients in a message .
8705	Bootstrap the application .
8706	Sends the request through the router and returns the response .
8707	Render the given exception .
8708	Pipe the request through the middleware and the router .
8709	Compile the parameters into a string .
8710	Sets the value at the given offset .
8711	Get the invoker .
8712	Bind a plain type .
8713	Binds a service to the container .
8714	Bind an abstract to a concrete type .
8715	Resolve the given abstract into a plain value .
8716	Resolve a service .
8717	Resolve a singleton binding .
8718	Extend an abstract with a resolved value .
8719	Format the given implementation to be used for contextual binding .
8720	Gets the message ID from the response .
8721	Converts an array of emails into an array of email addresses .
8722	Get a MIME part from a Swift message .
8723	Get the message payload .
8724	Process the recipients .
8725	Process message parts .
8726	Process message headers .
8727	Checks the server requirements .
8728	Returns the file extension for the given path .
8729	Create a new view instance .
8730	Checks if haystack ends with needle
8731	Render the cookies into a cookie header .
8732	Converts a cookie string to a list of cookies .
8733	Sets the error and exit code .
8734	Sets the exit code .
8735	Returns the URL for the given route .
8736	Prepare the route path .
8737	Check if the scheme is required for the route .
8738	Add the port and scheme to the URI .
8739	Replace route parameters .
8740	Replaces named parameters in a path .
8741	Adds the query string to the given URI .
8742	Get route query string .
8743	Parses a where clause .
8744	Get the middleware for the current controller .
8745	Get the disabled middleware for the current controller .
8746	Adds a cookie to the collection .
8747	Splits a cookie pair into an array .
8748	Injects the Content - Type header if needed .
8749	Converts a string to a number of words .
8750	Generate a random string .
8751	Replaces the first occurrence of a string in a string
8752	Replaces the last occurrence of a string in a string
8753	Replaces a string by a position .
8754	Returns the verbosity level .
8755	Run the command and return the exit code .
8756	Call a console command .
8757	Call a command with silent output .
8758	Get the arguments of the command .
8759	Get the value of an option from the command .
8760	Asks a question .
8761	Ask a question with the given choices and return the answer .
8762	Ask a question with a list of choices .
8763	Renders a table .
8764	Write a line to the console .
8765	Output an info message .
8766	Output a comment to the console .
8767	Output a question message .
8768	Output an error message .
8769	Adds a warning message to the output .
8770	Configures the command using a Fluent Definition .
8771	Adds arguments and options to the command .
8772	Get the transmission ID from the response .
8773	Get the recipients of the message .
8774	Renders the template .
8775	Add an exception that should not be reported .
8776	Reports an exception to the logger .
8777	Add transformer .
8778	Handles PHP errors .
8779	Handles the shutdown of the application .
8780	Registers the exception handler .
8781	Registers the shutdown handler .
8782	Prepare an exception .
8783	Get transformed exception .
8784	Returns the level for the given exception .
8785	Checks if the exception should not be reported .
8786	Add dumper .
8787	Dumps an array into a string .
8788	Get dumper instance .
8789	Returns a string representation of the given Swift_Message .
8790	Get the parameters for the provided function .
8791	Converts a code point to its UTF - 8 equivalent .
8792	Register queueing dispatcher .
8793	Optimize the route tree .
8794	Extract common parent node .
8795	Get SQL with parameters .
8796	Attempts to open a file using the given mode .
8797	Creates a stream for the given resource .
8798	Copy the contents of a stream into a string .
8799	Copy the contents of a stream to another stream .
8800	Read a line from a stream .
8801	Sets the default path and domain .
8802	Get the path and domain .
8803	Get the handler .
8804	Updates the Host header based on the current URI .
8805	Filters the HTTP method .
8806	Creates a URI from the provided value .
8807	Returns the path without the file extension .
8808	Changes the extension of a file path .
8809	Create a cache manager instance .
8810	Returns true if the mock should receive the given arguments .
8811	Resolve a statical proxy instance .
8812	Check if the instance is a mock .
8813	Inflects a command segment .
8814	Sets the file to be sent .
8815	Set Content - Disposition header .
8816	Sets the Last - Modified header .
8817	Returns a new cookie with the specified value .
8818	Describes an object .
8819	Describes the commands in the application .
8820	Get the list of commands sorted by namespace .
8821	Create the cookies tab .
8822	Prepare request attributes .
8823	Prepare request headers .
8824	Prepare server params .
8825	Get the parsed body from the request .
8826	Export a value as a string .
8827	Get a crypted connection .
8828	Get cache configuration .
8829	Create a FilesystemAdapter instance .
8830	Parses a route pattern into a set of route segments .
8831	Generates a regular expression from a list of matches .
8832	Get the invoker .
8833	Checks if an object exists .
8834	Get target language from file .
8835	Create var_dump connection .
8836	Create a dump server instance .
8837	Checks if a path exists .
8838	Get the transformed path .
8839	Get the contents of a directory .
8840	Filter the contents by type .
8841	Checks if the CSRF and XSRF tokens match .
8842	Add XSRF - TOKEN cookie to response .
8843	Sanitize collected messages .
8844	Compute the message count .
8845	Sort messages by state .
8846	Adds a stream to the collection .
8847	Closes all open streams .
8848	Decode a GIF .
8849	Decodes the extension marker .
8850	Decode an image descriptor .
8851	Decode the image data .
8852	Set the order direction
8853	Returns the list of entities .
8854	Load the results from the API
8855	Sets the cities from an array
8856	Sets the list of PSTN networks from an array
8857	Loads PSTN networks for the country .
8858	Loads the cities of the country .
8859	Returns a list of all countries .
8860	Get a city by ID
8861	Add PKCS5 padding to a string .
8862	Get all countries .
8863	Update all PSTN networks
8864	Update PSTN networks
8865	Creates a mapping object from an array .
8866	Decodes the delay from the graphics control extension .
8867	Has Transparent Color
8868	Decode Disposal Method
8869	Get image size
8870	Get page offset
8871	Sets the offset
8872	Returns the country object .
8873	Converts the object to an array .
8874	Create a new object from a flat list
8875	Creates an instance from an array .
8876	Creates a DIDNumber object if it doesn t already exist .
8877	Generate unique hash
8878	Generate auth string
8879	Loads the invoice .
8880	Make a call to the didww service
8881	Get a frame by index .
8882	Adds an offset to the first frame .
8883	Add a size to the first frame .
8884	Get the netscape loops .
8885	Returns true if the screen descriptor contains a global color table .
8886	Counts the number of global colors in the screen descriptor .
8887	Returns the background color index .
8888	Adds a value to the first frame without the given property .
8889	Creates a new frame with the given property .
8890	Returns an array representation of the object .
8891	Get prepaid balancelist .
8892	Returns an array of all balances .
8893	Get a list of all balances
8894	Change the pre - paid balance of a customer
8895	Synchronize Prepaid Balance
8896	Sets the width and height of the canvas
8897	Set from decoded object
8898	Create a Frame from a GIF resource .
8899	Encode the screen descriptor .
8900	Builds the logical screen descriptor .
8901	Builds the Netscape extension .
8902	Encode a Frame .
8903	Builds the graphic control extension .
8904	Builds the image descriptor .
8905	Create a new DIDNumber for the given Order
8906	Change the autorenew status of the order
8907	Renews the order .
8908	Reloads the service details from the API .
8909	Updates the order mapping .
8910	Generate unique hash
8911	Checks if an IP address is in a given range .
8912	Returns a parameter by name or a default value if not found .
8913	Link the given service to the given key .
8914	Sets meta data for service
8915	Adds a service meta data .
8916	Removes a service from the container
8917	Releases a service
8918	Returns a service by name .
8919	Create a service instance from a factory .
8920	Resolve service provider .
8921	Register a service provider
8922	Binds a factory or class to a name .
8923	Bind a class to the container .
8924	Binds a factory to a service resolver .
8925	Bind factory to shared service resolver
8926	Returns the resolver type for the specified service .
8927	Adds an argument to the service .
8928	Adds arguments from an array .
8929	Resolve arguments .
8930	Creates a new instance of the class .
8931	Sets the tokens .
8932	Returns the current token .
8933	Returns the next token .
8934	Skips all tokens of the given type .
8935	Returns the remaining tokens .
8936	Returns an array of tokens until the next token of the given type is reached .
8937	Returns an array of tokens until it reaches the given scope .
8938	Create an error for an unexpected token .
8939	Parses a child node .
8940	Parses the XML document .
8941	Sets the container name .
8942	Adds a service to the container
8943	Adds multiple services from an array .
8944	Adds a service to the container .
8945	Import a container namespace
8946	Checks if a string is not a valid service builder string .
8947	Generate normalized service name
8948	Generate container class
8949	Returns the resolver method name .
8950	Generates code for service arguments .
8951	Generate the service meta data .
8952	Generates service resolver types .
8953	Generates the resolver method mappings .
8954	Generates the service resolver methods .
8955	Creates a ValueNode from a Token .
8956	Set the value type .
8957	Generate the package mapping file .
8958	Returns the token s value .
8959	Returns true if the token is a value .
8960	Returns true if the collection contains the element with the given key
8961	Pushes a value onto the end of the array .
8962	Converts a ctn array to PHP array .
8963	Returns the next token .
8964	Returns an array of tokens .
8965	Action index . Used to start the application .
8966	Runs a command and adds it to the result .
8967	Backup the database .
8968	Pull the repo from the install dir .
8969	Copy the . env file to the webroot
8970	Installs composer .
8971	Npm update .
8972	Seed the database .
8973	Deploy the webroot to the install dir
8974	Resolves a service
8975	Sets the cache directory .
8976	Creates a container instance .
8977	Handle an incoming webhook request .
8978	Imports the container namespaces from a vendor directory
8979	Checks if a path exists .
8980	Returns the code from the container file .
8981	Returns the code for the given namespace .
8982	Parses the container file .
8983	Handles the given scope .
8984	Handle a scope import statement .
8985	Handles parameter definition .
8986	Create service arguments from argument node .
8987	Handle a service definition .
8988	Creates a service definition from an array .
8989	Call a method on the service .
8990	Add a method call to the service
8991	Add a meta data .
8992	Determine if the current request is from a GitHub hookshot .
8993	Check if the request is authentic .
8994	Sets the value of the parameter .
8995	Get the name of a workout type
8996	Returns a string representation of this instance .
8997	Sends the request and returns the result .
8998	Set Endomondo workout type id
8999	Returns the end time of the event .
9000	Returns the points as a string .
9001	Return the GPX representation of this track
9002	Collect the response data .
9003	Get the models from the query .
9004	Get the ajax payload .
9005	Get the response from a callback .
9006	Run a callback
9007	Sanitize a handle .
9008	Validate all registered validations .
9009	Validate a single value
9010	Add a size for a given device
9011	Add a reset device
9012	Returns the size for a given device .
9013	Builds the column classes .
9014	Check if the current user is in a certain role .
9015	Begins a new row .
9016	Renders the next column .
9017	Walks through the grid and returns it .
9018	Begins the row .
9019	Returns the column resets as a string
9020	Returns the current index .
9021	Migrate the legacy tl_content table to tl_content .
9022	Register ajax handle .
9023	Ajax handler .
9024	Set the callback that will be called when the query is executed .
9025	Add multiple validations at once .
9026	Send the response to the browser
9027	Get the response type .
9028	Send response headers .
9029	Send the response body .
9030	Returns the content of the given URL .
9031	Returns true if the given method is a supported GeoIP2 model .
9032	Toggle the visibility of a record
9033	Checks if the current user has access to this column
9034	Builds the grid .
9035	Returns a column as a string .
9036	Add a reset size for a column
9037	Add column resets .
9038	Returns an array of all column resets for the specified column .
9039	Check if a column has a reset for a given size .
9040	Get column resets as string .
9041	Register a plugin handle .
9042	Enqueue ajax scripts .
9043	Get all registered nonces .
9044	Get the grids .
9045	Hook used to parse a template .
9046	hook for getting content element
9047	Get the elements of the grid
9048	create row class
9049	create column class
9050	Build Grid Columns .
9051	Fetch a columnset from the database
9052	Prepares the custom classes .
9053	Build column resets .
9054	Create grid by id
9055	Hook for the parse template hook .
9056	Hook for isVisibleElement .
9057	Hook to load the form field .
9058	Get the grids
9059	Prepare container .
9060	Update the subcolumns definition
9061	Append Columnset ID palettes
9062	Append column sizes to palettes
9063	Get all column types
9064	Get the grids of the active record .
9065	Get the columns for the module
9066	Get column orders
9067	Returns an array of column numbers
9068	Get a value from the session or data .
9069	Checks if a key exists in the session or data .
9070	Delete an item from the session .
9071	Loads a value from the cache if it doesn t already exist .
9072	Reflash session data .
9073	Parse the insert tag
9074	Get the walker for the given identifier .
9075	Translate the parameters from the event into the column set id and infinite flag .
9076	Get enc params .
9077	Get dec params .
9078	Save Dynamic Data
9079	Checks if the field is valid .
9080	Save the field .
9081	Initialises the entity .
9082	Renders the fields for the given locale
9083	Returns the value of a field for a given locale
9084	Get field values .
9085	Checks if all entities are valid .
9086	Save all entities in the collection
9087	Assign the dynamic fields to the page object .
9088	Get field by locale .
9089	Get repeaters by locale .
9090	Get all entities by field id
9091	Get entity by id entity type and field id
9092	Duplicate this translation
9093	Initializes the rule .
9094	Checks if the form is valid .
9095	Renders the group control .
9096	Save all group fields
9097	Get Group By Rule
9098	Match the given rule against the given options .
9099	Initializes the group controls
9100	Get field post data
9101	Sets a character .
9102	Returns true if the pair is in the map false otherwise .
9103	Generate a row of characters .
9104	Get the number of rows .
9105	Get dot from map
9106	Prime a character .
9107	Init repeater fields
9108	Create list control after post data is sent
9109	Create list control
9110	Create field control .
9111	Create header repeater control
9112	Save repeater translations .
9113	Get the display value of the form .
9114	Get field value by field id
9115	Get the name of the template .
9116	Get the default template name .
9117	Initialize the field value .
9118	Get the repeater value model .
9119	Get the html id .
9120	Returns the field html name .
9121	Save field or repeater field
9122	Save the field
9123	Save repeater field
9124	Returns the value of an option .
9125	Move forward by a given length .
9126	Moves the mouse to a new position .
9127	Checks if this task has an ancestor of the given taskConfig .
9128	Checks if the given task is a descendant of the current task .
9129	Resets the state of the object .
9130	Checks the input against the given conditions .
9131	Configures the wrapper key for condition options .
9132	Configures the condition options .
9133	Checks the given value against the given input .
9134	Checks if a value is empty .
9135	Returns the duration of the event .
9136	Contextualize an array of options .
9137	Find the best task to output .
9138	Get the input code from the previous state .
9139	Check if the process has been resolved .
9140	Get file path .
9141	Sorts processes by code .
9142	Handle the iterator from the input .
9143	Flushes the queue .
9144	Returns the number of lines in the file .
9145	Rewinds the stream to the first line .
9146	Returns the stripped transfomer code .
9147	Returns the dependency groups of the task configurations .
9148	Get the main task group .
9149	Checks for circular dependencies .
9150	Builds the dependencies for the given task configuration .
9151	Sort the dependencies by priority .
9152	Resolves the given task configuration .
9153	Initializes the task with the given configuration .
9154	Flushes the given task configuration .
9155	Handles the process state .
9156	Checks the process configuration .
9157	Validates the model .
9158	Returns the model as an array .
9159	Get the model fields .
9160	Unsets a relation
9161	Format class name to relation name
9162	Adds a one - to - one relation
9163	Adds a one - to - many relation
9164	Add a many to many relation
9165	Find a collection of objects based on a query .
9166	Returns a collection of models .
9167	Finds a model by a where clause
9168	Count the number of records in the database
9169	Build select query
9170	Executes a select query and returns the results as an array .
9171	Hydrate a model from an array .
9172	Deletes the model from the database .
9173	Update the model in the database
9174	Insert the record into the database
9175	Set whether or not to keep memory
9176	Don t remember the user s memory .
9177	Get a model by its primary key .
9178	Removes a model from the collection .
9179	Get the index of a model by its primary key .
9180	Save the elements to the database .
9181	Prefix the where clause with a table name .
9182	Prefixes the order of an array with a table name .
9183	Get the definition without the column name .
9184	Register a table
9185	Make a simple query object .
9186	Make a complex query object .
9187	Get model by table slug
9188	Maybe install a table .
9189	Maybe uninstall a table .
9190	Check if the given table is installed .
9191	Fires an event for each registered plugin .
9192	Save a WP_Post .
9193	Get the foreign column name .
9194	Parse default values .
9195	Create a new query from a model .
9196	Add a select clause to the query .
9197	Select a single column
9198	Select all .
9199	Add an expression to the query .
9200	Add a where clause to the query
9201	Generates a where tag .
9202	Add a nested where clause .
9203	Add a where clause to the query .
9204	Add an or where clause to the query .
9205	Add a where date clause to the query .
9206	Add a where clause to the query .
9207	Sets the order of the query .
9208	Order by expression .
9209	Group the results by a column .
9210	Group by expression .
9211	Join a table with another table
9212	Join a correlated subquery .
9213	Paginate the results .
9214	Executes a callback for each result of this query .
9215	Set the relations for the query .
9216	Parse a nested with .
9217	Assign a value to an array using dot notation .
9218	Make Limit Tag
9219	Build the SQL statement .
9220	Update meta cache .
9221	Find a record by its primary key .
9222	Find many records by primary keys .
9223	Find a model by primary key or throw an exception .
9224	Find a model by primary key or create a new model .
9225	Get the first record or create a new one .
9226	Get the first record or create a new one .
9227	Update or create a model .
9228	Eager load related models .
9229	Eager load nested models .
9230	Assert that an operator is valid .
9231	Prepare a column name for use in a query .
9232	Escape a database column value .
9233	Configures the model with the given configuration .
9234	Returns the value of a column .
9235	Create a new record in the database
9236	Adds a ORDER BY clause .
9237	Adds order by clause to the query .
9238	Set all columns
9239	Build an eager load map from the given models .
9240	Save the comment .
9241	Get the default argument .
9242	Execute the query and parse the results
9243	Parse the results into an array .
9244	Parse the return_value into a Select object
9245	Parses the order arguments .
9246	Parse pagination .
9247	Checks if two variables are numerically equivalent .
9248	Check if there are any changes in the database .
9249	Fetch all models from the database
9250	Deletes all records from the database
9251	Update a record in the database
9252	Returns the total number of pages .
9253	Paginates the results .
9254	Returns the number of records found in the database
9255	Returns the number of models in the result set without limit .
9256	Returns true if the given offset exists
9257	Sets the value at the specified offset .
9258	Array access .
9259	Build the query .
9260	Boot the model if not booted yet .
9261	Boot all traits .
9262	Fill the model with the given data .
9263	Set the attributes that should be guarded .
9264	Add unguarded attributes to the fillable array .
9265	Check if a column is fillable
9266	Set an attribute on the model .
9267	Set a single raw attribute .
9268	Get the value of an attribute .
9269	Get the raw attribute value .
9270	Get the value of an attribute .
9271	Get an attribute from an array .
9272	Get all relation attributes .
9273	Get a relation by attribute name .
9274	Sets the value of a relation .
9275	Get the value of a relation .
9276	Refresh the model s data .
9277	Returns an array of attributes that have been modified since the last save .
9278	Get object by primary key .
9279	Create a new model instance from a query .
9280	Get data from primary key .
9281	Check if data is cached .
9282	Update a record in the database
9283	Save the model to the database .
9284	Save has foreign relations .
9285	Save loaded relations .
9286	Save the model in the database as an insert .
9287	Save the model in the database as an update
9288	Finish saving the model .
9289	Deletes the model from the database .
9290	Insert many records into the database
9291	Fire model event .
9292	Register a model event .
9293	Get the data to cache .
9294	Register a global scope .
9295	Create a new query with no global scopes .
9296	Add relations to the query .
9297	Returns the model attributes as an associative array .
9298	Get the comparison string .
9299	Get the value of the condition .
9300	Get a row by primary key .
9301	Get a single column from a row .
9302	Helper function for get_by_or_many
9303	Count the number of records in the database
9304	Insert a row into the database .
9305	Update a row in the database
9306	Delete a row from the database
9307	Delete many records from the database
9308	Generates an exception from the last DB error .
9309	Save the term .
9310	Makes a query object for the related model .
9311	Fetch the results for eager load .
9312	Adds a new value to insert
9313	Add a value to be set
9314	Sets the query type to SELECT .
9315	Reset select .
9316	Sets the query type to update .
9317	Sets the query type to delete .
9318	Sets the insert query type to INSERT .
9319	Sets the FROM clause of the query
9320	Adds a JOIN clause to the query .
9321	Adds a where clause to the query .
9322	Adds a or where clause to the query .
9323	Reset the order by .
9324	Sets the LIMIT clause .
9325	Reset the limit .
9326	Boot Trash Support .
9327	Get the results of the query .
9328	Load model from cache .
9329	Load collection from cache .
9330	Cache the results .
9331	Cache collection .
9332	Cache a single result .
9333	Maybe register cache events .
9334	Save the user .
9335	Set the last updated at timestamp .
9336	Get container parameters .
9337	Checks if the container is cacheable .
9338	Boot the container
9339	Load container configuration .
9340	Build the column name for the given table .
9341	Persists the values to the database .
9342	Persist the removed models to the database .
9343	Persists the added models to the database .
9344	Create a new model instance .
9345	Initialize the authenticator .
9346	Create a new model .
9347	Converts an asset from one file to another
9348	Build the result file name .
9349	Parses a less asset and stores the result in a file .
9350	Send a message .
9351	Performs a get query .
9352	Returns the number of documents in the collection .
9353	Requeues a message
9354	Sends a message to the queue .
9355	Verifies that the sort array is valid .
9356	Adds a message to the collection .
9357	Returns the messages for the given type .
9358	Imports the given issues into this collection .
9359	Returns the value for the given identifier .
9360	Checks if a key exists .
9361	Extends an existing service .
9362	Register a service provider with the container .
9363	Add a tag to a service
9364	Finds all service ids that are tagged with the given tag .
9365	Boots the application .
9366	Initializes the bundles .
9367	Get kernel parameters .
9368	Validate the given content .
9369	Validates the given content with the given retriever .
9370	Validate the content without retrieving it
9371	Get a container instance .
9372	Output all JS assets .
9373	Output all css assets .
9374	Returns the assets for the given container and type .
9375	Arranges an array of assets .
9376	Check if a dependency is valid .
9377	Create a new post validator
9378	Returns a new XsdRetriever instance .
9379	Create a new XsltRetriever instance .
9380	Retorna a new CertificadoValidator
9381	Create a new CFDIReader instance .
9382	Handles a command .
9383	Set a cookie .
9384	Gets a cookie value .
9385	Returns the first element that passes the given truth test .
9386	Checks if a given password is valid .
9387	Returns a node by path or null if not found .
9388	Returns the value of the attribute specified by the given path .
9389	Append a child node to a parent node .
9390	Populates a node from a source to a destination node .
9391	Retrieve the node at the given path .
9392	Checks if the given value has a required value .
9393	Add Doctrine queries from a DebugStack
9394	Add timers .
9395	Get file size in human readable format
9396	Append a validator to the collection .
9397	Removes a validator from the collection .
9398	Gets a validator by index .
9399	Constructs a new command instance from the given arguments .
9400	Runs the list of files .
9401	Run a file from a CFDI factory
9402	Authorize a user with the given credentials .
9403	Returns true if the user is logged in .
9404	Logs in a user .
9405	Logouts the current user .
9406	Adds a constraint to the collection .
9407	Validates the input against the set constraints .
9408	Redirect to a given URL .
9409	Returns the path of the class .
9410	Get message by index
9411	Generate custom post type name
9412	Get functions .
9413	Resolve the command handler .
9414	Setups the error messages and comprobante .
9415	Sum a collection of nodes .
9416	Gets a value from the input array .
9417	Set sequential meta box position .
9418	Generates the taxonomy name .
9419	Create a redirect action .
9420	Register the commands .
9421	Returns the bundle metadata .
9422	Returns the metadata for the given namespace .
9423	Finds the namespace and path for the given ClassMetadataCollection .
9424	Add an asset to the collection .
9425	Renders a view and returns the response .
9426	Save a value to the cache .
9427	Loads the content of an XML document .
9428	Removes all schemaLocations that are not satisfactory .
9429	Removes all namespaces that are not allowed by this node .
9430	Removes unused namespaces .
9431	Initializes the bindings for the site .
9432	Binds the meta data bindings to the registerables .
9433	Returns the file name in Dashed Case .
9434	Initializes the page context .
9435	Renders the Timber template .
9436	Loads the configuration from all configured directories .
9437	Add a route that matches the given path .
9438	Add a route in a section .
9439	Add a route group .
9440	Starts a block .
9441	Stops a block .
9442	Output a block .
9443	Creates a controller instance .
9444	Instantiate a controller .
9445	Validates a URL .
9446	Find a template by its logical name .
9447	set application entity manager helper set
9448	Set the application connection helper set .
9449	Renders a view .
9450	Open the form .
9451	Add data transformers .
9452	Get a feed from the public endpoint .
9453	Market Request .
9454	Make a non - public account API request .
9455	Prepare the attributes .
9456	Add extra data .
9457	Returns the first row of the result set as an object of the specified type .
9458	Add dialog to Manialink
9459	Get the default connection .
9460	Begin a transaction
9461	Loads the ManiaCode .
9462	Render the XML document
9463	Connect to the server
9464	Watches for changes .
9465	Sets the background color of the image
9466	Set the image
9467	Set Image ID
9468	Set the focus image
9469	Set Image Focus ID
9470	Add a link to the element
9471	Get a configuration value .
9472	Sets a configuration value .
9473	Get translation by key .
9474	Get array value by key .
9475	Strips styles from a string .
9476	Create a new redirect .
9477	Returns a sequence of numbers .
9478	Factory method to create a new cache driver .
9479	Loads the Manialink
9480	Begins a new frame
9481	Ends a frame
9482	Creates a redirect element
9483	Append XML to the end of the list .
9484	Build the driver .
9485	Set the border
9486	Declare a font .
9487	Call this function when an image is loaded
9488	This is the fast version of the onImage function .
9489	This function is used to set the quality of an image
9490	Get a redirect for the given request .
9491	Get all redirect URLs .
9492	Get all redirects from cache .
9493	Sets the size of the arrow elements .
9494	Set selected .
9495	Invoke a command .
9496	Set the data to be displayed to the user
9497	Returns a string for a LIMIT clause
9498	Get update string
9499	Get a parameter by name
9500	Returns the value of the named parameter .
9501	Get a value from the POST array
9502	Restores a parameter
9503	Redirect to a manialink given an array of arguments
9504	Create a link string from an array of arguments
9505	Create an absolute link with the given arguments .
9506	Increase the X position
9507	Increase Y position
9508	Increase posZ
9509	Set the position of the object
9510	Sets the scale
9511	Sets the vertical alignment of the table
9512	Sets the cell horizontal alignment
9513	Sets the cell alignment
9514	Sets the x - coordinate of the image
9515	Sets the new Y value
9516	Set the size of the image
9517	Adds a new item to the menu
9518	Add a gap to the list
9519	Get all HTTP response keys .
9520	Get all redirection statuses .
9521	Fatal exception handler
9522	Computes the message of an exception
9523	Computes the short message of an exception
9524	Handle a request and return a redirect response .
9525	Upload a file to a given path
9526	Returns the current URL
9527	Get aligned posX based on halign and new align
9528	Returns the X - coordinate of a given Y - coordinate in a given valign with a new align
9529	Get the aligned position of an element
9530	Build select query .
9531	Quote a string for use in a query
9532	Reset all balance .
9533	Query delete by assets
9534	Configures the class loader .
9535	Get a list of all available service ids .
9536	Get the return type of a service .
9537	Execute the payment process .
9538	Get the balance entry .
9539	Get the hierarchy of classes .
9540	Change Content - Type
9541	Parses an HTTP response header .
9542	Converts a string to an array .
9543	Build a dimensional array .
9544	Get asset types .
9545	Execute the validation process .
9546	Get the balance close date for an asset type
9547	Check if the strategy is valid .
9548	Mutate value .
9549	Fetch data from the given URL .
9550	Get the resource URL .
9551	Generate a list of strings .
9552	Parse a CSV file into an array .
9553	Localize csv id
9554	Create a backup of the given strings .
9555	Get all assets by asset type code .
9556	Get asset type id by accountId .
9557	Get customer acc by asset type code .
9558	Get system customer ID .
9559	Execute an A request .
9560	Build the strategy key
9561	Parse the response from the callback
9562	Login action .
9563	Render a template file .
9564	Get asset types .
9565	Sends the response to the client
9566	Authenticates the user with Opauth .
9567	Verify token .
9568	Validates a Google spreadsheets doc url
9569	Register the client class .
9570	Register the token class .
9571	Register the commands for the console .
9572	Starts a new session .
9573	Retrospects a property from the class hierarchy .
9574	Sets the status of the response .
9575	Parses a CSS string and returns an array of parsed CSS .
9576	Find all tokens in the given list .
9577	Find the end of a quoted string
9578	Find the end of a URL
9579	Check rule .
9580	Merges the given words into a single string .
9581	Check selectors .
9582	Extract the selectors from the words .
9583	Recursively parses the tokens .
9584	Set the current app key for the request .
9585	Get the current app key .
9586	Add acceptable JSON type to request .
9587	Build select query .
9588	Unpublish a post
9589	Save unpublish post
9590	Init scheduler .
9591	Generate a new token .
9592	Generates a new token for the given key .
9593	Verifies that the given token is valid for the given key and time .
9594	Generates the HTTP headers for the given app key .
9595	Generates query data .
9596	Get the customer ID .
9597	Add a fit manipulations .
9598	Get the manipulations .
9599	Create a new Account
9600	Fill properties with values
9601	Returns the URI part of the current URI .
9602	Set the username and password
9603	Sets the port to connect to .
9604	Set the path .
9605	Returns a segment by index .
9606	Get a query parameter value .
9607	Builds a string from the given tokens .
9608	Get an aggregate from the class variables .
9609	Returns the configuration for the given strategy .
9610	Build the configuration for the given strategy .
9611	Composes AResponse object from EAccount
9612	Execute an ARequest .
9613	Executes a request .
9614	Prepare cust and admin IDs for logging .
9615	Validate a list of transactions
9616	Sets the request headers .
9617	Set an HTTP header .
9618	Add a header to the response .
9619	Removes a header .
9620	Adds a PSR - 4 or PSR - 0 prefix .
9621	Add multiple prefixes .
9622	Finds the PSR - 0 file for the given class name .
9623	Finds a file with a known suffix .
9624	Convert an object to an array .
9625	Clean the given array .
9626	Set the code .
9627	Initializes the URI from the server params
9628	Initializes the query parameters .
9629	Init uploaded files .
9630	Parse a list of uploaded files .
9631	Parse multiple uploaded files .
9632	Check if the request has a specific Content - Type .
9633	Run the service provider .
9634	Dispatches the command .
9635	Output a table .
9636	Output an error to STDERR
9637	Displays help for all available commands
9638	Returns the list of available commands .
9639	Make directory if not exists .
9640	Append the given stub to the route file .
9641	Replace the old file with the new one .
9642	Dispatch the request and return the response .
9643	Create a template response .
9644	Returns the current page .
9645	Get the response .
9646	Builds the Response object for the given URI .
9647	Get the page for the given URI .
9648	Returns the alias for the given URI .
9649	Displays a single User model . If creation is successful the browser will be redirected to the view page .
9650	Creates a new I18nMessage model . If creation is successful the browser will be redirected to the view page .
9651	Add headline ids .
9652	Dispatches the request
9653	Run cli command
9654	Register the service provider .
9655	get markdown renderer
9656	Get the login blade files .
9657	Get migration files .
9658	Finds a page by its identifier .
9659	Returns the page name for the given page identifier .
9660	Builds the meta data for the given page identifier .
9661	Returns the page tree .
9662	Returns the list of pages for a given path .
9663	Print success message .
9664	Loads translations from database .
9665	Sends the user activation mail .
9666	Search a set of rows against a given query .
9667	Renders the template .
9668	Renders an expression .
9669	Resolves an expression key path .
9670	Find classes in all bundles .
9671	Prepare the configuration array .
9672	Returns the host of the current request
9673	Returns the value for the given key .
9674	Displays message model .
9675	Updates an existing Message model . If update is successful the browser will be redirected to the view page .
9676	Deletes an existing Message model . If deletion is successful the browser will be redirected to the index page .
9677	Finds the I18nTranslation model based on its primary key value . If the model is not found a 404 HTTP exception will be thrown .
9678	List all pages
9679	Returns the content as a string .
9680	Returns the sorting property for this object .
9681	Returns the URI of the page .
9682	Get the URL from the meta .
9683	Get the meta title .
9684	Make a GET request to the API .
9685	Builds the URL for the API request .
9686	Handles the response from the API .
9687	Initialize the shared configuration .
9688	Write profiling information to the stream .
9689	Get the template content .
9690	Returns the value for the given key path of the given object or the default value if the key path does not exist
9691	Sets the root directory .
9692	Finds all class reflections in the directory .
9693	Gets the ReflectionClass for the given file .
9694	Upload media .
9695	Insert media .
9696	Get the number of hours between the start and end dates .
9697	Returns the dirty data for the new and old models .
9698	Register clean entity .
9699	Returns the dirty fields for the new and old models .
9700	Adds identifiers to the dirty fields .
9701	Get entity id from string or entity .
9702	Returns all tags
9703	Get the real class name of an object
9704	Configure the tab element factory .
9705	Deletes the media from the database .
9706	Create the title of the file
9707	Renders the pdf .
9708	Renders the image .
9709	Hydrate data into an object .
9710	Hydrates a list of models .
9711	Deserialize all data into a collection .
9712	Deserializes data .
9713	Guesses the collection class name from the provided data .
9714	Build the sitemap .
9715	Get the navigation for the given element .
9716	Returns the iterator for the given element .
9717	Normalizes the attribute value .
9718	Get a single extra property .
9719	Generate a random string
9720	Limit the number of words in a string .
9721	Returns an array of all files in a directory
9722	Generates a short description from a string
9723	Checks if a time slot overlaps another time slot .
9724	Get all non overlapping time slots .
9725	Merges overlapped time slots .
9726	Get a resource .
9727	Merge default parameters .
9728	Executes a request and returns the response .
9729	Render backend view .
9730	Returns the navigation iterator .
9731	Get the grid iterator .
9732	Before save callback .
9733	Processes the given content .
9734	Updates an existing Media model . If update is successful the browser will be redirected to the index page .
9735	Do media join
9736	Upload media .
9737	Updates a model s data .
9738	List all media
9739	Renders media row .
9740	Deletes an existing Media model . If deletion is successful the browser will be redirected to the index page .
9741	Sets the attribute list .
9742	Returns the default serialized model .
9743	Create base directories .
9744	Export the views .
9745	Export the controllers .
9746	Export Routes .
9747	Check packages .
9748	Copy plugins .
9749	Copy asset files .
9750	Copy the less folders .
9751	Get settings by categories .
9752	Creates a navigation from a serialized navigation definition .
9753	Creates a nav item from an array .
9754	Loads a block .
9755	Get module by name .
9756	Serialize an entity
9757	Returns the model name for the given key .
9758	Returns the class metadata for the specified model .
9759	Tries to get a class metadata by its identifier .
9760	Render tree .
9761	Get branch .
9762	Removes an item from the cache .
9763	List all tags .
9764	Find tag weights .
9765	Add tags to the database
9766	Remove tags .
9767	Get tab parent options .
9768	Generate columns for tabs .
9769	Count required separators .
9770	Create separators .
9771	Create a stop element .
9772	Create tab element .
9773	Get the stop element .
9774	Add member icon
9775	Get select options .
9776	Returns a list of all status constants .
9777	List all constants of a given type
9778	Get the label for a specific type
9779	Get the listings order array .
9780	Replace the find text with the replace text .
9781	Move to the next dropdown item .
9782	Get the title of the current item .
9783	Generates the code for an active field .
9784	Make a router driver instance .
9785	Get a driver instance by name .
9786	Call a driver .
9787	Call a route .
9788	Resolve the route dependencies .
9789	Get nested parameters .
9790	Find routable attributes .
9791	Find theful routable action and parameters .
9792	Find the resource routable action and parameters .
9793	Get the alternative resource action .
9794	Dispatch the route .
9795	Returns a list of available pickups .
9796	Returns the calculator for the given shipping method .
9797	Returns the shipping method .
9798	Add a route to the resource .
9799	Build resource schema .
9800	Update the shipping address .
9801	Call the controller method .
9802	Handle an Illuminate response .
9803	Handle response callback .
9804	Throw an HttpException .
9805	Check if the response is a none - html response .
9806	Registers the error handler .
9807	Get the options for the given action ID .
9808	Delete an item from the cache .
9809	Save an item to the cache .
9810	Output a block of messages .
9811	Get a value from the cache .
9812	Set a value in the cache .
9813	Set multiple items in the cache
9814	Delete multiple items from the cache
9815	Checks if a key exists in the cache .
9816	Returns the label of the form control .
9817	Get full path name
9818	Make tree from collection .
9819	Type a command .
9820	Set resource members
9821	Loads a class from the PSR namespace .
9822	Set the account id
9823	Translate an exception into an exception object
9824	Get the console instance .
9825	Execute the PayPro API request
9826	Get all enum values
9827	Returns a list of all containers in the project .
9828	Updates the properties of a container
9829	Checks if a blob exists on the server .
9830	Encode JWT .
9831	Decodes a Firebase JWT token .
9832	Get the payload from the token .
9833	Splits the token into its segments .
9834	Get the expiry timestamp .
9835	Generates a SQL statement for creating an index .
9836	Extracts the default value from a column schema .
9837	Add previous button
9838	Add next button
9839	Get the value of a button
9840	Reveal the given object .
9841	Checks if the given value is an object .
9842	Checks if a value is empty .
9843	Converts an array of data into a record .
9844	Parse SOAP response
9845	Get a datagrid configurator by name
9846	Check if the given class implements DatagridConfiguratorInterface .
9847	Get writer class name by format .
9848	Get a writer from the content negotiation .
9849	Transforms a DateTime object into a date string .
9850	Initializes the datagrid .
9851	Read a schema from a payload .
9852	Parse a payload .
9853	Write a payload
9854	Get a fitting data reader
9855	Get a data writer
9856	Run before each test .
9857	After each test
9858	Clear the resolved instances after the step .
9859	Initialize Laravel .
9860	Boot the Laravel application .
9861	Go to the given route .
9862	Go to an action on the current page .
9863	Returns the action with the root controller namespace .
9864	Checks that the current URL is the given route .
9865	Checks that the current URL is the given action .
9866	Assert that a session contains a given value .
9867	Assert that form has errors .
9868	Assert form error message .
9869	Authenticates the user with the given name .
9870	Inserts a new record into a table .
9871	Transforms a number into a string .
9872	Returns the default number formatter .
9873	Nests a multidimensional array .
9874	Flattens an associative array or stdClass into a single associative array .
9875	Converts an array into an object .
9876	Creates a new column instance .
9877	Builds the header view .
9878	Builds a cell view .
9879	Creates a new column instance .
9880	Checks if the column is a compound type .
9881	Get the base data for the request .
9882	Get shipping data
9883	Get invoice data
9884	Send data to Agms .
9885	Trims a string .
9886	Converts a FQCN to a block prefix .
9887	Transforms a value into a string .
9888	Parses the given value into a PHP value .
9889	Adds an unresolved column .
9890	Check if the uploaded file is valid .
9891	Resolves a filename to a path .
9892	Update the form with the data from the record
9893	Updates a form to edit a record
9894	Updates a form to edit a record
9895	Lock a record
9896	Apply a list of pub control clients
9897	Publishes an item to all clients in a channel .
9898	Loads the given locale .
9899	Sends the request and returns the response .
9900	Builds the url from the given parts .
9901	Store a newly created user in storage .
9902	Show form for editing the specified resource .
9903	Update the specified resource in storage .
9904	Remove the specified user from storage .
9905	Creates a new instance of \ mPDF
9906	Adds the host header to the request
9907	Builds a Guzzle request instance .
9908	Executes the callable chain .
9909	Checks if a class exists .
9910	Run the event loop
9911	Ensure that the thread is running .
9912	Queue a request for processing .
9913	Publish a batch of requests to PCC
9914	Returns the key associated with the cursor
9915	Rewinds the iterator to the first element .
9916	Exports this object as an array .
9917	Set options from array
9918	Publishes a list of items .
9919	Make an HTTP request .
9920	Publish an item to a channel
9921	Imports the headers from the given message into the given message .
9922	Returns the protocol version .
9923	Validates the given data against the given rules .
9924	Load translation messages .
9925	Set validator local .
9926	Get the validation errors .
9927	Update the state of the runner .
9928	Get a locked message for this record
9929	Check if this user is editing anyway
9930	Check if the given offset exists .
9931	Sort the collection using a user defined comparison function .
9932	Parses the birthday and calculates age constellation .
9933	Format the birthday .
9934	Validate a birthday string
9935	Returns the constellation for the given month and day .
9936	Translate a constellation .
9937	when synchronizer is updated
9938	response when roles sync succeed
9939	on list roles
9940	on role create or edit
9941	on user create or edit
9942	when new area
9943	Creates form for user model
9944	create role menu
9945	Finds an entity by a set of criteria or returns a new one if not found .
9946	Get a new instance of the class .
9947	Get the object factory .
9948	Removes entities by an array of criteria .
9949	Removes a single entity by an array of criteria .
9950	Removes an object from the repository .
9951	Refreshes a list of objects .
9952	Detaches one or more objects from the manager .
9953	Get supported method .
9954	Call a supported method .
9955	Runs an action on the object manager .
9956	Flushes the given objects .
9957	Prepare tag from bits .
9958	Set the pagination settings
9959	Set the current page
9960	Update the specified Permission in storage .
9961	Get the paginator .
9962	Find paginated by criteria or throw exception .
9963	Boot extension components
9964	boot memory acl
9965	Load the parts of the class .
9966	Extended validation .
9967	Save the model .
9968	Validate the model s attributes .
9969	Merge rules .
9970	Remove unnecessary attributes .
9971	Auto hash attributes .
9972	Disables all enabled filters .
9973	Disables a filter .
9974	Restores the disabled filters .
9975	Restores a filter from the disabled list .
9976	get role actions column
9977	Assign the model to the given user .
9978	Checks if the given status code is successful .
9979	Returns current template name
9980	Create role form .
9981	show edit form
9982	create user form
9983	user update form
9984	create new user
9985	update user data
9986	Deletes user from database
9987	Save the user .
9988	Checks if the current url is within the given path .
9989	Get the registered type
9990	Returns the Etag for the given visitor identifier
9991	Get the timestamp field .
9992	Get collection timestamp hash
9993	Executes the query and returns the results .
9994	Executes the collection and returns the ids .
9995	Returns the number of rows in the collection
9996	Returns the table name of the registered type .
9997	Returns the order by .
9998	Sets the order by clause
9999	Get the conditions as a string
10000	Adds a WHERE clause to the query .
10001	Set the join table name
10002	Edit ACL .
10003	update role acl
10004	Set the logger to use .
10005	Starts the worker and returns its pid
10006	Stop the lock
10007	Kill the process associated with this lock
10008	Add a where condition to the query
10009	Get the where conditions .
10010	Returns the number of rows in the database .
10011	Executes the query and returns the first row .
10012	Returns the IDs of the entities in the database .
10013	Execute the query and return the result .
10014	Load by type field .
10015	Returns the SQL for a SELECT statement .
10016	get all modules
10017	Smash a resource
10018	Define all permissions .
10019	Assign a role to a user .
10020	Remove a role from a user .
10021	Create form .
10022	Edits a record .
10023	Stores role .
10024	Updates a role .
10025	Destroy role .
10026	Save role .
10027	import role permissions
10028	Get acl .
10029	Clear analytics data
10030	Clear Adback message data
10031	make acl widget
10032	Show the form for editing the specified role .
10033	scope to register with roles
10034	Returns user statuses
10035	get table actions column
10036	User roles getter .
10037	Modify an object in the database
10038	Get a producer for a registered type
10039	Register a producer for a given type
10040	Register a producer by class name
10041	Get an object by ID
10042	Returns a reference to an object by ID .
10043	Add a value to the object pool .
10044	Adds an object to the object pool .
10045	Returns the number of rows for a certain type .
10046	Get the finder for the given type .
10047	Get select one by type
10048	Get the escaped fields for a type .
10049	Returns the escaped order by property for the given type .
10050	Get the trait names by type .
10051	Recursively get the trait names of a class .
10052	Add controls to the form .
10053	Determine if the given checkbox is checked .
10054	Prepares and returns active page entity
10055	Set login tracking data
10056	Sets the email tracking to the active page entity
10057	Returns the site path for the given URL .
10058	Analyzes a URL and returns its components .
10059	Returns basket product category path
10060	Checks if two field values are the same .
10061	Load the fields from a database row .
10062	Creates a copy of the model .
10063	Revert a field to its original value
10064	Gets the old field value .
10065	Set the value of a field
10066	Inserts the record into the database .
10067	Update the object in the database
10068	Refreshes the values of the generated fields .
10069	Compare the values of a field against a reference value
10070	Generate a URI based on a named route
10071	when store role
10072	Get field errors
10073	Check if a field has an error .
10074	Add a validation error .
10075	Returns formatted product title .
10076	Modifies active page by contact controller
10077	Modifies active page by newsletter controller .
10078	Modifies active page with user registration data .
10079	Disable an event subscriber
10080	Restores the event subscribers .
10081	Disables all event listeners for an event .
10082	Disables an event listener .
10083	Restore all event listeners .
10084	Restore the event listeners for a given event .
10085	Get subscriber class name .
10086	Checks if the given class is an event subscriber .
10087	Get event listeners
10088	Get active user hashed id
10089	Returns user hashed email address .
10090	Generates a unique cache key .
10091	Generates the cache keys for the given ids .
10092	Sends the request to the API .
10093	Checks if a key exists in the collection
10094	Get a value by key .
10095	Get a value from an item
10096	Set a value in the item using dot notation
10097	Put a value into the item .
10098	Set a value in an item .
10099	Removes an item from the collection .
10100	Removes a value from an object or array .
10101	Set the logger .
10102	Boot the service provider .
10103	Set mail config
10104	Returns the value of a set field .
10105	Converts a PHP value to a PHP array
10106	Get the page size .
10107	Register Capsule services .
10108	Validates the data against the required fields .
10109	Get the singleton instance of the notice class .
10110	Init hook .
10111	Loads the TDP script .
10112	Display the notices .
10113	Register a notice .
10114	Dismiss notice AJAX .
10115	Dismiss a notice .
10116	Dismiss a user .
10117	Dismiss a global notice .
10118	Restore a notice .
10119	Restores a user from the database .
10120	Restore global notice .
10121	Returns an array of dismissed notices .
10122	Check if the notification has been dismissed .
10123	Get a notice by id .
10124	Refines an item and returns it .
10125	Refines a collection .
10126	Include attachments .
10127	Get an attachment from the raw data .
10128	Set the attachments .
10129	Parse the given array of attachments .
10130	Attaches an item to the receiver .
10131	Attaches a class to the attachment .
10132	Merge two arrays or objects .
10133	Returns the response headers .
10134	Get the card reference .
10135	Get the customer reference .
10136	Returns the fully - qualified class name of an object .
10137	Get the namespace of a class .
10138	Finds the add method for the given object .
10139	Initializes the field and association mappings .
10140	Set translation language
10141	Reads a property of an object .
10142	Displays the default action for the entity manager .
10143	Invokes the before hook .
10144	Invokes the after method .
10145	Extend the collection with another collection .
10146	Append data to the collection .
10147	Prepends an entity to the beginning of the collection .
10148	Check if property exists in collection
10149	Returns the last entity in the collection .
10150	Get element moved by offset
10151	Checks if a field has a given value .
10152	Searches the collection for a field with a given value .
10153	Removes and returns the first element of the collection .
10154	Filters the collection by the given callback .
10155	Get collection by callback
10156	Split the collection into chunks of a given size .
10157	Returns a slice of the collection .
10158	Splits the string into multiple chunks .
10159	Unset one or more properties .
10160	Removes all entities with the specified property from the collection .
10161	Reverses the collection .
10162	Get all values for a property .
10163	Binds a collection to the collection of entities .
10164	Group the entities by a field .
10165	Prepare the scopes .
10166	Parse the scope arguments .
10167	Set variable type
10168	Registers an annotation based entities .
10169	Converts a string to camel case .
10170	Prepare data for insert .
10171	Updates the data .
10172	Parse the filter fields .
10173	Parse filter values .
10174	Converts an array to an object
10175	Returns the label .
10176	Get an additional style by type
10177	Returns the additional styles of the given type .
10178	Returns the link for the current request .
10179	Convert data to an array
10180	Configures the model .
10181	Get the connection to use .
10182	Import a field from a relationship
10183	Converts the given string into a fully qualified class name .
10184	Fire the job .
10185	Mark the item as deleted .
10186	Returns the class metadata for the given class name .
10187	Flushes the entity manager .
10188	Finds an entity by its identifier .
10189	Removes all entities from the database
10190	Removes an entity from the database .
10191	Refreshes an entity from the database
10192	Returns the repository for the given entity name .
10193	Returns true if the entity is in the repository false otherwise .
10194	Creates an instance of the entity manager .
10195	Process XCDR request
10196	Perform a merge
10197	Merge two lines
10198	Merge lines added or modified
10199	Merge lines removed or modified
10200	The NotifyXcdrRecord method is called by the Client to notify the client about a CDR record .
10201	Register the WordPress services .
10202	Apply configs to the application .
10203	Add env vars to app
10204	Pop a job from the queue
10205	Insert a job record into the queue .
10206	Request XCDR Set Attribute
10207	Converts a string to a string with a delimiter .
10208	Creates a new record
10209	Read a record from the database
10210	Update a record in the database
10211	Destroys a record
10212	Recycle a record
10213	Returns the count of a record
10214	Get a proxy instance .
10215	Closes all output interfaces .
10216	Load the widget classes
10217	Load theme options
10218	Callback sent when elite begin turn
10219	Add a child element .
10220	Store a newly created permission in storage .
10221	Show permission form .
10222	Update the specified Permission in storage .
10223	Remove the specified permission from storage .
10224	Set the adapter .
10225	Returns the adapter type .
10226	Waits until the connection is ready for reading .
10227	Returns a list of channels .
10228	Get a list of all games .
10229	Convert data to array .
10230	Convert data to an object
10231	Converts data to JSON .
10232	Returns the given data as a string .
10233	Get as integer .
10234	Get as float .
10235	Get as boolean value .
10236	Generates the PHP code for the hydrator .
10237	Find all instance properties .
10238	Creates the constructor .
10239	Creates the hydrate method .
10240	Updates the rebuld config .
10241	Create local composer . json file
10242	Find one page by attribute value .
10243	Find pages by attribute .
10244	Find a page by its option and value
10245	Find a page by its option and value .
10246	Register a binding
10247	Register the view parser
10248	Register the launcher .
10249	Get a database driver instance .
10250	Returns an invalid template result .
10251	Starts a timer
10252	Subscribe a callback to a signal
10253	Unsubscribe from a signal
10254	Get attribute value
10255	Set the primary and foreign keys for a column
10256	Executes a query and returns the columns .
10257	Set the properties of a column from a row .
10258	Strips the table name from the table name .
10259	Selects a server by ID .
10260	Selects a virtual server by port .
10261	Returns the virtual server port for the specified server ID .
10262	Returns the first Server object matching the given name .
10263	Returns the first server matching the given unique identifier .
10264	Creates a new virtual server .
10265	Deletes a server from the server list .
10266	Starts a server .
10267	Executes the server stop process .
10268	Returns an associative array of all permission names .
10269	Find a set of permissions
10270	Returns the ID of the permission with the given name .
10271	Returns the name of a permission by ID .
10272	Returns the category of the permission with the given ID .
10273	Checks if the current user has the specified permission .
10274	Adds a message to the server log .
10275	Logs in to the server .
10276	Logouts the current user .
10277	Set a value in the current whoami array .
10278	Get validator .
10279	Sets the content of the request to the given curl resource .
10280	Parses the result of a page fetch request .
10281	Common application attributes .
10282	Get the value of an option .
10283	Build Bitwise Options
10284	Execute a user command
10285	Ping the server
10286	Set an attribute on the element .
10287	Formats the amount according to the currency .
10288	Returns the formatted amount for accounting .
10289	Returns the rounded amount .
10290	Splits this money into multiple amounts based on a set of percentages
10291	Prepare and inject elements .
10292	Get user information by access token
10293	Run the controller
10294	Search for a route that matches the current request .
10295	Get the current request method
10296	Get all logs
10297	Death by camels .
10298	Converts a number of bytes into a human - readable string .
10299	Returns a human - readable string for the given codec .
10300	Returns the group name for the given type .
10301	Converts a permission type to a human - readable string .
10302	Returns the log level for a given log level .
10303	Converts a log entry string into an array .
10304	Returns a list of cron jobs .
10305	Get all traits used by this class .
10306	Call a trait method
10307	Call all event traits .
10308	Returns the attribute labels .
10309	Returns attribute hints .
10310	Returns the current object as an associative array .
10311	Fetches the error from the server and stores it in the error array .
10312	Fetches the reply from the server .
10313	Get identity .
10314	Returns true if the user has an identity .
10315	Restores the model from the database .
10316	Get a user by ID
10317	Get User Followed Games
10318	Get all notices for the current user
10319	Get a channel
10320	Escapes special characters in the string .
10321	Unescapes this string .
10322	Get a team
10323	Add a result to the container
10324	Get the stream of a channel .
10325	Get a list of streams
10326	Get a list of featured streams
10327	Get a list of streams followed by an access token
10328	Get a summary of the streams
10329	Get the top items
10330	Returns the value of the element .
10331	Resolves a TSDNS hostname .
10332	Get configurables .
10333	Sends a text message to the server .
10334	Kicks the client from the channel .
10335	Downloads the user s avatar .
10336	Bind events to the collection .
10337	Connect an event to the element .
10338	Returns a query variable
10339	Returns the base URI of the request .
10340	Sends a request to the server .
10341	Wait for an event from the server .
10342	Prepares a command to be executed .
10343	Returns the current host .
10344	Lists all installed extensions .
10345	Writes the extensions configuration file .
10346	Sets the parent element .
10347	Returns the columns of a table .
10348	Creates and returns the Transcoder .
10349	Get value by case sensitive key .
10350	Sets a value by case insensitive key .
10351	Get all notices for the current user
10352	Lists all extension models .
10353	Performs a cURL request and returns the response .
10354	Runs the selected task .
10355	Deactivates an extension .
10356	Activates the extension .
10357	Uninstalls an extension .
10358	Runs a deferred task .
10359	Returns the TeamSpeak3_Node_Client object matching the given nickname .
10360	Downloads the channel icon .
10361	Sends a text message to the client .
10362	Deletes the channel .
10363	Encode a payload with the given key and algorithm
10364	Signs a string with a given key
10365	Decodes a JSON string into an object
10366	Writes the configuration to the file .
10367	Bootstraps the application .
10368	Creates a copy of the channel group .
10369	Sends a text message to all clients
10370	Retrieve the form class name .
10371	Get an existing FOSUser entity .
10372	Returns a list of entities .
10373	Creates a new FOSRest entity .
10374	Edits an existing FOSEntity entity .
10375	Deletes an entity with the given id .
10376	Reads the contents of a file .
10377	Parses a JSON string into an object .
10378	Reads a BOM file and parses it .
10379	Normalize the id .
10380	Remove invalid data attributes .
10381	Sets the value of the field .
10382	Adds an element to the collection .
10383	Returns the top - level window .
10384	Removes an element from the collection .
10385	Returns the element with the given id
10386	Loads the model attributes from a state file .
10387	Saves the state of the application .
10388	Set data type
10389	Callback sent when a channel is created
10390	Get localized version data field .
10391	Get localized data field .
10392	Returns the versioned data of the other package .
10393	Returns the value of the given key from the given package data .
10394	Returns a human - readable version of the readme .
10395	Prepares the migration task .
10396	Build a ReportingTask .
10397	Match a request method against a set of routes .
10398	Parse a regex route .
10399	Checks strictness of object .
10400	Returns the current TeamSpeak3 Profiler instance .
10401	Initializes the transport object .
10402	Get the blameable attributes .
10403	Get timestamp attributes .
10404	Evaluates the attributes defined in the event .
10405	Initializes the base actions info trait .
10406	This function is executed before the request is made .
10407	This function is executed after the request has been completed .
10408	Reads data from the socket .
10409	Sends data to the server .
10410	Restores the dump
10411	Create database dump .
10412	Initializes the menu .
10413	Adds a button to the menubar
10414	Run wxwidgets .
10415	Populate columns with longest value .
10416	Populate numeric columns with longest value .
10417	Transforms a JSON string into an associative array .
10418	Register the Doctrine ORM configuration .
10419	Sets a file .
10420	Sets a POST field .
10421	Sets the raw content .
10422	Resolve a class
10423	Bind a class to the container .
10424	Get the concrete from the container .
10425	Dispatches an event to the event dispatcher .
10426	Returns the spacer type for a channel .
10427	Returns the alignment of a channel spacer .
10428	Adds a set of specified permissions to a channel . Multiple permissions can be added by providing the two parameters of each permission .
10429	Removes a set of specified permissions from a channel . Multiple permissions can be removed at once .
10430	Adds a set of specified permissions to a client in a specific channel . Multiple permissions can be added by providing the three parameters of each permission .
10431	Removes a set of specified permissions from a client in a specific channel . Multiple permissions can be removed at once .
10432	Returns the list of files in a channel .
10433	Returns the TeamSpeak3_Node_Client object matching the given ID .
10434	Returns the TeamSpeak3_Node_Client object matching the given unique identifier .
10435	Moves a client to another channel .
10436	Kicks a client from the channel .
10437	Removes a set of specified permissions from a client . Multiple permissions can be removed at once .
10438	Returns the server group with the given ID .
10439	Returns the first server group matching the given name and type .
10440	Adds a set of specified permissions to a server group . Multiple permissions can be added by providing the three parameters of each permission .
10441	Returns the profiles of all registered server groups .
10442	Returns the channel group specified by its ID .
10443	Returns the channel group with the specified name and type .
10444	Adds a set of specified permissions to a channel group . Multiple permissions can be added by providing the three parameters of each permission .
10445	Resets the permissions for the current user .
10446	Uploads an icon to the server
10447	Creates a new server snapshot .
10448	Returns a list of log entries .
10449	Adds a message to the log .
10450	Sorts the list of clients .
10451	Sorts the group list .
10452	Sorts the file list .
10453	Returns a copy of the server group .
10454	Returns the icon name for the given key .
10455	Returns the class name of the current object .
10456	Returns the viewer object .
10457	Filters a list of nodes by a set of rules .
10458	Writes a file to the filesystem .
10459	Gets the hydrator class name
10460	Establishes a TCP connection .
10461	Closes the connection to the server .
10462	Reads a line from the connection stream .
10463	Checks if a class can be created .
10464	Store a newly created role in storage .
10465	Update the specified role in storage .
10466	Remove the specified role from storage .
10467	Make a GET request to the API
10468	Returns the Corpus class for the current node .
10469	Returns the Corpus icon
10470	Returns the Corpus name for the current node
10471	Returns the flag image for the current client
10472	Initializes the file transfer .
10473	Uploads a file to the server .
10474	Returns the contents of a file as a string .
10475	Returns the session context .
10476	Returns the type manager .
10477	Returns the database connection .
10478	Removes the database connection from the pool
10479	Process the security filters
10480	Dispatches the current request .
10481	Get all GET parameters
10482	Render a webpage
10483	Validate a request object
10484	Dispatches the view
10485	Redirect to default module view
10486	Redirect to default user view
10487	Initializes the user profile .
10488	Get the user preference
10489	Get the default permission for a group .
10490	Returns the current view name
10491	Sets the current view name
10492	Returns the current view set
10493	Sets the current view set
10494	Set the base path of the application
10495	Returns the path to the modules directory
10496	Adds a hash to a data query .
10497	Checks if a string matches a given hash .
10498	Reads the metadata from the plugin service .
10499	Use an account to send the mail
10500	Sends an e - mail
10501	Log an e - mail
10502	Returns information about the current page .
10503	Returns the path to the autoload library file for the given class name .
10504	Loads a metadata class .
10505	Get the path to the core lib file based on the class name
10506	Tries to find class file on cache .
10507	Fill a person with the given attributes
10508	Set a job by name .
10509	Process all jobs .
10510	Make sure the date is in the given format
10511	renders the label
10512	Flattens a path .
10513	Get the application configuration .
10514	Create a new request .
10515	Stores all the responses in the cache
10516	This method is used to get the data from a Biz object and return it as an array .
10517	Render the XY Plot
10518	Converts a mark string to a mark constant .
10519	Returns the font code for a given font name
10520	Get an instance of this class .
10521	Get an attribute by key .
10522	Set an attribute in a group .
10523	Get an attribute from a group .
10524	Find a model by its primary key or create it if not found .
10525	Get the model instance .
10526	Generates a unique id for a hook .
10527	Call all filters
10528	Append a callable to a hook .
10529	Checks if a hook exists .
10530	Call a hook .
10531	Replace Hook Function
10532	Returns the number of registered hooks .
10533	Check if hook is active or not .
10534	Check if hook is called
10535	Add route to router .
10536	Pipe route .
10537	Run the application .
10538	Process a singal execution .
10539	Sets a definition .
10540	Returns the raw definition for the given id or closure .
10541	Encrypt the given value with the given key .
10542	Decrypts a value .
10543	Get default key
10544	Calculate the arguments .
10545	Get the type of a string
10546	Add app .
10547	Get a sub route .
10548	Returns a string representation of the tree .
10549	Unserialize the menu item .
10550	Returns the actual year of a given year .
10551	Get current timestamp
10552	Returns the day name for the given day .
10553	Returns the short day name for the given day .
10554	Returns the month name for the given month .
10555	Returns the short month name for the given month .
10556	Returns a formatted date .
10557	Returns a formatted datetime string
10558	Register base services .
10559	Create a new section tree
10560	Sets the owner of the entity .
10561	Removes the comments from the source code .
10562	Minify CSS .
10563	Set a global .
10564	Quote a value
10565	Explode a string into an array .
10566	Get a role by name .
10567	Adds a role to the user .
10568	Check if the user has a certain role
10569	Default error handler
10570	Exception handler for OpenBizx
10571	Get error message for output
10572	Return the backtrace of an error .
10573	Sets the name .
10574	Adds a setting to the result .
10575	Add a setting that can be cached .
10576	Unsets an offset
10577	Sets the sync state .
10578	Collects data about the sync .
10579	Returns the expression context .
10580	Terminate this process .
10581	Register a child execution .
10582	Marks a child execution as terminated .
10583	Sets the current scope .
10584	Creates a new execution .
10585	Create a new nested execution .
10586	Find child executions .
10587	Returns the variables of the current execution .
10588	Get a variable from the current scope .
10589	Get a variable from the current scope .
10590	Set a variable in the current scope .
10591	Sets a variable in the current scope .
10592	Removes a variable from the current execution
10593	Removes a variable from the current scope .
10594	Executes the given node .
10595	Enter the wait state .
10596	Signal execution .
10597	Take a transition .
10598	Creates a new concurrent root execution .
10599	Load a message file
10600	Get a message by ID .
10601	Create a new Zend_View object
10602	Checks if given path is a directory and is readable .
10603	Checks if given directory is writable .
10604	Checks if given value is a regular file and is writable .
10605	Checks if given value is a regular file and is readable .
10606	Validate if value is a valid email address .
10607	Validate IP address .
10608	Validate an IPv4 address .
10609	Validate if given value is not a reserved IPv4 address .
10610	Validate an IPv6 address .
10611	Initializes the view .
10612	Checks if a class has an attribute .
10613	Checks if a class has a method .
10614	Get the parameters of a method .
10615	Get the ReflectionMethod for the given object and method .
10616	Converts the object to an array .
10617	Get sms response .
10618	Get blank line
10619	Count term cols
10620	Returns a formatted error block
10621	Returns a line of text .
10622	Inserts a value into an array at a given position .
10623	Set validation rules
10624	Complete the flow .
10625	Get an object by name .
10626	Creates an object and returns it .
10627	Register a new configuration file
10628	Authenticates a user using an authorization code
10629	Get the current user s feed .
10630	Get a list of all media liked by the user .
10631	Set a user s relationship
10632	Sets an array of properties .
10633	Returns all records from the database
10634	Returns the number of rows in the database .
10635	Find a record by ID .
10636	Creates a new record in the database .
10637	Query the source table .
10638	Executes the query and returns the results .
10639	Check if the condition can proceed .
10640	Creates a link tag
10641	pick to parent form element
10642	Parses the picker map
10643	Converts an array of reflection classes to an array of self .
10644	Initialize the column map and the key field map
10645	Returns the field for a given column .
10646	Returns the key search rule .
10647	Sets the values of all fields in a record array .
10648	Save old record
10649	Returns an associative array of the values of this field
10650	Converts a SQL array to a record array
10651	Sets the value of the field from the sql array
10652	get join input record
10653	Returns the rule used to search for a join .
10654	Returns the current request method .
10655	Returns the current request URI .
10656	Get the options from the doctrine configuration
10657	Make the builder instance .
10658	Issue access token
10659	Format the settings .
10660	Decodes a JSON file
10661	Validates a TOTP value .
10662	Lists all Comment models .
10663	Update a record
10664	Dispatches the route and returns the resource ID
10665	Implode an array into a single string .
10666	Export Excel to CSV file
10667	Render a CSV file
10668	Get the data table for the object
10669	Loads the statefull variables for the current object
10670	Returns the value of a property .
10671	Returns the active record
10672	Sets the active record id .
10673	Fetches all records from the search result set
10674	Performs a direct fetch to the database .
10675	Fetches a number of records from the database .
10676	Returns the number of records in the result set .
10677	Performs the actual search and returns the results .
10678	Get number of records
10679	Fetch the next record from the result set
10680	Add sc key script
10681	Get a configuration value .
10682	Bootstrap the application .
10683	Authenticates a user in the database
10684	Sets the AWonder request property
10685	Sets the maximum age of the file .
10686	Fixes the mime type .
10687	Validates a MIME type .
10688	Checks if the file is a text file .
10689	Checks if the file is full .
10690	Set file properties
10691	Check if the request has a valid ETag or if - modified - since
10692	Reads data from filesystem .
10693	Sends the content to the client .
10694	Cleans the source string .
10695	Minify JS .
10696	Minify CSS .
10697	Word - wrap text .
10698	Get the text content of the file
10699	Sends the text response .
10700	Sets the allowOrigin attribute
10701	Send file to browser
10702	Register a text provider .
10703	Denormalizes data into an instance of the given class .
10704	Returns whether or not the given type supports denormalization .
10705	Validates data against a set of rules .
10706	Validate a model against a set of rules
10707	Get menu action attribute .
10708	Get the URL attribute .
10709	Go to the next page
10710	Skips the current page .
10711	Go to the previous page .
10712	Finishes processing the form
10713	Cancels the session .
10714	Renders the form .
10715	Generates a random string of a given length
10716	Returns true if the value returned by the callback returns true otherwise returns false .
10717	Ternary shortcut .
10718	Returns true if the container contains the given value .
10719	Merge another object into this one
10720	Creates a new application instance .
10721	Dispatches an event .
10722	Count records by group .
10723	Aggregate a group of documents .
10724	Find a document by ID .
10725	Get an array of MongoId objects from an array of objects
10726	Normalize date .
10727	Returns true if the form is in the refLibs collection
10728	Render the form .
10729	Returns the current page URL .
10730	Initialize all form objects
10731	Compare two integer values
10732	Get integer value
10733	Finds all source files in a directory .
10734	Registers a namespace
10735	Builds the cache .
10736	Find Composer autoloader
10737	Finds the composer autoloader vendor directory .
10738	Returns a list of class loaders .
10739	Get middleware or fallback to visible attribute .
10740	Set a middleware or fallback to the visible attribute
10741	returns a new instance with the given limit
10742	Return a new instance with the given array limit .
10743	Convert string to SQL string .
10744	Converts an array into a string .
10745	Create an array pair .
10746	Convert an array to a string .
10747	Converts a value to a PHP object .
10748	Handle a RejectEnvelope event .
10749	Boot the application .
10750	Render a webpage
10751	Render a webpage using smarty
10752	Render a view from a template file
10753	Set the headers for the response
10754	Create a new comment .
10755	Returns a list of all PHP files in a directory .
10756	Sort modules .
10757	Returns an array of all available routes
10758	Renders the menu items
10759	Renders a single menu item
10760	Writes CSV data to file .
10761	Configures the console command .
10762	Read the config from the config handler
10763	Runs the checks .
10764	Runs the export .
10765	Writes the cachable settings to the cache .
10766	Get the loaded cache .
10767	Initializes the application .
10768	Executes a command and returns the output as a string
10769	Execute a command and flush the output .
10770	Check if value is chainable .
10771	Validates the form
10772	Checks if the condition is satisfied by the given group item
10773	Complete the flow .
10774	Get the sql value
10775	Returns the value of this column .
10776	Save the old value .
10777	Returns the default value of the field .
10778	Returns the value to be used when creating a new record
10779	Returns the value to be updated
10780	Check if the required attribute is set .
10781	Check the type of the value
10782	Validate the data object against the validator
10783	Find a file by name .
10784	Prepare the name .
10785	Sets the theme to use .
10786	Register a new theme .
10787	Add a theme .
10788	Returns the offset for a given key .
10789	Get the key of an array by offset
10790	Return the standard deviation of an array
10791	Set route middleware .
10792	Get the action class name
10793	Get path parameters .
10794	Checks if a scheme is registered .
10795	Checks if the given hostname is in the list of known hostnames .
10796	Checks if the given URI matches the configured pattern .
10797	Fetches a tree of Nodes .
10798	Search for a node and add it to the path array
10799	Recursive function to get all children of a node
10800	Returns the settings for all success results .
10801	Get the link
10802	Returns the value of the text attribute
10803	Returns a new record
10804	Sets the secret .
10805	Returns the binary representation of a number .
10806	Returns the number formatted according to the locale
10807	Adds a table column to the query
10808	Adds an SQL expression to the query .
10809	Resets the where and orderBy properties to their initial values .
10810	Adds an ORDER BY clause
10811	Adds another SQL to the query .
10812	Adds an association to the query
10813	Get the SQL statement for this select query
10814	Returns the value for the given key .
10815	Runs the CLI application .
10816	Get the default template locations .
10817	Renders the select box
10818	Get google fonts .
10819	Checks if the route matches the given groups .
10820	Validates the input of the object
10821	Validates uniqueness .
10822	Returns true if the record can be updated .
10823	Returns true if the record can be deleted .
10824	Update a record in the database
10825	Return a new record
10826	Generates a new ID and returns it .
10827	Insert a record into the database
10828	Delete a record from the database
10829	Gets the fields that are marked as on audit
10830	Execute the DoTrigger service
10831	Get the fields from the join data object
10832	Returns the join record for the given join data object .
10833	Check if we need to generate ID
10834	Runs the checks defined in the configuration .
10835	Initializes the report .
10836	Resolves the route for the given request
10837	Resolve action parameters .
10838	Checks if a setting with the given name exists in the configuration .
10839	Get setting by name groups and flag .
10840	Returns all settings .
10841	Loads the cache from a file .
10842	Sets the cache location .
10843	Prefix CSS .
10844	Prefix flex align items
10845	Prefix the align - content rule
10846	Prefix the align - self rule
10847	Prefix flex .
10848	Prefix justify - content with flex - pack
10849	Get the rules associated with the prefix .
10850	Adds a comment to a media .
10851	Make a DELETE request
10852	Get filtered media
10853	Get the preferred image
10854	Gets a placeholder from the media .
10855	Creates a new rule from a string .
10856	Returns the formatted output .
10857	Get a reflection method for an Eloquent model .
10858	Index action .
10859	Renders the sitemap .
10860	Get XML Tree
10861	Checks if the request is valid .
10862	Determine the access token from the request header or the request handler .
10863	Call a method on each middleware in the stack .
10864	Check if call context has changed
10865	Stores a command in the queue .
10866	Executes the given callback and syncs the executions .
10867	Get a PH .
10868	Create the environaut . phar file .
10869	Get a pattern by name .
10870	Merge the group config into the current config .
10871	Remove a record from a data object
10872	Remove association from M to M table
10873	Remove record MTO1
10874	Convert relations to an array .
10875	Reads the metadata from the XML file .
10876	Read the meta collection
10877	Prefixes the package with the package name if it is not already prefixed .
10878	Allow access to the current user
10879	Builds the redis driver .
10880	Get the model for a table
10881	Add a resolver type
10882	Returns the resolver for the given type
10883	Sets a resolver for the given type .
10884	Resolve the given type and reference .
10885	Sets the authorative flag for all resolvers .
10886	Register a module
10887	Sort modules by precedence
10888	Sets the precedence of a module .
10889	Auto configure from composer . json
10890	Find all modules in a directory .
10891	Get element by field name
10892	Register the framework .
10893	Converts a formatted string to a value
10894	Converts a value to a formatted string .
10895	Converts a value to a number according to the given format
10896	Converts a number to a value .
10897	Convert a value to a date string
10898	Converts a date to the given format .
10899	Converts a value to a datetime string
10900	Converts a datetime value to the given format .
10901	Converts a value to currency .
10902	Replaces currency symbol with thousands separator .
10903	Convert mask to phone number
10904	Converts a datetime value from one format to another .
10905	Parses a date using a date format .
10906	Renders the DSN for MySQL .
10907	Renders the DSN for PostgreSQL .
10908	Render the DSN parts .
10909	Insert data into a table
10910	Insert multiple records into a table
10911	Get the request path
10912	Get an entry from the container .
10913	Format a query string .
10914	Formats a value for use in a query .
10915	Sets the list of parameters that will be bound to the query .
10916	Get DB Profile
10917	Formats a environaut configuration report .
10918	Validates strong password
10919	Validates an email address
10920	Validates a date
10921	Get error message
10922	Make the input and output arrays .
10923	Agrega un registro no banco .
10924	Generates a new ID based on a generation type .
10925	Get new system id from ob_sysids table
10926	Generates a new GUID .
10927	Get new id with sql
10928	Get the visible attribute .
10929	Set log formatter
10930	Preparing a file for writing
10931	Close a log file .
10932	Get log file path
10933	Get formatter by file extension .
10934	Returns the organization document manager .
10935	Render a view
10936	Output the pdf to the browser
10937	Sets the base URL of the REST client .
10938	Creates a cURL resource .
10939	Get a list of all endpoints
10940	Make a POST request to the API
10941	Sends multiple POST requests to one or more endpoints .
10942	Push a job onto the queue .
10943	Create the payload for the job .
10944	Converts a content element key to a content element identifier .
10945	Returns the signature of a content element .
10946	Returns the signature of a content element .
10947	Get the title of the form
10948	Remove a record from the database .
10949	Function to sort records by a column
10950	Filter the view children by the given column .
10951	Filter view children by system language .
10952	Set field value by db key
10953	Get data as array
10954	Fill the entity with the given data .
10955	Extract a zip file to a directory .
10956	Add a file to a zip file .
10957	Decompress a gzipped file .
10958	Reads a line from a file .
10959	Get the size of a file or directory .
10960	Get all class names from a file .
10961	Adds a new route .
10962	Resolve the route for the given request .
10963	Resolve a config key .
10964	Checks if a key exists .
10965	Returns the value associated with the key or a default value if the key does not exist .
10966	Load a config file
10967	Get background details .
10968	Opens a new connection to Twitter .
10969	Check response status code
10970	Handles a message received from the server .
10971	Checks if the status string is a message .
10972	Reads the next chunk size from the stream .
10973	Read data from the stream .
10974	Returns the value of a property .
10975	Returns the default value of the field
10976	Returns the value of the hidden attribute
10977	Returns the value of the text attribute
10978	Returns a map of shortcut key = > Formed Function
10979	Get the context menu for the form
10980	Get the event function
10981	Returns the redirect page for the given event handler
10982	Returns the function type for the given event handler .
10983	Sets the form name and element name
10984	Adjusts the form name .
10985	Get the form function .
10986	Parses a function string into its name and parameters .
10987	Call the middleware .
10988	Clears the group .
10989	Halts the execution .
10990	Reset the middleware .
10991	Create a new instance of a data type .
10992	Converts a counter into a string .
10993	Sends GET request .
10994	Make a POST request .
10995	Get the response
10996	Check if we will follow redirects
10997	Check effective time
10998	Parse a string into an array .
10999	Parse a string into an array
11000	Render a form object
11001	render smarty template
11002	Render form using php template
11003	View an existing Entity .
11004	Create a new resource .
11005	Call entity method .
11006	Get the middleware for a key .
11007	Gets the default commands .
11008	Updates the given user .
11009	Returns the settings from the plugin .
11010	Gets the group .
11011	Get the direct membership of the group .
11012	Get effective membership
11013	Parse the membership .
11014	Parse history .
11015	Parses the affiliate element
11016	Parse search data
11017	Get the current view object .
11018	Returns the element with the given name
11019	Returns an array of error elements
11020	Rerender all sub forms
11021	Set the bundle class name
11022	Get translation key .
11023	Returns a list of all words .
11024	Load the config into the options array
11025	Remove an item from the cache
11026	Returns an array of cache IDs
11027	Clean all cache entries
11028	Recursively creates a directory .
11029	Reads configuration data from a location .
11030	Get config reader by file extension
11031	Add a branch to this node .
11032	Add a route to the router
11033	Find a route branch by part .
11034	Returns the next route branch for the given URI part .
11035	Find by issue .
11036	Get the wp - contents .
11037	Get Wordpress categories .
11038	Get WPMenus .
11039	Get Wordpress pages .
11040	Get wp posts
11041	Get WordPress post types .
11042	Get the tags .
11043	Get Wordpress taxonomies .
11044	Get Wordpress terms .
11045	Adds a path to the search path
11046	Sets the precedence for a module
11047	Get the precedence of a module
11048	Clear resolve cache
11049	Get data from cache
11050	Resolves a file from the cache .
11051	Parse the request URI into module view and uriParams
11052	Saves the statefull variables to the session
11053	Returns the current step .
11054	Get form inputs
11055	Cancel all visited forms
11056	Register a sub - type
11057	Get the input from the request
11058	Delete cached files .
11059	Converts an array to a number of seconds .
11060	Returns a list of all keywords in a text .
11061	Find emails in text .
11062	Check if a haystack contains a set of queries .
11063	Sends a request to Bizhost and returns the response .
11064	Run the up migration .
11065	Migrate all migrations from a directory up .
11066	Set the id of the entity
11067	Run the next job in a daemon
11068	Checks if a parameter exists .
11069	Generate an OAuth request .
11070	Gets the OAuth signature .
11071	Returns a node by ID .
11072	Add a transition to the collection .
11073	Adds a setting .
11074	Adds multiple settings at once .
11075	Get all settings
11076	Get all cachable settings
11077	Returns all settings as an associative array
11078	Get all cachable settings as an associative array
11079	Get settings filtered by groups and flag
11080	Get the filtered settings as an array
11081	Render the tree as HTML .
11082	Renders a list of node items
11083	Renders a single node item
11084	Run the bootstrap process .
11085	Register the bundles for the given environment
11086	Installs all autoloaders
11087	Initializes the command .
11088	Autoload a class
11089	Load a file by its ID .
11090	Forward the request to another route .
11091	Add glyph icon
11092	Sets the query parameters .
11093	Sets the limit for the query .
11094	Get the database connection .
11095	Returns the value of a property .
11096	Get a reference to an object
11097	Set the association
11098	Create a collection of annotations from a docblock .
11099	Factory method to create a new instance from memory .
11100	Creates a new SqliteConnection from a file
11101	Get field by name
11102	Check if a field exists
11103	Returns an array of all field names
11104	Returns the initial data model .
11105	Authorize index action .
11106	Authorize creation of a new resource .
11107	Get a nested item from an object
11108	Initializes the device and style from the user agent
11109	Get the export implementor .
11110	Get the report implementation .
11111	Get the runner implementation .
11112	Get the cache implementation .
11113	Builds the SQL for updating a record
11114	Build the SQL to delete a record
11115	Get the style of the combobox
11116	Returns the children of this node .
11117	Get attribute value
11118	Returns the attributes of the node .
11119	Gets a child node by name .
11120	Gets the literal value .
11121	Cache the result of the closure if configured .
11122	Handle the call and return the result
11123	Checks if method is callable .
11124	Check if this is a getter call
11125	Check if this is a setter call
11126	Prepare the call
11127	Get the response body .
11128	Get the JSON from the response body .
11129	Save a variable in a session object
11130	Load a variable from an object
11131	Save all session objects
11132	Clear all session objects
11133	Save JSON Array
11134	Set the history info for the current view
11135	Start timer .
11136	Toc function .
11137	Update the calibrated time
11138	Resets the timer .
11139	Validate executable path .
11140	Get redirect page and target
11141	Process DataObj errors
11142	Process form and cform URL
11143	Get the base URI .
11144	Validates the given identity .
11145	Sets up the authentication result info .
11146	Set the visibility of an attribute .
11147	Return the first value of the query as an array .
11148	get from list
11149	Formats a report .
11150	Call a middleware method .
11151	Call proxy getters
11152	Call proxy methods .
11153	Call proxy setters .
11154	Get or set catch halt exceptions
11155	Clear all middleware .
11156	Disable a middleware .
11157	Enable middleware .
11158	Get middleware by key
11159	Get middleware group .
11160	Group middleware by name .
11161	Checks if a middleware exists .
11162	Check if a middleware is disabled .
11163	Check if a middleware is enabled .
11164	Get middleware by key
11165	Create a middleware collection .
11166	Prepend a middleware to the middleware group .
11167	Push a middleware onto middleware group .
11168	Set the middleware context .
11169	Call a middleware .
11170	Save the settings to the cache .
11171	Return an array of forms
11172	Sets up the autoloader from the JSON file .
11173	Find the transition that is connected to the current execution
11174	Returns a function that can be used to perform a remote API call .
11175	Returns a function to submit the form
11176	Returns a javascript link tag
11177	Returns a js submit tag
11178	Casts a key to a string
11179	Check if the given value is an abstract middleware .
11180	Checks if the given value is a collection .
11181	Resolve a middleware .
11182	Resolve a middleware into an instance or throw an exception .
11183	Resolve multiple middleware .
11184	Resolve a middleware collection or create a new collection .
11185	Resolve a single middleware .
11186	Resolve a middleware or throw an exception .
11187	Render a bizform into a csv file
11188	Get unique string
11189	Check if the user is a member of a role .
11190	Check if user has role .
11191	Returns the hash of the given parameters .
11192	Returns information about the current cURL resource
11193	Perform the request and return the response
11194	Allow access to a view
11195	Get a restricted view object based on its name
11196	Format the settings .
11197	Loads an XML document .
11198	Validates a schema file .
11199	Validates a document against a schema .
11200	Resolve XInclude directives on the current document .
11201	Get the value of an element .
11202	Returns the element with the specified name .
11203	Sets the default namespace
11204	Register the environmentaut namespace .
11205	Checks if the given document contains an environaut configuration document .
11206	Refresh the XPath object .
11207	Converts a libxml error into a string .
11208	Returns all resolvers that can resolve the given subject .
11209	Checks the authorization parameters .
11210	Create a new authorization request .
11211	Complete the flow .
11212	Prints the output of the request .
11213	Get form inputs
11214	Redraws a form
11215	Sends an alert to the client .
11216	Show an error message
11217	Close a popup .
11218	Runs a script on the client .
11219	Redirect to a view
11220	Append scripts to the extra scripts array .
11221	Get the appended scripts to the openbizx app .
11222	Append styles to the extraStyles array .
11223	Return the extra styles that should be appended to the page
11224	Include base client scripts .
11225	Include rte scripts
11226	Include ckeditor scripts .
11227	Include prop_window scripts
11228	Include YAV validator scripts
11229	Execute all trigger actions
11230	Composes the action message .
11231	Converts a string into an array
11232	Process form object errors
11233	Sets the sub forms
11234	Load a picker form and redraw it .
11235	Set the request parameters
11236	Fetches the data set
11237	Get the ID of the element
11238	Autocompletes an input
11239	renders the context menu of the panels
11240	Renders the form and its children
11241	Get Event Log Message
11242	get on event elements
11243	Run the event log
11244	Get invoking element
11245	Set client scripts
11246	Removes a middleware from the stack .
11247	Run the middleware stack and return the response .
11248	Creates a new interval from a string .
11249	Generates a timestamp .
11250	Decode a base32 string .
11251	Returns an iterator for all files in the directory .
11252	Returns a list of all files in the directory .
11253	Returns a list of all directories .
11254	Returns a list of all files in the directory
11255	Create the file .
11256	Creates the directory
11257	Moves the file to a new path .
11258	Rename a file .
11259	Removes the directory .
11260	Set the name attribute .
11261	Set the type attribute .
11262	Set the input format rule .
11263	Set the value of the field
11264	Get the storage value .
11265	Save the children of this model .
11266	Adds a list of child entities to an entity .
11267	Returns the models for the given query builder .
11268	Outputs a list of resources .
11269	Converts a resource to an array .
11270	Generates a reCAPTCHA form
11271	Verify a Google reCAPTCHA site
11272	Get Openbizx service
11273	Render the error .
11274	Renders an HTTP exception .
11275	Render a CakePHP exception .
11276	Renders a serializer exception .
11277	Renders a validation serializer exception .
11278	Render http error as json .
11279	Render an HTTP error as a JSON API response .
11280	Render a CakePHP exception as JSON .
11281	Render a CakePHP exception as a JSON API response .
11282	Default serializer render
11283	Renders a serializer as JSON .
11284	Renders a serializer as a JSON API response .
11285	Default Validation Serializer Render
11286	Renders a ValidationBaseSerializerException as JSON .
11287	Render validation serializer as json api response .
11288	Open a session by ID .
11289	Creates a session based on the given cookie data .
11290	Prepare text .
11291	Displays the given text .
11292	Display empty lines
11293	Initializes the application .
11294	If the request is an ajax request and the response is not a redirection it sets the title and exception headers .
11295	Initializes the debug bar .
11296	Starts a new session .
11297	Prevent Hijacking
11298	Regenerates the session
11299	Validates the session .
11300	Link the layers of the structure .
11301	Get param from backbone model
11302	Register a new PX instance .
11303	Print CLI header
11304	Parses the raw template body .
11305	Remove extra indentation from a string .
11306	Adds additional headers to the request .
11307	Parse query string from url
11308	Bind the theme to the page
11309	Returns the matches for the given URI .
11310	Get the justification constant for a given value .
11311	List local files
11312	Extract documents link from html
11313	Check if a link should be excluded
11314	Save a file to Ruta
11315	Verifica si existe el pdf
11316	Get the next ordered number .
11317	Marks the end of the iteration .
11318	Displays the given text using styling .
11319	Prints a line of text with styling .
11320	Fit the algorithm with the given data set .
11321	Predict a set of instances .
11322	Initializes the database table .
11323	Writes a log record to the log file
11324	Draws a list item
11325	Starts a new line .
11326	Initialises the driver .
11327	Returns the allowed size for the given name .
11328	Creates a form for the given section .
11329	Gets the form factory .
11330	Loads fixtures from an iterator .
11331	Resolves a relative URL .
11332	Installs the package .
11333	Installs a composer plugin
11334	Installs the composer framework .
11335	Update the package .
11336	Update composer framework
11337	Uninstalls a package .
11338	Uninstalls a composer plugin .
11339	Remove all files and directories matching src and dst
11340	Removes a directory recursively .
11341	Sets the text and fill colors .
11342	Gets the text area
11343	Calculates the width of an array of text .
11344	Scope Get By Date Value
11345	Get date value
11346	Cast attribute .
11347	Convert model attributes to an array .
11348	Set a node at a given offset .
11349	Get a menu .
11350	Render the YandexMetrika tracker .
11351	Returns the definitions of the service .
11352	Parses the imports section of the YAML file .
11353	Parses the definitions from the configuration file .
11354	Loads a YAML configuration file .
11355	Resolve services .
11356	Initializes the autoloader .
11357	Get the AES API .
11358	Humanize a number of bytes
11359	Set the bullet .
11360	Sets a column definition .
11361	Calculates the total width of all columns .
11362	Checks if the table has a header .
11363	Returns the header text .
11364	Check if the data is an array and if so pad the array if necessary .
11365	Calculates the width of each column
11366	Draws the table
11367	Create a new session .
11368	Create a new session file .
11369	Save session data .
11370	Acquires a lock for the given session ID .
11371	Create a section form .
11372	Creates a new instance of a class .
11373	Get the facts
11374	Parses the facts string into an array .
11375	Find a record by ID .
11376	Finds a record by a where clause .
11377	Returns all records in the database .
11378	Finds all records matching a WHERE clause .
11379	Creates a new record in the database
11380	Update a record in the database based on a where clause .
11381	Parse the notation .
11382	Applies conditions to an expression .
11383	Calculate the mean of each instance of the DataSet
11384	Creates a new plugin client .
11385	Sets the file to be sent .
11386	Add a template .
11387	Checks the cache file expiration time .
11388	Replaces placeholders with blocks .
11389	Get template metadata .
11390	Builds the definition providers for the given discovery .
11391	Returns the result for the given formula name .
11392	Save a formula to the stack .
11393	Add header to item .
11394	Sets a drop - down item .
11395	Checks if a user is granted .
11396	Download a file .
11397	Get url by type and key .
11398	Set album cover .
11399	Get data by type .
11400	Get the data from a URL
11401	Installs the resource controllers .
11402	Checks if a date is a valid date .
11403	Wraps the frame in the GUI .
11404	Run artisan command .
11405	Creates an instance of this class and its methods .
11406	Create a new session .
11407	Send entity information .
11408	Register all providers .
11409	Register a provider from a file
11410	Get the facts .
11411	Populates the facts property with data from the providers .
11412	Records a domain event to the changes event stream .
11413	Applies a domain event .
11414	Call plugin functions
11415	Draws the table
11416	Calculates the given formula .
11417	Checks if the current request has a layout .
11418	Initializes the terminal state .
11419	Overrides the members of this style with a new style .
11420	Clears all styling .
11421	Sets the text color .
11422	Sets the fill color .
11423	Sets the text and fill colors .
11424	Reverses the text and fill colors .
11425	Factory function .
11426	Load all plugins .
11427	Show must - use plugins in admin .
11428	Check if Bedrock is enabled and if so update the cache .
11429	Update the plugin cache .
11430	Register plugin hooks .
11431	Get a channel by name .
11432	Initializes the loggers .
11433	Create a logger instance .
11434	Get all Locations .
11435	Creates a new instance of this class .
11436	Returns an array of ReflectionClass instances of all implemented interfaces .
11437	Get the parent class .
11438	Get the methods of the class .
11439	Gets the properties of the class .
11440	Check if the current user is in the given type .
11441	Adds a MaterializedResource to the collection .
11442	Get aggregate style .
11443	Rewrites paths in styles .
11444	Wraps the media rules in the styles .
11445	Move all imports to the start of the given content
11446	Gets an archive by its ID .
11447	Remove a file from the archive .
11448	Get session archive path
11449	Get archive file path .
11450	Clean up merged values .
11451	Applies a list of filters to an array .
11452	It returns terminal screen size
11453	Returns the style of the given content .
11454	Returns the contents of a JavaScript file as a string .
11455	Create a new email address .
11456	Returns a value that can be used as a static control .
11457	Generates a Bootstrap static control for a model attribute .
11458	Adds a CSS style to the given options .
11459	Make directory if not exists .
11460	Get the list of files to publish .
11461	Initializes the user component .
11462	Logs in the given identity .
11463	Regenerate CSRF token .
11464	Login by cookie .
11465	Get the return URL .
11466	Checks if a login is required and redirects to the login page .
11467	Renews the identity cookie .
11468	Renews the auth status from the session .
11469	Check if the user has a permission .
11470	Returns the days of week in an array .
11471	Save the uploaded file to a directory .
11472	Executes the query and returns the result
11473	Sets the query type to delete
11474	Sets the query type to INSERT
11475	Adds a inner join to the query .
11476	Adds one or more where predicates to the expression .
11477	Adds a having clause to the query .
11478	Get the SQL for a DELETE statement .
11479	Creates a positional parameter
11480	Bind the logger interface to the container .
11481	Bind the logger to the container .
11482	Sets the status code .
11483	Returns the raw body formatted according to the format .
11484	Redirects the user to another url .
11485	Create an empty response object .
11486	Returns the headers as an associative array .
11487	Returns a prepared array of cookies .
11488	Get the default response formatters .
11489	Extracts the authUser and authPass components from a base64 encoded string .
11490	Returns all available scenarios .
11491	Fills the given array with the scenarios attributes .
11492	Returns the name of the model
11493	Get the names of all public and private attributes .
11494	Validates the model against all active validators .
11495	Validates multiple models .
11496	Return a translated message .
11497	Adds an attachment to the message .
11498	Add a plugin to the request .
11499	Sends the request and returns the response .
11500	Load a class
11501	Returns the listeners for the given classes .
11502	Set listener properties .
11503	Get listener from annotation .
11504	Returns all options or a single option .
11505	Sets an array of options .
11506	Get a key value by key type and key value .
11507	Fill the model from an array
11508	Load doctrine entities from a directory .
11509	Extend the entity manager .
11510	Check all predictions and throw an exception if any .
11511	Process extended section
11512	Verify method exists in class
11513	Verify class property
11514	Verify that the function is callable
11515	Verifies that the dispatch object has a valid closure .
11516	Verifies the given dispatch capability .
11517	Get the dependencies for the given dispatch .
11518	Get the arguments for the given dispatch .
11519	Dispatch class method .
11520	Get the value of a class property .
11521	Get the dispatch class .
11522	Dispatch function .
11523	Get the closure for the dispatch .
11524	Dispatch a callable .
11525	Returns the arguments as a string
11526	Returns the request arguments .
11527	Parses the request arguments .
11528	Returns the URL for a named route .
11529	Set the HTTP protocol version .
11530	Assert that the header values are valid
11531	Injects a header with a value .
11532	Returns the current date .
11533	Checks and updates the fields of a cookie
11534	Stores a cookie .
11535	Adds all cookies from a Response
11536	Returns all cookies matching the given URL .
11537	Returns all cookies .
11538	Serializes the session .
11539	Unserializes the session
11540	Check if the given domain matches the given host .
11541	Factory method to create a new command object .
11542	Get the arguments for a given command .
11543	Get the help for a given command .
11544	Returns a singleton object or sets a new one .
11545	Converts an expression to a target system .
11546	Parses the given part and converts it to the given target system .
11547	Process a single key
11548	Trims unicode characters .
11549	Sets the encoding used by this filter
11550	Creates an iterator exception .
11551	Initializes the plugin .
11552	Init url language prefixes
11553	Get the message formatter .
11554	Starts a new transaction .
11555	Get the API request URL .
11556	Get the API request parameters
11557	Get the success lines from the API response
11558	Get success message
11559	Find all budgets by accountId .
11560	Get the current language
11561	Parses the Accept - Language header .
11562	Bind a value to a binding .
11563	Make a class instance .
11564	Validates that the given URL is valid .
11565	Check if a field name is in liveVars
11566	Return the value of a field as an object
11567	Wrap an object in a ViewableWrapper
11568	Return the value of the field as a date object
11569	Make session identifier .
11570	Encrypt session data
11571	Decrypts the session data .
11572	Get the encryption key for the session id .
11573	Sets the encryption algorithm .
11574	Sets the hash algorithm .
11575	Prepare update sets .
11576	Method to initialize the service .
11577	Returns the value of a parameter .
11578	Checks if the target relation exists in the model .
11579	Checks if the target attribute exists in the model .
11580	Return a promise for checking if a value exists .
11581	Gets the clause of the query
11582	Renders a modal .
11583	Returns a localized version of a file .
11584	Detaches the stream
11585	Read the given number of bytes from the stream
11586	Creates a new request instance .
11587	Create a new instance from PHP globals .
11588	Sets the server array .
11589	Set request headers .
11590	Returns the request path .
11591	Returns the path without the query string .
11592	Returns the HTTP host .
11593	Sets the request method .
11594	Returns the request method .
11595	Get the MIME type for a given format .
11596	Returns the format of the given mime type .
11597	Returns the request format .
11598	Renders a controller method .
11599	Initializes the HTTP server .
11600	Add a middleware to the stack
11601	Create a request application .
11602	Sets an alias .
11603	Sets the aliases .
11604	Get error log level .
11605	Generates a proxy for the given class name
11606	Returns the parameters for a method call .
11607	Generates a proxy class .
11608	Get the properties of a class .
11609	Get the methods that can be proxied .
11610	Generate proxy class name
11611	Gets the argument declaration of a method .
11612	Checks if the given method can be proxied .
11613	Checks if a list of methods can be proxied .
11614	Traverses an array structure and returns it as a string .
11615	Returns the parameters of a method .
11616	Create hooks for a repository .
11617	Loads messages from database .
11618	Bootstraps the application .
11619	Bootstrap the application configuration .
11620	Bootstrap the core .
11621	Bootstrap the application container .
11622	Get the value of an environment variable .
11623	Set the current environment .
11624	Get a configuration value .
11625	Throw an HttpException
11626	Throws a redirect exception .
11627	Get a response instance .
11628	Redirect to a route .
11629	Get a view instance .
11630	Get an item from the collection .
11631	Validates a descriptor key .
11632	Validates the given key with the given descriptor .
11633	Get cache invalidation settings
11634	Sets the cache invalidation settings .
11635	Initializes the logger .
11636	Get log file path
11637	Verifies a password against a hash .
11638	Sets the value of the exists property
11639	Renders the progress bar .
11640	Renders progress bar .
11641	Process SOAP request
11642	Get the SOAP server
11643	Invalidates all scheduled entities .
11644	This method is invoked after the cache has been flushed .
11645	Invalidates an entity .
11646	Adds a tag to invalidate .
11647	Choice SEXE .
11648	Set the filter callback
11649	Applies the filter to a value .
11650	Get WinCache allocation percentage
11651	Get all Seo
11652	Set Seobility .
11653	Get Seo by condition
11654	Converts the value to a boolean .
11655	Get Ordinate By Abscissa
11656	Returns the abscissa for a given y coordinate
11657	Adds an attachment to the message .
11658	Encodes the part into a string .
11659	Encodes the message to a file and returns the headers .
11660	Encode this part to a file and write it to a file handle .
11661	Add a subpart to the message .
11662	Encode quoted printable characters .
11663	Build a header parameter
11664	Build a RFC2047 parameter
11665	Explode a quoted string into an array
11666	Encode a header value
11667	Encode a string using MB encoding .
11668	Return the admin messages view .
11669	Returns the next line of the file .
11670	Renders the menu items .
11671	Loads the controller class and method annotations .
11672	Set a cache option
11673	Creates a slug from a string .
11674	Create a sentence from a list of words
11675	extract gallery array from Flickr response
11676	Checks if the session is still valid .
11677	Get field error message .
11678	Sets the sameSite
11679	Clean and add header .
11680	Find classes that are in PSR - 4 .
11681	Get the path to a namespace .
11682	Get the namespace paths .
11683	Get namespace prefixes
11684	Get the loader prefixes .
11685	Updates the current session .
11686	Merge the session with the given values .
11687	Get a value from the session .
11688	Get the page number from the query string .
11689	Returns the query string .
11690	Get filters as array
11691	Create the form .
11692	Stores the result in the session
11693	Get the pagination .
11694	Returns the previous and next record id .
11695	Return an array representation of the object .
11696	Add a new field .
11697	Process input options
11698	Get connection params
11699	Check if database is installed
11700	Get the SQL string for the current object
11701	Execute the query and return the resultset
11702	Get the repository for an entity .
11703	Adds an entity to the create list .
11704	Save an entity to the database .
11705	Removes an entity from the collection .
11706	Commit changes to database .
11707	Get store instance by name .
11708	Get the configuration for the given store .
11709	Get the store instance based on the configuration .
11710	Validates the password .
11711	Create a new instance from an Accept header .
11712	Parses a header string into an array .
11713	Compare a string against a list of strings .
11714	Returns the earth radius for the given latitude .
11715	Converts a decimal coordinate to DMS
11716	convertDMStoDec converts a number of degrees from 0 to 1
11717	Devuelve la respuesta de traduction
11718	Render error message in debug mode
11719	Logs the error .
11720	Generates configuration file .
11721	Creates configuration template .
11722	Saves messages to PHP files .
11723	Saves messages to PO file .
11724	Create Time from array .
11725	Creates a Time instance from a string .
11726	Creates a Time from a DateTime
11727	Creates a Time instance from a number of seconds .
11728	Invalidates the given tags .
11729	Flushes the cache .
11730	Encodes the given tags .
11731	Register the package config .
11732	Returns all cookies .
11733	Sets a cookie .
11734	Remove a cookie .
11735	Confirms the user with the given parameters .
11736	Get labels .
11737	Get a session object
11738	Returns the primary key for a table .
11739	Returns the foreign keys for a table .
11740	Returns the indexes for a table .
11741	Returns the unique metadata for a table .
11742	Returns the table checks metadata .
11743	Returns the default values for a table .
11744	Get a parameter from the container .
11745	Checks access to a permission .
11746	Set the distinct attribute of the query .
11747	Set the columns of the query .
11748	Adds a JOIN statement to the query
11749	INNER Join a table
11750	Left Join a table
11751	Left outer join .
11752	RIGHT OUTER Join a table
11753	outer join .
11754	Full outer join .
11755	Sets the GROUP BY clause .
11756	Add an AND HAVING condition .
11757	Add an OR HAVING condition .
11758	Sets the order by .
11759	Sets the limit and offset .
11760	Set the offset .
11761	Builds the SQL statement .
11762	Renders a link button .
11763	Renders a button .
11764	Renders the locale switcher .
11765	Get the equation string .
11766	Returns the coordinate of this Point based on the abscissa value .
11767	Returns the abscissa of this point based on the y - axis .
11768	Find a record by ID or throw exception .
11769	Find one record by predicate or throw exception .
11770	Checks if a record exists in the database .
11771	Checks if a value exists by a predicate and combination .
11772	Deletes rows matching the given predicate
11773	Delete record by id or throw exception .
11774	Updates data in the table
11775	Inserts a new record into the database .
11776	Returns the relation table instance .
11777	Returns the primary keys of the table
11778	Returns the primary key of the table
11779	Returns the column information for this table .
11780	Execute a statement and return the result
11781	Get the predicate for matching a single primary key value
11782	Checks that all specified columns exist in the data array .
11783	Parse the response as an array
11784	Parse the response as an object
11785	Sets the return type .
11786	Run the plugin .
11787	Enqueue all registered styles and scripts .
11788	Sets the type of the entity .
11789	Set the name .
11790	Set the starting position .
11791	Set the damage .
11792	Set the hit level
11793	Defines the meter gain .
11794	Define inputs .
11795	Add a cancel ability .
11796	Set the start frames
11797	Set the active frames .
11798	Set the recovery frames .
11799	Set the advantage on hit
11800	Advantage on guard
11801	Builds the Move object .
11802	Send a message via slack
11803	Parses an array of path segments .
11804	Parse route data .
11805	Validate route param datum .
11806	Finds the first segment that contains the given param .
11807	Call repository generator .
11808	Validates the given class name .
11809	Check if file is an image
11810	Returns the number of files in the directory
11811	Get the path info of the console .
11812	Get route and params from command line options
11813	Returns a new instance with the specified scheme .
11814	Returns a new instance with the specified user information .
11815	Returns a new instance with the specified host .
11816	Returns a new instance with the specified port .
11817	Queries an array by key .
11818	Query Array By Brackets
11819	Sets the query variables .
11820	Set a query variable
11821	Returns the URL of the current URI .
11822	Normalize the URI .
11823	Resolves a URL to another URL .
11824	Check if this is a fragment only request .
11825	Returns the canonical URL .
11826	Get Requested Url
11827	Get an option by name .
11828	Builds a query string from an associative array .
11829	Parses a URL and sets the components of this object .
11830	Display a text .
11831	Returns the translated message .
11832	Suggest the language based on the backtrace object .
11833	Returns the list of new states .
11834	Filter states names .
11835	Switches the Automated instance to a new state .
11836	Finds all categories for a budget .
11837	Login action .
11838	Logs out the user .
11839	Connects to the given client .
11840	Get a build parameter
11841	Set HTML Body
11842	Add an HTML image to the message
11843	Add an attachment to the message .
11844	Read a file and convert it to a string
11845	Add a text part to a Mail object
11846	Adds the HTML part to the message .
11847	Adds an HTML image part to an HTML object
11848	Adds an attachment part to an attachment object
11849	Encode headers .
11850	Checks the build parameters for invalid characters .
11851	Checks if a value is valid .
11852	Initializes the rule .
11853	Loads the items and assignments .
11854	Save the items assignments and rules .
11855	Save data to a file .
11856	Creates a new JsonResponse instance .
11857	Set the callback name .
11858	Sets the JSON encoding options .
11859	Get the layout .
11860	Returns the category s words as a string .
11861	Update session data .
11862	Deletes the session from the storage .
11863	Configure the PM options .
11864	Load the Pm configuration .
11865	Get the PHP memory limit .
11866	Called when a model is created .
11867	Render the tool
11868	Adds a plugin to the application .
11869	Get a configuration value by key .
11870	Get the URL for a named route .
11871	Defines a route that listens to GET requests
11872	Returns a Response object with HTML content
11873	Creates a redirect response .
11874	Sets the path segments .
11875	Get the proxy instance .
11876	Returns an instance of a given class .
11877	Get all records .
11878	Get a list of entities by a list of fields
11879	Paginates the results .
11880	Find an object by id
11881	Persist an entity to the database .
11882	Deletes an entity from the repository .
11883	Returns the number of entities in the collection
11884	Creates a select query .
11885	Apply scopes to the query builder .
11886	Apply the order by to the query builder .
11887	Makes a no - result exception .
11888	Replaces the query parameters with their values .
11889	Add a method
11890	Get a method by name .
11891	Stop the loop .
11892	Add multiple headers at once .
11893	Set the Link header .
11894	Creates a new request instance .
11895	Get a new PhotoAdapter instance .
11896	Range check .
11897	Starts the session
11898	Regenerate the session id
11899	Writes the session to the session file .
11900	Unset all session variables
11901	Destroys the session
11902	Decode session data
11903	Sets or gets the session cache expiration time
11904	Returns a Reaction instance .
11905	Returns module options
11906	Get the size of the image .
11907	Set the walk flag
11908	Set the array flag
11909	Set matrix data
11910	Returns the value at the given index .
11911	Set the value at the given index .
11912	Rewinds the cursor to the first position .
11913	Get the previous position
11914	Get the previous X value
11915	Move the pointer to the previous Y coordinate
11916	Move the cursor to the previous XY
11917	Return the next position in the walk
11918	Move to the next X value
11919	Move to the next Y coordinate
11920	Move the cursor to the next X and Y coordinate .
11921	Seeks to a specific position in the file .
11922	Get the current position
11923	Get the current key
11924	Check if the current position is valid .
11925	Determine if the X field is set .
11926	Validates the Y - axis .
11927	Return the number of elements in the current walk
11928	Seek to an offset in the array
11929	Seek to an offset integer
11930	Check if an offset exists .
11931	Returns the value at the given offset .
11932	Sets the value at the given offset .
11933	Checks if the value property is a boolean .
11934	Allow a list of view methods for an object .
11935	Allow controller methods .
11936	Sets the table name .
11937	Sets the FROM table .
11938	Adds an AND condition to the query .
11939	Set the conditions for the OR operator .
11940	Sets a static rule .
11941	Sets a reference to a static rule .
11942	Get a Zend_Filter_Interface from a rule string
11943	Emit end body event and register asset files
11944	Register a JS file .
11945	Registers a JS variable
11946	Returns the default configuration files .
11947	Return a singleton instance of the PEAR_Config class
11948	Setup channels .
11949	Merge a configuration file .
11950	Write a configuration file
11951	Read configuration data from a file
11952	Get the default channel for the current configuration .
11953	Return the value of a specific channel .
11954	Sets the channels .
11955	Get the type of a configuration item
11956	Returns the documentation for a given key .
11957	Returns the prompt for the given configuration key
11958	Returns the group associated with the given key .
11959	Returns a list of all groups .
11960	Get a list of all keys for a given group
11961	Returns the valid set values for the given key
11962	Returns an array of all configuration keys .
11963	Removes a key from the configuration .
11964	Removes a layer from the configuration .
11965	Returns the name of the layer defined by the given key .
11966	Checks if a key is defined in all layers .
11967	Set the registry
11968	Process extend clause
11969	Replaces the constants in the given value with their values .
11970	Get callback .
11971	Checks if the given value is a valid value .
11972	Returns the valid values for this enum .
11973	Get valid values from reflection .
11974	Sets the value of this enumeration .
11975	Initializes the plugin object .
11976	Start a session based on an external post - install script .
11977	Add success .
11978	Add idle time .
11979	Returns the estimated amount of the account .
11980	Returns the allowed request methods .
11981	Disables WordPress auto update .
11982	Check if we should block wp - request .
11983	Hide the admin Nag .
11984	Checks if a point is valid .
11985	Returns whether the matrix is parallelogram .
11986	Get a composite value .
11987	Checks if a composite key exists .
11988	Finds an application by id .
11989	Returns all applications .
11990	Checks if this number system is equal to another one .
11991	Get the digits of a number .
11992	Builds a number from the given digits .
11993	Validates a number value .
11994	Makes a call to the server .
11995	Generates a unique key .
11996	Establishes a connection to the Redis server
11997	Get the command string .
11998	Converts a domain event message into a MongoDB document .
11999	Creates a domain event message from the given document .
12000	Resets the object to its initial state .
12001	Normalize the message array .
12002	Post validate callback
12003	Attach form data event
12004	Returns an array of all entity forms
12005	Removes a string from a list
12006	Get all entities
12007	Swaps an entity
12008	Configure a form to exclude data from validation
12009	Set sub form data handler .
12010	Remove excluded fields for the given entity tag .
12011	Add a response to the list
12012	Creates a response object from a string
12013	Creates a response object from a file .
12014	Make a new head version of an entity
12015	Check if the entity needs a new version .
12016	Persists an entity to the database .
12017	Clear all versions of an entity .
12018	Cleans up the given upload path .
12019	Check if a key exists in the filesystem .
12020	Move a key from one filesystem to another .
12021	Reconnects the filesystem if it is not already connected .
12022	Check if a key is a distant filesystem .
12023	Create a new path
12024	Find a single entity by ID .
12025	Create a new entity .
12026	Save an entity .
12027	Delete an entity .
12028	Validates the given entity .
12029	Executes a select query and returns the results .
12030	Returns a select query builder .
12031	Sets the criteria in the query .
12032	Set array criterion in query .
12033	Set order by in query .
12034	Saves the given entity to the database .
12035	Sets the properties for the save create delete query .
12036	Sets the properties for the create or update statement .
12037	Returns the relations of the given entity .
12038	Ensure required properties are set .
12039	Send a message to the server .
12040	Execute a command and return the result .
12041	Get script src
12042	Create div element .
12043	Get the HTML image tag .
12044	Return audio .
12045	Verify a response .
12046	Verify the CAPTCHA response from the request .
12047	Get script tag
12048	Generate captcha script with callback .
12049	Check key .
12050	Check is string
12051	Sends a verify request to the API .
12052	Initializes the reaction .
12053	Finds the full path to a view file .
12054	Render a PHP stateless file
12055	Register post types
12056	Generates a new token .
12057	Generates a new MemoryToken from the given token .
12058	Update the prototype of a project .
12059	Message filter callback .
12060	Log a notice message
12061	Log an info message
12062	Log a debug message
12063	Log a raw message with context
12064	Profile an end of a task
12065	Log a message .
12066	Converts a message to a string .
12067	Converts an exception into a string .
12068	Colorizes text according to a list of colors .
12069	Returns a string representation of a function call .
12070	Process placeholders in the message .
12071	Format the value .
12072	Find seo by condition .
12073	Returns the table name for the given active record .
12074	Deletes all records from the database .
12075	Save record to database
12076	Initialize the database connection
12077	Common constructor .
12078	Returns a list of all available commands
12079	Returns a list of all registered shortcuts
12080	Get the help for a given command
12081	Returns the help arguments for a given command .
12082	On post package event .
12083	compile DSN function
12084	Escapes a value for use in a query
12085	Add a template root to the global config array .
12086	Returns the number of documents in a collection where a column is equal to a value .
12087	Returns the number of items in a collection where the given column is in the given array .
12088	Create a count query .
12089	Get the entity manager .
12090	Get the current path .
12091	Load a library
12092	Removes an entry from the cache .
12093	Returns the bundle with the given name .
12094	Sets a bundle .
12095	Removes a bundle from the cache .
12096	Invalidates the cache for an entity .
12097	Assert that the dependency database is up to date
12098	Returns the list of packages that depend on a package
12099	Returns the dependencies of a package
12100	Installs a package
12101	Uninstalls a package
12102	Rebuild the dependency database .
12103	Acquire a dependency lock
12104	Unlocks the lock
12105	Return the contents of the dependencies . db file
12106	Write the dependencies to disk .
12107	Auto load modules
12108	Register a module
12109	Get theme content
12110	Renders the error page .
12111	Sets the foreground .
12112	Sets the background of the image .
12113	Set black color
12114	Set color to red
12115	Sets color to green
12116	Sets the color to yellow .
12117	Sets the color to blue .
12118	Sets the color to magenta
12119	Sets color to CYAN
12120	Set white color
12121	Resets the color of the format .
12122	Sets the background or foreground color .
12123	Removes an option .
12124	Formats the message .
12125	Logs a command .
12126	Returns an array of UploadedFile objects .
12127	Sets the raw state of the package
12128	Returns an array of postinstall scripts
12129	Initialize postinstall scripts
12130	Set the package info from an array .
12131	Returns the list of files in the package .
12132	Returns the package s configuration options .
12133	Checks if a package is compatible with another package .
12134	Is this package a subpackage?
12135	Get package dependency group by name
12136	Inserts a value into a multidimensional array .
12137	Add compiler compiler .
12138	Returns the modulo of two numbers .
12139	Returns the modulo of an entire part of a number .
12140	Logs the last event .
12141	Log a message to the target .
12142	Select from repository entity .
12143	Get entity alias
12144	Delete an entity from the database .
12145	Updates the entity in the database .
12146	Sets the FROM clause of the query .
12147	Set the value for the given key .
12148	Add a GROUP BY clause .
12149	Add group by .
12150	Sets the order for the query .
12151	Add order by .
12152	Sets the limit and offset for the query .
12153	Paginate results .
12154	Executes the query and returns the first result .
12155	Executes the query and returns the first result
12156	Fetches all results .
12157	Adds a parameter to the query .
12158	Find an unused parameter name .
12159	Parse the call methods .
12160	Call functionality fields .
12161	Checks if the array is associative or not .
12162	Returns a description for the given subject .
12163	Add a timestamp entry
12164	Returns the timestamp as a table .
12165	Get the page load time .
12166	Returns the most time consuming domain
12167	Renders header .
12168	Renders header image
12169	Renders body .
12170	Renders footer .
12171	Get controller group .
12172	Get the values of all options for the given action .
12173	Get help for an action s arguments .
12174	Get the help for the options of an action .
12175	Returns the headers of the current request
12176	Determine if the user is a flash .
12177	Returns the raw request body .
12178	Returns the request body parameters .
12179	Returns the host info of the request .
12180	Returns the URL of the current script .
12181	Returns server params
12182	Returns the content types accepted by the client .
12183	Returns the languages accepted by the client .
12184	Get ETags from If - None - Match headers .
12185	Returns the CSRF token .
12186	Generate CSRF token .
12187	Get default server params .
12188	On login event .
12189	Crop an image
12190	Make crop name .
12191	Crops a file
12192	Get the size of an image
12193	Returns a list of permissions for a file .
12194	Returns all annotations found in the given doc string .
12195	Get annotation matches .
12196	Adds an annotation to the list of annotations .
12197	Set annotation arguments .
12198	Get annotation properties .
12199	Process annotation properties .
12200	Get arguments .
12201	Determine the value .
12202	Get an annotation from the annotations map .
12203	Cleans the given match .
12204	Returns an array of commands that are subscribed to the console .
12205	Handle a custom command
12206	Handles the help command
12207	Get the provider for a command .
12208	Left join .
12209	Right join .
12210	Right join .
12211	Returns the SQL representation of the statement .
12212	Fetch all rows as a single column
12213	Set the object table name .
12214	Set the object structure .
12215	Sets the object database name .
12216	Set object model name
12217	Build the object model
12218	Build the fields
12219	Register the validator factory .
12220	Load services .
12221	Get the target site id
12222	Get the parent of a record
12223	Renders collapse item .
12224	Get all records .
12225	Executes the query and returns the first result .
12226	Returns the values of the first column in the result set .
12227	Returns the number of rows in the result set .
12228	Returns a promise for checking if a row exists in the database .
12229	Make a call to a prophecy .
12230	Find all calls that match the given function name and arguments wildcard .
12231	Initializes the PEAR registry .
12232	Assert that the state directory exists and is writable
12233	Checks if the channel state directory exists and creates it if not .
12234	Ensure the channels directory exists and is a directory
12235	Returns the channel file name .
12236	Returns the channel name from an alias .
12237	Returns the alias for a given channel .
12238	Lock the registry
12239	Checks if a channel exists .
12240	Checks if a mirror exists on a channel
12241	Check if an alias is a channel alias .
12242	Returns information about a specified channel .
12243	Updates a channel
12244	Returns true if the value of the property matches the given function .
12245	Return the path to the TinyMCE file
12246	Initializes a new Str instance with the given value .
12247	Get the entity manager .
12248	Resolves a class name .
12249	Validates that an attribute is in the list of hashes .
12250	Validate that a given route exists .
12251	Copy files from the origin directory to the target directory .
12252	Initializes the widget .
12253	Returns the next day in a given date
12254	Returns the previous day of a given date
12255	Create Date Rande
12256	Get the content of a file
12257	Get the directory path
12258	Opens a file for reading .
12259	Create a new file .
12260	Writes contents to a file .
12261	Returns the contents of a file .
12262	Change file mode .
12263	Lock a file
12264	Callback for when a file is locked .
12265	Ensure that the given value is a file object .
12266	Ensure that a path or object is a directory .
12267	Check if we need to unlock all locked files
12268	Get global variables .
12269	Render the section
12270	Adds a ON clause to the query .
12271	Adds a where clause to the query .
12272	Add a where null clause to the query .
12273	Converts an array into a collection
12274	It could be normal .
12275	Get a record from the database .
12276	Update a row in the database .
12277	Changes the state of the application .
12278	Refresh the database and start the migration .
12279	Returns a list of all applied migrations .
12280	Lists new migrations .
12281	Creates a new migration .
12282	Revert class to down .
12283	Migrates the application to a given time .
12284	Migrates the application to the given version .
12285	Load the database adapter
12286	Connect to the database
12287	Add a query to be cached .
12288	Get the cached results for a query .
12289	Performs an array query on the current adapter
12290	Adds a table to the database
12291	Add fields to a table
12292	Return information about a table
12293	Checks if a table exists
12294	Build an array of fields
12295	Escapes a string using the current adapter
12296	Clears the query .
12297	Adds a where clause to the query
12298	Adds a string to the WHERE clause .
12299	Adds a WHERE IN clause
12300	Adds a OR WHERE clause
12301	Create an AND WHERE clause
12302	Set the order_by property
12303	Get the SQL query .
12304	Get all records .
12305	Get a single record from the database
12306	Get all UICore Extensions
12307	Get ModelOperator instance
12308	Sets the path to the storage directory .
12309	Load structures from yaml files
12310	Returns the structure of a model .
12311	Save model structure
12312	Dump model data into a YAML file
12313	Load data from file
12314	Find all transactions for a given account .
12315	Sets the query state .
12316	Get the backlog length .
12317	Processes the command queue .
12318	Sends a query to the observable sequence .
12319	Sets the connection status .
12320	Handle a message
12321	Parses the data and creates a Message if necessary .
12322	Cancels the current request .
12323	Redirect to social provider
12324	Callback function .
12325	Unlink a social provider .
12326	Update settings .
12327	Check if the provider is configured correctly .
12328	Set the configuration for the specified service .
12329	Register social .
12330	Cleanup timer callback
12331	Packs a record into an array .
12332	Unpacks a single record into an array .
12333	Creates the cleanup timer .
12334	Checks if a menu item has a submenu .
12335	Set value for field user_accountId
12336	Set the user id .
12337	Get the join one account .
12338	Get the user from the database .
12339	Return the next ordercloud exception
12340	Strip HTML tags
12341	Initializes the configuration object .
12342	Returns a list of valid roles for a given release .
12343	Get the list of base install roles
12344	Shorten the string .
12345	Sets the block size
12346	Returns the value of the given key .
12347	Generate the names of the config files .
12348	Merge data .
12349	Read configuration data .
12350	Read configuration data from file
12351	Normalize a file path .
12352	Applies a domain event to the aggregate .
12353	Records a domain event .
12354	Set a related model s data
12355	Attaches event listener .
12356	Redraw all components .
12357	Redraws the form and redirects to destination .
12358	Initialize Twig plugins .
12359	Set a list of variables
12360	Fetch template from string
12361	Load all plugins from a directory
12362	Create BusinessHours from an associative array .
12363	Shift a business hours instance to a new timezone .
12364	Flattens an array of days intervals .
12365	Pushes a warning to the error stack .
12366	Get the contents of a file in the archive .
12367	Parses the imports .
12368	Parses a YAML string into an object .
12369	Set YAML patameters
12370	Calculates the request body length and adds it to the headers .
12371	Execute a command .
12372	Serialize a value into XML
12373	Unpublishes the given entity and all its versions .
12374	Sets the class name .
12375	Set ID column
12376	Set name column
12377	Set data column
12378	Set lifetime column
12379	Sets the modified column
12380	Sets the created column
12381	Get all providers .
12382	Get all available providers .
12383	Boots the service provider .
12384	Register the Connection Egress extension .
12385	Set the response format based on the Accept header
12386	Validates the request content type .
12387	Execute the function and return the value .
12388	Attempt to download a channel .
12389	Return a reference to an PEAR_Dependency2 object .
12390	Get the download directory
12391	Detects if a dependency cycle is detected .
12392	Setup the graph .
12393	Get URL Arg
12394	Send a string to the CLI .
12395	Get command line arguments
12396	Register the no - captcha service .
12397	Register validator rules .
12398	Register form macros .
12399	Create an object from an XML file
12400	Creates an PEAR_Node_Info object from an arbitrary PHP value .
12401	Returns the channel as an XML string .
12402	Validates an error .
12403	Get the base URL for a resource type
12404	Reset channel functions
12405	Set default PEAR protocols
12406	Get mirror by server name
12407	Sets the validation package for this channel .
12408	Adds a function to the primary channel
12409	Adds a mirror to the channel .
12410	Returns the PEAR_Validate attribute
12411	Returns an instance of the PEAR_Validate class associated with this object .
12412	Checks if a property can be accessed via a getter .
12413	Checks if a property can be set .
12414	Get the cache file .
12415	Loads the cache parameters .
12416	Adds an entry to the cache .
12417	Returns the value associated with the given id .
12418	Returns the entry with the given identifier .
12419	Returns true if the entry with the given id exists .
12420	Unset an entry by offset .
12421	Applies site conditions to the query .
12422	Assign a value to a list of keys
12423	Extract errors from an error object
12424	Get the models config file path
12425	Get the models definition from the config file
12426	Save the models definition .
12427	Returns the query s metadata .
12428	Set value for field user_name
12429	Set value for field user_color
12430	Set value for field user_parser
12431	Aggregate a collection of resources .
12432	Perform a curl request and return the result
12433	Image proxy .
12434	Create a validator instance .
12435	Validates a single attribute of a model .
12436	Validates a value .
12437	Run the application .
12438	Shutdown function .
12439	Generate a URL for a controller and action .
12440	Returns the canonical URL of the current route .
12441	Normalize the route path .
12442	Checks if all tests are working .
12443	Returns the view names for a given schema .
12444	Get the value for the given key .
12445	Stores a value in the cache .
12446	Set multiple values .
12447	Retrieve a value from the session and delete it
12448	Add a value to the cache .
12449	Get a value from the cache or store it .
12450	Deletes a value from the cache .
12451	Filter a string to remove unwanted characters .
12452	Add default options to the command .
12453	Get option or config value .
12454	Get option value with type cast
12455	Load configuration data from file .
12456	Loads the configuration from a file .
12457	Renders the configuration .
12458	Render a value .
12459	Normalize config array path .
12460	Set package version 2 . 1
12461	Clears package contents
12462	Clears the package dependencies .
12463	Sets the package type
12464	Return the current release
12465	Adds an AS tag to the current release
12466	Adds an ignore tag to the current release
12467	Adds a binary package tag
12468	Adds a configuration option to the current release
12469	Sets the php install condition for the current release
12470	Sets the OS install condition for the current release
12471	Sets the arch install condition for the current release
12472	Generates a change log entry .
12473	Check if file is video .
12474	Get video infos
12475	Set value for field user_date
12476	Set the amount .
12477	Set value for field user_type
12478	Set comment .
12479	Set the category id .
12480	Set the value of the accountIdVirtual property .
12481	Creates a new instance from a start and end time strings .
12482	Create a configuration from an array .
12483	Create a new SQLite instance .
12484	Create a new MySQL instance .
12485	Executes a query and returns the result .
12486	Returns the names of all tables in the current database .
12487	Returns a single row from the result set
12488	Execute a query and return the first column of the first row .
12489	Checks if a table exists .
12490	Checks if a column exists in a table .
12491	Returns the primary keys of a table .
12492	Returns the names of all columns in a table .
12493	Logs a query .
12494	Add ServiceAwareEntityListener
12495	Run the application .
12496	Set public and private keys
12497	Sets the private key .
12498	Sets the envelope key
12499	Sets the compression adapter .
12500	Returns the date formatted according to the given timestamp property .
12501	Supprime un utilisateur
12502	Returns the value at which the function should be executed .
12503	Creates migration history table .
12504	Add a filter to the chain
12505	Filter a value using a static class
12506	Adds the inverse relations to the result array .
12507	Populates a relation with the given primary models .
12508	Populate a single relation .
12509	Populate a relation with multiple models .
12510	List invalid properties .
12511	Process a multidimensional array
12512	Creates a new entity from a class .
12513	Returns true if this text is equal to the given text .
12514	Returns true if this string ends with the other .
12515	Returns true if this string contains the given string .
12516	Returns a substring of the string .
12517	Replaces a string with another string .
12518	Replaces a string by a regular expression .
12519	Emits the beforeSave event
12520	Emits the beforeDelete event .
12521	Refreshes the model from the database .
12522	Update all records in the table
12523	Delete all records from the database .
12524	Inserts a model into the database .
12525	Internal method to insert the model into the database .
12526	Internal method to perform the actual deletion .
12527	Returns the methods of the class .
12528	Returns the identifier of a method .
12529	Callback for custom data .
12530	Get all registered commands .
12531	Prints the help for a controller .
12532	Create a controller instance .
12533	Handle an exception and return a response .
12534	Handles fatal errors .
12535	Log an exception .
12536	Get exception trace
12537	Reduce the stack trace .
12538	Proxy with app property .
12539	Proxy with app .
12540	Inject a variable into an array of arguments .
12541	Ensure that a string is translated .
12542	Create a repository
12543	Initializes the notification module .
12544	Generate a random key .
12545	Returns the properties for the data store .
12546	Registers a custom error class .
12547	Displays user assignment form .
12548	Request for a list of countries
12549	HTML encode a string
12550	Get default reason phrase .
12551	Get a single header or all headers .
12552	Returns the body of the request
12553	Deflate a request body
12554	Checks if the table exists .
12555	Removes all records from the database .
12556	Checks for idle and busy connections .
12557	Get all headers .
12558	Returns the header name .
12559	Writes an array of messages to the console .
12560	Writes a message to the console .
12561	Set filter type
12562	Find a resource in a list of paths .
12563	Get the possible files for the given file name .
12564	Starts the session .
12565	Get data by id .
12566	Sets the value for the given id .
12567	Removes an item from the collection .
12568	Generate a CSRF token .
12569	Validates CSRF token .
12570	Returns a human - readable version of the given name .
12571	Delete the file .
12572	Moves the file to a new location
12573	Cleans the file name .
12574	Dispatches an event
12575	Handles PHP errors .
12576	Handles fatal errors .
12577	Saves the rule to the database .
12578	Returns a string representation of the exception .
12579	Convert an array into an XML string
12580	Converts a string to an array .
12581	Load a configuration file
12582	Set config values
12583	Get a configuration value by index
12584	Build the config stack
12585	Parse a configuration array recursively
12586	Parse a configuration value recursively
12587	Compiles a JOIN clause .
12588	Compile a where null clause .
12589	Compile an insert statement into SQL .
12590	Compile an update statement into SQL .
12591	Compile a delete statement into SQL .
12592	Wraps the given value in a dotted notation .
12593	Set the arguments to pass to the function .
12594	Sets the promise that will be fulfilled when the promise is resolved .
12595	Sets the prediction .
12596	Checks the given prediction .
12597	Returns a new GalleryAdapter instance .
12598	Establish a new user connection .
12599	Creates a new record in the database
12600	Get the SQL representation of the insert statement .
12601	Scans the content for resources and adds them to the queue .
12602	Applies a callback to the value and returns the resulting Option .
12603	Returns a new Some object if the value matches the predicate .
12604	Execute the callback stack
12605	Execute a callback and return the result as reference
12606	Parse a callback function name and its arguments
12607	Get the constraints .
12608	Calculates the minimum value for the given option in the given options array .
12609	Returns the controller instance .
12610	Method to get property _action
12611	Resolve the route and return a promise .
12612	Process dispatched data
12613	Process response .
12614	Get router exception by code .
12615	Get terminal sizes
12616	Returns the operating system .
12617	Translate a value
12618	Locate a file
12619	Formats the given value as HTML text .
12620	Formats the value as an email address .
12621	Formats the value as a decimal number .
12622	Formats the value as a size in human readable form .
12623	Creates a new model . If creation is successful the browser will be redirected to the index page .
12624	Updates an existing Gallery model . If update is successful the browser will be redirected to the index page .
12625	Checks if the class exists .
12626	fetches an object from the database
12627	Executes a query and returns the first column of the first row of the result set .
12628	Exclude trashed records .
12629	Scope only trashed records .
12630	Run the console request .
12631	Returns the value of a key from an array or a default value if not found .
12632	Returns all headers with the given name .
12633	Return an instance without the specified header .
12634	Returns a copy of the message with the specified body .
12635	Get the icon for this payment .
12636	Returns an array of all possible types .
12637	Binds a template to an alias .
12638	Renders an exception .
12639	Formats a message for output .
12640	Get the value for the header .
12641	Converts an array to a header string .
12642	Combines an array of sections with a separator .
12643	Walks through an array using a key separator
12644	Explode a string into an array .
12645	Send error mail
12646	Error 403 Action
12647	Extracts the route parameters from the given path .
12648	Get controller instance .
12649	Returns the HTML for the buttons
12650	Returns the options as html .
12651	Evaluates an expression and returns the result .
12652	Get zone information .
12653	Add a new record .
12654	Gets a table from the database
12655	Get the current transaction .
12656	Loads the default metadata from the driver .
12657	Sets the parent id of the node .
12658	Get the budget category .
12659	Get all category words .
12660	Flush all cache data
12661	Add an item to the collection .
12662	Removes an item from the collection .
12663	Removes all cache data for a given tag .
12664	Returns a boolean value .
12665	Create a new Params object
12666	Extract params from a collection
12667	Listen to the command loaded event .
12668	Push a new route group to the end of the stack .
12669	Get all classes annotations by type .
12670	Set service properties .
12671	Get service from annotation .
12672	Get service context from annotation .
12673	Get the cache component .
12674	Returns the query builder instance .
12675	Creates a Reaction instance for the given interface .
12676	Returns the class name token for the given class name .
12677	Returns a token for a stated class instance .
12678	Get a list of packages for a given category
12679	Returns the better states for the given state .
12680	Compiles the command to execute .
12681	Generates the arguments for the command .
12682	Execute the command and return the output .
12683	Save all files .
12684	Replaces all fields in the stream with their values .
12685	Adds a route to the collection .
12686	Adds a route for the GET and HEAD method .
12687	Adds a POST route
12688	Adds a route for PUT method
12689	Adds a route for PATCH method
12690	Adds a DELETE route
12691	Adds a HEAD route
12692	Get route by name .
12693	Generate a URL for a named route .
12694	Returns the route for the given request .
12695	Match a static or dynamic route .
12696	Check if the given URI is an internal URI .
12697	Dispatches a request and returns the response .
12698	Setup the routing system .
12699	Set the dynamic route .
12700	Validate route url .
12701	Match a static route .
12702	Match dynamic route
12703	Get matched static route .
12704	Get matched dynamic route .
12705	Route request middleware .
12706	Process the response middleware from the route .
12707	Get the response from the dispatch .
12708	Setup route collection from cache file .
12709	Setup the annotated routes .
12710	Renders modal header
12711	Renders the toggle button .
12712	Get the gettext file for the given message file .
12713	Get QB result
12714	Add filters to the query builder
12715	Filter by search .
12716	Search filter .
12717	Add ordering to query builder
12718	Add offset to query builder
12719	Add limit to query builder
12720	Find an entity by id
12721	Add a join to the QueryBuilder .
12722	Get data table sort column .
12723	Adds the ORDER BY clause based on the given Params .
12724	Checks if the value is a valid number
12725	Replaces XML entities with HTML entities .
12726	Reverses XML entities .
12727	Returns the XML declaration .
12728	Returns the declaration of a DOCTYPE declaration
12729	Converts an array of attributes into a string .
12730	Collapse empty tags
12731	Creates a tag with the given qname attributes and content
12732	Creates an XML start element
12733	Splits a qualified name into its namespace and local part
12734	Checks whether a string is a valid XML name
12735	Dispatches a callable object .
12736	Add tags to the cache .
12737	Invalidate tags .
12738	Validate the entity
12739	Interpolate context values into a message .
12740	Checks if two points are the same space .
12741	Checks if two points are the same .
12742	Returns the intersection point of two lines .
12743	Check if two lines are perpendicular
12744	Determines if two lines are parallel .
12745	Get the directions between two points
12746	Returns the direction between two coordinates .
12747	Fetches all records from the database .
12748	Prepare async via .
12749	Removes duplicated models .
12750	Executes the query and returns the first result .
12751	Checks if the given value is valid UTF - 8 .
12752	Assert that header value is valid .
12753	Execute the query and return the results .
12754	Builds the request URI .
12755	Set default language
12756	Set the media type .
12757	Set the result format
12758	Sets the limit .
12759	Set the entity
12760	Sets the default attribute for this media type .
12761	Set the callback
12762	Set the explicit type .
12763	Get all photos for a gallery .
12764	Log a message to the PEAR_Frontend .
12765	Create a temporary directory
12766	Extract information from a tarball .
12767	Extract information from a package description file .
12768	Extract information from an XML string .
12769	Convert an PEAR packagefile or string into an PEAR packagefile object .
12770	Get the list of offers .
12771	Get all offers
12772	Search for an ean
12773	Set the log file handler .
12774	Set Mail Handler
12775	Get logs .
12776	Make log row
12777	Shuts down the debugger
12778	Handles the given request .
12779	Distribute the front controller .
12780	Init bundle .
12781	Add a boot error message
12782	Initializes a path for a constant
12783	Add a path to the application .
12784	Get stack path .
12785	Get absolute path .
12786	Get the current user s current status
12787	Set the application mode
12788	Load default application configuration file
12789	Initializes the module .
12790	Load a bundle .
12791	Get the converter .
12792	Returns a hash for the given path .
12793	Add an array of reply to addresses
12794	Create a new user in the database
12795	Resume a session by authtoken
12796	Calculates the decimal value of the expression .
12797	Get the URL for the user details .
12798	Execute a raw query and return the results as an array .
12799	Generate csrf meta tags .
12800	Creates a label tag .
12801	Creates a button tag
12802	Creates a submit button .
12803	Creates a submit input tag
12804	Creates a reset input field
12805	Create a hidden input field .
12806	Create password input field .
12807	Processes boolean input options .
12808	Sets the number of hours .
12809	Sets the amount of minutes .
12810	Sets the number of seconds .
12811	Checks if time elements are valid .
12812	Writes a file to the filesystem .
12813	Write a stream to a file
12814	Updates a file in the filesystem .
12815	Updates the stream of a file on the fly system .
12816	Write a file to the filesystem .
12817	Write a stream to a file on the fly system
12818	Renames a file
12819	Copy a file to a new path
12820	Returns the metadata for the given path .
12821	Get the mimetype of a file .
12822	Returns the size of a file .
12823	Returns the timestamp of a file or null if the file does not exist .
12824	Returns the visibility of a file .
12825	Sets the given visibility on the given path .
12826	Sets the visibility of a file to public .
12827	Sets the visibility of a file to Private .
12828	Returns the contents of a directory .
12829	Get the local filesystem adapter .
12830	Get the S3 adapter .
12831	Process the current request .
12832	Deserializes the current request .
12833	Checks if the current user has access to the given object
12834	Parses a PHP block .
12835	Get path .
12836	Get the authentication object .
12837	Get data from url
12838	Parse JSON Data
12839	Get all data
12840	Get entity alias
12841	Creates a query builder for the repository .
12842	Creates a ResultSetMappingBuilder
12843	Find all identifiers .
12844	Returns the minimum value of a column .
12845	Paginates the results .
12846	Checks if the given object is an entity .
12847	Gets the identifier of the given entity .
12848	Validates that the provided entity is a valid entity
12849	Converts an entity into an array .
12850	Filters the uploaded files .
12851	Get file size limit
12852	Checks if a key exists in the bag .
12853	Handle the console application .
12854	Terminate the application .
12855	Lists all categories for an account
12856	Executes the controller .
12857	Initializes the time zone .
12858	Execute the exception .
12859	Convert the field to an array .
12860	Initializes the component .
12861	Gets the list of all children .
12862	Detects if a child is a loop .
12863	Invalidate the cache .
12864	Get last batch number .
12865	Returns html response .
12866	Returns JSON response .
12867	Create a new template response .
12868	Create others .
12869	Get the configured compression adapter
12870	Set compression adapter
12871	Set the prefix .
12872	Returns the value of a server variable .
12873	Shows a list of all hello messages .
12874	Installs tables from an alternative database
12875	Display system errors
12876	Get the serializer .
12877	Increments the version number of a file .
12878	Get the body of the request .
12879	Get the body as an array .
12880	Get the body as an object .
12881	Executes a query and returns the results .
12882	Set default values
12883	Sets the request body .
12884	Returns the response as an associative array
12885	Get unique validation rule
12886	Get object URL from S3
12887	Get the adapter for the given ADOConnection
12888	Get ADO connection ID
12889	Error action .
12890	Wraps a cURL error in an exception .
12891	Callback used to read the body of the request
12892	Callback used to send headers to the client
12893	Callback used to write the body
12894	Add a command collection .
12895	Print time .
12896	Prints the help for the console .
12897	Prints the html help for a class .
12898	Print line .
12899	Async upload function
12900	Clear html from input
12901	Encode attributes before saving to the database .
12902	After find event handler .
12903	Decodes a JSON attribute .
12904	Create a new parser instance .
12905	Set the current locale
12906	Get localized question
12907	Establishes a tunnel connection .
12908	Checks whether or not the response can be sent to the client .
12909	Disconnects from the server .
12910	Handles a redirect
12911	Check if we should use server digest authentication .
12912	Check if we should use proxy digest authentication .
12913	Writes the request body to the socket .
12914	Read a chunk of the response
12915	Builds a select statement from an associative array
12916	Builds a where statement from an associative array
12917	Build a join statement from an array
12918	Build GROUP BY clause
12919	Prepare dependency handler
12920	Merge the results of a mapping
12921	Cleans a string .
12922	Checks if there is at least one call .
12923	Decode YAML into an array .
12924	Start a session .
12925	Executes a query and returns the result .
12926	Insert data into a table
12927	Update a row in a table
12928	Inserts or updates a row with the given data
12929	Executes a SELECT statement and returns the statement .
12930	Executes a SELECT query and returns all the results as an array .
12931	Returns an array of IDs .
12932	Returns a single row from the result set
12933	Get a single value from the first row of the result set
12934	Prepare a query for execution .
12935	Executes a prepared statement .
12936	Executes a SELECT statement and returns the first row of the result
12937	Get a log entry .
12938	Parse the value and replace the mappings .
12939	Apply the MatchPattern to the given value .
12940	Dispatch the router .
12941	Terminate route middleware .
12942	Handler for the start of an element .
12943	End element handler
12944	Run asset converter command .
12945	Processes the webhook .
12946	Modifies the uploadable behavior .
12947	Create a request from a JSON string .
12948	Open the session .
12949	Read session data
12950	Destroys a session
12951	Write data to the session
12952	Creates a Reaction instance and runs it
12953	Returns the id of this element
12954	Emits the beforeRun event .
12955	Check if app persistence is set
12956	Find a record by a field value
12957	Delete a record from the database
12958	Get all records from the database
12959	Save the record to the database
12960	Lists all balances .
12961	Ajax action for listing budgets
12962	Verify user account
12963	Load the nav bar
12964	Checks if a month is in the budget .
12965	Sets up the md5 sum of a file
12966	Creates a new instance of the class and executes the method .
12967	Get the user s name .
12968	Save the user to the database
12969	Changes the password of a user
12970	Add the given implementation to the container .
12971	Get writer instance
12972	Parse the version string
12973	Compares two versions .
12974	Returns the children of a branch .
12975	Returns the parent of the owner
12976	Returns the parents of the owner .
12977	Recursively converts an object into an array .
12978	Applies a modifier to all properties .
12979	Creates a CSS resource from a CSS URL .
12980	Return the address book view .
12981	Return the messages compose view .
12982	Return the message view .
12983	Manage messages .
12984	Append extensions to a list of paths .
12985	Destroys the session .
12986	Add an autoloader method to the autoloader map
12987	Removes an auto - loader method
12988	Remove an aggregate object from the map
12989	Getopt function 2 .
12990	Returns an array of options from an array of arguments .
12991	Parses a short option and adds it to an array of options .
12992	Parse command line arguments
12993	Converts a directory path into a struct
12994	Converts an array of files into a struct .
12995	Execute the rm command .
12996	Create a directory with the given arguments
12997	Create a temporary directory
12998	Remove temporary files
12999	Find files and directories from command line arguments
13000	Returns a new log instance .
13001	Set the value of the budgetId property .
13002	Get the budget .
13003	Get all transaction .
13004	Prepare a value to be inserted into the database
13005	Set the URL of the request
13006	Set the request method
13007	Set auth data
13008	Add a cookie to the request
13009	Sets the body of the request
13010	Returns the request body .
13011	Add an upload field
13012	Adds an observer to the list of observers .
13013	Detaches an observer .
13014	Set the last event .
13015	Set the HTTP request adapter
13016	Set the cookie jar
13017	Sends the request and returns the response .
13018	Detect the mime - type of a file
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new Setting entity .
13022	Edits an existing Setting entity .
13023	Adds a WHERE clause to the query .
13024	Create a new response with the specified status code and optional reason phrase .
13025	Remove a row from the table
13026	Checks if an event has any registered listeners .
13027	Get field value
13028	Get a translation message .
13029	Create access denied http exception .
13030	Add a flash message to the session
13031	Commits the current transaction
13032	Returns a formatted date
13033	Returns a formatted time string
13034	Format a boolean value
13035	Sets the time zone
13036	Get a service by class name .
13037	Checks if a service has been registered .
13038	Creates an instance of the specified class .
13039	Adds a resolver to the chain .
13040	Adds an object to the container .
13041	Returns the pool instance .
13042	Sends a query to the least - busy database .
13043	Executes a statement on the least - busy connection .
13044	Creates a new pg connection .
13045	Get the least busy connection in the pool .
13046	Installs assets .
13047	Returns a reflection class for the given class name .
13048	Returns the version of a class .
13049	Finds the class name that matches the given version .
13050	Returns the migration methods for the specified class .
13051	Returns the required options for the given class .
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing Job entity .
13056	Sets the client file name
13057	Guesses the file extension .
13058	Returns the MIME type of the file
13059	Returns a human - readable representation of the file size
13060	Returns the time as a DateTime object .
13061	Get CTime as DateTime
13062	Get MTime as DateTime
13063	Create a File object from a string
13064	Find all applications
13065	Find an application by id .
13066	Create a new application
13067	Delete an application from the cache .
13068	Update an application
13069	Returns the closest interval before the given date .
13070	Returns the closest interval after the given date .
13071	Builds a DateTimeInterval from a DateTime and a TimeIntervalInterface .
13072	Returns the day before the given day number .
13073	Returns the day after the given day number .
13074	Returns information about a role
13075	Commits the current transaction .
13076	Rolls back all active transactions .
13077	Sets the transaction isolation level .
13078	Get the database connection .
13079	Set the backend to use
13080	Log a message with priority debug .
13081	Log info .
13082	Log a message with priority NOTICE .
13083	Log a message with priority WARNING .
13084	Log a message with priority error .
13085	Log a message with priority CRITICAL .
13086	Log an alert message
13087	Log an emergency message .
13088	Logs a message with a given level .
13089	Gets a property of an object .
13090	Truncates an HTML string to a certain number of characters .
13091	This function is called by the PEAR_Installer class .
13092	Deletes all files from a package
13093	Add a file operation to the transaction
13094	Download a set of packages .
13095	Set the list of packages that need to be downloaded .
13096	Checks if a point is valid .
13097	Creates a new iteration exception .
13098	Register ordercloud components .
13099	Add an array of attributes .
13100	Change classes .
13101	Parse the classes .
13102	Returns a column builder for JSON types .
13103	Bind an abstract to a class if it is not already bound .
13104	Bind an abstract to a closure shared with the current instance .
13105	Register a rebinding callback for an abstract .
13106	Checks if an abstract is a shared class .
13107	Get the closure for the given abstract and concrete .
13108	Add dependency for call parameter .
13109	Get a contextual concrete from the current build stack
13110	Add middleware to the request .
13111	Response middleware .
13112	Terminate all middleware .
13113	This function renders the documentation page
13114	Get the WSDL file .
13115	Initializes the minify options .
13116	Converts a date and time to a timestamp .
13117	Converts a timestamp to an array .
13118	Date Conversion .
13119	Calculate how much time is left .
13120	Get the properties of the object .
13121	Checks the number of calls that we expect .
13122	Parse the given parameter .
13123	Set scenario parameter .
13124	Trim a string
13125	Output a breakpoint
13126	Downloads all files in a channel
13127	Add an instance of a mock class .
13128	Creates a new instance of the specified class .
13129	Updates the profile . If update is successful the browser will be redirected to the view page .
13130	Check if any of the given namespaces exist .
13131	Get the next non - object value from the argv
13132	Make a new response .
13133	Make a view and return it .
13134	Return a JSON response .
13135	Create a JSONP response .
13136	Redirect to another URI .
13137	Create a redirect to a route .
13138	Validates an email address .
13139	Get the difference in years .
13140	Get the difference in weeks .
13141	Get the difference in seconds .
13142	Returns the difference between this date and another date in Humans .
13143	Get all commands from a list of classes
13144	Set the command properties .
13145	Get command from annotation .
13146	Get storage path
13147	Finds the model based on the given ID .
13148	Returns an array of parameters for a task .
13149	Make an HTTP request .
13150	Make a GET request to the API .
13151	Make a POST request to the API .
13152	Send a HEAD request to the API .
13153	Make a PUT request to the API .
13154	Make a PATCH request to the API .
13155	Make a DELETE request to the API .
13156	Desensitizes the host .
13157	Update the checkpoint time .
13158	Merges the given data into this object .
13159	Read the contents of a file
13160	Get a package by name .
13161	Initialize the static config file for publishing .
13162	Clear all init code .
13163	Get the init code .
13164	Evaluate PHP code .
13165	Initialize the template paths
13166	Add a path to the templates directory .
13167	Wrap an object in a given class
13168	Returns a list of all schema names in the database .
13169	Gets the table names for a given schema .
13170	Refreshes the metadata for a table .
13171	Get table metadata
13172	Gets the raw metadata for a table .
13173	Sets table metadata .
13174	Get the cache key .
13175	Get an option by name
13176	Get the path to the temporary directory
13177	Initializes the component .
13178	Create role .
13179	Assign a child role to a role
13180	Register a mock function
13181	Call a mock .
13182	Returns a parameter by key .
13183	Resolve a parameter string .
13184	Convert query to meta .
13185	Twitter query .
13186	Renders tab panes .
13187	Register a new user account .
13188	Sets the vector to use for encryption
13189	Open the Mcrypt cipher
13190	Initialize the cipher with the given key
13191	Connects to the Auth API and returns the user data .
13192	Verify credentials .
13193	Fetches user data from the given URL .
13194	Returns a new instance of GuzzleAuth .
13195	Adds data tokens to the object .
13196	Returns the OAuth protocol for the given credentials .
13197	Check if the given credentials keys are Oauth1 .
13198	Check if the given credentials keys are Oauth2 .
13199	Closes the stream .
13200	Attaches a stream to the file .
13201	Returns the contents of the stream .
13202	Sets the stream .
13203	Writes data to a file .
13204	Get Virtual Account
13205	Get the previous account
13206	Update account virtual amount
13207	Sets the query cache duration
13208	Set the database connection .
13209	Fetch a single result row
13210	Creates INSERT statement and returns it .
13211	Executes the query and returns a promise that resolves with the result of the query .
13212	Logs the current query .
13213	Executes the query and returns a scalar value .
13214	Internal method to execute the query and return the results .
13215	Checks if a query matches a regular expression
13216	Internal method to execute sql queries .
13217	Invoke the Closure with the given arguments .
13218	Checks if the given layer is supported
13219	Prepare dom id
13220	Distribute the request to the correct controller and action .
13221	Renders an error page
13222	Render Debug Information
13223	Render a view
13224	Initializes the bot .
13225	Add responses .
13226	Register a custom shortcode tag .
13227	Remove short code by tag .
13228	Parses a single short - code tag .
13229	Parse short code attributes
13230	Get the download URL for a package
13231	Get a list of packages in a specific category .
13232	Sort releases by version number
13233	get array data
13234	get all hours
13235	Parse a page into an array .
13236	Find all accounts for a user
13237	Write application message
13238	Output the usage message .
13239	Get usage path .
13240	Prints arguments section .
13241	Output options section .
13242	Get option name .
13243	Generate Roll2d6DrdPlus .
13244	Sets the columns to be selected .
13245	Adds a HAVING predicate .
13246	Adds a where clause to the query .
13247	Adds a join to the query .
13248	Add a left join to the query
13249	Add a right join to the query
13250	Returns the SQL string of the select statement .
13251	Executes the query and returns the result set .
13252	Prefixes a table name with a table alias if needed .
13253	Get a value from the collection .
13254	Sets a value for a given key .
13255	Removes a key from the collection .
13256	Insert a row into a table .
13257	Initializes the object to be used to build an PEAR error stack .
13258	Return a singleton instance of an PEAR_ErrorStack .
13259	Handles an error .
13260	Sets the error message callback
13261	Set default error handler callback
13262	Removes an error from the stack .
13263	Pop a static error from the error stack
13264	Returns true if there are any errors
13265	Returns an array of errors .
13266	Checks if there are any errors in the global error stack
13267	Get all errors from the static error stack
13268	Converts an PEAR error into an PEAR error message .
13269	Registers the given configuration .
13270	Registers an entry provider .
13271	Register an array of classes with the autoloader .
13272	Get the list of wired parameters .
13273	Sets the target directory
13274	Set the compression mode
13275	Get all routes for a given class .
13276	Sets the route properties .
13277	Get class routes .
13278	Builds a route from a controller route .
13279	Get router route from annotation .
13280	Register route annotations .
13281	Formats the response body as JSON .
13282	Format the response as JSONP .
13283	Returns the host portion of the URL .
13284	Get scheme host port
13285	Returns a new instance with the specified host .
13286	Returns a new instance with the specified port .
13287	Returns a new instance with the specified path .
13288	Returns a new instance with the specified query .
13289	Returns a new instance with the specified fragment .
13290	Checks if the port is standard .
13291	Validates the scheme .
13292	Validates the port
13293	Validate a package and its dependencies .
13294	Validates a single dependency
13295	Normalize a dependency
13296	Adds or removes s from a word .
13297	Tokenize a string using a delimiter .
13298	Join keys and values of an array
13299	Checks if a table exists
13300	Map a class name to a table name
13301	Returns the table name for the given class name
13302	Process version tag
13303	Executes a discovery command on a channel .
13304	Performs the actual login .
13305	Execute the logout command .
13306	Convert a separator to a separator .
13307	Returns an array of migration files .
13308	Get the migration file map .
13309	Publishes a method .
13310	Sends the request and returns the response .
13311	Check the url
13312	Transforms a Directory s ID into a Directory object
13313	Create app builder instance .
13314	Creates and returns an instance of AppBuilder based on the passed persister .
13315	Get application builder dependencies .
13316	Reset the git repository to the latest version .
13317	Creates a branch on the project .
13318	Deletes a branch .
13319	Pushes a branch to the project .
13320	Create a pull request for the project .
13321	Clone the project .
13322	phpize callback .
13323	Runs a command and returns true on success .
13324	Connect to the API and get the user .
13325	Add file to rename
13326	Get the new name of a file
13327	Gets the name of a file .
13328	Returns a service by its identifier .
13329	Generate service from definition .
13330	Set a service
13331	Set an alias .
13332	Get a parameter by ID .
13333	Sets a query parameter .
13334	Get a service definition
13335	Set a service definition .
13336	Initialize Drush .
13337	Creates a new user event from an event object .
13338	Convert the table to an array .
13339	Checks if the string is serialized .
13340	Execute the callback on the prophecy
13341	Add a route to the stack .
13342	Initializes the routes .
13343	Creates a controller instance from the configured namespaces .
13344	Register a controller
13345	Register ControllerWithAnnotations .
13346	Register a controller without annotations .
13347	Get default controller and action .
13348	Register an observer .
13349	Unregisters an observer .
13350	Auto set channel .
13351	Executes the given command .
13352	Adds a flash message .
13353	Redirects the user to the referer .
13354	Configures the shared cache .
13355	Initializes the bot .
13356	Finalize the middleware .
13357	Get the configuration directory .
13358	Throw an exception if no calls were made
13359	Get the current connection
13360	Configures the stfalcon_tinymce bundle .
13361	Set the capabilities for the current user
13362	Create a new instance from the given environment .
13363	Create a Locator instance from a path .
13364	Get the available choices .
13365	Checks if the given constant is valid .
13366	Performs the actual type check .
13367	Checks a value against a given type .
13368	Get the adapter for the given PDO instance .
13369	Create the path to the controller file
13370	Create the cache path
13371	Update the WSDL .
13372	Compile the WSDL .
13373	Generates the documentation for the controller
13374	Get the list of all available SOAP controllers
13375	Builds the assets .
13376	Build the bootstrap . css .
13377	Get a request parameter .
13378	Rebase the url .
13379	Adds a route to the collection .
13380	Create a static route .
13381	Check if a static route exists .
13382	Get a dynamic route .
13383	Check if a dynamic route is registered .
13384	Get named route .
13385	Creates the sub - leaves
13386	Locate a file in the current path .
13387	Converts this number to a new number system .
13388	Checks if this number is equal to another one .
13389	Returns the decimal value .
13390	Adds another number to this number
13391	Subtracts the given number from this number
13392	Multiplies this number with a given number
13393	Divides this number by the given multiplicator
13394	Get the adapter for the given mysqli object
13395	Returns a list of all available aliases .
13396	Find all aliases for a given query
13397	Replace class files .
13398	Read a line from the socket
13399	Enables SSL encryption on the socket
13400	Checks if the socket timed out
13401	Add a route to the application
13402	Set the items .
13403	Builds the HTML for the given site key and items .
13404	Prepare the name attribute .
13405	Check data attribute .
13406	Adds a resource to the queue .
13407	Creates a Day from an array .
13408	Creates a Day from an associative array .
13409	Checks if an interval is all day .
13410	Create a new request from an array
13411	Set Server Info
13412	Add headers to the request
13413	Set POST fields
13414	Set Query Fields
13415	Returns an array of headers
13416	Returns an array representation of the request .
13417	Add a command to the application .
13418	Adds a parsed command .
13419	Get a command by name .
13420	Removes a command by name .
13421	Returns the command matching the given path .
13422	Get all registered commands .
13423	Setup the console .
13424	Setup the console from the cache file .
13425	Get the list of commands that can be cached .
13426	Sets the separator
13427	Register a listener for an event .
13428	Register a listener for multiple events .
13429	Checks if an event has a listener .
13430	Removes a listener from an event .
13431	Checks if an event has listeners .
13432	Adds an event .
13433	Removes an event .
13434	Triggers an event .
13435	Setup the event listeners .
13436	Setup event listeners from cache file .
13437	Initializes the template manager .
13438	Check if a template exists
13439	Fetch template from file or string
13440	Load data from a file .
13441	Save the data to a file .
13442	Initializes the reader .
13443	Initializes the writer .
13444	Get default options .
13445	Encrypts data with given key .
13446	Decrypts a string using a key .
13447	Generates a session key
13448	Throw an exception to stdout .
13449	Renders an exception .
13450	Get the view file for an exception .
13451	Get the response object .
13452	Get exception data .
13453	Get stdio logger
13454	Read session data from archive .
13455	Writes a session record to the cache .
13456	Destroys a session .
13457	Updates a timestamp in the cache .
13458	Extracts the data from the session record .
13459	Extracts the timestamp from a record .
13460	Get session data from cache .
13461	Returns the exception message with variables replaced
13462	Builds the SQL for a table constraint .
13463	Adds auto increment modifier to a column .
13464	Adds a key to the table .
13465	Adds a foreign key .
13466	Get the column syntaxe .
13467	jumpstart function .
13468	Creates a new iteration exception .
13469	Renders the toggle button .
13470	Get Response Template
13471	Get application module name
13472	Load class reflection
13473	Loads a reflection for the given object .
13474	Loads a property from an object using reflection .
13475	Returns a string representation of a method .
13476	Returns the properties of a class .
13477	Sets the value of a property of an object .
13478	Sets an array of properties to an object .
13479	Loads class annotations .
13480	Clears all reflections .
13481	Checks if a class is instantiable .
13482	Get a reflection for the specified object and method name .
13483	Get the class reflection for the given object or name .
13484	Check method arguments
13485	Get a reflection from the cache .
13486	Sets a reflection to the cache .
13487	Get the cache key .
13488	Get the class name of an object .
13489	Parses the doc comment into a summary .
13490	Get class doc
13491	Get method doc block
13492	init by config
13493	Return the namespace for a given foundation class name .
13494	Unindent a string
13495	Post - processes the data
13496	Extract a photo array from a source object
13497	Method flickr . photos . getSizes
13498	Extract the images from the source array .
13499	Find the placeholder start position .
13500	Build the route path .
13501	Search in router .
13502	Replaces placeholders in a path .
13503	Initializes the receiver .
13504	Preloads all messages for a given category .
13505	Find categories by pattern .
13506	Checks if a property is set .
13507	Sends an exception response .
13508	Get the exception content .
13509	Format a path .
13510	Formats an array of arguments .
13511	Escapes the given string for HTML .
13512	Set the validation rules .
13513	Transforms a string into an array of Input objects
13514	Handles a connection disconnected event .
13515	Handle the received event .
13516	Callback phone home
13517	Grim reaper callback
13518	Get proxy command handler
13519	Callback for config action
13520	Loads project bundles .
13521	Loads the messages from the message directory .
13522	Set HTTP Headers
13523	Set CGI Environment Variables
13524	Make a POST request .
13525	Make a JSON - RPC request
13526	Connect to the SQLite3 database .
13527	Escape a string for use in a query .
13528	Initializes the plugin .
13529	Check if the model has a slug field
13530	Returns a list of fields that have a specific value .
13531	Get fields by type
13532	Returns a formatted date .
13533	Negotiates the language based on the Accept - Language header .
13534	Negotiates the charset from the Accept - charset header .
13535	Negotiates the mime type based on the HTTP_ACCEPT header .
13536	Match the Accept header to one of the supported headers
13537	Sort accept headers by priority
13538	Sends HEAD request to specified URL .
13539	Convert charset from one charset to another
13540	Get entity manager
13541	Get the object structure for a given database
13542	get auto object by tablename and dbname
13543	Get table structure
13544	Get the model of a table
13545	Build objects structure
13546	Prepare error code .
13547	Checks the given budgets against the given date .
13548	Checks if a budget is in a given date range .
13549	Find by budget id and month date .
13550	Set idParent .
13551	Set isMain .
13552	Returns the account user for this account .
13553	Get the join one bank .
13554	Parse a CSV file into transactions .
13555	Get the type icon .
13556	Build a query from a QC object
13557	Escapes a value for use in a query
13558	Creates a new redirect response .
13559	Set the redirect URI to be secure .
13560	Redirects to the previous page .
13561	Throws a new HttpRedirectException
13562	Filters commands by longest length .
13563	Sort commands by their name .
13564	Output a section of the command .
13565	Initializes the session
13566	Start timer .
13567	Returns current time .
13568	Display timer .
13569	Initializes the provided provider .
13570	Initializes the static application .
13571	Initializes the application .
13572	Locate configs path .
13573	Locate the class loader .
13574	Create an object from the DI container .
13575	Get config reader
13576	Initialize container .
13577	Initialize the static application .
13578	Checks if the given request matches the stored token .
13579	Get CSRF token from request .
13580	Initializes the DarkSky API .
13581	Get the current weather for a location
13582	Get Weather Precipitation
13583	Get the latitude and longitude for a location
13584	Add error message
13585	Get English intensity .
13586	Get all annotations for a class .
13587	Get class members annotations .
13588	Returns the class and its members annotations .
13589	Get all annotations for a property .
13590	Get all annotations for a property type .
13591	Returns all annotations for a class .
13592	Returns all annotations for a class method .
13593	Return all annotations of the given type for the given class and method .
13594	Returns all annotations for a class .
13595	Returns all annotations for a function .
13596	Filter annotations by type .
13597	Set annotation values .
13598	Get class reflection .
13599	Get a reflection for a class property .
13600	Returns a reflection for a class method .
13601	Get function reflection .
13602	Get the dependencies of the given parameters .
13603	Returns the length of the line .
13604	Returns the center of the polygon .
13605	Runs the form .
13606	Generates a Reaction instance for a model attribute .
13607	Checks if a value exists .
13608	Get the display directory name .
13609	Scans the directory for files and folders .
13610	Adds a header to the list
13611	Returns a list of all headers .
13612	Creates a database with the given name .
13613	Returns the list of tables in the database .
13614	Updates the database with the given structure .
13615	Update database relations
13616	Updates a many table .
13617	Generate the SQL for creating a table .
13618	Generates the SQL for a column .
13619	Generates the index SQL .
13620	Generates the constraint SQL .
13621	Get keyvalues by type .
13622	Get key values by key type .
13623	Returns the annotations for a class .
13624	Get an exact annotation of a class
13625	Returns the annotations for a property .
13626	Get an exact annotation of a property
13627	Returns the annotations for the specified method .
13628	Gets an exact annotation of a method .
13629	Returns the annotation reader .
13630	Get method reflection
13631	Get a value from the cache .
13632	Sets a value to the cache .
13633	Get the paths from a key .
13634	Process the key .
13635	Check the event class name .
13636	Builds the last event .
13637	Return the average value of an array
13638	Sets the order by .
13639	Read the constructor parameters .
13640	Get a value from an object using a path .
13641	Sets the value at the specified path in the given object .
13642	Filters an array of objects using the given expression .
13643	Set From address .
13644	Adds an email address .
13645	Adds a reply - to address .
13646	Add CC .
13647	Add BCC .
13648	Adds an attachment .
13649	Run application .
13650	Set Referer .
13651	Get Referer .
13652	Ajoute un url a partir de un parametro
13653	Downloads the Crowdin package .
13654	Extract the package from the given path .
13655	Reset default locale translations .
13656	Find position of first occurrence of a string in a string
13657	Creates the sidebar menu .
13658	Adds the example menu .
13659	Register the service provider .
13660	Publishes a list of URLs
13661	Update a record in the database
13662	Loads the messages for the given context .
13663	Returns an array of categories .
13664	Get the filename from the Content - Disposition header .
13665	Validates an array of uploaded files .
13666	Initializes the result object
13667	Get pattern .
13668	Sets the attributes of the detector
13669	Detect data by key name .
13670	Check if the current environment is on the CLI .
13671	Get the config
13672	Returns the latitude in DMS format .
13673	Get the longitude in DMS format
13674	Calculates the minimum and maximum longitude and latitude for a given distance in meters .
13675	Calculates the longitude and distance between this point and the given distance in meters .
13676	Returns the distance between this location and another location .
13677	Checks if the given data matches the configured filters .
13678	Create all tables from config
13679	Bundle multiple schemas .
13680	Get a point by name .
13681	Publish the console command .
13682	Get a matching URL fragment .
13683	Generate the response for the given request
13684	Retrieve data from cache
13685	Checks if a string ends with a given string .
13686	Count the number of words in a string .
13687	Create the acting as model .
13688	Initializes the session .
13689	Opens the session and registers the session handler .
13690	Open the session .
13691	Registers the session handler .
13692	Closes the session .
13693	Destroys the session .
13694	Regenerates the session ID
13695	Read session .
13696	Write session to server
13697	Destroys a session
13698	Sets a key value pair in the session .
13699	Removes a value from the session .
13700	Removes all session data
13701	Get a flash value .
13702	Get all flash messages .
13703	Sets a flash variable .
13704	Adds a flash message .
13705	Removes a value from the session .
13706	Removes all flash data .
13707	Freezes the session
13708	Unfreezes the session
13709	Create session cookie .
13710	Validates that an attribute is after a given date .
13711	Validates the date is after the given date with the given format .
13712	Validates that an attribute is a valid date format .
13713	Checks the prediction of all prophecies .
13714	Assign a value to an array using dot notation
13715	Get Controller Plugin Config
13716	Executes a single rule .
13717	Process multiple dependencies
13718	Parses an array of fragments .
13719	Create a new view instance .
13720	Set view variables .
13721	Sets a view variable .
13722	Escapes the given value .
13723	Get the template directory .
13724	Set the layout of the view .
13725	Set the template to render .
13726	Renders a partial .
13727	End block .
13728	Renders the view .
13729	Get full path to template file
13730	Renders a template .
13731	Renders the layout .
13732	Adds a route to the routes array .
13733	Get the separator line .
13734	Write a header message .
13735	Get all AbuseIO notifications
13736	Create a notification by name
13737	Sets the file key .
13738	Returns true if the file should be renamed
13739	Guesses the file extension .
13740	Guesses the filename .
13741	Sets the rename .
13742	Download a file .
13743	Upload an image to TinyMCE .
13744	Handles exceptions thrown by the kernel .
13745	Get the result of a curl request
13746	Executes the request and returns the response
13747	Set the cookie file
13748	Choose parameters from map
13749	Updates all items .
13750	Initialize options .
13751	Write the configuration to a file
13752	Get exception from context .
13753	Converts an exception into an array .
13754	Renders a file .
13755	Check if a file is a core file .
13756	Get exception name
13757	Before output callback
13758	Generates a list of URLs to be minimized
13759	Set the value of amountDefault .
13760	Set value for field user_date_start
13761	Set value for field user_date_end
13762	Set is_recurrent .
13763	Set the month bitmask
13764	Get all budget categories .
13765	Get all budget months .
13766	Execute a SQL statement and return the result .
13767	Get the last error of a query .
13768	Load a class from a path
13769	Upgrades the database .
13770	Shuts down the database .
13771	Inserts a new record into a table .
13772	Inserts multiple rows into a table .
13773	Update data in a table .
13774	Delete data from a table .
13775	Renames a table .
13776	Drops a table .
13777	Truncates a table .
13778	Drops a column from a table .
13779	Renames a table column .
13780	Alter a column on a table .
13781	Add a primary key to a table .
13782	Drops a primary key .
13783	Adds a foreign key .
13784	Drops a foreign key .
13785	Create an index on a table .
13786	Drops an index .
13787	Add comment on a column .
13788	Add comment to table .
13789	Drop a comment from a column .
13790	Drop comment from table .
13791	Execute a promise and return the result .
13792	Log a message to the adapter
13793	Validates the given regex .
13794	Captures all occurrences of this pattern in the given text .
13795	Splits the given text into an array .
13796	Replaces the given text with the given text .
13797	Config action .
13798	Get securimage url
13799	Get a model by its primary key .
13800	Returns the model with the given id or a new one if not found .
13801	Returns a list of entities .
13802	Save a model to the database .
13803	Deletes a model from the database .
13804	Get a list of entities by their ids .
13805	Returns an array of models with ids as keys
13806	Sets a raw cookie
13807	Connects to a SOCKS5 proxy .
13808	Save record to database .
13809	Set the record s data
13810	Returns the record as an associative array
13811	Get field value
13812	Set the value of a field
13813	Get record primary key predicate
13814	Parse a path into an array .
13815	Validates a path .
13816	Splits a list of segments by the given delimiter .
13817	Parses a route path and returns an array of route parameters .
13818	Get the replacement for a given parameter .
13819	Cache the given value .
13820	Flushes the entire cache .
13821	Process the response data .
13822	Invokes an action on an object .
13823	Get the content type of the file
13824	Regenerates a session id .
13825	Create a new session id .
13826	Creates the garbage collector timer .
13827	Set the content .
13828	Set the buttons .
13829	Add a button .
13830	Validate modal type .
13831	Validate modal size .
13832	Register the commands .
13833	Archive a tar file
13834	add a string to the archive
13835	Check if a file is malicious .
13836	Parse a user command .
13837	Runs the migration from the given object .
13838	Returns the unique keys for a table .
13839	Returns the primary key of a table .
13840	Returns the primary keys for a table .
13841	Returns the critical priority .
13842	Get validator .
13843	Loads the mime types from a file .
13844	Load mime aliases file
13845	Deletes a file or a directory .
13846	Returns the permissions as a string .
13847	Returns the permissions as octal value .
13848	Add an inner join .
13849	Returns the SQL representation of the select statement .
13850	Execute the search query and return the results .
13851	create table sql
13852	Load modules .
13853	Get the service container .
13854	Initialises the bot .
13855	Begins the SELECT statement
13856	Sets the table for the query
13857	Sets a value for a column .
13858	Adds a where clause to the query
13859	Adds an or where clause to the query .
13860	Order by ascending .
13861	Adds a DESC ORDER BY clause
13862	Get the current query .
13863	Sets the where clause .
13864	Sets the order by .
13865	Get the select query .
13866	Get insert query .
13867	Get update query .
13868	Get delete query .
13869	Get SET query .
13870	Get where query .
13871	Returns the order by clause .
13872	Dispatches the given expression to the appropriate handler .
13873	Register a new model .
13874	Edit a user .
13875	Get the version string .
13876	Create a route for the current request
13877	Handles the request .
13878	Create route and resolve action
13879	Get the home URL .
13880	Sets a component definition .
13881	Restaure utilisateur
13882	Get user by id
13883	Returns the active users .
13884	Saves messages to a file .
13885	Find a value in a list
13886	Find the models with the given relations .
13887	Reads the next row from the result set .
13888	Read a single column from the result set
13889	Read an object from the result set and return it .
13890	Returns all results as an array .
13891	Returns the number of columns in the result set
13892	Find the constraints for a table .
13893	Get PostgreSQL server version .
13894	Publishes the routes .
13895	Parse routes data and build path expressions .
13896	Builds the path expressions .
13897	Add an alias for a service id .
13898	Binds a service to the container .
13899	Binds a service to the dispatcher using a service context .
13900	Get service from context .
13901	Checks if a service has been registered .
13902	Checks if a service has a context .
13903	Get a service by id .
13904	Make a service by id .
13905	Returns the service with provided id
13906	Returns the provided service .
13907	Generates a service id with optional context and member .
13908	Setup the container .
13909	Setup service container from cache file .
13910	Setup service providers .
13911	Get the list of cacheable services .
13912	Get the address lines .
13913	Set filter level
13914	Get unique id .
13915	Register the route in the router .
13916	Resolve an action .
13917	Emits an event of type BEFORE_ACTION
13918	Emits the AFTER_ACTION event .
13919	Renders a partial view .
13920	Renders an ajax view .
13921	Returns an array of action ids .
13922	Renders a view in a layout .
13923	Renders the view and returns the response .
13924	Normalize action method name .
13925	Resolve an error as html .
13926	Resolve error as array .
13927	Get error data .
13928	Get the exception name .
13929	Validate controller action .
13930	Returns action id from action method name .
13931	Get action method name .
13932	Converts a color to a hex string .
13933	Converts a color array to an array of RGBA values .
13934	Converts an image to dominant .
13935	Read data from STDIN .
13936	Select one or more options from a list of options .
13937	Append a file to a list of paths .
13938	Get pg client
13939	Executes a SQL statement and returns a promise that resolves with an array of results .
13940	Writes the contents of the stream to the given path .
13941	Creates a ServerRequest object from PHP globals .
13942	Get a single header from an array .
13943	Strip the query string from a path .
13944	marshals the host and port from the header .
13945	Normalize nested file spec .
13946	Checks if a string ends with a given string .
13947	Generate a random string from a number of characters .
13948	Creates the edges for the given class
13949	Finds the annotations between two classes .
13950	Create a new resource .
13951	Fetch all entities .
13952	Update a record .
13953	Sets the HTTP status code .
13954	Set response headers .
13955	Returns the date header .
13956	Sets the Date header .
13957	Add a Cache - Control header .
13958	Returns the value of the specified cache - control header .
13959	Removes a Cache - Control header .
13960	Checks if the response is cacheable .
13961	Returns the age of the response .
13962	Set the Expires header for the response
13963	Returns the Expires HTTP header .
13964	Returns the maximum age of the response .
13965	Set shared max age .
13966	Set the response s time - to - live .
13967	Sets status code to 304 Not Modified
13968	Is the response invalid?
13969	Returns whether the response is informational .
13970	Checks if the response is a successful response .
13971	Is the response a redirection?
13972	Is the response a client error?
13973	Checks if the response is a redirect .
13974	Check if the response is empty .
13975	Closes output buffers up to target level .
13976	Initializes the request object .
13977	Validates the HTTP method .
13978	Locate a command by name .
13979	Locates all permissions for the given command .
13980	Returns the parsed package file .
13981	Removes all packages that are already installed
13982	Detect stupid duplicates
13983	Extract an PEAR package from a file .
13984	Get all parameters from the request body
13985	Enables PHP error reporting .
13986	Get the difference between the transaction and the global amount .
13987	Adds a month - of - month to this calendar s month - bitmask
13988	Returns true if the month is set in the current calendar
13989	Returns the length of the MIME part .
13990	Returns the boundary of the request
13991	Loads the user with the given username .
13992	Creates a new user .
13993	Sets the ip address .
13994	Renders a view
13995	Publishes a stream of events .
13996	onResourceMaterialize event .
13997	Add parameters to the query .
13998	Fetches the message from the cache .
13999	Encrypt a message
14000	Decrypts a message
14001	Decrypts a JSON encoded array .
14002	Encrypt an object
14003	Decrypts a JSON encoded object .
14004	Gets an option value .
14005	Initializes the object with default values .
14006	Replace magic fields .
14007	Convert a query into a query builder
14008	Converts a rich text array into a plain text string .
14009	Converts a rich - text array into an HTML string .
14010	Converts a block into an html block .
14011	Returns a new instance without the specified cookie .
14012	Sends the response to the client
14013	Validates a status code .
