0	Get the administrator role
1	Get admin user .
2	Handle the Bread deleted event .
3	Translations for categories .
4	Get highest order menu item .
5	Create a unique name for a column type .
6	Handle the BreadAdded event .
7	Updates a table .
8	Updates the table .
9	Get renamed columns diff .
10	Get the renamed table diff .
11	Get the list of renamed columns .
12	Get the list of renamed indexes .
13	Get the thumbnail of an image .
14	Get thumbnail name .
15	Determine if the given user can edit the given roles .
16	Get the dimmers widgets .
17	Prepare menu translations .
18	Save the translation model .
19	Determine if the given user can read the given record .
20	Show the form for creating a new bread .
21	Store a new bread .
22	Show the form for editing a bread .
23	Update bread .
24	Delete a bread .
25	Add a relationship .
26	Get the relationship field
27	Handle the request .
28	Store a new database table .
29	Show the form for editing the specified table .
30	Update the database table .
31	Show a database table .
32	Delete a database table .
33	Build the sort url .
34	Display a menu .
35	Check if the model is translatable .
36	Many - to - Many relations .
37	Returns translated attribute value .
38	Scope a query to only include translations .
39	Save translations .
40	Describes a table .
41	Handle the BreadAdded event .
42	Add storage symlink alert .
43	Register the console commands .
44	Cleans up data .
45	Delete bread images .
46	Order bread .
47	Display a list of relationships .
48	Resolve relations .
49	Add the SoftDeletes trait to the given stub .
50	Validate Bread .
51	Get fields with validation rules .
52	Verify an id_token
53	Retrieve verification certificates from a URL .
54	Returns the list of certificates used to sign the sign - on .
55	Set phpsec constants
56	Fetch an access token with an authorization code
57	Fetch an OAuth2 access token with a signed JWT assertion .
58	Fetch an OAuth2 access token with a refresh token
59	Authorize the user .
60	Check if the access token is expired .
61	Verify an id_token
62	Add a scope to the request
63	Execute an HTTP request .
64	Set auth config
65	Creates an OAuth2 service instance .
66	Returns the number of retries allowed for the given error code .
67	Get the next chunk of data .
68	Parses the response and returns the headers and body .
69	Get data type
70	Combine a list of variables
71	Returns the encoded value .
72	Executes a request and returns the response .
73	Decode an HTTP response .
74	Map types from array to object
75	Convert the model data to a simple object .
76	Recursively converts a value to a simple object
77	Get mapped name .
78	Checks if an array is an associative array .
79	Build an instance of Google Auth Handler
80	Find the config file .
81	Define core constants
82	Sets the is_emulate_prepare attribute to true .
83	Deal or error
84	Get the list of queries to run .
85	Register global variables .
86	Get all options from the database .
87	Add an option to the database
88	Delete an option from the database
89	Adds a placeholder to the route .
90	Sets the default route namespace .
91	Sets the default controller .
92	Sets the default route method .
93	Discover routes .
94	Set default placeholder constraint .
95	Get all routes for a given HTTP verb .
96	Get routes options .
97	Add routes to the collection .
98	Add a redirect .
99	Check if a given route is a redirect .
100	Get redirect code .
101	Add a route to the collection .
102	Adds a route for the OPTIONS method .
103	Set the route environment .
104	Reverses a route .
105	Determine the current subdomain .
106	Reset all routes .
107	Throw an error if error_reporting is enabled .
108	Shutdown handler .
109	Determines the view to use for the given exception .
110	Renders the error page .
111	Collect vars from exception .
112	Determine the HTTP status code .
113	Returns a human - readable representation of a memory usage .
114	Highlight a file .
115	Check if value is alpha space
116	Regex match .
117	Check if a string is a valid email address .
118	Validate email addresses .
119	Check if a string is a valid URL
120	Check if string is a valid date
121	Create a new exception instance for a failed move operation .
122	Check if a cc number is valid .
123	Checks if a number is a valid luhn number .
124	Move file from source to destination .
125	Move the escaper class to the correct location .
126	Move kint to build directory
127	Starts the session .
128	Configure the length of the session ID .
129	Init session vars .
130	Sets a session variable .
131	Get a value from the session
132	Push data to a key .
133	Remove a value from the session .
134	Set flashdata .
135	Get flashdata .
136	Mark a session variable as flashdata
137	Get flash keys .
138	Set temporary data .
139	Get tempdata from session
140	Mark a session variable as tempdata
141	Unmark temporary data .
142	Returns an array of temporary keys .
143	Sets the session cookie .
144	Checks if a given key is available in the cache .
145	Guess mime type from file extension .
146	Try to guess a file extension from a mime type .
147	Redirect to another URI .
148	Redirect to a given route .
149	Redirect back to previous page .
150	Set a flash message .
151	Runs the filter at the given position .
152	Initializes the router .
153	Enable a filter .
154	Get the arguments .
155	Format an object into an array
156	Send the logs to the client
157	Detects the default locale .
158	Set the locale .
159	Check if request is secure
160	Returns the body as a JSON object .
161	Returns the results of a get query .
162	Returns a list of posts .
163	Returns the value of a POST parameter or GET parameter .
164	Returns a value from GET or POST .
165	Returns cookie data .
166	Get all files .
167	Get a file by ID .
168	Detect the URI for the given protocol and base URL .
169	Detect the path of the request .
170	Negotiates a media type .
171	Parse the request URI .
172	Build the DSN .
173	Get a formatter for a given mime type .
174	Check if the request is a bot or not .
175	Attach the honeypot to the response .
176	Resizes the image .
177	Crops the image .
178	Get the version of ImageMagick .
179	Get the path to the resource file .
180	Add a foreign key .
181	Drop a foreign key from a table .
182	Handle the UNSIGNED attribute .
183	Adds the DEFAULT attribute to the field .
184	Process primary keys .
185	Process foreign keys .
186	Set the locale .
187	Returns a translation line .
188	Format a message .
189	Require a file .
190	Add a base URI .
191	Add an image src option .
192	Add a media src option .
193	Add the manifest src option .
194	Add an object src option .
195	Add a plugin type .
196	Add the sandbox option .
197	Add a script src option .
198	Add a style src option .
199	Add an option to a target .
200	Generate nonces for the response .
201	Build the headers for the response .
202	Get the title .
203	Collect logs .
204	Convert params string to array
205	Determines the cell class .
206	Get result as array or object .
207	Get custom result object .
208	Get the results as an array .
209	Get the results as an object .
210	Get a row from the row data .
211	Returns the custom result object for the given row number .
212	Get a row from the result set .
213	Get a row object .
214	Set a row .
215	Get first row
216	Get last row
217	Get the next row from the result set .
218	Returns the next row from the result set as an associative array or object .
219	Match the acceptable and supported headers .
220	Matches parameters against acceptable and supported parameters .
221	Run the application .
222	Show the CLI tool header .
223	Display the links for a group .
224	Make links .
225	Stores data for a group .
226	Set the path for a group .
227	Returns the number of pages in a group .
228	Returns the current page number .
229	Returns true if the current page has been reached .
230	Returns the last page number .
231	Get the URI for a specific page .
232	Returns the URI of the next page .
233	Returns the URI of the previous page .
234	Returns the number of pages in a group .
235	Returns the details for a given group .
236	Ensure a group exists .
237	Returns the number of years .
238	Returns the difference in months .
239	Returns the number of weeks .
240	Returns the difference in days .
241	Returns the difference in hours .
242	Returns the difference in minutes .
243	Returns the difference between two times .
244	Returns a human - readable representation of the time .
245	Loads a connection .
246	Loads the Forge class for the given connection .
247	Check if a property has changed .
248	Map a property .
249	Mutate a date value .
250	Casts a value to a JSON object .
251	Determine if an alias should be discovered .
252	Find all rows .
253	Returns the first row of the result set
254	Save data to the database .
255	Convert a class to an array .
256	Inserts a new record into the database .
257	Insert multiple rows at once .
258	Get the model builder instance .
259	Protects the fields of an array .
260	Clean validation rules .
261	Get validation rules .
262	Count the number of results in the query .
263	Set authentication .
264	Sets the form parameters .
265	Parse options .
266	Returns the request method .
267	Send a request to the server .
268	Apply request headers to curl options .
269	Set response headers
270	Sends the request to the server .
271	Sets the version of the migration .
272	Find all migrations .
273	Check migrations .
274	Get the history of all versions .
275	Get migration name .
276	Get the current version of the module .
277	Add the migration history to the database .
278	Remove the migration history .
279	Ensure the database table exists .
280	Checks a value against a rule .
281	Set the data from the request .
282	Set a validation rule for a field .
283	Get rule group .
284	Sets the rule group .
285	Loads the rule sets .
286	Sets the error message for a field .
287	Get error message .
288	Splits a string into an array of rules .
289	Reset the validation state .
290	Convert an array to XML
291	Clean file names .
292	Sets the request URI .
293	Get user info .
294	Returns the query string .
295	Returns the specified URI segment .
296	Sets a URI segment .
297	Creates a URI string from the given parameters .
298	Sets the authority of the URI .
299	Sets the URL scheme .
300	Sets the port of the request .
301	Set the path .
302	Refresh the path .
303	Sets the query string .
304	Decode a value .
305	Add a query parameter .
306	Keep query params .
307	Filters the path .
308	Applies the given parts of the URI to this instance .
309	Resolves a relative URI .
310	Merges two URIs into a single path .
311	Remove dot segments from a path .
312	Append a value to the value array
313	Prepend a value to the value array .
314	Returns the URI of the previous page .
315	Returns the next URL segment .
316	Returns the first page of the URI .
317	Returns the last part of the URI .
318	Returns the current page .
319	Start a timer .
320	Stops a timer .
321	Get the elapsed time of a timer .
322	Get all timers .
323	Add table alias .
324	Executes a SQL query and returns the result .
325	Executes a simple SQL query .
326	Creates a new table builder instance .
327	Prepares a prepared query .
328	Recursively escape identifiers .
329	Call a function on the database .
330	Returns a list of all tables in the database .
331	Checks if a table exists .
332	Check if a field exists in a table .
333	Get field data for a table .
334	Get index data for a table
335	Returns foreign key data for a table .
336	Returns the value of an environment variable .
337	Register the properties of the object .
338	Get item from cache .
339	Write data to a file .
340	Get information about files in a directory .
341	Get file info .
342	Initialize the application .
343	Run the system .
344	Handle the current request .
345	Start the benchmark .
346	Get the response object .
347	Force HTTPS access .
348	Display page cache
349	Cache a page .
350	Generate cache name .
351	Display the performance metrics .
352	Try to route the request .
353	Start the controller .
354	Creates a new controller instance .
355	Run the controller .
356	Gathers the output from the output buffer .
357	Stores the previous URL in the session .
358	Spoof request method .
359	Get cache handler .
360	Create an alias from a table name .
361	Appends WHERE NOT IN statement
362	Add a WHERE IN condition .
363	Creates a like statement .
364	Start a group .
365	End a group .
366	Set the offset for the query .
367	Set a value in the set .
368	Returns the compiled select .
369	Compile final query .
370	Returns the number of rows in the table .
371	Returns the number of rows in the result set .
372	Helper method to insert multiple rows into a table .
373	Returns a compiled INSERT query .
374	Returns the compiled update query .
375	Get compiled delete query .
376	Decrements the value of a column
377	Compiles the select statement into a string .
378	Compiles a WHERE HAVING clause .
379	Compiles the GROUP BY clause .
380	Compiles the ORDER BY clause .
381	Get operators from string .
382	Renders the timeline .
383	Collect data from the given collectors .
384	Collect data from all registered collectors .
385	Rounds a number .
386	Copies the image to a new location .
387	Get image properties
388	Releases the lock .
389	Attach honeypot to the response .
390	Prepare template .
391	Returns the next row as an object .
392	Make an array of columns
393	Clears the table .
394	Sets the data from a DB result object .
395	Set data from array
396	Set path .
397	Get upload error string .
398	Store the uploaded file .
399	Check if the file is larger than the maximum size .
400	Is the file an image?
401	Check if a file is in a list of mime types .
402	Check if file has max dimensions .
403	Fetch global variables .
404	Populates the global variables for a given method .
405	Run migrations .
406	Sets the table name .
407	Run the migration .
408	Modify column .
409	Creates the database table .
410	Copy data to temp table
411	Format fields .
412	Format the keys .
413	Drop all indexes .
414	Set CSRF cookie
415	Get the hash of the CSRF cookie .
416	Returns a new instance of Time .
417	Creates a Time instance from a datetime string .
418	Creates a new Time instance with the current date .
419	Returns a new Time instance with the last day of the week .
420	Creates a new Time instance with the last day of the week .
421	Create a new DateTime instance from a date .
422	Creates a DateTime instance from a time .
423	Create a new Time instance .
424	Creates a new Time instance from a string
425	Creates a Time instance from a timestamp .
426	Creates a Time instance from a DateTime instance .
427	Converts this DateTime instance to a DateTime instance .
428	Get the age of the event .
429	Get the daylight saving state .
430	Sets the month .
431	Sets the day of the month .
432	Sets the minute of the hour
433	Sets the second of the hour
434	Set the value of the property .
435	Convert a timestamp to a Time object
436	Checks if another time is equal to this time .
437	Test if current time is the same as the given time .
438	Returns a DateTime object for a given time .
439	Returns the JavaScript code point for the given character .
440	Matches a CSS character .
441	Converts a string to UTF - 8 .
442	Convert a string from UTF - 8 .
443	Get a file by name .
444	Create file object from array .
445	Get value dot notation syntax .
446	Sets the binary to use for the download .
447	Sets the filepath of the downloaded file .
448	Returns the length of the content .
449	Sets the content type based on the mime type of the file .
450	Get download file name .
451	Returns the content disposition .
452	Build the response headers .
453	Sends the body of the download .
454	Send body by file path .
455	Remap method .
456	Run a command .
457	Create command list .
458	Connect to the database .
459	Create a new seeder instance .
460	Check if all namespace is enabled .
461	Add a test .
462	Run all tests .
463	Get the report .
464	Sets the query .
465	Returns the final query string .
466	Get the start time .
467	Get the elapsed time .
468	Set error code and error string
469	Swap a prefix in the final query string .
470	Compiles the binds into a query string .
471	Load the helpers .
472	Register the class loader .
473	Add a namespace .
474	Returns a list of namespace prefixes .
475	Require a file .
476	Sanitize a filename .
477	Discovers composer namespaces .
478	Modify a date .
479	Create an excerpt .
480	Sanitize a value .
481	Resolve nested variables .
482	Sets the database name .
483	Executes a query and returns the number of affected rows
484	Prepare the query to be executed .
485	Returns the error code and message .
486	Executes a SQL statement .
487	Returns an array of field names for a table .
488	Get a cache handler .
489	Get a CLIRequest instance .
490	Creates a new CURLRequest instance .
491	Returns a Honeypot instance .
492	Returns a language instance .
493	Returns the logger instance .
494	Returns a Negotiate instance .
495	Create a new parser instance .
496	Get an instance of the IncomingRequest class .
497	Return a response instance .
498	Create a redirect response .
499	Returns a router instance .
500	Returns a security instance .
501	Get or set the URI instance .
502	Returns a validation instance .
503	Describe commands .
504	Pads the title .
505	Get CSV from result .
506	Get XML from ResultInterface .
507	Call a command .
508	Call the specified seeder .
509	Checks if a value is in a list
510	Checks if a string is less than or equal to a given value
511	Check if the form is required with the given fields .
512	Check if a value is required without the given fields .
513	Validates the request path segments .
514	Set the directory .
515	Set request controller and method .
516	Sets the default controller .
517	Returns the file size in bytes .
518	Moves the file to a new location .
519	Get the destination path .
520	Collect queries .
521	Format Timeline Data .
522	Locates a file in a given folder .
523	Returns the name of the class in the given file .
524	Search for a file in all namespaces .
525	Ensure that the given path has the given extension .
526	Find a fully qualified class name from a path .
527	Locate a legacy file .
528	Render a view string .
529	Returns an excerpt of a string .
530	Set data .
531	Sets the value of a variable .
532	Renders the contents of a section .
533	Include a view .
534	Log the performance data .
535	Set the image to read from a file .
536	Ensure the image resource exists .
537	Resizes the image .
538	Rotates the image .
539	Flips the image .
540	Adds text to the image .
541	Re - orient the image .
542	Returns the Exif data of the image .
543	Fit image to given width and height .
544	Run the CodeIgniter development server
545	Render a template and return the output .
546	Parses a variable and returns an array of pairs .
547	Extracts the noparse blocks from the template .
548	Insert noparse blocks into a template .
549	Parse conditionals .
550	Sets the left and right delimiters .
551	Replace the given pattern with the given content .
552	Determines if a key should be escaped .
553	Add a plugin .
554	Creates an image resource .
555	Returns the value of a specific header .
556	Check if the request has a specific header .
557	Set a header .
558	Remove a header from the message
559	Sets the HTTP protocol version .
560	Returns the header name .
561	Configure the session ID regex
562	Get response reason
563	Set the Link header .
564	Sets the Content - Type header .
565	Get the response body as JSON .
566	Get the body as an XML string .
567	Format the body .
568	Set the cache headers .
569	Sends the response to the client .
570	Sends the response headers .
571	Sets a cookie .
572	Check if a cookie exists .
573	Get a cookie by name .
574	Delete a cookie .
575	Send the cookies to the client .
576	Returns a download response .
577	Get an instance of a class .
578	Create a config class .
579	Get a shared instance of the given key .
580	Returns the autoloader instance .
581	Get the locator instance .
582	Reset the mock manager .
583	Inject a mock .
584	Discover services .
585	Read input from the user .
586	Prompt user for input .
587	Validates a value against a set of rules .
588	Print text to standard output .
589	Write text to STDERR .
590	Wait for input .
591	Creates a colorized text .
592	Wraps a string to a maximum width .
593	Get the value of an option .
594	Generate a table from an array of rows .
595	Set response body and status code .
596	Return an error response .
597	Respond created response
598	Respond with deleted response .
599	fail unauthorized response
600	fail server error
601	This method is called before the request is executed .
602	Initialize the module .
603	Get all listeners for an event .
604	Removes a listener from an event .
605	Check if the current request is a referrer .
606	Set the platform of the agent
607	Set the browser from the user agent .
608	Determine if the agent is a robot .
609	Determine if the browser is using mobiles .
610	Sets the type of an attribute .
611	Initializes the config .
612	Show QR Code .
613	Init qrcode style .
614	Format emoji content .
615	Check if the time is greater than 1800 seconds .
616	Handle a check sync .
617	Logs a message .
618	Fetch the server uuid .
619	Displays the QrCode .
620	Wait for the user to login .
621	Get login data from the server .
622	Save the server to the cache .
623	This method is called at the beginning of the init process .
624	After init success .
625	Send a status notify .
626	Download a message .
627	Get the content of a resource .
628	Tries to auto download the file .
629	Check if we have a sync .
630	Perform a webwx sync .
631	Generates a sync key .
632	Log a message to the Vbot log .
633	Log a message .
634	Send a word to a user .
635	Fetch all contacts .
636	Stores a list of contacts .
637	Fetch group members .
638	Stores members from an array .
639	Report an exception .
640	Throw a fatal exception .
641	Validates the key .
642	Splits the JWT string into an array .
643	Parse the header data .
644	Parses the claims from the JWT .
645	Parse signature from data .
646	Negotiate the language .
647	Get matches from Accept - Language header .
648	Cache routes per locale .
649	Build the route cache file .
650	Register the application bindings .
651	Register route translations commands .
652	Set the current locale .
653	Get URL from route name translated .
654	Get supported locales .
655	Returns an array of supported locales ordered by priority .
656	Returns the direction of the current locale .
657	Get the current locale .
658	Returns the regional version of the current locale .
659	Check if a locale is supported .
660	Get the route name from a path .
661	Find a translated route by path .
662	Find a translated route by url .
663	Create a URL from an URI .
664	Normalize the attributes .
665	Load cached routes .
666	Make locale routes path .
667	Encode set of messages .
668	Encodes a produce partition .
669	Encodes a producer topic .
670	Produce a topic pair .
671	Produce a partition pair .
672	Decode a message set .
673	Decode a message .
674	Creates a stream socket client .
675	Selects a socket .
676	Unpacks a bit field from a byte stream .
677	Check string length
678	Returns true if the system is little endian .
679	Get API version .
680	Get API text .
681	Add a before route .
682	Add a route to the afterRoutes array .
683	Mount a function to a base route .
684	Returns the request method .
685	Returns the base path of the server .
686	Add a route to the router .
687	Returns the first route that matches the given request .
688	Returns the current route .
689	Returns true if the given url matches the pattern .
690	Run a filter .
691	Get an event by name .
692	Clears all events or a specific filter .
693	Execute a set of filters .
694	Executes a callback .
695	Calls a function with the given parameters .
696	Calls a method of a class .
697	Initializes the request .
698	Get the request body .
699	Returns the request method .
700	Get proxy IP address
701	Parse the query part of a URL .
702	Get or set the status code .
703	Add a header to the message .
704	Sets the cache headers .
705	Sends the response .
706	Initializes the router .
707	Handles PHP errors .
708	Handle an exception .
709	Map a framework method to a callback .
710	Register a framework method .
711	Returns the value of the given key or all of them .
712	Clear a variable or all of them
713	Start the application .
714	Stop the application .
715	Add a route to the router .
716	Halt the application .
717	Default error handler .
718	Redirect to a given URL .
719	Return a json response .
720	Return a JSONP response
721	Sets the ETag header .
722	Sets the Last - Modified header
723	Register a class with the container .
724	Loads an object from the container .
725	Get an instance by name .
726	Creates a new instance of a class .
727	Load a class .
728	Add a directory .
729	Render a file and return the output .
730	Get the path to a template file
731	Check if the given graph is cyclic .
732	Calculate the average height of the graph .
733	Collapse a multi - dimensional array into a multi - dimensional array .
734	Fetch files from a list of paths .
735	Traverse the tree .
736	Returns the root nodes of the graph .
737	Get composer . lock installed .
738	Advances the progress bar .
739	Returns true if the stream supports ANSI characters .
740	Process no parameters .
741	Processes this test .
742	Initializes the error handler .
743	Add a fixable message to the error report .
744	Merge a custom array into a base array .
745	Get the pointer to the last token on a line .
746	Checks if the given token is an assignment .
747	Checks if a token is a namespaced token .
748	Returns true if the given token is only sanitized .
749	Checks if the given token is safe cast .
750	Get array access keys .
751	Returns the name of the array access key at the given index .
752	Checks if the given token is a comparison token .
753	Is the current token in an array comparison?
754	Get use type .
755	Returns an array of interpolated variables from a string .
756	Checks if a function call has parameters .
757	Returns the number of parameters in a function call .
758	Returns the value of a parameter in a function call .
759	Find the array open and close token for a given token .
760	Determines the namespace for a given token .
761	Returns the name of the namespace declared at the given token .
762	Is the current token a class constant?
763	Is the current token a class property?
764	Check if the current token is a valid direct scope .
765	Prepare the regular expression .
766	Transforms a string using a regular expression .
767	Transform a complex string .
768	Returns an array of group names .
769	Process an arbitrary tstring .
770	Process parameters .
771	Retrieve mispellings from the match stack .
772	Callback for the pagination limit .
773	Set config data
774	Get the tab width .
775	Processes a global statement .
776	Add a prohibited error .
777	Setup the groups for a given key .
778	Checks if the given token is a targetted token .
779	Check if a token matches one of the groups .
780	Processes a variable declaration .
781	Check if a variable is prefixed or whitelisted .
782	Validates the prefixes .
783	Record the start of a non - prefixed construct .
784	Setup the groups .
785	Validates the alignMultilineItems property .
786	Check if the given value is a local data stream .
787	Processes variables in string format .
788	Merge the whitelist with the custom properties .
789	Check if a token should be ignored .
790	Returns the indentation size of the given token .
791	Returns the indentation string for the given number of tabs .
792	Adds an alignment error .
793	Fixes an alignment error .
794	Checks if a token is a falsy token .
795	Compare the single and plural arguments .
796	Check text .
797	Checks if the given token is a targetted token .
798	Check for a token that matches the class name .
799	Get the namespaced classname .
800	Registers the condition start tokens .
801	Execute the task .
802	Reserves a message from the queue .
803	Closes the broker context .
804	Validates that a namespace is associated with a directory .
805	Push a job to the queue .
806	Listen for events .
807	Execute an action .
808	Handle a message .
809	Run the event loop .
810	Reserves the channel .
811	Update reserved_at and done_at to null
812	Serialize the job if it is a closure .
813	Delete a message from the queue .
814	Run the worker .
815	Handle a message .
816	Initializes the process .
817	Check if the process can continue .
818	Reserves a job .
819	Delete a job .
820	Parses the current element .
821	Parses the tree and returns an array of elements .
822	Parses the content of the current element .
823	Reads text from the input stream .
824	Parse the current element .
825	Parses the attributes of the current element .
826	Get a deserializer for the given element name .
827	Pushes the current context onto the context stack .
828	Removes the current context from the stack .
829	Returns an instance of the Writer .
830	Parses an XML string .
831	Parse the input and return the root element .
832	Write a value to the XML document .
833	Maps a value object to a given element .
834	Write a value object .
835	Parses a clark - notation string into an array .
836	Creates a new Response object from a xml reader .
837	Creates a new Uri object from an xml reader .
838	Write an opening element .
839	Write an element .
840	Write an array of attributes .
841	Writes an attribute .
842	Get the relations for the given model .
843	Validate a job name .
844	Validate the command .
845	Creates a new ShellJob from a CronJob object .
846	Creates a closure that can be used to retrieve the trace context .
847	Finish the timer .
848	Returns the current span .
849	Convert the trace context to a span .
850	Starts the recorder .
851	Sets the name of the recorder .
852	Adds an annotation to the trace context .
853	Sets the remote endpoint .
854	Generate a new token and attach it to the request
855	Get a value from the storage .
856	Get the last key pair .
857	Enforce storage limit .
858	Creates a new sanitizer instance .
859	Sets the attributes of the given tag node .
860	Returns the value of the attribute with the given name .
861	Adds the default entity name to the backend config .
862	Processes the default menu item .
863	Returns the type name for a given type class name .
864	Returns the form type options for a property .
865	Initializes the backend .
866	Autocomplete action .
867	Displays a list of entities .
868	Edit an entity .
869	Finds and displays a given entity .
870	Displays a form to create a new entity .
871	Deletes an entity .
872	Search action .
873	Handles the batch action .
874	Update an entity property .
875	Find all entities .
876	Create the list query builder .
877	Finds entities by a search query .
878	Creates a search query builder for the entity .
879	Creates a form builder for the given entity .
880	Get the entity form options .
881	Creates a form for the given entity .
882	Creates a form to delete a entity .
883	Redirect to backend homepage .
884	Adds a custom controller to the request .
885	Normalize menu config .
886	Returns the entity configuration .
887	Checks if an action is enabled for the given view and action .
888	Returns the configuration for an action .
889	Translates a message with the given number of times .
890	Creates a Pagerfanta paginator .
891	Process the backend config .
892	Initializes the request .
893	Find the current item .
894	Returns the attributes normalizer .
895	Process entity properties metadata .
896	Get default actions .
897	Handle form violations .
898	Find an entity by a query .
899	Process config files .
900	Normalizes the entity config .
901	Returns a unique name for the given entity .
902	Normalize view config .
903	Merges the given form config with the given parent config .
904	Creates a query builder for a list of entities .
905	Checks if the given field is a Doctrine association .
906	Process field config .
907	Get excluded field names .
908	Filters a list of fields .
909	Run a command and return its output and error .
910	Returns the SQL type for a delete operation .
911	Check for a DESCRIBE statement .
912	Check for the presence of a space in a statement .
913	Read length from data .
914	Builds the progress bar callback .
915	Logs an exception .
916	Get the types from the configuration .
917	Returns an array of index configurations .
918	Returns all providers .
919	Returns the providers registered for the given index .
920	Returns the provider for the given index and type .
921	Sets the sorting .
922	Builds the index mapping from the given index config .
923	Build index template mapping from index template config .
924	Builds the type mapping .
925	Fixes properties .
926	Logs a query .
927	Transforms an object into an Elastica document .
928	Returns the total number of results .
929	Get results from elastic search .
930	Delete all indexes for a template .
931	Returns the named index .
932	Returns the persister for the given index and type .
933	Populate the index .
934	Refreshes the index .
935	Transforms an object into a document .
936	Transforms an object or array of objects into a nested array .
937	Normalizes the given value .
938	Transforms an object to a document .
939	Get entity query builder .
940	Returns an index template by name .
941	Reset all indexes .
942	Resets an existing index .
943	Resets an index type .
944	Switches an index alias .
945	Loads the index finder .
946	Loads persistence integration for a type .
947	Loads the elastica to model transformer service .
948	Returns the object persister .
949	Load pager provider .
950	Loads the type listener .
951	Get doctrine events .
952	Load type finder .
953	Loads the index manager .
954	Loads the index template manager .
955	Loads the configuration driver .
956	Loads the serializer .
957	Creates the default repository manager alias .
958	Returns the dynamic template configuration node .
959	Returns the types configuration node .
960	Returns the _id node .
961	Returns the _source configuration node .
962	Returns the routing configuration node .
963	Returns the parent node configuration definition .
964	Returns the _all configuration node .
965	Adds the indexes configuration .
966	Adds the index templates configuration .
967	Transforms an array of Elastica objects into an array of Highlightable objects .
968	Check if an object is indexable .
969	Builds the callback for the given type .
970	Builds the expression callback .
971	Returns the callback for the given type .
972	Get expression var .
973	Sets the root name of the index .
974	Switches an index alias .
975	Build an alias update request .
976	Throw an exception when trying to delete a newly built index .
977	Close an index .
978	Get an aliased index .
979	Log a query .
980	Occur on postPersist events .
981	Occur on postUpdate events .
982	Occur on preRemove events .
983	Persists the scheduled updates .
984	Schedules the object for deletion .
985	Check if an object is indexable .
986	Returns the repository for the given entity name .
987	Transforms an object into a Document .
988	Returns the repository for the given type name .
989	Make a new Hashids instance .
990	Register the factory class .
991	Verify hash .
992	Creates a Guzzle client .
993	Adds a cookie to the collection .
994	Add the cookie headers to the request .
995	Clear expired cookies .
996	Returns the hash of a cookie .
997	Add a header to the response
998	Parse HTTP headers .
999	Add authorization headers to the request .
1000	Set options for the middleware .
1001	Get client nonce .
1002	Get A1 .
1003	Get HA2 .
1004	Get the authentication header .
1005	Get the response hash .
1006	Get QOP .
1007	Hash a value .
1008	Parses the authentication info header .
1009	Parse name - value pairs .
1010	Parse the HTTP WWW - Authenticate header .
1011	Sets the digest algorithm .
1012	Set the HTTP method .
1013	Unquotes a string .
1014	Add parameters to the request .
1015	Convert an array of headers to a buzz array .
1016	Convert an array of headers into a PSR - 7 compatible array .
1017	Sends an asynchronous request .
1018	Sends a request to the server .
1019	Executes all requests in the queue .
1020	Initializes the cURL multi handle .
1021	Cleans up the cURL multi handle .
1022	Checks if the route matches the given request .
1023	Check if the cookie is expired .
1024	Checks if the cookie matches the given domain .
1025	Checks if the route matches the given path .
1026	Creates a cookie from a set cookie header .
1027	Release a cURL handle .
1028	Prepares a cURL request .
1029	Set cURL options from request .
1030	Sends a request and returns the response .
1031	Records a request and response to the log .
1032	Creates the image .
1033	Add a cover .
1034	Add TOC object
1035	Creates the PDF file .
1036	Ensure that the input is a URL or a file .
1037	Creates a GuzzleHttp \ Client .
1038	Creates a middleware stack based on the service options
1039	Creates a PSR - 7 request .
1040	Sends a request asynchronously .
1041	Generates request options .
1042	Sends the given HTTP call context asynchronously .
1043	Throw ServiceException if response status code is not equal to expected
1044	Add a post parameter .
1045	Add metadata headers .
1046	Adds a LocationMode header to the response .
1047	Validates entity properties .
1048	Returns the value of a property .
1049	Sets a property value .
1050	Sets a property .
1051	Add a property .
1052	Returns true if the table is valid .
1053	Creates a new GetTableResult object from the given body .
1054	Computes the signature .
1055	Get the authorization header .
1056	Compute canonicalized headers .
1057	Compute canonicalized resource for table .
1058	Compute canonicalized resource .
1059	Serialize to xml string .
1060	Creates a signed identifier from an XML array .
1061	Adds a signed identifier .
1062	Removes a signed identifier .
1063	Sets an array of operations .
1064	Adds a batch operation .
1065	Add an insert entity operation .
1066	Adds a delete entity operation to the batch .
1067	Creates a new CopyFileResult .
1068	Creates TimeNextVisibleMessage object from parsed response .
1069	Creates QueueMessage object from parsed response from the peek messages response .
1070	Creates a QueueMessage object from parsed response from the API .
1071	Initializes the configuration settings .
1072	Returns the StorageServiceSettings object for development storage .
1073	Get development storage account .
1074	Gets the service endpoint .
1075	Creates storage service settings .
1076	Creates a StorageSettings object from a connection string .
1077	Creates a StorageServiceSettings object from a connection string .
1078	Encodes the given body part contents as a MIME multipart .
1079	Decodes a MIME multipart message .
1080	Creates ListSharesResult object from parsed response .
1081	Sets the list of shares .
1082	Tries to retry the request .
1083	Applies AND operator to two filters .
1084	Applies the or operator to two filters .
1085	Applies the eq operator to two filters .
1086	Applies the ne operator to two filters .
1087	Applies the greater than operator to two filters .
1088	Applies the greater than operator to two filters .
1089	Creates a new binary filter using the lt operator .
1090	Applies the le operator to two filters .
1091	Sets the location mode .
1092	Unserializes a serialized string .
1093	Creates PeekMessagesResult from parsed response .
1094	Creates a new GetEntityResult .
1095	Create operation contexts for batch operations .
1096	Constructs batch operation context .
1097	Creates a request body for batch operations .
1098	Constructs delete entity request context .
1099	Constructs put or merge entity request context .
1100	Constructs the insert entity HTTP context .
1101	Get entity path .
1102	Put or merge entity asynchronously .
1103	Adds optional query parameter to the query .
1104	Encode an array of values .
1105	Query tables asynchronously .
1106	Creates a table .
1107	Creates a table asynchronously .
1108	Get table information .
1109	Get table . Returns an instance of GetTableResult .
1110	Deletes a table .
1111	Deletes a table .
1112	Queries entities in a table asynchronously .
1113	Insert a new entity or merge an existing entity .
1114	Creates a PUT or MERGE operation asynchronously .
1115	Inserts or replaces an existing entity in the specified table .
1116	Inserts or replaces an existing entity in the specified table asynchronously .
1117	Update an existing entity in a table .
1118	Updates an existing entity in the specified table asynchronously .
1119	Merges an entity into a table .
1120	Creates a merge operation asynchronously .
1121	Deletes an entity .
1122	Deletes an entity from a table asynchronously .
1123	Get entity .
1124	Gets the entity for the specified partition key and row key .
1125	Executes multiple batch operations at once .
1126	Creates a batch operation asynchronously .
1127	Creates ListDirectoriesAndFilesResult object from parsed response .
1128	Sets the directories .
1129	Sets the files .
1130	Creates Directory from parsed response body .
1131	Creates UpdateEntityResult .
1132	Sets the query parameters .
1133	Sets the status codes .
1134	Removes a header from the message .
1135	Adds an entry to the history .
1136	Append a new entry to the path .
1137	Creates a new query tables result .
1138	Creates a ListMessagesResult object from parsed response .
1139	Sets the queue messages .
1140	Initializes the connection string sources .
1141	Returns true if the hostname is valid .
1142	Checks if the given string is a valid URI .
1143	Checks if the given method exists on the given object instance .
1144	Validate if value is a date string .
1145	Checks if a key exists in an array .
1146	Returns a string representation of the range
1147	List queues asynchronously .
1148	Clear all messages for a given queue .
1149	Creates a new message in the specified queue .
1150	Creates a message in the specified queue .
1151	Creates a new queue .
1152	Creates a queue asynchronously .
1153	Deletes a message from a queue .
1154	Deletes a message from the specified queue .
1155	Deletes a queue .
1156	Deletes a queue asynchronously .
1157	Get queue metadata .
1158	Get queue metadata asynchronously .
1159	List all messages in a specified queue .
1160	List messages in a queue asynchronously .
1161	Peek messages from a queue .
1162	Peeks messages in a queue asynchronously .
1163	Generate account shared access signature token .
1164	Validates and sanitizes the signed service .
1165	Validates and sanitizes the signed resource type .
1166	Validates and sanitizes the signed permissions .
1167	Validates and sanitizes the signed protocol .
1168	Sanitize string with array .
1169	Generate canonical resource path .
1170	Parses the error message from the response .
1171	Returns request ID .
1172	Returns the date of the response .
1173	Set the middlewares .
1174	Validates if the value is callable or IMiddleware .
1175	Parses a connection string .
1176	Creates a runtime exception .
1177	Extracts a key from the connection string .
1178	Extracts a string from the current connection .
1179	Skips operator character at the current position .
1180	Creates a new GetShareAclResult object from parsed response body .
1181	Adds additional headers to the request .
1182	Creates a setting requirement .
1183	Creates a setting with the given name .
1184	Check if a specification is matched .
1185	Sets the next row key .
1186	Sets the next partition key .
1187	Process edm type .
1188	Validates an Edm value .
1189	Serialize a value .
1190	Serialize a value for a query .
1191	Unserialize a query value .
1192	Creates a ServiceProperties object from parsed response .
1193	Returns cors rules as array .
1194	Initializes the environment sources .
1195	Parses table entries from the response body .
1196	Returns a JSON representation of the entity .
1197	Parses the response body into an array of entities .
1198	Sets the start date .
1199	Validates permission .
1200	Creates a path to a file .
1201	Gets properties of a file share .
1202	Set share properties asynchronously .
1203	List shares asynchronously .
1204	Creates a share .
1205	Creates a share .
1206	Deletes a file share .
1207	Gets the properties of a file share .
1208	Set share properties .
1209	Set share properties .
1210	Gets the metadata for a share .
1211	Set share metadata .
1212	Set share metadata asynchronously .
1213	Set share ACL for a file .
1214	Set share ACL .
1215	List directories and files .
1216	List directories and files asynchronously .
1217	Creates a directory on the server .
1218	Creates a directory in a share .
1219	Deletes a directory .
1220	Gets the properties of a directory .
1221	Gets the properties of a directory .
1222	Get directory metadata .
1223	Set directory metadata .
1224	Creates a file on the server .
1225	Creates a file in a share .
1226	Deletes a file .
1227	Deletes a file from a share .
1228	Get a file .
1229	Get file asynchronously .
1230	Gets the properties of a file .
1231	Gets the properties of a file .
1232	Set file properties .
1233	Set file properties asynchronously .
1234	Get file metadata .
1235	Set file metadata .
1236	Set file metadata asynchronously .
1237	Put a file range .
1238	Uploads a file range to a file share .
1239	Creates a file from content .
1240	Create file from content .
1241	Clear a range of files in a file .
1242	Sends a Clear File Range request asynchronously .
1243	List file range .
1244	List file range asynchronously .
1245	Aborts a copy .
1246	Aborts a copy of a file .
1247	Sets the batch operation type .
1248	Adds a parameter to the operation .
1249	Construct an array of response objects from a MIME body .
1250	Compares two responses using content ID .
1251	Creates a new batch result .
1252	Get instance attributes .
1253	Serializes an array into an XML string .
1254	Creates a new Response object from parsed response .
1255	Get service properties asynchronously .
1256	Set service properties .
1257	Set service properties asynchronously .
1258	Get service stats asynchronously .
1259	Creates ListQueuesResult from parsed response .
1260	Sets the list of queues .
1261	Tries to get the secondary endpoint from the primary endpoint .
1262	Serialize an array into an XML string
1263	Convert an object to a boolean .
1264	Converts RFC1123 date to DateTime .
1265	Returns a date in ISO 8601 format .
1266	Converts a string to a DateTime object .
1267	Converts base 256 to decimal .
1268	Returns true if every character in the string is zero .
1269	Append a delimiter to a string .
1270	Indicates whether a request was sent to a secondary server .
1271	Returns the location mode value from the given headers .
1272	Calculate content MD5 .
1273	Validates the resource type .
1274	Creates UpdateMessageResult with specified headers .
1275	Creates a new retry instance .
1276	Creates a retry decider for the given type .
1277	General retry decider
1278	Adds an optional query parameter to the query parameters array .
1279	Adds an optional header .
1280	Creates a new GetFileResult instance .
1281	Serialize an array of headers into a string
1282	Serialize a RequestException as a string .
1283	Creates CreateMessageResult from parsed response .
1284	Creates a new InsertEntityResult .
1285	Creates a new QueryEntitiesResult .
1286	Format an array of headers .
1287	Creates new File from parsed response body .
1288	Applies the middleware to the given handler .
1289	Get available includes .
1290	Call include method .
1291	Resolve the includes for the given scope .
1292	Set the error code .
1293	Add data to the request .
1294	Set the error serializer .
1295	Get the error output .
1296	Set the resource .
1297	Set the cursor .
1298	Set the paginator for the resource .
1299	Add relations to the query .
1300	Add relations to the query .
1301	Set the only fields .
1302	Set the serializer .
1303	Transform the resource .
1304	Prepare relations .
1305	Eager load relations .
1306	Returns an array representation of the paginator .
1307	Return an array representation of a cursor .
1308	Merge transformed data with included data .
1309	Bind a transformable to a resource key .
1310	Resolve a transformable item .
1311	Resolve transformable item .
1312	Resolve the transformer .
1313	Render the exception .
1314	Make an error array .
1315	Make an array representation of a resource .
1316	Parse filter options .
1317	Parse fieldsets .
1318	Parse the fieldset .
1319	Resolve child includes .
1320	Register error message .
1321	Resolve error message .
1322	Clean an array of parameters .
1323	Binds a transformer to a transformable .
1324	Resolve a transformer from the given data .
1325	Resolve the transformer for the given transformable .
1326	Register the Laravel service provider bindings .
1327	Register Lumen bindings .
1328	Decorate response factory .
1329	Register serializer bindings .
1330	Register error bindings .
1331	Register Fractal bindings .
1332	Register transformer bindings .
1333	Register transformation bindings .
1334	Bootstrap the Laravel application .
1335	Set the collection of items .
1336	Format an error response .
1337	Get the relations for the query .
1338	Get the default relations .
1339	Extract the relations from the given array .
1340	Extract child relations .
1341	Wrap child relations .
1342	Apply the query constraints on the relations .
1343	Resolve query constraint .
1344	Resolve relation .
1345	Get the transformers for the given relations .
1346	Create a resource instance .
1347	Include a resource .
1348	Include a resource from a model .
1349	Determine if the resource should be cached .
1350	Make a new resource instance .
1351	Make a new resource instance from an existing resource .
1352	Instanciates a resource .
1353	Determine if the data should be created as a collection .
1354	Resolves the resource key .
1355	Add a decorator to the response factory .
1356	Return a JSON response .
1357	Normalize the given data .
1358	Normalize the given relation .
1359	Add a transformer to the response .
1360	Convert an exception .
1361	Convert the default exception .
1362	Render the response .
1363	Create a new transform builder instance .
1364	Configure the terminal .
1365	Adds items to the menu .
1366	Sets the items .
1367	Selects the first item .
1368	Add a custom control mapping .
1369	Removes the control mapping for the given input .
1370	Displays the terminal .
1371	Returns the currently selected item .
1372	Executes the current item .
1373	Redraw the terminal .
1374	Draws the menu .
1375	Draws a single menu item .
1376	Close the menu .
1377	Sets the default selected item .
1378	Checks if the item at the given index can be selected .
1379	Sets the index of the selected item .
1380	Returns the selected item .
1381	Wordwrap a string to a certain width .
1382	Generate coloursSetCode .
1383	Calculate the content width .
1384	Returns the right hand padding .
1385	Sets the border of the table .
1386	Displays the menu .
1387	Calculate the coordinates of the dialogue .
1388	Writes an empty row .
1389	Writes text to the terminal .
1390	Sets the text of the art .
1391	Calculate art length .
1392	Displays the menu .
1393	Get a connection instance .
1394	Make a new connection instance .
1395	Get the configuration for the given connection .
1396	Compress the request body
1397	Check if a rule is set .
1398	Add arguments to the command line
1399	Set command line arguments
1400	Set the getopt options .
1401	Add rules to the parser .
1402	Returns the options as a string .
1403	Returns the options as an array .
1404	Convert the configuration to a JSON string .
1405	Returns the options as XML string .
1406	Returns the value of an option .
1407	Get the usage message .
1408	Sets the aliases for the given flags .
1409	Sets help rules .
1410	Parse the command line arguments .
1411	Parse short option cluster
1412	Parse a single option
1413	Add rules for mode GNU
1414	Add rules mode for Zend
1415	Get the OAuth header .
1416	Get the base string for the request
1417	Prepares the HTTP method .
1418	Set the length of the nonce .
1419	Append OAuth parts to the query string .
1420	Returns a string representation of the query .
1421	Creates a new http client .
1422	Returns the location where the log file should be written to .
1423	Writes the request to the request log file .
1424	Checks if an operation is allowed for an entity .
1425	Prepare reflection .
1426	Returns the XML representation of the object .
1427	Copy a file to the public directory .
1428	Casts the value of a property to a string if it is empty .
1429	Read the configuration from a file .
1430	Initializes the rules for the online API entity .
1431	Populates the json only entities from an XML object .
1432	Initialize the OAuth settings in the IPP configuration .
1433	Initializes the request and response serialization and compression formats from the given XML object .
1434	This method is used to set up the service base URL and the logger for the service .
1435	Get entity by key
1436	Checks if a string is valid XML .
1437	Verify configuration .
1438	Load webhooks classes and return names
1439	Checks if the given string is a valid webhooks class name .
1440	Returns the request options as an array .
1441	Validate an URN
1442	Add a function to the function list
1443	Set the class to use
1444	Set the object
1445	Returns an array of function names .
1446	Sets the persistence mode
1447	Get the SoapServer instance .
1448	Handle a SOAP request
1449	Deregisters a fault exception .
1450	Create a new SoapFault object
1451	Handle PHP errors .
1452	Get OAuth2 Access Token Object
1453	Returns the authorization code URL .
1454	Refresh an OAuth2 Access token
1455	Migrate OAuth1 to OAuth2
1456	Parse the response from the server and return a new OAuth2AccessToken object .
1457	Check if Empty Value Returned
1458	Generate the authorization header .
1459	Construct the refresh token header .
1460	Check the result and throw an exception if any .
1461	Get error message from error code
1462	Convert an object to a domain entity
1463	Serializes a customer object .
1464	Remove null properties from an array .
1465	Add a complex type to the WSDL
1466	Get the WSDL .
1467	Add the bindings to the WSDL
1468	Add the port type to the WSDL
1469	Add types to the WSDL
1470	Add binding operations to the WSDL .
1471	Add operations to the WSDL .
1472	Check if the given type is a local type .
1473	Add services to the WSDL .
1474	Get target namespace
1475	Returns an array of namespaces .
1476	Save classes to a directory .
1477	Load includes from a DOM document .
1478	Returns the XML representation of the XSD document .
1479	Saves generated classes to a directory .
1480	Convert XML namespace to PHP namespace .
1481	Sets the base URL of the application .
1482	Returns the validation period for the refresh token .
1483	Returns the validation period for OAuth 2 access tokens .
1484	Returns the refresh token .
1485	Returns the access token key .
1486	Updates the access token and refresh token .
1487	Get the post xml from an arbitrary entity
1488	Unmarshall XML into PHP Object
1489	Parse the response xml and return an array of php objects .
1490	Set an option on the Curl instance .
1491	Get the version of TLS
1492	Handles an exception .
1493	Verify variable type
1494	Generate object names
1495	Complete a property .
1496	Unmarshall an XML string into a binding object .
1497	Get a serializer for a given service context .
1498	Get the compressor for the given service context .
1499	Get the request logging configuration .
1500	Connect type to strategy
1501	Get default strategy object
1502	Get a strategy object for a complex type .
1503	Add a complex type to the composite strategy
1504	Make reflection for original class
1505	Populates property comments .
1506	Creates a new instance of the model .
1507	Process the values of a property .
1508	Creates an instance of the given type with the given values .
1509	Checks if the given value is a Mohing entity .
1510	Process the value of a property .
1511	Returns the entity for the given index and property name .
1512	Update service context settings for others .
1513	Setup the Rest Handler based on the ServiceContext
1514	Set the log location
1515	Set the minor version of the service .
1516	Disable logging .
1517	Enable logging .
1518	Set the name of the client
1519	Configure the DataService with the given settings .
1520	Configure the OAuth2LoginHelper .
1521	Updates the OAuth2 token .
1522	Setup serializers .
1523	Update an existing entity .
1524	Adds an entity to the collection .
1525	Delete an existing entity .
1526	Upload a file to Ipp
1527	Sends an email to an existing company .
1528	Query the Ipp API .
1529	Append pagination info to the query
1530	Find all records for the given entity .
1531	Creates a CDC for a company .
1532	Execute the object serializer
1533	Initialize the POST request .
1534	Creates a new RequestParameters instance .
1535	Fixes the payload of a tax service .
1536	Get export file name for PDF
1537	Check if entity is allowed
1538	Create a new batch
1539	Converts a string to a timestamp
1540	Checks if a timestamp is a valid timestamp .
1541	Verify that input value is unix timestamp or date string
1542	Get company info
1543	Get rules for the QuickBooks online API entity
1544	Returns the access token from an array
1545	Returns the refresh token from an array
1546	Get redirect URL from settings array .
1547	Saves the content to a file in a directory .
1548	Generate a unique filename .
1549	Generate an error from an OAuth exception
1550	Parse the response from the server
1551	Check if the error body is in the standard format
1552	Set response as it is
1553	Parse response to Intuit Response
1554	Set the fault handler .
1555	Set response headers
1556	Sets the content type .
1557	Set the intuit_tid
1558	Gets the application menu .
1559	Reconnects to the server .
1560	Set the request URI
1561	Set the complex type strategy
1562	Add a binding operation .
1563	Add a documentation to an input node .
1564	Adds the given types to the WSDL .
1565	Add a type to include
1566	Dump the XML to a file .
1567	Add schema type section
1568	Configure the service context from the passed array .
1569	Check if an OAuth token is valid .
1570	Get the base URL for the service .
1571	Sets the serialization format to Xml .
1572	Set the output format to json .
1573	Disable Log .
1574	Set the log location
1575	Update the OAuth2 token .
1576	Get class properties .
1577	Get the result of the query
1578	Sets the URI of the WSDL .
1579	Returns the URI of the request .
1580	Returns the request URI without parameters .
1581	Set the complex type strategy
1582	Add a class to the WSDL
1583	Add a function to the WSDL
1584	Dump autodiscovered contents to a file
1585	Updates the service context
1586	Sends a request to the Ipp API .
1587	Make an OAuth 1 API call
1588	Get OAuth1 Authorization header
1589	Make an OAuth2 API call
1590	Returns the OAuth2 authorization header .
1591	Log an API response to the request logging system .
1592	Log an API request to the request logging system
1593	Parse a string to a DOMDocument .
1594	Resets the request compressor and serializer .
1595	Get the destination URL for the request .
1596	Append the minor version to the request URI .
1597	Check HTTP Method
1598	Parse the given URL into an array of parameters .
1599	Returns the accepted content type .
1600	Convert a query string to an array
1601	Verify that a payLoad is valid .
1602	Encrypt payLoad based on token
1603	Intuit a batch response
1604	Removes a batch request from the batch queue .
1605	Convert an array to a message and code
1606	Iterate a fault and create an exception .
1607	Returns an array of options for the SOAP request .
1608	Set request style
1609	Set message encoding method
1610	Set proxy port
1611	Set SSL client certificate path
1612	Sets the stream context resource
1613	Set the user agent
1614	Perform a SOAP request
1615	Initialize the Zend_Soap_Client object .
1616	Add a SoapHeader to the request .
1617	Get functions from WSDL
1618	Returns the types available in WSDL mode
1619	Get the type name based on nesting level
1620	Adds an element from the WSDL and child types .
1621	Prepare the WSDL .
1622	Add binding operations to the WSDL .
1623	Add port operations to the WSDL .
1624	Create a ref element .
1625	Create element with complex type .
1626	Create a simple element .
1627	Resolves a namespace from a short name .
1628	Parse doc comments
1629	Check if an array is an associate array
1630	Get webhooks event from payLoad
1631	Verify the payload .
1632	Check if a key is in a complex list .
1633	Returns the ReflectionMethod for the given class name and method name .
1634	Returns an instance of the IPPReferenceType based on an array
1635	Get IPPId from array or object
1636	Merges two objects .
1637	Convert an array of headers to an array
1638	Sets the SSL options for the given cURL options .
1639	Converts a header array to an array of headers .
1640	Adds a warning to the sniff class .
1641	Resolve from input .
1642	Sets the tag name .
1643	Scope a query to only include tags with the given name .
1644	Boot the taggable trait for the model .
1645	Tag the model with the given tags .
1646	Remove one or more tags from model .
1647	Add a tag to the model .
1648	Remove a tag from the model .
1649	Check if the model has a given tag .
1650	Scope a query to include all of the tags .
1651	Query scope to restrict the query to records which are tagged .
1652	Return a query scope that includes all of the given tags .
1653	Return a query scope to restrict the query to records that are not tagged .
1654	Rename a tag .
1655	Get a list of popular tags .
1656	Get the fully qualified name of the related pivot key .
1657	Get the fully qualified name of the foreign key for the relationship .
1658	Create a new alias for a taggable scope .
1659	Builds a tag array from a string or array of tags .
1660	Get tag model keys .
1661	make tag list
1662	Make tag array .
1663	Get all tags of a given type .
1664	Get all unused tags .
1665	Renames the tags of the model .
1666	Returns the fully qualified table name of the tag model .
1667	Get the fully qualified table name for a pivot table .
1668	Save compound parameter data .
1669	Builds the query string from the given parameters .
1670	Get the payload for the single parameters .
1671	Get compound parameters payload .
1672	Add an index to a string .
1673	Get debug response
1674	Get the endpoint .
1675	Send hit request
1676	Get the http client options .
1677	Get the URL for the request .
1678	Check if minimum required parameters are present .
1679	Set an action to a parameter .
1680	Set a single parameter .
1681	Add an item to the parameter collection .
1682	Returns the value of a single parameter .
1683	Get index from method arguments .
1684	Returns the full name of the parameter class .
1685	Send a POST request to the Google Analytics API .
1686	Parse request options .
1687	Returns a list of items that can be read .
1688	Add a supported brand .
1689	Sets the year parameter .
1690	Validate the credit card
1691	Returns the number masked with the given mask .
1692	Returns the brand of the phone number .
1693	Get a single track by pattern .
1694	Get first and last name from full name .
1695	Set the billing name .
1696	Sets the shipping name .
1697	Returns the birthday .
1698	Sets the birthday .
1699	Initializes the request .
1700	Sets a request parameter .
1701	Sets the card .
1702	Returns the amount of the payment .
1703	Sets the amount of the payment .
1704	Sets the currency .
1705	Returns the currency numeric code .
1706	Returns the number of decimal places for the currency .
1707	Format an amount as a currency number .
1708	Replaces the collection with the given items .
1709	Validates that the response supports redirection .
1710	Convert a string to camelCase .
1711	Validate Luhn number .
1712	Returns gateway short name .
1713	Get gateway class name .
1714	Get the fixed query builder .
1715	Returns the parent metadata for the given property .
1716	Returns the pager for the given type .
1717	Returns the parent alias for the given alias .
1718	Adds an object to the collection .
1719	Finds a resource by IDType .
1720	Authenticates a user with a password
1721	Set the parent application ID of the customer .
1722	Set Credit Card Info
1723	Get credit card info
1724	Adds a new resource class to the list
1725	Find an employee by ID
1726	Sets the signature method to use .
1727	This function is called when an error occurs in the QuickBooks API .
1728	This method is called when a user is logged in and the user is logged in
1729	Check if a path is repeatable .
1730	Check if a path exists
1731	Reorders paths based on an unordered list of paths
1732	Call a function .
1733	Call static method
1734	Find a customer by name
1735	Set the ApplicationID of the Class .
1736	Returns the bill address .
1737	Set the ship method application ID .
1738	Set the payment method application ID
1739	Generates the schema for a field .
1740	Returns the child at the given path .
1741	Adds a child at a given path .
1742	Returns the children of this node optionally filtered by a pattern .
1743	Remove an attribute from the element .
1744	Returns the XML representation of a node .
1745	Converts this object to an array .
1746	Helper function used by _asArrayPaths .
1747	Returns the XML representation of the object .
1748	Saves the root node as JSON .
1749	Truncate a string to a certain length
1750	Decode a string from UTF - 8
1751	Parse a DSN
1752	Extracts the request ID from an XML string .
1753	Parse the request ID into action and ident .
1754	Check if a remote address matches a CIDR
1755	Creates a new user in QuickBooks
1756	Disable a user
1757	Generate unique hash
1758	Checks to see if a book exists in the database .
1759	Initializes a QuickBooks_Driver
1760	Returns true if the driver is initialized .
1761	Returns a list of all defined objects
1762	Returns an array of all defined actions
1763	Escapes a string for use in a query
1764	Generates the config file .
1765	Creates a QBwc instance .
1766	This method is used to add a customer to a request .
1767	This method is used to add a response to a customer .
1768	This function is used to catch all validation errors .
1769	Queues a user for processing
1770	Enqueue an action for a user .
1771	Dequeue a user from the queue .
1772	Queues a user to be left
1773	Queues a report for processing
1774	Queues a ticket for processing .
1775	Log an error .
1776	Returns the last error message received from the server
1777	Resolve an authentication ticket .
1778	Authenticates a user .
1779	Authenticates and logs out a user .
1780	Creates a new authenticated user .
1781	Initializes the QuickBooks_Driver .
1782	Called after the driver has been initialized .
1783	Log a message with optional ticket
1784	Calls a hook
1785	Connects to an OAuth provider .
1786	Sets default configuration values .
1787	Handle recurring events .
1788	Extract the identifiers from an XML response .
1789	Extracts the status code from the response .
1790	Extracts the status message from the response .
1791	Calls the mapped function
1792	Calls a specific hook .
1793	Handles an error .
1794	Enqueue an action to the queue
1795	Finds an item by name
1796	Checks if a string starts with another string .
1797	Execute an SQL query .
1798	Extract the content of a tag from a string
1799	Extract tag attributes from a string
1800	Encode a string .
1801	Decode a string
1802	Check if a user is logged in
1803	Load an access token from the server .
1804	Handle the request
1805	Gets the widget menu
1806	Maps an XML schema to an SQL definition .
1807	Transform a schema node into a schema array
1808	Sets a value in the object
1809	Get a value from the object .
1810	Set a full name type .
1811	Sets a boolean type .
1812	Set date type
1813	Get date type
1814	Remove an item from the collection .
1815	Returns a schema object for a given request .
1816	Returns the object as an XML node .
1817	Check if all required tables are present
1818	Adds a new recipient to the subscription list .
1819	Returns the user s name .
1820	Sets the name of the person as first and last name .
1821	Returns an array of sql defaults .
1822	Returns the status of a connection .
1823	Deletes a payment order
1824	Read data from a file or stream .
1825	Loads an XML document from a file .
1826	Parses the XML content .
1827	Returns the response as a QBXML object .
1828	404 Not Found error handler
1829	Resolve a ticket id
1830	Write a config value
1831	Read a value from a module config table
1832	Create a new user in the auth table .
1833	Return the default username .
1834	Authenticates a user
1835	Check if a ticket is valid and if so update it .
1836	Update lasterror_num lasterror_msg and ticket_id
1837	Enqueue a new recur
1838	Dequeues a user from the queue .
1839	Enqueue an action in the queue
1840	Check if the queue is still processing
1841	Returns the number of left items in the queue
1842	Get the number of processed items for a ticket .
1843	Log a message to the log table
1844	Execute an SQL query and return the number of affected rows
1845	Returns the names of all fields in a table .
1846	Select rows from a table
1847	Update a row in a table
1848	Enqueue interactive mode
1849	Enqueue a recurring action
1850	Returns the number of items left in the queue .
1851	Returns the address of the message .
1852	Authenticates the user using the username and password
1853	Find a company by ID
1854	Deletes a VendorCredit object
1855	Sends a request to the QuickBooks API
1856	Signs on a QBMS application
1857	Generate a transaction request ID
1858	Refund a credit card
1859	Initializes the queue
1860	Creates a new instance of an adapter .
1861	Merge the array with the default values
1862	Set the response headers .
1863	The index action .
1864	Creates a new request object
1865	Parses a raw HTTP request and returns the response .
1866	Apply a callback to each element of the collection .
1867	Charge an amount or token
1868	Gets a charge
1869	Gets a debit transaction
1870	Refund a Payment
1871	Stores a credit card
1872	Store a credit card from a token
1873	Gets a credit card from a credit card ID
1874	Returns a list of credit cards for a given credit card ID
1875	Deletes a card
1876	Handles an error response .
1877	Creates an HTTP request .
1878	Helper function to map IDs to QuickBooks .
1879	Applies a function to the application ID and returns the result .
1880	Makes an add request to the shipment method
1881	Filters an array of actions according to their priority
1882	Check if the required version is greater than the current version .
1883	Sends a ListDeletedQueryRequest to the QuickBooks API .
1884	Parses a ListDeletedQueryResponse message from a QBXML response .
1885	Performs a Transaction void request .
1886	Implements the TxnVoidResponse interface .
1887	Creates a SalesReceipt Modification Request .
1888	Adds a job type request .
1889	Builds the SQL filter for a sync action
1890	Flushes all caches in a group .
1891	Flush cache by tags and groups .
1892	Find a command by name .
1893	Runs the plugin .
1894	Checks if the localconf file for the given extension can be loaded .
1895	Checks if an extension can be loaded .
1896	Loads the local configuration for an extension .
1897	Loads the ext_tables for an extension .
1898	Ensure that the TYPO3 installation is possible .
1899	Executes all scheduled tasks .
1900	Executes a single task .
1901	Migrate a set of SQL statements .
1902	Lock backend for editing access
1903	Unlock backend for editors
1904	Create a new admin user
1905	Returns a list of available upgrade wizards .
1906	Generate the package states . php file
1907	Fix the folder structure
1908	Setup extension if possible
1909	Executes an action with the given arguments .
1910	Create a new console command from composer run .
1911	Create a command runner from a command - line run .
1912	Creates a new console process .
1913	Executes a command and returns the output .
1914	Handles an exception .
1915	Creates a new upgrade wizard .
1916	Word - wrap a string .
1917	Request the specified URL
1918	Make an absolute URL .
1919	Check if all extensions claim to be compatible with TYPO3 version
1920	List the wizards .
1921	Execute a wizard .
1922	Execute TYPO3 upgrade
1923	Sub process upgrade command .
1924	Check if an extension is compatible .
1925	Setup the extensions for the given packages .
1926	Get the structure .
1927	Get extension structure .
1928	Creates extension structure definition for given packages .
1929	Generates the XML for the given class name .
1930	Adds the attributes of the given class to the given xsd element .
1931	Add a documentation element to the xsd parent node .
1932	Resolves the command method name .
1933	Maps the request arguments to the controller arguments .
1934	Call the command method .
1935	Creates a default logger instance .
1936	Returns the short description of the command
1937	Parses the command definition .
1938	Returns the synopsis .
1939	Removes a step from the sequence .
1940	Invokes the start steps .
1941	Invokes a step .
1942	Setup extensions for the given packages
1943	Setup the active packages .
1944	Remove inactive packages
1945	List all installed extensions
1946	Removes all cache tables from the database .
1947	Handles PHP errors .
1948	Register the install script .
1949	Asks the user to select a value .
1950	Asks a question .
1951	Asks a confirmation .
1952	Asks a question to the user and returns the response .
1953	Asks a question and validates it .
1954	Asks a question to the user and validates the response .
1955	Execute the console command .
1956	Write a log record to the output .
1957	Get the number of performed update types .
1958	Add a set of performed updates for a given schema update type .
1959	Add errors for a given schema update type .
1960	Remove a value from the system configuration
1961	Show the configuration for a given path
1962	Show the active configuration for a path
1963	Show a local configuration
1964	Set a value for a path
1965	This is called after the extension is installed .
1966	Enqueue a flash message .
1967	Copies the source file to the target path .
1968	Generate the XSD schema
1969	Initializes the package management .
1970	Override the default implementation of an object .
1971	Registers an extension implementation .
1972	Sets a local configuration value .
1973	Converts a value to the target type .
1974	Returns the type of the given path .
1975	Checks if the given type is convertible .
1976	Check if a command is available .
1977	Configures the command .
1978	Executes the command .
1979	Ensure required environment .
1980	Initializes the compatibility layer .
1981	Handles the command .
1982	Renders an exception .
1983	Output an exception .
1984	Output the exception trace .
1985	Returns the possible shortened file name .
1986	Display an error message
1987	Import MySQL command .
1988	Executes a command in a sub process .
1989	Output schema update results
1990	Render imported static data results .
1991	Update the schema based on a set of schema update types .
1992	Builds the sequence for the given run level .
1993	Builds the essential sequence .
1994	Build the basic runtime sequence .
1995	Flush all caches for a group
1996	Flush caches by tags and groups
1997	List cache groups
1998	Hydrates the dictionary .
1999	Add the trace to the collector .
2000	Retrieve the number of files matching the given regex .
2001	Convert an array to a JSON string .
2002	Returns the transaction description .
2003	Returns the access token .
2004	Check if token has expired
2005	Sets the start time .
2006	Sets the end time .
2007	Get all issues for a specific type .
2008	Run the application .
2009	Normalize and truncate a path .
2010	Sends a red message to STDERR and exits the script .
2011	Divides an array of tokens by commas .
2012	Trims spaces from an array of tokens .
2013	Call a function usage checker .
2014	Adds a record to the record list .
2015	Check if colors are capable
2016	get windows terminal size
2017	Tries to locate the class or function for the given identifier .
2018	Tries to locate a class by name .
2019	Locates a function by name .
2020	Opens a stream .
2021	Returns information about a URL .
2022	Compiles a const fetch node into a PHP constant .
2023	Compiles a class constant fetch .
2024	Compute the reflections for the given file .
2025	Checks if the given line number is contained in the given reflection .
2026	Returns an array of all class identifiers .
2027	Creates a new reflection object from a class name and property name .
2028	Creates a new instance from a class instance .
2029	Returns the string representation of the docblock types .
2030	Find all reflections of the given type for the given reflector .
2031	Finds a reflection in an array of reflections .
2032	Creates a new instance from a class name and a method name .
2033	Creates a new instance from class instance and method name .
2034	Creates a ReflectionParameter from a closure .
2035	Returns true if the node allows null .
2036	Returns the type of the value .
2037	Sets the type of the parameter .
2038	Returns all functions .
2039	Creates a method from class name and method name .
2040	Creates a method from an instance .
2041	Returns the prototype of the method .
2042	Checks if the method is a constructor .
2043	Exports a class to a string .
2044	Creates a new class from a class - like node .
2045	Returns all methods of the class .
2046	Returns all methods indexed by name .
2047	Checks if the class has a method with the given name .
2048	Returns the value of a constant .
2049	Returns the first constructor of the class .
2050	Returns the properties of the class including traits .
2051	Returns the parent class of the current class .
2052	Returns an array of parent class names .
2053	Returns an array of traits used by this class .
2054	Reflect a class for a named node .
2055	Checks if the given object is an instance of this class .
2056	Returns true if the class is subclass of the given class .
2057	Returns whether the class implements the given interface .
2058	Returns whether the class is instantiable .
2059	Returns whether the object is cloneable .
2060	Get the interfaces hierarchy .
2061	Sets the value of a static property .
2062	Sets the final modifier of the class .
2063	Removes a method from the class .
2064	Adds a method to the class .
2065	Adds a property to the class .
2066	Removes a property from the class .
2067	Checks if the given reflector is matching the identifier .
2068	Exports an instance to a string .
2069	Create a ReflectionClass from an object
2070	Get the runtime properties of the class .
2071	Creates a property node from reflection .
2072	Populates the function abstract .
2073	Sets the node optional flag .
2074	Returns the number of required parameters .
2075	Returns the parameters of the method .
2076	Returns the parameter with the given name .
2077	Returns whether the method has variadic parameters .
2078	Sets the return type of the function .
2079	Returns the body code .
2080	Get the return statements AST .
2081	Locates all identifiers for the given reflector and identifier type .
2082	Creates a new reference from a node .
2083	Returns the value of the constant .
2084	Returns the modifiers of the property .
2085	Generates the documentation for a class .
2086	Formats the doc .
2087	Extract all properties from the graphs .
2088	Extract the cardinality for a property .
2089	Check if the type is an enum .
2090	Create properties map .
2091	Convert a namespace to a directory path .
2092	Fixes the given files .
2093	Check if a relation exists .
2094	Extract the cardinality of a label .
2095	Returns the property URL .
2096	Returns the PHP type of a field .
2097	Get relation name .
2098	Finishes writing the current file .
2099	Flushes the file .
2100	Add a new item to the list .
2101	Add single language item .
2102	Add a multi language item .
2103	Get sitemap urls
2104	Sets whether the sitemap should be gzipped .
2105	Add a sitemap .
2106	Writes data to the output stream .
2107	Finishes the current deflate .
2108	Finishes the archive .
2109	Sets the expiration date .
2110	Sets the parameters for the key .
2111	Set the parameters for a sub - key .
2112	Returns the key usage string .
2113	Create a new user id .
2114	Parses a string into a Crypt_GPG_UserId object .
2115	Check if the process is running .
2116	Terminate the process .
2117	Sets the operation .
2118	Handle an error .
2119	Set error code
2120	Sets the value of a data variable .
2121	Handles a bad pass exception .
2122	Get passphrase from key
2123	Returns the hash algorithm name .
2124	Set whether or not to sign the message .
2125	Set whether or not to encrypt the data .
2126	Parses a string into a Crypt_GPG_SubKey object .
2127	Parses a date string into an integer .
2128	Delete a public key
2129	Get the fingerprint of a key .
2130	Encrypts data .
2131	Encrypt a file
2132	Encrypt and sign a string
2133	Encrypt and sign a file
2134	Decrypt and verify data .
2135	Decrypt and verify a file
2136	Sign a file
2137	Add a key to the list of keys to be decrypted
2138	Add an encrypt key .
2139	Add a sign key .
2140	Add a key to the array .
2141	Import a secret key
2142	Exports a key .
2143	Decrypt and verify the data .
2144	Prepares the input data .
2145	Prepare the output file .
2146	Get a list of public and secret keys
2147	Sends a command to the pipeline .
2148	Reset the state of the process .
2149	Run the process .
2150	Sets the operation to be executed .
2151	Sets an array of keys to the environment variable .
2152	Get the version of the crypt_gpg binary
2153	Returns the data of a process .
2154	Set process data
2155	Close a subprocess .
2156	Close GPG - Agent LAUNCH PROCESS
2157	Close a pipe .
2158	Close idle agent processes .
2159	Find a binary by name .
2160	Returns the path to the crypt - gpio - pinentry .
2161	Print debug text .
2162	Returns the primary key .
2163	Returns true if the key can be signed .
2164	Returns whether or not the key can be encrypted .
2165	Sets the filename of the log file
2166	Write data to the log file .
2167	Connect to the pinentry server
2168	Parses a command line .
2169	Initialize passphrases from environment variables
2170	Disconnect from the server .
2171	Send description message
2172	Send the get pin command
2173	Send info command .
2174	Encode the data .
2175	Get word wrapped data .
2176	Send data to the console .
2177	Builds an array of messages from the given translations .
2178	Sets the comment before headers .
2179	Add a line to the lines array .
2180	Get main file data .
2181	Extract the strings from the main file
2182	Get the file comment .
2183	Set default headers .
2184	Get file data from file .
2185	Get file data from a string .
2186	Resolves the callee of an expression .
2187	Checks if a comment preceeds a node .
2188	Calculate the score for a given file .
2189	Returns true if the given directory contains any of the given matchers .
2190	Get files from a directory .
2191	Convert a po file to a json file
2192	Build json files .
2193	Remove js strings from a po file
2194	Mark a set of updates as successful .
2195	Mark all updates as successful .
2196	Set successful status by hook .
2197	Check list points .
2198	Check all list points .
2199	Save progress .
2200	Renders the profile .
2201	Generate config hash from database .
2202	Compare a config hash with the database hash .
2203	Imports a config file .
2204	Import configs .
2205	Install modules .
2206	Check link .
2207	Check if link is active .
2208	Go to the front page with a message .
2209	Get file .
2210	Get items from data .
2211	Returns the total number of items in the result set .
2212	Prepare string for like comparison .
2213	Set the data .
2214	Resolves the type .
2215	Resolves options for the given type .
2216	Renders a grid .
2217	Renders a grid cell .
2218	Get the filter for a grid column .
2219	Get grid column operator .
2220	Check if a template has a block .
2221	Walks down a SelectStatement AST node .
2222	Set the source .
2223	Check if request is ready for redirect
2224	Process request data
2225	Process mass actions .
2226	Process export data .
2227	Process filters .
2228	Process session data
2229	Prepares the result set .
2230	Set a value in the session .
2231	Get a column by its id .
2232	Checks if the table has a column with the given id .
2233	Sets the order of columns .
2234	Add mass action
2235	Add a new tweak .
2236	Get all tweaks .
2237	Get a single tweak by its identifier .
2238	Get all tweaks for a given group .
2239	Add a row action
2240	Set request query template
2241	Add export .
2242	Get the route url .
2243	Sets the filters .
2244	Sets the number of allowed limits .
2245	Returns the number of pages .
2246	Sets the maximum number of results .
2247	Check if title section is visible
2248	Check if filter section is visible .
2249	Checks if the pager section is visible .
2250	Set the columns to be shown .
2251	Hide columns .
2252	Get grid response .
2253	Get raw data .
2254	Get filters from session .
2255	Get a filter from the session .
2256	Check if a column has a filter .
2257	Initializes the query builder .
2258	Render a cell .
2259	Returns whether the item is visible or not .
2260	Sets the order .
2261	Set column size
2262	Sets the query data .
2263	Returns the data to be used in the query .
2264	Set the alignment .
2265	Returns an array of operators to be applied to the query .
2266	Add a column at a given position .
2267	Sets the order of columns .
2268	Add parameters to the route .
2269	Get route parameters mapping .
2270	Renders the row .
2271	Add a type .
2272	Add column .
2273	Sets the container .
2274	Returns the response .
2275	Get grid data .
2276	Get grid data as a flat array .
2277	Set the template to use .
2278	Returns the parameter with the given name .
2279	Returns a list of actions to be rendered .
2280	Clear the collection .
2281	Adds an item to the cart .
2282	Remove an item from the collection
2283	Returns an array of items .
2284	Login to the OpenID server .
2285	Get user information .
2286	Get or set the remember user .
2287	Callback function .
2288	Returns the length of a string
2289	Returns a portion of a string .
2290	Convert a string to lower case .
2291	Convert a string to uppercase .
2292	Create a function mock .
2293	Register for tear down .
2294	Defines a function mock .
2295	Display a flag view .
2296	Get the country code .
2297	Get a code by name .
2298	Get the long language code .
2299	Get locale name .
2300	Set the locale .
2301	Redirect to the home page .
2302	Redirect to the previous page .
2303	Set the locale .
2304	Returns the index where the callable returns true .
2305	Removes the element at the given index from the set .
2306	Returns a new collection with the elements from the beginning of the collection that pass the truth test
2307	Set the authentication credentials .
2308	Set the OAuth token
2309	Send a message .
2310	Connect to the SMTP server .
2311	Start a TLS connection .
2312	Authenticates the user using AUTH LOGIN
2313	Authenticates the OAuth Bearer token .
2314	Authenticates the user using X - OAuth2 .
2315	Send the RCPT TO command .
2316	Send the DATA command
2317	Send QUIT command
2318	Get the code from the server
2319	Sets the email address of the sender .
2320	Set fake from name and email .
2321	Finds a file by class name .
2322	Finds the file for the given class .
2323	Loads a collection of classes .
2324	Fixes namespace declarations .
2325	Write cache file .
2326	Returns a list of classes ordered by priority .
2327	Adds multiple prefixes at once .
2328	Adds a list of paths to a given prefix .
2329	Finds the file for the given class .
2330	Parses the text and returns the markup .
2331	Detect the line type .
2332	Parse a block .
2333	Get inline markers .
2334	Prepare inline markers .
2335	Parse inline text .
2336	Parse Emph Strong .
2337	Check if the given line is an HTML tag .
2338	Consumes HTML from the given lines .
2339	Determines if a line is a fenced code .
2340	Identify if the current line is a headline .
2341	Consume a headline .
2342	Replace escape characters in a string .
2343	Parse link .
2344	Parse link or image .
2345	Parse inline code .
2346	Consume code .
2347	Identify if a line is a UL line .
2348	Render a list block
2349	Consume quote block .
2350	Consume a reference .
2351	Render the headline .
2352	Parse strike .
2353	Determines if the current line is a table .
2354	Consume a table .
2355	Render a table .
2356	Parse a link and return the length of the text .
2357	Checks if the subject is equal to the given name ID and format .
2358	Creates a new element in the given document .
2359	Create a new element with text .
2360	Validates an array of images .
2361	Check for empty value .
2362	Check for illegal csv property keys .
2363	Creates a new exporter instance .
2364	Adds a value to the property .
2365	Validates the document using the XSD .
2366	Adds a new name .
2367	Add a summary .
2368	Adds a description .
2369	Adds a price to the cart .
2370	Add bonus .
2371	Add sales frequency .
2372	Add date added .
2373	Add sort .
2374	Validates the value .
2375	Returns the hook file contents .
2376	Sets a symlink for a hook .
2377	Set a hook .
2378	Removes a hook .
2379	Returns the number of commits .
2380	Returns the reference bag .
2381	Returns the commit object for the given hash .
2382	Returns the tree for the given hash .
2383	Returns the blob with the given hash .
2384	Returns a Log instance .
2385	Get the size of the repository .
2386	Execute git shell command .
2387	Returns the description of the repository .
2388	Run a command .
2389	Create a clone to the given path .
2390	Returns the parents of this commit .
2391	Returns a short version of the subject message .
2392	Returns a list of branches including the current revision .
2393	Initializes a repository .
2394	Check if a repository is valid .
2395	Clone a repository to a new location .
2396	Clone a branch to a remote repository .
2397	Clones a repository .
2398	Returns an array of lines grouped by commit
2399	Returns the number of lines in the file .
2400	Returns the reference with the given name .
2401	Returns all Branch references .
2402	Returns all local branches .
2403	Get remote branches .
2404	Returns the content of the file .
2405	Returns the mime type of the file .
2406	Return an array representation of this diff .
2407	Parses the given text into a fragment .
2408	Write a query as a formatted SQL query .
2409	Write a column name .
2410	Creates column objects from an array of arguments .
2411	Creates a new column from an argument array .
2412	Creates a new table instance .
2413	Get the SQL representation of this object .
2414	Boot the cached model for Eloquent .
2415	Stores the cache key for a model .
2416	Get cache keys .
2417	Flushes the cache keys for a given model .
2418	Forget all cache entries .
2419	Reset cache config .
2420	Generate the cache key .
2421	Cache a query .
2422	Validates an HppRequest
2423	Validates the response .
2424	Add auto settle flag
2425	Add return TSS flag
2426	Add validate card only flag
2427	Add DCC Enable flag
2428	Add card storage enable flag .
2429	Add offer save card flag
2430	Add payer exists flag
2431	Add HPP version .
2432	Generate default values .
2433	Base64 encode the transaction .
2434	Decode the transaction data .
2435	Base64 encode the transaction
2436	Decode the transaction data .
2437	Get field config rules .
2438	Unpacks deferred results into an array .
2439	Resolve a deferred value .
2440	Convert a cursor string to a key
2441	Returns the offset of a cursor string or a default value if it is not found .
2442	Compile list node .
2443	Creates JSON - RPC request data .
2444	Get all sentences from the response .
2445	Splits text into multiple sentences .
2446	Detects the language of the given text
2447	Returns the language codes .
2448	Returns the defaults for this table .
2449	Cache a row .
2450	Get cached row .
2451	Check if an offset exists .
2452	Returns the row at the given offset .
2453	Set the row at the given offset .
2454	Unset an item from the collection
2455	Returns the join field for the given table .
2456	Delete the record from the database .
2457	Returns the class name for the given name and type .
2458	Sets a configuration value .
2459	Get field factory
2460	Creates a PDOStatement and executes it .
2461	Executes a callable in a transaction .
2462	Begins a transaction .
2463	Check if data is valid .
2464	Check if a value is set .
2465	Edit an array of values .
2466	Delete the record from the database .
2467	Relate this row with another row .
2468	Unrelate a row from this row .
2469	Unrelate the model from all tables .
2470	Creates a select object for the given table .
2471	Get value name .
2472	The list of quota limits .
2473	Optional . The rules associated with the metric .
2474	Optional . The destination of the producer .
2475	Optional . The logging destination to use for the consumer .
2476	The list of advices .
2477	The endpoints that match the request .
2478	Output only . The log descriptors .
2479	The list of metrics that match the request .
2480	List of field violations .
2481	The list of operations .
2482	The view of the role .
2483	The permissions to include in the request .
2484	The launch stage of the role .
2485	Optional . The list of billing destinations that match the request .
2486	The list of extensions that match the request .
2487	The list of authentication providers .
2488	Optional . The list of requests that match the request .
2489	Optional . The list of provided values .
2490	Bounds of the image .
2491	The role to create .
2492	List of subpages .
2493	The list of key types that match the request .
2494	Optional . The recipients of the message .
2495	The list of stack entries .
2496	Optional . The MonitoringDestination to create .
2497	Optional . The list of destinations that match the request .
2498	Required . The authorization requirements .
2499	The list of bindings .
2500	The metric costs .
2501	The pages that match the request .
2502	The action to perform .
2503	The list of source files .
2504	The service account keys .
2505	The accounts that match the request .
2506	The custom roles support level .
2507	The policy delta .
2508	The exemplars for the distribution .
2509	Optional . The list of features that match the request .
2510	The list of properties that match the request .
2511	The quota failure violations .
2512	Optional . The type of private key .
2513	The key algorithm to use for the service account .
2514	Optional . The details of the operation .
2515	The list of binding deltas .
2516	The type of public key .
2517	The roles to create .
2518	The system parameters .
2519	Returns the full path to the cache file
2520	Check cache conditions
2521	Check if a cache file exists
2522	Sets the contents of a cache file
2523	Returns the contents of a cached file
2524	Get or create cache file
2525	Checks if a blog is installed .
2526	Installs WordPress .
2527	Converts a network to a multisite .
2528	Installs a single multisite network .
2529	Displays the version of WP .
2530	Get core checksums .
2531	Updates the database .
2532	Get the download URL .
2533	Get updates from API .
2534	Download a package .
2535	Upgrade to a new version .
2536	Build a table from an array .
2537	Admin head .
2538	Move meta box after title .
2539	Get the post type .
2540	Get the title of the box .
2541	Render meta box .
2542	Setup the meta box .
2543	Get meta data .
2544	Setup file path and class name .
2545	Setup meta data .
2546	Check if the plugin is disabled .
2547	Factory method to create a property object .
2548	Get a child property .
2549	Get an option value .
2550	Get the ID of the current post
2551	Returns the HTML ID for this field .
2552	Get the HTML name for a property .
2553	Check if the given slug matches the current slug .
2554	Prepare the value for output .
2555	Display the is_allowed_by_rules conditional .
2556	Set an option .
2557	Set a setting .
2558	Setup properties .
2559	Setup options .
2560	Setup options slug .
2561	Setup options settings .
2562	Edit attachment form fields .
2563	Save attachment meta
2564	Check if the entry type is a singleton .
2565	Get property meta value .
2566	Format the value .
2567	Get a property .
2568	Load meta value .
2569	Factory method to create a store instance .
2570	Get property option .
2571	Check if the widget can be rendered .
2572	Render the table row .
2573	Render the hidden field .
2574	Render the label html .
2575	Render the table row .
2576	Render the rules as JSON .
2577	Get the field value .
2578	Decode a property .
2579	Get post data .
2580	Get the pre - deep keys and value from an array .
2581	Prepare post data .
2582	Prepare properties data .
2583	Santize data .
2584	Delete an item from the cache .
2585	Returns the name of the function that should be used for the current request .
2586	Get value by id and slug .
2587	Update an item .
2588	Update the cache for the given id .
2589	Get diff between two revisions .
2590	Add hidden meta boxes .
2591	Load a new post .
2592	Add the papi - iframe - mode to the post s location .
2593	Setup post types .
2594	Rename a post s meta key .
2595	Get field slug .
2596	Get the source object .
2597	Setup source .
2598	Setup the rule .
2599	Setup admin interface .
2600	Add admin body classes .
2601	Render the page type field after the title .
2602	Get entry type
2603	Add plugin row meta .
2604	Update front - page .
2605	Add the page type name to the query results .
2606	Get a list of templates for a given meta id .
2607	Prepare the value to be loaded .
2608	Save option properties .
2609	Render metabox .
2610	Save a post .
2611	Overwrite post data .
2612	Pre save meta data .
2613	Save meta boxes .
2614	Save meta data for a given revision .
2615	Save the properties of a post .
2616	Restores a post s revision .
2617	Check if the post ID is valid .
2618	Display validation rules .
2619	Display conditional rules by relation .
2620	Get the rule slug .
2621	Prepare conditional rules .
2622	Check if the current user is allowed to use this post type .
2623	Get the body classes .
2624	Get the child types of the page .
2625	Get labels .
2626	Get post type supports .
2627	Remove post type support .
2628	Remove meta boxes .
2629	Setup the plugin .
2630	Setup post type .
2631	Setup page templates .
2632	Add mce buttons filters .
2633	Remove mce_buttons filter .
2634	Parse the row results .
2635	Load the value for a repeater .
2636	Prepare the properties .
2637	Prepare a property for JSON .
2638	Remove all rows from the repeater table .
2639	Render the JSON template .
2640	Render the header for the repeater .
2641	Render the repeater rows .
2642	Register all option properties .
2643	Get the value of a setting .
2644	Prepare the response .
2645	Returns the value of the field .
2646	Get the list of users that have the required capabilities .
2647	Initialize the plugin .
2648	Load the papi textdomain .
2649	Require files for PAPI .
2650	Deactivate Papi plugin .
2651	Returns true if there are strings in the list .
2652	Prepare the properties for rendering .
2653	Get attachment ID .
2654	Get file meta value .
2655	Update file values .
2656	Bind a value to an identifier .
2657	Call a closure .
2658	Get the class prefix .
2659	Check if the given identifier is a singleton .
2660	Get a value from the container if it does not already exist .
2661	Removes an entry from the map .
2662	Override labels for a given entry type .
2663	Add page items menu .
2664	Create the post type menu .
2665	Render the page view
2666	Autoload a class .
2667	Get all registered sidebars .
2668	Get labels .
2669	Parse post and term arguments .
2670	Parse the post type and page type arguments .
2671	Parse term arguments .
2672	Get query args .
2673	Execute the query and return the result .
2674	Add help tabs to the current screen .
2675	Add a new box .
2676	Call the parent register method .
2677	Convert an array of properties to an array of property types .
2678	Get the body classes .
2679	Get all boxes .
2680	Get a property .
2681	Get the list of properties .
2682	Merges the given boxes into a single array .
2683	Setup plugin .
2684	Create a tab .
2685	Load the value of the link .
2686	Prepare a link array .
2687	Update the value of a link field .
2688	Check if a taxonomy is allowed .
2689	Edit form .
2690	Register page properties for a post .
2691	Prepare the response .
2692	Setup the page type fields .
2693	Get the format arguments .
2694	Render a file .
2695	Get an option by key .
2696	Convert property value .
2697	Returns the converted value of the rule .
2698	Get the deep value for a field .
2699	Get value for conditional rule .
2700	Returns true if the value of the rule is equal to the value of the rule .
2701	Returns true if the value of the rule is not equal to the value of the rule .
2702	Checks if the value of the rule is greater then the value of the rule
2703	Check if the value of the rule is not in the array .
2704	Returns true if the value of the rule is like the given value .
2705	Get the between values of a rule .
2706	Check if a value is between a range of values .
2707	Returns true if the value of the rule is not between the values of the range .
2708	Get the sort option data .
2709	Get the sort options .
2710	Get a list of posts based on settings .
2711	Sort the values based on the sort option .
2712	Update a value .
2713	Get meta type value .
2714	Lists all Papi entry types .
2715	Generate the HTML for the tabs .
2716	Get the json id .
2717	Get a specific layout .
2718	Load the value for a repeater .
2719	Prepare the layout properties .
2720	Render the layout input .
2721	Render the repeater row .
2722	Add the form fields for the page type .
2723	Prepare taxonomy types .
2724	Setup taxonomies hooks .
2725	Generate the ajax url .
2726	Handle AJAX requests .
2727	Get entry type .
2728	Get a list of posts .
2729	Get property .
2730	Get properties from the post .
2731	Get rules result .
2732	Get the shortcode .
2733	Get a list of terms .
2734	Gets a term s properties .
2735	Renames a term .
2736	Manage page type posts columns .
2737	Manage page type posts custom column .
2738	Manage page type sortable columns .
2739	Pre - get posts .
2740	Restrict page types .
2741	Format the value .
2742	Get taxonomy labels .
2743	Get the terms for a given taxonomy .
2744	Get the value of a term .
2745	Prepare the value .
2746	Search for a given search term .
2747	Get historical data .
2748	Returns the quote with the given symbol .
2749	Returns the exchange rate between two currencies .
2750	Returns the exchange rates for the given currency pairs .
2751	Fetch quotes from Yahoo Finance API .
2752	Get the header attributes .
2753	Render the cell .
2754	Render appends .
2755	Get all image objects .
2756	Set the parameters to include in the query .
2757	Set default values for all items .
2758	Returns the value of the property of the model .
2759	Make a form group .
2760	Wrap the content with the error template .
2761	Wraps a form group in a div .
2762	Add a class to the options .
2763	Register admin routes .
2764	Register assets routes .
2765	Register auth routes .
2766	Adds a process to the testcase .
2767	Get processes with the given status .
2768	Builds the testcase tree .
2769	Optimize the order of processes .
2770	Returns the number of process statuses .
2771	Counts the number of results in the process .
2772	Fail the dependencies of the given class .
2773	Get the dependency tree for a given class .
2774	Output the output to the console .
2775	Output an error message .
2776	Initialize the command .
2777	Returns the version of the application .
2778	Returns the file url .
2779	Downloads the file .
2780	Selects the first result with the given partial text .
2781	Save data to file with given name .
2782	Saves the data to the database .
2783	Loads a rule from the legacy configuration file .
2784	Load a Legacy instance with the given name .
2785	Checks if the selenium connection is accessible .
2786	Check if selenium server is running .
2787	Returns the cloud service .
2788	Tries to guess the port for the given host and scheme .
2789	Detect cloud service by status .
2790	Build the PHPUnit process .
2791	Get excluding groups from annotations .
2792	Take a snapshot of the page .
2793	Returns the snapshot URL for the given path .
2794	Instantiate event listeners .
2795	Get log file path .
2796	Quotes an attribute value for use in an XPath query .
2797	Optimize the tree .
2798	Casts the value to the guessed data type .
2799	Checks the timeout of the process .
2800	Resolves the result of the process .
2801	Get list of executors .
2802	Setup Ci Capabilities .
2803	Sets custom configuration options .
2804	Retrieve configuration values from environment variables .
2805	Dequeues processes without delay .
2806	Flushes the output of a process .
2807	Get all favorites for a given class .
2808	Counts the number of tests in a file .
2809	Update summary table .
2810	Moves the summary table to the file .
2811	Update step container buttons .
2812	Add a favorite to the user .
2813	Remove a user s favorites .
2814	Toggle favorite status .
2815	Check if the user is favorite .
2816	Get the users who are favorited by the user .
2817	Get permissions .
2818	Insert labels and menus to language files .
2819	Create view files .
2820	Create table migration .
2821	Create events .
2822	Generate a file .
2823	Get stub path .
2824	Check if file can be generated
2825	Check if table exists
2826	Connect to a random redis server
2827	connect to all servers
2828	on one server
2829	Called when one key is received from server
2830	Call a Redis command
2831	set the current db
2832	Delete a set of keys
2833	Set a value in the cache .
2834	Check if a key exists
2835	Type a key
2836	expire a key
2837	Flush the cache
2838	exec a list of commands
2839	Get db size of all servers
2840	Add a function to the exec list .
2841	Dispatches a console event .
2842	Add a timing to a node .
2843	Replace the event placeholder with the event name .
2844	Merge the tags from the event into the config .
2845	Dispatch memory usage event .
2846	Dispatch request time .
2847	Create a new event instance from a console event .
2848	Match and return SRID value
2849	Match and return geometry token
2850	Parse point token
2851	Match and return coordinate value
2852	Match and return point list
2853	Match and return point list list
2854	Match multi polygon token
2855	Match and return geometry collection
2856	Matches a token .
2857	Throws a syntax error .
2858	Creates an array of Response objects from the response parts .
2859	Get request time
2860	Creates the API client .
2861	Send a command to the server .
2862	Get redirect url
2863	Check render options .
2864	Add a render command .
2865	Add a render_base64 command .
2866	Performs a find command .
2867	Find an element within a page .
2868	Use this command to set the value of an attribute .
2869	Key event command
2870	Use this command to select a single option
2871	Enable or disable debug mode
2872	Set proxy url
2873	Get the network traffic
2874	Get all cookies
2875	Set a cookie
2876	Returns an array of JS errors .
2877	Get the error message .
2878	Compile the node .
2879	Compile variable node .
2880	Creates a new host trie node .
2881	Flushes the text buffer .
2882	Lexes a number token .
2883	Lexes a punctuation token .
2884	Lexes a quoted string .
2885	Lexes a single text character .
2886	Lexes a variable name .
2887	Adds a route to the router .
2888	Returns a named route .
2889	Creates a new root trie node .
2890	Normalizes the name .
2891	Tests if the current token is of the given type and throws an exception otherwise .
2892	Returns the current token .
2893	Returns the next token .
2894	Moves the cursor to the next token if it matches the given type and value .
2895	Returns the lookahead token at the current cursor position .
2896	Add child node .
2897	Adds a child node to this node .
2898	Returns all children of this node .
2899	Adds a literal child node .
2900	Adds a child node to the VariableTrie .
2901	Build all routes .
2902	Adds a route group options to the router .
2903	Creates a route builder for the given HTTP methods .
2904	Apply group attributes to route builder .
2905	Applies group constraints to the route builder .
2906	Applies the group middleware to the route builder .
2907	Apply group route templates .
2908	Register rule factories .
2909	Yields candidates from the given node .
2910	Builds the route .
2911	Sets the route to a controller method .
2912	Set the value of an attribute .
2913	Add many attributes .
2914	Add many constraints .
2915	Adds multiple middleware to the router .
2916	Adds a middleware binding .
2917	Parses punctuation .
2918	Parses a text token .
2919	Parses the tokens .
2920	Parses a variable .
2921	Parses variable rule .
2922	Returns true if the given segment value matches the route .
2923	Add a group to the router .
2924	Add a route to the router
2925	Dispatches the current route .
2926	Compare route method and request method .
2927	Compare route domain with request domain .
2928	Compare route uri with request uri .
2929	Runs the route with the given parameters .
2930	Arranges method parameters .
2931	Replaces route parameters with their corresponding regex .
2932	Returns a regular expression for a parameter .
2933	Adds a route mapped to any controller .
2934	Defines a route parameter .
2935	Returns the URL for the given route .
2936	Prepares the request object .
2937	Get the URI for the request .
2938	Validates Wechat response .
2939	Validates the Bit . ly response .
2940	Validates Sina response .
2941	Returns a provider by name .
2942	Handle the request and return a response .
2943	Get details for a given IP address .
2944	Format the details object .
2945	Get request details .
2946	Set an element in the cache .
2947	Manages the size of the element queue .
2948	Make a POST request to the API
2949	Generate error html .
2950	Group routes by filter .
2951	Parse the path .
2952	Check if a path is a variable route .
2953	Sets route cache control variables .
2954	Set the route map tree .
2955	Get redirect url .
2956	Check route middleware .
2957	Dispatch a request .
2958	Initialize the database .
2959	Checks if the given string is a valid header .
2960	Returns the value of the specified header .
2961	Insert a row into the table and return the last inserted id
2962	Returns an array of singletons and instances for the given parameters .
2963	Create a singleton instance .
2964	Get a singleton instance of a class .
2965	Register an abstract or a concrete class .
2966	Creates a new instance of a class .
2967	Get an instance of a class with a singleton .
2968	Run a method on a class .
2969	Run the application .
2970	Initialize the database .
2971	Add a pipe .
2972	Initialize the Redis connection pool .
2973	Subscribe to a channel .
2974	Subscribe to multiple channels .
2975	Reset the query .
2976	Wraps the table prefix with the real table name .
2977	Executes the prepared statement .
2978	Binds parameters to the prepared statement
2979	Wraps the given table name with the configured prefix .
2980	Wraps an alias in a row .
2981	Condition constructor .
2982	Store build attributes .
2983	Re - store build attributes .
2984	Build a sub - query .
2985	Select one or more columns
2986	Add a WHERE condition .
2987	Add an OR condition to the WHERE clause .
2988	Add a WHERE IN statement
2989	Where between condition
2990	Where a field is NULL
2991	Add a WHERE bracket to the string .
2992	Where exists .
2993	Where in sub - query
2994	Adds a GROUP BY clause
2995	Adds a HAVING condition .
2996	Add an OR HAVING condition .
2997	Order by statement
2998	Join a table
2999	Add a FROM SUB statement to the query .
3000	Paginate results .
3001	Returns all rows of result set as associative array
3002	Returns the first row of the result set as associative array
3003	Returns an array of values for a given field
3004	Executes a SQL query .
3005	Prepares a SQL statement .
3006	Begins a transaction
3007	Handle an exception .
3008	Generate a random ID .
3009	Generate a formated ID .
3010	Generate a normal random string .
3011	Normalize the DSN .
3012	Create a new DSQL query instance .
3013	Executes an expression on this connection .
3014	Begins a transaction .
3015	Commits the current transaction
3016	Rolls back a transaction
3017	Returns the ID of the last inserted row .
3018	Reset custom arguments .
3019	Consume the given SQL code .
3020	Escape a value for soft - escaping .
3021	Render the expression .
3022	Returns a string representation of the query
3023	Executes the query and returns the results as an array .
3024	Returns the first cell of data from the result set .
3025	Returns the first row of the result set .
3026	Sets the table for the query .
3027	Add a where clause to the query .
3028	Render a condition .
3029	Add a group to the query .
3030	Add a SET clause to the query .
3031	Add an option to be selected .
3032	Sets the order of the results
3033	Set the query mode .
3034	Limit the number of rows in the result set
3035	Parse a string .
3036	Fetch string matches .
3037	Creates a human - readable error message .
3038	Check if a string starts with a line
3039	Fetch the matches of an environment variable .
3040	Check if a parameter has expansion .
3041	Fetch parameter expansion .
3042	Fetch the parameter expansion symbol .
3043	Splits a variable name and a parameter symbol into its name and default value .
3044	Parse a variable parameter .
3045	Assign a default value to a variable .
3046	Check if the parser has a variable .
3047	Returns the value of a variable .
3048	Parses a key .
3049	Parse the given content .
3050	Parse the raw content .
3051	Parses a single line .
3052	Parses an export line
3053	Parses a key = value pair
3054	Get the content of the file .
3055	Start a task .
3056	Start a workflow .
3057	Find a workflow .
3058	Get a timestamp or duration from the buffer .
3059	Get the properties of a class .
3060	Configure the sitemap .
3061	Fixes the configuration .
3062	Add a source to a group .
3063	Adds a block to the event .
3064	Returns the root menu for the block .
3065	Returns an array of fonts .
3066	Get icon char map .
3067	Get the CSS for the Fonts
3068	Hash and encrypt a password .
3069	Version 1 . 0 upgrade .
3070	Execute the console command .
3071	Write smoke credentials
3072	Get config array from config file .
3073	Returns true if the current uri is the same as the start uri .
3074	Register the console commands .
3075	Find all templates .
3076	Find all templates in a bundle .
3077	Execute a command .
3078	Returns the string between the start and end characters of the string .
3079	Sanitize a string for tease .
3080	Returns a new string with the first occurrence of the search string
3081	Replace the last occurence of a search string in this string
3082	Returns a possessive version of the string
3083	Returns a segment of the string .
3084	Returns the position of the first occurrence of a given string .
3085	Encrypt the transaction .
3086	Decrypts the response .
3087	Encrypt a plain text with a key
3088	Decrypts a text .
3089	Encrypt the transaction hash
3090	Decrypt the transaction response .
3091	Encrypt the transaction .
3092	Add a range
3093	Add a modifier .
3094	Add a range of pages .
3095	Adds a raw source .
3096	Add a file source .
3097	Adds files from an iterator .
3098	Creates a new linked CRS object from the given properties .
3099	Set optional constructor arguments .
3100	Invalid value .
3101	Invalid property error message .
3102	Creates a new named CRS object from the given properties .
3103	Get the path to the config file .
3104	Get application namespace .
3105	Loads the cache configuration .
3106	Creates a new master node with the given entropy .
3107	Returns the native balance of the asset .
3108	Get native balance steops
3109	Get the custom asset balance value .
3110	Get a custom asset balance .
3111	Get the balance of a custom asset .
3112	Get checksum hex value from entropy bytes
3113	Convert a bitstring to a hex string
3114	Converts a mnemonic to a binary representation of entropy .
3115	Authorize a trustline .
3116	Revokes a trustline .
3117	Generate XDR string .
3118	Generate an opaque variable .
3119	Encode an optional value .
3120	Returns an array of unique bucket hashes .
3121	Check if an account exists .
3122	Set whether authentication is required .
3123	Set whether authentication is revocable .
3124	Get the checksum of the public key
3125	Decode a fixed length XDR value .
3126	Parses raw data into TransactionResult object
3127	Signs the transaction .
3128	Submit a transaction .
3129	Parses a patch string into an array of PatchObject objects .
3130	Converts an array of patches into a text string .
3131	Add the context to the given text .
3132	Clone an array of patches .
3133	Calculate the bitap score .
3134	Converts a pattern to a alphabet .
3135	Returns a pretty HTML representation of the changes .
3136	Returns the diff as a string .
3137	Creates a diff from a delta string .
3138	Calculate the levenshtein distance between two strings .
3139	Compute the diff between two strings .
3140	Performs line mode .
3141	Performs a bisect split on two strings .
3142	Calculates common prefix between two strings .
3143	Returns the common suffix of two strings .
3144	Compare two strings to see if they overlap .
3145	Find a half - match between two strings .
3146	Find the longest common part of the shorttext between two strings .
3147	Converts two text lines into chars .
3148	Get the recipients for the notification .
3149	Get the version of Laravel .
3150	Register the pug compiler .
3151	Get the Pug config .
3152	Construct the cache manager .
3153	Get the pug value .
3154	Get cache path .
3155	Returns the value of an option .
3156	Check if a file is expired .
3157	Extract path from argument .
3158	Get the AMQP client .
3159	Get an instance of B2BFamily .
3160	Print a hash .
3161	Resolve a file path .
3162	Displays a file .
3163	Returns the options for the given extensions .
3164	Remove options from a path .
3165	Reset the facade to its initial state .
3166	Get a renderer instance .
3167	Add a filter .
3168	Add keyword to Phug .
3169	Returns a textual representation of the cache directory .
3170	Run the CLI command .
3171	Get all available methods .
3172	List available methods .
3173	Answers an array of validation errors for the given record .
3174	Answers a list of meta items for the receiver .
3175	Mark meta title and meta description as duplicated
3176	Remove duplicate attributes from the given list .
3177	Remove empty attributes from the given list
3178	Process a record and return the ID of the page
3179	Authorize the request .
3180	Get the elapsed time of the timer
3181	Read the response from the command
3182	Convert an array of arguments to a string
3183	Get the command arguments and validate them .
3184	Throw exception if command is not supported
3185	Register this class as an SPL autoloader .
3186	Unregisters the auto loader .
3187	Get the path to the rediska directory .
3188	Returns a list of connections for a given key name .
3189	Get a Redis connection by channel name .
3190	Get channels by connection
3191	Get config values by name or pattern
3192	Set a config value
3193	Throws an exception if transaction is not supported .
3194	Create a new queue
3195	Delete a queue .
3196	Count the number of items in a queue
3197	Send a message to a queue
3198	Receive messages from a queue
3199	Delete a message from the queue
3200	Get total elapsed time
3201	Set a value to the hash
3202	Set the value of a field
3203	Increments a value in the hash
3204	Remove a field from the cache
3205	Write data to cache
3206	Subscribe to one or more channels
3207	Publish a message to all subscribed subscriptions
3208	Add a message to the buffer .
3209	Throws an exception if the version of Redis server is not supported
3210	Catch unserialization notice .
3211	Add a queue to the set
3212	Removes a queue from the set .
3213	Returns the queues cache .
3214	Watch a set of keys
3215	Unwatches a watch
3216	Add a command to the transaction
3217	Add a new post
3218	Lists all posts in a feed
3219	Factory method to create a new logger instance
3220	Add a value to the sorted set
3221	Get set length by score
3222	Get values from the set sorted by score
3223	Remove items from the sorted set whose score is less than or equal to the given score
3224	Increments the score of the set .
3225	Get a set sorted by rank
3226	Remove items from the sorted set by rank
3227	Get the rank of a value in the set .
3228	Performs a union of two or more sets .
3229	Intersects two or more sets .
3230	Returns the results as an array .
3231	Create a set from an array .
3232	Sets the name of the object .
3233	Get a connection by its key name .
3234	Returns an array of all connections in the pool .
3235	Sets the connection to use .
3236	Subscribe to a list of channels
3237	Returns an instance of Rediska_Config .
3238	Sets the key distributor .
3239	Get the serializer instance .
3240	Get a command instance .
3241	Get command lower name and throw exception if not found
3242	Execute the commands and return the results
3243	Add a command to the pipeline
3244	Writes the command to the database .
3245	Set response callback
3246	Transform a multi bulk command array into a string .
3247	Append a value to the list
3248	Prepend a value to the list
3249	Truncates the list
3250	Set a value to the list
3251	Inserts a value into the list after the reference value .
3252	Inserts a value before the reference value .
3253	Inserts a value into the list at a given position .
3254	Remove a value from the list
3255	Shift a value from the list
3256	Shift items from the list blocking
3257	Pop a value from the list
3258	Pop a value from the list
3259	Create a list from an array .
3260	Load an item from the storage .
3261	Save data to the cache
3262	Remove an item from the cache
3263	Remove all entries from the cache
3264	Sets the cache directives .
3265	Get ids not matching tags
3266	Get metadata for a given cache id
3267	Collects all expired members from the cache .
3268	Add a value to the set
3269	Remove a value from the set
3270	Move a value to a set
3271	Intersects two or more sets .
3272	Get the union of the given sets .
3273	Compare two or more sets
3274	Get the Rediska instance .
3275	Set the value of the cookie
3276	Set the value in the cache and expire it
3277	Sets a bit at the given offset
3278	Get or set key value
3279	followers action GET | POST
3280	Gets a list of users following a user
3281	Follow a user
3282	Move the cookie to the database .
3283	Sets the number of seconds to expire .
3284	Get Rediska instance .
3285	Sets the mode of the stream .
3286	Add a new Rediska instance .
3287	Returns an array of all instances .
3288	Create a Rediska instance from its options .
3289	Increments a counter for a subject .
3290	Reset the cache for a subject .
3291	Get bucket name .
3292	Set multi increment transaction part
3293	MulitExec get count part
3294	Creates a socket connection to the server .
3295	Returns the read buffer object .
3296	Read data from the server .
3297	Read a line from the socket .
3298	Sets the read timeout .
3299	Get the stream context .
3300	Read data from the socket and throw an exception .
3301	Validates the nonce .
3302	Declare a queue and bind it to an exchange .
3303	Acknowledge a message
3304	Acknowledge a message
3305	Returns the message properties .
3306	Start the daemon .
3307	Stop the daemon .
3308	Build an exception .
3309	Builds the handler .
3310	Handle a sync message .
3311	Get the driver for the given connection .
3312	Rejects a message .
3313	Closes the connection and channel .
3314	Consume a message .
3315	Replace the model name for the given stub .
3316	Qualify the class name .
3317	Process the request .
3318	Create a new row .
3319	Convert an array to a json response .
3320	Edit an existing record .
3321	Remove a record from storage .
3322	Vote for an attribute on a subject .
3323	Renders a document .
3324	Returns the next string .
3325	Get global percentages for an app .
3326	Closes the socket .
3327	Receive a packet from the server .
3328	Sends a data packet to the Steam server .
3329	Receive a reply from the server .
3330	Executes a command on the server .
3331	Get RCON challenge .
3332	Sends a command to the RCON server .
3333	Connect to the server .
3334	Get a list of servers .
3335	Internal fetch method .
3336	Converts a community ID to a Steam ID .
3337	Converts a SteamID to a community ID .
3338	Resolve a vanity URL .
3339	Fetches the user s friends .
3340	Fetch all games owned by this player .
3341	Fetch the group list for the user .
3342	Returns the Steam ID of the Steam account .
3343	Get the most recent playtime for an application .
3344	Get the total playtime for an application
3345	Internal fetch method .
3346	Rotates the IP address .
3347	Initializes the socket .
3348	Authenticates the RCON server with a password
3349	Connect to the server .
3350	Creates a new instance of the specified class .
3351	Returns the cached instance .
3352	Check if an id is cached .
3353	Cache the results .
3354	Returns an array of cache ids .
3355	Initializes the gold src socket .
3356	Authenticates the RCON server .
3357	Closes the socket .
3358	Receive data from the socket .
3359	Selects a socket .
3360	Sends data to the socket .
3361	Get news for an app .
3362	Get equipped classes .
3363	Returns the number of members .
3364	Returns the list of members .
3365	Fetches a page of members from the server .
3366	Internal fetch function .
3367	Get the game item schema .
3368	Internal fetch method .
3369	Get all bots that have been equipped .
3370	Get golden wrenches
3371	Sets the API key .
3372	Send request to Steam Web API
3373	Sends a data packet to the Steam server .
3374	Returns the hashes of the players .
3375	Handles the response for a given request type .
3376	Update the ping value
3377	Update the status of all players
3378	Add information to this player .
3379	Get a board from the leaderboards .
3380	Get the leaderboards for a game .
3381	Load the leaderboards for a game .
3382	Get a GameLeaderboardEntry for a given SteamID .
3383	Returns a range of leaderboard entries .
3384	Load data from the server .
3385	Load data for given steamid .
3386	Parse the game leaderboard entries .
3387	Create a new SteamGame instance .
3388	Check if the app is up to date .
3389	Get number of current players .
3390	Get user stats .
3391	Display work order parts .
3392	Store a newly created event .
3393	Display the specified Event .
3394	Update the specified Event in storage .
3395	Remove the specified Event from storage .
3396	Shows work order .
3397	Displays a form to edit work order .
3398	Update the work order .
3399	Get take .
3400	Add parts to the work order .
3401	Call the processor to get the progress of a work order .
3402	Handle a PUT request to return parts into the inventory .
3403	Display the specified WorkRequest .
3404	Show the form for editing the specified work request .
3405	Update the specified WorkRequest in storage .
3406	Remove the specified WorkRequest from storage .
3407	Scope a query to include only Locations that belong to a given Location .
3408	Store a newly created event report .
3409	Renders the form for creating a new attachment .
3410	Store a work order attachment .
3411	Display the specified attachment .
3412	Edit attachment form .
3413	Update an existing Attachment .
3414	Destroy an attachment .
3415	Form for WorkOrder .
3416	Get the icon attribute .
3417	Display a listing of the Inventory Movements .
3418	Display the specified Inventory Inventory Movement .
3419	Rolls back an inventory movement .
3420	Get the revised status attribute .
3421	Get the revised priority attribute .
3422	Close all workorder sessions .
3423	Returns true if the user is checked in .
3424	Get the started at label .
3425	Get the completed at label .
3426	Mark a task as completed .
3427	Display work orders statuses .
3428	Form for work orders statuses .
3429	Lists all work orders priorities .
3430	Store a request in the queue .
3431	Edit priority .
3432	Update the given priority .
3433	Scope the query by stock .
3434	Scope a query to only include products with a given SKU .
3435	Get current stock attribute .
3436	Get the name of the revised metric .
3437	Get operator from string
3438	Scope a query to sort records .
3439	Get full path attribute .
3440	Lists all work orders statuses .
3441	Store a new status .
3442	Displays the edit status form .
3443	Update the specified Status in storage .
3444	Creates a new inventory variant .
3445	Store a new variant .
3446	Creates a new work order report .
3447	Store a report .
3448	Table for work orders .
3449	Table for assigned work orders .
3450	Return the sessions table for the given work order .
3451	Form for WorkOrder .
3452	Form for comment .
3453	Handle the uploaded files .
3454	Asset table .
3455	Asset form .
3456	Return inventory table .
3457	Table stocks .
3458	Return the inventory form .
3459	Navbar stocks .
3460	Store a newly created work order attachment .
3461	Update the specified work order attachment .
3462	Get the metrics table .
3463	Table history .
3464	Store a newly created image in storage .
3465	Display the specified image .
3466	Update the specified Attachment in storage .
3467	Shows a listing of metrics .
3468	Store a new metric .
3469	Displays a form to edit an existing metric .
3470	Lists all assets .
3471	Store a newly created asset .
3472	Displays a form to edit an existing asset .
3473	Update an existing Asset .
3474	Scope a query to only include records with the given ID .
3475	Return the response .
3476	Get the value of an input field .
3477	Get select hierarchy .
3478	Get rendered options for a given node .
3479	Register view composers .
3480	Delete the attachment .
3481	List stocks .
3482	Creates a new stock .
3483	Store a newly created inventory item .
3484	Show inventory item .
3485	Displays a form to edit an existing stock .
3486	Update an existing InventoryStock .
3487	Delete stock item .
3488	Display the specified Asset .
3489	Display the form for creating a new meters .
3490	Store a newly created meter .
3491	Display the specified meter .
3492	Show the form for editing the specified meter .
3493	Update the specified meter .
3494	Remove the specified meter from storage .
3495	Store a newly created work order notification .
3496	Update a work order notification .
3497	Get started_at formatted
3498	Get completed_at formatted
3499	Display a listing of work orders .
3500	Form for creating or updating a comment .
3501	Get the number of hours .
3502	Format the start date .
3503	Format the end date .
3504	Format the end time of the event
3505	Return the recur frequency as a human readable string
3506	Get the frequency of the event .
3507	RecurDays getter .
3508	Show event tags .
3509	Store a newly created inventory stock .
3510	Update the specified inventory stock .
3511	Remove the specified stock from storage .
3512	Table for work - orders .
3513	Form for WorkOrder Attachments .
3514	Attempt to authenticate the user .
3515	Handle the user was authenticated .
3516	Handle LDAP user was authenticated .
3517	Listen to the InventoryStock delete event .
3518	Restore all movements that were trashed .
3519	Table for work - orders priorities .
3520	Form for work - orders priorities .
3521	Display work order stocks .
3522	Form for take work order .
3523	Form for put work order stock .
3524	Remove the specified inventory from storage .
3525	Create flash message .
3526	Create a new work order .
3527	Store a newly created work order report .
3528	Display a listing of the specified resource .
3529	Store a newly created event .
3530	Show the specified event .
3531	Update the specified Event in storage .
3532	Remove the specified Event from storage .
3533	Scope a query to only include categories .
3534	Create the form .
3535	Store a newly created Manual .
3536	Display the specified Manual .
3537	Update the specified Attachment in storage .
3538	Store the work order for the given asset .
3539	Remove the given work order from storage .
3540	Store a new work request .
3541	Delete the given update .
3542	Display a listing of stocks .
3543	Returns the take form .
3544	Dispatch a take request .
3545	Gets the stock form for a work order part .
3546	Dispatches a PUT request to a PartReturn .
3547	Shows the work request list .
3548	Displays form for editing work request .
3549	Update a WorkRequest .
3550	Show the form for creating a new category .
3551	Store a newly created category in storage .
3552	Show the form for editing the specified Category .
3553	Update the specified Category in storage .
3554	Remove the specified resource from storage .
3555	Return the work order table .
3556	Table for work orders sessions per worker .
3557	Listen to the Inventory deleted event .
3558	Restore all stocks that were trashed .
3559	Displays the inventory index page .
3560	Store a new inventory item .
3561	Show inventory .
3562	Displays the inventory edit form .
3563	Return the inventory table .
3564	Table for inventory movements .
3565	Inventory stock form .
3566	Return the inventory navbar .
3567	Return the work order table .
3568	Table inventory .
3569	Generate the navbar for the work order parts menu .
3570	Display work order sessions .
3571	Start a work order .
3572	End a work order .
3573	Get the change attribute .
3574	Store a newly created note in storage .
3575	Display the specified Note .
3576	Update the specified Note in storage .
3577	Remove the specified InventoryNote from storage .
3578	Get last movement attribute .
3579	Get last movement by attribute .
3580	Get quantity metric attribute .
3581	Put back some button for work order .
3582	Put back all button for work order .
3583	End the session .
3584	Create the maintenance table for the given work request .
3585	Form for WorkRequest .
3586	Assign workers to a work order .
3587	Remove the worker from the assignment .
3588	Creates a datalist .
3589	Generates a placeholder option .
3590	Get appendage .
3591	Render a component .
3592	Get component data .
3593	Register the Blade compiler .
3594	Open a model tag .
3595	Format the label .
3596	Create a reset input .
3597	Creates a submit input .
3598	Get input from the request .
3599	Create a link to an asset .
3600	Create a link to a named route .
3601	Create a listing element .
3602	Create a string of HTML attributes .
3603	Register the html builder class .
3604	Register the form builder class .
3605	Create a search input .
3606	Creates a datetime input .
3607	Creates a file input field .
3608	Remove the xml first line from the string .
3609	Load a locale .
3610	Parse the Hyphenator . ini file
3611	Returns a list of patterns for a given word
3612	Unify the locale .
3613	Tokenize a string .
3614	Run the tokenizer and return a token registry .
3615	Set Hyphenator Options
3616	Add a dictionary to the registry
3617	Get hyphenation patttern patterns for a word
3618	Sets the filters .
3619	Add a filter .
3620	Sets the tokenizers .
3621	Add a tokenizer .
3622	Factory method to create an Options object from a ini file
3623	Get the text pattern
3624	Get the pattern
3625	Sets the options .
3626	Returns the Hyphenator options .
3627	Add a new dictionary
3628	Add a filter .
3629	Add a tokenizer .
3630	Get the tokenizers .
3631	Returns the dictionary collection .
3632	Get filters .
3633	Hyphenates a string .
3634	Returns the hyphenation pattern for the given registry .
3635	Returns the patterns for the given token .
3636	Set default home path
3637	Get the default home path .
3638	Set home path
3639	Creates a new Hyphenator instance .
3640	Autoload a Hyphenator class
3641	Replaces an existing token with a new one .
3642	Returns the token with the given key
3643	Get merged pattern
3644	Get a filter by key .
3645	Filters the tokens .
3646	Fetch an access token for the given authorization code .
3647	Migrate orders .
3648	Migrate an order .
3649	Migrate shipping values .
3650	Checks if the order has a total value and if so calculates it .
3651	Return a DataObjectSet of Products that are allowed to purchase .
3652	Create default page if it doesn t exist yet
3653	Make an Omnipay payment .
3654	Get gateway data
3655	Creates a payment for the current order
3656	Completes the payment of the order
3657	Check if an order can be placed in a cart
3658	Returns a human readable version of the country code .
3659	Sets the payment method
3660	Returns the selected payment method .
3661	Send the confirmation email
3662	Send an admin notification to the shop
3663	Send an email to the user that the order was cancelled by a member
3664	Builds the URL for the given action and params .
3665	Redirect the user to the cart page
3666	Redirect to the cart if no cart is initialised
3667	Show the debug information for the current shopping cart
3668	Returns the SQL to filter the data .
3669	Save the user s details into the database
3670	Proceeds with saving the details into the database
3671	Get or create a new modifier .
3672	Get the unit price for the order if it is a cart .
3673	Calculate the total for this item
3674	Return an array of unique data .
3675	Calculate the cart totals if the order is a cart
3676	Get the product variation associated with this object .
3677	Returns a string representation of the object .
3678	Gets the address associated with this object .
3679	Get the cart form
3680	Return the value of the weight cost table .
3681	Get the weight of the order
3682	Returns the sum of the items in the collection .
3683	Returns the subtotal of the collection .
3684	This method is called before writing the object .
3685	Return the viewer for the given action
3686	Get the current product .
3687	Add variations fields to the CMS .
3688	Get a variation by attributes
3689	Generates the variations for the given attribute type .
3690	Remove all variation records from the database .
3691	Returns the first component that implements the given type
3692	Returns a FieldList containing all form fields for the current order .
3693	Validates the data passed to the checkout .
3694	Returns an array of order data .
3695	Set the data of the order .
3696	Get the dependant data for a component .
3697	Returns the current order in the cart
3698	Set the current order
3699	Find the current order or create a new one
3700	Add a new item to the order .
3701	Remove an item from the current order .
3702	Remove an order item from the current order
3703	Sets the quantity of an order item .
3704	Update the quantity of an order item
3705	Find or make an item for the given Buyable
3706	Get a single item for the current order
3707	Add an order to the cart if it is not a cart
3708	Returns the value of the order .
3709	Returns price field for display .
3710	Return the image object for the given filename
3711	Sets the content of an object .
3712	Answers an array of countries sorted by country code .
3713	Get a single country
3714	Convert ISO 3166 country code to name .
3715	Get the current shopping cart
3716	Convert an array of values to a set of values
3717	Get a dropdown field for this product attribute
3718	Answers a list of products that can be shown in this category .
3719	Get the IDs of all child categories of this category .
3720	Answers a list of all child categories of the category .
3721	Answers the groups menu for the current category .
3722	Get the title of a nested menu item .
3723	Add the print button to the form
3724	Print the order
3725	Find the next step .
3726	Answers a list of orders .
3727	Add a GridField to the GridFieldDetailForm if the model is an Order
3728	Get a subset of fields .
3729	Modifies the order s amount
3730	Setup steps .
3731	If we are in a shopping cart and we are not in a shopping cart then redirect to the shopping cart
3732	Answers true if the given step is the current step .
3733	Get the position of an action .
3734	Find a link to the current cart page
3735	Answers a list of products for the current category .
3736	Trim the cents of the number .
3737	Add fields to the CMS
3738	Answers an array of options for the category field .
3739	Returns an array of categories that have no parent .
3740	Answers an array of product category IDs that are assigned to this product .
3741	Return the price of the selling order
3742	Answers the product image component .
3743	This method is called when the payment form is submitted
3744	Dopayment the payment
3745	Allows the user to cancel the order
3746	Get the CCC fields for the given gateways .
3747	Add an order to the session .
3748	Returns the order IDs stored in the session .
3749	Get an order from its ID
3750	Get the actions form for this order
3751	Create a new member
3752	Get a member by its unique identifier .
3753	Save the MemberID to the ShoppingCart if enabled .
3754	Get the most recent orders for this member
3755	Answers a hidden field for displaying the quantity link of the item .
3756	Get existing address fields
3757	Get the fields for the order admin
3758	Add the status dropdown to the search context .
3759	If the component is items create a new order item list .
3760	Calculate the order total
3761	Returns the modifier for the given class name .
3762	Get the total outstanding for the payment
3763	Get the link to the checkout page
3764	Determine if the payment can be done .
3765	Determine if the member can delete this object .
3766	Determine if the member can view the record .
3767	Answers the name of the member .
3768	Returns the billing address .
3769	Generate a reference for this order
3770	This method is called before writing the object .
3771	Remove all items and modifiers from the database
3772	Add status translations to the CMS
3773	Render the cart field
3774	Answers an array of editable items for the receiver .
3775	Find the link to the account .
3776	Get the link to the order .
3777	Browse all installed Community packages .
3778	Lists all installed packages .
3779	Gets the path to a package .
3780	Update packages .
3781	Uninstalls a package .
3782	Get composer instance .
3783	Get all community packages .
3784	Get the package index repository .
3785	Display a list of packages .
3786	Get a package by its shortened identifier .
3787	Get list of installed packages .
3788	Get an installed package by its name .
3789	Get the name and version of a package from a directory .
3790	Get composer . json path .
3791	Create the default composer . json file .
3792	Returns the raw git version .
3793	Guess the version constraint from a tag .
3794	Get the path to the composer . json file and the decoded json .
3795	Set the properties of this object .
3796	Load custom config .
3797	Delete all queued jobs
3798	Run the cleanup process
3799	Queue a job
3800	Copy the job data to the job descriptor .
3801	Get the next pending job
3802	Check job health
3803	Check default jobs .
3804	Check if a job has been stalled and restart it
3805	Initialise a job from the given job descriptor
3806	Check if we have passed the time limit
3807	Checks if the memory limit is too high .
3808	Parse memory from string
3809	Get the filter for the job list .
3810	Run a queue .
3811	Process jobs in the queue .
3812	Queue a task
3813	Logs the status of a job descriptor .
3814	List all jobs
3815	Refresh the queued job descriptor .
3816	Check if all jobs are healthy .
3817	Pauses the job
3818	Resumes the job
3819	Activate this job on the queue
3820	Get the path to the cache directory
3821	Cleans up the job .
3822	Return the saved job messages
3823	Returns the last saved message .
3824	Returns a string representation of the job type .
3825	Answers an array of values for the job type field .
3826	Setup the site map
3827	Prepare for restart
3828	Complete the job
3829	Run all jobs in the queue
3830	Handle an action .
3831	Answers the title of the publish page .
3832	Sets up the complete state of the step .
3833	Process the next step .
3834	Get the queue from the request .
3835	Casts a model to an array .
3836	Runs the shell .
3837	Save the given content as a source map
3838	Write data to shared memory .
3839	Read data from shared memory .
3840	Lists all registered sidebars .
3841	List all widgets for a given sidebar .
3842	Add a widget to a sidebar .
3843	Updates options for a widget .
3844	Moves a widget to a new position .
3845	Deactivates a widget .
3846	Delete a widget .
3847	Resets all registered widgets for one or more sidebars .
3848	Validates the given sidebar ID .
3849	Check if the widget exists in the list of sidebars widgets .
3850	Get widget data .
3851	Move a widget from one sidebars to another .
3852	Get the widget object .
3853	Sanitize widget options .
3854	Returns a random integer between min and max .
3855	Returns a random string of the specified length .
3856	Encode a string .
3857	Decode a string .
3858	Add a generator path .
3859	Remove a generator path .
3860	Returns a generator instance .
3861	Loads all generators .
3862	Show the element as a row .
3863	Sets the readonly attribute to true .
3864	Open a new form .
3865	Add a prefix to the element .
3866	Add a suffix to the element .
3867	Assemble addons .
3868	Set the sizable size .
3869	Unscrubs a message .
3870	client Temp F
3871	Returns a list of all nodes in a session .
3872	Returns a list of all properties in a session .
3873	Evaluate a view path .
3874	Writes a set of keys to the cache .
3875	Get the webdriver .
3876	Returns the aspect ratio .
3877	Returns the author of the message .
3878	Returns the headline .
3879	Get credit .
3880	Returns the source of the message .
3881	Returns the job title
3882	Returns the ISO code .
3883	Returns the focus distance .
3884	Returns the width of the image
3885	Returns the height of the image .
3886	Returns the title of the message .
3887	Returns the caption .
3888	Returns the user s copyright .
3889	Returns the keywords .
3890	Returns the current camera .
3891	Returns the resolution of the horizontal image .
3892	Returns the vertical resolution .
3893	Returns the platform name .
3894	Returns the length of the focal .
3895	Returns the creation date .
3896	Returns the color space .
3897	Returns the MIME type of the message .
3898	Returns the size of the file .
3899	Returns the orientation of the image
3900	Returns the GPS value
3901	Extract GPSCoordinate from an array of components
3902	Sets the path to the exiftool binary .
3903	Get the path to the tool
3904	Executes a command on the exiftool binary .
3905	Hydrate an object with the given data .
3906	Extract GPSCoordinates from a string
3907	Returns the mapper instance .
3908	Get hydrator .
3909	Set options .
3910	Add required section .
3911	Get iptc data
3912	Factory method to create a new Exiftool instance .
3913	Generate the table prefix .
3914	Normalizes the configuration .
3915	Translate a list of values .
3916	Add a new job to the queue
3917	Process all URLs and publish them
3918	Collect changes to update and delete .
3919	Flushes changes to the static cache
3920	Garbage collection of installed extensions and metadata extensions .
3921	Filters extensions by module .
3922	Returns array of module blocks .
3923	Returns module settings .
3924	Checks if metadata version is supported .
3925	Checks if a PHP file with the given name exists .
3926	Checks module versions
3927	Checks extended classes .
3928	Check template blocks .
3929	Checks module settings .
3930	Checks module templates .
3931	Check module controller .
3932	Checks module files .
3933	Check module events .
3934	Parses module ids from command line arguments .
3935	Parse shop configs from input .
3936	Template variable getter . Returns available module ids
3937	Check if Oxid is enabled .
3938	Returns module object
3939	Returns module cache object
3940	Returns module installer object
3941	Fixes a module
3942	Removes module extensions from module list .
3943	Adds template files to module config
3944	Adds module files .
3945	Adds module events .
3946	Adds module extensions .
3947	Adds module version
3948	Returns the difference between two arrays .
3949	Adds module settings .
3950	Sets module controllers .
3951	Adds extensions to a module .
3952	Returns list of installed packages .
3953	Render the template
3954	Sets template block to active state .
3955	Get Http instance .
3956	Returns the available HTTP transport driver .
3957	Returns a list of supported HTTP transports .
3958	Set the CURLOPT_CAINFO option value .
3959	Parses the response and returns it .
3960	Check if redirects are allowed .
3961	Makes an HTTP OPTIONS request .
3962	Make a HEAD request .
3963	Performs a TRACE request .
3964	Sends a PATCH request to the server .
3965	Checks if the given path matches the given glob expression .
3966	Get extra parameter value by key .
3967	Returns the combined filters for the given list of glob expressions .
3968	Activates the plugin .
3969	Checks if the given path matches any of the given glob expressions .
3970	Matches a relative path against a list of glob expressions .
3971	Returns the path to the shop source directory .
3972	Creates the installer for the given package .
3973	Installs the package .
3974	Updates the given package .
3975	Copies the shop source from the package to the target directory .
3976	Copies the configuration distribution file to the target directory .
3977	Copies the setup files from the source to the target directory .
3978	Checks if a config file is not configured or missing .
3979	Copies files from source to installation .
3980	Get filtered files .
3981	Returns the absolute path to the file from the installation .
3982	Update the package .
3983	Copies the given package to the target path .
3984	Form the source path .
3985	Nests a flat file system structure .
3986	Get the iterator for the flat file list .
3987	Copies a directory from source to destination .
3988	Copies a file if glob expression list is empty .
3989	Generates models .
3990	Traverses the classes recursively .
3991	Returns a JSON - LD array representation of the object .
3992	Add breadcrumb list .
3993	Renders the list of models .
3994	Set HTML by view
3995	Generates the styled HTML
3996	Resolves the given path .
3997	Determine if the given array has the expected values .
3998	Determine if an item exists in an array .
3999	Asserts that a response status code is equal to a given value .
4000	Asserts that the HTTP body contains the given content .
4001	Assert that a response is JSON .
4002	Assert that the response from the JSON - API is valid .
4003	Assert that a response was fetched from the server .
4004	Assert that a response was fetched from the API .
4005	Assert that a response was fetched in order .
4006	Assert that a response was fetched from the server .
4007	Asserts that a response was fetched in order .
4008	Assert that a document was created with a client id .
4009	Asserts that the response has no content .
4010	Assert that the response contains exactly the given meta data .
4011	Assert that an error has an exact status .
4012	Assert that a response has an exact error .
4013	Assert that a response contains an array of errors .
4014	Returns the response document .
4015	Checks that the value is of the given type .
4016	Asserts that the response was fetched exactly as a single document .
4017	Assert that a record was updated .
4018	Assert that the page has been deleted .
4019	Assert that a resource is included in the collection .
4020	Assert that the document includes the given hash .
4021	Assert that the document contains meta data .
4022	Asserts that the document contains exact metadata .
4023	Asserts that the document contains an exact link .
4024	Assert that the response contains an exact set of errors .
4025	Assert that a resource exists in a document .
4026	Asserts that the document contains the given identifier .
4027	Asserts that a document contains an exact value .
4028	Asserts that a document does not contain an exact value .
4029	Asserts that a document contains at least one element in an array .
4030	Asserts that a document is an exact list .
4031	Asserts that a list is contained in the order of a document .
4032	Asserts that an array is an exact list in order .
4033	Asserts that a document contains only identifiers in a list .
4034	Asserts that the list of identifiers is in the order of a document .
4035	Assert that a list contains a resource .
4036	Asserts that a list contains a hash .
4037	Asserts that a list contains exact values .
4038	Asserts that a document is included in a collection and contains a hash .
4039	Assert that a document contains an exact error .
4040	Asserts that a document contains a set of errors .
4041	Asserts that a document contains an exact error .
4042	Creates a new instance from the given content .
4043	Casts the given document to a collection .
4044	Creates a new document from a JSON string .
4045	Decode a JSON string .
4046	Get a value from the document .
4047	Determine if the document has any of the given pointers .
4048	Assert that the given pointers exist .
4049	Assert that the given pointers does not exist .
4050	Returns whether the expected value is the same as the actual value .
4051	Checks if an array is subset of an array .
4052	Check if value is a resource identifier .
4053	Sort an array .
4054	Checks if the given value is identifiable .
4055	Sends the request and returns the results .
4056	Tells the user the given text .
4057	Reply to a user .
4058	Set allowed types .
4059	Write a message to the output buffer .
4060	Write a message to the output if debug is enabled .
4061	Add a message to the output .
4062	Returns the number of messages of a given type .
4063	Parses a single line of code into an array of variables .
4064	Get variables from a multi - line array .
4065	Validate the list of variables in an array of docblocks .
4066	Returns true if all elements are present in the collection .
4067	Returns an iterator that can be used to accumulate values .
4068	Merges two arrays using the given comparison function .
4069	Convert the collection to an array .
4070	Returns an array of all keys in the collection .
4071	Creates a new zip iterator .
4072	Returns the values of the collection .
4073	Reduces the collection to a single value .
4074	Convert a list of keys and values to a key .
4075	Group the results by a given strategy .
4076	Reduces an array to a single value .
4077	Creates a new reduction .
4078	Dump the autoloader .
4079	Get extra key .
4080	Escape the prefix of a predicate .
4081	Parses a compacted IRI .
4082	Get term context from field type .
4083	Persists the cache if it has been modified .
4084	Return the content of an entity .
4085	Normalizes field items .
4086	Deletes a record from the database .
4087	Creates an instance of a translated field .
4088	Get entity URI .
4089	Returns an array of typed data IDs for the given types .
4090	Build a cache backend .
4091	Fetch an item from the cache .
4092	Run a string function .
4093	Output an error message .
4094	Asks a question to the user .
4095	Executes a row and returns the inserted ID .
4096	Create a new record .
4097	Overrides the given values with the given values .
4098	Insert a new record into the database
4099	Extract the primary key from the table name .
4100	Sets the current user to be acting as .
4101	Copy stubs .
4102	Configure variables .
4103	Serialize the additional data value into a JSON string .
4104	Checks if the given additionalData contains a swatch type .
4105	Returns the swatch type for the passed entity type and attribute code .
4106	Handle the command .
4107	Prepare the seeder class name .
4108	Return s the swatch with the passed option ID and store ID .
4109	Return s the entity attribute with the passed attribute ID and attribute set ID .
4110	Return s the attribute option with the passed entity type attribute code store ID and value .
4111	Returns the attribute option with the highest sort order for the passed attribute ID .
4112	Creates the database seeders folder if it does not exist .
4113	Make seeder file .
4114	Initializes the attribute with the passed attributes and returns an instance .
4115	Sets up the transaction .
4116	Loads the attribute with the passed id from the database .
4117	Set the path of the node .
4118	Add params .
4119	Sends the request and returns the response .
4120	Executes the menu .
4121	Inject parameters into the request .
4122	Returns the attribute with the passed code .
4123	Overrides the parent tearDown method to merge the pre loaded attribute ids into the serial number .
4124	Store the code of the attribute in the pre - loaded array .
4125	Publish records .
4126	Assert that the response contains the given content .
4127	Get response body as json
4128	Assert that the response contains the given JSON structure .
4129	Run the test suite .
4130	Get Drupal root .
4131	Get environment file path .
4132	Read the environment file .
4133	Publishes the records from the data table
4134	Load the database seeders .
4135	Returns the entity type for the given entity code .
4136	Returns the entity type ID for the passed entity code .
4137	Makes a request to the API .
4138	Ensure that the URI is properly formatted .
4139	Accept a distributed trace payload as HTTP safe .
4140	Ends a transaction .
4141	Set the application name
4142	Set user attributes
4143	Start a new transaction
4144	Append the base path to the url .
4145	Prepares an array of parameters for the constructor .
4146	Append exception suffix to subject .
4147	Wraps an exception in a wrapped column exception .
4148	Parses a CSV file .
4149	Loads an attribute group from the database .
4150	Return s the available EAV attribute groups for the passed attribute set ID .
4151	Return s the entity type code and attribute set name for the passed entity type code and attribute group name .
4152	Creates a LexerConfig based on the current configuration .
4153	Find s the eav attribute option value with the passed option ID and store ID .
4154	Creates a file resolver for the given subject .
4155	Returns all available core config data .
4156	Returns the logger with the given name .
4157	Creates a new plugin instance .
4158	Merge an entity with an attribute .
4159	Creates a number converter for the given subject .
4160	Cast value by backend type .
4161	Returns the entity type code .
4162	Returns the attributes of the entity .
4163	Returns an array of user - defined attributes for this entity type .
4164	Get av attribute by attribute code
4165	Returns the categories with the resolved path .
4166	Returns the categories with the resolved path .
4167	Returns the header with the given name .
4168	Add a header to the message .
4169	Map attribute code by header mapping .
4170	Tear down the subject .
4171	Registers an observer .
4172	Register a callback .
4173	Get callbacks by type
4174	Imports the given row into the subject .
4175	Prepare the store view code .
4176	Return s the store ID for the passed store view code .
4177	Get root category .
4178	Resolve the original column name .
4179	Returns the original data of the row .
4180	Returns whether the column has an original data value .
4181	Wraps the original exception in a new exception .
4182	Append suffix to exception message .
4183	Returns a new name for the target file .
4184	Upload a media file .
4185	Deletes a file from the filesystem .
4186	Returns the list of entity types .
4187	Returns the entity type with the passed entity type code .
4188	Converts an array to a string .
4189	Unserialize a CSV string .
4190	Returns the target directory .
4191	Creates a new ExporterConfig instance .
4192	Initializes the CSV configuration .
4193	Unserialize an array of attributes .
4194	Serialize an array of attributes .
4195	Get a prepared statement by name .
4196	Initializes the prepared statements .
4197	Parse an additionalAttributes string into an array .
4198	Generates the path for the given entity and returns it .
4199	Resolve a reference .
4200	Add a value to the cache .
4201	Returns the value for the given cache key .
4202	Flushes the cache .
4203	Loads an attribute set from the database .
4204	Returns the available attribute sets for the passed entity type ID .
4205	Return s the entity type attribute set with the passed entity type ID and attribute set name .
4206	Return s the eav attribute set with the passed entity type code and attribute set name .
4207	Create export adapter .
4208	Quote a string for use in a query
4209	Returns the url rewrites for the passed entity type and entity ID .
4210	Return s the list of rewrites for the passed entity type and entity id .
4211	Notify all registered observers .
4212	Check row consistency .
4213	Returns true if the row has a value with the given name .
4214	Creates a subject instance with the given configuration .
4215	Creates a serializer for the given configuration .
4216	Return s the available EAV attributes for the passed entity type and attribute set .
4217	Finds the eav attributes for the given option value and store ID .
4218	Returns the available EAV attributes for the passed user - defined value .
4219	Returns the available EAV attributes for the passed entity type ID and whether or not they are user - defined .
4220	Returns the available EAV attributes for the passed entity type ID .
4221	Find an eav attribute by option value and store id
4222	Prepares a subject s observers .
4223	Resolve path .
4224	Creates a directory .
4225	Set an attribute
4226	Raise a counter .
4227	Merge attributes recursively
4228	Creates a League filesystem adapter based on the given subject configuration .
4229	Returns the categories for the given store view .
4230	Returns the root categories .
4231	Creates a new emitter based on the configuration .
4232	Adds listeners to the given emitter .
4233	Recursively removes a directory .
4234	Get the SwiftMailer instance .
4235	Initialize the source directory .
4236	Load all files from the source directory .
4237	Returns the prepared statements .
4238	Create import adapter .
4239	Prepare callbacks for subject .
4240	Returns all global data .
4241	Load a prepared statement by ID .
4242	Create a new date converter .
4243	Override the artefacts for a given type .
4244	Append an array of artefacts .
4245	Returns the artefacts for the given type and entity ID .
4246	Creates a new artefact with the given columns .
4247	Export data to target directory .
4248	Returns the available link types .
4249	Returns all image type s labels .
4250	Converts a date from the source to the target format .
4251	Converts a number .
4252	Execute the subject .
4253	Get the pattern keys .
4254	Resolve pattern values
4255	Resolves the pattern value .
4256	Prepare pattern .
4257	Prepare ok filename .
4258	Check if two filenames are equal .
4259	Returns an array of ok filenames
4260	Returns true if the file should be handled .
4261	Cleans up an OK file .
4262	Returns all tax classes .
4263	Warms up the cache for the eav attribute option values .
4264	Returns all store websites .
4265	Returns all available stores .
4266	Find category varchars by entity ids .
4267	Find category varchars by entity id .
4268	Returns the list of available customer groups .
4269	Get primary key member name .
4270	Removes empty values from the row .
4271	Render a Blade view .
4272	Register REST routes .
4273	Get params for collection
4274	Sanitize the end date .
4275	Get a list of events .
4276	Map event module data .
4277	Define category translations .
4278	Strip HTML entities from the post title and content
4279	After save event handler
4280	Saves the location of the post
4281	Save additional locations
4282	Save event categories
4283	Save event groups
4284	Save event tags
4285	Save occasions for this event .
4286	Save post language
4287	Get event by original ID .
4288	Check filters .
4289	Remove expired occasions
4290	Remove events that have been deleted from the database
4291	Remove expired events
4292	Filter the taxonomies .
4293	Delete empty taxonomies .
4294	Render the location list
4295	Save mod_location meta
4296	Get rev - manifest . json
4297	Remove meta boxes
4298	Output meta data .
4299	Implode an array into a string .
4300	Register post type
4301	Add a column to the table .
4302	Get table columns .
4303	Returns an array of columns to be sortable .
4304	Table column content callback .
4305	Save a term .
4306	Activates a new group
4307	Remove empty meta value
4308	Check if meta value is empty
4309	Remove empty meta
4310	Saves the object .
4311	Check if an attachment exists .
4312	Submit form callback .
4313	Add event date args to permalinks .
4314	Event filter .
4315	Get a single occasion for a post .
4316	Get next occasion date
4317	Returns the closest item in an array .
4318	Returns an array of date parts from a start date
4319	Save draw points
4320	Enqueues the event manager admin
4321	Enqueues the assets for the front page .
4322	Format a short date .
4323	Import events cron
4324	Import Publishing Groups
4325	Check if the database table exists and if not create it .
4326	Create the event database .
4327	Check if an event exists
4328	Request API .
4329	Get event occasions for a post
4330	Get event meta
4331	Limit the length of a string .
4332	Get a list of geodesic locations by latitude and longitude
4333	Updates an instance .
4334	Ajax pagination .
4335	Get all events for a module
4336	Get module categories
4337	Get filterable categories
4338	Get module groups .
4339	Get module tags .
4340	Get age filter range .
4341	OAuth request callback
4342	Sanitize an array of values .
4343	Returns the data for a single post .
4344	Get user groups
4345	Update the value of the group field .
4346	Get event content .
4347	Get event content lead .
4348	Get custom content
4349	Register event categories
4350	Register event tags
4351	Register event groups
4352	Add import buttons
4353	Import events .
4354	Accept or deny post
4355	Create the tunnel .
4356	Run the tunnel verification process .
4357	Run a command .
4358	Set signal handler
4359	Signal handler .
4360	Run a process .
4361	Edit an action for a container .
4362	Create a new instance of the dc - general environment .
4363	Get the widget for the given property .
4364	Render a widget for a property .
4365	Process the input .
4366	Process a single property .
4367	Hijack the POST array .
4368	Handle the event .
4369	Creates an instance of an imagine driver .
4370	Configure Imagick settings .
4371	Injects the imagine settings .
4372	Build the widget .
4373	Get the widget class name for a property .
4374	Get the options for the widget .
4375	Edit the model .
4376	Enforce model relationship .
4377	Process the input of the form .
4378	Dispatches the pre persist event .
4379	Dispatches the post persist event .
4380	Translates the label .
4381	Build the field set for each legend .
4382	Handle the submit button .
4383	Get headline .
4384	Persists the model .
4385	Configure the CAS server .
4386	Parse the config array .
4387	Configure CAS server certificate validation .
4388	Get an attribute from the CAS server .
4389	This method is used to check if an attribute exists on the CAS server .
4390	Logout the user .
4391	Sets the status code .
4392	Returns the primary key of a model or null if the model is null .
4393	Check if the current value is an integer key
4394	Get the fragments from the URL
4395	Add containers from an array
4396	Build the query .
4397	Wrap the original query with a row counter .
4398	Create a fake model query from a wrapped query .
4399	Generate an activation link from a key and action .
4400	Assign a user to a key
4401	Check if a key is valid
4402	Read the paging info from the request .
4403	Register a list of template files
4404	Register custom error handlers .
4405	Handle an authorization error .
4406	Handle validation errors .
4407	Handle a not found exception .
4408	Removes and returns the top element of the queue
4409	Get all bower components .
4410	Attach event handlers
4411	Makes a request to the API .
4412	Checks if the package is available .
4413	Sync packages to database .
4414	Updates expired packages .
4415	Creates a new client with the given names .
4416	Returns the connection URL .
4417	Get the port for the connection .
4418	Validates the entity managers .
4419	Terminate a process .
4420	Locks a theme .
4421	Unlocks a theme .
4422	Clones a book .
4423	Build a param value from filter url .
4424	Build the filter widgets for a parameter .
4425	Returns an array of sorted tables .
4426	Check if database is configured .
4427	Configure the database .
4428	Returns all migrations .
4429	Run all migrations .
4430	Rollback migrations .
4431	Resolve the state of a migration .
4432	Get migration table .
4433	Render the source with the given format .
4434	Mount the indents from the serialized string .
4435	Sets the primary keys of the table .
4436	Creates a new table .
4437	Update the table .
4438	Drops the table .
4439	Renames the table .
4440	Execute the blueprint .
4441	Get migration files .
4442	Create a new filename .
4443	Bootstrap the application .
4444	Load the Laravel Booter .
4445	Loads context initializer .
4446	Loads the Laravel argument resolver .
4447	Apply mailtrap configuration
4448	Fetch the inbox .
4449	Request the Mailtrap client .
4450	Reboot the Laravel kernel if it is a KernelAwareContext .
4451	Resolves class arguments .
4452	Opens a stream .
4453	Returns information about a given URL .
4454	Get stream stats .
4455	Check if a file is registered .
4456	Get a unique filename for a stream .
4457	Release a reference to a file .
4458	Handle a command .
4459	Returns true if the node type is empty and is not empty .
4460	Exposes the methods of an object .
4461	Handle an XRL request
4462	Call an XRL function
4463	Renders the checkbox list .
4464	Enable the XRL wrapper .
4465	Extracts the types from a doc comment .
4466	Returns a list of all available HTTP methods .
4467	Returns the signature of a method .
4468	Returns the help for a method .
4469	Execute multiple calls
4470	Load a class
4471	Returns the version of Erebot .
4472	Print usage information to the output .
4473	Parses a bool value
4474	Parses a file and returns its content .
4475	Parse command line arguments .
4476	Run the XRL .
4477	Returns true if the container has been resolved .
4478	Get the XML writer .
4479	Finalizes the write .
4480	Get the XML reader for the given URI .
4481	Reads a node from the reader .
4482	Expects an opening tag .
4483	Expects the end element of the current node .
4484	Parses a text node .
4485	Check if a value is of a given type
4486	Creates a checkbox field .
4487	Creates an email field .
4488	Creates a select field .
4489	Run the application .
4490	Register section .
4491	Register section settings fields .
4492	Register settings for a section .
4493	Display the captcha .
4494	Returns a javascript link to the CAPTCHA client .
4495	Displays the multiple captcha widget .
4496	Build the captcha html .
4497	Uploads an asset to Moovly .
4498	Get a project .
4499	Get all projects .
4500	Create a project template .
4501	Get a template .
4502	Get all templates .
4503	Create a job .
4504	Get a job .
4505	Get jobs by template
4506	Returns the current user .
4507	Get the personal library for the user .
4508	Merges two job values .
4509	Returns the LDAP user with the specified attribute .
4510	Sets the LDAP configuration .
4511	Check LDAP error code .
4512	Sets allowed types for OptionsResolver .
4513	Sets the username and password of the LDAP connection if necessary .
4514	Switch domain if needed .
4515	Switch domain back if needed .
4516	Throws an exception if the user does not exist .
4517	Get the username and password token .
4518	Add the domain to the token if present in the request .
4519	Transform the value of an entity into LDAP value .
4520	Get ldap object annotation properties .
4521	Sets the LDAP object for the given property .
4522	Set the Ldap value for the given property .
4523	Adds the security listener factory to the security container .
4524	Get the values for the given choices .
4525	Get the LDAP objects that match the given query .
4526	Get operations .
4527	Sets the roles for the given user .
4528	Check if a group exists for the given roles .
4529	Check if the given group has the given attribute with the given value .
4530	Logs a log operation .
4531	Save a media file .
4532	Update media by id .
4533	Get all media or a specific group .
4534	Removes a media file .
4535	Parse options .
4536	Get the new filename .
4537	Checks if the file exists and renames it .
4538	Rename the file if it exists .
4539	Get the alt value .
4540	Get the title .
4541	Get the name of the item .
4542	Get the weight of the group .
4543	Save new file to database .
4544	Remove existing media .
4545	Move the storage file to the new location .
4546	Clone the media file .
4547	Creates a directory if it does not exist .
4548	Clone the given media .
4549	Boot the package s config .
4550	Register the service provider .
4551	Register directives .
4552	Get the config .
4553	Create a SVG element .
4554	Transmit item variable
4555	Transform a value to a string
4556	Add a variable to the output
4557	Check if the variable is a qti file placeholder
4558	Checks if the variable is a qti file variable .
4559	Convert a value to a QTI datatype .
4560	Create a new revision from an object .
4561	Performs a recursive diff between two arrays .
4562	Set the IP address .
4563	Sets the language to use .
4564	Sets the origin .
4565	Resolve the origin .
4566	Sets the timestamp .
4567	Pre - save method .
4568	Process the object schedule .
4569	Sets creation and last modification dates to now .
4570	Check if slug is unique .
4571	Generate a unique slug for this model .
4572	Set the slug .
4573	Sets the creation date .
4574	Sets the last modification date .
4575	Set route options
4576	Set the master .
4577	Returns the children of this node .
4578	Returns the children of the node .
4579	Load object from source .
4580	Get an object from the cache .
4581	Add an object to the cache .
4582	Retrieve the category items .
4583	Get slug pattern
4584	Retrieve the slug prefix .
4585	Get slug suffix .
4586	Returns true if the slug field is editable .
4587	Set slug .
4588	Generate the slug .
4589	Generate route pattern .
4590	Filters a value for a route token .
4591	Generate object route .
4592	Get the URL for the object .
4593	Slugifies a string .
4594	Finalize the slug .
4595	Delete object routes .
4596	Create route object collection loader .
4597	Get all revisions of this object .
4598	Set the publication date .
4599	Set the expiry date .
4600	Sets the publish status .
4601	Get the status of the object s publish date .
4602	Display a listing of the videos
4603	Rewrite the routes
4604	Resets the data array .
4605	Returns the next row from the result set
4606	Browse a site
4607	Browse a site
4608	Browse a site s logs
4609	Browse logs events
4610	Get permissions .
4611	Display a list of items
4612	Deletes an item from the database
4613	Restores an item
4614	Sort a list of locales
4615	Checks if a localised item can be deleted
4616	Get title for single model
4617	Returns an array of dropdown filters for the locale dropdowns
4618	Get the data from the POST
4619	Returns a single item from the database
4620	Redirect to the index page
4621	Adds an option to the list
4622	Adds an option to the list of options .
4623	Get option by index
4624	Handle method call
4625	Sets a batch status
4626	Sets a new download ID
4627	Lists all the admin controllers
4628	Find all admin controllers
4629	Load admin controllers .
4630	Load an admin controller .
4631	Loads an admin class .
4632	Route the request to a controller
4633	Loads a view from a file
4634	Load data from a CSV file
4635	Loads an inline view from a view file
4636	Loads a search component from an object
4637	Returns the value of the option at the given key .
4638	Loads a pagination component
4639	Loads a cell from a value .
4640	Loads a user cell
4641	Loads a date cell
4642	Loads a datetime cell
4643	Loads a boolean cell
4644	Loads the settings component table
4645	Adds a header button .
4646	Returns a dynamic table view
4647	Saves the navigation state
4648	Creates the export .
4649	Create source file
4650	Formats a single row .
4651	Add an action .
4652	Set admin data .
4653	Unset admin data .
4654	Set or unset admin data
4655	Clear admin data for a user
4656	Get all log files
4657	Find the config file
4658	Loads the required JS files
4659	Loads the CSS assets
4660	Loads the required libraries
4661	Auto loads services models and helpers
4662	Backwards compatibility .
4663	Displays a site
4664	Prepares the whitelist from the input string
4665	Recursively extract fieldsets from settings array
4666	Get a source by it s slug
4667	Get a format by it s slug
4668	Export data from a source to a specific format
4669	This method is called when the execution of the export has failed .
4670	Adds an item to the list .
4671	Saves the changes
4672	Get all users .
4673	Returns an array of common data for the count query
4674	Formats an object
4675	Override the parent method to add the model and item_id to the data .
4676	Adds the model to the user data .
4677	Get the model class and id
4678	Format an object
4679	Set the current date
4680	Add html for a daily date range
4681	Set the start of the week
4682	Print a debug message .
4683	Submit a bonus .
4684	Assign a task to a team
4685	Assign a contract to an engagement
4686	Get earnings by freelancer
4687	Get earnings from a team .
4688	Get earnings for a given company .
4689	Get earnings for a buyer team
4690	Get earnings for a buyer company
4691	Get list of engagements
4692	Get a specific engagement
4693	get full url
4694	Get list of offers .
4695	Create an action on a contract .
4696	Get a specific authentication report .
4697	Get all user roles
4698	Get roles for a specific user
4699	Invite a candidate to a job
4700	Get a company by agency .
4701	Get user by company .
4702	Get users in a team
4703	Get list of jobs
4704	Get specific job
4705	Create a new job .
4706	Edit a job
4707	Delete a job
4708	Get user info
4709	Get a specific user .
4710	Get task by code
4711	Get room details
4712	Get room by offer id
4713	Get room by application id
4714	Get room by contract
4715	Create a new room .
4716	Send a message to a room
4717	Update room settings
4718	Update room metadata
4719	Get a snapshot by contract id and timestamp
4720	Update a snapshot by contract id and timestamp
4721	Delete a snapshot by contract id and timestamp
4722	Get the active milestone status for a contract .
4723	Get submissions for a milestone
4724	Create a new milestone .
4725	Edit a milestone
4726	Delete a milestone
4727	Makes a request to the API .
4728	Bootstrap the package services .
4729	Get the content body from the given url .
4730	Get accountKit data .
4731	Display a list of contact .
4732	Display contact .
4733	Show contact form .
4734	Show contact for editing .
4735	Update the contact .
4736	Remove the contact .
4737	Display contact gadget .
4738	Get contact field value .
4739	Determine if the given user can view the contact .
4740	Determine if the given user can update the contact .
4741	Determine if the given user can delete the contact .
4742	Display a list of contact .
4743	Parses the HTML content of a link .
4744	Returns the previews for the link .
4745	Returns the preview of the link .
4746	Add a parser .
4747	Remove a parser .
4748	Add default parsers
4749	Convert a hex color to a contrast .
4750	Enclose path .
4751	Convert an interval string to a string .
4752	Boot the response extension .
4753	Get time zones .
4754	Returns an array of options .
4755	Get the model and method for a relation .
4756	Add a model join to the query
4757	Get the AWS client .
4758	Convert a version number to an integer .
4759	Query scope to lookup a value by key .
4760	Set the available_at attribute .
4761	Get the payload attribute .
4762	Convert a number of bytes to a human readable format
4763	Get time offset
4764	Format a number of seconds .
4765	Truncate a string to a certain length .
4766	Add a permission to a user
4767	Confirms a subscription
4768	Create a new topic
4769	Get the attributes of a topic
4770	Get list of subscriptions
4771	List subscriptions to a topic
4772	Get list of topics
4773	Publish a message to a topic
4774	Remove a permission from a topic
4775	Set a topic attribute
4776	Subscribe to a topic
4777	Creates a new platform endpoint
4778	Publish a message to a device
4779	Makes a request to the Amazon S3 .
4780	Convert a SimpleXMLElement to an array
4781	Clear all tasks .
4782	Converts a priority to a number of bytes .
4783	Run the task .
4784	Customize the Spark settings tabs .
4785	Get invitation by token .
4786	Create default settings tabs .
4787	Creates a new coupon from a Stripe Coupon object .
4788	Get a Coupon .
4789	Get the coupon for the current user .
4790	Get team .
4791	Get team roles .
4792	Update the user s profile .
4793	Validates the user profile .
4794	Update the email address of the Stripe customer .
4795	Install the JavaScript for the application .
4796	Install environment variables .
4797	Subscribe to a user .
4798	Change the subscription plan .
4799	Update a card .
4800	Update user extra billing info .
4801	Cancel the subscription .
4802	Resume a subscription .
4803	Download an invoice .
4804	Set or get the price .
4805	Currency symbol getter and setter .
4806	Set or get trial days
4807	Get or set the tier .
4808	Set or get the features .
4809	Get the current user .
4810	Create a new user from a registration request .
4811	Creates a new user .
4812	Create a default user .
4813	Create subscription on stripe .
4814	Register a new TwoFactorAuthenticatable user .
4815	Check if the given token is valid .
4816	Delete a user .
4817	Display the settings dashboard .
4818	Invite a user by email .
4819	Remove user by id .
4820	Invite a user to a team .
4821	Accept a team invitation .
4822	Make a new Tab instance .
4823	Get a list of tabs that can be displayed .
4824	Define the resources .
4825	Define services .
4826	Notify the user about an invoice .
4827	Handle invoice payment succeeded .
4828	Create team .
4829	Get all teams for a given user .
4830	Get pending invitations for a user .
4831	Attach a user to a team by an invitation token .
4832	Find a plan by its ID .
4833	Get plans by tier .
4834	Get the current team .
4835	Check if the user owns the given team .
4836	Get team role .
4837	Store a new team .
4838	Show the form for editing the specified team .
4839	Update team .
4840	Switch the current team .
4841	Update a team member .
4842	Remove team member .
4843	Leave a team .
4844	Remove the specified team .
4845	Call a custom validator .
4846	Call a custom updater .
4847	Update the user s password .
4848	Enable Two Factor Authentication .
4849	Validate enabling Two Factor Auth .
4850	Disable Two Factor Authentication
4851	Check if the user is authenticated .
4852	Log the user out and redirect to the token screen .
4853	Check if the given token is valid .
4854	Display registration page .
4855	Validates the registration request .
4856	Validate the default registration .
4857	Validate the coupon code .
4858	Logout the user .
4859	Flash a message to the user .
4860	Creates a new event instance .
4861	Registers an exception .
4862	Export an exception .
4863	Import an exception .
4864	Normalizes an event .
4865	Returns a wrapper for the given handler .
4866	Creates a cached event .
4867	Check if an event has been cached .
4868	Get a cached event .
4869	Remove a cached event .
4870	Creates a wrapper for an event handler .
4871	Exports an exception .
4872	Imports an exception .
4873	Removes a WordPress hook .
4874	Replace a WordPress hook .
4875	Get the number of busy messages .
4876	Clears the reference bag .
4877	Sends a message to the pool .
4878	Derefides a task from the queue .
4879	Bootstraps the event loop .
4880	Applies a function to each element of an array .
4881	Applies a function to all elements of an array .
4882	Invokes a function on all elements of an array .
4883	Executes a function in parallel with the given pool .
4884	Converts an array of errors into a MultiReasonException .
4885	Sets the number of arguments .
4886	Run a WordPress hook .
4887	Apply filters to a value .
4888	Adds a filter to the WordPress filter stack .
4889	Wraps the given function result in a promise .
4890	Resumes the connection .
4891	Stop the event loop .
4892	Destroys the socket .
4893	Returns the socket for the given worker .
4894	Removes the socket associated with the worker .
4895	Prepares a worker for sending messages .
4896	Attach a method handler to an event .
4897	Hash a callable .
4898	Write data to the stream .
4899	Pipe this stream to a writable stream .
4900	Handles data received from the socket .
4901	Sends data to the socket .
4902	Check socket errors .
4903	Removes the read listener from the socket .
4904	Removes the write listener from the socket .
4905	Decode a phoebe message .
4906	Attaches the internal timer to the event loop .
4907	Cancels the timer .
4908	Submits a work to a worker .
4909	Submits a work to a worker .
4910	Submits a task .
4911	Submits a task to a worker .
4912	Stops a worker .
4913	Removes a worker from the queue .
4914	Sends a message to a worker .
4915	Broadcasts a message to all workers .
4916	The timer tick .
4917	Internal timer tick .
4918	Spawn a worker .
4919	Checks if the worker is still running .
4920	Checks if the worker is still running and terminates .
4921	Handles a message received from a worker .
4922	Handles the closing of a worker stream .
4923	Read bytes from the stream .
4924	Read a UUID from the stream .
4925	Read a list from the stream .
4926	Read a map from the stream .
4927	Read a varint from the data .
4928	Read a decimal from the stream .
4929	Register BulkSms service .
4930	Bootstrap the service provider .
4931	Send a message to a recipient
4932	Validates the response from the API .
4933	Send multiple bulk messages
4934	Get the status for a given batch id .
4935	Send the batch
4936	Generate the CSV representation of the messages .
4937	Send the message .
4938	Sets the message .
4939	Calculate the number of characters to concatenate .
4940	Parse the number .
4941	Send a batch request .
4942	Finds dynamic entities by filters .
4943	Returns the number of dynamic records matching the given filters .
4944	Add filter to query builder .
4945	Add a search filter to the query builder .
4946	Add date range filter to query builder .
4947	Get the value of a field .
4948	Get all form fields .
4949	Build config by dynamic .
4950	Build configuration by type and form data .
4951	Build admin mail configuration by dynamic .
4952	Build website mail configuration by dynamic .
4953	Get file fields by dynamic .
4954	Get collection id by dynamic .
4955	Get email from dynamic .
4956	Get email address and name .
4957	Creates a form for the given parameters .
4958	Creates a dynamic form .
4959	Loads form entity .
4960	Returns default values for the given form entity .
4961	Returns the current webspace key .
4962	Check if the given checksum is valid .
4963	Get the checksum for the given parameters .
4964	Returns a list of dynamic entries .
4965	Returns all fields .
4966	Deletes a dynamic .
4967	Returns filters from request .
4968	Loads form from request .
4969	Convert a value to a string .
4970	Get media urls .
4971	Returns the download url .
4972	Returns the choices for the given translation .
4973	Get choice options .
4974	Get form by id .
4975	Handle the request .
4976	Returns the translation for the given locale .
4977	Get a field by key .
4978	Get fields not in array .
4979	Serializes the form for the given locale .
4980	Form action .
4981	This method renders the form and returns the response .
4982	Handles the submit of the form .
4983	Handles the form only if it is submitted .
4984	Returns a CSRF token .
4985	Get form errors .
4986	Handle the form .
4987	Saves the form data .
4988	Upload media .
4989	Maps media ids to the entity .
4990	Get media data .
4991	Get MailChimp lists .
4992	Get the builder .
4993	Returns the block prefix .
4994	Creates a new collection .
4995	Loads the collection with the given key .
4996	Get item width number .
4997	Get the last width of an item .
4998	Throws an exception .
4999	Sets the hostname .
5000	Sets the unix socket
5001	Method to set property memory
5002	Sets the file path .
5003	Sets the name of the database .
5004	Sets the character encoding to use .
5005	Ensure that the connection is established .
5006	Configures the connection .
5007	Executes a query and returns the results .
5008	Get a list of queues .
5009	Get a queue .
5010	Send a message to a queue
5011	Send multiple messages to a queue
5012	Get message by id
5013	Touch a message
5014	Release a message
5015	Add alerts to a queue .
5016	Delete an alert by id
5017	Delete a queue .
5018	Update a queue .
5019	Create a new queue .
5020	Replace subscribers hash for a queue .
5021	Remove a subscriber from a queue
5022	Output data as JSON .
5023	Output XML .
5024	Generate XML from array or object .
5025	Output data as a csv .
5026	Flattens an array
5027	Execute the command .
5028	Format the server statistics .
5029	Formats the usage of a file
5030	Format the uptime .
5031	Add a server to the memory manager
5032	Add multiple servers .
5033	Try to connect to the server .
5034	Get a value from the cache .
5035	Sets a value in the cache .
5036	Delete a value from the cache .
5037	Set Cache Client Interface
5038	Get a value from the cache
5039	Delete a value from the cache
5040	Makes an InvalidArgumentException for the given data .
5041	Populates the given builder with data from the given map .
5042	Set the options .
5043	Set the payload notification .
5044	Set the payload data .
5045	Encode a string for CDATA .
5046	Returns a non - authentication URL for the given action .
5047	Returns the authentication URL for the given action and parameters .
5048	Returns the URL for an advanced authentication request .
5049	Get a simple authentication URL .
5050	Returns the HTTP authentication URL .
5051	Ensure the channel parameter is set .
5052	Sets the product ID .
5053	Get the similar attributes .
5054	Get the similar records .
5055	Writes a string to the file .
5056	Autoload a class .
5057	Set the output target .
5058	Trigger data import
5059	Trigger suggest import
5060	Applies mapping rules to parameters .
5061	Ensure the channel parameter is set .
5062	Add required parameters .
5063	Adds an appender to the pool .
5064	Get appender by name .
5065	Log a trace message .
5066	Log a debug message .
5067	Log a message with priority warn .
5068	Logs a message with the specified level .
5069	Logs a logging event .
5070	Forced log .
5071	Removes an appender .
5072	Returns the effective level of this logger .
5073	Returns the logger hierarchy .
5074	Returns the logger with the given name .
5075	Resets the configuration .
5076	Configure the application .
5077	Returns the configured LoggerConfigurator instance .
5078	Sets the record count .
5079	Add product IDs to the request .
5080	Get recommendations .
5081	Track a click .
5082	Track a cart .
5083	Track a checkout .
5084	Track a recommendation click .
5085	Track the login .
5086	Sets the list of product IDs .
5087	Get the comparable attributes .
5088	Get the compared records .
5089	Formats the given event .
5090	Set a boolean value .
5091	Set a level value for a property .
5092	Set a file size value .
5093	Set the given value as a numeric value .
5094	Sets a string value for the given property .
5095	Returns information about the current location .
5096	Get the current time .
5097	Returns the elapsed time of the event .
5098	Get the request object
5099	Get a tag cloud .
5100	Sets the word count
5101	Add feedback .
5102	Sets the product numbers .
5103	Add product numbers to the request .
5104	Set the page id .
5105	Makes the request to get product campaigns .
5106	Make shopping cart campaign .
5107	Get all campaigns .
5108	Get raw product campaigns
5109	Add a converter to the converter chain .
5110	Returns a LoggerPatternConverter for the given word .
5111	Parses the modifiers into a LoggerFormattingInfo object .
5112	Sets the level of the logger
5113	Adds a renderer to the map .
5114	Sets the default renderer .
5115	Get a class by its name .
5116	Get whitelist server parameters
5117	Load a configuration file .
5118	Converts a configuration file to a configuration array .
5119	Parses a logger configuration value .
5120	Parses an appender .
5121	Parse the renderer .
5122	Appends an event to syslog .
5123	Parses the syslog option .
5124	Parses the syslog facility .
5125	Parse syslog priority .
5126	Append an event to the mongo collection .
5127	Format an exception as an array .
5128	Close the collection .
5129	Configure the logger .
5130	Creates a layout for an appender .
5131	Set the idsOnly flag
5132	Returns the value of the followSearch parameter
5133	Add a filter to the chain .
5134	Sets the response .
5135	Sets the session ID .
5136	Checks if another LoggerLevel is equal to this one .
5137	Returns an instance of the OFF logger level .
5138	Returns the fatal logger level .
5139	Returns the error logger level
5140	Returns the logger level for warn messages
5141	Returns the info logger level
5142	Returns the logger level for debug messages .
5143	Returns the trace logger level
5144	Returns the logging level for all levels .
5145	Converts an integer to a PHP log level .
5146	Get system property .
5147	Converts the given value to a logger level .
5148	Convert given value to string .
5149	Substitute constants in a string .
5150	Get a logger by name .
5151	Returns the request target .
5152	Activates the logger options .
5153	Formats the given event .
5154	Add a filter to the chain .
5155	Checks if the given level is as severe as the configured threshold .
5156	Log a warning message .
5157	Get the suggestions .
5158	Get the class name for a given class name
5159	Roll over the log file .
5160	Connects to the database and activates the options .
5161	Appends a logging event to the database .
5162	Formats the given event .
5163	Generates a URL based on the given parameters .
5164	Get the feedback for a specific label .
5165	Get pushed products .
5166	Returns an array of all active questions for this campaign .
5167	Returns the advisors tree .
5168	Activate options .
5169	Append an event to the logger .
5170	Find a permission by its ID .
5171	Find a permission by its value .
5172	Render an item
5173	Setup the layout .
5174	Get the list of users .
5175	Show the form for creating a new user
5176	Create a new user
5177	Attempt to activate a user .
5178	Show a user .
5179	Display a list of groups
5180	Update permissions for a group
5181	Delete a user from a group
5182	Add a user to a group
5183	Validates a group .
5184	Load the includes .
5185	Register helpers .
5186	Show the dashboard page .
5187	Login to Sentry
5188	Get permissions list .
5189	Creates a new permission
5190	Delete a permission .
5191	Paginate the pdf
5192	Authenticates a user .
5193	Generate a nonce .
5194	Check if a flag is set
5195	Returns the rule for the given flag .
5196	Returns true if the flag expects a parameter .
5197	Check if the given flag is required .
5198	Checks if the given flag is optional .
5199	Parses the command line arguments .
5200	Checks if a string is a parameter .
5201	Order parameters .
5202	Authenticates the request .
5203	Returns the Report API
5204	Returns the permissions API
5205	Returns the company API
5206	Get the OAuth API
5207	Makes a request to the API .
5208	Get a list of report elements .
5209	Get all metrics for a report .
5210	Retry until the report is not ready .
5211	Get the sleep seconds .
5212	Parses an array of options .
5213	Get images .
5214	Returns a collection of images .
5215	Get a list of video segments .
5216	Write a string to stdout .
5217	Get the table definition .
5218	Returns the PHP code for dropping a table .
5219	Returns the code to drop a table .
5220	Get the key definition for a table .
5221	Returns the definition for dropping a primary key .
5222	Get table foreign key definition
5223	Generate code to drop all foreign keys from a table .
5224	Get column definition .
5225	Get primary key .
5226	Get table comment definition .
5227	Get the schema type for a column .
5228	Creates the other column definition .
5229	Lists all tables .
5230	Generate migration file .
5231	Create table .
5232	Drop table .
5233	Generate a file for the given table and function .
5234	Prints out a table s data .
5235	Returns the parameters for the function .
5236	Prints out the start of a string .
5237	End a string .
5238	Output conclusion .
5239	Fetch the webservices .
5240	This method is used to populate the response .
5241	Set Webservices URL
5242	Return a list of groups .
5243	Get a group by DN .
5244	Return a list of users .
5245	Get a user by its GUID .
5246	Get a user by DN .
5247	Get a user by email address .
5248	Get a user by username .
5249	Returns the canonical username for the given email address .
5250	Get LDAP group members for a given DN
5251	Update a group from LDAP
5252	Creates a new LDAP user .
5253	Create a new LDAP group
5254	Update an LDAP user from a Member object
5255	Update LDAP groups for a given member
5256	Change the password of a member
5257	Delete an LDAP member
5258	Updates an entry in the index .
5259	Connect to the server
5260	Disconnects from the server .
5261	Receive a string from the socket
5262	Sends a string to the socket .
5263	Encode a string .
5264	Decode a string .
5265	Read a response from the server .
5266	Authenticates the user with the given key .
5267	Sleep until the response time has been reached .
5268	Creates a new LDAP user in LDAP .
5269	Write the object without syncing .
5270	Get the message from the session
5271	Get the form used to reset the password
5272	Send a password reset link to a user
5273	Perform a search on the LDAP server .
5274	Get a group by GUID .
5275	Change the password of an LDAP entry .
5276	Reset the password for a given user .
5277	Moves an entry from one directory to another .
5278	Attempt to authenticate the user using the LDAPService
5279	Tries to authenticate using the configured fallback authenticator class .
5280	This method is called when the user is redirected to the login page
5281	Outputs the SP metadata .
5282	Convert a hex string to little endian .
5283	Select callback .
5284	Selects an item from the index .
5285	Splits a hash into a hashFunc and salt .
5286	Create a new database instance .
5287	Get table definition by table name .
5288	Get all tables
5289	Fixes the indexes of a table .
5290	Compare two indexes .
5291	Get one row from a table .
5292	Build index name based on table name and index definition .
5293	Encode data .
5294	Generate a random key .
5295	Get supported info .
5296	Generate a HMAC .
5297	Verify the hmac .
5298	Verify the timestamp .
5299	Remove the last dot from the string .
5300	Push an item onto the end of the string .
5301	Add a value to the beginning of a string .
5302	Return error message .
5303	Add an error .
5304	Get or set the main message
5305	Get or set the status of the response
5306	Get error message .
5307	Returns all errors as a flat array
5308	Check if a field is valid .
5309	Parses a schema array .
5310	Add a validator that requires one of the given fields .
5311	Validates the data against the schema .
5312	Validates a single field .
5313	Validates an array .
5314	Validate base64 .
5315	Validates a boolean value .
5316	Validate that a value is a valid datetime .
5317	Validate that the value is a float .
5318	Validate that the given value is an integer
5319	Validates an object .
5320	Validates a required value .
5321	Validate that a value is a string
5322	Validate that a value is a timestamp .
5323	Get all available addons .
5324	Bootstraps all enabled addons .
5325	Get data from cache .
5326	Get the class map for a given classname .
5327	Get the enabled addons .
5328	Returns information about an addon .
5329	Scan a directory for an addon recursively .
5330	Scan a directory for add - on classes .
5331	Scan the given directory for addons .
5332	Start an addon .
5333	Returns the headers from the request context .
5334	Call a user - defined function .
5335	Binds a callback to an event .
5336	Binds a class to an event .
5337	Dump all event handlers .
5338	Fires all callbacks for an event
5339	Fire all callbacks for a given event .
5340	Fires the filter for the given event .
5341	Check if a function exists .
5342	Get event name from callback
5343	Get handlers by name .
5344	Check if an event has a handler .
5345	Check if a method exists on an object .
5346	Returns the value for the given driver .
5347	Sets the value for the given driver .
5348	Splits a hash into a stored hash and a salt .
5349	Get or set the default config path .
5350	Get a value from the data array
5351	Load a config file .
5352	Save an array to the config file .
5353	Matches the given request against all registered routes .
5354	Add a route to the router .
5355	Finalize the response .
5356	Check if an action exists on an object .
5357	Returns the allowed methods for the given object and action .
5358	Check if the route matches the request .
5359	Check if a condition fails the given value .
5360	Get or set the current response .
5361	Create a response from an exception or an array .
5362	Set or get the Content - Type header
5363	Content asset getter and setter .
5364	Sets the Content - Type based on the Accept header .
5365	Returns the HTTP status message .
5366	Set a cookie .
5367	Get or set global cookies .
5368	Set or get meta data
5369	Set or get the data .
5370	Add a header to the message .
5371	Get or set global headers .
5372	Normalize header name .
5373	Send headers to the client .
5374	Alter a table .
5375	Rename table .
5376	Drops an index .
5377	Create an index on a table .
5378	Force the type of a value .
5379	Get the primary key value from a row .
5380	Get table names .
5381	Creates a new route instance .
5382	Get or set the conditions .
5383	Set or get methods
5384	Set or get mappings .
5385	Get or set global mappings .
5386	Check if a property is mapped .
5387	Get mapped data .
5388	Checks if the given request matches the allowed methods .
5389	Get or set the route pattern .
5390	Dispatches the callback .
5391	Returns the regular expression for a route pattern .
5392	Execute a SQL query .
5393	Build a select statement .
5394	Returns the SQL for a list of values .
5395	Build an insert statement .
5396	Build an upsert statement .
5397	Build a column definition string .
5398	Build index definition string .
5399	Get column orders
5400	Get the formats from the database .
5401	Translate a row
5402	Verify a password against a hash .
5403	Encode a string using the ITOA64 algorithm .
5404	Get or set the current request .
5405	Get the default environment .
5406	Get the global environment .
5407	Parse server variables .
5408	Override environment variables .
5409	Get the value of an environment variable .
5410	Sets an environment variable
5411	Get all headers from the request .
5412	Returns the host and port of the URL .
5413	Set the extension to use .
5414	Set path extension
5415	Set full path
5416	Set the server port .
5417	Returns the query string or a single value .
5418	Set a query parameter
5419	Returns the value of an input parameter .
5420	Get data from input or query .
5421	Sets an input or query parameter .
5422	Returns the full URL of the request .
5423	Set the URL .
5424	Makes a URL from a path .
5425	Splits a file path into a path and extension .
5426	Reset the schema .
5427	Add a column to the schema .
5428	Build column definition .
5429	Add a primary key column .
5430	Execute the query .
5431	Get or set the table name .
5432	Add an index to the table .
5433	Show robots . txt
5434	Get all entries .
5435	Find a resource by id .
5436	Validate the attribute values
5437	Returns the value of an attribute .
5438	Sets the attribute values .
5439	Check if API method is supported
5440	Check required attributes
5441	Check if the Judo ID is set in the request .
5442	Get the summary of the error .
5443	Get a model instance .
5444	Get the summary of the error .
5445	Sends a GET request to the API .
5446	Sends a POST request to the specified resource .
5447	It coerces the attributes into the correct data type .
5448	Validates the data .
5449	Checks if a key exists in an array .
5450	Render toastr . js
5451	Add a notification to the session
5452	Add a new delivery to the queue
5453	Converts a job object into an array .
5454	Convert STUART response to Job object
5455	Frees the queue .
5456	Frees the datagram .
5457	Create a new DashboardChart
5458	Handle a has many relation request
5459	Sort an array of items
5460	Return a link to the editor
5461	Creates a form for editing a has many relation
5462	Save the details for the dashboard panel
5463	Return a list of RSS items for the feed .
5464	Get a list of recent edits
5465	If the Member has not been configured yet create a copy of all Dashboard panels .
5466	Answers the template name for the receiver .
5467	Return the link to view all pages
5468	Return the link to create a new record
5469	Get a list of GridFields for a given page
5470	Get the datafield for the current subject page
5471	Get the tab name for the grid
5472	Return a list of items for editing
5473	Get the grid fields for a given page
5474	Request account data
5475	Cleans the error response .
5476	Process filter string
5477	Account object mapper
5478	Convert a report object mapper to an array of results
5479	Check if a key exists in an array
5480	Fetch a token from GAPI
5481	Get url with get variables
5482	Make a POST request to the API
5483	Make a GET request .
5484	Makes a request to the server
5485	Makes a cURL request .
5486	Perform a GET or POST request .
5487	Get the list of recent files
5488	Duplicate this dashboard panel
5489	Answers the template name for the extended object .
5490	Return a link to view all models
5491	Return a list of all items in the ModelAdminModel
5492	Return a JSON representation of the models managed by a panel
5493	Provide permissions .
5494	Set the sorting order for the dashboard panels
5495	Set the default configuration for all new members
5496	Apply the dashboard configuration to all members
5497	Return the panel holder for the current user
5498	Delete the panel
5499	Creates a form to configure the dashboard .
5500	Save the configuration .
5501	Answers the icon for the receiver .
5502	Convert seconds to minutes
5503	Return an instance of the GAPI .
5504	Add custom fields to the analytics form
5505	Check if a key file is configured
5506	Answers the path for the receiver .
5507	Generate the title for the chart
5508	Read a floating point value from the file .
5509	Read a segment from the file .
5510	Converts a hex value to an integer .
5511	Reads a number of bytes from the file .
5512	Read a signed value from the stream .
5513	Read a 16 - bit int from the file .
5514	Read a signed integer from the stream .
5515	Read 64 - bit integer from a binary reader .
5516	Read a signed integer from the stream .
5517	Export the trace data .
5518	Get the callback .
5519	Parses the robots . txt file .
5520	Get applying lines from robots . txt
5521	Build regular expressions from applying lines
5522	Get Robots . txt content
5523	Returns the robots . txt URL for the given URL descriptor .
5524	Initializes the crawler process .
5525	Run the crawl with a number of processes .
5526	Starts the child process .
5527	Checks if the crawler aborts .
5528	Creates the working directory for the crawler
5529	Returns a PHPCrawlerProcessReport representing the status of the crawler .
5530	adds an entry to the link priority array
5531	Sets the URL filter s general follow mode
5532	Sets the traffic limit
5533	Set working directory
5534	Set proxy for the current request .
5535	Set socket connection timeout
5536	Set socket read timeout
5537	Resume a previously aborted crawling process
5538	Sets the starting URL of the crawler .
5539	Removes all non - redirect URLs from the PHPCrawlerDocumentInfo .
5540	Checks if the given URL matches the rules of this crawler .
5541	Adds a regex to the URL filter rules .
5542	Add multiple URL filter rules at once
5543	Marks a URL as followed by the current user .
5544	Checks if there are any URLs in the cache
5545	Returns an array of all URLs .
5546	Add multiple URLs at once
5547	Start a benchmark .
5548	Stops a benchmark .
5549	Reset all benchmarks .
5550	Get all benchmarks .
5551	Returns the current microtime .
5552	Open the cache connection .
5553	Returns the unique hash of the URL .
5554	Returns the priority of a given URL
5555	Adds a link priority to the list .
5556	Add link priorities
5557	Adds a PHPCrawlerDocumentInfo object to the queue .
5558	Get the next document info from the database .
5559	Creates a PHPCrawlerUrlDescriptor from a string URL .
5560	Sets the source URL .
5561	Finds a redirect link in the given HTTP header and adds it to the LinkCache .
5562	Adds an array of post data to the crawler
5563	Updates the status of the crawler
5564	Registers a child PID
5565	Get child pids
5566	Kill all child processes
5567	Get the IP address of a host
5568	Returns the host of the given URL in the cache .
5569	Removes a visitor from the stack .
5570	Traverses the expression and returns the result .
5571	Filters the given collection using the given expression .
5572	Creates a new method object .
5573	Format a value as a string .
5574	Format an array of values .
5575	Write a value to the configuration file .
5576	Consumes the value of a variable .
5577	Get all of the configured engines .
5578	Expands a flat array into a flat array .
5579	Splits a condition token into a token and conditions .
5580	Check if a key matches a token .
5581	Cache a value .
5582	Sets the message instances .
5583	Returns a formatted stack trace .
5584	Returns a string representation of a variable .
5585	Listen for messages from Discord .
5586	Parses a message and returns it as an array .
5587	Get the full path to a configuration file .
5588	Load a plugin .
5589	Load the config file .
5590	Load all plugins .
5591	Bootstrap a plugin .
5592	Read a value from the config file
5593	Set config value .
5594	Read a configuration value .
5595	Load modules from a directory .
5596	Check plugins for a given module .
5597	Unload a module .
5598	Reload a module .
5599	Time the module has been loaded .
5600	Returns the modified time of a module .
5601	Get module by name .
5602	Check if a module exists .
5603	Sets a module at a given offset .
5604	Returns the value associated with the given key .
5605	Set a value in the cache .
5606	Get multiple values from cache .
5607	Sets multiple values at once .
5608	Call a method on the connection .
5609	Log the start time of the profile .
5610	Logs a message after returning a value .
5611	Get the profile key .
5612	Adds a prefix to all keys in the command arguments .
5613	Adds a prefix to all keys in the command arguments .
5614	Evaluate the keys of a command .
5615	Sets the expiration time .
5616	Sets the length of the message .
5617	Read data from the socket .
5618	Send data to the server .
5619	Check if command can be executed .
5620	Set the protocol version .
5621	Process the data and return the tokens .
5622	Get the last key in the stack
5623	Prepare the OrientDB command .
5624	Execute the command .
5625	Read raw data from the socket
5626	Read an unsigned long from the stream .
5627	Read a string from the stream .
5628	Read bytes from the stream .
5629	Read a record from the stream .
5630	Add a byte string to the buffer
5631	Unpacks 64 - bit integer into signed 64 - bit integer .
5632	Reset the data .
5633	Returns the properties of the Fusion object .
5634	Renders a component .
5635	Returns a string of class names .
5636	Get the list of issuers .
5637	Get allowed products .
5638	Process products .
5639	Create an Ideal Order .
5640	Create a new SEPA order .
5641	Create a new sofort order .
5642	Create a new Payconic order .
5643	Create a new credit card order .
5644	Create a bancontact order .
5645	Create a Cash on Delivery Order .
5646	Create a new Klarna order .
5647	Create an order using Paypal .
5648	Create a new Homepay order .
5649	Create a new order after a Pay .
5650	Create a new order .
5651	Get an order by ID .
5652	Create a new order .
5653	Set the captured status of an order .
5654	Create a new payment method with IDEAL .
5655	Create a new payment method with a credit card .
5656	Factory method to create a payment method with SEPA .
5657	Factory method to create a new payment method with SOFORT .
5658	Factory method to create a new payment method with Bancontact .
5659	Create a new payment method with Paypal .
5660	Factory method for the HOMEPAY payment method .
5661	Create a new payment method with Payconiq .
5662	Factory method to create a new Transaction instance .
5663	Remove empty values from an array .
5664	Creates a new Client instance .
5665	Get endpoint by product name .
5666	Checks if a string is a valid ISO 3166 number .
5667	Build request body
5668	Execute a payment
5669	Capture a payment
5670	Perform an authorization request .
5671	Create a new sale payment
5672	Get an access token .
5673	Builds a Link object from provided data
5674	Build Capture object from Paypal data .
5675	Builds an Amount object from provided data .
5676	Build array from array
5677	Build an access token from an array of data
5678	Build an array of transactions .
5679	Builds an array from an array of transactions .
5680	Send a request and return the response .
5681	Build payment object from array
5682	Build an authorization object from an array
5683	Builds a Payer object from provided data
5684	Build an array from a payer object .
5685	Builds an authorization object from an array .
5686	Make a safe version of a string .
5687	Make a safe string .
5688	Get form attribute value .
5689	Determine if the model has a form mutator .
5690	Get the ReflectionClass instance .
5691	Render a favicon .
5692	Create a link element .
5693	Creates an ol element .
5694	Create an ul element .
5695	Get the value of a model attribute .
5696	shortcut for text input
5697	Create an email input field .
5698	Create a tel input field .
5699	Create a number input field .
5700	Create a URL input field .
5701	Create a color field .
5702	Get checkbox checked state .
5703	Get url action .
5704	Get route action .
5705	Get controller action .
5706	Inserts a string at a given position .
5707	Searches for a given string in the string .
5708	Sets the value at the given offset .
5709	Unset an element at the given index .
5710	Fetch data from a resource .
5711	Parse a file .
5712	Get number of lines in a file
5713	Unzip a zip file .
5714	Get url size
5715	Returns an array of files .
5716	Frees the stream .
5717	Removes the next string from the buffer .
5718	Seeks to a given position .
5719	Inserts the given string into the current position .
5720	Replaces the current element with the given string .
5721	Removes the current element from the buffer .
5722	Publish a directory .
5723	Closes the stream .
5724	Scope the query to include the admin1 country .
5725	Add country info to a query .
5726	Scope by city .
5727	Scope a query by country .
5728	Scope a query to search by feature
5729	Creates all pending redirects .
5730	Returns true if the URI of the given node has changed in the target workspace .
5731	Builds the redirects for the given node identifier .
5732	Creates a new redirect for the given node .
5733	Removes the redirect for the given node if enabled .
5734	Checks if the given node is restricted by the current node type .
5735	Check if the given node is restricted by the path prefix .
5736	Returns the list of active domain names for the given content context .
5737	Returns the UriBuilder instance .
5738	Load a name from a URL .
5739	Check if a page exists .
5740	Render the page picker
5741	Label callback .
5742	Initializes the plugin .
5743	Add plugin action links .
5744	Get the version of the blobmime plugin .
5745	Get remote version .
5746	Check file type and extension .
5747	Check file type and extension for SVG .
5748	Parse contributors header from readme file .
5749	Get plugin slug by path .
5750	Get remote contributors .
5751	Validates the file .
5752	Returns the class loader that supports the given data
5753	Loads the content of the file .
5754	Create the options for the application .
5755	Returns an array of allowed tags .
5756	Get allowed protocols .
5757	Get allowed domains .
5758	Sanitize a domain .
5759	Sanitize an attribute value .
5760	Sanitize an IRI value .
5761	Sanitize a CSS IRI .
5762	Load SVG .
5763	Strip comments from a SVG string
5764	Replicates the flags of a resource .
5765	Makes the loaders based on the given options .
5766	Pre - parse loaders .
5767	Make namespace loaders .
5768	Parse options and merge with default options .
5769	Make the cache provider .
5770	Make paths .
5771	Make the loader instance .
5772	Makes the variables provider .
5773	Load data from the cache .
5774	Merge the globals into the content .
5775	Get a resource by its filename .
5776	Create the current prefix .
5777	Creates the resources .
5778	Add content to the page .
5779	Get supported files in directory .
5780	Merge the content from the parent to the current content .
5781	Internal method to get a value from an array .
5782	Check if an array key exists
5783	Parse a value according to the variable type
5784	Parse a value for a given type .
5785	Fetch variable matches .
5786	Fetch a variable from the store .
5787	Check if a variable has been defined .
5788	Replaces variables with their respective values .
5789	Export SVG to string
5790	Remove nodes from the DOM .
5791	Remove a node from the DOM .
5792	Set the base path of the project .
5793	Make file and filename paths .
5794	Search for resources .
5795	Parse the content .
5796	Use imports .
5797	Import a file into a collection of resources .
5798	Creates a resource provider .
5799	Creates the import name for the given resource .
5800	Import a resource provider .
5801	Check if a value is a boolean .
5802	Returns a boolean value .
5803	Get mime aliases .
5804	Update the extension of a filename .
5805	Check mime type alias .
5806	Check allowed mime types alias .
5807	Load the content of the config file .
5808	Get supported files recursively .
5809	Makes an array of resources .
5810	Check if cache is hit .
5811	Make cache file
5812	Set the version of the asset
5813	Reads the config file .
5814	Send a REST request .
5815	Set cURL options
5816	Execute a GET request
5817	Execute a PUT request
5818	Execute a DELETE request
5819	Executes a POST request .
5820	Execute a HEAD request
5821	Execute a cURL request .
5822	Install an extension
5823	Add one or more buckets .
5824	Read the response from the server .
5825	Writes the content to the file .
5826	Check if an XML string is valid .
5827	Sets up a range element .
5828	Get the values as an element .
5829	Add values - options
5830	Add aggregate to element .
5831	Returns an array of parameters that can be passed to the query .
5832	Retrieve search results
5833	Retrieve a value for a key .
5834	Retrieve the value of a key value element
5835	Highlights the given content with the given class .
5836	Returns a RESTClient instance .
5837	Get the API client .
5838	Get the admin client .
5839	Get the REST API instance .
5840	Get a database instance .
5841	Get the options instance .
5842	Autoload a class .
5843	Get the options as XML .
5844	Add an option to the XML document .
5845	Add an XML option .
5846	Read the config file
5847	Write the query to the server
5848	Delete a query .
5849	Set search options .
5850	Read a document from the server
5851	Write the document to the server
5852	Delete a document
5853	Read metadata from the server .
5854	Write metadata .
5855	Delete metadata .
5856	Set content from file
5857	Get the mime type of a file
5858	Log a SOAP call .
5859	Decode a SOAP reply into an associative array .
5860	Convert an associative array to an array
5861	Performs a LDAP sync on the server
5862	Get list of phone names .
5863	List all phones by site .
5864	Search for a phone by name .
5865	Search for a phone .
5866	Get Phone by name
5867	Get directory numbers from a phone record by name
5868	Get a list of device pools .
5869	Get list of site names .
5870	Get a list of lines for a given site .
5871	Get lines details by phone name .
5872	Get all object types for a given site .
5873	Get an object type by name
5874	Delete an object type by UUID
5875	Add capabilities .
5876	Returns the latitude of the file .
5877	Get the longitude in meters
5878	Get body type
5879	Get error message
5880	Get the URL string .
5881	Create a REST API
5882	Delete the API .
5883	Waits until the request is successful .
5884	Check if a resource exists .
5885	Get the term as XML element .
5886	Add term options to the given element .
5887	Add facet options to the given element .
5888	Add fragment scope to the given element .
5889	Set content file .
5890	Get a result by its URI
5891	Get a result by its index
5892	Get a facet by name .
5893	Add one or more constraints .
5894	Get the extract metadata as an element .
5895	Add an element to the list of preferred elements .
5896	Create the transform - results element .
5897	Add one or more collections .
5898	Delete one or more collections .
5899	Add permissions to the role .
5900	Deletes one or more permissions .
5901	Delete one or more properties .
5902	Returns the metadata as an XML string .
5903	Load permissions from XML .
5904	Enable the service provider .
5905	Sets the container .
5906	Compare fixture and live DB constraints .
5907	Compare fixture indexes with live DB .
5908	Compare field presence .
5909	Get the list of fixtures .
5910	Compare fields that are not in the live DB .
5911	Sets the form type .
5912	Add a horizontal form .
5913	Generates a label .
5914	Get the error message for a given field .
5915	Creates a form group .
5916	Renders a form action .
5917	Create a hyperlink .
5918	Creates an alert
5919	Create a password field .
5920	Create a file input field .
5921	Create a hyperlink .
5922	Create a secure link .
5923	Create a hyperlink to a named route .
5924	Creates a hyperlink to an action .
5925	Create a mailto hyperlink
5926	Creates an alert with no content .
5927	Execute mb_ereg_replace .
5928	Returns the short message of the error .
5929	Get a value from the cache .
5930	Store a value in the cache .
5931	Removes a basket from cart .
5932	Clears all basket items .
5933	Updates an existing basket .
5934	Get literal value
5935	Get the type of a literal
5936	Get the language of a literal
5937	Creates an IRI from a string .
5938	Creates a literal .
5939	Check request md5
5940	Build the XML response .
5941	Initializes the tokenizer .
5942	Tokenize a string .
5943	Decode an obfuscated code .
5944	Obfuscates an identifier .
5945	Creates a default factory instance .
5946	Returns a Statement with group actor .
5947	Returns the Statement with the given ID .
5948	Returns a Statement with the fixtures for the given ID .
5949	Returns a statement with a sub - statement .
5950	Creates an option instance .
5951	Get statement result .
5952	Attaches event listener
5953	Initializes the view helper
5954	Get the last uploaded file
5955	Collect files from event .
5956	Clean the layout .
5957	Attaches the view resolver
5958	Attach PDF transformer to the view .
5959	Resolve pdf file path
5960	Register an option .
5961	Returns an option by name .
5962	Get activity profile document .
5963	Get agent profile document .
5964	Get the state document .
5965	Add behavior .
5966	Add a value to the bucket .
5967	Define a default behavior .
5968	Set the default value .
5969	Executes the behavior .
5970	Get behavior by slug .
5971	Mark default behavior as waived .
5972	Set behavior .
5973	Start metrics for a behavior .
5974	Stop metrics for a behavior .
5975	Execute behavior strategy .
5976	Returns a new collection with every element of the collection .
5977	Get the first item from the collection .
5978	Get the last item from the collection .
5979	Get the maximum value of the collection .
5980	Rejects items from the collection .
5981	Return an array representation of the collection .
5982	Get arrayable items .
5983	Check if a bucket is enabled .
5984	Parse feature map .
5985	Creates a new HashMap with the given items .
5986	Returns a bucket instance .
5987	Set the map .
5988	Creates a builder for a feature .
5989	Set user bucket .
5990	Describe a list of tables .
5991	Describe a table .
5992	Create a set of tables .
5993	Create a new table .
5994	Create multiple fields .
5995	Create a new field .
5996	Create a set of relationships .
5997	Create a relationship .
5998	Update a set of tables .
5999	Update table schema .
6000	Update multiple fields in a table .
6001	Update a table s field .
6002	Updates a table s relationships .
6003	Update a relationship .
6004	Deletes multiple tables .
6005	Delete a table .
6006	Sets the target length of the field .
6007	Truncates a table .
6008	Return a paged result response .
6009	Rewinds the data reader .
6010	Escapes a value for use in LDAP
6011	Adds an entry to the current directory .
6012	Compare an attribute with a value .
6013	Connect to the ldap server .
6014	Enable or disable paging of results .
6015	Binds to the current LDAP directory .
6016	Returns the value of an option in the current entry
6017	Adds a new entry to the current directory .
6018	Deletes an entry from the current directory .
6019	Modifies an entry in the current directory .
6020	Modify an entry in the current directory .
6021	Modify a list of entries in the current directory
6022	Rename an entry in the current directory .
6023	Binds to the current LDAP directory .
6024	Performs an LDAP search .
6025	Sets an option on the current entry .
6026	Verify operation .
6027	Add a set .
6028	Compute the reference set .
6029	Compute the product .
6030	Get resource names for a given type .
6031	Get a resource by type .
6032	Compare two table names .
6033	Creates a SQL statement for creating a primary key .
6034	Creates a view .
6035	Binds a value to a statement .
6036	Extract PDO type .
6037	Extract column type from database type .
6038	Extracts the default value from a column schema .
6039	Add data to the form .
6040	Generates the query based on the given query parameters .
6041	Creates a PSR - 7 request .
6042	Executes an IDruid query .
6043	Set HTTP Method
6044	Sets the protocol
6045	Generates a query string from the query parameters .
6046	Sets the aggregators array .
6047	Sets the filters .
6048	Sets the post aggregators .
6049	Registers required script for the widget .
6050	Validates that all required parameters are set .
6051	Returns the string representation of the object as JSON .
6052	Renders the documentation page
6053	Prepare the database .
6054	Check if a column exists in a table
6055	Returns the type of a column .
6056	Update the given table .
6057	Drop a table .
6058	Drops all tables .
6059	Rename a file or directory .
6060	Execute a SQL statement .
6061	Add media from uploaded file .
6062	Add media from file .
6063	Add data from raw data
6064	Add a file from a URL
6065	Delete all thumbnails and files .
6066	Returns the last modified time of the file .
6067	Returns a unique name for the file .
6068	Delete all thumbnails .
6069	Delete file from disk .
6070	Delete empty directory .
6071	Check if the directory is empty .
6072	Check if a file exists .
6073	Get thumbnail path .
6074	Get thumb filename .
6075	Get default thumb options .
6076	Make thumb file .
6077	Get the public path of the attachment .
6078	Returns the path to a temporary file .
6079	Return the MySQL type for an enum column .
6080	Add a time column .
6081	Add a timestamp type to the column .
6082	Callback function for cURL write .
6083	Main action .
6084	Bootstrap the application .
6085	Normalize a URL .
6086	Add a route to the application
6087	Adds a GET route to the application .
6088	Add a POST route .
6089	Add a PUT route to the application .
6090	Adds a PATCH route .
6091	Add a delete route .
6092	Add options to the application .
6093	Adds a HEAD route to the application .
6094	Render the view .
6095	Get a source by name .
6096	Create a new migration .
6097	Ensure that a migration class does not already exist .
6098	Get stub content .
6099	Get the path to the file .
6100	Scope the query to include the caused by relationship .
6101	Scope the query for the given subject .
6102	Build an array expression .
6103	Get migration paths .
6104	Remove compiled views .
6105	Set parameters .
6106	Set the response headers .
6107	Set proxy .
6108	Set the cookies .
6109	Set a cookie .
6110	Set options .
6111	Send the request and return the response
6112	Make a request to the API .
6113	Build the blueprint .
6114	Build table definition .
6115	Build the commands .
6116	Add an index to the query .
6117	Add a float column to the table .
6118	Add a double column to the table .
6119	Add a decimal column to the table .
6120	Add nullable timestamps .
6121	Add nullable timestamps to the table .
6122	Add morphs to the schema .
6123	Add nullable morphs .
6124	Creates a new column definition .
6125	Create reference name .
6126	Add a value to an array if it does not already exist .
6127	Collapse an array into a single array .
6128	Read a value from an array .
6129	Fetch a value from an array .
6130	Get and remove a value from an array .
6131	Applies a callback to each element of an array .
6132	Explode the given parameters into a value and key .
6133	Return the levenshtein distance of a word to a list of words .
6134	Capitalizes a string .
6135	Returns a string with the first letter capitalized .
6136	Formats a Location .
6137	Register the url
6138	Get composer command .
6139	Build the params .
6140	Build the headers .
6141	Build proxy .
6142	Build the cookie header .
6143	Observe model events .
6144	Register a model event .
6145	Boot Nicer events .
6146	Remove all event listeners for the model .
6147	Create a new location model query .
6148	Get a location by its identifier .
6149	Get location by slug .
6150	Add a message to the message queue .
6151	Overlay a message .
6152	Clear the session .
6153	Add a task .
6154	Register the service provider .
6155	Register the prefix class .
6156	Register the storage service .
6157	Boot the module .
6158	Add a like statement to the query .
6159	Plucks dates from a column .
6160	Find a model by its primary key or create a new one .
6161	Retrieve the currently logged - in user .
6162	Log out the user .
6163	Log a user in .
6164	Returns the user with the given identifier and token .
6165	Retrieve the user with the given credentials .
6166	Register the DB profiler .
6167	Registers the view profiler .
6168	Write the migration file .
6169	Get the events that should be recorded .
6170	Dumps an array .
6171	Returns a unique identifier for the given variable .
6172	Generate a hash for an array .
6173	Check if an array is recursive .
6174	Checks if an object is recursive .
6175	Output a dump of variables .
6176	Main action .
6177	Describe a route .
6178	Add directories .
6179	Normalize the class name .
6180	Tries to load a mapped class .
6181	Require a class .
6182	Load the package manifest .
6183	Write the manifest file .
6184	Load a locale group from the registered drivers .
6185	Load the locale path .
6186	Sets the query constraint .
6187	Parse read data .
6188	Creates a new query instance .
6189	Check if the terminal supports colorization .
6190	Applies colors to a text .
6191	Get ran migrations .
6192	Returns an array of migrations for the given number of steps .
6193	Run all pending migrations .
6194	Run up migration .
6195	Get migrations for rollback .
6196	Rolls back the given migrations .
6197	Reset all migrations .
6198	Reset the migrations .
6199	Run down migration .
6200	Pretend to run migration .
6201	Get migration files .
6202	Clears the loader and compile . php files .
6203	Add a primary key column .
6204	Add a column to the table .
6205	Add a timestampable field .
6206	Add a soft - delete behavior to the model .
6207	Adds a column to the model .
6208	Describes a column type .
6209	Check if an option exists .
6210	Check if the parent id is the same as the old one .
6211	Scope live posts .
6212	Get the path attribute .
6213	Register the crypt class
6214	Generate configuration cache
6215	Returns the SQL to rename a table .
6216	Boots the HasPermalink trait for the model .
6217	Get the slug key .
6218	Find similar slugs .
6219	Execute a query on the database .
6220	Executes a SQL statement .
6221	Describes a table s columns .
6222	Executes an SQL query and returns the first row of the result as an associative array .
6223	Executes an SQL query and returns all rows as an associative array .
6224	Insert a row into a table .
6225	Update a row in a table .
6226	Creates a DELETE statement .
6227	Adds a LIMIT clause to the query .
6228	Check if a table exists .
6229	Check if a view exists .
6230	Creates a new database table .
6231	Creates a view with the given name .
6232	Drops a view .
6233	Adds a column to the table .
6234	Modifies a column in a table .
6235	Drops a column from a table .
6236	Adds a new index to the table .
6237	Drops an index from a table .
6238	Adds a primary key to the table .
6239	Drops a primary key from a table .
6240	Adds a foreign key to the table .
6241	Drops a foreign key from a table .
6242	Describes a table s indexes .
6243	Describes a table s references .
6244	Set table options .
6245	Get query panel .
6246	Adds a column to a table .
6247	Modifies a column .
6248	Drops a table column .
6249	Drops an index .
6250	Adds a primary key to a table .
6251	Drops a foreign key from a table .
6252	Creates a new database table .
6253	Creates a view .
6254	Drops a database table .
6255	Drops a view .
6256	Bind paths in container .
6257	Check if the database exists .
6258	Register the logger .
6259	Bootstrap the service provider .
6260	Get fillable attributes from array .
6261	Check if a key is fillable .
6262	Convert amount from one currency to another .
6263	Check if currency is active .
6264	Get all currencies .
6265	Register modules .
6266	Attaches a listener .
6267	Generate a random reset code .
6268	Complete a password reset .
6269	Check reset password code .
6270	Complete activation .
6271	Asks a question to the user .
6272	Register the currency class .
6273	Route middleware .
6274	Add a middleware to the application .
6275	Returns the ReflectionClass for the given class .
6276	Sets the value of a property of an object .
6277	Returns the value of a property of an object .
6278	Invoke a method on an object .
6279	Save data to the cache .
6280	Check if the cache key exists .
6281	Get user currency .
6282	Returns true if this coordinate is equal to another .
6283	Render a block .
6284	Binds a callback to an event .
6285	Sort events by priority .
6286	Unbind an event or an array of events
6287	Fires an event .
6288	Get the DI instance .
6289	Check if a header exists .
6290	Set request headers .
6291	Build the header array .
6292	Checks if coordinates have the same ellipsoid
6293	Get detailed error message .
6294	Main action .
6295	Register the session service
6296	Converts this Time to a DateTime .
6297	Prepare output file .
6298	Get the code from a PHP file .
6299	Parses a file .
6300	Register the database service
6301	Get node data .
6302	Add a where ancestor of clause to the query .
6303	Add a where between clause to the query .
6304	Add a whereDescendantOf statement to the query .
6305	Get all descendants of a given id .
6306	Add a depth clause to the query .
6307	Wrap the lft and rgt columns in an array .
6308	Determine if this node has children .
6309	Set default order .
6310	Moves a node to a new position .
6311	Make a gap .
6312	Patch query parameters .
6313	Creates a patch expression for a column
6314	Count the number of errors .
6315	Fixes the tree .
6316	Rebuilds the tree from the given data .
6317	Boots the Purgeable trait .
6318	Add attributes to purgeable .
6319	Purges the attributes that should be purged .
6320	Get the original purge value for an attribute .
6321	Get an item from the collection .
6322	Set an item in the collection .
6323	Remove an item from the collection .
6324	Saves all items in the collection .
6325	Load data from file .
6326	Compile a string function .
6327	Main action for the application .
6328	Add the request signature to the response .
6329	Add the header to the response
6330	Get the RateLimiter instance .
6331	Update model attributes .
6332	Log a migration to the database .
6333	Create the repository schema .
6334	Get the table instance .
6335	Returns the database name of the current connection .
6336	Sets the value of an attribute .
6337	Append an attribute to the attribute map .
6338	Sets the content of the element .
6339	Add content to element
6340	Register the given commands .
6341	Generate http - routes cache
6342	Get a list of queries to execute .
6343	Check if a key is too many attempts
6344	Hit the cache .
6345	Get the number of attempts for the given key .
6346	Clear an item from the cache
6347	Returns how long it is available in the cache
6348	Generate dotconst cache
6349	Register the native filesystem instance .
6350	Swap an instance of the facade .
6351	Returns true if the facade should receive a value .
6352	Create a fresh mock instance for the facade .
6353	Check if the facade is a mock .
6354	Resolve facade instance .
6355	Processes a select result .
6356	Process select all results .
6357	Parse template content .
6358	Process update .
6359	Attach events to the event manager .
6360	Detach all events and closures .
6361	Performs a geocode query .
6362	Perform a reverse query .
6363	Get the status for the given ran migrations .
6364	Main action for all routes .
6365	Get HTTP routes infos .
6366	Set cURL options .
6367	Get curl infos
6368	Compile the config files into a PHP constant file .
6369	Start the process .
6370	Waits for the process to exit .
6371	Stop the process .
6372	Close the process .
6373	Start the process and wait for it to exit .
6374	Optimize the memory usage .
6375	Generate the output of the loader
6376	Fills an array with the given value .
6377	Returns the value of a property of an object .
6378	Returns the value of a property of an object .
6379	Get a value from an object using dot notation .
6380	Set a value in a target object .
6381	Registers the error and exception handlers .
6382	Handle an error .
6383	Handles an error .
6384	Resolve a migration file .
6385	Check if log level should be logged .
6386	Use files in the logger .
6387	Use daily files .
6388	Register the logger class .
6389	Setup database connection .
6390	Log sql error
6391	Adds an item to the list .
6392	Returns the value of a property .
6393	Set the value of a property .
6394	Sets the model properties .
6395	Get the original value of a property .
6396	Check if a property has a cast .
6397	Returns an array of dirty properties .
6398	Creates a navbar header .
6399	Add Drop down Submenu
6400	Add a button .
6401	Flush all queued status messages .
6402	Add an item to the body .
6403	Add a CSS to the cascade .
6404	Get gravatar url
6405	Sets a value to the given key .
6406	Get a reference to the database object .
6407	Return a reference to the locale object .
6408	Add parameters to a URL .
6409	Linkify a string .
6410	Add row footer columns
6411	Include a CSS file in the current web page
6412	This method is used to get the URL of the current request .
6413	Build the post data .
6414	Get list of available locales
6415	Convert a language code to a locale code .
6416	Sets the locale to use .
6417	Setup a property .
6418	Returns all status messages .
6419	Get a list of countries .
6420	Add an item to the list .
6421	Sets the object name of the tag .
6422	Sets the color of a string .
6423	Get the color of a type .
6424	Sends a GET request to the specified URL with the given parameters .
6425	Sends a POST request to the specified URL with the given parameters .
6426	Sends a DELETE request to the specified URL with the given parameters .
6427	Get the key from the data .
6428	Unset a value from the data array .
6429	Reindexes an array by a column
6430	Draws all of the page parts .
6431	Set up the context .
6432	Returns the number of items in the list .
6433	Returns true if the given element is empty .
6434	Add slashes to a string .
6435	Connect to the database
6436	Insert data into table
6437	Prepares the SQL for a select statement .
6438	Sets the key column and table of the current object .
6439	Add a slide to the carousel
6440	Finalize the carousel .
6441	Add a message to all loggers
6442	Add a status object to the log
6443	Get tag name
6444	Get a tag property .
6445	Finalize the modal .
6446	Clone the runner and set the next run time .
6447	Add ajax tab
6448	Print trace data
6449	Attaches an event to the observable .
6450	Attaches an observer to an event .
6451	Detaches an observer from an event .
6452	Detach all events for an observer .
6453	Validates a pod .
6454	Returns the connection object .
6455	Returns the handler driver .
6456	Generate a binding parameter .
6457	Normalises exceptions thrown by the driver .
6458	Creates a database with the given name .
6459	Deletes a database .
6460	Returns information about a database .
6461	Returns a list of available databases .
6462	Get a connection to the database .
6463	Sets the current connection to use .
6464	Get a toolbox
6465	Sets the model formatter .
6466	Loads an object from the database .
6467	Create a new graph
6468	Renames a collection .
6469	Returns information about an index .
6470	Load a vertex or edge from the graph
6471	Process store result
6472	Convert an array of documents to a list of Pods
6473	Convert an array to a Pod
6474	Convert a driver document to a model
6475	Create a new Vertex .
6476	Create a new Edge .
6477	Creates a new document .
6478	Setup the model for a Pod .
6479	Determines if the model was previously stored .
6480	Adds a command to the transaction manager .
6481	Validates that the type is valid
6482	Applies a callback to an array of values .
6483	Crawls a page .
6484	Parses the href attribute of a node .
6485	Parses an image node .
6486	Parses a string node .
6487	Parses a datetime node .
6488	Load a class
6489	Starts the coverage process .
6490	Initializes the configuration object .
6491	Relate this model to another model .
6492	Returns an array of Inbound Edges for this Node .
6493	Convert this object to an ArangoDB vertex document
6494	Encode an object to UTF - 8 .
6495	Creates a new collection .
6496	Deletes a collection
6497	Renames a collection
6498	Removes all data from a collection
6499	Get information about a collection
6500	Get collection statistics
6501	Counts the number of documents in a collection
6502	Loads a collection from the database
6503	Unloads a collection
6504	Get information about an index .
6505	Returns the list of geo fields for an AQL query .
6506	Find any collection
6507	Returns the collection name for a given type .
6508	Deletes a user .
6509	Returns information about a user
6510	Delete AQL functions by namespace
6511	Get a list of registered AQL functions
6512	Returns the version of the server
6513	Get server info .
6514	Returns the server time .
6515	Set value of a property .
6516	Remove a value from the object .
6517	Get system property value .
6518	Set document id
6519	Sets the distance information from the query .
6520	Reset meta data .
6521	Returns an array representation of the object .
6522	Returns a JSON representation of the object .
6523	Returns a JSON representation of the transaction .
6524	Convert this object to an ArangoDb document
6525	Loads a document from a driver
6526	Load data from an array
6527	Event handler for after_dispense before_store after_delete
6528	Sets the to model .
6529	Returns the ID of the recipient .
6530	Sets the from model .
6531	Returns the ID of the sender .
6532	Convert this object to an ArangoDB Edge document
6533	Begin a transaction .
6534	Commit the transaction .
6535	Clears the transaction info .
6536	Add a read collection
6537	Add write collection
6538	Pauses the transaction .
6539	Resumes the transaction .
6540	Add a command to the transaction .
6541	Search commands by action and object .
6542	Generate a random ID .
6543	Create a new graph
6544	Drops a graph
6545	Get information about a graph
6546	Get outbound edges for a model .
6547	Get filters .
6548	Render the filter box .
6549	Render all filters .
6550	Opens the container .
6551	Close the container .
6552	Open the filter form .
6553	Close the form .
6554	Check if the filter is active .
6555	Renders a filter button .
6556	Renders a reset button .
6557	Creates a back to list button .
6558	Get persistend storage key .
6559	Check if the filter parameter is set in the URL .
6560	Get fulltext search conditions .
6561	Flattens an array of value options .
6562	Get filters for the current request .
6563	Get redirect url from post data .
6564	Add filter params to url array .
6565	Set default filters .
6566	Build a PDO statement .
6567	Reduces the collection to a single value .
6568	Throws an exception if the value is of the given type .
6569	Throws an exception if the value of the iterable is of the given type .
6570	Register the bugsnag service provider .
6571	Create a new Bugsnag client .
6572	Setup user detection .
6573	Setup paths for strip and project .
6574	Add stub to pipeline .
6575	Add a stub to the pipeline .
6576	Create a new pipeline with the given iterable .
6577	Set keys .
6578	Returns a slice of the iterable .
6579	Sorts the collection by a given comparison function .
6580	Set multiple variables at once .
6581	Set a variable .
6582	Returns the path to the page .
6583	Get script tag by name
6584	Check if a script combination is allowed
6585	Converts a UTF - 8 string to a list of Unicode codepoint .
6586	Create username spoofs
6587	Get all layouts paths .
6588	Add global variables to renderer .
6589	Process the collection .
6590	Set a feed parameter .
6591	Recursively extract a parameter from an XML element .
6592	Runs a git command .
6593	Sort by date .
6594	Remove an item from the feed .
6595	Replace an item .
6596	Merge another feed into this feed .
6597	Auto slice the collection .
6598	Get the list of conflicting users .
6599	Batch insert records into the database .
6600	Writes the items of a feed to the XML manager .
6601	Sets the current element in the buffer .
6602	Find all schedules in the queue .
6603	Sorts the collection by date .
6604	Import configuration data .
6605	Set the data .
6606	Sets the source directory .
6607	Sets the destination directory .
6608	Find the layout for a given page .
6609	Returns the fallback path for the given page .
6610	Parse the file .
6611	Returns the current section .
6612	Returns the path to the permalink
6613	Set the config object .
6614	Run the build steps .
6615	Get version file
6616	Filter pages by variable and value .
6617	Sort an array by date .
6618	Creates a URL for the given value .
6619	Minify a file
6620	Converts a SCSS file to a CSS file
6621	Returns the minimum number of words in a text .
6622	Hash a file
6623	Collect pages from phpoole
6624	Render an RSS feed .
6625	Loads an RSS feed .
6626	Sniff the given input .
6627	Check if input is of given type
6628	Sniff all inputs .
6629	Runs the sniffer for the input .
6630	Saves a schedule .
6631	Render an RSS feed .
6632	Creates the item node .
6633	Returns the author of an item .
6634	Returns the comments for an item .
6635	Check if the given content has XML syntax markers .
6636	Collect taxonomies from pages .
6637	Create pages for each taxonomy .
6638	Compile the views .
6639	Compile all views in the given path .
6640	Compiles a single view file .
6641	Generates a diff between two files .
6642	Parses a diff string into an array of diff chunks .
6643	Boot extension .
6644	Finish all extensions .
6645	Register active extensions .
6646	Run the given callback after booting the extension .
6647	Set the provides for the application .
6648	Write the manifest file .
6649	Register a deferred service provider .
6650	Load queued service provider .
6651	Activate an extension .
6652	Map extension aliases .
6653	Register domain awareness .
6654	Detect extension .
6655	Get an option from an extension .
6656	Publish extension .
6657	Register a new extension .
6658	Get route generator instance .
6659	Activating an extension .
6660	Refresh an extension .
6661	Reset an extension .
6662	Check if the field should be excluded from the query .
6663	Create an instance of the theme driver .
6664	Bootstraps the application .
6665	Bootstrap extension configuration .
6666	Bootstrap the form .
6667	Bootstrap menu handler .
6668	Bootstrap the sidebar placeholders .
6669	Bootstrap the validation rules .
6670	Attach a listener to an extension event .
6671	Initiates the theme manager .
6672	Set theme .
6673	Boot theme .
6674	Resolve theme .
6675	Get available theme paths .
6676	Get the theme autoload files .
6677	Validate the provided theme .
6678	Get available theme .
6679	Render a macro .
6680	Filter the value .
6681	Verify the status of safe mode .
6682	Add a path .
6683	Detect extension .
6684	Get the contents of the manifest .
6685	Generate manifest config .
6686	Get composer lock data .
6687	Guess extension name from manifest .
6688	Guess extension path .
6689	Resolve extension namespace from manifest .
6690	Validate extension name .
6691	Register the view finder class .
6692	Register theme .
6693	Detect themes .
6694	Set the current theme .
6695	Set the theme resolver .
6696	Register extension .
6697	Register extension config manager .
6698	Register extension finder .
6699	Register extension status checker .
6700	Execute the listener .
6701	Get the scheme .
6702	Set the route handles .
6703	Get the domain pattern .
6704	Get the route group .
6705	Check if the route matches the given pattern .
6706	Get the route prefix .
6707	Get the root path of the URI .
6708	Get the base URL .
6709	Resolves the base URL from the given root .
6710	Parse a YAML string into an array .
6711	Validates a YAML string for duplicate keys .
6712	Activates a plugin .
6713	Fires a deactivating event .
6714	Register extension providers .
6715	Register extension plugin .
6716	Boots the package .
6717	Start the application .
6718	Fire extension event .
6719	Get autoload files .
6720	Load the autoloader file .
6721	Process deprecated comments .
6722	Start the error handler .
6723	Generate a log message .
6724	Generate call trace .
6725	Add an alert to the json .
6726	Become a daemon .
6727	Fork a new process .
6728	Returns the slug of the owner .
6729	Update the URL slug if it has changed .
6730	Sends headers to the client .
6731	Sets a cookie .
6732	Clear all cookies .
6733	Send the request to the server .
6734	Stores the uploaded files .
6735	Remove one or more arguments from the array .
6736	Find all keys that match a given regular expression
6737	Remove HTML characters from the array .
6738	Get all integer values from an array .
6739	Flush the cache directory .
6740	Combine less files into a single file .
6741	Connect to the server .
6742	Executes a command on the server .
6743	Check if the current request is a client server .
6744	IP filter .
6745	Create a named pipe file .
6746	Register a deployer .
6747	Returns the deployer .
6748	Adds a server .
6749	Set the servers .
6750	Returns a server by name .
6751	Run the deployer .
6752	Get the server options .
6753	Processes this test for when a token is encountered .
6754	Generate a slug for an ajax request .
6755	Ajax request for single action .
6756	Trigger ajax callback .
6757	Handle ajax request .
6758	Get a value from the POST or GET request .
6759	Generate a random hex value .
6760	Start the session .
6761	Clear all session variables .
6762	Checks if a value is serialized .
6763	Handle the slug request .
6764	Adds a method to the class .
6765	Updates the current user .
6766	Clears the current session .
6767	Verify socket .
6768	Open a new session .
6769	Garbage collection .
6770	Matches a route against a rule .
6771	Get the data for the page .
6772	Checks if the current page is the given one .
6773	Loads the metadata for the given class .
6774	Create the condition instance .
6775	Init all installed plugins .
6776	Get a list of all available plugins
6777	Loads the Twig environment .
6778	Set default language for user
6779	Check if the token is valid and update the expire date
6780	get a view
6781	Add a JS variable to the script .
6782	Add a script to the page .
6783	Add a CSS stylesheet to the page .
6784	Get file content
6785	Get content with template
6786	Get all scripts .
6787	Get all CSS .
6788	Return the path to an asset .
6789	Check if a route is allowed
6790	Get access rules for all roles
6791	Get roles chain
6792	Get user language
6793	Translate a choice .
6794	Returns the translation for the given locale .
6795	Get translations from file
6796	Get translation by id .
6797	Get basic translation for given translation id and number .
6798	Generate the toggle command .
6799	Builds the commands for the given attribute .
6800	Handle the build meta model operations .
6801	Main method of the application .
6802	Prepare and create controller and action
6803	Execute the ACL .
6804	Executes the auth class
6805	Resolve route .
6806	Set application libraries and autoload structure .
6807	Get an instance of a library .
6808	Creates the core and controller .
6809	Call class and method with input arguments
6810	Returns an array of parameters for a method .
6811	Get the role and user from a token
6812	Get role and user from id_user
6813	Returns current option value .
6814	Set bulk of input given array
6815	Returns the value of an input variable .
6816	Filter a variable .
6817	Open a database connection .
6818	Close a connection .
6819	Execute a SQL query .
6820	Executes a SELECT query and returns the result as an associative array .
6821	Executes a SQL statement and returns the insert ID .
6822	Executes a SQL statement and returns the number of affected rows .
6823	Executes a SQL statement and returns the number of affected rows .
6824	Log out the guest user .
6825	Sets the user ID .
6826	Sets the username of the user .
6827	Sets the role id .
6828	Sets the role name .
6829	Validates a value .
6830	Returns the list of installed plugins .
6831	Search the plugin directories in the given path
6832	Search for a plugin factory class .
6833	Looks for a plugin implementation in a file
6834	Returns the string representation of a closure .
6835	Execute a closure in a temporary directory .
6836	Executes a file on the current operating system
6837	Run a command for Windows .
6838	Sets the path to the autoload file .
6839	Check if the process is running .
6840	Kill the process .
6841	Resets the state of the logger .
6842	Creates a new instance from a string .
6843	Get image driver
6844	Build an image from an array or object
6845	Returns proportional width of resized image .
6846	Returns proportional height of resized image
6847	Formats a number of bytes as a binary string .
6848	Format a metric .
6849	Create a new session instance .
6850	Initializes the driver .
6851	Parse the request body into an array .
6852	Generates the URL for the request .
6853	Get server param .
6854	Get the default input definition .
6855	Register the commands .
6856	Returns the path to the model file .
6857	Add the force option .
6858	Adds the model argument .
6859	Validates the model argument .
6860	Add table argument
6861	Validates the table argument .
6862	Get table instance
6863	Generate file .
6864	Handle the request and return a response .
6865	Returns whether the stream is seekable
6866	Creates a new parser with the given body .
6867	Adds a new body parser .
6868	Add module argument
6869	Adds the controller argument .
6870	Creates a PSR - 7 request .
6871	Creates a new server request .
6872	Create a new stream .
6873	Creates a stream from a file .
6874	Creates a new uploaded file .
6875	Create a URI from a string
6876	Formats a number of bytes .
6877	Formats a number .
6878	Normalize bytes .
6879	Normalize the precision .
6880	Returns a new message with the specified method .
6881	Sets the request URI .
6882	Get the target from the URI .
6883	Push a middleware onto the top of the stack .
6884	Returns the reason phrase for the given status code .
6885	Returns an array of incoming messages .
6886	Returns the user associated with the given message .
6887	Returns the extension of a file .
6888	Normalize a filename .
6889	Returns the contents of the stream .
6890	Fixes the wp - login . php and wp - admin in the URL .
6891	Fixes the path of the wp - includes folder .
6892	Fix network admin url filter .
6893	Remove double slash from URLs .
6894	Init filters .
6895	Set the wp folder name .
6896	Convert a URL to a full path
6897	URL - encode a path
6898	Decode a URL path .
6899	Returns the content of a directory .
6900	Writes data to the database .
6901	Write a log section .
6902	Write a memory usage log entry
6903	Write a timeload log entry
6904	Write log sections .
6905	Flip an array of files .
6906	Sets the uploaded file stream .
6907	Returns the hash of the uploaded file
6908	Returns the mime type of the uploaded file .
6909	Get query params
6910	Check if the request is an ajax request
6911	Convert a JSON string to a document .
6912	Creates an array of Entity objects from an array of data
6913	Converts an array of action data to an action object
6914	Creates an array of Field objects from an array of data
6915	Returns an array of Link objects from an array .
6916	Send a request and return the response .
6917	Executes the request and returns the response .
6918	Prepare the request for sending .
6919	Sets the URL for the given request .
6920	Sets the request headers .
6921	Creates a response object from the response body .
6922	Split header from body
6923	Parse response headers .
6924	Returns the total number of log items for a given log type .
6925	Get the output of the database
6926	Gather log files .
6927	Gather data for the Get section .
6928	Gather the input data for the Post section
6929	Gather the data from the session section .
6930	Get the current time .
6931	Returns a summary of the match key for a given section .
6932	Creates an array of uploaded files .
6933	Create a new uploaded file .
6934	Flips an array of files .
6935	Recursively merges two arrays .
6936	Adds the session driver to the request
6937	Add a new menu item .
6938	Show the form for editing the specified resource .
6939	Attempt to edit an existing record .
6940	Redirect to the edit page .
6941	Order objects .
6942	Delete an existing record .
6943	Returns the uploaded files .
6944	Returns a new request with the given uploaded files .
6945	Check if all uploaded files are valid .
6946	Load headers from server variables .
6947	Create a new request with the given attribute .
6948	Return an instance without an attribute .
6949	Check If - Modified - Since header
6950	Get the value of a specific header .
6951	Sets the HTTP status code .
6952	Executes the middleware and returns a response .
6953	Get mysql version
6954	Authenticates a user .
6955	Find all users .
6956	Find all deactivated items
6957	Add a new user .
6958	Returns the option for the metric .
6959	Set the current language from the post ID .
6960	Check if the given string is an encrypted container .
6961	Check if a string is encrypted .
6962	Dump the class .
6963	Exports an array to PHP code .
6964	Pre global process .
6965	Execute the post global process .
6966	Creates a new ParseException with no token for the given token types .
6967	Makes a new container instance .
6968	Recover a record from the database .
6969	Process new class extensions .
6970	Process new config classes .
6971	Process configuration class .
6972	Process a class .
6973	Sets the definitions .
6974	Returns a definition by name .
6975	Removes a definition .
6976	Sets the config classes .
6977	Generate all containers .
6978	Dumps the container definitions .
6979	It should return inner value
6980	Sets the email address .
6981	Send a notice request .
6982	Call a method and return the response .
6983	Creates a response from an exception .
6984	Parse http response .
6985	Requests a request to perform an action .
6986	Wait for subscription message .
6987	Send actionResulting msg .
6988	Formats the layout template files .
6989	Write the model to a file .
6990	Returns a dashed version of a string .
6991	Returns a slice of the string .
6992	Returns an array of indices .
6993	Returns a string representation of an option .
6994	Validates an array of options .
6995	Creates an option instance .
6996	Declares reply to reply stack messaging .
6997	Get the value of a property .
6998	Returns a list of matchers to be applied to an array .
6999	Compare two images .
7000	Create diff gif on differences
7001	Creates a comparison image on differences .
7002	Checks if two images are the same .
7003	Add a POST route .
7004	Add a route to the routing table
7005	Find a route matching the given url
7006	Run the route .
7007	Redirect to another URL .
7008	Parse the parameters from the route .
7009	Returns the date of a file
7010	Handle image save
7011	Make a GET request to the remote server .
7012	Make a POST request to the API .
7013	Set the authentication header
7014	Get the value of a configuration option .
7015	Validates the configuration .
7016	Get the excerpt of a text .
7017	Handle PHP errors .
7018	Get the list of extensions to be used in dot notation .
7019	Validate the widgetId .
7020	Set Cxense User Id
7021	Get all documents .
7022	Append a string to the current string .
7023	Prepend a string to the end of the string .
7024	Checks if the string matches the given pattern .
7025	Limit the number of words in the string .
7026	Creates a UUID version 4
7027	Joins the string with the given glue
7028	Converts this string to HTML entities .
7029	Cuts a portion of the string .
7030	Limit the number of results .
7031	Limit the number of characters in the string .
7032	Convert the string to an array of variables
7033	Encrypt the token .
7034	Initialize from encrypted String .
7035	Convert the value to a container .
7036	Generate a parser from a meta grammar file .
7037	Set Wxense settings
7038	Get all documents matching the current query .
7039	Set the number of results per page
7040	Set the current page .
7041	Get a numberable value .
7042	Get searchable value .
7043	Convert a string to a boolean value .
7044	Get the grammar .
7045	Create a command to create a gif image .
7046	Creates a command to convert a set of images to gif .
7047	Lookup many tokens in the buffer .
7048	Formats the number as a string .
7049	Check if a property with the given name exists .
7050	Returns a property by its name .
7051	Removes a property by its name .
7052	Check if a method exists by name .
7053	Get method by name .
7054	Remove method by name .
7055	Parse meta file .
7056	Run a plugin s hooks .
7057	Load all plugins .
7058	Setup the default router .
7059	Get an item from the collection .
7060	Set the value for the given key .
7061	Push a value to a given key .
7062	Search the collection for a given value .
7063	Get an array of items keyed by a field .
7064	Returns a new collection with unique items .
7065	Get all numeric keys .
7066	Join the collection with a string .
7067	Join collection by key .
7068	Get an array of items from the collection by key .
7069	Get a chunk of the collection .
7070	Returns a new collection with the items returned by the function .
7071	Applies a callback to each item in the collection .
7072	Returns a new collection with the given items .
7073	Merge items with a key .
7074	Increases the size of the collection .
7075	Get a random key from the collection .
7076	Get a random item from the collection .
7077	Returns a slice of the collection .
7078	Rejects items from the collection .
7079	Remove an item from the collection .
7080	Reverses the collection .
7081	Group the collection by a given value .
7082	Remove an offset from the collection .
7083	Return the rest of the collection after the given index .
7084	Get the rest of the collection after a given key .
7085	Returns a new collection with the items removed from the collection .
7086	Returns a copy of the collection with the elements from the given key .
7087	Remove an item from the collection .
7088	Returns a new Collection containing the items of the collection that are present in the given array .
7089	Add a where condition to the query .
7090	Initialize from JSON .
7091	Load container from file
7092	Initialize from serialized content .
7093	Create a container from an encrypted string .
7094	Create a new instance from a string
7095	Applies an array of conditions to the query .
7096	Returns an array where the given key is in the given array .
7097	Convert an iterator to an array .
7098	Get the group value by key .
7099	Applies a function to an array of items .
7100	Remove the given key from the given items .
7101	Recursively removes duplicate values from an array .
7102	Get the value of a key .
7103	Add or edit an object .
7104	Returns the option string for the shell .
7105	Parse the files and return an array of excerpts
7106	Fetch values from an array using dot notation .
7107	Remove an element from an array using dot notation .
7108	Get a value from an array .
7109	Check if an item exists in an array
7110	Sets a value in an array using dot notation .
7111	Searches an array for a value and returns the key if found .
7112	Render a javascript library
7113	Create . htaccess file .
7114	Get a new access token .
7115	Sets the id of the autocomplete input .
7116	Sets the bounding box .
7117	Adds a new autocomplete type .
7118	Removes a autocomplete type .
7119	Returns the autocomplete component restriction for the given type .
7120	Sets the list of component restrictions .
7121	Add a component restriction .
7122	Removes a component restriction .
7123	Sets the input attributes .
7124	Sets an input attribute .
7125	Creates an Identicon with the given arguments .
7126	Converts an image to another format .
7127	Compress a PNG or SVG file .
7128	Compress SVG .
7129	Compress a PNG file .
7130	Decode data url .
7131	Returns the one pixel of the image in the specified format .
7132	Convert file extension to format .
7133	Convert a format to a file extension .
7134	Convert file extension to mime type .
7135	Returns the compression type for the given format .
7136	Returns the compression quality for a given format .
7137	Set file format extension .
7138	Changes the extension of a file .
7139	Parse format args .
7140	Sends the request and returns the response .
7141	Clean input data
7142	Limits PHP s maximum size and memory limit .
7143	Renders a circle .
7144	Checks if a version is valid .
7145	Checks if the given version is a valid dev version .
7146	Checks if the given version is valid stable .
7147	Creates a new CSRF token .
7148	Create a hidden form input .
7149	Verify the CSRF token .
7150	Create a new Request instance from globals .
7151	Get the form data .
7152	Returns the form data .
7153	Get the JSON body .
7154	Normalize the Amps in a URL URI .
7155	Render a map type identifier .
7156	Returns the first character of a given name .
7157	Get last part of a name .
7158	Convert a name to an acronym .
7159	Convert a name to a variable name .
7160	Checks if a string is valid .
7161	Validates a UUID64 .
7162	Get shard id from UUID .
7163	Validate shard ID .
7164	Returns the type ID of a UUID .
7165	Validates a type ID .
7166	Returns the local ID of a UUID .
7167	Validate local ID .
7168	Parse the given UUID into an array .
7169	Builds a unique identifier .
7170	Render a Polyline .
7171	Sets the center of the circle .
7172	Sets the latitude .
7173	Sets the longitude of the coordinate .
7174	Sets whether or not the coordinate should be wrapped .
7175	Sets the control position .
7176	Sets the scale control style .
7177	Returns the status of the geocoder .
7178	Get value from cache
7179	Generate a sub - path .
7180	SHA1 keys .
7181	Get an instance of a class .
7182	Match a string against a value .
7183	Get a template instance .
7184	Calculate the strength of a password .
7185	Check if the given sha1 is a string and return it .
7186	Check if memcache is enabled .
7187	Check the map for a given URL and return its SHA1 .
7188	Check map cache
7189	Check the contents of a remote file .
7190	Cache it .
7191	Set SRI in Memcache .
7192	Get the map .
7193	Get the map cache .
7194	Check if the given URL is local
7195	Checks if a variable is valid .
7196	Convert to acronym .
7197	Convert string to slug .
7198	Convert a string to camelCase .
7199	Renders a Size .
7200	Is email role based?
7201	Parse addresses .
7202	Parse request headers .
7203	Parse attachments .
7204	Parse a content type to a representation
7205	Parse a representation string to a class name
7206	Get the difference between two numbers .
7207	URL safe encode a string .
7208	URL - safe decode .
7209	Creates a new session token .
7210	Create a new CSRF token .
7211	Verify that a token is valid .
7212	Sets the list of origins .
7213	Get human readable difference between two timestamps .
7214	Returns an array of items from the cache .
7215	Renders a marker .
7216	Build the JSON response .
7217	Render a marker shape
7218	Render a scale control style .
7219	Check if slug is valid .
7220	Check if a slug is reserved .
7221	Convert slug to name .
7222	Convert slug to variable name .
7223	Sets the coordinates .
7224	Store the data in the cache file .
7225	Get all repositories .
7226	Parse the template file .
7227	Set the template variables .
7228	Check if a file has a parent .
7229	Get parent vars .
7230	Get new child template .
7231	Add the database seeder class to the options .
7232	Render a RotateControl .
7233	Encode a string .
7234	Decode HTML entities .
7235	Call a controller action .
7236	Renders a KML layer .
7237	Get a value from the cache .
7238	Store a value in the cache .
7239	Clear data from cache .
7240	Generate a unique key .
7241	Add namespace prefix to primary key .
7242	Check if all servers are different .
7243	Maybe add connections to the pool .
7244	Renders the html for the given Autocomplete object .
7245	Renders the javascripts for the given autocomplete .
7246	Renders an Autocomplete .
7247	Register the service provider .
7248	Close the request immediately .
7249	Disable gzip output .
7250	Sets the location of the waypoint
7251	Sets whether or not the waypoint should be stopped .
7252	Returns a human - readable description of the given error code .
7253	Sets the file extension .
7254	Change file extension .
7255	Check if an option is set .
7256	Returns the value of an option .
7257	Sets the value of an option .
7258	Removes an option .
7259	Modify request attributes based on route match .
7260	Sets the zoom control style .
7261	Decode one hash id .
7262	Sets the results .
7263	Sets the status of the response
7264	Checks if a string is valid .
7265	Check if the current browser is an engine .
7266	Normalize the given value .
7267	Get the page url .
7268	Sets whether or not the distance matrix should avoid highways .
7269	Sets whether or not to avoid the tolerance of the distance matrix .
7270	Sets the list of destinations .
7271	Adds a destination to the request .
7272	Adds an origin to the origin list .
7273	Sets the region of the distance matrix .
7274	Sets the language of the distance matrix .
7275	Sets the travel mode of the matrix .
7276	Sets the unit system of the distance matrix .
7277	Returns an array of control positions .
7278	Sets the response status .
7279	Renders the JSON for the given OverviewMapControl .
7280	Render a LatLngBounds object
7281	Renders the extends of a bound .
7282	Print all stats .
7283	Sets markers .
7284	Sets the helpers .
7285	Returns a marker helper .
7286	Sets the extension helpers .
7287	Returns the extension helper .
7288	Removes an extension helper .
7289	Render the html container .
7290	Render the styles for the given map
7291	Render the javascripts for the given map
7292	Render js libraries
7293	Renders the js before the map .
7294	Render the js after each extension
7295	Render the javascript container .
7296	Render js container coordinates
7297	Render the javascript container bounds .
7298	Render js container points
7299	Render js container sizes
7300	Render a javascript container map .
7301	Render the javascript container circles .
7302	Render js container encoded polylines
7303	Render the ground overlays for a map
7304	Render polygon js container
7305	Render js container polylines
7306	Render js container rectangles
7307	Render JS container info windows
7308	Render the js container marker images .
7309	Renders the marker shapes for a map .
7310	Render the js container marker cluster .
7311	Render KML layers for a given map .
7312	Render js container event manager
7313	Renders the extra javascript code for a map .
7314	Renders a map .
7315	Renders the center of a map
7316	Render the bounding box of a map
7317	Computes the coordinates of a map .
7318	Computes the bounds of the map .
7319	Compute the points for a map .
7320	Computes the sizes of the map .
7321	Compute marker images
7322	Compute marker shapes
7323	Compute marker info windows
7324	Render controls for a map .
7325	Render a map control .
7326	Generate a v1 UUID .
7327	Generate a v3 UUID .
7328	Generate a v4 UUID .
7329	Generate a v4x2 UUID .
7330	Get package by name .
7331	Executes a callback for each item in the collection .
7332	Returns a new collection with items that pass a truth test .
7333	Adds a package to the collection .
7334	Sets the address of the request .
7335	Sets the coordinate of the geocode request .
7336	Set the bounding box .
7337	Sets the region of the request .
7338	Sets the language of the geocoding request .
7339	Load a file and parse it .
7340	Get route instance .
7341	Parse a YAML string into an array .
7342	Set flags if we are using WordPress .
7343	Sort an array by key .
7344	Returns the request method .
7345	Returns the scheme of the URL .
7346	Returns the host name .
7347	Get the root host .
7348	Determine if the current request is using HTTPS .
7349	Check if the host is a local host .
7350	Sets the location type .
7351	UTF - 8 aware alternative to preg_replace_callback
7352	Returns the status of the direction status .
7353	Overload data .
7354	Overload property data .
7355	Get all properties that have been overloaded .
7356	Overload properties .
7357	Opens the given URL .
7358	Sets the marker image anchor .
7359	Sets the image origin .
7360	Sets the scaled size of the image .
7361	Sets a new size .
7362	Renders the InfoWindow .
7363	Renders the open method .
7364	Renders the info window .
7365	Register module providers .
7366	Get the absolute path to an asset file .
7367	Load routes from modules .
7368	Determine if the given function should be executed .
7369	Renders a GroundOverlay .
7370	Emits the response .
7371	Sets a value in the cache .
7372	Get a value from the cache .
7373	Unset an item from the cache .
7374	Unset a pattern in the cache .
7375	Add a value to the cache by reference
7376	Unset cache by reference key
7377	Unset cache by ref key pattern
7378	Renders a MapTypeControl .
7379	Converts a scalar value to a string .
7380	Quote a single value .
7381	Quote a value for use in a query
7382	Render a map type control style .
7383	Signs the given URL .
7384	Get a highlighter for a search term .
7385	Generates a shard ID from a string .
7386	Assign a shard ID to a string .
7387	Sets the step travel mode .
7388	Sets the prefix of the javascript variable .
7389	Select country options .
7390	Generate dropdown items .
7391	Render a StreetViewControl .
7392	Normalize the given value .
7393	Check if a value matches a regular expression
7394	Normalize a string .
7395	Replace special characters in a string
7396	Converts a URL string to a URI pattern .
7397	Sets the width unit .
7398	Sets the height unit .
7399	Generate a new random key .
7400	Checks if the given value is a valid string .
7401	Strip the query string from a URL URI .
7402	Parse a query string into an array .
7403	Build a query .
7404	Add a SHA256 signature to a URL URI .
7405	Remove SHA256 signature from URL URI
7406	Check if a SHA256 signature is valid .
7407	Sets the coordinates of the marker .
7408	Adds a coordinate to the shape .
7409	Create a new customer .
7410	Update a customer .
7411	Convert an amount to a unit number .
7412	Get scope entity by identifier
7413	Renders a ScaleControl .
7414	Generates the URL for the given geocoder request .
7415	Builds a GeocoderResponse object from a response object .
7416	Builds a GeocoderResult object from a result object .
7417	Builds the geocoder address components .
7418	Builds a GeocoderAddressComponent object from the provided geocoder address component .
7419	Builds a GeocoderGeometry object from the provided geocoder geometry .
7420	Process a distance matrix request .
7421	Generates the http query string for the given distance matrix request .
7422	Parse the response .
7423	Builds a DistanceMatrixResponse object from a raw distance matrix response .
7424	Build the distance matrix rows .
7425	Builds a DistanceMatrixResponseRow from a distance matrix row .
7426	Builds a DistanceMatrixResponseElement object from a DOMElement object .
7427	Render point .
7428	Parses the parameter string and returns an array of strings .
7429	Parses the parameter strings .
7430	Returns the current request headers .
7431	Send the headers to the browser .
7432	Send no cache headers .
7433	Get status slug .
7434	Get status message .
7435	Send HTTP status header .
7436	Parse a string into an array of headers .
7437	Remove tags from a string .
7438	Register database migrations .
7439	Register module translations .
7440	Sets the pixel offset .
7441	Set info window open event .
7442	Render a PanControl .
7443	Returns an array of mouse events .
7444	Sets the map type IDs .
7445	Add a map type id
7446	Sets the map type control style .
7447	Sets a cookie .
7448	Returns the value of a cookie .
7449	Render a dom event .
7450	Renders a dom event once .
7451	Render event .
7452	Render event once
7453	Render an animation .
7454	Renders a ZoomControl .
7455	Sets the maximum execution time .
7456	Check slug .
7457	Get address components .
7458	Sets the address components .
7459	Sets the partial match of the result .
7460	Return gravatar url .
7461	Sets the center of the map
7462	Check if a map option exists .
7463	Sets the map options .
7464	Returns the value of a map option .
7465	Sets the value of a map option .
7466	Removes a map option .
7467	Check if a stylesheet option exists
7468	Sets the stylesheet options .
7469	Returns the stylesheet option .
7470	Sets a stylesheet option .
7471	Removes a stylesheet option .
7472	Sets the map type control .
7473	Sets the overview map control .
7474	Set pan control position
7475	Set the rotate control for this map .
7476	Sets the scale control .
7477	Sets the street view control for this map .
7478	Set the zoom control .
7479	Add a marker to the marker cluster
7480	Add an info window
7481	Add a polyline .
7482	Add an encoded polyline .
7483	Add a polygon .
7484	Adds a rectangle .
7485	Add a circle .
7486	Add a ground overlay .
7487	Stores a value in the cache .
7488	Deletes the cached value .
7489	Sets whether or not to avoid highways .
7490	Setter for avoidTolls .
7491	Sets the destination of the request .
7492	Set whether or not to optimize the waypoints .
7493	Sets the origin of the request .
7494	Sets whether or not to provide route alternatives .
7495	Sets the direction s region .
7496	Sets the direction language .
7497	Sets the travel mode .
7498	Sets the direction s unit system .
7499	Sets the waypoints .
7500	Add a waypoint .
7501	Checks if the transfer is valid .
7502	Make a POST request with JSON data
7503	Log an issue .
7504	Log a review .
7505	Write log file lines .
7506	Clean a log event .
7507	Maybe rotate log files if max_log_file_size > 0 .
7508	Make a curl request and return a response object .
7509	Parse the given source into a document .
7510	Build the document .
7511	Parse a section from a string .
7512	Parses YAML metadata .
7513	Get a query variable .
7514	Get a template .
7515	Returns a TwitterOAuth object for the given credentials .
7516	Generate a remote hash .
7517	Converts a string to ASCII .
7518	Returns the status of the distance matrix
7519	Strips leading whitespace from a string .
7520	Sets the steps .
7521	Create a new route .
7522	Builds the DirectionsResponse object from the given directions response .
7523	Build the directions routes .
7524	Builds the directions route .
7525	Build directions legs .
7526	Builds a DirectionsLeg object from a JSON object .
7527	Build the directions steps .
7528	Builds the directions step .
7529	Lighten the color by the given percentage .
7530	Darkens the color by the given percentage .
7531	Saturate the color by the given percentage .
7532	Desaturate the color by the given percentage .
7533	Mix this color with another color .
7534	Start a new session .
7535	Checks if a version is valid .
7536	Checks if the given version is a valid dev version .
7537	Checks if a version is valid stable .
7538	Get the date for a given version .
7539	Returns the time of the version .
7540	Return a new instance with no cache headers .
7541	Return a new response with success status .
7542	Return response with error .
7543	Output the response .
7544	Sets the legs .
7545	Sets the list of warnings .
7546	Sets the waypoint order .
7547	Render zoom control style .
7548	Get metadata .
7549	Issue an access token .
7550	Perform a resource request .
7551	Get access token repository .
7552	Add a value to the string .
7553	Removes all slashes from a string .
7554	Render Google Map API .
7555	Sets the list of elements .
7556	Render control position .
7557	Get the current IP address .
7558	Get the region of an IP address .
7559	Get the country for a given IP address .
7560	Check if request is ajax
7561	Check if we are using API
7562	Get or set the doing REST action .
7563	Get or set doing actions .
7564	Subscribe a new user to a list .
7565	Get a single member from a list
7566	Update a member of a list
7567	Delete a user from a list .
7568	Returns a SHA1 hash of a string .
7569	Adjust luminosity .
7570	Cleans a hex string .
7571	Recursively merges two arrays .
7572	Create a new request instance .
7573	Creates a new request body instance .
7574	Recursively merges arrays into a single array .
7575	Renders a Rectangle .
7576	Convert an array to html .
7577	Convert an array to a DOM element .
7578	Renders a marker .
7579	Generate a license key .
7580	Returns a list of libraries for the given map .
7581	Escapes the order .
7582	Serialize a closure .
7583	Unserialize a closure .
7584	Returns a string representation of the given value .
7585	Maybe unserializes a value .
7586	Embedly markup .
7587	Get embedly cache .
7588	Run oEmbed via WordPress .
7589	Render a Polyline .
7590	Sets the south west coordinate .
7591	Sets the north - east coordinate of the bounding box .
7592	Returns the center of this coordinate .
7593	Convert byte abbr to bytes
7594	Get remote file size .
7595	Converts an array of url parts into a url string .
7596	Render a LatLng object
7597	Renders a MarkerImage .
7598	Parses an XML string and returns the result as a string .
7599	Pluralizes an array of attributes .
7600	Invalid distance matrix request travel mode .
7601	Parse a hostname into an array .
7602	Unparse the name and port from the given parts .
7603	Set the marker s position .
7604	Set marker animation .
7605	Sets the icon of the marker .
7606	Set the marker shadow .
7607	Sets the marker shape .
7608	Header ID callback .
7609	Returns the first image url from the given markdown .
7610	Convert HTML attributes to HTML attributes .
7611	Sets the bounding box of the overlay .
7612	Get the message for the model .
7613	Get error messages .
7614	Get error data .
7615	Add error message .
7616	Add a coordinate to the polygon .
7617	Load an HTML document .
7618	Minify JavaScript and CSS .
7619	Indents the given node recursively .
7620	Sets the organization to the document if the document is an UserInterface .
7621	Creates a view model for the set password action
7622	Get the organization entity .
7623	Create error view model
7624	Add a Roumen asset
7625	Reverses styles order .
7626	Adds a file to the front of the list .
7627	Add a file after another file .
7628	Add meta data .
7629	Output meta tags .
7630	Load a controller from a file .
7631	Load a manifest file
7632	Create query .
7633	Process invitation email
7634	Validate email .
7635	Loads a user or creates a new one
7636	Load the organization .
7637	Proxy organization method .
7638	Get hiring organizations cursor .
7639	Find an organization by name
7640	Finds an entity by the given user .
7641	Finds an employee by it s user id
7642	Creates a new organization with the given name .
7643	Find a draft document .
7644	Initialise the contact form
7645	Returns true if the given user is a employee .
7646	Update permissions .
7647	Set the name of the organization .
7648	Set the permissions .
7649	Get image .
7650	Set the contact .
7651	Returns the collection of employees .
7652	Returns the employee for the given user or id .
7653	Get employees by role .
7654	Sets the creation options .
7655	Initialises the form .
7656	Get the formular for the organization
7657	Returns the URI for the given image .
7658	Store an organization image .
7659	Extract values from an object .
7660	Hydrates a value .
7661	Check if the user is allowed to create jobs .
7662	Configure the form .
7663	Ensure that the order number is valid .
7664	Encrypts the merchant order .
7665	Create Merchant Signature Notif
7666	Validates a notification signature .
7667	Signs the merchant .
7668	Makes a request to the API .
7669	Get ticket articles .
7670	Makes a request to the API .
7671	Make a POST request .
7672	Make a PUT request .
7673	Get articles for a ticket .
7674	Get a value from the remote data .
7675	Get an object .
7676	Fetch all objects from the database .
7677	Create the object .
7678	Update the object .
7679	Delete the object .
7680	Get the URL for a resource method .
7681	Get a ticket .
7682	Add a tag to a ticket
7683	Search for objects matching a search term .
7684	Remove a ticket from an object .
7685	Tears down a shared memory block .
7686	High level function to fetch the proxy type
7687	Get connection info
7688	Executes the server loop .
7689	Execute the API .
7690	Applies a callback to each item in the collection .
7691	Get an item from the collection .
7692	Get a source from the copy history .
7693	Fetch data from Vk API
7694	Validates permissions against a bitmask .
7695	Set the value of a parameter .
7696	Add multiple params at once
7697	Create a request transaction .
7698	Save photos for an album
7699	Start callback .
7700	Get an access token for the given code
7701	Convert hits to items .
7702	Search for documents matching a query .
7703	Replaces dots except last three with an underscore .
7704	Replaces dots except last two in a string .
7705	Replaces dots in a string .
7706	Converts an intl formatter to an malot formatter
7707	Converts the malot formater to the intl formater .
7708	Adds the picker configuration .
7709	Bind the Alexa request to the IoC container .
7710	Register the Middleware .
7711	Resumes the audio .
7712	Get the Alexa request instance .
7713	Add the request middleware to the beginning of the application .
7714	Check if the request matches the route .
7715	Creates a new Alexa Route instance .
7716	Get a value from the session .
7717	Update the value of a slot .
7718	Add Alexa validator to the list of validators .
7719	Compile the route .
7720	Get the certificate from the request .
7721	Prepare response data
7722	Send the request through the Alexa router .
7723	Gather the middleware from the application .
7724	Persists the certificate .
7725	Retrieve certificate from store .
7726	Calculate the path to the certificate file .
7727	Sets the list of custom protected words .
7728	Capitalizes a string .
7729	Normalizes the input string .
7730	Process string parts .
7731	Process the first sentence words in parts .
7732	Process the last word in the parts .
7733	Process the given word .
7734	Replace a pattern in a string .
7735	get professional professional suffix
7736	Break a string into an array of words
7737	Check if a word is a salutation
7738	Check if a word is a line suffix
7739	Generate Emoji PHP constants .
7740	Chop a string off the end of the string .
7741	Wordsmith emojify .
7742	Get the first word of a string
7743	Checks if the given value is a string .
7744	Get the last word of a string
7745	Converts a roman number to lower case .
7746	Converts a string to Markdown .
7747	Returns the amount of words in a string .
7748	Return the smartypants of a string .
7749	Returns the substring after the first occurrence of a separator .
7750	Returns the substring after the last occurrence of a separator .
7751	Returns the substring before the first occurrence of a separator .
7752	Returns the substring before the last occurrence of a separator .
7753	Convert a string to title case .
7754	Trim a string .
7755	Trims the left part of a string
7756	Trims the right part of a string
7757	Typogrify a string .
7758	Converts a roman number to uppercase .
7759	Widont a string .
7760	Get a setting by name .
7761	Get icon .
7762	Return the composer . json as an array .
7763	Display a listing of the specified tag .
7764	Show a post .
7765	Store a newly created tag .
7766	Show the form for editing a tag .
7767	Update the specified tag in storage .
7768	Remove the specified Tag from storage .
7769	Show the index page .
7770	Clear the cache .
7771	Handle the download .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Handle the config files .
7775	Handle the translations .
7776	Handle the views .
7777	Display the profile page .
7778	Update the specified Profile in storage .
7779	Log the user in .
7780	Get the current version of the canvas
7781	Fill post data .
7782	Enable an extension .
7783	Disable an extension .
7784	Uninstall an extension .
7785	Run the migration for the extension .
7786	Get all enabled bootstrappers .
7787	Sanitize the input .
7788	Display the home page .
7789	Get the fields from the model .
7790	Get tag index data .
7791	Normal index data .
7792	Store a newly created post .
7793	Update the specified post in storage .
7794	Publish the theme public directory .
7795	Publish theme views .
7796	Untheme theme .
7797	Returns the default theme .
7798	Get active settings .
7799	Get route middleware group
7800	Get installed route middleware
7801	Get admin middleware
7802	Get the blog main path
7803	Get the blog prefix
7804	Get the admin prefix
7805	Get auth prefix
7806	Get password prefix
7807	Display a listing of posts and tags .
7808	Get the request data .
7809	Scan a file
7810	Multi - scan a file
7811	Perform CONTSCAN command .
7812	Receive a response from the server
7813	Process a single file .
7814	Validates a file .
7815	Sanitize a file name .
7816	Delete a file .
7817	Moves an uploaded file to a new location
7818	Get list of themes .
7819	Get full asset path
7820	Get the version of an asset
7821	Get the path to the theme .
7822	Make the directory if it does not exist .
7823	Make a file if it does not exist .
7824	Get the path to the assets folder .
7825	Get the template file content .
7826	Create new assets .
7827	Fetch the translation for a message .
7828	Update a translation for a message .
7829	Flag a translation .
7830	Create an asset .
7831	Download all translations .
7832	Upload all translations .
7833	Synchronize all translations .
7834	Creates a MessageCatalogue object for each message .
7835	Copy values from the parent config to the project config .
7836	Add a hash to the script .
7837	Returns the value of the directive .
7838	Search the class map for a matching namespace .
7839	Search for PSR - 4 mappings .
7840	After save callback .
7841	Add comments to the query .
7842	After query callback .
7843	Sync new wastage items .
7844	Sync existing wastage items .
7845	Find product item by key .
7846	Check item integrity .
7847	Build item data
7848	Fill an entity with the given attributes .
7849	Setup default criteria .
7850	Perform an action on an object .
7851	Execute before or after action .
7852	Returns true if the action is valid .
7853	Perform the query .
7854	Set whether or not to paginate .
7855	Toggle exceptions .
7856	Applies the criteria to the query .
7857	Update an entity .
7858	Fetches a list from the database .
7859	Find a model by its primary key .
7860	Find a record by criteria .
7861	Get records by criteria .
7862	Get items by keys .
7863	Returns an array of objects from the database .
7864	Create a new query with the given attributes .
7865	Replaces placeholders in a config value .
7866	Set the view path .
7867	Sends a file to the client .
7868	Get the mime - content - type of a file .
7869	Map an exception to a dispatch info object
7870	Sets an aspect .
7871	Add a pointcut to the aspect manager
7872	Get an aspect manager pointcut
7873	Returns an array of candidate files for the given class path .
7874	Check if a file is scannable .
7875	Returns a string representation of a PHP error constant .
7876	Dispatches an action .
7877	Invokes an action on an object
7878	Check if the socket has activity
7879	Returns the bean definition with the given name .
7880	Search and replace properties .
7881	Returns the constructor values for the given definition .
7882	Creates a new instance of the given bean definition .
7883	Instantiate a bean using the factory class .
7884	Instantiate a bean using the factory bean .
7885	Instantiates a bean from the given definition .
7886	Create bean dependencies .
7887	Applies an aspect to a target class
7888	Applies the specific aspects to the bean definition .
7889	Applies all global aspects to the bean definition .
7890	Applies aspects to a bean definition .
7891	Creates a new bean .
7892	Setup the init and shutdown methods for the bean .
7893	Inject a non setter method .
7894	Inject a property into a bean .
7895	Get a bean by name
7896	Returns an instance of the container .
7897	Fill the aware properties of a bean .
7898	The signal handler .
7899	Load a class
7900	Make a child bean .
7901	Populates the list of classes annotated with the given annotations .
7902	Loads an XML file .
7903	Loads the bean factory s XML file .
7904	Closes the connection .
7905	Opens the socket .
7906	Free peer .
7907	Creates the proxy class .
7908	Creates a string representation of a parameter .
7909	Creates the code for a method .
7910	Creates a proxy class .
7911	Load a YAML file .
7912	Loads the configuration file .
7913	Load the AMI client .
7914	Open event listener .
7915	Return a cache instance based on the cache implementation
7916	Invokes the afterDefinition lifecycle listeners for the bean .
7917	Invokes the beforeCreate lifecycle listeners for the bean .
7918	Invokes the afterCreate lifecycle listeners for the bean .
7919	Invokes the beforeAssemble lifecycle listeners .
7920	Invokes the afterAssemble lifecycle listeners for the bean .
7921	Opens the log file .
7922	Returns the interceptors for a given method .
7923	Returns the exception interceptors for a given method .
7924	Calls the interceptors for the given invocation .
7925	Invoke the interceptor for an exception .
7926	Invokes the interceptor for the method .
7927	Closes the socket .
7928	Read data from the socket .
7929	Opens a TCP connection .
7930	Add one or more objects to the collection
7931	Build the URI .
7932	Overwrite the app config .
7933	Resolve file path .
7934	Get published drop down list .
7935	Finds the Page model based on its alias . If the model is not found a 404 HTTP exception will be thrown .
7936	Build a link object .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Register the translations .
7939	Registers required script for the datepicker .
7940	Returns the vote for the object .
7941	Returns the from email address .
7942	Returns the user with the given username .
7943	Hydrate user data .
7944	Creates a new user .
7945	Sets the password of a user .
7946	Returns true if the given user matches the given password .
7947	Checks if the user is logged in .
7948	Finds a user by an array of criteria
7949	Find a record by an array of criteria
7950	Creates the common find SQL .
7951	Returns the number of records matching the criteria
7952	Insert a new user into the database .
7953	Update a user in the database .
7954	Deletes a user from the storage .
7955	Validates the given user .
7956	Clear identity map
7957	Login as a user .
7958	Initializes the process .
7959	Reaper a worker .
7960	Wait for the worker to complete .
7961	Wait for a result from the pool .
7962	Get all results from the pool
7963	Apply a function to the pool .
7964	Get the number of pending tasks .
7965	Sends data to a socket .
7966	Fetch data from a socket
7967	This method is used to migrate the database down to v2 .
7968	Register a new user .
7969	Confirm email .
7970	Renders the login page .
7971	Sends a confirmation email to the user .
7972	Displays a single user .
7973	Edit an existing user .
7974	Validates the object .
7975	Connects to the application .
7976	Returns an array of supported formatters and their priorities .
7977	Get the formatter for the given request .
7978	Format the response .
7979	Detect the . env file .
7980	Returns the type of the request .
7981	Creates a new instance of this class .
7982	Run the application .
7983	Handle an action .
7984	Get the domain payload .
7985	Send a response to the client .
7986	Set the status code for the response .
7987	Get the Command class name from a resource .
7988	Run before commands .
7989	Get per page from model class .
7990	Add where statements .
7991	Bootstrap the application services .
7992	Allow HTTP request methods .
7993	Get or set the pattern .
7994	Returns a token array .
7995	Returns the compiled regular expression .
7996	Returns an array of variables to be used in the template .
7997	Check if the route matches the request .
7998	Build the variables from the given values .
7999	Dispatch the route .
8000	Generate a URL for the request .
8001	Compile the current token .
8002	Check if this route matches the given request .
8003	Generate a URL for the request .
8004	Tokenize a pattern .
8005	Tokenize a pattern .
8006	Tokenize a segment pattern .
8007	Splits a pattern into an array of segments .
8008	Compile a token into a regular expression .
8009	Scopify options .
8010	Binds a route to the router .
8011	Create a new route group .
8012	Creates a route for the given request .
8013	Normalizes a request array .
8014	Tries to match the given request against all registered routes .
8015	Create a link to a named route .
8016	Clears the router .
8017	Creates the JSON representation of the workflow .
8018	Get the value of the hash .
8019	Get an access token .
8020	List address books
8021	Get email addresses from book
8022	Add emails to address book
8023	Get address book cost
8024	Create a campaign .
8025	Add sender .
8026	Activate sender by email and activation code
8027	Get list of subscriptions for a website
8028	Set subscription state
8029	Create a push task
8030	Hash the name .
8031	Send request to website .
8032	Send request to API
8033	Pre send to API check
8034	Decode a response string into an array .
8035	Decode a URL encoded response .
8036	Fetch mails from IMAP server
8037	Mark message as processed
8038	Returns the type of the mail .
8039	Auto refund .
8040	Auto applies a SSL certificate
8041	Auto - replaces a SSL certificate .
8042	Auto revoke SSL .
8043	Collect SSL information
8044	Get a list of email addresses
8045	Performs a SSL check
8046	Report web host
8047	Enter Domain Control Validation Code
8048	Creates an exception from the response array .
8049	Generate the meta tag .
8050	Sets the description .
8051	Reset all properties to their default values
8052	Register the service provider bindings .
8053	Generate the open graph .
8054	Add a raw entry .
8055	Prepare data .
8056	Check if the sitemap contains a given URL .
8057	Validate sitemap data .
8058	Fill the index of all commands .
8059	Fill the type of all commands .
8060	Sets the index of the query .
8061	Adds a type to the query .
8062	Set index settings
8063	Deletes a document from the index
8064	Creates a new index .
8065	Update index settings
8066	Executes the RawRequest
8067	Returns the JSON representation of the request .
8068	Add a sort to the query .
8069	Add a facet to the query .
8070	Composes the final query .
8071	Convert params to array
8072	Add a node to the cluster .
8073	Add a filter to the must list .
8074	Add a delete command to the batch command
8075	Add one or more documents to the command .
8076	Execute the command .
8077	Add a new request to the queue
8078	Make a POST request .
8079	Send a PUT request to the server
8080	Send a DELETE request
8081	Executes all pending requests .
8082	Add options .
8083	Generates a random node from the nodes in the cluster .
8084	Autodetect nodes .
8085	Add a new document to the batch command .
8086	Execute the command .
8087	Finalizes the current command .
8088	Check the current command .
8089	Get the gallery for the given object .
8090	Initalizes an album .
8091	Initalizes an Album
8092	Generate the name of an album .
8093	Upload an album
8094	Called after the model is deleted .
8095	Get the size of the image to be resized .
8096	Add image styles
8097	Delete all versions of a pictures
8098	Save a picture
8099	Create extra images
8100	Zebra Image Class
8101	Prepares an image
8102	Configure gallery database
8103	Configure the database .
8104	Create the config file if it does not exist .
8105	Check summaries for all operations
8106	Generate the documentation .
8107	Generate a link to upload pictures
8108	Show room on Photos
8109	show room template
8110	Loads the required scripts .
8111	Deletes a picture .
8112	Function to sort photos by order
8113	List channel sections .
8114	Start the worker .
8115	Stop the process .
8116	Kill the process .
8117	Sends a payload to the child .
8118	Called when the worker starts .
8119	Fork a new thread .
8120	Create an AuthnRequest object
8121	Parse a SAML response .
8122	Returns the binaries .
8123	Get pending binaries .
8124	Update all installed binaries .
8125	Update a single binary
8126	Start selenium process .
8127	Remove all files from the install directory .
8128	Assert start conditions .
8129	Register the binaries in the process .
8130	Creates a new binary .
8131	Get valid external URL value .
8132	Returns the name of the operating system .
8133	Save the contents to a directory .
8134	Called when a notification is received from the server .
8135	Watch for progress .
8136	Get the pre message for a binary update .
8137	Get post message .
8138	Add a pipe to the pipeline .
8139	Convert a single item .
8140	Convert item value .
8141	Write item to pipe .
8142	Get transport from request .
8143	Validates a password according to the given policy .
8144	Get taxonomy .
8145	Checks if the given value is valid .
8146	Get entity descriptor .
8147	Returns the value of an environment variable .
8148	Returns the client IP .
8149	Returns the current URL .
8150	Unparse a query string from an array
8151	Check if a property is set .
8152	Lookup an address
8153	Do inclusion .
8154	Execute actions defined in config file
8155	Move an item down of an array .
8156	Move an item up of an array .
8157	Updates a form read .
8158	Get field from payload .
8159	Returns the matching item in the collection .
8160	This method is called when an item is added to an aggregate .
8161	Get an item from an aggregate .
8162	Replaces variables in the given string with their values .
8163	Load configuration from JSON
8164	Load a JSON file from a URL .
8165	Set the latitude and longitude .
8166	Get latlng object
8167	Return error response .
8168	Redirects to the form if it exists .
8169	Creates a new aggregate form .
8170	Handles the removal of an item from a form .
8171	Check if we should use the post - autoload - dump
8172	Returns a list of plugin class names for a given package .
8173	Returns the installer name for the given package .
8174	Guess install name from package name .
8175	Map root extra .
8176	Writes the plugin config to the config file .
8177	Get the root package .
8178	Returns the install path for the given package .
8179	Initializes the install directory for the given package type .
8180	Generate the palette .
8181	Get meta palette of palette .
8182	Creates an exception if the context stack is empty .
8183	Enter theme context .
8184	Build the config of the application context .
8185	Returns the color for the given identifier
8186	Rotates the color .
8187	Converts HSV to RGB .
8188	Enter a new context .
8189	Leave the current context .
8190	Switches the context .
8191	Load config from bundles .
8192	Set the config types argument .
8193	Get the templates for the given data container .
8194	Render the page picker .
8195	Get all articles
8196	Get all modules
8197	Prepares the template for rendering .
8198	Parse the given template and return the result .
8199	Registers tagged services .
8200	Initializes the environment .
8201	Initializes the layout .
8202	Add a child element .
8203	Compiles a PHTML string into PHTML .
8204	Compiles a single node .
8205	Throws an exception .
8206	Returns the PHP type for a given Doctrine type .
8207	Get the file reflector .
8208	Get the doc block for a property .
8209	Get the docblock from a property .
8210	Extract the docblock from a method .
8211	Returns the PHP type and class name of the type .
8212	Login to the server .
8213	Initializes the http client .
8214	Get token from Wallhaven s homepage .
8215	Search for wallpapers .
8216	Extracts a value from an array of extractors .
8217	Returns the list of tags .
8218	Downloads the image to the given directory .
8219	Get the wallpapers .
8220	Download all wallpapers .
8221	Extracts the PHP type of a property from a mutator method .
8222	Extracts the type from an accessor method .
8223	Extract type from reflection type .
8224	Check if a property is public .
8225	Returns the accessor method .
8226	Get the mutator method .
8227	Returns the property name from a method name .
8228	Loads the Laravel extension .
8229	Creates a new PhpspecTestbench \ App instance .
8230	Set a value in the ini file
8231	Sets multiple values at once .
8232	Removes a section from the file .
8233	Merges values from one section to another .
8234	Renames a value in a section .
8235	Renames a section
8236	Reads an INI file .
8237	Reads an INI file and merges it with the given content .
8238	Merges content from an ini object to another object .
8239	Converts an INI value to a string .
8240	Set the value of an ini section .
8241	Set the values of the top ini section
8242	Returns the modifiers values .
8243	Remove a value from all modifiers .
8244	Removes a section from all modifiers .
8245	Sets a value in a section .
8246	Sets a value on the master .
8247	Set values on master
8248	Get a value from the master section .
8249	Returns the values of a section .
8250	Remove a value .
8251	Remove a value from the master ini file
8252	Check if a section exists .
8253	Returns the values of a section .
8254	Creates a file loader for the given type .
8255	Get class name by short type .
8256	Make a cookie .
8257	Execute the command .
8258	Determines the file to write to .
8259	Choose a bundle .
8260	Write config to file .
8261	Creates a new Dumper instance for the given type .
8262	Converts a string to another format .
8263	Read data from the session storage .
8264	Returns an array of routes .
8265	Sorts an array using a callback function .
8266	Sets the offset of the stream .
8267	Gather data .
8268	Writes content to a file .
8269	Returns a config reader for the current command .
8270	Run the given route .
8271	Gather the middleware for the given route .
8272	Flattens an array .
8273	Load configuration files .
8274	Returns a closure that can be used to create a slice .
8275	Parses a stage string into its name and parameters .
8276	Call a command with the given parameters .
8277	Sets the default values for the given command .
8278	Returns the path to the PHP executable .
8279	Returns the path to the cerebro binary .
8280	Runs the given command .
8281	Returns the default input definition .
8282	Builds the route tree from the given array of routes .
8283	Adds a route to the route tree .
8284	Returns the matcher for the first segment .
8285	Creates a FilesystemManager instance .
8286	Creates a new cached factory .
8287	Returns the sum of the durations of all executed statements .
8288	Returns the memory usage of all executed statements .
8289	Profile the execution of a method .
8290	Resolves an alias to a class .
8291	Checks if the route matches a pattern and optional translation .
8292	Creates a new Twig engine instance .
8293	Extend the view factory .
8294	Extend the engine resolver .
8295	Creates a twig environment .
8296	Creates a Twig loader .
8297	Recursively parse the data .
8298	Creates a RespectValidator based on the given rules .
8299	Creates a negative or optional validator .
8300	Create chainable validators .
8301	Parse string rule .
8302	Parse the parameters for a rule .
8303	Start the server process .
8304	Stop the web server .
8305	Get address from pid file .
8306	Check if the process is running .
8307	Creates a process to run the web server .
8308	Returns all listeners for the given event name .
8309	Removes a listener from an event pattern .
8310	Returns true if the subject contains wildcards .
8311	Adds a listener pattern .
8312	Read the mandatory options .
8313	Build a multidimensional array .
8314	Returns a response for the given request exception and transformed exception .
8315	Get the response for the given exception .
8316	Get the displayer to use .
8317	Filters the displayers .
8318	Returns the first filter that matches the accept header .
8319	Add route lookups .
8320	Add addresses to the message .
8321	Creates an instance of the assets renderer .
8322	Register base collectors .
8323	Register collectors from config .
8324	Extend the event manager .
8325	Create session manager .
8326	Create route dispatcher .
8327	Create router instance .
8328	Creates a UrlGenerator instance .
8329	Detect the console environment .
8330	Get environment argument .
8331	Return a javascript response .
8332	Converts an array to a Toml object .
8333	Process array of arrays .
8334	Returns a human - readable representation of the metadata .
8335	Get loader paths .
8336	Build table rows from loader paths .
8337	Get Whoops instance .
8338	Add where clauses to route .
8339	Merge group attributes into route .
8340	Convert an action to a controller action .
8341	Prepend group namespace if it is not already present .
8342	Prepends the last group prefix to the URI .
8343	Update the route group stack .
8344	Creates a new Sanitizer instance .
8345	Add before bootstrapping callback .
8346	Add a callback to be called after bootstrapping .
8347	Bootstraps the application with the given bootstraps .
8348	Call all callbacks for the given type and bootstrap .
8349	Generate a unique session id .
8350	Merges the given flash keys with the existing ones .
8351	Loads the session data from the handler .
8352	Read data from handler .
8353	Writes the metadata to the handler .
8354	Resolve current page .
8355	Ensure that all values in the query are valid UTF - 8 .
8356	Extend the event manager with a Traceable event manager .
8357	Returns an array of found files .
8358	Find Twig files .
8359	Validate a template file .
8360	Displays the details in the given format .
8361	Display text .
8362	Parse a middleware group .
8363	Check the mandatory options .
8364	Get configuration dimensions .
8365	Validates options .
8366	Check deprecated options .
8367	Register a resource with the router .
8368	Returns the URI for a resource .
8369	Returns a wildcard for a resource .
8370	Get resource prefix .
8371	Add resource destroy route .
8372	Returns the URI for a nested resource .
8373	Get resource action .
8374	Get the route name for a resource .
8375	Slice the traveler through the container .
8376	Returns a RequestHandler with the given middleware .
8377	Find argument files .
8378	Returns the IP address of the client .
8379	Checks if the given string is a valid IP address .
8380	Get the first IP address from the header .
8381	Set the domain of the message .
8382	Validates the input .
8383	Validate the given middleware .
8384	Creates a translation manager .
8385	Creates a schedule instance .
8386	Get computed profile data .
8387	Creates a Swift Mailer instance .
8388	Creates a new mailer instance .
8389	Set global address .
8390	Create the tooltip group .
8391	Create the tabs .
8392	Creates a table with the given data .
8393	Create dropdown menu content .
8394	Create metrics .
8395	Clones a variable .
8396	Returns a VarCloner instance .
8397	Returns the HtmlDumper instance .
8398	Appends the given code to the output .
8399	Appends a line of code .
8400	Add extensions to the twig environment .
8401	Sort middleware by priority map .
8402	Moves a middleware array from one position to another .
8403	Create the aggregate logger driver .
8404	Creates an instance of the emergency logger driver .
8405	Create a single logger instance .
8406	Create a daily logger instance .
8407	Creates an instance of the syslog log driver .
8408	Creates an instance of the error log driver .
8409	Create an instance of the Slack log driver .
8410	Creates a custom logger driver .
8411	Creates the monolog logger driver .
8412	Push processors to Monolog driver .
8413	Create a ServerRequest from an array of server variables .
8414	Returns the singular form of the given value .
8415	Match case .
8416	Creates a new local adapter instance .
8417	Creates a new console instance .
8418	Merges two arrays .
8419	Formats the group suffix .
8420	Check for specific environment file .
8421	Set environment file path .
8422	Get a transport instance .
8423	Create a new Swift Transport instance .
8424	Check if a transport exists .
8425	Creates a new SMTP transport instance .
8426	Create a new Mailgun transport instance .
8427	Create a SparkPostTransport instance .
8428	Creates a SesTransport instance .
8429	Creates a new repository instance .
8430	Returns a new RouteTreeNode with the given matchers and contents .
8431	Register console events .
8432	Extend Twig environment .
8433	Register the viserio twig extension .
8434	Returns an array of allowed HTTP methods .
8435	Adds a route to the route map .
8436	Check if the stream is a pipe .
8437	Adds a mime type .
8438	Add a parser .
8439	Parses the payload into an array .
8440	Returns a parser for given mime type .
8441	Get the MIME type of the payload .
8442	Sets up test config .
8443	Returns the duration of the request .
8444	Stops a measure .
8445	Add a measure .
8446	Returns a unique identifier for an exception .
8447	Generate a version 4 UUID .
8448	Sets the headers .
8449	Validates the HTTP protocol version .
8450	Returns true if the array contains only strings .
8451	Filters a header value .
8452	Get the retry time .
8453	Returns the invoker instance .
8454	Invalid type exception .
8455	Extend the cache item pool .
8456	Extend a simple traceable cache .
8457	Get an environment variable .
8458	Parse the parameter .
8459	Replace data with a new value .
8460	Creates the database table .
8461	Get the PDO connection .
8462	Connects to the database .
8463	Returns the list of files in the given directory .
8464	Render the assets into html .
8465	Get the last modified time of an asset type .
8466	Runs the callback and returns the response .
8467	Set the job description to null to prevent overlapping jobs .
8468	Extend the log manager with a DebugProcessor if enabled .
8469	Extend the profiler .
8470	Import a DOMDocument .
8471	Loads a DOMDocument from a file .
8472	Loads an XML string .
8473	Converts a PHP value to a PHP value .
8474	Validates an XML file .
8475	Converts a UTF - 8 string to a string .
8476	Checks if the given entry contains a valid header .
8477	Add references to the entry .
8478	Process an obsolete entry .
8479	Process the previous entry .
8480	Extract multi lines from an entry .
8481	Extract headers from an array of headers .
8482	Checks if the given file exists .
8483	Sets the uploaded file error status .
8484	Sets the stream or file .
8485	Validates that the stream is active .
8486	Mock a service .
8487	Parses a command expression .
8488	Parses an argument token .
8489	Parses an option token .
8490	Extracts the description from a token .
8491	Validates the cookie name .
8492	Validates the cookie value .
8493	Sets the value for the given key .
8494	Get the to addresses of a message .
8495	Creates the MongoDB cache pool driver .
8496	Create a Redis cache pool driver .
8497	Creates a new Predis cache pool driver .
8498	Create the filesystem cache pool driver .
8499	Create a new Memcached cache pool driver .
8500	Create an instance of the Memcache cache driver .
8501	Get data collector by name .
8502	Compiles a set of routes into a PHP class .
8503	Creates the router class template .
8504	Compiles the route tree into PHP code .
8505	Compiles the PHP code for a route HTTP method match .
8506	Compile disallowed http method or not found .
8507	Compile the found route .
8508	Returns the debug logger if any .
8509	Returns the computed number of errors .
8510	Group log levels by priority .
8511	Returns the event listener .
8512	Bind event to event manager .
8513	Unbind all events from the event manager .
8514	Creates a regular expression for the given event pattern .
8515	Get the value for the given key .
8516	Set the value for the given key .
8517	Processes the parameters of an array .
8518	Processes the given parameter .
8519	Renders an exception .
8520	Renders the editor .
8521	Renders the exception trace .
8522	Get the trace of an exception .
8523	Get the frames from an exception .
8524	Formats an array of arguments .
8525	Returns the lines of a file .
8526	Returns the contents of a file
8527	Normalize the path name .
8528	Resolve the given subject .
8529	Creates a new instance of the given class .
8530	Resolves a method and returns the result .
8531	Resolves a parameter .
8532	Resolve the parameters .
8533	Get method reflector .
8534	Checks if given value is a function .
8535	Merges parameters with the root parameters .
8536	Write the contents of a file .
8537	Write a file to the disk .
8538	Updates an existing stream .
8539	Decrypt a stream .
8540	Encrypt a stream .
8541	Decrypt a string .
8542	Encrypt a string .
8543	Create a stream from a string .
8544	Creates a transport factory .
8545	Creates a mail manager instance .
8546	Returns the version number of the given XML document .
8547	Returns the schema for a given XLIFF version .
8548	Fix the location of the xml . xsd file .
8549	Parse the visibility of a file or directory .
8550	Sanitize the given data according to the given rules .
8551	Run global sanitizers .
8552	Sanitize a field .
8553	Executes the given sanitizer .
8554	Resolves the callback .
8555	Resolves a command expression .
8556	Creates a new string command from the given expression .
8557	Returns the default values for the given callable .
8558	Assert that the given callable is valid .
8559	Check if callable is static call to non static method .
8560	Create a cookie jar instance .
8561	Converts the given value to the given element .
8562	Adds a node to the given element .
8563	Add a collection node to the document .
8564	Creates the root element .
8565	Casts an object to an array .
8566	Returns an array of all listeners that have been called .
8567	Returns the list of listeners that were not called .
8568	Validates that the given value is a samesite .
8569	Normalizes the expiration time .
8570	Normalizes the domain .
8571	Normalizes the given path .
8572	Get the expiration timestamp .
8573	Start a new collector .
8574	Applies the helpers to the translation .
8575	Filters the helpers from a translation string .
8576	Applies the filters to the translation .
8577	Log translation .
8578	Collects a message from the catalogue .
8579	Displays a list of files .
8580	Displays the files info as JSON .
8581	Yields a list of files in the given directory .
8582	Returns the contents of the STDIN .
8583	Get the directory iterator .
8584	Validates the event name .
8585	Converts a number of bytes to a number of bytes .
8586	Converts a number to its decimal representation .
8587	Get config from name .
8588	Create a new instance of the extension .
8589	Adds the extractor for the given format .
8590	Creates an alias loader instance .
8591	Get the cache path .
8592	Push a command onto the queue .
8593	Determine if the command should be queued .
8594	Create cookie session driver .
8595	Create the MigratingSession driver .
8596	Create cache based store .
8597	Build the session .
8598	Build the encrypted session store .
8599	Parse route action .
8600	Returns the first element that pass the truth test .
8601	Parses an XML note element into an array .
8602	Convert a string from UTF - 8 to UTF - 8 .
8603	Tag data with given tag .
8604	Creates a log manager .
8605	Confirm to proceed .
8606	Get the default confirm callback .
8607	Injects the profiler into the response .
8608	Collect data .
8609	Create the template .
8610	Create a new profile .
8611	Parse log level .
8612	Start the session .
8613	Store the current URL in the session .
8614	Collect garbage .
8615	Add the cookie to the response .
8616	Create a response with a view .
8617	Find a template by name .
8618	Normalizes the file name .
8619	Parse the view .
8620	Adds the content to the message .
8621	Send a Swift message .
8622	Check if the message should be sent .
8623	Create a new message instance .
8624	Call the message builder .
8625	Creates the view .
8626	Handle a found route .
8627	Prepares the URI path .
8628	Generate router file .
8629	Generate route cache directory .
8630	Returns the path for the given file .
8631	Checks if the given options are supported .
8632	Get the parser .
8633	Returns the value of the given file .
8634	Require a file only if it exists .
8635	Creates a symlink to a file or directory .
8636	Sets the directories .
8637	Add a directory .
8638	Imports a language file .
8639	Add a message catalogue .
8640	Set the fallback message catalogue for a given language .
8641	Returns the fallback message catalogue for the given language .
8642	Add presenter .
8643	Checks if there are more pages to display .
8644	Returns the display address .
8645	Finds the front controller for the given environment .
8646	Finds the hostname and port for the given configuration .
8647	Finds the best port available to run the web server .
8648	Escapes the given string .
8649	Get sorted data .
8650	Create append stream .
8651	Parses the given tokens and returns an array of messages .
8652	Seeks to the next non whitespace token in the iterator .
8653	Returns the value of the token iterator .
8654	Creates a new TraceablePDODecorater instance .
8655	Decrypt the cookie header .
8656	Encrypt the response cookies .
8657	Create a new cookie instance .
8658	Register the command .
8659	Get the console instance .
8660	Initializes the project directories .
8661	Find a view by its name .
8662	Get the path segments from a view name .
8663	Find a view in a list of paths .
8664	Returns an array of possible view files .
8665	Get event info .
8666	Render cookies into set - cookie header .
8667	Extend Twig environment .
8668	Returns messages sorted by time .
8669	Add a message to the log .
8670	Alias a middleware .
8671	Get logs from a socket .
8672	Handle view exception .
8673	Get error exception .
8674	Returns the path to the cache file .
8675	Ensure that a statistic proxy exists .
8676	Format the static proxy stub .
8677	Register the Markdown engine .
8678	Clean export string .
8679	Add tcomment to output .
8680	Add references to the output .
8681	Add flags to the output .
8682	Add the previous entry to the output .
8683	Add msgid to output .
8684	Add msgid_plural to output .
8685	Add the msgstr to the output .
8686	Add headers to the output .
8687	Get pagination links .
8688	Create the cache connector .
8689	Ensure that the user is correct .
8690	Checks if the expression passes .
8691	Run the command in the foreground .
8692	Run command in background .
8693	Calls the before callbacks .
8694	Call the after callbacks .
8695	Returns a closure that is applied to the given time interval .
8696	Returns true if the start time is between the end time .
8697	Merges the parent matchers with the child matchers .
8698	Optimize an array of matchers .
8699	Optimize the given matcher .
8700	Optimize the order of matchers .
8701	Creates a new html displayer .
8702	Creates a view displayer instance .
8703	Creates a WhoopsPrettyDisplayer instance .
8704	Returns the number of recipients in a message .
8705	Bootstrap the application .
8706	Handle the request and return the response .
8707	Render the exception .
8708	Pipe the request through the middleware and the router .
8709	Compile the parameters into a string .
8710	Sets the value at the given offset .
8711	Returns the invoker .
8712	Bind a plain type .
8713	Binds a service to the container .
8714	Binds an abstract to a concrete type .
8715	Resolve the given abstract to a plain value .
8716	Resolve a service .
8717	Resolve a singleton binding .
8718	Extend an abstract with its resolved value .
8719	Get the contextual binding format .
8720	Returns the message ID from the response .
8721	Converts an array of email addresses to an array of email addresses .
8722	Returns the MIME part of the given message .
8723	Get the message payload .
8724	Process the recipients .
8725	Process message parts .
8726	Process message headers .
8727	Checks if all required parameters are set .
8728	Returns the extension for the given path .
8729	Create a new view instance .
8730	Checks if a string ends with another string .
8731	Render the cookies into a request header .
8732	Creates a list of cookies from a cookie string .
8733	Sets the error .
8734	Sets the exit code .
8735	Create the URI for the given route .
8736	Prepare the route path .
8737	Check if the scheme is required for the given route .
8738	Add the port and scheme to the URI .
8739	Replace route parameters .
8740	Replace named parameters in a path .
8741	Add the query string to the URI .
8742	Get route query string .
8743	Parse where .
8744	Get the middleware for the current controller .
8745	Get disabled middleware for the current controller action .
8746	Adds a cookie to the collection .
8747	Splits a cookie pair string into an array .
8748	Inject Content - Type header .
8749	Returns a string with the specified number of words .
8750	Generate a random string .
8751	Replaces the first occurrence of a string in a string
8752	Replaces the last occurrence of a search string in a string .
8753	Replaces a string by position .
8754	Returns the verbosity level .
8755	Run the console command .
8756	Call a command .
8757	Call a command with no output .
8758	Returns the value of an argument or all of them .
8759	Get the value of an option .
8760	Asks a question to the user .
8761	Asks the user to anticipate the answer .
8762	Asks the user for a choice .
8763	Render a table .
8764	Output a line of text .
8765	Output an info message .
8766	Output a comment line .
8767	Output a question message .
8768	Output an error message .
8769	Add a warning line to the output .
8770	Configures the command using a Fluent definition .
8771	Adds arguments and options to the command .
8772	Get transmission id from response .
8773	Get the recipients of a message .
8774	Render the template .
8775	Add an exception that should not be reported .
8776	Reports an exception to the logger .
8777	Add transformer .
8778	Handles PHP errors .
8779	Handles the shutdown of the application .
8780	Registers the exception handler .
8781	Registers the shutdown handler .
8782	Prepare the exception .
8783	Returns the transformed exception .
8784	Returns the log level for an exception .
8785	Returns true if the exception should not be reported .
8786	Adds a dumper for the given extension .
8787	Dumps an array to a string .
8788	Returns DumperContract for given extension or mime type .
8789	Returns a string representation of an Swift_Message .
8790	Returns an array of parameters for the provided function .
8791	Converts a code point to its UTF - 8 equivalent .
8792	Register queueing dispatcher .
8793	Optimize the route tree .
8794	Extract common parent node .
8795	Get SQL with parameters .
8796	Tries to open a file using the given mode .
8797	Creates a stream for the given resource .
8798	Copy data from a stream to a string .
8799	Copies data from source stream to destination stream .
8800	Read a line from a stream .
8801	Set default path and domain .
8802	Get the path and domain .
8803	Get the pretty page handler .
8804	Update the Host header from the URI .
8805	Filters the HTTP method .
8806	Creates a URI from the provided value .
8807	Returns the path without the extension .
8808	Changes the extension of a file or directory .
8809	Creates a cache manager instance .
8810	Returns true if the mock should receive the given arguments .
8811	Resolves a statical proxy instance .
8812	Check if the instance is a mock .
8813	Inflects a command segment .
8814	Sets the file to be uploaded .
8815	Set Content - Disposition header .
8816	Sets the Last - Modified header .
8817	Returns a new instance with the given value .
8818	Describes a command .
8819	Describe commands .
8820	Get namespace sorted command infos .
8821	Create the cookie tab .
8822	Prepare request attributes .
8823	Prepare request headers .
8824	Prepare server params .
8825	Returns the parsed body of the request .
8826	Exports a value as a string .
8827	Get a crypted connection .
8828	Get cache config .
8829	Creates a FilesystemAdapter instance .
8830	Parses a route pattern and returns an array of route segments .
8831	Generates a regular expression for the given array of matches .
8832	Returns the invoker .
8833	Checks if an object exists .
8834	Get target language from file .
8835	Creates a var_dump connection .
8836	Create a dump server instance .
8837	Check if a path exists .
8838	Returns the transformed path .
8839	Returns the contents of a directory .
8840	Filters the contents by type .
8841	Check if tokens match .
8842	Add the cookie to the response .
8843	Sanitize collected messages .
8844	Compute the message count .
8845	Sort messages by state .
8846	Adds a stream .
8847	Closes all open streams .
8848	Decode a GIF image .
8849	Decode the extension marker .
8850	Decode the image descriptor .
8851	Decode the image data .
8852	Set order direction
8853	Returns an array of items .
8854	Load the results from the API .
8855	Sets the cities from an array
8856	Set the PSTNNetworks from an array
8857	Load PSTN networks for a country .
8858	Load the country s cities .
8859	Get all countries .
8860	Get a city by id
8861	Pads a string to a block size
8862	Get all countries .
8863	Update all pstn networks
8864	Update a list of networks
8865	Creates a mapping object from an array .
8866	Decode the delay value .
8867	Has Transparent Color
8868	Decode disposal method .
8869	Get image size
8870	Get offset .
8871	Set the offset .
8872	Returns the country object .
8873	Returns an array representation of the object .
8874	Create a new object from a flat list .
8875	Fill the object from an array .
8876	Create a new DIDNumber if it doesn t already exist
8877	Generate unique hash
8878	Generate auth string
8879	Load the invoice .
8880	Make a call to the didww service
8881	Get a frame by index .
8882	Add an offset to the first frame .
8883	Add a size to the first frame .
8884	Get the number of loops in the netscape extension
8885	Returns true if the screen descriptor contains a global color table .
8886	Returns the number of global colors in the current screen descriptor .
8887	Returns the background color index .
8888	Add a value to the first frame without the given property .
8889	Creates a new frame with the given property .
8890	Returns an array representation of the object .
8891	Get all balances for all reseller subaccounts
8892	Get all balances as an array
8893	Get a list of all balances
8894	Change the pre - paid balance of a customer .
8895	Synchronize the pre - paid balance of a customer .
8896	Sets the size of the canvas .
8897	Set from a Decoded object
8898	Create a new frame from a GIF resource .
8899	Encode this frame .
8900	Builds the logical screen descriptor .
8901	Builds the Netscape extension .
8902	Encode a Frame .
8903	Builds the graphic control extension .
8904	Builds the image descriptor .
8905	Create a new DIDNumber for an order .
8906	Change the autorenew status of an order
8907	Renew an order .
8908	Reload the service details from the server .
8909	Updates the mapping of the order .
8910	Generate a unique hash for the order .
8911	Checks if an IP is in a given range .
8912	Returns the value of a parameter .
8913	Link a metadata key to a service .
8914	Sets meta data for a service .
8915	Adds metadata for a service .
8916	Removes a service from the container
8917	Release a service .
8918	Get a service by name .
8919	Creates a service instance from a factory .
8920	Resolves a service provider .
8921	Register a service provider .
8922	Binds a factory to a name .
8923	Bind a class to the container .
8924	Binds a factory to a service resolver .
8925	Bind a factory to a shared service resolver .
8926	Returns the type of the resolver for the specified service .
8927	Adds an argument .
8928	Add arguments from an array .
8929	Resolves the arguments .
8930	Creates a new instance of the class .
8931	Sets the tokens .
8932	Returns the current token .
8933	Returns the next token .
8934	Skips the current token until it is of the given type .
8935	Returns an array of remaining tokens .
8936	Returns an array of tokens until the current token type is found .
8937	Returns an array of tokens until the closing token or the opening brace is encountered .
8938	Create an error for an unexpected token .
8939	Parses a child node .
8940	Parses the input stream and returns the resulting node .
8941	Sets the container name .
8942	Adds a service to the container
8943	Adds services from an array .
8944	Adds a service to the container .
8945	Imports a container namespace .
8946	Is invalid service builder string .
8947	Generate a normalized service name .
8948	Generate the container class .
8949	Returns the resolver method name for the given service .
8950	Generates code for service arguments .
8951	Generate the meta data .
8952	Generate service resolver types .
8953	Generate resolver method mappings .
8954	Generate service resolver methods .
8955	Creates a ValueNode from a Token .
8956	Set value type .
8957	Generate the mapping file .
8958	Returns the token s value .
8959	Returns true if the token is a value .
8960	Check if an element with the given key exists .
8961	Push a value onto the end of the collection .
8962	Converts this node to a native PHP array .
8963	Returns the next token .
8964	Returns an array of tokens .
8965	Index action .
8966	Runs a command and adds it to the result .
8967	Create a backup of the database .
8968	Pull the repo into the install dir .
8969	Copy environment to install dir .
8970	Install composer .
8971	Run the npm update command .
8972	Run db seed command .
8973	Deploy the webroot .
8974	Resolves a service .
8975	Sets the cache directory .
8976	Creates a new container instance .
8977	Handle the webhook request .
8978	Import paths from a vendor directory .
8979	Check if a path exists .
8980	Reads the code from a file .
8981	Returns the code for the given namespace .
8982	Parses the given container file .
8983	Handles the given scope .
8984	Handle a scope import .
8985	Handles the parameter definition .
8986	Creates a service arguments definition from the given arguments node .
8987	Handle a service definition .
8988	Creates a service definition from an array .
8989	Calls a method on the service .
8990	Add a method call .
8991	Add meta data .
8992	Check if the request origin is a GitHub hookshot
8993	Check if the request is authentic .
8994	Sets the value of the parameter .
8995	Get the name of a workout type
8996	Returns a string representation of the object .
8997	Send the request .
8998	Set endomondo type id
8999	Get the end time .
9000	Returns the points as a string
9001	Return the GPX representation of this track
9002	Collect the response data .
9003	Get the models from the query .
9004	Get the ajax payload .
9005	Get the response from a callback .
9006	Run a callback .
9007	Sanitize a handle .
9008	Validate all registered validations .
9009	Validate a single value
9010	Sets the size for a given device .
9011	Add a reset device .
9012	Returns the size for a given device .
9013	Builds the column .
9014	Check if the current user is a certain role .
9015	Begins the widget .
9016	Renders the next column .
9017	Returns a string representation of the cell .
9018	Begins the row .
9019	Get column resets as string .
9020	Returns the current index .
9021	Migrate tl_content from legacy to columnset_id
9022	Register ajax handle .
9023	Ajax handler .
9024	Set the callback that will be called when the response is received .
9025	Add multiple validation rules at once .
9026	Handle the response .
9027	Get the response type .
9028	Send response headers .
9029	Send the response body .
9030	Returns the content of a geo - ip2 request .
9031	Returns true if the given method is supported by the GeoIP2 API .
9032	Toggle the visibility of a record
9033	Checks if the current user has access to the column .
9034	Build the grid .
9035	Get a column as a string .
9036	Add a column reset
9037	Add column resets .
9038	Returns an array of reset values for a column .
9039	Check if a column has a reset for a given size .
9040	Returns the column resets as a string .
9041	Register a plugin handle .
9042	Enqueue scripts .
9043	Get all registered nonces .
9044	Get the grids .
9045	Hook called when a template is parsed .
9046	Hooks into the content element .
9047	Get the grid elements for a given data container .
9048	create row .
9049	create column .
9050	Build grid columns .
9051	Fetch a columnset from the database .
9052	Prepares an array of custom classes .
9053	Build column resets .
9054	Create a grid by ID .
9055	Hook for the parse template hook .
9056	Hook for isVisibleElement hook .
9057	Hook to load the form field .
9058	Get grids .
9059	Prepare container .
9060	Update the subcolumns definition .
9061	Append columnset id palette
9062	Append column sizes to palette
9063	Get all columnset types
9064	Get the grids of the active record .
9065	Get the columns for the module
9066	Get column orders
9067	Get column numbers
9068	Get a value from the session or data .
9069	Returns true if the given key exists in the session .
9070	Delete an item from the session .
9071	Load a value from the cache if it doesn t already exist .
9072	Reflash the session with the given keys .
9073	Parse the insert tag
9074	Get the walker for the given identifier .
9075	Translate the params for replaceInsertTagsEvent .
9076	Get enc params .
9077	Get dec params .
9078	Save dynamic data .
9079	Check if the field is valid .
9080	Save the uploaded file .
9081	Initialises the entity .
9082	Renders the fields for the given locale .
9083	Returns the value of a field in the given locale .
9084	Returns the field values for the given locale .
9085	Returns true if all entities are valid .
9086	Save all entities .
9087	Assign the dynamic fields to the view .
9088	Get field by locale
9089	Get repeaters by locale .
9090	Get all entities by field id
9091	Get entity by id entity_type and field_id
9092	Duplicate this translation .
9093	Initialize the rule .
9094	Returns true if the form is valid .
9095	Render the group fields .
9096	Save all group fields
9097	Get group by rule
9098	Match the given rule against the given options .
9099	Initializes a group .
9100	Get field post data
9101	Sets the character at the given position .
9102	Returns true if the pair is present in the map .
9103	Generate a row of characters .
9104	Return the number of rows .
9105	Get dot from pixel map
9106	Calculates the prime coordinates .
9107	Initializes the repeater fields .
9108	Create list controls after post data .
9109	Create list control .
9110	Create field control .
9111	Create header repeater control .
9112	Save repeater translations .
9113	Returns the display value of the field group .
9114	Get field value by field id
9115	Get the name of the template .
9116	Get the default template name .
9117	Initialize the value of the field .
9118	Get the repeater value model .
9119	Get html id .
9120	Get html name .
9121	Save field or repeater field
9122	Save the field .
9123	Save repeater field
9124	Get an option by key .
9125	Move forward .
9126	Moves the cursor to a new position .
9127	Checks if the given task is an ancestor of this task .
9128	Checks if this taskConfiguration has a descendant of the given taskConfiguration .
9129	Reset the parser to its initial state .
9130	Checks the input against the given conditions .
9131	Configure the condition options .
9132	Configures the condition options .
9133	Check if a value is valid .
9134	Check if a value is empty .
9135	Returns the duration of the event .
9136	Contextualize options .
9137	Find the best task to output .
9138	Get the input code for the given process state .
9139	Check if the process has been resolved .
9140	Get the file path .
9141	Sorts processes by code .
9142	Handle the iterator from the input .
9143	Flushes the queue .
9144	Returns the number of lines in the file .
9145	Rewinds the stream .
9146	Returns the stripped transfomer code .
9147	Returns the dependency groups of all task configurations .
9148	Returns the main task group .
9149	Checks for circular dependencies .
9150	Builds the dependencies for the given task configuration .
9151	Sort the dependencies .
9152	Resolves the given task .
9153	Initializes the task with the given configuration .
9154	Flushes the given task configuration .
9155	Handle the process state .
9156	Check process configuration .
9157	Validates the model .
9158	Returns the model as an array .
9159	Returns an array of model fields .
9160	Unsets a relation .
9161	Format class name to relation name
9162	Add one - to - one relation
9163	Add one to many relation
9164	Add a many - to - many relation
9165	Executes a query and returns an array of objects .
9166	Returns a collection of models matching the given criteria .
9167	Find one record
9168	Returns the number of rows in the table
9169	Build a select query .
9170	Executes a select query and returns the results as an array .
9171	Hydrate model with data .
9172	Deletes the model from the database .
9173	Update the model in the database .
9174	Insert a row into the table .
9175	Set whether or not to keep memory .
9176	Remove the given callback from the session .
9177	Get a model by its primary key .
9178	Remove a model from the collection .
9179	Get the index of a model by its primary key .
9180	Saves all elements to the database .
9181	Prefix where data with table name .
9182	Prefix order keys with table name .
9183	Get the column definition without the column name .
9184	Register a table .
9185	Make a simple query object .
9186	Make a query object for a given table .
9187	Get the model for a table .
9188	Maybe install a table .
9189	Maybe uninstall a table .
9190	Check if a table is installed .
9191	Fires a plugin event .
9192	Save a WP_Post .
9193	Get the foreign column name .
9194	Parse the default values for the columns .
9195	Create a new query from a model .
9196	Add a select clause to the query .
9197	Select a single column
9198	Select all .
9199	Add an expression to the query .
9200	Add a where clause to the query .
9201	Generate a where tag .
9202	Add a nested where clause .
9203	Add a where clause to the query .
9204	Add an or where clause to the query .
9205	Add a where date clause to the query .
9206	Add a where meta filter to the query .
9207	Order by .
9208	Order by expression .
9209	Group the results by a column .
9210	Group by expression .
9211	Add a join to the query .
9212	Join this query with another query .
9213	Paginates the results .
9214	Executes a callback for each result of the query .
9215	Set the relations for the query .
9216	Parse a nested with .
9217	Assign a value to an array using dot notation .
9218	Make the limit tag .
9219	Build the SQL query .
9220	Update meta cache .
9221	Find a record by primary key .
9222	Find many records by primary keys .
9223	Find a model by primary key or throw an exception .
9224	Find a model by primary key or create a new one .
9225	Get the first record or create a new one .
9226	Get the first model or create it .
9227	Update or create a record .
9228	Handle eager loading .
9229	Eager load nested models .
9230	Assert that an operator is valid .
9231	Prepare a column name for use in a query .
9232	Escape a value for storage .
9233	Configures the model with the given configuration .
9234	Returns the value of a column .
9235	Create a new record in the database .
9236	Adds a ORDER BY clause to the query .
9237	Adds an order to the query .
9238	Set all columns
9239	Build an eager load map from a list of models .
9240	Save a comment .
9241	Get the default value of an argument .
9242	Execute the query and parse the results
9243	Parse the results into an array of objects .
9244	Parse the return_value into a Select object
9245	Parses the order arguments .
9246	Parse pagination .
9247	Check if two numbers are numerically equivalent .
9248	Check if there are any changes between two arrays .
9249	Fetch all models from the database .
9250	Deletes all records from the database .
9251	Update a record in the database
9252	Returns the total number of pages .
9253	Paginates the results .
9254	Returns the number of found models .
9255	Returns the number of models that have been fetched without a limit .
9256	Check if an offset exists
9257	Sets the value at the specified offset .
9258	Returns the model at the given offset .
9259	Build the query .
9260	Boot the model if not already booted .
9261	Boot all traits .
9262	Fill the model with the given data .
9263	Set the attributes that should be guarded .
9264	Set the attributes that should not be guarded .
9265	Check if a column is fillable
9266	Set the value of an attribute .
9267	Set the value of an attribute .
9268	Returns the value of the requested attribute .
9269	Get the raw attribute value .
9270	Get the value of an attribute .
9271	Get the raw value of an attribute from an array .
9272	Return an array of all relation attribute methods .
9273	Returns the relation object for the given attribute .
9274	Sets the value of a relation .
9275	Get the value of a relation .
9276	Refresh the model s data .
9277	Returns an array of dirty attributes .
9278	Get object by primary key .
9279	Create a new model instance from a query .
9280	Get data from primary key .
9281	Check if data is cached .
9282	Update a row in the database .
9283	Save the model .
9284	Save has_foreign_relations .
9285	Save loaded relations .
9286	Save the model in the database as an insert .
9287	Save the model in the database as an update .
9288	Finish saving the model .
9289	Delete this object from the database .
9290	Create many models .
9291	Fire model event .
9292	Register a model event listener .
9293	Get the data to be cached .
9294	Register a global scope .
9295	Return a query with no global scopes .
9296	Return a new FluentQuery instance with the given relations .
9297	Convert the model to an array .
9298	Get the comparison string .
9299	Get the value of the query .
9300	Get a row by its primary key .
9301	Get a single column from a row .
9302	Helper function used by the get_by_or_many_by method .
9303	Returns the number of rows in the database
9304	Insert data into the database .
9305	Update a row in the database
9306	Delete a row from the database
9307	Delete many records from the database .
9308	Generate an exception from the last error
9309	Save a term .
9310	Make a query object for the related model .
9311	Fetch the results for eager load .
9312	Adds a new value to the insert array .
9313	Add a value to the set .
9314	Sets the query type to SELECT .
9315	Reset the select array .
9316	Sets the query type to update .
9317	Sets the query type to delete .
9318	Sets the query type to INSERT .
9319	Sets the name of the table to fetch from .
9320	Add a join to the query .
9321	Adds an AND condition to the WHERE section .
9322	Adds an OR WHERE condition .
9323	Reset the order .
9324	Sets the limit for the query .
9325	Reset the query limit .
9326	Boot Trash Support .
9327	Fetch the results from the database .
9328	Load model from cache .
9329	Load a collection from the cache .
9330	Cache the results .
9331	Cache a collection .
9332	Cache a single result .
9333	Maybe register cache events .
9334	Save user .
9335	Set the last updated at timestamp .
9336	Get container parameters .
9337	Checks if the container is cacheable .
9338	Boot the container .
9339	Load container configuration .
9340	Build the column name for the given table .
9341	Persists the given values .
9342	Persist the removed models .
9343	Persist added models to the database .
9344	Creates a new record .
9345	Initialize the authenticator .
9346	Create a new model .
9347	Convert an asset .
9348	Build the result file name .
9349	Parses a less asset and writes it to the result file .
9350	Send a message .
9351	Executes a get query and returns messages .
9352	Returns the number of documents matching the given query .
9353	Requeues a message .
9354	Sends a message to the queue .
9355	Verifies that the sort array is valid .
9356	Add a message to the container .
9357	Returns the messages for the given type .
9358	Import issues .
9359	Returns the value for the given identifier .
9360	Check if a key exists .
9361	Extend an existing service .
9362	Register a service provider .
9363	Add a tag to a service
9364	Finds all services tagged with the given tag .
9365	Boots the application .
9366	Initializes the bundles .
9367	Get kernel parameters .
9368	Validates the given content .
9369	Validates the given content using the configured schema retriever .
9370	Validates the given content using the XSD validator .
9371	Get an AssetContainer instance .
9372	Output all js assets .
9373	Output css assets .
9374	Returns the assets for the given container and type .
9375	Arranges an array of assets .
9376	Check if a dependency is valid .
9377	Creates a new post validator .
9378	Creates a new retriever instance .
9379	Creates a new XsltRetriever instance .
9380	Creates a new CertificadoValidator instance .
9381	Create a new CFDI reader .
9382	Handles a command .
9383	Set a cookie .
9384	Returns the value of a cookie .
9385	Returns the first element of an array that pass the truth test .
9386	Check if the given raw password is valid .
9387	Returns the node with the given path or null if not found .
9388	Returns the value of the attribute at the given path .
9389	Add a child to a parent .
9390	Populates the source node with the destination node .
9391	Retrieve a node by path .
9392	Checks if a required value is set .
9393	Add Doctrine queries from a DebugStack .
9394	Add timers .
9395	Convert file size to human readable format
9396	Append a validator to the collection .
9397	Removes a validator from the collection .
9398	Returns the validator at the given index .
9399	Creates a new command from an array of arguments .
9400	Runs the factory .
9401	Runs a CFDI reader from a file
9402	Authorize a user .
9403	Returns true if the user is logged in .
9404	Logs in the given user .
9405	Logout the user .
9406	Add a new constraint .
9407	Validates the input .
9408	Redirect to a given path .
9409	Returns the path of the class .
9410	Returns the message at the given index .
9411	Generate a custom post type name .
9412	Returns an array of functions
9413	Resolve the command handler .
9414	Setup the validator .
9415	Sum a collection of nodes .
9416	Get a value from the input array .
9417	Set sequential meta box position .
9418	Generate a taxonomy name based on the class name
9419	Return a redirect response .
9420	Register commands from all bundles .
9421	Returns the bundle metadata .
9422	Returns the metadata for a given namespace .
9423	Finds the namespace and path for the given ClassMetadataCollection .
9424	Add an asset to the collection .
9425	Renders a view and returns a Response .
9426	Save a value to the cache .
9427	Loads the content of the CFDI file .
9428	Removes all non -SatNSschemaLocations from the XML Schema instance .
9429	Removes all non - allowed namespaces from the current node .
9430	Remove unused namespaces .
9431	Initializes the bindings .
9432	Binds the meta data bindings to the registered items .
9433	Get the name of the view file in Dashed case .
9434	Initializes the page context .
9435	Renders the Timber template .
9436	Load all config files .
9437	Add a route that matches the given path .
9438	Add a route collection to the current route section .
9439	Add a group of routes to the router .
9440	Start a block .
9441	Stop a block .
9442	Output a block .
9443	Creates a controller from a string .
9444	Instantiate a controller .
9445	Validates a URL .
9446	Find a template by its logical name .
9447	Set application entity manager .
9448	Sets the connection to the application .
9449	Render a view .
9450	Open the form .
9451	Add data transformers .
9452	Get a feed from the public endpoint .
9453	Make a market request .
9454	Make an account request .
9455	Prepare an array of attributes .
9456	Add an extra value to the message .
9457	Returns the first row of the result set as an object .
9458	Add dialog script
9459	Get the default connection instance .
9460	Begin a transaction
9461	Loads the ManiaCode XML document .
9462	Render the XML document .
9463	Connect to the server
9464	Watches for changes .
9465	Sets the background color
9466	Set the Manialink image
9467	Sets the image id
9468	Set the focus image
9469	Set image focusid
9470	Add a link to the element
9471	Get config value .
9472	Set config value
9473	Get translation by key .
9474	Get a value as an array .
9475	Strip styles from a string .
9476	Create a new redirect .
9477	Returns a sequence of numbers .
9478	Factory method to create a cache driver .
9479	Loads the Manialink .
9480	Start a new frame
9481	Ends a frame .
9482	Creates a redirect element .
9483	Append an XML string to the end of the list .
9484	Build the driver instance .
9485	Sets the border to use .
9486	Declares a font .
9487	Called when an image is loaded .
9488	Perform a fast image parsing .
9489	Callback for the ImageQuality event .
9490	Get a redirect for the given request .
9491	Get all redirect URLs .
9492	Get cached redirections .
9493	Sets the size of the icon
9494	Set the selected icon
9495	Invoke a command .
9496	Set the data
9497	Returns a string representation of a LIMIT clause
9498	Returns a string representation of the update parameters .
9499	Get a parameter by name
9500	Returns the value of the named parameter .
9501	Get a value from either the POST array or throw an exception
9502	Restores a parameter from the request .
9503	Redirect the user to the specified route .
9504	Creates a link string from an array of arguments .
9505	Creates an absolute link with the given arguments .
9506	Increase the X position
9507	Increase the Y position
9508	Increase the Z position
9509	Sets the position of the image .
9510	Sets the scale .
9511	Sets the vertical alignment of the table
9512	Sets the horizontal alignment
9513	Sets the alignment of the image .
9514	Sets the width of the image .
9515	Sets the height of the image .
9516	Sets the size of the image .
9517	Add an item to the menu
9518	Add a gap to the group
9519	Get a list of response keys .
9520	Get all redirection statuses .
9521	Fatal exception handler
9522	Computes the message of an exception .
9523	Computes the short message of an exception .
9524	Handle the request and return a redirect response .
9525	Uploads a file to the given path .
9526	Returns the current URL .
9527	Calculates the X coordinate of a given position with the given alignment .
9528	Returns the Y - coordinate of an element in the middle of the box .
9529	Get the aligned position of an element
9530	Build select .
9531	Quote data for use in a query .
9532	Reset all balance for a given date .
9533	Query to delete balances by assets .
9534	Configures the class loader .
9535	Returns a list of all available service ids .
9536	Get the return type of a service .
9537	Execute the transaction .
9538	Get the balance entry for the given account and date .
9539	Get the class hierarchy .
9540	Change Content - Type
9541	Parses the raw header into an array of headers .
9542	Converts a string to an array .
9543	Build a dimensional array .
9544	Get asset types .
9545	Execute the transaction .
9546	Get the balance close date for an asset type .
9547	Check if the strategy is valid .
9548	Mutate a value .
9549	Fetch data from the given URL .
9550	Return the URL for the builder .
9551	Generate the strings .
9552	Parses a CSV file and returns an array of strings
9553	Localize the csv id .
9554	Create a backup of the given strings .
9555	Get all assets by asset type code .
9556	Get asset type id by accountId .
9557	Get customer acc by asset type code .
9558	Get system customer id
9559	Execute an A transaction .
9560	Build the strategies key .
9561	Parse the Opauth response .
9562	login action .
9563	Render the view .
9564	Get asset types .
9565	Sends the response .
9566	Authenticate the user with Opauth .
9567	Verify token .
9568	Validate doc url .
9569	Register the client class .
9570	Register the token class .
9571	Register the service provider for the console .
9572	Start a new session .
9573	Retrospect a property .
9574	Sets the status code and reason phrase
9575	Parses the given CSS string and returns an array of parsed CSS .
9576	Find all tokens in the current CSS language .
9577	Find the end of a quoted string .
9578	Find the end of a URL .
9579	Check rule .
9580	Merge a list of words into a single string
9581	Check selectors .
9582	Extract the selectors from a list of words
9583	Parses the tokens and returns them as an array .
9584	Set the current application key for the current request .
9585	Get current app key .
9586	Add acceptable json type for request .
9587	Build select query .
9588	Unpublish a post
9589	Save unpublish post .
9590	Init scheduler .
9591	Generate a unique key and secret .
9592	Generate a token for the given key .
9593	Verifies that a token is valid for the given key and time .
9594	Generates the HTTP headers for the given application key .
9595	Generate query data .
9596	Get ID of customer .
9597	Add the fit manipulations .
9598	Get the manipulations .
9599	Creates a new account .
9600	Fills the object with the given values
9601	Returns the URI part of the URI .
9602	Set user info .
9603	Sets the port .
9604	Sets the path of the file .
9605	Returns the segment at the given index .
9606	Get a query parameter value .
9607	Builds a string from the given tokens .
9608	Get the aggregate values .
9609	Returns the configuration for the given strategy .
9610	Build the configuration for the given strategy .
9611	Composes a response object from an EAccount object .
9612	Execute an ARequest .
9613	Executes an operation .
9614	Prepare log ids .
9615	Validate transaction data .
9616	Sets the request headers .
9617	Set a header .
9618	Add a header to the response .
9619	Remove a header from the message .
9620	Adds a prefix to the list of prefixes .
9621	Adds multiple prefixes at once .
9622	Finds the PSR - 0 file for a given class .
9623	Finds a file with a known suffix .
9624	Convert an object to an array .
9625	Clean an array .
9626	Set the status code .
9627	Initializes the URI from the server parameters .
9628	Init query params from server params .
9629	Initializes the uploaded files array .
9630	Parse the uploaded files .
9631	Parse multiple uploaded files .
9632	Check if the response has the given content type .
9633	Run the application .
9634	Dispatch the command .
9635	Output a table .
9636	Output an error to STDERR
9637	Displays help for all available commands
9638	Returns a list of available commands .
9639	Make the directory if it does not exist .
9640	Append the given stub to the routes file .
9641	Replace a string in a file and save it
9642	Dispatch the request and return the response .
9643	Create the template response .
9644	Returns the current page .
9645	Get the response .
9646	Returns a Response object for the given URI .
9647	Returns the page for the given URI .
9648	Returns the alias for the given URI .
9649	Displays the model with the given id . If view is successful the browser will be redirected to the view page .
9650	Creates a new I18nMessage model . If creation is successful the browser will be redirected to the view page .
9651	Add headline ids .
9652	Dispatches the request .
9653	Run cli command .
9654	Register the service provider .
9655	Get markdown renderer
9656	Get the login blade files .
9657	Get migration files .
9658	Find a page by its identifier .
9659	Returns the page name for the given page identifier .
9660	Build meta data for a page identifier .
9661	Get the page tree .
9662	Returns a list of pages for a given path .
9663	Print success message .
9664	Load translation messages from database .
9665	Sends the activation mail to the user .
9666	Search the rows for a given query .
9667	Renders the template .
9668	Renders an expression .
9669	Resolves an expression key path .
9670	Find classes in all bundles .
9671	Prepare the configuration array .
9672	Returns the host of the request
9673	Get the value for a key .
9674	Displays a single Message model . If view is successful the browser will be redirected to the view page .
9675	Updates an existing Message model . If update is successful the browser will be redirected to the view page .
9676	Deletes an existing Message model . If deletion is successful the browser will be redirected to the index page .
9677	Finds the I18nTranslation model based on its primary key value . If the model is not found a 404 HTTP exception will be thrown .
9678	List all pages
9679	Returns the content as a Markdown string .
9680	Returns the meta sorting .
9681	Returns the URI of the resource .
9682	Get the URL from the meta data .
9683	Returns the title of the object .
9684	Make a GET request to the API .
9685	Build the url for the request .
9686	Handle the response .
9687	Initialize the shared configuration .
9688	Write profiling information to a file .
9689	Get template content .
9690	Returns the value of the object at the given key path .
9691	Sets the root directory .
9692	Find class reflections .
9693	Returns the ReflectionClass for the given file .
9694	Upload a media .
9695	Insert media .
9696	Calculates the number of hours between the start and end dates .
9697	Returns the data that needs to be persisted .
9698	Register a clean entity .
9699	Gets the dirty fields from the new serialized model .
9700	Add identifiers to the dirty fields .
9701	Get entity id from string or entity .
9702	Render all tags .
9703	Get the real class name of an object
9704	Configure the tab element factory .
9705	Deletes the baseSource file if it exists .
9706	Create the title of the file
9707	Render pdf .
9708	Renders the image .
9709	Hydrates data into an object .
9710	Hydrates a list of models .
9711	Deserializes all data into a collection .
9712	Deserializes data .
9713	Guess the collection class name .
9714	Build sitemap data .
9715	Get the navigation for a given element .
9716	Returns the iterator for the given element .
9717	Normalizes the value of the attribute .
9718	Returns the value of an extra property .
9719	Generate a random string .
9720	Limit the number of words in a string .
9721	Recursively get all files in a directory .
9722	Generate short description
9723	Checks if a time slot overlaps another time slot .
9724	Returns all non overlapping time slots .
9725	Merges overlapped time slots into one array .
9726	Executes a GET request to the API .
9727	Merge default parameters with current request .
9728	Executes a request and returns the response .
9729	Render backend view .
9730	Returns the navigation iterator .
9731	Get the grid iterator .
9732	Before save event handler .
9733	Processes the given content .
9734	Updates an existing Media model . If update is successful the browser will be redirected to the view page .
9735	Do media join
9736	Upload media .
9737	Updates an existing Country model . If update is successful the browser will be redirected to the view page .
9738	List all media
9739	Renders media row .
9740	Deletes an existing Media model . If deletion is successful the browser will be redirected to the index page .
9741	Sets the attribute list .
9742	Returns the default serialized model .
9743	Create base directories .
9744	Export the views .
9745	Export the controllers .
9746	Export routes .
9747	Check packages .
9748	Copy plugins .
9749	Copy asset files .
9750	Copy the folders from one folder to another .
9751	Get settings by categories .
9752	Creates a new navigation from a serialized definition .
9753	Creates a new nav item from an array .
9754	Loads a block .
9755	Get module by name .
9756	Serialize an entity .
9757	Returns the model name for the given key .
9758	Returns the class metadata for the given model name .
9759	Returns the class metadata for the given id .
9760	Render the tree of pages .
9761	Returns a branch of the given pages .
9762	Removes an item from the cache .
9763	List all tags .
9764	Find the tag weights .
9765	Add tags to the database .
9766	Remove tags from the database .
9767	Get tab parent options .
9768	Generate columns for a given data container .
9769	Returns the number of required separators .
9770	Create separators .
9771	Create the stop element .
9772	Create tab element .
9773	Get the stop element .
9774	Add an icon to the member list
9775	Get select options .
9776	Returns a list of status constants .
9777	List all constants of a given type .
9778	Get the label for a type
9779	Get listing order array
9780	Replace the findText value with the replaceText value .
9781	Move to the next element in the collection .
9782	Get the title of the current item .
9783	Generates the code for an active field .
9784	Make a router driver instance .
9785	Get a driver instance by name .
9786	Call a driver .
9787	Call a route .
9788	Resolve dispatch dependencies .
9789	Get nested parameters .
9790	Find the routable attributes .
9791	Find the RESTful routable action name and parameters .
9792	Find resource routable action and parameters .
9793	Get the alternative resource action .
9794	Dispatch a route .
9795	Returns a list of pickups .
9796	Returns the calculator for the given shipping method .
9797	Get shipping method .
9798	Add a route .
9799	Build resource schema .
9800	Update shipping address from pickup address .
9801	Call a controller method .
9802	Handle an Illuminate response .
9803	Handle response callback .
9804	Throw an HttpException .
9805	Check if the given response is not an HTML response .
9806	Registers a new error handler .
9807	Get the options for an action .
9808	Delete an item from the cache .
9809	Save a cache item .
9810	Output a block of messages .
9811	Get a value from the cache .
9812	Set a value in the cache .
9813	Sets multiple values at once .
9814	Delete multiple items from the cache
9815	Checks if a key exists in the cache .
9816	Get the label .
9817	Get full path name .
9818	Make a tree of categories .
9819	Type a command .
9820	Set resource members
9821	Tries to load a PSR class .
9822	Set the account ID .
9823	Translate an exception into an exception object
9824	Get the console instance .
9825	Execute the PayPro API request
9826	Returns an array of all possible values for the enum
9827	Returns a list of containers .
9828	Update the properties of a container
9829	Check if a blob exists .
9830	Encode JWT .
9831	Decode a token .
9832	Get the payload from the token .
9833	Split the token into segments .
9834	Get the expiration timestamp .
9835	Creates a new index .
9836	Extracts the default value from a field definition .
9837	Add previous button
9838	Add next button
9839	Returns the value for the given button code
9840	Reveal an object .
9841	Checks if the given value is an object .
9842	Checks if a value is empty .
9843	Converts an array of data into a record .
9844	Parse the response from the server .
9845	Get datagrid configurator by name .
9846	Check if a configurator is available .
9847	Get writer class name by format .
9848	Get a writer from the content negotiation .
9849	Transforms a domain specific DateTime object into a DateTime string .
9850	Initializes the datagrid .
9851	Read data from a payload .
9852	Parse a payload .
9853	Write a payload .
9854	Get a data reader .
9855	Get a data writer .
9856	Run before each test .
9857	Called after each test .
9858	Clear the resolved instances after step .
9859	Initialize Laravel .
9860	Boot the Laravel application .
9861	Am on a route .
9862	Am on an action .
9863	Returns the action with the root controller namespace .
9864	Assert that the current url is a given route .
9865	Checks that the current URL is the given action .
9866	Assert that the session contains the given value .
9867	Assert that form has errors .
9868	Assert that the form error message exists in the view .
9869	Attempt to log the user in .
9870	Inserts a new record into a table .
9871	Transforms a number into a string .
9872	Returns the default number formatter .
9873	Nests a multidimensional array .
9874	Flattens an array .
9875	Recursively converts an array into an object .
9876	Creates a new column .
9877	Builds the header view .
9878	Builds a cell view .
9879	Creates a new column instance .
9880	Returns whether the column is a compound type .
9881	Get the base data for the request .
9882	Get shipping data
9883	Get invoice data
9884	Send data to AGM .
9885	Trims a string .
9886	Convert FQCN to block prefix .
9887	Transforms a currency value into a string .
9888	Parses the given value into a PHP boolean value .
9889	Add an unresolved column .
9890	Checks if the uploaded file is valid .
9891	Resolves a filename to a path .
9892	Update the form if the record is being edited
9893	Updates the form with the data from the edit form .
9894	Updates a form for editing an item
9895	Lock a record
9896	Apply a list of configuration options to the server .
9897	Publishes an item to all connected clients .
9898	Loads the file for the given locale .
9899	Send request and return response .
9900	Builds the Uri instance from the given parts .
9901	Store a newly created user in storage .
9902	Show the form for editing the specified resource .
9903	Update the specified resource in storage .
9904	Remove the specified resource from storage .
9905	Creates an instance of \ mPDF .
9906	Adds the host header to the request .
9907	Build a Guzzle request instance .
9908	Executes the callable chain .
9909	Check if a class exists .
9910	Run the event loop .
9911	Ensure that the thread is running .
9912	Queue a request for processing .
9913	Sends a batch of requests to PCC
9914	Returns the key for the given cursor .
9915	Rewinds the iterator to the first element .
9916	Exports this object as an array .
9917	Set options from an array
9918	Publishes a list of items .
9919	Make an HTTP request .
9920	Publishes an item to a channel
9921	Imports the headers from the given message into the given message .
9922	Returns the protocol version .
9923	Validates the given data with the given rules .
9924	Load translation messages .
9925	Sets the local validator path .
9926	Get validation errors .
9927	Update the number of calls .
9928	Get a locked message for this record
9929	Check if this object is being edited anyway
9930	Check if an offset exists
9931	Sort the collection using a callback .
9932	Parse the birthday .
9933	Format the birthday .
9934	Validates a birthday .
9935	Returns the constantellation for the given month and day .
9936	Translate the given constellation .
9937	success update action
9938	successfully sync roles
9939	on list roles
9940	Shows the edit role form .
9941	on user create or edit
9942	on area create
9943	Creates form for user .
9944	create role menu
9945	Find an object by an array of criteria or get a new one .
9946	Returns a new instance of the class .
9947	Returns the object factory .
9948	Removes all entities matching the given criteria .
9949	Removes one entity by an array of criteria .
9950	Removes one or more objects from the repository .
9951	Refreshes the cache for the given objects .
9952	Detaches one or more objects from the manager .
9953	Returns the name of the supported method .
9954	Calls a supported method .
9955	Run an action on a collection of objects .
9956	Flushes the given objects .
9957	Prepare tag from bits .
9958	Set the current page and items per page
9959	Set the current page
9960	Update the specified Permission in storage .
9961	Get the paginator .
9962	Find paginated by criteria or throw an exception .
9963	Boot extension components
9964	Boot memory acl
9965	Load the parts of the package .
9966	Extended validation .
9967	Save the model to the database .
9968	Validate the model .
9969	Merge rules .
9970	Remove unnecessary attributes .
9971	Auto hash attributes .
9972	Disables all enabled filters .
9973	Disable a filter .
9974	Restores the disabled filters .
9975	Restores a filter .
9976	get role actions column
9977	Assign the model to the given user .
9978	Check if the response is successful .
9979	Returns current template name
9980	Create role form .
9981	show edit form
9982	create user form
9983	user update form
9984	create new user
9985	update user data
9986	Deletes user by id
9987	Save user .
9988	Check if the current path is within the given path .
9989	Get registered type
9990	Returns the Etag for the given visitor identifier .
9991	Returns the timestamp field .
9992	Get the hash of the collection s timestamps .
9993	Executes the query and returns the result .
9994	Execute the query and return the results as an array
9995	Returns the number of rows in the collection
9996	Returns the table name for this type .
9997	Get the order by .
9998	Sets the order_by value
9999	Get the conditions as a string
10000	Add a condition to the query .
10001	Sets the join table name .
10002	Edit ACL .
10003	update role acl
10004	Set the logger .
10005	Starts the process .
10006	Stop the lock
10007	Kill the lock
10008	Add a where condition to the query .
10009	Get the WHERE condition .
10010	Returns the number of rows in the table .
10011	Executes the query and returns the first row .
10012	Returns the IDs of the rows in the result set .
10013	Executes the query and returns the number of affected rows .
10014	Load by type field .
10015	Get the SQL for a select statement .
10016	get modules data
10017	Smash a resource .
10018	Define all permissions .
10019	Assign a role to a user .
10020	Remove a role from a user .
10021	Create form .
10022	Edit an existing record .
10023	Store role .
10024	Update role .
10025	Delete role .
10026	Save role .
10027	import role permissions
10028	Returns the acl for the given id .
10029	Clear analytics data
10030	Clear message data
10031	make acl widget
10032	Show the form for editing the specified role .
10033	scope roles to builder
10034	Get user statuses
10035	get actions column
10036	User roles getter .
10037	Modifies an instance .
10038	Returns a producer instance for the given type .
10039	Register a producer for a given type
10040	Register a producer by class name
10041	Get an object by its ID .
10042	Returns a reference to the object with the given type and id .
10043	Add a value to the object pool .
10044	Remember an entity in the object pool .
10045	Returns the number of rows for a given type .
10046	Returns the default finder for the given type .
10047	Get select one by type .
10048	Returns an array of escaped field names for a type .
10049	Returns the escaped order_by property for the given type .
10050	Get all trait names for a given type .
10051	Recursively finds all trait names of a class .
10052	Add controls to a grid .
10053	Determine if the given checkbox is checked .
10054	Prepares the active page entity .
10055	Set login tracking data if login_noredirect is used
10056	Sets the email tracking for the active user .
10057	Returns the site path for a given URL .
10058	Analyzes a URL and returns information about it .
10059	Returns basket product category path
10060	Checks if two field values are the same .
10061	Load data from a database row .
10062	Creates a copy of the object .
10063	Revert a field to its original value .
10064	Get the old value for a field .
10065	Sets the value of a field .
10066	Insert the record into the database .
10067	Update the record in the database .
10068	Refresh the values of the generated fields for the given ID .
10069	Compare the values of a field with a reference value
10070	Generate a URI based on a named route .
10071	when store role
10072	Get field errors
10073	Check if a field has errors .
10074	Add a validation error .
10075	Prepares product title .
10076	Modify active page by contact controller .
10077	Modifies active page by newsletter controller
10078	Modify with user registration action
10079	Disables an event subscriber .
10080	Restores the event subscribers .
10081	Disables event listeners for a given event .
10082	Disable an event listener .
10083	Restores all event listeners .
10084	Restore event listeners .
10085	Get subscriber class name .
10086	Checks if the given class is an event subscriber .
10087	Get event listeners
10088	Returns active user hashed id .
10089	Returns user email hash .
10090	Generates a unique cache key .
10091	Generates cache keys .
10092	Send the request to the API
10093	Check if an item with the given key exists
10094	Get a value from the collection .
10095	Get a value from an array or object .
10096	Sets the value at the specified key .
10097	Put a value into the item .
10098	Set a value in an array or object .
10099	Remove an item from the collection
10100	Remove a value from an array or object .
10101	Set the logger .
10102	Bootstrap the service provider .
10103	Set mail config
10104	Get a set field by key .
10105	Convert a value to a PHP array
10106	Get the page size .
10107	Register the Capsule services .
10108	Validates the data against the required fields .
10109	Returns the singleton instance of WP_Notice .
10110	Initializes the plugin .
10111	Loads the main script .
10112	Display the notices .
10113	Register a notice .
10114	Dismiss notice AJAX .
10115	Dismiss a notice .
10116	Dismiss a user notice .
10117	Dismiss global notice .
10118	Restore notice .
10119	Restores a user s dismissed notice .
10120	Restore global notice .
10121	Get the list of notices that have been dismissed .
10122	Check if the notice has been dismissed .
10123	Get a notice by id .
10124	Refines an item .
10125	Refines a collection .
10126	Include attachments .
10127	Get items from raw data .
10128	Set the attachments .
10129	Parse the given array of attachments .
10130	Attaches an item to the receiver .
10131	Attaches a new attachment .
10132	Merges two arrays or objects .
10133	Get response headers
10134	Get the card reference .
10135	Returns the customer reference .
10136	Returns the fully - qualified class name of a class .
10137	Get the namespace of a class .
10138	Finds the method to add to an object .
10139	Initializes the field mappings .
10140	Set translation language
10141	Reads a property from an object .
10142	Displays a default entity manager .
10143	Invokes before method .
10144	Invokes the after method .
10145	Extend the collection .
10146	Append data to the collection .
10147	Prepend an entity to the beginning of the collection .
10148	Check if entity property is set
10149	Returns the last entity in the collection .
10150	Get element moved by offset
10151	Check if a value exists in the collection .
10152	Searches for an entity in the collection .
10153	Shift an element off the start of the collection .
10154	Filters the collection by a callback .
10155	Returns a copy of the collection where the callback returns true .
10156	Split the collection into chunks of the given size .
10157	Returns a slice of the collection .
10158	Splits this string into a given number of parts .
10159	Unset an element from the collection .
10160	Remove all entities that have the specified property from the collection .
10161	Reverses the collection .
10162	Get all values for a property .
10163	Binds a collection of values to the entity .
10164	Group entities by a field .
10165	Prepare scopes .
10166	Parse the scope arguments .
10167	Sets the type of a variable
10168	Registers an annotation based entities .
10169	Convert a string to camelCase .
10170	Prepare data for insert .
10171	Updates the data .
10172	Parse filter fields .
10173	Parse filter values .
10174	Convert an array to an object
10175	Returns the label .
10176	Get additional style by type
10177	Returns the additional styles of the given type .
10178	Returns the link for the current request .
10179	Convert an array or object into an array .
10180	Configures the model .
10181	Set the connection to use .
10182	Import a field from a relationship .
10183	Convert a namespace string to a namespace string .
10184	Fire the job .
10185	Mark record as deleted .
10186	Returns the class metadata for the given class name .
10187	Flushes an entity .
10188	Finds an entity with the given id .
10189	Removes all entities from the database .
10190	Removes an entity from the database .
10191	Refreshes an entity .
10192	Returns the repository for the given entity name .
10193	Returns true if the given entity is present in the collection .
10194	Creates an instance of the Doctrine ORM .
10195	Process the XCDR request
10196	Recursively merges two arrays .
10197	Merge two lines
10198	Check if the lines have been added or modified .
10199	Check if two lines have been removed or modified .
10200	The NotifyXcdrRecord method is called when a CDR record is received .
10201	Register WordPress services .
10202	Apply configs to the application .
10203	Add env vars to the application .
10204	Pop a job from the queue
10205	Insert a job record in the queue .
10206	Request the XCDR Set Attribute request .
10207	Convert a string with a delimiter to uppercase .
10208	Creates a new record .
10209	Read records from the database .
10210	Update a record .
10211	Destroys a record .
10212	Recycle a record .
10213	Count the number of records in a record
10214	Returns a proxy instance for the given key .
10215	Close the logger .
10216	Load the widget classes
10217	Load theme options
10218	onXmlRpcEliteBeginTurn - called when an elite starts turn
10219	Adds a child to the menu .
10220	Store a newly created permission .
10221	Show the form for editing the specified Permission .
10222	Update the specified Permission in storage .
10223	Remove the specified Permission from storage .
10224	Sets the adapter .
10225	Returns the type of the adapter .
10226	Waits until the connection is ready for reading .
10227	Get a list of channels
10228	Get a list of games
10229	Convert data to array
10230	Convert data to an object .
10231	Convert data to json .
10232	Convert an array to a string .
10233	Returns data as integer .
10234	Convert data as float .
10235	Get as boolean value .
10236	Generates the PHP code for the hydrator .
10237	Find all instance properties .
10238	Creates the constructor .
10239	Creates the hydrate method .
10240	Updates the rebuld config .
10241	Creates local composer . json file if it does not exist .
10242	Find a page by its attribute value .
10243	Find pages by attribute .
10244	Find a page by its option .
10245	Find pages by option .
10246	Register a widget binding
10247	Registers the view parser .
10248	Register the launcher .
10249	Get a database driver instance .
10250	Returns an invalid template result .
10251	Start a timer .
10252	Subscribe to a signal
10253	Unsubscribe from a signal .
10254	Get the value of an attribute .
10255	Set the primary and foreign keys for a column .
10256	Execute a query and return the columns .
10257	Set the properties of a column .
10258	Strip the table name from the table name .
10259	Selects a server .
10260	Selects a server by port .
10261	Returns the virtual server port for the given server ID .
10262	Returns the first TeamSpeak_Node_Server object matching the given name .
10263	Returns the TeamSpeak_Node_Server object matching the given unique identifier .
10264	Creates a new virtual server .
10265	Deletes a server .
10266	Starts a server .
10267	Stops the TeamSpeak server process .
10268	Returns an associative array of permission names .
10269	Find a permission by ID .
10270	Returns the ID of the permission with the given name .
10271	Returns the name of the permission with the given ID .
10272	Returns the category of a permission by its ID .
10273	Checks if the current user has the given permission .
10274	Adds a new log entry to the server .
10275	Tries to login to the TeamSpeak server .
10276	Logs the user out of the server .
10277	Sets the value of an identifier .
10278	Get validator from service locator
10279	Sets the content of the request to the given curl resource .
10280	Parses the response returned by the page fetcher .
10281	Common application attributes .
10282	Get the value of an option .
10283	Build Bitwise Options .
10284	Execute a user command
10285	Ping the server
10286	Set the value of an attribute .
10287	Formats the amount according to the currency .
10288	Formats the amount for accounting .
10289	Returns the rounded amount .
10290	Splits this money into multiple amounts based on a set of percentages
10291	Prepare and inject elements .
10292	Get user by access token
10293	Run the application .
10294	Search the router for the current request .
10295	Returns the request method .
10296	Get all logs .
10297	death by camel case
10298	Returns a human - readable representation of a number of bytes .
10299	Returns a human - readable string representation of the given codec .
10300	Returns the group name for the given group type .
10301	Returns a human - readable description of a permission type .
10302	Returns the log level .
10303	Converts a TeamSpeak log entry into an array .
10304	Returns a list of sessions based on status
10305	Get all traits used by this class .
10306	Call a trait method .
10307	Call event traits .
10308	Returns attribute labels .
10309	Returns attribute hints .
10310	Returns the object as an array .
10311	Fetches the error from the server response .
10312	Fetches the reply from the server .
10313	Returns the identity .
10314	Check if the user has an identity .
10315	Restores the model from the database .
10316	Get a user .
10317	Get a list of user s follow games
10318	Get all notices for a given context
10319	Get a channel .
10320	Escapes special characters in the string .
10321	Unescapes the current string .
10322	Get team by id
10323	Add a result .
10324	Get the stream of a channel .
10325	Get a list of streams
10326	Get a list of featured streams
10327	Get a list of streams followed by an access token
10328	Get streams summary
10329	Get top items
10330	Returns the value of the element .
10331	Resolves a TSDNS hostname .
10332	Get configurables .
10333	Sends a text message to the server .
10334	Kicks the client from the channel .
10335	Downloads the user s avatar .
10336	Bind events .
10337	Connect an event to the element .
10338	Get a query var from the query string
10339	Returns the base URI of the request .
10340	Sends a command to the server .
10341	Waits for an event from the server .
10342	Prepares a command for execution .
10343	Returns the TeamSpeak 3 host object .
10344	Displays a list of available extensions .
10345	Writes the extensions configuration file .
10346	Sets the parent element .
10347	Returns the columns of a table .
10348	Creates and returns the Transcoder instance .
10349	Get the value of a header by case insensitive key .
10350	Set a value by case insensitive key .
10351	Return the notices for the current user
10352	Lists all extensions .
10353	Do the request and return the response .
10354	Runs a specific extension task .
10355	Deactivates an extension .
10356	Activates an extension .
10357	Uninstalls an extension .
10358	Build and run task .
10359	Returns the TeamSpeak_Node_Client object matching the given nickname .
10360	Downloads the channel icon .
10361	Sends a text message to the server .
10362	Deletes the channel .
10363	Encode a payload using the given key and algorithm
10364	Sign a string with a key
10365	Decodes a JSON string .
10366	Commit the configuration to the file .
10367	Bootstraps the application .
10368	Copies the channel group .
10369	Sends a text message to all clients .
10370	Returns the name of the form class .
10371	Returns a single FOSEntity .
10372	Returns a list of FOS entities .
10373	Creates a new FOSModel entity .
10374	Edits an existing FOSEntity entity .
10375	Deletes an existing FOSUser entity .
10376	Reads the contents of a file .
10377	Parses a JSON string .
10378	Read a BOM file and parse it .
10379	Normalizes the id .
10380	Remove invalid attributes from input .
10381	Sets the value of the field .
10382	Adds an element to the collection .
10383	Returns the top level window .
10384	Removes an element from the collection .
10385	Get an object by its id .
10386	Loads the state attributes from a file .
10387	Saves the state of the application .
10388	Sets the data type .
10389	Called when a channel is created
10390	Returns the localized version data field .
10391	Get localized data field .
10392	Get other package versioned data .
10393	Get other package data .
10394	Returns a human - readable version of the readme
10395	Prepares the migration task .
10396	Build a ReportingTask .
10397	Match request method and request uri .
10398	Parse a route from a request uri and a resource .
10399	Check strictness of object .
10400	Returns the TeamSpeak 3 Profiler instance .
10401	Initializes the TeamSpeak3 transport .
10402	Get the blameable attributes .
10403	Get the timestamp attributes .
10404	Evaluate the attributes .
10405	Initializes the base actions info trait .
10406	This method is called before the request is executed .
10407	This function is called after the request has been completed
10408	Reads data from the server .
10409	Sends data to the server .
10410	Restores the database dump .
10411	Dump the database .
10412	Initializes the menu for a plugin
10413	Adds a button to the menu .
10414	Fire the event
10415	Populates columns with longest value .
10416	Populates the numeric columns with the smallest value .
10417	Transforms a JSON string into an associative array .
10418	Registers the Doctrine ORM configuration .
10419	Sets a file .
10420	Sets a post field .
10421	Sets the raw content .
10422	Resolve a class .
10423	Bind an abstract to a concrete instance .
10424	Get the concrete class name .
10425	Dispatches an event .
10426	Returns the type of a spacer channel .
10427	Returns the alignment of a channel spacer .
10428	Adds a set of specified permissions to a channel . Multiple permissions can be added at once .
10429	Removes a set of specified permissions from a channel . Multiple permissions can be removed at once .
10430	Adds a set of specified permissions to a channel client . Multiple permissions can be added at once .
10431	Removes a set of specified permissions from a channel client . Multiple permissions can be removed at once .
10432	Returns a list of files in a channel .
10433	Returns the TeamSpeak_Node_Client object matching the given ID .
10434	Returns the TeamSpeak_Node_Client object matching the given unique identifier .
10435	Moves a client to another channel .
10436	Kicks a client from the channel .
10437	Removes a set of specified permissions from a client . Multiple permissions can be removed at once .
10438	Returns the TeamSpeak_Node_ServerGroup object matching the given ID .
10439	Returns the server group with the specified name .
10440	Adds a set of specified permissions to a server group . Multiple permissions can be added at once .
10441	Returns an array of server group profiles .
10442	Returns the channel group with the given ID .
10443	Returns the channel group with the specified name .
10444	Adds a set of specified permissions to a channel group . Multiple permissions can be added at once .
10445	Resets the permissions for the current user .
10446	Uploads an icon to the server .
10447	Creates a new server snapshot .
10448	Returns a list of log entries .
10449	Adds a new log entry to the server .
10450	Sorts a list of clients based on their properties .
10451	Compares two group lists .
10452	Compares the file list .
10453	Creates a copy of the server group .
10454	Returns the icon name for the given key .
10455	Returns the class name of the object .
10456	Returns the HTML for the given viewer .
10457	Filters a list of nodes based on a set of rules .
10458	Write cache file .
10459	Returns the class name of the hydrator .
10460	Connect to the server .
10461	Disconnects from the TeamSpeak server .
10462	Reads a line from the connection stream .
10463	Returns true if the requested class can be created .
10464	Store a newly created role .
10465	Update the role .
10466	Remove the specified role from storage .
10467	Make a GET request to the API
10468	Returns the Corpus class for the current object .
10469	Returns the Corpus icon for the current object .
10470	Returns the corpus name of the current node .
10471	Returns the suffix flag image for the current client .
10472	Initializes the file transfer .
10473	Uploads data to the server .
10474	Returns the contents of a file from the server as a string .
10475	Returns the session context .
10476	Returns the type manager .
10477	Get the database connection .
10478	Removes a database connection .
10479	Process security filters
10480	Dispatches the request .
10481	Get parameters from GET
10482	Render a webpage .
10483	Validates the request .
10484	Dispatch the view .
10485	Redirect to default module view
10486	Redirect to default user view
10487	Initializes the user profile .
10488	Get user preference
10489	Get the default permission for a group .
10490	Get current view name
10491	Sets the current view name
10492	Returns the current view set
10493	Sets the current view set
10494	Set the base path of the application .
10495	Returns the path to the module directory .
10496	Returns the SQL to hash the data .
10497	Checks if a string matches a given hash .
10498	Reads the metadata from the XML file .
10499	Use an account
10500	Send an email
10501	Log an email .
10502	Get information about the server .
10503	Returns the path to the autoload library file for the given class name .
10504	Loads a metadata class .
10505	Returns the path to the core lib class file .
10506	Finds the class file on cache .
10507	Fill a person with affiliations
10508	Set a job .
10509	Process all jobs .
10510	Check if a given date is in the past .
10511	Render the label
10512	Flattens a path .
10513	Get the application configuration .
10514	Create a new request .
10515	Store all responses in the _responses array
10516	Returns an array with the values of the given fields and labelField in the form of an associative array .
10517	Render a XY Plot
10518	Returns the mark value for a given mark .
10519	Returns the font code for a given font name
10520	Returns a singleton instance of this class .
10521	Get an attribute by key .
10522	Set an attribute in a group .
10523	Get an attribute from a group .
10524	Find a model by its primary key or create it .
10525	Get the model .
10526	Generates a unique id for a hook .
10527	Call all filters .
10528	Append a callable to a hook .
10529	Check if a hook exists .
10530	Call a hook .
10531	Replace Hook Function
10532	Returns the number of filters registered for the given hook .
10533	Check if hook is active .
10534	Check if a hook has been called
10535	Add route to router .
10536	Add a route to the router .
10537	Run the application .
10538	Execute a singal execution .
10539	Sets the value for the given key .
10540	Returns the raw definition for the given id or closure .
10541	Encrypt a value .
10542	Decrypts a value .
10543	Get the default key .
10544	Calculate the arguments .
10545	Get the type of a string
10546	Add a new app .
10547	Get a sub route .
10548	Returns a string representation of the tree .
10549	Unserialize the object .
10550	Converts a begin year to an actual year .
10551	Get current timestamp .
10552	Returns the name of the given day .
10553	Returns the short name of the day .
10554	Returns the month name .
10555	Returns the short month name for the given month .
10556	Format a datetime .
10557	Returns a formatted datetime .
10558	Register base services .
10559	Create a new section tree .
10560	Sets the owner of the entity .
10561	Remove comments from the input .
10562	Minify CSS .
10563	Set a global .
10564	Quote string or array
10565	Explode a string into an array .
10566	Returns the role with the given name .
10567	Add a role to the user .
10568	Check if the user has the given role
10569	The default error handler .
10570	The exception handler
10571	Get error message for output
10572	Return the backtrace of an error .
10573	Sets the name of the user .
10574	Adds a setting to the result set .
10575	Add a setting that can be cached .
10576	Unset an offset .
10577	Sets the sync state .
10578	Collect data for sync .
10579	Returns the expression context .
10580	Terminate this execution .
10581	Registers a child execution .
10582	Called when a child execution is terminated .
10583	Sets the current scope .
10584	Creates a new execution .
10585	Create a new nested execution .
10586	Returns the child executions of the given node .
10587	Compute the variables of the execution .
10588	Get a variable from the current scope .
10589	Get a variable from the current scope .
10590	Sets the value of a variable .
10591	Sets the value of a local variable .
10592	Removes a variable from the execution stack .
10593	Removes a variable from the current scope .
10594	Executes a node .
10595	Waits for the execution to complete .
10596	Signal execution .
10597	Take a transition .
10598	Creates a new concurrent root execution .
10599	Load a message file
10600	Get message by id .
10601	Get an instance of Zend \ View
10602	Checks if given path is a directory and is readable .
10603	Checks if given directory is writable .
10604	Checks if given value is a writable file path .
10605	Checks if given value is a regular file .
10606	Validate email address .
10607	Validate an IP address .
10608	Validate an IPv4 address .
10609	Validate an IPv4 address .
10610	Validate an IPv6 address .
10611	Initializes the view .
10612	Check if a class has an attribute .
10613	Check if a class has a method .
10614	Returns the parameters of a method .
10615	Returns a ReflectionMethod for the given object and method .
10616	Convert the object to an array .
10617	Send SMS to MSISDN .
10618	Get blank line
10619	Count term columns
10620	Get error block .
10621	Returns a line of text .
10622	Slice an array at a given position .
10623	Set validation rules
10624	Complete the flow .
10625	Returns the object with the given name .
10626	Creates an object with the given name
10627	Register a new configuration file .
10628	Authenticates the user using an authorization code
10629	Get the current user s feed .
10630	Get a list of media liked by the user .
10631	Set relationship action
10632	Sets an array of properties .
10633	Find all records from the source .
10634	Returns the number of rows in the database .
10635	Find a record in the collection .
10636	Creates a new record in the database .
10637	Query the source table .
10638	Executes the query and returns the result as an array .
10639	Check if the condition can proceed .
10640	Creates a link tag .
10641	pick to parent form element
10642	Parse picker map
10643	Convert an array of reflection classes to self .
10644	Initialize the field map and keyFieldColumnMap .
10645	Returns the field name for a given column .
10646	Get the key search rule .
10647	Sets the values of all fields in a record array .
10648	Saves the old value of each field in an array
10649	Returns an array of the values of this field as an array
10650	Convert a SQL array to a record array
10651	Sets the values of the fields in the given array .
10652	Get a join input record .
10653	Get join search rule .
10654	Returns the request method .
10655	Returns the request URI .
10656	Returns an instance of the options class .
10657	Make the builder instance .
10658	Issue an access token
10659	Format the settings report .
10660	Decode a JSON file
10661	Validates a TOTP value .
10662	Lists all Comment models .
10663	Update a record
10664	Execute the route .
10665	Implode an array into a string .
10666	Export to CSV file
10667	Render a csv file
10668	Get the data table for a form object
10669	Loads all statefull variables from the session context .
10670	Returns the value of a property .
10671	Returns the active record
10672	Set active record id .
10673	Fetches all records from the database .
10674	Perform a direct fetch to the database .
10675	Fetches a number of records from the database .
10676	Returns the number of records in the result set .
10677	Run the search and return the result .
10678	Returns the number of records in a query .
10679	Fetch the next record from the result set
10680	Add sc key script
10681	Get a config value .
10682	Bootstrap the application .
10683	Authenticates a user in the database
10684	Sets the path of the request .
10685	Sets the maximum age in seconds .
10686	Fixes the mime type .
10687	Validates the mime type .
10688	Check if the file is a text file
10689	Check if the file is full .
10690	Set file properties
10691	Check if we need to cache the file
10692	Reads data from the filesystem .
10693	Sends the content to the client .
10694	Cleans the source of the file .
10695	Minify the given content .
10696	Minify CSS content .
10697	Wordwrap text content .
10698	Get the content of the file .
10699	Serve the text response .
10700	Set allowOrigin .
10701	Sends the file to the browser
10702	Registers a texting provider .
10703	Denormalizes data into an instance of the given class .
10704	Returns true if the given data is an explicit message .
10705	Validates the given data against the given rules .
10706	Validates a model against a set of rules .
10707	Get action attribute .
10708	Get the url attribute .
10709	Go to the next page .
10710	Skip the current step .
10711	Go to the previous step .
10712	This method is called when the form is finished .
10713	Cancels the session .
10714	Set the form state to visited .
10715	Generate a random string .
10716	Returns true if the value of the callback returns true .
10717	Performs a ternary shortcut .
10718	Returns true if the given value exists in the given container .
10719	Merge another object with this one .
10720	Creates a new application instance .
10721	Dispatches an event .
10722	Count records by group .
10723	Aggregate a group of documents .
10724	Find a document by id .
10725	Returns an array of MongoId objects from an array of objects
10726	Normalizes a date .
10727	Returns true if the given name is in the form reference libs .
10728	Render the webpage .
10729	Returns the current page URL
10730	Initialize all form objects .
10731	Compare two integer values .
10732	Returns the value as an integer .
10733	Finds all source files in a directory .
10734	Registers a namespace
10735	Builds the cache .
10736	Find Composer autoloader
10737	Find composer autoloader vendor dir .
10738	Returns a list of loaders for a given class .
10739	Get middleware or fallback to visible attribute .
10740	Set a middleware or fallback to the visible attribute .
10741	Returns a new instance with the given string limit .
10742	Return a new instance with the given array limit .
10743	Returns a string representation of a value .
10744	Convert an array to a string .
10745	Format an array pair .
10746	Convert an array to a string .
10747	Returns a string representation of the given value .
10748	Rejects a transaction .
10749	Boot the application services .
10750	Render a webpage
10751	Render a webpage using smarty
10752	Render a view using PHP
10753	Set the headers for the response
10754	Creates a comment for an issue .
10755	List all PHP files in a directory .
10756	Sort modules .
10757	Returns an array of routes .
10758	Renders the menu items .
10759	Render a single menu item
10760	Writes data to CSV file .
10761	Configures the command .
10762	Read configuration from the config handler .
10763	Runs the checks .
10764	Runs the exporter .
10765	Writes the cachable settings to the cache .
10766	Returns a read - only cache instance .
10767	Initializes the command .
10768	Execute a command and return the output .
10769	Execute a command and flush the output .
10770	Check if value is chainable .
10771	Validates the form
10772	Check if the condition is satisfied by the given group item
10773	Complete the flow .
10774	Get sql value
10775	Returns the value of this column .
10776	Save the old value .
10777	Returns the default value of the field .
10778	Get value on create
10779	Get value on update
10780	Check if field is required
10781	Check the type of the value
10782	Returns true if the object is valid .
10783	Find a file by its name .
10784	Prepare the name .
10785	Sets the theme to use .
10786	Register a new theme .
10787	Add a theme .
10788	Returns the offset for a given key in an array
10789	Get a key from an array offset .
10790	Return the standard deviation of an array
10791	Set the middleware .
10792	Get the controller action .
10793	Returns the path parameters for the given path .
10794	Returns true if the given scheme is supported .
10795	Check if the given hostname matches any of the configured hostnames .
10796	Check if the URI matches the pattern .
10797	Fetches a tree from the database .
10798	Fetch the node path for a given node search rule
10799	Recursive function to get all children nodes of a node .
10800	Get settings from all results .
10801	Returns the value of the link attribute
10802	Returns the value of the text attribute .
10803	Get new record
10804	Sets the secret .
10805	Returns the binary representation of a number .
10806	Returns a string representation of a number .
10807	Add a table column to the query
10808	Add an SQL expression to the query .
10809	Reset the SQL to its initial state .
10810	Add an order by clause
10811	Add another SQL to the query .
10812	Adds an association to the query .
10813	Get the SQL statement for this query .
10814	Get a data record by key .
10815	Runs the CLI application .
10816	Get default template locations .
10817	Renders the select box
10818	Get font google fonts .
10819	Check if the route matches a group .
10820	Validates the input of the object
10821	Validates the uniqueness of the record .
10822	Check if the record can be updated .
10823	Check if a record can be deleted .
10824	Update an existing record
10825	Return an empty record array
10826	Generates a new ID for this object .
10827	Insert a record into the database .
10828	Delete a record from the database
10829	Returns an array of all on audit fields
10830	Executes the trigger service .
10831	get join fields from join data object
10832	Join the current record with the given data object .
10833	Check if ID needs to be generated
10834	Runs all checks .
10835	Initializes the report .
10836	Resolves the route for the given request .
10837	Resolves action parameters .
10838	Check if a setting with the given name exists .
10839	Get a setting by name .
10840	Returns a list of all settings .
10841	Loads settings from the cache file .
10842	Sets the cache location .
10843	Prefix CSS content .
10844	Prefix the align - items rule
10845	Prefix the align - content rule
10846	Prefix the align - self rule
10847	Prefix flex style
10848	Prefix justify - content
10849	Get the prefix rules for a given property and value
10850	Add a comment to a media .
10851	Perform a DELETE request
10852	Get filtered media .
10853	Get the preferred image .
10854	Get a placeholder .
10855	Creates a new rule from a string .
10856	Get the output .
10857	Returns a ReflectionMethod for the given object and method .
10858	Index action .
10859	Renders the sitemap .
10860	Returns an array representation of the tree .
10861	Check if the request is valid .
10862	Determine the access token from the request .
10863	Call a method on each middleware in the stack .
10864	Check if call context has changed .
10865	Stores a command in the queue .
10866	Executes a callback and syncs the execution state .
10867	Get a phash .
10868	Creates a new phar file .
10869	Get a pattern by name .
10870	Merge the group config with the current config .
10871	Remove a record from a dataobject
10872	Remove record from association table M to M
10873	Remove record from MTO1
10874	Convert the relations to an array .
10875	Reads metadata from an XML array .
10876	Read meta collection
10877	Prefixes the package name with the package name if it is not already prefixed .
10878	Allow access to the current user
10879	Build the php redis driver .
10880	Get a model for a table .
10881	Add a new resolver type .
10882	Returns the resolver for the given type .
10883	Sets the resolver for the given type .
10884	Resolves the given type and reference .
10885	Sets the authorative flag .
10886	Register a module
10887	Sort modules by precedence
10888	Sets the precedence of a module .
10889	Auto configure from composer . json
10890	Find all modules in a directory .
10891	Get element by field name
10892	Register the service provider .
10893	Converts a formatted string to a value .
10894	Convert a value to a formatted string .
10895	Converts a value to a number .
10896	Converts a formatted number to a value .
10897	Convert a value to a date
10898	Converts a date value to the given format .
10899	Convert a value to a datetime
10900	Converts a datetime value to the given format .
10901	Convert value to currency
10902	Formats the currency value according to the locale settings
10903	Convert a value to a phone number
10904	Convert a date from one format to another .
10905	Parses a date using a format string .
10906	Renders the DSN for MySQL .
10907	Renders the DSN for PostgreSQL .
10908	Render the DSN parts of the map .
10909	Insert data into a table
10910	Insert multiple records into a table .
10911	Get the request path .
10912	Get an entry from the container .
10913	Format a query string .
10914	Format a value for use in a query .
10915	Sets the list of parameters that will be bound to the query .
10916	Get the database profile .
10917	Formats the given report .
10918	Validates that a password is strong
10919	Validates an email address
10920	Validates a date
10921	Get error message
10922	Make the input and fillable .
10923	Agrega las atributos del modelo .
10924	Generate a new ID .
10925	Generate a new system id in ob_sysids table
10926	Generates a new GUID .
10927	Query the database and return the new id
10928	Get visible attribute .
10929	Sets the log formatter
10930	Prepare a file for writing
10931	Close a log file .
10932	Returns the log file path .
10933	Get formatter by extension .
10934	Returns the organization document manager .
10935	Render a view
10936	Output the pdf to the browser
10937	Sets the base URL of the REST client .
10938	Creates a cURL resource .
10939	Get a list of responses from multiple endpoints
10940	Make a POST request to the API
10941	Sends multiple POST requests to multiple endpoints .
10942	Push a job onto the queue .
10943	Create the payload for the job .
10944	Returns the content element identifier .
10945	Returns the signature of a content element .
10946	Returns the signature of a content element .
10947	Returns the title of the form .
10948	Remove a record from the database .
10949	Sort records by a column
10950	Filter view children by view column .
10951	Filter view children by system language .
10952	Set value by db key .
10953	Get entity data as array .
10954	Fills the entity with the given data .
10955	Extract a ZIP archive to a directory .
10956	Add a file or directory to a ZIP file .
10957	Extract a gzipped version of an archive .
10958	Reads a line from a file .
10959	Get the size of a file or directory .
10960	Get all class names from a file .
10961	Add a new route .
10962	Resolves the route for the given request .
10963	Resolves a config key .
10964	Check if the container has the given key .
10965	Returns the value for the given key .
10966	Load a config file
10967	Get background details .
10968	Connect to Twitter .
10969	Check response status code
10970	Handles the message received from the server .
10971	Checks if the status string is a message .
10972	Reads the next chunk size from the stream .
10973	Reads data from the stream .
10974	Returns the value of a property .
10975	Returns the default value of the field .
10976	Returns the value of the hidden attribute
10977	Returns the value of the text attribute
10978	Returns a map of shortcut keys to their formed function .
10979	Get the context menu
10980	Get the event function .
10981	Returns the redirect page for an event handler .
10982	Returns the function type for the given event handler .
10983	Set form name and element name
10984	Adjust the name of the form .
10985	Get the form function .
10986	Parses a function name and parameters from a string .
10987	Call the middleware .
10988	Clears the middleware stack .
10989	Halt the chain .
10990	Reset the middleware .
10991	Creates a new instance of a data type .
10992	Convert counter to string
10993	Sends GET request and returns response .
10994	Make a POST request .
10995	Get the response .
10996	Check if we will follow redirects .
10997	Check effective time
10998	Parse a string into an array .
10999	Parse a string into an array .
11000	Render a form object
11001	render smarty template
11002	Render a form using PHP template
11003	View an existing Entity .
11004	Store a new resource .
11005	Call the entity method .
11006	Add middleware to the router .
11007	Add the About and Check commands .
11008	Updates the given user .
11009	Get settings from the full TYPOScript configuration .
11010	Get the group .
11011	Get direct membership
11012	Get effective membership
11013	Parse membership data
11014	Parse the history .
11015	Parse affiliate data
11016	Parse search results .
11017	Get the webpage object .
11018	Returns the element with the given name .
11019	Returns an array of error elements .
11020	Rerender all subforms .
11021	Set the bundle class .
11022	Get translation key .
11023	Get the list of words .
11024	Load configuration options
11025	Remove an item from the cache
11026	Returns an array of cache IDs
11027	Clean all cache entries
11028	Recursively creates a directory .
11029	Reads a config file from a location .
11030	Get config reader by file extension
11031	Add a branch to the node .
11032	Add a route to the router .
11033	Find a route branch by part .
11034	Returns the next route branch for the given URI part .
11035	Find issues by issue .
11036	Get the wp - contents of a post .
11037	Get list of categories .
11038	Get WPMenus .
11039	Get a list of pages .
11040	Get list of recent posts .
11041	Get the post types .
11042	Get the available tags .
11043	Returns a list of available taxonomies .
11044	Get the list of terms .
11045	Adds a path to the search path .
11046	Set the precedence of a module
11047	Returns the precedence of a module .
11048	Clear resolve cache
11049	Get data from cache
11050	Resolves a file to a path .
11051	Parse the request URI into module view and uri params
11052	Saves the statefull vars to the session .
11053	Get the current step .
11054	Get form inputs
11055	Cancels the session .
11056	Registers a sub - type .
11057	Get the input from the request .
11058	Delete a file from the cache .
11059	Convert an array to a number of seconds
11060	Returns a comma - separated list of all keywords in a text .
11061	Find emails in text .
11062	Check if a string contains an array of queries .
11063	Redirect to another endpoint .
11064	Run the up migration .
11065	Migrate a directory up .
11066	Set the id of the object .
11067	Run the job daemon .
11068	Check if a parameter exists .
11069	Generate an OAuth request .
11070	Generate the OAuth signature .
11071	Creates a new node .
11072	Creates a transition .
11073	Add a setting .
11074	Add multiple settings at once .
11075	Get settings .
11076	Get all cachable settings
11077	Returns the settings as an array .
11078	Returns all cachable settings as an associative array
11079	Get settings filtered by groups and flag
11080	Filters a list of settings and returns them as an array
11081	Render the tree as HTML
11082	Renders the node items
11083	Render a single node item
11084	Run the application .
11085	Register the bundles for the given environment .
11086	Installs all autoloaders .
11087	Initializes the command .
11088	Autoload a class .
11089	Load a file .
11090	Forward to another route .
11091	Set glyph icon
11092	Sets the query parameters .
11093	Sets the limit for the query .
11094	Get the database connection .
11095	Returns the value of a property .
11096	Get a reference to an object .
11097	Set the association
11098	Creates an object from a docblock .
11099	Creates a new SqliteConnection from memory .
11100	Creates a new SqliteConnection from a file
11101	Get field by name
11102	Check if a field exists .
11103	Returns an array of all field names .
11104	Get initial data model .
11105	Authorize an index request .
11106	Authorize creation of a new resource .
11107	Get a nested item from a pattern .
11108	Initializes the browser .
11109	Get export implementor .
11110	Get report implementor .
11111	Get the runner implementation .
11112	Get the cache implementation .
11113	build update sql
11114	Build the SQL to delete a record
11115	Get the style of the combobox
11116	Returns the children of this node .
11117	Returns the value of an attribute .
11118	Returns the attributes of the node .
11119	Returns the child with the given name .
11120	Returns the literal value for the given element .
11121	Call the closure in cache if it is configured .
11122	Handle the call .
11123	Check if method is callable
11124	Check if this is a getter call .
11125	Returns true if the call is a setter .
11126	Prepare a Guzzle call .
11127	Get the response body .
11128	Parses the response body and returns an array .
11129	Save a variable in the session object array
11130	Load a variable from an object
11131	Save all session objects
11132	Clears the session objects .
11133	Save JSON Array
11134	Set view history
11135	Start timer .
11136	Print a message to the console
11137	Update the calibrated time .
11138	Reset the timer .
11139	Validate the executable path .
11140	Get redirect page
11141	Process data object errors
11142	Process form and cform URL
11143	Get the base URI of the request .
11144	Validates the given identity .
11145	Sets up the authentication result info .
11146	Set the visible attribute .
11147	Return the first element of the collection as an array .
11148	get from list
11149	Formats a report .
11150	Call a middleware method .
11151	Call proxy getters .
11152	Call proxy methods .
11153	Call proxy setters .
11154	Sets or gets the value of catchHaltExceptions .
11155	Clear all middleware .
11156	Disable a middleware .
11157	Enable middleware .
11158	Get middleware by key
11159	Get a middleware group .
11160	Group middleware by name .
11161	Check if a middleware key exists .
11162	Check if a middleware is disabled .
11163	Check if a middleware is enabled .
11164	Get middleware from group .
11165	Create a middleware collection .
11166	Prepend a middleware to the middleware group .
11167	Push a middleware to the stack .
11168	Set the middleware context .
11169	Call middleware .
11170	Saves the settings to the cache file .
11171	Convert an array of forms into an array .
11172	Sets up the autoloader from the json file
11173	Find the transition that is connected to the given execution .
11174	Returns a function that can be used to send data to the remote server .
11175	Creates a callback for submitting the form
11176	Returns a javascript link tag .
11177	Returns a js submit tag .
11178	Casts key to string .
11179	Check if the given value is an abstract middleware .
11180	Checks if the given value is a collection .
11181	Resolve a middleware .
11182	Resolve a middleware to a callable or throw an exception .
11183	Resolve many middleware .
11184	Resolve a group of middleware or a collection of middleware .
11185	Resolve a single middleware .
11186	Resolves a middleware or throws an exception .
11187	Render a bizx object
11188	Generate a unique string
11189	Check if the user has the given role .
11190	Determine if the user has the given role .
11191	Returns the hash of the given parameters .
11192	Returns information about the current request .
11193	Perform the request .
11194	Allow access to a view
11195	Get a view object matching the given view name
11196	Formats the given configuration report .
11197	Loads an XML document from a string .
11198	Validates a schema file .
11199	Validates a source document against a schema .
11200	Add XInclude directives to the current document .
11201	Returns the value of an element .
11202	Returns the element with the given name .
11203	Sets the default namespace .
11204	Register the environmentaut namespace .
11205	Check if the given XML is an environmentaut configuration document .
11206	Refresh the DOMXPath instance .
11207	Parses an libxml error into a string .
11208	Returns all resolvers that can resolve a subject .
11209	Check authorize params
11210	Creates a new authorize request .
11211	Complete the flow .
11212	Print the output to the client .
11213	Get form inputs .
11214	Redraw a form .
11215	Show an alert on the client .
11216	show error message
11217	Close the popup .
11218	Runs a script on the client .
11219	Redirect to a view
11220	Append a script to the extra scripts array .
11221	Returns the extra scripts that should be appended to the openbizx script
11222	Append styles to a script .
11223	Returns an array of styles that should be appended to the document .
11224	Include base client scripts
11225	Include rte scripts
11226	Include ckeditor scripts
11227	Include prop_window scripts
11228	Include validator scripts
11229	Execute all trigger actions
11230	compose action message
11231	Convert a string into an array
11232	Process form object errors
11233	Sets the sub - forms .
11234	Load a picker form
11235	Set request parameters
11236	Fetches data from the database .
11237	Returns the ID of the element
11238	Autocompletes an input .
11239	Renders the context menu
11240	Renders the HTML for this form .
11241	Get event log message
11242	Get on event elements
11243	Run the event log
11244	Get invoking element .
11245	Append scripts to client proxy
11246	Remove a middleware from the stack .
11247	Run the middleware stack .
11248	Creates a new interval from a string .
11249	Generate a timestamp .
11250	Decode a base32 string .
11251	Returns an iterator for all files in the directory .
11252	Returns a list of all files in the directory .
11253	Returns a list of all directories in the directory .
11254	Returns a list of all files in the directory
11255	Make the file .
11256	Creates the directory .
11257	Moves the file to a new location .
11258	Rename a file .
11259	Removes the directory .
11260	Set the name of the field .
11261	Set the type .
11262	Set the input format rule .
11263	Set the value of the field .
11264	Returns the storage value .
11265	Save the children of this model .
11266	Add children to entity .
11267	Returns the models for the given query builder .
11268	Outputs a list of resources .
11269	Converts a resource to an array .
11270	Generates a reCaptcha form
11271	Verify a reCAPTCHA
11272	Get a service object .
11273	Render the error .
11274	Render an HTTP exception .
11275	Render a CakePHP exception .
11276	Render a serializer exception .
11277	Render a validation serializer exception .
11278	Render http error as json
11279	Render http error as json api .
11280	Render a CakePHP exception as JSON .
11281	Render a CakePHP exception as a JSON API response .
11282	Default serializer render
11283	Render serializer as json
11284	Render the serializer as json - api .
11285	Default validation serializer render .
11286	Render validation serializer as json
11287	Render validation serializer as json - api .
11288	Open a session by ID .
11289	Creates a new session from the given cookie data .
11290	Prepare text .
11291	Displays text in the console .
11292	Display empty lines
11293	Initializes the application .
11294	If the request is an ajax request and the response is an ajax response set the title and exception headers .
11295	Initializes the debug bar .
11296	Start a new session .
11297	Prevent hijacking .
11298	Regenerate the session .
11299	Validates the session .
11300	Link the layers to the structure .
11301	Get param from backbone
11302	Register a new PX instance .
11303	Print CLI header
11304	Parses the raw template body .
11305	Remove extra indentation from a string .
11306	Adds additional headers to the request .
11307	Parse the query string from a given URL .
11308	Bind the layout to the page
11309	Returns the matches for the given URI .
11310	Returns the value of the justification constant .
11311	List local files
11312	Extract documents link from html
11313	Check if a link should be excluded
11314	Save a file .
11315	Check if pdf existe
11316	Get the next ordered number .
11317	Removes the nesting number from the stack .
11318	Display text with styling
11319	Display an empty line with styling .
11320	Fit the regression with the given dataSet .
11321	Predict a set of instances .
11322	Creates the database table .
11323	Writes a record to the log file .
11324	Draw a list item
11325	Starts a new line .
11326	Initialise the driver .
11327	Returns the allowed size for the given name .
11328	Creates a form for a section .
11329	Returns the form factory .
11330	Loads fixtures from an iterator .
11331	Resolves a relative URL .
11332	Installs a package .
11333	Install a composer plugin
11334	Installs the composer framework .
11335	Update a package .
11336	Update composer framework .
11337	Uninstalls a package .
11338	Uninstalls a composer plugin .
11339	Recursively removes all files and directories from a given directory .
11340	Recursively removes a directory .
11341	Sets the text and fill colors .
11342	Returns the text area .
11343	Calculates the width of the text .
11344	Scope Get By Date Value
11345	Get date value
11346	Cast an attribute .
11347	Convert the attributes to an array .
11348	Sets the value at the given offset .
11349	Get a menu .
11350	Render the Yandex Metrika tracker .
11351	Returns the definitions defined in the configuration file .
11352	Parses the imports section of the YAML file .
11353	Parses the definitions from the YAML file .
11354	Loads a YAML configuration file .
11355	Resolves services .
11356	Initializes the class loader .
11357	Get the AES instance .
11358	Humanizes a number of bytes .
11359	Set the bullet .
11360	Sets a column definition .
11361	Calculate the total width of all columns .
11362	Checks if the table has a header .
11363	Returns the header text .
11364	Check if data is valid .
11365	Calculates the width of each column .
11366	Draws the table .
11367	Creates a new session .
11368	Create a new session file .
11369	Save session data .
11370	Acquires a lock for the given session ID .
11371	Form for creating a new section .
11372	Creates a new instance of a class .
11373	Get the list of facts .
11374	Parse the facts string into an array .
11375	Find a record by its primary key .
11376	Find a row in the table with a where clause .
11377	Find all records in the table .
11378	Find all records matching a where clause .
11379	Creates a new record in the database .
11380	Update a row in the table with a where clause .
11381	Parse the notation .
11382	Apply conditions to an expression .
11383	Calculate the mean calculus
11384	Creates a new plugin client .
11385	Sets the file to be uploaded
11386	Add a template to the cache .
11387	Checks if the cache file is expired .
11388	Replaces placeholders with block names .
11389	Get metadata for a template .
11390	Builds a definition provider for the given discovery .
11391	Returns the result for the given formula name .
11392	Save a formula to the stack .
11393	Add header to item .
11394	Sets the dropdown item .
11395	Returns true if the user is granted .
11396	Download a file .
11397	Returns the url for the given type and key .
11398	Set list cover .
11399	Get data by type .
11400	Get the data from the given URL
11401	Installs the resource controller .
11402	Checks if a string is a valid date .
11403	Wraps the content of the GUI frame in an HTML page .
11404	Run artisan command .
11405	Factory method .
11406	Create a new session .
11407	Send a new entity .
11408	Register all providers .
11409	Register a provider from a file .
11410	Get the facts .
11411	Populates the facts array .
11412	Record a domain event .
11413	Applies the handler to the given domain event .
11414	Call plugin functions
11415	Draws the table .
11416	Calculate the formula .
11417	Checks if the current request has a layout .
11418	Initializes the terminal state .
11419	Overrides the members of this style with a new style .
11420	Clears all styling .
11421	Sets the text color .
11422	Sets the fill color .
11423	Sets the text and fill colors .
11424	Reverses the text and fill colors .
11425	Factory function .
11426	Load all plugins .
11427	Show must - use plugins in admin
11428	Check if we need to update the cache .
11429	Update the plugin cache .
11430	Register plugin hooks .
11431	Get a channel by name .
11432	Initializes the loggers .
11433	Create a new logger instance .
11434	Get all Location entities .
11435	Factory method to create a new class instance .
11436	Returns an array of ReflectionClass instances for each interface .
11437	Get the parent class .
11438	Get the methods of the class .
11439	Get the properties of the class .
11440	Checks if the current request is of the given type .
11441	Adds a materialized resource .
11442	Get aggregate style .
11443	Rewrites paths in styles .
11444	Wrap the media rules in the style content .
11445	Move the imports to the start of the file .
11446	Get archive data .
11447	Remove an archive file .
11448	Returns the path to the session archive .
11449	Get archive file path .
11450	Recursively replaces all values of an array with their values .
11451	Applies a set of filters to an array .
11452	It returns terminal screen size
11453	Returns the style of the given content .
11454	Add a script to the page .
11455	Create a new email address .
11456	Returns a string that can be used as a static control .
11457	Generates an active static control for a model attribute .
11458	Add a css style to the given options .
11459	Make directory if it does not exist .
11460	Set the files to be published .
11461	Initializes the controller .
11462	Login the user with the given identity .
11463	Regenerate the CSRF token .
11464	Login by cookie .
11465	Get the return url .
11466	Checks if a login is required and redirects to the login page .
11467	Renews the identity cookie .
11468	Renews the authentication status of the user .
11469	Check if the user has a permission .
11470	Returns a list of days of the week .
11471	Saves the uploaded file .
11472	Executes the query .
11473	Sets the type to DELETE
11474	Sets the query type to INSERT
11475	Adds an inner join to the query .
11476	Add a where expression to the expression .
11477	Adds a HAVING expression .
11478	Get the SQL for a DELETE statement .
11479	Creates a positional parameter .
11480	Bind the logger interface to the container .
11481	Bind the logger to the container .
11482	Sets the status code .
11483	Returns the formatted body of the response .
11484	Redirect to another URL .
11485	Create an empty response .
11486	Returns the headers as an array .
11487	Returns an array of cookies to send to the client .
11488	Returns the default formatter classes .
11489	Extracts the authUser and authPass from an encoded string .
11490	Returns a list of scenarios .
11491	Fills the given array with the scenarios attributes .
11492	Returns the name of the model .
11493	Get the names of all public attributes .
11494	Validates the model with the given attributes .
11495	Validates multiple models .
11496	Return translated message .
11497	Add an attachment to the message .
11498	Add a plugin to the request .
11499	Send the request and return the response
11500	Load a class .
11501	Get listeners .
11502	Sets the properties of the listener .
11503	Get listener from annotation .
11504	Get options or all options .
11505	Sets an array of options .
11506	Get a key value by key type and key value
11507	Fill the model from an array
11508	Load entities from a directory .
11509	Extend the Doctrine entity manager .
11510	Checks all predictions and throws an exception if any .
11511	Process the extended section of an XML element
11512	Verify method exists in class
11513	Verify class property
11514	Verify that the function is callable .
11515	Verifies that the given dispatch is valid .
11516	Verify the given dispatch .
11517	Get the dependencies for the given dispatch .
11518	Get the arguments for a given dispatch .
11519	Dispatch class method .
11520	Get the value of a property of a class .
11521	Get the dispatch class .
11522	Dispatch function .
11523	Dispatch the closure .
11524	Dispatch a callable .
11525	Returns the arguments as a string .
11526	Returns the request arguments .
11527	Parse the request arguments .
11528	Return a link to a named route .
11529	Set the HTTP protocol version .
11530	Assert that the header values are valid
11531	Inject a header .
11532	Returns the current date .
11533	Check and update cookie fields
11534	Stores a cookie .
11535	Add cookies from HTTP Response
11536	Returns all cookies matching the given URL .
11537	Returns all cookies .
11538	Serialize the session .
11539	Unserializes the session .
11540	Check if the given domain matches the request host .
11541	Factory method to create a new command object .
11542	Get the arguments for a given command .
11543	Returns the help text for a given command .
11544	Return a singleton instance of the PEAR_Frontend class .
11545	Converts an expression to a target system .
11546	Parses an expression part .
11547	Recursively create sub - keys for a given key
11548	Trim unicode characters from a string .
11549	Sets the encoding to use
11550	Creates an iterator exception .
11551	Initializes the translator .
11552	Init url language prefixes .
11553	Returns the message formatter instance .
11554	Start a transaction .
11555	Get the API request URL .
11556	Get api request params
11557	Get the success lines from the API response
11558	Get success message
11559	Find all budgets by accountId
11560	Returns the current language .
11561	Parses the Accept - Language header from the request .
11562	Bind a value to a binding .
11563	Makes a class instance .
11564	Validates the given URL .
11565	Check if a field is a live variable
11566	Return the value of a field in the object .
11567	Wrap an object in a ViewableWrapper
11568	Return the value of a field as a date
11569	Generate a session identifier .
11570	Encrypts the session data .
11571	Decrypts the session data .
11572	Get the encryption key .
11573	Sets the encryption algorithm .
11574	Sets the hash algorithm .
11575	Prepare update sets .
11576	Method to initialize the service .
11577	Returns the value of a parameter .
11578	Check if target relation exists .
11579	Checks if the target attribute exists in the model .
11580	Check if value exists .
11581	Get the SQL for a clause .
11582	Renders the modal .
11583	Localize a file .
11584	Detaches the stream .
11585	Read from the stream .
11586	Creates a new request instance .
11587	Creates a new request from PHP globals .
11588	Set the server .
11589	Set request headers .
11590	Returns the request path .
11591	Returns the path without the query string .
11592	Returns the http host .
11593	Sets the request method .
11594	Returns the request method .
11595	Returns the mime type for the given format .
11596	Returns the format of the given mime type .
11597	Returns the request format .
11598	Renders a controller method .
11599	Initializes the HTTP server .
11600	Add a middleware to the router .
11601	Create a new request application .
11602	Set an alias .
11603	Set aliases .
11604	Get error log level .
11605	Generates a proxy for the given class name
11606	Returns the parameters of a method call .
11607	Generate proxy class .
11608	Get the proxied properties of a class .
11609	Get the proxied methods of a class .
11610	Generate proxy class name
11611	Returns the declaration of an argument of a method .
11612	Checks if a method can be proxied .
11613	Check if any of the given methods can be proxied .
11614	Traverses the structure and returns it as a string .
11615	Returns the parameters of a method .
11616	Create packagist hook .
11617	Loads the messages for the given category and language .
11618	Setup the application .
11619	Bootstrap the config .
11620	Bootstrap the core .
11621	Bootstrap the container .
11622	Get the value of an environment variable .
11623	Set environment .
11624	Get the value of a configuration key .
11625	Throw an HttpException .
11626	Throws a redirect exception .
11627	Create a response instance .
11628	Redirect to a route .
11629	Get a view instance .
11630	Get an item from the collection .
11631	Validates a descriptor key .
11632	Validates a descriptor key .
11633	Get cache invalidation settings
11634	Sets the cache invalidation settings .
11635	Initializes the logger .
11636	Get log file path .
11637	Verify a password against a hash .
11638	Sets the value of the exists property
11639	Renders the progress bar .
11640	Renders a progress bar .
11641	Process the SOAP request
11642	Get the SoapServer instance
11643	Invalidates all scheduled entities .
11644	This method is called after the cache has been flushed .
11645	Invalidates an entity .
11646	Adds a tag to the invalidate list .
11647	Returns the SEXE choices .
11648	Set filter callback
11649	Applies the filter to a value .
11650	Get the percentage of free memory used by WinCache
11651	Get all Seo models .
11652	Set Seobility attributes .
11653	Get SEO attributes .
11654	Convert value to boolean
11655	Get Ordinate by Abscissa
11656	Returns the abscissa of the point at the given y coordinate .
11657	Add an attachment to the message .
11658	Encode the message .
11659	Encode this part to a file .
11660	Encode this part to a file .
11661	Add a subpart to the message .
11662	Encode a quoted - printable string .
11663	Build a header parameter .
11664	Build an RFC2047 parameter .
11665	Explode a quoted string into an array .
11666	Encode a header value
11667	UTF - 8 aware alternative to mb_encode
11668	Return the admin messages view .
11669	Returns the next line from the file .
11670	Renders the menu items .
11671	Method called before the controller is called .
11672	Set the value of an option
11673	Create a slug from a string .
11674	Create a sentence .
11675	extract gallery array
11676	Check if the session is still valid .
11677	Get field error message .
11678	Sets the value of the sameSite parameter .
11679	Clean the translation files and add the header .
11680	Find classes in a namespace using PSR - 4 .
11681	Get the full path to a namespace .
11682	Get the paths for a given namespace .
11683	Get the prefixes of a namespace .
11684	Get the list of namespace prefixes for the loader .
11685	Update the current session .
11686	Merge an array of values into the session .
11687	Get a value from the session .
11688	Get the page from the query string
11689	Build the query string .
11690	Get filters as array
11691	Creates the form .
11692	Stores the result in the session .
11693	Get the pagination for the given query .
11694	Get the previous and next record id from the session .
11695	Return an array representation of the object .
11696	Add a new field .
11697	Process input options
11698	Get connection params
11699	Check if database is installed
11700	Get the SQL string for this object .
11701	Execute the query and return the resultset
11702	Returns the repository for the given entity .
11703	Adds an entity to the create list .
11704	Save an entity .
11705	Removes an entity from the collection .
11706	Commit changes to the database .
11707	Get a store instance .
11708	Get store config .
11709	Get a store instance from config .
11710	Validates the password .
11711	Creates a new instance from an Accept header string .
11712	Parses a string and returns an array of items and their quality .
11713	Compare a string against a list of strings
11714	Calculate the earth radius for the given latitude .
11715	Convert decimal coordinate to DMS
11716	Convert DMS to DEC
11717	Render production error page
11718	Render error message in debug mode
11719	Logs the exception .
11720	Creates a configuration file for the current action .
11721	Creates a configuration template .
11722	Save messages to PHP files .
11723	Saves messages to PO file .
11724	Creates a Time from an array .
11725	Creates a time from a string .
11726	Creates a Time instance from a DateTime instance .
11727	Creates a time from a number of seconds .
11728	Invalidates the given tags .
11729	Removes all tags from the cache .
11730	Encode tags .
11731	Register the package config .
11732	Returns all cookies .
11733	Set a cookie .
11734	Remove a cookie .
11735	Confirms the user with the given parameters .
11736	Get labels .
11737	Create a new session object .
11738	Returns the primary key metadata for a table .
11739	Returns the foreign key metadata for a table .
11740	Returns the indexes metadata for a table .
11741	Returns the unique metadata for a table .
11742	Returns the checks metadata for a table .
11743	Returns the default values for a table .
11744	Returns the value for the given key .
11745	Checks if the current user has the given permission .
11746	Enable or disable distinct .
11747	Set the columns .
11748	Adds a JOIN statement to the query .
11749	Adds an INNER JOIN to the query .
11750	Left Join a table .
11751	Left outer join .
11752	Right Join a table .
11753	Add an outer join to the query .
11754	Full outer join .
11755	Sets the group by .
11756	Add an AND HAVING condition .
11757	Add an OR HAVING condition .
11758	Sets the order for the query .
11759	Sets the number of rows to return .
11760	Set the offset .
11761	Build the SQL query .
11762	Renders a link button .
11763	Renders a button .
11764	Renders the locale switcher .
11765	Get the string representation of the equation .
11766	Ordinate by abscissa
11767	Returns the abscissa of the point based on the y - axis .
11768	Find a record by id or throw exception .
11769	Find one record by predicate or throw exception .
11770	Check if a record exists in the database .
11771	Check if a value exists by a predicate .
11772	Delete rows matching a predicate .
11773	Delete a record or throw an exception .
11774	Update data in the table
11775	Insert a row into the table .
11776	Returns the relation instance .
11777	Returns the primary keys of the table .
11778	Returns the primary key of the table
11779	Returns information about the columns of the table .
11780	Executes an SQL statement .
11781	Get the predicate for matching a single primary key value
11782	Check that all specified columns exist in the data .
11783	Parse the response as an array
11784	Parse the response as an object
11785	Sets the return type .
11786	Run the plugin .
11787	Enqueue styles and scripts .
11788	Sets the type of the field .
11789	Set the name of the field .
11790	Set the starting position .
11791	Set the damage .
11792	Set hit level
11793	Set the meter gain .
11794	Define the inputs .
11795	Add a cancel ability .
11796	Set the start frames .
11797	Set the number of active frames .
11798	Set recovery frames .
11799	Hit advantage on hit
11800	Set the advantage on the guard
11801	Builds the move object .
11802	Send a message via a slack webhook
11803	Parses an array of segments into a string .
11804	Parse route data .
11805	Validate route param datum .
11806	Finds the first segment that contains the given param .
11807	Call the repository generator .
11808	Validates a class name .
11809	Check if file is an image
11810	Returns the number of files in the directory
11811	Returns the path info of the console request .
11812	Get the route and params from the command line .
11813	Returns a new instance with the specified scheme .
11814	Returns a new instance with the specified user information .
11815	Returns a new instance with the specified host .
11816	Returns a new instance with the specified port .
11817	Query array by key
11818	Query Array By Brackets
11819	Sets the query variables .
11820	Set a query variable .
11821	Returns the URL of the URI .
11822	Normalizes the URI .
11823	Resolves a URL to another URL .
11824	Check if this is a fragment only request .
11825	Returns the canonical URL .
11826	Get the URL of the script that was requested .
11827	Returns an option value .
11828	Build a query string from an array .
11829	Parses the given URL into its components .
11830	Display a text .
11831	Translate the message .
11832	Suggests the language of the current request .
11833	Returns a list of new states .
11834	Filters states names .
11835	Switches to new states .
11836	Find categories by budget id
11837	Displays the login form .
11838	Logs user out .
11839	Connect the user with the given client .
11840	Returns the value of a parameter .
11841	Set HTML Body
11842	Add an HTML image
11843	Add an attachment to the message .
11844	Converts a regular file to a string
11845	Add a plain text part to the message .
11846	Adds an HTML part to the message .
11847	Add an HTML image part to an HTML object
11848	Adds an attachment part to an attachment object
11849	Encode headers .
11850	Check if the parameters are valid .
11851	Check if the value is valid .
11852	Initializes the widget .
11853	Load data from file .
11854	Save items assignments and rules .
11855	Save data to a file .
11856	Creates a new JsonResponse instance .
11857	Sets the callback name .
11858	Sets the encoding options .
11859	Get the layout .
11860	Returns the category s words as a string .
11861	Update session data .
11862	Delete a session .
11863	Configure the command options .
11864	Load the Pm configuration .
11865	Get ini memory limit
11866	Called when the model is created .
11867	Render tool .
11868	Add a plugin to the application
11869	Get a config value by key .
11870	Get the URL for a named route .
11871	Defines a route that will respond to GET requests .
11872	Return an html response .
11873	Redirect to another URL .
11874	Sets the path segments .
11875	Get proxy instance .
11876	Returns an instance of a given class .
11877	Returns all results .
11878	Get a list of columns .
11879	Paginates the results .
11880	Finds an object by its id .
11881	Persists an entity .
11882	Delete an entity .
11883	Returns the number of entities in the collection .
11884	Creates a select query .
11885	Apply scopes to the query builder .
11886	Applies an order by to the query builder .
11887	Makes a no - result exception .
11888	Replace query parameters with their values .
11889	Add a method .
11890	Get RPC method by name .
11891	Stop the loop .
11892	Add multiple headers at once .
11893	Set the Link header .
11894	Creates a new Guzzle request instance .
11895	Creates a new PhotoAdapter instance .
11896	Generate a range expression .
11897	Start a new session
11898	Regenerate the session id
11899	Writes session data to the session file .
11900	Removes all values from the session
11901	Destroys the session .
11902	Decode session data
11903	Sets or gets the session cache expiration time
11904	Get Reaction instance .
11905	Returns module options
11906	Get the size of the image .
11907	Sets the walk flag
11908	Set array flag
11909	Set matrix data
11910	Returns the value at the given index .
11911	Set the value at the given index .
11912	Rewinds the iterator to the first element .
11913	Get the previous walk position
11914	Seek to the previous X position .
11915	Seek to the previous Y position .
11916	Seek to the previous X and Y position .
11917	Move the cursor to the next node .
11918	Move the cursor to the next X position .
11919	Move the cursor to the next Y position .
11920	Move the cursor to the next X and Y position .
11921	Seek to a specific position .
11922	Get the current position
11923	Get the current key .
11924	Returns true if the walk is valid .
11925	Check if the X key is set .
11926	Validates the Y coordinate .
11927	Returns the number of elements in the chart .
11928	Seek to an offset in the array .
11929	Seek to an offset integer .
11930	Returns true if the given offset exists .
11931	Returns the value at the given offset .
11932	Set the value at the given offset
11933	Returns true if the value property is a boolean .
11934	Allow view methods for an object .
11935	Allow a controller method to be called .
11936	Sets the table name .
11937	Sets the FROM table .
11938	Add an AND condition .
11939	Adds an OR condition to the query .
11940	Set a static rule .
11941	Sets a reference to a static rule .
11942	Return an instance of Zend_Filter_Interface .
11943	End the body .
11944	Register a javascript file .
11945	Registers a JavaScript variable .
11946	Returns a list of default configuration files .
11947	Return a singleton instance of the Config class .
11948	Setup channels .
11949	Merges configuration data from a file .
11950	Write a config file
11951	Read configuration data from a file
11952	Return the default channel for a given layer . If no layer is specified then the default channel is returned .
11953	Returns the value of a channel .
11954	Sets the channels .
11955	Get the type of a configuration key
11956	Returns the documentation for a given key .
11957	Get the prompt for a configuration key
11958	Returns the group associated with the given key
11959	Returns an array of all groups in the configuration
11960	Get all keys for a given group
11961	Get the valid set values for a given key
11962	Returns a list of all configuration keys .
11963	Removes a key from the configuration array .
11964	Remove a layer from the configuration
11965	Returns the name of the layer defined by the given key
11966	Check if a key is defined in all layers .
11967	Sets the registry object .
11968	Process extend clause
11969	Replaces all constants in the given string with their values .
11970	Returns the callback .
11971	Checks if the given value is valid .
11972	Returns an array of valid values .
11973	Returns an array of valid values .
11974	Sets the value of this enumeration .
11975	initializes the plugin .
11976	Start a new session .
11977	Add success .
11978	Add idle time .
11979	Returns the estimated amount of the transaction .
11980	Returns the request methods .
11981	Disables WordPress auto update .
11982	Block wp - request .
11983	Hide admin Nag .
11984	Checks if a point is valid .
11985	Check if the matrix is parallelogram .
11986	Get a value from a composite key .
11987	Check if a composite key exists .
11988	Finds the application with the given id .
11989	Returns all applications .
11990	Checks if this number system is equal to another one .
11991	Get the digits of a number .
11992	Builds a number from the given digits .
11993	Validates a number value .
11994	Call a command .
11995	Generates a unique key .
11996	Connect to the Redis server .
11997	Get the command string .
11998	Get mongo document from domain event message .
11999	Creates a domain event message from the given document .
12000	Resets the state of the object .
12001	Normalizes the message array .
12002	This method is invoked after the entity is validated .
12003	Attach form data event
12004	Returns an array of form tags for each entity
12005	Remove a string from the list .
12006	Returns an array of entities
12007	Swap an entity
12008	Configure a form to exclude data from the validation group
12009	Set sub form data handler .
12010	Remove excluded fields from the form after attach .
12011	Add a response to the response array
12012	Creates a response from a string .
12013	Creates a response object from a file .
12014	Make the head version of an entity .
12015	Check if the entity needs a new version .
12016	Persists an entity .
12017	Clears all versions of an entity .
12018	Cleans up the given upload path .
12019	Check if a key exists in the mount manager .
12020	Moves a key from one location to another .
12021	Reconnect to a distant filesystem .
12022	Check if a key is a distant filesystem .
12023	Create a path if it does not exist
12024	Find an entity by its ID .
12025	Creates a new entity .
12026	Save an entity .
12027	Delete an entity .
12028	Validates the given entity .
12029	Executes a select query and returns the number of rows .
12030	Creates a select query builder .
12031	Sets the criteria in the query .
12032	Set array criterion in query .
12033	Sets the order in the query .
12034	Create or update an entity in the database .
12035	Sets the properties for a save create delete query .
12036	Sets the properties for the create or update statement .
12037	Get entity relations .
12038	Ensure required properties are set .
12039	Send a message to the server .
12040	Execute a command .
12041	Get script src .
12042	Generate the HTML output for the widget .
12043	Display an image field .
12044	Return the audio tag .
12045	Verify the response .
12046	Verify the response from the request .
12047	Get script tag
12048	Get script with callback .
12049	Check key .
12050	Check if value is string
12051	Send verify request .
12052	Initializes the reaction .
12053	Finds the view file for the given view .
12054	Render a PHP stateless file .
12055	Register post types
12056	Generates a new token .
12057	Generate a memory token .
12058	Execute prototype update command .
12059	Message filter callback .
12060	Log a notice message .
12061	Log an info message
12062	Log a debug message
12063	Log a raw message .
12064	Profile the end of a task .
12065	Log a message to the log file .
12066	Convert a message to a string .
12067	Converts an exception to a string .
12068	Colorizes text using a set of colors .
12069	Returns a string representation of a function call .
12070	Process placeholders in the message .
12071	Format the value .
12072	Find a seo record .
12073	Returns the table name for the given active record .
12074	Deletes all records from the database .
12075	Save record to database
12076	Initialize the database connection
12077	Common implementation of the PEAR command .
12078	Returns an array of all available commands
12079	Returns an array of all registered shortcuts .
12080	Returns the help for a given command .
12081	Get help args for a command
12082	On post package event .
12083	compile DSN function
12084	Escape a value .
12085	Add a template root to the global config array .
12086	Returns the number of items in a collection where a column is equal to a value .
12087	Returns the number of items in a collection .
12088	Create the count query .
12089	Get the entity manager .
12090	Returns the path of the current request .
12091	Load a library from the config file .
12092	Removes an entry from the cache .
12093	Returns the bundle with the given name .
12094	Sets a bundle .
12095	Clears a bundle .
12096	Invalidates an entity .
12097	Assert that the dependency database is up to date .
12098	Get the dependencies of a package
12099	Get the dependencies of a package
12100	Install a package
12101	Uninstall a package
12102	Rebuilds the dependency database .
12103	Lock the dependency file .
12104	Unlock the lock
12105	Return the contents of the dependencies file .
12106	Write the dependencies to disk .
12107	Auto load modules
12108	Register a module instance .
12109	Get the content of a theme section
12110	Renders the error page .
12111	Sets the foreground .
12112	Sets the background .
12113	Set black color .
12114	Set color to red
12115	Sets the color to green
12116	Sets the color to yellow .
12117	Sets the color to blue .
12118	Sets the color to magenta .
12119	Sets the color to cyan .
12120	Set white color .
12121	Resets the color of the format .
12122	Sets the background or foreground color .
12123	Removes the given format option .
12124	Formats the message .
12125	Logs a command .
12126	Returns the uploaded file leaves .
12127	Sets the raw state of the package .
12128	Returns an array of scripts to run after install
12129	Initialize post - install scripts
12130	Set the package info from an array
12131	Returns the contents of the package as an associative array .
12132	Returns an array of configuration options for the package .
12133	Returns true if the given package is compatible with the given version .
12134	Is this package a subpackage?
12135	Get dependency group by name
12136	Inserts a value into a multidimensional array
12137	Add compiler compiler .
12138	Returns the modulo of two numbers .
12139	Returns the modulo of the first part of the number .
12140	Logs the last event .
12141	Log a message to the target .
12142	Select from repository entity .
12143	Get entity alias
12144	Sets the entity class to be deleted .
12145	Override the update method to use the entity class name .
12146	Sets the entity class to be fetched from .
12147	Set the value for the given key .
12148	Add a GROUP BY clause to the query
12149	Add group by .
12150	Sets the order for the query .
12151	Adds an order to the query .
12152	Limit the number of results returned by the query .
12153	Paginates the results .
12154	Executes the current query and returns the first result .
12155	Fetches a single result from the database .
12156	Returns all results as an array .
12157	Adds a parameter to the query .
12158	Find an unused parameter name .
12159	Parse call methods .
12160	Call functionality fields .
12161	Check if the array is an associative array
12162	Returns a description of the subject .
12163	Add a timestamp .
12164	Returns the timestamp as a table .
12165	Get the page load time .
12166	Get most time consuming domain
12167	Renders the header .
12168	Renders the header image .
12169	Renders the body .
12170	Renders the card footer .
12171	Get controller group .
12172	Returns an array of options with their values .
12173	Get help for an action s arguments .
12174	Get help for options for an action .
12175	Returns the response headers .
12176	Determine if the user is a flash .
12177	Returns the raw request body .
12178	Returns the request body parameters .
12179	Returns the host name of the request
12180	Returns the URL of the script .
12181	Get server params
12182	Returns the content types accepted by the client .
12183	Returns a list of accepted languages .
12184	Returns an array of ETags from the If - None - Match header .
12185	Returns the CSRF token .
12186	Generate CSRF token .
12187	Get default server params .
12188	Add a number of logins to the user .
12189	Crop an image .
12190	Make the name of the crop file .
12191	Perform the crop operation .
12192	Get the size of an image .
12193	Get the permissions for a given file .
12194	Returns all annotations found in the given doc string .
12195	Get annotation matches .
12196	Adds an annotation to the list of annotations .
12197	Set annotation arguments .
12198	Get annotation properties .
12199	Process annotation properties .
12200	Get arguments .
12201	Determine the value .
12202	Get an annotation from the annotations map
12203	Remove wildcard from the match .
12204	Returns an array of subscribed events .
12205	Handle a command .
12206	Handles the help command .
12207	Returns the provider for the given command
12208	Adds a left join to the query .
12209	Add a right join to the query .
12210	Add a right join to the query .
12211	Returns the SQL representation of this object .
12212	Fetch all rows as a single column
12213	Sets the object table name .
12214	Set the object structure .
12215	Sets the name of the object database .
12216	Set object model name
12217	Build the object model .
12218	Build fields from structure
12219	Register the validator factory .
12220	Load services .
12221	Returns the target site id .
12222	Get the parent of a record
12223	Renders a collapse item .
12224	Execute the query and return all results .
12225	Executes a query and returns the first row .
12226	Return the first column of the result set .
12227	Returns the number of rows in the result set .
12228	Check if a row exists in the database
12229	Make a call to a method .
12230	Find all calls that match the given arguments wildcard .
12231	Sets up the PEAR registry .
12232	Creates the state directory if it does not exist .
12233	Creates a channel state directory if it does not exist .
12234	Creates the channels directory if it does not exist .
12235	Returns the channel file name .
12236	Returns the channel name from an alias .
12237	Return the alias for a given channel
12238	Lock the registry
12239	Check if a channel exists
12240	Check if a mirror exists on a channel
12241	Check if a given alias is a channel alias
12242	Returns information about a given channel
12243	Update a channel
12244	Returns true if the value of the property matches the given data .
12245	Returns the path to the tinymce . js file .
12246	Initializes a new Str instance with the given value .
12247	Get the Doctrine entity manager .
12248	Resolves a class name .
12249	Validate that an attribute is within a set of hashes .
12250	Validate that a route exists .
12251	Copy files from origin directory to target directory .
12252	Initializes the button .
12253	Returns the next day of a date .
12254	Get the previous day of a date .
12255	Create a date range with an amount of days .
12256	Get a file by path .
12257	Get the path to a directory .
12258	Opens a file for reading .
12259	Create a new file .
12260	Put contents to a file .
12261	Returns the contents of a file .
12262	Change file mode .
12263	Locks a file .
12264	Called when a file is locked .
12265	Ensure that the given value is a file or directory .
12266	Ensure that the given path is a directory .
12267	Check if we need to unlock all locked files .
12268	Returns the current globals .
12269	Render section .
12270	Add a ON clause .
12271	Adds a where condition to the query .
12272	Add a where null condition .
12273	Converts an array to a collection
12274	It could be normal .
12275	Get an internal record from the database .
12276	Internal method to update a row in the database .
12277	Perform a down migration .
12278	The fresh version of the database .
12279	Show the migration history .
12280	Show new migrations .
12281	Creates a new migration .
12282	Tries to migrate a class to down .
12283	Run the migration to the given time .
12284	Migrate the application to the given version .
12285	Loads the database adapter .
12286	Connect to the database .
12287	Add a query to be cached .
12288	Get cached results for a query
12289	Performs an array query on the underlying adapter
12290	Add a table to the database
12291	Add fields to a table
12292	Get information about a table
12293	Check if a table exists
12294	Build an array of fields
12295	Escapes special characters in a string .
12296	Clears the query .
12297	Adds a WHERE condition .
12298	Add a string to the WHERE clause .
12299	Where in condition
12300	Add an OR WHERE clause
12301	Simple AND WHERE
12302	Sets the order_by property
12303	Get the query string .
12304	Execute the query and return the results .
12305	Execute the query and return the first result
12306	Get all extensions
12307	Get an instance of ModelOperator
12308	Sets the path to the storage directory
12309	Load structure files
12310	Returns the structure for a given model .
12311	Save model structure
12312	Dump data for all models
12313	Load data from file
12314	Find all transactions for an account .
12315	Sets the state of the client .
12316	Returns the number of commands in the backlog .
12317	Processes the command queue .
12318	Sends a query to the observable .
12319	Sets the connection status .
12320	Handle a message .
12321	Process message data .
12322	Cancels the current request .
12323	Redirect to social provider
12324	Callback function .
12325	Unlink a social provider .
12326	Update the settings .
12327	Check provider settings .
12328	Set the config for a specific provider .
12329	Register social .
12330	Cleanup timer callback .
12331	Packs a single record .
12332	Unpacks a single record .
12333	Creates the cleanup timer .
12334	Check if a menu item has sub - menu .
12335	Set the account ID .
12336	Sets the user id .
12337	Get the join one account .
12338	Get the associated user .
12339	Generate the next exception .
12340	Strip tags from a string
12341	Initializes the configuration object .
12342	Return a list of valid roles for a given release
12343	Returns an array of base install roles .
12344	Shorten the string .
12345	Sets the block size
12346	Returns the value for the given key .
12347	Generate the names of the config files .
12348	Merge data .
12349	Read config data .
12350	Read configuration data from file .
12351	Normalize a config path .
12352	Apply domain event to aggregate .
12353	Record a domain event .
12354	Set related data
12355	Attaches event listener .
12356	Redraws all rendered components .
12357	This method is intend to go to another page .
12358	Initializes the plugins .
12359	Sets a list of variables .
12360	Fetch template from string
12361	Load plugins from a directory
12362	Creates a BusinessHours from an associative array .
12363	Shift a set of business hours to a new timezone .
12364	Flattens an array of days intervals .
12365	Add a warning to the error stack .
12366	Get the contents of a file in the archive .
12367	Parse imports .
12368	Parses a YAML string .
12369	Set parameters from YAML settings .
12370	Calculate the length of the request body .
12371	Execute a command .
12372	Serialize a value into an XML tag
12373	Unpublishes all published versions of an entity .
12374	Sets the class name .
12375	Set ID column
12376	Set name column
12377	Set data column
12378	Set lifetime column
12379	Set modified column
12380	Set created column
12381	Get all providers .
12382	Get the list of available providers .
12383	Boots the service provider .
12384	Registers the content negotiation mechanism .
12385	Set the response format for the given request .
12386	Validate the request content type .
12387	Execute the function and return the value .
12388	Tries to download a channel from the server .
12389	Return a reference to a dependency - 2 object .
12390	Returns the download directory .
12391	Detect dependency cycle .
12392	Setup a graph for a given package
12393	Get url param
12394	Output a string to the CLI .
12395	Get command line arguments
12396	Register the no - captcha service .
12397	Register validator rules .
12398	Register form macros .
12399	Creates an object from an XML file .
12400	Creates an object from a string or XML file .
12401	Returns the channel as an XML string .
12402	Validates an error .
12403	Returns the base URL for a resource type
12404	Reset channel functions
12405	Set default PEAR protocols
12406	Get mirror by server name
12407	Sets the validation package for the channel
12408	Adds a function to the primary function list
12409	Add a mirror function to the channel file .
12410	Returns the validator package .
12411	Return a reference to the validate object .
12412	Check if a property can be get .
12413	Check if a property can be set .
12414	Returns the cache file .
12415	Loads the cache parameters .
12416	Add an entry to the container .
12417	Returns the value for the given id .
12418	Returns the entry with the given identifier .
12419	Returns true if the entry with the given id exists .
12420	Removes an entry from the collection .
12421	Applies site conditions .
12422	Assign a value to an array of keys
12423	Extracts the error messages from an error object .
12424	get models config file
12425	Get the models definition from the config file
12426	Saves the models definition to the configuration file .
12427	Returns the metadata of the request .
12428	Set the user s name .
12429	Sets the color of the image .
12430	Set the parser .
12431	Aggregate a collection of resources into a local resource .
12432	Perform a curl request .
12433	Image proxy .
12434	Creates a validator instance .
12435	Validates a model attribute .
12436	Validates a value .
12437	Run the application .
12438	Fatal error handler
12439	Generate a URL for a controller and action .
12440	Returns the canonical URL of the current route .
12441	Normalize the route path .
12442	Check if all tests are working .
12443	Returns the view names for a given schema .
12444	Get the value for the given key .
12445	Sets the value for the given key .
12446	Set multiple values .
12447	Get and delete a value from the collection .
12448	Add a value to the cache .
12449	Get a value from the cache or store it .
12450	Delete a value from the cache .
12451	Remove non - numeric characters from a string
12452	Add default options to the command .
12453	Get option or config value .
12454	Get option value with type cast .
12455	Load config data from file .
12456	Load configuration from file .
12457	Render the config .
12458	Render a value .
12459	Normalize config array path .
12460	Sets the package version to 2 . 1
12461	Clears the contents of the package .
12462	Clears the dependencies of the package .
12463	Sets the package type
12464	Return the current release .
12465	Adds a install tag to the current release
12466	Add an ignore tag to the current release
12467	Adds a binary package tag to the current release
12468	Adds a configuration option to the current release .
12469	Sets PHP install condition for current release
12470	Sets the OS install condition for the current release
12471	Sets arch install condition for current release
12472	Generate a change log entry .
12473	Check if file is video
12474	Get video infos
12475	Set the date .
12476	Sets the amount of the payment .
12477	Set the field type .
12478	Set comment .
12479	Set the category id .
12480	Set the value of the accountIdVirtual property .
12481	Creates a new instance from a string .
12482	Creates a database connection from an array .
12483	Creates a new SQLite instance .
12484	Create a MySQL instance .
12485	Run a query and return the result .
12486	Returns the names of all tables in the current database .
12487	Execute an SQL query and return a single row .
12488	Run a query and return the first column of the first row .
12489	Check if a table exists .
12490	Check if a column exists in a table .
12491	Returns the primary keys of a table .
12492	Returns an array of column names for a table .
12493	Logs a query .
12494	Add service aware entity listener
12495	Run the application .
12496	Sets the public and private keys
12497	Sets the private key
12498	Set the envelope key
12499	Sets the compression options .
12500	Returns the timestamp as a formatted string .
12501	Supprime un utilisateur
12502	Returns the value of the argument at the current index .
12503	Creates migration history table .
12504	Add a filter to the chain
12505	Filter a value using a static class
12506	Add inverse relations to the result array .
12507	Populates a relation with the given primary models .
12508	Populates a single relation .
12509	Populate a relation for multiple models .
12510	List invalid properties .
12511	Process a multidimensional array .
12512	Creates a new instance of the given class .
12513	Returns true if the string is equal to the other string .
12514	Returns true if this string ends with the other string .
12515	Returns true if the string contains the other string .
12516	Returns a substring of the string .
12517	Replaces the search string with the replace string .
12518	Replaces this string by a regular expression .
12519	Emits before save event
12520	Emits beforeDelete event
12521	Refresh a record from the database .
12522	Update all records in the table .
12523	Delete all records from the table .
12524	Inserts a new record into the database .
12525	Internal method to insert a record into the database .
12526	Deletes this object from the database .
12527	Returns an array of methods .
12528	Returns method identifier .
12529	Callback for custom data .
12530	Get list of commands .
12531	Displays the help for a controller .
12532	Creates a Controller instance .
12533	Handle an exception and return a response .
12534	Handle fatal errors .
12535	Log an exception .
12536	Get exception trace .
12537	Reduces the stack trace of an exception .
12538	Proxy with app property .
12539	Proxy method with app .
12540	Inject a variable into an array of arguments .
12541	Ensure that the given string is translated .
12542	Create a new repository .
12543	Startup method .
12544	Generate a random key .
12545	Returns an array of properties for the data store .
12546	Registers a custom error class .
12547	Displays a form for assigning a user .
12548	Request for a list of countries
12549	HTML encode a string .
12550	Get default reason phrase .
12551	Returns the value of a header or all of them .
12552	Returns the body of the message .
12553	Decode the body of an HTTP request .
12554	Check if the table exists .
12555	Removes all rows from the database .
12556	Resizing the pool if necessary .
12557	Returns all headers .
12558	Returns the header name .
12559	Writes an array of messages to the console .
12560	Write a message to the console .
12561	Sets filter type
12562	Find a resource in a list of paths .
12563	Returns an array of possible files for the given file name .
12564	Start the session .
12565	Returns the value for the given id .
12566	Sets the value for the given id .
12567	Removes an item from the collection .
12568	Generate a CSRF token .
12569	Validates CSRF token .
12570	Returns a human - readable version of the given name .
12571	Delete the file or directory .
12572	Moves the file to a new location
12573	Cleans the file name .
12574	Dispatches an event .
12575	Handles an error .
12576	Handle fatal errors .
12577	Saves the rule .
12578	Returns a string representation of the error .
12579	Convert an array to an xml string
12580	Convert header string to array
12581	Load a configuration file .
12582	Set global config
12583	Get a configuration value .
12584	Build a config stack from an array .
12585	Parses a configuration array .
12586	Parse a config value recursively .
12587	Compile a join constraint clause .
12588	Compile a where null clause .
12589	Compile an insert statement into SQL .
12590	Compile an update query into SQL .
12591	Compile a delete query into SQL .
12592	Wrap a value in a string .
12593	Set the arguments to pass to the function .
12594	Sets the promise that will be resolved when the promise is resolved .
12595	Set the prediction .
12596	Throws an exception if an exception is thrown .
12597	Creates a new GalleryAdapter instance .
12598	Connect to the API server .
12599	Creates a new record in the database
12600	Convert to SQL string .
12601	Scan the given content and add them to the queue .
12602	Applies a function to the value and returns an Option object .
12603	Returns a new instance if the value matches the given predicate .
12604	Execute the callback stack
12605	Execute a callback as reference
12606	Parse a callback function name
12607	Returns an array of image constraints .
12608	Calculate the minimum value for the given option .
12609	Returns the controller instance .
12610	Returns the action of the request .
12611	Resolve the request .
12612	Process dispatched data .
12613	Process response .
12614	Get router exception by code .
12615	Get terminal sizes
12616	Get the operating system .
12617	Translate a string .
12618	Locate a file based on its type .
12619	Formats the value as text .
12620	Formats the value as an email address .
12621	Formats the value as a decimal number .
12622	Formats the value as a size in a human readable format .
12623	Creates a new Article model . If creation is successful the browser will be redirected to the view page .
12624	Updates an existing ShoppingCartItem model . If update is successful the browser will be redirected to the view page .
12625	Checks if the class exists .
12626	Fetch an object from the database .
12627	Executes a query and returns the first column of the first row .
12628	Exclude trashed records .
12629	Scope a query to only include records that are trashed .
12630	Run the console request .
12631	Returns the value of a key from an array or a default value if the key does not exist .
12632	Returns all headers with the given name .
12633	Return an instance without the specified header .
12634	Returns a new message with the given body .
12635	Returns the icon name .
12636	Returns an array of all types .
12637	Binds a template to an alias .
12638	Renders an exception .
12639	Format the message .
12640	Get the header data for the request .
12641	Convert an array to a header string .
12642	Combine an array of sections with a separator .
12643	Helper function to walk a nested array .
12644	Explode a string into an array .
12645	Send error mail
12646	The error 403 action
12647	Extracts the parameters from the given path .
12648	Returns the controller instance .
12649	Generate the HTML for the buttons
12650	Returns options as html string .
12651	Evaluate an expression .
12652	Get zone information
12653	Add a new record .
12654	Get table instance by name
12655	Get the transaction instance .
12656	Load default metadata .
12657	Sets the parent id of the node .
12658	Get budget category .
12659	Get all category word .
12660	Flush all cache data .
12661	Add an item to the collection .
12662	Remove an item from the collection .
12663	Removes all cache data for a given tag .
12664	Get a boolean value .
12665	Creates a new parameter collection .
12666	Extract params from a collection .
12667	Logs a message when a command is loaded .
12668	Push a new route group to the end of the stack .
12669	Returns all annotations of the given type for the given classes .
12670	Set service properties .
12671	Get service from annotation .
12672	Get service context from annotation .
12673	Get the cache instance .
12674	Returns the query builder instance .
12675	Creates a Reaction instance for the given interface .
12676	Returns a token for a stated class name .
12677	Returns a token for a stated class instance .
12678	Get a list of packages for a given category
12679	Returns the best possible states for a given state
12680	Compile the command .
12681	Generate command line arguments .
12682	Execute the command and return the output .
12683	Save stream to disk .
12684	Replaces all fields in the stream with their respective values .
12685	Add a route to the collection .
12686	Adds a GET or HEAD route .
12687	Add a POST route .
12688	Adds a route for the PUT method
12689	Adds a PATCH route .
12690	Adds a route for the DELETE method
12691	Adds a route for the HEAD method .
12692	Get named route .
12693	Generate a URL for a named route .
12694	Returns the route for the given request .
12695	Returns a route matching the given path and method .
12696	Check if the given URI is an internal URI .
12697	Dispatches the request and returns the response .
12698	Setup the router .
12699	Set dynamic route .
12700	Validate route url .
12701	Match static route .
12702	Match dynamic route .
12703	Get matched static route .
12704	Get matched dynamic route .
12705	Add the middleware to the request .
12706	Add the response middleware to the response .
12707	Get response from dispatch .
12708	Setup route collection from cache file .
12709	Setup the annotated routes .
12710	Renders the modal header .
12711	Renders the toggle button .
12712	Returns the gettext file for the given message file .
12713	Get QB result .
12714	Add filters to the QueryBuilder .
12715	Filter by search .
12716	Search filter .
12717	Add ordering to query builder .
12718	Add offset to query builder
12719	Add limit to query builder
12720	Find an entity by it s id
12721	Add a join to the QueryBuilder .
12722	Get data table sort column .
12723	Add the order by clause to the query builder .
12724	Checks if the value is a valid number .
12725	Replace entities in a string .
12726	Reverses entities in a string .
12727	Returns the XML declaration .
12728	Returns the declaration of a doc type .
12729	Convert an array of attributes to a string .
12730	Remove empty tags from an XML string .
12731	Creates a new tag with the given attributes and content .
12732	Creates an XML start element .
12733	Splits a qualified name into namespace and local part
12734	Checks if a string is a valid XML name
12735	Dispatch an object .
12736	Add tags to the tag manager .
12737	Invalidate tags .
12738	Validates the entity .
12739	Interpolate the message with the given context .
12740	Checks if two points are the same space .
12741	Check if two points are the same .
12742	Get the intersection point of two lines .
12743	Check if two lines are perpendicular .
12744	Determines if two lines are parallel .
12745	Get directions between two points
12746	Get direction by coordinates .
12747	Execute the query and return the results .
12748	Prepare async via .
12749	Remove duplicated models .
12750	Returns the first row of the result set .
12751	Checks if a string is valid .
12752	Assert that header value is valid .
12753	Execute the query and return the result .
12754	Builds the request URI .
12755	Set default language
12756	Set media type
12757	Set result format
12758	Sets the maximum number of results per page .
12759	Sets the entity
12760	Sets the default media type attribute .
12761	Sets the callback .
12762	Set explicit type
12763	Get all photos for a gallery .
12764	Log a message to the PEAR_Frontend
12765	Creates a temporary directory .
12766	Extract information from a tarball .
12767	Extract information from a package description file .
12768	Extract information from an XML string .
12769	Returns an PEAR_UserInfo object from a file or a string .
12770	Get the list of offers .
12771	Get all offers
12772	Search for the given EAN .
12773	Sets the file handler .
12774	Set the mail handler .
12775	Get logs from log file
12776	make log row
12777	Shuts down the debugger .
12778	Handles a request .
12779	Distribute to the front controller .
12780	Initiates a bundle .
12781	Add a boot error message
12782	Init constant path
12783	Add a path to the application paths .
12784	Get the path for a stack entry .
12785	Get absolute path .
12786	Get current user .
12787	Sets the application mode
12788	Load default config file
12789	Initializes the module .
12790	Load a bundle .
12791	Get the asset converter .
12792	Generate a hash for the given path .
12793	Add reply to addresses
12794	Creates a new user in the database .
12795	Resume a session .
12796	Calculates the number for the given expression .
12797	Returns the URL for the user details endpoint .
12798	Executes an SQL statement and returns the number of affected rows .
12799	Generate csrf meta tags .
12800	Creates a label tag .
12801	Creates a button tag .
12802	Creates a submit button .
12803	Creates a submit input .
12804	Creates a reset input .
12805	Create a hidden input field .
12806	Create a password input field .
12807	Process boolean input options .
12808	Sets the number of hours .
12809	Sets the number of minutes .
12810	Sets the number of seconds .
12811	Checks if time elements are valid .
12812	Writes the given contents to the given path .
12813	Writes a stream to the given path .
12814	Updates a file on the fly .
12815	Updates the stream at the given path .
12816	Puts a file on the fly system .
12817	Put a stream on the fly system .
12818	Renames a file or directory .
12819	Copies a file or directory to a new path .
12820	Returns the metadata for the given path .
12821	Returns the mime type of a file .
12822	Returns the size of a file or null if file does not exist .
12823	Returns the timestamp for the given path .
12824	Returns the visibility of the given path .
12825	Sets the visibility of a file or directory .
12826	Sets the visibility of the given path to public .
12827	Sets the visibility of the given path to Private .
12828	Returns the contents of a directory .
12829	Get the local s3 adapter .
12830	Get an instance of the S3 adapter .
12831	Process the current request .
12832	Deserializes the current request .
12833	Checks if the current user has access to an object
12834	Parse the block .
12835	Get path .
12836	Get the authentication object .
12837	Get data from url
12838	Parse JSON Data
12839	Get all data
12840	Get entity alias
12841	Creates a query builder for the repository .
12842	Creates a ResultSetMappingBuilder .
12843	Find all identifiers .
12844	Returns the minimum value of a column .
12845	Paginates the results .
12846	Checks if the given entity is an entity .
12847	Returns the identifier of the given entity .
12848	Validate an entity
12849	Returns an array representation of an entity .
12850	Filters an array of uploaded files .
12851	Returns the maximum size allowed for the file .
12852	Check if a key exists in the bag .
12853	Handle the input and output .
12854	Terminate the application .
12855	Account categories .
12856	Run the application .
12857	Initializes the time zone .
12858	Executes the function with the given arguments .
12859	Returns an array representation of the field .
12860	Initializes the component .
12861	Get children list .
12862	Detects if a child is a child of a parent .
12863	Invalidates the cache .
12864	Get last batch number .
12865	Returns an html response .
12866	Returns a json response .
12867	Create a new response template instance .
12868	Create others .
12869	Get the compression adapter
12870	Set compression adapter
12871	Set the prefix .
12872	Returns the value for the given name .
12873	Show the hello page .
12874	Installs tables from an alternative database
12875	Show system errors .
12876	Get the serializer instance .
12877	Increment the version number of a file .
12878	Get the body of the message .
12879	Get the body as an array .
12880	Get the body as an object
12881	Executes a query and returns the results .
12882	Set default values
12883	Sets the body of the message
12884	Returns the response as an array .
12885	Get unique validation rule .
12886	Get object URL from S3
12887	Get the adapter for the given ADOConnection
12888	Get the ID of the ADO connection .
12889	The error action .
12890	Wraps a cURL error in an exception .
12891	Callback used to read the body .
12892	Callback used to write a header .
12893	Callback used to write the body part
12894	Add a command collection .
12895	Print time .
12896	Print console help .
12897	Prints the html help for a class .
12898	Print a line .
12899	Async upload function
12900	Clear html from input
12901	Encode attributes before saving .
12902	After find event handler .
12903	Decode a JSON attribute .
12904	Create a new parser instance .
12905	Sets the locale to use
12906	Get localized question
12907	Establishes a tunnel for the request .
12908	Checks if the response can be sent to the client .
12909	Disconnect from the server .
12910	Handle a redirect
12911	Check if we should use server digest authentication .
12912	Check if we should use proxy digest authentication
12913	Write the body part of the request .
12914	Read a chunk of data from the socket
12915	Build a select statement from an array
12916	Build a where statement from an array
12917	Build a join string from an array
12918	Build a GROUP BY clause from an array
12919	Prepare dependency handler
12920	Merges results from a mapping array to a row .
12921	Cleans a string .
12922	Throws an exception if there are no calls .
12923	Decode YAML into an array .
12924	Start the session .
12925	Execute a query and return the result .
12926	Insert data into a table
12927	Update a row in a table .
12928	Inserts or updates an existing row .
12929	Execute a SELECT query .
12930	Execute a select query and return all rows as an array .
12931	Returns an array of IDs from the result set
12932	Returns a single row from the result set
12933	Returns the first value of the first row of the result set .
12934	Prepare a query for execution .
12935	Executes a prepared statement .
12936	Fetch a row from the result set .
12937	Get a log entry .
12938	Parse the value and return it .
12939	Filter a string using the MatchPattern
12940	Dispatch the router .
12941	Terminate route middleware .
12942	This function is called at the start of the parser .
12943	Called at the end of an element .
12944	Run the asset converter command .
12945	Processes the webhook .
12946	Modify the uploadable behavior .
12947	Creates a request from a JSON string .
12948	Open the session .
12949	Read session data
12950	Destroy a session .
12951	Write data to the session .
12952	Creates a new Reaction instance .
12953	Returns the id of the element .
12954	Emits before run event
12955	Check if application persistence is set .
12956	Find a record by a field value
12957	Delete a record from the database
12958	Get all rows from a table
12959	Saves the record in the database .
12960	Lists all baskets .
12961	Ajax action for listing budgets
12962	Verify user account
12963	Load the navigation bar
12964	Check budget month .
12965	Setup the md5sum of a file
12966	Execute the method and return the result .
12967	Get the user s name .
12968	Save the user in the database
12969	Changes the password of the user
12970	Add the given implementation to the container .
12971	Get writer instance .
12972	Parses the version string .
12973	Compares this version with another version .
12974	Get branch for given parent id .
12975	Returns the parent of the owner .
12976	Returns the parents of the current active record .
12977	Recursively converts an object into an array .
12978	Applies a modifier to the model s properties .
12979	Creates a CSS resource from a CSS URL .
12980	Return the address book view .
12981	Return the message compose view .
12982	Return the view of the message .
12983	Manage messages .
12984	Append extensions to a list of paths .
12985	Destroys the session .
12986	Add an auto loader method to the autoloader map
12987	Remove an autoload method
12988	Remove an aggregate object from the aggregate map
12989	Getopt 2 - line option
12990	Returns an array of options for the given arguments .
12991	Parses a short option string and returns an array of options .
12992	Parse command line arguments
12993	Recursively converts a directory structure to a struct
12994	Convert an array of files to a struct
12995	Remove a file or a directory
12996	Creates a new directory .
12997	Creates a temporary directory .
12998	Remove temporary files
12999	Find files and directories in a directory .
13000	Creates a new log instance .
13001	Set the id of the budget
13002	Returns the budget .
13003	Get all transaction .
13004	Convert a value to a string
13005	Set the URL of the request
13006	Set the request method
13007	Set authentication parameters
13008	Add a cookie to the request
13009	Sets the body of the request
13010	Returns the body of the request
13011	Add a file upload
13012	Attaches an SplObserver .
13013	Detaches an SplObserver from the collection .
13014	Sets the last event .
13015	Set the HTTP request adapter
13016	Set cookie jar
13017	Sends the request to the server
13018	Detect the mime type of a file .
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new Setting entity .
13022	Edits an existing Setting entity .
13023	Adds a WHERE clause to the query .
13024	Create a new response with the given status code .
13025	Remove a row from the table
13026	Check if an event has listeners .
13027	Returns the value of a field .
13028	Returns a formatted message .
13029	Creates an access denied http exception .
13030	Set a flash message .
13031	Commits the current transaction
13032	Format a date
13033	format a time
13034	Format a boolean value
13035	Set time zone
13036	Get an instance of a class .
13037	Check if a service has been registered .
13038	Creates an object of the given class name .
13039	Adds a resolver to the chain .
13040	Adds an object to the container .
13041	Get the pool instance .
13042	Execute a query on the least busy connection .
13043	Executes a statement on the least - busy connection .
13044	Creates a new pg connection .
13045	Returns the least busy connection in the pool .
13046	Install assets .
13047	Returns the ReflectionClass for the given class name .
13048	Returns the version of a class .
13049	Finds the class name for a given version .
13050	Returns the migration methods for a given class .
13051	Get the required options for a given class .
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing Job entity .
13056	Sets the client file name .
13057	Guess the extension of the file .
13058	Returns the MIME type of the file .
13059	Get size in human readable format
13060	Returns the time as a DateTime .
13061	Get CTime as DateTime
13062	Get MTime as DateTime
13063	Create a new File instance from a file content .
13064	Find all applications
13065	Find an application by id .
13066	Create a new application .
13067	Delete an application .
13068	Update an application .
13069	Returns the closest date interval before the given date .
13070	Returns the closest interval after the given date .
13071	Builds a DateTimeInterval from a DateTime and a TimeIntervalInterface .
13072	Returns the day before the given day number .
13073	Returns the day after the given day number .
13074	Get information about a role
13075	Commits the current transaction .
13076	Rolls back a transaction .
13077	Sets the transaction isolation level .
13078	Get the database connection .
13079	Set the backend to use
13080	Log a debug message .
13081	Log an info message .
13082	Log a notice message .
13083	Write a message at the WARNING level .
13084	Log an error message
13085	Log a critical message .
13086	Log an alert message with optional context .
13087	Log an emergency message .
13088	Log a message at the given level .
13089	Returns the value of a property of an object .
13090	Truncates an HTML string .
13091	This method is called by the PEAR_Installer class .
13092	Delete all files from a package
13093	Add a file operation to the transaction
13094	Download a set of packages .
13095	Set the list of packages that need to be downloaded .
13096	Checks if a point is valid .
13097	Creates a new iteration exception .
13098	Register components .
13099	Add array attributes .
13100	Change classes .
13101	Parse the classes .
13102	Returns a column builder for the JSON type .
13103	Bind an abstract to the container if it is not already bound .
13104	Bind an abstract to a closure shared with the container .
13105	Rebind an abstract .
13106	Check if an abstract is a shared class .
13107	Get the closure .
13108	Add dependency for call parameter .
13109	Get the concrete of an abstract .
13110	Request middleware .
13111	Response middleware .
13112	Terminate all middleware .
13113	The index action .
13114	Get the WSDL file .
13115	Initializes the minify options .
13116	Convert date and time to timestamp .
13117	Converts a timestamp to an array .
13118	Date conversion .
13119	Calculate how long a time has been left
13120	Get the properties of the object .
13121	Checks that at least one function call was made .
13122	Parses an option value .
13123	Sets the value of a parameter .
13124	Trim a string .
13125	Output a breakpoint message .
13126	Handles the download all command
13127	Add an instance of a mock class .
13128	Creates a new instance of the specified class .
13129	Displays a form to update the user s profile .
13130	Check if any of the given namespaces exist .
13131	Returns the first non - object found in the argv array .
13132	Make a response .
13133	Make a response from a template .
13134	Return a JSON response .
13135	Create a JSONP response .
13136	Redirect to another URI .
13137	Redirect to a given route .
13138	Validates an email address .
13139	Get the difference in years .
13140	Get the difference in weeks .
13141	Get the difference in seconds .
13142	Get the difference between this date and another date in Humans .
13143	Get commands from annotations .
13144	Set command properties .
13145	Creates a console command from annotation .
13146	Get storage path .
13147	Finds the Model model based on its primary key value . If the model is not found a 404 HTTP exception will be thrown .
13148	Returns an array of parameters that will be passed to the command .
13149	Make a request to the API .
13150	Make a GET request to the API .
13151	Make a POST request to the API .
13152	Make a HEAD request to the specified URI .
13153	Make a PUT request to the API .
13154	Make a PATCH request to the API .
13155	Make a DELETE request to the API .
13156	Desensitizes the given host .
13157	Add a checkpoint .
13158	Merges the given data into this object .
13159	Reads the contents of a file .
13160	Get a package by name
13161	Include static config file if it does not already exist
13162	Clear the init code .
13163	Get the init code .
13164	Evaluate PHP code .
13165	Initialize the template paths .
13166	Add a path to the template directory .
13167	Wrap an object in a viewable wrapper .
13168	Returns a list of all available schema names .
13169	Returns a list of table names for a given schema .
13170	Refreshes table metadata .
13171	Returns the metadata for a table .
13172	Returns the raw metadata for a table .
13173	Sets the metadata for a table .
13174	Get cache key .
13175	Get an option by name
13176	Returns the path to the temporary directory .
13177	Initializes the component .
13178	Create role .
13179	Assign a child role to a role
13180	Register a function prophecy .
13181	Call a mocked function .
13182	Returns a parameter by key .
13183	Resolves a parameter string .
13184	Convert query to meta .
13185	Twitter query .
13186	Render panes .
13187	Register a new user .
13188	Sets the vector to use for encryption
13189	Open the Mcrypt module
13190	Initialize the given cipher
13191	Connect to the API server .
13192	Verify credentials .
13193	Fetch user data from the given URL .
13194	Creates a new request plugin adapter .
13195	Add data tokens to the object .
13196	Returns the OAuth protocol for the given credentials .
13197	Check if the given credentials keys are Oauth1 .
13198	Check if the given credentials keys are Oauth2 .
13199	Closes the stream .
13200	Attaches a stream .
13201	Returns the contents of the stream .
13202	Sets the stream resource .
13203	Writes data to a file .
13204	Get account virtual
13205	Get the previous account .
13206	Update an account virtual amount .
13207	Sets the query cache duration .
13208	Sets the connection .
13209	Fetch a single row from the result set .
13210	Creates an insert query and returns it .
13211	Executes the query and returns a promise that can be resolved .
13212	Log the query .
13213	Executes the query and returns the result as a scalar .
13214	Executes the query and returns the results .
13215	Check query by pattern
13216	Executes a SQL query .
13217	Invoke the Closure with the given arguments .
13218	Check if a layer is supported
13219	Prepare dom references
13220	Distribute boot errors to controller and action .
13221	Renders the error page .
13222	Render Debug Information
13223	Render a view
13224	Initializes the bot .
13225	Add responses .
13226	Register a short code tag .
13227	Remove a short code .
13228	Parses a short code tag .
13229	Parse short code attributes
13230	Get the download URL for a package .
13231	Get a list of packages for a given category
13232	Sort releases by version number
13233	get array data
13234	get all hours
13235	Parse the page and return an array of hours .
13236	Find all accounts for a given user
13237	Write application message
13238	Output usage message .
13239	Returns the usage path of the command .
13240	Output the arguments section .
13241	Output the options section .
13242	Get option name .
13243	Generate a Roll2d6DrdPlus .
13244	Add columns to the query .
13245	Add a HAVING predicate to the select .
13246	Add a where clause to the query .
13247	Add a join to the query .
13248	Add a left join to the current select .
13249	Add a right join to the query .
13250	Returns the SQL string for the select statement .
13251	Execute the query and return the result set .
13252	Prefix table join condition .
13253	Get a value from the collection .
13254	Sets the value for the given key .
13255	Remove an item from the collection .
13256	Creates an INSERT SQL statement .
13257	Sets the package name to use as the package name .
13258	Return a singleton instance of an PEAR_ErrorStack .
13259	Handles an error .
13260	Sets the message callback
13261	Set default error handler callback
13262	Pop an error from the stack .
13263	Pop an error from the static error stack .
13264	Check if there are any errors
13265	Returns an array of errors .
13266	Check if any of the objects in the static error stack have errors .
13267	Returns all of the errors in the static error stack .
13268	Returns a string representation of an PEAR error .
13269	Registers the given configuration .
13270	Registers an entry provider .
13271	Register a set of wired classes .
13272	Get wired parameters .
13273	Sets the target directory
13274	Set the compression mode
13275	Get all routes for a given class .
13276	Sets the properties of the route .
13277	Get class routes .
13278	Creates a new route from the given controller route .
13279	Get router route from annotation .
13280	Publish route annotations .
13281	Formats the response body as JSON .
13282	Format the jsonp response .
13283	Get the host port .
13284	Returns the scheme host port .
13285	Returns a new instance with the specified host .
13286	Returns a new instance with the specified port .
13287	Returns a new instance with the specified path .
13288	Returns a new instance with the specified query .
13289	Returns a new instance with the specified fragment .
13290	Check if the port is standard .
13291	Validates the scheme .
13292	Validates the port
13293	Validate a package .
13294	Validates a single dependency .
13295	Normalizes an PEAR_Dependency2 object .
13296	Add or remove s from a word .
13297	Tokenize a string using a delimiter .
13298	Join the keys and values of an array .
13299	Check if a table exists in the database
13300	Map a class name to a table name .
13301	Get table name by class name
13302	Process the version tag
13303	Executes a discovery command on a channel server
13304	Perform a login
13305	Called when a user logs out
13306	Convert a search separator to a separator
13307	Returns an array of migration files .
13308	Get the migration file map .
13309	Publishes a method .
13310	Send the request and return the response .
13311	Check if the url is valid
13312	Transforms a Directory object into a Directory entity .
13313	Create a new app builder instance .
13314	Creates an app builder from a container builder persister .
13315	Get the dependencies for the application builder .
13316	Reset the HEAD of a file .
13317	Create a new branch .
13318	Delete a branch .
13319	Push a branch to the project .
13320	Create a new pull request .
13321	Clone the project .
13322	phpize callback .
13323	run a command
13324	Connect to the API .
13325	Add a file to rename
13326	Returns the new name of a file .
13327	Get the name of a file .
13328	Returns a service by its identifier .
13329	Creates a service from the given definition .
13330	Set a service .
13331	Set an alias .
13332	Returns the parameter with the passed id .
13333	Set a parameter .
13334	Get a service definition .
13335	Set a service definition .
13336	Initialize the Drush instance .
13337	Set the properties from an user event .
13338	Return the table as an array .
13339	Check if the string is serialized .
13340	Call the callback .
13341	Add a route to the router .
13342	Initializes the routes .
13343	Creates an instance of a controller .
13344	Register a controller .
13345	Register a controller with the annotation .
13346	Register a controller without annotations .
13347	Get default controller and action .
13348	Registers an observer .
13349	Unregisters an observer .
13350	Auto set channel .
13351	Executes a command .
13352	Add flash message .
13353	Redirects to the referer .
13354	Configures the shared cache .
13355	Initializes the bot .
13356	Finalize the middleware chain .
13357	Get the configuration directory .
13358	Throw an exception if no calls were made .
13359	Get the connection instance .
13360	Configures the stfalcon_tinymce bundle .
13361	Set editor capabilities .
13362	Create a new instance from the given environment .
13363	Create a new locator from a path .
13364	Returns an array of all available choices .
13365	Check if the given constant is valid .
13366	Do the type check .
13367	Check if a value is valid .
13368	Get the adapter for the given PDO instance .
13369	Create the path for the controller
13370	Create the cache path
13371	Update the WSDL .
13372	Compile the WSDL .
13373	Generates the documentation for the controller
13374	Get a list of all available SOAP controllers
13375	Build the assets .
13376	Build the bootstrap . css .
13377	Get a parameter by key .
13378	Rebase the URI .
13379	Adds a route to the router .
13380	Create a static route .
13381	Check if a static route exists .
13382	Add a dynamic route .
13383	Check if a dynamic route exists .
13384	Get named route .
13385	Creates the sub - leaves .
13386	Locate a file in the current path .
13387	Converts this number to a new number system .
13388	Checks if two numbers are equal .
13389	Returns the decimal value .
13390	Returns the sum of this number and the given number
13391	Subtracts the given number from this number
13392	Multiplies this number with the given multiplicator .
13393	Divides this number by the given multiplicator .
13394	Returns an adapter for the given mysqli object .
13395	Return list of aliases .
13396	Find aliases for a query .
13397	Replace class files .
13398	Read a line from the socket
13399	Enable SSL on the socket
13400	Check if the request timed out
13401	Add a route to the router
13402	Set the items .
13403	Build the HTML for the given site key and items .
13404	Prepare the name attribute .
13405	Check data attribute .
13406	Add a resource to the queue .
13407	Creates a Day from an array .
13408	Creates a Day from an associative array .
13409	Checks if an interval is all day .
13410	Creates a new request from an array
13411	Set server info
13412	Add headers to the request
13413	Set POST fields
13414	Set query fields
13415	Returns an array of headers .
13416	Returns an array representation of the request .
13417	Add a command to the application .
13418	Adds a parsed command .
13419	Get a command by name .
13420	Removes a command by name .
13421	Find a command by path .
13422	Get all registered commands .
13423	Setup the console .
13424	Setup the console from cache file .
13425	Get the cacheable data .
13426	Sets the separator
13427	Register a listener for a given event .
13428	Register a listener for multiple events .
13429	Check if an event has a listener .
13430	Removes a listener from an event .
13431	Check if an event has listeners .
13432	Adds an event .
13433	Remove an event .
13434	Trigger an event .
13435	Setup the event dispatcher .
13436	Setup event listeners from cache file .
13437	Initializes the template engine
13438	Check if a template exists
13439	Fetch template from file or string
13440	Load data from a file .
13441	Save data to file .
13442	Initializes the reader .
13443	Initializes the writer .
13444	Get the default options .
13445	Encrypts data .
13446	Decrypt data .
13447	Generate a session key .
13448	Throw an exception to stdout .
13449	Render an exception .
13450	Get the view file for an exception .
13451	Returns a response object .
13452	Get exception data .
13453	Get stdio logger
13454	Read session data from archive .
13455	Write session data to cache .
13456	Destroys a session .
13457	Update a timestamp .
13458	Extract data from session record .
13459	Extracts the timestamp from a record .
13460	Get session data from cache .
13461	Returns the exception message with variables replaced
13462	Builds the SQL for a table constraint .
13463	Adds auto increment modifier to a column .
13464	Add key .
13465	Generate add foreign key .
13466	Get column syntaxe .
13467	Start the jump .
13468	Creates a new iteration exception .
13469	Renders the toggle button .
13470	Get the response template .
13471	Get application module name
13472	Load class reflection .
13473	Returns a reflection for the given object .
13474	Loads a property from an object .
13475	Returns the name of the method that was installed .
13476	Returns the properties of a class .
13477	Sets the value of a property of an object .
13478	Sets an array of properties to an object .
13479	Load class annotations .
13480	Clears all registered reflections .
13481	Check if a class is instantiable .
13482	Get a reflection for the specified object and method .
13483	Get the class reflection for the given object or name .
13484	Check method arguments .
13485	Get a reflection from the cache .
13486	Sets a reflection to the cache .
13487	Returns the cache key for the given object or class name .
13488	Returns the class name of an object .
13489	Parses the summary of the doc comment .
13490	Get class doc .
13491	Get method property doc .
13492	init by config
13493	Return the namespace for a given foundation class .
13494	Unindent a string .
13495	Called after the element has been processed .
13496	Extract a photo array from a source object
13497	Fetches the image sizes for a photo .
13498	Extract the images array from the source array .
13499	Find the start position of a placeholder .
13500	Build the route path .
13501	Search a path in the router .
13502	Replace placeholders in a path .
13503	Initializes the receiver .
13504	Preloads all messages for a given category .
13505	Find categories by pattern .
13506	Check if a property is set .
13507	Sends an exception response .
13508	Returns the content of the exception .
13509	Format the path .
13510	Formats an array of arguments .
13511	Escapes special characters in a string .
13512	Create a new validator with the given data and rules .
13513	Transforms a string into an array of Input objects
13514	Handle a disconnected connection .
13515	Handle the received event .
13516	Callback phone home .
13517	Grim reaper callback
13518	Get proxy command handler
13519	Config action .
13520	Loads the bundles . yml file .
13521	Load messages from the message directory .
13522	Set HTTP headers .
13523	Set server CGI environment variables .
13524	Make a POST request to the API .
13525	Send a JSON - RPC request .
13526	Connect to the database .
13527	Escape a string for use in a query .
13528	Initializes the application .
13529	Check if table has slug field
13530	Get a list of special fields .
13531	Get fields by type
13532	Return a formatted date .
13533	Negotiates the language from the Accept - Language header
13534	Negotiates the charset from the Accept - charset header .
13535	Returns the first mime type that is supported by the client .
13536	Match the Accept header against the supported headers .
13537	Sort accept header
13538	Send HEAD request to specified URL
13539	Convert a string from one encoding to another .
13540	Get entity manager by name
13541	Get the object structure for a given database .
13542	Get an auto object from a table name
13543	Get table structure
13544	Get the model of a table
13545	Build objects structure
13546	Prepare error code .
13547	Checks the given budgets against the given date .
13548	Checks if a budget exists for a given date .
13549	Find a budget by budget id and month date .
13550	Set idParent .
13551	Setter for isMain .
13552	Returns the user associated with this account .
13553	Returns the associated Bank object .
13554	Parses a CSV file and returns the transactions .
13555	Returns the type icon .
13556	Build a query .
13557	Escapes a value for use in a query .
13558	Creates a new redirect response .
13559	Redirect to a secure path .
13560	Redirect to the previous page .
13561	Throws an HttpRedirectException .
13562	Filters the given list of commands .
13563	Sort commands by name .
13564	Output the current section of a command .
13565	Initializes the session .
13566	Start the timer .
13567	Get the current time .
13568	Display timer .
13569	Initializes the provided provider .
13570	Initializes the static application .
13571	Initializes the basic application .
13572	Locate configs path .
13573	Locate the class loader .
13574	Creates an object of the given type .
13575	Get config reader .
13576	Initialize the default container .
13577	Initialize the static application .
13578	Check if the stored token matches the given request .
13579	Get CSRF token from request .
13580	Initializes the DarkSky plugin .
13581	Get the current weather for a location .
13582	Get the precipitation for a weather .
13583	Get the latitude and longitude for a location
13584	Add error message to the response .
13585	Get English intensity .
13586	Returns all annotations for a class .
13587	Get class members annotations .
13588	Returns the class and its members annotations .
13589	Get all annotations for a property .
13590	Get all annotations of a given type for a given property .
13591	Get all annotations for a class .
13592	Get method annotations .
13593	Return all method annotations of a given type .
13594	Get all annotations for a class .
13595	Get function annotations .
13596	Filter annotations by type .
13597	Sets annotations values .
13598	Get class reflection .
13599	Get the ReflectionProperty instance for a class property .
13600	Returns reflection for class and method .
13601	Returns reflection for a function .
13602	Returns the dependencies of the given parameters .
13603	Return the length of the line .
13604	Get the center of the polygon .
13605	Runs the form .
13606	Creates a Reaction instance for a model attribute .
13607	Check if a value exists .
13608	Returns the display directory name .
13609	Scan directory for files and folders .
13610	Add a header to the list
13611	Returns a list of all headers
13612	Creates a new database .
13613	Get all tables in the database
13614	Updates the database with the given structure .
13615	Update database relations
13616	Updates a many table .
13617	Generate the SQL for creating a table
13618	Generate column SQL
13619	Generate index SQL
13620	Generate constraint SQL .
13621	Get keyvalues by type .
13622	Get key values by key type .
13623	Returns the annotations for the given class .
13624	Returns the exact annotation of a class .
13625	Returns the annotations for a property .
13626	Returns the annotation of the given property if it is an exact annotation .
13627	Gets the annotations for a method .
13628	Returns an exact annotation for a method .
13629	Returns the annotation reader .
13630	Get method reflection
13631	Get a value from the cache .
13632	Sets a value to the cache .
13633	Get paths from a key .
13634	Process the key .
13635	Check the event class name .
13636	Builds the last event .
13637	Return the average value of an array
13638	Sets the order by .
13639	Read the constructor parameters .
13640	Returns the value of the object at the given path .
13641	Sets the value at the given path in the given object .
13642	Filters an array of objects using the given expression .
13643	Set From Address .
13644	Adds an email address to the mailer .
13645	Adds a reply - to address .
13646	Adds a CC to the email .
13647	Adds a CC to the email .
13648	Adds an attachment .
13649	Run the application .
13650	Set Referer .
13651	Return the Referer
13652	Build a URL based on the given parameters .
13653	Download crowdin package
13654	Extract the package .
13655	Reset default locale translations .
13656	Find the position of the first occurrence of a string in a string
13657	Creates sidebar menu .
13658	Add example menu .
13659	Register the service provider .
13660	Publish pages .
13661	Update a row in the table
13662	Loads the messages for the given context .
13663	Returns a list of categories .
13664	Get filename from Content - Disposition header .
13665	Validates the uploaded files .
13666	Initializes the result object .
13667	Get pattern .
13668	Sets the attributes of the result .
13669	Detect data by key name .
13670	Check if we are running on a shell .
13671	Get config instance
13672	Returns the latitude in DMS format .
13673	Get the longitude in DMS .
13674	Calculate the minimum and maximum latitude for a given distance in meters .
13675	Calculate the minimum and maximum longitude for a given distance .
13676	Returns the distance between this location and the given location .
13677	Returns true if all filters pass .
13678	Create all tables from config .
13679	Bundle multiple schemas .
13680	Get a point by name .
13681	Publish the console command .
13682	Returns the response for the current URL fragment .
13683	Generate the response for the given request .
13684	Retrieve the data from the cache .
13685	Check if a string ends with another string .
13686	Count the number of words in a string .
13687	Create acting - as authenticatable instance .
13688	Initializes the session .
13689	Opens the session .
13690	Internal method to open the session .
13691	Registers the session handler .
13692	Close the session .
13693	Destroys the session .
13694	Regenerate the session ID .
13695	Read session .
13696	Write session data
13697	Destroys a session .
13698	Sets a value to the given key .
13699	Removes a value from the cache .
13700	Removes all keys from the session .
13701	Get a flash value .
13702	Get all flash messages .
13703	Sets a flash variable .
13704	Add flash message .
13705	Remove flash data .
13706	Remove all flash data .
13707	Freezes the session .
13708	Unfrees the session .
13709	Create session cookie .
13710	Validate that an attribute is after a given date .
13711	Validates that the date is after the given date with the given format .
13712	Validate that an attribute is a valid date format .
13713	Checks the prediction of all prophecies .
13714	Assign a value to an array .
13715	Get controller plugin config
13716	Execute rule .
13717	Process multiple dependencies name
13718	Parse fragments from raw data .
13719	Create a new view instance .
13720	Set view variables .
13721	Sets a view variable .
13722	Escape the given value .
13723	Get template directory .
13724	Sets the layout of the view .
13725	Set the template to use .
13726	Render a partial .
13727	Ends a block .
13728	Renders the view .
13729	Get full path to template file .
13730	Render a template file .
13731	Renders the layout .
13732	Adds a route to the routes array .
13733	Get ep line .
13734	Write a header message .
13735	Get a list of available notifications .
13736	Creates an instance of the given notification name .
13737	Set the key .
13738	Check if the file should be renamed .
13739	Guess the file extension .
13740	Guess the filename .
13741	Sets the name of the file .
13742	Download file from local filesystem .
13743	Upload image to tinymce .
13744	Handles exceptions thrown by the kernel . exception event .
13745	Get the curl resource .
13746	Execute the HTTP request .
13747	Set cookie file
13748	Choose parameters from map .
13749	Updates all items . If update is successful the browser will be redirected to the view page .
13750	Initializes the options .
13751	Write the configuration to a file
13752	Get the exception from the given context .
13753	Convert an exception to an array .
13754	Render a file .
13755	Check if a file is a core file .
13756	Get exception name .
13757	Minify CSS and IE links
13758	Generate a list of URLs to be minified
13759	Set amount default .
13760	Set the start date .
13761	Set the end date .
13762	Setter for isRecurrent .
13763	Set month bitmask
13764	Get all budget categories .
13765	Get all budget months .
13766	Execute a SQL statement .
13767	Returns an error object .
13768	Load a class from a path .
13769	Upgrades the database .
13770	Shuts down the database .
13771	Inserts a row into a table .
13772	Creates a batch insert command .
13773	Update data in a table .
13774	Delete rows from a table .
13775	Renames a table .
13776	Drops a table .
13777	Truncates a table .
13778	Drop a column from a table .
13779	Renames a column .
13780	Alter a column on a table .
13781	Add a primary key to a table .
13782	Drops a primary key .
13783	Add a foreign key to a table .
13784	Drops a foreign key .
13785	Create a new index on a table .
13786	Drops an index .
13787	Add a comment on a column .
13788	Add a comment on a table .
13789	Drop a comment from a column .
13790	Drop a comment from a table .
13791	Execute the given promise with the given description .
13792	Log a message to the adapter
13793	Validate regex .
13794	Captures the given text .
13795	Splits the given text into an array .
13796	Replace this text with another text .
13797	Config action .
13798	Get securimage url
13799	Get a model by its primary key .
13800	Returns the model with the given id or creates a new one .
13801	Returns a list of dummy objects .
13802	Save a model to the database
13803	Deletes a record from the database .
13804	Get a list of models matching the given ids .
13805	Returns an array of models with ids as keys .
13806	Sets a raw cookie .
13807	Connects to SOCKS5 proxy
13808	Saves the record in the database
13809	Set the data of the record .
13810	Returns the record as an array .
13811	Returns the value of a field .
13812	Set the value of a field
13813	Get record primary key predicate
13814	Parse a path .
13815	Validates the given path .
13816	Splits an array of segments by the given delimiter .
13817	Parses the given path and returns an array of parameters .
13818	Get the replacement for a parameter .
13819	Cache a value .
13820	Flushes the entire cache .
13821	Process response data .
13822	Invoke an action on an object .
13823	Returns the content type of the file .
13824	Regenerate a session id .
13825	Create a new session id .
13826	Creates a periodic timer .
13827	Set the content .
13828	Set the buttons .
13829	Add a button .
13830	Validates modal type .
13831	Validates modal size .
13832	Register commands .
13833	Archive a tar file
13834	Add string to archive
13835	Check if a filename is malicious .
13836	Parse a user command .
13837	Migrate the object from another object .
13838	Returns a list of unique keys for a table .
13839	Returns the primary key of a table .
13840	Returns the primary keys for a table .
13841	Returns the priority of this message .
13842	Get validator .
13843	Loads the mime types from a file .
13844	Load mime aliases .
13845	Unlink a file or directory .
13846	Returns the permissions as a string .
13847	Returns the permissions as octal value .
13848	Add an inner join to the query .
13849	Generate the SQL for a select statement .
13850	Execute the search query and return the result
13851	Creates a table .
13852	Load modules .
13853	Returns the container .
13854	Initialize the bot .
13855	Specifies the columns to select .
13856	Sets the table name .
13857	Sets a value for a column .
13858	Sets the where clause .
13859	Adds an OR WHERE clause to the query .
13860	Order by asc .
13861	Adds a DESC order to the query .
13862	Returns the query for this statement .
13863	Sets the where clause .
13864	Sets the order of the query .
13865	Get the select query .
13866	Get insert query .
13867	Get update query .
13868	Get delete query .
13869	Get SET query .
13870	Get where query .
13871	Returns the order by clause .
13872	Dispatches the walking of an expression .
13873	Register a new model .
13874	Edit a user .
13875	Get the version of the plugin .
13876	Create a new route .
13877	Handles the request .
13878	Resolves an action .
13879	Returns the home url .
13880	Set a component definition .
13881	Restaure utilisateur .
13882	Get user by id
13883	Get active users .
13884	Save messages to a file .
13885	Find a value in a list .
13886	Find a record with the given relations .
13887	Returns the next row from the result set .
13888	Read a single column from the result set .
13889	Reads and returns the next row as an object .
13890	Fetches all rows from the result set .
13891	Returns the number of columns in the result set .
13892	Find the constraints for a table .
13893	Get server version promised .
13894	Publishes the routes .
13895	Parse routes data and build path expressions .
13896	Build path expressions .
13897	Register an alias for a service .
13898	Bind a service to the container .
13899	Create a service from a service context .
13900	Creates a service from a service context .
13901	Checks if a service is registered .
13902	Checks if the service with the given ID has the given context .
13903	Get a service from the container .
13904	Make a service .
13905	Returns the service with the given id .
13906	Returns an instance of the provided service .
13907	Returns a service id with optional context .
13908	Setup the container .
13909	Setup services from cache file .
13910	Setup service providers .
13911	Get cacheable data .
13912	Get address lines .
13913	Sets the filter level
13914	Get the unique id for this route .
13915	Register this route in the given router .
13916	Resolve an action .
13917	Emits the beforeAction event .
13918	Emits an afterAction event .
13919	Renders a partial view .
13920	Renders an ajax view .
13921	Returns an array of action ids .
13922	Render a view in a layout .
13923	Renders the view and returns the response .
13924	Normalizes the action method name .
13925	Resolve error as html .
13926	Resolve error as array .
13927	Get error data .
13928	Get the exception name .
13929	Validates an action .
13930	Get action id from action method .
13931	Get action method name .
13932	Convert color array to hex string
13933	Converts a color array to an RGBA array .
13934	Get dominant color of an image
13935	Returns a promise that resolves with the contents of the standard input stream .
13936	Prompt user for a list of options .
13937	Append a file to a list of paths .
13938	Get the PgClient instance .
13939	Executes a SQL statement and returns a promise that resolves with an array of rows .
13940	Write the stream to the given path .
13941	Creates a new server request from PHP globals .
13942	Returns the value of a given header .
13943	Strip the query string from a path .
13944	Marshal the host and port from the request header .
13945	Normalizes a nested file spec .
13946	Check if a string ends with another string .
13947	Generate a random string .
13948	Creates the edges for the given class .
13949	Finds all annotations between two classes .
13950	Create a new record .
13951	Fetch all results .
13952	Update an existing record .
13953	Sets the HTTP status code .
13954	Set response headers .
13955	Returns the date header .
13956	Sets the Date header .
13957	Add a cache control header .
13958	Returns the value of a cache - control header .
13959	Remove a cache control header .
13960	Check if the response is cacheable .
13961	Returns the age of the response .
13962	Expire the response .
13963	Returns the Expires header .
13964	Returns the maximum age of the response .
13965	Set shared max age .
13966	Sets the time to live in seconds .
13967	Sets the response to not - modified .
13968	Check if the response is invalid .
13969	Returns whether the response is informational .
13970	Is the response successful?
13971	Check if the response is a redirection .
13972	Check if the response is a client error .
13973	Check if the response is a redirect .
13974	Returns whether the response is empty .
13975	Close output buffers .
13976	Initializes the request .
13977	Validates the HTTP method .
13978	Returns the path to a command .
13979	Locates all permissions for the given command .
13980	Returns a reference to the parsed package file .
13981	Removes all packages that are already installed .
13982	Detect stupid duplicates
13983	Attempt to load a package from a file .
13984	Get parameters from the request body
13985	Enable PHP error reporting .
13986	Get the difference between the transaction amount and the global transaction amount .
13987	Add month to bitmask
13988	Returns true if the calendar has the given month .
13989	Returns the length of the message .
13990	Returns the request boundary .
13991	Returns the user with the given username .
13992	Creates a new user .
13993	Set the IP address .
13994	Renders a view
13995	Publishes events from the given stream .
13996	On resource materialize .
13997	Add parameters to the query .
13998	Fetch the message from the cache .
13999	Encrypt a message
14000	Decrypt a message
14001	Decrypt an array .
14002	Encrypt an object .
14003	Decrypt an object .
14004	Returns the value of an option .
14005	Initializes the object with default values .
14006	Replace magic fields
14007	Convert a Query into a QueryBuilder .
14008	Convert a rich text array into a plain text string
14009	Converts a rich text array into an HTML string .
14010	Converts a rich text block into an html block .
14011	Add a cookie to the response .
14012	Sends the response to the client
14013	Validates the status code .
