0	Get Administrator role .
1	Get admin user .
2	Handle delete event .
3	Categories translations
4	Get highest order item
5	Create the name for a column .
6	Handle the breadcrumb event .
7	Updates a table .
8	Update the table .
9	Get the diff for the renamed columns .
10	Gets the diff for this table .
11	Get the list of renamed columns .
12	Get the list of renamed indexes .
13	Get thumbnail .
14	Get thumbnail .
15	Determine if the given user can edit roles .
16	Get dimmer templates
17	Prepare menu translations
18	Save the changes .
19	Determine if the given user can read the given author .
20	Create a new breadcrumb .
21	Store a bread .
22	Edit DataType .
23	Update bread data type .
24	Remove a breadcrumb .
25	Create a new relationship
26	Get the relationship field .
27	Handle the request .
28	Create new database table .
29	Edit database .
30	Update the database table .
31	Show data type .
32	Remove the specified database table .
33	Generate the URL to sort by .
34	Display a menu .
35	Determine if the model is translatable .
36	Many - to - many relations .
37	Get translated attribute value
38	Query scope to restrict translations by field name .
39	Save multiple translations .
40	Describe a table .
41	Handle the breadcrumb event .
42	Add notification to dashboard .
43	Register the console commands .
44	Cleanup data .
45	Delete thumbnails
46	Order data type .
47	Fetch relation data
48	Resolve a collection of relations .
49	Add soft deletes .
50	validate breadcrumb
51	Filter fields with validation rules .
52	Verify ID token
53	Retrieve the verification certificates from a location .
54	Get the keys from the cache .
55	Set PHPsec constants
56	Fetches an access token by code
57	Gets the access token for the signed JWT .
58	Fetches an access token with the given refresh token .
59	Performs the authentication .
60	Check if access token is expired
61	Verify id token
62	Add a scope
63	Execute REST request
64	Set auth config
65	Create OAuth2 service .
66	returns the number of retries for a given error code
67	Gets the next chunk .
68	Parse HTTP response body
69	Get data type
70	Combine a list of values
71	Get the value of the parameter .
72	Execute the given request .
73	Decode HTTP response .
74	Recursively map data types to objects
75	Returns the object as a simple object .
76	Get a simple value
77	Get mapped name
78	Determine if the given value is an associative array .
79	Builds a new AuthHandler
80	Find the user defined config
81	Define core constants
82	Set the state of the prepared statement .
83	This method is called when an exception is thrown .
84	Get the queries .
85	Register global globals
86	Get all options .
87	Add an option .
88	Delete an option
89	Add placeholder .
90	Set default namespace
91	Set default controller name
92	Set default method .
93	Discover routes .
94	Set default placeholder .
95	Get the routes for the given verb .
96	Get route options
97	Add a route to the collection .
98	Add a redirect .
99	Determine if the given route is a redirect .
100	Get the redirect code for a given route .
101	Add a route to the collection .
102	Adds an OPTIONS route .
103	Add a route to the collection .
104	Reverse route
105	Determine the current subdomain .
106	Reset routes .
107	Default error handler
108	Shutdown handler
109	Determine the view .
110	Render an error .
111	Collect vars .
112	Determine the error status code .
113	Convert memory to human readable format .
114	Highlight a file .
115	Checks if a string is alphanumeric
116	Check if a string matches a given pattern .
117	Validate email address .
118	Validate email addresses .
119	Check if a string is a valid URL .
120	Check if string is valid date
121	Create a new instance for the move failed .
122	Validates a credit card number
123	Check if Luhn number is valid
124	Move a file .
125	Move the Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \ Zend \
126	Move kint .
127	Initializes the session .
128	Configure session ID length
129	Init session variables
130	Set session data
131	Get session data
132	Push an item to a key .
133	Remove item from session
134	Sets flashdata .
135	Get flash data
136	Mark data as flashdata
137	Get flash keys
138	Sets a temporary data
139	Get temporary data
140	Mark data as temporary
141	Unmark a temporary variable
142	Get temporary keys
143	Set the session cookie
144	Checks if a token is available .
145	Guess the mime type based on the extension .
146	Guess the extension based on a given type .
147	Redirect to given uri
148	Redirect to a route
149	Redirect back to previous page
150	Flash a message to the session .
151	Run the filters .
152	Initialize the instance .
153	Enable a filter .
154	Get the specified argument .
155	Formats an object
156	Send the log .
157	Detect the locale based on the configuration .
158	Sets the locale .
159	Check if https is secure
160	Get the body as an array .
161	Returns a list of objects
162	Fetch post data
163	Get post data
164	Get post data
165	Get cookie data
166	Get all files .
167	Returns a file object .
168	Detect the URI
169	Detect server path
170	Negotiates the HTTP request .
171	Parse the request URI
172	Build the DSN
173	Get formatter for given mime type .
174	Run before the request .
175	Run the after event .
176	Resize image .
177	Crop image .
178	Returns the version of the image .
179	Get the resource path
180	Adds a foreign key .
181	Drop a foreign key constraint
182	Parse unsigned attribute .
183	Protected attribute default
184	Process primary keys
185	Process foreign keys .
186	Sets the locale .
187	Get a single line .
188	Format a message .
189	Require a file .
190	Add a base URI to the report .
191	Add an image src option
192	Add media src option
193	Add a manifest src option .
194	Add an object s src option
195	Adds a plugin type option .
196	Add a sandbox option .
197	Add script src option
198	Add style src option
199	Adds an option .
200	Generate nonce attributes
201	Build the response headers
202	Get the title .
203	Collects the logs .
204	Prepare query params
205	Determine the cell class and method .
206	Get result .
207	Get a custom result object
208	Returns the result as an array .
209	Get result object
210	Get a single row
211	Get custom row object
212	Get a single row from the result set .
213	Get the row object .
214	Set row data
215	Get first row
216	Get last row .
217	Get next row .
218	Returns an unbuffered row .
219	Matches a list of acceptable types .
220	Checks if the given parameters match the list of acceptable parameters .
221	Runs the CLI .
222	Show the header
223	Returns links for a group .
224	Generate links .
225	Stores a page .
226	Sets the file path .
227	Returns the page count .
228	Returns the current page .
229	Returns true if group has more than one group .
230	Returns the last page .
231	Returns the URI for a page .
232	Returns the next page URI .
233	Returns the previous page URI .
234	Returns the number of items per group .
235	Get pagination details .
236	Create a group .
237	Returns the number of years .
238	Returns the number of months .
239	Get the number of weeks .
240	Returns the number of days in the current time .
241	Returns the number of hours in the current day .
242	Returns the number of minutes .
243	Returns the difference between this date .
244	Humanize the current time .
245	Load a database connection
246	Load forge class
247	Check if a property has changed .
248	Map a property to the datamap .
249	Mutate the given value .
250	Cast value as a JSON object
251	Determine if the given engine should be discovered .
252	Find all records .
253	Get first row
254	Save data to database
255	Convert class to array
256	Insert a record .
257	Insert multiple rows into the database .
258	Get builder instance .
259	Remove fields from data array .
260	Clean validation rules .
261	Get validation rules .
262	Count the results .
263	Set authentication .
264	Sets form parameters .
265	Parses request options
266	Get the request method .
267	Send a request .
268	Apply request headers .
269	Set the response headers
270	Sends the request .
271	Sets the current version to the specified target version .
272	Find migrations .
273	Check migrations .
274	Returns the history for the current namespace .
275	Get migration name .
276	Returns the version of the database .
277	Add migration history .
278	Remove migration history .
279	Create the database table
280	Validate a value .
281	Set the input data .
282	Sets validation rule .
283	Get rule group
284	Set rule group
285	Load rule sets .
286	Sets an error for a field .
287	Get error message .
288	Split rules into array .
289	Reset the data .
290	Convert array to XML
291	Clean file names .
292	Sets the URI .
293	Get user info
294	Get the query string
295	Returns the URI segment at the given index .
296	Set a URI segment .
297	Creates a URI string .
298	Sets the authority part of the URL .
299	Sets the scheme
300	Sets the port number .
301	Sets the path .
302	Refresh the path .
303	Sets the query string .
304	Decode the value
305	Add a query parameter .
306	keep the query parameters
307	Filters a path .
308	Apply url parts
309	Resolves a relative URI
310	Merges two URI paths .
311	Remove dot segments from path .
312	Append a value to the list
313	Prepend a value to the beginning of the list .
314	Get the previous page .
315	Get the next uri .
316	Get the first page .
317	Get the last uri .
318	Returns the current URI .
319	Starts a timer .
320	Stop a timer .
321	Get the elapsed time for a timer .
322	Get all timers .
323	Add table alias
324	Execute a SQL query
325	Performs a simple SQL query .
326	Creates a new database table .
327	Prepare a database query .
328	Escape an item .
329	Call a function .
330	Lists all tables in the database .
331	Check if a table exists
332	Check if field exists in table
333	Get table field data
334	Get index data .
335	Get the table s foreign key data .
336	Get an environment variable .
337	Register properties and their values
338	Get item from cache
339	Write data to a file .
340	Get information about a directory
341	Get file info
342	Initialize services .
343	Runs the application .
344	Handles the request .
345	Starts the benchmark .
346	Get the response object
347	Force SSL access .
348	Displays the page cache
349	Save page to cache
350	Generate cache name .
351	Display benchmark metrics .
352	Tries to route the given routes .
353	Start the controller .
354	Create the controller
355	Run controller .
356	Gather the output .
357	Stores the previous URL .
358	Hook the request method .
359	Get a cache handler .
360	Create alias from table name .
361	Appends WHERE NOT IN condition .
362	Create where in clause
363	Creates a LIKE statement .
364	Begins where statement .
365	End where group .
366	Sets the offset .
367	Set the value of a key .
368	Returns the compiled select query .
369	Compiles the final query .
370	Count all rows in this table
371	Count all results
372	Creates an insert query
373	Returns the final insert query
374	Returns the final update query
375	Get the final delete query .
376	Decrement column value
377	Compile select statement
378	Compile where having clause .
379	Compile Group By
380	Compile ORDER BY .
381	Get the operator for a string .
382	Render the debug timeline data .
383	Collect timeline data .
384	Collect var data .
385	Rounds a number to a given number
386	Copy image to specified target name
387	Get image properties
388	Releases the lock .
389	Attach the honeypot to the response .
390	Prepare template .
391	Fetch an object from the database .
392	Convert an array of columns into an array .
393	Clears the table .
394	Set fields from DB result
395	Set data from array
396	Set path .
397	Get the error string .
398	Stores the uploaded file .
399	Checks to see if a file can be uploaded
400	Check if file is an image
401	Check if a file is in the request
402	Validate the max dimensions of an image
403	Fetches values for a given method .
404	Populate global variables .
405	Run the version .
406	Set data from a table .
407	Creates the database
408	Modify column .
409	Create the table
410	Copy the data to the temp table
411	Formats the given fields .
412	Format keys .
413	Drop index if exists .
414	Set CSRF cookie
415	Get the CSRF hash .
416	Returns a new instance with the current time .
417	Creates a Time object from a string .
418	Creates instance for today .
419	Returns a copy of yesterday .
420	Returns a copy of tomorrow .
421	Create a new Time object from date .
422	Creates a Carbon instance from time values .
423	Creates a time object .
424	Create a new Time object from a format string .
425	Creates a new Time instance from a timestamp .
426	Creates instance from date time .
427	Convert DateTime to DateTime .
428	Get the age in seconds .
429	Returns whether this date is daylight saving .
430	Set the month .
431	Set the day of the date .
432	Set the minute value .
433	Sets the second minute .
434	Sets a time value .
435	Sets the timestamp .
436	Checks if the supplied time is equal to the given date .
437	Tells whether two DateTime is equal to another .
438	Get a DateTime object .
439	Callback to handle JS characters
440	Callback to replace CSS characters .
441	Convert string to UTF - 8 .
442	Convert a string from UTF - 8 to UTF - 8 .
443	Returns the uploaded file .
444	Create an uploaded file object
445	Get the syntax for a value .
446	Set the binary .
447	Sets the file path .
448	Get the content length .
449	Set the content type by mime type
450	Get download file name
451	Returns the content disposition
452	Build the response headers
453	Send the download request .
454	Send body by file path .
455	Remap method .
456	Run a command .
457	Create command list
458	Connect to a database .
459	Create a seeder instance .
460	Determine if the given parameters should be used .
461	Add a test .
462	Run a set of tests .
463	Get the report .
464	Set the original query string .
465	Returns the compiled query string .
466	Get the start time .
467	Returns the duration in seconds .
468	Set the error code
469	Swaps the prefix of the query string .
470	Compile the bindings .
471	Load helpers .
472	Register the autoloader .
473	Add a namespace
474	Get a namespace
475	Require a file .
476	Sanitizes a filename .
477	Discover composer prefixes .
478	Modify date by adjustment
479	Creates an excerpt .
480	Sanitizes a value .
481	Resolve nested variables .
482	Set the database name to use .
483	Execute a SQL query
484	Prepare query .
485	Return an error message .
486	Execute a SQL query
487	Get all field names for a table
488	Get cache handler
489	Returns a CLI request instance .
490	Returns a cURL request instance .
491	Returns a honeypot instance .
492	Return a language object .
493	Returns an instance of the Logger
494	Returns aNegotiator instance .
495	Returns an instance of Parser .
496	Returns a new incoming request instance .
497	Return a new Response instance .
498	Returns a RedirectResponse instance .
499	Return a router instance .
500	Returns the Security instance .
501	Get a URI instance .
502	Returns a new Validation instance .
503	Describe a list of commands .
504	Pad the title .
505	Get CSV from a result set .
506	Get the xml from a query
507	Call a command
508	Run a seeder .
509	Check if a value is in a list .
510	Is the string less than equal to the given string?
511	Determine if the given fields match the given data .
512	Determine if the given fields are not present .
513	Validate request path
514	Sets the directory .
515	Set the controller .
516	Set default controller
517	Get file size
518	Moves the file to a new location .
519	Get the destination path
520	Collects a query
521	Formats timeline data .
522	Locate a file
523	Get the class name from a file .
524	Searches for namespaces .
525	Ensures the given path is a valid extension .
526	Find a fully qualified name from a path .
527	Returns the path to the legacy file .
528	Render a view .
529	Add an excerpt to a string .
530	Sets the data .
531	Sets a variable .
532	Render a section .
533	Include view .
534	Logs profiling data .
535	Reset the image .
536	Ensures the image resource is created .
537	Resizes the image .
538	Rotate image .
539	Flips the image .
540	Adds a text block .
541	Reorient the image .
542	Get image data .
543	Crops the image .
544	Run the CodeIgniter server .
545	Render a string .
546	Parses a variable into an associative array
547	Extracts nonoparse blocks from a template
548	Insert Noparse blocks .
549	Parses the given template and replaces it .
550	Set the left and right delimiter
551	Replaces a template with the given pattern .
552	Determine if the given key should be escaped .
553	Add a plugin .
554	Creates an image resource .
555	Get a specific header
556	Check if a header exists
557	Sets a header .
558	Remove a header .
559	Set the protocol version .
560	Get the header name .
561	Configures the session ID regex
562	Get the reason .
563	Set the link header
564	Sets the Content - Type header .
565	Get the body as JSON .
566	Get the body as XML .
567	Format the given content .
568	Set the cache control headers .
569	Sends the response .
570	Send the response headers .
571	Set a cookie
572	Check if a cookie exists .
573	Get a cookie by name .
574	Delete a cookie .
575	Send cookies .
576	Create a download response object .
577	Get an object
578	Create a new config instance
579	Get shared instance
580	Get an autoloader instance .
581	Get the Locator instance .
582	Reset the autoloader .
583	Inject a mock .
584	Discover services by name
585	Get input from STDIN
586	Create a prompt for a field .
587	Validate a value against a set of rules
588	Prints text to STDOUT .
589	Write an error to STDERR .
590	Wait for the given number of seconds .
591	Colorize a text .
592	Wrap a string
593	Get option value
594	Generate a table
595	Respond with data .
596	Return a failed response .
597	Respond created event
598	Return deleted response
599	Thrown when an unauthorized response fails .
600	Fail a server error .
601	Validate CSRF .
602	Initialize events .
603	Returns an array of registered listeners .
604	Remove a listener from an event .
605	Is the referrer?
606	Set the platform .
607	Set browser .
608	Set robots .
609	Set the mobile property .
610	Protected attribute type
611	Initialize config .
612	Display a QR code .
613	Init qrcode style
614	Format the content .
615	The heartbeat method .
616	Handle check sync status .
617	Log message .
618	Returns the UUID of the server .
619	Shows the QR code .
620	Wait for the login to be logged in .
621	Gets the login .
622	Save the server .
623	Before init callback .
624	Trigger after init success .
625	Send status notification .
626	Download a resource .
627	Get the content of a resource .
628	Auto - download the message .
629	Check sync status .
630	Synchronize server .
631	Generate the sync key .
632	Write a string to the log .
633	Log message .
634	Send a message to a user .
635	Fetches all contacts .
636	Stores the contact list .
637	Fetches the members of the group .
638	Store the members in the database .
639	Report an exception .
640	Throw the fatal exception .
641	Validate the key
642	Splits the JWT string into an array .
643	Parse the given header .
644	Parse the list of claims .
645	Parse a signature .
646	Negotiate language .
647	Get the list of matching languages .
648	Cache routes per locale .
649	Build the route cache file .
650	Register Laravel bindings .
651	Register commands .
652	Sets the current locale .
653	Returns the URL for the given route name .
654	Get the supported locales .
655	Get locale order .
656	Get locale direction
657	Get the current locale .
658	Get the current locale .
659	Check if a locale is in supported locales .
660	Get the route name from the given path .
661	Find a translated route by path .
662	Find a translated route by url and attributes .
663	Create a URL from a URI .
664	Normalize attributes .
665	Load cached routes .
666	Makes the path for a locale .
667	Encode message set .
668	Encode produce partition data .
669	Encode produce topic data .
670	Decode a produce topic partition pair .
671	Produce a partition pair .
672	Decode a message set .
673	Decode a message .
674	Creates a socket .
675	Selects multiple sockets .
676	Unpacks a set of bytes .
677	Check length of given string
678	Returns true if the system is little - endian .
679	Get API version based on API key .
680	Returns the API name for the given API identifier .
681	Add a route to before routes .
682	Match a route .
683	Mount a route to another one .
684	Get the request method .
685	Get server base path
686	Add a route to the collection
687	Get the route matching the given request .
688	Get the current route .
689	Match url against pattern
690	Run a filter .
691	Get event by name
692	Clears an event .
693	Execute multiple filters
694	Execute a callback .
695	Call a function .
696	Invoke a method on a class
697	Initialize the object
698	Get request body
699	Get request method
700	Get proxy IP address
701	Parse URL query string
702	Get or set the status code .
703	Setter for header
704	Sets the cache headers
705	Send the response .
706	Initialize the router
707	Handles PHP errors .
708	Handle an exception .
709	Register a new framework method .
710	Register a new framework method .
711	Get a single view variable
712	Remove a value from the view
713	Start the application .
714	Stop output .
715	Register a route .
716	Halt action .
717	Send 500 error .
718	Redirect to the specified URL .
719	JSON response .
720	JSONP callback .
721	Set ETag header
722	Set Last - Modified header
723	Register a new instance
724	Load an object
725	Returns the named instance .
726	Create a new instance of a class
727	Loads a class
728	Add a directory
729	Fetches the rendered template .
730	Get template path .
731	Determines whether a graph is cyclic .
732	Get the average height of the graph .
733	Collapse nested array
734	Fetches a list of files .
735	Traverses a node
736	Get all root nodes
737	Get composer lock installed .
738	Advances the progress bar .
739	Returns true if the stream is ANSI .
740	Processes no parameters .
741	Processes token .
742	Initializes this instance .
743	Add a fixable message .
744	Merge a custom array .
745	Get token pointer on line .
746	Is this token an assignment?
747	Determine if the given token is a namespace .
748	Test whether a token is sanitized
749	Determine if the given token is a safe cast .
750	Get array keys .
751	Get array access key
752	Is this token a comparison?
753	Determine if a function is in an array comparison .
754	Get the use type .
755	Get interpolated variables
756	Determine if a function call has parameters .
757	Returns the number of parameters for a function call .
758	Returns the parameter for a function call .
759	Finds the open array open and closing the function .
760	Determine the name of a namespace .
761	Get the name of a namespace .
762	Checks if the given token is a class constant .
763	Tests whether a token is a class property .
764	Determine if the given token is a valid scope .
765	Prepare the punctuation regex .
766	Transform a string
767	Transform a complex string into an array .
768	Get the list of deprecated classes
769	Process an anonymous tstring token .
770	Processes parameters .
771	Retrieve mispelled words .
772	Callback for callback
773	Set config data
774	Get tab width .
775	Process global variable declaration .
776	Add error .
777	Sets up groups
778	Determine if a token is a target .
779	Checks if a token is matched .
780	Processes variable variable .
781	Determine if a variable is prefixed or not .
782	Validates the prefixes .
783	Record a starting point of prefixes .
784	Sets up groups
785	Validate the alignment items .
786	Check if a parameter is a local stream .
787	Process variable in string .
788	Merge the whitelisted properties .
789	Ignore the token at the given index .
790	Get the indentation size .
791	Get the indentation string .
792	Add an array alignment error .
793	Fixes an alignment error .
794	Determine if a token is valid .
795	Compare two arguments .
796	This method is used to check if a text placeholder is present .
797	Determine if the given token is a target .
798	Returns the number of matched tokens .
799	Get a fully qualified class name .
800	Registers the list of tokens .
801	Execute the closure
802	Get a message from the queue .
803	Closes the broker .
804	Validates the namespace attribute .
805	Push job to queue .
806	Run the given timeout .
807	Execute a task
808	Handle a message .
809	Run the loop .
810	Reserve the job .
811	Move reservation to reserved time
812	Serialize the job .
813	Delete a reservation .
814	Run worker loop .
815	Handle a message .
816	Initializes the process .
817	Returns true if the process can continue .
818	Reserve a job .
819	Delete a job .
820	Parse the XML stream .
821	parse get elements
822	Parse inner tree
823	Reads text from the current node .
824	Parse the current element .
825	Parse the node attributes
826	Get the deserializer for the given element name .
827	Push a new context onto the stack .
828	Remove the context from the stack
829	Get a writer instance .
830	Parses an XML string .
831	Parses an XML string and returns the value .
832	Write a value to a root element
833	Map a value object to a class name .
834	Write a value object .
835	Parse a clark - annotation .
836	Deserialize XML from Reader .
837	Create instance from XML reader
838	Starts an XML element .
839	Write an element .
840	Write multiple attributes at once
841	Write an attribute .
842	Get the relations for a model .
843	Validate job name .
844	Validate command .
845	Create a shell job
846	Creates a closure which can be used to retrieve the trace context .
847	Finish the timer .
848	Returns the current span .
849	Convert the context to a span .
850	Record a trace .
851	Sets the name of the trace .
852	Adds a value to the trace .
853	Sets the remote endpoint .
854	Generate a new token .
855	Get a value from the storage
856	Get last key pair
857	Enforce the storage limit
858	Create sanitizer instance .
859	Set attributes on a tag node .
860	Get attribute value
861	Process default entity name .
862	Process the default menu item .
863	Get the type name for a given type .
864	Get form type options .
865	Initialize the entity .
866	Autocomplete action .
867	Lists all records .
868	Edit action .
869	Show entity .
870	New entity action
871	Deletes an entity .
872	Search action .
873	Handles batch action .
874	Updates an entity property .
875	Find all entities .
876	Create list query builder
877	Find entities by search criteria .
878	Creates a search query builder instance .
879	Creates a form builder for the given entity .
880	Get form options .
881	Creates an entity form .
882	Creates delete form .
883	Redirect to backend homepage .
884	Modify the controller name .
885	Normalize menu config .
886	Get entity configuration .
887	Check if action is enabled
888	Get action configuration .
889	Translates a plural message .
890	Create a Paginator instance .
891	Process config .
892	Initialize the request .
893	Find the current entity .
894	Get the attribute normalizer .
895	Processes entity properties .
896	Returns the default actions for the given view .
897	Process form errors .
898	Find entities by query string .
899	Process config files .
900	Normalize the entity config .
901	Get the unique entity name .
902	Normalize view config .
903	Merge config .
904	Create a query builder .
905	Determine if the field is a Doctrine association .
906	Process field config .
907	Get the list of fields to exclude .
908	Filters the fields list .
909	Run a shell command .
910	Delete operator .
911	Determines if a DDL statement is present .
912	Checks to see if a string is at the specified offset .
913	Read the length of a message .
914	Builds a progress callback .
915	Log an exception .
916	Get the type config
917	Get the index configuration .
918	Get all available providers
919	Returns the providers for the given index .
920	Returns a provider by index and type .
921	Sets sorting parameters .
922	Builds the index mapping .
923	Builds the index template .
924	Builds the type mapping .
925	Fixes the given properties
926	Log query .
927	Transform object to elastica document
928	Get total hits .
929	Returns an array with elasticsearch results
930	Delete template indexes
931	Returns the named index .
932	Returns a registered persister .
933	Populate an index .
934	Refresh the index .
935	Transforms an object into a document .
936	Transform nested objects to array
937	Normalize a value
938	Transforms an object to a document .
939	Get the entity query builder .
940	Returns the index template .
941	Reset all indexes .
942	Reset an index .
943	Reset index type .
944	Switch index alias
945	Loads the indexer .
946	Loads the type persistence .
947	Loads a service transformer .
948	Load object persister .
949	Loads the type pager provider .
950	Loads the type listener .
951	Get the Doctrine events for the given type .
952	Loads the type finder .
953	Load index manager .
954	Load index template manager .
955	Load a driver .
956	Load the serializer .
957	Create the default manager alias .
958	Get dynamic template node .
959	Returns the types node .
960	Get the id node .
961	Returns the source node .
962	Get the routing node .
963	Returns the parent node .
964	Get all configuration node
965	Adds the index configuration .
966	Adds the index templates section .
967	Transforms an array of Elastica objects into an array of objects .
968	Determine if an object can be indexed .
969	Build a callback for a given type .
970	Build the expression callback .
971	Get the callback for a specific type
972	Get the variable name for an object .
973	Set root name .
974	Switches an index alias .
975	Builds an alias update request .
976	Deletes the alias failed .
977	Closes an index .
978	Get an alias from the index .
979	Log query .
980	Occur on object persistence .
981	Post update .
982	Schedules entity for removal
983	Persists the scheduled objects .
984	Schedules an object for deletion .
985	Checks if an object is indexable .
986	Returns the repository for the given entity name .
987	Transforms an object .
988	Returns a repository for a given type name .
989	Make a hash client instance .
990	Register the hashids factory .
991	Verify if the given hash is valid .
992	Creates a GuzzleHttp \ ClientInterface instance .
993	Adds a cookie to the collection .
994	Adds cookies to the request .
995	Remove expired cookies .
996	Get the hash for a cookie .
997	Adds a header to the response .
998	Parse response headers .
999	Adds the entity to the request .
1000	Set the connection options .
1001	Get client nonce
1002	Returns the A1 hash .
1003	Returns the HA2 hash .
1004	Get digest header
1005	Get the response .
1006	Get the qop attribute
1007	Returns the hash for the given value .
1008	Parse the authentication info header .
1009	Parses the name value pairs .
1010	Parse the WWW authentication header .
1011	Set digest algorithm .
1012	Sets the HTTP method .
1013	Remove quotes from a string .
1014	Adds new parameters .
1015	Convert headers to Buzz headers .
1016	Convert headers to PSR - 7 headers .
1017	Sends an HTTP request .
1018	Sends a request to the queue .
1019	Execute the queued requests .
1020	Init cURL handle
1021	Clean up queue .
1022	Returns true if the request matches the given request .
1023	Check if the token has expired .
1024	Returns true if the cookie s domain matches the given domain .
1025	Returns true if the path matches the given path .
1026	Extracts attributes from a set - cookie header .
1027	Releases a curl handle .
1028	Prepares the cURL resource .
1029	Set cURL options based on request .
1030	Send a request and return the response .
1031	Records an entry .
1032	Creates the image .
1033	Add a cover
1034	Add a TOC .
1035	Creates a pdf file
1036	Ensures that the input is a valid URL .
1037	Create Guzzle client instance .
1038	Create the middleware stack
1039	Creates a PSR - 7 request .
1040	Sends a request asynchronously .
1041	Generates request options .
1042	Send context asynchronously
1043	Throws an exception if an error code is met
1044	Adds a post parameter to an array .
1045	Add metadata to the headers array .
1046	Add location header to response .
1047	Validates entity properties .
1048	Get property value .
1049	Sets a property value .
1050	Sets a property .
1051	Add a new property .
1052	Checks if this object is valid .
1053	Creates GetTableResult object from body
1054	Compute the signature
1055	Get the authorization header
1056	Computes the canonicalized headers .
1057	Computes canonicalized resource for table name .
1058	Compute canonicalized resource
1059	Serializes this object to an XML string .
1060	Creates a SignedIdentifier object from parsed XML .
1061	Adds a signed identifier .
1062	Remove a signed identifier .
1063	Sets the operations that should be executed .
1064	Add a batch operation .
1065	Adds an insert operation to a table .
1066	Adds a delete entity operation to the database .
1067	Creates CopyFileResult from response headers .
1068	Creates a Message object from the list messages .
1069	Creates a QueueMessage object from the parsed response .
1070	Creates a QueueMessage object from the response .
1071	Initializes the configuration .
1072	Creates a StorageServiceSettings object .
1073	Gets the development storage account .
1074	Gets the service endpoint URL .
1075	Creates storage service settings .
1076	Creates a StorageAccount object from a connection string .
1077	Creates a StorageServiceSettings object from a tokenized string .
1078	Encode a MimePart entity .
1079	Decode a multipart multipart message into an array .
1080	Creates ListSharesResult object from parsed response .
1081	Sets the list of shares .
1082	Retry a request .
1083	Applies two filters .
1084	Applies an OR filter .
1085	Applies equals operator .
1086	Applies a BETWEEN filter .
1087	Applies BETWEEN filter to the left .
1088	Applies BETWEEN operator to the left .
1089	Applies less filter to the left .
1090	Applies less filter to the left .
1091	Set the location .
1092	Unserializes the given string .
1093	Creates a PeekMessagesResult object from parsed response .
1094	Creates a GetEntityResult object from a serialized string .
1095	Creates the operation contexts for the given operations .
1096	Creates a batch operation context .
1097	Creates a batch request body .
1098	Constructs a delete entity context .
1099	Constructs a put or update entity context .
1100	Constructs a new insert entity context .
1101	Returns the entity path .
1102	Creates or updates an entity .
1103	Adds optional query to the query .
1104	Encode an array of values .
1105	Fetches all tables in the database .
1106	Creates a table .
1107	Creates a new table .
1108	Gets a table .
1109	Gets the details of a table .
1110	Deletes a table .
1111	Deletes a table .
1112	Queries entities in a table .
1113	Insert or update an entity
1114	Insert or update an entity .
1115	Insert or replace an entity .
1116	Insert or update an entity .
1117	Update entity in table
1118	Updates an entity in a table .
1119	Merge two entities .
1120	Merge an entity into a table .
1121	Deletes an entity .
1122	Deletes an entity .
1123	Gets a single entity .
1124	Gets entity asynchronously .
1125	Performs a batch operation .
1126	Executes a batch of operations .
1127	Creates ListDirectDirectoriesResult object from parsed response .
1128	Sets the directories .
1129	Sets the files .
1130	Creates a new Directory entity from parsed response body .
1131	Creates update entity result .
1132	Sets the query parameters .
1133	Sets the list of status codes .
1134	Removes a header .
1135	Adds a history entry to the history .
1136	Append new entry to file
1137	Creates a new QueryTablesResult object from an array of headers .
1138	Creates ListMessagesResult object from parsed response .
1139	Sets the queue messages .
1140	Initializes the connection string sources .
1141	Checks if a string is a valid hostname .
1142	Checks if a configuration URI is valid .
1143	Checks if a method exists .
1144	Checks if value is a date string .
1145	Checks whether a key exists in an array .
1146	Returns the range as a string .
1147	Lists all queues .
1148	Clear messages in queue
1149	Creates a new message .
1150	Creates a queue message .
1151	Creates a queue
1152	Creates a queue .
1153	Delete message from queue
1154	Deletes a message in the queue .
1155	Deletes a queue
1156	Deletes a queue asynchronously .
1157	Gets metadata about a queue
1158	Gets metadata for a queue .
1159	Lists messages in queue .
1160	Lists all messages in a queue .
1161	Peeks messages in queue .
1162	Peek messages .
1163	Generates an account shared access token .
1164	Validates a signed service .
1165	Validates a signed resource type .
1166	Validates and sanitized permissions .
1167	Validates and sanitizes a signed protocol .
1168	Validates a string with the given values .
1169	Generate canonical resource
1170	Parses an error message .
1171	Gets the request ID .
1172	Get the date of the response .
1173	Sets the middlewares .
1174	Validates the given middleware .
1175	Parse connection string .
1176	Creates a RuntimeException .
1177	Extracts the key from the connection string .
1178	Extracts the string from the string .
1179	Skips an operator character .
1180	Creates a GetShareAclResult object .
1181	Adds headers to the request .
1182	Creates a setting requirement .
1183	Creates a new setting with specified valid values .
1184	Determine if the given settings match the given constraints .
1185	Sets the next row key .
1186	Sets the next partition key .
1187	Processes the type .
1188	Validates a value against a type .
1189	Serialize a value
1190	Serialize a query value
1191	Unserialize a query value .
1192	Creates new ServiceProperties object from parsed response .
1193	Gets the capability array .
1194	Initializes the environment
1195	Parses table entries .
1196	Get entity properties .
1197	Parses response body .
1198	Sets the start date .
1199	Validate permission .
1200	Create a relative path
1201	Gets the share properties asynchronously .
1202	Set share properties asynchronously .
1203	Lists all share shares .
1204	Creates a new share .
1205	Creates a share .
1206	Delete a share .
1207	Gets the properties of a share .
1208	Set share properties
1209	Set share properties asynchronously .
1210	Gets metadata about a share .
1211	Set metadata for a share .
1212	Sets metadata for a share .
1213	Set a share ACL .
1214	Set share ACL for a share .
1215	Lists all directories in a project .
1216	Gets a list of directories and files in a project .
1217	Creates a directory under a share .
1218	Creates a directory .
1219	Deletes a directory .
1220	Get directory properties
1221	Gets the directory properties asynchronously .
1222	Get directory metadata
1223	Set directory metadata
1224	Creates a file .
1225	Creates a file in a project .
1226	Deletes a file .
1227	Deletes a file asynchronously .
1228	Gets a file .
1229	Gets a file asynchronously .
1230	Get file properties
1231	Gets file properties asynchronously .
1232	Sets the properties of a file .
1233	Set file properties asynchronously .
1234	Get file metadata
1235	Update file metadata .
1236	Sets a file metadata asynchronously .
1237	Write a file in a range .
1238	Updates a file in the specified range .
1239	Creates a file from a file content .
1240	Creates a file from a content .
1241	Clears a file range .
1242	Clears a file range .
1243	List files in a folder .
1244	Gets a list of files in a folder .
1245	Abort a copy of a file .
1246	Abort a file .
1247	Set the type .
1248	Adds a parameter to the batch operation .
1249	Creates an array of Response objects
1250	Compares two headers .
1251	Creates a BatchResult object .
1252	Invoke attributes on an object .
1253	Serializes an array into XML .
1254	Creates a new instance from parsed response .
1255	Gets service properties asynchronously .
1256	Sets the properties of the service .
1257	Sets service properties asynchronously .
1258	Gets service stats asynchronously .
1259	Creates ListQueuesResult object from parsed response .
1260	Sets the list of queues
1261	Tries to get secondary endpoint from the primary endpoint .
1262	Serialize an array
1263	Format an object to a boolean .
1264	Converts a date to a DateTime object .
1265	Convert a DateTimeInterface to a ISO 8601 date .
1266	Convert a value to a DateTime object
1267	Convert a number to decimal .
1268	Checks whether a string is all zero
1269	Append a delimiter to a string .
1270	Checks if the request is sent to the secondary URI .
1271	Get location location from response headers .
1272	Calculates the MD5 hash of a content .
1273	Validates resource type .
1274	Creates a UpdateMessageResult object from an array of headers .
1275	Creates a new Buffer instance .
1276	Creates a retry decider for a request .
1277	Default retry Decry Decider
1278	Adds optional query parameter .
1279	Adds optional header .
1280	Creates a GetFileResult object .
1281	Serialize headers .
1282	Serialize a request exception .
1283	Creates a CreateMessageResult object from parsed response .
1284	Creates an insert entity result .
1285	Creates a new QueryEntitiesResult object from response headers .
1286	Format the headers .
1287	Creates File from parsed response body .
1288	Apply a handler to the stack .
1289	Get available includes .
1290	Call include method
1291	Resolve includes .
1292	Set error code
1293	Add data to the view .
1294	Sets the serializer .
1295	Get the output .
1296	Set the resource .
1297	Set the MongoDB cursor .
1298	Set paginator .
1299	Add eager loaded relations .
1300	Specify relations to be removed .
1301	Specify fields to be included .
1302	Set the serializer .
1303	Transform the resource .
1304	Prepare relations .
1305	Eager load relations .
1306	Parse the paginator .
1307	Convert cursor to array .
1308	Merge the included data .
1309	Register a transformable resource .
1310	Resolve transformable data .
1311	Resolve a transformable item .
1312	Resolve a transformer .
1313	Render the exception .
1314	Make an error message .
1315	Make data object .
1316	Parse the given options .
1317	Parse fieldsets .
1318	Parse fieldset .
1319	Resolves child includes .
1320	Registers a new error .
1321	Resolve the error message .
1322	Clean input data .
1323	Register a transformable transformer .
1324	Resolve transformer from data .
1325	Resolve a transformer .
1326	Register Laravel bindings .
1327	Register Lumen bindings .
1328	Decorate the response factory .
1329	Register serializer bindings .
1330	Register the error bindings .
1331	Register Fractal bindings .
1332	Register the transformer bindings .
1333	Register transformations bindings .
1334	Boot Laravel application .
1335	Set collection data
1336	Formats error data
1337	Returns a list of relations .
1338	Returns default relations .
1339	Extract the relations .
1340	Extract the relations from a relation .
1341	Wrap nested relations .
1342	Apply query constraints .
1343	Resolve query constraint .
1344	Resolve the relation .
1345	Get the mapped transformers .
1346	Create a resource instance .
1347	Include resource .
1348	Include a resource from a model .
1349	Determine if the given data should be cached .
1350	Create a resource object .
1351	Makes a resource object from a resource .
1352	Instantiate a resource .
1353	Determine if the given data should be created .
1354	Resolve the resource key .
1355	Set the decorated response factory .
1356	Return the output .
1357	Normalize data .
1358	Normalize a relation .
1359	Add a resource to the response .
1360	Convert an exception to a callable .
1361	Convert default exception exceptions .
1362	Render the exception .
1363	Make transform .
1364	Configures the terminal .
1365	Adds items to the list .
1366	Sets the selected items .
1367	Select first item
1368	Add a custom control mappings .
1369	Remove custom control mappings .
1370	Displays the cursor .
1371	Get the selected item .
1372	Execute the select action .
1373	Redraw the terminal .
1374	Draws the menu .
1375	Draws a single menu item .
1376	Close the terminal .
1377	Set default selected item
1378	Returns true if the given index can be selected .
1379	Sets the index of the selected item .
1380	Returns the selected item .
1381	Wordwrap a string
1382	Generate the set code
1383	Calculates the content width
1384	Returns the right padding
1385	Set border width
1386	Displays the menu .
1387	Calculate the coordinates of the dialogue .
1388	Write an empty row
1389	Writes text to the terminal .
1390	Sets article text .
1391	Calculate art length .
1392	Displays the menu .
1393	Get a connection instance .
1394	Create a new connection instance .
1395	Get elasticsearch config .
1396	compress request body
1397	Check if a key is set
1398	Add an array of arguments
1399	Set the arguments for the command
1400	Set multiple options at once
1401	Add rules to the rule .
1402	Returns the options as a string .
1403	Convert options to an array .
1404	Convert options to JSON string
1405	Convert options to XML .
1406	Get option value
1407	get usage message
1408	Sets aliases for the command .
1409	Sets help .
1410	Parses the command line arguments
1411	Parse the command option cluster .
1412	Parses a single option
1413	Add rules to rule map
1414	Add rules to Zend_Zend_Mode_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Gend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_Zend_
1415	Generate the OAuth header .
1416	Get base string
1417	Prepare the HTTP method .
1418	Generate a nonce
1419	Append the OAuth parameters to the query .
1420	Returns the query as a string
1421	Create a new http client
1422	Get the location of the log file .
1423	Log request to platform .
1424	Returns true if the given operation is allowed for the given operation .
1425	Prepare class methods metadata
1426	convert wsdl to xml
1427	Copies a file to the public directory .
1428	Cast to string value
1429	Reads the IppConfiguration from a file
1430	Initialize the operation control rules
1431	Populate entities with special attributes
1432	Initialize the OAuth settings
1433	Initialize request and compression format
1434	Init Base Url
1435	Get entity by key
1436	Checks if a string is a valid XML string .
1437	Verify that the configuration is valid .
1438	Load webhooks class names and return them
1439	Checks if a given class name is a valid webhooks class name .
1440	Returns an associative array of options for the SOAP request .
1441	Validate the URN
1442	Add a SOAP function
1443	Set the class name of the SOAP server
1444	Set the SOAP object
1445	Get the list of functions that are defined in the class .
1446	Set the persistence mode
1447	Get Soap Server
1448	Handles the SOAP request .
1449	Deregister a fault exception
1450	Return a SOAP Fault
1451	Handle PHP errors .
1452	Get the access token .
1453	Get the URL for the authorization code .
1454	Refresh an access token .
1455	Migrate OAuth 2
1456	Parse a new OAuth2 access token
1457	Check if the token returned is empty .
1458	Generate the authorization header
1459	Constructs the request header
1460	Check the result .
1461	Returns the message for a given JSON error code .
1462	Convert an object to a domain entity
1463	Serialize an entity
1464	Remove null properties
1465	Add a complex type .
1466	Get the WSDL
1467	Adds bindings to the WSDL
1468	Short description of method addPortType
1469	Add types to the class
1470	Add binding operations
1471	Add port operations to the WSDL .
1472	Checks if a type is a local type
1473	Adds services to the WSDL
1474	Get target namespace
1475	Get namespaces and their namespaces
1476	Saves the classes to a directory
1477	Load includes from XML .
1478	Get the XSL document .
1479	Save PHP files to a directory
1480	Convert a namespace to a PHP string .
1481	Set base URL
1482	Get the expiration period for the refresh token .
1483	Get the validation period for the access token .
1484	Get the refresh token .
1485	Get the access token
1486	Update the access token .
1487	Get the post xml from an arbitrary entity .
1488	Creates a PhoObject from XML string
1489	Parse the response object from the response .
1490	Set an option on the curl instance .
1491	Get the version of the TLS 1 .
1492	Default exception handler
1493	Verify variable type
1494	Generate Object Names
1495	Complete a property
1496	Unmarshall an XML object into a new instance .
1497	Get Serializer instance
1498	Get the compressor based on the response context
1499	Get the Logger instance for the current request
1500	Connects a composite type to the composite type map
1501	Get the default strategy
1502	Get the strategy for a complex type
1503	Add a complex type
1504	Make reflection class
1505	Populate model comments
1506	Create a new instance .
1507	Process property values
1508	Creates a new model instance .
1509	Determine if a value is a morhing entity .
1510	Process property value .
1511	Get entity from model .
1512	Updates settings for other services .
1513	Setup the RestHandler
1514	Set the path to the log file .
1515	Change the minor version of the service context .
1516	Disable log .
1517	Enable log .
1518	Sets the client name
1519	Configure data service
1520	Configures the OAuth2 login helper
1521	Update OAuth2 access token
1522	Sets up the serializer
1523	Update an existing customer
1524	Creates a new tax .
1525	Deletes an entity .
1526	Implements upload method
1527	Sends an email to a customer
1528	Queries a company
1529	Append pagination info to the query .
1530	Finds all companies in the database .
1531	Cancels a list of entities
1532	Execute object serializer
1533	Init post request
1534	Get request parameters
1535	Fix tax service payload .
1536	Get the export file name for an entity
1537	Check if the entity is allowed to perform the operation
1538	Creates a new batch
1539	Convert a string to a timestamp
1540	Check if a timestamp is valid
1541	Verify if a value is changed since a unix timestamp
1542	Get company info
1543	Returns an array of validation rules for the QuickBooks API .
1544	Get access token from settings array
1545	Get Refresh Token from settings array
1546	Get the redirect URL
1547	Save uploaded file
1548	Generate a unique file name .
1549	Generate error message from OAuth message
1550	Parse the response message and set the error message
1551	Check if the error body is in standard format
1552	Set the Response Body
1553	Parse the response to an intiResponse
1554	Set the Fault Handler
1555	Set Response Headers
1556	Set the content type
1557	Set intuit Tid
1558	Get the application menu
1559	Reconnect to the server .
1560	Set the URI
1561	Set the complex type
1562	Add an operation to a binding operation
1563	Add a documentation node .
1564	Add a type to the WSDL .
1565	Add a type
1566	Dump the document to a file .
1567	Create the schema section .
1568	Configure an object from an array
1569	Check if the given settings are valid .
1570	Returns the base URL for the specified service type .
1571	Switch to XML format .
1572	Switch to JSON format
1573	Disable log .
1574	Set new log location
1575	Update the OAuth2 access token
1576	Get class properties
1577	Get result .
1578	Set the SOAP URI
1579	Get the URI for the current request
1580	Returns the request URI without parameters .
1581	Sets the complex type
1582	Set SOAP class
1583	Add a function to the WSDL
1584	Dumps the WSDL to a file .
1585	Update the service context .
1586	Sends the request to the specified server .
1587	Make an OAuth1 call .
1588	Get the Authorization header for the request .
1589	Performs an OAuth call .
1590	Get the authorization header for an OAuth2 access token
1591	Logs an API response to the request .
1592	Log an API request to the browser .
1593	Parses XML to a DOMDocument .
1594	Reset the compressor
1595	Get the destination destination URL .
1596	Append the minor version to the request URI .
1597	Determine the HTTP method based on the request parameters
1598	Parse a URL into an array of parameters .
1599	Returns the accepted content type .
1600	Convert a query string to an associative array
1601	Verify the payload against a token
1602	Encrypt payload based on token
1603	Get a single batch response by id .
1604	Remove a batch item
1605	Convert array to message and code
1606	Creates an exception for the given fault
1607	Returns an associative array of options
1608	Set the style of the request
1609	Sets the encoding method used by the SOAP client .
1610	Set proxy port
1611	Set the HTTPS certificate to use .
1612	Set the stream context resource
1613	Sets the user agent
1614	Do the SOAP request .
1615	Initialize SOAP client object
1616	Add SOAP input header
1617	Returns the list of functions used by the WSDL .
1618	Get the list of types
1619	Returns the type name based on the nesting level
1620	Add an item to the schema
1621	Prepare the WSDL
1622	Add operation operations
1623	Add operation operations .
1624	Create a reference element .
1625	Create element with complex type
1626	Creates an element .
1627	Resolve a short namespace
1628	Parse doc comment
1629	Check if array is associative
1630	Get a webhooks event from a JSON payload .
1631	Verify the payload
1632	Check if key exists in complex list
1633	Returns a class method
1634	Creates an IPeferentType based on an array of data
1635	Get IPP ID from data
1636	Merge two objects
1637	Convert headers array to headers
1638	Set the SSL options for the curl option .
1639	Convert header array to headers
1640	Adds a warning to the stack .
1641	Resolves the configuration from the input .
1642	Set the tag name .
1643	Scope by tag name .
1644	Boot the trait for the model .
1645	Tag the model .
1646	Remove one or more tags .
1647	Add one tag .
1648	Remove one tag .
1649	Determine if the model has the given tag .
1650	Get records with all of the given tags .
1651	Scope to query for tags .
1652	Scope a query to only include records without tags .
1653	Scope the query to only include records that are not tagged .
1654	Rename a tag .
1655	Get the popular tags .
1656	Get the name of the related pivot table .
1657	Get the fully qualified foreign key name .
1658	Create new taggable alias
1659	Build an array of tags
1660	Get tag model keys .
1661	Makes a list of tags .
1662	Make tag array .
1663	Get all tags .
1664	Get all unused tags .
1665	Rename a tag .
1666	Get the fully qualified name of the tag .
1667	Get the name of the pivot table .
1668	Save compound parameter data
1669	Build the URL for the given parameters .
1670	Get single parameter payload
1671	Get payload for compound parameters .
1672	Add an index to a string .
1673	Get the response body .
1674	Get the full endpoint
1675	Send hit .
1676	Get the http client options .
1677	Returns the URL for the request .
1678	Checks if all required parameters are present .
1679	Sets the value of an action to the specified action .
1680	Set single parameter
1681	Adds an item to the collection .
1682	Get the parameter for a given method .
1683	Get index from method arguments
1684	Returns the full class name for the given parameter
1685	Make a POST request to Google Analytics .
1686	Parse request options .
1687	Get all items that are readable
1688	Add a supported brand .
1689	Sets the year parameter .
1690	Validates credit card number
1691	Get a masked number .
1692	Returns the name of the supported brand .
1693	Get a track by pattern
1694	Get first and last name from full name .
1695	Set billing name
1696	Set shipping name
1697	Get birthday .
1698	Sets the birthday of the person .
1699	Initialize the request .
1700	Set a request parameter .
1701	Sets the card .
1702	Returns the amount .
1703	Sets the amount .
1704	Sets the currency .
1705	Get the currency number .
1706	Returns the number of decimal places for the currency .
1707	Formats the given amount .
1708	Replaces the items .
1709	Validates redirect .
1710	Convert a string to camelCase
1711	Validate Luhn number
1712	Get the short name of the gateway .
1713	Get the gateway class name .
1714	Get a fixed query builder .
1715	Returns the parent metadata for a property .
1716	Get the pager for the given type .
1717	Get the parent alias for the given alias .
1718	Add IPP record .
1719	Find an item by ID
1720	Authenticate a user
1721	Set the parent application ID of the customer .
1722	set credit card information
1723	Returns the credit card info .
1724	Add a resource to a QTI record .
1725	Find an invoice by ID
1726	Sets the signature
1727	Handle 500 error .
1728	Implements hook callback .
1729	Check if a path is repeatable .
1730	Check if a path exists
1731	Reorder Paths .
1732	Call a function .
1733	Call static method
1734	Find a customer by name .
1735	Set the class application ID of the class .
1736	Returns the billing address .
1737	Set the ship method ID for the Shipment .
1738	Set the payment method ID of the payment method .
1739	Generate field schema .
1740	Get the child node at the given path
1741	Add child at path
1742	Get child nodes
1743	Remove an attribute
1744	Convert node to XML
1745	Convert to array
1746	helper function to add nested array paths
1747	Saves the current object to a file .
1748	Saves the root node as a JSON string .
1749	Casts a string to a certain length .
1750	Decode UTF8 string
1751	Parse a DSN
1752	Extracts requestID from XML .
1753	Parses the request ID and an action ID .
1754	Check a remote address
1755	Create a new user .
1756	Disable a user .
1757	Generate unique hash
1758	Determines if a database has a QuickBooks ID .
1759	Initialize a database driver
1760	Check if the database is initialized .
1761	Returns a list of all the constants that match the given filter .
1762	Returns a list of the defined actions .
1763	Escapes a string .
1764	Generate the codeIgniter configuration .
1765	Configure the Quickbooks .
1766	Add a customer request to the database .
1767	Add customer response
1768	Catch all errors
1769	Queue user processing .
1770	Enqueue an item
1771	Recursively deletes a user .
1772	Checks if a user is left
1773	Gets a queue report .
1774	Mark queue as processed .
1775	Log an error .
1776	Return the last error occured .
1777	Resolve a ticket .
1778	Checks if a ticket is valid
1779	Logout a ticket
1780	Perform authentication .
1781	Initializes the driver .
1782	Has this driver been initialized?
1783	Log a message
1784	Calls a hook
1785	Connect OAuth to the driver .
1786	Returns default config values
1787	Enqueue recurring events .
1788	Extracts the list of identifiers from the XML .
1789	Extracts the status code from a response .
1790	Extracts the status message from the given XML .
1791	Call a mapped function
1792	Call a specific hook .
1793	Handle an error .
1794	Add an item to the queue .
1795	Find an item by name
1796	Check if a string starts with a given string
1797	Performs a SQL query .
1798	Extracts the contents of a tag .
1799	Extract the attributes of a tag
1800	Encode a string .
1801	Decode a string
1802	Check if the application exists .
1803	Load an OAuth token .
1804	Handle the request .
1805	Get widget menu
1806	Map XML Schema to an array of tables
1807	Transform the query to a table
1808	Set a property value .
1809	Get an item from the collection
1810	Set full name type
1811	Set a boolean type
1812	Set a date type
1813	Get date type
1814	Remove an item from the collection
1815	Get the schema for a request
1816	Return the object as XML .
1817	Initializes the database table .
1818	Add a resource to a review .
1819	Get the user s name .
1820	Sets the name as first and last name .
1821	Determine sql defaults
1822	Get the status of a user .
1823	Delete a record .
1824	Reads a variable .
1825	Loads an XML document .
1826	Parse XML content .
1827	Add a query as an XML string .
1828	error handler for ECS
1829	Resolve a ticket ID .
1830	Write a config
1831	Read a configuration value from the database
1832	Authenticates a user .
1833	Get default username
1834	Login to Quickbook driver
1835	Check if a ticket is valid
1836	Log error message
1837	Recurue the requurue
1838	Recursively deletes a record
1839	Enqueue a queue .
1840	Check if a queue has been processed
1841	Get queue left
1842	Check if a queue has been processed
1843	Logs a message
1844	Perform an SQL query
1845	Get table fields
1846	Select rows from a table
1847	Update an object
1848	Enqueue interactive mode .
1849	Run a recurring task .
1850	Get the number of items in the queue .
1851	Returns the address part .
1852	Authenticate a user .
1853	Find a company by ID .
1854	Delete a customer .
1855	Send a request to the API .
1856	Sign on the request .
1857	Generate a new transaction ID
1858	Refund a credit card .
1859	Initialize the queue instance
1860	Returns an adapter for the given adapter
1861	Sets default options
1862	Sets the response headers
1863	Index action .
1864	Creates a request object
1865	Handles an HTTP request
1866	Apply a callback to the collection
1867	Performs a charge
1868	Get a specific charge
1869	Get a debit transaction
1870	Refund an order
1871	Store a credit card .
1872	Store a credit card from a token
1873	Get a credit card
1874	Get a credit card
1875	Delete a card
1876	Handles an error
1877	Perform an HTTP request .
1878	Map a user to a specific ID .
1879	Map a user to an application ID .
1880	Implement a method addRequest .
1881	Filter a list of actions
1882	Check if a version is greater than the current locale
1883	List Deleted Query Request
1884	List deleted query response
1885	Tries to void a transaction
1886	This method is used to call the TQN method .
1887	Add a sales receipt request to the database
1888	Add a job type request to the queue .
1889	Builds the filter XML for the specified user .
1890	Flushes the cache for the given groups .
1891	Flushes cache by tags .
1892	Find a command by its name .
1893	Run command .
1894	Checks if an extension can be loaded .
1895	Checks if extension can be loaded .
1896	Load the local localconf for an extension .
1897	Load the tables for an extension .
1898	Ensures that the installation is available .
1899	Executes scheduled tasks .
1900	Execute a single task
1901	Migrate tables .
1902	Locks the backend for edit users .
1903	Unlocks the backend for editors
1904	Create a new admin
1905	Returns a list of upgrade wizards .
1906	Generates the package states .
1907	Fixes the directory structure
1908	Setup extension if possible .
1909	Executes an action with arguments .
1910	Create a new instance from composer run command .
1911	Create a new instance from the command run .
1912	Creates a new instance of the PHP command .
1913	Executes a sub - command .
1914	Handle an exception .
1915	Returns the upgrade wizard for the given identifier .
1916	Wordwrap a string
1917	Makes a request to the given URL .
1918	Make an absolute url
1919	Check for third party extensions
1920	List wizards for upgrade
1921	Displays the upgrade wizard .
1922	Executes TYPO3 upgrade .
1923	Executes a sub - command .
1924	Check extension compatibility
1925	Sets up the installed extensions .
1926	Get the structure definition .
1927	Get the extension structure for a package .
1928	Creates a structure definition for the given packages .
1929	Generates the XML for a class .
1930	Add the attributes to the view
1931	Add a documentation node .
1932	Resolves the command method name .
1933	Maps the request arguments to the controller arguments .
1934	Calls the command method .
1935	Create default logger .
1936	Returns the short description of the command .
1937	Parse the controller s definitions .
1938	Returns the synopsis .
1939	Removes the specified step from the sequence .
1940	Invoke all steps
1941	Invokes the specified step .
1942	Setup the extensions .
1943	Setup the active packages .
1944	Remove inactive packages
1945	Lists available packages .
1946	Flush all cache tables .
1947	Handles PHP errors .
1948	Registers the install script .
1949	Asks the user to select a value .
1950	Asks a question .
1951	Asks a confirmation .
1952	Ask the user to hide the response .
1953	Asks a question and validates it .
1954	Asks a hidden response and validates it .
1955	Executes the console command .
1956	Write a log record
1957	Get the number of updated updates .
1958	Adds a list of updated updates .
1959	Adds errors for a schema update type .
1960	Remove a configuration .
1961	Show the configuration for a given path
1962	Show the configuration for a given path
1963	Show the configuration for a given path
1964	Set a configuration value .
1965	After install hook .
1966	Adds a flash message to the queue .
1967	Copies the given source to the target path .
1968	Generate an XSD schema
1969	Initializes the package management
1970	Overrides the class implementation .
1971	Registers the extension implementation
1972	Sets the value of a configuration value .
1973	Convert a value to a specific type
1974	Get the type of a path
1975	Determine if the given type can be converted .
1976	Checks if a command is available .
1977	Configures the command .
1978	Executes the command .
1979	Ensure required environment .
1980	Initialize the compatibility layer
1981	Handles command execution .
1982	Renders an exception .
1983	Output an exception .
1984	Print exception trace .
1985	Returns the possible shortened file name .
1986	Displays an error message
1987	Run the import command .
1988	Executes a upgrade in sub - process .
1989	Render schema update result .
1990	Render the result of imported static data .
1991	Runs a schema update .
1992	Returns a sequence for a given run level
1993	Build an essential sequence
1994	Builds the runtime sequence .
1995	Flushes all caches for the given groups .
1996	Flush cache by tags
1997	List cache groups
1998	Hydrate the dictionary .
1999	Add a trace to the collector .
2000	Returns the number of files in given path .
2001	Convert data to JSON
2002	Get transaction description .
2003	Get access token
2004	Determine if the user has a token .
2005	Set the start time .
2006	Set end time .
2007	Returns all issues of given type
2008	Runs the plugin .
2009	Truncate a path
2010	Exit with an error message .
2011	Divides an array of tokens by comma separated comma .
2012	Trim whitespace .
2013	Call function usage checker
2014	Add a new entry to the record .
2015	Returns true if the user supports colors .
2016	Get windows size .
2017	Attempts to autoload for an identifier .
2018	Locates a class by its name .
2019	Locate function by name
2020	Opens a stream .
2021	Retrieves information about a file .
2022	Compiles a constant fetch node .
2023	Compiles a class constant fetch node .
2024	Computes the class reflections .
2025	Checks if a line contains a specific line .
2026	Returns all class names of this entity .
2027	Create a property from a class name
2028	Create a property from an instance
2029	Returns an associative array of the type strings .
2030	Returns an array of ReflectionClass objects for a given type .
2031	Find an identifier in the array .
2032	Create a ReflectionClass instance from a class name and method name .
2033	Create a ReflectionClass instance from a class instance .
2034	Create a parameter from a closure .
2035	Returns whether this node allows a null value .
2036	Returns the type .
2037	Change parameter type .
2038	Returns all registered functions .
2039	Create method from class name
2040	Create method from instance
2041	Returns the prototype of this method .
2042	Returns true if the method is a constructor .
2043	Export a class .
2044	Create a new instance from a reflected class .
2045	Returns all available methods .
2046	Returns an array of methods .
2047	Returns true if method exists .
2048	Returns the value of the specified constant .
2049	Get the constructor .
2050	Returns an array of class properties .
2051	Returns the parent class .
2052	Get parent class names .
2053	Returns a list of traits .
2054	Reflects the class for a named node .
2055	Checks if the object is an instance of the type .
2056	Returns true if the given class is a subclass of the specified class .
2057	Returns true if the class implements the specified interface .
2058	Returns true if the class is instantiable .
2059	Determine if this object can be cloned .
2060	Returns the interfaces hierarchy .
2061	Sets the value of a static property .
2062	Sets the final state of this node .
2063	Remove method .
2064	Adds a method .
2065	Adds a property .
2066	Remove a property .
2067	Checks if the given reflector is a match .
2068	Export to string
2069	Create a new instance from an instance .
2070	Returns runtime properties .
2071	Create a property node .
2072	Populate function abstract .
2073	Set optional flag
2074	Get the number of required parameters .
2075	Returns a list of parameters .
2076	Returns the parameter with the given name .
2077	Determine if the given parameters are variadic .
2078	Sets the return type .
2079	Returns the body code .
2080	Returns a list of return statements
2081	Locates identifiers by type .
2082	Create a new node from a node .
2083	Returns the value of the constant .
2084	Returns the number of modifiers .
2085	Generate the documentation .
2086	Convert HTML to markdown .
2087	Extracts properties from RDF graph .
2088	Extract the cardinality for a property
2089	Checks if a resource is an enum
2090	Create the properties map for the given types .
2091	Convert a namespace to a directory .
2092	Fixes the given files .
2093	Check if a property exists
2094	Extracts the cardinality from the relation .
2095	Get property url
2096	Convert a field to a PHP type .
2097	Get relation name
2098	Finishes writing .
2099	Flush buffered data
2100	Adds an item to the buffer .
2101	Adds a single language item .
2102	Add multi language item
2103	Returns the urls of the sitemap .
2104	Sets the usegzip value .
2105	Add a sitemap .
2106	Writes data to the file .
2107	Finishes writing .
2108	Finish the download .
2109	Sets the expiration date .
2110	Sets the key parameters .
2111	Sets the sub - key parameters .
2112	Get usage string
2113	Get a UserId object
2114	Creates a Crypt_UserId object from a string
2115	Returns true if the process is running .
2116	Terminate the thread
2117	Set the operation name
2118	Handle an error line
2119	Set the error code
2120	Sets the value of a variable .
2121	Creates a bad pass exception .
2122	Get the passphrase from the user id
2123	Returns the hash algorithm name .
2124	Set whether or not to sign the request .
2125	Sets whether or not to encrypt the connection .
2126	Creates a subkey object from a string
2127	Parse a date string into a timestamp
2128	Delete a public key
2129	Get the fingerprint of a key
2130	Encrypt data .
2131	Encrypt a file
2132	Encrypt data .
2133	Encrypt a file
2134	Decrypt an encrypted data
2135	Decrypts a file .
2136	Sign a file .
2137	Add a decrypt key
2138	Add a key to encrypt
2139	Adds a new key to the certificate .
2140	Add a key to an array .
2141	Import key .
2142	Exports a key .
2143	Decrypt data and verify it .
2144	Prepare input data .
2145	Prepare output file .
2146	Returns a list of keys .
2147	Send a command to the server .
2148	Reset the internal state
2149	Runs the GPG command .
2150	Sets the operation to be executed .
2151	Set pin data .
2152	Gets the version of the binary .
2153	Get process data
2154	Set process data
2155	Closes the subprocess .
2156	Closes GPG - Agent launch process .
2157	Close a pipe .
2158	Close idle agents
2159	Tries to find a binary
2160	Get pin entry
2161	Print debug message
2162	Get the primary key
2163	Returns true if the key can be signed .
2164	Returns true if this key can be encrypted .
2165	Set the log filename
2166	Write data to log .
2167	Connect to the GPIO server .
2168	Parses command line
2169	Get pins from environment variable
2170	Disconnect from server
2171	Sets the description of a pin .
2172	Get the current pin .
2173	Send command to get info
2174	Encode the given data .
2175	Get word wrapped data .
2176	Send data to STDOUT
2177	Builds an array of messages
2178	Set comment before headers .
2179	Add multiline values to an array .
2180	Get main file data .
2181	Extract the strings from the source file
2182	Get the file comment .
2183	Set default headers .
2184	Get file data .
2185	Get file data from header string .
2186	Resolves calllee node .
2187	Checks if a node is before the given comment
2188	Calculate the score for a given file .
2189	Determine if a directory contains a matching path .
2190	Get files from a given directory .
2191	Convert po file to destination .
2192	Build JSON files .
2193	Remove JS strings from a po file
2194	Mark updates as successful .
2195	Mark all updates .
2196	Set successful by hook .
2197	Update list points .
2198	Check list points .
2199	Save progress .
2200	Renders the dashboard .
2201	Generate hash from database .
2202	Compares a config name
2203	Imports a config .
2204	Imports configs .
2205	Install modules .
2206	Check link hash .
2207	Check link is active .
2208	Go to home page .
2209	Get file .
2210	Get items from data .
2211	Get the total count from data .
2212	Prepare a string for like comparison
2213	Set the data for this object .
2214	Resolve a type .
2215	Resolve options .
2216	Get a grid .
2217	Get a grid cell .
2218	Get grid filter .
2219	Get grid column operator .
2220	Check if a template has a block .
2221	Walks down a SelectStatement AST node thereby generating it .
2222	Set the source .
2223	Determine if the request is ready to be redirected to the export .
2224	Processes request data
2225	Process mass actions .
2226	Process export data
2227	Process filters .
2228	Process session data
2229	Prepare the data
2230	Set a session data
2231	Get column by column id
2232	Returns true if the table has a column with the given id .
2233	Sets the order of columns .
2234	Add mass action .
2235	Add a tweak .
2236	Get tweaks .
2237	Get a single tweak .
2238	Get tweaks group by group
2239	Add row action .
2240	Sets the template to use
2241	Add an export .
2242	Get route url
2243	Set filters .
2244	Sets the limits .
2245	Get page count
2246	Set maximum number of results
2247	Is the title section visible?
2248	Check if filter section is visible .
2249	Check if pager section is visible .
2250	Lazy show columns .
2251	Lazy hide columns .
2252	Get grid response
2253	Get raw data .
2254	Get the list of filters from the session .
2255	Get a filter from session
2256	Check if the column has a specific filter
2257	Initializes the query builder .
2258	Render cell value .
2259	Check if the entity is visible .
2260	Sets the order .
2261	Set column size
2262	Sets the data .
2263	Get the query data .
2264	Set the alignment .
2265	Get the list of operators .
2266	Add a new column .
2267	Sets the order of columns .
2268	Add multiple route parameters .
2269	Get route parameter mapping
2270	Render the row .
2271	Add a new type .
2272	Adds a new column .
2273	Sets the twig container .
2274	Get the response .
2275	Get grid data .
2276	Get flat data .
2277	Sets the template to use .
2278	Returns a parameter by its name .
2279	Get the list of actions to render
2280	Clears the collection .
2281	Adds an element to the cart .
2282	Remove item by unique id
2283	Get all items of the collection .
2284	Logs in to the database .
2285	Get the current user profile .
2286	Get or set the rememberUser property
2287	User callback
2288	Get the length of a string .
2289	Slice a string
2290	Lowercase a string .
2291	Converts a string to upper case .
2292	Returns a mock for a function .
2293	Registers a Disactivator for a deactivating
2294	Creates a function mock .
2295	Show country flag .
2296	Get country code .
2297	Get the code
2298	Get long code .
2299	Get locale name .
2300	Set the locale .
2301	Redirect to home page .
2302	Redirect back to previous language .
2303	Set locale .
2304	Returns the index of the first element that matches the condition .
2305	Removes the element at the specified index .
2306	Take all elements and return a new collection
2307	Set auth credentials
2308	Set the OAuth token
2309	Sends a message to the SMTP server .
2310	Connect to the SMTP server .
2311	Starts a TLS connection .
2312	Perform authentication .
2313	Validate OAuth Bearer
2314	Perform authentication .
2315	Add RPT To
2316	Parse data .
2317	Parse QUIT command
2318	Get the next response from the SMTP server
2319	Sets the from name and email address .
2320	Set fake from name .
2321	Find the file for a class .
2322	Finds the file for the given class .
2323	Load a class .
2324	Fixes the namespace declaration .
2325	Writes a cache file .
2326	Get the class hierarchy
2327	Adds a list of prefixes .
2328	Adds a set of paths for a prefix .
2329	Find the file for a class .
2330	Parse a text
2331	Detect line type
2332	Parse a block .
2333	Returns an array of inline markers .
2334	Prepare Markers .
2335	Parse inline text
2336	Parse Emph Strong .
2337	Identify an HTML element .
2338	Consume HTML elements
2339	Identify aenced code .
2340	Identify whether a line contains a header .
2341	Consume an inline line .
2342	Replace escape characters .
2343	Parse a link .
2344	Parse an image tag .
2345	Parse inline code .
2346	Consume line content .
2347	Identify if a line contains an ul element .
2348	render a list
2349	Consume a quote block .
2350	Consume reference .
2351	Render the head block
2352	Parse markdown .
2353	Identify if a table is a table .
2354	Consume table lines .
2355	Render a table
2356	Parses the given markdown and returns the auto - url .
2357	Checks whether the subject is equal to the given name ID .
2358	Create a new DOMElement .
2359	Create DOMElement with specified text .
2360	Validates an array of images .
2361	Check for empty value .
2362	Throws an exception if the property key is invalid .
2363	Create exporter .
2364	Adds a value to the property .
2365	Validates DOMDocument against schema .
2366	Adds a new name .
2367	Adds a summary .
2368	Adds a description .
2369	Adds a new price .
2370	Adds bonus .
2371	Adds sales frequency .
2372	Sets the date added event .
2373	Adds a sort value .
2374	Validate a value
2375	Get a hook .
2376	Create a symlink .
2377	Set a hook .
2378	Remove a hook .
2379	Count commits .
2380	Returns the reference bag .
2381	Returns a commit object for the given hash .
2382	Returns a tree by hash
2383	Returns a Blob .
2384	Get the log .
2385	Get the repository size
2386	Executes a shell command .
2387	Get the description .
2388	Runs a shell command
2389	Clone a project .
2390	Returns the parents of this commit .
2391	Get a short message .
2392	Returns a list of branches that should be included .
2393	Initializes a repository .
2394	Check if a remote repository exists
2395	Clone a repository .
2396	Clone a branch .
2397	Clone a repository .
2398	Get a list of lines grouped by commit
2399	Gets the list of lines .
2400	Returns an object by its full name .
2401	Returns a list of all branches .
2402	Returns an array of local branches .
2403	Returns an array of remote branches .
2404	Returns the file content .
2405	Returns the mimetype
2406	Convert diff to array
2407	Parses the given text into a Signature object .
2408	Returns a formatted version of a query .
2409	Write column name .
2410	Create an array of columns
2411	Creates a new column object .
2412	Create a new table instance .
2413	Get the SQL for this object .
2414	Boot the cacheable trait .
2415	Store a cache key for a model name .
2416	Get cache keys
2417	Flush cache keys .
2418	Forget the cache .
2419	Reset cache config .
2420	Generate cache key .
2421	Cache query .
2422	Validate HppRequest
2423	Check if response contains a security hash
2424	Set auto settle flag
2425	Add returnTss flag
2426	Add flag to validate credit card .
2427	Set the DCC enable flag .
2428	Add card storage enable
2429	Set the offer save card .
2430	Add payerExists .
2431	Add card version
2432	Generate the default values .
2433	Encodes the card data .
2434	Decode the data from base64 .
2435	Encodes the data to base64 .
2436	Decode the request .
2437	Returns rules for field config
2438	Unpack deferred results .
2439	Resolve a deferred value
2440	Convert cursor to key
2441	Convert cursor to offset
2442	Generate list compiler
2443	Create request data .
2444	Get all the sentences .
2445	Split text by language
2446	Detect language from text
2447	Returns the language codes .
2448	Get field defaults .
2449	Cache a row
2450	Get cached row
2451	Check if an offset exists .
2452	Get row by offset
2453	Array access .
2454	Unset data by offset
2455	Returns the join field .
2456	Delete the current model from the database .
2457	Get the class name for a field
2458	Sets a configuration value .
2459	Returns the field factory .
2460	Executes a query on the database .
2461	Execute a callable in a transaction
2462	Begin a transaction .
2463	Check if data is valid
2464	Magic isset .
2465	Modify an array of values .
2466	Delete current model .
2467	Relate the rows from the given rows .
2468	Remove rows from the table .
2469	Unassociate two tables .
2470	Select a related table .
2471	Get the name of a value .
2472	The quota limits .
2473	The metric rules .
2474	The destination destinations to be used .
2475	The destination destinations to be used .
2476	The list of advices .
2477	The list of available endpoints .
2478	The list of log descriptors .
2479	A list of metrics .
2480	The field violations .
2481	A list of operations .
2482	The role to view .
2483	The list of permissions to include .
2484	The stage of the role .
2485	The destination destinations to be used .
2486	The list of extensions .
2487	The list of authentication providers .
2488	Required . The names of the characters requested .
2489	Optional . The list of required information .
2490	The bounding bounds .
2491	The role to use .
2492	The list of subpages .
2493	Required . The keys of the service .
2494	The list of recipients .
2495	The stack entries .
2496	A list of producer destinations .
2497	The subscriber destinations to be used .
2498	Required .
2499	The bounding bindings .
2500	The metric costs .
2501	List of pages .
2502	The type of binding to change .
2503	The source files .
2504	The keys of the service account .
2505	The list of service accounts .
2506	Required for custom roles .
2507	Delta of the policy .
2508	The list of examples that match the distribution .
2509	The list of supported features .
2510	The list of properties .
2511	Violation .
2512	The private key type .
2513	The key algorithm to use .
2514	The entity details .
2515	The binding delta .
2516	The public key type .
2517	The list of roles .
2518	The system parameters .
2519	Get the path to a file
2520	Check the given cache file conditions
2521	Check if a cache file exists
2522	Set the cache data .
2523	Get data from cache
2524	Get or create a cache entry .
2525	Checks if a given blog is installed .
2526	Installs the WordPress .
2527	Convert a multisite network .
2528	Installs a multisite database .
2529	Generate the version .
2530	Gets the checksum for a given version .
2531	Update a blog .
2532	Get download URL .
2533	Get updates .
2534	Download a package .
2535	Enables PHP upgrade .
2536	Build a table
2537	Add admin button
2538	Move meta box after title .
2539	Get the post type .
2540	Get the title .
2541	Render meta box .
2542	Add meta box .
2543	Get meta information .
2544	Setup the file .
2545	Setup meta data .
2546	Determine if the plugin is disabled .
2547	Create a new property
2548	Get child property
2549	Get an option value
2550	Get the post ID
2551	Get the HTML ID .
2552	Get HTML name .
2553	Determine if the given slug matches the slug .
2554	Prepare a value
2555	Render the given rules .
2556	Set option value
2557	Set a setting
2558	Sets up default properties
2559	Setup options .
2560	Setup options slug .
2561	Setup options .
2562	Add metabox fields .
2563	Save post attachment .
2564	Determine whether the post type is singleton .
2565	Get property meta value
2566	Format a property value .
2567	Get a property .
2568	Load a property value .
2569	Factory method to create a page object .
2570	Get property option
2571	Determine if the current user can render the page .
2572	Render the row .
2573	Render hidden field .
2574	Render the label HTML .
2575	Render the row html .
2576	Render the rules .
2577	Get the value .
2578	Decode a property .
2579	Get post data .
2580	Get pre - deep keys value
2581	Prepare post data .
2582	Prepare property data
2583	Standardize the data .
2584	Deletes a cache entry .
2585	Get the name of the function to use .
2586	Get a value from the cache .
2587	Update a value .
2588	Update cache data .
2589	Get diff UI diff .
2590	Add hidden meta box .
2591	Load a new post .
2592	Redirects to a new location .
2593	Sets up post types
2594	Renames an entry .
2595	Get field slug .
2596	Get the source .
2597	Setup the source .
2598	Setup the object .
2599	Initialize admin
2600	Add admin body classes
2601	Hooks into edit form .
2602	Get the entry type
2603	Add plugin meta tags .
2604	Update the front page type .
2605	Modify the post type query .
2606	Get the templates for an entry type .
2607	Prepare the property value .
2608	Save post properties .
2609	Create metabox metabox
2610	Save a post .
2611	Delete post data .
2612	Before save callback
2613	Save meta box .
2614	Save meta data .
2615	Save post properties .
2616	Restore post revision .
2617	Validate a post ID .
2618	Determine if the model can be displayed .
2619	Displays rules by relation .
2620	Get rule slug .
2621	Prepare rules .
2622	Determine if the current user has the given post type .
2623	Answers the body classes .
2624	Get all child types .
2625	Get labels .
2626	Get the supported post type support .
2627	Remove post type support .
2628	Remove meta box .
2629	Setup hook .
2630	Setup post types .
2631	Setup page templates .
2632	Add mce buttons .
2633	Remove the MCE buttons .
2634	Convert DB results to objects .
2635	Load a value .
2636	Prepare the list of properties .
2637	Prepare a property for JSON
2638	Remove repeater rows .
2639	Render the JSON template .
2640	Render the repeater table .
2641	Render repeater rows .
2642	Register the option types
2643	Get a setting value .
2644	Prepare the response .
2645	Get the value of a user .
2646	Get a list of users
2647	Initialize the plugin .
2648	Load text domain .
2649	Require core files .
2650	Deactivate the plugin .
2651	Is this list items a string?
2652	Prepare the properties .
2653	Get a file s ID .
2654	Get the file value .
2655	Update the value .
2656	Bind a value to an identifier
2657	Call a closure .
2658	Get class prefix
2659	Determine if the given identifier is a singleton .
2660	Get a value for a given key .
2661	Remove an entry
2662	Override taxonomy labels
2663	Add page menu
2664	Create post types menu
2665	Render papi view
2666	Autoload class
2667	Get the list of registered sidebars .
2668	Get post type labels .
2669	Parse user arguments
2670	Parse post type arguments .
2671	Parse term arguments .
2672	Get meta query arguments .
2673	Get the query result .
2674	Add help tabs .
2675	Add a box
2676	Call parent register method
2677	Convert properties to array
2678	Get all body classes .
2679	Get the list of boxes
2680	Get a property
2681	Returns a list of all box properties .
2682	Merge multiple boxes .
2683	Setup the metabox .
2684	Create tab .
2685	Load a single value .
2686	Prepare an array of links .
2687	Update the value of the field .
2688	Check if a taxonomy is allowed .
2689	Show the edit form
2690	Register a post type .
2691	Prepare meta fields .
2692	Setup rest fields .
2693	Get the format args .
2694	Render a file .
2695	Get option value
2696	Convert a property value
2697	Get the converted value
2698	Get deep value
2699	Get a value from a conditional rule .
2700	Test whether a rule is equal to the value
2701	Test whether a rule is not equal to the value
2702	Test whether a rule is greater than the given rule
2703	Test whether a value is not in the given rule
2704	Determine if the given rule matches the given rule .
2705	Get rule between values .
2706	Check if a rule is within a given rule .
2707	Test whether a rule is not in the given value
2708	Get sort option
2709	Get sort options
2710	Get list of posts .
2711	Sort values .
2712	Update the value of a post .
2713	Get the value of a meta type .
2714	Lists available entry types .
2715	Render the tabs .
2716	Get a JSON ID .
2717	Get a layout .
2718	Load a value .
2719	Prepare the layout properties .
2720	Render the layout input .
2721	Render repeater row .
2722	Add taxonomy fields .
2723	Prepare taxonomy types
2724	Setup taxonomy hooks .
2725	Generate ajax url .
2726	Handle ajax request .
2727	Get the entry type
2728	Get all posts .
2729	Get a property
2730	Get the properties
2731	Get rule result
2732	Get a shortcode .
2733	Get terms .
2734	Gets taxonomy properties .
2735	Renames a term .
2736	Manage post type columns .
2737	Handle post type column .
2738	Adjust sortable columns .
2739	Modify the query
2740	Restrict page types
2741	Format the value .
2742	Get taxonomy labels .
2743	Get the terms .
2744	Get the value of a term .
2745	Prepare a value .
2746	Perform a search .
2747	Get historical data
2748	Get quote by symbol
2749	Returns the exchange rate .
2750	Returns the exchange rates .
2751	Fetches all quotes for a given currency .
2752	Get the attributes for the column .
2753	Render table row .
2754	Render the appends .
2755	Get all image objects .
2756	Adds parameters to the query .
2757	Set default values
2758	Get the value of a given parameter .
2759	Make a group .
2760	Wrap error content .
2761	Wrap a group .
2762	Adds class to options array .
2763	Register the application routes .
2764	Register assets routes .
2765	Register auth routes .
2766	Add a process wrapper .
2767	Returns the wrapper for the given status .
2768	Build out tree .
2769	Optimize the process .
2770	Count statuses .
2771	Returns the number of completed results .
2772	Gets all dependencies of the given class .
2773	Returns the dependency tree for the given class name .
2774	Write output to console
2775	Write error output
2776	Initializes the console .
2777	Get the version
2778	Returns the file url .
2779	Download the file .
2780	Selects the first part of the select2 dropdown .
2781	Save data to a legacy file
2782	Save data to the database .
2783	Load the definition .
2784	Load data from a legacy file
2785	Returns true if the server is accessible .
2786	Is Selenium server?
2787	Returns the cloud service name .
2788	Guess the port based on the host and scheme .
2789	Detect cloud service by status .
2790	Build the process .
2791	Returns the excluded groups .
2792	Take a screenshot of a test .
2793	Get snapshot URL .
2794	Instantiates an event dispatcher
2795	Get log file path
2796	Quotes an XPath attribute .
2797	Optimizes the distance of a tree
2798	Cast a value to a data type .
2799	Check the process timeout .
2800	Resolve the result .
2801	Returns the list of available executors .
2802	Setup ci capabilities .
2803	Set custom configuration options .
2804	Retrieve configuration values .
2805	Delqueued processes without delay
2806	Flushes the output of the given process .
2807	Return the favorite for the given class .
2808	Count summary .
2809	Update summary table
2810	Move summary table .
2811	Update buttons .
2812	Add a user s favorite .
2813	Remove a user s favorites .
2814	Toggle a user s favorite .
2815	Check if user is favourite .
2816	Get the favourite by the user .
2817	Returns an array of all the permissions for this model .
2818	Insert menus to language files .
2819	Create view files .
2820	Create migration .
2821	Create events .
2822	Generate a file .
2823	Get the stub file path
2824	Check namespace .
2825	Check table .
2826	connect random server
2827	select all redis
2828	connect to one server
2829	Select one redis server
2830	Call a Redis command .
2831	Set the current database .
2832	Remove keys from redis
2833	Set a value in the cache
2834	Check if a key exists
2835	Get the type of a key
2836	expire a key
2837	Removes all items matching the pattern
2838	Execute the Redis command
2839	get database size
2840	Add a function to the exec list
2841	Dispatches an event to the event dispatcher .
2842	Add the timing value .
2843	Replaces the config placeholder in the given string .
2844	Merge the tags of the event .
2845	Dispatches memory usage .
2846	Dispatch request time .
2847	Creates a new Event from a \ Shell \ Console \ Event \ EventInterface .
2848	Match a SRID
2849	Parse geometry .
2850	Parse a Point .
2851	Match a coordinate token
2852	Match list of points
2853	Match point lists
2854	Match multi polygon
2855	Parse the current geometry collection .
2856	Matches a token against the lexer .
2857	Parse syntax error .
2858	Creates an array of Response objects
2859	Returns the request time
2860	Create the Api Client
2861	Executes a command
2862	Returns the redirect url
2863	Check render options
2864	Renders a template .
2865	Renders a base64 image .
2866	Find pages by method
2867	Find documents within a specific page .
2868	Set an attribute on a page .
2869	Send a key event
2870	Select an option on a page .
2871	Set debug mode .
2872	Set proxy
2873	Network Traffic .
2874	Gets all cookies
2875	Set a cookie
2876	Returns an array of javascript errors
2877	Returns a human readable error message .
2878	Compiles a single route .
2879	Creates route variable node .
2880	Creates a Trie node .
2881	Flushes buffered text .
2882	Lex a number token .
2883	Lexes a punctuation token .
2884	Lex a quoted string .
2885	Lexes a single character .
2886	Lex a variable name .
2887	Adds a route to the collection .
2888	Get named route .
2889	Create a new trie
2890	Normalize the name .
2891	Throws an exception for the given token and value .
2892	Returns the current token .
2893	Returns the next token .
2894	Move the next token to the next token if it matches the given type .
2895	Returns the next token .
2896	Adds a child node to this node .
2897	Adds a child node to this node .
2898	Returns all children of this node .
2899	Add literal child node
2900	Add child node
2901	Builds all routes .
2902	Create a new route group .
2903	Adds a route to the collection .
2904	Apply the group attributes to the route builder .
2905	Apply the group constraints to the route builder .
2906	Apply group middleware to the route builder stack .
2907	Apply group template templates
2908	Registers rule factories .
2909	Returns a list of candidate candidates for the given node .
2910	Build route .
2911	set controller action
2912	Add an attribute to the tag .
2913	Add many attributes .
2914	Add many constraints .
2915	Add many middleware bindings .
2916	Adds a middleware to the stack .
2917	Parses a punctuation node
2918	Parses text node
2919	Parses tokens from a token stream
2920	Parses a variable .
2921	Parses a variable rule .
2922	Check if this route matches a segment value
2923	Registers a new route .
2924	Add a route to the collection .
2925	Dispatches the request to the router .
2926	Compares route method arguments .
2927	Compares the domain with the request domain .
2928	Compare uri against request uri
2929	Run the given route .
2930	Arrange method parameters .
2931	Parse route uri .
2932	Parse a parameter .
2933	Adds a route to the collection .
2934	Define a route .
2935	Get the url for a named route .
2936	Prepares the request object .
2937	Builds the request URI .
2938	Validate API response .
2939	Validate Bity API response .
2940	Validate Sina response .
2941	Get a provider by name .
2942	Check if a request has been modified and add it to the head
2943	Get the IP address details
2944	Formats the details object .
2945	Get information about an IP address .
2946	Add an element to the cache
2947	Cleanup element size
2948	Make a post request
2949	Generate error HTML
2950	Group routes .
2951	Parse path .
2952	Check if path is a variable route
2953	Caches a variable route .
2954	Set map tree
2955	Get a redirect url .
2956	check route middleware
2957	Perform a dispatch
2958	Initialize database connections
2959	Validates header .
2960	Get header by key
2961	Insert last row
2962	Get DI parameters
2963	Register singleton
2964	Get a singleton object
2965	Register an object .
2966	Get an instance of a class
2967	Returns an instance of the specified class .
2968	Run a method on a class
2969	Run the application
2970	Initialize the database
2971	Add a pipe .
2972	Initialize Redis connections
2973	Subscribe to a channel .
2974	Subscribe to multiple channels .
2975	reset all parameters
2976	Wrap table prefix
2977	Execute PDO query
2978	Bind parameters to PDO statement
2979	Wrap a table
2980	Wrap a single row
2981	Constructor for condition
2982	Store the build attributes .
2983	Store the build attribute data .
2984	Creates a sub - query builder
2985	Add columns to select
2986	Sets the where condition .
2987	Adds a where condition to the query .
2988	Where in condition
2989	Sets where between condition
2990	Add WHERE condition .
2991	Add WHERE brackets .
2992	Where exists .
2993	Sets where in condition
2994	Group by clause
2995	Begins the HAVING clause .
2996	Begins the HAVING clause .
2997	Order by clause
2998	Joins a table
2999	Generate a sub - table from a callback .
3000	Paginate results
3001	get all results
3002	Get the first row of the result set
3003	Get all values for a field
3004	Performs a SQL query .
3005	Prepares a SQL statement .
3006	Begin a transaction .
3007	Handles an exception .
3008	Generate a unique ID
3009	Generate a unique ID .
3010	Generate random id
3011	Normalize a DSN .
3012	Creates DQL query .
3013	Executes an expression on this query .
3014	Begin a transaction .
3015	Commits a transaction
3016	Rollback a transaction
3017	Get last insert ID .
3018	Remove custom argument .
3019	Consume a SQL code
3020	Escapes a value by using dot notation .
3021	Render the expression
3022	Get the debug query
3023	Executes the query and returns all results .
3024	Get one row of data
3025	Get a single row .
3026	Add a table to the query .
3027	Where condition .
3028	Render a single condition .
3029	Add a group .
3030	Set value to SQL statement
3031	Add an option to the select box .
3032	Sets the order
3033	Set template mode .
3034	Sets the LIMIT clause for the current template .
3035	Parse a string .
3036	Fetch matches .
3037	Creates a message .
3038	Checks if a string starts with a specific line .
3039	Fetches the variables of the environment variable .
3040	Determine if a variable has a parameter expansion .
3041	Fetches the expansion of a variable .
3042	Fetch parameter expansion symbol
3043	Split variable default .
3044	Parse variable parameter .
3045	Parses a variable parameter .
3046	Check if a variable exists in the context
3047	Get a variable from context
3048	Parse a key .
3049	Parse the content .
3050	Parse content .
3051	Parse export line
3052	Parse export line
3053	Parse a single key value pair .
3054	Get content by key name
3055	Starts a task .
3056	Starts a workflow .
3057	Find a workflow .
3058	Get the timestamp and duration of the buffer .
3059	Get class properties
3060	Configure the sitemap manager .
3061	Fix the sitemap configuration .
3062	Add a source to a group .
3063	Registers a block .
3064	Builds the breadcrumb menu .
3065	Returns the list of available fonts .
3066	Get icon map
3067	Returns the font css file
3068	Hash a password and encrypt it .
3069	Upgrades the password from a version 1 .
3070	Execute init command
3071	Write SMTP credentials .
3072	Get config array
3073	Checks if the current URI matches the current request .
3074	Register commands .
3075	Find all available templates .
3076	Finds all templates in a bundle .
3077	Execute a command .
3078	Get the substring between two strings .
3079	Sanitize a string
3080	Replaces the first occurrence of a substring in this string .
3081	Replaces the last occurrence of a substring in the string .
3082	Creates a possessive .
3083	Split the string by a delimiter
3084	Finds the first occurrence of a given string .
3085	Encrypts the hash
3086	Decrypt response data
3087	Encrypts a text using a key .
3088	Decrypt an encrypted text
3089	Encrypts the hash
3090	Decrypt the response data .
3091	Encrypt the data
3092	Add a range
3093	Adds a modifier to the list .
3094	Adds a range of pages .
3095	Adds a raw source .
3096	Add a file source .
3097	Adds pages in an iterator .
3098	Unserializes a CRS object .
3099	Set optional constructor arguments .
3100	Creates an instance for an invalid value .
3101	Thrown when a property is invalid .
3102	Unserializes a CRS object .
3103	Get config path
3104	Get the application namespace .
3105	Processes configuration parameters .
3106	Creates a new master node .
3107	Returns the native balance .
3108	Returns the native balance .
3109	Get custom asset balance value .
3110	Get a custom asset balance .
3111	Get the custom balanceops for an asset
3112	Calculate the checksum of entropy bytes .
3113	Converts a bit string into a hexadecimal representation .
3114	Convert a mnemonic to an entropy value .
3115	Authorize a trustline .
3116	Revokes a trustline .
3117	Convert this object to an Xdr string .
3118	Creates an opaque variable
3119	Generate an XDR encoded string .
3120	Get unique bucket hashes
3121	Check if account exists
3122	Set the required flag for this request .
3123	Sets whether or not this connection is revocable .
3124	Get the checksum of the public key .
3125	Get an opaque fixed string .
3126	Parse raw transaction data
3127	Sign the transaction .
3128	Submit a transaction .
3129	Creates patches from a text string .
3130	Convert patches to text
3131	Add context to a patch
3132	Creates a deep copy of the patches
3133	Get the bitap score
3134	Create alphabet array from pattern
3135	Generate a pretty html string
3136	Returns a string representation of the diff .
3137	Creates a diff from a text .
3138	Get the levenshtein distance
3139	Compute the difference between two strings .
3140	Merges two lines .
3141	Protect two split
3142	Find the common prefix
3143	Find the common suffix
3144	Find the longest overlap between two strings
3145	Match two strings
3146	Perform a partial match
3147	Convert lines between two lines
3148	Get the recipients for the given notification .
3149	Get Laravel version .
3150	Register a Pug compiler .
3151	Get the config .
3152	Initialize the plugin .
3153	Get pug .
3154	Get the cache path .
3155	Get a specific option .
3156	Determine if the given path is expired .
3157	Extracts the path .
3158	Returns the amocrm client .
3159	Get a B2B family instance .
3160	Hash input string .
3161	Resolve a file path .
3162	Display a file .
3163	Extract options from extensions .
3164	Remove an option from the renderer .
3165	Reset the Facade instance .
3166	Returns a renderer instance .
3167	Add a new filter .
3168	Add a keyword .
3169	Cache a template directory .
3170	Run the facade .
3171	Get available methods .
3172	Lists available methods .
3173	Answers an array of errors for the given record .
3174	Returns a list of all meta objects .
3175	Mark a list as duplicated
3176	Find duplicate page attributes
3177	Remove empty list attributes
3178	Processes a single record
3179	Handle all releases .
3180	Get the elapsed time .
3181	Read from Redis .
3182	Convert arguments to string
3183	Get the arguments for this command
3184	Throws exception if command is not supported .
3185	Register the autoloader .
3186	Unregister the autoloader .
3187	Get the path to redis .
3188	Get connections by key name
3189	Get a Redisk connection by its name .
3190	Get channels by connection
3191	Get a configuration value .
3192	Set a configuration value .
3193	Throws exception if transaction is not supported .
3194	Create a new queue
3195	Delete a queue
3196	Count the number of objects in the queue
3197	Sends a message to the queue
3198	Receive messages from the queue
3199	Deletes a message
3200	Get total elapsed time
3201	Set the value of a field to the hashmap
3202	Array access .
3203	Increments a field s value
3204	Remove a field from the cache
3205	Write data to the cache
3206	Subscribe to a channel .
3207	Publish a message .
3208	Add message to buffer
3209	Throws exception if Redis is not supported .
3210	Catch unserialize notice
3211	Add a queue
3212	Remove a queue
3213	Get the queue cache
3214	Switches to a specific key .
3215	Unwatch the stream .
3216	Add a command to the database
3217	Create a new post
3218	Default index action .
3219	Creates a new instance of Zend_Log
3220	Add a value to the set .
3221	Get set length by score
3222	Get a set of values by score .
3223	Remove items by score
3224	Increments a score in the set .
3225	Get set by rank
3226	Remove items by rank
3227	Get the rank of a given value .
3228	Get the union of the set .
3229	Compute the number of items in a set of sets .
3230	Get all results as an associative array .
3231	Populate the set from an associative array
3232	Set the name
3233	Get a connection by key name .
3234	Returns the list of available connections .
3235	Set the connection to the specified connection .
3236	Subscribe to a channel .
3237	Get a RediskaConfig instance .
3238	Sets the key distribution
3239	Returns the serializer
3240	Get command instance
3241	Get the lower case of a command name
3242	Execute the command .
3243	Add a command to the pipeline
3244	Write to the database .
3245	Sets the callback that will be used to return the response .
3246	Transform a multi bulk command
3247	Append value to redis
3248	Prepend a value to the list
3249	Truncate the list .
3250	Set a value to an index
3251	Insert a value after a given value .
3252	Insert a value before a given value
3253	Insert a value into the list .
3254	Remove a value
3255	Shift an item from the list
3256	Shifts a row from the list
3257	Remove a key from the list
3258	Remove item from redis blacklist
3259	Populate the cache from an associative array .
3260	Load data by id
3261	Save data to the cache
3262	Remove an entry from the cache .
3263	Removes IDs from the cache .
3264	Set cache directives
3265	Get set ids not matching given tags .
3266	Get the metadata for a given ID .
3267	Collect all expired tags
3268	Add a value to the set .
3269	Remove a value from the cache .
3270	Move a value to a set .
3271	Compute the intersection of this set .
3272	Merges two sets .
3273	Get the difference between two sets .
3274	Returns the Redis instance .
3275	Set a value in the Rediska
3276	Set a value and expire it .
3277	Set a bit at the given index .
3278	Get or set a key value .
3279	Shows all user s followers
3280	Shows the following user .
3281	Follow a user .
3282	Move the record to the database .
3283	Sets the number of seconds to expire .
3284	Get Rediska instance .
3285	Set the stream mode .
3286	Add a Rediska
3287	Get all registered instances
3288	Instantiate a Rediska instance .
3289	Increment a subject
3290	Reset a subject
3291	Get bucket name
3292	Set multi increment transaction
3293	Set the sum of the command to execute the command .
3294	Create a new socket
3295	Get the read buffer
3296	Read data from Redis .
3297	Read a single line from the server .
3298	Set the read timeout .
3299	Get the stream context .
3300	Read data from the socket .
3301	Validate a nonce .
3302	Declare a queue
3303	Acknowledge a message .
3304	Notify a message .
3305	Get message properties
3306	Starts the daemon .
3307	Closes the daemon .
3308	Creates a new exception for the given exception .
3309	Builds the queue handler
3310	Handle a sync message
3311	Get an AMQP driver instance .
3312	Rejects a message .
3313	Closes the connection .
3314	Consume a message .
3315	Replace model name .
3316	Qualify a class name .
3317	Processes the given request .
3318	Create a record .
3319	Convert array to JsonResponse
3320	Edit resource .
3321	Remove records from the database .
3322	Returns true if the user is allowed to vote on the given attribute .
3323	Renders the document .
3324	Returns the string as a string .
3325	Get all achievements for a given game .
3326	Closes the socket .
3327	Receive a single packet
3328	Sends a data packet .
3329	Retrieve a reply .
3330	Send a rcon command .
3331	Receive a challenge .
3332	Send RCONs command .
3333	Connect to a server .
3334	Get all available servers .
3335	Fetches the entity schema .
3336	Converts a community ID to a Steam ID .
3337	Convert Steam ID to a community ID .
3338	Resolve a vanity URL
3339	Fetches the user s friends .
3340	Fetches all available games .
3341	Fetches the user s groups .
3342	Get Steam ID .
3343	Get the most recent playtime for the app .
3344	Get total playtime
3345	Fetches the data for this profile .
3346	Rotate the IP address
3347	Init the socket
3348	Authenticates the RCON request .
3349	Connect to a UDP server .
3350	Creates a new object .
3351	Find a cached instance .
3352	Check if an id is found in cache
3353	Create the cache .
3354	Get the cache ids .
3355	Init the socket
3356	Perform RCON authentication .
3357	Closes the socket .
3358	Receive data from the socket .
3359	Selects all connections .
3360	Sends data to the socket .
3361	Get all news for an app
3362	Get the list of classes that are equipped to be equipped
3363	Get the number of member count .
3364	Returns the list of members .
3365	Fetches the members list for the specified page .
3366	Fetches the internal cache .
3367	Get the item schema .
3368	Fetches the data for this player .
3369	Get the list of available bots .
3370	Returns a list of golden brews
3371	Set the API key
3372	Queries the Steam API .
3373	Send a steam packet .
3374	Get the list of players
3375	Handles the response for a request .
3376	Update the ping information .
3377	Update the players status
3378	Add information to this player .
3379	Get leaderboard by id
3380	Returns the leaderboards for the given game name .
3381	Load leaderboards for a game .
3382	Get the game leader for the Steam ID .
3383	Get a list of all entries within the range .
3384	Load data .
3385	Load data for a steam id .
3386	Parse the entries of the GameLeaderboard .
3387	Create a new SteamGame object .
3388	Check if the application is up to date .
3389	Get current player count
3390	Get user stats .
3391	Display a list of work orders .
3392	Create new event .
3393	Display an event .
3394	Update the specified event .
3395	Remove the specified event .
3396	Show the WorkOrder .
3397	Show the edit form .
3398	Update a WorkOrder .
3399	Returns a copy of an item .
3400	Adds a new part to the workorder .
3401	Retrieve stock data .
3402	Put parts into the inventory .
3403	Display a WorkRequest .
3404	Show the edit work request .
3405	Update the work request .
3406	Remove the work request .
3407	Scope for Location .
3408	Create a new report .
3409	Show create form .
3410	Store a workorder .
3411	Show the workorder .
3412	Show edit form .
3413	Update an attachment .
3414	Destroy an attachment .
3415	Form .
3416	Get the icon attribute .
3417	View Stock Movements .
3418	Show the movement .
3419	Rollback a stock .
3420	Get revised status attribute .
3421	Get revised priority attribute .
3422	Closes all expired sessions .
3423	Determine if the user is logged in .
3424	Get started label
3425	Returns a label for completed .
3426	Complete the activity .
3427	View status table .
3428	Form .
3429	Display the list of priorities .
3430	Store the given request .
3431	Show the edit priority form .
3432	Update a priority .
3433	Scope for stock .
3434	Scope by SKU .
3435	Get current stock attribute .
3436	Get the revised metric attribute .
3437	Get the operator from a string
3438	Sorts the given query .
3439	Get full path attribute .
3440	Show the status .
3441	Store the status .
3442	Show the edit status .
3443	Update the status .
3444	Creates a new variant .
3445	Store a new variant .
3446	Show a form to create a new workorder .
3447	Store a new report .
3448	Generate a table for the work orders .
3449	Return the table with assigned assignments .
3450	View table sessions
3451	Form .
3452	Show comment form .
3453	Handle request .
3454	Generate asset table .
3455	Show asset form .
3456	Generate the inventory table .
3457	View table stacks
3458	Form for the inventory .
3459	Navbar to navbar .
3460	Store the uploaded files .
3461	Update an attachment .
3462	Retrieve metric table .
3463	Table for history .
3464	Upload an image .
3465	Display image .
3466	Update attachment image .
3467	Display a list of metrics .
3468	Store a metric .
3469	Edit metric .
3470	Index action .
3471	Store an asset .
3472	Show the edit asset form .
3473	Update an asset .
3474	Scope by id .
3475	Return ajax response .
3476	Get the input value .
3477	Get select hierarchy
3478	Get the options for a single node .
3479	Boot the view composers .
3480	Delete the attachment .
3481	Display stock page .
3482	Show stock form .
3483	Store item .
3484	Show stock .
3485	Edit stock form .
3486	Update an item stock .
3487	Destroy an item .
3488	Display an asset .
3489	Show the metric form .
3490	Create a new meter .
3491	Show the meter .
3492	Show the edit meter .
3493	Update the meter .
3494	Remove the meter .
3495	Store a new WorkOrder .
3496	Update the work order notifications .
3497	Formats the started time .
3498	Formats completed time .
3499	Show the list of work orders .
3500	Form for editing a comment .
3501	Get amount of hours
3502	Formats the start date .
3503	Format end date .
3504	Format end time .
3505	Formats the recurf frequency
3506	Get the frequency of the event
3507	Receive BYDAY rule
3508	View event tags .
3509	Create a new inventory stock .
3510	Update an inventory stock .
3511	Remove stock .
3512	Generate the table for the work orders .
3513	Form .
3514	Attempt to authenticate the user .
3515	Handle user authentication .
3516	Handle user authentication .
3517	Notifies when a stock is deleted .
3518	Restore the state of the Inventory .
3519	View the priority table .
3520	Show priority form .
3521	Generate a table of inventory items .
3522	Form for take orders .
3523	Form for updating stock .
3524	Remove the specified inventory item .
3525	Create a new flash message .
3526	Create a new report .
3527	Create a new Workorder report .
3528	Display a list of events .
3529	Store new event .
3530	Show an eventable .
3531	Update the specified event .
3532	Remove the specified event .
3533	Scope for category .
3534	Form .
3535	Upload an asset .
3536	Display an asset .
3537	Update the manual .
3538	Attach a work order to an asset .
3539	Detach a work order .
3540	Store a new work request .
3541	Destroy the given work request .
3542	Display stock orders .
3543	Returns a form to take an item .
3544	Post a new part .
3545	Returns the put form for the given item .
3546	Post processing for a part .
3547	Show the work requests .
3548	Show the edit request .
3549	Update a WorkRequest
3550	Show create form .
3551	Store a new category in storage .
3552	Show the edit category .
3553	Update the specified category in storage .
3554	Remove the specified resource from storage .
3555	Generate a table for the work order .
3556	Return a table of work orders per worker .
3557	Called when an Inventory is deleted .
3558	Restore the stock .
3559	Display the inventory .
3560	Store a new item .
3561	Shows the inventory item .
3562	Edit an Inventory item .
3563	Generate inventory items .
3564	Generate migration table .
3565	Form for Inventory .
3566	Return inventory stock bar .
3567	Generate the inventory table .
3568	Generate inventory table .
3569	Return the navbar .
3570	Display a list of work orders .
3571	Start a workorder .
3572	End a workorder .
3573	Get change attribute .
3574	Store a note .
3575	Display a note .
3576	Update a note .
3577	Remove a note .
3578	Get the last movement attribute .
3579	Get last movement by attribute .
3580	Get quantity attribute .
3581	Retrieve a button for a given work order .
3582	Returns the button for put back all items for a work order .
3583	End the session .
3584	Table for work requests .
3585	Form .
3586	Assign a worker to the database .
3587	Remove the worker from the given assignment .
3588	Render datalist .
3589	Render a select option .
3590	Get the appendage for the given method .
3591	Render component .
3592	Get component data .
3593	Register the blade templates .
3594	Opens a model .
3595	Format the label .
3596	Renders a reset button .
3597	Adds a submit field .
3598	Get request parameter .
3599	Returns a link to an asset .
3600	Returns a link to a named route .
3601	Create a listing element .
3602	Render HTML attributes .
3603	Register the html builder .
3604	Register form builder instance .
3605	Adds a search field .
3606	Create a datetime input .
3607	Create a file field .
3608	Remove XML first line from string
3609	Load the dictionary .
3610	Parse language file
3611	Returns the patterns for a word .
3612	Unify locale .
3613	Tokenize the string
3614	Runs the given input .
3615	Sets the options .
3616	Add a dictionary to the registry .
3617	Returns the patterns for the given hyphenation .
3618	Sets the filters .
3619	Add a new filter .
3620	Sets the tokenizer .
3621	Add a tokenizer .
3622	Creates options instance from a file
3623	Get text .
3624	Get Pattern
3625	Sets the options .
3626	Get the options object .
3627	Add a dictionary .
3628	Adds a new filter .
3629	Add a tokenizer .
3630	Get the tokenizer .
3631	Get dictionary .
3632	Get filters .
3633	Hyphenate a string .
3634	Get hyphenation pattern
3635	Get all patterns for a token
3636	Set default home path
3637	Get default home path
3638	Set home path
3639	Returns a hyphenator instance .
3640	Autoload function
3641	Replaces a token in the registry .
3642	Get token by key
3643	Returns the combined pattern for the pattern
3644	Get filter by key
3645	Filters the given tokens .
3646	Fetches an access token .
3647	Migrate orders .
3648	Migrate an order .
3649	Migrate shipping values
3650	Migrate order calculation
3651	Returns the list of products that have been purchased .
3652	Create default page
3653	Make a new payment
3654	Get gateway data
3655	Creates a payment object for the given gateway
3656	Complete the payment .
3657	Check if an order can be placed
3658	Convert the value to a nice name .
3659	Set the payment method
3660	Get selected payment method
3661	Send the confirmation email
3662	Send an admin notification
3663	Send the cancel notification
3664	Builds a URL for a Buyable object .
3665	Redirect to the current page .
3666	Index action for the cart
3667	Returns a nicely formatted cart
3668	Returns the filter used to filter the data .
3669	Save form data
3670	Perform the save action
3671	Get a specific modifier
3672	Get the unit price .
3673	Calculate the total of the item .
3674	Returns an array with all the required data .
3675	Calculate the total amount of cart .
3676	Get a variant for this product .
3677	Get the address as a string .
3678	Get the address associated with this user .
3679	Get a form to edit the cart .
3680	Get the value of the cost value
3681	Get the weight of the item
3682	Get the sum of all items in the collection
3683	Gets the subtotal of the list .
3684	Publish an image
3685	Answers the viewer object for the given action .
3686	Returns the product associated with this object .
3687	Add fields to the fieldlist
3688	Get a variant by attribute values .
3689	Generate variations based on an attribute type
3690	Deletes this object .
3691	Get a component by its type .
3692	Get a list of all form fields
3693	Validate the given data .
3694	Get the order data .
3695	Sets the data for all components .
3696	Find dependent component data
3697	Get the current cart order .
3698	Set current cart status
3699	Find the current order
3700	Adds a new item to the order
3701	Removes an item from the current order
3702	Remove an order item from the current order
3703	Sets the quantity of a Buyable item .
3704	Update an order item quantity
3705	Find or create a Buyable item .
3706	Get the order item matching the given criteria .
3707	Archive order id
3708	Calculate the incoming value
3709	Creates a price field for display .
3710	Find an image by its name
3711	Set content element content
3712	Answers the list of supported countries .
3713	Get a single country
3714	Convert country code to name
3715	Get the current shopping cart
3716	Convert an array of values to a list
3717	Get the dropdown field
3718	Get all products that have the same price .
3719	Get all child categories of this category .
3720	Get the child categories of this category .
3721	Get the groups menu .
3722	Get a nested title of the menu
3723	Returns the edit form
3724	Displays the order
3725	Find the next step in the form .
3726	Returns a list of models that can be used to edit the model .
3727	Get the edit form .
3728	Get a subset of fields .
3729	Modify the subtotal .
3730	Add steps .
3731	Redirect to the current step
3732	Answers true if the specified action is the current step .
3733	Find the position of an action in the pipeline
3734	Find the link to the current page .
3735	Returns a list of products .
3736	Trim out cents .
3737	Get the CMS fields for the product .
3738	Get the options for the product .
3739	Get all options that have no parent .
3740	Answers an array of product IDs for the current category .
3741	Get the base price .
3742	Answers the image for the product .
3743	submit payment form
3744	Do payment
3745	Cancel an order
3746	Gets the CC fields for the given gateways
3747	Add order to the session .
3748	Returns the order IDs from the session .
3749	Get order by ID
3750	Get the actions form for the order
3751	Validate member data
3752	Get a member by its unique identifier value .
3753	Log the member in the cart .
3754	Get all of the orders that belong to this member .
3755	Answers the hidden field for the quantity link .
3756	Get the existing address fields
3757	Returns the fields for the CMS .
3758	Get the default search context
3759	Answers the list of components for the given component .
3760	Calculate order total .
3761	Returns the modifier for the given order .
3762	Get the total outstanding .
3763	Get the link to this order .
3764	Whether this object can be paid
3765	Can the current user be deleted?
3766	Can this action be viewed?
3767	Get the name of the member .
3768	Get billing address .
3769	Generate a unique reference
3770	Called before writing
3771	Deletes all items from the database
3772	Provides an array of i18n entities
3773	Render the field
3774	Returns editable items
3775	Find account link .
3776	Get the url to the order page .
3777	Browse community packages .
3778	Lists installed packages .
3779	Get the path to a package .
3780	Update packages .
3781	Uninstalls a package .
3782	Get the Composer instance .
3783	Get the list of community packages .
3784	Get the package index .
3785	Show packages .
3786	Get package by short identifier .
3787	Get installed packages .
3788	Get installed package by its name .
3789	Get the package name and version .
3790	Get the composer json path .
3791	Create default composer . json file .
3792	Get the raw git version .
3793	Guess the version constraint to use .
3794	Get the path to the composer . json file .
3795	Sets the given DataObject to this object .
3796	Load custom config
3797	Run all queued jobs
3798	Processes scheduled jobs
3799	Enqueue a job .
3800	Copies the given job descriptor to the descriptor
3801	Get the next pending job
3802	Check job health
3803	Check default jobs
3804	Restart a stalled job
3805	Initialises a new job instance
3806	Determine if we have a time limit .
3807	Returns true if the memory is too high .
3808	Parse memory string
3809	Get the filter used to filter a job list .
3810	Run a queue
3811	Process a job queue
3812	Queue a task
3813	Logs the status of the given descriptor
3814	Returns a list of available jobs .
3815	Refresh the descriptor
3816	Run the job .
3817	Pause the job .
3818	Resume this job
3819	Activate job on queue
3820	Get the cache directory .
3821	Deletes the queued job
3822	Get the list of messages for the job .
3823	Get the last message .
3824	Returns the type string for the job .
3825	Answers an array of values for the job type field .
3826	Sets up the sitemap
3827	Prepare the sitemap
3828	Finalize the job
3829	Process the queue
3830	Handle an action
3831	Get title for publish items
3832	Setup tree structure
3833	Process the next page
3834	Get the queue
3835	Cast an ActiveRecord model to an array .
3836	Index action .
3837	Save the source map
3838	Write data to shared memory .
3839	Read data from shared memory .
3840	Lists all registered sidebars .
3841	Lists all Widgets .
3842	Adds a widget .
3843	Update a sidebar widget .
3844	Move a widget .
3845	Deactivates a widget .
3846	Deletes a widget .
3847	Reset all registered sidebars .
3848	Validate sidebar ID .
3849	Validate a sidebar widget ID .
3850	Get widget s data
3851	Move a sidebar widget .
3852	Get a widget object
3853	Sanitize widget options .
3854	Get a random integer .
3855	Get a random string
3856	Encode a string
3857	Decode a string
3858	Add a new generator path .
3859	Remove a generator path .
3860	Get a generator instance .
3861	Loads all available generators .
3862	Show the form as a row .
3863	Get the read - only element .
3864	Open a new form .
3865	Adds a prefix .
3866	Suffix the element .
3867	Assemble addons .
3868	Set size of size .
3869	Remove arguments from request
3870	Increment the client s temperature .
3871	Get the names of all nodes in the session .
3872	Returns a list of all the properties of a session .
3873	Evaluate a template .
3874	Write to the cache
3875	Get the webdriver .
3876	Returns the aperture value .
3877	Returns the author name .
3878	Returns the header .
3879	Returns the credit card .
3880	Returns the source .
3881	Returns the title of the job .
3882	Returns the ISO ISO .
3883	Returns focus distance .
3884	Returns the width of the frame .
3885	Returns image height .
3886	Returns the title .
3887	Returns the caption .
3888	Returns the copyright image .
3889	Returns the list of keywords .
3890	Returns the camera .
3891	Returns the horizontal resolution .
3892	Returns the vertical resolution .
3893	Returns the software .
3894	Returns the focal length .
3895	Returns the creation date .
3896	Returns the color space .
3897	Returns the mime type .
3898	Returns the file size .
3899	Returns the current orientation .
3900	Returns the value of the GPS attribute .
3901	Extracts the coordinate from the given components .
3902	Set the path to the tool .
3903	Returns the path to the tool .
3904	Get the output of the exifool command
3905	Hydrate an object .
3906	Extracts the coordinates from the coordinates .
3907	Returns the mapper .
3908	Get the hydrator
3909	Set entity options
3910	Add required section
3911	Get iptc data
3912	Returns an adapter for the given type
3913	Generate table prefix .
3914	Normalize the config .
3915	Translate list values .
3916	Add a new job to the queue
3917	Process the job
3918	Collect changes for a given context .
3919	Flushes all changes to the queue .
3920	Gets the module extensions that are removed from the metadata
3921	Filters extensions by module name .
3922	Returns all active module blocks .
3923	Get module settings
3924	Checks if metadata version is supported .
3925	Check if php file exists
3926	Checks if module version is available
3927	Check extended metadata extensions
3928	Check template blocks
3929	Check module settings
3930	Check module templates
3931	check module controller
3932	Check module files
3933	Checks module events
3934	Parse module ids .
3935	Parse shop config
3936	Returns list of available module ids
3937	Returns true if shop is enabled .
3938	Returns active module object
3939	Returns module cache object
3940	Returns module installer object
3941	Fixes a module
3942	Clean up extension list .
3943	Add template files
3944	Add module files to config
3945	Add module events
3946	Add extension to config
3947	add module version
3948	Computes the difference between two arrays .
3949	Add module settings .
3950	Update module controllers
3951	Add extensions to module
3952	Returns list of installed packages .
3953	Render module template
3954	Disable an OX .
3955	Returns a Http instance .
3956	Get an available HTTP transport driver .
3957	Returns an array of http transport names
3958	Set the CA option and value of the CA bundle .
3959	Creates a PSR - 7 Response object .
3960	Determine if redirects are allowed .
3961	Make an OPTIONS request .
3962	Perform a HEAD request .
3963	Perform a TRACE request .
3964	Performs a PATCH request .
3965	Checks if a given value matches a glob expression .
3966	Get an extra parameter value by key .
3967	Returns a combined list of filters .
3968	Activates the package trigger .
3969	Checks if a given path matches any of glob expressions .
3970	Checks if a given path matches a glob expression
3971	Get the shop source path .
3972	Creates installer for given package .
3973	Install the package
3974	Checks if package is not already installed
3975	Copies shop source to target package .
3976	Copies configuration file to target directory .
3977	Copies all setup files to the package .
3978	Checks if a config file is not configured .
3979	Copies filtered files from source to installation .
3980	Get filtered files .
3981	Returns the absolute file path from the source package .
3982	Update the package
3983	Copy a package
3984	Forms the source path .
3985	Nested nested structure .
3986	Returns a flat list iterator .
3987	Copy a directory .
3988	Copies a file or directory to another .
3989	Generate models .
3990	Recursively traverse an array of classes .
3991	Convert schema to JSONLD .
3992	Add breadcrumb list
3993	Renders all models .
3994	Set HTML by View
3995	Generate the inline HTML
3996	Resolves path .
3997	Determine if the expected values are equal .
3998	Determine if the expected array exists .
3999	Asserts that the given HTTP status code is valid .
4000	Assert that the content of a given type has a media type .
4001	Assert that the status code is valid .
4002	Assert that the given JSON API is valid .
4003	Assert that a document is fetched .
4004	Assert that a content is fetched .
4005	Assert that a list of documents are fetched .
4006	Assert that a document is fetched .
4007	Assert that a document is fetched .
4008	Assert that a resource is created .
4009	Assert that the HTTP body is not empty .
4010	Assert that exact meta does not exist .
4011	Assert that an error has an error .
4012	Assert that a response has an exact error .
4013	Asserts that a response has errors .
4014	Get the document .
4015	Sets the expected type .
4016	Asserts that a document has been fetched .
4017	Assert that content is updated .
4018	Assert that content is deleted .
4019	Assert that a resource is included .
4020	Asserts that the document contains the given hash .
4021	Asserts that metadata exists .
4022	Asserts that an array of metadata is met .
4023	Asserts that an array of links match .
4024	Assert that the response has exact errors .
4025	Asserts that a resource is valid .
4026	Asserts that an identifier exists in a document .
4027	Asserts that a document is exact .
4028	Assert that a document does not contain a given value .
4029	Asserts that a list contains only subset in a list .
4030	Asserts that an array contains exactly exact values .
4031	Asserts that a list of values in an array is in order .
4032	Assert that an array contains an array of objects .
4033	Assert that an array contains only identifiers in a list .
4034	Assert that an array of identifiers in a document is in an array .
4035	Asserts that a list contains a resource .
4036	Asserts that a set of hashes contain the specified subset .
4037	Assert that an array contains a list of elements .
4038	Asserts that a set of hashes contain the specified hashes .
4039	Assert that a document is exact .
4040	Assert that an array contains an error .
4041	Assert that a list contains an error .
4042	Create a new instance from a string .
4043	Casts a document .
4044	Creates a new instance from a JSON string .
4045	Decode a JSON string .
4046	Get a value from the collection .
4047	Determine if the document has the given pointers .
4048	Asserts that the members exist .
4049	Assert that the collection does not exist .
4050	Checks if the expected value is exact .
4051	Performs a subset of an array .
4052	Check if value is a resource identifier .
4053	Sort an array .
4054	Check if value is identifiable as a URL .
4055	Executes the command .
4056	Send a message to the user .
4057	Reply to a user .
4058	Sets the list of allowed types .
4059	Writes a message to the buffer .
4060	Write a message to debug mode .
4061	Add a message to the output stream .
4062	Get message count .
4063	Get variables from a single line .
4064	Get variables from a multi - line array .
4065	Validate vars array
4066	Determine if the collection contains all values .
4067	Performs accumulator .
4068	Recursive merge function
4069	Convert this object to an array .
4070	Get the keys of the collection .
4071	Creates a Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zend \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zend \ Zend \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht \ Zicht
4072	Get the values of the collection .
4073	Reduce the collection
4074	Convert the key and value to a key .
4075	Group values by a given strategy .
4076	Reduce the iterator to a single element
4077	Returns a reduction .
4078	Dumps the current settings .
4079	Get extra key
4080	Escape a named predicate .
4081	Parses a compressed IRI .
4082	Get term context from field type .
4083	Save the cache if needed .
4084	Get the content of an entity .
4085	Normalizes field items .
4086	Deletes a backend .
4087	Create a translated instance .
4088	Get the URI for an entity .
4089	Get typed data ids .
4090	Build a cache backend
4091	Fetches a completed object .
4092	Run a function and return the result .
4093	Write an error to the console .
4094	Asks a question
4095	Get the last inserted id
4096	Create fake data .
4097	Overrides values .
4098	Insert data into database
4099	Extracts the primary key from the table factory .
4100	Set the user as being authenticated .
4101	Copy stubs .
4102	Configure variables .
4103	Serialize additional data .
4104	Checks if the passed data is a swatch type .
4105	Load the watch type for an entity type .
4106	Run database seeders .
4107	Prepare the name of a database seeder .
4108	Returns a AttributeWatch by option ID and store id .
4109	Returns an entity attribute by attribute ID and attribute set ID .
4110	Returns the attribute option with the passed code and value .
4111	Returns the attribute option by attribute id .
4112	Create the database seeders folder .
4113	Create the seeder
4114	Initialize an attribute option with the passed attributes .
4115	Setup database transaction .
4116	Returns the attribute with the passed ID .
4117	Sets the path .
4118	Adds parameters to the query .
4119	Send a test .
4120	Execute menu handler
4121	Inject the params in the form .
4122	Returns the entity with the passed attribute code .
4123	Takes the serialized data and merges them into the registry .
4124	Pre - load an attribute s ID .
4125	Publish records .
4126	Assert that the given content is present in the response .
4127	Get the json response .
4128	Assert that the response contains the given data .
4129	Sets up Drupal root .
4130	Get Drupal root .
4131	Get the environment file path .
4132	Read env file
4133	Publish all records
4134	Load all database seeder classes
4135	Get entity type by code
4136	Get entity type id
4137	Sends a request to the menu .
4138	Prepare the URI
4139	Accepts the payload for a distributed trace
4140	End a transaction .
4141	Set application name
4142	Set user attributes
4143	Start a new transaction
4144	Redirects to a URL .
4145	Prepare constructor arguments
4146	Append an exception suffix to the subject .
4147	Wrap a column exception .
4148	Parses a CSV file .
4149	Returns the attribute group with the passed ID .
4150	Returns all AttributeGroup objects by attribute set ID .
4151	Returns the attribute group by the given entity type and name .
4152	Create a LexerConfig instance .
4153	Returns the eAV attribute option value by option ID and store id .
4154	Create a new FileResolver instance .
4155	Find all core config data .
4156	Returns the system logger with the specified name .
4157	Create a new plugin instance
4158	Merge entity attributes
4159	Create number converter .
4160	Cast value by backend type
4161	Returns the entity type code .
4162	Returns the entity s attributes .
4163	Returns the user defined attributes .
4164	Get EAV attribute by attribute code
4165	Returns all categories with the resolved path
4166	Returns all categories with the resolved path .
4167	Get a specific header .
4168	Add a header .
4169	Map attribute code to attribute code .
4170	Tries to tear down the source directory
4171	Registers an observer .
4172	Register a callback for the given type .
4173	Get callbacks by type
4174	Imports a row .
4175	Prepare store view code .
4176	Returns the store id for the given store code .
4177	Returns the root category for the store view .
4178	Resolves the original column name .
4179	Returns the original data .
4180	Returns true if the row has original data .
4181	Wrap a column exception .
4182	Append exception suffix
4183	Get new file name
4184	Upload a media file
4185	Delete a media file
4186	Returns all available entity types .
4187	Returns the entity type with the passed entity type code .
4188	Serialize an array .
4189	Unserializes a CSV string .
4190	Returns the target directory .
4191	Create an export config instance .
4192	Initializes the instance .
4193	Unserialize the attribute value
4194	Serialize attribute data
4195	Get prepared statement .
4196	Initializes prepared statement .
4197	Parses additional attributes .
4198	Generate the URL for the given entity .
4199	Resolve a reference
4200	Add a value to the cache .
4201	Get value from cache
4202	Flushes the referenced cache .
4203	Load an attribute set by its ID .
4204	Returns all AttributeSet for the passed entity type .
4205	Returns the attribute set for the given entity type and attribute set .
4206	Returns the attribute set for the given entity type and attribute set .
4207	Create export adapter
4208	Quotes a string .
4209	Returns the URL rewrite for the passed entity type and entity id .
4210	Returns the urlrewrites by entity id and entity id .
4211	Notify all observers
4212	Check row size
4213	Checks whether a header value exists .
4214	Creates a subject instance .
4215	Create a serializer instance .
4216	Returns all AttributeSet by entity type and attribute set name .
4217	Returns all attributes by option value and store id .
4218	Returns an array with all available attributes for the passed user .
4219	Returns all eAV attributes for the passed entity type and user ID .
4220	Returns all eAV attributes for the passed entity type ID .
4221	Find attribute by option value and store id .
4222	Prepare an array of observers .
4223	resolve path
4224	Creates a new directory .
4225	Set an attribute
4226	Increase counter value
4227	Merge attributes recursively
4228	Create a filesystem adapter .
4229	Returns the categories for the passed store view id .
4230	Returns all available root categories .
4231	Creates an emitter
4232	Prepare an array of listeners .
4233	Remove a directory
4234	Returns the Swift mailer instance .
4235	Initialize the source directory
4236	Load the files for the given serial
4237	Loads the PDO statement .
4238	Creates the import adapter for the given subject .
4239	Prepare callbacks .
4240	Get global data .
4241	Get a prepared statement by its ID .
4242	Create a date converter for a subject .
4243	Overrides the given artefacts .
4244	Append an array of artefacts .
4245	Get the artefacts for the given type and entity id
4246	Creates and returns a new artefact object
4247	Export the facts .
4248	Returns all available link types .
4249	Returns all image types for the entity type .
4250	Convert the given date to the correct format .
4251	Convert a number .
4252	Imports the given subject .
4253	Returns an array of pattern keys .
4254	resolves pattern values
4255	Resolve pattern value .
4256	Prepare the pattern .
4257	Prepare ok filename
4258	Check if two files are equal .
4259	Returns a list of all possible filenames
4260	Checks whether a file should be handled .
4261	Deletes an OK file
4262	Returns all available tax classes .
4263	Warms up the cache for all items in the cache .
4264	Returns all available store websites .
4265	Returns all stored stores .
4266	Find all categories by entity ids .
4267	Find by entity id
4268	Returns all available customer groups .
4269	Get the primary key name for the edition .
4270	Removes empty columns from the row .
4271	Render a blade view .
4272	Register REST routes .
4273	Get collection params
4274	Sanitize end date
4275	Get a list of events .
4276	Map module event data .
4277	Define Event Categories
4278	Before save callback .
4279	After save action .
4280	Save the location meta
4281	Save additional locations
4282	Saves the categories
4283	Save event groups
4284	Saves the tags
4285	Save the occurrences of an event
4286	Save the current language
4287	Get Event by ID
4288	Determine if the category filter should be used .
4289	Remove expired occurrences
4290	Remove deleted events
4291	Remove expired events
4292	Filter taxonomies by type .
4293	Delete empty taxonomies .
4294	Render the location list
4295	Save location data
4296	Get the rev - manifest .
4297	Remove meta boxes
4298	Convert meta data to string
4299	Implode multi - dimensional array
4300	Register post type
4301	Add a table column .
4302	Get table columns .
4303	Convert columns to sortable columns .
4304	Called when column content is rendered .
4305	Save a term
4306	Activate a new group .
4307	Remove empty values .
4308	Get empty values
4309	Remove empty meta
4310	Save the current model
4311	Check if attachment exists
4312	Render form fields .
4313	Add the start date for the event .
4314	Applies WHERE condition .
4315	Get a single event date
4316	Get the next occurrence date of the agenda
4317	Get closest element in array
4318	Returns an array of date parts
4319	Save draw points
4320	Register admin scripts
4321	Enqueue frontend
4322	format short date
4323	Add event manager
4324	Imports the publishing groups .
4325	Check if the database table exists .
4326	Create the database .
4327	Check if an event manager ID exists
4328	Makes a request to the API .
4329	Get occurrences for a post
4330	Get event meta
4331	String limiter
4332	Get the proximity of a post
4333	Update an instance
4334	Ajax callback .
4335	Get events for a module
4336	Get module categories
4337	Returns a list of categories for the specified module .
4338	Get the groups for a module
4339	Get module tags
4340	Returns an array of years and years .
4341	Handles OAuth request callback
4342	Sanitizes input values .
4343	Single Event Data
4344	Get user groups
4345	Updates the group value
4346	Get event content .
4347	Get the event content lead .
4348	Get custom content .
4349	Register Event Categories
4350	Register event tags
4351	Register event groups
4352	Add import buttons .
4353	Imports events .
4354	Accept or deny a post
4355	Create the tunnel .
4356	Verify the tunnel .
4357	Run a command .
4358	Sets a signal handler
4359	Handler for signals .
4360	Run a process .
4361	Edit action for container .
4362	Create and return a DCGeneral object .
4363	Get a widget .
4364	Render a widget .
4365	Process the submitted values .
4366	Processes a widget property .
4367	Hijack post bag .
4368	Handle the delete action .
4369	Creates an object with the given arguments .
4370	Configures Imagick settings .
4371	Injects the settings .
4372	Build the widget .
4373	Get the class name for the widget .
4374	Get the widget options .
4375	Processes the widget .
4376	Enforce model relationship .
4377	Processes the input .
4378	Handle pre persist event .
4379	Handle post persist event .
4380	Get translated label .
4381	Build field sets .
4382	Handle submit events .
4383	Get the header line .
4384	Persist the model .
4385	Configure the CAS server .
4386	Parses the configuration array
4387	Configure the CAS validation .
4388	Get an attribute value .
4389	Check if an attribute exists
4390	Logout from CAS server
4391	Sets the HTTP status code .
4392	Get the key or null if no row is given .
4393	Determine if the current value is an integer .
4394	Returns an array of fragments from the request .
4395	Adds containers from an array .
4396	Build the query .
4397	Wrap the original query with the row counter .
4398	Get a fake query .
4399	Generate an activation link by key and action
4400	Assign user to key
4401	Check if key is valid .
4402	Read paging info from request .
4403	Register templates .
4404	Register custom error handlers .
4405	Handle an authorization error .
4406	Handle validation exception .
4407	Handles a model not found exception .
4408	Remove the top item from the queue
4409	Get the components list .
4410	Attach event handlers
4411	Make an API request .
4412	Check if asset is available .
4413	Sync packages to database .
4414	Update packages for update
4415	Creates a new client .
4416	Get the database URL .
4417	Get the port .
4418	Validate entity managers .
4419	Terminate a process
4420	Locks a theme .
4421	Unlocks a theme .
4422	Clones a book .
4423	Build parameter value from filter url
4424	Builds the parameter filter widgets .
4425	Sort the tables .
4426	Determine if the database is configured .
4427	Configure the database .
4428	Get all migrations .
4429	Run all migrations
4430	Rollback all executed migrations
4431	Resolve migration state .
4432	Get the migration table .
4433	Render the given values .
4434	Mount indent .
4435	Set the primary keys of the table .
4436	Creates the table .
4437	Updates the table .
4438	Drops the table .
4439	Renames the current table .
4440	Execute the blueprint .
4441	Get migration files .
4442	Create a new filename .
4443	Bootstrap the application .
4444	Load Laravel application .
4445	Loads context initializer .
4446	Loads Laravel argument resolver .
4447	Apply mailtrap configuration .
4448	Fetches the inbox .
4449	Get the mailtrap client .
4450	Reboot the kernel .
4451	Resolves an array of arguments
4452	Opens a stream .
4453	Get stream stats
4454	Get stream stats
4455	Check if a file exists
4456	Get the filename for a stream .
4457	Unregister a file
4458	Handles a command .
4459	Determine if the node has an empty node .
4460	Expose the methods of this class .
4461	Handles a request
4462	Call an XRL function
4463	Renders the input .
4464	Enable a server .
4465	Extracts the type of the doc
4466	Returns the list of available methods .
4467	Get the signature for a method .
4468	Get help for a method
4469	Multi multicall
4470	Load a class .
4471	Get the version
4472	Prints the usage .
4473	Parses a boolean value
4474	Parse the content of a file .
4475	Parse command line arguments
4476	Main entry point .
4477	Determine if the container is resolved .
4478	Get the XML writer .
4479	Finalize the XML writer
4480	Get XML reader
4481	Read a node
4482	Parses an opening tag
4483	Expects a closing tag
4484	Parses a text node
4485	Check a value against the allowed types
4486	Creates a checkbox .
4487	Creates an email field .
4488	Create a select field .
4489	Run all sections .
4490	Register settings section .
4491	Register settings fields .
4492	Register settings .
4493	Generate a captcha .
4494	Get the javascript link for the captcha .
4495	Generate and display multiple times .
4496	Builds HTML for a captcha attribute .
4497	Upload an asset .
4498	Get a project by ID .
4499	Get all projects .
4500	Create a template for a project .
4501	Get a template by ID
4502	Get list of templates
4503	Creates a new job .
4504	Get job by id
4505	Get jobs by template
4506	Get the current user
4507	Get the personal library for a user .
4508	Merge job values .
4509	Get LDAP user by attribute value .
4510	Set the LDAP configuration definition .
4511	Check LDAP error code .
4512	Set allowed types
4513	Set LDAP credentials if needed .
4514	Switch the current domain if needed .
4515	Switch the domain back to the current domain .
4516	Hide or throw an exception .
4517	Get the username and password token .
4518	Add the domain attribute to the token if it exists .
4519	Transforms the value for an object .
4520	Get the list of properties for an entity .
4521	Sets the LDAP object for a property .
4522	Set value for property
4523	Registers the Security plugin .
4524	Returns the list of values for the LDAP object .
4525	Get LDAP objects by query .
4526	Get all operations for a given domain .
4527	Sets the roles of the user .
4528	Determine if the current user has a group with the specified roles .
4529	Determine if the given attribute has the given value .
4530	Log a log operation .
4531	Save media .
4532	Update media by id
4533	Get media by group
4534	Remove a media .
4535	Parses options .
4536	Get new filename
4537	Check if file exists rename
4538	Rename the file
4539	Get alt attribute .
4540	Get title .
4541	Get name .
4542	Get the weight .
4543	Save the database .
4544	Remove existing media
4545	Put the file into storage .
4546	Clone storage
4547	Make directory .
4548	Clone a media
4549	Boot the configuration .
4550	Register the blade s services .
4551	Register blade directives .
4552	Get the config .
4553	Create a svg .
4554	Short description of method transmitItemVariable
4555	Transform a value into a string
4556	Short description of method addVariable
4557	Returns true if the variable is a file placeholder .
4558	Checks whether a variable is a file .
4559	Convert a value to a datatype
4560	Create a diff object from an object
4561	Returns the difference between two arrays .
4562	Set the ip
4563	Set the language .
4564	Sets the origin .
4565	Get the origin of the request
4566	Sets the timestamp .
4567	Before save callback .
4568	Process the object schedule .
4569	BeforeUpdate callback .
4570	Check if the slug is unique
4571	Generate a unique slug .
4572	Set the item s slug .
4573	Set the creation date .
4574	Sets the last modification date .
4575	Sets route options .
4576	Set the master
4577	Returns children of node .
4578	Get the node s siblings .
4579	Load an object from source .
4580	Load an object from the cache
4581	Add object to cache
4582	Retrieve all category items .
4583	Retrieve the route s slug pattern .
4584	Retrieve the slug prefix .
4585	Retrieve the slug suffix .
4586	Returns true if the slug is editable .
4587	Sets the slug .
4588	Generate the slug for the current model .
4589	Generate a route based on a pattern .
4590	Filters token value .
4591	Generate object route
4592	Get the URL for the current object .
4593	Creates a slug from a string .
4594	Finalize the slug .
4595	Delete object routes .
4596	Create collection collection loader .
4597	Get all revisions .
4598	Set the publish date .
4599	Set the expiration date .
4600	Set the publish status .
4601	Get the publish date .
4602	Lists all Videos
4603	Rewrite routes
4604	reset the data
4605	return the next item
4606	Browse a site
4607	Browse a site
4608	Browse a site
4609	Browse log events
4610	Returns list of allowed permissions
4611	Browse records
4612	Delete an item
4613	Restore an item
4614	Sorts items
4615	Checks if an item can be deleted .
4616	Get title from config
4617	Returns a list of available dropdown filters
4618	Get post data
4619	Get a single item
4620	Redirect to index
4621	Add an option to the list
4622	Adds multiple options at once
4623	Get an option
4624	Handle method call
4625	Update batch status
4626	Set a batch download ID
4627	Find all admin controllers
4628	Find all admin controllers
4629	Load admin controllers
4630	Loads an admin controller
4631	Loads an admin class
4632	Route the current request
4633	Load a view
4634	Load data into a CSV file
4635	Load an inline view
4636	Load search data .
4637	Returns the value of the option at the specified index .
4638	Load a pagination template
4639	Load a cell from a value
4640	Loads a user cell
4641	Load a date cell
4642	Load a date time cell
4643	Load a boolean cell
4644	Loads a settings component table
4645	Add header button
4646	Render a dynamic table
4647	Save a user preferences
4648	Creates the source
4649	Create a source
4650	Formats single row
4651	Add a new Action .
4652	Set admin data
4653	Unset admin data
4654	Set an admin data
4655	Clear all admin data for a user
4656	Get all log files .
4657	Find a config file
4658	Loads the required JS
4659	Load the css file
4660	Loads the libraries
4661	Auto load components
4662	function to backward compatibility
4663	Load a site
4664	Prepare a whitelist
4665	Extracts fieldets from settings array
4666	Get a source by its slug
4667	Get a format by it s slug
4668	Exports a data source
4669	Sends an email to a batch
4670	add a new item
4671	Save changes to database
4672	Returns a list of users .
4673	Returns the common data between two users
4674	Format an object
4675	Implements the remap .
4676	Validates input data .
4677	Get the model class and id
4678	Formats an object
4679	Sets the current date .
4680	add daily html
4681	Sets the start of the week .
4682	Prints out a dump
4683	Submit bonus
4684	Assign task to team
4685	Assigns tasks to an engagement
4686	Get results by voucher
4687	Get Results by Ticket
4688	Retrieve a report by a weekend company
4689	Get results by buyer team
4690	Get statistic by buyer company
4691	List engagements
4692	Get a specific engagement
4693	create full url
4694	List offers
4695	Creates a new Transaction
4696	Get a specific financial account
4697	Get all user roles
4698	Get roles by user
4699	Invite a job
4700	Get company by company
4701	Get customer by company
4702	Get users in a team
4703	Get a list of jobs
4704	Get a specific job
4705	Create a new job
4706	Edit a job
4707	Delete a job
4708	Get user info
4709	Get information about a specific user
4710	Get task by type
4711	Get room details
4712	Get room by offer
4713	Get room by application
4714	Get room by contract
4715	Create room
4716	Send story to a room
4717	Update room settings
4718	Update room metadata
4719	Get snapshot by contract
4720	Update snapshot by contract
4721	delete snapshot by contract
4722	Get milestone status
4723	Get milestone submissions
4724	Create a new milestone
4725	Edit a milestone
4726	Delete a milestone
4727	Perform the API request .
4728	Boot the accountkit .
4729	Get content body .
4730	Get accountKit data .
4731	Display a list of contact .
4732	Display contact .
4733	Show form for creating a new contact .
4734	Show contact form .
4735	Update the contact .
4736	Remove the contact .
4737	Get the number of contacts .
4738	Get a specific field .
4739	Determine if the given user can view the contact .
4740	Determine if the given user can update the given contact .
4741	Determine if the given user can delete the given contact .
4742	Display contact .
4743	Parse html content
4744	Returns an array with all available previewers .
4745	Returns a preview for the given parser .
4746	Adds a new parser .
4747	Remove a parser .
4748	Adds default parsers .
4749	Get the contrast from a hex color .
4750	Encode path .
4751	Convert ISO 8601 interval to seconds .
4752	Boot the DownloadAndCache extension
4753	Get timezone data .
4754	Returns a list of timezone options .
4755	Get the model relation .
4756	Joins a primary model table
4757	Get client configuration .
4758	Convert a version number to a number
4759	Lookup data for a key value .
4760	Set the availability time .
4761	Get the payload attribute .
4762	Convert bytes to human readable format
4763	Return time offset
4764	Convert seconds to seconds .
4765	Truncate text .
4766	Add a permission to a Topic .
4767	Confirm a subscription .
4768	Create a Topic
4769	Get the attributes of a Topic .
4770	List subscribers .
4771	List subscribers to a topic .
4772	Method to list topics .
4773	Publish a message to a topic .
4774	Remove a permission from a topic .
4775	Set a topic attribute
4776	Subscribe to a topic
4777	Create a new platform endpoint .
4778	Publish a message to a device .
4779	Make the request to the API
4780	Convert SimpleXMLElement to array
4781	Clear all tasks
4782	convert priority to integer
4783	Run the processing process .
4784	Customize settings tabs .
4785	Get invitation by token
4786	Create default settings tabs .
4787	Create a new instance from a Stripe coupon .
4788	Get a coupon .
4789	Get the coupon for the user .
4790	Get team .
4791	Get team roles .
4792	Update user profile .
4793	Validate the user profile .
4794	Update the Stripe customer s email address .
4795	Installs the Spark JavaScript .
4796	Install environment variables .
4797	Subscribe to Spark .
4798	Change subscription plan .
4799	Update a user s card .
4800	Update extra billing info .
4801	Cancel subscription .
4802	Resume a subscription .
4803	Download an invoice .
4804	Get or set the price .
4805	Set currency symbol
4806	Set or get the trial days .
4807	Gets the tier .
4808	Set or get the features
4809	Get the current user .
4810	Create a new user from registration request .
4811	Create new user .
4812	Create default user .
4813	Create a subscription on Stripe .
4814	Register a new user .
4815	Check if token is valid .
4816	Delete the given user .
4817	Show the settings dashboard .
4818	Invite a user by email
4819	Remove user by id
4820	Send a team invitation .
4821	Accept team invitation .
4822	Create a new Tab instance .
4823	Determine if tabs are displayable .
4824	Define core resources .
4825	Define services .
4826	Notify an invoice .
4827	Handle an invoice successful .
4828	Create team .
4829	Get all teams for a given user .
4830	Get pending invitations for a user .
4831	Attach user to team
4832	Find a plan by its ID .
4833	Get the plans by tier .
4834	Get the current team .
4835	Determine if this object owns the given team .
4836	Get team role .
4837	Store new teams .
4838	Show team settings form .
4839	Update a team .
4840	Switch the current team .
4841	Update team member .
4842	Remove team member .
4843	Leave a team .
4844	Delete team .
4845	Call custom validator .
4846	Call a custom updater .
4847	Update the user s password .
4848	Enable TwoFactor Auth .
4849	Validate the given configuration .
4850	Disable TwoFactor Auth .
4851	Determine if the user is authenticated .
4852	Logout and redirect to the token screen .
4853	Validate token .
4854	Register the registration page .
4855	Validate the registration .
4856	Validate the default registration .
4857	Validate the given coupon code .
4858	Logout .
4859	Creates a flash message .
4860	Creates an event .
4861	Registers an exception .
4862	Export the given exception .
4863	Handle import exception
4864	Normalizes an event .
4865	Get a wrapper for a handler .
4866	Create a cached event .
4867	Check if an event has a cached event .
4868	Get a cached event .
4869	Remove event from cache .
4870	Creates a wrapper for a handler .
4871	Exports an exception .
4872	Imports an exception .
4873	Remove a WordPress hook .
4874	Replace a hook .
4875	Get stacked stack
4876	Clears the worker bag .
4877	Sends a message to the pool .
4878	Deletes a task from the pool .
4879	Bootstrap the application .
4880	Filters an array by a given function .
4881	Flattens an array of values .
4882	Invokes a function in the pool .
4883	Executes a function .
4884	Converts the result returned by Monolog .
4885	Sets the number of arguments .
4886	Run a wp hook .
4887	Apply filters to a value .
4888	Adds a new WordPress hook .
4889	Wrap a function result .
4890	Resume all streams .
4891	Stop the stream .
4892	Destroy all streams
4893	Gets the socket associated with a worker .
4894	Removes a worker socket .
4895	Prepare a worker .
4896	Attach method handler
4897	Returns a hash for a callable .
4898	Write data to the buffer
4899	Creates a new stream .
4900	Receive data from the socket .
4901	Handles incoming data .
4902	Check socket errors
4903	Remove the listener from the loop .
4904	Remove a write listener
4905	Decode a message .
4906	Attach the timer .
4907	Cancel the timer .
4908	Submits a worker .
4909	Submits the given worker to the given worker .
4910	Submits a task .
4911	Submits a task to a worker .
4912	Stops a worker .
4913	Removes a worker from the pool .
4914	Sends a message to a worker .
4915	Sends a message to all workers .
4916	Triggers the timer .
4917	Internal timer tick handler
4918	Spawn a worker
4919	Checks if a worker is still running .
4920	Checks if a worker is shutdown .
4921	Handles a message .
4922	Handles the stream closing .
4923	Read bytes from the stream .
4924	Read UUID .
4925	Read list value
4926	Read a map definition .
4927	Read a varint from the stream .
4928	Read a decimal point .
4929	Register the BulkSms service .
4930	Boot the package .
4931	Sends a message .
4932	Validate the response .
4933	Send multiple bulk messages
4934	Get the status for a batch request .
4935	Sends the batch .
4936	Generate a CSV file
4937	Sends the message to the API .
4938	Sets the message .
4939	Calculate concatenation number
4940	Parse the SMS recipient .
4941	Send a batch request
4942	Find dynamic resources by filters .
4943	Count dynamic entries by filters .
4944	Adds filters to the query builder .
4945	Add search filter to query builder .
4946	Add date range filter .
4947	Get field value
4948	Get form fields .
4949	Builds a configuration object based on the dynamic configuration .
4950	Builds a configuration by type and data .
4951	Builds admin mail configuration based on dynamic parameters .
4952	Builds the website configuration based on the dynamic parameters .
4953	Get file fields by dynamic field .
4954	Returns collection id by dynamic form .
4955	Get the email from a dynamic field .
4956	Get email address .
4957	Builds the form .
4958	Creates a dynamic form .
4959	Load form entity by id and locale .
4960	Returns default values for given form entity .
4961	Returns the webspace key .
4962	Check if password is valid
4963	Generate a password .
4964	Returns dynamic entries .
4965	Returns list of fields .
4966	Deletes dynamic media .
4967	Get filters from request .
4968	Load form by id .
4969	Convert value to string .
4970	Get media urls .
4971	Get download url .
4972	Get the choices from the translation field .
4973	Get choice options .
4974	Get form by id .
4975	Serializes the form .
4976	Get form translation .
4977	Get field by key
4978	Returns all fields not in an array .
4979	Serialize form for given locale .
4980	Default form action .
4981	Displays a form .
4982	Handles form submit .
4983	Handles form submit .
4984	Generate a CSRF token .
4985	Get form errors .
4986	Handles form submission .
4987	Save form data .
4988	Upload media .
4989	Map media id to entity .
4990	Get media data .
4991	Get list of all available lists
4992	Get builder .
4993	Get the block prefix .
4994	Creates a new parent collection .
4995	Load collection id .
4996	Get item width .
4997	Get last width
4998	Throws a PDO exception .
4999	Sets the hostname
5000	Set Unix socket
5001	Sets whether or not to use memory .
5002	Set file path
5003	Sets the database name .
5004	Sets the charset .
5005	Ensures the PDO connection is established .
5006	Configures the PDO connection .
5007	Performs a select query .
5008	Get a list of queues .
5009	Get a specific queue .
5010	Send message to IronMQ
5011	Sends messages to a queue
5012	Get message by id
5013	Touch a message
5014	Releases a message .
5015	Add alerts to a queue .
5016	Delete an alert by id
5017	Delete a queue .
5018	Update a queue .
5019	Create a queue .
5020	Replace subscribers in a queue .
5021	Remove subscriber from a queue .
5022	Output the given data .
5023	Generate XML output .
5024	Generate XML .
5025	Output CSV data .
5026	Flatten data into an array .
5027	Execute the active cache command
5028	Format server stats
5029	Format the usage
5030	format uptime
5031	Add server to memcache
5032	Add multiple servers at once
5033	Check if a server is running
5034	Get a value from the cache
5035	Add a value to the cache .
5036	Delete a key from the cache
5037	Set the cache client
5038	Get a value from the cache
5039	Delete a key
5040	Make an invalid argument exception .
5041	Populate builder .
5042	Set the command options .
5043	Set or get the notification .
5044	Set the payload data .
5045	Encode a string .
5046	Returns a URL to redirect to an action .
5047	Returns the authentication URL .
5048	Get the advanced authentication URL .
5049	Get a simple authentication url .
5050	Get the authentication URL .
5051	Ensures the channel parameter is set .
5052	Set the product ID .
5053	Get similar attributes .
5054	Get similar records .
5055	Write a string to a file
5056	Autoload function
5057	Sets the target .
5058	Trigger data import
5059	Trigger import import action
5060	Apply parameter mappings .
5061	Ensures the channel parameter is set .
5062	Add required parameters
5063	Add an appender to the pool .
5064	Get appenders .
5065	Log a trace message
5066	Log debug message
5067	Log a warning message
5068	Logs a message to the specified level .
5069	Log an event .
5070	Log an event .
5071	Remove an appender .
5072	Get effective level .
5073	Get the logger hierarchy
5074	Returns a logger instance .
5075	Reset the configuration .
5076	Configures the application .
5077	Get the configured configurator .
5078	Set the record count .
5079	Add product IDs
5080	Get recommendations .
5081	track click tracking
5082	Track cart tracking .
5083	Track a checkout .
5084	Track recommendation click .
5085	Track the login .
5086	Set product IDs
5087	Get the comparable attributes .
5088	Get the compared records .
5089	Format the given string .
5090	Set a boolean value .
5091	Set the value for the given property .
5092	Set the file size value .
5093	Set a numeric value .
5094	Set a string value .
5095	Get the location information
5096	Get the start time
5097	Gets the time of the event .
5098	Get request instance
5099	Returns tag cloud
5100	Set the word count .
5101	Add an array of feedback .
5102	Set product numbers
5103	Add product numbers
5104	Set the page id
5105	Make the product campaign .
5106	Make the shopping cart campaign .
5107	Get all campaigns .
5108	Retrieve raw product campaigns .
5109	Add a converter to the chain .
5110	Returns a converter instance .
5111	Parses the format modifier string .
5112	Set the level of the Logger
5113	Add a renderer .
5114	Set the default renderer class .
5115	Get element by class name
5116	Returns an array of parameters to be used for the whitelist server .
5117	Loads a configuration file .
5118	Convert a log file to an instance .
5119	Parse the value of the logger .
5120	Parse an appender .
5121	Parse a renderer .
5122	Append event to syslog .
5123	Parse the syslog option string .
5124	Parse the facility string .
5125	Parse the priority string .
5126	Append the event to the mongo collection .
5127	Format Throwable .
5128	Closes the connection .
5129	Configure the logger hierarchy
5130	Create the layout for the logger .
5131	Set ids only .
5132	Get the follow search value
5133	Adds a filter to the list .
5134	Sets the response .
5135	Sets the session ID .
5136	Checks whether this LogLevel is equal to another
5137	Get the Monolog level instance .
5138	Get the level for this log level .
5139	Get the level for the error level
5140	Get the level for a warning
5141	Get the level of the log level .
5142	Get the level for debug messages
5143	Get the trace level for the trace level .
5144	Get all log levels
5145	Convert an argument to a level .
5146	Get a system property .
5147	Convert a value to a logger level .
5148	Convert given value to string .
5149	Substitute constants from a string .
5150	Returns a logger by name .
5151	Returns the request target
5152	Starts the conversion process .
5153	Formats the given event .
5154	Adds a new filter to the list .
5155	Returns true if the log level is greater than the given threshold .
5156	Trigger a warning .
5157	Returns the suggestions .
5158	Get the factfinder class name
5159	Roll back the current backup .
5160	Initializes the database converters .
5161	Appends the event to the database .
5162	Formats the log .
5163	Generates a URL for the given parameters .
5164	Get a string containing a specific feedback .
5165	Get all pushed products .
5166	Get the active questions .
5167	Get advisor tree .
5168	Activate options .
5169	Append the event to the log .
5170	Find a permission by its ID .
5171	Find a permission by its value .
5172	Render an item
5173	Setup the layout
5174	Get empty user
5175	Show create form
5176	Create new user
5177	Put user activation .
5178	Show the user s permissions .
5179	Display a list of groups .
5180	Save group permissions
5181	Remove user from group
5182	Add user in group
5183	Validate group values
5184	Load includes .
5185	Register helpers .
5186	Index action .
5187	Login action .
5188	List all permissions
5189	Create new permission
5190	Delete permission by id
5191	Paginate text .
5192	Authenticate user with given credentials .
5193	Generate a nonce .
5194	Check if a flag is set
5195	Get rule by flag
5196	Determine if the given flag is required .
5197	Determine if the given flag is required .
5198	Determine if the given flag is mandatory .
5199	Parses the command line arguments
5200	Check if a string is a parameter
5201	Order parameters .
5202	Allow authentication to authenticate
5203	Returns the report API
5204	Returns the permissions API
5205	Returns the company API
5206	Returns the OAuth API
5207	Makes a request to the API .
5208	Gets the elements of a report .
5209	Get Metrics for a specific report .
5210	Retry the report until it is not ready .
5211	Get the number of seconds in seconds .
5212	Parses the given array of options .
5213	Get the images .
5214	Gets a list of all images .
5215	Get videos .
5216	Print a formatted string .
5217	Get table definition .
5218	Returns drop table definition .
5219	Returns the drop table definition .
5220	Get table definition .
5221	Generate drop auto increment key .
5222	Returns the foreign key definition .
5223	Returns the drop foreign key definition .
5224	Get column definition .
5225	Get primary key .
5226	Returns the table comment .
5227	Returns the schema type for the given column .
5228	Returns the other code for the other column .
5229	List tables .
5230	Generate migration file .
5231	Create table action
5232	Drop table .
5233	Generates the generated file
5234	Formats table data .
5235	Returns the parameters for a function .
5236	Start print time .
5237	Print end time
5238	Dump conclusion .
5239	Fetches data from Webservice .
5240	Populate the object
5241	Builds Webservices URL
5242	Get the list of groups from the database .
5243	Get LDAP group by DN .
5244	Get LDAP users .
5245	Get LDAP user by GUID .
5246	Get LDAP user by DN .
5247	Get LDAP user by email address .
5248	Get LDAP user by username .
5249	Get the username by email
5250	Get LDAP group members by DN .
5251	Updates a group from LDAP data .
5252	Creates a new LDAP user
5253	Creates a new LDAP group
5254	Update the LDAP member from a member
5255	Update LDAP groups for a member
5256	Change the password of a member
5257	Delete LDAP member from LDAP .
5258	Update an index
5259	Connect to a TCP server .
5260	Disconnect from server
5261	Receive a string from the socket .
5262	Send a string to the socket .
5263	Encode a string .
5264	Decode a string
5265	Read response from server
5266	Authenticate with an auth key
5267	Make sure the response time is consistent .
5268	Create LDAP user .
5269	Write the current member without sync .
5270	Get message from session
5271	Form for the lost password form
5272	Displays the password reset page
5273	Perform LDAP search .
5274	Get a specific LDAP group by its GUID .
5275	Change the password of the current user .
5276	Reset the password for the specified dn .
5277	Move a directory to another .
5278	Authenticate a user
5279	Fallback authenticator .
5280	Performs the authentication process
5281	Output the SP metadata
5282	Convert a hexadecimal string to a 16 - bit integer .
5283	Apply select callback
5284	Select values from the index
5285	Splits a hash into an array .
5286	Create a new database instance .
5287	Get a table definition
5288	Get all tables
5289	Fix indexes in a table
5290	Compare two indices .
5291	Get one row from the database .
5292	Build index name from an index definition .
5293	Encode data .
5294	Generate a random key .
5295	Get the supported info
5296	Calculate HMAC .
5297	Verify hmac .
5298	Verify a timestamp .
5299	Remove a string from a string .
5300	Push a string onto the end of the string .
5301	Twig middleware .
5302	Get the error message .
5303	Add an error to the stack
5304	Gets or sets the main message
5305	Get or set the status
5306	Get the error message .
5307	Get all errors as a flat array
5308	Check if field is valid
5309	Parse a schema .
5310	The field must be one of the given values .
5311	Validate data .
5312	Validate a single field .
5313	Validate an array
5314	Validate a base64 encoded value
5315	Validate a boolean value .
5316	Validate a datetime value
5317	Validate a float value
5318	Validate an integer value
5319	Validates an object .
5320	Validate a required field .
5321	Validate that a value is a string .
5322	Validate a timestamp .
5323	Get a single addon
5324	Boot the autoloader .
5325	Get result from cache
5326	Get the class map for a given classname .
5327	Determine if the given addon is enabled .
5328	Get information about an addon .
5329	Scan a directory recursively
5330	Scan addon directory
5331	Scan addons recursively
5332	Start an addon .
5333	Get all request headers .
5334	Call user function .
5335	Bind a callback to an event .
5336	Binds an event to a class .
5337	Dump event handlers
5338	Fires an event
5339	Fires an array of event handlers
5340	Fires the value of the given event .
5341	Check if a function exists
5342	Get event name .
5343	Get handlers by name
5344	Check if an event exists
5345	Check if a method exists
5346	Get the value of a driver .
5347	Set the value of a driver .
5348	Split a salt string into a hash
5349	Set or get the default path .
5350	Get the value of a key .
5351	Load configuration data .
5352	Saves a configuration array .
5353	Matches all routes that match the given request .
5354	Add a new route .
5355	Finalize the result
5356	Check if an action exists
5357	Returns an array of allowed methods for an object .
5358	Determine if the request matches the pattern .
5359	Determine if the given value matches the given condition .
5360	Get the current instance of the current request
5361	Creates a PSR - 7 Response object .
5362	Sets the Content - Type header .
5363	Get or set content asset
5364	Set the content type of the response .
5365	Get the status message .
5366	Set cookie value
5367	Set global cookie
5368	Get or set the meta data .
5369	Set or get or set the data .
5370	Set the value of a header .
5371	Set or get global headers .
5372	Normalize header name
5373	Send response headers .
5374	Alter a table .
5375	Renames a table .
5376	Drop index .
5377	Create index .
5378	Force the value of a given type .
5379	Get the primary key value .
5380	Get the names of the sqlite .
5381	Creates a new route instance .
5382	Get or set the conditions .
5383	Get or set the methods
5384	Get or set the mappings .
5385	Get or set global mapping .
5386	Determine if a field is mapped to a global namespace .
5387	Get the mapped data .
5388	Determine if the request matches the given request .
5389	Get or set the pattern for the route .
5390	Dispatch a callback .
5391	Get the regular expression to match .
5392	Execute a SQL query .
5393	Build a select query
5394	Return a bracket list
5395	Build an insert statement .
5396	Build an INSERT statement .
5397	Create column definition string .
5398	Generate index definition string .
5399	Get column orders
5400	Get the formats from the database .
5401	Translate a single row
5402	Verify a password .
5403	Encode 64 bits .
5404	Get the current request
5405	Get the default environment .
5406	Get global environment .
5407	Parse server variables .
5408	Override the environment
5409	Get an environment variable .
5410	Set an environment variable
5411	Get all headers .
5412	Get the host and port
5413	Sets the file extension .
5414	Set the path extension .
5415	Set full path
5416	Sets the server port .
5417	Get a query parameter
5418	Sets a query parameter .
5419	Get an input from the request .
5420	Get request data
5421	Set data in request
5422	Get the full URL
5423	Set the url
5424	Creates a url based on the path and domain name .
5425	Split path .
5426	Reset the table .
5427	Define a column .
5428	Define column definition .
5429	Define a primary key .
5430	Execute the database .
5431	Gets or sets the table name
5432	Add an index
5433	Display robots .
5434	Retrieve all notifications .
5435	Retrieve a single resource by its ID .
5436	Validate a Judo token .
5437	Get attribute value
5438	Sets the value of attribute values .
5439	Check if API method is supported
5440	Check required attributes
5441	Check and set the Jabo ID attribute .
5442	Get status summary .
5443	Get a model instance .
5444	Returns a summary of the error .
5445	Retrieve a resource .
5446	Make a POST request to the specified resource .
5447	It converts the attributes to the correct type .
5448	Validate the object
5449	Checks whether a key exists in an array .
5450	Render the notifications
5451	Add a new notification
5452	Create a new delivery
5453	Convert a job object to a job array
5454	Convert a job response to a job object
5455	Free poll queue .
5456	Free the data stream .
5457	Creates a dashboard .
5458	Handle an item request
5459	Set the sort order
5460	Return the link to the editor
5461	Get the detail form
5462	Saves the detail to the dashboard
5463	Returns an array of feed items
5464	Get the list of most recent edits
5465	If this member has not already been configured create a new Dashboard .
5466	Get the name of the template
5467	Answers the view link for the edit action .
5468	Return a link to create a new model .
5469	Get a list of GridFields for a given page
5470	Get the grid .
5471	Get the tab for the current page .
5472	Gets a list of all the items in the gridfield
5473	Get the gridfields for a page
5474	Request account data .
5475	Clean error response
5476	Process filter
5477	Mapper to a gapi account object
5478	Mapper to a report object
5479	Check if key exists in array
5480	Fetch a token
5481	Get the url of the request
5482	Make a post request .
5483	Make a GET request .
5484	Make an HTTP request
5485	Make curl request
5486	fopen a request
5487	Get a list of all the files that have been edited
5488	Duplicate this panel .
5489	Get the name of the template
5490	Answers the view link for the model .
5491	Get the list of admin items for this model
5492	Returns a list of models for a panel
5493	Provides the permissions for the dashboard .
5494	Set the sort order
5495	Set default dashboard for all new members
5496	Apply the current member to all dashboard panels
5497	Renders the panel
5498	Deletes the panel
5499	Generate a form for the panel
5500	Save the panel .
5501	Generate the icon for the section editor .
5502	Convert seconds to minutes
5503	Gets a gapi
5504	Add filter fields to the dashboard .
5505	Determine if the configuration has been configured .
5506	Answers the path for this object .
5507	Generate a chart title
5508	Read a floating point .
5509	Reads a byte from a binary stream .
5510	Convert a hexadecimal value
5511	Decodes the specified number of bytes .
5512	Read a signed value
5513	Decode a 16 - bit integer .
5514	Read signed .
5515	Read a 64 - bit integer from the binary stream .
5516	Read a signed value .
5517	Export the given spans .
5518	Get the callback to be executed .
5519	Parse robots . txt
5520	Get the lines of the given user agent .
5521	Builds an array of regular expressions
5522	Get robots txt content
5523	Extracts the robots_txt from a URL .
5524	Init the crawler process
5525	Creates a new PHPCrawl instance .
5526	Starts the child process .
5527	Check if the crawler is aborted .
5528	Create the working directory
5529	Returns a report containing the result of the crawler .
5530	Add a link priority
5531	Set the follow mode
5532	Set the traffic limit
5533	Set the working base directory
5534	Set proxy
5535	Set connection timeout
5536	Set connection timeout
5537	Resume the aborted crawler
5538	Set the starting URL
5539	Removes all non - redirect urls from the page .
5540	Checks if the given url matches the rules .
5541	Add a url filter rule .
5542	Add multiple filters at once
5543	Mark url as follow .
5544	Returns true if the cache contains any URLs in the cache .
5545	Returns an array of all URLs
5546	Adds multiple URLs at once
5547	Starts a benchmark .
5548	Stop a benchmark .
5549	Reset all benchmark results
5550	Get all registered benchmark results .
5551	Get the current microtime .
5552	Opens the database connection .
5553	Returns the unique hash for a given URL .
5554	Get the priority of a url
5555	Add a link priority
5556	Add link priority
5557	Add a PHPCrawlerDocumentInfo object to the queue
5558	Get next document info
5559	Creates a PHPCrawlerURLDescriptor from a URL .
5560	Sets the source url .
5561	Tries to find a redirect URL in the response .
5562	Add post data
5563	Updates the status of the crawler .
5564	Register child pid
5565	Get child pids
5566	Kill child processes
5567	Get the IP of a host
5568	Returns the hostname in the cache
5569	Remove a visitor .
5570	Traverse through all registered visitors .
5571	Filters a collection using an XPath expression .
5572	Creates a new Method .
5573	Format the value .
5574	Format an array of values .
5575	Write configuration values to the current instance .
5576	Get the value of a variable .
5577	Get a list of registered engines .
5578	Expand a nested array into a nested array .
5579	Split token condition .
5580	Check if a key matches a token .
5581	Cache a value
5582	Set message instances .
5583	Get a backtrace .
5584	Export a variable .
5585	Listen to Discord .
5586	Parse a message
5587	Get the path to a configuration file .
5588	Load a plugin .
5589	Load the config file
5590	Load all plugins .
5591	Loads the bootstrap for a plugin .
5592	Read a config file
5593	Sets a configuration value .
5594	Read configuration value
5595	Load modules .
5596	Check plugins for a specific module
5597	Unload a module
5598	Reload a module
5599	Get the time loaded for a module .
5600	Check if a module is modified .
5601	Get a module .
5602	Check if a module is loaded
5603	Sets a module .
5604	Get a value from the cache .
5605	Set a key value
5606	Get multiple values .
5607	Set multiple values at once
5608	Call a database method .
5609	Logs before a given join point .
5610	Retrieve the return value after returning the result .
5611	Get the profile key for the given join point .
5612	Remove all arguments from a command .
5613	Interpolates arguments with the specified prefix .
5614	Evaluate command arguments .
5615	Sets the expiration time .
5616	Sets the length .
5617	Read data from socket
5618	Send data to the socket .
5619	Check if a command can be executed .
5620	Set the binary protocol version
5621	Decodes data .
5622	Get the last key in the stack
5623	Prepare the transaction
5624	Execute the command
5625	Read from socket
5626	Read an unsigned long .
5627	Read a string .
5628	Read bytes from the stream .
5629	Read a record from the stream .
5630	Add bytes to request
5631	Unpack an unsigned 64 bit .
5632	Reset the data .
5633	Gets the properties of this Fusion .
5634	Renders a component
5635	Returns the class names for the given arguments .
5636	Returns the list of alternative identities .
5637	Get allowed products
5638	Processes the list of products to check if they are valid
5639	Create an authorized order .
5640	Creates a new order .
5641	Creates a new SORT order .
5642	Create a new paycic order .
5643	Creates a new order using credit card .
5644	Create a new order using Bancontact .
5645	Create a cash on delivery order
5646	Creates a new Order .
5647	Creates a new order .
5648	Creates a new Homepay order .
5649	Create an order after payment .
5650	Create an order .
5651	Get an order by ID
5652	Post an order .
5653	Set the captured status of an order .
5654	Creates a new Payment method using an Id .
5655	Creates a new payment using credit card .
5656	Creates a new payment using Sepa .
5657	Creates a new SalePayment using the SORT method .
5658	Creates a BANContact with BANContact .
5659	Creates a new payment using Paypal .
5660	Creates a new payment using the Homepay method details .
5661	Creates a new payment method with a payment method .
5662	Creates a new Transaction object .
5663	Remove null values from an array .
5664	Creates an instance of the SDK client .
5665	Get the endpoint for the given product .
5666	Checks if a given value is a valid ISO3166 - 3166 - 1 .
5667	Builds the request .
5668	Execute a payment
5669	Captures a payment .
5670	Issue an authorization request .
5671	Create a new payment .
5672	Gets an access token
5673	Build a Link object
5674	Build a capture object
5675	Build an Amount object
5676	Builds an array of URLs
5677	Build an AccessToken object
5678	Build the transaction objects
5679	Creates an array of Transactions
5680	Send a request to the client .
5681	Creates a new payment object
5682	Build a paypal payment object
5683	Builds a Payer object
5684	Convert Payer object to array .
5685	Build authorization object
5686	Make a safe string
5687	Make a safe character
5688	Get the value of a form attribute .
5689	Determine if the given key has a mutator .
5690	Returns the ReflectionClass instance .
5691	Render favicon .
5692	Create a link element .
5693	Render LOL .
5694	Render ul element
5695	Get value attribute .
5696	Create text input .
5697	Create an email field .
5698	Create a tel input .
5699	Create a number input .
5700	Create url input .
5701	Create a color input .
5702	Get the checkbox state .
5703	Get url action .
5704	Get route action .
5705	Get controller action .
5706	Insert a string at a specific position
5707	Find the first occurrence of a string in the collection .
5708	Sets the value at the specified index .
5709	Unset a value by index
5710	Fetches data from the buffer .
5711	Parse a single file .
5712	Get line count
5713	Unzip a file .
5714	Get url size
5715	Returns an array of uploaded files .
5716	Free the stream .
5717	Remove the character from the buffer .
5718	Seeks to a specific position
5719	Insert data into the iterator .
5720	Replaces the current string .
5721	Removes the character from the iterator .
5722	Publish a directory .
5723	Closes the stream .
5724	Get admin 1 .
5725	Add country info
5726	Search for city .
5727	Search for Country Categories .
5728	Shorthand for searching by a specific feature .
5729	Creates pending redirects .
5730	Checks if a node has uri changed .
5731	Builds redirects for the given node .
5732	Creates a redirect from the given node .
5733	Adds a redirection if needed .
5734	Determines whether a node should be restricted by the given node type .
5735	Returns true if the node should be restricted to the given path .
5736	Returns the list of active domains .
5737	Get UriBuilder
5738	Extracts the name from a URL .
5739	Validate page alias
5740	Render page picker
5741	Render label callback
5742	Initialize the plugin .
5743	Add plugin action links .
5744	Get the plugin version .
5745	Get the remote version .
5746	Check the file type and ext .
5747	Check file type and ext .
5748	Parse readme authors .
5749	Get plugin slug by path .
5750	Fetches remote contributors .
5751	Validate the file
5752	Get the supported loader
5753	Load the content
5754	Create options array .
5755	Returns a list of allowed tags .
5756	Get the allowed protocols
5757	Get allowed domains .
5758	Sanitize a domain name .
5759	Sanitize an attribute value .
5760	Sanitize the URI value .
5761	Callback for sanitize attribute value
5762	Load an svg .
5763	Remove comments from SVG
5764	Create the replication flags .
5765	Create the loaders .
5766	Pre parse loaders .
5767	Convert namespaces to namespaces
5768	Parse the given options .
5769	Make cache provider
5770	Make paths .
5771	Create the loader
5772	Create variables .
5773	Loads the data from the cache
5774	Merge global variables .
5775	Get a resource by its filename
5776	Create the prefix
5777	Create the resources
5778	Add content to this node
5779	Get supported files in a directory
5780	Merge parent content .
5781	Internal method to get a value from an array .
5782	Determine if an array key exists .
5783	Parse a variable type
5784	Parses a value into a type .
5785	Match variable against regex
5786	Fetches a variable .
5787	Check if variable exists .
5788	Do replacements .
5789	Export svg .
5790	Remove a list of nodes .
5791	Remove a child node
5792	Set the absolute path to the config file .
5793	Makes absolute path
5794	Search for resources
5795	Parse content .
5796	Use imports .
5797	Imports a resource
5798	Create resource provider .
5799	Create the import name
5800	Import resource .
5801	Check a boolean value
5802	Get boolean value
5803	Get mime aliases
5804	Updates a filename extension .
5805	Check if an alias exists .
5806	Check if an alias is allowed .
5807	Load configuration data .
5808	Get supported files recursively
5809	Creates a list of paths
5810	Check if the cache is available .
5811	Create the cache
5812	Set the version of assets .
5813	Reads the configuration file and parses it .
5814	Send the given request .
5815	Set cURL options
5816	Execute a GET request
5817	Execute a PUT request
5818	Delete a request
5819	Execute a request
5820	Execute a HEAD request
5821	Execute the request
5822	Install an Xquery extension
5823	Add buckets .
5824	Implements read method
5825	Write the content to a file
5826	Check if a string is valid XML
5827	Sets up a range element
5828	Get the values as an element
5829	Append the values option to the given element
5830	Append the aggregate element to the given dom .
5831	Returns an associative array of parameters
5832	Retrieve a single document
5833	Retrieve a key - value pair
5834	Retrieve a key value
5835	Highlight a content
5836	Get the REST client .
5837	Get the manage client .
5838	Get the admin client .
5839	Get the REST API instance .
5840	Get the database instance .
5841	Get options instance .
5842	Autoload function
5843	Get the options as XML .
5844	Add an option to a root element .
5845	Add an option XML element .
5846	Read a config
5847	Write a query to the database
5848	Delete a config
5849	Set search options .
5850	Read a doc
5851	Write to a document
5852	Delete a document
5853	Read document metadata
5854	Write metadata to document
5855	Delete document metadata
5856	Set content from file
5857	Get the mime type of a file .
5858	Log a SOAP call
5859	Decode a SOAP reply
5860	Convert an associative array to an associative array
5861	Perform LDAP sync .
5862	Get list of available phone names
5863	Lists all phones for a specific site
5864	Search by name
5865	Short description of method search
5866	Get phone by name
5867	Get directory numbers by name .
5868	Returns the names of the device pool
5869	Get list of site names .
5870	Get list of lines by site .
5871	Get lines by phone name .
5872	Get all object types by site
5873	Get object type by name
5874	Delete an object type by its UUID
5875	Add capabilities .
5876	Get the latitude of the image .
5877	Get the longitude of this image .
5878	Get the type of the body
5879	get error message
5880	Get url string
5881	Create a REST API
5882	Delete the API .
5883	Wait until a request is successful .
5884	Check if the API exists
5885	Returns the term as an element .
5886	Append Term Options to Dom
5887	Append facet options .
5888	Add fragment scope
5889	Set the content file .
5890	Get a result by its URI
5891	Get result by index
5892	Returns the facet with the given name .
5893	Add constraints .
5894	Get the extract metadata element .
5895	Add preferred elements
5896	Get the transform results as an element
5897	Add collections .
5898	Delete one or more collections
5899	Add multiple permissions .
5900	Delete multiple permissions .
5901	Delete one or multiple properties .
5902	Returns the metadata as XML .
5903	Creates a Role object from XML .
5904	Enable static proxy loader .
5905	Sets the Static Container .
5906	Compares the fixture constraints .
5907	Compare the fixture indexes .
5908	Compare two fields .
5909	Get fixture files
5910	Compare fields in the live database .
5911	Sets the form .
5912	Create a horizontal form .
5913	Creates a label .
5914	Get error message .
5915	Creates a form group .
5916	Creates an action .
5917	Creates a hyperlink .
5918	Creates an alert .
5919	Create a password input field .
5920	Create a file field .
5921	Create a hyperlink .
5922	Create a secure link .
5923	Returns a link to a named route .
5924	Returns a link to an action .
5925	Returns a link to a mailto .
5926	Create a new alert .
5927	Wrapper for mb_replace
5928	Get a short message .
5929	Get a value from the cache .
5930	Set a value in the cache
5931	Removes basket item from basket .
5932	Clear order items .
5933	Updates basket .
5934	Get literal value
5935	Get the type of a literal
5936	Get language from string
5937	Create a new IRI
5938	Creates a literal .
5939	Check request MD5
5940	Builds response XML .
5941	Initialize the tokenizer .
5942	Tokenize a string
5943	Decodes a code .
5944	Obtain an id .
5945	Creates default factory
5946	Get statement with group actor .
5947	Returns a statement with the specified ID .
5948	Returns a Statement with the given identifier .
5949	Returns a statement with a sub - statement .
5950	Creates a new option .
5951	Creates a StatementResult object from the database .
5952	Attaches the event to the event manager
5953	Initialize view helper
5954	Get the last uploaded file .
5955	Collect all PDF files .
5956	Clean layout .
5957	Attaches the view resolver
5958	Attach pdf transformer
5959	Resolve a view template path
5960	Registers a new option .
5961	Returns an option .
5962	Get activity profile document .
5963	Get the AgentProfile document .
5964	Returns a state document .
5965	Add a behavior .
5966	Add value .
5967	Define default behavior .
5968	Set default value .
5969	Execute a behavior .
5970	Get the behavior for a given slug .
5971	Disable default behavior .
5972	Set the behavior .
5973	Start metrics .
5974	Stop metrics .
5975	Execute strategy .
5976	Return a new collection with every element in the collection .
5977	Get the first item in the collection .
5978	Get the last item in the collection .
5979	Get the maximum value of a given key .
5980	Reject items by callback
5981	Convert the collection to an array .
5982	Get arrayable items .
5983	Check if slug is enabled
5984	Parse feature map .
5985	Creates a new HashMap .
5986	Returns the bucket instance .
5987	Set the map
5988	Create a builder for a feature .
5989	Set the user bucket .
5990	Describe tables .
5991	Query the database table schema .
5992	Create tables .
5993	Creates a table .
5994	Create table fields .
5995	Create field .
5996	Create table relationships .
5997	Create a new relationship .
5998	Update tables .
5999	Update a table .
6000	Update fields in a table .
6001	Update a single field .
6002	Update table relationships .
6003	Update a relationship .
6004	Deletes multiple tables .
6005	Deletes a table .
6006	Set the target length
6007	Truncate a table
6008	Retrieve a paged result .
6009	Rewinds the iterator to the next row .
6010	Escape a string
6011	Add an entry to the current LDAP directory .
6012	Short description of method compareAttribute
6013	Connect to LDAP server
6014	Set a paged result on the LDAP server .
6015	Bind to the LDAP directory .
6016	get option value
6017	Add an entry to the specified attributes .
6018	Delete an entry from LDAP .
6019	Replaces an entry in the current LDAP directory .
6020	Modify an entry
6021	Modify an LDAP entry .
6022	Renames an entry
6023	Binds to the SASL .
6024	Perform LDAP search .
6025	Set an option value
6026	Verify LDAP operation
6027	Add a set .
6028	Compute the reference set .
6029	Compute the product set
6030	Get the names of a resource type .
6031	Load a resource
6032	Compares two table names .
6033	Creates a SQL statement to add a primary key to a table .
6034	Creates a create view statement .
6035	Binds a value to a PDO statement .
6036	Extract PDO type
6037	Extracts the column type from the database .
6038	Extracts the default value of a field .
6039	Add data to the entity
6040	Generate the query
6041	Creates a request object
6042	Execute a query against the IDRenderer .
6043	Set the HTTP Method
6044	Set the protocol
6045	Generate a query string
6046	Sets aggregators .
6047	Sets the filters .
6048	Sets post aggregators .
6049	Registers TinyMCE script .
6050	Validates the data against the required parameters .
6051	get the data as a json string
6052	Shows the Swagger UI
6053	Prepare database .
6054	Returns true if the table has the given column .
6055	Get column type .
6056	Update a table .
6057	Drop table migrations .
6058	Drop all tables .
6059	Rename a table .
6060	Execute a SQL command .
6061	Add media from request .
6062	Add an attachment from a file .
6063	Add data from raw data
6064	Add a file from a URL
6065	Delete thumbnails .
6066	Get the last modified timestamp
6067	Get unique name
6068	Delete thumbnails .
6069	Deletes a file .
6070	Delete empty directory
6071	Check if a directory is empty .
6072	Check if file exists
6073	Get thumb .
6074	Get thumb filename
6075	Get default options
6076	Create thumb .
6077	Get public asset path .
6078	Get the path to a temporary file .
6079	Get the type for an enum .
6080	Type for time column .
6081	Compile a timestamp column .
6082	CURL write function
6083	Main entry point
6084	Bootstrap the application .
6085	Normalize the url .
6086	Adds a route to the application .
6087	Adds a GET route to the application .
6088	Adds a POST route to the application .
6089	Add PUT route
6090	Add a patch route to the application .
6091	Adds a delete route to the application .
6092	Adds an option to the application .
6093	Add HEAD route
6094	Render the view .
6095	Get the source .
6096	Create a new migration .
6097	Ensures that a migration exists .
6098	Get stub content .
6099	Get the path to a file .
6100	Scope by CAuser .
6101	Scope for a given subject .
6102	Builds an expression for an array key .
6103	Get migration paths .
6104	Clear compiled view .
6105	Sets the query parameters .
6106	Set mail headers
6107	Set proxy .
6108	Sets the cookies .
6109	Set a cookie
6110	Setter for options .
6111	Send the request .
6112	Set the request
6113	Build blueprint instance .
6114	Build the table definition .
6115	Build the commands for this table .
6116	Add index .
6117	Add a float column
6118	Add a double column .
6119	Add a decimal column to the table .
6120	Specify timestamps .
6121	Specify timestamps .
6122	Add morphs .
6123	Defines a map of polymorphic relations .
6124	Creates a new column definition .
6125	Create foreign index name .
6126	Add a value to an array
6127	Collapse an array of accessible keys .
6128	Read value from array .
6129	Fetches a value from an array .
6130	Remove an element from an array .
6131	Applies a callback to each element of an array .
6132	Explode the pluck parameters .
6133	Calculate levenshtein .
6134	Capitalize a string .
6135	Convert a string to uppercase
6136	Formats a Location object .
6137	Create Mvc Url
6138	Get composer command
6139	Builds the parameters for the request
6140	Build the header .
6141	Build the proxy
6142	Build the cookies
6143	Register an observer .
6144	Register a model event .
6145	Boots Nicer events .
6146	Remove all observer events .
6147	Create a new location model query .
6148	Get a location by its identifier .
6149	Get a location by its slug .
6150	Flash a message .
6151	Create an overlay message .
6152	Remove all messages from the cache .
6153	Add a task
6154	Register the migrations .
6155	Register the prefix class .
6156	Register storage interface .
6157	Boot the module .
6158	Appends a LIKE statement
6159	Get the dates from a column .
6160	Find a model by its primary key
6161	Get the authenticated user .
6162	Log out the user .
6163	Log in a user .
6164	Retrieves a user by token and token
6165	Retrieve a user by credentials .
6166	Register database profiler .
6167	Register view profiler .
6168	Write migration .
6169	Get the list of events to be performed .
6170	Dumps an array
6171	Get the identifier for a variable .
6172	Generate hash for array
6173	Check array recursion
6174	Determine if the given object has recursion
6175	Dump variables .
6176	Main entry point
6177	Describe the given route .
6178	Add directories .
6179	Normalize class name
6180	Load a mapped class .
6181	Require a class .
6182	Load the package manifest .
6183	Write the manifest .
6184	Load translations from multiple drivers .
6185	Load language files .
6186	Sets a constraint on the collection .
6187	Parse read data .
6188	Creates a new query
6189	Returns true if STDOUT supports colors .
6190	Apply colors to text .
6191	Get ran .
6192	Get a list of migrations .
6193	Run all pending migrations .
6194	Run up migration .
6195	Get the list of migrations for rollback .
6196	Rollback migrations .
6197	Reset all migrations .
6198	Reset migrations .
6199	Run the migration down .
6200	Prepare the migration to run .
6201	Get migration files .
6202	Clear loader .
6203	Adds a primary column .
6204	Add a new column .
6205	Create a timestampable column .
6206	Add a soft deleteable column .
6207	Add a new column .
6208	Describe column type
6209	Determine if an option exists .
6210	Check if the parent id is the same as the parent .
6211	Scope to live pages .
6212	Get path attribute .
6213	Register phalcon .
6214	Generate the cache
6215	Returns the SQL to rename a table .
6216	Boot the HasPermalink trait .
6217	Get the slug key name .
6218	Find similar slugs .
6219	Performs an SQL query .
6220	Execute an SQL statement .
6221	Describe columns for a table .
6222	Fetches a single value from a SQL query .
6223	Fetch all records from a SQL query
6224	Insert data into a table .
6225	Update table data .
6226	Delete rows from a table .
6227	Add a limit statement .
6228	Checks if a table exists .
6229	Determine if a view exists .
6230	Creates a new table .
6231	Creates a new view .
6232	Drop a view .
6233	Add a new column to a table .
6234	Modify a column .
6235	Drop a column .
6236	Adds an index to a table .
6237	Drop an index .
6238	Adds a primary key to a table .
6239	Drop a primary key .
6240	Adds a foreign key to a table .
6241	Drop a foreign key .
6242	Describe table indexes .
6243	Describe table references .
6244	Add table options .
6245	Render the query panel .
6246	Adds a column .
6247	Modifies a column .
6248	Drops a column .
6249	Drops an index .
6250	Adds a primary key to a table .
6251	Drops a foreign key .
6252	Creates a new database table .
6253	Creates a view .
6254	Drops a table .
6255	Drop a view .
6256	Bind paths in the container .
6257	Determine if the settings table has a database table .
6258	Register the logger
6259	Register the notifications .
6260	Get fillable attributes from an array .
6261	Determine if a given key is fillable .
6262	Convert amount from one currency to another .
6263	Determine if the currency is active .
6264	Get all currencies .
6265	Register a list of modules
6266	Attach a listener
6267	Generate a random reset code
6268	Complete reset password .
6269	Check the reset password code
6270	Complete activation .
6271	Asks the user for a question .
6272	Register currency .
6273	Route middleware .
6274	Creates a middleware instance .
6275	Get the ReflectionClass for a class .
6276	Sets the value of a property .
6277	Get the value of a property .
6278	Invoke method .
6279	Save cache data .
6280	Determine if a key exists .
6281	Get the user currency .
6282	Returns true if two Coordinates are equal .
6283	Render the block .
6284	Bind an event to an event .
6285	Sorts an emitter event by priority .
6286	Unbind an event
6287	Fires an event
6288	Get the DI object
6289	Check if header exists
6290	Sets the headers .
6291	Build the headers array .
6292	Check the ellipsoid for the coordinates
6293	Get detailed message
6294	Main entry point .
6295	Register the session services
6296	Convert to DateTime
6297	Prepares the output file .
6298	Get the code from a file .
6299	Parses a file .
6300	Register database services
6301	Get node data by ID
6302	Applies a WHERE clause to the query .
6303	Applies WHERE condition to the query .
6304	Appends a WHERE clause to the query .
6305	Get the descendants of a node .
6306	Selects the depth of the query .
6307	Get the list of columns .
6308	Query for children .
6309	Sets default order .
6310	Move a node .
6311	Create a new gap between nodes .
6312	Applies a set of columns to the query .
6313	Compile column patch
6314	Get count errors .
6315	Fix tree structure
6316	Rebuild the tree
6317	Boot the purgeable trait for the model .
6318	Add a purgeable attribute to be purged .
6319	Remove the specified attributes from the entity .
6320	Get the original value of an attribute .
6321	Get a config item .
6322	Set a value in the collection .
6323	Remove an item from the collection .
6324	Saves the items .
6325	Loads the cache .
6326	Compile function .
6327	Main index action
6328	Called after an event is triggered .
6329	Add response header
6330	Get the rate limiter
6331	Update model attributes .
6332	Log a migration .
6333	Create migration repository .
6334	Get the database table instance .
6335	Get database name
6336	Set an attribute value
6337	Append value to attribute map
6338	Sets the content of the element .
6339	Add content to element collection
6340	Register a set of commands .
6341	Generate http routes cache
6342	Returns a list of queries
6343	Check if a key is too many attempts .
6344	Hit a cache hit
6345	Retrieve the number of attempts in the cache .
6346	Remove a key from cache
6347	Return the number of time available in the cache .
6348	Generate dotconst cache
6349	Register the native filesystem .
6350	Swap the instance to the shared instance .
6351	Receive a mock expectation .
6352	Create a new mock instance .
6353	Check if the instance is a mock .
6354	Resolve facade instance .
6355	Processes the result
6356	Processes a selectAll .
6357	Parse template content .
6358	Process update .
6359	Attach the listeners to the event manager .
6360	Detach this object .
6361	Geocode address .
6362	Reverse coordinates .
6363	Get the status for the migration .
6364	Lists all http routes .
6365	Get http routes infos
6366	Set the cURL options .
6367	Parse curl info
6368	Compile constants .
6369	Starts the process .
6370	Waits for the thread .
6371	Stop the process .
6372	Closes the stream .
6373	Executes the daemon .
6374	Optimize the autoload .
6375	Generate the output file
6376	Fill a value in a target array .
6377	Read a property from an object .
6378	Fetches a property from an object .
6379	Get an object property value .
6380	Set a value in an object .
6381	Register shutdown handler
6382	Handle an error .
6383	Handles an error .
6384	Resolve a migration file .
6385	Determine if the given level should be logged .
6386	Use log files .
6387	Enable daily files .
6388	Register the logger instance .
6389	Setup the database .
6390	Log SQL error
6391	Adds an item to the list .
6392	Get the value of a property .
6393	Sets the value of a property .
6394	Set the model properties .
6395	Get the original property .
6396	Check if a property has a cast type .
6397	Get the dirty properties of this object .
6398	Generate nav bar header
6399	Add a submenu to the menu .
6400	Add a button
6401	Flushes all pending messages .
6402	Add item to collection
6403	Add a css
6404	Get a gravatar from an email address .
6405	Array access .
6406	Get the database connection object
6407	Get the locale object .
6408	Adds parameters to a URL .
6409	Convert mail addresses to links
6410	Add column footer
6411	Include a css file
6412	Return the current url
6413	Build the query string
6414	Get available languages .
6415	Convert language code to locale .
6416	Sets the locale to use .
6417	Setup a property .
6418	Get all status messages
6419	Lists all available countries .
6420	Add an item to list group
6421	Set the object name .
6422	set ansi color
6423	Get type color
6424	Performs a GET request .
6425	Performs a POST request .
6426	Delete a resource
6427	Get the primary key
6428	Unset a column value
6429	Reindex data array by column name
6430	Draw the page .
6431	Sets up context
6432	Returns the number of items in the body .
6433	Returns true if the element is empty .
6434	Adds slashes to the query .
6435	Connect to the database
6436	convert array to insert
6437	Prepare data for select
6438	Set the foreign key to use .
6439	Add a slide .
6440	Finalize the carousel
6441	Add a message to the loggers .
6442	Add a status object to the log
6443	Get tag name
6444	Get a tag property
6445	Finalizes the modal
6446	Clone the next run
6447	Add ajax tab
6448	Print trace information
6449	Attach an observer to an observable sequence .
6450	Attach an observer to an event .
6451	Detaches an observer .
6452	Detach all events for a given observer
6453	Validate a Pod
6454	Get the current connection
6455	Get the driver .
6456	Generate a binding parameter
6457	Normalise driver exceptions .
6458	Creates a database .
6459	Delete a database .
6460	Returns information about the database .
6461	Lists all databases .
6462	Get a database connection .
6463	Set the connection to use .
6464	Get a toolbox .
6465	Sets the model formatter .
6466	Load a pod .
6467	Create a new graph
6468	Rename a collection
6469	Returns information about a collection .
6470	Load a pod
6471	Process a single store result .
6472	Convert array of documents to Pods
6473	Convert array to a Pod
6474	Convert driver document to a pod
6475	Create a new Vertex
6476	Create an edge .
6477	Create a new document
6478	Setup the model for a pod .
6479	Determine if the model was already stored .
6480	Add a command to the transaction manager
6481	Validates a node type .
6482	Applies a callback to an array of values .
6483	Wrapper for crawler .
6484	Parse url attribute
6485	Parses an image node
6486	Parses a string and returns it .
6487	Parses a date time node .
6488	Loads a class .
6489	Starts coverage .
6490	Initializes the config object .
6491	Dispatches an edge to another model
6492	Returns a list of Edges for this graph .
6493	Convert this object to a Vertex document .
6494	Encodes the given object .
6495	Create a new collection
6496	Delete a collection
6497	Renames a collection
6498	Remove a collection
6499	Get collection information
6500	Returns information about a collection .
6501	Count collection
6502	Load a collection
6503	Unload a collection
6504	Get information about an index
6505	Get the list of geo fields for a collection
6506	Find one or more records
6507	Get collection name
6508	Delete user .
6509	Returns user information
6510	Delete AQL user functions by name
6511	Lists all registered user functions
6512	Returns the server version .
6513	Returns the server information .
6514	Returns the server time .
6515	Set the value of a property .
6516	Remove a property from this Pod .
6517	Get a system property .
6518	Set the document ID
6519	Set the proximity information for the query .
6520	Reset the meta .
6521	Convert to array
6522	Convert to JSON
6523	Return transaction data as a JSON string .
6524	Convert this object to a driver document .
6525	Load data from driver .
6526	Load data from an array
6527	Called on event .
6528	Set the To
6529	Get the id of the To
6530	Set the from attribute
6531	Get the from id
6532	Convert edge to driver document .
6533	Starts a transaction .
6534	Commits the pending commands .
6535	Clear transaction info
6536	Add a read collection
6537	Add a write collection
6538	Pauses the current transaction .
6539	Resumes the current transaction .
6540	Add a new command to the queue
6541	Search the list of commands for the specified action and object .
6542	Get a random ID
6543	Create a new graph
6544	Delete a graph .
6545	Get a graph information
6546	Get outbound Edges in a model
6547	Get the filters .
6548	Renders the filter wrapper .
6549	Render all widgets
6550	Open a filter container .
6551	Closes a container closing tag .
6552	Open the filter form
6553	Close the form .
6554	Check if filter is active
6555	Create a filter button .
6556	Returns a reset button .
6557	Render back to list
6558	Get the storage key for persist .
6559	Determine if the filter parameter is set to true .
6560	Get fulltext search conditions .
6561	Flatten value options .
6562	Get list filters .
6563	Generate a redirect URL based on the post data .
6564	Add filter parameters to url .
6565	Sets default filters .
6566	Build PDO statement
6567	Reduce the collection to a single value .
6568	Type check .
6569	Type cast to an iterable .
6570	Register the bugsnag client .
6571	Creates a new client instance .
6572	Setup user detection .
6573	Setup paths .
6574	Create a new pipeline builder .
6575	Unsubstubs a step .
6576	Create a new pipeline using the given iterable .
6577	Sets the keys of the collection .
6578	Slice a slice .
6579	Sorts the values of the collection .
6580	Set multiple variables at once .
6581	Set a variable in the page .
6582	Get pathname .
6583	Get Script Tag
6584	Returns true if the script list is a valid script combination .
6585	Convert a UTF - 8 string to list
6586	Creates fake users .
6587	Get all available layouts .
6588	Add global variables .
6589	Generate a page collection
6590	Set param value
6591	Extracts parameters from a SimpleXMLElement .
6592	Run a git command .
6593	Sorts an array by date .
6594	Remove a feed
6595	Replaces a feed item
6596	Merge another feed
6597	Slice the list
6598	Get the list of users that have the same name .
6599	Insert a new record in the DB .
6600	Writes a feed to XML .
6601	Set the current item .
6602	Returns the buffer .
6603	Sort items by date .
6604	Import data from config
6605	Set the data from the given data
6606	Sets the source directory .
6607	Sets the destination directory .
6608	Find the layout for a page .
6609	Fallback for a page .
6610	Parse the content .
6611	Get the current section
6612	Get permalink
6613	Sets the configuration .
6614	Builds the application .
6615	Returns the application version .
6616	Filter pages by variable value
6617	Sorts an array by date .
6618	Creates a URL
6619	Minify a file
6620	Convert a path to a CSS file .
6621	Read time from text
6622	Creates a hash from a file
6623	Collect pages
6624	Render a feed .
6625	Load an RSS feed
6626	Sniff a string
6627	Check input against type
6628	Sniff all input data
6629	Determine the name of the input .
6630	Save a schedule .
6631	Render an RSS feed
6632	Create Item node
6633	Get the author name .
6634	Get the comments route .
6635	Checks if a string contains XML syntax markers .
6636	Collect taxonomies from pages .
6637	Create page pages .
6638	Compile views .
6639	Compile all views in a directory .
6640	Compile a single view file .
6641	Generate a diff .
6642	Parse a diff string
6643	Boot extension .
6644	Finish the extension .
6645	Register active extensions .
6646	Run the after event .
6647	Compile service providers .
6648	Write the manifest file .
6649	Register deferred service provider .
6650	Load queue service provider .
6651	Activate an extension .
6652	Map extension aliases .
6653	Register domain aware domains .
6654	Detect Orchestra Platform .
6655	Get an option .
6656	Publish extension .
6657	Register an extension .
6658	Get the route .
6659	Mark extension as activated .
6660	Refresh an extension .
6661	Reset an extension .
6662	Check if the field should be ignored .
6663	Create the theme instance .
6664	Bootstrap the application .
6665	Boot the extension configuration .
6666	Bootstrap form .
6667	Bootstrap menu handler .
6668	Bootstrap the placeholder placeholders .
6669	Bootstrap the validation rules .
6670	Attaches the event listener to the application .
6671	Initiate the theme .
6672	Set the theme .
6673	Boot the theme .
6674	Resolves the theme .
6675	Get all available theme paths .
6676	Get theme autoload files .
6677	Validates provided theme .
6678	Get available themes .
6679	Render a macro .
6680	Filters a date .
6681	Verify status .
6682	Add path .
6683	Detect extensions .
6684	Get the contents of a manifest .
6685	Generate the manifest config .
6686	Get composer lock data .
6687	Try to guess the extension name from the manifest .
6688	Guess extension path .
6689	Resolve extension namespace .
6690	Validates an extension name .
6691	Register the view finder instance .
6692	Register the theme manager .
6693	Detects all themes .
6694	Set the current theme .
6695	Set the theme resolver .
6696	Register the extension .
6697	Register extension config manager .
6698	Register the extension finder .
6699	Register the status checker .
6700	Execute the listener .
6701	Get the scheme .
6702	Set the domain name .
6703	Get the domain .
6704	Get the group .
6705	Determine if the path matches the given pattern .
6706	Get the prefix .
6707	Get the root scheme .
6708	Get the base url .
6709	Resolve the base URL .
6710	Safely parse a YAML string .
6711	Validates a duplicate key
6712	Register a plugin .
6713	Deactivates a plugin .
6714	Register extension providers .
6715	Register an extension plugin .
6716	Boot the plugin .
6717	Start the autoloader .
6718	Fire extension event .
6719	Get the autoload files .
6720	Load autoloader file .
6721	Processes deprecated types .
6722	Start the application .
6723	Generate log .
6724	Generate call trace .
6725	Add alert message .
6726	Starts a daemon .
6727	Fork function .
6728	Get the slug of this record .
6729	Update the URI s slug
6730	Sends the headers to the session
6731	Sets a cookie
6732	Clear all cookies
6733	Process request arguments
6734	Store uploaded files .
6735	Remove argv .
6736	Match array with given regex .
6737	Remove htmlspecialchars from array
6738	creates an array of integers
6739	Removes all cache files
6740	Combine less files .
6741	Connect to a server .
6742	Executes an SSH command .
6743	Determine if the client is a valid IP address .
6744	Establish the IP address
6745	Create a named pipe .
6746	Registers a new deployer .
6747	Returns the registered deployer .
6748	Adds a server .
6749	Set the list of servers .
6750	Returns the named server .
6751	Perform the deploy .
6752	Get server options .
6753	Processes an opening token .
6754	Generate the slug for ajax action
6755	Single action .
6756	Trigger the AJAX callback .
6757	Handle ajax request
6758	Get a post request .
6759	Generate a random hex
6760	Starts shutdown function
6761	Clear session variables
6762	Check if value is serialized
6763	Handle slug action
6764	Adds a new method .
6765	Updates the current session .
6766	Clears the session .
6767	Attempt to verify the user s session ID
6768	Open session .
6769	Delete expired sessions .
6770	Attempt to match the given rule .
6771	Returns an associative array of data for the current page .
6772	Returns true if the page is the same as the current page .
6773	Loads class metadata .
6774	Create a new condition .
6775	Initialize all installed plugins .
6776	Get the list of plugins
6777	Load Twig .
6778	Set default language
6779	Check the expiration date of the token .
6780	Load a view
6781	Adds a variable to the script .
6782	Add a javascript file
6783	Adds a stylesheet to the page
6784	Get file content
6785	Get content with template
6786	get all scripts
6787	Get all css files
6788	Get an asset path
6789	Returns true if the controller is allowed to perform the action .
6790	Get access for RBAC
6791	Get the roles chain
6792	Get the language for a user .
6793	Translates a choice
6794	Get the translation for a given locale .
6795	Get translation file
6796	Get translation for given id
6797	Get the basic translation for the given ID .
6798	Generate the toggle command .
6799	Build the toggle commands for the given attribute .
6800	Build the edit checkbox commands .
6801	Main entry point
6802	Prepare the controller action
6803	Execute the ACL
6804	Execute auth .
6805	Execute the resolve route
6806	Set and App Libraries
6807	Get a library instance
6808	Create core and controller
6809	call a class and return the result
6810	Returns an associative array of arguments for the function .
6811	Get the role and user by token
6812	Get the role associated with a user .
6813	Get current options .
6814	Set multiple parameters from an array
6815	Get the value of a parameter
6816	Sanitizes a variable
6817	Open a database connection
6818	Close a connection
6819	Execute a SQL query
6820	Executes a SELECT query and returns all results
6821	Insert a record into the database .
6822	Deletes rows from the database .
6823	Executes an UPDATE query and returns the affected rows .
6824	Logout the user .
6825	Set the user id
6826	Sets the username .
6827	Sets the role ID .
6828	Sets the role name .
6829	Validate value against constraint
6830	Returns a list of installed plugins for a given path .
6831	Search for plugins in a given path .
6832	Search the plugin factory class
6833	Determine if a plugin implements a specific implementation .
6834	Convert a closure to a string .
6835	Execute a closure .
6836	Execute a file .
6837	Run the command for Windows .
6838	Sets the path to the autoload file .
6839	Returns true if the process is running .
6840	Kill this process .
6841	Reset all properties
6842	Create url from string
6843	Get the first available image driver
6844	Build an image
6845	Get proportional width
6846	Get proportional height
6847	Formats a number of bytes .
6848	Format bytes in bytes .
6849	Create a new Session instance .
6850	Initialize driver instance
6851	Parse POST data .
6852	Generate the URL for the request .
6853	Get server parameter .
6854	Get the default input definition .
6855	Register the console commands .
6856	Get the path to a model .
6857	Adds the force option to the command .
6858	Adds the model argument .
6859	Validates the model argument .
6860	Adds table argument .
6861	Validates the table argument .
6862	Get Table instance
6863	Generate a file
6864	Handle the given request .
6865	Is the stream seekable?
6866	Creates a parser using the given content types .
6867	Adds a new body parser .
6868	Adds the module argument .
6869	Adds the controller argument .
6870	Creates a PSR - 7 request .
6871	Creates a server request .
6872	Creates a stream .
6873	Creates a stream from a file .
6874	Creates a new uploaded file .
6875	Create a new Uri instance
6876	Formats a number of bytes .
6877	Formats a number .
6878	Normalize the given bytes .
6879	Normalizes precision number .
6880	Returns a new instance with the specified HTTP method .
6881	Sets the URI .
6882	Get target from URI
6883	Add a new middleware to the stack
6884	Get the reason phrase for the given code
6885	Get incoming messages .
6886	Get user from incoming message .
6887	Get file extension
6888	Normalize a filename .
6889	Get the contents of the stream .
6890	Fixes WordPress site URL .
6891	Fix wp - include folder
6892	Fix network admin url filter .
6893	Fix WordPress double slashes .
6894	Add filters .
6895	Set the name of the WordPress folder .
6896	Convert url to full path
6897	URL encode path
6898	URL path decode
6899	Get a directory content
6900	Write data to database .
6901	Write a log entry
6902	Record memory usage .
6903	Log time load .
6904	Write sections to a specific section .
6905	Flip array keys
6906	Set the file stream .
6907	Get the hash of the uploaded file .
6908	Get the media type
6909	Get query params
6910	Check if request is ajax request
6911	Convert json to document
6912	Creates an array of entities from an array of data
6913	Creates an array of actions from the given data array .
6914	Creates an array of Field objects from data array .
6915	Convert data array to Link objects
6916	Sends the given request .
6917	Execute the given request .
6918	Prepare the request
6919	Set the target URL
6920	Set request headers
6921	Creates a response object from the curl handler .
6922	Extract the header from the result
6923	Parse header string
6924	Count the amount of entries for a given log type .
6925	Display the view
6926	Gather all included files .
6927	Gathers the input section from the GET section .
6928	Collects data from the POST section .
6929	Gather the input section from the session section .
6930	Get the current microtime .
6931	Returns a summary for a specific section .
6932	Create an array of uploaded files
6933	Create a new uploaded file .
6934	Flip array keys
6935	Array merge recursive
6936	Processes the session .
6937	Shows the add form .
6938	Show the edit form .
6939	Attempt to edit an existing record .
6940	Return a redirection to edit an object .
6941	Order items .
6942	Delete an existing record .
6943	Get the uploaded files .
6944	Set the uploaded files .
6945	Checks an array of uploaded files .
6946	Parse request headers
6947	Return an instance with the specified attribute .
6948	Remove an attribute from the request .
6949	Send 304 Not Modified
6950	Get a specific header .
6951	Set the status code
6952	Process the middleware .
6953	Get MySQL version
6954	Authenticates the user with the given credentials .
6955	Find all active users .
6956	Find all deactivated users .
6957	Add a new user
6958	Returns the metric option .
6959	Set the current language based on post id .
6960	Determine if the given token is an encrypted container .
6961	Determine if the given token is encrypted .
6962	Dumps the class .
6963	Export an array .
6964	Pre - process .
6965	Post global process .
6966	Creates a new parser exception for the given token types .
6967	Creates a new container .
6968	Recover a deleted record
6969	Process new class extensions
6970	Process new config classes
6971	Process configuration class
6972	Processes a class
6973	Sets the list of definitions .
6974	Returns a specific definition .
6975	Remove a definition .
6976	Sets the configuration classes .
6977	Generate the container classes
6978	Dumps the containers .
6979	It is used to return the inner value .
6980	Sets the email address .
6981	Send notice .
6982	Make a call .
6983	Create a JsonResponse object from an exception
6984	Parse http response .
6985	Requests permission for action
6986	Wait for subscription .
6987	Sends information about an action result .
6988	Format layout template files .
6989	Write the configuration to a file .
6990	Convert a value to dashed .
6991	Get a slice of the string .
6992	Get indices .
6993	Get the name of the option .
6994	Validate values array argument .
6995	Creates an option .
6996	Declare message to be sent to reply stack
6997	Get the value of a property .
6998	Returns a list of valid matchers .
6999	Compare two images
7000	Create a diff based on the difference between two images .
7001	Create comparison image .
7002	Compares two images .
7003	Adds a route to be handled by POST method .
7004	Add a route to the routing table
7005	Match url against route
7006	Run the application .
7007	Redirect to given url
7008	Parse route parameters
7009	Get the date of a file .
7010	Save image action
7011	Perform a GET request .
7012	Perform a POST request .
7013	Set the authentication headers
7014	Get a config option
7015	Validate the config
7016	Get excerpt from text
7017	Handles PHP errors .
7018	D dot notation for content_extension .
7019	Validate widget ID .
7020	Set Cxense User ID
7021	Get the total amount of documents .
7022	Append a string to this string .
7023	Prepend a string to the beginning of this string .
7024	Checks if the string matches the given pattern .
7025	Limit the number of words .
7026	Generate a random UUID .
7027	Join array with values
7028	Convert this string to HTML entities .
7029	Removes a substring from the current string .
7030	Limit the string .
7031	Limit the string to a number of characters .
7032	Convert the string to a container .
7033	Encrypt the token .
7034	Create a token from encrypted string .
7035	Convert the property to a container .
7036	Generate parser from a given grammar file
7037	Set the organization settings
7038	Get a list of documents .
7039	Set the number of items per page
7040	Set the page number
7041	Get the value of the given value .
7042	Get searchable value .
7043	Convert a string value to bool .
7044	Get the grammar .
7045	Creates a GIF command .
7046	Creates a command to convert images to a result image .
7047	Get many tokens .
7048	Formats this number .
7049	Returns true if the property has the given name .
7050	Returns a property by its name .
7051	Remove a property by its name .
7052	Check if a method exists by its name
7053	Returns a method by its name .
7054	Remove a method by its name .
7055	Parse meta file
7056	Run all registered plugins
7057	Load the plugins .
7058	Setup routes .
7059	Get an item from the collection .
7060	Set a value in the collection .
7061	Push a value to a key .
7062	Search the collection with the given value .
7063	Get keys by field
7064	Remove duplicates from the collection .
7065	Returns an array with numeric keys .
7066	Joins the collection into a string .
7067	Join by key .
7068	Returns a new collection with the specified key .
7069	Splits the collection into chunks .
7070	Filter the collection using a callback function .
7071	Apply a callback to each item in the collection .
7072	Merge items into this collection
7073	Merge items with a given key
7074	Increase the number of items .
7075	Get random key
7076	Get random item
7077	Slice the collection .
7078	Reject items from the collection .
7079	Remove an item from the collection .
7080	Reverses the collection .
7081	Group items by key .
7082	Remove offset from the collection .
7083	Get the rest of the collection .
7084	Get the rest of the collection
7085	Get the difference between two values .
7086	Take a value from the map
7087	Get an item from the collection
7088	Returns a new Collection containing the values of this set .
7089	Return a new collection with values that match the given condition .
7090	Create a new instance from a JSON string .
7091	Create Container from file
7092	Create a new instance from a serialized string .
7093	Create a new Container from encrypted data .
7094	Create object from string
7095	Build where condition .
7096	Recursively apply a specific key to an array
7097	Convert an iterator to an array .
7098	Get value by key .
7099	Filters an array recursively .
7100	Remove items from array .
7101	Remove duplicates from an array .
7102	Get a key .
7103	Add object to section
7104	Returns the command option .
7105	Get excerpt from a set of files .
7106	Fetches a value from an array using dot notation .
7107	Remove a key from an array .
7108	Get an item from an array .
7109	Check if key exists in array
7110	Set a value in an array .
7111	Searches for a value in an array .
7112	Render a library
7113	Deny access denied .
7114	Get new access token
7115	Set the input ID .
7116	Sets bounding box .
7117	Add autocomplete type .
7118	Remove an autocomplete type .
7119	Returns the restriction for the given component type .
7120	Sets the component restrictions .
7121	Adds a component restriction .
7122	Remove a component restriction .
7123	Sets input attributes .
7124	Sets an input attribute .
7125	Implements identiptern .
7126	Convert an image to Imagick .
7127	Compress an image .
7128	Compress a SVG file .
7129	Compress a PNG image .
7130	Decode data url
7131	Generate one image
7132	Convert file extension to format
7133	Convert format to file extension
7134	convert file extension to mime type
7135	Convert image format to compression type
7136	Convert format to compression quality .
7137	Set file extension
7138	Change file extension .
7139	Parse format arguments .
7140	Send the request to the server .
7141	Clean input data
7142	Get the maximum size of a file .
7143	Renders a circle .
7144	Check if version is valid
7145	Check if the version is a valid dev .
7146	Check if the version is a valid version .
7147	Create CSRF token .
7148	Create a CSRF input .
7149	Verify a CSRF token .
7150	Create request from globals .
7151	Get form data .
7152	Get form data .
7153	Get the response body .
7154	This method is used to replace all AMPs in a URL .
7155	Render a map type id .
7156	Get first in name .
7157	Returns the last name in a string .
7158	Converts a name to an acronym .
7159	Convert a name to a variable name .
7160	Checks if a string is a tag .
7161	Validates a UUID .
7162	Get shard id from UUID .
7163	Validate shard ID .
7164	Validate a type ID .
7165	Validate type ID .
7166	Convert a UUID to a local ID .
7167	Validates a local ID .
7168	Parse a UUID .
7169	Generate a 64 - bit integer .
7170	Renders a polyline .
7171	Set the center .
7172	Sets the latitude .
7173	Sets the longitude of the coordinate .
7174	Set the position to wrap
7175	Set the control position .
7176	Set the scale control style .
7177	Get the geocoder status
7178	Get a value from the cache .
7179	Get a sub - path for a primary key .
7180	Calculate sha1 keys .
7181	Get a class instance
7182	Match string against regex
7183	Get a template instance .
7184	Get strength of password .
7185	Get a process from the cache
7186	Return the server s server id
7187	Determine if the given url exists in the map
7188	Check the map cache
7189	Check the contents of a file .
7190	Cache memcache .
7191	memcache memcache
7192	Get the map
7193	Get map from file
7194	Check if url is local
7195	Check if var is valid
7196	Convert a variable to acron .
7197	Convert a variable to a slug .
7198	Convert a variable to camel case .
7199	Render size .
7200	Determine if the given email is a role - based role .
7201	Parse the given value into an array of addresses .
7202	Parse mail headers
7203	Recursively parse the given value .
7204	Parses a content type into a presentation .
7205	Parse the given representation to a class name
7206	Get the percentage between two numbers .
7207	URL safe base64 encode
7208	URL safe decode .
7209	Create a new nonce .
7210	Create a nonce field .
7211	Verify a nonce token .
7212	Sets the origin origins .
7213	Get the difference between two times .
7214	Get an array of items by keys
7215	Render a marker .
7216	Build the object
7217	Renders a marker shape .
7218	Render a scale control style .
7219	Checks if a slug is valid
7220	Check if a slug is reserved .
7221	Convert slug to name
7222	Convert a slug to a variable name .
7223	Sets the list of coordinates .
7224	Store the cache .
7225	Returns a single repository
7226	Parse template .
7227	Replace variables .
7228	Check if file has parent .
7229	Get parent var .
7230	Get child template
7231	Get the options to pass to the DatabaseSeeder
7232	Renders a rotate control .
7233	Encode a value .
7234	Decode a value
7235	Call the controller action .
7236	Render kml layer
7237	Get a value from the pool
7238	Store a value in the cache .
7239	Clear a cache entry
7240	Create a key for a primary key .
7241	Generate the primary key .
7242	Compare two servers .
7243	Add server connections to the pool .
7244	Renders an autocomplete container .
7245	Render the javascripts for the autocomplete
7246	Renders an autocomplete object .
7247	Register the seeder .
7248	Close the connection .
7249	Removes the output compression .
7250	Sets the location of the route .
7251	Set stopover
7252	Convert an upload error code to a string .
7253	Set file extension .
7254	Change the extension .
7255	Returns whether an asset option exists .
7256	Get an asset option
7257	Sets an asset option .
7258	Remove an asset option .
7259	Modify request attributes .
7260	Set the zoom control style .
7261	Decode one id
7262	Sets the results .
7263	Set the status of the response .
7264	Checks if a string is valid
7265	Determine if the user agent is an engine .
7266	Normalize a value to a string
7267	Generate page URL
7268	Set whether highways should be avoided .
7269	Set whether or not to avoid rounds .
7270	Sets the list of destinations .
7271	Adds a new destination .
7272	Adds an origin to the distance matrix .
7273	Sets the region .
7274	Set the language .
7275	Set travel mode
7276	Sets the unit system .
7277	Get the control positions
7278	Set the status of the DirectionsResponse .
7279	Renders the overview map .
7280	Render a bounding box .
7281	Render extends .
7282	Print statistics .
7283	Sets markers .
7284	Sets the helpers .
7285	Returns a helper by its name .
7286	Sets the extension helpers .
7287	Returns an extension helper by name .
7288	Remove an extension helper .
7289	Renders the HTML container .
7290	Render the stylesheet
7291	Render javascripts
7292	Render javascript libraries
7293	Render js before map
7294	Render js after map
7295	Renders a JS container .
7296	Renders js container coordinates .
7297	Renders JS container bounds .
7298	Renders the points of a map
7299	Renders the js container sizes
7300	Renders a JS container .
7301	Renders js container objects .
7302	Renders js container .
7303	Renders the groundlay .
7304	Renders the js container polygon .
7305	Renders js container polylines .
7306	Renders the js rectangle of a map .
7307	Renders js container info windows
7308	Renders JS container images .
7309	Renders js container markers .
7310	Renders the js container cluster .
7311	Render kML container
7312	Renders js container .
7313	Render js container extra
7314	Renders a map .
7315	Renders the center cell .
7316	Renders the shape of a map .
7317	Computes the coordinates of a map .
7318	Compute the bounds of a map .
7319	Compute map points
7320	Computes the sizes of a map .
7321	Compute marker images .
7322	Compute marker shapes .
7323	Compute marker info windows
7324	Render map controls
7325	Render a control .
7326	Generate a UUID version 1 .
7327	Generate a UUID version 3 .
7328	Generate v4 UUID
7329	Generate v4 UUID .
7330	Get a package by name .
7331	Applies a callback to each item in the collection .
7332	Filter the collection using a callback .
7333	Add a package contract to the collection .
7334	Sets the address of the geocoder .
7335	Sets the coordinate .
7336	Sets bounding box .
7337	Sets the region of the request .
7338	Sets the request language .
7339	Load a variable .
7340	Get a Route instance .
7341	Parse a value to an array
7342	Set flags for WordPress .
7343	Sorts an array by key .
7344	Get the request method .
7345	Get the scheme .
7346	Get the host name .
7347	Get the root host .
7348	Check if the request is a SSL proxy
7349	Check if this is a localhost .
7350	Set location type .
7351	Returns a regex that is used to escape the given characters .
7352	Returns an array of directives
7353	Overload data .
7354	Overload property data .
7355	Get the data that should be used to overwrite the data .
7356	Overload data .
7357	Opens a URL .
7358	Set marker anchor .
7359	Set the origin of the marker image .
7360	Sets the scaled size .
7361	Sets the size of the attachment .
7362	Renders the info window .
7363	Render open tag .
7364	Render the info object
7365	Register enabled modules .
7366	Get asset url .
7367	Load routes .
7368	Check if function is callable
7369	Renders a ground overlay .
7370	Emits the response .
7371	Set a value in the cache .
7372	Get a key from the cache .
7373	Unset a key .
7374	Unset a key from the cache .
7375	Add a value by reference key
7376	Remove a key from the cache
7377	Remove keys by reference pattern
7378	Renders a map type control .
7379	rounds a scalar value
7380	Convert a value to a single quotes
7381	Double quotes a value
7382	Renders the control style .
7383	Signs a URL with a signature .
7384	Get a highlighter instance .
7385	Generate shard ID .
7386	Assign shard id
7387	Set travel mode .
7388	Sets the prefix variable .
7389	Return a list of country options .
7390	Return a list of active items .
7391	Renders a StreetView control .
7392	Normalize a value
7393	Check if value matches a given regex .
7394	Recursively normalize a value
7395	Bounds special characters in a string .
7396	Convert a URL to a URI pattern .
7397	Set width unit .
7398	Set heightUnit .
7399	Generate a new key
7400	Checks if the given value is a valid number .
7401	Strip the query from a URL .
7402	Parse a query string into an associative array .
7403	Builds a query string
7404	Add a SHA256 signature to the URL .
7405	Remove SHA - 256 signature .
7406	Check if a SHA256 hash is valid .
7407	Sets the coordinates .
7408	Add a polygon .
7409	Create a new customer .
7410	Update a customer .
7411	Returns the amount of the given currency .
7412	Get a scope entity by identifier
7413	Renders a scale control .
7414	Generate url for geocoder
7415	Builds a Geocoder response .
7416	Builds a GeocoderResult object from a Geocoder result .
7417	Builds the geocoder address components .
7418	Builds a Geocoder address component .
7419	Builds Geocoder Geoder Geoder Geoder Geoder Geometry object .
7420	Processes the specified distance request .
7421	Generate the url for a distance request
7422	Parse the response .
7423	Builds a DistanceMatrixResponse object from a response .
7424	Short description of method buildDistanceMatrix
7425	Short description of method buildDistanceMatrixResponse
7426	Short description of method buildDistanceMatrixResponseElement
7427	Render a point .
7428	Parses the given parameter string into an array .
7429	Parse the given parameters .
7430	Get the current HTTP headers .
7431	Send headers to the browser .
7432	Send no cache headers
7433	Get status slug .
7434	Get status message .
7435	Sends the HTTP status .
7436	Parse the header value .
7437	Remove tags from string
7438	Register migrations .
7439	Register Translations .
7440	Set the pixel offset
7441	Set the open event .
7442	Renders a pan control .
7443	Returns an array of mouse events
7444	Sets the map type ids .
7445	Add a new map type id .
7446	Sets the type control style .
7447	Set cookie .
7448	Get cookie value
7449	Renders a DOM event .
7450	Render dom event only .
7451	Renders an event .
7452	Renders an event only once .
7453	Render the animation .
7454	Renders a ZoomControl object .
7455	Sets the maximum time limit .
7456	Check a slug .
7457	Returns a list of address components .
7458	Sets the list of address components .
7459	Set partial match .
7460	Generate a gravatar URL .
7461	Set the center of the map .
7462	Returns whether or not a map option exists .
7463	Sets multiple map options .
7464	Get a specific map option .
7465	Set a specific map option .
7466	Remove a map option .
7467	Returns true if the given stylesheet option exists .
7468	Sets multiple stylesheet options at once .
7469	Returns a specific stylesheet option .
7470	Sets a specific stylesheet option .
7471	Remove a specific stylesheet option .
7472	Set the map type control .
7473	Set overview map
7474	Set Control Position
7475	Set the rotate control
7476	Sets the scale control .
7477	Set the street view control
7478	Set Zoom Control
7479	Add marker .
7480	Add info window .
7481	Add a polyline .
7482	Add an encoded polyline .
7483	Add a polygon .
7484	Add a rectangle .
7485	Add a circle .
7486	Add a ground overlay .
7487	Save a value to the cache
7488	Deletes the file
7489	Set whether or not the directions should be avoided .
7490	Set whether or not to prevent rounds .
7491	Sets the destination .
7492	Set whether or not the ways to optimize .
7493	Sets the origin coordinate .
7494	Set whether or not the route alternatives should be used .
7495	Sets the region of the request .
7496	Sets the request language .
7497	Set travel mode .
7498	Set unit system .
7499	Sets an array of ways
7500	Add a new route
7501	Determine if this travel is valid .
7502	Submits a JSON request .
7503	Log issue .
7504	Log a review .
7505	Write log file .
7506	Clean log event name
7507	Remove old log files
7508	Perform a curl request .
7509	Parse source .
7510	Build a document .
7511	Parse section from source string
7512	Parse the metadata .
7513	Get a query var
7514	Get template .
7515	Get a remote object .
7516	Generate a remote hash .
7517	Convert a value to ASCII
7518	Get the status of the distance matrix .
7519	Remove leading characters from a string .
7520	Sets the steps .
7521	Route Directions .
7522	Builds directions response .
7523	Builds the directions routes .
7524	Builds the DirectionsRoute object from the provided routes .
7525	Build directions array .
7526	Builds the directionsLegacy object from the given array .
7527	Builds directions steps .
7528	Builds directions step .
7529	Lightening the color by the given percentage .
7530	Darkens the color by the given percentage .
7531	Apply saturation to the current color .
7532	Apply the saturation of the color .
7533	Combine two HSL values .
7534	Starts a new session .
7535	Returns true if the version is valid .
7536	Returns true if the given version is valid .
7537	Returns true if the given version is valid .
7538	Return a formatted date .
7539	Get the time of the version .
7540	Return an instance with the last - modified header .
7541	Return an instance with success status .
7542	response with error
7543	Output the response
7544	Sets the legs .
7545	Sets the list of warnings .
7546	Sets the list of possible ways .
7547	Render the given zoom control style .
7548	Get a specific metadata .
7549	Issue an access token .
7550	Handle a resource request
7551	Get the access token repository
7552	Adds slashes to the string .
7553	Remove values from a string
7554	Render google maps
7555	Sets the elements .
7556	Render the control position .
7557	Get the current IP address .
7558	Get the region of an ip .
7559	Get the country by ip .
7560	Determine if the request is ajax .
7561	Determine if the request is an API .
7562	Get the active REST action .
7563	Determine if the action is being executed .
7564	Subscribe a new user to a list
7565	Get member data
7566	Update a user s status
7567	Delete a user
7568	Calculate sha1 .
7569	Adjust luminosity .
7570	Clean a hex string .
7571	Remove empty numeric config arrays .
7572	Create request instance
7573	Create request body class
7574	Remove empty numeric arrays .
7575	Render a rectangle .
7576	Convert element to html
7577	Convert an array to a child element
7578	Renders a marker .
7579	Get the license key .
7580	Returns a list of libraries based on a map .
7581	Escape order .
7582	Serializes a Closure object .
7583	Unserialize a closure .
7584	Serialize a value .
7585	Unserialize the value .
7586	Generate embed markup
7587	Get an embed .
7588	Embed string via WordPress .
7589	Renders an encoded polyline .
7590	Set the southwest coordinate of the bounding box .
7591	Sets the NorthEast coordinate .
7592	Returns the center coordinates .
7593	Convert bytes to bytes
7594	Get remote file contents
7595	Unpack url parts
7596	Render a Coordinate object .
7597	Render a marker image .
7598	Parses an XML string .
7599	Pluralize an array of attributes .
7600	Thrown when the travel matrix request is invalid .
7601	Parses a host name into an array .
7602	Unparse name parts
7603	Set marker position
7604	Set marker animation .
7605	Set the icon .
7606	Set the shadow image .
7607	Set marker shape .
7608	Callback for header ID
7609	Get first image url .
7610	Convert HTML attributes to HTML attributes .
7611	Set bounding box .
7612	Get the message for the given slug .
7613	Get error messages .
7614	Get error data .
7615	Add an error .
7616	Add a coordinate .
7617	Load HTML .
7618	Minify stylesheets .
7619	Indent the current node .
7620	Sets the organization reference .
7621	Creates the set password view model
7622	Get the organization entity
7623	Create error view model
7624	Add an asset
7625	Reverses the styles of the given params
7626	Add first item to the file
7627	Add an asset after another .
7628	Add meta data .
7629	Renders meta tag
7630	Generate controller .
7631	Load a file
7632	Create the query
7633	Processes employee by email
7634	Validate email address .
7635	Load or create a user .
7636	Load the organization .
7637	Proxy the given method .
7638	Gets the cursor for a given organization .
7639	Find an organization by name
7640	Find entity by user id
7641	Find Employee by Employee
7642	Creates a new instance with the given name .
7643	Find a draft
7644	initialize contact configuration
7645	Determine if the given user is a employee .
7646	Update user permissions
7647	Sets the organization name .
7648	Set the user s permissions .
7649	Get the image .
7650	Set contact .
7651	Get the list of employees .
7652	Get employee by id
7653	Get employees by role
7654	Set creation options .
7655	initialize the collection
7656	Get formular for organization
7657	Returns the URI for the image .
7658	Stores an organization image .
7659	Extracts the properties of an object .
7660	Hydrate value .
7661	Check if the user has permission to create a JOIN .
7662	Configure form .
7663	Ensure the order number is correct .
7664	Encrypts 3DES
7665	Create Merchant Signature Notifier
7666	Validates the signature .
7667	Creates a signed request
7668	Make a request to the API .
7669	Get ticket articles for this ticket .
7670	Make the request .
7671	Make a POST request .
7672	Make a PUT request .
7673	Get articles for a ticket
7674	Get a value by key
7675	Get a remote object
7676	Retrieve a list of objects
7677	Creates a new object .
7678	Updates the object .
7679	Delete this object .
7680	Get the URL for a method .
7681	Get ticket .
7682	Add a ticket .
7683	Search for objects by search term .
7684	Remove a ticket .
7685	Deletes a shared memory file .
7686	High level function to fetch the proxy type .
7687	Get connection info
7688	Do the loop .
7689	Execute the request .
7690	Applies a callback to each item in the collection .
7691	Get a single item
7692	Get the copy history
7693	Fetches the api data .
7694	Validates the given permissions .
7695	Add a parameter to the query .
7696	Add multiple params
7697	Creates a new request transaction .
7698	Save photos .
7699	Start callback .
7700	Get an access token
7701	Convert hits to items
7702	Search by query .
7703	Replaces all leading zeros in a string .
7704	Replaces all dots except the last one .
7705	Replaces all non - empty characters in a string .
7706	Convert intl formatter to malot
7707	Convert malotatter to intl form
7708	Add picker configuration .
7709	Bind the Alexa request .
7710	Register the Alexa middleware .
7711	Resume the playlist .
7712	Return the AlexaRequest instance .
7713	Add middleware to request .
7714	Checks if a route matches the request .
7715	Create a new Alexa route instance .
7716	Get a session variable .
7717	Updates the value of a slot .
7718	Get the list of validators .
7719	Compiles route .
7720	Get the certificate from the request URI .
7721	Prepare response data .
7722	Send a request through the router .
7723	Gather the application middleware .
7724	Save the given certificate to the filesystem .
7725	Retrieves the certificate chain from the store .
7726	Calculate the file path .
7727	Sets custom protection words .
7728	Capitalizes a string .
7729	Normalize a string
7730	Processes string parts .
7731	Process first sentence in parts .
7732	Process the last word in parts .
7733	Process word .
7734	Replace a string using a regular expression .
7735	Get name suffix
7736	Break a word into separate words
7737	Determine if a word is a salutation
7738	Check word suffix
7739	Generate emoji constants .
7740	Shortcut to chop a string
7741	Emits a string .
7742	Get the first word in a string .
7743	Determine if the given variable is a string .
7744	Get the last word in a string .
7745	Converts a string to lower case .
7746	Markdown parser .
7747	Read time from a string
7748	Extract smartypants .
7749	Get the substring after the first occurrence of a separator .
7750	Get the substring after the last occurrence of a separator .
7751	Get the substring before the first occurrence of a separator .
7752	Get the substring before the last occurrence of a separator .
7753	Titleize a string .
7754	Trim whitespace from a string
7755	Trim whitespace from a string
7756	Trim whitespace from a string
7757	Convert a string to a phrase
7758	Converts a string to upper case .
7759	Creates a widont .
7760	Get setting by name
7761	Get icon image .
7762	Convert to array .
7763	Display blog layout .
7764	Display post .
7765	Store a new tag .
7766	Show the form for editing a tag .
7767	Update the tag .
7768	Remove the tag .
7769	Index action .
7770	Clear the cache .
7771	Handle the download .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Handle configs .
7775	Register translations .
7776	Register views .
7777	Show profile profile .
7778	Update the specified profile .
7779	Authenticate user .
7780	Get the current version
7781	Get post fill data .
7782	Enable an extension .
7783	Disable an extension .
7784	Uninstall an extension .
7785	Migrate an extension .
7786	Get enabled bootstrappers .
7787	Sanitize input .
7788	Display the dashboard .
7789	Get fields from model .
7790	Get the data for a tag .
7791	Normalize blog data .
7792	Store a new post .
7793	Update the post .
7794	Publish theme public .
7795	Publish theme views .
7796	Remove theme assets
7797	Get default theme .
7798	Get the active value .
7799	Get the general middleware .
7800	Get the installed route middleware .
7801	Get the admin middleware .
7802	Get the blog main path .
7803	Get the blog prefix .
7804	Get admin prefix
7805	Get auth prefix
7806	Get the password prefix
7807	Index page .
7808	Get the XML for the request .
7809	Scans a file
7810	Multiscan single file
7811	Scan a file for contons
7812	Receive a response from the server
7813	Process single file .
7814	Validates a file .
7815	Sanitizes a file name .
7816	Delete a file
7817	Move an uploaded file .
7818	Get the list of available themes .
7819	Get asset path
7820	Get the version of an asset .
7821	Get theme path .
7822	Make a directory .
7823	Create a new template file .
7824	Get assets path .
7825	Get template content
7826	Create new asset .
7827	Fetches the translation for a message .
7828	Update a translation .
7829	Flag a translation .
7830	Create an asset .
7831	Download all translations
7832	Upload all translations .
7833	Synchronize all translations .
7834	Regenerate messages .
7835	Copy config values from config to project
7836	Add a hash .
7837	Get the value of this instance .
7838	Search for classes .
7839	Search for PSR - 4 directories .
7840	After save callback .
7841	Before query .
7842	After query .
7843	Sync new waterage items .
7844	Synchronize the existing waterage items .
7845	Find a product item by key .
7846	Check item integrity .
7847	Build item data .
7848	Fills entity attributes .
7849	Setup default criteria .
7850	Perform an action on an object
7851	Execute before or after action .
7852	Validate action .
7853	Perform a query .
7854	Set paginate .
7855	Toggle exceptions .
7856	Applies criteria to query
7857	Update an entity .
7858	Fetch a list of records .
7859	Find model by key .
7860	Find by criteria
7861	Get records by criteria
7862	Get records by keys
7863	Get a list of records
7864	Create new attributes query .
7865	Replaces placeholders in config values .
7866	Sets view path .
7867	Sends the given file
7868	Get the content type of a file .
7869	Map an action to an exception
7870	Sets an aspect
7871	Sets a pointcut .
7872	Retrieves a specific pointcut
7873	Returns an array of candidate files for the given path .
7874	Checks if a file is scannable .
7875	Convert a PHP error type to a human readable string .
7876	Dispatches a dispatch
7877	Invoke an action
7878	Checks if a connection has activity
7879	Get a bean definition by its name .
7880	Search for properties in a string
7881	Returns the constructor arguments for the given definition .
7882	Instantiate a bean by constructor
7883	Instantiate a bean by class name .
7884	Instantiate a factory using the factory .
7885	Instantiate a bean .
7886	Creates the dependencies for the bean .
7887	Apply an aspect
7888	Apply specific aspects to the bean .
7889	Apply global aspects to the bean .
7890	Apply the aspects of a bean .
7891	Creates a bean .
7892	Setup init and shutdown method .
7893	Injects a non - setter method
7894	Set the value of a property
7895	Get a single bean
7896	Returns the container instance .
7897	Fill the bean with the bean definition
7898	A signal handler .
7899	Load a class .
7900	Unserialize a child bean .
7901	Populate classes per annotation .
7902	Loads an XML file .
7903	Loads the bean .
7904	Closes the socket .
7905	Opens the socket .
7906	Free a peer
7907	Create proxy class
7908	Creates a parameter
7909	Creates a method
7910	Create a new proxy instance .
7911	Load a YAML file .
7912	Load the YAML file .
7913	Initializes the connection object
7914	Opens the connection .
7915	Returns an instance of the cache class
7916	Invokes the after definition .
7917	Called before a bean is created .
7918	Triggers afterCreate event .
7919	Emit all lifecycle listeners .
7920	Called when the bean is assembled .
7921	Open log .
7922	Get the interceptors for a given method
7923	Get the list of exception interceptors for the given method .
7924	Call the registered interceptors .
7925	Invokes the exception interceptors .
7926	Invokes the registered interceptors .
7927	Closes the socket .
7928	Read data from the socket .
7929	Opens a socket .
7930	Adds an array of objects .
7931	Build the URI
7932	Overwrite application config .
7933	Resolve a file path .
7934	Get published dropdown list .
7935	Find Page model by its alias .
7936	Builds a Link object .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Registers translations .
7939	Registers client scripts .
7940	Returns the vote for the given object .
7941	Get from email address
7942	Load a user by username .
7943	Hydrate user from database .
7944	Creates a new user .
7945	Sets the password for the given user .
7946	Check if the given user has the given password .
7947	Determine if the user is logged in .
7948	Find one by criteria
7949	Find by criteria
7950	Creates common find query .
7951	Returns the number of records matching the specified criteria .
7952	Inserts a new user .
7953	Update a user .
7954	Deletes a user .
7955	Validates a user .
7956	Clear the identity map
7957	Log in as the current user as a user .
7958	Initializes the signal handler .
7959	releases a worker
7960	Waits until a timeout occurs .
7961	Get a resource from the pool
7962	Get all resources from the pool
7963	Apply a worker to the pool
7964	Get the number of pending requests .
7965	Sends data to a socket .
7966	Fetch data from a socket .
7967	Migrate users data down .
7968	Register a new user .
7969	Confirm email action .
7970	Login action .
7971	Resend confirmation token .
7972	View the user .
7973	Edit a user .
7974	Validates the token .
7975	Connects the user controllers .
7976	Returns an array of formatter objects .
7977	Get the formatter based on the Accept header .
7978	Formats the payload .
7979	Detect env file
7980	Get the type based on the Accept header .
7981	Creates a new Router instance .
7982	Run the application .
7983	Handles action .
7984	Get domain payload .
7985	Execute a responder .
7986	Add the HTTP status code to the response .
7987	Get the command name from a resource .
7988	Run the before commands .
7989	Get per page .
7990	Add where statements to query .
7991	Bootstrap the application .
7992	Allow HTTP methods .
7993	Sets the pattern to match .
7994	Tokenize the pattern
7995	Returns the regular expression
7996	Returns an array of variables .
7997	Matches a request against a route .
7998	Builds the variables based on the given values .
7999	Dispatches the router .
8000	Create a link to a token .
8001	Parses the token and variables .
8002	Determine if this route matches the given request .
8003	Generate a link to the URL .
8004	Tokenize a pattern .
8005	Tokenize a pattern .
8006	Tokenize a pattern segment .
8007	Splits a pattern into chunks .
8008	Compiles a token into a regex .
8009	Scaffold a namespace .
8010	Bind a route to a route .
8011	Create a group of routes .
8012	Routes a request .
8013	Normalize the request .
8014	Routes the request
8015	Link a named route .
8016	Clears all routes .
8017	Creates JS code for the workflow
8018	Get the item from the cache .
8019	Get an access token
8020	List address books
8021	Get addresses from book
8022	Add addresses to address book
8023	Get cost for campaign
8024	Create a campaign .
8025	Add Sender
8026	Activate sender
8027	Get website subscriptions
8028	Change the state of a subscription .
8029	Create a push task
8030	Generate a hash for send pulse .
8031	Send request to website
8032	Send request to API
8033	Pre - send to API
8034	Decode a new line encoded response .
8035	Decode URL encoded response
8036	Fetches all mails in the mailbox
8037	Mark a message as processed
8038	Get the type of an email .
8039	Auto refund .
8040	Automatically apply a certificate
8041	Auto - replace a certificate
8042	Auto revoke a certificate
8043	Collect SSL information
8044	Get DCV Email List
8045	Send SSL checker
8046	WebHost report
8047	Ensures the DC - Control code is entered .
8048	Creates an exception based on response data
8049	Generate meta tags
8050	Set the description .
8051	Reset the tag .
8052	Register the Seotype bindings .
8053	Generate open graph tag
8054	Add raw data .
8055	Prepare data .
8056	Determine if a given URL contains a specific URL .
8057	Validate sitemap data .
8058	Fill command index
8059	Fill the given type .
8060	Add an index to the query .
8061	Add one or more parameters to the query .
8062	Set the index settings
8063	Delete document from index
8064	Create a new index
8065	Update index settings
8066	Execute a command
8067	Convert the request body to a JSON string .
8068	Sets the value to sort .
8069	Add one or more facets to the query .
8070	Composes final query .
8071	Convert parameters to array
8072	Add a node to the cluster .
8073	Adds a rule to the query .
8074	Delete a document
8075	Set multiple documents at once .
8076	Execute the batch command
8077	Create a new request
8078	Make an HTTP POST request .
8079	Make an HTTP PUT request .
8080	Make an HTTP DELETE request .
8081	Execute pending requests
8082	Add new options
8083	Sets a random node
8084	Autodetect nodes
8085	Add a new document to the batch
8086	Execute the command
8087	Finalize the current command .
8088	Check the current command .
8089	Get Album .
8090	Init an album .
8091	Init an Album
8092	Generate an album name
8093	Upload an album
8094	After delete action .
8095	Get resize options
8096	Add image styles
8097	Delete all the versions of a picture
8098	Save a picture
8099	Create extra images
8100	Define zebra image
8101	Prepare an image resource
8102	Configure Gallery
8103	Configure the database .
8104	Create the config file
8105	Checks if all required operations are met .
8106	Generate service definitions
8107	Render a link to upload pictures
8108	Show a room
8109	Show gallery template
8110	Load scripts .
8111	Deletes a picture
8112	Sorting action
8113	List channel sections .
8114	Starts the worker process .
8115	Stop the process .
8116	Kill the process
8117	Sends a payload to a process .
8118	On worker start
8119	Fork a thread
8120	Create an AuthnRequest
8121	Parses a SAML response into a SAML Response object .
8122	Get the binaries that match the given predicate .
8123	Get the list of pending binaries .
8124	Update all installed binaries .
8125	Update a single binary
8126	Starts selenium process .
8127	Clean the install directory
8128	Assert that selenitions are met .
8129	Register selenium binaries .
8130	Create a new binary .
8131	Get the value of a valid external url .
8132	Returns the Linux file name .
8133	Saves the file to the given directory .
8134	Called when a stream is received .
8135	Watch progress .
8136	Get the message to be updated .
8137	Get post message
8138	Add a pipe to the pipeline .
8139	Convert an item
8140	Convert an item value
8141	Write an item to the pipeline
8142	Get transport from request
8143	Validates a password against a policy policy .
8144	Get the taxonomy .
8145	Determine if the value is valid .
8146	Get the descriptor for this taxonomy .
8147	Get environment variable .
8148	Get client ip
8149	Returns the URL of the current request .
8150	Unparse a query string .
8151	Determine if a property is set .
8152	Lookup an address
8153	Parse includes .
8154	Process action .
8155	Remove item from array .
8156	Get an item from the array .
8157	Update a form read .
8158	Get field from payload .
8159	Get matching item .
8160	Checks if an item has a matching item .
8161	Get item by item uuid .
8162	Replaces variables in the given value .
8163	Parse JSON data
8164	Loads a JSON file
8165	Set the latitude and longitude
8166	Get the LatLng object
8167	Return a JsonResponse with error messages
8168	Redirect to form .
8169	Create a new aggregate .
8170	Remove item from form .
8171	Determine if the composer autoload dump should be used .
8172	Get plugin class names
8173	Get install name
8174	Guess the install name .
8175	Map root package extra
8176	Writes a plugin configuration .
8177	Get the root package
8178	Get install path
8179	Initialize the install dir
8180	Generate palette .
8181	Get the meta palette of a palette .
8182	Creates an exception for a closing context .
8183	Enter the theme context .
8184	Build context config .
8185	Get the color .
8186	Rotate the color
8187	Convert HSV color to RGB .
8188	Enter the context .
8189	Removes the current context from the stack .
8190	Switch the context .
8191	Loads Contao config from bundles .
8192	Set the config type argument .
8193	Get template groups
8194	Render the pagepicker
8195	Get all articles
8196	Get all modules
8197	Prepare template .
8198	Parse the given template using the given template name .
8199	Registers tagged services .
8200	Initialize the environment .
8201	Initialize the layout .
8202	Add child to element
8203	Compiles a template .
8204	Compiles a node .
8205	Throws a Pug exception .
8206	Convert doctrine type to PHP type
8207	Returns a file reflector .
8208	Returns the doc block for a property .
8209	Get the docblock from a property .
8210	Get the docblock from the method .
8211	Get the PHP type and class name for a given doc type .
8212	Log in .
8213	Init the Guzzle client .
8214	Get the login token .
8215	Search for a specific Question .
8216	Extracts a value from an extractor .
8217	Get tag names .
8218	Download image .
8219	Returns a list of all wallpapers .
8220	Download all wall papers .
8221	Extract the type from the mutator .
8222	Extracts the type from a property .
8223	Extracts the type from the given reflection type .
8224	Check if a property is public
8225	Returns an accessor method .
8226	Returns a mutator method .
8227	Get the property name
8228	Load the Laravel service container .
8229	Create an Application instance .
8230	Sets a value to the specified section .
8231	Set multiple values at once
8232	Remove a section .
8233	Merge a section
8234	Renames a value .
8235	Renames a section .
8236	Read an INI file
8237	Read an INI file and merge it .
8238	Merges the content of an object into a new object .
8239	Generate an INI value
8240	Sets the value of a property .
8241	Sets the values of the current ini section .
8242	Returns the values of all modifiers
8243	Remove a value .
8244	Remove a section .
8245	Sets a value .
8246	Sets a value on the master master .
8247	Sets the values on a master node .
8248	Get a value from master
8249	Returns the values of a section .
8250	Remove a value .
8251	Remove a value from the master .
8252	Determine if the given name is a section .
8253	Returns the values of a section .
8254	Create a file loader .
8255	Returns the class name for the given short type .
8256	Create a cookie
8257	Execute the command .
8258	Determine the configuration file .
8259	Choose bundle configuration .
8260	Writes configuration to a file .
8261	Create a Dumper instance .
8262	Convert a string to a new format
8263	Read session data
8264	Get the available routes .
8265	Sorts an array .
8266	Sets the offset .
8267	Gather the data .
8268	Put content to a file .
8269	Get the options reader for the command .
8270	Run the given route .
8271	Gather the route middleware .
8272	Flatten a multi - dimensional array .
8273	Load configuration files .
8274	Get the slice function .
8275	Parse stage string .
8276	Call a given command .
8277	Sets the default values for a command .
8278	Get the executable binary .
8279	Returns the name of the CEBR binary .
8280	Runs the given command .
8281	Get the default input definition .
8282	Builds a flat map of routes .
8283	Adds route to the given node .
8284	Get the segment matcher .
8285	Create the filesystem manager .
8286	Create a cached factory .
8287	Returns the amount of executed statements .
8288	Get memory usage .
8289	Profile a SQL call .
8290	Resolve alias .
8291	Check if the route matches the given pattern .
8292	Create a new TwigEngine instance .
8293	Extend view factory .
8294	Extend Twig Resolver .
8295	Creates a twig environment .
8296	Create the Twig loader .
8297	Parse data .
8298	Create a rule instance .
8299	Create a strict or negative validator .
8300	Create chainable validators .
8301	Parse rule string .
8302	Parse rule parameters .
8303	Starts the web server .
8304	Stop web server .
8305	Get the pid .
8306	Check if a pid file is running
8307	Create the server process .
8308	Get all registered listeners for an event .
8309	Remove a listener for a given event pattern .
8310	Determine if a string contains wildcards .
8311	Add a listener pattern
8312	Returns an array of mandatory options .
8313	Build a multidimensional array .
8314	Get the response .
8315	Get the response .
8316	Get the displayer .
8317	Get the filtered displayers .
8318	Get a filtered filter by content type .
8319	Add lookups .
8320	Add addresses .
8321	Create assets renderer
8322	Register base collectors .
8323	Register collectors from config .
8324	Extend the event manager .
8325	Create a session manager .
8326	Create route dispatcher .
8327	Create router instance .
8328	Create UrlGenerator instance .
8329	Detect the environment .
8330	Get an environment argument .
8331	Return a response with the JS code .
8332	Converts an array of data to a TOML builder .
8333	Processes an array of values .
8334	Get pretty metadata .
8335	Get loader paths .
8336	Build table rows .
8337	Get Whoops instance .
8338	Add where clauses to route .
8339	Merge group actions into route .
8340	Convert action to controller action .
8341	Prepend the namespace to the group stack .
8342	Prefixes the URI .
8343	Updates the group stack .
8344	Creates a new sanitizer instance .
8345	Add before bootstrapper .
8346	Add a bootstrapper callback .
8347	Bootstrap the application .
8348	Call the registered callbacks .
8349	Generate a session id .
8350	Merge new flash values .
8351	Load session from handler
8352	Read from handler .
8353	Writes the metadata to the handler .
8354	Resolve current page .
8355	Secure input elements .
8356	Extend the event manager .
8357	Get the list of files .
8358	Find twig files .
8359	Validate template .
8360	Display details .
8361	Display text .
8362	Parse a middleware group .
8363	Check mandatory options .
8364	Get configuration dimensions .
8365	Validate options .
8366	Check deprecated options .
8367	Register a resource .
8368	Get the URI for a resource .
8369	Get resource wildcard .
8370	Get resource prefix
8371	Add resource destroy route .
8372	Get a nested resource URI .
8373	Get resource action .
8374	Get the resource route name .
8375	Slice a stage through the container .
8376	Get the middleware middleware .
8377	Find argument files .
8378	Get the first IP address of the request .
8379	Validate an IP address
8380	Get the first IP address from a header .
8381	Set the domain .
8382	Validate input .
8383	Validate the given middleware .
8384	Create translation manager .
8385	Create a schedule .
8386	Get the computed data .
8387	Create a Swift mailer instance .
8388	Create the mailer instance .
8389	Set the global address for the given type .
8390	Create a tooltip group
8391	Create tabs .
8392	Create a table
8393	Create dropdown menu content .
8394	Creates a metrics table .
8395	Clone a variable .
8396	Get the VarCloner instance .
8397	Returns the HtmlDumper instance .
8398	Adds indent to the code .
8399	Append line .
8400	Add twig extensions .
8401	Sort middleware by priority map .
8402	Move middleware .
8403	Create Monolog driver instance .
8404	Create an instance of the Monolog driver .
8405	Create a single Monolog driver instance .
8406	Create a Monolog driver instance .
8407	Create the syslog driver .
8408	Create an instance of the Monolog log driver .
8409	Create a Slack webhook driver .
8410	Create a custom logger instance .
8411	Create a Monolog driver instance .
8412	Push processors to Monolog .
8413	Create a new server request instance from server data .
8414	Returns the singular form of a given value .
8415	Match a case string against a string .
8416	Create a new local adapter .
8417	Create a new console console instance .
8418	Merge two arrays .
8419	Format the group suffix .
8420	Check for specific environment file .
8421	Set environment file path .
8422	Get a transport instance .
8423	Create a new transport .
8424	Determine if the given transport method exists .
8425	Create the SMTP transport .
8426	Create the mailgun transport instance .
8427	Create a new Spark PostTransport instance .
8428	Create the SESTransport instance .
8429	Create a repository instance .
8430	Update the route tree .
8431	Register console events .
8432	Extend Twig Environment .
8433	Register the viserio extension .
8434	Returns an array of allowed HTTP methods .
8435	Adds a route to the collection .
8436	Returns true if the stream is a pipe .
8437	Adds a new mime type .
8438	Add a parser .
8439	Parse the given payload .
8440	Get parser for given type .
8441	Get the format for the given payload .
8442	Sets up the class
8443	Get the current request duration .
8444	Stop a measure .
8445	Add a new measure .
8446	Identify an exception .
8447	Generate a random UUID .
8448	Sets the headers .
8449	Validates the HTTP protocol version .
8450	Checks if an array contains only strings .
8451	Filter header value .
8452	Get the retry time .
8453	Returns the invoker .
8454	Invalid type constructor .
8455	Extend the cache item pool .
8456	Extend a SimpleTraceable cache decorator .
8457	Get an environment variable .
8458	Parse parameter .
8459	Replace reference data .
8460	Creates the table
8461	Get PDO connection
8462	Connect to the database .
8463	Get a list of files .
8464	Render the assets into HTML .
8465	Get the last modified time for a given asset type .
8466	Run the callable .
8467	Return a copy of this cron job without overlapping it .
8468	Extend Log Manager
8469	Extend profiler .
8470	Imports a DOM document .
8471	Creates a DOMDocument from a file .
8472	Creates a DOMDocument from a string .
8473	Convert a PHP value to a PHP type .
8474	Validates an XML document against a schema .
8475	Convert a string to a string .
8476	Checks if a message is a header .
8477	Add references to an entry .
8478	Process obsolete entry
8479	Process previous entry .
8480	Extract multi lines .
8481	Extract the headers from an array .
8482	Check if the given file is a file .
8483	Sets the error status .
8484	Sets the stream .
8485	Validates the current upload state .
8486	Mock a service .
8487	Parses command expression .
8488	Parses an argument .
8489	Parses an option token .
8490	Extracts description from a token .
8491	Validates the cookie name .
8492	Validates the cookie value .
8493	Set the value of a key .
8494	Get the addresses from a message .
8495	Create MongoDB cache driver .
8496	Create a Redis cache driver .
8497	Create an instance of the Predis cache driver .
8498	Create a new Flysystem cache driver .
8499	Create a new Memcached driver instance .
8500	Create the Memcache driver instance .
8501	Returns a collector by name .
8502	Compiles router class .
8503	Create router class template .
8504	Compiles route tree .
8505	Compile route HTTP method match .
8506	Compile a Disallowed HTTP method or not .
8507	Compile found route .
8508	Returns the DebugProcessor instance .
8509	Get the total number of errors .
8510	Group log levels by priority .
8511	Get the listener
8512	Bind the listener to an event .
8513	Remove all events from the dispatcher .
8514	Create the regular expression for the event pattern .
8515	Array access .
8516	Array access .
8517	Process parameters .
8518	Processes a single parameter .
8519	Render an exception .
8520	Render exception editor .
8521	Render exception trace .
8522	Get the stack trace .
8523	Get the stack trace for the exception .
8524	Format an array of arguments .
8525	Get lines from a file .
8526	Returns the contents of a file .
8527	Normalize the name .
8528	Resolve a binding .
8529	Resolves a class .
8530	Resolves a method .
8531	Resolve a parameter .
8532	Resolves parameters .
8533	Getter for method .
8534	Checks if value is a function .
8535	Merge parameters .
8536	Write a file .
8537	Put the contents of a file .
8538	Update a stream .
8539	Decrypt stream data .
8540	Encrypt stream .
8541	Decrypt a string .
8542	Encrypt a string .
8543	Create stream from string
8544	Create transport factory .
8545	Create mail manager instance .
8546	Get the version number from a XML document .
8547	Get the schema for a specific version .
8548	Fixes the location .
8549	Parse the visibility .
8550	Sanitizes data .
8551	Run global sanitizers .
8552	Sanitizes a field value .
8553	Execute sanitizer .
8554	Resolve callback .
8555	Resolves an expression to a command .
8556	Creates a string command .
8557	Gets the default values for a command .
8558	Assert callable is valid .
8559	Check if callable is non static .
8560	Create a cookie jar instance .
8561	Convert a value to an array
8562	Adds a new node .
8563	Add collection node .
8564	Create root element .
8565	Cast object class .
8566	Get called listeners .
8567	Get all not called listeners .
8568	Validate the same site .
8569	Normalizes the expiration time .
8570	Normalizes the domain .
8571	Normalize path .
8572	Get the cookie timestamp .
8573	Starts a timer .
8574	Apply helpers to translation .
8575	Extract helpers from string .
8576	Apply filters to translation .
8577	Log translation .
8578	Collects message from catalogue .
8579	Display the given files .
8580	Prints the json file .
8581	Get all files in a given directory .
8582	Get input from STDIN .
8583	Returns a recursive iterator .
8584	Validates the event name .
8585	Converts a number into bytes .
8586	Convert a number to a decimal number .
8587	Get a config from a list .
8588	Create a new object .
8589	Add extractor .
8590	Create alias loader .
8591	Get the cache path .
8592	Push command to queue .
8593	Determine if the command should be queued .
8594	Create the cookie session driver .
8595	Create the migration driver .
8596	Create a cache store instance .
8597	Build the session .
8598	Build the encrypted session .
8599	Parse route action .
8600	Get the first element in an array
8601	Parse the notes .
8602	Convert content to charset .
8603	Tag data .
8604	Create a LogManager instance .
8605	Confirm to proceed to the command .
8606	Get the default confirmation callback .
8607	Inject the profiler
8608	Collect data .
8609	Create the template for the given token .
8610	Creates a new profile .
8611	Parse a log level .
8612	Starts the session for the given request .
8613	Store the previous URL in the session .
8614	Garbage collector .
8615	Add the cookie to the response .
8616	Create response view with given parameters .
8617	Find template by name .
8618	Normalize the name .
8619	Parse the given view .
8620	Add content to the message .
8621	Sends a Swift message .
8622	Returns true if the message should be sent .
8623	Create the message .
8624	Call message builder .
8625	Create view .
8626	Handle found route .
8627	Prepare the URI path .
8628	Generate router file .
8629	Generate cache directory .
8630	Get the path to a file .
8631	Checks the given options .
8632	Returns an instance of the parser .
8633	Get a require file .
8634	Require a file .
8635	Creates a symbolic link .
8636	Sets the directories .
8637	Adds a directory .
8638	Import a language file .
8639	Adds a message catalogue .
8640	Set a language fallback .
8641	Get language fallback .
8642	Add a new presenter .
8643	Check for more pages .
8644	Returns the display address .
8645	Find the front controller .
8646	Find the hostname and port .
8647	Find the best available web server port .
8648	Escapes a string .
8649	Get the data sorted by profiler .
8650	Creates an append stream .
8651	Parse tokens .
8652	Seeks to the next non - whitespace token in the iterator .
8653	Get the value from the token iterator .
8654	Create a TraceablePDorator instance .
8655	Decrypt the request .
8656	Encrypt the response .
8657	Duplicate a cookie .
8658	Register a command .
8659	Get the console instance
8660	Init project dirs .
8661	Find a named view .
8662	Get namespace segments .
8663	Find a view .
8664	Get possible view files .
8665	Get the info for the event .
8666	Render the cookies into the response .
8667	Extend Twig Environment .
8668	Get all messages .
8669	Add a message to the container .
8670	Add a middleware .
8671	Get the logs .
8672	Handle view exception .
8673	Returns an error exception .
8674	Get the cache path .
8675	Ensure statical proxy exists .
8676	Format the statical proxy stub .
8677	Registers markdown engine .
8678	Clean the given string .
8679	Add TComment to output .
8680	Add references to output .
8681	Add flags to the output .
8682	Add the previous entry to the output .
8683	Add msgid to output .
8684	Add msgid_plural to output .
8685	Add msgstr to output
8686	Add message header to output
8687	Get pagination links .
8688	Create a cache connector .
8689	Ensure the user is correct .
8690	Determine if the expression passes the expression .
8691	Run the command in foreground .
8692	Run the command in background .
8693	Call the before callbacks .
8694	Call the after callbacks .
8695	Returns a filter that is within a time interval .
8696	Check if start time is between start and end time
8697	Merge child matchers .
8698	Optimizes an array of matchers .
8699	Optimize a segment matcher .
8700	Optimize matchers order .
8701	Create HtmlDisplayer
8702	Create a ViewDisplayer instance .
8703	Create Whoops pretty displayer .
8704	Get the number of recipients in the message .
8705	Bootstrap the application .
8706	Handles request through kernel .
8707	Render an exception .
8708	Pipe the given request through the middleware .
8709	Compile parameters .
8710	Sets the value of an offset .
8711	Returns the invoker .
8712	Bind a plain .
8713	Bind a service .
8714	Bind a singleton .
8715	Resolve the given abstract type .
8716	Resolve a service .
8717	Resolve single value .
8718	Extend resolved binding .
8719	Format a contextual binding .
8720	Get message ID from response .
8721	Convert emails to array .
8722	Get a single MIME part .
8723	Get the payload for a message .
8724	Processes recipients .
8725	Process message parts .
8726	Process the message headers .
8727	Check requirements .
8728	Get the extension for a given path .
8729	Get a view instance .
8730	Determine if a string ends with another .
8731	Render cookies into the request .
8732	Creates a list of cookies from a cookie string .
8733	Sets the error .
8734	Sets the exit code .
8735	Generate a URI to a route .
8736	Prepare route path .
8737	Determine if the given route is required .
8738	Add the port and port to the given URI .
8739	Replace route parameters .
8740	Replace named parameters .
8741	Adds a query string to the URI .
8742	Get the route query string .
8743	Parse where .
8744	Get the controller middleware .
8745	Get disabled middleware .
8746	Adds a cookie .
8747	Splits a cookie pair into an array .
8748	Inject Content - Type header .
8749	Adds words to a string .
8750	Get random string
8751	Replaces the first occurrence of a string in a string .
8752	Replaces the last occurrence of a substring in a string .
8753	Replaces a substring by position .
8754	Get the verbosity level .
8755	Runs the command .
8756	Call a console command .
8757	Call a command .
8758	Get command argument .
8759	Get command option .
8760	Asks a question .
8761	Ask for a question .
8762	Asks a choice question .
8763	Render a table
8764	Write a line .
8765	Write an info message .
8766	Write a comment .
8767	Write a question .
8768	Write a message to the console .
8769	Print a warning message .
8770	Configures the definition using fluent definition .
8771	Adds parameters to the command
8772	Get the ID from the response .
8773	Get recipients array .
8774	Render template .
8775	Add an exception to be reported .
8776	Report an exception .
8777	Add a transformer .
8778	Handles an error .
8779	Handle fatal errors .
8780	Register the exception handler .
8781	Registers the shutdown handler .
8782	Prepare an exception .
8783	Transforms an exception .
8784	Get the log level for the exception .
8785	Determine if the given exception should be reported .
8786	Add a new Dumper .
8787	Dump data .
8788	Returns a Dumper instance .
8789	Get a string representation of a Swift_Message entity .
8790	Get the parameters for the given function .
8791	Converts a UTF - 8 code point to UTF - 8 .
8792	Register the queueing dispatcher .
8793	Optimizes the route tree
8794	Extracts common parent node .
8795	Returns the prepared SQL with parameters .
8796	Tries to open a file .
8797	Create a stream for a given resource .
8798	Copy the contents of a stream into a string .
8799	Copy data from source to another stream .
8800	Read a single line from the stream .
8801	Set default path and domain .
8802	Get the path and domain .
8803	Returns the pretty page handler .
8804	Updates the host header from the URI .
8805	Filter the given HTTP method .
8806	Create a UriInterface instance .
8807	Remove file extension .
8808	Changes the file extension .
8809	Create cache manager .
8810	An expectation for receiving a mock .
8811	Resolve a static proxy instance .
8812	Returns true if the instance is a mock .
8813	Inflect the segment .
8814	Sets the file .
8815	Set the content disposition .
8816	Automatically set Last - Modified header
8817	Get a new cookie instance with the specified value .
8818	Describes an application .
8819	Describe commands .
8820	Get command sorted by name
8821	Create the cookie tab .
8822	Prepare request attributes .
8823	Prepare request headers .
8824	Prepare server parameters .
8825	Get parsed body .
8826	Export a value .
8827	Creates a crypted connection .
8828	Get the cache config .
8829	Adapt the given adapter .
8830	Parse the given route .
8831	Generate regex for matching matches .
8832	Returns the invoker .
8833	Check if an object exists .
8834	Get target language from file .
8835	Create varDump connection .
8836	Create dump server
8837	Check if a file exists .
8838	Get transformed path .
8839	Get the contents of a directory .
8840	Filter contents by type .
8841	Checks if the CSRF token matches the request .
8842	Add the cookie to the response .
8843	Sanitize collected messages .
8844	Compute message count .
8845	Get messages sorted by locale .
8846	Adds a stream to the collection .
8847	Closes the stream .
8848	Decode a GIF image .
8849	Decode the file extension .
8850	Decode Image Descriptor .
8851	Decode Image Data
8852	Set the order direction
8853	Returns the list .
8854	Retrieves the list of items
8855	Sets the cities from an array
8856	Sets the PSTN networks from an array .
8857	Load all pstn networks
8858	Load all cities for the given country
8859	Get all countries
8860	Get city by id
8861	Pads a PKCS5 string .
8862	Get all countries
8863	Update all networks
8864	Update one or more networks
8865	Create a new mapping instance
8866	Decode delay .
8867	Returns true if the image has a transparent color .
8868	Decode the proposal method .
8869	Returns the size of the image .
8870	Get the offset .
8871	Set the offset .
8872	Returns the country object .
8873	Convert this object to an array .
8874	Create a new assign object from a flat list
8875	Fill this object from an array .
8876	Create a random ID .
8877	Generate unique hash
8878	Generate auth string
8879	Loads the invoice history .
8880	Perform a SOAP call .
8881	Get a frame .
8882	Add offset to the frame .
8883	Add a new size .
8884	Get the loop data .
8885	Returns true if the file descriptor has a global color table .
8886	Returns the number of global colors .
8887	Returns the background color index .
8888	Add value to first frame without property
8889	Creates a new frame with the given property .
8890	Convert the object to an array .
8891	Get all prepaid balances
8892	Get the balance of the customer .
8893	Get all balances
8894	Change the balance of the customer
8895	Synchronize prepaid balance
8896	Set the width and height of the image .
8897	Set the frame from decoded data
8898	Create a Frame from a GD resource .
8899	Encode this frame .
8900	Builds the image descriptor .
8901	Builds the Netscape extension .
8902	Encode a frame .
8903	Builds the SVG control extension .
8904	Builds the image descriptor .
8905	Creates an Order .
8906	Change auto - renew flag
8907	Renew the current order .
8908	Reload the details from the API .
8909	Updates the mapping .
8910	Generate unique hash .
8911	Checks whether IP is in a given range
8912	Get a single parameter .
8913	Link metadata service
8914	Set metadata for a service
8915	Add metadata for a service .
8916	Remove a service from the container
8917	Releases a service
8918	Returns a service instance .
8919	Create a new instance from the factory .
8920	Resolve service provider .
8921	Registers a service provider
8922	Bind a factory to a class .
8923	Bind service factory
8924	Registers a factory for a service name .
8925	Bind service resolver factory
8926	Returns the type for the given service name .
8927	Add argument .
8928	Add arguments from an associative array
8929	Resolve arguments from container
8930	Create an instance of this class .
8931	Sets the list of tokens .
8932	Returns the current token .
8933	Returns the next token .
8934	Skips next token of given types .
8935	Returns the remaining tokens .
8936	Returns all tokens until the given token is encountered .
8937	Returns an array of tokens until the token is reached .
8938	Thrown when an unexpected token was encountered .
8939	Parses child node
8940	Parses the parser .
8941	Sets the container name .
8942	Creates a new service definition .
8943	Adds multiple service definitions .
8944	Adds a service definition .
8945	Import services from container
8946	Checks if the value is a valid service builder string .
8947	Generates a normalized service name .
8948	Generate the container .
8949	Returns the method name for the resolver .
8950	Generates code for arguments .
8951	Generates service metadata
8952	Generates the resolver type .
8953	Generates the resolver mappings .
8954	Generates the resolver methods .
8955	Creates a ValueNode from a Token .
8956	Sets the value type .
8957	Generate the package mapping .
8958	Get the value of the token .
8959	Returns true if the token is a value .
8960	Check if the collection contains a specific key .
8961	Adds a new value to the stack .
8962	Convert to native PHP array .
8963	Get next token .
8964	Returns an array of tokens .
8965	Index action .
8966	Execute a command
8967	Backup the database .
8968	Clone repo .
8969	Copy environment .
8970	Run composer .
8971	Run NPM command .
8972	Run seed command
8973	Deploy the webroot
8974	Resolves the service .
8975	Set the cache directory .
8976	Create container .
8977	Handle the request .
8978	Import the container map .
8979	Check if a path exists .
8980	Get the code from a file .
8981	Get the code from the path .
8982	Parses container file
8983	Handles a scope .
8984	Handle a scope import statement .
8985	Handles a parameter definition .
8986	Create ServiceArguments from ArgumentNode .
8987	Handles a service definition
8988	Creates a service definition from an array .
8989	Adds a method call .
8990	Add method call .
8991	Add meta data .
8992	Determine if the request is origin .
8993	Check if the request is authenticated
8994	Sets the value of the parameter .
8995	Get the name of the workout .
8996	Returns the current time as a string .
8997	Send the request .
8998	Set workout type id
8999	Get the end date of the post
9000	Returns the points as a string .
9001	Get GPX .
9002	Collect response data .
9003	Get the models .
9004	Get the AJAX payload .
9005	Get ajax response .
9006	Run a callback .
9007	Sanitize handle .
9008	Determine if all validations are met .
9009	Validate a single value
9010	Set size for a specific device .
9011	Add a reset device
9012	Returns the size for a device .
9013	Build the column classes
9014	Determine if the current user has the specified role .
9015	Begins the row .
9016	Render column .
9017	Walks down the grid .
9018	Begins the row .
9019	Get the reset for this grid .
9020	Get the index .
9021	Migrate old content grid
9022	Register the AJAX handle .
9023	Handle ajax handler
9024	Attach a callback to handle the event .
9025	Add a validation to the field .
9026	Handle the response .
9027	Get the response type .
9028	Sends the response headers .
9029	Send the response body .
9030	Get the content of the given url .
9031	Determine if the method is supported .
9032	Toggle visibility of a record .
9033	Check if the current user has access to the current column
9034	Build grid .
9035	Returns the column as a string .
9036	Add a new reset for a column .
9037	Add a new reset for a column .
9038	Returns the reset for a column
9039	Check if a column has a reset for a given size
9040	Get column reset as string
9041	Register a handle .
9042	Enqueue scripts .
9043	Create an array of nonce instances .
9044	Get the grids
9045	Hook for parsing a template .
9046	Hook to hook for content elements
9047	Get grid elements
9048	Create a row .
9049	Create column .
9050	Build grid columns .
9051	Fetch a single columnset
9052	Prepare custom classes .
9053	Build column resets
9054	Create grid by id
9055	Hook to hook for subcolumns .
9056	Hook to hook for isVisibleElement
9057	Hook called when a form field is loaded .
9058	Get the grids
9059	Prepare container .
9060	Update subcolumns definition
9061	Append columnset id to palette
9062	Append column sizes to palette
9063	Get all column types
9064	Get the list of Grids for the given data container .
9065	Get the columns for a module
9066	Get column orders
9067	Get column numbers
9068	Get a value from the session .
9069	Check if a key exists in the session .
9070	Delete a value from the session .
9071	Get a value from the collection .
9072	Refresh data from session .
9073	Parse insert tag .
9074	Get the walker .
9075	Translate parameters to column setId .
9076	Returns the parameters used to encrypt the payment .
9077	Returns decrypted parameters
9078	Save dynamic fields
9079	return true if the value is valid .
9080	Save file .
9081	Initialize the request .
9082	Render form fields .
9083	Get field value by field name
9084	Get field values .
9085	Returns true if all entities are valid .
9086	Save all entities
9087	Assign dynamic fields to page object
9088	Get field object by locale .
9089	Get repeaters by locale .
9090	Get entity by field id
9091	Get entity by field id and field id
9092	Duplicate this field
9093	Initialize the group .
9094	Returns true if all fields are valid .
9095	Renders the group
9096	Save all fields .
9097	Get group by rule .
9098	Determine if the given rule matches .
9099	Init group controls
9100	Get field post data
9101	Set the character at the given coordinates .
9102	Get the dot .
9103	Generate row .
9104	Returns an array of rows
9105	Get the dot from the pixel map .
9106	Generate the prime string
9107	Init repeater fields
9108	Create list control after repeater .
9109	Create list control
9110	Create field control
9111	Create repeater radio button
9112	Save repeater data .
9113	Get display value
9114	Get field value object by field id .
9115	Get template name
9116	Get the default template name .
9117	Initialize the value
9118	Get the model of the repeater field .
9119	Get html id .
9120	Get field name .
9121	Save the field .
9122	Save the field .
9123	Save repeater field
9124	Get option value
9125	Move forward by given length
9126	Move the position .
9127	Checks whether this task has a previous ancestor .
9128	Check if this task has a descendant of this task .
9129	Reset the state .
9130	Checks if a given input is a condition .
9131	Configures a wrapper for the given wrapper .
9132	Configures condition options .
9133	Check if a value matches a given value .
9134	Check if a value is empty .
9135	Returns the duration in seconds .
9136	Context contextualize options .
9137	Find the next task in the given branch list .
9138	Get the input code for the previous state
9139	Determine if the input is already resolved .
9140	Get the file path .
9141	Sorts two processes
9142	Handles an iterator from input .
9143	Flushes the output .
9144	Returns the number of lines in the file .
9145	Rewinds the stream .
9146	Get the cleaned transformer code .
9147	Returns the list of dependency groups .
9148	Get the main task group .
9149	Check circular dependencies .
9150	Builds the dependencies of a task .
9151	Sorts the dependencies .
9152	Resolves a task configuration .
9153	Initializes the task .
9154	Flushes the given task configuration .
9155	Handle process state .
9156	Checks if a process is in the main queue .
9157	Validate the model .
9158	Convert object to array
9159	Returns an array of model fields
9160	Unset a relation
9161	Convert a full class name to a relation name .
9162	Add one relation to one table
9163	add one to many relation
9164	Add many to many relation
9165	Finds records by query
9166	Returns a collection of records
9167	Find one record
9168	Returns the number of records in the database .
9169	Build a select query
9170	Fetch data from the database .
9171	Hydrate this object
9172	Delete the model from the database .
9173	Update the data in the database
9174	Insert a row into the database
9175	Set whether or not to keep memory .
9176	Removes the data from the session .
9177	Get a model by its primary key
9178	Remove a model
9179	Get the index of a model
9180	Save all elements
9181	Prefix where with table name .
9182	Prefixes an order with a table name .
9183	Get table definition without column name .
9184	Register a table .
9185	Creates a simple query object .
9186	Creates a query object .
9187	Get the model for a given slug .
9188	Maybe install a table .
9189	Maybe install a table .
9190	Check if a table is installed .
9191	Fires plugin event
9192	Save a WP_Post .
9193	Get the foreign column .
9194	Parse the default columns
9195	Create a new query from a model .
9196	Select columns .
9197	Select single column .
9198	Select all records .
9199	Add an expression to the query .
9200	Add a where condition to the query .
9201	Generate a where tag .
9202	Add a nested where clause .
9203	Add a WHERE clause to the query .
9204	Add a where condition to the query .
9205	Add a where date query .
9206	Add a where clause to the query .
9207	Order by column .
9208	Order by expression .
9209	Group by column .
9210	Group by expression .
9211	Join to another table
9212	Join a subquery .
9213	Paginate the results
9214	Execute a callback for each query .
9215	Set the eager load relations .
9216	Parse nested array with nested keys .
9217	Assign a value to an array using dot notation .
9218	Make the limit tag .
9219	Build the SQL .
9220	Update meta cache .
9221	Find model by primary key .
9222	Find many records by primary key .
9223	Find a model by primary key .
9224	Find model by primary key
9225	Get the first model matching the given attributes .
9226	Get the first model matching the given attributes .
9227	Update one or more attributes .
9228	Handle eager loading .
9229	Do nested eager loading .
9230	Asserts that the operator is valid .
9231	Prepare a database column name .
9232	Escapes a value .
9233	Configures the model .
9234	Get column value .
9235	Insert data into database .
9236	Order by column .
9237	Add order .
9238	All columns .
9239	Build an eager load map .
9240	Save a single comment .
9241	Get the value of a default argument .
9242	Queries the database
9243	Parse the results .
9244	Parse a select .
9245	Parse the order .
9246	Parse the pagination parameters .
9247	Determine if two numbers are equivalent .
9248	Determine if two values have changed .
9249	Fetches the results of this query .
9250	Delete a record from the database .
9251	Update data in the database
9252	Returns the total number of pages .
9253	Paginate the results
9254	Returns the number of found models .
9255	Returns the number of records without limit .
9256	Check if an offset exists
9257	Array access .
9258	Array access .
9259	Build the query
9260	Boots the model if not already initialized .
9261	Boot the trait .
9262	Fill model attributes .
9263	Fetches attributes that should bearded .
9264	Apply unarded attributes .
9265	Check if column is fillable
9266	Sets the value of an attribute .
9267	Set an attribute value .
9268	Get an attribute value .
9269	Get a raw attribute value .
9270	Get attribute value .
9271	Get an attribute value from an array .
9272	Get all the relations
9273	Get the requested relation .
9274	Sets the value of a relation .
9275	Get the value of a relation .
9276	Refresh the model s data .
9277	Get the model s dirty attributes .
9278	Get an object by primary key .
9279	Create a new model instance from a query .
9280	Get data by primary key .
9281	Check if data is cached .
9282	Update a value in the database .
9283	Save the current model .
9284	Save has foreign relations .
9285	Save loaded relations .
9286	Save the model as an insert .
9287	Save the current model as an update .
9288	Finish save callback .
9289	Delete the current model .
9290	Create many models .
9291	Fire model event .
9292	Register a model event .
9293	Get the data to cache .
9294	Registers a global scope .
9295	Return a new instance with no global scopes removed .
9296	Creates a new fluent query with the given relations .
9297	Convert the model to an array .
9298	Get the comparison .
9299	Get the value .
9300	Get data by primary key .
9301	Get column value .
9302	Get by or many column
9303	Count the records in the database
9304	Insert data into the database .
9305	Update a row
9306	Delete a row from the database .
9307	Delete many rows
9308	Generate the exception from the database .
9309	Save a term .
9310	Creates a new query object .
9311	Fetch the results for eager loading .
9312	Add a new value to the insert query
9313	setter for setting
9314	Sets the field to select .
9315	reset select options
9316	Sets the update query type
9317	Sets the delete mode for a table .
9318	Set insert into table
9319	Sets the FROM table
9320	Adds a join to the query
9321	Adds a where condition to the query .
9322	Adds a where condition to the query .
9323	Reset order by .
9324	Sets the LIMIT clause
9325	Reset the limit
9326	Boot the trash table .
9327	Get the results from the cache .
9328	Load a model from cache .
9329	Load a collection from cache .
9330	Cache the results .
9331	Cache a collection .
9332	Cache a single result .
9333	Register cache events .
9334	Save the user .
9335	Set the last updated time .
9336	Returns container parameters .
9337	Check if container is cacheable
9338	Boot the container .
9339	Load the container configuration .
9340	Build the column name for a table .
9341	Save the values to the database .
9342	Persist removed records .
9343	Persist the added records .
9344	Create a new UUID .
9345	Initializes the authentication authenticator .
9346	Create a new model .
9347	Convert an asset
9348	Builds the asset result
9349	Parses a Less file and returns the result .
9350	Send a message to the API .
9351	Retrieves data from the server .
9352	Counts the results .
9353	Requeue a message .
9354	Sends a message to the collection .
9355	Verify sort .
9356	Add a message to the collection .
9357	Returns the messages for the given type .
9358	Imports issues of issues .
9359	Get a value from the container .
9360	Determine if an offset exists .
9361	Extend an existing service .
9362	Register a service provider
9363	Add a tag to the container .
9364	Find service ids by tag
9365	Boot the application .
9366	Initializes the bundles .
9367	Get kernel parameters
9368	Validate content .
9369	Validates the content against a retriever .
9370	Validates the content against a scalar .
9371	Get asset container .
9372	Outputs assets .
9373	Output css
9374	Get the assets for a specific type .
9375	Arrange an array of assets
9376	Checks if an asset is valid .
9377	Create a new post validator
9378	Returns a new instance of the XSD retriever .
9379	Returns a new XsltTever instance .
9380	Create a new CertificadoValidator instance .
9381	Create a new CFDIReader instance .
9382	Handle the command .
9383	Sets a cookie .
9384	Get cookie value
9385	Find the first element in an array using a closure .
9386	Check if a password is valid
9387	Retrieve a node .
9388	Get the value of the node attribute
9389	Append a child node .
9390	Populates the destination node .
9391	Retrieve a single node
9392	Check if value is required .
9393	Add queries to this stack
9394	Add new timers
9395	Get file size
9396	Append a validator .
9397	Remove a validator
9398	Get a validator
9399	Constructs a command with the given arguments .
9400	Run the factory .
9401	Run a file using a filename .
9402	Authorize the given credentials .
9403	Determine if the user is logged in .
9404	Logs in the given user .
9405	Log out the user .
9406	Adds a constraint .
9407	Validates the given input .
9408	Redirects to a path .
9409	Returns the path to the file .
9410	Get message by index
9411	Generate custom post type name
9412	Returns a list of functions
9413	Resolve command handler
9414	Setup this object .
9415	Get sum of elements
9416	Get input value .
9417	Sets the position of a meta box .
9418	Generate the taxonomy name
9419	Redirects to a route .
9420	Register all commands .
9421	Get bundle metadata .
9422	Get metadata for a namespace .
9423	Find the namespace and path for a metadata collection .
9424	Add asset .
9425	Render a view .
9426	Save a value to the cache .
9427	Load a CFDI .
9428	Removes all schemaLocations .
9429	Remove non - empty namespaces .
9430	Remove unused namespaces .
9431	Initializes the site bindings .
9432	Binds the registry items to the registry .
9433	Get the file name of the view .
9434	Initialize the context .
9435	Render the template .
9436	Load all config files
9437	Adds a route that matches the given path .
9438	Define a sub route .
9439	Group sub routes .
9440	Starts a block .
9441	Stop capturing blocks .
9442	Output a block .
9443	Create a controller from a string .
9444	Instantiate a controller
9445	Validates if a URL is valid .
9446	Attempts to find a template .
9447	Set entity manager
9448	Sets a database connection .
9449	Render a view .
9450	Open the form .
9451	Add data transformers .
9452	Get the specified feed .
9453	market market request
9454	Perform an account request .
9455	Prepare attributes .
9456	Add extra data .
9457	Fetch the result as an object .
9458	Add a dialog to the open control .
9459	Get the connection instance .
9460	Begin a transaction
9461	Load maniacode
9462	Renders the WSDL
9463	Open the socket
9464	Enable watching .
9465	Sets the background color
9466	Set the image .
9467	Set the image id
9468	Set image focus .
9469	Set ImageFocus ID
9470	Protected add link
9471	Get a configuration value .
9472	Set a config value
9473	Get translated string
9474	Get array value
9475	Remove styles from a string
9476	Create new redirect .
9477	Get number .
9478	Factory method to create a driver instance .
9479	Load the ManiaScript .
9480	Begin a frame .
9481	End frame .
9482	Creates a redirect
9483	Append XML .
9484	Build the Redirect driver instance .
9485	Sets the border of the image
9486	Declare a font .
9487	Protected On Image
9488	Calls an image on an image
9489	On image quality
9490	Get a redirect for a given request .
9491	Get all redirect urls .
9492	Get the cached redirects .
9493	set the size of an arrow
9494	Mark this card as selected
9495	Invoke message .
9496	Set the media data .
9497	Get a LIMIT clause .
9498	Converts an array of values to a comma - separated string .
9499	Get a parameter value .
9500	Get param value
9501	Get a value from POST
9502	Restore request parameter
9503	Redirect to manialink
9504	Create a string of link arguments
9505	Create an absolute link .
9506	Increment the position of the current position
9507	Increment the position of the current position
9508	Increment position z .
9509	set new position
9510	Set the scale .
9511	Sets the value of the valign attribute
9512	Set the halign to use .
9513	Sets the cell alignment .
9514	Set the size of the image .
9515	Sets the size of the image .
9516	Sets the size of the image .
9517	add button item
9518	Add a new Spacer .
9519	Get the list of HTTP keys .
9520	Get all redirection status .
9521	Default fatal error handler
9522	Compute the error message
9523	Compute short message
9524	Handle the request .
9525	Upload file to given path
9526	Get the current uri
9527	Calculate the position of a position based on an alignment .
9528	Returns an aligned position
9529	Get the position of an element
9530	Builds and returns the result .
9531	Quote a string
9532	Reset all balance .
9533	Delete Account by asset type .
9534	Configure the class loader .
9535	Get service ids .
9536	Get the return type of a service .
9537	Execute the transaction
9538	Get the balance entry for the given account .
9539	Get the class hierarchy
9540	Change Content - Type
9541	Parse a raw HTTP header
9542	Convert a string to an associative array .
9543	Build a multidimensional array .
9544	Get asset types .
9545	Execute an asset type
9546	Get the last balance of an asset type .
9547	Check the response for the given operation
9548	Mutate a property .
9549	Fetch data from url .
9550	Build the URL for the resource .
9551	Generate translations .
9552	Parse csv file
9553	Localize the data
9554	Backup strings .
9555	Get all asset assets by asset type code .
9556	Get asset type id .
9557	Get customer asset by asset type code .
9558	Get system customer customer id
9559	Execute transaction .
9560	Build the key for the strategies key .
9561	Parse Opauth response
9562	Login action .
9563	Render a view .
9564	Get asset types .
9565	Send the response
9566	Authenticate user response data
9567	Verify the token .
9568	Validates a document url .
9569	Register the client class .
9570	Register token service .
9571	Register the package for console command .
9572	Starts a new session .
9573	Get the class properties .
9574	Set the status code and phrase
9575	parse css
9576	Find the list of tokens in the css language
9577	Find the end of a quoted string .
9578	Find the end of the css
9579	Checks if a rule contains a code .
9580	Merge words .
9581	Check for selectors
9582	Get selectors
9583	Parse a single token
9584	Set the application key for the given request .
9585	Get the current app key .
9586	Add an accept type for a request .
9587	Builds the data from the database .
9588	Unpublish a post
9589	Save unpublish post
9590	Init content scheduler .
9591	Generate a unique key
9592	Generate a secret for a key
9593	Check if a token is valid .
9594	Generate HTTP headers .
9595	Generate query data for app .
9596	Get customer id
9597	Set the fit transformation for the image .
9598	Get the list of manipulations .
9599	Create a new credit card .
9600	Fill object properties
9601	Get the URI portion of the URI .
9602	Set the user info
9603	Set the port
9604	Set the path .
9605	Get path segment by index
9606	Get a query parameter .
9607	Builds the tokens
9608	Get aggregated values .
9609	Returns the configuration for the given strategy
9610	Builds the strategy configuration .
9611	Composes the result .
9612	Execute an asset .
9613	Execute operation .
9614	Prepare log id and admin id .
9615	Validates transaction transactions .
9616	Sets the headers .
9617	Sets a header .
9618	Adds a new header .
9619	Remove a header .
9620	Adds a prefix to the stack .
9621	Adds multiple prefixes
9622	Finds the file for the given class name .
9623	Finds the file with known suffixes .
9624	Convert object to array .
9625	Clean an array .
9626	Set the code .
9627	Init Uri instance
9628	Initialize query parameters .
9629	Initialize uploaded files .
9630	Parse uploaded files .
9631	Parse multiple files .
9632	Check if the request has a specific Content - Type .
9633	Run the application .
9634	Dispatches command line arguments
9635	Output a table
9636	Write an error to STDERR
9637	Display help command
9638	Returns available commands
9639	Make a directory .
9640	Append stub .
9641	Replace a string in a file
9642	Dispatches a request to an API .
9643	Creates and returns a Response object .
9644	Returns the current page .
9645	Get the response .
9646	Builds a response object for a given URI .
9647	Get a page for a given URI .
9648	Returns the alias for the given URI .
9649	Displays a single model .
9650	Creates a new I18nMessage model . If creation is successful the browser will be redirected to the view page .
9651	Builds HTML headline IDs .
9652	Dispatches the request
9653	Run CLI command .
9654	Bind services to the container .
9655	Get markdown renderer instance
9656	Get the blade templates .
9657	Get migration files .
9658	Finds a page by its identifier .
9659	Returns the page name for a page identifier .
9660	Builds the page meta data
9661	Returns the page tree
9662	Get all pages for a given path
9663	Show success .
9664	Load messages from database .
9665	Send activation mail .
9666	Searches for a set of rows .
9667	Render the template
9668	Render an expression
9669	Resolves expression key path .
9670	Finds all classes in this bundle .
9671	Prepare the configuration array .
9672	Returns the host of the request .
9673	Get a value by key
9674	Displays a single Message model .
9675	Updates an existing Message model . If update is successful the browser will be redirected to the view page .
9676	Deletes an existing Message model . If deletion is successful the browser will be redirected to the index page .
9677	Finds the i18n model based on the id and language .
9678	List pages
9679	Get the parsed content .
9680	Gets the sorting .
9681	Get the URI
9682	Get the url from the resource .
9683	Returns the title for this object .
9684	Perform a GET request .
9685	Builds the url for the API call
9686	Handle the response .
9687	Initializes the shared configuration .
9688	Log profiling .
9689	Get template .
9690	Returns the value associated with a key path .
9691	Sets the root directory .
9692	Returns an array of class reflections .
9693	Get a class reflection .
9694	Upload media .
9695	Insert new media
9696	Returns the number of hours in this Period .
9697	Get dirty data .
9698	Register a clean entity
9699	Get dirty fields .
9700	Add identifiers to the dirty fields .
9701	Get entity id from string .
9702	Get the tags .
9703	Get the real class name
9704	Configure TabElement Factory .
9705	Deletes media data .
9706	Create the title .
9707	Renders pdf .
9708	Render image .
9709	Hydrate data .
9710	Hydrate a list .
9711	Deserialize all data .
9712	Deserialize data .
9713	Guess collection class .
9714	Builds the sitemap data .
9715	Returns the navigation for the given element id .
9716	Returns the iterator for the given element id
9717	Normalize the list of attributes .
9718	Get extra property .
9719	Generate a random string
9720	Limits a string of words
9721	Returns an array of all files in a given directory
9722	Generate short description
9723	Returns true if the time slot is in the overlapping time slot .
9724	Returns a list of time slots that are not overlapping time slots .
9725	Merge time slots .
9726	Get a resource .
9727	Merge default parameters .
9728	Execute a request .
9729	Renders the backend view .
9730	Get the iterator
9731	Get grid iterator
9732	Before save callback
9733	Parses the given content and adds it to the CodeDefinitionSet .
9734	Updates an existing Media model . If update is successful the browser will be redirected to the view page .
9735	Do media join .
9736	Upload media .
9737	Updates data .
9738	Displays the media list
9739	Renders a media row .
9740	Deletes an existing Media model . If deletion is successful the browser will be redirected to the index page .
9741	Sets the attribute list .
9742	Get default model data for serialization .
9743	Create the view directories .
9744	Export views .
9745	Export controllers .
9746	Export routes .
9747	Check for missing packages .
9748	Copy plugins .
9749	Copy asset files
9750	Copy less sources .
9751	Get settings by categories .
9752	Create a new Navigation instance from serialized data .
9753	Create a nav item from an array .
9754	Load a block .
9755	Get module .
9756	Serialize an entity
9757	Returns the model name for the given key .
9758	Returns the class metadata for a model .
9759	Tries to find a class metadata by its ID .
9760	Render tree .
9761	Get a tree of pages
9762	Remove item from cache
9763	List available tags
9764	Find tag weights .
9765	Adds tags to the database .
9766	Remove tags .
9767	Get tab parent options .
9768	Generate table columns .
9769	Count required separators .
9770	Create separators .
9771	Create stop element .
9772	Create tab element .
9773	Get the stop element .
9774	Add Member Icon
9775	Get select options .
9776	Returns the list of all statuses
9777	Lists all available constants for a given type
9778	Get type label
9779	Get listing order .
9780	Find replace value
9781	Advances the iterator to the next element .
9782	Get the title of the current item .
9783	Generate the active field .
9784	Create a new router instance .
9785	Get a driver instance .
9786	Call driver .
9787	Call the route .
9788	Resolve dispatch dependencies .
9789	Get nested parameters .
9790	Find the route attributes for the given resolver .
9791	Find the Restful route .
9792	Find the route for the given resolver .
9793	Get alternative resource action .
9794	Dispatches the given driver .
9795	List pickup items .
9796	Returns the calculator for the given shipping method .
9797	Get the shipping method .
9798	Define a route .
9799	Build the resource schema .
9800	Update shipping address .
9801	Call controller method .
9802	Handle Illuminate response .
9803	Handle response callback .
9804	Throw an abort .
9805	Determine if content is not empty .
9806	Registers an error handler .
9807	Get action options .
9808	Delete an item from the cache
9809	Save an item in the cache .
9810	Add a block to the output .
9811	Get a value from the cache .
9812	Add a value to the cache .
9813	Set multiple items at once
9814	Delete multiple keys
9815	Check if a key exists .
9816	Get HTML label .
9817	Get full path name .
9818	Make a category tree
9819	Write a command to STDOUT
9820	Set resource members
9821	Tries to load a PSR - 1 class from a PSR - 7 class .
9822	Set the accountId
9823	Translates the given exception to an appropriate format .
9824	Get the console instance .
9825	Execute the request
9826	Returns an array with the values of the enumeration .
9827	Returns a list of buckets in the blob .
9828	Update the properties of a container .
9829	Check if blob exists .
9830	Encode a token .
9831	Decodes a token .
9832	Get the JWT payload .
9833	Splits the token into segments .
9834	Get the expiration timestamp .
9835	Create index .
9836	Extract default value .
9837	Add previous button
9838	Add next button
9839	Returns the value of the first button .
9840	Reveal the given object .
9841	Checks if value is an object .
9842	Check if value is empty .
9843	Convert data to a record .
9844	Parse SOAP response data
9845	Get a configurator
9846	Check if a configurator exists
9847	Get writer class name by format .
9848	Get a writer based on the Content - Type .
9849	Transforms a DateTime object into a formatted string .
9850	Initializes the view .
9851	Read data from a payload .
9852	Parse a payload
9853	Write a payload
9854	Get a reader for a given content type and type .
9855	Get a suitable writer for a given content type and type .
9856	Before test .
9857	Run after tests .
9858	After step .
9859	Initialize Laravel .
9860	Boot Laravel Application
9861	Go to a named route .
9862	Go to an action on an action .
9863	Add the given action name to the action name .
9864	See that the current url matches the given route .
9865	Checks that the current action matches the given action .
9866	Checks that a value exists in the session .
9867	Checks that form has errors .
9868	Checks for form error message .
9869	Set the user as logged in .
9870	Insert a record into the database .
9871	Transforms a number to a numeric value .
9872	Returns a NumberFormatter instance .
9873	Nested nested array
9874	Flatten a multidimensional array .
9875	Convert input data to stdClass .
9876	Creates a new column .
9877	Builds the header view .
9878	Builds the cell view .
9879	Creates a new column .
9880	Returns whether this column is a compound column .
9881	Get Base Data
9882	Get shipping data .
9883	Returns the invoice data .
9884	Send data to the APM Server
9885	Trim whitespace from a string .
9886	Convert FQCN to block prefix
9887	Transforms a value .
9888	Parses a value into a usable type .
9889	Add a column .
9890	Check if the uploaded file is valid .
9891	Resolve a filename
9892	Update the edit form
9893	Updates the edit form .
9894	Update form edit form .
9895	Lock record .
9896	Registers a set of public keys
9897	Publish an item to a channel
9898	Load language file .
9899	Send the given request
9900	Parse url parts
9901	Store a newly created user .
9902	Show the edit user .
9903	Update the specified user in storage .
9904	Remove the specified user .
9905	Create a new MPDF instance .
9906	Add the host header
9907	Build a Guzzle request .
9908	Execute callable chain
9909	Check if a class exists
9910	Run the queue .
9911	Ensures the thread is running .
9912	Add a request to the queue
9913	Publish a batch of items
9914	Get the key associated with a cursor .
9915	Rewind to the beginning of the collection
9916	Export the current record .
9917	Set options from an array .
9918	Publish an API call .
9919	Perform an HTTP request .
9920	Publish an item
9921	Imports headers from one message to another .
9922	Get the protocol version
9923	Validate data .
9924	Load translate messages .
9925	Set local validator local path
9926	Get valid errors .
9927	Update the state of the job .
9928	Get the locked message
9929	Determine if this object can be edited .
9930	Check if an offset exists .
9931	Sorts the collection using a user - defined comparison function .
9932	Parse birthday data .
9933	Get the birthday .
9934	Validates the birthday of an age .
9935	Convert constant to constant name .
9936	Translate a constellation
9937	when updating ACL
9938	response when ACL success .
9939	when shows list
9940	On role create form
9941	On user create form
9942	when creating new area
9943	creates form
9944	handle menu creation
9945	Find one entity by criteria
9946	Get a new instance .
9947	Returns the object factory .
9948	Remove items by criteria
9949	Remove one entity by criteria
9950	Remove one or more objects .
9951	Refresh the backup .
9952	Detach multiple objects .
9953	Get the supported method name .
9954	Call supported method .
9955	Run an action on an object .
9956	Flushes the given objects .
9957	Prepare the tag from bits .
9958	Set pagination options .
9959	Set the current page .
9960	Update the specified Permission in storage .
9961	Get the paginator .
9962	Finds paginated by criteria
9963	Boots extension components .
9964	Boots application memory .
9965	Load routes .
9966	Extend extended validation
9967	Save the model .
9968	Validate the model .
9969	merge validation rules
9970	Remove unused attributes .
9971	Auto hash password .
9972	Disable all enabled filters .
9973	Disable a filter .
9974	Restore disabled filters .
9975	Restore a filter .
9976	Returns the actions column .
9977	Assign this model to a user .
9978	Checks if a given HTTP response code is successful .
9979	Get current template name
9980	Return role form instance .
9981	edit form
9982	creates form
9983	user edit action
9984	create new user
9985	update user
9986	destroy user .
9987	Save user .
9988	Returns true if the path is within the specified path .
9989	Get the registered type
9990	Get the ETag for the given visitor identifier
9991	Get the timestamp field .
9992	Get the timestamp for a given timestamp field
9993	Execute the collection
9994	Execute collection ids
9995	Get the number of rows in the collection
9996	Get table name
9997	Get the order by .
9998	Sets order by value
9999	Get the conditions as a string .
10000	Creates AND WHERE condition
10001	Set the join table name
10002	Edit ACL collection
10003	Update ACL .
10004	Sets the logger to use .
10005	Starts the process .
10006	Stop the thread
10007	Kill the thread
10008	Where condition .
10009	Get where .
10010	Get the number of rows in the database
10011	Executes the query and returns the first row .
10012	Returns an array of ids .
10013	Executes the query and returns the result .
10014	Load by type field .
10015	Returns the SQL to select fields .
10016	get extension modules
10017	Squash a resource .
10018	Define all permissions for the current user .
10019	Assign a role to a user .
10020	Remove a role from a user .
10021	Create new record .
10022	View edit action .
10023	Store role .
10024	Update role .
10025	destroy a role
10026	Save role .
10027	import permission action
10028	Show acl .
10029	Clear analytics data
10030	Clear message data
10031	Make module ACL
10032	Show the form for editing the role .
10033	return list of roles which can be added to admin
10034	get statuses
10035	Returns actions column
10036	Get user roles .
10037	Modify an entity
10038	Get a producer for a registered type
10039	Register a producer for a given type .
10040	Register a producer by class name
10041	Get an object by its ID
10042	Gets an entity by its ID
10043	Add a value to the object pool
10044	Add an object to the database .
10045	Count the number of records for a given type .
10046	Find a specific type .
10047	Get select by id
10048	Get the escaped field names for a type .
10049	Get the order_by field .
10050	Get trait names by type
10051	Recursive function to get trait names
10052	Add editable controls .
10053	Determine if the given control is checked .
10054	Prepares an active page .
10055	Set Login Tracking Tracking Data
10056	Sets the email tracking .
10057	Returns the SitePath object for the given URL .
10058	Analyze url
10059	Returns basket product category path
10060	Checks if two fields are the same .
10061	Load data from a database .
10062	Creates a copy of this object .
10063	Revert a field
10064	Get old field value
10065	Set field value
10066	Insert data into the table
10067	Update the object
10068	Refresh the generated field values .
10069	Compare values against another field
10070	Generate a URI based on a named route .
10071	store role created .
10072	Get errors for a field .
10073	Check if a field has an error
10074	Add an error to the collection
10075	Prepare product title
10076	Modify by contact .
10077	Modify by newsletter .
10078	Modify user with registration data .
10079	Disable an event subscriber .
10080	Restore disabled event subscriber
10081	Disables listeners for an event .
10082	Disables an event listener .
10083	Restores all event listeners .
10084	Restores listeners for an event .
10085	Get the subscriber class name .
10086	Determine if the given subscriber is an event subscriber .
10087	Get event listeners .
10088	Returns active user id .
10089	Returns active user s email hash .
10090	Generate a cache key .
10091	Generate unique cache key .
10092	Send the cURL request .
10093	Check if a key exists
10094	Get a value from the array .
10095	Get a value from an item
10096	Set a value in the array
10097	Put a value in the array .
10098	Set a value in an array
10099	Remove a value from the array .
10100	Remove a value from an array
10101	Sets a logger instance .
10102	Boot service provider .
10103	Set mail configuration .
10104	Getter for setting
10105	Convert a value to an array
10106	Get the page size .
10107	Register the Capsule services .
10108	Validates the input
10109	Get the singleton instance .
10110	Add hooks .
10111	Loads a script
10112	Displays notices .
10113	Register a notice .
10114	Dismiss the notice AJAX handler .
10115	Dismisses a notice .
10116	Mark a user as dismissed .
10117	Mark a notice as dismissed .
10118	Restore a notice .
10119	Restore the dismissed notice .
10120	Restore a notice .
10121	Get the dismissed notices .
10122	Determine if a notice is dismissed .
10123	Get a single notice .
10124	Modify an item
10125	Reine a collection
10126	Include the attachments .
10127	Get list of items .
10128	Set the attachments .
10129	Parse the relations .
10130	Attaches an attachment .
10131	Attach an attachment .
10132	Merge two arrays .
10133	Get response headers
10134	Get card reference .
10135	Get the customer reference .
10136	Get class name
10137	Get the namespace of a class .
10138	Finds the correct method for the object .
10139	Initializes field mappings .
10140	Set translation language
10141	Read a property
10142	Displays the default entity manager .
10143	Invoked before a record
10144	Call after action
10145	Extend collection
10146	Append data to collection .
10147	Prepend entity to collection
10148	Magic method to get property value .
10149	Return the last entity
10150	Get element moved by offset
10151	Determine if a field contains a value .
10152	Search for a field in the collection
10153	Shift an item off the collection
10154	Filter the collection by a given callback .
10155	Get collection by callback
10156	Splits the collection into a new collection .
10157	Slice a collection
10158	Split the collection into chunks .
10159	Array access .
10160	Remove distinct values from the collection
10161	Reverse the collection .
10162	Get all values for a property .
10163	Bind collection to collection
10164	Group collection by field name
10165	Prepare scopes .
10166	Parse scope arguments .
10167	Set type of variable
10168	Registers an annotation based on a namespace .
10169	Convert a string to camelCase
10170	Prepare data for insert .
10171	Updates the data .
10172	Parse filter fields
10173	Parse filter values .
10174	Convert a value to an array
10175	Get the label .
10176	Get additional style by type
10177	Get additional styles by type
10178	Get the link for this request .
10179	Convert data to an array
10180	Configures the model .
10181	Set the database connection .
10182	Import a field .
10183	Convert a string to lowercase
10184	Fire the job .
10185	Mark this record as deleted .
10186	Get class metadata
10187	Flushes the given entity .
10188	Find entity by id .
10189	Clear an entity from the database .
10190	Removes an entity from the database .
10191	Refresh an entity .
10192	Returns the repository for the given entity name .
10193	Returns true if the collection contains the given entity .
10194	Creates a new entity manager .
10195	Process an xcdr request
10196	Perform a recursive merge
10197	Merge two lines together
10198	Checks if two lines are added or modified .
10199	Checks if two lines were removed or changed
10200	Notifies the CDDR record .
10201	Registers the plugin .
10202	Apply configs .
10203	Add env vars to the app
10204	Pop a job from the queue
10205	Insert a job into the queue .
10206	Handles the request to the XCdr attribute
10207	Convert a string to upper case .
10208	Create a record .
10209	Read records .
10210	Update a record
10211	Destroy a record
10212	Removes the record from the database .
10213	Count the number of records .
10214	Proxy a service .
10215	Closes the log .
10216	Load widgets .
10217	Load options class
10218	This is called when an XMLRPC engine starts .
10219	Add child element
10220	Create new permission .
10221	Show the edit permission .
10222	Update the specified permission in storage .
10223	Remove the specified permission from storage .
10224	Sets the adapter to use .
10225	Returns the type of the adapter .
10226	Waits for a read operation .
10227	Gets a list of channels .
10228	Get all games .
10229	Parse the given data as an array .
10230	Convert the given data to an object .
10231	Convert input data to a json string .
10232	Validate input as string .
10233	Returns the value as an integer .
10234	Parse string as float .
10235	Validate data as a boolean .
10236	Generate a hydrator .
10237	Find all instance properties .
10238	Creates the destructor
10239	Creates the hydrate method .
10240	Update application config .
10241	Create local storage .
10242	Find one page by attribute value
10243	Find pages by attribute
10244	Find one page by option
10245	Find pages by option
10246	Register the bindings
10247	Register the View Parser instance .
10248	register the launcher
10249	Instantiates a database driver
10250	Get an invalid result .
10251	Starts a timer .
10252	Subscribe a handler to a signal
10253	Unsubscribes from a signal
10254	Get the value of the attribute .
10255	Set the primary keys for a column .
10256	Execute a query
10257	Set column properties
10258	Remove from a table name .
10259	Selects a virtual server .
10260	Selects a virtual server by the given port .
10261	Returns the virtual server port by its ID .
10262	Returns the TeamSpeak3_Server object matching the given name .
10263	Returns the TeamSpeak3_Server object matching the given unique identifier .
10264	Creates a new virtual server .
10265	Deletes a server .
10266	Starts a server .
10267	Stop the server .
10268	Returns a list of all the permission names .
10269	Returns an array with the specified permission ID .
10270	Returns the ID of a permission by its name .
10271	Returns the name of a permission by its ID .
10272	Returns the category the specified permission ID .
10273	Returns the IDs of the specified permission .
10274	Writes a log message .
10275	Tries to login a TeamSpeak3 server .
10276	Logout the server .
10277	Sets the value of a TeamSpeak3 connection .
10278	Get a validator
10279	Sets the content for the given request .
10280	Parse the result
10281	Returns the common application attributes .
10282	Get an option
10283	Build the options
10284	User command .
10285	Ping server .
10286	Sets the attribute
10287	Formats the money .
10288	Formats the monetary amount .
10289	Get the rounded amount
10290	Split amount by percentage
10291	Prepare and inject given elements .
10292	Get the authenticated user .
10293	Run the application .
10294	Search the route in the given routes
10295	Get request method
10296	Get all logs .
10297	decode death by camel - case
10298	Convert bytes to human readable format
10299	Returns the name of the given codec .
10300	Returns the name of the group type .
10301	Returns the name of the permission type .
10302	Returns the log level .
10303	Creates a log entry .
10304	Returns a list of logs
10305	Returns the list of traits used by this class .
10306	Calls a trait method
10307	Calls all EventTrait methods .
10308	Returns the attribute labels .
10309	Returns an array of attribute hints .
10310	Returns a multidimensional array .
10311	Fetches the error from the server .
10312	Fetches the reply from the server .
10313	Get the identity .
10314	Check if user has identity
10315	Restore the state of the model .
10316	Get a specific user .
10317	Gets a list of users followed by a user .
10318	Get all notices that are not visible to the current user .
10319	Get a channel .
10320	Escapes the TeamSpeak3 string .
10321	Un - escapes the string .
10322	Get a team .
10323	Adds a new result .
10324	Get a stream .
10325	Returns a list of streams .
10326	Get all featured streams .
10327	Get followed streams
10328	Gets a summary of streams .
10329	Get top .
10330	Get the value of the element
10331	Resolves a TSDNS hostname .
10332	Get configurables .
10333	Sends a text message .
10334	Kicks the client .
10335	Downloads the user s avatar .
10336	Bind events to controller
10337	Connect event handler
10338	Get a query parameter
10339	Get the base URI
10340	Executes a command on the server .
10341	Waits for the connection .
10342	Prepares a command for execution .
10343	Returns the TeamSpeak3 host .
10344	Lists all installed extensions .
10345	Writes the configuration file .
10346	Sets the parent menu bar
10347	Get table columns
10348	Create a Transcoder instance
10349	Get value by case - insensitive case - insensitive key .
10350	Set a word by case insensitive case .
10351	Returns a list of all notices for the current user .
10352	Lists all registered extensions .
10353	Perform a curl request .
10354	Run task .
10355	Deactivate an extension .
10356	Activate an extension .
10357	Uninstall an extension .
10358	Creates and runs the task .
10359	Returns the TeamSpeak3_Client object matching the given name .
10360	Downloads the icon .
10361	Sends a text message to the channel .
10362	Deletes the channel .
10363	Encodes a payload
10364	Sign a message with a key
10365	JSON decode .
10366	Commit the configuration .
10367	Bootstrap extension manager .
10368	Creates a copy of the channel group .
10369	Sends a text message .
10370	Get the form class name .
10371	Returns the entity with the given id .
10372	Returns a list of entities .
10373	Creates a new entity .
10374	Edits an entity .
10375	Deletes a entity .
10376	Reads a file .
10377	Parses a JSON string .
10378	Parses a file .
10379	Normalize the id .
10380	Clean input attributes .
10381	Sets the value of the label
10382	Adds an element to the collection
10383	Get top level window
10384	Remove an element
10385	Get element by id
10386	Load model state .
10387	Save application state .
10388	Set data type
10389	Called when a channel has been created .
10390	Returns localized versioned data field .
10391	Get localized data field .
10392	Get other versioned data .
10393	Get other package data
10394	Humanize readme .
10395	Build migration task .
10396	Build a report task .
10397	Check if the request matches the request
10398	Parses the request uri and returns the name of the route .
10399	Check strictness .
10400	Returns the TeamSpeak_Profiler object .
10401	Initializes the transport object .
10402	Get blameable attributes .
10403	Get the timestamp attributes .
10404	Evaluate event attributes
10405	Initialize hook attributes .
10406	Generate before request
10407	This method is called after the request is finished .
10408	Reads the data from the server .
10409	Sends data to the TeamSpeak3 server .
10410	Restore dump .
10411	Dump the database .
10412	Init the menu
10413	Add a button to the menu
10414	Fires Widget
10415	Populate columns with longest value .
10416	Populate numeric columns with long value .
10417	Transforms a JSON string into an array .
10418	Register the Doctrine ORM configuration .
10419	Sets a file .
10420	Set a post field .
10421	Sets the raw content .
10422	Resolves an abstract .
10423	Bind a binding to the container
10424	Get the concrete class .
10425	Dispatches an event .
10426	Returns the type of the spacer .
10427	Returns the spacing of a channel .
10428	Adds a set of specified permissions to a channel .
10429	Removes a permission from a channel .
10430	Adds a set of specified permissions to a channel .
10431	Removes a permission from a channel client .
10432	Returns a list of files for a channel .
10433	Returns the TeamSpeak3_Client object matching the given ID .
10434	Returns the TeamSpeak3_Client object matching the given unique identifier .
10435	Move a client .
10436	Kicks the specified client .
10437	Removes a specified permission from a client .
10438	Returns the server group by its ID .
10439	Returns the server group matching the given name .
10440	Adds multiple permissions to a server group .
10441	Returns a list of registered profiles .
10442	Returns the channel group object matching the given ID .
10443	Returns the channel group object matching the given name .
10444	Adds a set of specified permissions to a channel group .
10445	Reset the user s permissions .
10446	Uploads an icon .
10447	Creates a snapshot .
10448	Returns a list of logs .
10449	Writes a log message .
10450	Sorts the client list based on the server list .
10451	Sorts the server group list .
10452	Sorts the list of files .
10453	Creates a copy of the server group .
10454	Returns the name of an icon .
10455	Returns the class name for this object .
10456	Returns the HTML for the current member .
10457	Filters a list of nodes .
10458	Writes a cache file .
10459	Returns the generated class name
10460	Connect to the socket
10461	Disconnects the adapter .
10462	Reads a single line from the server .
10463	Checks if the given name can be created .
10464	Create a new role .
10465	Update the specified role in storage .
10466	Remove the specified role .
10467	Perform a GET request .
10468	Returns the class name of the candidate .
10469	Returns the icon for the current context .
10470	Returns the constituent name .
10471	Returns the HTML for the country flag .
10472	Sends a transfer to the TeamSpeak3 server .
10473	Sends a file to the server .
10474	Creates a new TeamSpeak3 object .
10475	Returns the session context
10476	Returns the type manager .
10477	Get database connection
10478	Remove a database connection
10479	Process security filters .
10480	Dispatches the request
10481	Get parameters from GET
10482	Render a webpage
10483	Validate a request object .
10484	Dispatches the view .
10485	Redirect to default module view
10486	Redirect to default user view
10487	Initializes the user profile .
10488	Get the user preference
10489	Get default permission
10490	Returns the view name
10491	Sets the view name .
10492	Returns the current view set .
10493	Sets the current view set .
10494	Sets the path to the base directory .
10495	Get path to module
10496	Generate a hash based on the given columns .
10497	Checks whether a string matches the given hash .
10498	Populates the metadata object
10499	Set the account to use
10500	Sends an email .
10501	Log an email .
10502	Retrieves information about a specific tag .
10503	Get autoload library file path
10504	Load metadata class
10505	Get core lib file path
10506	Finds the class file on the apc cache .
10507	Fill a person .
10508	Add a job to the collection .
10509	Process all jobs
10510	Run cron command .
10511	Render the label
10512	Flatten a path .
10513	Get the config .
10514	Creates a curl request .
10515	Stores the received responses .
10516	Get Plot Data Array
10517	Render XY Plot
10518	Parses a string representation of a mark .
10519	Convert font name to font name
10520	Returns a singleton instance .
10521	Get an attribute
10522	Set an attribute in a group .
10523	Get attribute value by key
10524	Find a model by its primary key
10525	Get the model .
10526	Generate unique ID for a function .
10527	Call all registered functions
10528	Add a callable to a hook .
10529	Determine if a hook exists .
10530	Call hook .
10531	Replace a hook .
10532	Count the number of registered hooks .
10533	Determine if a hook is being executed .
10534	Check if hook is called .
10535	Add a route to the group
10536	pipe middleware
10537	Run application
10538	Handle a signal execution .
10539	Sets a definition .
10540	Get a raw definition
10541	Encrypt a value
10542	Decrypt a value
10543	Get default key
10544	Calculate arguments .
10545	Get string type
10546	Add app .
10547	Get a sub route
10548	Serialize route
10549	Unserialize route data
10550	Convert year to actual year
10551	Get current time stamp
10552	Returns day name .
10553	Returns short day name .
10554	Returns the month name .
10555	Returns the short month name .
10556	Format a datetime .
10557	Get the formatted date .
10558	Registers base services
10559	Create a new section tree
10560	Sets the owner .
10561	Remove comments from the input
10562	Minify CSS .
10563	Set a global variable .
10564	Quote a value
10565	Explode a string
10566	Get a role by its name .
10567	Add a role to the user
10568	Returns true if the user has the given role .
10569	Default error handler
10570	Default exception handler
10571	Get error message
10572	Returns an error backtrace
10573	Sets the name .
10574	Adds a new setting .
10575	Adds a setting to the cache
10576	Unset an offset
10577	Set the sync state .
10578	Collect data for synchronization
10579	Get expression context .
10580	Terminate this execution .
10581	Registers a child execution .
10582	Triggers when a child execution is terminated .
10583	Sets the scope .
10584	Create a new execution instance .
10585	Create a nested execution .
10586	Returns child executions of given node .
10587	Recursively computes the scope of the execution .
10588	Get a variable from the scope .
10589	Get a variable from the scope .
10590	Set a variable .
10591	Sets a variable in the scope .
10592	Remove a variable .
10593	Removes a variable .
10594	Execute the command .
10595	Wait for a signal to be terminated .
10596	Sends a signal to the server .
10597	Take transition .
10598	Creates a new concurrent root .
10599	Load a message from a file
10600	Get localized message .
10601	Get the Zend_Template object
10602	Checks if the given directory is readable .
10603	Checks if the given directory is writable .
10604	Check if given value is writable .
10605	Check if given value is readable .
10606	Checks if value is a valid email address .
10607	Check if value is a valid IP address .
10608	Validate an IPv4 address .
10609	Validate an IPv4 address .
10610	Validate an IPv6 address .
10611	Initializes the view .
10612	Check if an attribute exists in the given class
10613	Returns true if the specified method exists .
10614	Get method parameters .
10615	Get a reflection method .
10616	Convert the collection to an array .
10617	Get sms response .
10618	Get blank line
10619	Count term cols
10620	Returns an error block .
10621	Get line of term
10622	Slices an array element .
10623	set validator rules
10624	Complete the flow
10625	Get an object .
10626	Create an object
10627	Registers the extension
10628	Authenticate a user with an authorization code
10629	Gets a single feed
10630	Get the list of liked media .
10631	Set a relationship for a user .
10632	Sets an array of properties
10633	Find all records .
10634	Count all records in the database
10635	Find record by id
10636	Insert a record into the database .
10637	Perform a select query
10638	Execute query and return all results
10639	Determine if the rule can be run .
10640	Creates a link element .
10641	Add the form to the parent .
10642	Parse a picker map
10643	Convert an array of reflection classes to self instances
10644	Initialize variables .
10645	Get field by column name
10646	Get key search rule
10647	Set the values of an array
10648	Save old field values
10649	Returns an associative array containing the values of the field .
10650	Convert SQL array to recursively
10651	Set a single SQL record
10652	Get input data for a specific join field .
10653	get join rule
10654	Get request method
10655	Get the request URI
10656	Get options from configuration
10657	Make builder instance .
10658	Issue an access token
10659	Format a report
10660	Decode a json file
10661	Validate a given timep
10662	Lists all Comment models .
10663	Do update action .
10664	Execute the route
10665	Implode a list
10666	Render CSV file .
10667	Render data table
10668	Get the data table for a given object .
10669	Loads the stateful object from the session
10670	Get a property .
10671	Returns the currently active record .
10672	Set the active record ID .
10673	Fetches records from the database
10674	Perform a direct fetch
10675	Fetches records matching the specified search rule .
10676	Gets the number of records in this table .
10677	Run the search .
10678	Get number records from sql
10679	Fetches the next record from the result set
10680	Append scss script to scss map
10681	Get a configuration value .
10682	Bootstrap the package .
10683	Attempts to authenticate user .
10684	Set the request .
10685	Set the maximum age of the file .
10686	Convert input to mime type
10687	Validate a mime type
10688	Check the mime type .
10689	Check if the current file is a full file .
10690	Set file properties
10691	Check if the request is ok
10692	Read the content from the filesystem .
10693	Sends the content
10694	Clean the source .
10695	Minify JS code .
10696	Minify CSS content
10697	Wordwrap function .
10698	Get text content
10699	Serve text response
10700	Set allowed origin .
10701	Sends the file
10702	Register a new provider .
10703	Denormalizes data .
10704	Returns true if the given data type supports the given type .
10705	Validate data .
10706	Validate a model .
10707	Get action attribute .
10708	Get the URL attribute .
10709	Go to the next step .
10710	Saves the current step .
10711	Go back to the previous step
10712	Finish the form
10713	Cancel the session .
10714	Renders this form .
10715	Generate a random string
10716	Returns true if the given callback is empty .
10717	Shortcut for a ternary function .
10718	Checks if a value is in a container .
10719	Merge two variables
10720	Creates a new app instance .
10721	Dispatches an event .
10722	Count by field group
10723	Performs aggregate command .
10724	Find a document by its ID .
10725	Get MongoId objects
10726	Normalize the given date .
10727	Check if form is in form ref libs
10728	Render the webhook .
10729	Get the current page URL
10730	Initialize all form objects .
10731	Compares two integer values .
10732	Get an integer value
10733	Find source files
10734	Register a namespace
10735	Builds the cache
10736	Find composer autoloader class
10737	Find the vendor directory for a composer autoloader class .
10738	Get Loaders for a class
10739	Get a middleware .
10740	Set a middleware .
10741	Returns a new instance with the specified string limit .
10742	Returns a new instance with an array limit .
10743	Quote a value .
10744	Parse array value .
10745	Format an array key .
10746	Cast value to string .
10747	Return the string for an object .
10748	Reject an event
10749	Boot the application services .
10750	Render webpage .
10751	render smarty page
10752	Render the view .
10753	Sets the response headers
10754	Create comment .
10755	List the contents of a directory
10756	Sorts modules .
10757	Get all available routes
10758	render menu items
10759	Render a single menu item
10760	Write a CSV to the stream .
10761	Configure the command .
10762	Read config .
10763	Runs checks .
10764	Run the export
10765	Writes the cached settings .
10766	Get a read - only cache instance .
10767	Initialize the configuration .
10768	Reads and executes a command .
10769	Flushes multiple streams at once
10770	Check if value is a chainable
10771	Validates the form
10772	Check if the field is satisfied by the given group
10773	Complete the flow
10774	Get the value of the field .
10775	Get the value of the field .
10776	Save the old value
10777	Returns the default value for this field .
10778	Get the value of the field on create .
10779	Returns the value of this column .
10780	Check if the field is required
10781	Check value type
10782	Validates the data object
10783	Find a file by name .
10784	Prepare theme name .
10785	Sets the theme to use .
10786	Register a theme .
10787	Adds a theme .
10788	Convert array key to offset
10789	Convert array offset to key
10790	Compute the standard deviation of an array .
10791	Sets the middleware .
10792	Get action name .
10793	Get path params
10794	Returns true if the scheme matches the given scheme .
10795	Returns true if the hostname matches the given string .
10796	Returns true if the URI matches the pattern .
10797	Fetches the tree
10798	Fetches the path for a specific node
10799	Get children nodes
10800	Returns all settings .
10801	Get the link value
10802	Get text .
10803	Get new record
10804	Sets the secret .
10805	Returns the binary representation of a number .
10806	Returns a formatted number .
10807	Add table column
10808	Adds an SQL expression to the table .
10809	Reset SQL .
10810	Adds an order by clause to the query .
10811	Adds another SQL to this query
10812	Add an association
10813	Returns the SQL SELECT statement .
10814	Get a value by key
10815	Execute CLI action
10816	Get default template locations
10817	Render the select box
10818	Get fonts from Google
10819	Check if the field matches the given group .
10820	Validates the input .
10821	Validate uniqueness .
10822	Checks if a record can be updated
10823	Can the current user delete a record?
10824	Update an existing record
10825	Create a new record array for the current object .
10826	Generate the id column
10827	Inserts a record
10828	Delete a record
10829	Get the list of on audit fields .
10830	Run the DOT trigger
10831	Get the join fields for the given join object
10832	Gets the join object for the given join object
10833	Check if we need to generate id generation
10834	Runs the tests .
10835	Initializes the report .
10836	Resolve the route .
10837	Resolves action parameters .
10838	Check if a setting has a specific setting .
10839	Get a setting by name and flag .
10840	Get all settings .
10841	Load settings from cache .
10842	Set cache location .
10843	Prefixes CSS content
10844	prefix align items
10845	Prefixes the Content - Content - Content - Content
10846	Prefixes the label of a flex - self .
10847	Prefixes a flex value
10848	Prefixes the prefixed content
10849	Get all prefix rules
10850	Comment on a media .
10851	Make a DELETE request
10852	Get the filtered media .
10853	Get preferred image
10854	Get the placeholder .
10855	Creates a rule from a string .
10856	Get the string representation of the rule .
10857	Get Eloquent ReflectionMethod .
10858	Lists all sitemaps .
10859	Render sitemap .
10860	Returns an array representation of XML .
10861	Check if access token is valid .
10862	Determine access token
10863	Call a method on the stack .
10864	Determine if context changed .
10865	Stores a command .
10866	Executes the given callback .
10867	Get a phi
10868	Create an environment .
10869	Get pattern by name
10870	Merge the group config with the given group .
10871	Remove a record from an array
10872	Remove a record from the database
10873	Remove a record from the database .
10874	Transform relations to array
10875	Parse XML metadata array
10876	Read meta collection
10877	Prefix package name .
10878	Allow access to the current user .
10879	Build the PhpRedis driver instance .
10880	Get the model for a given table .
10881	Add a resolver for a given type
10882	Returns the resolver for the given type
10883	Sets a sub resolver for a given type .
10884	Resolve a reference
10885	Set the authorative attribute .
10886	Register a resolvers in a module
10887	Sorts modules .
10888	Set the priority of a module .
10889	Configure main module from composer . json
10890	Find all modules in a given path .
10891	Get element by field name
10892	Register the service .
10893	Convert formatted string to value
10894	Convert value to formatted string
10895	Convert value to number format
10896	Convert a number to a localized value .
10897	Convert a value to a date .
10898	Convert a date value to a string .
10899	Convert value to datetime format .
10900	Convert a datetime value to a string .
10901	Convert value to currency
10902	Convert currency to float value .
10903	Convert mask value to phone number
10904	Convert a datetime format from one time to another .
10905	Parse date by format .
10906	Render DSN .
10907	Render the DSN for pg .
10908	Render DSN parts .
10909	Insert data into a table
10910	Insert data into a table
10911	Get the request path .
10912	Get an entry by its identifier .
10913	Format a query string .
10914	Format a value for the query .
10915	Sets the value of binded parameters .
10916	Get database profile .
10917	Formats the given report
10918	Validate a password .
10919	Validate an email address
10920	Validate a date .
10921	Get the error message
10922	Make an adapter .
10923	Agrega un registro
10924	Generate a new unique ID
10925	Get a new system ID
10926	Generate a new GUID
10927	Get new id from database
10928	Get a visible attribute .
10929	Set the formatter
10930	Prepare a file .
10931	Closes a log file .
10932	Returns the path to the log file
10933	Get formatter by file extension
10934	Get the document manager .
10935	Render a view .
10936	output the pdf
10937	Set the base URL of the Rest Client
10938	Creates a curl resource .
10939	Retrieves multiple resources at once .
10940	Make a POST request to the API .
10941	Post many requests at once .
10942	Push a job onto the queue .
10943	Create the payload for a job .
10944	Returns the content element identifier .
10945	Returns the content element signature .
10946	Returns the signature for a content element .
10947	Get the title
10948	Removes a record from the form .
10949	Sort record by field
10950	Filter view children by view column
10951	Filter view children by system language .
10952	Set field value by db key .
10953	Get an array representation of the entity .
10954	Fills entity by data .
10955	Extract a zip file .
10956	Add source to a zip archive .
10957	Extracts a gz file .
10958	Read a line from a file .
10959	Get the size of a directory .
10960	Returns an array of class names and their names .
10961	Adds a new route .
10962	Resolves the route for the given request .
10963	Resolves a config key .
10964	Check if a key exists
10965	Get the value associated with the given key .
10966	Load a config file .
10967	Get background details .
10968	Connects to Twitter .
10969	Check response status code
10970	Handles the received message .
10971	Determine if the given status is a message .
10972	Read the next chunk size .
10973	Read the stream .
10974	Returns the value of a property .
10975	Returns the default value of the field
10976	Get hidden value
10977	Get text .
10978	Returns an associative array containing the scoped key handlers .
10979	Get context menu
10980	Get event handler
10981	Get the redirect page
10982	Get the type of the event handler
10983	Set form name
10984	Adjust form name
10985	Returns a formatted function .
10986	Parse a function string into an array
10987	Call a method .
10988	Clears the result .
10989	Halt the request .
10990	Reset the stack .
10991	Creates a new instance of the specified type .
10992	Convert counter integer to string
10993	Performs a GET request .
10994	Perform a POST request
10995	Get the response
10996	Determine if we should follow a redirect .
10997	Check effective time
10998	Parse a string into an array
10999	Parse a string
11000	Render form object
11001	render smarty template
11002	Render PHP form .
11003	Display a single entity .
11004	Create a new entity .
11005	Calls entity method .
11006	Get middleware .
11007	Returns the default commands .
11008	Updates a user .
11009	Returns the plugin settings .
11010	Get the group information .
11011	Get the direct members of the group
11012	Get effective member information
11013	Parse member data
11014	Parse activity history
11015	Parse affiliate data .
11016	Parse search data
11017	Get the webpage object .
11018	Get element by name
11019	Returns the error elements for the given field
11020	Replace sub forms .
11021	Sets the name of the bundle
11022	Get translation key .
11023	Returns a list of words .
11024	Load config options
11025	Remove item from cache
11026	Get cache ids
11027	Clean the cache
11028	Creates a directory
11029	Reads a configuration file .
11030	Get config reader by file extension
11031	Adds a new branch for the given key .
11032	Adds a new route .
11033	Find route branch by part
11034	Get the next branch for the given URI
11035	Finds issues by issue .
11036	Get WordPress contents .
11037	Get WordPress categories .
11038	Get WordPress menus .
11039	Get WordPress pages .
11040	Get the WP posts .
11041	Get post types .
11042	Get WordPress tags .
11043	Get taxonomies .
11044	Get list of terms .
11045	Add a path to search_path
11046	Set the priority of a module .
11047	Get the relevance of a module
11048	Clear the cache
11049	Get the data from the cache .
11050	Resolves the path to a file
11051	Parse request uri
11052	Saves the form state variables
11053	Get current step
11054	Get form inputs .
11055	Cancel the current session .
11056	Registers a sub type .
11057	Get input .
11058	Delete cache files .
11059	Convert expiration time to seconds
11060	Get KeyWords from a text .
11061	Find all emails in text .
11062	Check if a string contains a given value .
11063	Redirects the request .
11064	Run migrations .
11065	Run migrations from a directory .
11066	Sets the ID of the token .
11067	Run daemon daemon .
11068	Check if a parameter exists
11069	Generate the OAuth request .
11070	Calculate the OAuth signature .
11071	Get a single node
11072	Transition an item .
11073	Add a setting .
11074	Adds multiple settings at once .
11075	Get all settings
11076	Get cached settings
11077	Returns all settings as an array .
11078	Get cached settings as an array
11079	Filter settings by group and flag
11080	Get filtered settings as array .
11081	Render the tree
11082	Renders a node array .
11083	Render a single node item
11084	Run the autoloader
11085	Register autoloader for an environment
11086	Installs all autoloaders
11087	Initializes the boost .
11088	Autoload function
11089	Load a config file
11090	Forward the request to another route .
11091	add glyphicon
11092	Sets an array of query parameters .
11093	Sets the limit and offset
11094	Get the database connection .
11095	Get a property object
11096	Get the object associated with the given object .
11097	Set the association information
11098	Parse a docblock
11099	Creates a new connection from SQLite .
11100	Creates a new SQLite from a SQLite file .
11101	Get a specific field .
11102	Check if a field exists
11103	Returns all field names .
11104	Get initial data model .
11105	Authorize index action
11106	Authorize the given request .
11107	Get a nested item
11108	Initialize the user agent
11109	Returns the export subclass
11110	Get the report subclass
11111	Get runner implementation
11112	Get cache implementation
11113	Builds the SQL to update the database .
11114	Returns the SQL to delete a data object .
11115	Get the style for the edit box .
11116	Get child nodes .
11117	Get attribute value
11118	Get the attributes of this node .
11119	Get child node
11120	Get the literal value .
11121	Cache menu cache .
11122	Call this method .
11123	Returns true if the field is valid .
11124	Returns true if the call is a getter .
11125	Determine if this call is a setter .
11126	Prepare cURL call
11127	Get the response .
11128	Parse the response body .
11129	Save an object variable in the session
11130	Load an object variable from the session
11131	Save all objects in the session .
11132	clear all session objects
11133	Saves a JSON array
11134	Set a view history .
11135	Starts the timer .
11136	get elapsed time
11137	Increments the elapsed time
11138	Reset the counter
11139	Determine if the command is a valid executable .
11140	Get redirect page
11141	is called when an exception is thrown
11142	Processes submitted form data
11143	Get the base URI
11144	Validate the identity .
11145	Sets up the authentication result .
11146	Set a visible attribute .
11147	Get the firsthump .
11148	get from list
11149	Format a report
11150	Call a middleware .
11151	Calls the getter and returns the result .
11152	Call proxy methods .
11153	Calls the setters method .
11154	Set or get halt middleware
11155	Clear middleware .
11156	Disable a middleware .
11157	Enable a middleware .
11158	Get a middleware .
11159	Get a middleware group by id .
11160	Group the middleware group .
11161	Check if a middleware exists .
11162	Check if a middleware is disabled .
11163	Check if a middleware is enabled .
11164	Get middleware .
11165	Create a middleware collection .
11166	Prepend a middleware .
11167	Add a middleware to the stack .
11168	Set middleware context
11169	Call a middleware .
11170	Save the settings to the cache .
11171	Returns an array of Form objects
11172	Setup the autoloader
11173	Find the outgoing transition for the given execution
11174	Returns a call to the remote server .
11175	Creates a javascript call to submit the form .
11176	Return a link to a button
11177	Create a submit button .
11178	Casts a key to a string .
11179	Determine if the given middleware is an abstract .
11180	Determine if a middleware is a collection .
11181	Resolves a middleware .
11182	Resolve a middleware .
11183	Resolves many middleware .
11184	Resolves many middleware .
11185	Resolve a single middleware .
11186	Resolve a single middleware .
11187	Render a Bizform .
11188	Get unique string
11189	Determine if the user has the given role .
11190	Determine if the user has the given role .
11191	Get a hash for the request
11192	Get info from curl
11193	Perform the request .
11194	Returns true if the user has access to the role .
11195	Get a view by name
11196	Format a report
11197	Loads a XML document .
11198	Validate a schema file .
11199	Validates a source .
11200	Resolve Xinclude directives .
11201	Get the value of an element .
11202	Get an element by its name
11203	Set default namespace
11204	Registers the environment namespace .
11205	Determines if the given document is a valid environment configuration document .
11206	Refresh the XPath .
11207	Parse a libxml error .
11208	Get the resolvers for a subject .
11209	Check authorization parameters
11210	Creates a new authorize request .
11211	Complete the flow
11212	Print the output .
11213	Get form inputs
11214	Redraw form data
11215	Show client alert
11216	Show error message
11217	Close the open popup .
11218	run script script
11219	Redirect to view
11220	Append scripts to a script
11221	Append extra scripts to the view
11222	Append styles to a script
11223	Add extra styles to the css
11224	Include base client scripts
11225	Include rte scripts
11226	Include CKEditor scripts
11227	Include prop window scripts
11228	Include validator scripts
11229	Execute all actions that match the given condition
11230	Composes Action Message
11231	Convert comma separated string to array
11232	Process form object errors
11233	Set sub forms
11234	Load a picker form
11235	Set request parameters
11236	Fetches the dataet for this query
11237	Get element ID
11238	Automatically suggest a value
11239	Renders the context menu
11240	Render the form .
11241	Get the event log message
11242	Get list of on event
11243	Run the event log
11244	Get the element that is being triggered .
11245	Add required scripts to the client proxy
11246	Remove a middleware from the stack .
11247	Run middleware .
11248	Create a new Period object from a string .
11249	Generate a secret
11250	Decode a base32 string .
11251	Returns an iterator for the current directory .
11252	List all files in the directory .
11253	Returns a list of directories .
11254	Lists all files in the directory .
11255	Make file .
11256	Create a new directory .
11257	Move the file to a new location
11258	Rename a file
11259	Remove directory recursively
11260	Sets the name of the field .
11261	Sets the type .
11262	Set the input format rule .
11263	Short description of method setValue
11264	Returns the value of the property
11265	Save the children .
11266	Add children to entity .
11267	Returns a list of models
11268	Output a list of models .
11269	Convert a resource to an array .
11270	Generate reCaptcha form
11271	Verify recaptcha
11272	Get service object
11273	Render the error .
11274	Render Http exception .
11275	Render CakePHP exception .
11276	Render a serializer exception .
11277	Render a validation serializer exception .
11278	Render Http as json .
11279	Render HttpException as JSON .
11280	Render CakePHP exception .
11281	Render CakePHP exception .
11282	Default render .
11283	Render a serializer exception .
11284	Render a json serializer exception .
11285	Default validation error render
11286	Render validation serializer as json .
11287	Render a validation error as JSON .
11288	Opens a session by its ID .
11289	Creates a session based on cookie data .
11290	Prepare text .
11291	Displays a text .
11292	Display empty lines .
11293	Initializes the application .
11294	Modifies the response .
11295	Initializes the DebugBar
11296	Starts a session .
11297	Checks if session is hijacking
11298	Regenerate the session .
11299	Validate session data
11300	Bind all layers to this structure .
11301	Protected param from request
11302	Register publish .
11303	Generate CLI header
11304	Parse the raw body .
11305	Remove extra indentation .
11306	Apply the request to the next request .
11307	Parse a URL into a query string .
11308	Bind the template to the page .
11309	Get matches for a given URI
11310	Get the justification constant
11311	Returns a list of local files .
11312	Extracts links from html
11313	Exclude a link from the list of words
11314	Saves a file
11315	Determines if a pdf exists .
11316	Get the next ordered number
11317	Close the stack .
11318	Display text on screen
11319	display n lines
11320	Fit a linear regression
11321	Perform a linear regression .
11322	Initialize table .
11323	Write record to database
11324	Draw a single item
11325	Starts output .
11326	Initialize the driver .
11327	Get the size .
11328	Builds a form for a section .
11329	Get form factory
11330	Load fixtures from iterator
11331	Resolves a relative URL
11332	Installs a package
11333	Install plugin files .
11334	Install a package .
11335	Update a package .
11336	Copies the package files from composer . json
11337	Uninstall a package
11338	Uninstall plugin .
11339	Remove matching files from source
11340	Remove a directory recursively
11341	Sets the text colors
11342	Get the number of text area .
11343	Calculates the width of the given data .
11344	Get by date value
11345	Get date value
11346	Cast an attribute .
11347	Cast attributes to array .
11348	Array access .
11349	Get a menu .
11350	On kernel response .
11351	Returns the service definitions .
11352	Parses the imports .
11353	Parse the service definitions .
11354	Loads a configuration file .
11355	Resolves service definitions .
11356	Initialize autoloader .
11357	Returns the API object
11358	Convert bytes to human readable format
11359	Set the bullet .
11360	Sets a column definition .
11361	Calculate the total width of the table .
11362	Returns whether this table has a header text .
11363	Get header text .
11364	Check data .
11365	Calculate the widths for each column .
11366	Draws the given data .
11367	Creates a new session .
11368	Creates a new session file
11369	Save session data .
11370	Acquire a lock .
11371	Create a new section form .
11372	Factory method to create an object .
11373	Returns a list of all contacts .
11374	Parse the given facts .
11375	Find by id
11376	Find data by where clause
11377	Find all records
11378	Find all records by where clause
11379	Create a new record
11380	Update data by where clause
11381	Parse notation .
11382	Apply an array of conditions to the expression .
11383	Calculate the formulas .
11384	Create a new plugin client .
11385	Sets the File object .
11386	Add a template .
11387	Checks if the cache file is still valid .
11388	Convert blocks to blocks .
11389	Get template metadata .
11390	Builds the definition provider .
11391	Get the result for a given formula .
11392	Save a formula to the stack .
11393	Add a header to an item .
11394	Set dropdown menu
11395	Returns true if the user has the given attributes
11396	Create a download response .
11397	Get the url for a resource .
11398	Set album cover
11399	Get data by type
11400	Get data from url
11401	Install the resources
11402	Checks if a string is a valid date .
11403	Wrap a HTML frame
11404	Run artisan command .
11405	Create a new instance of a class
11406	Creates a Redis session .
11407	Sends new entity .
11408	Register providers .
11409	Register a provider from a file
11410	Returns all facts .
11411	Populate the facts .
11412	Records a domain event .
11413	Apply the domain event to the domain .
11414	Callback for plugin functions
11415	Draws the bar
11416	Calculate a given formula .
11417	Determine if the current request has layout .
11418	Initialize the color .
11419	Override members to the given style .
11420	Clears the styles .
11421	Set the text color .
11422	Set the fill color .
11423	Sets the colors of the text .
11424	Reverses colors .
11425	Creates a new function
11426	Load plugins .
11427	Show the plugin in admin mode .
11428	Check the cache .
11429	Update the plugin cache .
11430	Register hooks .
11431	Get a channel .
11432	Init loggers .
11433	Create a logger instance .
11434	Get all Location objects .
11435	Creates an instance of a class
11436	Returns an array of interfaces .
11437	Get parent class
11438	Get a list of methods
11439	Get a list of properties .
11440	Determine if the given type is defined .
11441	Adds a style to the Materialized resource
11442	Get aggregate style .
11443	Rewrites paths in stylesheet
11444	Wrap media rules
11445	Move imports to the beginning of the content .
11446	Get the archive data .
11447	Remove archive .
11448	Get the archive path
11449	Get archive file path
11450	Cleanup merged values .
11451	Filter array by given array of filters .
11452	It returns the terminal screen size .
11453	Adds a style to the stream .
11454	Render a script .
11455	Create a mailto .
11456	Creates a static control .
11457	Generates a static control .
11458	Adds a CSS style to the given options .
11459	Make the directory .
11460	Set the files to publish .
11461	Initializes the component .
11462	Logs in the given identity .
11463	Regenerate CSRF token .
11464	Log in by cookie .
11465	Get return url
11466	Check if login is required .
11467	Renew the identity cookie .
11468	Renews the authentication status .
11469	Check if the user has the given permission
11470	Returns the list of days of the week .
11471	Save the uploaded file .
11472	Executes the query
11473	Specify the FROM clause to delete
11474	Set insert mode
11475	Add an INNER JOIN to the query .
11476	Adds a WHERE condition to the query .
11477	Adds a having clause to the query .
11478	Returns the SQL for DELETE query .
11479	Creates a positional parameter
11480	Bind the logger interface to the container .
11481	Bind Monolog to container
11482	Set the HTTP status code
11483	Get the formatted body .
11484	Redirect to given url .
11485	Create empty response object
11486	Prepare response headers
11487	Get all cookies for the request .
11488	Default formatters .
11489	Extract auth user password and password
11490	Returns an array of possible scenarios .
11491	Fill the scenario attributes .
11492	Get the form name .
11493	Get all public attributes .
11494	Validates the model .
11495	Validates multiple models .
11496	Creates a reaction .
11497	Add an attachment .
11498	Add a plugin to the request .
11499	Send the request .
11500	Load a class
11501	Get Listener annotations
11502	Set the properties of a listener .
11503	Convert Listener to EventListener
11504	Get one or all options
11505	Set multiple options at once .
11506	Returns the value of a key .
11507	Hydrate object from input array
11508	Load entities from a directory .
11509	Extend the entity manager .
11510	Checks if any predictions are met .
11511	Process the extends attribute
11512	Verify class method exists
11513	Verify class property exists
11514	Verify function .
11515	Verify closure .
11516	Verify the dispatch capability .
11517	Get the dependencies for the dispatch .
11518	Get arguments for dispatch
11519	Dispatch class method .
11520	Dispatch class property .
11521	Get the class for the given dispatch object .
11522	Dispatch function .
11523	Dispatches a dispatch
11524	Dispatch a callable .
11525	Get the arguments for the request .
11526	Get request arguments
11527	Parse request arguments .
11528	Creates an asset
11529	Set the protocol version .
11530	Asserts that the given header values are valid .
11531	Inject a value into an array of headers .
11532	Get the current time .
11533	Checks and updates the cookie fields .
11534	Stores a cookie .
11535	Add cookies from a response
11536	Returns all matching cookies matching the given URL .
11537	Returns all registered cookies .
11538	Serialize all cookies
11539	Unserializes a session .
11540	Check if the request host matches the cookie host .
11541	Creates a command object
11542	Get command arguments
11543	Get help for a given command
11544	Get the frontend class
11545	Converts an expression to a target system .
11546	Parses an expression part .
11547	Process a nested key
11548	Remove unicode characters from a string
11549	Sets the character encoding
11550	Creates an iterator exception .
11551	Initializes the component .
11552	Initialize language prefixes .
11553	Returns the message formatter .
11554	Starts a transaction .
11555	Get the API request URL .
11556	Get the parameters for the last tracks request
11557	Get success messages
11558	Get success message .
11559	Find all budget by id
11560	Get the current language
11561	Parses the Accept Language header
11562	Bind a value to a binding .
11563	Resolves a class .
11564	Validate a url .
11565	Checks if a field name is a live var
11566	Get the value of an object .
11567	Wrap an object
11568	Formats the field as a date .
11569	Generate a session identifier .
11570	Encrypt session data
11571	Decrypt session data .
11572	Get the encryption key .
11573	Set the encryption algorithm .
11574	Sets the hash algorithm .
11575	Prepare update sets .
11576	init the service
11577	Get a parameter value .
11578	Check the target relation exists .
11579	Check if target attribute exists .
11580	Determine if the given value exists .
11581	Generate the SQL clause .
11582	Renders a modal .
11583	Localize a file .
11584	Detach the stream .
11585	Read from the stream .
11586	Creates a new request instance .
11587	Create request from globals .
11588	Sets the server .
11589	Sets the request headers .
11590	Get request path
11591	Get request path without query string .
11592	Returns the http host .
11593	Sets the request method .
11594	Returns the request method .
11595	Returns the mime type for the given format .
11596	Get the format for a given MIME type .
11597	Get request format .
11598	Renders a template .
11599	Initialize the http server
11600	Add a middleware
11601	Create reaction application
11602	Registers an alias .
11603	Sets aliases .
11604	Returns the log level for the given error code .
11605	Generate a proxy
11606	Get method call parameters
11607	Generate proxy class
11608	Generate proxy properties
11609	Get proxy methods
11610	Generate proxy class name
11611	Get method declaration .
11612	Returns true if the method can be proxied .
11613	Check if the given methods can be proxied .
11614	Recursively traversal structure .
11615	Get method parameters
11616	Create a packagist .
11617	Load messages from database .
11618	Setup the application .
11619	Bootstrap the configuration .
11620	Bootstrap core .
11621	Bootstrap the application container .
11622	Get environment variable .
11623	Sets the environment .
11624	Get a configuration value .
11625	Abort the given request .
11626	Throws an HttpRedirectException .
11627	Return a response object .
11628	Redirect to route .
11629	Get a view instance .
11630	Get an item from the collection
11631	Validates a descriptor key .
11632	Validates a descriptor .
11633	Get the cache invalidation settings .
11634	Set the cache invalidation settings .
11635	Initialize the logger
11636	Get the log file path
11637	Verify password .
11638	Set the configuration .
11639	Renders the progress bar .
11640	Renders a progress bar .
11641	Process SOAP request
11642	Get Soap Server
11643	Deletes scheduled entities from the database .
11644	After flush event .
11645	Invalidate an entity .
11646	Add a tag to the list of tags to be invalid .
11647	Returns a list of choice options
11648	Set filter callback
11649	Applies a value to the filter
11650	Get the percentage that should be used to fill the memory .
11651	Get all Seobility models .
11652	Set seobuf values
11653	Get seobility attributes
11654	Convert value to boolean .
11655	Get the ordinate by a xscissa
11656	Get the abscissa by the coordinate
11657	Add an attachment .
11658	Encode the request body
11659	Encodes the Mail object to a file .
11660	Encode parts to a file .
11661	Add a subpart
11662	Encodes a quoted string
11663	Build a header parameter
11664	Builds a URL for a single parameter .
11665	Explode a quoted string
11666	encode header value
11667	Encodes a string using a character encoding .
11668	Return admin messages view .
11669	Returns the next line .
11670	Renders items .
11671	Do everything before controller
11672	Set cache option
11673	Creates a URL .
11674	Creates a sentence .
11675	Extract gallery data from photoset
11676	Returns true if the session is still valid .
11677	Get field error message .
11678	Sets the same site .
11679	Clean and add translation files
11680	Finds classes in a namespace .
11681	Get the path for a namespace
11682	Returns the paths for a namespace
11683	Get namespace prefixes
11684	Get loader prefixes .
11685	Updates the session .
11686	Merge new values .
11687	Get session data
11688	Get the current page number from the query .
11689	Builds the query
11690	Get filters as an array .
11691	Creates a form instance .
11692	Stores the query result .
11693	Get pagination .
11694	Get previous record id
11695	Convert to array .
11696	Add new field
11697	Process the database options
11698	Get connection params
11699	Check if the database is installed
11700	Returns the sql string for this object .
11701	Executes this query
11702	Returns the repository for the given entity .
11703	Create a new entity .
11704	Save entity .
11705	Remove an entity from the database .
11706	Commit changes to database
11707	Get a store instance .
11708	Get the store config .
11709	Get the store instance from config .
11710	Validate the password .
11711	Creates a new instance of MediaInterface .
11712	Parses a string into an array of quality items .
11713	Compare array with needle
11714	Calculate the radius of a latitude .
11715	Convert decimal coordinate to DMS
11716	Convert degrees to decimal
11717	render production error
11718	Displays the error rendering
11719	Log the exception
11720	Generate a configuration file .
11721	Creates a new configuration file .
11722	Save messages to PHP file .
11723	Save messages to PO file .
11724	Creates a Time instance from an array .
11725	Creates a new instance from a string .
11726	Creates a new Time instance from a date .
11727	Creates instance from seconds .
11728	Invalidate tags .
11729	Flush the cache .
11730	Encode tags .
11731	Register the package config .
11732	Get all cookies .
11733	Adds a cookie to the collection .
11734	Remove a cookie .
11735	Confirm a dialog
11736	Returns the labels for the model .
11737	Get the session wrapped in the session .
11738	Gets table primary key .
11739	Gets table foreign keys .
11740	Gets table indexes .
11741	Gets table uniques metadata .
11742	Gets table checks metadata .
11743	Gets table default values .
11744	Get a parameter from the container .
11745	Returns true if the current user has access to the specified permission .
11746	Set the distinct attribute .
11747	Sets the columns .
11748	Joins a table
11749	Add an INNER JOIN clause to the query .
11750	Add a LEFT JOIN clause to the query .
11751	Adds a LEFT OUTER JOIN to the query .
11752	Adds a RIGHT JOIN clause to the query .
11753	Add an outer join to the query .
11754	Creates a full OUTER JOIN .
11755	Group by field .
11756	Simple AND HAVING condition .
11757	The HAVING condition .
11758	Order by .
11759	Sets the limit .
11760	Sets the offset
11761	Build the SQL
11762	Render a link .
11763	Renders a button .
11764	Renders the locale switcher .
11765	Convert equation to string
11766	Get the ordinate of this Point
11767	Get the abscissa by its coordinate
11768	Find record by id
11769	Find a record by a predicate .
11770	Check if a record exists .
11771	Checks if a value exists in the database .
11772	Delete rows by predicate
11773	Delete record by id
11774	Update data by predicate
11775	Insert data into table
11776	Returns the relation object .
11777	Get all primary keys
11778	Get unique primary key
11779	Get column information .
11780	Executes a prepared statement
11781	Get primary key predicate
11782	Checks if given data has specified columns .
11783	Parse the response content as an array
11784	Parse the content as an object
11785	Set return type
11786	Run the application .
11787	Enqueue styles .
11788	Type .
11789	Set the field name .
11790	Set the start position
11791	Set the damage .
11792	Set aim level
11793	Set the meter gain value
11794	Set the input inputs .
11795	Add cancel ability .
11796	Set start frames .
11797	Set active frames .
11798	Set recovery frames .
11799	Set hit advantage
11800	Set guard advantage on guard
11801	Builds the Move object .
11802	Send a message to slack .
11803	Parse route path .
11804	Parse route data .
11805	Validate datum .
11806	Finds the segment for a given parameter .
11807	Call repository generator .
11808	Validate class name .
11809	Check if file is an image
11810	Returns the number of items in the directory
11811	Get console path info
11812	Get the route and params from the command line .
11813	Returns a new instance with the specified scheme .
11814	Returns a new instance with the specified user information .
11815	Returns a new instance with the specified hostname .
11816	Returns a new instance with the specified port .
11817	Query array by key
11818	Parses a query array and returns the result .
11819	Set query variables
11820	Set a query variable
11821	Get the URL of the URL .
11822	Normalizes the url
11823	Resolves a URL to a base URL .
11824	Checks if a fragment is only used for fragments .
11825	Returns canonical URL
11826	Get the current url
11827	Get an option
11828	Build query string
11829	Parse url
11830	Displays a text
11831	Translate the message .
11832	Suggest request language .
11833	Returns list of new states .
11834	Validate state names
11835	Switches to the specified states .
11836	Find all categories by budget ID
11837	Displays the login form .
11838	Logout user .
11839	Connect to account .
11840	Get a specific build parameter
11841	set the html body
11842	add html image
11843	Adds an attachment .
11844	Read a file into a string
11845	Adds a text part to a Mail object
11846	Adds an HTML part to the email body
11847	Add HTML image part
11848	add an attachment part
11849	Encode headers .
11850	check the parameters
11851	Check if value is valid
11852	Initialize the reaction .
11853	Load all permissions .
11854	Save all changes .
11855	Save data to a file .
11856	Create a new JsonResponse instance .
11857	Set the callback .
11858	Set JSON encoding options .
11859	Get the layout .
11860	Get all categories as a string
11861	Updates a session .
11862	Delete session entity .
11863	Add options to the command .
11864	Load the configuration .
11865	Get the memory limit .
11866	Create a new model instance .
11867	render the tool
11868	Adds a plugin to the application .
11869	Get config value .
11870	Generate a URL for a named route .
11871	Add GET route
11872	Create html response
11873	Redirect to url
11874	Sets the path segments .
11875	Returns a proxy object .
11876	Get an instance of the given class .
11877	Get all results
11878	Get a list of columns .
11879	Paginate the results .
11880	Find an object by its ID .
11881	Persists an entity .
11882	Delete an entity .
11883	Gets the count of records .
11884	Create select query .
11885	Apply scopes to QueryBuilder
11886	Apply order by .
11887	Make a new no result exception .
11888	Replaces parameters in the query .
11889	Add a method to the server
11890	Get a method by name
11891	Shutdown loop .
11892	Adds multiple headers at once
11893	Set a preload link .
11894	Create a new request instance .
11895	create a new photo object
11896	Convert value to range
11897	Starts the session
11898	Regenerates the session .
11899	Writes the session .
11900	Unset all session data
11901	destroy the session
11902	Unserialize session data
11903	Sets the session cache_expire value
11904	Returns a reaction instance .
11905	Get module options
11906	Returns the size of the file .
11907	Set the walk flag
11908	Sets the array flag
11909	Set the matrix data
11910	Get the value at the specified index .
11911	Set the value at the specified index .
11912	Rewinds the stream
11913	Get the previous position
11914	go to the previous x position
11915	Move the previous y .
11916	Move the key to the previous position
11917	Get next element
11918	go to next x
11919	Move next Y .
11920	Move the pointer to the next position
11921	Seeks to a specific index .
11922	Get the current position
11923	Get the key of the chart
11924	Determine if the path is valid .
11925	Returns true if the value is a valid X .
11926	Returns true if the position is valid .
11927	Returns the number of elements in the graph .
11928	Seek to an offset
11929	Seeks to an offset
11930	Check if the offset exists
11931	Get the current offset
11932	Set an integer value
11933	Checks if the value is a boolean .
11934	Allow view methods for an object .
11935	Add allowed controller methods for an object .
11936	Sets the table name .
11937	Set the FROM table
11938	Set AND WHERE condition .
11939	Set an OR WHERE condition .
11940	Set a static rule .
11941	Set static rule reference
11942	Get a Zend_Filter_Interface object
11943	End the body .
11944	Register a js file
11945	Registers a JS variable .
11946	Get default config files
11947	Returns a singleton instance of PEAR_Config .
11948	Setup the channels .
11949	Merge a config file .
11950	Write a config file .
11951	Reads configuration data from a file .
11952	Get default channel
11953	Get channel value
11954	Sets the channels .
11955	Returns the type for the given key .
11956	Get the documentation for a specific key .
11957	Returns the prompt value .
11958	Returns the group for the given key .
11959	Get all groups
11960	Get the keys for a specific group .
11961	Returns the set values for a given key
11962	Returns a list of available channels .
11963	Remove a configuration key .
11964	Remove a layer
11965	Determine if a layer is defined by the given key .
11966	Checks if a layer is defined
11967	Set the registry
11968	Process extends clause
11969	Replace constants in the given value .
11970	Get the callback for the log .
11971	Checks if a value is a valid type .
11972	Get valid values .
11973	Get valid values .
11974	Set the value of this Enum
11975	init postinstall data
11976	Starts a new session .
11977	Add a success count
11978	Increments the current idle time .
11979	Get the estimated amount of this cart .
11980	Returns the allowed request methods .
11981	Disable WordPress auto update .
11982	Block wp - request .
11983	Hide WordPress admin actions
11984	Checks if a point is valid .
11985	Checks whether this diagram is a parallelram
11986	Get a value by composite key .
11987	Check if a composite key exists .
11988	Find application by id .
11989	Find all tests .
11990	Checks whether this numberSystem is equal to another .
11991	Get the digits of a number .
11992	Builds a number from an array .
11993	Validates a number value .
11994	Executes a command on the server .
11995	Generate a key for a key .
11996	Connect to redis server
11997	Get command string .
11998	Convert domain event message to array .
11999	Get domain event message .
12000	Reset the data
12001	Normalize messages to array
12002	Post validate callback
12003	Attach form data .
12004	Returns an array of forms .
12005	Remove a string from an array
12006	Returns an array of entities
12007	Swap an entity
12008	Remove data from form
12009	Set form data handler
12010	Remove empty fields from the entity .
12011	add a response to the list
12012	Creates a PSR - 7 Response object from a string
12013	Creates a PSR - 7 Response object from a file .
12014	Change the head version of an entity .
12015	Determine if the entity needs a new version .
12016	Save entity to database
12017	Clear all versions of an entity .
12018	Deletes a file .
12019	Check if a key exists in the mount manager
12020	Move a key to another location
12021	Reconnects the filesystem for a given key .
12022	Determine if a key is distant .
12023	Create a directory recursively
12024	Find entity by id .
12025	Create an entity .
12026	Save an entity .
12027	Delete an entity .
12028	Validate entity .
12029	Select rows from the database .
12030	Selects a new QueryBuilder instance .
12031	Sets criteria in a query .
12032	Set array criterion in query .
12033	Sets order by .
12034	Save create delete action .
12035	Set the properties for a save delete query .
12036	Sets the properties for a save delete operation .
12037	Get entity relations .
12038	Validates required properties .
12039	Send a message to the server .
12040	Execute a command .
12041	Get script src
12042	Generate a div .
12043	Render image tag .
12044	Render audio .
12045	Verify a response
12046	Verify a request
12047	Generate a script tag
12048	Create a script tag with a callback .
12049	Check key .
12050	Check if value is a string
12051	Send the verify request .
12052	Initialize the theme .
12053	Find the view file for a given view .
12054	Render a PHP stateless file .
12055	Register post types
12056	Generate a token
12057	Generates a MemoryToken .
12058	Execute the build command
12059	Message filter callback .
12060	Record notice log
12061	Log an info message
12062	Log debug message
12063	Log a raw message .
12064	Profile end point .
12065	Logs a message .
12066	Convert a message to a string .
12067	Convert an error to a string .
12068	Colorize a text .
12069	Get callee data .
12070	Process context placeholders .
12071	Formats a value .
12072	Find seo by condition .
12073	Get the table name .
12074	Delete all records .
12075	Save the current record
12076	Initialize the database connection
12077	Common command for PEAR command .
12078	Returns an array of commands
12079	Returns a list of all available commands
12080	Get the help for a given command
12081	get help args
12082	On post package event .
12083	Compile DSN
12084	escape a value
12085	Add template root .
12086	Get count of collection
12087	Get collection count
12088	Create count query .
12089	Get the entity manager .
12090	Get the path of the current route .
12091	Load an object
12092	Clears an entry .
12093	Returns a bundle entry .
12094	Set a bundle entry .
12095	Clear a bundle .
12096	Invalidate an entity
12097	Ensures that the dependencies database exists .
12098	Get the dependencies of a package
12099	Get the dependencies for a package
12100	Install a package
12101	Uninstall a package
12102	Rebuild the depdb
12103	Create a lock file
12104	Unlock a lock
12105	Reads the dependencies file and returns it .
12106	Write the dependencies to the cache .
12107	Auto load core modules
12108	Register a theme .
12109	Get content for a specific location .
12110	Render an error .
12111	Sets the foreground color .
12112	Sets the background .
12113	Sets the black color .
12114	Sets the red color .
12115	Sets green color .
12116	Sets the green color .
12117	Sets blue color .
12118	Sets the MAGenta color .
12119	Sets the green color .
12120	Sets white color .
12121	Reset the color .
12122	Sets the background color .
12123	Remove an option .
12124	Formats the given message .
12125	Logs a command .
12126	Get the leaf of uploaded files .
12127	Set the raw release state .
12128	List postinstall scripts
12129	Initialize postinstall scripts
12130	Populate package info from an associative array .
12131	Returns the list of files in the package .
12132	Returns the option for the package .
12133	Returns true if the package is compatible with this package .
12134	Is this package a subpackage?
12135	Get dependency group
12136	Slices an array element
12137	Adds the compiler to the manager .
12138	Returns the modulo of two numbers .
12139	Calculate the modulo of an entity
12140	Update an event
12141	Write a message to the target .
12142	Select from repository entity .
12143	Returns the alias for the entity .
12144	Sets the delete operation .
12145	Updates the entity .
12146	Sets the FROM clause for the query .
12147	Set a value in the container .
12148	Sets group by .
12149	Add a GROUP BY clause to the query .
12150	Order by .
12151	Add order by .
12152	Sets limit and offset
12153	Paginate the results .
12154	Fetch one result
12155	Fetches a single result
12156	Fetch all records .
12157	Generate param .
12158	Find the unused parameter name for the given column .
12159	Parses call methods
12160	Call functionality functions .
12161	Returns true if the array is associative .
12162	Creates a description based on a subject .
12163	Generate a timestamp
12164	Returns the timestamp as a table
12165	Get page load time
12166	Get the most time consuming domain
12167	Renders the header .
12168	Renders the header image .
12169	Renders the body
12170	Renders the card footer .
12171	Get controller group name .
12172	Get the option values for the action .
12173	Gets help for an action .
12174	Get help for an action
12175	Get the response headers .
12176	Determine if the user is a Flash .
12177	Returns the request body .
12178	Get request body params
12179	Returns the host information
12180	Get script url
12181	Get server params
12182	Returns an array of acceptable content types .
12183	Returns the list of supported languages .
12184	Returns an array of ETags .
12185	Get the CSRF token .
12186	Generate a CSRF token .
12187	Get the default server parameters .
12188	on login event
12189	Crop an image
12190	Make the crop name .
12191	Crop a file
12192	Get image size
12193	Get the list of mutations for a file .
12194	Parses the docblock into an array of annotations .
12195	Get the matches of the annotation .
12196	Set an annotation
12197	Sets the annotation arguments .
12198	Get annotation properties
12199	Processes annotation properties .
12200	Returns the list of arguments passed as argument .
12201	Determine the value .
12202	Get annotation from map
12203	Clean match .
12204	Returns a list of registered command events
12205	Handle command event
12206	Handles command help .
12207	Get the provider for a command .
12208	Add a left join to the query .
12209	Add a RIGHT join to the query .
12210	Add a RIGHT JOIN clause to the query .
12211	Converts the query to SQL .
12212	Fetch all values from this query
12213	Sets the table name .
12214	Sets the object structure .
12215	Sets the name of the object s database .
12216	Set object model name
12217	Build the object model
12218	Build the fields array
12219	Register validation factory .
12220	Loads the configuration .
12221	Get the target site id .
12222	Get parent relation
12223	Renders a single item .
12224	Retrieve all records from the database .
12225	Executes the query and returns the result .
12226	Executes the query and returns the column value .
12227	Returns the number of records in the database .
12228	Checks if the database exists .
12229	Make a call to the given arguments .
12230	Returns the callbacks matching the given function name .
12231	Initialize PEAR_ registry
12232	asserts the state directory
12233	Create a state directory for a channel .
12234	Assert that the channel directory exists
12235	Returns the name of a channel .
12236	Get the channel name from an alias .
12237	Get the alias for a channel .
12238	Locks the registry
12239	Check if a channel exists .
12240	Check if a mirror exists
12241	Check if the given alias is an alias .
12242	Gets information about a channel .
12243	Update a channel .
12244	Determine if the value matches the given property .
12245	Get TinyMCE file .
12246	Initializes the string with the given value .
12247	Get entity manager
12248	Resolve class name
12249	Validates that the given value has the given values .
12250	Validate route exists .
12251	Hard copy a directory
12252	Initializes the widget
12253	Get next day
12254	Get the previous day .
12255	Generate random range
12256	Write a file to the filesystem
12257	Get a directory
12258	Opens a file .
12259	Creates a file .
12260	Write the contents of a file .
12261	Get the contents of a file .
12262	Change file mode .
12263	Locks a file .
12264	Notifies when a lock is locked .
12265	Ensure the given path is a file object .
12266	Ensure a directory is a directory .
12267	Check lock timer
12268	Get global variables .
12269	Render section .
12270	Adds a ON condition to the query .
12271	Add a WHERE clause to the join .
12272	Add a where null condition to the query .
12273	Cast array to collection
12274	Tests if the type is a normal .
12275	Get session data .
12276	Update a row
12277	Run down migrations .
12278	Refresh migrations .
12279	Show migration history .
12280	Show new migrations .
12281	Creates a new migration .
12282	Revert the migration down .
12283	Run migrations to a given time .
12284	Migrate the application to the given version .
12285	Load the database adapter
12286	Connect to the database
12287	Add a cached query
12288	Get the results of a query
12289	Performs an array query
12290	Add a table to the database
12291	Add fields to table
12292	Get table info
12293	Check if a table exists
12294	build table fields array
12295	Escape a string
12296	Clears the query
12297	Set where clause
12298	Where string .
12299	Set where in
12300	Append OR WHERE
12301	Appends AND WHERE
12302	Order by .
12303	Build the query
12304	Get all results
12305	Get a single record from the database .
12306	Get all ui core extensions
12307	Returns the model instance .
12308	Set the storage path .
12309	Load structure data from a path .
12310	Returns the structure for a given model .
12311	Save model structure .
12312	Dump model data
12313	Load data from model
12314	Find all transactions for a given account .
12315	Set the connection state
12316	Returns the number of logs in the queue .
12317	Process the command queue
12318	Executes a query .
12319	Sets the connection status .
12320	Handles a message
12321	Parses the given data
12322	Connect to the server .
12323	Redirect user to socialite .
12324	Link to socialite .
12325	Unlink a social .
12326	Update profile settings .
12327	Check if the provider is valid .
12328	Set the configuration for the given provider .
12329	Register a Social .
12330	Delete timer callback
12331	Pack data into single record .
12332	Unpack a single record .
12333	Create the cleanup timer .
12334	Check if a given menu item ID exists in the menu .
12335	Set account id
12336	Set user id
12337	Get account object
12338	Get a user from the database .
12339	Generate the next exception .
12340	Remove tags from string
12341	Initialize the config object
12342	Get valid roles for a release
12343	Get the list of roles that have been installed .
12344	Shortens the string
12345	Set the blocksize
12346	Get a value from the collection .
12347	Generate config names
12348	Merge data .
12349	Read config data
12350	Read a configuration file
12351	Normalize a config file path
12352	Apply the event to the aggregate .
12353	Record a domain event .
12354	Set related data
12355	This method is called when an event is triggered .
12356	Redirects all components .
12357	Redirect to destination
12358	Initialize Twig plugins .
12359	Set multiple variables at once
12360	Fetch index from string
12361	Load the plugins from a directory .
12362	Creates a BusinessHours object from an associative array .
12363	Shift a BusinessHours object to a new timezone .
12364	Flatten a set of days .
12365	Add a warning to the stack .
12366	Get the contents of a file .
12367	Parse import settings .
12368	Parses a YAML file .
12369	Set parameters from parameters
12370	Calculate the request length
12371	Execute a command .
12372	serialize a value
12373	Unpublish other entities .
12374	Sets the class name .
12375	Sets the ID column .
12376	Sets the name column .
12377	Sets the data column .
12378	Sets the lifetime column .
12379	Sets the modified column .
12380	Sets the created column .
12381	Get all providers .
12382	Get available providers .
12383	Boot the application .
12384	Register the ContentNegotiator
12385	Set the request format
12386	Validate request content type
12387	execute a function
12388	Discovers a channel .
12389	Get a dependency2 object .
12390	Get the download directory
12391	Detect cyclic dependencies
12392	Setup the graph
12393	Get url argument
12394	Output a single line .
12395	Returns the arguments object
12396	Register the noCaptcha class .
12397	Register validation rules .
12398	Register form macros .
12399	Create from XML file
12400	Convert any type to an array
12401	Return the XML of the channel .
12402	validate an error
12403	Get the base URL for a given resource type .
12404	Remove functions of a channel
12405	Set default PEAR protocol
12406	Get a mirror
12407	Set the validate package
12408	add a function to a channel
12409	Add a mirror function
12410	Returns the validation package
12411	Returns a validation object for this channel .
12412	Determine if a property can be read .
12413	Check if a property can be set
12414	Get the cache file .
12415	Load cache parameters .
12416	Add an entry to the cache .
12417	Returns the value associated with the given ID .
12418	Returns the specified cache entry .
12419	Check if an entry exists
12420	Unset an offset
12421	Applies the site conditions to the query .
12422	Assign value to array
12423	Extracts the errors from an error .
12424	Returns the configuration file for models .
12425	Returns the model definition
12426	Saves the model definition .
12427	Get the metadata .
12428	Set field name
12429	Set field color
12430	Set the parser
12431	Aggregate a style collection .
12432	Make cURL request .
12433	Create an image proxy
12434	Create a validator .
12435	Validates a model attribute .
12436	Validate a value .
12437	Register the plugin .
12438	Shutdown function .
12439	Get the url for a controller action .
12440	Get canonical url .
12441	Normalize the route path .
12442	Checks whether tests are working .
12443	Returns the available view names .
12444	Get a value from the bag .
12445	Set a value in cache
12446	Set multiple values at once
12447	Remove an item from the collection .
12448	Add a value to the cache .
12449	Get a value from the cache .
12450	Delete a key
12451	Remove unwanted characters from a string
12452	Add default options .
12453	Get option value .
12454	Get option value from input
12455	Load config from file
12456	Load config .
12457	Render config .
12458	Render a value .
12459	Normalize config array path
12460	set the package version information
12461	Clear the contents of the package .
12462	Clears the dependencies of the package .
12463	Set the package type
12464	Returns the current release version .
12465	Add install as install .
12466	Add an ignore tag to the current release .
12467	Adds a binary package to the current release .
12468	Add a configure option
12469	Set PHP install condition
12470	Set the OS condition for the current release .
12471	Set the install condition for the current release .
12472	Generate a change log entry
12473	Is this file a video?
12474	Returns information about the video .
12475	Set the date of the field .
12476	Set the amount
12477	Set field type
12478	Set field comment
12479	Set category ID
12480	Set accountId virtual
12481	Creates a Time from a string .
12482	Create a new instance from an array .
12483	Create a new SQLite instance .
12484	Returns a MySQL connection .
12485	Run an SQL query .
12486	Get all tables in the database .
12487	Get a single row from the database .
12488	Executes a query and returns the first column .
12489	Check if a table exists
12490	Checks whether a column exists in a table
12491	Get table primary keys
12492	Get column names from a table .
12493	Log query .
12494	Add service to bootstrap
12495	Run the application .
12496	Sets the keys to be used for encryption
12497	Set private key
12498	Set the envelope key
12499	Sets the compression
12500	Returns a formatted date .
12501	Supprime une user
12502	execute function .
12503	Creates the migration history table .
12504	Add a new filter to chain
12505	Filter a value using a class name
12506	Add inverse relation to result
12507	Populate a relation .
12508	Populate a single relation .
12509	Populate relation with multiple models .
12510	Returns an array of invalid properties .
12511	Recursively process array data .
12512	Creates a new entity
12513	Checks if this text is equal to another .
12514	Checks if the string ends with the given text .
12515	Returns true if the string contains the given text .
12516	Returns a substring of this string .
12517	Replaces text with another string
12518	Replaces text by a regular expression
12519	Emit before save .
12520	Emit a delete event
12521	Refresh the record from the database .
12522	Update all rows in the table
12523	Delete all records matching the given condition
12524	Insert a model into the database .
12525	Insert a record into the database .
12526	Deletes the object from the database .
12527	Returns a list of all available methods .
12528	Returns the identifier for the method .
12529	Callback for custom data callback .
12530	Get all commands
12531	Get command help
12532	Creates a controller .
12533	Handle an exception .
12534	Handle a fatal error .
12535	Log an exception .
12536	Get the stack trace .
12537	Reduce stack trace .
12538	Proxy method with app property .
12539	Proxy method .
12540	Inject a variable in arguments array
12541	Ensure string is translated .
12542	Create a new repo
12543	Setup the notification .
12544	Generate a random string
12545	Return an array ready for serialization .
12546	Register a custom error
12547	Displays the Assignment model .
12548	Make the request for the given countries
12549	Encodes a string .
12550	Get the default reason phrase .
12551	Get a specific header
12552	Get the content body
12553	Decode deflate payload
12554	Check if the table exists
12555	Remove all records from the database .
12556	Check if the pool is ready .
12557	Get all headers .
12558	Get header name .
12559	Writes multiple messages at once .
12560	Write a message to the console .
12561	Set the type
12562	Find the path to a view .
12563	Get a list of possible files for a given file name .
12564	Starts the session .
12565	Returns the value associated with the given id .
12566	Sets the value of an id .
12567	Remove an item from the collection
12568	Generate a CSRF token .
12569	Validates CSRF token .
12570	Humanize a name .
12571	Recursively deletes the directory .
12572	Move the file to a new location
12573	Clean the filename .
12574	Dispatches an event
12575	Handles the error .
12576	Handles fatal errors .
12577	Save item .
12578	Get a string representation of the exception .
12579	Convert array to XML
12580	Parse End - Header
12581	Load a config file
12582	Set a config
12583	Get a configuration value .
12584	Build a config stack
12585	Parse a config array
12586	Parse a config value recursively
12587	Compile a join constraint .
12588	Compile a where null clause .
12589	Compile an insert statement .
12590	Compile an update statement .
12591	Compile a delete query .
12592	Wrap the given value .
12593	Specify arguments wildcard .
12594	Bind the promise .
12595	Sets the prediction .
12596	Checks whether or not the callable should be checked .
12597	Create a new Gallery object
12598	Connect to a user .
12599	Create a record
12600	convert to SQL
12601	Adds a new resource to the queue
12602	Flatten the collection
12603	Filter the collection using a predicate .
12604	Execute callback stack
12605	Execute a callback as a reference
12606	Parse callback function name
12607	Get the constraints for the image
12608	Calculate the minimum value of an option .
12609	Returns the controller object
12610	Returns the action used for the request .
12611	Resolve the request .
12612	Process the request data
12613	Processes response .
12614	Get router exception .
12615	Get terminal sizes
12616	Returns the operating system .
12617	Translate a value to a translated string
12618	Locates a file
12619	Formats the value as a plain text .
12620	Formats the value as an email address .
12621	Formats the value as a decimal number .
12622	Formats the value as a short size .
12623	Creates a new model . If creation is successful the browser will be redirected to the index page .
12624	Updates an existing Item model . If update is successful the browser will be redirected to the index page .
12625	Checks if the class exists .
12626	Fetches an object from the database
12627	Fetches the first column from a query
12628	Exclude soft deleted records .
12629	Scope a query to only include soft deletes .
12630	Run console request .
12631	Get value from array
12632	Get a specific header
12633	Return an instance without the specified header .
12634	Return an instance with the given message stream .
12635	Get icon .
12636	Returns all available types
12637	Bind alias .
12638	Render an exception .
12639	Formats a message .
12640	Get data for a header
12641	Convert an associative array to a header string .
12642	Combine section settings
12643	Walks a key to a value pair
12644	Explode a string into an array .
12645	Report an error
12646	The error page
12647	Extracts parameters from a path .
12648	Get the controller object
12649	Generate the buttons
12650	Get html options
12651	Evaluate an expression
12652	Get a zone
12653	Add a new record .
12654	Get a table instance
12655	Get the transaction object .
12656	Load default metadata .
12657	Set parent id
12658	Get budget category
12659	Get all category words .
12660	Flush all cache data
12661	Add item to collection
12662	Remove an item from the collection
12663	Remove cache datas
12664	Get a boolean value .
12665	Creates a new instance of the given parameters .
12666	Extracts parameters from a collection
12667	Logs command loaded .
12668	Add a new route group
12669	Get all class annotations by type
12670	Set service properties
12671	Get container service from annotation
12672	Get service context from service annotation .
12673	Get the cache component
12674	Returns the query builder component .
12675	Create a new component instance
12676	Get the token for a stated class name .
12677	Get the token for a stated class instance .
12678	List packages for a specific category
12679	Short description of method getBetter
12680	Compile the command .
12681	Generates command arguments
12682	Execute the command .
12683	Save the stream .
12684	Replaces all fields in the stream
12685	Add route to collection
12686	Add a route to the collection
12687	Adds a route to the collection .
12688	Add PUT route
12689	Adds a route to the collection
12690	Adds a route to the collection
12691	Adds a new route to the collection .
12692	Get named route .
12693	Generate a URL for a named route .
12694	Get route by request
12695	Returns matched route .
12696	Determine if the given URI is an internal route .
12697	Dispatches a request .
12698	Setup routes .
12699	Set dynamic route
12700	Add trailing slash if necessary .
12701	Match static route
12702	Match a dynamic route
12703	Get matched static route .
12704	Get a dynamic route .
12705	Route request middleware .
12706	Route response middleware .
12707	Get the response from dispatch .
12708	Setup routes from cache .
12709	Setup routes by annotated routes .
12710	Render modal header .
12711	Render the toggle button .
12712	Getter for GettextFile
12713	Get paginated result .
12714	Add filters by identifier
12715	Filter by search query .
12716	Add filter to query .
12717	Add ordering .
12718	Add offset to query .
12719	Add limit to query builder
12720	Find entity by id .
12721	Adds a JOIN clause to the query .
12722	Get the sort column .
12723	Order by params .
12724	Checks if the given value is a valid number .
12725	Replaces entities in a string with the specified values .
12726	Reverses HTML entities .
12727	Returns XML declaration .
12728	Get the doc type declaration .
12729	Convert attributes to string
12730	Collapse empty tags
12731	Creates a tag from an XML element .
12732	Short description of method createStartElement
12733	Split a fully qualified name into namespace and local parts
12734	Validate XML name
12735	Dispatch an object
12736	On tag response
12737	Triggered when tag is deleted .
12738	Validate entity .
12739	Interpolate context values .
12740	Returns true if two points are the same .
12741	Compare two points .
12742	Get the point between two lines .
12743	Determine if two lines are perpendances
12744	Determines if two lines are parallel
12745	Get the direction between two points
12746	Get the direction by coordinates
12747	Execute the query and return all results .
12748	Prepare the via relation .
12749	Remove duplicated models .
12750	Executes the query and returns a single result .
12751	Checks if the given value is a valid header .
12752	Assert value is valid
12753	Executes the request .
12754	Build the request URI
12755	Set the language to use
12756	Set the media type
12757	Set the result format
12758	Set the limit .
12759	Set entity .
12760	Sets the attribute of the media type .
12761	Sets the callback for the result set .
12762	Set explicit setting .
12763	Returns the list of photos .
12764	Write a message to the frontend
12765	Create a temporary temporary directory
12766	Read information from Tgz file .
12767	Extract information from a description file .
12768	Extract information from an XML string .
12769	Read information from any package file .
12770	Get the invoice with offers .
12771	Get all available offers
12772	Search for an EAN .
12773	Sets the log file handler
12774	Sets mailer handler
12775	Get all log entries
12776	Creates a log row .
12777	Shutdown debugger .
12778	Handle request handler
12779	Displays the controller
12780	Init bundle
12781	Add a boot error
12782	Add a constant path .
12783	Add application path .
12784	Get a path by name .
12785	Get absolute path
12786	Returns the user who the server is being authenticated .
12787	Set the mode
12788	Load default config file
12789	Initialize the base path .
12790	Load a reaction .
12791	Get the asset converter .
12792	Generate a unique hash for a file .
12793	Add reply to message
12794	Create a new user
12795	Resumes a user session .
12796	Calculates a number .
12797	Get user details .
12798	Execute a raw query and return all rows .
12799	Create csrf meta tags
12800	Creates a label tag .
12801	Creates a button tag .
12802	Creates a submit button
12803	Creates a submit tag .
12804	Creates a reset button
12805	Create a hidden input field .
12806	Create a password input field .
12807	Process boolean input options .
12808	Sets the number of hours .
12809	Sets the number of minutes .
12810	Sets the amount of seconds .
12811	Checks if time elements are valid .
12812	Write a file .
12813	Write a stream .
12814	Update a file .
12815	Update a stream .
12816	Put the contents of a file .
12817	Write a resource to a file .
12818	Rename a file .
12819	Copies a file to a new location .
12820	Returns the metadata for a path .
12821	Get the mimetype of a file .
12822	Returns the file size .
12823	Returns the timestamp for the given path .
12824	Returns the visibility of a path .
12825	Set the visibility of the fly .
12826	Sets the visibility of a path .
12827	Set the visibility of a path .
12828	List directory contents
12829	Get the local adapter .
12830	Get the S3 adapter .
12831	Process request url
12832	Deserialize a request .
12833	Checks if the object has access to the given object
12834	Parse a block .
12835	Get path .
12836	Get Authentication object
12837	Fetches the data from a URL .
12838	Parse response from server
12839	Get all data
12840	Get entity alias
12841	Create a new query builder instance .
12842	Creates a ResultSetMapping instance .
12843	Find all the entities in the database .
12844	Get the min value of a column .
12845	Paginate the result set .
12846	Checks if the given entity is an entity .
12847	Get the identifier of an entity .
12848	Validate entity instance
12849	Convert entity to array
12850	Filter uploaded files .
12851	Get the size of the uploaded file .
12852	Check if a key exists
12853	Handle console command .
12854	Terminate kernel .
12855	Get Account Categories
12856	Run controller .
12857	Set default timezone
12858	execute the exception
12859	Convert to array .
12860	Initializes the database .
12861	Get the children list .
12862	Detect loop .
12863	Invalidates the check access map .
12864	Get the last batch number .
12865	Create html response
12866	Returns a new Json instance
12867	Create template instance
12868	Add additional parameters .
12869	Get the Zend_Filter_Adapter
12870	Set the filter adapter
12871	Set the prefix .
12872	Get server value
12873	Shows the hello page
12874	install tables
12875	Bootstrap error action
12876	Returns the serializer instance .
12877	Increment the version of a file .
12878	Get body .
12879	Parse the body .
12880	Convert the body to an array .
12881	Executes a query and returns the results
12882	Sets default values
12883	Set the response body
12884	Convert response to array
12885	Get unique validation rule .
12886	Get an object URL from S3
12887	Get the adapter for an ADO connection
12888	Get ADO connection ID
12889	Log an error .
12890	Wraps a curl error into an exception .
12891	Handles request body .
12892	Callback called when the curl request is sent .
12893	Write a string to the response body
12894	Add a command collection .
12895	Print time .
12896	Print console help
12897	Prints HTML help .
12898	Print a single line .
12899	Upload file upload
12900	Clean html output
12901	Before save callback .
12902	After find callback .
12903	Decode attribute value .
12904	Create bank object .
12905	Sets the locale to use .
12906	Get the localized value of a question
12907	Establish a tunnel
12908	Checks if the request can be able to keep the request .
12909	Disconnect from server .
12910	Handles a redirect
12911	Determine if we should use the server digest authentication .
12912	Checks whether proxy digest authentication should be used
12913	Writes the request body .
12914	Read a chunked response
12915	Builds a select query
12916	Build a WHERE clause
12917	Build join string
12918	Build a GROUP BY clause
12919	Prepare dependency handler
12920	Merge data from array
12921	Clean a string
12922	Checks if the given call has the specified arguments .
12923	Parse YAML config file
12924	Starts a session .
12925	Execute a query
12926	Insert data into a table
12927	Update row data
12928	Insert record into database
12929	Execute a select query
12930	Get all rows from the database .
12931	Get an array of ids
12932	Get a single row from the database .
12933	Get value from a select query
12934	Prepare a query
12935	Execute a statement
12936	Fetches the result of a prepared statement .
12937	Get the execution log .
12938	Parse the value for a value .
12939	Filters a value using the specified pattern .
12940	Dispatch the request .
12941	Terminate route middleware .
12942	The start handler
12943	Handler for closing tag
12944	Run a command on the given asset .
12945	Process the webhook .
12946	Modify the uploadable behavior .
12947	Create a new instance from a JSON response .
12948	Opens a session .
12949	Read session .
12950	Destroy a session .
12951	Write the session data to the database .
12952	Creates and renders a reaction widget .
12953	Get the unique ID .
12954	Emit before run .
12955	Check app existence .
12956	Find record by field value
12957	Delete a record from the database .
12958	Get all records .
12959	Save the record .
12960	Displays the dashboard .
12961	Retrieve a list of budget items
12962	Verify account .
12963	Load bank bar
12964	check monthly month
12965	Setup the md5 hash of the installer
12966	Execute the Constructor .
12967	Get the user s name .
12968	Save the user
12969	Change the user s password .
12970	Add the given implementation to the container .
12971	Get writer
12972	Parse the version string .
12973	Compares two versions .
12974	Get child node
12975	Get the parent of this node .
12976	Get all parents .
12977	Convert object to array
12978	Apply a modifier
12979	Creates a CSS resource from a CSS URL .
12980	Return the address book view .
12981	Return the compose form view .
12982	View a message .
12983	Manage messages .
12984	Append extensions to the given paths .
12985	Destroy the session .
12986	Add autoload method
12987	Remove an autoload .
12988	Remove aggregate object
12989	Get command line option
12990	Perform a get option
12991	Parse a short option
12992	Parse command line arguments
12993	reads a directory into a struct
12994	Convert multiple files to struct
12995	Remove a directory .
12996	Creates a directory .
12997	Create a temporary file .
12998	Remove temporary files
12999	Searches for a directory
13000	Returns a log instance .
13001	Set the budget ID
13002	Get budget .
13003	Get all transaction
13004	Prepare a value
13005	Sets the URL of the request .
13006	Set request method
13007	Sets the authentication
13008	Add a cookie
13009	Set the file body
13010	Get the request body .
13011	Add an uploaded file
13012	Attach an observer .
13013	Detaches an SplObserver .
13014	Sets the last event
13015	Set request adapter
13016	Set cookie jar
13017	Sends the request to the server
13018	Detect mime type
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new Setting entity .
13022	Edits an existing Setting entity .
13023	Set where condition
13024	Return an instance with the specified HTTP status code .
13025	Remove the record from the database
13026	Determine if an event is registered .
13027	Get field value
13028	Get the formatted message .
13029	Creates a new AccessDeniedException .
13030	Add a flash message .
13031	commit savepoint
13032	format date format
13033	format time
13034	format a boolean value
13035	Sets the current timezone
13036	Get a service from the container
13037	Returns true if the given class name exists .
13038	Creates an instance of the specified class .
13039	Add a resolver
13040	Add an object to the container
13041	Get the pool
13042	Queries the given string .
13043	Executes a query asynchronously .
13044	Create a new pg connection .
13045	Get the least busy connection .
13046	Install assets .
13047	Get a class reflection
13048	Returns the version of a class .
13049	Find class name by version .
13050	Returns the migration methods for the given class .
13051	Returns the required options for a class .
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing Job entity .
13056	Set client file name
13057	Guess the file extension .
13058	Returns the MIME type of the file .
13059	Get human readable size
13060	Returns the time as a datetime .
13061	Returns the date time as a datetime .
13062	Returns the date time as a datetime .
13063	Create a file object from a file content
13064	Find all applications
13065	Find application by id
13066	Create a new application .
13067	Delete a specific application .
13068	Updates an existing application .
13069	Returns the closest date interval before the given date .
13070	Returns the closest date interval after the given date .
13071	Build a DateTimeInterval object from a given time interval .
13072	Returns the day before the given day .
13073	Returns the day after the given day number .
13074	Get information about a role .
13075	Commits the current transaction .
13076	Rollback a transaction .
13077	Sets the transaction isolation level .
13078	Get the database connection .
13079	Set the backend .
13080	Log debug message
13081	Log an info message
13082	Record notice log
13083	Record warning log
13084	Shortcut to log an error .
13085	Record critical log
13086	Log an alert .
13087	Log an emergency message
13088	Log a message .
13089	Get a property from an object .
13090	Truncate HTML .
13091	Set PEAR_Installer
13092	Remove files of a package
13093	Add a file operation to the transaction
13094	Calls PEAR_Downloader .
13095	Set the downloaded packages .
13096	Checks if a point is a valid point .
13097	Creates a new Iterating exception .
13098	Register components .
13099	Add an array of attributes .
13100	Change classes .
13101	Parse classes .
13102	Create a new JSON schema object for this database .
13103	Bind a binding if it is not already bound .
13104	Bind a shared object to a shared method .
13105	Binding callback .
13106	Determine if the binding is shared .
13107	Get the build closure .
13108	Add a dependency for a call parameter .
13109	Get a contextual concrete
13110	Request middleware .
13111	Call middleware .
13112	Terminate middleware .
13113	Main index action
13114	Generate WSDL .
13115	Initialize minify options
13116	Convert a date to a timestamp .
13117	Convert timestamp to array
13118	date conversion
13119	Get time left
13120	Returns an array of object properties .
13121	Checks that the given call has the specified arguments .
13122	Parse the given parameter value .
13123	Sets a specific parameter .
13124	Trim whitespace
13125	Log a message .
13126	Download all files from a channel
13127	Add a mock object .
13128	Creates a new object
13129	Displays the profile model .
13130	Check if a namespace exists .
13131	Get a value from the command line
13132	Make response .
13133	Render a view .
13134	Return a json response .
13135	Create a new JsonP response .
13136	Redirect to another URI .
13137	Redirect to route .
13138	Validate an email .
13139	Get the difference in years .
13140	Get the difference in weekdays .
13141	Get the difference in seconds .
13142	Get the difference for this instance .
13143	Get command annotations
13144	Set command properties
13145	Creates a ConsoleCommand from an annotation .
13146	Get storage path .
13147	Finds the model based on its primary key value .
13148	Get task parameter
13149	Make an HTTP request .
13150	Make a GET request .
13151	Make a POST request .
13152	Create a HEAD request .
13153	Create a PUT request .
13154	Create a PATCH request .
13155	Create a new DELETE request .
13156	Determine if the host is correct .
13157	Add a new timestamp .
13158	Merge data with new data
13159	Reads a configuration file .
13160	Get a package
13161	Initialize static function .
13162	Clear init code
13163	Get init code
13164	Evaluate PHP code .
13165	Initialize the template paths .
13166	Add a template path .
13167	Wraps an object into a Viewable object .
13168	Gets the list of available schema names .
13169	Returns the table names for the given schema .
13170	Refreshes table metadata .
13171	Get table metadata
13172	Load table metadata .
13173	Set table metadata
13174	Get cache key .
13175	Get an option
13176	Get temporary directory
13177	Initializes the database .
13178	Create a new role .
13179	Assign child role to role
13180	Register a prophecy .
13181	Call a mock .
13182	Get a parameter by key .
13183	Resolves a parameter value
13184	Convert query to meta
13185	Parse twitter query
13186	Render panes .
13187	Register user account .
13188	Set the vector
13189	Open the mcrypt module
13190	Initialize a new cipher
13191	Connects to the given credentials using the provided credentials .
13192	Verify user credentials .
13193	Fetches user data .
13194	Create a new AuthExtension
13195	Add data tokens to the object .
13196	Get the protocol
13197	Determine if the given credentials is an Oauth1 key .
13198	Determine if the given credentials is an Oauth2 key .
13199	Closes the stream .
13200	Attach a stream .
13201	Get the contents of the stream .
13202	Sets the stream .
13203	Writes the given data to a file .
13204	Get virtual account
13205	Get the previous account
13206	Update a virtual account .
13207	Set cache duration
13208	Sets the database connection .
13209	Fetches a single result row
13210	Creates an insert query .
13211	Executes the query .
13212	Log query .
13213	Queries a single field .
13214	Execute the query and return the results .
13215	Checks if a query matches a given regular expression
13216	Execute an SQL query
13217	Invokes a closure .
13218	Check if a given layer is supported
13219	Prepare dom elements
13220	Dispatches the request
13221	render error page
13222	render debug information
13223	render a view
13224	Initialize the bot .
13225	Add the responses .
13226	Register a short code .
13227	Remove a short code .
13228	Parses a short code .
13229	Parse shortcode attributes
13230	Get the download URL for a package .
13231	List packages for a specific category
13232	Sorts releases by version number .
13233	Get array data
13234	Get all hours
13235	parse html page
13236	Find all accounts by user id
13237	Display application message
13238	Display usage message .
13239	Get usage path .
13240	Writes arguments section .
13241	Write options section .
13242	Get option name .
13243	Generate a roll .
13244	Specify the given columns .
13245	Adds a having condition to the query .
13246	Adds a where predicate to the query .
13247	Add a join to the query
13248	Join a table .
13249	Add a RIGHT join to the query .
13250	Returns the SQL for this statement .
13251	Execute the select query
13252	Prefix table join condition .
13253	Get an item from the collection .
13254	Set a value in the collection
13255	Remove an item from the collection
13256	Creates an INSERT query .
13257	Set the error stack
13258	Create a singleton error stack
13259	Handle an error
13260	Sets the error message callback
13261	Set a default error callback
13262	Remove an error from the stack .
13263	Get the last error stack
13264	Returns the number of errors .
13265	Returns an array of all errors
13266	Returns true if the static stack has errors
13267	Returns an array of all internal error messages
13268	Get an error message
13269	Registers a configuration array .
13270	Register a provider .
13271	Registers an autowired classes .
13272	Get the autowired parameters .
13273	Sets the target
13274	Set the filter mode
13275	Get the routes .
13276	Set route properties
13277	Get class routes .
13278	Get a new controller route .
13279	Creates a router route from an annotation .
13280	Publish routes .
13281	Encode the response body .
13282	Format the response body .
13283	Get host port .
13284	Get scheme host port .
13285	Returns a new instance with the specified host .
13286	Returns a new instance with the specified port .
13287	Returns a new instance with the specified path .
13288	Returns a new instance with the specified query string .
13289	Returns a new instance with the specified fragment .
13290	Returns true if the scheme is standard .
13291	Validates the scheme .
13292	Validates a port .
13293	Validate a package
13294	Validate a single dependency
13295	Normalize a dependency
13296	Add a suffix to a word .
13297	Tokenize a string .
13298	Join keys and values of an array
13299	Check if a table exists
13300	Map class name to table name
13301	Get the table associated with a class name .
13302	Processes the version .
13303	Executes a channel command
13304	Login to another server .
13305	Logout from Mirror
13306	Apply the separator to the given value
13307	Returns an array of migration files
13308	Returns a map of migration to file names .
13309	Publish a method .
13310	Sends the request and returns the response .
13311	Check the url
13312	Transforms a URI into a Directory object .
13313	Creates app builder .
13314	Creates a new app builder instance from a persisted container .
13315	Returns the container builder dependencies .
13316	Reset the Git commit .
13317	Creates a new branch .
13318	Deletes a branch .
13319	Push a branch to the project .
13320	Create a pull request .
13321	Clone project .
13322	the callback for the command output
13323	Runs a shell command
13324	Connect to the API .
13325	Add a new file
13326	Get the name of a file
13327	Returns the file name
13328	Get a service
13329	Generate a service
13330	Set a service
13331	Set an alias .
13332	Get a single parameter
13333	Sets a parameter .
13334	Get a service definition
13335	Sets a service definition .
13336	Initialize the object .
13337	Hydrate from user event .
13338	Convert model to array
13339	Returns true if the string is serialized .
13340	Call the given callbacks .
13341	Add a new route .
13342	Initializes the routes
13343	Create a controller instance
13344	Register a controller
13345	Register controller with actions
13346	Register controller without annotations
13347	Get default controller and action
13348	Registers an observer .
13349	Unregister an observer .
13350	Auto set channel name
13351	Execute command .
13352	Adds a flash message .
13353	Redirect to referer
13354	Configures the shared cache .
13355	Initializes the bot .
13356	Finalize middleware .
13357	Get the configuration directory .
13358	Throws an exception if the given arguments are not valid .
13359	Returns the connection object
13360	Configure TinyMCE bundle .
13361	Set the user capabilities .
13362	Create a new instance from an environment .
13363	Create a new Locator instance from a path .
13364	Returns an array of constant values .
13365	Check if a constant is valid .
13366	Perform data check .
13367	Checks if a value is a valid type .
13368	Get adapter for PDO
13369	Create controller path
13370	Create cache path
13371	Update wsdl
13372	Compiles the service URL
13373	Returns the documentation for the controller
13374	Get all available SOAP controllers
13375	Builds the assets .
13376	Builds Bootstrap CSS .
13377	Get a single parameter
13378	Rebase the url .
13379	Adds a route to the collection .
13380	Get the static route for the given method and path .
13381	Checks if a static route exists .
13382	Get a dynamic route .
13383	Check if a dynamic route exists .
13384	Get named route .
13385	Creates sub - buttons
13386	Locate a file
13387	Converts this number to another one .
13388	Checks if two numbers are equal .
13389	Get decimal value
13390	Adds two numbers
13391	Subtracts the given number .
13392	Multiplies this number by the given multiplicator .
13393	Divides this number by a given multiplicator
13394	Get an adapter for the mysql
13395	Returns all aliases .
13396	Find aliases in a query
13397	Replaces migration files .
13398	Read a line from the socket
13399	Enables encryption on the proxy
13400	Check socket timeout
13401	Add a route .
13402	Set new items .
13403	Builds HTML tag .
13404	Prepare name attribute .
13405	Check data attribute .
13406	Add a resource to the collection
13407	Creates a Day object from an array of dates .
13408	Creates a day from an associative array .
13409	Checks if the given interval is all of days .
13410	Creates a new request object from an array .
13411	Set server info
13412	Sets the request headers
13413	Sets POST fields .
13414	Set query fields
13415	Get a header array
13416	Convert request to array
13417	Add a command .
13418	Adds a parsed command .
13419	Get a command by its name .
13420	Remove a command .
13421	Find a command by path .
13422	Returns all registered commands .
13423	Setup the application .
13424	Setup commands from cache .
13425	Returns an array of all available commands .
13426	Sets the separator
13427	Register an event listener .
13428	Listen to many events
13429	Check if an event has a specific listener .
13430	Remove event listener .
13431	Determine if a given event is registered .
13432	Add event .
13433	Remove event .
13434	Trigger all listeners for an event .
13435	Setup events .
13436	Setup events from cache .
13437	Initialize the template
13438	Check if a template exists
13439	Fetches the template
13440	Load data .
13441	Saves the data to the database .
13442	Initialize the reader .
13443	Initialize the writer .
13444	Get default options .
13445	Encrypt data .
13446	Decrypt data .
13447	Generate a session key
13448	Throws an exception to stdout .
13449	Render an exception .
13450	Get the view file for an exception .
13451	Get the response .
13452	Get exception data .
13453	Get stdio logger
13454	Read session data .
13455	Writes the given session data to the cache .
13456	Destroys a session .
13457	Update a timestamp .
13458	Extract data from session .
13459	Extract the timestamp from a record .
13460	Get session data from cache .
13461	Gets the exception message with variables
13462	Generate SQL statement .
13463	Generate auto increment statement .
13464	Returns the SQL to add a key .
13465	Generate foreign .
13466	Get column declaration
13467	This is called when the plugin starts
13468	Creates a new iteration exception .
13469	Render the toggle button .
13470	Get response template
13471	Get the module name
13472	Loads a class reflection .
13473	Loads a reflection for an object .
13474	Loads a property reflection .
13475	Get called method .
13476	Get class properties
13477	Sets the value of a property .
13478	Sets a set of properties on an object .
13479	Loads class annotations .
13480	Clears all registered classes .
13481	Checks if a class is instantiable .
13482	Gets a reflection for a method .
13483	Returns a class reflection .
13484	Checks if the given method is valid .
13485	Get a reflection from the cache .
13486	Add reflection to cache
13487	Get the cache key for a given type .
13488	Get object class name .
13489	Parses the doc comment .
13490	Get class doc comment
13491	Get the doc of a method .
13492	Initialize object by config
13493	Get the namespace for the given foundation class .
13494	Remove lines from a string
13495	Post - process data .
13496	Extract a photo from a source .
13497	Fetches the sizes for a photo .
13498	Extract images from the source .
13499	Find the position of the placeholder in the path .
13500	Build route path
13501	Search route in router
13502	Replaces placeholders in a path .
13503	Initialize the source .
13504	Preload messages for a category .
13505	Find all categories matching the given pattern .
13506	Magic isset .
13507	Sends an exception .
13508	Get the content of the exception .
13509	Formats a file path .
13510	Format an array of arguments .
13511	Escapes a string .
13512	Create new validator instance .
13513	Transform a string into an array of Input objects .
13514	Handle disconnect event
13515	Called when a connection is received .
13516	The callback for the phone home .
13517	This method is called when the connection has been closed .
13518	Get the command handler
13519	Show application config
13520	Loads the bundles . yml file
13521	Load all messages from the files .
13522	Sets the HTTP headers .
13523	Sets the value of the global CGI environment variables .
13524	Perform a POST request
13525	Make JSON RPC call
13526	Connect to the database
13527	Escapes a string .
13528	Initialize the class .
13529	Check if field has a slug field
13530	Get the special fields for a field .
13531	Get fields by type
13532	Convert a timestamp to a date .
13533	Tries to negotiate the supported language
13534	Returns the supported charset .
13535	Try to determine the best MIME type based on the Accept header
13536	Match accept header
13537	Sort accept headers
13538	head request
13539	Convert a string from one encoding to another .
13540	Get entity manager
13541	Get the database structure .
13542	Get auto object from database
13543	Get table structure
13544	Returns the model for the specified table .
13545	Build the object structure
13546	Prepare error string
13547	Checks the given budget .
13548	Check a budget .
13549	Find by budget ID .
13550	Set ID parent
13551	Set field to main
13552	Get account user .
13553	Get the bank object .
13554	Parse CSV file
13555	Get the icon for the type .
13556	Build a query
13557	Escape one value
13558	Create a new redirect response .
13559	Set the path to secure .
13560	Redirect back to referer
13561	Throws an HttpRedirectException .
13562	Filters a list of commands .
13563	Sorts the given commands .
13564	Process command section .
13565	Init session .
13566	Start timer .
13567	Get timer by name
13568	Display a timer .
13569	Initialize provided provider .
13570	Initializes the static application .
13571	Initialize basic configuration
13572	Locate configs path
13573	Locate the class loader .
13574	Create and return an object
13575	Get config reader
13576	Init container .
13577	Initialize Static App
13578	Determine if the token matches the given request .
13579	Get the CSRF token from the request .
13580	Initialize the bot .
13581	Get the current weather for a specific location .
13582	Get the precipitation for a location .
13583	Get the latitude for a location .
13584	Add error message
13585	Get English intensity .
13586	Get class annotations
13587	Get all annotations for a class member .
13588	Get all annotations for a class .
13589	Get all annotations for a given property .
13590	Get the property annotations for a given property .
13591	Returns an array of all annotations for the given class .
13592	Retrieve method annotations .
13593	Get the method annotations for a specific type .
13594	Returns an array of all the methods annotations for the given class .
13595	Get function annotations .
13596	Filter annotations by type
13597	Set annotation values
13598	Get a class reflection .
13599	Get a property reflection instance .
13600	Returns a ReflectionClass instance .
13601	Get a function reflection .
13602	Get the list of dependencies for the given parameters .
13603	Get the length of this Point
13604	Get the center point
13605	Runs the widget .
13606	Return a field instance .
13607	Determine if a key exists .
13608	Get the display dirname .
13609	Scan the directory
13610	add a header
13611	Returns a list of all headers
13612	Creates a database .
13613	Returns a list of installed database tables
13614	Update database from database
13615	Update database relations
13616	Update table structure .
13617	Generate the SQL to create a table .
13618	Generate the SQL for a column .
13619	Generate index SQL
13620	Generate constraint SQL
13621	Get keyvalues by key type
13622	Get key values by key type .
13623	Returns an array of annotations for the given class .
13624	Get the exact annotation of a class .
13625	Returns the list of annotations for a property .
13626	Get the exact annotation of a property .
13627	Returns the annotations for a method .
13628	Get the exact annotation for a method .
13629	Returns the annotation reader
13630	Get a method reflection
13631	Get item from cache
13632	Set value to cache
13633	Returns the paths for a given key .
13634	Process key .
13635	Check the event class name .
13636	Build the last event .
13637	Get the average value of an array .
13638	Sets order by field .
13639	Read the reflection parameters .
13640	Get a value from an object .
13641	Sets the value of the object .
13642	Filter an array of objects by an expression .
13643	Set from address
13644	Adds an address to PHPMailer
13645	Add reply to address
13646	Adds CC address .
13647	Add a BCC address .
13648	Add an attachment .
13649	Run the application .
13650	Set the referrer
13651	Get the referer value
13652	Build url from parameters
13653	Download the package
13654	Extract the extracted package
13655	Reset default locale translations .
13656	UTF - 8 aware alternative to strpos
13657	Create sidebar menu .
13658	Add example menu .
13659	Register the migration repository .
13660	Publish pages .
13661	Update the current record
13662	Load messages for a specific context .
13663	Returns all categories sorted by priority .
13664	Get the file name from the response .
13665	Validate uploaded files .
13666	Init result object
13667	Get the pattern data .
13668	Set attribute setter
13669	Detect data by key
13670	Determine if the command is on a shell .
13671	Get the config object
13672	Get the latitude of the date .
13673	Return the longitude of the date .
13674	Calculate the latitude range for the given latitude .
13675	Calculate a range between the longitude and latitude .
13676	Returns the distance for the given location .
13677	Determine if the given data matches the filters .
13678	Create tables from config
13679	Bundle multiple schemas .
13680	Get a specific point
13681	Publish command to console .
13682	Get a matching URL fragment
13683	Generate response for request
13684	Retrieve data from cache .
13685	Determine if a string ends with a given string .
13686	Counts the number of words in a string .
13687	Create the acting as a user .
13688	Init session .
13689	Opens session .
13690	Open session .
13691	Register the session handler .
13692	Closes the session .
13693	Destroy the session .
13694	Regenerates the session ID .
13695	Read a session .
13696	Writes a session to the server .
13697	Destroys a session .
13698	Set a value to a key
13699	Remove a key
13700	Remove all session data
13701	Get a flash value .
13702	Get all flash messages .
13703	Set a flash message .
13704	Add a flash message .
13705	Remove a flash value
13706	Remove all flash messages .
13707	Freezes the session .
13708	Unfree the session .
13709	Create the session cookie
13710	Validate the date is after a date .
13711	Validate the date time after the given format .
13712	Validate date format .
13713	Checks all predictions for this aggregate .
13714	Assign a value to an array .
13715	Get the controller plugin config .
13716	Execute rule .
13717	Process multiple depencies
13718	Parse fragment data
13719	Create a new View instance .
13720	Sets view variables .
13721	Set a view variable .
13722	Escape a value
13723	Get template directory
13724	Set the layout .
13725	Sets view template .
13726	Render partial .
13727	End block .
13728	Renders the view .
13729	Get full path to view
13730	Render template .
13731	Render the layout .
13732	Adds a route to the collection .
13733	Returns the separator line .
13734	Write header message
13735	Get the list of all the notifications
13736	Create a notification object .
13737	Sets the key .
13738	Determine if the file should be renamed .
13739	Guesses the file extension .
13740	Guesses the filename of the file .
13741	Set the rename .
13742	Download file .
13743	Upload TinyMCE image .
13744	Redirects to Redirects .
13745	Get cURL resource
13746	Execute the curl request
13747	Set cookie file
13748	Choose multiple parameters
13749	Lists all Items models .
13750	Init options .
13751	Writes the configuration to a file
13752	Get the exception from the context .
13753	Convert an exception to an array .
13754	Render a file
13755	Check if file is a core file
13756	Get an exception name .
13757	Minify CSS output
13758	Generate minify URLs
13759	Set the amount default
13760	Set date start
13761	Set date end date
13762	Set field is recurrent
13763	Set the month bitmask
13764	Get all budget categories
13765	Get all budget month month
13766	Execute a query .
13767	Returns the PDO exception for a query .
13768	Load an autoloader .
13769	Starts up the database .
13770	Shut down the database .
13771	Insert data into a table .
13772	Insert rows into a table .
13773	Updates rows in a table .
13774	Deletes rows from a table .
13775	Renames a table .
13776	Drops a table .
13777	Truncates a table .
13778	Drops a column from a table .
13779	Renames a column .
13780	Alter a column .
13781	Adds a primary key to a table .
13782	Drops a primary key .
13783	Adds a foreign key to a table .
13784	Drops a foreign key .
13785	Creates an index on a table .
13786	Drops an index .
13787	Adds a comment to a column .
13788	Adds a comment to a table .
13789	Drops comment from a column .
13790	Drops comments from a table .
13791	Executes a deferred command .
13792	Logs a message .
13793	Validate regex .
13794	Capture the occurences of the text
13795	Splits text into array
13796	Replaces text with another text .
13797	Renders the config .
13798	Get the url to the seurimage .
13799	Get a dummy model .
13800	Get or create a model instance .
13801	Get all records as list
13802	Save a model .
13803	Delete a model .
13804	Get records by ids .
13805	Get records by ids .
13806	Sets a raw cookie
13807	Connects to the server .
13808	Save to database .
13809	Set the record s data
13810	Get record as array
13811	Get field value
13812	Set field value
13813	Get primary key predicate
13814	Parse a path .
13815	Validate path .
13816	Splits an array of segments by a delimiter .
13817	Parse path .
13818	Get parameter replacement
13819	Cache a value in the cache
13820	Flushes the cache .
13821	Process response data
13822	Invoke method .
13823	Get the content type
13824	Regenerate the session id .
13825	Create a session ID .
13826	Creates the GC timer .
13827	Sets the content type .
13828	Sets the buttons .
13829	Add a button .
13830	Validates modal type .
13831	Validates the modal size .
13832	Register commands .
13833	Create a Tar Archive
13834	Add a string to a file
13835	Determine if the given file is a malicious filename .
13836	Parse command message
13837	Run migrations from another object .
13838	Get the unique keys for a table .
13839	Get the primary key of a table .
13840	Get the primary keys of a table .
13841	Get the highest priority .
13842	Get the validator .
13843	Load mime types
13844	Load mime aliases .
13845	Removes a symbolic link
13846	Returns the permissions as a string .
13847	Gets the permissions as octal string .
13848	Create an INNER join .
13849	Generate select statement
13850	Performs a SELECT query
13851	Create a table
13852	Load all modules .
13853	Get the container .
13854	Initialize the bot .
13855	Sets the SELECT statement type .
13856	Sets the table name .
13857	Set the value of a column .
13858	Adds a where clause to the query .
13859	Adds a where clause to the query .
13860	Order by ASC
13861	Order by desc .
13862	Returns the query string .
13863	Set where .
13864	Sets the order by .
13865	Get select query
13866	Returns the insert query .
13867	Get update query
13868	Get delete query
13869	Get SET query
13870	Get where query .
13871	Returns the order by clause .
13872	Dispatches the given XPath expression to the query builder .
13873	Register a new record .
13874	Edit User .
13875	Returns the version information
13876	Create route object
13877	Handles the request .
13878	resolve action
13879	Get home url
13880	Registers a component .
13881	restore uid
13882	Get user by id
13883	Returns list of active users
13884	Writes multiple messages to a file .
13885	Find the first occurrence of a value in a list .
13886	Find records matching the given conditions .
13887	Fetches the next row from the result set .
13888	Read a single column
13889	Read an object
13890	Fetches all records from the result set .
13891	Get column count
13892	Find the constraints for a table .
13893	Get server version .
13894	Publishes the routes .
13895	Parse routes data
13896	Builds the expressions for the path .
13897	Register an alias .
13898	Bind service .
13899	Bind service context
13900	Get service instance from context
13901	Check if service is registered
13902	Check if service has context
13903	Get a service
13904	Make a service
13905	Get singleton instance
13906	Get a service
13907	Create a context service index
13908	Setup services .
13909	Setup services from cache .
13910	Register service providers .
13911	Get the cacheable data .
13912	Get address lines .
13913	Set the log level
13914	Get unique ID .
13915	Register route in router .
13916	resolve action
13917	Emit before an action .
13918	Emits after action .
13919	Render partial view .
13920	Renders ajax view .
13921	Returns an array of action IDs for the controller .
13922	Render view in layout .
13923	Renders the given view .
13924	Normalize action method name .
13925	Resolve an error as a plain text .
13926	Resolve the error as an array .
13927	Get error data .
13928	Get the name of an exception .
13929	Validate action
13930	Get action id from action method name .
13931	Get action method name
13932	Convert color to hex
13933	Convert RGB to RGB
13934	Convert an image
13935	Wrapper for STDIN .
13936	Creates a prompt for the given prompt .
13937	Append file to an array of paths .
13938	Get the pg client
13939	Executes an SQL query .
13940	Write the given stream to the specified stream .
13941	Creates a server request from globals .
13942	Get the value of a header .
13943	Remove query string from path .
13944	Parse the host and port from the result .
13945	Normalize nested file spec .
13946	Determine if a string ends with a given string .
13947	Returns a random string
13948	Create migrations for a class .
13949	Find all annotations for a given class .
13950	Create a new record .
13951	Fetch all records
13952	Updates a session .
13953	Sets the HTTP status code .
13954	Sets the response headers .
13955	Get the date header .
13956	Set the date header
13957	Add a cache control header .
13958	Get a cache control value
13959	Remove a cache control .
13960	Determine if the response is valid .
13961	Returns the age in seconds .
13962	Set the age of the response .
13963	Returns the Expires Date .
13964	Returns the maximum age of the response .
13965	Set shared max age
13966	Set the shared time in seconds .
13967	Sets the status of the response .
13968	Is the token invalid?
13969	Checks if the response is in an Informational .
13970	Check if the response is successful .
13971	Check if the response is a redirection .
13972	Checks if the response is a client error .
13973	Check if the response is a redirect .
13974	Is this content empty?
13975	Closes output buffers .
13976	Initializes the request .
13977	Validate request method .
13978	Locate a command .
13979	Locate all the occurrences of a command .
13980	Download package file
13981	Remove installed packages
13982	Detect duplicate parameters
13983	Read a package from a file
13984	Returns the parameters as an associative array .
13985	Enables the error handler .
13986	Get the difference between this transaction .
13987	Add the month to the bitmask .
13988	Returns true if the month has the given month .
13989	Get the length of the uploaded file .
13990	Returns the boundary
13991	Loads a user by username .
13992	Create user .
13993	Sets the client s IP address .
13994	Renders a view .
13995	Publish domain events .
13996	Materialize resources .
13997	Add one or more parameters to the query .
13998	Fetches the message
13999	Encrypt a message
14000	Decrypt a message
14001	Decrypt a string .
14002	Encrypt an object
14003	Decrypt an object
14004	Overrides parent method to get a tag_cache option
14005	Initialize the object .
14006	Replace magic fields
14007	Convert Query to QueryBuilder
14008	Convert rich text to plain text .
14009	Convert rich text to HTML
14010	Serializes the given block as an HTML block .
14011	Returns a new instance with the specified cookie .
14012	Send the response .
14013	Validates the given status code .
