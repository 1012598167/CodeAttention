0	Get Administrator role
1	Get admin user .
2	Handle delete event .
3	Setup categories translations
4	Get the highest order item
5	Create a unique name for the given columns .
6	Handle a bread added event .
7	Updates a table .
8	Updates the table
9	Get the diff of the renamed columns
10	Gets a new diff for this table .
11	Gets the names of renamed columns .
12	Gets the list of renamed indexes
13	Get thumbnail .
14	Get thumbnail .
15	Determine if the user can edit roles .
16	Get the dimmer
17	Prepare menu translations
18	Save the attributes .
19	Determine if the given user can read the given author .
20	Show bread table .
21	Store a new Bread
22	Show the form for editing a record .
23	Update the bread data type .
24	Remove a Bread Item .
25	Add new relationship
26	Get the relationship field .
27	Get the field value
28	Create new database table
29	Show the edit table .
30	Update the database table .
31	Show data type .
32	Destroy table .
33	Returns the URL for the sort by .
34	Display menu .
35	Is translatable?
36	Many translations .
37	Get translated attribute value
38	Query scope to restrict a translation by a given field name .
39	Save translations .
40	Describe a table .
41	Handle the add permission .
42	Add a new storage alert alert to the dashboard .
43	Register the console commands
44	Deletes all data related to the data type .
45	Delete all thumbnails
46	Order records .
47	List related records
48	Resolve collection of relations
49	Add soft deletes to the given stub .
50	Validation breadcrumbs
51	Filter fields with validation rules .
52	Verify a JWT token
53	Retrieves the verification certificates from a URL .
54	Retrieves the keys from Feder certificates .
55	Set PHP constants
56	Fetch an access token from OAuth2
57	Fetches the access token with the signed JWT credentials .
58	Fetch an access token with a refresh token
59	Authorize the application .
60	Is the access token expired?
61	Verify an id token
62	Adds a scope
63	Execute the request
64	set auth config
65	Create OAuth2 service
66	Retrieve the number of retries for a given code .
67	Updates the next chunk .
68	Parse the HTTP response .
69	Get data type
70	Combine a list of values
71	Protected get value
72	Execute the request and return the response .
73	Decode HTTP response
74	Map data types to objects
75	Returns the object as a simple object .
76	Convert a value to a simple object
77	Get mapped name
78	Determine if the given array is an associative array .
79	Builds a new AuthHandler
80	Finds the configured config
81	Define core constants
82	Set the emulate state
83	This method is called when an exception is thrown
84	Get all queries .
85	Register global globals
86	Get all options
87	Add an option
88	Delete an option
89	Add placeholder .
90	Set default namespace
91	Set default controller name
92	Set default method
93	Discover routes .
94	Set default placeholder .
95	Get all routes
96	Get route options
97	Add multiple routes
98	Add a redirect
99	Check if route is redirect
100	Get the redirect code for a given route
101	Add a route to the route collection
102	Add OPTIONS route
103	Add a callback to the route .
104	Reverse route
105	Determine the current subdomain
106	Reset all routes
107	PHP Error Handler
108	PHP shutdown handler
109	Determine the view .
110	Render the error page .
111	Collects variables for the exception .
112	Determine the error codes .
113	Converts a number of bytes to a human readable format .
114	Highlight a file .
115	Checks if a value is an alpha space
116	Check if string matches given pattern
117	Valid email address .
118	Validate email addresses
119	Check if string is valid URL
120	Check if string is valid
121	Thrown when a request failed .
122	Valid credit card number
123	Checks if a Luhn number is valid
124	Move a file .
125	Move all class names to exceptions
126	Move Kint .
127	Initializes the session .
128	Configure Session Length
129	Initialize session variables
130	Set session data
131	Get session data
132	Push an array to a key
133	Removes a key from the session
134	Set flashdata
135	Get flashdata
136	mark data as flashdata
137	Get Flash Keys
138	Set a temporary data
139	Get temporary data
140	Marks data as temporary
141	Remove temporary data
142	Get temporary keys
143	Set the session cookie
144	Checks if a rate limit is available .
145	Guesses MIME type from extension .
146	Guesses the extension based on the type .
147	Redirects to another uri
148	Redirect to a route
149	Redirect the user back
150	Set flashdata
151	Runs the filters .
152	Initialize the instance .
153	Enable a filter .
154	Get arguments .
155	Format an object .
156	Send the log to the client
157	Detects the locale based on the configuration
158	Set the current locale
159	Is secure
160	Get the body as JSON .
161	fetch all objects
162	Get post data
163	Get POST data
164	Get POST data
165	Get cookie data
166	Get uploaded files
167	Gets a single file
168	Detect the URI
169	Detect server path
170	Negotiate HTTP request negotiation
171	Parse the request URI
172	Builds the DSN
173	Get formatter for given mime type .
174	Before event callback
175	Triggers the after event .
176	Resize the current image
177	Crop the current image
178	Returns the version of the image
179	Get the path to the file
180	Add a foreign key .
181	Drop foreign key constraint
182	Parse unsigned attribute
183	Protected set default value
184	Process primary keys
185	Process foreign keys
186	Set the locale
187	Get a single line
188	Format message according to current locale
189	Require file .
190	Add a base URI option to the report .
191	Add an image src option
192	Add a media source option .
193	Adds a manifest src option
194	Adds an object src option
195	Adds a plugin type option .
196	Add sandbox options .
197	Add script src option
198	Adds style src option
199	Adds an option .
200	Generates nonce tags
201	Build Content Security Policy Headers
202	Get the title
203	Collects logs from services .
204	Prepares an array of parameters
205	Determine the cell class and method .
206	Get result .
207	Get custom result object
208	Get result array
209	Get result object
210	Get a single row
211	Get custom row object
212	Get a single row
213	Get Row Object
214	Set row data
215	Get first row
216	Get last result
217	Returns the next row
218	Returns an unbuffered row
219	Checks if the header matches the acceptable parameters .
220	Check if the parameters match the acceptable parameters .
221	Run CLI command .
222	Show header information
223	Renders the links for a group .
224	Generates links for pagination
225	Stores data for a group .
226	Set the URI path .
227	Returns the number of pages in the group .
228	Returns the current page number .
229	Returns whether the group has more than the given group .
230	Returns the last page number .
231	Returns the URI for a page .
232	Returns the URI for the next page .
233	Returns the previous page URI .
234	Returns the number of items per group .
235	Returns pagination details .
236	Ensure that a group is set .
237	Get the years
238	Returns the number of months
239	Get the number of weeks
240	Returns the number of days in the current year
241	Returns the hours of the current date
242	Get current minutes
243	Returns the difference in seconds
244	Humanize the current time
245	Load a database connection
246	Load forge class
247	Check if a property has changed .
248	Map a datamap property .
249	Mutate the given value .
250	Cast value as JSON
251	Determine if the given alias should be discovered .
252	Finds all records
253	Get first row
254	Save data to database
255	Convert class to array
256	Inserts a record .
257	Insert multiple rows
258	Get builder instance .
259	Protect fields from array
260	Clean validation rules .
261	Get validation rules .
262	Count the results .
263	Set authentication .
264	Set the form params
265	Parse request options
266	Get request method
267	Send a request
268	Applies request headers .
269	Set response headers
270	Send the request .
271	Sets the current version to the specified target version .
272	Find migrations
273	Check migrations .
274	Returns the current version history .
275	Get migration name .
276	Returns the current version .
277	Add migration history .
278	Remove migration history .
279	Ensure the table exists
280	Validate a single value .
281	Set the data from the request .
282	Set a single validation rule .
283	Get rule group
284	Set rule group
285	Loads the rule sets .
286	Set validation error .
287	Get error message
288	Splits rules into array .
289	Reset all data
290	Convert an array to XML
291	Clean file names
292	Set the URI
293	Get user info
294	Get query string
295	Gets the URI segment
296	Set a URI segment
297	Create a URI string
298	Set the authority part of the URL .
299	Set the scheme
300	Set the port .
301	Set path .
302	Refresh the path
303	Set the query string
304	Decodes the given value .
305	Add a query parameter .
306	Keep only the query parameters
307	Filters a path .
308	Applies parts to the URL .
309	Creates a new URI based on the URI
310	Merges two URIs .
311	Remove dot segments
312	Append a value to the list
313	Prepend a value to the list
314	Get the previous URI
315	Get the next page
316	Get the first page
317	Get the last URI
318	Returns the current URI
319	Starts a timer .
320	Stops a timer .
321	Returns the elapsed time of a timer .
322	Get all timers
323	Add a table alias
324	Executes a query
325	Performs a simple query
326	Creates a new database table .
327	Prepares a query
328	Escape identifiers .
329	Call database function
330	List tables in the database
331	Check if a table exists
332	Checks if a field exists in a table .
333	Get all fields of a table
334	Get index data
335	Get the foreign key data for a table .
336	Get an environment variable
337	Register properties and their values
338	Get an item from the cache .
339	Writes data to a file .
340	Returns an array of file information
341	Get file info
342	Initializes the application
343	Runs the router .
344	Handles the request .
345	Start the benchmark
346	Get response object
347	Force SSL access .
348	Displays the page cache
349	Cache page .
350	Generate cache name
351	Display the benchmark metrics in the output .
352	Try to route the given routes .
353	Start the controller .
354	Creates a new controller instance .
355	Run controller action .
356	Gathers the output .
357	Stores the previous URL
358	Preview request method
359	Gets a cache handler .
360	Create an alias from a table .
361	Add a where not in condition .
362	Create where in statement
363	Generate a like statement
364	Begins the where part of the query .
365	End where group
366	Set the offset
367	Set a new object
368	Compiles the select query .
369	Compiles the final query .
370	Get number of rows
371	Counts the number of results
372	Builds an insert query
373	Returns the final insert query
374	Returns the final update query
375	Compiles a delete query
376	Decrement column value
377	Compile select statement
378	Compile a where having clause .
379	Compile GROUP BY part
380	Compiles ORDER BY part .
381	Get a list of operators
382	Renders a timeline .
383	Collect timeline data .
384	Collects all data from the collectors .
385	Rounds the given number to the given number .
386	Copy current image
387	Get image properties
388	Releases the lock
389	Attach the honeypot to the response .
390	Prepares the template .
391	Fetch an object from the result set
392	Converts an array of strings to an array .
393	Clears the table .
394	Set from DB result
395	Set data from array
396	Set path .
397	Get error string
398	Save uploaded file .
399	Checks if the uploaded file is larger than the specified params .
400	Check if file is an image
401	Check if MIME type is in array
402	Validate max dims
403	Fetches all values for a method
404	Populate globals .
405	Run version .
406	Set the data from a table .
407	Creates the temp table
408	Modify a column
409	Creates the table
410	Copy data from temp table
411	Format fields .
412	Format keys .
413	Drop indexes .
414	Sets the CSRF cookie
415	Returns the CSRF hash
416	Creates instance with current time
417	Creates a Time object from a string
418	Creates instance for today
419	Returns instance for yesterday
420	Returns a Date instance for tomorrow .
421	Create instance from date .
422	Create a Carbon instance
423	Creates a time instance .
424	Create a new Date instance from a specific format .
425	Creates instance from a timestamp
426	Creates instance from DateTime
427	Convert DateTime to DateTime
428	Returns the age of the user .
429	Returns whether this date is daylight saving
430	Set the month .
431	Set the day of this date .
432	Set the minute value .
433	Set the seconds .
434	Set a date value .
435	Sets the timestamp
436	Checks if two DateTime are equal .
437	Tells whether two DateTime are equal
438	Converts a DateTime object to a DateTime object .
439	Convert JS character to JavaScript
440	Callback handler for css
441	Convert string to UTF - 8
442	Convert string from UTF - 8 to UTF - 8
443	Returns a file by its name .
444	Create an uploaded file object from an array
445	Get the syntax for a dot notation value .
446	Set the binary .
447	Sets the file path .
448	Returns the content length of the file .
449	Set Content - Type based on MIME type
450	Get download filename
451	Get content disposition
452	Build response headers
453	Send the download body
454	Send body by file path
455	Remaps multiple params at once
456	Run a command
457	Create a list of commands
458	Get a connection instance .
459	Create a new seeder instance .
460	Determine if the command is all .
461	Add a test .
462	Runs a set of tests .
463	Get the report .
464	Set query .
465	Returns the query string
466	Get start time
467	Get duration .
468	Set the error code
469	Swaps the prefix of the query
470	Compile the bindings
471	Load the helpers .
472	Register the class loader .
473	Add a namespace
474	Get a namespace
475	Require a file .
476	Sanitize filename .
477	Discover composer prefixes .
478	Modify date time
479	Creates an excerpt
480	Sanitize the value .
481	Resolve nested variables
482	Set database name
483	Execute a SQL query
484	Prepare query .
485	Get the error message .
486	Execute SQL query
487	Get field names for a table
488	Return cache handler
489	Get CLI request instance
490	Returns a cURL request instance .
491	Returns a new honeypot instance
492	Get language instance
493	Returns a new logger instance .
494	Returns a negotiator instance .
495	Returns an instance of Parser
496	Returns a new IncomingRequest instance .
497	Return a new Response instance
498	Returns a RedirectResponse instance
499	Return router instance
500	Returns a singleton instance of Security .
501	Getter for uri
502	Returns a new Validation instance
503	Describe a list of commands .
504	Pad the title .
505	Get CSV from a ResultInterface instance .
506	Get XML from a ResultInterface
507	Call a command
508	Run a seeder .
509	Check if a value is in an array .
510	Checks if a string is less than or equal to another string .
511	Determine if a field is required
512	Determine if any of the specified fields are present .
513	Validate request path
514	Set the directory .
515	Set the request name and method
516	Set default controller
517	Get file size
518	Moves the file .
519	Get the destination path
520	Collects a query
521	Format timeline data .
522	Locate a file .
523	Extract the class name from a file .
524	Searches for namespaces .
525	Ensure that the given path has the extension .
526	Find the fully qualified class name from a path .
527	Returns the path to the legacy file
528	Renders a string .
529	Get excerpt from string
530	Set the data
531	Set a variable .
532	Renders a section .
533	Include view .
534	Logs profiling data .
535	Reset the image .
536	Ensures that the image resource is created .
537	Resize the image .
538	Rotates an image .
539	Flips the image .
540	Sets text .
541	Reorient the current position
542	Get Exif data
543	Resize the image
544	Run the CodeIgniter server .
545	Renders a string .
546	Parse a variable
547	Extracts nonoparse blocks from a template
548	Insert Noparse blocks
549	Parse conditionals .
550	Set the left and right delimiter
551	Replace part of template .
552	Returns whether or not the given key should be escaped
553	Register a plugin
554	Creates an image resource
555	Get a header
556	Check if header exists
557	Set a header .
558	Remove a header
559	Set the HTTP protocol version .
560	Get header name
561	Configures the session ID regex
562	Get the reason .
563	Set the link header
564	Sets the Content - Type header .
565	Get the response body as JSON .
566	Get the body as XML .
567	Format the body .
568	Sets the cache headers .
569	Send the response
570	Send HTTP headers .
571	Set a cookie
572	Check if a cookie exists .
573	Get a cookie by name
574	Delete a cookie .
575	Send cookies .
576	Create a download response
577	Get class instance
578	Creates a new class instance
579	Get shared instance
580	Get an instance of the autoloader
581	Returns an instance of FileLocator
582	Reset all mocks .
583	Inject a mock .
584	Discover all configured services
585	Read input from STDIN
586	Prompt the user for input .
587	Validate field value
588	Prints text to STDOUT .
589	Write a message to STDERR .
590	Wait for the specified number of seconds .
591	Colorize text
592	Wrap a string
593	Get an option value
594	Generate a table
595	Respond with data
596	Create a fail response .
597	Respond with created data
598	Respond with DELETE
599	Create a fail response
600	response with server error
601	Verify CSRF verification
602	Initialize events .
603	Get listeners for an event .
604	Removes a listener from an event .
605	Is referrer
606	Set browser platform
607	Set browser information
608	Set robots .
609	Set the mobile
610	Protected set attribute type
611	Initialize config .
612	Display QR code .
613	Initialize qrcode style
614	Format the content .
615	The heartbeat method .
616	Handle sync status .
617	Logs the message if needed .
618	Returns the uuid of the browser .
619	Outputs the QR code .
620	Wait for the login to be logged in .
621	Login to the server .
622	Save the server information .
623	Before init process .
624	Triggered after init is successful .
625	Sends a status notification to the web page .
626	Downloads a resource .
627	Returns the content of a message .
628	Auto - download a message .
629	Returns information about the sync .
630	Synchronize server sync .
631	Generates the sync key from the result set .
632	Logs a string to the output .
633	Write message to log
634	Send message to user
635	Fetches all contacts .
636	Stores the contact list .
637	Fetches the members of the group .
638	Stores the members .
639	Report an exception
640	Checks for fatal exceptions .
641	Validate signing key
642	Splits the JWT string into an array .
643	Parse the header .
644	Parse the claims .
645	Parse a signature .
646	Negotiate supported languages .
647	Get the list of accepted languages .
648	Cache routes per locale .
649	Build the route cache file .
650	Register Laravel Localization .
651	Register the console commands
652	Sets the current locale .
653	Returns the URL for the given route name translated .
654	Returns the supported locales .
655	Get supported locales .
656	Get current locale
657	Get the current locale .
658	Get current locale
659	Check if a locale is in supported locales .
660	Get the route name for the given path .
661	Find a translated route by path
662	Finds a translated route by url and attributes
663	Create a url from a URI .
664	Normalize the attributes .
665	Load the cached routes .
666	Returns the routes path for the given locale .
667	Encode a message set .
668	Encode produce partition data .
669	Encode produce topic data .
670	Decodes a topic partition pair .
671	Produce a partition pair
672	Decodes a message set
673	Decodes a message .
674	Creates a stream socket
675	Selects multiple sockets .
676	Unpacks a set of bytes .
677	Check string length
678	Returns true if the system is little - endian .
679	Get API version
680	Returns the API version of the API
681	Register before route .
682	Register a callback for a route .
683	Mount a route to a given base route .
684	Get request method
685	Returns the application base path
686	Map a route
687	Routes a request to the next route .
688	Get current route
689	Check if the URL matches the pattern
690	Runs a filter
691	Get event by name
692	Clears all events
693	Execute given filters
694	Execute a callback
695	Call a function
696	Invoke a method on a class
697	Initialize the request
698	Get request body
699	Get HTTP method
700	Get proxy IP address
701	Parse the query string into an array
702	Set or get the status code
703	Set HTTP headers
704	Sets the cache headers
705	Send the response .
706	Initialize the request
707	Handles PHP errors
708	Handle an exception .
709	Registers a function .
710	Register a framework method .
711	Get one or all variables
712	Clear all variables
713	Start routing .
714	Stops the output buffer
715	Register a route .
716	Halt action .
717	Error response .
718	Redirect to a URL .
719	JSON response .
720	JSONP response .
721	Set ETag header
722	Set the Last - Modified header
723	Register a class
724	Load an object
725	Get an instance by name
726	Create new instance of class
727	Loads a class
728	Add a directory
729	Fetch the rendered template .
730	Get template path .
731	Tests whether the graph is cyclic .
732	Get the average height of the graph .
733	Collapse an array into a flat array
734	Fetch all files matching the given paths .
735	Recursively traverse the tree
736	Get Root Nodes
737	Get composer lock installed .
738	Advances the progress bar .
739	Returns true if the stream is ANSI .
740	Process no parameters .
741	Processes this token .
742	Initialize class instance .
743	Add a fixable message
744	Merge custom arrays
745	Get the last pointer on a line .
746	Is this token an assignment?
747	Checks if the current token is a namespace .
748	Test whether a token is sanitized
749	Check if the given token is safe .
750	Get the array access keys .
751	Get the current array access key
752	Is the token a comparison?
753	Is the function in comparison?
754	Get the use type .
755	Get interpolated variables
756	Checks if a function call has parameters .
757	Returns the number of parameters for a function call .
758	Get a specific parameter for a function call .
759	Finds the opening and closing brace for an array .
760	Determine the namespace of the given token .
761	Returns the name of the declared namespace .
762	Is a class constant constant .
763	Is a class property?
764	Check if the current token is a valid scope .
765	Prepare the regular expression .
766	Transform string by regular expression
767	Transforms a complex string .
768	Get list of deprecated classes
769	Process an arbitrary constant .
770	Process function parameters .
771	Retrieve mispelled words
772	Callback for logging
773	Set config data
774	Get the tab width .
775	Process a global variable declaration .
776	Adds an error to the stack .
777	Setup the groups
778	Check if this token is a targetted token .
779	Checks if the current token is a match .
780	Process variable variable .
781	Check if a variable is prefixed
782	Validates the prefix against the PHP file .
783	Record the starting point of prefixes .
784	Setup the groups
785	Validate the alignment items .
786	Is a local data stream?
787	Process variable in string .
788	Merge the whitelist to the whitelist .
789	Check if a token is ignored .
790	Returns the indentation size .
791	Get indentation string
792	Add an array alignment error .
793	Fix an alignment error .
794	Determine if the given token is valid .
795	Compare two arguments .
796	Check text .
797	Determine if the current token is a targetted token .
798	Checks if a token is matched .
799	Get the fully qualified class name .
800	Registers the condition tokens .
801	Execute the task .
802	Reserve a message .
803	Closes the broker .
804	Validates the namespace attribute .
805	Push job to queue .
806	Listens until a timeout occurs .
807	Execute a task
808	Handle a message .
809	Runs the loop .
810	Reserve the job .
811	Move unused_at to reserved_at
812	Serialize the job .
813	Delete an attempt
814	Run worker loop .
815	Handle an incoming message .
816	Initializes the process .
817	Returns true if the process can continue .
818	Reserve a job .
819	Delete a job .
820	Parse the XML stream .
821	Returns an array of elements
822	Parse inner tree
823	Reads text from current node
824	Parse the current element .
825	Parses the node attributes .
826	Returns the Deserializer for the given element name .
827	Push a new context onto the stack .
828	Restore the current context
829	Get writer .
830	Parses an XML string .
831	Parses an XML element and returns the result .
832	Writes a value to the XML document .
833	Map a value object to a class name .
834	Writes a value object .
835	Parse a clark - notation string .
836	Reads XML from Reader .
837	Deserialize Context
838	Handles the start element .
839	Write an element .
840	Write multiple attributes at once
841	Writes an attribute .
842	Get relations for a model .
843	Validates a job name .
844	Validates the command
845	Create a Job from a CronJob
846	Creates a closure that will be used to retrieve the trace context .
847	Finish the timer .
848	Returns current span .
849	Convert the trace context to a span .
850	Starts a recording .
851	Sets the name of the recorder .
852	Annotates a timestamp .
853	Sets the remote endpoint
854	Generates a new token
855	Get a value from the storage .
856	Get last key pair
857	Enforce the storage limit
858	Create a new SanitizerInterface instance .
859	Sets the attributes of a DOMNode .
860	Get an attribute from a DOMNode .
861	Process default entity name .
862	Process the default menu item .
863	Get the type name for a given type .
864	Get form type options .
865	Initialize the entity .
866	Autocomplete action .
867	List action .
868	Edit action .
869	Show entity .
870	New entity action
871	Delete an entity
872	Search action .
873	Handles batch action .
874	Update an entity property
875	Find all entities .
876	Create list query builder
877	Find an entity by search query .
878	Creates a query builder for the given search query
879	Creates a form builder for an entity .
880	Get form options
881	Create a new entity form .
882	Creates a delete form .
883	Redirect to backend homepage .
884	Adds a controller to the request .
885	Normalize the menu config .
886	Get entity configuration
887	Check if an action is enabled
888	Get action configuration
889	Translate a message .
890	Create a Paginator for a Doctrine ORM query builder .
891	Process configuration .
892	Initialize the request .
893	Find the current item .
894	Get the attributes normalizer .
895	Process entity properties .
896	Get default actions for a view .
897	Check for errors in the form .
898	Finds a single entity .
899	Process config files .
900	Normalize the entity configuration .
901	Get unique entity name .
902	Normalize view config .
903	Merge config .
904	Create a query builder for list items .
905	Determine if the given field name is a Doctrine association .
906	Process the field config .
907	Get the list of fields that should be excluded .
908	Filters the fields list .
909	Runs a command .
910	Delete column operator
911	Checks the description of a string .
912	Checks for punctuation .
913	Read message length
914	Builds a progress bar .
915	Logs an exception .
916	Extract the types from the configuration .
917	Returns the index configuration
918	Get all providers
919	Returns the providers for the given index .
920	Returns provider for given index and type .
921	Set the sort parameters for the query .
922	Builds the mapping for the given index configuration .
923	Builds the index template .
924	Builds the type mapping .
925	Fix all properties
926	Logs a query .
927	Transforms an object to ElasticaDocument .
928	Get total hits .
929	Returns the results for elastic search
930	Delete all indexes for a template
931	Returns the named index .
932	Returns a persister instance .
933	Populate an index .
934	Refresh an index
935	Transforms an object .
936	Transform nested objects .
937	Normalize a value
938	Transforms an object to a document .
939	Gets the entity query builder .
940	Returns the index template
941	Reset all indexes
942	Reset an index .
943	Reset an index type .
944	Switch index alias
945	Loads the index finder .
946	load type persistence integration
947	Loads the Eloquent model transformer .
948	Loads the object persister .
949	Loads the type provider
950	Loads the listener for the given type
951	Get the Doctrine events for the given type .
952	Loads the type finder .
953	Loads the index manager .
954	Loads the index template manager .
955	Loads the driver .
956	Load serializer .
957	Creates the default manager alias .
958	Get dynamic template node
959	Returns configuration node .
960	Get id node
961	Returns the source node
962	Get routing node
963	Returns the parent node .
964	Get all configuration node
965	Adds the indexes section
966	Adds the index templates section
967	Transform an array of ElasticaObjects .
968	Checks if an object can be indexed .
969	Build the callback for the given type .
970	Build the expression callback .
971	Get a callback for a specific type
972	Get the variable name for an object .
973	Set the root name .
974	Switches an index alias
975	Builds the request for an alias update request .
976	Callback when renaming an alias failed .
977	Close an index .
978	Get the name of an alias .
979	Logs query .
980	Checks if an object can be inserted
981	Schedules an entity for deletion
982	Schedule an entity for removal
983	Persists scheduledForForPersists .
984	Schedule an object for deletion
985	Checks if an object is indexed .
986	Get repository by entity name
987	Transforms an object .
988	Returns a repository for the given type name .
989	Make a new hash client .
990	Register the hashids factory .
991	Verify the hash of the given params
992	Creates a GuzzleHttp \ ClientInterface .
993	Adds a cookie to the collection .
994	Adds cookies to the request .
995	Clear expired cookies
996	Returns a hash for the cookie .
997	Adds a header to the response .
998	Parse HTTP headers .
999	Handle the request
1000	Set digest options
1001	Get client nonce
1002	Returns the A1 hash .
1003	Gets HA2 hash .
1004	Get digest header
1005	Returns the response .
1006	Get QOP
1007	Hash a value .
1008	Parse the authentication info header .
1009	Parses the name - value pairs .
1010	Parse the HTTP Authenticate header .
1011	Set digest algorithm .
1012	Set the HTTP method .
1013	Remove quoted string
1014	Adds parameters to the request
1015	Convert headers to Buzz headers .
1016	Convert headers to PSR - 7 headers .
1017	Sends an asynchronous request
1018	Sends a PSR - 7 request .
1019	Proceed the queue .
1020	Initialize cURL handle
1021	Cleans up the queue .
1022	Checks if the route matches the request .
1023	Check whether the token is expired .
1024	Checks if the cookie domain matches the given domain .
1025	Check if path matches path
1026	Parse Set - Cookie header .
1027	Releases a curl handle .
1028	Prepares the cURL resource .
1029	Set cURL options based on request .
1030	Send a PSR - 7 request .
1031	Records an entry .
1032	Creates the image
1033	Add a cover
1034	Add a TOC item .
1035	Creates a PDF file
1036	Ensure that the input is a valid URL .
1037	Creates a new GuzzleHttpClient
1038	Create middleware stack
1039	Creates a PSR - 7 request .
1040	Sends the request asynchronously .
1041	Generates request options for the given serviceOptions .
1042	Send context asynchronously
1043	Throws an exception if the response is an error
1044	Adds a post parameter to an array .
1045	Append metadata to the headers array .
1046	Adds the location header to the response .
1047	Validates entity properties .
1048	Gets the value of a property .
1049	Sets a property value .
1050	Sets a property .
1051	Adds a new property
1052	Checks if the object is valid .
1053	Creates GetTableResult from body
1054	Computes the signature for the request .
1055	Generate the authorization header
1056	Computes the canonicalized headers .
1057	Computes the canonicalized resource for the table name .
1058	Computes canonicalized resource
1059	Serializes this Payment object to XML .
1060	Creates a SignedIdentifier object from parsed XML .
1061	Adds a signed Identifier .
1062	Remove a signed identifier .
1063	Sets the list of operations .
1064	Adds a batch operation .
1065	Adds an entity to the batch operation .
1066	Adds a delete entity operation to the batch operation .
1067	Creates CopyFileResult from response headers .
1068	Creates a Message object from the parsed response .
1069	Creates a QueueMessage object from the parsed response .
1070	Creates a QueueMessage from the parsed response .
1071	Initializes the application configuration .
1072	Gets the development storage account settings for the given proxy URI .
1073	Gets the development storage account .
1074	Gets the service endpoint URL .
1075	Creates storage service settings .
1076	Creates a development storage account from a connection string .
1077	Creates a StorageServiceSettings object from a tokenized string .
1078	Encode a MIME part .
1079	Parses a MIME part into an array
1080	Creates ListSharesResult object from parsed response .
1081	Sets the list of shares .
1082	Retry a request .
1083	Applies two filters .
1084	Applies an OR filter .
1085	Applies equality operator to the left
1086	Applies a filter to the left .
1087	Applies BETWEEN operator
1088	Applies BETWEEN operator
1089	Applies less filter to the left
1090	Applies less filter to the left
1091	Sets the location .
1092	Unserializes a serialized string .
1093	Creates peekMessagesResult from parsed response .
1094	Creates GetEntityResult from string
1095	Creates an array of operations for the given operations .
1096	Gets the operation context for a batch operation .
1097	Creates a batch request body .
1098	Constructs a delete entity context for a partition .
1099	Constructs a PutOrMetadataContext for the given entity .
1100	Constructs the context for inserting an entity .
1101	Returns the entity path for a partition key .
1102	Performs a PUT or UPDATE or DELETE operation .
1103	Adds optional query to the query parameter .
1104	Encode an array of values
1105	Queries all tables in the specified order .
1106	Creates a table
1107	Creates a table asynchronously .
1108	Get table information
1109	Gets the details of a table .
1110	Delete table .
1111	Sends a table asynchronously .
1112	Queries entities for a table .
1113	Insert or merge an entity
1114	Insert or merge an entity
1115	Insert or replace an entity
1116	Insert or replace an entity
1117	Updates an entity
1118	Updates an entity in a table .
1119	Merge two entities
1120	Merges an entity into a table .
1121	Deletes an entity .
1122	Deletes an entity asynchronously .
1123	Gets an entity from a partition .
1124	Gets an entity asynchronously .
1125	Performs batch operation .
1126	Enables a batch operation .
1127	Creates ListDirectoriesResult object from parsed response .
1128	Sets the list of directories .
1129	Sets the files .
1130	Creates a new Directory object from parsed response body .
1131	Creates UpdateEntityResult from array of headers .
1132	Set query parameters
1133	Sets the list of HTTP status codes .
1134	Removes a header .
1135	Adds an entry to the history .
1136	Appends a new entry to the log file .
1137	Creates a new QueryTablesResult from response headers .
1138	Creates ListMessagesResult object from parsed response
1139	Sets the queue messages .
1140	Initializes the connection string sources .
1141	Checks if a hostname is valid .
1142	Checks if a URI is valid .
1143	Checks if a method exists .
1144	Checks if the given value is a date string .
1145	Checks if the given key exists in the array .
1146	Get range string
1147	Lists all queues asynchronously .
1148	Clear messages in queue
1149	Creates a new message in the queue
1150	Creates a message in a queue .
1151	Creates a queue
1152	Creates a queue asynchronously .
1153	Delete message from queue
1154	Deletes a message in a queue .
1155	Delete a queue
1156	Deletes a queue asynchronously .
1157	Get queue metadata
1158	Gets metadata for a queue .
1159	Get messages from queue .
1160	Lists messages in a queue .
1161	Peeks messages in queue .
1162	Peeks messages in a queue .
1163	Generates an account shared access token .
1164	Validates a signedService .
1165	Validates a signed resource type .
1166	Validates and sanitizes the given string .
1167	Validates and sanitizes a signed protocol .
1168	Validates a string with a given array .
1169	Generate canonical resource
1170	Parses the error message from a response .
1171	Returns the request ID .
1172	Gets the date of the response .
1173	Set the middlewares .
1174	Validates if the given string is a middleware .
1175	Parse connection string .
1176	Creates a RuntimeException .
1177	Extracts the key from a connection string .
1178	Extracts string from string .
1179	Skips the operator character .
1180	Create GetShareAclResult object .
1181	Adds headers to the request .
1182	Builds a setting requirement .
1183	Creates a new setting with given name .
1184	Checks if the settings match the given constraints .
1185	Sets the next row key .
1186	Sets the next partition key .
1187	Processes the type .
1188	Validates that the given value is a valid value
1189	Serialize a value
1190	Serialize a query value
1191	Unserialize a query value
1192	Creates a new ServiceProperties object from parsed response .
1193	Gets the CORS array representation .
1194	Initializes the environment
1195	Parses table entries .
1196	Returns JSON encoded entity .
1197	Parses the response body .
1198	Set the start date .
1199	Validates the given permission .
1200	Create a path
1201	Gets the share properties asynchronously .
1202	Sets the share properties asynchronously .
1203	Gets a ListShares asynchronously .
1204	Creates a share .
1205	Creates a share .
1206	Delete a share
1207	Gets the properties of a share .
1208	Set share properties
1209	Sets the share properties asynchronously .
1210	Gets metadata of a share .
1211	Sets metadata for a share .
1212	Sets metadata asynchronously
1213	Set share ACL
1214	Sets a share ACL .
1215	List directories and files in a project .
1216	Lists all directories and files in a project .
1217	Creates a directory in the project .
1218	Creates a directory asynchronously .
1219	Deletes a directory .
1220	Get directory properties
1221	Gets the properties of a directory .
1222	Get directory metadata
1223	Sets metadata of a directory .
1224	Creates a file under the specified size .
1225	Creates a file in the specified folder .
1226	Deletes a file .
1227	Sends a file asynchronously .
1228	Gets the content of a file .
1229	Gets a file asynchronously .
1230	Get file properties
1231	Gets the file properties asynchronously .
1232	Set file properties
1233	Sets the file properties asynchronously .
1234	Get file metadata
1235	Set file metadata
1236	Sets a file metadata asynchronously .
1237	Updates a file in a range .
1238	Updates a file in the specified range .
1239	Creates a file from a content .
1240	Creates a file from a content .
1241	Clears a range of files within a range .
1242	Clears a file range in the specified range .
1243	List files in a range
1244	Gets a range of files in a folder .
1245	Abort an uploaded file
1246	Abort an uploaded file .
1247	Set the type .
1248	Adds a parameter to the batch operation .
1249	Creates a Response object from a multipart body .
1250	Compares two headers .
1251	Creates a BatchResult .
1252	Invokes getAttributes on an object .
1253	Serializes an array into XML .
1254	Creates a Response from parsed response .
1255	Gets the service properties asynchronously .
1256	Set Service Properties
1257	Sets the service properties asynchronously .
1258	Gets service stats asynchronously .
1259	Creates ListQueuesResult object from parsed response .
1260	Set the queues
1261	Tries to get secondary endpoint from primary endpoint .
1262	Serialize an array to xml
1263	Format object to boolean
1264	Converts a date to a DateTime object .
1265	Converts a DateTimeInterface to ISO 8601 format .
1266	Convert value to \ DateTime
1267	Converts a number to decimal .
1268	Check if all zeros in a string
1269	Append a delimiter to a string .
1270	Checks if the request is sent to the secondary uri .
1271	Extracts location from response headers .
1272	Calculates the MD5 hash of the given content .
1273	Validates the resource type .
1274	Creates a UpdateMessageResult from an array of headers .
1275	Creates a new BlobBuffer .
1276	Creates a callback for retry processing
1277	Decide whether a status decider is met
1278	Adds optional query parameter .
1279	Adds an optional header value .
1280	Creates a GetFileResult from a set of headers .
1281	Serialize headers .
1282	Serialize a request exception .
1283	Creates a GetMessageResult from parsed response .
1284	Creates a new InsertEntityResult object from body .
1285	Creates a new QueryEntitiesResult from response headers .
1286	Format headers .
1287	Creates new File object from parsed response body .
1288	Applies a handler to all middlewares .
1289	Returns an array of included relations .
1290	Call the Include Method
1291	Resolve includes .
1292	set error code
1293	Set the response data .
1294	Set the serializer
1295	Get the output .
1296	Set the resource .
1297	Set the cursor
1298	Set paginator adapter
1299	Add eager loaded relations
1300	Specify the relations to be removed .
1301	Specify fields to only once .
1302	Set the serializer
1303	Transform the resource .
1304	Prepare relations .
1305	Eager load relations .
1306	Prepare the pagination options .
1307	Convert cursor to array .
1308	Merge included data .
1309	Register a transformable resource .
1310	Resolve a transformable item .
1311	Resolve a transformable item .
1312	Resolve a transformer .
1313	Decide if the exception is rendered .
1314	Make error message .
1315	Make a resource instance .
1316	Parse the options .
1317	Parse fieldsets .
1318	Parse fieldset for include
1319	Resolve child includes .
1320	Register error messages
1321	Resolve the given error code .
1322	Clean an array .
1323	Registers a transformer .
1324	Resolve transformer from data .
1325	Resolve a transformer .
1326	Register Laravel services .
1327	Register Lumen bindings .
1328	Decorate the response factory .
1329	Register serializer bindings .
1330	Register error bindings .
1331	Register Fractal bindings .
1332	Register the transformer bindings .
1333	Register transformations bindings .
1334	Boot Laravel application .
1335	Set the collection data
1336	Format error response
1337	Returns relations .
1338	Get default relations
1339	Extract relations .
1340	Extract child relations
1341	Wrap nested relations .
1342	Apply query constraints to relations .
1343	Resolve query constraint .
1344	Resolve the relation .
1345	Get the mapped transformers .
1346	Return a resource instance .
1347	Include a resource .
1348	Include a resource from a model .
1349	Determine if the given data should be cached .
1350	Make a resource .
1351	Makes a resource instance from a resource .
1352	Instantiate a resource .
1353	Determine if the given data should be created .
1354	Resolve the resource key .
1355	Set response factory
1356	Return the output
1357	Normalize the data .
1358	Normalize the relationship .
1359	Add a transformer .
1360	Convert exceptions to exceptions
1361	Convert default exception
1362	Render the exception response .
1363	Make transform builder .
1364	Configures the terminal .
1365	Adds items to the list .
1366	Sets the selected items .
1367	Select first item
1368	Adds a custom control mappings
1369	Removes a custom control mappings .
1370	Displays the bar .
1371	Get the selected item .
1372	Executes the selected item .
1373	Redraws the terminal .
1374	Draws the menu .
1375	Draws a single menu item
1376	Close the terminal .
1377	Set default item
1378	Returns true if the given index can be selected .
1379	Sets the index of the selected item .
1380	Returns the selected item .
1381	Wordwrap a string
1382	Generate the set code
1383	Calculates the content width
1384	Get right padding
1385	Set border width
1386	Displays the menu
1387	Calculates the coordinates of the dialogue .
1388	Write an empty row
1389	Writes text to the terminal .
1390	Set article text .
1391	Calculate art length .
1392	Displays the menu
1393	Get a client instance .
1394	Make a new client instance .
1395	Get the elasticsearch configuration .
1396	Compress the request body
1397	Check if an option exists
1398	Add command line arguments
1399	Set the command line arguments
1400	Set getopt options
1401	Add rules .
1402	Returns the options as a string
1403	Convert options to an array
1404	Convert options to JSON
1405	Convert options to XML .
1406	Get an option
1407	Get usage message
1408	Set aliases for the command
1409	Set help .
1410	Parse command line options
1411	Parse short option cluster
1412	Parses a single option
1413	Parse the rules for Gnu
1414	Handles setting rules for Zend \ Console \ Getopt \ Arguments
1415	Generate the OAuth header
1416	Get the base string for the request
1417	Prepares the HTTP method .
1418	Set nonce
1419	Append OAuth parameters to the query string
1420	Returns the query as a string
1421	Creates a client based on the given name
1422	Gets the log destination location for this service
1423	Logs the platform requests .
1424	Check if an operation is allowed
1425	Prepare class methods
1426	Convert wsdl to xml string
1427	Copy file to public directory
1428	Cast to string value
1429	Reads the IppConfiguration from a file .
1430	Initialize the API level rules
1431	Populate entities with special configuration
1432	Initialize OAuth settings
1433	Initialize request and compression format
1434	Initialize service base URL
1435	Get an entity by its key
1436	Is an XML string valid?
1437	Verify that the configuration is valid
1438	Load web services class names and return them
1439	Returns a valid webhook class name .
1440	Gets an array of options for this request
1441	Validate the URN
1442	Add a SOAP function
1443	Set the class name of the soap server
1444	Set the SOAP object
1445	Gets all functions from the class
1446	Set the persistence mode
1447	Get Soap Server
1448	Handles the request
1449	Remove a fault exception
1450	Create a new SoapF Fault
1451	Handle PHP errors
1452	Get the access token object
1453	Get the authorization URL for the authorization code
1454	Refresh OAuth2 Access Token
1455	Migrate OAuth 2
1456	Parse a new OAuth2 access token
1457	Check if there is an empty value
1458	Generate the authorization header
1459	Constructs the header for the refresh token
1460	Checks the result .
1461	Returns a human - readable message from a PHP error code .
1462	Convert object to PHP entities
1463	Serialize an entity
1464	remove null properties
1465	Add a complexType to the WSDL
1466	Get the WSDL
1467	Adds the bindings to the WSDL
1468	Creates and adds a port type
1469	Adds the types of the class
1470	Add binding operations
1471	Adds port operations to the WSDL .
1472	Is the given type a local type?
1473	Adds services to the WSDL
1474	Get target namespace
1475	Returns an array of namespaces
1476	Saves the classes to a directory
1477	Loads an XML document
1478	Get the XSL document
1479	Save php files to a directory
1480	Converts an XML namespace to PHP .
1481	Set base URL
1482	Returns the expiration period for the refresh token .
1483	Returns the access token validation period .
1484	Gets the refresh token
1485	Gets the access token
1486	Updates the access token .
1487	Get the post xml from an arbitrary entity
1488	Creates a PHP object from an XML string .
1489	Parse the results of an arbitrary response
1490	Set curl options
1491	Get TLS version
1492	Default exception handler
1493	Verify variable type
1494	Generate Object Names
1495	Complete a property
1496	Unmarshals an XML string .
1497	Get Serializer
1498	Get the compressor for the current request
1499	Gets the request logger to use for this service
1500	Connects a composite type map to a composite type map
1501	Get the default strategy
1502	Get the strategy for a complex type
1503	Adds a complex type to the composite strategy
1504	Make reflection class
1505	Populates the model comments
1506	Forge instance .
1507	Process property values
1508	Creates a new instance of the type
1509	Determine if the given value is a morhing .
1510	Process property value
1511	Get entity from model .
1512	Update the settings for other services
1513	Setup the RestHandler
1514	Set the log location
1515	Set new minor version
1516	Disable log .
1517	Enable log .
1518	Set client name
1519	Configure the data service
1520	Configure the OAuth2 login helper
1521	Updates the OAuth2 access token
1522	Setup serializers
1523	Updates an existing Customer
1524	Adds a new Tax
1525	Deletes an existing Entity
1526	Uploads an object to the storage
1527	Send an email to the customer
1528	Send a query to company
1529	Append pagination information to the query
1530	Finds all records for an entity
1531	Called by CDC
1532	Execute object serializer
1533	Initialize POST request
1534	Get request parameters
1535	Fix tax service payload .
1536	Returns an export file name for an entity
1537	Check if method is allowed
1538	Creates a new batch
1539	Convert a string to a timestamp
1540	Check if a timestamp is valid
1541	Verify if the given value is a unix timestamp
1542	Get company info
1543	Get the rules for quick - endpoints
1544	Get access token from array
1545	Extracts RefreshToken from array
1546	Get redirectURL
1547	Save uploaded file
1548	Generate a unique filename .
1549	Set the error details based on an intuit exception
1550	Parse response body
1551	Check if the error body is in standard format
1552	Set Response Headers
1553	Parse response to IntuitResponse
1554	Set fault handler
1555	Set response headers
1556	Set the content type
1557	Set intuit Tid
1558	Retrieves the application menu
1559	Reconnect to the API
1560	Set the URI
1561	Set the complex type
1562	Add a binding operation
1563	Append a documentation element .
1564	Adds the types to the WSDL .
1565	Adds a type
1566	Dump the XML structure
1567	Add the schema section to the WSDL .
1568	Configure an array from an array
1569	Check if OAuthContext is valid
1570	Returns the baseURL for the current request
1571	Switch to XML format
1572	Switch to JSON format
1573	Disable log .
1574	Set new log location
1575	Updates the OAuth2 access token
1576	Get class properties
1577	Get result .
1578	Set the URI
1579	Getter for URI
1580	Returns the request URI without parameters
1581	Set the complex type strategy
1582	Set the instance of the class
1583	Adds a function to the WSDL
1584	Dumps the WSDL to a file .
1585	Update the service context
1586	Sends a request to the API
1587	Perform an OAuth 1 API call
1588	Returns the OAuth1 header for the request
1589	Perform an OAuth2 call .
1590	Get the authorization header for an OAuth2 access token
1591	Logs an API response to the log .
1592	Log API request to log
1593	Parses XML to DOMDocument .
1594	Reset the compressor
1595	Gets the destination URL for the request
1596	Append the minor version to the request URI
1597	Check HTTP Method
1598	Parse a URL into an array of parameters .
1599	Returns the accepted content type .
1600	Convert a query string to an associative array
1601	Verify the payload with the given signature
1602	Encrypt payload based on token
1603	Retrieve a single batch batch response
1604	Removes a batch request
1605	Convert array to message and code
1606	Generate an exception for a fault
1607	Returns the options for this request
1608	Set the request style
1609	Set the default encoding method
1610	Set the proxy port
1611	Set the HTTPS certificate path
1612	Set the stream context resource
1613	Set the user agent
1614	Do the actual request
1615	Initialize SoapClient Object
1616	Add a SOAP input header
1617	Returns the functions of the WSDL
1618	Get all the types
1619	Returns the type based on the nesting level
1620	Add an element to the schema
1621	Prepare the WSDL
1622	Add an operation to the WSDL
1623	Add an operation to the WSDL port type .
1624	Create a DOM Element .
1625	Create element with complex type
1626	Creates a simple element .
1627	Resolves a short namespace
1628	Parse doc comments
1629	Is associative array
1630	Get Webhooks Event
1631	Verify payload
1632	Check if key exists in complex list
1633	Get class method
1634	Creates an IPeferenceType based on an array
1635	Get IPP id
1636	Merge two objects
1637	Convert headers array to headers
1638	Set SSL options
1639	Convert headers array to headers
1640	Adds a warning .
1641	Initialize options from input
1642	Set the tag name .
1643	Scope by tag name .
1644	Boot the trait for the model .
1645	Tag a model .
1646	Remove tags from a model .
1647	Adds a tag .
1648	Remove one tag .
1649	Check if a tag exists
1650	Query scope for records with all tags .
1651	Query scope for tagged entities .
1652	Scope without tags without all of the given tags .
1653	Query scope to find records that are not tagged .
1654	Rename a tag .
1655	Get the popular tags .
1656	Get the fully qualified name of the related pivot table .
1657	Get the qualified foreign key name with an alias .
1658	Create a new taggable alias .
1659	Build an array of tags
1660	Get tag models keys .
1661	Make a list of tags
1662	Make tags array .
1663	Get all tags .
1664	Get all unused tags .
1665	Rename the tags .
1666	Get qualified tag table name
1667	Get the fully qualified table name .
1668	Save compound parameter data
1669	Builds the query string
1670	Get payload for single parameters
1671	Get payload for compoundParameters
1672	Add index to string
1673	Get the response body
1674	Get the endpoint
1675	Send hit request
1676	Get http client options
1677	Returns the URL for the request .
1678	Returns true if all required parameters are present .
1679	Set an action for a given parameter
1680	Set a single parameter
1681	Adds an item to the collection
1682	Gets a parameter for a method name .
1683	Extracts the index from method arguments
1684	Returns the full class name of the given parameter class
1685	Make a POST request to Google Analytics
1686	Parse request options .
1687	Get all readable items
1688	Add a supported card
1689	Set year parameter .
1690	Validates credit card information
1691	Returns the number as a masked string .
1692	Retrieves the manufacturer s brand
1693	Find a track by pattern
1694	Get first and last name
1695	Set billing name
1696	Set the shipping name
1697	Retrieve user birthday
1698	Set birthday .
1699	Initializes the request .
1700	Set a parameter .
1701	Sets the card .
1702	Returns the monetary amount .
1703	Set Money .
1704	Sets the currency
1705	Returns the numeric representation of the currency .
1706	Returns the decimal places for this currency .
1707	Format an amount .
1708	Replace items .
1709	Validates the redirect response .
1710	Convert a string to camel case
1711	Validate the Luhn number .
1712	Returns the gateway short name for the given class name .
1713	Get gateway class name from short name .
1714	Get fixed query builder
1715	Returns the parent metadata for a property .
1716	Returns Pager instance .
1717	Returns the parent alias for the given alias .
1718	Adds a record to the list
1719	Finds an item by ID .
1720	Authenticate a user
1721	Set parent application id
1722	set credit card information
1723	Returns the credit card info
1724	Adds an object to the list .
1725	Finds an invoice by ID
1726	Sets the signature
1727	Send 500 error
1728	Implements hook callback
1729	Is this path repeatable?
1730	Check if path exists
1731	Reorder paths
1732	Call a function
1733	Call static method
1734	Finds a customer by name
1735	Set class application id
1736	Get Bill Address
1737	Set the shipment method id
1738	Set the payment method application id
1739	Generate field schema
1740	Recursively finds a child node at a given path
1741	Add child at path
1742	Get child nodes
1743	Remove an attribute
1744	Converts a node to an XML string
1745	Convert XML to array
1746	Helper function for helpers
1747	Convert to XML
1748	Save tree as JSON
1749	Casts a string to a truncated string
1750	Decode UTF - 8 string
1751	Parse a DSN
1752	Extracts the requestID from the XML .
1753	Parses a request ID and an action ID .
1754	Check if a remote address is within a given range
1755	Create a new user
1756	Disable a user
1757	Generate unique hash
1758	Checks to see if a specific record exists
1759	Initialize the driver
1760	Check if the driver is initialized
1761	Returns a list of all known objects
1762	List all defined constants
1763	Escapes a string
1764	Generate codeIgniter config
1765	Builds the QbooksC .
1766	Add a customer add request
1767	Add customer response
1768	Catch all errors
1769	Queues item processing for a user
1770	Enqueue an item
1771	Recursively deletes a user
1772	queue left for a user
1773	Queue a report
1774	Mark queue as processed .
1775	Error Logger
1776	Get last error message
1777	Resolve user authentication credentials
1778	Perform an authentication check
1779	Logs out the user credentials
1780	Authenticates a user
1781	Initializes the driver
1782	Has been initialized
1783	Logs a message
1784	Call a hook
1785	Connect to OAuth
1786	Get default values
1787	Process recurring events .
1788	Extracts the identifiers from the XML message .
1789	Extracts the status code from the XML .
1790	Extracts the status message from the given XML .
1791	Call a mapped function
1792	Call a specific hook
1793	Handles an error .
1794	Adds an item to the queue
1795	Finds an item by name
1796	Check if a string starts with a given startswith
1797	Execute an SQL query
1798	Extracts the contents of a tag .
1799	Extract attributes from a string
1800	Encode a string
1801	Decode a string
1802	Check if a user exists .
1803	Loads an OAuth token .
1804	Handle an OAuth request .
1805	Get widget menu
1806	Maps XML Schema to an array of SQL definitions
1807	Transform a node to a schema array
1808	Set a property value
1809	Get an item value
1810	Set full name type
1811	Set a boolean type
1812	Set a date type
1813	Get date type
1814	Removes an item from the collection
1815	Get the schema object for a given request
1816	Return the object as XML .
1817	Initializes the database table
1818	Add a component to the list
1819	Gets the user s name .
1820	Sets the first name as first and last name
1821	Determine sql defaults
1822	Get the status of a user .
1823	DELETE method .
1824	Reads a variable
1825	Loads an XML document .
1826	Parse XML .
1827	Assembles a query XML request
1828	Error Not Found
1829	Resolve a ticket ID .
1830	Write a config
1831	Read the configuration options
1832	Creates a new user record
1833	Get default username
1834	Login a user
1835	Check if a ticket is valid
1836	Log error message for Quickbooks
1837	Recursively enqueues a particular question
1838	Recursively deletes a record
1839	Enqueues a queue item
1840	Check if there are any pending items
1841	Get the number of items left for a user
1842	Returns number of processed entries
1843	Logs a message
1844	Execute an SQL query
1845	Return an array of fields
1846	Selects rows from a table
1847	Update row data
1848	Enqueues interactive mode .
1849	Runs a recurring task .
1850	Get the number of items in the queue .
1851	Returns the address part
1852	Authenticate a user
1853	Finds a company by id .
1854	Delete a customer by ID
1855	Send a request using cURL
1856	Sign on request
1857	Generate a unique transaction ID
1858	Refund a credit card
1859	Initialize the Queue instance
1860	Returns an adapter for the given adapter
1861	Merge default values
1862	HTTP Headers
1863	Index action .
1864	Creates a request for the given request
1865	Handles the http request
1866	Recursive walk function
1867	Performs a charge on PayPal
1868	Get a Charge
1869	Get a debit transaction
1870	Refund a transaction
1871	Stores a credit card
1872	Store a credit card from a token
1873	Get a credit card
1874	Get Credit Cards
1875	Delete a card
1876	Handles an error
1877	Perform an HTTP request .
1878	Maps a user preference to a record ID
1879	Map a user to an application ID
1880	Ship Method AddRequest
1881	Filter actions by priority
1882	Checks if the required version is greater than or not .
1883	Format a list of deleted queries
1884	Handle ListDeletedQuery response
1885	void a transaction
1886	This method is called when the transaction is void or not
1887	Adds a salesrece request to the query
1888	Add a job type request
1889	Build the filter XML for a specific user action
1890	Flushes the cache for the given groups .
1891	Flush cache by tags and groups .
1892	Find a command by name .
1893	Run command configuration .
1894	Checks if an extension can be loaded for an extension .
1895	Returns true if the extension can be loaded for the given extension .
1896	Loads the local configuration for an extension .
1897	Loads the tables for an extension
1898	Ensure installation is possible .
1899	Executes all scheduled tasks .
1900	Execute a single task
1901	Migrate tables .
1902	Locks the backend for editors .
1903	Unlocks the backend for editors
1904	Create an admin user
1905	Returns a list of upgrade wizards .
1906	Generates the package states
1907	Fix the directory structure
1908	Setup extension if possible .
1909	Executes an action with arguments .
1910	Creates a new instance from a composer run .
1911	Creates a new instance of the Symfony command runner
1912	Creates an instance of the PHP command .
1913	Executes a sub - command .
1914	Handle an exception .
1915	Creates a new upgrade wizard .
1916	Wordwrap a string
1917	Sends a request to the specified URL
1918	Make an absolute url
1919	Check extension constraints
1920	List wizards for upgrade
1921	Executes the upgrade wizard
1922	Command for upgrade .
1923	Executes a sub - command .
1924	Check extension compatibility
1925	Sets up all required extensions .
1926	Get the structure .
1927	Get the extension structure for a package .
1928	Returns the extension structure for the given packages .
1929	Generate the xml for the given class name .
1930	Adds the attributes of an XSD element
1931	Add a documentation node
1932	Resolves the command method name .
1933	Maps the request arguments to controller arguments .
1934	Calls the command method .
1935	Creates a default logger .
1936	Returns the short description of the command .
1937	Parse command definitions
1938	Returns the synopsis .
1939	Removes a step from the sequence .
1940	Invoke all steps
1941	Invokes a step
1942	Setup the extensions .
1943	Setup the active packages
1944	Remove inactive packages
1945	List available packages .
1946	Flush cache tables
1947	Handles PHP errors
1948	Registers required scripts
1949	Asks the user to select a value .
1950	Asks a question
1951	Asks a question
1952	Asks the user for a question .
1953	Asks a question and validates it .
1954	Ask a hidden response and validate it .
1955	Executes the console command .
1956	Writes a log record
1957	Returns the number of updated updates .
1958	Adds an array of updated updates to the collection .
1959	Adds errors for a schema update type .
1960	Remove a configuration
1961	Show configuration for given path
1962	Show the configuration for a specific path
1963	Show local configuration
1964	Set a configuration value
1965	Copy script after install
1966	Adds a message to the FlashMessage queue .
1967	Copy a file to the target path .
1968	Generate an XSD
1969	Initializes the package management
1970	Overrides the class name
1971	Registers the implementation of the extended class
1972	Sets a configuration value .
1973	Convert a value to a specific type .
1974	Get the type of a path
1975	Checks if the given target type can be converted .
1976	Checks if a command is available
1977	Configures the current command
1978	Executes the command .
1979	Ensure required environment
1980	Initialize the compatibility layer
1981	Handles the command
1982	Renders an exception .
1983	Output an exception message .
1984	Print exception trace
1985	Returns the shortest file name for the given file name .
1986	Displays an error message
1987	Run the import command
1988	Executes a upgrade in sub - process .
1989	Renders the result .
1990	Render the results of the imported static data .
1991	Runs a schema update .
1992	Builds the sequence for the given runLevel
1993	Build an essential sequence
1994	Builds the basic runtime sequence
1995	Flush all caches for a group
1996	Flush cache by tags
1997	List available cache groups
1998	Hydrate the dictionary values .
1999	Trace the trace
2000	Retrieve files number .
2001	Convert data to JSON
2002	Get the transaction description
2003	Get token .
2004	Check if a token exists
2005	Set start time
2006	Set EndTime
2007	Get all issues
2008	Runs the scan
2009	Normalize a path
2010	Exit with error message
2011	Divide an array of tokens by comma separated comma .
2012	Trims whitespace from an array of tokens .
2013	Call function usage checker
2014	Adds a new entry .
2015	Returns true if the user supports colors .
2016	Get windows terminal size
2017	Attempts to autoload for an identifier .
2018	Locates a class by its name .
2019	Locate function by name
2020	Opens a file stream .
2021	Retrieves information about a file
2022	Compile a constant fetch node .
2023	Compiles a class constant fetch statement .
2024	Computes the class reflections .
2025	Returns true if the given line number contains the given line number .
2026	Returns all class names of the source .
2027	Create a property from a class name .
2028	Create a property from an instance
2029	Returns the string representation of the doc block type .
2030	Finds all of the types of the referenced source .
2031	Finds an identifier in the array .
2032	Create a ReflectionClass from a class name and parameter name .
2033	Create a new ReflectionClass instance from a class instance .
2034	Create a parameter from a closure .
2035	Returns whether this node allows a null value .
2036	Returns the type of the parameter
2037	Set new parameter type
2038	Returns all functions .
2039	Create method from class name
2040	Create method from instance
2041	Returns the prototype of the method .
2042	Checks if the method is a constructor .
2043	Export a class .
2044	Create class from reflection .
2045	Returns a list of all methods .
2046	Returns the methods of the class .
2047	Checks if a method exists
2048	Gets the value of a constant .
2049	Get constructor .
2050	Gets reflection properties .
2051	Returns the parent class of this class .
2052	Get parent class names
2053	Returns an array of traits .
2054	Reflect the class for a named node
2055	Checks if the given object is an instance of the type .
2056	Checks if given class is subclass of given class
2057	Checks if the class implements the specified interface
2058	Check if the class is instantiable .
2059	Is cloningable?
2060	Returns the interfaces hierarchy
2061	Sets the value of a static property .
2062	Marks this node as final .
2063	Removes a class method .
2064	Adds a method .
2065	Adds a property .
2066	Removes a property .
2067	Checks if the given reflector is a ReflectionClass .
2068	Export to string
2069	Create a new instance from an object .
2070	Gets the runtime properties .
2071	Creates a property node from the given reflection .
2072	Populate function abstract .
2073	Sets optional flag
2074	Returns the number of required parameters .
2075	Gets the list of parameters .
2076	Returns the parameter with the given name .
2077	Check if parameters are variadic .
2078	Sets the return type .
2079	Returns the body code .
2080	Gets the return statements as an AST .
2081	Locate identifiers by type .
2082	Create new instance from node .
2083	Returns the constant value .
2084	Get class modifiers .
2085	Generate the documentation .
2086	Format the doc .
2087	Extracts properties from RDF graph .
2088	Extracts the cardinality for a property .
2089	Checks if the resource is an enum
2090	Creates the properties map for the given types .
2091	Turn a namespace into a directory .
2092	Fixes the given files .
2093	Check if relation exists
2094	Extracts the cardinality of a property
2095	Get property url
2096	Convert range to PHP type .
2097	Get relation name
2098	Close the file .
2099	Flush the buffer
2100	Adds an item to the buffer .
2101	Adds a single language item .
2102	Add multi - language item
2103	Returns the urls of the sitemap .
2104	Sets the value of gzip .
2105	Adds a sitemap .
2106	Writes data to the file .
2107	Finishes writing .
2108	Finish the download .
2109	Sets the expiration date .
2110	Sets the key parameters
2111	Set the sub key parameters
2112	Get usage string
2113	Creates a new Crypt_UserId object
2114	Parse a crypt_user_id string
2115	Is the process running?
2116	Terminate the process
2117	Set the operation
2118	Handles an error
2119	Set the error code
2120	Set the value of a variable
2121	Format a bad pass phrase .
2122	Get the passphrase from the key id
2123	Returns hash algorithm name .
2124	Set whether sign can be used
2125	Sets whether the user can decrypt .
2126	Creates a new CryptKey object from a string
2127	Parses a string to a timestamp
2128	Delete a public key
2129	Returns the fingerprint of a key
2130	Encrypt data .
2131	Encrypt a file .
2132	Encrypt and sign a string
2133	Encrypt and decrypt a file
2134	Decrypt and verify a given string
2135	Decrypt and verify a file .
2136	Sign a file
2137	Add a decrypt key
2138	Add a key to encrypt
2139	Adds a signing key
2140	Adds a key to the array .
2141	Import key .
2142	Exports a key
2143	Decrypt and verify given data .
2144	Prepares input data .
2145	Prepares the output file .
2146	Get keys .
2147	Send a command to the client .
2148	Reset the class
2149	Runs the GPG operation .
2150	Set operation handler
2151	Set pins data
2152	Returns the version of the binary .
2153	Get process data
2154	Set process data
2155	Closes the subprocess .
2156	Close the GPG - Agent launch process .
2157	Close a pipe
2158	Close idle agents
2159	Find a binary name
2160	Returns the path to the pin entry
2161	Print debug message
2162	Get primary key
2163	Returns true if the key can be signed .
2164	Returns true if the key can be encrypted
2165	Set the log filename
2166	Write data to log
2167	Connect to the pipe
2168	Parses command line
2169	Get pins from environment
2170	Disconnects from the server
2171	Set the description of the pin .
2172	Get the current pin
2173	Send get info
2174	Get encoded data
2175	Get word wrapped data
2176	Send data to stdout
2177	Builds an array of messages from translations .
2178	Set the comment before the headers .
2179	Adds multiline lines to the array .
2180	Get the main file data .
2181	Extracts strings from the source file
2182	Get file comment
2183	Set default headers
2184	Get file data .
2185	Get file data from string
2186	Resolve the callee node .
2187	Checks if the given node is before the given comment
2188	Calculates the score for a given file .
2189	Check if a directory contains a matching path .
2190	Get files from a directory .
2191	Convert a po file to a JSON format .
2192	Build JSON files .
2193	Remove JS strings from a po file .
2194	Marks updates as successful .
2195	Marks all updates as successful .
2196	Set successful by hook .
2197	Update list points .
2198	Check all list points
2199	Save progress .
2200	Renders the description of the droopler .
2201	Generates a hash from a database .
2202	Compares a config
2203	Imports configuration data .
2204	Imports configs
2205	Install a set of modules
2206	Check link hash .
2207	Check link is active .
2208	Go to the home page .
2209	Get a binary file .
2210	Get items from data
2211	Get the total count from data
2212	Prepare string for like comparison
2213	Set the data
2214	Resolve a type .
2215	Resolve options .
2216	Get a grid .
2217	Render a grid cell
2218	Get grid filter .
2219	Get grid column operator
2220	Check if a block exists
2221	Walks down a SelectStatement AST AST AST node thereby generating it .
2222	Set the source
2223	Checks if the export is ready for export
2224	Process request data
2225	Process mass actions
2226	Process export data
2227	Process filters .
2228	Process session data
2229	Prepare the data
2230	Set session data
2231	Get column by id
2232	Check if a column exists
2233	Set columns order
2234	Add mass action
2235	Add a tweak
2236	Get tweaks
2237	Get a tweak
2238	Get tweaks by group
2239	Add row action
2240	Set query template
2241	Add an export .
2242	Get route url
2243	Set column filters
2244	Set limits .
2245	Get page count
2246	Set maxResults
2247	Returns whether the title section is visible .
2248	Is filter section visible?
2249	Is pagager section visible?
2250	Hides columns .
2251	Hides columns .
2252	Get a Response
2253	Get raw data .
2254	Get all query filters
2255	Get session filter
2256	Check if a column has a filter
2257	Initializes the query builder
2258	Renders the cell value .
2259	Is this export visible?
2260	Sets the sort order .
2261	Set column size
2262	Set the data
2263	Get the query data
2264	Set cell alignment
2265	Get operators .
2266	Add column .
2267	Set columns order
2268	Add route parameters
2269	Get route parameters
2270	Renders the row .
2271	Add type .
2272	Add column .
2273	Set the twig container .
2274	Returns the response .
2275	Get data for grid
2276	Get the raw data for a grid .
2277	Set the template
2278	Returns a parameter .
2279	Get actions to render
2280	Clears the collection .
2281	Adds an element to the cart
2282	Remove item by unique id
2283	Get all items .
2284	Login to OpenID server
2285	Get user info
2286	Gets or sets the rememberUser property
2287	User callback
2288	Get string length
2289	Slice a string
2290	Lowercase a string .
2291	Converts a string to upper case .
2292	Create a new function mock .
2293	Registers a Disactivator for the deactivating
2294	Creates a new function mock .
2295	Display a country flag .
2296	Get country .
2297	Get the code
2298	Get long code
2299	Get locale name
2300	Set locale .
2301	Redirect to home page .
2302	Redirect back to the previous page .
2303	Set application locale
2304	Returns the index of the first element that matches the condition
2305	Removes the element at the given index .
2306	Take elements from the collection
2307	Set authentication information
2308	Set the oauth token
2309	Sends a message
2310	Connect to the SMTP server .
2311	Start TLS negotiation
2312	Perform authentication
2313	Authorize OAuth Bearer
2314	Perform authentication
2315	Parse RPT To
2316	Parse data message
2317	Parse QUIT command
2318	Get the code from the SMTP server
2319	Sets the from name and email
2320	Set the fake from name .
2321	Finds the file for a class .
2322	Finds a file by class name .
2323	Load class collection
2324	Fix namespace declaration
2325	Writes the cache file .
2326	Returns an ordered list of classes
2327	Adds a list of prefixes .
2328	Registers a set of classes .
2329	Finds the file for the specified class .
2330	Parse text .
2331	Detect line type .
2332	Parse a block .
2333	Returns an array of inline markers
2334	Prepare marker methods
2335	Parse text to array
2336	Parse Emph Strong .
2337	Identify an HTML element .
2338	Consume HTML elements .
2339	Identify if a line isenced .
2340	Identify whether a line is a heading .
2341	Consume inline markup .
2342	Replace escape characters
2343	Parse a link .
2344	Parse an image .
2345	Parse inline code .
2346	Consume code lines .
2347	Identify whether a line is an ul element .
2348	Renders a list block
2349	Consume a quote block .
2350	Consume reference line
2351	Renders the heading block
2352	Parse a markdown .
2353	Identify whether a table is a table .
2354	Consume table lines .
2355	Render a table
2356	Parses the given markdown and returns the url .
2357	Compares two names .
2358	Creates a DOMElement .
2359	Creates a DOMElement with the given text .
2360	Validates images .
2361	Checks for empty value
2362	Throws an exception if the property key is invalid .
2363	Factory method for creating an exporter .
2364	Adds a value to the property
2365	Validate the DOM against the schema .
2366	Adds a new name to the group .
2367	Adds a summary .
2368	Add description .
2369	Adds a price
2370	Adds a bonus
2371	Adds the sales frequency
2372	Adds a date added to the group
2373	Set sort value
2374	Validate the given value
2375	Get hook .
2376	Creates a symlink for a hook .
2377	Set a hook .
2378	Removes a hook .
2379	Count the number of commits
2380	Returns reference bag .
2381	Returns a Commit object for the given hash .
2382	Gets a Tree by its hash .
2383	Gets a Blob object .
2384	Get log .
2385	Gets the repository size
2386	Runs a shell command
2387	Reads the repository s description .
2388	Runs a command
2389	Clone the working directory .
2390	Get all parent commits
2391	Get a short message
2392	Returns a list of files that should be included in the repository .
2393	Initializes a repository
2394	Check if a remote repository is valid
2395	Clone a repository .
2396	Clone a branch .
2397	Clones a repository .
2398	Gets an array of lines grouped by the commit
2399	Gets the diff lines .
2400	Returns a reference by its full name .
2401	Returns an array of Branch objects .
2402	Returns an array of local branches
2403	Returns a list of remote branches .
2404	Returns the content of the file
2405	Returns mimetype
2406	Convert diff to array
2407	Parses the given text .
2408	Format a query .
2409	Renders column name .
2410	Create columns .
2411	Creates a new column object
2412	Creates a new Table instance .
2413	Get the sql for this query
2414	Boot the cacheable trait for the model .
2415	Store a cache key for a model name .
2416	Get cache keys
2417	Flush cache keys for a model .
2418	Forget all cache keys .
2419	Reset the cache config .
2420	Generate a unique key for the query .
2421	Cache query .
2422	Validate an HppRequest
2423	Validate HppResponse
2424	Set the auto settle flag
2425	Add returnTss flag
2426	Set the validateCardFlag flag .
2427	Set the DCC enable flag .
2428	Set card storage enable
2429	Set offer save card
2430	Add payerExists flag
2431	Add hpp version
2432	Generate default values
2433	Encode the data to base64 .
2434	Decode base64 encoded string
2435	Encode the request .
2436	Decode merchant data
2437	Get field config rules
2438	Unpack all deferred results .
2439	Resolve a deferred value
2440	Converts the cursor to a key
2441	Translates cursor to offset
2442	compile theme node compiler
2443	Creates JSON - RPC request data
2444	Get all sentences .
2445	Splits text into chunks .
2446	Detects the language of the given text
2447	Returns all language codes
2448	Get field defaults
2449	Cache a row
2450	Get cached row
2451	Check if an offset exists
2452	Get row by offset
2453	Array access .
2454	Array access .
2455	Returns the join field for the given table .
2456	Delete current model from database .
2457	Returns the class name for the given field name .
2458	Set a configuration value .
2459	Returns field factory
2460	Prepares and executes a query .
2461	Execute a callable in a transaction
2462	Begin a transaction .
2463	Check if data is valid
2464	Magic isset .
2465	Modify config values
2466	Delete current record
2467	Relate records .
2468	Unassociate two records .
2469	Unassociate two tables .
2470	Get a select instance .
2471	Returns the name of the value .
2472	List of quota limits .
2473	The metric rules .
2474	Output only . The destinations of the producer .
2475	Output only . The destination of the logger .
2476	List of advices .
2477	Endpoints .
2478	The list of log entries .
2479	The metrics .
2480	Field violations .
2481	The running operations .
2482	The view to create .
2483	The list of allowed permissions .
2484	The launch stage of the role .
2485	The list of destinations that match the customer .
2486	The list of supported extensions .
2487	The providers that match the request .
2488	The names of the characters requested .
2489	Optional . The names of the service .
2490	The bounding bounds .
2491	The role to create .
2492	List of subpages .
2493	List of key types that match the request .
2494	The list of recipients .
2495	The stack entries .
2496	The producer destinations .
2497	The designated consumer destinations .
2498	Required .
2499	List of registered bindings .
2500	The metric costs .
2501	List of pages .
2502	The action for the binding delta .
2503	Source files .
2504	The keys of the service account .
2505	The list of service accounts .
2506	The custom roles support level .
2507	Delta of the policy .
2508	List of replicas .
2509	The list of supported features .
2510	The list of properties .
2511	Violations .
2512	The private key type .
2513	Key algorithm .
2514	The notification details .
2515	Delta of the binding delta .
2516	The type of the public key .
2517	The list of roles .
2518	The system parameters .
2519	Get the full path to the cache file .
2520	Check if the given conditions are met
2521	Checks if a cache file exists
2522	Set data to cache .
2523	Get data from cache .
2524	Get or create a cache entry
2525	Checks if the given blog is installed .
2526	Installs Wordpress .
2527	Convert a multisite network .
2528	Install multisite database tables .
2529	Outputs the WordPress version .
2530	Get the checksums for a specific version .
2531	Updates blog .
2532	Get download URL .
2533	Get updates .
2534	Download a package .
2535	Handles PHP upgrade .
2536	Build a table
2537	Render the admin head
2538	Move the meta box after title .
2539	Get the post type
2540	Get the title
2541	Render the meta box .
2542	Setup the post meta box
2543	Get meta information
2544	Setup the file .
2545	Setup meta data
2546	Determine if the plugin is disabled .
2547	Creates a new property
2548	Get a child property .
2549	Get an option value
2550	Returns the current post ID
2551	Generate the HTML ID
2552	Generate a HTML name .
2553	Check if the current slug matches the slug .
2554	Prepare a value
2555	Determine if the tag is allowed by the given rules .
2556	Set an option
2557	Set a setting
2558	Setup default properties
2559	Setup options .
2560	Setup options slug .
2561	Setup options .
2562	Add attachments to the form .
2563	Save the attachment
2564	Check if the entry type is singleton .
2565	Get property meta value
2566	Format a property value
2567	Get property .
2568	Load a property value
2569	Factory method to create a papi instance .
2570	Get property option
2571	Determine if the current user can render this page .
2572	Render the row .
2573	Render hidden field .
2574	Render the label HTML
2575	Render the row html .
2576	Render the rules as JSON .
2577	Format the value .
2578	Decode a property .
2579	Get POST data
2580	Get pre - deep keys
2581	Prepare post data
2582	Prepare property data
2583	Santize string data
2584	Delete a cache entry
2585	Returns the name of the function
2586	Get a value
2587	Update an item
2588	Update the cache
2589	Get diff between two pages
2590	Add hidden meta box
2591	Loads a new post
2592	Redirects the user to the given location .
2593	Setup all entry types
2594	Rename an entry
2595	Get field slug .
2596	Get the source .
2597	Setup the source .
2598	Setup the model .
2599	Initialize admin interface
2600	Modify admin body classes
2601	Hooks into edit form .
2602	Get the current entry type
2603	Add the meta tags to the plugin row .
2604	Update front page .
2605	Query for WordPress links .
2606	Get the templates for an entry .
2607	Prepare the property value
2608	Save post properties
2609	Display metabox
2610	Save a post
2611	Overwrite post data
2612	Pre save callback
2613	Save meta boxes .
2614	Save a specific revision
2615	Save post properties
2616	Restore a post revision .
2617	Check if a post ID is valid
2618	Determine if the rule should display
2619	Display rules by relation .
2620	Get rule slug
2621	Prepare rules
2622	Determine if the current user is allowed to post type .
2623	Answers an array of classes for the body .
2624	Get all child pages
2625	Get custom labels
2626	Get the supported post type supports .
2627	Remove post type support .
2628	Remove meta boxes
2629	Setup hooks .
2630	Setup post types .
2631	Setup page templates
2632	Add mce buttons
2633	Remove MCE buttons
2634	Converts DB results to objects
2635	Load the property value .
2636	Prepare property list
2637	Prepare a property for JSON
2638	Remove rows from database
2639	Render JSON template .
2640	Render the repeater head .
2641	Render repeater rows .
2642	Register plugin types
2643	Get a setting value .
2644	Prepares the response
2645	Get the user s ID
2646	Get list of users
2647	Initialize the plugin .
2648	Load text domain
2649	Require core files
2650	Deactivate plugin .
2651	Is this list items?
2652	Prepare the properties .
2653	Get a specific attachment s ID .
2654	Get file meta value
2655	Update the field value
2656	Bind an identifier
2657	Call a closure .
2658	Get class prefix
2659	Is a singleton .
2660	Register a value for a given key .
2661	Remove an entry
2662	Override the labels
2663	Add page menu items
2664	Get post types menu
2665	Render papi page
2666	Autoload class
2667	Get all registered sidebars
2668	Get menu labels
2669	Parse arguments .
2670	Parse post type arguments
2671	Parse term arguments
2672	Get query arguments
2673	Get the results of this query .
2674	Add the help tabs to the screen .
2675	Add a box
2676	Call parent register method
2677	Convert properties to properties
2678	Get all body classes
2679	Get all boxes .
2680	Get a property
2681	Gets a list of box properties .
2682	Merge multiple boxes .
2683	Setup hooks .
2684	Tabular tab .
2685	Load a single value
2686	Prepares an array of links
2687	Update the value for a link
2688	Is the taxonomy allowed?
2689	Show the edit form
2690	Registers a post
2691	Prepare the meta fields
2692	Setup rest fields .
2693	Get the format args for the given associative array .
2694	Render a file .
2695	Get an option value
2696	Convert a property value
2697	Get the converted value
2698	Get deep value
2699	Get the value of a conditional rule
2700	Tests if the given rule is equal to the given value
2701	Tests if the given rule is not equal .
2702	Checks if a rule is greater than or equal
2703	Test whether a condition is not in a given rule .
2704	Whether a condition is like
2705	Get between values
2706	Test whether a condition is between the given value
2707	Test if a rule is not between values .
2708	Get sort option
2709	Get sort options
2710	Get the list of items .
2711	Sort values .
2712	Update a single value .
2713	Get the meta type value .
2714	Lists all available entry types .
2715	Render the tabs .
2716	Get the JSON id for a given key .
2717	Get a particular layout .
2718	Load a value from a repeater .
2719	Prepare the layout properties .
2720	Render the layout input .
2721	Render table row .
2722	Add taxonomy fields
2723	Prepare taxonomy types
2724	Setup taxonomies hooks .
2725	Generate ajax url
2726	Handle ajax requests
2727	Get the current entry type
2728	Get all posts
2729	Get property information
2730	Get properties
2731	Get rule result
2732	Get shortcode .
2733	Get terms
2734	Gets meta information for a taxonomy term .
2735	Rename a term .
2736	Setup post type columns .
2737	Handle post type column
2738	Make sure columns are sortable
2739	Before get_posts hook
2740	Restrict page types
2741	Format a meta value .
2742	Get taxonomy labels .
2743	Get all terms
2744	Get term value .
2745	Prepare the value
2746	Search for a given search term .
2747	Get historical data
2748	Get a single quote
2749	Returns the exchange rate .
2750	Returns exchange rates
2751	Fetches quotes from Yahoo Finance API
2752	Answers an array of attributes for the column .
2753	Renders a single row .
2754	Renders the appends .
2755	Get all images .
2756	set with params
2757	Set default values
2758	Returns the value of the given parameter .
2759	Make a group .
2760	Wrap the error content .
2761	Wraps a group .
2762	Adds class to options .
2763	Register Routes
2764	Register the assets routes
2765	Register authentication routes .
2766	Adds a process wrapper to the graph .
2767	Get processes by status .
2768	Builds out tree of processes
2769	Optimize the process .
2770	Count statuses
2771	Get result count
2772	Returns all dependencies of the given class
2773	Returns the dependency tree for the given class name .
2774	Output the given output .
2775	Output error output
2776	Initialize the console
2777	Get version
2778	Returns the file URL .
2779	Downloads the file .
2780	Selects the first part of the select2 input .
2781	Save data to a legacy file
2782	Save data to storage
2783	Loads the model .
2784	Load a legacy data
2785	Is the server accessible?
2786	Is selenium server?
2787	Returns the cloud service
2788	Guesses the default port for the given host and scheme .
2789	Detect cloud service by status .
2790	Build the process .
2791	Returns the excluded groups .
2792	Take a screenshot of the current page .
2793	Get snapshot URL .
2794	Instantiates an event subscriber
2795	Get log file path
2796	Quote an XPath attribute
2797	Optimizes the shortest distance of the tree
2798	Cast a value to a data type .
2799	Checks the process timeout .
2800	Resolve result .
2801	Returns the executors of the test .
2802	Setup the ci capabilities .
2803	Set custom configuration options
2804	Retrieves configuration values .
2805	Dequeued processes without delay
2806	Flushes the output of the process .
2807	Return the favorites for the given class .
2808	Count scenario summary
2809	Update summary table
2810	Move summaryTable to a node .
2811	Update buttons .
2812	Add a user s favorite
2813	Remove a user s favorites .
2814	Toggle a user s favorite
2815	Check if user is favorite .
2816	Get the favorited by the user .
2817	Returns an array of permissions for this model .
2818	Inserts the menus to the language files .
2819	Create header files
2820	Create migration file .
2821	Create events .
2822	Generate a file .
2823	Get stub path
2824	Check namespace
2825	Check table .
2826	On random redis
2827	on all redis
2828	connect to one server
2829	Select redis server
2830	Call a Redis command
2831	Set the current database
2832	Delete keys from Redis
2833	Set an item in the cache
2834	Checks if a key exists
2835	Get type of key
2836	expire by key
2837	Flush all items
2838	Execute all todos
2839	get database size
2840	Add a function to the exec list
2841	dispatch an event
2842	Adds the timing value
2843	Replace the config placeholder
2844	Merge the tags of an event .
2845	Dispatch memory usage .
2846	Dispatch request time
2847	Create an Event from a BaseConsoleEvent
2848	Match SRID value
2849	Parse geometry .
2850	Parse point .
2851	Match a coordinate value
2852	Match list of points
2853	Match point lists
2854	Parse multi polygon .
2855	Parse the current geometry collection .
2856	Match the given token against the lookahead token .
2857	Parse syntax error .
2858	Creates a collection of ResponseParts
2859	Returns the request time
2860	Creates the API client
2861	Executes a command
2862	Returns the redirect URL
2863	Check render options
2864	Renders a page .
2865	Renders a base64 encoded image
2866	Find documents by method
2867	Find elements within a specific element .
2868	Set an attribute of an element
2869	Send key event
2870	Selects an option for a page .
2871	Set debug mode
2872	Set proxy
2873	Network Traffic
2874	Gets all cookies
2875	Set cookie .
2876	Returns an array of errors
2877	Returns a message describing the errors encountered .
2878	Compiles a single node .
2879	Compiles a route variable node .
2880	Creates a Trie from a segment or segment .
2881	Flushes the text buffer .
2882	Reads a number .
2883	Reads a punctuation .
2884	Reads a quoted string .
2885	Reads a single character from the buffer .
2886	Reads a variable name .
2887	Adds a route to the collection .
2888	Get named route by name
2889	Creates a RootTrie node .
2890	Normalize HTTP header name .
2891	Throws an exception if the current token is not a token .
2892	Get current token .
2893	Returns the next token .
2894	If the current token type matches the given type and value
2895	Returns the next token .
2896	Adds a child to this node .
2897	Adds a child node
2898	Returns all children .
2899	Adds a literal child node
2900	Adds a child node to the route tree .
2901	Builds all routes .
2902	Register a route group .
2903	Creates a route builder for the given http methods
2904	Apply the group attributes to the route builder .
2905	Applies the group constraints to the route builder .
2906	Applies group middleware to the route builder .
2907	Apply group route templates
2908	Register rule factories .
2909	Returns an iterator for matching route segments .
2910	Builds the route
2911	set controller action
2912	set an attribute
2913	Set many attributes .
2914	Add many constraints .
2915	Add many middleware .
2916	Adds a middleware to the request .
2917	Parses punctuation tokens .
2918	Parse text node .
2919	Parses the given tokens
2920	Parses a variable .
2921	Parses a variable rule .
2922	Checks if this route matches the given segment value .
2923	Registers a new route .
2924	Map a route .
2925	Dispatch router .
2926	Compares the request method .
2927	Compares two routes .
2928	Compare uri with request uri
2929	Runs the given route
2930	Arrange method parameters .
2931	Replace uri .
2932	Regexp regular expression .
2933	Adds a route that will be applied to all routes .
2934	Define a route .
2935	Returns the URI for a named route .
2936	Prepares the request
2937	Get the URI for the request .
2938	Validates the API response .
2939	Validates the result of Bit .
2940	Validates the API response .
2941	Returns a provider by name .
2942	Sets the ETag header for the request .
2943	Returns the request details
2944	Format an array of details
2945	Get the details for an IP address .
2946	Set an element in the cache
2947	Remove elements from cache
2948	Make a POST request
2949	Render error HTML
2950	Registers a route group .
2951	Parse path .
2952	Check if path is a variable route
2953	Cache a variable route
2954	Set route map
2955	Get redirect url
2956	check middlewares
2957	Perform a dispatch
2958	Initialize connections
2959	Validates header .
2960	Get header by key
2961	Get last inserted id
2962	Get DI parameters
2963	Register singleton
2964	Get singleton
2965	Register an abstract class
2966	Get an instance of a class
2967	Returns an instance of the specified class
2968	Run class method
2969	Run the application
2970	Initialize the database
2971	Add a pipe
2972	Initialize Redis connections
2973	Subscribe to a channel .
2974	Subscribe to multiple channels
2975	Reset all variables
2976	Wrap preparing SQL statements
2977	Executes the query
2978	Bind parameters to PDOStatement
2979	Wrap table name with prefix
2980	Wrap a row in a string
2981	Constructor for condition
2982	Returns an array of build attributes .
2983	Restores the build attributes .
2984	Creates a sub - query builder
2985	Set columns to select
2986	Set where conditions
2987	Adds a where condition to the query .
2988	Where in
2989	Where between .
2990	Appends WHERE condition
2991	Add WHERE brackets
2992	Where Exists
2993	Where in statement
2994	Group By
2995	Set having clause .
2996	Set or HAVING condition .
2997	Adds ORDER BY clause
2998	Join two tables
2999	Generate from sub table
3000	Paginate results
3001	Get all results
3002	Returns the first row of current query
3003	Get all values for a field
3004	Performs an SQL query .
3005	Prepares an SQL statement .
3006	Start a transaction
3007	Handles an exception .
3008	Generate a new ID .
3009	Generate a random ID .
3010	Generate random id
3011	Normalize a DSN
3012	Return a new DQL query builder instance .
3013	Executes an expression .
3014	Begin a transaction
3015	Commits a transaction
3016	Rollback a transaction
3017	Returns the last inserted ID .
3018	Reset all arguments
3019	Consume SQL code
3020	Escapes a value for use in a query
3021	Renders the expression
3022	Get debug query
3023	Executes the query and returns all results .
3024	Get single row
3025	Returns the first row of the result set
3026	Set the table
3027	Set where conditions
3028	Render a single condition .
3029	Add group criteria
3030	Set multiple values at once
3031	Adds an option to the options list .
3032	Set the order
3033	Set query mode .
3034	Sets the limit for this template
3035	Parse a string .
3036	Fetch matches regex
3037	Creates a message
3038	Checks if a string starts with a given string
3039	Parses the value of env variables .
3040	Checks if a variable has a parameter expansion
3041	Fetch the parameter expansion for a variable .
3042	Fetch parameter expansion symbol
3043	Split the variable default
3044	Parse a variable .
3045	Parse a variable default value
3046	Check if a variable exists
3047	Get a variable
3048	Parse a key .
3049	Parse the content .
3050	Parse raw content .
3051	Parse a single line
3052	Parse an export line
3053	Parse the key = value pair
3054	Get content by key name
3055	Start a new task
3056	Starts a workflow
3057	Find a workflow
3058	Get the timestamps in the buffer .
3059	Get class properties
3060	Configure the sitemap manager .
3061	Fix the sitemap configuration .
3062	Adds a source for a group .
3063	Add block services
3064	Returns the breadcrumb menu .
3065	Returns an array of all available fonts
3066	Get icons map
3067	Returns the CSS for all fonts
3068	Hash and encrypt a password
3069	Upgrade from version 1
3070	Execute the init command
3071	Write SMTP credentials
3072	Get config array
3073	Checks if current uri matches current uri .
3074	Register artisan commands
3075	Find all templates
3076	Finds all templates in a bundle .
3077	Execute a command .
3078	Returns the substring between two strings
3079	Sanitize a string
3080	Replace the first occurence of this string
3081	Replace the last substring of this string
3082	Returns a possessive .
3083	Splits the string by a delimiter
3084	Finds the first occurrence of a given string .
3085	Encrypts the hash
3086	Decrypts the response
3087	Encrypts the given text with the given key
3088	Decrypt a string
3089	Encrypts the hash
3090	Decrypts the response .
3091	Encrypts the payload
3092	Add a range
3093	Adds a modifier
3094	Adds a range of pages
3095	Adds a raw source .
3096	Adds a file source .
3097	Adds files from iterator .
3098	Unserialize the given properties
3099	Set optional constructor arguments
3100	Creates an exception for invalid value
3101	Creates an exception for invalid property
3102	Unserialize from properties
3103	Get config path
3104	Returns the application namespace .
3105	Loads the configuration .
3106	Creates a new master node .
3107	Returns the native balance .
3108	Returns the native balance .
3109	Get custom asset balance value
3110	Get custom asset balance
3111	Returns the balanceops for an asset
3112	Calculates the entropy checksum of the entropy bytes .
3113	Converts a bit string into a hexadecimal representation .
3114	Converts a mnemonic to an entropy value .
3115	Authorize a trustline .
3116	Revoke a trustline .
3117	Convert this object to an Xdrator representation .
3118	Asks an opaque variable
3119	Convert an optional value to a binary string .
3120	Returns unique bucket hashes
3121	Check if account exists
3122	Set whether this request is required
3123	Sets whether or not this request is revocable
3124	Returns the checksum of the public key
3125	Extract an opaque fixed string .
3126	Parse raw data
3127	Signs the transaction
3128	Submit a transaction
3129	Builds a patch object from a text string .
3130	Converts an array of patches to text .
3131	Add context to the text
3132	Creates a deep copy of an array of patches
3133	Get bitap score .
3134	Gets alphabet for a pattern
3135	Get the HTML of all changes
3136	Convert diff to string
3137	Extract diffs from text
3138	Calculate the levenshtein distance
3139	Computes the difference between two strings .
3140	Evaluate diff between two strings
3141	Protect two strings
3142	Find the common prefix
3143	Find the common suffix
3144	Find the longest overlapping between two strings
3145	Perform a partial match
3146	Perform the partial match
3147	Converts two strings to characters .
3148	Get the addresses for the given notification .
3149	Get Laravel version
3150	Register the Pug compiler .
3151	Get plugin config .
3152	Initialize class instance .
3153	Get pug .
3154	Get the cache path .
3155	Get an option value .
3156	Check if a path is expired
3157	Extracts the path from the request .
3158	Return the Client
3159	Get a B2BFamily instance .
3160	Returns a hash string
3161	Resolves a file path .
3162	Display a compiled file .
3163	Extract options from extensions .
3164	Remove an option
3165	Reset all global variables
3166	Returns a renderer
3167	Add a new filter .
3168	Add a keyword .
3169	Implements the cache directory .
3170	Run the application .
3171	Get available methods
3172	List available methods
3173	Answers an array of errors for the given record object .
3174	Returns a list of meta tags
3175	Marks list items as duplicated
3176	Check for duplicates
3177	Remove empty attributes from list
3178	Process a single record
3179	Handle all releases .
3180	Returns the elapsed time
3181	Read all commands
3182	Convert arguments to string
3183	Get arguments and validate them
3184	Throws exception if command is not supported
3185	Register an autoloader
3186	Unregisters the SPL autoloader
3187	Returns the path to the redisk library
3188	Get connections by key name
3189	Get a connection by channel name .
3190	Get channels by connection
3191	Get a configuration value
3192	Set a configuration value
3193	Throws exception if transaction is not supported
3194	Creates a new queue
3195	Delete a queue
3196	Counts the number of items in the queue
3197	Adds a message to the queue
3198	Receive messages from queue
3199	Deletes a message
3200	Get the total elapsed time
3201	Set data to hash
3202	Array access
3203	Increments a field value
3204	Remove a field from the cache
3205	Write data to cache
3206	Subscribe to a channel .
3207	Publish a message
3208	Add a message to buffer
3209	Throws exception if Redis is not supported
3210	Catch unserialize notice
3211	Add a queue
3212	Remove a queue
3213	Returns an array of queues
3214	Change the status of an item
3215	Unwatch the stream
3216	Add a command to the collection
3217	Create a new post
3218	List of posts
3219	Creates a new logger
3220	Add a value to the set
3221	Get set length by score
3222	Get values by score
3223	Remove items by score
3224	Increments a score in the set .
3225	Get sorted set by rank
3226	Remove items by rank
3227	Get the rank of a given value
3228	Aggregate two sets
3229	Intersects two sets using the Redisk algorithm .
3230	Get result as array
3231	Populate set from array
3232	Set the name
3233	Get a connection by its key
3234	Returns all connections
3235	Set the connection instance
3236	Subscribe to a channel
3237	Gets a configuration object for this transaction
3238	Set key distributor
3239	Returns the serializer
3240	Get command instance
3241	Returns the lower case of a command name
3242	Executes the command .
3243	Add a command to the pipeline
3244	Write the command to the connection .
3245	Set callback function
3246	Transform multi - bulk command
3247	Append a value to the cache
3248	Prepend a value to the cache
3249	Truncate the list
3250	Set an item value
3251	Inserts a value after a given reference
3252	Inserts a value before a given value
3253	Inserts a value in the list
3254	Remove a value from the cache
3255	Shift an item from the list
3256	Shifts from redis blocking
3257	Pop an item from the list
3258	Retrieve an item from the redis list
3259	Populate the cache from an array .
3260	Load data by id
3261	Save data to the cache
3262	Remove a record from the store
3263	Remove items from the cache
3264	Set the cache directives
3265	Get all sets not matching the given tags .
3266	Returns the metadata for a given ID .
3267	Collect all expired tags
3268	Add a value to the set
3269	Remove a value from the cache
3270	Move key to a set
3271	Compute the intersection of this set with another set .
3272	Merges two sets .
3273	Compare two sets
3274	Returns an instance of Rediska
3275	Set a value in the cache
3276	Set and expire a value
3277	Set a bit
3278	Retrieves or sets an object value
3279	Renders a user s followers list .
3280	Renders the following list .
3281	Follow a user
3282	Move this object to the database .
3283	Sets the number of seconds to expire .
3284	Get rediska instance
3285	Set the stream mode
3286	Add a Rediska instance
3287	Get all instances
3288	Creates a Rediska instance from an options array .
3289	Increment the counter
3290	Reset rediska
3291	Get the bucket name .
3292	Set multi increment transaction
3293	Set the numeral part of the transaction execute
3294	Creates a new socket connection .
3295	Returns the read buffer
3296	Read data from Redis server
3297	Read a single line from the server .
3298	Set the read timeout
3299	Returns the stream context
3300	Read data from the socket .
3301	Validate a nonce .
3302	Declare and bind a queue
3303	Ack message
3304	Nacks a message .
3305	Returns the properties of the message .
3306	Start the daemon .
3307	Closes the daemon .
3308	Creates a new exception for the given exception
3309	Builds the handler based on the queue consumer
3310	Handles a sync message
3311	Get AMQP driver
3312	Rejects a message
3313	Closes the connection .
3314	Consume a message .
3315	Replace the model name .
3316	Qualify a class name .
3317	Process action .
3318	Create a new record
3319	Convert array to JsonResponse
3320	Edit a resource
3321	Remove a resource from the database .
3322	Vote for on an attribute
3323	Renders the document .
3324	Reads a string from the current position .
3325	Get all achievements for a game
3326	Closes the socket .
3327	Receive a single packet
3328	Send a data packet
3329	Get a reply from the master server
3330	Send a command to the server
3331	Retrieves the challenge from the server
3332	Sends a command to the server
3333	Connects to the server
3334	Get a list of all available servers
3335	Fetches the internal schema for this item
3336	Converts a communityID to SteamID
3337	Converts a steam ID to a community ID .
3338	Resolve a vanity URL
3339	Fetches the friends of the authenticated user .
3340	Gets all the games of this player
3341	Gets the user s groups
3342	Returns the Steam ID for this custom URL
3343	Get the recent playtime for an app
3344	Get the total playtime for an app
3345	Fetch data from the API
3346	Update IP address
3347	Initializes the socket
3348	Authorize and authenticate the user
3349	Connect to the server
3350	Creates a new object .
3351	Get cached instance .
3352	Check if an id is found
3353	Create cache instance .
3354	Retrieve the cache id s
3355	Init the goldSS socket
3356	Performs a CONCON authentication .
3357	Closes the connection
3358	Receive data from socket
3359	Selects connections .
3360	Sends data to the socket
3361	Get all news for app
3362	Get array of classes that are equipped to be shipped
3363	Returns the number of members in the result set .
3364	Get members .
3365	Fetch a single page of members
3366	Perform the actual fetch
3367	Get GameItemSchema instance .
3368	Fetch the items for this player
3369	Get list of bots that are equipped
3370	Gets an array of goldenWizard objects
3371	Set API key
3372	Send request to Steam API
3373	Send a data packet
3374	Get the players
3375	Handles the response for a request .
3376	Update the ping counter
3377	Update the players status
3378	Add information to this player .
3379	Get leaderboard by id
3380	Returns the leaderboards for the given game name .
3381	Load leaderboards for a game
3382	Loads the game leader entry for the steam id .
3383	Get an array of leaderboard entries
3384	Load data from SteamConditions .
3385	Load data for a steam id
3386	Parses the entries from the XML response .
3387	Factory method to create a new SteamGame .
3388	Check if an application is up to date
3389	Get current player count
3390	Get user stats
3391	Display a list of work orders .
3392	Store a newly created event .
3393	Display an event .
3394	Update the specified event .
3395	Remove the specified event from storage .
3396	Display a work order .
3397	Show the form for editing a work order .
3398	Updates a WorkOrder .
3399	Returns a copy of an item
3400	Adds a new part to the work order .
3401	Updates stock data
3402	Put parts into the inventory .
3403	Display the work request .
3404	Show the edit request .
3405	Update the work request in storage .
3406	Remove the work request .
3407	Scope for Location .
3408	Create a new report .
3409	Show create form .
3410	Store action .
3411	Display the work order .
3412	Show the form for editing an attachment .
3413	Updates an attachment .
3414	Destroys an attachment .
3415	Form for rendering a report .
3416	Answers the icon for the notification type .
3417	View Stock Movements .
3418	Display the movement .
3419	Rollback a stock .
3420	Get revised status attribute
3421	Get revised priority attribute
3422	Close all sessions .
3423	Returns true if the user is logged in
3424	Get started_at label
3425	Get completed_at label
3426	Mark the subscription as completed .
3427	Renders a table containing the status table .
3428	Form view generator .
3429	Display the list of priorities .
3430	Stores items in the priority queue .
3431	Show the edit priority form .
3432	Update a priority .
3433	Scope by stock .
3434	Scope by SKU .
3435	Get current stock
3436	Get the revised metric name .
3437	Get the operator
3438	Scope the query to sort .
3439	Get file path
3440	Display listing status .
3441	Store a status .
3442	Show the form for editing a status .
3443	Update the status .
3444	Show the form for creating a new variant .
3445	Store a new variant
3446	Show form for creating a new work order
3447	Store a report .
3448	View for a table .
3449	Get table which is assigned to a user
3450	View table sessions
3451	Form for displaying a WorkOrder .
3452	Show comment form
3453	Handle POST request .
3454	Renders the table for the asset .
3455	Form for editing assets .
3456	Table for displaying items .
3457	Table stock presenter .
3458	Form for displaying a Inventory .
3459	Navbar to navbar .
3460	Upload files .
3461	Update an attachment .
3462	View table for metrics .
3463	Table for history .
3464	Upload an image .
3465	Display an asset .
3466	Update an attachment image .
3467	Display metrics .
3468	Store a metric .
3469	Show the form for editing the metric .
3470	Show assets .
3471	Store a newly created asset .
3472	Show the form for editing an asset .
3473	Update an existing asset .
3474	Scope by id .
3475	Get the response .
3476	Get an input value
3477	Get select hierarchy
3478	Recursively converts a node into an array .
3479	Boot the view composers .
3480	Delete the attachment .
3481	Display stock page .
3482	Show stock form .
3483	Store item .
3484	Display Stock .
3485	Edit stock form .
3486	Updates the stock for an item .
3487	Delete an item from the inventory .
3488	Display a single asset .
3489	Show the metric form .
3490	Store a new meter .
3491	Display the meter .
3492	Show the edit meter .
3493	Update the meter .
3494	Remove the meter .
3495	Store a newly created work order .
3496	Update the work order notifications .
3497	Format the started_at
3498	Format completed_at
3499	Display the list of work orders .
3500	Form for editing a comment .
3501	Get amount of hours
3502	Format the start date
3503	Format the end date
3504	Get end time as formatted string
3505	Retreive event frequency
3506	Get frequency of event
3507	Get by days
3508	View Event Tags .
3509	Store a newly created InventoryStock .
3510	Update the stock .
3511	Remove the stock .
3512	Return the table for the given work order .
3513	Generate a form for the work order .
3514	Attempt to authenticate the user .
3515	Handles user authentication .
3516	Handles the user who is authenticated .
3517	Triggered when a stock is deleted .
3518	Restore the Inventory movement .
3519	View table for all priorities .
3520	Form View Generator .
3521	Renders a table for a list of inventory items .
3522	Form for taking place orders .
3523	Form for put action .
3524	Remove the specified inventory item .
3525	Create a new flash message .
3526	Create a new report .
3527	Store a report .
3528	Display a listing of events .
3529	Store a new event
3530	Display a specific eventable .
3531	Update the specified event
3532	Remove the specified event from storage .
3533	Scope for categories .
3534	Form .
3535	Upload a manual asset .
3536	Display an asset .
3537	Update the manual .
3538	Attach a work order to an asset .
3539	Detach a work order from an asset .
3540	Store a newly created WorkRequest in storage .
3541	Destroy the given work request .
3542	Display a list of Stock objects .
3543	Return the take part view .
3544	Post take action .
3545	Retrieves the put view for a work order .
3546	Post PATCH request .
3547	Display a listing of work requests .
3548	Show the edit request form .
3549	Update a WorkRequest
3550	Show the form for creating a new category .
3551	Store a newly created category in storage .
3552	Show the form for editing the category .
3553	Update the specified category in storage .
3554	Remove the specified record from the database .
3555	Generate a table for the work order .
3556	Renders a table for the work order .
3557	Triggered when a model is deleted .
3558	Restore all stock values .
3559	Display the inventory page .
3560	Store a new item .
3561	Display the inventory item .
3562	Show the form for editing an item .
3563	Renders a table for inventory items .
3564	Renders the inventory movement .
3565	Form rendering for InventoryStock .
3566	Navbar navbar .
3567	Generate a table for the given work order .
3568	Table for inventory items .
3569	Return the navbar for the parts added .
3570	Display a listing of the sessions .
3571	Start the work order .
3572	End a work order .
3573	Get change attribute
3574	Store a new note .
3575	Display a note .
3576	Update a note .
3577	Remove the given note .
3578	Get last movement attribute .
3579	Get last movement by attribute .
3580	Get quantity metric .
3581	Retrieve a button for a piece of work .
3582	Retrieve the put - back button for a work order .
3583	End the session .
3584	Table for displaying work requests .
3585	Form for editing a WorkRequest .
3586	Store the workers in the database .
3587	Remove the worker from the assignment .
3588	Render datalist list .
3589	Render a select option .
3590	Get the appendage for the given method .
3591	Render component .
3592	Get component data .
3593	Register the blade methods .
3594	Open a model .
3595	Format the label .
3596	Create reset button
3597	Create submit input
3598	Get request parameter
3599	Create a link to an asset .
3600	Create a link to a named route .
3601	Format a listing element .
3602	Generate HTML attributes .
3603	Register the HtmlBuilder instance .
3604	Register the form builder instance .
3605	Adds a search field .
3606	Create datetime input .
3607	Create a file input field .
3608	Remove XML first line from string
3609	Loads the translations .
3610	Parses a locale file .
3611	Get patterns for a word .
3612	Unify locale .
3613	Tokenize the string
3614	Runs the input .
3615	Set options object
3616	Add a dictionary to the registry
3617	Returns the hyphenation patterns for the given word .
3618	Sets the filters .
3619	Add a filter
3620	Sets the tokenizers .
3621	Add a tokenizer .
3622	Create options object from file .
3623	Get text .
3624	Get the pattern
3625	Set the options
3626	Returns the options object
3627	Add a dictionary
3628	Adds a new filter
3629	Adds a tokenizer .
3630	Returns tokenizers .
3631	Get dictionary
3632	Get filters .
3633	Hyphenation .
3634	Get hyphenation pattern
3635	Returns the patterns for the given word .
3636	Set default home path
3637	Get default home path
3638	Set home path
3639	Factory method to create a Hyphenator instance .
3640	Autoload class
3641	Replace an existing token .
3642	Get a token by its key
3643	Returns the combined pattern
3644	Get filter by key
3645	Filters the given tokens .
3646	Fetch an access token from an authorization code .
3647	Migrate orders .
3648	Migrate an order .
3649	Migrate shipping values
3650	Migrate order totals
3651	Returns the list of products that have a purchase .
3652	Create a default page
3653	Make a new payment
3654	Get gateway data
3655	Creates a new payment for the given gateway
3656	Completes the order
3657	Check if an order can be placed
3658	Get the localized name of this country .
3659	Set the payment method
3660	Get selected payment method
3661	Send a confirmation email
3662	Send an admin notification
3663	Send the cancel notification
3664	Builds a URL for a Buyable object
3665	Redirect to the current page
3666	Index action .
3667	Display the debug page
3668	Get the filter for this record
3669	Save form data
3670	Updates the user s details
3671	Get a modifier for this order
3672	Get the unit price
3673	Calculate the total of the item
3674	Returns an array of unique data for this model .
3675	Checks if the order is a cart .
3676	Retrieves a product variant
3677	Returns the address as a string
3678	Get the address for this user
3679	Form for displaying the cart
3680	Gets the value of the weight
3681	Get the weight of this item
3682	Sum of items in the cart
3683	Get the subtotal of the items
3684	Pre - publish the image
3685	Answers the viewer object for the current action
3686	Get the product associated with this article .
3687	Add additional fields to the CMS
3688	Returns a variant matching the given attributes .
3689	Generate variants based on an attribute type
3690	After delete event
3691	Get a component by its type .
3692	Get all form fields
3693	Validate the given data
3694	Returns the data of this component
3695	Set data for all components
3696	Get dependant data
3697	Get current order
3698	Set current cart status
3699	Find the current order
3700	Adds a Buyable item to the order
3701	Removes an item from the order
3702	Removes an order item from the current order
3703	Updates the quantity of a BuyableItem .
3704	Updates an order item quantity
3705	Find or create a BuyableItem
3706	Get the correct item for a Buyable
3707	Archive order id
3708	Get the incoming value
3709	Prepares a price field for display .
3710	Find an image by filename
3711	Set paragraph content
3712	Answers a list of supported country codes .
3713	Returns a single country
3714	Converts a country code to its name .
3715	Gets the current shopping cart
3716	Convert an array to a list of values
3717	Gets a dropdown field for this product
3718	Get all products that are shown in this category
3719	Get all child categories of this category
3720	Gets the child categories of this category .
3721	Get the groups menu
3722	Get nested title
3723	Generate the edit form
3724	Display an order
3725	Returns the next step
3726	Answers a list of models that are in the list .
3727	Get the edit form
3728	Get subset of fields
3729	Modify the subtotal
3730	Set up steps .
3731	Redirect to the next step
3732	Answers true if the current action is the current step .
3733	Get the position of an incoming action .
3734	Find the link to the current page
3735	Returns a list of products
3736	Trims out cents .
3737	Gets the CMS fields for this page .
3738	Answers an array of options for the product .
3739	Get all options that are no parent .
3740	Answers an array of ID IDs for the product .
3741	Get the price for this order .
3742	Answers the image for the product .
3743	Submit action handler
3744	Process the payment form
3745	Cancel the order
3746	Returns the CCFields for the given gateways
3747	Store the order in the order history .
3748	Returns the order IDs from the session .
3749	Get order by ID
3750	Get the actions form for this order
3751	Creates a new member
3752	Get a member by its unique identifier
3753	After the Member is logged in
3754	Get all obsolete orders
3755	Answers a hidden field for the quantity link .
3756	Get the list of existing address fields
3757	Returns the CMS fields for the order
3758	Overrides the default search context
3759	Answers a list of components for the order .
3760	Get the order total
3761	Returns the modifier for the order
3762	Get the total outstanding
3763	Get the link for this order
3764	Whether this member can be paid
3765	Whether the current user can delete a permission
3766	Check if this member can be viewed
3767	Gets the first name
3768	Get billing address
3769	Generate a unique reference for this order
3770	Checks if the cart has changed and sets the current locale
3771	Removes all related items
3772	Provides the i18n entities
3773	Renders the field
3774	Get editable items
3775	Find account link .
3776	Get order link
3777	Browse community packages .
3778	Lists installed packages .
3779	Gets the path for a package .
3780	Update packages .
3781	Uninstalls a package .
3782	Get Composer instance .
3783	Get the list of community packages .
3784	Get the Composer index .
3785	Display a list of packages .
3786	Get a package by short identifier .
3787	Get installed packages .
3788	Get an installed package by its name .
3789	Get the package name and version .
3790	Get the composer json path .
3791	Creates a default composer . json file .
3792	Get the raw git version .
3793	Guesses the version constraint to use .
3794	Get the path of the composer . json file .
3795	Sets the given DataObject to this instance .
3796	Load custom config
3797	Remove all queued jobs
3798	Process all expired jobs
3799	Enqueues a job
3800	Copies the given job data to the given job descriptor .
3801	Get the next pending job
3802	Check job health
3803	Check default jobs
3804	Restart a stalled job
3805	Initialise a new job
3806	Checks if the logged in user has at least a time limit .
3807	Returns true if the current memory limit is too high .
3808	Parse memory
3809	Get a filter for the list of queued jobs
3810	Run a queue
3811	Process a job queue
3812	Queue a task
3813	Logs the status of the given descriptor
3814	List all jobs
3815	Refresh the descriptor
3816	Check if the current job is healthy .
3817	Pause this job
3818	Resume this job
3819	Activate job on queue
3820	Get the cache directory
3821	Deletes the current job
3822	Get the messages for this job .
3823	Get last message
3824	Returns the string representation of the job type
3825	Answers an array of job types .
3826	Initializes the sitemap
3827	Prepare the sitemap
3828	Finalize this job
3829	Starts the process of the given queue
3830	Handle an action
3831	Get the title for this publish item
3832	Set up the tree
3833	Process the next page
3834	Get the queue
3835	Cast model to array
3836	Displays the console
3837	Save the source map
3838	Write data to shared memory
3839	Read data from shared memory
3840	Lists all sidebars .
3841	Lists all widgets in a sidebar .
3842	Adds a widget .
3843	Updates a sidebar widget .
3844	Moves a widget .
3845	Deactivates a widget .
3846	Deletes a widget .
3847	Reset WordPress settings .
3848	Validate sidebar id .
3849	Validate a sidebar widget .
3850	Get widget data
3851	Move a sidebar widget .
3852	Get widget object
3853	Sanitize widget options
3854	Returns a random integer
3855	Get random string
3856	Encode a string
3857	Decode a string
3858	Add a path for a generator
3859	Removes a generator path .
3860	Get a generator instance .
3861	Loads all generated generators .
3862	Display the form as a row
3863	Returns a read - only element .
3864	Opens a form .
3865	Adds a prefix to the prefix .
3866	Set this element s suffix .
3867	Assemble addons .
3868	Set size class .
3869	Unscrub message arguments
3870	Change the client temperature
3871	Get a set of nodes
3872	Returns a list of properties of a session
3873	Evaluate the given path
3874	Write to cache
3875	Returns the browser type
3876	Returns the aperture value .
3877	Returns the author name .
3878	Returns the message headline .
3879	Returns the credit amount .
3880	Returns the source .
3881	Returns the title of the job .
3882	Returns the ISO ISO code .
3883	Returns focus distance .
3884	Returns the width of the frame .
3885	Returns image height .
3886	Returns the title of the message .
3887	Retrieve the caption
3888	Returns the copyright image .
3889	Returns keywords .
3890	Returns the camera .
3891	Returns the horizontal resolution .
3892	Returns the vertical resolution of the frame .
3893	Returns the software associated with this request .
3894	Returns the font length .
3895	Returns the creation date .
3896	Returns the color space .
3897	Returns the mime type .
3898	Returns the file size
3899	Returns the orientation of the frame .
3900	Returns the IP address of the device .
3901	Extracts the coordinate from the given components .
3902	Set executable path
3903	Returns the path to the tool executable
3904	Get the output from the exifool binary
3905	Hydrate an object .
3906	Extracts coordinates from coordinates .
3907	Returns mapper .
3908	Returns hydrator .
3909	Set entity options
3910	Add required section
3911	Get iptc data
3912	Returns an adapter for the given type
3913	Generate table prefix
3914	Normalize config array
3915	Translate list items .
3916	Create a new static cache build
3917	Process all URLs
3918	Collects changes for this site .
3919	Flush the changes to the cache
3920	Checks if module extensions are removed
3921	Filters extensions by module path
3922	Returns all active module blocks
3923	Returns module settings
3924	Checks if metadata version is supported
3925	Check if php file exists
3926	Checks module version
3927	Checks extended classes
3928	Check module blocks
3929	Checks module settings
3930	Checks module templates
3931	Check module controller
3932	Check module files
3933	Checks module events
3934	Parse module Ids
3935	Parse shop config
3936	Returns list of available module ids
3937	Check if shop is enabled
3938	Returns active module
3939	Returns module cache object
3940	Returns module installer object
3941	Fixes a module
3942	Removes extension from module list .
3943	Add template files to config
3944	Adds module files to config
3945	Adds module events to config
3946	Add module extensions to config
3947	Add new module version
3948	Computes the difference between two arrays .
3949	Add module settings
3950	Update module controllers
3951	Add extensions to given module
3952	Returns list of installed packages
3953	Renders module template
3954	Blues the oXML block
3955	Returns an HTTP instance .
3956	Get an available http transport .
3957	Returns an array of http transport names
3958	Sets the CA options for the curl .
3959	Returns a Response object for the given content .
3960	Is allowed redirects
3961	Make an OPTIONS request .
3962	Make HEAD request
3963	Make a TRACE request
3964	Make a PATCH request .
3965	Checks if the given path matches the given glob expression
3966	Get an extra parameter value by key .
3967	Returns an array of global filters
3968	Activates the plugin
3969	Checks if the given path matches any of glob expressions
3970	Checks if a path matches a glob expression
3971	Returns the source directory for the package .
3972	Creates an installer for the given package .
3973	Install the project
3974	Copies package to given path
3975	Copy shop source from shop source to target package .
3976	Copies configuration file for target source .
3977	Copies all setup files to the package path
3978	Checks if config file is not configured .
3979	Copies files from shop source to installation .
3980	Get filtered files .
3981	Returns the absolute file path from the shop source .
3982	Install a package
3983	Copy a package
3984	Forms the source path .
3985	Nested FileSystem structure
3986	Get a flat file list iterator
3987	Copy directory .
3988	Copy file from glob to destination
3989	Generates models .
3990	Recursively traverse an array of classes
3991	Convert schema to JSON - LD array .
3992	Adds breadcrumbs list
3993	Renders all JSON models .
3994	Renders HTML by given view
3995	Generate the inline HTML
3996	Resolve path .
3997	Determine if the expected values are equal .
3998	Checks if an array exists .
3999	Asserts that the given HTTP status code is equal .
4000	Assert the content of the given type .
4001	Asserts that the response is JSON .
4002	Assert that the JSON API is valid .
4003	Assert that a document is fetched .
4004	Assert that the given content is fetched .
4005	Assert that data is fetched in JSON .
4006	Assert that at least one document is fetched .
4007	Assert that at least one document is fetched .
4008	Asserts that a resource was created .
4009	Asserts that the HTTP body is not empty .
4010	Asserts that exact meta data does not exist .
4011	Asserts that an error status is set .
4012	Asserts that a JSON API response contains an error .
4013	Asserts that the response has errors .
4014	Get the document
4015	Sets the expected type .
4016	Assert that the current response was fetched .
4017	Asserts that a record is updated .
4018	Assert that the content is deleted .
4019	Assert that the document is included .
4020	Asserts that the document contains the given identifier .
4021	Assert meta .
4022	Asserts that the document s meta .
4023	Asserts that two links are exact .
4024	Assert that the response has exact errors .
4025	Asserts that a document is a resource .
4026	Asserts that the document is an identifier .
4027	Asserts that two documents are exact .
4028	Asserts that a document is not exact .
4029	Asserts that the given array is a subset of the document .
4030	Asserts that a document is exactly exact in a list .
4031	Asserts that a set of elements in a document is in an array .
4032	Asserts that an array of values in an array are in an array .
4033	Asserts that an array of identifiers are in a list .
4034	Asserts that an array of identifiers are in a document .
4035	Asserts that a list contains a resource .
4036	Asserts that a set of hashes in an array contains hashes .
4037	Asserts that two documents contain at once .
4038	Asserts that the contents of an array contains hashes .
4039	Asserts that a document is exact .
4040	Asserts that the document contains an error .
4041	Asserts that a document contains an error .
4042	Creates instance from string
4043	Casts the given document .
4044	Creates a new instance from a JSON string .
4045	Parses a JSON string .
4046	Get a value from the document .
4047	Determine if the document exists .
4048	Asserts that an array of members exist .
4049	Asserts that the collection does not exist .
4050	Check if two values are exact .
4051	Checks if two arrays are subset .
4052	Is resource identifier
4053	Sort an array .
4054	Checks if the given value is identifiable
4055	Send the command .
4056	Asks a user .
4057	Reply to a user
4058	Set the allowed types allowed
4059	Writes messages to buffer
4060	Write a message to debug mode .
4061	Adds a message to the output buffer .
4062	Get message count
4063	Extract variables from a single line .
4064	Get variables from a multi - line array
4065	Validate vars and docblock arrays
4066	Checks if the collection contains all values
4067	Aggregates items in the collection
4068	Merge two arrays
4069	Convert to array
4070	Get the keys
4071	Combine this iterator into a ZipIterator .
4072	Get the values of the collection .
4073	Reduce the elements to a single value
4074	Convert a set of keys to a key .
4075	Groups the values by a given strategy .
4076	Reduce an iterable .
4077	Returns a Reduction object .
4078	Dumps the current settings .
4079	Get extra key
4080	Escape a namespace prefix .
4081	Parses a compressed IRI .
4082	Gets term context from field type .
4083	Persist the cache if needed .
4084	Get the content for an entity
4085	Normalize field items .
4086	Execute a backend .
4087	Creates a translated instance for the given field item
4088	Get the URI for an entity .
4089	Returns the typed data ids for the given types .
4090	Build a cache backend
4091	Fetch an item from the cache .
4092	Run a function and return the result
4093	Output an error line
4094	Asks a question
4095	Returns the last inserted id
4096	Create a new seed .
4097	Overrides values .
4098	Inserts a new record
4099	Extracts the primary key from the table factory .
4100	Set the user as the specified user .
4101	Copy stubs .
4102	Configures the given files .
4103	Serialize the additional data .
4104	Determine if the swwatch type is supported
4105	Loads the watch type for an entity type .
4106	Load database seeders
4107	Prepare the database seeder name .
4108	Finds an Attachettcher by optionId and StoreId .
4109	Returns the entity attribute with the passed attribute id and attribute set .
4110	Returns the attribute option with the passed id and value .
4111	Returns the attribute option order by attribute id .
4112	Creates the database seeders folder
4113	Create database seeder file
4114	Initialize an attribute option with the passed attributes and returns an instance .
4115	Setup DB transaction .
4116	Loads a catalog attribute by its ID .
4117	Set node path
4118	Adds parameters .
4119	Send the request .
4120	Execute menu handler
4121	Inject GET params
4122	Returns the entity with the passed attribute code .
4123	Takes the serialized data and merges them into the registry .
4124	Pre - load an attribute s ID .
4125	Publish records .
4126	Assert that the response contains the given content .
4127	Returns the json decoded response body .
4128	Assert that the response contains the given structure .
4129	Initialize the environment
4130	Get Drupal root .
4131	Get the environment file path .
4132	Read the environment file .
4133	Publish all records
4134	Loads all database seeder classes
4135	Returns the entity type
4136	Returns the entity type id .
4137	Call a remote method .
4138	Prepares the URI
4139	Accepts a distributed trace payload
4140	End a transaction
4141	Set application name
4142	Set user attributes
4143	Start a new transaction
4144	Redirects to a URL .
4145	Prepares constructor arguments
4146	Append exception suffix
4147	Wraps a column exception .
4148	Parses a CSV file .
4149	Returns the attribute group with the given identifier .
4150	Returns the MemberGroup with the specified AttributeSetId .
4151	Returns the entity attribute group by the given entity type and name .
4152	Create a LexerConfig instance .
4153	Finds a single AttributeOptionValue by its option id .
4154	Create a file resolver
4155	Returns all available core config datas .
4156	Returns the system logger with the specified name .
4157	Creates a new plugin instance .
4158	Merge an array with entity attributes
4159	Create number converter
4160	Cast value by backend type
4161	Returns entity type code
4162	Returns the entity s attributes .
4163	Returns the user defined attributes .
4164	Returns an EAV attribute by its attribute code
4165	Returns all categories with their resolved path
4166	Returns all categories with resolved path
4167	Get a specific header
4168	Adds a header .
4169	Maps an attribute code to an attribute code .
4170	Save the source directory to the registry .
4171	Registers an observer .
4172	Register a callback
4173	Get callbacks by type
4174	Imports a row .
4175	Prepare the store view code .
4176	Returns the store id for the passed code .
4177	Get root category .
4178	Resolve the original column name .
4179	Returns the original data .
4180	Returns true if the row has original data
4181	Wraps an exception in a column exception .
4182	Append exception suffix
4183	Get new file name
4184	Upload a media file
4185	Delete a media file
4186	Returns all available entity types .
4187	Returns the entity type with the passed entity type code .
4188	Serialize an array
4189	Unserialize CSV .
4190	Returns the target directory .
4191	Creates an export config instance .
4192	Initializes the column .
4193	Unserialize the header value
4194	Serialize the header value
4195	Get prepared statement
4196	Initializes prepared statement .
4197	Parses an additional attributes .
4198	Generates a path for an entity
4199	Resolve a reference
4200	Add a value to the cache .
4201	Retrieves a value from the cache .
4202	Flush all references .
4203	Returns the attribute set for the given identifier .
4204	Returns all AttributeSet for the given entity type id .
4205	Returns the attribute set for the given entity type and attribute set name .
4206	Returns the attribute set for the given entity type and attribute set name .
4207	Create export adapter
4208	Quote a string
4209	Returns the URL rewrite for the passed entity type and entity id .
4210	Returns the URL rewrite for the passed entity type and entity id .
4211	Notify all observers
4212	Checks the consistency of the row .
4213	Checks if a header value exists
4214	Creates a subject instance .
4215	Creates a serializer for the csv configuration .
4216	Returns all the attributes for the given entity type and attribute set name .
4217	Returns all attributes by option value and store id .
4218	Returns all the attributes mapped to the passed user .
4219	Returns all the attributes for the passed entity type and user id .
4220	Returns the list of all available attributes for the given entity type id .
4221	Finds the EAV attribute with the given option value and store id .
4222	Prepare the observers .
4223	Resolve a path
4224	Creates a directory
4225	Set an attribute
4226	Increase counter value
4227	Merge attributes recursively
4228	Creates a filesystem adapter
4229	Returns the category with the passed store view id .
4230	Returns all available root categories .
4231	Creates an emitter .
4232	Prepare an array of listeners .
4233	Recursively remove directory
4234	Returns the SwiftMailer instance .
4235	Initialize the source directory .
4236	Loads the files for the given serial
4237	Loads the list of PDO statements .
4238	Creates import adapter for given subjectConfiguration
4239	Prepare the callbacks .
4240	Get global data .
4241	Get prepared statement
4242	Creates a date converter
4243	Override other artefacts
4244	Append an array of artefacts to the entity
4245	Get artefacts by type and entity id
4246	Returns a new artefact array for this table .
4247	Export facts .
4248	Returns all linked link types .
4249	Returns all image types mapped to their attributes .
4250	Converts the given date to the correct format .
4251	Converts a number .
4252	Import the given subject .
4253	Returns all pattern keys
4254	resolve pattern keys
4255	Resolve the pattern value .
4256	Prepares the regular expression pattern .
4257	Prepare ok filename .
4258	Compare two filename names
4259	Returns all ok filenames
4260	Checks if a filename should be handled .
4261	Removes the OK file from the expected file .
4262	Returns all available tax classes .
4263	Warms up the cache for the entity .
4264	Returns all store websites .
4265	Returns all stores .
4266	Find by entity ids
4267	Find by entity id
4268	Returns all available customer groups .
4269	Get Magento primary key name .
4270	Removes empty columns from the row .
4271	Render a blade view
4272	Register REST routes .
4273	Returns the collection parameters
4274	Sanitize end date
4275	Query events by interval .
4276	Map Event Data
4277	Define Event Categories
4278	Before save callback
4279	Performs save action
4280	Save the location meta
4281	Save additional locations
4282	Saves the categories associated with this object
4283	Save Event Groups
4284	Save Event Tags
4285	Save occurences
4286	Save the current language
4287	Get Event by its original ID
4288	Check the filters
4289	Remove expired occurrences
4290	Remove deleted events
4291	Remove expired events
4292	Filter taxonomies .
4293	Delete empty taxonomies
4294	Render the location list
4295	Save location data
4296	Get the rev - manifest
4297	Remove meta boxes
4298	Convert meta data to string
4299	Implodes an array into a string
4300	Register post type .
4301	Add a table column .
4302	Set the table columns
4303	Convert columns to sortable columns .
4304	Content callback for column content
4305	Save a term
4306	Activate a new group
4307	Remove empty values
4308	Get empty values
4309	Remove empty meta values
4310	Saves the post
4311	Check if an attachment exists
4312	Submit form callback
4313	Add the start date to the permalink .
4314	Filter the event where
4315	Get a single event date
4316	Returns the next occurrence date of the agenda
4317	Returns closest element in array
4318	Returns an array of date parts
4319	Save point points
4320	Enqueues events and scripts
4321	Enqueues the frontend
4322	Format a date
4323	Add event manager API
4324	Imports the publishing groups
4325	Checks if the database table exists in the database .
4326	Create db table
4327	Check if an event manager ID exists
4328	Makes a request to the API
4329	Get events for a post
4330	Get event meta
4331	Limits a string
4332	Get the coordinates of a post within a location .
4333	Update instance settings
4334	Ajax pagination
4335	Get events for a module
4336	Get module categories
4337	Get categories for a module
4338	Get module groups
4339	Get module tags
4340	Returns an array of age range IDs
4341	The OAuth Request callback
4342	Sanitize the input array .
4343	Single event data
4344	Get user groups
4345	Update the group value
4346	Get event content .
4347	Get the event content lead .
4348	Get custom content
4349	Register Event Categories
4350	Register Event Tags
4351	Register the event groups
4352	Add import buttons .
4353	Imports events
4354	Accept or deny a post
4355	Create the tunnel .
4356	Verify the tunnel .
4357	Run command .
4358	Register a signal handler
4359	Handler for signals .
4360	Run a process .
4361	Edit action for container .
4362	Create and return a DI container .
4363	Get a widget .
4364	Render a widget .
4365	Process the input .
4366	Process a property .
4367	Hijack the post bag .
4368	Handle an event .
4369	Creates a new imagine object .
4370	Configure Imagick Settings
4371	Injects the settings
4372	Builds the widget .
4373	Get the class name of the widget
4374	Get the options for the widget .
4375	Run the widget .
4376	Enforce the model relationship event .
4377	Process the input .
4378	Handle pre persist event .
4379	Handle post persist event .
4380	Translate the label .
4381	Build the field sets .
4382	Handle submit events .
4383	Get the title for the record .
4384	Persists the model .
4385	Configure CAS
4386	Parses the configuration array
4387	Configure CAS validation
4388	Returns the value of an attribute
4389	Check if an attribute exists
4390	Logout from CAS
4391	Sets the HTTP status code .
4392	Get the row number or null
4393	Check if the current key is an integer .
4394	Extracts fragment from api url
4395	Add C4GContainer objects from array
4396	Build the query .
4397	Wrap the query with a row counter
4398	Get a fake query for the given query .
4399	Generate link for an article by key and action
4400	Assign user to key
4401	Check if key is valid
4402	Read paging info from request
4403	Register the templates
4404	Register custom error handlers .
4405	Handle an authorization request .
4406	Handle validation exception .
4407	Handle a model not found exception .
4408	Pop the top element from the queue
4409	Returns the components list .
4410	Attach event handlers
4411	Make a request to the API
4412	Check if asset is available
4413	Sync packages to database .
4414	Update packages for update
4415	Creates a client using the given names .
4416	Get the URL for the connection .
4417	Get the port from configuration .
4418	Validates the entity managers
4419	Terminate a process
4420	Locks a theme .
4421	Unlock a theme .
4422	Clones a book .
4423	Build the parameter value from the filter url .
4424	Build the parameter filter widgets
4425	Sort tables .
4426	Check if database is configured
4427	Configure database schema
4428	Get migrations .
4429	Run all migrations
4430	Rollback all migrations
4431	Resolve migration state .
4432	Get the migration table instance .
4433	Render the given values .
4434	Mount indentation .
4435	Set primary keys .
4436	Creates a new table .
4437	Updates the table .
4438	Drops the table .
4439	Rename the current table .
4440	Execute the migration .
4441	Get migration files .
4442	Create the filename for the given column .
4443	Bootstrap the application .
4444	Boot the Laravel application .
4445	Loads context initializer .
4446	Loads Laravel argument resolver .
4447	Set Mailtrap configuration
4448	Fetches the inbox from the MailTrap API .
4449	Get the http client .
4450	Reboot the kernel
4451	Resolve arguments .
4452	Open a stream
4453	Retrieves information about a resource
4454	Get stream stats
4455	Check if a file exists
4456	Returns the uri for the given stream
4457	Release a file .
4458	Handles a command .
4459	Is empty node expanded?
4460	Exposes the methods of this class
4461	Handles the request
4462	Call a procedure
4463	Renders the input .
4464	Enable the XRL server
4465	Extract the types from the doc
4466	Returns a list of available methods
4467	Returns the signature of a method .
4468	Get help for a method
4469	Multi multicall call
4470	Load a class .
4471	Get current version
4472	Prints the XMLrpc usage .
4473	Parses a boolean value .
4474	Parse the content of a file .
4475	Parse command line arguments
4476	Main entry point .
4477	Determine if the container has been resolved .
4478	Get the XML writer .
4479	Finalize the write
4480	Get XML reader
4481	Reads a node
4482	Checks for an opening tag
4483	Checks for an end tag
4484	Parses a text node .
4485	Check the type of a given value
4486	Create a checkbox .
4487	Create an email field .
4488	Create a select form field .
4489	Run all sections .
4490	Register a section .
4491	Register settings fields .
4492	Register the settings for the given section .
4493	Generates the captcha
4494	Get captcha link .
4495	Display multiple captcha
4496	Builds the HTML code for the captcha .
4497	Uploads an asset .
4498	Get project by id
4499	Get all projects
4500	Create a template for a project
4501	Get a template by id
4502	Get all templates
4503	Create a new job
4504	Get a job
4505	Get jobs by template
4506	Get current user
4507	Get the personal library for a user
4508	Merges the values of the given job values .
4509	Returns the LDAP user with the specified name .
4510	Set the LDAP configuration definition .
4511	Checks the LDAP error code .
4512	Set allowed types
4513	Set LDAP credentials if needed .
4514	Switch domain if needed .
4515	Switch the domain in the current domain context .
4516	Hide or throw an exception .
4517	Get username and password token .
4518	Add domain to the token if POST parameter is set .
4519	Transforms the value for an object .
4520	Gets list of properties for an object .
4521	Sets the LDAP object for a property .
4522	Set value for property
4523	Registers the security providers .
4524	Gets the values for the LDAP object .
4525	Get LDAP objects by query .
4526	Get all operations
4527	Sets the roles for the user
4528	Check if the user has a group for the specified roles .
4529	Check if a group has a specific attribute .
4530	Logs a log operation .
4531	Save media .
4532	Update a media by its ID .
4533	Get all media
4534	Removes a media object
4535	Parse options .
4536	Get new filename
4537	Renames file if exists
4538	Rename the file
4539	Get alt tag
4540	Get title .
4541	Get media name .
4542	Get the user s weight .
4543	Save new media .
4544	Remove existing media
4545	Put file to storage
4546	Clone the storage
4547	Make directory .
4548	Clone a media
4549	Boot the configuration .
4550	Register bindings for bladeSage
4551	Register the svg directives .
4552	Get the config .
4553	Create a svg .
4554	Short description of method transmitItemVariable
4555	Transforms a value into a string
4556	Add a Variable to the output
4557	Check if the variable is a file placeholder .
4558	Checks whether the variable is a file .
4559	Convert a value to a QTI datatype .
4560	Create a diff from an object
4561	Returns a diff of two arrays
4562	Set the ip
4563	Set the language
4564	Set the origin of the response .
4565	Returns the request origin
4566	Set the timestamp value .
4567	Before save callback
4568	Process the object schedule .
4569	Before update event
4570	Is this slug unique
4571	Generate a unique slug .
4572	Set the item s slug .
4573	Set creation date
4574	Set last modification date
4575	Set route options
4576	Set the master
4577	Returns the children of this node .
4578	Retrieve the siblings of the node .
4579	Load an object from source .
4580	Load an object from the cache
4581	Add an object to the cache
4582	Retrieve the category items .
4583	Retrieve the route s slug pattern
4584	Retrieve the slug prefix .
4585	Retrieve the slug suffix .
4586	Returns whether the slug is editable
4587	Set the slug
4588	Generate the slug .
4589	Generate route pattern .
4590	Filters the token .
4591	Generate object route
4592	Get the URL for the current object .
4593	Slugifies a string .
4594	Finalize the slug .
4595	Delete route objects .
4596	Create route object collection loader .
4597	Get all revisions .
4598	Set publication date
4599	Set the expiration date
4600	Set the publish status .
4601	Get publish date .
4602	List all videos
4603	Rewrite routes
4604	Reset the current position
4605	Returns the next item
4606	Browse a site
4607	Browse a site
4608	Browse logs
4609	Browse events
4610	Returns list of user permissions
4611	Browse a page
4612	Delete an item
4613	Restore a user
4614	Action for sorting items
4615	Checks if a localised item can be deleted
4616	Get single title
4617	Returns a list of available dropdown filters
4618	Returns POST data
4619	Returns a single item
4620	Redirect to index
4621	Adds an option to the list
4622	Adds multiple options at once
4623	Get an option value
4624	Handles a method call
4625	Set batch status
4626	Set a batch download id
4627	Route controller action
4628	Finds all admin controllers
4629	Load admin controllers
4630	Loads an admin controller
4631	Loads an admin class
4632	Routes the current request
4633	Loads a view
4634	Load a CSV from a string
4635	Load an inline view
4636	Loads search data
4637	Returns the value of the specified filter option
4638	Load a pagination object
4639	load cell from string
4640	Loads a user cell
4641	Loads a date cell
4642	Loads a datetime cell
4643	Loads a boolean cell
4644	Loads the settings table
4645	Add a header button
4646	Renders a dynamic table
4647	Save module preferences
4648	Execute the task
4649	Creates a new source
4650	Formats single row
4651	Add an action
4652	Set admin data
4653	Unset admin data
4654	Unset an admin data
4655	Clear user meta data
4656	Get all log files
4657	Find a config file
4658	Loads the required JavaScript
4659	Loads the css files
4660	Loads the libraries
4661	Auto loads all components
4662	override backward compatibility to the given object
4663	User settings page
4664	Prepares the whitelist
4665	Extracts field sets from settings array
4666	Returns a source by its slug
4667	Returns a format by its slug
4668	Exports the data source
4669	Handles an execution
4670	Adds a new item
4671	Save changes to database
4672	Returns all users
4673	Returns the common data
4674	Format an object
4675	Implements remove method
4676	Validates user input
4677	Returns the model class and id
4678	Format an object
4679	Set the current date
4680	Add HTML for a date range
4681	Sets the start of the week
4682	Print debug information
4683	Submit a bonus
4684	Assign an activity to a task
4685	Assigns contracts to an engagement
4686	Get results by fee
4687	Get results by fee
4688	Get results by Finelancer company
4689	Get results by buyer team
4690	Get sales by buyer company
4691	List engagements
4692	Get a specific engagement
4693	Get Full Url
4694	List offers
4695	Actions for a contract
4696	Get a specific financial account details
4697	Get all roles
4698	Get roles by specific user
4699	Invite a job
4700	Get by agency
4701	Get by company
4702	Get users in team
4703	List of jobs
4704	Get a specific job
4705	Post a job
4706	Edit a job
4707	Delete a job
4708	get user info
4709	Get information about a specific user
4710	Get task by type
4711	Get room details
4712	Get room by offer
4713	Get room by application
4714	Get room by contract
4715	Create room room
4716	Send messages to a room
4717	Update settings for a room
4718	Update room metadata
4719	Get snapshot by contract
4720	update snapshot by contract
4721	delete snapshot by contract
4722	Get milestone status
4723	get milestone submissions
4724	Create a new milestone
4725	Edit a milestone
4726	Delete a milestone
4727	Make the HTTP request
4728	Bootstrap the application
4729	Get content body
4730	Get accountKit data
4731	Display a list of contact .
4732	Display contact .
4733	Show form for creating a new contact .
4734	Show contact for editing .
4735	Update the contact .
4736	Remove the contact .
4737	Gets the contact criteria .
4738	Get a single contact .
4739	Determine if the given user can view the contact .
4740	Determine if the given user can update the given contact .
4741	Determine if the given user can delete the given contact .
4742	Display contact .
4743	Parse the html .
4744	Returns an array of parsed previews .
4745	Returns the preview for the given parser
4746	Adds a parser .
4747	Removes a parser .
4748	Adds default parsers
4749	Get the contrast from a hex color .
4750	Encode path .
4751	Convert interval to string
4752	Boot the Download
4753	Get time zone data
4754	Retrieve options as array
4755	Get the name of the relation .
4756	Joins a relationship table
4757	Get client configuration .
4758	Convert a version number to an integer
4759	Query scope for querying a key value
4760	Set the availability time .
4761	Get the payload
4762	Convert bytes to human readable format
4763	Format an offset
4764	Convert seconds to human readable format .
4765	Truncate text .
4766	Add a permission to a Topic
4767	Confirm subscription .
4768	Create a Topic
4769	Get the attributes of a Topic
4770	List subscribers .
4771	List subscribers for a topic .
4772	List topics .
4773	Publish a message to a topic .
4774	Remove a permission from a topic .
4775	Set the attributes of a topic
4776	Subscribe to a topic
4777	Creates a new platform endpoint
4778	Publish a message to an endpoint
4779	Perform the actual HTTP request
4780	Convert SimpleXMLElement to array
4781	Clear all tasks
4782	Convert priority to integer
4783	Starts the process
4784	Customize settings tabs .
4785	Get invitation .
4786	Create default settings tabs .
4787	Create a new instance from a Stripe coupon .
4788	Get a Coupon .
4789	Get the coupon for the user .
4790	Get team .
4791	Get team roles
4792	Update user profile
4793	Validate the user profile .
4794	Update the Stripe s email address .
4795	Install the JavaScript files
4796	Install environment variables .
4797	Subscribe to Spark .
4798	Change the subscription plan .
4799	Update a card
4800	Update the extra billing info
4801	Cancels the subscription at the end of the period .
4802	Resume a subscription .
4803	Download invoice .
4804	Set or get price
4805	Set the currency symbol
4806	Set or get trialDays
4807	Gets or sets the tier
4808	Set or get the features
4809	Get the current user .
4810	Create a new user from registration request
4811	Create new user
4812	Create default user .
4813	Create a subscription on Stripe .
4814	Register a new user .
4815	Check if the given token is valid .
4816	Delete a user .
4817	Display the settings dashboard .
4818	Invite a user by email
4819	Remove a user from the team .
4820	Invite a team invitation .
4821	Accept team invitation .
4822	Makes a new Tab instance .
4823	Returns the tabs that are displayed .
4824	Define the resources
4825	Define services .
4826	Notify an invoice .
4827	Handle an invoice successful .
4828	Create team
4829	Get all teams for a user .
4830	Get pending invitations for a user .
4831	Attach user to team
4832	Find a plan by its ID .
4833	Get plans by tier .
4834	Get the current team .
4835	Determine if this team owns this team .
4836	Get team role .
4837	Create new teams for a user
4838	Display team settings page .
4839	Update a team
4840	Switch the current team .
4841	Update team member
4842	Remove team member .
4843	Leave team .
4844	Delete team .
4845	Call a custom validator .
4846	Call a custom updater .
4847	Update the user s password
4848	Enable TwoFactor Auth
4849	Validate the EFA authentication .
4850	Disable TwoFactor Auth
4851	Handle an authenticated user .
4852	Logout and redirect to token screen
4853	Validate token .
4854	Handle registration page
4855	Validate the registration .
4856	Validate the default registration .
4857	Validate the given coupon code .
4858	Logout action .
4859	Flash a message
4860	Creates an event .
4861	Register an exception handler
4862	Export given exception .
4863	Import an exception
4864	Normalizes the given event .
4865	Get WordPress handler .
4866	Creates a cached event .
4867	Check if an event exists .
4868	Get a cached event
4869	Removes a cached event
4870	Wrapper for WordPress handlers .
4871	Exports an exception .
4872	Imports an exception .
4873	Removes a WordPress hook .
4874	Replace a WordPress hook .
4875	Get stacked items
4876	Clears the reference bag .
4877	Sends a message to the pool .
4878	Dereferenced a task from the pool .
4879	Initializes the application .
4880	Filters the given array .
4881	Applies a function to each dimension of an array .
4882	Executes a function over each element in the pool .
4883	Creates a parallel task .
4884	Converts the result returned by Phoebe .
4885	Sets the number of arguments .
4886	Runs WordPress hooks .
4887	Apply WordPress filters .
4888	Adds a WordPress hook .
4889	Wrap a function result .
4890	Resume all streams
4891	Stop all streams
4892	Closes all streams
4893	Gets a socket for a worker .
4894	Removes the worker socket .
4895	Prepare a worker .
4896	Attach a handler for an event .
4897	Hashes a callable .
4898	Write data to the buffer
4899	Appends a new stream to this stream .
4900	Receive data from the socket .
4901	Handles incoming data .
4902	Check socket errors
4903	Remove the read listener
4904	Removes the write listener
4905	Decodes a Phoebe message .
4906	Attach timer .
4907	Cancels the timer
4908	Submits a worker to the pool .
4909	Submits the given worker to the given worker .
4910	Submits a task .
4911	Submits a task to a worker .
4912	Stops a worker .
4913	Removes a worker .
4914	Sends a message to a worker .
4915	Sends a message to all workers .
4916	Triggers the tick .
4917	Interactive timer .
4918	Spawn a worker
4919	Creates a worker .
4920	Checks if a worker is shutdown .
4921	Handles a message .
4922	Handles stream closing .
4923	Read bytes from buffer
4924	Read a UUID
4925	Read a list of values
4926	Read a map definition
4927	Reads a varint from the buffer .
4928	Read a decimal point number .
4929	Register the BulkSms service
4930	Bootstrap the package .
4931	Send a message
4932	Validate the response .
4933	Send multiple bulk messages
4934	Get the status for a batch request
4935	Send batch data
4936	Generate CSV message
4937	Sends the request to the BulkSMS API
4938	Set message .
4939	Calculates the concat amount for this message .
4940	Parse the recipient .
4941	Send a batch request
4942	Find dynamic resources by filters .
4943	Counts the number of dynamic entries by filters .
4944	Adds filters to the query builder
4945	Adds search filter to query builder
4946	Add date range filter
4947	Get field value
4948	Get all fields
4949	Builds a config based on the dynamic configuration .
4950	Builds a configuration by type and data .
4951	Builds the admin mail configuration based on the dynamic parameters .
4952	Builds the website configuration based on the dynamic parameters .
4953	Returns the file fields by dynamic field .
4954	Returns the collection id for the given dynamic form .
4955	Get email from dynamic fields
4956	Get email address .
4957	Builds a form
4958	Creates a dynamic form .
4959	Loads form entity by id and locale .
4960	Returns default values for given form entity .
4961	Returns the webspace key
4962	Check if the password is valid
4963	Generates a password
4964	Returns the list of entries .
4965	Returns all fields .
4966	Delete media by id .
4967	Extract filters from request .
4968	Loads form by id .
4969	Convert value to string .
4970	Get media urls
4971	Get download url .
4972	Get the choices from the translation .
4973	Get choice options
4974	Get form by id .
4975	Serializes the form .
4976	Get a translation
4977	Get a field by its key
4978	Returns fields not in array .
4979	Serializes the form for the given locale .
4980	Default action .
4981	Renders only the only form with the given key .
4982	Handles form submit .
4983	Handles form submit .
4984	Generates a CSRF token .
4985	Get form errors .
4986	Handles the form submission .
4987	Save form data .
4988	Handles media uploads .
4989	Map media id to entity .
4990	Get media data .
4991	Get list of all lists
4992	Returns builder by alias .
4993	Get block prefix
4994	Creates a new parent collection .
4995	Loads the collection id for provided key and locale .
4996	Get item width .
4997	Get the last width
4998	Try to rethrow an exception
4999	Sets the hostname
5000	Set Unix socket
5001	Sets the memory
5002	Set file path
5003	Sets the database name
5004	Sets the charset .
5005	Ensure connection is established
5006	Configures the PDO connection .
5007	Performs a select query
5008	List all queues
5009	Get a specific queue
5010	Adds a message to the queue
5011	Adds messages to a queue
5012	Get message by id
5013	Touch a message
5014	Release a message
5015	Add alerts to a queue
5016	Delete an alert by id
5017	Delete a queue
5018	Update a queue
5019	Create a queue
5020	Replace subscribers in a queue
5021	Remove subscriber from a queue
5022	Output json .
5023	Output xml .
5024	Recursively generate XML .
5025	Output CSV .
5026	Flattens an array .
5027	Execute the active cache command
5028	Format server stats
5029	Format the usage
5030	format uptime
5031	Add a server
5032	Adds multiple servers at once
5033	Check if a server is running
5034	Get a value from the cache
5035	Stores a value in the cache
5036	Delete an entry
5037	Set the client interface
5038	Get a value from the cache
5039	Delete a key
5040	Make an invalid argument exception .
5041	Populate builder with data .
5042	Set options .
5043	Set the notification .
5044	Set the payload data .
5045	Encode a string .
5046	Generates a non - authentication URL for an action .
5047	Returns the URL for authentication .
5048	Generate an advanced authentication URL .
5049	Build a simple authentication url
5050	Build the HTTP authentication URL .
5051	Ensure channel parameter .
5052	Set the product ID
5053	Get similar attributes
5054	Returns similar records .
5055	Write a string to the file
5056	Autoload class
5057	Sets the target .
5058	Triggers data import
5059	Triggers a suggest import
5060	Applies mapping rules
5061	Ensure channel parameter .
5062	Add required parameters
5063	Adds an appender to the pool .
5064	Get a registered appenders
5065	Log a message with TRACE
5066	Logs debug messages
5067	Log a warning message
5068	Logs a message to the logger
5069	Logs an event .
5070	Force logging event
5071	Removes an appender
5072	Returns the effective level of this logger .
5073	Get the logger hierarchy
5074	Returns a logger .
5075	Reset the configuration .
5076	Configure the system
5077	Returns a logger configurator
5078	Set the record count
5079	Adds product IDs
5080	Get recommendations .
5081	track click tracking
5082	track a cart
5083	track a checkout
5084	Track the recommendation click .
5085	Track the login
5086	Set product IDs
5087	Get comparableAttributes
5088	Returns the compared records .
5089	Format event to buffer
5090	Set a boolean value .
5091	Set log level .
5092	Set a file size .
5093	Set a numeric value .
5094	Set a string value .
5095	Returns the location information for this logger .
5096	Returns the start time
5097	Returns the time in milliseconds
5098	Get Request instance
5099	Returns tag cloud
5100	Set the word count
5101	Adds an array of feedback .
5102	Set product numbers
5103	Adds product numbers
5104	Set the page id
5105	Make product campaign .
5106	Make shopping cart campaign .
5107	Get list of campaigns
5108	Get raw product campaigns .
5109	Adds a converter to the converter chain .
5110	Returns a logger converter instance .
5111	Parses an array of modifiers into a LoggerFormatInfo object .
5112	Set Log Level
5113	Adds a renderer to the map .
5114	Sets the default renderer class .
5115	Get a class by class name .
5116	Get parameters for whitelist server
5117	Loads a configuration file .
5118	Converts a log file to an array .
5119	Parse the logger configuration .
5120	Parses an appender configuration .
5121	Parse a renderer .
5122	Appends the event to syslog
5123	Parse the syslog option .
5124	Parse the facility .
5125	Parse the priority string .
5126	Appends event to mongo collection
5127	Format an exception .
5128	Closes the connection
5129	Configures the logger hierarchy .
5130	Create the layout for the logger .
5131	Set idsOnly .
5132	Get Follow Search Value
5133	Adds a filter to the list
5134	Set the response .
5135	Set session id .
5136	Checks if another logger level is equal .
5137	Returns an instance of Log Level
5138	Get the level of the log level
5139	Gets an error level
5140	Get Warn Level
5141	Get logger level
5142	Get Debug Level
5143	Get Trace Level
5144	Get all log levels
5145	Convert an argument to a level
5146	Get system property
5147	Converts given value to a logger level .
5148	Convert given value to string .
5149	Substitute constants
5150	Returns a logger by name .
5151	Returns the request target
5152	Initializes the conversion pattern .
5153	Format an event .
5154	Adds a new filter
5155	Checks if the log level is greater than the given threshold
5156	Trigger a warning
5157	Returns the suggestions .
5158	return class name of factfinder class
5159	Roll over the file .
5160	Initializes the database connection .
5161	Appends an event to the database .
5162	Format an event .
5163	Generates a url based on parameters
5164	Returns a string containing a feedback for each campaign .
5165	Get pushed products
5166	Get active questions .
5167	Get advisor tree
5168	Activate options .
5169	Appends a logging event .
5170	Find a permission by its ID .
5171	Find a permission by its value .
5172	Renders an item
5173	Setup the layout
5174	Get empty user
5175	Display create form
5176	Create a new user
5177	Activate a user
5178	Show user permissions
5179	List all groups
5180	Edit Group
5181	Remove a user from a group
5182	Adds a user in a group
5183	Validates the group
5184	Load includes .
5185	Register the Helpers
5186	Get the dashboard view
5187	Perform login action .
5188	List all permissions
5189	Create a new permission
5190	Delete permission
5191	Paginate the text
5192	Authenticate a user
5193	Generate a nonce .
5194	Is flag set?
5195	Get the rule for a given flag
5196	Check if the parameter is required
5197	Is required flag
5198	Determine if the given flag is required
5199	Parse command line arguments
5200	Check if string is a parameter
5201	Order parameters .
5202	Authenticate request
5203	Returns the report API
5204	Retrieves permissions
5205	Retrieves company API
5206	Returns the OAuth API
5207	Perform a request to the API
5208	Returns the elements of a report
5209	Retrieves metrics for a particular suite
5210	Retry the given report
5211	Get the number of seconds for the number of attempts .
5212	Parses an array of options
5213	Get the image
5214	Gets an array of all images .
5215	Get videos .
5216	Pretty print a string
5217	Get table definition
5218	Generate dropTable definition .
5219	Returns the drop table data .
5220	Returns the key for a table .
5221	Generate dropKey definition .
5222	Returns the foreign key definition .
5223	Generate drop foreign keys definition .
5224	Get Column Definition
5225	Get primary key .
5226	Returns the table comment .
5227	Gets the schema type for a column .
5228	Returns the other code for the other column .
5229	List tables .
5230	Generate migration file
5231	Create table action
5232	Drop table .
5233	Generate a file for a given table .
5234	Formats data for output .
5235	Gets the parameters for a function .
5236	Start printing time
5237	End Timestamp
5238	Output final conclusion .
5239	Fetch data from Webservice
5240	Populate the response
5241	Set Webservice URL
5242	Get all groups from the LDAP server .
5243	Get a group by DN
5244	Get LDAP users .
5245	Get a user by its GUID
5246	Get a single LDAP user by DN
5247	Get a user by email address
5248	Retrieves a user by their username
5249	Get username by email
5250	Get LDAP group members by DN
5251	Updates a group from an LDAP group .
5252	Creates an LDAP user for the member
5253	Creates an LDAP group
5254	Updates the LDAP from a member
5255	Update LDAP groups for a member
5256	Change the password for a member
5257	Delete an LDAP member from LDAP
5258	Update the index
5259	Connect to a server .
5260	Closes the socket
5261	Get string from socket
5262	Send string to socket
5263	Encode a string .
5264	Decode a string
5265	Read a response from the server
5266	Authenticates the client
5267	Ensure the response time is consistent .
5268	Create LDAP users
5269	Write this member without blocking
5270	Get the message from the session
5271	Form for the lost password form
5272	Displays the password reset form
5273	Perform a search on the LDAP server .
5274	Get a specific group by its GUID .
5275	Changes the current user s password
5276	Reset the password for a given connection .
5277	Moves a directory from LDAP to another .
5278	Authenticate a user
5279	Authenticate to LDAP
5280	Process the authentication form
5281	Renders the SP metadata
5282	Convert a hexadecimal string to a little endian representation .
5283	Execute select callback
5284	Select items from the index
5285	Splits a hash
5286	Creates a new database instance .
5287	Get table definition
5288	Get all tables
5289	Replace primary keys in a table
5290	Compare two indices
5291	Get single row
5292	Build an index name from an array definition .
5293	Encodes data .
5294	Generate a random key
5295	Get supported options
5296	Hashes a string .
5297	Verify hmac .
5298	Verify a timestamp
5299	Remove the last character from the string .
5300	Append string to string
5301	Twig middleware .
5302	Get the error message .
5303	Add error to list
5304	Gets or sets the mainMessage property
5305	Gets or sets the HTTP status
5306	Get the error message
5307	Returns errors as a flat array
5308	Check if a field is valid
5309	Parse a schema array
5310	Require one of the given fields
5311	Validate data .
5312	Validate a single field .
5313	Validate an array
5314	Validate a base64 encoded value
5315	Validate a boolean value
5316	Validate a datetime value
5317	Validate a float value
5318	Validate an integer value
5319	Validates an object
5320	Validate that a field is required
5321	Validate if the given value is a string .
5322	Validate that the given value is a timestamp .
5323	Get all information for an addon
5324	Bootstrap all plugins
5325	Get cached result
5326	Return an array of class name = > value pairs
5327	Get enabled plugins
5328	Get information for an addon
5329	Scan a directory for addons
5330	Scan addon directory
5331	Scan a directory for addons
5332	Start an addon .
5333	Get all headers
5334	Call user function
5335	Bind an event
5336	Binds events to a class
5337	Dump handlers .
5338	Fire an event
5339	Fire an event
5340	Fire the given event
5341	Check if a function exists
5342	Get event name .
5343	Get handlers by name
5344	Check if an event exists
5345	Check if a method exists
5346	Get driver value .
5347	Set the value of the driver .
5348	Split a salt string
5349	Set or get default path
5350	Get a value by key
5351	Load configuration data
5352	Saves an array to the configuration file .
5353	Matches all routes that match the request .
5354	Add a new route
5355	Finalize the result .
5356	Check if an action exists
5357	Get allowed methods for an object
5358	Check if the route matches the request .
5359	Determine if a value fails a given condition .
5360	Gets the current response
5361	Convert result to a ResponseInterface
5362	Sets the Content - Type header .
5363	Gets or sets the content asset
5364	Set the content type based on the Accept header
5365	Get HTTP status message
5366	Set cookie value
5367	Set global cookies
5368	Set or get the meta data
5369	Set or get the data
5370	Set or append headers .
5371	Get or set global headers
5372	Normalize header name
5373	Send response headers
5374	Alter a table .
5375	Renames a table .
5376	Drop index .
5377	Create index .
5378	Force a value to be cast
5379	Get PK value
5380	Get the names of all tables .
5381	Creates a new route
5382	Get or set conditions
5383	Set or get methods
5384	Get or set mappings
5385	Get or set global mappings
5386	Determine if the given name is mapped .
5387	Get the mapped data .
5388	Determine if the request matches the allowed methods .
5389	Get or set the route pattern
5390	Dispatch a callback
5391	Get regular expression .
5392	Execute a query
5393	Build select statement
5394	Return a bracket list
5395	Build an insert statement
5396	Build an upsert statement .
5397	Format a column definition string .
5398	Format an index definition .
5399	Get column orders
5400	Get formats from DB .
5401	Translate a single row
5402	Verify a password
5403	Encode a 64 - bit array .
5404	Get current request
5405	Get default environment variables
5406	Get or set environment variables
5407	Parse server variables
5408	Overrides the current environment
5409	Retrieve an environment variable
5410	Set an environment variable
5411	Get HTTP headers
5412	Get host and port
5413	Set the extension .
5414	Set the path extension
5415	Set full path
5416	Set the port
5417	Get a query parameter
5418	Sets a query parameter
5419	Get the input
5420	Get data from request
5421	Set data by key
5422	Get the current URL
5423	Set the url
5424	Makes a URL relative to the root path .
5425	Split path .
5426	Reset the table
5427	Define a column .
5428	Build column definition
5429	Add a primary key
5430	Execute this query
5431	Gets or sets the table name
5432	Add an index
5433	Display robots . txt .
5434	Retrieves all notifications .
5435	Retrieve a single resource
5436	Validate the JudoJson
5437	Get an attribute value
5438	Set the attribute values .
5439	Check if API method is supported
5440	Check required attributes
5441	Checks if the Jabo ID is set .
5442	Get status summary
5443	Get a model instance
5444	Returns a string describing the error summary .
5445	Get a single resource
5446	Make a POST request to the API
5447	It converts the attributes to the correct type .
5448	Validates the object
5449	Checks if a key exists in an array
5450	Render the notifications
5451	Adds a notification to the collection
5452	Create a new delivery
5453	Convert Job object to Json
5454	Creates a new Job object from the given JSON response .
5455	Frees poll .
5456	Frees the data queue .
5457	Create a new Dashboard
5458	Handles an item request
5459	Sorts the items
5460	Link to the editor
5461	Form for displaying the detail form
5462	Saves the detail
5463	Get RSS feed items
5464	Gets the list of recent edits
5465	Check if this member has a configured Dashboard .
5466	Gets the name of the template to use
5467	Return the view link for this record
5468	Return the link to create a new model
5469	Gets an array of GridFields for the given SiteTree
5470	Gets the grid field
5471	Gets the tab name for this subject
5472	Gets the gridfield items
5473	Get the grids for a specific page
5474	Request account data .
5475	Cleans the error response .
5476	Process filter
5477	Mapper to a gapiAccountEntry object
5478	Mapper for JSON object
5479	Check if array key exists in array
5480	Fetch a token
5481	Get the current url
5482	Post request .
5483	Make GET request
5484	Perform an HTTP request
5485	Make a cURL request
5486	fopen http request
5487	Get the list of recent files
5488	Duplicate this dashboard .
5489	Returns the name of the admin template
5490	Get the view link for all models
5491	Get the list of admin items
5492	Returns a list of models for a panel
5493	Provides a list of permissions related to the CMS
5494	Saves the panels
5495	Set the default dashboard configuration
5496	Applies all the Dashboard panels to all members
5497	Renders the panel
5498	Deletes the panel
5499	Form for displaying the configuration form
5500	Save the panel configuration .
5501	Gets the icon for this node .
5502	Convert seconds to minutes
5503	Get the gapi API
5504	Gets the configuration fields
5505	Returns true if the configuration is configured .
5506	Get the path for this node
5507	Generate a chart title
5508	Read a floating - point floating point .
5509	Reads a byte from a binary reader .
5510	Convert a binary string
5511	Read data from a binary reader .
5512	Read signed value from stream
5513	Reads 16 - bit integer from the binary stream .
5514	Read signed integer from stream .
5515	Reads 64 - bit integer from binary stream .
5516	Read a signed integer .
5517	Export the given spans .
5518	Get the callback
5519	Parse robots . txt .
5520	Get the lines of the given robots . txt .
5521	Builds the regular expression
5522	Get robots txt content
5523	Extracts the robots_txt from a URL .
5524	Initialize the crawler process
5525	Runs the PHPCrawl process .
5526	Starts the child process
5527	Check if the crawler has an abort
5528	Create the working directory
5529	Returns information about the crawler process .
5530	Add a link priority
5531	Set the follow mode
5532	Set the maximum number of bytes
5533	Set the working directory
5534	Set proxy
5535	Set connection timeout
5536	Set stream timeout
5537	Resumes the previous crawler
5538	Set the starting URL
5539	Removes all redirect urls from PHPCrawlerDocumentInfo .
5540	Checks if the url matches the rules
5541	Add a url filter rule
5542	Add multiple rules
5543	Marks the URL as follow .
5544	Returns true if there are any URLs in the cache .
5545	Get all URLs
5546	Add multiple URLs
5547	Start a benchmark
5548	Stops a benchmark
5549	Reset all benchmark results
5550	Get all the benchmark results
5551	Returns current microtime
5552	Open connection to database
5553	Generates a unique URL hash for a given UrlDescriptor .
5554	Get url priority
5555	Add a link priority
5556	Add link priorities
5557	Adds a PHPCrawlerDocumentInfo to the queue
5558	Retrieves the next document from the database
5559	Creates a PHPCrawlerUrlDescriptor instance from a string .
5560	Sets the source url for the request .
5561	Finds a redirect link in the given HTTP header
5562	Add post data
5563	Updates the crawler s status .
5564	Register a child pid
5565	Get child PIDs
5566	Kill all child processes
5567	Get the IP of a host
5568	Returns the host name of the given URL
5569	Removes a visitor .
5570	Traverse an expression
5571	Filters the collection using the given expression .
5572	Creates a new Method .
5573	Format a value .
5574	Format values .
5575	Write configuration options
5576	Read and delete a variable
5577	Returns a list of registered engines
5578	Expand a flat array into an array .
5579	Split token conditions
5580	Check if a key matches a token .
5581	Cache an item
5582	Set message instances
5583	Returns a trace array
5584	Export a variable .
5585	Listen for Discord .
5586	Parse a message
5587	Get the full path to a configuration file .
5588	Load plugin configuration
5589	Load the plugin configuration .
5590	Load all plugins
5591	Loads the bootstrap for a plugin
5592	Read configuration data
5593	Set configuration values .
5594	Read configuration value
5595	Load all modules .
5596	Check plugins for a specific module
5597	Unload a module
5598	Reloads the specified module
5599	Get the time of the specified module .
5600	Check if a module is modified
5601	Get registered module
5602	Check if a module exists
5603	Sets a module
5604	Gets a value from the cache .
5605	Set cache key
5606	Get multiple values
5607	Set multiple values at once
5608	Call a method .
5609	Called when the profile starts
5610	Returns the result after returning the result
5611	Returns the profile key for the given joinPoint
5612	Replace all arguments in a command .
5613	Applies an array of arguments to a command
5614	Evaluate keys in a command
5615	Set expiration time
5616	Set length .
5617	Read data from socket
5618	Send data to the socket
5619	Check if command can be executed
5620	Set the protocol version
5621	Convert data array to PHP format
5622	Get last key
5623	Prepare the transaction
5624	Sends the request to the server
5625	Read raw data from the socket
5626	Reads an unsigned long from the stream .
5627	Reads a string
5628	Read bytes .
5629	Read a record
5630	Add bytes to request
5631	Unpack an unsigned 64 - bit integer .
5632	Reset the data .
5633	Gets the properties as an array
5634	Renders a component
5635	Returns the class names for the given arguments .
5636	Listeal Issuers
5637	Get All Products
5638	Processes the list of products that are valid
5639	Create an order with aneal order
5640	Create a new Order with Sepa
5641	Create a new Order with Ssfort
5642	Create a new paycic order
5643	Create order with credit card
5644	Create order with Bancontact
5645	Create a new CashOrder
5646	Create order with klarna order
5647	Create a new order using Paypal
5648	Create a new Homepay order
5649	Create order after payment
5650	Create an order
5651	Get an order by ID
5652	Post an order .
5653	Set the captured status of an order
5654	Factory method to create an IdealPay
5655	Create a new payment with credit card
5656	Creates a new payment method with Sepa
5657	Factory method to create a SOFORT with the given amount
5658	Create a new payment with BANcontacts
5659	Factory method to create a Paypal using Paypal
5660	Create a new payment with the homepay method
5661	Creates a payment method with PayCCONIQ
5662	Create a new Transaction object .
5663	Remove null values
5664	Creates an HTTP client for the given API key .
5665	Get API endpoint
5666	Checks if a string is valid
5667	Builds the request body .
5668	Execute the payment
5669	Captures an authorized transaction
5670	Authorize an authorization request .
5671	Create a new payment
5672	Request an access token
5673	Builds a Link object
5674	Builds a Capture object from an array .
5675	Build an Amount object
5676	Builds an array of URLs
5677	Build an AccessToken object from an array .
5678	Build transaction objects
5679	Build an array of Transactions
5680	Send a request
5681	Builds a payment object from the given array .
5682	Build a paypal payment object
5683	Builds a Payer
5684	Transform payer object to array
5685	Build Authorization object
5686	Make a safe string
5687	Make a safe character
5688	Get the value of a form attribute .
5689	Check if form mutator exists .
5690	Get class reflection
5691	Render favicon .
5692	Create a link element .
5693	Renders a UL list
5694	Render ul element
5695	Get value from model .
5696	Text input field .
5697	Create an email input field .
5698	Create a tel input field .
5699	Create a number input field .
5700	Create url input .
5701	Create a color input field .
5702	Get the checkbox state .
5703	Get url action .
5704	Get route action .
5705	Get controller action .
5706	Inserts a string at a given position
5707	Finds the position of the first occurrence of a string
5708	Set an item
5709	Unset an item
5710	Fetch data from buffer .
5711	Parse a single file .
5712	Get line count
5713	Unzip a file .
5714	Returns the size of a URL
5715	Returns an array of files .
5716	Frees the resource .
5717	Removes the next byte from the buffer .
5718	Seek to given position
5719	Inserts data into buffer .
5720	Replace the current string
5721	Removes the first character from the iterator .
5722	Copy directory .
5723	Closes the stream .
5724	Scope Admin 1 .
5725	Add country info
5726	Scope for city .
5727	Scope for countries .
5728	Scope a query to search by features .
5729	Creates pending redirects
5730	Returns true if the node uri has changed .
5731	Builds redirects .
5732	Creates a redirect from the given URI .
5733	Removes a node redirection if needed .
5734	Checks if the node is restricted by the current node type .
5735	Checks if the node is restricted by path prefix .
5736	Returns the list of active domains .
5737	Get UriBuilder
5738	Load a variable name from a URL
5739	Validate that the page exists .
5740	Render page picker
5741	Render the label callback
5742	Initialize WordPress .
5743	Plugin action links .
5744	Get plugin version
5745	Get remote version
5746	Checks the file type and the extension .
5747	Checks that the file is an SVG .
5748	Parse readme authors
5749	Get plugin slug by path .
5750	Returns a list of remote plugin contributors .
5751	Validate the file
5752	Returns the supported data loader
5753	Loads the content for the given data
5754	Create the options for the application .
5755	Returns a list of allowed tags .
5756	Get the allowed protocols
5757	Get allowed domains .
5758	Sanitize a domain .
5759	Sanitize an attribute value
5760	Sanitize the URI value .
5761	Callback handler for sanitize CSS
5762	Loads an SVG .
5763	Strip HTML comments
5764	Get the replication flags for a resource .
5765	Builds the loaders .
5766	Pre parse loaders
5767	Make Namespace Loaders
5768	Parse array of options
5769	Make cache provider
5770	Make paths .
5771	Make a loader instance
5772	Creates the variable provider .
5773	Loads variables from the cache
5774	Merge global variables .
5775	Returns a resource by its name
5776	Create the prefix
5777	Create the resources
5778	Add content to this node
5779	Get supported files in a directory
5780	Merge parent content
5781	Gets a value from an array .
5782	Check if array key exists
5783	Parse a string
5784	Parses a value for a given type .
5785	Fetch variables matching the given regex
5786	Fetch a variable
5787	Check if a variable exists .
5788	Do replacements .
5789	Export an SVG document .
5790	Remove nodes .
5791	Remove a node .
5792	Set the absolute path to the directory
5793	Prepares paths for rendering
5794	Search for resources
5795	Parse the content .
5796	Parse imports .
5797	Import a single resource
5798	Create import resource provider
5799	Create the import name
5800	Import a resource
5801	Checks a boolean value
5802	Get boolean value
5803	Get mime aliases
5804	Updates the given filename extension .
5805	Checks if the file is an alias .
5806	Checks the allowed mimetype .
5807	Load configuration values .
5808	Get a list of supported files
5809	Returns an array of paths
5810	Checks if the cache is available .
5811	Make the cache
5812	Set the version of assets
5813	Reads the configuration file .
5814	Send a PSR - 7 request .
5815	Set curl options
5816	Execute a GET request
5817	PUTs a request
5818	Execute a DELETE request
5819	Execute a POST request
5820	head request
5821	Execute the request
5822	Install an Xquery extension
5823	Add buckets .
5824	Implements read method
5825	Writes the XML content
5826	Is XML valid?
5827	Set up a range element
5828	Get the values as an element
5829	Append the values options
5830	Append the aggregate element
5831	Get the params
5832	Retrieve a specific search results
5833	Retrieve a key - value pair
5834	Retrieve a keyvalue element
5835	Highlight a content
5836	Get the REST client .
5837	Get the manage client
5838	Get the REST client .
5839	Get the REST API instance .
5840	Get database instance
5841	Get options instance .
5842	Autoload function
5843	Returns the options as XML .
5844	Append an option .
5845	Append an XML option to the root node .
5846	Reads a query configuration
5847	Write the current query
5848	Delete a query
5849	Set search options
5850	Read the document
5851	Write the document
5852	Delete this document
5853	Read metadata from the document
5854	Write metadata to the document
5855	Delete document metadata
5856	Set content from file
5857	Get file mime type
5858	Logs a SOAP call
5859	Decode a SOAP reply
5860	Convert an associative array to an associative array
5861	Perform an LDAP sync
5862	Returns an array of phone names
5863	Lists all phones for a specific site
5864	Search by name
5865	Search for phone numbers
5866	Get phone by name
5867	Get directory numbers by name
5868	Get a list of device pools
5869	Get list of site names
5870	Get list of lines by site
5871	Get lines by phone name .
5872	Get list of all object types
5873	Get an object type by its name and type
5874	Delete an object type by its UUID
5875	Add capabilities .
5876	Get the geographical latitude of the image
5877	Get Longitude
5878	Get the body type
5879	Get error message
5880	Get url string
5881	Creates a REST API
5882	Delete the resource
5883	Wait for the given request until successful .
5884	Check if the API exists
5885	Returns the term as an element .
5886	Append term options
5887	Append facet options to the dom .
5888	Append fragment scope
5889	Set the content file
5890	Get result by URI
5891	Get result by index
5892	Get a facet by name
5893	Add constraints .
5894	Get the extract metadata as XML element .
5895	Add preferred elements
5896	Get the transform results as an element
5897	Add collections to search .
5898	Delete one or more collections
5899	Add permissions to role
5900	Delete multiple roles
5901	Delete one or multiple properties
5902	Convert to XML
5903	Loads the object from XML .
5904	Enables Static ProxyLoader .
5905	Set the service container .
5906	Compares two constraints .
5907	Compares two definitions .
5908	Compare two fields .
5909	Get fixture files
5910	Compare fields that are not in live .
5911	Sets the form field .
5912	Set horizontal form
5913	Generates a label .
5914	Format errors .
5915	Generates a form group .
5916	Renders action .
5917	Generates an HTML link
5918	Generates an alert .
5919	Create a password input field .
5920	Create a file input field .
5921	Generates a hyperlink .
5922	Create a secure link
5923	Create a link to a named route .
5924	Returns a link to an action .
5925	Returns a link to the email .
5926	Create a none alert
5927	Execute regular expression replace
5928	Get the short message
5929	Get a value from the cache .
5930	Set a value in the cache
5931	Removes basket item from basket .
5932	Clear order items
5933	Updates basket item
5934	Get literal value
5935	Get the type of a literal
5936	Gets the language of a literal
5937	Create an IRI
5938	Creates a literal
5939	Check request md5
5940	Build response XML
5941	Initialize the tokenizer
5942	Tokenize input
5943	Decodes a code .
5944	Obfuscate an identifier .
5945	Creates default factories
5946	Get Statement with Group Actor
5947	Returns a Statement with the given ID .
5948	Get Statement with result .
5949	Get statement with sub statement
5950	Create a new option
5951	Returns the minimal representation of the minimal statement
5952	Attaches the events
5953	Initialize the ViewHelper
5954	Get the last uploaded file
5955	Collects files from an event .
5956	Cleans the layout
5957	Attaches the view resolver
5958	Attaches the pdf transformer
5959	Resolves a view template path
5960	Registers an option .
5961	Gets an option .
5962	Creates an Activity profile document .
5963	Get agent profile document
5964	Returns a state document for the given document .
5965	Add a behavior .
5966	Add a value to the bag .
5967	Define default behavior
5968	Set default value
5969	Execute the action .
5970	Creates a new behavior for the given slug
5971	Mark the behavior as no default behavior .
5972	Set a behavior
5973	Start metrics .
5974	End metrics .
5975	Execute behavior .
5976	Get every element in the collection
5977	Get the first item in the collection
5978	Retrieve the last item in the collection
5979	Retrieve the highest value
5980	Reject items that match the given truth test
5981	Convert the collection to an array
5982	Get arrayable items .
5983	Check if slug is enabled
5984	Parse feature map .
5985	Creates a new HashMap .
5986	Returns the bucket .
5987	Set the map
5988	Create a new builder for a feature
5989	Set user bucket
5990	Describes the given tables .
5991	Gets the schema information for a table .
5992	Creates database tables .
5993	Creates a table
5994	Create multiple fields
5995	Create a field
5996	Create multiple relationships
5997	Create a relationship
5998	Update tables .
5999	Update table schema .
6000	Update fields in a table .
6001	Update single field
6002	Update multiple relationships .
6003	Update a relationship
6004	Delete one or more tables .
6005	Drops a table .
6006	Set the target length
6007	Truncate a table
6008	Returns paged result response
6009	Rewinds the cursor to the beginning
6010	Escape a string
6011	Add entry to LDAP
6012	Compare an entry
6013	Establish a connection to the ldap server
6014	Write paged result to LDAP
6015	Bind to LDAP directory
6016	get an option value
6017	Add an entry to LDAP group
6018	Delete attribute values
6019	Replace an entry in LDAP server
6020	Modify an entry
6021	Modify an LDAP entry
6022	Renames an entry
6023	Bind to the LDAP server
6024	Perform an LDAP search .
6025	Set an option value
6026	Verifies the ldap operation
6027	Adds a set .
6028	Compute the referenceSet
6029	Computes the product
6030	Get all resource names
6031	Load a resource
6032	Compares two table names .
6033	Builds a SQL statement for creating a primary key .
6034	Generate a SQL statement for creating a new view
6035	Binds a value to a statement .
6036	Extracts the PDO type from the given type .
6037	Extracts the column type from a DB type .
6038	Extracts the default value of a field .
6039	Add data to the request
6040	Generate query based on params
6041	Creates a request
6042	Executes a query
6043	Set HTTP Method
6044	Set the protocol
6045	Generate a query string
6046	Set aggregators .
6047	Set the filters .
6048	Set post aggregators
6049	Register TinyMCE scripts
6050	Validate all required parameters
6051	get json string
6052	Render index action
6053	Prepare database for installation
6054	Checks if a column exists in a table
6055	Get column type .
6056	Update table blueprint .
6057	Drop table rows .
6058	Drop all tables
6059	Rename table .
6060	Execute query .
6061	Add attachment from request .
6062	Add attachment from file .
6063	Add data from raw data
6064	Add content from url
6065	Delete thumbnails
6066	Returns the file last modified time
6067	Get unique name
6068	Delete thumbnails
6069	Deletes a file
6070	Deletes empty directory
6071	Is directory empty?
6072	Check if file exists
6073	Get thumb .
6074	Get thumb filename
6075	Get default options
6076	Make thumb .
6077	Get public asset path .
6078	Returns the path to the attachments directory .
6079	Parse an enum type definition .
6080	Compile a time column .
6081	Compile a timestamp column .
6082	CURL write function
6083	Compile JavaScript files
6084	Bootstrap the application .
6085	Normalize the url .
6086	Adds a route .
6087	Add GET route
6088	Add POST route
6089	Add PUT route
6090	Add PATCH route
6091	Adds a DELETE route to the application .
6092	Add options route
6093	Add HEAD route
6094	Renders the view .
6095	Retrieve the source .
6096	Creates a new migration .
6097	Ensure that a migration class exists .
6098	Get the content of the stub .
6099	Get the path to a file .
6100	Scope by a user .
6101	Scope a query to only include records for the given subject .
6102	Builds an expression for an array .
6103	Get migration paths .
6104	Clear compiled views .
6105	Set the parameters
6106	Set headers .
6107	Set the proxy
6108	Setter for cookies
6109	Set a cookie
6110	Set the options
6111	Send the request .
6112	Set the request
6113	Builds the blueprint .
6114	Build the table definition .
6115	Build commands for this table .
6116	Add an index
6117	Add a float column
6118	Add a double column
6119	Add a column to the table .
6120	Specify timestamps for this table .
6121	Specify timestamps for columns .
6122	Add polymorphic columns
6123	Specify a map of morphable objects for a polymorphic relationship .
6124	Creates a new column definition .
6125	Creates a unique index name .
6126	Adds a value to an array if it does not exist .
6127	Collapse nested arrays .
6128	Read value from array
6129	Fetch value from array
6130	Retrieve a value from an array .
6131	Applies a callback to each element in an array
6132	Splits an array of values into separate keys .
6133	Calculate the levenshtein .
6134	Capitalize a string
6135	Converts a string to uppercase
6136	Format a Location .
6137	Create new Url instance
6138	Get composer command
6139	Builds the parameters for the request
6140	Build headers .
6141	Build the proxy
6142	Build cookies .
6143	Register an observer for a class .
6144	Register a model event .
6145	Boot Nicer events
6146	Flush event listeners .
6147	Get a new location model query .
6148	Get a location by its identifier .
6149	Get a location by its slug .
6150	Flash a message .
6151	Display an overlay message .
6152	Clear messages from storage .
6153	add a task
6154	Register the package services .
6155	Register the prefix class .
6156	Register the storage implementation .
6157	Boot the module .
6158	Add a like statement
6159	Get the dates from a column .
6160	Find a record by its primary key
6161	Retrieves the current user
6162	Logout the user out .
6163	Log in a user
6164	Retrieves a user by their unique identifier
6165	Retrieves a user based on the credentials .
6166	Register database profiler
6167	Register view profiler
6168	Write migration file .
6169	Get the events to be performed .
6170	Dumps an array
6171	Returns the identifier for a variable .
6172	Generate a hash for an array
6173	Check array recursion
6174	Check for recursion
6175	Dumps variables .
6176	handles all routes
6177	Process the route .
6178	Add directories .
6179	Normalize class name .
6180	Load a class .
6181	Require a class .
6182	Load the manifest file .
6183	Writes the manifest to disk .
6184	Load translations from multiple drivers .
6185	Load the language files .
6186	Set column constraint
6187	Parse read data .
6188	Get a new query builder
6189	Returns true if STDOUT supports colors .
6190	Apply colors to text
6191	Get executed migrations
6192	Get batch of migrations
6193	Run the pending migrations .
6194	Run up the migration .
6195	Get the list of migrations for rollback .
6196	Rollback migrations .
6197	Reset all migrations .
6198	Reset migrations .
6199	Rollback a migration .
6200	Prepend the migration to the database .
6201	Get migration files .
6202	Clears the loader .
6203	Adds a primary column .
6204	Adds a column to the model .
6205	Creates a timestampable column
6206	Add a soft deleteable column .
6207	Add column mapping .
6208	Describe column type
6209	Determine if an option exists .
6210	Check if the parent item is the same .
6211	Scope for live posts .
6212	Get path attribute
6213	Register crypt instance
6214	Generate the cache
6215	Returns SQL to rename a table .
6216	Boot the HasPermalink trait .
6217	Get slug key .
6218	Search for similar slugs .
6219	Execute an SQL statement .
6220	Execute an SQL statement .
6221	Describe columns for a table .
6222	Executes an SQL query and returns the first result .
6223	Fetches all rows from an SQL query
6224	Inserts data into a table .
6225	Execute an update query .
6226	Delete rows from a table .
6227	Add a limit statement
6228	Checks if a table exists .
6229	Determine if a view exists .
6230	Creates a new table .
6231	Creates a new view .
6232	Drop a view .
6233	Adds a column .
6234	Modifies a column
6235	Drop a column .
6236	Adds an index to a table .
6237	Drop an index .
6238	Adds a primary key to a table .
6239	Drops a primary key .
6240	Adds a foreign key to a table .
6241	Drop a foreign key .
6242	Describe table indexes
6243	Describe a table s references .
6244	Get table options
6245	Render the query panel .
6246	Adds a column to the database .
6247	Modifies a column
6248	Drops a column .
6249	Drops an index .
6250	Adds a primary key
6251	Drops a foreign key .
6252	Creates a new table instance .
6253	Creates a new view .
6254	Drop table .
6255	Drop a view .
6256	Bind paths in the container .
6257	Check if settings table exists
6258	Register the Logger
6259	Bootstrap the application .
6260	Get fillable attributes from array
6261	Is fillable .
6262	Convert amount from one currency to another
6263	Is this currency active?
6264	Return all currencies .
6265	Register an array of modules
6266	Attaches the given listener
6267	Generate a random password
6268	Completes reset password
6269	Check the reset password code
6270	Complete the user activation .
6271	Prompt the user for input .
6272	Register currency .
6273	Route middleware .
6274	Middleware .
6275	Gets a reflection class for a class .
6276	Sets the value of a property .
6277	Get a property value .
6278	Invoke method .
6279	Save cache data .
6280	Check if a key exists .
6281	Get user currency .
6282	Returns whether two Coordinates are equal .
6283	Render block .
6284	Registers an event listener
6285	Sort events by priority
6286	Unbind an event
6287	Fires an event
6288	Returns the DI container
6289	Check if header exists
6290	Setter for headers
6291	Builds the headers
6292	Check coordinates equality
6293	Get detailed message
6294	Main entry point .
6295	Register session services
6296	Convert to DateTime
6297	Prepares the output .
6298	Get PHP code .
6299	Parses a file .
6300	Register database services
6301	Get a specific node s data
6302	Filters nodes that are ancestors of given node
6303	Appends WHERE BETWEEN clause
6304	Appends a WHERE clause to the query .
6305	Get descendants for a node
6306	Specify the depth of the query .
6307	Get the list of columns .
6308	Named scope .
6309	Set default order
6310	Moves a node .
6311	Make a gap between nodes .
6312	Patch column values .
6313	Compression for column patch
6314	Count errors .
6315	Fix tree structure
6316	Rebuilds the tree
6317	Boot the purgeable trait for the model .
6318	Add purgeable attributes
6319	Removes attributes from the entity .
6320	Returns the original value of an attribute .
6321	Get an item from the container .
6322	Set an item in the collection
6323	Forget an item
6324	Saves the changes .
6325	Loads the cache .
6326	Compile function .
6327	Main action .
6328	After event is triggered
6329	Add headers to response
6330	Get rate limiter
6331	Update model attributes .
6332	Logs a migration .
6333	Creates the database repository .
6334	Get the database table instance .
6335	Get database name
6336	Set an attribute
6337	Append an attribute
6338	Set element content
6339	Adds a content
6340	Register an array of commands .
6341	Generate HTTP routes cache
6342	Get all queries
6343	Check if a user has too many attempts
6344	Hit a cache hit
6345	Retrieve attempts
6346	Clear cache key
6347	Get time in seconds
6348	Generate dot constants
6349	Register the native filesystem .
6350	Swaps the instance in the DI container .
6351	Determine if the mock is a mock .
6352	Create a new mock instance .
6353	Check if this instance is a mock
6354	Resolve facade instance
6355	Process a select
6356	Process the selectAll .
6357	Parse template content .
6358	Process update .
6359	Attach event listeners
6360	Detach this manager
6361	Perform a geocode query .
6362	Reverse query .
6363	Get the status for a given ran migration .
6364	Lists all http routes
6365	Get http routes infos
6366	Set cURL options
6367	Parse curl info
6368	Compile constants .
6369	Starts the process
6370	Waits until the thread is running .
6371	Stop the process .
6372	Close the stream .
6373	Executes the daemon .
6374	Optimizes the autoload .
6375	Generate the php output
6376	Fill target array
6377	Read a property value from an object .
6378	Fetch a property from an object .
6379	Get an object property value .
6380	Set a value in an object .
6381	Register error handler
6382	PHP Error Handler
6383	Handles an error .
6384	Resolve a migration file .
6385	Determine if the given log level should be logged .
6386	Add files to the logger .
6387	Enable daily files .
6388	Register the logger .
6389	Setup the connection settings .
6390	Log SQL error
6391	Adds an item to the list
6392	Get a single property
6393	Set a property .
6394	Set the properties .
6395	Get original property
6396	Check if a property has a cast
6397	Get the dirty properties
6398	Generate nav bar header
6399	Add a submenu to the menu
6400	Adds a button
6401	Flush messages .
6402	Adds an item to the collection
6403	Add css
6404	Get gravatar for an email
6405	Array access .
6406	Returns a reference to the database connection
6407	Get locale object
6408	Append parameters to a URL
6409	Linkify a string
6410	Add columns for table footer
6411	Include a css file
6412	Return the current url
6413	Builds POST data
6414	Returns an array of available locales .
6415	Converts a language code to a locale .
6416	Sets the current locale
6417	Setup a single property
6418	Get all status messages
6419	Returns a list of countries available for the given user .
6420	Add an item to list group
6421	Set the object name
6422	set color in string
6423	Get type color
6424	Sends a GET request to the API .
6425	Sends a POST request to the API .
6426	Sends a DELETE request to the API .
6427	Get primary key
6428	Unset a data value
6429	Reindex an array by column name
6430	Draws the page part .
6431	Set up the context
6432	Returns the number of items in the body
6433	Returns true if the body element is empty
6434	Adds slashes to the query
6435	Connect to the database
6436	convert array to insert
6437	Prepare select data
6438	Set the primary key of the model .
6439	Add a slide to the carousel
6440	Finalize the carousel
6441	Adds a message to the loggers
6442	Adds a status object to the log
6443	Get tag name
6444	Get a tag property
6445	Finalize modal
6446	Clones this runner with the next run .
6447	Add an AJAX tab to the page
6448	Print trace information
6449	Attaches an observer to the observable sequence .
6450	Executes an observer .
6451	Detach an observer .
6452	Detach all events for given observer
6453	Validate the pod .
6454	Returns the current connection
6455	Returns the driver
6456	Generates a binding parameter
6457	Normalise driver exceptions .
6458	Creates a database .
6459	Delete a database .
6460	Get database information
6461	Lists all databases
6462	Creates a database connection .
6463	Sets the connection to use .
6464	Returns a Toolbox by name .
6465	Set model formatter .
6466	Load a pod from the collection .
6467	Creates a new graph
6468	Rename collection
6469	Get information about an index
6470	Load a pod
6471	Process a store result
6472	Convert array of documents to Pods
6473	Convert array to Pod
6474	Convert driver document to Pod
6475	Create a new Vertex
6476	Create an Edge
6477	Create a new document
6478	Setup Model for Pod
6479	Determine if the model was previously stored .
6480	Adds a command to the transaction manager
6481	Validates the type
6482	Applies a callback to each element of an array
6483	C crawler .
6484	Parse the URL of an element .
6485	Parses an image node .
6486	Parses the content of a node .
6487	Parses a date time .
6488	Loads the given class name
6489	Start the coverage .
6490	Initialize config object
6491	Declare an edge to a model
6492	Get Inbound Edges
6493	Convert to driver document .
6494	Encode an object .
6495	Creates a new collection
6496	Delete a collection
6497	Rename collection
6498	Trash a collection
6499	Returns information about a collection
6500	Returns information about a collection
6501	Count collection items
6502	Loads a collection
6503	Unload a collection
6504	Get information about an index
6505	Returns the list of fields for a collection
6506	Return one or more records
6507	Get the collection name
6508	Delete user
6509	Returns user information
6510	Delete AQL user functions by namespace
6511	Lists all registered user functions
6512	Returns the current server version
6513	Returns the server information
6514	Returns the server time
6515	Set a single property
6516	Removes a property
6517	Get a system property
6518	Set the document id
6519	Set the distance information for this query .
6520	Reset the meta
6521	Convert to array
6522	Convert to JSON
6523	Convert transaction data to JSON
6524	Convert to driver document .
6525	Load data from driver .
6526	Load data from array
6527	Called on event
6528	Set the to model
6529	Get the id of the to
6530	Set the from model
6531	Get from id
6532	Convert to driver document .
6533	Start a transaction .
6534	Commits the transaction .
6535	Resets the transaction info
6536	Add a read collection
6537	Add a write collection
6538	Pauses the current transaction .
6539	Resumes the current transaction .
6540	Adds a command to the list of commands
6541	Searches all commands by specified action and object
6542	Generate a random identifier
6543	Create new graph
6544	Drop a graph .
6545	Returns information about a graph
6546	Get outbound Edges
6547	Returns the filters for this request .
6548	Renders the filter wrapper .
6549	Render all widgets
6550	Opens a filter container .
6551	Close a container closing tag .
6552	Open a filter form
6553	Close the form
6554	Returns true if the filter is active
6555	Display a filter button .
6556	Renders a reset button .
6557	Renders a back - to - list button .
6558	Get the storage key for persist
6559	Checks if a filter parameter is set .
6560	Get fulltext search conditions
6561	Flattens the value options .
6562	Gets the list filters .
6563	Returns a redirect url based on the post data
6564	Add filter params to url
6565	Sets default filters
6566	build prepared statement
6567	Reduce the collection to a single value
6568	Type check .
6569	Type cast to an iterable .
6570	Register Bugsnag services .
6571	Creates a new guzzle client .
6572	Setup user detection .
6573	Setup the client paths .
6574	Add a new pipeline .
6575	Create a new PipelineBuilder with the given name .
6576	Create a pipeline using the given iterable .
6577	Set the keys
6578	Slices a slice of the iterator .
6579	Sort values .
6580	Set multiple variables at once
6581	Set a variable in the page .
6582	Get the pathname of a page .
6583	Get Script Tag
6584	Checks if the script list is an allowed script combination
6585	Convert a string to a list of Unicode codepoints
6586	Creates fake users .
6587	Get all layouts paths
6588	Add global variables
6589	Generate a page collection
6590	Set param value
6591	Extracts the parameters from a SimpleXMLElement .
6592	Runs a git command .
6593	Sort two arrays by date
6594	Remove an item from the feed .
6595	Replace an item
6596	Merge another feed
6597	Auto - slice the items
6598	Get a list of conflicting users
6599	Batch records in the DB .
6600	Write a feed to the XML
6601	Set current item .
6602	Buffer to buffer .
6603	Sort by date .
6604	Import configuration data
6605	Set from data
6606	Set the source directory .
6607	Set the destination directory .
6608	Find layout .
6609	Fallback layout .
6610	Parse the file .
6611	Returns the current section
6612	Returns the permalink
6613	Set configuration .
6614	Builds the application .
6615	Returns the application version
6616	Filters pages by variable
6617	Sorts an array by date .
6618	Creates a URL
6619	Minify a file
6620	Converts CSS to CSS .
6621	read time
6622	Hashes a file
6623	Collect all pages
6624	Renders an RSS feed .
6625	Loads an RSS feed
6626	Sniff input .
6627	Check if input is of given type
6628	Sniff all input
6629	Runs the sniff
6630	Save a schedule .
6631	Renders the feed
6632	Creates an item node
6633	Get feed author
6634	Returns the URL for the comments route .
6635	Checks if the given string contains XML syntax markers .
6636	Collects the terms from pages .
6637	Create page pages
6638	Compile the views .
6639	Compile all views in a directory .
6640	Compile a single view file .
6641	Generate a diff between two files
6642	Parse a diff string
6643	Boots the extension .
6644	Finish the extension .
6645	Register active extensions .
6646	Run the after event .
6647	Register the providers .
6648	Writes the manifest file .
6649	Register deferred service provider .
6650	Load queued service provider .
6651	Activate an extension .
6652	Map extension aliases .
6653	Register domain aware sites .
6654	Detect Orchestra Platform .
6655	Get an option value .
6656	Register extension events .
6657	Register an extension .
6658	Get a route by name .
6659	Activate an extension .
6660	Refresh an extension .
6661	Reset extension .
6662	Check if the field should be excluded .
6663	Create an instance of the Orchestra Platform driver .
6664	Bootstrap the application .
6665	Bootstrap the application configuration .
6666	Bootstrap the form .
6667	Bootstrap menu handler .
6668	Bootstrap the sidebar placeholder place holders .
6669	Bootstrap the validation rules
6670	Attaches a listener for an event .
6671	Initialize the theme .
6672	Set theme .
6673	Boot the theme .
6674	Resolving the theme .
6675	Get all theme paths .
6676	Get theme autoload files .
6677	Validates the provided theme .
6678	Get available themes .
6679	Renders the macro .
6680	Filters a date .
6681	Verify user status .
6682	Add a new path .
6683	Detect extensions .
6684	Get the contents of a manifest .
6685	Generate the manifest config .
6686	Get composer lock data .
6687	Try to guess the extension name from the manifest .
6688	Guess extension path .
6689	Resolve extension namespace .
6690	Validates an extension name .
6691	Register the view finder instance .
6692	Register theme services .
6693	Detects the themes .
6694	Set the current theme .
6695	Set the theme resolver .
6696	Register the extension .
6697	Register the extension config manager .
6698	Register the extension finder .
6699	Register the service status checker .
6700	Execute the listener .
6701	Get the scheme .
6702	Set the domain .
6703	Get domain .
6704	Get the domain group .
6705	Determine if the path matches the pattern .
6706	Get the route prefix .
6707	Get the root .
6708	Get the base URL of the application .
6709	Resolve the base URL .
6710	Parse YAML .
6711	Checks for duplicate keys
6712	Activate plugin .
6713	Deactivates the manifest .
6714	Register extension providers .
6715	Register an extension plugin .
6716	Boot the application .
6717	Start the application .
6718	Fire extension event .
6719	Get the paths to load files .
6720	Loads an autoloader file .
6721	Process deprecated types .
6722	Start the application
6723	Generate exception log
6724	Generate call trace
6725	Send alert message .
6726	Turns a callable into a daemon
6727	Start a new process
6728	Get the slug of this object
6729	Ensure that the slug has been updated
6730	Send HTTP headers
6731	Set a cookie
6732	Clears all cookies
6733	Make request arguments
6734	Store uploaded files .
6735	Remove one or more arguments
6736	Get array keys matching given regex
6737	Remove htmlspecialchars from array
6738	Creates an array of integers .
6739	Flush all cache files
6740	Combine less files
6741	Connect to the server .
6742	Executes an SSH command .
6743	Determine if the client is on the server
6744	Get the IP address
6745	Create a named pipe
6746	Register a deployer .
6747	Returns the registered deployer .
6748	Registers a server .
6749	Set servers .
6750	Returns a server instance .
6751	Perform the deployment .
6752	Get options from server
6753	Process the opening tag .
6754	Generate ajax slug
6755	Handle a single AJAX request .
6756	Trigger the AJAX callback .
6757	Handle ajax request
6758	Get a post request
6759	Generate a random hex
6760	Starts the application
6761	Clear session variables
6762	Is serialized
6763	Check if slug is active
6764	Adds a new method .
6765	Updates the current session
6766	Clears all session data
6767	Verify that the session is valid
6768	Open a session .
6769	Delete expired sessions
6770	Try to match a route against a route .
6771	Get the data page
6772	Is this page another .
6773	Load class metadata
6774	Create a new condition event .
6775	Initialize all plugins
6776	Get plugin list
6777	Loads the Twig environment
6778	Sets default language
6779	Checks if the token is valid and updates the expiration date
6780	Loads a view
6781	Adds a variable to the script
6782	Add a javascript file to the page
6783	Add a css file to the stylesheet
6784	Get file content
6785	Get content with template
6786	Get all scripts
6787	Get all css files
6788	Get an asset path
6789	Check if the current route is allowed
6790	Get all access rules
6791	Get the roles chain
6792	Get user s language
6793	Translates a choice
6794	Returns translations for specified locale .
6795	Get file translations
6796	Get translation for given id
6797	Get basic translation for given id
6798	Generate a toggle command .
6799	Build the toggle commands for the given attribute .
6800	Build the commands for a translated checkbox .
6801	Main entry point
6802	Prepare and return controller action
6803	Execute the ACL
6804	Execute Auth
6805	Execute the resolve route
6806	Set and app libraries
6807	Get a library instance
6808	Create Core and Controller
6809	call controller method with input arguments
6810	Get the arguments for a function .
6811	Retrieves the roles associated with a token
6812	Get a user s role and its roles
6813	Get current options .
6814	Set multiple parameters
6815	Returns the value of the parameter
6816	Filters a variable
6817	Open a connection
6818	Close a connection
6819	Executes a query
6820	Executes a SELECT query and returns all rows
6821	Executes an SQL statement and returns the inserted id
6822	Executes a SQL query and returns the number of affected rows .
6823	Executes an SQL query and returns the number of affected rows .
6824	Logout the user
6825	Set the user id
6826	Sets the username
6827	Set role id
6828	Sets the role name
6829	Validate a value against a constraint .
6830	Returns the list of installed plugins for a given path .
6831	Search for plugin directories
6832	Search the plugin factory class
6833	Checks if a file implements a specific implementation
6834	Get the string representation of a closure .
6835	Executes a closure .
6836	Executes the given file .
6837	Runs the command for Windows .
6838	Set the path to the autoload file
6839	Checks if the current process is running .
6840	Kill this process
6841	Reset all log sections
6842	Create url from string
6843	Check if an image driver is available
6844	Builds the image
6845	Returns proportional width .
6846	Returns proportional height .
6847	Format a binary string .
6848	Format a bytes value .
6849	Create a new Session instance .
6850	Initialize driver instance
6851	Parse POST data .
6852	Generate request url
6853	Get server parameter
6854	Get the default input definition .
6855	Register commands .
6856	Get application model path
6857	Adds the force option
6858	Adds model argument
6859	Validates the model argument .
6860	Adds table argument
6861	Validates the input argument .
6862	Get Table instance
6863	Generate file .
6864	Handle the request .
6865	Is the stream seekable?
6866	Create a parser with the given content type
6867	Adds a new body parser .
6868	Adds a module argument
6869	Add controller argument
6870	Creates a PSR - 7 request
6871	Creates a server request
6872	Creates a stream .
6873	Creates a stream from a file .
6874	Creates a new uploaded file .
6875	Create Uri instance from string
6876	Formats the given number of bytes .
6877	Formats a number .
6878	Normalize the bytes .
6879	Normalize precision .
6880	Returns a new instance with the specified HTTP method .
6881	Sets the URI .
6882	Returns the target from the URI .
6883	Add a middleware to the end of the middleware stack
6884	Get reason phrase for given code
6885	Get messages .
6886	Get user from incoming message .
6887	Get file extension
6888	Normalize filename .
6889	Get the contents of the stream .
6890	Fix WordPress site url .
6891	Fix WordPress include folder
6892	Fix network admin url filter
6893	Fix WordPress double slashes
6894	Initialize WordPress .
6895	Set the name of the WordPress folder .
6896	Converts a URL to a full path
6897	URL - encode a path
6898	URL path decode
6899	Returns the contents of a directory
6900	Logs a database entry
6901	Write a log entry
6902	Record memory usage
6903	Log time load
6904	Write log sections
6905	Recursive array_flip
6906	Set upload stream
6907	Returns the hash of the uploaded file .
6908	Returns the media type of the uploaded file
6909	Get query params
6910	Check if the current request is ajax request
6911	Convert json string to document
6912	Converts an array of entities to entities
6913	Creates a list of actions from an array
6914	Gets the fields from an array of data
6915	Convert data array to Link objects
6916	Sends a PSR - 7 request .
6917	Perform the actual call .
6918	Prepares the request for execution
6919	Set the URL for the current request
6920	Set request headers
6921	Creates a Response object from the result .
6922	Get the header and body from the result
6923	Parse header string
6924	Count the number of items in the log section
6925	Display the view
6926	Collects information about the included files .
6927	Gather the GET section from the GET section
6928	Gather the post data from the POST section
6929	Gather the input section from the session
6930	Get the current microtime
6931	Returns a summary of a specific section
6932	Create uploaded files
6933	Create a new uploaded file
6934	Recursive array_flip
6935	Recursive array merge
6936	Adds the session to the request .
6937	Show the add form .
6938	Show the form for editing a record .
6939	Attempt to edit a record .
6940	Send a redirect to the edit page .
6941	Order items .
6942	Delete a record
6943	Get uploaded files .
6944	Get an instance with the uploaded files .
6945	Check uploaded files
6946	Load HTTP headers
6947	Return an instance with the specified attribute .
6948	Return an instance without the specified request attribute .
6949	Send 304 Not Modified
6950	Get a specific header
6951	Sets the status of the response .
6952	Process middleware .
6953	Get MySQL version
6954	Authenticates a user .
6955	Finds all active users .
6956	Find all deactivated users .
6957	Add a user
6958	Returns the option value
6959	Set current language from post id .
6960	Check if the given key is an encrypted container .
6961	Check if the given string is an encrypted string .
6962	Returns a string representation of the class .
6963	Export an array as PHP code .
6964	Pre - process .
6965	Post global process .
6966	An exception for invalid token types .
6967	Make new container .
6968	Recover a deleted record
6969	Process class extensions
6970	Process new config classes
6971	Config class processing .
6972	Process class .
6973	Set definitions .
6974	Gets a definition .
6975	Removes a definition .
6976	Set configuration classes .
6977	Generate container classes
6978	Dumps the containers .
6979	It should return value
6980	Set the email address
6981	Send notice request
6982	Make a call .
6983	Create a JsonResponse from an Exception .
6984	Parse http response .
6985	Request for action permission
6986	Wait for subscription message
6987	Send the result of an action result .
6988	Format the layout template files .
6989	Write to a file .
6990	Converts a string to dashed .
6991	Get a slice of the string
6992	Get indices based on start and step .
6993	Returns the name of the option .
6994	Validate values array argument .
6995	Creates an option instance .
6996	Declare the message to send to ReplyStack
6997	Get the value of a property .
6998	Returns true if the array matches the expected value
6999	Compare two images
7000	Protected create diff between two images
7001	Create comparison image
7002	Compare two images
7003	Register a route with POST method .
7004	Add a route to the routing table
7005	Try to find a matching route
7006	Run the route .
7007	Redirect to url
7008	Parse route parameters
7009	Get the date from a file .
7010	Save image
7011	Make a GET request
7012	Perform a POST request
7013	Set the authentication headers
7014	Get application settings
7015	Validate the configuration
7016	Get excerpt from text
7017	Handles PHP errors
7018	Determine the list of content extensions .
7019	Validates the widget id
7020	Set the user id
7021	Gets the total number of documents
7022	Append a string to this string
7023	Prepends a string to the beginning of this string
7024	Checks if the string matches the given pattern .
7025	Limit the number of words .
7026	Generate a random UUID
7027	Join array to string
7028	Converts this string to HTML entities .
7029	Returns a substring of this string .
7030	Limit the string .
7031	Truncate the string .
7032	Parse string to container
7033	Encrypt the token .
7034	Initialize from encrypted string
7035	Convert the value to a container .
7036	Generate a parser from a grammar
7037	Set the organization settings
7038	Get documents .
7039	Set the number of items per page
7040	Set the page start
7041	Convert value to integer .
7042	Get searchable .
7043	Get bool value from string
7044	Get the grammar
7045	Generate GIF command
7046	Returns command for converting images to GIF
7047	Get many tokens .
7048	Formats this number as a string
7049	Checks whether a property exists by its name .
7050	Returns a property by name .
7051	Removes a property by name .
7052	Check if this class has a method by name
7053	Get a method by name .
7054	Removes a method by name .
7055	Parse meta files
7056	Runs all registered plugins
7057	Load the plugins .
7058	Setup the routes .
7059	Get a value by key .
7060	Set a value in the collection .
7061	Push a value to a key .
7062	Search for a value .
7063	Get keys by field
7064	Remove duplicates
7065	Get all numeric keys
7066	Join items together
7067	Join list by key
7068	List values by key .
7069	Splits the collection into chunks .
7070	Filter the collection using the given function .
7071	Applies a callback to each item in the collection .
7072	Merge items into this collection
7073	Merge items with a specific key
7074	Increase the counter .
7075	Get random key
7076	Get random item
7077	Slice the collection
7078	Reject items that match a truth test
7079	Forget an item .
7080	Reverses the collection .
7081	Group items by key
7082	Remove an offset from the collection
7083	Get the rest of the collection starting at the given index
7084	Get the rest after the given key
7085	Get the difference between two values
7086	Take values from the collection
7087	Get an item from the collection
7088	Returns a new Collection containing all values from the given array .
7089	Create a new collection with the given condition .
7090	Initialize from JSON string .
7091	Convert file to container
7092	Initialize from serialized string
7093	Parse an encrypted container .
7094	Initialize from string
7095	Build where conditions .
7096	Recursive helper for recursive
7097	Recursive iterator to array
7098	Get group by key
7099	Filters an array recursively
7100	Forget items recursively .
7101	Recursively removes unique items .
7102	Get the value of a key .
7103	Add or edit an object
7104	Returns the command - line option .
7105	Get excerpt from files .
7106	Fetch a value from an array using dot notation .
7107	Remove a value from an array
7108	Get value from array
7109	Check if value exists in array
7110	Set value in array
7111	Searches for a value in an array
7112	Render a library
7113	Deny deny access denied
7114	Get new token
7115	Set the input id .
7116	Set Bound .
7117	Adds a new autocomplete type .
7118	Removes an autocomplete type .
7119	Returns a component restriction .
7120	Sets the components restrictions .
7121	Add a component restriction .
7122	Removes a component restriction .
7123	Sets input attributes .
7124	Set an input attribute
7125	Implements identiptern .
7126	Convert an image
7127	Compresses an image
7128	Compresses a SVG .
7129	Compress a PNG image .
7130	Decode data URL
7131	Generate one xpx
7132	Convert extension to format
7133	Convert format to file extension
7134	Convert an extension to MIME type .
7135	Convert format to compression type
7136	Convert format to compression quality .
7137	Set file extension
7138	Change the extension of a file .
7139	Parse format arguments .
7140	Send the request and return the response .
7141	Cleans input data
7142	Get the maximum allowed size
7143	Renders a circle
7144	Check if version is valid
7145	Checks if the given dev is valid
7146	Check if a version is valid .
7147	Create CSRF token
7148	Create a CSRF input .
7149	Verify a CSRF token .
7150	Create request from globals
7151	Get request data
7152	Get form data
7153	Get the response body
7154	Normalize AMPs .
7155	Renders a map type id .
7156	Get first in name .
7157	Returns the last part of a name .
7158	Converts a name to an acronym .
7159	Convert a name to a PHP variable .
7160	Checks if the string is HTML .
7161	Validate UUID .
7162	Parse shard id from UUID .
7163	Validate shard ID .
7164	Convert a UUID to a UUID .
7165	Validate type ID .
7166	Convert a UUID to a local ID .
7167	Validates a local ID .
7168	Parse a UUID .
7169	Builds a 64 bit integer from shard Id and shard id .
7170	Renders a Polyline object .
7171	Set the center .
7172	Set the latitude .
7173	Set longitude
7174	Set the spatial wrap flag
7175	Set the control position .
7176	Set the scale control style .
7177	Get the geocoder status
7178	Get a value from the cache .
7179	Get the sub path for a primary key .
7180	Calculate sha1 keys .
7181	Get a class instance
7182	Match string against regex
7183	Get template instance
7184	Returns strength of password .
7185	Retrieves a process
7186	Check if the server is memcache
7187	Checks the internal map for the given URL
7188	Check the cache for a given URL
7189	Checks the contents of a URL .
7190	Cache an item .
7191	memcache memcache
7192	Get the map
7193	Get map from file
7194	Check if url is local
7195	Check if a variable is valid
7196	Convert a variable to acronym .
7197	Convert a variable to slug .
7198	Convert a variable to camel case .
7199	Render a Size object .
7200	Determine if the given email is a role - based role .
7201	Parses the given value to an array of addresses .
7202	Parse headers .
7203	Recursively parse attachments .
7204	Parses the given content type into a presentation representation .
7205	Parses the given representation to a class name
7206	Calculates the difference between two numbers
7207	URL safe encode
7208	URL safe decode .
7209	Create a new nonce .
7210	Create a hidden input field .
7211	Verify a nonce .
7212	Sets the origins .
7213	Get human readable time
7214	Returns an array of items from the cache .
7215	Renders a marker
7216	Build the json array
7217	Renders a MarkerShape object .
7218	Renders a scale control style .
7219	Checks if a slug is valid
7220	Check if a slug is reserved
7221	Name from slug .
7222	Convert a slug to a variable name .
7223	Sets the coordinates .
7224	Save configuration to cache .
7225	Get all results
7226	Parse the view .
7227	Set variables .
7228	Check if file has parent .
7229	Get parent variables .
7230	Get compiled template
7231	Gets the options for the driver
7232	Renders a rotate control .
7233	Encode a value
7234	Recursively decode HTML entities .
7235	Call controller action
7236	Render kml layer
7237	Get a value from the pool
7238	Set a value in the cache .
7239	Clear cache entry
7240	Generate a new primary key .
7241	Generate namespace key .
7242	Compare two servers
7243	Add server connections to the pool
7244	Renders an input container .
7245	Renders the javascripts for the autocomplete
7246	Renders an autocomplete object .
7247	Register the service provider .
7248	Close the current request
7249	Turns off or off the HTTP response
7250	Set the location of the Directions .
7251	Set the stopover
7252	Convert PHP errors to human readable text .
7253	Set extension .
7254	Change extension .
7255	Returns whether an asset exists
7256	Gets an asset option .
7257	Sets an asset option .
7258	Removes an asset .
7259	Modify request attributes
7260	Set the zoom control style .
7261	Decode single id
7262	Sets the results .
7263	Set the status of the geocoder .
7264	Check if string is valid
7265	Check if the current user is an engine .
7266	Normalize a path
7267	Page URL .
7268	Set preventHighways
7269	Set preventolls
7270	Sets the list of destinations .
7271	Add a new destination
7272	Add a new origin coordinate
7273	Set the region of the distance matrix .
7274	Set the language of the distance matrix .
7275	Set travel mode
7276	Set unit system .
7277	Returns the control positions
7278	Set the direction status .
7279	Renders an overview map
7280	Render a Bound object .
7281	Renders the extends
7282	Print all statistics
7283	Sets markers .
7284	Set the helpers .
7285	Gets a specific marker helper
7286	Set extension helpers .
7287	Returns an extension helper by name .
7288	Removes an extension helper
7289	Renders the HTML container
7290	Renders the stylesheet for a Map
7291	Renders javascripts for a map
7292	Renders javascript libraries
7293	Renders javascript before a map
7294	Renders javascript after a map
7295	Renders the JS container
7296	Renders js container coordinates
7297	Renders the js container bounds
7298	Renders points for a map
7299	Renders js container sizes
7300	Renders a JS container map .
7301	Renders js container objects
7302	Renders the JSON encoded polylines .
7303	Renders the groundlay of a map
7304	Renders the js container objects
7305	Renders the polylines of a map
7306	Renders the rectangle rectangle of a map .
7307	Renders js container info windows
7308	Renders JavaScript marker images
7309	Renders the js container shape
7310	Renders js container marker cluster
7311	Renders KML Container
7312	Renders js container event manager
7313	Renders js container extra
7314	Renders a map .
7315	Renders the center
7316	Renders the shape of a map .
7317	Computes the coordinates of the given map .
7318	Computes the bounds of a map
7319	Compute map points
7320	Computes the sizes of a map .
7321	Computes the list of marker images
7322	Returns an array of marker shapes for the given map .
7323	Computes an array of marker info windows
7324	Renders the map controls .
7325	Render a control
7326	Generate UUID
7327	Generate a UUID
7328	Generate v4 UUID
7329	Generate v4 UUID
7330	Get a package by name .
7331	Applies a callback to each item
7332	Creates a new repository with the given callback
7333	Add a package contract .
7334	Sets the address
7335	Set coordinate coordinate
7336	Set Bound .
7337	Sets the region of the request .
7338	Set request language
7339	Loads a template .
7340	Get a single Route
7341	Parse a YAML value .
7342	Set WordPress flags
7343	Sort an array by key
7344	Returns the request method .
7345	Returns the scheme .
7346	Get the host name
7347	Get the root host
7348	Check if the current request is SSL
7349	Check if the current host is a localhost
7350	Set location type .
7351	Replaces special characters for m0
7352	Returns all directives status
7353	Load data .
7354	Load property data
7355	Retrieves an array of data that can be overridden .
7356	Overload data
7357	Open an url .
7358	Set marker image anchor .
7359	Set the origin of the marker image .
7360	Set the scaled size .
7361	Set the size of the attachment .
7362	Renders an InfoWindow object .
7363	Renders open tag
7364	Renders an InfoWindow
7365	Register enabled modules .
7366	Get an asset URL .
7367	Load routes .
7368	Check if function is callable
7369	Renders a ground overlay
7370	Emits the response .
7371	Set a variable in the cache .
7372	Gets a key from the cache .
7373	Unset a key .
7374	Unset a pattern for a key .
7375	Add a value by reference key
7376	Unset an item by reference key
7377	Unset keys by reference pattern
7378	Renders a map type control .
7379	Calculates a scalar value
7380	Single quoted string
7381	Recursive double quotes
7382	Renders the given map type control style .
7383	Signs the URL
7384	Returns an instance of SearchTermHighlighter .
7385	Get shard id
7386	Assign shard id
7387	Set travel mode .
7388	Set the prefix javascript variable
7389	Select country options
7390	Return a list of active items .
7391	Renders a StreetViewControl object .
7392	Normalize a value
7393	Checks if the value matches a given regex .
7394	Normalize a value
7395	Bounds special characters
7396	Convert URL to URI pattern
7397	Set widthUnit .
7398	Set heightUnit .
7399	Generate a new key
7400	Checks if the given value is a string .
7401	Strip the query part of the URL
7402	Parse the given query string into an array of arguments .
7403	Builds a query string
7404	Add SHA256 signature to URL
7405	Remove SHA256 signature .
7406	Check if a SHA256 hash is valid .
7407	Set coordinates .
7408	Adds a polygon to the shape .
7409	Update a customer .
7410	Update a customer
7411	Convert an amount to a unit .
7412	Get a scope entity by identifier
7413	Renders a scale control .
7414	Generate the url for a geocoder request
7415	Builds a Geocoder response .
7416	Builds a GeocoderResult .
7417	Builds the geocoder address components .
7418	Builds a Geocoder Address component
7419	Builds a GeocoderGeoderGeoderGeoderGeometry object .
7420	Processes the distance request
7421	Generates the url for the distance request
7422	Parse the response .
7423	Builds the distance matrix from the response .
7424	Build matrix rows
7425	Short description of method buildDistanceMatrixResponse
7426	Build distance matrix element
7427	Renders a point object .
7428	Splits the parameter string into an array .
7429	Parse the given parameters .
7430	Get the current HTTP headers
7431	Send HTTP headers .
7432	Send no cache headers
7433	Get status slug .
7434	Get status message .
7435	Send HTTP status .
7436	Parse header .
7437	HTML tags .
7438	Register migration files
7439	Register module translations
7440	Set the pixel offset
7441	Set open event .
7442	Renders a pan control .
7443	Returns the mouse events
7444	Set map type ids .
7445	Adds a new map type id
7446	Set the map type control style .
7447	Set cookie .
7448	Get cookie value
7449	Renders a DOMEvent .
7450	Renders a DOMEvent once .
7451	Renders an event .
7452	Renders an event only once .
7453	Renders the given animation
7454	Renders a ZoomControl object .
7455	Get max execution time
7456	Check a slug .
7457	Returns the list of address components .
7458	Sets the list of address components .
7459	Set partial match
7460	Get gravatar url
7461	Set the center of the map .
7462	Returns whether or not a map option exists
7463	Set map options
7464	Get a map option
7465	Set a map option
7466	Removes a map option .
7467	Checks if the given stylesheet option exists
7468	Sets multiple stylesheet options at once
7469	Gets a specific stylesheet option
7470	Sets a specific stylesheet option .
7471	Removes a specific stylesheet option
7472	Set MapTypeControl .
7473	Set overview map
7474	Set pan control
7475	Set the rotate control
7476	Set the scale control
7477	Set the street view control
7478	Set zoom control
7479	Add marker to marker cluster
7480	Add info window
7481	Add a polyline to the map
7482	Add an encoded polyline .
7483	Add a polygon .
7484	Add rectangle .
7485	Add a circle .
7486	Add a ground overlay .
7487	Set a value in the cache
7488	Deletes the file
7489	Set preventHighways
7490	Set avoidolls
7491	Set the destination .
7492	Set whether the DirectionsRequest should be optimized .
7493	Set the origin coordinate
7494	Set route alternatives
7495	Set the region of the request .
7496	Set request language .
7497	Set travel mode
7498	Set unit system
7499	Sets an array of ways
7500	Add a new route
7501	Is this travel valid?
7502	Submit JSON data .
7503	Log issue .
7504	Log a review .
7505	Write a log file to the log directory .
7506	Clean the log event name
7507	If the log file is older than the maximum number of days
7508	Perform a curl request .
7509	Parse source .
7510	Build a document .
7511	Parse a section .
7512	Parse YAML metadata .
7513	Get a query variable
7514	Get template .
7515	Get a remote OAuth .
7516	Generate a sha1 hash .
7517	Convert a value to its ASCII equivalent .
7518	Returns the status of the distance matrix
7519	Strips leading from a string
7520	Sets the steps .
7521	Route Directions Request .
7522	Builds the directions response .
7523	Builds the list of directions .
7524	Builds the DirectionsRoute object
7525	Builds a list of directions .
7526	Builds a DirectionsLeginator object from the given object .
7527	Builds the directions step .
7528	Builds the directions step object .
7529	Lightens the color .
7530	Darkens the color by the given percentage .
7531	Apply color to the current color .
7532	Desaturate the color .
7533	Combine the HSL values .
7534	Starts a new session .
7535	Checks if the provided version is valid .
7536	Checks if the given web version is valid .
7537	Checks if the given version is valid .
7538	Get the date
7539	Get the time for the current version
7540	Get self with no cache headers
7541	Create response with success status
7542	Response with error
7543	Output the response
7544	Set the legs .
7545	Sets warnings .
7546	Sets the list of possible ways .
7547	Renders the Zoom Control style .
7548	Getter for metadata .
7549	Issue an access token request
7550	Validate a request
7551	Get access token repository
7552	Adds slashes to the string
7553	Removes all slashes
7554	Render Google Maps
7555	Sets the elements .
7556	Renders a control position .
7557	Get current IP address
7558	Get the region for an ip address
7559	Get the country based on IP address .
7560	Is this page ajax?
7561	Is api?
7562	Get or set the current action
7563	Determine if the action is being executed
7564	Subscribe a new user to a list
7565	Get member data
7566	update a user
7567	Delete a user from a list
7568	Returns a SHA1 version of a string
7569	Adjusts the luminosity of a color .
7570	Cleans a hex value .
7571	Removes empty numeric config arrays
7572	Create request class
7573	Create request body
7574	Remove empty numeric arrays
7575	Renders a rectangle .
7576	Output HTML to HTML
7577	Recursively convert an array
7578	Renders a marker
7579	Get the license key .
7580	Returns the libraries that are used in the given map .
7581	Escapes the order .
7582	Serialize a Closure .
7583	Unserialize a closure .
7584	Serialize a value .
7585	Unserialize a value
7586	Generate embed markup
7587	Get embed .
7588	Embed string via WordPress
7589	Renders an EncodedPolyline object .
7590	Set the southwest coordinates of the bounding box .
7591	Set the NorthEast coordinate
7592	Get center coordinates
7593	convert bytes to bytes
7594	Get the bytes of a remote URL .
7595	Converts url parts to string .
7596	Renders a coordinate object .
7597	Renders a marker image .
7598	Parses an XML string .
7599	Pluralize an array
7600	An exception for invalid distance matrix request
7601	Parse a host name into an array .
7602	Unparse name parts
7603	Set marker position
7604	Set marker animation .
7605	Setter for icon
7606	Set the shadow image
7607	Set shape .
7608	Callback for AJAX handler .
7609	Get first image url
7610	Convert HTML attributes to HTML attributes .
7611	Set bounding box coordinates .
7612	Get message .
7613	Get error messages
7614	Retrieve error data
7615	Add error message
7616	Add a coordinate
7617	Load HTML .
7618	Minify the file .
7619	Indent the current node .
7620	Adds the organization reference to the document .
7621	Creates a view model for the set password form
7622	Get organization entity
7623	Create error view
7624	Add an asset
7625	Reverses all styles ordered by params
7626	Add an asset to the first page
7627	Add assets after another file
7628	Add meta data .
7629	Renders meta tags
7630	Generate controller .
7631	Load a single file
7632	Create QueryBuilder
7633	Processes an invitation
7634	Validate the email .
7635	Loads or creates a user .
7636	Load the worker type .
7637	Proxy an association method
7638	Returns the cursor for a given organization .
7639	Finds organizations by name
7640	Find by user
7641	Find Employee by Employee
7642	Creates a new organization name
7643	Finds a draft document
7644	initialize form fields
7645	Check if the user is an employee
7646	Update user permissions
7647	Set the organization name
7648	Set user permissions
7649	Returns the image
7650	Set contact .
7651	Get the employees .
7652	Get a single employee
7653	Get employees by role
7654	Set the creation options
7655	initialize the collection
7656	Get formular for an organization
7657	Returns the URI for the image .
7658	Stores an organization image .
7659	Extract properties from an object
7660	Hydrate a value .
7661	Check if the user has create a new job .
7662	Configure the form .
7663	Ensure the order number is correct .
7664	Encrypts 3DES
7665	Create Merchant Signature Notif
7666	Validates a notification signature
7667	Sign merchant parameters
7668	Make a http request
7669	Get ticket articles for this ticket .
7670	Make an HTTP request .
7671	Make a POST request
7672	Make a PUT request
7673	Get articles for a ticket
7674	Get a single value
7675	Get a remote object
7676	Get all items
7677	Creates a new object .
7678	Updates the object
7679	Delete this object .
7680	Get the URL for a method .
7681	Get ticket information
7682	Add a ticket
7683	Search for a given search term .
7684	Remove a ticket
7685	Deletes a shared memory entry
7686	High level function to fetch the proxy type
7687	Get connection info
7688	Do the loop .
7689	Execute the request .
7690	Each item in collection
7691	Get a single item
7692	Returns the source object for the given id
7693	Fetch API data
7694	Validates the rights of a permission
7695	Set a parameter
7696	Set multiple params
7697	Creates a request transaction
7698	Save Album
7699	Start callback
7700	Get an access token by code
7701	Convert hits to items
7702	Search by query .
7703	Replaces all leading zeros in a string
7704	Replaces all leading zeros in a string
7705	Replaces all dots except the last one .
7706	Convert intl formatter to malot
7707	Convert malot to int format
7708	Adds picker configuration
7709	Bind the Alexa request .
7710	Register the middleware .
7711	Resumes the play playlist .
7712	Return the AlexaRequest instance .
7713	Add middleware to request
7714	Checks if the given route matches the request .
7715	Create a new AlexaRoute instance .
7716	Get a session value
7717	Updates a slot
7718	Get all UriValidators
7719	Compiles the route .
7720	Get the certificate from the request .
7721	Prepare response data .
7722	Send a request through the router .
7723	Gather the application middleware .
7724	Save the given certificate to the filesystem .
7725	Retrieves the certificate chain from the store .
7726	Calculate the file path for the given certificateChainChainURI .
7727	Set custom words .
7728	Capitalizes a string .
7729	Normalize the input
7730	Process all word parts
7731	Process first sentence words in parts .
7732	Process the last word in parts .
7733	Process word .
7734	Perform a regular expression match .
7735	Get the list of suffixes
7736	Breaks words in a string
7737	Check word is salutation
7738	Check word suffix
7739	Generate emoji constants
7740	Parses a string to chop
7741	Emits a string .
7742	Get first word in a string .
7743	Check if given variable is stringy .
7744	Get the last word of a string .
7745	Converts a string to lower case .
7746	Markdown as Markdown .
7747	Reads a string .
7748	Parses words .
7749	Get the substring after the first occurrence of a separator .
7750	Get the substring after the last occurrence of a separator .
7751	Get the substring before the first occurrence of a separator .
7752	Gets the substring before the last occurrence of a separator .
7753	Titleize a string .
7754	Trims whitespace from a string .
7755	Trims whitespace from a string
7756	Trims whitespace from a string
7757	Convert a string to text .
7758	Converts a string to upper case .
7759	Convert text to words .
7760	Get setting by name
7761	Get icon property
7762	Convert the composer to an array .
7763	Display blog index .
7764	Display the post .
7765	Store a new tag .
7766	Show the form for editing the tag .
7767	Update the tag .
7768	Remove the given tag .
7769	Display index page .
7770	Clear the cache .
7771	Handle the download .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Handle configs .
7775	Register translations .
7776	Register the views .
7777	Display the profile page .
7778	Update the specified profile in storage .
7779	Authenticate user .
7780	Get current version
7781	Get post fill data .
7782	Enables an extension .
7783	Disable an extension
7784	Uninstall an extension .
7785	Migrate an extension .
7786	Get enabled bootstrappers .
7787	Sanitise the input
7788	Display the home page .
7789	Get fields from model .
7790	Get the post data for a tag .
7791	Normalize blog data .
7792	Store a newly created post .
7793	Update the post in the canvas .
7794	Copy theme public .
7795	Publish theme views
7796	Clean up theme
7797	Get default theme .
7798	Get active .
7799	Get general middleware
7800	Get the currently installed route middleware
7801	Get the Admin Middleware
7802	Returns the blog main path
7803	Get the blog prefix
7804	Get the admin prefix
7805	Get auth prefix
7806	Get password prefix
7807	Display the index page .
7808	Get the XML for the PayPal transaction .
7809	Scan a file
7810	Multiscans a file
7811	Scan a file
7812	Read a response from the server
7813	Process single file .
7814	Validate the file .
7815	Sanitize a file name .
7816	Delete a file
7817	Move an uploaded file .
7818	Returns a list of available themes .
7819	Get asset path
7820	Retrieves the current version of an asset
7821	Get the path for the given file .
7822	Make a directory .
7823	Make a file .
7824	Get the assets path .
7825	Get template content
7826	Create translations .
7827	Fetch the translation for a given message .
7828	Updates a translation .
7829	Flag a translation .
7830	Create an asset .
7831	Download all translations
7832	Upload all translations .
7833	Synchronize all translations .
7834	Regenerate messages .
7835	Copy values from config to project
7836	Adds a hash for a specific type
7837	Returns the value as a string .
7838	Search the class map .
7839	Search for PSR - 4 paths .
7840	After save callback .
7841	Before query .
7842	After query .
7843	Synchronizes a collection of items with the given items .
7844	Synchronize a collection of items with the given items .
7845	Find a product item .
7846	Check item integrity
7847	Build item data .
7848	Fill entity attributes
7849	Setup default criteria .
7850	Perform action .
7851	Do before or after action
7852	Validates the action .
7853	Performs a query .
7854	Set paginate .
7855	Toggles exceptions .
7856	Applies criteria to query
7857	Update an entity .
7858	Fetch a list of records
7859	Find a single entity by key .
7860	Finds a single entity by criteria .
7861	Fetch objects matching criteria
7862	Fetch objects by their keys
7863	Returns a list of records
7864	Create a new attributes query .
7865	Replace placeholders in config values
7866	Set view path
7867	Send a file to the browser
7868	Get the mime - type of a file
7869	Maps the exception to an exception .
7870	Sets an aspect definition
7871	Sets a pointcut .
7872	Retrieves a pointcut
7873	Returns an array of files that can be scanned for the given path .
7874	Check if the path is scannable
7875	Converts an error code to a human readable string .
7876	Dispatch a dispatch
7877	Invoke an action
7878	Checks if the current socket is available
7879	Retrieves a bean definition by its name
7880	Search and replace properties
7881	Gets the constructor arguments for a definition .
7882	Instantiate a bean by constructor
7883	Instantiate a bean by class name
7884	Instantiate a factory by creating a new instance of the bean .
7885	Instantiate a bean
7886	Create the dependencies for the bean dependencies
7887	Apply the aspect to the object
7888	Applies specific aspects to the bean definition
7889	Applies all global aspects to the bean
7890	Applies aspects to the bean definition
7891	Creates a bean .
7892	Setup initialization methods
7893	Inject non setter method
7894	Injects a property value
7895	Get a bean
7896	Returns the container instance .
7897	Fill a bean aware interface
7898	Handler for signal .
7899	Loads a class
7900	Unserialize a child bean
7901	Populate classes per annotation .
7902	Loads an XML class .
7903	Loads the bean factory .
7904	Closes the socket
7905	Open the socket .
7906	Free a peer
7907	Create proxy class
7908	Generate a parameter code
7909	Create method code
7910	Create a proxy for the given object .
7911	Loads a YAML file .
7912	Load the YAML file .
7913	Initialize the client
7914	Opens the connection .
7915	Returns an instance of the configured cache class .
7916	Triggers after a bean definition
7917	Triggers beforeCreate event
7918	Triggers afterCreate listeners for the bean .
7919	Triggers before all lifecycle listeners
7920	Triggers aftersemble listeners .
7921	Open log .
7922	Returns the interceptors for a method
7923	Returns the exception interceptors for a method
7924	Call the interceptors
7925	Invokes the exception interceptors
7926	Invokes the registered interceptors
7927	Closes the socket
7928	Read from a buffer
7929	Opens the socket .
7930	Adds an array of objects
7931	Build the URI
7932	Overwrite application config .
7933	Resolve a file path .
7934	Get published dropdown list
7935	Finds the Page model based on its alias .
7936	Builds a new Link object .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Registers translations .
7939	Registers required scripts
7940	Returns the vote for an object .
7941	Get the from address
7942	Loads a user by username .
7943	Hydrates a user from the database .
7944	Creates a new user
7945	Sets a user password .
7946	Check if the given user has the given password .
7947	Check if the user is logged in .
7948	Finds one by criteria
7949	Finds a row based on the criteria
7950	Creates common find sql
7951	Returns the number of records matching criteria
7952	Inserts a new user .
7953	Update a user
7954	Deletes a user .
7955	Validate user .
7956	Clear the identity map
7957	Login as a user
7958	Initialize signal handler
7959	Remove all caught handlers
7960	Waits until a timeout occurs .
7961	Get result from pool
7962	Get all results
7963	Applies a function to the pool
7964	Get the number of pending requests .
7965	Sends data to a socket .
7966	Fetch data from a socket .
7967	Migrate users down
7968	Register a new user .
7969	Confirm email action
7970	User login action .
7971	Resend the confirmation token .
7972	Renders the user view .
7973	Edit a user
7974	Validates the current user .
7975	Register the routes .
7976	Returns an array of formatter configurations .
7977	Get the formatter for the accept header .
7978	Format the payload .
7979	Detect the env file
7980	Get the type of the accept header .
7981	Builds the middleware
7982	Run the router .
7983	Handle action .
7984	Get the domain payload .
7985	Invoke the responder
7986	Get response status .
7987	Get the command name from a resource .
7988	Run the before commands .
7989	Get per page values
7990	Add where statements to the query .
7991	Bootstrap the application .
7992	Allow HTTP methods .
7993	Set or get the pattern for this route .
7994	Tokenize the pattern
7995	Returns the regular expression
7996	Returns the variables
7997	Check if the route matches the request .
7998	Builds an array of variables for the route .
7999	Dispatch router .
8000	Generates a link for the current request .
8001	Compiles the route .
8002	Check if the route matches the request .
8003	Generate a link for the current request .
8004	Tokenize the given pattern .
8005	Tokenize a pattern .
8006	Tokenize a pattern .
8007	Splits a pattern into parts .
8008	Compiles a token .
8009	Scaffolds a namespace
8010	Bind a route .
8011	Create a group of routes
8012	Routes a request
8013	Normalize the request
8014	Routes the request
8015	Link a named route .
8016	Clears all routes .
8017	Generates JS code for the workflow
8018	Get file .
8019	Gets an access token .
8020	List addressbooks
8021	Get email from book
8022	Add email to addressbook
8023	Get campaign cost
8024	Create a campaign
8025	Add Sender
8026	Activate sender
8027	List website subscriptions
8028	Set the state of a subscription
8029	Create a push task
8030	Generate a hash for sendpulse .
8031	Send request to website
8032	Sends a request to the API
8033	Pre send event
8034	Decodes a new line encoded response .
8035	Decodes a URL encoded response
8036	Gets all messages from the IMAP server
8037	Mark a message as processed
8038	Returns the type of the given mail .
8039	Auto refund method
8040	Automatically apply SSL
8041	Auto replace SSL
8042	Auto revoke SSL
8043	Collect SSL information
8044	Get list of DCV email addresses
8045	Perform SSL check request
8046	WebHost report
8047	Enter the Domain Control Code
8048	Creates an exception based on the response array
8049	Generate the meta tags
8050	Set the description
8051	Reset all properties .
8052	Register the service bindings .
8053	Generates opengraph tag
8054	Adds raw data .
8055	Prepare data for rendering
8056	Checks to see if a given URL exists .
8057	Validate the data .
8058	Fill an array of commands
8059	Fill a set of command types .
8060	Set the index
8061	Add multiple types at once
8062	Set new settings
8063	Deletes a document from the index
8064	Creates a new index
8065	Update index settings
8066	Execute the command
8067	Convert request body to JSON
8068	Set the sort order
8069	Set the facets for the query .
8070	Composes the final query
8071	Convert parameters to array
8072	Adds a node to the cluster
8073	Sets the MustFilter on the query .
8074	Delete a document
8075	Set the batch of commands
8076	Execute the batch command
8077	Adds a new request
8078	Make a POST request
8079	Make a PUT request
8080	Make a HTTP DELETE request
8081	Execute all pending requests
8082	Add new options
8083	Sets random nodes
8084	Autodetect nodes
8085	Add a document to the batch
8086	Fills the current command
8087	Finalize the current command
8088	Check current command .
8089	Get Gallery object
8090	Init album .
8091	Init an album
8092	Generate an album name
8093	Upload an album
8094	After deleting picture
8095	Get resize options
8096	Add image styles
8097	Delete all previous pictures
8098	Save a picture
8099	Create extra images
8100	initialize the image
8101	Prepares an image
8102	Configure Gallery
8103	Configure the database
8104	Create the config file
8105	Checks if the documentation is missing
8106	Generate service code
8107	Returns a link to upload pictures
8108	Show a room
8109	Show photo rooms
8110	Load scripts .
8111	Delete a picture
8112	Sort pictures
8113	List channel sections .
8114	Starts the worker
8115	Stop the process
8116	Kill the process
8117	Send a payload
8118	Called when worker starts
8119	Fork a thread
8120	Create an AuthnRequest
8121	Parses a SAML response into a SAML Response object .
8122	Returns all binaries matching the predicate
8123	Returns a list of installed binaries .
8124	Update all installed binaries
8125	Update a single binary
8126	Starts selenium process .
8127	Clean all files
8128	Assert that the selenium startsitions are met .
8129	Register the binaries .
8130	Creates a new binary instance .
8131	Get the value of a valid external url .
8132	Returns the Linux file name .
8133	Extracts the file to the given directory .
8134	Called when a notification is received .
8135	Watch the progress .
8136	Get the pre message for the given binary name .
8137	Get post message
8138	Adds a pipe to the pipeline .
8139	Convert an item
8140	Convert an item value
8141	Write an item
8142	Get transport from request
8143	Validates a password against a policy .
8144	Get the taxonomy .
8145	Checks if a value is valid .
8146	Get the taxonomy description .
8147	Get an environment variable
8148	Get client IP
8149	Returns the current URL .
8150	Parse query string
8151	Checks if a property is set
8152	Lookup an address
8153	Do include .
8154	Process action line
8155	Slice down an array down
8156	Get an item from the array .
8157	Updates a form read .
8158	Get the field name from the payload .
8159	Get matching item .
8160	Checks if an item has a matching item .
8161	Get an item from the aggregate .
8162	Replace variables in the given value
8163	Load configuration data
8164	Load JSON data from JSON file
8165	Set LatLng
8166	Template variable getter .
8167	Get error response
8168	Redirects to the form .
8169	Add form aggregate
8170	Handles removing item from form
8171	Determine whether the composer should be loaded .
8172	Get plugin class names
8173	Get install name .
8174	Guesses the install name from the given package name .
8175	Map a package s extra
8176	Writes the plugin configuration to an array .
8177	Get root package
8178	Returns the path for the given package
8179	Initialize the install directory for the given package type
8180	Generate the palette
8181	Get the meta palette of a palette
8182	Creates an exception for a closing context
8183	Enter the theme context .
8184	Build context config .
8185	Get color .
8186	Rotates the color
8187	Convert HSL color to RGB .
8188	Enter the current context .
8189	Marks the current context as entered in the stack .
8190	Switch the current context
8191	Loads the configuration from bundles .
8192	Set the config type argument .
8193	Get template groups
8194	Render the pagepicker
8195	Get all articles
8196	Get all modules
8197	Pre render callback
8198	Parse the given buffer .
8199	Register services tagged with the given definition .
8200	Initialize the environment .
8201	Initialize the layout .
8202	Add child to element
8203	Compiles PHP code .
8204	Compiles a node .
8205	Throws a Pug exception .
8206	Convert Doctrine type to PHP type
8207	Returns the file reflector .
8208	Returns the doc block
8209	Get the doc block from a property .
8210	Gets the doc block from the method .
8211	Extract the php type and its class name .
8212	Login with username and password
8213	Init the http client
8214	Get the login token .
8215	Search for a specific Question .
8216	Extracts a value from an array of extractors .
8217	Gets the tags of the page .
8218	Downloads an image .
8219	Returns a list of all wallpapers .
8220	Download all wall papers .
8221	Extract the type from the mutator .
8222	Extracts the type from the given property .
8223	Extracts the type from the given reflection type .
8224	Check if a property is public
8225	Returns the accessor method .
8226	Returns the mutator method .
8227	Extracts the property name from the method name .
8228	Load Laravel services
8229	Creates an application instance .
8230	Sets a configuration value .
8231	Set multiple values at once
8232	Removes a section .
8233	Merge a section
8234	Rename a value
8235	Rename a section
8236	Read an INI file
8237	Read and merge an object .
8238	Merge iniObject contents into an array .
8239	Format an INI value
8240	Sets a value .
8241	Sets the values of the current ini section
8242	Get all modifiers
8243	Removes a value .
8244	Removes a section .
8245	Sets a value
8246	Sets a value on the master
8247	Sets the values on the master
8248	Returns a value on the master
8249	Get all values
8250	Removes a value
8251	Removes a value from the master .
8252	Checks if the given name is a section .
8253	Returns all values
8254	Creates a file loader for the given type .
8255	Get class name by short type .
8256	Create a cookie
8257	Execute the command
8258	Determine the configuration file .
8259	Choose bundle .
8260	Writes the configuration to a file .
8261	Creates a Dumper for the given type .
8262	Convert a string
8263	Read session data
8264	Get the routes .
8265	Sorts an array in ascending order .
8266	Sets the offset .
8267	Gather the data .
8268	Put content to file .
8269	Get the options for the command .
8270	Run the given route .
8271	Gather the middleware for the given route .
8272	Flattens a multidimensional array .
8273	Load configuration files .
8274	Get the slice of the stack .
8275	Parse the stage string .
8276	Runs a command .
8277	Sets the default values for a command .
8278	Get PHP binary .
8279	Get the executable binary .
8280	Runs the given command .
8281	Get the default input definition .
8282	Builds a flat list of routes .
8283	Adds a route to the given node .
8284	Get the matcher for the first segment .
8285	Create FilesystemManager
8286	Create a new cached factory .
8287	Returns the number of executed statements .
8288	Returns the memory usage of all executed statements .
8289	Performs a call on the database .
8290	Resolve an alias
8291	Checks if this route matches the given pattern and translation .
8292	Create Twig Engine
8293	Extend the view factory .
8294	Extend Twig Resolver with Twig Resolver .
8295	Create twig environment
8296	Create Twig loader .
8297	Parse data .
8298	Create a new rule instance .
8299	Create a strict or negative or optional validator .
8300	Create a chainable validators .
8301	Parse a string rule .
8302	Parse parameter .
8303	Starts the web server .
8304	Stop web server .
8305	Get the IP address
8306	Check if the process is running
8307	Create the server process .
8308	Get listeners for an event .
8309	Removes a listener pattern .
8310	Determine if the subject contains wildcards .
8311	Adds a listener pattern
8312	Reads the mandatory options .
8313	Build multidimensional array .
8314	Get the response .
8315	Get the response .
8316	Get the displayer .
8317	Filters the list of displayers .
8318	Sort a list by accept header .
8319	Add route lookups .
8320	Add addresses .
8321	Create assets renderer
8322	Register base data collectors .
8323	Register collectors from config .
8324	Extend the event manager .
8325	Create session manager
8326	Create route dispatcher .
8327	Create router instance .
8328	Create UrlGenerator instance .
8329	Detect the current environment .
8330	Get the environment argument .
8331	Returns a response for the JS code .
8332	Recursively converts data from an array .
8333	Process array of arrays
8334	Get the pretty metadata for a given type .
8335	Get loader paths .
8336	Build table rows .
8337	Get Whoops instance .
8338	Add where clauses to route .
8339	Merge group attributes into route .
8340	Convert action to controller action .
8341	Prepend the namespace to the namespace
8342	Prefixes the URI .
8343	Update group attributes .
8344	Creates a new sanitizer .
8345	Add before bootstrapping callback
8346	Add callback after bootstrapping
8347	Bootstraps the application with a list of bootstraps .
8348	Call the registered callbacks .
8349	Generate a new session id .
8350	Merge new flash keys .
8351	Loads session from handler .
8352	Read from handler .
8353	Writes the data to the handler .
8354	Resolve current page .
8355	Secure the input
8356	Extend the traceable event manager .
8357	Get files .
8358	Find twig files .
8359	Validate template .
8360	Display details .
8361	Display text .
8362	Parse a middleware group .
8363	Checks mandatory options .
8364	Get configuration dimensions .
8365	Validate options .
8366	Checks for deprecated options .
8367	Register a resource
8368	Get the URI for a resource .
8369	Get a resource wildcard .
8370	Get resource prefix .
8371	Add a resource destroy route .
8372	Get the URI for a resource URI .
8373	Gets the action for a resource .
8374	Get the resource route name .
8375	Slice through the container .
8376	Returns a middleware for the request .
8377	Find argument files
8378	Returns the client s IP address
8379	Checks if given IP address is valid
8380	Extracts the first IP address from a request header .
8381	Set message domain
8382	Validate input .
8383	Validate the given middleware .
8384	Create a translation manager .
8385	Create a schedule .
8386	Get computed data .
8387	Create an instance of the SwiftMailer .
8388	Create the mailer .
8389	Set the global address for the given type .
8390	Create a tooltip group
8391	Create tabs .
8392	Creates a table .
8393	Create dropdown menu content .
8394	Creates html tags .
8395	Clone a variable .
8396	Get the VarCloner instance .
8397	Returns the HtmlDumper instance .
8398	Appends code to the code .
8399	Appends a line to the code buffer .
8400	Adds extensions to the Twig environment .
8401	Sort middleware by priority map .
8402	Removes a middleware .
8403	Create an instance of Monolog driver .
8404	Creates an emergency log driver .
8405	Create a single Monolog driver .
8406	Create a daily log driver .
8407	Create an instance of the syslog driver .
8408	Create an instance of the error log driver .
8409	Create a logger instance .
8410	Create a custom logger instance .
8411	Create an instance of the Monolog driver .
8412	Push processors to Monolog .
8413	Create a server request from server array .
8414	Returns the singular form of the given value .
8415	Match case in string
8416	Creates a local adapter .
8417	Create a new console instance
8418	Merge two arrays .
8419	Format the group suffix .
8420	Check for a specific environment file .
8421	Load an environment file .
8422	Get a transport by name .
8423	Create a new transport .
8424	Determine if the given transport method exists .
8425	Create a new SMTP transport .
8426	Create a new Mailgunport instance .
8427	Create a new Spark Post Transport .
8428	Create a SESTransport instance .
8429	Create repository instance
8430	Update the route tree with the set of matchers .
8431	Register Event Manager
8432	Extend Twig Environment .
8433	Register the viserio twig extension .
8434	Returns an array of allowed HTTP methods .
8435	Adds a route to the collection .
8436	Returns whether the stream is a pipe .
8437	Add a new mime type
8438	Add a parser .
8439	Parse the payload .
8440	Get parser for given type .
8441	Get the format of the given payload .
8442	Set up class properties
8443	Returns the current request duration
8444	Stops a measure .
8445	Adds a new measure .
8446	Identify an exception .
8447	Generate a 4 UUID
8448	Sets the headers .
8449	Validates the given HTTP protocol version .
8450	Checks if an array contains only strings
8451	Filters a header value .
8452	Get the retry time .
8453	Returns invoker .
8454	Invalid type exception .
8455	Extend the cache item pool .
8456	Extend SimpleTraceableCache decorator .
8457	Get an environment variable .
8458	Parse parameter .
8459	Replace reference data .
8460	Creates the table
8461	Get PDO connection
8462	Connect to the database
8463	Get files .
8464	Render all styles into HTML .
8465	Get the last modified time of all assets .
8466	Runs the callback
8467	Removes this cron job from the schedule .
8468	Extend LogManager
8469	Extend profiler .
8470	Imports a DOMDocument .
8471	Loads a DOMDocument from a file .
8472	Parses an XML string .
8473	Converts PHP values to PHP types .
8474	Validates an XML DOM against a schema .
8475	Converts special characters to strings .
8476	Checks if the message is a header .
8477	Adds references to the given entry .
8478	Process obsolete entry
8479	Process previous entry
8480	Extract multi lines .
8481	Extract headers from an array of headers .
8482	Check if the given file is a file .
8483	Sets the error status .
8484	Sets the stream or file .
8485	Validates if the current upload is active .
8486	Mock a service .
8487	Parses an expression .
8488	Parses an argument .
8489	Parses the given option .
8490	Extracts the description from a token .
8491	Validates the cookie name .
8492	Validates the cookie value .
8493	Set a value for a key .
8494	Get the to addresses from the message .
8495	Create MongoDB cache driver .
8496	Create an instance of the Redis cache driver .
8497	Create an instance of the Predis cache driver .
8498	Create a new Flysystem cache driver .
8499	Create an instance of the Memcached driver .
8500	Create an instance of the Memcache cache driver .
8501	Get data collector .
8502	Compiles the router class .
8503	Create router class template
8504	Compiles the route tree .
8505	Compile route HTTP method match .
8506	Compile Disallowed HTTP method or not .
8507	Compile the found route .
8508	Returns Debug Processor instance .
8509	Get the total number of errors .
8510	Group log levels by priority .
8511	Returns the listener
8512	Bind an event to the dispatcher .
8513	Removes all events from the dispatcher .
8514	Create a regular expression for the event pattern .
8515	Array access .
8516	Set array value
8517	Process parameters .
8518	Process a parameter .
8519	Render the exception .
8520	Render an exception editor .
8521	Render the exception trace .
8522	Get the stack trace .
8523	Returns the stack trace for the exception .
8524	Format arguments .
8525	Get lines from a file .
8526	Get file contents
8527	Normalize the name .
8528	Resolve the given value .
8529	Resolves a class .
8530	Resolves a method .
8531	Resolve a parameter .
8532	Resolve parameters .
8533	Get method reflection .
8534	Determine if the given value is a function .
8535	Merge parameters .
8536	Write to file
8537	Write to a file .
8538	Update stream .
8539	Decrypt the stream .
8540	Encrypt stream .
8541	Decrypt a string .
8542	Encrypt string .
8543	Create stream from string
8544	Create transport factory
8545	Create mail manager
8546	Returns the version number of the xliff document .
8547	Get the schema for a specific xliff version .
8548	Fix the location of the XML file .
8549	Parse the visibility .
8550	Sanitize data .
8551	Run global sanitizers .
8552	Sanitize a single field .
8553	Execute sanitizer .
8554	Resolve callback .
8555	Resolves an expression .
8556	Creates a string command
8557	Gets the default values for the given callable .
8558	Assert the callable is valid .
8559	Check if callable is non static method .
8560	Create a new cookie jar instance .
8561	Convert a value to an XML element .
8562	Adds a new node .
8563	Add collection node .
8564	Create root element .
8565	Cast object class .
8566	Get called listeners
8567	Get all not called listeners .
8568	Validate the same site .
8569	Normalize expiration time .
8570	Normalize domain .
8571	Normalize path .
8572	Get the cookie timestamp .
8573	Starts a timer .
8574	Applies all the helpers to the translation .
8575	Extract helpers from string
8576	Applies filters to translation .
8577	Logs a single translation .
8578	Collects messages from the catalogue .
8579	Display files .
8580	Prints an array of files .
8581	Get files in a directory .
8582	Reads input from STDIN
8583	Returns an iterator for the given directory .
8584	Validates the event name .
8585	Converts a number to bytes .
8586	Converts a string to a number .
8587	Get config from adapter .
8588	Create a new model instance .
8589	Add a extractor .
8590	Create an alias loader instance .
8591	Get the cache path .
8592	Push a command to the queue .
8593	Determine if the given command should be queued .
8594	Create an instance of the cookie session driver .
8595	Create the migration driver .
8596	Create a cache session handler .
8597	Build the session .
8598	Build an EncryptedSession instance .
8599	Parse the route action .
8600	Get the first value of an array
8601	Parses the notes .
8602	Convert content to charset .
8603	Tag data .
8604	Create log manager
8605	Confirm before proceeding
8606	Get the default confirmation callback .
8607	Injects the profiler .
8608	Collect data .
8609	Create the template
8610	Creates a new profile .
8611	Get log level .
8612	Start a session for the given request .
8613	Stores the previous URL for the request .
8614	Garbage collector .
8615	Adds the cookie to the response .
8616	Create response view
8617	Find a template by name .
8618	Normalize file name .
8619	Parse the given view .
8620	Add content to the message .
8621	Send a Swift message .
8622	Determine if the message is sent .
8623	Create the message .
8624	Call the message builder .
8625	Create view .
8626	Handle found route .
8627	Prepares the URI path .
8628	Generate router file .
8629	Generate the cache directory .
8630	Returns the path to the specified file .
8631	Checks the options .
8632	Returns a parser based on options .
8633	Get a require file .
8634	Require a file .
8635	Create a symbolic link
8636	Set directories .
8637	Add a directory .
8638	Import a file .
8639	Adds a messageCatalogue .
8640	Set a language fallback .
8641	Get the language fallback for a specific language .
8642	Add a presenter .
8643	Checks for more pages .
8644	Returns display address .
8645	Find the front controller .
8646	Find the best hostname and port .
8647	Finds the best port available .
8648	Escapes special characters .
8649	Get the data .
8650	Creates an append stream for the given elements .
8651	Parse tokens .
8652	Seeks to the next non - whitespace token .
8653	Returns the value of the given token .
8654	Creates a TraceablePDO object .
8655	Decrypt the cookies .
8656	Encrypt the cookies .
8657	Creates a new cookie .
8658	Register a command .
8659	Returns the console
8660	Initialize project directories
8661	Find the view for a named path .
8662	Get the namespace segments for the view .
8663	Find a view path .
8664	Get all possible view files for the given extension .
8665	Get listener information
8666	Render cookies into a response .
8667	Extend TwigEnvironment
8668	Get messages .
8669	Add a message .
8670	Alias a middleware .
8671	Get the logs for a stream .
8672	Cleans up view exception
8673	Converts an exception to an ErrorException .
8674	Get the cache path
8675	Ensure statical proxy .
8676	Format the statical proxy stub .
8677	Registers the markdown engine .
8678	Cleans the export .
8679	Add Tcomment to the output .
8680	Adds references to the output .
8681	Add flags to the output .
8682	Adds the previous entry to the output .
8683	Add msgid to output
8684	Add msgid_plural to output
8685	Adds the msgstr to the output .
8686	Adds a message header to the output .
8687	Get pagination links .
8688	Create a cache adapter .
8689	Ensure the user is correct .
8690	Determine if the expression passes .
8691	Run the command in foreground .
8692	Runs the command in background .
8693	Call the before callbacks .
8694	Call the after callbacks .
8695	Returns a Closure that is within a given date range .
8696	Checks if start time is between start and end time .
8697	Merges two matchers .
8698	Optimizes an array of matchers .
8699	Optimizes a segment matcher .
8700	Optimize the matchers order .
8701	Create HtmlDisplayer
8702	Create a ViewDisplayer
8703	Create a WhoopsPrettyPretty displayer .
8704	Get the number of recipients in the message .
8705	Bootstrap the application .
8706	Handles the request through kernel .
8707	Render the exception .
8708	Pipe the given request through the middleware .
8709	Compile the parameters .
8710	Set the value at the given offset .
8711	Returns the invoker .
8712	Add a plain value to the container .
8713	Adds a service to the container .
8714	Register a singleton .
8715	Resolve the given abstract .
8716	Resolve the given abstract .
8717	Resolve singleton .
8718	Extend an abstract .
8719	Format the implementation for contextual binding .
8720	Extracts the MessageID from the response .
8721	Convert emails to array .
8722	Get the MIME part of a message .
8723	Get the payload for the message .
8724	Process the recipients .
8725	Process message parts .
8726	Process the headers .
8727	Checks for requirements .
8728	Returns the extension for the given path .
8729	Return a view instance .
8730	Determine if a string ends with another
8731	Render cookies into the request .
8732	Creates a list of cookies from a cookie string .
8733	Sets the error .
8734	Sets the exit code .
8735	Generate a URL to a route .
8736	Prepare route path .
8737	Is scheme required?
8738	Add the port and port to the URI .
8739	Replace route parameters .
8740	Replace named parameters .
8741	Adds a query string to the URI .
8742	Builds the query string for the given parameters .
8743	Parse a WHERE clause .
8744	Get the controller middleware .
8745	Get disabled middleware .
8746	Adds a cookie .
8747	Splits a cookie pair .
8748	Inject Content - Type header .
8749	Number of words .
8750	Get random string
8751	Replace the first occurrence of a string in a string .
8752	Replaces the last occurrence of a string in a string
8753	Replace part of string by position
8754	Get verbosity level
8755	Runs the command .
8756	Call console command .
8757	Call a command .
8758	Get command argument
8759	Get command option
8760	Asks a question
8761	Prompts a question .
8762	Ask a choice .
8763	Output a table
8764	Write a line to the output .
8765	Output info message .
8766	Write a string comment .
8767	Write a message to the console .
8768	Write a message to the console .
8769	Output a warning message .
8770	Configures the service using fluent definition .
8771	Adds arguments to the command
8772	Extracts the id from the response .
8773	Get the recipients for the message .
8774	Renders template .
8775	Add an exception to be reported .
8776	Report an exception .
8777	Add a transformer .
8778	Handles PHP errors .
8779	Handles fatal errors .
8780	Register the exception handler
8781	Register shutdown handler
8782	Prepare an exception .
8783	Transforms an exception .
8784	Returns the level for the exception .
8785	Determine if the exception should be reported .
8786	Add a new Dumper .
8787	Dump array data .
8788	Returns a Dumper instance for given type .
8789	Get the string representation of a Swift_Entity .
8790	Get the parameters for the given function .
8791	Converts a code point to UTF - 8 .
8792	Register Bus Queueing Dispatcher .
8793	Optimizes the route tree
8794	Extracts the common parent node .
8795	Get sql with parameters
8796	Tries to open a file .
8797	Creates a stream for the given input .
8798	Copy stream to string
8799	Copies data from the source to the destination stream .
8800	Reads a line from the stream .
8801	Set default path and domain
8802	Get the path and domain .
8803	Returns the pretty page handler .
8804	Update Host header from Uri .
8805	Filter the HTTP method .
8806	Create a UriInterface instance .
8807	Remove file extension .
8808	Changes the file extension .
8809	Create cache manager .
8810	Checks if the mock is a mock .
8811	Resolve a static proxy instance .
8812	Check if this instance is a mock .
8813	Inflect the segment name for a command .
8814	Sets the given file to the response .
8815	Sets the content disposition header .
8816	Sets the Last - Modified header
8817	Get an instance with the specified value .
8818	Describes an object .
8819	Describe commands .
8820	Sort an array of commands .
8821	Create the cookie tabs .
8822	Prepare the request attributes .
8823	Prepare the request headers .
8824	Prepares server parameters .
8825	Get parsed body from request .
8826	Exports a value .
8827	Creates a crypted connection
8828	Get the cache configuration .
8829	Adapt a filesystem adapter .
8830	Parses a route .
8831	Generates a regular expression for the match .
8832	Returns the invoker .
8833	Check if an object exists .
8834	Returns the target language from a file .
8835	Creates a variable dump connection .
8836	Create dump server
8837	Check if a path exists .
8838	Get transformed path .
8839	Get the contents of a directory .
8840	Filters the contents by type .
8841	Checks if the session tokens match .
8842	Adds the cookie to the response .
8843	Sanitize messages .
8844	Compute the number of messages .
8845	Get sorted messages .
8846	Adds a stream to the collection .
8847	Closes the stream .
8848	Decodes the current image
8849	Decodes the extension of a GIF
8850	Decodes an image descriptor .
8851	Decodes the image data .
8852	Set the sort direction
8853	Returns the list
8854	Loads the items from the API
8855	Sets the cities from an array
8856	Set network networks from an array .
8857	Loads the PST networks for the country
8858	Loads the cities for the current country
8859	Get all countries
8860	Get city by id
8861	Pads PKCS5 padding .
8862	Get All Countries
8863	Updates all networks
8864	Update network networks
8865	Create a new mapping instance
8866	Decodes the delay
8867	Returns whether this graphic has a transparent color .
8868	Decodes the proposal method .
8869	Returns Size of the image
8870	Get the offset
8871	Set the offset
8872	Returns the country
8873	Convert this object to an array .
8874	Import from an array
8875	Populate this object from an array .
8876	Create a random number .
8877	Generate unique hash
8878	Generate auth string
8879	Loads the invoice history .
8880	Call a service method
8881	Get frame .
8882	Add offset to the frame .
8883	Add a size to the image .
8884	Extract the loop variable from the netcape extension
8885	Returns true if the terminal has a global color table .
8886	Returns the number of colors in the terminal .
8887	Returns the background color index .
8888	Add a value to the first frame without property .
8889	Creates a new Frame with the given property .
8890	Convert the object to an array
8891	Get all pre paid balances
8892	Get all balances
8893	Returns a list of all balances
8894	Change the balance of a customer
8895	Synchronize prepaid balance
8896	Set the canvas size
8897	Set Frame from decoded object
8898	Create a Frame from a gd resource
8899	Encode this frame .
8900	Builds the binary descriptor for the current image
8901	Builds the Netscape Extension
8902	Builds the encoded frame .
8903	Builds the SVG control extension for the given frame
8904	Builds an image descriptor .
8905	Create a DidNumber based on Order
8906	Change the auto - new status of the order
8907	Renews the city
8908	reloads details from the API
8909	Update mapping information
8910	Generate unique hash
8911	Is IP in range
8912	Gets a parameter .
8913	Link metadata to metadata service
8914	Set metadata for a service
8915	Adds metadata for a service
8916	Removes a service from the container .
8917	Releases a service
8918	Retrieve a service
8919	Create a service instance from the factory .
8920	Resolve service provider .
8921	Register a service provider
8922	Bind a class to a class
8923	Bind a service factory
8924	Registers a factory for a given name .
8925	Register a service resolver factory
8926	Returns the type for the given service name .
8927	Add argument .
8928	Adds arguments from an array
8929	Resolve all arguments
8930	Creates a new instance of the class .
8931	Sets the list of tokens .
8932	Returns the current token .
8933	Returns the next token
8934	Skips tokens of given types .
8935	Returns the remaining tokens .
8936	Returns the tokens until the given token is encountered .
8937	Returns the tokens until the current token is reached .
8938	Handle unexpected token
8939	Parses a child node .
8940	Parses the parser
8941	Sets the container name .
8942	Adds a new service definition
8943	Adds multiple services
8944	Adds a service definition
8945	Import services from container
8946	Is service builder string .
8947	Generates a normalized service name .
8948	Generate container class
8949	Returns the resolver method name for the given service
8950	Generates code for arguments
8951	Generate service metadata
8952	Generates the resolver type .
8953	Generates the resolver methods .
8954	Generates the resolver methods
8955	Creates a ValueNode from a Token .
8956	Set the value type .
8957	Generates a map of all known packages
8958	Returns the value of this token .
8959	Is this token value?
8960	Check if an element exists
8961	Adds a value to the list .
8962	Convert to native PHP array
8963	Get the next token .
8964	Get all tokens .
8965	Display the application .
8966	Executes a command
8967	Backup the database .
8968	Clone repo .
8969	Copy environment .
8970	Run composer .
8971	Run the NPM installation command
8972	Seed database
8973	Deploy the deployment
8974	Resolves a service .
8975	Set cache directory
8976	Create a new container
8977	Handle the request .
8978	Import paths from a vendor directory .
8979	Check if a path exists .
8980	Reads the code from a container .
8981	Get the code for a path .
8982	Parses the container .
8983	Handles a scope .
8984	Handle an import statement .
8985	Handles a parameter definition .
8986	Create ServiceArguments from ArgumentArray .
8987	Handles a service definition
8988	Creates a service definition from an array .
8989	Add a method call .
8990	Add method call
8991	Add meta data
8992	Determine if the request is origin .
8993	Check if the XHub signature is valid .
8994	Sets the value of the parameter .
8995	Get the name of the workout type .
8996	Convert to string
8997	Send request .
8998	Set workout type id
8999	Returns the end date of the post
9000	Get points as string
9001	Get GPX .
9002	Collect response data
9003	Get related models .
9004	Get the AJAX payload
9005	Get the AJAX response .
9006	Run a callback
9007	Sanitize handle .
9008	Validate all fields
9009	Validate a single value
9010	Register a specific size for a specific device
9011	Add a reset device
9012	Returns the size for a specific device .
9013	Build column classes
9014	Check if current user is of specified role
9015	Begin a row .
9016	Render column .
9017	Walks down the column
9018	Begins a row .
9019	Returns the column reset as a string
9020	Get the index .
9021	Migrate from legacy
9022	Register AJAX handle .
9023	Ajax handler
9024	Set the handler callback
9025	Add validation to the field .
9026	Handle the response .
9027	Get the response type .
9028	Sends the response headers .
9029	Send the response body
9030	Returns the content of the given URL .
9031	Is GeoIP2 model supported?
9032	Toggle visibility of a record
9033	Returns true if the user has access to the current column
9034	Builds grid .
9035	Returns the column as a string
9036	Add a column reset
9037	Add a column resets for a column .
9038	Returns all column resets
9039	Check if a column has a reset for a specific size
9040	Get column reset as string
9041	Register a handle
9042	Enqueues AJAX helper
9043	Get nonce .
9044	Get grids
9045	Hook for Parse Template
9046	Hook for getContentElement
9047	Get all grid elements
9048	Create row class
9049	Protected create column
9050	Build grid columns .
9051	Fetch a single columnset
9052	Prepare custom classes .
9053	Build column resets
9054	Get a grid by id .
9055	Hook for parsing subcolumns
9056	Hook to hook for isVisibleElement
9057	Hook for loading form field
9058	Get grids
9059	Prepares container for rendering .
9060	Update subcolumns definition
9061	Append column set id to palette
9062	Append column sizes to a palette
9063	Get all column sets
9064	Get the list of all Grids
9065	Get columns for module
9066	Get column orders
9067	Get selected columns
9068	Get a value from the session .
9069	Check if a key exists
9070	Delete a key .
9071	Load a value from the container .
9072	Refresh session keys
9073	Parse insert tags .
9074	Get the walker for the identifier .
9075	Translate the parameters to the column set id .
9076	Get encryption params
9077	Get decryption params
9078	Save dynamic fields
9079	return true if the value is valid
9080	Save file .
9081	Initialize the request
9082	Render fields .
9083	Get field value
9084	Get field values
9085	Returns true if all entities are valid
9086	Save all entities
9087	Assign dynamic fields to page object
9088	Get field object by locale .
9089	Get repeaters by locale .
9090	Get entity by field id
9091	Get entity by field id and field id
9092	Duplicate this entity
9093	Initialize the group .
9094	Returns true if all fields are valid
9095	Renders the group
9096	Save all fields
9097	Get group by rule
9098	Determine if the given rule matches .
9099	Init group controls
9100	Get post data
9101	set dot symbol
9102	Perform a dot operator .
9103	Get a single row
9104	Returns rows .
9105	Get the dot from the pixel map
9106	Generate prime .
9107	Initialize form fields
9108	Create list control after repeater post data
9109	Create list control
9110	Create field control
9111	Create CSV header for repeater
9112	Save data to database
9113	Get Display Value
9114	Get field value .
9115	Get template name
9116	Get default template name
9117	Initialize the value
9118	Get model for repeater field
9119	Get html id .
9120	Get field html name .
9121	Saves the field
9122	Save field value
9123	Save repeater field
9124	Get an option value
9125	Move forward by given length
9126	Moves the particle .
9127	Checks if this task has an ancestor
9128	Checks if this task is a descendant of this task .
9129	Reset the state .
9130	Checks if the given input contains the given conditions .
9131	Configures a wrapper for the given wrapper key .
9132	Configures condition options .
9133	Check a value against a regex .
9134	Check if a value is empty .
9135	Returns the duration of the event
9136	Contextualize options .
9137	Find the next task in the given branches .
9138	Get input code
9139	Determine if the input is already resolved .
9140	Get file path
9141	Sorts two processes
9142	Handles an iterator from input .
9143	Flush output .
9144	Returns the number of lines in the file .
9145	Rewinds the stream .
9146	Cleans the transformer code .
9147	Returns the list of dependent tasks .
9148	Get the main task group .
9149	Checks for circular references .
9150	Builds the dependencies for the given task configuration .
9151	Sorts the dependencies .
9152	Resolve the task configuration .
9153	Initializes the task .
9154	Flushes the configuration for the given task .
9155	Handles a process state .
9156	Checks the given process configuration .
9157	Validate the model
9158	Convert object to array
9159	Returns the model fields
9160	Unset a relation
9161	Format the full class name to relation name .
9162	Add one relation to one model
9163	Add one to many relation
9164	Add many to many relation
9165	Finds records by query
9166	Returns a collection of records
9167	Finds a single record
9168	Count the number of records
9169	build select query
9170	Fetch all rows from the database
9171	Hydrate this entity with data
9172	Deletes a model from the database
9173	Perform an update on the model
9174	Inserts a row into the database
9175	Should we keep memory?
9176	Removes all cached data
9177	Returns model by primary key
9178	Removes a model
9179	Get the position of a model
9180	Save all elements
9181	Prefixes where with table name
9182	Prefixes an array with a table name
9183	Get column definition without column name
9184	Register a table
9185	Makes a simple query object based on its slug .
9186	Makes a query object for the given slug
9187	Get model for given slug
9188	Maybe install a table .
9189	Maybe install a table .
9190	Check if a table is installed
9191	Fire plugin event
9192	Save a WP_Post
9193	Get foreign column .
9194	Parse the default columns
9195	Create a query from a model instance .
9196	Specify columns to select .
9197	Select a single column .
9198	Select all records .
9199	Add an expression
9200	Where function .
9201	Generate a where tag .
9202	Add a nested where clause .
9203	Add a new where clause to the current query .
9204	Add an or where condition .
9205	Add a where date query .
9206	Query scope for querying a meta .
9207	Order by column
9208	Order by expression
9209	Group by column .
9210	Group by expression .
9211	Join to another table
9212	Join a subquery to another subquery
9213	Paginate the results
9214	Execute a callback for each query
9215	Set relationships to eager load .
9216	Parse a nested array with nested keys .
9217	Assign a value to an array using dot notation .
9218	Make the limit tag .
9219	Build the SQL .
9220	Update meta data .
9221	Find a record by primary key .
9222	Find many records by primary keys .
9223	Find a model by primary key
9224	Find a model by primary key
9225	Get the first model matching the attributes .
9226	Get the first model matching the attributes .
9227	Update the record with the given attributes .
9228	Handle eager loading .
9229	Do nested eager loading .
9230	Assert operator .
9231	Prepare a column name .
9232	Escapes a value for storage .
9233	Configures the model
9234	Get column value
9235	Create a new row .
9236	Order by statement .
9237	Adds an order
9238	All columns .
9239	Build an eager load map for the given models .
9240	Save a single comment .
9241	Get a default value
9242	Query the database
9243	Parse the results of the query .
9244	Parse a select object
9245	Parse the order .
9246	Parse the pagination parameters .
9247	Test whether two numbers are equivalent .
9248	Determine if two variables have changed .
9249	Fetches all results
9250	Delete all records
9251	Update data in database
9252	Returns the total number of pages
9253	Paginate results by page number
9254	Returns number of found models
9255	Returns the number of models that have a limit .
9256	Check if a record exists
9257	Array access .
9258	Array access get
9259	Build the query
9260	Boots the model if needed .
9261	Boot all trait
9262	Fill the model attributes .
9263	Add attributes to the model .
9264	Set unarded attributes .
9265	Is column fillable
9266	Set an attribute value for this model .
9267	Set an attribute value .
9268	Get an attribute value .
9269	Get raw attribute .
9270	Get the value of an attribute .
9271	Get an attribute value from an array .
9272	Get all relations
9273	Get a related relation
9274	Set a relation value .
9275	Get relation value .
9276	Refresh the model s original data .
9277	Get the dirty attributes
9278	Get an object by primary key .
9279	Create an instance from a query array .
9280	Get data by primary key .
9281	Check if data is cached .
9282	Update a row in the database .
9283	Save the current model .
9284	Save has foreign relations .
9285	Save loaded relations
9286	Save model as insert .
9287	Save the current model as an update .
9288	Finish saving process .
9289	Delete the current model
9290	Create many models .
9291	Fire model event .
9292	Register a model event for the model .
9293	Get the raw data to be cached .
9294	Register a global scope
9295	Get self with global scopes
9296	Return a fluent query with eager loaded relations
9297	Convert the model to an array .
9298	Get the comparison string .
9299	Get the value .
9300	Get single row by primary key
9301	Get a single column
9302	Get by or many
9303	Count the number of records in the database .
9304	Inserts a record into the database .
9305	Update a row
9306	Delete a row
9307	Delete many records
9308	Generate the exception based on the last error number .
9309	Save a single term .
9310	Makes a query object for related models
9311	Fetch results for eager loading .
9312	Add new values
9313	Setter for setting
9314	Sets the fields to select
9315	Reset the select array
9316	Sets the query type to update .
9317	Sets the DELETE query type
9318	Sets the INSERT mode
9319	Sets the FROM table
9320	Adds a JOIN clause to the query
9321	Adds a where condition to the query .
9322	Adds a where condition to the query .
9323	Resets the order by
9324	Set the LIMIT clause
9325	Reset the limit
9326	Set global scope for trash .
9327	Fetch results from cache .
9328	Loads a model from cache .
9329	Loads a collection from the cache .
9330	Cache the results .
9331	Cache a collection .
9332	Cache a single result .
9333	Maybe register cache events .
9334	Save the user .
9335	Set the last updated at value .
9336	Get container parameters
9337	Check if container is cacheable
9338	Boot the application .
9339	Load the container configuration .
9340	Builds the column name for the given table .
9341	Save a collection of values .
9342	Persists removed models .
9343	Save the added records .
9344	Creates a new entity
9345	Initialize the authentication mechanism .
9346	Creates a new model .
9347	Convert an asset
9348	Builds the result .
9349	Parses a CSS file into a CSS file .
9350	Send a message to Telegram
9351	Executes the query and returns the results .
9352	Counts the number of documents .
9353	Requeue a message .
9354	Adds a message to the queue .
9355	Verify sort
9356	Add message for type
9357	Returns messages for given type .
9358	Imports issues from issues .
9359	Retrieve a value
9360	Determine if an item exists .
9361	Extends an object definition .
9362	Register a service provider
9363	Add a tag to the container .
9364	Finds all services tagged with a given tag .
9365	Boots the application .
9366	Initializes the bundles .
9367	Get kernel parameters
9368	Validate the content .
9369	Validate the content against a retriever
9370	Validate an XML string against the schema .
9371	Get an asset container .
9372	Outputs all assets
9373	Output css files
9374	Get the assets for a specific type .
9375	Reorder assets
9376	Checks if an asset is valid .
9377	Return a new post validator
9378	Creates a new XSD retriever
9379	Creates a new XsltRetriever
9380	Create a new Certificator instance
9381	Create a new CFDIReader instance .
9382	Handle the command .
9383	Set a cookie .
9384	Get cookie value
9385	Searches for the first value in an array
9386	Check if the password is valid
9387	Retrieve a single child node .
9388	Retrieves the value of a node .
9389	Append a child element .
9390	Populates the NSS node .
9391	Retrieves a single node
9392	Check if value is required
9393	Add Doctrine queries
9394	Add multiple timers
9395	Get file size
9396	Append a validator .
9397	Removes a validator .
9398	Get validator
9399	Constructs a command with the given arguments
9400	Run all the files
9401	Runs a filename against a file .
9402	Authorize a user
9403	Returns whether the user is logged in .
9404	Logs in the user
9405	Logout the user out .
9406	Adds a constraint .
9407	Validate the given input .
9408	Redirects to a path .
9409	Returns the file path
9410	Get message by index
9411	Generate custom post type name
9412	Returns list of functions
9413	Resolve command handler .
9414	Setup the exception
9415	Get sum of nodes
9416	Get input value
9417	Set the sequence position for the post type .
9418	Generate a taxonomy name
9419	Returns an array of routes to redirect .
9420	Register all commands
9421	Returns the bundle metadata for the given bundle .
9422	Returns the metadata for a namespace .
9423	Find the namespace and path for a class .
9424	Add an asset .
9425	Renders a view .
9426	Save item in cache
9427	Load a CFDI .
9428	Removes all schemaLocations .
9429	Removes non - empty namespaces
9430	Remove unused namespaces .
9431	Initialize the post data
9432	Initialize the registry items
9433	Returns the file name of the view .
9434	Initialize the context .
9435	Renders the template .
9436	Loads configuration files
9437	Add a route that matches a path .
9438	Add a route section .
9439	Adds a group of routes to a group .
9440	Starts a block .
9441	Stop capturing blocks .
9442	Outputs a block .
9443	Creates a service provider .
9444	Instantiate a controller
9445	Validates if the given URL is valid .
9446	Tries to find a template .
9447	Set application entity manager
9448	Set application connection
9449	Renders a view .
9450	Open the form tag .
9451	Add data transformer
9452	Retrieves a feed
9453	Make a market request
9454	Make an account request
9455	Prepare the attributes .
9456	Add extra data .
9457	fetch an object from the result set
9458	Appends a message to the open control .
9459	Returns the connection instance
9460	Start a transaction
9461	Load the maniacode
9462	Renders the response
9463	Open the socket
9464	Enable watching .
9465	Set the background color
9466	Set the image .
9467	set the image id
9468	Set the image focus
9469	Set the imageFocus id
9470	Set the Link object
9471	Get a configuration value
9472	Set config value
9473	Get translated string
9474	Get array values
9475	Strip styles from string
9476	Create new redirect
9477	Returns a collection of numbers .
9478	Get driver instance .
9479	Initialize the ManiaLink
9480	Begins a Frame .
9481	End frame .
9482	Redirects to the browser
9483	Append an XML string
9484	Build the redirect driver .
9485	Set Border Size
9486	Register a new font
9487	Protected On Image
9488	Convenience method for loading an image
9489	On image quality
9490	Get a redirect for a given request .
9491	Get all redirect urls
9492	Get all redirects .
9493	set the size of the arrow
9494	Set the selected icon
9495	Invoke bot .
9496	Set the file data
9497	Get LIMIT clause
9498	Converts an array to a comma separated string
9499	Get a parameter
9500	Get a parameter value
9501	Get a POST parameter
9502	Restore a parameter
9503	Redirect to manialink
9504	Creates an array of link arguments
9505	Create an absolute link
9506	Increments the position of the current position
9507	Increments the position of the current position
9508	Increase position of current position
9509	set new position
9510	Set the scale .
9511	Set the value of the property to align
9512	Setter for the halignment
9513	Set the alignment of the cell
9514	sets the size of the image
9515	Set the size of the image
9516	Set resize size
9517	Add new button
9518	Add a gap .
9519	Get the list of HTTP headers .
9520	Get all status codes
9521	Default error handler
9522	Computes an exception message
9523	Get short message
9524	Handle the request .
9525	Uploads a file to the specified path
9526	Get current uri
9527	Calculates a position based on an alignment
9528	Returns an aligned position
9529	Get the position of an element
9530	Builds the SELECT query .
9531	Quote string .
9532	Reset all balance
9533	Delete Account by AssetType
9534	Configure the class loader .
9535	Get service ids
9536	Returns the type of the given value .
9537	Execute the pipeline
9538	Get balance entry
9539	Get the class hierarchy
9540	Change Content - Type
9541	Parse a raw HTTP header .
9542	Convert a string to an array .
9543	Build a multidimensional array .
9544	Get asset types
9545	Execute transaction
9546	Get last balance
9547	Check the response for the given strategy
9548	Mutate a property .
9549	Fetch data from url .
9550	Returns the URL for the request .
9551	Generate translations .
9552	Parse csv data
9553	Localize the given string
9554	Backup strings .
9555	Get all assets by asset type code
9556	Get asset type id .
9557	Get customer asset by id .
9558	Get system customer customer id
9559	Execute transaction action
9560	Builds the strategies key .
9561	Parse Opauth response
9562	User login action
9563	Renders a view .
9564	Returns asset types .
9565	Send the response
9566	Authenticates the user response .
9567	Verify the authentication token .
9568	Validates a document url
9569	Register the client class .
9570	Register the Token class .
9571	Register the package for console .
9572	Starts a new session
9573	Get an array of classes .
9574	Set the status code and phrase
9575	Parse css into tree
9576	Finds the tokens in the css language .
9577	Finds the position of the end of a quoted string
9578	Finds the position of the end of the css
9579	Check a single rule .
9580	Merge words .
9581	Checks for selectors
9582	Get selectors
9583	Recursive function for parsing tokens
9584	Set the current app key for the request .
9585	Get current app key
9586	Add an accepted JSON type for the request .
9587	Builds the SELECT query .
9588	Unpublish a post
9589	Save an unpublish post
9590	Init Content Scheduler
9591	Generate a unique key
9592	Generate a key for the application
9593	Verify if the given token is valid .
9594	Generate HTTP headers for an application .
9595	Generate query data for app .
9596	Get customer entity id
9597	Sets the fit mode .
9598	Get the list of manipulations .
9599	Create a new Account
9600	Fill the object
9601	Get the URI portion of the URI
9602	Set user info
9603	Set the port
9604	Set the path and file name
9605	Get a single segment
9606	Get a query value
9607	Builds the tokens
9608	Aggregate method .
9609	Returns the configuration for the given strategy
9610	Builds the strategy configuration .
9611	Composes an result .
9612	Get the result of an asset type
9613	Execute operation .
9614	Prepare log id and admin id
9615	Validate transaction transactions
9616	Sets the headers .
9617	Set a header .
9618	Adds a header .
9619	Removes a header
9620	Registers a set of prefixes .
9621	Adds multiple prefixes
9622	Finds the file for the given class name .
9623	Finds the file with known suffix .
9624	Convert object to array .
9625	Clean an array .
9626	Set the code .
9627	Init Uri instance
9628	Initialize query parameters
9629	Initialize uploaded files .
9630	Parse uploaded files .
9631	Parse multiple uploaded files .
9632	Check if response has Content - Type .
9633	Run the application .
9634	Dispatch the command
9635	Output a table
9636	Outputs an error to STDERR
9637	Display help for all commands
9638	Get available commands
9639	Make the directory .
9640	Append stub .
9641	Replace search and replace string
9642	Dispatches the request
9643	Creates a response for the given response .
9644	Returns the current page .
9645	Get the response .
9646	Builds the response for the given URI
9647	Get a page for a given URI
9648	Returns the alias for the given URI
9649	Displays a single model .
9650	Creates a new I18nMessage model . If creation is successful the browser will be redirected to the view page .
9651	Builds HTML tags for the headline .
9652	Runs the route
9653	Runs the CLI command .
9654	Bind services to the container .
9655	Returns an instance of Markdown Renderer
9656	Get blade blade .
9657	Get migration files
9658	Finds a page by its identifier
9659	Returns the page name for the given page identifier .
9660	Builds the meta data for a page identifier
9661	Returns the page tree
9662	Retrieves all pages for a given path
9663	Success .
9664	Loads all messages from database .
9665	Send activation mail .
9666	Searches for a set of rows .
9667	Renders the template
9668	Renders an expression .
9669	Resolves an expression key path
9670	Finds all classes .
9671	Prepares the configuration array .
9672	Returns the host of the request
9673	Gets a value by key
9674	Displays a single message model .
9675	Updates an existing Message model . If update is successful the browser will be redirected to the view page .
9676	Deletes an existing Message model . If deletion is successful the browser will be redirected to the index page .
9677	Finds the I18nTranslation model based on its primary key and language . If the model is not found a 404 HTTP exception will be thrown .
9678	List all pages
9679	Returns the parsed content .
9680	Gets the sorting
9681	Returns the URI
9682	Extracts the url from the resource meta .
9683	Returns the title of the page
9684	Perform a get request
9685	Builds the url for the request
9686	Handles the response .
9687	Initializes the configuration .
9688	Logs profiling information
9689	Get template content
9690	Returns the value for a given key path .
9691	Set the root directory .
9692	Returns an array of class reflections .
9693	Get class reflection .
9694	Upload media .
9695	Insert new media
9696	Returns the number of hours in the range .
9697	Get dirty data
9698	Register a clean entity
9699	Gets the dirty fields .
9700	Add identifiers to the dirty fields .
9701	Get entity id from string
9702	Get the tags .
9703	Get the real class name of an object
9704	Configure the tab element factory .
9705	Before delete callback
9706	Create the title .
9707	Renders the pdf .
9708	Renders the image
9709	Deserialize data
9710	Hydrates a collection
9711	Deserialize all data
9712	Deserialize data .
9713	Guesses the collection class name .
9714	Builds the site map
9715	Returns the navigation for the given element id .
9716	Returns iterator for given element id
9717	Normalize the attribute list
9718	Get an extra property
9719	Generate random string
9720	Limit words in a string
9721	Get all files in a directory
9722	Generate short description
9723	Returns whether the time slot is overlapping
9724	Fetches all time slots that are not overlapping .
9725	Merge time slots .
9726	Retrieves a resource .
9727	Merge default parameters .
9728	Executes a request .
9729	Renders backend view .
9730	Get the iterator
9731	Get grid iterator
9732	Before save callback
9733	Processes the content .
9734	Updates an existing Media model . If update is successful the browser will be redirected to the view page .
9735	Process the media join .
9736	Upload media .
9737	Updates model data
9738	List all media
9739	Renders a media row .
9740	Deletes an existing Media model . If deletion is successful the browser will be redirected to the view page .
9741	Set the attribute list .
9742	Get default model
9743	Create the view directories
9744	Export views .
9745	Export controllers .
9746	Export routes .
9747	Check for missing packages
9748	Copy plugins .
9749	Copy assets files
9750	Copy less folders .
9751	Get settings by categories
9752	Creates a navigation object from serialized data .
9753	Creates a nav item from an array .
9754	Loads a block .
9755	Get module .
9756	Serialize an object
9757	Gets the model name by key .
9758	Returns the class metadata for a model name .
9759	Tries to get a class metadata by its ID .
9760	Render tree .
9761	Returns a flat array of pages
9762	Remove item from cache
9763	List all tags
9764	Find tag weights
9765	Adds tags to the database .
9766	Remove tags .
9767	Get tab parent options .
9768	Generate table columns
9769	Count required separators .
9770	Protected create separators
9771	Create the end element .
9772	Create a new tab element
9773	Get the stop element
9774	Add the member icon
9775	Get select options
9776	List all statuses
9777	Lists information about a given type
9778	Get type label
9779	Get list of models ordered by number .
9780	Find and replace text
9781	Advances to the next element .
9782	Returns the title of the current item .
9783	Generates the active field for a model attribute .
9784	Make a new router instance .
9785	Get a driver instance by name .
9786	Call a driver by name .
9787	Call the route .
9788	Resolve the dispatch dependency .
9789	Get nested parameters
9790	Find the attributes for the route .
9791	Find the Restful route .
9792	Finds the route for the given resolver .
9793	Get alternative resource action .
9794	Dispatch the route .
9795	List action .
9796	Returns the calculator for the given shipping method .
9797	Get shipping method by code
9798	Add a route .
9799	Build the schema for a resource .
9800	Update shipping address
9801	Make a controller call .
9802	Handle an Illuminate response .
9803	Handle response callback .
9804	Abort the request
9805	Determine if content is none .
9806	Register error handler
9807	Get action options
9808	Delete an item from the cache
9809	Save data into cache
9810	Outputs a block
9811	Get an item from the cache .
9812	Set an item in the cache
9813	Set multiple items at once
9814	Delete multiple items
9815	Check if an item exists .
9816	Get the HTML label .
9817	Full path name .
9818	Make a tree of categories
9819	Output a console command
9820	Set resource members
9821	Tries to load a PSR - 7 class from a PSR - 7 class .
9822	Set the accountId
9823	Translate an exception .
9824	Return the console instance .
9825	Execute the command
9826	Returns an array representation of the constants
9827	Lists a list of buckets in the blob
9828	Update the properties of a container .
9829	Check if blob exists
9830	Encode the JWT .
9831	Decodes the given token .
9832	Extract the payload from a JWT token .
9833	Splits the token into chunks .
9834	Get expiration time .
9835	Generate index .
9836	Extracts the default value of a field .
9837	Add previous button
9838	Add next button
9839	Returns the current page number
9840	Reveal the object .
9841	Checks if the given value is an object .
9842	Checks if a value is empty .
9843	Convert data to a record .
9844	Parses the response to an array
9845	Get a configurator
9846	Check if a configurator exists
9847	Get writer class name by format .
9848	Finds a writer based on the accepted content negotiation .
9849	Transforms a DateTime object into a string representation .
9850	Initializes the view
9851	Read data from payload .
9852	Parse a payload
9853	Write a payload
9854	Returns a reader for the given content type and reader type .
9855	Returns a suitable writer for the given content type .
9856	Before each test
9857	Run after each test
9858	After step .
9859	Initialize Laravel .
9860	Boot Laravel Application
9861	Go to a named route .
9862	Go to an action on an action .
9863	Add a namespace to the action name .
9864	Assert that the current url matches the given route .
9865	Assert that the current action is equal to the given action .
9866	Checks that a value exists in the session .
9867	Checks that form has errors .
9868	Checks for specific form error message .
9869	Set user as logged in
9870	Inserts a record into the database
9871	Transforms a number into a numeric string .
9872	Returns a \ NumberFormatter instance .
9873	Nested nested array
9874	Flattens a multidimensional array
9875	Convert array to object
9876	Creates a new column .
9877	Builds the header view for the column .
9878	Builds the cell view .
9879	Creates a new column .
9880	Returns whether this column is a Compound column .
9881	Get Base Data
9882	Get shipping data
9883	Returns the invoice data .
9884	Sends a request to the Asms API
9885	Trims whitespace
9886	Converts FQCN to block prefix
9887	Transforms a number .
9888	Parses a value to an integer .
9889	Add column .
9890	Checks if the current upload is valid .
9891	Resolve a filename .
9892	Updates the form
9893	Updates the edit form
9894	Handles form edit form
9895	Lock a record .
9896	Registers a set of configs
9897	Publish an item to a channel .
9898	Loads language files .
9899	Send a PSR - 7 request
9900	Builds the Uri object from the parsed parts .
9901	Store a newly created user in storage .
9902	Show the form for editing the user .
9903	Update the specified user in storage .
9904	Remove the specified user from storage .
9905	Create new instance of MPDF class
9906	Add Host header
9907	Build a Guzzle request
9908	Executes the callable chain
9909	Check if a class exists
9910	Run the queue
9911	Ensure the thread is running
9912	Adds a request to the queue
9913	Publish batch requests
9914	Returns the key for a given cursor .
9915	Reset the cursor to the beginning
9916	Export all formats
9917	Set options from an array
9918	Public API call
9919	Make an HTTP request .
9920	Publish an item
9921	Imports headers from one message to another .
9922	Get protocol version
9923	Validate data .
9924	Load translate messages
9925	Set local validator .
9926	Get valid errors
9927	Update the status .
9928	Gets the locked message for this record
9929	Determine if this member can be edited
9930	Check if an offset exists
9931	Sorts the collection using a user - defined comparison function .
9932	Parse birthday data .
9933	Get the birthday .
9934	Validate the birthday .
9935	Returns the constant name for the given constant and day .
9936	Translate a constellation
9937	when updating ACL
9938	Response when sync was successful .
9939	when shows list
9940	On role create form
9941	On user create form
9942	on create form
9943	renders form for user
9944	handle menu creation
9945	Finds a record by criteria
9946	Get a new instance .
9947	Returns the object factory .
9948	Remove items by criteria
9949	Removes one or more records by criteria .
9950	Remove objects .
9951	Refresh all objects
9952	Detach multiple objects
9953	Returns the supported method name .
9954	Calls supported method .
9955	Run a manager action .
9956	Flush objects .
9957	Prepare a tag from a unique identifier .
9958	Set pagination options
9959	Set current page
9960	Update the specified Permission in storage .
9961	Get paginator .
9962	Find Paginated By criteria
9963	Boots extension components
9964	boot memory .
9965	Load Routes Parts
9966	Extend extended validation
9967	Save the entity
9968	Validate the model .
9969	Merge validation rules
9970	Remove unnecessary attributes
9971	Auto hash the password .
9972	Disables all filters .
9973	Disables a filter .
9974	Restore disabled filters .
9975	Restore a filter .
9976	Returns actions column
9977	Assign to a user
9978	Checks if the given code is a successful response .
9979	Get current template name
9980	Show role form .
9981	edit form
9982	create user form
9983	user update action
9984	create user
9985	update user
9986	destroy user
9987	Save user .
9988	Returns true if the path is within the given path .
9989	Get registered type
9990	Returns the ETag for the unique identifier
9991	Returns the timestamp field
9992	Calculates the timestamp of the collection
9993	Execute the query
9994	Executes the collection s ids
9995	Count the number of rows in the collection
9996	Get table name
9997	Get the order by
9998	Set order by value
9999	Get the conditions as a string
10000	Add WHERE condition
10001	Set join table name
10002	Edit ACL collection
10003	updates ACL
10004	Set Logger
10005	Starts the process .
10006	Stop the thread
10007	Kill the worker
10008	Where condition .
10009	Get where string
10010	Count the number of rows
10011	Executes the query and returns the first result
10012	Get all ids
10013	Executes the query .
10014	Load by type field .
10015	Returns SQL for selecting fields
10016	Returns module data
10017	Cast a single resource
10018	Define all permissions
10019	Assign a role to a user
10020	Remove a role from a user .
10021	Create form .
10022	View edit action .
10023	Store role .
10024	Updates a role
10025	Delete a role .
10026	Save a role .
10027	Import permissions .
10028	Show ACL for acl .
10029	Clears the analytics data .
10030	Clears message data
10031	Make module ACL
10032	Show the form for editing the role .
10033	list user roles
10034	Get statuses
10035	Returns actions column
10036	Get user roles .
10037	Modify an entity
10038	Get producer for registered type
10039	Register producer for given type
10040	Register producer by class
10041	Get an object by its ID
10042	Checks for an object by its id
10043	Add an object to the object pool
10044	Adds an object to the object pool .
10045	Counts the number of rows for a given type .
10046	Find a type .
10047	Get select by id
10048	Get the escaped field names for a type .
10049	Get the order by property .
10050	Get traits by type
10051	Recursively get trait names
10052	Add editable fields to the grid .
10053	Determine if the given radio button is checked .
10054	Prepares and returns active page entity
10055	Set login user tracking
10056	Set email tracking
10057	Determine the site path
10058	Analyze URL
10059	Returns basket category path
10060	Compares two fields .
10061	Load data from a database row .
10062	Creates a copy of this object .
10063	Revert a field
10064	Get old field value
10065	Set field value
10066	Inserts a new row
10067	Update the row
10068	Refresh the generated fields .
10069	Compare two values
10070	Generate a URI for a named route
10071	when creating new role
10072	Returns errors for a field
10073	Check if a field has an error
10074	Adds an error to the error list
10075	Prepare product title
10076	Modify by contact form
10077	Modify by newsletter controller
10078	Modify the data for a user
10079	Disables an event subscriber .
10080	Restore event subscriber
10081	Disables event listeners .
10082	Disables an event listener .
10083	Restore all event listeners .
10084	Restore listeners for an event .
10085	Get the subscriber class name .
10086	Check if the given class is an event subscriber .
10087	Get event listeners
10088	Returns user id .
10089	Returns user shed email
10090	Generate a cache key .
10091	Generate unique cache keys .
10092	Send the request
10093	Check if an item exists
10094	Get a value
10095	Recursively gets a value from an array
10096	Set an item
10097	Put a value in the array .
10098	Set a value in an array
10099	Remove a value
10100	Remove a value from an array
10101	Set logger function
10102	Bootstrap service provider
10103	Set mail configuration
10104	Getter for setting
10105	Convert a value to a string representation
10106	Get the page size .
10107	Register the Capsule services .
10108	Validates the required fields
10109	Get singleton instance .
10110	Registers hooks
10111	Enqueues the script
10112	Display notices .
10113	Register a notice .
10114	Dismiss a notice via AJAX
10115	Dismiss a notice .
10116	Mark a user as dismissed .
10117	Mark a notice as dismissed .
10118	Restore a notice .
10119	Restore dismissed notices .
10120	Restore a notice .
10121	Get the dismissed notices .
10122	Check if a notice is dismissed .
10123	Get a notice .
10124	Modify an item
10125	Reine a collection
10126	Include attachments .
10127	Get the items for the given class .
10128	Set attachments .
10129	Parse relations .
10130	Attach an attachment
10131	Attaches a class .
10132	Merge two arrays .
10133	Get response headers
10134	Get card reference
10135	Get the customer reference
10136	Get class name
10137	Get the namespace of a class
10138	Finds the method for the add method of an object .
10139	Initializes the mapping .
10140	Set translation lang
10141	Read a property of an object
10142	Displays the default entity manager .
10143	Invoke the before action
10144	Call after action
10145	Extend collection
10146	Append data to collection
10147	Prepend an entity to the collection
10148	Is property set?
10149	Returns the last entity
10150	Get element moved by offset
10151	Check if field exists
10152	Search entity by field value
10153	Shift an item off the beginning of the collection .
10154	Filters the collection by the given callback
10155	Get collection by callback
10156	Splits the collection into a collection
10157	Slice the collection
10158	Splits the collection into chunks .
10159	Array access .
10160	Removes distinct values from the collection
10161	Reverse keys .
10162	Returns all values for a property
10163	Bind collection to collection
10164	Group entities by field name
10165	Prepare scopes .
10166	Parses scope arguments
10167	Set variable type
10168	Registers an annotation based entity mappings
10169	Convert string to camel case
10170	Prepare data for insert .
10171	Updates the cache data .
10172	Parse filter fields
10173	Parse filter values .
10174	Convert data to objects
10175	Returns the label of the item
10176	Get Additional Styles by type
10177	Get additional styles by type
10178	Returns the link for this request .
10179	Convert data to array
10180	Configure the model
10181	Get the database connection .
10182	Import a field
10183	Convert a string to a canonical name
10184	Fire the job .
10185	Mark the record as deleted .
10186	Returns class metadata
10187	Flushes the given entity .
10188	Finds an entity by its ID .
10189	Removes all entries from the database .
10190	Removes an entity .
10191	Refresh an entity .
10192	Returns repository for given entity name
10193	Checks if an entity is managed
10194	Creates a new EntityManager
10195	Process an xcdr request
10196	Perform a merge
10197	Merge two lines
10198	Checks if two files are added or modified .
10199	Checks if two lines were removed or modified .
10200	Send a record to be sent to the client .
10201	Register the service container .
10202	Applies configs to the application .
10203	Add env vars to the app
10204	Pop a job from the queue
10205	Insert a job into the queue .
10206	Request the XCdrSet attribute from the SOAP server
10207	Convert a string .
10208	Create a new record
10209	Read records .
10210	Update a record
10211	Destroy a record
10212	Restore deleted keys
10213	Counts the number of records .
10214	Proxy a service .
10215	Closes the logger .
10216	Load widgets .
10217	Load theme options
10218	This method is called when the turn starts from XmlR - Closure
10219	Add child to menu
10220	Store a newly created permission in storage .
10221	Show the form for editing the permission .
10222	Update the specified permission in storage .
10223	Remove the specified permission from storage .
10224	Sets the adapter to use .
10225	Returns the adapter type .
10226	Waits for read from the server .
10227	Gets a list of channels .
10228	Get a list of games .
10229	Convert data to array
10230	Convert data to object
10231	Format the given data as JSON .
10232	Returns the value as a string .
10233	read as integer value
10234	read as float value
10235	read as boolean value
10236	Generate a hydrator class .
10237	Find all properties .
10238	Creates the destructor
10239	Creates the Hydration method .
10240	Update application config
10241	Creates a local file if it doesn t exist .
10242	Finds one page by its attribute value .
10243	Finds all pages by the given attribute .
10244	Finds one page by option .
10245	Find page by option .
10246	Register widget bindings
10247	Register the View Parser instance .
10248	Register the launcher
10249	Get driver instance
10250	Returns an invalid result .
10251	Starts a timer
10252	Subscribe a handler to a signal
10253	Unsubscribe a signal handler
10254	Get the value of the given attribute .
10255	Set primary keys
10256	Execute query and return array of columns
10257	Set column properties
10258	Strip table name .
10259	Selects a virtual server .
10260	Selects a virtual server by port .
10261	Returns the port for the given server ID .
10262	Returns the first TeamSpeak3_Server object matching the given name .
10263	Returns the first TeamSpeak3_Server object matching the given unique identifier .
10264	Creates a new virtual server .
10265	Deletes a TeamSpeak3 server .
10266	Starts a server .
10267	Stops the server process .
10268	Returns a list of all permission names
10269	Returns the permissions associated with the specified permission .
10270	Returns the ID of a permission by its name .
10271	Returns the name of a permission by its ID .
10272	Returns the category for the given permission ID .
10273	Returns a list of all the permissions associated with the specified ID .
10274	Writes a log message to the server .
10275	Login to the TeamSpeak3 server .
10276	Logout the current user .
10277	Sets the value of a particular parameter in the query .
10278	Get validator
10279	Adds the content to the cURL
10280	Parse the result of a response .
10281	Returns the common application attributes .
10282	Get an option
10283	Builds the options
10284	User command .
10285	Ping the server
10286	Sets an attribute
10287	Formats the value .
10288	Formats the amount for saving .
10289	Get rounded amount
10290	Split by percentage
10291	Prepare and inject the elements .
10292	Get the authenticated user
10293	Start the application
10294	Search the router for the requested routes .
10295	Get request method
10296	Get all logs
10297	get death by camels
10298	Converts a number of bytes to a human readable format
10299	Returns the name of the given codec .
10300	Returns the name of the group type .
10301	Converts a permission type to a human readable name .
10302	Returns the log level for the given level .
10303	Converts a log entry string to an array .
10304	Returns a list of logs
10305	Get all traits
10306	Calls a trait method
10307	Calls events for all traits
10308	Returns the list of attribute labels .
10309	Returns an array of the class s attribute hints .
10310	Returns the result as an associative array .
10311	Fetches the error from the server .
10312	Fetches the reply from the server .
10313	Get identity .
10314	Check if user has identity
10315	Restore soft deleted attribute .
10316	Get a user
10317	Gets a list of Follows for a user
10318	Get all notices
10319	Get a channel .
10320	Escapes all TeamSpeak3 characters .
10321	Un - escapes the string .
10322	Get team information
10323	Adds a result .
10324	Get stream for channel
10325	Get Streams
10326	Get all featured streams
10327	Get followed streams
10328	Get Streams Summary
10329	Get the top .
10330	Gets the value of the element
10331	Resolves a hostname and returns the result .
10332	Get configurators
10333	Sends a text message .
10334	Kicks the client .
10335	Downloads the user s avatar .
10336	Bind events to controller
10337	Connect event handler
10338	Get a query variable
10339	Get the base Uri
10340	Sends a command to the server .
10341	Waits for the server .
10342	Prepares a command for execution
10343	Returns the server host .
10344	Lists all installed extensions .
10345	Writes extensions configuration file .
10346	Set parent helper
10347	Returns the columns of a table .
10348	Create a Transcoder instance
10349	Get a value by case - insensitive case - insensitive key .
10350	Set a word by case - insensitive key .
10351	Get all notices
10352	Lists all registered extensions
10353	Perform the actual request .
10354	Run task .
10355	Deactivate an extension .
10356	Activate an extension .
10357	Uninstall an extension .
10358	Build and run a task
10359	Returns the TeamSpeak3_Client object matching the given name .
10360	Downloads the icon .
10361	Sends a text message to the client channel .
10362	Delete channel .
10363	Encode a payload
10364	Sign a message
10365	JSON decode .
10366	Commit the configuration .
10367	Bootstrap the application .
10368	Creates a copy of the channel group .
10369	Sends a text message .
10370	Get form class name .
10371	Gets a single entity .
10372	Returns a list of entities .
10373	Creates a new entity .
10374	Edits an entity
10375	Deletes an entity
10376	Reads a file .
10377	Parses a JSON string .
10378	Parse a file .
10379	Normalize the id .
10380	Clean attributes .
10381	Set the label value
10382	Adds an element to the collection
10383	Get the top level window
10384	Removes an element from the collection
10385	Get an element by its id
10386	Loads the model state .
10387	Save application state .
10388	Set data type
10389	Called when a channel is created .
10390	Returns the localized version of a specific field .
10391	Get translated field .
10392	Get other versioned data
10393	Get other package data
10394	Human readable readme .
10395	Prepares the migration task for the given extension
10396	Build a report task
10397	Check if routes match
10398	Parse regex route .
10399	Checks for strictness .
10400	Returns the TeamSpeak3_Profiler object for this object .
10401	Initializes the transport object .
10402	Get blameable attributes .
10403	Get timestamp attributes .
10404	Evaluate event attributes
10405	Initialize hook events
10406	Before request is sent
10407	Process the after request
10408	Reads data from the server .
10409	Sends data to the server .
10410	Restore dump from dump .
10411	Dump the database
10412	Initialize menu
10413	Add a button to the menu
10414	Start the pipe
10415	Populate columns with longest value
10416	Populate numeric columns with long value
10417	Transforms a JSON string into an associative array .
10418	Register the service provider
10419	Set a file path .
10420	Set a post field .
10421	Set raw content .
10422	Resolve an abstract .
10423	Bind a concrete to the container
10424	Get the concrete .
10425	Dispatch event .
10426	Returns the spacer type of a channel .
10427	Returns the alignment of a channel spacer .
10428	Adds multiple permissions to a channel .
10429	Remove a set of specified permissions from a channel .
10430	Adds multiple permissions to a channel .
10431	Removes a set of specified permissions from a channel client .
10432	Returns a list of files in the specified channel .
10433	Returns the TeamSpeak3_Client object matching the given ID .
10434	Returns the TeamSpeak3_Client object matching the given unique identifier .
10435	Moves a client .
10436	Kicks the specified client from the server .
10437	Removes a set of specified permissions from a client .
10438	Returns the server group matching the given ID .
10439	Returns the server group matching the given name .
10440	Adds multiple permissions to a server group
10441	Returns an array of server profile profiles .
10442	Returns the channel group object matching the given ID .
10443	Returns the channel group matching the given name .
10444	Adds multiple permissions to a channel group .
10445	Reset the permissions for the current user .
10446	Uploads an icon .
10447	Creates a snapshot of the server .
10448	Returns a list of log entries
10449	Writes a log message to the database .
10450	Sorts the clients list .
10451	Sorts the server group list .
10452	Sorting function for files .
10453	Creates a copy of the server group .
10454	Returns the name of an icon for the specified icon .
10455	Returns the fully qualified class name for this object .
10456	Returns the HTML for the given viewer .
10457	Filters a list of nodes based on a set of rules .
10458	Writes a file .
10459	Returns the generated hydrator class name .
10460	Establishes the socket connection
10461	Disconnects the adapter .
10462	Reads a single line from the server .
10463	Checks if the requested class can be created .
10464	Store a newly created role .
10465	Update the specified role in storage .
10466	Remove the specified role from storage .
10467	Make a GET request to the API
10468	Returns the class name of the candidate .
10469	Returns the icon for the current node .
10470	Returns the constituent name .
10471	Returns the country flag for the current TeamSpeak3 server .
10472	Sends a transfer message to the server .
10473	Sends the given data to the server .
10474	Returns the contents of a TeamSpeak3_Speak3_Stream object .
10475	Returns session context
10476	Returns the type manager .
10477	Get database connection
10478	Remove a database connection
10479	Process security filters
10480	Dispatches the request
10481	Get the GET parameters
10482	Renders the view
10483	Checks if the request is valid
10484	Dispatches the user view
10485	Redirect to default module view
10486	Redirect to default user view
10487	Initializes the user profile
10488	Get the user preference
10489	Get default permission
10490	Returns the name of the current view .
10491	Sets the name of the current view .
10492	Returns the current view set
10493	Sets the current view set .
10494	Set the base path of the application .
10495	Get module path
10496	Hash SQL query .
10497	Check if string is equal to given string
10498	Reads the metadata from the xml array
10499	Set the account to use
10500	Send an email
10501	Log an email
10502	Retrieves information for a specific tag
10503	Returns the file path for a given class name
10504	Loads a metadata class
10505	Get core lib file path
10506	Finds the class file on the given class name .
10507	Fill a person
10508	Set a job
10509	Process all jobs
10510	Schedule the action
10511	Renders the label for this record
10512	Flattens a path .
10513	Get the config .
10514	Creates an HTTP request
10515	Stores the responses
10516	Get Plot Data
10517	Renders XYPlot .
10518	Convert a mark string to an integer
10519	returns the font name
10520	Singleton instance
10521	Get an attribute
10522	Set an attribute in a group .
10523	Get an attribute from a group .
10524	Find a record by its primary key
10525	Get the model .
10526	Generate unique id for a function
10527	Call all filters
10528	Append a callable to a hook
10529	Check if hook exists
10530	Call a hook
10531	Replace a hook
10532	Counts the number of filters for a hook .
10533	Determine if the current hook is done .
10534	Check if hook is executed
10535	Add new route
10536	pipe middleware
10537	Run application
10538	Tells the execution of the given execution .
10539	Set a definition .
10540	Get a raw definition
10541	Encrypt a value
10542	Decrypt a value
10543	Get default key
10544	Calculate command arguments .
10545	Get string type
10546	Add new app
10547	Get a sub route
10548	Serialize the request
10549	Unserialize the node
10550	Converts a year to an actual year .
10551	Returns current timestamp
10552	Returns day name .
10553	Returns the short name of the day .
10554	Returns the month name .
10555	Returns the short month name for the given date .
10556	Format a datetime .
10557	Returns formatted date
10558	Register base services
10559	Create a section tree
10560	Set owner .
10561	Remove comments from the given string
10562	Minify CSS .
10563	Set a global variable
10564	Quote a string
10565	Explode a string
10566	Get a role by its name
10567	Adds a role to the user
10568	Returns true if the user has the given role .
10569	Default error handler
10570	The exception handler
10571	Get error message
10572	Formats an error backtrace
10573	Sets the name of the file
10574	Adds a setting .
10575	Adds a setting to the cache
10576	Array access .
10577	Set the sync state
10578	Collect data for synchronization
10579	Returns the expression context for this expression .
10580	Terminate this execution
10581	Registers a child execution .
10582	Checks if a child execution is terminated .
10583	Sets the scope of the provider .
10584	Creates a new execution instance .
10585	Creates a nested execution .
10586	Returns child executions
10587	Recursively compute the scope
10588	Get a variable value
10589	Get a local variable
10590	Set a variable .
10591	Sets a local variable .
10592	Removes a variable from the scope .
10593	Removes a local variable .
10594	Execute the command
10595	Blocks until a signal is terminated .
10596	Sends a signal to the server .
10597	Take a transition
10598	Injects the current execution root .
10599	Loads a message from a file
10600	Get localized message
10601	Creates a Zend_Zend_Template object
10602	Checks if the given directory is readable .
10603	Checks if the given directory is writable .
10604	Checks if the given file path is writable .
10605	Checks if given file path is readable
10606	Checks if the given value is a valid email address .
10607	Checks if given value is valid
10608	Checks if given value is valid IPv4 address
10609	Checks if an IPv4 address is not reserved
10610	Checks if given value is valid IPv6 address
10611	Initializes the view
10612	Check if an attribute exists
10613	Check if class has method
10614	Returns the parameters of a method .
10615	Returns a reflection method .
10616	Convert the collection to an array .
10617	Get a sms response
10618	Get blank line
10619	Returns the number of term columns
10620	Get the error block
10621	Get line .
10622	Slices a value at a given position
10623	set validator rules
10624	Completes the complete flow
10625	Get an object by name .
10626	Create a new object
10627	Register an extension
10628	Authenticates the user with the given code
10629	Gets the feed
10630	Get the number of media liked
10631	Set a relationship for a user
10632	Set an array of properties
10633	Finds all records
10634	Counts all rows
10635	Finds a record
10636	Create record in database
10637	Perform select query
10638	Execute query and return all results
10639	Determine if the condition can be run .
10640	Creates a link element
10641	Adds the form to the parent .
10642	Parses the picker map
10643	Convert an array of reflection classes to self instances
10644	Initialize the variables
10645	Get field by column name
10646	Get key search rule
10647	Set the values of an array
10648	Save old field values
10649	Fetches the record array
10650	Convert SQL array to recursively
10651	Set sql record
10652	Get all input values for a given join
10653	Get join rule
10654	Get HTTP method
10655	Get request URI
10656	Get options from configuration
10657	Return the builder instance .
10658	Issue an access token
10659	Format the settings .
10660	Decodes a JSON file .
10661	Validate a totp .
10662	Lists all Comment models .
10663	Do update action .
10664	Execute the route
10665	Implode a list of values .
10666	Render a CSV file .
10667	Renders the data table
10668	Get the data table for the given object
10669	Loads the stateless object variables
10670	Gets a property
10671	Returns the active record
10672	Set the active record id
10673	Fetches records for this query
10674	Perform a direct fetch
10675	Fetches records based on a search rule
10676	Returns the number of records in the database
10677	Run the search
10678	gets number records from sql
10679	Fetch the next record from the result set
10680	Append scss to the scss map
10681	Get a configuration value .
10682	Bootstrap the application .
10683	Checks if a user is logged in
10684	Set the request .
10685	Set maxage
10686	Mime type converter .
10687	Validate input mime type
10688	Check if file is text .
10689	Checks if the file is full or not
10690	Set file properties
10691	Checks if the request is OK
10692	Reads from the filesystem .
10693	Sends the request s content
10694	Clean source .
10695	Minify JS code .
10696	Minify CSS content
10697	Wrap text words
10698	Get text content
10699	Serve text response
10700	Set Allow Origin
10701	send file content
10702	Register a new provider
10703	Denormalize an object
10704	Returns true if the given type supports denormalization .
10705	Validate data .
10706	Validate a model
10707	Get menu action .
10708	Get the url attribute .
10709	Go to the next step
10710	Saves the current step .
10711	Go back to the previous step
10712	Finish the form submission
10713	Cancels the session .
10714	Renders this form
10715	Generate a random string
10716	Returns true if the given value is empty .
10717	Wrapper for sub - functions
10718	Checks if a value is in a container .
10719	Merge anotherMI object
10720	Creates a new app .
10721	Dispatch an event .
10722	Count by field group
10723	Perform an aggregation .
10724	Find a document by its ID .
10725	Convert MongoIds to MongoId objects
10726	Normalize a date
10727	Check if a form object is in form ref libs
10728	Performs the actual rendering of the form .
10729	Get current page URL
10730	Initialize all form objects
10731	Compare two values
10732	Convert a value to an integer value .
10733	Find source files
10734	Register a namespace
10735	Builds the cache .
10736	Find composer autoloader
10737	Find the composer autoloader vendor dir
10738	Get class loaders
10739	Get a middleware by name
10740	Set a middleware
10741	Get self with string limit
10742	Get self with array limit
10743	Quote the given value .
10744	Parses an array .
10745	Format an array pair
10746	Format an array value .
10747	Get the string representation of an object .
10748	Reject an event
10749	Boot the application services
10750	Render a webpage
10751	Renders the given webpage
10752	Render a view
10753	Set the cache headers
10754	Create new comment .
10755	List all files in a directory
10756	Sort modules .
10757	Get all routes
10758	Renders menu items
10759	Renders a single menu item
10760	Write CSV to file
10761	Configure the command .
10762	Read the configuration .
10763	Runs checks .
10764	Run the export
10765	Writes the cache settings .
10766	Loads a read - only cache instance .
10767	Initialize configuration options
10768	Executes a command and returns the output .
10769	Flush the given streams
10770	Checks if the given value is a chainable
10771	Validate the form
10772	Is this group satisfied by another group?
10773	Complete the flow
10774	Returns the value of the field .
10775	Get the value of this column .
10776	Saves the old value
10777	Returns the default value
10778	Get the value on create
10779	Returns the value on update
10780	Check if the field is required
10781	Check the type of the value
10782	Validates the expression
10783	Finds a file by its name .
10784	Prepare the theme name .
10785	Set the theme to use .
10786	Register a theme
10787	Adds a theme .
10788	Translate an array key to an offset
10789	Returns the key of an array
10790	Compute the standard deviation of an array .
10791	Set middleware .
10792	Get controller action
10793	Get path params
10794	Checks if the scheme matches the given scheme .
10795	Checks if the given hostname matches the given hostname .
10796	Checks if the URI matches the URI .
10797	Fetches the tree
10798	Fetch node path by search rule
10799	Recursive function to get children nodes
10800	Returns all settings .
10801	Returns the link expression
10802	Returns the text
10803	Get a new record
10804	Set the secret
10805	Converts number to binary .
10806	Get localized number
10807	Adds a table column to the query
10808	Adds an SQL expression
10809	Reset SQL .
10810	Adds an order by clause to the query
10811	Adds another SQL
10812	Add an association
10813	Returns the SQL statement for selecting
10814	Get a value by key
10815	Run CLI action
10816	Get default template locations
10817	Render the select box
10818	Get fonts from Google
10819	Check if the group matches the given group .
10820	Validates the submitted values
10821	Validate uniqueness
10822	Returns true if the record can be updated
10823	Is this record allowed?
10824	Updates an existing record
10825	Returns an array of new records
10826	Generate a new ID for this object
10827	Insert a record
10828	Delete a record
10829	Get the list of on audit fields
10830	Run the DOTOG trigger
10831	Gets the join fields for the join object
10832	Gets the join record for the join object
10833	Check if we need to generate
10834	Runs all tests .
10835	Initializes the report class
10836	Resolve the route for the given request .
10837	Resolves action parameters .
10838	Check if a setting exists .
10839	Get a setting by its name and flag .
10840	Returns all settings .
10841	Loads settings from file .
10842	Set cache location
10843	Prefixes CSS rules
10844	Prefixes the align items
10845	Generate prefix for alignContent
10846	Prefixes for align self
10847	Prefixes a value for flex
10848	Prefixes - Content - Fixer - Content
10849	Get the css rules
10850	Comment on a media .
10851	Perform a DELETE request
10852	Get the filtered media .
10853	Get preferred image
10854	Retrieve a placeholder
10855	Creates a rule from a string .
10856	Get the output
10857	Returns an instance of Eloquent ReflectionMethod .
10858	Lists all sitemaps .
10859	Renders the sitemap .
10860	Get XML Tree
10861	Check if the access token is valid
10862	Determine the access token
10863	Call a middleware method .
10864	Checks if context changed
10865	Stores a command .
10866	Perform execution .
10867	Retrieves a specific phi
10868	Create an environment phar
10869	Get pattern by name
10870	Merge the group config with the current one .
10871	Remove a record from an array
10872	Remove a record from the database
10873	Removes a single record from an association .
10874	Convert relations to array
10875	Reads XML metadata from an array .
10876	Read meta collection
10877	Prefixes the package .
10878	Allow user access .
10879	Build the PhpRedis driver .
10880	Get model for given table
10881	Adds a resolver for a given type
10882	Returns the resolver for the given type
10883	Set sub resolver
10884	Resolve a reference
10885	Set authorative
10886	Register a resolver for a module
10887	Sort modules by priority .
10888	Set the priority of a module .
10889	Automatic configuration from composer . json
10890	Recursively finds all modules in a given path .
10891	Get row checkbox by field name
10892	Register the service
10893	Converts formatted string to value
10894	Convert value to formatted string
10895	Convert value to number format
10896	Convert a number to its localized value .
10897	Convert a value to a date .
10898	Convert a date value to a string value .
10899	Convert value to datetime format
10900	Convert a datetime value to a string value .
10901	Convert value to currency symbol
10902	Convert currency symbol to php value .
10903	Convert value to phone format
10904	Converts a datetime format from one format to another .
10905	Parse a date based on the format
10906	Renders the DSN for MySQL .
10907	Renders the DSN for pgsql .
10908	Render DSN parts
10909	Inserts data into database
10910	Insert multiple rows into a table
10911	Get request path
10912	Get an entry by its identifier .
10913	Format the query string
10914	Format a value for the query
10915	Set the bind values
10916	Get user profile .
10917	Formats the given report
10918	Check if a string is strong
10919	Validate an email address
10920	Validate a date
10921	Get error message
10922	Make adapter .
10923	Agrega un registro
10924	Generates a new ID for the given ID .
10925	Get a new system id
10926	Generate a new GUID
10927	Get new id from sql query
10928	Get a visible attribute
10929	Set formatter
10930	Prepares a file for output .
10931	Close the log file
10932	Returns the path to the log file
10933	Get formatter by extension
10934	Get the document manager .
10935	Renders a view
10936	output the pdf
10937	Set the base URL of the Rest Client
10938	Initializes the cURL resource .
10939	Retrieves multiple resources at once .
10940	Make a POST request to the API
10941	Sends multiple requests at once .
10942	Push a job onto the queue .
10943	Create the payload for a job .
10944	Returns content element identifier .
10945	Returns the content element signature
10946	Returns the signature for an extension .
10947	Returns the title
10948	Removes a record from the data object
10949	Sort a record
10950	Filter view children by view column
10951	Filters the view children by system language
10952	Set field value by db field name
10953	Get an array representation of an entity
10954	Fills entity with data
10955	Extracts a zip archive .
10956	Adds files to the zip archive .
10957	Extracts a GZ .
10958	Reads a line from a file .
10959	Get the size of a directory
10960	Gets an array of class names from a file .
10961	Add a new route
10962	Resolves the route for the given request .
10963	Resolves a configuration key .
10964	Check if a key exists .
10965	Get a configuration value .
10966	Loads a configuration file .
10967	Get background details .
10968	Connects to the API .
10969	Check response status code
10970	Handles the received message .
10971	Is message .
10972	Reads the next chunk size
10973	Read JSON stream .
10974	Returns the value of a property .
10975	Returns default value
10976	Get hidden value
10977	Returns the text
10978	Returns an array containing the keys of the scoped event handlers
10979	Get context menu
10980	Generate an event selector
10981	Get the redirect page
10982	Returns the event type for the given event handler name .
10983	set form name
10984	Adjust the form name
10985	Returns the formated function .
10986	Parses a string and returns the function name and parameters
10987	Call a method .
10988	Clears the result .
10989	Halt the request .
10990	Reset the state .
10991	Creates an instance of the specified element .
10992	Convert a counter to a string
10993	Perform a GET request
10994	Make a POST request
10995	Get the HTTP response
10996	Should we follow a redirect?
10997	Check effective time
10998	Parse string to array
10999	Parse a string
11000	Renders form object
11001	Render form object
11002	Render PHP form .
11003	View an entity
11004	Stores a new entity
11005	Call a method on the entity class .
11006	Get middleware .
11007	Get the default commands
11008	Updates the given user
11009	Returns the plugin settings .
11010	Get the group information
11011	Get the member information
11012	Get effective members
11013	Parse membership data
11014	Parses history .
11015	Parse affiliate data .
11016	Parse search data .
11017	Returns the webpage object .
11018	Get an element by name
11019	Returns error elements
11020	rerender sub forms
11021	Set the bundle class name
11022	Get translation key .
11023	Lists all words .
11024	Load configs
11025	Remove a value from the cache
11026	Get cache ids
11027	Clean all items
11028	Recursively creates a directory
11029	Reads a configuration file
11030	Get config reader by extension
11031	Add new branch .
11032	Add route .
11033	Find route branch by part
11034	Get the next branch for the given URI part .
11035	Finds issues by issue .
11036	Get WP contents
11037	Get WordPress categories .
11038	Get WordPress menus .
11039	Get WordPress pages .
11040	Get WP posts
11041	Get WP Post Types .
11042	Get WordPress tags .
11043	Get taxonomies .
11044	Get WordPress terms .
11045	Adds a path to the search path .
11046	Set the priority of a module .
11047	Returns the relevance of a module
11048	Clears the resolve cache
11049	Get cached data
11050	Resolves the path to a file
11051	Parse Request Uri
11052	Save the form stateful variables
11053	Get current step
11054	Get form inputs
11055	Cancels submitted form
11056	Register a new sub type
11057	Get the input .
11058	Delete cache files
11059	Convert Expires to seconds
11060	Get Key Words
11061	Find all emails in a given text .
11062	Check if a string contains a given array
11063	Redirects the request
11064	Run the migrations .
11065	Migrate the given directory up .
11066	Sets the ID of the user .
11067	Starts the daemon
11068	Check if a parameter exists
11069	Get the oauth request
11070	Generate the OAuth signature
11071	Creates a new node .
11072	Creates a new transition
11073	Add a setting
11074	Adds a set of settings .
11075	Get all settings
11076	Filter cachable settings
11077	Returns all settings as an array
11078	Returns all cachable settings as an array
11079	Get filtered settings
11080	Get filtered settings
11081	Renders the tree
11082	Renders node items .
11083	Renders a single node item
11084	Run the autoloader
11085	Register the bundles for an environment
11086	Installs all the autoloaders
11087	Initialize the console .
11088	Autoload class .
11089	Loads a configuration file
11090	Forwards the request to another route .
11091	add glyphicon
11092	Set query parameters
11093	Sets the limit and offset
11094	Get the database connection .
11095	Gets a property
11096	Retrieves a reference to an object
11097	Set an association
11098	Parse a docblock
11099	Creates a connection from SQLite .
11100	Creates a connection from a SQLite file .
11101	Get field instance
11102	Check if a field exists
11103	Get field names .
11104	Get initial data model
11105	Authorizes the index request .
11106	Authorize the given request .
11107	Get a nested item
11108	Initialize user agent
11109	Get export implementation
11110	Returns the report implementation
11111	Get runner implementation
11112	Get the cache implementation
11113	Builds the SQL for updating
11114	Returns the SQL for DELETE query
11115	Returns the style for this field .
11116	Get child nodes
11117	Get attribute value
11118	Gets the attributes of this node .
11119	Get child node
11120	Returns the literal value of the element .
11121	Cache the menu if configured .
11122	Perform the actual call
11123	Checks if the rule is valid .
11124	Checks if the current call is a getter .
11125	Checks if this call is a setter .
11126	Prepare cURL call
11127	Returns the response
11128	Parse the response body .
11129	Save an object variable
11130	Loads an object variable
11131	Save all objects in the session
11132	clear all session objects
11133	Save JSON array
11134	Set a form history .
11135	Start the timer
11136	Recalculate the elapsed time
11137	calculate the elapsed time
11138	Reset the counter
11139	Validate an executable path .
11140	Get redirect page
11141	Called when an exception occurs
11142	Process the URL
11143	Returns the base URI
11144	Validate the identity
11145	Initializes the authentication result .
11146	Set a visible attribute
11147	Get the firsthump .
11148	Converts a list of records to an array
11149	Formats the result .
11150	Call a middleware .
11151	Call the getter for the getters
11152	Call proxy methods
11153	Call setters
11154	Get or set the halt middleware
11155	Clear all middleware .
11156	Disable a middleware .
11157	Enable middleware .
11158	Get a middleware .
11159	Get a middleware group by id .
11160	Set or get the middleware group .
11161	Check if middleware exists .
11162	Check if middleware is disabled .
11163	Check if middleware is enabled .
11164	Get middleware .
11165	Middleware collection .
11166	Prepend a middleware .
11167	Push a middleware .
11168	Set middleware context
11169	Call a middleware .
11170	Saves the settings to the cache .
11171	Returns an array of forms
11172	Setup the autoloader
11173	Find the outgoing transition for the given execution
11174	Call callback function .
11175	Generates a JavaScript call to submit the form
11176	Returns HTML code for a link tag
11177	Generates a submit button
11178	Cast key to string
11179	Determine if the given middleware is an abstract .
11180	Determine if the given value is a collection .
11181	Resolves a middleware .
11182	Resolve a middleware
11183	Resolves many middleware .
11184	Resolve many middleware .
11185	Resolve a middleware .
11186	Resolve a middleware .
11187	Renders the report
11188	Get unique string
11189	Determine if the user has the given role .
11190	Determine if the user has the given role .
11191	Encrypts the hash
11192	Returns information about the current request
11193	Perform the request .
11194	Allow access to a view
11195	Get a view by name
11196	Format the settings .
11197	Loads an XML document .
11198	Validate a DOM schema .
11199	Validates a DOM document against a schema .
11200	Resolve xinclude directives
11201	Get the value of an element
11202	Get an XML element by its name
11203	Set default namespace
11204	Register the enviraut namespace
11205	Determines if the document is an ENvironiraut configuration document .
11206	Refresh DOMXPath
11207	Parse a libxml error .
11208	Get all resolvers for the given subject .
11209	Check authorization parameters
11210	Create a new authorize request
11211	Complete the flow
11212	Prints the output
11213	Get form inputs
11214	Redraw form data
11215	Show client alert
11216	Displays an error popup
11217	Close the popup
11218	Run client script
11219	Redirect to a view
11220	Append script to a script
11221	Returns an appended script that includes additional scripts
11222	Append styles to a script
11223	Append extra styles
11224	Include js scripts
11225	Include rte scripts
11226	Include CKEditor scripts
11227	Include prop_window scripts
11228	Include validator scripts
11229	Execute all actions
11230	Composes an action message
11231	Convert a string to an array
11232	Process form object errors
11233	Set sub forms
11234	Load the picker form
11235	Set request parameters
11236	Fetches the data set for this query
11237	Returns the ID of the record .
11238	Automatically selects a value based on the input
11239	Renders the context menu
11240	Render HTML .
11241	Gets the event log message
11242	Get list of elements that are on event log
11243	Run the event log
11244	Returns the element which is being triggered
11245	Set scripts for this form
11246	Removes a middleware from the stack .
11247	Run the middleware .
11248	Create from string
11249	Generate a SHA1 hash
11250	Decode a base32 string .
11251	Returns an iterator for the current directory .
11252	List all files in the directory .
11253	List all directories .
11254	List all files in the directory .
11255	Make file .
11256	Make directory .
11257	Move current file
11258	Rename a file
11259	Remove directory .
11260	Set the field name .
11261	Sets the type .
11262	Sets the input format .
11263	Set the value
11264	Returns the value of this field
11265	Save the children .
11266	Add children to entity
11267	Returns the models that match the given criteria .
11268	Outputs a list of models .
11269	Convert a REST resource to an array .
11270	Generate reCaptcha form
11271	Verify the captcha
11272	Get service object
11273	Renders the error .
11274	Renders a http exception .
11275	Render CakePHP exception .
11276	Renders a serializer exception .
11277	Renders a validation serializer exception .
11278	Render a HttpException as JSON .
11279	Renders a HttpException as JSON .
11280	Render CakeException as JSON .
11281	Renders a CakePHP exception as JSON .
11282	Default render method
11283	Render a serializer exception .
11284	Render a json serializer exception .
11285	Render a ValidationSerializerException .
11286	Render a ValidationSerializerException as JSON .
11287	Render a ValidationSerializerException as JSON .
11288	Opens a session by ID .
11289	Creates a new session .
11290	Prepares the text
11291	Displays text .
11292	Display empty lines .
11293	Initializes the application .
11294	Modifies the response for the response .
11295	Initializes the debugger
11296	Starts a new session .
11297	Checks if the current user is hijacking
11298	Regenerate the session
11299	Validates the session
11300	Bind all layers to this structure .
11301	Protected parametri
11302	Register the project
11303	Generate CLI header
11304	Parse raw body .
11305	Remove extra indentation
11306	Applies the request to the request .
11307	Parse query string from url .
11308	Binds the template
11309	Returns the matches for the given URI .
11310	Get the justification constant
11311	List local files
11312	Extract documents link from HTML
11313	Excluding link
11314	Save a file
11315	Determines if a pdf exists .
11316	Get the next ordinal number
11317	Ends the loop
11318	Display text in terminal
11319	display n lines
11320	Fit a linear regression to the model .
11321	Perform the regression analysis .
11322	Initialize table .
11323	Writes a record to the database .
11324	Draw a single item
11325	Start text output .
11326	Initialize the application .
11327	Returns the allowed size
11328	Builds the form for a section .
11329	Get form factory
11330	Load fixtures from iterator
11331	Create a new Url instance from a relative path .
11332	Installs a package
11333	Install plugin files
11334	Install the Composer framework
11335	Update package .
11336	Update framework files
11337	Uninstall plugin .
11338	Uninstall plugin .
11339	Remove matching directory
11340	Recursively removes a directory
11341	Set text colors
11342	Get text area
11343	Calculates the width of the message .
11344	Get by date value
11345	Get date value
11346	Cast an attribute .
11347	Cast attributes to array
11348	Array access .
11349	Get a menu .
11350	OnKernel response .
11351	Returns the service definitions .
11352	Parses the imports .
11353	Parse the service definitions .
11354	Loads a YAML configuration file .
11355	Resolves the service definitions .
11356	Initialize the autoloader
11357	Returns the AES object
11358	Convert bytes to human readable format
11359	Set the bullet
11360	Set a column definition
11361	Calculates the total width of all columns
11362	Returns whether this column has a header text .
11363	Gets the header text .
11364	Check if data is correct
11365	Calculates the width of each column .
11366	Draws the table
11367	Creates a new session .
11368	Creates a new session file
11369	Save session data .
11370	Acquire a lock .
11371	Display a section form
11372	Factory method .
11373	Get the current working list
11374	Parse the facts .
11375	Find by id
11376	Find records by where clause
11377	Fetch all records
11378	Finds all records by where clause
11379	Creates a new record
11380	Update data in database
11381	Parse notation string .
11382	Applies conditions to expression .
11383	Calculate the formulas .
11384	Create a new plugin client .
11385	Sets the file for this response .
11386	Add a template .
11387	Checks the cache file for the given template .
11388	Convert blocks to blocks .
11389	Returns the metadata for a template .
11390	Builds the definition provider .
11391	Get the result of a given formula .
11392	Save a formula .
11393	Adds a header to an item .
11394	Set dropdown menu
11395	Check if user has granted
11396	Create a download response
11397	Get url for resource
11398	Set album cover
11399	Get data by type
11400	Get data from url
11401	Install the footer
11402	Check if date is valid
11403	Wraps the provided content to the HTML page
11404	Run the command .
11405	Factory method .
11406	Create a new session
11407	Send new entity .
11408	Register all providers
11409	Register a provider from a file
11410	Returns all facts .
11411	Populates the facts .
11412	Records a domain event .
11413	Applies the event handler to the domain event .
11414	Callback for plugin functions
11415	Draws the bar
11416	Calculates the given formula .
11417	Returns true if the current request has layout .
11418	Initialize the color .
11419	Override members to given style
11420	Clears all styles
11421	Set the text color
11422	Set fill color
11423	Set text colors
11424	Reverses colors .
11425	Creates a new function instance .
11426	Load all plugins
11427	Show plugin in admin mode .
11428	Check the cache .
11429	Update plugin cache .
11430	Plugin hooks .
11431	Get a channel
11432	Creates loggers
11433	Create a logger .
11434	List all Locations .
11435	Create a new instance of a class
11436	Returns an array of class interfaces
11437	Get parent class
11438	Gets a list of methods
11439	Get property values
11440	Check if a given type is defined
11441	Adds a Materialized Resource
11442	Returns the aggregate style .
11443	Rewrite paths in style
11444	Wrap media rules
11445	Move all imported imports to the start of the beginning .
11446	Get an entry from the archive .
11447	Remove a file from the archive .
11448	Get the archive path
11449	Get the path to the archive .
11450	Recursively cleanup values .
11451	Filters a multidimensional array
11452	It returns terminal screen size
11453	HTML style .
11454	Render a script tag .
11455	Create a mailto .
11456	Generates a static control .
11457	Generates a static control for a model attribute .
11458	Adds a css style to the given options
11459	Make directory .
11460	Set the files to publish .
11461	Initializes the component
11462	Logs in the given identity .
11463	Regenerate CSRF token .
11464	Log in by cookie .
11465	Get return url
11466	Check if login is required
11467	Renew identity cookie
11468	Renews the authentication status .
11469	Check if user has permission
11470	Returns the days of week
11471	Save uploaded file
11472	Executes the current query
11473	Set the FROM mode to DELETE
11474	Set the INSERT mode
11475	Add an inner join to the query
11476	Adds a WHERE clause to the query .
11477	Adds a having clause to the query .
11478	Returns the SQL for DELETE
11479	Creates a positional parameter .
11480	Bind the logger interface to the application .
11481	Bind logger to container
11482	Set HTTP status code
11483	Returns the response body as a string
11484	Redirects to another url
11485	Create an empty response
11486	Prepare HTTP headers
11487	Prepares the cookies for the request .
11488	Get default response formatters
11489	Extract auth user and password
11490	Returns an array of scenarios .
11491	Fill the scenarios attributes
11492	Returns the form name of this model .
11493	Get all attributes
11494	Validates the model .
11495	Validate multiple models .
11496	Translation message .
11497	Add an attachment .
11498	Add a plugin
11499	Send the request .
11500	Load a class
11501	Get listener annotations
11502	Set the properties of a listener .
11503	Parses an annotation .
11504	Returns an array of options
11505	Set options .
11506	Returns a key value
11507	Hydrate from array
11508	Load entities from a directory .
11509	Extend Entity Manager
11510	Checks all predictions
11511	Process the extended configuration
11512	Verify class method
11513	Verify class property exists in class
11514	Verify function
11515	Verify closure .
11516	Verify a dispatch capability .
11517	Get the dependencies for the given dispatch object .
11518	Get the dependencies for the given dispatch
11519	Dispatch class method .
11520	Get class property value
11521	Get the class of the dispatched dispatcher .
11522	Dispatch function .
11523	Dispatch a closure
11524	Dispatch a callable
11525	Get arguments as string
11526	Get request arguments
11527	Parse request arguments .
11528	Generate an asset URL
11529	Set the protocol version
11530	Assert that the given header values are valid .
11531	Inject a header .
11532	Returns the current ISO8601 timestamp .
11533	Checks and updates the cookie fields
11534	Stores a cookie .
11535	Adds cookies from a response
11536	Returns all matching cookies matching the given URL
11537	Returns all cookies
11538	Serialize all cookies
11539	Unserialize session data
11540	Check if the cookie host matches the request host .
11541	Create an instance of a command
11542	Get the arguments for a given command
11543	Get the help for a given command
11544	Return a singleton frontend class
11545	Converts an expression to a target system .
11546	Parses an expression part .
11547	Process a key
11548	Trims unicode characters
11549	Set the character encoding
11550	Creates a new iterator exception .
11551	Initializes the translation
11552	Initialize URL language prefixes
11553	Returns message formatter
11554	Starts a transaction .
11555	Get the API request URL
11556	Get the parameters for the API request
11557	Get the response as an array
11558	Get the success message
11559	Find all budget by id
11560	Returns the current language
11561	Parses the Accept - Language header
11562	Bind a value to the container .
11563	Resolves a class .
11564	Validate the given url .
11565	Check if a field name is a live var
11566	Gets the value of a field
11567	Wrap object in ViewableWrapper
11568	Formats the field as a date .
11569	Make a session identifier .
11570	Encrypt session data
11571	Decrypt session data .
11572	Generate encryption key
11573	Set encryption algorithm
11574	Sets the hash algorithm .
11575	Prepares the update sets for a table .
11576	init service params
11577	Get a parameter value
11578	Check target relation exists
11579	Check if target attribute exists .
11580	Determine if the given value exists .
11581	Prepares the clause
11582	Renders a Modal .
11583	Localize a localized string .
11584	Detach the stream .
11585	Reads from the stream .
11586	Creates a new request
11587	Create request from global variables .
11588	Sets the server array
11589	Set request headers .
11590	Returns the request path
11591	Get path without query part
11592	Returns the http host .
11593	Sets the request method .
11594	Returns the request method .
11595	Get MIME type by format .
11596	Get format for given mime type .
11597	Returns request format
11598	Renders a controller method .
11599	Initialize http events
11600	Add middleware
11601	Create a reaction application
11602	Registers an alias .
11603	Set aliases .
11604	Returns the error level for the given error code .
11605	Generates a proxy
11606	Returns the parameters for a method call .
11607	Generates proxy class
11608	Generate proxy properties
11609	Get proxy methods
11610	Generate proxy class name
11611	Get argument declaration .
11612	Checks if the method can be proxied .
11613	Check if methods can be proxied .
11614	Recursively traverse the tree structure .
11615	Get method parameters
11616	Create a packagist
11617	Loads messages from database .
11618	Initialize application .
11619	Bootstrap the config
11620	Bootstrap core
11621	Bootstrap the application container
11622	Get an environment variable
11623	Set the environment
11624	Retrieve a configuration value
11625	Abort the request
11626	Throws an HttpRedirectException .
11627	Return a response .
11628	Redirect to a route .
11629	Get a view instance .
11630	Get an item from the collection
11631	Checks if a key is a valid descriptor key .
11632	Validates a descriptor .
11633	Get cache invalidation settings
11634	Set the cache invalidation settings .
11635	Initialize the logger
11636	Get log file path
11637	Verify a password .
11638	Set the existence
11639	Renders the progress bar .
11640	Renders a progress bar .
11641	Process SOAP request
11642	Get SoapServer instance
11643	OnFlush event
11644	After flush event
11645	Invalidate an entity .
11646	Adds a tag to the list of tags that should be invalidated .
11647	Returns a list of available choices
11648	Set callback function
11649	Filters a value
11650	Get the percentage of loading memory
11651	Returns all seobility models .
11652	Set seobility values
11653	Get seobility information
11654	Convert boolean value to boolean .
11655	Get the ordinate by the xscissa
11656	Get abscissa by position
11657	Add an attachment
11658	Encode the message body .
11659	Encode Header to File .
11660	Encode part to a file .
11661	Adds a subpart
11662	Encodes a quoted string
11663	Build a header string
11664	Builds a RFC2047 parameter
11665	Explode a quoted string
11666	encode a header value
11667	Encode a string
11668	Return the admin messages view .
11669	Returns the next line from the input stream .
11670	Renders the menu items .
11671	Run before each action
11672	Set cache option
11673	Returns a new version of the given string .
11674	Creates a sentence .
11675	Extract Gallery Array
11676	Returns true if the session is still valid .
11677	Get field errors
11678	Sets the sameSite .
11679	Cleans and adds header
11680	Finds classes in a namespace .
11681	Returns the paths for a namespace
11682	Get the paths for a namespace
11683	Get namespace prefixes
11684	Get loader prefixes .
11685	Updates the session .
11686	Merge new values .
11687	Get session data
11688	Get the current page number from the query string .
11689	Generate query string
11690	Returns the filters as an array .
11691	Creates a Form instance .
11692	Save Query Result
11693	Get pagination .
11694	Get previous record id
11695	Return array representation .
11696	Add a new field
11697	Process the options
11698	Get connection params
11699	Check if database is installed
11700	Returns the sql string for this query
11701	Executes this query
11702	Returns the repository for the given entity .
11703	Create a new entity .
11704	Save an entity .
11705	Remove an entity from the repository
11706	Commit all operations
11707	Get store instance
11708	Get the store configuration .
11709	Get a store instance from configuration .
11710	Validate the password
11711	Create a new instance from the accept header .
11712	Parses a string into an array of quality values .
11713	Compares a string against another array
11714	Calculate the earth radius of a latitude
11715	Convert decimal coordinate to DMS
11716	Convert degrees to decimal value
11717	render production error page
11718	Displays the error rendering
11719	Log the exception
11720	Generates configuration file .
11721	Creates a configuration file .
11722	Save messages to PHP file .
11723	Save messages to PO file .
11724	Creates instance from array .
11725	Creates instance from string .
11726	Creates a time from a PHP date .
11727	Obtains an instance from a number of seconds .
11728	Invalidates the given tags .
11729	Flush all tags .
11730	Encode tags .
11731	Register the package configs .
11732	Get all cookies
11733	Adds a cookie to the collection .
11734	Removes a cookie .
11735	Confirm a user with answers
11736	Returns the labels for the model .
11737	Wraps the session variable into the session
11738	Gets table primary key
11739	Gets table foreign keys .
11740	Gets the table indexes .
11741	Gets table uniques .
11742	Gets table checks .
11743	Gets the default values for a table .
11744	Get a parameter by key .
11745	Checks the current ACL access
11746	Marks column as distinct .
11747	Set the columns .
11748	Adds a JOIN clause to the query
11749	Adds an INNER JOIN clause to the query .
11750	Left Join Join
11751	Left outer join
11752	Right Join clause
11753	Add an outer join to the query
11754	Adds a full outer join to the query
11755	Group by clause
11756	Simple AND having condition .
11757	Simple OR having condition .
11758	Sets the order of the query
11759	Sets the limit and offset
11760	Sets the offset
11761	Build the SQL query
11762	Renders a link .
11763	Renders a button .
11764	Renders the locale switcher .
11765	Convert equation to string
11766	Returns the ordinate value of the current axis
11767	Get abscissa by position
11768	Find record by id
11769	Finds a record by predicate
11770	Checks if a record exists in the database .
11771	Checks if a value exists in the collection
11772	Delete rows by predicate
11773	Delete record by id
11774	Update data in database
11775	Inserts data into database
11776	Table relation object
11777	Returns all primary keys
11778	Get primary key
11779	Get column information
11780	Executes a prepared statement
11781	Get predicate for primary keys
11782	Checks that specified data columns are present .
11783	Parses the response as an array .
11784	Parse the content as an object
11785	Set return type
11786	Runs the application
11787	Enqueues the hooks .
11788	Type .
11789	Set the field name .
11790	Set the start position
11791	Set the damage .
11792	Set aim level
11793	Set the meter gain value
11794	Set input inputs .
11795	Add cancel ability .
11796	Set start frames .
11797	Set active frames .
11798	Set recovery frames
11799	Set hit advantage on hit
11800	Set guard advantage on guard
11801	Builds the Move object .
11802	Send a message to slack
11803	Parse route path .
11804	Parse route data .
11805	Validate route datum
11806	Finds the parameter segment in the path .
11807	Call repository .
11808	Validate class name .
11809	Check if file is an image
11810	Returns the number of files in the directory
11811	Get the application path info
11812	Gets the route and its params
11813	Returns a new instance with the specified scheme .
11814	Get self with user information .
11815	Returns a new instance with the specified hostname .
11816	Returns a new instance with the specified port .
11817	Helper function for sorting an array by key .
11818	Parses a query array by key
11819	Set query variables
11820	Set a query variable
11821	Get the URL for the current request .
11822	Normalize URL components
11823	Creates a base URL based on the given reference
11824	Is fragment only .
11825	Returns the canonical URL for the current request
11826	Get the current url
11827	Get an option value
11828	Build query string
11829	Parse url
11830	Display text in HTML
11831	Translate the message
11832	Suggest request language .
11833	Get new states .
11834	Validates a list of states
11835	Switches to the specified states .
11836	Finds by budget id
11837	Displays the login page .
11838	Logs user out .
11839	Connects to a user account .
11840	Get a specific build parameter
11841	set html body
11842	Add HTML image
11843	Adds an attachment to the message .
11844	Reads a file into a string
11845	Adds a text part to a Mail_MimePart object
11846	Adds an HTML message part to the email body
11847	Add HTML image part
11848	Adds an attachment part to an object
11849	Encode headers .
11850	Check required parameters
11851	Check if the value is valid
11852	Initialize class .
11853	Load all permissions .
11854	Save all changes .
11855	Save data to file
11856	Create JsonResponse
11857	Set the callback .
11858	Set JSON encoding options .
11859	Get the layout .
11860	Returns all words as a string
11861	Updates a session entity .
11862	Delete session entity
11863	Configures the AMQP options .
11864	Load the configuration for the console .
11865	Returns the PHP memory limit .
11866	Create a leaf for the rest model .
11867	Render the Tool
11868	Adds a plugin to the application .
11869	Get config value
11870	Generate a URL for a named route .
11871	Add GET route
11872	Create html response
11873	Create a new RedirectResponse
11874	Sets the path segments .
11875	Returns a proxy object
11876	Returns an instance of the given class .
11877	Get all results
11878	Returns an array of columns .
11879	Paginate the results .
11880	Finds an object by its ID .
11881	Persist an entity .
11882	Delete an entity
11883	Counts number of entities
11884	Create select query .
11885	Applies scopes to query builder
11886	Applies order by to query builder
11887	Make a new no result exception .
11888	Replaces placeholders in the query
11889	Add RPC method
11890	Get RPC method
11891	Stops the loop
11892	Adds multiple headers .
11893	Set a preload link
11894	Create a new request instance
11895	Creates a new photo instance
11896	Range .
11897	Starts the session
11898	Regenerates the session .
11899	Write out the session
11900	Unset all session variables
11901	Destroys the session
11902	Unserialize session data
11903	Sets the session cache_expire
11904	Returns a reaction instance .
11905	Get module options
11906	Returns the file size
11907	Set the walk flag
11908	Set array flag
11909	Set the matrix data
11910	Get the value at the specified position
11911	Set the value at the given position
11912	rewinds the iterator
11913	Get previous position
11914	go to the previous x position
11915	Move the previous y
11916	go to the previous position
11917	Get next value
11918	go to the next X
11919	Move the next Y
11920	Move the pointer to the next position
11921	Seek to a specific position
11922	Get current position
11923	Retrieves the current key
11924	Check if the current position is valid
11925	Check if x is valid
11926	Determine if the current position is valid .
11927	Return the number of nodes in this graph
11928	Seek to an offset
11929	Seek to an offset
11930	Check if an offset exists
11931	Returns the current element
11932	Set an integer value
11933	Checks if the value is a boolean .
11934	Add view methods for an object .
11935	Add allowed controller methods
11936	Set the table
11937	Set the FROM table
11938	Set AND conditions .
11939	Set or where conditions .
11940	Set a static rule .
11941	Set static rule reference
11942	Instantiate a Zend_Filter_Interface
11943	End the body .
11944	Register a js file
11945	Registers a JavaScript variable .
11946	Get the default config files
11947	Returns a singleton instance of PEAR_Config instance .
11948	Setup channels .
11949	Merge config data from a file .
11950	Write config file
11951	Reads configuration data from a file .
11952	Get default channel
11953	Get channel configuration value
11954	Set the channel configuration
11955	Returns the type of the specified key .
11956	Get documentation for a key
11957	Get prompt value
11958	Get the group for a particular key .
11959	Get all groups
11960	Get all keys for a specific group
11961	Returns all set values
11962	Get config keys
11963	Remove a configuration key
11964	Removes a layer
11965	Determine if a particular layer exists .
11966	Check if a layer is defined
11967	Set the registry
11968	Process the extends clause
11969	Replace constants in the given value
11970	Returns the callback for the log .
11971	Checks if the given value is valid .
11972	Get all valid values
11973	Get valid values .
11974	Set the value of this Enum
11975	init the post install process
11976	Start a new session for a given package and contents .
11977	Add a success count
11978	Adds the elapsed time
11979	Returns the estimated amount of the cart
11980	Get all request methods
11981	Disable WordPress auto update
11982	Block wp request .
11983	Hide WordPress admin nag
11984	Checks if a point is valid
11985	Determines if the center is parallelram
11986	Get a value by composite key
11987	Check if a composite key exists .
11988	Find application by id .
11989	Find all applications .
11990	Compares two NumberSystems .
11991	Returns the digits of a number .
11992	Builds a number
11993	Validates that the given number is a number .
11994	Performs a call on the server .
11995	Generate a key for the given identifier .
11996	Connects to the redis server .
11997	Get command string
11998	Convert domain event message to MongoDocument .
11999	Returns domain event message .
12000	Reset the state
12001	Normalize messages .
12002	Post validate callback
12003	Attach form data event
12004	Returns an array of forms
12005	Removes a string from an array
12006	Returns an array of entities
12007	Swap two entities
12008	Configures a form to exclude data from a form .
12009	Set form data handler
12010	Removes all fields from the entity after attach
12011	Add a response to the list of responses
12012	Creates a PSR - 7 response object from a string
12013	Creates a PSR - 7 response object from a file .
12014	Change head version
12015	Check if an entity needs a new version
12016	Persist an entity
12017	Clear all versions of an entity
12018	Clean up files .
12019	Check if key is connected to another mount
12020	Move a key to another location
12021	Reconnects a directory to another filesystem .
12022	Determine if the given key is a DIRECTORY .
12023	Recursively creates a directory
12024	Finds a entity by its ID .
12025	Create new entity
12026	Save an entity
12027	Delete an entity
12028	Validates the given entity .
12029	Perform a select query .
12030	Select Query Builder
12031	Sets criteria in query .
12032	Set array criterion in query .
12033	Sets the order in the query .
12034	Save delete for an entity
12035	Set the properties for a save delete delete query .
12036	Set properties for a save create delete statement .
12037	Get entity relations
12038	Ensure that all required properties are set
12039	Broadcast the message body
12040	Execute the operation
12041	Get script source
12042	Generate a div .
12043	Display image .
12044	Display audio .
12045	Verify a response
12046	Verify the response
12047	Generate script tag
12048	Generate script tag with given callback name
12049	Check key .
12050	Check if the value is a string
12051	Send a verify request .
12052	Initialize theme .
12053	Find the view file for a given view name .
12054	Render a PHP stateless file .
12055	Register post types
12056	Generate a token .
12057	Generates a new token .
12058	Builds the project
12059	Message filter callback
12060	Notice log level
12061	info
12062	Debug a debug message
12063	Logs a raw message
12064	Log end message
12065	Logs a message .
12066	Convert message to string
12067	Converts an error to a string .
12068	Colorize a text .
12069	Get callee data
12070	Process placeholders .
12071	Format a value .
12072	Find seo .
12073	Get table name .
12074	Delete all records
12075	Save record in Seo model
12076	Initialize MySQL connection
12077	Common command for all commands
12078	Returns an array of commands
12079	Returns an array of shortcut commands
12080	Gets the help for a given command
12081	get help arguments
12082	Called on post package event .
12083	Compiles the DSN
12084	escape a value
12085	Add a template root .
12086	Get count for collection
12087	Get multiple items in a collection
12088	Create count query .
12089	Get the entity manager
12090	Get current path
12091	Loads an object
12092	Clears an entry .
12093	Returns bundle entry
12094	Set a single bundle entry
12095	Clear a bundle entry
12096	Invalidate an entity
12097	Checks the dependencies database for the current version
12098	Get dependent packages
12099	Get the dependencies for a specific package
12100	Install a package
12101	Uninstall a package
12102	Rebuilds the depdb cache
12103	Create a dependency lock
12104	Unlock a lock
12105	Read the dependencies file
12106	Write the dependencies to the cache
12107	Auto load modules
12108	Register a module .
12109	Get content of theme
12110	Render an error page .
12111	Set the foreground
12112	Set Format background .
12113	Sets the black color .
12114	Sets the red color .
12115	Sets green color .
12116	Sets the green color .
12117	Sets blue color .
12118	Sets the MAGenta color background .
12119	Sets the green color .
12120	Sets white color .
12121	Reset the color .
12122	Sets the color .
12123	Removes an option .
12124	Formats the message .
12125	Logs a command .
12126	Get uploaded file leaves
12127	Set the raw release state
12128	List all postinstall scripts
12129	Initialize postinstall scripts
12130	Populate this package from an array .
12131	Get the filelist
12132	Get configure options
12133	Is this package compatible with another one?
12134	Is this package a subpackage?
12135	Get dependency group
12136	Splice an array element
12137	add compiler pass
12138	Returns the modulo of two numbers
12139	Returns the modulo of an entity
12140	Update an event
12141	Write message to target
12142	Select from repository entity .
12143	Returns the entity alias
12144	Override delete method
12145	Updates the entity
12146	Set the from table for the query
12147	Set an item .
12148	Set group by .
12149	Add a group by clause to the query .
12150	Order by .
12151	Add ORDER BY clause
12152	Sets the maximum results
12153	Paginate the results
12154	Fetch a single result
12155	Fetch a single result
12156	Fetch all results
12157	Generate param .
12158	Find an unused parameter name .
12159	Parses call methods
12160	Call function for functionality
12161	Is associative array
12162	Builds a description from a subject .
12163	adds a timestamp
12164	Returns the timestamp as table
12165	Get the page load time
12166	Get the mostuming domain
12167	Renders header .
12168	Renders the header image .
12169	Renders the body
12170	Renders the card footer .
12171	Get controller group
12172	Get all options
12173	Get help for an action
12174	Get help for an action
12175	Returns header collection
12176	Check if the browser is Flash
12177	Returns the raw body of the request .
12178	Get request body params
12179	Returns host information
12180	Get script url
12181	Get server parameters
12182	Returns an array of content types accepted by the client
12183	Returns the list of accepted languages
12184	Get ETags
12185	Get CSRF token
12186	Generate CSRF token
12187	Get default server parameters
12188	On login event
12189	Crop an image
12190	Make crop name .
12191	Crop the image .
12192	Get image size
12193	Returns the list of mutations for a file .
12194	Gets annotations from a doc string .
12195	Get the annotations matching the given doc string .
12196	Set annotation .
12197	Sets the arguments of the annotation .
12198	Gets the properties of an annotation .
12199	Process annotation properties .
12200	Returns arguments as array
12201	Determine the value .
12202	Get an annotation from the annotations map
12203	Cleans match .
12204	Get the subscribed events
12205	Handle a command
12206	Handle help command
12207	Get the provider for a command
12208	Left join .
12209	Right join method
12210	Right join with right join
12211	Returns the sql for the current query
12212	fetch all columns
12213	Set the table name
12214	Set the object structure .
12215	Set the database name .
12216	Set model name
12217	Builds the object model
12218	Builds the related fields
12219	Register the validation factory .
12220	Loads the configuration .
12221	Returns the site id for the given element
12222	Get parent relation
12223	Renders an item .
12224	Fetch all records .
12225	Executes a query and returns a single result .
12226	Queries the columns for the query .
12227	Returns the number of records in the query .
12228	Checks if the entity exists in the database .
12229	Make call to given method
12230	Find all calls matching the given function name .
12231	Initialize PEAR_ Registry
12232	asserts the state directory
12233	Creates a directory for a channel
12234	make sure the channel dir exists
12235	Returns the file name for the given channel .
12236	Get the channel name from an alias .
12237	Get the alias for a channel .
12238	Lock the registry
12239	Check if a channel exists .
12240	Check if a mirror exists
12241	Check if an alias is an alias
12242	Get information about a specific channel
12243	Update a channel
12244	Determine if the given value matches the given property .
12245	Get TinyMCE file .
12246	Initializes the string with the given value .
12247	Returns the entity manager .
12248	Resolve class name
12249	Validates that an attribute has a given value .
12250	Validate that a route exists .
12251	Hard copy a directory
12252	Initializes the widget
12253	Returns the next day in the given format
12254	Get the previous day
12255	Generate date range
12256	Save file to filesystem
12257	Get absolute directory
12258	Opens a file .
12259	Creates a file .
12260	Write contents to a file .
12261	Gets the contents of a file .
12262	Change file mode .
12263	Locks a file .
12264	Unlock a file .
12265	Ensure the passed object is a file object .
12266	Ensure the passed object is a directory .
12267	Check lock timer
12268	Get global variables
12269	Render section .
12270	Adds a ON condition to the query .
12271	Adds a ON condition to the join .
12272	Add a where null condition to the query .
12273	Cast array to collection
12274	It can be normal .
12275	Get session by id .
12276	Update row data
12277	Downgrades the migration .
12278	Refresh the database .
12279	Show migration history .
12280	New migrations .
12281	Creates a new migration .
12282	Revert a migration down .
12283	Run migrations to the given time .
12284	Migrates the application to the given version .
12285	Load database adapter
12286	Connect to database
12287	Add a cached query
12288	Get results by query
12289	Performs an array query
12290	Short description of method addTable
12291	Add fields to a table
12292	get table info
12293	Check if a table exists
12294	build fields array
12295	Escape a string
12296	Reset the query
12297	Set where
12298	Where string
12299	Set where in
12300	Simple OR where
12301	Simple AND where
12302	Set order by
12303	Get SQL query
12304	Get all results
12305	Execute query and return single result
12306	Get all ui core extensions
12307	Returns model instance
12308	Set the storage path
12309	Loads all structure data into an associative array
12310	Returns the structure for a given model .
12311	Save model structure
12312	Dump model data
12313	Load data from database
12314	Finds all transactions for a given account .
12315	Set client pool state
12316	Returns the number of commands in the queue .
12317	Process the command queue .
12318	Executes a query .
12319	Set the connection status
12320	Handles a message
12321	Process message body
12322	Connect to the broker .
12323	Redirect user to provider page .
12324	Handles the registration request .
12325	Unlink the given provider .
12326	Update user settings .
12327	Check provider .
12328	Set configuration for laralum .
12329	Register a new social user .
12330	Cleanup timer callback
12331	Pack data into array
12332	Unpack a single record
12333	Create cleanup timer
12334	Check if menu item has a submenu
12335	Set account id
12336	Set user id
12337	Get account object
12338	Get user record
12339	Returns the next exception
12340	Strip tags
12341	Initialize the configuration object
12342	Get valid roles for a release
12343	Get a list of all roles that have been installed .
12344	Shortens the string
12345	Sets the blocksize
12346	Get a value from the array .
12347	Generate config files
12348	Merge data .
12349	Read config data
12350	Reads Configuration File
12351	Normalize config file path
12352	Applies the event to the aggregate .
12353	Record a domain event .
12354	Set related data
12355	Triggered when presenter is ajax
12356	Redraw all components
12357	Redirect to destination
12358	Initialize the plugins
12359	Set multiple variables
12360	Fetch from string
12361	Load all twig extensions from a directory .
12362	Creates a BusinessHours object from an associative array .
12363	Shift a BusinessHours to a new timezone .
12364	Flattens an array of days .
12365	Validates a warning .
12366	Get the contents of a file .
12367	Parse import configuration files
12368	Parses YAML .
12369	Set YAML parameters
12370	Calculates the Content - Length of the request
12371	Execute a command .
12372	Serialize a value
12373	Unpublishes other entities
12374	Set the class name
12375	Set the ID column .
12376	Set column name .
12377	Set data column .
12378	Set the lifetime column
12379	Set the modified column
12380	Sets the created column
12381	Get all providers .
12382	Get available providers .
12383	Bootstrap the application
12384	Register the content negotiation
12385	Sets the request format based on the accepted content types .
12386	Validate request content type
12387	execute function
12388	Discovers the channel .
12389	Get a new instance of a dependency2 object
12390	Get the download directory
12391	Detect the cycle
12392	Setup the graph
12393	Retourne un argument de url
12394	Output a single line
12395	Get command arguments
12396	Register the no captcha .
12397	Register the validator rules .
12398	Register form macro .
12399	Read from XML file
12400	Read from anything .
12401	Returns the XML representation of the channel .
12402	validates an error
12403	Get the baseURL for a given resource type
12404	Reset functions
12405	Set default PEAR protocol
12406	Returns the mirror for the given server
12407	Set the validation package
12408	Add a function to the channel
12409	Registers a mirror function
12410	Returns the validation package
12411	Returns an instance of the validation class
12412	Check if a property can be read
12413	Check if a property can be set
12414	Get the cache file .
12415	Loads the parameters from the cache .
12416	Adds an entry to the cache .
12417	Retrieves a value from the registry
12418	Retrieves an entry from the cache .
12419	Checks if an entry exists .
12420	Unset an offset
12421	Applies the site conditions to the query
12422	assign a value to an array
12423	Extract errors from an error .
12424	Returns the path to the models config file
12425	Get the models configuration
12426	Saves the models configuration .
12427	Returns the metadata
12428	Set field name
12429	Set user color
12430	Set field parser
12431	Aggregate a style collection .
12432	Make a cURL request .
12433	Image proxy .
12434	Create a validator
12435	Validates a single attribute .
12436	Validates the given value .
12437	Initialize the plugin
12438	Shutdown function
12439	Generate URL for given controller and action
12440	Get canonical url
12441	Normalize the given route path .
12442	Check if tests are working
12443	Gets the list of available view names .
12444	Retrieve a value
12445	Set an item in the cache .
12446	Set multiple values at once
12447	Retrieve an item from the collection .
12448	Adds a value to the cache .
12449	Get a value from the cache .
12450	Delete a value
12451	Removes unwanted characters
12452	Add default options
12453	Get the value of an option .
12454	Returns the value of the given option .
12455	Load configuration from file
12456	Load the config
12457	Render the configuration .
12458	Renders a value .
12459	Normalize config array path
12460	Set the package version 1
12461	Clears the contents of the package .
12462	Clears the dependencies of the package .
12463	Set a package type
12464	Get the current release version
12465	Add an install to the current release
12466	Add an ignore tag to the current release
12467	Adds a binary package tag
12468	Add a configure option
12469	Set php install condition
12470	Set OS condition
12471	Set install condition for current release
12472	Generate a change log entry
12473	Is this file a video?
12474	Returns information about the video
12475	Set field date
12476	Set the amount
12477	Set field type
12478	Set field comment
12479	Set category id
12480	Set accountId virtual
12481	Initialize from a string
12482	Create instance from array
12483	Class constructor .
12484	Configure MySQL connection
12485	Run an SQL query
12486	Get table names
12487	Get single row
12488	Executes a query and returns the first column of the first row .
12489	Test if a table exists
12490	Checks if a column exists in a table
12491	Get primary keys
12492	Get column names
12493	Logs a query
12494	Bootstrap event handler
12495	Run the application .
12496	Set the keys
12497	Set private key
12498	Set the envelope key
12499	Sets the compression
12500	Returns a formatted date string .
12501	Supprime une user
12502	execute function
12503	Creates the migration history table .
12504	Add a filter to the chain
12505	Filters a value based on a class name
12506	Add inverseOf relation to result
12507	Populate the relationship .
12508	Populate a single relation .
12509	Populate the relationship with multiple models .
12510	List of invalid properties
12511	Recursively process an array
12512	Creates a new instance of the class
12513	Checks if another text is equal .
12514	Checks if this text ends with another
12515	Checks if this string contains another text .
12516	Returns a substring of this string
12517	Replace text by search
12518	Replace text by regular expression
12519	Emit before insert event
12520	Triggers beforeDelete event
12521	Refresh the record from the database .
12522	Update all rows
12523	Delete all rows
12524	Inserts a new model in the database .
12525	Inserts a record in the database .
12526	Deletes the object from the database .
12527	Gets all methods .
12528	Returns the identifier for the method .
12529	Custom data callback .
12530	Get all commands
12531	Get help for a given controller
12532	Creates a controller instance .
12533	Handle an exception .
12534	Handle a fatal error
12535	Log an exception .
12536	Get exception stack trace
12537	Reduce the stack trace
12538	Proxy method with app property .
12539	Proxy method with app .
12540	Inject a variable in the arguments array
12541	Ensure string is translated .
12542	Create repo .
12543	Start startup .
12544	Generate random string
12545	Return an array ready for serialization .
12546	Register a custom error
12547	Displays a user
12548	Makes a request for countries
12549	Encode a string
12550	Get default reason phrase
12551	Get request header
12552	Returns the response body
12553	Decode an encoded string
12554	Checks if current entity exists
12555	Delete all records
12556	Checks if the pool is ready .
12557	Get all headers
12558	Get header name .
12559	Write an array of messages .
12560	Prints a message .
12561	Set the type of the filter
12562	Finds a view path .
12563	Get the list of possible files for a given file name .
12564	Starts the session
12565	Get an entry by its id .
12566	Set an item by id .
12567	Removes an item from the collection .
12568	Generates a CSRF token .
12569	Validates CSRF token .
12570	Humanize a name .
12571	Recursively delete the directory
12572	Moves the file to the destination
12573	Cleans the filename .
12574	Dispatches an event
12575	Handles the error
12576	Handles fatal errors
12577	Saves the item
12578	Returns a string representation of the exception .
12579	Convert an array to XML
12580	Parse End - Header
12581	Load a config file
12582	Set a configuration array
12583	Get a configuration value
12584	Build the config stack
12585	Parse config recursively
12586	Parse a config recursively
12587	Compile a join constraint .
12588	Compile a where null clause .
12589	Compile an insert statement into SQL .
12590	Compile an update statement .
12591	Compile a delete query .
12592	Wrap the given value .
12593	Set arguments wildcard .
12594	Set the promise .
12595	Sets the prediction .
12596	Checks if callbacks are checked .
12597	Create a new GalleryAdapter
12598	Connects to a user
12599	Create a new row
12600	Convert to SQL
12601	Scan a resource
12602	Flat the collection
12603	Filters the collection according to the predicate
12604	Execute the callback stack
12605	Execute a callback function as reference
12606	Parse callback function name
12607	Returns the constraints for the image
12608	Calculate min value
12609	Returns the controller
12610	Get action name
12611	Resolve the callable .
12612	Process parsed data
12613	Process response .
12614	Get router exception .
12615	Get terminal dimensions
12616	Returns the operating system .
12617	Translate an argument
12618	Locate a file
12619	Formats the value as text .
12620	Formats the value as an email address .
12621	Formats the value as a decimal number .
12622	Formats the value as a short size .
12623	Creates a new model . If creation is successful the browser will be redirected to the view page .
12624	Updates an existing Item model . If update is successful the browser will be redirected to the view page .
12625	Checks if the class exists .
12626	Executes a query and returns the result .
12627	Returns the first column of the result set
12628	Exclude trashed items .
12629	Scope only by trashed
12630	Run console request .
12631	Get value from array
12632	Get header by name
12633	Returns an instance without the specified header .
12634	Copy message body .
12635	Get icon .
12636	Returns all types
12637	Binds a template
12638	Renders the exception .
12639	Format a message .
12640	Get the header for the cookie
12641	Convert an array to a header string
12642	Combine section settings
12643	Walks a key s value pair
12644	Explodes a string into an array .
12645	report error report
12646	Handle error page
12647	Extracts parameters from path .
12648	Returns a controller instance
12649	Returns HTML code for buttons
12650	Protected get options
12651	Evaluate an expression
12652	Method to get a single zone
12653	Adds a new record .
12654	Returns a table instance
12655	Get transaction object
12656	Load default metadata
12657	Set parent id
12658	Get BudgetCategory
12659	Get all category words
12660	Flush all cache data
12661	Add item to collection
12662	Remove an item from the collection
12663	Remove cache datas
12664	Get a boolean value .
12665	Create new Params instance
12666	Extract parameters from collection
12667	Logs a command as loaded .
12668	Push a route group
12669	Get all class annotations by type
12670	Set service properties
12671	Convert service to container
12672	Get service context from annotation
12673	Get the cache instance
12674	Returns query builder component
12675	Create a new component instance
12676	Tokenize a stated class name .
12677	Get the stated class name .
12678	List information about a specific category
12679	Short description of method getBetterStates
12680	Compiles the command .
12681	Generate arguments string
12682	Executes the command .
12683	Save the stream
12684	Replace fields in the stream
12685	Add route to collection
12686	Add GET route
12687	Add route to collection
12688	Add PUT route
12689	Add PATCH route
12690	Add DELETE route
12691	Adds a HEAD route
12692	Get named route
12693	Generate a URL for a named route .
12694	Get route for request
12695	Try to find a matching route .
12696	Determine if the URI is an internal URI .
12697	Dispatch the given request .
12698	Setup the router .
12699	Set dynamic route
12700	Validate the route path .
12701	Get the matched route .
12702	Try to match a dynamic route
12703	Get matched static route .
12704	Get matched route .
12705	Routes request middleware .
12706	Routes response middleware .
12707	Get the response from the dispatch .
12708	Setup routes from cache .
12709	Setup routes from annotations
12710	Renders the modal header .
12711	Renders the toggle button
12712	Getter for GettextFile
12713	Get paginated result .
12714	Add filters to query builder
12715	Filter by search .
12716	Filters the query .
12717	Add Order By
12718	Add offset to query
12719	Add limit to query builder
12720	Finds an entity by id .
12721	Adds a JOIN clause to the query builder .
12722	Get sort column
12723	Order by params
12724	Checks if the given value is a valid number .
12725	Replace entities in a string
12726	Reverse entities
12727	Returns XML declaration
12728	Get the doc type declaration .
12729	Convert attributes to string
12730	Collapse empty tags
12731	Creates an XML tag from a QName and attributes
12732	Creates an XML element
12733	Split a qualified name
12734	Is XML name valid?
12735	Dispatch an object .
12736	On tag response .
12737	Triggered when tag is invalidated .
12738	Validate the entity .
12739	Interpolate context values .
12740	Returns whether two points are equal
12741	Compare two points
12742	Compute the intersection between two lines
12743	Checks if two lines are parant
12744	Checks if two lines are paralleed
12745	Get the direction between two points
12746	Get Direction by coordinates
12747	Executes query and returns all results
12748	Prepare the via relationship .
12749	Remove duplicated models
12750	Retrieves a single row from the database .
12751	Checks if the given value is valid .
12752	Assert value is a valid header
12753	Executes the query .
12754	Builds the request URI
12755	Set default language
12756	Set the media type
12757	Set result format
12758	Set the default pagination limit .
12759	Set entity options
12760	Set the attribute of the media type .
12761	Set callback function
12762	Set the explicit option
12763	Fetches the photos for a gallery .
12764	Write a message to the frontend
12765	Creates a temporary directory
12766	Read information from Tgz file .
12767	Read information from a description file .
12768	Read information from an XML string .
12769	Extract information from any file .
12770	Get invoice with offers
12771	Get all offers
12772	Search for an EAN
12773	Set Log File Handler
12774	Set mail handler
12775	Get logs
12776	Make a log row
12777	Shutdown the Debugger
12778	Handle a request
12779	Dispatch the application
12780	Init bundle
12781	Add a boot error
12782	Initialize a constant path
12783	Add an application path
12784	Get a path from a config
12785	Get absolute path
12786	Returns information about the current user
12787	Set current mode
12788	Load default config file
12789	Initialize the base path
12790	Load a reaction
12791	Returns the asset converter
12792	Hash a file path .
12793	Add reply to message
12794	Adds a new user to the database
12795	Resumes a user session .
12796	Evaluate an expression
12797	Get user details
12798	Execute a raw query and return all rows
12799	Generates CSRF meta tags
12800	Create a label tag
12801	Create button tag
12802	Creates a submit button
12803	Create a submit input
12804	Create a reset input
12805	Create a hidden input field .
12806	Create a password input field .
12807	Process boolean input options
12808	Sets the amount of hours .
12809	Sets the minutes .
12810	Sets the amount of seconds .
12811	Checks if time elements are valid .
12812	Write to file .
12813	Write a stream to the flysystem .
12814	Updates a file .
12815	Update stream .
12816	Put contents to a file .
12817	Write a stream to the fly .
12818	Rename a file .
12819	Copy a file .
12820	Returns the metadata for a path .
12821	Get file mimetype
12822	Returns the file size
12823	Get the timestamps for a path .
12824	Returns the visibility of a path .
12825	Set the visibility of a path .
12826	Set the visibility of a path .
12827	Set the visibility of a path .
12828	List the contents of a directory
12829	Get local adapter .
12830	Get an instance of the S3 adapter .
12831	Detect the base url for the request
12832	Deserialize a request .
12833	Check if the current user has access to the specified class
12834	Parse a block
12835	Get path .
12836	Get Authentication Object
12837	Retrieves data from an URL
12838	Get raw data from server
12839	Get all data
12840	Returns the entity alias
12841	Creates a new query builder instance .
12842	Creates a ResultSetMappingBuilder for this Entity .
12843	Finds all identifiers .
12844	Get the minimum value of a column .
12845	Paginate the results .
12846	Checks if the given entity is an entity .
12847	Gets the identifier of an entity .
12848	Validate entity instance
12849	Convert entity to array
12850	Filters uploaded files .
12851	Get uploaded file size
12852	Check if a key exists
12853	Handle the console command .
12854	Terminate console kernel .
12855	Get Account Categories
12856	Run controller action .
12857	Initialize time zone
12858	Execute the exception
12859	Convert to array
12860	Initializes the application .
12861	Gets the children list .
12862	Recursive loop .
12863	Invalidates the cache .
12864	Get the last batch number .
12865	Create HTML response
12866	Returns a JSON response
12867	Create template response
12868	Explicitly ask for others .
12869	Returns the compression adapter
12870	Set the filter adapter
12871	Set the cache prefix
12872	Get value from server .
12873	List of hello page
12874	Install tables
12875	Renders the system errors page
12876	Returns the serializer .
12877	Increment the current version of a filename .
12878	Get body .
12879	Convert body to array
12880	Convert body to array
12881	Executes a query and returns the results
12882	Sets default values
12883	Set the response body
12884	Returns the response as an array
12885	Get unique validation rule
12886	Get an object URL from S3
12887	Get the adapter for an ADO connection
12888	Get ADO connection ID
12889	Error action .
12890	Wraps a curl error
12891	Read body from request body
12892	Handles write headers
12893	Write a string body
12894	Adds a command collection .
12895	Print time .
12896	Print console help
12897	Print html help for a class
12898	Prints a single line .
12899	Async upload action
12900	Function to clear HTML
12901	Before save callback
12902	After find callback
12903	Decodes an attribute .
12904	Create bank instance
12905	Sets the filter locale
12906	Get localized question value
12907	Establish a tunnel
12908	Checks if the request can be kept
12909	Closes the socket .
12910	Handles a redirect
12911	Determines if the server digest authentication should be used
12912	Determines if we should use the proxy digest challenge
12913	Writes the request body
12914	Read a chunked response
12915	Build select statement
12916	Build WHERE clause
12917	Build join string
12918	Build GROUP BY
12919	Prepare dependency handler
12920	Merge data array recursively
12921	Cleans a string
12922	Checks that the given arguments match the given prophecy .
12923	Parse YAML lines .
12924	Start a PEAR session
12925	Execute query .
12926	Inserts data into a table
12927	Update row in database
12928	Updates record in database
12929	Executes a select query
12930	Get all rows
12931	Retrieves an array of ids
12932	Get single row
12933	Get single value
12934	Prepare query for execution
12935	Execute statement .
12936	Executes a statement and returns the result
12937	Get execution log
12938	Parse the value .
12939	Perform a regular expression
12940	Dispatch the request .
12941	Terminate route middleware
12942	Start event handler
12943	Handler for closing tags
12944	Run a command on the given asset .
12945	Process the message
12946	Modify UploadableBehavior
12947	Create a new request from a JSON response .
12948	Open a session
12949	Read session .
12950	Destroy a session
12951	Write to the session .
12952	Renders the widget
12953	Returns the unique ID .
12954	Triggers beforeRun event
12955	Checks application configuration .
12956	Find a record by a field value
12957	Delete a record from the database .
12958	Get all rows
12959	Save the record
12960	List items
12961	Ajax request
12962	Verify account .
12963	Loads the bank bar
12964	Check the month
12965	Setup md5 hash for filelist
12966	Execute the command .
12967	Get the user s name .
12968	Save user info
12969	Change the password of the user
12970	Add the given implementation to the container .
12971	Get writer
12972	Validate and parse the version string
12973	Compares two versions .
12974	Get child nodes
12975	Get parent model
12976	Get all parents
12977	Convert an object to array
12978	Applies a modifier
12979	Creates a css resource
12980	Return the address book view .
12981	Return the compose message view .
12982	View a message .
12983	Manage messages .
12984	Append extensions to the paths .
12985	Destroy user session
12986	Add autoload method
12987	Removes an autoloader
12988	Remove aggregate object
12989	Executes getopt2 command
12990	Perform a getopt command
12991	Parse a short option
12992	Parse command line arguments
12993	Read a directory and its subdirectories
12994	Convert multiple files to struct
12995	Remove a file or directory
12996	Creates a directory .
12997	Create a temporary directory .
12998	Remove temporary files
12999	Perform a find command
13000	Returns a log message .
13001	Set the budget id
13002	Get budget object
13003	Get all transactions
13004	Prepare the value
13005	Set the url for this request
13006	Set request method
13007	Set authentication information
13008	Add a cookie
13009	Set the body
13010	Returns the body
13011	Add an uploaded file
13012	Attach an observer .
13013	Detach an observer .
13014	Sets the last event name
13015	Set request adapter
13016	Set the cookie jar
13017	Send the request
13018	Detect the MIME type of a file .
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new Setting entity .
13022	Edits an existing Setting entity .
13023	Set where conditions
13024	Return an instance with the given status code .
13025	Remove record from database
13026	Determine if an event has listeners for the given event .
13027	Get field value
13028	Get formatted message
13029	Create a new SymfonyHttpException .
13030	Set a flash message .
13031	Commits the transaction
13032	format date string
13033	format time
13034	Format a boolean value
13035	Sets the current time zone
13036	Retrieves a service
13037	Check if a service exists
13038	Creates a new instance of the specified class .
13039	Adds a resolver
13040	Adds a service instance .
13041	Returns a pool
13042	Perform an asynchronous query .
13043	Executes a query asynchronously .
13044	Creates a new connection .
13045	Get the least busy connection
13046	Install assets .
13047	Gets the ReflectionClass for the specified class .
13048	Returns the version of a class .
13049	Find class name by version .
13050	Returns list of class migrations for the specified class .
13051	Returns an array of required options for a class
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing Job entity .
13056	Set client file name
13057	Guesses the extension of the file .
13058	Returns the MIME type of the file
13059	Get human readable size
13060	Returns the date time as a datetime
13061	Returns the date time as a datetime
13062	returns the mtime as datetime
13063	Create a file object from a file content
13064	Finds all applications
13065	Find application by id
13066	Create new application
13067	Delete logs for given application
13068	Updates an existing application .
13069	Gets the closest date interval before the given date .
13070	Gets the closest date interval after the given date .
13071	Build a DateTimeInterval from a DateInterval .
13072	Gets the day before the given day number
13073	Gets the day after the day number .
13074	Returns information about the specified role .
13075	Commits the current transaction .
13076	Rollback a transaction
13077	Set transaction isolation level
13078	Returns the database connection .
13079	Set the backend
13080	Record debug message
13081	Log an info message
13082	Record notice message
13083	Record warning message
13084	Record error message
13085	Record critical message
13086	Add alert message
13087	Add emergency message
13088	Logs a message to the logger .
13089	Gets a property of an object .
13090	Truncate HTML .
13091	Initialize the installer
13092	Remove files of a package
13093	Adds a new file operation
13094	Downloads this file .
13095	Set the list of downloaded packages
13096	Checks if a point is valid .
13097	Creates a new Exception .
13098	Register application services .
13099	Add an array of attributes .
13100	Change classes .
13101	Parse classes .
13102	Get JSON column builder
13103	Bind an abstract if not already bound .
13104	Bind a shared object to the container
13105	Binding function .
13106	Check if an abstract is shared
13107	Get the closure to build a closure .
13108	Add a dependency for a call parameter .
13109	Get a contextual concrete
13110	Request middleware
13111	Route middleware .
13112	Terminate middleware .
13113	Index action .
13114	Get WSDL
13115	Initialize options
13116	Convert a date string to a timestamp .
13117	Convert timestamp to array
13118	Conversion datetime
13119	Time left left
13120	Get all properties
13121	Checks that the given calls are made .
13122	Parse parameter value .
13123	Set a parameter .
13124	Trims whitespace
13125	Output a message
13126	Perform the download command
13127	Adds a mock object to the collection .
13128	Creates a new instance of the specified class .
13129	Updates profile model .
13130	Check if a namespace exists
13131	Get a value from the command line
13132	Make response .
13133	Render a view .
13134	Return JSON response .
13135	Respond with a callback .
13136	Create a redirect response .
13137	Redirect to a route .
13138	Validate email .
13139	Get the difference in years .
13140	Get the difference in weekdays
13141	Get the difference in seconds .
13142	Get the difference for this instance .
13143	Get command annotations
13144	Set properties of command
13145	Get command from annotation .
13146	Get storage path
13147	Finds a model based on its primary key value .
13148	Returns task parameters
13149	Make a request .
13150	Make a GET request .
13151	Make a POST request .
13152	Send a HEAD request .
13153	Make a PUT request .
13154	Send a PATCH request .
13155	Make a DELETE request .
13156	Desenitize the host
13157	Increments the timestamp for a given checkpoint .
13158	Merge data with new data
13159	Reads a configuration file .
13160	Get a package
13161	Initialize the module .
13162	Clear init code
13163	Get init code
13164	Evaluate PHP code .
13165	Initialize the template paths
13166	Add a template path .
13167	Wraps an object with a specific class
13168	Gets all schema names .
13169	Gets all table names in the database .
13170	Refresh table metadata
13171	Returns table metadata
13172	Returns raw table metadata .
13173	Set table metadata
13174	Get cache key .
13175	Get an option
13176	Get temporary directory
13177	Initializes database migration component
13178	Creates a new role .
13179	Assign child role to parent
13180	Register a prophecy
13181	Call a mock
13182	Get a parameter
13183	Resolves a string parameter .
13184	Convert query to meta
13185	Parse twitter query
13186	Renders panes .
13187	Register user account
13188	Set the vector
13189	Open the mcrypt module
13190	Initialize the cipher
13191	Creates a new authenticated user using credentials .
13192	Verify user credentials .
13193	Fetches user data .
13194	Get auth extension
13195	Add data tokens to the object
13196	Get the protocol from the credentials
13197	Determine if the given credentials is Oauth1 .
13198	Determine if the given credentials is Oauth2 .
13199	Closes the stream .
13200	Attach a stream .
13201	Reads the contents of the stream .
13202	Sets the stream .
13203	Writes data to a file .
13204	Get virtual account
13205	Get previous account
13206	Update a virtual account
13207	Set cache duration
13208	Set the connection .
13209	Fetch a single result row
13210	Creates an INSERT query
13211	Executes the query .
13212	Log query if enabled
13213	Queries the database for fields .
13214	Perform the query .
13215	Checks if the current query matches the given pattern .
13216	Execute an SQL query
13217	Invoke a closure .
13218	Check if a layer is supported
13219	Prepare dom properties
13220	Displays the request
13221	render error page
13222	render debug information
13223	Render a view
13224	Initialize bot events
13225	Add the responses
13226	Registers a short code .
13227	Remove a short code
13228	Parses a short code
13229	Parse shortcode attributes
13230	Get the URL for the release
13231	List a specific package
13232	Sort releases by version number
13233	Get array data
13234	Get all hours
13235	Parse HTML page
13236	Find all accounts by user id
13237	Display application message
13238	Display usage message
13239	Get the usage path
13240	Outputs a section of arguments .
13241	Outputs a section of options .
13242	Get the option name .
13243	Generate a random roll
13244	Specify columns to select
13245	Adds a having condition to the query .
13246	Selects rows where predicate
13247	Join a table
13248	Join a table left join
13249	Right Join Join
13250	Get the sql string
13251	Execute the select query
13252	Prefixes a table join condition
13253	Gets a value from the collection
13254	Set an item in the collection
13255	Remove an item from the collection
13256	Generate an INSERT query .
13257	Set the error stack
13258	Return a singleton error stack
13259	Handles an error
13260	Set error message callback
13261	Set a default callback
13262	Pop the last error
13263	Pop an error stack
13264	Returns the number of errors
13265	Get all errors
13266	Check if there are errors
13267	Get all errors
13268	Format an error message
13269	Registers a configuration array .
13270	Register a provider .
13271	Registers an array of classes
13272	Returns an array of keyed parameters .
13273	Sets the target
13274	Set the current mode
13275	Get all routes .
13276	Set route properties
13277	Get class routes .
13278	Get controller built route .
13279	Creates a new router route from an annotation .
13280	Publish Routes .
13281	Format the response body .
13282	Format the response .
13283	Get host port
13284	Returns the scheme host port .
13285	Returns a new instance with the specified host .
13286	Returns a new instance with the specified port .
13287	Returns a new instance with the specified path .
13288	Returns a new instance with the specified query string .
13289	Returns a new instance with the specified fragment .
13290	Is this URI s standard port?
13291	Validates the scheme .
13292	Validates a port .
13293	Validate a package
13294	Validate a single dependency
13295	Normalize a dependency
13296	Add a suffix to a word
13297	Tokenize a string
13298	Join keys of an array
13299	Checks if a table exists in the database
13300	Map a class name to a table name
13301	Get the table associated with the given class name .
13302	Process version .
13303	Do a discovery command
13304	Login to Mirror Server
13305	Logout a user out
13306	Apply a separator filter to a string
13307	Returns an array of migration files
13308	Returns a map of migration files to the file path .
13309	Mark a method as published
13310	Send the request and return the response
13311	Checks the url
13312	Transforms a domain specific Location object into a Directory entity .
13313	Creates an app builder instance .
13314	Creates a new app builder from a persisted container .
13315	Returns the container builder dependencies .
13316	Reset the Git commit .
13317	Creates a new branch .
13318	Deletes a branch .
13319	Push a branch to the project .
13320	Create a new pull request
13321	Clones project .
13322	PHP command callback
13323	Run a command
13324	Attempt to connect to the API .
13325	Add a new file
13326	Returns the name of the new file
13327	Returns the filename for the given file
13328	Get a service
13329	Generate a service
13330	Set a service
13331	Set an alias
13332	Get a single parameter
13333	Set a parameter
13334	Get a service definition
13335	Set a service definition .
13336	Initialize the project .
13337	Initialize from event .
13338	Return table as array
13339	Is serialized string
13340	Call the given callback
13341	Add a route
13342	Initialize the routes
13343	Create controller instance
13344	Register a controller .
13345	Register controller with actions
13346	Register controller without annotations
13347	Get default controller and action
13348	Registers an observer .
13349	Unregisters an observer .
13350	Auto set channel name
13351	Execute command .
13352	Adds flash message .
13353	Redirect to referer
13354	Configures the shared cache .
13355	Initializes the bot .
13356	Finalize middleware .
13357	Returns the configuration directory .
13358	Checks that the given number of calls are made .
13359	Returns the connection object
13360	Configure TinyMCE Bundle .
13361	Set editor capabilities
13362	Create instance from environment
13363	Create a new Locator from a path .
13364	Returns an array of constant values .
13365	Check if a constant is valid
13366	Perform type check .
13367	Checks a value .
13368	Get adapter for PDO
13369	Create controller path
13370	Create cache path
13371	Updates the wsdl file if necessary
13372	Compiles the request URL
13373	Returns the documentation for the controller
13374	Get SoapControllers
13375	Builds the assets array .
13376	Build Bootstrap CSS .
13377	Get a single parameter
13378	Rebase the current URL
13379	Adds a route to the collection .
13380	Route a static route .
13381	Checks if a static route exists .
13382	Get a dynamic route .
13383	Check if a dynamic route exists .
13384	Get named route .
13385	Create sub - tree
13386	Locate a file
13387	Converts this number to another System .
13388	Compares two numbers .
13389	Get decimal value
13390	Adds two numbers
13391	Subtracts the given number
13392	Multiply this number by the given multiplicator
13393	Divide the number by the given multiplicator
13394	Get adapter for Mysql \ Adapter
13395	Returns an array of aliases
13396	Find aliases in a query
13397	Replace class files .
13398	Reads a line from the socket .
13399	Enables encryption on the proxy
13400	Check the socket timeout
13401	Adds a route
13402	Set menu items .
13403	Builds an HTML tag .
13404	Prepare the name and id .
13405	Check data attribute
13406	Adds a resource to the collection .
13407	Creates a Day object from an array of dates .
13408	Creates a Day instance from an associative array .
13409	Returns whether the interval is all days
13410	Creates a request from an array
13411	set server info
13412	Set Headers
13413	Set POST fields
13414	Set query fields
13415	Get a header array
13416	Convert request to array
13417	Adds a command .
13418	Adds a parsed command .
13419	Get a command by its name .
13420	Removes a command .
13421	Find a command by path .
13422	Returns all available commands
13423	Setup the console .
13424	Setup commands from cache .
13425	Get all available commands
13426	Sets the separator
13427	Listen to an event .
13428	Listen to many events
13429	Check if an event listener exists
13430	Removes a listener for an event .
13431	Check if an event has listeners .
13432	Adds an event .
13433	Removes an event
13434	Triggers all listeners of an event .
13435	Setup events .
13436	Setup events from cache .
13437	Initialize the class
13438	Check if a template exists
13439	Fetch template from string
13440	Loads the data .
13441	Saves the data to the database .
13442	Initialize reader .
13443	Initialize writer .
13444	Get default options
13445	Encrypt data .
13446	Decrypt data .
13447	Generate a session key .
13448	Throws an exception to stdout .
13449	Render an exception .
13450	Get the view file for an exception
13451	Get response .
13452	Get exception data .
13453	Get stdio logger
13454	Reads the session data for the given id .
13455	Writes the given data to the cache .
13456	Destroys a session .
13457	Update a timestamp
13458	Extract data from session
13459	Extracts the timestamp from a record .
13460	Retrieves the data from the cache .
13461	Gets the message with variables
13462	Generate SQL statement .
13463	Add auto increment clause
13464	Returns the SQL code for adding a key .
13465	Generates a foreign key .
13466	Get column declaration
13467	This function is triggered when the plugin starts
13468	Creates a new iteration exception .
13469	Renders the toggle button .
13470	Get Response Template
13471	Get module name
13472	Loads a class reflection .
13473	Loads a reflection for an object .
13474	Loads a property reflection .
13475	Get called method .
13476	Get class properties
13477	Sets the value of a property .
13478	Sets the properties of an object .
13479	Load class annotations
13480	Clears all classes .
13481	Checks if a class is instantiable
13482	Retrieves a reflection of a method .
13483	Retrieves a reflection for an object .
13484	Checks for required arguments
13485	Get reflection from cache
13486	Set reflection to cache
13487	Get cache key
13488	Get object class name .
13489	Parse the doc comment summary
13490	Get class doc comment
13491	Returns the documentation for a method .
13492	Initialize by config
13493	Maps a foundation class name to a namespace
13494	Un - indents a string
13495	Pre - process data
13496	Extract the photo array from the source object
13497	Fetches sizes for a photo
13498	Extract images from the source .
13499	Find position of placeholder start position
13500	Build route path
13501	Search route in router
13502	Replace placeholders in the path .
13503	Initialize the source language
13504	Preload messages for a category .
13505	Finds categories matching the given pattern .
13506	Magic isset .
13507	Send an exception .
13508	Get the content of the exception .
13509	Format a file path .
13510	Format an array of arguments .
13511	Escape HTML .
13512	Create a new validator instance .
13513	Transforms a string into Input objects .
13514	Called when a connection is disconnected .
13515	Handles incoming messages .
13516	The callback for phone home .
13517	This method is called when the Closure is reached .
13518	Get command handler
13519	Show application config
13520	Loads the bundles .
13521	Load messages from files .
13522	Set HTTP Headers
13523	Set ini environment variables
13524	Perform a POST request
13525	Send JSON - RPC request
13526	Connect to the database
13527	Escape a string
13528	Initialize the class
13529	Check if this table has a slug field
13530	Get special fields
13531	Get fields by type
13532	Returns the date of the given time
13533	Parse supported languages
13534	Parse supported charset
13535	Resolve the MIME type based on the Accept header
13536	Match the accept header .
13537	Sort accept headers
13538	head request
13539	Convert charset from one encoding to another
13540	Get entity manager
13541	Get object structure
13542	Get auto object
13543	Get table structure
13544	Get the model of the autoObject
13545	Build the table structure
13546	Prepares the error .
13547	Check all budget .
13548	Check a budget
13549	Find by budget ID
13550	Set id parent
13551	Set is main
13552	Get account user
13553	Retrieves the bank object
13554	Parses a CSV file and returns an array of Transactions .
13555	Get icon for type
13556	Build Query object
13557	Escape a single value
13558	Create a new redirect response .
13559	Set redirect uri
13560	Redirect back to referer
13561	Throws an HttpRedirectException .
13562	Filters a list of commands .
13563	Sorts an array of commands .
13564	Process a command section .
13565	Initializes the session
13566	Start timer .
13567	Returns current timer .
13568	Display a timer
13569	Initialize provider .
13570	Initializes the application
13571	Initialize basic configuration
13572	Locate configs path
13573	Locate the class loader .
13574	Get an instance of a given type
13575	Get config reader
13576	Initialize DI container
13577	Initialize Static App
13578	Determine if the token matches the given request .
13579	Get the CSRF token from the request .
13580	Initialize the bot .
13581	Get the current weather for a specific location .
13582	Get the precipitation for a location .
13583	Get LatLng for a given location
13584	Add error message
13585	Get English intensity .
13586	Gets annotations for a class .
13587	Get annotations for class members
13588	Get annotations for class and members
13589	Retrieves annotations for a property .
13590	Get annotations of a property .
13591	Return an array of property annotations
13592	Retrieves annotations for a method .
13593	Get method annotations
13594	Returns the list of methods annotations for the specified class .
13595	Returns the function annotations .
13596	Filters annotations by type .
13597	Set annotation values .
13598	Get class reflection
13599	Get a property reflection
13600	Get a reflection for a method
13601	Get a reflection for a function
13602	Returns the list of class names for the given parameters .
13603	Get the length of this Point
13604	Get the center
13605	Runs the widget .
13606	Generate a field for a model attribute .
13607	Check if a key exists .
13608	Get the display dirname .
13609	Scan the directory
13610	Adds a HTTP header
13611	Returns a list of all headers
13612	Creates a database
13613	Returns list of database tables
13614	Update database from database
13615	Update relational relations
13616	Update many table structure
13617	Generate table sql
13618	Generate SQL for a column .
13619	Generate index SQL
13620	Generate constraint SQL
13621	Get keys by key type
13622	Get key values by key type .
13623	Retrieves annotations for a class
13624	Returns an array of classes that match the specified annotation class .
13625	Retrieves annotations for a property
13626	Returns an exact annotation of a property .
13627	Retrieves annotations for a method .
13628	Returns an exact annotation for a method .
13629	Returns the annotation reader
13630	Get method reflection
13631	Retrieves a value from the cache .
13632	Set value to cache
13633	Returns an array of relative paths
13634	Process key .
13635	Check the event class name .
13636	Build the last event .
13637	Get the average value of an array
13638	Sets the order by .
13639	Returns the reflection parameters .
13640	Get a value from an object .
13641	Sets the value of the property
13642	Filters an array of objects .
13643	Set From address
13644	Adds an address to PHPMailer
13645	Add ReplyTo address
13646	Adds a CC address
13647	Adds a BCC address
13648	Adds an attachment .
13649	Run the console .
13650	set the referrer
13651	Get Referer
13652	Builds the url
13653	Download the package
13654	Extract the archive
13655	Reset default locale translations
13656	UTF - 8 aware alternative to strpos
13657	Create sidebar menu .
13658	Add example menu .
13659	Register migration services .
13660	Publish pages .
13661	Updates this query
13662	Loads messages for specified context .
13663	Get all categories
13664	Get file name from response .
13665	Validate uploaded files
13666	Initialize result object
13667	Get pattern data
13668	Sets the attributes
13669	Detect data by key .
13670	Determine if the current environment is on Shell
13671	Get the configuration
13672	Return the latitude in degrees format .
13673	Return the longitude in degrees format
13674	returns an array of LatLng objects within a range
13675	returns an array of longitude within the longitude range
13676	Returns the distance for the given location .
13677	Determine if the given data matches the filter .
13678	Creates tables from config
13679	Bundle multiple schemas .
13680	Get a point
13681	Publish command to application .
13682	Retrieves a matching URL fragment
13683	Generate response for request
13684	Retrieve data for a given url .
13685	Checks if a string ends with a given string
13686	Counts words in a string
13687	Create the acting as a model .
13688	Initialize session .
13689	Opens the session .
13690	Open session .
13691	Register the session handler
13692	Closes the session .
13693	Destroys the session .
13694	Regenerates the session id .
13695	Reads a session
13696	Writes the session .
13697	Destroys a session
13698	Set a key - value pair
13699	Remove a key
13700	Removes all session data
13701	Get a flash value
13702	Get all flash messages
13703	Set a flash message .
13704	Add a flash message
13705	Remove a flash value
13706	Remove all flash messages
13707	Frozen session data
13708	Unfreezes the session .
13709	Create a new session cookie
13710	Validate that a value is after a given date .
13711	Validate the date after the given format .
13712	Validates that an attribute is a date format .
13713	Checks all prophecy .
13714	Assign a value to an array .
13715	Get controller plugin config
13716	Execute a specific rule .
13717	Process a list of deprecation names
13718	Parse array of fragments
13719	Create view instance .
13720	Set view variables .
13721	Set a view variable .
13722	Escape a string
13723	Get template directory
13724	Set layout .
13725	Set view template .
13726	Render partial .
13727	End block .
13728	Renders the view .
13729	Get full path to view
13730	Renders template .
13731	Renders the layout .
13732	Adds a route to the array of routes .
13733	Returns the separator line .
13734	Outputs a header message .
13735	Gets an array of all Actions
13736	Creates a notification object .
13737	Set the key
13738	Determine if the file should be renamed .
13739	Guesses the extension of the file .
13740	Guesses the filename of the file .
13741	Set rename .
13742	Downloads a file
13743	Uploads TinyMCE image .
13744	Handles exceptions .
13745	Get cURL resource
13746	Execute the curl request
13747	Set cookie file
13748	Choose multiple parameters
13749	Lists all Items models .
13750	Init options .
13751	Writes configuration to a file
13752	Get exception from context .
13753	Convert an exception to an array .
13754	Renders a view .
13755	Check if file is a core file
13756	Get exception name
13757	Minify CSS and minify CSS
13758	Minify URLs
13759	Set the amount default
13760	Set the date start
13761	Set date end
13762	Set field is recurrent
13763	Set the month bitmask
13764	Get all budget categories
13765	Get all BudgetMonth
13766	Execute an SQL statement .
13767	Return the PDO exception .
13768	Load a file from a path .
13769	Starts up the database .
13770	Shutdown all connections .
13771	Inserts data into a table .
13772	Inserts multiple rows into a table .
13773	Updates rows in a table .
13774	Deletes rows from a table .
13775	Renames a table .
13776	Drops a table .
13777	Truncates a table .
13778	Drops a column from a table .
13779	Renames a column in a table .
13780	Alters a column .
13781	Adds a primary key to a table .
13782	Drops a primary key .
13783	Adds a foreign key to a table .
13784	Drops a foreign key from a table .
13785	Creates a new index .
13786	Drops an index on a table .
13787	Adds a comment to a column .
13788	Adds a comment to a table .
13789	Drops comment from a column .
13790	Drops all comments from a table .
13791	Executes a promise .
13792	Log message .
13793	Validate regex .
13794	Capture all occurences of text
13795	Splits text into array
13796	Replace text with given text
13797	Renders the config .
13798	Returns the url to the security image .
13799	Get a single model by id .
13800	Get or create a model instance
13801	Get all records as list
13802	Save a model .
13803	Delete a record .
13804	Get objects that match the given ids .
13805	Get models that have a where clause .
13806	Sets a raw cookie
13807	Connects to the server
13808	Save record to database
13809	Set the record s data
13810	Returns the record as an array
13811	Get field value
13812	Set field value
13813	Get primary key values
13814	Parses a path .
13815	Validate path .
13816	Splits an array of segments
13817	Parse path .
13818	Get parameter replacement
13819	Cache a value
13820	Flush the cache
13821	Process response data
13822	Invoke method .
13823	Get content type
13824	Regenerates the session id .
13825	Create a new session id .
13826	Creates the GC timer
13827	Set the content type .
13828	Set the buttons .
13829	Add a button .
13830	Validates the modal type .
13831	Validates a modal size .
13832	Register all commands
13833	Create an Archive
13834	Add string to archive
13835	Checks if a file name is a malicious filename
13836	Parse command message
13837	Run migrations from another object .
13838	Get unique keys
13839	Get primary key
13840	Get primary keys .
13841	Get priority .
13842	Get the validator .
13843	Load mime types
13844	Load mime aliases
13845	Removes a symbolic link
13846	Get permissions as string
13847	Gets the permissions as octal string
13848	Create an inner join
13849	Generate SQL query
13850	Execute query and return results
13851	Generate SQL for creating a table
13852	Load all modules
13853	Returns the service container .
13854	Initialize bot .
13855	Marks the query as a select statement .
13856	Sets the table name
13857	Set a column value .
13858	Set where clause .
13859	Adds a where clause to the query .
13860	Order by ASC
13861	Order by desc .
13862	Returns the query string .
13863	Set where .
13864	Sets the order by .
13865	Get select query
13866	Returns the insert query
13867	Get update query
13868	Get delete query
13869	Get SET query
13870	Returns the where query .
13871	Returns the ORDER BY query .
13872	Walks down an expression tree
13873	Register form .
13874	Edits an existing User
13875	Get version information
13876	Create route
13877	Handles the request .
13878	Resolves a route
13879	Get home url
13880	Registers a component definition
13881	restore uid
13882	Get user by id
13883	Returns list of active users
13884	Save multiple messages to a file .
13885	Finds the first occurrence of a value in an array .
13886	Find models with eager loading .
13887	Returns the next row from the result set
13888	Read a single column
13889	Read an object
13890	Fetches all results from the result set
13891	Get column count
13892	Finds the constraints for a table .
13893	Get server version
13894	Update routes data
13895	Parse routes data
13896	Builds the path expressions
13897	Register an alias for a service
13898	Binds a service
13899	Set service context
13900	Get service from context
13901	Check if service is registered
13902	Check if a context service exists
13903	Get a service
13904	Make a service
13905	Get singleton
13906	Get a service
13907	Convert a service id to a context
13908	Setup services .
13909	Setup services from cache .
13910	Setup service providers .
13911	Get all available services
13912	Get address lines
13913	Sets the logging level
13914	Get unique id .
13915	Register routes in router .
13916	resolve action
13917	Emit before action
13918	Emits after an action .
13919	Renders partial view
13920	Renders ajax view .
13921	Gets an array of actions
13922	Render view in layout .
13923	Renders the view .
13924	Normalize action method name
13925	Resolve the error as html .
13926	Resolve the error as an array .
13927	Get error data
13928	Get exception name .
13929	Validate action method
13930	Get action id from action method .
13931	Get action method
13932	Convert color to hex
13933	Convert color array to RGB
13934	Image Dominant
13935	Wrapper for STDIN stream .
13936	Prompts the user for input .
13937	Append a file to an array of paths .
13938	Get pg client
13939	Executes an SQL query .
13940	Write the stream to the given path .
13941	Creates a native server request from PHP variables .
13942	Get a header value
13943	Remove query string from path .
13944	marshals the host and port from the accumulator header .
13945	Normalize nested file spec .
13946	Determine if a string ends with another
13947	Generate random string
13948	Create migrations for the given class name
13949	Finds annotations between two classes
13950	Create a new document .
13951	Fetch all items
13952	Updates a document .
13953	Sets the HTTP status code .
13954	Sets headers .
13955	Returns the date header .
13956	Sets the date header
13957	Add a cache control header .
13958	Gets a value from the cache control header
13959	Removes a cache control header .
13960	Check if the response is valid .
13961	Returns the age of the response .
13962	Set the age of the response .
13963	Returns the Expires DateTime
13964	Returns the maximum age of the response .
13965	Set shared maxage
13966	Set response s ttl
13967	Set not modified response
13968	Is this transaction invalid?
13969	Is this response informational?
13970	Is successful .
13971	Is this response a redirection?
13972	Is this response a client error?
13973	Checks if the response is a redirect .
13974	Is this response empty?
13975	Close output buffers
13976	Initializes the request .
13977	Validate request method .
13978	Locate command .
13979	Locate all available operations
13980	Downloads the package file
13981	Remove installed packages
13982	Detect duplicate parameters
13983	Read from a file
13984	Returns the parameters as an array
13985	Enables the error handler .
13986	Get the difference between all transactions
13987	Add month to the bitmask
13988	Returns true if the month exists .
13989	Get the length of the uploaded file
13990	Returns the boundary
13991	Loads a user with the specified username .
13992	Create new user
13993	Set the IP address
13994	Renders a view
13995	Publishes the given stream
13996	Materialize resources .
13997	Set multiple params
13998	Fetches the message
13999	Encrypts a message
14000	Decrypt a message
14001	Decrypt an array .
14002	Encrypt an object
14003	Decrypt an object
14004	Retrieves an option from the inner cache
14005	Set default values
14006	Replace magic fields
14007	Convert Query to QueryBuilder
14008	Get rich text as text .
14009	Convert rich text array to html
14010	Serializes the given block as an HTML block .
14011	Return an instance with the specified cookie .
14012	Send the response
14013	Validates the given status code .
