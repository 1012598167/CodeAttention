0	Get administrator role .
1	Get user s account .
2	Handle a breadcrumb item .
3	Translate categories
4	Returns the highest order item in the menu .
5	Generate a name for a table .
6	Handle the add menu item .
7	Update table .
8	Updates the table
9	Find the diff of the renamed columns
10	Gets the diff between this table and the old index
11	Get all renamed columns .
12	Returns all renamed indexes .
13	Get a thumbnail for a given type .
14	Get thumbnail name
15	Policy for editing users .
16	Get the dimmer configuration .
17	Prepare menu translations
18	Saves changes .
19	Determine if the current user is read .
20	Add new table
21	Stores the breadcrumb
22	Edit a DataType
23	Update the data model
24	Remove the dataType from the database .
25	Adds a new relationship
26	Returns the relationship field
27	Handle the request
28	Create a new database table .
29	Edit database table .
30	Update database table .
31	Show table s data
32	Delete a table .
33	Build the URL to sort by this column .
34	Display a menu .
35	Check if the model is translatable
36	All translations .
37	Get translated attribute
38	Scope a query to include a translation record .
39	Save multiple translations .
40	Describe table .
41	Create permission action .
42	Check if storage symlink exists
43	Register the console commands .
44	Cleanup data from database .
45	Delete the images associated with the model .
46	Order action .
47	List of relations
48	Resolve the relations for a content type .
49	Adds SoftDeletes to the given stub .
50	Validate the data for the model .
51	Get config fields with validation rules
52	Verify the ID token
53	Retrieve verification certificates from URL
54	Fetches the regenerated sign on cache .
55	Sets PHPsec constants
56	Fetch an access token using authorization code
57	Fetches an access token with the JSON API .
58	Fetches an access token with a refresh token .
59	Performs authentication .
60	Check if access token is expired
61	Verify the ID token
62	Adds a scope to the request .
63	Execute API request .
64	Set Authentication Config
65	Create OAuth2 service
66	returns the number of retries for a given code
67	Get the next chunk of data .
68	Parse a HTTP response .
69	Get data type .
70	Combine a list of variables
71	Get the value for the given length
72	Executes an HTTP request .
73	Decode the HTTP response .
74	Map array types to objects
75	Returns a simple representation of this model
76	Converts a value to a SimpleModel
77	Get mapped name
78	Determines if an array is an associative array
79	Builds the Google AuthHandler
80	Find configuration .
81	Define the core constants
82	Sets whether this model is ready to use .
83	If an exception is dead or not
84	Retrieves all the queries that were prepared .
85	Register global variables
86	Loads the options table
87	Adds an option .
88	Deletes an option from the database
89	Add a placeholder
90	Sets the default namespace .
91	Set the default controller .
92	Set default method .
93	Discovers routes .
94	Set default constraint
95	Get all defined routes
96	Gets the routes options .
97	Add a route collection
98	Adds a new redirect
99	Check if a route is a redirect .
100	Get the redirect code from one route .
101	Add a verb to the route collection .
102	Add a route collection
103	Set the environment
104	Reverse route .
105	Determine current subdomain .
106	Reset all routes .
107	Custom error handler .
108	Shutdown handler for fatal errors .
109	Determine the view to render .
110	Render the view .
111	Collects the variables for the exception .
112	Determine the exit code for the given exception .
113	Convert bytes to human readable format .
114	Highlight a PHP file .
115	Checks if value is alphanumeric .
116	Checks if a string matches a regular expression .
117	Is valid email .
118	Valid email addresses .
119	Valid string .
120	Valid Date .
121	Create an exception for a move failed .
122	Check if a cc number is valid
123	Validate Luhn number .
124	Moves a file from one location to another .
125	Move an escaper class
126	Move kint .
127	Start session .
128	Configure the session s sid length
129	Init session vars
130	Set session data
131	Get session data
132	Push a value into an array .
133	Removes a variable from the session .
134	Sets flashdata .
135	Get flashdata
136	Mark session data as flashdata
137	Returns an array of flash keys
138	Set temporary data
139	Get temporary data
140	Mark data as temporary
141	Unmark session data
142	Get temp keys
143	Set the session cookie .
144	Check if token is valid .
145	Guess the mime type from a file extension .
146	Guess the ext from a given type .
147	Redirect to another page .
148	Redirect to a route .
149	Redirects the user to the correct URL .
150	Store flash data in session .
151	Runs all registered filters .
152	Initialize filters .
153	Enable a filter .
154	Get specified arguments .
155	Format object to array
156	Send all logs .
157	Get the current locale .
158	Set the current locale .
159	Is secure?
160	Get the body as JSON
161	Executes all GET requests
162	Retrieve a post
163	Get a single post
164	Get a single POST
165	Get a single cookie
166	Get the file collection .
167	Get the file collection
168	Detect the URI
169	Get path from protocol
170	Sets the negotiation prefixes .
171	Parse request uri
172	Builds the DSN
173	Returns a Formatter object for the given mime type .
174	Event fired before the request is made .
175	Runs the honeypot command .
176	Resize image resource
177	Crop current image
178	Get imageMagick version
179	Returns the resource path .
180	Adds a foreign key
181	Drops a foreign key from a table .
182	attribute for unsigned attributes
183	Sets default attribute
184	Process primary keys
185	Process foreign keys
186	Set the locale .
187	Get a single line from the translation file .
188	Formats a message
189	Require files .
190	Add a base URI
191	Add an image src
192	Add a new media source .
193	Add a new manifest src option .
194	Add an object Src
195	Add a plugin type
196	Add sandbox option
197	Add a script source .
198	Add a CSS style src option .
199	Add an option to a target .
200	Generate the nonces string .
201	Build Content - Security - Policy headers
202	Get the title .
203	Collects all logs .
204	Prepare params .
205	Determine the cell class .
206	Returns the result array
207	Get custom result object
208	Get result array
209	Get result object
210	Get row object
211	Get custom row object .
212	Get the entire row as an array
213	Returns the row object .
214	Set row data
215	Returns the first row of the result set .
216	Returns the last row .
217	Returns the next row .
218	Returns an unbuffered row .
219	Check if the request matches the specified parameters .
220	Returns true if the parameters are acceptable .
221	Runs the framework .
222	Show CLI header
223	Create links .
224	Make a pagination links .
225	Store pagination .
226	Set a path for a group .
227	Get the page count .
228	Get current page .
229	Check if user has more
230	Get the last page .
231	Get the page URI
232	Get the next page URI .
233	Get the previous page URI .
234	Get per page .
235	Get pagination details
236	Ensure the current group
237	Returns the difference in years .
238	Returns the current months .
239	Returns the number of weeks in this date
240	Returns the days in the current date .
241	Returns the hours in hours .
242	Returns the difference in minutes .
243	Returns the number of seconds in this date .
244	Humanize date format
245	Load a database connection .
246	Load the Forge object
247	Returns whether a property has been changed .
248	Maps a property to a datamap field .
249	Mutate a DateTime object .
250	Casts the value as JSON
251	Determines if an alias should be discovered .
252	Finds all records .
253	Returns the first row .
254	Save data to database
255	Convert class data to array
256	Inserts a record into the database
257	Insert a batch of rows .
258	Get model builder
259	Do protect fields .
260	Clean validation rules .
261	Get validation rules .
262	Count all the results .
263	Set authentication .
264	set calendar component property form params
265	Parse request options
266	Get the request method .
267	Send request .
268	Apply request headers .
269	Set response headers .
270	Send the request and return the response .
271	Checks for a specific version of the target version .
272	Finds all migrations .
273	Check for migrations .
274	Get the history .
275	Get migration name .
276	Get current version .
277	Add migration history .
278	Remove migration history
279	Ensure the table exists
280	Check a value against a rule .
281	Request validation .
282	Set the validation rule for a field
283	Get a rule group .
284	Sets the rule group .
285	Loads rule sets .
286	Set validation error .
287	Get custom error message
288	Split a set of rules .
289	Reset validation rules .
290	Convert array to XML
291	Clean file names .
292	Sets the request URI .
293	Get user info
294	Returns the generated query string
295	Returns a URI segment .
296	Set a URI segment
297	Creates a URI string .
298	Set the authority .
299	Set the scheme
300	Set the port to connect to .
301	Set request path
302	Refresh current path
303	Sets the query string .
304	Decodes a value .
305	Add query string .
306	Set the query params .
307	Filters the path
308	Apply URL parts
309	Resolve the URI to a relative URI .
310	Merge the reference and path .
311	removes dot segments
312	Append value to value .
313	Prepend the value to the list .
314	Get the previous page url .
315	Get the next page .
316	Get the first page number .
317	Returns the last page number .
318	Get current uri .
319	Start a timer .
320	Stop a timer .
321	Gets the elapsed time for a timer .
322	Get the timers .
323	Add table alias
324	Performs the query
325	performs a simple query
326	Get the table instance for the given table name .
327	Prepare a query for execution
328	Escape the identifiers of an item
329	Call a function
330	Returns a list of all tables in the current database .
331	Checks if the given table exists .
332	Checks if a field exists in the table
333	Gets table data
334	Returns index data from a table
335	Return table foreign key data .
336	Get env value
337	Register the module s properties .
338	Get cache item
339	Write data to a file .
340	Get info about a file
341	Get file info
342	Initialize services .
343	Main entry point for all routes
344	Handles incoming request .
345	Starts benchmark .
346	Get response object .
347	Force security access .
348	Display Page Cache
349	Generates cache .
350	Generate a unique cache name .
351	Set performance metrics .
352	Try to route .
353	Start the controller .
354	Create the controller
355	Runs a controller .
356	Gathers the results from the cache .
357	Store the previous URL
358	Hook the current request method .
359	Gets a handler
360	Create alias from table
361	Where not in
362	where
363	Add a like statement to the query .
364	Start a new group start clause .
365	End a group .
366	Sets the offset .
367	Set a value in the store .
368	Get the final select query
369	Compile the final query .
370	Get number of rows
371	Count all results
372	Creates INSERT SQL statement .
373	Returns the sql statement for execution .
374	Get the update sql
375	Get compiled delete sql
376	Decrement a column s value
377	Create select statement
378	Compile the where having clause .
379	Compile the group by statement .
380	Compile the proper orderBy statement .
381	Find operators in a string
382	Renders the timeline .
383	Collect all the timeline data .
384	Collects variable data from all collectors .
385	Round a number
386	Copy image to given location
387	Returns the properties of the file .
388	Releases the lock
389	attach honeypot template to response
390	Prepare template .
391	Fetch an object
392	Converts an array into multiple columns
393	Clears the heading .
394	Set values from a DB result
395	Set values from an array
396	Set path .
397	Returns a string representation of the current upload error .
398	Store file .
399	Returns the maximum size of a file in bytes .
400	Check if a file is an image
401	Checks if a file is in a mime type .
402	Return the max image dims .
403	Fetch global values
404	Populate global variables .
405	Runs the migration
406	Define this object from a table
407	Runs the migration .
408	Modify column .
409	Create the table
410	Function to copy data into database
411	Format the given fields .
412	Format the keys .
413	Drop table indexes .
414	Set CSRF cookie
415	Set the CSRF hash
416	Returns the current time
417	Create a time object from a string representation .
418	Returns a new instance with the current time
419	Returns a yesterday instance
420	Returns a tomorrow instance
421	Create a Carbon instance from a date and time .
422	Create a Carbon instance from a specific time .
423	Create a new Time instance .
424	Returns a new Time object based on the provided format .
425	Create a new time from a timestamp .
426	Returns a Time instance
427	Convert DateTime to DateTime .
428	Returns the age in seconds
429	Get the daylight savings .
430	Set the month .
431	Set the day of the week .
432	Set minutes .
433	Set the seconds
434	Set time .
435	Set timestamp .
436	Checks if two tests are equal .
437	Check whether two DateTime are equal
438	Get a UTC object .
439	Returns the js matcher .
440	Callback function for cssMatcher .
441	Convert a string to UTF - 8 .
442	Converts a string from UTF - 8 to the encoding
443	Get uploaded file .
444	Creates a File object from the given array .
445	Returns the syntax for a value
446	Set binary path for download
447	Sets the path to the file
448	Get the length of the file .
449	Set Content Type By File Name
450	Get download file name
451	Returns the content of the attachment .
452	Build the request headers
453	Send message to download
454	Send body by file path
455	Add a route
456	Run a given command
457	Create commands list
458	Create a database connection
459	Create a seeder
460	Check if params is all namespace .
461	Adds a test .
462	Run all tests .
463	Returns a report
464	Set SQL query
465	Returns the compiled query string .
466	Get start time
467	Get the duration in seconds .
468	Sets the error code .
469	Swap the prefixed query prefix .
470	Compile bindings for statement .
471	Load the helpers .
472	Registers the autoload extension .
473	Add a namespace .
474	Get Namespace .
475	Require a file
476	Sanitizes a filename .
477	Discovers composer namespaces from composer .
478	Adjust date precision
479	Creates an excerpt
480	Sanitizes a value .
481	Resolve nested variables .
482	Set the database name .
483	Execute SQL query .
484	Prepare a query
485	Retrieve an error message
486	Executes a SQL statement .
487	Returns field names for a table
488	Create a cache instance .
489	Create a ClireRequest instance .
490	Create a curl request instance .
491	Get the honeypot instance .
492	Get a single language instance .
493	Get the logger instance .
494	Create a negotiator .
495	Get a parser instance .
496	Get an incoming request instance .
497	Get response instance
498	Create a RedirectResponse instance .
499	Get router .
500	Get the Security instance .
501	Get an instance of the requested URI
502	Get a validation instance .
503	Describe a list of commands .
504	Pad the title
505	Parse a result into a CSV format .
506	Return the xml from a result set .
507	Call a command .
508	Call seeder .
509	Is a value in a list?
510	Checks if the string is less than the given maximum
511	Mark the given data as required
512	Marks a field as required
513	Validates the request segments
514	Sets the directory name .
515	Set request route
516	Set the default controller
517	Returns the file size in bytes .
518	Moves file to given location
519	Get the destination file
520	collects the number of queries
521	Convert database connection data to array .
522	Locates a PHP file
523	Get the class name from a PHP file .
524	Searches for files in the given path .
525	Ensure file extension .
526	Find the fully qualified name of a file
527	Returns the path to the given location
528	Render a string .
529	Get excerpt from string
530	Set the view data .
531	Set a view variable
532	Renders a section .
533	Include view .
534	Log performance profiling
535	Image to image .
536	Ensure the image resource exists
537	Resize image to given width and height
538	Rotate image .
539	Flip the image .
540	Adds a text color .
541	Resets the internal orientation .
542	Get Exif data
543	Crops the image
544	Runs codeIgniter command .
545	Render a template string
546	Parses a pair of data
547	Extract Noparse blocks from template
548	Insert Noparse blocks into the template
549	Parse conditionals .
550	Set preferred delimiters
551	Replace content with a single template .
552	Determine if the input should be added to the context .
553	Add a new plugin
554	Create an image resource from path .
555	Get the value of a header
556	Check if the header exists
557	Set a header .
558	Removes the header .
559	Set the HTTP protocol version
560	Get header name .
561	Configure session ID regex
562	Get the response reason
563	Set the link header .
564	Set Content - Type header
565	Get response body
566	Get XML body
567	Format response body based on given format
568	Set the response cache headers .
569	Send the response .
570	Send the headers .
571	Set a cookie
572	Check if a cookie with the given name exists .
573	Get a cookie by name
574	Delete a cookie
575	Sends the cookies to the client .
576	Download a file
577	get object instance
578	Create a class
579	Get shared instance
580	Get an Autoloader instance .
581	Get the locator
582	Reset all mocks .
583	Adds a mock .
584	Discover services by name
585	Gets input from readline .
586	Prompts user for input .
587	Validate a field .
588	Prints text to STDOUT .
589	Write text to STDERR
590	Wait for the given number of seconds .
591	Colorize text .
592	Wordwrap to a specific number of lines
593	Get an option by name .
594	Computes the table
595	Format the response
596	Send fail message
597	Returns 201 response
598	Respond with deleted message
599	Run the failed access token
600	Create a failed server error
601	Runs the script before the request is executed .
602	Initialize services .
603	Get all event listeners
604	Removes a listener from an event .
605	Is the referrer?
606	Set platform .
607	Set browser from config
608	Set the robots . txt
609	Set mobile devices
610	Set attribute type
611	Initialize the configuration .
612	Output a QR Code
613	Initialize the qrcode style .
614	Decode emoji content
615	Get heartbeat time
616	Handles check sync .
617	Logs a message .
618	Get UUID .
619	Show QR Code .
620	Wait for login
621	Request login .
622	Store the server .
623	Before init event
624	Logs in after init success .
625	Send status notification .
626	Force download a file
627	Get resource for download
628	Auto download message
629	Check synchronization .
630	Create a new sync key
631	Generate sync key
632	Logs a string
633	Write log message to log
634	Send message to user
635	Fetch all contacts .
636	Stores the contact list .
637	Fetches group members .
638	Store members in database .
639	Called when the exception is dispatched
640	Throw a fatal exception .
641	Validates the key .
642	Split JWT string into array
643	Parses the header string .
644	Parse the claims list .
645	Parse a signature
646	Negotiates language .
647	get accepted languages from request
648	Cache all routes per locale .
649	Build route cache file .
650	Register Laravel Localization bindings .
651	Register package commands
652	Sets the current locale .
653	Get URL from route name translated .
654	Returns the supported locales .
655	Determine the locales order .
656	Get the current locale direction .
657	Get the current locale .
658	Get the current locale .
659	Check if the locale is in supported locales .
660	Get route name from given path .
661	Find translated route by path .
662	Find translated route by given url and locale .
663	Create a URL from an absolute URI .
664	Normalize attributes .
665	Load the cached routes .
666	Returns the route path for the given locale .
667	Encode a message set .
668	Encode a partitionedition
669	Encode a topic .
670	Produces a topic pair .
671	Generate a partition pair .
672	Decode a message set
673	Decode a message .
674	Creates a new socket client .
675	Select a stream .
676	Unpacks a binary string of bytes .
677	Check length of bytes
678	Returns true if the system is little - endian .
679	Returns the API version .
680	Get text of API request
681	Add a before route .
682	Store a route and a handling function to be executed .
683	Mount a base route
684	Returns the request method .
685	Returns the server base path .
686	Add a new route
687	Matches the current route .
688	Returns the current route
689	Match url with pattern
690	Runs a filter .
691	Gets an event .
692	Clears all events .
693	Executes a set of filters .
694	Execute a callback
695	call function with parameters
696	Invoke a method on a class
697	Initializes the object .
698	Returns the request body .
699	Returns the method of the current request .
700	Returns the proxy s IP address
701	Parse a query string into an array of parameters .
702	Set or get the status code
703	Adds a header to the request
704	Sets the cache headers
705	Send response .
706	Init the migration .
707	Handles PHP errors .
708	Handle an exception .
709	Registers a controller action .
710	Register a plugin method .
711	Get a router variable
712	Clear a variable
713	Start the application .
714	Stop the response
715	Add a route to the router
716	Halt the response
717	Send an error
718	Sends a redirect response
719	json response .
720	Make a JSONP response .
721	Send an ETag
722	Sets the Last - Modified header
723	Registers a class .
724	Load a class
725	Get an instance
726	Create new instance
727	Load a class .
728	Add one or more directory
729	Fetch rendered content
730	Get the path to a view file
731	Checks if this graph is cyclic
732	Returns the average height of a graph .
733	Collapse an array
734	Fetch files .
735	Traverse the tree node .
736	get all root nodes of this set
737	Get the composer lock .
738	Move the current iteration .
739	Determine if we have ANSI support .
740	Handles no parameters .
741	Processes a token stack .
742	Initializes the class .
743	Add fixable message .
744	Merge custom array
745	Returns the next character on the current line .
746	Check whether a token is an assignment .
747	Checks whether the given token is a namespace declaration .
748	Is this token only sanitized?
749	Checks whether the given token is a safe or not .
750	Returns the access keys of an array .
751	Get an array access key .
752	Checks if the given token is a comparison .
753	Check if a token is in an array comparison .
754	Get the use type for a given test .
755	Extract variables from the given string
756	Returns whether a function call has parameters .
757	Count the number of parameters for a function call .
758	Get the parameter for a specific function call .
759	Searches an opening token for a given closure .
760	Determine the namespace name for the given token .
761	Get the name of a namespace declaration .
762	Checks whether the current token is a class constant .
763	Check if the current token is a class property declaration .
764	validate direct scopes
765	Prepare a punctuation regex .
766	Transform a string using the given regex .
767	Recursively transforms a string into a complex string .
768	Returns an array of groups in the set .
769	Processes an arbitrary string .
770	Processes all parameters declaration .
771	Returns a list of misspelled words
772	Post pagination callback
773	Sets configuration data
774	Return the tab width .
775	Process a global statement .
776	Add error to Exception .
777	Sets up the groups
778	Check if this token is targetted .
779	Checks if a token matches a given token .
780	Processes the variable declaration .
781	Checks if a variable is either whitelisted or whitelisted .
782	Validates the namespace prefixes .
783	Record the potential prefixes for a given concept .
784	Sets up the groups cache
785	Validate the alignMultiline items .
786	Determines whether a raw data stream is local or not .
787	Processes variables in a string .
788	Merge the whitelist of custom properties .
789	Ignore a token .
790	Get indentation size
791	Get indentation string
792	Adds an error to the array at a given index
793	Fixes an assignment error .
794	Checks whether a stream is safe
795	Compare single and plural arguments
796	Check the plain text of a context .
797	Is this token targetted?
798	Checks whether this token matches a given token .
799	Get the fully - qualified classname .
800	Register assignment tokens .
801	Execute the closure
802	Reserve a queue message .
803	Close the broker .
804	Validates the namespace of an existing directory .
805	Push a job onto the queue .
806	Listens to queue
807	Run a job
808	Handle a message from the queue
809	Run the tasks .
810	Replace the lock .
811	Marks all expired time .
812	Called before the push is sent
813	Delete a channel
814	Run worker .
815	Handle a message attempt
816	Initializes the extension .
817	Can continue process
818	Reserve a job in the queue .
819	Delete a Job from the storage .
820	Parses the current element and returns the result .
821	Parse get elements .
822	Parse the inner tree
823	Reads the text of this node .
824	Parses the current element into an array .
825	Parse the attributes
826	Returns a Deserializer for the given element name
827	Push a context onto the stack
828	Restore the rest of the context stack
829	Get a writer .
830	Parses an XML string .
831	Get a value from the parser .
832	Write an element to XML format
833	Maps the value object to a registered element .
834	Write a value object .
835	Parses a string in a clark annotation .
836	Deserialize an XML reader
837	Deserializes XML to a URI .
838	Parses an adhoc namespace .
839	Write an element
840	Write multiple attributes at once
841	Write an attribute
842	Get the relations for a given model .
843	Validate job name
844	Validate the given command .
845	Create the shell job
846	Creates a new scope that will retrieve the current context .
847	Finish the timer .
848	Get current span from current context .
849	Convert the current context to a real span .
850	Start trace .
851	Set the name of the trace .
852	Annotates given value .
853	Sets the remote endpoint .
854	Generates a new token .
855	Get from storage
856	Get the last key pair
857	Enforce the storage limit if necessary .
858	Creates a sanitizer instance .
859	Sets the attributes of a DOMNode .
860	Get the value of an attribute from the DOMNode .
861	Processes the default entity configuration .
862	Process the default menu item .
863	Returns the fully qualified name of a type .
864	Returns the form type options of a property .
865	Initialize the entity
866	Autocomplete action .
867	Handles the list action .
868	Edit an item
869	Finds and displays an entity .
870	Displays a form to create a new entity .
871	Deletes an existing entity .
872	Search action .
873	Redirects to a batch action
874	Updates an entity property .
875	Locate all entities
876	Creates a list query builder .
877	Find entities by searchable class
878	Create a search query builder .
879	Create an entity form builder instance .
880	Get form options for an entity .
881	Creates an entity form .
882	Creates a form to delete an entity .
883	Redirect to backend
884	Kernel controller event handler .
885	Normalize menu config
886	Get entity configuration
887	Check if action is enabled .
888	Get action configuration .
889	Translate a message with count .
890	Returns an ORM Pagerfanta instance .
891	Process the backend config
892	Initialize the request attribute .
893	Find current item
894	Gets the attributes normalizer .
895	Processes the entity properties metadata .
896	Gets the default actions .
897	Handles form errors .
898	Finds a single entity .
899	Process config files .
900	Normalize the entity configuration .
901	Get the unique name of the entity
902	Normalize backend view config
903	Merge the parent form config .
904	Create a query builder for list
905	Determines if a fieldname is a Doctrine association
906	Processes the field configuration .
907	Returns the excluded field names .
908	Filter a list of fields
909	Runs a command .
910	Default delete check function
911	Comparison function for d - check .
912	Check if a given offset is uppercase .
913	High level function to read length of data
914	Builds a progress bar
915	Logs the given BulkException .
916	Parse the type config .
917	Get the index configuration
918	Get all providers .
919	Get the service providers for an index .
920	Returns the provider for the given index type and type
921	Sets sorting for items .
922	Build index mapping .
923	Builds index template mapping .
924	Builds the type mapping .
925	Fix the properties
926	Logs query .
927	Transform an object to an Elastica document .
928	Get total hits .
929	Get Elastica results .
930	Delete all indexes for a template
931	Returns the requested index .
932	Returns the persister for the given index and type .
933	Populate the index .
934	Refreshes index .
935	Transform single object
936	Transforms nested objects
937	Normalize the given value .
938	Transforms a single object into a document .
939	Get entity query builder .
940	Gets an index template .
941	Reset all indexes .
942	Reset an index .
943	Reset the index for a given type .
944	Switches alias of an index
945	Loads the index finder .
946	Loads type persistence integration .
947	Loads a model to model transformer .
948	Load object persister configuration .
949	Loads the type provider .
950	Loads the type event listener .
951	Get doctrine events .
952	Loads the type finder .
953	Loads the index manager .
954	Loads index template manager .
955	Loads a configuration driver .
956	Load serializer .
957	Create the default manager alias .
958	Gets the dynamic template node .
959	Returns the type node
960	Returns id node .
961	Returns the source node .
962	Returns the routing node .
963	Gets the parent node .
964	Returns the tree builder node .
965	Adds the index configuration .
966	Adds the index templates section .
967	Transforms an array of elastica objects into a normalized object
968	Checks if an object is indexable .
969	Builds the callback for the given object
970	Build an expression callback
971	Get the initialized callback .
972	Gets an expression variable
973	Set the root name of an index .
974	Switch index alias
975	Build the alias update request .
976	Clean up a rename exception .
977	Close an index .
978	Returns the indexes for the given alias name .
979	Log query .
980	Schedules an entity for persist .
981	Schedule an entity to be updated
982	Schedule an entity for removal
983	Persists the deleted objects .
984	Schedules an object for deletion .
985	Check if the given object is indexable .
986	Get a repository for an entity
987	Creates a Document
988	Get repository by type name
989	Make a new client .
990	Register the hashids factory .
991	Verify Hash .
992	Creates a Guzzle HTTP client .
993	Adds a cookie to the set .
994	Add cookies to the request .
995	Clears all expired cookies .
996	Returns a unique hash for the given cookie .
997	Add header to the response
998	Parse HTTP headers .
999	Handle the incoming request
1000	Set driver options .
1001	Get the client nonce number .
1002	Generates the SHA1 hash .
1003	Generate the SHA2 for the request .
1004	Generate request header
1005	Generate the API response .
1006	Get the qop .
1007	Hash a value
1008	Parses authentication info header .
1009	Parses a string of name - value pairs .
1010	Parse wws authentication header
1011	Set MD5 hashing algorithm .
1012	Set the HTTP request method .
1013	Remove quotes from a string
1014	Creates a new request
1015	Convert an array of headers into a Buzz header .
1016	Converts an associative array of headers to a list of psr headers .
1017	Sends a request asynchronously
1018	Sends a request and returns the response .
1019	Runs the request
1020	Initializes a cURL multi handle .
1021	Perform cleanup of requests .
1022	Check if this route matches the given request .
1023	Check whether the entity has expired .
1024	Checks if the cookie domain matches the given domain .
1025	Checks whether the path matches the given path .
1026	Set the cookie header from a cookie .
1027	Releases a cURL handle .
1028	Prepare cURL resource .
1029	Set Curl Options from Request
1030	Sends a request .
1031	Adds a new entry to the queue .
1032	Create image if not exists
1033	Add cover .
1034	Add TOC file .
1035	Create the pdf document
1036	Ensure that the given input is a URL or file .
1037	Creates the GuzzleHttp client .
1038	Create middleware stack .
1039	Creates a request .
1040	Send request asynchronously
1041	Generate request options
1042	Sends a context asynchronously
1043	Throw service exception
1044	Adds a post parameter to the request .
1045	Adds metadata headers .
1046	Add location header depending on location mode .
1047	Validate an entity properties .
1048	Returns the value of a property .
1049	Sets the value of a property .
1050	Sets the specified property .
1051	Adds a property .
1052	Validates the property .
1053	Creates GetTableResult object from body
1054	Computes the string to sign .
1055	Generate the authorization header .
1056	Computes canonicalized headers .
1057	Compute canonicalized resource for table
1058	Computes canonicalized resource
1059	Convert this object to XML string .
1060	Sets the access rights from an array .
1061	Add a signed identifier to a user .
1062	Remove a signed identifier from the collection .
1063	Sets the operations .
1064	Add a batch operation .
1065	Adds an insert entity to a table .
1066	Add the delete entity to the table .
1067	Returns a CopyFileResult object .
1068	Create a new time window based on the parsed response
1069	Creates queue message from the parsed response
1070	Create queue message from parsed response .
1071	Initializes the storage .
1072	Returns a StorageServiceSettings object for development storage .
1073	Get a storage account for development storage
1074	Get service endpoint
1075	Create storage service settings .
1076	Creates a StorageServiceSettings object from the given connection string .
1077	Create storage service settings from a connection string .
1078	Encode multipart data .
1079	Decodes a MIME part of the message
1080	Creates a ListSharesResult from parsed response .
1081	Sets the set of shares .
1082	Retry a request .
1083	Apply AND filter
1084	Applies the OR operator to the left or right filter .
1085	Apply Eq filter
1086	Applies the left - right filter to the left .
1087	Applies the Geometry filter to the left and right
1088	apply gt filter
1089	Filter left and right
1090	Apply A BETWEEN filter
1091	Sets the location .
1092	Unserialize the given serialized string
1093	Creates a QueueResult object from the parsed response .
1094	Creates GetEntityResult object
1095	Create the operations context .
1096	Returns the operation context for the given entity type .
1097	Creates the request body for batch operations .
1098	Constructs a delete entity context .
1099	Constructs a put or merge entity
1100	Constructs an insert entity context for a single entity .
1101	Returns entity path .
1102	Sends a PUT OR update asynchronously
1103	Adds the optional query parameter to the query .
1104	Encode a list of values .
1105	Query the tables async
1106	Creates a table in the database .
1107	Create a table asynchronously .
1108	Get a table .
1109	Get a table asynchronously .
1110	Deletes a table .
1111	Deletes a table asynchronously .
1112	Queries and returns entities asynchronously .
1113	Insert or merge an entity
1114	Insert or merge an entity in a table
1115	Insert or replace an entity
1116	Insert or replace an entity in a table .
1117	Update an entity in table
1118	Update an entity asynchronously
1119	Merge an entity
1120	Merge an entity asynchronously
1121	Deletes an entity in the database .
1122	Deletes an entity in the database .
1123	Get Entity asynchronously
1124	Gets the entity asynchronously .
1125	Performs a batch operation .
1126	Send a batch operation asynchronously
1127	Creates a ListDirectoriesResult from parsed response .
1128	Sets the directories .
1129	Sets the files .
1130	Creates a Directory instance from parsed response body .
1131	Create UpdateEntityResult .
1132	Sets the query parameters .
1133	Sets the status codes .
1134	Removes a header from the response .
1135	Adds a history entry to the history array .
1136	Appends a new entry to the path .
1137	Creates a QueryTables result .
1138	Create queue message from parsed response .
1139	Sets the queue messages .
1140	Initializes this connection
1141	Checks if a hostname is valid
1142	Checks if a URI is valid
1143	Validates if method exists in object
1144	Checks if value is a date string
1145	Checks if key exists in array
1146	Returns a chunked range string
1147	Lists all queues asynchronously .
1148	Clear messages in queue .
1149	Create a message to be sent to the server .
1150	Creates a message asynchronously .
1151	Creates a queue and executes it .
1152	Create queue async .
1153	Deletes a message from the queue .
1154	DELETE a message asynchronously
1155	Deletes a queue asynchronously
1156	Delete a queue asynchronously
1157	Get metadata for a queue .
1158	Query queue metadata async .
1159	Get all of the messages in a queue .
1160	Lists all messages in queue .
1161	Peeks one or more messages in a queue .
1162	Peek messages asynchronously
1163	Generate shared access token .
1164	Validate and sanitize a signed service .
1165	Validate and sanitize the signed resource type .
1166	Validates and sanitizes the given permissions .
1167	Validate and sanitize the signed protocol .
1168	Sanitize and sanitize a string with a given array
1169	Generates canonical resource
1170	Parse the error message from the response .
1171	Get the Request ID of the XMS Server
1172	Returns the date of the request .
1173	Sets the middlewares .
1174	Validate a middleware .
1175	Parses a connection string
1176	Creates a new RuntimeException with the given arguments .
1177	Extracts the key from the string representation .
1178	Extracts a string from the quoted string .
1179	Skips an operator character .
1180	Create GetShareAcl object .
1181	Adds the headers to the request .
1182	Get setting from predicate
1183	Creates a new setting
1184	Check if a setting matches a set of settings .
1185	Sets the next row key .
1186	Sets the next partition key .
1187	Process type .
1188	Validates an Edm value .
1189	Serialize the given value .
1190	Serialize a query value
1191	Unserialize a query value .
1192	Creates a ServiceProperties object from the parsed response .
1193	Get the CORS array .
1194	Initializes the environment
1195	Parse table entries
1196	Convert entity to array
1197	Parse resource body into an array
1198	Sets the start date of the period .
1199	Validate a permission
1200	Creates a path for a share .
1201	Get share properties asynchronously .
1202	Sets the share properties asynchronously .
1203	Performs a list share update .
1204	Creates a share .
1205	Creates a share notification stream .
1206	Deletes a share
1207	Get share properties asynchronously .
1208	Sets share properties asynchronously .
1209	Sets share properties asynchronously .
1210	Get share metadata asynchronously .
1211	Sets the share metadata for a file .
1212	Set share metadata asynchronously .
1213	Sets share ACL
1214	Sets share ACL .
1215	Lists the list of directories and files in a directory .
1216	Lists the directories and files in a share .
1217	Creates a directory in the shared memory .
1218	Create a directory async .
1219	Delete a directory and all of its contents
1220	Get directory properties asynchronously .
1221	Send a request to get the directory properties .
1222	Get directory metadata asynchronously .
1223	Sets directory metadata .
1224	Creates a file in the shared memory .
1225	Create file in parallel .
1226	DELETE a file in the share .
1227	Send a DELETE request asynchronously .
1228	Downloads a file from the server .
1229	Get a file asynchronously .
1230	Get file properties asynchronously .
1231	Get file properties asynchronously .
1232	Sets file properties asynchronously .
1233	Set file properties asynchronously .
1234	Get file metadata asynchronously .
1235	Sets the file metadata asynchronously .
1236	Sets the file metadata asynchronously .
1237	Sets the file range for a file .
1238	Sends a file range asynchronously .
1239	Creates a file from the given content .
1240	Create a file from a content stream .
1241	Clears files within a range .
1242	Clear a file within a range .
1243	List files within a range .
1244	Lists files in a range .
1245	Aborts a copy .
1246	Abort a copy asynchronously .
1247	Set the type of the batch operation .
1248	Add a parameter to the batch operation .
1249	Parses the contents of the response .
1250	Compares this content using its ContentId .
1251	Creates a BatchResult .
1252	Get instance attributes
1253	serialize an array to xml
1254	Create a new Key from parsed response .
1255	Get service properties asynchronously .
1256	Sets the service properties asynchronously .
1257	Sets the service properties asynchronously .
1258	Get Service Stats
1259	Creates a ListQueuesResult from parsed response .
1260	Sets the queues
1261	Try to get a secondary endpoint from a URI .
1262	serialize an array to xml
1263	Convert an object into a boolean value .
1264	Converts a date to a PHP date time
1265	Convert DateTime to ISO - 8601 .
1266	Convert a value to DateTime .
1267	Convert a number to decimal .
1268	Check if all content is zero .
1269	Appends a string delimiter to the beginning of the string .
1270	Checks if request sent to secondary
1271	Returns the location value from the response headers .
1272	Calculates the md5 of the given content .
1273	Validate the resource type .
1274	Creates a new UpdateMessageResult object .
1275	Creates a new activation token .
1276	Create a retry decision .
1277	Dry a decry decision .
1278	Adds optional query parameter .
1279	Adds optional header .
1280	Creates GetFileResult object .
1281	Serialize headers .
1282	Serialize the exception .
1283	Creates a CreateMessage object from parsed response .
1284	Create InsertEntity object
1285	Creates a QueryEntitiesResult .
1286	Format headers .
1287	Creates File from parsed response .
1288	Apply the middleware stack .
1289	Returns the available includes .
1290	Call include method .
1291	Resolve scope includes .
1292	set the error state
1293	Set view data
1294	Set the serializer .
1295	Get the error output .
1296	Set the resource .
1297	Set Cursor .
1298	Set the paginator
1299	Adds relations to eager load .
1300	Adds an array of relations to be removed
1301	Set the fields only on the query .
1302	Set the serializer
1303	Transform the resource .
1304	Prepare relations .
1305	Eager load relations .
1306	Return a paginator instance .
1307	Format a cursor .
1308	Merge includes .
1309	Add a set of fields to the transformer .
1310	Resolve the given data .
1311	Resolve transformable item .
1312	Resolve a transformer .
1313	Render exception .
1314	Make serializer instance
1315	Make a resource .
1316	Parse the resource options .
1317	Parse the fieldsets
1318	Parse fieldset .
1319	Resolve child includes .
1320	Register a new error object .
1321	Resolve the translation for the given error code .
1322	Clean parameter array .
1323	Set the transformer and transformable fields .
1324	Resolve a transformer item .
1325	Resolve the given transformer .
1326	Register Laravel bindings .
1327	Register Lumen bindings .
1328	Make response factory
1329	Register Serializer bindings .
1330	Register the error bindings .
1331	Register fractal bindings .
1332	Register the transformer bindings .
1333	Register transformation bindings .
1334	Publish Laravel application
1335	Set data collector
1336	Formats an error response
1337	Returns an array of relational relations .
1338	Returns the default relations for the model .
1339	Extract relations .
1340	Extract the relations from the relations .
1341	Wrap child relations .
1342	Apply query constraints .
1343	Get a constraint for an identifier .
1344	Resolve the relation name .
1345	Get a list of transformer transformers .
1346	Get a resource instance .
1347	Includes a resource
1348	Include a resource from a model .
1349	Determine if an item should be cached .
1350	Creates a new resource .
1351	Makes a transformer from a resource .
1352	Instantiates a new resource .
1353	Determine if we should create a collection .
1354	Resolve a resource key .
1355	Set response decorator
1356	Return a json response .
1357	Normalize given data
1358	Normalizes the given relation .
1359	Set the data to be transformed .
1360	Convert an exception to an array .
1361	Convert a default exception .
1362	Render API response .
1363	Make a transformer .
1364	Configure terminal .
1365	Add items to the menu .
1366	Sets the first item
1367	Clears first item .
1368	Add custom control mappings .
1369	Removes a custom control mappings .
1370	Displays the control
1371	Returns the selected item .
1372	Execute current item
1373	Redraw the terminal .
1374	Draws the menu .
1375	Draws a single menu item .
1376	Close the menu .
1377	Sets the default selected item .
1378	Returns true if the item can be select .
1379	Sets the index of the selected item .
1380	Returns the selected item .
1381	Wordwrap to a given string
1382	Generates the code used to set the colour
1383	Calculates the content width .
1384	gets right padding
1385	Sets border color
1386	Displays the screen .
1387	Calculate the coordinates of the nav bar
1388	Write empty row .
1389	Writes text to the terminal .
1390	Sets the text of this node .
1391	Recursively calculate art length
1392	Displays the progress bar
1393	Get a connection instance .
1394	Make a connection instance .
1395	Get configuration .
1396	Compress content - encoding
1397	Check if a key exists
1398	Add list of arguments
1399	Method to set property arguments
1400	Set option value .
1401	Add rules to the parser .
1402	Convert options to string
1403	Convert options to array
1404	Convert options to json .
1405	Convert options to XML .
1406	Returns the value of a given option
1407	Get a usage message .
1408	Set rule aliases .
1409	Set the help map .
1410	Parse the argv list
1411	Parse a short option list
1412	Parse single option
1413	Adds the rules from the config
1414	Add rules to Zend_Config object
1415	Generates the OAuth Authorization header .
1416	Generate the base string .
1417	Prepare a HTTP method .
1418	Set the nonce
1419	Append OAuth parameters to the query string .
1420	Get the query as a string
1421	Creates a new HTTP client .
1422	Return the location of the log requests .
1423	Logs API requests .
1424	Check if an entity is allowed
1425	Prepares reflection data
1426	Return the WSDL as string
1427	Copy file to public directory
1428	Converts the given object to a string zero value .
1429	Read Configuration From File
1430	Initialize the rules associated with an XML object
1431	Populates the entities of the given XMLObject
1432	Initializes the settings for the OAuth .
1433	Initialize request and response and compression format
1434	Fetches the base URL and logs it into an IRI object
1435	Get the entity with the given key
1436	Check if a string is a valid xml string
1437	Make sure that the configuration is correct .
1438	Load webhooks and return class names .
1439	Check if a class name is valid for a given webhooks class name .
1440	Returns the set of options used by this class .
1441	Validates a URL
1442	Adds a function to the SOAP server
1443	Setter for class
1444	Setter for the object
1445	Gets the list of functions of this class .
1446	Sets the persistence mode
1447	Get SoapServer instance
1448	Handle SOAP request
1449	Deregister Fault Exception .
1450	Retrieve a fault
1451	Handle PHP errors .
1452	Gets the access token
1453	Builds the authorization code URL .
1454	Refresh an access token .
1455	Makes a migration to OAuth2
1456	Parse a new access token .
1457	Check if the token returned is empty .
1458	Generates the authorization header .
1459	Builds the authorization header for the refresh token .
1460	Check the result
1461	Extracts the error message from an error code .
1462	Convert an object to an array
1463	Serializes an entity for the JSON api .
1464	Removes null properties
1465	Add a complex type to the WSDL .
1466	Get the WSDL as an xml string
1467	Adds bindings to the WSDL .
1468	Creates the port type .
1469	Adds entity types
1470	Adds all operations of the given methods
1471	Execute all of the port operations .
1472	Returns whether the type is a local type .
1473	Adds services to wsdl instance
1474	Get targetNs from xpath .
1475	Find namespace parts
1476	Saves the classes
1477	load includes .
1478	Get the DOMDocument
1479	Store the PHP files in a directory .
1480	Convert namespace to php .
1481	BaseURL setter .
1482	Returns the refresh token validation period in seconds .
1483	Returns the access token validation period in seconds .
1484	Gets the refresh token .
1485	Get the access token
1486	Updates the given access token .
1487	Get POST body from an arbitrary entity
1488	Builds a PhpObject from an XML string .
1489	Parses an array of result objects and returns it as an array .
1490	Sets the current cURL option
1491	Returns the version of TLS .
1492	Handles Ids exceptions .
1493	Verify the type of given value
1494	Generate object names
1495	Complete class property
1496	Unmarshall a DOM document .
1497	Returns the Serializer object for the request
1498	Returns a Compression object for the given message context .
1499	Returns the request logging instance .
1500	Establishes a composite type map
1501	Returns the default strategy
1502	Returns the strategy of a complex type .
1503	Adds a complex type to the WSDL
1504	Create reflection class .
1505	Populates the property comments
1506	Creates an instance of the model
1507	Processes the values of a single property .
1508	Static constructor .
1509	Checks if the value passed is a Morhing entity
1510	Processes the value of a property .
1511	Get entity from the model
1512	Update service context settings for other services .
1513	Setup the RestHandler
1514	Set new log location .
1515	Set the minor version of the project .
1516	Disable logging .
1517	Enable the logging task .
1518	Set the client name
1519	Configure an instance
1520	Configure OAuth2 Login Helper
1521	Update OAuth2 token
1522	Setup the serializers
1523	updates an entity
1524	Add new entity .
1525	Delete an entity
1526	Uploads an image to Aspose cloud storage .
1527	Send email .
1528	Performs a query to the API
1529	Append pagination info to a query
1530	Find one or more services by name
1531	CRON FOR CCE
1532	Execute an object serializer .
1533	Initialize the post request .
1534	Create request parameters
1535	Fix tax service payload
1536	Return the filename for an export file .
1537	Check if an entity is allowed
1538	Creates a new batch
1539	Convert string to timestamp .
1540	Checks if a timestamp is valid .
1541	Verify that the given value was changed since the lastIX timestamp .
1542	Get company info
1543	Get the rules associated with Quickbooks
1544	Returns the access token from the settings array
1545	Returns the refresh token from the given settings array .
1546	Returns the redirect URL
1547	Saves a file in a directory .
1548	Generate unique filename .
1549	Generates an error from OAuth Exception
1550	Parse the response from the API
1551	Is the error body in standard format?
1552	Set the response object as the given one .
1553	Parses the response to an Intuit object
1554	Set fault handler
1555	Set the raw headers .
1556	Set the content type
1557	Set intid value
1558	Gets the application menu .
1559	Reconnects to the server
1560	Set the URI
1561	Sets a complex type strategy
1562	Add an operation to a binding .
1563	Append a documentation node to the current node .
1564	Add DOM types .
1565	Adds a type .
1566	Dump the result
1567	Add a schema type section .
1568	Configure an OAuth2_Config instance based on the passed array
1569	Check if OAuth settings are valid
1570	This method is intend to retrieve the base URL of the module .
1571	initialize the xml format
1572	Use the Serialization format
1573	Disables the logging .
1574	Set Log location .
1575	Update the OAuth2 access token
1576	Return class properties
1577	Get result
1578	Set the uri
1579	get the uri for this request
1580	Returns the request URI without parameters .
1581	Sets a complex type strategy .
1582	Set WSDL class
1583	Adds a function to the WSDL .
1584	Dump wsdl to disk
1585	Updates the service context
1586	Sends an OAuth2 request .
1587	Make a Api Call Request
1588	Gets the OAuth1 Authorization header for the request .
1589	Perform an API call to the API .
1590	Returns the OAuth2 Authorization header for the access token
1591	Parse API response to log platform
1592	Logs API request to log endpoint
1593	Parses a string into a DOMDocument .
1594	Reset the response compressor and serializer .
1595	Returns the destination URL of the request
1596	Append the minor version uri to the request URI
1597	Determine the HTTP Method
1598	Parse the given URL
1599	Get accept content type
1600	Parse the query into an associative array .
1601	Verify a Payload .
1602	Encrypt a PayLoad based on the hash .
1603	Get the response of the selected batch .
1604	Removes the request for a specific batch item .
1605	Convert array to message and code .
1606	Converts a fault to an exception .
1607	Get SOAP configuration
1608	Set the SOAP client style
1609	Set Message Encoding method
1610	Set proxy port
1611	Defines the certificate to be used for HTTPS
1612	Sets the stream context
1613	Set user agent
1614	Perform SOAP request
1615	Initialize the SoapClient object
1616	Add a SOAP input header
1617	Return functions from WSDL
1618	Return the types of the SoapClient
1619	Get the type based on the nesting level
1620	Add an element to the WSDL form
1621	Prepares the WSDL parser
1622	Adds a binding operation element to the WSDL .
1623	Add a portType operation element to the WSDL .
1624	Create the ref element
1625	Create an element with a complex type
1626	Create a SimpleElement
1627	Resolve a namespace .
1628	Parse doc comments
1629	Check if array is associative
1630	Get Webhooks event from Payload .
1631	Verify payload .
1632	Check if a key is in a complex list
1633	Returns the ReflectionMethod of a class .
1634	Returns the type based on an array of data
1635	Get IPPID .
1636	Merge two objects
1637	Get the HTTP Headers
1638	set the curl to use
1639	Converts an associative array of headers to a header string
1640	Adds a new warning to the stack .
1641	resolve from input
1642	Sets the name of the tag .
1643	Scope by tag name .
1644	Boot the trait for the model .
1645	Attach a model to the model .
1646	Untag a model from the model .
1647	Add one Tag .
1648	Remove one tag .
1649	Returns whether the tag is defined .
1650	Scope the query with all the provided tags .
1651	Query scope for tagged entities .
1652	Scope the query without tags .
1653	Query scope for not tagged columns .
1654	Rename a tag .
1655	Get popular tags .
1656	Get the fully qualified pivot key name .
1657	Get the fully qualified foreign key name for the pivot table .
1658	Creates a new taggable alias .
1659	Builds an array of tags based on given tags .
1660	Returns an array of registered tag models keys .
1661	Make tag list .
1662	Make a tag array from a model .
1663	Get all tags for the given class .
1664	Get all tags that are not used .
1665	Rename tags .
1666	Get the fully qualified name of the tag table .
1667	Get the fully qualified table name for the pivot table .
1668	Saves compound parameter data
1669	Builds the query string .
1670	Get payload for single parameter
1671	Get the payload for POST parameters
1672	Adds an index to a given string .
1673	Gets the debug response from the API .
1674	get the endpoint
1675	Send hit method
1676	Get http client options .
1677	Builds the URL for this request .
1678	Checks for minimum required parameters .
1679	Set the parameters to action .
1680	Set a single parameter for a method
1681	Adds a new item to the collection
1682	Get a parameter value
1683	Extracts the index from method arguments .
1684	Get the full class name of a parameter class .
1685	Make a POST request to Google Analytics
1686	Parse timeout options .
1687	Returns the list of readable items
1688	Add a supported brand
1689	Set year parameter .
1690	Validates credit card parameters .
1691	Get number masked
1692	Gets the first supported brand
1693	Get a track by its pattern .
1694	List first last name .
1695	Set the billing name .
1696	Set shipping name .
1697	Get birthday .
1698	Set the birthday .
1699	Initialize the helper
1700	Sets a request parameter .
1701	Sets the card .
1702	Returns the formatted amount .
1703	Set the Money value .
1704	Set the currency .
1705	Returns the numeric value of the currency .
1706	Returns the decimal places for this currency .
1707	Formats the currency amount .
1708	Replace items .
1709	Validate redirect method
1710	Convert a string to camel case .
1711	Validate the Luhn number .
1712	Gets a valid gateway short name .
1713	Resolve a short gateway name from a short name
1714	Get a fixed query builder .
1715	Returns the correct metadata for a property .
1716	Create a Pager .
1717	Get the parent alias of the query builder .
1718	Adds IPP to collection .
1719	Method to find the correct instance for the given resource .
1720	Authenticate a user
1721	Set the parent application ID .
1722	Set credit card information
1723	Get credit card information
1724	Add a book .
1725	Finds a customer by ID .
1726	Set the signature
1727	Handles 500 errors
1728	Called when a user is logged in
1729	Check if a path is repeatable .
1730	Check if path exists .
1731	Reorder paths in order .
1732	call a function
1733	call static method
1734	Returns the meta data for the given name
1735	Set the Id of the Class Application Id .
1736	Returns an array of BillAddress objects
1737	Set the shipment method ID .
1738	Set the payment method ID .
1739	Generate schema for field
1740	Finds the child node at a given path
1741	Add child node at path
1742	Returns children of given pattern .
1743	Removes an attribute
1744	Returns a XML helper for a given node
1745	Data sanitation and return as array .
1746	helper function .
1747	Convert file to XML resource
1748	Saves the resource to a JSON file .
1749	Cast truncate value .
1750	Decode UTF - 8 .
1751	Parse a DSN .
1752	Extracts requestID from XML
1753	Parses request ID and action .
1754	Check CIDR
1755	Create a user account .
1756	Disable given user .
1757	Generates a unique hash
1758	Checks if the given user has a specific quickBooks ID
1759	Static constructor .
1760	Static constructor .
1761	Lists the available book objects .
1762	Lists all available books .
1763	Escape a string
1764	Create the config instance .
1765	Short description of method qwc
1766	Add a customer request to the database .
1767	add a customer response
1768	Catch all errors in a response
1769	Calls queue for one user
1770	Enqueue a script
1771	Recurisqueue a user
1772	Add an entry to the queue left
1773	calls queue report
1774	Called when a ticket is processed
1775	Log an error
1776	Get the last error in the ticket
1777	Calls authentication method
1778	Calls the authentication check method for the ticket .
1779	Triggers the authentication process .
1780	Create auth .
1781	Initialize the hook .
1782	Called when the hook is initialized
1783	Logs a message .
1784	call a hook
1785	Connect an OAuth .
1786	Setup default options .
1787	Handle recurring events
1788	Extract identifiers from XML
1789	Extracts the status code from the XML document
1790	Extracts the status message from the XML
1791	call mapped function
1792	call a hook
1793	Handle an error
1794	Adds a queue to the queue
1795	Return the instance with the specified name .
1796	Check if string starts with another string
1797	Query the database .
1798	Extract the content of a tag .
1799	Extract attributes from a tag
1800	Encode a string
1801	Decodes an XML string .
1802	Check the username .
1803	Load OAuth .
1804	Handle the OAuth access token .
1805	Get the menu for the app .
1806	Map an XML Schema to a SQL Definition
1807	Transforms the given AST node into SQL .
1808	Set an item in the collection .
1809	Get an object s value .
1810	Sets the name type .
1811	Set a boolean type .
1812	Set a date type
1813	Get the datetime type for a given key .
1814	Removes an object from the collection
1815	Get schema object
1816	XML representation of this object .
1817	Checks if a book is available
1818	Add a product
1819	Get person name
1820	Sets the user name as first name .
1821	Returns an array of default configuration options .
1822	Check the status of the driver
1823	Delete a book .
1824	Reads a string .
1825	Loads an XML or XML file
1826	Parses an XML string .
1827	Provide as aQBXML document .
1828	Throw exception if not found
1829	Resolve a ticket
1830	Used to write the Quickbooks config
1831	Read config data
1832	Create auth record .
1833	Gets the default username
1834	Login a user
1835	Check if the ticket is valid
1836	Generate an error log
1837	Enqueue a script
1838	Recursively dequeue quick_extur
1839	Queues an enqueue for a specific queue .
1840	Queue Quickbooks processing for a given user
1841	Get the left of a book
1842	Check if ticket was processed
1843	Log a message in the queue .
1844	Executes a SQL query .
1845	Return list of fields in a table
1846	Select rows from a table
1847	Updates an object in the database
1848	Enqueues interactive items .
1849	Run a recurring queue
1850	Returns the size of the current queue
1851	Returns the address of the message
1852	Authenticate a user
1853	Returns the source by ID .
1854	Delete a credit card .
1855	Request a remote package .
1856	Signs on the server .
1857	Generate a unique transaction ID .
1858	Refund a card
1859	Initialize the web driver .
1860	DbAdapter factory .
1861	Returns an array with default values
1862	Set request headers
1863	Default action .
1864	Instantiate a request object
1865	Handles raw http request
1866	Process a callback
1867	Performs a charge
1868	Retrieves a charge
1869	Retrieves a debit transaction
1870	Refunds the payment .
1871	Stores a credit card .
1872	Store a credit card from a token
1873	Get a credit card
1874	Returns a list of Credit Cards
1875	delete a card
1876	Handle an error
1877	Perform an HTTP request .
1878	map the id of the QuickBooks to the format
1879	map the callback function to the application id
1880	Performs the actual add request .
1881	Filter actions by priority
1882	Checks if the required version is required .
1883	Retrieves the list of deleted queries
1884	ListDeletes a list - deleted query response
1885	This method is used to send a request to the txnoid server .
1886	Response for printing void
1887	Requests a new sales receipt request
1888	Add request to Quickbook API
1889	Build filter string
1890	Flushes all cache for a group .
1891	Flushes the cache by tags .
1892	Find a command
1893	Runs the plugin .
1894	Checks if an extension can be loaded .
1895	Checks if an extension can be loaded .
1896	Load local conf for an extension .
1897	Load extensions tables for extension .
1898	Ensure that the TYPO3 installation is possible .
1899	Execute all scheduled tasks .
1900	Executes a single task .
1901	Performs a migrations on the given statements .
1902	Locks the backend for editing editors .
1903	Unlock the backend for editing editors .
1904	Create an admin - command .
1905	List all installed wizards
1906	Generate package states .
1907	Fix the folder structure
1908	Setup extension setup if possible .
1909	Execute an action with the supplied arguments .
1910	Create a new command instance from the composer command line arguments .
1911	Create a command runner from the command line .
1912	Creates a PHPC3 command with the given path .
1913	executes given command
1914	Handle an exception .
1915	Create upgrade wizard .
1916	Wraps a string to a given number of words .
1917	Process a request
1918	Makes absolute url .
1919	Check extension constraints
1920	List all wizards
1921	Advanced wizard
1922	All upgrades
1923	Process an upgrade command
1924	Check if the given extension is compatible with an extension .
1925	Setup package extensions .
1926	Get the structure .
1927	Get the extension structure for a package
1928	Create the structure definition .
1929	Generate the XML for a class name .
1930	Add attributes to the given XML element
1931	adds documentation node
1932	Resolve the command method name .
1933	Maps the request arguments to the controller arguments
1934	Calls the specified command method .
1935	Creates a default logger
1936	Gets the short description .
1937	Parse controller s definition
1938	Get the synopsis .
1939	Removes all occurrences of the specified step from this sequence .
1940	Invokes the registered steps .
1941	Invokes a step .
1942	Setup the extensions .
1943	Setup the active packages .
1944	Remove the currently active command
1945	List all available packages
1946	Force cache tables .
1947	Handles an error
1948	Registers the autoloader script .
1949	Asks user a select question
1950	Asks a question to the user
1951	Asks a confirmation to the user .
1952	Asks a question to hidden response .
1953	Asks for a value and validates it
1954	Asks a question and validates the response
1955	Execute Descriptor .
1956	Write a log record
1957	Get the number of performed update types .
1958	Add the performed updates .
1959	Add errors from a schema update .
1960	Remove a path .
1961	Show a configuration path
1962	Show an active configuration item
1963	Show a local configuration
1964	Set a value in a local configuration
1965	After install is successful .
1966	Add a flash message to the queue .
1967	Safely copy a file to another path
1968	Generate the XSD schema
1969	Initializes the package management
1970	Override the implementation of a class
1971	Register service definition implementation
1972	Set Local Configuration Value
1973	Converts value to target type .
1974	Returns the type of the given path
1975	Returns true if the target type can be converted .
1976	Checks if a Command is available .
1977	Configure the command definition
1978	Execute the command
1979	Ensure that the environment is required .
1980	Initialize the compatibility layer
1981	Handles the command
1982	Renders an exception .
1983	Prints an exception .
1984	Output the exception trace .
1985	Returns a shortened file name based on the current environment
1986	Displays an error page
1987	Import mysql connection
1988	Execute a command in subprocess .
1989	Render schema result .
1990	Render the results of the imported static file .
1991	Performs a single schema update .
1992	Build a sequence .
1993	Builds the essential sequence .
1994	Builds a standard runtime sequence .
1995	Flushes all cache for groups
1996	Flushes all cache by tags
1997	List available groups
1998	Hydrate values .
1999	Do the trace .
2000	Returns number of files in given regex .
2001	Convert data to JSON
2002	Get the description of the transaction
2003	Get token .
2004	Checks if token has expired
2005	Set the start time of the period .
2006	Set the end time .
2007	Get all issues .
2008	Runs the scan
2009	Normalize and truncate a file path .
2010	Exit with an error .
2011	Map by comma .
2012	Trim spaces from an array of tokens .
2013	Call a function usageer
2014	Add a new record
2015	Check if colors are capable of user
2016	Get terminal terminal size .
2017	Attempt to autoload an identifier .
2018	Locates a file based on class name
2019	Locate a function by its name
2020	Opens a stream .
2021	Method to retrieve information about a file .
2022	Compile a constant fetch .
2023	Compiles a class constant fetch from a node .
2024	Returns the list of registered ReflectionClasses .
2025	Checks whether given line contains given value .
2026	Returns all class names .
2027	Create a property from a class name
2028	Create a ReflectionClass from an instance
2029	Returns an array of string types of strings .
2030	Returns an array with all the Reflections of a given Type .
2031	Finds the identifier for an array of identifiers .
2032	Create a method from a class name and method name .
2033	Create a class instance from a method instance .
2034	Create a parameter from a closure .
2035	Checks if the current node allows NULL value .
2036	Gets the type of this object .
2037	Sets the parameter type .
2038	Get all functions .
2039	Create a method from a class name
2040	Create a method from an instance
2041	Returns the prototype of the method
2042	Check if the name is a constructor .
2043	Export a class to a string
2044	Create a new class from a reflected node .
2045	Returns a list of all methods .
2046	Get a list of methods .
2047	Has method .
2048	Returns a constant value
2049	Get the constructor of a method .
2050	Return the properties of the reflected class .
2051	Gets the parent class .
2052	Returns all parent class names .
2053	Return an array of traits used by traits .
2054	Reflect the class for the named node
2055	Returns whether the given object is an instance of a class .
2056	Checks if the specified class is subclass of the specified class
2057	Determine if the given interface implements the given interface .
2058	Is instantiable .
2059	Is this object cloneable?
2060	Returns the interfaces hierarchy
2061	Sets the value of a static property .
2062	Sets the final value of class node .
2063	Removes a method
2064	Adds a method to the collection .
2065	Adds a new property .
2066	Removes a property .
2067	Checks if the specified reflection class is matching .
2068	Export the specified instance as a string .
2069	Create a new reflection instance from an object .
2070	Returns the runtime properties .
2071	Create a property node from reflection .
2072	Populates the properties of the function .
2073	Set optional optional flag .
2074	Returns the number of required parameters .
2075	Gets the parameters from the reflection class .
2076	Returns the parameter with the given name
2077	Returns true if the parameters are variadic .
2078	Sets the return type .
2079	Returns body code .
2080	Get the return statements .
2081	Locates all identifiers by type .
2082	Creates new reflection from given node
2083	Returns the current value .
2084	Get column modifiers
2085	Generate document annotations
2086	Formats the documentation .
2087	Extracts properties from the graphs .
2088	Extracts the correct name for a property .
2089	Checks if a type is an ENUM
2090	Map the GraphQL types to properties
2091	Converts a namespace to a directory .
2092	Fixes all files in the given array .
2093	Check if a property exists .
2094	Extracts cardinality .
2095	Get the URL for a property .
2096	Returns the PHP type for a field .
2097	Get relation name .
2098	Finishes the writing of the file .
2099	Writes data to file .
2100	Adds a new item to the list .
2101	Adds single language item .
2102	Add a multi language item .
2103	Get all of the URLs of the sitemap .
2104	Set the sitemap value
2105	Add a sitemap to the sitemap .
2106	Writes the given data to the file .
2107	Finish the log
2108	Copies the uploaded file to the destination .
2109	Set Expiration Date
2110	Sets the key parameters .
2111	Sets the sub - key parameters of a sub - key .
2112	Returns the raw usage string
2113	Get a userId
2114	Parses a Crypt_UserID string
2115	Checks if the process is running .
2116	Terminate the process
2117	Sets the operation
2118	Handles a line of errors
2119	Set the error code .
2120	Setter for data .
2121	Handles bad pass exception
2122	Parse a pin key
2123	Gets the hash algorithm name .
2124	Sets the value of sign .
2125	Sets the size of the file to encrypt
2126	Creates a Crypt_GPG_SubKey object from a string
2127	Parse a string to a timestamp
2128	Deletes public key
2129	Get the fingerprint of a key
2130	Encrypts data
2131	Encrypt a file
2132	Encrypt and sign data
2133	Encrypt and sign a file
2134	Decrypt and verify the given data
2135	Decrypt and verify a file
2136	Sign a file .
2137	Add a decrypt key
2138	Add an encrypt key
2139	Add a key to the sign array
2140	Add a key to the given array
2141	Import a key
2142	Export key data
2143	Decrypt and verify
2144	Get input from file or directory
2145	Prepares an output file for writing
2146	Get keys .
2147	Send a command to the printer .
2148	Reset the internal state
2149	Runs the CryptOperation
2150	Set operation .
2151	Set pins data
2152	Gets the version of the GnuPG .
2153	Gets the data of a process
2154	Sets a new data value for the current request .
2155	Close subprocess
2156	Closes agent launch process
2157	Close a pipe .
2158	Close Gpg agents .
2159	Find the path to a binary .
2160	Returns the path to the pin entry
2161	Print debug info
2162	Get primary key
2163	Return true if all subkeys passed .
2164	Returns true if all subkeys can be encrypted .
2165	Set log filename
2166	Log the given data .
2167	Establish connection to the peer
2168	Parse a single command line
2169	Initialize the pins from ENV .
2170	Disconnect from server
2171	Set the description of a text
2172	Get the current pin .
2173	Send get info to user
2174	Get data as string
2175	Wrap a string of data with a given prefix
2176	Send data to stdout
2177	Builds the messages from a translation .
2178	Sets the comment before the headers .
2179	Add one or more lines to the data .
2180	Get theme data .
2181	Extract strings from po file
2182	Get the comment for the file
2183	Set default headers .
2184	Retrieve file data
2185	Gets file headers from a string
2186	Resolve callee
2187	Does the comment precedes?
2188	Calculates the match score for a file .
2189	Does the given directory contain the matching children?
2190	Get files from a directory .
2191	Make a JSON file containing translations .
2192	Generate json files .
2193	Remove JS strings from a PO file
2194	Mark a list of updates as successful .
2195	Marks all available updates .
2196	Set successful by hook .
2197	Process the update list points
2198	Checks all available list points .
2199	Save progress .
2200	Render the dropdown screen
2201	Generates a hash from the database configuration .
2202	Compares this config with another .
2203	Imports a configuration .
2204	Import configs .
2205	Install given modules
2206	Check link activation .
2207	Check if link is active
2208	Redirect to the home page with the given message .
2209	Get Subfile .
2210	Returns the items from the given columns .
2211	Returns the total count of results
2212	Prepare a string for like comparison
2213	Set the form s data
2214	Resolve grid type .
2215	Resolve options .
2216	Renders a single grid .
2217	Get grid cell .
2218	Get the grid filter .
2219	Render grid column operator .
2220	Check if template has block .
2221	Walks down a SelectStatement AST node and generates the corresponding SQL .
2222	Sets the source .
2223	Checks if the document is ready for sending
2224	Process request data
2225	Processes the mass actions
2226	Processes all data for export
2227	Process filters .
2228	Process session data
2229	Prepares the object
2230	Set session data
2231	Get a column by its id .
2232	Check if column with given id exists .
2233	Set the columns order .
2234	Adds a mass action
2235	Add a tweak
2236	Retrieves a list of tweaks
2237	Retrieves a specific tweak
2238	Get a changeset group
2239	Adds a row action .
2240	Set Twig template .
2241	Adds an export to the resource
2242	Retrieve the route .
2243	Set filters .
2244	Set the API limits .
2245	Get page count
2246	Set maxResults .
2247	Returns whether the title section is visible .
2248	Checks if filter section is visible .
2249	Returns true if the pager section is visible .
2250	Shows list of column ids .
2251	Hide columns .
2252	Return a response for a grid .
2253	Returns raw data .
2254	Get the filters from the session
2255	Retrieve a filter from the session
2256	Checks if the column exists
2257	Create a new query builder instance .
2258	Renders a cell .
2259	Check if the object is visible
2260	Sets the sorting order .
2261	Set column size
2262	Set the form data .
2263	Getter for data .
2264	Set the alignment .
2265	Returns all registered operators .
2266	Adds a new column .
2267	Set the order of columns .
2268	Add routeParameters .
2269	Returns the route parameters for the given name .
2270	Render the row .
2271	Adds a new GridType .
2272	Add column .
2273	Sets container .
2274	Returns a PSR - 7 compatible response object .
2275	Get grid data
2276	Get the flat data
2277	Sets the template to use
2278	Gets a parameter .
2279	Returns a list of actions to render
2280	Remove all items from storage .
2281	Add an element to the cart .
2282	Remove item from collection
2283	Return all items
2284	Execute OpenID profile login .
2285	Get User Info
2286	Set or get user name
2287	Login callback .
2288	Return length of string
2289	Slice a string
2290	Converts a string to lower case .
2291	Converts a string to upper case .
2292	Get a function mock .
2293	Registers listener for deactivating .
2294	Defines a function mock .
2295	Render language flag .
2296	Get country code
2297	Returns the current language code
2298	Get long code
2299	Get current language name .
2300	Set locale .
2301	Redirects to the home page .
2302	Redirects the browser to the previous URL .
2303	Sets the application locale .
2304	Find elements that match the given callable .
2305	Removes the element at the given index .
2306	Take elements before the given callable
2307	Set authentication .
2308	Sets the oauth token
2309	Send a message
2310	Connect to the SMTP server
2311	Starts a new TLS session .
2312	Login to the server
2313	Get OAuth bearer token .
2314	auth2 .
2315	Register RTC to addresses
2316	Prepare data .
2317	Method to quit .
2318	Reads the response code from the SMTP server .
2319	Sets the from name and email .
2320	Set the fake from name and email address .
2321	Finds a file by class name .
2322	Finds a file by class name .
2323	Load a collection of classes
2324	Fix namespace declaration
2325	Write cache file
2326	Get ordered classes
2327	Adds an array of prefixes .
2328	Registers a set of classes .
2329	Finds a file by class name .
2330	Parse text .
2331	Detect the next line type
2332	Parse a block .
2333	Get inline markers .
2334	Prepare inline markers for text .
2335	Parse inline tags
2336	Parses a plain strong text .
2337	Determines if the current line is a HTML element .
2338	Consume HTML .
2339	Determines if a line contains a FETCH code .
2340	Determine the heading from the line .
2341	Consume headline .
2342	Replace all escaped characters in the given text
2343	Parse a Markdown link
2344	Parse an image
2345	Extract inline code from text .
2346	Consume Code .
2347	Determines if a line is on a specific line .
2348	Render a list block
2349	Consume lines for a quote
2350	Consume a reference
2351	Renders the headline element .
2352	Parses a markdown string .
2353	Determine if the current table is a valid table name .
2354	Consume lines for a table
2355	Render a table
2356	Parse a markdown URL .
2357	Compares this subject with another name .
2358	Create element .
2359	Create an element with the given text .
2360	Validate images .
2361	Check for empty value
2362	Check for illegal csv property keys .
2363	Create exporter .
2364	Add a value to a usergroup
2365	Validate the document with schema .
2366	Adds a name to this group .
2367	Add a summary .
2368	Add a description .
2369	Add a price to this item
2370	Add a bonus .
2371	Set the sales frequency .
2372	sets the dateAdded value
2373	Add a sort value .
2374	Validate header value
2375	Get the contents of a hook .
2376	Add a new hook .
2377	Set a hook .
2378	Removes a hook .
2379	Count the commits .
2380	Get reference bag .
2381	Returns a Commit object for the given hash .
2382	Gets tree by hash .
2383	Get Blob object
2384	Retrieve a log entry .
2385	Get the size of the repository
2386	Execute a shell command .
2387	Get the description file .
2388	Run a command .
2389	Clones the application
2390	Get all parents of this commit .
2391	Get short message
2392	Get a list of branches that exist in the repository .
2393	Initialize a repository
2394	Check if a remote repository is valid .
2395	Clone a file or directory
2396	Clone a branch to a branch .
2397	Clone a repository
2398	Get the list of lines grouped by commit
2399	Returns the lines of the file .
2400	Retrieve a reference
2401	Returns all registered branches .
2402	Get local branches
2403	Get a list of remote branches .
2404	Returns the file s content .
2405	Get the MIME type of the file .
2406	Return diff as array
2407	Parse text .
2408	Write the formatted query
2409	Write the column name .
2410	Create columns .
2411	Create a column object .
2412	Create a new table
2413	Returns the sql string
2414	Boot the cacheable trait for the model .
2415	Store the cache key for a given model name .
2416	Get cache keys .
2417	Flushes the cache keys for the given model .
2418	Forget the cache .
2419	Reset cache config .
2420	Generate a unique cache key .
2421	Create cache query .
2422	Validate an HppRequest .
2423	Validate Hpp Response
2424	Add autoSettle flag
2425	Add return CSS .
2426	Adds a validateCard only flag .
2427	Add dcc enable
2428	Add a card storage enable
2429	Set offer save card
2430	Add a new payer exists
2431	Set the Hpp version
2432	Generate default values
2433	Encode Card object .
2434	Decode Base64 .
2435	Encode the token .
2436	Decode the payment data .
2437	Get the rules for the config field .
2438	Unpacks deferred results .
2439	Creates a deferred resolver callback .
2440	Convert cursor to key
2441	Get the offset value from a cursor array .
2442	List all node compiler
2443	Creates request data
2444	Get all paragraphs from response .
2445	Split text .
2446	Detects the language of a given text
2447	Returns the list of supported languages
2448	Get defaults values
2449	Cache this object .
2450	Get cached row
2451	Check if an offset exists .
2452	Array get .
2453	Array access .
2454	Unset an offset
2455	Gets the foreign key field for the given table
2456	Delete a record from the database .
2457	Finds the class name for the given field name
2458	Sets a configuration parameter .
2459	Returns field factory
2460	Execute a query and return the PDOStatement .
2461	Execute a callable and commit the transaction .
2462	Starts a database transaction
2463	Validate input data .
2464	Check if a value is set
2465	edit method .
2466	Delete a record from the database .
2467	Relate the rows .
2468	Unrelate the fields .
2469	Unrelate all tables .
2470	Select one row from the table .
2471	Get translated value name
2472	A list of arbitrary quota limits .
2473	Set of metric rules .
2474	Destination results for the producer .
2475	Output only . The log destination destinations .
2476	Optional . The advices for the candidate .
2477	List of API endpoints .
2478	The log messages .
2479	The list of metrics .
2480	The violations of the specified field .
2481	A list of operations .
2482	The role to be viewed .
2483	Required . Resource permissions .
2484	The stage of the search .
2485	The destinations that match the request .
2486	The list of file extensions .
2487	The list of authentication providers .
2488	The list of requested resources .
2489	Optional . The collection of types provided by the client .
2490	Set of bounds .
2491	The role to create .
2492	The list of subpages .
2493	The list of key types that match the request .
2494	A list of recipients .
2495	Output only . The stack entries .
2496	Output only . The destination destinations of the producer .
2497	The destination destinations of the report .
2498	A list of requirements .
2499	A list of bounding bindings .
2500	Metric costs .
2501	The page of the request .
2502	The action to be executed .
2503	The source files .
2504	The service account keys .
2505	The service accounts .
2506	Supported roles support .
2507	A policy delta .
2508	List ofemplars .
2509	The list of supported features .
2510	A list of properties that match the request .
2511	A set of violations .
2512	The type of private key .
2513	Optional . The service key algorithm .
2514	Optional . The collection of details .
2515	Binding Delta Deltas .
2516	The type of public key .
2517	The list of roles .
2518	Parameters .
2519	Get cache file
2520	Check the conditions for the cache file .
2521	Checks if the cache file exists .
2522	Set the cache file .
2523	Get cache file
2524	Get or create a file
2525	Checks if a given blog is installed .
2526	Installs Wordpress .
2527	Converts a multisite installation .
2528	Installs new site tables .
2529	Show Wordpress version .
2530	Get the checksums for the given version and locale .
2531	Update WordPress database .
2532	Get download url .
2533	Get updates from offer .
2534	Pre - download package
2535	Upgrades the current iteration to the new one .
2536	Build html table
2537	Add the admin head
2538	Move the meta box after the title .
2539	Get the post type
2540	Get the title .
2541	Render meta box .
2542	Setup the metabox .
2543	Get meta data .
2544	Setup class properties
2545	Setup meta data .
2546	Check if module is disabled .
2547	Create a new instance of the class .
2548	Get a child property .
2549	Get an option value
2550	Get the post ID .
2551	Generate an HTML ID
2552	Generate an HTML name .
2553	Check if the given slug matches the given slug .
2554	Prepare the value .
2555	Is this field allowed by the given rules .
2556	Set a single option
2557	Set a single setting
2558	Setup the options .
2559	Setup plugin options .
2560	Setup options slug .
2561	Setup options .
2562	Edit attachment fields .
2563	Save attachment meta .
2564	Check if this post type is a singleton .
2565	Get property meta value
2566	format a value
2567	Get a property .
2568	Load the value for the given slug .
2569	Factory method to create a new page object
2570	Retrieve a property option
2571	Returns true if the current user can render the page .
2572	Renders the grid
2573	Render hidden html
2574	Render the HTML for the label .
2575	Render the row html .
2576	Render the rules json .
2577	Get the value for this field .
2578	Decode a property .
2579	Get post data
2580	Get pre deep keys value
2581	Prepare post data
2582	Prepare properties data .
2583	Santize the given data
2584	Deletes an item from the cache
2585	Get the function .
2586	Get a value by its slug
2587	Update an item in the cache
2588	Clear cache .
2589	Get diff between two posts
2590	Display hidden meta box
2591	Loads a new post .
2592	Returns a redirect location
2593	Setup menu items .
2594	Renames a meta .
2595	Get slug of this field .
2596	Return the resource .
2597	Setup the source .
2598	Setup the object
2599	Setup the admin entry
2600	Generate the body classes
2601	Edit the form after title .
2602	Gets the ID of the entry type .
2603	Add plugin row meta .
2604	Update the front - page
2605	WP link query .
2606	Returns the list of templates for the given ID .
2607	Prepares a property value .
2608	Save meta properties
2609	Meta data for metabox .
2610	Save a post
2611	Overwrite post data .
2612	Prepare metadata before saving .
2613	Save meta box
2614	Save a revision
2615	Save api properties
2616	Restore a post revision
2617	Validate a post ID
2618	Display record by given rules .
2619	Display data by relation .
2620	Get the slug of the page .
2621	Prepare the rules .
2622	Check if the current user is allowed .
2623	Answers the body classes for the page .
2624	Get the child type of the page
2625	Get the labels for the widget .
2626	Get the supported post type supports .
2627	Remove support for a post type .
2628	Remove meta boxes from the post .
2629	Setup widget settings .
2630	Setup the post types
2631	Setup page templates .
2632	Add mce buttons to the mce button
2633	Remove mce buttons .
2634	Get row results
2635	Load a single value .
2636	Prepare properties .
2637	Prepare a property for JSON conversion .
2638	Remove repeater rows .
2639	Render the JSON template .
2640	Renders the table header .
2641	Render repeater rows .
2642	Register custom entry types
2643	Get a setting
2644	Prepare the response .
2645	Get the current user value
2646	Returns an array of enabled capabilities
2647	Initialise the plugin .
2648	Load the textdomain .
2649	Require files .
2650	Deactivate plugin .
2651	Returns true if all items are string .
2652	Prepare properties .
2653	Returns the file s data
2654	Get the file_meta value .
2655	Update a single file value .
2656	Binds a value to the container .
2657	Call closure .
2658	Get the class prefix .
2659	Checks if the given id is a singleton .
2660	Only fetch once .
2661	Removes an entry from the container .
2662	Override labels .
2663	Add page - menu
2664	Get post types menu
2665	Return the current admin view
2666	Class autoloader .
2667	Get registered sidebar items
2668	Get post type labels .
2669	Parse arguments .
2670	Parse post type args
2671	Parses term arguments .
2672	Get meta query arguments .
2673	Get the query result .
2674	Add help tabs
2675	Load box .
2676	Call parent class .
2677	Convert the properties .
2678	Returns an array of body classes
2679	Get the box objects
2680	Get the property .
2681	Return list of properties
2682	Merges the given boxes .
2683	Register the metabox .
2684	Create tab tabs
2685	Load value for a meta field .
2686	Prepare an array of links
2687	Update value for a single post .
2688	Is this taxonomy allowed?
2689	Generate the HTML for the edit form
2690	Get the post type
2691	Prepare the api response .
2692	Register post type fields .
2693	Get format arguments .
2694	Render a file if exists
2695	Get an option by key
2696	Convert a property value
2697	Get the converted value .
2698	Gets the raw value of a field .
2699	Gets the value for the given rule .
2700	Checks if the rules are equal .
2701	Checks if a rule is not equal to another .
2702	Compares the rule with the given rule
2703	Is a rule not in?
2704	Is the value like a rule?
2705	Get the between values .
2706	Checks if a rule is between two values
2707	Is the given rule not between values?
2708	Get sort option .
2709	Get an array of default sort options .
2710	Returns the settings items .
2711	Sort value .
2712	Get the value of a single post .
2713	Get the meta type value .
2714	Lists the available blog entry types .
2715	Render the HTML .
2716	Get the JSON ID .
2717	Get layout by slug .
2718	Load a value
2719	Prepare properties .
2720	Render the layout input .
2721	Render repeater rows .
2722	Display the form fields
2723	Get a list of taxonomy types .
2724	Setup taxonomy hooks .
2725	Returns ajax url
2726	Handle ajax requests
2727	Get entry type .
2728	Get all posts .
2729	Get ajax property .
2730	Get the post properties
2731	Get the results from the API .
2732	Get shortcode
2733	Gets information about terms
2734	Gets meta properties .
2735	Renames a term .
2736	Manage post type post columns .
2737	Check custom post type for custom column post types .
2738	Manage sortable columns .
2739	Pre - fetching all posts
2740	Restrict access to the post types
2741	Format the value .
2742	Get the labels .
2743	Get terms .
2744	Get the term meta value .
2745	Prepare value before saving
2746	Search for a search term
2747	Get historical data .
2748	Get quote for given symbol
2749	Returns the exchange rate for two currencies .
2750	Returns the exchange rates for the given currencies .
2751	Fetch quotes from the database
2752	Answers an array of HTML attributes for the header .
2753	Render a single row
2754	Renders the given content as append .
2755	Get all images
2756	Field with query
2757	Set default values .
2758	Return the value of the given parameter .
2759	Make a group .
2760	Wrap content with error group
2761	Wraps a form group with bootstrap div .
2762	Add class to options
2763	Register the admin routes .
2764	Register the assets routes .
2765	Register auth routes .
2766	Adds a testcase to the graph .
2767	Returns registered processes .
2768	Creates tree with delay vertices
2769	Optimize the ordered order .
2770	Counts process statuses .
2771	Count the number of finished processes .
2772	Returns all the process descendants for the given class name .
2773	Returns a dependency tree for the given class name .
2774	Outputs the given information to the output buffer .
2775	Outputs an error .
2776	Initialize the console .
2777	Get the version .
2778	Returns the file URL .
2779	Download file .
2780	Selects the partial via HTML5 .
2781	Saves data to a legacy file .
2782	Save data into cache .
2783	Loads a legacy object
2784	Loads a Legacy from disk .
2785	Returns whether the connection is accessible .
2786	Determine if the server is Selenium server .
2787	Get the cloud service instance .
2788	Guess the port from the given host .
2789	Detects cloud service by its status .
2790	Build the process
2791	Get excluded groups
2792	Take a screenshot of a test case .
2793	Get snapshot url .
2794	Instantiates an event dispatcher .
2795	Returns file path .
2796	Quotes the value of an XPath attribute .
2797	Optimizing tree max distance
2798	Cast a value to a guess if it s a fake data type .
2799	Checks if the process has timed out .
2800	Resolve result .
2801	Get the list of executors from the testcase
2802	Setup application capabilities .
2803	Sets custom configuration options .
2804	Retrieve configuration values .
2805	Dequeue all queued processes .
2806	Flushes the output of the process .
2807	Return favorite models .
2808	Count a summary of tests .
2809	Update summary table
2810	Move summary table to container
2811	Updates the wizard buttons .
2812	Adds a favorite .
2813	Remove a user from the list of favorites .
2814	Toggle favorite .
2815	Check if user is favorite .
2816	Return a list of favorites .
2817	Get permissions .
2818	Insert into language files
2819	Create view files .
2820	Create a migration
2821	Create the events manager
2822	Generate a stub file .
2823	Get package stub path .
2824	Check namespace .
2825	Check table exists
2826	Connects to one random Redis server .
2827	Connects to all configured Redis servers .
2828	Connects one Redis instance to one server
2829	On one key server .
2830	Calls a Redis command .
2831	Sets the current database connection
2832	Delete one or more keys
2833	Setter for key
2834	Checks if a key exists
2835	Set type of redis key
2836	Set key expiry time
2837	Removes all expired keys .
2838	Executes a list of all registered commands
2839	Retrieve the database size
2840	Add keys to exec list .
2841	Dispatch an event .
2842	Add the timing value to the node .
2843	Replace config placeholder .
2844	Merges the tags of an event .
2845	Dispatches StatsD event to StatsD
2846	Dispatch request time .
2847	Create a new Event from a ConsoleEvent .
2848	Parse SRID value
2849	Parse the geometry .
2850	Compute current point value
2851	Match value against current position
2852	Parse points list
2853	Parse point lists
2854	Parse polygon .
2855	Generate a collection of geometry objects .
2856	Matches the next token with the given token .
2857	Return a syntax error exception .
2858	Converts the returned parts into an array .
2859	Get request time
2860	Creates the API client .
2861	Send a command to Communibase
2862	Get the redirect url
2863	Check render options
2864	Render a given path .
2865	Render image as base64
2866	Find all pages matching the given selector .
2867	Find a element with the given method and selector .
2868	Set the attribute of an element
2869	Create a new key event .
2870	Use a select option
2871	Sets the debugger to use .
2872	Method to set the proxy
2873	Network Traffic
2874	List cookies .
2875	Sets a cookie
2876	Returns an array of javascript errors
2877	Print a message indicating that the script has been raised .
2878	compile route node
2879	Builds RouteVariable node from AST node .
2880	Creates Trie node .
2881	Flushes text - buffer to given token .
2882	Lexes a number token .
2883	Lexes a punctuation .
2884	Lexes quoted string .
2885	Read a text character from the buffer .
2886	Lexes a variable name .
2887	Adds a route to the collection .
2888	Get named route
2889	Creates a trie node .
2890	Normalize header name .
2891	Expects a token for a given type and value .
2892	Returns the current token .
2893	Gets next token .
2894	If the current token type matches the given value
2895	Peeks ahead .
2896	Add child node
2897	Add a new child node .
2898	Returns all literal children .
2899	Add a literal child node
2900	Adds a child node to this node .
2901	Builds all routes .
2902	Create route group
2903	Define a route
2904	Applies all group attributes to the route builder .
2905	Applies the constraints to the route builder .
2906	Apply route middleware bindings .
2907	Applies group route templates
2908	Registers the rule factories
2909	Utility function used to generate RouteCandidates
2910	Builds a route object .
2911	redirect to method
2912	Sets an attribute .
2913	Add multiple attributes at once .
2914	Add many constraints at once .
2915	Add one or more middleware bindings to the queue .
2916	Adds a middleware to the order .
2917	Parses a punctuation node .
2918	Parses text node .
2919	Parses tokens .
2920	Parse a conditional variable .
2921	Parse a variable rule node .
2922	Returns true if the route matches the given segment value .
2923	Group routes .
2924	Map a route to a controller
2925	Dispatches the current route
2926	compare route method .
2927	compare route domain
2928	compare uri with route uri
2929	Run the route through the controller and action .
2930	Arrange method parameters
2931	Replace route uri .
2932	Get regexp parameter .
2933	Add a route for any http method .
2934	Define a route
2935	Generate URL for given route name
2936	Prepares the publisher
2937	Get the uri .
2938	Validate the API response .
2939	Validate Bitly response .
2940	Validate API response .
2941	Returns the provider with the given name .
2942	Handle an incoming request .
2943	Returns IP address details .
2944	Format the details object .
2945	Get request details
2946	Set element in cache .
2947	Manage buffer size
2948	Performs a POST request .
2949	Return HTML code for an exception
2950	Create route group .
2951	Parse path .
2952	Validates a variable route
2953	Removes variable route cache
2954	Set map tree
2955	Get redirect url
2956	Check the current set of middleware .
2957	Do a dispatch
2958	Initialize the connection
2959	Validate HTTP headers
2960	Retrieve a specific header from the response
2961	get last inserted id
2962	Get DI params
2963	register a singleton instance
2964	Return the singleton instance for a specific singleton .
2965	Register the abstract class .
2966	Get instance of class
2967	Get singleton instance
2968	Calls a method on a class
2969	Run middleware chain
2970	init the redis instance
2971	Add a pipe to the export .
2972	Initialize redis client
2973	Subscribe to a channel .
2974	Subscribe to a list of channels .
2975	Reset the parameters .
2976	Wrap the prepared statement
2977	Execute the prepared statement
2978	Binds parameters to PDO statement
2979	Wrap the given table
2980	Wrap a row in a table
2981	Handles the condition constructor .
2982	Store the build attributes
2983	Restore build attributes .
2984	Create sub - builder object
2985	Set columns to select
2986	Set the where clause
2987	Set or where clause
2988	Where in
2989	Adds a BETWEEN clause
2990	Adds a WHERE clause to the query
2991	Add WHERE brackets
2992	Where exists
2993	Arma el where in sub - select
2994	Group by expression
2995	Sets the HAVING condition
2996	Add or HAVING condition .
2997	Set the ORDER BY clause
2998	Join a table
2999	Sets the FROM operator .
3000	Paginate the given step .
3001	Execute query and fetch all results
3002	Fetch a single row
3003	Get a list of values by column name
3004	Executes a SQL query .
3005	Prepares a SQL statement
3006	Starts a database transaction .
3007	Default exception handler
3008	Generate a random id .
3009	Create a formated id .
3010	Generate random string
3011	Normalizes a DSN .
3012	Instantiate PDO Query .
3013	Execute an expression using the current connection
3014	Begins a transaction
3015	Commit current transaction
3016	Rolls back a transaction
3017	Returns the last inserted row ID .
3018	Reset custom options .
3019	Retrieve an expression
3020	Escape special characters
3021	Renders the expression .
3022	Returns debug query
3023	Executes the query and returns all results as array .
3024	Retrieves a single row from the result set
3025	Returns the first row of the result set
3026	Sets one or more tables .
3027	Add a regular expression to the query .
3028	Render the condition
3029	Sets the group of arguments .
3030	Set field value .
3031	Add one or more options to the command .
3032	Built an order clause
3033	Set the current query mode .
3034	Add a LIMIT clause to the query .
3035	Parse a variable .
3036	Search string matches
3037	Creates exception message
3038	Check if the string starts with a given line .
3039	Determine if the variable matches the given value .
3040	Returns true if a variable has an expansion .
3041	Fetch a parameter expansion .
3042	Fetch a parameter symbol for a variable .
3043	Split variable default
3044	Parses a single parameter
3045	Get default value of variable .
3046	Has variable .
3047	Get a variable from the context .
3048	Parse key .
3049	Do parse .
3050	Parse the raw content .
3051	Parse single line
3052	Parse raw export line
3053	Parse the raw key value
3054	Gets the content
3055	Start a task .
3056	Start a Workflow .
3057	Finds the workflow
3058	Returns the timestamp or null if not found .
3059	Get class properties .
3060	Configure sitemap .
3061	Fixes the configuration array .
3062	Add a source to a group .
3063	Handle block events .
3064	Retrieve the breadcrumb menu .
3065	Get the available fonts .
3066	Get unicode character map
3067	Gets the CSS for all fonts
3068	Hash a password and encrypt it
3069	Upgrade a password from a version 1 to a new ciphertext .
3070	Main execution method
3071	Writes SMTP credentials .
3072	Get config array
3073	Check if the current Uri is filtered
3074	Register all commands
3075	Find all templates
3076	Find all templates in a bundle
3077	Execute a command .
3078	Returns a new instance between two strings .
3079	Sanitize a string
3080	Replace the first occurence of a string
3081	Replace the last occurrence of a substring in the string .
3082	Get the possessive .
3083	Creates a new segment with the given delimiter
3084	Determine if the given element exists in the array .
3085	Generates the hash
3086	Decrypts the payload .
3087	Encrypt plain text
3088	Decrypts text .
3089	Encrypts the transaction .
3090	Return the decrypted response .
3091	Encrypt the authorization data .
3092	Add range .
3093	Adds a modifier .
3094	Adds a range of pages .
3095	Adds a Raw Source .
3096	Adds a source file to the list of pages .
3097	Add files to the iterator .
3098	Unserialize from a JSON string
3099	Set optional constructor arguments
3100	Thrown when a value is invalid .
3101	Thrown when an exception is thrown .
3102	Unserialize from JSON properties .
3103	Get the configuration directory path .
3104	Get application namespace
3105	Loads the configuration .
3106	Creates a new master node .
3107	Returns the native balance of this image
3108	Returns the native balance popups .
3109	Get the value of a custom asset balance .
3110	Get a custom asset balance .
3111	Returns a custom asset balance for a given asset code .
3112	Get checksum of entropy bytes .
3113	Converts a bit string into hexadecimal representation .
3114	Get entropy from a mnemonic .
3115	Authorize a trust line to a target user
3116	Revoke a trust line .
3117	Convert source account to Xdr .
3118	Encode length of variable .
3119	Is optional?
3120	Returns a list of unique hashes for this bucket .
3121	Checks if an account exists
3122	Sets whether this authentication is required .
3123	Sets the auth revolable flag
3124	Returns the checksum of the public key .
3125	Return opaque fixed string .
3126	Parse raw data
3127	Sign the transaction with the given key pairs
3128	Submits a transaction .
3129	Creates a Patch object from text .
3130	Convert patches to plain text .
3131	Adds the context of a patch .
3132	Deep copy of a list of patches .
3133	Get the bitap score .
3134	Identify alphabet .
3135	Returns HTML to display diff
3136	Convert diff to delta
3137	Returns diff between two strings
3138	Calculate levenshtein value .
3139	Compute diff between two string
3140	Calculate the line mode .
3141	Utility function to split two text .
3142	Returns the common prefix of two strings .
3143	Returns the common suffix of two strings .
3144	Returns the text overlaps between two strings .
3145	Try to match two strings
3146	Match part of i18n
3147	Extract the lines from the given text
3148	Get the recipients .
3149	Get version number .
3150	Register the compiler
3151	Get the config .
3152	Creates the cache object .
3153	Get Pug
3154	Get cache path
3155	Get an option by its name .
3156	Determines whether a file is expired .
3157	Extract path from path
3158	Return the HTTP client .
3159	Get B2 Family
3160	Hashes the given input .
3161	Resolve a view .
3162	Display the given pug file .
3163	Returns an array of extensions
3164	Removes a set of options .
3165	Reset all options to default .
3166	Returns a renderer instance .
3167	Add new filter
3168	Add keyword .
3169	Cache the text in a directory .
3170	Executes the framework .
3171	Get a collection of available methods .
3172	Show available methods
3173	Get the errors for the given record
3174	Returns a list of items
3175	Mark list as duplicates
3176	Finds all duplicates for the given type
3177	Remove empty attributes .
3178	Processes a record and returns the ID
3179	Handle the authorization .
3180	Get elapsed time
3181	Read the responses from Redis .
3182	Creates an argument string from an array of arguments .
3183	Gets the list of arguments and validates them .
3184	Throw an exception if the Redis server is supported .
3185	Registers an SPL autoloader
3186	Unregister the SPL autoloader .
3187	Get the path to the redisa file .
3188	Gets the list of connections that have a specific key .
3189	Get a connection by channel name .
3190	Returns channels by connection
3191	Returns config value by given name
3192	Set a config value
3193	Throws an exception if Redis server is supported
3194	Create Queue Object
3195	Delete a Queue from the queue .
3196	Gets the number of objects in the queue
3197	Sends a message to the queue
3198	Get number of messages from queue
3199	Deletes a message from the queue
3200	Get the total elapsed time of all profiles .
3201	Set the value of a field in the record .
3202	Set the value of a given field .
3203	Increment the value of a field .
3204	Removes a field from the record .
3205	Writes record to Rediska .
3206	Subscribe to a channel
3207	Pubrine message .
3208	Add message to buffer
3209	Throw if Redis server is supported
3210	Catch unserialize notice .
3211	Add to queue
3212	Removes a service from the Queue .
3213	Get Queue Cache
3214	Watch for one or more keys
3215	Unwatch watch .
3216	Add a command to the connection .
3217	Displays a form to create a new Blog post .
3218	Lists all posts of a feed
3219	Creates a new instance of Rediska based on the given configuration .
3220	Add a value to this set
3221	Sets the length of the record by score .
3222	Get rows by score
3223	Remove set by score .
3224	Increment a score
3225	Gets the rows by rank
3226	Removes record by rank .
3227	Get the rank of this record
3228	Performs a union of data and returns the result .
3229	Return a new set containing only the elements that match the given set .
3230	Get the results as an associative array .
3231	Fill record from array
3232	Set field name
3233	Returns a connection by its key name .
3234	Get the connections .
3235	Establishes a connection .
3236	Subscribe a subscription to a channel .
3237	Get the config for a specific alias .
3238	Sets the key distributor to use .
3239	Returns the serializer instance .
3240	Returns a command by name .
3241	Return the lower - case command name not found .
3242	Execute the command
3243	Add a command to the connection .
3244	Write the current command .
3245	Set response callback
3246	Transform multi bulk command
3247	Append a value to this list
3248	Prepends a value to the list
3249	Truncate the list
3250	Set index value
3251	Inserts a new record after the specified value .
3252	Inserts a value before a reference
3253	Inserts a value into the list
3254	Removes a value from the list
3255	Shift the item off the list .
3256	Shift the lock on the list .
3257	Pop the current item from the list .
3258	Removes the timeout from the list
3259	Updates the keys from an array
3260	Loads a transaction
3261	Save item in Redis .
3262	Remove a tag from the cache
3263	Clean the cache
3264	Set Redis Sentinel .
3265	Returns all IDs not matching the given tags .
3266	Retrieves all metadata related to a given record ID
3267	Collect expired tags .
3268	Adds a value to this set .
3269	Remove the given key .
3270	Moves the key in the map
3271	Returns a new set containing only the values that are not in the given set .
3272	Create a new set with the given sets from the current one .
3273	Get the difference between two sets
3274	Get rediska instance
3275	Set rediska value
3276	Set and expire the given number of seconds .
3277	Sets a bit .
3278	Get or set the key value of the object .
3279	Shows the user s followers
3280	Displays a following user .
3281	Follow a user
3282	Moves this object to another database .
3283	Sets the Expire timestamp .
3284	Get rediska value
3285	Set the stream resource
3286	Add one new Rediska
3287	Get all configured options
3288	Create an instance from an array of options .
3289	Performs a single transaction increment operation .
3290	Reset the given subject .
3291	Get bucket name .
3292	Set the multi - increment transaction part
3293	Set the number of keys in the transaction pool .
3294	Creates a new socket connection .
3295	Gets the read buffer .
3296	Reads data from the server
3297	Reads a line from the redis server .
3298	Set the read timeout in seconds .
3299	Get the stream context
3300	Reads data from the socket
3301	Validate nonce .
3302	Bind a queue to an exchange
3303	Ack message .
3304	Nacks message .
3305	Return message properties
3306	Starts daemon .
3307	Close daemon .
3308	Creates a new exception .
3309	Build a queue consumer handler .
3310	Handle sync message .
3311	Returns an instance of the provided connection .
3312	Receives a message
3313	Closes channel .
3314	Consume a message .
3315	Replace the model stub .
3316	Qualify the class name
3317	Process an action .
3318	Create new row .
3319	Create json response .
3320	Edit a resource .
3321	Remove a single record .
3322	Vote for on attribute
3323	Render a document .
3324	Returns a string representation of the current position .
3325	Gets the percentage of user profiles for an app
3326	Closes the socket
3327	Receive a packet
3328	Sends a packet
3329	Receive a packet
3330	Execute rcon command
3331	Serves RCON challenge
3332	Sends a command to the server
3333	Connect to a socket .
3334	Get a list of Server
3335	Fetch data from the interface
3336	Converts Community ID to Steam
3337	Converts a steam ID to a community ID .
3338	Resolve a user s vanity url .
3339	Fetch all the friends .
3340	Get the played games for this user .
3341	Fetches the groups of the user .
3342	Returns the SteamId 64 .
3343	Returns the most recent playtime of the game
3344	Returns the total playtime for the given game .
3345	Fetch the profile data from the server
3346	Rotate current IP address
3347	init rcon socket
3348	Request RPC authentication
3349	Connect to a UDP server .
3350	Creates an instance of an object .
3351	Get cached instance .
3352	Check if this object is cached .
3353	Registers the cache .
3354	Get cache ids .
3355	Instantiate the socket
3356	get rcon auth token
3357	Closes the socket
3358	Receive data from the socket
3359	Returns a PDO Stream .
3360	Send data to the socket
3361	Get all news for an app .
3362	Get all of the classes that have been equipped .
3363	Returns the page count of the current page .
3364	Returns all members in the collection .
3365	Parse the members list page .
3366	Fetch the current page
3367	Gets the item schema .
3368	Fetch existing player items .
3369	Gets all enabled bots
3370	Return all goldenwires .
3371	Set the API key
3372	Send request to Steam API
3373	Send data to the client
3374	Returns an array of player objects
3375	Handle a response for a request type
3376	Updates the ping
3377	Updates all players
3378	add information to a player
3379	Get a leaderboard
3380	Gets all leaderboards for a game
3381	Load game leaderboards .
3382	Gets the game leaderboard for the given steam id .
3383	Get the range of leaderboard entries .
3384	load data from params
3385	Load the data for the given steam id .
3386	Parse the entries of this game leaderboard .
3387	Create a new SteamGame object from the given data
3388	Check that the application is up to date .
3389	Gets the current player count .
3390	Get user stats .
3391	Get the index of work orders .
3392	Store a newly created event .
3393	Show an event
3394	Update the maintenance event .
3395	Remove the specified event from storage .
3396	Display the work order .
3397	Show and edit work order .
3398	Update the WorkOrder .
3399	Returns take item from work order
3400	Add a part to the work order .
3401	Returns the put operation for the job
3402	Put parts into the inventory
3403	Display a single WorkRequest .
3404	Show the form for editing the WorkRequest model .
3405	Update the work request .
3406	Remove the specified WorkRequest from storage .
3407	Scope a query to include a location .
3408	Store a new report .
3409	Show work order form .
3410	Store a new attachment .
3411	Show the attachment .
3412	Display a form to edit an existing attachment .
3413	Update the attachment .
3414	Destroy an attachment
3415	Form template for work order
3416	Answers the icon for the notification type .
3417	Display a listing of Stock Moves .
3418	Shows a specific inventory movement .
3419	Rollback a given Inventory .
3420	Get modified status
3421	Get the revision priority .
3422	Close all available sessions .
3423	Returns true if the user is logged in .
3424	Get the started_at
3425	Get completed at label
3426	Mark the job as complete .
3427	Renders the status table .
3428	Form View Generator for the maintenance status form .
3429	Display a listing of the priorities .
3430	Store a new entry in the queue .
3431	Show the form for editing the priority .
3432	Updates the given priority .
3433	Query scope for stock .
3434	Scope by SKU .
3435	Get current stock .
3436	Get modified metric name
3437	Get operator from string
3438	Sorts a query
3439	Get full path to file .
3440	Display a listing of the work orders .
3441	Register a new Store instance .
3442	Show the form for editing the status .
3443	Update the specified status .
3444	Show the form for creating a new item .
3445	Store new item
3446	Show work order form .
3447	Store a report .
3448	Renders the work order table .
3449	Show table assigned to user
3450	Return the table sessions for the work order
3451	Form View Generator for WorkOrder .
3452	Show comment for form
3453	Handle upload .
3454	Displays an asset table .
3455	Form View Generator for asset .
3456	Generates the inventory table .
3457	Return table stock presenter .
3458	Form template for inventory .
3459	Return menu stock presenter .
3460	Upload an attachment .
3461	Update attachment .
3462	Table of metrics .
3463	Table of revisions .
3464	Upload an image .
3465	Display an image
3466	Update an image .
3467	List the metrics .
3468	Store a metric .
3469	Show the form for editing the specified metric .
3470	List the assets .
3471	Stores a new asset .
3472	Show the form for editing an asset .
3473	Update the asset .
3474	Scope by id .
3475	Return the response .
3476	Devuelve un input
3477	Get the select hierarchy
3478	Renders the options for a view
3479	Boot view composer .
3480	Delete the attachment .
3481	Return the inventory stock index .
3482	Show a form for creating a stock item .
3483	Store a new Inventory .
3484	Display the stock changes .
3485	Display a form to edit an existing stock .
3486	Updates an existing InventoryItem .
3487	Destroys a stock item .
3488	Display an asset .
3489	Show asset form .
3490	Create a new meter .
3491	Display the metric
3492	Show the form for editing the meter .
3493	Update the meter
3494	Remove the meter .
3495	Store a new WorkOrder .
3496	Update a WorkOrder .
3497	Get the formatted time .
3498	Get completed at
3499	List all work orders .
3500	Views the comment form .
3501	Returns the hours in hours .
3502	Get the start date
3503	Get the end date
3504	Get the end time
3505	Get the frequency of the event
3506	Get the frequency of a radio event
3507	Get the number of days in the API
3508	View events .
3509	Store a newly created stock .
3510	Update the stock .
3511	Destroy an item .
3512	Table of the work order
3513	Form View Generator for the work order .
3514	Attempt to authenticate a user .
3515	Handles the authenticated user .
3516	Handle a user logged in .
3517	Delete all deleted movement actions .
3518	Restore restored movement .
3519	Table of work_orders
3520	Form View Generator for managing the maintenance form .
3521	Return the inventory items view .
3522	Creates a form view for take items .
3523	Finds and displays a put request form .
3524	Remove the specified inventory item .
3525	Create a flash message .
3526	Create work order .
3527	Store a newly created work order .
3528	Display a listing of the resource .
3529	Store a newly created event
3530	Show an event
3531	Update the specified resource in storage .
3532	Remove the specified event from storage .
3533	Scope categories .
3534	View form generator .
3535	Upload the manual files .
3536	Show the manual assets
3537	Update an attachment .
3538	Store a work order .
3539	Remove work order .
3540	Store a new WorkRequest
3541	Remove the specified work request .
3542	Liststock orders .
3543	Display form for remove item
3544	Handle a remove request .
3545	Get put item form .
3546	Process a put request .
3547	List all work requests .
3548	Show and edit the work request .
3549	Attempts to update the job .
3550	Show the form for creating a new category .
3551	Store a newly created category in storage .
3552	Show the form for editing the specified category .
3553	Update the category in storage .
3554	Remove the specified resource from storage .
3555	Columns the work order table .
3556	Table of users per work order .
3557	Listen to the deleted model .
3558	Restore stock .
3559	Get the inventory .
3560	Store a new Inventory in storage .
3561	Show the inventory item .
3562	Show the edit item form .
3563	Table of Inventory
3564	Return Table Moves .
3565	Creates a form view for a stock item .
3566	Builds navigation bar navbar .
3567	Generates the table based on the work order
3568	Renders the inventory table .
3569	Get the dashboard navigation parts .
3570	Display a listing of the work orders .
3571	Start the job
3572	Get the end of a WorkOrder .
3573	Get change attribute .
3574	Store a new note .
3575	Display a note .
3576	Update a note .
3577	Remove the specified note .
3578	Get last movement attribute .
3579	Get last movement by attribute .
3580	Get quantity metric .
3581	Buduje opcje uzivatele
3582	List the putAll action for the WorkOrder for the WorkOrder .
3583	Terminate the session .
3584	Table of work requests
3585	Form builder for work requests .
3586	Store a work order
3587	Remove the worker from the work order .
3588	Renders a datalist .
3589	Generates a single placeholder
3590	Get the appendage .
3591	Render component .
3592	Gets component data
3593	Register blade compiler directives .
3594	Opens a model .
3595	Format the label name .
3596	Create a reset button
3597	Generates a submit button .
3598	Get value from request .
3599	Generates an HTML link to an asset .
3600	Create a HTML link .
3601	Protected listing element
3602	Renders tag attributes
3603	Register the html builder class .
3604	Register the FormBuilder instance .
3605	Generates a search input field .
3606	Create a datetime field .
3607	Generates a file input field .
3608	Removes the first line from the xml string .
3609	Loads the language files .
3610	Parses a locale file
3611	Get all patterns that match the given word .
3612	Unify a locale .
3613	Tokenize a string
3614	Run the generator
3615	Sets the options
3616	Add a dictionary to the registry
3617	Gets the hyphenation patterns for each word .
3618	Method to set property filters
3619	Adds a filter to the list .
3620	Sets the list of tokenizers .
3621	Add a tokenizer .
3622	Factory method to create options from file
3623	Gets text pattern
3624	Gets the pattern set
3625	Set the options for the command .
3626	Returns the instance options
3627	Add dictionary .
3628	Adds a filter to the model .
3629	Add tokenizer .
3630	Get all registered tokenizers .
3631	Get all dictionaries
3632	Get list of filters .
3633	Hyphenates the given string .
3634	Get hyphenation pattern .
3635	Returns the pattern for the given token .
3636	Sets the default home path .
3637	Returns the default home path
3638	Set the home path
3639	Creates a new hyphenator instance .
3640	Autoload function
3641	Replace an existing token
3642	Returns the token with the given key .
3643	Returns the merged pattern .
3644	gets filter by key
3645	Filter all tokens
3646	Fetch the access token for the given authorization code
3647	Migrate order .
3648	Migrate Order .
3649	Migrate shipping values .
3650	Migrate order calculation
3651	Iterates over products
3652	Create default page records .
3653	Make a payment
3654	Get the gateway data for the gateway .
3655	Create a payment for the given gateway
3656	Completes the payment .
3657	Checks if an Order is valid
3658	Returns a formatted string for the country name
3659	Sets payment method .
3660	Returns the selected payment method .
3661	Sends a confirmation email to the shop admin
3662	Send admin notification
3663	Sends cancel email .
3664	Builds the purchase URL .
3665	Redirect to the cart page
3666	Shows the current cart .
3667	Debugging function .
3668	convert data to filter
3669	Handles the submitted form
3670	Proceeds the form .
3671	Get the modifier
3672	Return the total price of this item
3673	Calculate the total price for an unit
3674	Get a unique for this model
3675	Creates the object before writing
3676	Retrieve the current product variant .
3677	Gets the address string .
3678	Get the address .
3679	Form for creating a cart
3680	Get value from table
3681	Gets the weight for this order
3682	Get sum of items
3683	Get the subtotal of the collection
3684	Ensure product attributes are set in DB
3685	Set the user s viewer .
3686	Retrieve a product
3687	Setup the fields .
3688	Get variant by attributes
3689	Generates an array of Variations based on the attribute values .
3690	Delete this object from the database
3691	Returns a component by its type .
3692	Get form fields .
3693	Validate data .
3694	Get Data for all components
3695	Sets data for all components
3696	Get the data associated with the given component .
3697	Retrieves the current cart item
3698	Set current cart
3699	Find or make an order
3700	Adds a Buyable to the Buyable .
3701	Remove item from Buyable .
3702	Remove an order item
3703	Adjust the quantity of a Buyable .
3704	Update the quantity of an order item
3705	Find or make a Buyable item .
3706	Gets a Buyable object based on the current order .
3707	Archive cart id
3708	Get the value of an incoming value .
3709	Get price for display
3710	Find an image by it s name
3711	Set the inner content of a record
3712	Return a list of all countries sorted by prefix
3713	Return a single country from the array
3714	Translate country code to name
3715	Return the current cart .
3716	Convert array to values
3717	Get a dropdown field
3718	Get the products list that can be displayed
3719	Returns an array of all child categories of this node .
3720	Gets the product s child categories .
3721	Returns the groups menu .
3722	Return a nested title
3723	The edit form
3724	Print the order
3725	Gets next step
3726	Returns a list of orders
3727	Returns a edit form
3728	Get a subset of the given fields .
3729	Modifies the payment .
3730	Setup the required steps .
3731	Redirect on after init
3732	Compares current step with given name
3733	Compute the position of an action on the given resource
3734	Find a link to the current controller
3735	Returns a paginated list of products .
3736	Trims down cents amount .
3737	Add the default fields for the product page .
3738	Answers an array of options for the category field .
3739	Get options for categories
3740	Get category IDs
3741	Get the price of the selling price .
3742	Get the product image .
3743	Process a submitted payment
3744	Process PayPal payment .
3745	Cancels the order
3746	Get the CCFields .
3747	Adds a session order to the session .
3748	Returns session order ids .
3749	Get order by ID .
3750	Generate the actions form .
3751	Create new member data
3752	Load a member by its unique identifier
3753	After the member is logged in .
3754	Get the orders of the current member
3755	return a hidden field with ajax link
3756	Get existing address fields
3757	Generate the CMS fields
3758	Setup default search context
3759	Returns an array of related components
3760	Returns order total .
3761	Get Order modifier
3762	Return the Average of all authorized items .
3763	Return a link to this order
3764	Check whether or not this payment can be paid
3765	Whether or not this member can be deleted
3766	Determine if this user can view this record .
3767	Get the first full name as a string
3768	Get billing address
3769	Generate a reference for this object .
3770	Generates the cart reference before writing
3771	Before delete callback
3772	Return array with i18n entities
3773	Answers the field used for the template .
3774	Displays the editable items form
3775	Get account link .
3776	Get a link to the order
3777	Read a package .
3778	List installed packages .
3779	Gets the path to a package .
3780	Update packages .
3781	Uninstalls a single package .
3782	Get composer .
3783	Get the list of community packages .
3784	Perform a Composer package index .
3785	Show the list of available packages .
3786	Search for a package name by a short identifier .
3787	Get the list of installed packages .
3788	Get the installed package by name .
3789	Get package name and version .
3790	Get the composer . json file path
3791	Creates the default composer . json file .
3792	Gets the raw git version .
3793	Guess version constraint from tag .
3794	Read composer . json file .
3795	Set the object
3796	Load custom configs
3797	Deletes the queue .
3798	Process the queued jobs
3799	Queue a job .
3800	Copy the job to the Descriptor .
3801	Get next pending job
3802	Check health of a queue .
3803	Check default jobs
3804	Restart a stalled job .
3805	Initialise a job with the given Descriptor .
3806	Check if the time limit has elapsed .
3807	Check if PHP memory usage is too high .
3808	Parse a memory segment
3809	Get job list filter .
3810	Run a queue for jobs .
3811	Processes a job queue .
3812	Queues a new task
3813	Logs the status of a descriptor .
3814	Display list of jobs
3815	Refresh the descriptor .
3816	Start the shutdown process .
3817	Pause the current job
3818	Resume this job .
3819	Activate the operation on the queue
3820	Get the path to the queue .
3821	Cleans up the queue job
3822	Get saved messages .
3823	Get the last saved message .
3824	Get Job type string
3825	Get the values of the type field .
3826	Setup sitemap .
3827	Overrides the parent method
3828	Finishes the job
3829	Executes the queued job
3830	handle the action
3831	Get title .
3832	Sets up the tree .
3833	Process this page
3834	Get the queue to use .
3835	Casts the given ActiveRecord into an array .
3836	Show all maps .
3837	Saves the source map
3838	Write data to shared memory block
3839	Read data from shared memory block
3840	Lists all available sidebars .
3841	List widgets .
3842	Add a new widget .
3843	Update a widget .
3844	Move a widget .
3845	Deactivate one or more widgets .
3846	Delete a widget .
3847	Reset all registered sidebar IDs .
3848	Validate a sidebar ID .
3849	Validate widget .
3850	Get widget data .
3851	Move a widget from one sidebar to another .
3852	Get a widget object by its ID .
3853	Sanitize the widget options .
3854	Get a random integer within a range
3855	Generate a Random String
3856	Encodes the given string
3857	Decodes the given string
3858	Add a generator path .
3859	Removes a generator path .
3860	Get a generator .
3861	Load all defined classes
3862	Show form as array
3863	Get the read - only attribute .
3864	Open a form
3865	Prefixes the collection with the specified prefix .
3866	Get or set the suffix .
3867	Assemble addons .
3868	Add a CSS size .
3869	Scrub values from the session .
3870	Get the client tempF
3871	Retrieves a list of nodes from the session
3872	Returns the properties of a session .
3873	Evaluates the given path .
3874	Write cache keys
3875	Get the webdriver instance .
3876	Returns the aperture data .
3877	Returns the author of the feed .
3878	Returns the message headline
3879	Returns the customer s credit
3880	Returns the source .
3881	Return the job title .
3882	Get ISO language .
3883	Returns the distance of the focus .
3884	Returns the window width
3885	Return the height of the image
3886	Returns the title of the attachment .
3887	Returns the caption
3888	Template variable getter . Returns copyright .
3889	Get keywords .
3890	Return the current camera .
3891	Returns the horizontal resolution of the page .
3892	Returns vertical resolution of the page
3893	Get software .
3894	Returns the vertical length of the attachment .
3895	Returns the creation date .
3896	Current color space
3897	Returns the MIME type of the response .
3898	Returns the size of the uploaded file .
3899	Returns the orientation of the image .
3900	Returns the current GPS value
3901	Extract the GPS coordinate from the given components
3902	Sets the path to the tool file .
3903	Get current tool path
3904	Get a cli command output
3905	Hydrates an array with mutator data .
3906	Extract the GPS coordinates .
3907	Get the mapper .
3908	Get hydrator .
3909	Set hydration options .
3910	Add a required section
3911	Get image data from image file .
3912	Return an instance of the specified type .
3913	Generates a unique prefix for this table .
3914	Normalizes the configuration .
3915	Translate a list
3916	Start a new job
3917	Process the URL to be processed .
3918	Collects all changes to the given context .
3919	Flushes all static urls to the queue to the storage .
3920	Get extension metadata for missing module extensions .
3921	Returns extensions by module .
3922	Get module blocks
3923	Returns module settings
3924	Is metadata supported?
3925	Check if a PHP file exists
3926	Checks module versions
3927	Checks if extensions are extended
3928	Checks if templates are loaded
3929	Checks module settings
3930	Checks module templates
3931	Check module controller
3932	Checks module files
3933	Checks module events
3934	Returns the module ids from the input options .
3935	Returns shop configs .
3936	Returns list of available module ids
3937	Checks if UI is enabled .
3938	Returns module object
3939	Returns module cache .
3940	Returns module installer object .
3941	Fix a module
3942	Clean up extensions .
3943	Add module template files to config
3944	Add module files to config
3945	Sets module events
3946	Add module extensions to config
3947	Adds a module version to the config
3948	Computes the difference between two arrays
3949	Add module settings .
3950	Sets the module controllers for the given module .
3951	Adds extensions to core
3952	Return module list .
3953	Render the template
3954	Mark block as not active
3955	Returns a Http instance .
3956	Get an available HTTP transport object
3957	Returns the http transport configurations .
3958	Set the CA option and value .
3959	Parses the given content and returns a Response object
3960	Check if redirects are allowed .
3961	Method to get an OPTIONS request .
3962	Method to send a HEAD request to the server .
3963	Method to get a TRACE request .
3964	Method to send a PATCH request to the server .
3965	Checks if the given path expression matches the given value .
3966	Get extra parameter value by key
3967	Get the combined filters .
3968	Activates the plugin
3969	Check if the given path matches any of glob expression
3970	Check if a path matches a expression .
3971	Returns the shop source path .
3972	Create the installer for the given package .
3973	Install a package
3974	Updates a package .
3975	Copies the shop source to the target package .
3976	Copies configuration files from shop to target path .
3977	Copies all setup files to shop .
3978	Check if configuration file is not already configured .
3979	Copies files from the package to the installation path .
3980	Get filtered files .
3981	Gets the absolute file path from the package .
3982	Updates a package
3983	Copies a package .
3984	Retrieves the source path from the package path .
3985	Nest a file system
3986	Get the iterator for a flat file list .
3987	Copies a directory to another directory .
3988	Copies a file from one location to another .
3989	Generates the models .
3990	Recursively traverse classes .
3991	Convert to JSON - LD string .
3992	Adds the breadcrumb list .
3993	Render ldap entries
3994	Set HTML by view
3995	Generate the HTML for the page
3996	Resolves given path
3997	Compares the expected values .
3998	Determine if the given array contains the expected values .
3999	Asserts that the given HTTP status code is valid .
4000	Asserts that the content of the given type is valid .
4001	Asserts that a content is a valid JSON response
4002	Assert a JSON API document is valid
4003	Assert a Fetched Document
4004	Asserts that a document is exact .
4005	Asserts that many documents in order .
4006	Asserts that a document has a many - to - many relationship .
4007	Asserts that a document has a many to many .
4008	Asserts that document was created with client ID .
4009	Assert that the content is not empty .
4010	Asserts that exact metadata does not contain data .
4011	Asserts that the exact status of an exact content has a given status .
4012	Asserts that the document has an exact error
4013	Asserts that a document has errors .
4014	Returns the response body .
4015	Sets the type of the given string .
4016	Assert that an exact document is fetched .
4017	Assert that the content has been updated .
4018	Assert that the content is deleted .
4019	Assert that the resource is included .
4020	Assert that the current hash contains the hash .
4021	Assert that the document contains the metadata .
4022	Assert that the current document is exact .
4023	Assert the exact links in the document .
4024	Assert exact errors of the document .
4025	Assert that a document is a resource .
4026	Asserts that an identifier exists in a document .
4027	Assert that the document is exact .
4028	Assert that the document is not exact .
4029	Assert that a list contains only subsets .
4030	Assert that an exact list contains the exact list .
4031	Asserts that list of URLs are in a list .
4032	Assert that exact list is in order .
4033	Asserts that a list of identifiers matches a list of identifiers .
4034	Asserts that list of identifiers in a document are in order .
4035	Assert that list contains a resource .
4036	Asserts that a list contains hashes .
4037	Asserts that the list contains an exact list .
4038	Assert that the list contains the included hash .
4039	Assert that the document is exact .
4040	Assert that the list contains an error .
4041	Assert that the list contains an exact error .
4042	Creates a new instance from a string
4043	Casts a document into an array .
4044	Creates a new instance from a JSON string .
4045	Decode a JSON string
4046	Get a document from the collection .
4047	Determine if the document with given pointer exists .
4048	Assert that the specified pointer exists .
4049	Assert that the specified pointer does not exist .
4050	Ensure that the actual value is exact .
4051	The actual subset .
4052	Check if the parameter is a resource identifier .
4053	Sort array .
4054	Determine if the given value is an identifier .
4055	Send the paging request
4056	Show user .
4057	Reply to a command .
4058	Set allowed types
4059	Write an array of messages to the output buffer .
4060	Write a message if debug is enabled .
4061	Add a new message to the output .
4062	Get message count
4063	Get variables from single line
4064	Get the variables from a multidimensional array .
4065	Validates an array of variables
4066	Return all items in the collection
4067	Adds a value to the accumulator .
4068	Recursively merge an array
4069	Returns the current object as an array .
4070	Get the keys of the current map
4071	Combines iterators into one
4072	Get the values .
4073	Apply a reduce function to each value
4074	Convert generic keys to string .
4075	Group by the given strategy .
4076	Iterate over an iterable .
4077	Register a new reduction .
4078	Dumps a WP - CLI event .
4079	Get an extra key
4080	Escapes a prefix for a predicate .
4081	Parses a comparable IRI
4082	Get term context context from a field .
4083	Save the current cache .
4084	Get content of an entity .
4085	Normalize a field item .
4086	Do delete action .
4087	Create a translated field instance .
4088	Get the entity s Uri .
4089	Get typed data IDs from types .
4090	Builds a backend
4091	Fetches data from cache .
4092	Execute a function .
4093	Print an error message
4094	Asks user for confirmation .
4095	Inserts row to database
4096	Create fake data .
4097	Overrides an array
4098	Insert a record into the database
4099	Extracts the primary key from the table
4100	Set this user as an authenticated user .
4101	Copy stubs files .
4102	Configure variables .
4103	Serialize the additional data .
4104	Returns whether the attribute is swatch type .
4105	Load the watch type attribute .
4106	Run database seeders .
4107	Prepare database seeders .
4108	Returns the attribute option with the passed store ID and store id .
4109	Return s the entity attribute with the passed attribute set ID and attribute ID .
4110	Return s the attribute option matching the passed entity type and store value .
4111	Return s the attribute manager with the highest sort order of the given attribute .
4112	Create database seeders folder .
4113	Create the database seeders .
4114	Initialize attribute .
4115	Set up database transaction
4116	Load s the attributes for the passed attribute ID .
4117	Setter for path .
4118	Add query parameters .
4119	Sends the HTTP response
4120	Execute the active handler
4121	Injects the params from the request
4122	Return s the attribute with the passed attribute code .
4123	Called after the serial is loaded
4124	Pre load attribute IDs .
4125	publish records .
4126	Assert that the response contains the given content .
4127	Parse response body
4128	Assert that the given array contains a given JSON structure .
4129	Bootstrap the Tripleton .
4130	Get Drupal root .
4131	Get the environment file path .
4132	Read the environment line from the file .
4133	Publish the bundles
4134	Loads the database seeder .
4135	Returns the entity type with the passed code .
4136	Returns the entity type ID .
4137	Make a new menu call .
4138	Prepare the URI .
4139	Verify if the payload contains a distributed trace .
4140	End a transaction
4141	Set app name
4142	Set user attributes
4143	Start a database transaction
4144	Overrides parent method to allow to override the default implementation
4145	Prepares constructor args
4146	Append an exception suffix
4147	Return wrapped column exception
4148	Parse a CSV file
4149	Return s an attribute group with the given ID .
4150	Returns the group with the passed attribute set ID .
4151	Returns the entity group with the passed entity type and attribute group name .
4152	Creates a new lexer config .
4153	Return s the savAttributeOptionValue of the passed option id .
4154	Create the file resolver .
4155	Returns all available core configurations .
4156	Gets a system logger .
4157	Create and return a plugin instance
4158	Merge an entity
4159	Create number converter .
4160	Cast value by backend type .
4161	Returns the entity type code .
4162	Returns the attributes of the member .
4163	Returns the list of eav user defined attributes .
4164	Get an EAV attribute by its code
4165	Returns all the categories with the passed path .
4166	Returns all the categories with the passed store view ID .
4167	Return the header associated with the passed name .
4168	Adds a header to the list .
4169	Maps an attribute code by header mappings .
4170	Tear down the source directory
4171	Registers an observer .
4172	Register a callback
4173	Returns an array of callbacks for the given type .
4174	Imports the specified row .
4175	Prepare store view code .
4176	Return s the store ID for the passed code .
4177	Returns the root category for the view .
4178	Resolves column name .
4179	Gets the original data of the record .
4180	Check if the data exists
4181	Wraps an exception with a wrapped exception .
4182	Append suffix to exception
4183	get new file name
4184	Upload media file .
4185	delete a media file
4186	Fetch all the member types
4187	Returns the s entity type with the passed entity type code .
4188	Serialize the object .
4189	Unserializes this object .
4190	Returns the target directory .
4191	Create an export config .
4192	Initializes the csv configuration .
4193	Unserializes the object .
4194	Serializes an array into a string .
4195	Get prepared statement .
4196	Get prepared statements
4197	Parse additional attributes .
4198	Generates the entity ID .
4199	Resolve a reference
4200	Add value to cache
4201	Get a value from the cache .
4202	Flush the cache .
4203	Return a single attribute set by ID .
4204	Get the MemberAttributeSet with the passed entity type id .
4205	Load s the MemberSet attribute set and attribute set name .
4206	Load s the entity type with the passed entity type code and attribute set name .
4207	Creates an export adapter based on the given configuration .
4208	Quotes a string for use in a query
4209	Return s the URL rewrite for the passed entity type and entity type ID
4210	Return s the URL rewrite for the passed entity type and store id .
4211	Notify all observers
4212	Check column integrity .
4213	Check if a header exists
4214	Creates a subject based on the given configuration .
4215	Creates a serializer instance .
4216	Returns the association s attributes with the passed entity type and attribute set name .
4217	Return s the sav attributes for the passed option value and store id .
4218	Returns the list of all the member attributes that are associated with the passed user .
4219	Return s the savAttributes for the passed entity type and its associated entity type id .
4220	Returns the member attributes with the passed entity type id .
4221	Return s the model with the given option value and store it .
4222	Prepare the observers .
4223	Resolves a relative path to a directory
4224	Creates a directory .
4225	Sets an attribute
4226	Raise a counter .
4227	Merge attributes recursively .
4228	Create the filesystem adapter .
4229	Return s the category with the passed store view ID .
4230	Returns all root categories
4231	Creates an emitter .
4232	Prepare the listeners for the given event .
4233	Recursively removes a directory .
4234	Get the swift mailer configuration .
4235	Initialize the source directory
4236	Load all the files in the given serial
4237	Returns the set of executed SQL statements .
4238	Create import adapter
4239	Prepare the callbacks for the given subject .
4240	Get the global data .
4241	Loads prepared statement .
4242	Creates a Date converter for the given subject .
4243	Override an array of artefacts .
4244	Append the given artefacts to the last entity
4245	Returns an array of artefacts for the given type and entity id
4246	Add a new artefact entry
4247	Exports counter data
4248	Returns all link types
4249	Returns a list of all image types .
4250	Convert a date from one format to another
4251	Convert a number into its localized representation .
4252	Execute a given subject configuration .
4253	Returns an array of pattern keys
4254	Resolve all pattern values .
4255	Resolve pattern value .
4256	Prepare regex pattern .
4257	Prepare the ok filename .
4258	Check if two filename is the same .
4259	find ok filenames .
4260	Checks whether a file should be handled .
4261	Clean up an OK file .
4262	Returns all registered tax classes
4263	Warm the MemberOptions values .
4264	Returns all store sites
4265	Returns all stores
4266	Returns the cache by entity ids .
4267	Returns column data for given entity id
4268	Returns all CustomerGroup objects .
4269	Returns the primary key name of the edition .
4270	Clear empty rows .
4271	Create blade view
4272	Register REST routes
4273	Get the collection parameters
4274	Sanitize End Date .
4275	Get events .
4276	Map Event Module Data
4277	Define category translations
4278	Called before the post is saved .
4279	After save hook .
4280	Saves the location
4281	Saves additional locations
4282	Save Event Categories
4283	Saves event groups
4284	Saves Event Tags
4285	Saves episodes .
4286	Saves the default language
4287	Get event by original id
4288	Check for filters
4289	Removes any expired episodes .
4290	Remove deleted events from the database
4291	Removes any expired events
4292	Filters for taxonomies .
4293	Delete empty taxonomies .
4294	renders a list of locations
4295	Save new location
4296	Get rev manifest .
4297	Remove meta box
4298	Function for serialization
4299	Multi - implode
4300	Register Post Type .
4301	Add a table column .
4302	Get a list of table columns .
4303	Sortable columns
4304	Content for table columns
4305	Saves a term .
4306	Activate a new event group .
4307	returns empty value
4308	Returns empty values .
4309	Delete empty meta
4310	Save the instance
4311	Check if an attachment exists
4312	Render a submit form callback .
4313	Add the event date parameters to the permalink format .
4314	Event filter .
4315	Get the date of a single event
4316	Get the next date for an event .
4317	Returns the closest element in the array .
4318	Get the date parts for a given start date
4319	Save points .
4320	Registers event admin
4321	Enqueue and enqueue the frontend
4322	Format a short date to a short date .
4323	Imports events management .
4324	Imports the publishing groups of a user
4325	Check the database table creation
4326	This method is called when the event database is being executed .
4327	Check if event exists
4328	Send an API request
4329	Get eventasions
4330	Get Event Meta
4331	Limits a string to a given limit
4332	Get a list of nearby posts .
4333	Update the widget
4334	Ajax action AJAX handler
4335	Get Event Data
4336	Get module categories
4337	Get the categories of a module
4338	Get the groups for the specified module
4339	Get Event Tags
4340	Gets an array of age filter range for the given event id .
4341	Renders the OAuth request callback
4342	Sanitizes the input .
4343	single event data
4344	Import user groups .
4345	Update group value
4346	Format event content .
4347	Filter event content lead
4348	Get custom content
4349	Register event categories
4350	Register Event Tags .
4351	Register Event Groups
4352	Adds the import buttons .
4353	Imports events from Api .
4354	accept or deny
4355	Creates the driver .
4356	Verifynel .
4357	Run a command .
4358	Sets a signal handler
4359	PHP signal handler .
4360	Execute a process .
4361	Edit the view for the given container .
4362	Create the dc general .
4363	Gets the widget for the given property .
4364	Render the given property .
4365	Processes the properties of a property bag .
4366	Process a single property .
4367	Hook into POST variables .
4368	Handle the event .
4369	Create new instance of driver .
4370	Configure Imagick settings
4371	Inject driver settings .
4372	Handle the given event .
4373	Extract the class name of the widget
4374	Get the options for the widget .
4375	Edit the widget .
4376	Enforce model relationships .
4377	Processes the widget input .
4378	Trigger pre persist event .
4379	Handle post persist event .
4380	Translate a label .
4381	Build the field sets .
4382	Handles the submit button .
4383	Get the top line .
4384	Persist the model .
4385	Configure CAS method
4386	Parse the configuration .
4387	Configure CAS Validation .
4388	Returns the requested attribute .
4389	Check if an attribute exists
4390	Logout a CAS user
4391	Sets the HTTP status code .
4392	Get the key or null .
4393	Check if the current model is an integer key .
4394	Extracts the components from the URL
4395	Adds containers from an associative array
4396	Build the query .
4397	Wrap the original query with a row counter .
4398	Get the fake model query .
4399	Generate an activation link from a key
4400	Assign user to given key
4401	Check if key is valid
4402	Read the paging information from the request .
4403	Registers an array of templates
4404	Register custom error handlers .
4405	Handle an authorization exception .
4406	Handles a custom validation exception .
4407	Handles a model not found exception .
4408	Get the last element from the list .
4409	Get the core components list .
4410	Attaches event handlers
4411	Send HTTP request
4412	Check if the asset package is available .
4413	Sync package to database
4414	Update all packages that have expired
4415	Creates a new client
4416	Get the connection url .
4417	Get port from config .
4418	Checks if the configuration of entity managers are configured .
4419	Terminate a daemon
4420	Locks a theme .
4421	Unlock a theme .
4422	Clones a book .
4423	Build param value from filter url .
4424	Builds the widget for the parameter filter .
4425	Returns the sorted table rows
4426	Returns whether the database is configured .
4427	Configure database schema
4428	Get all migrations .
4429	Executes the migration .
4430	Rollback migration .
4431	Resolve state of migration .
4432	Get the migration table
4433	Render the given source .
4434	Mount indents to string
4435	Sets the primary keys .
4436	Creates the database table .
4437	Update this table .
4438	Drops the table .
4439	Renames a table .
4440	Execute the Blueprint .
4441	Generate migration files .
4442	Create a unique filename for the given chunk .
4443	Boot the application .
4444	Load the Laravel application .
4445	Loads context initializer .
4446	Load the Laravel argument resolver .
4447	Apply the Mailtrap configuration .
4448	Fetch the inbox .
4449	Get the request client .
4450	Reboots the kernel .
4451	Resolves list of arguments .
4452	Opens a stream .
4453	Retrieves information about a file path .
4454	Get stream stats .
4455	Check if file exists
4456	Returns the filename of the given stream .
4457	Free the given file .
4458	Handle the given command .
4459	Checks if empty node expansion works
4460	Expose this class to another .
4461	Handle the request
4462	call a method
4463	Renders checkbox input
4464	Enable server .
4465	Extract types from document
4466	Return a list of available methods .
4467	Return method signature
4468	Get the help for a method .
4469	Calls a list of multicall requests .
4470	Load a class .
4471	Get version of phar .
4472	Prints the usage information .
4473	Parses a boolean value .
4474	Reads a value from the file .
4475	Parse command line arguments
4476	Run the test
4477	Determine if the container has been resolved .
4478	Gets the XML writer .
4479	Finalize write .
4480	Returns a reader instance for the request .
4481	Reads a leaf node and returns it .
4482	Returns the start tag for the next node .
4483	Returns the closing tag for the next node .
4484	Parse a single text node
4485	Check a value against the allowed types
4486	Returns a checkbox field .
4487	Return an email field .
4488	Returns a select field .
4489	Register the section
4490	Register a new section
4491	Register the sections settings
4492	Register section settings
4493	Display a captcha
4494	Get javascript link .
4495	Generate the HTML for multiple captcha attributes .
4496	Build the captcha html .
4497	Uploads an asset from a MO file .
4498	Get a single project .
4499	Retrieve a list of projects that match the given criteria .
4500	Create a template from a project s template
4501	Get a template by ID
4502	Returns an array of available templates
4503	Create a job .
4504	Get the job with the given ID .
4505	Retrieve jobs by template
4506	Get the current user
4507	Gets the user s personal library .
4508	Merges the values of a pre request .
4509	Get LDAP user value .
4510	Set the LDAP config definition .
4511	Check for an LDAP error .
4512	Set allowed types for this extension .
4513	Setup the credentials for LDAP .
4514	Switch the current domain
4515	Switch the current domain back to the current context .
4516	Throws an exception based on a custom user exception .
4517	Get username password token .
4518	Add the domain to the token if it exists .
4519	Transforms the value for LDAP .
4520	Get the properties of the ldapObject annotation .
4521	Set the LdapObject for the given property .
4522	Set the LdapObject value for a property .
4523	Register ldap constructor .
4524	Return the list of values for the LdapObjects
4525	Get LDAP objects by query .
4526	Returns all operations of a domain
4527	Sets the roles for this user .
4528	Determines whether a group is available for the given roles .
4529	Check if a group has a specific group with a specific attribute .
4530	Log a log operation .
4531	Save the media .
4532	Update existing media by id .
4533	Return the media attached to the group .
4534	Remove the media .
4535	Parse options .
4536	Get the filename of the media .
4537	Check if file already exists
4538	Rename the file
4539	Returns the alt tag .
4540	Get title .
4541	Returns the media name .
4542	Get the media weight .
4543	Put new file
4544	Remove existing media .
4545	Put the storage
4546	Copies the storage folder .
4547	Makes a directory .
4548	Clone a media object .
4549	Boot the pricing configuration
4550	Register the sage service .
4551	Register sage directives .
4552	Load config .
4553	Generates a svg
4554	Transfers the result variable to an OutcomeVariable .
4555	Transforms a QTI value into a string .
4556	Add a variable to the output .
4557	Checks if the given Variable is a file placement placeholder .
4558	Checks whether a variable is a file .
4559	Convert a Datatype to a QtiDatatype
4560	Create a revision from an object
4561	Recursive diff between two arrays
4562	Set client ip
4563	Set the language .
4564	Set image origin .
4565	Resolve origin URI
4566	Sets the timestamp of the notification .
4567	Performs pre - save operation
4568	Process the schedule .
4569	Performs a pre update
4570	Is slug unique
4571	Generate unique slug
4572	Set the slug
4573	Set creation date
4574	Set last modification date
4575	Set route options
4576	Sets the object s master .
4577	Returns the children of the node .
4578	Get the node siblings .
4579	Load an object from the database .
4580	Load an object from the cache .
4581	Add an object to the repository .
4582	Retrieve category items
4583	Set the slug pattern for this route .
4584	Retrieve the slug prefix
4585	Retrieve the slug suffix .
4586	Is slug editable?
4587	Set slug .
4588	Generate a slug for this route .
4589	Generate route pattern .
4590	Filter the given token .
4591	Generate object route .
4592	Return the url of the latest object route .
4593	Generate slug from string
4594	Finalize slug .
4595	Delete Object Routes
4596	Create route collection loader .
4597	Get all revisions .
4598	Set the publication date
4599	Set the expiry date .
4600	Set the publish status
4601	Retrieve the publishing status
4602	Show help videos
4603	Rewrite routes
4604	Resets the source data .
4605	Get the next item
4606	Show logs site
4607	Site index page .
4608	View Site View
4609	Browse Event
4610	Return a list of user permissions .
4611	Displays the list of users .
4612	Deletes an item from the database .
4613	Restore an item from the database
4614	Sort the list
4615	Checks if an item can be deleted .
4616	Get title single .
4617	Returns a list of dropdown filters
4618	Get the post object
4619	Returns a model item
4620	Redirect to index
4621	Adds an option
4622	Add multiple options at once
4623	Returns the value of the specified option
4624	Handles method calls .
4625	Set batch status
4626	Set a collection ID for one or more files
4627	Route index action
4628	Loads admin controllers
4629	Load admin controllers
4630	Loads the admin controller .
4631	Loads an admin class
4632	Routes the request
4633	load view .
4634	Loads a CSV file
4635	Loads an inline view .
4636	Load a search object
4637	Get filter value at given key
4638	Loads the pagination component .
4639	Loads a cell
4640	Loads a user cell
4641	Returns the cell s date .
4642	Returns a rendered date time cell
4643	Load a bool cell
4644	Returns the component s settings table .
4645	Add a header button
4646	Render a dynamic table
4647	Save module settings
4648	Creates the command
4649	Creates the source file .
4650	Formats a row .
4651	Adds a new action
4652	Set admin data
4653	Unset admin data
4654	Unset an admin value
4655	Clear all admin data for a user
4656	Returns all log files
4657	Find config file
4658	Loads JS files
4659	Load admin assets
4660	Loads libraries
4661	Auto load services
4662	For backwards compatibility
4663	Site permission
4664	Prepare the input string for whitelist
4665	Extracts the settings from a component s settings
4666	Get a source by it s slug
4667	Looks for a format by it s slug
4668	Exports data to a source format .
4669	Schedules the export failed
4670	Add new user item to list
4671	Save modified fields
4672	Returns all users
4673	Returns an array of common words
4674	Format an object
4675	Pap helper
4676	Validates user input
4677	Get model and id
4678	Formats an object
4679	Sets the current date
4680	Add daily html .
4681	Sets the start of a week .
4682	Print a debug message .
4683	Submit a bonus adjustment .
4684	Assign tasks to team .
4685	Assign tasks to an engagement .
4686	Get a report by a Stripe distribution reference
4687	Returns a report given by a fulfillment team .
4688	Retrieves a report by a fulfillment company
4689	Returns a report by buyer_team_reference .
4690	Returns report by buyer company
4691	List engagements .
4692	Get the information for an individual .
4693	Create full URL
4694	Return the list of offers .
4695	Creates a new Contract
4696	Gets a specific information about an entity
4697	Return a list of all roles .
4698	Returns roles of a specific user .
4699	Invite candidate .
4700	Get company by company
4701	Get companies by company
4702	Get users in team .
4703	Retrieves a list of jobs .
4704	Returns a job by key .
4705	Create a job .
4706	Edit job .
4707	Delete a job .
4708	Get user information .
4709	Get user information
4710	Get team by type
4711	Get room details
4712	Get room by offer
4713	Get room information for an application
4714	Get room by contract
4715	Creates a room
4716	Send message to room
4717	Update room settings
4718	Update room metadata
4719	Get team details by contract
4720	Update team by contract
4721	Delete team by contract
4722	Get the active milestone for a contract .
4723	Get milestone .
4724	Creates a milestone .
4725	Edit a milestone .
4726	Delete a milestone .
4727	Performs the HTTP request .
4728	Bootstrap the application .
4729	Gets the content of a url .
4730	Get account data
4731	Display a list of contact .
4732	Display contact .
4733	Show the form for creating a new contact .
4734	Show the contact for editing .
4735	Update the specified contact .
4736	Remove the given contact .
4737	shows contact display
4738	Get contact data by field
4739	Determine if the given contact can be viewed .
4740	Determine if the given contact can be updated .
4741	Determine if the given contact can be deleted .
4742	Show contact list .
4743	Parse the given link .
4744	Retrieve the available previews
4745	Returns parsed preview
4746	Add a parser .
4747	Remove a parser .
4748	Add the default parsers .
4749	Generates a contrast from a hex string
4750	Wrap a path with a slash
4751	Tries to convert an interval into an integer .
4752	Boot the browser .
4753	Timezone data .
4754	Returns options for timezone configuration .
4755	Get the model relation name .
4756	Interprets the given query and returns the related model object
4757	Get the client information .
4758	Convert a version number to a number .
4759	Query Scope for a key .
4760	Set the availability time .
4761	Get the command payload attribute .
4762	Convert bytes to human readable format
4763	Calculates a time offset based on an offset
4764	Generates a seconds string
4765	Truncates a string to a short text .
4766	Add one or more permissions to a topic
4767	Confirm Subscription Request
4768	Create a Topic
4769	Get the topic attributes
4770	Get Subscriptions list .
4771	List Subscriptions By Topic
4772	List topics .
4773	Publish a message to a topic
4774	Remove a permission from a topic
4775	Set a topic attribute
4776	Subscribe to a topic
4777	Create platform endpoint
4778	Publish items to endpoint
4779	Make an API request
4780	Convert XML to array .
4781	Clear all data
4782	Convert a priority to its equivalent .
4783	Run the main task .
4784	Configure the settings tabs .
4785	Get invitation by code
4786	Create default Settings .
4787	Creates a Coupon object from a Stripe coupon ID .
4788	Retrieve a Coupon .
4789	Retrieve a coupon from Stripe .
4790	Short description of method getTeam
4791	Get team roles .
4792	Update the user profile
4793	Validates the user profile .
4794	Update the Stripe customer s email address .
4795	Copies the blanks to the Spark JavaScript directory .
4796	Install environment variables .
4797	Subscribe a user to the plan .
4798	Change subscription plan .
4799	Update a card
4800	Update extra billing info .
4801	Cancel subscription .
4802	Resumes a subscription .
4803	Downloads the invoice .
4804	Get or set the price .
4805	Set currency symbol .
4806	Get or set trialDays property
4807	Get or set the tier .
4808	set or get features
4809	Get the current user .
4810	Creates a new user from a registration request .
4811	Creates a new user and returns it .
4812	Create default User
4813	Create a subscription on Stripe .
4814	Register a TwoFactor Authentication
4815	Returns true if the token is valid
4816	Delete a user authentication
4817	Show the dashboard .
4818	Invite a user by email .
4819	Removes the user with the given id .
4820	Sends an invitation to a team .
4821	Accepts a team invitation .
4822	Create a new Tab instance .
4823	Returns the displayed tabs .
4824	Define template paths
4825	Defines the services .
4826	Send an invoice to the user .
4827	Called when an invoice has been completed
4828	Create a new team
4829	Get all teams for a user
4830	Get all pending invitations for the given user .
4831	Attach user to invitation by invitation .
4832	Find a plan .
4833	Get the plans with the given tier .
4834	Gets the current team
4835	Checks if the team is owned .
4836	Get team role .
4837	Store a new team .
4838	Edit team settings .
4839	Update team .
4840	Switch the current team
4841	Updates a team member .
4842	Remove team member
4843	Leave a team
4844	Delete team .
4845	Call custom validator .
4846	Call a custom updater .
4847	Update the old password
4848	Enable TwoFactor authentication .
4849	Validate Enable Factor Auth
4850	Disables TwoFactor authentication
4851	Handle authentication .
4852	Logout and redirect to the Auth screen
4853	Validate and store a new token
4854	View registration page .
4855	Validate registration .
4856	Validates default registration .
4857	Validate Coupon .
4858	Logout page .
4859	Saves a flash message .
4860	Create an event .
4861	Register an exception .
4862	Export an exception to a PHP error handler .
4863	Run an import exception
4864	Normalizes an event .
4865	Returns a wrapper for a handler .
4866	Create a cached event .
4867	Check if an event has been cached .
4868	Get the cached event .
4869	Remove an event from cache .
4870	Creates a wrapper function for the event handler .
4871	Export exception as a string
4872	Import an exception handler
4873	Removes a hook .
4874	Replace a WordPress hooks .
4875	Get stacked items .
4876	Clear the ref bag .
4877	Send message to pool
4878	Deletes task from queue .
4879	Bootstraps the package .
4880	Filters the provided pool .
4881	flatMap method .
4882	Call the given function on each descendant of the pool .
4883	Creates a parallel task .
4884	Convert a scalar result into an array .
4885	Set number of args .
4886	Run a hook .
4887	Runs the filter on a value .
4888	Add a wp - hook .
4889	Wrap a function in a promise .
4890	Resumes the loop .
4891	Stop the loop .
4892	Destroy all connected sockets .
4893	Gets a worker socket .
4894	Remove worker socket .
4895	Prepare a worker .
4896	Attach a method handler for the specified event .
4897	Hash a callable
4898	Write data to the queue
4899	Pipes this stream to another stream .
4900	Handles data received from the server .
4901	Writes data to the socket .
4902	Check socket errors .
4903	Removes a listening listener
4904	Removes a listening listener .
4905	Decode Phoebe message .
4906	Attach timer .
4907	Cancels the timer .
4908	Submits a worker to the thread .
4909	Submits a worker to another worker .
4910	Submits an asynchronous task .
4911	Submits an asynchronous task to a worker .
4912	Stops a worker .
4913	Removes a worker .
4914	Sends a message to a worker .
4915	Send a message to all workers .
4916	Executes all pending workers
4917	Action timer tick
4918	Spawns a new worker
4919	Check if this worker is running .
4920	Checks worker shutdown .
4921	Processes a message .
4922	Handles a stream close .
4923	Read bytes from the current binary stream .
4924	Read a UUID
4925	Reads a list of values
4926	Reads a map
4927	Read a varint
4928	Read a decimal number
4929	Registers the bulkSMS service .
4930	Publishes the package .
4931	Send a message .
4932	Validate a response from the BulkSMS API
4933	Send multiple messages
4934	Get the status of a batch .
4935	Send sms messages
4936	Generates a CSV .
4937	Send sms message
4938	Sets the message
4939	Calculate concat limit
4940	Parses the phone number .
4941	Send batch .
4942	Finds entities by filters .
4943	Counts the number of related models .
4944	Add filter to querybuilder .
4945	Add search filter .
4946	Add a filter to the querybuilder .
4947	Gets a field from this object .
4948	Get all form fields
4949	Builds a configuration by dynamic dynamic .
4950	Builds a configuration by type .
4951	Builds the admin mail configuration by using a dynamic form .
4952	Builds the website mail configuration from dynamic data .
4953	Get File Fields By Dynamic
4954	Get collection id by dynamic state .
4955	Get email from Dynamic
4956	Get email .
4957	Build the form .
4958	Create a form .
4959	Loads form entity by id .
4960	Get default values .
4961	Get the current webspace key .
4962	Validates the given form input .
4963	Generates a password input
4964	Returns the dynamic list .
4965	returns all fields .
4966	Delete a media entity .
4967	Get filters from request
4968	Load the form .
4969	Cast value to string .
4970	Get the media URLs .
4971	Get download url .
4972	Returns available choices .
4973	Return select options with placeholder
4974	Get form by id and locale
4975	Builds and executes the form .
4976	Get form translation .
4977	Get a field by name
4978	Returns all fields not in an array .
4979	Serializes the fields for the given locale .
4980	Displays a form .
4981	Renders a form with a given key and a submitted value .
4982	Handle form submit .
4983	Handle form only submit .
4984	Renders a CSRF token .
4985	Get validation errors .
4986	Handle the upload .
4987	Save the given form .
4988	Save the media ids .
4989	Map media ids .
4990	Get media data .
4991	Get MailChimp Lists .
4992	Get the builder .
4993	Returns block prefix .
4994	Create new collection .
4995	Load the collection id .
4996	Calculate item width .
4997	Get last width .
4998	Throws an Exception .
4999	Sets the hostname
5000	Sets the unix socket .
5001	Sets memory usage
5002	Set file path
5003	Set database name
5004	Sets the charset .
5005	Ensure that the PDO connection is connected .
5006	Configure a PDO connection .
5007	Execute a query and return the results .
5008	List all queues
5009	Get details about a queue
5010	Post a message .
5011	Posts one or more messages to a queue .
5012	Get message by id
5013	Touch a message in the queue
5014	Release a message
5015	Add alerts to a queue
5016	Delete an alert by id
5017	Delete a queue .
5018	Update a queue
5019	Create a new Queue
5020	Replaces subscribers in the specified queue .
5021	Remove Subscribers from a queue .
5022	Output json .
5023	Output xml .
5024	Generate XML from given data
5025	Output CSV .
5026	Flattens a multi - dimensional array .
5027	Execute active cache command
5028	Format and return the results as a string
5029	Format a usage in bytes .
5030	Formats an uptime
5031	Add a Memcached server .
5032	Adds multiple servers to the pool .
5033	Check if a server is registered .
5034	Gets data from memcache
5035	Add a value to the memcache
5036	Deletes data from the cache .
5037	Set cache client interface
5038	Gets a value from the cache
5039	Delete a value from the cache
5040	Make an invalid argument exception .
5041	Populates the builder with the given data .
5042	Set the options for this route .
5043	Attach notification .
5044	Set or get payload data .
5045	Encode a CDATA string
5046	Returns the URL of the non - authentication protocol .
5047	Returns the authentication URL for the given action .
5048	Generate advanced authentication URL .
5049	Genera un authentication URL
5050	Build the URL for the HTTP authentication request .
5051	Ensure channel parameter is set .
5052	Set the product ID .
5053	Get similar attributes .
5054	Get the similar records .
5055	Writes a string to the file .
5056	Autoload a class
5057	Setter for target .
5058	Trigger data import .
5059	Trigger a suggest import
5060	Apply a list of parameter mappings
5061	Ensure channel parameter is set .
5062	Add required parameters .
5063	Adds an appender to the pool .
5064	Get a registered appender
5065	Logs a trace message .
5066	Log a message with priority debug .
5067	Log a warning message .
5068	Log a message using the given level .
5069	Logs the given logging event .
5070	This method sends a logging event to the logger .
5071	Removes an appender from the logger .
5072	Returns the effective effective level of the logger .
5073	Get the hierarchy
5074	Get a logger by name
5075	Resets the whole configuration
5076	Configure the hierarchy
5077	Get a logger configurator instance .
5078	Set the record count .
5079	Add product IDs .
5080	Get recommendations .
5081	Track a click tracking request
5082	Track a cart
5083	Track checkout tracking
5084	Track a recommendation click .
5085	Track the login tracking .
5086	Set the product IDs .
5087	Get comparable attributes .
5088	Get the compared records .
5089	Perform a formatted string .
5090	Setter function for boolean .
5091	Setter for log level .
5092	Set the file size .
5093	Setter function for numeric type .
5094	Setter for string type .
5095	Gets the location information .
5096	get start time
5097	Returns the time the event was written to .
5098	Returns a PSR - 7 request instance .
5099	Gets a tag cloud .
5100	Sets the word count for the request .
5101	Add the feedback to the output .
5102	Set the product number for this request .
5103	Adds product numbers to the list .
5104	Set the current page id .
5105	Make Product Campaign
5106	check if cart is shopping cart and if it is up to date .
5107	Get all campaigns .
5108	Execute raw product campaigns
5109	Adds a converter to the chain .
5110	Returns the converter for the given word .
5111	Parse the formatting modifiers .
5112	Set logger level
5113	Add a renderer to the map .
5114	Sets a default renderer class .
5115	Get a mapping for a given class name .
5116	Builds the parameters for the whitelist server .
5117	Load ini file
5118	Converts a log file to an array .
5119	Parses a logger value .
5120	Parses a configuration parameter .
5121	Parse the defined renderer .
5122	Appends an event to syslog .
5123	Parse syslog option .
5124	Parse the facility string .
5125	Parse syslog priority value
5126	Appends a logging event to the mongo collection .
5127	Format the exception throwable .
5128	Closes the underlying stream .
5129	Configure logger hierarchy
5130	Create appender layout .
5131	Sets the ids only .
5132	get follow search value
5133	Append next filter
5134	Set the previous response .
5135	Set session ID .
5136	Checks whether another level is equal .
5137	Gets the OFF level off of this logger .
5138	Get Monolog Level
5139	Get log level error
5140	Get the level warning
5141	Gets the log level info
5142	Get level logger
5143	Get level trace
5144	Get all level for this logger .
5145	Converts log message to level .
5146	Get system setting value
5147	Converts value to log level .
5148	Convert a value to string .
5149	returns all constants of a string
5150	Get a logger by name .
5151	Returns the request target
5152	Initializes the conversion pattern
5153	Formats a log event .
5154	Add one or more filter
5155	returns true if the level is under the threshold
5156	Output a warning message
5157	Get the suggestion .
5158	Returns the name of the class to use for this fact .
5159	Rollover the file over
5160	Initializes the logger s options .
5161	Appends an event to the database .
5162	Format the logging events .
5163	Generate a URL from parameters
5164	Get the feedback for the last selected campaign .
5165	Get all pushed products .
5166	Return all active questions for this campaign .
5167	Get advisor tree
5168	Activate Options .
5169	Appends a logging event .
5170	Finds a permission by its ID .
5171	Find a permission by its value
5172	Render an item
5173	Setup layout .
5174	Return user index .
5175	Get user create .
5176	Insert new user .
5177	Activate a user
5178	Display the specified user s permissions
5179	List of groups
5180	Sets the group data .
5181	Remove user from a group
5182	Adds user in group .
5183	Validate the group values .
5184	Loads the includes .
5185	Register the breadcrumbs .
5186	Shows the index page .
5187	Logs user in
5188	List of permissions
5189	post create new permission
5190	Delete a permission
5191	Render the pdf
5192	Allows users to authenticate .
5193	Returns a random nonce .
5194	Check if a flag is set
5195	Gets a specific rule .
5196	Check if flag is expected
5197	Check if flag is required
5198	Optional .
5199	Parse system config arguments
5200	Check if a string is a param
5201	Order parameters .
5202	Set HTTP Authenticate
5203	Returns report API
5204	Returns Permissions API
5205	Returns the company API
5206	Get the OAuth API
5207	Do the actual HTTP request
5208	Get elements of a report
5209	Get metrics for a specified report suite .
5210	Retry and retry a report
5211	Returns the number of seconds between the specified number of seconds .
5212	Parses the given options .
5213	Make a GET request .
5214	Retrieve all images
5215	Retrieve a list of videos
5216	Convert a string to stdout .
5217	Get a database table definition .
5218	Gets the drop table definition .
5219	Gets drop table data definition .
5220	Get Table Key
5221	Builds the SQL to drop a key .
5222	Builds and returns the foreign key definition .
5223	Get foreign key definition .
5224	Get columns definition .
5225	Get the primary key .
5226	Get a table comment
5227	Get the schema type .
5228	Returns the other definition .
5229	List all schemas .
5230	Generates migration file .
5231	Creates the table
5232	Generates the dropTable of this table .
5233	Generates the file .
5234	Prints data with specified name .
5235	Gets the params of a table .
5236	Start print function
5237	Ends a printable string
5238	Output final result .
5239	Fetch data from webservice .
5240	Retrieves the data from the response
5241	Set Webservices URL
5242	Get all groups defined in LDAP location .
5243	Get a search group by DN .
5244	Return all LDAP users .
5245	Fetch a user by GUID
5246	Search for a specific user by DN
5247	Search for a user by email address
5248	Get LDAP user record by username
5249	Get canonical username by email
5250	Return the members of a DN
5251	Updates a group with data from LDAP .
5252	Create LDAP user .
5253	Create a LDAP group
5254	Update LDAP from a member
5255	Updates LDAP groups for a given Member
5256	Change a password for a member
5257	Delete a LDAP member
5258	updates an object in the database
5259	Establishes a connection to the server
5260	Disconnect from socket
5261	Receive a string from the socket
5262	Send string to server .
5263	Encode a string
5264	Decode a string
5265	Read response from server
5266	Authenticates the application .
5267	Calculates the correct time for the persistent login
5268	Create LDAP user if not enabled .
5269	Write data without sync extension
5270	Gets the message from the session
5271	Generate a form to delete the lost password form
5272	Show password reset link
5273	Perform LDAP search on the specified filter .
5274	Get LDAP group by GUID .
5275	Changes a user password
5276	Reset a password for a given LDAP password .
5277	Moves a new entry from one location to another .
5278	Performs LDAP authentication
5279	Fallback authenticator
5280	User authentication process
5281	Log SP metadata .
5282	Returns the little - endian of a hexadecimal string .
5283	Returns an array containing the values of each row in the result set
5284	Select one or more items .
5285	Splits hash into parts
5286	Create database object
5287	get table definition
5288	Returns all tables in database
5289	Add an array of indexes to column definition
5290	Compare two indexes
5291	Retrieves a single value from the database .
5292	Build index name
5293	Encodes data .
5294	Generate a random key
5295	Returns the supported spec .
5296	Create a hmac hash of a string
5297	Verify a hmac signature
5298	Verify that a timestamp is valid
5299	Remove string from end of string
5300	Push string onto end of array
5301	Twig wrapper for twig
5302	Build error message from error array .
5303	Adds an error to the collection .
5304	Get or set the main message .
5305	Get or set the status of the response
5306	Returns the error message .
5307	Get all errors as a flat array
5308	Check if a field is valid
5309	Parse a schema array
5310	Require one of the given fields
5311	Validates data against the schema .
5312	Validate a field .
5313	Validates an array .
5314	Validate a value as base64
5315	Validate a boolean value .
5316	Validate a datetime value .
5317	Validate a float .
5318	Validate an integer .
5319	Validates an object
5320	Validate required field
5321	Validate a string .
5322	Validate a timestamp .
5323	Get all registered addons
5324	Bootstrap all enabled addons .
5325	Get data from cache
5326	Generate class map
5327	Get enabled addons .
5328	Returns information about an addon .
5329	Scans a directory for addons .
5330	Scan addon dir .
5331	Returns an array of addons
5332	Start addon .
5333	Get all response headers
5334	Calls a user_func_array
5335	Register an event handler
5336	Binds a class to an event .
5337	Dump all event handlers .
5338	Fires an event
5339	Fire an array of event handlers
5340	Fire filter on an event .
5341	Check if a function exists .
5342	Get event name
5343	Get handlers by name
5344	Returns whether an event is registered .
5345	Check if a method exists .
5346	Returns the value of the given driver .
5347	Set the value of the driver .
5348	Split salt string
5349	Get the default path to use for config files .
5350	Get key s value .
5351	Load configuration data
5352	Save a config
5353	Finds all routes that match the given request .
5354	Register a new route
5355	Finalize a result .
5356	Checks if an action exists
5357	Gets the allowed methods for the object .
5358	Determine if the current route matches the given request .
5359	Test if a condition fails .
5360	Get current item
5361	Creates response from exception
5362	Get or set Content - Type header
5363	Get or set the content asset .
5364	gets the content type from Accept header
5365	Get HTTP status message
5366	Set a cookie value .
5367	Set or get global cookies
5368	Set or get the meta data
5369	Set or get data .
5370	Sets headers .
5371	Set global headers
5372	Normalize HTTP header name
5373	Flush the headers
5374	Alter a table
5375	rename a table
5376	Drop an index
5377	Creates a new index .
5378	Force a value into the given type .
5379	Get PK value .
5380	Get the list of tablenames .
5381	Create a new resource route
5382	Set or get the conditions .
5383	Get or set the HTTP methods .
5384	Set or get mappings
5385	Get or set global mappings
5386	Check if given attribute is mapped .
5387	Get mapped data .
5388	Returns true if request matches request methods .
5389	Get or set the route pattern .
5390	Dispatch the callback .
5391	Get route regex .
5392	execute a query
5393	Build select statement .
5394	Create bracket list
5395	Build an insert statement .
5396	Build an upsert statement .
5397	creates column def string
5398	Build index definition string .
5399	Returns an array of column orders
5400	Gets the formats from the database .
5401	Translate single row
5402	Verify a password hash
5403	Encode hash .
5404	Get the current element
5405	Set default environment
5406	Get or set global environment variable
5407	Parse server variables
5408	Override current environment
5409	Get environment variable .
5410	Set environment variable
5411	Get all headers
5412	Get the host and port of the current URL .
5413	Set the extension .
5414	Set path extension .
5415	Set Full Path
5416	Set the port of the request .
5417	Get a query string parameter
5418	Set a GET parameter
5419	Get INPUT input
5420	Get request data
5421	Sets data .
5422	Returns the current URL .
5423	Parse the URL from a string
5424	Build a URL from a path .
5425	Split path into file extension .
5426	Reset all properties
5427	Define a mapping .
5428	Get column definition .
5429	Create a primary key column .
5430	Executes the table
5431	Table getter and setter .
5432	Add or update an index
5433	Show all robots . txt files
5434	Get a list of paging items .
5435	Find a resource by ID .
5436	Validate the attributes .
5437	Return attribute value
5438	Sets an array of attribute values .
5439	Check that API method is supported .
5440	Validate required attributes
5441	Check the Julian Day Count .
5442	Returns a summary
5443	Get a model by name
5444	Get a summary of the error .
5445	Get a resource .
5446	Make a POST request to the specified endpoint .
5447	It converts the inputs to the correct order
5448	Validates object attributes
5449	Checks if the given key exists in the array
5450	Render all notifications
5451	Add a new notification .
5452	Create a delivery
5453	Convert job data to array
5454	Creates a new Job object from the JSON body .
5455	Frees poll .
5456	Frees the buffer .
5457	Create a new chart .
5458	Handle the item request .
5459	Sorts the list of relations
5460	Return the link to this controller
5461	Generate detail form
5462	Save detail panel .
5463	Returns RSS feed items
5464	A list of recent edits
5465	Saves the members in the database
5466	Retrieve the template name
5467	Generate a link to view all of the subjects
5468	Returns a link to the edit form
5469	Gets the gridfields for a given page .
5470	Returns the grid field
5471	Gets the tab for the current grid page
5472	Gets a list of all items in the grid
5473	Gets the grids for a specific page
5474	Request account data
5475	Cleans error response .
5476	Process filter .
5477	Data provider for account object mapper
5478	report object mapper
5479	Check if array key exists
5480	Fetch a token
5481	Build the URL
5482	Http post request
5483	Make an HTTP GET request
5484	Performs HTTP request
5485	Make a cURL request
5486	Wrapper for fopen requests
5487	Array of recent files
5488	Duplicate this object
5489	Returns the template name
5490	Return the link to view all emails .
5491	Items for the ModelAdmin
5492	Returns the models list for the given panel
5493	Provides permissions for the dashboard .
5494	Sort the dashboard .
5495	Set the default dashboard
5496	Applies all the dashboard panels to the current one .
5497	View the panel
5498	Deletes the panel .
5499	Create a form to configure the configuration .
5500	Saves the configuration panel
5501	Returns the icon for the current section
5502	Convert seconds to seconds
5503	Create the gap api
5504	Returns the configuration .
5505	Check if a configuration is configured .
5506	Answers the full path for the receiver .
5507	Get the chart title
5508	Read a floating point value .
5509	Read a segment from the file .
5510	Converts a hexadecimal number to hexadecimal representation .
5511	Reads a B .
5512	Read a signed integer from the buffer
5513	Read an unsigned 16 - bit value .
5514	Read a signed integer from the buffer .
5515	Reads a 64 - bit integer from the file .
5516	Read a signed 16 - bit integer
5517	Exports the trace data .
5518	Returns a Trace callback .
5519	Parses robots . txt content and returns collected RegEx expressions .
5520	Get applying lines from the robots . txt
5521	Builds a list of RegEx expressions from the given parameters
5522	Gets the content of robots . txt content
5523	Returns the robots . txt - URL
5524	create the crawler process
5525	Runs multi - processes on the current environment
5526	Start child process
5527	Checks if the crawler should be aborted .
5528	Create the working directory
5529	Retrieve the report .
5530	Add a link priority to the link list
5531	Set the follow mode .
5532	Set the traffic limit .
5533	Set the working directory .
5534	Set a proxy for the current page request
5535	Set connection timeout
5536	Set socket timeout
5537	Resumes the previous crawler .
5538	This method sets the starting URL
5539	Removes all redirect - URLs from the PHPCrawlerDocumentInfo instance .
5540	Check if the url matches the rules of the url
5541	Adds a URL filter rule .
5542	Add one or more URL filter rules
5543	Mark a URL as followes
5544	Checks if any of the URLs in the cache .
5545	Returns an array of all URLs .
5546	Add URLs .
5547	Starts a new benchmark .
5548	Stops a benchmarking timer
5549	Reset all benchmark results .
5550	Returns all registered benchmark benchmarks .
5551	Returns current microtime .
5552	Opens database connection .
5553	Returns the URL hash for the given URL .
5554	Get the priority of a given URL .
5555	Add link priority .
5556	Add link priority
5557	Adds a PHPCrawlerDocumentInfo object to the queue .
5558	Return next document in prepared statement
5559	Creates an instance from a URL
5560	Sets the source url .
5561	Checks for a redirect - URL in the given http - header .
5562	Adds post data to a URL
5563	Updates the status of the crawler
5564	Registers a child pids
5565	Returns an array of child Pids
5566	Kills child processes
5567	Get the IP of a host
5568	Check if URL host in cache
5569	Removes a visitor from the list .
5570	Traverse an XPath expression .
5571	Filters an array by a given expression .
5572	Configure a Method
5573	Format a value for output .
5574	Format values .
5575	Write a configuration variable
5576	Get a value from a variable
5577	Get the configured engines .
5578	Expand a flattened array into a multi - dimensional one .
5579	Split token conditions
5580	Check if a key matches a token .
5581	Cache a value
5582	Sets message instances .
5583	Prints backtrace .
5584	Export function .
5585	Listen for messages .
5586	Parse a message
5587	Get the real file path .
5588	Loads a plugin .
5589	load config file
5590	Load all configuration files .
5591	Loads the Bootstrap configuration file .
5592	Read config file
5593	Set or get configuration options
5594	Read config value
5595	Load all modules in a directory .
5596	Read all plugins installed for a specific module
5597	Unloads module from loaded modules .
5598	Reload module .
5599	Return the time loaded for a given module .
5600	Is this module modified?
5601	Retrieve a module
5602	Check if module exists
5603	Array access .
5604	Get the value of a key .
5605	Set a value in the cache .
5606	Get multiple values from the cache .
5607	Set multiple values at once
5608	Call a method on the pool
5609	This method is called after a user has started
5610	Get the end of the return value
5611	Get the profile key for the given joinpoint
5612	Add the list of arguments to the command .
5613	Merges two arguments .
5614	Applies the given prefix to the given prefix .
5615	Set the cache expiration time .
5616	Sets the length .
5617	Read data from the socket
5618	Writes data to the socket
5619	Check if a command can be executed .
5620	Set the client version
5621	Process RDB record data
5622	Get the last key in the stack .
5623	Prepare the transaction object
5624	Executes the transaction .
5625	Read from socket
5626	Read from buffer
5627	Read string from buffer
5628	Read bytes from the server
5629	Read a record .
5630	Add bytes to the request .
5631	Unpacks 64 - bit signed .
5632	Reset internal data .
5633	Retrieves an associative array of Fusion properties .
5634	Renders a component
5635	Convert class names to string
5636	Gets a list of all recognized Issuers .
5637	Get All Product
5638	Returns an array of supported products
5639	Create a new order with an existing guardian order .
5640	Create a new order with an existing order
5641	Create a new order with the given parameters .
5642	Create order for payconic order
5643	Creates a new order with the specified payment card details .
5644	Create a new order with bank contact
5645	Create a new order
5646	Create a new Order with Klarna
5647	Create a new order with PayPal details .
5648	Create a new Order with Homepay
5649	Create a new order after PayPay .
5650	Create a new order
5651	Get an Order by ID
5652	Posts an Order .
5653	Sets the captured status of an order .
5654	Create new payment .
5655	Create new invoice with credit card
5656	Create new payment instance .
5657	Create new order with the specified parameters
5658	Create new payment with bank contact
5659	Create new invoice with paypal .
5660	Create new payment using homepay
5661	Create new payment instance .
5662	Creates a new Transactions .
5663	Returns an array without null values .
5664	Returns client instance
5665	Get Endpoint Resolver
5666	Checks if the given value is a valid ISO3166 - 1 .
5667	Builds the request body for the intent .
5668	Execute payment authorization
5669	Capture an authorized payment .
5670	Creates a new payment authorization .
5671	Create payment .
5672	Gets an access token from the server
5673	Builds a link .
5674	Builds a captured capture .
5675	Builds an Amount object from an array .
5676	Build return array .
5677	Builds an AccessToken object from provided data .
5678	Build a list of transactions
5679	Builds an array of transactions
5680	Sends a request and returns the response .
5681	Builds a Payment from an array .
5682	Builds PayPal authorization data .
5683	Builds Payer from data
5684	Builds array for payment
5685	Build an authorization from an array .
5686	Make safe string .
5687	Make a safe string for a given letter .
5688	Get submitted form value .
5689	Determine if the given key has a mutator .
5690	Get reflection object
5691	Returns a favicon element .
5692	Generate an HTML link .
5693	Render an ol element .
5694	Creates ul element
5695	Get form value .
5696	Create text input field .
5697	Create html email input field .
5698	Create a tel input field .
5699	Create a form number field .
5700	Create a url field .
5701	Create a form color input field .
5702	Check if a checkbox is checked .
5703	Get the url action .
5704	Get the URL for an attribute .
5705	Get controller action .
5706	Inserts a string at a specific position .
5707	Search for the first character in the string
5708	Array access .
5709	Unset a value
5710	Fetch data from buffer .
5711	Parses a file .
5712	Get line count .
5713	Unzip a zip file .
5714	Returns the size of the specified URL .
5715	Get files array .
5716	Frees the stream .
5717	Remove the buffer .
5718	Move to a position
5719	Insert data into the current iterator .
5720	Replaces current token with new data .
5721	Removes a value from the iterator .
5722	Copy a directory .
5723	Closes the stream
5724	Query scope for admin1 .
5725	Add Country Info
5726	Scope for city search
5727	Scope a query to search for a country .
5728	Returns a query to search for a feature .
5729	Creates an array of pending redirects
5730	Check if the uri has changed since the target workspace or not .
5731	Build the redirects for the node
5732	Creates a redirection from the given node
5733	Checks if the node needs a redirect
5734	Returns true if the current node is restricted to the given node type .
5735	Returns true if the current node is restricted to the given path .
5736	Returns the hostnames of the given ContentContext as array .
5737	Returns the UriBuilder instance .
5738	Loads a parameter name .
5739	Validates a page name
5740	Renders the current page picker
5741	Render label callback
5742	Init cron action .
5743	Display plugin action links .
5744	Returns the current version of the plugin .
5745	Get the remote version .
5746	Check file extension .
5747	Check file and extension .
5748	Parse the contributor headers from the file .
5749	Get plugin slug by path .
5750	Get remote contributors .
5751	Validate file .
5752	Find supported loaders
5753	Loads the given content .
5754	Create options for application .
5755	Get allowed tags
5756	Returns the allowed protocols
5757	Get a list of allowed domains
5758	Sanitize the domain
5759	Sanitize the attribute value .
5760	Sanitize uri value
5761	Sanitize CSS attribute value
5762	Loads svg .
5763	Strip comments from svg .
5764	Generate a string with flags replacement .
5765	Create an array of loaders .
5766	Parse loaders .
5767	Makes a class name space loaders .
5768	Parse options .
5769	Creates the cache provider .
5770	Prepares paths for caching .
5771	Creates a loader .
5772	Register variables .
5773	Loads the configuration from the cache .
5774	Merge global variables .
5775	get a resource
5776	Create a prefix for the current prefix
5777	Creates the resources .
5778	Add content to the file .
5779	Get supported files in directory
5780	Merge the content of this part .
5781	get value from array
5782	Checks if the given key exists in the array .
5783	Converts a PHP variable to a PHP value
5784	Type parser for value .
5785	Determine if the given regex matches the given regular expression .
5786	Fetch a variable .
5787	Check if a variable is defined .
5788	Implements replacements .
5789	Export a svg
5790	Remove a list of nodes
5791	Remove a child node .
5792	Set the base path .
5793	Prepares the paths for the given file .
5794	Returns an array of resources
5795	Parse the content .
5796	Return an import statement .
5797	Import resources .
5798	Create resource .
5799	Create import name .
5800	Performs the import
5801	Check boolean value
5802	Converts a boolean value into a boolean .
5803	Get aliased mime aliases .
5804	update filename extension
5805	Checks an alias for a file .
5806	Check allowed aliases .
5807	Loads an array of replacement configurations .
5808	Get supported files
5809	Makes an array of resources .
5810	Check if cache is available .
5811	Make cache file
5812	Set the version of assets .
5813	Reads the contents of a file .
5814	Send HTTP request
5815	Set curl options
5816	Execute a GET request .
5817	Execute a PUT request .
5818	Executes a DELETE request .
5819	send post request
5820	Perform a HEAD request
5821	Execute the curl request
5822	Install an extension
5823	Add more buckets .
5824	Parse uri .
5825	Writes the XML data
5826	Check if xml is valid
5827	set up a range
5828	Creates a form tree with values
5829	Add values option
5830	Add an aggregate element to the current element .
5831	Returns the template parameters
5832	Performs a search and returns the results
5833	Retrieve a key value
5834	Retrieve the keyvalue element .
5835	Highlight a content .
5836	Get the REST client .
5837	Get the RESTful client .
5838	Get the REST API client .
5839	Get the REST API instance .
5840	Get database object
5841	Get options .
5842	Handles autoloading of classes
5843	Get this field as XML .
5844	Add an option to the list .
5845	Append an option xml string to the dom .
5846	Read config by name
5847	Write config to api
5848	Delete a config value
5849	Set the search options
5850	Read a document .
5851	Write the document
5852	Delete a document .
5853	Reads the metadata from the project .
5854	Write metadata to the current file .
5855	Delete all metadata from the project .
5856	Sets the content of the log file .
5857	Get the mime - type of a file .
5858	Logs a soap call .
5859	Decode the provided SOAP reply
5860	Convert an associative array to an associative array of associative arrays
5861	Do LDAP sync .
5862	Return list of phone number names
5863	Return a list of all phones in a particular site
5864	Returns a phone search by name .
5865	Use this method for a phone search
5866	Return phone by name
5867	Get phone numbers by name
5868	Return array of device pool names
5869	Returns the list of registered site names
5870	Get lines by site
5871	Get lines details by phone number
5872	Get object types by site
5873	Retrieves an object type by its name
5874	Deletes an object type
5875	Add capabilities .
5876	Returns the latitude in seconds .
5877	Get longitude from Exif data
5878	Get body type
5879	Get error message from body
5880	Get URL string
5881	Create a new REST API
5882	Delete the API
5883	Wait until the request has success .
5884	Check if an API request exists
5885	Get data as element
5886	Add term options
5887	Add facet options to dom .
5888	Add a fragment scope element to given dom .
5889	Set the file content
5890	Get a result given an URI .
5891	Get a result by index .
5892	Get a facet by name
5893	Adds the constraints .
5894	Returns the extract metadata as XML
5895	Add the preferred elements
5896	Get the transform results as an element
5897	Adds the collection .
5898	Delete existing collection
5899	Add permissions .
5900	Delete a set of role permissions
5901	Delete properties .
5902	Get metadata as XML
5903	Load collection from XML .
5904	Enables the alias loader .
5905	Sets the container .
5906	Compares the constraints of a fixture .
5907	Compare the fixture indexes .
5908	Internal method to compare field presence .
5909	Retrieves all fixtures files
5910	Compare field presences .
5911	Define the form .
5912	Create a horizontal form from a class .
5913	Create a Bootstrap label .
5914	Output error message .
5915	Create a form group
5916	Generates a form action .
5917	Generates a hyperlink .
5918	Creates an alert
5919	Create a password input field
5920	shortcut for file field
5921	Create a hyperlink .
5922	Create a secure link
5923	Generates a hyperlink route .
5924	Generates a hyperlink to an action .
5925	Generates a mailto link
5926	Flash an alert
5927	Execute the replacement
5928	Get short message
5929	Retrieves a value from the cache .
5930	Stores a value in the cache
5931	Removes one order from basket
5932	Clears all orders .
5933	Updates existing basket
5934	Get literal value
5935	Return the type of a literal
5936	Extract a literal language from a string
5937	Create an IRI
5938	Creates a literal .
5939	Check the MD5 of the request
5940	Build the response .
5941	Initializes the tokenizer .
5942	Tokenize the input .
5943	Obfuscate given code .
5944	Encodes an alias
5945	Creates a default instance .
5946	Returns a statement with the group actor ID .
5947	Returns a reference to the minimal statement with the specified ID .
5948	Get Statement with Result
5949	Returns a statement with the specified sub - statement .
5950	Create an option .
5951	Get current statement result
5952	Attach a view transformer
5953	Initializes the view helper
5954	Get the file attached to the application
5955	Collect all files from uploaded files
5956	Cleans the layout .
5957	Attach the view resolver to the response .
5958	Render the PDF
5959	Resolve template path .
5960	Registers an option .
5961	Gets an option value .
5962	Creates an ActivityProfileDocument from document .
5963	Generate AgentProfileDocument from document .
5964	Creates a state document from the supplied document data .
5965	Add a behavior .
5966	Adds a value to the given behavior .
5967	Define default behavior .
5968	Set the default value for the action .
5969	Execute the behavior
5970	Get the behavior .
5971	Empty default behavior .
5972	Set the behavior
5973	Start metrics .
5974	Stop metrics .
5975	Execute the action .
5976	Create a new iterator with every step in the collection .
5977	Get the first item .
5978	Get the last item from the collection .
5979	Get the maximum value of a collection .
5980	Return the items that pass the truth test .
5981	Get the collection as an array .
5982	Convert the given items into an array .
5983	Checks if a bucket is enabled
5984	Builds the map from the given map .
5985	Creates a new HashMap instance .
5986	Get a bucket instance .
5987	Sets the map .
5988	Create a new builder for a given feature slug .
5989	Set user bucket
5990	Describes a list of tables .
5991	Describe a database table .
5992	Create a list of tables
5993	Create table .
5994	Creates table fields .
5995	Create field .
5996	Creates an array of relationships .
5997	Create a relationship .
5998	Update the tables information .
5999	Update a table
6000	Updates the given fields .
6001	Update field schema .
6002	Update multiple relationships .
6003	Update a relationship .
6004	Delete multiple tables .
6005	Deletes a table .
6006	Set the target length field
6007	Truncate a table
6008	Generate a paged result response .
6009	Rewinds the iterator to the first element .
6010	Escapes a string for LDAP .
6011	Add entry to LDAP directory
6012	Compare an entry and return the result
6013	Establish a connection to an LDAP server
6014	Set paged result
6015	Binds to LDAP directory
6016	get the value of an option
6017	Add attributes to current entry
6018	Delete attribute values from an entry .
6019	replace attribute values
6020	Modify an entry
6021	Modify an entry
6022	Renames the entry
6023	Binds to the ASL .
6024	Performs an LDAP search on the specified base DN .
6025	Sets an option on the current resource .
6026	Verify that ldap operation is valid
6027	Add a new set to the set
6028	Compute the reference set .
6029	Computes the product .
6030	Returns the resource names for a type .
6031	Load a resource
6032	Compare two table names .
6033	Builds a SQL statement for adding a primary key .
6034	Generate SQL for creating view .
6035	Binds a value to a PDO statement .
6036	Extracts the PDO parameter from the type
6037	Extracts the column type from the database schema .
6038	Extracts the default value of a field .
6039	Add data to the object
6040	Generates a query with parameters
6041	Create request instance
6042	Executes a query .
6043	Set the HTTP method of this route .
6044	Set the protocol used .
6045	Generates a query by a GroupID
6046	Set the aggregators array .
6047	Sets the filter data
6048	Set the post aggregators
6049	Registers TinyMCE js
6050	Validate that all required parameters are set
6051	Returns the JSON encoded string
6052	Default swagger interface
6053	Prepare the database .
6054	Returns whether this table has the given column .
6055	Returns the type of a column .
6056	Updates a table with the given callback .
6057	Drop a table .
6058	Removes all registered tables
6059	Rename a blueprint .
6060	Executes a SQL query .
6061	Add a new attachment from a request .
6062	Add a media to the attachment .
6063	Add from raw data
6064	Add content from URL
6065	Delete all thumbnails
6066	Returns the last modified time of the file .
6067	Returns a unique name for this file .
6068	Delete thumbnails for current image
6069	Delete file from disk
6070	Delete empty directory
6071	Check if a given directory is empty .
6072	Check if file exists
6073	Get the thumb
6074	Generate thumbnail filename
6075	Get default thumbnail options
6076	Make thumb .
6077	Get the public path of the attachment .
6078	Returns a path to the temporary directory .
6079	Create the column definition for enum values .
6080	Add a time expression to the query .
6081	Add a Timestamp column to the query .
6082	Handle curl write function
6083	Main action .
6084	Bootstrap the application .
6085	Normalize url .
6086	Adds a route to the stack
6087	Add HTTP GET route
6088	Add a POST route for the application .
6089	Add PUT route
6090	Adds a route for the application .
6091	Adds a DELETE route for the application .
6092	Adds custom options for the route .
6093	Adds a HEAD route for the application .
6094	Render the view .
6095	Get the default source data .
6096	Create migration .
6097	Ensure that migration does not exist .
6098	Get the stub content .
6099	Gets the base path .
6100	Scope a query to only include the causer id .
6101	Scope by subject .
6102	Builds the array expression .
6103	Get migration paths .
6104	Main view .
6105	Set request parameters
6106	Setter for headers .
6107	Set HTTP proxy
6108	Setter for cookies .
6109	Set a cookie value .
6110	Set additional options .
6111	Build and send the response .
6112	Set the request .
6113	Build the blueprint .
6114	Build the table definition
6115	Builds the command statements .
6116	Add an index column
6117	Create a new float column on the table .
6118	Create a new double column on the table .
6119	Create a new decimal column on the table .
6120	Gets the timestamps for this table .
6121	Will delete timestamps .
6122	Add a morphs field .
6123	Sets a list of mutable tokens .
6124	Add a new column to the definition .
6125	Create reference name .
6126	Adds an element to an array .
6127	Collapse an array into a single array .
6128	Read an item from an array using dot notation .
6129	Fetch an item from an array using dot notation .
6130	Retrieves and removes an item from an array .
6131	Applies the callback to all elements of an array .
6132	Explode the pluck parameters .
6133	Locale aware levenshtein algorithm
6134	Capitalizes a value .
6135	Transforms a string to upper case
6136	Format an Address instance .
6137	Returns the url
6138	Returns composer command
6139	Builds the query parameters
6140	Builds the header string .
6141	Build the HTTP proxy .
6142	Builds the cookies .
6143	Register the given event .
6144	Register a model event
6145	Boot the Nicer events .
6146	Remove all of the event listeners for the model .
6147	Creates a query to fetch location models .
6148	Get a location by its identifier
6149	Get location by slug
6150	Shows a message .
6151	Create the overlay message .
6152	Clear all messages .
6153	Add a command to the stack .
6154	Register the migrator
6155	Register the prefix
6156	Register storage
6157	Bootstrap application services .
6158	Adds a like statement to the current query .
6159	Get a subset of dates from a column .
6160	Find a model by its primary key .
6161	Retrieve the current user .
6162	Log out user
6163	Log in a user
6164	Retrieve a user from the remember me cookie .
6165	Retrieves a user based on their credentials .
6166	Register database profiler .
6167	Register view profiler .
6168	Write migration file
6169	Get the events to be recorded .
6170	Dump array variable
6171	Gets a var id
6172	Generate array hash
6173	Check array recursion
6174	Check object recursion
6175	Dump session data
6176	Main execution method
6177	Describes a route .
6178	Add additional directories
6179	Normalize a class name .
6180	Load mapped class .
6181	Require a class .
6182	Load the plugin manifest .
6183	Write the manifest file .
6184	Load translations from all drivers .
6185	Load lang file .
6186	Set query constraint .
6187	Parse read data
6188	new query builder
6189	Returns true if STDOUT supports colorization .
6190	Apply the colors .
6191	Get ran migrations .
6192	Returns an array of migration files
6193	Run the pending migrations .
6194	Run up migration .
6195	Get migrations for rollback .
6196	Rollback migrations .
6197	Rollback migrations .
6198	Rollback migration .
6199	Run migration down .
6200	Pretend to run migrations .
6201	Get migration files .
6202	Clear loader .
6203	Adds a primary key .
6204	Add a new column
6205	Create a timestampable field .
6206	Add a soft deleteable field
6207	Add new column
6208	Describes the column type .
6209	Check if any of the given options exists .
6210	Returns true if the parent ID of the item is the same as the parent .
6211	Scope a query to only include live posts
6212	Get path attribute .
6213	Register the Crypt class .
6214	Main execution method .
6215	Builds SQL to rename a table
6216	Boot the hasPermalink trait for the model .
6217	Get slug key .
6218	Query scope for finding similar slugs .
6219	Query method .
6220	Executes a SQL statement
6221	Returns a description of the columns used in a table .
6222	Executes an SQL query and returns the first result .
6223	Fetch all results
6224	Create an insert query .
6225	Performs an UPDATE query .
6226	Delete one or more records from a table .
6227	Add a limit clause to the query .
6228	if table exists .
6229	if view exists .
6230	Creates a new database table .
6231	Creates a new view .
6232	Drop a view .
6233	Add a column to the schema .
6234	Modifies a column
6235	Generates a drop column from a schema .
6236	Adds an index to a table .
6237	Drop an index on a table .
6238	Adds a primary key to a table .
6239	Drop a primary key for a table .
6240	Adds a foreign key to the table .
6241	Generates a drop foreign key constraint .
6242	Returns a description of the specified table .
6243	Returns a description of method references .
6244	Get table options .
6245	Returns the panel HTML .
6246	Adds a column to a database table .
6247	Changes a column in a table .
6248	Drops a column .
6249	Drops an index .
6250	Adds a primary key to a table .
6251	Drops a foreign key .
6252	Creates a new database table .
6253	Creates a view .
6254	Drops a table .
6255	Drops a view .
6256	Bind paths inside the container .
6257	Has database
6258	Registers the services
6259	Bootstrap the application services .
6260	Get the fillable attributes from an array .
6261	Check if a key is fillable
6262	Convert from one currency to another
6263	Check if currency is active
6264	Get all currencies .
6265	Registers an array of modules .
6266	Attach listener .
6267	Generate a reset code
6268	Complete the reset password
6269	Check reset password code .
6270	Complete the user activation .
6271	Prompt user for input .
6272	Register currency .
6273	Route middleware .
6274	Attach a middleware to a class .
6275	Get reflection class
6276	Set the value of an object property .
6277	Returns value of given property
6278	Invoke method on an object .
6279	Save cache .
6280	Test whether a key exists .
6281	Get user currency .
6282	Returns the coordinate equality
6283	Render a block
6284	Bind an event to an event
6285	Emits the event sort events .
6286	Unbind an event
6287	Fires an event
6288	Get dependency injection container
6289	Check if the header exists
6290	Setter for headers property .
6291	Build header array
6292	Check if coordinates have the same ellipsoid .
6293	Get detailed message about an exception .
6294	Main execution method .
6295	Register session handlers
6296	Converts this date to a \ DateTime instance .
6297	Prepare the output file .
6298	Get PHP code from a file
6299	Parse a PHP file .
6300	Registers services .
6301	Get node data
6302	Filter the query by an ancestor node
6303	Adds a WHERE clause to the query .
6304	Filters nodes that are descendants of the given node .
6305	Retrieve the descendants of a specific node .
6306	Specify the depth of the query .
6307	Wrap the columns in a table .
6308	Search for children .
6309	Set default order .
6310	Moves a node .
6311	Create a new Gap .
6312	Patch params .
6313	Patch a column .
6314	Counts the number of errors .
6315	Fix nested set tree
6316	Rebuild a tree
6317	Boot the purgeable trait for a model .
6318	Add purgeable attributes .
6319	Purges the attributes of the model .
6320	Returns the original purge value of an attribute .
6321	Get an item from the collection .
6322	Set a single value in the collection .
6323	Remove an item from the collection
6324	Saves the changes .
6325	Load cache .
6326	Compile a closure for a function .
6327	Main execution method .
6328	Called after the request is sent
6329	Add the response header .
6330	Get the rate limiter .
6331	Update model attributes .
6332	Log a migration in the database .
6333	Create repository .
6334	Get a table instance .
6335	Get database name
6336	Sets a single attribute
6337	Appends a single attribute
6338	Set the content of this element
6339	Add some content
6340	Register multiple commands
6341	Generates main http routes cache
6342	Returns an array of executed SQL queries
6343	Checks if the key has too many attempts .
6344	Get the value for a key
6345	Retrieve the number of seconds from the cache
6346	Clear a key
6347	returns the time for the given key
6348	Main function .
6349	Register the files system .
6350	Saves an instance of the facade .
6351	Initiate a mock expectation on the facade .
6352	Create a fresh mock instance .
6353	Check if the instance is a mock .
6354	Resolves a facade instance
6355	Process the template selector
6356	Process all template files
6357	Parse template content
6358	Process update data .
6359	Attaches an event to all listeners .
6360	Detach events .
6361	Geocode a query
6362	Performs a reverse query
6363	Get the status for the given ran migrations .
6364	Main execution method .
6365	get HTTP routes infos
6366	Get curl options
6367	set curl infos
6368	Compiles a dot - compatible .
6369	Starts the process .
6370	Wait for the process to complete .
6371	Stop the daemon .
6372	Close all pipes .
6373	Executes the command .
6374	Optimize memory usage .
6375	Generate output .
6376	Fill a value with a given key .
6377	Read an object property
6378	Get object property
6379	Get value from a key .
6380	Set an object value .
6381	register PHP error handler
6382	Handle PHP errors
6383	Handle an error .
6384	Resolve a migration class name .
6385	Determine if logging should be logged .
6386	Register log files .
6387	Use daily files .
6388	Register the logger class .
6389	Setup the connection settings
6390	Logs SQL errors .
6391	Add a single item to the top of the page
6392	Get a single property .
6393	Sets a single property .
6394	Sets properties .
6395	Get the property s original value .
6396	Check if a property is cast .
6397	Returns dirty values of properties
6398	Builds navbar header .
6399	Adds a dropdown submenu .
6400	Adds a button
6401	Flushes log messages to logger
6402	Adds an item
6403	Add css to the list
6404	Returns a Gravatar URL .
6405	Sets the value for the specified key .
6406	Get DB Connection
6407	Get the object s locale
6408	Add additional params to url
6409	Turns links in URLs .
6410	Add row footer columns .
6411	Include a CSS file
6412	Get PHP self .
6413	Build POST data
6414	Get all locales available for the current language
6415	Translates a given lang string into a default locale .
6416	Set the language to use .
6417	Sets configuration property .
6418	Get all status messages
6419	Lists all countries
6420	Add item to list group
6421	Set Object Name
6422	Sets an ANSI color .
6423	Get color of type
6424	Http get request
6425	Create a post request
6426	Create delete request
6427	Returns the current key
6428	Unset a column value
6429	Reindex an array by a given column .
6430	Draw the part if any
6431	Sets up context
6432	Returns the number of items in the body
6433	Answers true if the html body is empty .
6434	Adds slash to SQL statement
6435	Creates a connection to the database
6436	convert array to insert
6437	Prepare select statement
6438	Sets the column on the object
6439	Creates a single slide .
6440	Adds a bootstrap item to the top of the cart .
6441	Adds a message to the log .
6442	Add a status object to the message .
6443	Gets the tag name .
6444	Gets a single tag property .
6445	Finalizes the modal .
6446	Duplicate the next runner
6447	Add ajax tab to the page
6448	Print a trace
6449	Attach an observer to the event .
6450	Execute an observer .
6451	Detaches an observer .
6452	Detach all events for the observer .
6453	Validate a Pod object
6454	Get the connection
6455	Returns the driver
6456	Generates a random parameter .
6457	Converts a driver exception into an array .
6458	Create database .
6459	Delete a database .
6460	Returns information about a database .
6461	List all databases .
6462	Create a new database connection .
6463	Use a connection .
6464	Get a toolbox object .
6465	Set model formatter
6466	Load a collection
6467	Creates a new graph .
6468	Rename a collection
6469	Get information about an index
6470	Loads a graph
6471	Process a store result
6472	Convert a document type to a list of documents
6473	Convert array to pod
6474	Convert driver document to Pod
6475	Creates a new vertex
6476	Creates an edge model .
6477	Creates a document instance .
6478	Setup the model .
6479	Determine if the current store was previously stored .
6480	Adds a command to the transaction manager .
6481	Validate a Graph Type .
6482	Map a callback to a list of elements
6483	Run the crawler for the given content .
6484	Parse URL .
6485	Parse image .
6486	Parse string .
6487	Parses the given date and returns the DateTime object .
6488	Loads a class
6489	Start coverage .
6490	Initialize the configuration .
6491	Relate an edge to a model .
6492	Get Inbound Edges .
6493	Convert this object to a Vertex document .
6494	Encode an object
6495	Create collection .
6496	Delete a collection .
6497	Rename collection .
6498	Trash the collection .
6499	Returns information about collection
6500	Get collection statistics .
6501	Count collection .
6502	Loads a collection
6503	Unload a collection .
6504	Get index information
6505	Get the geo - fields for a query collection .
6506	Find one or more transactions
6507	Retrieve document collection name
6508	Remove user from the database .
6509	Get user information
6510	Delete AQL User functions by namespace .
6511	Lists the registered user functions .
6512	Get current version .
6513	Get current version information .
6514	Get time .
6515	Set data by key
6516	Removes an object property
6517	Returns the value associated with the given key .
6518	Set the document ID .
6519	Set the distance info
6520	Reset the meta
6521	Return the result as an array
6522	Export this object as JSON
6523	Return a JSON representation of this object .
6524	Convert this Navitia object to a Document instance .
6525	Load data from driver .
6526	Loads a model from an assoc array
6527	This event is triggered after the object has been saved .
6528	Sets the receiver to
6529	Get a To Id .
6530	Sets the from address .
6531	Get a from address for the current api user .
6532	Convert this object to an edge document .
6533	Starts a transaction
6534	Commits current transaction
6535	Clear transaction info
6536	Add a read collection
6537	Add a write collection to the transaction
6538	Pauses an active transaction .
6539	Resumes the current transaction .
6540	Add a command
6541	Search commands by action and id .
6542	Return a random command .
6543	Creates a graph .
6544	Deletes a graph .
6545	Get graph info
6546	Get outgoing edges
6547	Answers the filters for the template .
6548	Render filter box
6549	Render all widgets
6550	Opens the container .
6551	Close the container .
6552	Open a form .
6553	close the form .
6554	Check if filter is active
6555	Return a filter button
6556	Renders a reset button .
6557	Renders a back to the list button
6558	Creates the storage key for the persist session .
6559	Checks if the filter url parameter is valid .
6560	Create fulltext search conditions .
6561	Flatten the given options .
6562	Returns list of filters .
6563	Get redirect url from post data .
6564	Add filter params to url .
6565	Checks for a list of filters .
6566	Builds a statement from a pdo object
6567	Reduce the collection to a single value .
6568	Type check .
6569	Typecast an iterable .
6570	Register the service provider with the container .
6571	Make a new guzzle client .
6572	Setup the user detection .
6573	Setup application paths .
6574	add a new builder to the pipeline
6575	Stub a pipeline .
6576	Create a pipeline with the given iterable .
6577	Set the keys for the current iteration .
6578	Slice a slice of the collection .
6579	Sort an array by a field .
6580	Set variables .
6581	Set a variable .
6582	Get the page s pathname .
6583	Returns the code for a script tag .
6584	Is allowed script combinations
6585	Converts a string to a list of ASCII characters
6586	Creates users
6587	Get all available layouts paths
6588	Add global variables .
6589	Process page collection .
6590	Set param to feed
6591	Extracts param from a SimpleXMLElement .
6592	Runs a git command .
6593	Sorts items by date
6594	Removes an item from the feed
6595	Replaces an item with another one .
6596	Merge a feed into this feed .
6597	Auto - slice the array
6598	Fetches duplicated users
6599	Bulk insert records .
6600	Writes Items to the feed
6601	sets the current position
6602	Buffer the schedule
6603	Sort fields by date
6604	import config file
6605	Set value from data .
6606	Set the source directory
6607	Set the source directory
6608	Finds the page s layout .
6609	For backwards compatibility .
6610	Parse the content
6611	Returns current section
6612	Get permalink
6613	Sets the configuration object .
6614	Builds the final steps .
6615	Returns the version
6616	Filter pages by variable .
6617	Sorts an array by date .
6618	Creates a URL .
6619	Minify a file
6620	Compiles the css file into a css file .
6621	Read time of the passed text .
6622	Hashes a file
6623	Collect menus .
6624	Renders an RSS feed .
6625	Load an RSS feed .
6626	Sniff input .
6627	Check if given input matches given type .
6628	Executes the sniffer against all input .
6629	Runs the name of the input .
6630	Saves a schedule .
6631	Render RSS feed .
6632	Creates the channel item node .
6633	Get feed author
6634	Get comment routes
6635	Determines whether the given content contains XML syntax markers .
6636	Collects taxonomies from pages .
6637	Create node pages
6638	Compile all views .
6639	Compile all views files in path .
6640	Compile single view file .
6641	Generates a diff
6642	Parse a diff
6643	Boot extension .
6644	Finish all registered extensions .
6645	Register active extensions .
6646	Run after extension .
6647	Register service providers .
6648	Write the manifest file .
6649	Register deferred service provider .
6650	Load queued service provider .
6651	Activate an extension .
6652	Map extension configuration .
6653	Configure domain surface
6654	Detect extension .
6655	Gets an option value by name .
6656	Register Orchestra Platform .
6657	Registers a new extension .
6658	Get a route by name .
6659	Activate an extension .
6660	Refresh extension info
6661	Reset an extension
6662	Check if the event should be excluded .
6663	Create Orchestra Platform driver .
6664	Bootstrap application .
6665	Bootstrap Orchestra Platform configuration .
6666	Displays the form .
6667	Bootstrap menu handler .
6668	Bootstrap sidebar placeholder placeholders .
6669	Bootstrap the validation rules .
6670	Attach listener on an event .
6671	Initiate plugin .
6672	Sets the theme .
6673	Boot the theme .
6674	Resolving theme .
6675	Get the available theme paths .
6676	Get theme autoload files .
6677	Validates the provided theme
6678	Get available theme .
6679	Render a macro .
6680	Filter a formatted date string
6681	Verify the status of the extension .
6682	Add a search path .
6683	Detect composer extensions .
6684	Get the contents of a manifest file .
6685	Generate manifest config .
6686	Get composer lock data .
6687	Guess extension name from manifest .
6688	Guess extension path by given path .
6689	Resolve extension namespace from manifest .
6690	Validate an extension name .
6691	Register the view finder .
6692	Register the theme manager .
6693	Detect themes .
6694	Set the current theme .
6695	Sets theme resolver .
6696	Register the Orchestra Platform extension .
6697	Register the extension config manager .
6698	Register the extension finder .
6699	Register the extension status checker .
6700	Execute the file permission .
6701	Get scheme .
6702	Add a domain to the route .
6703	Get domain .
6704	Get Namespace .
6705	Check if the current route matches the given pattern .
6706	Get route prefix .
6707	Get route root .
6708	Get the base URL .
6709	Resolve the base URL from the given root .
6710	Safely parse a YAML string .
6711	Check duplicate key
6712	Activate a plugin .
6713	Deactivates a package .
6714	Register the extension providers .
6715	Register the extension plugin .
6716	Boot all extensions .
6717	Start the autoloader .
6718	Fire an event .
6719	Get autoload files .
6720	Load autoloader file
6721	Process deprecated comment
6722	Start the application
6723	Generate a log message .
6724	Generate Exception trace
6725	Send an alert .
6726	turns into a daemon
6727	Fakes a shutdown function and runs it .
6728	Returns the slug for this model
6729	Ensure that a field has been changed .
6730	Sends the HTTP headers .
6731	Stores a cookie
6732	Clear all cookies
6733	Make request handler
6734	Store the uploaded files .
6735	Remove elements from collection
6736	Returns an array that matches the given condition .
6737	Return a copy of the closures array without HTML tags .
6738	Return an array of integers from the given range .
6739	Flush all cache files
6740	Combines multiple files
6741	Connect to the SSH server .
6742	Executes a command on the SSH2 server .
6743	check client server
6744	IP validator
6745	Create a named pipe from a file path .
6746	Registers a deployer .
6747	Returns a deployer .
6748	Add a server .
6749	Method to set property servers
6750	Get a server instance .
6751	Deploys the deployer .
6752	Get options .
6753	Process open tokens .
6754	Generate a slug for an AJAX action .
6755	Handle ajax request single
6756	Trigger AJAX callbacks .
6757	Handle ajax request
6758	Get value of post request
6759	Generate random hex string
6760	Start session var .
6761	Clears all session variables .
6762	Check if a string is serialized .
6763	Get slug for this item
6764	Add a method .
6765	Update the current session .
6766	Deletes the session .
6767	Verify socket IP
6768	Opens a database .
6769	Garbage collection of sessions .
6770	Matches the rule against the provided route .
6771	Get the data page .
6772	Check if the current page is a page
6773	Loads class metadata
6774	Add a new condition .
6775	Initializes all installed plugins
6776	Return a list of all available plugins .
6777	Load Twig environment
6778	Sets the default language
6779	Check the token and expiration date .
6780	get view content by name
6781	Add a javascript variable .
6782	add a js file
6783	add css stylesheet
6784	Get the file content .
6785	get content with template
6786	Get all scripts
6787	Get all css files
6788	Get install folder .
6789	Is access allowed .
6790	Return access control array
6791	Get roles chain
6792	Gets user language
6793	Translate a choice by its number .
6794	Returns the translation for a specific locale .
6795	Get translation files
6796	Returns the translation for the given id .
6797	Get the basic translation for a given number .
6798	Generate a toggle command .
6799	Build the enabled plugins for the attribute .
6800	Handle the event .
6801	Run the MVC framework .
6802	Prepare controller and create it .
6803	Execute the ACL .
6804	Execute auth .
6805	Executes the resolve route .
6806	Set and autoload and app libraries .
6807	Get a new library instance
6808	Create a core and controller
6809	Calls a class and method with input arguments .
6810	Get function arguments
6811	Get the role and user .
6812	Get the role of a user
6813	Returns an array of current options .
6814	Set a bulk of parameters to the passed array
6815	filter parameter by name
6816	Filters a variable
6817	Opens database connection
6818	Close connection .
6819	Execute a SQL query
6820	Executes a query and returns all results as an associative array .
6821	Executes an insert query .
6822	Executes a SQL query and returns the number of affected rows .
6823	Update a record
6824	Logout the current user
6825	Set user - id
6826	Set the username .
6827	Set role - id
6828	Set role name
6829	Validates the constraint .
6830	Get list of installed plugins .
6831	Search plugin directories
6832	Search the plugin factory class in the given directory .
6833	Returns whether the given file implements a plugin implementation
6834	Returns the string representation of a function .
6835	Execute a Closure .
6836	Executes given file
6837	Run command for windows .
6838	Sets the path to the autoload file .
6839	Checks if the process is currently running .
6840	Kill a process .
6841	Reset all log sections
6842	Create a new url from a string .
6843	Get image driver
6844	Builds the image .
6845	Gets proportional width of the image .
6846	Gets proportional height from the given width .
6847	Format a binary string
6848	Formats a byte .
6849	Create a new session instance .
6850	Initializes the driver .
6851	Parses POST data
6852	Generate URL
6853	Get server parameter
6854	Get the default input definition .
6855	Register artisan commands
6856	Returns the model path .
6857	Adds a force option to the command definition .
6858	Adds the model argument .
6859	Validate model argument .
6860	Adds the table argument .
6861	Validate table argument .
6862	Get Table instance
6863	Generate a file .
6864	Handle the request
6865	Checks if the stream is seekable
6866	Creates a parser with the given body
6867	Add a body parser .
6868	Adds an argument .
6869	Adds controller argument .
6870	Creates a request .
6871	Create a server request .
6872	Creates and returns a new stream .
6873	Create a stream from a file .
6874	Creates a new uploaded file .
6875	Create a URI from a string
6876	Format the given bytes
6877	Formats the number .
6878	Normalize bytes .
6879	Normalize precision .
6880	Return an instance with the provided HTTP method .
6881	Set the URI .
6882	Return the target value from the URI
6883	Add a middleware to the end of the stack .
6884	returns reason phrase for given code
6885	Get the incoming messages .
6886	Retrieve a single user from the message .
6887	Returns the extension of a filename
6888	Normalize filename .
6889	Return the contents of the file
6890	Fix WP - site URL .
6891	Fixes the WordPress include folder .
6892	Fix network admin url .
6893	Fix WP double slashes
6894	Init filters .
6895	Set the current working folder name
6896	Transforms url into full path
6897	URL - encodes a path
6898	Decode a URL path
6899	Read content from a directory
6900	Compiles data in memory segment
6901	Writes a log entry .
6902	Logs memory usage
6903	Writes a timeload to the database
6904	Write a set of sections to the profiler .
6905	Flip an array of files .
6906	Set the stream .
6907	Get hash from uploaded file .
6908	Get the media type .
6909	Get the query parameters
6910	Check if the request is ajax request
6911	Convert json to document
6912	Converts an array of Entities into Entities
6913	Creates actions from data array
6914	Parses the fields array from dataArray .
6915	Convert an array of links into LinkDataArray
6916	Sends a deferred request .
6917	Call the given request and return the response .
6918	Prepare a cURL request
6919	Set the correct URL .
6920	Sets the request headers .
6921	Creates a response from the given result .
6922	Splits the header from the response .
6923	Parse response headers into an array
6924	Count the number of log items
6925	Display the resource
6926	Gather all files in section .
6927	Gather Get Input Get
6928	Gather input post data .
6929	Gathers information about the session
6930	Get current microtime
6931	Extracts information from a section match section .
6932	Creates an array of sane files .
6933	Creates a new uploaded file .
6934	Flip an array of files .
6935	Recursive array merge
6936	Apply the session driver to the request .
6937	Add a new menu
6938	Edit resource .
6939	Attempts to update an existing record .
6940	Create a redirect for an object
6941	Save new order
6942	Deletes a record
6943	Get the uploaded files .
6944	Configure the request with the uploaded files .
6945	Check uploaded files .
6946	Load request headers
6947	Return an instance with the specified request attribute .
6948	Return an instance without the specified request attribute .
6949	Check if the HTTP headers have been modified since the last modification time
6950	Get a specific header .
6951	Sets the status
6952	Process the middleware .
6953	Get MySQL version
6954	Authenticate a user .
6955	Find all active users .
6956	Find all deactivated actions .
6957	Creates a new role .
6958	Get metric option
6959	Sets the current language based on post id .
6960	Check if a container is encrypted
6961	Check if a string is encrypted
6962	Dumps the file .
6963	Export array as PHP code
6964	Called before all global classes are defined .
6965	Called after each class has been initialized .
6966	Returns an exception for the given token types
6967	Make a new container instance .
6968	Recover a deleted record
6969	Start a new class extensions process .
6970	Set new config classes
6971	Processes a class or an array of config classes .
6972	Process class definitions .
6973	Sets the service definitions .
6974	Gets a definition .
6975	Removes a definition .
6976	Set the config classes .
6977	Generate containers .
6978	Dumps the list of containers into a file .
6979	Evaluate the inner value
6980	Set address .
6981	Execute notice .
6982	Prepare and execute a JSON request .
6983	Create a response from an exception .
6984	Parse http response
6985	Send Permission request to server
6986	Wait for subscription message to be reported .
6987	Sends an action result .
6988	Format layout template files .
6989	Upload to file .
6990	Returns a dashed version of a given value .
6991	Get slice .
6992	Get the indices for a given step .
6993	Parse option value .
6994	Validate the values array argument .
6995	Create an Option instance
6996	Get the reply to send to the reply stack .
6997	Get property value
6998	Get matching chars .
6999	Compare two images
7000	Create a diff - based gif on the expected image
7001	Create a comparison image on different images .
7002	Create new image .
7003	Handle POST HTTP requests
7004	Register a route .
7005	Try to find a matching route .
7006	Match current route
7007	Redirect the user to a given url .
7008	Parse route parameters
7009	Get the date from the file
7010	Handle image save
7011	Sends a GET request to the wp - remote server .
7012	Creates a POST request to the wp - remote server .
7013	Sets the authentication
7014	Returns the configuration for the given option .
7015	Validates the configuration file .
7016	Get excerpt from text
7017	Convert errors into exceptions
7018	Get the dotted extensions .
7019	Validate Widget Id
7020	set the user id
7021	Aggregate documents .
7022	Append a string
7023	Prepends a string to the beginning of the string .
7024	Determine if the given string matches the given pattern .
7025	Limit the number of words in the string .
7026	Generate a v4 UUID .
7027	Merge with another array
7028	Convert the string to HTML entities .
7029	Truncates the string to a maximum length
7030	Limit the current string
7031	Limits the string to a safe range .
7032	Convert to vars .
7033	Encrypts the given key .
7034	Retrieve value from a encrypted string
7035	Returns a Container object .
7036	Generate a parser from a grammar file
7037	Sets the organization settings .
7038	Retrieve documents from the database
7039	Set per page
7040	Method to set property search
7041	Convert a value into a number .
7042	Get value searchable .
7043	Convert value to bool
7044	Get the grammar .
7045	Create GIF command
7046	Create Gif command
7047	If there are multiple tokens at once .
7048	Returns a formatted number
7049	Returns true if there is a property with the given name .
7050	Return a property by name .
7051	Removes a property by name .
7052	Check if a method exists by name .
7053	Returns a method by name .
7054	Removes a method by name .
7055	Parse meta .
7056	Execute a hook .
7057	Load plugins .
7058	Setup the route .
7059	Get an item from the collection .
7060	Set a value in the collection .
7061	Push a value into a key .
7062	Searches the collection for the given value
7063	Get collection by field .
7064	Remove duplicates .
7065	Get numeric keys
7066	Joins all the items in the collection .
7067	Join list by key
7068	Returns an array containing the values of the given keys .
7069	Split collection into chunks .
7070	Filters the items of the collection using a callback function .
7071	Apply a callback to every item in the collection .
7072	Merges the given items and returns a new Collection .
7073	Merge item with given key .
7074	Increase the size of the collection .
7075	Get a random item from the collection .
7076	Get a random item from the collection .
7077	Cut the collection .
7078	Reject items that pass the callback .
7079	Forget a given key .
7080	Reverses the collection .
7081	Group by this collection
7082	Get a subset of the element at the given index .
7083	Return the indexes after the given index .
7084	Restore index after given key .
7085	Get the items that are not present in the given array .
7086	Get the remove of the given key .
7087	Pull an item from the collection .
7088	Return items that intersects the current array .
7089	Specify where condition .
7090	Import from JSON string .
7091	Convert to container
7092	Creates instance from serialized string .
7093	Read from a encrypted key .
7094	Initialize from string
7095	Apply conditions to the collection .
7096	Recursively find all values in an array .
7097	Recursive iterator to array
7098	Get group by key .
7099	Filter array recursively .
7100	Remove item from the ignore array .
7101	Remove duplicate values from the list .
7102	Get the value of a key .
7103	Adds or edit object
7104	Get the value for an option
7105	Grab the excerpt from the files .
7106	Fetch an array using dot notation .
7107	Remove an item from an array using dot notation
7108	Get an item from an array using dot notation .
7109	Determine if the given key exists in the array .
7110	Set an item in an array .
7111	Searches the array for a given value and returns the corresponding key if found .
7112	Render a library
7113	Return htaccess deny .
7114	Get a new access token
7115	Set the input id
7116	Set Bound .
7117	Add a new autocomplete type .
7118	Removes a type .
7119	Get component restriction .
7120	Sets component restrictions .
7121	Adds a new component restriction .
7122	Removes a component restriction .
7123	Set Input Attributes
7124	Set an input attribute .
7125	Parse identicontern .
7126	Convert image to Imagick .
7127	Compress images .
7128	Compress a SVG file .
7129	Compress PNG .
7130	Decode a data URL
7131	Returns one PNG image as one PNG
7132	Convert file extension to format
7133	Format the given format
7134	Convert file extension to mime type
7135	Convert image format to compression type .
7136	Convert image format to quality
7137	Set file extension .
7138	Change file extension .
7139	Parses the file format arguments .
7140	Sends a GET request to the given URL .
7141	Clean input data .
7142	Returns the limit set in bytes .
7143	Render a Circle
7144	Check if version is valid
7145	Check if version is valid
7146	Check if version is valid
7147	Creates a CSRF handler .
7148	Create a hidden input field .
7149	Verify a CSRF token
7150	Create Request from globals .
7151	Get the data from the form
7152	Get the form data .
7153	Get the json of the response
7154	Normalize the URL parameters .
7155	Render a MapType
7156	Get first email address
7157	Get the last in name
7158	Convert a camel case string into an acronym .
7159	Convert name to variable .
7160	Check if string is a string .
7161	Validates a UUID .
7162	Validates the shard id
7163	Validate shard ID .
7164	Validate type ID
7165	Validate a type ID
7166	Validate a local id
7167	Validate Local ID
7168	Parses a UUID .
7169	Validates a shard .
7170	render a map
7171	Set center .
7172	Set the latitude .
7173	Set the longitude .
7174	Set the noWrap option .
7175	Sets the position of the control .
7176	Set the scale control styles
7177	Get geocoder status
7178	get value from cache
7179	Gets a sub path .
7180	Generate SHA1 keys .
7181	Gets a class by its name
7182	Matches a string against a set of values .
7183	Get a template file
7184	Calculates the strength of a password .
7185	Check process
7186	Checks if memcache is enabled or not
7187	Check map for url
7188	Check the map cache
7189	Fetch the contents of a file .
7190	Cache an item
7191	Content - caching
7192	Get the map .
7193	Get map cache
7194	Check if url is local
7195	Checks if variable is valid
7196	Convert to Acronym .
7197	Format a variable into slug .
7198	camelCase - > camelCase
7199	Render a Size .
7200	Determines whether a role based on the email address .
7201	Parses a string containing multiple addresses .
7202	Parse headers .
7203	Parse the attachments in a string .
7204	Attempt to parse a content type into a representative text .
7205	Parses a Wordpress API representation to a class
7206	Compute the difference between two numbers .
7207	URL safe base64 encode .
7208	URL safe decode .
7209	Creates a new nonce .
7210	Create a hidden input .
7211	Verify a nonce
7212	Sets the origins of this node .
7213	Human readable time
7214	Returns an array of items for the given keys .
7215	render a marker
7216	Build json .
7217	Render a hash shape
7218	Renders the scale control .
7219	Checks if the specified slug is valid .
7220	Check if the given slug is reserved .
7221	Converts slug to name .
7222	Convert a slug to a variable name .
7223	Sets the coordinates .
7224	Store to cache .
7225	Get all resources
7226	Parses parsed template
7227	Setter for variables .
7228	Returns whether the given file has a parent .
7229	Get parent variables
7230	Get the file path .
7231	Returns options for this field .
7232	Render the control .
7233	Encodes a value to HTMLspecialchars
7234	Decode HTML entities .
7235	Calls a controller action .
7236	Render a Map layer
7237	Get value from pool
7238	Add an item to the pool
7239	Clear cache key .
7240	Create a key in the pool
7241	Get the fully qualified name of a primary key .
7242	Check if servers are different .
7243	Add connection information if available
7244	Render the html container .
7245	Render the Javascripts
7246	Render a Autocomplete
7247	Register the seed service provider
7248	Called when the session ends the request
7249	Close gzip off .
7250	Sets the location
7251	Set stopover .
7252	Get a human readable reason for an error code .
7253	Set the file extension .
7254	Change the extension of a file .
7255	Check if option exists
7256	Get option value
7257	Sets the value of an option .
7258	Removes an option .
7259	Modify request attributes .
7260	Set the zoom control style
7261	Decodes one hash
7262	Sets the results .
7263	Set the response status
7264	Check if the string is a valid URI or not .
7265	Determines if the user agent is used
7266	Normalize stream values .
7267	Gets the page URL .
7268	Set the avoid high priority .
7269	Set avoidolls .
7270	Sets the destinations .
7271	Add a destination .
7272	Add an origin order
7273	Sets the distance region .
7274	Sets the boundary language .
7275	Set travelMode .
7276	Sets the unit system
7277	Get the control positions
7278	Set the response status
7279	Render overview map control
7280	Render bound bounds .
7281	Renders the extends .
7282	Print all metrics .
7283	Method to set property markers
7284	Set the helpers
7285	Returns a helper by name .
7286	set extension helpers
7287	Access an extension helper
7288	Removes an extension helper .
7289	Render the HTML container for a map
7290	Render the stylesheet
7291	Render the Javascripts
7292	Render the Javascript libraries
7293	Renders JS before a map
7294	Renders the javascript after the given map
7295	Renders the Javascript container
7296	Render the js container coordinates
7297	Render JS container bounds
7298	Render js container points
7299	Render js container sizes
7300	Render the js container map
7301	Renders JS container circle
7302	Renders an encoded polyline
7303	Renders the javascript container ground overlay
7304	Renders the javascript container polygon .
7305	Renders the javascript container polylines
7306	Render the Javascript container rectangle
7307	Renders the JS container info windows .
7308	Render the Javascript container images
7309	Render the Javascript container shape
7310	Render the JS container cluster
7311	Renders the KML layer
7312	Renders the Javascript container manager
7313	Render JS container .
7314	Render a Google Map
7315	Render the map center
7316	Renders a map boundary .
7317	Compute coordinates .
7318	Compute the bounds of a Map .
7319	Compute points .
7320	Computes the size of an image map .
7321	Compute marker images .
7322	Returns the map of marker shapes .
7323	Computes the info windows for each marker in the map .
7324	Renders the map controls .
7325	Render a map control
7326	Returns a UUID version 4 UUID .
7327	Version 3 UUID
7328	Returns a version 4 UUID .
7329	Returns a version of v4 UUID .
7330	Returns a package by name .
7331	Applies a callback to all items in the collection .
7332	Filter the collection using a callback function
7333	Add items to the packageContract
7334	Set the address of the Geocoder .
7335	Set Coordinate .
7336	Set Bound .
7337	Sets the region .
7338	Set the geocoder language .
7339	Load a view
7340	Returns a Route object .
7341	Parse a YAML string into an array .
7342	Set default buffers
7343	Sort by key
7344	Returns the method of the request .
7345	Returns the scheme .
7346	Get request host
7347	Get root host .
7348	Check if the request is SSL
7349	Is this localhost?
7350	Set the location type .
7351	Add special characters to an unmapped string
7352	Returns an array of potential directives
7353	Overwrite the overload data
7354	Load all the properties in the data array
7355	Return an array of overridden data .
7356	Overload an array of properties .
7357	Open url .
7358	Set anchor .
7359	Sets the image source image .
7360	Set the scaled size
7361	Set the size
7362	Render info window .
7363	Render open tag
7364	Renders the infoWindow
7365	Register the modules .
7366	Generate asset URL
7367	Load the routes for the given scope .
7368	Takes a function and turns it into a function .
7369	Render a ground overlay
7370	Emit a HTTP response
7371	Set a value in the cache
7372	Retrieves an entry
7373	Unsets an item
7374	Unset pattern in cache
7375	Add key to ref
7376	Unset key by reference
7377	Remove a reference key by reference
7378	Render the MapTypeControl .
7379	Squared the value
7380	Returns a single quote
7381	Double quotes .
7382	Render a MapType
7383	Return signed url
7384	Get highlighter .
7385	Generate shard id .
7386	Assigns shard id to the database .
7387	Set the travel mode .
7388	Sets the prefix javascript variable .
7389	Output a list of IPs
7390	Items for dropdown .
7391	Render the Street view .
7392	Normalize a string
7393	Checks if the value is in the given regex .
7394	Normalize a string .
7395	Replace special characters .
7396	Convert a URL pattern to a URI pattern .
7397	Set the width unit .
7398	Set the height unit .
7399	Returns a random key
7400	Checks if value is a valid 64 - bit integer .
7401	Strips the query string from a URL
7402	Parse a qs url into an array .
7403	Builds query
7404	Add a SHA256 signature to the URL query .
7405	Remove the SHA - 256 hash from the URL .
7406	Check whether a SHA - 256 hash is valid .
7407	Set the coordinates .
7408	Add a poly coordinate .
7409	Get Customer data .
7410	Updates a customer .
7411	Unit unit to work with
7412	Get an scope entity by its identifier
7413	Renders the scale control .
7414	Generates the URL from a geocoder request .
7415	Converts a Geocoder response to a Gocoder response .
7416	Converts a GeocoderResult object into a Geocoder result object .
7417	Builds a list of geocoder address components .
7418	Builds a GeocoderAddress component .
7419	Builds a Geocoder geometry .
7420	Processes the request .
7421	Generates the Gravatar URL .
7422	Parse response .
7423	Builds a distance matrix response .
7424	Recursively build the distance matrix rows .
7425	Builds the DistanceMatrix response row from the given elements .
7426	Builds the DistanceMatrixResponse element
7427	Render a Point .
7428	Splits a string into an array of parameter strings .
7429	Returns an array of parameter strings
7430	Get the current headers .
7431	Send the Yes Cache
7432	Send no caching
7433	Get the slug for the current status .
7434	Get the status message .
7435	Send HTTP status .
7436	Parse a header string
7437	Returns an array of tags .
7438	Register package migrations .
7439	Register translation files .
7440	Set the pixel offset .
7441	Set open event
7442	Render a pan control .
7443	An array of events for the mouse .
7444	Sets the map type ids .
7445	Add a map type Id .
7446	Set the Type Control Style
7447	Sends a cookie .
7448	Returns the ue
7449	Render a DomEvent .
7450	Render the DOMEvent once .
7451	Render the given event .
7452	Render the event once .
7453	Convert animation to string
7454	Renders the zoom control .
7455	Gets the maximum execution time in seconds .
7456	Checks if a string is a specific slug .
7457	Returns all address components .
7458	Sets a list of address components .
7459	Sets the PartialMatch .
7460	Get gravatar url .
7461	Sets the center .
7462	Checks whether the given map option exists .
7463	Sets map options .
7464	Gets a map option
7465	Sets a map option
7466	Removes a map option
7467	Check if a stylesheet option exists
7468	Sets multiple stylesheet options .
7469	Gets a specific stylesheet option .
7470	Set a stylesheet option
7471	Removes a stylesheet option .
7472	Sets the map type control .
7473	Set the overview map control
7474	Change the pan control position
7475	Set the rotate control
7476	Sets a scale - control
7477	Sets the StreetView Control
7478	Set the zoom control
7479	Add marker .
7480	Adds an info window
7481	Adds a polyline .
7482	Add an encoded Polyline to the map
7483	Adds a new polygon .
7484	Add rectangle .
7485	Adds a circle to the map .
7486	Add a ground overlay
7487	Set the cache data
7488	Delete cache file
7489	Sets the array that will be avoided .
7490	Set avoidolls .
7491	Sets the destination
7492	Sets the way to optimize .
7493	Sets the origin coordinate
7494	Set route alternatives
7495	Sets the region .
7496	Set the requested language
7497	Set the travel mode .
7498	Set the unit system
7499	Sets the route way points .
7500	Add a directionpoint .
7501	Checks if the calculation is valid .
7502	Submit json .
7503	Log issue .
7504	Log a review .
7505	Writes the lines of the given event .
7506	Clean the log event .
7507	Rotate log files if they are in the same time .
7508	Make an HTTP response .
7509	Parse a document .
7510	Build a document
7511	Parses section .
7512	Parse YAML metadata .
7513	Get or set a query var
7514	Get a template from a file
7515	Get a remote token .
7516	Generate a SHA - 1 hash from the credentials
7517	Transliterates a string .
7518	Get the distance matrix status
7519	Strip leading .
7520	Set the workflow steps .
7521	Route to the correct URL .
7522	Builds the directions response .
7523	Builds the directions route .
7524	Builds a new directions route .
7525	Builds the directions array
7526	Builds the directionsLeg of the document .
7527	Builds directions steps from provided array .
7528	Builds HTML Code of directions step .
7529	Alters the color by lighten
7530	Darkens this color by a certain ratio
7531	Alters the color by the given percentage .
7532	Deserializes the color .
7533	Creates a new Color instance .
7534	Starts a new or existing session .
7535	Returns information if given version is valid
7536	Checks if a dev version is valid
7537	Check if a version is valid .
7538	Format a date .
7539	Generate the time
7540	Return a clone with no caching header set .
7541	Create a success response .
7542	Response with error
7543	Outputs the response
7544	Sets the footings .
7545	Sets warnings .
7546	Set the sort order for the route .
7547	Renders the zoom control .
7548	Get one or all metadata
7549	Issues an access token .
7550	Validate request and return the response
7551	Get the access token repository instance .
7552	Add string elements to the string .
7553	Removes a value from the dictionary .
7554	Method to render the google map
7555	Sets the elements .
7556	Render control position
7557	Get the current IP address
7558	Get the region of an IP
7559	get ip country
7560	Is an AJAX request
7561	Determines if this request is an API endpoint
7562	Set or get the status of the doingRestAction
7563	Gets or sets whether or not the action should be executed
7564	Subscribe new user
7565	Get a single member
7566	Method to update an existing user
7567	Deletes a user from a list
7568	Returns the SHA1 of a given string .
7569	Adjust the brightness of a color .
7570	Cleans hex string .
7571	Merges arrays with empty keys .
7572	Create a new Request
7573	Create request body
7574	Merges arrays with empty values .
7575	Render a rectangle
7576	Generate html code .
7577	Analyse the given \ DOMDocument
7578	Render a marker
7579	Generate a license key .
7580	Get the libraries of a map
7581	Escape order .
7582	Serialize closure .
7583	Unserialize closure .
7584	Maybe serialize a value .
7585	Maybe unserialize value .
7586	Render embed HTML
7587	Fetch the embed from cache
7588	Transforms a string to a WordPress embed .
7589	Render a map
7590	Set the southwest coordinates of the bounding object .
7591	Set NorthEast .
7592	Get the center coordinates .
7593	return value in bytes
7594	Cache remote file
7595	Parse URL parts
7596	Render Coordinate .
7597	Render a marker image .
7598	Parse an XML string .
7599	Pluralizes XML message .
7600	Thrown when the distance matrix request is invalid .
7601	Parse a host string into an array
7602	Parse port from array .
7603	Set the marker position
7604	Set marker animation
7605	Sets icon for Marker .
7606	Defines the shadow image .
7607	Sets the shape .
7608	Callback function for header id
7609	Get first image url
7610	String attribute value
7611	Set the bounding coordinate
7612	Gets a specific flash message .
7613	Get error messages
7614	Get error data
7615	Add error message
7616	Add Coordinate .
7617	Load an HTML document
7618	Minify HTML .
7619	Recursively indents a child node .
7620	Loads the organization reference event .
7621	Create a set password view model
7622	Get the organization entity .
7623	Create an error view model
7624	Add an asset file
7625	Reversing styles order
7626	Add the first asset
7627	Add after file .
7628	Add meta data .
7629	Renders meta tags
7630	List of file extensions
7631	load a file
7632	Create the profile query .
7633	Processes an email
7634	Validate email .
7635	Load or create user .
7636	Load the collection
7637	Proxy method .
7638	Returns the HAVINGOs cursor for the given organization .
7639	Find organizations by name
7640	Finds a user entity by the given user id .
7641	Get employee by user id
7642	Creates an organization with specified name
7643	Gets the draft of specified user .
7644	initialize customer options
7645	Check if user is employee
7646	Updates the permissions of the employee
7647	Sets the organization name .
7648	Set permissions .
7649	Returns the image set
7650	Sets the contact .
7651	Get the list of employees .
7652	Get employee by User or Id .
7653	Get all employees by a specific role
7654	Set the creation options .
7655	initialize the form
7656	Returns an organization form
7657	Get the image uri .
7658	Store an Organization image
7659	Extract object properties
7660	Hydrate a value .
7661	Checks if the user has permission to create a role .
7662	Configure the form .
7663	Ensure that the order number is correct .
7664	Encrypt 3DES
7665	Create Merchant Signature Notif data
7666	Validates notification signature
7667	Signs and returns signed merchant parameters .
7668	Initiate a request .
7669	Get all ticket articles
7670	Performs HTTP request
7671	Sends a POST request .
7672	Make a HTTP PUT request .
7673	Get articles for a ticket
7674	returns a value
7675	Get a single object
7676	Gets all items
7677	Create an object
7678	Update an existing object
7679	Delete the object
7680	Gets the URL for a method
7681	Get details about a ticket
7682	Add a ticket .
7683	Search for objects by search term
7684	Remove a ticket .
7685	Shows the shared memory segment on the given file .
7686	High level function to fetch the proxy type
7687	Retrieves information about the connection
7688	Do the loop .
7689	Execute all registered requests
7690	Applies a callback to each item in the collection .
7691	Get a specific item .
7692	Get the copy s source
7693	Fetch API data
7694	Validates the given permissions against the specified bitmask
7695	Set a query parameter
7696	Add multiple parameters
7697	Start a request transaction
7698	Save photos .
7699	Start callback
7700	Get an access token by code
7701	Create an item list from a hit .
7702	Search by query .
7703	Replaces all dots except the last 3 days of a given string except the last 3 days .
7704	Replaces all dots except the last two zeros .
7705	replace all dots except last
7706	Convert an intl formatter to malformed values
7707	Converts malot formatted values to intl formatter array .
7708	Configure the picker .
7709	Bind Alexa Request .
7710	Register the middleware .
7711	Resumes the Player Player .
7712	Return a new AlexaRequest .
7713	Add the middleware to the beginning of the request .
7714	Determine if the route matches the given request object .
7715	Create a new AlexaRoute .
7716	Get session value
7717	Update a slot
7718	Answers an array of all the validators of the field .
7719	compile the route into a string
7720	Get the certificate from the request .
7721	Prepare the response data .
7722	Send the request through the router .
7723	Gather the application middleware .
7724	Persist certificate .
7725	Retrieves the certificate from the store .
7726	Calculate the file path for this chain
7727	Sets custom protected words .
7728	Capitalizes a string
7729	Normalize input string
7730	Processes part of a string .
7731	Process first sentence words in parts .
7732	Processes the last word in the parts array .
7733	Process a word .
7734	Performs a replace on a string .
7735	Gets the prefix of a class
7736	Breaks a string of words into individual words .
7737	Check word is salutation
7738	Checks if a word is a line suffix
7739	Generate the emoji constants
7740	Method to chop a given number from the given bounds .
7741	Creates an emoji string
7742	Get the first word from a string .
7743	Checks if a certain type is a string .
7744	Gets the last word from a string .
7745	Converts a string with roman numerals to lowercase
7746	Process a markdown string
7747	Returns executed time
7748	Gets the smartyponyms
7749	Gets the substring after the first occurrence of a separator .
7750	Gets the substring after the last occurrence of a separator .
7751	Gets the substring before the first occurrence of a separator .
7752	Gets the substring before the last occurrence of a separator .
7753	Converts a string to titleize .
7754	Trims whitespace .
7755	Trims whitespace from the beginning of a string .
7756	Trim a string from the beginning of the string .
7757	Generate a typogrify string .
7758	Converts roman numerals to upper case .
7759	The widon function
7760	Get a setting by its name .
7761	Get the icon
7762	Get extension array .
7763	Display Blog .
7764	Show a post .
7765	Create a new Tag .
7766	Show the form for editing the tag .
7767	Update a tag
7768	Remove the specified tag from storage .
7769	Display a listing of the tools .
7770	Clear cached routes
7771	Handle download action
7772	Enable maintenance mode
7773	Disable maintenance mode .
7774	Publishes the config files .
7775	Handle translations .
7776	Loading and publishing views
7777	Show the backend profile .
7778	Update the specified profile in storage .
7779	Handles the authenticated user .
7780	Returns the current version of the canvas .
7781	Get data for the post fill
7782	Enables an extension .
7783	Disables an extension .
7784	Uninstalls an extension
7785	Run the database migration .
7786	Get all enabled bootstrappers .
7787	Sanitise post input .
7788	Show the home page .
7789	Get fields from model .
7790	Data for tags .
7791	Get normalized blog data .
7792	Store a newly created post .
7793	Update a post .
7794	Copy the theme s public directory .
7795	Publishes theme views .
7796	Removes theme from view file
7797	Gets the default theme
7798	Get the current active state .
7799	Get general middleware
7800	Get the installed route middleware
7801	Get admin middleware
7802	Get the main blog file .
7803	Get blog prefix
7804	Get admin prefix
7805	Get auth prefix
7806	Gets password prefix
7807	Display a listing of the posts .
7808	Process data to create a new transaction .
7809	Scan a file
7810	Send a file and return the result
7811	Scan a file
7812	Read a response from the socket .
7813	Process single file
7814	Validate file .
7815	Sanitizes a file name .
7816	Deletes a file .
7817	Moves an uploaded file to a new location .
7818	Return a list of available themes .
7819	Get asset path
7820	Gets the current version of an asset
7821	Get theme path .
7822	Make the current directory .
7823	Make file .
7824	Get the absolute path to a theme s assets .
7825	Gets a template .
7826	Creates translation assets .
7827	Fetch logo translation .
7828	Updates a translation .
7829	Flag a translation for a message .
7830	Create an asset
7831	Download all translations .
7832	Upload all translations .
7833	Synchronize all translations .
7834	Triggered when a catalogue is terminated .
7835	Copies configuration values from parent to project
7836	Add a hash to a type
7837	Parse and return the parsed value
7838	Search for class map .
7839	Search all Composer maps .
7840	Called after a model has been saved .
7841	Before query .
7842	Triggers after a query .
7843	Sync new trashage items
7844	Sync the trashage items with the given values .
7845	Find product item by key .
7846	Ensure that an item is integrity
7847	Build item data .
7848	Fills the entity attributes .
7849	Sets the default Criteria object
7850	Perform the action
7851	Execute before or after action .
7852	Validates the value of an action .
7853	Perform a search query .
7854	Set paginate value .
7855	Toggle the exceptions for this validator .
7856	Applies criteria to query .
7857	Update an entity .
7858	Executes a SELECT query and returns the results as an array .
7859	Find data by key
7860	Fetch data by criteria .
7861	Get models by Criteria .
7862	Fetch objects by their keys
7863	Get a list of records
7864	Get a new query builder instance with the given attributes .
7865	Replace all config values with their values .
7866	Sets view path
7867	Send file to browser
7868	Get the mime - type of the file
7869	Map the exception to a controller and action .
7870	Sets an aspect definition
7871	Sets a pointcut definition .
7872	Get a specific pointcut
7873	Returns list of candidate candidates for class search engine .
7874	Checks if the given path is scannable .
7875	Returns the string for the given error type .
7876	Dispatches the request
7877	Invoke action .
7878	returns whether or not the server has activity
7879	Get a bean definition by name .
7880	Search and replace properties .
7881	Returns the constructor values for the given definition .
7882	Instantiate an instance using the bean class .
7883	Instantiate bean by factory class name .
7884	Instantiate bean by bean .
7885	Instantiates a bean based on a bean .
7886	Creates a bean dependencies from the bean definition .
7887	Apply an aspect to the container
7888	Apply specific aspects to the bean
7889	Apply the global aspects of the bean
7890	Applies components to the bean
7891	Creates a Bean .
7892	Setup init and shutdown .
7893	Injects a non setter method
7894	Injects a property value
7895	Get a bean
7896	Returns the singleton instance .
7897	Fills the bean
7898	Called when a signal is caught
7899	Loads a class .
7900	Makes a child bean .
7901	Populates the classes per annotations .
7902	Parse the XML file
7903	Loads the bean list
7904	Closes the socket
7905	Open the connection .
7906	Frees a peer
7907	Create new class
7908	Creates a parameter list
7909	Creates a method .
7910	Create a new proxy
7911	Load YAML from a file .
7912	Loads the bean .
7913	Initialize the Guzzle client
7914	Opens the event .
7915	Return a cache instance from the supplied options .
7916	Get the after definition .
7917	Triggered before creating a bean
7918	Called after a bean is created
7919	Triggered before a bean is assembled .
7920	Called after a bean is assembled
7921	Open the log file .
7922	Returns the interceptors for the given method
7923	Gets the exception interceptors for a given method
7924	call method interceptors
7925	Invoke the given exception .
7926	Invokes method invocation
7927	Closes the socket
7928	Read data from buffer
7929	Open a socket .
7930	Adds an array of objects
7931	Build the URI
7932	Overwrite the editor configuration .
7933	Resolve the absolute file path .
7934	Get published dropdown list .
7935	Finds the Page model based on its alias .
7936	Builds link .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Register theme translations
7939	Registers client script
7940	Vote for an object .
7941	Get from address
7942	Loads a user by username .
7943	Hydrates the user with provided data .
7944	Creates a user and returns it .
7945	Sets the password of the given user .
7946	Checks if a user s password is valid
7947	Check if a user is logged in .
7948	Finds a user by a set of criteria .
7949	Finds users by criteria
7950	Creates common find SQL .
7951	Returns the number of rows matching the criteria
7952	Inserts a new user
7953	Update the user information
7954	Removes a user from the database .
7955	Validate the given user .
7956	Clear identity map
7957	Login as the given user
7958	Initializes the signal .
7959	Re -aper a worker
7960	Wait for all workers to complete .
7961	Get a result from the pool .
7962	Returns the list of processes .
7963	Apply a function to the current pool .
7964	Get the number of pending workers .
7965	Sends data to a socket
7966	Read data from a socket
7967	Returns SQL to drop down data
7968	Register new user .
7969	Confirm email activation token
7970	Display login form
7971	Resend confirmation email
7972	Displays the user form .
7973	Edits an existing User entity .
7974	Validate object attributes .
7975	Binds the controller and routes to the application .
7976	Get priorities .
7977	Returns the formatter based on the Accept header .
7978	Formats the request and response .
7979	Detect the env file
7980	Returns type of accept header
7981	Builds the middleware .
7982	Run the router .
7983	Handles the request .
7984	Return the payload
7985	Returns a PSR - 7 response .
7986	Return status response .
7987	Get command from a resource
7988	Executes before command
7989	Get per page from model .
7990	Add where statements to query .
7991	Bootstrap the application .
7992	Allow HTTP methods .
7993	Sets the route pattern .
7994	Returns parsed token .
7995	Retrieve the regex .
7996	Returns the list of available variables .
7997	Matches the current request .
7998	Build variables .
7999	Dispatch middleware .
8000	Generate an HTML link .
8001	Compile the rule .
8002	Matches a request against the specified route .
8003	Returns a link to this token .
8004	Tokenize a string .
8005	Tokenize the given pattern .
8006	Tokenize a segment
8007	Splits the given pattern into chunks .
8008	Compiles a token
8009	Changes the scope to the given one .
8010	Register a route binding
8011	Create group of routes
8012	Routes a request
8013	Normalizes a request .
8014	Routes the given request
8015	Generate a route link .
8016	Clears the routing .
8017	Generate JS code for all nodes
8018	Returns the file content .
8019	Get access token .
8020	List address books .
8021	Get email addresses from book
8022	Add new emails to address book
8023	Get cost of campaign
8024	Create new campaign
8025	Add a sender to an email address
8026	Activate a sender .
8027	Get list of subscriptions
8028	Set state of subscription
8029	Create a push task
8030	Get a unique name for the notification .
8031	Send message to website
8032	Make the call to the API
8033	Pre send to api check
8034	Decode a new line encoded response .
8035	Decode an URL encoded response
8036	Fetches the emails from the IMAP server
8037	Mark a message as processed
8038	Get the type of a mail
8039	Refunds auto refund
8040	Automatically apply SSL .
8041	Method to auto replace SSL
8042	Automatically revokes the SSL connection .
8043	Function to collect SSL information .
8044	Get a list of all addresses in the DCVail address .
8045	SSL checker .
8046	calls report on web host report
8047	Validate and log a DCV code
8048	Creates an exception based on a response array
8049	Generate the meta tags .
8050	Set the description
8051	Reset all properties
8052	Register bindings .
8053	Render the open graph tags .
8054	Add a raw entry
8055	Prepare data .
8056	Check if an url contains an url .
8057	Validate the given data
8058	Fill an index on the collection .
8059	Fills commands by type .
8060	Table index .
8061	Set the type for the query .
8062	Set the settings for this index .
8063	Deletes a index
8064	Creates a new index
8065	Updates index settings
8066	Creates and executes a request
8067	Convert to JSON .
8068	Sort function .
8069	Add facets to query .
8070	Composes final query .
8071	Converts the passed parameters to an array .
8072	Add host to cluster .
8073	Add an item to the filter .
8074	Add a document to the command
8075	Setter for documents
8076	Fetches the batch
8077	Create a new request instance .
8078	Make a HTTP POST request .
8079	Make a HTTP PUT request
8080	Make a DELETE request .
8081	Execute the async request
8082	Adds additional options
8083	On request execute .
8084	Autodetect nodes
8085	Add a document to the command
8086	Creates the current batch command
8087	Finalize the current command .
8088	Check the current command
8089	Gets a Gallery from a Model
8090	Initialize an attachment
8091	Init an Initialize Album
8092	Generates an album name
8093	Upload the Gallery
8094	After deleting the picture
8095	Returns image resize to size
8096	Add gallery style links
8097	Delete multiple versions
8098	Save picture in database
8099	Create extra images
8100	Set zebra image
8101	Creates a blank image .
8102	Configure gallery
8103	Configure the database .
8104	Creates the gallery config file .
8105	Checks the documentation for all operations in the service .
8106	Generate source code .
8107	Display upload link .
8108	Helper function to show an album
8109	Show thumbnails from one album
8110	Loads scripts .
8111	Deletes the given picture .
8112	Renders the pictures .
8113	List channel sections
8114	Starts a worker process .
8115	Stop the process
8116	Kill the process
8117	Send a payload to the client .
8118	Called when a worker starts .
8119	Fork a thread
8120	Build an AuthnRequest object .
8121	Converts a SAML response into a SAML response .
8122	Get binary identifiers
8123	Returns the pending binary paths .
8124	Updates a binary
8125	Update a single binary
8126	Start the binary process .
8127	Cleanup temporary files
8128	Assert start conditions .
8129	Register binaries .
8130	Creates a binary .
8131	Protected get external url
8132	Get Linux - 64 filename .
8133	Save the app .
8134	Handles incoming requests .
8135	Watch the progress bar for changes .
8136	Get pre update message .
8137	Get post message .
8138	Add a pipe to the pipeline
8139	Convert an item .
8140	Convert an item value .
8141	Writes the item
8142	Get the transport from the request .
8143	Validate password .
8144	Gets the taxonomy .
8145	Check if the given entity is valid .
8146	Get the description
8147	Get an environment variable .
8148	Returns the client s IP address
8149	Get the current URL .
8150	Unparse a query string
8151	Checks if property is set
8152	Retrieves the current address of an address
8153	Implements include methods .
8154	Do actions defined in config line
8155	Downgrade an array .
8156	Make item up .
8157	Update a form read .
8158	Gets the field from the payload .
8159	Returns the matching item .
8160	On an item callable .
8161	Get an item from an aggregate .
8162	Replace variables in the given value
8163	Load the configuration from a JSON string .
8164	Loads a JSON configuration file .
8165	Defines the longitude of the attachment .
8166	Get the LatLng object
8167	Generate error response .
8168	Redirects the user to the form with the given form uuid .
8169	Creates a new aggregate form .
8170	Remove a single form item .
8171	Check if the current package is an autoload dump .
8172	Get plugin class names
8173	Get the install name of a package .
8174	Guess the install name of a package .
8175	Map root extra values .
8176	Write a plugin config
8177	Get root package .
8178	Returns the install path for a package .
8179	Initializes the install directory .
8180	Generate palette .
8181	Returns the palette name of a palette .
8182	Create an exception that indicates that a failure has failed .
8183	Enter the theme context .
8184	Builds the context configuration .
8185	Returns the current color .
8186	Calculates the rotation color .
8187	Converts HSV to RGB .
8188	Inits the context .
8189	Joins current context
8190	Switch the context .
8191	Load configuration from bundles .
8192	Sets the config type argument .
8193	Returns the list of templates used in the DataContainer .
8194	Renders the page picker .
8195	Get all articles
8196	Returns all modules
8197	Prepare template .
8198	Parses the given template with the given template name .
8199	Register tagged services .
8200	Initialize the environment .
8201	Initialize the layout .
8202	Adds a child method
8203	Compile function .
8204	Compiles a node .
8205	Throw an exception
8206	Returns the PHP type for a doctrine type .
8207	Returns a new instance of ReflectionProperties
8208	Get docblock from property
8209	Get DocBlock from Property .
8210	Get DocBlock from method .
8211	Get php type and class
8212	Logs in to the API .
8213	Init Guzzle HTTP client
8214	Get the login token .
8215	Returns a detailed list of edges
8216	Evaluate an array of extractors .
8217	Get tags .
8218	Download an image .
8219	Get all workspaces from this book .
8220	Download all edges
8221	Extract data from mutator
8222	Extract data from an accessor method .
8223	Extract a type from a ReflectionType .
8224	Determine if the given property is a public property .
8225	Returns the method for the given property
8226	Returns the correct method for the given property .
8227	Get name of property
8228	Load the Laravel service container
8229	Create a new application instance .
8230	Sets an array value .
8231	Sets a set of values .
8232	Removes a section .
8233	Merge a section .
8234	Rename a value
8235	Renames a section .
8236	Read ini file
8237	Reads an INI file and merges it with it .
8238	Merge an ini content into a content object .
8239	Returns string for INI value
8240	Sets an INI content .
8241	Set an array of values .
8242	Returns all modified values
8243	Remove a comment value .
8244	Removes a section .
8245	Sets a value in the overrides array .
8246	Set a value on a master node
8247	Set a value on a master ini file .
8248	Get the value on the master master node
8249	get all values of a section
8250	Removes an INI value .
8251	Remove a value from a ini file
8252	Returns whether or not the given name is a section .
8253	Get the values of a section .
8254	Create a loader for the given type .
8255	Get class name by short type .
8256	Create a cookie .
8257	Execute the command
8258	Determine which file to use .
8259	Retrieve the bundle name .
8260	Write the configuration to a file .
8261	Create a dummy of a type .
8262	Convert a string from one format to another
8263	Read session data from storage .
8264	Get all routes .
8265	Sort the array using the given callback
8266	Sets the offset of the stream .
8267	Gather all view data .
8268	Put content into file .
8269	Get the configuration reader
8270	Handle the given route .
8271	Gather the middleware for the given route .
8272	Flatten nested arrays .
8273	Import configuration files .
8274	Get a slice of the array .
8275	Parses the stage of a stage .
8276	Call a symfony command .
8277	Sets default values for specified command name .
8278	Get PHP binary .
8279	Returns the cerebro binary .
8280	Runs a Symfony command .
8281	Get the default input definition .
8282	This method builds an array of matched routes
8283	Adds route node to given node
8284	Returns the matcher for the first segment .
8285	Creates a filesystem manager .
8286	Creates a new cache factory .
8287	Get the duration of executed statements .
8288	Returns the memory usage
8289	Runs a profile call .
8290	Try to find a class based on an alias
8291	Checks if the string matches the given pattern .
8292	Creates a Twig engine instance .
8293	Add custom view factory .
8294	Extend Twig engine resolver
8295	Creates a new Twig environment .
8296	Create a twig loader .
8297	Parse array data
8298	Create a new respect validator .
8299	Create a non validator based on a filter and a filter .
8300	Create chainable validators .
8301	Parses a string rule .
8302	Parse the parameter list .
8303	Starts the server process .
8304	Stops the web server .
8305	Get address of pid file
8306	Check if a process is running .
8307	Create the server process .
8308	Get all registered event listeners .
8309	Removes an event listener from all patterns .
8310	Determines if a subject has wildcards .
8311	Adds a listener pattern to the list of events .
8312	Read a mandatory option from a class
8313	Build multidimensional array
8314	Get the response for the given exception .
8315	Get the response object .
8316	Get the Displayer .
8317	Get filtered values .
8318	Filters the list based on the accepted content types
8319	Add the route lookups .
8320	Adds addresses to the given address .
8321	Create a renderer instance .
8322	Registers the base data collectors .
8323	Registers the collectors from config .
8324	Extends the event manager .
8325	Creates a session manager .
8326	Create route dispatcher .
8327	Creates router contract .
8328	Create UrlGenerator .
8329	Extract the application environment from the command line arguments .
8330	Get the environment argument .
8331	Return the javascript for the profiler .
8332	Create a TOML builder from an array
8333	Process an array of arrays .
8334	Returns the pretty metadata .
8335	Get paths to twig loader
8336	Builds the table rows .
8337	Get Whoops service .
8338	Add where clauses to route .
8339	Merge the group attributes into the route .
8340	Converts the given string into a controller action array
8341	Prepend namespace to use statements .
8342	Get the last group prefix .
8343	Update the group stack
8344	Create a new Sanitizer
8345	Add before bootstrapping .
8346	Add after bootstrapper .
8347	Install script with bootstraps .
8348	Call bootbacks .
8349	Generate a unique session id .
8350	Merge new flashes .
8351	Load session data from handler .
8352	Read from handler .
8353	Write data to handler
8354	Resolves current page .
8355	Secure input .
8356	Extend the trace event manager with the data collector .
8357	Get files .
8358	Get the Twig finder instance .
8359	Validate a template
8360	Display the command result .
8361	Displays the given text .
8362	Parse the middleware group .
8363	Check mandatory options .
8364	Extracts dimensions from a configuration array .
8365	Validate options .
8366	Checks if all deprecated options are set .
8367	Register a new resource
8368	Get the resource URI .
8369	Get the resource wildcard .
8370	Get resource prefix .
8371	Add a resource destroy route .
8372	Returns the nested resource URI .
8373	Get the resource action .
8374	Get the resource route name .
8375	Slice the content of the container .
8376	Get a middleware for the request handler .
8377	Find the argument files .
8378	Get the visitor s IP address .
8379	Validate ip address .
8380	Get first IP address from header .
8381	Sets the domain for the message .
8382	Validate the given middleware .
8383	Validates a middleware .
8384	Creates translation manager .
8385	Create a schedule .
8386	Get the calculated data .
8387	Create a Swift Mailer .
8388	Create the mailer .
8389	Sets a global address .
8390	Create the tooltip group
8391	Create the tabs
8392	Create a table
8393	Create dropdown menu content .
8394	Protected create metrics
8395	Clone a variable .
8396	Get the VarCloner .
8397	Returns a HtmlDumper instance .
8398	Appends the code to the block .
8399	Appends code to line .
8400	Add custom extensions to twig .
8401	Sort the middleware stack .
8402	Moves a middleware .
8403	Create an aggregate driver instance .
8404	Create an emergency log driver
8405	Create a single logger instance .
8406	Create the Monolog driver .
8407	Create an instance of the syslog driver .
8408	Create an instance of the error log log driver .
8409	Create an instance of the Slack logger driver .
8410	Create a custom logger .
8411	Create the monolog driver .
8412	Push processors to Monolog .
8413	Create a server request from an array .
8414	Returns the singular form of the given value .
8415	Parses a case string .
8416	Create a local connection .
8417	Create console application
8418	Merge array .
8419	Formats group suffix .
8420	Check application environment file .
8421	Set environment file path .
8422	Get a transport instance .
8423	Create a transport .
8424	Check if transport exists
8425	Create a new SMTP transport instance .
8426	Create a Mailgun transport instance .
8427	Create a SparkPostTransport instance .
8428	Create an instance of the SESTransport instance .
8429	Creates a Repository .
8430	Update Route Tree Node
8431	Register event handlers .
8432	Add the twig environment to the container .
8433	Register the twig extension .
8434	Get allowed HTTP methods .
8435	Adds a route .
8436	Is this stream a pipe?
8437	Add a mime type .
8438	Add a parser .
8439	Parse a payload
8440	Get parser by its type .
8441	Get the supported format from payload
8442	Set up class
8443	Get the duration of the request .
8444	Stops a measure .
8445	Add a new measure
8446	Identify the given exception .
8447	Generate a version 4 UUID
8448	Sets the headers .
8449	Validates the HTTP protocol version
8450	Checks if an array contains only strings
8451	Filter header value .
8452	Get retry time .
8453	Get invoker .
8454	Creates an exception for an invalid type .
8455	Extend cache item .
8456	Extend the SimpleTraceCache object
8457	Get an environment value .
8458	Parse parameter .
8459	Replace placeholders with parameters .
8460	Create cache table .
8461	Get PDO connection .
8462	Connect to database
8463	Get list of files in a given directory .
8464	Render the script into html .
8465	Returns the most recent modified time of the given asset type .
8466	Run the action .
8467	Disable the scheduled cron job summary .
8468	Extends the log manager .
8469	Extend profiler .
8470	Import a DOMDocument into a SimpleXMLElement object
8471	Load a DOM document from a file
8472	Load a DOM document .
8473	Converts a PHP value to a PHP type .
8474	Validate a DOM document or callable .
8475	Convert a string from one UTF - 8 to another
8476	Check if an entry is in the headers array .
8477	Add references to an entry .
8478	Extracts the correct entry from the cache
8479	Process previous entry
8480	Extracts the multi lines from a multi - line entry .
8481	Extract the headers from the given array of headers .
8482	Check if a file is existing
8483	Sets the error .
8484	Sets the stream instance .
8485	Validate stream .
8486	Mock service .
8487	Parses an expression and returns the parsed arguments .
8488	Parses an argument token and returns an InputArgument object .
8489	Parses an option from the token .
8490	Extracts the token description from the token .
8491	Validates the given cookie name .
8492	Validates the cookie value .
8493	Set value to left
8494	Get the addresses for the message .
8495	Create MongoDB driver .
8496	Create an instance of the Redis cache driver .
8497	Create an instance of the driver cache pool .
8498	Create an instance of the filesystem cache driver .
8499	Create a Memcached cache driver .
8500	Create an instance of the Memcache cache driver .
8501	Returns data collector by name .
8502	Compile router template
8503	Creates route class template
8504	Compiles a route tree .
8505	Compile route HTTP method match .
8506	Compile the disallowed HTTP method or not found exception .
8507	Compile a found route .
8508	Returns a DebugProcessor instance .
8509	Counts the errors count contained in the logger .
8510	Groups log levels by priority .
8511	Returns the listener
8512	Attaches an event handler .
8513	Unbinds the event manager .
8514	Creates a regex pattern for an event pattern .
8515	Get a value by offset .
8516	Set a config item
8517	Processes an array of parameters .
8518	Processes the given parameter .
8519	Renders the exception .
8520	Renders editor to output .
8521	Render trace of an exception .
8522	Get the stack trace from an exception .
8523	Gets the frames from an exception .
8524	Format an array of arguments
8525	Returns the lines of a file .
8526	Get contents of a file
8527	Normalize the asset name .
8528	Resolve a binding .
8529	Resolve a class .
8530	Resolves a method .
8531	Resolve a parameter
8532	Resolve parameters .
8533	Get a method reflector .
8534	Checks if value is a function .
8535	Merge parameters .
8536	Write the given contents to the given file .
8537	Put contents into the given file .
8538	Update a stream .
8539	Decrypt the stream resource .
8540	encrypt stream resource .
8541	Decrypt the contents of the string .
8542	encrypt string from string
8543	Reads the contents of a string from the given string .
8544	Create transport factory
8545	Creates a mail manager .
8546	Returns the version number from the XML document
8547	Get the schema of a xsd
8548	Fixes the location of the xliff file .
8549	Parse visibility .
8550	Sanitize data .
8551	Run global sanitizers .
8552	Sanitizes a field .
8553	Execute a sanitizer .
8554	Resolve the callback value .
8555	Resolve an expression .
8556	Creates a string command .
8557	Builds the default parameters using reflection .
8558	Checks that callable is valid .
8559	Returns true if the callable is to a non - static method .
8560	Create a cookie jar
8561	Convert an element
8562	Add node .
8563	Adds the collection node .
8564	Create the root element .
8565	Cast the object class .
8566	Get the callbacks that have been called .
8567	Returns the not called listeners .
8568	Validate the sameSite .
8569	Normalizes the expiration time .
8570	Normalize the domain name .
8571	Normalize path .
8572	Get the timestamp
8573	Start tracing .
8574	Apply translation helpers .
8575	Extracts helpers from string .
8576	Apply the registered filters
8577	Logs a translation .
8578	Collect translations from database .
8579	Display the list of files
8580	Display JSON .
8581	Generate files by file or directory .
8582	Reads input from STDIN .
8583	Get directory iterator
8584	Validates the event name .
8585	Converts a number into bytes .
8586	Converts a decimal number to a number .
8587	Resolve a configuration from the config file .
8588	Create an extension
8589	Adds the extractor .
8590	Creates an alias loader .
8591	Get the cache path .
8592	Push a command to a queue .
8593	Checks whether a command should be queued .
8594	Create an instance of the cookie session driver .
8595	Create the migration session driver .
8596	Create a cache based session driver .
8597	Build a session .
8598	Build an encrypted session .
8599	Parse the given action and action into an array .
8600	Returns the first value found in an array .
8601	Parse note structure into an array
8602	Convert content from one encoding to another .
8603	Tag the given array of data .
8604	Creates a LogManager .
8605	Confirm before proceeding with the action .
8606	Get default confirmation callback .
8607	Inject the profiler
8608	Collect data .
8609	Create and return a new template instance .
8610	Create the profile .
8611	Get the given log level .
8612	Starts the session .
8613	Stores the current URL in the session .
8614	Collect garbage collection .
8615	Add a cookie to the response .
8616	Creates response with given template .
8617	Finds a template by name .
8618	Normalize the file name .
8619	Parse the view file contents .
8620	Add content to the message .
8621	Send a Swift message .
8622	Determines if a message should be sent .
8623	Creates a new message .
8624	Call the given message builder .
8625	Creates the view .
8626	Handle found data .
8627	Prepare URI path .
8628	Generate router file .
8629	Generate the cache directory .
8630	Returns the path to the specified file .
8631	Checks the options .
8632	Get the Parser instance .
8633	Get the require file
8634	Require a file only once .
8635	Creates a symlink .
8636	Set the directories .
8637	Add a directory
8638	import lang file
8639	Add messageCatalogue .
8640	Set language fallback .
8641	Get fallback language .
8642	Add a presenter .
8643	Check for more pages .
8644	Get the display address of the host .
8645	Find the front controller .
8646	Finds the best hostname and port .
8647	Finds the best port to run on a host .
8648	Escape special characters .
8649	Get sorted data .
8650	Create an append stream .
8651	Parses the given list of tokens .
8652	Seeks to a non - whitespace token .
8653	Extracts the message from the iterator .
8654	Create a TraceablePDosator instance .
8655	Decrypt the cookies .
8656	Encrypt the cookies .
8657	Creates a new SetCookie instance .
8658	Register a Symfony command .
8659	Returns the console instance .
8660	Initialize project directories .
8661	Returns the view for a named path .
8662	Get the namespace segments for a specific hint .
8663	Find a view in the given paths .
8664	Returns an array of possible view files
8665	Get information about an event .
8666	Render cookies into Set - Cookie header .
8667	Add Twig Environment
8668	Get all stored messages
8669	Add a flash message
8670	Alias middleware .
8671	Get log messages .
8672	Handle view exception .
8673	Converts an exception into a ErrorException .
8674	Get the cache path .
8675	Ensure static proxy exists .
8676	Format static proxy stub .
8677	Registers the markdown engine .
8678	Clean the string
8679	Add a TCOMment to the output .
8680	Add the references to the output .
8681	Add flags to an entry .
8682	Add previous entry
8683	Add message id to the given entry .
8684	Add msgididplural to the entry .
8685	Add messagestr to output .
8686	Add headers to output
8687	Gets pagination links .
8688	Create a cache adapter .
8689	Ensure the correct command name
8690	Determine if the cron expression is up to date .
8691	Run the command in the foreground .
8692	Run the command in background .
8693	Call the beforeCallbacks .
8694	Call the after callbacks .
8695	Creates a closure that will be used when time interval to midnight .
8696	Checks if the given time is a midnight time .
8697	Merge two matchers .
8698	Optimizes the given matchers .
8699	Optimize the matcher .
8700	Optimize matchers order
8701	Creates an html displayer instance .
8702	Create a viewDispatcher .
8703	Create a WhoopsPrettyPrettyDispater instance .
8704	Get the number of recipients in a message .
8705	Bootstrap the framework .
8706	Processes the request through router .
8707	Render an exception .
8708	Send request through middleware .
8709	Compile an array of parameters .
8710	Sets the value at the specified index .
8711	Get the invoker .
8712	Adds the binding to the concrete .
8713	Binds a concrete class to the container .
8714	Binds a concrete instance to the container .
8715	Resolve an abstract type
8716	Resolve a service
8717	Resolve singleton binding .
8718	Extends the resolved object .
8719	Format a contextual binding implementation .
8720	Get message id from response .
8721	Converts an array of emails to a string .
8722	Get the MIME part for the message .
8723	Get the payload for the message .
8724	Process recipients .
8725	Process message parts .
8726	Process the headers array .
8727	Check the requirements .
8728	Get the value of the last extension .
8729	Get a view .
8730	Determine if the given string ends with the given substring .
8731	Render cookie into HTTP header .
8732	Create a set of Cookies from a Cookie header string .
8733	Set the error .
8734	Sets the exit code .
8735	Generate the URI for a given route .
8736	Prepares route path .
8737	Check if the request scheme is required .
8738	Add the port and scheme to the URI .
8739	Replace route parameters .
8740	Replace named parameters .
8741	Add query string to route .
8742	Returns the query string .
8743	Parses an array with where parameters .
8744	Get controller middleware .
8745	Get disabled middleware .
8746	Adds a new cookie to the set .
8747	Split a cookie pair .
8748	Inject Content - Type header into Content - Type header .
8749	Filter words .
8750	Make a random string
8751	Replace the first occurrence of a substring in a string .
8752	Replace the last occurrence of a substring in a string .
8753	Replace part of string by position .
8754	Get verbosity level
8755	Runs the command
8756	Call console command .
8757	Call silent command .
8758	Get the value of an argument .
8759	Get the value of a command option .
8760	Ask user question
8761	Asks for a question that has completed a value .
8762	Asks a value to a choice question .
8763	Output a table
8764	Write a line to the output .
8765	Output an info line .
8766	Shortcut to add a new line .
8767	Shortcut to add a question to the output .
8768	Add an error to the list .
8769	Write a warning to the output .
8770	Configure the usage using FluentDefinition .
8771	Adds additional options to the command line .
8772	Get the transport ID from the response .
8773	Get the recipients of a message .
8774	Render the template .
8775	Add not report exception .
8776	Report an exception to the logger .
8777	Add a transformer .
8778	Handle an error .
8779	Handles fatal errors .
8780	Registers exception handler
8781	Registers the shutdown handler .
8782	Prepare exception .
8783	Get the transformed exception .
8784	Returns the level of the exception .
8785	Determine if an exception should be reported .
8786	Add dumper .
8787	Dump data .
8788	Return a DumperContract object for the given mime type .
8789	Returns a string representation of the given Swift message entity .
8790	Get the parameters .
8791	Convert number of UTF - 8 codes to UTF - 8 .
8792	Create a queueing dispatcher instance .
8793	Optimize route tree
8794	Extract common parent nodes from a route tree .
8795	Get SQL with parameters
8796	Try to fopen a file .
8797	Creates a new stream for the given resource .
8798	Copy the contents of a stream into a string .
8799	Copy to another stream .
8800	Read a line of data from the stream .
8801	Sets the default path and domain .
8802	Get the path and domain
8803	Gets the PrettyPageHandler .
8804	Update Host from Uri
8805	Filter method .
8806	Create a URI from a string
8807	Returns the path without the file extension .
8808	Change the extension of a path .
8809	Creates a cache manager .
8810	Receives a mock instance
8811	Resolve static proxy instance .
8812	Check if the instance is a mock .
8813	Returns the segment for the given command name .
8814	Sets the response file
8815	Set the content of the response .
8816	Automatically sets the Last - Modified header
8817	Return an instance with the specified cookie value .
8818	Describes a command .
8819	Returns descriptions of commands .
8820	Returns the namespace infos of a set of commands .
8821	Create the menu for the cookie tab .
8822	Prepare request attributes .
8823	Prepare request headers .
8824	Prepares the server params .
8825	Returns the parsed body .
8826	Exports a value as a string .
8827	Create a new crypted connection
8828	Get the cache configuration .
8829	Create a filesystem adapter .
8830	Parses a route string .
8831	Generate a regex for matching the parameters
8832	Get invoker .
8833	Checks whether an object exists .
8834	Returns the target language value from a file .
8835	Create a vard dump connection .
8836	Creates dump server .
8837	Check if path exists .
8838	Get the transformed path .
8839	Get the contents of a directory .
8840	Filter contents by type .
8841	Check if the token matches the given request .
8842	Add a cookie to the response .
8843	Sanitize collected messages .
8844	Compute the message count .
8845	Sort messages by priority
8846	Add a stream to the stream .
8847	Closes the stream .
8848	Decode GIF .
8849	Decodes and decodes the SVG extension
8850	Decode the gif descriptor and add it to the gif .
8851	Decodes the image data into a GIF .
8852	set the order dir
8853	Returns list of loaded modules
8854	Loads the list from the server .
8855	Set cities from array
8856	Set the PST networks from an array
8857	Load PDO networks .
8858	Loads country cities .
8859	Get all countries
8860	Returns the city with the given id .
8861	Pads PKCS5 padding .
8862	Returns all country countries
8863	Update all networks
8864	Updates the networks data .
8865	Creates a new instance of the specified type
8866	Decode a delay from the buffer .
8867	Check if the current image has transparent color .
8868	Decodes the Disposal method .
8869	Returns the dimensions of the image
8870	Get the offset of the node .
8871	Sets the offset .
8872	Get the Country object
8873	Converts the data into an array .
8874	Create a mapping from a flat array .
8875	Import from array
8876	Create the ID .
8877	Generate a unique hash .
8878	Generates auth string
8879	Retrieve the call history .
8880	Call a soap method
8881	Returns a frame from the stack .
8882	Adds an offset to the element .
8883	Adds a new size to the frame
8884	Get loops from the current file .
8885	Has global color table .
8886	Count the number of global colors .
8887	Get the background color index .
8888	Adds a frame to the first stack .
8889	Creates a new frame with the given property .
8890	Returns an array representation of this object .
8891	Retrieves all the prepaid balance
8892	Get customer balance array
8893	Get balance list
8894	Change the balance of a customer
8895	Synchronize customer prepaid balance
8896	Sets the canvas width and height
8897	Set the frame from decoded image
8898	Creates a frame from a gd resource
8899	Encode the current frame as a string .
8900	Builds the logical screen descriptor
8901	Builds the Netscape Extension .
8902	Builds a Frame from the given Frame .
8903	Builds the dynamic control extension .
8904	Builds image descriptor .
8905	Create a new Order
8906	Change auto - renew status .
8907	Renew the current subscription status .
8908	Load from service details
8909	Updates the mapping .
8910	Generate a unique hash .
8911	Checks if an ip is in a certain range
8912	Gets a parameter .
8913	Associate a metadata service .
8914	Set meta data
8915	Adds metadata for a given service .
8916	Removes a service from the container
8917	Releases a shared service
8918	Get service by name
8919	Create service instance from factory .
8920	Resolve service provider .
8921	Register a service provider .
8922	Register a binding
8923	Binds a class
8924	Binds a factory to the resolver
8925	Bind a shared factory
8926	Get type of service .
8927	Add argument .
8928	Add an array of arguments to the command line .
8929	Returns the resolved arguments .
8930	Create the container
8931	Sets the list of tokens .
8932	Returns the current token .
8933	Gets the next token .
8934	Skips all tokens of the given types .
8935	Returns the remaining tokens .
8936	Returns all tokens until the given token type .
8937	Returns all of the tokens until a closing scope .
8938	Helper function for invalid tokens .
8939	Parses a child node .
8940	Parses the result .
8941	Sets the container name .
8942	Adds a new service
8943	Adds services from an array
8944	Add a service
8945	Import services from a namespace
8946	Check if given string is invalid .
8947	Generates a normalized service name .
8948	Generates code for the template .
8949	Returns the method name for the given service name .
8950	Generates code for arguments .
8951	Generates metadata for the services .
8952	Generate Resolver types
8953	Generates the resolver mappings .
8954	Generate Resolver methods
8955	Creates a ValueNode from a Token .
8956	Sets type of value .
8957	Generates a package mapping .
8958	Get value of control
8959	Checks if the type is a valid value .
8960	Determine if the collection contains a given key .
8961	Adds a node to the end of the array .
8962	Convert to PHP array
8963	Return the next token .
8964	Returns an array of token strings .
8965	Route to the default deployer .
8966	Evaluate a command
8967	Create a backup of the database .
8968	Extract the git repository .
8969	Copy . env .
8970	exec composer
8971	Install NPM
8972	Creates a new database record .
8973	and install command
8974	Resolve service .
8975	Sets the cache dir .
8976	Create the container .
8977	Handle an incoming webhook request .
8978	Import paths from vendor .
8979	Check if path exists
8980	Returns the code from the container .
8981	Get code from container .
8982	Parses the given container file
8983	Handles nodes in the given scope .
8984	Handles an import statement .
8985	Handle the parameter definition .
8986	Create service arguments from argument node .
8987	Handle a service definition .
8988	Creates a service definition from the given array .
8989	Add a service call .
8990	Add a method call .
8991	Add meta data .
8992	Check if the request is a github origin .
8993	Determine if the request is authentic .
8994	Set the parameter value
8995	Get endomondo name by id
8996	Returns the time as a string
8997	Send the Payload .
8998	Set type id .
8999	Get the end date
9000	Returns the points as a string
9001	Generate a GPX .
9002	Collects data for Twig .
9003	Retrieves related models .
9004	Gets the payload for ajax requests .
9005	Get ajax callback response .
9006	Run a callback .
9007	Sanitize the handle .
9008	Validate all condition validations
9009	Validates a single condition .
9010	Set size for specific device
9011	Adds a new reset button
9012	Returns the size of the given device if any .
9013	build the list of column classes
9014	Check if a user is logged in
9015	Opens grid .
9016	Render a grid .
9017	Walks down the grid .
9018	Create a start row .
9019	Returns the reset of columns for the grid .
9020	Get the index of this node .
9021	Migrate from legacy table
9022	Register action handle .
9023	Handle ajax handler
9024	Sets the internal callback
9025	Set validations .
9026	Handles the response
9027	Get the response type
9028	Send response headers
9029	Send the response body .
9030	Get the content of a URL .
9031	Checks if the model is supported by GeoIP2 model .
9032	Toggle visibility of the record .
9033	Returns whether the current user has access to the database .
9034	Build grid .
9035	Returns the column as a string .
9036	Add a column reset
9037	Add column resets
9038	Get column resets .
9039	Returns a password reset for a column .
9040	Returns the column resets as a string
9041	Registers a handle .
9042	Register JS helpers .
9043	Gets an array of nonces .
9044	Get grids from published page
9045	Implements hook for parsing .
9046	Implements hook .
9047	Get grid elements
9048	create row instance
9049	Create grid column .
9050	Build columns .
9051	Fetches the result from the database
9052	Prepare custom classes for the given result .
9053	Build the column resets
9054	Creates a grid by id
9055	Implements hook for subcolumns .
9056	Hook called when a model is visible .
9057	Loads a form field .
9058	Get grids from event
9059	Prepare container for grid
9060	Update subcolumns definition
9061	Append columnset field to palettes .
9062	Append column sizes fields to the palettes .
9063	Returns an array of all available tl_columns
9064	Retrieves Grids from the container .
9065	Returns an array of columns for a module
9066	Get column orders
9067	Return column numbers .
9068	Get a value from the session
9069	Check if a key exists
9070	Deletes a value from the session
9071	Load item by key
9072	Reflash the session data .
9073	Parse insert tags .
9074	Get the walker for the insert tags .
9075	Translate parameter tags .
9076	Returns the encoder parameters .
9077	Get decryption params .
9078	Save dynamic fields
9079	Returns true if the value is valid
9080	Saves the file field .
9081	Initializes the request .
9082	Render fields .
9083	Get translated field value
9084	Getter for values .
9085	Validates all entities
9086	Save all entities
9087	Assign dynamic fields to view .
9088	Get field translation object by specified language .
9089	Get repeaters by locale .
9090	get entities by field id
9091	Get entity by id and field type
9092	Duplicate this entry
9093	Initializes the group .
9094	validate the form
9095	Renders the inner html .
9096	Save the group
9097	get group by rule
9098	Matches a rule against a set of options .
9099	Init a group with form data .
9100	Fetch data for post data
9101	Set the character at the given coordinates .
9102	Returns the pixel at the specified position .
9103	Create a row .
9104	Returns a formatted set of rows .
9105	Gets the pixel from the current map
9106	Return prime number of characters
9107	Init repeat fields
9108	Create list control after post data .
9109	Create list control .
9110	Creates a field control
9111	Create header repeater control .
9112	Save translations .
9113	Get display value .
9114	Get field value .
9115	Get template name
9116	Get the default template name .
9117	Initializes the property value
9118	Retrieve the repeater value
9119	Returns the HTML id for this field .
9120	Returns the HTML name for this field .
9121	Save the field .
9122	Saves a field .
9123	Saves a new repeater field
9124	Get a single option value
9125	forwards .
9126	Moves the file corner .
9127	Returns whether the task has an ancestor of the previous task configuration .
9128	Determines whether the task has a descendant .
9129	Reset the resource
9130	Check input condition
9131	Configures wrapped condition options .
9132	Configures the condition options .
9133	Checks the value for the given key .
9134	Check if a value is empty .
9135	Get the duration of the event
9136	Contextualize options .
9137	Tries to find the best task to execute
9138	Retrieves the input code from the previous task state .
9139	Check if the given process state is resolved .
9140	Get the file path .
9141	Process theorter .
9142	Create an iterator from the input
9143	Flushes all items in the process .
9144	Returns the line count
9145	Rewind the file stream to the beginning .
9146	Returns the cleaned transformer code .
9147	Get all dependency groups .
9148	Returns the main task group .
9149	Check circular dependencies
9150	Builds the dependencies of the task
9151	Sorts the dependencies of a task
9152	Resolve the given task configuration .
9153	Initialize the task .
9154	Flushes the task configuration .
9155	Handle the given process state .
9156	Checks whether the given process is in a process .
9157	Validate the model
9158	Convert to array
9159	Get array of model fields
9160	Unset relation model
9161	Format class name to relation name .
9162	Adds a relation to the given model .
9163	Adds a one - to - many relationship .
9164	Adds a many - to - many relationship .
9165	Prepare and execute a query
9166	Searches for records in the database .
9167	Finds a single record
9168	Counts the number of records in a table
9169	Build select query
9170	Builds and executes a select query
9171	Hydrate an object with properties
9172	Delete a record from the database .
9173	Update single record
9174	Insert this record into the database
9175	Keep memory keep
9176	Removes a listener from the given closure .
9177	Returns a model from the collection
9178	Remove a model from the collection
9179	Get the index of a model in the registry
9180	Saves the elements .
9181	Prefix data with table name .
9182	Prefix an order with a table
9183	Returns the definition without the column name .
9184	Register a custom database table .
9185	Makes a simple query object .
9186	Instantiate a complex query object .
9187	Get model .
9188	Maybe install a table
9189	Maybe uninstall a table plugin .
9190	Is the given table installed?
9191	Fire plugin event .
9192	Save a WP post .
9193	Get foreign column .
9194	Parses the column defaults
9195	Create a new Query instance from the supplied model .
9196	Build select statement .
9197	Select a single value
9198	Select all records
9199	Add an expression
9200	Add a where clause to the query .
9201	Generate where tag .
9202	Adds a nested where clause to the query .
9203	Add a join condition to the query .
9204	Add an or where clause to the query .
9205	Add a where date statement to the query .
9206	Filter the query by a meta field .
9207	Add order by .
9208	Adds an order by expression
9209	Group by a column
9210	Adds a group by expression to the group .
9211	Join another table .
9212	Join a subquery with another query .
9213	Paginate the results
9214	Executes a callback for each query
9215	Add eager loading of relations
9216	Parse a nested_with field .
9217	Assign value to path
9218	Makes a new limit tag
9219	Build SQL .
9220	Update meta cache .
9221	Find a record by primary key
9222	Find many keys by their primary keys
9223	Find a model by primary key or throw an exception
9224	Find existing record or create new one
9225	Get first record matching attributes .
9226	Find or create a record .
9227	Find or create a new model instance .
9228	Do eager loading .
9229	Do eager load .
9230	Assert operator
9231	Prepare a table column .
9232	Escape a value
9233	Set configuration options .
9234	Get column value
9235	Create new row
9236	Add new ORDER BY clause
9237	Add an ORDER BY clause
9238	Set all rows
9239	Build the eager load map .
9240	Save a WordPress comment .
9241	Returns the default argument value
9242	Query the database .
9243	Parse the results .
9244	Parse the select statement
9245	Parse order argument
9246	Parse limit .
9247	Check if the arguments are numerically equivalent .
9248	Check if changed .
9249	Fetch all records from the database .
9250	Deletes this model from the database .
9251	Updates the model with the given values .
9252	Returns total number of pages
9253	Specify pagination .
9254	Fetches found models .
9255	Returns the number of models without limit .
9256	Check if a row exists
9257	Set an offset .
9258	Retrieve a record .
9259	Builds the query
9260	Create a bootable if needed .
9261	Boot all the uses .
9262	Set the model attributes .
9263	Sets the specified unfill attribute on the resource .
9264	Attach the given unfillarded attribute with the given callback .
9265	Check if a column is fillable
9266	Set an attribute for this relation .
9267	Sets a raw attribute value .
9268	Return the requested attribute value .
9269	Get attribute value .
9270	Get the attribute value .
9271	Get an attribute from an array .
9272	Return all the relations
9273	Return a relation instance for the requested attribute .
9274	Set relation attribute value
9275	Get relation attribute value
9276	Refresh the current object data
9277	Returns an array of dirty attributes
9278	Load an object by primary key
9279	Initialize from query
9280	Get data from primary key
9281	Check if data is cached
9282	Update item in cache
9283	Save the model to the database
9284	Saves has_many relations
9285	Save the loaded relations
9286	Execute the save hook on the database .
9287	Execute the update and update the timestamp .
9288	Finishes the saving process .
9289	Delete the current model from the database
9290	Insert multiple new models into the database .
9291	Fire the model event .
9292	Registers a model event
9293	Get the data to cache .
9294	Register a global scope
9295	Return an instance without the given global scopes .
9296	Get the eager loaded relations .
9297	Returns an array representation of the model s attributes .
9298	Get the comparison string .
9299	Method to get property value
9300	Get data by primary key
9301	Get a single column
9302	Get a select by one or multiple rows .
9303	Count the number of records in the database .
9304	Insert data into the table
9305	Updates data in the database
9306	Delete a row
9307	Delete many records from the database
9308	Generate exception from database error .
9309	Save the term .
9310	Makes a query object from the related model object .
9311	Fetch the results for eager loading .
9312	Set new values
9313	Set a single parameter
9314	Set the fields to return
9315	Reset the select to the default values
9316	Set the query to update
9317	Set the delete mode for a table
9318	Set insert query type
9319	Sets the FROM clause for the query .
9320	Adds a JOIN clause
9321	Adds an AND where statement to the current query .
9322	Adds a where operator
9323	Reset current order by value
9324	Set limit .
9325	Reset the query limit
9326	Boot the trash table support .
9327	Load the results .
9328	Load from cache .
9329	Load a collection from the cache .
9330	Cache the results .
9331	Cache a collection .
9332	Cache a single result
9333	Register the cache events for this attribute .
9334	Save the given user .
9335	Update last_updated timestamp .
9336	Get container parameters .
9337	Is the container cacheable?
9338	Load the cache .
9339	Load container configuration .
9340	Builds the column name for the given table .
9341	Persist the saved values .
9342	Persist removed records .
9343	Persist the added records .
9344	Creates a new UUID
9345	Initialize the authentication .
9346	Creates a new model .
9347	Parse the given asset and return the result .
9348	Builds the asset result .
9349	Parse a less asset
9350	Send a request
9351	Get the notifications .
9352	Count the items in the collection .
9353	Adds a message to the queue .
9354	Send the log message .
9355	Verify sort value
9356	Adds a message to the registry .
9357	Retrieve a specific message type
9358	Imports issues .
9359	Gets the value for an identifier .
9360	Check if an offset exists
9361	Extend an identifier .
9362	Register a service provider
9363	Defines a service tag .
9364	Returns all registered service ids for a given tag .
9365	Boot the application .
9366	Initializes the bundles .
9367	Get kernel parameters .
9368	Validate the given content .
9369	Validate given page with schemas .
9370	Validate the content without validation .
9371	Get asset container .
9372	Outputs all JS assets .
9373	Outputs all CSS assets .
9374	Get the assets for the given type and container .
9375	Arrange the given assets .
9376	Determines if a dependency is valid .
9377	Add a new PostValidator
9378	Create a new XSD retriever instance .
9379	create a new XsltRetrieve instance
9380	Creates a new CertificadoValidator instance .
9381	Creates a new CFDIRader instance .
9382	Handle the given command .
9383	Set a cookie
9384	Gets a cookie value .
9385	Returns the first value found by the given closure
9386	Checks if a raw password is too long
9387	Retrieves a node
9388	Get node attribute
9389	Append a child element to the source .
9390	Populate a node
9391	Retrieves a node
9392	Check if the given value has a required value .
9393	Add Doctrine queries to the Debug Bar
9394	Add multiple timers .
9395	Get file size .
9396	Append a validator .
9397	Removes a validator .
9398	Returns validator by index
9399	Build a command from an array of arguments
9400	Run the CFDIFFactory
9401	Execute filename command
9402	Authorizes the user with the given credentials .
9403	Returns true if user is logged in
9404	Authenticates the user with the provided username and password .
9405	Logout the current user
9406	Adds a constraints .
9407	Validate the given input .
9408	Redirect to a path .
9409	Returns the file path .
9410	Retrieve a specific message .
9411	Generate custom post type name .
9412	Returns list of functions
9413	Resolve command handler .
9414	Setup the object
9415	Get sum of all nodes
9416	Get session parameter .
9417	Set the position on the position inside the pivot table .
9418	Generate a taxonomy name .
9419	Create a route redirect
9420	Register the commands .
9421	Returns the metadata of a bundle .
9422	Returns metadata for a namespace .
9423	Finds the namespace and path of the given class .
9424	Add an asset to the collection .
9425	Render a view with the given parameters
9426	Save data into cache .
9427	Parse an XML document
9428	removes all schema locations
9429	Removes all nodes from the current namespace
9430	Removes unused namespace elements .
9431	Initializes the bindings
9432	Bind registry items
9433	Returns the file name as dashes
9434	Initialize the Context
9435	Render the template .
9436	Loads the configuration files .
9437	Add a route to the collection
9438	Define a new section
9439	Create a route group
9440	Starts a block .
9441	Stops a block .
9442	Outputs a block .
9443	Create a controller .
9444	Instantiates a controller .
9445	Validate the url .
9446	Attempts to find a template .
9447	Sets the Entity Manager .
9448	Prepares the connection for the given connection
9449	Render View .
9450	Create a new form open tag .
9451	Add data transformer .
9452	Get public url
9453	market API method
9454	Make an account
9455	Prepares attributes .
9456	Add extra .
9457	Returns the first row of the result set
9458	Writes a dialog .
9459	Get the current connection instance .
9460	Begins a DB transaction .
9461	Loads the ManiaCode object .
9462	Render the xml
9463	Establish a connection to the remote server
9464	Write the watch
9465	Sets the background color
9466	Set the image .
9467	Set the image id
9468	Set image focus
9469	Set image focus id
9470	Link this Mania
9471	Get config .
9472	Sets a configuration key .
9473	Get translation .
9474	Returns the array representation of the result .
9475	Strips CSS styles from a string
9476	Create a new redirect
9477	Finds all numbers matching the given index .
9478	Return an instance of the cache driver .
9479	Load Maniaink object
9480	Begins a frame .
9481	End a frame
9482	Creates a redirect
9483	Appends the given XML string .
9484	Builds the driver instance .
9485	Sets border .
9486	Declares a new font .
9487	Called when a string is on an image
9488	Called when image is fast
9489	On image quality
9490	Get a redirection for the given request .
9491	Get a list of redirects .
9492	Get the redirection array .
9493	Set the anchor size .
9494	Set the selected icon
9495	Invoke the command
9496	Set the media data .
9497	Returns the limit string for a given offset .
9498	Returns the update string for a given set of values .
9499	Gets a parameter by name .
9500	Returns a value or throws an exception
9501	Returns a strict or false
9502	Restore a variable .
9503	Redirect Link Arguments .
9504	Create Link Arguments .
9505	Create an absolute link list .
9506	Increment position
9507	Increment position
9508	Increment position .
9509	Sets the position of the Graph .
9510	Sets the new scale .
9511	Set the valign .
9512	Sets the column halign
9513	Sets the cell alignment .
9514	Set the image width .
9515	Set the image size .
9516	Sets the image size
9517	Add item to top
9518	Add a gap
9519	Get all keys .
9520	Get all redirect statuses .
9521	Handler for fatal error .
9522	Compute the error message
9523	Computes the short message of an exception .
9524	Handles the redirect .
9525	Upload a file to the browser .
9526	Get the current url .
9527	Get the aligned position of an X .
9528	Returns the position within a given position
9529	Calculates the position of an element
9530	Searches for Magento import
9531	Helper method for quoting of data
9532	Reset all balance
9533	Query Delete by assets
9534	Configure a class loader
9535	Get service ids .
9536	Get return type
9537	Execute transaction flow
9538	Get a balance entry .
9539	Get the hierarchy
9540	Change Content - Type
9541	Parses the raw HTTP header line .
9542	Convert a string to an array .
9543	Converts a multi - dimensional array into an indexed array .
9544	Get asset types
9545	Execute transaction on an asset type
9546	Query the balance for a given asset type id .
9547	This action is called if the strategy is valid .
9548	Mutate property .
9549	Loads data from url .
9550	Get the resource url .
9551	Generates the translation files .
9552	Parse csv url into array
9553	Localize the data
9554	Creates a backup of given strings .
9555	Returns all asset types for given asset type code .
9556	Get asset type id
9557	Returns the attribute associated with a customer asset code .
9558	Get the system s customer id .
9559	Execute an authorization request
9560	Builds a configuration key for the strategies
9561	Parse the user authentication response .
9562	Handles the login action .
9563	Renders a view .
9564	Get asset types .
9565	Sends the response to the browser .
9566	Sets up the security context
9567	Verify token .
9568	Validate a spreadsheet url .
9569	Register the API client .
9570	Register the token class .
9571	Register application commands for console .
9572	Starts a new session .
9573	Returns an array with all class names in an array .
9574	Set the response status
9575	Returns an array of parsed tokens
9576	Finds the list of tokens .
9577	Finds the end of a quoted string .
9578	Finds the end of the string .
9579	Checks a css rule .
9580	Merge words .
9581	Check selectors .
9582	Returns selectors from words list .
9583	Recursively parse a token list
9584	Set the current application key for a request .
9585	Get the current application key .
9586	Add an accepted JSON type for a request .
9587	Returns an array of association data
9588	Unpublish a post
9589	Save an unpublishing post
9590	Active the scheduler for the post
9591	Generate a unique key
9592	Generate value for key
9593	Verify if the given key is valid for the given key .
9594	Generate HTTP headers for an app key .
9595	Generate query data for a specific app key .
9596	Returns the unique ID for this entity
9597	Fit the fit to a given shape
9598	Returns a list of all registered manipulations .
9599	Creates an Account
9600	Fills the properties with the given values .
9601	Get the Uri
9602	Sets the user info .
9603	Sets the port .
9604	Set the path .
9605	Returns a segment
9606	Get a query value
9607	Build the docblock
9608	Aggregate function .
9609	Returns the configured strategy .
9610	Builds the configuration for the strategy
9611	Composes settlement response .
9612	Execute the save command .
9613	Execute a request
9614	Prepare log ids .
9615	Validate transactions
9616	Sets headers from an array .
9617	Set an HTTP header .
9618	Adds a header .
9619	Removes the header .
9620	Registers a set of PSR - 4 prefixes .
9621	Adds an array of namespace prefixes
9622	Finds the file for the given class name .
9623	Find file with known suffix
9624	Converts the given object to an array .
9625	Clean array values .
9626	Set code .
9627	Create Uri object
9628	Parse server params .
9629	Initialize uploaded files .
9630	Parse uploaded files .
9631	Parse multiple uploaded files .
9632	Returns true if the request contains Content - Type .
9633	Run the migrations .
9634	Dispatch the command
9635	Returns a table
9636	Output an error
9637	Display help message
9638	Get all available Commands
9639	Make the directory .
9640	Append the routes to the given file .
9641	Replace and save a file .
9642	Dispatch the request
9643	Create response object .
9644	Returns the current page .
9645	Returns a response containing the page contents .
9646	Builds the response for the given URI
9647	Returns the page associated with the given uri .
9648	Returns the alias for the given URI .
9649	Displays a single Record model .
9650	Creates a new i18n message . If creation is successful the browser will be redirected to the view page .
9651	Add banner ids to text .
9652	Runs the router
9653	Run CLI command .
9654	Register the service provider
9655	Get a markdown renderer instance .
9656	Get the blade templates .
9657	Get migration files .
9658	Find a page by its identifier
9659	Returns the page name for the given page identifier .
9660	Returns the meta data for the page identifier .
9661	Retrieve the page tree .
9662	Get all pages for a given path .
9663	Add the successful migration .
9664	Loads the messages from database .
9665	Sends activation mail
9666	Searches for rows .
9667	Render the given expression
9668	Render given expression
9669	Returns the expression key path for the given data path .
9670	finds all classes
9671	Prepare configuration array
9672	Returns the request host
9673	Get value by key
9674	Displays a message .
9675	Updates an existing Message model . If update is successful the browser will be redirected to the view page .
9676	Deletes an existing Message model . If deletion is successful the browser will be redirected to the index page .
9677	Finds the Message model based on its language
9678	List all pages
9679	Return the parsed content .
9680	Method to get property sorting
9681	get the uri
9682	Get the url from the object meta .
9683	Returns the title of the current object .
9684	Execute a GET request .
9685	Builds the api URL .
9686	Handle API response .
9687	Initializes the configuration
9688	Profiler profile .
9689	Show the template file
9690	Get the value for a key path .
9691	Sets the root directory .
9692	Find class reflections
9693	Returns the class reflection .
9694	Upload a media file to the browser .
9695	Insert media .
9696	Gets the current hours in seconds .
9697	Returns dirty fields .
9698	Register an entity and clean it .
9699	Get dirty fields .
9700	Add the dirty fields to the serialized model
9701	Get entity id from string
9702	Get tags .
9703	Gets the real class name of an object .
9704	Configure Tab Element Factory .
9705	Deletes the media associated to the file .
9706	Create the title
9707	Renders the PDF
9708	Renders the image .
9709	Hydrate raw data .
9710	Hydrate list from data
9711	Deserialize all data .
9712	Deserialize data .
9713	Guess the collection class
9714	Build the sitemap data .
9715	Returns the navigation associated with the given element ID .
9716	Iterator for elements
9717	Normalize field values
9718	Get extra property
9719	Generate random string
9720	Limits a string to a given number of words .
9721	Get all files in a directory
9722	Render a short description
9723	Check if the time slot is overlapping .
9724	Gets all non overlapping time slots .
9725	Merges overlapping time slots .
9726	GET a resource
9727	Merge default parameters .
9728	Execute an API request .
9729	Renders the backend view .
9730	Returns the navigation iterator
9731	Returns the iterator for this grid
9732	Before save callback .
9733	Build the code set .
9734	Updates an existing Media model . If update is successful the browser will be redirected to the view page .
9735	Do the content join
9736	Upload media file .
9737	Updates an existing Post model . If update is successful the browser will be redirected to the view page .
9738	List All Media
9739	Renders specific media row .
9740	Deletes an existing Media model . If deletion is successful the browser will be redirected to the index page .
9741	Set attribute list .
9742	Return an array of serialized model data
9743	Creates the required directories .
9744	Export all views .
9745	Export controllers .
9746	Export the routes file .
9747	Check packages .
9748	Copy plugins .
9749	Copy asset files to destination .
9750	Copy less folders to the destination .
9751	Get settings by categories .
9752	Create a navigation object from a serialized array .
9753	Creates a nav item from an array .
9754	Load a block
9755	get associated module
9756	Serializes an object .
9757	Retrieve model name by key .
9758	Return class metadata .
9759	Get class metadata by id .
9760	Render tree .
9761	Get a tree of pages
9762	Remove item from cache .
9763	get all tags
9764	Returns the tags weights .
9765	Add multiple tags
9766	Removes multiple tags from the model .
9767	Return the tab parent options .
9768	Generate columns .
9769	Count required separators .
9770	Create separators .
9771	Create a stop element .
9772	Create a new tab element .
9773	Get the stop element .
9774	Add an icon to a user
9775	Get select options
9776	List the status of all constants
9777	List types of a given type .
9778	Returns the label for the given type
9779	Returns an array of the resulting list order .
9780	search for value in text
9781	Moves the forward to the next element .
9782	Returns the title of the current dropdown .
9783	Generate the active field
9784	Create router instance .
9785	Get registered driver .
9786	Call a specific driver .
9787	Call router .
9788	resolveDispatch dependencies
9789	Get the nested parameters .
9790	Find Routable attributes .
9791	Tries to find a manageable route .
9792	Get the route for a resource
9793	Returns the alternative resource action .
9794	Dispatches the route .
9795	List items .
9796	Getter for shipping method .
9797	Get the shipping method
9798	Sets the route name .
9799	Build the schema for a resource .
9800	Update shipping address .
9801	Calls the controller method .
9802	Handle the Illuminate response .
9803	Handle content callback
9804	Throw HttpException
9805	Check if the given content is no html .
9806	Register error handler .
9807	Returns an array of options for the action .
9808	Removes an item from the cache .
9809	Save item to cache .
9810	Output a block of messages .
9811	Gets data from cache .
9812	Store an item in the cache
9813	Set multiple values at once
9814	Delete multiple cache items .
9815	Check if cache key is available
9816	Getter for label
9817	Get the full path name .
9818	Convert collection to tree
9819	Type a command .
9820	Set the members of a resource
9821	Loads a PSR - 4 class .
9822	Set the account id
9823	Translates the given exception .
9824	Get console instance .
9825	Execute API command
9826	Returns all available values
9827	List buckets .
9828	Updates properties of a container .
9829	Check if blob exists
9830	Encodes the token
9831	Decode a token .
9832	Return the payload from the token .
9833	Returns the tokens for the given token
9834	Get expiration time
9835	Builds index .
9836	Extracts the default field value from a schema field .
9837	Adds previous button
9838	Add next button
9839	Short description of method getButton
9840	Reveal a record
9841	Checks if value is an object .
9842	Check if value is empty
9843	Convert data to a record .
9844	Parses the response
9845	Get configurator by name
9846	Checks if a configurator exists .
9847	Get writer class by format
9848	Get a writer based on the content negotiation provided .
9849	Transforms a DateTime object into a string .
9850	Initialize the row view
9851	Reads a Schema .
9852	Parse the payload
9853	Write the payload
9854	Returns a valid reader for the given content type
9855	Get a writer for the given content type
9856	Run before each test
9857	Executed after each test .
9858	Cleans up after step
9859	Initialize Laravel services .
9860	Boot the Laravel application
9861	Go to a page in a route .
9862	Opens web page for given action .
9863	Returns the controller s action name .
9864	Checks that current route matches .
9865	Checks that current url matches action .
9866	Checks that session contains value .
9867	Assert that the form has errors .
9868	Assert that a form error message is equal to the view .
9869	Set a user as logged in .
9870	Inserts a record into the table
9871	Transforms a localized number .
9872	Get number formatter .
9873	Nest data into a collection
9874	Flattens a multi - dimensional array
9875	Objectify the given data .
9876	Create a new column .
9877	Create a view for a column and type .
9878	Configure a cell view based on type .
9879	Create a new column .
9880	Checks if the type is a compact column .
9881	Base data .
9882	Returns the shipping data .
9883	Get invoice data
9884	Execute the query and send the request .
9885	Trim whitespace from a string
9886	Converts FQCN to block prefix .
9887	Transforms a number .
9888	Parses a configuration value .
9889	Add an unresolved column .
9890	Checks if the uploaded file is valid
9891	Resolve a filename
9892	Handle editing action for a record
9893	Updates the edit form .
9894	Updates the edit form .
9895	Lock the record .
9896	Apply the auth client configurations .
9897	Publish an item
9898	Load the given language .
9899	Send a HTTP request
9900	Creates a new instance from the url parts .
9901	Store a newly created user .
9902	Show the form for editing the specified user .
9903	Update the specified user in storage .
9904	Remove the specified user .
9905	Create an MPDF instance .
9906	Add host header
9907	Build a Guzzle request
9908	Execute the callable chain
9909	Check if a class exists .
9910	Runs the queue
9911	Creates a new thread
9912	Queue a request for execution
9913	Send a batch of parec requests
9914	Returns the value for a key .
9915	Rewinds the collection to the beginning .
9916	Export format information
9917	Set options from an array
9918	Make a publish api call
9919	Make a HTTP request
9920	Handle the export .
9921	Imports the given headers .
9922	Get the protocol version .
9923	Performs validation .
9924	Load Translate .
9925	Set custom Validator class name
9926	Get validation errors .
9927	Update this entry
9928	Generate a locked message
9929	Is the Member being edited?
9930	Check if an offset exists
9931	Sort the collection using a user - defined comparison function .
9932	Parses the configuration array .
9933	Get the formatted birthday date
9934	Validate a birthday .
9935	Parses the coefficient of a given date .
9936	Returns translation for given coordinates
9937	Action when updating ACL
9938	Customer sync .
9939	when shows list list
9940	when shows role create or edit form
9941	when shows user create or edit
9942	on area create
9943	Form Generator for user
9944	Register group handles
9945	Finds a single entity by a set of criteria .
9946	Return a new instance
9947	Returns the object factory .
9948	Removes documents matching the criteria .
9949	Removes a document by a set of criteria .
9950	Removes one or more objects .
9951	Refresh the given objects
9952	Detach one or multiple objects
9953	Returns the supported method .
9954	Calls supported method
9955	Run an action on the given objects
9956	Flushes the given objects .
9957	Prepare a tag from the hash .
9958	Set pagination .
9959	Set current page .
9960	Update the specified Permission in storage .
9961	Get the paginator
9962	Find PaginatedBy criteria .
9963	Boot extension components
9964	Boots application memory
9965	Load all translation components
9966	Extends validations .
9967	Save model attributes
9968	Validate the model .
9969	Merge the default rules
9970	Purge unneeded attributes .
9971	Auto hash .
9972	Disables the enabled filters .
9973	Disables a filter .
9974	Restores the disabled filters .
9975	Restores a filter .
9976	Get the actions column .
9977	Assigns the object to a user
9978	Check if the given code is successful .
9979	Returns current template name .
9980	Return role form instance
9981	edit form .
9982	create user form
9983	View edit user page .
9984	Store new user .
9985	updates a user
9986	Destroy a user
9987	Save the user .
9988	Check if current url is within path
9989	Get registered type
9990	Return the etag
9991	Get the timestamp field
9992	Returns the timestamp hash for the given timestamp field .
9993	Execute the aggregation .
9994	Returns an array of ids .
9995	Count the number of rows in this table .
9996	Gets the table name .
9997	Returns the order by clause for this type .
9998	Set value to order by .
9999	Get conditions as string
10000	Add pattern where conditions .
10001	Set join table for a given table
10002	Edit ACL form .
10003	Update ACL .
10004	Sets the logger to use
10005	Starts a process .
10006	Stop the session
10007	Kill a lock
10008	Add a route where conditions to the query .
10009	Get the where statement .
10010	Count the number of rows in this table .
10011	Executes a query and returns the first row .
10012	Returns an array of ids .
10013	Executes the select command
10014	Load object by type .
10015	Get sql for select fields
10016	Lists all module actions .
10017	Brings a resource
10018	Defines all the permission objects .
10019	Assign a role to a user
10020	Remove a given role from a user
10021	create eloquent form .
10022	View edit page .
10023	Store a role .
10024	Updates role .
10025	Destroys a role .
10026	Save a role .
10027	Import roles .
10028	Acl .
10029	Clear analytics data
10030	Clears the message data
10031	make partial storage container
10032	Show the form for editing the specified role .
10033	Get user roles .
10034	Gets counter statuses .
10035	Get actions column
10036	Render user roles .
10037	Modify an instance
10038	Get a producer for a registered type
10039	Register a producer for a given type
10040	Register a producer by class name
10041	Gets an instance by its ID
10042	Returns an object by its id or throws an exception if not found .
10043	Add data object to the pool
10044	Add an object to the database .
10045	Count the number of rows for the given type and conditions
10046	Create a finder for the given type
10047	Get a single record by type .
10048	Returns a list of fields for a type .
10049	Returns the escaped order by field .
10050	Get trait names by type
10051	Recursively get all trait names
10052	Adaptes a grid .
10053	Build the checked label .
10054	Returns active page entity .
10055	Assigns current page tracking
10056	Set email tracking
10057	Get site path
10058	Returns the scheme of the URL
10059	Returns basket product category path .
10060	Compare two field values
10061	Loads the fields from a database row .
10062	Creates a copy of this model .
10063	Revert a field to the original value
10064	Get old field value
10065	Set field s value
10066	Insert the record .
10067	Update the row in the database .
10068	Refreshes the generated fields values .
10069	Compare values by field name
10070	Generates a URL for a named route
10071	Response when role is successful
10072	Get errors for a specific field .
10073	Check if field has an error
10074	Add error instance
10075	Prepare product title
10076	Modify by contact controller .
10077	Modify by newsletter controller .
10078	Modifies the current user with an additional registration page .
10079	Removes an event subscriber .
10080	Restores all event subscriber .
10081	Disables event listeners .
10082	Disables an event listener .
10083	Restores all the disabled event listeners .
10084	Restores the event listeners for the given event .
10085	Get the subscriber class name .
10086	Returns whether the given string is an event subscriber .
10087	Get event listeners .
10088	Returns active user ID .
10089	Returns active user s email address
10090	Generates a unique cache key .
10091	Generate cache keys .
10092	Sends the data to the api
10093	Checks if an item exists .
10094	Get the value associated with the given key .
10095	Get a value from an item .
10096	Set an item in the collection .
10097	Adds an item to the collection .
10098	Sets a value in an array .
10099	Remove an item from the collection .
10100	Remove a value from an item .
10101	Assigns a logger to the helper
10102	Application boot method .
10103	Set the mail configuration .
10104	get a field
10105	Convert a value to a string .
10106	Get the page size .
10107	Register the Capsule Service .
10108	Validate required fields
10109	Singleton instance .
10110	Init hooks .
10111	Loads main script
10112	Display notices .
10113	Register a notice .
10114	Dismiss the notice AJAX request
10115	Dismiss a notice .
10116	Mark a given user as dismissed .
10117	Determine if a notification is dismissed .
10118	Restore a notice .
10119	Restore the dismissed user .
10120	Restore global dismissed notices .
10121	Get the list of dismissed notices .
10122	Check if notification is dismissed .
10123	Get the notice .
10124	Returns a new raw item
10125	Returns a collection of refined items
10126	Include the attachments .
10127	Get raw items .
10128	Define a new attachment .
10129	Parse the attachments .
10130	Attach the given attachment .
10131	Attach to a class .
10132	Merge arrays recursively .
10133	Get response headers
10134	Get card reference
10135	Get customer reference
10136	Gets the class name
10137	Get the namespace of a class .
10138	Finds the adder method .
10139	Initialize the mappings .
10140	Set translation file language
10141	reads a property from an object
10142	The default action .
10143	Trigger before action .
10144	Handles the after action .
10145	Extend an existing collection .
10146	Append given data to the collection
10147	Adds an entity to the collection .
10148	Checks if the entity is set
10149	Returns the last element in the collection .
10150	Returns the element moved by offset .
10151	Check if a field exists
10152	Search for a specific field in the collection
10153	Shift a slice off the end of the array .
10154	Filter collection by callback
10155	Get entity collection
10156	Split the collection into chunks
10157	Get a slice of the collection
10158	Split the string into chunks .
10159	Remove one or more items from the array .
10160	Creates the distinct values for the given property
10161	Reverses the iterator .
10162	Returns all the values for the given property .
10163	Bind collection to another collection
10164	Group by field .
10165	Prepare scopes .
10166	Parse scope arguments
10167	Set the variable type .
10168	Registers an annotation based on a namespace .
10169	Convert a string to CamelCase
10170	Prepare data for insert
10171	Updates the given data .
10172	Parse filter fields .
10173	Parse filter values .
10174	Convert the input data to an array .
10175	Retrieve the label
10176	Get additional styles by type
10177	Answers an array of additional styles for the given type .
10178	Get the link of this entity
10179	Convert the given data to an array .
10180	Configures a collection
10181	Gets the connection string .
10182	Import field from source .
10183	Convert a string from one route to another
10184	Fire the jobs
10185	Delete the model .
10186	Return class metadata .
10187	Flush an entity manager .
10188	Finds an entity .
10189	Clears an entity .
10190	Removes an entity from the list .
10191	Refreshes an existing entity .
10192	Get entity repository
10193	Determine if the entity manager is managed .
10194	Creates an entity manager .
10195	Process an XCdr request
10196	Performs the merge operation .
10197	Merge lines together .
10198	Computes the added lines added .
10199	Not modified .
10200	notify Cdr record
10201	Registers the Pimple container .
10202	Apply config .
10203	Add environment variables to container .
10204	Get the next job from the queue .
10205	Insert a job record .
10206	Request an XCdr attribute from the result
10207	Converts a string from one delimiter to another .
10208	Create a new record .
10209	Read a record from the database .
10210	Update a record .
10211	Destroys a record .
10212	Restore the record .
10213	Count records .
10214	Create a new Proxy instance .
10215	Close any existing log output interfaces
10216	Loads the widgets .
10217	Load theme options
10218	Sent to XmlRPC server
10219	Add child to menu
10220	Store a newly created permission in storage .
10221	Show the form for editing the specified permission .
10222	Update the specified permission in storage .
10223	Remove the specified permission from storage .
10224	Set adapter .
10225	Returns the adapter type .
10226	Wait for the connection to be ready for a given time .
10227	Returns a list of active channels .
10228	Get all games
10229	Data sanitation and return as array .
10230	Data sanitation and return as object .
10231	Data sanitation and return as JSON .
10232	read as string
10233	read as integer value
10234	read as float value
10235	Data sanitation and return as boolean .
10236	Generates the AST for a class
10237	Find all instance properties .
10238	Creates the constructor
10239	Generate hydration method .
10240	Update config .
10241	Create a new local composer . json file
10242	Find page by attribute
10243	Find pages by attribute
10244	Find page by option .
10245	Find pages by option
10246	Register the widget with the given binding .
10247	Register the view parser class .
10248	Register image launch handler .
10249	Create a database driver
10250	Get invalid template .
10251	Starts a timer .
10252	Subscribe a callback to a signal
10253	Unsubscribes from a signal .
10254	Convert value to appropriate type
10255	Compiles the keys of a row .
10256	Executes a SELECT query .
10257	Prepare column properties
10258	Strip table name from database
10259	Select a virtual server
10260	Select a virtual server by port .
10261	Returns the server port for the given ID .
10262	Returns the first TeamSpeak3_Node_Server object matching the given name .
10263	Returns the first TeamSpeak3_Node_Server object matching the given unique identifier .
10264	Creates a new virtual server .
10265	Deletes a server .
10266	Start a server
10267	Stop server process .
10268	Returns the list of all permissions available .
10269	Returns the IDs of all permissions with the specified permission .
10270	Returns the ID of the specified Permit name .
10271	Returns the name of the group with the specified permission ID .
10272	Returns the category with the specified ID .
10273	Returns an array containing the specified permission .
10274	Add a new entry to the server .
10275	Initiates the authentication process .
10276	Logout the current user out .
10277	Set a single value for the current ServerQuery connection information .
10278	Get service validator
10279	Set the curl content
10280	Parse a PageFetcher response .
10281	Returns an array of all application attributes .
10282	Get given option
10283	Build the options .
10284	User command .
10285	Ping webservice .
10286	Set an image attribute
10287	Formats this Money as a string .
10288	Formats this amount for accounting .
10289	Gets the rounding amount .
10290	Split by a percentage
10291	Checks if a Fieldset contains specified elements
10292	Returns information about an access token
10293	Run controller .
10294	Search for the router
10295	Request method .
10296	Get logs .
10297	Calculate the death result by the given string .
10298	Turn a number into a human - readable number .
10299	Returns the codec used for the TeamSpeak3 API
10300	Returns the group type
10301	Returns the correct type for the given permission type .
10302	Returns the log level for the current TeamSpeak3 plugin
10303	Converts an entry into an array
10304	List calendars
10305	Get all traits
10306	Calls a trait method
10307	Call all registered events
10308	Gets the attribute labels .
10309	Retrieve the attribute hints .
10310	Returns the current TeamSpeak3 as an array .
10311	fetches an error
10312	Handles a reply
10313	Get identity .
10314	Check if current user has an identity
10315	Restore the current model .
10316	Get a single user
10317	Get users followed games
10318	Get notices .
10319	Get channel .
10320	Escapes the string .
10321	Unescapes a TeamSpeak3 string .
10322	Get team .
10323	Adds a result to the container .
10324	Get stream information .
10325	Gets all streams
10326	Get all featured streams
10327	Get followed streams
10328	Gets a summary of all streams
10329	Get top chart
10330	Returns the value of the current element
10331	Tries to resolve a TSDNS hostname and returns the result .
10332	Get all the configurables
10333	Send a message to the Team
10334	Kicks the client from the server .
10335	Downloads the user avatar
10336	Bind events to the controller
10337	Connects a single event to the active element .
10338	Get query var
10339	Return the base uri of the request
10340	Sends a command to the server
10341	Wait for the server to exit .
10342	Prepares a console command
10343	Returns the host of this team .
10344	List all available extensions .
10345	Write application configuration file .
10346	Sets the parent element
10347	Get a table s columns
10348	Create a Transcoder instance .
10349	Find a value by case - insensitive name .
10350	Set by case - insensitive name .
10351	Format the notices as an array .
10352	List of all extensions .
10353	Do the actual request .
10354	Renders a task .
10355	Deactivate an extension .
10356	Activates a given extension
10357	Uninstall an extension .
10358	Create and run a new deferred task .
10359	Returns the TeamSpeak3_Node_Client object matching the given name .
10360	Downloads the channel icon .
10361	Sends a text message .
10362	Deletes this channel .
10363	Encodes a JWT payload
10364	Sign with given key and algorithm
10365	JSON decode .
10366	Commit current config to PHP .
10367	Setup extension events .
10368	Creates a copy of this channel group and returns the new group object .
10369	Sends a text message
10370	Get form class name
10371	Gets a FOS .
10372	Returns a list of fOS entities .
10373	Creates a new entity .
10374	Saves a PATCH request .
10375	Delete an entity with the given id .
10376	Read a file .
10377	Parse a Json string .
10378	Call BOM file
10379	Normalize the ID attribute .
10380	Remove invalid attributes .
10381	Sets the value of the control
10382	Adds an element to the collection .
10383	Returns the top level window if any .
10384	Removes the given element from the list .
10385	Returns an object by its id .
10386	Loads the state attributes from a file path .
10387	Save the state .
10388	Set data type
10389	Handle a channel creation .
10390	Returns localized data field .
10391	Get localized data field
10392	Split data into other versioned data .
10393	Get the other package data .
10394	Humanize a readme string .
10395	Prepare a new migration task .
10396	Build a deferred task .
10397	Matches a route against a set of routes
10398	Parses a regex route .
10399	Check strictness of object
10400	Get the profiler
10401	Initialize the transport object .
10402	Return the blameable attributes .
10403	Get timestamp attributes .
10404	Evaluates the attributes of the given event
10405	Initialize the blame actions .
10406	Get private key information
10407	This function is executed after a request has been executed
10408	Reads data from the server
10409	Send raw data to the server
10410	Restore dump from file .
10411	Runs the dump .
10412	Initialize menu of button .
10413	Add button .
10414	Perform the install .
10415	Populate columns with long value
10416	Populate Numeric columns with long value .
10417	Transforms a JSON string into an assoc array .
10418	Register the services .
10419	Sets a file .
10420	Sets a post field .
10421	Set raw content
10422	Resolve an object .
10423	Bind the abstract into the container .
10424	Get the abstract .
10425	Dispatch event .
10426	Returns the type of the channel spacer
10427	Returns the alignment of a channel spacer
10428	Adds a set of specified permissions to a channel . Multiple permissions can be added by providing the two parameters of each permission .
10429	Removes a set of specified permissions from a channel . Multiple permissions can be removed at once .
10430	Adds a set of specified permissions to a channel client .
10431	Removes a set of specified permissions from a client . Multiple permissions can be removed at once .
10432	Returns a list of files in a channel .
10433	Returns the TeamSpeak3_Node_Client object matching the given ID .
10434	Returns the TeamSpeak3_Node_Client object matching the given unique identifier .
10435	Moves a client to another channel .
10436	Kicks a client from the server .
10437	Removes a set of specified permissions from a client . Multiple permissions can be removed at once .
10438	Returns the server group matching the given ID .
10439	Returns a ServerGroup object matching the given name .
10440	Adds a set of specified permissions to a server group . Multiple permissions can be added at once .
10441	Get server group profiles
10442	Returns the TeamGroup object for the given channel ID .
10443	Returns the TeamGroup object matching the given name .
10444	Adds a set of specified permissions to the channel group . Multiple permissions can be added by providing the two parameters of each permission in the channel group .
10445	Creates a new permission reset for the current user .
10446	Upload a single icon file
10447	Create a snapshot
10448	View logs .
10449	Add a new entry to the log .
10450	Applies the client to the list of clients
10451	Helper function for sorting the channels list
10452	Sort file list by key
10453	Creates a copy of the server group and returns the new group object .
10454	Get icon name by key .
10455	Returns the fully qualified name of the TeamSpeak3_Node_String class .
10456	Gets the HTML viewer .
10457	Filters a list of nodes
10458	Write file to cache directory
10459	Gets the hydrator class .
10460	Connect to the socket
10461	Disconnect from the server
10462	Reads a line .
10463	Check if a FQCN can be created .
10464	Store a newly created role .
10465	Update the specified role .
10466	Remove the specified role .
10467	Performs a GET request to the specified resource .
10468	Returns the spacer class for the team
10469	Returns the icon for the Corporation .
10470	Returns the name of the team logo
10471	Returns the country flag image .
10472	Sends the given file transfer key to the server .
10473	Sends a file to the server .
10474	Returns the contents of a downloaded file as a TeamSpeak3_Interface object .
10475	Returns the session object .
10476	Returns type manager .
10477	Get the connection to the database
10478	Removes the DBon connection
10479	Process security deny filters
10480	Dispatch the HTTP request
10481	Gets the GET parameters
10482	Render a page view .
10483	Validate a request
10484	Renders the view .
10485	Redirect to default module view
10486	Redirect to default user view
10487	Init the user s profile
10488	Returns the user preference
10489	Get default Permissions
10490	Get current view name
10491	Set current view name
10492	Get current view set
10493	Set the current view set .
10494	Sets the directory root
10495	Get the module path
10496	Hash the query
10497	Check the string against the given hash .
10498	Reads the metadata array
10499	Use the account settings
10500	Send email .
10501	Log an email .
10502	Get information about the current tag .
10503	Get an autoload file path for a given class .
10504	Load a Metadata Class
10505	Get core file path
10506	Finds the file on the given classname .
10507	Fill person attributes .
10508	set a job
10509	Process the jobs .
10510	Determine if the event should be due at the current time .
10511	Renders the label .
10512	Flattens a path .
10513	Return the application config
10514	Create a new request
10515	Stores response data
10516	Returns the data for a specific Plot Field .
10517	Renders an XYPlot
10518	Converts a mark string into an array
10519	Get font name .
10520	Get instance of class .
10521	Returns the requested attribute .
10522	Set an attribute in a group
10523	Get a specific attribute in a group .
10524	Find a record or create it .
10525	Get dependency model
10526	Ensures uniqueness of given function .
10527	Call all of the registered filters .
10528	Adds a new hook .
10529	Check if hook exists
10530	Call a hook
10531	Replace a hook
10532	Count all hooks .
10533	Is hook .
10534	Check if action hook is executed
10535	Adds a route to the application .
10536	Pipe a route
10537	Run application .
10538	Sends a signal to the execution of a node .
10539	Add a value to the container .
10540	Get a raw definition .
10541	Encrypts value .
10542	Decrypts a value
10543	Get the default key
10544	Calculate the arguments .
10545	Returns the type of a given string
10546	Add an app
10547	Build a subroute for the given route
10548	Serializes the route .
10549	Unserializes the data .
10550	Returns the actual year to the actual year .
10551	Get current timestamp
10552	Returns the translated day .
10553	Returns the short day of a day .
10554	Returns the translated month .
10555	Returns the month name in a short format .
10556	Format a date .
10557	Get the formatted date .
10558	Registers base services .
10559	Handle the post section tree .
10560	Set the owner .
10561	Remove all comments .
10562	Minify CSS styles .
10563	Add a global variable .
10564	Quotes a value for use in a query
10565	Explode a generic string
10566	Get a specific role
10567	Adds a Role .
10568	Check if the user has a given role
10569	Default error handler .
10570	The exception handler .
10571	get error message for error
10572	Prints debug backtrace
10573	Set the name of the field
10574	Adds a new setting .
10575	Adds a cachable setting .
10576	Unset an offset
10577	Set sync state .
10578	Get sync data .
10579	Get the expression context .
10580	Terminates the current process .
10581	Register a child execution
10582	Called when execution is terminated
10583	Sets the scope .
10584	Creates and registers an execution .
10585	Creates a nested execution instance .
10586	Find child executions of a node
10587	Compute the scope of the execution .
10588	Get Variable by name
10589	Get a variable by name
10590	Set global variable .
10591	Sets a variable in the scope
10592	Removes a variable from the scope .
10593	Removes a variable from the scope .
10594	Executes the given node on this node .
10595	Blocks until signal is complete .
10596	Send a signal to the driver .
10597	Take the model transition .
10598	Inject a concurrent root into the current execution
10599	Load a single message
10600	Get a message by id
10601	Renders the open index template
10602	Checks if a directory is readable
10603	Checks if a directory is writable
10604	Validate if given value is writable
10605	Check if the given value is readable
10606	Validate an email address .
10607	Validate an IP Address
10608	Validates an IPv4 address .
10609	Validate the reserved IPv4 address .
10610	Validates an IPv6 address .
10611	Initializes the view
10612	Checks whether an attribute exists
10613	Is method .
10614	Returns the parameters of an instance
10615	Get a reflection method for an object .
10616	Convert the model to an array .
10617	Get SMS response
10618	Returns a blank line .
10619	Return the amount of cols for this term
10620	Renders an exception block .
10621	Builds a line of text .
10622	Slice an array .
10623	Set validator rules
10624	Complete a Flow
10625	Get an object from the given object name .
10626	Construct an object and return it .
10627	Registers a mapping
10628	Authenticate user with given code
10629	Returns the associated feed .
10630	Bulk liked .
10631	Set the relationship for a user
10632	Set properties .
10633	Fetch all records
10634	Returns the total number of rows for this source
10635	Find a row in the database
10636	Create a new row in the database .
10637	Selects the query
10638	Execute the query and return the results
10639	Check if route can proceed .
10640	Creates a link
10641	Picks the selected element to fill the parent with the selected element
10642	Parses a picker map
10643	Convert given array of reflection classes to self .
10644	Initialize the setup
10645	Returns a field by its unique identifier .
10646	Return key search rule .
10647	Set Record Array
10648	Save old values .
10649	Get Record Array
10650	Converts an associative array into an associative array .
10651	Set SQL Record
10652	Gets the join record for a given join .
10653	Return join rule .
10654	Returns the method used in the request .
10655	Gets the request uri
10656	Get options object
10657	Get builder instance .
10658	Issue an access token
10659	Format the report
10660	Decode a JSON file
10661	Validate a timestamp .
10662	Lists all Comment models .
10663	Internal update mechanism of the existing record
10664	Execute the current request
10665	Implode a list of values into a string
10666	Render a CSV file .
10667	Render an object
10668	Get the dataTable of an object
10669	Loads the object s state - specific variables .
10670	get property .
10671	Returns the current record .
10672	Set current ActiveRecordId
10673	Fetches the current recordset
10674	Fetches records from the database based on the current search rule .
10675	Fetches the results from the search .
10676	Get the number of records in the database .
10677	Run the search query .
10678	Get number records
10679	Fetches the record from the database
10680	Adds the JavaScript needed for the SCSS
10681	Get a configuration value .
10682	Load the configuration files .
10683	Authenticates user against the database
10684	Set the request .
10685	Set the maxage
10686	Fix mime type .
10687	Validates the mimetype .
10688	Check if the mime type is text
10689	This method checks the size of the file .
10690	Set file properties .
10691	Check whether we need to cache the result
10692	Reads data from the filesystem .
10693	Sends the response content .
10694	Clean the source .
10695	Minify the string
10696	Minify CSS content
10697	Wrap text wordwrap
10698	Get text content
10699	Serves text .
10700	Set allowed origin
10701	Sends the file to the browser .
10702	Register a texting provider .
10703	Denormalizes data .
10704	Whether the message supports a denormalization .
10705	Validate the given data .
10706	Validate a model against the provided rules .
10707	Get the action attribute .
10708	Get url attribute .
10709	Go to the next page .
10710	Skip the current step .
10711	Go to the current screen .
10712	Completed the action .
10713	Cancels the session .
10714	Renders the visitor state .
10715	Generates a random string .
10716	Checks if a callback is empty .
10717	A shortcut to the first occurrence of a transaction
10718	Determine if the container contains the given value .
10719	Merges the values of two variables .
10720	Create a new App .
10721	Dispatch event .
10722	Counts entities by group
10723	Aggregate the given group .
10724	Find document by ID
10725	Get ids from array of objects
10726	Normalize a date
10727	Check if an object is in formRef libs
10728	Returns the HTML for the accessDenied web page .
10729	Get current page URL .
10730	Init all form objects
10731	Compares two integer values .
10732	Get the integer value of a given value .
10733	Find source files
10734	Register a namespace
10735	Builds the cache .
10736	Finds the composer autoloader .
10737	Finds the composer vendor directory .
10738	Get loader classes
10739	Get a middleware or fallback to a global getter .
10740	Set a middleware or fallback to a non - null value .
10741	Returns a copy of this string with the given number of seconds added .
10742	Returns a copy of the current string with an array limit .
10743	Generate a string from the given value .
10744	Render array as string .
10745	Build array pair
10746	Format array value .
10747	Compile an object .
10748	Rejects rebound envelope .
10749	Boot the application .
10750	Render a webpage
10751	Render a given webpage
10752	Render the given view object as PHP .
10753	Sets the response headers
10754	Create comment for given issue .
10755	List all files in a directory
10756	Sorts modules based on their root path .
10757	Get all available routes
10758	Render menu items .
10759	Render a single menu item
10760	Writes CSV data to file .
10761	Configure the command
10762	Read configuration file
10763	Run checks .
10764	Run an export
10765	Write Cachable cache
10766	Get a read - only cache instance .
10767	Initialize config options
10768	Reads a command and returns it .
10769	Close the given process .
10770	Check if given value is chainable .
10771	Validate the form .
10772	Checks if the given group has the given value .
10773	Save Flow entity from server
10774	Get SQL Value
10775	Get previous value
10776	Sets the old value .
10777	Returns the column s default value .
10778	Gets the value on the create statement .
10779	Short description of method getValueOnUpdate
10780	Checks whether the field is required
10781	Check value type
10782	Validate data object
10783	Find a template by name
10784	Prepare theme name
10785	Register the given theme .
10786	Registers a theme
10787	Registers a new theme .
10788	returns the offset for given key
10789	Returns the key for the given array offset
10790	Return the standard deviation of the given array .
10791	Method to set property middleware
10792	Get action name .
10793	Gets the path parameters .
10794	Check if the scheme matches the one provided .
10795	Check if the given hostname matches the given list of hostnames .
10796	Matches a URI against the route parts
10797	Fetches the tree of the given root node
10798	Fetches the node path from the given search rule
10799	Find all child nodes
10800	Returns the settings for the receiver .
10801	Get the link for this form
10802	Returns the text content of this form .
10803	get new record
10804	Set the secret
10805	Get binary data .
10806	Get the formatted number .
10807	Add a table column .
10808	Adds an SQL expression to the SELECT section .
10809	Resets the SQL .
10810	Adds an ORDER BY clause to the query .
10811	Adds a join to the query .
10812	Create a new association
10813	Get SQL statement .
10814	Get a DataRecord by key .
10815	Run console command
10816	Returns default template locations .
10817	Renders the text field .
10818	Get the Google Font Google
10819	Check if the current user matches the given group .
10820	Validates the input fields .
10821	Validates the uniqueness of the object
10822	Check if a record can be updated
10823	Checks if a record can be deleted .
10824	Updates the record
10825	Generate a new record array
10826	Generate a new ID .
10827	Insert a new record
10828	Deletes record .
10829	Gets the list of fields on audit object
10830	Executes trigger service .
10831	Gets the join fields for a given join object
10832	Gets join data from another join object
10833	Check if id generate id
10834	Run the checks .
10835	Initializes the IReport object
10836	Resolves the route for the given request .
10837	Resolve action parameters .
10838	Check if setting exists
10839	Returns the setting with the given name .
10840	Returns all settings .
10841	Loads the settings from the file .
10842	Set cache location .
10843	Prefix CSS .
10844	Prefix align items .
10845	Prefix the align_content property .
10846	Prefix - align - self
10847	Prefix flex .
10848	Prefixes the value if necessary .
10849	Get the rules for a prefix property
10850	Creates a comment on a media object .
10851	Send DELETE request
10852	Get the filtered media .
10853	Get the preferred image .
10854	Get a placeholder
10855	Construct a rule from a string
10856	Get output as string
10857	Get an eloquent reflection method for a model .
10858	Render sitemap .
10859	Render a sitemap .
10860	Return this XML tree as an array
10861	Check if the current access token is valid
10862	Attempts to determine the access token in the current request .
10863	Call a method in the middleware .
10864	Check if context changed .
10865	Stores the given command .
10866	Performs the given callback and returns the result .
10867	Returns a specific php
10868	Creates the Phar
10869	Get the pattern with the given name .
10870	Merge group config
10871	removes a record
10872	Remove record from dataobject
10873	Removes a record from an existing record
10874	Named scope toArray .
10875	Reads metadata from an XML object .
10876	Reads a MetadataCollection instance from an array .
10877	Prefixes the package name
10878	Returns whether or not the current user can access .
10879	Builds a PhpRedis driver .
10880	Get a model instance .
10881	Add a resolver type
10882	Get a resolver for a given type .
10883	Sets a resolver for a given type
10884	Resolve a resolver reference
10885	Sets the authorative for each resolver .
10886	Registers a module
10887	Sorts the modules .
10888	Set the precedence for a given module .
10889	Auto config from composer
10890	Find all modules in a given path
10891	Get a row checkbox by it s name .
10892	Register the service .
10893	Convert a formatted string to a value
10894	Get the formatted value of the field .
10895	Formats the value as a localized number .
10896	Converts a number into its localized equivalent .
10897	Cast value to a date
10898	Formats a date value to a given format
10899	Format a value as datetime
10900	Converts a datetime format to a value .
10901	Convert value to currency symbol
10902	Formats the currency value .
10903	Convert mask value to phone number
10904	Convert a date from one format to another
10905	Parse a date string
10906	Render DSN for MySQL
10907	Render the DSN for pgsql
10908	Render DSN parts .
10909	Internal method to perform the actual insertion .
10910	Insert multiple fields into table .
10911	Retrieves the request path
10912	Get an item from the container .
10913	Formats a query string
10914	Format a query value for output
10915	Set the bind parameters
10916	Get user profile .
10917	Format a report
10918	Validate strong password
10919	Validate an email address
10920	Validates a date .
10921	Returns the error message
10922	Make an input .
10923	Agrega un arreglo
10924	Retrieves a new id for a given generation
10925	Generate a new system ID .
10926	Get a new GUID
10927	Get new record with sql query
10928	Get visible attribute
10929	Set the log formatter
10930	Prepare XML file
10931	Close the log file
10932	Get the log path
10933	Get formatter by extension
10934	Returns the organization document manager
10935	Render a view
10936	Outputs the rendered PDF .
10937	Set the base URL .
10938	Get the cURL resource .
10939	Returns a list of resources .
10940	Sends a POST request to the endpoint
10941	Performs multiple POST requests .
10942	Pushes a job onto the queue .
10943	Creates a new payload
10944	Returns the content element identifier .
10945	Gets the content element signature .
10946	Returns the content element signature .
10947	Get the title for this form
10948	Removes the selected record .
10949	renders a sort record
10950	Filter view children by column .
10951	Filters a list of view children by system language .
10952	Set field value by db key .
10953	Get data as array
10954	Create entity by array of data
10955	Unpacks a ZIP archive
10956	Add files from zip to archive
10957	Extract GZ .
10958	Reads a line from a file .
10959	Get the size of a file .
10960	Returns an array of PHP classes
10961	Creates a new route
10962	Find route by request .
10963	Resolve config key
10964	Check if key exists
10965	Get an item from the collection
10966	Load config file .
10967	Returns background details position
10968	Opens the stream connection .
10969	Check the status of the response .
10970	Handle the json message .
10971	Check response status
10972	Returns the next chunk size .
10973	Read data from the stream .
10974	Gets a property .
10975	Get the default value for the field
10976	Get the hidden field .
10977	Get the text content .
10978	Return the shortcut key for the shortcut
10979	Returns the menu for the current event handlers .
10980	Returns the formatted function string .
10981	Get the redirect page .
10982	Returns the function type for the given event handler name .
10983	Set form name
10984	Make sure the form name is properly formatted properly
10985	Returns the form function formed by this object .
10986	Parses a function string
10987	Call a method .
10988	Clears the middleware .
10989	Halts the current route .
10990	Resets the middleware .
10991	Creates an instance of type .
10992	Convert counter to string
10993	Make get request
10994	Send a POST request to the given URL .
10995	Get the actual response .
10996	Check if we should follow the open_basedir .
10997	Checks effective time
10998	Parse mixed string
10999	Parse a string .
11000	Render a form object
11001	Render a form
11002	Render the current form object
11003	View a specific entity .
11004	Store a new entity in the database .
11005	Calls entity method .
11006	Middleware .
11007	Returns the array of default commands
11008	Updates the given user .
11009	Get the settings for the plugin .
11010	Returns the current group .
11011	Returns the direct membership of this group .
11012	Get the effective membership
11013	Parse a membership
11014	Parse history list
11015	Parse an affiliate .
11016	Parse the special tags
11017	Get webpage object .
11018	Get the element .
11019	Returns an array of error elements
11020	Reverse all sub forms
11021	Set the bundle class .
11022	Returns the translation key for the given key .
11023	returns a list of translated words
11024	Parse configs
11025	Remove a value from the cache
11026	Returns the cache ids .
11027	Clean all cache
11028	Make directory recursively
11029	Reads a location from a file
11030	Returns a configuration reader based on the file extension
11031	Add route branch .
11032	Adds a route .
11033	Try to find a branch by its part
11034	Adds the next branch to the router .
11035	Finds objects by issue .
11036	Get WP contents
11037	Get WordPress categories .
11038	Get WordPress menus .
11039	Get wp - post list .
11040	Get the list of recent posts .
11041	Get WP post types .
11042	Get the WordPress tags .
11043	Get WordPress taxonomies
11044	Get WordPress content .
11045	Add a value to the search path .
11046	Sets a module priority .
11047	Get a precedence .
11048	Clear the search cache .
11049	Get the cached data .
11050	Resolves the given file
11051	parse request uri
11052	Saves the object state variables .
11053	Get current step number .
11054	Get all inputs from the given form .
11055	Removes the user session .
11056	Register a Sub Type Enum
11057	Get input .
11058	Delete a file .
11059	Convert expiration time to seconds .
11060	Splits a string into an array of KeyWords .
11061	Find all emails in a text .
11062	Does a string contain an array?
11063	Redirects the user to the given endpoint .
11064	Migrate up .
11065	Migrate up .
11066	Set token ID
11067	Run the daemon
11068	Returns true if the parameter exists .
11069	Returns the oauth request
11070	Create oauth signature
11071	Retrieve a node by ID
11072	Transition an item .
11073	Add a new setting
11074	Add multiple settings at once
11075	Retrieve the settings
11076	Get the cachable settings .
11077	Returns the settings as an array
11078	Returns the cachable settings as an array
11079	Get filtered settings .
11080	Filters all settings as an array .
11081	Render the HTML .
11082	Render node items
11083	Render single node item
11084	Run the autoloader .
11085	Register the package .
11086	Installs the autoloader .
11087	Initialize the plugin .
11088	Autoload class
11089	Loads manifest file .
11090	Forward to another route .
11091	Displays a glyph icon .
11092	Sets an array of query parameters .
11093	Sets the limit and offset for the query .
11094	Get a database connection .
11095	Return the current property .
11096	Get object referenced by this object .
11097	Associates the given association
11098	Parse a docblock
11099	Creates a sqlite instance from memory .
11100	Create a PDO instance from a file .
11101	Get field .
11102	Check if the model has a specific field .
11103	Gets the field names .
11104	Get initial data model
11105	Authorize index .
11106	Authorize create action .
11107	Get a nested item .
11108	Initialize the device
11109	Get export implementation
11110	Get the report object
11111	Get runner instance
11112	Get Cache instance
11113	Builds the update SQL query .
11114	Builds the delete SQL query .
11115	Returns the style
11116	Return all child nodes
11117	Get the value of an attribute .
11118	Returns all attributes of the node .
11119	Returns a child node .
11120	Get the literal value of an element .
11121	Get a cached version of the menu .
11122	Default handler for the given arguments .
11123	Is callable .
11124	Checks if the statement is a getter .
11125	Checks if the statement is a setter .
11126	Prepare the call to be executed .
11127	Get the response .
11128	Get parsed response body
11129	Save an object variable .
11130	Load an object s state variable .
11131	Saves the object in the session
11132	Clears the list of objects in the session
11133	Save a JSON array to the output
11134	Sets the view history for the current form .
11135	Tells the timer
11136	Print data to console
11137	Add elapsed time to timer
11138	Reset timer .
11139	Validate executable .
11140	Returns redirect page .
11141	Handle DataObject exception .
11142	Add GET parameters to the URL
11143	Get the base URI
11144	Validate an identity .
11145	Sets up the authentication result
11146	Set the visible attribute .
11147	Retrieves the first hump array
11148	Simple select from List
11149	Format a report
11150	Call a middleware .
11151	Call the configured getters .
11152	Call proxy methods .
11153	Call proxy setters .
11154	Catch the catch middleware .
11155	Clear middleware .
11156	Disable a middleware .
11157	Enable a middleware .
11158	Get middleware .
11159	Returns a middleware group .
11160	Set middleware group .
11161	Determine if a middleware exists .
11162	Check if a middleware is disabled .
11163	Check if a middleware is enabled .
11164	Get or set middleware .
11165	Get a middleware collection .
11166	Prepend a middleware to the queue .
11167	Push a middleware to the queue .
11168	Set middleware context
11169	Call the given middleware .
11170	Saves the settings to the cache .
11171	Get user submitted form
11172	Setup the json file .
11173	Find the transition in the execution node .
11174	Create remote javascript call
11175	Creates a javascript call to execute a form
11176	Returns HTML code for a clickable link .
11177	Returns a submit button .
11178	Cast a key
11179	Determine if the given middleware is an abstract .
11180	Determine if the given middleware is a collection .
11181	resolve middleware .
11182	Resolve a middleware .
11183	resolve middleware .
11184	resolve one middleware
11185	Resolve one middleware .
11186	Resolve one middleware .
11187	Render an object .
11188	Returns a unique string
11189	Check if a user is a role
11190	Determine if the model has the given role .
11191	Get a hash from the parameters
11192	Returns information about the last request
11193	Perform the request
11194	Whether or not the user has access to the specified role .
11195	Get the view that matches the given view name .
11196	Format a report
11197	Load an XML document .
11198	Validates a filesystem schema .
11199	Validates a source against a schema .
11200	Creates an array of Xinclude directives .
11201	Returns the value of an element
11202	Returns the XML element with the specified name .
11203	Sets the default namespace .
11204	Register the environment autoload namespace .
11205	Returns whether the given document is an environaut configuration document .
11206	Refreshes the XPath property .
11207	Parse an error .
11208	Get resolvers .
11209	Check authorization parameters
11210	Create a new authorization request instance .
11211	Complete Flow object
11212	Print the output
11213	Get form inputs
11214	Redraw form output .
11215	Sends client alert text
11216	show error message
11217	Close the popup
11218	run client script
11219	Redirects to a view
11220	Append extra script
11221	Gets the list of extra scripts for this view
11222	Append script styles .
11223	Answers the required stylesheet for the template .
11224	Include client scripts
11225	Include rte scripts
11226	Include CKEditor scripts .
11227	Include PropWindow scripts
11228	Include validator scripts
11229	Executes all actions of a trigger action .
11230	Composes an action message .
11231	convert string to array
11232	Process form object errors
11233	Set the sub forms .
11234	Load the picker form element .
11235	Set request params
11236	Fetches the current data set
11237	Returns element ID
11238	Method to hydrate a search term
11239	Renders the context menu
11240	Render the HTML .
11241	Get the event log msg
11242	Gets the on event elements
11243	Run the event log
11244	Get the invoking element .
11245	Adds required javascripts to the page
11246	Removes a middleware from the stack .
11247	Run the middleware stack .
11248	Creates a new Period instance from a string .
11249	Generate a secret key
11250	Decodes a base32 string .
11251	Returns an iterator for all files in the directory .
11252	Returns a list of all filenames .
11253	List all directories .
11254	List all files in folder
11255	Make file .
11256	Make Directory .
11257	Moves the file to the given path
11258	Renames the file
11259	Removes the directory recursively .
11260	Sets the name of the field .
11261	Sets the type .
11262	Set the input format rule .
11263	Set the value for this field
11264	Returns the value of this object .
11265	Save the children .
11266	Add children to entity
11267	Get models .
11268	Return a list of resources for a given collection of models .
11269	Convert a resource to an array .
11270	Generates reCaptcha form
11271	Verify recaptcha data
11272	Get a service instance
11273	Render the error .
11274	Render a HttpException .
11275	Render Cake exception .
11276	Render the given serializer error .
11277	Render a validation serializer exception .
11278	Renders a HTTP response as JSON .
11279	Convert HttpException to JSON Api .
11280	Renders a Cake exception as JSON .
11281	Render Cake Api .
11282	Set default serializer render
11283	Renders an error as JSON .
11284	Render a SerializerException as an API response .
11285	Default validation render
11286	Renders a validation error as JSON .
11287	Renders a validation exception as a JSON API response .
11288	Opens a session by ID .
11289	Create a new user session
11290	Prepares text content
11291	Display text .
11292	Display empty lines .
11293	Initialize the application .
11294	Kernel response event .
11295	Initialize the Debug Bar
11296	Start the session
11297	Returns true if the current user agent should be blocked
11298	Regenerates the old session .
11299	Validate a session
11300	Associates layers in the structure
11301	Retrieves the user input parameter
11302	Register a px .
11303	print CLI header
11304	Parse raw body
11305	Removes extra indentation from string
11306	Apply the headers to the request
11307	Parse a query string into an array .
11308	Bind the template to the page
11309	gets the match for the given uri
11310	Returns the value for validation constant .
11311	List all local files in the home directory .
11312	Extract an array of links from HTML
11313	Exclude link .
11314	Save ruta to file .
11315	Check if a PDF exists .
11316	Get the next ordered numbers .
11317	End the nesting row .
11318	Display text .
11319	Display N lines .
11320	Fit the Linear coefficient
11321	Perform a prediction of the given data set .
11322	Initialize the database
11323	Write a record to the log
11324	Draw a list item .
11325	Start output buffering
11326	Initialize cache driver .
11327	Gets the header .
11328	Builds a form for the given section handle .
11329	Build the form factory
11330	Load fixtures from iterator .
11331	Resolves a relative URL to an absolute URL .
11332	Installs a package
11333	Install plugin files from composer . json
11334	Install composer framework .
11335	Install composer .
11336	Update composer .
11337	Uninstalls a plugin .
11338	Uninstall plugin .
11339	Remove the matching directory .
11340	Recursively removes a directory .
11341	Sets the text color of the cell .
11342	Get text area .
11343	Calculates the width of the cell .
11344	Find by date field
11345	Get the date value of a field .
11346	Cast attribute value .
11347	Cast attributes to array
11348	Adds a new item to the list .
11349	Get the menu .
11350	Builds the tracker response .
11351	Returns the service definitions .
11352	Parses the imports .
11353	Parse the service definitions .
11354	Loads a YAML file .
11355	Resolve services .
11356	Initialize autoloader .
11357	Get the API instance .
11358	Humanize the given bytes .
11359	Set the bullet .
11360	Sets the column definition .
11361	Calculate the total width of the column .
11362	checks whether column has header text
11363	Get column header text .
11364	Check input data
11365	Calculates column widths .
11366	Draw a table
11367	Creates a file session .
11368	Creates a new session file .
11369	Save the given data to the session .
11370	Acquire a lock .
11371	Create a form for a section .
11372	Factory method .
11373	Run a list of the fact .
11374	Parses facts from string
11375	Find item by id
11376	Find a row by its value
11377	Find all records
11378	Find all records by where clause
11379	Creates a new row in the database table .
11380	Update a row in the table
11381	Parse notation .
11382	Apply search conditions
11383	Calculate the mean formula .
11384	Create plugin client .
11385	Sets the file .
11386	Add a new template .
11387	Removes time of cache file .
11388	Create placeholders from source .
11389	Get the metadata for a template .
11390	Build the definition provider .
11391	Returns the formula with the given formulaName .
11392	Save a formula .
11393	Creates header element
11394	Set dropdown item
11395	Checks if the user has the required attributes .
11396	Download a binary file .
11397	Get the url for a specific type .
11398	Set list cover
11399	Get data by type .
11400	get the json data
11401	Installs a resource
11402	Check date validity
11403	Wrap the PNG frame
11404	Runs the commandline .
11405	Factory method .
11406	Create a Redis session
11407	Create and send an entity
11408	Register the providers .
11409	Registers provider from file
11410	Returns the facts .
11411	Populates the facts .
11412	Record a domain event .
11413	Executes the given domain - event .
11414	Helper function for internal functions
11415	Draw a bar
11416	Calculates the given formula .
11417	Returns true if there is a layout .
11418	Initialize the state .
11419	Override members to style
11420	Clears the styling
11421	Sets the text color .
11422	Set the fill color .
11423	Sets the fill color
11424	Reverses the text colors
11425	Creates a new function .
11426	Load all installed plugins .
11427	Determine if plugin is auto activated .
11428	Load cache if needed .
11429	Update plugin cache
11430	Activate activated hooks .
11431	Get channel by name
11432	Initializes the loggers .
11433	Create the logger instance .
11434	Get all Location objects .
11435	Get a class instance
11436	Get the interfaces .
11437	Get parent class
11438	Get a list of methods .
11439	Get array of properties
11440	Protected type
11441	Adds a new style for the given resource .
11442	Get the aggregate style .
11443	Rewrite paths .
11444	Wraps media rules .
11445	Move the imports to the start of the start
11446	Get a record from the archive .
11447	Remove a file from the archive
11448	Get the archive path .
11449	Get the archive file path
11450	Clean up merged values
11451	Filters an array of values .
11452	Return whether the terminal size should be returned .
11453	Returns a CSS style with the given string .
11454	Wrapper for PHP Scripting .
11455	Sends a mailto message .
11456	Displays a static control .
11457	Displays a static control for a model attribute .
11458	Add CSS style .
11459	Make the directory .
11460	Set the files to publish
11461	Initializes this controller
11462	Logs in the given identity
11463	Regenerate CSRF token .
11464	Logs in the user by cookie .
11465	Get return url .
11466	Check if current user is required
11467	Renews the identity cookie
11468	Renews the status of an active session .
11469	Determine if the user has the given permission .
11470	Returns an array of days of week
11471	Save uploaded file to disk
11472	Executes the query
11473	Adds a delete statement to the query .
11474	Set insert mode
11475	Add an inner join to the query .
11476	Adds a WHERE expression to the query .
11477	Adds a having clause to the query .
11478	Get the SQL for DELETE
11479	Creates a positional parameter .
11480	Bind the logger interface to the application .
11481	Bind the Monolog logger to the container .
11482	Set the HTTP status code .
11483	Get the formatted body
11484	Redirects to the specified URL .
11485	Create an empty response .
11486	Get response headers array
11487	Get the cookies .
11488	Returns the default response formatters .
11489	Extracts the auth user pass from the given string
11490	Retrieve all available scenario names .
11491	Fills scenario attributes .
11492	Returns the form name .
11493	Get the public names .
11494	Validates the model .
11495	Validates multiple models at once .
11496	Respond with Response Message
11497	Add attachment .
11498	Add plugin to request
11499	Sends request to API and returns response .
11500	Loads a class
11501	Returns all registered listeners
11502	Set the properties of a listener .
11503	Creates a listener from an annotation .
11504	Returns the value of the specified option .
11505	Set multiple options at once
11506	Return the value of a key
11507	Fill an array from a given array
11508	Register the entity paths from a directory .
11509	Add Entity Manager
11510	Check predictions .
11511	Process extends section
11512	Verify that the class method exists .
11513	Verify that the class exists in the current class .
11514	Verify that the function is callable .
11515	Verify that the Closure is valid .
11516	Verify that the dispatch is valid .
11517	Get the dependencies for the dispatch
11518	Get the arguments to render .
11519	Dispatch class method .
11520	Get the class property .
11521	Get rendered class .
11522	Dispatch function .
11523	Dispatch closure .
11524	Respond to a dispatch
11525	Get string arguments
11526	Get the request arguments
11527	Parses request arguments
11528	Generate a link to an asset .
11529	Set protocol version .
11530	Validate header values .
11531	Inject a header value
11532	Returns the current date in the system .
11533	Check fields and update them
11534	Store a cookie .
11535	Adds the cookies from the response
11536	Returns all cookies matching the given URL
11537	Returns all registered cookies .
11538	Serialize the session
11539	Unserialize the session
11540	Check if a domain name matches a domain
11541	Instantiates a new command object
11542	Get the list of arguments for a command
11543	Get help for a command
11544	Returns a singleton or a default one
11545	Convert an expression to a NumberSystem
11546	Parse expression part
11547	Process a nested config key
11548	Remove unused unicode characters .
11549	Sets the default encoding for the feature .
11550	Creates a new iterator exception .
11551	Initializes the Response object
11552	Initializes URL language prefixes
11553	Retrieve the message formatter
11554	Start a transaction
11555	Get the API request URL .
11556	Get API request parameters
11557	Get the response lines
11558	Get the success message .
11559	Get all budgets by accountId
11560	Get current language
11561	Parses the Accept Language header .
11562	Bind a value to a binding .
11563	Makes a class instance .
11564	Validates the given URL
11565	Check if a field name is a live variable
11566	Render a PHP variable
11567	Wrap object in viewable
11568	returns as a date
11569	Makes the session identifier .
11570	Encrypt session data
11571	Decrypts a session data
11572	Get encryption key
11573	Set encryption algorithm
11574	Sets the hash algorithm
11575	Prepares update sets for a table .
11576	Initialize the service
11577	Gets a parameter .
11578	Check if the relation exists .
11579	Check if the target attribute exists .
11580	Returns true if value exists .
11581	Get the clause
11582	Renders a modal .
11583	Localize a file
11584	Detach the stream
11585	Read the stream .
11586	Creates a new Request instance .
11587	Create a request from PHP globals .
11588	Sets the server array .
11589	Set request headers
11590	Get request path
11591	Return the request path only .
11592	Returns the HTTP host .
11593	Sets the request method .
11594	Gets the HTTP method .
11595	Get the MIME type for a given format .
11596	Get the format of a mime type .
11597	Returns the request format .
11598	Render a controller
11599	Inits the HTTP protocol .
11600	Add middleware .
11601	Create a response application .
11602	Set alias .
11603	Sets an array of aliases .
11604	Get the log level for an error code .
11605	Generate a proxy .
11606	Get method call parameters
11607	Generate proxy class .
11608	Get proxied properties .
11609	Get proxy methods
11610	Generate proxy class name
11611	Gets the declaration of a method
11612	Checks if the given method can be proxy .
11613	Check if methods are proxy
11614	Recursively traverse the tree .
11615	Get method parameters
11616	Create a repository .
11617	Loads messages from the database .
11618	Setup the application .
11619	Bootstrap the config .
11620	Bootstrap the core services .
11621	Bootstraps the application container .
11622	get env value
11623	set env .
11624	Get a configuration value .
11625	Throw an HttpException
11626	Redirect to the given url .
11627	Create a response
11628	Create a redirect response .
11629	Get a view instance .
11630	Get an item from the collection .
11631	Validates the descriptor key .
11632	Validates a descriptor .
11633	Gets settings for cache invalidation settings
11634	Set cache invalidation settings
11635	Initialize the logger
11636	Get log file path
11637	Verify user password .
11638	Short description of method setExists
11639	Renders the progress .
11640	Renders the progress bar
11641	Process the SOAP request
11642	Get instance of SoapServer
11643	On flush event handler .
11644	Post flush event handler .
11645	Invalidate the given entity
11646	Add a tag to the list of tags to invalidate
11647	Returns the configuration of the selected choice .
11648	Set the callback
11649	Apply the filter to the value
11650	return percent of used memory
11651	Returns all seo models .
11652	Set seo attributes
11653	Returns seo attribute
11654	Sets convert value to true
11655	Order by exscissa value
11656	Get Abscissa by order
11657	Add an attachment to the message .
11658	Encodes the message body as a string .
11659	Encode an existing MQTT file .
11660	Recursively encode one part of the mail
11661	Add a MailPart to the mail message .
11662	Wrapper for printable encode
11663	Build a header parameter
11664	Builds an unsigned 16 - signed URL parameter
11665	Explode quoted string .
11666	Encode a header value
11667	Base64 encode a string
11668	Return the admin messages view .
11669	Returns the next line of data .
11670	Renders the menu items .
11671	Execute before action
11672	Sets an option .
11673	Creates a slug from a string .
11674	Creates a sentence .
11675	Extract an array from a photo array
11676	Returns true if the session is still valid .
11677	Get field error message .
11678	Set the sameSite .
11679	Cleans and adds header if needed
11680	Finds all classes in a namespace
11681	Get namespace path
11682	Get namespace paths
11683	Get namespace prefixes
11684	Get loader prefixes .
11685	Updates the current session .
11686	Merge new session
11687	Get session data
11688	Determine the current page from the request .
11689	Performs the query .
11690	Returns the filters as an associative array
11691	Create the form .
11692	Stores query result in session .
11693	Paginate the given query .
11694	Get the previous record id
11695	Convert to array .
11696	Creates a new field .
11697	Process options .
11698	Get connection params
11699	Check if database is installed
11700	Returns the sql string for this object .
11701	Executes the select query
11702	Gets repository for provided entity .
11703	Creates a new entity .
11704	Save an entity .
11705	Removes an entity from the database .
11706	Commit the changes to the database .
11707	Get a store by name .
11708	Get the configuration for a given store .
11709	Get a store instance .
11710	Validate the password .
11711	construct a medias instance
11712	Parse the string into items
11713	Compare array with needle
11714	Calculates the earth radius of a given latitude and y
11715	Converts a decimal decimal representation to the DMS
11716	Converts a decimal number of degrees to seconds
11717	Renders the production code
11718	Render error rendering
11719	Logs this error
11720	Generate configuration file .
11721	The configuration file .
11722	Save messages into php file .
11723	Saves all messages into a PO file .
11724	Creates a Time object from an array .
11725	Creates a new time from a string
11726	Creates a time from a date .
11727	Create a Time instance from an integer .
11728	Invalidates the given tags .
11729	Removes all tags .
11730	Encode tags .
11731	Register the package config .
11732	Returns all the cookies .
11733	Adds a cookie to the collection .
11734	Removes a cookie by name .
11735	Confirm a user dialog
11736	Gets the labels .
11737	Wrap the session
11738	Returns table primary key .
11739	Gets table foreign keys .
11740	Get table indexes .
11741	Gets a table uniques .
11742	Returns table checks metadata .
11743	Returns default values for a table .
11744	Get parameter by key
11745	Checks access rights
11746	Change the distinct value of the field
11747	Change column name .
11748	Join a table
11749	Adds INNER JOIN table
11750	Left Join Tables
11751	Left outer join
11752	RIGHT JOIN table
11753	Adds an outer join to the query
11754	Add a full outer join to the query
11755	Sets the groupBy method .
11756	Add AND HAVING condition
11757	Set OR HAVING condition .
11758	Sets the orderBy .
11759	Sets the limit and offset
11760	Offset method .
11761	Build FROM clause
11762	Renders a link tag .
11763	Render a button .
11764	Renders the locale switcher .
11765	Returns a string representation of the x axis
11766	Return order by ascendant
11767	Get Abscissa by order
11768	Find a record by id or throw an exception
11769	Finds a record by a predicate or throw an exception .
11770	Checks if a record with the given ID exists .
11771	Find by predicate
11772	Delete rows by predicate
11773	Delete a record or throw an exception
11774	Update rows in a table
11775	Executes an INSERT query .
11776	Get relation object
11777	Get the table s primary keys .
11778	Get the unique primary key .
11779	Returns the columns information
11780	Executes statement .
11781	Get a primary key for this table .
11782	Check columns in table .
11783	Parses content as array .
11784	Parse content as object
11785	Set the return type .
11786	Run the WordPress .
11787	Enqueue styles .
11788	Type .
11789	Set the class name .
11790	Start the graph
11791	Deal the damage .
11792	Set hit level
11793	Set the meter gain value
11794	Set the input fields .
11795	Add a cancel ability to the ability .
11796	Set start frame
11797	Set active frames .
11798	Set recovery frame up
11799	Set the hit advantage
11800	Set guard advantage on guard
11801	Builds a move .
11802	Sends a message to slack
11803	Parse route path .
11804	Parse route data
11805	Validate datum
11806	Searches for a segment of path segments
11807	Call repository name .
11808	Validates a class name .
11809	Is the image?
11810	Returns count of files .
11811	Get Route Info
11812	Gets the route and raw params .
11813	Returns a new instance with the specified scheme .
11814	Returns a new instance with the specified user information .
11815	Returns a new instance with the specified host .
11816	Returns a new instance with the specified port .
11817	query array by key
11818	Query an array by bracket offset
11819	Sets the query variables .
11820	Set a query variable
11821	Returns the complete URL for this route
11822	Returns normalized components .
11823	Resolves given Reference .
11824	Test if the current request is a fragment .
11825	Returns the canonical URL of the webserver .
11826	Return the request URL .
11827	Get an option
11828	Build a query string
11829	Parses an URL
11830	Display a tab .
11831	Translates the current language .
11832	Suggests a request language based on the response logic .
11833	Get the list of new states .
11834	Filter new states list .
11835	Switch state list to new state list .
11836	Find items by budget
11837	Displays login form .
11838	Logs user out
11839	Connect to the given client .
11840	Gets a parameter by name .
11841	set the HTML body
11842	Add HTML image
11843	Add an attachment to the message .
11844	Returns a string from a file
11845	Add a plaintext part
11846	Add an email message part
11847	Add an HTML image part to the array .
11848	Add an attachment part to the message .
11849	Encode headers .
11850	Checks the parameters .
11851	Checks if the given value is a valid error
11852	Initialize this object
11853	Loads the permission data .
11854	Save all changes .
11855	Save data to a file .
11856	Create Json Response
11857	Sets the callback
11858	Set the JSON encoding options .
11859	Get the layout .
11860	Returns the categories as a string
11861	Update a session .
11862	Delete the session entity .
11863	Add command options .
11864	Load pm configuration .
11865	Get PHP memory limit .
11866	On model created .
11867	Render the tool
11868	Add a plugin
11869	Get the configuration for the given key .
11870	Creates a URL
11871	Add GET route
11872	Get html response .
11873	redirect response .
11874	Set path segments .
11875	Get the instance of the current proxy .
11876	Returns an instance of the specified class
11877	Retrieve all records
11878	Returns all the entities in the collection .
11879	Paginates the results .
11880	Finds a resource by its ID .
11881	Persists an entity to the database .
11882	Remove an entity from the database .
11883	Returns the count of all entities .
11884	Create select query .
11885	Applies scopes to a QueryBuilder instance .
11886	Applies orderBy to query builder
11887	Make no result exception .
11888	Replace placeholders with values .
11889	Add a method to the class
11890	Gets an RPC method .
11891	Shutdown loop .
11892	Adds multiple headers
11893	Add a link to the page
11894	Creates a new GuzzleRequest
11895	Creates and returns a new photo object .
11896	Return a range with X and Y .
11897	Starts session .
11898	reenerates the session id
11899	Write the session
11900	Unset the session
11901	Destroy a session .
11902	Decodes session data .
11903	Get or set the session cache expiration .
11904	Create an instance of the object
11905	Get module options
11906	Returns the file size .
11907	Set the walk flag
11908	Set the array flag
11909	Sets the data array
11910	Get the integer value of the given index
11911	Set the value at the given index
11912	Rewind the loop
11913	Get the previous Y coordinate
11914	Set the previous x .
11915	Set the previous Y value .
11916	Replace the previous Y if necessary .
11917	Get the next x Y
11918	Move forward to the next X .
11919	Move the pointer to the next Y .
11920	Move the pointer to the next y position .
11921	Seek the index .
11922	Get current tick
11923	Get the key for the current walk flag .
11924	Checks if the sign is valid
11925	Validates a key
11926	Validate X and Y coordinates
11927	Return the total number of walks in this map
11928	Seek to offset .
11929	Seek to an offset .
11930	Determines whether or not the offset exists .
11931	Implements the offsetGet method .
11932	Sets an offset .
11933	Verifies that the value is a boolean value .
11934	Set the view methods for the specified object .
11935	Set the allowed controller methods for the object
11936	Change table name .
11937	Set from table
11938	Set AND condition
11939	Set where conditions
11940	Set a static rule .
11941	Set Static Rule Reference
11942	Get a rule object
11943	End the body .
11944	Registers a JS file .
11945	Registers a javascript variable .
11946	Get default config files
11947	Return a singleton config instance
11948	Setup channel configurations .
11949	Merge a config file
11950	Write Config File
11951	Read configuration data from a file
11952	Returns the default channel for the given layer .
11953	Get the channel value .
11954	Set channels .
11955	Get type of configuration
11956	Get a cache doc .
11957	Get a prompt message
11958	Get group by configuration key .
11959	Returns an array of all the groups in the configuration .
11960	Returns the keys of a specific group .
11961	Return the set values for a given key .
11962	Returns all registered channels keys .
11963	Removes the user from the channel .
11964	Remove a layer .
11965	Get layer by key .
11966	Returns whether the given key has been defined in this layer .
11967	Set layer registry
11968	Process extends section
11969	Replace all constants with their values
11970	Method to get property callback
11971	Check if a given value is valid .
11972	Returns the valid values .
11973	Get list of ReflectionValues .
11974	Set enumeration value
11975	Initializes the plugin object
11976	Initiates a session .
11977	Record success status .
11978	Add idle .
11979	Get the total amount of the current account .
11980	Get all request methods
11981	Disables the auto update .
11982	Block wp request .
11983	Hide the admin admin page .
11984	checks whether a point is valid
11985	Indicates whether this Plot is ParalleLogram
11986	Get a value from the container
11987	Determines whether a container contains a specific key .
11988	Finds application by id .
11989	Finds all applications .
11990	Checks if another number is equal .
11991	Returns the digits of the given number .
11992	Builds a number from the given strings .
11993	Validates that the given value is a number .
11994	Execute a named command .
11995	Generates a key from an array of arguments
11996	Connect to the Redis server
11997	Returns the command as a string .
11998	Generate mongo document from domain event
11999	Gets the domain event message .
12000	Reset the entity state
12001	Normalize queue messages .
12002	Runs validation on all entities .
12003	Attach form data event
12004	Get all form related to the current tag
12005	Remove a string from the list
12006	Returns associated entities
12007	Swap an entity with another tag .
12008	configure form to exclude data
12009	Set a sub form data handler .
12010	After attach callback .
12011	Add a response to the stack
12012	Parses a response from a string
12013	Create a new response from a file
12014	Sets the head version of an entity .
12015	Checks if the entity needs a new version
12016	Persists an entity .
12017	Clears all versions of an Entity .
12018	Cleans up the directory .
12019	Determine if the given source key exists .
12020	Moves a source key .
12021	Reconnects if there is another FTP connection .
12022	Determine if a prefix is relative .
12023	Creates a directory path .
12024	Get entity by ID
12025	Creates a new entity .
12026	Save an entity .
12027	Delete an entity .
12028	Validate entity instance
12029	Executes a SELECT query .
12030	Builds a query builder
12031	Set criteria in a query .
12032	Set an array criterion in a query .
12033	Set order in a query .
12034	Creates a delete operation .
12035	Set properties for a save create query .
12036	Sets properties for a save statement .
12037	Get entity relations
12038	Ensure that all required properties are set .
12039	Execute the broadcast request
12040	Execute the given operation .
12041	Builds script source .
12042	Generate a div
12043	Generate an image attribute .
12044	Creates audio input element .
12045	Verify the response .
12046	Verify a PSR - 7 request .
12047	Generate and load script tag
12048	Get script tag with callback
12049	Check key .
12050	Check if given value is string .
12051	Send verify request to API
12052	Initialize this object .
12053	Find view file .
12054	Render a php file
12055	Registers all post types
12056	Generate a token .
12057	Generate a PHP token for a token .
12058	execute the project
12059	Simple filter callback
12060	Log a NOTICE event
12061	Log an info message .
12062	Implementation of debug logging
12063	Logs a RAW message .
12064	End a profile
12065	Write a message to the log .
12066	Converts error message to string .
12067	Converts an error to a string .
12068	Colorize text .
12069	get Callee data
12070	Processes placeholders .
12071	Formats a value as a string .
12072	Finds a seo object based on an ActiveRecord .
12073	Convert ActiveRecord to table name .
12074	Deletes all records matching the given ActiveRecord .
12075	Saves data to the seo model
12076	Create mysql connection
12077	Common command handler
12078	Returns a list of commands
12079	Returns all available commands
12080	Get the help args for a given command
12081	Return the arguments passed to the command
12082	Listen to post - package events .
12083	Compile the DSN
12084	Escape value .
12085	Adds the template root .
12086	Get the count for a collection
12087	Get the count for a collection
12088	Create count query
12089	Returns the entity manager .
12090	Returns the current route .
12091	Load a cart object
12092	Clear an entry in the container
12093	Get bundle by name
12094	Set a bundle entry
12095	Clear bundle in storage
12096	Invalidates an entity .
12097	Ensures that the dependencies database is available
12098	Returns a list of dependent package dependencies
12099	Get the dependencies for a package .
12100	Install the package
12101	uninstall a package
12102	Rebuild the package database dump
12103	Acquire dependency lock
12104	Unlock the resource
12105	Read the dependencies file
12106	Write the dependencies file
12107	Auto load modules
12108	Register a module
12109	Renders the content .
12110	Shows the error page .
12111	Set foreground color .
12112	Set background color .
12113	Set the color of the background .
12114	Set the color of the background .
12115	Set green color .
12116	Changes the color of the background .
12117	Changes the color of the background .
12118	set the color of a magenta
12119	Format the color using cyan .
12120	Changes the color of the background .
12121	Resets the background color .
12122	Sets the background color .
12123	Removes the given option .
12124	Format a message .
12125	Logs a command
12126	Get uploaded files .
12127	Set the raw state
12128	Post - install scripts
12129	Post - install scripts
12130	Set the Pinfo data from an array
12131	Returns the filelist
12132	Returns the list of available configuration options .
12133	Returns information if the specified package is compatible with the specified package .
12134	Is this package a subpackage?
12135	Get the group for a specific name
12136	Places keys in an array
12137	Registers compiler passes the compiler .
12138	Returns the modulo of the arguments .
12139	Calculate the modulo coefficient
12140	Update an event .
12141	Write a message to the log
12142	Select from repository
12143	Get the entity alias
12144	Delete an entity from the database
12145	Overwrites update method
12146	Sets the FROM clause for this query
12147	Sets a variable .
12148	Set the group by fields .
12149	Add a group by clause
12150	Set order by
12151	Add a ORDER BY clause
12152	Set maximum results for the query .
12153	Paginate the result set
12154	Fetches one result .
12155	Executes query and returns single result .
12156	Fetch all results
12157	Returns a description of a parameter
12158	Find the not used parameter name .
12159	Parse method call methods
12160	Call functionality fields .
12161	Is an associative array?
12162	Returns a description of the given subject .
12163	logs the timestamp
12164	Format timestamp as table
12165	Returns the page load time .
12166	returns the most - consumed domain from the timestamp .
12167	Renders the header .
12168	Renders the header image .
12169	Renders the body of the message .
12170	Renders the card footer .
12171	Group prefixes .
12172	Returns all option values .
12173	Provides help information for an action
12174	Returns options for the action .
12175	Returns header collection
12176	Is Flash .
12177	Return the raw response body
12178	Get the body params
12179	Gets the host info
12180	Returns the URL of the requested script .
12181	Get the server params
12182	Returns the content types acceptable by the client .
12183	Get a list of languages accepted by the client
12184	Get ETags
12185	Returns a CSRF token .
12186	Generate CSRF token .
12187	Get the default server params
12188	On login event .
12189	Crop an image
12190	Makes the crop name
12191	Crop an image
12192	Get size of image
12193	Get the transformations for a file .
12194	Returns the annotations for a given doc string .
12195	Determine whether the doc matches the given docstring .
12196	Set annotation .
12197	Set the arguments of an annotation .
12198	Get annotation properties
12199	Processes the properties of an annotation .
12200	Get argument list
12201	Determine the property s value
12202	Get an annotation from the annotation map
12203	Clean match .
12204	Return a list of commands that are subscribed to this provider
12205	Handles custom command .
12206	Handle the help command
12207	Get a provider by its command
12208	Adds a left join .
12209	Adds a right join clause .
12210	Right Join clause
12211	Converts the current query to a SQL string .
12212	Returns an array containing all columns
12213	Set the name of the object .
12214	Set the object structure .
12215	Set the name of the object database .
12216	Set object model name
12217	Build the model
12218	Builds the fields
12219	Register the validator factory .
12220	Initialize all services
12221	Returns the id of the target site .
12222	Get parent record .
12223	Renders a single item
12224	Retrieve all rows from the database .
12225	Executes the query and returns one result .
12226	Fetch a single column .
12227	Count records .
12228	Checks if a database exists .
12229	Make call to prophecy .
12230	Returns the number of recorded calls .
12231	Sets the PEAR registry
12232	Create directory .
12233	Create directory for channel .
12234	Ensure the directory exists and is writable .
12235	Get channel filename
12236	Returns a channel name from its alias .
12237	Get alias for a channel
12238	Acquire the lock .
12239	Checks if a channel exists .
12240	Checks if a mirror exists .
12241	Check if an alias exists
12242	Returns information about the given channel
12243	Update a channel
12244	Determine if the given data matches the given data .
12245	Get tinyMCE url
12246	Initialize instance with given value
12247	Get entity manager
12248	Resolves a class name .
12249	Validates that an attribute matches the specified hashes .
12250	Validate route exists .
12251	Copy the source directory .
12252	Initializes the widget .
12253	Generate the next day for the given date .
12254	Get the previous day .
12255	Create a date range .
12256	Get file reference
12257	Get dir directory
12258	Opens a file .
12259	Creates file permissions .
12260	Put contents to a file .
12261	Get the contents of a file .
12262	Changes file mode .
12263	Lock file by path
12264	Called when a file is unlocked .
12265	Ensure the input is a file object or an object
12266	Ensure the path is a directory
12267	Unlock timer .
12268	Construct global variables .
12269	Render section .
12270	Add an on clause to the join clause
12271	Add an on where clause to the query .
12272	Add a where null column to the query .
12273	Apply sorting to array .
12274	It can be a normal query .
12275	Get record by id
12276	Update table row
12277	Upgrades the list of migrations .
12278	Rebuild fresh migrations .
12279	Show the migration history .
12280	New new migrations .
12281	Generate a new migration file .
12282	Run the migration down .
12283	Migrate to a specific time .
12284	Migrate to version .
12285	Loads a database adapter
12286	Connect to the database
12287	Add a Cached Query .
12288	Get the results of a cached query .
12289	Query the current adapter
12290	Add a table to the database .
12291	Add fields to a table
12292	Returns table information
12293	Checks if the given table exists .
12294	Build fields array
12295	escape a string
12296	Clears the query result .
12297	where method
12298	Set where clause
12299	where in
12300	Simple where clause .
12301	Simple where clause .
12302	Set the order_by
12303	Returns the SQL query .
12304	Get all results .
12305	Execute query and get single value .
12306	Get list of all ui extensions
12307	Get the singleton instance of the modelOperator
12308	Set the storage path
12309	Load structure files
12310	Get the structure of a given model
12311	Saves structure of a model
12312	Dumps data into a table
12313	Load data from database
12314	Returns all transactions for the given account .
12315	Set the current state .
12316	Get the length of the backlog log .
12317	processes the query queue
12318	Executes the specified query .
12319	Set the connection status
12320	Handles the given message .
12321	Converts data into the message .
12322	Cancel the cancellation request .
12323	Check if provider is disabled .
12324	Route callback .
12325	Unlink the specified provider from storage provider .
12326	Update settings .
12327	Check if provider is valid .
12328	Set the provider configuration
12329	Register social provider .
12330	Clean up timer callback
12331	Pack a record into an array .
12332	Unpack a record .
12333	Create cleanup timer .
12334	Check if menu has submenu item .
12335	Set the accountId
12336	Set user_id
12337	Gets the User s Account .
12338	Gets the user object that belongs to this user .
12339	Generates the next exception from the request .
12340	Remove tags from string
12341	Initialize config variables
12342	Get the valid roles of a Release .
12343	Returns the roles of the BASE install role
12344	Shorten the string
12345	Sets the blocksize
12346	Get a value from the bag .
12347	Generate config file names
12348	Merge values into an array .
12349	Returns the config data .
12350	Read configuration data from a file
12351	Normalizes a configuration file path .
12352	Apply the domain event message .
12353	Record a domain event message .
12354	Set related data
12355	Called when presenter is attached
12356	Redraw all non - null elements .
12357	Redirect to presenter .
12358	Initializes the plugins .
12359	Set global variable list
12360	Fetch data from template string .
12361	Load plugins from directory .
12362	Creates a BusinessHoursTime object from an associative array .
12363	Shift a business hours according to the current timezone .
12364	Flatten days into days .
12365	Validate a warning
12366	Get the contents of a file
12367	Parse import configuration .
12368	Parse yaml file .
12369	Set variables from YAML config file
12370	Calculate the request length .
12371	Execute a command .
12372	Serialize the value to xml
12373	Unpublish other versions .
12374	Setter for className
12375	Set the ID of the column .
12376	Set name column
12377	Set data column .
12378	Set the lifetime column .
12379	Set the modified column .
12380	Set the created column .
12381	Get providers .
12382	Get available providers
12383	Bootstrap Application
12384	Register the content negotiation
12385	Set Request Format
12386	Validate request content type
12387	Execute function with given arguments .
12388	Discovers a channel .
12389	Get dependency2 object
12390	Get download directory
12391	Detects the cycle for the current cycle .
12392	initialize graph
12393	Get url argument
12394	Retrieve a line
12395	Get command arguments
12396	Register the NoCaptcha class .
12397	Add validator rules .
12398	Register Form macros .
12399	Extract data from XML file .
12400	Extracts information from any file .
12401	Return the XML representation of the channel .
12402	Validate an error
12403	Get the base URL for a resource type .
12404	Reset functions .
12405	Set the default PAR protocol
12406	Get a mirror for a server .
12407	Sets the validate package name
12408	add function .
12409	Add a mirror function
12410	Returns the valid package name for this channel .
12411	Gets a validation object for this set .
12412	Returns whether a property can be accessed
12413	Can get property
12414	Returns the cache file content .
12415	Loads the parameters from the cache .
12416	Add an entry to the container
12417	Gets a value from the cache
12418	Get an entry
12419	Returns true if the entry with the given id exists .
12420	Unset the given offset .
12421	Applies the where conditions to the query .
12422	assigns a value to the array
12423	Extract errors from message
12424	Returns the configuration file for this model .
12425	Returns the models definitions .
12426	Saves the models definition .
12427	Returns current metadata
12428	Set property name
12429	Set field color
12430	Setter for config parser
12431	Aggregate given collection into given collection
12432	Make a request to a remote server
12433	Generate a proxy file
12434	Create a validator for a model type .
12435	Validates a model attribute .
12436	Validates a value for this action .
12437	Runs the application .
12438	Shutdown function .
12439	Build a URL to a controller
12440	Get the canonical URL of the current page .
12441	Normalize the route path .
12442	Is the test working?
12443	Returns view names .
12444	Get a value
12445	Set a value in the cache
12446	Sets multiple values at once
12447	Retrieves a value from the cache .
12448	Adds a value to the collection
12449	Get the value associated with the given key .
12450	Delete an assistant .
12451	Remove unwanted characters from the given string
12452	Set the default options for a command .
12453	Returns the value of an option or a configuration option .
12454	Get the value of an option with the given name and typecast .
12455	Load config from file
12456	load config from file .
12457	Render a config
12458	Render a value
12459	Normalizes the config array path .
12460	Set package 2 . 0 version 1
12461	Clears the contents of the package
12462	Clears all package dependencies .
12463	Set the package type
12464	Returns the current release .
12465	Add an install as a package
12466	Adds an ignore file to the page
12467	Add a binary package
12468	Add a new option to the command line .
12469	Set PHP - Install condition
12470	Set the OS - install condition .
12471	Set install condition .
12472	Generate a change log entry .
12473	Check if the file is video
12474	Scan video infos
12475	Set new date .
12476	Set object amount .
12477	Set the object type .
12478	Set value for field user_comment
12479	Setter for category_id .
12480	Set accountId virtual
12481	Creates a DateTime object from the supplied timestamps .
12482	Create instance from array .
12483	Create a SQLite instance .
12484	Creates a new MySQL connection .
12485	Execute a SQL query
12486	List all tables in the database
12487	Run a single row
12488	Execute a single cell
12489	Checks if a table exists
12490	Checks if column exists
12491	Get all primary keys for a table
12492	Returns all columns in a table
12493	Logs a query
12494	Add bootstrap listener
12495	Run application .
12496	Sets the keys
12497	sets private key
12498	Set envelope key
12499	Sets the compression
12500	Get formatted date .
12501	Supprime une user
12502	Executes a function .
12503	Creates migration history table .
12504	Add a filter to the chain
12505	Filters a static object .
12506	Populate inverse relations .
12507	Populate relation .
12508	Populates relational data .
12509	Populates a relational query with multiple models .
12510	Returns the list of invalid properties .
12511	Process an associative array
12512	Factory method for new entity
12513	Checks if two strings are equal
12514	Check if string ends with another
12515	Returns true if this string contains the specified substring .
12516	Return a subset of the current string
12517	Returns a substring of text
12518	Performs search and replacement .
12519	Before insert event listener .
12520	Before delete event
12521	Reloads data from database .
12522	Update all records
12523	Deletes all records matching the specified conditions .
12524	Inserts a new record .
12525	Inserts new record to the database .
12526	Deletes the object from the database .
12527	Gets the methods of this class .
12528	Get the method identifier .
12529	Callback for custom data types .
12530	Gets an array of commands
12531	Print the help for a given controller
12532	Create a controller instance .
12533	Handle an exception .
12534	Handles a fatal error .
12535	Logs an exception
12536	Get Exception trace
12537	Reduce the stack trace
12538	Proxy method .
12539	Proxy method .
12540	Injects the variable to the arguments array
12541	Ensure the string is translated .
12542	Create a new repo
12543	Set up notification module
12544	Get random key
12545	Returns an array of properties ready to be stored
12546	Register custom class .
12547	Manage user assignments .
12548	Make requests for all countries
12549	Encodes special characters
12550	Get default phrase
12551	Returns a specific header
12552	Returns the response body .
12553	Decode a gzipped string .
12554	Determine if the current entity exists .
12555	Clears the table .
12556	Checks if there are enough requests .
12557	Gets all headers .
12558	Get HTTP header name .
12559	Write an array of multiple messages
12560	Prints out a message .
12561	Sets the filter types .
12562	Find a view path in the given paths .
12563	get possible files
12564	Start the session
12565	Returns a parameter by its identifier .
12566	Set session variable .
12567	Removes an item from the collection
12568	Generate a CSRF token .
12569	Validate a CSRF token
12570	Humanize a table name .
12571	Deletes the file or directory .
12572	Moves the file to the destination .
12573	Clean the file name .
12574	Dispatches an event
12575	Handles PHP errors .
12576	Handle an error
12577	Saves the item .
12578	Returns a string representation of the exception .
12579	Convert a string to XML
12580	Convert a string to an array of terms
12581	Load a configuration file
12582	Set a config
12583	Get config value
12584	Build a config stack
12585	Parse global config
12586	Parses config recursive .
12587	Compile a join constraint statement .
12588	Compile a where null clause .
12589	Compile an insert statement into SQL .
12590	Compiles an update query .
12591	Compile a delete query .
12592	Wrap a dot notation value .
12593	Set the request arguments .
12594	Sets the promise .
12595	Set the prediction .
12596	Sets the expectation for a generator .
12597	Creates a Gallery instance
12598	Connects to the given callback
12599	Create a new record
12600	Write this object as SQL query syntax
12601	Scans a generic resource .
12602	Returns a flat map with the given callable
12603	Return a new element with the given predicate
12604	Execute callback stack
12605	Execute callback as reference
12606	Parse callback function name
12607	Get constraints .
12608	Get the minimum value of the given option .
12609	Returns the current controller
12610	Method to get property Action
12611	Resolve action .
12612	Process data dispatched by the router
12613	Processes the response .
12614	Get router exception .
12615	Get terminal sizes .
12616	Get operating system
12617	Returns a translated string
12618	Locate a config file
12619	Formats the value as text
12620	Formats the value as an email address .
12621	Formats the value as a decimal number .
12622	Formats this number as a small size .
12623	Creates a new scenario . If creation is successful the browser will be redirected to the index page .
12624	Updates an existing model . If update is successful the browser will be redirected to the index page .
12625	Checks if the class exists .
12626	fetch an object from the result set
12627	Executes a query and returns the first column of the first row .
12628	Exclude trashed records .
12629	Scope only deleted records .
12630	Execute a console request
12631	Get an item from an array using dot notation .
12632	Get a specific header
12633	Return an instance without the specified header .
12634	Set the message body .
12635	Answers the icon for the type .
12636	Returns an array of all possible types
12637	Binds a template alias
12638	Renders an exception .
12639	Formats console message
12640	Get Response for header
12641	Convert an array to header string
12642	Combine section data
12643	Recursively walk through data array
12644	Explodes a string .
12645	Show error report
12646	Return error page
12647	Extracts the parameters from the route path
12648	Returns the controller object
12649	Build the HTML for the buttons column .
12650	Returns options array
12651	Evaluate an expression
12652	Retrieve a zone
12653	Add a new record .
12654	Retrieve a table from the database .
12655	Returns a transactional transaction object .
12656	Loads default metadata .
12657	Set element s parent id
12658	Gets the budget category
12659	Get all category word .
12660	Flush the cache
12661	Add an item to the list .
12662	Remove an item from the list .
12663	Removes cache records for a given tag .
12664	Get a boolean value .
12665	Create a new Parameter
12666	Extracts the parameters from a collection
12667	Listener for command loaded event .
12668	Adds a new route group .
12669	Returns all annotations for the given class or interface .
12670	Set service properties from annotation .
12671	Build a service from an annotation .
12672	Create a ContainerContext from an annotation .
12673	Get the cached response .
12674	Returns query builder instance .
12675	Create response for given interface
12676	Get the token for the stated class name .
12677	Returns the token of the declared class instance .
12678	Get information about a package .
12679	Is the current state better?
12680	Compile the command .
12681	Generates arguments for application
12682	Execute the process .
12683	Save layer .
12684	Performs content manipulation .
12685	Adds a route to the collection .
12686	Add route for GET method
12687	post route method
12688	Add PUT route
12689	Add PATCH route
12690	Add route for DELETE method
12691	Add new route for HEAD method
12692	Get named route
12693	Get the route url .
12694	Get a route from a request .
12695	Find a route based on the path .
12696	Is internal uri?
12697	Dispatch a route .
12698	Setup the routes collection .
12699	Set the dynamic route .
12700	Validate the route path .
12701	Match static route
12702	Find a route in a dynamic route .
12703	Get the matched static route .
12704	Get the matched dynamic route .
12705	route middleware .
12706	Route middleware .
12707	Get Response from dispatch
12708	Setup routes from cache .
12709	Setup the annotated routes .
12710	Renders the header
12711	Renders the toggle button
12712	Get the fulltextFile object for the message file .
12713	Get the pagination result
12714	Add filters to query builder .
12715	Filter by search
12716	Add the search filter .
12717	Add ordering .
12718	Adds the offset to the query .
12719	Add Limit .
12720	Find by id
12721	Adds a JOIN clause to the query
12722	Get sort column .
12723	Add an order by clause to the query .
12724	Returns true if the number is valid
12725	Replace entities .
12726	Reverse entities .
12727	Get XML declaration .
12728	Get document type declaration
12729	Converts an array of attributes to a string
12730	Collapse empty tags
12731	Create a tag from an attribute name
12732	Creates the start element .
12733	Split the fully qualified name .
12734	Check if a string is a valid XML name .
12735	Dispatch an object
12736	Adds tags to the response .
12737	Invalidate tags .
12738	Validate the given entity .
12739	Interpolate context values into messages .
12740	Check if two points are the same space
12741	Compare two points
12742	Get the intersection between two lines .
12743	Checks if two lines are the same .
12744	Determines if two lines are Params
12745	Get the direction between two points
12746	Returns direction by coordinates .
12747	Fetch all records from the database .
12748	Prepare the via callback .
12749	Removes duplicate models from the database .
12750	Retrieve one record from the database .
12751	Checks if the value is valid UTF - 8 .
12752	Asserts that the header value is valid .
12753	Sends the request to the API and returns the result .
12754	Builds the request URI
12755	Set default language
12756	Set mediatype option
12757	Set result format .
12758	Setter for limit .
12759	Set an array of entities
12760	Set the attribute of the media object .
12761	Allows to set the callback
12762	Set explicit options .
12763	Returns the gallery s photos .
12764	Print log message .
12765	Creates a temporary directory .
12766	Get information from a file .
12767	Get an info file from a description file .
12768	Fetch information from string
12769	Fetch information from any file .
12770	Get with offers
12771	Get all offers with offers
12772	Searches for this node
12773	Set Log File Handler
12774	Set the handler for the mail .
12775	Returns an array of log files
12776	Make a log row
12777	Shutdown function .
12778	Set the request handles .
12779	Distribute the action
12780	Initialize bundle .
12781	add a boot error message
12782	Initialize a constant path
12783	Adds an application path .
12784	Get the absolute path of a stack .
12785	Returns the absolute path of a file
12786	Returns information about current connection .
12787	Sets the mode
12788	Loads the default application configuration .
12789	Initialize the reaction .
12790	Load a bundle
12791	Gets asset converter .
12792	Generates a link to a file
12793	Add a reply tos
12794	Create a new user
12795	Resumes a session .
12796	Calculates an expression
12797	Get user details .
12798	Execute a raw SQL query .
12799	Render csrf meta tags .
12800	Create a label tag .
12801	Create a button tag .
12802	Create a submit button .
12803	Create a submit input tag
12804	Create a reset input
12805	Create a hidden input field .
12806	Create a password input field .
12807	Process boolean input options .
12808	Sets the number of hours .
12809	Sets the number of minutes .
12810	Sets the number of seconds .
12811	Validates time elements
12812	Write data to the file .
12813	Write a file as a stream .
12814	Updates the file .
12815	Updates a stream .
12816	Write a file .
12817	Creates a stream for the given path .
12818	Renames a file or a directory path .
12819	Copies a file to a new path
12820	Returns metadata of a file .
12821	Get mimetype of the path
12822	Gets the size of a Path .
12823	Gets the timestamp of the file .
12824	Get the path s visibility .
12825	Sets the visibility of the fly
12826	Sets the visibility of the given path .
12827	Sets whether the given path should be private .
12828	Lists the directory contents .
12829	Create an adapter instance for the local adapter .
12830	Get an instance of the s3 adapter
12831	Process request .
12832	Deserialize request .
12833	Checks if the object has access to the superuser
12834	Parse a single block
12835	Get or set the absolute path
12836	Get the Authentication object .
12837	Get data from url
12838	Parse json data
12839	Get all resources
12840	Returns the entity alias
12841	Create query builder
12842	Creates a ResultSetMappingBuilder instance .
12843	Returns all identifier fields .
12844	Get minimum value .
12845	Paginate results .
12846	Checks if a given entity is an entity
12847	Gets the identifier of an entity .
12848	Validate entity instance
12849	Convert entity to array .
12850	Filter uploaded files .
12851	Returns the maximum size allowed for uploaded files
12852	Determine if the bag contains a value .
12853	Handles command output .
12854	Terminate console kernel .
12855	Get account categories
12856	Runs the application
12857	Initialize time zone .
12858	Execute the given function .
12859	Convert to array .
12860	Initializes the database .
12861	Get list of children .
12862	Detect loop .
12863	Invalidate the cached data .
12864	Returns the last batch number .
12865	Creates a response instance .
12866	Create a Json Response instance .
12867	Creates response instance of Response
12868	Constrain other layers .
12869	Return the filter adapter
12870	Set compression adapter
12871	Set the namespace prefix .
12872	Returns the value associated with the given name .
12873	Show Hello status
12874	Installs the tables
12875	Show the error action
12876	Returns the serializer instance .
12877	Increment the version of a file
12878	Method to get the body
12879	Get body array
12880	Get the response body
12881	Returns the results from the given query .
12882	Set default values
12883	Set response body .
12884	Convert ResponseCode to array
12885	Returns a validation rule for this object .
12886	Get Attribute From S3
12887	Get an adapter for the given ADO connection .
12888	Get the connection ID from the given ADO connection .
12889	Default error action .
12890	Wraps curl error exception
12891	Callback used to read the body content .
12892	Callback called when a string is sent
12893	Callback function for string write
12894	Add a collection of commands .
12895	Print time .
12896	Prints help for a class .
12897	Print help information for a class type .
12898	Prints a line to console .
12899	Save upload action
12900	clear html tags
12901	Before save listener .
12902	After find callback .
12903	JSON attribute value .
12904	Create a Bank instance .
12905	Set the locale
12906	Get localized question
12907	Establishes a tunnel
12908	Determine if the request should be kept .
12909	Disconnect from socket
12910	Handles the redirect .
12911	Determine if the server should use the digest auth .
12912	Determine if the request should use the proxy auth .
12913	Writes the request body .
12914	Decode chunked response .
12915	Build a select query
12916	Build where conditions
12917	Return sql join string
12918	Create a group by clause
12919	Prepare dependency handler
12920	Creates a mapping for each row
12921	Strips whitespace from a string
12922	Check if a call is made .
12923	Decode YAML configuration .
12924	Start session .
12925	Execute a query and return the results
12926	Inserts data into a table
12927	Execute a UPDATE query
12928	Insert or update a record
12929	Execute a SELECT query
12930	Fetch all rows .
12931	Fetch multiple ids
12932	Fetch a single row from a result set .
12933	Get the value of a single row .
12934	Prepare a PDO query
12935	Execute a prepared statement
12936	fetch a prepared statement
12937	Log the activity .
12938	Parse a single value
12939	Performs a regular expression search with the supplied value .
12940	Dispatch middleware .
12941	Terminate the route middleware .
12942	Sets up the element handler
12943	Ends the element .
12944	Execute a command .
12945	Process the message .
12946	Modifies the uploadable behavior
12947	Creates a new request from a JSON string .
12948	Opens a session .
12949	Reads session from storage .
12950	Destroys a session
12951	Write data to session storage .
12952	Renders a widget .
12953	Returns html id of element
12954	Invoked before each run .
12955	Checks application persistence .
12956	Find by field
12957	Destroy a record
12958	Get all rows from the table
12959	Save the current record to the database
12960	Show all breadcrumbs
12961	Ajax action
12962	Verify user account .
12963	Load nav bar
12964	Check for budget by id
12965	Setup the package .
12966	Execute the class .
12967	Get the name of this user .
12968	Save the user
12969	Change the password
12970	Set the concrete implementation .
12971	Get a writer
12972	Parse the version string
12973	Compares the version with the given one .
12974	get a branch of the tree
12975	Get parent of this category
12976	Returns all parent nodes of this category
12977	Recursively converts objects into arrays
12978	Applies a mod modifier
12979	Creates a new resource from a CSS URL .
12980	Get the address book .
12981	Show the contact list .
12982	View a message .
12983	Handle a POST request .
12984	Append extensions to all paths .
12985	Destroy the current session
12986	Add autoload method
12987	Remove autoload method
12988	Remove an aggregate object from the aggregation .
12989	Executes an OPTIONS request .
12990	Returns an array of options
12991	Parses a short option
12992	Parse command line arguments
12993	Creates a directory structure from a given path
12994	Transform files to struct .
12995	Remove directory recursive .
12996	Make a new directory .
12997	Creates a temporary directory .
12998	Removes temporary files
12999	Finds an array of sub - directories .
13000	Gets a log instance .
13001	Set the budget ID .
13002	Gets the budget .
13003	Get all transactions
13004	Prepare the given value to be used as a php value .
13005	Set URL of this Request
13006	Set the request method
13007	Set authentication .
13008	Add a cookie to the request .
13009	Set body .
13010	Get the multipart body .
13011	Adds a file to upload
13012	Attach an observer
13013	Detach an observer
13014	Set the last event
13015	Set the HTTP request adapter
13016	Set the cookie jar
13017	Send request to server
13018	Detect the mime type of a file
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new Setting entity .
13022	Edits an existing Setting entity .
13023	Apply WHERE conditions
13024	Set response status code .
13025	Remove all records
13026	Determine if an event has listeners for a given event .
13027	Get field value
13028	Returns a string for the given message .
13029	Creates an AccessDeniedHttpException .
13030	Saves a flash message .
13031	commit a transaction
13032	Format a date .
13033	Format the given time
13034	Format a boolean value .
13035	Sets the timezone to use for this connection .
13036	Instantiate a class
13037	Check if service exists
13038	Creates an instance of a given class
13039	Add resolver .
13040	Adds an object instance .
13041	Get the pool instance
13042	Executes the specified query .
13043	Executes a query and returns the resulting statement .
13044	Create a new database connection .
13045	return the oldest connection old
13046	Installs the assets under the web root directory .
13047	Returns a reflection class
13048	Gets the version of a class .
13049	Returns class name by version .
13050	Gets the migration methods for a class .
13051	Returns an array of required class options
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing job entity .
13056	Set name of client file
13057	Guess the extension of the file .
13058	Get the MIME type of the file .
13059	Get human readable size
13060	Return a datetime as a datetime
13061	Get the time as a datetime
13062	Get time as datetime
13063	Create a new file from a content
13064	Finds all applications
13065	Finds application by id
13066	Create the application file
13067	Delete application files
13068	Update application data
13069	Returns the closest time before the given date .
13070	Gets the closest date after the given date .
13071	Builds a DateTimeInterval object from provided date interval .
13072	Gets the day before the day number .
13073	Gets the day after the given day number .
13074	Get information about role
13075	Commits current transaction
13076	Rolls back the current transaction .
13077	Sets the transaction isolation level .
13078	Get the Doctrine connection .
13079	Set the backend to use
13080	Logs a debug message .
13081	Log an info message .
13082	Log a notice message .
13083	Add warning message
13084	Log an error message
13085	Log a critical message .
13086	Log an alert message .
13087	Log emergency messages
13088	Sends a log message to the passed level .
13089	Gets a property value .
13090	Truncate HTML .
13091	Installs PEAR object
13092	Removes package files
13093	Adds a file operation to the transaction
13094	Download an array of packages
13095	Set the package loaded packages .
13096	A helper method for valid points
13097	Creates a new iteration exception .
13098	Registers the ordercloud components .
13099	Add an array of attributes .
13100	Change CSS classes .
13101	Parse the class attribute .
13102	Returns a JSON column definition .
13103	Register a binding if it s not already registered .
13104	Bind an element to an abstract array
13105	Refinding an element .
13106	Check if an abstract is shared
13107	Get a Closure instance .
13108	Add dependency for call parameter .
13109	Get the contextual concrete for the given abstract .
13110	Request middleware .
13111	Apply middleware .
13112	Called by the terminable middleware .
13113	Displays all SoapControllers
13114	Get the wsdl instance
13115	Initialize the minify options .
13116	Convert a date to a timestamp
13117	Converts a timestamp to a human readable format .
13118	Get date conversion string
13119	Calculate time left
13120	Return the properties of this object .
13121	Check if a call is made .
13122	Parse parameter .
13123	Set a scenario parameter .
13124	filter a string
13125	Output a breakpoint
13126	Download all channels
13127	Add a mock object .
13128	Creates a new instance of a given class
13129	Shows profile settings form .
13130	Checks if the given namespaces exists .
13131	Retrieve the environment variable .
13132	Make a new response .
13133	Get response content .
13134	Make a json response .
13135	Create a JSONP response instance .
13136	Create a redirect response .
13137	Redirects to a route .
13138	Validate an email address .
13139	Get the difference in years .
13140	Get the difference in weekdays
13141	Get the difference in seconds
13142	Get the difference between dates .
13143	Gets the list of commands from a list of classes .
13144	Set the command properties .
13145	Build a console command from an annotation .
13146	Get the storage path
13147	Finds the Model based on its primary key value . If the model is not found a 404 HTTP exception will be thrown .
13148	Returns a Parameter for a command .
13149	Creates a Guzzle request .
13150	Send a GET request to the API .
13151	Send a POST request to the given URI .
13152	Heads the given URI
13153	Send a PUT request to the API .
13154	Send patch request
13155	Send a DELETE request to the API .
13156	desensitization of a host
13157	Log a named checkpoint .
13158	Merge data with new data
13159	Read config from file
13160	Get a package by name
13161	Initialize static initialization code
13162	Clears the initialisation code .
13163	Get initial initialization code
13164	Evaluate PHP code .
13165	Initialize the template paths .
13166	Add template path
13167	Wrap an object in a readable way
13168	Returns schema names .
13169	Returns table names .
13170	Refreshes the table metadata
13171	Returns the table metadata .
13172	Get the raw table metadata .
13173	Set the raw table metadata .
13174	Get the cache key .
13175	Gets the value of an option
13176	Get temporary directory
13177	Initializes the database .
13178	Creates new role
13179	Assign child role to child
13180	Register a function prophecy .
13181	Call mock .
13182	Return a parameter by key .
13183	Resolves a parameter string .
13184	Turns the query into meta tags .
13185	parse twitter url
13186	Renders tab panes .
13187	Registers user .
13188	Set the vector
13189	Open the MAC cipher
13190	initialize the mcrypt cipher
13191	Connect user to API and return instance
13192	Verify user credentials .
13193	Fetches user data .
13194	Create a new auth extension
13195	Adds the given data tokens to the given object .
13196	Returns the configured authentication protocol .
13197	Check if the given credentials are Oauth1 .
13198	Check if the given credentials are Oauth2 .
13199	Closes the stream .
13200	Attach new stream
13201	Return the contents of the stream
13202	Sets the stream resource
13203	Writes to a file
13204	Get account virtual .
13205	Get previous account
13206	Update an existing account
13207	Set cache duration .
13208	Set the current connection .
13209	Fetch a single row from the result set .
13210	Creates and returns insert statement .
13211	Executes the current SQL query .
13212	Logs the current SQL query .
13213	Query scalar .
13214	Query internal .
13215	Check if a query based on a pattern
13216	Execute a SQL query .
13217	Invoke closure .
13218	Check the given layer .
13219	Prepare the dom
13220	This is the actual dispatch
13221	Renders an error page
13222	Render debug info
13223	Renders a view
13224	Initializes the bot .
13225	Add responders .
13226	Register a shortcode .
13227	Removes a shortcode .
13228	Parses a shortcode tag .
13229	Parse shortcode attributes
13230	Returns a download URL for a specified package .
13231	List packages .
13232	Sort releases by version number
13233	get array data
13234	Get all hours
13235	Parse page .
13236	Find all accounts by user id
13237	Prints an application message
13238	Output the usage message
13239	Returns the usage path .
13240	Writes the arguments section .
13241	Prepares the options section .
13242	Get option name .
13243	Generates a Dice roll number .
13244	Set columns to select
13245	Add HAVING condition
13246	Set where clause
13247	Add a join to join .
13248	Join left table .
13249	Add a right join to the query .
13250	Get SQL .
13251	Execute the query and return a ResultSet
13252	Prefix join condition .
13253	Get an item from the collection .
13254	Set a key value .
13255	Remove key from collection
13256	Constructs INSERT query
13257	Function to set PEAR error stack
13258	Returns a singleton class
13259	Echo an error
13260	Sets the error message callback .
13261	Set default callback
13262	Remove the last error
13263	Get the last item from the stack .
13264	Check if there are any errors
13265	Return an array of errors
13266	Check if package has errors
13267	Get all errors
13268	Returns a formatted error message
13269	Register the configuration .
13270	Register the given provider into the container
13271	Register autowired classes .
13272	Gets the required parameters for the autowired class .
13273	Sets the target path
13274	Sets the filter mode .
13275	returns routes from given classes
13276	Set route properties
13277	Returns the routes for the given list of classes
13278	Build a route for a controller route .
13279	Builds a Route from an annotation .
13280	Publishes route annotations .
13281	Formats the response as JSON .
13282	Formats the JSONP response .
13283	Get the host port .
13284	Get the scheme host port .
13285	Returns a new instance with the specified host .
13286	Returns a new instance with the specified port .
13287	Returns a new instance with the specified path .
13288	Return an instance with the specified query string .
13289	Returns a new instance with the specified fragment .
13290	Check if the current protocol matches the standard port .
13291	Validate scheme
13292	Validates a port .
13293	Validates a package
13294	Validate dependency 1 .
13295	Normalize the package .
13296	Add or remove a SING clause
13297	Tokenize a string .
13298	Returns the key and value of an array of values .
13299	Check for a table
13300	Maps a class name to a table .
13301	Return a database table instance .
13302	Process version tag
13303	Do discover a channel .
13304	Logs in a user
13305	Logs out a channel .
13306	Convert a separator to a separator filter
13307	Returns an array of migration files
13308	Returns a map of migration files to file paths .
13309	Publishes the given method
13310	Send the request
13311	Check the url
13312	Transforms a directory into a domain specific Directory object .
13313	Create an AppBuilder instance .
13314	Creates an app builder from persistent container .
13315	Get the dependencies for the app .
13316	Reset a file to its default .
13317	Create a branch .
13318	Deletes the given branch .
13319	Push a branch to the project .
13320	Create a pull request .
13321	Clone project .
13322	Called on php_data
13323	Executes a shell command .
13324	Connect to the Google API
13325	Adds a file to this filter
13326	Get the new filename for the given filename .
13327	Returns the original source file name .
13328	Returns the named service .
13329	Generate service .
13330	Set a service .
13331	Set an alias
13332	Returns a parameter by its identifier .
13333	Sets a parameter .
13334	Gets a service definition by its identifier .
13335	Set a service definition
13336	Initializes the project .
13337	Creates instance from an event .
13338	Convert the model to an array
13339	Check if the string is serialized .
13340	Check a prophecy .
13341	Adds a new route for the current group .
13342	Initialize all routes
13343	Create a new controller instance from the given controller name .
13344	Register a controller for a class .
13345	Registers controller with actions .
13346	Registers no annotations for a controller
13347	Get the default controller and action .
13348	Register observed observer
13349	Unregisters an observed observer
13350	Auto set channel
13351	Execute a command .
13352	Adds a flash message .
13353	Redirect to referer
13354	Configure shared cache .
13355	Initialize Channel object .
13356	Finalize middleware .
13357	Get the configuration directory .
13358	Checks if a call is made .
13359	Get connection .
13360	Configure tinymce bundle .
13361	Set capabilities of editor
13362	Create a new Instance from a environment
13363	Create locator from absolute path .
13364	Get the constant choices .
13365	Check if a constant is valid
13366	Do a value check .
13367	Check if the given value is valid for the given type .
13368	Get the adapter
13369	Create path to controller
13370	Create cache path
13371	Update the wsdl file .
13372	Compile the Soap object
13373	Returns the documentation of the class
13374	Get an array of all of the Soap controllers
13375	Builds the output
13376	Builds Bootstrap CSS .
13377	Get param .
13378	Rebase the current instance .
13379	Add named route
13380	Adds a static route to the collection .
13381	Is static route
13382	Create a dynamic route .
13383	Check if a dynamic route exists
13384	Register a named route .
13385	Register the sub leaf nodes
13386	Locate a file
13387	Converts this number to another System
13388	Checks if another number is equal .
13389	Calculates the decimal value .
13390	Adds a number to this number .
13391	Subtracts the given number
13392	Multiply this number by the given value
13393	Divide this number by a given number
13394	Get the adapter for the mysqli driver .
13395	Returns a flattened list of all aliases .
13396	Find aliases for a given query
13397	Replace module files .
13398	Read a line from the socket
13399	Enables secure connection .
13400	Throw an exception if the socket timed out .
13401	Add route .
13402	Set the item s items .
13403	Builds the config item
13404	Prepare the name and id attributes .
13405	Check data attribute .
13406	add a resource to the queue
13407	Creates a new DayTime from an array of intervals .
13408	Creates a DayInstance from an associative array .
13409	Checks if the interval is all day
13410	Create request from array
13411	Sets the server info .
13412	Sets the request headers .
13413	Set the post fields
13414	Set fields to GET
13415	Returns a specific header
13416	Return array representation .
13417	Add a command to the application .
13418	Add a parsed command
13419	Returns a command by its name .
13420	Removes the named command .
13421	Finds the command matching the passed path
13422	Returns all available commands
13423	Setup the application .
13424	Setup commands from cache .
13425	Returns an array of cached commands .
13426	Sets a new separator
13427	add an event listener
13428	Listens for many events
13429	Check if listener exists .
13430	Removes the given listener from the given event .
13431	Check if event has listeners .
13432	Add an event to the collection .
13433	Remove an event .
13434	Triggers an event .
13435	Setup hooks .
13436	Setup events from cache .
13437	Initialises the template engine .
13438	Check if the given template exists
13439	Fetch the template from the source file
13440	Load the file from the reader .
13441	Save the changelog .
13442	Initializes the configuration reader
13443	Initialize the writer
13444	Get default options .
13445	Encrypts a string
13446	Decrypts data .
13447	Generate session key
13448	Throw exception to stdout
13449	Render an exception .
13450	Return the view file path for the exception .
13451	Creates a response
13452	Get exception data
13453	Gets the STDERR logger
13454	Read session data from storage .
13455	Write session data to cache .
13456	Destroys a session
13457	Updates a timestamp .
13458	Extracts the data from the session record .
13459	Extract a timestamp from a record .
13460	Get session data from cache .
13461	Returns the message with variables added
13462	Compiles a constraint .
13463	Adds the auto increment value for a column .
13464	Builds a key
13465	Returns the SQL for a foreign key .
13466	Returns the syntrase of a column .
13467	activate the plugin
13468	Creates a new iteration exception .
13469	Renders the toggle button
13470	Get response template
13471	Get application module name
13472	Loads a class reflection .
13473	Gets an object reflection from an object .
13474	Loads a property reflection .
13475	Returns the called method name .
13476	Gets the list of class properties .
13477	Sets the value of a property of an object .
13478	Sets properties value .
13479	Load all the class annotations .
13480	Clear all object recursively
13481	Check if a class is instantiable .
13482	Retrieves reflection for the specified method .
13483	Retrieves reflection for given class or instance .
13484	Check method arguments
13485	Get reflection from cache
13486	Set reflection to cache
13487	Returns the cache key for the given object or array .
13488	Get object class name .
13489	Parse the doc comment .
13490	Get class doc comment .
13491	Get method doc
13492	Initialize driver by config
13493	Get the namespace map
13494	Remove indent from a string
13495	Post processing callback
13496	Extract the photo array from the source data .
13497	Fetch images from a photo
13498	Extract the images from the source image .
13499	Find the position of the placeholder starting at the given path .
13500	Build route path
13501	search in route
13502	Replace placeholders in a path
13503	Initializes this object .
13504	Preload all messages .
13505	Find all categories matching a pattern .
13506	Magic method is defined .
13507	Send exception response .
13508	Returns the HTML content for the given exception .
13509	Format a path .
13510	Format args .
13511	Escape html special characters .
13512	Create a new validator instance with the given data .
13513	Transform a single string into an InputString .
13514	Handle disconnect event .
13515	Handle received event .
13516	Default callback .
13517	Callback when the timeout reached
13518	Get proxy command handler
13519	Returns the config
13520	Load bundles .
13521	Loads the messages .
13522	Set HTTP Headers
13523	Set ServerCgi Environment Variables
13524	post request
13525	Send JSON - RPC request
13526	Connect to the database .
13527	Escapes special chars in a sqlite string .
13528	Initialize the reaction object
13529	Check if the table has a slug field .
13530	Get special fields
13531	Returns fields by type .
13532	Format date .
13533	Returns preferred language .
13534	Returns accepted charset .
13535	Negotiates the accepted mime type based on the Accept header
13536	Match accept header .
13537	Sort Accept header
13538	Performs HTTP HEAD request
13539	Convert charset from one encoding to another .
13540	Get an entity manager
13541	Get object structure
13542	Get auto object from database
13543	Get table structure
13544	Get a model object
13545	Build the structure of the database objects
13546	Prepare the error .
13547	Check for dates .
13548	Check if a budget is available .
13549	Find by budget .
13550	Setter for IDParent .
13551	Set is_main .
13552	Gets the user associated with this account .
13553	Get the customer bank
13554	Parse an account
13555	Get type icon .
13556	Build the query
13557	Escape a single value
13558	Creates a redirect response .
13559	Sets whether or not a path is secured .
13560	Redirect back to the referrer
13561	Throws an HttpRedirectException .
13562	Filter commands by their name .
13563	Sorts commands by name .
13564	Occurs on a command section .
13565	Starts a new or existing session .
13566	Starts the event timer .
13567	Get the current time .
13568	Display timer .
13569	Initialize provided provider
13570	Initializes Static App .
13571	Initializes the basic framework .
13572	Locates the configs path .
13573	Locate the class loader
13574	Create configuration object .
13575	Get config reader
13576	Initialize DI container
13577	Initialize the app .
13578	Checks if a request matches the stored token .
13579	Get CSRF token from request .
13580	Initialize the bot .
13581	Gets the current weather for a location .
13582	Get precipitation from an event
13583	Get the latitude long for a location
13584	Add the error message to the response .
13585	Returns the English string for the English expression
13586	Retrieve annotations for a class .
13587	Return the class annotations
13588	Return the class and members annotations .
13589	Attributes for a property
13590	Filter property annotations
13591	Return the list of annotations for the class .
13592	Set method annotations
13593	Filter method annotations
13594	Get the class s method annotations .
13595	Get annotations for a function .
13596	Get list of annotations by type
13597	Set the property values
13598	Get reflection of class
13599	Get reflection for a class
13600	Get a reflection for a method .
13601	Get reflection for function .
13602	Returns an array of the class dependencies .
13603	Calculates the length between two points
13604	Get center .
13605	Run the widget .
13606	Generates a response field .
13607	Check if a key exists .
13608	Get the directory name .
13609	Scans a directory
13610	Parse response header
13611	Returns a list of headers .
13612	Create a database .
13613	Get a list of tables
13614	Update diff in given structure
13615	Update database relations
13616	Update many table structure .
13617	Generate table sql
13618	Generate the column SQL .
13619	Generate index SQL
13620	Generate constraint SQL
13621	Get the array of key values by its key type .
13622	Get all key values by key type .
13623	Return the list of annotations for the given class
13624	Get class - specific annotation .
13625	Retrieves annotations for a single property
13626	Get the exact property of a class .
13627	Retrieves annotations for a single method
13628	Get a specific class - specific annotation .
13629	Returns an instance of the annotation reader .
13630	Get a reflection for a method .
13631	Get value from cache
13632	Set an item in the cache .
13633	Returns an array of relative paths
13634	Process key .
13635	Check if the given event class name implements the EventInterface .
13636	Build an event object
13637	Get the average value of a given array .
13638	Order by .
13639	Retrieve the list of parameters from the constructor .
13640	Gets a value from an object using the given path .
13641	Sets a value to a path .
13642	Filter an array of objects
13643	Set From Address
13644	Adds a new address to the recipient .
13645	Adds Reply - To Address
13646	Adds a CC address .
13647	Adds a BCC address to the mailbox .
13648	Adds an attachment .
13649	Run the application .
13650	Set the referer
13651	Gets the Referer from the session
13652	Build url .
13653	Download the package
13654	Extract the package .
13655	Reset default locale translations .
13656	Finds the position of the first occurrence of a string in a string .
13657	Create side sidebar menu .
13658	Adds the example menu as an example menu .
13659	Register the application services .
13660	Publishes a list of pages
13661	Execute a UPDATE query
13662	Loads the messages .
13663	Get all categories .
13664	Returns the filename of the response .
13665	Validates each uploaded files array .
13666	Init result object
13667	Get the pattern .
13668	Set all the attributes
13669	Detect data by key .
13670	Check if running on Shell .
13671	Get the config
13672	Returns the coordinates in degrees format
13673	Returns the DMS longitude coordinates .
13674	Calculate the latitude range between the point and the distance in meters .
13675	Calculate the longitude distance between the given distance in meters
13676	Get the distance for a location .
13677	Determine if the set matches the given data .
13678	Creates tables from config
13679	Merge multiple schemas into a single database .
13680	Get a specific point
13681	Publish action .
13682	Get the matching URL fragment .
13683	Generate the response for a request
13684	Retrieve a data from the cache .
13685	Whether the string ends with another string .
13686	Count the number of words in a string .
13687	Create the actingAs for the model .
13688	Initialize session .
13689	Opens the session .
13690	Opens the session .
13691	Register the response handler
13692	Close session .
13693	Destroy the session .
13694	Regenerates the id .
13695	Read a session .
13696	Write a session
13697	Destroy a session .
13698	Set a value in the session
13699	Removes a value from the session .
13700	Removes all session data .
13701	Get session flash parameter
13702	get all flash messages
13703	Set session flash parameter
13704	Add flash message
13705	Removes a flash parameter
13706	Removes all flash params
13707	Store the current session
13708	Unfreezes the session
13709	Create Response Cookie
13710	Validate that a given date is after a given date .
13711	validate after a given date with a given format .
13712	Validate a date format .
13713	Checks for predictions .
13714	Assign value to array
13715	Get plugin config
13716	Execute the rule .
13717	Process multiple dps
13718	Splits an array into fragments .
13719	Create view instance .
13720	Set view variables
13721	Set a view variable .
13722	Escapes special characters for HTML entities .
13723	get template directory
13724	Set or get the layout path .
13725	Sets the template to render .
13726	Renders a partial
13727	Close a block .
13728	Render the template .
13729	Get full path of template .
13730	Renders a template .
13731	Render a layout .
13732	Set the route .
13733	Gets a line for a separator .
13734	Prints a simple header message .
13735	Get a notification array
13736	Creates a notification instance .
13737	Set the update key .
13738	Should this file be renaming?
13739	Guess the file extension .
13740	Guess the filename of the current file .
13741	Set the name of the record .
13742	Download a file from a remote server .
13743	Upload a tinymce file
13744	On kernel exception .
13745	Make a curl request
13746	Performs the request and returns the response
13747	Set cookie file location
13748	Choose the map parameters
13749	Lists all Modul models .
13750	Initializes the options .
13751	Write to a file
13752	Get exception from context .
13753	Converts an exception into an array .
13754	Render a file
13755	Check if the given file is a core file
13756	Gets the name of an exception
13757	Minify CSS links
13758	Generate a minify list
13759	Set the amount default .
13760	Set date start
13761	Set new date end
13762	Set isRecurrent
13763	Set the month - mask of the month
13764	Get all budget categories
13765	Get all budget month
13766	Executes a prepared statement .
13767	Handle PDO errors .
13768	Autoload a file path
13769	This method contains the logic to be executed when applying this migration .
13770	Run the migration down .
13771	Inserts data into a table
13772	Batch insert data into a table .
13773	Updates one or more rows .
13774	Deletes one or more rows from a table .
13775	Rename a table .
13776	Creates a drop table .
13777	Truncates a table
13778	Drops a column from a table .
13779	Renames a column .
13780	Changes a column of a table .
13781	Builds and adds a primary key .
13782	Drops a primary key .
13783	Builds and executes a SQL statement for adding a foreign key constraint .
13784	Drops a foreign key from a table .
13785	Creates an index .
13786	Drops an index on a table .
13787	Add comment for a column .
13788	Adds a comment to a table .
13789	Drops comment from a column
13790	Drops comment from a table .
13791	Executes a promise
13792	Send a message to the adapter
13793	Validate regex .
13794	Capture raw text
13795	Split text into array
13796	Performs raw text and replace
13797	POST config action .
13798	Get the securimage url
13799	Gets a record .
13800	Get existing record or create new if not exists
13801	Gets a list of models
13802	Save a record to the database .
13803	Delete a record .
13804	Get the where conditions for the given IDs .
13805	Get the where IDs .
13806	Sets a cookie
13807	Establishes a connection to a remote server
13808	Save this record to the database
13809	Set the current state of the record .
13810	Returns an array representation of the record .
13811	Get the value of a field
13812	Set the value of a record
13813	Get a single record primary key
13814	Parse the path .
13815	Validate the given path .
13816	Splits segments .
13817	Parse path .
13818	Get parameter replacement .
13819	Cache a value .
13820	Flush the cache .
13821	Process raw response data
13822	Invoke method on object .
13823	Returns the content type
13824	Regenerates the session id .
13825	create a new session id
13826	Creates a gc timer .
13827	Sets the content
13828	Set the buttons .
13829	Attach button .
13830	Validate modal type .
13831	Validate modal size .
13832	Register all commands
13833	Save TAR Archive
13834	Adds a string to archive
13835	Check that a filename is malicious .
13836	Parse custom command .
13837	Runs the migrations on the other object .
13838	Returns the list of unique keys for a given table .
13839	Gets the primary key for a table .
13840	Get primary keys
13841	Returns the critical priority .
13842	Get the validator .
13843	Load mime types .
13844	Load MIME aliases
13845	Deletes a file or directory
13846	Returns the permissions as string
13847	Converts the permissions strings in octal format
13848	Add a new join to the query .
13849	Returns the SELECT query as a SQL string
13850	Performs a search
13851	Builds a SQL statement for creating a table .
13852	Loads modules .
13853	Builds the dependency container
13854	Initialize the speaker .
13855	Begins the select query
13856	Adds a table
13857	Add a value to the query .
13858	Set where clause .
13859	Adds a where or condition to the query .
13860	Adds a ORDER BY clause to the query .
13861	Adds order by desc .
13862	Gets the current query .
13863	Sets the WHERE clause .
13864	Sets the order by clause
13865	Returns the select query .
13866	Get insert query .
13867	Get update query
13868	Returns the delete query .
13869	Returns the SET query .
13870	Returns the where statement .
13871	Returns the ORDER BY clause .
13872	Walks down an expression .
13873	Handles registration form submission .
13874	Edit user form
13875	Short description of method getVersion
13876	Create a route object
13877	Handle the response .
13878	resolve a route
13879	Get Home URL .
13880	Set component definition
13881	Restore a User
13882	Get a user by its ID .
13883	Get inactive sessions .
13884	Saves an array of messages to a file .
13885	Find a value in the array .
13886	Find with given models .
13887	Returns the next row from the result set
13888	Fetch a single column
13889	Read an object from the database
13890	Fetch all results
13891	Returns the column count .
13892	Find foreign key constraints .
13893	Gets the version of the postgres server .
13894	Build the routes data
13895	Parse route data .
13896	Build route expressions
13897	Register an alias for a service
13898	Binds the service to the dispatcher .
13899	Register a service context
13900	Creates a Service object from the context
13901	Check if service with identifier exists
13902	Has a context
13903	Get a service
13904	Make a service .
13905	Returns a singleton instance of a singleton .
13906	Get all of the providers
13907	Get the service ID for the context
13908	Setup the container .
13909	Setup services from cache .
13910	Register the service providers .
13911	Get the cacheable files .
13912	Get address lines .
13913	Sets the filter level
13914	Returns unique id .
13915	register routes in router
13916	Resolve action .
13917	This method is invoked before an action is executed .
13918	Invoked after an action
13919	Renders a partial view .
13920	Render ajax call .
13921	Return the list of actions .
13922	Render a layout
13923	Renders a view .
13924	Normalizes the action method name .
13925	Resolve error as html .
13926	Resolves error data into an array
13927	Gets the data for the given exception .
13928	Returns the name of the exception
13929	Validates action .
13930	Protected get action ID
13931	Get action method .
13932	Convert hex color to hex string
13933	Convert color to RGBA
13934	Get image dominant
13935	From stream wrapper .
13936	Displays a select form .
13937	Append a file to the paths list .
13938	Get pg client .
13939	Execute a query and return the results .
13940	Write the stream to the given path .
13941	Builds a new ServerRequest object from PHP globals .
13942	Return value of a header
13943	Strip the query string from the given path .
13944	Parse the host and port from an aggregate .
13945	Normalize a nested file spec .
13946	Determine if the given string ends with the given substring .
13947	Generates random string
13948	Create edge graph
13949	Finds all edges of a given class or interface .
13950	Create a new resource .
13951	Fetch all items
13952	Update a resource .
13953	Set the HTTP status code
13954	Set response headers
13955	Get Date header
13956	Set the date header .
13957	add Cache Control
13958	Get Cache Control
13959	Remove a Cache Control .
13960	Is the cacheable?
13961	Gets the age of this response .
13962	Set headers to expire
13963	Returns the Expires time of the request .
13964	Returns the max age of the response .
13965	Set shared max age .
13966	Sets the response s time - to - live .
13967	Set Not Modified
13968	Check whether order is invalid .
13969	Checks whether the object is informational
13970	Whether the response is successful
13971	Check whether the request is a redirection .
13972	Is client error?
13973	Is a redirect?
13974	Is this response empty?
13975	Close output buffers
13976	Initializes this class .
13977	Validate request method
13978	Locate a command path .
13979	Locates all modifications .
13980	Download package .
13981	Remove installed packages .
13982	Detects duplicates in a set of parameters .
13983	Load from file
13984	Returns an associative array of all parameters .
13985	Enables error handling .
13986	Get the difference between two currencies
13987	Set the month to a bitmask
13988	Check whether this month has a given month
13989	Returns length of the CSV file .
13990	Get current boundary
13991	Loads a user for the given username .
13992	Creates a new record .
13993	Sets the current IP address .
13994	Render a view .
13995	Publishes the given stream events .
13996	Called when a resource is materialized .
13997	Add parameters to request
13998	Fetch the message .
13999	Encrypts a message
14000	Decrypt a message
14001	Decrypt an encrypted value
14002	Encrypts an object
14003	Decrypt an object
14004	Return an option from the tag cache
14005	Init object properties
14006	Replace magic fields .
14007	Convert QueryBuilder to QueryBuilder
14008	Get rich text
14009	Creates html from rich text
14010	Converts a block into a HTML block .
14011	Return an instance without the specified cookie
14012	Send response .
14013	Validate the given status code .
