0	Get administrator role .
1	Get user .
2	Handle MenuDeleted Item .
3	Translate categories .
4	Get the highest order item .
5	Create table name .
6	Handle the add menu item .
7	Update table .
8	Update the table
9	Gets the diff of the renamed columns
10	Gets the diff between this table and renamed indexes
11	Get renamed columns
12	Get renamed indexes
13	Retrieves a thumbnail
14	Get image thumbnail
15	Determine if the user can edit the roles .
16	Get the dimmer classes .
17	Prepare menu translations
18	Save changes .
19	Determine if the current user is read .
20	Show the form for creating a new table .
21	Store New Bread
22	Show the form for editing a table .
23	Update the data type .
24	Destroy a data type .
25	Adds a new relationship .
26	Get the relationship field .
27	Handle a crypt command
28	Stores a new platform .
29	Edit table .
30	Update database table .
31	Display table .
32	Destroy a table .
33	Builds the URL for sorting the results .
34	Display menu .
35	Get the translatable attribute
36	All translations .
37	Get translated attribute
38	Query scope to restrict a translation to a given field .
39	Save translations .
40	Describe table .
41	Handle the add permission .
42	Add storage symlink
43	Register the console commands .
44	Cleanup data .
45	Delete all thumbnails
46	Order data .
47	Retrieves relation data
48	Resolve relations .
49	Adds soft delete .
50	Validate the breadcrumbs .
51	Get fields with validation rules
52	Verify an ID token
53	Retrieves verification certificates from URL .
54	Retrieves the signed - on sign - on - on - fly .
55	Set PHP security constants
56	Fetch an access token by code
57	Fetch an access token from the API .
58	Fetches an access token with a refresh token .
59	Perform authentication .
60	Check if access token is expired
61	Verify the ID token
62	Adds a scope
63	Perform the http request .
64	Set authentication configuration
65	Create OAuth2 service
66	Determine if the given code should be retried .
67	Get the next chunk
68	Parse HTTP response
69	Get data type
70	Combine a list
71	Get the value for the given length .
72	Executes the given request .
73	Decodes an HTTP response .
74	Maps the data types
75	Convert to SimpleObject
76	Convert a value to a SimpleModel
77	Get mapped name
78	Check if array is associative array
79	Builds a new Google AuthHandler
80	Find configuration .
81	Define core constants
82	Set the model state .
83	Default error handler
84	Get the queries that should be executed .
85	Register global variables .
86	Returns an array of options
87	Adds an option to the current table .
88	Deletes an option from the database .
89	Add a placeholder
90	Set the default namespace .
91	Set the default controller .
92	Set default method .
93	Discover module routes
94	Set default constraint .
95	Get all routes
96	Returns an array of routes
97	Add a route to the collection .
98	Add a redirect
99	Check if the route is a redirect .
100	Get redirect code
101	Add a route to the collection .
102	Adds a new route collection to the collection .
103	Register an environment
104	Reverse route .
105	Determines the current subdomain
106	Reset default routes
107	PHP error handler
108	Shutdown error handler
109	Determine the view for the given exception .
110	Renders an exception .
111	Collect the variables for the exception .
112	Determine the exception status codes .
113	Describe the given bytes .
114	Highlight a PHP file
115	Checks if value is an alpha space
116	Checks if a string matches a regular expression
117	Check if an email is valid
118	Validate email addresses
119	Check if string is valid URL
120	Checks if a string is a valid date .
121	Creates an exception for a move failed request .
122	Validates a CC number
123	Checks if luhn is valid .
124	Moves a file .
125	Move an escaper
126	Move Kint .
127	Starts the session .
128	Configures the SID length
129	Initialize session variables
130	Set session data
131	Get user data
132	Push a value to an array .
133	Removes a value from the session .
134	Set Flash Data
135	Get flashdata
136	Mark data as flashdata
137	Get flash keys
138	Set temporary data
139	Get temporary data
140	Mark data as temporary
141	Unmark session data
142	Returns an array of temporary keys
143	Sets the current session cookie .
144	Checks if the given token is valid .
145	Guesses the mime type based on the extension
146	Guesses the extension based on the given type .
147	Redirects to the given url .
148	Redirects to a route
149	Redirects the user to the given code .
150	Set Flash Data
151	Runs the filter .
152	Initialize the filter .
153	Enable a filter .
154	Get arguments
155	Format an object
156	Send the log to the client
157	Detects the current locale .
158	Set the current locale .
159	Check if the current request is secure
160	Get JSON body .
161	Fetch data from database .
162	Get a single post
163	Get a single post
164	Get a single post
165	Get a single cookie
166	Returns the collection of files
167	Get a single file
168	Detects the URI of the given protocol .
169	Detect the path
170	Returns the negotiation for the given type .
171	Parse request URI
172	Builds the DSN
173	Returns a formatter instance .
174	Before request is executed .
175	After a response is executed .
176	Resize the image
177	Crop the image
178	Get version of imageMagick
179	Get resource path
180	Add a foreign key
181	Drops a foreign key .
182	Format an unsigned attribute .
183	Set the default value for a field .
184	Process primary keys
185	Process foreign keys
186	Set the locale .
187	Get a single line from a translation file .
188	Format the message .
189	Require a file
190	Add a base uri option
191	Add an image src option
192	Add a mediaSrc option
193	Add an option to the manifest
194	Add an object Src option
195	Add a plugin type
196	Add sandbox option
197	Add a script src option
198	Add a style src option
199	Add an option to the command .
200	Generate a nonce
201	Builds the headers .
202	Get the title .
203	Collects the logs .
204	Prepares the parameters .
205	Determine cell class .
206	Get result object
207	Get custom result object
208	Get result array
209	Get result object
210	Get row object
211	Get custom row object
212	Returns the current row as an array
213	Get row object
214	Set row data
215	Get first row
216	Returns the last row
217	Get next row
218	Get an unbuffered row
219	Check if the request matches the accepted values .
220	Checks if the provided parameters matches the acceptable ones .
221	Runs the application
222	Show CLI header
223	Renders links .
224	Make links .
225	Stores a group .
226	Set the uri path
227	Returns the page count .
228	Get current page .
229	Checks if user has more than group
230	Get the last page .
231	Get current page URI
232	Returns the next page URI
233	Returns the previous page URI .
234	Get per page .
235	Returns an array of details for a pagination group
236	Ensure the group is valid .
237	Returns the number of years in the current date .
238	Returns the number of months in the current date .
239	Returns the number of weeks in the current date .
240	Returns the number of days in the current date .
241	Returns the number of hours in the current date .
242	Returns the number of minutes in the current date .
243	Returns the number of seconds .
244	Humanize the current date .
245	Load a database connection .
246	Load the Forge object
247	Checks if a property has changed .
248	Maps a property to a datamapap property .
249	Mutate a DateTime instance .
250	Cast value to JSON format
251	Determine if the given alias should be discovered .
252	Find all records
253	Get first row
254	Save data to database
255	Convert class to array
256	Inserts a record into the database .
257	Inserts a batch of rows .
258	Get the model instance .
259	Protects the given data
260	Clean validation rules
261	Get validation rules
262	Returns the number of results .
263	Set authentication .
264	Set the form parameters
265	Parse options .
266	Get the HTTP method .
267	Send the request
268	Applies request headers
269	Set response headers
270	Send the request
271	Updates the current version of the target version .
272	Find migrations .
273	Check migrations .
274	Get the history
275	Get migration name .
276	Returns the version of the database .
277	Add migration history
278	Remove migration history
279	Ensure the table exists
280	Runs a check .
281	Set request data
282	Set a single validation rule
283	Get rule group configuration
284	Set rule group
285	Loads rule sets .
286	Set validation error .
287	Get error message
288	Splits the rules into an array of rules .
289	Reset validation .
290	Convert array to XML
291	Clean file names .
292	Set the URI
293	Get user info
294	Get query string
295	Returns a URI segment
296	Set a URI segment
297	Creates a URI string
298	Set the authority .
299	Set the scheme
300	Set the port
301	Set path .
302	Refresh path .
303	Set query string
304	Decodes a value
305	Add query .
306	Keep the current query .
307	Filters the path .
308	Applies parts to the URL
309	Resolves a URI to an absolute URI .
310	Merge the URI path .
311	Removes dot segments
312	Append the value .
313	Prepend a value to the beginning of the list .
314	Get the previous page .
315	Returns the next page number .
316	Get the first page
317	Returns the last page number .
318	Returns the current page URI .
319	Starts a timer .
320	Stops a timer .
321	Get elapsed time
322	Returns an array of timers
323	Adds a table alias to the query .
324	Perform query .
325	Perform a simple query .
326	Get a database table instance .
327	Prepare a query for execution
328	Escapes identifiers .
329	Call a function .
330	Lists all tables in the database .
331	Check if a table exists .
332	Check if a field exists
333	Get field data
334	Get index data
335	Get foreign key data
336	Get env value
337	Registers the properties .
338	Get an item from the cache .
339	Writes data to a file .
340	Get information about a directory
341	Get file info
342	Initialize kernel .
343	Runs the route collection .
344	Handle the request .
345	Starts the benchmark .
346	Get response object
347	Force security access .
348	Display page cache
349	Cache page .
350	Generate unique cache name
351	Display benchmark metrics .
352	Tries to route .
353	Start the controller class .
354	Create the controller
355	Run the controller class .
356	Gathers the output from the cache .
357	Stores the previous URL
358	Hook the request method .
359	Get a cache handler
360	Create an alias from a table name .
361	Where not in clause .
362	Where in statement
363	Compile a like statement .
364	Start the start of a group .
365	End group .
366	Sets the offset .
367	Set the value of a key .
368	Get the compiled select query .
369	Compile the final query .
370	Counts number of rows
371	Count all results
372	Generate INSERT statement
373	Returns an insert query
374	Compiles an update query
375	Compiles a DELETE query .
376	Decrement column value
377	Compile the select statement .
378	Compile the where having clause .
379	Compile the groupBy expression .
380	Compile the orderBy statement .
381	Get operator .
382	Renders the timeline .
383	Collect the timeline data .
384	Collect variable data
385	Rounds the increment value .
386	Copy image .
387	Get image properties
388	Releases the session lock
389	Attach the template to the response .
390	Prepare template .
391	Fetch an object from the database
392	Make columns .
393	Clears the table .
394	Sets fields from DB result
395	Set data from an array
396	Sets the path to the file .
397	Get error string
398	Stores the uploaded file
399	Returns true if the file size is greater than the specified parameter .
400	Determines if a file is an image .
401	Check if a file is in a mime type
402	Validates the maximum image dimensions
403	Fetch global values
404	Populate global variables
405	Runs the application
406	Initialize from table
407	Run the migration
408	Modify column .
409	Create table .
410	Copy data to new table
411	Format fields .
412	Format the keys .
413	Drop indexes .
414	Set CSRF cookie
415	Set CSRF hash
416	Returns the current time
417	Parses a time string into a Time instance .
418	Returns a new DateTime instance .
419	Returns an instance of yesterday .
420	Returns a tomorrow date instance .
421	Create a Carbon instance from a date .
422	Create a Carbon instance from a time string .
423	Factory method to create a new Time instance .
424	Creates a time object from the supplied format .
425	Create a time from a timestamp .
426	Returns a time instance .
427	Convert DateTime to DateTime
428	Returns the age of the user .
429	Get the daylight savings
430	Set the month value .
431	Set the day of the week .
432	Set the minute value .
433	Set the second - value
434	Set a time value
435	Set the timestamp
436	Checks if two times are equal .
437	Tells whether two DateTime are equal .
438	Returns a DateTime object based on a timezone
439	Generate JS matcher .
440	Convert a CSS string to a CSS string .
441	Convert string to UTF - 8
442	Converts a string from UTF - 8 to UTF - 8 .
443	Returns the uploaded file .
444	Create a new UploadedFile object from an array of values .
445	Returns the syntax for the value dot notation
446	Set binary .
447	Set file path
448	Returns the length of the file .
449	Sets the content type based on the mime type .
450	Get download filename
451	Get content disposition
452	Builds the headers
453	Send the body to the browser .
454	Send body by file path
455	remap method
456	Runs a command .
457	Create command list .
458	Create a new database connection
459	Get a seeder instance .
460	Check if params is all namespace .
461	Adds a test .
462	Run all tests .
463	Returns a formatted report
464	Set query .
465	Returns the query string .
466	Get start time
467	Returns the duration in seconds .
468	Set error .
469	Swaps two query strings .
470	Compile the bindings .
471	Loads the helpers .
472	Registers the SPL autoloader .
473	Add a namespace
474	Get namespace
475	Require a single file
476	Sanitizes a filename .
477	Discover Composer namespaces
478	Convert a date to a date precision
479	Create excerpt .
480	Sanitize the given value .
481	Resolve nested variables .
482	Set the database to use .
483	Executes a query and returns the number of results .
484	Prepare a SQL query
485	Returns an array of error messages
486	Executes a SQL query
487	Get field names
488	Get a cache instance .
489	Create a CLI request instance .
490	Create a curl request instance .
491	Create a honeypot instance .
492	Get a language instance .
493	Get logger instance .
494	Create a negotiator instance .
495	Returns a Parser instance .
496	Create an incoming request instance .
497	Get a response instance .
498	Create a RedirectResponse instance .
499	Create router instance .
500	Get the Security instance .
501	Get a URI instance .
502	Returns a validation instance .
503	Describe commands .
504	Pad a menu item .
505	Converts a ResultInterface object into a CSV representation .
506	Converts a result into an XML string .
507	Call a command .
508	Call the specified seeder .
509	Is a value in a list?
510	Checks if string is less than or equal
511	Check if the given data is required
512	Check if the given data is not present
513	Validates the request path
514	Set the current directory .
515	Set Request Method
516	Set the default controller
517	Get file size
518	Moves the file .
519	Get the full path to a destination file
520	Collects the number of queries .
521	Format the timeline data .
522	Locate the file for the given extension
523	Get class name
524	Searches for files in the given path .
525	Ensure the extension is valid .
526	Find fully qualified class name by path .
527	Finds the path for the given file .
528	Render a string .
529	Extract excerpt from string
530	Set the view data .
531	Set a variable .
532	Renders a section .
533	Include view .
534	Log performance data
535	Set the image to be uploaded .
536	Ensure the image resource exists
537	Resize the image .
538	Rotate image .
539	Flip the image .
540	Sets a text field .
541	Reverses the current alignment .
542	Get Exif data
543	Resize the image
544	Run the compiler .
545	Renders template string
546	Parse a pair of data .
547	Extract noparse blocks
548	Insert noparse blocks
549	Parse conditionals .
550	Set the right delimiter
551	Replace a single template
552	Determine if the given key should be escaped .
553	Add a plugin
554	Creates an image resource
555	Get a specific header
556	Check if header exists
557	Set header .
558	Removes a header .
559	Set HTTP protocol version
560	Get header name
561	Configures the session ID regex
562	Get the reason .
563	Set the link header
564	Set the Content - Type header
565	Get response body
566	Get XML body
567	Formats the response body
568	Set the cache control headers .
569	Send the response .
570	Send all headers
571	Set a cookie
572	Check if a cookie exists .
573	Get a single cookie
574	Delete a cookie
575	Send cookies .
576	Download a file
577	Get an instance of a class
578	Create a class
579	Get shared instance .
580	Get the Autoloader instance .
581	Get the file locator .
582	Reset all mocks .
583	Inject a mock
584	Discover services by name
585	Gets input from the console .
586	Prompt the user for input .
587	Validate the given value .
588	Prints text to STDOUT .
589	Write error message to STDERR
590	Wait for the given number of seconds .
591	Colorize text .
592	Wraps a string to a given number of lines .
593	Get an option value
594	Generate table data
595	Format the response
596	Return a failed response
597	Respond with created event
598	Respond with deleted data
599	Fail an unauthorized request .
600	Returns a failed server error response .
601	Redirects before the request is executed .
602	Initialize services .
603	Returns an array of event listeners
604	Removes a listener from an event .
605	Returns true if the referrer is a referrer
606	Set platform .
607	Set browser information
608	Set robots .
609	Set mobile devices
610	Protected set attribute type
611	Initialize the config
612	Display plain text
613	Initialize the qrcode style
614	Decode content .
615	Get heartbeat time
616	Handle check sync
617	Logs a message .
618	Retrieves the UUID
619	Show qr code .
620	Wait for login
621	Get login info
622	Save the server .
623	Before init event
624	After init success callback
625	Send status notification to server
626	Force download function
627	Get resource for download
628	Auto download action
629	Check sync
630	Synchronize the server
631	Generate sync key
632	Logs a string .
633	Log message .
634	Send a smtp message
635	Fetch all contacts
636	Stores a member list .
637	Fetches group members
638	Stores the members in the database .
639	Determine if the exception should be handled .
640	Throw a fatal exception .
641	Validates the key .
642	Splits a JWT string into an array of dots .
643	Parse the HTTP header .
644	Parse the claims
645	Parse the signature .
646	Negotiates the language .
647	Extract matches from accepted languages
648	Cache routes per locale .
649	Build route cache file .
650	Register Laravel s bindings .
651	Register the commands .
652	Set the current locale
653	Get url from route name
654	Returns the supported locales .
655	Get the list of locales ordered by priority .
656	Get current locale direction
657	Get current locale .
658	Returns the locale of the current locale
659	Checks if the given locale is in supported locales .
660	Get route name from path .
661	Find translated route by path
662	Find translated route by URL .
663	Create a Url from a URI .
664	Normalize attributes .
665	Load cached routes
666	Makes the route path for the locale .
667	Encode a message set .
668	Encode a partition .
669	Encode a topic .
670	Produces a topic pair
671	Produces a partition pair
672	Decode message set
673	Decode a message .
674	Creates a socket client .
675	Select a stream .
676	Unpacks a binary string into an array of bytes .
677	Check length of bytes
678	Returns true if the system is a little - endian system .
679	Get API version
680	Get API text .
681	Add before route
682	Add a route to the collection .
683	Mount a route
684	Returns the request method
685	Get server base path
686	Add a new route to the collection .
687	Get the route for the given request .
688	Returns the current route
689	Returns true if the url matches the pattern
690	Runs a filter .
691	Get event by name
692	Clear all events
693	Applies a filter to the output .
694	Execute a callback
695	Call a function
696	Invoke a method
697	Initializes the request object
698	Returns the request body
699	Get HTTP method
700	Returns the IP address of the proxy
701	Parse a query string into an array of parameters .
702	Set or get the status
703	Setter for header .
704	Set response headers
705	Send the response .
706	Initializes the application .
707	Handles PHP errors .
708	Handle an exception
709	Registers a new route .
710	Register a framework method .
711	Get a value from the view
712	Clear a variable
713	Start the application .
714	Stop the response
715	Adds a new route to the router .
716	Halt the response
717	Send error message
718	Redirects to the given URL .
719	json response .
720	Send jsonp request
721	Send an ETag
722	The last modified time .
723	Registers a class .
724	Load an instance of the class
725	Get an instance by name
726	Creates new instance of class
727	Loads a class .
728	Adds a directory
729	Fetch data from a file
730	Get the path to a file
731	Checks if a graph is cyclic .
732	Returns the average height of a node .
733	Collapse an array into a recursive array .
734	Fetch files from the given paths .
735	Traverse the tree node .
736	Get root nodes
737	Check if composer lock is installed .
738	Advances the current iteration .
739	Determine if we have ANSI .
740	Process no parameters .
741	Process a token .
742	Initializes the class
743	Add a fixable message .
744	Merge custom arrays
745	Returns the next character on the line .
746	Returns true if the given token is assignment .
747	Returns true if the current token is a token .
748	Is the token sanitized?
749	Checks if the code is cast to a safe code .
750	Returns an array of access keys
751	Get an array key
752	Checks if the current token is a comparison .
753	Check if this function is in an array comparison
754	Returns the type of the given function .
755	Returns an array of interpolated variables
756	Checks if a function call has a function call .
757	Returns the number of parameters for a function call .
758	Get a function call parameter
759	Find the closing of an array .
760	Determine the namespace of the given token .
761	Returns the namespace name of the declared namespace .
762	Returns true if the current token is a class constant .
763	Checks if the given token is a class property .
764	Validate a direct scopes
765	Prepare the regular expression .
766	Transform string .
767	Transform a string into a complex string .
768	Returns an array of deprecated groups
769	Process an excerpt string .
770	Processes the list of parameters .
771	Retrieves the mispelled words
772	Executes the detection limit callback
773	Set config data
774	Get tab width
775	Process statement .
776	Add an error to the stack .
777	Setup groups .
778	Check if the current token is a target token .
779	Checks if the current token matches the given token .
780	Process variable variable .
781	Checks if a variable is prefixed or whitelisted .
782	Validates the prefixes .
783	Record potential prefixes .
784	Setup groups cache
785	Validates the alignment items .
786	Determines if a raw data stream is stream .
787	Process a variable in a string .
788	Merge the whitelisted properties
789	ignore a token
790	Get indentation size
791	Returns indentation string
792	Adds an array alignment error
793	Fix assignment error .
794	Determines if a string is safe
795	Compare two plural arguments .
796	Checks the text in the context .
797	Checks if a token is a target token .
798	Checks if the current token matches the given token .
799	Determine the class name of a class .
800	Register the assignment tokens .
801	Executes the serializer .
802	Reserves a message to the queue .
803	Close the broker .
804	Validates the namespace .
805	Push a job onto the queue .
806	Listen to the queue .
807	Execute a job .
808	Handles a message .
809	Run the task .
810	Reserve the lock .
811	Marks all expired data .
812	Before push event .
813	Delete a channel
814	Run worker .
815	Handles a message .
816	Initializes the application .
817	Returns true if the process can continue .
818	Reserve a job .
819	Delete a Job .
820	Parse the current node type
821	Parse get elements
822	Parse inner tree
823	Reads the text of this node .
824	Parse the current element .
825	Parse the attributes
826	Returns the deserializer for the given element name .
827	Push a context onto the stack .
828	Restore the current context .
829	Get writer .
830	Parse an XML string .
831	Returns the value of the given root element .
832	Writes a value to a root element .
833	Maps the value object to a value object .
834	Writes a value object .
835	Parses a string into an array .
836	Deserialize an XML reader .
837	Deserialize an XML reader .
838	Initializes an adhoc element .
839	Write an element
840	Write an array of attributes
841	Write an attribute
842	Get the relations for a model .
843	Validates the job name .
844	Validate the command .
845	Create crontab job
846	Returns the scope of the current context .
847	Finish the message
848	Returns current SpanContext
849	Convert the current context to a SpanContext .
850	Starts a timer .
851	Set the name of the trace .
852	Annotate a value .
853	Set the remote endpoint .
854	Generate a new token .
855	Get value from storage .
856	Get last key pair
857	Enforce the storage limit .
858	Create a sanitizerInterface instance .
859	Set the attributes of a tag .
860	Get the value of an attribute .
861	Process default entity configuration
862	Process the default menu item .
863	Returns the type name of the given type
864	Get form type options
865	Initializes the entity .
866	Autocomplete action
867	List entities .
868	Edit an entity
869	Finds and displays an entity .
870	Displays a form to create a new entity .
871	Deletes an entity .
872	Search action .
873	Redirects to a batch action .
874	Updates an entity property .
875	Find all entities
876	Create list query builder
877	Custom finder method .
878	Creates a query builder for the given entity class .
879	Create an entity form builder instance .
880	Get form options
881	Creates an entity form .
882	Creates a form to delete an entity .
883	Redirects to backend homepage .
884	Kernel controller action
885	Normalize menu config
886	Get entity configuration
887	Check if an action is enabled .
888	Get action configuration .
889	Translate a message .
890	Creates a Pagerfanta instance .
891	Process configuration .
892	Initialize the request .
893	Finds the current item .
894	Get attributes normalizer .
895	Process the entity properties metadata .
896	Get default actions
897	Handles errors .
898	Finds an entity
899	Process config files
900	Normalize the entity configuration .
901	Returns the unique entity name .
902	Normalize view config
903	Merge the parent config into one .
904	Create list query builder
905	Determines if the given field is a Doctrine association .
906	Process field config
907	Get excluded field names
908	Filters a list of fields based on the excluded fields .
909	Run a command .
910	Delete ORDER Check
911	Determine the position of an entry .
912	Checks the length of a string .
913	Read length of data
914	Build progress bar .
915	Logs an exception .
916	Convert configuration to types
917	Get configuration array
918	Get all providers
919	Returns all providers registered for the given index .
920	Get provider for given type
921	Sets sorting field .
922	Build index mapping .
923	Build index template mapping .
924	Builds the type mapping .
925	Fix properties .
926	Log query .
927	Transforms an object to an elastica document .
928	Get total hits .
929	Get Eloquent result set .
930	Delete an existing template
931	Returns the index .
932	Returns the persister for the given type
933	Populate an index .
934	Refresh index .
935	Transforms an object .
936	Transforms nested objects .
937	Normalize a value .
938	Transforms an object into a document .
939	Get entity query builder .
940	Returns an index template by name .
941	Reset all indexes .
942	Reset an index .
943	Reset index type .
944	Switch an index alias
945	Loads the index finder .
946	Loads type persistence integration .
947	Loads the model to model converter .
948	Loads the object persister configuration .
949	Loads the type provider .
950	Loads the type listener .
951	Get Doctrine events for the given type .
952	Loads the type finder .
953	Load index manager .
954	Loads index template manager .
955	Loads the driver configuration .
956	Load serializer .
957	Creates default manager alias .
958	Returns the dynamic template node .
959	Returns the type node .
960	Get id node
961	Returns source node .
962	Returns the routing node .
963	Get parent node .
964	Get all nodes .
965	Adds the indexes configuration .
966	Adds the index templates section .
967	Transforms an array of Elastica objects
968	Checks if an object is indexable
969	Builds the callback for the given type
970	Build an expression callback
971	Get the callback for the given object type .
972	Returns a string representation of an expression .
973	Set root name
974	Switch an index alias
975	Build an alias update request
976	Cleans up the deletion of the index .
977	Close an index .
978	Returns an array of aliased indexes .
979	Logs query .
980	Post persist event handler .
981	Post update event handler .
982	Pre remove event handler .
983	Persists the scheduled objects .
984	Schedule an object for deletion .
985	Determine if the given object is indexable .
986	Get entity repository
987	Transforms an object into a Document object .
988	Get repository by type name
989	Make a new client instance .
990	Register the hashids factory .
991	Verify Hash
992	Creates a Guzzle client .
993	Adds a cookie to the collection .
994	Add cookies to the request .
995	Clear expired cookies .
996	Generate unique hash
997	Add a header to the response .
998	Parse HTTP headers .
999	Handle the incoming request .
1000	Set the options
1001	Get client nonce .
1002	Generate SHA1 hash
1003	Generate the SHA2 hash of the entity .
1004	Generate HTTP header
1005	Generate the response
1006	Get the authentication for the current user
1007	Generate md5 hash
1008	Parse authentication info header .
1009	Parses an array of name - value pairs .
1010	Parse wws authentication header
1011	Set MD5 middleware .
1012	Set the request method .
1013	Unquote a string
1014	Add a new route
1015	Convert an array of headers to Buzz headers
1016	Converts an array of PSR - 7 headers to PSR - 0 .
1017	Sends an asynchronous request to the queue .
1018	Send a request to the queue .
1019	Runs the request .
1020	Initializes a cURL multi handle .
1021	Reset the cache .
1022	Checks if the request matches the UriInterface .
1023	Check if the cookie has expired .
1024	Checks if the cookie domain matches the cookie domain .
1025	Checks if the path matches the given path .
1026	Set the cookie header from the cookie header .
1027	Releases a curl handle .
1028	Prepare the response builder .
1029	Set Curl Options from Request
1030	Send a request to the client .
1031	Adds a new entry .
1032	Creates an image
1033	Add cover .
1034	Add TOC .
1035	Create the pdf
1036	Ensure that the given input is an url or file .
1037	Creates a Guzzle HTTP client .
1038	Create middleware stack .
1039	Create a PSR - 7 request
1040	Send the request asynchronously .
1041	Generate request options
1042	Sends a context asynchronously .
1043	Throws an exception if the response is expected .
1044	Adds a post parameter .
1045	Add metadata headers .
1046	Add location header to response
1047	Validates an array of properties
1048	Returns the value of a property .
1049	Set a property value
1050	Set a property .
1051	Add a property
1052	Checks if the property is valid
1053	Creates a new GetTableResult object
1054	Computes the signature of the request .
1055	Generate the authorization header .
1056	Computes canonicalized headers .
1057	Computes canonicalized resource for table .
1058	Compute canonicalized resource
1059	Serialize this object to XML .
1060	Parse an XML string into an array
1061	Adds a signed identifier .
1062	Remove a signed identifier
1063	Set the list of operations .
1064	Adds a batch operation .
1065	Adds an entity to a table .
1066	Adds a delete entity .
1067	Creates a new CopyFileResult object .
1068	Create a new instance from an array of timestamps
1069	Create queue message from parsed response .
1070	Create queue message from parsed response .
1071	Initializes the application .
1072	Returns the development storage account .
1073	Get development storage account
1074	Get service endpoint
1075	Create storage service settings
1076	Creates a storage account from a serialized connection string .
1077	Creates a StorageServiceSettings object from a connection string .
1078	Encode multipart data
1079	Parse multipart multipart response .
1080	Create ListSharesResult from parsed response .
1081	Sets the list of shares .
1082	Retry the request .
1083	Applies AND filter
1084	Applies the OR filter to the supplied value .
1085	Applies equality filter
1086	Applies a BETWEEN filter .
1087	Applies a Geometry filter to a Geometry object
1088	Applies gt filter to left and right
1089	Applies BETWEEN operator
1090	Applies BETWE filter
1091	Sets the location .
1092	Unserialize the given serialized string
1093	Create queue message from parsed response .
1094	Creates a GetEntityResult object .
1095	Creates the contexts for the given operations .
1096	Returns the operation context for the given entity type .
1097	Creates the request body for batch operations .
1098	Constructs a DELETE entity context for the given row key .
1099	Constructs a put or merge entity
1100	Constructs a new EntityContext
1101	Returns entity path
1102	Performs a PUT or DELETE operation .
1103	Adds an optional query parameter to the query .
1104	Encode an array of values .
1105	Query the current table asynchronously .
1106	Creates a new table .
1107	Creates a new table asynchronously .
1108	Get table asynchronously
1109	Get table asynchronously .
1110	Deletes a table .
1111	DELETE a table asynchronously
1112	Query a table asynchronously
1113	Insert or merge an entity
1114	Insert or merge an entity in a table .
1115	Insert or replace an entity .
1116	Insert or replace an entity in a table .
1117	Update an entity
1118	Update an Entity asynchronously
1119	Merge an entity
1120	Merge an entity asynchronously .
1121	Deletes an entity .
1122	Sends a DELETE query asynchronously .
1123	Get Entity asynchronously
1124	Gets an entity asynchronously
1125	Performs a batch operation .
1126	Perform a batch async operation .
1127	Create ListDirectoriesResult from parsed response .
1128	Sets the directories .
1129	Set the files .
1130	Creates a Directory instance from parsed response body .
1131	Create new EntityResult
1132	Set query parameters
1133	Set status codes .
1134	Removes a header .
1135	Adds a history entry to the log .
1136	Appends a new entry to the path .
1137	Creates a new QueryTables object .
1138	Create queue message from parsed response .
1139	Sets the queue messages .
1140	Initialize default source
1141	Checks if the given hostname is valid
1142	Checks if the URI is valid
1143	Check if method exists
1144	Checks if the value is a date string .
1145	Checks if the given key exists in the array .
1146	Get range string
1147	Lists queued queues .
1148	Clear messages in queue .
1149	Creates a message in the queue .
1150	Creates a message asynchronously .
1151	Creates a queue asynchronously
1152	Creates a new queue asynchronously .
1153	Deletes a message from the queue .
1154	DELETE message async
1155	Delete a queue
1156	Sends a DELETE request asynchronously
1157	Get queue metadata .
1158	Get metadata asynchronously .
1159	Lists all messages in a queue .
1160	Lists messages asynchronously .
1161	Peek messages async
1162	Peeks messages asynchronously
1163	Generate a signed shared access token .
1164	Validates a signed service
1165	Validates the signed resource type .
1166	Validates the signed permissions .
1167	Validate the signed protocol .
1168	Sanitize string and sanitize it
1169	Generate canonical resource .
1170	Parse the error message
1171	Get request ID
1172	Returns the date of the response .
1173	Set the middlewares .
1174	Validate the given middleware .
1175	Parse a connection string
1176	Creates an exception .
1177	Extract key from string
1178	Extracts a string from a string .
1179	Skip operator character
1180	Create a ShareAACL object .
1181	Handles request headers .
1182	Creates a setting with the given predicate .
1183	Creates a new setting .
1184	Check if the given settings matches the configured settings .
1185	Set next row key
1186	Sets the next partition key .
1187	Process type .
1188	Validate an Edm value
1189	Serialize a value .
1190	Serialize a query value
1191	Unserialize a query value
1192	Creates a ServiceProperties object from parsed response body .
1193	Get the CORS array
1194	Initialize environment sources
1195	Parse table entries
1196	Convert an entity to an array
1197	Parse the raw response body .
1198	Set start date .
1199	Validate a permission
1200	Creates a path for a share .
1201	Gets the share properties asynchronously .
1202	Sets the share properties asynchronously .
1203	Lists all shares asynchronously .
1204	Create a share
1205	Creates a share asynchronously .
1206	Delete a share
1207	Get Share Properties asynchronously .
1208	Sets the share properties asynchronously .
1209	Sets the share properties asynchronously .
1210	Get share metadata asynchronously .
1211	Sets a share metadata asynchronously .
1212	Sets the share metadata asynchronously .
1213	Set share ACL
1214	Sets a share ACL .
1215	Lists all directories and files in a path .
1216	Lists all files and files in a directory .
1217	Creates a new directory .
1218	Creates a new directory asynchronously .
1219	Deletes a directory .
1220	Get the contents of a directory asynchronously .
1221	Get the contents of a directory asynchronously .
1222	Get the metadata for a directory .
1223	Sets the directory metadata .
1224	Creates a new file .
1225	Creates a file asynchronously .
1226	Deletes a file in the shared memory .
1227	Sends a DELETE request to the specified path .
1228	Get a file asynchronously .
1229	Get a file asynchronously .
1230	Get file properties .
1231	Get file properties asynchronously .
1232	Set file properties .
1233	Set file properties asynchronously .
1234	Get file metadata .
1235	Sets a file metadata asynchronously .
1236	Sends a file metadata asynchronously .
1237	Puts a file in a range .
1238	Sends a file range asynchronously .
1239	Creates a file from a content .
1240	Create a file from a content stream .
1241	Clear a range of files in a path .
1242	Clear a file range asynchronously .
1243	Lists all files in a range .
1244	Lists the range for a file .
1245	Aborts a copy .
1246	Aborts a copy asynchronously
1247	Set the type of the batch operation .
1248	Adds a parameter to a batch operation .
1249	Constructs the response object from the given body .
1250	Compares two Content Ids .
1251	Create a new BatchResult
1252	Gets the attributes of the target object .
1253	Serialize an array into XML
1254	Creates a new Key from parsed response .
1255	Retrieves the result asynchronously .
1256	Sets the service properties asynchronously .
1257	Sends the given service properties asynchronously .
1258	Get service stats
1259	Create ListQueuesResult from parsed response .
1260	Set the queue .
1261	Try to get the secondary endpoint from the URI .
1262	Serialize an array
1263	Converts an object to a boolean value .
1264	Converts a date - time string to a DateTime object
1265	Converts a date time to ISO 8601 format
1266	Convert a value to a DateTimeZone .
1267	Convert a number to decimal
1268	Returns true if all of the contents are not empty .
1269	Appends a string to the end of the string .
1270	Checks to see if the request was sent to secondary
1271	Extracts the location from the headers .
1272	Calculate content md5
1273	Validates the resource type
1274	Creates a new UpdateMessageResult object .
1275	Creates a new Product Collection .
1276	Create a retry decision for a given type .
1277	Attempts to retry the given status code .
1278	Adds optional query parameter .
1279	Adds an optional header .
1280	Creates a GetFileResult object from the given headers .
1281	Serialize headers .
1282	Serialize exception .
1283	Create a queue message from parsed response .
1284	Creates a new insert entity .
1285	Creates a new QueryEntitiesResult .
1286	Format headers .
1287	Creates a File object from parsed response body .
1288	Applies middleware to all registered middlewares
1289	Get available includes .
1290	Call include method .
1291	Resolve scope includes .
1292	Set error message
1293	Set view data
1294	Set the serializer .
1295	Get the error output .
1296	Set the paginator resource .
1297	Set the cursor .
1298	Set paginator .
1299	Set the eager loaded relations .
1300	Adds an array of relations to the query .
1301	Set the query to only include fields .
1302	Set the serializer .
1303	Transform the resource .
1304	Prepare relations .
1305	Eager load relations
1306	Get paginator instance .
1307	Returns the cursor for the current cursor .
1308	Merge included data
1309	Registers a set of transformations .
1310	Resolve the given data .
1311	Resolve a transformable item .
1312	Resolve transformer .
1313	Render an exception .
1314	Make an error instance
1315	Make a serializer instance .
1316	Parse resource options .
1317	Parse fieldsets .
1318	Parse fieldset .
1319	Resolve child includes .
1320	Register a new error
1321	Resolve error code
1322	Cleans an array of parameters
1323	Bind the transformer to the transformer .
1324	Resolve the transformer .
1325	Resolve a transformer .
1326	Register Laravel bindings .
1327	Register Lumen bindings .
1328	Decorate response factory .
1329	Register Serializer bindings .
1330	Register the error bindings .
1331	Register fractal bindings .
1332	Register the transformer bindings .
1333	Register transformations bindings .
1334	Boot the Laravel application .
1335	Set collection data
1336	Format an error response
1337	Get the relations for the request .
1338	Get default relations .
1339	Extract relations .
1340	Extracts the relations from the given identifier .
1341	Wrap nested relations .
1342	Applies query constraints .
1343	Resolve query constraint .
1344	Resolve relation method .
1345	Get the mapped transformers .
1346	Create a resource instance .
1347	Include a resource
1348	Include a resource from a model .
1349	Determine if the given data should be cached .
1350	Make a new resource instance .
1351	Makes a transformer from a resource .
1352	Instantiates a resource .
1353	Determine if the given data should be created .
1354	Resolve resource key .
1355	Set the decorator
1356	Return a json response .
1357	Normalize the given data .
1358	Normalize relation .
1359	Set the response builder .
1360	Convert an exception to an array .
1361	Convert an exception to a valid exception .
1362	Renders the response .
1363	Create a new transformer builder instance .
1364	Configures the terminal .
1365	Adds items to the list .
1366	Sets the selected items
1367	Select first item
1368	Adds custom control mappings .
1369	Removes custom control mappings .
1370	Display current control
1371	Returns the selected item .
1372	Execute current item
1373	Redraw the terminal .
1374	Draws the menu
1375	Draws a single menu item .
1376	Closes the menu .
1377	Set default selected item
1378	Returns true if the item can be selected
1379	Set the selected item index .
1380	Returns the selected item .
1381	Wordwrap a string
1382	Generate the color set code
1383	Calculate the content width
1384	Get right padding
1385	Set border color
1386	Display the menu
1387	Calculate the coordinates
1388	Write an empty row .
1389	Writes text to the terminal .
1390	Set text .
1391	Calculate art length
1392	Displays this screen
1393	Get a connection instance .
1394	Make a new connection instance .
1395	Get Elasticsearch configuration .
1396	Convert the curl body to a string
1397	Check if a key is set
1398	Add arguments to the command line .
1399	Set command line arguments
1400	Set the options
1401	Add rules .
1402	Convert options to string .
1403	Convert options to an array
1404	Convert options to JSON .
1405	Convert options to XML .
1406	Get the value of an option
1407	Gets the usage message .
1408	Sets the rules for the given alias map .
1409	Set help .
1410	Parse command line arguments
1411	parse short option cluster
1412	Parse single option
1413	Adds the rules for the rules
1414	Add Zend_Zend_Mode to Zend_Config
1415	Generates the OAuth header for the request .
1416	Returns the base string for the given URI .
1417	Prepare the HTTP method .
1418	Set nonce .
1419	Append OAuth parameters to the request .
1420	Get string representation of query
1421	Creates a new Curl HTTP client .
1422	Returns the location of the logging endpoint .
1423	Logs requests to Service Platform .
1424	Check if an operation is allowed
1425	Prepare reflection data
1426	Convert to XML
1427	Copy file to public directory
1428	Cast an object to a string
1429	Reads configuration from xml file
1430	Initializes the rules for the given XML object .
1431	Populate a SimpleXMLElement
1432	Initializes the settings for the OAuth2 configuration .
1433	Initialize request and compression format
1434	This method is used to set the base url and log it to the service .
1435	Get Entity by key
1436	Check if string is valid xml
1437	Verify Configuration
1438	Load webhooks class names and return them as array
1439	Checks if the given class name is valid for the given class name .
1440	Returns an array of options
1441	Validate an url
1442	Adds a function to the SoapServer
1443	Setter for class
1444	Set SOAP server object
1445	Returns an array of functions
1446	Set the persistence mode
1447	Get SoapServer instance
1448	Handle the SOAP request
1449	Register an exception for a class .
1450	Returns a fault instance
1451	Handle PHP errors .
1452	Get OAuth2 access token
1453	Get the authorization code URL
1454	Refresh an access token .
1455	Creates an OAuth2 migration to an OAuth2 migration .
1456	Parse a new access token
1457	Checks if the token is empty .
1458	Generate the authorization header
1459	Builds the authorization header for the refresh token .
1460	Check the result
1461	Get error message from error code
1462	Convert an object to PHP entities
1463	Serialize an entity .
1464	Removes null properties
1465	Adds a complex type to the WSDL .
1466	Get the WSDL
1467	Adds bindings to the WSDL .
1468	Adds the portType to the WSDL .
1469	Add types to the WSDL
1470	Adds a list of operations to the WSDL .
1471	Adds port operations
1472	Returns true if the target type is a local type .
1473	Adds services to the WSDL .
1474	Get target Nodes from xpath .
1475	Returns an array of namespace namespaces
1476	Saves the classes
1477	Load includes .
1478	Returns XSD formatted XML .
1479	Save PHP files to a directory .
1480	Convert an XML string to php .
1481	Set the baseURL
1482	Returns the refresh token validation period in seconds .
1483	Returns the access token validation period in seconds .
1484	Gets the refresh token .
1485	Returns the access token .
1486	Update an access token
1487	Get POST body from an arbitrary entity
1488	Creates a PhpObject from an XML string .
1489	Parses an array of result objects .
1490	Sets the cURL option
1491	Returns the version of TLS .
1492	Handles an exception .
1493	Verify Object Type
1494	Generate object names
1495	Completes the given property
1496	Unmarshals an XML string .
1497	Returns the serializer for the service
1498	Returns the compressor configured for the service
1499	Get RequestLogger
1500	Connects to a composite type map
1501	Returns the default strategy .
1502	Returns the strategy of a type
1503	Adds a complex type
1504	Make reflection class .
1505	Populate the property comments
1506	Create an instance of the class
1507	Process values .
1508	Creates a new instance of the class .
1509	Checks if the given value is a Morhing entity .
1510	Processes a property value .
1511	Get entity from model
1512	Update service context settings for other services
1513	Setup the REST API client .
1514	Set log location .
1515	Set the minor version of the service
1516	Disables the log .
1517	Enable the Logger
1518	Set client name
1519	Configure the service
1520	Configure OAuth2 LoginHelper
1521	Updates the OAuth2 token .
1522	Setup Serializers
1523	Update an entity
1524	Adds an entity
1525	Deletes an entity
1526	Uploads an image to the server
1527	Send an email
1528	Perform a query and return the result
1529	Appends the pagination information to the query .
1530	Find all entities
1531	Cancels the given list of entities
1532	Execute an object serializer .
1533	Initializes the post request .
1534	Create request parameters
1535	Fix the tax service payload
1536	Returns the filename for an export file .
1537	Returns true if the given method is allowed for the given entity
1538	Creates a new batch
1539	Convert string to timestamp
1540	Checks if a timestamp is valid .
1541	Verify if the input has changed since .
1542	Get company info
1543	Get the rules associated with the QuickBooks API
1544	Get the access token from the given array .
1545	Get a refresh token from the settings array .
1546	Get redirect URL
1547	Saves the uploaded file
1548	Generate unique filename
1549	Generates an error message from an OAuth message .
1550	Parse the response into an array
1551	Is the error body in standard format?
1552	Set the response as an array
1553	Parse the response to an Intuit response
1554	Set fault handler
1555	Set response headers
1556	Set the content type
1557	Set intid value
1558	Get application menu
1559	Method to reconnects to the server
1560	Set the URI
1561	Sets the strategy for a complex type
1562	Add an operation node .
1563	Adds a documentation node .
1564	Add multiple types at once
1565	Adds a type .
1566	Convert to XML
1567	Add a schema type section .
1568	Configure an OAuth2Request based on the passed array
1569	Checks if the given settings are valid .
1570	Returns the base URL for this service
1571	Sets the internal representation of the response .
1572	Use the Serialization format
1573	Disable logging .
1574	Set new log location .
1575	Update the OAuth2 access token
1576	Get class properties
1577	Get result
1578	Set the uri
1579	Returns the uri
1580	Returns the request URI without parameters
1581	Set complex type strategy
1582	Set WSDL class
1583	Adds a function to the WSDL .
1584	Dump wsdl file
1585	Update the service context
1586	Send a PSR - 7 request
1587	Make an API call to the API .
1588	Returns the OAuth1 header for the request .
1589	Perform an Api2 call .
1590	Returns the Authorization header for the OAuth2 Access Token .
1591	Parse Log API Request to Log Platform
1592	Logs a request to the Log Platform API .
1593	Parse a string into a DOMDocument .
1594	Reset the compressor and serializer .
1595	Returns the destination URL for the request
1596	Appends the minor version URI to the request URI .
1597	Check HTTP Method
1598	Parse the given URL into an array of parameters .
1599	Get Accept Content - Type
1600	Convert a query into an array
1601	Verify Payload
1602	Encrypt the payload based on the token .
1603	Retrieves a single batch response
1604	Removes a batch request
1605	Convert array to message and code
1606	Generate an exception based on a fault
1607	Returns an array of options
1608	Set the SOAP client style
1609	Set the message encoding method
1610	Set proxy port
1611	Set the SSL certificate path
1612	Set stream context
1613	Set the user agent
1614	Perform SOAP request
1615	Initializes the SoapClient object
1616	Adds a SOAP input header
1617	Returns the list of functions
1618	Returns an array of type objects
1619	Gets the type name based on the nesting level
1620	Add an element to the WSDL .
1621	Prepare the WSDL schema
1622	Add a binding operation
1623	add port operation
1624	Create a reference element
1625	Create an element with a complex type
1626	Create Simple Element
1627	Resolve the namespace of a class .
1628	Parse doc comments
1629	Checks if an array is associative
1630	Get Webhooks event
1631	Verify payload .
1632	Checks if the key is in the list
1633	Returns the ReflectionMethod of a class method .
1634	Gets the type based on an array of data
1635	Get IPPID value
1636	Merge two objects
1637	Convert headers to an array
1638	This method is used to set the SSL protocol
1639	Convert header array to headers
1640	Adds a warning to the stack .
1641	Resolve from input .
1642	Set the name of the tag .
1643	Scope by name .
1644	Boot model trait .
1645	Attach the specified tags to the model .
1646	Untag a model .
1647	Add a single tag
1648	Remove one tag
1649	Determine if the given tag exists .
1650	Scope the query to only include the given tags .
1651	Query scope for tagged entities .
1652	Scope the query to only include the given tags .
1653	Query scope to include a foreign key .
1654	Rename a tag .
1655	Get popular tags .
1656	Get the fully qualified pivot pivot table name .
1657	Get the fully qualified foreign key name .
1658	Creates a new taggable alias .
1659	Build an array of tags
1660	Get tag model keys
1661	Make a list of tags for a model .
1662	Makes an array of tags from a model .
1663	Get all tags .
1664	Returns all tags that are not used .
1665	Rename tags .
1666	Get the fully qualified name of the tag table .
1667	Get the fully qualified table name .
1668	Saves the parameter data
1669	Builds the query string .
1670	Get payload for single parameter
1671	Get the payload for the request
1672	Adds an index to the given string .
1673	Get the debug response
1674	Get the endpoint
1675	Send hit .
1676	Get http client options
1677	Returns the URL for the prepared request .
1678	Checks if there are any required parameters
1679	Set the parameters to action .
1680	Set a single parameter .
1681	Adds an item to the collection .
1682	Get a parameter by method name .
1683	Extracts the index from method arguments .
1684	Returns the full class name for the given parameter class .
1685	Make a POST request to Google Analytics
1686	Parse the given options .
1687	Returns an array of readables
1688	Add a supported brand
1689	Set year parameter .
1690	Validates the credit card number .
1691	Get the number as an array
1692	Returns the supported brand
1693	Get a track by pattern .
1694	List first last name .
1695	Set the billing name .
1696	Set the shipping name .
1697	Get birthday .
1698	Set birthday .
1699	Initialize the helper
1700	Sets a parameter .
1701	Set credit card .
1702	Get the amount of this Money .
1703	Set the payment amount .
1704	Set the currency .
1705	Returns the numeric code of this currency .
1706	Get currency decimal places .
1707	Formats the given amount .
1708	Replace items in the collection .
1709	Validate redirect .
1710	CamelCase - > camelCase
1711	Validate luhn number
1712	Returns the gateway short name for the given gateway name .
1713	Returns the gateway class name .
1714	Gets the query builder for the given query builder .
1715	Gets the metadata for a property .
1716	Get Pager .
1717	Returns the parent alias for the given query builder .
1718	Add one or more IPs
1719	Find an instance by ID .
1720	Authenticate a user
1721	Set the parent application ID .
1722	Set credit card information
1723	Get credit card information
1724	Adds an object to the queue .
1725	Finds a Customer by ID .
1726	Set the signature
1727	Handles an error .
1728	Called when a user is logged in .
1729	Check if path is repeatable
1730	Check if path exists .
1731	Reorder paths .
1732	Call a function
1733	Call static method
1734	Finds a provider by name .
1735	Set the Client Application Id
1736	Get Bill Address
1737	Set PayPal method Id .
1738	Set payment method ID
1739	Generate field schema
1740	Returns the child at the given path
1741	Add child node at path
1742	Gets the children of this node .
1743	Removes an attribute
1744	Formats a node as an XML helper .
1745	Formats this item as an array
1746	helper function for recursion
1747	Writes XML to a file .
1748	Writes the data to a JSON file .
1749	Casts string truncations .
1750	Decode UTF - 8 string
1751	Parse a DSN string into an array .
1752	Extract requestID from XML
1753	Parse a request ID
1754	Checks if CIDR is valid
1755	Create a new user .
1756	Disable a user .
1757	Generate unique hash
1758	Checks if the given user has a specific quickbook ID .
1759	Initialize the driver .
1760	Initialize the driver .
1761	Returns an array of objects indexed by their value
1762	Lists all defined constants
1763	Escape a string
1764	Get the config for QuickBooks
1765	Query Quickbook API
1766	Adds a new customer request
1767	Add customer response
1768	Catch all errors
1769	Queues a user processing .
1770	Enqueue a user
1771	Enqueue a user .
1772	Queues the left of a user
1773	Callback for queue report
1774	Called when a ticket is processed .
1775	Returns an error log
1776	Get the last error .
1777	Handles authentication .
1778	Perform the authentication check .
1779	Logout action
1780	Creates a new auth
1781	Initialize hook .
1782	Check if hook is initialized
1783	Logs a message .
1784	Call a hook .
1785	Connect to an OAuth provider .
1786	Set default options
1787	Handle recurring events .
1788	Extracts the identifiers from an XML string .
1789	Extracts the status code from an XML string .
1790	Extracts the status message from an XML string .
1791	Call mapped function
1792	Call a hook
1793	Handle an error
1794	Enqueues a queue item
1795	Finds an item by name .
1796	Determine if a string starts with another string
1797	Query the database
1798	Extract the contents of a tag .
1799	Extract attributes from a tag
1800	Encode a string
1801	Decodes an XML string .
1802	Determine if the app is valid .
1803	Load OAuth data
1804	Handle an access token .
1805	Get the widget menu .
1806	Converts an XML string to an SQL schema .
1807	Transforms the given node .
1808	Set an item in the collection .
1809	Get an object from the registry
1810	Set the full name of the property .
1811	Set boolean type
1812	Set date type
1813	Get date type
1814	Remove an object from the collection
1815	Load the schema from the request
1816	Convert this object to XML .
1817	Checks if there is a database table .
1818	Adds an object to the collection .
1819	Get person name
1820	Set the user s name as first name .
1821	Get sql defaults .
1822	Return the status of the exception
1823	Delete a book .
1824	Reads a string .
1825	Loads an XML file
1826	Parse XML content .
1827	Formats the request as an XML string .
1828	Called when an eShop is not found
1829	Resolve the ticket .
1830	Write the config
1831	Read config data
1832	Create a new auth record
1833	Returns the default auth username
1834	Login a user
1835	Checks if the ticket is valid
1836	Return an error log
1837	Enqueue a user
1838	Recursively dequeue a user
1839	Queues the queue for a user
1840	Queues the queue processing for a user
1841	Get the left of a user
1842	Check if ticket was processed
1843	Logs a message .
1844	Perform an SQL query
1845	Returns an array of fields for a table
1846	Select rows from a table
1847	Update an object
1848	Enqueues interactive books
1849	Runs a recurring task
1850	Get the number of items in the queue .
1851	Get address
1852	Authenticate a user
1853	Finds a company by ID .
1854	Delete a customer credit card
1855	Perform the actual request .
1856	Signs on the server .
1857	Generate a unique ID for a transaction
1858	Refund a card
1859	Initialize the queue
1860	Factory method to create an adapter instance .
1861	Merge default values
1862	Set the HTTP headers
1863	Index action .
1864	Create request instance
1865	Handles a raw http request
1866	Apply the callback to each element
1867	Perform a charge .
1868	Retrieves a single charge
1869	Retrieves a transaction
1870	Refund a payment
1871	Stores a credit card
1872	Store a credit card from a token .
1873	Get a credit card
1874	Get a list of credit cards
1875	Delete a card
1876	Handle an error response
1877	Perform a http request .
1878	Map the given ID to the QuickBooks ID
1879	Converts a user ID to an application ID .
1880	Perform a request to add a new shipment
1881	Filter actions by priority
1882	Check if the required version is required .
1883	Returns a list of deleted queries
1884	List deleted queries
1885	Send a request to the txnish server
1886	Generate a response for a txn response
1887	Sends a request for sales receipt
1888	Adds a new job request to the queue .
1889	Builds the filter .
1890	Flush all groups .
1891	Flush cache by tags .
1892	Find a command by name or alias .
1893	Run the Composer script .
1894	Checks if an extension can be loaded .
1895	Checks if an extension can be loaded .
1896	Load the localconf configuration for an extension .
1897	Load extensions tables for extension
1898	Ensure that the installation is possible .
1899	Executes scheduled tasks .
1900	Executes a single task
1901	Migrates a set of statements .
1902	Lock the backend for editing editors
1903	Show lock for editors
1904	Create an admin user
1905	List all upgrades
1906	Generate the package states
1907	Fix the folder structure
1908	Setup extension setup .
1909	Execute an action with arguments .
1910	Create a new instance from the composer command line arguments .
1911	Create a new command runner based on the command line .
1912	Creates a Php3 binary .
1913	Executes a command .
1914	Handle an exception .
1915	Create an upgrade instance
1916	Wordwrap a string to a given maximum width .
1917	Send a request to the specified URL .
1918	Makes an absolute URL .
1919	Check extension constraints
1920	list all wizards
1921	Install a wizard
1922	Execute all commands
1923	Process an upgrade command
1924	Check extension compatibility
1925	Setup package extensions .
1926	Get the structure .
1927	Get extension structure
1928	Creates the structure of the given packages .
1929	Generate the XML for the given className
1930	Adds the attributes of the given type
1931	Add documentation .
1932	Resolve the command method name .
1933	Maps the request arguments to the controller arguments .
1934	Call command method .
1935	Creates a default logger .
1936	Get the short description of the command .
1937	Parses command definitions .
1938	Get the synopsis .
1939	Removes a sequence step .
1940	Invoke all steps .
1941	Invoke a step .
1942	Setup extensions .
1943	Setup the active packages .
1944	Remove active packages
1945	List all available packages
1946	Force cache tables .
1947	Handles an error
1948	Register Composer script .
1949	Ask a question
1950	Asks a question .
1951	Asks for confirmation .
1952	Asks for a hidden response .
1953	Asks and validates a question .
1954	Ask a question and validate it .
1955	Execute command .
1956	Write a log record
1957	Returns the number of updated updates .
1958	Adds an array of schema updates
1959	Adds errors to the schema update .
1960	Removes a configuration
1961	Show a configuration
1962	Show the active configuration
1963	Show a local configuration
1964	Set a new configuration value .
1965	After install hook .
1966	Add a flash message to the message queue .
1967	Safely copy a file or directory
1968	Generate an XSD schema
1969	Initializes the package management .
1970	Override implementation of class
1971	Register a class implementation .
1972	Set a local configuration value .
1973	Convert value to target type
1974	Returns the type of the given path
1975	Checks if target type is compatible
1976	Checks if a command is available .
1977	Configures the command definition .
1978	Execute command .
1979	Ensure that the current environment is required .
1980	Initializes the compatibility layer
1981	Handles command execution .
1982	Renders an exception .
1983	Output an exception .
1984	Output the exception trace
1985	Returns the file name of a given file name .
1986	Output an error message
1987	Execute the import command
1988	Execute a command in sub - process .
1989	Renders the schema update result .
1990	Renders the exported static data result .
1991	Update the schema .
1992	Builds the sequence .
1993	Builds an exclusive sequence
1994	Builds the standard runtime sequence .
1995	Flush all groups .
1996	Flush cache by tags
1997	List available cache groups
1998	Hydrate the values .
1999	Triggers the trace .
2000	Returns the number of files in the given regex .
2001	Convert data to JSON .
2002	Get transaction description
2003	Get the access token .
2004	Checks if the token has expired .
2005	Set start time
2006	Set the endTime parameter .
2007	Get all issues .
2008	Runs the scan .
2009	Normalize a path .
2010	Output a message with an error .
2011	Divide tokens by comma .
2012	Trims whitespace from an array of tokens .
2013	Call function usage checker
2014	Add a new record
2015	Returns true if the colors can be used .
2016	Get windows terminal size
2017	Attempt to autoload the given identifier .
2018	Locate file by class name
2019	Locate a function by its name
2020	Opens a stream .
2021	Retrieves information about a file .
2022	Compile a constant fetch statement .
2023	Compiles a class constant fetch .
2024	Returns an array of ReflectionClass instances for the given filename .
2025	Checks if a given line is contained in the start line .
2026	Returns all class names .
2027	Create a ReflectionProperty from a class name .
2028	Create a class from an instance .
2029	Returns an array of DocBlockType strings
2030	Returns an array of ReflectionType instances of the given type .
2031	Finds the identifier in the array .
2032	Create a class method from a class name and method name .
2033	Create an instance from a class instance .
2034	Create a parameter from a closure .
2035	Returns true if the node can be null .
2036	Returns the type of this node .
2037	Sets the parameter type .
2038	Returns all functions .
2039	Create a method from a class name .
2040	Create an instance from an instance .
2041	Returns the prototype of this method .
2042	Returns true if the class is a constructor .
2043	Export a class .
2044	Create a new class from a node .
2045	Get all methods of the class .
2046	Gets the list of supported methods
2047	Check if method exists
2048	Get a constant value
2049	Returns the constructor of the method .
2050	Returns the properties of the class .
2051	Returns the parent class .
2052	Get parent class names
2053	Gets traits used by this trait .
2054	Reflects the class for the named node .
2055	Checks if the current object is an instance of the class .
2056	Returns true if the specified class is a subclass of the specified class .
2057	Determine if the given interface implements the given interface .
2058	Returns true if the class is instantiable .
2059	Returns true if the model is a clone .
2060	Get interfaces hierarchy
2061	Sets a static property value .
2062	Sets the node s final state .
2063	Removes a method .
2064	Adds a method .
2065	Adds a new property .
2066	Removes a property .
2067	Checks if this class is matching the given reflection .
2068	Export a class instance as a string .
2069	Create an instance of a class
2070	Get runtime properties .
2071	Create a property node from reflection .
2072	Populate function abstract .
2073	Set the optional optional flag .
2074	Returns the number of required parameters .
2075	Returns an associative array of the parameters .
2076	Get a parameter by name
2077	Check if parameters are variadic
2078	Sets the return type of this node .
2079	Get body code .
2080	Returns an array of return statements
2081	Locates the identifiers by type .
2082	Creates a new Reflection object from a node .
2083	Returns the current value .
2084	Get modifiers
2085	Generate DocBlock annotations
2086	Formats the doc .
2087	Extracts the properties of this graph .
2088	Extracts the sign for a given property .
2089	Checks if the type is ENUM .
2090	Create a map of properties
2091	Converts a namespace to a directory .
2092	Fix CSS files .
2093	Check if a relation exists .
2094	Extracts the cardity from the relation .
2095	Get URL for a property .
2096	Convert field to PHP type
2097	Get relation name .
2098	Finish the end of the file .
2099	Flush the buffer .
2100	Add a single language item .
2101	Add single language item .
2102	Add multi language item .
2103	Get sitemap urls
2104	Set the Gzip value
2105	add sitemap
2106	Writes data to the file .
2107	Finish writing .
2108	Cleans up the temporary file
2109	Set the expiration date .
2110	Set Key Params
2111	Set the sub key for the given algorithm .
2112	Returns the usage array
2113	Gets a user id
2114	Parses a CryptGPGUserId string
2115	Checks if the process is running .
2116	Terminate the process
2117	Set operation .
2118	Handles an error line .
2119	Protected set error code
2120	Setter for data .
2121	Handles bad pass exception
2122	Get pin data
2123	Gets the hash algorithm name .
2124	Set the sign for this user .
2125	Set whether this user can encrypt .
2126	Parses a crypt key string .
2127	Parse a string to a DateTime object
2128	Delete public key
2129	Get fingerprint .
2130	Encrypt data
2131	Encrypts a file
2132	Encrypt and sign data
2133	Encrypt and sign a file
2134	Verify and verify encrypted data
2135	Decrypt and verify a file
2136	Sign a file .
2137	Add a decrypt key
2138	Add encryption key
2139	Add a sign key
2140	Add key to key
2141	Import a key
2142	Export key data
2143	Decrypt and verify the data
2144	Prepares input
2145	Prepares the output file
2146	Get list of keys
2147	Send a command .
2148	Reset all properties
2149	Runs GPG engine .
2150	Set operation .
2151	Set pins data
2152	Returns the version of the GnUPG .
2153	Gets the data of a process .
2154	Set the value of the specified data .
2155	Closes the sub process .
2156	Closes the agent launch process .
2157	Close a pipe .
2158	Closes GPG Agent .
2159	Finds the path to the binary .
2160	Get pin entry
2161	Debug text .
2162	Get primary key
2163	Returns true if subkeys can be signed
2164	Returns true if the key can be encrypted
2165	Set log filename
2166	Logs data .
2167	Connect to the SMTP server
2168	Parse command line
2169	Initialize pins from environment variables .
2170	Disconnects from server
2171	Sets the description of a text
2172	Get a single pin
2173	Send get info
2174	Get raw data
2175	Wrapper for wp - wp - w
2176	Send data to client
2177	Builds the messages for the given translations .
2178	Set the comment before header .
2179	Add multiple lines at once
2180	Get theme data .
2181	Extract translations from file .
2182	Get the file comment .
2183	Set default headers
2184	Get file data
2185	Get file data from string
2186	Resolve callee .
2187	Checks whether a comment is preced .
2188	Calculate the score of a file
2189	Checks if the given directory contains the children of the given directory .
2190	Recursively searches for files in a directory .
2191	Makes a JSON string for the given file .
2192	Build the JSON files .
2193	Removes JS strings from the po file
2194	Marks update as successful .
2195	Marks all available updates .
2196	Set the successful by hook .
2197	Check list points
2198	Checks for list points
2199	Save progress .
2200	Renders the dropdown .
2201	Generates a unique md5 hash for a database .
2202	Compares two configurations .
2203	Import module configuration
2204	Import configs
2205	Install the given modules
2206	Check the link for a given link .
2207	Check if link is active
2208	Send a message to the home page .
2209	Get a single file
2210	Gets the items from the columns .
2211	Returns the total count of results
2212	Prepare string for like comparison
2213	Set the response data .
2214	Resolve grid type .
2215	Resolve options .
2216	Renders a grid .
2217	Get grid cell .
2218	Get grid filter .
2219	Get grid column operator .
2220	Checks if the given environment has a block .
2221	Walks down a SelectStatement AST node .
2222	Set source .
2223	Checks if the current request is ready for export
2224	Process request data
2225	Process mass actions
2226	Process export data
2227	Process filters .
2228	Process session data
2229	Prepares the database
2230	Set session data
2231	Get column by id
2232	Checks if a column exists .
2233	Set columns order
2234	Add mass action .
2235	Add a new tweak
2236	Returns an array of Tweets
2237	Get a single tweak
2238	Get the Tweets group for a given group .
2239	Adds a row action .
2240	Set Twig Template
2241	Adds an export to the collection .
2242	Get route url
2243	Set filters .
2244	Set the limits for this query .
2245	Get page count
2246	Set maxResults
2247	Returns true if the title section is visible .
2248	Determine if the filter section is visible .
2249	Is the pager section visible?
2250	Show table columns .
2251	Hide columns .
2252	Get a Grid Response
2253	Get raw data
2254	Get session filters
2255	Get a session filter
2256	Checks if a column exists
2257	Initialize query builder .
2258	Renders a cell .
2259	Determine if the current user is visible .
2260	Set sort order .
2261	Set column size .
2262	Set the query s data .
2263	Returns the data for the query
2264	Set alignment .
2265	Returns an array of supported operators
2266	Adds a column to the table .
2267	Sets the order of columns .
2268	Add route parameters
2269	Returns the route parameters mapping for the given route name .
2270	Render a row
2271	Adds a grid type .
2272	Adds a column .
2273	Set the service container .
2274	Returns the response object .
2275	Get grid data
2276	Get grid data
2277	Set the template to use
2278	Gets a parameter .
2279	Get list of actions to render
2280	Clear all items
2281	Adds an item to the cart .
2282	Remove item from collection
2283	Get all items
2284	Login to OpenID
2285	Get User .
2286	Set or get the user name .
2287	User callback .
2288	Returns the length of a string
2289	Get slice of string
2290	Converts string to lower case
2291	Converts string to upper case .
2292	Get a mock instance for a function .
2293	Register a listener for the Deactivating system .
2294	Defines a function mock .
2295	Display language flag .
2296	Get country code
2297	Returns the ISO code
2298	Get long code
2299	Get locale name
2300	Set user locale .
2301	Redirects to the home page .
2302	Redirects the user to the language .
2303	Set the application locale .
2304	Returns the index of the elements that match the given function .
2305	Removes the element at the given index .
2306	Short description of method take
2307	Set authentication .
2308	Set the oauth token
2309	Send a message
2310	Connect to SMTP server
2311	Starts a TLS connection .
2312	Authenticate the user
2313	Authenticates the OAuth bearer token
2314	auth2 - 2
2315	Routes to addresses
2316	Set Data
2317	Terminate the quit code
2318	Get response code
2319	Set From email
2320	Set the fake from email .
2321	Finds a file by class name .
2322	Finds a file in the cache .
2323	Loads a collection of classes
2324	Fix namespace declaration
2325	Writes a cache file .
2326	Get the ordered list of classes
2327	Adds an array of prefixes .
2328	Adds a set of paths to search for .
2329	Finds a file by class name .
2330	Parse text .
2331	Detect the block type
2332	Parse a block .
2333	Get inline markers .
2334	Prepare inline markers .
2335	Parse inline markers
2336	Parses an emaph strength .
2337	Identify an inline HTML tag .
2338	Consume HTML .
2339	Returns true if the line is a FIFO code .
2340	Determine if the line is a heading .
2341	Consume heading lines .
2342	Replace escape characters .
2343	Parse Markdown Link
2344	Parse a Markdown image
2345	Parse inline code .
2346	Consume PHP code .
2347	Identify line .
2348	Renders a block list .
2349	Consume lines from a quote .
2350	Consume references
2351	Renders the heading .
2352	Parse markdown .
2353	Identify the lines of a table .
2354	Consume table lines
2355	Renders a table
2356	Parse a markdown URL .
2357	Checks if another subject is equal .
2358	Creates an element .
2359	Creates a new element with the given text .
2360	Validate images .
2361	Checks for an empty value .
2362	Checks if the Csv property keys are invalid .
2363	Create an exporter .
2364	Adds a value to a user group .
2365	Validates the XML document with the schema .
2366	Adds a user name .
2367	Adds a summary .
2368	Add a description .
2369	Adds a price .
2370	Add a bonus .
2371	Short description of method setSales frequency
2372	Set the DateTimeAdded value
2373	Adds sort .
2374	Validate the value
2375	Returns the contents of a hook .
2376	Sets a hook .
2377	Set hook .
2378	Remove hook .
2379	Count the commits .
2380	Returns reference bag .
2381	Get a commit by hash
2382	Get tree by hash
2383	Returns a Blob object .
2384	Retrieves a single log
2385	Get repository size
2386	Run a git command .
2387	Returns the description of the repository .
2388	Runs a command .
2389	Clones the current working directory .
2390	Returns all parent hashes .
2391	Get short message
2392	Returns a list of branches in the repository .
2393	Initialize repository .
2394	Checks if a remote URL is valid .
2395	Clones a file or directory .
2396	Clones a branch to a branch .
2397	Clones a repository
2398	Gets the list of lines grouped by this commit
2399	Returns an array of lines
2400	Returns a reference .
2401	Returns all branches .
2402	Get local branches
2403	Get remote branch
2404	Get the content .
2405	Returns the mimetype .
2406	Convert diff to array
2407	Parse text .
2408	Write a query as a formatted string
2409	Write column name .
2410	Create columns .
2411	Creates a new column object .
2412	Creates a new table .
2413	Returns the sql string
2414	Bootable trait for model .
2415	Store cache key .
2416	Get cache keys .
2417	Flush cache keys
2418	Forget cache .
2419	Reset cache configuration .
2420	Generate cache key .
2421	Cache query .
2422	Validate HppRequest
2423	Validate Hpp Response
2424	Add a flag to the autoSettle flag .
2425	Adds the returnss
2426	Adds a new card only if it is not valid .
2427	Set the DCC enable flag
2428	Add card storage enable
2429	Set offer save card
2430	Add a new payer exists
2431	Set the hpp version
2432	Generate default values
2433	Encode the order .
2434	Decodes the CAPTCHA data .
2435	Encode the current transaction .
2436	Decodes the gateway data .
2437	Get field config rules .
2438	Unpacks deferred results .
2439	Resolve deferred value .
2440	Convert cursor to key
2441	Convert an offset to an offset array
2442	List node compiler
2443	Creates request data
2444	Get all sentences
2445	Splits text into multiple sentences .
2446	Detects the language of the given text .
2447	Returns an array of language codes
2448	Get default values
2449	Cache a row
2450	Get cached row
2451	Checks if an offset exists
2452	Array access .
2453	Array access .
2454	Unset an offset
2455	Get the join field
2456	Delete the record from the database .
2457	Returns the class name of the given type
2458	Set a configuration value .
2459	Get field factory
2460	Prepares and executes a query .
2461	Execute a transaction .
2462	Starts a database transaction .
2463	Check if data is valid
2464	Check if value is set
2465	Edit an array of values
2466	Delete the record .
2467	Relate rows .
2468	Unrelate rows .
2469	Unrelate all tables .
2470	Returns a new Select object .
2471	Returns the name of the given value .
2472	The number of items that match the query .
2473	Metric rules .
2474	Output only . LoggingDestination destinations .
2475	Output only . The log destinations .
2476	Optional
2477	The list of endpoints .
2478	A list of logs .
2479	The list of metrics .
2480	A list of violations for the specified field .
2481	The list of operations .
2482	The role to view .
2483	Required .
2484	The stage of a role .
2485	List of consumer destinations .
2486	The list of extensions .
2487	A list of authentication providers .
2488	The list of requests .
2489	Optional . The collection of types that are present in the request .
2490	A list of bounds .
2491	The role .
2492	The list of subpages .
2493	A list of key types .
2494	The list of recipients .
2495	The stack entries .
2496	Output only . The results of the producer .
2497	Output only .
2498	Optional .
2499	A list of bindings .
2500	The metric costs .
2501	The list of pages .
2502	A binding action .
2503	The source files .
2504	The service account keys .
2505	The service accounts .
2506	The custom roles support level .
2507	A policy delta .
2508	Eemplar items .
2509	The list of features .
2510	The list of properties .
2511	A list of violations .
2512	The private key type .
2513	Optional . The service key algorithm .
2514	The list of details .
2515	BindingDeltas .
2516	The service key type .
2517	A list of roles .
2518	The system parameters .
2519	Get cache file
2520	Checks if the conditions are met .
2521	Checks if a cache file exists .
2522	Set cache file
2523	Retrieves data from cache
2524	Get or create a file
2525	Checks if a blog is installed .
2526	Installs Wordpress .
2527	Perform multisite installation .
2528	Install site database tables .
2529	Show version information .
2530	Get the list of checksums for the given version .
2531	Update database .
2532	Get the download url for a specific version .
2533	Get updates from API .
2534	Download a package
2535	Upgrade the current one .
2536	Builds HTML table
2537	Renders the head
2538	Move meta box after title
2539	Get the post type
2540	Get the title for the box .
2541	Render meta box .
2542	Setup the metabox .
2543	Get meta data
2544	Sets up the file path
2545	Setup meta data
2546	Check if the current page is disabled .
2547	Factory method to create a new class
2548	Get child property
2549	Get an option value
2550	Get the post id
2551	Generate HTML ID
2552	Generate the HTML for a specific property .
2553	Check if the slug matches the given slug .
2554	Prepare the value .
2555	Determine if the view is allowed by the given rules .
2556	Set an option
2557	Set a single setting
2558	Setup the properties .
2559	Setup options .
2560	Setup options slug .
2561	Setup options settings .
2562	Edit attachment form
2563	Save the meta box
2564	Check if this post type has a singleton .
2565	Get property meta value
2566	Format the value .
2567	Protected get property
2568	Load the meta value for a property .
2569	Factory method to create a new page .
2570	Get a specific property option
2571	Returns true if the current user can be rendered .
2572	Renders this row .
2573	Renders hidden html
2574	Renders the HTML for the label .
2575	Renders the row html .
2576	Render the rules .
2577	Get the value of the allowed html
2578	Decode a property value .
2579	Get post data
2580	Get pre deep keys value
2581	Prepare post data
2582	Prepare properties data .
2583	Santize data
2584	Deletes an item from the cache .
2585	Returns a string representation of the type .
2586	Get a value by its ID .
2587	Update an item
2588	Update the clear cache
2589	Get diff between two pages
2590	Add hidden meta box
2591	Loads a new post .
2592	Returns a redirect location
2593	Setup menu items
2594	Renames a meta
2595	Get field slug
2596	Get source .
2597	Setup the source .
2598	Setup the source .
2599	Initializes the admin interface
2600	Gets the admin body classes
2601	Edit the form after title
2602	Get the entry type
2603	Add plugin row meta
2604	Update the front page .
2605	Wrap the WP link query
2606	Get the list of templates for an entry
2607	Prepare the value for the property .
2608	Save the properties
2609	Meta metabox .
2610	Save a post
2611	Overwrite post data
2612	Update meta data
2613	Save meta boxes
2614	Save a revision
2615	Save the properties
2616	Restore a post revision
2617	Validate a post ID .
2618	Display an item by the given rules .
2619	Display by relation .
2620	Get the slug of the page .
2621	Prepare the rules .
2622	Is the current user allowed?
2623	Answers an array of body classes for the page .
2624	Gets an array of child - element types
2625	Get the labels for the view .
2626	Get post type supports .
2627	Remove support for a post type .
2628	Removes meta boxes
2629	Setup the widget .
2630	Setup post types
2631	Setup page templates
2632	Add mce buttons
2633	Removes MIME buttons
2634	Get row results
2635	Load a single value
2636	Prepare properties .
2637	Prepare a property for rendering .
2638	Remove repeater rows
2639	Render the json template .
2640	Renders the table footer .
2641	Renders the repeater rows .
2642	Register the plugin s properties .
2643	Get a setting value .
2644	Prepare the response
2645	Get user value .
2646	Returns an array of enabled capabilities
2647	Initializes the plugin .
2648	Load textdomain .
2649	Load the files .
2650	Deactivate plugin .
2651	Returns true if the items are a string .
2652	Prepare the properties .
2653	Get meta data
2654	Get the value of the file .
2655	Update the value of a field .
2656	Binds an object to the container .
2657	Call a closure .
2658	Returns the class name for the given id .
2659	Checks if the class is a singleton .
2660	Executes a callback for the given key .
2661	Remove a value from the container .
2662	Override taxonomy labels .
2663	Page menu .
2664	Get post types menu
2665	Renders the view .
2666	Autoload a class
2667	Get registered sidebar items
2668	Get the post type labels .
2669	Parse arguments .
2670	Parse the post type arguments .
2671	Parse term arguments .
2672	Get query arguments
2673	Get the query result .
2674	Add help tabs
2675	Create a box .
2676	Call parent class .
2677	Converts an array of properties to an array of properties .
2678	Get all body classes
2679	Get the box array
2680	Get the value of a property .
2681	Returns an array of properties
2682	Merge box properties .
2683	Register the metabox .
2684	Create tabs .
2685	Load a single value
2686	Prepares an array of links
2687	Update a single value
2688	Returns true if the taxonomy is allowed .
2689	Display the edit form
2690	Get post data
2691	Prepare the response
2692	Setup API post types
2693	Get the format arguments .
2694	Render template file .
2695	Get an option
2696	Convert a property value .
2697	Returns the converted value .
2698	Get the value of a deep value .
2699	Get the value of an entry .
2700	Checks if two rules are equal .
2701	Checks if two rules are not equal .
2702	Checks if the rule is greater than the given value
2703	Determine if the given rule is not in the given array .
2704	Checks if the value is a rule .
2705	Get between values
2706	Determine if the given rule is between two values .
2707	Determine if the given value is not between two values .
2708	Get the sort option
2709	Get post type options
2710	Returns an array of WordPress settings .
2711	Sort an array of values .
2712	Update a single value .
2713	Get the value of the meta type .
2714	List API entry types .
2715	Render the HTML .
2716	Get the JSON ID for a key .
2717	Get a layout .
2718	Load a single value
2719	Prepare layout properties .
2720	Render the layout input .
2721	Renders the repeater row .
2722	Add taxonomy fields
2723	Prepare the list of taxonomy types .
2724	Setup taxonomy hooks .
2725	Ajax url .
2726	Handle ajax request
2727	Get the entry type
2728	Get all posts
2729	Get ajax property
2730	Get a list of properties
2731	Get the paginated result .
2732	Get shortcode
2733	Get taxonomy terms
2734	Gets a taxonomy type .
2735	Renames a term
2736	Manage page post type posts
2737	Manage post type custom column .
2738	Manage columns sortable .
2739	Modify the query before fetching
2740	Restrict page types
2741	Format the value .
2742	Get the labels .
2743	Get terms .
2744	Get term meta value .
2745	Prepares the given value .
2746	Perform search .
2747	Get historical data .
2748	Get quote by symbol
2749	Get exchange rate
2750	Get exchange rates
2751	Fetch quotes .
2752	Answers an array of attributes for the header .
2753	Renders a single instance
2754	Renders the given content .
2755	Get all images
2756	Set query with parameters .
2757	Set default values
2758	Returns the value of the given parameter .
2759	Make a group .
2760	Wraps the error content .
2761	Wraps a form group .
2762	Add class to options
2763	Register the package routes .
2764	Register the assets routes .
2765	Register the auth routes .
2766	Adds a testcase .
2767	Returns a list of processes .
2768	Build the tree .
2769	Optimize order .
2770	Count the number of statuses .
2771	Count the number of finished processes .
2772	Returns a list of processes that have failed .
2773	Gets the dependencies tree for the given class .
2774	Outputs an error message
2775	Output an error
2776	Initializes the browser .
2777	Get version .
2778	Get file url
2779	Downloads a file
2780	Selects a single element by the given text .
2781	Save data to legacy file .
2782	Save data .
2783	Loads a legacy object .
2784	Loads a legacy data from a legacy file .
2785	Returns whether the connection is accessible
2786	Determines if the server is Selenium server .
2787	Get cloud service
2788	Guesses the port of the given host .
2789	Detect cloud service by response
2790	Build process .
2791	Get the excluded groups
2792	Take a screenshot of the current test .
2793	Get snapshot url
2794	Instantiates an event dispatcher .
2795	Get file path
2796	Quote an XPath attribute .
2797	Optimizes the depth of a tree
2798	Cast the given value to the expected type .
2799	Checks if the process has finished .
2800	Resolve result .
2801	Returns an array of executors
2802	Setup the built - in capabilities .
2803	Sets custom configuration options
2804	Retrieves environment variables
2805	Dequeues all queued processes .
2806	Flush process output .
2807	Returns the favorites for the given class .
2808	Count the number of tests .
2809	Update summary table
2810	Move summary table .
2811	Updates table buttons .
2812	Adds a favorite .
2813	Remove favorite .
2814	Toggle user favorite
2815	Check if user is favorite .
2816	Get favorites by user .
2817	Get permissions .
2818	Insert language files into language files
2819	Create view files
2820	Create a migration
2821	Create the events
2822	Generate file .
2823	Get stub path
2824	Check namespace .
2825	Check table exists
2826	On random Redis server
2827	Connects to all Redis servers .
2828	Connects to one server
2829	On one key server .
2830	Call a Redis command .
2831	Set current database
2832	Delete one or more keys
2833	Set a value in the cache
2834	Checks if a key exists
2835	Register an event type
2836	Set expiry time
2837	Flush all cache entries
2838	Executes all commands
2839	Get database size
2840	Add item to exec list
2841	Dispatch event .
2842	Add timing .
2843	Replace the config placeholder .
2844	Merge the tags .
2845	Dispatch memory usage
2846	Dispatch request time
2847	Create a new event from a console event .
2848	Parse SID value
2849	Parse the geometry .
2850	Parse point value
2851	Match the value of the next token .
2852	Parse point list
2853	Parse point lists .
2854	Parse multi polygon .
2855	Parses the geometry collection .
2856	Matches the token against the lexer .
2857	Create an instance of a syntax error message .
2858	Create an array of response parts
2859	Get request time
2860	Creates the API client .
2861	Send command to API
2862	Returns the redirect url
2863	Check render options
2864	Render a file .
2865	Renders a base64 encoded image .
2866	Finds one or more pages
2867	Finds an element with the specified method .
2868	Set an attribute of an element .
2869	Key event handler .
2870	Selects an option .
2871	Set debug mode
2872	Set the proxy
2873	Get the network traffic .
2874	Get cookies .
2875	Set a cookie .
2876	Returns an array of javascript errors
2877	Return the error message .
2878	Compiles a single node .
2879	Compile RouteVariable node .
2880	Creates a Trie node .
2881	Flush text buffer .
2882	Lex number .
2883	Lex a punctuation .
2884	Lexes quoted string .
2885	Lex a text character .
2886	Lex a variable name .
2887	Adds a route to the collection .
2888	Get named route
2889	Create a trie node .
2890	Normalize the HTTP header name .
2891	Assert that the given token is expected .
2892	Returns the current token .
2893	Returns the next token .
2894	If the current token type matches the given value
2895	Peeks ahead .
2896	Add a child node .
2897	Adds a child node .
2898	Returns an array of all children .
2899	Adds a literal node .
2900	Adds a variable child node .
2901	Builds all routes
2902	Adds a new route group
2903	Creates a route builder for the given HTTP methods .
2904	Applies group attributes
2905	Applies group constraints .
2906	Applies the route middleware bindings to the route builder .
2907	Applies group route templates
2908	Register the rule factories
2909	Retrieves all route candidates for the given node .
2910	Builds the route .
2911	Redirect to method route
2912	Set an attribute .
2913	Set many attributes
2914	Add multiple constraints at once .
2915	Add multiple middleware bindings at once .
2916	Create a new instance with the given middleware .
2917	Parses a punctuation node .
2918	Parse text .
2919	Parses tokens .
2920	Parse a single variable .
2921	Parse variable rule .
2922	Checks if the route value matches the route value .
2923	Registers a group of routes .
2924	Add a route to the router .
2925	Dispatch the route .
2926	Compares two route methods .
2927	Compares two routes .
2928	Compares route uri .
2929	Run the given route .
2930	Arrange method parameters .
2931	Replace route uri .
2932	Get the regular expression for a regular expression .
2933	Adds a route to the router .
2934	Defines a route
2935	Generate a URL for the given route name .
2936	Prepare the request
2937	Returns the URI for the request .
2938	Validate the API response .
2939	Validate Bitly response
2940	Validates the API response .
2941	Retrieve a provider by name .
2942	Handles the request
2943	Get the details for the given IP address .
2944	Format details object .
2945	Get request details
2946	Stores an element in the cache .
2947	Manage buffer size
2948	Perform a POST request .
2949	HTML error message .
2950	Group routes .
2951	Parse path .
2952	Check if the given path is variable route
2953	Extracts the variable route cache control from the given value .
2954	Set map tree
2955	Get redirect url
2956	Check the middleware for the route
2957	Run the dispatch function
2958	Initialize database connection
2959	Validate HTTP headers
2960	Get a specific HTTP header
2961	Get last inserted id
2962	Get DI parameters
2963	Register a singleton instance .
2964	Get singleton instance
2965	Register an abstract class .
2966	Returns instance of class
2967	Returns an instance of the specified class .
2968	Runs a method call
2969	Run the middleware stack .
2970	Initialize the Redis database .
2971	Add a pipe to the pipe .
2972	Initialize redis server
2973	Subscribe to a channel .
2974	Subscribe to a channel .
2975	Reset the query
2976	Wrap the prepare SQL
2977	Executes the current query
2978	Binds parameters to PDO statement
2979	Wrap table prefix
2980	Wrap a row in a string
2981	Parse a condition builder .
2982	Stores the build attributes .
2983	Restore build attributes .
2984	Wrapper for sub - builder
2985	Set columns to select
2986	Set where clause
2987	Adds an OR condition to the current query .
2988	Set where in
2989	Adds a BETWEEN clause to the query .
2990	Adds a WHERE clause to the query .
2991	Where clauses .
2992	Add WHERE condition
2993	Add a WHERE IN clause to the query .
2994	Sets the GROUP BY clause
2995	Set having clause .
2996	Add HAVING condition .
2997	Sets the order by clause
2998	Join a table
2999	Set the FROM clause
3000	Paginate a step
3001	Returns all rows as array
3002	Returns the first row of the result set
3003	Get a list of values for a field
3004	Executes a query against the database .
3005	Prepares a PDO statement .
3006	Starts a database transaction .
3007	Handle an exception
3008	Generate a random id .
3009	Generate a random id .
3010	Returns random number
3011	Normalize the DSN
3012	Get Query Builder
3013	Executes an expression .
3014	Starts a transaction .
3015	Commit current transaction
3016	Rollback current transaction
3017	Returns the last inserted id
3018	Reset custom tags .
3019	Consume an expression
3020	Escape special characters
3021	Renders the expression .
3022	Returns debug query
3023	Returns all results as array
3024	Retrieves a single row from the result set
3025	Returns the first row of the result set .
3026	Set table .
3027	Add a where clause to the query .
3028	Render condition .
3029	Set the group of arguments .
3030	Set field value .
3031	Set an option for the command .
3032	Sets the order .
3033	Set query mode
3034	Sets the LIMIT clause
3035	Parse a string .
3036	Fetch string matches .
3037	Creates a message .
3038	Determine if the given string starts with the given line .
3039	Determine if the variable matches the given value .
3040	Determine if the given variable has an expansion .
3041	Fetch the parameter expansion for a variable .
3042	Fetch parameter expansion symbol .
3043	Splits a variable default value .
3044	Parse a variable parameter .
3045	Assigns a default value to a variable .
3046	Check if a variable exists
3047	Get a variable from the parser .
3048	Parse key .
3049	Parse the content
3050	Parse raw lines .
3051	Parse raw line
3052	Parses an export line .
3053	Parse key value
3054	Get content .
3055	Starts a task .
3056	Start a workflow
3057	Finds a workflow
3058	Returns the timestamps of the current call .
3059	Get class properties
3060	Configure sitemap .
3061	Fix sitemap configuration
3062	Adds a source to the chain .
3063	Block event handler .
3064	Get the root menu .
3065	Get all available fonts
3066	Get icon chars
3067	Get the CSS for all fonts
3068	Hash a password
3069	Upgrade the password from a ciphertext .
3070	Execute command .
3071	Write SMTP credentials
3072	Get config array
3073	Determine if the current URI is filtered by the current Uri .
3074	Register all commands
3075	Find all templates
3076	Finds all templates in a bundle .
3077	Execute command .
3078	Returns a new string between two strings .
3079	Sanitize a string for use in Blade .
3080	Replace the first occurrence of the string
3081	Replace the last occurrence of a string
3082	Get the possessive .
3083	Returns a new Segment of this string .
3084	Checks if a string contains a given value .
3085	Generate an encrypted hash
3086	Decrypt the response
3087	Encrypt plain text
3088	Decrypt text .
3089	Encrypt the transaction .
3090	Decrypt the response
3091	Encrypt the request .
3092	Add a range of arguments
3093	Adds a modifier .
3094	Adds a range of pages .
3095	Adds a raw source .
3096	Adds a file source .
3097	Adds an iterator .
3098	Unserialize a JSON string
3099	Set optional constructor arguments
3100	Creates an exception for the given value .
3101	Creates a new exception for the given value .
3102	Unserialize from properties .
3103	Get config path
3104	Get application namespace
3105	Loads the service container .
3106	Creates a new master node .
3107	Get native balance
3108	Answers the native balance for the native asset .
3109	Get the balance for an asset
3110	Get the balance of an asset
3111	Returns the balance of a given asset
3112	Returns the hexadecimal for entropy .
3113	Converts a bit string to hexadecimal representation .
3114	Converts a mnemonic to entropy .
3115	Authorize a trust line
3116	Revoke a trust line .
3117	Convert this source to Xdrator .
3118	Converts a value to an opaque variable .
3119	Checks if the value is optional .
3120	Get unique bucket hashes
3121	Check if an account exists
3122	Set authentication requirement
3123	Sets the revocable flags for the authentication .
3124	Get the checksum of the public key .
3125	Get opaque string
3126	Parse raw data
3127	Signs the transaction .
3128	Submits a signed transaction .
3129	Creates a Patch object from a plain text string .
3130	Convert patches to plain text .
3131	Adds a context to the current context .
3132	Deep copy .
3133	Returns the bitap score .
3134	An alphabetically .
3135	Get HTML of diff
3136	Convert diff to delta
3137	Extracts tokens from a delta .
3138	Returns the levenshtein value of this changeset
3139	Compute the difference between two strings
3140	Compute line mode
3141	This function will split two strings .
3142	Returns the common prefix of two strings .
3143	Returns the common suffix of two strings .
3144	Checks if two strings overlap
3145	Match two strings
3146	Checks if two shorttext match
3147	Convert lines to char array
3148	Get the recipients for the notification .
3149	Get version of Laravel components .
3150	Register Pug Compiler
3151	Get config .
3152	Initialize the cache .
3153	Get pug
3154	Get cache path
3155	Get an option
3156	Determines if a file is expired .
3157	Extracts the path from the request
3158	Returns the Client instance .
3159	Get B2 family
3160	Hashes an input
3161	Resolve a file .
3162	Display a file .
3163	Extracts the extension options from an array of extensions .
3164	Removes a set of options .
3165	Reset all properties .
3166	Returns a renderer instance .
3167	Adds a filter to the collection .
3168	Adds a keyword .
3169	Cache the textual cache directory .
3170	Run the facade .
3171	Get all available methods
3172	List available methods
3173	Get the error messages for the given record .
3174	Returns a list of items
3175	Mark list as duplicates
3176	Searches for duplicate attributes .
3177	Remove empty attributes
3178	Processes a single record
3179	Handles incoming requests .
3180	Get elapsed time
3181	Reads all executed commands
3182	Convert arguments to string .
3183	Get the arguments for the command .
3184	Throws an exception if Redis server is not supported
3185	Registers an SPL autoloader
3186	Unregisters an SPL autoloader
3187	Returns the path to the rediska path .
3188	Get a list of connections based on a key name .
3189	Get a connection by channel name .
3190	Returns channels by connection .
3191	Gets a value from the Redis database .
3192	Set a value in the Rediska storage .
3193	Throws an exception if Redis server is not supported
3194	Create a new queue
3195	Delete a queue
3196	Returns the number of objects in the queue .
3197	Send a message to the queue
3198	Receive messages from the queue
3199	Remove a message from the queue
3200	Get the total elapsed time .
3201	Set a value in the record .
3202	Array access .
3203	Increment the value of a field .
3204	Remove a field from the recordset
3205	Writes a record to the database .
3206	Subscribe to a channel
3207	Publish a message .
3208	Add message to buffer
3209	Throws an exception if Redis server is not supported
3210	Catch an unserialize notice .
3211	Add a queue to the collection
3212	Remove an entry from the queue .
3213	Get queues cache
3214	Watch for one or more keys .
3215	Unwatch the watch .
3216	Add command .
3217	Creates a new UserPost entity .
3218	Lists all posts .
3219	Factory method to create a new Rediska instance .
3220	Adds a value to the sorted set .
3221	Get length by score
3222	Get set by score
3223	Remove set by score
3224	Increments a score
3225	Get the set by rank
3226	Remove set by rank
3227	Get rank by value
3228	Merge a set of sets from a set of sets .
3229	Computes the intersection between two sets of sets .
3230	Get an associative array representation of the score .
3231	Fill items from an array .
3232	Method to set property name
3233	Get a connection by key name
3234	Get connections .
3235	Connects to the specified alias .
3236	Subscribe to a channel .
3237	Returns the config for the given alias .
3238	Sets the key distributor
3239	Returns the serializer instance .
3240	Returns a new command instance .
3241	Returns the lower - level command name if not found .
3242	Execute all commands
3243	Add command .
3244	Writes the command to the server .
3245	Set response callback
3246	Transform multi bulk command
3247	Append a value to the list .
3248	Prepends a value to the list
3249	Truncate the list
3250	Set a value in the list .
3251	Inserts a value after a reference
3252	Inserts a new item before the given value .
3253	Inserts a value in the list .
3254	Removes a value from the list .
3255	Shift the item off the list
3256	Shift list blocking
3257	Pop the item from the list .
3258	Pop the currently blocked state from the list .
3259	Populate the keys from an array .
3260	Loads a transaction
3261	Save an item in the storage
3262	Remove an item from the cache
3263	Cleans the cache
3264	Sets the Redis backend directives .
3265	Returns a list of IDs not matching the given tags .
3266	Retrieves meta data from the cache .
3267	Collect expired tags
3268	Adds a value to the set .
3269	Removes a key from the set .
3270	Moves the key to the given value .
3271	Computes the intersection of two sets .
3272	Merge two sets together .
3273	Get the difference between two sets .
3274	Get rediska instance
3275	Set a value in the response
3276	Set the cookie and expire it .
3277	Set a bit
3278	Get or set a key value
3279	Lists users .
3280	Shows following users .
3281	Follow a user
3282	Moves the record to the database .
3283	Set the expiration time for the Redis2 API .
3284	Get rediska instance
3285	Set the stream resource
3286	Adds a Rediska instance to the collection .
3287	Get all instances
3288	Create instance from options
3289	Increment the number of transactions .
3290	Reset the subject .
3291	Get bucket name .
3292	Set MultiIncrement Transaction
3293	Sets the number of keys in the transaction .
3294	create socket connection
3295	Get the read buffer
3296	Read data from the Redis server .
3297	Reads a line from the Redis server .
3298	Set the connection timeout
3299	Get the stream context
3300	Read data from the socket
3301	Validates nonce .
3302	Binds a queue to the exchange .
3303	Ack message .
3304	Nack message .
3305	Get message properties
3306	Starts the daemon .
3307	Close the daemon .
3308	Creates a new exception .
3309	Build the queue consumer handler .
3310	Handle sync message
3311	Returns an instance of the specified connection .
3312	Nack message .
3313	Closes the channel .
3314	Consume a message .
3315	Replace the model .
3316	Qualify class name
3317	Processes the request .
3318	Create new record .
3319	Convert data to json .
3320	Edit the model .
3321	Remove a model from the database .
3322	Vote on a subject
3323	Renders the document .
3324	Returns a string representation of the current position .
3325	Gets the percentage of all users in an app
3326	Closes the socket
3327	Receive a packet
3328	Send data packet .
3329	Read a reply from the SMTP server .
3330	Send an RPC command
3331	RCON challenge
3332	Send RPC command
3333	Connect to the server .
3334	Returns an array of Server objects
3335	Fetch data from the container
3336	Converts Community ID to Steam
3337	Converts a Steam ID to a Community ID .
3338	Resolve a vanity url
3339	Fetch friends .
3340	Fetches all played games
3341	Fetches the users groups
3342	Get the SteamId 64
3343	Returns the most recent playtime of the game
3344	Returns the total playtime of the game
3345	Fetch profile data
3346	Rotate IP address
3347	Initializes the socket
3348	Perform an authentication request
3349	Establish UDP connection
3350	Creates a new instance of the class
3351	Get cached instance .
3352	Checks if the cache is already cached .
3353	Register the cache .
3354	Get cache ids .
3355	Initialize the socket
3356	Attempts to authenticate the user
3357	Closes the socket
3358	Read data from the socket
3359	Select a stream .
3360	Send data to the socket
3361	Get all news for an app
3362	Returns an array of enabled classes
3363	Returns the member count .
3364	Returns all members in the collection .
3365	Fetch a member list
3366	Perform internal fetching
3367	Get the item schema .
3368	Fetch player items from the server
3369	Returns an array of enabled bots .
3370	Gets an array of golden valves
3371	Set WebAPI Key
3372	Request Steam Web API
3373	Send data packet
3374	Get all players
3375	Handles a response for the given request type .
3376	Update the ping
3377	Update all players
3378	add information to a player
3379	Get leaderboard by id
3380	Get leaderboards .
3381	Load leaderboards .
3382	Returns the entry for the given SteamId .
3383	Get range of leaderboard entries
3384	Loads data from an array of params
3385	Loads data for the given steam id
3386	Parse the game leaderboard entries .
3387	Create a new SteamGame instance .
3388	Check if the app is up to date
3389	Get current player count
3390	Get user stats
3391	Display a listing of work orders .
3392	Create a new maintenance event .
3393	Display an event .
3394	Update an event .
3395	Remove an event .
3396	Display the workorder view .
3397	Show the form for editing an existing WorkOrder .
3398	Update WorkOrder .
3399	Get take item
3400	Adds a piece of data to the given item .
3401	Returns the put item for the given stock ID .
3402	Put a part into the inventory .
3403	Display WorkRequest .
3404	Show the form for editing a work request .
3405	Update WorkRequest .
3406	Remove the work request .
3407	Scope a query to only include locations .
3408	Create an event report .
3409	Show WorkOrder form .
3410	Store an attachment .
3411	Display the attachment .
3412	Show the form for editing an attachment .
3413	Updates an attachment .
3414	Destroy attachment .
3415	Forms and displays a WorkOrderForm instance .
3416	Get notification icon
3417	Display a listing of Stock Moves .
3418	Display a stock movement .
3419	Rollback a stock item .
3420	Get revision status
3421	Get the revision priority
3422	Closes all sessions .
3423	Determine if the current user is logged in .
3424	Get the started_at
3425	Get the completed at label
3426	Mark the status as completed .
3427	Table of work orders .
3428	Show maintenance status form .
3429	Display a listing of the priorities .
3430	Create a new store instance .
3431	Show the form for editing a job .
3432	Updates the specified priority .
3433	Query scope for stock .
3434	Scope for SKU .
3435	Get current stock .
3436	Get revision metric attribute
3437	Get operator .
3438	Query scope .
3439	Get file path .
3440	Display a listing of the shop orders .
3441	Create a new Store instance .
3442	Show the form for editing a job .
3443	Update the specified status .
3444	Show the form for creating a new inventory item .
3445	Store a new item .
3446	Show workorder form .
3447	Stores a report .
3448	Table of work orders .
3449	User assigned to workbook .
3450	Table sessions for work order
3451	Form for creating work orders .
3452	Show comment form .
3453	Handle the upload .
3454	Table for asset .
3455	Forms the asset form .
3456	Renders a table .
3457	Table Stock Presenter
3458	Forms the inventory form .
3459	Displays a navbar stock .
3460	Upload an attachment .
3461	Update an attachment .
3462	Table .
3463	Table of revisions .
3464	Upload an image .
3465	Display an image
3466	Update an image .
3467	Display the metrics view .
3468	Store a metric .
3469	Show the form for editing a metric .
3470	Display a listing of assets .
3471	Stores an asset .
3472	Show the form for editing an asset .
3473	Update an asset .
3474	Scope query id .
3475	Renders the response .
3476	Get input by name
3477	Get select hierarchy
3478	Gets a rendered node
3479	Boot the view composer .
3480	Delete attachment .
3481	Display a listing of the stock .
3482	Show stock form .
3483	Store a newly created stock item .
3484	Display stock items .
3485	Show the form for editing an item .
3486	Updates a stock item .
3487	Destroys a stock item .
3488	Display an asset .
3489	Show the form for creating an asset .
3490	Create a new meter
3491	Display meter .
3492	Edit the meter .
3493	Update the meter .
3494	Remove the meter .
3495	Store a new WorkOrder
3496	Update WorkOrder Notification
3497	Get the date formatted for this entity .
3498	Get the completed at date
3499	Display a listing of work orders .
3500	Forms the comment form .
3501	Get hours .
3502	Get start date
3503	Formats the end date
3504	Get the end time
3505	Formats the frequency of the event .
3506	Retrieves frequency of the frequency of an event
3507	2016 - 12 - 12
3508	View event tags .
3509	Store a newly created stock .
3510	Update an existing stock .
3511	Destroy an item .
3512	Table of work orders .
3513	Form submission form .
3514	Authenticate user .
3515	Handles the user authentication .
3516	Handles the user authentication .
3517	Triggered when an InventoryStock is deleted .
3518	Restore stock movement .
3519	Table of workorders .
3520	Forms and returns the maintenance form .
3521	Table of stock orders .
3522	Forms and returns a form to take a WorkOrder entity .
3523	Show put form .
3524	Destroy an inventory item .
3525	Create a flash message .
3526	Create WorkOrder .
3527	Store a newly created WorkOrder report .
3528	Display a listing of events .
3529	Create a new event .
3530	Display an event .
3531	Update an event .
3532	Destroy an event .
3533	Scope a query to only include categories .
3534	Form builder .
3535	Upload manual assets .
3536	Display an manual asset .
3537	Update an attachment .
3538	Attaches an asset
3539	Remove work order from an asset .
3540	Store a newly created WorkRequest
3541	Destroy an update .
3542	Display a listing of stock orders .
3543	Display form for remove item
3544	Handle a post take request .
3545	Display put item .
3546	Post a put request .
3547	Display a listing of work requests .
3548	Show the form for editing a work request .
3549	Updates a job .
3550	Show the form for creating a new category .
3551	Store a newly created category in storage .
3552	Show the form for editing a category .
3553	Update category .
3554	Remove the specified resource from storage .
3555	Table of work orders .
3556	Table of WorkOrderPermission .
3557	Triggered when the Inventory has been deleted .
3558	Restore stock .
3559	Display the inventory .
3560	Store a new Inventory .
3561	Display an inventory item .
3562	Show the form for editing an item .
3563	Table of InventoryItem
3564	Table of stock movement
3565	Retrieves the inventory stock form .
3566	Renders the inventory bar .
3567	Table of the WorkOrder .
3568	Table of inventory .
3569	Display the workbar parts page .
3570	Display a listing of work orders .
3571	Start a work order
3572	Ends a WorkOrder .
3573	Get the change attribute
3574	Create a new note .
3575	Display a note .
3576	Update a note .
3577	Remove a note .
3578	Get last movement attribute .
3579	Get last movement by attribute .
3580	Get quantity metric .
3581	Display a button to put it in a WorkOrder .
3582	Display the put stock for a WorkOrder .
3583	End the session .
3584	Table of work requests .
3585	Form for creating work requests .
3586	Creates a new WorkOrder .
3587	Remove the worker from the work order .
3588	Renders a datalist .
3589	Generates a placeholder .
3590	Get the appendage .
3591	Renders a component .
3592	Get component data
3593	Register the blade compiler class .
3594	Open a model .
3595	Format a label .
3596	Create a reset button .
3597	Generates a submit button .
3598	Get a value from the request .
3599	Create a link to an asset .
3600	Generate a link to a named route .
3601	Create a listing element .
3602	Renders an array of attributes
3603	Register the html builder class .
3604	Register form builder .
3605	Create a search input .
3606	Generates a datetime input .
3607	generate a file input field .
3608	Removes the first line from the string .
3609	Load ini file
3610	Parses a locale file .
3611	Returns the patterns for the given word .
3612	Unify a locale .
3613	Tokenize a string
3614	Runs the token registry .
3615	Set the options
3616	Adds a dictionary to the registry
3617	Get hyphenation patterns for a word .
3618	Set filters .
3619	Adds a filter .
3620	Set the tokenizer .
3621	Adds a tokenizer .
3622	Factory method to create an instance of an INI file .
3623	Gets the text of this message .
3624	Returns pattern set
3625	Set options .
3626	Returns an array of options
3627	Adds a dictionary .
3628	Adds a new filter .
3629	Adds a tokenizer .
3630	Returns an array of tokenizers .
3631	Get the dictionary
3632	Returns an array of filters
3633	Hyphenate a string .
3634	Get hyphenation pattern .
3635	Returns the pattern for the given token .
3636	Set the default home path
3637	Get default home path
3638	Set the home path
3639	Returns a new Hyphenator instance .
3640	Autoload class
3641	Replace a token .
3642	Returns the token with the given key .
3643	Get merged pattern
3644	Get filter by key
3645	Filters all tokens .
3646	Fetch an access token
3647	Migrate orders .
3648	Migrate Order .
3649	Migrate shipping values .
3650	Migrate order calculation
3651	Vrati uiivatep
3652	Create the default page .
3653	Make a payment
3654	Get gateway data .
3655	Creates a payment for the given gateway
3656	Completes the payment .
3657	Checks if an order can be placed .
3658	Get the full name of the country .
3659	Set payment method
3660	Returns selected payment method
3661	Sends the confirmation email to the customer .
3662	Send admin admin notification
3663	Send a cancel notification to the customer .
3664	Builds URL for purchase .
3665	Redirects to the cart page
3666	Renders the shopping cart .
3667	Display debug information
3668	Gets the filter for this query
3669	Handles a submitted form submission
3670	Perform the save action .
3671	Returns a modifier object for the specified class name .
3672	Get current unit price
3673	Calculate the total cost of the item .
3674	Get uniquedata id
3675	Before writing
3676	Retrieves the product variant
3677	Convert to string
3678	Get address .
3679	Get the cart form
3680	Get the value of the cost .
3681	Get the weight for this order
3682	Get sum of items
3683	Returns the subtotal of the iterator .
3684	Before write callback
3685	Gets the user viewer .
3686	Retrieves product
3687	Add the CMS fields to the view .
3688	Get variant by attributes
3689	Generate an array of Variations based on the attributes .
3690	Removes the variant from the owner .
3691	Returns a component by its type .
3692	Gets the list of form fields
3693	Validates the data
3694	Get the data for the order
3695	Set component data
3696	Get dependant data
3697	Returns current cart item
3698	Set current cart
3699	Find or create a new Order
3700	Adds a new product to the basket .
3701	Removes an item from the basket .
3702	Remove an order item
3703	Update the quantity of a BuyableItem .
3704	Update order item quantity
3705	Find or make a Buyable item .
3706	Get a Buyable object
3707	Archive order id
3708	Get the value of the incoming value .
3709	Return price for display
3710	Get an image by its filename
3711	Set the content of an object
3712	Get a list of all countries
3713	Get single country
3714	Translate country code to name
3715	Returns the current shopping cart
3716	Convert array to values
3717	Get a dropdown field
3718	Returns a list of products that are displayed in this category
3719	Returns an array of all child categories
3720	Get the associated ChildCategory object
3721	Gets the groups menu .
3722	Generate a nested title .
3723	The edit form
3724	Print order invoice
3725	Returns the next step
3726	Returns an array of Order objects
3727	Returns the edit form
3728	Gets a subset of fields .
3729	Modify the subtotal
3730	Setup the list of steps .
3731	Redirects the user to the next action .
3732	Is current step
3733	Returns the position of the current action
3734	Finds a link to the current page .
3735	Returns a list of products
3736	Trims the number of bytes from the string
3737	Answers the CMS fields for the page .
3738	Get category options
3739	Get options for category
3740	Get category IDs
3741	Returns the price of the selling price .
3742	Answers the image for the product .
3743	Handles the submitted data
3744	Payment payment .
3745	Cancel an order
3746	Get CC fields .
3747	Adds an order to the session .
3748	Get session order IDs
3749	Get order by id
3750	Retrieves the order form
3751	Creates a new member membership
3752	Get Member by unique identifier
3753	After the member is logged in .
3754	Get the list of all orders that have been shown
3755	Adds a hidden field to the cart .
3756	Get existing address fields
3757	Get the CMS fields
3758	Get default search context
3759	Get related components
3760	Returns the order total .
3761	Get OrderTotalCalculator .
3762	Returns the average cost of all paid items .
3763	Answers the link for the current order .
3764	Determine if the account can be paid .
3765	Whether this member can be deleted
3766	Determine if this view can be viewed .
3767	Get the first surname .
3768	Get billing address
3769	Generate Reference
3770	Before writing
3771	Before delete callback
3772	Returns an array of entities for the order
3773	Render the cart
3774	Displays the product related items
3775	Finds the link to the account .
3776	Get the order link
3777	Browse packages .
3778	List installed packages .
3779	Get the path to a package .
3780	Update the installed packages .
3781	Uninstalls a package .
3782	Get the Composer instance .
3783	Get the community packages .
3784	Index the package .
3785	Show the list of packages .
3786	Gets a package by its short identifier .
3787	Get list of installed packages
3788	Get installed package by name
3789	Get the package name and version .
3790	Get the path to the composer . json file .
3791	Creates the default composer . json file .
3792	Get the raw git version .
3793	Guesses the version constraint from a tag .
3794	Get the path to the composer . json file .
3795	Set the object
3796	Load custom configs
3797	Run the Queue .
3798	Process the Queued JobDescriptor .
3799	Queues a job .
3800	Copy the job to the Descriptor .
3801	Get next pending job
3802	Check if the current job has finished .
3803	Check default jobs
3804	Restarts a stalled job .
3805	Initialise the given job descriptor .
3806	Checks if the time limit has elapsed .
3807	Checks if there are enough memory usage
3808	Parse a memcached string
3809	Get a filter for a job list .
3810	Runs the job queue .
3811	Process a job queue .
3812	Queues a task .
3813	Logs the status of a descriptor .
3814	List the jobs for the service
3815	Refresh the job descriptor .
3816	Start the shutdown process .
3817	Pauses the current job
3818	Resume the current job .
3819	Activate the job on queue .
3820	Get the cache directory
3821	Removes the job from the queue .
3822	Get the saved job messages .
3823	Get last message
3824	Get JobType string
3825	Get the values of the job type .
3826	Setup site tree .
3827	Prepares the site tree for re - restore
3828	Completes the job
3829	Run the queued job .
3830	Handle an action
3831	Get title .
3832	Sets up the tree
3833	Process this page
3834	Get the queue name
3835	Casts the given ActiveRecord into an array .
3836	Lists all Casts
3837	Saves the source map
3838	Writes data to shared memory .
3839	Read data from shared memory
3840	List unusedbars .
3841	Lists widgets .
3842	Add a widget .
3843	Updates a widget .
3844	Move a widget .
3845	Deactivates a widget .
3846	Delete a widget .
3847	Reset the registered sidebar .
3848	Validates a sidebar ID .
3849	Validates widget .
3850	Get widget data
3851	Move a widget .
3852	Get widget object
3853	Sanitize widget options .
3854	Generate random integer
3855	Generate a random string
3856	Encode a string
3857	Decodes the string
3858	Add a generator path
3859	Removes a generator path .
3860	Get a generator instance .
3861	Loads all available generator classes
3862	Show the form as a row
3863	Get the read - only element .
3864	Open a form
3865	Add a prefix to an element .
3866	Modify an element .
3867	Assemble addons .
3868	Sets the size of the widget .
3869	Cleans up a message
3870	Calculate the client tempF
3871	Returns a list of nodes
3872	Retrieves a list of properties
3873	Evaluate a path
3874	Writes a cache key .
3875	Get the webdriver instance .
3876	Returns the aperture value
3877	Returns the author of the feed
3878	Returns the headline of the response .
3879	Get credit card
3880	Returns the source
3881	Returns the job title
3882	Get ISO ISO
3883	Get focus distance
3884	Returns the width of the image
3885	Returns the height of the image
3886	Returns the title of the message .
3887	Get caption
3888	Returns the copyright
3889	Get keywords .
3890	Returns the value of the video .
3891	Get horizontal resolution
3892	Get vertical resolution
3893	Get software
3894	Returns the vertical length of the data
3895	Get creation date
3896	Get color space
3897	Returns the mime type of the response .
3898	Returns the file size
3899	Get orientation
3900	Returns the GPS value
3901	Extracts the GPS coordinate from the given components .
3902	Set the tool path .
3903	Get tool path
3904	Get command output
3905	Hydrates an object .
3906	Extract coordinates from coordinates .
3907	Returns the mapper .
3908	Get hydrator .
3909	Set new options
3910	Add a required section
3911	Get image data
3912	Returns an instance of the given type .
3913	Generate table prefix
3914	Normalize the configuration .
3915	Translate a list
3916	Start a new job
3917	Process the URL of the job .
3918	Collects changes to the site tree .
3919	Flush the changes to the Queue .
3920	Returns module extensions garbage collection .
3921	Filter extensions by module
3922	Get module blocks
3923	Returns module settings
3924	Returns true if metadata version is supported
3925	Check if PHP file exists
3926	Checks module versions
3927	Check extended classes
3928	Checks module blocks
3929	Checks module settings
3930	Check module templates
3931	Check module controller
3932	Checks module files
3933	Check module events
3934	Parse module ids .
3935	Parse shop configs
3936	Returns module ids
3937	Determine if the application is bootstrap .
3938	Returns module object
3939	Returns module cache
3940	Returns module installer
3941	Fix module information
3942	Clean up module extensions
3943	Add module templates
3944	Add module files to config
3945	Add module events
3946	Add module extensions to config
3947	Adds module version to config
3948	Computes the difference between two arrays .
3949	Add module settings
3950	Set module Controllers
3951	Adds extensions to core
3952	Returns list of installed modules
3953	Renders the template
3954	Remove blocks from the database
3955	Returns a Http instance .
3956	Returns an instance of the available HTTP transport
3957	Returns an array of HTTP transport names
3958	Set CA option and value
3959	Create a response from the given content .
3960	Check if redirects are allowed .
3961	Make an OPTIONS request .
3962	Make a HEAD request .
3963	Makes a TRACE request .
3964	Make a PATCH request .
3965	Checks if the given path matches the glob expression .
3966	Get extra parameter value by key
3967	Get combined filters .
3968	Initializes the plugin .
3969	Checks if the given path matches the given expression .
3970	Checks if the given path matches the glob expression .
3971	Get shop source path
3972	Create an installer for the given package .
3973	Install a package
3974	Update the package .
3975	Copies the shop source to the target package .
3976	Copy configuration source file to target location .
3977	Copy setup files
3978	Check if config file is not configured .
3979	Copy files from source to package .
3980	Get filtered files .
3981	Returns the absolute path to an absolute file from the source package .
3982	Updates the package .
3983	Copy a package .
3984	Forms the source path .
3985	Nest nested file system
3986	Returns an iterator for the given file path .
3987	Copy files from source directory to destination
3988	Copy a file from one source to another .
3989	Generate models .
3990	Recursively traverses the given array of classes .
3991	Convert to JSON - LD array .
3992	Add a breadcrumb list
3993	Renders the ldap
3994	Set HTML by View .
3995	Generate the inline styles
3996	Resolve path .
3997	Tests if the given values are expected .
3998	Checks if the given value exists .
3999	Assert HTTP status code
4000	Asserts that the given content is a string .
4001	Assert HTTP status
4002	Assert a JSON API response .
4003	Asserts a single document .
4004	Asserts that the content is exact .
4005	Asserts that a many - to - one document is set .
4006	Asserts that a document has been fetched .
4007	Asserts that a value is a many - to - one .
4008	Assert that the content has been created .
4009	Assert that the content is not empty .
4010	Asserts that exact meta data does not exist .
4011	Asserts that the given content is an exact error status .
4012	Asserts that the content has an exact error .
4013	asserts an array of errors
4014	Returns the document .
4015	Set the type .
4016	Assert that an exact document is fetched .
4017	Asserts that the given content is updated .
4018	Asserts that the content is deleted .
4019	Assert that the resource is included .
4020	Assert that the current hash is included .
4021	Assert that the document is met
4022	Assert exact meta .
4023	Assert that the contents of the document is exact .
4024	Assert that the document is exact .
4025	Assert a resource .
4026	Asserts that a document is an identifier .
4027	Asserts that the document is exact .
4028	Asserts that the document is not exact .
4029	Asserts that a list contains only subsets .
4030	Asserts that the content is an exact in - list .
4031	Asserts that the list of items in the given array are in the list .
4032	Asserts that an exact list is in an exact list .
4033	Asserts that a list of identifiers in a list .
4034	Asserts that the list of identifiers in a document in order .
4035	Asserts that a list contains a resource .
4036	Asserts that a list contains a subset of subset .
4037	Asserts that the list contains an exact list .
4038	Asserts that the list contains an included list .
4039	Assert that the document is exact .
4040	Assert that the given document contains an error .
4041	Asserts that the given document has an exact error .
4042	Create a new instance from a string .
4043	Cast a document to an iterable .
4044	Creates a new instance from a JSON string .
4045	Decodes a JSON string .
4046	Get a value from the document .
4047	Determine if the collection contains the given pointer .
4048	Assert that a member exists .
4049	Assert that the specified pointer does not exist .
4050	Checks if the actual value is exact
4051	Returns a subset of the given values .
4052	Check if the value is a member identifier .
4053	Sort an array by key .
4054	Determine if the given value is an identifier .
4055	Send the paging request
4056	Show user .
4057	Reply to a user .
4058	Set allowed types
4059	Writes a message to the buffer .
4060	Write a message if debug is enabled .
4061	adds a message
4062	Get message count
4063	Get the vars from a single line
4064	Returns an array of variables from a multidimensional array .
4065	Validates an array of variables
4066	Returns all items in the collection
4067	Applies the accumulator to the collection .
4068	Merge an array recursively
4069	Convert the iterator to an array .
4070	Returns an array of keys .
4071	Compile the iterator
4072	Returns an array of values .
4073	Reduce the collection to a single value
4074	Convert generic keys to string .
4075	Group by strategy
4076	Reduce an iterable .
4077	Register a reduction .
4078	Dump the event .
4079	Get extra key
4080	Escapes a predicate .
4081	Parse an IRI
4082	Get term context from field type .
4083	Persists the cache if needed .
4084	Get the content of an entity type .
4085	Normalize field items .
4086	Deletes a backend .
4087	Create translated entity instance
4088	Get entity URI
4089	Returns an array of typed data ids
4090	Build backend backend
4091	Fetch data from cache .
4092	Run a string callable .
4093	Prints an error message .
4094	Asks a question
4095	Execute an insert query
4096	Create a new Faker instance .
4097	Overrides overrides .
4098	Inserts a record .
4099	Extract the primary key from the table .
4100	Set a user as an authenticated user .
4101	Copy stubs files .
4102	Configure variables .
4103	Serialize the additional data .
4104	Checks if the given data is a watch type .
4105	Loads the watchType for the given entity type id .
4106	Run the migrations .
4107	Prepare the database seeders .
4108	Finds an attribute with the passed option id and store id .
4109	Returns the entity with the passed attribute set ID .
4110	Find an attribute option by its attribute type code and value .
4111	Finds an attribute by its attribute id .
4112	Creates the database seeders folder .
4113	Make the database seeders .
4114	Initialize the attribute .
4115	Setup database transaction
4116	Loads the MemberAttribute object for the passed attribute ID .
4117	Set node path
4118	Add parameters to the form .
4119	Send the request
4120	Executes the menu
4121	Injects the params from the request
4122	Find an attribute by its attribute code
4123	Recursively tear down the registry .
4124	Set the attribute ID of the member .
4125	Publish a record .
4126	Assert that the given content is visible .
4127	Decodes the response body .
4128	Assert that the given JSON structure is valid .
4129	Run the Tripleton .
4130	Get Drupal root
4131	Returns the path to the environment file .
4132	Reads the environment line .
4133	Publish the tour bundles
4134	Loads the database seeder .
4135	Returns the entity type .
4136	Get entity type id
4137	Call the given method .
4138	Prepare the URI .
4139	Checks if the given payload is HTTPS or not .
4140	End a transaction
4141	Set app name
4142	Set user attributes
4143	Start a transaction
4144	Builds a URL based on the given parameters .
4145	Prepares constructor args
4146	Append exception suffix
4147	Wrap the given column exception .
4148	Parse a CSV file
4149	Loads an attribute group by its ID .
4150	Returns an array of MemberSet objects which contain the passed attribute set ID .
4151	Finds an entity group by its attribute type and name .
4152	Creates a new LexerConfig instance .
4153	Find an option by its ID .
4154	Create the file resolver for the subject configuration .
4155	Returns all core configs
4156	Returns the system logger .
4157	Creates a new plugin instance .
4158	Merge an entity
4159	Create a new NumberConverterInterface instance .
4160	Cast value by backend type .
4161	Returns the entity type code .
4162	Returns an array of the attributes of the passed entity type .
4163	Returns an array of eav user defined attributes
4164	Returns an EAV attribute by its code .
4165	Returns an array of categories with their path
4166	Returns an array of categories with the passed store view ID .
4167	Returns header by its name .
4168	Adds a header to the collection .
4169	Maps an attribute code by the header mappings .
4170	Resets the source directory .
4171	Registers an observer .
4172	Register a callback
4173	Get callbacks by type
4174	Imports a row .
4175	Prepare store view code
4176	Returns the store ID of the passed store view code .
4177	Get root category
4178	Resolve original column name .
4179	Get original data
4180	Checks if the column has original data
4181	Wraps an exception in an Exception .
4182	Append exception suffix
4183	Returns new file name
4184	Uploads a file to the server
4185	Delete a media file
4186	Returns all member types
4187	Returns the entity type with the passed entity type code .
4188	Serialize the configuration .
4189	Unserialize a string .
4190	Get the target directory .
4191	Create export config
4192	Initializes the csv configuration .
4193	Unserializes the object .
4194	Serialize an array to a string
4195	Get prepared statement
4196	Initializes the statement .
4197	Parse additional attributes .
4198	Generates a unique identifier for the passed entity
4199	Resolve a reference .
4200	Set values to cache .
4201	Get a value from a cache key .
4202	Flush the cache .
4203	Loads an attribute set from the database .
4204	Returns all the MemberAttributeSet for the passed entity type id .
4205	Returns the association with the passed entity type and name .
4206	Returns an entity type with the passed entity type and name .
4207	Create an export adapter
4208	Quote a string .
4209	Returns the rewrite for the passed entity type and id .
4210	Returns the URL rewrite for the passed entity type and store id .
4211	Notify all observers
4212	Checks the column integrity .
4213	Check if a header exists
4214	Creates a new subject
4215	Create a serializer instance .
4216	Returns the list of all the attributes associated with the passed entity type .
4217	Returns the attributes for the passed option value and store id .
4218	Returns the list of all the members in the passed array .
4219	Returns the list of all the members associated with the passed entity type id .
4220	Returns all the member attributes for the passed entity type id .
4221	Finds an option by its value and store id .
4222	Prepare the observers .
4223	Resolves the path of the current directory .
4224	Creates a new directory .
4225	Set the value of an attribute .
4226	Raise counter .
4227	Merge attributes recursively .
4228	Creates a filesystem adapter .
4229	Returns the category with the passed store view id .
4230	Returns all root categories
4231	Creates an emitter instance .
4232	Prepares listeners for given emitter
4233	Recursively removes a directory
4234	Get the swift mailer configuration .
4235	Initializes the source directory .
4236	Loads a list of files
4237	Returns an array of statement keys
4238	Create import adapter
4239	Prepare callbacks .
4240	Get global data
4241	Loads a prepared statement by its identifier .
4242	Create a DateConverterInterface instance .
4243	Overrides an array of artefacts .
4244	Appends an array of artefacts to the last entity .
4245	Returns an array of artefacts for the given type and id
4246	Creates a new artefact .
4247	Export a counter
4248	Returns all link types
4249	Returns all image types
4250	Convert a date string to the correct format
4251	Converts a number to a localized format .
4252	Execute the given subject configuration .
4253	Get pattern keys .
4254	Resolve pattern values .
4255	Resolve pattern value .
4256	Prepare the pattern .
4257	Prepare the ok filename .
4258	Check if two filename are equal
4259	Get ok filenames
4260	Determine if the given filename should be handled .
4261	Cleans up ok filename
4262	Returns all available tax classes
4263	Warms up the member s options .
4264	Returns all store sites
4265	Returns all stores .
4266	Finds all entities by their ids
4267	Finds an entity by its id
4268	Returns all customer groups .
4269	Returns the primary key member name .
4270	Removes empty columns
4271	Create a blade view .
4272	Register REST API routes .
4273	Get collection parameters
4274	Sanitize end date .
4275	Get events by pagination .
4276	Map Event Module Data
4277	Defines category translations
4278	Before save callback
4279	After save hook .
4280	Saves the location
4281	Save additional locations
4282	Saves the event categories
4283	Save event groups
4284	Save Event Tags
4285	Save episodes .
4286	Save the current language
4287	Get event by original id
4288	Checks event filters
4289	Removes all episodes
4290	Remove deleted events
4291	Remove expired events
4292	Filter an array of taxonomies
4293	Delete empty taxonomies
4294	Render the location list
4295	Save a location
4296	Get the Revust manifest .
4297	Remove meta boxes
4298	Output meta data
4299	Multi - imploded string
4300	Register event type
4301	Adds a table column .
4302	Set table columns .
4303	Converts a list of columns into an array of columns .
4304	Retrieve table columns content
4305	Save a term .
4306	Activate a new event group
4307	Remove empty values
4308	Get empty values
4309	Removes empty meta
4310	Save the model
4311	Check if an attachment exists
4312	Submit form callback
4313	Add the event date parameters to the permalink .
4314	Filters the event related data
4315	Return a single event date
4316	Returns the start date for the next episode .
4317	Finds closest element in array
4318	Returns an array of date parts
4319	Save point points
4320	Enqueue admin events
4321	Enqueues the frontend
4322	Formats a short date
4323	Import events .
4324	Import user publishing groups
4325	Check database table creation
4326	Initializes the database
4327	Check if event exists
4328	Make an API request
4329	Get events for a post
4330	Get Event Meta
4331	Limits a string to a limit .
4332	Get a list of locations that are near a location .
4333	Update an instance
4334	Ajax pagination
4335	Get module events
4336	Get module categories
4337	Returns an array of categories filtered by module id
4338	Returns an array of module groups
4339	Get Event Tags
4340	Answers an array of age filter ranges for the specified module .
4341	Callback for oauth request
4342	Sanitize the input array
4343	Single event data
4344	Get user groups
4345	Update event group value
4346	Event content .
4347	Check if event content is lead .
4348	Get custom content
4349	Register event categories
4350	Register Event Tags
4351	Register event groups
4352	Adds the import buttons .
4353	Imports events .
4354	Accept or deny a post
4355	Create the driver .
4356	Verifynel .
4357	Runs a command .
4358	Set signal handler
4359	Stop the daemon .
4360	Run the given process .
4361	Edit an action for a container .
4362	Create a new environment .
4363	Gets a widget instance .
4364	Renders a widget .
4365	Process the raw value bag .
4366	Process a single property .
4367	Hook for post validation
4368	Handle an event .
4369	Create a new instance of the driver .
4370	Configures Imagick settings
4371	Inject the driver settings .
4372	Handle the event .
4373	Returns the class name of the widget .
4374	Get the options for the widget .
4375	Execute the widget
4376	Enforce model relationships .
4377	Process the widget .
4378	Handle pre persist event .
4379	Handle post persist event .
4380	Translate a label
4381	Build field sets .
4382	Handles submit event .
4383	Get the heading for the edit page .
4384	Persists the model .
4385	Configure CAS .
4386	Parse the configuration .
4387	Configure CAS validation
4388	Get an attribute value
4389	Check if an attribute exists
4390	Logout action
4391	Sets the status code .
4392	Get key or null
4393	Determine if the current model is an integer key .
4394	Extracts segments from URL
4395	Adds containers from an array
4396	Build query .
4397	Wraps the query with rows counter
4398	Returns a fake model query .
4399	Generate an activation link for a key
4400	Assign user key to key
4401	Check if key is valid .
4402	Read Paging Info
4403	Register template files
4404	Register custom error handlers .
4405	Handle an authorization error
4406	Handles custom validation exceptions .
4407	Handle a not found exception .
4408	Get the last item from the list .
4409	Get Chrome UI components
4410	Attach event handlers
4411	Make a request to Guzzle
4412	Check if the asset is available .
4413	Sync assets to db
4414	Updates expired packages .
4415	Create a new client
4416	Get the URL for the connection .
4417	Get the port of the config .
4418	Validate the entity managers .
4419	Terminate a process .
4420	Lock a theme .
4421	Unlock a theme .
4422	Clones a book .
4423	Short description of method buildParameterValue
4424	Builds the widget for the parameter filter .
4425	Get sorted tables
4426	Check if database is configured
4427	Configure the database
4428	Get all migrations .
4429	Run the migration .
4430	Rollback migration .
4431	Resolve migration state .
4432	Get the migration table .
4433	Renders the source .
4434	Mount indentation .
4435	Set primary keys .
4436	Creates a new table .
4437	Update table .
4438	Drops the table .
4439	Renames the table .
4440	Executes the Blueprint .
4441	Get migration files .
4442	Create a unique filename .
4443	Bootstrap the application .
4444	Load Laravel application .
4445	Loads context initializer .
4446	Load the Laravel argument resolver .
4447	Applies the mailtrap configuration .
4448	Fetch the inbox .
4449	Request the Guzzle client .
4450	Reboots kernel .
4451	Resolve the arguments of the class .
4452	Opens a stream .
4453	Retrieves information about a stream
4454	Get stream stats
4455	Check if file exists
4456	Returns the filename for the given stream .
4457	Releases a file .
4458	Handle the given command .
4459	Check if an empty node is expanded .
4460	Exposes this class .
4461	Handles the request
4462	Call a procedure
4463	Renders the input for the checkbox .
4464	Enables a server .
4465	Extract types from a doc block
4466	Lists all available HTTP methods .
4467	Returns method signature
4468	Get help for a method
4469	Perform a multicall call .
4470	Load a class .
4471	Get version .
4472	Prints usage .
4473	Parses a boolean value .
4474	Parse the content of a file .
4475	Parse command line arguments
4476	Run the XRL command .
4477	Determine if the container is resolved .
4478	Get XML writer
4479	Finalize write
4480	Returns a reader for the current URI .
4481	Reads a node and returns it .
4482	Returns the start tag for the next start tag .
4483	Returns the closing tag for the next node .
4484	Parse text node
4485	Checks if the given value is allowed .
4486	Create a checkbox .
4487	Create an email field .
4488	Returns a select field .
4489	Register the section .
4490	Register a section .
4491	Register the settings sections .
4492	Register section settings .
4493	Display a captcha
4494	Get javascript link .
4495	Renders multiple captcha tags .
4496	Build the html for the captcha .
4497	Upload an asset .
4498	Get project .
4499	List projects .
4500	Create a template from a project .
4501	Get a template by id
4502	Returns a list of available templates
4503	Create a new job
4504	Get Job by ID
4505	Get jobs by template
4506	Get current user
4507	Gets the personal library for a user .
4508	Merge the values of the pre - request values .
4509	Get an LDAP user from LDAP .
4510	Set the LDAP configuration definition .
4511	Checks the error code for a user .
4512	Set the allowed types for the given options resolver .
4513	Set the credentials for the LDAP user .
4514	Switch the domain if needed .
4515	Switch to the current domain context if needed .
4516	Protected throw exception
4517	Get username password token .
4518	Add the domain parameter to the request .
4519	Transform the value for LDAP .
4520	Get the list of properties for the given object
4521	Set the LDAP object for the given property .
4522	Set the ldap value for the given property
4523	Builds the ldap login form
4524	Returns the values for the LDAP object .
4525	Get LDAP objects by query .
4526	Returns all operations of a domain
4527	Sets the roles for the user .
4528	Checks if a role group has a group .
4529	Checks if a group has a specific group .
4530	Logs a message .
4531	Save media .
4532	Update media by id .
4533	Get media by group
4534	Remove a media .
4535	Parse options .
4536	Get the filename for the current media .
4537	Rename file if exists
4538	Rename file .
4539	Get alt tag
4540	Get title .
4541	Returns the name of the media .
4542	Get media weight .
4543	Put new file .
4544	Remove existing media .
4545	Put the file in the storage .
4546	Clones the storage
4547	Make a directory .
4548	Clones a media .
4549	Boot pricing .
4550	Register the Sage Service Provider .
4551	Get the blade directives .
4552	Get config .
4553	Get svg instance
4554	Send an itemVariable to the given endpoint
4555	Transforms a QTI value into a string .
4556	Adds a variable to the output .
4557	Returns true if the variable is a file placeholder .
4558	Determines if a variable is a QtiFile .
4559	Convert a value to a QTI datatype .
4560	Create a new revision from an object .
4561	Recursive diff between two arrays
4562	Set ip
4563	Set the language
4564	Set the origin .
4565	Resolve origin URI
4566	Set the timestamp of the item .
4567	Pre save event handler
4568	Process the schedule .
4569	Before update callback
4570	Check if slug is unique
4571	Generate unique slug
4572	Set slug .
4573	Set creation date .
4574	Set last modification date .
4575	Set route options
4576	Set the master .
4577	Retrieve the children of this node .
4578	Get or set of siblings .
4579	Load object from source
4580	Load an object from the cache .
4581	Add an object to the cache .
4582	Retrieve category items
4583	Retrieve the slug pattern .
4584	Retrieve slug prefix
4585	Retrieve slug suffix
4586	Determine if the route is sluggable .
4587	Set slug .
4588	Generate the slug for this route
4589	Generate route pattern
4590	Filter route token .
4591	Generate object route
4592	Get the URL for the current object .
4593	Slugifies a string .
4594	Finalize slug .
4595	Delete object routes
4596	Create route collection loader
4597	Get all revisions
4598	Set the publication date
4599	Set the expiry date .
4600	Set the publish status
4601	Retrieve the publish status for this entry
4602	Display the help page
4603	Rewrite routes
4604	Reset the source data .
4605	Returns the next item
4606	View site page
4607	Show site overview page
4608	Browse logs
4609	Browse events
4610	Returns an array of permissions
4611	Index action .
4612	Deletes an item
4613	Restore an item
4614	Sort the user
4615	Checks if an item can be deleted
4616	Get title single .
4617	Returns list of dropdown filters
4618	Get post object
4619	Retrieves an item
4620	Redirects to the index
4621	Adds an option
4622	Adds multiple options at once
4623	Get an option
4624	Handle method call
4625	Set batch status
4626	Set batch download id
4627	List admin controllers
4628	Find admin controllers
4629	Load admin controllers
4630	Load admin controller
4631	Load admin class
4632	Routes the request
4633	Load a view
4634	Load CSV data
4635	Load an inline view
4636	Load search data
4637	Returns the value of an option for the given key .
4638	Loads a pagination object
4639	Loads a cell .
4640	Loads a user cell
4641	Load date cell
4642	Load date time cell
4643	Load a boolean cell
4644	Loads the settings component table .
4645	Adds a header button
4646	Displays a dynamic table
4647	Save the user preferences
4648	Execute command .
4649	Creates the source file
4650	Format a row .
4651	Add a new action
4652	Set admin data
4653	Unset admin data
4654	Unset admin data
4655	Clear admin meta data
4656	Get all logs
4657	Find the config file
4658	Loads JS files
4659	Loads CSS files
4660	Loads the libraries
4661	Auto load services
4662	For backwards compatibility
4663	Site action .
4664	Prepare whitelist
4665	Extracts the settings from a component
4666	Get source by slug
4667	Get a format by it s slug
4668	Export data to a file
4669	Handle the failed execution
4670	Adds an item to the list
4671	Save changes to database
4672	Returns all users
4673	Get common data
4674	Formats an object
4675	Overrides parent method
4676	Validates user input
4677	Get model class and id
4678	Format an object
4679	Set the current date
4680	Add daily html
4681	Sets the start of the week .
4682	Writes a string to the output stream .
4683	Submit a bonus adjustment
4684	Assign tasks to a team .
4685	Assign tasks to engagement
4686	Retrieves a report by a specific distributor reference
4687	Retrieves a report by a StripeTeam reference .
4688	Retrieves a report for a single company
4689	Get report by buyer_team_team_reference
4690	Get a report by BuyersCompany
4691	List all engagements
4692	Get a specific engagement information
4693	Returns full URL
4694	Get a list of offers
4695	Returns information about a contract
4696	Get a specific account information
4697	Get all roles
4698	Returns roles of a specific user
4699	Invite a candidate .
4700	Get entities by company
4701	Get by company
4702	Get users in team
4703	Get a list of jobs
4704	Get job information by key
4705	Create a new job
4706	Edit a job
4707	Delete a job
4708	Get information about the user .
4709	Get information about a user
4710	Get task by type
4711	Get room details
4712	Get room by offer
4713	Get room by application id
4714	Get room by contract
4715	Create room
4716	Send a message to a room
4717	Update room settings
4718	Update room metadata
4719	Get a snapshot for a specific contract
4720	Update a team
4721	Delete a team snapshot
4722	Get the milestone for a contract .
4723	Get a milestone
4724	Create a milestone .
4725	Edit a milestone .
4726	Delete a milestone .
4727	Perform an HTTP request .
4728	Bootstrap the accountkit .
4729	Get content body .
4730	Get AccountKit data
4731	Display a list of contact .
4732	Display contact .
4733	Show a form to create a new contact .
4734	Show contact for editing .
4735	Update the contact .
4736	Remove the specified contact .
4737	Display contact quiz
4738	Get contact by id
4739	Determine if the given contact should be viewed .
4740	Update contact .
4741	Destroy contact .
4742	Display contact list .
4743	Parse HTML content .
4744	Returns an array of all available previews
4745	Returns a preview of the parser
4746	Adds a parser .
4747	Removes a parser .
4748	Add default parsers
4749	Creates a contrast from a hexadecimal color
4750	Closes a path to a given path .
4751	Converts an interval to an interval .
4752	Boot the application and load the file .
4753	Get time zone data
4754	Returns an array of time zones
4755	Get model relation .
4756	Add a join clause to the query .
4757	Get the client
4758	Convert a value to a number
4759	Lookup key value by key .
4760	Set the availability time .
4761	Get payload attribute .
4762	Converts a number of bytes to a number of bytes .
4763	Calculate time offset
4764	Generate a time string
4765	Truncate a string
4766	Add a permission to a Topic
4767	Confirm a subscription
4768	Create a Topic
4769	Retrieves the attributes of a topic
4770	List Subscriptions
4771	List Subscription By Topic
4772	List topics .
4773	Publish a Message to a Topic
4774	Remove a permission from a Topic
4775	Set Topic Attributes
4776	Subscribe to a Topic
4777	Create platform endpoint
4778	Publish a message to Endpoint .
4779	Perform an API request
4780	Convert XML to array
4781	Clears the session .
4782	Convert priority to uppercase
4783	Run the task .
4784	Configure the settings tabs
4785	Get an invitation by code
4786	Create default settings tabs .
4787	Creates a Coupon instance from a Stripe coupon .
4788	Retrieves a coupon
4789	Get a coupon for a user
4790	Get team information
4791	Get team roles
4792	Update the user profile
4793	Validates the user profile .
4794	Update the Stripe customer address .
4795	Installs the stylesheet
4796	Install environment variables
4797	Subscribe a user to Stripe .
4798	Change subscription plan .
4799	Update the card .
4800	Update extra billing info .
4801	Cancels a subscription .
4802	Resumes a subscription .
4803	Downloads an invoice
4804	Set price .
4805	Set currency symbol .
4806	Set trialDays .
4807	Set or get the tier
4808	Set or get features
4809	Get the current user .
4810	Creates a user based on a registration request .
4811	Create new user .
4812	Create default user .
4813	Create a Stripe subscription on Stripe .
4814	Register TwoFactor Authentication
4815	Check if token is valid
4816	Delete a user authentication provider
4817	Display the dashboard .
4818	Invite a user by email
4819	Remove user by id
4820	Send a user invitation to a team .
4821	Accepts a team invitation .
4822	Make a new Tab .
4823	Determine if the tabs should be displayed .
4824	Define resources .
4825	Define services .
4826	Send an invoice .
4827	Determine if the payment has been completed .
4828	Create a new team
4829	Get all teams for a user
4830	Get the pending invitations for a user .
4831	Attach a user to a team .
4832	Find a plan .
4833	Returns a collection of plans .
4834	Get current team
4835	Determine if the current user is owned .
4836	Get team role .
4837	Create a new team .
4838	Edit team settings .
4839	Update team .
4840	Switch the current team to the given user .
4841	Updates a team member .
4842	Remove team member
4843	Leave a team
4844	Delete team .
4845	Call custom validator .
4846	Call a custom updater .
4847	Update the old password .
4848	Enable TwoFactor Authentication
4849	Validate Enable Two Factor Auth
4850	Disable TwoFactor Auth
4851	Handles authentication .
4852	Logout and redirect to the token screen
4853	Save a new token
4854	Show the checkout page .
4855	Validate user registration .
4856	Validates default registration .
4857	Validates the coupon code .
4858	Logout user .
4859	Flash a flash message .
4860	Create an event
4861	Register an exception .
4862	Exports an exception to a PHP error handler .
4863	Import an exception
4864	Normalizes an event .
4865	Returns a wrapper for a handler .
4866	Creates a cached event .
4867	Checks if the given event exists in the cache .
4868	Get a cached event .
4869	Remove an event from the cache .
4870	Creates a wrapper function for the WP handler .
4871	Export exception handler
4872	Imports an exception .
4873	Removes a hook .
4874	Replace the given hook .
4875	Get stacked items
4876	Clear all buffering items
4877	Send message to pool
4878	Deactivates a task
4879	Bootstrap the application .
4880	Filters the pool .
4881	flatMap method .
4882	Applies the given callback to each callable .
4883	Perform parallel task .
4884	Converts a result array into an array of errors .
4885	Sets the number of args .
4886	Runs a hook .
4887	Applies filters to a value .
4888	Add a hook .
4889	Wrap the given function .
4890	Resumes the pool .
4891	Stop the loop .
4892	Destroy the loop .
4893	Get worker socket
4894	Remove worker socket
4895	Prepare a worker .
4896	Attach method hook handler
4897	Hash a callable
4898	Write data to the stream .
4899	Pipe this stream to another stream .
4900	Handles data received from the server .
4901	Write data to the socket .
4902	Checks socket errors .
4903	Removes a listener from the stream .
4904	Removes a listener from the stream .
4905	Decode message .
4906	Attach timer .
4907	Cancels the timer
4908	Submits a worker to the thread .
4909	Submits a worker to a worker .
4910	Submit async task .
4911	Send an async task to the worker .
4912	Stop worker .
4913	Remove worker .
4914	Sends a message to a worker .
4915	Send a message to all workers
4916	Ticks all workers in the queue .
4917	determine worker tick
4918	Spawns a new worker
4919	Check if worker is running .
4920	Check worker shutdown .
4921	Handles a message .
4922	Close a stream .
4923	Read bytes from the current binary stream .
4924	Read a UUID
4925	Read a list of values
4926	Read a map definition
4927	Read a varint
4928	Read a decimal value .
4929	Register the BulkSMS service .
4930	Boot the package .
4931	Send a message .
4932	Validates the response
4933	Sends a bulk SMS array to the client .
4934	Gets the status for a batch .
4935	Send all messages
4936	Generate CSV
4937	Send a sms message
4938	Sets the message .
4939	Calculate the concat limit
4940	Parses an SMS recipient number .
4941	Send batch .
4942	Finds models by filters
4943	Returns the number of related models .
4944	Add a filter to the query builder .
4945	Add search filter .
4946	Add a range filter to the query builder .
4947	Get field value
4948	Get all fields
4949	Builds configuration by dynamic dynamic configuration .
4950	Builds a configuration by type .
4951	Builds the admin mail configuration based on the dynamic settings .
4952	Builds the website mail configuration based on the dynamic configuration .
4953	Get file fields by dynamic dynamic
4954	Get collection id by dynamic .
4955	Get email from Dynamic
4956	Get email .
4957	Build the form .
4958	Create a form .
4959	Load the form entity for the given id .
4960	Returns default values for form fields .
4961	Get the webspace key .
4962	Checks if the given form is valid .
4963	Returns a hash for the given form id .
4964	Returns a list of all entries .
4965	Returns list of fields .
4966	Delete a media entity .
4967	Get filters from request .
4968	Load form by id .
4969	Convert a value to a string .
4970	Get media urls
4971	Get download url
4972	Returns the list of available choices .
4973	Returns the options for the form field .
4974	Get form by id
4975	Handles the form submission .
4976	Get form translation .
4977	Get field by key
4978	Returns all fields not in an array .
4979	Serializes the fields for the given locale .
4980	Handle form submission .
4981	Ajax form action .
4982	Handle form submit .
4983	Handles form submission .
4984	Renders a CSRF token .
4985	Get form errors
4986	Handle form submission .
4987	Save form configuration .
4988	Handles uploading of media .
4989	Map media ids .
4990	Get media data .
4991	Get MailChimp List
4992	Returns a builder instance .
4993	Returns block prefix
4994	Create a new collection .
4995	Load collection id .
4996	Get item width
4997	Returns the width of the next width
4998	Throws an exception based on a PDOException .
4999	Set the hostname
5000	Setter for unix socket
5001	Set the memory usage
5002	Set filePath
5003	Set database name
5004	Set charset .
5005	Ensure the connection is connected .
5006	Configures a database connection
5007	Execute a query and return the results .
5008	Get all queues
5009	Get queue information
5010	Create an IronMQ message .
5011	Send messages to IronMQ
5012	Get message by queue id
5013	Touch a message
5014	Release a message
5015	Add alerts to a queue
5016	Delete an alert by id
5017	Delete a queue
5018	Update a queue
5019	Create a queue
5020	Replace the subscribers of a queue .
5021	Remove subscriber from queue .
5022	Output a JSON string .
5023	Output an XML string
5024	Generate XML from given data
5025	Output CSV data .
5026	Flattens an array .
5027	Execute the command .
5028	Format server stats .
5029	Format the usage .
5030	Formats uptime .
5031	Adds a server to the pool
5032	Adds servers to the pool
5033	Check if the server is open
5034	Gets a value from the cache .
5035	Stores a value in the cache .
5036	Delete a value from the cache .
5037	Set the cache client interface .
5038	Get a value from the cache .
5039	Delete a key
5040	Makes an invalid argument exception .
5041	Populate builder .
5042	Set options .
5043	Set the notification .
5044	Set the payload data .
5045	Encode a CDATA string
5046	Get non authentication URL .
5047	Returns the authentication URL for the given action .
5048	Get Advanced Authentication Url
5049	Builds a simple authentication URL .
5050	Get the HTTP authentication URL .
5051	Ensure channel parameter is set .
5052	Set the product ID .
5053	Get similar attributes
5054	Get similar records
5055	Writes string to file
5056	Autoload a class
5057	Set target .
5058	Trigger data import .
5059	Trigger a suggest import .
5060	Applies a set of parameter mappings .
5061	Ensure channel parameter is valid .
5062	Add required parameters .
5063	Adds an appender to the pool .
5064	Get appender
5065	Log a message to the logger .
5066	Log debug message
5067	Log a warning message .
5068	Log an event to the logger .
5069	Logs an event to the logger .
5070	Called when a logger is logged .
5071	Removes an appender .
5072	Get effective level
5073	Get the logger hierarchy
5074	Get logger by name
5075	Reset all configuration
5076	Configure the hierarchy
5077	Get the logger configurator .
5078	Set the record count .
5079	Adds product IDs to the request .
5080	Get recommendations .
5081	Track a click tracking .
5082	Track a cart tracking
5083	Track a checkout tracking
5084	Track a recommendation click .
5085	Track login tracking .
5086	Set product IDs .
5087	Get comparable attributes
5088	Get comparison records
5089	Converts the given string to a formatted string .
5090	Set boolean value .
5091	Set the value of the given property .
5092	Set the file size .
5093	Set the value of a numeric property .
5094	Set the string for the given property .
5095	Get location information
5096	Get start time
5097	Get the time of the event
5098	Returns request instance
5099	Gets the tag cloud .
5100	Set word count .
5101	Add the feedback to the message .
5102	Set the product numbers .
5103	Adds product numbers to the request .
5104	Set the pageId .
5105	Make Product Campaign
5106	Make shopping cart campaign .
5107	Get all campaigns
5108	Returns raw product campaigns
5109	Adds a converter to the chain .
5110	Returns the converter for the given word .
5111	Parses Logger formatting information .
5112	Set logger level
5113	Adds a renderer to the map .
5114	Sets the default renderer class .
5115	Get a class by its class name .
5116	Get the whitelist server parameters
5117	Parse INI file
5118	Convert a log file to an array .
5119	Parse the logger .
5120	Parse an appender
5121	Parse the renderer .
5122	Append an event to the log .
5123	Parse the log option .
5124	Parse the facility .
5125	Parse syslog priority
5126	Appends a logging event to the collection .
5127	Format an exception throwable .
5128	Closes the connection .
5129	Configure logger hierarchy
5130	Creates the appender layout .
5131	Set the ids only .
5132	Get follow search value
5133	Adds next filter
5134	Set the response .
5135	Set the session ID .
5136	Checks if another level is equal .
5137	Gets the level off of the logger
5138	Returns the level of the log level .
5139	Returns the error level for the log level .
5140	Returns the level of the LoggerLevel
5141	Gets the log level for this logger .
5142	Get LogLevel
5143	Returns the level associated with the log level .
5144	Get all LoggerLevels
5145	Converts an argument to a level .
5146	Get system property
5147	Converts a value to a log level .
5148	Converts a value to a string representation .
5149	Replaces constants in a string .
5150	Returns a logger by name .
5151	Returns the request target
5152	Initializes the conversion pattern
5153	Format the logging event .
5154	Adds a filter to the collection .
5155	Checks to see if the current level is greater than the given threshold .
5156	Write an error message to the log
5157	Returns the suggestions .
5158	Returns the class name of the factfinder .
5159	Rolls back the old backup file .
5160	Initializes the logger .
5161	Append an event to the logger .
5162	Format the logger logging event .
5163	Generate the URL for the given parameters
5164	Get the feedback .
5165	Get all pushed products
5166	Get all active questions
5167	Get advisor tree
5168	Sets the options for the event .
5169	Append a logging event .
5170	Finds a permission by its ID .
5171	Finds a permission by its value .
5172	Renders an item .
5173	Setup layout .
5174	Get a list of users
5175	Show create form .
5176	Create new user .
5177	Attempt to activate a user
5178	Display user permissions
5179	Display a listing of the groups
5180	Update a group .
5181	Remove user from a group
5182	Adds user in group .
5183	Validate group values
5184	Loads the includes .
5185	Register the helpers .
5186	Get the index view .
5187	Authenticate user .
5188	List permissions .
5189	Create a new Permission
5190	Delete a permission
5191	Paginate the pdf
5192	Authenticate a user
5193	Generate a nonce
5194	Check if a flag is set
5195	Gets a specific rule
5196	Determine if the given flag is required .
5197	Check if a rule is required
5198	Determine if the given flag is optional .
5199	Parse command line arguments
5200	Check if string is param
5201	Order parameters .
5202	Authenticate client .
5203	Get report Api
5204	Returns Permissions API
5205	Returns company API
5206	Get OAuth Api
5207	Perform an HTTP request .
5208	Get list of elements
5209	Get metrics for a specified report
5210	Retry and retry a report
5211	Get the number of seconds between the given attempts .
5212	Parse an array of options .
5213	Perform a GET request .
5214	Retrieve all images
5215	Retrieve a list of videos .
5216	Output a string .
5217	Get a table definition .
5218	Gets the drop table definition .
5219	Gets drop table data .
5220	Get table key .
5221	Gets the table key .
5222	Get foreign keys
5223	Gets the drop foreign key .
5224	Get columns definition
5225	Get primary key .
5226	Get table comment
5227	Gets the type of a column .
5228	Registers a column definition .
5229	List table .
5230	Generate migration file
5231	Creates a new table .
5232	Drop table .
5233	Generate the file
5234	Prints data to a table .
5235	Gets the parameters for a table .
5236	Start a printf
5237	Ends a printf
5238	Outputs final result .
5239	Fetch the webservices
5240	Populate the response
5241	Set Webservices URL
5242	Returns an array of groups
5243	Get LDAP group by DN
5244	Returns a list of users
5245	Get User by GUID
5246	Get a user by DN
5247	Retrieves a user by their email address
5248	Retrieves a user by their username
5249	Get username by email
5250	Returns the members of the specified DN
5251	Update a group from LDAP data .
5252	Creates a new LDAP user
5253	Creates a new LDAP group .
5254	Updates the LDAP user from a member .
5255	Update LDAP groups for a member
5256	Change the password of a member
5257	Delete LDAP member
5258	Updates an index
5259	Connect to the server
5260	Closes the socket
5261	Receive a string from the socket
5262	Send string to server
5263	Encode a string
5264	Decodes a string .
5265	Read the response from the server
5266	Authenticate the user
5267	Checks if the start time of the login time was taken
5268	Creates the LDAP user if enabled .
5269	Write an object without sync
5270	Get the message from the logged in user .
5271	Form for the lost password form
5272	Display the password reset page
5273	Perform LDAP search
5274	Get LDAP group by GUID .
5275	Change a password
5276	Password reset password
5277	Moves an Ldap .
5278	Authenticate the user
5279	Fallback authenticator
5280	Handles authentication form
5281	Validates SP metadata
5282	Returns the endian of a hexadecimal string .
5283	Returns an array of field values
5284	Selects one or more items .
5285	Splits a hash into its parts .
5286	Factory method to create a database object .
5287	Get table definition
5288	Get all tables
5289	Fix table indexes
5290	Compare two indexes
5291	Get one row from the database .
5292	Build index name
5293	Encodes data .
5294	Generate a random key
5295	Returns information about a spec .
5296	Hash a string using HMAC
5297	Verify HMAC signature
5298	Verify the timestamp .
5299	Remove a string from the beginning of the string .
5300	Push string onto end of string
5301	Twig wrapper for twiddle
5302	Get error message
5303	Adds an error to the collection .
5304	Gets or sets the main message .
5305	Validation status .
5306	Get error message
5307	Returns all errors as an array
5308	Is field valid?
5309	Parse a schema array
5310	Require one of the given fields
5311	Validate data against the schema .
5312	Validates a field .
5313	Validate array values
5314	Validate base64 encoded value
5315	Validate a boolean value .
5316	Validate datetime value
5317	Validate if given value is float
5318	Validate an integer .
5319	Validate an object
5320	Validates required values
5321	Validate if given value is string
5322	Validate a timestamp .
5323	Get all registered addons
5324	Initializes the plugin .
5325	Get a value from the cache .
5326	Get class map
5327	Get enabled addons
5328	Returns information about an addon
5329	Scan the given directory recursively
5330	Scan addon .
5331	Returns an array of addons
5332	Start an addon
5333	Get all headers
5334	Call a user func array
5335	Binds an event
5336	Binds an event to a class .
5337	Dump event handlers
5338	Fire an event .
5339	Fire an event
5340	Fire an event filter
5341	Checks if a function exists .
5342	Get event name
5343	Get handlers by name
5344	Determine if the given event exists .
5345	Check if method exists .
5346	Returns the value of the driver .
5347	Set the value of the driver .
5348	Splits a salt string
5349	Get the path to the configuration file .
5350	Get a value from an array .
5351	Load configuration data
5352	Save a configuration array
5353	Returns all routes matching the given request .
5354	Register a new route
5355	Finalize the result .
5356	Check if an action exists
5357	Returns an array of allowed HTTP methods
5358	Determine if the request matches the route .
5359	Determine if a condition fails .
5360	Get current item
5361	Creates a response object from a result
5362	Gets or sets the Content - Type header
5363	Gets or sets the content asset .
5364	Sets the content type based on the accept header .
5365	Returns HTTP status message
5366	Set a cookie
5367	Set global cookies
5368	Set or get meta
5369	Set or get the response s data
5370	Set headers .
5371	Set global headers
5372	Normalize HTTP header .
5373	Flush all headers
5374	Alter a table
5375	Rename table .
5376	Drops an index .
5377	Creates a new index .
5378	Force type .
5379	Get PK value
5380	Get tablenames
5381	Creates a new route
5382	Set or get conditions
5383	Set or get methods
5384	Set or get mappings
5385	Get or set global mappings
5386	Check if given name is mapped .
5387	Get mapped data .
5388	Checks if the request matches the configured methods .
5389	Get or set the route pattern .
5390	Dispatch a request
5391	Get the regular expression for a route pattern .
5392	Executes a query against the database .
5393	Build a select query
5394	Callback for bracket list
5395	Build an insert query
5396	Builds an upsert query
5397	Generate a string representation of a column definition .
5398	Builds the index definition string for the given index
5399	Get column orders
5400	Get formats from database .
5401	Translate a row
5402	Verify a password
5403	Encode a number of bytes .
5404	Returns the current item .
5405	Set default environment
5406	Get global environment variable
5407	Parse server variables
5408	Override the environment
5409	Get env value
5410	Set environment variable
5411	Get all headers
5412	Get host and port
5413	Set the extension
5414	Set the extension of the environment
5415	Set full path
5416	Set the port
5417	Get query parameter
5418	Set a query parameter
5419	Get an input
5420	Gets data from the request .
5421	Set data .
5422	Get the current url
5423	Set the URL of the request
5424	Generate a URL for the given path .
5425	Splits the path into an extension .
5426	Reset all properties
5427	Define a column .
5428	Define column definition
5429	Set primary key .
5430	Execute the query
5431	Set or get table name
5432	Generates an index
5433	Display a list of robots .
5434	Get all resources
5435	Find a resource .
5436	Validate the Jaxon request
5437	Get an attribute value
5438	Set attribute values
5439	Checks that API method is supported
5440	Check required attributes
5441	Checks the Jalo ID for the current request .
5442	Returns a summary of the response .
5443	Get a model by name
5444	Get error summary
5445	Get a resource
5446	Make a POST request .
5447	Populate the attributes of the input
5448	Validate required attributes
5449	Checks if a key exists in an array
5450	Render the notifications
5451	Adds a new notification
5452	Create a new delivery
5453	Convert a job into an array
5454	Convert a job into a Job object .
5455	Frees poll .
5456	Frees the poll .
5457	Create a new chart
5458	Handles an item request .
5459	Sorts the list of relations
5460	Returns the link to the item .
5461	Returns the detail form .
5462	Saves the detail of the cart .
5463	RSS feed item
5464	Recent edit links
5465	Updates the member s dashboard .
5466	Returns the template name for this subject .
5467	Answers the view for the CMS page .
5468	Answers the link for the CMS page .
5469	Get Grid Fields for SiteTree
5470	Get grid field
5471	Gets the tab name for this grid
5472	Gets the list of items for this item
5473	Get grids for a specific page
5474	Request account data
5475	Cleans error response
5476	Process filter .
5477	Mapper API for ListObject
5478	Report object mapper
5479	Check if key exists in array
5480	Fetch a token .
5481	Get the URL for this request
5482	Send post request
5483	Perform an HTTP GET request
5484	Perform an HTTP request
5485	Make a cURL request
5486	Wrapper for FopenRequest
5487	Returns an array of recent files
5488	Duplicate this panel .
5489	Returns the CMS template name .
5490	Returns the URL to view all links .
5491	Gets the list of items for the ModelAdmin
5492	Get the models for a panel .
5493	Provide the permissions for the dashboard .
5494	Sort panels .
5495	Set default dashboard configuration
5496	Applies all dashboard panels to all members .
5497	View the panel .
5498	Delete the panel .
5499	Retrieves the configuration form
5500	Save the configuration .
5501	Returns the theme s icon
5502	Convert seconds to seconds
5503	Get the gapi
5504	Answers the configuration for the Google Analytics page .
5505	Checks if the user is configured .
5506	Answers the path for the subject .
5507	Get Chart Title
5508	Read a floating point value .
5509	Read data from a binary stream .
5510	Converts a value to a hexadecimal representation .
5511	Read a BinaryReader
5512	Read a signed value
5513	Reads an unsigned 16 - bit integer from the current binary stream .
5514	Read signed bit from the stream .
5515	Read a 64 - bit integer from the current binary stream .
5516	Read a signed 16 - bit value
5517	Export trace data .
5518	Returns a TraceClient instance .
5519	Parse robots txt .
5520	Extracting lines from the robots . txt
5521	Builds an array of expression objects
5522	Gets the content of the robots . txt content .
5523	Gets the robots txturl
5524	Initializes the crawler process .
5525	Perform the multi - process .
5526	Start child process .
5527	Checks for the abort status .
5528	Creates the working directory .
5529	Gets the report for this crawler .
5530	Add link priority
5531	Set the follow mode .
5532	Set the traffic limit
5533	Set the working directory .
5534	Set a proxy for a page request .
5535	Set connection timeout
5536	Set socket timeout
5537	Resumes the current crawler .
5538	Set the baseURL of the application .
5539	Determine if redirect URLs should be shown .
5540	Checks if the url matches the rules of the url
5541	Add a URL filter rule
5542	Adds an array of rules to the URLFilter object
5543	Mark a URL as followed .
5544	Checks if there are any URLs in the cache
5545	Get all URLs
5546	Add multiple URLs
5547	Starts a benchmark .
5548	Stops a benchmark
5549	Reset all benchmark results .
5550	Returns all benchmark benchmarks .
5551	Get microtime
5552	Opens the database connection .
5553	Determine the URL hash
5554	Returns the priority of the given URL .
5555	Add link priority
5556	Add link priority
5557	Adds a PHPCrawlerDocumentInfo to the queue .
5558	Gets the next document
5559	Creates an instance from a URL .
5560	Set the source url
5561	Find a redirect link in the http header .
5562	Add post data
5563	Update the page crawler status
5564	Register a child pid
5565	Returns an array of PIDs
5566	Kill child processes
5567	Returns the IP address of the given host
5568	Check if URL host is in cache .
5569	Remove visitor .
5570	Traverse XPath expression .
5571	Filters an expression .
5572	Creates a new instance of a method .
5573	Format the value .
5574	Format the values .
5575	Writes configuration values to a file .
5576	Consume a value
5577	Get registered engines
5578	Expand a multidimensional array into an array .
5579	Splits a token into an array of conditions .
5580	Checks if the given key matches the given token .
5581	Cache a value
5582	Set message instances .
5583	Create a backtrace
5584	Export a variable .
5585	Listen for messages .
5586	Parse a message
5587	Returns the file path for the given key .
5588	Loads a plugin
5589	Load plugin configuration .
5590	Load all configs
5591	Loads the bootstrap file .
5592	Read configuration file
5593	Sets a configuration value .
5594	Read configuration value
5595	Load module files
5596	Checks all installed plugins
5597	Unload a module
5598	Reload module .
5599	Returns the time loaded for a given module .
5600	Check if module is modified
5601	Gets a module
5602	Check if module exists
5603	Set module offset
5604	Get the value of a key .
5605	Set a value in the cache .
5606	Get multiple values by keys .
5607	Set multiple values at once
5608	Call a method on the pool
5609	Called before a JoinPoint is started .
5610	Retrieves the end of a JoinPoint
5611	Get the profile key .
5612	Registers a command for all arguments .
5613	Merge two arguments .
5614	Evaluates the given prefix .
5615	Set the expiration time .
5616	Sets the length of the message .
5617	Read data from the server .
5618	Send data to server .
5619	Checks if the command can be executed .
5620	Set the client protocol version
5621	Process the given data .
5622	Get the last key
5623	Prepares the command for execution .
5624	Executes the current request
5625	Read raw data from the socket
5626	Reads an unsigned 64 - bit integer .
5627	High level function to read a string .
5628	Read bytes from the stream .
5629	Read record .
5630	Add bytes to the request .
5631	Unpacks 64 - bit integer .
5632	Reset the object data .
5633	Returns an array of properties
5634	Renders a component .
5635	Gets the class names for the given arguments .
5636	Gets a list of Ids that match the request .
5637	Get allowed products
5638	Processes the products to be checked .
5639	Create a new Order
5640	Create a new Order
5641	Creates a new Order .
5642	Creates a new order .
5643	Creates a new order with a credit card number
5644	Create a new order
5645	Creates a new Order .
5646	Create a new Order
5647	Create a new order
5648	Create a new Order
5649	Create a new order after payment .
5650	Creates a new Order .
5651	Get Order by id
5652	Post Order .
5653	Update the status of an order
5654	Creates a new payment instance with the specified ID value .
5655	Create a new payment instance with a credit card number
5656	Creates and returns a new instance of a payment method .
5657	Create a new instance with the given amount
5658	Create a new instance of BanContact .
5659	Create a new instance of Paypal .
5660	Create a new instance with the home payment details
5661	Creates a new payment instance .
5662	Create a new Transaction
5663	Remove null values from an array .
5664	Creates a new client
5665	Get the endpoint for the given product .
5666	Checks if the given value is valid .
5667	Build the request body for the intent .
5668	Execute an authorization request
5669	Capture an authorized payment
5670	Authorize an access token
5671	Create a new payment
5672	Get an access token for a client
5673	Build a link
5674	Builds Paypal capture .
5675	Builds the amount for the given data .
5676	Build an array of URLs
5677	Builds an AccessToken object from provided data .
5678	Builds an array of transactions
5679	Build an array of transactions
5680	Send a request
5681	Builds a payment
5682	Builds a Paypal PaymentAuthorization object .
5683	Build a Payer from an array of data .
5684	Build array of payment data
5685	Builds an authorization object from the given data .
5686	Make safe string
5687	Make safe string
5688	Get value from form .
5689	Checks if the key has mutator .
5690	Get reflection class
5691	Renders a favicon tag .
5692	Generate an HTML link .
5693	Generate an ol element .
5694	Create ul element
5695	Get value from model .
5696	generate html text input
5697	generate an email field .
5698	generate tel input field
5699	generate a number field .
5700	generate a url input
5701	generate a color input
5702	Returns the checked state of a checkbox .
5703	Get the url for an attribute
5704	Get the url for an attribute .
5705	Get controller action
5706	Inserts a string
5707	Searches for a string
5708	Array access .
5709	Unset a value
5710	Fetch data from the stream .
5711	Parse a file .
5712	Get line count .
5713	Unzip a zip file
5714	Get Content - Length header
5715	Get the list of files
5716	Free the stream .
5717	Removes the buffer .
5718	Seek to the given position
5719	Inserts data into the buffer .
5720	Replace data in the current iterator .
5721	Remove a value from the iterator .
5722	Publish a directory .
5723	Closes the resource .
5724	Query scope for admin1 .
5725	Query scope for adding country info
5726	Query scope for city search
5727	Scope a query to search for a country .
5728	Query scope for finding a feature .
5729	Creates the pending redirects .
5730	Checks if a node URIs has been updated or not .
5731	Builds the redirects for the given node
5732	Creates a redirect URI for the given node
5733	Removes a redirect if needed .
5734	Returns true if the current node is restricted by the given NodeType .
5735	Returns true if the current node is restricted by the given path .
5736	Returns the hostnames of the current site .
5737	Get UriBuilder
5738	Loads the name for the given parameter .
5739	Validate domain name
5740	Renders the page picker
5741	Render a label tag
5742	Initializes the admin panel .
5743	Plugin action links .
5744	Returns the version number of the plugin .
5745	Get remote version
5746	Check the file type and extension .
5747	Checks that the given file type is valid .
5748	Parse the contributors from a file .
5749	Get plugin slug by path .
5750	Get remote contributors
5751	Validate the file
5752	Returns the loader for the given data
5753	Loads the content of the given data .
5754	Create options array
5755	Get allowed tags
5756	Get allowed protocols
5757	Get allowed domains
5758	Sanitize domain
5759	Sanitize an attribute value .
5760	Sanitize uri value
5761	Sanitize the attribute value
5762	Load svg .
5763	Strip comments from svg
5764	Generate the flags for a resource .
5765	Creates the loaders .
5766	Pre parse loaders .
5767	Makes the namespace loaders .
5768	Parse options .
5769	Creates a new cache provider .
5770	Prepares paths for caching .
5771	Make a loader provider .
5772	Make variables provider .
5773	Load data from cache .
5774	Merge globals .
5775	Get a resource
5776	Creates a prefix for a relative path .
5777	Creates the resources .
5778	Add content to the view .
5779	Get supported files in directory
5780	Merge content .
5781	Get value from an array .
5782	Check if an array key exists
5783	Parses a value into an array .
5784	Parse a variable .
5785	Determine if the given variable matches the given regular expression .
5786	Fetch an environment variable
5787	Check if a variable exists .
5788	Perform replacements .
5789	Export svg as a string
5790	Remove nodes .
5791	Remove a node
5792	Set the path to the file .
5793	Make file paths .
5794	Perform an array of resources
5795	Parse content .
5796	Process the imports .
5797	Import resource .
5798	Create an import resource .
5799	Create import name
5800	Import a resource .
5801	Checks if the given value is a boolean value .
5802	Get boolean value
5803	Return an array of MIME aliases
5804	Updates the extension of a filename .
5805	Checks if an alias is valid
5806	Check allowed aliases
5807	Loads config .
5808	Get supported files
5809	Make an array of resources
5810	Check if the cache is valid .
5811	Make the cache .
5812	Sets the version of the asset .
5813	Reads a YAML file .
5814	Send a HTTP request
5815	Set curl options
5816	Perform a GET request
5817	PUT method
5818	Executes a DELETE request .
5819	Make post request
5820	Send HEAD request
5821	Execute a curl request
5822	Install an extension
5823	Add buckets .
5824	Reads the content from the URI .
5825	Write the XML content
5826	Checks XML validity
5827	Set up a range
5828	Get values as element
5829	Append values options to a dom node .
5830	Add an aggregate .
5831	Get the view params
5832	Perform a search .
5833	Retrieves a key value by key
5834	Retrieve a key - value element .
5835	Highlight a resource
5836	Get the REST client .
5837	Get the REST client .
5838	Get the REST API client .
5839	Get the API instance .
5840	Get database object
5841	Get options instance
5842	Autoload the class
5843	Returns the search result as XML .
5844	add an option
5845	Adds an option to the xml string .
5846	Read a config
5847	Writes the current query .
5848	Delete a config
5849	Set search options
5850	Read a document .
5851	Write the document to the URI .
5852	Delete a document
5853	Reads metadata from the current category .
5854	Write metadata to a file .
5855	Delete all metadata
5856	Set the content of the file .
5857	Get the mime type of a file
5858	Logs a soap call .
5859	Decodes the SOAP reply
5860	Converts an associative array to an associative array
5861	Do Ldap sync
5862	Returns an array of phone names
5863	List all phones in a site
5864	Search for phone by name
5865	Search for phones
5866	Get phone by name
5867	Returns the number of lines in a directory .
5868	Returns an array of device pool names
5869	Returns list of site names
5870	Get lines by site
5871	Get line details by phone name
5872	Get object types by site
5873	Get an object type by name
5874	Deletes an object type
5875	Adds a list of capabilities .
5876	Returns the latitude for the current position
5877	Returns the longitude of the Geometry object
5878	Get body type
5879	Get error message
5880	Get URL string
5881	Creates a new REST API
5882	Delete the API
5883	Waits until the client is successful .
5884	Check if the api exists
5885	Gets the term as an ELElement
5886	Add term options
5887	Add facet options to dom node .
5888	Add FragmentScope element
5889	Set the file content
5890	Get result by URI
5891	Get result by index
5892	Get a facet by name
5893	Add constraints .
5894	Get extract metadata
5895	Sets the list of preferred elements
5896	Get the transform results as an element
5897	Add collections .
5898	Delete a collection
5899	Add permissions to the user .
5900	Delete a set of permissions
5901	Delete an array of properties
5902	Get metadata as XML .
5903	Load collection from XML
5904	Enables the proxy loader .
5905	Set the service container .
5906	Compares two row constraints .
5907	Compares two live indexes .
5908	Compare two fields .
5909	Get fixtures files
5910	Compares the presence of live fields .
5911	Define the form .
5912	Create a horizontal form
5913	Generate a label .
5914	Returns error message .
5915	Generates a form group .
5916	Renders an action .
5917	Generates a hyperlink .
5918	Generates an alert .
5919	Create a password input field .
5920	generate a file input field
5921	Create a hyperlink .
5922	Create a secure link
5923	Return a hyperlink route .
5924	Returns a link to a given action .
5925	Generates a mailto link .
5926	Flash an alert .
5927	Executes a regular expression .
5928	Get short message
5929	Retrieves a value from the cache .
5930	Stores a value in the cache .
5931	Removes a basket from the basket .
5932	Clear order items
5933	Updates a basket
5934	Returns the value of a literal .
5935	Returns the type of a literal .
5936	Extracts a literal from a string .
5937	Create an IRI
5938	Creates a literal .
5939	Check MD5 .
5940	Build the response for the given function
5941	Initialize the tokenizer .
5942	Tokenize the input .
5943	Deobfuscates a string
5944	Encrypt a string
5945	Creates a new default factory .
5946	Returns a statement with a group actor .
5947	Returns a new StatementWith StatementReference
5948	Get Statement with Result
5949	Returns a statement with a sub - statement .
5950	Creates an option .
5951	Returns the result of the SQL statement .
5952	Attach events to the view
5953	Initializes the ViewHelper
5954	Get the last file attached to the application .
5955	Collect all PDF files
5956	Clean layout .
5957	Attach the view resolver .
5958	Attach the PDF to the view
5959	Resolve a view template path .
5960	Registers an option .
5961	Gets an option by its name .
5962	Get an ActivityProfileDocument instance from document data .
5963	Constructs an AgentProfileDocument from a Document .
5964	Creates a state document .
5965	Add a behavior .
5966	Adds a value to the bucket .
5967	Defines a default behavior .
5968	Sets the default value of the widget .
5969	Execute the behavior .
5970	Gets a behavior .
5971	Set the default behavior .
5972	Set a behavior
5973	Start metrics .
5974	Stop metrics .
5975	Execute action .
5976	Perform an action on every item in the collection .
5977	Returns the first item of the collection
5978	Get the last item
5979	Returns the lowest value of the collection .
5980	Reject a callback
5981	Returns the collection as an array .
5982	Convert the given items to an array .
5983	Check if a bucket is enabled
5984	Parse feature map
5985	Creates a hash map .
5986	Get a bucket instance .
5987	Set Map instance
5988	Create a new builder for a feature .
5989	Set user bucket
5990	Describes the given tables .
5991	Describe table .
5992	Creates the tables .
5993	Creates a table .
5994	Create table fields
5995	Creates a field .
5996	Create a list of relationships .
5997	Create a relationship .
5998	Update the database tables .
5999	Update table schema
6000	Update table fields
6001	Update a single field
6002	Update table relationships
6003	Update a relationship .
6004	Delete tables .
6005	Deletes a table .
6006	Set the target length
6007	Truncate a table
6008	Generate a paged result response .
6009	Rewinds the current query
6010	Escapes a value for LDAP .
6011	Adds an entry to the LDAP directory .
6012	Compare two values
6013	Connect to the Ldap server
6014	Set paged result
6015	Binds to the LDAP server .
6016	Get an LDAP option value
6017	Add an entry to the LDAP directory .
6018	Delete an entry from LDAP .
6019	Replace an entry in LDAP .
6020	Modify an entry
6021	Modify an LDAP entry
6022	Renames the LDAP directory .
6023	Binds the LDAP connection to the LDAP server .
6024	Perform LDAP search .
6025	Set an LDAP option
6026	Verify that the ldap operation is valid .
6027	Adds a new set .
6028	Compute reference set
6029	Compute the next item
6030	Returns an array of resource names
6031	Get a resource
6032	Compare two table names .
6033	Adds a primary key to a table .
6034	Creates a SQL view .
6035	Bind a value to a statement .
6036	Extract PDO type
6037	Extracts the type of a column .
6038	Extracts the default value for a field .
6039	Add data to the form
6040	Generate the query for the iduide .
6041	Create a Guzzle request
6042	Executes a query and returns the response .
6043	Set HTTP method
6044	Set protocol
6045	Generate query by query parameters
6046	Set the aggregators array
6047	Set filters array
6048	Set post aggregators
6049	Registers widget scripts
6050	Validates the required parameters
6051	Returns the JSON encoded string
6052	Renders the Swagger UI
6053	Prepares the database .
6054	Checks if a table has a specific column .
6055	Get column type
6056	Register a new table .
6057	Drop table .
6058	Drop all tables
6059	Rename blueprint .
6060	Executes the sql statement .
6061	Add a new uploaded file to the request .
6062	Add attachment from file
6063	Add data from raw data
6064	Add a file from a URL
6065	Delete all thumbnails
6066	Get last modified time
6067	Get unique name
6068	Delete thumbnails
6069	Delete a file from disk
6070	Delete empty directory
6071	Checks if a directory is empty .
6072	Check if file exists
6073	Get thumb .
6074	Generate thumbnail filename
6075	Get default thumb options
6076	Make thumb .
6077	Get public path
6078	Returns the path to the temporary file .
6079	Generate enum type
6080	Returns the type time column
6081	Returns the type timestamp for a column .
6082	CURL write function
6083	Main function .
6084	Bootstrap the application .
6085	Normalize url .
6086	Adds a new route
6087	Adds a GET route for the application .
6088	Adds a post to the application .
6089	Add PUT route
6090	Adds a new route for the application .
6091	Adds a DELETE route to the application .
6092	Adds options to the application .
6093	Adds a HEAD route to the application .
6094	Renders the view .
6095	Get or set the source .
6096	Create a new stub .
6097	Ensure that a migration already exists .
6098	Get stub content .
6099	Returns the path for the given path .
6100	Scope a query to only include a causer .
6101	Scope by subject .
6102	Build an array expression
6103	Get migration paths
6104	Main view .
6105	Set request parameters
6106	Set headers .
6107	Set proxy .
6108	Set the cookies .
6109	Set a cookie
6110	Set options .
6111	Send the request and return the response .
6112	Make a request to the API
6113	Build the blueprint .
6114	Builds the table definition
6115	Builds the list of commands .
6116	Add an index .
6117	Add a float column
6118	Add a double column
6119	Add a decimal column
6120	Set the timestamps to null .
6121	Sets the column to be nullable .
6122	add morphs
6123	Set nullable morphors
6124	Adds a new column definition .
6125	Create reference name .
6126	Adds a value to an array .
6127	Collapse multiple values into an array .
6128	Read a value from an array .
6129	Fetch an item from an array .
6130	Get a value from an array .
6131	Applies a callback to each element of the array
6132	Explode the value of a string key .
6133	Return levenshtein value
6134	Capitalize a value
6135	Transforms a string to upper case .
6136	Formats the given location .
6137	Register the service provider
6138	Get composer command
6139	Builds the request parameters
6140	Build the headers .
6141	Build the HTTP proxy
6142	Builds the cookies .
6143	Register an observer class .
6144	Register a model event
6145	Bootstrapper events
6146	Flush the event listeners .
6147	Creates a query builder for the location model .
6148	Get location by its identifier
6149	Get location by slug
6150	Show flash message .
6151	Create a new overlay message .
6152	Clear all messages .
6153	Add a task
6154	Register the module
6155	Register the prefix class .
6156	Register storage class .
6157	Bootstrap application services
6158	Adds a like condition .
6159	Extract dates from a column .
6160	Find a model by its primary key
6161	Retrieve current user
6162	Logout user .
6163	Log in a user
6164	Retrieves a user by its identifier .
6165	Retrieves a user based on their credentials .
6166	Register database profiler .
6167	Register the view profiler .
6168	Write migration file
6169	Returns an array of events to be recorded .
6170	Dump array data
6171	Returns the id of a variable
6172	Generate array hash
6173	Check array recursion
6174	Check object recursion
6175	Dumps a variable in the session .
6176	Main route .
6177	Describes a route .
6178	Adds directories to search .
6179	Normalize a class name .
6180	Load mapped class .
6181	Require a class .
6182	Load the manifest .
6183	Writes the manifest file .
6184	Load contracts .
6185	Load the locale file for the given path .
6186	Set Query Constraint
6187	Parse read data
6188	Get a new query builder instance .
6189	Returns true if STDOUT supports colors .
6190	Applies the colors to the given text .
6191	Get the ran values
6192	Get the number of migrations .
6193	Run the pending migrations .
6194	Run the migrations .
6195	Get migrations for rollback .
6196	Rollback migrations .
6197	Reset the migration .
6198	Rollback migrations .
6199	Run the down migration .
6200	Define the migration to run .
6201	Get migration files .
6202	Clear loader .
6203	Add a primary column .
6204	Add a column .
6205	Generate a timestampable field .
6206	Adds a soft deleteable field .
6207	Adds a column .
6208	Describes the column type .
6209	Checks if an option exists
6210	Determine if the parent ID of this model is identical to another parent .
6211	Scope for live posts .
6212	Get path attribute .
6213	Register the phalcon class .
6214	Main function .
6215	Builds the SQL statement for renaming a table .
6216	Boot the hasPermalink trait .
6217	Get slug key .
6218	Query scope to find similar slugs .
6219	Add a query to the query .
6220	Executes a SQL statement .
6221	Describes table columns .
6222	Executes a query and returns the first result .
6223	Fetch all results as an array
6224	Add an insert statement .
6225	Perform an UPDATE query .
6226	Sends a DELETE statement .
6227	Add a limit statement to the query .
6228	Is table exists
6229	Check if a view exists .
6230	Creates a new table .
6231	Create a new view .
6232	Drop a view .
6233	Adds a column to the schema .
6234	Adds a column to a table .
6235	Drops a column .
6236	Adds an index to the schema .
6237	Drops an index .
6238	Adds a primary key to the index .
6239	Drops a primary key .
6240	Adds a foreign key .
6241	Drops a foreign key .
6242	Describes the indexes for a table .
6243	Describes table references .
6244	Specify table options .
6245	Get the panel .
6246	Adds a column to a table .
6247	Adds a column to a table .
6248	Drops a column .
6249	Drops an index .
6250	Adds a primary key to a table .
6251	Drops a foreign key .
6252	Creates a new database table .
6253	Creates a new view .
6254	Drops a table .
6255	Drops a view .
6256	Bind paths in the container .
6257	Check if database exists
6258	Register the logger adapter .
6259	Bootstrap application services .
6260	Get fillable attributes from array .
6261	Check if given key is fillable
6262	Convert from one amount to another
6263	Check if currency is active
6264	Get all currencies .
6265	Registers a module .
6266	Attach listener .
6267	Generate reset code
6268	Complete password reset .
6269	Check reset password code
6270	Completes the activation code .
6271	Prompt user for input .
6272	Register the currency class .
6273	Route middleware .
6274	Attach a middleware to the application .
6275	Get reflection class
6276	Set the value of an object property .
6277	Returns the value of the given property .
6278	Invoke a method on an object .
6279	Save data to cache .
6280	Check if a key exists .
6281	Get user currency
6282	Compares two Coordinate objects .
6283	Render a block .
6284	Bind an event .
6285	Emits event sort events
6286	Unbind an event
6287	Fires an event
6288	Get DI
6289	Check if header exists
6290	Set multiple headers
6291	Builds the header .
6292	Checks that the ellipsoids are equal .
6293	Get detailed message
6294	Main action .
6295	Register session services
6296	Convert to DateTimeImmutable
6297	Prepares the output file .
6298	Get code from file
6299	Parse a PHP file .
6300	Register the database
6301	Get node data
6302	Filters nodes by an ancestor .
6303	Add a WHERE clause to the query .
6304	Filters nodes by the given id .
6305	Get all descendants for a specific node .
6306	Specify the depth of the query .
6307	Wrap the columns in the query .
6308	Selects children .
6309	Set default ordering .
6310	Moves a nested node .
6311	Updates the current query .
6312	Add columns to the query .
6313	Create patch column .
6314	Counts errors .
6315	Fix tree structure .
6316	Rebuild tree
6317	Boot the purgeable trait .
6318	Add purgeable attributes
6319	Purge the attributes that should be purged .
6320	Gets the original value of an attribute .
6321	Get an item from the collection .
6322	Set an item in the collection
6323	Forget an item
6324	Writes the changes to the database .
6325	Loads the collection .
6326	Compile a function .
6327	Main action .
6328	Triggers after a signature is sent .
6329	Add a response header .
6330	Get the rate limiter .
6331	Update model attributes .
6332	Log a migration .
6333	Create the migration repository .
6334	Get the database table name .
6335	Get database name
6336	Set an attribute on the map .
6337	Append an attribute to the map .
6338	Set content .
6339	Add a new element
6340	Register commands .
6341	Main function .
6342	Returns an array of queries
6343	Determine if the cache has too many attempts .
6344	Get a value from the cache .
6345	Returns the number of attempts for the given key .
6346	Clear a key
6347	Check if the key is available in the cache .
6348	Main function .
6349	Register the file system .
6350	Swaps an instance in the container .
6351	Determine if a mock should be received .
6352	Create a fresh mock instance .
6353	Determine if this instance is a mock .
6354	Resolve facade instance .
6355	Processes a template file
6356	Process all templates
6357	Parse template content
6358	Process update .
6359	Attach an event listener .
6360	Detach events .
6361	Generate a geocode query .
6362	Reverse query .
6363	Get the status for the ran migrations .
6364	Main action .
6365	Get HTTP routes
6366	Set cURL options
6367	Curl infos
6368	Compiles the given file into PHP .
6369	Starts the process .
6370	Wait for the process to complete .
6371	Stop the process .
6372	Close all pipes
6373	Executes the command .
6374	Optimize the memory
6375	Generate output file
6376	Fill a value with the given key .
6377	Read an object property
6378	Fetch an object property
6379	Get a value from a key .
6380	Set a value in the container .
6381	Register the error handler
6382	Handles PHP errors .
6383	Handle an error .
6384	Resolve migration class
6385	Determine if log should be logged .
6386	Tell Wonolog to use a log file
6387	Use daily files .
6388	Register the logger class .
6389	Setup the database
6390	Logs SQL error .
6391	Add a single item
6392	Get a property value .
6393	Set a single property .
6394	Set multiple properties
6395	Returns the value of the original property .
6396	Check if a property has been cast .
6397	Get dirty values
6398	Generate navbar header
6399	Adds a dropdown submenu to the menu .
6400	Adds a button tag
6401	Flush the status messages .
6402	Adds an item to the body
6403	Add css to the array
6404	Get gravatar url
6405	Set the value at the given key .
6406	Get database connection
6407	Get the shared locale
6408	Add URL params
6409	Linkify a string
6410	Add row footer columns
6411	Include a css file
6412	Generate PHP self
6413	Build POST data
6414	Returns an array of available locales
6415	Converts a lang string to the default locale
6416	Bind the given locale to the current language .
6417	Setup a single property .
6418	Get status messages
6419	List all countries
6420	Adds a smart group item
6421	Sets the object name .
6422	Set an ANSI color
6423	Get color for given type
6424	Http get request
6425	Make a post request .
6426	Make a DELETE request to the specified URL .
6427	Returns the key of the model
6428	Unset a column value
6429	Reindex an array by a column
6430	Draw the part of the page
6431	Set up the NetLittingContext
6432	Returns the number of items in the body
6433	Answers true if the element is empty .
6434	Adds slash to SQL statement
6435	Connect to database
6436	Convert an array to an insert query
6437	Prepare select statement
6438	Sets the object to use .
6439	Add a slide
6440	Finalize the cart
6441	Adds a message to the log .
6442	Adds a status object to the message .
6443	Get tag name
6444	Returns the value of a tag property .
6445	Finalizes the modal .
6446	Clone the runner
6447	Adds an AJAX tab .
6448	Trace the trace
6449	Attach an observer .
6450	Attach an observer .
6451	Detach an observer .
6452	Detach all observers for an observer .
6453	Validates a Pod
6454	Get the connection instance .
6455	Returns the driver
6456	Generate a binding parameter .
6457	Normalise driver exceptions .
6458	Creates database .
6459	Delete database .
6460	Returns database information .
6461	List databases .
6462	Create a new database connection .
6463	Sets the connection to use .
6464	Returns a toolbox .
6465	Set formatter .
6466	Load a pod .
6467	Creates a new graph .
6468	Rename collection
6469	Get information about a collection
6470	Loads a pod .
6471	Process store result
6472	Converts array of documents to Pods
6473	Convert array to Pod
6474	Convert driver document to Pod
6475	Create a new vertex
6476	Create an Edge
6477	Creates a document .
6478	Setup the model .
6479	Determine if the model was previously stored in storage .
6480	Adds a command to the transaction manager .
6481	Validates a Graph Type .
6482	Applies a callback to each element of the array
6483	Wrapper for crawler .
6484	Parse URL .
6485	Parse image .
6486	Parse string .
6487	Parse a DateTime string into a DateTime object .
6488	Loads a class .
6489	Start coverage .
6490	Initialize the configuration .
6491	Relate an edge to the current model .
6492	Returns an array of bounded Edges
6493	Convert this graph to a vertex document .
6494	Encode an object
6495	Creates a new collection .
6496	Delete collection .
6497	Rename collection .
6498	Removes the collection .
6499	Get collection information
6500	Get collection statistics
6501	Count collection items
6502	Loads a collection .
6503	Unloads a collection .
6504	Get index information
6505	Returns the geo2 fields for the query .
6506	Handler for any type
6507	Returns the collection name for a graph type .
6508	Delete user .
6509	Get user information
6510	Delete AQL User Function by namespace
6511	List all registered user functions
6512	Returns the server version .
6513	Get server version .
6514	Get server time
6515	Set a value in the system .
6516	Removes a property
6517	Returns the value of the given key .
6518	Set the document id
6519	Set the distance info for this query
6520	Reset the meta
6521	Convert this object to an array
6522	Convert this object to JSON .
6523	Convert to JSON
6524	Convert to Aragens document .
6525	Load data from driver .
6526	Loads a model from an array .
6527	Event listener .
6528	Set the Toodel object
6529	Returns the id of this category
6530	Set From
6531	Get from id
6532	Convert this Edge to an Edge document .
6533	Starts a transaction .
6534	Commit all commands .
6535	Clear transaction info
6536	Add a read collection
6537	Add a write collection
6538	Pauses a transaction .
6539	Resumes the current transaction .
6540	Add a command
6541	Searches for commands that match the given action .
6542	Returns a random string .
6543	Creates a graph .
6544	Delete a graph .
6545	Returns information about a graph .
6546	Get outbound Edges
6547	Answers the filters for the view .
6548	Renders the filter box .
6549	Renders all widget
6550	Open the container .
6551	Close the container .
6552	Open a form object .
6553	Close the form
6554	Check if filter is active
6555	Create a filter button .
6556	Renders a reset button .
6557	Renders a back - to - list button
6558	Returns the storage key for the given key .
6559	Checks if the url parameter status is set .
6560	Get fulltext search conditions
6561	Flattens the given array of options .
6562	Get list of filters
6563	Get redirect url from post data
6564	Add list filter params
6565	Set default filters .
6566	Build a prepared statement
6567	Reduce the collection to a single value
6568	Type check .
6569	Casts the given type .
6570	Register the service provider .
6571	Make a new guzzle client .
6572	Setup user detection .
6573	Setup project paths .
6574	Create a new stub builder .
6575	Remove a shortcut .
6576	Create a new pipeline with the given iterable .
6577	Set multiple keys
6578	Slice a slice of the collection .
6579	Sort the collection .
6580	Set variables .
6581	Set a variable .
6582	Get the path to a page .
6583	Get script tag name
6584	Is allowed script combinations
6585	Convert a string to a list
6586	Creates fake users
6587	Get all layouts paths
6588	Add global variables .
6589	Process the page collection .
6590	Set parameter for feed
6591	Extracts param from a SimpleXMLElement
6592	Runs git command .
6593	Sort by date
6594	Removes an item from the feed .
6595	Replace a feed item .
6596	Merge another feed .
6597	Auto - slice the collection
6598	Returns a list of conflicting users
6599	Batch update records .
6600	Writes the feed items
6601	Set current position
6602	Buffer the buffer .
6603	Sort by date .
6604	Imports configuration data
6605	Set model from data
6606	Set the source directory .
6607	Set destination directory
6608	Finds the layout for a page .
6609	Make a fallback for a page .
6610	Parse the file
6611	Returns the current section .
6612	Get the permalink
6613	Set the configuration .
6614	Runs the build process .
6615	Get version .
6616	Filter pages by variable .
6617	Sorts an array by date .
6618	Creates a URL for the Twig environment
6619	Minify a file
6620	Convert to css
6621	Returns the time of the passed text .
6622	Hash a file
6623	Collects all pages
6624	Renders an RSS feed .
6625	Load an RSS feed
6626	Sniff input .
6627	Check if given input is valid .
6628	Sniff all values from the input .
6629	Runs the given input .
6630	Save schedule .
6631	Renders an RSS feed .
6632	Creates a channel node .
6633	Get feed author
6634	Get comments for an item .
6635	Checks if the given content has an XML syntax marker .
6636	Collect taxonomies from pages .
6637	Create node pages
6638	Recursively compile all views .
6639	Compile views in path .
6640	Compile single view file .
6641	Generate git diff
6642	Parse a diff
6643	Boot the extension .
6644	Finish all registered extensions
6645	Register the active extensions .
6646	Called after the extension is booted .
6647	Register the service providers .
6648	Write the manifest file .
6649	Register the deferred service provider .
6650	Load queued service provider .
6651	Activate an extension .
6652	Map an extension .
6653	Registers domain - level authentication .
6654	Detect extension .
6655	Get an option
6656	Publish Orchestra Platform .
6657	Registers a new extension .
6658	Register an extension route .
6659	Activate an extension .
6660	Refresh extension .
6661	Reset extension .
6662	Determine if the given field should be excluded .
6663	Create Orchestra Platform driver .
6664	Bootstrap the application .
6665	Bootstraps the extension configuration .
6666	Bootstrap the form .
6667	Bootstrap the menu handler .
6668	Bootstrap sidebar placeholders .
6669	Bootstrap the validation rules .
6670	Attach an event listener .
6671	Initiate the theme .
6672	Sets the theme .
6673	Boot the theme .
6674	Resolving theme .
6675	Get available theme paths
6676	Get theme autoload files
6677	Validates the provided theme .
6678	Get available theme .
6679	Render macros .
6680	Converts the given value to a DateTime instance .
6681	Verify the status .
6682	Adds a path to search for
6683	Detects extensions .
6684	Get manifest contents .
6685	Generate the manifest configuration .
6686	Get composer lock data .
6687	Guesses the extension name from the manifest .
6688	Guesses extension path .
6689	Resolve extension namespace
6690	Validate the reserved extension name .
6691	Register the view finder .
6692	Register theme services .
6693	Detect themes .
6694	Set current theme .
6695	Set theme resolver .
6696	Register the extension provider .
6697	Register the extension config manager .
6698	Register the extension finder .
6699	Register the extension status checker .
6700	Execute the callback
6701	Get the scheme .
6702	Set the HTTP headers .
6703	Get domain .
6704	Gets the group
6705	Returns true if the path matches the pattern .
6706	Get route prefix .
6707	Get root path .
6708	Returns the base URL of the application .
6709	Resolve base url from root .
6710	Parses a YAML string .
6711	Validates that the given string is duplicated .
6712	Register an asset .
6713	Deactivates a package .
6714	Register the extension providers .
6715	Register the extension plugin .
6716	Boot all extensions .
6717	Start the autoloader .
6718	Fire an event .
6719	Get the autoload files .
6720	Loads the autoloader file .
6721	Process deprecated comment
6722	Start the application
6723	Generate log message
6724	Generate exception trace
6725	Send an alert .
6726	Make a new daemon
6727	Safely fork a closure
6728	Get the slug for this model .
6729	Ensure that the item has changed .
6730	Send HTTP headers
6731	Set a cookie
6732	Clears all cookies .
6733	Add a value to the array .
6734	Stores the uploaded files .
6735	Restore items from the collection .
6736	Perform a regular expression match .
6737	Returns a copy of the array without HTML tags .
6738	Returns an array of integer values
6739	Flush all cache files
6740	Combines multiple files
6741	Connect to ssh2 server .
6742	Executes an SSH command .
6743	Determines if client is IP address
6744	IP filter
6745	Create a named pipe .
6746	Register a new deployer .
6747	Returns a registered deployer .
6748	Adds a server .
6749	Set multiple servers .
6750	Get a server instance .
6751	Deploy a server .
6752	Get options from server .
6753	Process open tokens .
6754	Ajax slug .
6755	Handle ajax request
6756	Triggers ajax callback
6757	Handle ajax request
6758	Get post request
6759	Generate random hex
6760	Starts the session .
6761	Clears all session variables .
6762	Checks if a value is serialized .
6763	Handle slug action
6764	Adds a method .
6765	Update the current session
6766	Clear session .
6767	Verify client IP
6768	Opens a database .
6769	Delete expired sessions
6770	Match route rule
6771	Get the data page
6772	Is this page?
6773	Loads class metadata .
6774	Creates a new condition .
6775	Initializes all installed plugins
6776	Returns a list of enabled plugins
6777	Load twig environment
6778	Set default user language
6779	Checks if the current token is valid and is not expired .
6780	Get a view
6781	Add a javascript var
6782	Add a javascript file
6783	Add a CSS stylesheet
6784	Get file content
6785	Get the content of the view
6786	Get all registered javascripts
6787	Get all css files
6788	Get install folder
6789	Check if the current route is allowed .
6790	Get the access for the current role
6791	Get roles chain
6792	Get user language
6793	Translate a choice .
6794	Returns the translation for the given locale .
6795	Get file translations .
6796	Returns a translation for the given id
6797	Returns the basic translation for the given ID .
6798	Generate a toggle command .
6799	Build the console commands for the given attribute .
6800	Handle the translation event .
6801	Main entry point .
6802	Prepares and returns controller action
6803	Executes the ACL .
6804	Executes the authentication .
6805	Executes the resolve route .
6806	Set and app libraries
6807	Get a library instance .
6808	Creates a new core and returns it .
6809	Call the given class and method on the controller .
6810	Get function arguments
6811	Returns the role of the given token .
6812	Returns the role of a user
6813	Returns an array of current options
6814	Set the input of an array of parameters .
6815	Get a single input value
6816	Filters a variable
6817	Open database connection
6818	Closes a database connection
6819	Execute a query against the database .
6820	Executes a SELECT query and returns an array of results
6821	Executes an insert query .
6822	Executes a query and returns the number of affected rows .
6823	Perform an update query .
6824	Logout the user
6825	Set userId
6826	Set the username
6827	Set role id
6828	Set role name
6829	Validate the value .
6830	Returns list of installed plugin classes
6831	Search plugin directories
6832	Search plugin factory class
6833	Checks if a plugin implements a file
6834	Returns a string representation of a function .
6835	Execute a closure
6836	Executes the given file .
6837	Run a command for Windows .
6838	Set the autoload file
6839	Is this process running?
6840	Kill a process .
6841	Reset all properties .
6842	Creates an instance from a string
6843	Get image driver
6844	Build an image
6845	Get proportional width
6846	Get proportional height
6847	Formats a binary string .
6848	Formats a metric .
6849	Creates a new session instance .
6850	Initializes the driver .
6851	Parse the POST request
6852	Generate the URL for this request
6853	Get server parameter
6854	Get the default input definition .
6855	Register all commands
6856	Get the path to a model
6857	Adds a force option to the command .
6858	Adds the model argument .
6859	Validates the model argument .
6860	Adds table argument .
6861	Validate table argument .
6862	Get table instance
6863	Generate file .
6864	Handle the request .
6865	Returns true if the stream is seekable
6866	Creates a parser instance .
6867	Adds a new parser to the collection .
6868	Adds a module argument .
6869	Adds the controller argument .
6870	Create a PSR - 7 request
6871	Create a server request .
6872	Creates a new stream .
6873	Create a stream from a file
6874	Creates a new uploaded file .
6875	Creates a URI from a string .
6876	Formats a number of bytes .
6877	Format a number .
6878	Normalize bytes .
6879	Normalize precision .
6880	Return an instance with the specified HTTP method .
6881	Set the URI
6882	Get target from URI
6883	Adds a middleware to the stack .
6884	Answers the reason phrase for the given code .
6885	Get the incoming message .
6886	Returns a user object for the given message .
6887	Get the extension of a filename
6888	Normalize the filename .
6889	Returns the contents of the stream .
6890	Fix URL filter
6891	Fix WordPress include folder
6892	Fix network admin url
6893	Fix WP double slashes
6894	Initializes the framework .
6895	Set WpFolder Name
6896	Convert url to full path
6897	URL path encode
6898	URL path decode
6899	Read content from a directory
6900	Intializes database .
6901	Write a log entry
6902	Write memory usage
6903	Write a timeload
6904	Writes a section to the log file .
6905	Flip an array of files .
6906	Set the uploaded file .
6907	Returns the hash of the uploaded file .
6908	Get media type
6909	Get query params
6910	Check if the current request is ajax request
6911	Convert JSON to Document .
6912	Creates an array from an array of entities
6913	Builds actions from an array of data
6914	Converts an array of fields to fields
6915	Converts an array of links to links
6916	Send a deferred request .
6917	Call the given request .
6918	Prepare the request
6919	Set the request URL .
6920	Set request headers
6921	Creates a response from the given result .
6922	Extracts the header from the response .
6923	Parse headers .
6924	Counts the number of log items in the specified log section .
6925	Display view .
6926	Gathers all files .
6927	Gathers GET parameters from the GET array
6928	Gather the post data from the log section .
6929	Gather the session data from the session .
6930	Get microtime
6931	Extracts the summary key from the provided section .
6932	Creates an array of uploaded files
6933	Create uploaded file
6934	Flip the results .
6935	Merge arrays recursively
6936	Process the request .
6937	Add a new menu
6938	Show model for editing .
6939	Attempts to edit an existing record .
6940	Redirects to the index page .
6941	Create new order
6942	Deletes a record .
6943	Get uploaded files
6944	Create a new instance with the uploaded files .
6945	Check uploaded files
6946	Load HTTP headers
6947	Returns a new instance with the specified name .
6948	Remove an attribute from the request .
6949	Checks if the HTTP headers are modified .
6950	Get a specific header
6951	Set status .
6952	Process the middleware .
6953	Get MySQL version
6954	Authenticate a user
6955	Find all active users
6956	Find all deactivated roles
6957	Add new password
6958	Get metric option
6959	Set the current language for a post .
6960	Check if a container is encrypted
6961	Check if a string is encrypted
6962	Dumps the file .
6963	Export array as PHP code
6964	Executes pre - global process .
6965	Executes post global process .
6966	Creates an exception for the given token types .
6967	Make a new container .
6968	Recover a deleted record
6969	Process class extensions
6970	Set new config classes
6971	Process configuration class
6972	Process the class .
6973	Set definitions .
6974	Returns a definition .
6975	Removes a definition .
6976	Set config classes
6977	Generate container classes
6978	Dump container definitions
6979	Returns true if the value should be returned .
6980	Set address .
6981	Log a notice .
6982	Call the given method .
6983	Create a response from an exception .
6984	Parse http response
6985	Send a request to the server
6986	Wait for the subscription to be sent to the server .
6987	Sends the result of an action .
6988	Format the layout template files .
6989	Write to file .
6990	Converts a value to a dashed string .
6991	Get slice from start and end point
6992	Get indices for a given step .
6993	Extracts the option from the given value .
6994	Validates the values array argument .
6995	Creates an option .
6996	Declares the reply stack for the reply stack .
6997	Get the value of a property .
6998	Returns array of matches
6999	Compares two images .
7000	Create diff gif on image
7001	Create a comparison image on different images
7002	Tries to compare image .
7003	Add POST route
7004	Register a new route
7005	Check if the given url matches the route
7006	Runs the router .
7007	Redirects to given URL
7008	Parse route parameters
7009	Returns the date of the file .
7010	Save image
7011	Perform an HTTP GET request
7012	Make a POST request to the given path .
7013	Set the authentication
7014	Returns the configuration for the given option .
7015	Validate configuration .
7016	Get excerpt from text .
7017	Handles PHP errors .
7018	Get dotted content extensions .
7019	Validates Widget Id
7020	Set the user id
7021	Get all documents .
7022	Append a string
7023	Prepend a string to the beginning of the string .
7024	Checks if the string matches the given pattern .
7025	Limit the number of words .
7026	Generate a random UUID
7027	Join two arrays together
7028	Convert this string to HTML entities .
7029	Cut the string at the given length
7030	Limit the number of characters in the string .
7031	Safely truncate the string .
7032	Convert string to container
7033	Encrypt key .
7034	Creates a JWT from a string .
7035	Returns the container .
7036	Generate a parser from a grammar file .
7037	Set organization settings
7038	Returns an array of documents
7039	Set per page
7040	Set the page number
7041	Convert a value to a number .
7042	Get searchable value
7043	Extracts a boolean value from a string .
7044	Get the grammar
7045	Create gif command
7046	Command for creating GIF images
7047	Lookup multiple tokens at once .
7048	Formats this number as a string .
7049	Checks if a property with the given name exists .
7050	Returns a property by its name .
7051	Removes a property by its name .
7052	Check if a method exists .
7053	Returns a method by its name .
7054	Removes a method by name .
7055	Parse meta .
7056	Runs hooks .
7057	Load plugins .
7058	Setup the router .
7059	Get an item from the collection .
7060	Set a value in the collection .
7061	Push a value to a key .
7062	Searches for a value
7063	Get items by field .
7064	Returns a new collection with unique items .
7065	Returns an array of numeric keys .
7066	Join all items in the collection .
7067	Join data by key .
7068	List items by key .
7069	Splits the collection into chunks .
7070	Filters the collection using a callback function .
7071	Apply a callback to each item in the collection .
7072	Merge a collection into this one .
7073	Merge an item with the given key .
7074	Increase the size of the collection .
7075	Random key generator .
7076	Get random item .
7077	Truncate the collection
7078	Reject a callback
7079	Forget an item .
7080	Reverse the collection
7081	Group by .
7082	Returns a copy of the collection with the specified index .
7083	Return the index after the given index
7084	Get the rest after a key
7085	Get the items that are not present in the collection .
7086	Take a value from a key .
7087	Pull an item from the collection .
7088	Returns a new Collection that is not present in the collection .
7089	Set where condition .
7090	Initialize from JSON string .
7091	Convert to container
7092	Initialize from serialized string .
7093	Creates a JWT from a encrypted key .
7094	Initialize from string
7095	Where conditions .
7096	Recursively iterates over an array .
7097	Recursively convert an iterator into an array .
7098	Get group by key .
7099	Filter an array recursively
7100	Forget items recursively
7101	Remove duplicates from an array
7102	Get a key .
7103	Adds or edit an object
7104	Get the value for the given option .
7105	Get excerpt data
7106	Fetch an item from an array .
7107	Remove an item from the array .
7108	Get a value from an array .
7109	Check if an item exists in an array
7110	Set a value in an array .
7111	Searches a value in an array .
7112	Renders a library
7113	Return htaccess denied status
7114	Get a new access token
7115	Set the input id
7116	Set bounding rules
7117	Adds a type to the collection .
7118	Removes a type .
7119	Get component restriction
7120	Set component restrictions
7121	Adds a new component restriction .
7122	Removes a component restriction .
7123	Set input attributes
7124	Set an input attribute .
7125	Parse identicontern .
7126	Convert Imagick to Imagick
7127	Compress an image .
7128	Compress svg .
7129	Compress png .
7130	Decode data url
7131	Generate one PNG image
7132	Converts an extension to a format string
7133	Format the given format .
7134	Convert an extension to MIME type
7135	Convert image format to compression type
7136	Converts the output format to a compression quality .
7137	Set file extension
7138	Change file extension .
7139	Parses the output format arguments .
7140	Send the http request
7141	Clean input data
7142	Returns the maximum size allowed for uploads
7143	Render a Map .
7144	Returns true if the version is valid
7145	Returns true if the version is valid .
7146	Returns true if version is valid .
7147	Creates a CSRF handler .
7148	Create a hidden input .
7149	Verify a CSRF handler
7150	Create a PSR - 7 request from global variables
7151	Get form data
7152	Get form data
7153	Returns a JSON encoded string
7154	Normalize the URL uri
7155	Renders a map type .
7156	Get the first user in the given email .
7157	Get last in name
7158	Converts a name to an acronym .
7159	Converts a variable to a PHP variable .
7160	Checks if a string is valid .
7161	Validates a UUID
7162	Validate shard id
7163	Validates shard ID .
7164	Validate type ID .
7165	Validates the given type ID .
7166	Validate Local Id
7167	Validate Local Id
7168	Parse shard .
7169	Build a shard
7170	Render a polyline .
7171	Set the center
7172	Set latitude .
7173	Set the longitude of the coordinate .
7174	Sets whether or not to wrap this coordinate .
7175	Set the position of the control .
7176	Set the scale control style
7177	Get Geocoder status
7178	Gets a value from the cache .
7179	Gets a sub path for a key .
7180	Generate SHA1 keys .
7181	Retrieves a class by its name
7182	Checks if the given string matches the given value .
7183	Get template .
7184	Returns the strength of a password .
7185	Checks if the given url is valid
7186	Check if memcache is enabled
7187	Check the map for a given url
7188	Checks if a map cache is valid
7189	Checks the contents of a URL
7190	Cache the cached data
7191	Set memcache .
7192	Get the map
7193	Get the map cache
7194	Check if URL is local
7195	Checks if a variable is valid
7196	Convert to Acronym .
7197	Convert string to slug
7198	Convert a string to camelCase
7199	Renders a size .
7200	Check if user is role based on email address
7201	Parses an array of addresses .
7202	Parse headers .
7203	Parse the attachments .
7204	Parses a content type into an array
7205	Parses input representation to class name
7206	Returns the difference between two numbers .
7207	URL safe encode
7208	URL safe decode
7209	Create a new nonce
7210	Create a hidden input .
7211	Verify a user s action .
7212	Set origins .
7213	Calculate difference between two dates
7214	Returns an array of items
7215	Renders a marker .
7216	Build the response .
7217	Renders a marker shape .
7218	Renders the scale control style .
7219	Checks if the slug is valid .
7220	Check if a slug is reserved .
7221	Converts slug to name .
7222	Converts a slug to a variable .
7223	Set the coordinates .
7224	Writes the data to the cache .
7225	Get all resources
7226	Parse view .
7227	Set default vars
7228	Checks if a file has a parent .
7229	Get parent variables
7230	Gets the file path .
7231	Answers the options for the database .
7232	Renders the control .
7233	Encode a value
7234	Decode a value
7235	Call controller action .
7236	Render a KML layer
7237	Get value from cache
7238	Set a value in the pool
7239	Clear cache key
7240	Generate a unique key .
7241	Generate a unique key .
7242	Compares two servers .
7243	Maybe add server connections to pool
7244	Renders the html container .
7245	Renders javascripts .
7246	Renders an Autocomplete
7247	Register the database service provider .
7248	Closes the HTTP request .
7249	Called when Gzip is off
7250	Sets the location of the command .
7251	Set destination stopover .
7252	Returns a reason why an error occurred .
7253	Set the extension
7254	Change the extension .
7255	Check if an option exists
7256	Returns the value of the specified option .
7257	Set an option for this asset .
7258	Removes an option .
7259	Modify request attributes .
7260	Set the zoom - control style
7261	Decodes a single hash
7262	Set results .
7263	Set the response status
7264	Check if string is valid .
7265	Check if the user agent is an engine
7266	Normalize a string
7267	Retrieves the page URL
7268	Set the avoidHighways
7269	Set the avoidTolls
7270	Sets the list of destinations .
7271	Add a destination to the request .
7272	Add an origin projection
7273	Sets the region of the distance matrix .
7274	Set the distance matrix language
7275	Set travelMode
7276	Set the unit system .
7277	Get control positions
7278	Set the response status
7279	Render the overview map .
7280	Render bound bounds .
7281	Renders the extended object .
7282	Prints all stats .
7283	Set the markers .
7284	Set the helpers
7285	Returns a helper helper by name .
7286	Set extension Helper
7287	Returns an extension helper
7288	Remove an extension helper
7289	Renders the HTML container .
7290	Renders the stylesheet
7291	Renders the Javascript code
7292	Renders the Javascript libraries
7293	Renders JS before a map
7294	Renders the javascript after the given map
7295	Renders the js container
7296	Renders the javascript container coordinates .
7297	Renders JS container bounds .
7298	Renders JS container points
7299	Renders the JS container sizes .
7300	Renders the js container map .
7301	Renders the Javascript container
7302	Renders the JavaScript encoded polyline .
7303	Renders the ground container as a string .
7304	Renders the js container
7305	Renders the js container polyline
7306	Renders js container rectangle
7307	Renders the JS container info windows .
7308	Renders the JS container image
7309	Renders the JavaScript container marker shapes .
7310	Renders the marker cluster
7311	Renders the KML layer
7312	Renders the JavaScript container events
7313	Renders the js container .
7314	Render a Map .
7315	Render a map center
7316	Renders a map boundary .
7317	Compute the coordinates of a Map .
7318	Compute the bounds of a Map .
7319	Compute points .
7320	Compute the size of the map
7321	Compute the marker images
7322	Returns the shapes of the marker .
7323	Computes the info window of the marker .
7324	Renders the map controls .
7325	Renders a map control .
7326	Generate UUID
7327	Generate UUID
7328	Generate UUID
7329	Transforms a V4 UUID into a UUID .
7330	Returns a package by name .
7331	Run a callback for each item
7332	Filter items by callback
7333	Adds a package to the collection .
7334	Set the address of the Geocoder .
7335	Set Coordinate .
7336	Set bounding parameters
7337	Set Geocoder Region
7338	Set the language of the Geocoder request .
7339	Load a view
7340	Get all classes
7341	Parse a value into an array .
7342	Set WordPress flags
7343	Sort an array by key
7344	Get request method
7345	Returns the scheme of this proxy .
7346	Get the host name
7347	Get root host
7348	Is SSL?
7349	Check if this is a localhost
7350	Set location type
7351	Removes all characters from the beginning of a string
7352	Returns an array of directives
7353	Protected overload data
7354	Overwrite property data
7355	Returns an array of data that should be loaded .
7356	Overload properties .
7357	Open a URL .
7358	Set the anchor .
7359	Set point image
7360	Set the scaled size .
7361	Sets the size .
7362	Renders an info window .
7363	Render the open tag .
7364	Renders the info window
7365	Register module services .
7366	Get asset url
7367	Load application routes
7368	Checks if the given function is a function .
7369	Render a ground overlay
7370	Emits the HTTP response
7371	Set a value in the cache .
7372	Retrieves a value from the cache .
7373	Unsets a reserved key
7374	Unset a specific pattern
7375	Cache value by reference
7376	Unset value by reference
7377	Unset values by reference
7378	Renders the map type control .
7379	Retrieves the value of an expression
7380	Single quote .
7381	Double quotes .
7382	Renders a map type .
7383	Sign a URL
7384	Get highlighter instance .
7385	Generate shard id .
7386	Assign shard id to database
7387	Set the travel mode
7388	Set the prefix javascript variable
7389	Selects an array of IPs
7390	Dropdown menu items
7391	Renders a StreetView .
7392	Normalize a string
7393	Checks if the value is in the given regex .
7394	Normalize a string .
7395	Cancels special characters
7396	Convert a URL pattern to a URI pattern .
7397	Set widthUnit .
7398	Set heightUnit .
7399	Returns a random key
7400	Checks if the given value is a valid UTF - 8 string .
7401	Strips a URL query string
7402	Parse the url into an array
7403	Builds a query string
7404	Adds a sha256 signature to the URL
7405	Removes a SHA - 256 SHA - 256 SHA - encoded SHA - 1 hash from the SHA - 1 .
7406	Wrapper for sha256
7407	Set the coordinates
7408	Adds a poly coordinate .
7409	Set customer .
7410	Updates a customer .
7411	Convert unit to unit .
7412	Get scope entity by identifier
7413	Renders a scale control .
7414	Generate the url for geocoder
7415	Builds a response from a geocoder response .
7416	Builds a Geocoder result from a GeocoderResult object .
7417	Builds an array of GeocoderAddress components
7418	Builds a GeocoderAddress component .
7419	Builds a GeocoderGeometry object .
7420	Processes the distanceMatrix request .
7421	Generate the URL for the given distanceMatrixRequest
7422	Parse the response .
7423	Builds a distance matrix response .
7424	Builds the distance matrix rows .
7425	Builds a distance matrix row .
7426	Builds a DistanceMatrixResponse element .
7427	Render point .
7428	Extracts parameter strings from parameter string
7429	Parse an array of parameters .
7430	Returns the current HTTP headers
7431	Send Yes Cache
7432	Send no caching
7433	Get status slug .
7434	Get status message .
7435	Send HTTP status .
7436	Parse header value
7437	Returns an array of tags
7438	Register migrations .
7439	Register translation files
7440	Set pixel offset
7441	Set the open event
7442	Renders the span .
7443	Answers an array of mouse events .
7444	Set map type ids .
7445	Adds a new map type id
7446	Set mapTypeControlStyle
7447	Set a cookie .
7448	Returns the URI of a cookie
7449	Renders the dom event .
7450	Renders an event once .
7451	Renders an event .
7452	Renders an event once .
7453	Renders an animation .
7454	Renders the zoom control .
7455	Get the maximum execution time
7456	Checks a slug .
7457	Get address components
7458	Set an array of address components
7459	Set the partial match .
7460	Get the gravatar url
7461	Set the center .
7462	Checks if the given map option exists .
7463	Set map options
7464	Returns the value of the specified map option .
7465	Set a map option
7466	Removes a map option
7467	Checks if a stylesheet option exists
7468	Sets the stylesheet options .
7469	Gets a specific stylesheet option
7470	Set a stylesheet option
7471	Removes a stylesheet option .
7472	Set the map type control
7473	Set the overview map control
7474	Set pan - control
7475	Set the rotate control
7476	Set scale - control
7477	Set the street view control
7478	Set zoom control
7479	Adds a marker .
7480	Adds information window
7481	Adds a polyline .
7482	Adds an EncodedPolyline .
7483	Adds a polygon .
7484	Add rectangle .
7485	Adds a circle .
7486	Add a ground overlay
7487	Stores a value in the cache .
7488	Delete the file
7489	Set the avoid drivers
7490	Set the avoidTolls
7491	Set the destination
7492	Sets whether the direction points should be optimized .
7493	Set the request origin
7494	Set route alternatives
7495	Set the region
7496	Set request language
7497	Set travelMode
7498	Set the unit system
7499	Sets the list of all registered routes .
7500	Add a new direction point .
7501	Returns true if the route is valid .
7502	Submit a POST request .
7503	Log an issue
7504	Log a review .
7505	Write lines to the log file .
7506	Cleans the log event .
7507	Rotate log files .
7508	Make a http request
7509	Parse a document .
7510	Build document .
7511	Parses a section .
7512	Parse YAML metadata .
7513	Get a query variable
7514	Get template from file
7515	Get remote .
7516	Generate a SHA - 1 hash for the remote credentials .
7517	Transliterates a string to an ASCII string .
7518	Get the distance matrix status
7519	Strips leading and leading items .
7520	Set the steps .
7521	Perform a routing request
7522	Builds the directions response .
7523	Builds the directions routes .
7524	Builds the directions route .
7525	Builds directions array
7526	Builds the directions page .
7527	Builds directions steps .
7528	Builds directions step .
7529	Lightening the current color
7530	Darkening the current color
7531	Sets the saturation of the color .
7532	Deserializes the color .
7533	Creates a new color
7534	Starts a new session .
7535	Returns true if the version is valid
7536	Returns true if the given version is valid .
7537	Returns true if the version is valid .
7538	Format the date .
7539	Get the current time
7540	Return an instance with no caching headers set .
7541	Create a success response
7542	Add an error to the response
7543	Output the response .
7544	Set the list of footers .
7545	Sets warning values .
7546	Set the sort order for the route .
7547	Renders the zoom control style .
7548	Gets the metadata value .
7549	Issue an access token .
7550	Perform an HTTP request .
7551	Get access token repository .
7552	Adds a value to the array .
7553	Remove an item from the collection
7554	Renders the google map
7555	Sets the elements .
7556	Renders the control position .
7557	Returns the current IP address
7558	Get geo region
7559	Get IP country
7560	Check if this is ajax
7561	Determines if the request is an API endpoint
7562	Gets or sets the action that should be performed .
7563	Set whether or not the action should be executed .
7564	Subscribe a new user to a list
7565	Get a single member
7566	Update an existing user
7567	Delete a user
7568	Returns sha1 for given string
7569	Adjust the luminosity .
7570	Cleans a hex string
7571	If the array has an empty array merge it with nested arrays .
7572	Create a new Request
7573	Create request body .
7574	Maybe merge arrays with empty arrays
7575	Render a rectangle .
7576	Convert an element to html .
7577	Converts a DOMDocument to an array .
7578	Renders a marker .
7579	Generate license key
7580	Returns an array of libraries
7581	Escape order
7582	Serializes a closure .
7583	Unserialize closure .
7584	Serialize a value .
7585	Maybe decode the given value .
7586	Embed embed
7587	Get embed from cache
7588	Converts a string to an oEmbed via WordPress .
7589	Render a map
7590	Sets the bounding border
7591	Set NorthEast .
7592	Get the center coordinates .
7593	Converts a number of bytes to bytes .
7594	Get remote bytes
7595	Convert an array of parts to a string .
7596	Render latitude coordinate .
7597	Renders a marker image .
7598	Parses an XML string .
7599	Pluralize an XML string .
7600	Invalid route for invalid distance mode .
7601	Parse a host string into an array
7602	Extracts the port from the given array .
7603	Set the marker position
7604	Set Marker Animation
7605	Set Marker Icon
7606	Set the shadow image
7607	Set the shape of the Marker .
7608	Callback for header_id
7609	Get first image url
7610	Format an array of attributes .
7611	Set bounding coordinates
7612	Get error message
7613	Get error messages
7614	Get error data
7615	Add a message
7616	Add Coordinate .
7617	Load an HTML document
7618	Minify the widget .
7619	Indents a DOMNode .
7620	Post load event handler .
7621	Create a new password view model .
7622	Get organization entity .
7623	Create the error view model .
7624	Add an asset .
7625	Reverse scripts .
7626	Add first asset
7627	Add after file
7628	Add meta data
7629	Renders meta tags .
7630	Recursively search for files
7631	Loads a single file
7632	Creates a query builder .
7633	Process invitation email
7634	Validate email .
7635	Load or create user .
7636	Loads the organization
7637	Proxy method .
7638	Returns the cursor for the given organization .
7639	Find organizations by name .
7640	Finds entity by user or id
7641	Find a single employee by user id .
7642	Creates a new entity with the given name .
7643	Finds the draft of a user .
7644	Initializes the contact
7645	Check if the user is an employee
7646	Update the permissions for the user
7647	Set organization name
7648	Set permissions .
7649	Get an image
7650	Set contact .
7651	Access the employees
7652	Get employee by user or id
7653	Get employees by role
7654	Set creation options
7655	Initializes the organization .
7656	Get form for organization
7657	Returns the uri for the given Organization image .
7658	Stores an image .
7659	Extract properties from an object
7660	Hydrate a value .
7661	Checks if the user has permission to create a new employee .
7662	Configure the form
7663	Ensure that the order number is correct .
7664	Encrypt 3DES
7665	Create Merchant Signature
7666	Validates the notification signature .
7667	Signs an array of parameters .
7668	Perform an HTTP request .
7669	Gets an array of ticket articles
7670	Make an HTTP request
7671	Make a POST request .
7672	Make a PUT request
7673	Get Article for a ticket
7674	Get a value by key
7675	Receive a single object
7676	Get all objects
7677	Create an object
7678	Update an object
7679	Delete an object
7680	Get the url for a method
7681	Receive a single ticket
7682	Adds an item to a Tag .
7683	Search for objects by search term
7684	Remove a ticket
7685	Takes a shared memory block .
7686	High level function to fetch the proxy type
7687	Get information about the specified connection .
7688	Do the loop .
7689	Execute the request
7690	Call a function on each item
7691	Get an item from the collection
7692	Returns the source
7693	Fetch API data
7694	Validates a set of permissions
7695	Set a query parameter .
7696	Set multiple parameters
7697	Perform a request transaction
7698	Save a photo
7699	Start a callback
7700	Get an access token
7701	Convert hits to items .
7702	Search by query .
7703	Replace all dots except the last 3 - 3 days .
7704	Replace all dots except the last 2 - second .
7705	Replace all dots except last
7706	Converts an intl formatter to mallatable format .
7707	Converts mallatable value to intl formatter .
7708	Adds the picker configuration .
7709	Binds the Alexa request .
7710	Register the middleware .
7711	Reserve the audio player .
7712	Return the AlexaRequest instance .
7713	Add the middleware to the beginning of the request .
7714	Checks if the route matches the given route .
7715	Create a new AlexaRoute instance .
7716	Get session value
7717	Updates the specified slot .
7718	Get all validators
7719	Compiles the route .
7720	Get the certificate from the request .
7721	Prepare the response data
7722	Send the request through the router .
7723	Gather application middleware .
7724	Persists a certificate .
7725	Retrieves the certificate chain from the store .
7726	Calculate the file path for the certificateChain
7727	Set custom protected words .
7728	Capitalize a string
7729	Normalize input .
7730	Process string parts
7731	Process first sentence in parts
7732	Process last word in parts
7733	Process a word .
7734	Replace pattern .
7735	Gets the prefix suffix
7736	Breaks a string of words into an array .
7737	Check if a word is salutation
7738	Checks if the given word is a line suffix .
7739	Generate emoji constants
7740	Creates a new piece of the given length .
7741	Emojify a string
7742	Get first word .
7743	Checks if the given thing is string .
7744	Get last word
7745	Converts roman numerals to lower case
7746	Process a markdown string
7747	Reads a number of words .
7748	Generate smartypants
7749	Gets the substring after the first occurrence of a separator .
7750	Gets the substring after the last occurrence of a separator .
7751	Gets the substring before the first occurrence of a separator .
7752	Gets the substring before the last occurrence of a separator .
7753	Titleize a string
7754	Trims whitespace .
7755	Trims whitespace .
7756	Trims whitespace .
7757	Typogrify a string
7758	Converts roman numerals to lower case .
7759	Flattens a typography .
7760	Get a setting by its name .
7761	Get icon
7762	Convert to array
7763	Display the Blog Index page .
7764	Display a post .
7765	Create new tag
7766	Show the form for editing the tag .
7767	Update a tag .
7768	Remove the tag .
7769	Display the dashboard .
7770	Clear cache .
7771	Handle the download .
7772	Enable maintenance mode .
7773	Disable maintenance mode .
7774	Handle configs .
7775	Handle translations .
7776	Handle the views .
7777	Display the profile page .
7778	Update user profile .
7779	Sets the authenticated user .
7780	Get current version
7781	Get the post fill data
7782	Enables an extension .
7783	Disables an extension .
7784	Uninstalls an extension
7785	Run the migrations .
7786	Get the list of enabled bootstrappers .
7787	Sanitize input .
7788	Display the dashboard .
7789	Extract fields from model .
7790	Data for tags .
7791	Get standard post data .
7792	Store a newly created post .
7793	Update post .
7794	Copy theme public .
7795	Publish views .
7796	Unset theme .
7797	Get default theme
7798	Get active state
7799	Get general middleware
7800	Get installed middleware
7801	Get admin middleware
7802	Get Blog Main
7803	Get blog prefix
7804	Get admin prefix
7805	Get auth prefix
7806	Get password prefix
7807	Display a listing of the posts .
7808	Get the data for this payment .
7809	Scan a file
7810	Send a multi - byte command
7811	Scan a file
7812	Read a response from the server .
7813	Process single file
7814	Validate file .
7815	Sanitizes a filename .
7816	Delete a file
7817	Copy uploaded file to destination
7818	Get the list of themes .
7819	Get asset path
7820	Gets the version of an asset .
7821	Get theme path .
7822	Make directory .
7823	Make file .
7824	Get the assets path .
7825	Get template content
7826	Create translation assets .
7827	Fetch a translation for a message .
7828	Updates a translation .
7829	Flag a message to a specific language .
7830	Create an asset
7831	Download all translations
7832	Upload all translations
7833	Synchronize all translations .
7834	Triggered when the messages are terminated .
7835	Copy values from parent to parent .
7836	Adds a hash to the cache .
7837	Get the value of the header
7838	Search for class map
7839	Returns an array of PSR - 4 directories
7840	After save callback .
7841	Before query is executed .
7842	After a query has been executed .
7843	Synchronize new waterage items .
7844	Synchronize a collection of items .
7845	Find product item by key .
7846	Checks item integrity .
7847	Build item data .
7848	Fill an array of attributes .
7849	Setup the default criteria .
7850	Perform the action .
7851	Executes before or after action .
7852	Validates the action .
7853	Perform query .
7854	Set paginate mode .
7855	Toggle exceptions .
7856	Applies criteria to query .
7857	Updates an entity .
7858	Fetch a list of records from the database .
7859	Find by key
7860	Find one record by criteria .
7861	Get records by criteria .
7862	Get objects by their keys
7863	Retrieves a list of records
7864	Returns a new query builder instance .
7865	Replace the environment variable placeholders .
7866	Set view path
7867	Send file to browser
7868	Get the mime - type of the given file
7869	Map an action to an exception .
7870	Sets an aspect definition
7871	Set pointcut definition
7872	Get pointcut
7873	Returns the list of candidate files for the given path .
7874	Checks if the given path is scoped .
7875	Converts the error type to a string .
7876	Dispatches the dispatcher .
7877	Invoke an action
7878	Returns whether or not the client has activity
7879	Get bean definition by name
7880	Search and replace properties
7881	Returns the constructor arguments for the given definition .
7882	Instantiates an instance of the bean .
7883	Instantiate bean by factory class name .
7884	Instantiate by factory bean .
7885	Instantiates a bean definition .
7886	Create bean dependencies
7887	Applies an aspect .
7888	Applies an array of aspects to the container .
7889	Apply global aspect managers
7890	Applies a bean definition to the bean .
7891	Creates a bean .
7892	Setup init method .
7893	Check if method is not setter
7894	Injects a bean property .
7895	Get a bean by name
7896	Returns a singleton instance .
7897	Fill the bean
7898	Signal handler .
7899	Loads a class .
7900	Makes a child bean .
7901	Populate classes per annotation .
7902	Loads an XML file .
7903	Loads the bean .
7904	Closes the socket
7905	Open the socket
7906	Removes the peer .
7907	Create a new class
7908	Create a parameter
7909	Create method template
7910	Creates a proxy .
7911	Load yaml files
7912	Loads the bean .
7913	Initialize the client
7914	Opens the connection .
7915	Retrieves a cache instance from the given options .
7916	Get the after definition .
7917	BeforeCreate event listener
7918	After create event listener
7919	Triggered before the bean is assembled .
7920	Called after a bean is assembled
7921	Open log .
7922	Get interceptors for a method
7923	Get exception interceptors
7924	Call all interceptors
7925	Invoke an exception .
7926	Invoke method invocation
7927	Closes the socket
7928	Reads data from the buffer .
7929	Open the socket
7930	Adds multiple objects
7931	Build the URI
7932	Overwrite app config
7933	Resolve the path for the given file path .
7934	Is published drop down list?
7935	Finds a Page model based on its alias .
7936	Builds a link .
7937	Updates an existing Page model . If update is successful the browser will be redirected to the view page .
7938	Register translations .
7939	Registers client script
7940	Vote for user .
7941	Get From Address
7942	Loads a user based on their username
7943	Hydrates the user with the given data .
7944	Creates a new user .
7945	Sets the user password .
7946	Checks if a user is valid
7947	Check if user is logged in
7948	Finds user by criteria .
7949	Finds users by criteria
7950	Generate common find query .
7951	Returns the number of records matching criteria
7952	Inserts a new user .
7953	Update user information
7954	Delete user from database
7955	Validates the given user .
7956	Clear identity map
7957	Login as a user
7958	Initializes the signal handler
7959	Re -aper a worker
7960	Waits until a timeout occurs .
7961	Retrieves all results from the pool .
7962	Returns a list of all processes .
7963	Applies a process to the pool .
7964	Returns the number of pending workers .
7965	Send data to the socket .
7966	Read data from the socket .
7967	Return SQL to drop down data
7968	Register user .
7969	Confirm email confirmation link .
7970	Login action .
7971	Resend the confirmation message for the user .
7972	View a user .
7973	Edit custom fields
7974	Validates the email address
7975	Connects to the service provider .
7976	Get all priorities
7977	Get the formatter .
7978	Format the response .
7979	Detect environment file
7980	Get the type of the request .
7981	Builds a new middleware instance .
7982	Run the application .
7983	Handle the action .
7984	Get payload .
7985	Append a response to a response .
7986	Return the status response .
7987	Get command from resource
7988	Run before commands
7989	Get per page from model class .
7990	Add where statements to query .
7991	Bootstrap the application .
7992	Allow HTTP methods .
7993	Set route pattern
7994	Returns the current token .
7995	Retrieve the regular expression .
7996	Get the variables .
7997	Check if the current request matches the given route .
7998	Build variables .
7999	Dispatch middleware .
8000	Returns a link to the token .
8001	Compile the regular expression .
8002	Checks if the current request matches the pattern .
8003	Returns a link to this token .
8004	Tokenize pattern .
8005	Tokenize the given pattern .
8006	Tokenize a segment
8007	Splits the given pattern into chunks .
8008	Compiles the given token .
8009	Scans the scope .
8010	Binds a route to a route .
8011	Create a group of routes
8012	Routes the request
8013	Normalize the request .
8014	Routes the request
8015	Generate a link to a named route
8016	Reset all routes
8017	Create JS code
8018	Returns the file contents
8019	Get an access token .
8020	List address books
8021	Get email addresses from book
8022	Adds emails to addressbook
8023	Get campaign cost
8024	Create a campaign
8025	Adds a sender
8026	Activate a sender
8027	Get list of website subscriptions
8028	Set state of subscription
8029	Create a push task
8030	Generate a unique identifier for the sender .
8031	Send request to website
8032	Send a request to the API .
8033	Pre send to API
8034	Decode a new line encoded response
8035	Decode an url encoded string
8036	Fetches messages from the IMAP server .
8037	Mark a message as processed .
8038	Returns the type of the given mail
8039	Auto refund method
8040	Auto apply SSL
8041	Method to auto replace .
8042	Auto - renew the SSL connection .
8043	Collects an SSL request .
8044	Retrieves a list of addresses from the DCVail address
8045	Perform an SSL checker
8046	WebHost report
8047	Ensures that the DCV code is valid .
8048	Creates an exception based on an array
8049	Generate meta tags
8050	Set the description
8051	Reset all properties .
8052	Register bindings .
8053	Generate Open Graph tags
8054	Add raw data
8055	Prepare data .
8056	Returns true if the url contains the given url .
8057	Validate the data
8058	Fill the index of the command .
8059	Fill the command type .
8060	set calendar component property index
8061	set calendar component property type
8062	Set the settings .
8063	Deletes an index
8064	Create an index
8065	Update index settings
8066	Execute the command
8067	Convert to JSON .
8068	Sort by value
8069	Set the facets .
8070	Composes final query
8071	Convert params to array
8072	Adds a node to the cluster .
8073	Adds a rule to the query .
8074	Add a command to delete a document .
8075	Set multiple documents
8076	Executes the current query .
8077	Creates a PSR - 7 request
8078	Http post request
8079	Http PUT request
8080	Make a HTTP DELETE request
8081	Execute all requests
8082	Add multiple options at once
8083	On cluster request execution
8084	Autodetect nodes
8085	Add document .
8086	Executes the current batch command .
8087	Finalizes the current command .
8088	Check the current command
8089	Get Gallery object
8090	Initializes an album
8091	Init an album
8092	Generate an album name
8093	Uploads an album
8094	After delete callback
8095	Get image resize dimensions
8096	Add image styles to gallery
8097	Delete multiple versions
8098	Save picture .
8099	Create extra images
8100	Set zebra image
8101	Prepare an image
8102	Configure gallery
8103	Configure the database .
8104	Creates the config file
8105	Checks for documentation errors .
8106	Generate source code
8107	Renders the upload link .
8108	Displays an album
8109	Shows thumbnails for an album
8110	Loads scripts .
8111	Deletes the specified picture .
8112	Renders the photos .
8113	List channel sections
8114	Starts the worker .
8115	Stop the process .
8116	Kill the process .
8117	Send a payload to the client .
8118	Called when a worker starts
8119	Fork a thread
8120	Creates a new AuthnRequest instance .
8121	Parse a SAML response
8122	Returns an array of binary objects
8123	Returns the binary representation of the current binary .
8124	Updates a binary .
8125	Update a binary .
8126	Starts the process .
8127	Remove expired files
8128	Assert start conditions
8129	Register binary systems .
8130	Create a binary .
8131	Validate an external url .
8132	Returns the file name of the operating system .
8133	Save the contents of a directory .
8134	Handles a notification .
8135	Watch progress .
8136	Get pre update message
8137	Get post message .
8138	Add a pipe to the pipeline .
8139	Convert an item .
8140	Convert an item value .
8141	Writes a single item
8142	Get the transport from the request .
8143	Validate password .
8144	Get a taxonomy .
8145	Check if the given entity is valid .
8146	Get the description of this object .
8147	Get environment value
8148	Get client ip
8149	Get current URL
8150	Unparse a query string
8151	Checks if a property is set .
8152	Lookup an address for a given address
8153	Do include statements .
8154	Perform actions in config line
8155	Removes an item from an array .
8156	Converts an item into an array .
8157	Update the form read .
8158	Get the field from the payload
8159	Get the matching item .
8160	On item uuid .
8161	Get an item from an aggregate .
8162	Replace variables .
8163	Load configuration data
8164	Loads a JSON file .
8165	Set LatLng
8166	Get LatLng object
8167	Return error response
8168	Redirect user to form
8169	Creates a form to create a new aggregate .
8170	Remove an item from a form
8171	Check if the Composer autoload dump is loaded .
8172	Get plugin class names
8173	Returns the install name for the specified package .
8174	Guesses the install name from a package name .
8175	Map root extra
8176	Writes the configuration for a plugin .
8177	Get root package .
8178	Returns the install path for a package .
8179	Initializes the install directory .
8180	Generate palette palette
8181	Returns the meta palette of a table .
8182	Creates an exception for a given context .
8183	Inits the theme context .
8184	Build the context configuration .
8185	Returns the color for the given identifier .
8186	Rotate the color .
8187	Converts HSV to RGB .
8188	Sets the context
8189	Change the current context
8190	Switch the context .
8191	Load configuration from bundles
8192	Sets the service config types argument .
8193	Returns the list of templates for the given data container
8194	Renders the page picker
8195	Get all articles
8196	Get all modules
8197	Prepare template before rendering
8198	Parse template .
8199	Registers tagged services .
8200	Initialize the environment .
8201	Initialize the layout .
8202	Adds a child element .
8203	Compiles a template .
8204	Compiles a node .
8205	Throws an exception .
8206	Returns the PHP type for a doctrine type .
8207	Returns a FileReflectionor instance .
8208	Get the doc block for a property .
8209	Get DocBlock from a property .
8210	Get DocBlock from method
8211	Get PHP type and class name .
8212	Logs in a user .
8213	Initialize Guzzle client
8214	Get the login token .
8215	Search for boards .
8216	Extract the value of an array of extractors .
8217	Get all tags
8218	Downloads an image .
8219	Gets all workspaces
8220	Download all the wallpapers
8221	Extract values from the mutator
8222	Extracts the type from an accessor method .
8223	Extract type from reflection .
8224	Determine if the given property is a public property .
8225	Get method for accessor method
8226	Gets the ReflectionMethod for a property .
8227	Returns the name of the property .
8228	Load the Laravel service container .
8229	Create the application .
8230	Sets an array value .
8231	Set multiple values at once
8232	Removes a section .
8233	Merge a section
8234	Rename a value
8235	Renames a section
8236	Reads an INI file
8237	Reads an INI object and merges it with it .
8238	Merge ini content .
8239	Generate an INI value
8240	Sets an INI content .
8241	Sets an array of values .
8242	Gets the values of a section
8243	Removes a value
8244	Removes a section .
8245	Sets a value in the registry .
8246	Set a value on an ini reader .
8247	Set the values on a master .
8248	Get the value of a master
8249	Get all values of a section
8250	Removes a value
8251	Remove a value on an ini reader .
8252	Answers true if the given name is a section .
8253	Returns the values of a section .
8254	Create a loader for the given type .
8255	Returns class name by short type .
8256	Create a cookie .
8257	Execute command .
8258	Determine the file for the given command .
8259	Select bundle .
8260	Writes the configuration to a file .
8261	Creates a dummy container .
8262	Convert a string to a file
8263	Read session data from storage .
8264	Get all routes
8265	Sort an array by key .
8266	Sets the offset of the stream .
8267	Gather the view data .
8268	Put content into a file .
8269	Get the configuration reader for the command .
8270	Run a route .
8271	Gather the route middleware .
8272	Flattens an array .
8273	Load configuration files .
8274	Returns a slice of the container .
8275	Parse a stage string into an array of parameters .
8276	Call a symfony command .
8277	Sets the default values for a command .
8278	Get PHP binary name
8279	Returns the corebro binary .
8280	Runs a command .
8281	Get the default input definition .
8282	Builds an array of routes
8283	Add route to node .
8284	Returns the matcher for the first parameter segment .
8285	Creates a filesystem manager .
8286	Creates a new cache factory .
8287	Returns the duration of executed statements .
8288	Returns memory usage
8289	Perform the profiling call .
8290	Resolve a translation
8291	Checks if this route matches the given pattern .
8292	Create a Twig engine instance .
8293	Extend the view factory .
8294	Extend the engine resolver .
8295	Creates a Twig environment .
8296	Create a twig loader .
8297	Parse the given data .
8298	Create a validator .
8299	Create a negative validator for the given filter .
8300	Create chainable validators for given rules .
8301	Parse a string rule .
8302	Parse parameter .
8303	Starts the server process .
8304	Stop the web server
8305	Get IP address
8306	Checks if the server is running .
8307	Creates the server process .
8308	Returns all registered event listeners .
8309	Removes listener pattern
8310	Determine if the subject has wildcards .
8311	Adds a listener pattern to the list of events .
8312	Read a mandatory option .
8313	Build multidimensional array
8314	Prepares the response .
8315	Get the response for the exception .
8316	Get displayer .
8317	Filters the displayers .
8318	Filters the content based on the Accept header .
8319	Add route lookups
8320	Adds multiple addresses
8321	Create a new AssetsRenderer instance .
8322	Register base data collectors .
8323	Registers the profiler collector .
8324	Extend the event manager .
8325	Creates a session manager .
8326	Create route dispatcher .
8327	Create router .
8328	Create url generator .
8329	Detect the environment for the command .
8330	Get environment argument
8331	Return the response as a string
8332	Creates a TOMLBuilder from an array .
8333	Process array of arrays
8334	Get pretty metadata
8335	Get loader paths
8336	Builds the table rows
8337	Get Whoops instance .
8338	Add the where clauses to the route .
8339	Merge group attributes into route .
8340	Converts the given action into a controller action .
8341	Prepend a group namespace to the stack .
8342	Prefix uri .
8343	Update the group stack
8344	Create a new Sanitizer .
8345	Add before bootstrapping .
8346	Add after bootstrapper .
8347	Bootstrap the application with bootstraps .
8348	Call bootbacks .
8349	Generate session id
8350	Merge new flash values
8351	Load session data
8352	Read from handler .
8353	Writes the value to the handler .
8354	Resolve current page .
8355	Secure input .
8356	Extend the event manager .
8357	Finds all files in the given directories .
8358	Find the twig files .
8359	Validate template .
8360	Display the given details .
8361	Display a text .
8362	Parse a middleware group into an array of middleware groups .
8363	Checks for mandatory options .
8364	Returns the dimensions of the given configuration .
8365	Validate options .
8366	Check deprecated options .
8367	Register a resource
8368	Get resource URI
8369	Get resource wildcard
8370	Get resource prefix
8371	Add resource destroy action
8372	Get nested resource URI
8373	Get resource action
8374	Get resource route name .
8375	Slice the container .
8376	Get the middleware for the request handler .
8377	Find argument files
8378	Returns the IP address of the client .
8379	Check if given IP is valid
8380	Get first ip address from header .
8381	Set the message domain .
8382	Validate the input
8383	Validate the given middleware .
8384	Create TranslationManager .
8385	Create a schedule .
8386	Get computed data
8387	Create a new Swift Mailer instance .
8388	Create the mailer .
8389	Set global address .
8390	Create a tooltip group
8391	Create the tabs
8392	Create table .
8393	Create dropdown menu
8394	Protected create metrics
8395	Clones a variable
8396	Returns a VarCloner instance .
8397	Returns the HtmlDumper instance .
8398	Append code .
8399	Appends code to the output buffer .
8400	Adds extensions to twig container .
8401	Do sort middleware .
8402	Move an array of middleware .
8403	Create an aggregate driver .
8404	Create an instance of the Monolog driver .
8405	Create a single logger instance .
8406	Create the runtime driver .
8407	Create an instance of the syslog driver .
8408	Create an instance of the error log driver .
8409	Create the Slack webhook driver .
8410	Create a custom logger .
8411	Create Monolog driver .
8412	Push processors to Monolog .
8413	Create a PSR - 7 server request from an array .
8414	Returns the singular form of the given value .
8415	Match case by comparison
8416	Create a new local adapter .
8417	Create the console application .
8418	Merge two arrays .
8419	Formats group suffix .
8420	Check if the environment file exists .
8421	Set the environment file path .
8422	Get a transport instance .
8423	Create a new transport .
8424	Check if transport exists
8425	Create a new SMTPTransport instance .
8426	Create a MailgunTransport instance .
8427	Create a SparkPostTransport instance .
8428	Create an instance of the SESTransport .
8429	Creates a repository .
8430	Update route tree node
8431	Register event handlers
8432	Add the twig environment to the container .
8433	Register the twig extension .
8434	Get allowed HTTP methods
8435	Adds a route to the collection .
8436	Returns true if the stream is pipe
8437	Add a mime type .
8438	Add a parser .
8439	Parse the payload
8440	Returns a parser for the given type .
8441	Returns the format for the given payload
8442	Setup class configuration .
8443	Returns the duration of the request .
8444	Stops a measure
8445	Adds a measure
8446	Identify the given exception .
8447	Generate UUID 4
8448	Sets headers .
8449	Validates the HTTP protocol version .
8450	Checks if an array contains only strings .
8451	Filter header value
8452	Get the number of retry .
8453	Get invoker .
8454	Creates an invalid type .
8455	Extend cache item pool .
8456	Extend a simple cacheable method .
8457	Get an environment value
8458	Parse a parameter .
8459	Replace placeholders with values .
8460	Creates the table
8461	Get database connection
8462	Connect to database .
8463	Returns a list of files in the given path .
8464	Renders the content into HTML .
8465	Returns the modified time of the given type
8466	Run the application .
8467	Disable overlapping cron job .
8468	Extend log manager .
8469	Extend profiler .
8470	Imports a DOM document .
8471	Loads a DOM document .
8472	Load an XML string .
8473	Converts a PHP value to a PHP representation .
8474	Validate an XSD file .
8475	Convert a string to a string
8476	Check if an entry is a header
8477	Add references to an entry .
8478	Process the given entry .
8479	Process previous entry
8480	Extract multi lines from a multi - line entry .
8481	Extract headers from an array of headers .
8482	Is file .
8483	Set error status .
8484	Sets the stream or filename .
8485	Validate the stream .
8486	Mock a service .
8487	Parses an expression .
8488	Parse argument .
8489	Parses an input option and returns it .
8490	Extracts the description from a token .
8491	Validates the cookie name .
8492	Validates the cookie value .
8493	Set a value in the left scope .
8494	Get the addresses for the message .
8495	Create MongoDB driver .
8496	Create a Redis cache driver .
8497	Create a new Predis cache driver .
8498	Create the filesystem cache driver .
8499	Create a Memcached cache driver .
8500	Create a Memcache cache driver .
8501	Get data collector .
8502	Compile routes template
8503	Create route class template
8504	Compile route tree .
8505	Compile route HTTP method match .
8506	Compile the excluded HTTP method .
8507	Compile the found route .
8508	Returns the DebugProcessor instance .
8509	Gets the number of errors that occurred during logging .
8510	Group log levels
8511	Returns the listener .
8512	Binds an event to the dispatcher .
8513	Unbinds all events
8514	Creates a regex pattern for the given event pattern .
8515	Array access .
8516	Set a value in the array .
8517	Process parameters .
8518	Process the given parameter .
8519	Renders an exception .
8520	Renders the editor .
8521	Renders exception trace .
8522	Get exception trace
8523	Get the stack trace frames .
8524	Format arguments .
8525	Get an array of lines from a file .
8526	Get the contents of a file
8527	Normalize the path name .
8528	Resolve the given subject .
8529	Resolves a class .
8530	Resolve method .
8531	Resolve a parameter .
8532	Resolve parameters .
8533	Returns a method reflection .
8534	Determine if the given value is a function .
8535	Merge root parameters .
8536	Write a string to the given path .
8537	Put contents into the given path .
8538	Updates a stream .
8539	Decrypt stream .
8540	Encrypt stream .
8541	Decrypt string
8542	Encrypt string
8543	Reads a stream from a string .
8544	Create a transport factory instance .
8545	Create mail manager .
8546	Returns the version number from the XML document .
8547	Returns the XML Schema for the given XSD version
8548	Fix the location of an XML source .
8549	Parse visibility .
8550	Sanitize data .
8551	Run global sanitizers
8552	Sanitizes a field
8553	Executes a sanitizer .
8554	Resolve the callback .
8555	Resolve an expression .
8556	Creates a string command .
8557	Gets the default values from reflection .
8558	Assert that the callable is valid .
8559	Returns true if the callable is a non static method .
8560	Creates a cookie jar .
8561	Convert an element to an array .
8562	Adds a child node .
8563	Adds a collection node .
8564	Create root element
8565	Cast the object to an array .
8566	Returns the list of registered listeners .
8567	Returns the listeners that are not called .
8568	Validate the same site
8569	Normalize the expiration time .
8570	Normalize the domain name .
8571	Normalize path .
8572	Get the timestamp from the given expiration .
8573	Start tracing event
8574	Applies the helpers to the translator .
8575	Filters helpers from string .
8576	Applies filters to the query .
8577	Logs a translation .
8578	Collects a translation message .
8579	Display an array of files
8580	Display a JSON string .
8581	Returns an array of Xliff objects .
8582	Get STIN
8583	Returns an iterator for a directory .
8584	Validates the event name .
8585	Converts a number to bytes .
8586	Converts a number to an integer .
8587	Get configuration from name
8588	Create an instance of the custom creator class .
8589	Adds an extractor .
8590	Creates an alias loader .
8591	Get the cache path .
8592	Push command to queue
8593	Checks if the command should be queued .
8594	Create a cookie session driver .
8595	Create a new migration session driver .
8596	Create a cache session based on the driver .
8597	Build a store instance .
8598	Build the encrypted session .
8599	Parse the action into an array .
8600	Get the first value of an array
8601	Parse notes from an XML element .
8602	Converts a UTF - 8 string to a charset .
8603	Tag data .
8604	Creates a log manager .
8605	Confirm command .
8606	Get default confirmation callback .
8607	Inject the profiler
8608	Collect data .
8609	Create template .
8610	Create a profile .
8611	Parse log level .
8612	Starts the session .
8613	Stores the current URL .
8614	Collects garbage collection from cookie .
8615	Adds a cookie to the response .
8616	Create a response view .
8617	Find template by name
8618	Normalize the file name .
8619	Parse view .
8620	Adds content to the message .
8621	Send Swift Message .
8622	Determines if a message should be sent .
8623	Create message .
8624	Call the message builder .
8625	Create view .
8626	Handles found routes .
8627	Prepares URI path
8628	Generate router file .
8629	Generate the cache directory .
8630	Returns the path for the given file .
8631	Checks the options .
8632	Returns a Parser instance .
8633	Returns the file path for the given path .
8634	Require a file only once .
8635	Create a symbolic link
8636	Set the directories .
8637	Adds a directory .
8638	Imports a language file .
8639	Adds a messageCatalogue .
8640	Set language fallback
8641	Get language fallback
8642	Add a presenter .
8643	Check for more pages
8644	Get display address
8645	Find the front controller .
8646	Find best port and port
8647	Finds the best port for the given host .
8648	Escapes a string .
8649	Get the data for the panel .
8650	Creates an appends stream .
8651	Parse tokens .
8652	Seeks to the next token iterator .
8653	Returns the value for the iterator .
8654	Factory method to create a Traceable object .
8655	Decrypt the cookies .
8656	Encrypt the cookies .
8657	Duplicate a cookie .
8658	Register a Symfony command .
8659	Returns the console instance .
8660	Initialize project directories
8661	Find view for named path .
8662	Returns the namespace segments for the given name .
8663	Find view files in paths .
8664	Returns an array of possible view files
8665	Returns information about an event .
8666	Render the Set Cookie header into a ResponseInterface .
8667	Add the twig environment .
8668	Get messages .
8669	Add a message .
8670	Alias middleware .
8671	Get log messages
8672	Handle view exception .
8673	Creates an exception based on the given exception .
8674	Returns the cache path .
8675	Ensure static proxy exists .
8676	Formats the statical proxy stub .
8677	Register markdown engine .
8678	Cleans a string
8679	Add TOCment to the output .
8680	Add references to an entry .
8681	Add flags to the output
8682	Adds the previous entry to the output .
8683	Add a messageid to the output .
8684	Add a message plural to the output .
8685	Adds a message string to the output .
8686	Add a header to the output .
8687	Get pagination links
8688	Create a cache adapter .
8689	Ensure that the user is correct .
8690	Determine if the expression is due .
8691	Run the command in the background .
8692	Run command in background
8693	Call the before callbacks .
8694	Call the after callbacks .
8695	Returns a closure that will be applied to the given start time interval .
8696	Checks if start time is between start and end time .
8697	Merge two matchers .
8698	Optimizes the given matchers .
8699	Optimizes the given matcher .
8700	Optimizes the matchers order
8701	Creates an html displayer instance .
8702	Create a ViewDispatcher .
8703	Create a WhoopsPrettyPrettyDisplayer instance .
8704	Get the number of recipients .
8705	Bootstraps the application
8706	Handle the request through the router .
8707	Renders an exception .
8708	Send request through middleware .
8709	Compile an array of parameters .
8710	Set the value at the given offset .
8711	Get the invoker .
8712	Binds a concrete class .
8713	Binds a concrete class .
8714	Binds a singleton class .
8715	Resolve the given abstract type .
8716	Resolve an abstract service .
8717	Resolve singleton instance .
8718	Extend the resolved class .
8719	Format a contextual binding .
8720	Get message id from response .
8721	Converts an array of email addresses to an array .
8722	Returns the MIME part of the message .
8723	Get the payload for the message .
8724	Processes the recipients array
8725	Process message parts
8726	Process headers .
8727	Checks the requirements of the project .
8728	Get an extension by path .
8729	Get a view instance .
8730	Determine if the string ends with another .
8731	Renders the cookie header .
8732	Create a list of cookies from a cookie string .
8733	Set the error .
8734	Set the exit code .
8735	Convert a route to a URI .
8736	Prepares route path .
8737	Check if route is required .
8738	Add port and scheme to URI .
8739	Replace route parameters .
8740	Replace named parameters .
8741	Add query string to route
8742	Returns the query string for the given parameters .
8743	Parse an array of parameters .
8744	Get the route middleware .
8745	Get disabled middleware
8746	Adds a new cookie to the collection .
8747	Splits a cookie pair into an array .
8748	Inject Content - Type header
8749	Filter words .
8750	Generate random string
8751	Replace the first occurrence of a string .
8752	Replace the last occurrence of a string .
8753	Replace subject by position .
8754	Get the verbosity level
8755	Run console command .
8756	Call a command .
8757	Call silent command .
8758	Gets the value of an argument .
8759	Gets the value of an option .
8760	Ask user question
8761	Asks for an optional question .
8762	Asks a choice question .
8763	Renders a table .
8764	Outputs a line .
8765	Log an info line .
8766	Output a comment .
8767	Output a question .
8768	Output an error message .
8769	Output a warning message .
8770	Configure the using Fluent definition .
8771	Adds parameters to the command line .
8772	Get the transport id from the response .
8773	Get the recipients of a message .
8774	Renders the template .
8775	Add a not report exception .
8776	Report an exception .
8777	Adds a transformer .
8778	Handle an error .
8779	Handle fatal error
8780	Register exception handler
8781	Register shutdown handler
8782	Prepares an exception .
8783	Transforms the given exception .
8784	Returns the level of the exception .
8785	Determine if the exception should be reported .
8786	Adds a Dumper .
8787	Dump data .
8788	Factory method to create a Dumper .
8789	Returns the string representation of the given entity
8790	Get the parameters for the given function .
8791	Converts code point number to UTF - 8 .
8792	Register the busing dispatcher .
8793	Optimize route tree
8794	Extract common parent nodes .
8795	Get sql with parameters
8796	Try to open a file .
8797	Create a new stream for the given resource .
8798	Copies data to a string .
8799	Copy data to a stream .
8800	Reads a line from the stream .
8801	Set default path and domain
8802	Get path and domain
8803	Creates a new handler instance .
8804	Update the host from the URI
8805	Filters the HTTP method .
8806	Creates a URI from a string .
8807	Returns the path without the file extension .
8808	Change the extension of the path .
8809	Create cache manager .
8810	Determines if a mock instance should be received .
8811	Resolves static proxy instance .
8812	Returns true if the class implements mock interface .
8813	Convert a command segment into a segment .
8814	Sets the response file .
8815	Set the Content - Disposition header .
8816	Set Last - Modified header
8817	Return a new cookie with the given value .
8818	Describes an object .
8819	Describes the command description .
8820	Returns an array of commands sorted by their names .
8821	Create the tab for the request .
8822	Prepare the request attributes .
8823	Prepare request headers
8824	Prepares server params
8825	Returns parsed body
8826	Export the value as a string .
8827	Create a new crypted connection .
8828	Get cache configuration .
8829	Adapts a filesystem adapter .
8830	Parses a route pattern .
8831	Generate regular expression .
8832	Get the invoker .
8833	Check if an object exists .
8834	Extracts the target language from the XML file .
8835	Create a VarDump Connection instance .
8836	Create dump server .
8837	Check if path exists
8838	Transforms the path to a transformed path .
8839	Get contents of a directory .
8840	Filter contents by type .
8841	Checks if the token matches the request .
8842	Add a cookie to the response .
8843	Sanitize collected messages .
8844	Compute message count .
8845	Sort messages by priority .
8846	Adds a stream .
8847	Closes the stream .
8848	Decode a GIF .
8849	Decodes the extension of the SVG
8850	Decode an image descriptor
8851	Decodes the image data .
8852	Set the order direction
8853	Returns the list of loaded resources
8854	Loads the items from the list .
8855	Set cities from array
8856	Set PSTNN networks from an array .
8857	Loads the IPnsnnet .
8858	Loads country codes
8859	Get all countries
8860	Returns a city by its ID
8861	Pads a string with padding
8862	Get all countries
8863	Update all networks
8864	Updates the networks .
8865	Creates a new Mapping instance .
8866	Decode delay .
8867	Checks if the current color has a transparent color .
8868	Decodes the disposition method
8869	Get the image size
8870	Get the offset
8871	Set the offset
8872	Get the country
8873	Convert to array
8874	Initialize from flat list .
8875	Initialize mapping from array
8876	Create a new Number
8877	Generate unique hash
8878	Generate auth string
8879	Load the call history .
8880	Call a soap method
8881	Returns a frame by index
8882	Adds an offset .
8883	Adds a size to the first frame .
8884	Get the loops of the current netcape
8885	Has global color table
8886	Returns the number of global colors .
8887	Returns the index of the background color .
8888	Adds a property to the first frame .
8889	Creates a new frame with the given property .
8890	Convert the object to an array .
8891	Get all pre paid balance
8892	Get balance array
8893	Get balance list
8894	Change the balance of the payment
8895	Synchronize Prepaid balance
8896	Set the canvas width and height
8897	Set the frame from decoded data .
8898	Creates frame from gd resource
8899	Encode this frame as a string .
8900	Builds the logical screen descriptor
8901	Builds the Netscape Extension .
8902	Builds the frame .
8903	Builds the frame control extension .
8904	Builds an image descriptor
8905	Create a new Order
8906	Change auto - renew status
8907	Renew the order .
8908	Load data from service provider
8909	Updates the mapping .
8910	Generate unique hash
8911	Checks if an ip is in range
8912	Returns a parameter value .
8913	Link metadata service
8914	Set meta data
8915	Add meta data
8916	Removes a service from the container
8917	Releases a service
8918	Get service by name
8919	Create a service instance from the factory .
8920	Resolve service provider
8921	Register a service provider .
8922	Bind a class
8923	Binds a class
8924	Binds a factory to the container .
8925	Bind a factory factory to a factory
8926	Get type of service resolver
8927	Add argument .
8928	Add arguments from an array of arguments
8929	Resolve arguments .
8930	Create the container .
8931	Sets the list of tokens .
8932	Returns the current token .
8933	Get next token
8934	Skips the current token .
8935	Returns the remaining tokens .
8936	Returns all tokens until the given token type is finished .
8937	Returns the tokens until the current scope is reached .
8938	Create an unexpected token .
8939	Parses a child node .
8940	Parses the result .
8941	Sets the container name .
8942	Adds a service definition
8943	Adds an array of services
8944	Adds a service to the container
8945	Import a namespace into the container .
8946	Checks if the given value is an invalid service builder .
8947	Generate normalized service name
8948	Generate PHP code .
8949	Returns the resolver method name for the given service name .
8950	Generates code for service arguments
8951	Generate meta data
8952	Generate Resolver types
8953	Generate the resolver mappings
8954	Generate Resolver methods
8955	Creates a ValueNode from a Token .
8956	Sets the value type
8957	Generate a map of packages .
8958	Returns the value of the argument .
8959	Returns true if the type is a value .
8960	Returns true if the collection contains the given key .
8961	Adds an element to the array .
8962	Convert to PHP array
8963	Returns the next token .
8964	Returns an array of tokens .
8965	Handles the application deployment .
8966	Short description of methodex
8967	Backup the database
8968	Extract command from install directory
8969	Copy environment .
8970	Get composer .
8971	Command for NPM
8972	Instantiates the database .
8973	Run the deploy command
8974	Resolve the service .
8975	Sets the cache directory .
8976	Create container .
8977	Handle the incoming request .
8978	Loads the container map from a vendor directory .
8979	Check if path exists
8980	Get the code from the container .
8981	Get the code from the container .
8982	Parse the given container file .
8983	Handle scope .
8984	Handle an import statement .
8985	Handle the parameter definition .
8986	Creates a service argument node .
8987	Handle the service definition .
8988	Creates an instance from a service configuration array .
8989	Add a method call .
8990	Add a method call
8991	Add meta data
8992	Checks if the user is an origin .
8993	Check if the request is authentic .
8994	Set the value of the parameter .
8995	Get Endomondo workout name by id
8996	Returns the time as a string
8997	Send the request .
8998	Set Endomondo type id
8999	Returns the end date of the event
9000	Returns the points as a string
9001	Get GPX
9002	Collect the response data .
9003	Retrieves models from the database .
9004	Get the payload for ajax .
9005	Get ajax response .
9006	Run a callback
9007	Sanitize handle .
9008	Validates all conditions
9009	Validates a single condition .
9010	Set size for specific device
9011	Add a new device to reset
9012	Returns the size of the given device .
9013	Builds the table structure .
9014	Check if user is logged in
9015	Create a start row .
9016	Returns a single column .
9017	Walks down the grid .
9018	Get start row
9019	Get column resets
9020	Returns the index of this node .
9021	Migrate table from legacy table
9022	Handle an AJAX request .
9023	Ajax handler
9024	Attach a callback to the response .
9025	Set validations .
9026	Handles the response .
9027	Get the response type
9028	Send response headers
9029	Send response body
9030	Gets the content of a URL
9031	Determine if the given GeoIP2 model is supported .
9032	Toggle the visibility of a record .
9033	Returns true if the current user has access .
9034	Build grid .
9035	Returns the column as a string .
9036	Add column reset
9037	Add column resets
9038	Get column resets
9039	Checks if a column has reset for a given column .
9040	Get column resets as a string
9041	Registers a new handle
9042	Enqueue scripts .
9043	Get nonces .
9044	Get grid columns
9045	Parse a template .
9046	Hook for getting content element
9047	Get grid columns
9048	Create row .
9049	Create grid column
9050	Build grid columns .
9051	Fetches result from database
9052	Prepare custom classes .
9053	Build column resets
9054	Create grid by id
9055	Implements hook for subcolumns
9056	Hook for creating a visible element .
9057	Loads a form field .
9058	Get grid columns
9059	Prepare container .
9060	Update subcolumns
9061	Append columnset id to palette .
9062	Append columns sizes to the palette .
9063	Returns an array of all available columns
9064	Returns an array of Grids
9065	Get the columns for a module .
9066	Get column orders
9067	Get column numbers .
9068	Get a value from the session .
9069	Check if a key exists
9070	Delete a value from the session .
9071	Load a value from the collection .
9072	Reflash the session .
9073	Parse insert tags .
9074	Returns the walkers for the given identifier .
9075	Translate parameters for insert tags .
9076	Returns the encoder parameters for the request .
9077	Get decryption parameters
9078	Save dynamic data
9079	Returns true if the value is valid
9080	Save the configuration file
9081	Initializes the Laravel entity .
9082	Renders the entity fields .
9083	Get field value
9084	Get field values
9085	Validates all entities
9086	Save all entities
9087	Assign dynamic fields to view .
9088	Get field translation by given locale .
9089	Get repeaters by locale .
9090	Get entities by field id
9091	Get entity by field id and field type
9092	Duplicate the entity
9093	Initializes the template .
9094	Check if all fields are valid
9095	Renders the field .
9096	Save group fields
9097	Get group by rule
9098	Matches a single rule .
9099	Initializes the group
9100	Get field post data
9101	Set point coordinates
9102	Get the first character from the given coordinates .
9103	Renders a row .
9104	Returns an array of rows
9105	Get the dot from the map
9106	Prime the current position
9107	Initializes repeat fields
9108	Create list control after post data
9109	Creates a list control
9110	Creates a field control .
9111	Create a new repeater for the given field .
9112	Save translations .
9113	Get display value
9114	Get the value of a field .
9115	Get template name
9116	Returns the default template name .
9117	Initialize default value
9118	Get repeater value
9119	Returns the HTML id of this object .
9120	Returns the HTML name of this field .
9121	Saves the field translation .
9122	Saves the model field .
9123	Saves the repeater field
9124	Get an option value
9125	Forwards to the given length
9126	Moves the current item .
9127	Checks if the task configuration has an ancestor .
9128	Checks if the task configuration has a descendant
9129	Reset the input .
9130	Checks if the condition is met .
9131	Configures the wrapped condition .
9132	Configures condition options .
9133	Checks the value for the given key .
9134	Checks if a value is empty .
9135	Returns the duration of the event .
9136	Contextualize options .
9137	Tries to find the best task to execute .
9138	Get the input code for the previous task
9139	Check if the input state is resolved .
9140	Get file path .
9141	Process the separator .
9142	Handle the iterator from input .
9143	Flush the process state .
9144	Returns the line count of the file .
9145	Rewind the current stream .
9146	Clean the transformer code .
9147	Gets the list of dependency groups for this task .
9148	Get main task group
9149	Check circular dependencies
9150	Builds the dependencies for the task configuration .
9151	Sorts the dependencies of the task .
9152	Resolve the given task configuration .
9153	Initializes the task configuration .
9154	Flush the task configuration .
9155	Handle the process state .
9156	Checks the process configuration for the process .
9157	Validate the model .
9158	Convert to array
9159	Get model fields
9160	Unset relation .
9161	Formats the full class name to the relation name .
9162	Adds a relation to the model .
9163	Adds a one - to - many relationship .
9164	Adds a many to many relationship .
9165	Returns an array of objects matching the query parameters
9166	Finds data source .
9167	Finds a model based on an array of data
9168	Returns the number of rows in the table
9169	Build select query
9170	Executes a SELECT query and returns the results as an array
9171	Hydrate the object
9172	Delete model from database
9173	Update the model
9174	Inserts a record into the database .
9175	Keeps whether or not to keep memory usage .
9176	Removes a callback .
9177	Get a model from the collection
9178	Removes a model from the collection .
9179	Get the index of an element
9180	Saves the elements .
9181	Prefix data with table name
9182	Prefix order with table name
9183	Returns the definition without the column name .
9184	Register a new database table .
9185	Make simple query object .
9186	Make a query object .
9187	Get model by slug
9188	Maybe install a database table
9189	Checks if a given table is already installed .
9190	Check if a table is installed .
9191	Fire plugin event .
9192	Save WP post .
9193	Get foreign column .
9194	Parse column defaults .
9195	Create a new query builder from a model .
9196	Sets the columns to be selected .
9197	Select single row
9198	Select all records
9199	Add an expression .
9200	Set where clause .
9201	Generate a where tag .
9202	Adds a nested where clause to the query .
9203	Where the table is joined .
9204	Add an or where clause to the query .
9205	Add a where date query .
9206	Add meta query .
9207	Adds order by clause
9208	Order by expression
9209	Adds a group by clause to the query .
9210	Group by expression
9211	Join another table .
9212	Join another subquery
9213	Paginate the results .
9214	Perform a callback for each query
9215	Defines a set of relations
9216	Parse nested data .
9217	Assign array value by path
9218	Makes a limit tag .
9219	Build sql query
9220	Update meta cache .
9221	Find one record by primary key
9222	Find many keys
9223	Find a record by primary key
9224	Find or create a new model .
9225	Get the first model matching the passed attributes .
9226	Get first record or create if not exists
9227	Update or create a new record .
9228	Handle the eager loading .
9229	Perform the eager loading of the model .
9230	Assert operator
9231	Prepares an alias for a column .
9232	Escape a value
9233	Configures the data source .
9234	Get column value
9235	Create a new record .
9236	Set the order by clause
9237	Adds ORDER BY clause
9238	Set all columns
9239	Build the eager load map .
9240	Save a WP comment .
9241	Returns the default argument value
9242	Query results .
9243	Parse the results .
9244	Parses a select statement .
9245	Parse order argument .
9246	Parses the limit clause .
9247	Checks if two numbers are equal .
9248	Checks if two values have changed .
9249	Fetches records from the database .
9250	Delete this model from the database
9251	Updates the model with the given values .
9252	Returns total number of pages
9253	Paginate the result .
9254	Returns the number of models found .
9255	Counts the number of models without limit .
9256	Check if an offset exists
9257	Set the value at the specified offset .
9258	Array access .
9259	Builds the query string .
9260	Check if the model is booted .
9261	Boot the trait .
9262	Fill model attributes .
9263	Defines a model attribute .
9264	Defines a guid attribute .
9265	Checks if a column is fillable .
9266	Set the value of an attribute .
9267	Set a raw attribute
9268	Returns the value of the requested attribute .
9269	Get raw attribute
9270	Get the value of an attribute .
9271	Converts an array of attributes to an array .
9272	Returns an array of all relations
9273	Get relation object .
9274	Set the value of a relation .
9275	Get relation s value
9276	Refresh the current state .
9277	Get dirty data
9278	Load an object from the database .
9279	Create an instance from a query string .
9280	Get data from database .
9281	Check if data is cached
9282	Update data in cache .
9283	Save model to database
9284	Save has foreign relations .
9285	Save loaded relations
9286	Save the record as an insert .
9287	Executes the update query on the database .
9288	Finishes the save event .
9289	Delete the model from the database
9290	Create many models .
9291	Fire the model event .
9292	Register a model event
9293	Get data to cache .
9294	Register a global scope
9295	Return a new query without global scopes
9296	Creates a new query with eager loaded models .
9297	Returns an array representation of the model s attributes .
9298	Returns the string for comparison
9299	Get the value of the query .
9300	Get data by primary key
9301	Get a single column
9302	Get one or more records by one or many
9303	Count the number of records in the database .
9304	Inserts data into table .
9305	Update row data
9306	Delete a row
9307	Delete many records
9308	Generate exception from db error
9309	Save a term .
9310	Make query object .
9311	Fetch results for eager load .
9312	Set new values
9313	Set a value in the header .
9314	Set fields to select
9315	Reset the select field .
9316	Sets the update query
9317	Sets the DELETE query
9318	Set insert query type
9319	Set the FROM clause
9320	Adds a JOIN clause to the query .
9321	Add an AND condition .
9322	Adds an OR where clause to the query .
9323	Reset the order by clause .
9324	Sets the LIMIT clause
9325	Reset the limit
9326	Boot the trash table .
9327	Returns the results of the current query .
9328	Load data from cache .
9329	Load a collection from the cache .
9330	Cache results .
9331	Cache a collection .
9332	Cache a single result
9333	Maybe register the cache events .
9334	Save WP user .
9335	Update last updated_at timestamp
9336	Returns container parameters
9337	Is container cacheable?
9338	Bootstrap the container .
9339	Load container configuration .
9340	Build the column name for the given table .
9341	Save the collection .
9342	Persists the removed records .
9343	Persists the related models .
9344	Create a new UUID
9345	Initialize the authentication provider .
9346	Creates a new model .
9347	Convert an asset
9348	Build result .
9349	Parse Less asset
9350	Send a message
9351	Returns the latest message for the given query .
9352	Count the number of executions .
9353	Adds a message to the queue .
9354	Send a Message .
9355	Verify sort .
9356	Adds a message
9357	Accessor for messages
9358	Imports issues .
9359	Array access .
9360	Check if an offset exists
9361	Extend an existing service
9362	Register a service provider .
9363	Set a service tag .
9364	Returns an array of service IDs for the given tag .
9365	Bootstrap the application .
9366	Initializes the bundles .
9367	Get kernel parameters
9368	Validate the given content .
9369	Validate the given content against the schema .
9370	Validate that the content is not empty .
9371	Get asset container .
9372	Outputs all assets
9373	Outputs all CSS assets
9374	Get the assets for the given type .
9375	Rorder the assets .
9376	Check if a dependency is valid .
9377	New post validator
9378	Returns a new instance of the XSD retriever .
9379	Create a new XSLSltRetrie instance .
9380	Creates a new CertificadoValidator instance .
9381	Creates a new CFDIRDER instance .
9382	Handles a command .
9383	Set a cookie
9384	Get a cookie value .
9385	Returns the first item matching the given value .
9386	Checks if a raw password is valid .
9387	Retrieves a node
9388	Returns the value of the specified node .
9389	Append a child element .
9390	Populate a Node .
9391	Retrieves a node
9392	Check if a value has a required value
9393	Add Doctrine queries
9394	Add multiple timers .
9395	Get file size
9396	Append a validator .
9397	Remove a validator
9398	Returns a validator
9399	Creates a new command .
9400	Runs the framework .
9401	Runs a filename .
9402	Authorize user .
9403	Returns the currently logged in user .
9404	Log in the user .
9405	Logout user .
9406	Adds a constraint to the collection .
9407	Validates the input .
9408	Redirects to a path .
9409	Returns the path to the file .
9410	Get message by index
9411	Generate custom post type name .
9412	Returns an array of supported functions
9413	Resolve command handler .
9414	Setup all issues .
9415	Get sum of nodes
9416	Get the value of an input .
9417	Set the position of the position in the MetaBox .
9418	Generate a taxonomy name .
9419	Redirects to a path .
9420	Register all commands .
9421	Returns the bundle s metadata .
9422	Returns the metadata for a namespace
9423	Finds the class namespace and path .
9424	Add an asset to the collection .
9425	Renders a view .
9426	Save data into cache .
9427	Load an XML document
9428	Removes all schemaLocations from the schema .
9429	Removes all non - standard NSS nodes .
9430	Removes unused namespace
9431	Initialize the bindings .
9432	Binds the data to the registry .
9433	Get the full name of the file .
9434	Initialize the context .
9435	Render the template .
9436	Load configuration files
9437	Add a route match
9438	Registers a new section
9439	Register a group of routes
9440	Starts a block .
9441	Stops a block .
9442	Outputs a block .
9443	Create a controller
9444	Instantiates a controller .
9445	Validates a URL
9446	Recursively find a template file .
9447	Set Entity Manager
9448	Sets the Connection Helper
9449	Renders a view .
9450	Open a form tag .
9451	Add data transformer .
9452	Retrieves a segment
9453	Shortcut for market
9454	Make an account
9455	Prepares an array of attributes
9456	Add extra .
9457	Fetch an object
9458	Writes a dialog to the console .
9459	Returns the default connection instance .
9460	Begin a transaction .
9461	Loads a manialink .
9462	Renders the content as XML .
9463	Connects to the server
9464	Write the watch
9465	Sets the background color
9466	Set image .
9467	Set image id
9468	Set image focus
9469	Set image focusid
9470	Add a link to the Mania
9471	Get config value
9472	Set config value
9473	Get translation .
9474	Get an array of values by key
9475	Strip styles from string
9476	Create a new redirect
9477	Searches for numbers .
9478	Return an instance of the cache driver .
9479	Loads Maniaink .
9480	Start a frame .
9481	End a frame .
9482	Create a redirect
9483	Append an XML string
9484	Build the driver instance .
9485	Set Border
9486	Declares a new font .
9487	Protected on image
9488	Called when image is fast
9489	On image quality
9490	Get a redirect for the given request .
9491	Get redirects .
9492	Get the default redirects .
9493	Set Array Size
9494	Set the selected icon
9495	Invoke the command
9496	Set media data
9497	Returns the LIMIT portion of the given length
9498	Returns the update string
9499	Gets a parameter value
9500	Get the value of a parameter .
9501	Get the value of a post
9502	Restore a variable
9503	Redirects to a route
9504	Create Link Arguments
9505	Create an absolute link list .
9506	Increment position
9507	Increment position
9508	Increment position
9509	Sets the position of the current position
9510	Set the scale .
9511	Sets the value of the group .
9512	Set the halignment
9513	Sets the alignment
9514	Set the size of the image .
9515	Set the size of the image .
9516	Set image size
9517	adds a new item
9518	Add a gap
9519	Get all keys .
9520	Get all redirect status .
9521	Error handler .
9522	Compute the exception message
9523	Compute the short message
9524	Handles a redirect .
9525	Uploads a file to the server .
9526	Returns the current url
9527	Calculates the position of a position in a given position
9528	Gets the aligned position of an position in a given position
9529	Gets the position of an element
9530	Builds the database
9531	Quote data .
9532	Reset all balances .
9533	Queries the database for multiple assets
9534	Configure class loader
9535	Get service ids
9536	Get return type
9537	Execute transaction
9538	Get a balance entry .
9539	Get hierarchy
9540	Change Content - Type
9541	Parse the raw header line into an array
9542	Convert a string to an array .
9543	Build an array of dimensions
9544	Returns array of asset types
9545	Executes the balance transaction
9546	Get the balance for a given asset type .
9547	Perform the authentication .
9548	Mutate a property .
9549	Fetch data from url .
9550	Get the url for this request .
9551	Generate the translations string
9552	Parse csv url
9553	Localize the data
9554	Backup the given strings
9555	Get asset by asset type code
9556	Get asset type id by account id
9557	Get a specific asset type .
9558	Get system customer id
9559	Executes an authorization request
9560	Builds the configured strategy key .
9561	Parse an Oauth response .
9562	Login action .
9563	Renders a view .
9564	Get all asset types
9565	Send response to client
9566	Authenticate a user
9567	Verify token .
9568	Validates a doc url .
9569	Register the API client .
9570	Register the token class .
9571	Register the services for console .
9572	Starts a new session .
9573	Returns an array of class names
9574	Set status code .
9575	Parse a string into an array
9576	Finds the list of tokens .
9577	Finds the end of a quoted string .
9578	Finds the end of a URL
9579	Check a css rule .
9580	Merge words .
9581	Check selectors .
9582	Returns an array of selectors
9583	Parse an item into an array
9584	Set the current application key for the request .
9585	Get current application key
9586	Add the accepted JSON type to the request .
9587	Builds the database
9588	Unpublish a post
9589	Save unpublish post
9590	Initializes the scheduler
9591	Generate md5 hash
9592	Generate value for key
9593	Verify the given key .
9594	Generate HTTP headers for an application
9595	Generate query data for application
9596	Get entity id
9597	Add fit to fit .
9598	Get the manipulations .
9599	Creates a new Credit Account
9600	Fills the property with the given values .
9601	Get Uri
9602	Set user info
9603	Set the port .
9604	Set the path to the file .
9605	Get a segment
9606	Returns the value of a query parameter .
9607	Builds the table .
9608	Aggregate aggregation .
9609	Get configuration by strategy
9610	Build the configuration array
9611	Composes the result .
9612	Executes the current request
9613	Executes the operation .
9614	Prepare log ids .
9615	Validates transactions
9616	Set headers .
9617	Set header .
9618	Adds a header to the collection .
9619	Remove a header .
9620	Adds a PSR - 4 prefix to the paths collection .
9621	Registers a set of prefixes .
9622	Finds the file for the given class name .
9623	Find file with given suffix
9624	Convert object to array
9625	Clean an array
9626	Set code .
9627	Initialize the Uri
9628	Parse server params
9629	Initialize uploaded files .
9630	Parse uploaded files .
9631	Parse multiple uploaded files .
9632	Returns true if the response contains the given content type .
9633	Run the application .
9634	Dispatches the command .
9635	Output a table
9636	Output error message
9637	Display help message
9638	Get the list of available commands
9639	Make directory .
9640	Append route to stub .
9641	Replace a file and replace it .
9642	Dispatch the URI
9643	Create a template response .
9644	Returns the current page .
9645	Returns a response for the requested page .
9646	Builds a response for the given URI .
9647	Returns the page for the given URI .
9648	Returns the alias configuration for the given URI .
9649	Displays a single record .
9650	Displays a form to create a new I18n model .
9651	Add the headline ids to the given content .
9652	Run the application
9653	Run cli command
9654	Register the service provider .
9655	Returns the Markdown renderer instance .
9656	Get the blade templates .
9657	Get migration files .
9658	Find a page by its identifier
9659	Returns the page name for the given page identifier .
9660	Returns meta data for page identifier
9661	Get the page tree
9662	Get all pages for a given path .
9663	Save the migration .
9664	Loads messages from database .
9665	Send activation mail
9666	Perform a search on the resultset .
9667	Renders the template .
9668	Renders an expression .
9669	Resolve an expression key path .
9670	Finds all classes
9671	Prepare configuration array
9672	Returns the current host
9673	Get data by key
9674	Displays a single message .
9675	Updates an existing Message model . If update is successful the browser will be redirected to the view page .
9676	Deletes a message .
9677	Finds the I18n model based on the message id
9678	List Pages .
9679	Get parsed content
9680	Method to get property sorting
9681	Returns the URI for this request .
9682	Get url from meta - path .
9683	Get meta title
9684	Make a get request
9685	Builds the URL for the given API method .
9686	Handles the response .
9687	Initializes the configuration .
9688	Profile method .
9689	Get the template file
9690	Returns the value for the given key path .
9691	Sets the root directory .
9692	Find class reflection
9693	Gets the reflection class for a file
9694	Uploads a new media item .
9695	Insert media .
9696	Returns the number of hours
9697	Get dirty data
9698	Register a clean entity .
9699	Get dirty fields
9700	Add the array of identifiers to the serialized model .
9701	Get entity id from string
9702	Get tags .
9703	Get real class name
9704	Configure Tab Element Factory
9705	Deletes the associated content media .
9706	Create the title
9707	Render pdf preview
9708	Renders the image .
9709	Converts raw data into an object .
9710	Hydrates a list of models .
9711	Deserialize all data
9712	Deserialize data .
9713	Guesses the collection class
9714	Build sitemap data
9715	Returns the navigation for the given element id .
9716	Returns an iterator for the given element id
9717	Normalize this object s attributes .
9718	Get extra property
9719	Generate random string
9720	Limit words to a string
9721	Returns an array of files
9722	Generate a short description
9723	Check if the time slot is overlapping .
9724	Returns a list of time slots that are not overlapping .
9725	Merge time slots .
9726	Make a GET request to the API
9727	Merge default parameters .
9728	Executes an HTTP request .
9729	Renders the backend view .
9730	Returns the navigation iterator
9731	Get grid iterator
9732	Before save callback
9733	Processes the content .
9734	Updates an existing media model . If update is successful the browser will be redirected to the view page .
9735	Internal function to do a media join
9736	Upload media .
9737	Updates model data .
9738	List media .
9739	Renders a row .
9740	Deletes a media item .
9741	Set the attribute list .
9742	Returns an array of serialized model names
9743	Creates the default directories
9744	Export the views .
9745	Export controllers .
9746	Export routes .
9747	Checks packages .
9748	Copy plugin files
9749	Copy asset files
9750	Copy less folders
9751	Get settings by categories
9752	Create navigation from serialized array .
9753	Creates a nav item from an array .
9754	Load a block .
9755	Get module by name
9756	Serialize an object .
9757	Get model name by key .
9758	Returns the class metadata for the given model name .
9759	Get class metadata by id
9760	Render the tree
9761	Get a tree of pages
9762	Remove item from cache .
9763	Lists all tags .
9764	Get tags weights
9765	Add multiple tags
9766	Removes the given tags .
9767	Answers an array of options for the tab parent .
9768	Generate columns .
9769	Count required separators .
9770	Create a new tab separator .
9771	Protected create stop element
9772	Create a new tab element .
9773	Get stop element
9774	Add an icon to a row
9775	Get select options
9776	List constant status
9777	List types .
9778	Returns the label for the given type
9779	Get Listing Order Array
9780	Finds the replacement value for the current model .
9781	Moves forward to the next item
9782	Returns the title of the current item .
9783	Generate the active field
9784	Make a new router instance .
9785	Get driver by name .
9786	Call a service .
9787	Call a router .
9788	Resolve dispatch dependencies
9789	Get nested parameters .
9790	Find Routable attributes
9791	Finds the correct route for the given resolver .
9792	Finds the route for the given resolver .
9793	Get alternative resource action
9794	Dispatch route .
9795	List items .
9796	Getter for shipping method .
9797	Get the shipping method .
9798	Sets the route name .
9799	Build resource schema .
9800	Update shipping address .
9801	Call an HTTP method .
9802	Handle the Illuminate response .
9803	Handle response callback
9804	Throws an HTTP exception
9805	Returns true if the response contains no HTML content .
9806	Registers an error handler .
9807	Answers an array of options for the given action .
9808	Remove an item from the cache .
9809	Save an item in the cache .
9810	Outputs a block of messages .
9811	Gets a value from the cache .
9812	Stores a value in the cache .
9813	Set multiple values at once
9814	Delete multiple cache items
9815	Check if cache key exists
9816	Getter for the label
9817	Get full path name .
9818	Create a tree from a collection .
9819	Type a command .
9820	Set the members of the resource
9821	Loads PSR - 7 class for the given class name .
9822	Set the account id
9823	Translate an exception .
9824	Get console instance .
9825	Execute API request
9826	Returns the values of the class
9827	List buckets .
9828	Update container properties
9829	Check if blob exists
9830	Encode a Firebase JWT
9831	Decode a token .
9832	Get the payload from the token .
9833	Extracts the tokens from a token .
9834	Determine if the current date is expired .
9835	Creates an index .
9836	Extracts the default value for a field .
9837	Adds previous button
9838	Add next button
9839	Returns the value of the given code
9840	Reveal a record .
9841	Checks if value is an object .
9842	Checks if value is empty .
9843	Convert data to a record .
9844	Parse a SOAP response
9845	Get configurator by name
9846	Checks if a configurator exists .
9847	Get writer class by format
9848	Get a writer from a content negotiation .
9849	Transforms a DateTime object into a string .
9850	Initializes the datagrid view
9851	Read data from a payload .
9852	Parse the payload
9853	Writes the given payload to the given payload .
9854	Returns a reader for the given content type .
9855	Returns a writer for the given content type .
9856	Before test .
9857	Triggers after each test .
9858	Triggers after step .
9859	Initialize Laravel connector .
9860	Boot the Laravel application
9861	Go to a given route
9862	Go to a specific action .
9863	Returns the action with the given action name .
9864	See current route match .
9865	See current action is equal to current url
9866	Assert that the given key exists in the session .
9867	See the form has errors .
9868	Checks the error message for the view .
9869	Set the user as logged in .
9870	Inserts a record into the database .
9871	Transforms a number into a string .
9872	Get the number formatter .
9873	Nests an array to nest data .
9874	Flattens a multidimensional array .
9875	Convert array to stdClass
9876	Creates a new column .
9877	Builds the header view .
9878	Builds a cell view .
9879	Creates a new column .
9880	Returns true if the type is compact .
9881	Get the base data for the gateway .
9882	Get shipping data .
9883	Get invoice data
9884	Send transaction data
9885	Trims whitespace from a string
9886	Converts FQCN to block prefix
9887	Transforms the value .
9888	Parse the given value into an array .
9889	Add an unresolved column .
9890	Validate uploaded file
9891	Resolve the given filename .
9892	Updates the form for editing a record .
9893	Update the edit form
9894	Updates an item edit form
9895	Lock a record
9896	Applies the configuration to the client .
9897	Publish item .
9898	Loads a language file
9899	Send the given request .
9900	Build a new instance from an array of parts .
9901	Create new user .
9902	Show the form for editing a user .
9903	Update the specified user .
9904	Remove the specified user .
9905	Creates a new MPDF instance .
9906	Add host header
9907	Build a Guzzle request
9908	Execute callable chain
9909	Check if a class exists .
9910	Runs the thread
9911	Ensure the thread is running .
9912	Queues a queue request
9913	Publish a batch of requests
9914	Returns the key for the given cursor .
9915	Rewinds the iterator to the beginning
9916	Export the format to a string
9917	Set options from array
9918	Make a Publish API call
9919	Make a http request
9920	Publish an item .
9921	Import headers .
9922	Get protocol version
9923	Validates the data .
9924	Load the translator .
9925	Set the local validator
9926	Get validation errors
9927	Update the number of times
9928	Get the locked message
9929	Determine if the current user is editing today
9930	Check if an offset exists
9931	Sort the collection
9932	Parse the configuration .
9933	Format the user s birthday .
9934	Validate a birthday .
9935	Parse the luminosity formula .
9936	Returns the translation for the given locale .
9937	Saves ACL update
9938	Synchronize ACL
9939	on list
9940	on role create or edit form
9941	on user create or edit form
9942	on area create
9943	View form .
9944	Register the roles .
9945	Finds an object by the given criteria .
9946	Returns a new instance of the class .
9947	Returns the object factory .
9948	Removes items by criteria .
9949	Removes one record from the database .
9950	Remove one or more objects
9951	Refresh the object .
9952	Detach one or more objects
9953	Returns the supported method .
9954	Call supported method
9955	Runs a manager action .
9956	Flush the objects
9957	Prepares a tag from its parts .
9958	Pagination method .
9959	Set current page .
9960	Update the specified permission in storage .
9961	Get a paginator instance .
9962	Finds PaginatedBy criteria .
9963	Boot extension components
9964	Boot the application memory .
9965	Load route parts
9966	Extended validator .
9967	Save model attributes
9968	Validate the model .
9969	Merge rules .
9970	Purge undefined attributes .
9971	Auto hash .
9972	Disables enabled filters .
9973	Disable a filter .
9974	Restore disabled filters .
9975	Restore a disabled filter .
9976	Answers the columns for the given role .
9977	Assigns a user to a given user .
9978	Check if the given code is successful .
9979	Get current template name
9980	Returns a new RoleForm instance .
9981	Show form .
9982	Show user form .
9983	Edit user .
9984	Store new user .
9985	Update user .
9986	Remove user .
9987	Save user .
9988	Check if current url is within path
9989	Get registered type
9990	Returns the Etag for the given visitor identifier
9991	Get the timestamp field
9992	Returns the timestamp hash for the given timestamp field .
9993	Execute the query
9994	Returns an array of ids
9995	Returns the number of rows in this table .
9996	Get table name
9997	Get the order by
9998	Set order by value
9999	Returns an array of conditions
10000	Adds a pattern to the current query .
10001	Set join table
10002	Edit ACL form
10003	Update ACL .
10004	Set the logger .
10005	Starts the worker .
10006	Stop the session
10007	Kill the daemon
10008	Add a WHERE clause to the query .
10009	Get the where clause .
10010	Count the number of rows in this table .
10011	Get first record
10012	Returns an array of ids
10013	Execute select query
10014	Load by type .
10015	Returns sql for select fields
10016	Get all modules .
10017	Splits a resource .
10018	Defines all user permissions .
10019	Assign a role to a user
10020	Remove a role from a user
10021	Create form .
10022	Edits the presenter .
10023	Store a new role .
10024	Update listener .
10025	Destroy given role .
10026	Save role .
10027	Import permissions .
10028	Get acl for a user .
10029	Clear analytics data
10030	Clears message data
10031	Make the widget .
10032	Show the form for editing the specified role .
10033	Scope the user s roles .
10034	Get all statuses .
10035	Gets the actions column .
10036	User roles .
10037	Modify an instance
10038	Gets a producer for a registered type .
10039	Register a producer for a given type
10040	Registers a producer by class name .
10041	Get an object by its type
10042	Get object by id
10043	Add value to object pool
10044	Remember an object in the database .
10045	Returns the number of rows for the specified type .
10046	Finds a type
10047	Selects one by type .
10048	Returns a list of fields for the given type .
10049	Returns an escaped order by type .
10050	Get trait names by type .
10051	Recursively get all trait names .
10052	Adapt the controls to a grid .
10053	Get the checked label .
10054	Prepare current page entity
10055	Set Tracking Tracking Tracking
10056	Set email tracking
10057	Returns the site path for the given URL .
10058	Analyze the given URL
10059	Returns basket product category path
10060	Checks if two values are equal .
10061	Loads fields from a row .
10062	Creates a copy of this model .
10063	Revert the changed field .
10064	Get old value
10065	Set field value
10066	Inserts a new record .
10067	Updates the current row .
10068	Refresh generated fields values
10069	Compares two values .
10070	Generate a URI for a named route .
10071	Store a newly created role
10072	Get field errors
10073	Check if an error exists
10074	Adds an error to the collection
10075	Prepare product title
10076	Modify by contact controller
10077	Modify by newsletter .
10078	Modify the user with registration information .
10079	Removes an event subscriber .
10080	Restore event subscriber
10081	Disables event listeners .
10082	Disables an event listener .
10083	Restore all event listeners .
10084	Restore event listeners
10085	Returns the event subscriber class name .
10086	Determines if the given event class is an event subscriber .
10087	Get event listeners
10088	Returns active user id
10089	Returns the user s email address
10090	Generate cache key
10091	Generate cache keys .
10092	Send API request
10093	Checks if an item exists in the collection
10094	Get an item from the collection
10095	Get a value from an item .
10096	Set an item in the collection
10097	Put an item into the collection .
10098	Set a value in an array .
10099	Remove an item from the collection
10100	Remove a value from an item .
10101	Set logger class
10102	Bootstrap the application .
10103	Set mail configuration
10104	Get the value of a field .
10105	Convert a value to a string .
10106	Get page size
10107	Register the services .
10108	Validate required fields
10109	Get WP notice instance .
10110	Initialize admin actions
10111	Loads the main script
10112	Display notices .
10113	Register a notice .
10114	Dismiss notice AJAX handler
10115	Dismiss the notice notice .
10116	Mark a user as dismissed .
10117	Dismiss a global .
10118	Restore notice .
10119	Restore the deleted user .
10120	Restore the dismissed notice .
10121	Get the list of dismissed notifications .
10122	Check if an instance is dismissed .
10123	Get a notice .
10124	Perform a raw item
10125	Process collection collection
10126	Include attachments
10127	Gets the raw items .
10128	Set the attachments .
10129	Parse the attachments into an array .
10130	Attach an attachment .
10131	Attaches a class to an attachment .
10132	Merge arrays recursively .
10133	Get response headers
10134	Get card reference
10135	Get customer reference
10136	Get class name
10137	Returns the namespace of a class .
10138	Finds the adder method .
10139	Initializes the mappings .
10140	Set the translation file
10141	Reads a property of an object .
10142	The default entity manager
10143	Run before action .
10144	After action .
10145	Extend a collection
10146	Append data to collection .
10147	Adds an entity to the collection .
10148	Check if a property is set
10149	Get the last element
10150	Returns the element moved by offset .
10151	Checks if a field has a specific value .
10152	Search for a field in the collection
10153	Shift a slice
10154	Filter entities by a closure
10155	Returns a collection of entities
10156	Splits the collection into chunks .
10157	Get a slice of the collection
10158	Splits the parts into chunks .
10159	Unset an offset
10160	Removes the distinct values from the collection .
10161	Reverse the iterator
10162	Returns all values for the given property
10163	Bind collection to collection
10164	Group collection by field .
10165	Prepare scopes .
10166	Parse scope arguments
10167	Set a variable type .
10168	Registers an annotation based on a namespace .
10169	Converts a string to camel case .
10170	Prepare data for insert
10171	Update the cached data .
10172	Parse filter fields
10173	Parse filter values .
10174	Converts an array of data to an object
10175	Retrieve the label for this translation
10176	Get Additional Style By Type
10177	Get additional styles by type
10178	Get the link for this request
10179	Convert data to array
10180	Configure a collection
10181	Get the connection .
10182	Import a field
10183	Convert a string to a URL
10184	Fire the job .
10185	Delete the record
10186	Get class metadata .
10187	Flush the entity manager .
10188	Finds an entity .
10189	Clears an entity manager .
10190	Removes an entity .
10191	Refresh an entity .
10192	Get entity repository
10193	Checks if an entity exists
10194	Creates an entity manager
10195	Process the SODR request
10196	Perform merge .
10197	Merge two lines together .
10198	Checks if there are more than one or more rows to be modified .
10199	Removes the lines removed from an ancestor .
10200	Send an ECDR record to the client .
10201	Register the service container .
10202	Apply configs .
10203	Add env vars to the app
10204	Pop a job from the queue .
10205	Insert a job record .
10206	Request an Xcdr header
10207	Converts a string to the given delimiter .
10208	Create a new record .
10209	Reads a record .
10210	Update a record
10211	Destroys a record .
10212	Restore the deleted keys .
10213	Returns the number of records in this collection .
10214	Create a new proxy instance .
10215	Close all output interfaces
10216	Load widgets .
10217	Load theme options .
10218	onXRPCR - start event
10219	Adds a child to the menu .
10220	Create new Permission .
10221	Show the form for editing the specified permission .
10222	Update the specified permission .
10223	Remove the specified permission from storage .
10224	Set the adapter
10225	Get the adapter type
10226	Wait for the current connection to be ready
10227	Get a list of channels
10228	Get all games
10229	Convert data to an array
10230	Decodes data as object
10231	Serialize data as JSON .
10232	read as string
10233	read as integer value
10234	read as float value
10235	read as boolean value
10236	Generate hydrator class .
10237	Finds all instance properties
10238	Creates the contructor
10239	Create hydration method .
10240	Update the config
10241	Create local . json file
10242	Find page by attribute
10243	Finds all pages matching the given attribute .
10244	Find page by option
10245	Find pages by option
10246	Register widget bindings .
10247	Register the view parser .
10248	Register the service provider .
10249	Create a database driver
10250	Returns an instance of ResultInterface
10251	Starts a timer .
10252	Subscribe to a signal
10253	Unsubscribes from a signal .
10254	Get the value for the given type .
10255	Set the keys of a row .
10256	Executes a query and returns the number of columns .
10257	Set the properties for a row .
10258	Strip table name from database
10259	Select a virtual server
10260	Select server by port
10261	Returns the server port for the specified server ID .
10262	Returns the ServerSpeak3_Node_Client object matching the given name .
10263	Returns the first TeamSpeak3_Node_Client object matching the given UID .
10264	Creates a new virtual server .
10265	Deletes the specified server .
10266	Start a server
10267	Stop the server process .
10268	Gets an array of permissions
10269	Returns an array of permissions matching the specified permission ID .
10270	Returns the permission ID for the given name .
10271	Gets the name of the permission that matches the given ID .
10272	Gets a permission object by ID .
10273	Checks the specified permissions for the specified permission .
10274	Logs a message to the server .
10275	Log in the given username and password .
10276	Logout action .
10277	Set the value of the whois connection .
10278	Get validator .
10279	Sets the curl content
10280	Parse the result returned by the client .
10281	Get common application attributes .
10282	Returns the value of the specified option .
10283	Build options array
10284	Get user mapping .
10285	Ping the server .
10286	Set an attribute .
10287	Formats this payment as a string .
10288	Formats the amount for accounting .
10289	Returns the rounded amount
10290	Returns an array of percentages .
10291	Prepares an array of elements to be injected into the form .
10292	Retrieves an access token
10293	Run the controller .
10294	Search for a route
10295	Request method .
10296	Get all logs
10297	Return the death of the string
10298	Converts bytes to bytes .
10299	Returns the TeamSpeak3_Speak3_Interface object for the given codec .
10300	Returns the group type
10301	Returns the permission type for the given type .
10302	Gets the log level
10303	Convert an entry to an array
10304	Returns a list of events
10305	Get traits .
10306	Call a trait method
10307	Call all events
10308	Retrieve the attribute labels .
10309	Get the list of attribute hints .
10310	Convert to array
10311	Fetches the error message from the server
10312	Fetch reply from server
10313	Get identity .
10314	Returns true if the user has the identity
10315	Restore the model .
10316	Get a single user
10317	Get a user s following games
10318	Get notices .
10319	Get channel .
10320	Escapes the string .
10321	Un - escapes the current string .
10322	Get team information
10323	Adds a result to the collection .
10324	Get a stream
10325	Get a list of streams
10326	Get featured streams
10327	Get followed streams
10328	Gets a summary of streams
10329	Get top data
10330	Returns the value of the element .
10331	Resolve the given TSDNS hostname .
10332	Get configurables
10333	Send a message to the user .
10334	Kicks the client .
10335	Downloads the avatar image
10336	Binds events to the collection .
10337	Connects to a single element .
10338	Get Query Variable
10339	Get base uri
10340	Send command to server
10341	Wait for the ManiaScript .
10342	Prepares a command for execution
10343	Returns the host of this team .
10344	List all registered extensions
10345	Writes the application configuration file .
10346	Sets the parent element .
10347	Return an array of columns
10348	Create a Transcoder instance .
10349	Get a value by case insensitive name .
10350	Set by case - insensitive name .
10351	Get the notices as an array
10352	Lists all Extensions .
10353	Perform the actual request
10354	Run a task .
10355	Deactivate an extension .
10356	Activate an extension
10357	Uninstalls an extension
10358	Run a single task .
10359	Returns the TeamSpeak3_Node_Client object matching the given name .
10360	Downloads the icon
10361	Send a message to the client .
10362	Delete channel .
10363	Encode a JWT .
10364	Sign a message
10365	JSON decode .
10366	Commit current configuration
10367	Bootstrap application services
10368	Copy a channel group
10369	Send text message
10370	Get form class name .
10371	Get FOSView by id
10372	Returns a list of entities .
10373	Creates a new entity .
10374	Updates an entity .
10375	Deletes an FOSView entity .
10376	Reads a file .
10377	Parse a JSON string .
10378	Call a file .
10379	Normalize the ID .
10380	Clean the attributes .
10381	Sets the value of the element .
10382	Adds an element .
10383	Get top level window
10384	Remove an element from the collection .
10385	Get an object by its id
10386	Loads the state from the passed path .
10387	Save the current state .
10388	Set data type
10389	On channel created .
10390	Generate localized data field for the given field .
10391	Get localized data field
10392	Returns the data for the other package .
10393	Get Package Data
10394	Humanize a readme string .
10395	Prepare the migration task for the given extension .
10396	Build a deferred task
10397	Matches a route against a set of routes
10398	Parse regex route
10399	Checks if the given object is strict .
10400	Gets the profiler .
10401	Initialize the transport .
10402	Get blameable attributes .
10403	Get timestamp attributes .
10404	Evaluate the attributes
10405	Initializes the base attributes .
10406	Generate a private key
10407	Triggers the after request .
10408	Reads data from the server .
10409	Send data to server
10410	Restore dump .
10411	Dump database .
10412	Initialize menu .
10413	Adds a button to the menu .
10414	Run the Phxcl
10415	Populate columns with longest value
10416	Populate numeric columns with long value
10417	Transforms a JSON string into an array .
10418	Register the service provider .
10419	Sets a file path .
10420	Set a post field .
10421	Set raw content
10422	Resolve an abstract .
10423	Binds an abstract .
10424	Get the abstract .
10425	Dispatch an event .
10426	Returns the channel spacer type
10427	Returns the alignment for a channel spacer .
10428	Adds a set of specified permissions to a channel
10429	Removes a set of specified permissions from a channel .
10430	Adds a set of specified permissions to a channel client .
10431	Remove a set of specified permissions from a channel .
10432	Returns a list of files in a channel .
10433	Returns the TeamSpeak3_Node_Client object matching the given ID .
10434	Returns the TeamSpeak3_Node_Client object matching the given unique identifier .
10435	Moves a client channel .
10436	Kicks a client .
10437	Remove a set of specified permissions from a client
10438	Gets a ServerSpeak3Group object matching the given ID .
10439	Get a server group by name
10440	Adds a set of specified permissions to a server group
10441	Get server group profiles
10442	Gets a channel group by ID .
10443	Gets a channel group by name .
10444	Adds a set of specified permissions to a channel group
10445	Reset the user s permissions .
10446	Uploads an icon
10447	Create a new snapshot
10448	Get a log view
10449	Log add message
10450	Sorts the client list .
10451	Sort the list of TeamSpeak3 .
10452	Sorts the list of files .
10453	Copy server group
10454	Get the name of an icon .
10455	Get TeamSpeak3_Helper class .
10456	Gets the viewer object
10457	Filters a list of nodes .
10458	Writes a cache file .
10459	Get hydrator class .
10460	Connect to the server
10461	Disconnects from the server .
10462	Reads a single line from the server .
10463	Returns true if the container can be created .
10464	Create new role .
10465	Update the specified role .
10466	Remove the specified role from storage .
10467	Perform a GET request
10468	Answers the spacer class for the spacer .
10469	Answers the icon for the team .
10470	Get the team name .
10471	Answers the suffix flag for the team .
10472	Initialize the file transfer .
10473	Upload a file to the server .
10474	Downloads a file from the given ftp - server .
10475	Returns the session context .
10476	Returns the type manager .
10477	Get database connection
10478	Removes a database connection
10479	Process security filters
10480	Dispatches the request
10481	Get GET parameters
10482	Renders a page view .
10483	Checks if the request is valid
10484	Renders the view .
10485	Redirects to default module view
10486	Redirect user to default view
10487	Initializes the user profile
10488	Get user preference
10489	Get default permission
10490	Returns current view name
10491	Set current view name
10492	Get current view set
10493	Set current view set
10494	Set the base path of the application .
10495	Get module path
10496	Computes hash of sql
10497	Checks if the string matches the given hash .
10498	Populate the metadata array
10499	Configure an account
10500	Send email .
10501	Log an email
10502	Gets information about the specified tag .
10503	Returns the autoload file path for the given class name .
10504	Load metadata class
10505	Returns the path to the core files
10506	Find the class file on the cache .
10507	Fill person attributes .
10508	Set a job .
10509	Process the jobs .
10510	Determine if date is not due .
10511	Renders the label .
10512	Flattens a path .
10513	Get the configuration for the application .
10514	Creates a request
10515	Stores the response .
10516	Gets the data for a Plot Object .
10517	Renders an XYPlot
10518	Get the value of a mark .
10519	Get font name
10520	Returns instance of class .
10521	Get an attribute by key .
10522	Set an attribute in a group .
10523	Get an attribute in a group .
10524	Find or create a new model .
10525	Returns the model instance .
10526	Check if a function is unique .
10527	Call all registered filters
10528	Append a hook .
10529	Check if hook exists
10530	Call a hook
10531	Replace hook .
10532	Returns count of registered hook
10533	Is hook .
10534	Check if hook is called
10535	Adds a new route
10536	Add a route to the application .
10537	Run application .
10538	Signal execution .
10539	Set a value in the container .
10540	Get a raw definition .
10541	Encrypt a value
10542	Decrypt value
10543	Get the default key
10544	Calculate arguments
10545	Returns the type of the given string
10546	Add app
10547	Returns a sub route .
10548	Serializes the route .
10549	Unserialize the data
10550	Returns the actual year for the given start year .
10551	Get current time stamp
10552	Returns a specific day .
10553	Returns the short day of the given day .
10554	Returns the translated month .
10555	Returns a short month name .
10556	Formats a date .
10557	Returns a formatted datetime
10558	Register base services .
10559	post section tree
10560	Set owner .
10561	Removes comments .
10562	Minify CSS .
10563	Set a global variable .
10564	Quote a value
10565	Explode a generic string
10566	Returns the specified role .
10567	Adds a role to the user .
10568	Checks if the user has the given role
10569	Default error handler
10570	PHP exception handler
10571	Get error message
10572	Prints a debug backtrace
10573	Set random name
10574	Adds a new setting .
10575	Add a setting .
10576	Unset an offset
10577	Set sync state
10578	Collect sync data
10579	Creates a new expression context .
10580	Terminate the process .
10581	Register a child execution
10582	Called when execution is terminated .
10583	Sets the scope .
10584	Creates a new execution .
10585	Creates a nested execution .
10586	Find child executions
10587	Recursively calculate the variables of the execution .
10588	Get a variable .
10589	Get a variable from scope
10590	Set a variable
10591	Set a local variable
10592	Removes a variable from the scope .
10593	Removes a variable from the scope .
10594	Executes the given node .
10595	Wait for the signal to be signed
10596	Send a signal
10597	Take the transition
10598	Inject the current root
10599	Load a message
10600	Get message by id
10601	Get Zend Template
10602	Checks if the given value is readable .
10603	Checks if the given value is writable .
10604	Checks if the given value is writable .
10605	Checks if the given value is readable
10606	Validate email address
10607	Validate an IP address
10608	Validate an IPv4 address
10609	Validates that the given IPv4 address is not reserved .
10610	Validate an IPv6 address
10611	Initializes the view .
10612	Check if an attribute exists
10613	Checks if a method exists .
10614	Get method parameters
10615	Get a reflection method
10616	Convert array to array
10617	Get SMS response
10618	Returns a blank line .
10619	Get the total term cols
10620	Get error block
10621	Get a single line
10622	Slice an array
10623	Set validator rules
10624	Completes the flow .
10625	Get an object by its name
10626	Creates an object
10627	Registers a PSR - 7 compatible configuration .
10628	Authenticate a user
10629	Retrieves the feed of the authenticated user .
10630	Retrieves a list of liked objects
10631	Set the relationship for a user .
10632	Set properties .
10633	Finds all records
10634	Count all rows
10635	Find a record by ID .
10636	Creates a new record .
10637	Adds a select statement to the query .
10638	Execute the query and return the results
10639	Checks if the condition can be sent .
10640	Create a link
10641	select to parent
10642	Parse a picker map
10643	Converts an array of reflection class names to a self .
10644	Initializes the fieldset
10645	Get field by column
10646	Generate key search rule
10647	Set Record Array
10648	Save old record
10649	Get Record Array
10650	Converts an array of values to recursively recursively
10651	Set a single sql record
10652	Get the join record for a given join
10653	Gets the join rule for this table .
10654	Returns the method of the request
10655	Returns the request URI
10656	Get options by key
10657	Make the builder instance .
10658	Issue an access token
10659	Formats the report
10660	Decodes a JSON string .
10661	Validate timestamp .
10662	Lists all Comment models .
10663	Internal update method
10664	Execute the route
10665	Implode a string into a string .
10666	Render CSV file .
10667	Render a CSV file
10668	Returns the dataTable for the given object
10669	Loads the state data for the current object .
10670	Get a single property
10671	Returns the current active record
10672	Set current record id
10673	Fetches records from the database
10674	Fetches records from the database
10675	Fetches records from the search result .
10676	Returns the number of records in the database .
10677	Perform search .
10678	Get number records
10679	Fetch the current record from the database
10680	Add sckey script
10681	Get configuration value .
10682	Bootstrap the application .
10683	Checks if a user is logged in
10684	Sets the request .
10685	Set the maxage .
10686	Fix mime types
10687	Validate mime type
10688	Check if the mime type is text .
10689	Checks if the current request is valid
10690	Set file properties .
10691	Checks if the cache is valid
10692	Read file from filesystem
10693	Send the content
10694	Cleans the source .
10695	Minify the content
10696	Minify CSS content
10697	Wrap text in given content
10698	Get text content
10699	Serve text .
10700	Set allowed origin
10701	Send file to browser
10702	Registers a Texting provider .
10703	Denormalizes an array of data
10704	Returns true if the message supports the denormalization .
10705	Validate data .
10706	Validate the model .
10707	Get menu item attribute .
10708	Get URL attribute .
10709	Go to the next step
10710	Skip step .
10711	Go back to the current page
10712	Finalizes the form
10713	Cancels the session
10714	Renders the page state .
10715	Generate a random string
10716	Checks if the callback is empty .
10717	Permite obtener la retorna
10718	Returns true if the container contains the given value .
10719	Merge two variables .
10720	Builds the application .
10721	Dispatch event .
10722	Counts the number of records by group .
10723	Aggregate a group of documents .
10724	Find document by ID
10725	Get Mongo ids .
10726	Normalize a date
10727	Check if an object is in form refs
10728	Renders the web page .
10729	Get current page url
10730	Initializes all form objects
10731	Compares two integer values .
10732	Converts a value to an integer .
10733	Find source files
10734	Register a namespace
10735	Build the cache .
10736	Find composer autoloader
10737	Find the composer vendor directory .
10738	Get loader classes
10739	Get the value of a middleware or fallback if not found .
10740	Set a middleware or fallback to the middleware .
10741	Return a copy of this string with the given string limit .
10742	Return a copy of this string with an array limit
10743	Converts a value to a string .
10744	Formats the value as an array .
10745	Parse array pair
10746	Converts the value to an array .
10747	Get the value of an object .
10748	Rejects the end of an envelope .
10749	Boot the application services .
10750	Render a webpage
10751	Renders a Smarty plugin
10752	Renders PHP file
10753	Set HTTP headers
10754	Create comment .
10755	List all files in a directory
10756	Sorts modules .
10757	Get all routes
10758	Renders the menu items .
10759	Renders a single menu item .
10760	Writes CSV data
10761	Configure the command .
10762	Read configuration .
10763	Run checks .
10764	Run an export
10765	Writes the current cache
10766	Get the configured cache instance .
10767	Initializes the command .
10768	Reads a command .
10769	Flush the given command .
10770	Checks if the given value is chainable .
10771	Validates the form element
10772	Checks if the group is satisfied .
10773	Complete Flow Session
10774	Get sql value
10775	Get the value of the current value
10776	Save old value
10777	Returns the column s default value
10778	Gets the value on create
10779	Gets the value on the INSERT statement .
10780	Checks if the expression is required
10781	Check the value type
10782	Validate the data
10783	Finds a template file
10784	Prepares the file name .
10785	Register the given theme .
10786	Register a theme .
10787	Adds a new theme .
10788	Translate array to offset
10789	Returns the offset of an array
10790	Compute the stability of an array
10791	Set middleware .
10792	Get action name
10793	Get path parameters
10794	Returns true if the scheme matches the scheme .
10795	Checks if the given hostname matches the given ones .
10796	Matches the URI against the route .
10797	Fetches tree from root node .
10798	Fetches the path for the given node .
10799	Returns an array of child nodes
10800	Get the settings for the results .
10801	Get the link for this form .
10802	Returns the text of this form .
10803	Get new record
10804	Set secret .
10805	Get binary value .
10806	Formats a number
10807	Adds a table column to the query .
10808	Adds an SQL expression to the query .
10809	Reset the query .
10810	Adds an order by clause to the query .
10811	Adds a new SQL statement to the query .
10812	Add an association
10813	Returns the SQL statement
10814	Get DataRecord by key .
10815	Run console command
10816	Get default template locations
10817	Renders the text field .
10818	Get Google Font Google
10819	Checks if the current user matches the given group .
10820	Validates the input fields
10821	Validates uniqueness
10822	Checks if a record can be updated
10823	Checks if a record can be deleted
10824	Updates a DB record
10825	Creates a new DB record .
10826	Generate new id
10827	Insert a new record
10828	Deletes a record
10829	Gets the list of fields on audit .
10830	Runs trigger by type
10831	Gets the join fields for this table
10832	Returns the join object for the given join object
10833	Checks if an id generator is needed
10834	Run all checks .
10835	Initializes the IReport object
10836	Resolves the route for the given request .
10837	Resolve action parameters .
10838	Checks if a setting exists .
10839	Get a setting by name .
10840	Returns all settings .
10841	Loads the settings from the cache .
10842	Set the cache location .
10843	Prefix CSS content .
10844	Prefix align items .
10845	Prefix the align content .
10846	Prefixes the given value to the right one .
10847	Prefix a value to the flex rules
10848	Prefix a value if it s just one .
10849	Get the rules for a given property
10850	Add a comment to a media .
10851	Make a DELETE request
10852	Get the filtered media .
10853	Get the preferred image .
10854	Get a placeholder
10855	Creates a rule from a string .
10856	Returns the value as a string
10857	Gets the eloquent reflection method for a model .
10858	List sitemap .
10859	Render sitemap .
10860	Get XML tree
10861	Checks if the access token is valid .
10862	Determine the access token in the header .
10863	Call the middleware .
10864	Checks if context changed .
10865	Stores a command .
10866	Executes the given callback .
10867	Returns the value of a given phar
10868	Create Phar .
10869	Get a pattern by name
10870	Merge group config
10871	Removes a record from the given dataobject
10872	Removes record from DB
10873	Removes Record from DataObject
10874	Convert to array
10875	Read metadata from an XML array
10876	Read meta - collection
10877	Prefix the package name .
10878	Allow access to the user
10879	Builds the driver instance .
10880	Get the model for the given table name .
10881	Add a resolver type
10882	Returns the resolver for the given type .
10883	Sets the resolver for the given type .
10884	Resolve a resolver
10885	Set the authorative
10886	Registers a module
10887	Sorts modules .
10888	Set the precedence for a module .
10889	Automatic module from composer . json
10890	Finds all modules in a path .
10891	Get a row checkbox by its name .
10892	Register the services .
10893	Convert a string to a formatted value
10894	Converts a value to a formatted string .
10895	Formats the value as a number .
10896	Converts the number to a localized value .
10897	Convert a value to a date format
10898	Convert a date value to a string
10899	Convert a value to a datetime format .
10900	Converts a datetime format to a value .
10901	Convert value to currency format
10902	Converts the currency value to a formatted string .
10903	Convert a value to a phone number .
10904	Convert datetime format to datetime format
10905	Parse a date string
10906	Render DSN for MySQL
10907	Renders the DSN for pgsql .
10908	Renders DSN parts .
10909	Inserts data into table .
10910	Insert multiple rows in a table
10911	Get request path
10912	Returns the concrete for the given id .
10913	Formats a query string .
10914	Format a query string value .
10915	Set bind values
10916	Get user profile
10917	Format the given report
10918	Validates a strong password
10919	Validates an email
10920	Validates a date .
10921	Get error message
10922	Make a new resource .
10923	Agrega un arreglo
10924	Gets a new ID for the given id
10925	Returns new system id
10926	Generate a new GUID
10927	Returns the id of the given sql string
10928	Get visible attribute
10929	Set the formatter
10930	Prepares an XML file
10931	Close a file
10932	Get the path to the log file
10933	Get formatter by extension
10934	Get the document manager
10935	Renders a view .
10936	Output the pdf
10937	Set the base URL for REST requests
10938	Perform a cURL request .
10939	Retrieves multiple resources
10940	Make a POST request .
10941	Send a POST request to REST API endpoint
10942	Push a job onto the queue .
10943	Creates the payload for the job .
10944	Returns the content element identifier .
10945	Returns the content element signature
10946	Returns the content element signature .
10947	Get title .
10948	Removes a record from the database
10949	Renders a sort record .
10950	Filter view children by column
10951	Filters the view children by system language .
10952	Set field value by DB field name .
10953	Returns an array of data for the given entity
10954	Fill entity by data
10955	Extract a zip
10956	Add file to zip
10957	Extracts a GZ .
10958	Reads a line from a file .
10959	Get file size
10960	Returns an array of class names
10961	Adds a new route
10962	Resolves the route for the given request .
10963	Resolve config key
10964	Check if a key exists
10965	Get a value from the cache .
10966	Load configuration file .
10967	Get background details
10968	Open the connection .
10969	Check response status code
10970	Handles the message received .
10971	Check if the given status is a message .
10972	Read next chunk size
10973	Reads data from the stream .
10974	Returns the value of a property .
10975	Get the default value
10976	Getter for hidden fields
10977	Returns the text of this form .
10978	Get the key function map
10979	Get the context menu
10980	Returns a function string .
10981	Get the redirect page
10982	Returns the type of the given event handler
10983	Set form name
10984	Adjust form name
10985	Returns the formed function .
10986	Parse a function string
10987	Call a method .
10988	Clears the middleware .
10989	Stop the HaltPropagationException .
10990	Reset the middleware .
10991	Creates an instance of the specified type .
10992	Convert counter to string
10993	Set GET parameters
10994	Make a post request
10995	Get the response .
10996	Check if we should follow the redirects
10997	Check effective time
10998	Parse a string
10999	Parse string .
11000	Renders form object
11001	Render a Smarty template
11002	Renders PHP file
11003	View an entity .
11004	Store a new entity .
11005	Call entity method .
11006	Middleware .
11007	Get the default commands
11008	Updates a user .
11009	Get plugin settings
11010	Get group data
11011	Get the direct membership .
11012	Get effective membership
11013	Parse membership data
11014	Parse the history
11015	Parse an affiliate .
11016	Parse a search string
11017	Get webpage object
11018	Get an element
11019	Get error elements
11020	Reverse sub forms
11021	Set the bundle class name .
11022	Get the translation key .
11023	Return a list of all words
11024	Load configuration options
11025	Removes an object from the cache .
11026	Returns the IDs of the cache .
11027	Cleans all cache
11028	Make directory .
11029	Reads the contents of a location .
11030	Get config reader by extension
11031	Add a route branch .
11032	Adds a route to the collection .
11033	Find a branch by its path
11034	Adds the next branch to the collection .
11035	Finds by issue .
11036	Get WP contents
11037	Get WordPress categories
11038	Get WordPress menus .
11039	Get the WordPress page contents .
11040	Get recent posts
11041	Get WP post types
11042	Get WordPress tags
11043	Get WordPress taxonomies
11044	Get WordPress s terms
11045	Add a search path to the search path .
11046	Set module priority
11047	Get a precedance
11048	Clears the cache .
11049	Get cached data
11050	Resolves the given file to a path .
11051	Parses request URI
11052	Saves the object state variables
11053	Get current step
11054	Get the input fields for the given form .
11055	Cancels the session
11056	Registers a sub - type enum .
11057	Get input .
11058	Delete a file .
11059	Convert seconds to seconds .
11060	Extracts key words from text .
11061	Find emails in text .
11062	Determines if a string contains an array .
11063	Redirects the user to the given endpoint .
11064	Run the migrations .
11065	Migrates a directory up .
11066	Sets the unique identifier .
11067	Runs the daemon
11068	Check if parameter exists
11069	Returns the oauth request
11070	Generate oauth signature
11071	Creates a child node .
11072	Transition an item .
11073	Add a setting
11074	Add a set of settings
11075	Returns an array of settings
11076	Get the cachable settings .
11077	Returns the settings as an array
11078	Returns the cachable settings as an array
11079	Get filtered settings .
11080	Filters an array of settings
11081	Renders the content of this node .
11082	Renders single node items
11083	Renders single node item
11084	Run the autoloader .
11085	Register the bundle .
11086	Install the packages .
11087	Initializes the framework .
11088	Autoload class
11089	Loads a file .
11090	Forward forward to another route
11091	Add a glyph icon .
11092	Set query parameters
11093	Sets the LIMIT clause
11094	Get database connection
11095	Get a single property
11096	Gets the object referenced by this object .
11097	Set the association
11098	Parse a docblock .
11099	Creates a new instance from SQLite memory .
11100	Create a new instance from a file .
11101	Get field by name
11102	Check if a field exists
11103	Get field names
11104	Get initial data model
11105	Authorize index action
11106	Authorize create action
11107	Get nested item .
11108	Initialize the device
11109	Get the export implementation
11110	Get the report implementation
11111	Get runner implementation
11112	Get cache implementation
11113	Build the update query
11114	Builds the SQL for deleting an object
11115	Returns the element s style
11116	Get child nodes
11117	Get attribute value
11118	Answers an array of attributes for the node .
11119	Returns a child node .
11120	Get the literal value .
11121	Check if the cache is enabled .
11122	Handle the request .
11123	Is method valid .
11124	Returns true if the caller is a getter .
11125	Returns true if the caller is setter .
11126	Prepare a Guzzle client
11127	Get the response body .
11128	Get the json decoded response
11129	Save an object variable
11130	Load an object variable
11131	Saves the object objects
11132	Clears the previous view objects
11133	Save json array
11134	Set the view history
11135	Increments the counter
11136	Write to the console
11137	calculates current time
11138	Reset timer .
11139	Validate the executable
11140	Get the redirect page .
11141	Handles data exceptions .
11142	Process the GET request
11143	Get base URI
11144	Validate the identity
11145	Sets up the authentication result
11146	Set the visible attribute .
11147	Get the first Hump array
11148	Get the FromList
11149	Format the result of a report
11150	Call middleware .
11151	Call the getters .
11152	Call proxy methods .
11153	Call proxy setters
11154	Set the catch middleware .
11155	Clear middleware .
11156	Disable middleware .
11157	Enable middleware .
11158	Get the middleware .
11159	Get the middleware group for the given id .
11160	Set middleware group .
11161	Check if a middleware group exists .
11162	Check if a middleware is disabled .
11163	Check if the middleware is enabled .
11164	Get the middleware .
11165	Create a new middleware collection .
11166	Prepend a middleware to the queue .
11167	Push middleware .
11168	Set middleware context
11169	Call the middleware .
11170	Save settings to cache .
11171	Get list of form fields
11172	Setup the json file .
11173	Returns the transition from the execution node .
11174	Create remote javascript call
11175	Create a submit call
11176	Renders a link tag .
11177	Render a submit button .
11178	Cast a key .
11179	Check if the given middleware is an abstract .
11180	Determine if the given middleware is a collection .
11181	Resolve a middleware .
11182	Resolve a middleware .
11183	Resolve a middleware collection .
11184	Resolve a middleware .
11185	Resolve a middleware .
11186	Resolves a middleware .
11187	Render an object
11188	Returns unique string
11189	Determine if the current user is a role .
11190	Determine if the user has the given role .
11191	Generate a md5 hash
11192	Get info from curl
11193	Perform the request .
11194	Allow access to a view
11195	Returns the view that matches the given view name .
11196	Format the given report .
11197	Load an XML document .
11198	Validates the schema .
11199	Validate the source .
11200	Returns an array of Xinclude directives .
11201	Returns the value of an element
11202	Returns the element with the given name .
11203	Set default namespace
11204	Register an Environaut namespace .
11205	Returns whether the given document is an environaut configuration document .
11206	Refresh the XPath instance .
11207	Parse error message .
11208	Returns an array of resolvers .
11209	Check authorization parameters
11210	Creates a new authorization request .
11211	Complete Flow object
11212	Prints the output
11213	Get form inputs
11214	Redraw form content
11215	Send client alert text
11216	Display error message
11217	Close the open window
11218	Run client script
11219	Redirects to a view
11220	Append extra scripts
11221	Answers an array of extra scripts for the current view .
11222	Append scripts to a script
11223	Answers an array of CSS styles for the current page .
11224	Include base scripts
11225	Include rte scripts
11226	Include CKEditor scripts
11227	Include PropWindow scripts
11228	Include validator scripts
11229	Executes all triggers .
11230	Composes action message .
11231	Convert string to array
11232	Process form object errors
11233	Set sub forms
11234	Load a picker form .
11235	Set request parameters
11236	Fetches data set from the database
11237	Returns the ID of the record .
11238	Method to auto - suggest a term
11239	Renders the context menu .
11240	Renders the HTML .
11241	Get the event log message
11242	Get on event log
11243	Run the event log
11244	Get the invoking element
11245	Set client scripts
11246	Removes a middleware from the stack .
11247	Run the middleware stack .
11248	Creates a DateTime from a string .
11249	Generate a secret key
11250	Decodes a base32 string .
11251	List all files in the directory
11252	Returns an array of all elements
11253	Returns a list of directories in the iterator .
11254	Returns a list of files .
11255	Make file .
11256	Make directory .
11257	Move file to new directory
11258	Rename file .
11259	Remove directory recursively
11260	Sets the name of the field .
11261	Sets the type .
11262	Set the input format .
11263	Sets the value of the field .
11264	Get storage value
11265	Saves the child nodes
11266	Add child to entity
11267	Get models .
11268	Output a list of models .
11269	Convert a resource to an array .
11270	Generate reCaptcha form
11271	Verify recaptcha code
11272	Get a service instance
11273	Renders the exception .
11274	Renders an HTTP exception .
11275	Renders a Cake exception .
11276	Renders the serializer exception .
11277	Renders a validation serializer exception .
11278	Renders the given HTTP exception as JSON .
11279	Renders the given HTTP exception as JSON .
11280	Renders a Cake exception as JSON .
11281	Renders a Cake exception as JSON .
11282	Default error render .
11283	Renders the error as JSON .
11284	Renders the exception as a JSON API response .
11285	Default validation serializer .
11286	Renders the validation serializer as JSON .
11287	Renders the ValidationSerializer as a JSON serializer exception .
11288	Open a session by ID .
11289	Creates a new session
11290	Prepare text .
11291	Display text .
11292	Display empty lines
11293	Initializes the application
11294	Sets the response headers .
11295	Initialize debug bar
11296	Start a new session
11297	Checks if the current user s IP address is allowed .
11298	Regenerate the session .
11299	Validate the session
11300	Links layers .
11301	Get the value from the backend
11302	Register a new Json
11303	Print CLI header
11304	Parse raw body
11305	Removes extra indentation
11306	Handles the next request .
11307	Parse a URL string into an array
11308	Bind the template to the view .
11309	Returns the match for the given uri .
11310	Returns the value for the given value
11311	List local files
11312	Extracts documents from HTML
11313	Exclude a link .
11314	Save the documentation .
11315	Check if a file exists .
11316	Get next ordered number
11317	Ends the nesting sequence .
11318	Display text .
11319	Display n lines .
11320	Fit a linear regression
11321	Perform the prediction .
11322	Initialize table .
11323	Writes a record to the database .
11324	Draws a list item .
11325	Start output buffering
11326	Initializes the cache driver .
11327	Returns the value of the specified header .
11328	Builds the form for the given section .
11329	Get form factory
11330	Load fixtures from iterator .
11331	Resolves a relative URL .
11332	Installs the plugin .
11333	Install plugin .
11334	Install the package .
11335	Update the package .
11336	Update composer .
11337	Uninstalls a plugin .
11338	Uninstall plugin .
11339	Recursively removes directories
11340	Recursively removes a directory
11341	Set the text color
11342	Get text area
11343	Calculates the width of the block .
11344	Get data by date
11345	Get date value
11346	Casts an attribute on the model .
11347	Convert attributes to array
11348	Set a value in the collection .
11349	Get a menu .
11350	Renders the tracker response .
11351	Returns the service definitions .
11352	Parses an array of Imports .
11353	Parse the service definition .
11354	Load the configuration file .
11355	Resolve services .
11356	Initializes the autoloader
11357	Get the API
11358	Humanize a number of bytes .
11359	Set the bullet .
11360	Sets the column definition .
11361	Calculates the total width of the column .
11362	Checks if this table has header text .
11363	Get header text
11364	Check if data is valid
11365	Calculates the width of each column
11366	Draws a row of data .
11367	Creates a new session .
11368	Create new session file
11369	Save session data to file .
11370	Acquire a lock
11371	Create a form for a section
11372	Factory method to create a new instance of a class .
11373	Returns an array of facts
11374	Parse facts .
11375	Finds a row by its primary key
11376	Find a row by its value
11377	Find all records
11378	Find all records
11379	Creates a new table .
11380	Updates a where statement .
11381	Parse notation .
11382	Applies conditions to an expression .
11383	Calculate the formula of this DataSet .
11384	Create plugin client
11385	Set the file .
11386	Add a template .
11387	Checks if cache file is ttl
11388	Replace placeholders in blocks .
11389	Get metadata .
11390	Builds the definition provider .
11391	Returns the formula with the given formulaName .
11392	Save a formula .
11393	Add nav header .
11394	Set dropdown menu
11395	Returns true if the user has access to the given attributes .
11396	Download a binary file .
11397	Get url for an image
11398	Set list cover
11399	Get data by type .
11400	Get data from url
11401	Install a resource
11402	Checks if date is valid .
11403	Wrap the UI frame
11404	Runs the commandline .
11405	Factory method .
11406	Create a Redis session
11407	Send an entity .
11408	Registers all providers
11409	Registers service provider from file
11410	Get facts .
11411	Populate the facts .
11412	Record a domain event .
11413	Apply domain event .
11414	Call plugin functions
11415	Draws the bar
11416	Calculate the formula .
11417	Check if the current request has layout
11418	Initialize the state .
11419	Override members to a style
11420	Clears the styling
11421	Sets the text color .
11422	Set fill color
11423	Set the fill color
11424	Reverse text color .
11425	Creates a new instance of the specified function .
11426	Loads all installed plugins .
11427	Determine if plugin is enabled .
11428	Check if the cache is enabled .
11429	Update plugin s cache
11430	Register plugin hooks .
11431	Get channel by name
11432	Initialize loggers .
11433	Create logger .
11434	Returns all Location objects .
11435	Creates a new instance of the class .
11436	Get interfaces .
11437	Get parent class
11438	Get the list of methods
11439	Get properties .
11440	Protected is type
11441	Add a style to a resource
11442	Get aggregate style .
11443	Rewrites the path
11444	Wrap media rules .
11445	Move imports to start
11446	Get a file from the archive .
11447	Remove file from archive
11448	Get the path to the archive path .
11449	Get the path to the archive file .
11450	Cleans up merged values
11451	Filter an array of values
11452	Returns the terminal screen size
11453	Renders a css style .
11454	Loads a script .
11455	Sends a message to the given email address .
11456	Create a static control .
11457	Generate static control .
11458	Adds a CSS style .
11459	Make directory .
11460	Set the files to publish .
11461	Initializes the user cookie .
11462	Logs in the given identity .
11463	Regenerate CSRF token .
11464	Logins user by cookie .
11465	Get the return url
11466	Check if login is required
11467	Renew the identity cookie
11468	Renew auth status .
11469	Determine if the current user can access the given permission .
11470	Returns an array of days of week
11471	Save uploaded file
11472	Executes the current query
11473	Adds a DELETE clause to the query .
11474	Adds an insert statement to the query
11475	Add an inner join to the query .
11476	Add a where expression to the query .
11477	Add a having clause to the query .
11478	Returns the SQL for delete
11479	Creates a positional parameter .
11480	Binds the logger to the application .
11481	Bind the Monolog logger to the container .
11482	Set HTTP status code
11483	Get the response body
11484	Redirects to the specified URL .
11485	Create empty response
11486	Prepare the headers array
11487	Get the cookies ready to be sent .
11488	Returns default formatters
11489	Extracts auth user pass from string
11490	Gets all scenario names .
11491	Fill the scenario attributes .
11492	Returns the form name .
11493	Get the list of public properties .
11494	Validates the model .
11495	Validates multiple models .
11496	Respond with response .
11497	Add an attachment
11498	Add a plugin
11499	Send the request and return the response .
11500	Loads a class
11501	Returns the list of registered listeners .
11502	Set the listener properties
11503	Creates an event listener from an annotation .
11504	Returns an array of options
11505	Set multiple options
11506	Get a key value by key type .
11507	Fill a mass assignment from an array .
11508	Load Doctrine entities from a directory .
11509	Extend entity manager .
11510	Checks for predictions .
11511	Process extends .
11512	Verify class method
11513	Verify class property
11514	Verify function call
11515	Verify Closure .
11516	Verify a dispatch
11517	Get the dependencies for the dispatch .
11518	Get method arguments
11519	Dispatch class method .
11520	Dispatch class property .
11521	Get the class of the dispatched dispatch .
11522	Dispatch function .
11523	Dispatch closure .
11524	Dispatch action .
11525	Get arguments as string
11526	Get request arguments
11527	Parse request arguments
11528	Link to an asset .
11529	Set protocol version .
11530	Assert header values
11531	Inject a header value
11532	Returns the current date
11533	Checks if the cookie fields are set in the cookie
11534	Stores a cookie .
11535	Adds the cookies from the response .
11536	Returns cookies matching the given URL .
11537	Returns all cookies .
11538	Serialize the session .
11539	Unserialize the session
11540	Checks if the given request domain matches the given cookie domain .
11541	Create a new instance of a command
11542	Get command arguments
11543	Get help for a given command
11544	Returns a singleton instance of a singleton class .
11545	Convert an expression to a NumberSystem
11546	Parse an expression part
11547	Process configuration key
11548	Trims whitespace from unicode characters
11549	Sets the encoding for this feature .
11550	Creates an iterator exception .
11551	Initializes the response object
11552	Initializes the URL language prefixes .
11553	Get the message formatter .
11554	Start a new transaction
11555	Get the API request URL .
11556	Get API request parameters
11557	Get the results from the last successful response
11558	Get the success message .
11559	Find all budget by account id
11560	Get current language
11561	Parse accept language
11562	Bind a value to a binding .
11563	Makes a class instance .
11564	Validate the url
11565	Checks if the given field name is liveVars
11566	Retrieves an object
11567	Wraps an object into a ViewableWrapper
11568	returns the date as a date
11569	Makes a session identifier .
11570	Encrypt session data
11571	Decrypt session data
11572	Get encryption key .
11573	Set encryption algorithm
11574	Set the hash algorithm
11575	Prepares update sets for a table .
11576	Initializes the service
11577	Returns a parameter value
11578	Check if target relation exists .
11579	Check if target attribute exists .
11580	Determines if value exists in target attribute .
11581	Get the clause for a table .
11582	Renders a modal .
11583	Localize a file
11584	Detach the current stream
11585	Reads a string from the stream .
11586	Factory method to create a new Request instance .
11587	Create a PSR - 7 request
11588	Set request server
11589	Set request headers
11590	Get request path
11591	Get the URI path only .
11592	Get the HTTP host .
11593	Set request method
11594	Get HTTP method
11595	Get the mime type of a given format .
11596	Returns the format for the given mime type .
11597	Returns request format
11598	Renders a template .
11599	Initializes the HTTP client .
11600	Add middleware .
11601	Create a new request application
11602	Set an alias for a path
11603	Set aliases .
11604	Get error log level
11605	Generate a proxy
11606	Get method call parameters
11607	Generate proxy class
11608	Gets the list of protected properties .
11609	Gets proxy methods
11610	Generate proxy class name
11611	Get method declaration .
11612	Can proxy method?
11613	Can proxy methods?
11614	Recursively traverse tree structure .
11615	Get method parameters
11616	Create a github repository .
11617	Loads the messages for the given category .
11618	Sets up the application .
11619	Bootstrap configuration .
11620	Bootstrap core services
11621	Bootstrap the application container .
11622	Get environment variable
11623	Set environment .
11624	Get or set configuration
11625	Throw an HttpException
11626	Redirects to given url .
11627	Create a new response
11628	Create a redirect response
11629	Get a view instance .
11630	Get an item from the collection .
11631	Validates the descriptor key .
11632	Validates the definition .
11633	Returns the cache setting settings
11634	Set cache invalidation settings
11635	Initialize the logger
11636	Get file path
11637	Verify user password .
11638	Set whether or not a value is defined in ZendConfig
11639	Renders the progress bar .
11640	Renders the progress bar
11641	Process the soap request
11642	Returns the SOAP server instance .
11643	On flush event handler .
11644	Post flush event handler .
11645	Invalidate an entity .
11646	Adds a tag to invalidate .
11647	Retrieves the choice of the choice
11648	Set the callback
11649	Filters the given value .
11650	Returns the number of bytes in the current memory .
11651	Returns all seo models
11652	Set seo attributes
11653	Returns seo attribute
11654	Convert the value to a string
11655	Get the order by abscissa .
11656	Get abscissa by order
11657	Set attachment body
11658	Encode the message body .
11659	Encode a message to a file .
11660	Encode a message part into a file .
11661	Adds a subpart to the MailPart .
11662	Wrapper for printable encode
11663	Builds a header parameter
11664	Builds a signed 16 - bit parameter
11665	Explodes a string into a quoted string .
11666	Encode a header value
11667	Encode a string to a base64 string
11668	Show admin messages .
11669	Get the next line from the stream .
11670	Renders the menu items .
11671	This method is called before the action is executed .
11672	Set an option
11673	Slug a string .
11674	Generate a sentence .
11675	Extract a gallery array from an array of data
11676	Returns true if the session is valid .
11677	Get field error message .
11678	Set the sameSite parameter .
11679	Cleans the header and adds it if needed
11680	Finds PSR - 4 classes for a namespace .
11681	Get namespace path
11682	Get namespace paths
11683	Get namespace prefixes
11684	Get loader prefixes
11685	Update the current session .
11686	Merge session data
11687	Get session data
11688	Returns the current page number .
11689	Build query string
11690	Get filters as array
11691	Create the form instance .
11692	Stores the query result .
11693	Get pagination .
11694	Get previous record id
11695	Convert to array
11696	Add a field to the form .
11697	Process options .
11698	Get connection parameters
11699	Check if database is installed
11700	Returns the sql string for this object .
11701	Executes the current query
11702	Returns repository for given entity
11703	Creates a new entity .
11704	Save an entity
11705	Remove an entity
11706	Commit all models .
11707	Get a store instance .
11708	Get store config
11709	Creates a store instance from a configuration array .
11710	Validates the password .
11711	Create a Medias from the Accept - Language header .
11712	Parse a string into an array
11713	Compare two strings
11714	Returns the earth radius of the given latitude .
11715	Converts decimal coordinate to DMS
11716	Convert a decimal number of degrees to decimal .
11717	Renders the production rendering .
11718	Returns debug message
11719	Logs the exception
11720	Configure the command .
11721	Copy configuration file
11722	Save messages to php file .
11723	Save messages to POT file .
11724	Creates a Time from an array .
11725	Creates a DateTime instance from a string .
11726	Creates a Time from a DateTime
11727	Creates a Time object from an array of seconds .
11728	Invalidate the tags .
11729	Flush tags .
11730	Encode tags .
11731	Register the package .
11732	Get all cookies .
11733	Set a cookie .
11734	Remove a cookie
11735	Confirm user input
11736	Get the plural labels .
11737	Wrap the session in the session
11738	Returns table primary key .
11739	Gets table foreign keys .
11740	Returns table indexes .
11741	Retrieves table uniques
11742	Returns table checks metadata .
11743	Returns table default values .
11744	Get parameter value
11745	Check access permissions
11746	Set the distinct values of the query .
11747	Set columns .
11748	Join a table
11749	Set inner join
11750	Left join join
11751	Left outer join join
11752	Right join join
11753	Adds an outer join to the query .
11754	Full outer join
11755	Set group by .
11756	Set having condition .
11757	Set OR having condition .
11758	Sets the order by clause .
11759	Sets the limit for this query
11760	Set offset .
11761	Build FROM clause
11762	Renders a link .
11763	Renders a button .
11764	Renders the locale switcher .
11765	Returns a string representation of the comparison
11766	Gets the order by an arc
11767	Get abscissa by order
11768	Find a record or throw an exception
11769	Finds a record by predicate or throw an exception .
11770	Checks if a record exists .
11771	Checks if a predicate exists .
11772	Delete rows by predicate
11773	Delete a record or throw an exception
11774	Performs an UPDATE query .
11775	Inserts data into table .
11776	Returns the table relation .
11777	Get primary keys
11778	Returns the unique key for this table .
11779	Retrieve column information
11780	Executes a prepared statement .
11781	Returns the primary key for the given identifier .
11782	Check columns in table
11783	Parse the content into an array .
11784	Parse the given content into an object .
11785	Set the return type
11786	Enqueues all hooks .
11787	Enqueue all styles .
11788	Set type .
11789	set calendar component property name
11790	Set start position
11791	Set the damage .
11792	Set the hit level .
11793	Set the meter gain value .
11794	Set the input arguments .
11795	Add a cancel ability .
11796	Set start frame .
11797	Set the active frame .
11798	Restore the given frame in the recovery frame .
11799	Set the hit advantage
11800	Set guard advantage on guard
11801	Builds a move object .
11802	Send a slack message .
11803	Parse route data
11804	Parse route parameters .
11805	Validate route parameters
11806	Find a param segment
11807	Call repository .
11808	Validate class name
11809	Check if an image is an image
11810	Counts the number of files in the directory .
11811	Returns the path to the console route
11812	Gets the raw route for the console command .
11813	Returns a new instance with the specified scheme .
11814	Returns a new instance with the specified user information .
11815	Returns a new instance with the specified host .
11816	Returns a new instance with the specified port .
11817	Query an array by key
11818	Query an array by bracket
11819	Set Query Variables
11820	Set a query variable
11821	Get the URL for this route
11822	Normalize the connection
11823	Resolves a reference to an absolute URL .
11824	Is fragment only?
11825	Get canonical URL
11826	Returns the request URL
11827	Get an option by its name
11828	Build query string
11829	Parse a URL
11830	Display a text .
11831	Translate the current language .
11832	Suggests the language for the request .
11833	Get new state list
11834	Filter the list of new states .
11835	Switch to new states
11836	Find items by budgetId
11837	User login action .
11838	Logout action .
11839	Connects to the specified client .
11840	Get parameter value
11841	Set HTML body
11842	Add HTML image
11843	add an attachment
11844	Convert string to string
11845	Add a text part to the message .
11846	Add a message part to the mail body
11847	Add an HTML image part
11848	Add an attachment part
11849	Encode headers .
11850	Checks the parameters .
11851	Checks if the given value is valid
11852	Initializes the class
11853	Loads the permission structure .
11854	Save all changes .
11855	Save data to file .
11856	Create a new JsonResponse
11857	Set the callback
11858	Set the JSON encoding options
11859	Get the layout .
11860	Returns the categories as a string .
11861	Update the session .
11862	Delete session entity .
11863	Configures command options
11864	Load configuration options .
11865	Get MySQL memory limit
11866	On model created event
11867	Renders the view
11868	Add a plugin
11869	Get config value
11870	Returns the URL for the given name .
11871	Add GET route
11872	Return html response .
11873	Create a new redirect response
11874	Set path segments .
11875	Returns a proxy instance .
11876	Returns instance of given class
11877	Get all records
11878	Query for multiple entities
11879	Paginate the results .
11880	Finds an object by its primary key value .
11881	Persists an entity .
11882	Delete an entity
11883	Returns the number of entities in the collection .
11884	Creates a select query .
11885	Applies scopes to query builder .
11886	Applies orderBy to query builder
11887	Make no result exception .
11888	Replace query parameters .
11889	Adds a method .
11890	Get an RPC method
11891	Shutdown loop .
11892	Add multiple headers
11893	Set a link to a page
11894	Creates a new GuzzleRequest instance .
11895	Create a new photo instance .
11896	Multiply a range .
11897	Starts the session .
11898	Regenerate session id
11899	Close the session .
11900	Unset a session
11901	Destroy session .
11902	Decodes session data
11903	Get session cache expiration time
11904	Returns an instance of the class .
11905	Get module options
11906	Returns the size of this resource .
11907	Set the walk flag
11908	Set the array flag
11909	Set the data
11910	Returns the integer value of the given index
11911	Set the value at the given index
11912	Rewind the walk flag
11913	Get the previous position
11914	Sets the previous X .
11915	Sets the previous Y .
11916	Set the pointer to the previous Y
11917	Return the next X Y
11918	Sets the next X .
11919	Sets the next Y .
11920	Move the pointer to the next Y
11921	Seek to the given index
11922	Returns the current item .
11923	Return the key of the walk flag .
11924	Checks if the sign is valid
11925	Check if the key is valid
11926	Determine if the Y is valid .
11927	Counts the number of walks in the walk flag .
11928	Seek to offset
11929	Seek to an offset
11930	Check if an offset exists
11931	Get an offset
11932	Set an offset .
11933	Verify that the value is a boolean value .
11934	Allow View Methods
11935	Allow controller methods
11936	Sets the table name .
11937	Set from table
11938	Set AND condition .
11939	Set or update conditions
11940	Set static rule .
11941	Set static rule reference
11942	Get a rule object
11943	End body .
11944	Register a js file
11945	Registers a JavaScript variable .
11946	Get default config files
11947	Return a singleton config instance
11948	Setup channel configurations .
11949	Merge a config file
11950	Writes a configuration file .
11951	Read configuration data from file
11952	Returns default channel configuration
11953	Get channel value
11954	Set channel configurations
11955	Returns the type of a configuration key .
11956	Get the documentation for a key .
11957	Returns the value of a prompt .
11958	Get group by key
11959	Returns an array of groups
11960	Returns the keys of a group
11961	Returns the set values for the given key .
11962	Returns the keys of the channel configuration .
11963	Remove a channel
11964	Remove a layer
11965	Get layer by key .
11966	Determines if a configuration key is defined .
11967	Set the user registry
11968	Process extends .
11969	Replace the constants .
11970	Get the callback for the log .
11971	Checks if the given value is valid .
11972	Returns an array of valid values
11973	Validate the enum values
11974	Set value .
11975	Initializes the class
11976	Starts the session .
11977	Add success message
11978	Add idle .
11979	Returns the total amount of all virtual currencies .
11980	Get request methods
11981	Disable auto update .
11982	Block wp request
11983	Hide admin nag
11984	Returns true if point is valid
11985	Checks if two points are paragram
11986	Get a value from the container .
11987	Checks if the container contains a key .
11988	Find application by id
11989	Returns all applications .
11990	Checks if two numbers are equal .
11991	Returns the digits of the given number .
11992	Builds a number from the given array of strings .
11993	Validates the given number value .
11994	Make a call .
11995	Generate key .
11996	Connect to the Redis server .
11997	Get command string
11998	Returns the document for the given domain event .
11999	Returns a domain event message .
12000	Reset the entity .
12001	Normalize messages .
12002	Post validate method .
12003	Attach form data event
12004	Get all form fields
12005	Remove string from array
12006	Returns an array of entities
12007	Swaps two entities
12008	Configure form to exclude data from array .
12009	Set sub form data
12010	After attach callback .
12011	Add a response to the stack
12012	Create a response from a string
12013	Creates a response from a file
12014	Updates the head version of the entity .
12015	Checks if entity needs new version
12016	Persists an entity .
12017	Clear all versions
12018	Cleans up the directory .
12019	Check if key exists
12020	Moves a key .
12021	Reconnects to another FTP FS .
12022	Determine if the given key is relative .
12023	Creates a path .
12024	Find an entity by its id
12025	Creates an entity .
12026	Save an entity
12027	Deletes an entity .
12028	Validate the entity .
12029	Selects rows .
12030	Select Query Builder
12031	Set criteria in query .
12032	Set an array criterion in a query .
12033	Sets the order by clause .
12034	Creates a delete query .
12035	Set properties for a create delete query .
12036	Set properties for a DELETE statement .
12037	Get entity relations
12038	Ensure that all required properties are set .
12039	Broadcast the given body
12040	Executes the specified operation .
12041	Get script src
12042	Generate the HTML for the site .
12043	Display an image .
12044	Display an audio attribute .
12045	Verify the response
12046	Verify a remote request
12047	Returns the script to be loaded
12048	Returns a script tag with the given callback name .
12049	Check key .
12050	Checks if the given value is a string .
12051	Send verify request
12052	Initializes the theme .
12053	Find view file
12054	Renders PHP stateless output .
12055	Register post types
12056	Generate a token .
12057	Generate a new memory token .
12058	Runs the project
12059	Filter message by key
12060	Log an NOTICE level
12061	Log an info message .
12062	Log debug message
12063	Log a raw message .
12064	Output a profile end
12065	Logs a message .
12066	Converts a message to a string .
12067	Converts an exception to a string .
12068	Colorize text
12069	Gets the data from the trace .
12070	Process place holders .
12071	Format the value .
12072	Finds a seo object based on the specified conditions .
12073	Get the table name for an ActiveRecord .
12074	Delete all records
12075	Saves the Seo model
12076	Initialize database connection
12077	Common PEAR command
12078	Returns an array of commands
12079	Returns an array of available commands
12080	Get the help for a given command .
12081	Get command arguments
12082	Post - package event handler .
12083	Compile the DSN
12084	Escape a value
12085	Add template root .
12086	Get count for a collection
12087	Get the count for a collection
12088	Create count query
12089	Returns the entity manager .
12090	Get current route
12091	Load a library
12092	Clear an instance
12093	Get bundle by name
12094	Set a bundle instance
12095	Clear bundle .
12096	Invalidate an entity
12097	Assert the dependency database .
12098	Returns the dependencies of a package .
12099	Get the package dependencies
12100	Install package dependencies
12101	Uninstalls a package .
12102	Rebuild the database
12103	Attempts to lock the dependency
12104	Unlock the lock
12105	Read the dependencies file
12106	Writes the dependencies file
12107	Auto load modules
12108	Register a module .
12109	Get the content for the given location .
12110	Shows the error page .
12111	Set the foreground .
12112	Set background color .
12113	Set the color of the color .
12114	Set red color .
12115	Set green color
12116	Set the color of the color .
12117	Set blue color
12118	Set magenta color
12119	Set the cyan color .
12120	Set the white background color .
12121	Reset the background color .
12122	Sets the color .
12123	Removes an option .
12124	Format a message .
12125	Logs a command .
12126	Returns an array of uploaded files
12127	Set the state
12128	Get the list of tasks from the install directory
12129	Initializes post - install scripts
12130	Populate the pinfo from an array .
12131	Returns an array of file names
12132	Returns an array of configuration options
12133	Returns true if the package is compatible
12134	is subpackage
12135	Get a dependency group by name
12136	Splice a key - value pair .
12137	Add compiler pass .
12138	Modulo modulo
12139	Calculate modulo of an EntitiesPart
12140	Update an event
12141	Logs a message .
12142	Select from repository entity
12143	Get entity alias
12144	Override the default delete method
12145	Updates the entity .
12146	Set the from query .
12147	Set an alias .
12148	Group by .
12149	Adds a group by clause to the query .
12150	Set order by clause
12151	Adds order by clause
12152	Set the maximum number of results
12153	Paginate the results .
12154	Fetch one result
12155	Executes query and returns single result
12156	Fetch all results
12157	Compile a parameter .
12158	Finds the unused parameter name .
12159	Parse method calls
12160	Call function functions .
12161	Check if this is an associative array
12162	Describes the given subject .
12163	Outputs the timestamp for a domain .
12164	Returns the timestamp as table
12165	Get the page load time
12166	Returns the most effective Domain .
12167	Renders the header .
12168	Renders the header image .
12169	Renders the body
12170	Renders the footer .
12171	Gets the group
12172	Returns an array of options
12173	Get help for an action
12174	Get options for a specific action
12175	Access the headers
12176	Returns true if the user agent is flash .
12177	Get raw body
12178	Get the body params
12179	Gets the host info
12180	Returns the URL of the requested script
12181	Get server params
12182	Returns an array of acceptable content types
12183	Get accepted languages
12184	Get ETags
12185	Get CSRF token
12186	Generate a CSRF token .
12187	Get default server parameters
12188	On login .
12189	Crop the image
12190	Make crop file name
12191	Crop the image
12192	Get size of image
12193	Get mutations for a given file .
12194	Returns an array of annotations
12195	Determine if the doc matches .
12196	Set annotation .
12197	Set the arguments for an annotation .
12198	Get annotation properties
12199	Process annotation properties
12200	Returns an array of arguments
12201	Determine the value for the given property .
12202	Get annotation from map
12203	Cleans match .
12204	Returns an array of registered events
12205	Handles custom commands .
12206	Handle help command
12207	Returns the provider for the given command .
12208	Left join .
12209	Right Join
12210	Right join clause
12211	Converts the current query into a SQL string .
12212	fetch all columns
12213	Set the table name .
12214	Set object structure
12215	Set the name of the object database .
12216	Set object model name
12217	Build the model
12218	Builds the fields array
12219	Register the validation factory .
12220	Loads the services
12221	Returns the id of the target site .
12222	Get parent record .
12223	Renders a single item .
12224	Get all rows from the database .
12225	Executes a query against the database .
12226	Query a column .
12227	Counts rows .
12228	Checks if a database exists .
12229	Make a call to a prophecy .
12230	Returns a list of recorded calls .
12231	Configures the PEAR service
12232	Assert that the current working directory exists .
12233	Checks if the given channel is directory .
12234	Asserts that the channel directory exists .
12235	Get channel filename
12236	Get channel name from alias .
12237	Returns an alias for a given channel .
12238	Lock the current directory
12239	Checks if a channel exists .
12240	Checks if the given channel is a mirror .
12241	Returns true if the passed alias is an alias .
12242	Returns information about the specified channel .
12243	Update channel .
12244	Determine if the given data matches the given data .
12245	Get TinyMCE url
12246	Initialize string with given value
12247	Get entity manager
12248	Resolve class name
12249	Validates that the given value is an array of hashes .
12250	Validate route exists .
12251	Copy the source directory .
12252	Initializes the widget .
12253	Returns the next day timestamp
12254	Get previous day
12255	Create a range of dates
12256	Get file name
12257	Get a dir
12258	Open a file .
12259	Creates a new permission
12260	Put contents into a file .
12261	Get the contents of a file .
12262	Change file mode .
12263	Lock a file
12264	Called when a file is unlocked .
12265	Ensure the given path is a file object .
12266	Ensure the given path is a directory .
12267	Unlock timer .
12268	Gets the global variables .
12269	Renders the view .
12270	Adds a ON clause to the query .
12271	Add a new where clause to the query .
12272	Add a where clause to the query .
12273	Convert array to collection
12274	Checks if the model is normal
12275	Get single record
12276	Update table row
12277	Upgrades the migration .
12278	Executes fresh migration .
12279	Show migration history .
12280	New new migrations .
12281	Creates a new migration .
12282	Run the migration down .
12283	Migrate to time .
12284	Migrate to version .
12285	Loads the database adapter
12286	Connects to the database
12287	Add a query to be cached
12288	Get cached results
12289	Query an array
12290	Adds a table to the database
12291	Add fields to the table
12292	Returns table information
12293	Checks if a table exists
12294	Build fields array
12295	Escapes a string .
12296	Reset the query
12297	Set where clause
12298	Set where string
12299	Set where in clause
12300	Adds a new or where condition .
12301	Simple where clause .
12302	Set order by
12303	Returns the query string
12304	Get all results
12305	Get single query
12306	Returns an array of all core ui components
12307	Returns a model instance .
12308	Set the storage path
12309	Load structure files
12310	Get the structure for a given model .
12311	Save model structure .
12312	Dump data .
12313	Load data .
12314	Find all transactions for the given account .
12315	Set the current state .
12316	Get the length of the log .
12317	Process the command queue
12318	Perform a query based on the given query .
12319	Set the status of the connection .
12320	Handles a message .
12321	Process the given data .
12322	Cancels the request
12323	Redirect user to socialite .
12324	Route callback .
12325	Unlink a provider .
12326	Update settings .
12327	Check provider .
12328	Set the configuration for the service provider .
12329	Register a social provider .
12330	Clean up timer callback
12331	Pack a record into a string .
12332	Unpack a record .
12333	Create cleanup timer callback
12334	Checks if menu item has submenu .
12335	Set the accountId .
12336	Set userId .
12337	Gets the user s account .
12338	Gets the user associated with this dependency .
12339	Generate the next exception .
12340	Strip tags from string
12341	Initialize config
12342	Returns valid roles for a given release .
12343	Returns the roles of the base install .
12344	Shorten the string
12345	Set the blocksize
12346	Get a value by key .
12347	Generate config files
12348	Merge data
12349	Read config data
12350	Read file data
12351	Normalize the config path .
12352	Applies a domain event .
12353	Record a domain event message .
12354	Set related data
12355	Hook called when a presenter is attached .
12356	Redraw All Notables
12357	Redirects to the given destination
12358	Initializes twig plugins .
12359	Sets a list of variables
12360	Fetch template from string
12361	Load plugins from directory .
12362	Creates a BusinessHoursTimeZone from an associative array .
12363	Shift the current timezone to the given timezone .
12364	Flattens a list of days .
12365	Validates a warning
12366	Get the contents of a file
12367	Parse the given imports .
12368	Parses a YAML string .
12369	Set YAML parameters .
12370	Calculate the request length
12371	Execute command .
12372	Serialize a value
12373	Unpublish other versions
12374	Set the class name .
12375	Set the id column .
12376	Set the name column .
12377	Set Data Column .
12378	Set the lifetime column .
12379	Set the modified column .
12380	Set the created column .
12381	Get providers .
12382	Get available providers
12383	Boot the application
12384	Register the ContentNegotiator service .
12385	Set Request Format
12386	Validate request content type
12387	Executes the given function .
12388	Discover a channel .
12389	Returns PEAR2 object for PEAR2
12390	Get download directory
12391	Detect the deprecation cycle .
12392	Initialize the graph .
12393	Get url argument
12394	Outputs a single line
12395	Get command arguments
12396	Register the NoCaptcha class .
12397	Register the validator rules .
12398	Register form macro classes .
12399	Load data from file .
12400	Parse an xml string into an object
12401	Convert to XML
12402	Validates an error
12403	Returns the baseURL of the channel
12404	Reset functions .
12405	Set default PAR protocols
12406	Get a mirror
12407	Sets the version of the package .
12408	Add a function
12409	Add a mirror function
12410	Returns the package name of the package .
12411	Gets the validation object for this channel .
12412	Returns true if the property can be accessed
12413	Returns true if the property can be set
12414	Get cache file
12415	Loads the parameters from the cache .
12416	Adds an entry to the container .
12417	Get a value from the cache .
12418	Get an entry by its identifier .
12419	Check if an entry exists
12420	Unset an entry
12421	Applies the current site conditions to the query .
12422	Assign values to an array
12423	Extracts errors from a string .
12424	Get config file
12425	Get Model Definition
12426	Save model definition
12427	Returns the metadata
12428	Set field name
12429	Sets the image color .
12430	Set the parser .
12431	Aggregate a collection .
12432	Make a cURL resource
12433	Returns an image proxy
12434	Create a validator .
12435	Validates an attribute .
12436	Validate the value
12437	Start the application
12438	Shutdown shutdown function
12439	Build the URL for the given action
12440	Get the canonical URL for this route
12441	Normalize the route path .
12442	Returns true if the test is working .
12443	Get view names
12444	Gets a value from the cache .
12445	Stores a value in the cache .
12446	Set multiple values at once
12447	Get a value from a key .
12448	Adds an item to the collection
12449	Get a value from the cache .
12450	Delete an assistant
12451	Filters the given string .
12452	Configure command options
12453	Returns the value of the specified option or the configuration option .
12454	Returns the value for the given option typecast .
12455	Load config from file
12456	load config from command line options
12457	Renders the configuration .
12458	Renders a value .
12459	Normalize config array path
12460	Sets the version 1 . xsd
12461	Clears the contents of the package .
12462	Clear all dependencies
12463	Set the package type
12464	return current release
12465	Add a package as install
12466	Add file to ignore list
12467	Add a binary package
12468	Adds a new option to the package
12469	Set PHP - Install condition
12470	Set OS - specific condition
12471	Set the install condition
12472	Generate a change log entry
12473	Is video .
12474	Get video infos
12475	Set date .
12476	Set payment amount .
12477	Set type .
12478	Set the comment .
12479	Set category ID .
12480	Set the accountId virtual
12481	Creates a TimeBuilder from a start time string .
12482	Creates an instance from an array .
12483	Create a SQLite instance .
12484	Creates a new database instance .
12485	Runs a query and returns the number of affected rows
12486	Return table names
12487	Query a single row
12488	Runs a single cell
12489	Checks if a table exists
12490	Check if column exists
12491	Get primary keys
12492	Get column names
12493	Log query .
12494	On bootstrap event
12495	Run the application .
12496	Sets the keys
12497	Set private key
12498	Set the envelope key
12499	Set the compression
12500	Returns formatted formatted date
12501	Supprime une parametro
12502	Executes a function .
12503	Creates migration history table
12504	Adds a new filter to the list
12505	Filters a static object .
12506	Add inverse relations .
12507	Populate relation .
12508	Populates a single relation .
12509	Populate a multi - dimensional associative array with multiple models .
12510	Get list of invalid properties .
12511	Process an array
12512	Factory method to create entity
12513	Checks if this string is equal to another .
12514	Determine if this string ends with another .
12515	Returns whether the string contains the given text .
12516	Returns a substring of this string .
12517	Replace the string with a substring .
12518	Replace text by regular expression
12519	Before insert callback
12520	Before delete callback
12521	Refresh record .
12522	Update all records
12523	Delete all records
12524	Inserts a new record .
12525	Inserts a new record into the database .
12526	Default delete method .
12527	Returns the methods of the class .
12528	Get method identifier
12529	Callback for custom data
12530	Returns an array of commands
12531	Get help for a controller
12532	Create a controller instance .
12533	Handle an exception .
12534	Handle the fatal error .
12535	Logs an exception .
12536	Get exception trace
12537	Reduce the stack trace
12538	Proxy method .
12539	Proxy method with app .
12540	Injects a variable into arguments .
12541	Ensure that string is translated .
12542	Create a new repo
12543	Initialize notification module
12544	Generate a random key
12545	Returns an array of properties for the data store .
12546	Register a custom error class .
12547	Updates an existing user .
12548	Make request for multiple countries
12549	Encode a string .
12550	Returns the default reason phrase
12551	Get a specific header
12552	Returns the body
12553	Decode a gzip encoded string .
12554	Check if table exists
12555	Clears the table .
12556	Checks if there are pending requests .
12557	Get all headers
12558	Get header name .
12559	Write multiple messages at once
12560	Writes a message to the output stream .
12561	Sets the type
12562	Find a view path in an array of paths .
12563	Returns an array of possible files
12564	Starts the session .
12565	Get a value by its identifier .
12566	Set a value in the container .
12567	Removes an item from the collection .
12568	Generate a CSRF token .
12569	Validates a CSRF token .
12570	Humanize a table name .
12571	Recursively deletes the directory .
12572	Moves the file .
12573	Cleans the file name .
12574	Dispatch an event .
12575	Handles PHP errors .
12576	Handles fatal errors .
12577	Saves the item .
12578	Returns a string representation of the exception .
12579	Convert array to XML
12580	Converts a header string to an array of terms
12581	Load configuration file
12582	Set a config array
12583	Get config value
12584	Build config stack
12585	Parse config
12586	Parse config value
12587	Compile join constraint statement .
12588	Compile a where not null clause .
12589	Compile an insert query .
12590	Compile an update query .
12591	Compile the delete statement .
12592	Wrap a value in a string
12593	Set the arguments of the function .
12594	Set the promise .
12595	Set the prediction .
12596	Checks if the given promise is checked .
12597	Creates a Gallery instance .
12598	Creates a new authenticated user .
12599	Creates a new record
12600	Write to SQL query
12601	Scan a generic resource
12602	Performs a flat mapping .
12603	Applies a predicate to a value
12604	Executes the callback stack
12605	Execute callback as reference
12606	Parse callback function name
12607	Get constraints .
12608	Calculate min value
12609	Returns the controller .
12610	Returns the current action
12611	Resolve the callable .
12612	Process parsed data
12613	Process response .
12614	Get router exception .
12615	Get terminal sizes
12616	Returns the operating system .
12617	Translate a string .
12618	Locate a config file
12619	Formats the value as text .
12620	Formats the value as an email address .
12621	Formats the value as a decimal number .
12622	Formats the value as a short size .
12623	Displays a form to create a new model .
12624	Updates an existing item .
12625	Checks if the class exists .
12626	fetch an object from the database
12627	Returns the first column of the first row
12628	Query scope to exclude trashed records .
12629	Scope only deleted records .
12630	Run console request
12631	Get unset value
12632	Get a specific header
12633	Returns an instance without the specified header .
12634	Set the message body .
12635	Answers the icon for the type .
12636	Get all types
12637	Binds an alias .
12638	Renders an exception .
12639	Format the message .
12640	Get the value for the header .
12641	Convert an array to header string
12642	Combine section settings
12643	Recursively walk through a key .
12644	Explode string .
12645	Report an error
12646	Render error page
12647	Extracts the route parameters
12648	Returns the controller factory
12649	Generate the HTML for the buttons
12650	Returns an array of options
12651	Evaluate an expression
12652	Get zone information
12653	Add a new record .
12654	Get a table from the database .
12655	Get the Transaction instance .
12656	Loads default metadata .
12657	Set the parent id .
12658	Get Budget Category
12659	Get all category word
12660	Flush the cache .
12661	Adds an item to the collection .
12662	Remove an item from the collection .
12663	Remove cache data for a tag .
12664	Get a boolean value .
12665	Create parameter collection
12666	Extracts parameters from a collection .
12667	On console command loaded .
12668	Adds a new route group to the collection .
12669	Returns all annotations for the given type .
12670	Set service properties
12671	Create container service from annotation .
12672	Creates a service context from an annotation .
12673	Get the cache instance .
12674	Returns query builder instance .
12675	Create a new component instance .
12676	Get the fully - qualified class name token .
12677	Returns the stored class instance token .
12678	List all available packages .
12679	Compare the states of a given state .
12680	Compile the command .
12681	Generate arguments .
12682	Execute the command .
12683	Save the layer
12684	Replace the content .
12685	Adds a route to the collection .
12686	Add route for GET method
12687	Add POST route
12688	Add PUT route
12689	Add PATCH route
12690	Adds a DELETE route
12691	Add HEAD route
12692	Get a route by name .
12693	Returns the URL for the given route .
12694	Match request route
12695	Try to match a route
12696	Is internal URI?
12697	Dispatch a route .
12698	Setup routes .
12699	Set dynamic route .
12700	Validate route path .
12701	Try to match static route
12702	Try to match a dynamic route
12703	Get a copy of the static route .
12704	Get the matched dynamic route .
12705	Get route middleware .
12706	Route middleware .
12707	Get response from dispatch
12708	Setup routes from cache .
12709	Setup the annotation routes .
12710	Renders the header .
12711	Renders the toggle button .
12712	Get the TextFile object for the message
12713	Build the query result .
12714	Add filters to query builder
12715	Filter by query .
12716	Filter the query .
12717	Add ordering .
12718	Adds the offset to the query .
12719	Add limit to query builder
12720	Find an entity by id
12721	Adds a JOIN clause to the query .
12722	Get the sort column .
12723	Order by data tables .
12724	Checks if value is valid
12725	Replace all entities in a string
12726	Reverse XML entities .
12727	Get XML declaration .
12728	Get documentation type declaration
12729	Convert attributes to string
12730	Collapse empty tags
12731	Creates a new tag
12732	Creates the start element .
12733	Splits the fully qualified class name into a fully qualified namespace .
12734	Checks if a string is a valid XML name .
12735	Dispatch an object
12736	On tag response
12737	On invalid tag .
12738	Validate the entity .
12739	Interpolate message .
12740	Checks if two points are equal .
12741	Compare two points
12742	Get the intersection between two lines
12743	Checks if two lines are similar .
12744	Checks if two lines are similar .
12745	Returns the direction of two points
12746	Get direction by coordinates .
12747	Get all records from database .
12748	Prepare the async via .
12749	Remove duplicated models .
12750	Retrieves one or more records
12751	Checks if value is valid
12752	Asserts that the header value is valid .
12753	Perform the actual HTTP request .
12754	Builds the request URI
12755	Set the default language
12756	Set mediatype options
12757	Set result format
12758	Set the number of results to send .
12759	Set the entity
12760	Set the attribute of the media .
12761	Set the callback
12762	Set whether or not to be explicit
12763	Returns an array of Gallery objects
12764	Logs debug message
12765	Creates a temporary directory .
12766	Get information from a file .
12767	Get information from a description file .
12768	Fetch info from string
12769	Parses the information from the user input .
12770	Get with offers
12771	Get all with offers
12772	Perform SEO search
12773	Set log handler
12774	Set mail handler
12775	Returns an array of log entries
12776	Make a log row
12777	Shutdown Debugger
12778	Set request handle .
12779	Distribute the application
12780	Initialize bundle .
12781	Add a boot error message .
12782	Initialize a constant path
12783	Add an application path
12784	Get stack path
12785	Get absolute path
12786	Returns information about current user .
12787	Set the mode
12788	Loads the default application configuration .
12789	Initializes the constructor .
12790	Load a bundle .
12791	Get asset converter .
12792	Generate a hash for a file
12793	Add replytos
12794	Creates a new user .
12795	Resumes a user session .
12796	Calculate the number
12797	Get url for user details
12798	Executes a query and returns the number of rows .
12799	Get meta tags .
12800	Create a label tag .
12801	Create a button tag .
12802	Create a submit button .
12803	Create a submit button .
12804	Create a reset button .
12805	Create a hidden input .
12806	Create a password input field .
12807	Process boolean input options
12808	Sets the number of hours .
12809	Sets the number of minutes .
12810	Sets the number of seconds .
12811	Verify time elements are valid
12812	Writes contents to a file .
12813	Write a stream to the filesystem
12814	Update a file in the flysystem
12815	Update the stream
12816	Put content into a file .
12817	Write a stream to a file .
12818	Renames a file path .
12819	Copy a file or directory .
12820	Returns the metadata for the given path .
12821	Get mimetype
12822	Returns the size of the fly
12823	Returns the timestamp of the given path .
12824	Returns the visibility of the path
12825	Set the visibility of the path .
12826	Set the visibility of a path .
12827	Set the visibility of a path .
12828	Lists the contents of the flysystem
12829	Get the local adapter
12830	Return an instance of S3Adapter
12831	Process the request
12832	Deserialize the request .
12833	Checks access for an object
12834	Parse a block
12835	Get or set path
12836	Returns the authentication object .
12837	Get the data from a url
12838	Parse json data
12839	Get all data
12840	Get entity alias
12841	Creates a query builder instance .
12842	Creates a ResultSetMappingBuilder instance .
12843	Find all identifiers .
12844	Returns the minimum value of a column
12845	Paginate results .
12846	Checks if the entity is an entity .
12847	Get the identifier for an entity .
12848	Validate an entity
12849	Convert an entity to an array .
12850	Filter uploaded files .
12851	Returns the upload size limit
12852	Checks if a key exists in bag .
12853	Handles command execution .
12854	Terminate the command .
12855	Get Account Categories
12856	Run the application
12857	Initialize default time zone
12858	Executes the given function .
12859	Convert to array
12860	Initializes the cache .
12861	Get the list of children .
12862	Detect loop .
12863	Invalidate the cache .
12864	Returns last batch number
12865	Creates an html response .
12866	Create a new JsonResponse
12867	Create a new template instance .
12868	Describes the other layer .
12869	Returns the compression adapter
12870	Set compression adapter
12871	Set the namespace .
12872	Returns the value associated with the given name .
12873	Lists all HelloDB records .
12874	Installs all tables
12875	Show the error page
12876	Returns the serializer instance .
12877	Increment the version of a filename .
12878	Get body .
12879	Convert body to array
12880	Convert body to array
12881	Returns an array of results from a query .
12882	Set default values
12883	Set response body
12884	Convert the response to an array .
12885	Get unique validation rule for this field .
12886	Downloads a file from a S3 .
12887	Returns an adapter for the given ADO connection .
12888	Get the ADO connection id .
12889	Default error action .
12890	Wraps a cURL error object to a response object .
12891	Callback for reading body
12892	Callback for sending headers
12893	Write the body to the response
12894	Add a command collection
12895	Print time .
12896	Prints help for given class .
12897	Prints help text
12898	Prints a line .
12899	Encode an upload
12900	Clean up the HTML
12901	Before save callback
12902	After find callback .
12903	JSON decode an attribute .
12904	Creates a new Bank instance .
12905	Set the locale
12906	Get the translated value for a specific locale
12907	Establishes a socket connection .
12908	Returns true if the request can be kept .
12909	Disconnects from the server .
12910	Handles a redirect .
12911	Determine if we should use server digest auth .
12912	Determine if the request should be used for proxy digest .
12913	Writes the body of the request .
12914	Decode chunked response
12915	Build a select query
12916	Build where statement
12917	Builds SQL JOIN clause
12918	Builds a SQL GROUP BY clause
12919	Prepare dependency handler
12920	Recursively merges an array of results into a single array .
12921	Cleans a string
12922	Checks if a call is made .
12923	Decode YAML configuration .
12924	Start the session
12925	Execute query and return result
12926	Inserts data into a table .
12927	Perform an update query
12928	Updates an existing record .
12929	Executes a SELECT query .
12930	Fetch all rows
12931	Returns an array of ids
12932	Get a single row
12933	Get value of a single row
12934	Prepare a query for execution
12935	Executes a prepared statement
12936	Fetch a prepared statement
12937	Log the activity .
12938	Parse a value
12939	Perform a regular expression match .
12940	Dispatch router .
12941	Terminate the route middleware .
12942	Initializes the element handler
12943	End element handler
12944	Run command .
12945	Process the message .
12946	Modify the uploadable behavior .
12947	Creates a request from a JSON string .
12948	Open a session .
12949	Read a session
12950	Destroys a session
12951	Write data to session .
12952	Renders a widget .
12953	Returns the id of this node .
12954	Before run event
12955	Checks application persistence .
12956	Find a record by field value
12957	Destroys a record
12958	Returns all rows as array
12959	Save record to database
12960	Page callback Displays the list page
12961	Renders ajax list
12962	Verify user account .
12963	Load nav bar
12964	Check for budget month .
12965	Sets up the configuration
12966	Executes the given method .
12967	Get the user s name .
12968	Save user properties
12969	Change the password
12970	Adds the given implementation to the container .
12971	Get writer .
12972	Parse the version string
12973	Compares version .
12974	Returns a branch for the given parent id .
12975	Get the parent of this node .
12976	Get the parents of this model .
12977	Convert objects to array
12978	Applies a modifier
12979	Creates a resource from a CSS URL .
12980	Show the address book .
12981	Show the conversation .
12982	View a message .
12983	postManage action
12984	Append extensions to paths .
12985	Destroy the current session
12986	Add autoload method
12987	Remove autoload method
12988	Remove aggregate object
12989	Returns an array of options
12990	Returns an array of options
12991	Parse a short option
12992	Parse command line arguments
12993	Convert a directory to a struct
12994	Convert multiple files to struct .
12995	Remove a directory
12996	Create a new directory
12997	Creates a temporary directory .
12998	Removes temporary files
12999	Finds an array of files
13000	Get a log instance .
13001	Set the budgetId
13002	Gets the budget .
13003	Get all transactions
13004	Prepares the value for usage .
13005	Set the URL for this request .
13006	Set request method
13007	Set authentication .
13008	Add a cookie
13009	Set response body
13010	Get the request body .
13011	Add an upload file
13012	Attach an observer .
13013	Detach an observer .
13014	Set the last event
13015	Set the adapter
13016	Set cookie jar
13017	Send the request
13018	Detects the mime type of a file
13019	Finds and displays a Setting entity .
13020	Displays a form to create a new Setting entity .
13021	Creates a new Setting entity .
13022	Edits an existing Setting entity .
13023	Add an expression to the query .
13024	Set response status code .
13025	Removes current query
13026	Determine if the given event has listeners .
13027	Get field value
13028	Returns the error message .
13029	Creates an AccessDeniedHttpException .
13030	Sets a flash message .
13031	Commit current transaction
13032	Formats a date .
13033	Formats a time
13034	Format a boolean value .
13035	Sets the current timezone
13036	Get a class instance .
13037	Check if service exists
13038	Creates an instance of the specified class
13039	Adds a resolver to the stack .
13040	Adds a container instance .
13041	Get the pool instance .
13042	Execute a query against the observable sequence .
13043	Executes a query and returns the result .
13044	Creates a new database connection .
13045	Returns the oldest most busy connection .
13046	Install assets .
13047	Get reflection class
13048	Returns version of class
13049	Finds class name by version .
13050	Gets the migration methods for a class .
13051	Returns an array of required class names for the given class
13052	Finds and displays a Job entity .
13053	Displays a form to create a new Job entity .
13054	Creates a new Job entity .
13055	Edits an existing Job entity .
13056	Set client file name
13057	Guesses the extension of the file .
13058	Returns the mime type of the file .
13059	Get human readable size
13060	Returns the time as a datetime string
13061	Returns the UTC time as a datetime string
13062	Returns the time as a datetime string
13063	Create a new File instance from a content .
13064	Finds all applications
13065	Find application by id
13066	Create an application
13067	Delete an application
13068	Update application data
13069	Returns the closest date interval before the given date .
13070	Returns the closest date interval after the given date .
13071	Builds a DateTimeInterval instance from a DateTimeIntervalInterface instance .
13072	Returns the day before the given day number .
13073	Returns the day after the given day number .
13074	Gets the information about a role .
13075	Commit current transaction
13076	Rollback a transaction .
13077	Set transaction isolation level
13078	Returns the database connection .
13079	Set the backend
13080	Log debug message
13081	Log an info message .
13082	Log an NOTICE message .
13083	Log warning message
13084	Log an error message .
13085	Log critical message
13086	Log an alert message .
13087	Record emergency level
13088	Logs a message .
13089	Get a property value
13090	Truncate HTML
13091	Initializes PEAR object
13092	Deletes package files
13093	Adds a file operation
13094	Download PEAR package
13095	Set the loaded packages
13096	Returns true if point is valid
13097	Creates a new iteration exception .
13098	Register components .
13099	Add multiple attributes at once
13100	Change class methods .
13101	Parse classes .
13102	Gets the JSON schema .
13103	Bind an abstract if not already registered .
13104	Bind an abstract .
13105	Rebinding an abstract .
13106	Check if an abstract is shared
13107	Get a closure for a concrete class .
13108	Add a dependency for a call parameter .
13109	Get contextual abstract .
13110	Makes a request middleware .
13111	Add middleware to the response .
13112	Terminate the middleware .
13113	Index action .
13114	Get the WSDL
13115	Initialize default options
13116	Convert a date to a timestamp
13117	Convert timestamp to array
13118	Convert a date to a string
13119	Calculate time left
13120	Returns an array of properties
13121	Checks if a call is made .
13122	Parse a single parameter .
13123	Set a scenario parameter .
13124	Filters a string
13125	Output a message at the end of a message .
13126	Download all channel
13127	Adds a mock object .
13128	Creates a new class .
13129	Updates user profile .
13130	Checks if the given namespaces exists .
13131	Get environment variable
13132	Make a new response .
13133	Render a view .
13134	Make a json response .
13135	Returns a JSONP response .
13136	Create a new redirect response
13137	Returns a redirect response .
13138	Validate email address
13139	Get the difference in years
13140	Get the difference in weekdays
13141	Get the difference in seconds
13142	Get the difference between two dates .
13143	Returns an array of commands
13144	Set the properties of the command .
13145	Creates a command from an annotation .
13146	Get storage path
13147	Finds the Model based on its primary key value
13148	Get the value of a single parameter
13149	Make a Guzzle request
13150	Make a GET request
13151	Make a post request .
13152	Send HEAD request
13153	Send a PUT request to the API .
13154	Make a patch request
13155	Send a DELETE request to the API .
13156	Desensitize the host name .
13157	Track a checkpoint .
13158	Merge data with data
13159	Reads the contents of a file .
13160	Get a package by name
13161	Initialize base initialization code
13162	Clears the initialization code
13163	Get init code
13164	Evaluate PHP code
13165	Initializes the template paths
13166	Add template path
13167	Wraps an object into a Viewable object
13168	Get schema names .
13169	Get table names
13170	Refresh table metadata .
13171	Get table metadata
13172	Get table metadata .
13173	Set table metadata
13174	Get cache key .
13175	Get an option value
13176	Get temporary directory
13177	Initializes the Auth Manager component .
13178	Creates a new role .
13179	Assign child role to parent
13180	Register a prophecy .
13181	Call a mock .
13182	Get parameter by key .
13183	Resolves a parameter string .
13184	Convert meta tags to meta tags
13185	Get twitter url
13186	Renders panes .
13187	Register user .
13188	Set random vector
13189	Open the MCrypt
13190	Initializes the MCrypt
13191	Creates a new user instance .
13192	Verify user credentials
13193	Fetch user data
13194	Get a new auth extension
13195	Add data tokens to the given object .
13196	Returns the OAuth protocol for the given credentials .
13197	Check if the credentials are Oauth1 .
13198	Check if the credentials are Oauth2 .
13199	Closes the stream .
13200	Attach a stream to the stream .
13201	Returns the contents of the stream .
13202	Set the stream resource
13203	Writes data to a file .
13204	Get account virtual instance
13205	Get previous account
13206	Update account virtual .
13207	Set query cache duration
13208	Set the connection .
13209	Fetch a single row from the result set .
13210	Creates and executes an INSERT query .
13211	Executes the current query .
13212	Logs a query .
13213	Query a scalar .
13214	Executes query and returns result
13215	Check query by pattern
13216	Execute SQL query and return result
13217	Invoke a closure .
13218	Check the given layer .
13219	Prepare dom
13220	This method is responsible for dispatching .
13221	Renders the error page .
13222	Render debug info
13223	Renders a view .
13224	Initializes the bot .
13225	Add the response .
13226	Register a shortcode callback .
13227	Removes a shortcode
13228	Parse shortcode tag .
13229	Parse shortcode attributes
13230	Returns the URL to download a package .
13231	List packages .
13232	Sort releases by version number
13233	Get array data
13234	Get all hours
13235	Parse a page .
13236	Find all accounts by user id .
13237	Prints application message
13238	Write usage message
13239	Returns the usage path .
13240	Protected section of arguments
13241	Prepares an array of options .
13242	Get option name .
13243	Generate a roll roll number
13244	Set columns to select
13245	Adds a having clause to the query .
13246	Set where clause
13247	Adds a JOIN clause to the query .
13248	Join left table .
13249	Adds a RIGHT JOIN clause to the query .
13250	Get sql string
13251	Execute a SELECT query
13252	Prefix table join condition .
13253	Get a value from the collection .
13254	Set a value in the collection .
13255	Remove an item from collection
13256	Creates an INSERT query
13257	Set PEAR error stack
13258	Returns a singleton class .
13259	PHP error handler
13260	Set error message callback
13261	Set default callback
13262	Remove the last error
13263	Pop a warning from the stack .
13264	Check if there are errors
13265	Returns an array of errors
13266	Checks to see if there are errors
13267	Get all errors
13268	Get error message
13269	Register the configuration .
13270	Register an entry provider
13271	Registers an autowired classes .
13272	Get the configured parameters for the given class .
13273	Sets the target .
13274	Sets the filter mode
13275	Get the routes for the given class .
13276	Set route properties
13277	Returns an array of class routes
13278	Creates a new route for the given route .
13279	Builds route from annotation .
13280	Publish annotation .
13281	Formats the response as JSON .
13282	Formats the jsonp response .
13283	Get host port
13284	Get scheme host port
13285	Returns a new instance with the specified host .
13286	Returns a new instance with the specified port .
13287	Returns a new instance with the specified path .
13288	Returns a new instance with the specified query string .
13289	Returns a new instance with the specified fragment .
13290	Returns true if the protocol is a standard port .
13291	Validate the scheme .
13292	Validate the port number .
13293	Validates a package
13294	Validates dependency 1
13295	Normalize a deprecation
13296	Adds a word to the given string .
13297	Tokenize a string .
13298	Join keys and values of an array
13299	Check if a table exists in the database
13300	Maps a class name to a table .
13301	Get a table instance .
13302	Process version tag
13303	Discover a channel .
13304	Perform the login .
13305	Logout a channel .
13306	Converts a separator to a separator filter .
13307	Returns an array of migration files
13308	Get the path to the application file map .
13309	Set the publish method
13310	Prepares and sends the response .
13311	Check the url .
13312	Transforms a directory into a directory .
13313	Create an AppBuilder instance .
13314	Creates an AppBuilder instance from the given persister .
13315	Get app builder dependencies
13316	Reset a file .
13317	Creates a branch .
13318	Deletes a branch .
13319	Push git branch .
13320	Create a pull request
13321	Clone project .
13322	Callback function for php_output
13323	Runs a command
13324	Connects to the API .
13325	Add a file to be uploaded
13326	Get new file name
13327	Returns the file name for the given file .
13328	Gets a service by its identifier
13329	Generate service
13330	Set service .
13331	Set an alias .
13332	Returns a parameter by its identifier .
13333	Set a parameter .
13334	Returns a service definition
13335	Set service definition
13336	Initializes the project .
13337	Populate the message from an event .
13338	Convert table to an array
13339	Is this string serialized?
13340	Call the given callback .
13341	Adds a new route to the collection .
13342	Initializes the routes
13343	Create a new controller instance
13344	Register a controller class
13345	Registers controller with annotations
13346	Register controller no annotations
13347	Get the default controller and action .
13348	Register an observed observer .
13349	Unregisters an observed observer
13350	Auto set channel .
13351	Execute command .
13352	Adds flash message
13353	Redirect to referrer
13354	Configures shared cache .
13355	Initialize Channel event
13356	Finalize middleware .
13357	Returns the configuration directory .
13358	Checks if the given call is made .
13359	Returns a connection instance .
13360	Configure TinyMCE bundle
13361	Set the capabilities for the user .
13362	Creates a new instance from the given environment .
13363	Create a locator from a path .
13364	Gets the list of possible choices .
13365	Checks if the given constant is valid .
13366	Do the actual check .
13367	Checks if the given value is valid .
13368	Get an adapter for a pdo
13369	Creates the path for the module
13370	Create cache path
13371	Updates WSDL if needed
13372	Compile the soap service
13373	Returns the documentation of the class
13374	Returns an array of all the soap controllers
13375	Build the output
13376	Build Bootstrap CSS
13377	Get a single parameter
13378	Rebase the request .
13379	Adds a route .
13380	Add a static route to the collection .
13381	Check if static route is set
13382	Define a dynamic route .
13383	Check if a dynamic route exists
13384	Add a named route .
13385	Register the sub leaf nodes
13386	Locate a file
13387	Convert this number to another System .
13388	Checks if two numbers are equal .
13389	Get decimal value
13390	Adds a number to this number .
13391	Subtracts the given number from this number .
13392	Multiplies this number by a given number .
13393	Divide this number by a given number
13394	Returns an adapter for the given myssqli .
13395	Returns a list of aliases .
13396	Find alias for a given query .
13397	Replace the module content .
13398	Reads a line from the socket .
13399	Enables cipher connection
13400	Checks the timeout .
13401	Add a route to the collection .
13402	Sets the items .
13403	Builds a site key .
13404	Prepares the name attribute .
13405	Check data attribute .
13406	Adds a resource to the queue .
13407	Creates a new day interval from an array of intervals .
13408	Creates an instance from an associative array .
13409	Check if interval is interval
13410	Create a new request from an array .
13411	Set server info
13412	Set HTTP headers
13413	Set post fields
13414	Set query fields
13415	Get a specific header
13416	Convert to array
13417	Add command .
13418	Add parsed command .
13419	Get command by name
13420	Removes a command .
13421	Find a command matching the path .
13422	Returns all available commands
13423	Setup the application .
13424	Setup the console from the cache .
13425	Get cacheable commands
13426	Set the separator
13427	Listen to an event .
13428	Listen to many events
13429	Returns true if the given listener id exists .
13430	Removes an event listener .
13431	Determine if the given event has listeners .
13432	Adds an event to the collection .
13433	Removes an event .
13434	Triggers an event .
13435	Setup configuration .
13436	Setup events from cache .
13437	Initializes the framework .
13438	Check if template exists
13439	Fetch the template from the file
13440	Load the contents of the file .
13441	Save this file .
13442	Initialize the reader
13443	Initializes the writer .
13444	Get default options
13445	Encrypt data .
13446	Decrypt data .
13447	Generate key
13448	Throw an exception to stdout .
13449	Renders an exception .
13450	Get the view file for an exception .
13451	Returns a response object .
13452	Get exception data
13453	Get stdio logger
13454	Read session data from storage .
13455	Write data to session .
13456	Destroys a session .
13457	Update a timestamp
13458	Extracts data from session .
13459	Extracts the timestamp from the record .
13460	Get session data from cache .
13461	Get message with variables
13462	Compile constraint statement .
13463	Adds the auto increment for a column .
13464	Adds a key to the enum .
13465	Adds a foreign key .
13466	Gets the sql for a column .
13467	start the plugin
13468	Creates a new iteration exception .
13469	Renders the toggle button .
13470	Get response template
13471	Get module name
13472	Loads class reflection .
13473	Loads an object reflection .
13474	Loads a property reflection .
13475	Returns the method name for the given method .
13476	Get class properties
13477	Set property value
13478	Set properties value
13479	Loads class annotations
13480	Clear all objects
13481	Check if class is instantiable
13482	Retrieves reflection for a method
13483	Retrieves reflection for the specified class or interface .
13484	Check method arguments
13485	Get reflection from cache
13486	Set reflection to cache
13487	Get cache key
13488	Get object class name
13489	Parse doc comment .
13490	Get class doc comment .
13491	Gets the doc comment for a method .
13492	Initialize driver by config
13493	Map Namespace to Namespace
13494	Remove indentation from string
13495	Cleans up the content of an element
13496	Extract the photo array from the source data .
13497	Fetches the images of a photo .
13498	Extracts an array of images from the source .
13499	Find the position starting position of the placeholder .
13500	Build route path
13501	Search in route path
13502	Replace placeholders .
13503	Initializes the reaction .
13504	Preload messages from a category .
13505	Finds all categories matching the pattern .
13506	Check if property is set
13507	Send an exception response .
13508	Get the content of the exception .
13509	Format the path .
13510	Formats the arguments .
13511	Escape html .
13512	Set validator .
13513	Transform a string into an array of Input objects
13514	Handle disconnect event
13515	Handle the received event .
13516	Sends a callback to the server
13517	Cluster callback
13518	Returns a proxy command handler .
13519	load config
13520	Load bundles .
13521	Load the messages
13522	Set HTTP Headers
13523	Set ServerCgi Environment Variables
13524	post request
13525	Send a JSON - RPC request
13526	Connects to the database .
13527	Escapes a string .
13528	Initializes the renderer
13529	Determine if the model has a slug .
13530	Get special fields
13531	Get fields by type
13532	Format the date .
13533	Negotiates the preferred language .
13534	Negotiates the accepted charset .
13535	Negotiates the mime type based on the Accept header
13536	Match accept header .
13537	Sort accept headers
13538	Perform a HEAD request
13539	Convert charset from one encoding to another
13540	Get entity manager
13541	Get object structure
13542	Get an object from the database
13543	Get table structure
13544	Get a model from the database
13545	Build the table structure
13546	Prepare the error message
13547	Checks for dates .
13548	Check the budget .
13549	Find by budget id .
13550	Set the id parent .
13551	Method to set property isMain
13552	Get account user .
13553	Gets the user s bank
13554	Parses an array of transactions
13555	Answers the icon for the type .
13556	Build the query
13557	Escape a single value
13558	Creates a redirect response .
13559	Redirects to the given path .
13560	Redirects to the browser
13561	Throws an HTTP redirect exception .
13562	Filter commands .
13563	Sort commands by name .
13564	Output a command section .
13565	Initializes the current session .
13566	Start time .
13567	Returns the current time .
13568	Display timer .
13569	Initialize provider .
13570	Initializes the application .
13571	Initializes the framework .
13572	Locate configs path
13573	Locate the class loader
13574	Creates a configuration object .
13575	Get the config reader
13576	Initializes the container .
13577	Initialize the static application .
13578	Checks if the request matches the stored token .
13579	Get the CSRF token from the request .
13580	Initializes the bot .
13581	Get current weather for an event
13582	Retrieves the precipitation for a match .
13583	Get latitude long for a location
13584	Adds an error message to the response .
13585	Get English intensity .
13586	Get class annotations
13587	Returns an array of class annotations
13588	Get class and members annotations
13589	Setter for property annotations
13590	Filter an array of property annotations
13591	Returns an array of class annotations
13592	Set method annotations
13593	Filter method annotations
13594	Returns an array of method annotations
13595	Registers function annotations
13596	Filter annotations by type
13597	Set annotation values
13598	Returns class reflection
13599	Get reflection for a class
13600	Get method reflection
13601	Get reflection for function
13602	Returns an array of class dependencies
13603	Return the length of the vector
13604	Get center point
13605	Runs the widget
13606	Add a field to a model .
13607	Check if a key exists .
13608	Get directory name
13609	Scan directory recursively
13610	Set response header
13611	Returns an array of headers
13612	Creates a DB .
13613	Returns an array of database tables
13614	Update DB table from structure .
13615	Update relation variables
13616	Update many table .
13617	Generate table SQL
13618	Generate column SQL
13619	Generate index query
13620	Generate constraint SQL
13621	Returns an array of key values by key type
13622	Get all key values by key type .
13623	Retrieves annotations for a class
13624	Returns the exact class of the given class
13625	Retrieves annotations for a property
13626	Get the exact value of a property .
13627	Retrieves annotations for a method
13628	Returns the exact annotation of a method .
13629	Returns the reader .
13630	Returns the ReflectionMethod instance for the specified method .
13631	Get value from cache .
13632	Set a value in the cache .
13633	Returns an array of paths that match the given key .
13634	Process key .
13635	Checks the event class name .
13636	Build the event .
13637	Get average value of array
13638	Adds an order by clause to the query .
13639	Read parameters from constructor .
13640	Get a value from an object .
13641	Set a value on an object .
13642	Filter an array of objects
13643	Set From Address
13644	Adds an address to the mailer .
13645	Adds a reply - to address
13646	Adds a CC .
13647	Adds a BCC to the collection .
13648	Adds an Attachment
13649	Run the application .
13650	Set Referer
13651	Get Referer
13652	Builds a URL based on the parameters
13653	Download the package
13654	Extract the package .
13655	Reset default locale translations .
13656	Find position of strpos
13657	Create sidebar menu
13658	Add an example menu item
13659	Register services .
13660	Publish a list of pages
13661	Update the database
13662	Loads all messages
13663	Returns all categories .
13664	Returns the filename for the given response .
13665	Validates the uploaded files .
13666	Initializes the result object .
13667	Returns the pattern for the given pattern id .
13668	Set the array of attributes
13669	Detect data by key
13670	Determine if the environment is on Shell .
13671	Get config
13672	Returns the latitude in degrees format
13673	Returns the DMS longitude in degrees format
13674	Calculate the latitude range of the geocode distance .
13675	Calculate the longitude range of the geocodes
13676	Get distance method .
13677	Checks if the given data matches the given filters .
13678	Creates tables from configuration .
13679	Add multiple schema bundles .
13680	Get a single point
13681	Publish the command .
13682	Get the URL fragment for the current request .
13683	Generate a response for a request .
13684	Retrieves the first data from the cache .
13685	Checks if string ends with another string
13686	Counts the number of words in a string .
13687	Create a new actor .
13688	Initializes the session .
13689	Open the session .
13690	Opens the session .
13691	Register the session handler .
13692	Close the session .
13693	Destroy the session .
13694	Regenerate the session id .
13695	Read a session .
13696	Write a session
13697	Destroy the session .
13698	Set a value in the session .
13699	Removes a value from the store .
13700	Removes all session data
13701	Get a value from the flash bag .
13702	Returns all flash messages
13703	Set a flash message
13704	Add flash message
13705	Removes a flash parameter
13706	Removes all flash messages
13707	Starts the session .
13708	Freeze the session
13709	Create a session cookie
13710	Validate after an attribute .
13711	Validate the date after a given date .
13712	Validate date format .
13713	Checks for predictions .
13714	Assign value to array
13715	Get plugin configuration
13716	Executes the given rule .
13717	Process multiple dps
13718	Parse raw data
13719	Make view instance .
13720	Set view variables .
13721	Set a variable .
13722	Escapes a value .
13723	Get template directory
13724	Set or get the layout .
13725	Set view template .
13726	Renders a partial
13727	End block .
13728	Renders the view .
13729	Returns the full path of the template
13730	Renders a template .
13731	Renders the layout .
13732	Set the route .
13733	Get a line from an array of strings .
13734	Prints a message to the browser .
13735	Get the notification of the user .
13736	Creates a notification instance .
13737	Setter for key .
13738	Should this file be renaming?
13739	Guesses the extension of the file .
13740	Guesses the filename based on the filename
13741	Set the name of the record .
13742	Downloads a file .
13743	Uploads TinyMCE image .
13744	Kernel exception .
13745	Get curl resource
13746	Execute the request
13747	Set cookie file
13748	Choose map parameters
13749	Lists all Modules .
13750	Initializes the options .
13751	Writes to a file
13752	Get exception from context .
13753	Convert an exception to an array .
13754	Render view file .
13755	Is core file
13756	Get exception name
13757	Preprocesses the response
13758	Generate MinifyList
13759	Set the amount default .
13760	Set the date start
13761	Set date end
13762	Set whether or not the item is recurrent
13763	Set the month - mask
13764	Get all budget categories
13765	Get all budget month
13766	Executes a query and returns the number of affected rows .
13767	Return an error object from a PDO statement .
13768	Load an SPL autoloader
13769	Builds up the database .
13770	Migrate down .
13771	Creates a new INSERT query .
13772	Inserts multiple rows in a table .
13773	Updates a table .
13774	Deletes rows from a table .
13775	Renames a table .
13776	Drops a table .
13777	Truncate a table
13778	Drops a column from a table .
13779	Renames a column .
13780	Alter a column .
13781	Adds a primary key to a table .
13782	Drops a primary key .
13783	Creates a new foreign key .
13784	Drops a foreign key from a table .
13785	Creates a new index .
13786	Drops an index on a table .
13787	Adds a comment on a column .
13788	Add a comment on a table .
13789	Drops a comment from a column .
13790	Drops a comment from a table .
13791	Execute a promise
13792	Log message .
13793	Validate a regular expression
13794	Capture raw text
13795	Splits the text into an array
13796	Replace all occurences of the raw text .
13797	Return a JSON config
13798	Returns the url to the securimage url
13799	Gets a record by its ID .
13800	Get or create new model instance
13801	Returns a list of models .
13802	Save the model to the database .
13803	Delete a record from the database .
13804	Get the where in the given IDs .
13805	Get where id in keys .
13806	Set a cookie
13807	Establish a connection to a remote server
13808	Save the record in the database .
13809	Set the current state of the record .
13810	Convert to array
13811	Array access .
13812	Set the value of a field .
13813	Returns the primary key of the record .
13814	Parse the path .
13815	Validate the path .
13816	Splits segments into segments .
13817	Parse path .
13818	Gets the parameter replacement for the key .
13819	Cache a value .
13820	Flush the cache .
13821	Process raw response data
13822	Invoke method .
13823	Returns the mime type of the file .
13824	Regenerates the session id .
13825	Create a new session id
13826	Create the GC timer .
13827	Set the table s content .
13828	Set the buttons .
13829	Add a button .
13830	Validates a modal type .
13831	Validates a modal size .
13832	Register all commands
13833	Save a Tar File to a TAR Archive .
13834	Adds a string to the archive
13835	Check if a file is a malicious filename .
13836	Parse custom command .
13837	Runs the migration for the given object .
13838	Get unique keys .
13839	Get primary key .
13840	Get primary keys
13841	Get the priority .
13842	Get the validator .
13843	Loads mime types for a magic file .
13844	Load mime aliases
13845	Deletes a directory
13846	Returns the permissions as a string
13847	Converts permissions to octal format
13848	Adds a new inner join to the query .
13849	Returns the SELECT query as a SQL string
13850	Executes a SELECT query and returns the results
13851	Creates a SQL statement for creating a table .
13852	Load all modules
13853	Get the container .
13854	Initialize the user jar .
13855	Begins a SELECT query .
13856	Set query builder .
13857	Set a column value .
13858	Set the where clause .
13859	Set the where clause .
13860	Sets the order by clause
13861	Sets the order by clause
13862	Get query .
13863	Set the where clause .
13864	Sets the order by clause .
13865	Returns the select query .
13866	Returns the INSERT query .
13867	Get update query
13868	Get the delete query .
13869	Returns the SET query .
13870	Get the where statement .
13871	Get the ORDER BY clause .
13872	Dispatches an expression .
13873	Register a post
13874	Edit user form
13875	Returns the version string
13876	Create a new route
13877	Handle the request .
13878	Resolve action .
13879	Get home url
13880	Set a component definition
13881	Restore a UUID
13882	Get a user by its ID
13883	Get active activity
13884	Save messages to file .
13885	Find a value in the array .
13886	Find a model with the given array of models .
13887	Returns the next row from the result set
13888	Read a single column
13889	Read an object from the database
13890	Fetch all results
13891	Returns the number of columns in the result set .
13892	Find table constraints .
13893	Returns the server version .
13894	Parse routes .
13895	Parse route data
13896	Build route expression
13897	Add an alias
13898	Binds a service to the dispatcher .
13899	Set the service context
13900	Create a service from a context
13901	Check if service exists
13902	Checks if a context exists
13903	Get a service
13904	Make a service .
13905	Returns a singleton instance .
13906	Retrieves a service
13907	Get context service id
13908	Setup the container .
13909	Setup services from cache .
13910	Setup service providers .
13911	Get cacheable data
13912	Get address lines
13913	Sets the filter level
13914	Get unique id
13915	register in router
13916	Resolve action .
13917	Emits before action .
13918	Called after an action
13919	Renders a partial
13920	Renders ajax .
13921	Retrieve the list of actions .
13922	Render a layout in layout .
13923	Renders the view .
13924	Normalize the action method name .
13925	Resolves an error as plain text .
13926	Resolves an exception as an array .
13927	Get error data
13928	Get exception name
13929	Validate action .
13930	Get action id from action method .
13931	Get action method .
13932	Convert color to hex values
13933	Convert RGB to RGBA
13934	Check if an image is dominant
13935	Read data from stream .
13936	Select a user input .
13937	Append file to paths .
13938	Get pg client .
13939	Executes a query and returns the result .
13940	Writes the given stream to the given path .
13941	Builds a PSR - 7 ServerRequest object from global variables .
13942	Get a single header value
13943	Strip the query string from the path .
13944	Parse the host and port .
13945	Normalize a nested file spec .
13946	Determine if the string ends with the given substring .
13947	Generate random string
13948	Create an array of edge edges
13949	Finds annotations for a class
13950	Create a new repository .
13951	Fetch all items
13952	Update a record .
13953	Set the HTTP status code
13954	Set Response Headers
13955	Returns the date header
13956	Set date header
13957	Add a cache control
13958	Get a cache control
13959	Remove a cache control .
13960	Returns true if the cache is valid .
13961	Returns the age of the response .
13962	Set the response s expiration time .
13963	Returns the Expires date time
13964	Returns the maximum age of the response .
13965	Set shared max age .
13966	Set the TTL for the response .
13967	Set not modified status
13968	Check if the current status is invalid .
13969	Checks if the current status code is in an interactive mode .
13970	Check if the response is successful .
13971	Checks if the current request is a redirection .
13972	Is client error?
13973	Check if the current request is a redirect .
13974	Is this response empty?
13975	Closes output buffers
13976	Initializes the request
13977	Validate request method .
13978	Locate a command .
13979	Locate all mutators .
13980	Downloads a package .
13981	Remove installed plugins
13982	Detects duplicates of the given parameters .
13983	Initialize from file
13984	Returns an array of parameters
13985	Enables the error handler .
13986	Returns the amount difference between this object .
13987	Adds a month to a bitmask
13988	Check if this month has a month
13989	Get the length of the file
13990	Getter for boundary
13991	Loads a user based on its username .
13992	Creates a new user .
13993	Set ip address
13994	Renders a view .
13995	Publish the given stream .
13996	On materialize .
13997	Set multiple parameters
13998	Fetch the message .
13999	Encrypts a message
14000	Decrypts a message
14001	Decrypt an array
14002	Encrypt an object
14003	Decrypt an object
14004	Returns the value of an option
14005	Initialize class properties
14006	Replace magic fields
14007	Convert QueryBuilder to QueryBuilder
14008	Convert rich text to plain text .
14009	Converts rich text to html
14010	Convert a block to html
14011	Remove a cookie
14012	Send the response .
14013	Validate the status code .
