0	Convert Sina XML to list of URLs
1	Download a dailymotion website .
2	Download sina data from sina .
3	Formats text using ANSI escape sequences .
4	Prints text to stderr .
5	Print a message and exit .
6	Print a message and exit .
7	Detect operating system .
8	Download a video by URL .
9	Get info from ckplayer
10	Get video url from video_id
11	Extracts url segments from m3u url
12	Convert a string to a string .
13	Download a video from a URL .
14	Download data from stream .
15	download a video by id
16	Match a list of patterns .
17	Parses a query parameter
18	Get content from url .
19	POST data to url
20	Parses a host string into a tuple of hostname and port .
21	Get roomid by url key
22	helper function to get title from json content
23	download wanmen from json format
24	Downloads a WANmen page by title .
25	Checks if a task has been queued
26	Get the event buffer for the given dag_ids .
27	Returns a connection object
28	Retrieves AWS credentials from AWS account
29	Returns the value of the field with the given name .
30	Copy an SQL to a file
31	Copy a table to a temporary file
32	Uploads the file to Google Cloud Storage .
33	Retrieve the maximum partition of a table .
34	Get a mysql connection
35	Show the current state of a task
36	Restart a gunicorn master process
37	Gets a connection object
38	Translate values to target language
39	Retrieve a single instance
40	Creates a new instance .
41	Patch an instance .
42	Deletes an instance
43	Retrieve a database
44	Create a database .
45	Patch a database .
46	Delete a database .
47	Exports an instance
48	Start the sql proxy
49	Stops the sql proxy
50	Returns the version of the proxy proxy
51	Create a new connection
52	Retrieve a connection from the database .
53	Delete a connection
54	Returns a ProxyRunner instance
55	Get the database hook
56	Cleans up database hooks
57	Reserve a free port
58	Normalize a job_id string .
59	Extract the error code from an exception .
60	Delete all Dag runs
61	Delete all task instances
62	Set DAG state .
63	Print performance statistics .
64	Check to see if all tasks have completed .
65	Invoke the Lambda function
66	Create evaluation ops .
67	Wrapper for os . makedirs .
68	Convert a string to a float if possible .
69	Convert a value to a timezone .
70	Convert a datetime object to a naive datetime object .
71	Create a datetime object .
72	Get the connection to druid
73	Get a requests session
74	Send a request to the given endpoint .
75	Check the response and raise an exception .
76	Run the request and check the response .
77	Create a session .
78	Decorator to add session to function
79	Reset the database
80	Returns a human - readable representation of an exception .
81	Returns a list of records from the database .
82	Returns a pandas DataFrame with the given hql .
83	Execute an SQL statement .
84	Insert rows into table .
85	Creates a MongoDB connection
86	Check if a collection exists .
87	Create a collection .
88	Check if a database exists .
89	Create a new database .
90	Delete a database .
91	Delete a collection .
92	Insert documents into a collection .
93	Delete a document
94	Get a single document
95	Returns a list of documents matching the SQL query .
96	Get a function by name .
97	Create a new function in a location .
98	Updates a function .
99	Upload a function zip to a location .
100	Delete a function .
101	Generate the status of all dependencies of the task
102	Check if all dependencies are met
103	Returns a list of failures for the given ti .
104	Parse an S3 configuration file .
105	Returns the credentials for the current region .
106	Get a connection to the database .
107	Flush the buffer .
108	Check if file is a zip file .
109	Lists all python files in a directory .
110	Constructs a task instance from the database .
111	Start the DagFileProcessor manager .
112	Terminate the child process .
113	Exit gracefully .
114	Start the worker process .
115	Main loop .
116	Starts in sync mode .
117	Refresh the DAG directory .
118	Print file processing statistics .
119	Remove any missing import errors from the database .
120	Log file processing stats .
121	Set the file paths to be processed .
122	Wait until all processed processes are finished .
123	Check the status of the DAG .
124	Kill all processes
125	Create a new SSH connection
126	Create a new transfer job .
127	Get a transfer job
128	List all transfer jobs .
129	Updates a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a transfer to finish .
135	Find all tasks for a task instance
136	Return number of open slots
137	Run a command .
138	Remove an option from a section .
139	Get a section from the configuration .
140	Allocate ids for a project .
141	Begin a transaction .
142	Commit a project
143	Performs a lookup operation .
144	Rollback a transaction .
145	Run a query
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until it completes .
149	Exports project to S3 bucket .
150	Import a file from a bucket
151	Publish a message to a target ARN .
152	Get hostname from configuration file
153	Returns a connection to the language service
154	Analyze a document .
155	Annotate a document .
156	Classify a document .
157	Return a list of templates for the given name .
158	Link a template field .
159	Close the connection pool .
160	Prepare the path to be used in the classpath
161	Check if task_id is ready
162	Detect if configuration variable is valid .
163	Convert an SQLAlchemy object to a dictionary .
164	Yield successive chunks from a list .
165	Apply function to iterable in chunks .
166	Chain multiple tasks .
167	Pretty print a table
168	Render a log filename
169	Return a dataproc connection
170	Wait for an operation to complete .
171	Recursively convert content to string
172	Handler for executing an operator .
173	Run a pig command
174	Fetch the state of a celery task
175	Calculate the number of tasks per send process .
176	The number of tasks per fetch process .
177	Set default value for variable key .
178	Return a connection to mapper
179	Create a new MLE engine job .
180	Get a single job by ID .
181	Wait for a job to complete .
182	Create a new version .
183	Set the default version of the model
184	List versions of a model
185	Delete a version .
186	Create a model in a project .
187	Get a model by name .
188	Write batch data to DynamoDB
189	Integrate the plugins manager into sys . modules .
190	Get the default executor
191	Get the appropriate executor .
192	Called when an error occurs .
193	Return a mssql connection
194	Trigger a workflow .
195	Delete a dag .
196	Get information about a task
197	List available pools .
198	Create a new pool
199	Delete a pool
200	Creates a container group .
201	Returns the current state and exit code for the given resource group .
202	Gets the messages for the given resource group .
203	Get the logs of a container .
204	Delete a container .
205	Check if a container exists .
206	Decorator to apply default arguments .
207	Construct ingest query
208	Get a message from redis
209	Find all DagRun objects
210	Returns a list of task instances for this dag .
211	Get task instance by task_id
212	Get the previous dag run .
213	Get the previous scheduled DAG run
214	Updates the state of the task
215	Verify the integrity of the dag
216	Send a jenkins request with headers
217	Convert Airflow context to Airflow variables
218	trigger conditionally trigger conditionally
219	Send a metric to InfluxDB .
220	Query a metric
221	Return the DAG for the given dag_id .
222	Mark a list of dead jobs
223	Loads a DAG into the bag
224	Collect DAG files from a directory .
225	Return a formatted string describing the dag bag statistics .
226	add days to a datetime
227	Format a datetime object as a string .
228	Checks if the file is a directory
229	Tries to poke the file
230	Clears all tasks from a list of tasks .
231	Returns the number of possible attempts .
232	Generate Airflow command .
233	Return the current state of the task
234	Record the task instance as FAILED
235	Refresh the state from the database .
236	Clears all xcom data
237	Return a unique key .
238	Determine if all dependent dependencies are done
239	Return the next retry datetime
240	Check if this job is ready to be ready for retry .
241	Check if the pool is full
242	Get the DagRun object from the database .
243	Push key value to XCom .
244	Pull one or more tasks .
245	Initialize the run context
246	Closes the session .
247	Connect to the compute server
248	Start an instance
249	Set machine type
250	Get instance template
251	Insert an instance template
252	Get instance group manager
253	Patch an instance group manager
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Creates a bucket
257	Check if a prefix exists .
258	List prefixes in a bucket .
259	List keys in a bucket .
260	Check if a bucket exists .
261	Get an object from S3
262	Reads the contents of a bucket .
263	Select an object from S3
264	Check if a wildcard key exists .
265	Get a key from S3
266	Load a file from S3
267	Loads an object from a string .
268	Upload an S3 object to S3 .
269	Upload a file - like object to S3
270	Copies an object to another bucket .
271	Query cassandra .
272	Convert a user type to a dictionary .
273	Send an email
274	Return a connection to the SpeechAPI .
275	Recognize audio .
276	Execute the query
277	Load the list of plugins into the airflow plugins
278	Check if the plugin is valid .
279	Skips tasks in the database
280	Return an AzureDL FileSystem client
281	Check if a file exists
282	Upload a file to the server .
283	List files under path .
284	Execute the query
285	Uncompress a compressed file .
286	Query the mssql database
287	Decorator to log action logging .
288	Build metrics .
289	Create a cgroup from a path
290	Delete a cgroup
291	Parses a host string
292	Make an API call .
293	Get a Salesforce connection
294	Make a query to all objects
295	Returns information about an object
296	Returns a list of available fields for an object
297	Get object from Salesforce
298	Convert column to timestamp
299	Write an object to a CSV file
300	Get a MongoDB connection .
301	Get a mongo collection
302	Replace multiple documents .
303	Check if the email has a mail attachment .
304	Retrieve email attachments by name .
305	Download email attachments by name .
306	Return a list of email attachments by name .
307	Returns a tuple of file and its payload
308	Adds records to this delivery stream
309	Determine the status of the dependencies of a task .
310	Send an email
311	Send an email using SMTP
312	Convert result value to datetime .
313	Check if a blob exists .
314	Check if a prefix exists for a given container .
315	Load a string from a string .
316	Returns the contents of a file
317	Delete a file
318	Run MLSD on the server
319	Get FTP connection
320	List a directory
321	Retrieve a file from the FTP server .
322	Upload a file to the server
323	Get the modification time of a file
324	Execute the bot .
325	Return a FileService object
326	Check if a directory exists .
327	Check if a file exists .
328	Returns a list of directories and files in the account .
329	Creates a directory .
330	Loads a file from a file
331	Create a file from a string .
332	Create a new file from a stream
333	Get storage connection
334	Copies an object to a bucket .
335	Download an object from a bucket
336	Upload a file to a bucket .
337	Check if an object exists
338	Check if an object is updated after the given timestamp
339	Delete an object
340	List all blobs in a bucket
341	Get the size of a bucket
342	Get the CRC32c checksum of an object
343	Get the MD5 hash of an object
344	Create a new bucket
345	Compose a list of objects into a bucket .
346	Check if the secondary training status has changed .
347	Generate a secondary training status message
348	Upload a file to S3
349	Configure S3 resources .
350	Check if an S3 URL is valid .
351	Get a log client
352	Create a new training job .
353	Create a hyperparameter tuning job .
354	Create a new transform job
355	Create an endpoint
356	Describe a training job .
357	Check the status of a SageMaker job .
358	Check the status of a training job .
359	Execute the data flow
360	Run migrations offline .
361	Run migrations .
362	Delete an instance
363	Create a new instance .
364	Create a table .
365	Delete a table
366	Update a cluster .
367	Prepare CLI command line arguments
368	Convert a dictionary to a list of values .
369	Load columns from a DataFrame
370	Load a table from a file
371	Returns a Thrift client
372	Check if a named partition exists .
373	Check if a table exists
374	Return a connection to the hive server
375	Retrieve the results from the database .
376	Write results to a CSV file
377	Returns a list of records from the query
378	Returns a pandas DataFrame with the columns of the query
379	Returns a connection to the ProductSearchClient
380	Get endpoint URL
381	Send dingding message
382	Bind parameters to an operation .
383	Escape a string .
384	Cast a string field to a specific type
385	Validate the given value against the expected type .
386	Get a BigQuery connection
387	Creates a BigQuery service
388	Check if a table exists .
389	Create an empty table .
390	Patch a table resource .
391	Cancel the running query .
392	Runs a table delete operation .
393	Run an upsert operation on a dataset .
394	Grant access to a dataset
395	Get a dataset resource
396	Returns a list of datasets
397	Insert rows into a table .
398	Execute SQL operation .
399	Execute an operation on the server .
400	Get the next query results .
401	Query the database .
402	Make intermediate directories .
403	Create a queue
404	Sends a message to a queue
405	Runs a command .
406	Called when the job is finished .
407	Main entry point .
408	build the html header
409	build SVG container
410	build the js chart
411	Create a new x axis
412	Create a new y - axis .
413	Get a connection to the database
414	Decorator to log action logging .
415	Decorator for gzipped view function .
416	Get the last run of a DagRun
417	Create a dag run
418	Execute the message
419	Returns a JSON response
420	Open a file if it s a zip file .
421	Generate a cache key .
422	Returns an instance of VideoIntelligenceServiceClient
423	Annotate a video .
424	Get API key .
425	Get a session object
426	Execute the request
427	Builds an OpGenie payload .
428	Execute the actionsgenie alert hook
429	Gets a connection
430	Run a query .
431	Get the query status
432	Poll the status of a query
433	Get a pysftp connection
434	Handle a rate limit exception .
435	Make a call to Zendesk
436	Returns a set of partitions for a table .
437	Retrieve a table
438	Get the location of a table .
439	Returns the status of a cluster
440	Deletes a cluster .
441	Returns all snapshots of a cluster
442	Restores a cluster from a snapshot
443	Creates a snapshot
444	Execute the Slack API
445	Create a job flow
446	Filter files that are greater than size .
447	Filter files that are not ignored .
448	Execute the query
449	Get a pool by name
450	Create a new pool
451	Delete a pool
452	Convert a dictionary to a protobuf .
453	Wait for an operation to complete .
454	Get an operation by name .
455	Append a label to a cluster .
456	Create a cluster .
457	Fetch a single cluster
458	Get the Discord webhook endpoint .
459	Build the JSON payload for the Discord API .
460	Execute the bot .
461	Encrypt a plaintext .
462	Import a table .
463	Import a query
464	Export a table to a file .
465	Returns a TextToSpeechClient
466	Synthesize audio .
467	Closes the upload .
468	Returns a list of init containers
469	Build the environment variables .
470	Get secrets from kube_secrets
471	Return a security context .
472	Get extra links
473	Heartbeat the job .
474	Launch a process on a file .
475	Start the worker process .
476	Check if the task has finished .
477	Exit gracefully .
478	Update import errors .
479	Process all tasks in the queue .
480	Change the state of the tis without a dag run .
481	Gets the concurrency map between states
482	Changes the state of the executables to be queued .
483	Enqueue tasks with queued state
484	Execute the list of executables .
485	Changes the state of tasks that failed to execute .
486	Process events from the executor .
487	Process a DAG file .
488	Updates the status of a task .
489	Manage the state of the executor .
490	Get the run for the given run_date .
491	Return a dictionary of all the task instances for dag_run .
492	Execute all the tasks for the given run dates .
493	Set DAG runs to failed .
494	Execute the DAG run .
495	Perform heartbeat callback .
496	Returns an instance of the client .
497	Gets a single instance
498	Apply a function to an instance .
499	Create an instance .
500	Updates an instance
501	Delete an instance .
502	Get the database for the instance .
503	Create a database .
504	Updates a database .
505	Delete database from instance .
506	Checks if the attachment exists
507	Prepare additional_properties and return merged dictionary .
508	Get a connection to the keyspace
509	Check if a table exists
510	Check if a record exists .
511	Build command to track driver status
512	Run spark submit command
513	Parse the output of spark submit_submit_log .
514	Process Spark driver status log .
515	Returns an instance of the task runner .
516	Wait for the task to complete .
517	Query the MySQL hook .
518	Configure a CSV file .
519	Write the schema to a local file .
520	Returns a dict with column name and type .
521	Map mysql_type to string type
522	Execute the command
523	Decorator for apply_age
524	Parse extra json data
525	Return a list of cron tuples
526	Scale the time_seconds .
527	Return the number of days after n seconds
528	Initialize a role in the database .
529	Delete a role
530	Returns a list of roles for the user
531	Returns a map of permission names to view menu
532	Returns True if the user has a role .
533	Checks if a user has a permission .
534	Delete faulty permissions
535	Merge permission view
536	Update the admin permissions for the admin
537	Sets the view permissions for the given dag view .
538	Create permissions for all DAG_VMs
539	Get Fernet object
540	Checks for a partition
541	Get the Lambda catalog hook
542	Receive a message
543	Get a connection to the hdfs server
544	Get a connection to the remote host
545	Check if an HDFS path exists .
546	r Upload a file to HDFS
547	Get the connection to pinot
548	Returns the URI for the query
549	Convert a date object to a dictionary .
550	Convert a time to a dictionary .
551	Get a redis connection
552	Returns a pandas dataframe from the database
553	Execute SQL statement
554	Set autocommit flag .
555	Insert multiple rows into a table .
556	Return a string representation of a cell
557	Check the health of the scheduler
558	Get extra links
559	Return a cloudant session
560	Executes the Slack webhook .
561	Get Google API credentials .
562	Return an authorized HTTP request .
563	Catch HTTP exceptions .
564	Fallback to default project_id
565	Return a list of unfinished states .
566	Prepare a Spark - SQL command .
567	Convert image to torch . ByteTensor .
568	Normalizes a tensor .
569	r Resize an image .
570	r Add padding .
571	Crop an image
572	Crop a PIL image
573	Flip an image .
574	Return the perspective of the image .
575	Flip the image vertically horizontally .
576	Crops the given image with the given size .
577	Adjust the brightness of an image .
578	Adjust the contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue of an image .
581	r Adjust gamma .
582	Rotate a PIL Image
583	Transform an image .
584	Convert a PIL Image to a grayscale .
585	Save a tensor to a file .
586	Find all classes in dir
587	Read an image file .
588	Reads an info file .
589	Reads the matches_file and returns a torch . torch . torch . torch . torch . torch . torch . torch . torch . torch . torch . torch . Tensor .
590	Compute the accuracy of the output .
591	Wrapper for print function .
592	Download a file from a URL .
593	Return a list of directories .
594	Return a list of all files in a directory
595	Download a file from Google Drive .
596	Generate random parameters .
597	Generate random parameters .
598	Generate image parameters .
599	Generate parameters .
600	Generate random parameters .
601	Downloads the dataset
602	Downloads all the images
603	Downloads a zip archive
604	Get current theme name
605	Autocomplete
606	Display the preferences
607	Return a list of all the themes
608	Return search query string
609	Parse response
610	Custom gradient descent .
611	Random variates .
612	Compute the log probability of eight school shocks .
613	Benchmark the eighth - team test .
614	Decorator to expand docstring .
615	Return the name of a distribution .
616	Build a custom rv .
617	Convert a distribution into a random variable .
618	Create a random variates .
619	Predictive predictive distribution .
620	Calculate the predictive mean for the observed data .
621	Wrapper for _max_max .
622	Fail if x is finite .
623	Fail if x is less than the given rank .
624	Calculate the event size .
625	Evaluate one - hot function .
626	Get the converter function for the given identifier .
627	Returns the size of the mixture of components .
628	Get the next interceptor .
629	Decorator for intercepting a function .
630	Decorator that yields tape data .
631	Simple toy logistic model .
632	Visualize the decision diagram .
633	Builds an input pipeline .
634	Check that map_values is valid .
635	Trace a state using the given function .
636	Call a transition operator .
637	Call a function and return the gradient tensors .
638	Convert from_structure to_structure .
639	Decorator for log_prob_fn .
640	Perform a leapfrog step .
641	Run metropolis Hastings step .
642	Compute the Hamiltonian MonteCarlo .
643	Applies the sign adaptation of a network .
644	Initialize a Tfp .
645	Convert x to Tensor .
646	Create a scale operator .
647	Returns a function that generates a random walk normal .
648	Generate a random walk function .
649	Expand x into event rank .
650	r Entropy .
651	Calculate the categorical probabilities .
652	Check that the arguments are valid .
653	Ensure that TensorFlow is installed .
654	Logistic regression .
655	Return features and labels .
656	Cholesky covariance .
657	Squared deviation .
658	Compute the variance of x .
659	Convert axis to positive indices .
660	Squeeze x .
661	Compute the standardization .
662	Inverse transformation
663	Construct a semilocal trend transition matrix .
664	Semilocal linear trend .
665	r Samples from a Halton sequence .
666	Generate permutations .
667	Get indices from num_results and sequence_indices .
668	Calculate the size of a base expansion .
669	Return a list of prime numbers less than n .
670	Get eps for a given dtype
671	HagerHang model .
672	Fix step size .
673	Wrapper for bracket search .
674	Helper function for line search .
675	Linear bisection search .
676	Prepare arguments for evaluation .
677	Convert a list of values to str .
678	Quadrature scheme for softmax normal distribution .
679	Quadrature schemes for a softmax normal distribution .
680	Checks if a quadrature parameter is valid .
681	Determine the shape of the batch event .
682	Interpolate grid points .
683	Interpolate grid points .
684	Linear op .
685	Concatenate vectors .
686	Log - vector matrix .
687	Computes the log - sum of ms and vs .
688	Multiply a vector matrix .
689	Calculate log probabilities .
690	Returns the marginal probabilities .
691	Returns the posterior marginal marginal probabilities .
692	Starts the posterior mode .
693	Choose a direction from the current state .
694	Sample from next state .
695	Wrapper for _call_fn .
696	Pads x to the right .
697	Slice a single step .
698	Builds a trainable posterior for the given parameter .
699	Build a factored Variational loss .
700	Minimize in graph .
701	Calculate the mean and variance of a time series .
702	Compute the initial value of a masked time series .
703	Returns the batch shape of the given distributions .
704	Computes the factored joint joint distribution .
705	Calculates the sum of multivariate normal distributions .
706	Calculate empirical statistics .
707	Expand the trailing dimension of observed_time_series .
708	Canonicalize an observed time series .
709	A mixture of posterior draws .
710	Return the range in the range .
711	Creates a function that will return a function that returns the statistic for the given attribute .
712	Unify a function signature .
713	Resolve distribution names .
714	Get the required arguments for a function .
715	Computes the KL divergence between two distributions .
716	Builds the distribution function .
717	Resolve the distribution graph .
718	Compute the total entropy of distributions .
719	Decorator to check if x is in the support of the distribution
720	Create image summary .
721	Visualize the reconstruction .
722	Visualize the predictive analysis .
723	Summarize distribution parameters .
724	Summarize the mean in nats and bits .
725	Compute the Tensor with respect to inputs .
726	Computes the zero state of the model .
727	Compute the LSTM .
728	Call the convolution .
729	Generates a Gaussian model .
730	Reconstruct the model .
731	Sample from the static prior .
732	Sample the dynamic prior .
733	Shape of the batch .
734	Returns the shape of the batch .
735	Make a state space model .
736	Sample prior from the model .
737	Compute the min_event_ndims for each event .
738	Convert vector size to square matrix size .
739	Like argsort .
740	Sort a list of values .
741	Netndtr function .
742	Evaluate the Tensor .
743	Netndtri .
744	Log - NDTr .
745	Calculates the log - symmetric series .
746	Erfinv function .
747	Log - density function .
748	Compute joint log probability .
749	Benchmark the text messages .
750	Returns whether the given index_points is a univariate distribution .
751	Returns the marginal distribution .
752	Return the index_points .
753	Create an IF stack .
754	Perform one step of the kernel .
755	Bootstrap the model .
756	The outer squared difference .
757	Calculate the value and batch Jacobian .
758	Prevent the second derivative .
759	Distributional transform .
760	Split a covariance into a list of marginals .
761	Decompose a model from a posterior distribution .
762	Decompose model from observed time series .
763	Decompose forecast by component .
764	Convert dense tensor to SparseTensor .
765	Decorator .
766	Return a string representation of a tensor .
767	Tensor shape .
768	Returns the shape of the sample .
769	Sample from the distribution .
770	Evaluate the expression .
771	Returns a numpy array .
772	Conjugates prior for a Normal prior prior .
773	Create a default template .
774	Random normalization .
775	Log - norm probability .
776	Log normalization .
777	Find the common dtype of args .
778	Create a function that will broadcast a summary statistic .
779	Broadcasts tensors to target_tensors .
780	PDF at the given peak
781	Calculate effective sample size .
782	Calculate the effective sample size .
783	Matrix - scale reduction for a single state .
784	Return the size of x .
785	Convert a list of states to a broadcast parameter .
786	Quadrature quadrature quadrature quadrature scheme .
787	Quadrature scheme with lognormal quantiles .
788	Merge two maps .
789	Returns a copy of this mapping with the given field .
790	Merge two values .
791	Recursively convert nested dictionaries into tuples .
792	Leoulli increment .
793	Find the best interval .
794	Slice slice bounds .
795	Draw random samples from x_initial .
796	Slice sampling sampling .
797	Decorator for setter .
798	Create a log joint function for the given model .
799	Get the keyword arguments for a function .
800	Block convolutional block .
801	Builds a tree .
802	Decorator to check that the value and gradients are None .
803	Returns True if there is no u turn .
804	Leapfrog .
805	Computes the joint joint probability .
806	Random Bernstein distribution .
807	Default loc scale function .
808	Default mean field normalizer .
809	Default Multivariate Multivariate Normal Distribution .
810	Deserialize function from serialized serialization .
811	Serialize a Lambda function .
812	Broadcasts from from_structure to_structure .
813	Convert nested structure to Tensor .
814	Convert args to tensor .
815	Call function with args .
816	Returns a dictionary of Tensor - like attributes .
817	Creates a mixture prior for a mixture .
818	Pack images into batch
819	Downloads a file to a directory .
820	Build fake inputs .
821	Validate block_sizes .
822	Check that tensors are broadcast .
823	Multivariate Multivariate NormalTriL .
824	Bernoulli model .
825	Create a normal .
826	Poisson distribution .
827	Mala Euler method .
828	Calculate drift parts .
829	r Compute log - acceptance correction .
830	Call volatility_fn with gradients .
831	Convert volatility parts to tf .
832	Create an AR transition matrix .
833	Return the sample shape of x .
834	Reshape the input and output shape .
835	Call the function and return the result .
836	Computes the bottleneck tensor .
837	Generate joint distribution distributions .
838	Generates a bag of words for each topic .
839	Create a LDA variational variates .
840	Given a list of topics return a list of strings .
841	Load newsgroups dataset .
842	Build fake inputs .
843	Builds input_fn .
844	Minimize gradients .
845	Adds the control dependencies to the model quantizer .
846	Save images to file
847	Visualize training images .
848	Load Bernstein MNIST dataset .
849	Convert a dtype into a numpy dtype .
850	Returns the base_dtype for the given dtype .
851	Check if dtype is a boolean .
852	Check if dtype is complex .
853	Returns the maximum value of a dtype .
854	Returns the name of a dtype .
855	Returns the size of a dtype .
856	r Assert that items are of the same type .
857	Assert that tensors are of the same type .
858	Minimize an objective function .
859	Nelder - Mead implementation .
860	Return a function that accepts a simplex .
861	Return a function that expands an objective function .
862	Returns a function that evaluates the solution of the solution .
863	Shrink the solution of a simplex .
864	Replace x with replacement .
865	Check convergence .
866	Validate the arguments for the given objective function .
867	Prepare the arguments for the objective function .
868	Prepare arguments for the given initial vertex .
869	Evaluates the given objective function .
870	Plots the weighted weight posterior of the model .
871	Plots the heldout prediction .
872	Build fake data .
873	Returns a dict of configuration parameters .
874	Create a Transformer from a config dictionary .
875	Wrapper for np . matmul .
876	Compute the standard variance for the given statistic .
877	Assigns a log - moving mean value to a log - moving mean .
878	Make a columnar .
879	Generate a random radius .
880	Random rayleigh .
881	Pick a boolean condition .
882	Calculate the log_prob for the given event .
883	Finalize the probability for one fiber .
884	Rotate dimensions .
885	r Unnormalized batch normalization .
886	Validate BatchNorm layer .
887	Slice a single parameter .
888	Convert slice parameters to a dictionary .
889	Apply a single step .
890	Apply slices to the distribution .
891	Slice a distribution .
892	Fit a model to a model .
893	Returns a function that checks convergence criteria for a given relative norm .
894	Prepare model arguments .
895	Returns the number of columns in x .
896	Prefer static arguments .
897	Copy the docstring of a function to the new_fn .
898	Convert a boolean value into a constant .
899	Calculate the rank of a shape .
900	Create a new case .
901	Create a new name scope .
902	Compute the standard deviation of a mixture .
903	Creates a tril scale .
904	Creates a diagonal scale .
905	Creates shapes for a given location and scale .
906	Checks if the given scale is a diagonal scale .
907	Check if the distribution is a scalar distribution .
908	Determines the padding dimension of a batch .
909	Pick a truth condition .
910	Moves a dimension from x to dest_idx .
911	Check that x is nonnegative integer form .
912	Tensor with same shape .
913	Try to get static value .
914	Return True if dt is known by the dtype .
915	Return True if dt is known by dtype .
916	Find the largest integer by dtype .
917	Return the smallest integer corresponding to the given dtype .
918	Check if dt is an integer like object .
919	Check that categorical_distribution is valid .
920	Computes the log - of - sum of the total permutations .
921	Rotate x .
922	Pick a vector .
923	Prefer static broadcast shape .
924	Generate a new seed
925	Tridiagonal operator .
926	Returns the dimension size of x .
927	Process quadrature grid and probabilities .
928	Retrieve parent frame arguments .
929	Expand x into a vector .
930	Creates an output_tensor with the given dependencies .
931	Check that the rightmost_transposed_ndims is valid .
932	Check if perm is valid .
933	Return the shape of the event .
934	Concatenate two Tensors .
935	Returns the dimensions of x .
936	Returns a copy of x with the same shape .
937	Returns a copy of x with the given rank .
938	Checks that the given arguments are equal to the same shape .
939	Augment the sample shape according to partial_sample_shape .
940	Builds a Backward pass step .
941	Forward smoothing .
942	Builds a Kalman filter step .
943	Linear Gaussian Update .
944	Kalman transition
945	Builds a kalman mean step .
946	Builds a kalman covariance matrix .
947	Builds a Kalman sample step .
948	Propagate mean .
949	Propagate covariance matrix .
950	Backward - pass .
951	Sample n points from the model .
952	Calculate the marginal marginal marginal likelihood .
953	Calculate joint mean .
954	Computes the joint covariance matrix .
955	Convert latent variables to observations .
956	Log normalization .
957	Compute mode
958	Rotate the wave .
959	Sample from 3d .
960	Returns a copy of a function .
961	Returns a copy of dict with the given value .
962	Recursively replace all values in a dict .
963	Get samples from distribution .
964	Return True if x is a namedtuple - like object .
965	Create a base case .
966	Choose a case from an accepted value .
967	Safe sum op .
968	Wrapper for _value_and_gradient .
969	Call function with gradient and gradient .
970	Wrapper for loop_fn .
971	A wrapper for trace_fn .
972	Decorator for innermost setter .
973	Decorator to return innermost results .
974	Enable the store_parameters_in_results parameter .
975	Replace event_shape with the output_shape .
976	Replace event shape in input_tensors .
977	Check that the shape is valid .
978	Returns true if converged and failed .
979	Returns the initial state of the initial state .
980	Line search step .
981	Returns a function that restricts the value at the given position .
982	Update the position of the current position .
983	Checks whether the goal is converged .
984	Broadcasts a value to the target .
985	Compute harmonic number .
986	Create a proposed proposed proposed function .
987	Extract field from kernel results .
988	Calculate exchange states .
989	The variance scaling term .
990	Returns a function that returns the Jacobian of the forward log - detector function .
991	Returns a function that returns a transformation function for the given bijector .
992	Return a function that transforms a state into a list .
993	Performs one step of the kernel .
994	Evaluates the values of a tensor .
995	Compute secant2 .
996	Compute secant2 .
997	Inner update function .
998	Update the value_and_gradients_function .
999	Backet search .
1000	Binary bisect algorithm .
1001	bisect iteration .
1002	Tests if two values are finite .
1003	Checks whether a value is satisfied by the WolfE .
1004	Return the secant between two values .
1005	Create a step size update policy .
1006	Hapfrog integration .
1007	Compute log - acceptance correction .
1008	Performs one step of the Hamiltonian .
1009	Returns the bootstrap results .
1010	Binary resnet .
1011	Resnet block .
1012	Create an encoder for a bag of words .
1013	Create a decoder for a bag of topics .
1014	Create a Dirichlet prior .
1015	Sample a chain .
1016	A deep exponential family .
1017	Creates a deterministic discrete positive definite .
1018	Trainable Gamma .
1019	Load the NIPA paper .
1020	Initialize params .
1021	Returns the kl function for the given types .
1022	Reads an image from disk .
1023	Downloads all sprites .
1024	Create a character .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a sprite dataset .
1028	Validate distributions .
1029	Flatten a list of kernels into a list .
1030	Flatten a list of kernels into a list .
1031	Build fake data .
1032	Count integers .
1033	Find bins in x .
1034	Compute histogram .
1035	Quantiles of x .
1036	Get the ndims of x .
1037	Inserts dimensions into x .
1038	Convert an axis to a list of integers .
1039	Move the dimensions to the flat end .
1040	Sort a tensor .
1041	Create state space model for each component .
1042	Amari alpha .
1043	Kernel divergence .
1044	Jensen - Shannon function .
1045	Calculate the Pearson correlation coefficient .
1046	Squared Shellinger .
1047	Triangular triangular matrix .
1048	T_power .
1049	Logarithm1 .
1050	Jeffreys operator .
1051	Modified GAN .
1052	Siszar function .
1053	Symmetrized CSiszar function .
1054	Determines the monte - c divergence .
1055	Helper for CSISzar_vim .
1056	Assert that ndims are consistent .
1057	Wrapper for batch_gather .
1058	Broadcasts the given event and params .
1059	r Compute expectation importance .
1060	Broadcast an event and samples .
1061	Minimize the given value and gradient .
1062	Generate control inputs .
1063	Updates the inverse Hessian based on previous state .
1064	Compute the inverse Hessian update .
1065	Matrix multiplication .
1066	Tensor product .
1067	Transpose a batch .
1068	Pad x with ndims .
1069	Calculate the sum of the dimensions of x .
1070	Squared square root of x .
1071	Get the common dtype from arg_list .
1072	Minimize the given value and gradient .
1073	Returns the initial state for the optimizer .
1074	Get search direction .
1075	Creates an empty tensor .
1076	Push a queue onto the queue .
1077	Determines if x is greater than 1 .
1078	Determines if x is large enough .
1079	Construct a uniform correlation - like matrix .
1080	Generate weights for a correlation matrix .
1081	Compute Clopper confidence intervals .
1082	Compute the true volumes of a correlation matrix .
1083	Calculate Von Mises cdf series .
1084	Calculate the cumulative cdf for a given concentration .
1085	Perform one step .
1086	Minimize an objective function .
1087	Get the initial arguments for the given objective function .
1088	Find the best value in the population .
1089	Check if the population is converged .
1090	Generate a starting population .
1091	Run binary crossover .
1092	Returns a list of mutants .
1093	Generate random mixing indices .
1094	Ensure tensor_list is a list .
1095	Convert to Tensor .
1096	Soft threshold .
1097	Clip t with respect to the given value .
1098	Builds the input pipeline .
1099	Plot a list of images
1100	Convert a list of productions into a string .
1101	Call the LSTM .
1102	Compute latent code .
1103	Integral operator .
1104	Inverse of the hat integral .
1105	Rank a matrix .
1106	Pin the given matrix .
1107	Lolve a lower upper and rhs .
1108	Llu matrix inverse .
1109	Construct a list of assertions .
1110	Construct assertions for a linear solver .
1111	Determines the sparse block diagonal .
1112	Check if a matrix is valid .
1113	Calculate the gradient of the negative log - likelihood .
1114	r Fit a model .
1115	Generate slices for each block .
1116	Generate a mask .
1117	Creates a dense layer .
1118	Create input order .
1119	Create a list of hidden degrees .
1120	Create a list of masks from a list of degrees .
1121	Create a masked initializer for a mask .
1122	Builds the graph .
1123	Call the autoregressive layer .
1124	Draw samples from the multinomial distribution .
1125	Return a dummy multivariate Multivariate NormalDiagram .
1126	Returns a function that will be called when a TimeSeries is observed .
1127	Convert parameters to weights .
1128	Calculate the depth of a graph .
1129	Find the best order of the tree .
1130	Generates a probability chain rule from a list of namedmakers .
1131	Builds the chain rule from the given model .
1132	Gradient loss function .
1133	Optimal variates .
1134	Returns True if the last day of time is last day of year .
1135	Build matrix of effects to residuals .
1136	Builds a transition matrix .
1137	Build a seasonal transition model .
1138	Builds a seasonal transition model .
1139	Check if observation data is empty .
1140	Validate observation data .
1141	Add a scheduler to the scheduler .
1142	Set the checkpoint to a checkpoint
1143	Set the gradient of the tensor .
1144	Optimize the model .
1145	Set train summary
1146	Set the value summary
1147	Create an optimizer .
1148	Set training data .
1149	Set a summary trigger .
1150	Loads images and labels from training data .
1151	Returns a list of all news20 texts .
1152	Download the w2v file .
1153	Compile the model .
1154	Fit the model using BigDl .
1155	Evaluate the BigDL .
1156	Predict the given data .
1157	Get MNIST dataset .
1158	Preprocess the MNIST dataset .
1159	Return the end trigger
1160	Validate optimizer .
1161	Returns the value of the field
1162	Call a BigDL function
1163	Call a Java function .
1164	Convert an RDD into a Python object .
1165	Convert an object to Java .
1166	Get an activation by name .
1167	Create an array from an ndarray .
1168	Returns the label of the image .
1169	Read from parquet file .
1170	Write a parquet file to disk .
1171	Return an image of the current frame
1172	Convert the local image to a list of images .
1173	Convert the DistributedImageFrame to a label tensor .
1174	Returns a list of predictions for the distributed image .
1175	Predict the data .
1176	Fit the optimizer .
1177	Transform the image .
1178	Save a keras model to disk .
1179	Builds a keras model .
1180	Predict class based on model .
1181	Set the weights .
1182	Returns the weights of the layer
1183	Save tensorflow to file .
1184	Call the training function .
1185	Load a model from aTorch file .
1186	Load Keras model .
1187	Create a new value from a jcriterion
1188	Load weights from a json file .
1189	Loads the IMDB dataset .
1190	Builds a Keras model .
1191	Returns the input shape .
1192	Returns the output shape .
1193	Get the MNIST dataset .
1194	Extract the data from the MM - 1M dataset .
1195	Return the path to the bigDL classpath
1196	Check if the spark version of the Spark version is less than 2 .
1197	Exports tensors from a checkpoint file .
1198	Save tensors to a bigdl file .
1199	Expand a tile .
1200	Precompute a set of symbols .
1201	Simple simple attention .
1202	Attention layer .
1203	Compute the BLEU distance between the reference corpus .
1204	Create a log file
1205	Logs the given utterance .
1206	Calculate summaries for gradients .
1207	Dump weights to disk .
1208	Read data by config .
1209	Train a model from a config file .
1210	Interactively interact with an agent
1211	Convert a list of labels to onehot
1212	Convert probabilities to one - hot labels .
1213	Create a TensorFlow session .
1214	Load the model
1215	Get the momentum variable
1216	Updates the graph variables .
1217	Calculate the F1 score
1218	Process a word .
1219	Create a stacked convolution layer .
1220	Creates a Bi - Linear Network .
1221	Construct a stacked RNN layer .
1222	Wrapper for stacked highway convolution .
1223	Create an embedding layer .
1224	Create a cudnn gru .
1225	Cudnn compatibility .
1226	Cudnn LSTM .
1227	Compatible LSTM .
1228	Cudnn_gru .
1229	Cudnn - LSTM implementation .
1230	Wrapper for cudnn_gru .
1231	Dropout layer .
1232	Builds the LSTM network .
1233	Builds word CNN .
1234	Build basic network .
1235	Trains the model on a batch .
1236	Predict on a batch .
1237	Convert a list of words into a numpy array .
1238	Convert a list of tags to a numpy array .
1239	Compute the BLEU measure .
1240	Verify that a URL is valid .
1241	Extract certificates from a string .
1242	Verify certificate chains .
1243	Verify the signature of the request
1244	Verify certificate chain .
1245	Return JSON representation of all controls .
1246	Returns a list of ms_bot controls .
1247	Return a list of telegram controls .
1248	Return a list of Alexa controls .
1249	Entry point for the DeepPavlov settings directory .
1250	Wraps a function with a default context .
1251	Decorator for keras backend .
1252	Calculate accuracy .
1253	Round accuracy .
1254	Initializer for pre - trained model .
1255	Read data from file .
1256	Create a HelloBot Agent .
1257	Convert x to one - hot vector .
1258	Pretty - print metrics .
1259	Populates the settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Creates a new training op .
1263	Search for a word .
1264	Make the default operation costs .
1265	Start the timer .
1266	Handle a request .
1267	Runs the agent .
1268	Generate response .
1269	Process intent request
1270	Handles launch request
1271	Handle an unsupported request .
1272	Pretty print this struct
1273	Calculates the ELMo loss from a list of losses .
1274	Build a chainer .
1275	Interactively interact with a model .
1276	Predict on a stream of inputs .
1277	Read in file .
1278	Return a function object from a module name .
1279	Decorator to register a metric .
1280	Look up a metric by name .
1281	Return decay type from string .
1282	Returns the best value for the best value
1283	Encodes a list of tokens .
1284	Read the requirements . txt file .
1285	Compute the log loss .
1286	Exports a weight file to a hub .
1287	Print details of an item .
1288	Create an Ecommerce agent
1289	Entry point for running bots .
1290	Download a file from a URL .
1291	Untar a file
1292	Download url to cache_path .
1293	Recursively updates a dictionary .
1294	Set the MD5 part of a URL .
1295	Set a query parameter .
1296	Generate alexa response
1297	Return JSON representation of control .
1298	Returns a dict containing the actions for this card
1299	Return JSON representation of the control .
1300	Returns a ms_bot message for this message
1301	Calculates the F1 for the squad v2 .
1302	Calculate the recall at k_true
1303	r Check if GPU is available
1304	Recursively parse a config property
1305	Parses the given config file and returns a dictionary .
1306	Expand a path .
1307	Create a Component from a dictionary .
1308	Main thread .
1309	Delete a conversation .
1310	Refresh valid certificates
1311	Verify a request .
1312	Handle a request .
1313	Return a class from a string .
1314	Register a model class .
1315	Get a model by name .
1316	Get the path to the glM regularization path for a model
1317	Create a new GLM model from a model .
1318	Create an H2OCluster from a list of keys .
1319	Shutdown the H2O instance .
1320	Check if the server is running
1321	Show the status of the H2O cluster .
1322	List all jobs
1323	Lists all available time zones .
1324	Fill this object from another h2ocluster .
1325	The metalearner parameters .
1326	Runs the test_func with the given error .
1327	Retrieve the summary of a frame
1328	Delete a frame
1329	Returns a list of model builders .
1330	Validate model parameters
1331	Compute the metrics for a model
1332	Returns the current model metrics .
1333	Delete a model by key .
1334	Return a table of data
1335	Run EC2 instances
1336	Terminate instances .
1337	Stop instances .
1338	Start the specified instances .
1339	Reboot one or more instances .
1340	Wait for SSH to be ready .
1341	Returns the full name of a method .
1342	Find a function from a frame .
1343	Get the signature of a function .
1344	Wrap a string into a single space .
1345	Wait for the job to finish .
1346	Trains the model .
1347	Train the model .
1348	Returns a dictionary of parameters .
1349	Called when a signal is finished .
1350	Wipe the output directory .
1351	Remove RSandbox directory
1352	Scrape the port from stdout
1353	Scrape cloud size from stdout
1354	Stop the JVM .
1355	Stop all nodes
1356	Returns the client s IP address
1357	Get the connection s port
1358	Calculate ROC scores .
1359	Determine the size of the model
1360	H2O mean absolute error .
1361	H2O mean squared error .
1362	Median absolute error .
1363	Compute the explained variance score .
1364	Assert that var is a valid type
1365	Assert that v matches a regex
1366	Fail if v is satisfied by condition .
1367	Retrieves the arguments for the assert function .
1368	Check if var is a valid type
1369	Returns a string representation of a type
1370	Generate the source code for lambda functions .
1371	Check if the variable is valid .
1372	Checks if the variable is an enum type
1373	Returns the current configuration .
1374	Read config files .
1375	Generate log files .
1376	Execute the model .
1377	Store the model progress .
1378	Recalculate model parameters .
1379	Estimate completion time .
1380	Guess the next poll interval .
1381	Compute the progress at the given time .
1382	Calculate the time at the given point
1383	Writes text to stdout .
1384	Compute the size of the widgets .
1385	Get the size of the terminal
1386	Set encoding .
1387	Compute the encoder for the given frame .
1388	Get a frame from cache
1389	Refresh the screen .
1390	Returns the type of a column
1391	Return a list of columns by column type .
1392	Displays a summary of the table .
1393	Describe this frame
1394	Return the first rows of the table .
1395	Multiply the current frame
1396	Returns a list of levels
1397	return the number of levels
1398	Set the level of this Frame .
1399	Set the domain levels
1400	Rename columns .
1401	Set the column names .
1402	Set column name .
1403	Returns True if the row is in the given item .
1404	Modulo k - fold column .
1405	Stratified k - fold column .
1406	Print the h2oFrame structure
1407	Return the table as a pandas DataFrame .
1408	Pop the column at the given position .
1409	Return the quantile of this H2OFrame .
1410	Concatenate multiple frames .
1411	Bind the current H2OFrame to the given dataframe .
1412	Return a new H2OFrame with row - bound data .
1413	Splits a frame using the given ratios .
1414	Create a group by column .
1415	Fill missing values .
1416	Impute values for a column .
1417	Merge two columns .
1418	Return the current value of the current frame .
1419	Insert missing values .
1420	Compute the variance of the DataFrame .
1421	Correlation function .
1422	Distance between two objects .
1423	Return the result as a factor .
1424	Return a new H2OFrame with the given pattern .
1425	Count the number of rows matched by pattern .
1426	Return a subset of the DataFrame .
1427	Return a new H2OFrame with rows removed .
1428	Return the entropy of the table .
1429	Return the number of substrings for the given path .
1430	Compute the table in the table .
1431	Make a histogram plot .
1432	Calculate the index of the words in the DataFrame .
1433	Replace occurrences of pattern .
1434	Toupper .
1435	Grep the contents of this DataFrame .
1436	Return a new H2OFrame with rows removed .
1437	Compute the difference between two frames .
1438	Return a new H2OFrame containing the values in this column .
1439	Returns a new H2OFrame containing the minimum value of this column .
1440	Run this H2OFrame .
1441	Return a stratified set of rows .
1442	Cut the current frame by breaks .
1443	Return the maximum value of the DataFrame .
1444	Applies a function to the DataFrame .
1445	Parse text .
1446	Parse a file .
1447	Move the cursor to the given position .
1448	Parse the parser .
1449	Returns the size of the cells
1450	The centers of the model .
1451	Returns a list of lists of the centers std .
1452	Connect to a server
1453	Send an API request to the given endpoint
1454	Check version of h2o .
1455	Load a module from a path .
1456	Upload a file to a DataFrame .
1457	Imports a DataFrame into a DataFrame .
1458	Imports a Hive table into a table .
1459	Imports a SQL table
1460	Import a SQL table
1461	Parse an H2OFrame into a H2OFrame object .
1462	Returns a deep copy of the data
1463	Returns the model specified by model_id .
1464	Get a grid by ID
1465	Get a frame by ID
1466	Download the model to a POJ file .
1467	Downloads the data to a CSV file .
1468	Download all H2O logs .
1469	Exports a frame
1470	Convert a Pandas DataFrame into a list .
1471	Show a demo function
1472	Loads a dataset from h2o_data
1473	Calculates the model metrics .
1474	Upload a key to a file .
1475	Upload a custom metric .
1476	Check that the frame_id is valid .
1477	Returns a human readable string representation of a given size .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Predict using mojo_predict_csv
1481	Predict a csv from a csv file
1482	Mark a function as deprecated .
1483	Wait for the job to finish .
1484	Calculate the deepfeatures of each model
1485	Prints a table summary
1486	Show the hyperparameters
1487	Returns a list of hyperparameters for the given model id
1488	Returns a dictionary of hyperparameters .
1489	Gets a grid from the grid
1490	Calculate the F1 for each model .
1491	Returns the varimp data
1492	Projects the model to a frame
1493	Plot the model
1494	Translates CamelCase name to CamelCase
1495	Remove indentation .
1496	Extracts the run into a dictionary
1497	Main entry point for extractGLRM runtime .
1498	Closes the session .
1499	Return a unique session ID .
1500	Start logging .
1501	Convert the payload to a dictionary .
1502	Prepare a file payload
1503	Log a start transaction .
1504	Log the end of an HTTP transaction .
1505	Log a message to the logger .
1506	Process HTTP response .
1507	Print msg to stdout .
1508	Gets the AutoML for a project .
1509	Downloads a POJO from the leader
1510	Download a mojo .
1511	Fit the model
1512	Scale the model .
1513	Inverse transform .
1514	Extracts true string from string
1515	Find node_name
1516	Find git hash branch
1517	Find the build timeout
1518	find a build failure
1519	find build_id
1520	Extract job build url from url string .
1521	Grab the java message
1522	Save the build dictionary
1523	Update the global summary file
1524	Write the content of a file
1525	Write a Java message
1526	Load Java messages to ignore .
1527	Normalize an enum constant .
1528	Find synonyms for a word
1529	Poll the status of the job .
1530	Save the Assembly to a pojo .
1531	Fit the model to a frame
1532	Calculate the percentile of a sorted list .
1533	Returns the default parameters
1534	returns the actual parameters
1535	Run deep features on the model
1536	Returns the scoring history for this model
1537	Prints the model details .
1538	Returns the variable importances
1539	Calculate the residuals of the model .
1540	Returns the coefficients of the model .
1541	Downloads the model to the given path .
1542	Downloads a MOJO from the model
1543	Save the current model details to disk .
1544	Check that the targets are correct .
1545	Returns list of cross validation models
1546	Example of G2O .
1547	Do deep learning
1548	Runs a GSSHA model
1549	Wait for a keypress .
1550	Return the cell as a pandas DataFrame .
1551	Print the table
1552	Start a Java JVM .
1553	Tries to find a jar in the local server
1554	Yields paths to jar files .
1555	Return the hit ratio table .
1556	Create a csv dict writer
1557	Convert a package URI to a python path .
1558	Convert a directory to a URI .
1559	Parse a list of functions .
1560	Generate documentation for a module .
1561	Discover all modules in the repository .
1562	Write API documentation to outdir .
1563	Write the list of modules to outdir .
1564	Returns list of cell values
1565	Loads the JSON dictionary
1566	add a new message to the list
1567	Updates the message dictionary
1568	Extracts a message from a file
1569	Save the dictionary
1570	print a dictionary to stdout
1571	Parse arguments .
1572	Print usage .
1573	Locate all python files in a directory .
1574	Find the spell in a file
1575	Main entry point .
1576	Transform this pipeline into a new H2OFrame .
1577	function to summarize failed runs
1578	Extract print save in the report files
1579	Plot the ROC curve .
1580	Compute confusion matrix .
1581	Check if a DeepWater model is available
1582	Trim data back to oldest
1583	Return a dictionary of all registered endpoint groups .
1584	Updates the site s domain .
1585	Returns a json string with default data .
1586	Comment a user
1587	Get login and password .
1588	Likes a user .
1589	Like movies with the given hashtag .
1590	Check if user is not a bot
1591	Read a list of strings from a file
1592	Schedules the message for this queue .
1593	Defer to defer the message .
1594	Download an ARMP server .
1595	Guess service information from a specification path .
1596	Updates a power shell command .
1597	Delete an application by ID .
1598	Create a new ApplicationDefinition by ID .
1599	Returns the URI for the request .
1600	Returns a connection to the request .
1601	Perform an HTTP request .
1602	Execute a list of script actions .
1603	Check if a front door name is available .
1604	Purge a deleted vault .
1605	Returns the authorization server .
1606	Validate the request URI .
1607	Load the azure CLI profile
1608	Get credentials for Azure CLI .
1609	Resolve a query .
1610	Checks if a resource is available for a given location .
1611	Open a new HTTP request .
1612	Set the timeout for this request .
1613	Sets a request header .
1614	Returns the response headers .
1615	Send a request to the client .
1616	The status of the request .
1617	Returns the status text of the request .
1618	Returns the response body of the request .
1619	Set the client certificate .
1620	Send a PUT request to the server .
1621	Put a request header .
1622	Send the request body .
1623	Return a _Response object .
1624	Get a human readable id from an id name .
1625	Get the serialization name for an element .
1626	Verify a face to a person .
1627	Add a new job .
1628	Extract properties from an XML node .
1629	Get the children of a node .
1630	Find the namespaces of a child of a child .
1631	Convert an XML string to a ServiceBusNamespace object .
1632	Return a ServiceBusRegion object from an XML string .
1633	Convert an XML string to a NamespaceResponse object .
1634	Convert xml string to Metrics object
1635	Replace the runbook content .
1636	List recommendations .
1637	Updates a KB .
1638	Gets the member groups for a user .
1639	Build a package from a PR number .
1640	Imports a list of files into a resource group .
1641	Publish a runbook .
1642	Renew the lock .
1643	Replace a word .
1644	Add a new value .
1645	Returns the properties of a storage account .
1646	Returns the storage account keys for the specified service .
1647	Regenerates the keys for a storage account .
1648	Creates a new storage account .
1649	Updates an existing storage account .
1650	Deletes a storage account .
1651	Checks if a storage account name is available .
1652	Gets the properties of a hosted service .
1653	Creates a new hosted service .
1654	Deletes a hosted service .
1655	Creates a new deployment .
1656	Deletes a deployment .
1657	Swaps an existing deployed deployment .
1658	Changes the configuration of a service .
1659	Updates the status of a deployment .
1660	Upgrades an existing deployment .
1661	Recursively walk over an upgrade domain .
1662	Reboot a role instance .
1663	Deletes the specified role instances from a deployment .
1664	Checks if a hosted service is available .
1665	Lists the certificates for a service .
1666	Returns the certificate for a service .
1667	Adds a new service certificate .
1668	Deletes a service certificate .
1669	Gets a management certificate .
1670	Adds a new management certificate to the subscription .
1671	Deletes a management certificate .
1672	Gets the properties of an affinity group .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	Lists all subscriptions in the account .
1676	Creates a reserved IP address .
1677	Deletes a reserved ip address .
1678	Associates a virtual IP address to a service .
1679	Disassociate a reserved ip address .
1680	Gets a reserved IP address .
1681	Gets the specified role .
1682	Creates a virtual machine deployment .
1683	Adds a role to a service .
1684	Updates a role .
1685	Deletes a role .
1686	Captures a role .
1687	Starts a role in a service .
1688	Starts a list of roles for a service .
1689	Restart a role .
1690	Shuts down a role .
1691	Shuts down the specified roles .
1692	Adds a dns server .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	Lists the resource extensions for the given extension .
1696	Replicates a VM image .
1697	Replicate a VM image .
1698	Shares a VM image .
1699	Creates a VM image .
1700	Deletes a VM image .
1701	Returns a list of VM images .
1702	Updates a VM image .
1703	Adds an OS image to this project .
1704	Updates an OS image .
1705	Updates an OS image from an image reference .
1706	Deletes an image .
1707	Returns the data virtual disk for a given service .
1708	Adds a new data disk to the account .
1709	Updates a data disk .
1710	Deletes a data disk .
1711	Adds a new disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Returns a summary of the policy states for the specified management group .
1715	Builds the receiver .
1716	Fetch next message .
1717	Renew the lock .
1718	Create a virtual machine scale .
1719	Convert to a single placement group .
1720	Send a screen text request .
1721	Create a new key .
1722	Imports a new key .
1723	Updates a key .
1724	Set a secret .
1725	Set a certificate .
1726	Create a SharedAccessClient from a connection string .
1727	Get a SubscriptionClient from a topic .
1728	Returns a list of all subscribed subscriptions for a given topic .
1729	Coroutine to send messages .
1730	Returns a Sender instance for this entity .
1731	Get a Receiver instance .
1732	Create a new deadletter receiver .
1733	Parse the response for an async operation .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Gets the status of an operation .
1738	Updates the management headers .
1739	Validate the build package .
1740	Get a list of certificates from a vault .
1741	Gets the list of regions for this account .
1742	Lists namespaces .
1743	Gets a namespace by its name .
1744	Creates a new namespace .
1745	Deletes a namespace .
1746	Checks if a namespace is available .
1747	Lists a list of topics .
1748	Lists all the notifications for the specified name .
1749	Lists all the details of a relay .
1750	Gets metrics rollups for a given queue .
1751	Gets the metrics rollups for a given topic .
1752	Gets the metrics rollups for a given metric .
1753	Gets the metrics rollups for a given metric .
1754	Create a new environment .
1755	Create a new virtualenv with the given packages .
1756	Creates a new server .
1757	Sets the admin password for a server .
1758	Lists the server quotas for a server .
1759	Gets the event logs for a server .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	Lists all firewall rules for a server .
1764	Lists the service level objective for a server .
1765	Creates a new database .
1766	Updates a database .
1767	Delete a database .
1768	Lists databases by name .
1769	List the domains for a domain .
1770	Close the connection .
1771	Close the receiver .
1772	Get the current session state .
1773	Set session state .
1774	Receive deferred messages .
1775	Merge one or more sources .
1776	Validate the challenge .
1777	Purge a table .
1778	Return errors .
1779	Creates a new queue .
1780	Deletes a queue .
1781	Returns the details of a queue .
1782	Creates a new topic .
1783	Returns the details of a topic .
1784	Creates a new rule .
1785	Returns the specified rule .
1786	Lists the rules for a topic .
1787	Creates a new subscription .
1788	Gets a specific subscription .
1789	Lists the subscriptions for a topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a queue message .
1794	Receive a queue
1795	Receive a message from a topic
1796	Creates an event hub .
1797	Updates an event hub .
1798	Returns an event hub object .
1799	Send an event to a hub .
1800	Add the content - length header to the request .
1801	Build authorization string .
1802	Check if token is expired
1803	Get a new access token
1804	Updates the path and query parameters .
1805	Reset the service principal profile .
1806	Deletes the lock .
1807	Unlocks the lock .
1808	Renews the lock .
1809	Adds the headers to the request .
1810	Return the batch body of this instance .
1811	Get the health of a cluster .
1812	Gets the cluster health based on the specified policy .
1813	Unprovision an application type .
1814	Retrieve a list of repairs .
1815	Submit a property batch .
1816	Common error handler .
1817	Start a web site trace operation .
1818	List changes between a slot and another slot .
1819	Swap a slot .
1820	Get events by type .
1821	Add a new face from a large face list .
1822	Called when a request is redirected .
1823	Creates a new migration .
1824	Publish events to a topic .
1825	Move resources from a resource group to another resource group .
1826	Set the profile
1827	List query results for a given management group .
1828	Create a new queue .
1829	Deletes a queue .
1830	Create a new topic .
1831	Deletes a topic .
1832	Create a new subscription .
1833	Parse a connection string .
1834	Get the properties of the queue .
1835	Check if the lock is expired .
1836	Create a session .
1837	Creates a new subscription .
1838	Exports request rate by interval .
1839	Process results from a queue .
1840	Bulk add tasks to the results queue .
1841	Main thread for the task collection .
1842	Builds a config dictionary from a given dictionary .
1843	Reset a user s password .
1844	Start an environment .
1845	Create a message from a response
1846	Convert an etree element into a Rule object .
1847	Convert an etree element into a Queue object .
1848	Convert an ETree element to a Topic object .
1849	Convert an etree element to a Subscription object .
1850	Creates a new certificate .
1851	Deletes a certificate .
1852	Get a client from the CLI profile .
1853	Create a new client from a dictionary .
1854	Get a client from an auth file .
1855	Parse an enum results list .
1856	Extract properties from an XML element .
1857	Delete a certificate .
1858	Returns a QueueClient .
1859	List all queues .
1860	Get a topic from the service .
1861	List all topics .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Gets a single site .
1865	Create a new Site .
1866	Delete a website .
1867	Updates a website .
1868	Restart a website .
1869	Returns a list of historical usage metrics for the given metrics .
1870	Returns a list of MetricDefinitions for the given websocket and website .
1871	Returns the XML for the publish profile .
1872	Gets the publish profile for a particular websocket .
1873	Update quarantine policies .
1874	Creates a new cloud service .
1875	Checks the availability of a job collection .
1876	Gets a job collection .
1877	Complete a backup operation .
1878	Cancel scheduled messages .
1879	Send pending messages .
1880	Coroutine to reconnect .
1881	Gets a certificate from a publish settings file .
1882	Restore cached cookies .
1883	Calculate terminal width .
1884	Get the cut prefix from a string .
1885	Print message inplace .
1886	Format a file size .
1887	Format elapsed time .
1888	Create a new status line .
1889	Print a progress bar .
1890	Generate a list of segment numbers .
1891	Iterate over segments of this segment
1892	Wait for the given time .
1893	Add a segment to the queue .
1894	Queue a value into the queue .
1895	Get request parameters
1896	Extract the nonce from the last redirect URL .
1897	Find vpid from url
1898	Parse a JSON string and validate it .
1899	Parses an XML string into a tree .
1900	Parse a query string .
1901	Search for a key in a dictionary
1902	Spawns the command .
1903	Iterate over HTML tags .
1904	Parses a manifest and returns a dictionary of dictionaries
1905	Determine the JSON encoding of a sample .
1906	Parse JSON response
1907	Parse an XML response
1908	Parse cookies .
1909	Parse headers .
1910	Parse cookies .
1911	Get the message .
1912	Create a new LogRecord .
1913	Login to LiveEdu account
1914	Load a support plugin .
1915	Updates the given URL with the given querySD .
1916	Yield chunks of file .
1917	Yield all required dependencies for a plugin
1918	Check if file output exists .
1919	Create streamlink output .
1920	Create an HTTP server
1921	Yield HTTP requests .
1922	Output stream to HTTP .
1923	Pass a stream to a stream
1924	Open a stream and return the stream .
1925	Write a stream to a stream
1926	Read data from a stream .
1927	Process a stream
1928	Fetch streams from plugin
1929	Retry the given plugin if available .
1930	Resolve stream name to stream name .
1931	Format a list of streams .
1932	Process a URL .
1933	Print all loaded plugins
1934	Authenticate with Twitch .
1935	Load plugins from directories .
1936	Parse command line arguments .
1937	Setup the console
1938	Setup http session
1939	Load plugins .
1940	Setup streamlink options .
1941	Log current versions .
1942	Get stream_id from text .
1943	Extracts the content from the given text .
1944	Set an option .
1945	Get an option from the server .
1946	Set a plugin option
1947	Get an option from a plugin
1948	Resolve a URL .
1949	Load all plugins
1950	Convert a number of hours minutes to an integer .
1951	Validate that the input value starts with the given string .
1952	Validate that a field ends with a string .
1953	Validate that a string contains a string .
1954	Get an attribute from a value .
1955	Apply a function to a collection of values .
1956	Apply a function to each element of a dictionary .
1957	Validate a URL .
1958	Convert an element to an element .
1959	A wrapper for findall .
1960	Find the player s url .
1961	Load a M3U8 string .
1962	Return the name of a supported player .
1963	Login to your steam
1964	Extract stream_id from HTML .
1965	Extract stream info from HTML .
1966	Login with username and password .
1967	Map a function to a key .
1968	Make an API call to the given entrypoint .
1969	Create a new session .
1970	Get information about a media .
1971	Create a smartyroll API
1972	Compress a string
1973	Formats an output character .
1974	Convert a string to a string .
1975	Read n bytes .
1976	Return the value of this code .
1977	Return the explanation for this exception .
1978	Set the decoding table .
1979	Set the length of the table
1980	Prints a sequence of symbols .
1981	Read a tuple from the stream .
1982	Return an explanation for the given index .
1983	Return the value at the given index .
1984	Returns the span for the given index
1985	Return the value for the given index .
1986	Return the mnemonic for the given index .
1987	Return the mnemonic for the given index .
1988	Parse the action table
1989	Evaluate action
1990	Make a hex string from the current position
1991	Process the stream .
1992	Read metablock length
1993	Read uncompressed data
1994	Read block types .
1995	Multiply a list of values .
1996	Read a prefix array .
1997	Convert a monochrome to a monochrome .
1998	Calculate a polychrome plot from a list of colors .
1999	Convert a DataFrame into an Arrow table .
2000	Monkey patch a function .
2001	Add virtual columns to the model .
2002	Add virtual columns to the model
2003	Return a graphviz representation of the graph .
2004	Return a list of values for each column
2005	Applies a mapper to the table
2006	Return a vaex application
2007	Open a list of files .
2008	Return a dictionary of values from a SAMP .
2009	Create a Dataset from an astropy table .
2010	Create a DataFrame from a list of arrays .
2011	Create an array from a list of scalars .
2012	Convert a pandas DataFrame into a DataFrame
2013	Read data from a CSV file .
2014	Create a new server
2015	Eldovich data .
2016	Concatenate multiple DFS into one .
2017	Create a virtual range
2018	Open a dataset
2019	Evaluate an expression .
2020	Decorator for delayed calls
2021	Returns a set of columns that depend on the current selection
2022	Run a task .
2023	Sorts the layout
2024	Get info from a file .
2025	Clear the background
2026	Wait for the last plot to finish
2027	Opens a document
2028	A context manager for writing to a file .
2029	Split arrays into masks and combine them together .
2030	Apply an expression to the RDD .
2031	Compute the first occurrence of an expression .
2032	Calculate the mean of an expression .
2033	Calculate the sum of an expression .
2034	Calculate the standard deviation of an expression .
2035	Calculate the covariance matrix .
2036	Calculate the minimum value of an expression .
2037	Calculate the minimum value of an expression .
2038	Calculate the median percentile of the histogram .
2039	Plot a bar chart
2040	Return the healpix count of healpix pixels .
2041	Plot a healpix map
2042	Plot a 3D plot
2043	Return the dtype of an expression
2044	Get the private directory
2045	Get the current state
2046	Set the state of the table .
2047	Remove all virtual meta data
2048	Write virtual meta data to disk .
2049	Write metadata to disk .
2050	Return a list of subspaces .
2051	Set a variable .
2052	Evaluates a variable
2053	Evaluate a mask within a block
2054	Convert to dict
2055	Return a copy of this DataFrame .
2056	Convert to pandas DataFrame
2057	Convert the table to an Arrow table
2058	Return an astropy . table
2059	Add a column to the DataFrame .
2060	Rename a column
2061	Convert virtual columns to polar coordinates .
2062	Add virtual columns to spherical coordinates
2063	Convert virtual columns to polar coordinates .
2064	Add virtual columns to cartesian coordinates .
2065	Add virtual columns to the matrix .
2066	Add virtual columns to cartesian coordinates .
2067	Add virtual columns to spherical coordinates .
2068	Add a virtual column .
2069	Delete a virtual column
2070	Add a variable to the table
2071	Delete a variable
2072	Return the last n rows
2073	Pretty print the table .
2074	Describe the table .
2075	Concatenates two items
2076	Set current row
2077	Return a list of column names .
2078	Trim the columns of the DataFrame .
2079	Returns a copy of the DataFrame .
2080	Extracts all elements from the collection .
2081	Returns a copy of the histogram .
2082	Split an array by a given fraction .
2083	Split the sequence into chunks .
2084	Sort the values according to the given criterion .
2085	Multiply a virtual column .
2086	Undo a selection
2087	Go toredo
2088	Checks if the current selection can beredo
2089	Select a subset of the current element .
2090	Select non missing values .
2091	Return a copy of the table with rows removed .
2092	Selects a rectangle .
2093	Select a bounding box .
2094	Select a circle from the given coordinates .
2095	Select an ellipse .
2096	Selects a linear selection .
2097	Inverse of the current selection .
2098	Set the current selection
2099	Create a new selection
2100	Find a valid name for the given initial_name .
2101	Return a list of all the nodes of the model
2102	Return a graphviz representation of the DataFrame .
2103	Categorize a column .
2104	Encode a column in a DataFrame .
2105	Return the data as a DataFrame .
2106	Returns the length of the array
2107	Stack another DataFrames with the same length .
2108	Concatenate two DataFrames .
2109	Export the table to a HDF5 file .
2110	Add a column to the DataFrame .
2111	Monkey patch a DataFrame .
2112	Register a function .
2113	Fill missing values .
2114	Calculate the dayofweek of x
2115	Return the dayofyear of x
2116	Return True if x is a leap year .
2117	Return the year of the year
2118	Calculate the day of the year
2119	Return the month name of a date .
2120	Calculate the day of x
2121	Return the day name of a date .
2122	Date of week of year
2123	Calculate the datetime from x .
2124	Calculate the minute of a series
2125	Return the second value of x .
2126	Convert a string to a column .
2127	Concatenate two strings .
2128	Check if x contains a pattern .
2129	Return the number of occurrences of a pattern .
2130	Find the first occurrence of sub in x .
2131	Return the column at x position x .
2132	Return the index of substring in x .
2133	Convert string to lowercase
2134	Return a copy of x .
2135	Pad an array with padding characters .
2136	Repeatedly repeat a number of times .
2137	Find the first occurrence of substring in x .
2138	Return the index of substring in x .
2139	Return a new column aligned with the given width .
2140	Return a copy of x .
2141	Slice a sequence .
2142	Strip whitespace from an array .
2143	Construct a ColumnStringArrow from a string .
2144	Convert a string to a column .
2145	Get the autotype of an array
2146	Convert this object into a numpy . recarray
2147	Write properties to file .
2148	Write a comment .
2149	Write a property value pair .
2150	Iterate properties from a file - like object .
2151	Yield newlines from a file - like object .
2152	Show installed versions .
2153	Ensure keyword argument is deprecated .
2154	Set the FFT library
2155	Use librosa to track beats
2156	Adjust the pitch - corrected pitch
2157	Convert frames to samples
2158	Convert frames to frames
2159	Convert a list of frames to frames
2160	Convert a MIDI number to a string .
2161	Convert HZ to mel energy
2162	Convert melels to Hz
2163	Return the frequency spectrum .
2164	Calculate the frequency of the CQt frequency .
2165	Generate mel frequencies
2166	A weighting .
2167	Compute time - like times - likelihood .
2168	Generate the samples of the given data .
2169	Calculate the frequency of a frequency series .
2170	Disposition of CQT
2171	Calculate the ICQT .
2172	Compute the FFT filter using CQ .
2173	Trim the last n_bins from a CQT response
2174	Compute the CQT response .
2175	Calculateearly downsample count .
2176	Downsample a signal
2177	Calculate the concatenation cost .
2178	Backtracking .
2179	Viterbi implementation
2180	Discriminative model .
2181	Generate a uniform transition matrix
2182	Generate a transition loop
2183	Generate a transition matrix
2184	Compute the transition matrix for a given window .
2185	Calculate the energy of the given onset envelope .
2186	Compute the effective onset strength .
2187	Calculate the onset track of an event
2188	Calculate onset strength .
2189	r Write times to a CSV file .
2190	Write a WAV file .
2191	Generate a colormap from an array
2192	Plot a waveplot of audio samples .
2193	Set current image
2194	Generate the mesh coordinates for the given axes .
2195	Checks that the given argument is a valid Axes object .
2196	Helper function to scale axes
2197	Calculate the FFT frequency basis .
2198	calculate mel_hz
2199	Calculate the frequency of a CQt frequency .
2200	Calculate chromosome coordinates .
2201	Calculate a time series of frames .
2202	Estimate the tuning of a Piptrack .
2203	Calculate the Piptrack of a TimeSeries
2204	Compute the inverse Fourier transform .
2205	Compute the harmonic Fourier transform .
2206	Perform a percuss - Fourier transform
2207	Compute the Fourier transform of a signal .
2208	Calculate the pitch shift .
2209	Reimplement a set of intervals .
2210	Return True if signal is non - zero .
2211	Trim a signal from a signal
2212	Split a signal into samples .
2213	Generate a phase - corrected phase vector .
2214	Convert an amplitude matrix to the database .
2215	Compute the spectrogram .
2216	Takes an input file and writes beats to a CSV file
2217	Decompose a matrix .
2218	NNN - filter .
2219	Helper function to calculate the neighbors of a network .
2220	Convenience constructor for the Mel - Mel model .
2221	Generate a chroma spectrum .
2222	Convert a window to a float .
2223	r Calculate a constant frequency .
2224	r Calculate constant frequency lengths for constant frequency .
2225	Convert a CQ file to chroma
2226	Calculate the bandwidth of a window .
2227	Return a nxarray of nx
2228	r Multirate Filterbank .
2229	r Calculate the center frequencies and sample rates .
2230	Apply a window - fill window to x .
2231	Calculate the sumsquare for a window .
2232	Diagonal filter .
2233	Calculate the spectral centroid of a signal .
2234	Spectral rolloff .
2235	Spectral flatness .
2236	Fit a spectrogram to a spectrogram
2237	Average zero crossing rate .
2238	Calculate the Spectrogram of a chroma signal .
2239	r Compute chroma using CQT .
2240	Melspectrogram
2241	Computes the Jaccard distance between two intervals .
2242	Given a query and a list of intervals find the best match .
2243	Matches two intervals .
2244	Matches two intervals .
2245	Match events .
2246	Estimate salience of a signal .
2247	Calculate the harmonics .
2248	Calculate the harmonics at a given frequency range .
2249	Calculate the spherical harmonic harmonics .
2250	Load an audio file
2251	Load an audio file
2252	Convert audio to mono .
2253	Resample an audio signal
2254	Calculate the autocorrelation of an array .
2255	Lpc .
2256	Calculate clicks .
2257	Generate a tone
2258	Calculate the chirp .
2259	returns a set of files from a directory
2260	Stretch audio file
2261	Process command line arguments .
2262	Compute the harmonicss of an input file
2263	r Compute the beat track track .
2264	Computes the beats for the given onset envelope .
2265	Compute the beat local score .
2266	Determine the distance between the beats of a beat .
2267	Find the last beat
2268	Convert a recurrence matrix into a lag matrix .
2269	Convert lag matrix to recurrence matrix .
2270	Decorator for timelag filter .
2271	Segment data into subsegments .
2272	Agglomerative clustering .
2273	Calculate the path_enhance of a graph .
2274	Detect onsets
2275	Generate a frame from Y
2276	Validate audio data .
2277	Convert x to int .
2278	Pads data to specified size .
2279	Sort an array .
2280	Normalize an S .
2281	Local max operator .
2282	Calculate peak pick
2283	Parses rows into sparse matrix .
2284	Roll x by shift .
2285	Convert x to numpy array .
2286	Convert an index to a slice .
2287	Synchronize data with the given indices .
2288	Perform a softmask of data .
2289	Tiny operator .
2290	Convert frames to a video file
2291	Read from the stream .
2292	Return the image of the video .
2293	Convert image to frames
2294	Call function with progress bar .
2295	Generates a progress bar from a list of tasks .
2296	Flip an image .
2297	Rotate an image .
2298	Clip a list of bounding boxes .
2299	Scales bounding boxes .
2300	Crop an image into a list of bounding boxes .
2301	Impads an image .
2302	Impads an image to multiple images
2303	Scale the size of the image .
2304	Resize an image
2305	Resize an image .
2306	Resize an image .
2307	Register a file handler .
2308	Convert an integer to a priority value
2309	De - quantize an array .
2310	Display an image
2311	Visualize the given boxes .
2312	Read a flow file .
2313	Write flow to file .
2314	Determine the flow of the given data .
2315	Loads a state dict from a module .
2316	Load a model from file .
2317	Convert a state dictionary to cpu .
2318	Save model to file .
2319	Initialize optimizer .
2320	Initialize the logger
2321	Returns the current learning rate .
2322	Register a hook .
2323	Run the runner .
2324	Register training hooks .
2325	Convert video to out_file
2326	Resize a video
2327	Cut a video .
2328	Concatenate a list of video files .
2329	Read a file from a file
2330	Read a file from a file
2331	3x3 convolution with padding
2332	Create an object from a dictionary .
2333	Read image and return numpy array
2334	Create an image from a byte string .
2335	Write image to file .
2336	Convert a BGR image to a gray scale .
2337	Convert image to bgr color
2338	Cast an iterable .
2339	Check if a sequence is of the expected type .
2340	Slice a list into a list
2341	Decorator to check if prerequisites are satisfied .
2342	Calculate the average values .
2343	Convert input to a list of devices .
2344	Return the value of a color .
2345	Returns the time of the given timer .
2346	Starts the timer .
2347	Returns the number of seconds since start
2348	Return the number of seconds since last check .
2349	Display a flow
2350	Convert a flow to RGB .
2351	Generate a color wheel .
2352	Compute the accuracy
2353	Scatter a series of targets .
2354	Wrapper for scatter .
2355	Fetches and returns a Response object .
2356	Convert to JSON .
2357	Returns text as a string .
2358	Handle a callback .
2359	Send multiple requests .
2360	Create a new Request object .
2361	Start the master
2362	Normalize an Ansible task .
2363	Parses YAML line numbers into a dictionary .
2364	Returns the name of the wheel distribution
2365	Return the basename of the archive .
2366	Add additional requirements to metadata_info_path .
2367	Convert an egg - info file to a distribution .
2368	Create a message activity .
2369	Create suggested actions .
2370	Create an attachment .
2371	Create an attachment .
2372	Create an attachment .
2373	Create a trace activity .
2374	Setter for telemetry client .
2375	Read data from the storage .
2376	Write changes to store .
2377	Delete documents from a collection .
2378	Create an SIF from a result .
2379	Returns a dictionary with all non - special attributes .
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container
2384	Fill a QNA event with the query results .
2385	Returns a conversation reference
2386	Returns the name of the step
2387	Return whether the user supports suggested actions .
2388	Checks if the card actions supported by the card .
2389	Returns the channel_id of the event .
2390	Check if the token is valid .
2391	Create attachment for a hero card .
2392	Returns the list of parameters for this instruction .
2393	Return a copy of this instance .
2394	Return the inverse gate .
2395	Set control value .
2396	Create a copy of this object .
2397	Convert a string to a qasmif .
2398	Returns the qasm for this function .
2399	Run circuit .
2400	Run a single pass .
2401	Return a list of all the passes
2402	Return a dict representation of the flow .
2403	Create a controller .
2404	Create a new unit vector .
2405	Get parameters for a single gate .
2406	Return a single gate matrix .
2407	Calculate the einsum of a matrix .
2408	Calculate the einsum of a vector .
2409	helper for einsum multiplication
2410	Convert a DAGCircuit into a DAGCircuit .
2411	Exponential fit function .
2412	Optimized fit function .
2413	Function to plot the correlation coefficient .
2414	Calculate the mean and standard deviation of the image .
2415	Function to plot Rifford data .
2416	Split runs into multiple gates .
2417	Compose u3 components for u3 .
2418	Convert YZY to ZYZ .
2419	Validate input state .
2420	Trim an image
2421	Get the span of the gate .
2422	Convert a circuit into an Instruction object .
2423	Run the Transpiler .
2424	Find the best subset of the graph
2425	Adds a barrier to the circuit .
2426	Average the observed data .
2427	Process a bit_id node .
2428	Process a custom unitary node .
2429	Process a DAG node .
2430	Process CNOT node
2431	Process a Measure node
2432	Process if node
2433	Create a DAG operation .
2434	Return the duration of the given channels .
2435	Return the start time of the given channels .
2436	Return the stop time for the given channels .
2437	Iterate over all instructions in this schedule .
2438	Check that value is of expected type .
2439	Adds additional data to valid_data .
2440	Load additional data .
2441	Create a validation schema .
2442	Validate a model instance .
2443	Decorator to validate fields .
2444	Return the model as a dict .
2445	Load model from dict .
2446	Fast Fourier Transform
2447	Calculate a partial trace vector .
2448	Vectorize a density matrix
2449	Unvectorize a vectorized matrix .
2450	Convert a Pauli matrix into a list of Rauli
2451	Chunk an array by epsilon .
2452	Compute the outer product of two vectors .
2453	Return the concurrence of a state
2454	Shannon entropy .
2455	Calculate the Shannon entropy of a state
2456	Calculate the mutual information .
2457	Compute the entanglement of a state .
2458	Eof qubit
2459	Flatten a schedule .
2460	Shift a schedule
2461	Insert a child into a schedule .
2462	r Append child components to parent .
2463	Create a new U3 gate .
2464	Return backend status .
2465	Start the iteration
2466	Return the time remaining to the last iteration .
2467	Disassemble an experiment .
2468	Compute hamming distance between two strings .
2469	Create a Quaternion from an axis and rotation .
2470	Return quaternion from Euler angles .
2471	Normalizes the quaternion .
2472	Convert to matrix .
2473	Convert to ZZ
2474	Given a list of data return a dictionary with the number of values .
2475	Plot a histogram .
2476	Check if value is a collection of types .
2477	Check the range j .
2478	Check if a matrix is a square matrix .
2479	Check if a matrix is a diagonal matrix .
2480	Check if op is symmetric matrix .
2481	Determines if a matrix is a Hermitian matrix .
2482	Determines if a matrix is a positive semidefinite matrix .
2483	Check if a matrix is an identity matrix .
2484	Determines if a matrix is a unitary .
2485	Convert data to choi
2486	Convert data to superoperator .
2487	Convert data to Kraus
2488	Convert data to chi .
2489	Convert data to PTM .
2490	Convert data to Stinespring .
2491	Convert data to operator .
2492	Convert an operator to an operator .
2493	Convert Stinespring data to Operator representation .
2494	Convert superop to choi .
2495	Convert data to superop .
2496	Compute the KLI of a Kraus matrix .
2497	Convert data to Kraus .
2498	Convert stines to a Kraus pair .
2499	Convert StinesR to choi values .
2500	Convert a list of Kraus signals to Stinespring .
2501	Compute the superoperator .
2502	Translates the Choi matrix into the Choi matrix .
2503	Convert the Choi matrix to chi .
2504	Revert two matrices .
2505	Transform data from a Pauli unit qubits .
2506	Check that the input_dim and output_dim matches the input_dim .
2507	Hide tick lines and labels
2508	Set the label convention .
2509	Clears all points
2510	Add vectors to the vector .
2511	Add an annotation .
2512	Render the figure
2513	Plot the front of the sphere .
2514	Show the figure .
2515	Computes the Kak Kak Kak for a given unitary matrix .
2516	Generate a string representing the top level
2517	Return a string representing the MIDDLE of the mid .
2518	Return the text for the bot
2519	The maximum length of the rectangle .
2520	Return a list of parameters for an instruction .
2521	Return a label for a box .
2522	Return a latex representation of the local parameter .
2523	Compile a circuit .
2524	Filter deprecation warnings .
2525	Return information about the local machine .
2526	Check if a connection is established .
2527	Run the HTML checker .
2528	Convert times to amplitude
2529	Squeeze the given times and phase .
2530	Calculate the triangle of a triangle .
2531	The cosine function .
2532	r Fix the Gaussian width .
2533	r Compute the gaussian at the given center and sigma .
2534	Gaussian derivative
2535	r Gaussian sampling .
2536	Create a default pass manager .
2537	Default pass manager .
2538	Determines if a register has the given register .
2539	Return a copy of the circuit .
2540	Return a copy of thisCirc .
2541	Append an instruction to the circuit .
2542	Attach an instruction .
2543	Add a register to the circuit .
2544	Check for duplicate qubits .
2545	Checks that the given arguments are valid .
2546	Check that the cargs are valid .
2547	Check that the circuit is compatible .
2548	Returns the assembly string .
2549	Draw the circuit
2550	The size of the gate .
2551	The total width of all registers
2552	Count the number of operations in this instruction .
2553	Returns the number of connected components .
2554	Returns a copy of the circuit .
2555	Binds a parameter to a given value .
2556	Plot a pulse viewer .
2557	Search for forward N swaps .
2558	Map all free gates to a layout .
2559	Calculate the distance between layout and layout .
2560	Score a single step
2561	Copies the metadata of a DAG into a new DAG .
2562	Transform a gate to a layout .
2563	Generate swap operations from an edge .
2564	Run the Transpiler .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge between two qubits .
2567	Create a sub - graph from the current graph .
2568	List of physical qubits .
2569	Check if the graph is connected .
2570	Compute the distance matrix .
2571	Return the distance between two physical qubits .
2572	Compile a circuit using qiskit .
2573	Create a cu1 gate .
2574	Inverse the circuit .
2575	Applies gates to the circuit .
2576	C_if instruction .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe a callback from an event .
2580	Publish an event .
2581	Initialize the circuit .
2582	Define the circuit .
2583	Returns a circuit to uncompute the disentangle .
2584	Calculate the angular momentum angle of a complex .
2585	Return a circuit with multiplex .
2586	Checks if the given value is a virtual register .
2587	Returns a copy of the layout
2588	Combine two layouts into an edge map .
2589	Combine two protocols .
2590	Insert a schedule into the schedule .
2591	Checks if the fenced property has been loaded
2592	Convert a list of gates into an index matrix .
2593	Stochastic swap .
2594	Update the graph in the graph .
2595	Returns a Pauli group .
2596	r Return a Qiskit object from a label string .
2597	Initialize Qiskit .
2598	r Compute the Pauli product of p1 and p2 .
2599	Convert to an operator .
2600	Convert the Pauli gate into an instruction .
2601	Update the Qiskit .
2602	Updates the x .
2603	Insert a paulis at the given indices .
2604	Append a paulis to the circuit .
2605	Delete qubits .
2606	Generate a boolean gate .
2607	Return a Pauli Pauli Pauli operator .
2608	Returns the outcome of the measurement at the given qubit .
2609	Add a sample measure to the state .
2610	Add a measurement to the classical memory .
2611	Add a qubit reset .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Return the state vector .
2615	Validate whether the experiment should be run .
2616	Run an analysis
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary shape .
2620	Initialize the unitary .
2621	Get the unitary of the tensor .
2622	Run a job
2623	Validate the circuit .
2624	Check if an object is a bit .
2625	Run the transpiler .
2626	Check if this interval has overlap .
2627	Shift this interval by the given time .
2628	Return a new Timelot shifted by the given time .
2629	Returns the start time for the given channels .
2630	Return the stop time for the given channels .
2631	Returns True if the timeslots are merged with the given timeslots .
2632	Merge this timeslots .
2633	Shift the timeslot by the given time .
2634	Report the commit as an issue .
2635	Return a dictionary with label - value pairs .
2636	Visualize the state of a quantum state .
2637	Create a RZ gate .
2638	Swap two targets .
2639	Initialize the backend_prop .
2640	Create a program graph from a dag .
2641	Select next program .
2642	Select the remaining cx .
2643	Select the best remaining qubit
2644	Run the Transpiler .
2645	Returns a list of all the instructions in this circuit .
2646	Inverse the gate .
2647	Applies gates to the gate .
2648	Concatenate the circuit .
2649	Determines if the matrix is a unitary .
2650	The conjugate operator .
2651	Transpose operator .
2652	Power of the operator .
2653	Shape .
2654	Convert a QuantumCircuit into an Operator .
2655	Updates the layout of the mapper layer
2656	Separate a bitstring
2657	Format a level zero - zero memory list .
2658	Formats a level - 1 memory array .
2659	Format a list of levels into a list of lists .
2660	Format counts into a dictionary .
2661	Format a state vector .
2662	Format a unitary matrix .
2663	Decorator to check if the job is submitted .
2664	Submit the job to the executor .
2665	Returns the status of the job .
2666	Returns True if lo_freq is included False otherwise .
2667	Plot the bloch state of a multivariate multivariate multivariate multivariate state .
2668	Get qubit values from user config .
2669	Get the value of the current measurement lo .
2670	Unroll the circuit .
2671	Visualize a state sphere
2672	Calculate the number of choices for a given number of choices .
2673	Returns the lex index of the lexicographical m
2674	Plot the quantum state of a quantum state .
2675	Returns a list of unique backends .
2676	Returns the op
2677	Create a sample of a constant .
2678	Create a new zero pulse .
2679	Calculate a square pulse
2680	Calculate the sawtooth pulse .
2681	Calculate the phase of a triangle .
2682	Create a new cos spectrum .
2683	Calculate a signed sin spectrum
2684	r Calculate a sample of a gaussian .
2685	r Calculate the derivative of a gaussian derivative
2686	Calculate a sample of a Gaussian .
2687	Calculates the distance between the current axis .
2688	Outputs a string representation of the QR Code .
2689	Returns a backend instance .
2690	Renames a register .
2691	Remove all operations named by name .
2692	Add a Quantum register .
2693	Add a Classical register .
2694	Add a new wire .
2695	Checks if the condition is invalid .
2696	Return a list of all the conditions in a condition
2697	Add an op node to the graph .
2698	Apply an operation back to the DAG .
2699	Checks if the egmap registers are valid
2700	Check the validity of the wire_map .
2701	Map condition to condition .
2702	Extend the DAG into this DAG .
2703	Compose the DAG circuit .
2704	Check that wires are valid .
2705	Return a map of pred and successors to the given node .
2706	Computes the full pred and successors of a DAG circuit .
2707	Return a list of topological nodes .
2708	Yield edges from the graph .
2709	Return all nodes of the MultiGraph .
2710	Returns the nodes of the circuit .
2711	Returns a list of nodes with the given names .
2712	Returns a list of two Q gates .
2713	Returns the predecessors of a node .
2714	Returns all predecessors of a node .
2715	Get the ancestors of a node .
2716	Returns the successors of a node .
2717	Removes an op node from the DAG node .
2718	Removes all ancestors of a node from the DAG .
2719	Removes all descendants of a node .
2720	Removes all non - ancestor nodes from the DAG .
2721	Removes all nodes from the DAG
2722	Returns a list of DAGCircuit instances .
2723	Generator for serialization of the DAG .
2724	Generate multigraph layers
2725	Return a set of runs for the given name .
2726	Generate all nodes of a given wire .
2727	Count the number of operations .
2728	Returns a dictionary describing the tensor properties .
2729	Create a tomography basis .
2730	Gets the gates for the Pauli measurements
2731	Set tomography .
2732	Process a tomography set .
2733	Creates tomoset from a circuit
2734	Return the data for a tomoset .
2735	Calculate marginal counts for each measurement
2736	Fit tomography data using leastsq .
2737	Calculates the Leastq fit .
2738	Compute the vector projection of op_list
2739	Computes the inverse linear inverse of the given operators .
2740	Calculates the wizard rho of a fluid
2741	Compute the Wigner data .
2742	Measure gate .
2743	Print the status of a job .
2744	Monitor the status of a job .
2745	Euler angles .
2746	Simplified U gate .
2747	RunEnlargeWithAncilla
2748	Displays a table of qubits .
2749	Display the job history .
2750	Plot a list of jobs .
2751	Draws the current stimulus
2752	Create a cu3 gate .
2753	Build a Bell circuit .
2754	Transpile a circuit into a schedule .
2755	Transpile a circuit .
2756	Execute multiple experiments .
2757	The drive channel .
2758	The control channel .
2759	The measure channel .
2760	Return the current acquisition .
2761	Evaluate the input state
2762	Assemble an experiment .
2763	Unset qiskit log
2764	Visualize a state matrix .
2765	Process the channel1 and channel1 .
2766	Input data .
2767	Pop the stack .
2768	Push a new lexer to the stack .
2769	Run the DAG .
2770	Returns the bound method for the given instruction .
2771	Convert an acquire instruction into a command dictionary .
2772	Convert frame change to QObject
2773	Convert a persistent value to a QObject
2774	Convert a drive instruction into a QObject .
2775	Convert a snapshot to a QObject
2776	Updates the annotations of a pulse .
2777	Decorator to convert a continuous pulse into a sample .
2778	Filter backends according to filters .
2779	Resolve backend name .
2780	Convert a DAG into a QuantumCircuit .
2781	Convert a matrix to a dictionary .
2782	Updates the current symbol
2783	Verify that a bit is declared in the gate .
2784	Verify that all the expressions in the list exist .
2785	Verify that the given object is a gate .
2786	Verify that the register is valid .
2787	Verify that a list is valid .
2788	Find the column of the given token .
2789	Set debug value .
2790	Parse the given data .
2791	Run the parser
2792	Parse the assembly file .
2793	Create a crz gate .
2794	Generate a basis state
2795	Return the projected density matrix .
2796	Calculate the purity of a state
2797	Run the DAG .
2798	Display the backend configuration .
2799	Updates the status of the backend
2800	Generate the widgets for the jobs pending
2801	Run the cx dag
2802	Get a single backend by name .
2803	Returns the shape of the bipartite tensor .
2804	Given a set of register labels return a list of register names .
2805	Return a truncated floating point number .
2806	Return a LaTeX representation of the QR code .
2807	Get image depth .
2808	Return the size of the Beamer page
2809	Load schema from file .
2810	Get a validator .
2811	Load schema and validators .
2812	Validate a JSON dictionary against a schema .
2813	Format the errors of a given exception .
2814	Compute the majority of a pair .
2815	Multajority
2816	Generate a latex representation of a circuit .
2817	Return a matplotlib circuit drawer .
2818	Return a random unitary operator .
2819	Return a random density matrix
2820	Generate a Gaussian matrix .
2821	Calculates the random density of a Gaussian distribution .
2822	Generate a random density matrix .
2823	return a list of call names
2824	Returns a new SuperOp instance with the same length .
2825	Compose a tensor with the given arguments .
2826	Convert a QuantumCircuit into a SuperOp .
2827	Run the DAG .
2828	Assemble a circuit .
2829	Run the QR Code decomposition .
2830	Run the DAG .
2831	Define the definition .
2832	Check the type of the field .
2833	Check the type of the input value .
2834	Validate atol .
2835	Validate rtol .
2836	Reshape the input_dims and output_dims .
2837	The dimensions of the input .
2838	Returns the output dimensions .
2839	Returns a copy of the graph .
2840	Powers the Qiskit .
2841	Determine the dimensions for the given dimensions .
2842	Einsum multiplication .
2843	Override default deserialization .
2844	Ensure that the value is serialized .
2845	Check that the value of the field is expected to be a valid type .
2846	Compute the fidelity between two states .
2847	SVD decomposition .
2848	Inverse of the snapshot .
2849	set label
2850	Determines if this quiskit is a unitary .
2851	Convert the tensor into an operator .
2852	Convert this QuantumChannel into an Instruction .
2853	Initialize the transformer .
2854	Sort an enum .
2855	Monkey patch the strptime module .
2856	Returns a mapping from the given languages .
2857	Return a generator of locale data .
2858	Check if tokens are valid .
2859	Split a string .
2860	Parse a date string .
2861	Parses a date string
2862	Returns True if the given string is applicable to the given date_string .
2863	Translates a date string into a string .
2864	Parses a date string using the given formats .
2865	Generate and return an action generator .
2866	Convert an exception to a netcode string .
2867	Convert an exception to HTTP code .
2868	Read configuration file .
2869	Compose the phantom config .
2870	Return a copy of the streams
2871	Compose the stepper config .
2872	Log stdout and stderr .
2873	Expand a time string
2874	Read configuration options .
2875	Send the stepper info to the core .
2876	Returns the name of the stpd file
2877	Read cached stepper info .
2878	Write cached options to disk
2879	Create a stepper file
2880	Create and return a CompositeLPS object .
2881	Returns the number of rps at the given time t .
2882	Execute a command
2883	Decode monitoring data .
2884	Make points for a label
2885	Publish a status .
2886	Count the number of codes that match a regex .
2887	Stop the worker .
2888	Feed all the workers into the queue
2889	Initialize logging .
2890	Add user options
2891	Configure the core
2892	Gracefully shutdown gracefully
2893	Collect data from the queue .
2894	Notify all listeners
2895	Return a marker for the given type .
2896	Parse a duration string .
2897	Start the agent
2898	Start the agent
2899	Discover the UDP UDP UDP port
2900	Add components to the jmx file
2901	Terminate the child process .
2902	Read the data from the given lines .
2903	Create a custom criterion from a string .
2904	Read monitor config file
2905	Create a new config file if it exists .
2906	Check the disk space
2907	Checks if the current memory is less than the limit
2908	Get the size of the terminal
2909	Returns the right line
2910	Truncate the line_arr .
2911	Render the left panel
2912	Render the screen
2913	Add a new info widget
2914	Fill a rectangle with a blank space .
2915	Calculate the length of a line .
2916	Create a load plan
2917	Returns a string representation of the level
2918	Add info widget
2919	Send a request to the writer .
2920	Load all plugins
2921	Returns the plugin with the given plugin_class .
2922	Returns a list of plugins of the given plugin_class .
2923	Copy a file to the artifacts_dir
2924	Add an artifact file .
2925	Create a temporary file .
2926	Load config files .
2927	Flush the current configuration to a file .
2928	Returns a list of options for the given section .
2929	Find all sections that start with prefix
2930	Decode statistics from phantom info .
2931	Get phantom info .
2932	Prepare monitoring for monitoring .
2933	Poll all agents
2934	Send collected data to listeners
2935	Detect the configuration
2936	Handle data items .
2937	Decode agent data into dict
2938	Subscribe to the stream .
2939	Run the event loop .
2940	Close the canvas .
2941	Perform a single request .
2942	Submit a new order
2943	Retrieve an order
2944	Returns a Position object for the given symbol
2945	List assets .
2946	Gets a single asset
2947	Creates a new join value subplan .
2948	Returns a copy of obj with the given key and value .
2949	Returns a dictionary with the given key type and value .
2950	Construct an event logger .
2951	Construct a JSON - event logger .
2952	Read configuration from a file .
2953	Return the repository config for a given repository .
2954	Format config to GraphQL format .
2955	Get a pipeline by name .
2956	Returns a list of all pipelines
2957	Get next event from queue .
2958	Execute a pipeline through a queue .
2959	Wait for all processes to finish .
2960	Create a field with the given dagster type .
2961	Build a ExecutionPlan
2962	Build a pipeline from a pipeline .
2963	Build a sub - pipeline .
2964	Returns the solid with the given name .
2965	Construct the list of publish commands .
2966	Create a new release
2967	Create a passthrough context .
2968	Decorator to create input selector schema .
2969	Decorator for output selector schema .
2970	Print a block of text .
2971	Download file from S3
2972	Uploads a file to S3
2973	Context manager for user - code errors .
2974	Wrapper for mkdir_p
2975	A context manager for user code execution .
2976	Create a context free logging .
2977	Return True if all steps have been completed .
2978	Returns True if all steps are skipped .
2979	Returns the transformed values .
2980	Returns the transformed value
2981	Return the failure data .
2982	Creates a PermissiveDict .
2983	Check if a config value is a valid dataset .
2984	Check if a config value is a valid table .
2985	Execute a core transform .
2986	Decorate an existing type .
2987	Decorator to create a resource definition
2988	Create a new EventV2
2989	Coalesce the topological order into an OrderedDict .
2990	Get connection parameters
2991	Get a new connection
2992	Creates a new Cursor instance .
2993	Closes the connection .
2994	Create a model from a model dict .
2995	Convert a list of mdl dictionaries into a list
2996	Returns the form field
2997	Convert the given value to a Python object .
2998	Apply filters to queryset .
2999	Compute the Nfps distribution .
3000	Compute the NFP real .
3001	Compute the best partitions for the given set sizes .
3002	Compute optimal partitions for the given sizes .
3003	Calculate c1 and c2 .
3004	Initialize slots .
3005	Returns the size of the seed
3006	Serialize this MinHash into a buffer .
3007	Deserialize a buffer from a buffer .
3008	Updates the hash values by b .
3009	Merge another MinHash object into this one .
3010	Return a new MinHash object with the given hash values .
3011	Index the given entries .
3012	Query the memcached index .
3013	Compute the minimum hash value of the sampler .
3014	Remove a key from the hash
3015	Updates the rank using the hashfunc .
3016	Count the number of samples .
3017	Merge this HyperLog with another HyperLog .
3018	Clear the registry
3019	Calculates the K - K - K - K - K - K - K - K - K .
3020	Calculate the MAPK distance between the actual and predicted values .
3021	Index the hash tables .
3022	Query the hash for a given minhash .
3023	Close the cache .
3024	Creates a storage object .
3025	Factory for unordered storage
3026	Returns the user details for the user
3027	Add state to social login state .
3028	Select a single text .
3029	Parse a scoped selector .
3030	Parse a single statement .
3031	Parses a value .
3032	Advance to the next line .
3033	Parse a configurable reference .
3034	Augment an exception message and reraise it .
3035	Convert anoperative config string to markdown format .
3036	Runs op .
3037	Ensures that the wrapped function is wrapped .
3038	Decorate a function or class .
3039	Format value .
3040	Clears the configuration .
3041	Bind a parameter to a given value .
3042	Query the given binding key .
3043	Determines if a function has a given name .
3044	Get the argspec for a function .
3045	Get positional parameter names for a function .
3046	Get the positional parameter names of a function .
3047	Get the default values for a function fn .
3048	Context manager to create a scope .
3049	Decorator to register a function as a decorator .
3050	Return a string representation of the operative config .
3051	Parse a configuration file .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse a list of config files .
3055	Parses the given value .
3056	Run the finalize hook .
3057	Iterate over nested values .
3058	Iterate over all references in the config .
3059	Add a constant .
3060	Add constants to enum .
3061	Return a list of selectors that match the given partial selector .
3062	Gets all matches that match the partial selector .
3063	Returns the minimum value of a selector .
3064	Convert a query to a SP search query string .
3065	Parse Retry - After header .
3066	Validate the given value .
3067	Return a description of the resource
3068	Set the value of the field .
3069	Get a thing by id .
3070	Initialize things
3071	Set default headers
3072	Checks if the request is in a valid request .
3073	Get a thing
3074	Called when a message is received .
3075	Process a thing .
3076	Delete a thing .
3077	Start the service .
3078	Return action description as a dictionary .
3079	Start the task .
3080	Mark the task as completed .
3081	Return the event description as a dictionary .
3082	Get the current IP address
3083	Returns a list of IP addresses .
3084	Set the value
3085	Emits an update
3086	Return the thing as a dict .
3087	Set the href prefix for this action .
3088	Returns a dictionary of property names and values .
3089	Returns a list of action descriptions
3090	Returns a list of event descriptions .
3091	Add a property .
3092	Remove a property
3093	Returns the value of a property
3094	Returns a dict of properties
3095	Set the value of a property
3096	Get action by name .
3097	Add an event .
3098	Add a new event .
3099	Performs an action .
3100	Cancel an action
3101	Add an available action .
3102	Remove a subscriber
3103	Add a subscriber to the list of available events
3104	Remove an event subscriber
3105	Notify property status
3106	Send action to all subscribers .
3107	Notify about an event .
3108	Annotate the model with the given annotations .
3109	Updates the model with the given fields .
3110	Perform bulk insert .
3111	Perform an INSERT statement .
3112	Insert a model into the model .
3113	Build the postgres insert compiler .
3114	Check if a field is a Magical field
3115	Determine the insert and update fields .
3116	Called when a model is created .
3117	Called when a model is deleted .
3118	Create a case where field is not None .
3119	Resolve the values of this HStore .
3120	Convert the value to SQL
3121	Returns a copy of this instance with the given relabels .
3122	Add join conditions to the table .
3123	Check if a field is a HStore field .
3124	Insert multiple objects into the database .
3125	Create a required constraint for a given field .
3126	Rename a required constraint constraint .
3127	Drop a required constraint for a given field .
3128	Return the name of the required constraint .
3129	Create a new SQL statement .
3130	Create a custom command .
3131	Return the database base class .
3132	Create an hstore extension .
3133	Convert value to string
3134	Form the return statement .
3135	Returns a list of SQL queries for this instance .
3136	Rewrite the query .
3137	Rewrite the update statement .
3138	Rewrite an INSERT statement .
3139	Build conflict target .
3140	Get model field by name .
3141	Format field name .
3142	Format the value of a field .
3143	Create a unique constraint for a field .
3144	Rename a unique constraint .
3145	Drop a unique constraint .
3146	Return unique constraint name .
3147	Iterate over unique keys .
3148	Add a condition .
3149	Return SQL for this field .
3150	Calculate the tdist95 conf level for a given data frame .
3151	Calculates the variance between two samples .
3152	Compute t - score between two samples .
3153	Check if two samples are significant
3154	Topological sort .
3155	Generate n - qubits
3156	Play the tree .
3157	Select the next node .
3158	Make a random playout .
3159	Filter benchmarks that are not compatible with Python2 .
3160	Recursively expand a benchmark name .
3161	Generate a string table .
3162	Initialize benchmarks .
3163	Returns the domain of the domain .
3164	Fetch messages from a channel
3165	Parse posts .
3166	Returns information about a user
3167	Fetch items from category
3168	Fetches RSS entries from a category
3169	Setup command line arguments for the command line
3170	Fetch bug items .
3171	Gets a list of bugs .
3172	Get comments for given bug ids
3173	Get history of bug ids
3174	Get attachments for given bug ids
3175	Get all the notes for a given issue .
3176	Fetch all merge requests
3177	Get merge notes .
3178	Get a list of merge versions
3179	Fetches all merges .
3180	Get a merge .
3181	Fetch versions for a merge .
3182	Get the version of a merge .
3183	Fetch notes for a given item .
3184	Fetch emojis .
3185	Fetch EMOJIS for a note .
3186	Calculate the time to reset
3187	Fetch items from GitLab
3188	Initialize the rate limit .
3189	Setup the command line parser for GitLab .
3190	Fetch messages from a category
3191	Return the id of a metadata item
3192	Get the members of a given conversation .
3193	Get information about a channel
3194	Get information about a user
3195	Setup a command line parser
3196	Get the last modified timestamp of the metadata item
3197	Parse a list of bug lists .
3198	Parse bug details .
3199	Parse bug activity .
3200	Log out a bugzilla user .
3201	Get bug metadata .
3202	Get bug list .
3203	Get details about a bug .
3204	Get activity of a bug .
3205	Fetch events .
3206	Fetch events from a group
3207	Get all events from a group
3208	Get comments for a specific event
3209	Get RRSVPS for a specific event .
3210	Returns a list of question items for the given question
3211	Fetch comments for a question
3212	Build a question from an HTML question
3213	Gets the questions from the API .
3214	Get html for a question
3215	Get comments for a post .
3216	Parses a question container
3217	Parses an answer from an HTML question .
3218	Parse the number of html pages .
3219	Parses the update_info element .
3220	Fetches all reviews for a given category .
3221	Parse reviews .
3222	Fetch grit28 reviews
3223	Get the gerrit version .
3224	Get reviews for a given item .
3225	Return the next retrieve group item
3226	Execute a command
3227	Execute a command from the archive
3228	Execute command from remote
3229	Setup command parser .
3230	Fetch issue data
3231	Fetch all attachments for a given issue
3232	Fetch all messages for a given issue
3233	Fetch activities for a given issue
3234	Fetch user data
3235	Get a user by name .
3236	Get information about an issue
3237	Fetch issues for a given issue .
3238	Returns the URL for the project
3239	Fetch items from the API
3240	Get a list of subscriptions
3241	Find group id
3242	Wrapper for requests . get
3243	Setup the command line parser
3244	Generate a unique uuid .
3245	Wrapper for fetch
3246	Fetch files from an archive
3247	Find all backends .
3248	Return metadata for the given category .
3249	Fetch items from archive
3250	Filter classified data .
3251	Parse arguments .
3252	Add authentication arguments .
3253	Add arguments to the archive
3254	Add the output arguments to the parser .
3255	Retrieve objects from the backend .
3256	Initialize the archive manager .
3257	Get the updated timestamp of an item
3258	Parse a mox file
3259	Fetch all messages from a mailing list
3260	Copy a mbox to a temporary file
3261	Validate a message .
3262	Convert a case dictionary to a dict .
3263	Get a message from the mailbox .
3264	Fetch items from the repository .
3265	Fetch commits from a category
3266	Parse git log from file
3267	Set up git path .
3268	Setup the command line parser
3269	Parse the stream .
3270	Clone a git repository
3271	Count the number of objects in the repository .
3272	Check if this repository is detached
3273	Update git repository
3274	Synchronize the repository
3275	Returns a generator for the git rev - list
3276	Get the git log .
3277	Show git show
3278	Fetch the contents of the local repository
3279	Return list of commits from pack
3280	Update a list of refs
3281	Find all refs in the repository .
3282	Update a ref
3283	Execute a shell command
3284	Read the stderr of the process .
3285	Run git command .
3286	Fetch tweets .
3287	Fetch tweets from a category
3288	Gets tweets from the API .
3289	Setup command line arguments for command line options
3290	Fetch items from catalog
3291	Fetch hits for a category
3292	Parse the hit_raw .
3293	Retrieve hits for a list of keywords .
3294	Get the datetime of an item .
3295	Return the category for the given item .
3296	Fetches pull requests from the API
3297	Fetch repo info
3298	Get all reactions for a given issue .
3299	Get reactions for a given comment
3300	Returns list of user assignees
3301	Gets a list of users for the given PR number .
3302	Get list of commit hashes for a given PR number .
3303	Get reactions for a pull review comment
3304	Get user information
3305	List all reactions for a given issue .
3306	List all issues .
3307	Return a generator of pull requests for this repository .
3308	Returns the name of the repository
3309	Return a list of reviews for the given PR number .
3310	Fetch commits for a given PR number .
3311	List reactions for a review comment
3312	Get a user by login
3313	Gets the orgs for a given login .
3314	Get the token rate limit .
3315	Get the rate limits for each token .
3316	Choose the current token to use .
3317	Check if we need to wait for tokens .
3318	Update the current rate limit .
3319	Initialize metadata .
3320	Store data in the archive .
3321	Retrieve an entry from the archive .
3322	Create a new archive
3323	Generate a hash code for the given uri and headers .
3324	Verify the integrity of the archive
3325	Load metadata from database
3326	Count the number of rows in a table .
3327	Create an archive
3328	Remove an archive
3329	Search for archives .
3330	Yield archived archives .
3331	Search for all files in the directory
3332	Return the file type of a compressed file
3333	Generate a list of months for a given date range .
3334	Convert an email message to a dict .
3335	Remove illegal characters from XML .
3336	Convert XML stream to dict
3337	Yield issues from a JSON string .
3338	Get list of issues for a given date .
3339	Get information about an issue .
3340	Get information about a user
3341	Call the given resource with the given parameters .
3342	Fetch docker data
3343	Fetch data from a category
3344	Get the contents of a repository
3345	Map custom fields to custom fields
3346	Filter custom fields
3347	Yield issues from a page
3348	Yield issues from github
3349	Gets all issues from a given date range
3350	Get all comments for an issue
3351	Returns a list of fields
3352	Fetch all items
3353	Get a list of jobs from Jenkins
3354	Get builds for a particular job
3355	Parses a page of questions into questions
3356	Get questions
3357	Setup command line arguments for StackExchange .
3358	Fetch items from a category .
3359	Get the maximum timestamp for the given reviews
3360	Fetch all pages and review them
3361	Get all pages
3362	Get recent changes
3363	Fetch messages .
3364	Yields messages from a JSON response
3365	Filter message by chats
3366	Retrieve a list of updates .
3367	Fetch articles from a group
3368	Add metadata to item
3369	Parse an article
3370	Wrapper for fetch
3371	Fetch an article
3372	Fetch data from remote server
3373	Fetch data from the archive
3374	Create an HTTP session .
3375	Set up rate limits .
3376	Sleep for rate limit .
3377	Update the rate limit .
3378	Parse a Supybot log file
3379	Retrieves the list of archived archives .
3380	Returns a list of all SUYbot archives
3381	Parse the stream .
3382	Parse a supersybot timestamp .
3383	Parse a supersybot message .
3384	Fetch all topics from a category
3385	Parse topics page .
3386	Get information about a topic
3387	Get a single post .
3388	Fetch all tasks from a category
3389	Parses a JSON string into a generator .
3390	Parse a list of users
3391	Yield all tasks from a given date .
3392	List transactions associated with a list of ids .
3393	Gets a list of users .
3394	Retrieve a list of ids .
3395	Call the Conduitator .
3396	Return a unique ID for an item
3397	Generator that parses the contents of a summary
3398	Gets the contents of the collection .
3399	Get historical content .
3400	Parse the measurement result
3401	Returns the URL for the capabilities URL .
3402	Read the given URL and return an etree element .
3403	Read an XML string .
3404	Parses the results from the XML response
3405	Build the base URL .
3406	Get the elements of a complex type
3407	Construct a schema from a list of elements .
3408	Returns a URL for the DescribeFeatureType URL .
3409	Run a complex input with the given reference .
3410	Retrieves a list of movie ids .
3411	Retrieves a list of all tv items .
3412	Gets a list of movies for a user .
3413	Gets information about a group .
3414	Gets the alternative titles for this user .
3415	Retrieve credits for a user .
3416	Gets a list of external ids for the user .
3417	Gets the keywords for a user .
3418	Returns a list of recommendations for the user .
3419	Gets the release dates for a project .
3420	Gets the releases for a project .
3421	Returns a list of translations for the project .
3422	Retrieves a list of similar movies .
3423	Retrieves the reviews for a user .
3424	Returns a list of changes for this group .
3425	Returns the upcoming events .
3426	Sets the currently playing state .
3427	Returns a list of popular tweets .
3428	Retrieves the top rated rates for the user .
3429	Gets the account states for a user .
3430	Updates a rating .
3431	Retrieves the movie credits for this client .
3432	Retrieves the TV credits for a user .
3433	Returns information about credit id .
3434	Returns a list of TV objects .
3435	Returns information about a bucket .
3436	Retrieve a list of videos .
3437	Retrieve information about a user .
3438	Returns the movie s movies .
3439	Create a new token .
3440	Validate an access token .
3441	Creates a new session .
3442	Create a new guest session .
3443	Gets the rated movies .
3444	Returns the status of an item .
3445	Create a new list .
3446	Remove an item .
3447	Clears a session .
3448	Returns the content ratings for the given item .
3449	Returns a list of similar IDs for the document .
3450	Returns the details of the artist .
3451	Retrieve information about a season .
3452	Retrieve credits for a season .
3453	Gets the external ids for the season .
3454	Gets information about a specific season number .
3455	Retrieves credits for a season .
3456	Gets the external ids for this season .
3457	Set attributes to values
3458	Returns the movie information .
3459	Gets a collection from the server .
3460	Returns information about the TV .
3461	Returns information about a person .
3462	Gets the company information .
3463	Returns the keywords associated with the user .
3464	Returns a list of items for the client .
3465	Normalize a string .
3466	Takes a list of refs and returns a tuple of n - grams .
3467	reads a reference set into a tuple
3468	Compute the correlation coefficient .
3469	Align a list of texts to the target blocks .
3470	r Recursively iterate over all descriptors in a module
3471	Register a list of descriptors .
3472	r Register a descriptor to the registry .
3473	Prints string to stdout .
3474	r Checks if the given descriptor is a subclass of Descriptor .
3475	Return a dictionary representation of the command .
3476	The coordinate of the descriptor
3477	r Calculate the sigma of the atom i .
3478	r Calculate surface area .
3479	r Create a solvent object from a molecule .
3480	Create a descriptor from a JSON string .
3481	r Fill missing values with missing values .
3482	r Drop missing values .
3483	r Iterate over items .
3484	r Convert to a dictionary
3485	r Get a get value by name .
3486	Decorator for log calls .
3487	Decorator for synchronized methods .
3488	Print a progress message
3489	Print a message
3490	Log a message and exit .
3491	Get a temporary file name
3492	Set a temporary file
3493	Clean temp files
3494	Returns the fixed path of the request .
3495	Returns a list of valid parameters for the given method .
3496	Merge options for a method
3497	Add options to a parser .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Stop all workers .
3501	Record the number of tasks processed .
3502	Read S3 keys from environment
3503	Read S3 keys from command line options .
3504	Read S3 keys from config file .
3505	Initialize S3 keys .
3506	Connect to S3
3507	List all buckets
3508	Walk an S3 directory
3509	Walks a local directory
3510	Expand a list of sources
3511	Upload a single file to the pool .
3512	Convert a list of files into a single directory .
3513	Create a bucket
3514	Update the permissions of an object
3515	Print the contents of a source
3516	Download a single file from S3
3517	Retrieve all files from a source directory .
3518	Copies a single file .
3519	Copies a list of files to the target location .
3520	Delete files from S3
3521	Return a list of relative paths relative to the given directory .
3522	Syncs a directory to the target directory .
3523	Return the MD5 hash of a file
3524	Return the md5 of the file
3525	Creates a directory if it doesn t exist .
3526	Checks if the given md5cache is valid
3527	Return True if path matches filter_path
3528	Recursively walk an s3 directory and yield a result .
3529	Add object to result list .
3530	Get the permissions of a file
3531	Look up an S3 URL .
3532	Read a chunk from a file
3533	Upload a file to S3
3534	Verify that the downloaded file is correct .
3535	Write a chunk to a file .
3536	Copy an object to S3
3537	Run the given command .
3538	Validate that the format is valid .
3539	Pretty print a list of objects
3540	List buckets
3541	Create a bucket
3542	Uploads files to S3
3543	Get files from S3
3544	Print files to S3
3545	Dsync command
3546	Copy files to S3
3547	Migrate a file
3548	Delete files from S3
3549	Print the size of a file
3550	Print the total size of a bucket
3551	Tries to match a date
3552	Match time value .
3553	Match a value to a delta .
3554	Check if a dictionary is valid .
3555	Discover Xiaomi gateway .
3556	Listen for incoming messages .
3557	Get data from hub .
3558	Push data to channel
3559	Generate a new key .
3560	Handle an exception raised by Rollbar .
3561	Include the rollbar framework .
3562	Ensure the log file exists .
3563	Return request object .
3564	Initialize rollbar .
3565	Decorator to wait for a lambda function .
3566	Reports a message to Rollbar .
3567	Search for items by title .
3568	Create an agent log file .
3569	Build the person data .
3570	Add the lambda context data to the dictionary .
3571	Add request data to Rollbar .
3572	Check if a frame should be added to the current frame .
3573	Build request data .
3574	Build the server data .
3575	Build the payload for the given data .
3576	Run the application .
3577	Compose a Hangul character .
3578	Decompose a Hangul letter .
3579	Checks if a character has a CJK character .
3580	Attach a word to a word .
3581	Check if node is inside an except handler
3582	Check if the node is inside lambda
3583	Recursively find all elements of a node .
3584	Clob an except statement .
3585	Check if node is a super node .
3586	Check if node is an error .
3587	Check if the given node is a default argument .
3588	Check if the node is a function decorator .
3589	Check if node is an ancestor .
3590	Return the parent of the given node .
3591	Decorator to register a check message .
3592	Recursively collect fields from a format string .
3593	Get the argument from a call node .
3594	Return True if node is inherited from standard exceptions .
3595	Check if an exception is raised by the given type .
3596	Check if a function is decorated with a property .
3597	Check if function is decorated with qnames .
3598	Find the first exception handler that can be used by the given node .
3599	Determine if the given node is a from a fallback block .
3600	Return the exception handlers for the given exception .
3601	Return True if node is ignored .
3602	Check if a class is abstract
3603	Safe inference .
3604	Return the type of a node .
3605	Check if a function is registered in a single -ispatch function .
3606	Return whether the node is postponed evaluation .
3607	Return the fully qualified name of a module .
3608	Get the relative import name from an import node .
3609	Return a string representation of a tree .
3610	Generate the dependencies graph for the given module .
3611	Check for imports .
3612	Check for imports .
3613	Check that the first non - import node is the first import node .
3614	Records an import from a node .
3615	Check for imports .
3616	Check if a relative import is imported .
3617	Add an imported module .
3618	Check for deprecated modules
3619	Check if a module is prefixed .
3620	Report external dependencies .
3621	Return a set of imports from the graph .
3622	Get the default configuration options
3623	Insert default options .
3624	Show the attribute of the given node .
3625	Get the callbacks for the given node .
3626	Visit a node .
3627	Check that all messages are consistent .
3628	Check that the function is called .
3629	Check whether a datetime is a datetime . time .
3630	Check that the mode argument is valid .
3631	Handle a message .
3632	Print the messages to stdout .
3633	Return the title for a node
3634	Set default options .
3635	Show a node
3636	Add class
3637	Get the ancestors of a node
3638	Get all instances that are associated with the given level .
3639	Extract all classes of a given node .
3640	Leave the project .
3641	Handle ImportFrom node .
3642	Create a Class Diagram from a given class
3643	Generate diagram of diagram
3644	Check if an owner is ignored .
3645	Return a list of names that are similar to the given attrname .
3646	Return True if node is no member or not .
3647	Checks if node is a parent of the given type .
3648	Check if the name of a variable is used as a variable .
3649	Check if a variable is not a context variable
3650	Visit an attribute .
3651	Check for assignment .
3652	Check that the function is not callable .
3653	Check for unary operations .
3654	Iterate over the interfaces of a node .
3655	Create a project from a list of files .
3656	Visit package node .
3657	Set locals_type for function def node
3658	Handle assigning variables .
3659	Handle assigning attribute types .
3660	Handle imported modules .
3661	Handle imported modules .
3662	Checks if a module is in the context
3663	Called when a module is imported .
3664	Return ANSI escape code .
3665	Apply ANSI escape codes .
3666	Register the given linter .
3667	Handle a message .
3668	Display a layout
3669	Handle a message .
3670	Write a graph .
3671	Write a node .
3672	Write an edge .
3673	Check for new format .
3674	Process a non - raw string token .
3675	Format a layout .
3676	Format an evaluation section .
3677	Generate a table from a layout
3678	Default table format .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Checks if the given symbol identifier exists for the given symbol .
3683	Raise an InvalidMessageError .
3684	Raise an InvalidMessageError .
3685	Returns a list of message definitions for the given message id or symbol .
3686	Get the display string for a message
3687	Print help message
3688	List all messages
3689	Inited builder .
3690	Return CPU count .
3691	Generate report statistics .
3692	A context manager for import paths .
3693	Load plugin modules .
3694	Load all dynamic plugins
3695	Set an option .
3696	Register a checker .
3697	Disable all reports .
3698	Enable export mode .
3699	Returns a list of all checkers for this check
3700	Returns a list of checker names
3701	Returns a list of checkers .
3702	Expand a list of modules
3703	Set current module
3704	Checks the given astroid module .
3705	Report the evaluation of the evaluation .
3706	Handle help message .
3707	Print the full documentation .
3708	List messages
3709	list groups
3710	Wrapper around textwrap
3711	Get the module and frameid for the given node .
3712	Safely decode a line .
3713	Return True if base_name is in blacklist_re
3714	Register all plugins in a directory
3715	Convert a string to a comment .
3716	Format an option value .
3717	Format a section .
3718	Print the contents of an ini file .
3719	Insert a child at the given index .
3720	Append a child to this node .
3721	Return all parents of this node .
3722	Format the message .
3723	Return the content of a table .
3724	Generate content for layout .
3725	Collect block lines .
3726	Handle an ignored message .
3727	Register a report
3728	Make report sections .
3729	Add a new stats dictionary .
3730	Returns the name of the setter property .
3731	Get the setters property of a node .
3732	Determines if a return node is something
3733	Return list of possible exception types .
3734	Process a module .
3735	Process a Python module .
3736	Process comments .
3737	Check if the given statement is a future import statement .
3738	Check if a statement is in a for loop .
3739	Return the overridden method .
3740	Return the extra info for the given node .
3741	Detect if a node is global scope
3742	Check if a name is local
3743	Mark a node as consumed .
3744	Check for global variables .
3745	Return True if node is ignored .
3746	Check if the node has homonym in the function scope .
3747	Check for unpack - packing .
3748	Check for metaclasses
3749	Recursively find all packages in a directory
3750	Install pylint packages
3751	Run install_lib .
3752	Append similarities to a table .
3753	Main function .
3754	Add a new line from a stream .
3755	Compute the number of alleles .
3756	Print a list of similarities to stdout .
3757	Find the common lines between two lines .
3758	Iterate over all possible subsets
3759	Iterate over stripped lines .
3760	Create a dictionary of index tuples .
3761	Return True if the call is equivalent to the call .
3762	Checks whether two nodes are equal .
3763	Return True if the original parameter has the same default value .
3764	Determine whether two parameters are different .
3765	Safe inference call result .
3766	Mark a node as accessed .
3767	Check that the class def is valid .
3768	Check that the given node is consistent .
3769	Check that all bases are valid .
3770	Check for function def .
3771	Checks if a super call is overridden .
3772	Leave a function definition .
3773	Check for slots in slots
3774	Check if the first method is called .
3775	Check that all accessed members have been accessed .
3776	Check for abstract methods .
3777	Check the signature of a method .
3778	Check if node is a mandatory method parameter
3779	Check if the body is a raising statement .
3780	Check that the given node is valid .
3781	Visit function def .
3782	Display the report .
3783	Check if the node is a typing namedtuple .
3784	Check if the given node is an enum class .
3785	Check if the given node is a dataclass .
3786	Initialize the graph .
3787	Check that the classDef is too long .
3788	Leave a class definition .
3789	Visit if node .
3790	Check that the condition is too many boolean expressions .
3791	Check that the docstring in the docstring is correct .
3792	Formats the instance with the given template .
3793	Check if the token is a trailing comma .
3794	Check if the node is an elif node
3795	Check if the given node is simplified .
3796	Check for stop iteration .
3797	Return True if exception is inherited from stopiteration .
3798	Check for stop iteration .
3799	Check for nested blocks .
3800	Return a dictionary of types that are duplicated .
3801	Check if two or more instances are merging .
3802	Checks if the given node is a chained comparison .
3803	Check if the node is an or or not .
3804	Check that the return statements are consistent .
3805	Check if a return statement is ended .
3806	Check for loops .
3807	Check if the output format is available .
3808	Main entry point for the project .
3809	Write the dependencies of the graph .
3810	Write a diagram to the printer .
3811	Set the printer
3812	Set the VCG printer
3813	Return whether or not this rule should be emitted .
3814	Return a string describing this message .
3815	Get the environment variables .
3816	Run pylint on a file
3817	Run a python command .
3818	Extract cycles from a list of vertices .
3819	Get the source code .
3820	Generate the graph
3821	Print a section of a section .
3822	Register a message by id .
3823	Disable a message
3824	Enable a message .
3825	Get the symbol of a message
3826	Check if a message is enabled .
3827	Add a message .
3828	Print the full documentation
3829	Print checker documentation .
3830	Get the indent length of a line .
3831	Generate indentation message .
3832	Return line indentation .
3833	Handle a line start .
3834	Return the valid indentation strings for the given index .
3835	Returns the hanging indent .
3836	Return a continuation token for a given bracket .
3837	Push a token at the given position .
3838	Handle a new line .
3839	Check for keyword parentheses .
3840	Check if token is a valid type annotation .
3841	Check for equality .
3842	Check if the token is surrounded by a space .
3843	Visit a default statement .
3844	Check for multiple statements .
3845	Check that the lines are valid .
3846	Check that the indent level is correct .
3847	Check if the given node is in iterating .
3848	Check if the node is a conditional import
3849	Visit a name node .
3850	Add indexing errors .
3851	Visit an attribute .
3852	Unpack an exception handler .
3853	Check if raise value is valid .
3854	Find pylintrc
3855	Validate value .
3856	Expand the default value .
3857	Match a long option .
3858	Register options provider .
3859	Callback for setting a provider option
3860	Set the global value of an option .
3861	Generate config file
3862	Load configuration from config file
3863	Load command line options .
3864	Add a help section .
3865	Return the help text for this parser .
3866	Load defaults from options
3867	Get the attribute name for an option
3868	Get the definition of an option .
3869	Yield options grouped by section
3870	Check if the function is a bound method call .
3871	Check if the node is a complex format string .
3872	Initialize logging modules .
3873	Visit an ImportFrom node .
3874	Visit an Import node .
3875	Visitor for call .
3876	Check that the format_string argument is valid .
3877	Check if node is in loop .
3878	Return the parent for a break node .
3879	Determines if a loop is not early .
3880	Returns a list of property names for a given config .
3881	Determine the type of a function
3882	Generate a report based on type stats .
3883	Check if node is redefined by decorator
3884	Check if a call is a single argument
3885	Check that the starred node is a starred .
3886	Check for nonlocal and global variables .
3887	Check if the function is abstract .
3888	Check for an Else - on loop .
3889	Check if node is not in loop .
3890	Initialize the linter .
3891	Check for validity of expression .
3892	Check for lambda calls .
3893	Add an assert node .
3894	Check for duplicate keys .
3895	Check if node is unreachable
3896	Check if node is not in final body .
3897	Check if node is reversed .
3898	Check that the variable is a valid keyword .
3899	Check for validity of a node .
3900	Check the docstring of a node .
3901	Check that the literal is a valid comparison .
3902	Parse a subgraph .
3903	Parse a subgraph .
3904	Check if the module is too long .
3905	Add a checker .
3906	Recursively walk the AST tree .
3907	Add a relationship between two objects .
3908	Get a relationship from a given object .
3909	Return a sorted list of node names .
3910	Return a sorted list of all methods
3911	Add an object to the diagram .
3912	Return a list of class names for the given nodes .
3913	Returns a list of all classes in the document
3914	Return a class by name
3915	Returns the list of modules in this document
3916	Find a module by name
3917	Get a module by name .
3918	Add a dependency to a module
3919	Deletes the grant from the cache .
3920	Query for the model .
3921	Get user by username and password .
3922	Get an access token .
3923	Set a token
3924	Store a new grant .
3925	Get a client by id and code .
3926	Prepare a request .
3927	Initialize the extension
3928	Create a remote app with the given name .
3929	Make a request to the given URL .
3930	Authorization for OAuth2 .
3931	Handle an OAuth1 response .
3932	Handle an OAuth2 response .
3933	Handle an authorization response .
3934	Deprecated .
3935	Hash token .
3936	Create a new client with the given token .
3937	Create a new client .
3938	Temporarily disable insecure transport .
3939	Confirm the authorization request .
3940	Decorator to create a request token
3941	Get client secret .
3942	Get the request token secret .
3943	Get the secret for the access token .
3944	Get the default realms for a client .
3945	Get the realms of a request .
3946	Get the redirect uri for the given request .
3947	Get the RSA key for a client .
3948	Validate client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate a nonce .
3952	Validate a redirect_uri .
3953	Validate the realms .
3954	Validate a token
3955	Check if the request token is valid .
3956	Verify that the requested realms match the request .
3957	Save an access token .
3958	Save a request token .
3959	Save a verifier
3960	The URL for the error URI .
3961	Confirm an authorization request .
3962	Verify a signed request .
3963	Get client credentials from the request .
3964	Check if client authentication is required .
3965	Authenticate a client .
3966	Authenticate client with given client id .
3967	Get the scope of a refresh token .
3968	Confirm scopes for a refresh token
3969	Get the default redirect uri for a client .
3970	Get the default scopes for a client .
3971	Invalidate an access token
3972	Save an authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate a grant .
3977	Validate the grant type .
3978	Validate a refresh token
3979	Validate the response type
3980	Validate scopes .
3981	Validate username and password .
3982	Revoke an access token .
3983	Update request data .
3984	Convert keys to strings
3985	Change the authorization header .
3986	Register this instance to a remote app .
3987	Create a remote app .
3988	Extract request parameters .
3989	Convert a string to bytes .
3990	Decode a base64 - encoded string .
3991	Create a Response object .
3992	Get cached clients .
3993	Add a remote app .
3994	Add a remote application .
3995	Check if an exception is raised .
3996	Check the validity of the PKey
3997	Try to load private key
3998	Check if the load private key is incorrect
3999	This function checks if the load_private_private_PEMYPTED_PEMER_PEMYPTED_PEMYPTED_PEMENTRYPTED_PEMENTRYPTED_PEMENTRYPTED_PEMENTRYPTED_PEMYPTED_PEMENTRYPTED .
4000	Check the CRL .
4001	Check that the certificate was revoked .
4002	Create a certificate request .
4003	Create a certificate .
4004	Returns a decorator that can be used as a decorator .
4005	Load verify locations .
4006	Set the password callback .
4007	Sets a certificate chain from a certificate chain file .
4008	Use the certificate file to use .
4009	Use the certificate to use .
4010	Add an extra chain certificate .
4011	Sets a private key from a private key file .
4012	Use private key to use private key .
4013	Load a certificate list from a certificate file .
4014	Set the depth of the certificate .
4015	Load a temporary dh file .
4016	Set the cipher list .
4017	Set certificate list .
4018	Add a certificate to the client .
4019	Set the TLSExt_name callback .
4020	Set the TLSExt use .
4021	Set the next NPNP select callback .
4022	Set the SSL protocol for the certificate .
4023	Set an ALPN select callback .
4024	Set the OCSP callback .
4025	Register an OCSP server callback .
4026	Register an OCSP client callback .
4027	Set the SSL context .
4028	Return the host name of the certificate .
4029	Set the TLSExt host name .
4030	Receive data from the socket .
4031	Receive data from the socket .
4032	Read data from the socket .
4033	Attempt to renegotiate the connection .
4034	Closes the SSL connection .
4035	Returns a list of cipher strings .
4036	Return a list of certificates for the client .
4037	Set SSL state .
4038	Return a random number from the server .
4039	Return a random number from the client .
4040	The master key .
4041	Exports a key to a byte string .
4042	Return a new session .
4043	Returns the current cipher name .
4044	Returns the current cipher bits .
4045	Returns the current cipher version .
4046	Returns the protocol version name .
4047	Return the next negotiated protocol .
4048	Set the SSL protocol for the certificate .
4049	Return the certificate negotiated by the SSL protocol .
4050	Create a new buffer .
4051	Convert a BIO object to a string .
4052	Set the ASN_TIME parameter .
4053	Convert a timestamp to an ASN time string .
4054	Get an elliptic curve by name .
4055	Dump a public key .
4056	Load a public key from a buffer .
4057	Sign data using a private key .
4058	Verify a data signature .
4059	Dump a certificate .
4060	Return a cryptography key .
4061	Generate a new private key .
4062	Check if the key is valid .
4063	Load a set of elliptic curves .
4064	Get the list of elliptic curves .
4065	Return an EC key .
4066	Derive the certificate string .
4067	Returns a list of component components .
4068	Returns the short name of the certificate .
4069	Return the data as a string .
4070	Convert this certificate to a cryptography object .
4071	Set the public key .
4072	Return the public key of the certificate .
4073	Return the name of the certificate .
4074	Add extensions to the certificate .
4075	Returns the list of extensions supported by this request .
4076	Verify a certificate .
4077	Convert this certificate to a cryptography object .
4078	Set the certificate .
4079	Return the public key of the certificate .
4080	Set the public key .
4081	Sign a message using a private key .
4082	Returns the signature of the certificate .
4083	Return the MD5 digest of the certificate .
4084	Set the certificate number .
4085	Return the serial number of the certificate .
4086	Adjust the gmtime of the certificate .
4087	Adjust the gmtime of this certificate .
4088	Checks if the token has expired .
4089	Returns the issuer name for this certificate .
4090	Set the certificate name .
4091	Returns the name of the certificate .
4092	Set the name of the certificate .
4093	Add extensions to the certificate
4094	Return the extension at the specified index .
4095	Add a certificate to the store .
4096	Add a certificate .
4097	Set the time of the certificate .
4098	Initialize the certificate .
4099	Return an X509ContextError from the store .
4100	Verify the certificate .
4101	Set the serial number of this certificate .
4102	Return the serial number of this certificate .
4103	Set the reason .
4104	Return the reason of the certificate .
4105	Set the revocation date of the certificate
4106	Convert this certificate to a cryptography list .
4107	Get the revoked certificates .
4108	Return the issuer of the certificate .
4109	Sign a certificate .
4110	Exports a certificate .
4111	Returns the name of the type .
4112	Set certificates for this certificate .
4113	Exports the certificate .
4114	Sign a key using a private key .
4115	Verify a key .
4116	Encode a private key .
4117	Return the public key .
4118	Set the public key .
4119	Return an exception from the queue .
4120	Convert an object to bytes .
4121	Factory function for print_token .
4122	Return service metadata .
4123	Yield issues for each card
4124	Return annotations for a card
4125	Get all boards
4126	Get list of lists
4127	Get a list of cards
4128	Get comments for a card
4129	Construct the URL for the API .
4130	Wrapper for getter
4131	Convert Link field to dict .
4132	Returns a mapping of issues to repositories
4133	Return a list of Requests for the given tag
4134	Aggregate remote issues .
4135	Returns the value of the given key or default if it doesn t exist .
4136	Return a dictionary of templates for this task .
4137	Validate that the service config is valid .
4138	Returns True if the issue should be included .
4139	Generates a table from a list of lists .
4140	Evaluate the given command .
4141	Return an integer or None .
4142	Pull bugwarrior packages .
4143	Get data from url
4144	Gets a collection from the API
4145	Find the unique UUID for the given issue .
4146	Merges the left field with the given field .
4147	Build uas config overrides
4148	Parse sprint string .
4149	Get the credentials from the credentials_path .
4150	Calculates R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R .
4151	Calculate p - values from a set of genes .
4152	Calculate the F - FDR correction .
4153	Compute the z - score of the data .
4154	Plot a heatmap .
4155	Adjust the ticks of the axes .
4156	Prepare the argument parser
4157	Adds a parser for prerank tool .
4158	Add a subparser to the subparsers
4159	Adds a parser for the enrichr command .
4160	Generate an enrichment score for a gene set
4161	Generate a ranking metric .
4162	Calculates the ranking for the given dataframe
4163	Calculate the p - value of the p - value
4164	Compute the gsea - p - value of the gsea - p - values
4165	Returns a pandas DataFrame containing allMart names and descriptions
4166	Get all datasets
4167	Returns a DataFrame containing all the attributes of the dataset
4168	Returns a pandas DataFrame of filters
4169	Query Biomart database .
4170	Run GSEA clustering
4171	Runs the SSGSEA algorithm
4172	Run prerank .
4173	Generate a replot for the given indir .
4174	Set the number of cores to use .
4175	Load gene sets
4176	Returns a list of library names
4177	Download and generate gene sets
4178	Calculate the heatmap
4179	Save results to output directory
4180	Load gene expression data .
4181	Run the GSEA model
4182	Run GSEA clustering .
4183	Runs the Gsea_compute_compute method
4184	Calculate the enrichment score for each gene .
4185	save results to a file
4186	Parses the GSEA model and calculates rank metrics
4187	Run Enrichr
4188	Parse gene sets
4189	Parse the gene list .
4190	Send a list of genes
4191	Check if a list of genes are recognized by Enrichr
4192	Return a pandas DataFrame containing the background genes .
4193	Run the Enrichr server
4194	Create a cube from a script .
4195	Generate an icosphere script .
4196	Generate a torus filter
4197	Draws a plane on a plane
4198	Draw a cube script .
4199	Return the color values for a color .
4200	check if var is a list
4201	Turn a variable into a list .
4202	write a filter script to a mlx filter script
4203	Generate an ls3 loop .
4204	Generate merge vertices .
4205	Closes holes in the script .
4206	Split vertices incident on NonManifold faces .
4207	Add Snap Mismatched Borders filter to script .
4208	Translates a script into a script .
4209	Rotate a script .
4210	Scale a script .
4211	Calculate the cylindrical function of a cylinder .
4212	Convert a cylindrical string to a cylinder .
4213	Generate a bend script .
4214	Function to deform a torus curve
4215	Convert a script to a tex file .
4216	Convert a mesh script to a CFC
4217	Run a uniform resampling script .
4218	Generate a ScreenedSurface .
4219	Generate a voronoi plot
4220	Select all faces in the script .
4221	Generate a filter for a VEX query
4222	Add conditional function to script .
4223	Add a vertex function to the script .
4224	Add vertices to a cylindrical script .
4225	Execute a spherical vertex script .
4226	Convert a list of Layers to XML
4227	Rename the current layer
4228	Changes the current mesh .
4229	Duplicate the current layer .
4230	Delete lower script .
4231	Handle an error .
4232	Load a filter script .
4233	Add a layer to the stack .
4234	Delete a layer
4235	Save filters to file
4236	Run the meshlab server
4237	Generate a circle
4238	Run hausdorff distance
4239	Run a Poisson disk .
4240	Generate a mesh element .
4241	Generate a clustered vertices .
4242	Add a flat plane to the script .
4243	Add triangles to the given script .
4244	Generate a Voronoi plot from a script .
4245	Calculate the topology of a script .
4246	Parse the ml_log file .
4247	Parse Hausdorff output .
4248	Generate a function from a script
4249	Generate a voronoi script .
4250	Generate a cyclic rainbow .
4251	compute the tangent function
4252	Return the cross product of two vectors .
4253	Multiply a scalar .
4254	Add a new per vertex attribute to the script .
4255	Flip faces in script .
4256	Generate a filter for point sets .
4257	Run a taubin filter .
4258	Generate a depth filter .
4259	Sort polygons in a file .
4260	Measure the topology
4261	Measure all the geometries in the input file
4262	Measure the dimensionality of a layer
4263	Convert filename to lowercase .
4264	Patch the request s request_class .
4265	Return the configuration for a set .
4266	Configure uploads .
4267	Return the current upload configuration
4268	Returns the URL for the uploaded file .
4269	Returns the path to the destination folder
4270	Check if the given extension is allowed .
4271	Resolve a conflict if it exists .
4272	Extract version info from a vprof file .
4273	Remove duplicates from a list of objects .
4274	Returns the difference between two objects .
4275	Format the object count as a list of objects .
4276	Trace memory usage .
4277	Returns a list of tuples representing the code events of the code .
4278	The total overhead of the object .
4279	Compute the memory overhead .
4280	Profile the package .
4281	Profile the module .
4282	Profile the function execution .
4283	Profile profiling .
4284	Return a set of all modules in a package .
4285	Run a function in a separate separate process .
4286	Get the type of a run object
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the profile .
4290	Replace the sys . argv with the current run object .
4291	Sample from frame .
4292	Insert a stack into the call tree .
4293	Recursively fill the sampleCount field
4294	Recursively formats a tree .
4295	Return a summary of the call tree .
4296	Profile the package .
4297	Profile the module .
4298	Profile the function .
4299	Transform profiler stats into a sorted list of tuples .
4300	Return a dict with profiling information .
4301	Profile the module .
4302	Profile the function .
4303	Initialize the database
4304	Show the guestbook .
4305	Add a new entry .
4306	Handler for profiling .
4307	Start an HTTP server .
4308	Handle the root file .
4309	Return content and extension .
4310	Handle GET requests .
4311	Handles POST requests
4312	Send a response .
4313	Check if the given module_path is a standard directory .
4314	Record the line of a line .
4315	Yield the lines that are not standard library .
4316	Calculate the runtime statistics .
4317	Skip lines in src_code .
4318	Return a dict of profile information for the run .
4319	Format a heatmap file
4320	Profile the module .
4321	Profile the function .
4322	Run all available profilers .
4323	Runs a function and returns the result .
4324	Predict_proba for X .
4325	Predict log probabilities for X .
4326	Fit the model .
4327	Count the number of documents in the analyzed_docs .
4328	Sort features in vocabulary .
4329	Limit features to the given vocabulary .
4330	Fit the model to X .
4331	Transforms a Z matrix into a sparse matrix .
4332	Convert to Scikit .
4333	Fit the model using Spark .
4334	Wrapper for Spark prediction .
4335	Fit the linear regression .
4336	Fit the model
4337	Fit the last step
4338	Compute the score of the model
4339	Fit the model
4340	Score an estimator .
4341	Fit k - means clustering
4342	Predict values for X .
4343	Predict class labels .
4344	Check the dtype of an RDD .
4345	Compute the vocab .
4346	Fit the model
4347	Fit the SVD to X .
4348	Applies a truncated SVD .
4349	Wrapper for _block_collection .
4350	blocks a tuple with dtypes
4351	Block an RDD .
4352	Return a new RDD of this RDD .
4353	Return the shape of the RDD .
4354	Convert the RDD to a numpy array .
4355	Applies a transformation function to the table .
4356	Return the bitperm of a stat .
4357	Return True if path is only writable .
4358	Check the configuration file
4359	Read config from file
4360	Run a command as a command
4361	Execute a command .
4362	Execute a command
4363	Validate the configuration .
4364	Returns the headers of the request .
4365	Returns the body of the request .
4366	Returns the URL for the ExecuteAsistant assistant .
4367	Returns the URL for the request .
4368	Return the text for a packet
4369	Print packet information .
4370	List devices .
4371	Execute the device
4372	Send a confirmation message .
4373	Called when a device is pushed .
4374	Execute a device
4375	Run all devices .
4376	Convert a transaction to a Posting object .
4377	Find the ledger file
4378	Check for compatibility
4379	Get the long description from the README . md file .
4380	Create a PrecalculatedTextMeasurer from a json file .
4381	Return the default settings .
4382	Generates a badge .
4383	Generate a list of supported characters .
4384	Generate encodeable characters .
4385	Return a mapping of characters to length width .
4386	Write a JSON file to a JSON file .
4387	Convolve a 2D image with a gaussian kernel .
4388	Returns Gaussian kernel
4389	Convert an image to grayscale
4390	Main function for pyssim
4391	Calculate the sim value of the image
4392	Compute the SSIM between two images .
4393	Destroy the container .
4394	Set code version .
4395	Get the status of the node .
4396	print the current status
4397	Convert a connection to a Node object .
4398	Try to bind the transport if necessary .
4399	Called when a new connection is received .
4400	Called when an incoming message is received .
4401	This function is called when a command is received
4402	Return whether the node should connect to this node .
4403	Try to connect to node if necessary .
4404	Called when a connection is established .
4405	Called when a message is received .
4406	Called when a connection is disconnected .
4407	Add a node to the peer .
4408	Drop a node from the pool .
4409	Sends a message to a node
4410	Destroys this node .
4411	Put an item into the queue .
4412	Put an item into the queue .
4413	Get the next item .
4414	Attempt to acquire a lock .
4415	Returns whether a lock is acquired .
4416	Release a lock
4417	Decorator to log an error
4418	Decorator for views that require a token .
4419	Set the hosts for the given hosts .
4420	Create indexes .
4421	Migrate all indexes to a new index
4422	Strip org_name from report_name
4423	Save aggregate reports to Kafka
4424	Extract XML from a file - like object .
4425	Parse an aggregate report file
4426	Convert a list of forged reports to CSV
4427	Parse an aggregate report file
4428	Get IMAP capabilities .
4429	Save results to output_directory .
4430	Returns a zip file containing the results of the zip file .
4431	Email the results of the DMARC model .
4432	Save aggregated reports to Splunk
4433	Savensics reports to Splunk
4434	Decode a base64 - encoded string .
4435	Get the base domain .
4436	Return the hostname of an IP address
4437	Convert a human - readable timestamp to a datetime object .
4438	Download a GeoIP address .
4439	Get information about an IP address
4440	Convert an email message to RFC822 format .
4441	Convert a string to a list .
4442	Parse a report file
4443	Drain the client .
4444	Publish a message to a subject .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from a subscription .
4449	Send ping messages .
4450	Select next server .
4451	Process an error message .
4452	Process an op error .
4453	Return the command line options .
4454	Process a pong .
4455	Process a message .
4456	Process info from server
4457	Process incoming connection .
4458	Flusher .
4459	Read messages from the socket .
4460	Perform coactivation on a dataset
4461	Decode image images .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Calculate the Pearson correlation coefficient .
4465	Return the dot product of the images .
4466	Select features from features .
4467	Return a list of studies based on the given masks .
4468	Get the list of features in the given dataset .
4469	Classify a dataset using the given masks .
4470	Classifier for classification .
4471	Fit the model
4472	Set the class weight
4473	Fit cross - validation .
4474	Fit a dataset to a dataset
4475	Average images within a dataset .
4476	Returns n_voxels from the dataset
4477	Returns a list of top words .
4478	Calculate Pearson correlation coefficient .
4479	Calculate fdr value
4480	Load activations from file .
4481	Create the image table
4482	Return a list of studies for the given features .
4483	Add a list of features to the dataset .
4484	Returns a list of feature names .
4485	Returns a dictionary mapping feature names to their counts .
4486	Loads the dataset from a pickle file .
4487	Save the dataset to a file .
4488	Get image data .
4489	Get feature data .
4490	Returns the names of the columns ordered by the given features .
4491	Get the ids of the ids above the given threshold .
4492	Searches for features that match a string .
4493	Returns a list of ids matching the expression .
4494	Convert SDF to sparse matrix .
4495	Mark a function as deprecated .
4496	Transform a Foci using a matrix .
4497	Convert foci to matrix
4498	Apply a transformation to the FOC .
4499	Mask image .
4500	Get the mask of the image
4501	Load image images .
4502	Save image to file .
4503	Set the logging level
4504	Expand an address .
4505	Convert a string to a list of tokens .
4506	Parse an address .
4507	Calculate the near - duplicate hashes .
4508	Convert a dict to a namedtuple .
4509	Get the price for a ticker
4510	Returns a pandas DataFrame containing the data for the given tickers .
4511	Get bulk news
4512	Make a request to the API .
4513	Get bearer info .
4514	Send a request to the given route .
4515	Get the track s tracks .
4516	Get a specific artist .
4517	Get the album s albums .
4518	Get the artist s top tracks .
4519	Get the artists related to a artist .
4520	Get a list of artists from a Spotify artist .
4521	Get information about a category .
4522	Returns a list of playlists for a category
4523	Return a list of categories .
4524	Return a list of featured playlists .
4525	Return a paginated list of new releases .
4526	Search for recommendations .
4527	Returns a list of artists following the given artists or users .
4528	Get the albums for this artist .
4529	Get all albums for this artist .
4530	Get the total albums for this artist .
4531	Return a list of artists related to this artist .
4532	Return currently playing .
4533	Get current player .
4534	Get available devices .
4535	Return a list of recently played tracks .
4536	Replace tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a playlist .
4539	Get a list of playlists .
4540	Get tracks for this album .
4541	Get all tracks .
4542	Returns an OAuth2 URL .
4543	Get an album .
4544	Get an artist by ID .
4545	Get a track by ID .
4546	Get a specific user .
4547	Get a list of albums .
4548	Get a list of artists .
4549	Search for songs .
4550	Convert a string to an identifier .
4551	Assert that the function has the given attribute .
4552	Create a client from a client .
4553	Build a URL for the OAuth2 client .
4554	Return a dictionary of credentials .
4555	String representation of this query .
4556	Build a list of Playlists .
4557	Return a list of tracks for this playlist .
4558	Resume playback .
4559	Transfer a player to the current user .
4560	Retrieves an object from a URL .
4561	Get the current request .
4562	Convert the year month to a string .
4563	Recursively walk through PyFunceble
4564	Check if the current version is greater than the current version
4565	Check if the current branch is a development version
4566	Return True if the deprecation deprecation deprecation .
4567	Backup the configuration .
4568	Restore the database .
4569	Return True if line is to ignore .
4570	Return list of domain options .
4571	Extract base from url .
4572	Recursively formats a string into a list .
4573	Access the resource .
4574	Get the current code .
4575	Check if a domain is valid
4576	Check if a domain is a subdomain
4577	Checks if an IP address is valid
4578	Check if given ip is a valid IPv4 address .
4579	Check if URL is valid
4580	Load the configuration .
4581	Stops a random number of times .
4582	Check if a URL is downloaded
4583	Check entry management URL .
4584	Print the header .
4585	Processes a file .
4586	Check for validity of a domain .
4587	Check if url_to_test is valid .
4588	Prints the logo .
4589	Returns the domain as a string .
4590	Extract domain from file .
4591	Takes a list of files and returns a list of filenames
4592	Return a list of file URLs .
4593	Switch the current state .
4594	Return the current status of the API .
4595	Generate status file
4596	Get the structure of the build .
4597	Create a directory .
4598	Delete all theeded files
4599	Parses the path_to_config and returns a tuple with the path separator .
4600	Load a configuration file
4601	Download the production config
4602	Download the IANA config file .
4603	Download PLSL .
4604	Install directory structure .
4605	Merge values from upstream config
4606	Load a configuration key .
4607	Split a version string into digits and non - digits .
4608	Check if local and upstream versions are newer
4609	Check if the project is cloned
4610	Handle non - exist index .
4611	Return the directory of the Analytics host .
4612	Output the status of the report .
4613	Displays a status file
4614	Determine if the domain should be generated .
4615	Add a list of extensions to the database
4616	Loads the database
4617	Convert an element to a regular expression .
4618	Sort an element .
4619	Load the IANA database .
4620	Get the referer for a given extension .
4621	Yield extended extensions .
4622	Update the iana - domains - db
4623	Mine to_get .
4624	Retrieves data from JSON .
4625	Backup mined data
4626	Add one or more files
4627	Remove the bare metal .
4628	Returns a list of mined files
4629	Process the blockchain .
4630	Get content from file
4631	Write content to file
4632	Write the datapoint to the log file .
4633	Extract the expiration date .
4634	Called when a file is not found .
4635	Write the header .
4636	Construct a tuple of header size and column separator .
4637	Return the header of the response .
4638	Construct a dictionary with the size of the data
4639	Return the size of the given header .
4640	Colorify data .
4641	Print data to JSON .
4642	Return the data to be printed .
4643	Saves the object to the file
4644	Calculate time difference between start and end dates
4645	Format the execution time .
4646	Return list of files to delete .
4647	Return the list of databases to delete .
4648	Delete all files
4649	Hash the file
4650	Hash the data .
4651	Get the hash .
4652	Execute the command .
4653	Remove a key from the main dictionary
4654	Rename a key
4655	Recursively merge dictionaries
4656	Save the dictionary to a JSON file .
4657	Save the main dictionary to a YAML file .
4658	Convert a path to a directory .
4659	write data to file
4660	Read file contents .
4661	Return a sorted list of strings
4662	Merge another list into one .
4663	Returns a list of the elements that are not matching .
4664	Match the pattern .
4665	Return a copy of this substring .
4666	Count tests .
4667	Calculate the percentage of elapsed time .
4668	Logs the report .
4669	Check if a URL is valid .
4670	Check if a domain is valid .
4671	Check if this element is a subdomain .
4672	Return the current status of the test .
4673	Reformat the historical formating error .
4674	Retrieve the database .
4675	Backup the database .
4676	Return the current timestamp .
4677	Return the content of the inactive database .
4678	Check if the database is present
4679	Retrieve the whois_db
4680	Backup the user s authorization database .
4681	Check if the user is in the database
4682	Checks if the file is older than the timestamp
4683	Return the expiration date of the file
4684	Add a token to the database .
4685	Set travis permissions .
4686	Run travis
4687	Start the namespace lookup
4688	Connect to a Whois server .
4689	Return current URL .
4690	Return the referer for this domain .
4691	Get current object
4692	Return a generator of paths to standard paths .
4693	Generate package names .
4694	Yield line numbers
4695	Yield unused import module name and module name .
4696	Yield line numbers
4697	Generator for ImportStarUsage
4698	Yield line numbers from messages .
4699	Yield duplicate key line numbers
4700	Create a dictionary of messages .
4701	Check the given source .
4702	Extract package name from a line .
4703	Checks if a line is a multiline import
4704	Check if a line is a multiline statement .
4705	Filter from an import line .
4706	Break an import from a line .
4707	Remove unused imports .
4708	Return a dictionary of messages grouped by line number .
4709	Remove any imported star import from a line .
4710	Remove duplicate key .
4711	Determine if a dict entry contains a key .
4712	Return whether the value is a literal or not .
4713	Generate line numbers for a pass .
4714	Return a generator that yields useless line numbers .
4715	Return the indentation of a line .
4716	Return the end of a line .
4717	Filter source code .
4718	Split a comma separated string .
4719	Check if filename is a python file .
4720	Check if filename is in exclude .
4721	Find all files in a directory recursively .
4722	Main entry point .
4723	Reads ObtainLeaseResponsePayloads from a stream .
4724	Write the ObtainLeaseResponsePayload to a file .
4725	Writes the payload to the given stream .
4726	Read this CancelResponsePayload from a stream .
4727	Create a new name .
4728	Read digest from stream .
4729	Write digest to file .
4730	Create a Digest object .
4731	Read application specific information .
4732	Write the application specific information to a stream .
4733	Create a ApplicationSpecificInformation object .
4734	Reads the DerivationParameters from the input stream .
4735	Write the DerivationParameters to a file .
4736	Reads the GetRequestPayload payload from a stream .
4737	Write the GetRequestPayload payload to a file .
4738	Reads the GetResponsePayload from a stream .
4739	Writes the payload to a file - like object .
4740	Reads this SignatureVerifyRequest payload from the input stream .
4741	Writes the data to a file - like object .
4742	Read this SignatureVerifyResponsePayload from a stream .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Gets the attributes of a managed object .
4747	Returns the attribute value for a managed object .
4748	Sets the attributes on the managed object .
4749	Sets the value of the attribute on the managed object .
4750	Checks if the given policy is allowed for the given object .
4751	Write the decrypted payload to a file .
4752	Create a new key .
4753	Set a configuration setting .
4754	Load the server configuration file .
4755	Process a bind parameter .
4756	Return a list of cryptographic usage masks .
4757	Read Long integer from stream .
4758	Write the long integer to the stream .
4759	Check that the value is valid .
4760	Read a big integer from a stream .
4761	Write a BigInteger to a file stream .
4762	Ensure that the field is valid .
4763	Validate that the field is valid .
4764	Read boolean value from stream .
4765	Write boolean value to stream .
4766	Write boolean value to file stream .
4767	Check that the field is valid .
4768	Read an Interval from a stream .
4769	Validate the interval .
4770	Return the key wrapping data .
4771	Set the key wrapping data .
4772	Validate the key value .
4773	Validate the secret data type .
4774	Validate that the data is valid .
4775	Convert an attribute name to a tag name .
4776	Convert an attribute tag to its name .
4777	Returns a bit mask from an enumerations .
4778	Returns a list of enumerations from an enumeration .
4779	Check if a bit mask is a bitmask .
4780	Read this CreateKeyPairRequest .
4781	Writes the template to a file .
4782	Read the CreateKeyPairResponse payload .
4783	Write this KeyPair to a file .
4784	Reads the GetAttributeListRequest payload from the input buffer .
4785	Write the GetAttributeListRequest payload to a file .
4786	Read the GetAttributeListResponse payload .
4787	Write this GetAttributeList response to a file .
4788	Returns a list of json files
4789	Scan policy directory for policies .
4790	The run method .
4791	Get a certificate from a connection
4792	Get extended key usage from certificate .
4793	Get common names from certificate .
4794	Returns client identity from certificate .
4795	Read the CreateRequestPayload payload from the input buffer .
4796	Write this object to a file .
4797	Read the CreateResponsePayload payload .
4798	Writes the create response payload to a file .
4799	Convert an object to a core key
4800	Read the EncryptResponsePayload from a stream .
4801	Reads the DeriveKey request payload .
4802	Write this DeriveKey to a file .
4803	Returns whether the attribute supports the given attribute .
4804	Returns True if attribute is deprecated .
4805	Returns whether the attribute is applicable to the given object type .
4806	Returns whether the attribute is a multivalued .
4807	Get the valid value for a given config option .
4808	Read CheckResponsePayload .
4809	Write this CheckResponsePayload to a file .
4810	Read this AttributeReference from a file .
4811	Write this AttributeReference to a file .
4812	Read Attributes from a stream .
4813	Write this Attributes object to a file .
4814	Read a Nonce from a stream .
4815	Write the nonce to a file .
4816	Reads the Username PasswordCredentialCredential from a stream .
4817	Write the username and password .
4818	Read this DeviceCredential from a stream .
4819	Write this device to a stream .
4820	Reads this Credential from the input stream .
4821	Write the Credential to a file .
4822	Read MACSignatureKey information from a stream .
4823	Write the MAC signature to a file .
4824	Read KeyWrapData from input stream .
4825	Write the MAC address to a stream .
4826	Read this KeyWrapSpecification from a stream .
4827	Write this struct to a file .
4828	Read extension information from a file .
4829	Write the extension information to a stream .
4830	Create an extension .
4831	Read this RevocationReason .
4832	Write revocation code to file .
4833	Validate the revocation code
4834	Reads the ObjectDefaults from a file .
4835	Write the objectDefaults to a file .
4836	Reads DefaultsInformation from a file .
4837	Writes the DefaultsInformation structure to a file .
4838	Reads the parameters from an input buffer .
4839	Writes the object to a file .
4840	Read ProfileInformation from a file .
4841	Write the profile information to a file .
4842	Write this ValidationInformation structure to a file .
4843	Reads the CapabilityInformation from the input buffer .
4844	Write the capabilities to a file .
4845	Stop the server .
4846	Start the server .
4847	Read LocateRequestPayload payload from input buffer .
4848	Write this object to a file .
4849	Read LocateResponsePayload from a file .
4850	Write the LocateResponsePayload to a file .
4851	Create a new symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a HMAC code .
4854	Encrypts a message using the given encryption algorithm .
4855	Encrypt a plain text using a symmetric encryption method .
4856	Encrypt a plaintext with the given padding method .
4857	Decrypts the cipher_text with the given padding method .
4858	Create an RSA key pair .
4859	Derives a key from the private key .
4860	Create RSA private key from bytes .
4861	Verify a message .
4862	Read this SignResponsePayload from a stream .
4863	Write this sign response to a file .
4864	Reads the GetUsageAllocationRequestPaymentRequest .
4865	Converts a protocol version to a KMIP version .
4866	Read ProtocolVersion from input stream .
4867	Write protocol version to file .
4868	Read Authentication from a stream .
4869	Writes the Authentication struct to a file .
4870	Read PollRequestPayload payload from input stream .
4871	Read Certificate from file .
4872	Write the certificate to a file stream .
4873	Authenticate using the SLUGS URL .
4874	Read this ArchiveResponsePayload from a stream .
4875	Writes the payload to a file .
4876	The main loop .
4877	Read this RekeyResponse payload from the input stream .
4878	Returns whether or not the given conformance clause is supported .
4879	Derive a key .
4880	Returns a list of attributes for a group .
4881	Returns a list of all the attributes of a group .
4882	Query DynamoDB .
4883	Sign data .
4884	Open the client .
4885	Closes the connection .
4886	Create a new key policy .
4887	Creates a new key pair .
4888	Registers a managed object .
4889	Rekey a unique identifier .
4890	Derives a key from a unique identifier .
4891	Locate a bucket .
4892	Checks the availability of a resource .
4893	Gets a Kmip object .
4894	Returns the attributes of a Kmip device .
4895	Activate a Kmip device .
4896	Revokes a Revocation .
4897	Compute the MAC using the Kmip MAC .
4898	Builds the cryptographic parameters .
4899	Builds an EncryptionKeyInformation object from a dictionary .
4900	Build a MAC signature key .
4901	Builds a key wrapping specification .
4902	Build a list of common attributes .
4903	Builds a list of name attributes .
4904	Read this QueryRequestPayload payload .
4905	Write the query request payload to the output buffer .
4906	Write this object to a file .
4907	Reads the GetAttributesResponse payload from a file .
4908	Writes the GetAttributesResponse payload to a file .
4909	Get a single entry point from a group .
4910	Gets a group by name
4911	Return a list of entries for a group
4912	Load the module
4913	Create an EntryPoint from a string .
4914	Run livereload .
4915	Generate project .
4916	Generate a controller .
4917	Generate action .
4918	Generate a form .
4919	Generate model .
4920	Generate macros .
4921	Make a directory p .
4922	Rewrite src_file to dst_file .
4923	Return a string representation of a time .
4924	Check if URL is valid .
4925	Encode something as a string .
4926	Decodes a string into a dict .
4927	Decorate a function to return a JSON response .
4928	Returns the absolute URL for the given endpoint .
4929	Load config from environment
4930	Set a user in session
4931	Return the current user
4932	Create a Flask application
4933	Register jinja2 environment
4934	Register Flask routes .
4935	Register error handler .
4936	Register before request
4937	Write a DataFrame to a CSV file .
4938	Create a pandas dataframe from a CSV file .
4939	Serializes a dataframe into a DataFrame .
4940	Deserializes a dataframe from a reader .
4941	Updates this field from a dataframe .
4942	Updates this field from raw_data .
4943	Returns the URL for the contents of the file .
4944	Add a new entry from a dataframe .
4945	Add a new entry from raw data .
4946	Opens the intermediate dataset .
4947	Read the intermediate dataset as binary data .
4948	Read the intermediate data as text .
4949	Return a pandas DataFrame as a pandas DataFrame .
4950	Returns an intermediate dataset .
4951	Returns all experiments in a workspace
4952	Returns a list of all datasets in the workspace
4953	Returns a single dataset
4954	Decorator to publish files .
4955	Decorator to publish a service .
4956	Decorator for type annotations .
4957	Decorator to annotate a function .
4958	Attach a function to a function .
4959	Find all globals in the code .
4960	Returns a copy of the pen
4961	Look up a color .
4962	Draws a cr .
4963	Calculate the Bernstein -stein extrema .
4964	Convenience function to calculate the Robuststein value
4965	Build the choices for the sitetree .
4966	Return a function to get options from command options .
4967	Register a function to be called when an item is received .
4968	Compose a sitetree .
4969	Initialize the cache
4970	Empty the sitetrees
4971	Get an entry from the cache
4972	Update an entry in the cache
4973	Set an entry in the cache .
4974	Initialize the view .
4975	Resolve an aliased tree alias .
4976	Returns whether the current app is an admin .
4977	Calculate the depth of an item
4978	Return the current item of the tree .
4979	Returns the URL for a sitetree item .
4980	Initialize a sitetree .
4981	Get the attribute value for the current page .
4982	Get the ancestor level of the item
4983	Render sitetree
4984	Check if the user can access this item .
4985	Return a list of breadcrumbs
4986	Return a list of sitetree items
4987	Renders the children of a parent item
4988	Return the children of the given item .
4989	Update the has_children attribute of a tree item .
4990	Filter items according to navigation_type
4991	Returns the parent item of the given base_item
4992	Create a tree climber
4993	Resolve a variable
4994	Render a sitetree tree .
4995	Displays the children of a menu item .
4996	Display a sitetree breadcrumbs .
4997	Displays the sitetree menu .
4998	Render a sitetree .
4999	Create a template for a tag .
5000	Return the URL for a model .
5001	Registers the tree admin .
5002	Handle redirects .
5003	Redirect to the next item .
5004	Redirect the user to the post .
5005	Redirect the tree item to the admin .
5006	Returns the form for the tree item .
5007	Return a tree object for the given item .
5008	Moves an item to the given tree
5009	Save the model
5010	Returns the urls for this admin .
5011	Dump all sitetrees .
5012	Create a tree object
5013	Create a tree item
5014	Import the sitetree module .
5015	Returns the model class for the given settings entry .
5016	Create a Config from a mapping .
5017	Load a configuration from a Python file .
5018	Load a config from a TOML file .
5019	Create a Config from an object .
5020	Create ZipkinAttrs for a span .
5021	Create HTTP headers for a new span .
5022	Returns the current span for this span .
5023	Start the current span .
5024	Stops the logging context .
5025	Update binary annotations .
5026	Add a binary annotation to the client .
5027	Override the name of the span .
5028	Create an Endpoint instance .
5029	Returns a copy of the given endpoint with the given name .
5030	Convert this span to a v1 span .
5031	Encode a list of spans .
5032	Create a protobuf span .
5033	Convert hexadecimal id to binary and low ids .
5034	Return the protobuf type for the given kind .
5035	Convert an endpoint to a zipkin endpoint .
5036	Convert annotations to zipkin_pb2 .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an Endpoint object .
5040	Copy an endpoint with the given name and port .
5041	Build annotation list .
5042	Build list of binary annotations .
5043	Create a new span .
5044	Convert a Thrift Span to bytes .
5045	Encode a list of Thrift objects .
5046	Detect the encoding of a span .
5047	Convert a list of spans to a string .
5048	Deprecated .
5049	Encodes a span into a Thrift Span .
5050	Create a JSON Endpoint for the given endpoint .
5051	Encode a single span .
5052	Decodes a list of spans .
5053	Convert a ThriftEndpoint object into an Endpoint object .
5054	Decode a Thrift annotation .
5055	Convert a Thrift binary annotation to a dict .
5056	Decode a Thrift Span into a Span object .
5057	Convert a trace_id to a string .
5058	Convert an unsigned long integer to lower hex .
5059	Writes a hex value to the given position .
5060	Fix up date to max month .
5061	Set transaction_code
5062	sets the iph_id field
5063	Sets the tnr value of a tag
5064	Parses the given string into a list of tags .
5065	Parse an MT940 transaction file .
5066	Join a string .
5067	Return the text of a response .
5068	Print a warning about a ratelimit quota .
5069	Send a request to the API
5070	Get information about a bot
5071	Get all bots .
5072	Read a term from the stream .
5073	Write a message to the stream .
5074	Close the stream .
5075	Decode a string .
5076	Encode a term .
5077	Add an address to the multicast server .
5078	Send pending messages .
5079	Register a callback for the remote serviceHello .
5080	cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given the TYPES and SCOPES in a TIMEOUT
5083	construct a SOAP XML string given a prepared SoapEnvelope object
5084	Discover systems using WS - Discovery
5085	Returns the manager for the related item .
5086	Return all child relations of a model .
5087	Returns a list of parent M2M fields for a model .
5088	Updates the model with update_fields
5089	Create a model from serializable data .
5090	Validate and return a list of errors
5091	Returns True if all formsets have changed
5092	Return a copy of this address with a valid checksum .
5093	Generate checksum .
5094	Parses arguments into a dictionary .
5095	Create an argument parser .
5096	Prompts the user to enter a seed .
5097	Validate signature fragments .
5098	Get a key from the database .
5099	Gets the key for the given address .
5100	Create key iterator .
5101	Create a Kerl .
5102	Abort the current state .
5103	Squeeze the current state .
5104	Transform the state .
5105	Returns a generator of digests .
5106	Get a list of private keys .
5107	Prepares a PrepareMultisig transfer command .
5108	Add two Trits .
5109	Convert an integer into a list of trits .
5110	Add two Trits .
5111	Compute the carry of the carry .
5112	Output the seed .
5113	Search for transactions .
5114	Retrieve inputs from the device .
5115	Get new addresses
5116	Retrieve a list of transfer transfers from the database .
5117	Creates a PromoteTransaction command .
5118	Execute a replay command .
5119	Sends a list of transfers .
5120	Send a list of bytes to the adapter .
5121	Resolve a URI .
5122	Send an HTTP request .
5123	Log a message with the given level .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Seed a response .
5127	Add digest .
5128	Get the address of the address .
5129	Create an iterable of addresses .
5130	Convert a digest to an address .
5131	Generate an address from a key iterator .
5132	Find transaction objects .
5133	Return a generator that iterates over the given seed and hashes .
5134	Gets a list of bundles from a list of transactions .
5135	Check if the encoding is valid .
5136	Get codec info .
5137	Encode a byte string .
5138	Decode a byte string .
5139	Return a list of addresses .
5140	Add a route to the adapter .
5141	Create a Transaction object from a string .
5142	Return a dict representation of this message .
5143	Returns a tuple containing the validity of the message .
5144	Set the state of this transaction .
5145	Return a list of messages .
5146	Return list of transactions .
5147	Group transactions .
5148	Recursively discover commands from a package .
5149	Execute the request
5150	Apply a filter .
5151	Return the URL for a job .
5152	A list of validators .
5153	Check if the field is valid .
5154	Generate validation errors .
5155	Returns a list of errors for the bundle .
5156	Return the error message for a group .
5157	Traverse a bundle .
5158	Start Iota API client .
5159	Generate random seed .
5160	Return the digest of the fragment .
5161	Sign inputs from a bundle .
5162	Pretty - print the object .
5163	Abort the given trits .
5164	Squeeze the given trits .
5165	Add a context to an exception .
5166	Get security level .
5167	Increment the legacy tag .
5168	Return the latest tag .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign all inputs in this bundle .
5172	Sign inputs at start_index .
5173	Creates the inputs for the given addy .
5174	Convert a value to a standard unit .
5175	Decompress a G1 compressed point .
5176	Prime field inverse .
5177	Reads from a JSON file .
5178	Find words within a given category .
5179	Find a synonym for a given word
5180	Expand abbreviations in text .
5181	Split a description .
5182	Returns a list of categories
5183	Generate a new color
5184	Plot the component
5185	Create a builtin class from a builtin name .
5186	Create a Timecale instance from a built - in string .
5187	Create a class from a list of components .
5188	Create a Decor from an image file .
5189	Create a legend from a CSV file .
5190	Return a CSV representation of the table .
5191	Returns the maximum width of the table .
5192	Return a Component instance for the given component .
5193	Get the value of an attribute from the document .
5194	Get the colour of the legend
5195	Plot the data .
5196	Create a Component from a string .
5197	Build a summary of the component
5198	Deprecated .
5199	Process a row .
5200	Parse a CANSTAT file into a dictionary .
5201	Return True if self is strict
5202	Return a list of unique intervals .
5203	Construct a list of intervals from a list of top values .
5204	Convert longitudinal data to dict .
5205	Create a TimeSeries from a petrel file .
5206	Build a list of intervals from a dictionary
5207	Read data from a CSV file .
5208	Read histogram from image file .
5209	Create a Striplog from a log .
5210	Create a LAS3 object from a string .
5211	Create an Interval from a csv file .
5212	Returns a copy of the Striplog
5213	Save the list of components to a CSV file .
5214	Return a lith3 section .
5215	Plot a series of intervals .
5216	Returns a numpy array of values for the given field .
5217	Extract the values from the log .
5218	Searches for all intervals that match a search term .
5219	Find overlaps .
5220	Find gaps .
5221	Remove lines from the strip .
5222	Return a copy of the strip .
5223	Return a copy of this iv .
5224	Union with other .
5225	Intersect two Strings .
5226	Merge overlapping overlaps .
5227	Plot a histogram .
5228	Invert the structure .
5229	Crop the log to the given extent .
5230	Compute the quality of the report
5231	Convert a hex color to a color name .
5232	Return the log - likelihood of an image .
5233	Overrides get_field_field_name .
5234	Returns a list of all running jobs .
5235	Parses a job hcl into a string .
5236	Update a token
5237	Returns a list of all allocated resources .
5238	Fail an existing deployment .
5239	Pause a deployment .
5240	Update the health of a deployment .
5241	Drain a node
5242	Drain a node to a node .
5243	Change an eligible node .
5244	List files .
5245	Streams the contents of an item from the server .
5246	Stat a file
5247	Join an agent .
5248	Updates the servers .
5249	Force leave a node
5250	Returns a list of nodes matching the prefix .
5251	Returns a list of all evaluations .
5252	Returns a list of all namespace namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job
5257	Update a stable job
5258	Remove a job .
5259	Get the current configuration .
5260	Delete a peer .
5261	Returns a list of deployments .
5262	Get a random value
5263	Get a mutator from an object
5264	Returns a string for the polyglot attack .
5265	Fuzz fuzzing an object .
5266	Convert a buffer of bytes to unicode .
5267	Run the server .
5268	Stop the server .
5269	Sets up a custom HTML file
5270	Serve the JSON response .
5271	Fuzz on an object .
5272	Spawn a subprocess .
5273	Get the output of the process .
5274	Finish read .
5275	Closes the child process .
5276	Start the jupyter .
5277	Execute the fuzzer
5278	Decorator for json encoding
5279	Build a random string .
5280	Build the grammar .
5281	Return a string representation of the query .
5282	Build a random value
5283	Builds the Opt .
5284	Build a reference definition
5285	Build the Gram .
5286	Shutdown the child process .
5287	Run the command and monitor its exit code .
5288	Start the monitor .
5289	Return a random float .
5290	Add a definition .
5291	Add a definition to a category
5292	Generate a gramfuzz .
5293	Recursively fuzzes every element in a dictionary
5294	Return fuzzed response .
5295	Returns the fuzzed response .
5296	Decorator for mutate objects
5297	Signal handler for sigterm
5298	Exit the shell .
5299	Pause the process
5300	Called when the client is paused
5301	Handles the command
5302	Handles the command
5303	Returns a list of events for this user .
5304	Set the mood of the user .
5305	Set the user s avatar .
5306	Returns information about a URL .
5307	Add a contact to the chat
5308	Get a user by id .
5309	Gets a list of bots from Skype .
5310	Get a bot by id .
5311	Searches for a specific query string
5312	Return a list of all requests for this user .
5313	Initialize from raw data .
5314	Merge another object into this instance .
5315	Merge another object into the cache .
5316	Calls synchronous sync state
5317	Reads a token file
5318	Write token to file
5319	Verify that the token is valid .
5320	Refresh Skype token
5321	Gets the user s username .
5322	Get a new registration token
5323	Sets up the endpoints for the chat
5324	Check if a user exists .
5325	Authenticate token
5326	Authenticate to Skype .
5327	Configure the presence document
5328	Ping the user .
5329	Return a list of recent conversations .
5330	Return a new chat with the given id .
5331	Create a new user .
5332	Return the user id from a URL .
5333	Extract the chat ID from a URL .
5334	Iterate over a sequence of items and yield them .
5335	Return unicode text without matter what
5336	Detect the format of a text .
5337	Parses the given text into a dictionary .
5338	Post as a dict for serializing
5339	Load yaml file
5340	Export the given metadata to a string .
5341	Turn metadata into JSON
5342	Match list .
5343	Return a list of items .
5344	Return list of all sublists of this item .
5345	Convert start to new start .
5346	Returns a list of the arguments for this function .
5347	Return list of all arguments matching pattern .
5348	Turn a list of strings into a trie .
5349	Generate a pattern from a trie .
5350	Check if key is valid .
5351	Insert a string at the given index .
5352	Return partition of char .
5353	Returns a list of spans for the given type .
5354	Shrink overlapping spans .
5355	Update the span .
5356	Return the nesting level of this node .
5357	Return shadow string .
5358	Return the shadow portion of the extended link .
5359	Return a mapping of spans to spans .
5360	Deprecated use pformat instead .
5361	Returns a list of Parameter instances .
5362	List of parser functions .
5363	The list of Template instances .
5364	List of wikilinks .
5365	Returns a list of Comment objects .
5366	Return list of external links .
5367	Return a list of sections .
5368	Return list of tables .
5369	r Returns a list of lists .
5370	Return a list of Tag objects .
5371	Iterate over all subspans of the given type .
5372	Returns a list of all ancestors of this text .
5373	Return the parent of this text .
5374	Returns the mode of a list .
5375	Find an argument by name .
5376	Returns a normalized version of the template .
5377	Removes the first argument from the argument list .
5378	Remove duplicate arguments .
5379	Set an argument value .
5380	Get an argument by name .
5381	Check if the command has a positional argument .
5382	Delete an argument by name .
5383	Convert a spatial reference to a string .
5384	Find an object with an ellipsoid .
5385	Create a crs from a URL .
5386	Read a GeoJSON file .
5387	Return a crs from an EPSG code
5388	Return a crs from an ESRI code
5389	Obtain a crs from a region code .
5390	Create a new crs from a string .
5391	Write record to out .
5392	Read from a stream .
5393	Parse GeoTiff keys .
5394	Parses a GeoTiff file into a list of GeoTiffKeys .
5395	Returns the signedness of an extra dimension .
5396	Returns the ID for the extra dimension type .
5397	Create a new PointRecord from a point record .
5398	Copy fields from another record to this record .
5399	Append zeros if needed .
5400	The names of all dimensions of this array .
5401	Create a vector from a point format .
5402	Read points from a stream .
5403	Decompress a compressed compressed buffer .
5404	The x dimension of the x axis .
5405	The axis of the y - axis .
5406	The dimension of the tensor .
5407	Add extra dimensions to the point data .
5408	Write points to out_stream
5409	Write to file .
5410	Write to file .
5411	Convert point formats to dtypes . dtypes
5412	Builds the unpack_format_dtypes dictionary for the given format .
5413	Convert a numpy dtype to a point format .
5414	Returns the minimum version for a given point format .
5415	Check if a point format is compatible with the given format .
5416	Returns a list of vlrs for the given type
5417	Extract vlrs from the list of vlrs
5418	Read a VLR list from a stream .
5419	Check if all the files have the same point format
5420	Return True if all of the points have the same dtype .
5421	Check if file signature is correct .
5422	Read header .
5423	Read vlrs from file .
5424	Read points from a VRL .
5425	Read compressed points data .
5426	Read the internal waveform packet .
5427	Read the EVLrs from the stream .
5428	Print a warning if there is at the given position .
5429	Opens a las file or bytes object
5430	Read a file and return its contents .
5431	Create a las data object from a header .
5432	Create a las data object .
5433	Convert from a source_las to a location .
5434	Merge las files .
5435	Write a LV file to a file .
5436	Returns the date of the taxonomy
5437	Setter for creation date
5438	The minimum values of the minima .
5439	Set minimum values
5440	The maximum values of the maxima .
5441	set maximum values
5442	A 2D numpy array containing the scaling scales .
5443	A numpy array containing the offsets of the mesh .
5444	Return the major and minor version of the file .
5445	Convert old_header to new_header .
5446	Unpack an array from an array .
5447	Pack a sub - field into an array .
5448	Return a list of names that are missing in the given point format .
5449	Returns a dict of sub - fields and sub - fields .
5450	The total number of extra dimensions .
5451	True if the data is a waveform packet .
5452	Example of satel_integra library
5453	Calculate the checksum of a command .
5454	Print a hex string .
5455	Verify that the response is valid .
5456	Return list of set indices from r .
5457	Generate query string .
5458	Demonstration demo
5459	Connect to the server .
5460	Start monitoring .
5461	Send disarm command .
5462	Send the alarm command .
5463	Turn on output .
5464	Keep keep alive .
5465	Monitor the device status .
5466	Closes the connection .
5467	Purge the database .
5468	Guess the type of the file
5469	Get the file id for a file
5470	Get a notebook
5471	Create a notebook model from the database .
5472	Get a directory
5473	Convert a list of file records into a generator .
5474	Create a model from a directory record .
5475	Create a file model from a DB record .
5476	Save a notebook
5477	Save file
5478	Rename a file
5479	Delete a file .
5480	Ensure a user exists in the database .
5481	Purge a user .
5482	Create a directory .
5483	Check if a user is in a directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	List files in a directory .
5487	Return a list of directories in a directory .
5488	Build a where clause for a file
5489	Select a file from the database .
5490	Return default fields for file .
5491	Get a single file from the database .
5492	Get a file
5493	Get file id
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file .
5497	Generate a list of notebooks .
5498	Purge all remote checkpoints .
5499	Generate notebook checkpoints .
5500	Generate a list of notebooks .
5501	Reencrypt a row .
5502	Reencrypt a user s content .
5503	Derive a single Fernet key .
5504	Derive FallbackFernet keys from a list of passwords .
5505	Factory for a single password encryption .
5506	Memoize a single argument .
5507	Get the name of a column like object .
5508	Convert a row to a dict .
5509	Convert a row to a dictionary .
5510	Save a notebook to disk .
5511	Create a remote file .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	Return a list of checkpoints for the specified path .
5515	Rename all checkpoints .
5516	Delete all checkpoints at the specified path .
5517	Purge all checkpoint checkpoints .
5518	Resolve a path to a root manager .
5519	Recursively apply prefix to model .
5520	Decorator to apply mname to manager
5521	Decorator for kwargs .
5522	Decorator for path dispatch method
5523	Called when a directory changes .
5524	Get an object from the API .
5525	Normalize an API path .
5526	Split filepath into directory name and name .
5527	Return base64 encoded string .
5528	Read a base64 - encoded file .
5529	Decode unknown bytes .
5530	Decode a base64 - encoded file .
5531	Return a list of directories from a path .
5532	Decorator to catch paths outside of the root .
5533	Create a user .
5534	Separate directories and files
5535	Yield directories and files .
5536	Generator for all files in mgr
5537	Yield all files with content
5538	Reencrypt all users .
5539	Reencrypt a single user .
5540	Unencrypts all users .
5541	Unencrypt a single user .
5542	Create an alembic . ini file .
5543	Upgrade an alembic database .
5544	Sanitize a block .
5545	Queue an embed_type for the given embed_type .
5546	Load the instances of the given embed_type .
5547	Insert an instance into the block .
5548	Loads the data from the embed type
5549	Validate the data .
5550	The admin page .
5551	Returns a dictionary representation of the model
5552	Hide the authenticated fields .
5553	Remove fields from the request .
5554	Updates the head of the request .
5555	Returns a queryset of featured images .
5556	Returns the queryset of published items .
5557	Overrides get_attribute .
5558	Validate a widget
5559	Validate a zone
5560	Checks if the given string is a valid UUID
5561	Return the permissions for the user
5562	Modify admin permissions
5563	Checks that the author is valid .
5564	Save a zone
5565	Returns the data as a dictionary .
5566	Return a dict of field values
5567	Render the template
5568	Get the settings for this Integration .
5569	Return a list of pages for the user .
5570	Get the settings for an integration
5571	Update the settings for an integration .
5572	Signup a user .
5573	Convert an iterable of contents into a string .
5574	Render a zone
5575	Save the featured image .
5576	Save a subsection
5577	Returns the extension of the image
5578	Returns the medium URL for the image
5579	Saves the image .
5580	Save a thumbnail
5581	Return the connection to the database .
5582	Returns a BandwidthLimitedStream object .
5583	Read amount of bytes from the file .
5584	Consume the given amt .
5585	Schedule a consumer for the given amount of time .
5586	Process a scheduled consumer .
5587	Calculate the projected rate for the given amt .
5588	Record consumption rate .
5589	Download a file from a bucket .
5590	Poll for a transfer .
5591	Returns a list of callbacks for the given transfer_type .
5592	Returns a copy of the original_dict filtered by keys .
5593	Decrement the counter .
5594	Finalize callbacks .
5595	Check if a file is a special file
5596	Acquire a lock .
5597	Release a lock .
5598	Adjust the chunk size of the file .
5599	Queues a write task for a file - like object
5600	Returns an IOWriteTask for the given fileobj .
5601	Return download manager class .
5602	Main function for download_object .
5603	Write data to file .
5604	Request writes for a given offset .
5605	Return whether the file object is seekable .
5606	Upload a file to a bucket .
5607	Submit a file to a bucket .
5608	Copy a file to a bucket .
5609	Delete an item from a bucket .
5610	Shutdown the application .
5611	Cancel all tracked transfers .
5612	Wait for all tracked transfers .
5613	Read amount of bytes from fileobj .
5614	Wrap a chunk of data into a file - like object .
5615	Returns the correct upload manager class .
5616	Set the exception of the future .
5617	Set the result of the job .
5618	Set the given exception .
5619	Return the result of the task .
5620	Cancels the future .
5621	Submit a task to an executor .
5622	Add a callback to be run when done .
5623	Add a failure cleanup function .
5624	Called when the task is done .
5625	Submit a task to the executor .
5626	Add a callback to be called when the request is done .
5627	Uploads a file to S3 .
5628	Download a file from a bucket .
5629	Iterate function decorators .
5630	Parse a decorator step .
5631	Refact a step .
5632	Iterate through step function decorators .
5633	Checks if a step is a string or a list of strings
5634	Refact a step .
5635	Select python file .
5636	Gets a list of objects for a team .
5637	Create a new person .
5638	Updates a membership .
5639	Deletes a membership .
5640	Returns the current fact
5641	Handles POST requests
5642	Gets a list of items
5643	Deletes a membership
5644	Validate a base URL .
5645	Check if given string is a URL .
5646	Opens a local file .
5647	Check that an object is an instance of acceptable types .
5648	Create a dictionary from multiple dictionaries .
5649	Checks that the response code is correct .
5650	Convert a JSON string to an OrderedDict .
5651	Convert a date string to a datetime object .
5652	Gets a list of objects .
5653	Create a new team .
5654	Updates a room
5655	Deletes a room
5656	Gets a list of objects from the account .
5657	The created date .
5658	Get access token from environment variables .
5659	Create a new event .
5660	Updates a webhook .
5661	Deletes a webhook .
5662	Ensure that the next_url is valid .
5663	Set the wait_on_rate_limit parameter .
5664	Updates request headers .
5665	Absolute URL .
5666	Perform a HTTP request .
5667	Perform a GET request .
5668	Get all pages from a URL .
5669	Get all items from a URL .
5670	Perform a PUT request .
5671	Send a DELETE request .
5672	Create a new token .
5673	Gets a list of people in a room .
5674	Create a new message .
5675	Deletes a message .
5676	Create a new User object .
5677	Gets a person by its ID .
5678	Updates a person
5679	Deletes a person .
5680	Retrieves the user s name .
5681	Retrieve a list of URLs .
5682	Retrieve a list of resources from the server .
5683	Creates a new domain .
5684	Updates a team .
5685	Deletes a team by ID .
5686	Retrieve a list of resources .
5687	Convert an object to a tuple .
5688	Retrieve an authorization code .
5689	Returns the last activity of the team .
5690	Handles POST requests
5691	Gets the public URL for the ngrok client .
5692	Delete all webhooks with the given name .
5693	Create a new ngrok webhook .
5694	Entry point for the Nrok API .
5695	Command line interface for console
5696	Read Telegram messages .
5697	Read Telegram messages into a queue .
5698	Create a DSMR protocol .
5699	Create a DSM reader .
5700	Create a TCP DSM reader .
5701	Handle incoming data .
5702	Called when a connection is lost .
5703	Handle a Telegram message .
5704	Parse a telegram data .
5705	Get the version from a file
5706	Ensure the Python version is valid .
5707	Find all packages in the given directory
5708	Returns a dict of command - line arguments .
5709	Returns a function that executes the given function .
5710	Run a shell command .
5711	Returns a function that checks if targets exist .
5712	Wrap a list of commands into a class
5713	Create a command handler for a package .
5714	Get data files from a list of patterns .
5715	Get package data .
5716	Compile a glob pattern .
5717	Iterate over a path .
5718	Convert a glob pattern to a regular expression .
5719	Join translated parts .
5720	Translate a glob pattern .
5721	Truncate the table .
5722	Write a table to the database .
5723	Write indexes to a table .
5724	Write triggers to database .
5725	Write constraint statements to database .
5726	Writes the contents of a table to the database .
5727	Process a row .
5728	Write the indexes to the file .
5729	Write constraints to file .
5730	Write triggers to file .
5731	Return the number of items in the query
5732	Enqueue the given data into the queue .
5733	Start the queue .
5734	Build an extra predicate .
5735	Simple JSON serializer .
5736	Reconnect to the database .
5737	Query the database .
5738	Return a connection object
5739	Run the workload
5740	Connect to the pool .
5741	Look up an error by its number .
5742	Total number of connections .
5743	Handle a MySQL connection failure .
5744	Create a simple SQL expression .
5745	Build an UPDATE statement
5746	Connect to the database .
5747	Initialize the database .
5748	Destroys the database .
5749	Start a step .
5750	Stop a step .
5751	Load the start and stop values
5752	Disconnects from the server
5753	Perform a reconnect .
5754	Connect to the server .
5755	Handle incoming messages .
5756	Stop the timers .
5757	Send a ping to the API .
5758	Check if a pong is received .
5759	Send a message to the WebSocket .
5760	Unsubscribe .
5761	Process a system message .
5762	Handle an info message
5763	An error handler for an error
5764	Send data to client .
5765	Resubscribe to all subscribed channels
5766	Handle an authentication message .
5767	Handle configuration changes .
5768	Update the timestamps for the given chan_id
5769	Reset the connection
5770	Return a list of candles for the given pair .
5771	Configure Bitfinex config
5772	Subscribe to tick .
5773	Unsubscribe from ticker
5774	Subscribe to order book
5775	Unsubscribe from order book
5776	Subscribe to a raw order
5777	Unsubscribe from raw order book
5778	Subscribe to the trades
5779	Unsubscribe from trades
5780	Subscribe to the candles
5781	Unsubscribe from candles
5782	Authenticate to the channel
5783	Cancel an order .
5784	Called when a device is received .
5785	Process a device command .
5786	Called when a client is received .
5787	Create a new device type
5788	Publish an event .
5789	Update a device
5790	Returns a list of client status objects
5791	List all bundles
5792	Create a bundle
5793	Updates a schema
5794	Closes connection to IBM Watson
5795	Called when the client is listening .
5796	Subscribe to a device
5797	Subscribe to a device status
5798	Subscribe to device commands
5799	Publish a command
5800	Called when a message is received from the client .
5801	Handle a device event .
5802	Called when a device status message is received .
5803	Called when the client is listening .
5804	Get last Event
5805	Get all events of a device
5806	Makes an API call
5807	Initiate a new mgmt request
5808	Get request status
5809	Closes the index
5810	Count the number of intersections in the index .
5811	Returns the nearest neighbors of the index .
5812	Return the bounds of the array .
5813	Delete data from the index .
5814	Create an index from a stream .
5815	Load a byte array .
5816	Remove an object from the tree .
5817	Error checking for Error calls
5818	Load the application
5819	Initialize Flask extension .
5820	Runs a gunicorn server .
5821	Convert value to native value
5822	Crop the image using the given centerpoint .
5823	Process an image .
5824	Process an image
5825	Invert an image
5826	Open the form of the form
5827	Process the placeholder image .
5828	Update the PPOI field .
5829	Updates the PPOI field .
5830	Assign the field data to the field s ppoi
5831	Default form_class .
5832	Convert obj to string
5833	Auto - discover the virtual image fields .
5834	Unregister a SizedImage subclass from the registry .
5835	Unregister a filter .
5836	Return the URL for this field .
5837	Build filters and sizers .
5838	Return the root folder of the file
5839	Return the root folder of this field .
5840	Returns the filtered root folder
5841	Delete files matching the given regex pattern .
5842	Preprocess an image
5843	Preprocess a GIF image
5844	Preprocess JPEG image
5845	Retrieve an image
5846	Save an image
5847	Return the PPOI as a string .
5848	Create a resized image
5849	Render the template .
5850	Return the context for the clearable widget .
5851	Build a copy of the attributes dictionary .
5852	Returns the path to the resized image .
5853	Convert a path to a filtered path
5854	Validate that a list of sizes are valid .
5855	Get an image url from an image instance
5856	Return the rendition key set for the given key .
5857	Formats an instruction .
5858	Format a function body .
5859	Generate instructions from a bytecode .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Connect to the server .
5863	Closes the connection .
5864	Read the result from the server .
5865	Handle FastAGI request .
5866	Parse an agi result
5867	Check the response code and return the result
5868	Reset all instances
5869	Returns a list of all instances
5870	Get distro data from distro
5871	Get the primary keys for a model
5872	Deserialize the given value .
5873	Get an existing instance from the query .
5874	Get all declared fields .
5875	Load a model from the data .
5876	Split kwargs into kwargs .
5877	Delete old tables .
5878	Snapshot a snapshot
5879	List all snapshots
5880	Restore a snapshot
5881	Delete a snapshot
5882	Rename a snapshot
5883	Replace a snapshot
5884	Updates indexes after each epoch for each epoch for each epoch for shuffling
5885	Clean text using preprocessing .
5886	Applies a function to a list of data .
5887	Creates a processor for a document .
5888	Process text .
5889	Process text .
5890	Generate the document length statistics .
5891	Returns a pandas DataFrame of all words in the corpus .
5892	Map param_type to string type .
5893	Parses a list of interface names into a dictionary .
5894	Return the inverse of the transform .
5895	Update the database with a rollback .
5896	Returns a deep copy of the machine .
5897	Returns a copy of this node .
5898	Return True if this mapping is equal to another .
5899	Inverse of dict .
5900	Clears all messages
5901	Move the node to the given key .
5902	Write text to a temporary file .
5903	Search for contacts .
5904	Merge arguments into config
5905	Load addressbooks from the given names .
5906	Prepare the list of search queries .
5907	Create a new contact
5908	Displays a list of birthdays .
5909	Generate a list of phone numbers
5910	List contacts
5911	Subcommand to modify vCard
5912	Executor for remove
5913	Executes a source editor
5914	Executor for globus merge
5915	Executor for globus vCard subcommand
5916	Get action by alias .
5917	Convert a boolean parameter to a boolean value
5918	Create a new contact .
5919	Read from a file .
5920	Create a new contact from the user input .
5921	Create a contact from an existing contact .
5922	Returns a list of the names part of the variable
5923	Add a category to the vCard .
5924	Parse a type value .
5925	Convert a list to a string .
5926	Convert a string to a date object .
5927	Compares two UIDs .
5928	Search for all contacts
5929	Search for names that match a regular expression .
5930	Searches for a given uid
5931	Search address book .
5932	Returns a dictionary of short ids
5933	Return the short uid for a given uid
5934	Find all VCard files that match the search .
5935	Loads all vCard files from vdir .
5936	Return the abook with the given name .
5937	Returns a mapping of architecture names to architectures .
5938	Return a mapping of architectures to architectures .
5939	Get the argumentspec for a function .
5940	Parse command line arguments .
5941	Helper function for safe input .
5942	Encode the value to the output file .
5943	Guess keyword arguments .
5944	Add commands to a parser .
5945	Decorator to specify a function name .
5946	Decorator to add options to a function .
5947	Prompt user for confirmation
5948	Returns a copy of this Query .
5949	Like regular expression .
5950	Return cached results .
5951	Return the first result of the query
5952	Delete the results from the database .
5953	Called when an entity is deleted .
5954	Add a prefix to the index .
5955	Estimate the work for a given index .
5956	Searches for a set of objects
5957	Count the number of items in the set
5958	Return the connection to the database .
5959	Turn a value into a list of strings .
5960	Generate indices for a model .
5961	Clean old indexes .
5962	Add an object to the session .
5963	Get an entry by pk .
5964	Read data from redis .
5965	Save the object to the database .
5966	Delete the object
5967	Retrieve objects from the database .
5968	Register a reduce function .
5969	Open a semaphore .
5970	get cpu count
5971	Send a result back to the queue .
5972	Main worker thread .
5973	Add a call item to the queue .
5974	Ensure that the executor is running .
5975	Wrap a non - picklable object .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	wait for jobs completion
5980	Return a dict containing the preparation information for the given name .
5981	Prepare process information .
5982	Close all opened files .
5983	Recursively kill subprocesses with psutil .
5984	Terminate processes .
5985	Gets the exit codes of a worker .
5986	Format the list of exit codes .
5987	Main entry point .
5988	Ensure the process is running .
5989	A simple event processor that prints out events .
5990	Displays the current code
5991	Interactively interact with a terminal .
5992	Split a string into arguments .
5993	Get a list of frames and line numbers
5994	Run a list of hooks .
5995	forget about the stack
5996	Get an integer without errors .
5997	Return an integer .
5998	Process commands .
5999	queue a startfile
6000	Return the next token .
6001	Print error message .
6002	Read a command line .
6003	Closes the stream
6004	Disassemble a bytecode object .
6005	Disassemble a byte string .
6006	Return a count of the number of frames
6007	Get the name of the call function
6008	Print count entries of the stack trace
6009	Look up a subcommand by prefix .
6010	Display the short help for a subcommand .
6011	Add a subcommand callback .
6012	Run a subcommand .
6013	Start debugging .
6014	Show a list of commands .
6015	Run line numbers .
6016	Return the last frame of a frame .
6017	Map thread names to thread ids
6018	Get an integer .
6019	Get the value of onoff mode .
6020	Set a boolean value
6021	Set an integer .
6022	Show a boolean value .
6023	Show an integer .
6024	Show the value of an object
6025	Check if the given line is a def statement .
6026	Check if the given line is a class definition .
6027	Quit the current thread .
6028	Determines if the default background should be used .
6029	Check if a color is dark .
6030	Return the signature of a frame .
6031	Returns a list of strings
6032	Return the string representation of a frame .
6033	Format the value as a string .
6034	Read a message from the socket .
6035	Show debug information .
6036	Display an undefined subcommand .
6037	Run the debugger .
6038	Pretty print a simple array
6039	Lookup a signal name by number .
6040	Lookup a signal by name .
6041	Return the name of a CanonicSign name .
6042	Set a new signal replacement
6043	Check if the sigandlers are valid
6044	Print info about a signal
6045	Handle an action .
6046	set print method
6047	Process a signal .
6048	Convert filename to module name .
6049	Search for a file in directories .
6050	Search for a python script .
6051	All python files caller s dir without the path and trailing .
6052	write msg to stdout
6053	Run the program
6054	Format a list of commands .
6055	Wrapper for post_mortem .
6056	Closes the connection .
6057	Write a message to the server .
6058	Complete an identifier .
6059	add a string to the queue
6060	Add an ignore filter .
6061	Determine if it canonic or not .
6062	Return the filename of the debugger .
6063	Check if the service is started .
6064	Check if the current frame is a stop statement
6065	Sets to stop on the next event that happens in frame frame frame .
6066	Print a stack trace to stdout .
6067	Show the default file .
6068	Check if the function name matches the frame .
6069	remove breakpointbp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable all breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete breakpoints by line number
6074	Open the input file .
6075	Read a line from the stream .
6076	Ask user for confirmation
6077	r \ s +
6078	r \ d +
6079	Submit a query .
6080	Restore the original login .
6081	Load a module .
6082	Iterate over documents .
6083	Main function .
6084	Transforms a CSV file into a stream .
6085	Open a json or csv file
6086	Convert dates to date format
6087	Convert a date string to a datetime object .
6088	Detect file encoding .
6089	Stream lines from a file .
6090	Transforms a file to UTF - 8 .
6091	Convert a csv file to a Python object .
6092	Read a CSV file .
6093	Entry point for transcode .
6094	Connects to a given URL .
6095	Save a token
6096	Perform an HTTP request .
6097	Perform a DELETE request .
6098	Wait for the project to build
6099	Returns the root url for the given URL .
6100	Save current token
6101	Send JSON request
6102	POST data to a resource
6103	Change the path of the resource .
6104	Get the default account
6105	Get the documentation for this repository .
6106	Wait for a job to complete .
6107	Send a GET request .
6108	Print result as CSV .
6109	Read params from json file .
6110	Simplify a document .
6111	Create a project with a list of documents .
6112	Upload docs from a JSON file .
6113	Main function .
6114	Upload documents from a stream
6115	Upload a file to a project
6116	Main entry point .
6117	Authenticate with the given credentials .
6118	Authenticate the user .
6119	Login to the planet
6120	Get data from a resource
6121	Fetch historical data per period
6122	Load the view
6123	Initialize handler
6124	Render the view
6125	Process a change message
6126	Updates the menus for this page
6127	Create a list of handlers for this site .
6128	Handle changes from js
6129	Called when a DOM changes
6130	Create the widget
6131	Initialize the widget
6132	Destroy the widget .
6133	Called when a child is added .
6134	Called when a child is removed .
6135	Iterate over all child widgets
6136	Set an attribute .
6137	Update the proxy
6138	Notify about a change
6139	Perform an xpath query
6140	Initialize the session .
6141	Initialize widget
6142	Set the HTML for the widget .
6143	Change mode changes
6144	Called when a block changes
6145	Updates the children of the block
6146	Read the contents of a file .
6147	Print an error message and exit .
6148	Print error message .
6149	Return a product by name .
6150	Create a new session
6151	Reset the store .
6152	Returns a list of Stores .
6153	Initialize delivery system
6154	Retrieve a menu
6155	Add an item to the basket
6156	Add a Pizza to the basket
6157	Add a side to the basket
6158	Remove an item from the basket
6159	Set payment method
6160	Process payment options .
6161	Generic GET wrapper .
6162	Generic POST wrapper .
6163	Call the given API method .
6164	Append an item to the menu .
6165	Add an exit item .
6166	Draws the menu
6167	Process the user input .
6168	Select the selected item
6169	Parse the old menu data into a CursesMenu
6170	Select the top values of a DataFrame .
6171	Group a DataFrame by aggregate_by .
6172	Convert string to datetime
6173	Convert datetime columns to strftime
6174	Change date format of a DataFrame .
6175	Cast column to type
6176	Calculate the rank of a DataFrame .
6177	Takes a dataframe and returns a pandas dataframe
6178	Generic mathematical operation .
6179	Round values in a DataFrame .
6180	Change the absolute values of a column in a DataFrame .
6181	Pivot table .
6182	Pivot dataframe by a group of groups .
6183	Groupby by aggregations .
6184	Compute the sum of the values of a column .
6185	Add missing row to a DataFrame .
6186	Decorator to catch exceptions raised during decorator .
6187	Log a message to the given logger .
6188	Log the time of the function .
6189	Decorator to log output shapes .
6190	Rename a DataFrame .
6191	Compute the sum of the values in a DataFrame .
6192	Combine columns with aggregation function .
6193	Get the value of a function call .
6194	Remove old entries from cachedir .
6195	Roll up a DataFrame .
6196	Calculate the maximum value of a column
6197	Calculate the minimum value of a column .
6198	Fill missing values in a column
6199	Add an offset to a date object
6200	Add nb_months to a date object
6201	Add nb_years to a date object
6202	Parse a date string .
6203	Filter rows by date_col .
6204	Convert a column to a percentage
6205	The core function for the ADA family .
6206	Return the learning updates .
6207	Returns the training parameters
6208	Return updated parameters .
6209	Return the first glimpse of the first glimpse
6210	Register the encoder .
6211	Compute the loss of the model .
6212	Applies a function to each dataset .
6213	Vectorize the target .
6214	Print statistics about the dataset .
6215	Train the model
6216	Sample from an input .
6217	Compute alignments .
6218	Compute context vector .
6219	Concatenate multiple inputs .
6220	Pad the Dataset .
6221	Generate the RMSprop problem .
6222	Print the elapsed time .
6223	Runs the model .
6224	Run the monitor .
6225	Build loop variables .
6226	Scan the loop .
6227	Compute the momentum and free parameters .
6228	Create an if train statement .
6229	skip the current epoch
6230	Load parameters from disk .
6231	Train the model .
6232	Run the training .
6233	Run a valid step .
6234	Prints a message to stdout .
6235	Get current training data .
6236	Applies a function to this instance .
6237	Prints a report to the logger .
6238	Compute the variance of this array .
6239	Create a list of Variables from a dataset .
6240	Add a shared variable to theano .
6241	Stack encoders .
6242	Stack decoding layers .
6243	Encodes x into the encoding network .
6244	Return the decoded data .
6245	Create a 2D Gaussian
6246	Register a block of data .
6247	Monitor the outputs of the model .
6248	Returns all parameters
6249	Set up the input_tensor .
6250	Compute the output .
6251	Save model parameters to disk .
6252	Load parameters from disk .
6253	Print information about the network .
6254	Register multiple parameters .
6255	Register new updates .
6256	Register new updates .
6257	Register monitors .
6258	Compute the L2 norm of a tensors .
6259	Save an element to a file .
6260	Yield elements from a pickled file .
6261	Load model parameters from disk .
6262	Create request elements .
6263	Decode a user state .
6264	Parser for X - Credentials .
6265	Remove access token from request elements .
6266	Login to the GitHub API .
6267	Normalize a dictionary .
6268	Convert a list of items to a dictionary .
6269	JSON parser .
6270	Resolve a provider class
6271	Create a Cookie header .
6272	Save the session .
6273	Return the cookie s data .
6274	Return the data of the request .
6275	Calculate the signature for the given parts .
6276	Return a serialized value .
6277	Check if the token is expired
6278	Checks if the request is expired .
6279	Serialize this credentials to a string .
6280	Check if the given string is a binary string .
6281	Returns the response content .
6282	Create request elements .
6283	Return the user s email address .
6284	Decorator for login
6285	Login to the server .
6286	Return a session key .
6287	Set a session value .
6288	Generate a CSRF token .
6289	Log a message with the given level .
6290	Check if status is in category .
6291	Split url into base and query parameters .
6292	Decorator to enable cross - origin for cross - origin
6293	Set CORS headers .
6294	Returns a dictionary of keyword arguments for the app instance .
6295	Return a string representation of an object .
6296	Ensure instance is iterable .
6297	Like os . isclose .
6298	Mark a function as deprecated .
6299	Deserialize a string into a AudioSegment object
6300	Create a new AudioSegment from a file .
6301	Create a AudioSegment from a numpy array .
6302	Execute a SOX command
6303	Filter a WAV file with silence .
6304	Compute the FFT .
6305	Generate frames from the stream .
6306	Normalizes the SPL of this AudioSegment .
6307	Reduce this AudioSegment to another AudioSegment .
6308	Resample the audio file
6309	Return a string representation of the object .
6310	Calculate a Spectrogram .
6311	Choose a front id from the candidates .
6312	Determine the offset front of a given onset sample .
6313	Returns the offset_front_id after the given onset_id .
6314	Tries to match the offset_front_front_id for a given offset_id
6315	Returns a list of consecutive consecutive and overlapping front positions .
6316	Updates the segmentation mask .
6317	Get the front index from a front index
6318	Get all front ids
6319	Return a list of offsets corresponding to the given offsets .
6320	Remove overlaps from a segmentation mask .
6321	Remove fronts that are too large
6322	Break stale fronts .
6323	Merge adjacent segments .
6324	Split masks into masks .
6325	Downsample one or more images .
6326	Auxiliary function to add arrays to a queue .
6327	Bandpass filter
6328	Low - filter filter .
6329	Convert a list of responses to tf input .
6330	Expand a set of columns .
6331	Return True if two objects are equal .
6332	Group audit ranks by measurer .
6333	Load the audit log file .
6334	Convert a list of rows into tf inputs .
6335	Update the pip . config_url from the environment variables .
6336	Autodetect files .
6337	Find all available streams .
6338	Resolve a stream by property .
6339	Resolve a predicate by predicate .
6340	Handle an error .
6341	Push a sample to the stream .
6342	Push a chunk of data into the stream .
6343	Get information about the stream .
6344	Open a stream .
6345	Calculate the amount of time correction for the target .
6346	Return a child with the given name .
6347	Return the next sibling element .
6348	Return the previous sibling element .
6349	Set the label name .
6350	Set value .
6351	Append a child to this element .
6352	Add a child to this element .
6353	Append an element to this element .
6354	Prepend an element to this element .
6355	Remove a child from this node .
6356	Return a list of StreamInfo objects .
6357	List tokens for a word
6358	Autocomplete query .
6359	Compute the n - grams of a token .
6360	Iterate over a pipeline .
6361	Applies a function to an iterable .
6362	Returns a list of fuzzy words .
6363	Print fuzzy search .
6364	Print fuzzy index .
6365	Extract related relations from a list of strings .
6366	List all available commands .
6367	Print the database info
6368	Print a DBKEY
6369	GEOHASH
6370	List information about a document
6371	Emulate index .
6372	BESTSCORE
6373	Compare two strings
6374	Send a response .
6375	Convert a list of requests into a list of objects .
6376	Extract bits from an array .
6377	Convert a sigOrValet to a Bits object
6378	Convert a slice to a Slice object .
6379	Find all files matching pattern .
6380	Checks if an iterable is in an iterable .
6381	Generate a loop for each statement .
6382	Logical shift left
6383	Returns the ceiling of x .
6384	Checks if a number is a Pow2 .
6385	c - like case of switch statement
6386	Define default statement .
6387	Recursively register the interface to the vcd file
6388	Called when a simulation is started .
6389	Log a change
6390	Render a HWProcess .
6391	Create a list of agents for the interface .
6392	Returns the clk for this unit
6393	Returns an iterator that yields the elements of an iterable .
6394	Group items by fn .
6395	Flatten an iterable .
6396	Merge nested if .
6397	Remove all unconnected signals from the network
6398	Checks if a proc is too simple .
6399	Try to merge two architectures .
6400	Reduce a list of processes .
6401	Called when a write request is received
6402	Serialize a unit or class into a Rtl file .
6403	Given a list of statements return the name of the name of the output .
6404	Given a list of statements and a list of statements return a list of statements that can be removed from the list of statements .
6405	Add a signal
6406	Synthesize this component to a target platform .
6407	Returns the maximum StmId for the given stm .
6408	Returns the maximum statement id for the given process .
6409	Write packet data .
6410	Change the master direction
6411	Load all declared declarations .
6412	Create a list of signals for this interface .
6413	Returns the physical name of the entity .
6414	Return the length of the byte array .
6415	Returns the sensitivity of a given operation .
6416	Evaluate an operator .
6417	Convert a bit or value to a new type .
6418	Reinterpret a sigOrVal into a hStruct .
6419	Returns the number of words between start and end .
6420	Group items by word index .
6421	Pretty print an interface
6422	Generate frames from a TransTmpl
6423	Iterate over the parts of this word .
6424	Pack the data into a data structure .
6425	Recursively clean the meta data .
6426	Given a list of statements find the enclosing for each statement .
6427	Discovers the sensitivity sequence of the given signals .
6428	Return the RTL context for this statement .
6429	Called when there is a reduction .
6430	Called by the merge method .
6431	Check if two statements are merged .
6432	Merge a list of statements into a single statement .
6433	Merge two lists .
6434	Reduce list of statements .
6435	Called when each statement is triggered .
6436	Set the parent statement of this statement
6437	Register the list of statements to the target list .
6438	Destroys this endpoint .
6439	Create a new register .
6440	Wrapper for _sig
6441	Clean up all interfaces .
6442	Recursively iterate over all fields of a type .
6443	Unpack a struct into a struct
6444	Return a copy of this operator .
6445	Assign a sensitivity value to all sensors
6446	Evaluate conditional conditions .
6447	Connect a port
6448	Create an updater for the given value .
6449	Create an update function for an array .
6450	Convert a list of integers to a bit vector .
6451	Register INDRA Statements .
6452	Eval parameter .
6453	Set the parameter value
6454	Convert interface map to HStruct .
6455	Convert all memories to memory .
6456	Get the index cascade
6457	Convert a Python value into a Series .
6458	Cast the signal or type to the specified type
6459	Reinterpret the signal or raise an exception
6460	Recursively walk the interface s parameters .
6461	Connects srcPacked to dstInterfaces .
6462	Pack an interface into a binary string .
6463	Convert a ROM into a HWProcess .
6464	Convert to Rtl
6465	Register an interface in this implementation .
6466	Try to reduce and return a new value .
6467	Try to reduce a value to a value .
6468	Returns a base name scope .
6469	Returns True if the class is serialized .
6470	Returns the type of the given type
6471	Generate an HDL statement .
6472	Get the condition of a condition .
6473	Return a SimBitsT
6474	Return the constant name for the given value .
6475	Cuts off drivers of the receiver .
6476	Load data from an array .
6477	load from a dtype
6478	Load from a htype .
6479	Returns the width of the item .
6480	Recursively walk through this struct .
6481	Convert a value to a signed integer .
6482	Merge this statement with another .
6483	returns an indented string
6484	Raise an exception if objName is not present
6485	Register a new parameter .
6486	Update ParamDeclrCollection from otherObj .
6487	Register a new unit
6488	Register an interface .
6489	Register an array .
6490	Returns a single driver
6491	Perform static evaluation .
6492	Create an operator with a resolver .
6493	Returns a copy of this context .
6494	Try to connect to an interface
6495	Connects clk to clk
6496	Connects clk and rst_n to rst_n
6497	Connects clk and rst to rst
6498	Propagate rst_n to rst_n .
6499	Propagate rst to rst .
6500	Iterate over the bits in a signal or value .
6501	Prepare the serializer for serialization .
6502	Serialize a parent unit to a parent unit .
6503	Serialize the parent unit to a parent unit .
6504	Returns the full name of this object
6505	Make association for all objects .
6506	Initialize a simulation unit .
6507	Convert a Unit to a SimModel
6508	Reconstruct the signals to the model
6509	Simulate the unit VCD of a unit .
6510	Initialize the write callback
6511	Connect this port
6512	Register an external port .
6513	Connect this driver to the receiver .
6514	Returns the name of the external signal .
6515	Determines if a signal is dependent on a process
6516	Add a process to the queue .
6517	Add a hook to be run .
6518	Schedules the combobox to be queued
6519	Schedule the apply values .
6520	Determines conflict resolver strategy .
6521	Run combine processes .
6522	Run the sequence processes
6523	Applies the values to the simulation .
6524	Return the value of the given sig .
6525	Write a value to this Enum .
6526	Add a process to the queue .
6527	Simulate a unit .
6528	Create a function that calls the function with the given key .
6529	Convert TensorFlow statements to if necessary .
6530	Create a new HWProcess .
6531	Hamming distance
6532	Return the average hash of an image .
6533	Calculate distance between two images
6534	Setup the Vizio platform
6535	Updates the state of the device .
6536	Moves the volume .
6537	Up the volume .
6538	Volume down .
6539	Set the volume level .
6540	Reset the board .
6541	Returns the piece at the given position .
6542	Remove the piece at the given position .
6543	Set the piece at the given position .
6544	Determine if a move isicide or not .
6545	Checks if the game was attacked .
6546	Checks if the game is over the game .
6547	Check if the player is a checkmate .
6548	Checks if the trajectory is a 4 - fold repetition .
6549	Pop a move .
6550	Returns a list of pieces for the game .
6551	Push a move to the position .
6552	Returns the zobrist hash of the board .
6553	Returns the symbol of the piece .
6554	Generate a pin from a symbol .
6555	Returns a string representing the USI string .
6556	Return a Piece instance from a USI string .
6557	Parses the commits into a generator .
6558	Parse a commit .
6559	Load configuration from argv .
6560	Executes Django management commands with the given configuration .
6561	Add config to argparse . ArgumentParser .
6562	Load a configuration file .
6563	Generate a YAML file
6564	Generate markdown string .
6565	Cast the value to the correct type .
6566	Returns a list of dates between first_date and last_date .
6567	Parse a date from a string .
6568	Load a currency file
6569	Set missing rates to None
6570	Compute missing rates for the given currency .
6571	Get the exchange rate for a given date .
6572	Convert amount to another currency
6573	Group an iterable into a list .
6574	Generate an animation
6575	Read n bytes from file
6576	write a record to the file
6577	Return a memoryview of words between start and end .
6578	Return the comments of the DAF file .
6579	Add an array to the file .
6580	Close the file .
6581	Compute current position .
6582	Close the file .
6583	Load the PCK data
6584	Compute the difference between two segments .
6585	Check if call is within logging level .
6586	Visitor for VarOp operator .
6587	Check for keys and values .
6588	Check if a joined string is within the logging argument .
6589	Check for keyword arguments .
6590	Handle exception handler .
6591	Detect logging level .
6592	Get the name of an exception handler .
6593	Get the id attribute of the field
6594	Check if node is a bare exception
6595	Check for exc_info keywords .
6596	Delete file if exists
6597	Add a widget to the widget
6598	Returns the rendered PDF content
6599	Overrides the default render_to_response method .
6600	Quote a string .
6601	Configure options .
6602	Convert a string to an underscore .
6603	Ensure all documents in the collection are indexed .
6604	Parse a file and return a list of prices .
6605	Load lines from a file .
6606	Parse a line into a price model
6607	Translate a symbol to a symbol .
6608	Load all symbol maps
6609	Get a session
6610	Add a price
6611	Import prices from a CSV file
6612	Show latest prices
6613	List the latest prices .
6614	Download prices .
6615	Prune price entries
6616	Returns a default session
6617	Add a symbol mapping .
6618	List price maps
6619	Get a symbol by its identifier .
6620	Read lines from a CSV file .
6621	Map an entity to a Price model .
6622	Map a Price model to a Price object .
6623	Read configuration file .
6624	Returns the path to the config file
6625	Create user config file
6626	Get the config file path
6627	Return the contents of the config file .
6628	Set an option in the config
6629	Return the value of an option .
6630	Save the configuration to a file
6631	Parses a symbol .
6632	Add a price to the book .
6633	Add a price entity to the database .
6634	Downloads a price
6635	Get a session
6636	Returns a list of prices for the given date and currency .
6637	Returns the latest prices for the given date and symbol .
6638	Removes all security symbols from the registry .
6639	Prune prices for a security symbol
6640	Downloads price from market
6641	Returns list of securities
6642	Returns a partial state .
6643	Updates the child calls for this node .
6644	Recursively descend the tree .
6645	Decorator for decorators .
6646	Check that the student parts have the same length .
6647	Checks that the given object has equal AST .
6648	Test whether the student code contains text .
6649	Check if package has an import .
6650	Test if student output contains text .
6651	Check if printout is printed .
6652	Check that the code has no error .
6653	Called when the student is selected
6654	Check for a function .
6655	Get the result of a process
6656	Overrides the given solution .
6657	Check if an instance is an instance of the student .
6658	Returns a copy of the items that are defined in this instance .
6659	Create a child state
6660	Gets an extension from a tree .
6661	Test for context loop .
6662	Check if a state contains a context .
6663	Check if a part contains a part .
6664	Check if a part has a part .
6665	Check the arguments of the function .
6666	Checks if the given callstr is called .
6667	Calculate true anomaly
6668	Initialize the ldap3 authentication manager
6669	Initialize the configuration .
6670	Add a ldap3 server to the pool .
6671	Remove a connection from the context manager .
6672	Tear down the ldap3 connection .
6673	Authenticate using LDAP .
6674	Attempt to bind an LDAP user .
6675	Authenticate to LDAP
6676	Returns a list of groups for a given user
6677	Return information about a user .
6678	Returns a User object for the specified username .
6679	Get an object from LDAP
6680	Return an LDAP connection
6681	Creates a new connection .
6682	Create a ldap3 connection
6683	Destroys a connection
6684	Search the database .
6685	search for labels
6686	search
6687	search for all archives
6688	speak the client
6689	Announce the given command .
6690	update sregistry settings
6691	update headers
6692	Require client secrets .
6693	download url to file
6694	stream a url to a stream
6695	update authorization token
6696	Get or create a folder .
6697	Read response from response .
6698	get bucket
6699	Update the client s secrets .
6700	Initialize the client .
6701	Load secrets .
6702	List logs .
6703	list logs
6704	create folder
6705	Initialize transfer client
6706	list all containers
6707	Show client status .
6708	add a variable
6709	remove a variable
6710	Activate a backend
6711	Delete a backend
6712	Update the base name of the image
6713	Create basic auth header .
6714	Generate a signature .
6715	Generate HMAC - SHA256 header .
6716	Send a DELETE request
6717	Send HEAD request .
6718	Paginate a GET request
6719	enable SSL verification
6720	Remove an image
6721	Return a dict with the version information
6722	Returns a list of requirements for the given lookup
6723	get singularity version
6724	check for singularity
6725	Return the path to the installdir
6726	Get the image s thumbnail
6727	Run a command .
6728	Get metadata from dbx_file
6729	Update the user s credentials
6730	print the response
6731	Kill commands
6732	List logs for a container
6733	Returns a list of all collections
6734	Updates the swift client
6735	update settings
6736	get client
6737	Run the given command
6738	Retrieve manifests from a repository
6739	Retrieves the manifest for a given repo
6740	Return the location of the download cache .
6741	Extract the environment from the Docker container
6742	update base url
6743	Updates the private - token headers
6744	Return the metadata for the Dockerfile .
6745	Return the client s settings .
6746	get and update a setting
6747	Updates a client setting .
6748	Generate authorization token
6749	list builders
6750	load templates by name
6751	Get the IP address of an instance
6752	run build
6753	list all containers
6754	list all containers
6755	List files
6756	Given an image and a list of Images announce them .
6757	Initialize the database
6758	get template
6759	Search for shared endpoints
6760	list endpoints
6761	list files
6762	share an image
6763	Read the client secrets .
6764	Initialize Google Storage services .
6765	Delete an object from a bucket .
6766	delete a file
6767	destroy an instance
6768	Returns a dictionary of subparsers for the given parser .
6769	Generate a string .
6770	Get a temporary directory .
6771	extract a tar archive
6772	Extract a tar archive
6773	Return a hash of a file
6774	Read a file
6775	Read json file
6776	delete files
6777	push an image
6778	Get or create a collection .
6779	Get a collection by name
6780	Get a container by name or version
6781	list images
6782	Inspect a container
6783	rename a container
6784	move an image
6785	remove a container
6786	add an image to the registry
6787	push an image
6788	Parse a header from a recipe .
6789	Tries to find a single recipe in the manifest
6790	create a tar . gz
6791	run a build
6792	Update the metadata for a blob .
6793	Format a container name .
6794	Determine whether the user should use color .
6795	Emits an error .
6796	Write a message to a stream
6797	Print a table
6798	push an image
6799	get a template
6800	return image manifest
6801	get template
6802	Update client secrets
6803	Return a string representation of a class .
6804	Raise errors .
6805	Create a new proxy proxy .
6806	Returns the gravatar URL for a user or email address .
6807	Returns the gravatar url for the given email address .
6808	Check if the email has a gravatar .
6809	Returns the gravatar profile URL for the given email address .
6810	Generate a sequence of chimera blocks
6811	Compute the chimera block quantient of a Chimera graph
6812	Return a set of residues from a molecule .
6813	Enumerate a molecule .
6814	Normalize a molecule .
6815	Apply a transformation to a molecule .
6816	Canonicalize a molecule .
6817	Validate a molecule
6818	Disconnects from a molecule
6819	Standardize a molecule .
6820	Enumerate Tautomers from a molecule .
6821	Canonicalize a molecule .
6822	Standardize molecule .
6823	Returns tautomer parent of mol
6824	Find the parent of mol
6825	Remove stereo parent from molecule .
6826	Set isotope of mol
6827	Return the charge of the parent mol .
6828	Find super parent of mol
6829	Main entry point for molvs .
6830	Remove fragments from the molecule
6831	Choose the largest fragment
6832	Integrates an IVP model with the given parameters .
6833	Get statistics for the current user
6834	Get the members of the organization
6835	Get all teams of the organization
6836	Get all repos
6837	Get the total contributors for a repository .
6838	Return the number of open and closed issues .
6839	Get all issues for a given repo
6840	Get the README for a repository .
6841	Get the license
6842	Get all commits for a given repo
6843	Writes a json file to disk
6844	Write total number of contributors to a file .
6845	Write list of languages to file .
6846	Check if a directory exists .
6847	Remove a date from the database
6848	Gets a list of organizations from the GitHub organization .
6849	Create an enterprise session .
6850	Check for API limits .
6851	Connect to GitHub .
6852	Query for repositories .
6853	Get an organization .
6854	Write to a file
6855	Create a new Project instance from a Gitlab Repository object .
6856	Create a Project from a DOE code record .
6857	Return License object for given license .
6858	Get traffic .
6859	Get all releases for a given repository
6860	Get list of referrers .
6861	Retrieves data from a given URL .
6862	Write json file to disk
6863	Writes data to file .
6864	Checks if the data in the given file exists in the given file
6865	Writes data to a file
6866	Write the referrers to a file .
6867	Yield records from DOECODE file
6868	Fetches a list of DOE code records .
6869	Process a file or URL .
6870	Login to GitHub
6871	Get the members of the organization
6872	write logins to file
6873	Connect to a stashy .
6874	Connect to Gitlab .
6875	Query for repositories .
6876	Clone a git repository from a git repository
6877	Compute labor hours for a given location .
6878	Prune all strings that are empty
6879	Read a GQL file
6880	Query GitLab from a file .
6881	Submit a git query
6882	Wait for the given UTC timestamp to arrive .
6883	Print a progress bar .
6884	Import data from file
6885	Save the data to a file
6886	Create a tss connection
6887	Creates a project analysis client .
6888	Creates a core client .
6889	Creates a Git client .
6890	Creates a TFS Git client .
6891	Get Git Repos for a project .
6892	Returns a list of branches for a project
6893	Calculate the year - commits .
6894	Calculates the total number of commits for each week
6895	Write the last year commits to a CSV file .
6896	Configure backends
6897	Get metrics interface .
6898	Record timing information .
6899	Add a timing information .
6900	Decorator for timing a function .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Rollup the current stats .
6905	Order an enum field .
6906	Convert database value to enum value .
6907	Convert value to python type
6908	Convert value to field name .
6909	Recursively resolve a path .
6910	Given a list of usls and a list of dictionaries return a dictionary of dictionaries where each cell is a list of dictionaries .
6911	Returns the mean value .
6912	Increment the current counter .
6913	Return the mean rate .
6914	Mark the derivative as a new value .
6915	Send a metric to InfluxDB .
6916	Serialize a metric
6917	Format metric string .
6918	Send a metric to the client .
6919	Return the value of an option if it exists .
6920	Ensure data is UTF - 8 .
6921	Return the default value for a given option .
6922	Returns a mapping from ledger code to GUID
6923	Get all available divisions
6924	Map an exact invoice numbers to ForeignKey
6925	Solve Sudoku grid .
6926	Register a view decorator .
6927	Register a form view .
6928	Decorator to configure a method view .
6929	Register an API view .
6930	Register a generic API view .
6931	Register a model view set .
6932	Stream from a file descriptor .
6933	Called when a read is ready .
6934	Close the connection .
6935	Called when a connection is lost .
6936	Add a watch for a path .
6937	Unwatch a watch .
6938	Setup a watch for a given path .
6939	Initialize the server .
6940	Get an event from the stream .
6941	Triggers a touch event .
6942	Called when the interval has completed .
6943	Called when the timer failed .
6944	Closes all connections .
6945	Return True if all connections are starred .
6946	Connect to nsqd
6947	Query the Lookupd API .
6948	Set the max in flight
6949	Called when a message is finished .
6950	Add a callback to be called when a client is listening .
6951	Remove a callback .
6952	Triggers event listeners
6953	Publish a message to a topic
6954	Set feature transform
6955	Returns the prediction
6956	Calculate theta of the model
6957	Parse log file .
6958	Clean up temporary fastq files .
6959	Merge the default adapter .
6960	Main trimmomatic
6961	Read depth file .
6962	Run the Plasmid function
6963	Set template path .
6964	Set channel names .
6965	Get user channel info
6966	Render a Jinja2 template
6967	Render the template
6968	Set the context of the workflow .
6969	Updates the main forks .
6970	Set a secondary channel for this process .
6971	Updates component attributes .
6972	Set compiler channels .
6973	Set the raw inputs using raw_input .
6974	Set the secondary inputs .
6975	Set extra inputs
6976	Parse the coverage header .
6977	Parse assembly file .
6978	Calculate GC properties .
6979	Filter contigs based on comparisons
6980	Calculate assembly length
6981	Write the filtered assembly to a file .
6982	Write the assembly report to a file .
6983	Remove inner loops from text .
6984	Perform Insanity checks .
6985	Sanity checks for the given pipeline string .
6986	Parse a pipeline string .
6987	Get the source lane for a fork .
6988	Parses a lane string into a list of tokens .
6989	Establish linear connection .
6990	Establish a connection to a sink
6991	Add unique identifiers to a pipeline string
6992	Remove unique identifiers from pipeline links .
6993	Check that the required files are opened .
6994	Return a mapping from header to position .
6995	Convert hms string to float
6996	Convert a size string to a float .
6997	Extract all the processes from the log file .
6998	Clears the inspect state
6999	Update barrier status .
7000	Retrieve a log from a file .
7001	Assess the usage of the process
7002	Update process stats
7003	Parse log file .
7004	Updates inspect and trace information .
7005	Displays an overview .
7006	Updates the top lines
7007	Right left left
7008	Return last n lines
7009	Read the pipeline file and return a dict of dicts .
7010	Opens the dotDag file to a dict
7011	Generate a hash for the next flow .
7012	Return the path to the nextflow command .
7013	Splits the assembly into a fasta file .
7014	Run pipeline status routine
7015	Run innuendo pipeline .
7016	brews a recipe
7017	List all available recipes .
7018	Validate a pipeline string
7019	Build the upstream of the given process descriptor .
7020	Builds a downstream of the given processes .
7021	Define a pipeline string from a list of processes
7022	Run the auto - pipeline .
7023	Return the string representation of a component .
7024	Generate a report .
7025	Generate Trimmomatic report .
7026	Fix the names of the contigs in asseembly .
7027	Clean up temporary files .
7028	Parse a list of files
7029	parse log file
7030	Iterate over the values in the database .
7031	Extract contig id from a contig string
7032	Return plot data as a dict
7033	Writes the data to a . json file
7034	Run the assembly report
7035	Parse assembly file .
7036	Get summary statistics for contigs .
7037	Return a list of labels for each contig
7038	Calculate GC rate for a given length .
7039	Calculate GC sliding window
7040	Main entry point for skesa
7041	Generate a json report
7042	Returns the index of the indices of the trimmed list
7043	Calculate the trim range
7044	Calculate the optimal range of samples
7045	Read a summary file and return an OrderedDict .
7046	Check the health of a summary file .
7047	Parse the bowtie log
7048	Parse process name .
7049	Add a dependency
7050	Search for a template in the tree backward .
7051	Build the header
7052	Build the footer
7053	Set the channels for all processes .
7054	Set the main process
7055	Set the secondary channels
7056	Set the status_channels attribute of all processes .
7057	Convert a dictionary of resources into a string .
7058	Return the config string for a container
7059	Returns a string containing the parameters of the process .
7060	Returns a string with merged parameters .
7061	Returns the manifest string for the pipeline
7062	Set the configuration for all processes .
7063	Convert a dictionary to a treeDag
7064	Render the pipeline .
7065	Write config files to disk .
7066	Export params to stdout .
7067	Export directives to stdout .
7068	Return a dict of docker tags
7069	Builds the project .
7070	Set kmer range .
7071	Main entry point for metaSPAdes .
7072	Get the id of the report
7073	Update the trace file .
7074	Update the size of the log file .
7075	Send a live report to the broadcast
7076	Initialize the live reports
7077	Closes the connection to the server .
7078	Convert the adapter_fasta file to a table .
7079	Main function for fastqc
7080	Sends the master dictionary to the output file
7081	Main function for mash_output
7082	Add the version and build it .
7083	Run mash_output
7084	Returns a string with the given color_label .
7085	Parse a dictionary of dicts
7086	Collect all the processes and exit .
7087	Guess the compression of a binary file .
7088	Get the range from a qual string
7089	Returns a list of valid encodings that are within the specified range
7090	Parse the coverage table .
7091	Filter assembly files that are less than minimum_coverage .
7092	Filter a BAM file using samtools view .
7093	Calculate the minimum assembly minimum coverage .
7094	Get assembly size and contig size .
7095	Process assembly mapping .
7096	Convert camel case to camel case
7097	Collect process classes .
7098	Process a newick file
7099	Wrapper for fasthull
7100	Map the W to the data
7101	Apply median filter .
7102	Computes the k - th Gaussian kernel .
7103	Compute SSM .
7104	Compute the sum of the nc
7105	Gaussian filter .
7106	Compute the distance between each element of the input data .
7107	Calculate the circular shift
7108	Compute the embedded space of an array
7109	Plotting plots .
7110	Plot boundaries .
7111	Plot labels
7112	Plot a single track
7113	Plot a tree .
7114	Get a list of feature segments from a given feature .
7115	Convert a list of features to a 2D Fourier Transform
7116	Compute the similarity between a set of features .
7117	Fits the scatter .
7118	Perform a partial fit on the data .
7119	Reads references from an audio file .
7120	Searches for an estimation
7121	Save estimations .
7122	Returns a list of all boundary algorithms .
7123	Return a dictionary of configuration parameters .
7124	Get a list of files from a dataset .
7125	Read the boundaries of the hierarchy .
7126	Returns the duration of the duration file .
7127	Convert a list of times and labels into a mapperx file .
7128	Return the path to the dataset file .
7129	Align the segments of a segmentation .
7130	Estimate the heart of the beat .
7131	Read the annotations from the annotations file
7132	Compute beat sync features .
7133	Read features from file .
7134	Write features to file .
7135	Returns a list of all parameter names .
7136	Compute the frame sync times .
7137	Returns a list of frame times for this feature .
7138	Get the features from the audio file .
7139	Select a feature from a file .
7140	Preprocess the features .
7141	Post - processing of the segmentation .
7142	Entry point for the CLI .
7143	Print results .
7144	Compute GTF results .
7145	Compute the information gain .
7146	Process a track .
7147	Return the name of the results file .
7148	Process a track file .
7149	Add a config variable
7150	Compute all the features for a given audio file .
7151	Processes a MAF file into a list of features .
7152	Gaussian cost function .
7153	Lognormalize matrix .
7154	Normalize a frequency matrix .
7155	Normalize the input data .
7156	Return a list of time frames
7157	Remove empty segments .
7158	Convert clicks to audio
7159	Synchronize labels according to new bound_ids .
7160	Processes a segmentation level .
7161	Align end_hierarchies to end_hierarchies
7162	Calculate the distance between two nodes
7163	Estimate the knee of the model
7164	Get clustering data .
7165	Run k - means .
7166	Compute Bayesian Information Criterion
7167	Return the magnitude of a matrix .
7168	Convert segments_json to bounds
7169	Convert a bounds file to a numpy array .
7170	Extract labels from a json file .
7171	Convert a json file to a numpy array .
7172	Compute the two - dimensional FFT .
7173	Compute the label for each label .
7174	Filter the activation matrix .
7175	Get boundaries module from MSAF .
7176	Get labels module from MSAF .
7177	Segment an audio file .
7178	Run a flat segmentation .
7179	Run the algorithms for the given audio file .
7180	Process a track .
7181	Process audio file .
7182	Update the model w .
7183	Entry point for translation .
7184	Decorator to register a function .
7185	Return accumulator .
7186	Run a task in a context manager
7187	Emulate spool .
7188	Read lines from input stream .
7189	Decorator for push URLs
7190	Use Google Translate API .
7191	Return a dictionary of translations for a given language .
7192	Print the translation table .
7193	Remove nodes from the network
7194	Save a network to a HDF5 file .
7195	Create a Network from a HDF5 file .
7196	Set the variable to the given node_ids
7197	Aggregate accessibility variables .
7198	Returns a pandas DataFrame of node_ids .
7199	Plot the graph .
7200	Set the pois for the given category .
7201	Find the nearest pois of the given category .
7202	Return the indices of the low connectivity nodes of the graph .
7203	Convert a node to a dict
7204	Make an osm query
7205	Build a query string for a node
7206	Query for OSM nodes .
7207	Return True if value is a regular expression .
7208	Compare value with expectation .
7209	Wrap a function to return the result .
7210	Compare expression to value
7211	Trigger callable methods .
7212	Check if a request matches a request .
7213	Get a matcher by name .
7214	Initialize a matcher by name .
7215	Set the body of the request .
7216	Set the body of the request
7217	Set a value in the container .
7218	Append list of functions to target .
7219	Triggers a request from an instance
7220	Set the URL for the request .
7221	Set the headers for the request .
7222	Matches the given headers .
7223	Matches headers present in the request .
7224	Set the Content - Type header .
7225	Set query parameters .
7226	Set the body of the request .
7227	Set the body of the request .
7228	Set the XML for the request .
7229	load a file
7230	Sets the changes .
7231	Set the error
7232	Reply to the mock
7233	Match a request .
7234	Activate an asynchronous function .
7235	Set the mock engine for this instance .
7236	Enable the network for the given hostnames .
7237	Add a mock to the engine
7238	Remove a mock
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Determine if the request should use the network .
7242	Match a request .
7243	Make a copy of this request
7244	Activate the engine .
7245	Context manager to temporarily activate the engine .
7246	Add interceptors to the engine .
7247	Remove an interceptor by name .
7248	Get a setting from the connection
7249	Returns the SQL for the decrypted column .
7250	Overrides pre_save method .
7251	Returns a placeholder for the given value .
7252	Return a decrypted Column instance .
7253	Returns the SQL placeholder for the field .
7254	Given a dictionary of YAML keys return a mapping of keys to values .
7255	Base regression function .
7256	Returns the covariance matrix .
7257	Recurse the tree .
7258	Calculate the values of the tree .
7259	Calculates the mean and variance for the given variable .
7260	The explained variance
7261	Calculate the regression model for the tree .
7262	Find the best root of the tree
7263	set Tc values
7264	Calculate the number of merged branches
7265	Calculate the cost of the merger .
7266	Attach the merger cost to the tree .
7267	Optimize the coalescent time scale
7268	Convert profile to sequence
7269	Normalize a profile .
7270	Setter for GTR
7271	Set the GTR model .
7272	set sequence length
7273	Attach sequences to nodes
7274	Prepare the tree .
7275	Prepare the internal state of the tree .
7276	Calculate the distance2 root of the tree .
7277	Reconstruct ancestral sequences
7278	Returns the mutation matrix for the given node .
7279	Returns the expanded sequence
7280	Create the FitchAN profiles
7281	Return the state of the node at the given position
7282	Calculate the first pair of arrays
7283	Return the total sequence LH for the given position .
7284	Compute the log likelihood of the ancestral tree .
7285	Calculate branch length for given node .
7286	Optimize branch length
7287	Optimize the branch length of the tree .
7288	Calculate the optimal length of a branch
7289	Optimize sequences and branch lengths
7290	Reconstruct the tree .
7291	Compute the Q
7292	Create a new Gaussian Gaussian model .
7293	Creates a standard model .
7294	Check the diagonal of the GTR rate matrix .
7295	Compute the probabilistic probability of a given sequence pair .
7296	Compute optimal T
7297	Compute the T_compressed T_compressed
7298	Compute the probabilistic probability of a profile .
7299	Evolves the model at the given time t .
7300	Returns the log - likelihood of a sequence .
7301	Set branch length mode
7302	Filter the tree .
7303	Plot the root to tip to tip
7304	Resolve multiple mergers .
7305	Print log - likelihood .
7306	add a coalescent model to the tree
7307	Find the best root node
7308	Associate the tree with the given parameters .
7309	Create GTR model
7310	Read a VCF file .
7311	Reconstruct ancestral sequences
7312	Calculates the FWHM of a distribution .
7313	Create a delta function
7314	Multiply distributions .
7315	Assign dates to the tree
7316	Setup a treeregression object
7317	Makes a time - tree with temporal constraints .
7318	Calculates the log likelihood of the tree .
7319	Convert dates to dates .
7320	Return the date uncertainty of a node
7321	Returns the maximum posterior region for the given node
7322	Returns the minimum value of an interpolation object
7323	Calculate the median of an interp_object
7324	Convert datetime to numeric date
7325	Create a Dataset from a DataFrame
7326	Connect to guacd server
7327	Closes the connection .
7328	Receive an instruction .
7329	Send data .
7330	Send an instruction .
7331	Establish a handshake .
7332	Convert a unicode string to utf - 8
7333	Load an instruction .
7334	Encode an argument .
7335	Encode instruction .
7336	Return the URL for a class .
7337	Returns the URL for this instance .
7338	Return the URL for a class .
7339	Download the file to the specified path .
7340	Return the parent object of this job
7341	Ask user for credentials .
7342	Login to the solver .
7343	Show user info .
7344	Print user details .
7345	Return a copy of this query .
7346	Create a new GenomicSet from a chromosome .
7347	Return a new GenomicFilter with the given position .
7348	Get facets from the query
7349	Process filters .
7350	Returns the next page .
7351	Execute a query against the Solve server .
7352	Migrate a dataset to another dataset
7353	Entry point for the solver .
7354	Download all files from a vault folder
7355	Construct a new instance from the given values .
7356	Logout of the user .
7357	Send a request to the API
7358	Returns the child object of this task .
7359	Cancels the job .
7360	Parse snpeff output .
7361	Convert a row to a dictionary .
7362	Return authentication credentials .
7363	Save the configuration to a file
7364	Format value according to type
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Format a table .
7370	Migrate this dataset to another target
7371	Validate a full path .
7372	Upload a file or folder
7373	Validate a vault path .
7374	Validate an API host URL .
7375	Add a path to the manifest .
7376	Annotate a list of records .
7377	Evaluate the expression .
7378	Set the format_name
7379	Register a new output format handler .
7380	Format data using preprocessors .
7381	Wrapper for tabulate .
7382	Get the user s config directory .
7383	r Returns a list of directories for the application .
7384	Read the default configuration .
7385	Read all config files
7386	The user config file
7387	Returns a list of all system config files
7388	Returns a list of all additional files .
7389	Write the default config file .
7390	Read configuration files .
7391	Truncates a string to a maximum length .
7392	Replace a string in a string .
7393	Call a list of commands .
7394	Applies the given options to the given command .
7395	Applies an option to a command
7396	Initialize options .
7397	Run the pep8radius .
7398	Run the clean_docs command
7399	Takes a list of tuples and a list of strings and a list of strings .
7400	Formats a list of numbers .
7401	Formats a row in a CSV format .
7402	Create a vertical table from data .
7403	Generate a table from data .
7404	Renders a template file
7405	Checks if the given type is numeric .
7406	Returns True if type is bool False otherwise .
7407	Check if the given type is binary .
7408	Generate a key from a template .
7409	Generate a key pair .
7410	Find objects that match the template .
7411	Insert an image into the qr_img
7412	Export gene panel .
7413	Return the first weekday
7414	Repeat the repeat count .
7415	Repeat a repeat of the repeat .
7416	Repeatedly repeat the next day .
7417	Handle a single chunk event .
7418	Generator that yields variants for a collaborator .
7419	Exports verified variants to a document
7420	Convert a list of variants to a MIME format .
7421	Update a user .
7422	List str variants .
7423	Retrieve a single variant .
7424	Retrieve a string variant .
7425	View for verification .
7426	View for a CLIN variable .
7427	List cancer variants .
7428	Display an acmg for a variant .
7429	View for an evaluation .
7430	Accepts a criteria and returns a dictionary of classification results .
7431	Uploads a list of hgnc symbols .
7432	Download verified Excel files
7433	Return a mapping of HGNC symbols to their aliases .
7434	Add incomplete penetrance info
7435	Link gene genes .
7436	Send a request to MME .
7437	Return a list of connected nodes .
7438	Get the coordinates of a cytoband .
7439	Determine the sub category for a particular variant .
7440	Calculate the length of a variant .
7441	Get the position of the end of the variant
7442	Parse the coordinates of a variant
7443	Check for cytobands
7444	Create a panel .
7445	Update a panel .
7446	Export a panel
7447	Edit a gene .
7448	Save delivery report to case
7449	Return a dictionary of HPO terms .
7450	List users whitelist .
7451	Given a phenotype ID return a phenotype object
7452	Return information about a gene
7453	Convert a gene query to a list of dicts .
7454	List all institutes .
7455	View transcripts .
7456	Returns a list of events for the given day
7457	Parse variants query .
7458	List variants for a string
7459	Returns information about a str variant
7460	Add a variant to the store .
7461	Parse a variant .
7462	Return the CSV header for a variant .
7463	Given a list of genes return a dict of variants .
7464	Get the predictions for a list of genes
7465	Add a variant to a case
7466	Tries to find the bam file name .
7467	Return information about a variant .
7468	Parse a GPG Gene object .
7469	Return a string representation of a transcript .
7470	Returns the end position of the variant
7471	Determine the frequency for a variant
7472	Generate clinsig objects for a variant
7473	Generate the URL for the thousand gzip gene .
7474	Get URL for a variant
7475	Generate a beacon URL for a variant
7476	Return the URL for the UCSC variant .
7477	Returns a human - readable version of a variant
7478	Returns the expected models for a variant
7479	Return a list of callers for a variant
7480	Search for cancer variants .
7481	Export a CCL variant to a specific case .
7482	Retrieve information about a clinvar submission .
7483	Retrieve the ACMG information for a variant .
7484	Performs an ACCG post processing .
7485	Convert an evaluation_obj to an evaluation object
7486	Upload HGNCNC symbols from a file .
7487	Generate an XLSX file for verified variants .
7488	Export all genes to a bed format
7489	Parse a clnsig
7490	Parse compound information .
7491	Export genes
7492	Build an individual from an individual .
7493	Load variants for a case .
7494	Get information about a case .
7495	Print out the view collections .
7496	List institute
7497	Update institute information .
7498	Returns a file handle
7499	Get the number of days between the request and the date range
7500	Get the next and previous .
7501	Check if the year is in the current year .
7502	Check the weekday of a given date .
7503	Parse case data .
7504	Parse data from config file
7505	Parse an individual
7506	Parse a list of individuals into a list of individuals .
7507	Parse a config file into a dict .
7508	Parse a ped file .
7509	Build an evaluation object .
7510	Export MT variants for a case
7511	Checks if the given parameters are pathogenic .
7512	Determine whether or not a list of parameters are likely to be pathogenic .
7513	Return whether or not a list of bs_terms is likely to be a list of terms .
7514	Return the prediction of the acmg terms
7515	Add gene information to a variant
7516	Fetch variants from a case
7517	Return a list of variants for a sanger variant .
7518	Retrieve a variant from the database .
7519	Retrieve genes from the database
7520	Returns a list of variants for the given institute .
7521	Returns a list of causatives for the given institute .
7522	Returns a list of variants for the given case .
7523	Yields the variants of a variant .
7524	Delete old variants for a case .
7525	Returns all variants that overlap with a variant .
7526	Return a list of variants for a case
7527	Get the VCF for a region
7528	Retrieve variants for a specific sample
7529	Connect to MongoDB .
7530	Gets a list of submission objects from a form .
7531	Generate the header for a CLINVAR submission .
7532	Convert a list of submission objects to CSV .
7533	Load transcripts from ensembl
7534	Display a panel .
7535	Build an exon from an exon dict .
7536	Delete a gene panel
7537	Delete all indexes
7538	Delete a user
7539	Delete genes collection
7540	Delete exons
7541	Delete a case .
7542	View individual individuals .
7543	Parse matches for a given patient
7544	Show cases .
7545	Load a user from the store .
7546	View for login .
7547	Build an institute .
7548	Delete an event from the database .
7549	Create an event .
7550	List events for a variant
7551	Get all events for a user
7552	Add a phenotype to a case .
7553	Remove a phenotype from a case .
7554	Create a comment on a case .
7555	Parse the genotypes for a variant
7556	Check if the given chromosome is within the given coordinates .
7557	List of HPO terms
7558	Export transcripts .
7559	Load all exons
7560	Load a region .
7561	Return all events for a particular year .
7562	Return a QuerySet of live events that are still live .
7563	Parse requirements . txt
7564	Get an existing gene from the store .
7565	Update a panel
7566	Create a new panel
7567	Export a panel .
7568	Return archive information .
7569	Migrate an archive to the database .
7570	Migrate an archive .
7571	Load research for a case .
7572	Load HGNC genes .
7573	View HPO terms .
7574	Create a Flask application
7575	Configure extensions .
7576	Register the blueprint .
7577	Configure coverage .
7578	View aliases
7579	Build a panel
7580	Export verified variants .
7581	Export variants .
7582	Return a VCF entry for a variant .
7583	Searches for mongod
7584	Generate an MD5 key from a list of strings .
7585	Setup MongoDB instance
7586	Setup collection from database .
7587	Run Scout index .
7588	Setup the SCout database
7589	Run Scout setup demo .
7590	Set up the command line parameters .
7591	View institute information .
7592	Parse a list of genes_info into a list of genetic models .
7593	View the panels for the institute .
7594	Add an institute to the database .
7595	Update an institute .
7596	Get institute by institute ID .
7597	Return True if the given date is valid .
7598	Convert a date string to a datetime object .
7599	Export hpo genes
7600	Parse a rank score entry .
7601	Add a user .
7602	Check connection to MongoDB .
7603	Initialize the application
7604	Load a delivery report into the database .
7605	Add a user to the database .
7606	Run pileup
7607	Load exons from ensembl file
7608	Update compound compounds
7609	Add links to a gene
7610	List HGNC symbols
7611	Parse a gene line into a dictionary .
7612	Parse hgnc genes
7613	Get an openclinvar submission for a given user and institute .
7614	Updates the submission with the given clinvar_id
7615	Returns theclinvar_submission_id for the given submission
7616	Add variants and case data to the clinvar submission
7617	Closes a clinvar submission .
7618	Retrieve all clinvar submissions for a given user .
7619	Delete a clinvar object .
7620	Returns a list of CLINVars for a given case
7621	Parse HOobo output .
7622	Show all available genes .
7623	Show a single gene .
7624	List genes .
7625	Check if genes exist in database
7626	Load clinical SNV variants for a case
7627	Load a Scout from the database
7628	Decorator to render a view function .
7629	Return an institute and case .
7630	Return a list of institute names for a user .
7631	Retrieve the HGNC ID from the adapter info .
7632	Update a panel
7633	Drop disease terms .
7634	Load the disease terms .
7635	Parse the frequencies for a variant
7636	Returns the frequency of a variant .
7637	Parse the variants of a variant .
7638	View users .
7639	Build a HGNC gene from the given information .
7640	Load a panel
7641	Load OMIM - AUTO - AUTO .
7642	Compare two MIM panels
7643	Update the version of the mim file
7644	Add a gene panel to the database
7645	Retrieve a panel by ID
7646	Delete a panel
7647	Get a gene panel by name
7648	Return a list of gene panels .
7649	Convert a gene to a list of panel names .
7650	Update a panel .
7651	Add pending action to a panel
7652	Applies pending updates to the panel
7653	List of clinical symbols
7654	List cases .
7655	Send an email record
7656	Load the indexes from the database .
7657	Updates indexes
7658	Drop all indexes
7659	Build a mongodb variant query
7660	Build MongoDB query .
7661	Build clinsig query
7662	Add genomic coordinates to query
7663	Add filters to the query
7664	Drop the Scout database
7665	Parse a CSV file into a list of dicts
7666	Build clnsig object
7667	Load a bunch of genes into the database .
7668	Load multiple transcripts .
7669	Load a list of exon objects into the database .
7670	Retrieve a HGNC gene .
7671	Returns the HGNC ID for the given symbol
7672	Fetch genes by HGNC symbol
7673	Return all genes in the database
7674	Return the number of genes in the database .
7675	Drop all genes from the database .
7676	Drop all transcripts .
7677	Drop the exons collection
7678	Fetch all ensembl transcripts
7679	Convert hgnc symbol to a dictionary
7680	Return gene by symbol
7681	Get all HGNC genes by alias
7682	Get all ensembl genes
7683	Retrieve the HGNC symbol from the database .
7684	Add hgnc_id to genes
7685	Return a dictionary of coding intervals for each chromosome .
7686	Update omim gene panel
7687	Get information about a specific institute .
7688	Return information about a case .
7689	View for a matchmaker .
7690	MME match maker .
7691	Delete a matchmaker .
7692	Retrieve a case report .
7693	Return a pdf of a case report .
7694	Displays a case .
7695	Add phenotypes to a case .
7696	Add phenotypes to a case .
7697	Comment an event .
7698	Display the status of a case .
7699	View for assignment .
7700	List of HPO terms
7701	Mark a variant as validation .
7702	Mark a variant .
7703	Send a delivery report to a case .
7704	Share a case .
7705	Run a new trial .
7706	View for research .
7707	Sends a VCF2cytosure to a VCF .
7708	Retrieve multiqc data from an institute .
7709	Return a list of cases .
7710	Generate the case report .
7711	Retrieve the contents of the report for a specific sample .
7712	Return a list of CLDR submissions for a user .
7713	Writes MT files to Excel .
7714	Updates the case synopsis .
7715	Retrieve diseases from HPO ids .
7716	Retrieve information about a VCF .
7717	Retrieve information about a multiqc .
7718	Returns a list of Sanger objects for the given institute .
7719	Add a new contact
7720	Delete patient
7721	Search for MME submissions .
7722	MME match maker .
7723	Update genes
7724	Parse the info of a variant .
7725	Build a transcript
7726	Load an institute into the database
7727	Parse the CADD header .
7728	Run a case
7729	Update a single variant
7730	Updates the variant rank for a case .
7731	Updates the compound compound
7732	Updates compound objects
7733	Update compound variants
7734	Updates the compound compounds for a given case .
7735	Load a variant into the database
7736	Upsert a variant .
7737	Load a list of variants into the database .
7738	Assign a case to a case .
7739	Share a case .
7740	diagnose a case
7741	Mark a case as checked .
7742	Event handler for ordering a variant .
7743	Returns a list of sanger instances ordered by institute_id and user_id .
7744	Validate a variant .
7745	Mark variant as causative .
7746	Updates the dismiss variant for a variant .
7747	Updates the ACMG for a variant .
7748	Parse ids .
7749	Parse simple ID string .
7750	Parse a document id .
7751	Convert hgnc_id to hgnc_id
7752	Create a variant ID from a variant object .
7753	Return the number of cases in the database .
7754	Updates the list of genes for a given case .
7755	Fetch a case from the database .
7756	Delete a case .
7757	Add a case to the database .
7758	Replace a case .
7759	Updates the case id of a case
7760	Submit an evaluation .
7761	Get all evaluations for a variant
7762	Parse transcript lines .
7763	Parse ensembl query response
7764	Parse the ensembl transcript query result .
7765	Parse an ensembl line .
7766	Parse ensembl genes
7767	Parse ensembl exons .
7768	Parse ensembl exon request
7769	Initialize logging .
7770	Parse an omim line
7771	Parse morbid file .
7772	Extract phenotype information from a genemap file .
7773	Show gene genes .
7774	Convert string to int or float
7775	Formats the month of a month
7776	Formats a day
7777	Format a month name .
7778	Generates HTML for the popover .
7779	Extract panel information from panel lines .
7780	Parse a gene info dictionary .
7781	Parse a list of genes .
7782	Parse a gene panel .
7783	View diseases .
7784	Drop HPO terms .
7785	Return information about users .
7786	Parse the conservation of a variant
7787	Parse the conservation for a variant .
7788	Return general case information .
7789	Gets a list of cases grouped by ID .
7790	Returns a HttpResponse with the given context
7791	Get the year and month
7792	Check for cancelled events .
7793	Get term from hpo_id
7794	Search HPO terms .
7795	Get a disease term .
7796	Retrieve disease terms .
7797	Load a disease term into the database .
7798	Generate a list of gene names for a list of terms .
7799	Read waterfall data from an HDF5 file .
7800	Sets up the frequency range
7801	Sets up the timestamps .
7802	Read a filterbank file .
7803	Compute the lst of the segment
7804	Fill the DC bin .
7805	Print info about the file
7806	Calculate the extent
7807	Plot the waterfall .
7808	Plot the time series
7809	Write the signal to a filterbank .
7810	Calibration of the data .
7811	Convert an array to a sparse matrix .
7812	Calculate a mixture of gains .
7813	Calibration of the strains
7814	Returns the fracpols of a string
7815	Writes waterfall data to file
7816	Find the closest value in xarr
7817	Rebin data to mean .
7818	Unpack an 8 - bit array .
7819	Calculate the difference between two streams .
7820	Plot the Stokes Diode Diode .
7821	Plots the diode of the diode data .
7822	Plot thegain offsets of a waterfall
7823	Open a file or directory
7824	Setup the selection range
7825	Calculate the size of the channel
7826	Calculate the shape of the channel
7827	Set the start and end indices of the channels
7828	Calculate the start and end frequencies
7829	Populate timestamps .
7830	Populate the frequencies .
7831	Calculate the number of coarse channels
7832	Calculate the number of blobs in the selection .
7833	Check if the array isheavy .
7834	Read data .
7835	Read data from file
7836	Read a row from the file
7837	Read data from the container
7838	Updates the header of the header .
7839	Print information about the file
7840	Write the container to a file .
7841	Write the container to an HDF5 file .
7842	Write the filterBanks to an HDF5 file .
7843	Get the size of the blob .
7844	Determine the size of the file .
7845	Grab the data from the data
7846	Create spectra from a GuppiRaw file .
7847	Read the first header
7848	Find the number of data blocks
7849	Read the next data block .
7850	Plot the next data block .
7851	Generate the filterbank header .
7852	Find the size of the header file
7853	Tool for matchfils
7854	Create an HDF5 file .
7855	Calculate a folded frequency spectrum
7856	Integrates the waterfall in the waterfall model
7857	Calculate the CalCalfluxes
7858	Calculate the center frequency
7859	Calculate the f_ratios for a set of observations .
7860	Calculate the diode spec
7861	Calculate the tsys_spec for the diode_spec
7862	Calibration for waterfall
7863	Return the length of the header of a file .
7864	Check if a file is a filterbank .
7865	Fix the header of a file .
7866	Generate a sigproc header string .
7867	Convert angle to sigproc angle
7868	Calculate the number ofints in a file
7869	Return a dict representation of the frame .
7870	Create a subparser for a record .
7871	Create a parser for zonefile
7872	Remove comments from a string .
7873	Add default name to a file .
7874	Parse a record line .
7875	Parse a list of records .
7876	Parse a zone file .
7877	Returns a copy of a field
7878	Parse a schema string .
7879	Convert a list of classes to a python package .
7880	Return the source code for a schema .
7881	Disable auto store
7882	Dump record in json - encodable object format
7883	Load a serialized record from a dictionary .
7884	Load a record from a string .
7885	Add a schema to the schema .
7886	Returns the schema for the given record name .
7887	Dict representation of this field .
7888	Mixin_cls decorator .
7889	Create a new record from a metaclass .
7890	Generate a schema dict for a given record .
7891	Return the schema for the given record .
7892	A generator for mr reader .
7893	Write output to output_stream .
7894	Return an OrderedDict with the given key and value .
7895	Query the server and return a SearchResult object
7896	Return a search result
7897	Return a list of entities with the given attributes .
7898	Gets an entity from a href .
7899	Given a quote return a quote
7900	Escape a filter .
7901	Generates an elementary rotation matrix for a given axis and rotation angle .
7902	Construct the covariance matrix .
7903	Calculate the average voltage error .
7904	calculate the parallax error
7905	Calculate the magnitude of the magnitude of a G .
7906	Calculate the magnitude of a geometric magnitude .
7907	Make a plot of the magnitude .
7908	Return the average number of transits .
7909	Returns the angular distance between two points .
7910	Transform cartesian coordinates to cartesian coordinates .
7911	Transform spherical coordinates to spherical coordinates .
7912	Transform the covariance matrix to a Jacobian matrix .
7913	Return the error scaling factor for an observable .
7914	Makes a 2D plot with a pdf plot
7915	Make a plot of the sky plot
7916	Returns a function that accepts multiple functions .
7917	Decorator to handle exceptions raised by QKeyError
7918	Uniquote a value .
7919	Apply a function to each item in the collection .
7920	Return a copy of this RDD .
7921	Return a filtered collection filtered by a function .
7922	Return a copy of the collection while yielding items .
7923	Return a copy of this collection without a predicate .
7924	Combine two collections together .
7925	Find the first matching node
7926	Return the path to the serach device
7927	Generator for iterating over groups .
7928	Yield all registered options
7929	Return string representation of event .
7930	Build a list of runs for each register .
7931	Print the results .
7932	Print results to stdout .
7933	Print the results of the problem .
7934	Clean the given code .
7935	Round x to next base
7936	Split indices into blocks .
7937	Calculate cache access
7938	Calculate the number of cycles per cycle
7939	Analyze the kernel .
7940	Run iacacs analysis
7941	Strip and uncomment lines from a list of lines .
7942	Strip unreferenced labels .
7943	Select the best block from a list of blocks .
7944	Print the pointer_increment value for the block
7945	Print a userselect block
7946	Insert markers between start_line and end_line .
7947	Implementation of IACA library .
7948	Main loop .
7949	Simulate the model .
7950	Generate integers from start to stop
7951	Get the last modified datetime of a directory
7952	Check that the arguments are valid .
7953	Main entry point .
7954	Main entry point for pickle .
7955	Create a symbolic symbol
7956	Transforms a multidimensional multidimensional multidimensional array to 1d .
7957	Transform a multidimensional multidimensional array to 1d array
7958	Recursively find all nodes of a given type
7959	Decorator to force an iterable
7960	Check that all datatypes are allowed .
7961	Set a constant .
7962	Subtract constant expressions from expr .
7963	Returns a dictionary of variable sizes .
7964	Calculate relative offset .
7965	Remove duplicate accesses .
7966	Calculate the length of the variable .
7967	Yield the current state of the loop
7968	Return a list of free symbols .
7969	Returns a dictionary of all the symbols that can be used to generate a list of symbols .
7970	Compile relative distributions .
7971	Convert a global iterator to its indices .
7972	Gets the global iterator .
7973	Convert indices to global iterator .
7974	Returns an iterator over the global iteration values .
7975	Print kernel info .
7976	Print variables information .
7977	Print a table of constants .
7978	Print kernel code .
7979	Convert a mathematical AST to a symbol .
7980	Recursively get the offset of an array
7981	Return the base name of the array
7982	Get the index type of a loop .
7983	Builds constant declarations .
7984	Return array declarations .
7985	Return a list of loops in the kernel .
7986	Build array declarations and map them to malloc
7987	Find innermost loop .
7988	Builds the initializer for an array .
7989	Build dummy calls .
7990	Build a kernel function declaration .
7991	Builds a list of scalar declarations .
7992	Get kernel code .
7993	Build a kernel call .
7994	Get the main code for the main . c
7995	Calculate the assembly for the given micro_architecture
7996	Build the executable .
7997	Convert a string to a sympy expression .
7998	Return the identifier of the file .
7999	Returns the last modified date of the file
8000	Returns a CacheSimulator object from the cache .
8001	Calculate the bandwidth for the benchmark .
8002	Get compiler and flags .
8003	Parse perfctr event
8004	Enforce any overlapping regions
8005	Get the path to the headers directory
8006	Align an iteration to a given iteration boundary .
8007	Returns the number of loads in the memory
8008	Returns a list of hits
8009	Returns the number of misses in the cache
8010	Returns the number of stores .
8011	Returns a list of evicts .
8012	Return information about the memory
8013	Change an environment variable .
8014	Configure the arggroup for the given parser .
8015	Print the results .
8016	Parse the description from the README . md file .
8017	Scheduler retry .
8018	Builds a purchase item
8019	Records a purchase .
8020	Get the course content for a given course
8021	Retrieves the course content from the Catalog API .
8022	Update the unenrolled list of unenrolled users .
8023	Send a course refund email .
8024	Send an offer assignment email .
8025	Return a logger configuration .
8026	Retry an order .
8027	Fulfill an order .
8028	Get Sailthru client
8029	Get a value from the cache .
8030	Set a cache value .
8031	Returns the value of a worker configuration variable .
8032	Get the overrides file name .
8033	Get a value by version
8034	Get Eplus version
8035	Returns a dictionary of FileInfo objects for the given path .
8036	Populate from json data .
8037	Returns a list of all external files
8038	Set defaults for all tables
8039	Prepares the extensible fields
8040	Returns the extended field name for the given index .
8041	Return a mapping of external files to their names .
8042	Get a value from the table .
8043	Update the value of the field inert
8044	Updates the settings
8045	Set default values
8046	Add multiple fields to the record .
8047	Pop the value at the specified index .
8048	Insert value at index .
8049	Delete this record
8050	Register a record hook .
8051	Register a link .
8052	Create a regular expression for the given intent .
8053	Return the remaining duration for a given time .
8054	Return a dict representation of the event .
8055	Send an HTTP request to the server .
8056	Return a list of available services .
8057	Create a directory .
8058	Configure a service
8059	Register a CA .
8060	Set recording state
8061	Update the status of an event .
8062	Update the state of the capture agent
8063	Return the configuration file path
8064	Update the configuration file .
8065	Check if the server is running .
8066	Initialize the root logger
8067	Page for viewing .
8068	Serve image .
8069	Run all modules
8070	Parses an iCal file into a list of events
8071	Get the current schedule
8072	Main control loop .
8073	The main loop .
8074	Return an error response
8075	Return a JSON response .
8076	Get internal state
8077	List upcoming events
8078	Get information about an event
8079	Delete an event
8080	Modify an event
8081	Extract the parameters from the given properties .
8082	Ingest an event .
8083	Start recording .
8084	Render the view to a fragment .
8085	Returns a list of all resources that have been added .
8086	Return a dict representation of this instance .
8087	Create a fragment from a dictionary
8088	Add content to the message .
8089	Add a new resource .
8090	Add a resource URL .
8091	Initialize the js function .
8092	Returns a string containing all the resources for the given placement .
8093	Convert a resource to HTML .
8094	Handle GET requests .
8095	Return a standalone HTML response .
8096	Render a standalone HTML fragment .
8097	calculate the q values for pvalues
8098	Convert values to numpy array .
8099	Given an error table and an error table find the nearest match .
8100	Fast clustering algorithm .
8101	Sample the final error table
8102	Calculate the summary error table
8103	Compute error statistics .
8104	Find the cutoff .
8105	Calculate the score of a classifier .
8106	infer peptideforms
8107	Infer peptides from input file
8108	Infer proteins from a protein file
8109	Subsample an input file to outfile
8110	Reduce an input file to outfile
8111	Backpropagate an input file to outfile
8112	Filter a list of files
8113	Get a group by its ID .
8114	Create a new group .
8115	Delete a group
8116	Gets the members of a group
8117	Updates the members of a group
8118	Get the effective member count
8119	Check if a group is the effective member of a group
8120	Modify Sphinx configuration .
8121	Create a new HDF5 dataset .
8122	Decrypt contents of a file .
8123	Get stdin and stdout
8124	Get stdout .
8125	Get the stderr from the command .
8126	Get debug output .
8127	A context manager that yields stdin and waits for it to finish .
8128	A context manager that yields stdout .
8129	A context manager that adds stderr to stderr .
8130	Create a context manager for debugging .
8131	List empty accounts
8132	List an empty container
8133	Decorator to handle stdout .
8134	wraps stderr with stderr
8135	Write error message to file .
8136	Print help for this option
8137	Print usage information .
8138	Print version information .
8139	Makes a request
8140	Create a new account .
8141	Delete an account
8142	Creates a new container .
8143	Retrieve a HEAD request for an object .
8144	Retrieve an object from a container .
8145	Upload an object to a container .
8146	Create an object in a container .
8147	Resolve an option from the environment variables .
8148	Returns a copy of this object
8149	Write headers to file
8150	Manage client authentication
8151	Generate a temporary URL .
8152	Quote a value .
8153	Executor for globus commands
8154	Return a new client .
8155	Yields an AES - CBC block .
8156	Decrypt a stream using AES256 CBC .
8157	Upload a directory structure .
8158	Put an account
8159	Put a container
8160	Return the body of the manifest .
8161	Create a container for the given path
8162	Obtain a temp url
8163	Display information about a TransformedTransition
8164	Print help for a given command .
8165	Check if the stream is empty .
8166	Encrypt data using AES256 CBC .
8167	Get github status
8168	Get details about a pull request
8169	Get list of pull requests
8170	Write your forwards methods here .
8171	Returns a list of slider items
8172	Render a list of slider items .
8173	Acquire a read lock .
8174	Release a reader .
8175	Acquire lock locks .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task by ID .
8179	Return a list of tasks sorted by id .
8180	Returns a dictionary representation of the object .
8181	Create a task from a dictionary .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the backend .
8186	Create an index
8187	Create a mapping
8188	JSON encoder .
8189	Write items to a writer .
8190	Add a task to the scheduler .
8191	Removes a task from the scheduler .
8192	Iterate over all items
8193	Validate the arguments .
8194	Parse archive arguments .
8195	Perform a job on the queue
8196	Schedules a job task .
8197	Cancel a job task .
8198	Run the job listener
8199	Listen for incoming messages .
8200	Schedule the event loop .
8201	Schedules a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the arguments for the job .
8206	Get a secret
8207	Register a view .
8208	Decorator to register a view .
8209	Wrapper for reverse_action
8210	Returns the name of the view
8211	Convert a version to a string .
8212	Resolve a key to an alias .
8213	Determine the url engine for a url
8214	Parse a database path .
8215	Return database configuration from database URL .
8216	Parse a database URL .
8217	Create a new user
8218	List all users
8219	Create a new password
8220	Add view_name to detail view
8221	Parses a boolean value .
8222	Parse an integer .
8223	Get the parser for the given typ .
8224	Get settings from environment variables .
8225	Create a ModelDict from a model .
8226	Encode a base64 - encoded string .
8227	Create field from dict
8228	Create a validator from a dictionary .
8229	Computes the cartesian product of a parameter dictionary .
8230	Find unique points
8231	Change logging levels .
8232	Decorator for logging .
8233	Create dirs for a log config file .
8234	Returns a list of strings
8235	Rename a log file .
8236	Initialize the logger .
8237	Extract replacements from a trajectory .
8238	Show progress bar .
8239	Check and replace the arguments of the parser .
8240	Convert a parser to a string .
8241	Find all options in the given parser .
8242	Find a dictionary of multiprocessing keys .
8243	Check the log config .
8244	Handle parsing of log file .
8245	Recursively handle log files
8246	Create logging handlers and tools .
8247	Cleans up the container .
8248	Start the stdout .
8249	Write buffer to stream
8250	Determine if two results are equal .
8251	Check if two Parameters are equal
8252	Decorator for manual run .
8253	Mark a function as deprecated .
8254	Decorator for mutually exclusive arguments .
8255	Decorator for deprecated functions .
8256	Retry a function .
8257	Decorator to add prefix naming conventions .
8258	Add parameters to the trajectory .
8259	Run the network
8260	Euler euler scheme
8261	Add the parameters to the trajectory .
8262	Compute the difference between two values .
8263	Create a storage service .
8264	Create a storage service .
8265	Add the parameters to the trajectory .
8266	Calculates the difference between two values .
8267	Compact an HDF5 file
8268	Return True if all parameters in the group are in the group .
8269	Build the model eqs
8270	Run pre build
8271	Build the model
8272	Build the model
8273	Run the pre build
8274	Build the graph .
8275	Add parameters to the simulation .
8276	Compute theano factor for a spike
8277	Compute mean fano factor
8278	Analyse the mean Fano factor
8279	Add monitors to the network
8280	Add monitors to the network
8281	Create the path to the output folder
8282	Plot a result
8283	Print the graphs of the spike monitor
8284	Analyse the spikes
8285	Get batch number
8286	Explores a batch of trajectories .
8287	get node vars
8288	Return the node s function .
8289	Rename the object .
8290	Set the depth and run branch .
8291	Convert a node to a message type
8292	Remove a sub - tree from the tree .
8293	Delete a node
8294	Removes a node from the root node
8295	Recursively remove nodes from a branch .
8296	Translate a shortcut .
8297	Prepend a prefix to the root node .
8298	Determine the type of the tree .
8299	Add a generic node .
8300	Add a node to the tree .
8301	Create a link for an act_node .
8302	Check that the names of the names are valid .
8303	Create an instance of this node .
8304	Create a parameter or result from a parent node .
8305	Set the details for a tree node
8306	Iterate over all nodes of a given node .
8307	Create an iterator for the children of a node .
8308	Perform a recursive traversal of a node .
8309	Slow search
8310	Search for a node by key .
8311	Searches for backwards compatibility .
8312	Return the children of this node
8313	Add a group from the storage .
8314	Add a leaf node from the storage .
8315	Returns a list of directory names
8316	Returns a debug representation of the tree .
8317	Returns the parent object
8318	Add a group .
8319	Add a link
8320	Remove a link .
8321	Add a group .
8322	Removes the node
8323	Remove a child from the group .
8324	Returns True if the item contains the given item .
8325	Return the default value for the given file name .
8326	get children
8327	Get groups
8328	Returns the list of leaves
8329	Get the links .
8330	Stores a child by name .
8331	Store this trajectory in the storage .
8332	Load a child by name .
8333	Load this trajectory
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a config group .
8342	Evaluates the maximum fitness .
8343	Add configuration variables for a commit .
8344	Make a git commit
8345	Flatten a nested dictionary .
8346	Convert a flattened dictionary into a nested dictionary .
8347	Print a progress bar .
8348	Get argspec for a function .
8349	Get kwargs from kwargs .
8350	Formats a timestamp .
8351	Connect to a TCP port
8352	Recursively create directories
8353	Reset the progress bar .
8354	Get the remaining time for the given index .
8355	Convert to dict .
8356	Remove a key from the annotations .
8357	Convert f - annotation to string .
8358	Make an ordinary result from a result .
8359	Convert a result to a shared object .
8360	Create shared data .
8361	Store request data .
8362	Retrieves the data node
8363	Return whether the item supports the given item .
8364	Create shared data .
8365	Set the last_process_name to the current process .
8366	Lock a lock
8367	Send a shutdown signal .
8368	Terminate the socket .
8369	Start the client .
8370	Send a REQP request and return the response .
8371	Acquire lock
8372	Listen for incoming requests .
8373	Put data into the queue .
8374	Check if the current process is running .
8375	Process incoming data .
8376	Main thread .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Stores the given arguments .
8380	Store a message to the store .
8381	Stores references in the database .
8382	Decorator to parse config variables
8383	Collect options from a section
8384	Collect configuration variables from config file
8385	Interpret config file
8386	Add parameters to traj .
8387	Convert a rule number to a numpy array .
8388	Create initial state .
8389	Plot a pattern
8390	Generate a cellular automaton pattern .
8391	Takes a list of rules and generates a pickle file .
8392	Called when the node changes .
8393	The view group for the view .
8394	Load data from the specified type .
8395	Store the given message with the given message .
8396	helper function to load severity items
8397	Checks the hdf5 file to see if it exists .
8398	Stores messages from an iterable
8399	This is called when the handle is closed .
8400	Extracts information from the given arguments .
8401	Backup a trajectory
8402	Read an output row from a table .
8403	Prepare a traj to be merged .
8404	Load metadata for a traj
8405	Load a sub - branch .
8406	Check that the current trajectory version is correct .
8407	Fill the run table for the given traj .
8408	Load all of the experiments from the overview .
8409	Stores all experiments in traj .
8410	Make the overview of the tables_to_make
8411	Stores a Trajectory .
8412	Stores a sub - branch .
8413	Create a leaf node
8414	Recursively load all nodes of a tree .
8415	Recursively store all nodes in the tree .
8416	Store the result table entry .
8417	Get or create a table
8418	Get a node by name .
8419	Sets the values to recall_natives to recall_natives .
8420	Recall native type to native type
8421	Add or modify a row .
8422	Tries to insert into a row
8423	Extract the contents of an item into a dictionary .
8424	Truncate string to max_length
8425	Creates a new group if it doesn t exist .
8426	Create a new hdf5 group
8427	Store the annotations of an item in the node
8428	Loads annotations into annotations
8429	Stores a group .
8430	Load a group
8431	Load all non - empty data from hdf5 file
8432	Add missing values to flags_dict
8433	Add a summary entry to the table .
8434	Add meta information to the group .
8435	Create a PRM store from a dictionary .
8436	Stores a parameter or result in the database .
8437	Write data into shared array .
8438	Write shared table to hdf5 file
8439	Write a dictionary to a group
8440	Write to pandas data .
8441	Write data into other array
8442	Write data into HDF5 array .
8443	Delete a link
8444	Recursively delete parameter from the hdf5 file
8445	Write data into a pytable
8446	Create a description dict from the data .
8447	Get a table column from the database .
8448	Find the longest string of a list of strings
8449	Recursively load data into a dict
8450	Read a dictionary from a PRM file
8451	Read shared data from a shared node .
8452	Read a table or group
8453	Read an array .
8454	Load a trajectory .
8455	Make a set name from an integer index .
8456	Set property values .
8457	Add dynamic imports .
8458	Set the name of the run .
8459	Iterate over runs of trajectory .
8460	Shrink the entire trajectory .
8461	Add a parameter to the model .
8462	Define a preset parameter .
8463	Lock the experiment .
8464	Fetches a value from the run hierarchy .
8465	Check if a run is completed .
8466	Removes the expanded parameter from disk
8467	Recursively copies variables from a node
8468	Explore the build iterable of build iterables .
8469	Updates the run information .
8470	Add information about a run .
8471	Lock all parameters
8472	Lock all derived parameters
8473	Finalize the run
8474	Loads a skeleton
8475	Load a module into a file .
8476	Save trajectory to storage .
8477	Makes a list of wildcards .
8478	Merge multiple trajectories into the current one .
8479	Merge multiple runs into a single run .
8480	Rename a full name .
8481	Merge derived parameters from another trajectory .
8482	Merge potential links into this trajectory .
8483	Merge config files into this object .
8484	Merge another Trajectory .
8485	Merge results from another Trajectory .
8486	Migrate this trajectory
8487	Store the trajectory to the storage .
8488	Restore default values
8489	Sets the index to the given index
8490	Make a single run
8491	Returns a list of run names
8492	Returns the run information .
8493	Find the indices of each parameter in the signle .
8494	Starts a single run .
8495	Finalize the run .
8496	Set the start time of the run .
8497	Set the end of the run .
8498	Construct an instance .
8499	Convert param_dict to dictionary
8500	Finalize the run .
8501	Returns the configuration dictionary .
8502	Returns the results as a dictionary .
8503	Store items in a trajectory .
8504	Fetch items from disk
8505	Fetch items from the node .
8506	This function deletes all the links from the tree .
8507	Remove all children
8508	Fetch items from the network
8509	Wrapper for _pool_single_run
8510	Wrapper for _frozen_pool_single_run .
8511	Configure the pool .
8512	Configure the frozen pool .
8513	Process a single run .
8514	Configure frozen scoop .
8515	Runs a single run .
8516	Configure the logging system .
8517	Configures the niceness .
8518	Handles SIGINT .
8519	Run a single run
8520	Wrap sigint handling .
8521	Load a class by fully qualified name .
8522	Create a class by name .
8523	Returns the length of the array
8524	Returns a string representation of the function .
8525	Compare two values
8526	Get the range of the parameter .
8527	Explores the parameter .
8528	Expand the parameter into the list .
8529	Check that the values are of the same type .
8530	Store self . _data
8531	Load the parameter from disk
8532	Load an array parameter
8533	Check if two values are equal
8534	Check if the data is a supported matrix .
8535	Serialize a sparse matrix .
8536	Build the names for the xspm
8537	Construct a sparse matrix from a list of data points .
8538	Load the data from a dictionary
8539	Store the parameter .
8540	Load data from pickle
8541	Translate key to v_name
8542	Convert the F value to a string .
8543	Convert to dict .
8544	set positional values
8545	Get a value from the result .
8546	Set a single value .
8547	Return whether the item supports the given item .
8548	Store the values in the SparseResult .
8549	Load data from a dictionary
8550	Set a single value .
8551	Save the result to a dict .
8552	Load data from pickle .
8553	Merge all files
8554	Upload a file
8555	Download a file
8556	Create a session
8557	Merge trajectories
8558	Start all jobs
8559	The multiplication of two reals .
8560	Run the Euler integration
8561	Postprocessing for firing rates .
8562	Add the parameters to the cortex
8563	Add exploration of neuron i and tau_ref
8564	Execute the pre - run pre - run
8565	Execute a single network run
8566	Extract all the sub - runs from the given trajectory .
8567	Execute a network run
8568	Add the parameters of each component to the run .
8569	Execute the pre - run
8570	Run the network
8571	Run the network
8572	Create a filename for the given traj .
8573	Returns the next item .
8574	Merge all files in a folder
8575	Handle SIGINT .
8576	Load config from file
8577	Request a PIN code .
8578	Request access token .
8579	Refresh access token
8580	Get all thermostats .
8581	Write tokens to config file .
8582	Set HVAC mode
8583	Set the fan minimum on the thermostat
8584	Set the hold temperature
8585	Set the climate hold
8586	Delete a vacation
8587	Resume a program
8588	Send a message to the thermostat
8589	Set the humidity of a thermostat
8590	Generate a random delay .
8591	generate a timeout
8592	Generate a timeout for a lease
8593	Generate a new renewal time .
8594	Return a copy of self as a dict
8595	Reset client attributes .
8596	Get the timeout for a given state
8597	Set a new timeout
8598	Send a discover packet .
8599	Select an offer .
8600	Send a DHCP request .
8601	Set the timeouts
8602	Process received packet .
8603	Process a DHCPNAK packet
8604	Set the state of the selector
8605	Start the lease
8606	Initiate a new lease
8607	Reset the lease
8608	End the lease
8609	Initiate an error
8610	Called when a response is received .
8611	Called when a request has been received .
8612	Called when the request has expired .
8613	Called when the request has expired .
8614	Receive an offer packet .
8615	Receive ACK .
8616	Process a NAK request .
8617	Receive ACK .
8618	Receive a NAK packet .
8619	Receive ACK .
8620	Receive a NAK packet .
8621	Called when a new lease is received .
8622	Set the value of the query .
8623	Return a copy of this query .
8624	Returns a copy of this query .
8625	Get status of status
8626	Create output .
8627	Main entry point .
8628	Validate a message
8629	Read a tdms file
8630	Add the deformation to the data .
8631	Convert tdms file to FCS file
8632	Check if two files are equal
8633	Create a new patch
8634	Delete the next patch
8635	Delete a patch .
8636	Check if a file is in the given patch
8637	Backup a file
8638	Add a file
8639	Run the Quilt command .
8640	Create the directory
8641	Copies this directory to a directory .
8642	Link a file
8643	Copies this file to another location .
8644	Returns a Directory object
8645	Backup a file
8646	Refresh the database .
8647	Unapply a patch .
8648	Unapply the top patch
8649	Unapply all applied patches
8650	Applies a patch to the series .
8651	Applies the next patch to the series
8652	Applies all patches .
8653	Read a series file
8654	Save the series to a file .
8655	Add a patch
8656	Insert patches into the document .
8657	Add patches .
8658	Remove a patch
8659	Return list of patches after a given patch .
8660	Returns a list of patches before the given patch .
8661	Returns a list of patches until the given point is reached .
8662	Replace a patch
8663	Create the directory
8664	Check the version of the version .
8665	Add this argument to the given parser .
8666	Add the argument to the given parser .
8667	Adds arguments to subparsers .
8668	Set the arguments for the subparsers .
8669	Add the subparsers to the given parser .
8670	Check if a file is in the patch
8671	Check if a file exists in the next patches .
8672	Revert a file
8673	Import a patch into the database .
8674	Import patches .
8675	Add a way .
8676	Return a list of node ids that are missing from the node .
8677	Add a node to the graph
8678	Build a route from a relation relation .
8679	Create a long name for a route .
8680	Returns the agency id for the relation .
8681	Extract public transport relations .
8682	Add a relationship
8683	Create dummy data .
8684	Yield Agency objects .
8685	Generate dummy trips
8686	Write data to a zip file .
8687	Write all buffered files to destination .
8688	Build agency .
8689	Extract stops from a relation .
8690	Build shapes from a relation .
8691	Returns a list of supported versions
8692	Send an APDU to the device .
8693	Authenticate multiple devices .
8694	Register a new user .
8695	Authenticate against a device .
8696	Register a U2F device .
8697	Convert a dictionary to a string .
8698	Wrap a function as a decorator .
8699	Wrap a class with methods .
8700	Return True if filepath matches only_blame_patterns
8701	Convert an email address into an email address .
8702	Return the entry corresponding to the given entry .
8703	Convert markdown to reST .
8704	Run Flawless web server .
8705	Records an error .
8706	Convert url to image
8707	Convert image string to Image object
8708	Decorator to validate a function
8709	Check that the size of the image is big enough .
8710	Check that the width of the given width is big enough .
8711	Check that the height of the image is big enough .
8712	Parse a category .
8713	Parses the value of a field and returns its value .
8714	Get all items from the document
8715	Save an error .
8716	Parses the file and saves it to the database
8717	Parses an item into a dictionary .
8718	Returns an instance of the model with the given data .
8719	Save an item
8720	Download a file from url to dest
8721	Load the data from a file
8722	Yield items from CSV .
8723	Set the allowed network access settings .
8724	Runs a command .
8725	Add files to the container .
8726	Add a file to the sandbox .
8727	Get all enrollments for a given course
8728	Gets a list of enrollments for a given sis_course_id
8729	Get all enrollments for a section
8730	Gets a list of enrollments for a given section .
8731	Returns a list of enrollments for the given regid
8732	Enroll a user .
8733	Get all the roles in an account .
8734	Gets a list of roles for the account ssis id
8735	Returns the effective course roles in an account
8736	Get a single role .
8737	Retrieves a role by its SIS identifier
8738	Retrieve a course by its id .
8739	Retrieve a course by sis_id
8740	Get all courses in an account
8741	Gets all courses in an account by sis_id
8742	Retrieve all courses in an account .
8743	Retrieves all courses in an account by sis_id
8744	Gets a list of courses for the given regid
8745	Create a course
8746	Updates the sis course id
8747	Get activity for an account .
8748	Get grades for an account .
8749	Returns statistics for the given account and term .
8750	Get activity by sis_course_id
8751	Returns a list of Assignments by sis_course_id
8752	Returns a list of student summaries for the given sis_course_id
8753	Returns the student activity for the given sis user and sis_course_id
8754	Returns a list of student messages for the given sis user and sis user .
8755	Get all external tools in an account
8756	Get all external tools in a course
8757	Create an external tool
8758	Updates an external tool
8759	Delete an external tool
8760	Check that all required parameters are set .
8761	Get a user profile
8762	Returns a list of users for the given course
8763	Gets a list of users for the given sis_course_id
8764	Create a new user .
8765	Get all logins for a user .
8766	Updates a user login
8767	Return the next page
8768	Retrieves a resource from the API
8769	Wrapper for _get_resource_url
8770	Get a resource
8771	PUT a resource
8772	POST a resource
8773	Delete a resource
8774	Gets the admins for the specified account .
8775	Create an admin .
8776	Create an admin by a sis account .
8777	Delete an admin .
8778	Delete an admin by the SIS account .
8779	Create a grading standard for a course .
8780	Get a section by its id .
8781	Retrieve a section by its sis_section_id
8782	Get all sections in a course .
8783	Gets a list of sections in a course by sis_course_id
8784	Retrieve a list of sections with students in the course .
8785	Gets a list of sections with the given sis_id
8786	Create a new section .
8787	Update a section .
8788	Returns a list of Quiz objects for the course
8789	Retrieve a single account by its ID .
8790	Gets the sub - accounts of a given account .
8791	Updates an account
8792	Updates the SIS ID of an account .
8793	Get access settings for an account .
8794	Updates the authorization settings for an account .
8795	Gets a term by sis_term_id
8796	Imports a CSV file
8797	Import a directory
8798	Returns the status of a SIS import
8799	Build the zip archive
8800	Returns a list of assignments for the given course
8801	Updates an assignment
8802	Returns a list of report types for an account
8803	Returns a list of reports for the given type
8804	Create a report
8805	Create a course provisioning report
8806	Create a course SIS export report
8807	Creates an unused courses report .
8808	Get the data of a report .
8809	Get report status .
8810	Delete a report
8811	Move all detected images in a label
8812	Flip detections in a label by w
8813	Convert an object to a dict
8814	Get config from settings .
8815	Return empty value .
8816	Parse args and kwargs .
8817	Create metrics from a list of metrics .
8818	Set up logging .
8819	Configure the registry .
8820	Create metrics for given metrics .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle metrics request .
8824	Goes through Wolfram .
8825	Monkey patch http_client
8826	Query the WolframAlpha API .
8827	Return the list of pods and warnings .
8828	Iterate through all results
8829	Encode a request with the given data .
8830	Make an API call .
8831	Send a GET request
8832	Send a DELETE request .
8833	Executes a PUT request
8834	Makes a POST request
8835	Process a query .
8836	Group sentences into sentences .
8837	Disambiguate a PDF file
8838	Disambiguate a query .
8839	Segment text .
8840	Get the language of a text .
8841	Returns a concept by conceptId
8842	Fit the model
8843	Returns a score for each feature in the ensemble .
8844	Compute the MDR from a set of features .
8845	Fit the model and predict the results .
8846	Compute the accuracy score of the model .
8847	Fit the model to the grid
8848	Transform a list of features into a new one .
8849	Returns the score of the multivariate MDR model .
8850	Wrapper for _predict_predict .
8851	Generate n - way models .
8852	Plot a grid of model instances .
8853	Return a dictionary of configuration values for the given app .
8854	Get a value from the config
8855	Convert a list of members to a vector .
8856	Create a vector of members .
8857	Evaluate the given file .
8858	Evaluate the given stream .
8859	Evaluate a string .
8860	Bootstrap repl module .
8861	Run the compiler .
8862	Wrap a dispatch function .
8863	Add a new method to a map .
8864	Add a new method .
8865	Get a method by key .
8866	Remove method from mmap .
8867	Remove a method by key .
8868	Check if v is a macro
8869	Return the line and column of the given form .
8870	Decorator for parsing form .
8871	Check that the given node is not present .
8872	Checks if the given node is a tail .
8873	Resolve a bare symbol .
8874	Resolve a form .
8875	Parse an AST .
8876	Whether or not a shadowed variable should be used .
8877	Put a new symbol
8878	Return a string representation of a function .
8879	Represent an iterable .
8880	Return a string representation of an object .
8881	Fallback implementation for lrepr .
8882	Replace locations with location information .
8883	Compile a form into a module .
8884	Incremental compilation of a module .
8885	Compile a Python module .
8886	Compile the given Python code into a Python module .
8887	Convert an iterable into a sequence .
8888	Replace characters in a string .
8889	Remove underscores from a string .
8890	Returns a Fraction object .
8891	Get a logging handler .
8892	Create a map from kvs .
8893	Partition a collection .
8894	Wrap a function with a line number and column number .
8895	Read a namespace .
8896	Read a collection from the reader .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a dictionary of keys and values .
8901	Read a string .
8902	Read a symbol .
8903	Read a keyword .
8904	Read meta data from the reader .
8905	Read a function .
8906	Read a list of comments .
8907	Expand syntax quotes .
8908	Expand a syntax - quoted form .
8909	Read a syntax quote .
8910	Read an unquoted comment .
8911	Read a Deref .
8912	Read a character from the reader .
8913	Read a regex pattern .
8914	Read a reader .
8915	Read the next comment .
8916	Read the next token .
8917	Yield expressions from a stream .
8918	Read a string from a string .
8919	Read a file .
8920	Updates the current location .
8921	Push back to the stack .
8922	Returns the next token .
8923	Create a bytecode .
8924	Extract bytecode from a bytecode .
8925	Return the path to the cache file .
8926	Checks if there are imports in the meta_path
8927	Find a module in the given path .
8928	Execute a cached module .
8929	Execute the given module .
8930	Execute a module .
8931	Create a symbol
8932	Complete a keyword .
8933	Get or create a keyword from kw_cache .
8934	Look up a keyword .
8935	Chain a generator into a chain of dependencies .
8936	Load an attribute .
8937	Simple AST generator .
8938	Generate an AST from a collection form .
8939	Add a new location offset to the given node .
8940	Decorate a function with the given location .
8941	Decorator to add dependencies to a function .
8942	Checks if a variable is dynamic
8943	Checks if a variable is defined in its meta .
8944	Convert an expression to a statement .
8945	Convert an expression into an AST .
8946	Determines if a def should be used by a def .
8947	Convert a DO node to a Python AST .
8948	Return the name of a function .
8949	Convert fn arguments to python ast
8950	Convert a single -arity function to a Python AST .
8951	Convert a function to a Python function .
8952	Convert a Function node to a Python AST .
8953	Convert an if body to python ast .
8954	Convert an if node to Python AST .
8955	Convert an Invoke node to Python AST .
8956	Convert a quote node to a Python AST .
8957	Convert recur node to python AST .
8958	Convert a recur point into a Python AST .
8959	Generate a setbang from a setbang node .
8960	Convert a throw node to a Python AST .
8961	Convert a Try to a PyPy AST .
8962	Convert local node to Python AST
8963	Convert a variable to a python AST .
8964	Convert a variable to a Python AST .
8965	Convert an InteropProp to a Python AST .
8966	Convert a maybeClass node to a Python AST .
8967	Convert a maybeHostForm node to a Python AST .
8968	Convert a constant value to a Python AST .
8969	Convert list literals to Python AST .
8970	Generate a Python AST from a Lisp AST .
8971	Yield all imported imports .
8972	Default ImportFrom .
8973	Create an ast . Assign statement .
8974	Convert a set of members into a set .
8975	Create a set of members .
8976	visit an ExceptHandler node
8977	Visitor for expression .
8978	Visitor for FunctionDef node .
8979	visit a While node
8980	Return an astroid . Try node .
8981	Create a new module .
8982	Return the first element of an object .
8983	Return the rest of an object .
8984	Return the rest of a collection
8985	Find the next item in the collection .
8986	Concatenate o into sequence .
8987	Convert an object to a sequence .
8988	Concatenate multiple sequences .
8989	Associate an object with the given kvs .
8990	Return the conjugate of a collection .
8991	Decorator for partial functions .
8992	Dereferenced object .
8993	Checks whether two objects are equal .
8994	Divide x and y .
8995	Sort a collection .
8996	Returns True if the given key is in the given collection .
8997	Return the value of a given key .
8998	Convert an object to a LIF format .
8999	Convert an object to a Python dictionary .
9000	Return a string representation of an object .
9001	Collect arguments .
9002	Decorator for _Trampoline
9003	Decorator to set attribute values .
9004	Decorator for _fn_with_meta .
9005	Decorator for plotting functions .
9006	Resolve an alias .
9007	Resolve a variable
9008	Add a generated python variable .
9009	Initialize a dynamic variable .
9010	Return a new variable with the given name .
9011	Intern an unbound variable .
9012	Find a variable in the namespace
9013	Finds the variable in the given namespace .
9014	Find a variable by its qualified name .
9015	Add a default import statement .
9016	Add an alias .
9017	Convert a symbol to a var .
9018	Convert a symbol to a new one .
9019	Search for a symbol .
9020	Add an import statement .
9021	Return the imported module .
9022	Add a reference to a variable
9023	Return the referenced symbol
9024	Refer all symbols that are not private
9025	Refer to other namespace .
9026	Get or create a namespace from the cache .
9027	Get a namespace by name .
9028	Get namespace by name .
9029	Remove a namespace
9030	Create a completion matcher for completion .
9031	Return an iterable of aliases for the given prefix .
9032	Returns an iterable of all imported imports .
9033	Returns an iterable of interns for the given value .
9034	Complete a list of references .
9035	Completes the given text .
9036	A tuple of arguments .
9037	Convert a list of members into a list .
9038	Convert a list of members into a list .
9039	Decorator to change the style of a scalar .
9040	Decrypt a JWE token
9041	Encrypt a JSON object .
9042	Delete an item from the cache
9043	Return the selector as a tuple .
9044	Close the stream .
9045	Parses a fiql string into an expression .
9046	Dump a NDB model to a file .
9047	Convert an object into a dictionary .
9048	Decode a date string into a datetime object .
9049	JSON decoder .
9050	Default encoder .
9051	Validate the release version
9052	Generate a changelog
9053	Find strongly connected components .
9054	Robust topological sort of graph .
9055	Set parent expression
9056	Returns the parent expression
9057	Add an operator .
9058	Add an element to the working fragment .
9059	Create a new expression .
9060	Create a new expression .
9061	Decorator for logging functions .
9062	Parse incoming message .
9063	Convert a list of tuples into an OrderedDict .
9064	Given a list of messages return the corresponding message .
9065	Prepare the message for sending .
9066	Flush incoming socket messages
9067	Enable a display
9068	Save a file to a file
9069	Load a file
9070	Get information about the device .
9071	rinc a python file
9072	Locate the package . json file .
9073	Parse package json file
9074	Handle an API error .
9075	Validate the response .
9076	Calculate homogenize two samples .
9077	Interpolate the dep_vector
9078	Get the indices of the indep variable between two samples .
9079	Verify that two waveforms are compatible .
9080	Load the systemjs manifest
9081	Return a dict of parameters for the given mname .
9082	Run a test suite .
9083	Shorten a URL .
9084	expand a short URL
9085	Retrieve statistics about a URL .
9086	Get statistics for the current user .
9087	Get DB statistics
9088	r Print a command to pypkg .
9089	Wrapper for shell echo
9090	Log msg to stdout .
9091	Decorator for caching methods .
9092	Yield successive chunks from an iterable .
9093	Decorator for chunking an iterable .
9094	Flatten an iterable .
9095	Print a message to stderr .
9096	Print a table as CSV .
9097	Create a dummy class .
9098	Create a new instance from a human readable string .
9099	CLI client
9100	Trace the waveform module .
9101	Generate a list of links for a requirements . json file
9102	Add common prefix to a list .
9103	Make a list of Python entries .
9104	Convert an operator string to a string .
9105	Yield chunk data .
9106	Parse a chunk of data .
9107	r Write touchstone data to a touchstone file .
9108	Return the bounding waveform of a waveform .
9109	Build a unit string .
9110	Create a copy of the wave operation .
9111	Calculate the running surface area of a pipeline .
9112	Validate the minimum and indep_max arguments .
9113	r Compute the cosine of a wave .
9114	r Calculate the cosine of a wave .
9115	r Compute the arcsine of a wave .
9116	r Compute the tangent of a wave .
9117	r Return a copy of the waveform
9118	r Convert the wave to dB .
9119	r Derivative of a waveform
9120	r Fast Fourier Transform
9121	r Fourier Transform
9122	r Fourier transform
9123	r Fast Fourier Transform
9124	r Compute the db of a wave .
9125	r Compute the inverse Fourier transform
9126	r Compute the inverse Fourier transform
9127	r Compute the Fourier transform
9128	r Compute the inverse Fourier transform .
9129	r Return a copy of the waveform
9130	r Compute the delay of the wave
9131	r Compute the log of a wave .
9132	r Calculate the naverage of a waveform
9133	r Compute the integral of a waveform .
9134	r Return the maximum value of a waveform .
9135	r Return the minimum value of a waveform .
9136	r Calculate the phase of the wave .
9137	r Round a wave to decimal degrees .
9138	r Square root of a wavelet
9139	r Return a copy of the waveform .
9140	r Convert a wave to a complex signal
9141	r Convert wave to float .
9142	r Convert a wave to integer .
9143	r Calculate the w value of a wave .
9144	Return a list of JSPM packages .
9145	Get short description from a long description .
9146	Build an expression from a list of tokens .
9147	Return the next rdelim from the given items .
9148	Split an expression into a list of tuples .
9149	Return a list of delimiter pairs for the given expression .
9150	Parse an expression .
9151	Remove consecutive delimiter from expr .
9152	Split a string into a sequence of items .
9153	Convert a number toeng
9154	r Convert a number to a string .
9155	r Converts a number to a string .
9156	r Convert a number to a float .
9157	r Calculate Peng number .
9158	r Convert a number to a float .
9159	r Calculate power number .
9160	r Compute the math suffix for a given suffix .
9161	r Removes extra delimiter from an expression .
9162	Convert a number to a scientific string .
9163	Convert a number to a number .
9164	Find a sourcemap comment in a file
9165	Check if the app needs to be loaded .
9166	Bundle the app
9167	Trace - dependencies .
9168	Determine if all of the hashes in the dependency tree have changed .
9169	Format a hex dump .
9170	Parse a docstring .
9171	Return a list of valid function names .
9172	Dynamically import a add action .
9173	Split a line .
9174	Check if there are any init commands .
9175	Return help text for builtin functions .
9176	Find a function in the context
9177	Return a listing of the functions in a directory .
9178	Check if the argument is a flag .
9179	Process arguments .
9180	Extract the value of a keyword argument .
9181	Invoke one function
9182	Invoke the given line
9183	Invoke a string .
9184	Parse a parameter declaration .
9185	Parse return line .
9186	Classify a section .
9187	Classify a line .
9188	Convert a list of strings into a list of lists .
9189	Wrap the documentation to a string .
9190	Convert value to type
9191	Convert bytes from binary to binary
9192	Get the size of a type
9193	Format value according to type .
9194	Validate the given type
9195	Checks if the given type name is a known type .
9196	Split a complex type into a list of subtypes .
9197	Instantiate a subtype from a list of subtypes .
9198	Gets a type by name .
9199	Check if the given format is a known format .
9200	Inject a type .
9201	Load types from a module .
9202	Checks if the spec is filled with the given arguments
9203	Add a parameter to this method .
9204	Declare a typed return value .
9205	Add a custom return value
9206	Convert a short - name to a short name .
9207	Return the type of a parameter .
9208	Return the signature of the function .
9209	Format the return value .
9210	Convert positional argument to value .
9211	Check that the function is valid .
9212	Convert an argument to a validator .
9213	Format the exception message .
9214	Return a dict representation of this exception .
9215	Check that the given arguments are valid .
9216	Parse validators
9217	Find all objects in a given container .
9218	Return a Context object from a module .
9219	Get the help text for a function .
9220	Decorator to register a parameter .
9221	Decorator to annotate a function .
9222	Decorator to annotate a return value .
9223	Mark a class as context .
9224	Decorator to annotate a function .
9225	Mark a function as annotated .
9226	Return a short description of a function .
9227	Load crontab
9228	Install crontab
9229	Print all scheduled tasks
9230	Uninstall crontab
9231	Create a new file from a URI .
9232	Load project config files
9233	Save projects config to disk
9234	Define a singleton .
9235	Returns all dependent projects
9236	Decorator to run the command
9237	Initialize project
9238	set a key to a value
9239	setattr
9240	Create a sequence from an iterable .
9241	Creates a setter that sets the value of the state .
9242	Creates a setter that sets the values of the given values .
9243	Create a function that modify the state .
9244	Return a function to collect n arguments .
9245	Decorator .
9246	Apply a function to the current state .
9247	Return a new fold
9248	Convert Fold to list .
9249	Apply a function over a state .
9250	Set the value of the state .
9251	Iterate over an iterable .
9252	Get the kind of the object
9253	Main loop .
9254	Returns a new copy of this vector with the given other .
9255	handles input
9256	Advance robots .
9257	End the game .
9258	Ask user to move a board .
9259	Play a game of naughts and crosses against the computer .
9260	Make a move
9261	The winner of this board if one exists .
9262	Yield possible PINins .
9263	Process an item .
9264	Open a new spider
9265	Uploads a single chunk to S3
9266	Create a BytesIO object .
9267	Get account state .
9268	Gets the asset state
9269	Get information about a block .
9270	Get the block hash
9271	Use this method to get the system fees for a block
9272	Get the state of a contract .
9273	Fetches information about a transaction .
9274	This interface is used to get the value of a key .
9275	This interface is used to get the out of a transaction .
9276	Invoke a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Returns True if address is valid .
9281	Make a jsonrpc call to the server
9282	Return True if s is a hash256 hash .
9283	Return True if s is a hash160 .
9284	Encodes a list of Invocation params into a dict .
9285	Decodes an InvocationResult .
9286	Decorator to specify the first kwonly argument .
9287	Snap a datetime to a specific timezone .
9288	Applies the apply_to to the given datetime .
9289	Render the document to a file .
9290	Build the barcode .
9291	Calculate the checksum .
9292	Render the QR Code .
9293	Connect to KVS .
9294	Main entrypoint .
9295	Download a file from S3 to local_path .
9296	Upload a file to S3
9297	Downsynchronize a section
9298	Show the contents of a file in S3 .
9299	Parse an environment variable .
9300	Set basic authentication credentials .
9301	Set the API key for the API key .
9302	Yield json content from folder
9303	Return a dictionary of schemas
9304	Returns the schema for this bucket
9305	Returns a RefResolver object for this schema .
9306	Validate an object against the schema .
9307	Returns a list of valid examples .
9308	Returns a list of invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of a OneDrive user .
9313	Get OneDrive object representing list of objects in a folder .
9314	Create a folder
9315	Add comment message to a specified object .
9316	Convert or dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag and drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and then displays it
9324	Get a parameter from a tag .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components one pixel at a time
9331	delete all of the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update
9334	When dealing with a Top - level window position it absolute
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated with wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the item from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	called when adding a control to the window
9349	Re - parent a child control with the new wx_obj parent
9350	make multiple copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all modules in rootpath
9354	Return a list of children sub - components that are column headings
9355	Update the grid if rows and columns have been added or deleted
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	colod the data based on the column indexed by col
9359	Remove all rows and reset internal structures
9360	Called to create the control which must derive from wxControl .
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell . Returns True if changed
9363	Return True to allow the given key to start editing
9364	This will be called to let the editor do something with the first key
9365	Register a type handler for a form tag .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable all top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Set the tag of an object
9373	Autocomplete table .
9374	Return the appropriate documentation for the given object .
9375	Mangle a signature
9376	Import a module by name .
9377	Generate an autolink role .
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string or None if cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	set icon
9386	Display or hide the window optionally disabling all other windows
9387	Open read and eval the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	translate gui2py attribute name from pythoncard legacy code
9393	Write content to the clipboard data can be either a string or a string or a bitmap
9394	Find the autosummary for a module .
9395	Add the object and all its childrens
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Return the URL for the image .
9401	Decorator to add an expression filter .
9402	Decorator to add a node filter .
9403	Assert that the current path matches the given path .
9404	Assert that the given path is not present .
9405	Assert that the current path has the given path .
9406	Assert that the given path is not present
9407	Select an option .
9408	Apply filter to expression .
9409	Return a webdriver instance for the given browser name .
9410	Return a string representing the query
9411	Returns True if the node matches the filters
9412	Switches to a specific frame .
9413	Open an alert
9414	Create a confirmation dialog .
9415	Disiss a confirmation
9416	Context manager for accepting a prompt .
9417	Temporarily dismiss a prompt .
9418	Save the page to a file .
9419	Save a screenshot to a PNG file .
9420	Raise the server error .
9421	Check if the node matches the filter .
9422	Tests if a field is checked .
9423	Wrapper for no checked field .
9424	Tests if a field has been checked .
9425	Called when a field is not checked .
9426	Assert that the document has text .
9427	Assert that the document has no text .
9428	Assert that the document has the given title .
9429	Assert that there is no title .
9430	Fail if the page has a title
9431	Fail if the page has no title
9432	Find all documents matching criteria .
9433	Find the first matching document
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for setter
9438	Decorator for synchronize methods .
9439	Determine if an error should be caught .
9440	Compare the query count .
9441	Cache the results at least size size
9442	Returns True if the given options are None or not .
9443	Generate a failure message .
9444	Checks if the given count matches the given criteria .
9445	Normalize a value .
9446	Normalize whitespace .
9447	Return a compiled regular expression .
9448	Determine whether the current request is resolved for this session .
9449	Resize the window to the specified width and height .
9450	Start the application .
9451	Add a cgetter function to the property .
9452	Add an instance method to this class .
9453	Add a class method to this class .
9454	Returns the current traceback .
9455	Returns a string representation of an object .
9456	Get the logger for the given instance .
9457	Set the logger .
9458	Send a request to the API
9459	List channels .
9460	List users .
9461	Create a message
9462	Translates user information to user name .
9463	Send a slack message
9464	Receive a channel from the server .
9465	Run the Slack client
9466	Run Slack client
9467	Returns the difference between two dictionaries
9468	Colorize a string .
9469	Invoked when a task starts
9470	Invoked when a runner finishes .
9471	Print statistics about all hosts
9472	Prints the skipped task .
9473	Convert a prefix to an address mask .
9474	Check if a function is empty .
9475	Add a model
9476	Returns a dictionary with the values of the current element .
9477	Load a dictionary from a dictionary
9478	Convert the object to a dictionary .
9479	Parse configuration values .
9480	Parse the state of the model .
9481	Translate the config to a string
9482	Load all filters
9483	Find a YANG file
9484	Convert a model to a dictionary .
9485	Returns the diff of the given fields
9486	Perform a HTTP POST request .
9487	Returns the authorization code URI .
9488	Obtain an access token .
9489	Return query params from url
9490	Convert url to url
9491	Build a URL from base .
9492	Handle an exception .
9493	Create a Response object .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Returns an authorization code .
9497	Refresh a refresh token
9498	Get an access token
9499	Gets an authorization code from the given URI .
9500	Gets an access token from POST data .
9501	Returns an authorization object
9502	Open a device
9503	Read a byte from the bus .
9504	Read a number of bytes from the bus .
9505	Read a byte from the bus .
9506	Write bytes to addr .
9507	Write a byte to a bus .
9508	Write data to i2c block .
9509	Returns the URL for the CDN file .
9510	Create a copy of this object
9511	Create a local copy of this file
9512	Create a remote copy
9513	Create a File from a file info dictionary .
9514	Create a new file .
9515	Upload a file from a URL .
9516	Upload a file from a URL to the store .
9517	Returns a list of file CDN URLs for each file .
9518	Construct a new Group from a dict .
9519	Create a new group
9520	Base operation .
9521	Iterate over all UUIDs in the sequence
9522	List items .
9523	Print a progress bar .
9524	Perform a multipart upload request .
9525	Returns the status of the room .
9526	List all cameras
9527	Get information about a specific camera
9528	Get a snapshot
9529	Disable a camera
9530	Create a motion setting for a camera event
9531	Save parameters to a MDP parameter
9532	Updates the motion events .
9533	Check if the last item is the last item
9534	Yield all nodes of a single list
9535	Get the value of the lvl attribute of a li .
9536	get vMerge
9537	Returns the value of the grid span of the cell
9538	Get the TD element at the given index
9539	Check if style is false
9540	Check if r is bold
9541	Check if r is italic
9542	Check if r is underline
9543	Check if p is a title
9544	Generator for text run content .
9545	Return a dictionary of relationship information .
9546	Extract document data from a document .
9547	Returns the ordered list type
9548	Build a list from a list of li_nodes .
9549	Builds a tr element .
9550	Build a table from a table .
9551	Return the content of a tag .
9552	Strip all elements from a tree .
9553	Find a dataset
9554	Load MNIST data .
9555	Load a CIFAR file
9556	Plot a list of images .
9557	Plot a list of layers
9558	Plot a grayscale image .
9559	Sample a batch of arrays .
9560	Convert a string to a list of bytes .
9561	Generate a batch of mini - batches .
9562	Predict a sequence of sequences .
9563	Add conv weights .
9564	Encodes the given input into the network .
9565	Decodes a z .
9566	Find output name .
9567	Compute the autoencoder score .
9568	Predict the output of the model .
9569	Predict the probability of x .
9570	Predict logit .
9571	Compute the mean value of the model .
9572	Create a batch of features and labels .
9573	Returns a sample of batches .
9574	Load the graph from disk
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Yield outputs matching patterns .
9578	Yield params matching patterns .
9579	Create a graph from kwargs .
9580	A list of variables .
9581	Calculate accuracy
9582	Run theano scan .
9583	Create an Activation layer .
9584	Generate a numpy array from xs
9585	Clear the losses .
9586	Iterates over the training data .
9587	Return a list of monitors .
9588	Return a hash of the layers .
9589	Build the computation graph .
9590	A list of input layers .
9591	Returns a list of all variables in the model .
9592	Find a layer by param .
9593	Compute the feed_forward function .
9594	Predict the output .
9595	Compute the classification score
9596	Save the model to a file .
9597	Load a model from a file .
9598	Compute the loss .
9599	Updates the model with the given parameters .
9600	The output size .
9601	Connects the given inputs into the graph .
9602	Binds the model to the graph .
9603	Resolve shapes for inputs .
9604	Resolve outputs .
9605	Logs information about the layer .
9606	Returns the total shape of all parameters .
9607	Format a string to be used as a string .
9608	Resolve the shape of the layer .
9609	Find a parameter by key .
9610	Add a bias parameter .
9611	Returns a dictionary representation of the model .
9612	Evaluate the loggabor function .
9613	Compute the loggabor image
9614	Add a tier .
9615	Remove a tier by name .
9616	Get a tier by name .
9617	Convert to EAF
9618	Add a point to the tier
9619	Add an interval to the tier
9620	Remove an interval from this tier .
9621	Remove a point from the tier
9622	Get all intervals
9623	Returns a sorted list of all intervals
9624	Indent an element .
9625	Add an annotation to the tier .
9626	Add a value to a controlled vocabulary .
9627	Add a description to a controlled vocabulary .
9628	Add an external reference
9629	Add a language .
9630	Add a lexicon reference
9631	Add a linguistic type .
9632	Add a linked file .
9633	Add a locale .
9634	Add a secondary file descriptor to the list of linked files .
9635	Add a tier .
9636	Clean time slots
9637	Return a copy of the EAF
9638	Generate an annotation id
9639	Generate a unique timestamp
9640	Returns child tiers for the given tier
9641	Returns the full time interval
9642	Gets the reference annotation data after a given tier .
9643	Returns the reference annotation data before the given tier
9644	Returns a list of tier ids for the given linguistic type and parent
9645	Merge two tiers .
9646	Remove all annotations from the tier
9647	Removes a description from the vocabulary .
9648	Remove a license
9649	Remove all linked files .
9650	Remove a property
9651	Remove a reference annotation for the given tier .
9652	Remove all secondary files that match the given criteria .
9653	Remove a tier
9654	Remove tiers from disk
9655	Rename a tier
9656	Shift the annotations by the given time .
9657	Run the algorithm .
9658	Display debug information for the storage
9659	Returns the base level of the given text .
9660	Embeds text into storage .
9661	Extract explicit embedding levels from a base level .
9662	Calculate the length of each character in the storage .
9663	Resolve weak types .
9664	Resolve bad types
9665	Reverse a contiguous sequence .
9666	Reorder resolved levels .
9667	Processes the current file
9668	Convert from PySide2 import to Qt .
9669	Add an attribute to an object .
9670	Command line interface .
9671	Maintain backwards compatibility
9672	Show the GUI .
9673	Try to discover the GUI
9674	Deregister all hosts
9675	add to filemenu
9676	Context manager that ensures that the current cursor is closed .
9677	Temporarily keep the current time .
9678	Show an empty message box .
9679	Initialize Telegram types .
9680	Return the cumulative data .
9681	Get values for a single axis
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters necessary to transform x and y coordinates
9684	Reverse a mapping .
9685	Generate a range of floats
9686	Add data to the dataset .
9687	Add svg definitions
9688	Add data to the list .
9689	Generates an SVG file
9690	Calculate the margin for the left margin .
9691	Calculate the margin for the right key
9692	Calculate the top margin .
9693	add a popup
9694	Calculate bottom margin .
9695	Draw the graph
9696	Make a datapoint label
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X - axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard -code the styles into the SVG XML if style sheets are not used .
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server
9708	Respond to a message
9709	Dispatch patterns .
9710	Create a new nick
9711	Handle a ping message .
9712	Called when the server is registered .
9713	Enter event loop .
9714	Register this agent with the agent .
9715	Main task runner .
9716	Decorator to check if the nick is the leader
9717	Return a list of regex patterns for the command .
9718	Called when the bot is successfully registered
9719	Execute a command
9720	Add a worker to the queue .
9721	Send a validation email to the site
9722	Send a password reset
9723	Validate password strength .
9724	Verify that the token is verified .
9725	Delete the user s avatar .
9726	Only allow POST requests .
9727	Get an executor .
9728	Return a docker client
9729	Return the TLS client .
9730	Return service name .
9731	Wrapper for docker methods
9732	Execute a docker container
9733	Poll the Docker service status .
9734	Stop the Docker service
9735	Convert the value to lower case .
9736	Update a password
9737	Update a password
9738	Validate email address .
9739	Create a new token
9740	Delete a token .
9741	Check if email is valid .
9742	Send email confirmation email .
9743	Updates the expiration date
9744	Return email context for password reset notification .
9745	Send email notification .
9746	Handler for password reset .
9747	Default email handler .
9748	Authenticate the request .
9749	Check if the token has expired .
9750	Display a notebook
9751	Process HV plots .
9752	Return a CustomJS callback
9753	Returns a widget with the given name .
9754	Render an object
9755	Create a text widget .
9756	Return a list of named objects .
9757	Return the owner of a method .
9758	Assign authentication values .
9759	Ping the server .
9760	Retrieve information about the server .
9761	Get cluster health information .
9762	Convert bytes to human readable string .
9763	Total load
9764	Returns the memory size in bytes .
9765	Returns the total amount of network up .
9766	Returns a list of volume ids
9767	Get a volume by its id
9768	Returns the total size of a volume
9769	Returns the volume percentage of the volume
9770	Return the volume temperature of a volume
9771	Return the maximum volume temp .
9772	Get a disk by id
9773	Logs into System
9774	get url
9775	Execute a GET request
9776	Fetches information from the system .
9777	The system utilisation
9778	Access to syno . Storage
9779	Return a context for a HipChat request .
9780	Return the tenant token
9781	Helper function for building an attribute dictionary .
9782	Create a new application with the given apps .
9783	Returns a copy of the installed apps without the specified apps .
9784	Returns a dict of all settings
9785	Handles GET requests .
9786	Get a value from the config .
9787	Change a value in the config file
9788	Migrate the config file
9789	Start the webserver .
9790	Wait for the server to finish .
9791	Get the access information from the PRAW .
9792	Check if the token is present .
9793	Set access credentials .
9794	Refresh access information .
9795	Create manifest table .
9796	Split a full path into bucket and canonical form .
9797	Determine if a bucket is a mercier .
9798	Extract run id from key .
9799	Remove None values from dict
9800	Add run to DynamoDB .
9801	Check if a run is in the manifest
9802	Extract schema from URI
9803	Convert schema to camel case
9804	Parses a context string into a list of contexts
9805	Parse an unstructured event
9806	Transforms a line into a JSON - formatted string .
9807	Convert a good event to a JSON formatted string .
9808	Get the used template name for a response .
9809	Print the context to HTML .
9810	Print the rendered variables
9811	Convert SQL to HTML
9812	Return an HTML representation of a Django context object .
9813	Format a dictionary as HTML .
9814	Styles the given text .
9815	Formats an object .
9816	Format an object to a stream .
9817	Get a token from a string
9818	Return a list of nodes from a latex string .
9819	Convert latex to text .
9820	Set the input_input_directory to be used for processing .
9821	Read a tex file
9822	Convert a latex string to text .
9823	u Convert UTF8 characters to LaTeX .
9824	Convert a string to ASCII .
9825	Returns information about the organization .
9826	Returns a list of boards .
9827	Returns a list of members
9828	Updates an organisation .
9829	Remove a member from the group .
9830	Add a member by id
9831	Add a member to the organization .
9832	Returns information about a list .
9833	Add a card to this account .
9834	Retrieves information about the label information .
9835	Returns a list of check items .
9836	Update label name
9837	Updates a label dict
9838	Returns the authorisation URL for the user .
9839	Returns information about the card .
9840	Retrieves a board .
9841	Retrieves a list from the server .
9842	Returns list of checklists .
9843	Add a comment .
9844	Add an attachment
9845	Add a new checklist to this account .
9846	Create a new label from a dict .
9847	Add a label from a class
9848	Add a member to this organization .
9849	Retrieves the members of the group .
9850	Returns a list of cards .
9851	Returns list of organisations
9852	Create a new board .
9853	Decorator for singledispatchmethod .
9854	Returns information about the board .
9855	Returns a list of lists
9856	Returns a list of labels for this organization .
9857	Returns a card with the given id .
9858	Returns a list of Checklists
9859	Returns a single organisation .
9860	Updates a board .
9861	Add a list to this account .
9862	Add a label to this project .
9863	Returns information about the checklist information .
9864	Returns the card
9865	Returns list of items for this checklist
9866	Updates a checklist
9867	Add a new item to this account .
9868	Remove a check item .
9869	Updates the name of the check .
9870	Updates the check state
9871	Add authorization parameters to query_params .
9872	Check if the response is not authorized .
9873	Build urllo url .
9874	Fetches a JSON object from the API
9875	Create an organisation object
9876	Create a board from a json dict .
9877	Create a new label from a given label .
9878	Create a list from a list .
9879	Create a new card from a json dict .
9880	Create a Checklist
9881	Create a new member from a dict .
9882	Get an organization by id
9883	Get a board by id .
9884	Get a list by id
9885	Get a card by id .
9886	Get a checklist .
9887	Get a member by id or name .
9888	Extract a domain from a URL .
9889	Convert text to plain text .
9890	Convert text to plain text .
9891	Convert text to text pairs .
9892	Set the password for a username
9893	Split text with given locations .
9894	Mark a regex in the text .
9895	Mark the beginning and end of a regex .
9896	Main entry point .
9897	Create AES cipher .
9898	Return a list of supported encryption modes .
9899	Default priority .
9900	Check the encryption scheme .
9901	Called when a message is received
9902	Make a unique identifier .
9903	Connect to the server .
9904	Handle a CONNACK packet .
9905	Encode a string .
9906	Decode a UTF - 8 encoded string .
9907	Encode a 16 - bit integer value .
9908	Encode a length value .
9909	Decode length from encoded bytes .
9910	Encode message .
9911	Encode this message .
9912	Decode a packet .
9913	Encode the VCF header .
9914	Decode packet .
9915	Decode a packet .
9916	Encode this message .
9917	Encode this message .
9918	Decode a packet .
9919	Encode this message .
9920	Encode this message .
9921	Decode a packet .
9922	Decode packet .
9923	Returns the URL for the request .
9924	Make a request to the API .
9925	Refresh the list of blocks .
9926	Format the data .
9927	Fit data to data .
9928	Fit k - means clustering
9929	Estimate a meanshift from the data .
9930	Fit the classifier
9931	Predict the classifier
9932	Map cluster ids to cluster ids
9933	Sort clusters according to sort_by .
9934	Convert a datetime to a datetime object
9935	Returns the total number of points
9936	Returns the maximum time span of a dictionary
9937	Convert an array to a unit - picker format
9938	Return a pretty element .
9939	convert analyte to name
9940	Convert a string to massname
9941	Collate all data in a directory .
9942	Enumerate a boolean array .
9943	Convert a list of tuples into a boolean array .
9944	Fast smoothing .
9945	Fast gradients .
9946	Find minima in x and y .
9947	Cluster the mean shift
9948	Clusters data using k - means clustering .
9949	Clusters a DBSCAN .
9950	Returns a list of strings defined in the specified srm file .
9951	Read configuration file .
9952	Read the Latools configuration file .
9953	Print the LAtools configuration .
9954	Copies the SRM file to the specified location .
9955	Create a config file
9956	Change the default configuration .
9957	Filter downhole indices .
9958	Defrag a filter
9959	Calculate the despikes of the focus
9960	Plot the histogram .
9961	Creates the numpy array for each time step
9962	Calculates the ratio
9963	Calibration of the model
9964	Generate statistics for the focus
9965	A dictionary with the ablation times of each unit .
9966	Filter the focus threshold
9967	Keep gradients below threshold
9968	Calculate the correlation between two points .
9969	Filter the histogram based on correlation values .
9970	Add a new filter
9971	Gets the parameters for the filter
9972	Plot histograms .
9973	Returns a pandas DataFrame with summary statistics
9974	Load reference data .
9975	Look up the type of a type .
9976	Returns a pandas DataFrame containing atomic weight .
9977	Calculate the molecular weight
9978	Generate a namedtuple object from arguments .
9979	Return a new stack with the given predicate .
9980	Reduce a stack .
9981	Calculate the weighted average weighted average of the data .
9982	Gaussian function .
9983	Standard deviation of stderr
9984	Return a list of all the samples
9985	Despikes from the data
9986	Calculate weighted mean
9987	Calculate the background of the background
9988	Subtract background data from the data .
9989	Calculate the ratio
9990	Make a new subset
9991	Filter the gradients based on the specified thresholds .
9992	Fit a classifier
9993	Applies a classifier
9994	Filter the data for a correlation .
9995	Filter a set of samples .
9996	Remove all samples from the data
9997	Print the filter status
9998	Apply defragment filter
9999	Filter out rid of removed samples
10000	Plot the gradient histogram .
10001	Plot gradient plot .
10002	Plot the focused histograms .
10003	Draw trace plots
10004	Draw gradient plots
10005	Filter plots based on filters
10006	Calculate sample statistics
10007	Saves statistics to a file
10008	Exports the data from LATOOLS
10009	Export the traces to a file
10010	Save the log to a file .
10011	Exports the dataset to a zip file
10012	Split a file by regex pattern .
10013	Applies a function f to z .
10014	Plots a scatter plot of the taxonomy
10015	Calculate the bayes scale of a series .
10016	Calculate the median scale .
10017	Calculate the smoothing noise
10018	This function computes the exponential decay of the expdecay
10019	add a component
10020	Remove a set of components
10021	Clears the analytes
10022	Remove unused components .
10023	Return the name of the filter key .
10024	Make a boolean value from a key .
10025	Grab the index of the filter
10026	Return information about the component
10027	Decorator to log a function .
10028	Write a log file to a file .
10029	Read a log file
10030	Decorator for autogin functions .
10031	Print modem information .
10032	Send a message to modem .
10033	Parse a file or file - like object .
10034	Return link to nbviewer .
10035	Return the thumbnail div .
10036	Return code div .
10037	Returns the code example for this notebook .
10038	Get the url of the notebook
10039	Returns the full path to the output file .
10040	Process a notebook
10041	Create a python file
10042	Return data to download .
10043	Create a thumbnail
10044	Extract the description from the header
10045	Scale an image .
10046	Saves the image as a thumbnail
10047	Copy the thumbnail figure if it exists .
10048	Get the URL for a notebook .
10049	Return list of languages for the given field_name .
10050	Returns the default value for a field
10051	Process a thumbnail file .
10052	Process the model instance .
10053	Refresh the thumbnail cache
10054	Returns a list of all thumbnails .
10055	Create a thumbnail
10056	Delete a thumbnail
10057	Create a thumbnail .
10058	Get a thumbnail from a source name and storage backend .
10059	Delete a thumbnail
10060	Handle incoming message .
10061	Subscribe to a number .
10062	Return a set of all accepted states .
10063	Add a provider
10064	Send a message to the sender .
10065	Create a receiver blueprint for the given name .
10066	Returns a mapping of receiver names to receiver names .
10067	Receive a message
10068	Process a status message .
10069	Decorator to return JSON response
10070	Forward an object .
10071	Sign a transaction .
10072	Estimate the gas of a given address .
10073	Estimate the gas of a transaction .
10074	Write to the stream .
10075	Read a line from the serial port .
10076	Send a message to the host .
10077	Return the email as a string .
10078	Return True if message has bad headers .
10079	Attach an attachment
10080	Register services .
10081	Create a Config object from a module .
10082	Register resources .
10083	Returns the value of the given key .
10084	Exit the given object .
10085	Sets up the data manager .
10086	Evaluate the angular derivative
10087	Calculate the Cauchy equation .
10088	Authenticate to the server .
10089	Login with username and password .
10090	Returns a list of domains
10091	Retrieve all results from the API .
10092	PATCH operation .
10093	Send a DELETE request
10094	Return True if path1 and path2 are the same .
10095	Create a junction link
10096	Initialize the logger .
10097	Raise an error .
10098	Claims a set of files into a mutect VCF .
10099	Add a new column header to the column header .
10100	Claim a set of VCF files .
10101	Initialize population stats .
10102	Claim the unclaimed readers .
10103	Split a string into lines .
10104	Return the prefix of the given string .
10105	Return the next line terminator .
10106	Seek to next line .
10107	Seek to the previous line .
10108	Return the last lines of the file .
10109	Return the first lines of the file .
10110	Yield lines from the file .
10111	Claim a set of strelka files .
10112	Parse VCF record .
10113	Return a dict of sample tag values .
10114	Return a set of tags for this VCF record .
10115	Joins the info fields into one .
10116	Formats the field as a string .
10117	Return the field name for a sample
10118	Returns tab - delimited newline terminated string of VCFRecord .
10119	Add a new sample tag value .
10120	Add or replace a filter .
10121	Return a list of all available categories
10122	Returns a form for the products form .
10123	Return a form for staff products form .
10124	Add an error for a product .
10125	Cache the results of a function .
10126	Returns a form for a model field .
10127	Returns a paginated list of pending items .
10128	Send an email .
10129	Iterate over OpenStreetMap data .
10130	Parse an OSM file .
10131	Iterator for OpenStreetMap notes
10132	Check if the condition passes the filter
10133	Checks if a user is met
10134	Return the remainder of a user .
10135	Filter the queryset .
10136	Filters the queryset for the given user .
10137	Filter queryset .
10138	Filter queryset by queryset .
10139	Filter the conditions for the given user .
10140	Decorator for functions that modify the cart
10141	Creates a new Cart for the given user .
10142	Extend the maximum value of the product .
10143	Applies a voucher to the cart
10144	Validate the cart .
10145	Tries to fix invalid errors
10146	Recalculate discounts .
10147	Adds a discount for a product .
10148	Decorator to register a report view .
10149	Yield all the rows of the table .
10150	Returns the form for the request .
10151	Render the given data .
10152	List all registered reports
10153	List items sold .
10154	Displays a summary of all sales .
10155	Displays all payments
10156	Retrieve credit note refunds
10157	Displays the product status .
10158	Displays the status of a discount .
10159	Returns a list of product items for products .
10160	Return a list of paid invoices for each invoice .
10161	Displays credit notes
10162	Displays all invoices
10163	Returns a list of attendees .
10164	Displays a list of users that are available for the given kind .
10165	Returns a list of product items .
10166	Return all available categories for the given user .
10167	Returns the amount of credits available for the invoice .
10168	Return whether the user is sold out and unregistered .
10169	View for viewing .
10170	Edit the attendee profile .
10171	Handle a profile form .
10172	View for products .
10173	Returns a list of products .
10174	Handle a voucher form .
10175	View for the checkout of a user .
10176	View for viewing an invoice .
10177	Show an invoice .
10178	View for manual payment .
10179	Refund an invoice
10180	Applies a credit note to an invoice .
10181	Updates staff products form .
10182	Extend a new reservation
10183	Displays an email for an invoice .
10184	Displays badges .
10185	Render a badge .
10186	Return a list of discounts for the given category and products .
10187	Annotate the queryset with past use count .
10188	Return a list of available products .
10189	Applies the credit_note to an invoice
10190	Add the cancellation fee to the invoice
10191	Generate an access code .
10192	Evaluate a function .
10193	Get an object from a module name .
10194	Returns an Invoice for the given cart .
10195	Generate an invoice .
10196	Generate a cart from a cart .
10197	Applies unclaimed credit notes to invoice
10198	Check if the user can view the invoice .
10199	Refresh the invoice
10200	Validate that the invoice is allowed to pay to the invoice .
10201	Updates the invoice status .
10202	Mark the invoice as paid .
10203	Checks if the invoice matches the cart
10204	Updates the validity of the invoice
10205	Mark this invoice .
10206	Refunds the invoice
10207	Send email to invoice
10208	Update this instance with the given data .
10209	Flatten a schema field
10210	Print download files .
10211	Download a field from the model
10212	Get project data
10213	List all processors
10214	Print the inputs of a given processor .
10215	Create a new rundata
10216	Upload files to a project .
10217	Upload a file
10218	Download data from a list of objects .
10219	Get all subclasses of c
10220	Get repo and project .
10221	Gets a list of variants for the given variants .
10222	Given a list of variants return a generator of merged variants .
10223	Search for variants by coordinate query .
10224	Bulk search for variants by coordinate
10225	Updates the element with the specified type
10226	Remove duplicates from an iterable .
10227	Authenticate asana .
10228	Select an item from a list .
10229	Get the data for a given issue .
10230	Move a saved issue to another one .
10231	Get saved task data .
10232	Get an ASana task by its ID .
10233	Save the repository to a file
10234	Applies a value to the database
10235	Decorator to handle asana errors .
10236	Flush the queue .
10237	Create a task
10238	Formats a list of task numbers into a string .
10239	Create a task in asana .
10240	Returns a list of all data types for this project
10241	Log an EKM meter .
10242	Initialize the port
10243	Set the polling values .
10244	Combine the AB .
10245	Render json with meter_read .
10246	Set the context string
10247	Calculates the power value of a factor .
10248	Set the maximum demand period
10249	Set the meter password .
10250	Unpack a struct
10251	Convert meter data to format .
10252	Return a JSON string representation of the meter .
10253	Calculate CRC16
10254	Split an Ekm date into a named tuple .
10255	Return the contents of the month .
10256	Set the CT ratio
10257	assign a schedule
10258	assign a season to a schedule
10259	set season schedule
10260	assign holiday date to calendar
10261	Read a schedule from the chassis
10262	Extract a schedule from the schedule
10263	Read Month Tariffs .
10264	Extract Tariff fields .
10265	This method is used to read holidays from the device
10266	Extracts the holiday date from the data .
10267	Reads the settings .
10268	write command message
10269	Send password auth command
10270	Called when the request has changed .
10271	Initialize the LCD lookup
10272	send a message
10273	This method is used to request A .
10274	Request V4 B
10275	Make sure that all fields are acceptable .
10276	Calculates the power factor field values
10277	convenience method to set a list of display items
10278	Set the relay status
10279	Send termination string .
10280	Set pulse input ratio
10281	Set zero resettable KWH .
10282	Set the LCD .
10283	Iterate over fields
10284	Recursively iterate over nested fields
10285	Generates a list of paragraphs
10286	Generate a random text .
10287	Format elapsed and result .
10288	Convert text to ANSI escape code .
10289	Display the given text .
10290	Return a summary of the test results .
10291	Parse command line arguments .
10292	Set up the context manager .
10293	Run an example
10294	Runs the example
10295	Transform a description to a test case .
10296	Yield examples from description .
10297	Transform an example .
10298	Transform the body of an example .
10299	Return an ast . arguments .
10300	Register a new path hook .
10301	Transform a byte string to a python code .
10302	Applies arguments parser to argumentsParser .
10303	Load module by name .
10304	Load files from a directory
10305	Discover all files in a directory .
10306	Return a function that checks the contents of the receiver .
10307	Collect messages from a file
10308	Add a command to the config file
10309	Remove a file
10310	Send a restart command
10311	Calls the Places API .
10312	Return a Taservice service .
10313	Create a process mon
10314	Refresh a session
10315	Remove expired nodes .
10316	Remove a node from this node .
10317	Get the last updated time of a node
10318	Return a dictionary of all nodes .
10319	Refresh the session
10320	Increment the times modified
10321	Dereference this node
10322	Returns a list of tokens interleaved with the delimiter .
10323	Return a list of filenames that are bad .
10324	Merge another status into this instance .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Convert a constant to a constant .
10328	Splits a function into an iterable .
10329	Convert a function into a function .
10330	Run a process .
10331	Create a Tainterner service
10332	Parse a reader .
10333	Create a parser .
10334	Create an optional parser .
10335	Create a RepeatedOnce instance .
10336	Create a new parser .
10337	Create a RepeatedOnce .
10338	Create a RepeatedSeparatedSeparated separator .
10339	Check all states .
10340	Cancel the call
10341	Check if the connection is valid .
10342	Add a heart service .
10343	Wrap a Taservice service .
10344	Freeze graph from checkpoint .
10345	Freezes the model .
10346	Save the graph to a file .
10347	Save a graph only from a checkpoint .
10348	Save weights from a checkpoint .
10349	Restore metadata from a checkpoint .
10350	Parse a tag from the given parser .
10351	Render a tag .
10352	Validate that the arguments are allowed .
10353	Get context data .
10354	Parse a template tag .
10355	Returns the context data .
10356	Convert caffe model to TensorFlow session .
10357	Freezes a caffe model from a checkpoint file .
10358	Saves a graph with the given inputs .
10359	Convert a sequence into rows .
10360	Divide an iterable into a list of strings .
10361	Yield an item from an iterable
10362	Remove duplicates from an iterable .
10363	Return the next item from an iterable .
10364	Take items from iterable until predicate is exhausted .
10365	Partition a number of items into a list of bins .
10366	Ensure an item is iterable .
10367	Suppress given callables .
10368	Collect duplicates from iterables .
10369	Assert that an iterable is ordered .
10370	Swap the partition result .
10371	Partition a dictionary by key .
10372	Get the first n queues
10373	Reset iterator .
10374	Parse as_var .
10375	Decorator to register a template tag .
10376	Returns a public keychain from the public keychain
10377	Fetch all the SQLite master records .
10378	Iterate over nested dictionaries .
10379	Select a selector
10380	Parse a selector .
10381	Process a selector .
10382	Returns all parents of lhs and rhs .
10383	Return all ancestors of lhs and rhs
10384	Returns the siblings of lhs and rhs
10385	Evaluate the nth child .
10386	Return a list of nodes matching the given validators .
10387	Ping an ICMP port .
10388	Make a request to the given URL .
10389	Expire expired items
10390	Set a value in the cache .
10391	Get a value from the cache .
10392	Check if the key is in the cache .
10393	Check if the chain is valid .
10394	Return a NistBeaconValue instance from a JSON string .
10395	Return NistBeaconValue from XML string .
10396	Return the rendered content .
10397	Apply fn to logfile .
10398	Returns the table as a list .
10399	Validate a token
10400	Returns the cryptography backend .
10401	validate token
10402	Create a new token .
10403	32 counter .
10404	Compute a counter value .
10405	Calculate the average duration .
10406	Setup the outputs
10407	Setup the sources
10408	Send events to a list of events
10409	Start watching the sources
10410	Parse format string .
10411	Parses a log line into a dictionary .
10412	Validate the field s expiration date .
10413	Ensure that the request is not required .
10414	Verify that the token is valid .
10415	Name of the browser .
10416	Warn a warning if not found .
10417	Connect receivers
10418	Create a secret link .
10419	Send an accept request .
10420	Send confirmation email .
10421	Send email validation email .
10422	Send a reject request .
10423	Send email notification .
10424	Create a new user .
10425	Validate a token
10426	Revoke this token .
10427	Create a new recipient .
10428	Get request by receiver
10429	Confirm email address .
10430	Accept the request .
10431	Reject the request .
10432	Create a secret link
10433	Returns a SHA512 hash .
10434	Verify a signature .
10435	Checks if the record is an imported record .
10436	Create an access request .
10437	View for confirmation email .
10438	Create an SSH command client
10439	Reverse a column
10440	Return the selected value
10441	Returns a QuerySet with the selected items .
10442	Extract the version from the file
10443	Set the version of the file
10444	Initialize the ssh configuration .
10445	start timer
10446	Tries to tick the event loop .
10447	Show shared link .
10448	Create a new connection
10449	Stop the connection
10450	Empty the queue
10451	Called when an event is received .
10452	Create a new connection .
10453	Create elasticsearch client
10454	Encodes an event into a protobuf .
10455	Encodes a list of events into a protobuf message .
10456	Decodes a message .
10457	Send events to the device .
10458	Generate a file preview
10459	Retrieve a single file preview
10460	Send dict to RQ queue
10461	message loop
10462	Checks if the current time is at least one time
10463	Send a response to the server .
10464	Abort the session .
10465	Mapping chars to SASL preparation .
10466	Displays the admin footer .
10467	Build payment parameters .
10468	Build registration parameters .
10469	Payment with an alias .
10470	Return version string .
10471	Constructs the layout .
10472	Post construction .
10473	Configure shortcuts .
10474	Called when the item is activated .
10475	Called when an item is selected
10476	Updates the location of the item
10477	Initialize options .
10478	Compile resources .
10479	Clean up the package .
10480	Fetch the children
10481	Refetch all children
10482	Returns the icon at the given index
10483	Call a child process .
10484	Get the maximum file descriptor .
10485	Closes a file descriptor .
10486	Close all open files .
10487	Redirect the stream to the given target stream .
10488	Set the attributes of the form .
10489	Import a module .
10490	Import modules from INSTALLED_APPS
10491	Include a template .
10492	Returns the url of the gravatar .
10493	Get the gravatar image .
10494	Checks if the given port is a valid filesystem location
10495	Check if url is a valid S3 URL
10496	Returns the absolute path of a template file .
10497	List objects in S3 .
10498	Builds a json dict from the workflow template
10499	Execute the query
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Create a new API client .
10505	Returns a list of files under the given path .
10506	Downloads a file to the specified path .
10507	Checks if the given path exists .
10508	Returns the parent entity of the given path .
10509	Create a folder
10510	Uploads a file to the storage .
10511	Delete a folder .
10512	Validate the storage path .
10513	Create a new client .
10514	Create a new Storage instance .
10515	Get entity details .
10516	Set the metadata for an entity .
10517	Get the metadata for an entity .
10518	Updates the metadata for an entity .
10519	Delete metadata for an entity .
10520	List projects .
10521	Get project details .
10522	Create a project .
10523	Delete a project .
10524	Create a folder .
10525	Get folder details .
10526	Delete a folder .
10527	Uploads a file or content .
10528	Copies the content of a file .
10529	Downloads the content of a file .
10530	Get the signed URL for a file .
10531	Emits a record .
10532	Convert a service to a service URL .
10533	Return a copy of this request .
10534	Returns a copy of this request .
10535	Returns a set of thrown exceptions .
10536	Returns a list of field names for this model .
10537	Add a function to a job .
10538	Generate genotyped VCF files .
10539	Run oncotator
10540	Sort list by t .
10541	Returns a list of all the timestamps
10542	Load the exported data .
10543	Shift times by t .
10544	Return the sum of all data
10545	Collect data from a serial device .
10546	Create a new user .
10547	Parses the VN results .
10548	Parses the release results into a list of dictionaries .
10549	Parse the prod staff results .
10550	Parses the character results from the DOM .
10551	Parse HTML tag results
10552	Parse user results .
10553	Create a tarball of a list of files .
10554	Iterate over a list of files .
10555	Copies a file to the specified location .
10556	Create a list of parameters to be used for Spark .
10557	Returns a list of docker_parameters for this node .
10558	Refresh metadata .
10559	Run MuTect
10560	Create a resource
10561	Return a list of streams in this repository .
10562	Export the device to a directory
10563	Search for a VNDB .
10564	Parse search results
10565	Add a stream to the query
10566	Reset the device s API key
10567	Return a list of users .
10568	Run the BWA index
10569	Connect to the server
10570	Add a stream
10571	Add a stream to the database
10572	Insert a stream into the cache
10573	Synchronize the cache
10574	Start the logger .
10575	Stop the thread .
10576	Downloads a URL to a local file .
10577	Uploads a file to S3
10578	Print ontology labels .
10579	Print ontology .
10580	Get the mean size of a BAM file .
10581	Obtain the current container id
10582	Run STAR STAR
10583	Create a bucket
10584	Export the stream .
10585	Get device object .
10586	Get labels for an ontology
10587	Returns an iterable of ontologies
10588	Entry point for toil .
10589	Populate the parser with the given config_parser .
10590	Get the empty config .
10591	Determine the mount path for this container
10592	Add an option to arg_parser .
10593	Create an argument parser .
10594	Create the command to run the pipeline
10595	Set authentication for the client .
10596	Handle HTTP response .
10597	Ping the query
10598	Creates a node at the specified path .
10599	Updates a resource
10600	Perform a DELETE request .
10601	Subscribe to a stream
10602	Create a user
10603	Return a list of devices .
10604	This module will run the cutadapt .
10605	Run samtools faidx
10606	Run samtools index
10607	Runs sambamba mkdup on a bam file
10608	Run samblaster
10609	Mark duplicates in a BAM file .
10610	Runs Picard sort samtools .
10611	This module will run base recalibration on the input bams .
10612	Run kallisto_index
10613	Run rsem on a bam file
10614	Get the user affinity for a test
10615	Send a command to the client .
10616	Subscribe to a stream
10617	Connect to websocket
10618	Try to reconnect the connection
10619	Resubscribe to all subscribed subscriptions
10620	Called when websocket is opened .
10621	Called when websocket is closed .
10622	Called when a connection error occurs
10623	Process a websocket message
10624	Ensure that the websocket connection is alive .
10625	Run GATK SelectVariants to select variants .
10626	Run GATK VariantFiltration on a VCF .
10627	Run GATK variant recalibrator
10628	A wrapper for GATK s applyRecalibration .
10629	This is a wrapper for combineVariants .
10630	Check if a BAM file exists .
10631	Load handlers from a list of packets .
10632	Write the configuration to a file .
10633	Return the current configuration
10634	Gets a term from an ontology
10635	Search for ontology
10636	Returns a list of suggestions for a given ontology
10637	Iterate over descendants of ontology
10638	Iterate over the labels of a ontology .
10639	Iterate over labels .
10640	Iterate over terms of this term .
10641	Run fastqc
10642	Add a stream to the query
10643	Create a Flask application
10644	Start the Spark master
10645	Start the spark container
10646	Start the datanode
10647	Stops the Spark worker .
10648	Check the status of the container
10649	Tokenizer . Generates tokens stream from text
10650	Lookup a zone by name .
10651	Fetch the configuration for a zone .
10652	Merge a list of resource records into a single one .
10653	Validate the changeset .
10654	Given a list of members return a sorted list of members .
10655	Returns the fitness of the group .
10656	Calculate the average cost function value .
10657	Return median cost function value .
10658	Returns the parameters of the group .
10659	Returns a list of members
10660	Add a parameter .
10661	Generate a new population .
10662	Normalize key - value pairs .
10663	Yield environment variables .
10664	Wraps a callable with the given exceptions .
10665	Transform a list of pypi packages into a dictionary .
10666	Transform result to string .
10667	Convert HTML to XHTML .
10668	Convert an XHTML document to HTML .
10669	Convert a document to a string .
10670	Open a document in a browser .
10671	Drop the tree .
10672	Drop the current tag .
10673	Get an element by id
10674	Select a CSS selector .
10675	Iterate over all loggers
10676	Return a dictionary mapping environment variable names to environment variables .
10677	Check if the current module is a single class
10678	Check if the current module is a single module
10679	Checks if the request is in the correct format
10680	Ensure identifier is valid .
10681	Decode a file system path .
10682	Escape an iterable of arguments .
10683	Return the codec name for the given encoding .
10684	Detect the UTF - 8 encoding of the stream .
10685	Given a list of forwarded_for addresses return the remote address .
10686	Convert obj to Decimal
10687	Parse a string .
10688	Parse a file .
10689	Convert a beautiful soup tree to a tree .
10690	Get the current traceback .
10691	String representation of the exception .
10692	Render the traceback .
10693	Generate plaintext traceback .
10694	Return a list of lines that are annotated .
10695	Render the document as HTML .
10696	Extract name from egg_info . egg_info
10697	Get the locations of the project .
10698	Find all versions of a project .
10699	Find a requirement for the given requirement .
10700	Sort a list of links .
10701	Get the Content - Type of a URL .
10702	Iterate over all links .
10703	Checks if the request is valid
10704	Find all data files for a package .
10705	Return a list of files that should be excluded from a package .
10706	Parse a requirements file .
10707	Yield lines from an iterator .
10708	Ignore comments .
10709	Compile a marker .
10710	Visit AST node .
10711	visit an attribute node
10712	Convert a string to a number .
10713	Decorator to copy current request context .
10714	Push a new context
10715	Pops the app context .
10716	Returns a copy of this application .
10717	Match the request .
10718	Pushes a new request to the current context .
10719	Make a relative path relative to a relative path .
10720	Check if a distribution is editable
10721	Add a URL value preprocessor .
10722	Add a url default function to the app .
10723	Decorator to register an error handler .
10724	Yields a generator from a generator or generator .
10725	Create a Flask response
10726	Generate a URL for the given endpoint .
10727	Safely join a directory to a directory .
10728	Get the root path of a package
10729	Returns a jinja loader
10730	Execute the completion script .
10731	Returns the cookie domain
10732	Return the cache for a link .
10733	Determine if a wheel is a pure Python package
10734	Yield uninstallation paths
10735	Check if a wheel is compatible with the current version .
10736	Build a wheel
10737	Iterate over all symbols .
10738	Decorator for methods that need to be refreshed
10739	Add egg info to filelist .
10740	Write a DELETE marker file to a directory .
10741	Check if we are running under a virtualenv .
10742	get username
10743	Return a distribution scheme for dist_name .
10744	Parse the cache - control header .
10745	Check if a request is cached .
10746	Cache the response .
10747	Update zipimporter cache for given path .
10748	Load the template .
10749	Install the site - patch .
10750	Save the changes to the file
10751	Convert a value to a converter .
10752	Add filters to a filter
10753	Configure a logging handler .
10754	Add handlers to logger .
10755	Common logger configuration .
10756	Wrapper for execfile
10757	Temporarily override a temporary directory .
10758	Return URL and revision .
10759	Get an item from an object
10760	Wrapper for _generate
10761	Compile a jinja2 template into a template
10762	Return the default cache location .
10763	Find eggs in a zipfile
10764	Yield distributions from a path .
10765	Declare a namespace
10766	Get the mro of a class .
10767	Find an adapter from the registry
10768	Ensure directory exists .
10769	Return an iterator over the entry points for the given group .
10770	Return True if dist can be added to this distribution .
10771	Find the best match for a requirement .
10772	Evaluate a marker .
10773	Evaluate a marker library .
10774	Format a record .
10775	Format a number to a currency .
10776	Parse a number pattern .
10777	Convert a number to a decimal number .
10778	Returns the decimal precision of a number .
10779	Return scientific notation elements .
10780	Convert datetime object to total seconds .
10781	Parse a list of requirements .
10782	Raise an AssertionError if distutils is not patched .
10783	Check that requirements are valid .
10784	Fetches an egg from the egg
10785	\ x1b [ 1mNAME \ x1b [ 1m_Roll
10786	Convert obj to Price class
10787	Creates a price
10788	Validate a request
10789	Get method by id
10790	Call the given method with the given arguments .
10791	The module of this module .
10792	The blueprint name .
10793	Attach enctype error to request .
10794	Create an instance of an abstract distribution .
10795	Add a requirement .
10796	Walk through all the requirements and yield them .
10797	Check if req_to_install is satisfied .
10798	Return a list of requirements to install .
10799	Get all namespace packages
10800	Encode an object into a dictionary .
10801	Tokenize an annotation .
10802	Merge two tokens .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Yield HTML tags from a list of tokens .
10806	Yield HTML tags .
10807	Find unbalanced end .
10808	Convert a list of chunks into tokens .
10809	Flatten an element .
10810	Split text into words .
10811	Return HTML start tag .
10812	Return HTML end tag .
10813	Serialize an element into a string .
10814	Move ins and del tags inside block .
10815	Extracts a constant from code .
10816	Returns a URL for the cache URL .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Create a DOM document from a string .
10820	Decorator to check if a function returns JSON response .
10821	Returns a TreeWalker instance for the specified type .
10822	Export an svn repository
10823	Get the latest revision for a given location .
10824	Decorator for setup methods .
10825	The name of the module
10826	True if there is any exceptions that should be propagated .
10827	Return the path to the instance
10828	Update the template context .
10829	Handle an HTTP exception .
10830	Returns True if the exception is caught .
10831	Handle an exception .
10832	Try to raise the routing exception .
10833	Execute the request
10834	Return a default options response .
10835	Create URL adapter .
10836	Inject url defaults into values .
10837	Generate unique values from iterable .
10838	Extract any dependencies from a package .
10839	Convert a requirement to a requirements string .
10840	Convert a pkginfo to metadata
10841	Yield all the modules in the directory
10842	Iterate over all classes in this module .
10843	Return a list of method names .
10844	Find the basename of a module .
10845	Check if the given path is a module path .
10846	Generator for os . walk
10847	Returns a generator yielding all the paths of the module .
10848	Add default arguments to kwargs .
10849	Set default json decoder defaults .
10850	Set multiple keys
10851	Increment the value of a key by delta .
10852	Dump an object into a string .
10853	Build an editable options dictionary
10854	Populate the link if necessary .
10855	Ensures that the parent_dir contains the parent_dir .
10856	Remove the temporary source
10857	Returns a pkg_resources . Distribution
10858	Get request data .
10859	Return the headers for this response .
10860	r Convert an IRI to a URI .
10861	r Return the user s cache directory .
10862	Return the user data directory for the given application name .
10863	Return the path to the user s log directory .
10864	Returns the user_data_dir for the given appname .
10865	Return a list of config directories for the given application name .
10866	Iterate over all modules .
10867	Main function to restart the interpreter .
10868	Convert a string to text .
10869	Find the CA bundle
10870	Parse an HTML document .
10871	Parse the document into a DOM tree .
10872	Parse the content of the document .
10873	Translate a word to a list of transmissions
10874	Convert a file to a list of tokens .
10875	Bind to the server
10876	Print a report to stdout .
10877	Load a bytecode from a file .
10878	Returns a dictionary of stylesheet params .
10879	Run a command .
10880	Return the version of the current Python version .
10881	Return a list of distributions for the given location .
10882	Find external links
10883	Open a local file
10884	Process a URL .
10885	Return a list of paths removed from sys . path
10886	Create a set of directories .
10887	Add a package to a package .
10888	Add packages to sys . path .
10889	Check if the user is enabled on the system .
10890	Add site - packages .
10891	Set quit and exit .
10892	Add mcs to encodings .
10893	Set the default locale .
10894	Force global eggs after local site packages .
10895	Fix sys . path . path
10896	Wrapper for subprocess . Popen
10897	Check if Pyrex is installed .
10898	Convert the source to a python code .
10899	Run the Flask application .
10900	Get a resource
10901	Generate a user agent .
10902	Check if the given name is a URL .
10903	Unpack a link
10904	Download a link .
10905	Check if a link is downloaded .
10906	Register currency format .
10907	Register exchange .
10908	Decode the response .
10909	Default template context processor .
10910	Render a template with context
10911	Render a Jinja2 template .
10912	Render a template string
10913	Parse a version string .
10914	Check if a name is declared in this scope
10915	Visit a name node .
10916	Visitor for Include nodes
10917	Visit a FromImport node .
10918	Create a whl file .
10919	A decorator for atomic operations .
10920	Start a service factory .
10921	Encode a unicode object .
10922	Return a list of wheel objects matching requirements
10923	Populate an InstallRequirementSet from the given arguments .
10924	Exports the package to a temporary location .
10925	Lookup an Amazon Products .
10926	Iterate over pages .
10927	The ancestor of this element
10928	Browse Node objects
10929	Get an element from a path .
10930	Safely get the text of a node .
10931	Get the date of the XML element .
10932	Returns price and currency .
10933	Lists the list price .
10934	Send a cached request .
10935	Build a cached response .
10936	Create an attribute getter for an attribute .
10937	Takes a string and converts it to lowercase
10938	Sort a list of items .
10939	Group by an attribute .
10940	Given an iterable of arguments apply a filter to each item .
10941	Create a logger
10942	Compare two strings .
10943	Verify signature .
10944	Derive a key from the secret key
10945	Get the signature for the given value .
10946	Sign a value
10947	Verify a signature .
10948	Unsigned value
10949	Sign a value
10950	Validate a signed value
10951	Serialize obj to JSON
10952	Handle an error .
10953	Find python packages
10954	Yield parent packages .
10955	Yield all directories under base_path .
10956	Prepare the response
10957	Unign an archive .
10958	Unpack a wheel
10959	Install the scripts for the given distributions .
10960	Formats the graph
10961	Generate a canvas .
10962	Get a node by ID
10963	Called when a directed connection is changed .
10964	Handle incoming edges .
10965	Called when a component has changed .
10966	Ctrl - click handler
10967	Called when a canvas has changed .
10968	Clears the diagram
10969	Called when a domain model has changed .
10970	Maps the domain model to a new graph
10971	Unmap a model from a node
10972	Map a new element to a diagram
10973	Set node attributes .
10974	Parse xot data
10975	Process font .
10976	Process an Ellipse element .
10977	Process a polygon .
10978	Process a Polyline element .
10979	Process a text component .
10980	Process images .
10981	Render a GridFS file
10982	Save object to file .
10983	Load the DOT file
10984	Checks if a point is in the given coordinates .
10985	Draw the bounds
10986	Perform a new step
10987	Connect to the SQLAlchemy database .
10988	Parses the dot data into the model
10989	Create a new model
10990	Open a file dialog
10991	Save the model to disk .
10992	Save the model as a file
10993	Configure graph
10994	Configure nodes
10995	Configure edges .
10996	Show about the robots .
10997	Add a new node
10998	Add an edge .
10999	Add a subgraph .
11000	Add a cluster
11001	Request a graph
11002	Edit options .
11003	Configure dot code
11004	Called when the user exits
11005	Move components to origin
11006	Save object to file - like object .
11007	Load from a file - like object .
11008	Save to file .
11009	Load an object from a file .
11010	Create an alias for an attribute .
11011	Parse a text file .
11012	list of start words
11013	Add a chain .
11014	Remove chain from chain
11015	Recursively build a chain from a source .
11016	Generate a sentence .
11017	Create a new DOT file .
11018	Add a node to the graph .
11019	Delete a node from the cluster
11020	Get a node by ID
11021	Delete an edge from the graph .
11022	Add an edge between two nodes .
11023	Add a subgraph to the graph .
11024	Called when a program changes
11025	Set the list of nodes for the edge .
11026	Parse a DOT file
11027	Parse a dot file .
11028	Build the top graph .
11029	Build a graph from a list of tokens .
11030	Get the time units and multiplier for the given seconds .
11031	Format a duration .
11032	Load a new path
11033	Create the UI for the graph
11034	Split a sequence into numpy arrays .
11035	Split an iterable into windows .
11036	Main entry point .
11037	Gets the children of the given object
11038	Append a child to an object
11039	Insert a child into an object
11040	Delete a child from an object
11041	Called when a child node is replaced
11042	Called when children is changed
11043	Get label from object
11044	set label
11045	Called when a label is changed
11046	Initialize the panel
11047	Updates the editor
11048	Called when the editor is changed .
11049	Called when a node is replaced .
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Called when an edge is replaced .
11053	Called when an edge is changed .
11054	Add edges to the graph .
11055	Parse an xdot directive .
11056	Callback for drawing drawing
11057	Create a node from a row editor .
11058	Create an edge object from a table editor .
11059	Initialize a MongoDB proxy
11060	Parse xdot directive .
11061	Parse xdot label directive .
11062	Handle drawing changes .
11063	Called when a new position is changed .
11064	Called when the widget is changed
11065	Handles the right event
11066	Display information about a specific style .
11067	Draws the line
11068	Determine if a point is inside a polygon
11069	Draws the mainlayer
11070	Handle an event .
11071	Main thread .
11072	Returns a URL for the full page .
11073	Render the previous links .
11074	Render a list of links .
11075	Check if the candidate content type matches the pattern .
11076	Select the best match for the requested content type .
11077	Rewrite a URL .
11078	Remove authentication from a URL .
11079	Create URL identifier .
11080	Normalize a host string .
11081	Discover modules in directory
11082	Find all modules in a directory
11083	Lists all modules in the specified module
11084	List all classes in a module
11085	List all classes in a module .
11086	Ensure directory exists .
11087	Put a string into the blob .
11088	Checks if card number is valid .
11089	Get the git version
11090	Load a module .
11091	Add a path to the list of paths .
11092	Find a module by name .
11093	Split a line into multiple lines .
11094	Remove all namespacepaces from root element
11095	Check that the requirements are consistent with the given version .
11096	Create an instance from YAML format .
11097	Merge action with new_dict .
11098	Execute all actions
11099	Create a Configuration object from a YAML file .
11100	Add details to error reporting .
11101	Send an email .
11102	Add image_rendition to context .
11103	Log an account .
11104	Add url to queue .
11105	Start the workers
11106	Set the value of a KVStore .
11107	Get the value of a key
11108	Recurse up a key
11109	Return the X - Consul - Index header .
11110	Delete a KVStore .
11111	Plot a heatmap .
11112	Add months to a timestamp
11113	Add months to a date
11114	Checks if today is a christmas period
11115	Use a music service .
11116	Uses the given storage service to use the given name .
11117	Read data from a CSV file
11118	Loads the collection from a json file .
11119	Save data to a JSON file
11120	Return a list of labels that contain the given label .
11121	Calculate the average value of a given label .
11122	Compute feature importance report .
11123	Restore session data .
11124	Recursively merge dictionaries
11125	Decorator to register a dispatch function .
11126	Decorator to register a method .
11127	Find registered blocks .
11128	Verify that the given block is valid .
11129	Register a block .
11130	Unregisters a block with the given type .
11131	Convert a file to MP3 .
11132	Return a string describing the desired version .
11133	Handles SSL requests .
11134	Initialize celery
11135	Queues an email .
11136	Parse the Accept header .
11137	Parse a cache control header .
11138	Parse a ContentType .
11139	Parse a forwarded header value .
11140	Parses a string into a list .
11141	Parses a parameter list into a list of parameters .
11142	Resize an image to fit the desired width .
11143	Add a value .
11144	Download the file at url .
11145	Connect to Google Drive
11146	Upload a file to Google Music .
11147	Connects to the music folder
11148	Write the sky parameters to a file .
11149	Updates the filenames of the sky files
11150	Read ahpi absorption from file .
11151	Scale the A_phi by the given parameter .
11152	Read pure water absorption from a file .
11153	Read pure water scattering from a file .
11154	Read IOP from a file .
11155	Write an iterator to a file
11156	Build the b of the water
11157	Build absorption matrix
11158	Build the total attenuation C
11159	Build all b and c from IOPs
11160	Set batch parameters
11161	Read a parameter file into a dictionary .
11162	Convert string to list of floats
11163	Read a PR report file
11164	Set the handler for the given signals .
11165	Called when SIGTERM is busy .
11166	Default handler .
11167	Pauses the current process .
11168	Handle an abort request .
11169	Called when a status signal is received .
11170	Unregisters an event from the list
11171	Fetch a metric from InfluxDB .
11172	Returns a list of metrics sorted by their position .
11173	Return a list of items from iterable .
11174	Print an item to stdout .
11175	Pretty print an iterable .
11176	Extract the signature from a function
11177	Copy the signature from a partial
11178	Returns a copy of the argv .
11179	Return True if the given file is ignored .
11180	Return priority for given file .
11181	Convert vlq to int
11182	Read a table from a stream .
11183	Parse the header of the archive .
11184	Return the duration string .
11185	Print tile details .
11186	Populate the data from the GUI .
11187	Opens the result file
11188	Write batch to file
11189	Extract data from the output file
11190	Display the connection
11191	Print the graphic information .
11192	Display the error message .
11193	Hide the error message
11194	Execute planarrad
11195	Cancel the planar radians
11196	Quits the PlanarRad
11197	Save the current figure
11198	Open the log file .
11199	Open the documentation .
11200	Perform preprocessing actions
11201	Handle the context menu .
11202	Handles the mouse move
11203	Display the graphic target
11204	Returns a LockSet for the given block .
11205	Sign this message .
11206	signatures are non deterministic
11207	stror or one of quorum noquorum quorum quorum
11208	In the IOU fungible the supply is set by Issuer who issue funds .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid lockset on height
11212	setup a timeout for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring see utils . cstr
11215	Calculate the delay for a packet .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the contract on the chain
11218	returns class_on_msg_unsafe use x . im_msg_unsafe to get class
11219	registers NativeContract classes
11220	returns True if unknown
11221	receives rlp . decoded serialized
11222	Convert an image into an image .
11223	Convert image to vgg image
11224	Get the F layer
11225	Returns the output of the layer .
11226	Get the features for the given layers .
11227	Create a new key file .
11228	Finish the bulk load job .
11229	Read a file from a file .
11230	Add items to the load balancer
11231	Release the table .
11232	Returns a list of target tables .
11233	Modify compile flags .
11234	Find the teradata server .
11235	Get a value from the config .
11236	Set a value in the config file
11237	handle table output
11238	Execute a query
11239	Get a value from the settings .
11240	Write default configuration .
11241	Set the columns of the collection .
11242	Return a generator that writes the data to an archive writer .
11243	Return a string representation of the table .
11244	Convert a string to a float .
11245	Parse a specific gain string .
11246	Convert string to device settings .
11247	Wrap a string with the given indentation .
11248	Detect devices .
11249	Set the center frequency
11250	Compute the FFT and pwr array .
11251	Wait for the given state to finish .
11252	Update the PSD .
11253	Read pwr array from file f .
11254	Write PWR array to file .
11255	Submit a function to the queue .
11256	Return the number of times to repeat the given interval .
11257	Generate a frequency plan
11258	Create a new buffer .
11259	Setup the PSD .
11260	Stops the stream .
11261	Tune the PSD .
11262	Sets up the waveform .
11263	Set the socket address .
11264	Run CMake
11265	Filter a list of datetimes .
11266	Mask datetime .
11267	Convert a datetime object to a datetime object .
11268	Convert a list of datetimes into a set of days .
11269	Given a list of datetimes return a new datetime . datetime . datetime object .
11270	Return a set of dates for the given list of dates .
11271	Given a list of dates return a list of dates that can be deleted .
11272	Return the control byte corresponding to the read_write command .
11273	Read a single bit .
11274	Write a bit to a given address .
11275	Get the bit number from a bit pattern .
11276	Watch pins for a port .
11277	Process events from the event queue .
11278	Bring GPIO interrupt into userspace
11279	Set GPIO interrupt edge .
11280	Waits until a file exists .
11281	Register a pin function .
11282	Unregister a pin function .
11283	Enables gio interrupt interrupts
11284	Send data to the device .
11285	Render the tabs
11286	Determine if any of the fields have any errors .
11287	Render the link to the form .
11288	Extract package version .
11289	Add keyword arguments to form .
11290	Check the status of the response .
11291	Send a GET request
11292	Get download link
11293	Get a link to a file
11294	Upload a file
11295	Upload a folder to the server .
11296	Retrieve the status of a remote upload .
11297	List a folder
11298	Get a list of running converters
11299	Calculate the humidity .
11300	Calculate the dewewpoint .
11301	Publish a message
11302	Calculate CRC for given data .
11303	Verify that the data is valid
11304	Unpack a storm date .
11305	Determine whether the record is used to use a revision .
11306	Send WAKEUP
11307	Send a command to the device
11308	Send DMPPAFT command .
11309	Get new archive fields
11310	Parses fields into fields
11311	Update weather data .
11312	Initialize logging .
11313	Return a list of all the configured services
11314	Get wind gust of a station
11315	Set the parameters for this object .
11316	Set arguments .
11317	Publish the current values to a file
11318	Decorator for wether a user wants a request
11319	Initialize the extension
11320	Return True if all requirements are satisfied .
11321	Push a context onto the context stack .
11322	Pops the override context .
11323	Override the current context .
11324	Add another context to this context .
11325	Pops an additional context .
11326	Add a context to the current context .
11327	Remove duplicate field names .
11328	Interpret the results .
11329	Extract params from a query
11330	Run a query
11331	Returns a pandas DataFrame with the keys and values .
11332	Returns a networkx graph from the results .
11333	Draw a pie plot
11334	Plot the data .
11335	Draw a bar chart
11336	Returns a Csv result descriptor
11337	Decorator that checks if user is logged in .
11338	Return the context data .
11339	Returns a list of widgets sorted by position .
11340	Returns a list of widgets that need update
11341	Register a dashboard widget .
11342	Unregister a widget
11343	Returns the last update of this widget
11344	Get a setting by name .
11345	Save a setting to the dashboard
11346	Determine if this item should be updated .
11347	Convert an array into an array .
11348	Creates a new array with the given shape .
11349	Concatenate two arrays .
11350	Check if args are valid
11351	Helper function to format key axes .
11352	Wraps a function into a BoltArray .
11353	Align the shape to the given axes .
11354	Convert to Spark
11355	Sort the array by the given axis .
11356	Stack the elements of the RDD .
11357	Applies a function to each RDD .
11358	Split the RDD into chunks .
11359	Applies a function to the RDD .
11360	Applies a function to the RDD .
11361	Return the plan of the data
11362	Remove padding .
11363	Calculate the number of chunks given a plan and shape .
11364	Convert a plan to slices .
11365	Create a mask from indices of indices .
11366	Return a copy of this RDD .
11367	Stack each RDD in this RDD .
11368	Align self to given axis .
11369	Return the first element of the RDD .
11370	Compute statistics of this RDD .
11371	Compute mean .
11372	Compute the variance .
11373	Compute standard deviation .
11374	Sum op .
11375	Return the maximum value .
11376	Return the minimum value .
11377	Return a chunk of the RDD .
11378	Swap the values of the keys and v axes .
11379	Transpose the TimeSeries using the given axes .
11380	Swap two axes .
11381	Reshape the spark array .
11382	Reshape the input shape .
11383	Return a copy of this array .
11384	Convert the RDD into a new RDD .
11385	Clip the elements of the RDD .
11386	Convert the RDD to a numpy array .
11387	Convert an argument to a tuple .
11388	Convert a list of arguments into a tuple .
11389	Ensure that the given shape is valid .
11390	Check if two arrays are allclose .
11391	Convert a list of integers into a list .
11392	Convert a slice into a slice .
11393	Check if new keys are transposed .
11394	Check that new keys are reshapeable .
11395	Take a list of values and concatenate them together .
11396	Expand the dimensions of an array .
11397	Zips a RDD by index .
11398	Decorator for wrapped function .
11399	Lookup a constructor by arguments .
11400	Return a new BoltArray with the given shape .
11401	Transpose the BoltArray .
11402	Return a copy of this RDD .
11403	Transpose the array .
11404	Create an array of ones .
11405	Create an array of zeros .
11406	Concatenate arrays .
11407	Compute the discrete likelihood of the given data .
11408	Returns the most likely alpha for the given data .
11409	Calculate the alpha of a discrete distribution
11410	Find the most likely alpha
11411	Calculate the best optimal alpha values .
11412	Plots the power spectrum .
11413	Compute the likelihood ratio of the data .
11414	Sanitize HTML .
11415	Configure analytics for Yandex .
11416	Return a list of tags for a given list of tags .
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Convert bytes to a long value .
11421	Decodes a public key
11422	Parse options .
11423	Process SSH RSA key data .
11424	Process SSH DSS message .
11425	Process an ECDSA SHA256 hash .
11426	Processed ed25519 data .
11427	Parse SSH2 public key .
11428	Run the step .
11429	This function takes an input token and returns the result .
11430	List of mechs .
11431	Store the credentials for this CID .
11432	Main entry point .
11433	Initialize the distribution .
11434	Create a new audio file .
11435	Return the HTML for the h5bp .
11436	Link to dj frontend normalize .
11437	Render the fontawesome .
11438	Template tag for django . js
11439	Template tag for django . jquery
11440	Displays the Jupyter HTML for the jupyter notebook .
11441	Template tag for django . jquery_data_jquery_jquery_jquery
11442	Return the CSS for the jquery_datatables .
11443	Displays the HTML for the jquery_data_tables_tables_tables .
11444	Template tag for django s jquery_formset
11445	Template tag for django . scrollTo
11446	Generate the jquery_smooth -ooth - scroll script
11447	Displays the CSS for the given version .
11448	Template tag to display Google Analytics code .
11449	u Render Javascript option .
11450	Generate authentication hashes .
11451	Calculate the expiration time .
11452	Generate a user token .
11453	Convert a User object to a dictionary .
11454	Turn a profile into a dictionary .
11455	Updates a user
11456	Called when authentication failed .
11457	Return a User object for a validated token .
11458	Check if request is secure .
11459	Get username for given user
11460	Create a new user .
11461	Login a user
11462	Logout from the user
11463	Authenticate with given parameters .
11464	Login with password .
11465	Logs a user and returns a user token .
11466	Change the password of a user
11467	Send a password for a user .
11468	Reset a password
11469	Recursively merge two nested dictionaries .
11470	Read the contents of a file .
11471	Get the metadata for an object or model .
11472	Given a list of object ids return a dict of dicts .
11473	Get an object_id for a meteor_id
11474	Given a list of meteor ids return a dict of object ids .
11475	Get an object from the database .
11476	Set the defaults for an operation .
11477	Set default values for MongoDB models .
11478	Truncate the given models .
11479	Truncate the database .
11480	Truncate the database .
11481	Initialize build options .
11482	Add undefined options .
11483	Builds the meteor app
11484	Convert a path to a directory .
11485	Seed a set of values .
11486	Returns the current state
11487	Generate a random string
11488	Decorator to register an API endpoint .
11489	Generator for all API endpoints .
11490	Clears the API path map .
11491	Print name and value .
11492	Validate kwargs .
11493	Called when a websocket connection is opened .
11494	Called when the connection is closed .
11495	Called when a message is received .
11496	Yield frames from a DDP message
11497	Process a DDP request .
11498	Dispatch a message .
11499	Handle a new connection .
11500	Sends a ping command .
11501	Receive a subscription .
11502	Remove a subscription .
11503	Send a method to the API
11504	Yield info about the websocket .
11505	Run DDP server .
11506	Main entry point .
11507	Print msg with verbosity level .
11508	Stop the server
11509	Runs the worker
11510	The main loop .
11511	Process a connection .
11512	Monkey patch a greenlet
11513	Generate a random number .
11514	Autodiscover dddp
11515	Return the error as a dict .
11516	Get an object by name .
11517	Emits a log message .
11518	Create a negotiation handler .
11519	Add a route to the application .
11520	Add a resource .
11521	Run the application .
11522	Send a message .
11523	Send an alert to APNS .
11524	Fetch inactive ids from APNS .
11525	Send a message to GCM .
11526	Send a bulk message
11527	Send data to GCMP .
11528	Send data to the API .
11529	Gets a model class by name .
11530	Fast forward selection algorithm
11531	Search for a given term .
11532	Translate a phrase into a dictionary .
11533	Get trending data .
11534	Retrieve a gif from the API
11535	Return a list of screensaver objects .
11536	Upload a file to a file .
11537	Convert dict to ints
11538	Fetch data from the endpoint
11539	Translate a term or phrase into a GIF
11540	Yield Giphy images
11541	Retrieve a Giphy image
11542	Upload a gif from a file
11543	Create an access control element
11544	Authenticate with YouTube .
11545	Upload a new video .
11546	Check video upload status
11547	Update a video entry
11548	Delete a video entry
11549	Check video availability
11550	Display a video .
11551	List all videos for a user .
11552	Upload a video
11553	Upload a video .
11554	Upload a video .
11555	Remove a video .
11556	Get video entry
11557	Updates the video
11558	Delete the video
11559	Updates the metadata for this bucket .
11560	Updates a metadata field
11561	Update an item
11562	Parse a YAML string .
11563	Dump a list of Tree objects into a string .
11564	Load an object from a file - like object .
11565	Read a file .
11566	Convert a string to a Node object .
11567	Create a new node .
11568	Return a string representation of the node .
11569	Return ASCII art .
11570	Return the node with the given label .
11571	Prune the tree .
11572	Resolve polytomies .
11573	Removes all internal names
11574	Removes all leaf names
11575	Decorator to check if user is authenticated
11576	Clean up a JSON string .
11577	Require a setting with the given name .
11578	Get an argument from the request .
11579	Get a list of arguments from the request .
11580	Decorator to wrap a callback .
11581	Get a cookie value .
11582	Clear a cookie
11583	Redirect to the authenticated user .
11584	Get the authenticated user .
11585	Create the parameters for the OAuth request .
11586	Redirect the user to the given callback URI .
11587	Send a request to Facebook
11588	Get an authenticated user .
11589	Concatenate a URL .
11590	Parse a header line .
11591	Add a header value .
11592	Returns a list with the given name .
11593	Parse a line of text .
11594	Parse headers .
11595	Normalize header name .
11596	Convert a string to UTF - 8 .
11597	Convert a value to a unicode string .
11598	Convert a value to a base string .
11599	Recursively convert an object to unicode .
11600	Raise an exception if the plugin is not conflicting .
11601	Iterate over all subclasses of cls .
11602	Based on the matching strategy and optionally the requested method
11603	Find the occupancy of a grid
11604	Write a GEO box to a file .
11605	Write a PDB file .
11606	Generate a list of molecules .
11607	This function resizes a PBC box for a list of proteins .
11608	Write the top molecules to a file
11609	Yield lines from a file
11610	Write a message to a user .
11611	Send a message to a list of users
11612	Get all messages for a user
11613	Add messages to the request
11614	Check config file .
11615	Verify that the given profile name is valid .
11616	Retrieve data from config object
11617	Extract password from config object .
11618	Update config data from message
11619	Updates the config with the given message .
11620	Create a config profile
11621	Display required items for a message
11622	Get data from a user
11623	Get auth from config
11624	Create a profile .
11625	Write data to cfg
11626	write auth data to cfg
11627	Add attachments to message
11628	Send the message
11629	Send a message
11630	Return a message factory .
11631	Create a private property .
11632	Create a validator property .
11633	Validate input .
11634	Ensure that the value of Twilio is valid .
11635	Validate a slack post .
11636	Ensure that the email is valid .
11637	A context manager for sending messages .
11638	Add a message to the queue .
11639	Read body from kwds file
11640	Removes arguments from kwds .
11641	send a message
11642	Get chat id from username
11643	Send message .
11644	Sends the message .
11645	Return the name of the SMTP server .
11646	Generate email object
11647	Add email header to message
11648	Attach the message body to the message .
11649	Add attachments to the message
11650	Return a SMTP session
11651	Return an SMTP SSL connection
11652	Create a SMTP session
11653	Send email .
11654	Deprecated .
11655	Unloads the image
11656	Get a region of the image .
11657	Checks if this object is valid .
11658	Clears the internal state .
11659	Return a string representation of the comment .
11660	Read data from file .
11661	Delete the chunk .
11662	Resize the chunk .
11663	Insert a new chunk .
11664	Save this frame to a file .
11665	Delete a file
11666	Parse a file .
11667	Process a line .
11668	Add lines to the block .
11669	Draw a string using the given font .
11670	Parses an ISO8601 formatted datetime string into a datetime object .
11671	Turn a list of words into HTML .
11672	Convert a word to HTML .
11673	Make a paragraph from a list of words .
11674	Make HTML code .
11675	Convert a list of items into HTML .
11676	Save metadata to file .
11677	Update parent directories
11678	Runs the bot .
11679	Register a mapping .
11680	Gets the controller for a controller .
11681	Register a freeform key .
11682	Returns the HMAC - SHA256 of the given string .
11683	Generate request headers .
11684	Send a request .
11685	Send a GET request
11686	Send POST request .
11687	Send a DELETE request
11688	Convert a value to an APE value .
11689	Send a request to the transport
11690	Perform an autopaginating API call .
11691	List hosted zones .
11692	Create a new hosted zone .
11693	List resource record sets by ID .
11694	Change a resource record set .
11695	Draws an image
11696	Draw a region of an image .
11697	The size of the packet .
11698	Replace old_pages with new_pages .
11699	Find the last page
11700	Set a section .
11701	Add a new doc markup .
11702	Process HTML content .
11703	Return the markup with the given tag_name .
11704	Create a new hosted zone writer .
11705	Lock a file
11706	Insert size bytes into file .
11707	Delete bytes from a file .
11708	Convert data to UTF - 8
11709	Add a change .
11710	Parses a change info element .
11711	Measure the width of a string .
11712	Returns True if the model has changed .
11713	Delete this zone .
11714	Save this record to the hosted zone .
11715	Parses ID3v1v1v1v1v1v1 v2v1v1v1 v2v1v1v1v1 .
11716	Make ID3v1v1 v2v1 v1 v1 v2 .
11717	Perform a full read .
11718	Delete all values from the dictionary
11719	Called when a frame is loaded
11720	Update common properties .
11721	Convert to v24 format .
11722	Unloads the sound .
11723	Play a sound .
11724	Set loop points .
11725	Parse adobe glyph list .
11726	Return a list of glyph names that match the filter .
11727	Dump encoding list to file
11728	dump an array to a static const
11729	Main entry point .
11730	Check if a file exists
11731	Create a list of files from argv
11732	Parses an e_zone element into a HostedZone object
11733	Parses the nameservers of a zone .
11734	Convert a list of blocks into a binary string .
11735	Group padding blocks .
11736	Delete the VCFLACDict
11737	Save audio to file .
11738	Parses an RRSet element and returns a list of zone ids
11739	Parses an RRset element into a list of strings
11740	Parse an RRset element .
11741	Delete this hosted zone .
11742	Add a record to the hosted zone .
11743	Create an A resource record .
11744	Create a newaaa record .
11745	Create a new CNAME record .
11746	Create a new MX Resource record .
11747	Create a new NS resource record .
11748	Create a new PTR resource record .
11749	Create a new SPF record .
11750	Create a new SRV record .
11751	Create a new TXT record .
11752	Registers a TXXX frame .
11753	Get initial values for a change
11754	Convert a change to a resource record .
11755	Generate a change record set .
11756	Initialize logging .
11757	Get an item by its alias .
11758	Sort a dictionary by key .
11759	Join HTML attributes .
11760	Initialize the app
11761	Initialize all bars .
11762	Bind a bar to the bar .
11763	Returns a dictionary of arguments for this function .
11764	The URL for this endpoint .
11765	Check if current request is current
11766	Validate a metric class .
11767	Get a stat by name .
11768	Calculate statistics .
11769	Autodiscover all the apps .
11770	Returns a csv dump of a metric
11771	Handle maintenance requests .
11772	Get a list of values from a GET request
11773	Get a GET parameter from a GET request .
11774	Get next colour
11775	Returns a dict of parameters for the Gecko query parameters
11776	Displays the number of statistics for the current user .
11777	Displays the latest count for the given uids
11778	Displays a list of statistics for a given metric
11779	Gets the current Geckoboard .
11780	Displays the latest metrics for the given request .
11781	Returns a list of gadgets .
11782	Register a gadgets .
11783	Returns a dictionary of context data .
11784	Print an error message and exit .
11785	Decorator to validate params
11786	Display a long input .
11787	List input .
11788	Prompts the user to enter a file
11789	Get all games for a given year .
11790	Returns the winner of the game .
11791	Returns the season of the event .
11792	List of starters .
11793	The surface of the game .
11794	The coin Toss
11795	Get weather information .
11796	Return information about the ref .
11797	Return a pandas dataframe of games for the game .
11798	Get the standings for the league .
11799	Return table of team stats .
11800	Return a pandas DataFrame with the Ranks
11801	Returns a DataFrame containing the line scores for each team .
11802	Returns the season of the date
11803	Return statistics for each team .
11804	Decorator to switch to dirPath
11805	Decorator to cache functions
11806	Return a unique key for a class instance .
11807	Memoize a function .
11808	Get the age of a person
11809	Get stats table for given table id
11810	Return statistics about the game per game .
11811	Return the total statistics for the table .
11812	Return statistics about the per minute
11813	Return statistics about the per - poss .
11814	Get statistics from the advanced statistics table .
11815	Gets a stats table .
11816	Return statistics for the advanced client .
11817	Get the basic playoffs for the game .
11818	Get session data
11819	Expand the details in a DataFrame into a DataFrame
11820	Add team and opp columns to features .
11821	Add team features to dataframe
11822	Calculate the initial win probability for a line .
11823	Return a pandas DataFrame containing the current playoffs .
11824	Simple year award .
11825	Returns the team s name
11826	Return box scores for a given year .
11827	Get information about a year .
11828	Returns a list of head coaches for a given game .
11829	Returns a pandas DataFrame of games for the given year .
11830	Return the OFF - DC Coordinator for the given year .
11831	Return the Defensive Coordinator .
11832	Return the team s url .
11833	Returns the Offensive Scheme for the given year .
11834	Returns the Defensive Alignment scheme .
11835	Returns a pandas DataFrame containing the splits for the given year .
11836	Get html from url
11837	Flatten links in a table .
11838	Convert a relative URL to a URL .
11839	Convert kwargs to query
11840	Read data from HDF5 file .
11841	Return a copy of the queue .
11842	Get the direct connection .
11843	Closes the connection .
11844	Get a batch from the HDF5 file .
11845	Get the remainder of a file
11846	Get a queue from a file
11847	Get a generator from a queue
11848	Parse a file or file - like object .
11849	Dump data to a file or file - like object .
11850	Read a varint from the stream .
11851	Get objects from the stream .
11852	Close the stream .
11853	Write objects to the stream .
11854	Flushes the buffer to the stream .
11855	Get the directory of the game .
11856	Input text with keyboard emulation .
11857	Make a fake movie
11858	Eager evaluation of traits
11859	Wait until condition is met .
11860	Wait until all traits are present
11861	Add ignored exceptions .
11862	Get the current volume
11863	Get the source of an operator
11864	Send a message .
11865	Return the status of the device .
11866	Power off the device
11867	Power on the device .
11868	Set the volume
11869	Select a power source
11870	Decrypts a request .
11871	Calculate the CRC32 .
11872	Obfuscate a value .
11873	print missing schema
11874	Returns a list of all href links
11875	Check if song is a song name
11876	Parses a song
11877	Generate a URL for a song .
11878	Parses the url and returns the download url
11879	Parses a song .
11880	get html response
11881	Download a file using requests .
11882	Download a file using wget
11883	Find stations by city name .
11884	Get the observation for a location .
11885	Parse an observation response
11886	Get an observation from a station
11887	Return search paths .
11888	Returns a list of compiler extensions .
11889	Return the mimetype for this file .
11890	Return the current compiler mime type .
11891	Return the extension of the compiler format extension .
11892	Register a processor for a given mimetype .
11893	Unregister a processor for a given mimetype .
11894	Returns a list of paths for all finders .
11895	Register default values .
11896	Import Qt core
11897	Return a netnode .
11898	Add a netnode plugin name
11899	Delete a netnode plugin name
11900	Import settings from config_path
11901	Export settings to config_path
11902	Get a DirectoryIDASettings object .
11903	Iterate over all keys
11904	Simple error handler .
11905	Get a table
11906	List all DynamoDB tables
11907	Fetch items for a category
11908	Get the id of an item
11909	Get the updated date of an item
11910	Fetch the crate owner .
11911	Fetch the crate owner of a crate .
11912	Fetch versions of a crate
11913	Fetch the crate version downloads .
11914	Fetch crate data
11915	Get the category summary
11916	List all crates
11917	Get information about a crate .
11918	Get the raw attribute of a crate .
11919	Fetches a list of items
11920	Fetch items from a category .
11921	Fetch items from a category
11922	Returns a generator of Question objects
11923	Fetch events from category .
11924	Get the updated date of an item
11925	Determine the category of an item
11926	Get items from ReMo
11927	List of buffers .
11928	The priority of the IOCB .
11929	Close the socket .
11930	Submit a list of blocks .
11931	Cancel a block .
11932	Cancel all submitted blocks .
11933	Return a list of events from the server .
11934	Fetch events from category
11935	Retrieves all cells
11936	Parse the feed
11937	Returns a list of formats for the given pid_type .
11938	Returns the permission factory .
11939	Create a blueprint .
11940	Create url rule .
11941	View a record .
11942	r Default view method .
11943	r Export a record .
11944	Time a callable .
11945	Closes the socket .
11946	Remove a client from the pool .
11947	Increment a metric by name .
11948	Send a timing request .
11949	Record timing since start_time .
11950	Send a gauge .
11951	Send a gauge delta .
11952	Set the value of a metric .
11953	Send a request to the server .
11954	Create a batch client .
11955	Return a unit client .
11956	Send all batches to the remote server .
11957	Create a new permission checker
11958	Create a batch client .
11959	Send the batched data to the server .
11960	Return a TCP client .
11961	Creates a user and returns a User object
11962	Convert an object to OpenMath .
11963	Convert a term to OpenMath .
11964	Convert OMSObject to Python object .
11965	Convert an object to OpenMath .
11966	Register a converter .
11967	Registers a converter to a Python converter .
11968	Initialize the application
11969	Return list of valid choices
11970	Split model fields into model fields .
11971	Register a function as a function .
11972	Create value from field instance
11973	Returns the default form data .
11974	Decorator for field_required
11975	Decorator for field choices
11976	Return a string representation of a decimal field .
11977	Return the data for a field .
11978	Returns a string representation of a date field .
11979	Generate a random datetime field .
11980	Returns a string representation of a field .
11981	Returns a string representation of an integer field .
11982	Return a random time field .
11983	Return a random choice field .
11984	Returns the data for a single choice field .
11985	Return a random value for a model choice field .
11986	Encode an object as a string .
11987	Publish package
11988	Tag the current version
11989	Return None if any field is blank
11990	Load a global global variable .
11991	Build an instance from an instance
11992	Create an OML application .
11993	Convert a list of arguments to a tuple .
11994	Decode a packet .
11995	Encode a byte string .
11996	Convert value to fixed number
11997	Format a number .
11998	Convert a number to a money amount
11999	Convert blosc data to numpy array
12000	Create blosc compressed data from an array .
12001	Add a workspace .
12002	Remove a workspace .
12003	List all workspaces
12004	Returns a list of ws
12005	Check if a repository exists .
12006	Sync a workspace
12007	Clone a repository
12008	Check version of ndio
12009	Extract voxels from an array
12010	Convert a list of voxels into a numpy array .
12011	Print workspaces
12012	print update
12013	Add a console handler .
12014	Execute a command .
12015	Load an image from a png file .
12016	Save numpy array to file .
12017	Save a numpy array .
12018	Print the status of a workspace
12019	print repository status
12020	Get the block size
12021	POST a blosc data to blosc
12022	Load an image from a tiff file .
12023	Save numpy data to a tiff file .
12024	Load a tiff file
12025	Write configuration to file .
12026	Clone this branch
12027	Get the version of yoda .
12028	Combine two strings .
12029	Print an option decorator .
12030	Reserve a list of ids
12031	Merge multiple ids
12032	Propagate data to a channel
12033	List projects in a dataset
12034	Get a dataset by name .
12035	List all datasets
12036	Parse command line options .
12037	Show workspaces
12038	Show a workspace .
12039	Show all workspaces
12040	Returns the URL for the given endpoint .
12041	Guess the format from a file extension .
12042	Opens a file
12043	Convert an input file to another .
12044	Builds a build graph .
12045	Compute invariants for a graph file .
12046	Convert a graph file to a networkx format .
12047	Convert a list of ramons to a dictionary
12048	Return the RAMON type for the given typ .
12049	Delete a Channel
12050	Add a dataset
12051	Convert a dataset to JSON .
12052	Create a dictionary of dataset parameters .
12053	Create a channel dictionary
12054	Create a project dictionary
12055	Identify the size of the image .
12056	Upload data to ndio
12057	Find the path to a workspace .
12058	Returns a list of public tokens .
12059	Get project information
12060	Set OCP metadata .
12061	Get a URL .
12062	POST a POST request
12063	Delete a URL .
12064	Loads the data from an hdf5 file .
12065	Save array to HDF5 file .
12066	Infer gaps in tree
12067	Recover a nvim io . io
12068	Install Jinja2 translations .
12069	A context manager for exclusive execution .
12070	Calculate the percentage of a part .
12071	Get cache stats .
12072	Get list of slabs
12073	Combine context data into a dictionary .
12074	Display server status .
12075	Displays a dashboard .
12076	Display memcache statistics .
12077	Display a list of Slabs .
12078	Convert a number to a human - readable string .
12079	Find a config from a dictionary
12080	Add a new environment
12081	Applies the given applicator to the file .
12082	Absolute path of the file .
12083	Read the file
12084	write data to file
12085	Configure the logger .
12086	Create the file .
12087	Applies the given applicator to this node .
12088	The absolute path of the file .
12089	Remove the directory .
12090	Prepare the environment
12091	Cleanup the children of this node .
12092	Returns the path to the given path
12093	List all files
12094	write data to file
12095	Read the contents of a file
12096	Add files to the environment .
12097	Save configuration to YAML file
12098	load yaml file
12099	Clean up the cache
12100	Load all plugins from a directory
12101	Recursively updates nested dicts .
12102	Create a child node by path .
12103	Resolve the path into a tuple .
12104	Get the value of the field
12105	Updates this ConfigNode
12106	Load the configuration from the config file
12107	Convert an object to a string
12108	Build the URL for the callback URL .
12109	Process incoming input .
12110	Send output to socket .
12111	Send an RPC request
12112	Read data from socket .
12113	Write socket output .
12114	Decorator to check if a link is not reentrant
12115	Returns a dictionary of settings for the remote device .
12116	Configure connection parameters .
12117	Returns the source address of the packet .
12118	Returns the target address .
12119	Called when the parent session is closed .
12120	Create a new sender
12121	Request a new Sender link .
12122	Create a new receiver .
12123	Request a new receiver link .
12124	Called when a link is destroyed .
12125	Called when the session is closed .
12126	Process an endpoint event .
12127	Extend markdown .
12128	Called when a remote connection is closed .
12129	Called when the receiver failed .
12130	Extract host and port from server address .
12131	Convert a socket to a socket
12132	Creates a server socket
12133	Find connections that need to be processed .
12134	Decorator to check if connection is not reentrant
12135	Process the SASL .
12136	Return the current output buffer .
12137	Create a new sender .
12138	Reject a sender link .
12139	Create a new receiver .
12140	Called when a connection failed .
12141	Called when a connection is active .
12142	Called when the connection is closed .
12143	Called when an error occurs .
12144	Decorator for Twilio views
12145	Return a string representation of the color .
12146	Returns a dictionary of font names .
12147	Set the compression option .
12148	Add a new object to the buffer .
12149	Write stream to page
12150	Print a stream
12151	Add a new page to the document .
12152	Set the color scheme .
12153	Set default font
12154	Add a new page .
12155	Set the font size
12156	Add text to the PDF .
12157	Add a new line .
12158	Add a pie chart
12159	Output the pages .
12160	Return a list of all the orientation changes
12161	Output the fonts
12162	Output images .
12163	Output the XObject .
12164	Transform a matrix .
12165	Returns the absolute position of the current cursor at the given coordinates .
12166	Set the style .
12167	Rotate a point by its angle .
12168	Set information about an object .
12169	Set display mode .
12170	Closes the document .
12171	Put the PDF header .
12172	Print pages .
12173	Starts a resource dictionary .
12174	Print information about the product .
12175	Put the catalog
12176	Put the trailer
12177	Flatten a list of sequences with a given function .
12178	Iterate over a sequence yielding cycles .
12179	Generator for Gosper .
12180	Brent search
12181	Returns True if x is within the given length
12182	Returns True if y is within the given length
12183	Checks if this coordinate is greater than the given coordinate .
12184	Checks if the y coordinate is greater than the given value .
12185	Returns a copy of this cursor
12186	Increase the x - axis of the x - axis .
12187	Increase the y - axis by dy
12188	Render the table
12189	Create a new tag
12190	List all tags
12191	Retrieve labels by name .
12192	Updates a label
12193	Delete a tag
12194	Create a tagit
12195	List all tags
12196	Return a list of tags with the given label .
12197	Create a hook
12198	List all hooks
12199	Updates a hook
12200	Create an alert
12201	Gets alerts for the specified alert type .
12202	Updates an alert
12203	Sphinx extension .
12204	Returns the path to the themes directory
12205	Generic POST request .
12206	List all hosts
12207	Get log_set .
12208	Finds the tracker slacker slider .
12209	Return the duration of the ellipsoid .
12210	Updates the model parameters
12211	Compute the model parameters .
12212	Convenience method to calculate the binning parameters .
12213	Free memory usage .
12214	Receive data from socket .
12215	Yield lines from the buffer .
12216	Read data from the stream .
12217	Return status and message .
12218	Generate info .
12219	Return an info message
12220	Send a command to the server .
12221	Get capabilities .
12222	Set the mode of the server .
12223	Quit the server .
12224	Get the current date .
12225	Send HELP command .
12226	Generate new newsgroups .
12227	Generate new news lines
12228	Return list of news
12229	List active newsgroups .
12230	List active times .
12231	List news groups
12232	Generate list overview .
12233	List extensions .
12234	Return list generator
12235	Return a list of values
12236	Gets a group .
12237	Send NEXT command .
12238	Send an article .
12239	Send HEAD command .
12240	Get the message body .
12241	Show XGT title .
12242	Send XHDR command .
12243	Send XZHDR command .
12244	Generator for Xover .
12245	Generator for xpatcher .
12246	Return a list of patterns matching the pattern .
12247	Compress a compressed Xfeature file .
12248	Send a message to the server .
12249	Calculate offset from an integer value .
12250	Convert a value to a timestamp .
12251	Convert a value into a datetime object .
12252	Make a POST request .
12253	Make a DELETE request .
12254	Make a GET request .
12255	List scheduled queries .
12256	List all tags .
12257	Retrieve tags by name or id .
12258	Create an alert .
12259	Delete a tag
12260	Create a scheduled query
12261	Create an alert .
12262	Delete an alert
12263	Convert a range to a string .
12264	Parse newsgroup info
12265	Parse a line of text .
12266	Convert a dict of dicts to a string .
12267	Handles POST requests
12268	Run a list of tests .
12269	Generate a docstring from defaults .
12270	Add a default docstring to a function .
12271	Generate a docstring for this class .
12272	Set the value of the field .
12273	Check that the value is of the expected type .
12274	Returns the value of the variable
12275	Check if the value is a scalar .
12276	The symmetric error .
12277	Set errors .
12278	Set the parameter values .
12279	Import metrics from metrics
12280	Extract metrics from metrics
12281	Filter metrics by filter expression
12282	Send JSON to the API
12283	Evaluate an expression .
12284	A operator .
12285	Return an op_add operator .
12286	Initialize all required properties
12287	Returns a list of Parameter instances
12288	Return a numpy array of parameter values
12289	Return the errors of the model .
12290	Clears all derived parameters
12291	Setter for method
12292	Get environment variables .
12293	Returns the URL parameters .
12294	Perform a GET request
12295	Do a DELETE request
12296	Perform a POST request
12297	Perform a PUT request
12298	Call the API .
12299	Validate the scene info
12300	Verify the type product of a satellite
12301	Get the size of the remote file
12302	Download the scene .
12303	Validate a list of bands
12304	Connect to Earthexplorer
12305	Returns a function that starts with the given prefix .
12306	r Return the timezone name for the given zone .
12307	Normalize a datetime object .
12308	Join an iterable with a delimiter .
12309	Find all newlines in the given text .
12310	Convert a source to a source code .
12311	Dump results to stdout
12312	Filter the output of the relay .
12313	Load a fortune from a list of files .
12314	Set a chance from a list of files .
12315	Main entry point .
12316	Return a rule .
12317	Special handling special handling .
12318	Returns the grammar of the grammar .
12319	The rules of the grammar .
12320	The comments of the grammar .
12321	Returns a list of directives for this node .
12322	Return the compiled source code .
12323	Compile the file .
12324	Returns a string with the imports
12325	Returns the token types for the parser .
12326	Returns the class definition .
12327	Find the entry_point
12328	Return the definition of a rule .
12329	Returns the source code for the given rule .
12330	Return the string representation of a rule .
12331	Convert an expression to an ASN .
12332	Convert an AST node to an ASN .
12333	Take a list of operands and return a new list .
12334	Removes all grouping groups from optree .
12335	Convert AST node to code .
12336	Convert AST node to code .
12337	Convert an AST node to code .
12338	Return code for an option group .
12339	Convert an AST group to code .
12340	Convert a special handling special handling .
12341	Convert an operator to a code block .
12342	Convert an AST node into an opcode .
12343	Return the code for the exclude op .
12344	Convert an operator to code .
12345	Convert an AST instruction to code code .
12346	Find directives that satisfy predicate pred .
12347	Return True if the child of the parent is a parent .
12348	Yield directives from a comment .
12349	Handler for HTTP response .
12350	Returns a wx . id .
12351	Remove a hotkey .
12352	Add command line arguments .
12353	Configure logging .
12354	Validate the required arguments .
12355	Convert operators to postfix .
12356	Postfix a list of nodes .
12357	Reduce a list of nodes .
12358	Add command line arguments
12359	Load the plugin .
12360	Get a metric definition by name
12361	Returns the length of the columns and description of the table
12362	Calculate the width of each column in the table
12363	Replace underscores with underscores .
12364	Output field markdown fields .
12365	Output the markdown table .
12366	Generate markdown .
12367	Parses the input into a tree .
12368	Check if we have been consumed .
12369	Add arguments to the parser
12370	Parses a date and returns a datetime object
12371	Output data to CSV
12372	Output the results as a JSON string .
12373	Output a JSON string .
12374	Output the results to XML .
12375	Return True if node is empty
12376	Pretty print the tree .
12377	Create a function that returns a repetition function .
12378	Create a terminal node .
12379	Extract a repetition from the text .
12380	Call extractor .
12381	Count the leading whitespace in the given string .
12382	Call extractor .
12383	The position of the node .
12384	Return True if this node is empty .
12385	Add ignored items .
12386	Checks if the node is a type
12387	Return a copy of this node .
12388	Returns a copy of this node .
12389	Merge two ParseNode objects together .
12390	Return a copy of this node .
12391	Return a copy of this node .
12392	Return the current position .
12393	Return the maximum readed position .
12394	Go to the next character .
12395	Step to next line .
12396	Step to previous line .
12397	Return the last readed line .
12398	Increment the cursor position .
12399	Save current cursor position .
12400	Restores the current cursor .
12401	Return a string representation of the notification .
12402	Set the name of the symbol
12403	Count the number of variables .
12404	Count the number of functions .
12405	Updates the count
12406	Update this scope .
12407	Return the union of two symbols .
12408	Update the union with the given set of symbols .
12409	Return the intersection of two symbols .
12410	Remove all symbols that are not in the set .
12411	Returns a new scope with the difference of this scope .
12412	Update this set with the given set of symbols .
12413	Returns a new scipy .
12414	Add a new signature .
12415	Remove a signature from the set .
12416	Discard a signature .
12417	Return a list of all signatures of this scope .
12418	Returns the first signature .
12419	Returns the last signature .
12420	Return the value of a signature or default if not found .
12421	Find a scope by its name
12422	Get a signature by name .
12423	Returns a Scope that can be used to instantiate this function .
12424	Call injector
12425	Recursively normalize the given AST .
12426	Set a node from another node
12427	Return an iterator over the R values .
12428	Check if a hit is ok
12429	Return the signature for this function .
12430	Returns a list of valid types for this function
12431	Returns a list of resolved names for a type
12432	Set the resolved name of a type
12433	Delete a local file
12434	Delete a file from S3
12435	Delete an object from S3 .
12436	Save an object to a local file .
12437	Save object to S3
12438	Save object to file
12439	Find a bucket by path .
12440	Create an enum .
12441	Decorator to check the types of a function .
12442	Set a value for a thing
12443	Add a method to a class
12444	Decorator to register a hook .
12445	Decorator to register a rule
12446	Decorator to register a directive .
12447	Decorator for decorators .
12448	Bind a node to a rule .
12449	Read from the stream .
12450	Push the rules to the tree .
12451	Pops the last rule node .
12452	Return the value of a node
12453	Add a parsed stream .
12454	Begin a new tag .
12455	End a tag .
12456	Set rules .
12457	Set the hooks .
12458	Set the directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Peeks ahead the stream .
12462	Read one character from the stream .
12463	Read a character from the stream .
12464	Read until EOF .
12465	Ignore whitespace .
12466	Set the dtype of the cluster
12467	Set cluster dtype
12468	Ensures that the struct is compatible with the data .
12469	Add a ruleclause name
12470	Add rules to bnf
12471	Add a rule
12472	Add a sequence to the parser .
12473	Add an alternative .
12474	Adds a range to the given sequence .
12475	Add a rule to the sequence .
12476	Add a capture .
12477	Add a bind statement
12478	Add a hook to the sequence
12479	Set the value of a parameter
12480	Convert string to string
12481	Parse a character
12482	Set the node s value
12483	set the name of the hook
12484	Add parameter to hook
12485	Evaluate the grammar .
12486	Ignore Cxx comments .
12487	Add a state .
12488	Return a string representation of the graph .
12489	Save the graph to a DOT file .
12490	Save the graph as a PNG file .
12491	Return a string representation of the state .
12492	Return the next state
12493	Reset hanging state
12494	Infer block
12495	Infer a subexpr
12496	Infer the name of an identifier
12497	Infer a literal
12498	Dump all nodes
12499	Return a function definition for a parser rule .
12500	Return the exit scope .
12501	Return an empty statement .
12502	Return node s call node .
12503	Return a lambda expression .
12504	Return node as node .
12505	Return an ast . Expression node .
12506	Return AST node .
12507	Capture scope .
12508	Return AST node .
12509	Visit a Seq node .
12510	Visit a RepOptional node .
12511	Visit a Rep0N node .
12512	Visit a Rep1N node .
12513	Concatenate src with indentation .
12514	Set indentation of a list
12515	Convert a list to a string
12516	Echo a list of nodes
12517	Populate the next edge from a sequence .
12518	Populate an edge register from all sequences .
12519	Build state tree from list of Statements .
12520	Evaluate a pred value
12521	Build a Grammar from a string .
12522	Load a grammar from a file
12523	Parse an entry from a string .
12524	Parse a file
12525	set a node
12526	Set node as an integer value
12527	Get a subnode .
12528	Default serializer .
12529	Return a generator for all of the dependencies .
12530	Dump a deposition to a dict
12531	Return a generator of bibrec ids for a given date .
12532	Return a generator of ids from invenio2 .
12533	Imports the bibdocfile and returns it .
12534	Return a list of bibdocfiles
12535	Return a tuple of unique id and id .
12536	Check a BibDoc
12537	Dump token to a dict .
12538	List users .
12539	Dump user info to a dict
12540	List featured communities .
12541	Return a set of modified records for a given date .
12542	Return a list of modified records for a given date .
12543	Return a set of users restricted to the given collection .
12544	Get revisions for a given record .
12545	Get a list of collections for a record .
12546	Dump record to JSON .
12547	Return the number of modified records for a given date .
12548	Dump a record
12549	Return a dict representation of the RA .
12550	Load objects from database
12551	Return a dict of things .
12552	Initialize the application context .
12553	Memoize a function .
12554	Get the run_sql module .
12555	Return a dictionary of connected roles .
12556	Return list of actions
12557	Dump a token
12558	Load a token .
12559	Import a record
12560	Get import value from config file
12561	Dump an object to a dict .
12562	Return list of users from invenio .
12563	Retrieve users from invenio2 . 2 . 2 . 2 . 2 . 2 . 2 . 3 . 2 . 3 . 2 . 3 . 3 . 3 . 3 . 2 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 2 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3 . 3
12564	Dump a User instance
12565	Load a deposit
12566	Create a new record and return it .
12567	Load a record from a database .
12568	Load records from a JSON file .
12569	Inspect dump of dump records
12570	Load dump files .
12571	Load communities .
12572	Load a list of users .
12573	Load a deposit from a list of sources .
12574	Get profiler statistics .
12575	Entry point for profiling .
12576	Execute the profiling .
12577	Delete the profile .
12578	Deletes the resource .
12579	Get current status
12580	Decorator to disable timestamps .
12581	Load user from data .
12582	Calculate the translation for a list of images .
12583	Stitch a list of images into a single image .
12584	Adds a dimensions with ones to array .
12585	Create a new record
12586	Create a record
12587	Update a record
12588	Create persistent identifier for records .
12589	Delete a record
12590	Create files in record .
12591	Create a file in a bucket .
12592	Delete all buckets
12593	Returns a list of pids that are missing from this instance
12594	Prepare the revision list
12595	Prepare list of files
12596	Prepare the list of pids for the last revision
12597	Return whether the record is deleted or not .
12598	Load a community .
12599	Load a featured community .
12600	Dump a thing
12601	Check a thing .
12602	Delete the widget
12603	Return the magnitude of a vector .
12604	Normalize v .
12605	Transform the texture coordinates .
12606	Ensure that the skeleton is present in the dictionary .
12607	Set the length of the bone .
12608	Set the bone s parent .
12609	Calculate the pivot point
12610	Starts an animation
12611	Set the state of the game .
12612	Unset the current state
12613	Set the state of the bone .
12614	Disable the state of the bone .
12615	Ensure model data is cached .
12616	Redraw the canvas
12617	Render the model
12618	Set the model
12619	Write a toxml file to a file
12620	Convert a list of test reports into a test suite .
12621	Add a menu
12622	Redraw the label
12623	Redraw the label
12624	Render the canvas .
12625	Delete a widget
12626	Redraw the label
12627	Register event handlers .
12628	Register event handlers .
12629	Add a label .
12630	Add a button to the dialog .
12631	Exit the menu .
12632	Add a confirmation button .
12633	Add a button to the dialog .
12634	Updates the progress bar .
12635	Render the actor s actors .
12636	Render the world .
12637	Create a context manager for a step .
12638	Check if a resource exists
12639	add a category
12640	Returns the missing texture
12641	Get a model by name
12642	load a model
12643	Returns the model data for the given model name
12644	Loads the model data into a dictionary
12645	Add a widget
12646	Draws the submenu
12647	Redraw the canvas
12648	Redraw the scrollbar
12649	Checks if a mouse is inside a given area
12650	Returns the value of the distribution .
12651	add a layer
12652	Get region from buffer .
12653	Draw all the buffers
12654	Add a function to the actions list
12655	Execute action
12656	Register a new name .
12657	add a layer
12658	Render this widget .
12659	Delete this widget
12660	Wrapper for _border
12661	Offset the list by offset .
12662	Returns the size of the widget
12663	Read a mesh from a hdf5 file
12664	Make a connection matrix from the given shape .
12665	set fields
12666	Add multiple fields to the request .
12667	Checks that the elements are in the allowed types
12668	Return the space of all elements of this element .
12669	Calculate the centroids of the mesh .
12670	Calculate the angles of the molecule .
12671	Returns a pandas DataFrame of the edges of the mesh .
12672	Returns a pandas DataFrame with the stats for each cell
12673	Convert an element set to a node set
12674	Convert a node set to surface
12675	Convert surfaces to element sets
12676	Returns a pandas DataFrame with metadata
12677	Return a pandas Series containing metadata about the step .
12678	Creates directories if necessary .
12679	Run post - processing .
12680	Run the GMSH algorithm
12681	Read a history report
12682	Read a field report
12683	convert a list to a string
12684	Return an equation string .
12685	Return an unordered set of labels .
12686	Parse the response .
12687	Make a GET request
12688	Write an XYY report to a file .
12689	Write a field report
12690	List all available types
12691	Return error message for this field
12692	Check if an exception is raised by the descriptor
12693	Set the data .
12694	will get the axis mode for the current series
12695	sets the graph ploting options
12696	Create a class based on the given function and attributes .
12697	Cycle through datafeeds
12698	Convert a string value to a float .
12699	Convert a string to a number .
12700	Plot a graph
12701	Convert a string to unicode .
12702	Convert a raw HTML string to a clean list .
12703	Returns True if mime_type is a matching MIME type .
12704	Clean a domain name from a string .
12705	Returns a list of cut cuts for the domain .
12706	Generate a hash keyword .
12707	Collect words that are in the vocabulary .
12708	Index a stream item .
12709	Invert a hash .
12710	Get the document frequencies for the given hashes .
12711	Look up stream ids .
12712	Look up a TF table .
12713	Return a generator of items from a ProtoStream .
12714	Make a stream item from an entry .
12715	Create a ContentItem from a node .
12716	Read a varint from the stream .
12717	Read an A block
12718	Serialize a streamitem key .
12719	Convert a streamitem into a key and data .
12720	Change the working directory .
12721	Strip prefix from a string .
12722	Strip the suffix from a string .
12723	Check if needle is a subsequence .
12724	Example of Cube .
12725	Run wsgiref server .
12726	Closes the server .
12727	Decorator to register a route .
12728	Decorator to register an error handler .
12729	Return the content of a file
12730	Return a callback for the error page .
12731	Add a callback to the route .
12732	Resolve a route .
12733	Resolve a non - literal route .
12734	Normalize a pattern .
12735	Return the response body .
12736	Add a header .
12737	Set a cookie value .
12738	Return status line .
12739	The Content - Type header .
12740	Returns a list of values for the given key .
12741	Recursively delete a directory
12742	Get the list of open files
12743	Show file type statistics .
12744	Run a rejester run
12745	Try to fetch data from WGS3
12746	Returns a list of lines from a file
12747	Return a random adj species pair .
12748	Return a random adj species pair .
12749	Morph a sentence .
12750	Get similarity for a query pair .
12751	Execute hiragana query
12752	List entities .
12753	Calculate the shortsum for a given app
12754	List keywords .
12755	Get a list of datetime objects .
12756	Create a new scp_config .
12757	Initialize a list of stages .
12758	Initialize all stages
12759	Run the reader .
12760	Run the writers .
12761	Run an incremental transform on a stream
12762	Replace a streamcorpus config with the given name .
12763	Create a Flask application .
12764	Create a set of equiv ids from sentences .
12765	Return True if all target mentions are all of the chain mentions
12766	Check if any of the target mentions contain any of the chain mentions .
12767	Parse a rating against a list of tokens .
12768	Match a stream item .
12769	Create a ner_xml file
12770	Align a chunk to a chunk
12771	Terminate the child process .
12772	Multiply a p .
12773	Replace email addresses .
12774	generate strings identified as sentences
12775	make a sorted collection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to Unicode .
12778	Create a cleaned file from a list of files .
12779	Create a scanner file for a tagger .
12780	Convert a span to a string .
12781	Align a chunk to a chunk
12782	Make absolute paths to absolute paths .
12783	Instantiate a pipeline config
12784	Generate a Json - like chunk from a given path .
12785	Return a cleaned version of html .
12786	Convert a string to HTML .
12787	Create a clean_visible file from a list of chunks .
12788	Remove whitespace from a string .
12789	Main entry point for debugging .
12790	Try to load a stage
12791	Load an external package from the given path .
12792	Load stages from a module
12793	Initialize a stage by name .
12794	Read bytes from the index .
12795	Return True if href is valid .
12796	Creates a list of labels for the given offset .
12797	yield all file paths under input_dir
12798	Iterate over all tasks and yield data .
12799	Return a random keeper .
12800	Tokenize a sentence .
12801	Returns a list of sentences .
12802	Decorator for retry
12803	return True if OK raise Exception if not
12804	Get a bucket from a bucket .
12805	Decode data to streamitem .
12806	Extracts a chunk from a bucket .
12807	Convert stream_id to kvlayer key .
12808	Convert kvlayer key to stream id .
12809	Generate a key for a stream item .
12810	Main entry point .
12811	Build the argument parser .
12812	Add xpaths to stream item
12813	Convert a list of sentences to character tokens .
12814	Convert ASCII tokens to character offsets .
12815	Convert char_offsets to XpathRange
12816	Add an element to the document .
12817	Return the xpath part of the last element .
12818	Return the position of the text element .
12819	Iterate over all descendants of elem
12820	Select the elements of a source .
12821	Return a selector that matches the given XML_name .
12822	Select elements that match a pattern .
12823	Select an attribute from an XML source .
12824	Return the list of siblings following elem .
12825	Make a pretty representation of an XML tree .
12826	Call inkscape binary .
12827	Run inkscape export .
12828	Convert SVG to PDF .
12829	Convert an SVG file to PNG .
12830	Returns the environment for the given file path .
12831	Sets up the template file
12832	Fill a document with the given contents .
12833	Save the document content to a file .
12834	Create a document from a template file .
12835	Replace SVG files .
12836	Render the graph to a temporary file .
12837	Render the function as a PDF .
12838	Parses an XML file and returns a parser object .
12839	Parse an HTML document .
12840	Return HTML fragment from a Markdown string .
12841	Insert text .
12842	Insert node before node
12843	Create a clone of this node
12844	Run the benchmark .
12845	Return the XML value of a node .
12846	Insert a child .
12847	Parse config file
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create an event .
12851	Main entry point .
12852	Return the file extension .
12853	Add a file extension if needed .
12854	Get a temporary file .
12855	Remove all files from workdir
12856	convert csv to json
12857	Replace the content of a file
12858	Parse the HTML .
12859	Check if the next element is a link
12860	Create italic tag
12861	Create a strong tag .
12862	Create an underline under the given tag
12863	Parse the attributes of a tag .
12864	Clean line breaks .
12865	Parses url and returns query parameters
12866	Parse an attribute value .
12867	Translates a dictionary of translations to another .
12868	Returns a string representation of the object .
12869	Find all files in a folder
12870	Concatenate strings .
12871	Check if full starts with part .
12872	Check if a part contains a part .
12873	Return length of string
12874	Convert an object to a boolean
12875	Evaluate an expression in a sequence .
12876	Look up an item in a sequence .
12877	Replace characters in SVG code .
12878	Check if an svg file is a str or svg
12879	Merge two svg files .
12880	Merge multiple PDF files into one .
12881	Embeds a font to a svg file
12882	Embeds a font to a SVG file
12883	Check that the inputs are valid .
12884	Check if the function is callable
12885	Recurse through input and output
12886	Create a template from a jinja2 template
12887	Recursively walk through nested lists .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert obj to boolean
12891	Yield a string representation of a XPath tree .
12892	Changes the encoding of an XML file
12893	Save text into a QR Code .
12894	Launch an option
12895	Call a shell command .
12896	Convert a tex file to a PDF .
12897	Returns a list of all the options of the fusion
12898	Transform a geometry to a new spatial reference
12899	Create a GeoJSON object from a GeoJSON string .
12900	Expand the bounds of the current region .
12901	Intersect other with other .
12902	Determines if the intersection of this one intersecting the other .
12903	Returns a polygon representing the bounding box .
12904	Initialize from ZNM .
12905	Write data to a CSV file
12906	Select rows from the table
12907	Return the table at the given position
12908	Return a new table with the intersection of this table .
12909	Return a new table that is not in the given table
12910	Select rows that are odd or odd .
12911	Select rows that are odd .
12912	Select rows where each element is odd .
12913	Compute the error of the table
12914	Mean squared error .
12915	The binding energy .
12916	Equivalent to s2n .
12917	S1n
12918	Equivalent to s2p
12919	S1P
12920	Returns a table with the derived values derived from this table
12921	Decorator to use db session
12922	Derive a key from a master password .
12923	Bootstrap a new database .
12924	Search domain by name .
12925	Modify a domain .
12926	Create a new domain .
12927	Parse a HBS file
12928	Return the prefix for a virtualSI path .
12929	Returns the ID of the SID
12930	Main entry point .
12931	Initialize logging .
12932	Update a file
12933	Return a dictionary of driver names and metadata .
12934	Return a driver for the given path .
12935	Convert geom to numpy array
12936	Convert raster to raster
12937	Opens a raster
12938	Create raster from bytes
12939	Copy a raster
12940	List of DMD_CREATION options
12941	Create a raster
12942	Set the geometry of the dataset
12943	Read the data from the table .
12944	Envelope of the raster
12945	Returns an instance of the driver
12946	Create a new raster
12947	Creates a masked array with the given geometry .
12948	Returns the noData value of the data
12949	Read raster data .
12950	Resample the image to a new size .
12951	Save the image to disk
12952	Set the projection
12953	Warp this raster to a spatial reference
12954	Calculate the chunklen for the given alph_len
12955	Lookup an alphabet from a character set .
12956	Encode a chunk .
12957	Convert a chunk to a long integer .
12958	Get a chunk from a chunk
12959	Decorator for memoization .
12960	Return a compiled regexp for filename
12961	Normalize a date format to a datetime object .
12962	Detect the default timezone .
12963	Convert this object to a dictionary
12964	Activate the post_mortem hook .
12965	Pretty - print an object
12966	Coroutine to handle jobs .
12967	The main worker .
12968	Run a worker pool .
12969	Sets the classification of this Product .
12970	Send a message to the queue .
12971	Turn on a light .
12972	Turn on switch .
12973	Turn on a device .
12974	Turn off a device .
12975	Send messages from the queue .
12976	Send a message to LLink
12977	Create an adapter from an object .
12978	Sets the nature of this Experiment .
12979	Updates self . options from a dictionary
12980	Reset all options to defaults
12981	Set the list of config files .
12982	Iterate over all options
12983	Yield the default values for all options
12984	Create a config file
12985	Updates configuration values
12986	Read configuration from a TOML file .
12987	Read all config files
12988	Return a list of options for the given option .
12989	Return a list of sections
12990	Solve options for a command
12991	Add options to parser
12992	Build an argument parser .
12993	Parse command line options .
12994	Generate a ZSH comp command
12995	Write a command to a zsh file
12996	Return a list of shell commands for the given command .
12997	Generate a bash completion
12998	Start a new master server .
12999	Called when a new connection is established .
13000	Called when a line is received .
13001	Called when a connection is lost .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close the queue .
13005	Run a list of jobs .
13006	Closes the server .
13007	Change the state of the queue .
13008	Add a new result .
13009	Wait for the request to complete .
13010	Load next job .
13011	Called when the job has completed .
13012	Add a result to the queue .
13013	Cancel all active jobs .
13014	Wait for all active jobs .
13015	Distribute the jobs .
13016	Add a list of jobs to the queue .
13017	Get a job from the queue .
13018	Add a job to the queue .
13019	Add a result .
13020	Called when a job set is done .
13021	Closes the session .
13022	Uniquify a list .
13023	Recursively match a regular expression .
13024	Return a list of cached entries .
13025	Get the current EC2 region
13026	Filter entries according to filters .
13027	Get details about a host
13028	Create an instance from a dictionary .
13029	Return the value of an attribute .
13030	Sort entries by attribute .
13031	Return a string representation of the table .
13032	Create an instance from a boto instance .
13033	Returns True if the element matches the filter .
13034	Return a string representation of the address .
13035	Render a list of table entries .
13036	Add the timestamp to the event dictionary .
13037	Setup a logger .
13038	Create a structlog logger
13039	Setup Celery app
13040	Get information about a specific worker
13041	Delete a job
13042	Define a switch option
13043	Return an OrderedDict of configuration options .
13044	Convert a list of options to string
13045	Command line handler .
13046	Create zsh completion files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Ensure all columns are empty .
13051	Generate a color function .
13052	Get a color from a string .
13053	Return a random color .
13054	Prompt the user for input .
13055	Check username and password .
13056	Check if token is valid
13057	Decorator to require a user authentication token .
13058	Check if a process is running .
13059	Dynamically import a module
13060	Get the user s IP address
13061	Make a request to the API .
13062	Prepare POST parameters .
13063	Serve up the server .
13064	Render the template with the given attributes .
13065	Run a command .
13066	Stream a list of dictionaries .
13067	Stream a list of commands .
13068	Return the number of days between two dates .
13069	Get the path to a command
13070	Build ssh command .
13071	Build SCP command .
13072	Copy entries to local_path
13073	Copy a list of entries to remote_path .
13074	Run an ssh command on a list of hosts
13075	Connect to an entry
13076	Load a profile .
13077	Create a LSI profile from the given arguments .
13078	Add a relationship to this part .
13079	Return a list of all the related parts of this node .
13080	Load relationships from a model
13081	Add a part to the document .
13082	Load a part by name .
13083	Find the extension for the given name .
13084	given an element parse out the proper ContentType
13085	Parses a string and returns a list of Chatl objects .
13086	Builds a JWT .
13087	Assign a force field to a force field .
13088	Find the maximum radius and NPNP
13089	Return a dict of force field parameters .
13090	Return the current state as a bytes stream .
13091	Yields all segments that match the given name .
13092	Copy a directory .
13093	Opens a bucket .
13094	Uploads a directory to S3
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all files in a directory .
13098	Return a list of directories in the bucket .
13099	Create bucket prefix .
13100	Delete a file
13101	Ensure that the user is authenticated .
13102	Returns a human - readable version of the object .
13103	Delete a directory
13104	Return the URL for the home URL .
13105	Decorator to silence label without namespace
13106	Display a breadcrumb for b3 .
13107	Generate a breadcrumb for a project .
13108	Calculate the interaction energy of an AMPAL object .
13109	Calculate the internal energy of an AMPAL object .
13110	Return a sorted list of histograms .
13111	Get a token from the Keeper server
13112	Upload a ltd file .
13113	Determine if the upload should be skipped .
13114	Purge a surrogate key .
13115	Register a build .
13116	Confirm the build
13117	Recursively updates a dictionary with a mapping .
13118	Main entry point for ldconveyor .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split a path into a list of directories .
13122	Find a file by path .
13123	Get editor for filepath .
13124	Process a module node
13125	Generate a chart
13126	Generate HTML for a chart .
13127	Serialize data to a chart
13128	Takes a json string and converts it to json
13129	Convert json data to HTML .
13130	Convert dict to pandas DataFrame
13131	Write html to folder
13132	Return a chart object for the given type
13133	Encode a list of fields
13134	Link a GitHub user role .
13135	Infer the url of the app .
13136	Create an app .
13137	Delete an app .
13138	Decorator to iterate over an iterable .
13139	Generate a binary string .
13140	Generate a random IP address .
13141	Generate a random date .
13142	Creates a session
13143	Make a request to Heroku .
13144	Create a build .
13145	Check the status of a build
13146	Generate a sequence with the given prefix .
13147	Decorator for memoization .
13148	Decorate a function with the same arguments .
13149	Register the sub - commands to the given parser .
13150	Return the root arg parser
13151	Returns the description of the class .
13152	Returns the help string
13153	Run the sub - command .
13154	Encodes an array or list of strings
13155	Returns a pandas DataFrame containing all the deleted entries .
13156	Returns the last n last n times .
13157	Request activity list .
13158	Request activity data from athlete .
13159	Returns the URL for the athlete .
13160	Returns the URL for the activity for the given athlete and filename .
13161	Send a GET request to the given endpoint .
13162	Create a build .
13163	Creates a URL with the given view .
13164	Get a random title .
13165	Generate a random person .
13166	Get the last name of the last name .
13167	Render the chart .
13168	Setter for the dataset
13169	Render the chart
13170	Check the type of the chart
13171	Return the URL for this query .
13172	Open the browser .
13173	Save the image to a file .
13174	Open the URL to the server .
13175	Return an image
13176	Write URL to file .
13177	Return the checksum of the file .
13178	Return a number of random numbers .
13179	Decorator to add a class name to a class .
13180	Return the list of unprotected and protected claims .
13181	Return a list of signing keys
13182	Unpack a metadata statement
13183	Pack a metadata statement .
13184	Evaluate metadata statement
13185	Ensure that the given metadata is consistent with the given Federation usage .
13186	Extend metadata_statement_uris .
13187	Parse command line arguments .
13188	Add command line arguments to the arg parser .
13189	Applies logging options to log files .
13190	Log msg with verbose .
13191	Return a dictionary mapping letters to letters .
13192	Yield anagrams in a word
13193	Return the class name of the class .
13194	Transform timeseries data into series data .
13195	Get the last value from a timeseries
13196	Validate page number .
13197	Get a page of items from an iterator .
13198	Change the mode of a file
13199	Create an internal signing service .
13200	Create a new signing service .
13201	Sign a request .
13202	Create a user
13203	Update metadata statement
13204	Updates signature
13205	Yield bundle contents
13206	Create a bundle from a dict
13207	Returns a list of urls for the given asset type .
13208	Return HTML tags for the given asset type .
13209	Return HTML tags for all asset types .
13210	Convert URL to HTTP URL
13211	Find all links in url
13212	Connect to AMP server .
13213	Return list of modules .
13214	Import modules .
13215	Convert a string into a date range .
13216	Returns a copy of the document with the given list of fields .
13217	Applies a date map to a document .
13218	Print the results of the query .
13219	Print the current cursor to the database .
13220	Given a list of tasks return a list of tasks .
13221	Add default departments
13222	Add all default atypes to a project
13223	Add default sequences
13224	Add a user rnd shot
13225	Called when a project is saved .
13226	Create a new shot
13227	Create all tasks for the given element
13228	Pre - connect to a peer .
13229	Send a packet to a peer
13230	Gets a config value from the given section .
13231	Decorator to add a function to nova .
13232	Decorator to register a function as a Cinder .
13233	Decorator to add a function to the neutron customer process
13234	Decorator to register a glance customer .
13235	Decorator to add a function to the swift customer process
13236	Decorator to add a function to a keystone customer process
13237	Decorator to add a heat event to a heat request
13238	Add a new factory .
13239	Remove a factory from the pool .
13240	Connect to the server .
13241	Called when data is received .
13242	Disconnect a protocol from the pool .
13243	Call a remote command .
13244	Create a new AMP connection .
13245	Called when a connection is made .
13246	Called when data is received .
13247	Send data to the server .
13248	Called when the protocol is lost .
13249	Returns the protocol for the given connection identifier .
13250	Called when a remote connection is received .
13251	Disconnect from a connection
13252	Return a centered string centered on a string .
13253	Prints a string on the right of the terminal
13254	Return a string representation of a version number .
13255	Identify the unit framework for the given target unit .
13256	Assert that value is convertible to target_unit .
13257	Pads data to block_size
13258	Unpadding a padded data block .
13259	Sign a message .
13260	Gather the metadata statements for the given fos
13261	Pretty print anagram .
13262	Argument parser .
13263	Print anagrams in a wordlist .
13264	Called when data is received .
13265	Called when an unregistered type is unregistered .
13266	Create a _RPCFunction stub from a URL .
13267	Ping a peer
13268	Return a regex for this command .
13269	Create an array from a string .
13270	Convert this array to a string .
13271	Verify that a metadata statement is valid .
13272	Parses the response and returns the response
13273	Dump data to a file
13274	returns a list of all databases on this server
13275	Get a dictionary of local files for a given path .
13276	Synchronize a folder to S3
13277	Decorator for views that require user_tokens
13278	View function for login .
13279	Build a python package
13280	Return a read - only object .
13281	Load json from file
13282	Generate a JWT .
13283	Create a JWT signed by signing keys .
13284	Decorator to register a library function .
13285	Recursively recover modules from a directory
13286	Main entry point for tests .
13287	Return the score of a letter .
13288	Returns the score of a word
13289	Yield word lists .
13290	Checks if a word is a valid SCrabble word
13291	main entry point
13292	CLI entry point
13293	Called when a string is received .
13294	Get command and responder function .
13295	Parse request arguments .
13296	Run the responder .
13297	Write a response to the transport .
13298	Called when a connection is lost .
13299	Build JSONAMLialectReceiver .
13300	Convert a JWKS object to a KeyJar
13301	Load a KeyJar from a JSON string .
13302	Process an event .
13303	Process a Cinder customer request .
13304	Process a neutron customer request .
13305	Process a glance customer .
13306	Process the swift customer process .
13307	Process a customer request .
13308	Processes an event .
13309	Start the application .
13310	Print msg to stdout .
13311	Print msg to stderr .
13312	Register a command class .
13313	Register a Command subclass .
13314	Convert the value to a string .
13315	Create a Value from a string .
13316	Update completer dictionary .
13317	Initiate the connection
13318	Init the mq connection
13319	Import service modules .
13320	Initialize the mq consumer
13321	Init cinder consumer
13322	Initialize neutron messages
13323	Initialize glance consumer
13324	Initialize the heat consumer
13325	Enable the given Openstack component .
13326	Get information about a music song
13327	download a song
13328	Execute instructions .
13329	Load a name by name .
13330	call a function
13331	dump a MySQL database
13332	Render a ditaa file
13333	Called when the application exits .
13334	Run the application .
13335	Change the current working directory .
13336	Recursively copy a directory .
13337	Start the debugger .
13338	Get the mtime of a file
13339	Check if the item has changed .
13340	Synchronize the database
13341	Clears all files
13342	Scrape a website .
13343	Downloads the image
13344	Check if the image has changed .
13345	Returns a template subclass .
13346	Find the caller line number
13347	Gets the defining component of a PE .
13348	Main entry point for ooaofooa
13349	Find a symbol by name and kind .
13350	Check if the PE is contained in the given root .
13351	Check if the PE is global
13352	Returns the data type name for a given type
13353	Gets related attributes for a rgo relationship .
13354	Makes a namedtuple .
13355	Create a function for the bridge
13356	Create a namedtuple from an external entity
13357	Create a function for the given sync model
13358	Makes constant .
13359	Create an operation method .
13360	Create a derived attribute property .
13361	Create the metaclass for the given object
13362	Make a simple association .
13363	Make linked association .
13364	Create an association for a relationship .
13365	Create a component from a model
13366	Run a single RPC call .
13367	Send an accept message .
13368	Reject a message .
13369	Send a raise message to the given socket .
13370	Calls the given arguments and returns the response .
13371	Establish results for a given call .
13372	Dispatch a reply .
13373	Guess the type name for the given value .
13374	Convert a value to an integer
13375	r \ \
13376	r
13377	Get a feature by id
13378	Get a list of documents from the index .
13379	Add items to the store
13380	Delete a document
13381	Delete all documents
13382	Delete the index
13383	Yield documents from the cache .
13384	Yield a list of ids for the given keys .
13385	Iterate over a prefix .
13386	Iterate over prefix ids for prefix .
13387	Perform fulltext scan .
13388	Iterate over fulltext scan ids .
13389	Yield keywords for a query .
13390	Return a list of ids for all keywords in the query .
13391	Yield scan ids
13392	Convert a list of feature names to a list of feature names .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Return the total number of features in a dictionary
13400	Count the number of hits in the cache .
13401	Return a string representation of a FeatureCounter .
13402	Process command line options .
13403	Default formatter .
13404	Convert an instance to a Link
13405	Return a string representation of an identifier .
13406	Check for uniqueness constraint .
13407	check integrity of a link
13408	Check the integrity of a subtype
13409	Return a function to index a list of feature names .
13410	Convert a value to UTF - 8 .
13411	Put items into the queue .
13412	Delete all data from the store .
13413	Scan the contents of the given key ranges .
13414	Return an iterator over the ids in the table .
13415	Iterate over the values of an index .
13416	Searches for the given prefix with the given prefix .
13417	Return the key value for the given prefix .
13418	Implementation of scan_key_scan .
13419	Define an index .
13420	Stores given ids and fcs .
13421	Put a value to the index .
13422	Generate indexes for given ids .
13423	Return the index with the given name .
13424	Check if pypi package name is valid .
13425	Add a language to a language .
13426	Get the type name of a type
13427	Returns the referenced attribute
13428	Build the core type for the given cdt
13429	Parses an enum element
13430	Builds the XML representation of a complex type .
13431	Build user type .
13432	Build the type for a given datatype
13433	Builds a class from an object
13434	Build a composite component .
13435	Build an XML Schema from a METS element .
13436	Pretty - print an XML string .
13437	Fetches banned likes .
13438	Set the position of the node .
13439	Decorator to track the production of a function .
13440	r
13441	r
13442	r
13443	r
13444	r
13445	r
13446	r \ .
13447	r \
13448	r
13449	r
13450	r
13451	r
13452	r \ + +
13453	Create a queue
13454	Delete a queue
13455	List all queues
13456	List all exchanges
13457	Purge a queue
13458	Create a message
13459	Reads the contents of the image .
13460	Check if the document is visible .
13461	Main function .
13462	Serialize a value to a string
13463	Serialize an association .
13464	Return a string representation of a class .
13465	Main entry point
13466	search for a query
13467	Partition a collection .
13468	Main entry point .
13469	Add bidirectional context to the request context
13470	Find a link between two instances .
13471	Return a reference to the target class .
13472	Compute the lookup key for the given instance .
13473	Compute the index key for the given to_instance .
13474	Return the type of an attribute
13475	Creates a new instance of this instance .
13476	Iterate over all metaclasses
13477	Define a new meta class
13478	Send a ZMQ message .
13479	Receive messages from a ZMQ socket .
13480	Print dead code .
13481	Parse email addresses .
13482	Decorator for rpc decorator .
13483	Generate a table of RPC specification for an application .
13484	Normalize postcode .
13485	Returns the next value .
13486	Accepts a S_SYG .
13487	Accept C_C .
13488	Accept an ep_PKG .
13489	Returns the average brightness of the image
13490	Match pattern .
13491	Find a matching position .
13492	Creates a new selection for the character at the given position .
13493	Called when the cursor position is changed .
13494	Returns a tuple of tuples for the exception .
13495	Create an input hook for Qt4 .
13496	Get a mapper by name .
13497	Decorator to register a function .
13498	Decorator to register a function as a URL .
13499	Add a new rule .
13500	Add a function to the pool .
13501	Calls the data store .
13502	Execute the widget .
13503	Called when the user is pressed .
13504	Check if the cursor is pressed .
13505	Go to previous .
13506	Go to the next line .
13507	Process a reply message .
13508	Check if the history lock is locked .
13509	Return the history for the given index .
13510	Initialize the history .
13511	Stores the current input buffer .
13512	Event handler for TimeToClose
13513	Build the Record Collection from a DataFrame
13514	Convert a collection to pandas DataFrame .
13515	Takes a DataFrame and returns a DataFrame .
13516	Set the attributes of the object .
13517	Subscribe to the stream
13518	Log a message .
13519	Merges a list of lists .
13520	Iterate over remote objects
13521	Convert a notebook to a new one
13522	Return the platform name for the current platform .
13523	Get the importer for the given path item .
13524	A wrapper for cStringIO .
13525	Parse a version string .
13526	Check if the setuptools requirements are overridden .
13527	Add distribution to distribution .
13528	Find all installed plugins .
13529	Get the path to a cache file .
13530	Parse an entry point from an entry point string .
13531	Return the parsed package info .
13532	Compute dependencies for this package .
13533	Parse filename .
13534	Collapse leading whitespace .
13535	Reimplement the hide event handler .
13536	Connect to the completion widget .
13537	Return current text cursor
13538	Updates the current item
13539	Register admin site .
13540	Return a list of disk partitions
13541	Return a tuple of cpu and idle cpu times .
13542	Return a list of tuples representing the system per cpu .
13543	Wrapper for stdin .
13544	Read block from stdin .
13545	Updates the visibility of the tab bar
13546	Create a new tab with the current kernel
13547	Add a new tab with a frontend
13548	Adds a menu action to the given menu
13549	Create a dynamic magic function .
13550	Populate all the magic menu
13551	Called when the user is closed .
13552	Generate password
13553	Check if the passphrase matches the given passphrase .
13554	Render a boolean cell for an item
13555	Return indented short title .
13556	Collects a list of booleans for each item in the list
13557	Toggles a boolean value
13558	Check if the user has a change permission
13559	Returns whether the user can delete the object .
13560	Recursively add children to graph .
13561	Make a bintree .
13562	Submit a set of jobs .
13563	Validate a tree .
13564	Make a color table from a class .
13565	Returns a copy of this color scheme .
13566	Add a color scheme to the table .
13567	Set the active color scheme .
13568	Return the path to the library s library path .
13569	Process the iubub channel
13570	handles incoming request
13571	Wait for kernel to finish .
13572	Set the style .
13573	Get the format for a token .
13574	Get the format from the document .
13575	Returns a QTextCharFormat instance for the given token .
13576	Find command in PATH .
13577	Normalize a path .
13578	Ensure that the namespaces are declared in the distribution .
13579	Validate entry points .
13580	Check if the last blank line is blank
13581	Checks if the last two blank lines are present .
13582	Transform an assignment system to an IPython line .
13583	Transforms an assignment magic to a new IPython .
13584	Transform a line of text into a classic prompt .
13585	Transform an IPython prompt .
13586	Push lines into the interpreter .
13587	Determine if the push feed can be consumed .
13588	Find indentation and full dedent .
13589	Store the given lines into the buffer .
13590	Return the raw source data .
13591	Process cell magic .
13592	Append lines to cell mode .
13593	Transform a cell .
13594	Push lines to IPython input .
13595	Initialize all observers .
13596	Post a notification .
13597	Return a set of all observers for a specific notification
13598	Add an observer for a ntype
13599	Add a new job .
13600	Update the status of the job .
13601	Print a group report
13602	Flushes a group to a group .
13603	Return the status of the job .
13604	Display the status of the container
13605	Initialize the background
13606	Insert a value at the given index .
13607	Returns a deep copy of the file .
13608	Declare a special variable .
13609	Add a list variable .
13610	Add a set variable .
13611	Set the current working directory .
13612	Moves the lock to the given state
13613	Calculate the energy of a state
13614	Return a dict with default values .
13615	Check that the table has the correct types .
13616	Convert list to dict .
13617	Render a check .
13618	Print a warning and exit .
13619	Parse a YAML config file .
13620	Create a table from a list of rows .
13621	Create a link
13622	Return HTML for a JavaScript file
13623	Render a css file
13624	Generate an html image
13625	Subtract value from value
13626	Multiply a value by an argument .
13627	Divide value with arg .
13628	Modify value by arg .
13629	Return the verbose name of the model .
13630	Split a line of input into an ASCII string .
13631	Add options for the test runner .
13632	Add a builtin function .
13633	Remove a builtin function .
13634	Remove all builtin functions .
13635	Find the real name of a requirement .
13636	Iterate over all links of the document .
13637	Convert a string to a list of shells .
13638	Entry point for the coverage script .
13639	Add action to dash .
13640	Append action code to parser .
13641	Parse command line arguments .
13642	Print help information .
13643	Handles help
13644	Check if the arguments are valid
13645	Execute python code
13646	Print debug information .
13647	Unserialize an object .
13648	Set the display hook .
13649	Log uncaught exceptions .
13650	Check if given URL is a valid URL .
13651	Validate URL .
13652	Validate a container .
13653	Pull values from global namespace .
13654	Select random ports
13655	Decorator to register a view function
13656	Decorator for parallelization .
13657	Applies a sequence of sequences .
13658	Return the last n items
13659	Set auto - indent flag .
13660	Initialize logging .
13661	Save sys module state
13662	Restore sys module state .
13663	Register a post - execute function .
13664	Return a new main module
13665	Cache the main mod .
13666	Initialize user namespace
13667	Return a list of all namespace names for this module .
13668	Reset the session
13669	Delete a variable
13670	Reset all variables that match regex
13671	Push variables to the stack
13672	Look up the name of an object .
13673	Recursively find a property
13674	Find an object by name
13675	Inspect an object
13676	Initialize history manager
13677	Wrapper for showtraceback .
13678	Show a traceback .
13679	Print a traceback .
13680	Show a SyntaxError .
13681	Prepare the readline .
13682	Autocomplete for text .
13683	Sets a custom completer .
13684	Set current completer frame .
13685	Run a line magic function .
13686	Find a magic object by name .
13687	Define a macro .
13688	Execute a command on the terminal .
13689	Rewrite the input .
13690	Return a dictionary of user variables
13691	Return a dictionary of expressions .
13692	Eval expression .
13693	Safely execute a file
13694	Runs a cached cell magic .
13695	Run a single cell .
13696	Run the given ast .
13697	Enable a Pylab backend
13698	Expand the variables in the current context .
13699	Create a temporary file
13700	Extracts the given range from the history
13701	Try to find user code .
13702	End the session .
13703	Publish a message to the client .
13704	Send a message to a target .
13705	Decorator to skip a test if skip_condition is True .
13706	Decorator that registers a function as a known failure .
13707	Mark a function as deprecated .
13708	List all profiles in a directory
13709	List all bundled profiles
13710	Find distribution by requirement .
13711	Run a child process .
13712	Tries to find the location of the specified file
13713	Returns the next line .
13714	Send a string to the child process .
13715	Sends an integer .
13716	Recompile unicode regexes as bytes regexes . Overridden in subclass . Overridden in subclass . Overridden in subclass .
13717	Expect a pattern .
13718	Search for a searcher .
13719	Recompile bytes regexes as unicode regexes .
13720	Search the buffer for a buffer .
13721	Search the buffer .
13722	Create a listener function that logs a progress monitor .
13723	Unpack a directory .
13724	Print msg to stdout .
13725	Return the last error
13726	Execute a command
13727	Find the source for the given filename .
13728	Returns the list of arcs executed
13729	Return a list of arcs that are missing .
13730	Returns a list of unpredicted arcs .
13731	Return lines of branch lines .
13732	Return the total number of branches
13733	Return a dictionary of missing branch arcs .
13734	Return information about the branch lines .
13735	Set the precision of the metric .
13736	Calculates the percentage of percent coverage .
13737	Return a string representation of the number of pixels covered by this point .
13738	Highlight the given needles .
13739	Highlight a string .
13740	Highlight keywords .
13741	Run a function in the context .
13742	Removes quotes from a string .
13743	Indent a string
13744	Return a marquee .
13745	format a screen
13746	Recursively dedent a string .
13747	Wrap paragraphs into ncols .
13748	Find optimal number of rows .
13749	Return the value of the item i .
13750	Compute an item matrix .
13751	Return a list of SList objects
13752	Build kernel arguments .
13753	Set up the ssh connection
13754	Pretty - print an object
13755	Pretty print an object
13756	Get the mro of an object .
13757	Default printer .
13758	Create a pprinter for a sequence .
13759	Create a pprinter for a dict .
13760	Print the super class
13761	Print a compiled regex pattern .
13762	Print type information .
13763	Print function information .
13764	Pretty print an exception .
13765	Add a function to the given type .
13766	Register a function for a type by name .
13767	Adds an object to the output buffer .
13768	Make a breakable .
13769	End a group .
13770	Flush the buffer .
13771	Pretty print an object .
13772	Return a set of terminal colors .
13773	Writes a row into an ods file
13774	Get the current text from the clipboard
13775	Get the text of the OSX clipboard .
13776	Get text from the clipboard .
13777	Return the prefix to use for building the build .
13778	Rekey - key - value pairs
13779	Recursively extract dates from an object
13780	Recursively squash datetime objects
13781	Convert an object to a string .
13782	Convert an object to JSON .
13783	Check if the install directory is valid .
13784	Write a script to the install directory .
13785	a helper function for sleep
13786	Create a parser for this command .
13787	convert . pyx extensions to c
13788	Main entry point for a connection
13789	Build a PackageFinder instance .
13790	Handle logging level changes .
13791	Create a default logger .
13792	Called when a flag has changed .
13793	Print help for aliases .
13794	Print help for all flags .
13795	Print the subcommands .
13796	Print help text .
13797	Print examples .
13798	Update self . config with new values
13799	Initialize the subcommands
13800	Flatten flags .
13801	Parse command line arguments .
13802	Load a config file
13803	Generate the configuration file .
13804	Downsample an array .
13805	Format a list of tuples .
13806	Write a message to stdout .
13807	Called when a config has changed .
13808	Return the help text for a class
13809	Return the documentation for a trait .
13810	Generate a configuration section for a class .
13811	Clear all instances of cls .
13812	Create an instance of this class .
13813	Formats a test failure .
13814	Low level crash handler .
13815	Flush the channel .
13816	Emits the started channels .
13817	Read data from a file - like object .
13818	Read data without EINTR .
13819	Run a process callback .
13820	Split a string into a list of tokens .
13821	Compress a DHist
13822	Register magics class
13823	Add a function to a dictionary .
13824	Create a marker for a method .
13825	Mark a function as a function .
13826	Returns a dictionary with the documentation for all magics .
13827	Register MagIC objects .
13828	Register a function .
13829	Convert a string to LaTeX .
13830	Parse command line options .
13831	Add a default option
13832	Display a GUI reference
13833	Create a task with the given callable .
13834	Return the task info with the given label
13835	Return the callable object for this task .
13836	Calculate the next run
13837	Submit this task .
13838	Run the task .
13839	Run asap .
13840	Run a task with the given arguments .
13841	Run a callable once .
13842	Find the URL for the security group .
13843	Create an IPython kernel
13844	Read test files .
13845	Create an interrupt event .
13846	Main thread .
13847	Filter a namespace by name .
13848	Return a list of objects matching the specified pattern .
13849	Check that mutex options are mutually exclusive .
13850	Draw the figure if interactive .
13851	Flushes all the figures to the display .
13852	Send a figure to IPython
13853	Load an extension .
13854	Unload an extension
13855	Generate random ports
13856	Initialize the notebook server .
13857	Handle SIGINT signal .
13858	Confirm to exit
13859	Cleanup kernel resources
13860	Generate stock price options .
13861	Replace multiple occurrences of dict with multiple values .
13862	Render the template
13863	Base launch kernel .
13864	Create a zipfile
13865	Fix version in metadata . txt
13866	return true if obj is mappable
13867	Get a partition from a sequence
13868	Monkey patch pexpect
13869	Runs a file from a file
13870	Run the given source .
13871	Generate coverage report .
13872	Generate XML file for the given cu .
13873	Fetch a PPI file
13874	Reduce a list of frequencies
13875	Compute the n - digit frequency frequency of a file .
13876	Convert a text file to digits .
13877	Convert a list of digits to frequency
13878	Generate frequency frequencies from a list of digits .
13879	Calculates the frequency of a given number of digits .
13880	Plot two digit frequencies .
13881	Plot one digit frequency in pi
13882	Print a debug message
13883	Reverse urlresolvers .
13884	Return True if base is private False otherwise .
13885	Create a TestSuite test suite .
13886	Debugging function .
13887	Debug a test script . src as a string .
13888	Print a test script for a module .
13889	Return a dict of all hashes in hashroot .
13890	Compress h5 files
13891	Return a list of all keys in the directory .
13892	Checks if the given record should be allowed .
13893	Returns True if a record matches any of the given records .
13894	Format an error .
13895	Start an interactive shell .
13896	The main loop .
13897	Create new csv and meta_csv
13898	Prepare the locale directories for the given languages .
13899	Write list of POEntry objects to po files .
13900	Write a header to a po file
13901	Subscribe to a user .
13902	Initialize the parser
13903	Load a python module
13904	Run a python file .
13905	Create a Python code object from a python file .
13906	Make a Python code from a . pyc file .
13907	Convert an item_matrix into an HTML table .
13908	Set the current value .
13909	Cancel completion .
13910	Select the completion
13911	Select the tree up .
13912	Select the tree down .
13913	Select the rectangle .
13914	Select the right column .
13915	Updates the list
13916	Returns a dictionary of word frequency .
13917	Print the word frequency .
13918	Return a string representation of the document .
13919	write to file
13920	Validate a digital pin
13921	Send a shared pin .
13922	Delete a shared pin .
13923	Send a pin to a user .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List all subscribed topics .
13927	Decorator to monitor a function .
13928	Initialize the progress bar .
13929	A context manager to run a task .
13930	Create a subtask with the given units .
13931	Updates the progress .
13932	Create a new progress monitor .
13933	Set the units of the work .
13934	Display a HTML page
13935	Makes sure that the package is correct .
13936	Load a list of python files .
13937	Load the configuration from disk
13938	Read config file as dict
13939	Load a flag
13940	Decode arguments to unicode .
13941	Load config from argv .
13942	Load configuration from argv .
13943	Parse arguments .
13944	Convert the config to a config object .
13945	Find a module by name .
13946	Add a callback to stop
13947	Called when the process is started .
13948	Called when the process is stopped .
13949	Interrupt with SIGINT
13950	Find command arguments .
13951	Initialize the particle
13952	send a file to the remote
13953	Fetch a file from remote
13954	Return the number of available engines .
13955	Start the engines
13956	Start a new winhpc job
13957	Return default context
13958	Parses the output of the job .
13959	Write a batch script to disk
13960	Start the batch
13961	Create the context menu
13962	Append a jpg to the display .
13963	Append a PNG image .
13964	Append an svg to the list .
13965	Adds an image to the editor .
13966	Copies an image
13967	Return the image with the given name .
13968	Insert an image into the cursor .
13969	Insert an SVG into the cursor .
13970	Save an image
13971	Called when the agent has changed .
13972	Initialize the environment
13973	Rewrite the input .
13974	Mark the shell as exit .
13975	Set the next input
13976	Read a config file .
13977	Get a list of values from a section .
13978	Get a list of values from a section .
13979	Determine whether or not the environment variables are prepared .
13980	Set values from keyword arguments .
13981	Read config files from a file .
13982	Set the value of an attribute from a config file
13983	Recursively expand a path .
13984	Set the delimiter .
13985	Split a line .
13986	Return a list of all keywords that match the given string .
13987	Return a list of matches for an attribute .
13988	Called when the line is changed .
13989	Return a list of file matches .
13990	Return a list of aliases that match the given text .
13991	Return a list of matches .
13992	Return the default arguments for an object .
13993	Completes the completions .
13994	Handles completion
13995	Check if a record matches one of the tests
13996	Return a list of matching records .
13997	Extract a subdict from a record .
13998	Check if the cell is quiet
13999	Write the output prompt
14000	Write format data to stdout .
14001	Log the output of the shell .
14002	Check if the object is freezed .
14003	Convert a string to a timestamp .
14004	Called when an event loop has changed .
14005	Dispatch a Control message .
14006	Dispatch message to shell
14007	Start the shell .
14008	Flush one iteration
14009	Publish a pyin event .
14010	Abort a request
14011	Send a clear request
14012	Convert a topic to a string .
14013	Send shutdown message to iopub .
14014	Called before the context
14015	Remove modules from the context
14016	Convert a path to an absolute path .
14017	Return True if name is a file - like object .
14018	Check if the given object is a class or subclass .
14019	Check if the given path is a package .
14020	Return the package name for a given file
14021	Format a label .
14022	Return the last item of a regular expression .
14023	Copy a function to a module .
14024	Transfer a class to a given module .
14025	Return the CPU times of the system .
14026	Returns the command line for this process .
14027	Get open files .
14028	Return a list of connections for the process .
14029	Check if a user has a group
14030	Resolve a class by name .
14031	Calculate the percentage of usage percent .
14032	Cache a function .
14033	Mark a function as deprecated .
14034	Login to Google .
14035	Extract the gdocs key from the URL .
14036	Ensure the temporary path exists .
14037	Clear temporary files .
14038	Upload a file to Google Documents .
14039	Synchronize the data to the local file .
14040	Downloads the data from GCS to PODocs .
14041	Uploads the PODocs to the temp directory .
14042	Clears the entire document .
14043	Create a new Qt console
14044	Check if url is accessible from this machine
14045	Checks if a URL contains the content of the given URL .
14046	Return the code of a given URL .
14047	Compare the content type of a URL .
14048	Compare the response code with the given code .
14049	Validate the data .
14050	Clear output .
14051	Find a command .
14052	Create CodeUnit instances from a list of morfs .
14053	Return the rootname of the package .
14054	Return the source file for this code .
14055	Determine if the file should be a Python file .
14056	Return the total seconds of a datetime object .
14057	Return the result or raise an exception .
14058	Wait for the message to finish .
14059	Return the results of the job .
14060	Abort the message .
14061	Return the elapsed time of the message .
14062	Wait for all tasks to finish .
14063	Publish the content of the display
14064	Wait for all outputs ready to be ready .
14065	Wait for the message to arrive .
14066	Return the absolute path of a file .
14067	Convert patterns to absolute paths .
14068	Return the separator of a string .
14069	Find all python files in dirname
14070	Return the relative filename of the given filename .
14071	Return canonical filename .
14072	Return the data for a zip file
14073	Return True if fpath matches a directory
14074	Returns True if fpath matches pattern .
14075	Map filename to canonical filename .
14076	Main event loop .
14077	The main loop .
14078	Main loop .
14079	Main loop .
14080	Auxiliary loop for the Cocoa function .
14081	Enable a GUI event loop .
14082	Gets GOE .
14083	Calculates the center eigenvalue of a matrix .
14084	Compute the difference between the ensemble - eigenvalues .
14085	Initialize the Module .
14086	Parse a yaml file .
14087	Parse a step configuration .
14088	Initialize the crash handler
14089	Load the config file
14090	Initialize the profile directory
14091	Generate the default config file .
14092	Write to file .
14093	Erase the file .
14094	Dictionary of line data
14095	Return a dictionary of arc data .
14096	Write to file
14097	Read from file .
14098	Load data from file .
14099	Read a file and return its lines and arcs .
14100	Combine data from parallel files .
14101	Add line data .
14102	Add arc data .
14103	Add executed lines to a hash .
14104	Return the number of lines in the file .
14105	Generate a list of lines .
14106	Main loop .
14107	Replace the contents of the readline history
14108	Prompt the user for input .
14109	Edit the current syntax error .
14110	Check if the file should be recompiled .
14111	Exit the program .
14112	Return the URL and revision
14113	Create a new frontend master
14114	Initialize the widget .
14115	Get info about this node .
14116	Convert roj to numpy array
14117	Find the source code for an object .
14118	Set the colors for this object
14119	Toggles the color scheme
14120	Format a traceback .
14121	Returns a list of traceback lines .
14122	Format extracted list .
14123	Formats an exception only .
14124	show an exception only
14125	Start debugger .
14126	Set the mode .
14127	Check if a user is logged in .
14128	Ensure that a module is imported from a list .
14129	Append a line to the code .
14130	Create a new section .
14131	Returns the function named by name
14132	Return code for given expression .
14133	Render the template .
14134	Apply dots to a value .
14135	Render a template
14136	Return a dictionary of formatter names .
14137	Decorator to register a function for a given type
14138	Decorator to register a function for a given type .
14139	Called when a float precision is changed .
14140	Return a list of config files .
14141	Configure options .
14142	Configure logging .
14143	Configure the test directory .
14144	Dump a string to the screen .
14145	Print a string to stdout
14146	View a file
14147	Get pager command .
14148	Return start string for pager
14149	print a string
14150	Print a basic object as a unicode string .
14151	Return a PNG representation of an object .
14152	Pretty print an object
14153	Return True if the input object can be printed .
14154	Return a latex representation of an object .
14155	Add options to parser .
14156	Validate a list of strings .
14157	Validate that all keys are strings
14158	The main loop .
14159	Handle incoming messages .
14160	Execute a code .
14161	Send a complete completion request .
14162	Get information about an object
14163	Get a history item
14164	Shutdown the server .
14165	Flush the queue .
14166	Send an input to the user .
14167	Start the channel
14168	Stop all channels
14169	Returns True if all channels are running .
14170	Load the connection file
14171	Writes the connection file to disk .
14172	Start a new kernel
14173	Shutdown the kernel .
14174	Restarts the kernel .
14175	Kill the kernel .
14176	Interrupt the current kernel .
14177	Sends a signal to the kernel .
14178	Check if the device is alive .
14179	Returns a shell channel
14180	Creates a new sub channel .
14181	Return a new hb channel .
14182	Bind kernel to IPython application
14183	Print debug message .
14184	Return list of available extensions .
14185	Run pre step
14186	Call post_step after each extension
14187	Finalize the extensions
14188	Walk an egg .
14189	Scans a module to be included in the egg_dir
14190	Launch a new IPController instance
14191	Save connection dict to file
14192	load config from json
14193	Load the secondary configuration file if necessary .
14194	Execute a cell
14195	Enable autopx .
14196	Disable autopx
14197	Run a python cell
14198	Run a heartbeat message .
14199	Run a task .
14200	Remove a task from the database
14201	Monkey patches the protocol for the agent .
14202	Adds an attribute to an object if not present .
14203	Accept a new connection .
14204	Reject a pending connection .
14205	Returns an instance of the proxy agent .
14206	Handle form validation .
14207	Handle delete action .
14208	Check if user is authenticated .
14209	Output coverage report .
14210	Check if all modules have been loaded .
14211	Start an editor
14212	Try to fix an error .
14213	Get the current clipboard .
14214	Add a function to the chain .
14215	Get metadata for a given path or directory .
14216	Configure the plugin .
14217	Import an item by name .
14218	Try to use passwordless .
14219	Try to try passwordless opensshassistant
14220	Try passwordless paramiko connection .
14221	Create a new tunnel connection
14222	Open a TCP tunnel
14223	Stop scheduling tasks .
14224	Unwrap an exception from an exception .
14225	Register a new engine
14226	Unregister an engine .
14227	Handle an execute reply
14228	Flushes notifications from the socket .
14229	Flush results from a socket .
14230	Flush control messages .
14231	Flushes incoming control packets to the server .
14232	Flush messages from iopub socket
14233	Spin every interval
14234	Stop the current spin thread .
14235	Send all the messages to the hub .
14236	Wait for jobs to finish .
14237	Send a apply request to a socket .
14238	Send an execute request
14239	Returns an AsyncResult object from the hub .
14240	Query queue status .
14241	Purge results from the engine .
14242	Query hub history .
14243	Query the database .
14244	Return a set of opcodes .
14245	Gets the byte parser for this document .
14246	Return the number of lines that match the given regexes .
14247	Parse the text .
14248	Return the first line
14249	Return a set of lines from a list of lines .
14250	Parse the file and return a list of lines and excluded lines .
14251	Returns a sorted list of all arcs
14252	Returns a dictionary of the exit counts for each line .
14253	Return a list of child parsers for this node .
14254	Yield byte numbers .
14255	Find all lines of this parser .
14256	Return a string representation of a block .
14257	Split the code into chunks .
14258	Ensure that all blocks are empty
14259	Yields the lines of the instruction
14260	Return a list of all child parsers
14261	Return all arcs of this parser
14262	Add options for coverage .
14263	Start the coverage
14264	Generate HTML coverage report
14265	Determine if a file should be included .
14266	Interpret a distro name into a Distribution object .
14267	Open a URL with authentication .
14268	Searches for a requirement
14269	Get the parent of an object .
14270	The root topic
14271	Render a Jinja2 template
14272	Configure the plugin .
14273	Format an error .
14274	Split data by num .
14275	Convert a notebook to a new version .
14276	Convert hex color to rgb
14277	Get the colors for a style
14278	Returns a QFont with the given family .
14279	Handle a reply message .
14280	Handle a history reply
14281	Handle a pyout message .
14282	Handle the display data .
14283	Load all started channels
14284	Execute a file
14285	Process an error message .
14286	Process an execute payload .
14287	Set the default style scheme .
14288	Open an editor .
14289	Create a in - prompt .
14290	Make a continuation prompt .
14291	Called when a style sheet is changed .
14292	Called when a syntax style has changed .
14293	Handle an async response .
14294	Sign request parameters .
14295	Transforms a dictionary into a dictionary .
14296	Return virtual memory information .
14297	Return the CPU times of the system .
14298	Get the UID of the process .
14299	Get the groups of the process .
14300	Return a list of threads for this process .
14301	Return a list of open files for this process .
14302	Return the commit hash of a package
14303	Return package information .
14304	Return the system information .
14305	Return the number of cpus on Windows .
14306	Return the number of cpus for this platform .
14307	Return the next set .
14308	Fetch one or more rows
14309	Fetch many rows
14310	Fetch all rows
14311	Connect to a tree
14312	Read a JSON string from a json string .
14313	Read a notebook from a string .
14314	Read data from a file .
14315	Write notebook to given format .
14316	Wrapper for write .
14317	Convert all IPynb files to metadata
14318	Load values from a dictionary .
14319	Returns True if the given name matches the filter criteria .
14320	Check if the given class matches the given class .
14321	Determine if a directory wants to be selected .
14322	Determine if a file should be wanted .
14323	Determine if a function should be called .
14324	Determine if a method should be called .
14325	Determine if a module should be called .
14326	Return a list of lines from a file
14327	List file contents .
14328	print list of lines
14329	Print pdef .
14330	Returns the conversion factor between two currencies .
14331	Convert currency to currency
14332	Compute the return value for a given date range .
14333	Get the encoding of a stream
14334	Return the default encoding for stdin .
14335	Write the connection to the security directory
14336	Initialize the heartbeat channel
14337	Log the connection info .
14338	Initialize a session
14339	Initialize IO streams .
14340	Initialize the kernel
14341	Initialize the connector .
14342	Register a controller
14343	Convert HTML to text .
14344	Convert Markdown to text .
14345	Convert domain name to FQDN .
14346	Add options to the noseExclude parser .
14347	Configure exclude options .
14348	Determine if a directory should be excluded .
14349	Return True if the given extension is linked to the given extension
14350	Call a list of functions .
14351	Call a list of functions .
14352	Append a function to the end of the list .
14353	Insert a function at the given index .
14354	Format the usage string .
14355	Initialize the application .
14356	Write the PID file for this server .
14357	Remove the PID file
14358	Get PID from pid file .
14359	Construct a parser for the given magic function .
14360	Return the real name of a magic function .
14361	Highlight the block .
14362	Rehighlight the block
14363	Set the format for the frontend highlighting .
14364	Copy the widget to the clipboard .
14365	Execute a source
14366	Reset the prompt finished .
14367	Check if tab is pressed .
14368	Return the context menu .
14369	Filter Ctrl + C .
14370	Insert the continuation prompt .
14371	Handle a complete reply .
14372	Sends an expression to the kernel
14373	Process a callback message .
14374	Process a reply message .
14375	Handle input request .
14376	Handle kernel died .
14377	Handle an object info reply
14378	Handle a pyout message .
14379	Handle stream messages
14380	Handle a shutdown message .
14381	Execute a file
14382	Interrupt the current kernel .
14383	Reset kernel .
14384	Restarts the kernel .
14385	Handles calltips
14386	Called when the cursor is complete .
14387	Process an error message .
14388	Process an execute message
14389	Called when the document is changed .
14390	Add a plugin to the list of plugins .
14391	Chain all registered plugins .
14392	Generate results from plugins .
14393	Run a simple function .
14394	Configure plugins .
14395	Load plugins .
14396	Load plugins .
14397	Convert latex to PNG .
14398	Convert latex to HTML .
14399	Convert math string to image .
14400	Check if the requirement is satisfied .
14401	Iterate over processes .
14402	Return the number of idle CPUs .
14403	Return a dict representation of the container .
14404	The name of the process .
14405	Return the path to the executable .
14406	Returns the children of this process .
14407	Calculate CPU percent .
14408	Returns the amount of memory allocated to this machine .
14409	Returns a list of memory maps .
14410	Check if the process is running .
14411	Suspend the current process .
14412	Resumes the current process .
14413	Kills the current process .
14414	Wait for the process to finish .
14415	Wires the kernel .
14416	Hijack gtk . main
14417	Return True if identifier is shadowed by user .
14418	Initialize the default transformers
14419	Register a new transformer .
14420	Unregister a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize handlers
14425	Register an event handler .
14426	Unregister an escape handler .
14427	Prefilter the given line_info .
14428	Find the handler for the given line_info .
14429	Transform a line of transformers .
14430	Preprocess a line .
14431	Preprocess a list of lines .
14432	Instances of IPyAutocall in user_ns get autocalled immediately
14433	Allow ability in multi - line statements if multi_line_specials is on
14434	Return the handler for the given line .
14435	Check if the initital identifier on the line is an alias .
14436	Handle line_info .
14437	Process an IPython line .
14438	Process a magic line .
14439	Process a magic line .
14440	Process line info .
14441	Process line info .
14442	Reimplement Qt method .
14443	Stop the hide timer .
14444	Overrides the paint method to draw the tooltip .
14445	Show the call info .
14446	Show the tooltip
14447	Called when the cursor position is changed .
14448	Creates a proxy property .
14449	Convert a path to an absolute path .
14450	Validate an instance against a schema .
14451	Returns a dict with the masked values .
14452	Check if there is no global site - packages .
14453	Calculate the frequency of words per word
14454	Create a view decorator .
14455	Return a list of default aliases for the operating system .
14456	Define an alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Call an alias
14460	Transform an alias .
14461	Expand aliases .
14462	Auto - help directive .
14463	Reset sgr state .
14464	Split a string into actions .
14465	Returns a QColor instance for the given color .
14466	Returns a QTextCharFormat instance for this widget .
14467	Generate a JWT
14468	Decorator for mutex methods .
14469	Clean expired tokens
14470	Check if a token is already used .
14471	Validate a JWT
14472	Create a new semaphore .
14473	Return the common prefix of a list of items .
14474	Filter the given event .
14475	Returns the size hint for this widget .
14476	Checks if the current cursor can cut .
14477	Check if the clipboard can be paste .
14478	Clears the input buffer .
14479	Cuts the document
14480	Execute the input buffer .
14481	Returns the current input buffer .
14482	Set the input buffer for the prompt .
14483	Set the widget s font .
14484	Paste text into the buffer .
14485	Print the control to the printer .
14486	Marks the cursor to the top of the prompt .
14487	Reset the current font .
14488	Appends an input to the prompt .
14489	Append HTML to the display .
14490	Append an HTML snippet to the document .
14491	Append plain text .
14492	Clears the prompt .
14493	Autocomplete with the given items .
14494	Fill a temporary buffer .
14495	Returns whether or not a control key is pressed .
14496	Create a QTextEdit widget
14497	Create a QTextEdit instance for this widget .
14498	Filter the current page key .
14499	Returns the plain text of a block
14500	Get the end cursor
14501	Returns the current cursor position .
14502	Returns the line of the input buffer .
14503	Get the prompt cursor
14504	Creates a selection cursor
14505	Insert a continuation prompt .
14506	Inserts the given HTML into the cursor .
14507	Insert html into cursor .
14508	Insert text into the cursor .
14509	Keep the current cursor .
14510	Called when the keyboard is quit .
14511	Page .
14512	Called when the prompt is started .
14513	Read a line .
14514	Set the continuation prompt .
14515	Set the top cursor .
14516	Show the prompt .
14517	Adjust the scrollbars .
14518	Main entry point .
14519	Copies a config file to the specified location .
14520	Create a profile directory by name .
14521	Find a profile directory by name .
14522	Convert a cmp = function into a key = function
14523	Read the contents of a file
14524	Convenience function to iterate over multiple processes .
14525	Write a python file to a temporary file .
14526	Close the stream .
14527	write data to file
14528	Add a new heart handler .
14529	Add a heartbeat failure handler .
14530	a heart just beat
14531	Returns a list of batches from a sequence .
14532	Convert path to filename and filename .
14533	Generator for os . walk .
14534	Displays all elapsed statistics .
14535	Return the unit of the elapsed time .
14536	Extract the configuration from a dist_filename .
14537	Uncache a zip directory .
14538	Quote an argument .
14539	Check to see if there are any conflicts .
14540	Set the fetcher options
14541	Create home directory
14542	Determine if the given name is an archive file .
14543	Make sure an object is mutable .
14544	Decorator for readonly methods .
14545	Create a new heading cell
14546	Create a new NotebookNode
14547	Create a new NotebookNode .
14548	Check if a directory is writable .
14549	Unquote a filename .
14550	Convert a filename to a filename .
14551	Find a file in the search paths .
14552	Get the home directory
14553	Get the xdg config directory
14554	Return the path to the IPython directory .
14555	Get the directory of the IPython package .
14556	Get the path to a module
14557	Check if a target is outdated
14558	Return md5 hash of file
14559	Check for old config files
14560	Updates the suggestions dictionary for the given object
14561	Get suggestions with the given size .
14562	Get suggestions for the given object
14563	Return the relative path to this directory .
14564	Return a list of all files matching the given pattern .
14565	r Returns a list of lines .
14566	Return the md5 hash of the file .
14567	Begin a new snapshot
14568	print the profiler
14569	Close the profiler .
14570	Handle heartbeats .
14571	Enable wx
14572	Disable event loop .
14573	Disable Qt4 integration .
14574	Enable gtk .
14575	Enable Tkinter app .
14576	Enable pyglet integration .
14577	Saves the wave_saver
14578	Initialize the database
14579	Run SQL statement
14580	Return information about a session .
14581	Get the last n records
14582	Yield histogram lines
14583	Return the path to the history file .
14584	Change a session .
14585	Reset history .
14586	Generate a list of histograms .
14587	Store the output of the database .
14588	Write the cache to the database .
14589	Stop the game .
14590	get the number of CPUs
14591	Get system per cpu per cpu .
14592	Return a list of disk partitions
14593	Return a list of processes
14594	Convert a pair to a string .
14595	Format a list of statements .
14596	Return a string representation of the current stack .
14597	Decorator for expensive functions .
14598	Join a list of regexes .
14599	Remove a file
14600	Recursively updates self . md5 .
14601	Update cluster profiles
14602	Start a cluster
14603	Stop a cluster
14604	Try to find a command
14605	Read the system body .
14606	Find code units .
14607	Run a report on a list of files .
14608	Decorator that raises an AssertionError .
14609	Set the trace to stdout .
14610	Decorate a function with a time limit .
14611	Load IPython extensions
14612	Execute the code
14613	Run code in user namespace
14614	Run startup files
14615	Execute all the files in the list .
14616	Run code given at command line
14617	Run a module .
14618	Decorator for generic methods .
14619	Return the filename of a static file
14620	Return the contents of a file
14621	Escape a string .
14622	Calculates the coverage report
14623	Create the local static report files
14624	write html to file
14625	Return the hash of a file
14626	Generate an index . html file .
14627	Read coverage status file .
14628	Write the coverage status to a directory .
14629	Compare two lists .
14630	Get a slice from a sequence
14631	Chunks a sequence into a list
14632	Read config file .
14633	Read the contents of the manifest .
14634	Convert a glob pattern to a regular expression .
14635	Check if filename matches any of the patterns .
14636	Return a list of files in the git repository .
14637	Start a new kernel .
14638	Shutdown a kernel .
14639	Kill a kernel
14640	Returns the kernel with the given id .
14641	Get kernel ports .
14642	Returns the notebook for the given kernel id .
14643	Start a kernel .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restarts a kernel .
14647	Create an IOStream for the given kernel .
14648	Create a shell stream .
14649	Create a kernel stream for the given kernel id .
14650	Reset all properties of this instance
14651	Export HTML to file .
14652	Export html to file .
14653	Ensure an image is UTF - 8 .
14654	Convert HTML to HTML .
14655	Exports the editor to a file .
14656	Gets a unique instance or returns None .
14657	Build a query from a list of terms .
14658	Get a query string from a query string .
14659	Gets a date greater than the given date field .
14660	Gets a date less than the given date field .
14661	Return a query for null or blank query .
14662	Convert fields_dict to fields_dict
14663	Add options to the given parser .
14664	Validate the attributes of this object
14665	Determine if a method should be used
14666	Rotate the ring .
14667	Monkey patch zmq to zmq
14668	Create an object parser from a URL .
14669	The websocket URL .
14670	Reserialize a reply .
14671	Inject cookies into request .
14672	Starts a heartbeat .
14673	Actually start the hb
14674	Stop receiving messages .
14675	Opens the file
14676	Get the index .
14677	Seek to the given index .
14678	Edit the block .
14679	Show the block .
14680	Prints all src_blocks .
14681	Iterate over a collection of subjects .
14682	batch a collection
14683	Run a function on a sequence .
14684	Run a collection using multiprocessing .
14685	Decorate a function with the given context .
14686	Decorate a function with the given names .
14687	Get the source code for a traceback .
14688	Return a list of lines that start at pos .
14689	Displays a countdown
14690	Stop the engines
14691	Check if condition is satisfied .
14692	Called when the user has changed .
14693	Decorator for save_ids
14694	Call the given function f with the outstanding results .
14695	Run the function f after the given function .
14696	Get all messages from the queue .
14697	Gets a message if there is one that is ready .
14698	Decorator to register a property .
14699	Returns a tuple of only one or more fields .
14700	Parses a URL into a dictionary .
14701	Return a list of modules in the given path .
14702	Return a list of all root modules
14703	Quick completer .
14704	Implements the module completion .
14705	Completes completer .
14706	Completer for tab completion
14707	Encode an attribute .
14708	Configure the plugin .
14709	Write test results to file .
14710	add an error to the list
14711	Add a failure .
14712	Add a test to the list .
14713	Generate a random value between two lists
14714	Generate a random index
14715	Register a new engine .
14716	Unregister an engine
14717	Process a list of pending tasks .
14718	Dispatch a raw_msg message .
14719	Check that all of the tasks have finished .
14720	Mark a message as unreachable .
14721	Check if a job should be run .
14722	Save an unmeted job .
14723	Submit a task to the queue .
14724	Process a result from the queue
14725	Handle the result of a message .
14726	Handle an unmet dependency .
14727	Updates the dependency graph based on dependencies .
14728	Start logging .
14729	Display the current logging state .
14730	Log a line .
14731	Write data to log .
14732	Stop logging .
14733	Create a new notebook node .
14734	Add a command chain .
14735	Add a regex to the command chain
14736	Given a key return a generator .
14737	Returns a generator of all matches for the given key .
14738	Called when the notebook directory is changed .
14739	List all notebooks
14740	Create a new notebook id
14741	Delete a notebook id
14742	Check if a notebook exists .
14743	Find the path to a notebook .
14744	Get the path to a notebook file by name .
14745	Get a notebook
14746	Get a notebook object
14747	Save a new notebook
14748	Save a notebook
14749	Save a notebook object
14750	Delete a notebook
14751	Create a new notebook
14752	Copy a notebook
14753	Yield tokens .
14754	Generate a list of tokens from a source
14755	Load the default configuration .
14756	Return a list of the default shell classes .
14757	Parse command line arguments .
14758	Initialize the IPython application .
14759	Initialize the shell
14760	Initialize banner
14761	Return a human - readable representation of an object .
14762	Convert a name to a list of validators .
14763	Set the default value of the trait .
14764	Register a new event handler .
14765	Return a mapping of traits to traits .
14766	Get the metadata for a trait
14767	Validate the given value .
14768	Return the default value
14769	Check whether this set has completed or not .
14770	Returns True if this query has unreachable or not .
14771	Return the dependency as a dict .
14772	Calculate the depth of a tree node .
14773	Print a binary tree .
14774	Disambiguate a DNS URL .
14775	A wrapper for allreduce .
14776	Validate targets
14777	Process monitor traffic .
14778	Process a query message .
14779	Handle a new heart
14780	Handle a heartbeat failure .
14781	Save a task request
14782	Save a task result
14783	Save an IOPub message
14784	Handle a connection request
14785	Register a new engine
14786	Unregister an engine
14787	Finish the registered engines .
14788	Shutdown a client
14789	Purge results from the database
14790	Extract the content and buffers from a single record .
14791	Get results for a given client .
14792	Get the history of a client .
14793	Query the database .
14794	Change the current working directory .
14795	Decode the stdout and stderr of a CompletedCommand .
14796	Run a command under r root
14797	Execute the command
14798	Dispatch a message .
14799	Check if message is from the parent session
14800	Annotate a set of morfs .
14801	Annotate a cu .
14802	Get installed version
14803	Recursively squash unicode strings .
14804	Extract the message header from a message or dict .
14805	Check that the packer is correct .
14806	Create a message
14807	Sign a list of messages .
14808	Serialize a message
14809	Send a message to a ZMQ socket .
14810	Send a list of messages .
14811	Receive messages from a socket .
14812	Return a list of identities from a list of messages .
14813	Unserialize a list of messages .
14814	Save string to SVG file
14815	Writes an SVG to the clipboard
14816	Convert an SVG string to a QImage
14817	Return dictionary of object info .
14818	Return the docstring of an object .
14819	Get the source of an object .
14820	Get the arguments of an object .
14821	Return the call line and docstring
14822	Find the absolute path of an object .
14823	Find the source lines of an object .
14824	Return the definition of an object .
14825	Return the color of the table .
14826	Print a no info message
14827	Print the definition of an object .
14828	Print documentation for an object .
14829	print source code
14830	Print a file
14831	Format a list of fields .
14832	Display information about an object .
14833	Search for namespaces
14834	Starts a thread that runs the reactor .
14835	Decorator to define a Deferred
14836	Find the best string that matches the given query .
14837	Convert to string .
14838	Convert to XML
14839	Load all modules in a package
14840	Invert a dictionary
14841	Merge two dictionaries
14842	Convert an object to primitives .
14843	format a string
14844	Return a list of figures for the specified number of figures .
14845	Print a matplotlib figure .
14846	Wrapper for mpl_execfile
14847	Select figure format .
14848	Find the GUI and backend
14849	Activate matplotlib backend .
14850	Configure inline support
14851	Activate a Qt widget
14852	Trace the given frame .
14853	Starts profiling .
14854	Stop the logger .
14855	Starts a new tracer .
14856	Trace the execution trace .
14857	Starts the collector .
14858	Stops the recording .
14859	Pause coverage . py
14860	Resume all tracers .
14861	Returns a dict of line data .
14862	Collect exceptions from a remote call to a remote method .
14863	Return a list of lines for the engine .
14864	Start the coverage process
14865	Returns the canonical directory for a given morf .
14866	Return the source code for a file .
14867	Determine whether the given frame should be traced .
14868	Determine if the given frame should be traced .
14869	Add a warning message .
14870	Check for missing Python packages .
14871	Start the configuration .
14872	Terminate the session .
14873	Exclude a regex from the configuration
14874	Return the regex for the excluded regex
14875	Save data to disk .
14876	Combine multiple files into one .
14877	Harvest data from all imported modules .
14878	Calculate the morphological analysis
14879	Extract statements from a morf .
14880	Return an analysis object
14881	Harvest data from the corpus .
14882	Annotate the corpus
14883	Generate HTML report .
14884	Generate XML report .
14885	Display a list of objects
14886	Display a list of objects .
14887	Display a list of objects .
14888	Display a PNG image .
14889	Display a JPEG file .
14890	Display a list of objects .
14891	Display a list of objects
14892	Display a list of objects
14893	Reload the file .
14894	Find the path to a command
14895	Execute a shell command .
14896	Forward read events to fd
14897	Main thread .
14898	Find the launcher class for the given clsname and kind .
14899	Starts the cluster .
14900	Build and return a launcher instance .
14901	Start the cluster
14902	Start the ipcluster .
14903	Return wx .
14904	Check if the app is running in an event loop
14905	Start an event loop .
14906	Return an instance of Qt4 .
14907	Check if the app is running in Qt4
14908	Start event loop .
14909	Create a blank canvas
14910	Draws a cross on the canvas .
14911	Draw a line
14912	Draw text at given position .
14913	Create an ANTsImage from a grayscale image .
14914	Generate a UUID
14915	Returns a unique key for a GET request
14916	Returns the domain of a given URL .
14917	Parse url arguments .
