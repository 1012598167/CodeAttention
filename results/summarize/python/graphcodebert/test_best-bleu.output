0	Convert sina XML to list of URLs
1	Download a website .
2	Download sina data from sina .
3	Formats text using ANSI escape sequences .
4	Prints text to stderr .
5	Print a message and exit .
6	print a message to terminal
7	Detect operating system .
8	Download videos by video .
9	Get info from ckplayer
10	Get video url from video_id
11	Extract the real url of the m3u URL .
12	Convert the given text to a canonical form .
13	Download a video by name and title .
14	Download data from stream .
15	Download a video by ID
16	Return all matches in text .
17	Parse a query parameter .
18	Get content from a URL .
19	Post content to a URL .
20	Parses a host string into its hostname and port .
21	Get room id by room url key .
22	helper function to get the title from the json content
23	Download wanmen files by course .
24	Downloads WANmen from the json api .
25	Checks if the given task instance exists .
26	Clear the event buffer .
27	Get a snowflake connection
28	Get AWS access key and secret access key
29	Return the value of the field with the given name .
30	Copy the SQL to the database .
31	Dump a table to a temporary file .
32	Executes the upload hook .
33	Retrieve the maximum partition of a table .
34	Return a mysql connection
35	Show the current state of a task
36	Restarts a gunicorn process .
37	Get a connection object
38	Translate values to target language .
39	Retrieve a single instance
40	Create an instance .
41	Patch an instance .
42	Deletes an instance .
43	Get a database .
44	Create a database .
45	Patch database .
46	Delete a database .
47	Export an instance
48	Start the sql proxy .
49	Stop the sql proxy
50	Get the version of the proxy proxy
51	Create a new connection .
52	Retrieve a single connection from the database .
53	Delete the connection from the database .
54	Get a proxy runner
55	Get the database hook .
56	Clean up database hook .
57	Reserve a free TCP port .
58	Normalize a job id .
59	Get the error code from an exception .
60	Delete all DagRuns .
61	Delete all task instances in the database .
62	Set the state of DAG .
63	Print performance statistics .
64	Check the status of the scheduler .
65	Invoke the lambda function .
66	Create evaluate operations .
67	Wrapper for os . makedirs .
68	Convert string to float if possible .
69	Make timezone aware .
70	Make a naive datetime .
71	Wrapper around dt . datetime
72	Get the connection to druid
73	Return a requests session .
74	Send a request to the API .
75	Raise AirflowException if response is not present .
76	Run the request and check the response .
77	Create a session .
78	Decorator to create a session .
79	Reset the database
80	Returns the exception message .
81	Execute an HQL query and return the results .
82	Execute a statement and return a Pandas DataFrame .
83	Execute an SQL statement .
84	Insert rows into table .
85	Get a Cosmos client connection
86	Check if a collection exists .
87	Create a collection .
88	Check if a database already exists .
89	Create a database
90	Delete a database .
91	Delete a collection .
92	Insert a list of documents into the database .
93	Delete a document
94	Get a document by its id
95	Returns a list of documents matching the query .
96	Get a function by name .
97	Create a new function in a location .
98	Update a function .
99	Uploads a function to a location .
100	Delete a function .
101	Return the status of the task .
102	Returns True if all dependencies have been met .
103	Return a list of failures for the given ti .
104	Parse S3 configuration file .
105	Retrieves credentials from AWS account .
106	Get a connection to the graph .
107	Flush the buffer .
108	Check if file is a zipfile .
109	Return a list of file paths in a directory .
110	Constructs the task instance from the database .
111	Start the process .
112	Send a termination message to the manager .
113	Terminate DAG processors gracefully .
114	Start the process .
115	Start the main loop .
116	Starts in sync .
117	Refresh the DAG directory .
118	Print the file processing statistics .
119	Remove any missing import errors from the database .
120	Log file processing stats .
121	Set the file paths to be processed .
122	Wait until all processors are done .
123	Check the status of the DAG .
124	Terminate all child processes .
125	Create an SSH connection
126	Create a new transfer job .
127	Get a transfer job .
128	List transfer jobs .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resumes a transfer operation .
134	Wait for the given job to complete .
135	Find all tasks for a task instance .
136	Return the number of available slots .
137	Run a command .
138	Remove option from airflow .
139	Get a section from the configuration file .
140	Allocate ids for the given keys .
141	Start a new transaction .
142	Commit the project .
143	Perform a lookup operation .
144	Rolls a transaction .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until it completes .
149	Export project to S3 bucket .
150	Import a file from a storage bucket .
151	Publish a message to a target ARN .
152	Get hostname from configuration file .
153	Get a connection to the Language Service
154	Return a list of dicts representing the entity s entities .
155	Annotate a document .
156	Classify a document .
157	Return the names of the template field .
158	Link template fields .
159	Disposes the connection pool .
160	Prepare the classpath .
161	Check if the task_id exists
162	Detect if CACHECONF configuration variable is present .
163	Convert an SQLAlchemy object to a dictionary .
164	Yield successive chunks of items .
165	Apply a function to an iterable in chunks .
166	Chain tasks .
167	Pretty print a list of rows .
168	Render a log filename .
169	Return a connection to the dataproc server
170	Block until operation is completed .
171	Coerce content into a string
172	Handles the execution of an operator .
173	Run the pig command .
174	Fetch celery task state from celery task
175	Calculate the number of tasks per send process .
176	The number of tasks per fetch process .
177	Set default value for variable key .
178	Return a connection object
179	Create a job .
180	Get a single job .
181	Wait for a job to complete .
182	Create a new version .
183	Set the default version of a model .
184	List versions of a given project and model .
185	Delete a version .
186	Create a model in a project .
187	Get a model by name .
188	Write batch data to DynamoDB
189	Import airflow plugins .
190	Get the default executor .
191	Returns the appropriate executor class .
192	Called when an error occurs .
193	Return a pymssql connection
194	Trigger a DAG .
195	Delete a DAG .
196	Get information about a task .
197	List available pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the state and exit code of an instance .
202	Gets the messages for the given resource group and name .
203	Get logs of a container .
204	Deletes a container group .
205	Check if a container exists .
206	Decorator to apply default parameters .
207	Constructs and returns the ingest query .
208	Parses a message from redis
209	Returns a list of DagRun objects
210	Get all task instances in the current dag .
211	Get task instance for given task_id .
212	Get the previous DagRun object .
213	Get the previous dagrun of this dag .
214	Update the state of the task .
215	Verify the integrity of the DAG .
216	Make a request with headers and headers
217	Convert Airflow context to Airflow variables
218	if conditionally trigger conditionally
219	Send a metric to InfluxDB .
220	Query metric .
221	Return the DAG for the given dag id .
222	Mark a list of dead jobs
223	Bag a DAG into the DAG
224	Return a list of DAGs found in the given directory .
225	Return a formatted summary of the dagbag stats .
226	Add days to datetime
227	Convert a datetime object to a string .
228	Evolves the path to a directory with the given regex pattern .
229	Try to poke a file from the filesystem
230	Clear task instances in the database .
231	Returns the number of attempts .
232	Generate Airflow command .
233	Return the current state of the task .
234	Record the task instance as FAILED
235	Refresh task information from database .
236	Clears all xcom data .
237	Return a key for this entry .
238	Determine if the task is done .
239	Get the next retry date .
240	Check if this job is ready for retrying .
241	Check if the pool is full .
242	Return the DagRun object for this DagRun .
243	Push a value into the xcom .
244	Pull one or more tasks .
245	Initialize the run context .
246	Close the log file .
247	Return a connection to the compute server .
248	Start an instance .
249	Set machine type .
250	Get instance template
251	Insert an instance template
252	Get instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create a bucket
257	Check if a prefix exists .
258	List prefixes in a bucket .
259	List objects in a given bucket .
260	Check if a key exists .
261	Get an object from S3 .
262	Read the contents of a key .
263	Retrieve the contents of a key from S3 .
264	Check if a wildcard key exists .
265	Get the key for a wildcard .
266	Loads a file into S3
267	Loads the contents of a string into S3 .
268	Loads the contents of a file into S3 .
269	Uploads a file - like object to S3
270	Copy an object from one bucket to another .
271	Query cassandra .
272	Convert a value into a dictionary .
273	Send an email .
274	Return a connection to speech service .
275	Recognize audio .
276	Execute the query .
277	Loads the list of plugin plugins .
278	Check if plugin object is valid .
279	Skips tasks for the given dag run .
280	Get an adlsFileSystem client
281	Check if a file exists .
282	Upload a file to the ADL server .
283	Returns a list of all files under path .
284	Execute the query
285	Uncompress a file .
286	Query the mssql database .
287	Decorator to add action logging .
288	Build metrics for a single command .
289	Create a cgroup .
290	Delete a cgroup
291	Parse hostname .
292	Do an API call .
293	Get a Salesforce connection
294	Make a query to all objects
295	Return information about an object
296	Returns a list of fields for an object
297	Get object from Salesforce
298	Convert a column to a timestamp .
299	Write object to file .
300	Get a connection to MongoDB .
301	Get a mongo collection
302	Replace multiple documents in a mongo collection .
303	Check if the current email has an email attachment .
304	Retrieve email attachments by name .
305	Download email attachments by name .
306	Finds all attachments by name
307	Return a tuple of the file and its payload
308	Adds records to this delivery stream
309	Return a list of statuses for the given task instance .
310	Send an email .
311	Send an email using SMTP
312	Convert datetime value to datetime .
313	Check if a blob exists .
314	Check if a prefix exists for a given container .
315	Creates a blob from a string .
316	Reads a file from the container .
317	Delete a file from the container .
318	Run MLST on the device .
319	Get the ftp connection
320	List files in path
321	Retrieve a file from the FTP server .
322	Upload a file to the remote host .
323	Get the modification time of a file
324	Executes the bot .
325	Return a file service object
326	Check if a directory exists .
327	Check if a file exists .
328	Returns a list of directories and files in the account .
329	Creates a new directory .
330	Create a new file from a file .
331	Creates a new file from a string .
332	Create a new file from a stream .
333	Get storage connection
334	Copy a blob from one bucket to another .
335	Download an object from S3 .
336	Upload a file to a bucket .
337	Check if a bucket exists .
338	Check if the object is updated after the given timestamp .
339	Delete a blob .
340	List all blobs in a bucket
341	Get the size of a bucket .
342	Get the crc32c checksum of an object
343	Get the md5 hash of an object
344	Create a new bucket .
345	Compose a list of objects into a new object .
346	Check if the secondary training status has changed .
347	Generate a message for secondary training status .
348	Upload a file to S3 .
349	Configure s3 resources .
350	Check the input s3url
351	Return a client for logging .
352	Create a new training job .
353	Create a hyperparameter tuning job .
354	Create a new transform job .
355	Create an endpoint .
356	Retrieve information about a training job .
357	Check the status of a SageMaker job .
358	Check the status of a training job .
359	Start the dataflow .
360	Run migrations offline .
361	Run migrations .
362	Delete an instance
363	Create an instance .
364	Create a table .
365	Deletes a table .
366	Update a cluster .
367	Prepare CLI CLI commands
368	Prepare hive - hiveconf options
369	Load hive data into a dictionary
370	Load a hQL file into a table .
371	Get a Thrift client
372	Check if a named partition exists .
373	Check if a table exists .
374	Return a connection to the hive server .
375	Get the results from a SQL query .
376	Write results to a csv file .
377	Retrieve the records from the database .
378	returns a pandas dataframe
379	Returns a connection to the ProductSearchClient
380	Get request endpoint
381	Send dingding message
382	Bind parameters to an operation .
383	Escape special characters .
384	Convert a string field to its type .
385	Validate that value is of expected type .
386	Connect to BigQuery
387	Build a bigquery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table resource .
391	Cancel running job .
392	Run a table delete .
393	Run a table upsert .
394	Grant access to a dataset .
395	Get a dataset resource
396	Get dataset list .
397	Insert rows into table .
398	Execute a SQL query .
399	Execute operation on multiple parameters .
400	Retrieve the next query results .
401	Query the postgres database .
402	Make intermediate directories .
403	Create a queue .
404	Send a message to a queue .
405	Runs the command .
406	Called when the task is finished .
407	Main entry point .
408	build the html header
409	Build the container .
410	Builds the js chart
411	Create a new x axis
412	Create a new y axis
413	Return a sqlite3 connection
414	Decorator to add action logging .
415	Decorator to compress a response .
416	Get the last run of a dag .
417	Create a new dagrun .
418	Execute SQSHook
419	Return a JSON response .
420	Open a file if it exists .
421	Make a cache key .
422	Get an instance of VideoIntelligenceServiceClient .
423	Annotate video .
424	Get API key .
425	Return a requests session .
426	Executes the alert request .
427	Builds an opgenie payload .
428	Execute the actionsgenie hook
429	Gets a client connection
430	Runs a query .
431	Get the current query status
432	Poll the status of a query .
433	Get pysftp connection
434	Handle Zendesk API rate limit .
435	Make a call to Zendesk
436	Get the partition information for a table .
437	Retrieve a table
438	Get table location .
439	Get the status of a cluster .
440	Deletes a cluster .
441	Describe the snapshots for a cluster .
442	Restores a cluster from a snapshot .
443	Create a snapshot .
444	Executes the specified method .
445	Create a job flow
446	Filter results by size .
447	Filter result list based on ignored_ext .
448	Execute the MongoDB query
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a dictionary to a protobuf .
453	Wait for an operation to complete .
454	Get an operation by name .
455	Appends a label to the cluster .
456	Create a new cluster .
457	Get a specific cluster .
458	Get the Discord webhook endpoint .
459	Build the JSON payload to send to Discord .
460	Runs the bot .
461	Encrypt plaintext using key_name .
462	Import a table into the database .
463	Import a query into a directory .
464	Export a table to a local file .
465	Return an instance of TextToSpeechClient
466	Synthesize audio .
467	Close the log file .
468	Return the init containers
469	Build environment variables .
470	Get secrets from kube_config .
471	Build a security context .
472	Get the URL of the extra links
473	Check if the job is alive .
474	Launch a process on a file .
475	Start the process .
476	Determine if the task is done .
477	Exit gracefully .
478	Update import errors .
479	Process all tasks in the queue .
480	Change the state of the tis without dagrun .
481	Get the concurrency map between states and tasks .
482	Changes the state of the task instances to be queued .
483	Enqueue task instances with queued state .
484	Synchronously execute task instances .
485	Set the state of tasks failed to scheduled .
486	Process event buffered events .
487	Process a DAG file .
488	Update the counters for the task .
489	Manage the state of the executor .
490	Get the dagrun for the given date .
491	Return a list of task instances for the given dag run .
492	Sets up the execution time for the given run dates .
493	Set all DAG runs to failed .
494	Execute the task .
495	Heartbeat callback .
496	Get the client for a project .
497	Get instance details .
498	Apply a function to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get database .
503	Create a database .
504	Update an existing database .
505	Delete a database from an instance .
506	Checks if the attachment exists
507	Prepare additional parameters for image_context .
508	Get a connection to Redis
509	Check if a table exists .
510	Check if a record exists .
511	Build command to track driver status
512	Run spark submit command .
513	Parse the log of the spark submit log .
514	Process the Spark driver status log .
515	Get a task runner .
516	Wait for the job to complete .
517	Query the MySQL database .
518	Configure the CSV file .
519	Write the schema to disk .
520	Return a dict with column name and type .
521	Convert a mysql type to a string .
522	Execute the SQoopHoop .
523	Decorator to apply the given operator
524	Parse extra json data
525	Return a list of cron objects .
526	Scale time_seconds .
527	Return the number of days ago .
528	Create a new role in the database .
529	Delete a role by name
530	Returns the user s roles
531	Returns a set of all permission names and view menu names .
532	Check if user has a role .
533	Check if user has permission .
534	Delete faulty permissions
535	Merge a permission view .
536	Update the admin permissions for the admin role .
537	Sets up the permission for the given dag view .
538	Create permissions for all DAGs
539	Returns a Fernet object
540	Checks for partitioning .
541	Get the Lambda catalog hook .
542	Receive a message from SQS queue
543	Return a connection object .
544	Get an open namenode client .
545	Check if a path exists on the filesystem
546	r Upload a file to HDFS
547	Get the connection to pinot .
548	Get the URI for the connection
549	Convert a date object to a dictionary .
550	Convert a time object to a dictionary .
551	Get redis connection
552	Return a pandas dataframe from the database
553	Execute a SQL statement .
554	Set the autocommit flag .
555	Insert multiple rows into a table .
556	Convert a cell to a string .
557	Check the status of the scheduler .
558	Get extra links
559	Get a cloudant session
560	Execute Slack webhook
561	Get Google API credentials .
562	Return an httplib2 . Http instance .
563	Decorator to catch HTTP exceptions .
564	Fallback to the default project_id .
565	Return a list of unfinished states .
566	Prepare a Spark SQL command .
567	Convert a PIL Image or numpy array to a Tensor .
568	Normalize a tensor by mean and std .
569	r Resizes an image .
570	r Add padding to an image .
571	Crop a PIL image .
572	Crop a PIL image
573	Flip a PIL image .
574	Compute the perspective of an image .
575	Flip a PIL image .
576	Crops the given image .
577	Adjust the brightness of a PIL Image .
578	Adjust the image s contrast .
579	Adjust image saturation .
580	Adjust the hue of an image .
581	r Adjust gamma .
582	Rotate PIL image by angle .
583	Transform an image .
584	Convert PIL Image to grayscale .
585	Save a tensor to a file .
586	Find all classes in a directory .
587	Read an image file from the data directory .
588	Reads an info file from the data directory .
589	Reads matches_file and returns a torch . Tensor .
590	Calculate accuracy .
591	Setup builtin and print function .
592	Download a URL to a file .
593	Return a list of all subdirectories .
594	Return a list of all files under the given root .
595	Download a file from Google Drive .
596	Generate random parameters .
597	Generate random parameters
598	Get parameters for an image .
599	Generate parameters based on parameters .
600	Generate random parameters
601	Download the dataset .
602	Download and extract all the images .
603	Download and extract the zip archive .
604	Get current theme name
605	Autocomplete function
606	Display preferences .
607	Return a list of all available themes .
608	Parse search query
609	Parse response .
610	Gradient function .
611	Generates an independent distribution .
612	Calculate the log probability of eight school samples .
613	Benchmark the school activity .
614	Decorator to expand the docstring of a function .
615	Return a simple name for a distribution .
616	Build a random variable .
617	Convert a distribution into a random variable .
618	Create a random variable from a distribution class .
619	One - step predictive prediction .
620	Forecast the observed time series .
621	Mask x along an axis .
622	Fail if x is finite .
623	Fail if x is less than the given rank .
624	Calculate the event size .
625	Evaluate one - hot function .
626	Get the converter function .
627	Calculate the size of a mixture of components .
628	Get the next interceptor from the stack .
629	Decorator to wrap a function into an interceptor .
630	Context manager that creates a tape .
631	Simple toy logistic regression .
632	Visualize the classification .
633	Builds the input pipeline .
634	Check that map_values are consistent .
635	Trace a state using the given function .
636	Call a transition function .
637	Call the given function and return the result .
638	Broadcast from_structure to_structure .
639	Decorator to transform a log - probability function .
640	Perform a leapfrog step .
641	Perform a metropolis step .
642	Run HamiltonianMonteCarlo .
643	Applies the sign adaptation .
644	Create a Tfp instance from a dictionary .
645	Convert x to tensor .
646	Create a scale operator .
647	Returns a function that returns a random walk .
648	Returns a function that returns a random walk .
649	Expand x to event dimension .
650	r Calculates the lower bound of the distributions .
651	Compute the log probabilities for each category .
652	Ensure that the arguments are equal .
653	Ensure that TensorFlow is installed .
654	Logistic regression .
655	Return features and labels .
656	Cholesky covariance .
657	Return the standard deviation of x .
658	Compute the variance of x .
659	Convert axis to positive axis .
660	Squeeze x along axis .
661	Return z .
662	Inverse of z
663	Create a semilocal trend matrix .
664	Semilocal linear trend .
665	r Samples from a Halton sequence .
666	Generate permutations .
667	Helper function for creating indices .
668	Calculate the size of a base .
669	Return a list of prime numbers less than n .
670	Return eps for a given dtype .
671	Hager - Huang model .
672	Fix step size .
673	Perform a bracket search .
674	Helper function for line search .
675	Perform the inner bisection search .
676	Prepare arguments for evaluation .
677	Convert values to str .
678	Quadrature scheme for softmax normal .
679	Quadrature scheme for softmax normal .
680	Check if a quadrature parameter is valid .
681	Determine the shape of a batch event .
682	Interpolate grid points .
683	Interpolate grid points with scale .
684	Applies a linear operation to w .
685	Concatenate vectors .
686	Computes the log - sum of a vector .
687	Computes the log sum of ms and vs .
688	Return the matrix multiplied by ms .
689	Extracts log probabilities .
690	Gets the marginal probabilities .
691	Calculates the marginal distribution of the latent variables .
692	Starts the posterior mode .
693	Generate random directions .
694	Sample from the next step .
695	Call a function and return its result .
696	Pad x to the final_rank .
697	Slice a single step .
698	Build a TFD .
699	Build a factorized variational loss .
700	Minimize in - graph .
701	Computes the mean and variance of a time series .
702	Returns the initial value of a masked time series .
703	Applies the batch shape to all distributions .
704	Computes the factored joint joint distribution .
705	Calculates the sum of the multivariate normal distributions .
706	Calculate empirical statistics .
707	Expand the trailing dimension .
708	Canonicalize observed time series .
709	Computes a mixture of covariance draws .
710	Return the range in the range .
711	Create a function that returns a summary statistic .
712	Unify a distribution function .
713	Given a list of dist_fn_args return the distribution names .
714	Gets the arguments of a function .
715	Computes the KL divergence between two distributions .
716	Build the distribution function .
717	Resolve the distribution functions .
718	Compute the entropy of distributions .
719	Check that x is in the support of the distribution .
720	Create image summary .
721	Visualize the replay .
722	Visualize inputs .
723	Summarize a distribution .
724	Summarize the mean in nats and units .
725	Return the TFD matrix .
726	Initialize the graph .
727	Compute the LSTM .
728	Call the convolution .
729	Generate a Gaussian model .
730	Reconstruct the model .
731	Sample from the static prior .
732	Sample from the dynamic prior .
733	Tensor s batch shape .
734	Returns the batch shape .
735	Make a state space model .
736	Sample the prior from the model .
737	Compute the min_event_ndims .
738	Convert vector size to square matrix size .
739	Return the indices of the given values .
740	Sort the values along the given axis .
741	Ntr function .
742	ndtr function .
743	Ntrips .
744	Log standard deviation .
745	Logarithmptotic series .
746	Resolve x .
747	Log density of x .
748	Computes the joint log probability of text messages .
749	Benchmark text messages .
750	Return whether the index_points is a multivariate Gaussian .
751	Returns the marginal distribution .
752	Returns the index_points .
753	Create an IF stack .
754	Perform one step of the kernel .
755	Bootstrap the results .
756	Return the outer squared difference between two vectors .
757	Compute the value and its Jacobian .
758	Prevent the second derivative .
759	Applies the distribution to x .
760	Split the covariance into a list of marginal values .
761	Decompose model from posterior and covariance matrix .
762	Decompose the model using the observed time - space model .
763	Decompose forecast by component components .
764	Convert a dense tensor to a SparseTensor .
765	Wrap an operator .
766	Convert tensor to text representation .
767	Tensor shape .
768	The sample shape .
769	Sample from the distribution .
770	Evaluate the expression .
771	Returns a numpy array .
772	Conjugates a Gaussian prior .
773	Create a default template .
774	Generate a unit normal .
775	Log the probability of x .
776	Log normalization .
777	Return the common dtype of args .
778	Create a function to broadcast a summary statistic .
779	Broadcasts a tensor to target_tensors .
780	PDF at the given peak
781	Calculate the effective sample size .
782	Calculate the effective sample size for a single state .
783	Computes the potential scaling reduction for a single state .
784	Return the size of x along axis .
785	Broadcast a list of states .
786	Quadrature quadrature schemes .
787	Quadrature schemes .
788	Merge two maps .
789	Return a new _Mapping with field removed .
790	Merge two values .
791	deep_tuple recursively
792	Left - double increment .
793	Find the indices of the best interval of x .
794	Slice the left end of a batch .
795	Sample from x_initial .
796	Slice slice sampling .
797	Turn a function into a setter .
798	Create a log joint function .
799	Get the inputs of a function .
800	Block of convolution .
801	Builds a tree .
802	Decorator for embedding function .
803	Check if two states have a unit turn .
804	Leapfrog approximation .
805	Calculates the joint probability of the current target .
806	Bernoulli distribution .
807	Creates a default scale function .
808	Create a mean field normal function .
809	Default multivariate normal distribution function .
810	Deserialize function from serialized serialization .
811	Serialize a function .
812	Broadcast from_structure to_structure .
813	Convert nested structure to tensor .
814	Convert args to tensor .
815	Call a function with args .
816	Returns a dictionary of attributes for Tensor - like objects .
817	Make a mixture prior .
818	Pack images into multiple images .
819	Download a file from a directory .
820	Builds fake inputs .
821	Validate block_sizes .
822	Checks whether the given tensor has no broadcasting .
823	Create a tril from a tensor .
824	Bernoulli logits .
825	Create a normal layer .
826	Create a Poisson distribution .
827	Mala euler method .
828	Calculate drift part .
829	r Compute log density correction .
830	Call a volatility function and return its gradients .
831	Broadcast volatility .
832	Make an AR transition matrix .
833	Return the sample shape .
834	Reshapes input and output .
835	Call the given function and return the result .
836	Computes the B - TR .
837	Sample distributions from the model .
838	Allocates the Dirichlet distribution .
839	Create a LDA variational layer .
840	Given a list of topics and a vocabulary return a list of strings .
841	Creates a new dataset .
842	Build fake inputs .
843	Builds input_fn .
844	Minimize the gradient .
845	Add the control dependencies to the codebook .
846	Save images to a file .
847	Visualize training .
848	Loads a NetworkNIST dataset .
849	Convert a dtype to a numpy dtype .
850	Returns the base_dtype of a dtype .
851	Check if dtype is boolean .
852	Check if dtype is complex .
853	Returns the maximum value of a given dtype .
854	Returns the name of a dtype .
855	Returns the size of a given dtype .
856	r Ensures that items are of the same type .
857	Asserts that dtype has the same type .
858	Minimize an objective function .
859	Nelder - Mead algorithm .
860	Return a function that accepts a simplex .
861	Create a function that expands an objective function .
862	Return a function that evaluates to inside a contract .
863	Shrink a simplex into a single vertex .
864	Replace x with replacement .
865	Check convergence .
866	Prepare arguments for the objective function .
867	Prepare arguments for evaluation .
868	Prepare arguments for the given initial vertex .
869	Evaluates the given objective function .
870	Plot the weight posterior of the qm and qs .
871	Plot the heldout prediction .
872	Build fake data
873	Get Keras config .
874	Deserialize from a dict .
875	Wrapper for numpy . matmul .
876	Compute the standard variance .
877	Assigns a scalar value to a log - moving mean .
878	Make a columnar .
879	Generates a random binemacher .
880	Random rayleigh .
881	Helper function for selecting a scalar condition .
882	Finish log_prob for a given event .
883	Finish the probability computation .
884	Rotate dimensions .
885	r Deprecated .
886	Validate BatchNorm layer .
887	Slice a single parameter .
888	Convert slice parameters to a dictionary .
889	Apply a single step to a distribution .
890	Apply slices to a distribution .
891	Slice a distribution .
892	Fit model to model .
893	Returns a function that computes a new convergence criteria .
894	Prepare arguments for training .
895	Returns the number of columns in x .
896	Prefer a function from a static function .
897	Copy the docstring of a function to a new_fn .
898	Convert a predicate into a boolean value .
899	Calculate the rank of a shape .
900	Create a case for a given predicate .
901	Create a name scope .
902	Compute the mean and stddev .
903	Creates a tril scale .
904	Creates a diagonal scale .
905	Calculate shapes from a loc and scale .
906	Check if a scalar scale is a diagonal scale .
907	Check that a scalar distribution is valid .
908	Pad mixture dimensions .
909	Creates a condition from true and false values .
910	Moves a dimension from one dimension to another .
911	Check that x is non - negative form .
912	Check if two shapes are equal .
913	Try to get a static value .
914	Check if dt is known by the dtype .
915	Return True if dt is known by dtype .
916	Returns the largest integer of the given dt .
917	Return the smallest integer for the given dtype .
918	Check if dt is an integer like object .
919	Check that categorical_parameters are valid .
920	Calculates the log of the total permutations .
921	Transpose x by shift .
922	Creates a vector from true and false values .
923	Prefer the shape of two shapes .
924	Generate a new seed .
925	Computes the tridiag .
926	Returns the dimension size of x along axis .
927	Process quadrature grid and probabilities .
928	Extracts the arguments from the parent frame .
929	Expand x into a vector .
930	Creates a new output_tensor with the given output_tensor .
931	Check if rightmost_transposed_ndims is valid .
932	Ensure perm is valid .
933	Return the event shape .
934	Concatenate two tensors .
935	Returns the dimensions of x .
936	Return a copy of x with another .
937	Returns a copy of x with the specified rank .
938	Checks that two static_target_shape are equal .
939	Augment the sample shape .
940	Builds a Backward pass step .
941	Backward smoothing .
942	Builds a Kalman filter step .
943	Perform a linear Gaussian update .
944	Calculate the predicted mean and covariance matrix .
945	Builds a mean step .
946	Builds a covariance step .
947	Builds a sample step .
948	Propagate mean .
949	Propagate covariance matrix .
950	Forward pass through the covariance matrix .
951	Sample from the joint distribution .
952	Smooths the mean and covariance .
953	Calculate joint mean .
954	Build the joint covariance matrix .
955	Convert latent_means to observations .
956	Calculate log normalization .
957	Compute mode .
958	rotate samples by mean direction .
959	Sample from 3d .
960	Return a copy of a function .
961	Remove all keys with a given value .
962	Recursively replace all values in a dict .
963	Get samples from distribution .
964	Return True if x is a namedtuple - like object .
965	Create a base case .
966	Return a subclass based on an accepted value .
967	Safe sum op .
968	Calculate the value and gradient of fn .
969	Call fn with gradient and gradient .
970	Create a loop for a loop .
971	Apply a trace function to each element .
972	Decorator for the innermost setter .
973	Wrap a getter function to get the innermost results .
974	Create a new kernel from a kernel .
975	Replace event_shape with output_shape .
976	Replace event_shape with event shape .
977	Check shape of shape .
978	Return True if converged and failed .
979	Gets initial state arguments .
980	Line search step .
981	Returns a function that restricts the value and gradient .
982	Update the position of the current position .
983	Check convergence .
984	Broadcast value to target .
985	harmonic number .
986	Create a proposed proposed function .
987	Get field from kernel results .
988	Calculate the exchanged states .
989	Return the variance scaling scaling term .
990	Return a function that returns the Jacobian of the trajectory .
991	Return a function that transforms a bijector .
992	Return a function that transforms a bijector .
993	Transforms a single step .
994	Like tf . where but with a condition .
995	Compute the secant2 .
996	Compute secant2 .
997	Internal update function .
998	Calculate the value and gradient .
999	Perform a bracket search .
1000	B bisect algorithm .
1001	Implementation of bisect .
1002	Determines whether two values are finite .
1003	Returns True if the two values are satisfied .
1004	Return the secant between two values .
1005	Create a step size update policy .
1006	Computes the amplitude of a single step .
1007	Computes log - acceptance correction .
1008	Perform one step of the Hamiltonian .
1009	Bootstrap the simulation .
1010	Binary resnet .
1011	Resnet block .
1012	Create a directory encoder .
1013	Create a decoder for topics and labels .
1014	Create a TFD .
1015	Sample a chain .
1016	Create an exponential family .
1017	Creates a deterministic deterministic .
1018	Create a trainable gamma .
1019	Loads the nips 2011 papers .
1020	Initialize params .
1021	Returns the kl function for two types .
1022	Reads an image from a file .
1023	Download sprites .
1024	Create a single character .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a sprite .
1028	Ensure that distributions are valid .
1029	Flatten a list of kernels .
1030	Flatten a list of kernels into a single product list .
1031	Builds fake data .
1032	Count the number of integers .
1033	Find bins of x .
1034	Calculate a histogram .
1035	Return quantiles of x .
1036	Return the ndims of x .
1037	Add dimensions to x .
1038	Make a non - negative axis list .
1039	Transpose x to flat end .
1040	Sort a tensor .
1041	Create state space model for each component .
1042	Calculate the alpha factor .
1043	Reverse logarithm of logu .
1044	Computes the Jensen - Shannon function .
1045	Calculate the Pearson logu .
1046	Calculate a squared hellinger .
1047	Triangular triangular matrix .
1048	T_power .
1049	Logarithm1p .
1050	Computes the Jacobian of the Jacobian .
1051	Modified GAN .
1052	Calculate dual CSiszar function .
1053	Symmetrized CSiszar function .
1054	Computes the monte carlo divergence .
1055	Wrapper for vim .vim .vimzar .
1056	Assert that ndims are consistent .
1057	Helper for batch_gather .
1058	Broadcasts a single event to the given params .
1059	r Compute the expectation of the given log space .
1060	Broadcast event and samples .
1061	Minimize the value and gradient .
1062	Create control inputs .
1063	Update the inverse Hessian .
1064	Calculate the inverse Hessian based on gradient delta .
1065	Matrix multiplication .
1066	Computes the product of two tensors .
1067	Transpose matrices .
1068	Pad x with ndims .
1069	Sum ndims along ndims .
1070	Compute the square root of x .
1071	Return the common dtype of a list of arguments .
1072	Minimize the given value and gradient .
1073	Get initial state .
1074	Returns the search direction .
1075	Make an empty queue for k .
1076	Push new_vecs onto the queue .
1077	Return a boolean mask of elements in x .
1078	Creates a shape of x with large values .
1079	Generate a matrix of uniform log - likelihood .
1080	Generate a weight matrix for rejection sampling .
1081	Computes the confidence intervals for each sample .
1082	Compute the true volumes of a correlation matrix .
1083	Series of von Mises .
1084	Calculate the cumulative density of von Mises .
1085	Perform one step of a single step .
1086	Minimize an objective function .
1087	Calculate initial args .
1088	Find the best value in a population .
1089	Checks whether a population is converged .
1090	Create a starting population .
1091	Perform binary crossover on a population .
1092	Gets the mutants of a population .
1093	Generate a random mixing indices .
1094	Ensure tensor_list is a list .
1095	Convert to Tensor .
1096	Soft threshold .
1097	Clip t by value .
1098	Builds the input pipeline .
1099	Plot generated images .
1100	Convert a list of productions into a string .
1101	Run the LSTM model .
1102	Builds the latent matrix .
1103	Computes the tensor of x .
1104	Inverse of the transform .
1105	Return the rank of a matrix .
1106	Pivot of a matrix .
1107	Lolve the lower upper and perm .
1108	Inverse of the linear matrix .
1109	Construct assertions for lower_upper and perm .
1110	Calculate assertions for linear equations .
1111	Return the diagonal of the sparse matrix .
1112	Check if a matrix is valid .
1113	Calculate the gradient of the negative log - likelihood .
1114	r Fit to a sparse model .
1115	Generate slices for the given number of blocks .
1116	Generate a mask .
1117	Create a dense layer .
1118	Create input order .
1119	Create a list of hidden degrees .
1120	Create masks from a list of degrees .
1121	Create a masked initializer for a mask .
1122	Builds the graph .
1123	Call the autoregressive layer .
1124	Draw samples from the multinomial distribution .
1125	Create a dummy multivariate normal matrix .
1126	Returns a function that creates a tfd .
1127	Convert parameters to weights .
1128	Determine the depth of the graph .
1129	Return the best - order of the tree .
1130	Flatten a list of named_makers .
1131	Build the distribution function .
1132	Calculates the variational loss .
1133	Computes an optimal variance .
1134	Builds a function that evaluates to true day of year .
1135	Build matrix of effects to residuals .
1136	Builds a transition matrix .
1137	Build a seasonal transition noise function .
1138	Build a seasonal transition noise .
1139	Check if observation data is empty .
1140	Validate observation data .
1141	Add a new scheduler to the scheduler .
1142	Set the checkpoint to checkpoint_path .
1143	Clip the gradients of the gradient .
1144	Optimize the model .
1145	Set train summary .
1146	Sets the value summary
1147	Create an optimizer .
1148	Set training data for this dataset .
1149	Set a summary trigger .
1150	Loads images and labels from training data .
1151	Returns a list of tuples of all news20 texts .
1152	Get a dictionary of wavelengths and their values .
1153	Compile the BigDL .
1154	Fit model to data .
1155	Evaluate the BigDL function .
1156	Predict for x .
1157	Get MNIST dataset .
1158	Preprocess the MNIST dataset .
1159	Return the end trigger
1160	Validate optimizer .
1161	Return the value of the field .
1162	Call a bigdl function .
1163	Call a Java function .
1164	Convert RDD to JavaObject .
1165	Convert Python object to Java .
1166	Get an activation by its name .
1167	Initialize from ndarray .
1168	Convert image feature to ndarray .
1169	Read from parquet file .
1170	Write data to file .
1171	Get an image of the current frame
1172	Convert LocalImageFrame to numpy arrays .
1173	Returns an RDD of label tensors .
1174	Return a list of predictions for the distributed image .
1175	Predict for x .
1176	Fit the optimizer .
1177	Applies the transform to the dataset .
1178	Save a Keras model to disk .
1179	Build Keras model .
1180	Predict class based on dataset .
1181	Sets the weights .
1182	Returns the weights of the layer .
1183	Save tensorflow to file .
1184	Call Java function .
1185	Loads aTorch model from a torch file .
1186	Load Keras model .
1187	Create a new value from a jcriterion .
1188	Load weights from json file .
1189	Loads the IMDB dataset .
1190	Builds a Keras model .
1191	Returns input shape .
1192	Returns the output shape .
1193	Get MNIST dataset .
1194	Extract data sets from WHOLE - 1M dataset .
1195	Return the full path to the bigDL classpath .
1196	Returns True if the Spark version is less than 2 .
1197	Exports a checkpoint from a checkpoint .
1198	Save tensor to file .
1199	Expand the given units along an axis .
1200	Precompute symbols in the given trie .
1201	Attention layer .
1202	Attention layer .
1203	Computes the BLEU similarity between the reference and the translation corpus .
1204	Create a log file .
1205	Logs a message .
1206	Calculate summaries for gradients .
1207	Dump weights to outfile .
1208	Read data by configuration .
1209	Train model from config .
1210	Interact with an agent .
1211	Convert a list of labels to one - hot labels
1212	Convert proba to one - hot labels .
1213	Create a config session .
1214	Load the model from disk .
1215	Get the momentum variable .
1216	Update the graph variables .
1217	Calculate F1 score
1218	Process a single word .
1219	Create a stacked convolution layer .
1220	Create a Bi - neural network .
1221	Build an RNN layer .
1222	A stacked high level convolution layer .
1223	Build an embedding layer .
1224	Create a Cudnn GRU .
1225	Create a Cudnn compatible GRU .
1226	Create Cudnn LSTM .
1227	Deprecated .
1228	Cudnn Bi - GRU .
1229	Cudnn - LSTM .
1230	Create a cudnn_gru layer .
1231	Dropout layer .
1232	Builds the LSTM network .
1233	Builds word convolution layer .
1234	Build basic network .
1235	Trains the model on a batch .
1236	Predict on a batch .
1237	Convert a sentence into a numpy array .
1238	Convert a list of tags to a numpy array .
1239	Compute the BLEU measure .
1240	Verify an S3 URL .
1241	Extract certificates from a text string .
1242	Verify certificate chains .
1243	Verify the signature .
1244	Verify an Amazon SageMaker certificate .
1245	Return JSON representation of all control controls .
1246	Return a list of managed control controls .
1247	Return a list of telegram controls .
1248	Return a list of all the motors .
1249	Main entry point .
1250	Wrap a function as a context manager .
1251	Wrap a function with keras .
1252	Computes the accuracy .
1253	Calculate accuracy .
1254	Initialize a pre - trained model .
1255	Read data from file .
1256	Create an Agent for Hello World .
1257	Convert x to one - hot array .
1258	Pretty - print metrics .
1259	Populates the default settings directory .
1260	Loads the model from disk .
1261	Save the model to disk .
1262	Creates a train operation .
1263	Search the given word .
1264	Make the default operation cost .
1265	Start the timer .
1266	Handle a request .
1267	Run the agent .
1268	Generate response .
1269	Handle an intent request .
1270	Handle launch event .
1271	Handle an unsupported request .
1272	Pretty print the struct .
1273	Calculate ELMo loss .
1274	Build chainer .
1275	Interactively interact with the given configuration .
1276	Runs prediction on a given file .
1277	Read in a text file .
1278	Return a function from a string .
1279	Decorator to register a metric .
1280	Look up a metric by its name .
1281	Return decay type from string .
1282	Returns the best value for the given values and losses .
1283	Embed tokens .
1284	Read requirements from requirements . txt
1285	Calculate the log loss .
1286	Exports weights to a hub .
1287	Pretty - print details .
1288	Build an ecommerce agent
1289	Main function .
1290	Download a file from disk .
1291	Unpack a tar file .
1292	Download the given url and download it .
1293	Recursively updates dictionaries .
1294	Set the path with the MD5 extension .
1295	Set a query parameter .
1296	Alexa response
1297	Serialize control to JSON .
1298	Return a JSON - ready representation of the card .
1299	Return JSON representation of the control .
1300	Returns a ms_bot framework for this message .
1301	Calculate the F1 of a squad .
1302	Calculate the k - th recall at k_true .
1303	r Check if GPU is available .
1304	Parse a config property .
1305	Parse a configuration file .
1306	Expand a path .
1307	Build a component from a dictionary .
1308	Process incoming requests .
1309	Delete a conversation .
1310	Refresh valid certificates
1311	Verify a request .
1312	Handle a signed request .
1313	Return class from string .
1314	Register a model class .
1315	Get a model class by name .
1316	Get GLM regularization path .
1317	Make a GLM model .
1318	Create an H2OCluster object from a list of keyvals .
1319	Shutdown the H2O instance .
1320	Check if H2O server is running .
1321	Show the status of the H2O cluster .
1322	List all jobs .
1323	Return a list of timezones .
1324	Copy properties from another h2ocluster .
1325	metalner parameters .
1326	Runs test_func and raises an exception .
1327	Retrieve a summary of a Frame
1328	Delete a frame by key .
1329	Get a list of model builders .
1330	Validate model parameters
1331	Compute the metrics for a given model and frame
1332	Returns the current model metrics .
1333	Delete a model by key .
1334	Pretty - print the data .
1335	Run one or more EC2 instances .
1336	Terminate instances .
1337	Stop one or more EC2 instances .
1338	Start EC2 instances .
1339	Reboot one or more EC2 instances .
1340	Wait for SSH to be alive .
1341	Return the full name of a method .
1342	Find a function from a frame .
1343	Get the signature string .
1344	Wrap text into a single space .
1345	Wait for the job to complete .
1346	Trains the model .
1347	Train the model .
1348	Get parameters as dict .
1349	Signal handler .
1350	Wipe the output directory .
1351	Remove RSandbox directory
1352	Scrape the port from stdout
1353	Scrape cloud size from stdout
1354	Stop the JVM .
1355	Stop all nodes
1356	Returns the client s IP address
1357	Return the connection s port
1358	Get ROC curve .
1359	Determine the size of the model .
1360	Compute the mean absolute error .
1361	Calculate the mean squared squared error .
1362	Calculate the median absolute error .
1363	Compute the variance of the predicted variance .
1364	Raises H2OTypeError if var is not of expected type .
1365	Raise H2OValueError if v matches a regex .
1366	Raise H2OValueError if v does not satisfy condition .
1367	Extracts the arguments from the frame .
1368	Check if var is of type vtype
1369	Return the name of the given vtype .
1370	Generate the source code for lambda functions .
1371	Check if variable is invalid
1372	Check if var is an enum
1373	Returns the current configuration .
1374	Read config files .
1375	Generate log files .
1376	Execute the model .
1377	Store the model progress .
1378	Recalculate the model parameters .
1379	Estimate completion time .
1380	Guess the next poll interval .
1381	Compute the progress at a given time .
1382	Calculate the time at the given time .
1383	Writes text to stdout .
1384	Compute the widget sizes .
1385	Get the terminal size
1386	Set the file encoding .
1387	Compute the encoder for the given frame .
1388	Return a new H2OFrame .
1389	Refresh the frame .
1390	Return the type of a column
1391	Columns by type .
1392	Return a summary of the H2OFrame .
1393	Describe the frame .
1394	Return the first rows of the table .
1395	Multiply the current frame with another frame
1396	A list of levels .
1397	get the number of levels
1398	Set the level of this frame .
1399	Set the domain levels .
1400	Rename columns .
1401	Set column names .
1402	Set the column name .
1403	Return True if this row is in the list .
1404	Return the k - fold column .
1405	Return the k - fold column .
1406	Print the structure of the object .
1407	Return the table as a pandas DataFrame .
1408	Pop the column at the given index .
1409	Return a new H2OFrame with the given value .
1410	Concatenate frames .
1411	Bind dataframe to another column .
1412	Return a new H2OFrame with rows removed .
1413	Splits the video using the specified ratios .
1414	Group by column .
1415	Fill missing values along specified axis .
1416	Impute values for a column .
1417	Merge two columns .
1418	Return a new version of this H2OFrame .
1419	Insert missing values .
1420	return the variance of the table
1421	Compute the correlation matrix .
1422	Calculate the distance between two columns .
1423	Convert to a factor .
1424	Split the DataFrame into two columns .
1425	Count the number of rows matching a pattern .
1426	Return a subset of this frame .
1427	Return a new H2OFrame with rows removed .
1428	Return the entropy of this table .
1429	Return the number of substrings for path_to_words .
1430	Return the table of rows in this table .
1431	Calculate a histogram of this object .
1432	Compute the index of the values in the current table .
1433	Replace first occurrence of pattern .
1434	Return a new H2OFrame with the upper upper .
1435	Return a new expression that matches a pattern .
1436	Return a new H2OFrame with rows removed .
1437	Compute the difference between two frames .
1438	Return an expression where the values are NaN .
1439	Return a new H2OFrame representing the hour of this interval .
1440	Return a new H2OFrame with a seed .
1441	Slatified split .
1442	Return a cut on this frame .
1443	Return the index of the maximum value .
1444	Apply a function to each axis along an axis .
1445	Parse text .
1446	Parse a text file .
1447	Move the cursor by a given column .
1448	Parse the text and return a list of nodes .
1449	Return the size of the cells
1450	The centers of the model .
1451	Returns a list of standard deviations std .
1452	Open an H2OO connection .
1453	Make a request to an API endpoint
1454	Check version of H2O_O_Python .
1455	Import a module by path .
1456	Upload a file to a destination_frame .
1457	Imports data from a text file .
1458	Imports a table into a table .
1459	Import an SQL table .
1460	Import an SQL SELECT query .
1461	Parse a raw H2OO frame .
1462	Make a deep copy of a DataFrame .
1463	Returns an H2O model .
1464	Get a grid by ID .
1465	Get a frame by ID
1466	Downloads the given model to a POJO .
1467	Download a H2OFrame to a CSV file .
1468	Download all H2O logs .
1469	Exports a single frame
1470	Convert a pandas object into a list .
1471	Show a demo function .
1472	Loads a dataset from h2o_data
1473	Calculates the metrics based on predicted and actual values .
1474	Uploads a key to the API
1475	Upload a custom metric .
1476	Ensure frame id is valid .
1477	Convert a number of bytes into a human - readable string .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Run the mojo_predict on the given dataframe .
1481	Parses a csv file and returns a prediction .
1482	Deprecated decorator .
1483	Wait for the job to complete .
1484	Calculate deepfeatures for each model
1485	Print a summary of all the models .
1486	Show the hyperparameters .
1487	Get a list of hyperparameters .
1488	Returns a dictionary of hyperparameters .
1489	Returns a new H2OodSearch object representing the grid .
1490	Calculate the F1 of each model .
1491	Returns the varimp data
1492	Projects the model to the target
1493	Generate a scree plot
1494	Translate CamelCase name to CamelCase .
1495	Remove indentation from text .
1496	Extracts the run into a dictionary
1497	Main function for extracting GLRMRuntimeLog .
1498	Close the H2O session .
1499	Return a unique session id .
1500	Start logging .
1501	Prepare data payload .
1502	Prepare file payload .
1503	Log a new transaction .
1504	Log the end of an HTTP transaction .
1505	Logs a message to the logging destination .
1506	Process the HTTP response .
1507	Print msg if verbose is enabled .
1508	Get an automl .
1509	Downloads the Pojo model for the leader .
1510	Download a mojo .
1511	Fit mean and standard deviations
1512	Scale the data .
1513	Inverse transform .
1514	Extracts true string from string
1515	Find node_name in each line
1516	Find the global git hash branch
1517	Find the build timeout
1518	Find a build failure
1519	Find the build id of the build_id
1520	Extracts the job build url from a URL string .
1521	Grab all test messages from a file .
1522	Saves the test dictionary .
1523	Update the test summary file .
1524	Write the content of a file
1525	Write Java message to text file .
1526	Load Java messages to ignore .
1527	Normalize an enum constant .
1528	Finds all synonyms for a word .
1529	Poll the status of the job .
1530	Save the Assembly to a pojo file .
1531	Fit an H2OFrame to a frame .
1532	Calculate the percentile of a sorted list .
1533	Return a dict with default values .
1534	returns the actual parameter values
1535	Run deepfeatures on a test
1536	Returns the scoring history of the model
1537	Show the details of the model .
1538	Extract variable impances
1539	Calculate the residuals of the model .
1540	Return the coefficients of the model .
1541	Downloads the genmodel to the given path .
1542	Download the model to the specified path .
1543	Save current model details .
1544	Checks that the targets are the same .
1545	List of cross validation models .
1546	H2OOGM .
1547	H2OODA demo .
1548	Demonstrate performance .
1549	Wait for a keypress .
1550	Return the table as a DataFrame .
1551	Print the table .
1552	Starts a JVM .
1553	Find the path to the jar file .
1554	Generate jar paths .
1555	Return a table containing the hit ratio table .
1556	Wrapper for csv . DictWriter .
1557	Convert a package name to its absolute path .
1558	Convert a directory path to a URI .
1559	Return a list of functions and classes .
1560	Generate documentation for a module .
1561	Discover the modules in the package .
1562	Create documentation for all modules .
1563	Write the built - in index file to outdir .
1564	Returns a list of cell values
1565	Loads the message dictionary .
1566	Add new messages to the global dictionary
1567	Update the message dictionary .
1568	Extracts the message from a file
1569	Save the dictionary
1570	Prints out the dictionary to file .
1571	Parse command line arguments .
1572	Print program usage .
1573	Locate all python files in a given directory .
1574	Find the spell in the file .
1575	Main function .
1576	Returns a new H2OFrame with transformed data .
1577	Summarize all test runs
1578	Extract print save in terminal .
1579	Plot the ROC curve .
1580	Compute confusion matrix .
1581	Check if a Deep Water model is available .
1582	Trim data back to oldest
1583	Return list of endpoint groups .
1584	Update site forward .
1585	Serialize data to JSON .
1586	Comment user s feed .
1587	Get username and password .
1588	Likes a user .
1589	Like movies with hashtag .
1590	Check if a user is not a bot .
1591	Read a list of strings from a file .
1592	Schedule the message for this message
1593	Schedule the message .
1594	Download a VPN site .
1595	Guess service information from a spec path
1596	Execute an update command .
1597	Delete an application by its definition .
1598	Create or update an existing application definition .
1599	Build the URI for a request .
1600	Create a connection to the given request .
1601	Perform an HTTP request .
1602	Execute a list of script actions .
1603	Check a frontdoor name availability .
1604	Purge deleted items from a vault .
1605	Get the authorization server .
1606	Validate the request URI .
1607	Load the azure CLI profile .
1608	Get credentials for Azure CLI .
1609	Perform a query .
1610	Check availability of a named service .
1611	Open a new HTTP request .
1612	Set the timeout for this request .
1613	Sets a request header .
1614	Get all the response headers .
1615	Send a request to the client .
1616	Status of the request .
1617	Status text .
1618	Return the response body .
1619	Sets the client certificate .
1620	Send a PUT request to the server .
1621	Put a request header .
1622	Send a request body .
1623	Return a _Response object .
1624	Return a human readable id .
1625	Convert an element name to a serialization name .
1626	Verify a face .
1627	Add a new job .
1628	Gets the properties of an entry .
1629	Get the children of the given node .
1630	Finds the namespaces of all the namespaces of the child .
1631	Convert an XML string to a ServiceBus Namespace object .
1632	Return a ServiceBusRegion object from an XML string .
1633	Return a NamesResponse object from an XML string .
1634	Convert xml string to Metrics object .
1635	Replace runbook content .
1636	List recommendations .
1637	Update an existing kb .
1638	Get a list of member groups .
1639	Build a package from a pr number .
1640	Import data from a list of files .
1641	Publish a runbook .
1642	Renew the session .
1643	Replace one or more words .
1644	Add a new value .
1645	Returns the storage account properties for the given service .
1646	Returns a list of storage account keys for the given service .
1647	Regenerates the storage account keys for the specified service .
1648	Creates a new storage account .
1649	Updates an existing storage account .
1650	Deletes the specified storage account .
1651	Checks if a storage account name is available .
1652	Gets the service properties .
1653	Creates a new hosted service .
1654	Deletes a hosted service .
1655	Creates a new deployment .
1656	Deletes a deployment .
1657	Swaps an existing deployed deployment .
1658	Changes the configuration of a service to a deployment .
1659	Updates a deployment status .
1660	Upgrade an existing deployment .
1661	Walks up an upgrade domain .
1662	Reboot a role instance .
1663	Deletes multiple role instances from a deployment .
1664	Checks if the specified service name is available .
1665	Lists the certificates for the specified service .
1666	Retrieves a service certificate .
1667	Adds a new service certificate .
1668	Deletes a service certificate .
1669	Retrieves the management certificate .
1670	Adds a new subscription certificate .
1671	Deletes the management certificate .
1672	Retrieves the properties of an affinity group .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	Returns a list of subscription operations .
1676	Creates a reserved ip address .
1677	Deletes a reserved ip address .
1678	Adds a reserved ip address to a deployment .
1679	Disassociate a reserved ip address .
1680	Gets a reserved IP address .
1681	Gets the specified role .
1682	Creates a new virtual machine deployment .
1683	Adds a role to a service .
1684	Updates a role .
1685	Deletes a role from a service .
1686	Captures a role .
1687	Starts a role in the specified deployment .
1688	Starts the specified roles for the specified service .
1689	Restarts a role .
1690	Shuts down the specified role .
1691	Shuts down the specified roles .
1692	Adds a DNS server to a service .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	List all resource extensions for a given publisher .
1696	Replicates a VM image .
1697	Unplicate a VM image .
1698	Shares a VM image with the specified permissions .
1699	Creates a new VM image .
1700	Deletes the specified VM image .
1701	Returns a list of VM images .
1702	Updates a VM image .
1703	Adds an image to this project .
1704	Updates an OS image .
1705	Updates an existing image using an image reference .
1706	Deletes an image .
1707	Gets the data disk for a specific service .
1708	Adds a data disk to a service .
1709	Updates a data disk .
1710	Deletes a data disk .
1711	Adds a disk .
1712	Updates the specified disk .
1713	Deletes the specified disk .
1714	Get the status for the specified management group .
1715	Build the receiver .
1716	Fetch next message .
1717	Renew the lock .
1718	Create a virtual machine scale set .
1719	Convert to a single placement group .
1720	Display a screen text .
1721	Create a new key .
1722	Imports a key in the specified vault .
1723	Updates an existing key .
1724	Set a secret .
1725	Set a new certificate .
1726	Create an instance from a connection string .
1727	Get a subscription client .
1728	List all subscriptions for a specific topic .
1729	Sends multiple messages .
1730	Get a sender .
1731	Create a receiver .
1732	Create a new deadletter receiver .
1733	Parse the response for an asynchronous operation .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation status .
1737	Retrieves the status of an operation .
1738	Update the management header .
1739	Validate the build package .
1740	Get a list of certificates .
1741	Returns a list of service regions .
1742	Returns a list of Namespaces .
1743	Gets a namespace by its name .
1744	Creates a new namespace .
1745	Deletes a namespace .
1746	Checks if a namespace is available .
1747	Returns a list of the topics associated with the given name .
1748	Returns a list of NotificationHubs .
1749	Lists all the Relays .
1750	Gets metrics rollups from a queue .
1751	Get metrics rollups for a particular topic .
1752	Gets a list of MetricRollups for the specified metric .
1753	Gets a list of metrics for a given metric .
1754	Create a context .
1755	Create a virtualenv with pip installed packages .
1756	Creates a new server .
1757	Sets the admin password for a server .
1758	Lists the server quotas for the specified server .
1759	Gets the event logs for a server .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	Lists all firewall rules for a server .
1764	Returns a list of service - level objects .
1765	Creates a new database .
1766	Updates an existing database .
1767	Delete a database .
1768	Returns a list of databases .
1769	List the top level agreements for a domain .
1770	Close the service .
1771	Close receiver .
1772	Get the current session state .
1773	Set the session state .
1774	Receive deferred messages .
1775	Merge existing sources .
1776	Validate the challenge .
1777	Purge entries from a table .
1778	Return an error .
1779	Creates a new queue .
1780	Deletes the specified queue .
1781	Gets the details of a queue .
1782	Creates a new topic .
1783	Gets the specified topic .
1784	Creates a new rule .
1785	Gets the specified rule .
1786	Lists the rules for a particular subscription .
1787	Creates a new subscription .
1788	Gets the details of the specified subscription .
1789	Lists the subscriptions for the specified topic .
1790	Sends a message to the specified topic .
1791	Unlocks a subscription message .
1792	Sends messages to a queue .
1793	Unlocks a queue message .
1794	Receive a queue .
1795	Receive a message from a given topic .
1796	Creates an event hub .
1797	Updates an existing event hub .
1798	Gets the details of an event hub .
1799	Sends an event to a specific hub .
1800	Add the content - length header to the request .
1801	Build authorization string .
1802	Is the token expired?
1803	Get a token from the service .
1804	Updates the request path and the query string .
1805	Reset a client profile .
1806	Deletes the message from the queue .
1807	Unlock the queue .
1808	Renews the lock .
1809	Adds the headers to the request .
1810	Return the body as a batch body .
1811	Get the cluster health information .
1812	Gets the cluster health based on a policy .
1813	Unprovision an application type .
1814	Retrieve a list ofrepair tasks .
1815	Submit a property batch .
1816	Generic error handler .
1817	Start a web site trace operation .
1818	List changes between two resources .
1819	Swap an existing slot .
1820	Get events by type .
1821	Add a face from a stream .
1822	Handle redirect requests .
1823	Creates a new migration .
1824	Publish events .
1825	Move resources from one resource group to another .
1826	Set the profile .
1827	List policy results for a given management group .
1828	Create a new queue .
1829	Deletes a queue .
1830	Create a topic .
1831	Deletes the specified topic .
1832	Creates a new subscription .
1833	Parse a connection string .
1834	Get the properties of the queue .
1835	Is locked?
1836	Create a session .
1837	Create a new subscription .
1838	Exports request rate by interval .
1839	Return the results from the results_queue .
1840	Bulk add tasks to the results queue .
1841	Main thread for the task .
1842	Build a config dictionary .
1843	Reset a user s password .
1844	Start an environment .
1845	Create a message from a response .
1846	Convert an ETree element into a Rule object .
1847	Convert an ETree element into a Queue object .
1848	Convert an ETree element into a Topic object .
1849	Convert an etree element into a Subscription object .
1850	Create a new certificate .
1851	Deletes a certificate .
1852	Get client from CLI profile .
1853	Build a client from a dictionary .
1854	Get a client from an auth file .
1855	Parses an enum results list .
1856	Get the properties of an XML element .
1857	Delete a certificate .
1858	Get a queue client .
1859	Returns a list of Queues .
1860	Get a topic client .
1861	Returns a list of TopicClient objects .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Get a specific site .
1865	Create a new website .
1866	Deletes a site .
1867	Updates a website .
1868	Restarts a website .
1869	Retrieves the usage metrics for the specified metrics .
1870	Gets the list of MetricDefinitions for a particular website .
1871	Returns the publish profile XML .
1872	Get the publish profile .
1873	Update quarantine policies .
1874	Creates a new cloud service .
1875	Checks the availability of a job collection .
1876	Gets a job collection .
1877	Complete a backup operation .
1878	Cancel scheduled messages .
1879	Send pending messages .
1880	Re - sync the sender .
1881	Gets a certificate from the publish settings .
1882	Restore cached cookies from session
1883	Calculate terminal width .
1884	Return the prefix of the given value .
1885	Print message inplace .
1886	Format a file size .
1887	Format elapsed time .
1888	Create a new status line .
1889	Print the progress bar .
1890	Generate segment numbers .
1891	Iterate over segments for this presentation .
1892	Wait for the given time .
1893	Put a segment into the queue .
1894	Put value into the queue .
1895	Retrieve the parameters for a given PV SWF .
1896	Extract the nonce from the last page .
1897	Find the vpid for the given url .
1898	Parse data into JSON .
1899	Parse XML data .
1900	Parse a query string .
1901	Search for a key in a dictionary .
1902	Spawns a subprocess .
1903	Iterate over tags in an HTML document .
1904	Parse manifest .
1905	Determine the JSON encoding of a sample .
1906	Return a JSON response .
1907	Parse an XML response .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Get the message .
1912	Create a new LogRecord .
1913	Login to LiveEdu account
1914	Load a support plugin .
1915	Update a URL with query parameters .
1916	Iterate over chunks of file .
1917	Yields all required dependencies for a given plugin .
1918	Check file output .
1919	Create output .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Main function .
1923	Pass a stream to the console .
1924	Open a stream .
1925	Write a stream to the output .
1926	Read data from stream into output .
1927	Handle a single stream .
1928	Fetch streams from plugin .
1929	Try to fetch available streams .
1930	Resolve a stream name to a stream name .
1931	Format the stream names according to the given plugins .
1932	Handle a single URL .
1933	Print available plugins .
1934	Authenticate with Twitch .
1935	Load plugin plugins from directories .
1936	Parse command line arguments .
1937	Setup the console
1938	Setup http session .
1939	Load and load plugins .
1940	Setup streamlink options .
1941	Log current version information .
1942	Extract the stream id from text .
1943	Extracts the contents of the given text .
1944	Set an option .
1945	Get an option from the server .
1946	Set plugin option .
1947	Get an option for a given plugin .
1948	Resolve a URL .
1949	Load all plugin modules
1950	Parse hours minutes and seconds .
1951	Validate that value starts with a string .
1952	Validate that value ends with a string .
1953	Validate that value contains a string .
1954	Get an attribute from a value .
1955	Apply a filter to a dictionary .
1956	Apply a function to each element of a dictionary .
1957	Validate a URL .
1958	Transform an element to an element .
1959	Wrapper around XML findall .
1960	Find the player s url .
1961	Load a M3U8 string .
1962	Return the player name for the given command .
1963	Login to steam .
1964	Extract the stream id from the stream .
1965	Extract the stream info from an HTML page .
1966	Login .
1967	Add a function to the map .
1968	Make a call to the API .
1969	Start a new session .
1970	Get information about a media .
1971	Create a smartyroll API .
1972	Compress string .
1973	Format a character for printing .
1974	Turns a string into a string .
1975	Reads n bytes and returns them .
1976	Return the value of this code .
1977	Return explanation of this exception .
1978	Set the decoding table .
1979	Set the length of the sequence .
1980	Prints the code in the terminal .
1981	Reads a tuple from the stream .
1982	Return an explanation for the given index .
1983	Return the value at index .
1984	Return the lower and upper and upper bounds for the given index .
1985	Return the value for the given index .
1986	Return the mnemonic for the given index .
1987	Return the mnemonic for the given index .
1988	Parse the action table .
1989	returns the action of w
1990	Make a hex string from the current position .
1991	Process the stream .
1992	Perform Metablock length
1993	Is uncompressed?
1994	Counts the number of blocks for the given kind .
1995	Convert a sequence of values into a matrix .
1996	Read the prefixes for the given kind .
1997	Draw monochrome .
1998	Calculate a polychrome color matrix .
1999	Convert a DataFrame to an Arrow table .
2000	Decorator to patch a function .
2001	Add columns for cartesian velocity to PMV .
2002	Add virtual columns to the model .
2003	Return a graphviz representation of the graph .
2004	Return a list of values for each column .
2005	Map values of a column based on a mapping .
2006	Return an application .
2007	Open multiple files .
2008	Return a table from a SAMP .
2009	Create a dataset from an astropy table .
2010	Create a DataFrame from a list of arrays .
2011	Convert a list of scalar values into an array .
2012	Convert a pandas DataFrame to a DataFrame
2013	Read data from a CSV file .
2014	Return a server REST interface .
2015	Zeldovich data .
2016	Concatenate multiple DFS .
2017	Create a virtual range
2018	Open a dataset .
2019	Evaluate an expression .
2020	Decorator to wrap a function into a promise .
2021	Return the columns that depend on the current selection .
2022	Run a task .
2023	Sort the list by column name .
2024	Get info from a file .
2025	Clear the background .
2026	Wait for the last plot to finish .
2027	Open a document .
2028	Context manager for writing to a file .
2029	Split a list of arrays and combine them together .
2030	Apply an expression to each element .
2031	Compute the first occurrence of an expression .
2032	Calculate the mean of an expression .
2033	Calculate the sum of an expression .
2034	Calculate the standard deviation of an expression .
2035	Calculate the covariance matrix .
2036	Return the minimum value of an expression .
2037	Return the minimum value of an expression .
2038	Calculate the percentile of an expression .
2039	Plot a plot .
2040	Return the total number of pixels in the ROI .
2041	Plot the HEALPix pixels .
2042	Plot a 3D plot .
2043	Return the dtype of an expression .
2044	Get the private directory
2045	Return the current state as a dictionary .
2046	Synchronize the table .
2047	Remove the private metadata
2048	Write the virtual meta information .
2049	Writes the metadata to disk .
2050	Return a list of subspaces .
2051	Set a variable .
2052	Evaluates a variable .
2053	Evaluates the given mask .
2054	Convert to dict
2055	Return a copy of this DataFrame .
2056	Convert to pandas dataframe .
2057	Convert to Arrow Table
2058	Convert to astropy . Table
2059	Add a column to this DataFrame .
2060	Rename a column .
2061	Convert virtual columns to polar coordinates .
2062	Add virtual columns to spherical coordinates
2063	Convert virtual columns to polar coordinates .
2064	Add physical columns to cartesian coordinates .
2065	Add a rotation around a virtual column .
2066	Add virtual columns .
2067	Convert cartesian to spherical coordinates .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a variable to the table
2071	Delete a variable .
2072	Return the last n rows
2073	Print the first n rows of the table .
2074	Describe features .
2075	Concatenate two numbers
2076	Set current row .
2077	Return a list of column names .
2078	Trim the columns from the dataframe .
2079	Returns a new DataFrame with columns selected .
2080	Extracts all elements from the range .
2081	Sample from the distribution .
2082	Split the array by a given fraction .
2083	Split the sequence into chunks .
2084	Sorts the TimeSeries by a column .
2085	Add a virtual column to the DataFrame .
2086	Undo a selection .
2087	Do aredo operation .
2088	Check if a selection can be undone .
2089	Change the selection .
2090	Select rows that are not missing .
2091	Return a new Table with rows removed .
2092	Selects a rectangle .
2093	Select a bounding box .
2094	Select pixels within a circle .
2095	Select an ellipse .
2096	Select a selection using a Lasso .
2097	Increment the inverse of the current selection .
2098	Set a selection .
2099	Create a selection .
2100	Finds a valid name for the given initial_name .
2101	Return a list of the root nodes of the schema .
2102	Return a graphviz representation of the DataFrame .
2103	Categorize a column .
2104	Encode values in a column .
2105	Return the data as a pandas object .
2106	Return the length of the mask .
2107	Horizontally stack two DataFrames .
2108	Concatenate two DataFrame objects .
2109	Exports to HDF5 file .
2110	Add a column to the DataFrame .
2111	Patch a DataFrame to a DataFrame .
2112	Register a function as a function .
2113	Fill missing values with given value .
2114	Calculate the dayofweek of x
2115	Date of day of year
2116	Return True if x is a leap year .
2117	Calculate year of year
2118	Date of year month
2119	Monthly month name .
2120	Date of day
2121	Return the day name of a date .
2122	Date of week of year
2123	Calculate the hour of x
2124	Calculate the minute of x .
2125	Return the second value of x .
2126	Capitalize a string .
2127	Concatenate two strings .
2128	Check if x contains a pattern .
2129	Return the number of occurrences of a pattern .
2130	Return the position of substring x .
2131	Return the column at x .
2132	Return the index of substring x .
2133	Convert string to columnArrow .
2134	Return a copy of x .
2135	Pad x to a column .
2136	Repeat a number of times .
2137	Return the index of substring in x .
2138	Return the index of substring in x .
2139	Return a new column aligned with the given width .
2140	Return a copy of x .
2141	Slice x .
2142	Return a copy of x .
2143	Construct a ColumnStringArrow from x .
2144	Convert x to a column .
2145	Determine the autotype of an array
2146	Return the object as a recarray .
2147	Write properties to file .
2148	Write a comment to file .
2149	Write a property to a file - like object .
2150	Iterate over properties from a file - like object .
2151	Generator that yields newlines from a file - like object .
2152	Print installed versions .
2153	Rename a keyword argument .
2154	Set the FFT library .
2155	Use librosa to track beats
2156	Adjust the pitch .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert a MIDI number to a string .
2161	Convert hz frequency to mel value
2162	Convert mels to Hz
2163	Generate FFT frequencies
2164	Calculate the frequencies for CQT frequencies .
2165	Generate mel frequencies .
2166	A weighting .
2167	Compute time - likelihood of an array of samples .
2168	Computes the samples of the given data .
2169	Calculate the frequency of a CQT signal .
2170	Perform a pseudo - CQT filter using the CQT .
2171	Compute the ICQT filter using CQT .
2172	Compute the FFT filter using CQ .
2173	Trims the first n_bins from a cqt response .
2174	Calculate the CQT response .
2175	Calculate downsampling count .
2176	Downsample an audio signal
2177	Calculate the cost .
2178	Backtracking algorithm .
2179	Perform the Viterbi algorithm .
2180	Discriminative algorithm .
2181	Generate a uniform transition matrix
2182	Build a transition matrix .
2183	Create a transition matrix .
2184	Compute a local transition matrix .
2185	Calculate the energy of an onset envelope .
2186	Compute the onset strength .
2187	Return the onset of an event .
2188	Calculate onset strength spectrogram .
2189	r Write times to a csv file .
2190	Write audio data to WAV file .
2191	Compute a colormap of data .
2192	Plot an audio waveform .
2193	Set current image
2194	Generate mesh coordinates .
2195	Convert axes object to a gca .
2196	Helper function to scale axes
2197	Calculate the FFT frequency basis .
2198	Calculate mel - frequencies
2199	Calculate cqt frequencies .
2200	Calculate chromosome coordinates .
2201	Calculate time between frames .
2202	Estimate the tuning using PIPTrack .
2203	Compute the Piptrack waveform .
2204	Compute the inverse of the Fourier transform .
2205	Compute the harmonic of a signal .
2206	Perform the inverse of the Fourier transform .
2207	Apply the Fourier transform to a time series .
2208	Calculate pitch shift .
2209	Resample an array of intervals .
2210	Determine if a signal is non - zero
2211	Trim a signal from a signal .
2212	Split a signal .
2213	Phase oscillator .
2214	Convert an amplitude matrix to an amplitude .
2215	Compute the spectrogram .
2216	Use librosa to track beats on a given file .
2217	Decomposes a network matrix .
2218	Apply a non - synapse filter .
2219	Filters out the neighbors of a network .
2220	Computes the Mel - transform frequencies for a given filter .
2221	Generate a chroma spectrum .
2222	Create a window from a window .
2223	r Calculate FrequencySeries .
2224	r Calculate frequency lengths .
2225	Convert a CQ waveform to chroma .
2226	Calculate the window bandwidth .
2227	Calculate a window of nx .
2228	r Multirate filterbank .
2229	r Calculate the frequencies and sample frequencies
2230	Apply a window - spacing to x .
2231	Calculate the Sumsquare for a window .
2232	Create a diagonal filter .
2233	Calculate the centroid of a spectrogram .
2234	Calculate a spectral rolloff .
2235	Calculate the spectrum flatness .
2236	Fit a spectrogram to a spectrogram
2237	Calculate zero crossing rate .
2238	Calculate the spectrogram of the spectrogram .
2239	r Compute chroma spectra .
2240	Calculate a melspectrogram
2241	Calculates the Jaccard distance between two intervals .
2242	Matches intervals that overlap with intervals_to .
2243	Matches two intervals .
2244	Matches two intervals .
2245	Match two events .
2246	Calculate salience .
2247	Calculate the harmonics .
2248	Calculate the frequencies between frequencies .
2249	Calculate the harmonics along the given frequencies .
2250	Load audio from sound file .
2251	Load audio file .
2252	Convert audio to mono .
2253	Resample an audio signal .
2254	Calculate the autocorrelate of an array .
2255	Compute the lpc of an audio signal .
2256	Calculate clicks .
2257	Generate a tone
2258	Calculate the chirp signal .
2259	returns a set of all the files in dir_name
2260	Use librosa to stretch audio .
2261	Parse command line arguments .
2262	Parses the input_file and output_harmonic and output_hussives .
2263	r Compute the beat track .
2264	Track the beats of an onset envelope .
2265	Compute the beat local score .
2266	Compute the backlink score for each beat .
2267	Find the last beat .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag matrix to a recurrence matrix .
2270	Convert a function to a time - lag value .
2271	Segment data into subsegments .
2272	Agglomerative clusterer .
2273	Enhance a set of matrices .
2274	Detect onset times .
2275	Generate a frame from a Y array .
2276	Validate audio data .
2277	Convert x to int .
2278	Pad data with zero length .
2279	Sorts a 2D array .
2280	Normalize S .
2281	Local max operator .
2282	Perform peak pick .
2283	Parse rows into sparse matrix .
2284	Roll x along specified axis .
2285	Convert x to float .
2286	Convert an index to a slice .
2287	Synchronize data by index .
2288	Apply a softmask to X_ref .
2289	Tiny function .
2290	Convert frames to video format .
2291	Reads from the stream .
2292	Get a single frame from the video buffer .
2293	Convert image to frames .
2294	Call a function in progress bar .
2295	Calculate the progress bar and progress bar .
2296	Flip an image .
2297	Rotate image by given angle .
2298	Clip bounding boxes .
2299	Scales bounding boxes .
2300	Crop the bounding box around the given bboxes .
2301	Impads an image to a given shape .
2302	Impad to multiple images
2303	Return the size of the given size .
2304	Resize an image .
2305	Resize an image .
2306	Resize an image .
2307	Register a file handler .
2308	Convert a priority value to an integer .
2309	De - quantize an array .
2310	Display an image .
2311	Visualize bounding boxes .
2312	Read a flow file .
2313	Write flow to file .
2314	De - quantize flow .
2315	Load a state dictionary from a module .
2316	Load a model from file .
2317	Convert state dictionary to CPU number .
2318	Save model to file .
2319	Initialize optimizer .
2320	Initialize the logger .
2321	The current learning rate .
2322	Register a hook .
2323	Runs the workflow .
2324	Register training hooks .
2325	Convert video to out_file .
2326	Resize video .
2327	Cut a video .
2328	Concatenate multiple video files into one .
2329	Return a list of items from a file .
2330	Read the contents of a file into a dictionary .
2331	3x3 convolution with padding
2332	Create an object from a dictionary .
2333	Read image file and return numpy array
2334	Create an image from bytes .
2335	Write image to file .
2336	Convert an image to a grayscale .
2337	Convert an image to BGR .
2338	Cast an iterable .
2339	Check if a sequence of items are of the expected type .
2340	Slice a list of integers .
2341	Decorator to check if a function is met .
2342	Calculate the average of values .
2343	Shared scatter .
2344	Return the value of a color .
2345	Returns the time of the given timer
2346	Starts the timer .
2347	Return seconds since start time .
2348	Return seconds since last check .
2349	Display the flow .
2350	Convert a flow to RGB .
2351	Make a color wheel .
2352	Compute the accuracy .
2353	Apply a scatter function to input arrays .
2354	Perform a scatter operation on inputs .
2355	Fetch and return the response .
2356	Convert to JSON .
2357	Convert to text .
2358	Handle an AWS callback .
2359	Send multiple requests .
2360	Create a new request .
2361	Start the master .
2362	Normalize task arguments .
2363	Parse YAML line numbers .
2364	Return the distribution name .
2365	Return the archive basename .
2366	Add requirements to setup . py
2367	Convert an egg - info file to a distribution .
2368	Create a message activity .
2369	Create a message with suggested actions .
2370	Create an attachment activity .
2371	Create an attachment activity .
2372	Create an attachment activity .
2373	Create a trace activity .
2374	Setter for the telemetry client .
2375	Reads the contents of the specified collection .
2376	Write changes to the store .
2377	Delete documents from MongoDB .
2378	Create an item from a result .
2379	Create a dictionary representation of the object s attributes .
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Builds a QNA event .
2385	Return a conversation reference .
2386	Get the name of the step .
2387	Check if the given channel supports suggested actions .
2388	Checks if the given channel supports card actions .
2389	Get the channel id from turn context .
2390	Check if the token is valid .
2391	Create an attachment for a hero card .
2392	The list of parameters for this instruction .
2393	Return a mirrored instance .
2394	Return the inverse of this gate .
2395	Set control value .
2396	Make a copy of this object .
2397	Convenience method for qasmif .
2398	Returns the qasm code for this function .
2399	Run the circuit .
2400	Run a single pass .
2401	Return a list of pass dictionaries .
2402	Return a dict representation of the flow .
2403	Create a controller .
2404	Create a new unit vector .
2405	Return parameters for single gate .
2406	Return matrix for single gate .
2407	Calculate the einsum of a list of qubits .
2408	Calculate the einsum of a list of qubits .
2409	A helper function for the einsum .
2410	Convert a circuit to a DAGCircuit .
2411	Exponential fit function .
2412	Optimized fit function .
2413	Function to plot the fit coherence .
2414	Shape rb data
2415	Function to plot RR data .
2416	Split runs into multiple gates .
2417	Compose u3 components for u3 .
2418	Convert YYZYZ to ZYZ
2419	Validate input state .
2420	Trim an image .
2421	Get the span of the gate .
2422	Convert a circuit to an Instruction .
2423	Run the transpiler .
2424	Find the best subset of the network .
2425	Adds a barrier to the circuit .
2426	Return the average of the observed data .
2427	Process a bit id node .
2428	Process custom unitary nodes .
2429	Process a DAG node .
2430	Process CNOT node
2431	Process a measure node .
2432	Process if node .
2433	Create a new gate .
2434	Return the duration of the given channels .
2435	Return the start time of the given channels .
2436	Return the stop time for the given channels .
2437	Iterate over the instructions in this schedule .
2438	Check that the value is of expected type .
2439	Adds additional data to valid_data
2440	Add additional data to valid_data .
2441	Create a validation schema .
2442	Validate a model instance .
2443	Decorator to validate schema .
2444	Convert model to dict .
2445	Load model from dict .
2446	Fast Fourier Transform .
2447	Calculate a partial trace vector .
2448	Vectorize a density matrix .
2449	Convert a matrix to a matrix .
2450	Convert a Pauli matrix to a matrix of rauli .
2451	Slice the elements of an array .
2452	Computes the outer product of two vectors .
2453	Return the concurrence of a state
2454	Shannon entropy .
2455	Calculate the Shannon entropy of a state .
2456	Calculate the mutual information .
2457	Calculate the entropy of a state .
2458	Compute EOF qubit .
2459	Flatten a schedule into a single Schedule .
2460	Shifts a schedule by time .
2461	Insert a schedule into a schedule .
2462	r Append child components to parent .
2463	Add an unsigned 3 gate .
2464	Return backend status .
2465	Start iteration .
2466	Return time remaining in seconds .
2467	Disassemble an experiment into a circuit .
2468	Computes the Hamming distance between two strings .
2469	Return a quaternion from an axis rotation .
2470	Return quaternion from Euler angles .
2471	Normalize the quaternion .
2472	Convert to 3D matrix .
2473	Convert the rotation matrix to a z - z - z plane .
2474	Calculate the number of values to keep .
2475	Visualize a histogram .
2476	Check if value is a collection of types .
2477	Check if register j is out of bounds .
2478	Check if a matrix is a square matrix .
2479	Check if a matrix is a diagonal matrix .
2480	Check if op is a symmetric matrix .
2481	Check if a matrix is a Hermitian matrix .
2482	Check if a matrix is a positive semidefinite matrix .
2483	Check if a matrix is an identity matrix .
2484	Check if a matrix is an unitary matrix .
2485	Convert data to choi representation .
2486	Convert data to superoperator .
2487	Convert to Kraus .
2488	Convert to chi .
2489	Convert to PTM .
2490	Convert Stinespring to Stinespring .
2491	Convert data to operator .
2492	Convert an operator to an operator .
2493	Convert Stinespring data to Operator representation .
2494	Convert input to choi .
2495	Convert input to superop .
2496	Compute the choi component of the covariance matrix .
2497	Convert data to Kraus decomposition .
2498	Convert stines to Kraus .
2499	Convert StinesSimpler to ECHOICE .
2500	Convert a Kraus signal to stinespring .
2501	Compute the superop .
2502	Convert the Choi matrix to the Choi matrix .
2503	Convert the Choi matrix to a chi matrix .
2504	Reverse two matrices .
2505	Transforms data from a Pauli matrix .
2506	Check that the input_dim and output_dim are the same .
2507	Hide tick lines and labels .
2508	Set xlabel convention
2509	Clears the object .
2510	Add one or more vectors .
2511	Add an annotation .
2512	Render the figure .
2513	Plot the front of the sphere .
2514	Show the figure .
2515	Calculate a two - qubit tensor .
2516	Return the top string .
2517	Return a string representing the MIDDLE part .
2518	Return the bot string .
2519	The maximum length of the segment .
2520	Return a list of parameters for an instruction .
2521	Return label for a box .
2522	Return latex string representation of a local parameter .
2523	Compile a circuit into a QObject .
2524	Add deprecated deprecation warnings .
2525	Return information about local hardware .
2526	Check if hostname and port exists .
2527	Run the status bar .
2528	Compute the amplitude of the given times .
2529	Calculate the square of the given times period and phase .
2530	Calculate the phase of a triangle .
2531	Calculate cos .
2532	r Fix the Gaussian width .
2533	r Calculate gaussian .
2534	Gaussian derivative
2535	r Gaussian interpolation .
2536	Create a default pass manager .
2537	Create a default pass manager .
2538	Return True if the instruction has the given register .
2539	Return a copy of the circuit .
2540	Return an inverseCirc .
2541	Append an instruction to the circuit .
2542	Attach an instruction to the queue .
2543	Add register to circuit .
2544	Check if qubits are duplicate .
2545	Check if qargs are valid .
2546	Check that the cargs are valid .
2547	Checks if the circuit blocks are compatible
2548	Returns the assembly string .
2549	Renders the circuit .
2550	The size of the gate .
2551	The total width of all registers .
2552	Return a dictionary of the number of operations in this module .
2553	Return the number of connected components .
2554	Return a new circuit with the given parameters .
2555	Bind a parameter to a given value .
2556	Pulse drawer .
2557	Search for forward N swaps .
2558	Maps free gates to free gates .
2559	Calculate the distance between layout and layout .
2560	Score a single step .
2561	Create a new DAG from a source DAG .
2562	Transform a gate for layout .
2563	Create swap operations from an edge .
2564	Run the transpiler on a DAG .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge between two nodes .
2567	Create a sub - graph from the graph .
2568	List of physical qubits .
2569	Check if the graph is connected .
2570	Compute the distance matrix .
2571	Return the distance between two physical qubits .
2572	Transpile a circuit into a transpile .
2573	Create a cu1 gate .
2574	Inverse the circuit .
2575	Applies q - if gates to the gate .
2576	Perform c_if instruction .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe from an event .
2580	Publish an event to the broker .
2581	Initialize the gate .
2582	Define the definition .
2583	Returns the disentangle circuit .
2584	Calculate the angles of a complex .
2585	Returns a circuit for multiplex .
2586	Checks if value is a virtual register .
2587	Returns a copy of this Layout .
2588	Merge two layouts into one .
2589	Appends a CffoliGate gate to the gate .
2590	Insert a schedule into the list .
2591	Raise TranspilerAccessError if fenced .
2592	Convert a list of gates into an array of indices .
2593	Run Transpiler .
2594	Update the layout of the network .
2595	Return a Pauli group .
2596	r Creates a Qiskitit from a string .
2597	Initialize Qiskit from boolean arrays .
2598	r Return the product of two Pauli elements .
2599	Convert to an operator .
2600	Convert Pauli operators to an instruction .
2601	Update the state of this quiskit .
2602	Update self . _x .
2603	Inserts a paulis at the given indices .
2604	Append a paulis .
2605	Delete qubits at given indices .
2606	Create a new Simulator instance .
2607	Return a Pauli operator .
2608	Returns the outcome of a measurement .
2609	Add a sample measure to the state .
2610	Add a measurement to the classical memory .
2611	Reset a qubit .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Get the state vector .
2615	Determine whether the experiment should be sampled .
2616	Run a worker
2617	Runs a single job .
2618	Validate the circuit .
2619	Validate the initial unitary shape .
2620	Initialize the unitary matrix .
2621	Get the unitary matrix .
2622	Runs a single job .
2623	Validate the circuit .
2624	Check if an object is a bit register .
2625	Run the transpiler .
2626	Check if this interval has overlap .
2627	Return a new interval shifted by time .
2628	Return a new Timelot shifted by time .
2629	Return the start time for the given channels .
2630	Return the stop time for the given channels .
2631	Determine if this timeslots are mergeable with this collection .
2632	Return a new TimelotCollection with the merged timeslots .
2633	Shifts the timeslot by time .
2634	Report the issue as an issue .
2635	Return a dictionary of label - value pairs .
2636	Visualize a quantum state .
2637	Create a RZ gate .
2638	Swap two targets .
2639	Initialize the backend propagation .
2640	Create a program graph from a dag .
2641	Select the next program .
2642	Selects the remaining cx .
2643	Select the highest remaining qubit .
2644	Run the program .
2645	Return a list of all of the gate objects .
2646	Inverse gate .
2647	Apply q - if gates to the gate .
2648	Concatenate a classical value .
2649	Check if a matrix is a unitary .
2650	Return the conjugate operator .
2651	Transpose operator .
2652	Power of the operator .
2653	A tuple of shape and input dimensions .
2654	Convert a QuantumCircuit into an Operator .
2655	Compute a DAGCircuit layer update .
2656	Separate a bitstring into a single space .
2657	Format a list of memory data .
2658	Format a list of memory as a complex array .
2659	Formats the memory as a list of lists .
2660	Format a counts dictionary into a dictionary .
2661	Format a state vector .
2662	Format a unitary matrix .
2663	Decorator to make sure the job is submitted .
2664	Submit the job .
2665	Return the status of the job .
2666	Checks if lo_freq is inclusive .
2667	Implementation of the multivariate multivariate multivariate multilectors .
2668	Get the qubit low frequency .
2669	Get the default measurement levels .
2670	Unroll the circuit .
2671	Visualize a state sphere
2672	Calculate the number of choices for a given number of points .
2673	Find the lexicographical index of a list .
2674	Plot a quantum state matrix .
2675	Returns a list of unique backends .
2676	Return the op node .
2677	Return a sample of pulse .
2678	Return a new zero pulse .
2679	Calculate a square pulse .
2680	Calculate the sawtooth pulse .
2681	Sample from a triangle .
2682	Return a cos spectrum .
2683	Calculate the sin spectrum .
2684	r Generate a Gaussian
2685	r Return the derivative of the gaussian derivative .
2686	Return a sample of a Gaussian .
2687	Calculate the real distance .
2688	Serialize QReg as a string .
2689	Get a backend instance .
2690	Rename a register .
2691	Remove all nodes with the given opname .
2692	Add a quantum register to this DAGCircuit .
2693	Add a register to this DAGCircuit .
2694	Add a new wire to the graph .
2695	Check if the condition is valid .
2696	Return all the bits in a single condition .
2697	Add an operation node to the multi - graph .
2698	Apply an operation back to the DAG .
2699	Checks if the given edge map registers are valid .
2700	Check the validity of the wiremap .
2701	Map a condition to a condition .
2702	Extend the state of this DAG .
2703	Compose the DAG circuit into this DAGCircuit .
2704	Check the list of wires .
2705	Build a map of pred and successors to their successors .
2706	Computes the full pred and successor map for the given input_map .
2707	Return a list of topological nodes .
2708	Iterate over the edges in the multi - graph .
2709	Return a list of nodes with the given op .
2710	Return the nodes of all gate nodes .
2711	Return a list of nodes with the given names .
2712	A list of two Q gates .
2713	Returns the list of predecessors of the given node .
2714	Return the predecessors of a node .
2715	Return all the ancestors of a node .
2716	Return the successors of a node .
2717	Remove an op node .
2718	Remove all the ancestors of a node .
2719	Remove all descendant nodes of a node .
2720	Remove all non - ancestor nodes of a node .
2721	Removes all nodes of the given node .
2722	Return the layers of this DAG .
2723	Generator for serialization .
2724	Yield the multigraph layer .
2725	Return a set of runs that match the given name .
2726	Return the nodes of the given wire .
2727	Return a dictionary of the number of operations in the graph .
2728	Return a summary of the tensor .
2729	Return a tomography basis set .
2730	Applies the Pauli measurements to the Pauli measurements .
2731	Set the tomography .
2732	Process a set of measurements .
2733	Creates tomoset for a given circuit .
2734	Return data for tomography .
2735	Calculate the marginal counts for a measurement .
2736	Fit tomography data using leastsq .
2737	Fit to the Leastq basis .
2738	Calculate the projector of a list of operators .
2739	Computes the inverse of the transition matrix .
2740	Calculate wizard density .
2741	Calculate Wigner data .
2742	Implements measurement gate .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Compute Euler angles .
2746	Simplify an U gate .
2747	Rewrite the graph .
2748	Displays information about the qubits .
2749	Display a list of jobs .
2750	Plot the job history .
2751	Draws the current pulse .
2752	Define a cu3 gate .
2753	Build a Bell circuit .
2754	Transpile a circuit into a schedule .
2755	Transpile a circuit .
2756	Execute multiple experiments .
2757	Return the current drive channel .
2758	The control channel .
2759	The measure channel .
2760	Return the acquisition channel .
2761	Sequence of input states .
2762	Assemble an experiment .
2763	Unset the Qiskit log .
2764	Visualize the state of a quantum state .
2765	Process the channel1 and channel2 .
2766	Input data .
2767	Pop the stack from the stack .
2768	Push a new lexer to the stack .
2769	Run the DAG .
2770	Returns the bound method for the given instruction .
2771	Convert an acquired instruction to a command .
2772	Convert frame change to QObject .
2773	Convert persistent value to QObject .
2774	Convert a drive instruction .
2775	Convert a snapshot to a QObject .
2776	Update the duration of a pulse .
2777	Decorator to generate a sampler function .
2778	Filter backends according to filters .
2779	Resolve backend name .
2780	Convert a DAG into a QuantumCircuit .
2781	Convert a matrix to a dictionary .
2782	Update the current symtab .
2783	Verify that a bit is declared as a bit in the gate .
2784	Verify that the expressions in a list are present .
2785	Verify that obj is a gate or an opaque call .
2786	Verify that the register is correct .
2787	Verify that all children of an object is valid .
2788	Find the column in input_ .
2789	Parse debug value .
2790	Parse the given data .
2791	Run the parser .
2792	Parse the assembly data .
2793	Create a crz gate .
2794	Return basis state .
2795	Creates a density matrix .
2796	Calculate the purity of a state .
2797	Runs the filter on the given dag .
2798	Render a backend
2799	Update the backend status .
2800	Generate the widgets for the jobs pending .
2801	Determine the dependency graph .
2802	Retrieve a single backend by name .
2803	Shape of the bipartite .
2804	Return the register name and maximum number of registers .
2805	Return a truncated float value .
2806	Return a LaTeX representation of the circuit .
2807	Calculate image depth .
2808	Determine the size of the screen .
2809	Load schema from file .
2810	Get a validator .
2811	Loads the schema and validators .
2812	Validate a JSON dict against a schema .
2813	Helper function for formatting errors .
2814	Calculate the majority of nodes .
2815	Multiply monajority .
2816	Generate a latex source .
2817	Return a matplotlib circuit .
2818	Return a random unitary operator .
2819	Return a random density matrix
2820	Generate a Gaussian matrix
2821	Generate a Gaussian density matrix .
2822	Generate Gaussian density .
2823	returns the names of the call
2824	Return a new superOp .
2825	Compute the components of this system .
2826	Convert a QuantumCircuit to a superOp .
2827	Run the DAG .
2828	Assemble a circuit into a QObject .
2829	Run the decomposition of the QR code .
2830	Run the gate .
2831	Define the definition .
2832	Check that the value is the correct type .
2833	Check type of value .
2834	Validate atol .
2835	Validate rtol .
2836	Reshape input and output dimensions .
2837	A tuple of dimension dimensions .
2838	Returns the dimensions of the output .
2839	Return a copy of the graph .
2840	Return a new Qiskit .
2841	Determine dimensionality .
2842	Calculate the einsum of a tensor .
2843	Deserialize the object .
2844	Serialize to JSON .
2845	Check that the value matches the expected type .
2846	Calculate the fidelity between two states .
2847	Compute the singular value decomposition of a matrix .
2848	Inverse of the snapshot .
2849	Set the label
2850	Return whether this quiskit is unitary .
2851	Convert to an operator .
2852	Convert this QuantumChannel to an Instruction .
2853	Initialize the transformer class .
2854	Sort enum by name .
2855	Patched version of _strptime
2856	Returns a mapping between two languages .
2857	Returns a generator for locale data .
2858	Check if tokens are valid .
2859	Split a string .
2860	Parse a date string .
2861	Parse time string .
2862	Returns True if the given date is applicable to the given date string .
2863	Translates a string into a string .
2864	Parse a string using a list of date formats .
2865	Generate and return a generator .
2866	Convert a Java exception to an integer .
2867	Convert an exception to an integer .
2868	Read configuration from config .
2869	Create a phantom config file .
2870	Get information about the streams .
2871	Compose the stepper config .
2872	Log stdout and stderr .
2873	Expand time in seconds .
2874	Read configuration from config file
2875	Publish the stepper .
2876	Returns the filename of the STPD file .
2877	Read cached stepper info .
2878	Write cached options to disk
2879	Create a stepper file .
2880	Create a CompositeLPSLP instance .
2881	Return the number of rps at time t .
2882	Execute a command .
2883	Decode monitoring data .
2884	Make points for a label
2885	Publish a status message .
2886	Count the number of codes that match a regex .
2887	Stop the worker thread .
2888	Feed all the workers .
2889	Initialize logging .
2890	Add shorthand options
2891	Configure the core
2892	Gracefully shutdown
2893	Collect the data from the queue .
2894	Notify all listeners .
2895	Get a marker by type .
2896	Parse duration in seconds .
2897	Start the agent .
2898	Start the agent .
2899	Discover the UDP UDP port .
2900	Add the components to the jmx file .
2901	Terminate the process .
2902	Read the data from the given lines .
2903	Create a custom criterion from a string .
2904	Parse the config file .
2905	Create an agent startup config file
2906	Check disk free space
2907	Checks if memory is available
2908	Get the size of the terminal
2909	Get the right line .
2910	Truncate line_arr .
2911	Render the left panel .
2912	Render the screen .
2913	Add info widget
2914	Fill a rectangle .
2915	Calculate length of line
2916	Create a load plan .
2917	Get the level string .
2918	Add info widget
2919	Send a request to the writer .
2920	Load and instantiate plugins
2921	Return the plugin of the specified type .
2922	Return a list of plugins of the specified type .
2923	Copy a file to the artifacts_dir .
2924	Add an artifact file .
2925	Create a temporary file and return its path .
2926	Load config files .
2927	Flush the current config .
2928	Get all options from a section .
2929	Find all sections starting with a prefix
2930	Yields statistics from the given chunk .
2931	Get phantom info .
2932	Install monitoring agent .
2933	Poll the agents for each agent .
2934	Sends collected data to listeners .
2935	Detect the configuration type .
2936	Handle data items .
2937	Decode agent data to JSON .
2938	Subscribe to channels .
2939	Run the event loop .
2940	Close the canvas .
2941	Perform a single request .
2942	Submit a new order
2943	Retrieve a single order .
2944	Returns a Position object for the given symbol .
2945	List assets .
2946	Retrieves the asset for the given symbol
2947	Creates a subplan that represents a join step .
2948	Ensure that the given object is a dict .
2949	Get a dictionary parameter from an object .
2950	Build an event logger .
2951	Create a JSON - event logger .
2952	Read configuration from a file .
2953	Get the configuration for a repository .
2954	Format a config dictionary .
2955	Get a pipeline by its name .
2956	Return a list of Pipelines .
2957	Get the next event from queue and return it .
2958	Execute a pipeline through a queue .
2959	Waits until all processes are processed .
2960	Create a Field instance .
2961	Builds the execution plan .
2962	Build a sub - plan from a pipeline .
2963	Build a sub - pipeline .
2964	Return the solid with the given name .
2965	Build the list of commands to publish .
2966	Release a new version
2967	Create a context definition .
2968	Decorator to create input selector schema .
2969	Decorator to create the output selector schema .
2970	Print a block of text .
2971	Download file from S3 .
2972	Upload file to S3
2973	Context manager for user - code errors .
2974	Make a new directory p .
2975	Context manager for generating a user - defined code .
2976	Create a Dagster log .
2977	Return True if all steps have been completed .
2978	Return True if all steps have been skipped .
2979	Returns the transformed values .
2980	Return the transformed value .
2981	Return the failure data .
2982	A PermissiveDict factory .
2983	Check if a config value is a valid dataset name .
2984	Check if the given config value is a valid table .
2985	Execute a core transform .
2986	Decorate an existing type .
2987	Create a resource definition .
2988	Create a new EventV2 .
2989	Coalesce all solid names in an ExecutionPlan .
2990	Get connection parameters
2991	Get a new connection .
2992	Create a Cursor object .
2993	Closes the database connection .
2994	Create a model from a model dictionary .
2995	Convert a list of dicts to a Python list .
2996	Create a formfield
2997	Convert value to model .
2998	Apply relation filters to queryset .
2999	Compute the NFP values for the given cumulative counts .
3000	Compute real - fps .
3001	Compute the best partitions .
3002	Compute optimal partition for given sizes .
3003	Calculate c1 and c2 .
3004	Initialize slot slots .
3005	Return the size of the seed
3006	Serialize this MinHash into a buffer .
3007	Deserialize a buffer from a buffer .
3008	Update the hash values by b .
3009	Merge two MinHash objects .
3010	Union of two MinHash objects .
3011	Add entries to the index .
3012	Query the index for the given minhash and size .
3013	Compute the hash of the sampler .
3014	Remove a key from the hashtable .
3015	Update the binary with the given bytes .
3016	Count the number of nonzero values .
3017	Merge another HyperLogLogLog into this one .
3018	Clear the registry .
3019	Calculate the APK score .
3020	Calculate the MAPK distance between actual and predicted values .
3021	Index the list of hashtables .
3022	Query the set of keys with k
3023	Close all open hashtables .
3024	Create storage object .
3025	Create storage object .
3026	Return the user data .
3027	Set the state of the social login .
3028	Select a single text .
3029	Parse a scoped selector .
3030	Parse a single statement .
3031	Parse a single value .
3032	Advance to the current line .
3033	Parse a configurable reference .
3034	Augment an exception message and reraise it .
3035	Convert anoperative config string to markdown format .
3036	Runs after creation .
3037	Ensure a function is wrapped in a function .
3038	Decorate a function or class to a class .
3039	Format a value .
3040	Clears the configuration .
3041	Bind a parameter to the configuration .
3042	Query a binding key .
3043	Check if a function has a given parameter .
3044	Get the argspec for a function .
3045	Get the positional parameter names of a function .
3046	Get all positional parameters of a function .
3047	Get the default values for a function .
3048	Context manager that returns a scope .
3049	Decorator to mark a function as configurable .
3050	Return a string representation of the operative config .
3051	Parse a config file .
3052	Decorator to register a file reader .
3053	Parse a config file .
3054	Parse a list of config files .
3055	Parses the given value .
3056	Run the finalize hook .
3057	Iterate over nested values .
3058	Iterate over all references in the given configuration .
3059	Register a constant .
3060	Decorator to add constants from enum .
3061	Returns a list of matching selectors .
3062	Get all matches that match a partial selector .
3063	Removes a selector from the selector map .
3064	Convert a query into a SP search query .
3065	Parse Retry - After header .
3066	Validate the given value .
3067	Return a description as a description .
3068	Set the value of the field .
3069	Return the thing at the given index .
3070	Initialize things and hosts .
3071	Set default headers
3072	Checks if the request is valid .
3073	Get a thing .
3074	Called when a message is received .
3075	Post a thing .
3076	Delete a thing .
3077	Start the service .
3078	Return the action as a dictionary .
3079	Start the task .
3080	Mark the task as completed .
3081	Return the event as a dictionary .
3082	Get the current IP address .
3083	Returns a list of IPv4 addresses .
3084	Set value to value
3085	Notify an external update
3086	Return the thing as a thing .
3087	Sets the href prefix for this action .
3088	Return a dict of property names and their values .
3089	Returns a list of action descriptions .
3090	Return list of event descriptions .
3091	Add a property to this resource .
3092	Remove a property from the definition .
3093	Returns the value of the given property
3094	Get the properties as a dict .
3095	Set the value of a property .
3096	Get an action by name and id .
3097	Add an event to the list .
3098	Add an available event .
3099	Perform an action .
3100	Remove an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add a subscriber to the list of available events .
3104	Remove an event subscriber .
3105	Notify the property status .
3106	Send an action status message .
3107	Send an event notification .
3108	Annotate the model .
3109	Update one or more fields .
3110	Bulk create objects .
3111	Insert a record into the database .
3112	Insert a record into the database .
3113	Build a postgres insert compiler .
3114	Check if a field is a Magical field .
3115	Determine the insert and update fields .
3116	Called when a model is saved .
3117	Signal handler for delete
3118	Create a case that is not None .
3119	Returns a new HStoreValue with the given arguments .
3120	Convert to SQL .
3121	Returns a copy of this instance with the given relabels .
3122	Add a join condition to the table .
3123	Check if a field is a HStoreField .
3124	Insert multiple objects into the table .
3125	Create a required constraint for a required field .
3126	Rename a required constraint constraint .
3127	Drop the required constraint for a given field .
3128	Return the name of the required constraint .
3129	Create a new index statement .
3130	Create a custom command .
3131	Return the database base class .
3132	Create an hstore extension .
3133	Prepare value to be prepared
3134	Form the return statement .
3135	Return a list of SQL statements .
3136	Rewrite the query .
3137	Rewrite the insert .
3138	Rewrite the sql for insert .
3139	Build conflict target .
3140	Get model field by name .
3141	Format a field name .
3142	Format a field value .
3143	Create a unique constraint for a field .
3144	Rename a unique constraint .
3145	Drop a unique constraint for a field .
3146	Return a unique constraint name .
3147	Iterate over the uniqueness keys of a field .
3148	Add a new condition .
3149	Return the SQL for this filter .
3150	Return the tdist_95_CONF level for a given DataFrame .
3151	Calculate the variance between two samples .
3152	Compute the t - score between two samples .
3153	Check if two samples are significant .
3154	Topological sorting .
3155	Generate n - qubits .
3156	Play the node on the board .
3157	Choose the opponent s position
3158	Make a random playout .
3159	Remove benchmarks that are compatible with the given base version .
3160	Expand a benchmark name into a list of names .
3161	Generate a string table .
3162	Initialize benchmarks .
3163	Returns the domain of the knot .
3164	Fetch messages from a channel .
3165	Parse posts .
3166	Get information about a user
3167	Fetch items from category
3168	Fetch and parse RSS feed
3169	Setup the command - line parser for the RSS feed
3170	Fetch bugs .
3171	Get a list of bugs .
3172	Get comments for given bug ids
3173	Get bug history .
3174	Get a list of attachments
3175	Get the list of notes for the given issue .
3176	Fetch merge requests .
3177	Get merge notes .
3178	Get merge versions .
3179	Fetches all merges .
3180	Get the complete merge .
3181	Fetch versions of a merge .
3182	Fetch a merge version .
3183	Fetch GitLab notes .
3184	Fetch emojis .
3185	Fetches an item s emojis .
3186	Calculate the time to reset
3187	Fetch items from Git repository .
3188	Initialize rate limit .
3189	Setup the command parser for GitLab .
3190	Fetch messages .
3191	Return the ID for the given metadata item .
3192	Returns the number of members of a given conversation .
3193	Get information about a channel
3194	Get information about a user
3195	Setup command line arguments for Slack .
3196	Return the timestamp of the metadata that was updated .
3197	Parse the buglist .
3198	Parse the bug details into a list of dictionaries .
3199	Parse bug activity .
3200	Log out from Bugzilla .
3201	Get bug metadata .
3202	Get bugzilla bugs .
3203	Get bug data .
3204	Get bug activity .
3205	Fetch events .
3206	Fetch events from a specific group
3207	Get events from a group .
3208	Fetch comments for an event .
3209	Get VRSVPs for a specific event .
3210	Fetches the question for the given question
3211	Fetch the comments for a given question
3212	Build a question from an HTML question .
3213	Gets the questions for the given path .
3214	Get the HTML for a question .
3215	Get the comments for a post .
3216	Find the question container .
3217	Parse answers from Askbot .
3218	Parses the number of pages in a question .
3219	Parses the update page .
3220	Fetch items for a given category .
3221	Parse the reviews
3222	Fetch grit28 data .
3223	Get the gerrit version .
3224	Get reviews .
3225	Return the next retrieve group item
3226	Execute a command
3227	Execute a command from the archive .
3228	Execute a command from the remote host .
3229	Setup command parser .
3230	Fetch issue data
3231	Fetch the attachments for an issue .
3232	Fetch messages from issue_id
3233	Fetch all activities for a given issue .
3234	Fetch user data .
3235	Get user information .
3236	Get information about an issue .
3237	Fetch bug collections .
3238	Get the project url
3239	Fetch items from API
3240	Get subscriptions from groupsio .
3241	Find group id
3242	Wrapper for requests . get
3243	Setup command line arguments for Groups . io
3244	Generate a unique uuid .
3245	Wrapper for fetch .
3246	Fetch items from an archive .
3247	Find all backends in the given top_package .
3248	Fetch metadata for given category
3249	Fetch metadata from archive
3250	Filter classified data .
3251	Parse command line arguments .
3252	Add authentication arguments
3253	Add the archive arguments
3254	Add the command line arguments
3255	Retrieve objects from the backend .
3256	Initialize the archive manager .
3257	Return the updated timestamp of the item .
3258	Generator that yields messages from a mox file .
3259	Fetch and parse messages from a mailing list .
3260	Copy mbox to tempfile
3261	Validate the message .
3262	Convert a dict to a dict .
3263	Return a message for the given key .
3264	Fetch items from a commit
3265	Fetch items from the repository .
3266	Parse git log from a file .
3267	Set up the git path .
3268	Setup the command argument parser .
3269	Parse the stream .
3270	Clone a Git repository .
3271	Count the number of objects in this repository .
3272	Check if this repository is detached .
3273	Update the current git repository
3274	Synchronize the current git repository .
3275	Execute git rev - list
3276	Get the git log .
3277	Show list of commits .
3278	Fetch the build graph from the remote repository .
3279	Get the list of commits from pack .
3280	Update one or more refs .
3281	Find all refs for this repository .
3282	Update a ref .
3283	Run a command in a subprocess .
3284	Read the stderr of the process .
3285	Run a git command .
3286	Fetch tweets .
3287	Fetches tweets from a given category .
3288	Fetch a list of tweets
3289	Setup command - line arguments
3290	Fetch items from catalog
3291	Fetch hits
3292	Parse the hit string .
3293	Fetch hits for given keywords .
3294	Return the updated timestamp of the item .
3295	Determine if metadata should be used .
3296	Fetch pull requests .
3297	Fetch repo information
3298	Get all reactions for a given issue .
3299	Get all reactions for a given issue comment .
3300	Get list of user assignees .
3301	Get a list of user s requested reviews .
3302	Get list of commit hashes for given PR number .
3303	Get reactions for a pull review comment .
3304	Gets user information
3305	List all reactions for an issue .
3306	List of all issues .
3307	Get all the pull requests for this repository .
3308	Return the name of the repository .
3309	Fetch reviews for a given PR number .
3310	Fetch commit commits .
3311	List all reactions for a pull review comment
3312	Get user information .
3313	Get the orgs for a user .
3314	Get the current rate limit .
3315	Get the rate limit for tokens .
3316	Choose the most recent API token .
3317	Check if we need to wait for tokens .
3318	Update the current rate limit .
3319	Initialize metadata .
3320	Store data in the archive .
3321	Retrieve an entry from the archive .
3322	Create an archive .
3323	Generate a hash for the given uri and payload .
3324	Verify the integrity of the archive
3325	Load metadata from the archive .
3326	Return the number of rows in a table .
3327	Create an archive .
3328	Remove an archive .
3329	Search for archives .
3330	Search for archives .
3331	Search for all files in the directory .
3332	Return the file type for the given filepath .
3333	Generator for months between two dates .
3334	Convert an email message to a dictionary .
3335	Remove XML characters from the XML string .
3336	Convert XML stream to dict .
3337	Return an iterator of issues from raw JSON data .
3338	Get a list of issue ids .
3339	Get information about an issue .
3340	Get information about a user .
3341	Make a call to Redmine .
3342	Fetch DockerHub data
3343	Fetch data from category
3344	Get the content of a repository .
3345	Map custom fields to custom fields
3346	Filter out custom fields .
3347	Parse a page of issues into issues .
3348	Gets issues from github
3349	Returns a list of all issues .
3350	Get all comments for an issue .
3351	Get the list of available fields .
3352	Fetch build data
3353	Return a list of jobs .
3354	Get builds for a job .
3355	Parse the questions from the raw page .
3356	Return a generator of questions .
3357	Setup command line arguments for StackExchange .
3358	Fetch items from MediaWiki .
3359	Get the timestamp of the given reviews .
3360	Fetch and parse pages .
3361	Get all pages
3362	Get recent changes .
3363	Fetch messages .
3364	Yields messages from raw_json .
3365	Filter message based on given chats .
3366	Retrieve a list of updates .
3367	Fetch article articles
3368	Add metadata to item .
3369	Parse an article .
3370	Fetch data from remote .
3371	Fetch an article
3372	Fetch data from the remote server .
3373	Fetch data from the archive .
3374	Create an HTTP session .
3375	Setup rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit .
3378	Parse a Supybot log file .
3379	Retrieve a list of supybot archives .
3380	List all supybot archives
3381	Parse the stream .
3382	Parse the suybot timestamp .
3383	Parse supybot message .
3384	Fetch topics .
3385	Parse the topics page .
3386	Get information about a specific topic .
3387	Get a single post .
3388	Fetch items from a given category
3389	Parses the JSON output into a list of Tasks .
3390	Return a list of User objects .
3391	Get a list of tasks .
3392	Get a list of transactions .
3393	Get a list of users .
3394	Retrieve a list of phids .
3395	Call the given method and return the result .
3396	Return a unique ID for an item .
3397	Parse the contents summary .
3398	Gets the contents of the specified date range .
3399	Get historical content .
3400	Parse the result .
3401	Returns the URL for the capabilities request .
3402	Return the XML content of the given URL .
3403	Read an XML string and return it .
3404	Parses the result and creates MeasurementTimeseries object
3405	Build the base URL .
3406	Get elements of a complex type .
3407	Construct a schema from a list of elements .
3408	Build a URL to describe a feature type .
3409	This function takes a wordcount and prints the output
3410	Gets the movie list .
3411	Gets the TV list from the API .
3412	Gets a list of movies from the API .
3413	Gets the details of a user .
3414	Gets the alternative titles .
3415	Gets the credits for this account .
3416	Gets the external ids for this project .
3417	Gets the keywords for the search .
3418	Gets the recommendations for a user .
3419	Gets the release dates for a project .
3420	Gets the releases for a project .
3421	Gets the translations for this project .
3422	Gets the similar movies .
3423	Gets the reviews for this campaign .
3424	Gets the changes for this project .
3425	Gets upcoming events .
3426	Sets the currently playing status .
3427	Gets the popular submissions from the API .
3428	Gets the most recently played ratings .
3429	Gets the account states .
3430	Post a rating .
3431	Gets the movie credits .
3432	Gets the TV credits for this timeline .
3433	Gets information about credit id .
3434	Gets the TV information from the API .
3435	Gets the details of the account .
3436	Gets the movie list .
3437	Gets information about the account .
3438	Gets the movie movies from the API .
3439	Gets a new token .
3440	Gets the user s account validity .
3441	Gets a new session .
3442	Create a new guest session .
3443	Gets the rated movies .
3444	Gets the item status .
3445	Create a new list .
3446	Removes an item from the list .
3447	Clears the list .
3448	Gets the content ratings for this timeline .
3449	Gets the similar IDs for similar documents .
3450	Gets on the air .
3451	Gets information about a specific season .
3452	Gets the credits for this season .
3453	Gets the external ids for this season .
3454	Gets information about a particular series .
3455	Gets credits for this season .
3456	Gets the external ids for this season .
3457	Set attributes to values .
3458	Gets movie information .
3459	Gets a single collection .
3460	Gets the TV information from the API .
3461	Gets the person information .
3462	Gets the company information .
3463	Gets the keywords for the account .
3464	Gets a list of objects from the API .
3465	Normalize a string .
3466	Counts the number of refs .
3467	Calculate count of n - grams
3468	Compute the error probability of x .
3469	Align texts to target blocks .
3470	r Find all descriptors in a module .
3471	Register a list of descriptors .
3472	r Register desc and version .
3473	Prints string to stdout .
3474	r Checks if the given descriptor is a class .
3475	Return a JSON - ready representation of the command .
3476	The coordinate of the descriptor
3477	r Calculate the atomic area of an atom .
3478	r Returns the surface area .
3479	r Creates a solvent object from a molecule .
3480	Deserialize object from JSON .
3481	r Fill with missing values .
3482	r Drop missing values from molecule .
3483	r Returns a generator of tuples .
3484	r Returns a dict as a dict .
3485	r Get the name of the field .
3486	Decorator to log the function calls .
3487	Synchronize a function .
3488	Print a progress message .
3489	Display a message .
3490	Fail with an exception .
3491	Get a temporary file name .
3492	Set a temporary file .
3493	Clean temp files
3494	Returns a fixed path of the query .
3495	Returns a list of legal parameters for a given method .
3496	Merge parameters of method .
3497	Add command line options .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Wait for all workers to complete .
3501	Record progress information .
3502	read S3 keys from environment variables
3503	Read S3 keys from command line options .
3504	Read S3 keys from config file .
3505	Initialize S3 keys .
3506	Connect to S3
3507	List all S3 buckets .
3508	Walk an S3 object and yield a list of paths .
3509	Perform a directory walk .
3510	Expand a source into a list of paths .
3511	Upload a single file to the pool .
3512	Put multiple files into a single directory .
3513	Create a bucket .
3514	Update the permissions of an object .
3515	Prints all the files in the specified directory .
3516	Download a single file from the pool .
3517	Get all the files from the source directory .
3518	Copy a single file from S3 to the pool .
3519	Copy files from source to target .
3520	Delete all files in source
3521	Walk a directory and return a list of relative paths .
3522	Sync local directories to target .
3523	Return the hash of a file .
3524	Return the md5 of the file
3525	Make sure the target directory exists .
3526	Checks if the md5 cache matches the local key .
3527	Match path against filter_path .
3528	Walk an s3 directory and yield the result .
3529	If the last_modified_before is less than the last_modified_before then the object will be appended to the result .
3530	Get the permissions of a file
3531	Look up an S3 object .
3532	Read a chunk of data from a file .
3533	Upload a single file to target .
3534	Verify that the downloaded file is correct .
3535	Write a file to a file .
3536	Copy an object from source to target .
3537	Runs the given command .
3538	Validate format parameter
3539	Pretty print a list of objects .
3540	List all buckets
3541	Create a new bucket
3542	Handler for S3 .
3543	Get S3 handler
3544	Output files to S3
3545	Dsync dsync
3546	Copy files to S3
3547	Migrate multiple files
3548	Delete files from S3
3549	Shows the size of the S3 bucket .
3550	Print the total size of the S3 bucket .
3551	Return the date and value as a tuple .
3552	Match time .
3553	Match a delta value .
3554	Check that value is dict .
3555	Discover the Xiaomi gateway .
3556	Start listening for messages .
3557	Get data from hub .
3558	Push data to listeners .
3559	Generate and return the key
3560	Catch exception handler .
3561	Include the pyramid framework .
3562	Ensure logging handler exists .
3563	Try to get the requested request .
3564	Initialize rollbar .
3565	Decorator to wrap lambda functions .
3566	Report a message to Rollbar .
3567	Search for songs .
3568	Create an agent log .
3569	Build the person data .
3570	Add data to the lambda context .
3571	Add request data to data .
3572	Determine if frame should be added .
3573	Build request data .
3574	Build the server data .
3575	Build a JSON - serializable payload .
3576	Run the application .
3577	Compose two Chosungs .
3578	Decompose a Hangul letter .
3579	Checks if the given target string has the Hangul character .
3580	Attaches the word to the given word .
3581	Check if a node is inside an exception .
3582	Check if node is inside lambda
3583	Get all elements of a node .
3584	Clobber except statement .
3585	Check if node is a super class .
3586	Check if node is an error .
3587	Check if the given node is a default argument .
3588	Check if the given node is a function decorator .
3589	Check if node is an ancestor node .
3590	Return the parent of node .
3591	Decorator to register a function .
3592	Return an iterable of fields from a string .
3593	Get the argument from a call .
3594	Check if the given node is a standard exception .
3595	Check if an error occurs in a certain type .
3596	Check if a function is decorated with a property .
3597	Check if function is decorated with qnames .
3598	Return an astroid . ExceptHandler object for the given node .
3599	Return True if the given node is a fallback block .
3600	Return a list of exception handlers for the given node .
3601	Return True if node is ignored .
3602	Check if a class is abstract .
3603	Try to infer a node .
3604	Return the type of a node .
3605	Check if function is registered in singleispatch .
3606	Check if a node is postponed evaluation .
3607	Return the fully qualified names of a module .
3608	Convert an import node to absolute name .
3609	Return a string representation of the definition .
3610	Build the graph for the dependencies .
3611	Visitor for import .
3612	Visitor for importfrom .
3613	Check if the first node is a non - import .
3614	Records an imported node .
3615	Check that the import order is correct .
3616	Check if a relative import is made .
3617	Add an imported module .
3618	Check if a module is deprecated .
3619	Check if a module is preferred .
3620	Report external dependencies .
3621	Filter the dependency graph .
3622	Parse the rcfile .
3623	Insert default options into sys . argv
3624	Show the attribute of the given node .
3625	Return the callbacks for the given node .
3626	Visit a node .
3627	Raise InvalidMessageError if the message id is invalid .
3628	Check that the function is called .
3629	Check if a datetime is valid .
3630	Check if a function is open .
3631	Handle a message .
3632	Displays all the messages .
3633	Return the title for the given node .
3634	Set default options .
3635	Show if node is show_builtin .
3636	Add class node
3637	Get the ancestors of a node .
3638	Get all instances of the given class .
3639	Extract all classes of the given node .
3640	Leave project diagram .
3641	Visitor for ImportFrom node .
3642	Add a class diagram to the diagram
3643	Return a list of diagram definitions for diagram .
3644	Check if an owner is ignored .
3645	Return a list of node names that are similar to the given attribute .
3646	Return True if owner is no member .
3647	Check if node has a parent of type .
3648	Check if the given name is used as a variadic variable .
3649	Check if a variable is a context variable .
3650	Visitor for attribute node .
3651	Check for assignment .
3652	Check that the function is not callable .
3653	Visitor for unaryop nodes .
3654	Iterate over the interfaces of a node .
3655	Create a project from a list of files .
3656	Visitor for Package nodes .
3657	Replace locals_type node .
3658	Handle assignment nodes .
3659	Handle assignattr types .
3660	Handle imported modules .
3661	Visitor for ImportFrom node .
3662	Determine if a module should be included
3663	Handle imported module .
3664	Return ANSI escape code .
3665	Colorize msg with ANSI escape codes .
3666	Register the given linter .
3667	Handle messages .
3668	Display a layout .
3669	Handle a message .
3670	Write a graph .
3671	Write a node .
3672	Write an edge .
3673	Check for new format .
3674	Process a non - raw string token .
3675	Format a section .
3676	Handle an evaluation section .
3677	Writes a table to the output .
3678	Write a table to the terminal .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Check that the given symbol is unique .
3683	Raise InvalidMessageError if msgid has two symbols .
3684	Raise InvalidMessageError .
3685	Get message definitions .
3686	Get the display string for a message .
3687	Print help message .
3688	List available messages .
3689	Initalize Sphinx builder .
3690	Return CPU count .
3691	Create a table showing the messages in the report .
3692	Context manager to fix python paths .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disable all reporters .
3698	Enables all ports in Python 3 .
3699	Return all registered checkers .
3700	Return a sorted list of checkers .
3701	Prepare checkers .
3702	Expand the given modules .
3703	Set the current module .
3704	Run an astroid . module .
3705	Report the evaluation .
3706	Handle help message .
3707	Print the full documentation .
3708	List messages and exit
3709	List all checkers
3710	Wraps text into a single line .
3711	Get the module and frame ID for a given node .
3712	Safely decode a line .
3713	Check if a base name is in the blacklist .
3714	Register all plugins in a directory
3715	Convert a string to a comment .
3716	Format an option value .
3717	Format a section .
3718	Format an INI format file .
3719	Insert a child at the given index .
3720	Append a child to this node .
3721	Return a list of all parent nodes .
3722	Formats the format from the stream .
3723	Compute the content of a table .
3724	Compute the content of the layout .
3725	Recursively collect block lines .
3726	Handle an ignored message .
3727	Register a report
3728	Make the report sections .
3729	Add a new stats to the stats .
3730	Returns the name of the setter property .
3731	Return the setter property of a node .
3732	Return True if the return function is something like something .
3733	Return a list of possible exception types .
3734	Add messages to messages handler
3735	Process a Python module .
3736	Process comments .
3737	Check if the given name is a future import statement .
3738	Return True if parent is a for statement .
3739	Return the overridden method .
3740	Return information about the package .
3741	Detects global scope .
3742	Check if a name is local .
3743	Mark a node as consumed .
3744	Check if a global variable is defined .
3745	Ignore class scope .
3746	Check if node has homonym in the function scope .
3747	Check for unpack .
3748	Recursively check all metaclasses in a class definition .
3749	Return a list of packages in a directory .
3750	Install pylint packages
3751	Run install .
3752	Add similarities to a table .
3753	Main function .
3754	Append a line from a stream .
3755	Compute the number of alleles .
3756	Display similarity information .
3757	Find the common lines between two lines .
3758	Iterate over all possible sims .
3759	Iterate over stripped lines .
3760	Create index for each line in the file .
3761	Return True if the definition is equivalent to a call .
3762	Checks whether two nodes are equal .
3763	Check if the original and overrides have the same default value .
3764	Determine if two parameters are different .
3765	Infer a call result .
3766	Mark node as accessed .
3767	Check that the class definition is consistent .
3768	Check that the given node is consistent .
3769	Check that the base is a valid class .
3770	Check if a function definition is valid .
3771	Check if a super call is a super function .
3772	Leave a function definition .
3773	Check slots in slots .
3774	Visitor for name node .
3775	Iterate over the accessed members .
3776	Check for abstract methods .
3777	Check method1 and refmethods .
3778	Check if the given node is a mandatory method parameter .
3779	Check if the body is a raising statement .
3780	Check for an exception context .
3781	Check for function definition .
3782	Display the report .
3783	Check if the node is a typing namedtuple .
3784	Check if the given node is an enum class .
3785	Check if the given node is a dataclass .
3786	Initialize the Linter .
3787	Check if the class definition is too long .
3788	Leave a class definition .
3789	Parse if node .
3790	Check that the condition is too many boolean expressions .
3791	Check the docstring of a docstring .
3792	Format the message with the given template .
3793	Check if the given index is a trailing comma .
3794	Check if the node is an elif node .
3795	Checks if an elif node is a valid one .
3796	Check for a stop iteration .
3797	Return True if exception is inherited from stopiteration .
3798	Check for stop iteration .
3799	Check for nested blocks .
3800	Finds the type of isinstance calls in the given node .
3801	Check if two nodes are merging .
3802	Checks if the given node is a combined comparison .
3803	Return True if the node is an AND operator .
3804	Ensure that the given node is consistent .
3805	Check if a return statement is ended .
3806	Check for loops .
3807	Check if graphviz is available .
3808	Generate diadefs
3809	Emits the dependencies of the graph .
3810	Write the diagram to the printer .
3811	Set the printer .
3812	Setter for VCGPrinter .
3813	Return True if this rule should be emitted .
3814	Format the message for printing .
3815	Get environment variables .
3816	Run pylint
3817	Run a pylint command .
3818	Return the list of vertices in the list .
3819	Get the source code .
3820	Generate the graph from the source file .
3821	Format a section .
3822	Manage messages by msgid .
3823	Disable message for msgid .
3824	Enable message for msgid .
3825	Return the symbol associated with msgid .
3826	Check if a message is enabled .
3827	Add a message .
3828	Print the full documentation .
3829	Print the checker documentation .
3830	Calculate indentation length .
3831	Generate indentation hint .
3832	Return line indentation .
3833	Handle line start .
3834	Return the valid indentation strings .
3835	Indent spaces after bracket .
3836	Creates a continuation token .
3837	Push a token onto the stack .
3838	Handle a new line .
3839	Check for parentheses .
3840	Check if token is a valid type annotation .
3841	Check for equality .
3842	Check that the token is enclosed by a space .
3843	Visitor for default blocks .
3844	Check for multiple statements .
3845	Check the given lines .
3846	Check the indentation level .
3847	Determine if a function is inside an iterating context .
3848	Check if node is a conditional statement .
3849	Handle built - in functions .
3850	Visitor for subscripts .
3851	Add a message for an attribute .
3852	Unpack an exception handler .
3853	Check if raise is raised .
3854	Search for pylintrc .
3855	Validate value .
3856	Expand the default value .
3857	Match long option .
3858	Register an option provider .
3859	Callback for setting a provider option .
3860	Set global option .
3861	Generate the config file .
3862	Load config from config file
3863	Load command line options .
3864	Add a help section .
3865	Return the help text .
3866	Loads the default values from self . options .
3867	Return the attribute name for an option .
3868	Return the definition of an option .
3869	Iterate over all options grouped by section .
3870	Check if a function is a bound method call .
3871	Check whether the node is a complex format string .
3872	Initialize logging modules .
3873	Handle ImportFrom node .
3874	Register an Import node .
3875	Visitor for calls .
3876	Check if the given format_string is valid .
3877	Check if the given node is a loop .
3878	Return the parent of a break node .
3879	Check if a loop exits early .
3880	Get property classes and their names .
3881	Determine the type of a function .
3882	Create a report for each node type .
3883	Check if node is redefined by decorator
3884	Check if a call is a single argument
3885	Check if a starred node is a starred node .
3886	Check for nonlocal and global variables .
3887	Check if the function is abstracted .
3888	Check for an Else - on loop .
3889	Check if node is not in loop .
3890	Initialize the linter .
3891	Check that the expression is valid .
3892	Visitor for lambda nodes .
3893	Visitor for Assert node .
3894	Check for duplicate keys .
3895	Check if the node is unreachable .
3896	Check if node is not in final body .
3897	Check if a node is reversed .
3898	Check that the variable is a valid keyword .
3899	Check the name of a node .
3900	Check docstring for docstring .
3901	Check that the literal is a literal .
3902	Parse a sub - graph .
3903	Parse a subgraph .
3904	Add messages to the module .
3905	Add a checker to the checker .
3906	Recursively walk the AST tree .
3907	Add a relationship .
3908	Get a relationship
3909	Return a sorted list of node names .
3910	Return a sorted list of methods .
3911	Add an object to diagram .
3912	Return a list of class names .
3913	Return the list of classes .
3914	Return the class with the given name
3915	Return a list of modules .
3916	Return a module by its name
3917	Get a module by name .
3918	Add a from_module to the module .
3919	Deletes the grant from the cache .
3920	Get a query from the database .
3921	Get user by username and password .
3922	Get an access token .
3923	Set token for client .
3924	Set the access code for the grant .
3925	Retrieve a single client .
3926	Prepare a request .
3927	Initialize the Flask application .
3928	Create a new OAuth remote app .
3929	Make a request to the API .
3930	Authorize the user .
3931	Handle an OAuth1 response .
3932	Handle an OAuth2 response .
3933	Handles an authorization response .
3934	Deprecated .
3935	Hash token .
3936	Make a client with the given token .
3937	Create an OAuth client .
3938	Temporarily set an insecure transport .
3939	Confirm an authorization request .
3940	Decorator to create a request token response .
3941	Get client secret from request .
3942	Get the secret for a request .
3943	Get the secret for an access token .
3944	Get the default realms for a client .
3945	Get the realms of a request .
3946	Return the redirect uri for the given request .
3947	Get an rsa key for a client .
3948	Validate client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate the given timestamp and request .
3952	Validate a client redirect URI .
3953	Validate the requested realms .
3954	Validate a verifier
3955	Verify a request token .
3956	Verify the requested realms .
3957	Save an access token .
3958	Save a request token .
3959	Save verifier .
3960	Return the URL for the provider error .
3961	Confirm an authorization request .
3962	Verify a request .
3963	Get client credentials from request .
3964	Check if client authentication is required .
3965	Authenticate client .
3966	Authenticate a client .
3967	Get the scope of a refresh token .
3968	Confirm a refresh token s scopes .
3969	Get the default redirect uri .
3970	Get the default scopes for a client .
3971	Destroy an authorization code .
3972	Save an authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate a grant .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate scopes .
3981	Validate username and password .
3982	Revoke an access token .
3983	Update default request data .
3984	Convert all keys in a dictionary to strings
3985	Change the Authorization header .
3986	Register this client to a remote app .
3987	Create a remote app .
3988	Extract the parameters from the request .
3989	Convert text to bytes .
3990	Decode a base64 - encoded string .
3991	Create a response object .
3992	Return cached clients .
3993	Add a remote app .
3994	Add an OAuth2 application .
3995	Check if an exception occurred .
3996	Generate X509 certs
3997	Load private key callback
3998	Check if the load_privatekey callback is incorrect
3999	Check if the load_privatekey callback is wrong
4000	Get the CRL
4001	Checks if the revocation of the revocation registry is valid .
4002	Create a certificate request .
4003	Creates a X509 certificate
4004	Create a decorator that raises NotImplementedError .
4005	Load trusted locations .
4006	Set the password callback .
4007	Use the specified certificate chain file .
4008	Use a certificate file .
4009	Use an SSL certificate .
4010	Add a certificate to the context .
4011	Use a private key file .
4012	Use a private key .
4013	Load the client certificate list .
4014	Set verify depth .
4015	Load a temporary dh file .
4016	Set SSL cipher list .
4017	Set the client certificate list .
4018	Add a client certificate .
4019	Set the callback for the TLSExt server .
4020	Set the TLSExt use .
4021	Set the next NPNP select callback .
4022	Set the SSLProtocol protocol .
4023	Set the certificate select callback .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set an OCSP client callback .
4027	Set SSL context .
4028	Return the server s host name .
4029	Set TLSExt host name .
4030	Receive data from the socket .
4031	Receive data from the socket .
4032	Read data from the socket .
4033	Attempt to renegotiate the connection .
4034	Shutdown the SSL connection .
4035	Return a list of cipher strings .
4036	Return a list of client certificates .
4037	Shutdown the SSL connection .
4038	Return a random number from the server .
4039	Return a random number from the server .
4040	Return the master key .
4041	Export the contents of a key to a string .
4042	Get a single SSL session .
4043	Return the current cipher name .
4044	Return the bits of the current cipher .
4045	Get the version of the cipher .
4046	Returns the protocol version string .
4047	Return the next negotiated protocol .
4048	Set the SSL protocol for the certificate .
4049	Return the certificate negotiated by the SSL protocol .
4050	Return a new buffer .
4051	Convert a BIO object to a string .
4052	Set the boundary of the boundary .
4053	Convert an ASN timestamp to a string .
4054	Get an elliptic curve by name .
4055	Dump a public key .
4056	Load a public key from a buffer .
4057	Sign data using the given key .
4058	Verify the signature of a certificate .
4059	Dump a CRL into a string .
4060	Return a cryptography key .
4061	Generate a new public key .
4062	Check if the key is valid .
4063	Load the set of elliptic curves .
4064	Load the elliptic curves .
4065	Return an EC key .
4066	Return a string representation of the certificate .
4067	Return a list of component names .
4068	Return the short name of the certificate .
4069	Return the data as a string .
4070	Convert this certificate to a cryptography object .
4071	Set the public key .
4072	Return the public key of the certificate .
4073	Return the name of the certificate .
4074	Add multiple X509 extensions to the request .
4075	Returns a list of all X509Extension objects .
4076	Verify the certificate against a pkey .
4077	Convert this certificate to a cryptography object .
4078	Set the certificate version .
4079	Return the public key of the certificate .
4080	Set the public key .
4081	Signs the certificate using the given key .
4082	Return the signature of the certificate .
4083	Return the MD5 digest of the certificate .
4084	Set the certificate number .
4085	Return the serial number of the certificate .
4086	Adjust the amount of time after the certificate .
4087	Adjust the date of the certificate after amount .
4088	Check if the token has expired .
4089	Return the issuer name .
4090	Set the issuer of this certificate .
4091	Return the name of the certificate .
4092	Set the name of the certificate .
4093	Add one or more extensions to the certificate .
4094	Get an X509 extension by index .
4095	Add a certificate to the store .
4096	Add a crl to the store .
4097	Set the time of the certificate .
4098	Initialize the certificate .
4099	Create an X509StoreContextError from the context .
4100	Verify the certificate .
4101	Set the serial number of the certificate .
4102	Return the serial number of the certificate .
4103	Set the reason for this certificate .
4104	Return the reason of the certificate .
4105	Set the revocation date of the certificate .
4106	Convert this certificate to a cryptography object .
4107	Return the revoked certificates .
4108	Return the issuer of this CRL .
4109	Sign the CRL with the given digest .
4110	Exports a certificate .
4111	Return the type name of the key .
4112	Set the certificates for this certificate .
4113	Generate an X509 certificate .
4114	Sign a signature using a key .
4115	Verify a keypair .
4116	Return a base64 encoded string .
4117	Get the public key .
4118	Set the public key .
4119	Raise an exception from the error queue .
4120	Convert text to bytes .
4121	Create a token for printing .
4122	Return service metadata .
4123	Returns an iterator over all the issues in the board .
4124	Return a list of annotations for a given card .
4125	Get boards .
4126	Get list of lists
4127	Get cards from list .
4128	Get comments for a card .
4129	Build an API URL .
4130	Retrieve a list of links .
4131	Convert Link field to dict .
4132	Return a list of github issues
4133	Return a list of pull requests for the given tag .
4134	Aggregate remote issues .
4135	Get a config value from the main section .
4136	Return a dictionary of templates .
4137	Validate the service config .
4138	Check if the given issue should be included .
4139	Make a table from a list of lists .
4140	Execute a command and return the password .
4141	Return an integer as an integer .
4142	Pull the bugwarrior .
4143	Get data from url
4144	Get a collection from the API .
4145	Find the unique UUID for the given issue .
4146	Merge the given field from the left to right .
4147	Builds uas config overrides
4148	Parse sprint string .
4149	Get OAuth2 credentials .
4150	Performs multiple ROUGE - N - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R
4151	Calculate p - values for each gene .
4152	Calculate the corrected p - values .
4153	Z - score along axis .
4154	Plot a heatmap .
4155	Adjust the ticks of the axes .
4156	Prepare an argument parser .
4157	Add a command parser to subparsers .
4158	Adds parser to subparsers .
4159	Add command line parser to subparsers .
4160	Evaluate gene enrichment score .
4161	Generate a ranking metric tensor .
4162	Calculate the ranking for the given dataframe .
4163	Calculatesea p - value .
4164	Compute the gsea significance .
4165	Returns a pandas DataFrame with the names and descriptions
4166	Returns a pandas DataFrame of all available datasets
4167	Returns a DataFrame with the attributes of the dataset .
4168	Returns a DataFrame with the filters
4169	Run Biomart query .
4170	Run GSEA clustering .
4171	Run a single sample of gene_sets .
4172	Run prerank algorithm .
4173	Generate a replot for the given indir .
4174	Set the number of processes .
4175	Load gene sets .
4176	Get the list of available libraries .
4177	Download and generate gene sets .
4178	Build the heatmat .
4179	Save results from zipdata .
4180	Load gene expression data from file .
4181	Run GSEA test .
4182	Run GSEA computation .
4183	Runs samples permu .
4184	Calculate enrichment score for each gene .
4185	Save results to file .
4186	Parses GSEA and ranks
4187	Enrichr with gene_list and gene_sets .
4188	Parse gene sets .
4189	Parse gene list .
4190	Sends a list of genes to the server .
4191	Check the number of genes in a user list .
4192	Get the background genes .
4193	Connect to Enrichr Server
4194	Create a cube layer .
4195	Draw an icosphere filter .
4196	Render a torus image .
4197	Draws a grid on a plane .
4198	Plot a cube script .
4199	Get color values .
4200	Check if var is a list
4201	Make a list of variables .
4202	Writes a filter to the script .
4203	Parse an ls3 loop .
4204	Add merge vertices to the script .
4205	Function to add holes to the script .
4206	Applies Splices Incident to the script .
4207	Add Snap Mismatched Borders filter to the script .
4208	Add translation to script .
4209	Add a rotation to the script .
4210	Add a scaling factor to the script .
4211	Return the function for cylindrical coords .
4212	Wraps a cylindrical function .
4213	Generate bend script .
4214	Function to deform a curve .
4215	Convert a script to a tex file .
4216	Convert mesh to face format .
4217	Generate a uniform mesh resampling script .
4218	Generate a synthetic Poisson surface .
4219	Voronoi plot
4220	Filter all faces in the script .
4221	Add a filter to the script .
4222	Add conditional face selection to script .
4223	Add a conditional function to the script .
4224	Add vertices to the script .
4225	Execute a spherical vertices .
4226	Convert a list of Layers to XML .
4227	Rename the layer .
4228	Change the current layer .
4229	Duplicate the current layer .
4230	Delete lower case .
4231	Handle an error .
4232	Starts a filter script .
4233	Add a new layer .
4234	Delete a layer .
4235	Save filters to file .
4236	Run a meshlab server .
4237	Creates a circle
4238	Run Hausdorff distance filter .
4239	Calculate Poisson disk .
4240	Generate a mesh element .
4241	Generate a clustered vertices .
4242	Add a flat plane filter to the script .
4243	Add triangles to the parametrization file .
4244	Generate a Voronoi injection filter .
4245	Measure the topology
4246	Parse the topology .
4247	Parse Hausdorff log .
4248	Generate a function script .
4249	Generate a Voronoi filter script .
4250	Generate a cyclic rainbow .
4251	Compute the dot product of x and y .
4252	Return the cross product of two vectors .
4253	Multiply a scalar .
4254	Add a new rule to the script .
4255	Flip faces in the script .
4256	Generate a filter for point sets .
4257	Run taubin filter .
4258	Applies a depth filter to the script .
4259	Sort polygons .
4260	Measure the topology .
4261	Measure the geometry of all layers
4262	Measure layer dimension .
4263	Convert filename to lowercase .
4264	Patches the app s request_class .
4265	Return the configuration for a set .
4266	Configure uploads .
4267	Return the uploaded configuration .
4268	Return the URL for the uploaded file .
4269	Return the path to the destination folder .
4270	Check if file extension is allowed .
4271	Resolves a conflict between the target_folder and the target_folder .
4272	Extract the version from the given file .
4273	Remove duplicates from list of objects .
4274	Returns the difference between two objects .
4275	Format the object count as a tuple .
4276	Trace memory usage event .
4277	Return a list of tuples representing the execution time .
4278	The object overhead .
4279	Compute memory overhead .
4280	Profile the current package .
4281	Profile the module .
4282	Profile the function .
4283	Run the profiling .
4284	Return all modules in a package .
4285	Run a function in a separate process .
4286	Determine the type of a run object .
4287	Initialize the module .
4288	Initialize the profile .
4289	Initialize the profile .
4290	Replace sys . argv with a list of arguments .
4291	Sample from profiling .
4292	Insert a stack into the call tree .
4293	Recursively fills the sampleCount field
4294	Recursively formats the tree .
4295	Return a summary of the call tree .
4296	Profile the package .
4297	Profile the module .
4298	Profile the function .
4299	Transform profiler stats into a sorted list of tuples .
4300	Profile the object .
4301	Profile the module .
4302	Profile the function .
4303	Initialize the database .
4304	Show the guestbook .
4305	Add a new entry .
4306	Handler for profiling .
4307	Start an HTTP server .
4308	Handle the root file .
4309	Return the content and content of the file .
4310	Handle a GET request .
4311	Handle POST request .
4312	Send a response .
4313	Check if a module is in standard library .
4314	Record line number and timestamp .
4315	Generator for lines without standard library .
4316	Calculate the execution time for each module .
4317	Skip lines in source code .
4318	Calculate profile information for the run .
4319	Format the heatmap .
4320	Profile the module .
4321	Profile the function .
4322	Run all available profilers .
4323	Run a function and return the result .
4324	Predict probabilities for X .
4325	Provide log probabilities for X .
4326	Fit the model .
4327	Count the number of documents in a vocabulary
4328	Sort features in a vocabulary .
4329	Limit features to a subset of documents .
4330	Fit the model on X .
4331	Transform a DataFrame .
4332	Convert to Scikit .
4333	Fit the model using Spark
4334	Provide predictions for the given class .
4335	Fit a linear regression to a series .
4336	Fit the model
4337	Fit and transform the series .
4338	Compute the score for each transformation .
4339	Fit the model .
4340	Score an estimator .
4341	Fit k - means clustering .
4342	Predict values for X .
4343	Predict class labels for X .
4344	Check the dtype of an RDD .
4345	Fit the vocab .
4346	Fit the model to an RDD .
4347	Fit the SVD .
4348	Transforms an RDD using Spark SVD .
4349	Wrapper for collections .
4350	Block an iterable of tuples .
4351	Convert an RDD into an RDD .
4352	Applies a function to each RDD .
4353	Return the shape of the RDD .
4354	Convert each RDD into a numpy array .
4355	Apply a function to each column in the table .
4356	Return the bitperm for the given permission .
4357	Return True if path is only root write permissions .
4358	Check the configuration file .
4359	Read config from file .
4360	Run command as a command .
4361	Execute a command .
4362	Execute a command over SSH .
4363	Validate the configuration .
4364	Return the default headers
4365	Get the body of the request .
4366	Returns the URL for the ExecuteAssistant .
4367	Get the URL for the IFTTT device .
4368	Return the text for a Packet .
4369	Print discovery message .
4370	Scan for devices .
4371	Execute the device .
4372	Send a confirmation message .
4373	Called when a device is pushed .
4374	Execute a single device .
4375	Run the device .
4376	Convert the given transaction into a Transaction object .
4377	Find the path to the ledgerfile .
4378	Check for compatibility .
4379	Get the long description .
4380	Create a PrecalculatedTextMeasurer from a JSON file .
4381	Return the default measure .
4382	Generates a badge .
4383	Generate a list of supported characters .
4384	Generate a sequence of characters from a list of characters .
4385	Calculates a mapping from characters to length .
4386	Write a JSON file to a file .
4387	Convolve a gaussian .
4388	Returns a Gaussian kernel .
4389	Convert an image to grayscale .
4390	Main function for pyssim .
4391	Computes the value of the SSIM value between self and target .
4392	Compute the SSIM between two images .
4393	Destroy the container .
4394	Set code version .
4395	Get the status of the server .
4396	Print the status of the device
4397	Return the node corresponding to the given connection .
4398	Bind to the server .
4399	Handle incoming connection .
4400	Handle incoming messages .
4401	This function is called when a command fails .
4402	Check if the given node should connect to this node .
4403	Connect to node if not already connected
4404	Called when a connection is established .
4405	Called when a message is received .
4406	Called when a connection is disconnected .
4407	Add a node to the peer .
4408	Drop a node from the pool .
4409	Send a message to a specific node .
4410	Destroy this node .
4411	Put an item into the queue .
4412	Adds an item to the heap .
4413	Get the next item from the heap .
4414	Try to acquire a lock .
4415	Returns True if the lock is acquired .
4416	Release a lock .
4417	Decorator to log a function .
4418	Decorator for views that require a token .
4419	Set up the connection list .
4420	Create Elasticsearch indexes .
4421	Migrate an aggregate policy .
4422	Remove the org_name from the report
4423	Saves the report to Kafka
4424	Extract xml data from a file - like object .
4425	Parse an aggregate report XML file .
4426	Convert a list of forged reports into a CSV file .
4427	Parse a DMARC report file .
4428	Get IMAP capabilities .
4429	Save the results to a directory .
4430	Create a zip file from the results .
4431	Email the results of the DMARC command .
4432	Save reports to Splunk
4433	Saves thensics reports to Splunk .
4434	Decode base64 .
4435	Get the base domain .
4436	Get the hostname of an IP address
4437	Convert human - readable timestamp to datetime .
4438	Download a GeoIP address .
4439	Get information about an IP address
4440	Convert an email message using msgconvert
4441	Convert comma separated string to list .
4442	Parse a report file .
4443	Drain all subscriptions .
4444	Publish a message to a subject .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from a subscription .
4449	Flush the connection .
4450	Select the next server .
4451	Process an error message .
4452	Process an op error .
4453	Build the connection to the server
4454	Process a ping message .
4455	Process a single message .
4456	Process info from server
4457	Process the connection from the server .
4458	Flush the pending data .
4459	Read data from the socket .
4460	Perform coactivation on the dataset .
4461	Decode images .
4462	Load features from a file .
4463	Load features from images .
4464	Calculate the Pearson correlation .
4465	Return the dot product of two images .
4466	Select features based on feature selection .
4467	Get studies by masks .
4468	Get the features in the dataset .
4469	Classify data by masks .
4470	Classifier function .
4471	Fit the classifier .
4472	Set class weight .
4473	Fit cross validation .
4474	Fit the sklearn model .
4475	Average the images within the specified regions .
4476	Returns n_voxels from dataset .
4477	Get the top words for a model .
4478	Calculate the Pearson correlation coefficient .
4479	Calculate fdr value .
4480	Load activations from file .
4481	Create the image table
4482	Return a list of ids matching the given features .
4483	Add a list of features to the feature table .
4484	Get feature names .
4485	Returns a dictionary of feature counts .
4486	Load dataset from file .
4487	Save the feature table to a file .
4488	Get image data .
4489	Get feature data .
4490	Get the names of the columns in the dataframe .
4491	Get the ids of the given features .
4492	Search features .
4493	Get the ids by expression .
4494	Convert SDF to scipy . data .
4495	Mark a function as deprecated .
4496	Transform foci by transformation matrix .
4497	Convert foci to matrix .
4498	Apply a transformation to the foci .
4499	Mask the image .
4500	Get image mask .
4501	Load images from files .
4502	Save image to file .
4503	Set the logging level .
4504	Expand an address .
4505	Return a list of tokens from a string .
4506	Parse an address .
4507	Computes the near - duplicate hashes for the given labels .
4508	Convert a dict to a namedtuple .
4509	Get the price for a ticker .
4510	Returns a pandas dataframe for the given tickers .
4511	Get the bulk news
4512	Make a request to the API .
4513	Get a bearer token .
4514	Send a request to the API .
4515	Get the track s tracks .
4516	Get information about an artist .
4517	Get the album s albums .
4518	Returns the artist s top tracks .
4519	Returns the list of related artists .
4520	Retrieve a list of artists .
4521	Get information about a specific category .
4522	Returns a list of playlists for a category .
4523	Returns a list of categories .
4524	Return a list of featured playlists .
4525	Return a paginated list of new releases .
4526	Search for recommendations .
4527	Returns a list of artists or users of the current user .
4528	Get album s albums .
4529	Get all albums for this artist .
4530	Return the total albums in the artist .
4531	Return the artists related to this artist .
4532	Return the currently playing .
4533	Get the current player .
4534	Get available devices .
4535	Return a list of recently played tracks .
4536	Replace tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a new playlist .
4539	Get a list of playlists .
4540	Get tracks in the album .
4541	Get all tracks in this album .
4542	Generate an OAuth2 URL .
4543	Get an album .
4544	Get an artist by ID .
4545	Get a track .
4546	Get a specific user .
4547	Get a list of albums .
4548	Get a list of artists .
4549	Search for songs .
4550	Convert a string into an identifier .
4551	Decorator to make sure a function has an attribute .
4552	Create a client from a client .
4553	Build an OAuth2 URL .
4554	Return a dict representation of the flow .
4555	Return query parameters as string .
4556	Build a list of playlists .
4557	Return a list of tracks for this playlist .
4558	Resume playback .
4559	Transfer player to device .
4560	Retrieve aSpotify object from its href .
4561	Get information about the object .
4562	Convert month to months .
4563	Iterate over all code files found in PyFunceble .
4564	Check if the current version is greater than the current version .
4565	Check if there is a development version
4566	Check if the current version is older than the current version .
4567	Backup the configuration .
4568	Restore the state of the test .
4569	Return True if line is to ignore .
4570	Parse options .
4571	Extract the base from a URL .
4572	Format a string into a list .
4573	Access the resource .
4574	Get the current code .
4575	Check if the given domain is valid .
4576	Check if a domain is a subdomain
4577	Checks if an IP4 address is valid
4578	Check if an IP4 address is valid .
4579	Check if URL is valid .
4580	Load the configuration .
4581	Keeps a random number of times .
4582	This function is called when a URL is downloaded .
4583	Check entry management url
4584	Prints the header .
4585	Processes the file .
4586	Return the to_test domain .
4587	Return the path to the file .
4588	Prints the logo .
4589	Helper function to format a domain string .
4590	Extract domain from file .
4591	Test the file list .
4592	Return a list of file urls .
4593	Switch to a variable .
4594	Return the current state of the function .
4595	Handle the file .
4596	Get the structure .
4597	Create a directory .
4598	Delete all the files in the directory .
4599	Set path to config file .
4600	Load the configuration file .
4601	Download the production config
4602	Try to install IANA .
4603	Download the PLSL .
4604	Install directory structure .
4605	Merge values from upstream config
4606	Load a configuration file .
4607	Split a version string into two digits and number parts .
4608	Check local and upstream versions .
4609	Check if PyFunceble is cloned
4610	Handle non - exist index .
4611	Determine the directory of the analytics host .
4612	Output the test results .
4613	Print the status screen .
4614	Determine if the file should be displayed .
4615	Process line extensions
4616	Load the PyFunceble database .
4617	Normalize an element .
4618	Convert an element into a hierarchical form .
4619	Load the IANA database .
4620	Return the referer of the given extension .
4621	Extract the extensions from the internet .
4622	Update the iana - domains - db
4623	Mine to_get .
4624	Retrieve the contents of the file .
4625	Backup the mined data .
4626	Add one or more files to the network .
4627	Remove the element from the local cache
4628	Return the list of mined files .
4629	Process the mined data .
4630	Return content of file .
4631	Write content to file
4632	Determine whois information .
4633	Extract the expiration date from the file .
4634	Called when no referer is found .
4635	Write the header .
4636	Construct a tuple containing the size of the file .
4637	Return the header .
4638	Construct a dict of size and size
4639	Return the size of the file .
4640	Colorize data .
4641	Print data to stdout .
4642	Return the data for the request .
4643	Save the current state of the action .
4644	Calculate time difference between start and end time .
4645	Format the execution time .
4646	Return the list of files to delete .
4647	Return a list of databases to delete .
4648	Delete all files and databases
4649	Hash the file .
4650	Hash the data .
4651	Get the hash of the file .
4652	Executes a command and returns its output .
4653	Remove a key from the main dictionary
4654	Rename a key
4655	Merge two dictionaries .
4656	Dump the main dictionary to a JSON file .
4657	Dump the main dictionary to a YAML file .
4658	Fix path separator .
4659	Write data to file .
4660	Read the contents of the file .
4661	Return sorted list
4662	Merge two lists .
4663	Return a list of elements that match the pattern .
4664	Match the pattern .
4665	Return a new string with all occurences .
4666	Count the test results .
4667	Calculate the percentage of past and down
4668	Logs the file .
4669	Check if a URL is valid .
4670	Check if a domain is valid .
4671	Check if this element is a subdomain .
4672	Return a Status object .
4673	Reformat the historical_formating_error .
4674	Retrieve the database .
4675	Backup the database .
4676	Return the timestamp of the current date .
4677	The content of the file .
4678	Determine if an inactive database is present .
4679	Retrieve information about the user .
4680	Backup the database .
4681	Check if the user is in the database .
4682	Check if the current time is older than the timestamp
4683	Return the expiration date of the file .
4684	Add a timestamp to the database .
4685	Set travis permissions .
4686	Run travis .
4687	Searches for domains and aliases
4688	Send a WHOIS request to the user .
4689	Return the URL status .
4690	Return the referer for the given extension .
4691	Return the current object .
4692	Yield standard paths .
4693	Return the standard package names .
4694	Yield the line numbers of unused import messages .
4695	Yields unused import module name and module name .
4696	Yield the line numbers of import_starused messages .
4697	Yields ImportStarUsage messages .
4698	Yield the line numbers of unused variable messages .
4699	Yield line numbers from multiple lines
4700	Create a dictionary of messages .
4701	Check source code .
4702	Extract the package name from a line .
4703	Determine if a line is a multiline import
4704	Check if a line is a multiline line .
4705	Filter from import line .
4706	Break up an import line
4707	Filter out unused modules .
4708	Gets a list of messages by line number .
4709	Remove imported star imports from line .
4710	Remove duplicate key .
4711	Determine if a dict entry contains a key .
4712	Return True if value is a literal .
4713	Generate line numbers for a pass .
4714	Filter out useless lines .
4715	Return the indentation of the given line .
4716	Return the end of a line .
4717	Fix the source code .
4718	Split a comma separated string into a set of strings .
4719	Check if the given file is a Python file .
4720	Check if filename is in exclude .
4721	Yields all the files in the given directory .
4722	Main entry point .
4723	Reads the ObtainLeaseResponsePayload from the stream .
4724	Write the LeaseResponse payload to the output stream .
4725	Write the payload to the output stream .
4726	Reads the CancelResponsePayload from the stream .
4727	Create a Name value .
4728	Read digest from stream .
4729	Write digest to stream .
4730	Create a digest .
4731	Read the application specific information from the stream .
4732	Write the application data to the stream .
4733	Create a ApplicationSpecificInformation object .
4734	Reads the DerivationParameters from the stream .
4735	Write the DerivationParameters to a file .
4736	Reads the GetRequestPayload from the stream .
4737	Writes the payload to the output stream .
4738	Reads the GetResponsePayload from the stream .
4739	Writes the payload to the output stream .
4740	Reads the SignatureVerifyRequest payload from the stream .
4741	Write this object to a file - like object .
4742	Reads the signature verification response payload from the stream .
4743	Process a request .
4744	Builds an error response .
4745	Process a single template attribute .
4746	Gets the attributes of the specified object .
4747	Gets the attribute from a managed object .
4748	Sets the attributes on the object .
4749	Sets the specified attribute on the given object .
4750	Determine if the given policy should be allowed .
4751	Writes the payload to the output stream .
4752	Create a new object .
4753	Set a setting .
4754	Load the server configuration file .
4755	Return the bitmask as a bitmask .
4756	Return a list of cryptographic usage masks .
4757	Reads a Long integer from the stream .
4758	Write the long integer to the stream .
4759	Validate that the integer value is valid .
4760	Read a BigInteger from an integer stream .
4761	Writes the BigInteger to the stream .
4762	Ensure that the field is valid .
4763	Validate that the enum is valid .
4764	Read boolean value from stream .
4765	Write Boolean value to stream .
4766	Write Boolean to file stream .
4767	Ensure that the value is valid .
4768	Read interval from stream .
4769	Validate the interval .
4770	Return the key wrapping data .
4771	Set the key wrapping data .
4772	Validate the key value .
4773	Validate the secret data type .
4774	Validate the data type .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to its name .
4777	Create a bit mask from a list of enumerations .
4778	Return a list of enumerations from an enumeration .
4779	Check if a bit mask is a bit mask .
4780	Reads the CreateKeyPairRequest payload from the input buffer .
4781	Writes the template to the output buffer .
4782	Reads the CreateKeyPairResponse payload from the input buffer .
4783	Write this KeyPair to a file .
4784	Reads the GetAttributeListRequest payload from the input buffer .
4785	Write the request to the output buffer .
4786	Reads the GetAttributeListResponse payload from the input buffer .
4787	Writes the GetAttributeList to the output buffer .
4788	Return a sorted list of json files .
4789	Scan policy directory for policies .
4790	Run the monitor .
4791	Retrieves a certificate from a connection .
4792	Returns the extended key usage value from the certificate .
4793	Returns the common names of the certificate .
4794	Get client identity from certificate .
4795	Reads the CreateRequestPayload payload from the input buffer .
4796	Writes the object to the output buffer .
4797	Reads the CreateResponsePayload from the input buffer .
4798	Writes the create response payload to the output buffer .
4799	Convert an object to a core key .
4800	Reads the EncryptResponsePayload from the stream .
4801	Reads the DeriveKeyRequest payload from the input buffer .
4802	Writes the DeriveKey to a file .
4803	Returns true if the given attribute is supported .
4804	Is this attribute deprecated?
4805	Returns True if the attribute applies to an object type .
4806	Returns True if the attribute is a multivalued request .
4807	Get a valid value from the config file .
4808	Read CheckResponsePayload from stream .
4809	Writes the payload to the output stream .
4810	Reads the AttributeReference object from the input buffer .
4811	Write this AttributeReference to a file .
4812	Read Attributes from stream .
4813	Write this object to a file - like object .
4814	Reads the nonce from the stream .
4815	Writes the nonce to the output stream .
4816	Reads the username and password from the input stream .
4817	Writes the username and password to the output stream .
4818	Reads this DeviceCredential from the stream .
4819	Writes the parameters to a stream .
4820	Reads the Credential from the stream .
4821	Writes the Credential to the output stream .
4822	Reads the MAC signature key information from the stream .
4823	Write the MAC signature to the output stream .
4824	Reads the KeyWrapData from the stream .
4825	Writes the parameters to a stream .
4826	Reads this KeyWrapSpecification from the stream .
4827	Write the object to a stream .
4828	Reads the extension information from the stream .
4829	Write the extension information to the stream .
4830	Create an extension .
4831	Read this revocation reason from the stream .
4832	Write the revocation code to the stream .
4833	Validate the revocation message .
4834	Reads the ObjectDefaults from a file .
4835	Write the objectDefaults to a file .
4836	Reads the DefaultsInformation object from a file .
4837	Write the DefaultsInformation to a file .
4838	Reads the RNGParameters from the input buffer .
4839	Write the object to a file .
4840	Reads the ProfileInformation object from the input buffer .
4841	Write the profile information to a file .
4842	Write this ValidationInformation structure to a file .
4843	Reads the CapabilityInformation from the input buffer .
4844	Write the CapabilityInformation to a file .
4845	Stop the server .
4846	Start the websocket .
4847	Reads the LocateRequestPayload from the input buffer .
4848	Write this object to a file - like object .
4849	Reads the LocateResponsePayload from the input buffer .
4850	Write the LocateResponse payload to the output buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a HMAC code .
4854	Encrypts the message using the specified encryption algorithm .
4855	Perform a symmetric encryption .
4856	Performs an asymmetric encryption .
4857	Decrypts the ciphertext using the specified encryption method .
4858	Create an RSA key pair .
4859	Derives a key using the derivation method .
4860	Create an RSA private key from bytes .
4861	Verify a signature .
4862	Reads the SignResponsePayload from the stream .
4863	Write this payload to a file - like object .
4864	Reads from the stream .
4865	Converts a protocol version to a KMIP version .
4866	Reads the protocol version from the stream .
4867	Writes the protocol version to the output stream .
4868	Reads an Authentication object from a stream .
4869	Write this Authentication struct to a file .
4870	Reads the poll request payload from the input stream .
4871	Reads the certificate from the stream .
4872	Write the certificate to the stream .
4873	Authenticate using the SLUGS URL .
4874	Reads the ArchiveResponsePayload from the stream .
4875	Writes the payload to the output stream .
4876	Run the TLS handshake .
4877	Reads the RekeyResponse payload from the stream .
4878	Returns True if the given constraints are supported .
4879	Derive a key .
4880	Returns a list of attributes .
4881	Returns a list of attributes for a specific device .
4882	Query DynamoDB .
4883	Sign data .
4884	Open a client connection .
4885	Close the connection .
4886	Create a new key policy .
4887	Create a new key pair .
4888	Registers a managed object .
4889	Rekey the entry .
4890	Derives a key from an object .
4891	Locate objects .
4892	Checks if the limit is allowed .
4893	Gets a Kmip object .
4894	Retrieves information about the specified attributes .
4895	Activate a Kmip device .
4896	Revokes a revocation ticket .
4897	Calculates the MAC using the specified data .
4898	Builds the cryptography parameters .
4899	Builds the EncryptionKeyInformation object from the value .
4900	Builds a MAC signature key .
4901	Builds a key wrapping specification .
4902	Builds common attributes .
4903	Builds the name attribute .
4904	Reads the query request payload from the input buffer .
4905	Write the payload to the output buffer .
4906	Write the object to a file .
4907	Reads the GetAttributesResponse payload from the input buffer .
4908	Writes the GetAttributesResponse payload to the output buffer .
4909	Get a single entry point .
4910	Gets a group by name
4911	Return all entries in a group .
4912	Load the module and return it .
4913	Create an EntryPoint from a string .
4914	Run livereload .
4915	Generate project .
4916	Generate a controller .
4917	Generate an action .
4918	Generate a form .
4919	Generate model .
4920	Generate a macro .
4921	Make a directory p .
4922	Rewrite a file to another .
4923	Return a human - readable string representation of the given value .
4924	Check if URL is valid .
4925	Encode something .
4926	Decode something .
4927	Convert a function into a JSON response .
4928	Returns the absolute URL for a given endpoint .
4929	Load the config module
4930	Sign in the session
4931	Get current user from session
4932	Create Flask application .
4933	Register jinja2 .
4934	Register blueprint routes .
4935	Register error handler .
4936	Register before request .
4937	Write a dataframe to a CSV file .
4938	Read data from a CSV file .
4939	Serialize a dataframe to a writer .
4940	Deserializes a dataframe from a reader .
4941	Update this instance from a DataFrame .
4942	Update this instance from raw_data .
4943	Downloads the contents URL for this bucket .
4944	Add a new entry from a dataframe .
4945	Adds a new entry from raw data .
4946	Open the intermediate dataset .
4947	Read the intermediate data as binary .
4948	Read the intermediate data as text .
4949	Convert to pandas . DataFrame .
4950	Get an intermediate dataset .
4951	Get all experiments in a workspace .
4952	Get all datasets in a workspace .
4953	Get a dataset
4954	Decorator to publish a function .
4955	Decorator to publish a service .
4956	Decorator to add annotations to a function .
4957	Annotate a function .
4958	Decorator to attach a function to a function .
4959	Find all globals in a code object .
4960	Make a deep copy of the Pen .
4961	Look up a color .
4962	Draws the canvas .
4963	Calculate the extrema of the cubic Bernstein - Bernstein - Bernstein - Bernstein - Bernstein - Bernstein - Bernstein .
4964	Calculate the Jacobian of a cubic Bernstein -stein test .
4965	Build the choices for the sitetree .
4966	Returns a function that returns the options from command_options .
4967	Register a function as an item processor .
4968	Compose a sitetree .
4969	Initialize sitetrees
4970	Empty trees
4971	Get an entry from the cache .
4972	Update an entry in the cache .
4973	Set an entry in the cache .
4974	Initialize the cache .
4975	Resolve the given alias if available .
4976	Check if the current app is an admin .
4977	Calculate the depth of an item .
4978	Return the current item for the given tree alias .
4979	Return the URL for a sitetree item .
4980	Initialize a sitetree .
4981	Get an attribute from the current site .
4982	Return the ancestor level of current item .
4983	Render a sitetree .
4984	Check if the user can access the item .
4985	Return the breadcrumbs
4986	Render a sitetree .
4987	Renders the children of the given item .
4988	Get children of given item
4989	Update the has_children attribute .
4990	Filter items based on the current page
4991	Get the parent item of a given base item .
4992	Add items to current branch
4993	Resolve a variable to the current page context .
4994	Return a sitetree .
4995	Return the list of children of the sitetree .
4996	Display the sitetree breadcrumbs .
4997	Render a sitetree menu .
4998	Render a sitetree .
4999	Create a template for a tag .
5000	Return the URL for a model .
5001	Registers the tree admin .
5002	Handle redirects .
5003	Redirect to the next item .
5004	Redirect to add .
5005	Redirects the tree item to the change view
5006	Return the form for the tree item .
5007	Return the tree for the given item .
5008	Move an item
5009	Save the model .
5010	Returns the urls for this admin .
5011	Dump tree view .
5012	Create a tree .
5013	Create a new tree item
5014	Import the sitetree module .
5015	Return the model class for a setting .
5016	Create a Config from a mapping .
5017	Load configuration from a Python file .
5018	Load config from TOML file .
5019	Create a Config from an object .
5020	Create ZipkinAttrs for a span .
5021	Create HTTP headers for a new span .
5022	Return the current span .
5023	Start the current span .
5024	Stop logging .
5025	Update binary annotations .
5026	Add an annotation to the client .
5027	Override the name of the span .
5028	Create an Endpoint object .
5029	Creates a copy of an endpoint with a new service name .
5030	Build a V1Span object from this span .
5031	Encode a list of spans .
5032	Convert a Span to a protobuf Span .
5033	Convert an unsigned hexadecimal ID to bytes .
5034	Return the protobuf protobuf for the given kind .
5035	Convert an endpoint into a zipkin Endpoint .
5036	Convert zipkin annotations to zipkin_pb2 .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an Endpoint object .
5040	Returns a copy of the endpoint with the given name .
5041	Build an annotation list .
5042	Build a list of binary annotations .
5043	Create a new span .
5044	Convert a Thrift Span to bytes .
5045	Encode a list of Thrift objects .
5046	Detect the encoding of a span .
5047	Convert a list of spans to a string .
5048	Deprecated .
5049	Encodes a single span into the Thrift format .
5050	Create the JSON endpoint for the given endpoint .
5051	Convert a single span to a protobuf .
5052	Decodes a list of spans .
5053	Convert a ThriftEndpoint object into an Endpoint object .
5054	Decode a Thrift annotation into a dictionary .
5055	Convert from Thrift binary annotations to zipkin annotations .
5056	Decode a Thrift Span into a Span .
5057	Convert a trace_id to a string .
5058	Convert an unsigned long integer to lowercase .
5059	Writes a long value to the specified location .
5060	Fixup date and day .
5061	Set the transaction code
5062	Sets the iph id field
5063	Sets the TNR for a tag .
5064	Parses the given string into a list of tags .
5065	Parse MT940 transaction data .
5066	Join a string .
5067	Extract text from a response .
5068	Raise an exception when a rate limit is exceeded .
5069	Perform an asynchronous request .
5070	Get information about a bot .
5071	Get all bots .
5072	Read a term from the transport .
5073	Write a message to the stream .
5074	Close all open files .
5075	Decode a string .
5076	Encode a term .
5077	Add an address to the network .
5078	Send pending messages to the queue .
5079	Sets a callback to be invoked when a serviceHello is received .
5080	cleans up and stops and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given the TYPES and SCOPES in a TIMEOUT
5083	construct a SOAP XML string given a prepared SoapEnvelope object
5084	Discover systems using WS - Discovery
5085	Return the linked item manager .
5086	Return all child relations of a model .
5087	Return all child relationships for parent model .
5088	Custom save method for save
5089	Build an object from serializable data .
5090	Validate the unique forms .
5091	Check if data has changed .
5092	Return a new Address with a valid checksum .
5093	Generate an AddressChecksum .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompts for a seed .
5097	Validate signature fragments .
5098	Get the key for a given index .
5099	Gets the key for the given address .
5100	Create key iterator .
5101	Create a Kerl .
5102	Abort the state at the given offset .
5103	Squeeze the state .
5104	Transform the state .
5105	Execute GetDigests command .
5106	Get a list of private keys .
5107	Prepares a new multisig transfer command .
5108	Add two strings .
5109	Calculate the trits from an integer .
5110	Add two integers .
5111	Add a carry to the left and right .
5112	Prints the seed .
5113	Runs find_transactions command .
5114	Retrieve the inputs between the specified start and stop .
5115	Generate new addresses command .
5116	Return a command that returns a list of transfers .
5117	Add a transaction to the pool .
5118	Retrieve a bundle command .
5119	Send a single transfer .
5120	Send a list of bytes to the device .
5121	Resolve a URI to an adapter .
5122	Send a request .
5123	Log a message at the specified level .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Seed a response for a given command .
5127	Add a digest .
5128	Return a multisig address .
5129	Create an iterator of addresses .
5130	Convert a digest to an Address object .
5131	Generate an address for the given key iterator .
5132	Return a list of Transaction objects .
5133	Iterate over all addresses used by the given seed .
5134	Retrieves the list of bundles from a list of transactions .
5135	Check if the codec is valid .
5136	Get codec info .
5137	Convert input to bytes .
5138	Decode input .
5139	Return a list of addresses .
5140	Add a route .
5141	Create a Transaction object from a string .
5142	Return the JSON - compatible object as a dict .
5143	Get the list of bytes that should be sent to this address .
5144	Set the state of this transaction .
5145	Return a list of messages .
5146	Return a list of Tryte strings .
5147	Return a list of transactions grouped by address .
5148	Return a dictionary of CommandMeta objects .
5149	Send a request to the controller .
5150	Apply a filter to value .
5151	Return the URL for a job .
5152	A list of validators .
5153	Return True if the field is valid .
5154	Create validation errors .
5155	Get the signature errors for the bundle .
5156	Get the error message for a group .
5157	Traverse the bundle .
5158	Start IPython REPL .
5159	Return a random seed .
5160	Return the digest of the fragment .
5161	Return a signature fragment for the given bundle .
5162	Pretty - print the object .
5163	Abort the given trits .
5164	Squeeze the given trits .
5165	Add additional context information .
5166	Validate security level .
5167	Increment the legacy tag .
5168	Return the tag of all transactions .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign the inputs of the bundle .
5172	Sign the input at the given start index .
5173	Create input transactions for addy .
5174	Convert value to the standard unit .
5175	Decompress G1 .
5176	Return the inverse of an integer .
5177	Create an instance from a JSON file .
5178	Find word groups in text .
5179	Searches for a given word
5180	Expand abbreviations in text .
5181	Split the description .
5182	Return a list of categories .
5183	Generate a new Colour .
5184	Plot the component .
5185	Parse builtin name .
5186	Creates a Timecale instance from a built - in name
5187	Create a new Decor from a list of components .
5188	Create a Color object from an image file .
5189	Create Legend objects from a CSV file .
5190	Convert to csv format
5191	Returns the maximum width of the table .
5192	Return a Decor object for the given component .
5193	Get an attribute of the decorated class .
5194	Return the component associated with a colour .
5195	Plot the data in this scene .
5196	Create a Component from text .
5197	Build a summary string
5198	Deprecated .
5199	Process a single row .
5200	Parse csv format .
5201	Return True if self is False otherwise .
5202	Return a list of unique intervals .
5203	Construct a list of intervals from a set of top values .
5204	Convert long data to standard format .
5205	Build a TimeSeries from petrel data .
5206	Build a list of intervals from a dictionary .
5207	Create an object from a CSV file .
5208	Create a TimeSeries from an image file .
5209	Create a Striplog from a log .
5210	Parse a LAS3 string .
5211	Create an Interval object from a csv file .
5212	Return a new Striplog object .
5213	Saves the list to a csv file .
5214	Generate lith3 section .
5215	Plot the intervals in a matplotlib axis .
5216	Get the value of a field .
5217	Extract a single value from the data .
5218	Return the indices that match a search term .
5219	Find all incongruities that overlap .
5220	Find gaps in index .
5221	Prune the strip .
5222	Return a copy of the strip .
5223	Add missing gaps to the iv .
5224	Union with other .
5225	Intersect two Striplog objects .
5226	Merge overlapping segments .
5227	Plots a histogram .
5228	Invert the stack .
5229	Crop the list to the specified extent .
5230	Runs the quality of the repository .
5231	Convert a hex color name to a color name .
5232	Return the log - likelihood of an image .
5233	Overrides get_field .
5234	Returns a list of jobs .
5235	Parse the given HCL .
5236	Update an existing token
5237	Returns a list of all locations .
5238	Fail an existing deployment .
5239	Pause an existing deployment .
5240	Get the health of a deployment .
5241	Drain a node .
5242	Drain a node .
5243	Enable or disable an eligible node .
5244	List files .
5245	Stream the contents of a container .
5246	Get information about a file .
5247	Join an agent .
5248	Update servers .
5249	Remove a node from the node .
5250	Returns a list of nodes by prefix .
5251	Returns a list of evaluation results .
5252	Returns a list of namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert an existing job .
5257	Ensure a job is stable .
5258	Deregister a job .
5259	Get the current configuration .
5260	Delete a peer .
5261	Get deployments by prefix .
5262	Get a random value .
5263	Get a mutator from an object .
5264	Get a string for a polyglot attack .
5265	Runs fuzzing on an object .
5266	Make sure a buffer is safe .
5267	Run the server .
5268	Stop the server .
5269	Render a custom HTML file .
5270	Serve the JSON object .
5271	Runs fuzz on an object .
5272	Spawn a subprocess .
5273	Get the output of the process .
5274	Finish read process .
5275	Close the job process .
5276	Start the worker .
5277	Execute a command and return the output .
5278	Decode a function to JSON .
5279	Build a random string .
5280	Build a string representation of the gram .
5281	Build a quoted string .
5282	Build a random value .
5283	Build an optimization .
5284	Build the definition .
5285	Build the STAR .
5286	Shutdown the process .
5287	Run and monitor the process .
5288	Start the monitor .
5289	Return a random float .
5290	Add a definition to the group .
5291	Add a def_name to a category
5292	Generate a random rule .
5293	Recursively fuzzes the elements of an element .
5294	Return fuzzed response .
5295	Returns the fuzzed object .
5296	Decorate a function to return a mutate object .
5297	Signal handler for SIGINT
5298	Exit the process .
5299	Kill the process
5300	Called when the client is paused
5301	Called when the process is stopped
5302	Called when the process is restarted
5303	Return a list of events from Skype .
5304	Set the user s mood .
5305	Sets the user s avatar .
5306	Gets the metadata for a given URL .
5307	Get a single contact by id .
5308	Get a profile by id .
5309	Return a list of bots .
5310	Get a bot by id .
5311	Search for users using Skype .
5312	Return a list of all pending requests .
5313	Initialize from raw data .
5314	Merge other into this object .
5315	Merge another object into the cache .
5316	Make a call to the API .
5317	Read the token from the token file .
5318	Write token to file .
5319	Verify an authorization token
5320	Refresh Skype token
5321	Gets the user s ID .
5322	Retrieves the registration token from Skype .
5323	Synchronously fetch the endpoints from Skype .
5324	Check if a user exists .
5325	Authenticate using token
5326	Login to Skype .
5327	Configure the messaging service .
5328	Ping the endpoint .
5329	Return a list of recent conversations .
5330	Get a single chat .
5331	Create a new thread .
5332	Extract the id from a URL .
5333	Extract the chat ID from a URL .
5334	Iterate over an iterable yielding items of the given function .
5335	Return unicode text without matter what it
5336	Detect the format of text .
5337	Parse text .
5338	Post as a dict for serializing
5339	Load a yaml file .
5340	Export the given metadata to a string .
5341	Turn metadata into JSON
5342	Return the matched pattern .
5343	Return a list of items .
5344	Return list of sublists .
5345	Convert to newstart .
5346	Return a list of arguments .
5347	Return list of lists matching pattern .
5348	Turn a list of strings into a trie .
5349	Build a pattern from a dictionary .
5350	Check if key is valid .
5351	Insert string at index .
5352	Return the partition of a char .
5353	Return list of subspans for given type .
5354	Shrink overlapping ranges .
5355	Add a new span to the span .
5356	Return the nesting level of this parser .
5357	Return shadow .
5358	Return the shadow of the external link .
5359	Return a dict mapping element names to spans .
5360	Deprecated use pformat instead .
5361	List of Parameter objects .
5362	The list of parser functions .
5363	The list of Template objects .
5364	The list of wikilinks contained in this document .
5365	The list of comment objects .
5366	List of external links .
5367	Return a list of sections .
5368	Return a list of tables .
5369	r Return a list of lists .
5370	Return a list of Tag objects .
5371	Iterate over all subspans of the given type .
5372	Return a list of all ancestors of this text .
5373	Return the parent of this text .
5374	Compute the mode of a list .
5375	Find an argument by its name .
5376	Return a normalized name .
5377	Remove the first argument of the command .
5378	Remove positional arguments from the command .
5379	Set an argument value .
5380	Get an argument by name .
5381	Check if the command has an argument .
5382	Remove an argument by its name .
5383	Convert a spatial reference to a string .
5384	Find an object by ellipsname and crstype
5385	Create a crs from a URL .
5386	Load a geometry from a file .
5387	Return a crs from an EPSG code .
5388	Return a crs from an ESRI code
5389	Return the crs from the given region code .
5390	Return a crs from text string .
5391	Write record to out .
5392	Read a VLR from a stream .
5393	Parse GeoTiff keys from vlr list .
5394	Return a list of GeoTiffKey objects .
5395	Returns the signedness of extra dimensions .
5396	Returns the ID for an extra dimension type .
5397	Create a new PointRecord from a point record .
5398	Copy fields from another record .
5399	Append a value to the array if it is too large .
5400	A frozenset of all dimensions .
5401	Create a vector of zeros
5402	Read points from stream .
5403	Decompress from a compressed buffer .
5404	The dimension of the x dimension .
5405	Dimension of y - axis
5406	The dimension of the dimension .
5407	Add extra dimensions to point data .
5408	Write VRL to out_stream .
5409	Write to file .
5410	Write this file to a file .
5411	Build the dtypes dictionary for point formats .
5412	Builds the dtypes dictionary for the given format .
5413	Convert a numpy dtype to a point format .
5414	Returns the minimum version for a point format .
5415	Check if point format is compatible with a point format .
5416	Returns a list of vlrs for the given type .
5417	Extract vlrs from the list of vlrs .
5418	Reads a VLR list from a stream .
5419	Check if all files have the same point format .
5420	Check if all the files have the same dtype .
5421	Check if the file signature is correct .
5422	Read the header .
5423	Read VRLs from the stream .
5424	Read points from vlrs .
5425	Read compressed points data .
5426	Read the internal waveform packet .
5427	Read the EVLrs list from the stream .
5428	Warn if we are not at the given position .
5429	Open a llas reader .
5430	Read the contents of a file .
5431	Create a las data object from a header .
5432	Create a las dataset .
5433	Convert from one point to another .
5434	Merge las files .
5435	Write a file to disk and read it again .
5436	Return the date of this assessment .
5437	Set the creation date of this object
5438	Returns the minimum values of the minimum y - axis .
5439	Set minimum values
5440	Returns the maximum values of the maximum values .
5441	Set maximum values
5442	A 2D numpy array representing the scaling scales .
5443	A 2D numpy array representing the offset of the mesh .
5444	Read the version of the file .
5445	Convert old_header to new_header .
5446	Unpack an array from a source_array .
5447	Pack a sub - field into an array .
5448	Return a list of dimension names that are missing .
5449	Dictionary representation of all sub - fields .
5450	The total number of extra dimensions .
5451	Return True if this record has a waveform packet .
5452	Main entry point .
5453	Calculate the checksum of a command .
5454	Print a hex message .
5455	Verify response and return it .
5456	Return a list of the set indices of the given length .
5457	Generate a query string .
5458	Demonstration demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Send a disarm command .
5462	Clear the alarm .
5463	Turn on output .
5464	Keep the connection alive .
5465	Monitor the status .
5466	Close the connection .
5467	Purge the user s database .
5468	Guess the type of the file .
5469	Get the ID of a file .
5470	Get a notebook from the database .
5471	Create a notebook model from the database .
5472	Get a directory .
5473	Convert a list of file records to Python objects .
5474	Build a model from a DB record .
5475	Build a file model from the database .
5476	Save a notebook to disk .
5477	Save file to database .
5478	Rename a file .
5479	Delete a file .
5480	Ensure user in database .
5481	Purge all files from the database .
5482	Create a directory .
5483	Check if a user is in a directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	Return a list of files in a directory .
5487	Return a list of directories in the database .
5488	Build a where clause for a file .
5489	Build a select query .
5490	Return default fields for files .
5491	Retrieve a file from the database .
5492	Get a file from the database .
5493	Get file s id
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file in the database .
5497	Generate notebook files .
5498	Purge remote_checkpoints from database .
5499	Generate notebooks from remote_checkpoints .
5500	Generate the notebook tables .
5501	Reencrypt a row .
5502	Reencrypt all files in a user .
5503	Derive a single Fernet key .
5504	Derive the fallback Fernet keys from a list of passwords .
5505	Factory for creating a single password encryption .
5506	Memoize a single argument .
5507	Get the name of a column like a column .
5508	Convert fields to dict .
5509	Convert a row to a dictionary .
5510	Save notebook to path .
5511	Create a remote checkpoint .
5512	Delete a checkpoint .
5513	Get the content of a remote checkpoint .
5514	Return a list of checkpoints for path .
5515	Rename all checkpoints .
5516	Delete all checkpoints at path .
5517	Purge remote checkpoints .
5518	Resolve a path and its parent manager .
5519	Applies a prefix to a model .
5520	Decorator to apply a path to the manager .
5521	Decorator to call a method on the manager .
5522	Decorator for path dispatch
5523	Called when the manager changes .
5524	Get an item from the API .
5525	Normalize an API path .
5526	Split the path into a directory and name .
5527	Convert nb to base64 .
5528	Read a base64 encoded string .
5529	Decode unknown from base64 .
5530	Decode a base64 - encoded file and return it .
5531	Return all the directories of a path .
5532	Decorator to convert path outside of root .
5533	Create user in database .
5534	Separate directories and files .
5535	Iterate over all directories and files .
5536	Iterate over all files in a directory .
5537	Iterate over all files in a directory .
5538	Reencrypt data for all users .
5539	Reencrypt a single user .
5540	Unencrypt all users .
5541	Unencrypt a single user .
5542	Create an alembic . ini file .
5543	Upgrade alembic .
5544	Sanitize a block .
5545	Queue an instance for embed_type .
5546	Loads instances for embed_type .
5547	Insert an instance into the block .
5548	Load the data for the embed type .
5549	Validate data .
5550	The admin page .
5551	Convert to JSON .
5552	Hide the authenticated fields .
5553	Remove fields from the request .
5554	Override parent to allow pagination .
5555	Returns a queryset of published items .
5556	Get published items .
5557	Return the value of an attribute .
5558	Validates a widget .
5559	Validate a zone .
5560	Check if the given id is a valid UUID .
5561	Return user s permissions
5562	Modify admin groups
5563	Validate an author .
5564	Save a zone
5565	Get data as a dictionary .
5566	Prepare data for serialization .
5567	Render the template .
5568	Get the settings for this Integration .
5569	Callback for the user .
5570	Get integration settings
5571	Update an integration settings .
5572	Signup a new user .
5573	Create a tag with the given contents .
5574	Render a zone .
5575	Save the featured image .
5576	Save a subsection .
5577	Return the file extension .
5578	Return the URL for the attachment .
5579	Save image .
5580	Saves a thumbnail .
5581	Return the database connection .
5582	Returns a BandwidthLimitedStream for the given fileobj .
5583	Read amount of bytes from the file .
5584	Consume the given amt .
5585	Schedule the amount of time to consume .
5586	Called when the consumer is consumed .
5587	Calculate the projected rate for the given amt .
5588	Record the consumption rate .
5589	Download a file from a bucket .
5590	Wait for a transfer to complete .
5591	Get callbacks .
5592	Returns a copy of the original_dict filtered by keys .
5593	Decrement the counter .
5594	Finalize the call .
5595	Check if the given file is a special file .
5596	Acquire the given tag .
5597	Release a previously acquired lock .
5598	Adjust the chunk size .
5599	Queues a task to write a file - like object .
5600	Returns an IOWWriteTask for the given fileobj and offset .
5601	Return the correct download manager class .
5602	Main function .
5603	Write data to file .
5604	Request writes to the heap .
5605	Returns True if the given file object is seekable .
5606	Submit a file to a bucket .
5607	Submit a file to a bucket .
5608	Submit an object to a bucket .
5609	Delete an item from a bucket .
5610	Shutdown the application .
5611	Cancel all transfer tasks .
5612	Wait for all workers to finish .
5613	Read amount of bytes from fileobj .
5614	Wrap the given data into a file chunk .
5615	Return the correct upload manager class .
5616	Sets the exception of the transfer .
5617	Sets the result of the job .
5618	Set the exception of the future .
5619	Return the result of the task .
5620	Mark the future as cancelled .
5621	Submit a task to an executor .
5622	Add a callback to be executed when the future finishes .
5623	Add a failure cleanup function .
5624	Mark the task as done .
5625	Submit a task to the executor .
5626	Add a callback to be invoked when the request completes .
5627	Uploads a file to S3 .
5628	Download a file from a bucket .
5629	Iterate over all decorated function decorators .
5630	Parse a decorator step .
5631	Refact a step .
5632	Iterate through step function decorators .
5633	Parse a single step .
5634	Refact a step .
5635	Select python file .
5636	Retrieves a list of team objects .
5637	Create a new person .
5638	Update a group .
5639	Deletes a group .
5640	Get the current fact
5641	Sends a new webhook request
5642	Gets a list of items .
5643	Deletes a group .
5644	Validate a base URL .
5645	Check if a string is a URL .
5646	Open a local file .
5647	Check that an object is of the specified type .
5648	Build a dictionary from multiple dictionaries .
5649	Check that the response code matches expected_response_code .
5650	Convert json_data to dict .
5651	Convert a date string into a datetime object .
5652	Gets a list of teams .
5653	Create a new team .
5654	Update a room .
5655	Deletes a room .
5656	Gets a list of objects for the specified account .
5657	Date of the team created .
5658	Get an access token from environment variables .
5659	Create a new event .
5660	Update an existing webhook .
5661	Deletes the specified webhook .
5662	Clean up the next_url parameter .
5663	Set the wait_on_rate_limit setting .
5664	Update request headers .
5665	Absolute path from given URL .
5666	Make a request to the remote API .
5667	Perform a GET request .
5668	Get pages from a URL .
5669	Get items from API endpoint .
5670	Perform a PUT request .
5671	Perform a DELETE request .
5672	Create a new JWT .
5673	Gets a list of people in a room .
5674	Create a new chat message .
5675	Deletes the specified message .
5676	Create a user account .
5677	Gets a person by its ID .
5678	Update a person .
5679	Deletes a person .
5680	Returns the currently logged in user .
5681	Retrieve a list of objects .
5682	Fetches a list of objects .
5683	Create a new project .
5684	Update a team .
5685	Deletes a team by ID .
5686	Retrieve a list of objects .
5687	Convert the given data into a tuple .
5688	Get an access token .
5689	Return the last activity of the team .
5690	Serve webhooks
5691	Get the public URL for the ngrok client .
5692	Delete all webhooks with the given name .
5693	Create a new ngrok webhook .
5694	Main entry point .
5695	main entry point
5696	Generator that yields Telegram messages .
5697	Read messages from the serial port .
5698	Create a DSLR protocol .
5699	Create a DSM reader .
5700	Create a TCP DSM reader .
5701	Handle received data .
5702	Called when a connection is lost .
5703	Handle a Telegram message .
5704	Parse telegram data .
5705	Get the version from a file .
5706	Ensure that the Python version is valid .
5707	Return a list of python packages .
5708	Create a command class .
5709	Create a command for a function .
5710	Run a command .
5711	Return a command that checks if the targets exist .
5712	Wraps a list of commands to run
5713	Create a command handler for a package .
5714	Retrieve data files from existing data files .
5715	Get package data .
5716	Compile a regex pattern .
5717	Iterate over the given path .
5718	Translate a glob pattern into a regular expression .
5719	Join translated parts .
5720	Translate a glob pattern .
5721	Truncate the table .
5722	Write data to database .
5723	Write the indexes of the table .
5724	Write triggers to the database .
5725	Write SQL to database .
5726	Write the contents of a table to a file .
5727	Process a row .
5728	Write to file .
5729	Write constraints to file .
5730	Write the triggers to the file .
5731	Return the number of items in the query .
5732	Enqueue the given data into the queue .
5733	Start a new task .
5734	Build an extra predicate .
5735	Simple JSON serializer .
5736	Reconnect to the database .
5737	Execute a SELECT query .
5738	Get a database connection
5739	Run the workload .
5740	Connect to the aggregator .
5741	Look up global variable names by number .
5742	Return the number of connections .
5743	Handle a MySQL connection failure .
5744	Build a simple expression .
5745	Build an UPDATE statement .
5746	Connect to the database .
5747	Setup the database .
5748	Remove all tables from the database .
5749	Start a step .
5750	Stop a step .
5751	Load the start and stop values
5752	Disconnects from the API
5753	Perform a reconnect .
5754	Connect to the websocket .
5755	Called when a message is received .
5756	Stop timers .
5757	Send a ping to the API .
5758	Check if a pong is received .
5759	Send an authentication message .
5760	Clear the paused flag .
5761	Dispatch a system message .
5762	Called when a client is received .
5763	Error handler .
5764	Send data to client .
5765	Re - subscribe .
5766	Handle authentication events .
5767	Handle configuration changes .
5768	Update the timestamp of the given channel .
5769	Reset the connection .
5770	Return a list of available candles
5771	Configure Bitfinex account
5772	Subscribe to tick events .
5773	Unsubscribe from ticker .
5774	Subscribe to order book
5775	Unsubscribe from order book
5776	Subscribe to raw order book
5777	Unsubscribe from raw order book .
5778	Subscribe to trades
5779	Unsubscribe from trades .
5780	Subscribe to candles
5781	Unsubscribe from candles .
5782	Authenticate to the channel
5783	Cancel an order .
5784	Invoked when a command is received .
5785	Handle a device command .
5786	Called when a PahoMessage is received .
5787	Create a new device type
5788	Publish an event .
5789	Update a device
5790	Returns a list of clients .
5791	List all bundle bundles
5792	Create a new bundle
5793	Update a schema
5794	Closes connection to IBM Watson
5795	Called when the client is connected .
5796	Subscribe to events .
5797	Subscribe to a specific device status .
5798	Subscribe to device commands .
5799	Publish a command .
5800	Handle an unsupported message .
5801	Handle a device event .
5802	Called when a device status message is received .
5803	Callback for the application status
5804	Get last Event
5805	Get all events of a device
5806	Make a call to the API .
5807	Initiate a new mgmt request
5808	Get request status
5809	Close index .
5810	Returns the number of elements in the index .
5811	Returns the nearest neighbors for the given coordinates .
5812	Return the bounds of the index .
5813	Remove data from index .
5814	Create an index from a stream .
5815	Loads data from the page .
5816	Remove an object from the tree .
5817	Error checking for Error calls
5818	Load the application .
5819	Initialize Flask - common extension .
5820	Runs the gunicorn server .
5821	Convert the value to a native version .
5822	Crop the image on the specified center point .
5823	Crop an image
5824	Process an image .
5825	Invert an image .
5826	Convert the form to a python object .
5827	Process the placeholder image .
5828	Update PPOI field .
5829	Update the PPOI field .
5830	Save the data for the field .
5831	Add PPOI_FIELD to the formfield .
5832	Convert to string .
5833	Autodiscover plugin modules .
5834	Unregister a SizedImage subclass .
5835	Unregister a filter .
5836	Return the URL for the field .
5837	Build filters and sizers .
5838	Return the root folder of this field
5839	Return the root folder of the file .
5840	Retrieves the path of the filtered root folder
5841	Delete files matching the given regex pattern .
5842	Preprocess the image .
5843	Preprocess GIF image .
5844	Preprocess JPEG .
5845	Retrieve an image .
5846	Saves an image to disk .
5847	Return the PPOI as a string .
5848	Creates and saves image .
5849	Render the template .
5850	Add template to context
5851	Build the attributes dictionary .
5852	Return the path to the image .
5853	Returns the path to the path of the video .
5854	Validate that a list of sizes are valid .
5855	Get the url for an image key .
5856	Return the rendition key set for the given rendition key .
5857	Format an instruction .
5858	Format a function body .
5859	Generates instructions from a bytecode .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Connect to the IRC server .
5863	Close the connection .
5864	Read the result from the device .
5865	Handle FastAGI request .
5866	Parse an agi result
5867	Check the status of an agi code
5868	Reset the list of instances
5869	Return the list of instances .
5870	Get distro data .
5871	Get the primary keys for a model .
5872	Deserialize value .
5873	Retrieve an existing record from the query and return it .
5874	Get declared fields .
5875	Deserialize data from data .
5876	Split the data into two kwargs .
5877	Delete orphan snapshots .
5878	Create a snapshot .
5879	List all snapshots .
5880	Restore a snapshot .
5881	Delete a snapshot
5882	Rename an existing snapshot
5883	Replace an existing snapshot
5884	Updates indexes after each epoch for each epoch for shuffling
5885	Clean textacy .
5886	Apply a function to data .
5887	Creates a processor from text .
5888	Process text .
5889	Process text with tokenization .
5890	Generate the document length statistics .
5891	Return a pandas DataFrame with the word frequency .
5892	Map param_type to string type .
5893	Parse a list of interfaces into a dictionary .
5894	The inverse of the transform .
5895	Update items with a rollback .
5896	Make a deep copy of the graph .
5897	Return a copy of this node .
5898	Return True if two dictionaries are equal .
5899	Return an inverted dictionary of values .
5900	Clears the object .
5901	Move to the next node .
5902	Write text to a temporary file .
5903	Search for contacts .
5904	Merge arguments into config .
5905	Loads addresses from a list of names .
5906	Prepare search queries .
5907	Create a new contact
5908	Displays a subcommand for a vCard .
5909	Return a list of all phone numbers that match the search criteria .
5910	Print the list of contacts
5911	Subcommand to modify vCard objects .
5912	Subcommand for removing a vCard
5913	Run the source command .
5914	Subcommand for the merge command .
5915	Subcommand for copying or move .
5916	Get action by its alias .
5917	Convert boolean parameter to boolean value
5918	Return a new contact object .
5919	Create an instance from a file .
5920	Create a new contact from the user input .
5921	Create a new contact from an existing contact .
5922	Return the names part of the vcard .
5923	Add a category to the card .
5924	Parse a field value .
5925	Convert a list to a string .
5926	Convert a string to a datetime object .
5927	Return the sum of two UIDs .
5928	Search for all contacts that match a query .
5929	Search for names that match a regular expression .
5930	Search for all contacts with a given query .
5931	Search the address book .
5932	Returns a dict with short ids as keys .
5933	Return the short UID for a given user .
5934	Find all VCard files that match the search .
5935	Load the vcard files from the vdir .
5936	Return the abook with the given name .
5937	Return available archs .
5938	Return available archs .
5939	Get inspect . argspec for a function .
5940	Dispatch a command .
5941	Prompt user for input .
5942	Encode the value to the output file .
5943	Guess keyword arguments .
5944	Add commands to a parser .
5945	Decorator to add a function to a function .
5946	Decorator to add an option to a function .
5947	Prompt user for confirmation .
5948	Returns a new Query object with the same parameters .
5949	Like regular expression .
5950	Return the result of the query .
5951	Get the first item from the collection .
5952	Delete all results from the query .
5953	Handle deletion of entities .
5954	Add a prefix to the index .
5955	Estimate the amount of work for a given index .
5956	Perform a search using the given filters
5957	Return the number of records matching the filters
5958	Return a connection to an object .
5959	Convert val to lowercase
5960	Retrieves the indices for the given model .
5961	Remove all old indexes from model .
5962	Add an object to the session .
5963	Get an object by pk .
5964	Read data from redis .
5965	Save the object to the database .
5966	Delete the object
5967	Retrieve one or more objects from the database .
5968	Register a function as a dispatcher .
5969	Open a semaphore .
5970	returns cpu count
5971	Send a result back to the result_queue .
5972	Internal process worker .
5973	Add a call item to the queue .
5974	Ensure the process is running .
5975	Wrap a non - picklable object .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	wait for jobs to complete
5980	Return the execution data for the given process .
5981	Prepare process information
5982	Close all open files .
5983	Terminate subprocess with psutil .
5984	Terminate child processes .
5985	Get exit codes from processes .
5986	Format the list of exit codes .
5987	Main entry point .
5988	Ensure the process is running .
5989	A simple event processor that prints out events .
5990	Displays the main frame .
5991	Runs an interactive console .
5992	Split a string into arguments .
5993	Get the frame and line number of frames .
5994	Run a list of hooks .
5995	forget about the stack
5996	Return an integer without errors .
5997	Return an integer .
5998	Process commands .
5999	Add a file to the command queue
6000	Return the next token from start position .
6001	Add an error message .
6002	Read a single command line .
6003	Close all streams .
6004	Disassemble a code object .
6005	Disassemble byte string into byte string .
6006	Return a count of the number of frames
6007	Get the name of the call function
6008	Print count entries of the stack trace
6009	Look up a subcommand .
6010	Handle short help messages .
6011	Add a subcommand .
6012	Run a subcommand .
6013	Start debugging .
6014	Show a list of commands .
6015	Show line number .
6016	Find a debugger frame .
6017	Map thread names to thread ids .
6018	Return an integer .
6019	Return True if arg is on or off .
6020	Set boolean value
6021	Set an integer .
6022	Show onoff .
6023	Show an integer .
6024	Show the value of an object .
6025	Check if the given line is a definition statement .
6026	Return True if line is a class definition .
6027	Quit threading .
6028	Determine if the background should be used
6029	Is dark RGB?
6030	Return the signature of a frame .
6031	Return a list of all display objects .
6032	Return the string representation of the frame .
6033	Format the value as a string .
6034	Read a message from the socket .
6035	Show debug information .
6036	Handle undefined subcommand .
6037	Runs the debugger .
6038	Pretty print an array .
6039	Look up a signal name by number .
6040	Look up the name of a signal .
6041	Convert a name number to a canonical name .
6042	Set a signal replacement .
6043	Check and adjust the sighandlers
6044	Print information about a signal .
6045	Handle an action .
6046	Setter for print methods
6047	Called when the program exits .
6048	Return the module name from filename .
6049	Search for a file in the given directories .
6050	Determine if a file exists .
6051	All python files caller s dir without the path and trailing .
6052	Write a message to the output .
6053	Run the program .
6054	Display a list of commands .
6055	Add an exception to the debugger
6056	Close the connection .
6057	Write a message to the server .
6058	Complete an identifier .
6059	Send a command to the process .
6060	Add an ignore filter .
6061	Determine the absolute path of a file .
6062	Return the filename of the debugger .
6063	Check if the tracer is started .
6064	Checks if the current frame is a stop statement
6065	Sets to stop on the next event that happens in frame frame frame .
6066	Prints a stack trace for the given f .
6067	Show the default file .
6068	Check the function name of the frame .
6069	remove breakpoint breakpoint
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete all breakpoints by filename and line number .
6074	Open input .
6075	Read a line from the input .
6076	Ask user for confirmation
6077	r \ s +
6078	r \ d +
6079	Submit query as a future .
6080	Restore the original login from the request .
6081	Load a module from path .
6082	Iterate over documents .
6083	Main function .
6084	Translate a CSV file to a stream .
6085	Open a file with the given filename .
6086	Normalize the data in the given stream .
6087	Convert a string to a float
6088	Detect file encoding .
6089	Stream lines from a file .
6090	Translate a file to UTF8 .
6091	Open a csv file using py2 .
6092	Generator that yields dictionaries from a CSV file .
6093	Main entry point .
6094	Connect to the given url and store the token .
6095	Save token to file .
6096	Perform an HTTP request .
6097	Perform a DELETE request .
6098	Wait for the project to complete .
6099	Return the root url for a given URL .
6100	Save current user s token .
6101	Make a request and return the result .
6102	POST data to the server .
6103	Return a new URL with the specified path .
6104	Get the default account .
6105	Get the documentation for this client .
6106	Wait for a job to complete .
6107	Perform a GET request .
6108	Print result as CSV .
6109	Read parameters from a file .
6110	Simplify a document .
6111	Create a project with multiple documents .
6112	Upload a project s documentation .
6113	Main function .
6114	Upload a stream of documents to the server .
6115	Upload a file to Google Cloud Storage .
6116	Main function .
6117	Creates a new Token using the given credentials .
6118	Login to the user .
6119	Login to the planet .
6120	Get data for a given resource id .
6121	Fetches historical data per period .
6122	Prepares the view
6123	Initialize handler
6124	Render the view .
6125	Handle changes .
6126	Update the menus for this page .
6127	Create a list of handlers for this site .
6128	Handle changes from JavaScript
6129	Called when the DOM is modified
6130	Create the widget .
6131	Initialize the widget
6132	Destroy the widget .
6133	Called when a child element is added .
6134	Remove a child element .
6135	Generate all child widgets .
6136	Set an attribute .
6137	Update a proxy .
6138	Notify about a change .
6139	Perform an XPath query
6140	Prepares the proxy .
6141	Initializes the widget
6142	Set the source code for this component .
6143	Change mode changes .
6144	Called when a block changes .
6145	Update the children of the block .
6146	Read the contents of a file .
6147	Print error message and exit .
6148	Handle error parsing .
6149	Get a product by its name .
6150	Create a new session
6151	Reset the store .
6152	Returns a list of Stores that match the search term .
6153	Initialize delivery system
6154	Retrieves a menu for the specified store .
6155	Add an item to the basket .
6156	Add a new item to the basket
6157	Add a side to the basket .
6158	Remove an item from the basket
6159	Sets the payment method .
6160	Process a payment .
6161	Generic GET wrapper .
6162	Generic POST wrapper .
6163	Call an API method .
6164	Append an item to the menu .
6165	Add an exit item if it s not already present .
6166	Draw the menu .
6167	Process the user input .
6168	Selects and sets the selected_item
6169	Parses a menu into a CursesMenu
6170	Select the top values of a DataFrame .
6171	Aggregate the top values of a DataFrame .
6172	Convert string to datetime .
6173	Convert datetime to strftime .
6174	Change date format of a column .
6175	Cast column to type .
6176	Calculate the rank of each column in the dataframe .
6177	Create a dataframe from a dataframe
6178	Perform a math operation between two columns .
6179	Round values in a column .
6180	Convert values in a column to absolute values .
6181	Pivot table .
6182	Pivot dataframe by a group of columns .
6183	Group by multiple columns .
6184	Calculate the sum of the columns of a column .
6185	Add a row to the dataframe .
6186	Catch exception raised by the decorated function .
6187	Log a message to the given logger .
6188	Log the time of the function .
6189	Decorator to log output shapes .
6190	Rename columns and columns .
6191	Compute the sum of the values in a DataFrame .
6192	Combine columns using agg_func .
6193	Get a parameter from a function call .
6194	Remove cache entries from a cachedir .
6195	Roll up dataframe according to the aggregation function .
6196	Calculate the maximum value of a column .
6197	Calculate the minimum value of a column .
6198	Fill missing values in a column
6199	Add an hour offset to a date object
6200	Add a number of months to a date object .
6201	Add a number of years to a date object
6202	Parse a date string .
6203	Filter DataFrame by date range .
6204	Convert a column to a percentage .
6205	Ada family core .
6206	Perform learning updates .
6207	Returns training parameters .
6208	Run optimization updates .
6209	Compute the first glimpse of the first layer .
6210	Prepare encoder .
6211	Computes the cost of the encoder .
6212	Apply a function to each dataset .
6213	Vectorize the target .
6214	Logs the training data .
6215	Train the network .
6216	Sample from input .
6217	Compute alignments .
6218	Compute context vector .
6219	Concatenate a list of variables .
6220	Pad the Dataset with the given length .
6221	RMSprop core .
6222	Print the elapsed time .
6223	Run the computation .
6224	Run the monitor .
6225	Build the loop variables .
6226	Scan the loop .
6227	Calculate the momentum .
6228	Convenience function .
6229	skip the epoch
6230	Load parameters from disk .
6231	Train the model .
6232	Run the training step .
6233	Run a valid step .
6234	Write a report to stdout .
6235	Get the current dataset .
6236	Apply a function to this Variable .
6237	Logs used parameters .
6238	Compute the variance of this array .
6239	Create Variables from dataset .
6240	Add the shared variable to theano .
6241	Stack multiple encoders .
6242	Stack multiple decoders .
6243	Encodes the input .
6244	Return the decoded representation of x .
6245	Create a 2D Gaussian
6246	Register a single layer .
6247	Calculate the mean of the layer outputs .
6248	Returns a list of all parameters .
6249	Setup variables .
6250	Execute the computation .
6251	Save model parameters to path .
6252	Load parameters from file .
6253	Print information about the network .
6254	Registers given parameters .
6255	Register new updates .
6256	Register new updates .
6257	Register new monitors .
6258	Compute the l2 norm of multiple tensors .
6259	Dump elt to file_obj .
6260	Load elements from a file - like object .
6261	Load model parameters from disk .
6262	Create request elements .
6263	Decode user state .
6264	Parser for X - Credentials .
6265	Remove access token from request elements .
6266	Login to provider .
6267	Normalize a dictionary .
6268	Convert a list of items to a single dictionary .
6269	Parse the body of a query .
6270	Resolve a provider class
6271	Create cookie .
6272	Save the session to disk .
6273	Get cookie data .
6274	Return the data as a dictionary .
6275	Calculate the signature .
6276	Serialize the value into a string .
6277	Is the token expired?
6278	Returns True if the timer should be expired .
6279	Serialize credentials to a string .
6280	Check if content is a binary string .
6281	The content of the response .
6282	Create request elements .
6283	Access the user s email address .
6284	Decorator for login
6285	Login to GAE .
6286	Return the session key .
6287	Set a session value .
6288	Generate a random CSRF token .
6289	Log a message at the given level .
6290	Check if status is in category
6291	Split a URL into parts .
6292	Decorator to enable cross - origin .
6293	Set CORS headers .
6294	Returns a dictionary of keyword arguments for the app instance .
6295	Return a string representation of an object .
6296	Ensure that inst is an iterable .
6297	Return True if two floats are equal .
6298	Mark a function as deprecated .
6299	Deserialize a string into an AudioSegment object .
6300	Create an AudioSegment from a file .
6301	Create an AudioSegment from a numpy array .
6302	Execute SOX command .
6303	Filter the audio file with silence .
6304	Compute the FFT .
6305	Generate frames from the stream .
6306	Normalize the SPL of this audio .
6307	Return a new AudioSegment with this one .
6308	Resample the audio .
6309	Return a string representation of the sensor .
6310	Calculate a spectrogram .
6311	Choose a front id from candidates .
6312	Given an onset sample index and an onset sample index return the first sample idx .
6313	Get the offset front of a given onset front .
6314	Given an onset front and a list of onset ids return the corresponding offset_front_id .
6315	Returns a list of consecutive consecutive consecutive fronts .
6316	Update segmentation mask .
6317	Get front index from front index
6318	Iterate over front ids
6319	Return a list of offsets corresponding to onset and sid .
6320	Remove overlapping segments .
6321	Remove fronts that are too large .
6322	Break stale fronts .
6323	Merge segments that are adjacent .
6324	Splits masked masks into masks .
6325	Downsample one or more transforms .
6326	Process masks and put them into a queue .
6327	Bandpass filter .
6328	Low - pass filter .
6329	Convert a list of responses to tf input .
6330	Expand and normalize a dataset .
6331	Return True if two iterables are equal .
6332	Group audit ranks by similarity .
6333	Loads the audit matrix .
6334	Convert a list of rows to tf input .
6335	Update the location of the pip . ini files .
6336	Autodetect requirements files .
6337	Resolve streams .
6338	Resolve streams by property .
6339	Resolve streams by predicate .
6340	Raise appropriate error codes .
6341	Push samples to the stream .
6342	Pushes a chunk of data into the stream .
6343	Get information about the stream .
6344	Open a stream .
6345	Return the time correction for the target .
6346	Return an XMLElement with the given name .
6347	Return the next sibling element .
6348	Return the previous sibling element .
6349	Set the label .
6350	Set value .
6351	Append a child to this element .
6352	Add a new child element to this element .
6353	Return a new XMLElement .
6354	Return a new XMLElement .
6355	Remove a child from this node .
6356	Return a list of StreamInfo objects .
6357	Show a list of tokens .
6358	Autocomplete query .
6359	Compute the n - grams of a token .
6360	Iterate over a pipeline .
6361	Applies a function to each item in an iterable .
6362	Return a list of fuzzy words .
6363	Do fuzzy search .
6364	do fuzzyindex search
6365	Extrapolate related relations .
6366	List available commands .
6367	print the database info
6368	Do a DBKEY command
6369	Compute geohashes
6370	List the details of a document .
6371	Index a document
6372	do a word search
6373	Compute the distance between two strings
6374	Send a request and return the response .
6375	Perform a list of requests .
6376	Extract bits from an array .
6377	Convert sigOrVal to bits .
6378	Convert a slice to a Slice object .
6379	Find all files matching a pattern .
6380	Return True if the elements in iterable are in iterable .
6381	Generate a body for each item in items .
6382	Logical shift left
6383	Return the ceiling of x .
6384	Check if the integer is a power 2 .
6385	c - like case of switch statement
6386	Defines the default statement .
6387	Recursive function to register interface types .
6388	Called when the simulation starts .
6389	Log a change .
6390	Renders a HWProcess .
6391	Return a list of agents for the interface .
6392	Return the clk associated with this unit .
6393	Yields the elements in iterable by fn .
6394	Group items by fn .
6395	Flatten an iterable .
6396	Merge nested ifContainer .
6397	Remove all signals from the network .
6398	Checks if the instruction is too simple .
6399	Try to merge two HWProcesss .
6400	Reduce a list of processes by their rank .
6401	Called when a write request is received
6402	Serialize unit or class to RTL .
6403	Returns the name of the first non - generic name .
6404	Return a list of statements that are connected to the given destinationSignal .
6405	Create a signal .
6406	Synthesize the signal .
6407	Returns the maximum id of a statement .
6408	Returns the maximum id of a process .
6409	Write data to the interface .
6410	Change the master direction
6411	Load interface declarations .
6412	Create a list of signals for this interface .
6413	Returns the physical name of the resource .
6414	Return the length of the interface .
6415	Return the sensitivity of an operation .
6416	Evaluate an operator .
6417	Convert a bit or value to a type .
6418	Reinterpret a bit string to a hStruct .
6419	Return the number of words between start and end .
6420	Group items by word index .
6421	Pretty print interface .
6422	Generate a sequence of frames from a TransTempl template .
6423	Iterate over the parts of this word .
6424	Packs the given data into a packed field .
6425	Clean the meta information of the signals .
6426	Given a list of statements find the enclosures for that statement .
6427	Determine the sensitivity of the given signals .
6428	Return the RTL context for this statement .
6429	Handle reduction .
6430	Called when another statement is merged .
6431	Determine if two statements are merged .
6432	Merge multiple statements into a single list .
6433	Merge two lists .
6434	Reduce list of statements .
6435	Called when a parent event is dependent .
6436	Set the parent statement of this statement .
6437	Add the list of statements to the target list .
6438	Destroys the connection from the RTL context .
6439	Create a new signature .
6440	Return a signature .
6441	Clean up all interfaces .
6442	Recursively iterate over all fields of a type .
6443	Unpack a struct into a struct .
6444	Return a new operator .
6445	Add sensitivity to sensors .
6446	Evaluates whether or not conditions are satisfied .
6447	Connect a port to another subSimUnit .
6448	Create an updater for the given value .
6449	Create an update function for an array .
6450	Return a new set of bits from val .
6451	Register the given HWProcess .
6452	Evaluates parameter .
6453	Set the value of this parameter .
6454	Build HStruct from interface map .
6455	Clean up memory allocations .
6456	Get the index cascade .
6457	Convert a Python value into a Series .
6458	Cast a signal or type to a specified type .
6459	Reinterpret the type of sigOrVal .
6460	Walk an interface s parameters recursively .
6461	Connect srcPacked to dstInterfaces .
6462	Pack an interface into its signature .
6463	Convert a rom into a HWProcess .
6464	Convert this interface to a Rtl .
6465	Internal method to register an interface .
6466	Try to reduce and return the result .
6467	Try to reduce the value of a bitmask .
6468	Return a base name scope .
6469	Decide whether the given object should be serialized .
6470	Create a serialization object for the given type .
6471	Convert an ifContainer to a string .
6472	Get a condition from a condition .
6473	Return a SimBitsT .
6474	Return the constant name for the given val .
6475	Remove all drivers of the receiver .
6476	Load data from an array .
6477	Loads the contents of a struct into this object .
6478	Loads the bit address from an htype .
6479	Return the width of the item .
6480	Iterate over all of the children of this object .
6481	Fix the sign of a signed integer .
6482	Merge self with other .
6483	returns a string with indentNum
6484	Raise an Exception if objName is not already present
6485	Register a parameter in this scope .
6486	Update parameters from otherObj to otherObj .
6487	Register a unit .
6488	Internal method to register an interface .
6489	Internal method to register an array .
6490	Returns the driver if one exists .
6491	Perform static evaluation .
6492	Creates an operator and returns it .
6493	Return a new context with indentation .
6494	Try to connect to an interface .
6495	Propagate clk to clk .
6496	Propagate properties to clk and rst_n
6497	Propagate properties to clk and rst .
6498	Propagate rst_n .
6499	Propagate rst to rst .
6500	Iterate over the bits in a signal .
6501	Serialize the object to be serialized .
6502	Serialize a single parent unit .
6503	Internal helper for serializing parameters from parentUnit .
6504	Return the full name of the object
6505	Make an association .
6506	Prepares a unit for simulation .
6507	Convert a unit to a SimModel
6508	Reconstruct unit signals to model class
6509	Create a VCD file for the given simulation .
6510	Initialize the write callback
6511	Connect this port to another .
6512	Register an external port .
6513	Connect this driver to another .
6514	Return the internature of this node .
6515	Check if an event is dependent on the given process .
6516	Add a process to the queue .
6517	Add a proc to the run list .
6518	Schedule the comboboxd event to be queued .
6519	Schedule the values to be applied .
6520	Resolves a conflict resolution strategy .
6521	Runs the combineProcesses .
6522	Runs the sequenceProcesses to run sequentially .
6523	Schedules the values to be applied .
6524	Return the value of the sig .
6525	Write a value to the Enum .
6526	Add a process to the scheduler .
6527	Simulate a unit .
6528	Create an operator from a function fn .
6529	Convert a list of statements into a list of IfContainer objects .
6530	Start a HWProcess .
6531	Calculate the Hamming distance between two strings .
6532	Calculate the average hash of an image .
6533	Return the distance between two images .
6534	Setup the Vizio platform .
6535	Update the state of the device .
6536	Mute the volume .
6537	Move volume up .
6538	Increase volume level .
6539	Set the volume level .
6540	Reset the board .
6541	Return the piece at the given square .
6542	Remove the piece at the given position .
6543	Sets the piece at the given square .
6544	Determine if a move isicide or not .
6545	Returns True if the game was attacked .
6546	Is the game over?
6547	Check if the player is a checkmate .
6548	Is a 4fold repetition?
6549	Pop a move from the stack .
6550	Return a list of sfen strings .
6551	Push a move to the stack .
6552	Returns the zobrist hash of the board .
6553	Return the piece s symbol .
6554	Create a pin from a symbol .
6555	Return the USI string .
6556	Return a Piece instance from a USI string .
6557	Parse the contents of the commit string .
6558	Parse a commit .
6559	Load config from argv .
6560	Runs management from command line .
6561	Add an argument to an argparse . ArgumentParser .
6562	Load the configuration from a file .
6563	Generate a YAML document .
6564	Generate markdown .
6565	Cast value to type .
6566	Return a list of dates between first_date and last_date .
6567	Parse a date from a string .
6568	Load currency data from file .
6569	Set missing rates to None
6570	Compute missing rates for given currency .
6571	Return the exchange rate for the given currency and date .
6572	Convert amount to another currency
6573	Group an iterable into a list of n elements .
6574	Generate an animation .
6575	Read a record from the file .
6576	Write a record to the MAR file .
6577	Return a memory view of the file .
6578	Return the comments of the DF file .
6579	Add an array to the file .
6580	Close the DAF .
6581	Computes the position of the current position .
6582	Close the DAF file .
6583	Load the PCK data .
6584	Compute the segmentation .
6585	Visitor for calls .
6586	Visitor for binary operations .
6587	Visitor for dicts .
6588	Visitor for joined strings .
6589	Visitor for keywords .
6590	Handle exception handler .
6591	Detect logging level .
6592	Get exception handler name .
6593	Get id attribute from value
6594	Check if node is a bare exception .
6595	Check for exc_info keywords .
6596	Delete the file if it exists .
6597	Add a widget to the database
6598	Return the rendered content .
6599	Render response to response .
6600	Quote a string .
6601	Configure options from a module .
6602	Converts a string to an underscore .
6603	Create index for given model .
6604	Parse the contents of a file .
6605	Load the contents of a file .
6606	Parses a line into a price model
6607	Translate a symbol .
6608	Load the symbol maps .
6609	Get session
6610	Add a price
6611	Import prices from a CSV file .
6612	Show latest price
6613	List prices .
6614	Download prices .
6615	Prune price entries .
6616	Get the default price database
6617	Add a new mapping .
6618	List available price maps .
6619	Get a symbol map by its identifier .
6620	Read lines from a file .
6621	Convert a Price to a PriceModel .
6622	Convert a PriceModel to a Price object .
6623	Read the configuration file .
6624	Returns the path to the config template .
6625	Create the user config file .
6626	Get the config path
6627	Return the contents of the config file .
6628	Set an option in the section
6629	Return the value of an option .
6630	Save the config file .
6631	Parses a symbol .
6632	Add a price to the book .
6633	Add a price entity to the database .
6634	Download price for symbol and agent
6635	Saved session
6636	Returns a list of prices for the given date and currency .
6637	Returns the latest prices for a given date and symbol .
6638	Removes all prices from the registry .
6639	Prune prices for a security symbol .
6640	Download price from market
6641	Return list of securities .
6642	Return a partial state .
6643	Update child calls .
6644	Recursively descend through the tree .
6645	Decorator for multi - child calls
6646	Fail if the student parts have the same length .
6647	Raise an AssertionError if two objects are equal .
6648	Test if student code contains text .
6649	Test if a package has an import .
6650	Test if student output contains text .
6651	Check if printout is printed .
6652	Assert that the code has no error .
6653	Called when the student has chosen option .
6654	Check a function .
6655	Get the representation of a process .
6656	Override a solution to another node .
6657	Check if an instance is an instance of the solution process .
6658	Return a list of items that are defined .
6659	Create a child state
6660	Return an extended parser .
6661	Test for context loops .
6662	Check if a state has a context .
6663	Check that the given part has the given part .
6664	Check if a part is valid .
6665	Check the arguments part .
6666	Builds a function call .
6667	Calculate the true anomaly .
6668	Initialize the Flask application .
6669	Initialize LDAP configuration .
6670	Add a new LDAP server .
6671	Remove a connection from the ldap3 manager .
6672	Clean up LDAP3 connections .
6673	Authenticate using LDAP .
6674	Bind to LDAP .
6675	Authenticate using search_bind method
6676	Search for LDAP groups .
6677	Retrieve LDAP user information .
6678	Returns a User object for the specified username .
6679	Get an object from LDAP .
6680	Get LDAP3 connection
6681	Create a connection to the database .
6682	Create an LDAP connection .
6683	Destroy a connection .
6684	Search for containers .
6685	get list of labels
6686	search for collections
6687	Search for all artifacts in a collection .
6688	Speak the database .
6689	Announce a command .
6690	update sregistry
6691	update headers
6692	raise error if client_name is not set
6693	download url to tempfile
6694	returns a file to stream
6695	update authorization token
6696	Get or create a folder .
6697	Read response from response .
6698	get bucket
6699	Update the client s secrets .
6700	Initialize the client .
6701	Load secrets from settings .
6702	Return the logs of the server .
6703	list logs
6704	create folder at endpoint
6705	Init transfer client .
6706	list all containers
6707	Show status of active client .
6708	add a variable to the backend
6709	remove a variable
6710	Activate a backend
6711	Delete a backend
6712	Update the base name of the image
6713	Create a basic auth header .
6714	Generate a signature .
6715	Generate a signature for SREGISTRY - SHA256 .
6716	Make a DELETE request .
6717	Send HEAD request .
6718	Perform a paginated GET request .
6719	Disable SSL verification
6720	Remove an image
6721	returns a dict with version information
6722	Get requirements from a lookup dictionary
6723	get singularity version
6724	check if the specified software is installed
6725	Get the absolute path of the installed package .
6726	Get the image thumbnail
6727	Run a command .
6728	Get metadata for an image .
6729	update user accounts
6730	Print output to stdout .
6731	Kill commands
6732	List logs for a container
6733	Return a list of the names of all collections
6734	Update swiftclient s credentials
6735	update GOOGLE_APPLICATION_CREDENTIALS
6736	get client
6737	Run an IPython notebook
6738	Retrieves manifests for the given schema version
6739	Retrieve the manifest for a given repo_name and version .
6740	Return the location of the download cache .
6741	extract the Docker container environment
6742	update base url
6743	Update private - token headers
6744	Get metadata for the Dockerfile .
6745	Get client settings .
6746	get and update a setting
6747	Update a config setting .
6748	Generate authorization header
6749	list builders
6750	Load templates by name
6751	get an IP address by name
6752	run build
6753	list containers in bucket
6754	list all containers
6755	List services .
6756	Main entry point .
6757	Initialize the database
6758	get template
6759	Search endpoint
6760	list endpoints
6761	list an endpoint
6762	share an image
6763	Reads the client secrets .
6764	Initialize service instances .
6765	Delete an object .
6766	delete a file
6767	destroy instance
6768	Get subparsers from argparse .
6769	Generate a string .
6770	Get a temporary directory .
6771	extract a tar archive
6772	extract tar archive
6773	Get the hash of a file .
6774	Read the content of a file .
6775	Reads a JSON file .
6776	clean up files
6777	push image to registry
6778	Get or create a collection .
6779	get a collection by name
6780	Get container by name and version
6781	show containers
6782	Inspect container
6783	rename a container
6784	move an image
6785	remove an image
6786	add image to registry
6787	push image to registry
6788	Parse a line header from a recipe .
6789	Finds a recipe in the given file .
6790	generate a tarball for a list of packages
6791	run a build
6792	Update the metadata for a blob .
6793	Format a container name .
6794	Determine if the user should use color .
6795	Determine if an error occurs .
6796	Write a message to a stream .
6797	Print a table
6798	push an image
6799	get a template
6800	return image manifest
6801	get template
6802	read client secrets from settings
6803	Build a repr string .
6804	Raise errors .
6805	Create a new proxy .
6806	Get a gravatar URL .
6807	Get the gravatar url .
6808	Check if an email has a gravatar .
6809	Get the gravatar profile URL .
6810	Generate chimera blocks .
6811	Computes the chimera block quotient of chimera .
6812	Enumerate utterance molecules .
6813	Enumerate molecule .
6814	Normalize a molecule .
6815	Apply a transformation to a molecule .
6816	Canonicalize a molecule .
6817	Validate a molecule
6818	Remove metal charges from a molecule .
6819	Convert a list of molecules into a molecule .
6820	Enumerate Tautomers in a molecule .
6821	Canonicalize the Tautomer .
6822	Standardize molecule .
6823	return the parent of the tautomer
6824	Return the largest fragment of mol .
6825	Remove stereo atoms from molecule .
6826	Set isotope to 0 .
6827	Return the uncharged unit of mol .
6828	return the super parent of mol
6829	Main function .
6830	Removes all fragments from the molecule
6831	Choose the largest fragment
6832	Integrate the value of an IVP .
6833	Gets stats for the current user
6834	Get members of the org .
6835	Get the teams of the organization .
6836	Get all repos
6837	Get the total number of contributors for a repository .
6838	Return the number of open and closed requests .
6839	Get all the issues for a given repo
6840	Return the readme for a given repo .
6841	Get the license for a repository
6842	Get the commits for a given repo
6843	Writes a json file to disk
6844	Write the total number of submissions to a file .
6845	Write list of languages to file .
6846	Check if a directory exists .
6847	Remove a date from the database .
6848	Gets a list of GitHub organizations .
6849	Create an enterprise session .
6850	Check if the rate limit is exceeded .
6851	Connect to GitHub .
6852	Query for repositories .
6853	Get an organization .
6854	Write to file .
6855	Create a Project object from a Gitlab Repository object .
6856	Create a project from a DOE code record .
6857	Return the License object for a given license .
6858	Get traffic .
6859	Get all releases for a given repository .
6860	Retrieve the list of referrers for a given URL .
6861	Retrieves data from a given url and returns it as a tuple .
6862	Write json data to disk
6863	Writes data to file .
6864	Checks if the given file exists in the given file .
6865	Write data to file .
6866	Writes the referrers to a file .
6867	Return a generator of DOECODE records .
6868	Fetch a DEE code from a URL .
6869	Process a file or URL .
6870	Login to GitHub .
6871	Get the members of the organization .
6872	Write logins to file .
6873	Connect to the given URL and return a session object .
6874	Connect to Gitlab .
6875	Query for projects .
6876	Clone a git repository into its sloc code .
6877	Compute the labor hours for a given location .
6878	Prune all strings that have no strings .
6879	Read a GQL query file .
6880	Query GitHub from a file .
6881	Submit a GraphQL query .
6882	Wait for a given UTC timestamp to be reset .
6883	Print out a countdown .
6884	Import data from json file .
6885	Save data to file .
6886	Creates a TFS connection .
6887	Connect to TFS Enterprise .
6888	Create a TFS Enterprise client .
6889	Create a TFS Git client .
6890	Creates a TFS Git Git client .
6891	Get Git Repos for a project .
6892	Get a list of projects for a project .
6893	Calculate year commits .
6894	Calculate the total number of commits for each week .
6895	Write the last year commits to a csv file .
6896	Configure metrics .
6897	Get metrics interface .
6898	Record timing information .
6899	Add a timing information .
6900	Decorator for timing a function .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram event .
6904	Calculate and update stats .
6905	Create a case for an enum field .
6906	Convert the database value to an enum value .
6907	Convert value to native type .
6908	Return the value for the given value .
6909	Return a set of values for the given path .
6910	Projects a list of USLS into a dictionary of dictionaries .
6911	Return the mean of the sum .
6912	Increment the current counter .
6913	Return the average rate of the current time .
6914	Mark the value as seen .
6915	Serialize metric to InfluxDB .
6916	Serialize a metric .
6917	Format metric string .
6918	Add a metric to the batch .
6919	Get an existing configuration value .
6920	Ensure data is UTF8 .
6921	Get or set a default value for a given section .
6922	Get a map of ledger codes to GUIDs .
6923	Get available divisions .
6924	Return a mapping of exact numbers to foreign invoice numbers .
6925	Solve the Sudoku .
6926	Decorator to inject a view into a view .
6927	Register a form view .
6928	Add a method view to an injector .
6929	Register an API view .
6930	Register a generic API view .
6931	Register a model view set .
6932	Create a stream from a file descriptor .
6933	Read from the file descriptor .
6934	Close the connection .
6935	Called when a connection is lost .
6936	Start watching a path .
6937	Unregister a watch .
6938	Set up a watch .
6939	Setup the socket .
6940	Get an event from the server .
6941	Triggers a touch event .
6942	Decorator to update completion intervals
6943	Called when the timer has failed .
6944	Close all connections .
6945	Return True if the connection is starred .
6946	Connect to nsqd .
6947	Send a lookupd request to the Lookupd API .
6948	Set the maximum number of connections .
6949	Logs up on failure .
6950	Register a callback .
6951	Unregister a callback .
6952	Triggers a listener .
6953	Publish a message to a topic .
6954	Set feature transform
6955	Predict the model .
6956	Calculate theta .
6957	Parse the log file .
6958	Clean up temporary fastq files .
6959	Merge the default adapter file
6960	Main trimmomatic calling
6961	Read depth data from depth file .
6962	Main function for Plasmid .
6963	Set template path .
6964	Set the channel names
6965	Get user channel info .
6966	Render a Jinja2 template .
6967	Render the template .
6968	Set the channel names .
6969	Update main channel .
6970	Set a secondary channel .
6971	Update component attributes .
6972	Set compiler channels .
6973	Set the raw inputs using raw_input .
6974	Sets the secondary inputs .
6975	Set extra inputs
6976	Parse the coverage header .
6977	Parse assembly file .
6978	Calculate GC properties .
6979	Filter contigs based on comparisons .
6980	Calculate assembly length
6981	Write out the filtered assembly file .
6982	Write the assembly report to a file .
6983	Remove inner loops from text .
6984	Perform insanity checks .
6985	Run insanity checks on the given pipeline string .
6986	Parse a string and return a Pipeline object .
6987	Get the source lane for a fork .
6988	Parse a string of lane names .
6989	Establish a linear connection between processes .
6990	Establish a connection between two processes .
6991	Add unique identifiers to the pipeline string .
6992	Remove unique identifiers from pipeline links .
6993	Checks that the required trace and log files exist .
6994	Build a mapping from header to position .
6995	Convert seconds to hours minutes
6996	Convert a size string to a float .
6997	Get the processes from the log .
6998	Clears the inspected state
6999	Update barrier status .
7000	Retrieve a log file .
7001	Assess the resource usage and memory usage .
7002	Update process stats
7003	Parse the log file .
7004	Update inspect and trace parser .
7005	Display the overview .
7006	Up or down the top line .
7007	Rightleft
7008	Get last n lines from the log file .
7009	Extracts information about the pipeline .
7010	Read the . treeDag . json file and return it as a dict .
7011	Generate a hash for the nextflow run .
7012	Return the path to the nextflow command .
7013	Splits a sample into a fasta file .
7014	Main function for the pipeline .
7015	Runinnuendo pipeline .
7016	Build a recipe .
7017	List available recipes .
7018	Validate the pipeline
7019	Build the upstream .
7020	Builds the downstream of the given process .
7021	Define a pipeline string .
7022	Run the auto - pipeline .
7023	Build a component string .
7024	Write out a report . json file .
7025	Create a report from the given log files .
7026	Fix the assembly names in asseembly
7027	Clean up temporary files .
7028	Parse a list of files
7029	Parse log file .
7030	Iterate over values in the database .
7031	Get the id of a contig string
7032	Get the plot data .
7033	Write the data to a . report . json file
7034	Main function .
7035	Parse the assembly file .
7036	Calculate summary statistics
7037	Get window labels .
7038	Calculate GC rate .
7039	Calculate GC sliding window .
7040	Main function for skesa .
7041	Generate a json report
7042	Returns the index of the trim index in the given list
7043	Calculate nucleotide range .
7044	Calculate and return the optimal sample range
7045	Get summary information from a summary file .
7046	Check the health of a summary file .
7047	Parse the bowtie log .
7048	Parse process name string .
7049	Add a dependency to a process
7050	Search the tree for the given template .
7051	Build the header .
7052	Add footer to template
7053	Set channels for all processes .
7054	Sets the process to be run .
7055	Set secondary links
7056	Set the status_channels attribute of the process .
7057	Builds a resource string from a resource dictionary .
7058	Build the container configuration .
7059	Returns a string with the parameters as a string .
7060	Returns a string with merged parameters .
7061	Build the manifest string .
7062	Set the configuration for the processes .
7063	Write a dictionary to a file .
7064	Render the pipeline .
7065	Write the configs to disk .
7066	Export the current processes to stdout .
7067	Export directives to stdout .
7068	Fetch docker tags
7069	Build the project .
7070	Set kmer range based on kmer option .
7071	Main function for metaSPAdes
7072	Get the id of the report
7073	Update the trace watch .
7074	Update the logwatch .
7075	Send a live report to the reporter .
7076	Start live reports .
7077	Close the connection to the server .
7078	Convert the adapter_fasta file to the output .
7079	Main function for fastqc .
7080	Sends master_dict to the output .
7081	Main function for mash algorithm .
7082	Add version information to the version file .
7083	Main function for mash
7084	Colorize a message .
7085	Parse a dictionary of dicts .
7086	Collector for processes .
7087	Guess the compression of a file .
7088	Get the range of a qual string .
7089	Returns a list of strings that are in the specified range .
7090	Parse the coverage table .
7091	Filter out the assembly file .
7092	Filter a bam file based on coverage information .
7093	Calculate the minimum assembly coverage .
7094	get assembly size and contig size
7095	Main entry point for the assembly mapping .
7096	Convert CamelCase to CamelCase
7097	Collect process classes from components .
7098	Process a newick file .
7099	Wrapper function for fasthull .
7100	Map W to data
7101	Apply median filter .
7102	Computes the kernel for a Gaussian
7103	Compute the SSM .
7104	Compute the nc of the network .
7105	Gaussian filter .
7106	Compute the N - dimensional cross - correlation .
7107	Circular shift matrix .
7108	Compute embedded space .
7109	Plot plotting .
7110	Plot boundaries .
7111	Plot the labels for all_labels .
7112	Plot a single track .
7113	Plot a tree .
7114	Return a list of feature segments .
7115	Convert a list of features to a 2D Fourier Transform
7116	Compute the similarity between features .
7117	Perform a fit on the data .
7118	Perform a partial fit on the data .
7119	Reads references from a file .
7120	Searches for an estimation .
7121	Save estimations to file .
7122	Return a list of all boundary algorithms .
7123	Build a configuration dictionary .
7124	Return a list of file descriptors .
7125	Read hierarchy boundaries and labels .
7126	Return the duration in seconds .
7127	Convert times and labels to mappings .
7128	Get the path of the audio file .
7129	Align a segmentation to a segmentation .
7130	Estimate the beats of the audio .
7131	Read the beat annotations from the annotation file .
7132	Compute beat sync features .
7133	Read features from file .
7134	Write features to file .
7135	Returns a list of all parameter names .
7136	Compute the framesync times .
7137	Return the time of each feature .
7138	Get the features from the audio file .
7139	Select a feature based on its features .
7140	Preprocess the features .
7141	Post - process the segmentation .
7142	Main function .
7143	Print results .
7144	Compute GTF results .
7145	Compute the information gain .
7146	Process a track .
7147	Return the name of the results file .
7148	Process a track file .
7149	Add a config variable .
7150	Compute all the features in a file .
7151	Processes a MSAF file .
7152	Gaussian cost function .
7153	Normalize a frequency matrix .
7154	Normalize a frequency matrix .
7155	Normalize data .
7156	Get time frames
7157	Remove labeled segments and labels .
7158	Calculate audio clicks .
7159	Synchronize labels according to new bound_idxs .
7160	Process a segmentation level .
7161	Align the end of two hierarchies
7162	Compute the distance between two nodes .
7163	Estimate the knee of the kernel .
7164	Get cluster data .
7165	Run k - means algorithm .
7166	Compute the Bayesian Information Criterion
7167	Return the magnitude of a matrix .
7168	Return the bounds of a segment .
7169	Convert a bounds file to a numpy array .
7170	Extract labels from a json file .
7171	Load beats from a json file .
7172	Compute the 2D Fourier transform .
7173	Compute the label for each vertex .
7174	Filter an activation matrix .
7175	Get boundaries module .
7176	Get labels module from MSAF .
7177	Segment audio and labels .
7178	Run segmentation .
7179	Run algorithms .
7180	Process a single recording .
7181	Process audio data .
7182	Update the weight matrix .
7183	Main function .
7184	Decorator to run a coroutine .
7185	Return accumulator for given init and update .
7186	Set a task translator .
7187	Emulate spool .
7188	Read lines from input stream .
7189	Decorator to connect to an API endpoint
7190	Translate text to target .
7191	Return the translation table for a given language .
7192	Print the translation table .
7193	Remove nodes from network .
7194	Write a network to an HDF5 file .
7195	Create a Network from a HDF5 file .
7196	Assign a variable to the network .
7197	Calculate aggregate accessibility variables .
7198	Get node_ids from kdtree .
7199	Plot the grid .
7200	Set the pois for the given category .
7201	Return the nearest pois to the given category .
7202	Return the number of nodes with low connectivity .
7203	Process a single node .
7204	Make Openpass API query
7205	Build a node query .
7206	Query OSM nodes .
7207	Check if value is a regular expression .
7208	Compare value with expectation .
7209	Wrap a function to return the result .
7210	Compare value to value .
7211	Trigger callable methods .
7212	Check if a request matches a request .
7213	Get a matcher by name .
7214	Initialize a matcher by name .
7215	Set the request body .
7216	Set the response to JSON .
7217	Set a value in the container .
7218	Append list of functions to target .
7219	Trigger a pook . Request .
7220	Set the URL for the request .
7221	Set request headers .
7222	Matches the given headers .
7223	Matches given headers .
7224	Set the content type for the request .
7225	Add new query parameters to the request .
7226	Set the body of the request .
7227	Set the JSON matching for the request .
7228	Set XML matcher .
7229	Add a file to the response
7230	Setter for persist .
7231	Set the error
7232	Respond to the mock
7233	Match a request .
7234	Activate an asynchronous function .
7235	Set the mock engine for this instance .
7236	Enable or disable the given hostnames .
7237	Add a mock to the engine .
7238	Remove a mock from the list .
7239	Activate the engine .
7240	Disable the mock engine .
7241	Check if the request should be used .
7242	Match a request .
7243	Make a copy of this request .
7244	Activate engine .
7245	Context manager for creating an engine .
7246	Add an interceptor to the engine .
7247	Remove an interceptor by name .
7248	Get a setting from the connection
7249	Returns the SQL for the decrypted column .
7250	Set the original value to the original value
7251	Get the placeholder value .
7252	Return a decrypted Column instance .
7253	Returns the SQL placeholder for the encryption .
7254	Ensure that YAML keys are repeated .
7255	Base regression .
7256	Return the covariance matrix .
7257	Recursive function to recurse into the tree .
7258	Calculate the QTotiles .
7259	Propagate mean and variance variables .
7260	Return the explained variance .
7261	Calculates the regression of the tree .
7262	Find the best root of the tree .
7263	Set Tc values
7264	Calculate the number of branches in the tree .
7265	Returns the cost of the merger .
7266	Attach the merger cost to the tree .
7267	Optimize the coalescent time scale
7268	Convert profile to sequence
7269	Normalize a profile .
7270	Setter for GTR
7271	Set GTR model .
7272	Set sequence length
7273	Add sequences to nodes
7274	Prepare the tree .
7275	Sets up internal nodes and internal nodes .
7276	Calculate the distance between all nonterminal nodes .
7277	Reconstruct an alignment .
7278	Get the mutation matrix for a node .
7279	Return the expanded sequence for node .
7280	Create Fitch profiles
7281	Return the state of the node at position pos .
7282	Given a list of arrays return the first item in the list .
7283	Return the total sequence length for the given position .
7284	Calculate the log likelihood of ancestral trees .
7285	Calculate the length of a branch .
7286	Optimize branch length
7287	Optimize branch length
7288	Calculate the optimal length of a branch .
7289	Optimize the sequence length .
7290	Reconstruct the tree .
7291	Compute the covariance matrix .
7292	Create a Gaussian model .
7293	Creates a standard model .
7294	Check the diagonal of the GTR rate matrix .
7295	Compute the probabilistic probability of the t - t - t - t .
7296	Compute the optimal T for each pair .
7297	Compute the T - compressed t - compressed t - compressed time .
7298	Calculate the probability of a profile .
7299	Evolve the profile at time t .
7300	Return the log of a sequence .
7301	Sets the branch length mode
7302	Filter the clock model .
7303	Plot root to tip
7304	Resolve multiple merges .
7305	Print log - likelihood .
7306	Add a coalescent model to the tree
7307	Find the best root node
7308	Convenience function to make sure the tree is correct .
7309	Create GTR .
7310	Read a VCF file .
7311	Reconstruct ancestral sequences .
7312	Calculates the FWHM .
7313	Initialize a delta function .
7314	Multiply distributions .
7315	Assign dates to the tree
7316	Setup the tree regression .
7317	Create a time tree .
7318	Calculate the log likelihood of the tree .
7319	Convert dates to dates .
7320	Return the date uncertainty of a node .
7321	Calculate the maximum posterior region of a node .
7322	Returns the minimum value of an interpolation object
7323	Calculate the median interpolation .
7324	Return the year of a date
7325	Creates a CLDT object from the given data model .
7326	Connect to guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the remote server .
7330	Send an instruction .
7331	Perform a handshake .
7332	Convert unicode to utf8
7333	Load an instruction from an instruction .
7334	Encode an argument into a string .
7335	Encode the instruction .
7336	Return the URL for a class .
7337	Return the URL for this instance .
7338	Return the URL for the given class .
7339	Download the file from disk .
7340	Retrieve the parent object for this job .
7341	Ask user for credentials .
7342	Login to the solver .
7343	Show the user info .
7344	Print user details .
7345	Return a new QuerySet with the given filters .
7346	Return a new GenomicFilter object with only the specified chromosome .
7347	Return a new GenomicFilter with the given chromosome and position .
7348	Add facets to the query
7349	Process filters .
7350	Return the next page .
7351	Executes a query and returns the result .
7352	Migrate this dataset to another dataset .
7353	Entry point for the solver .
7354	Download all files from vault to local path .
7355	Construct a new instance from a dictionary of values .
7356	Log out the user .
7357	Make an API request .
7358	Retrieves the child object for this task .
7359	Cancel the job .
7360	Parse snpeff output .
7361	Convert a row to a dictionary .
7362	Get credentials from netrc .
7363	Save configuration to file .
7364	Format value according to valtype .
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Format a table .
7370	Migrate this dataset to another dataset .
7371	Validate a full path .
7372	Uploads a file or folder .
7373	Validate a vault path .
7374	Validate SolveBio API host .
7375	Add paths to the manifest .
7376	Annotate multiple records .
7377	Evaluate the expression .
7378	Set the format_name
7379	Register a new output format handler .
7380	Formats the given data using the specified format .
7381	Wrapper for tabulate .
7382	Return the user s config directory .
7383	r Returns the system config directories .
7384	Read the default config from the file .
7385	Read all config files .
7386	The user config file
7387	Return the system config files .
7388	A list of all of the additional files .
7389	Write the default config file .
7390	Read a list of config files .
7391	Truncates a string to a maximum length .
7392	Replace strings in a string .
7393	Runs multiple commands in a sequence .
7394	Apply command options .
7395	Apply an option to the command .
7396	Initialize options .
7397	Run pep8radius fix .
7398	Run the command .
7399	Recursively truncate headers and headers .
7400	Helper function to format numbers in a list .
7401	Helper function to format a row .
7402	Wrapper for table .
7403	Wrapper for table .
7404	Renders a template file .
7405	Check if a type is numeric .
7406	Check if type is bool .
7407	Checks if the given type is binary .
7408	Generate a key using the given template .
7409	Generate a key pair .
7410	Return a list of objects matching the template .
7411	Inserts an image into the given qr_img
7412	Export gene panel .
7413	Return the first weekday of the given date .
7414	Count the repeat times .
7415	Repeat the repeat time between start and end repeat .
7416	Repeatedly repeat the next week .
7417	Handle a single chunk event .
7418	Returns a generator of variants for the given collaborator .
7419	Exports verified variants to a document .
7420	Convert a list of variants to a MST file .
7421	Update a user .
7422	List str variants .
7423	Get a single variation .
7424	Get a single string variant .
7425	Verify a variant .
7426	Export a CLINvar submission .
7427	List cancer variants .
7428	View a variant .
7429	View for an evaluation .
7430	Get APM data
7431	Upload a panel to an institute .
7432	Downloads the verified Excel file for the given user .
7433	Return a dict mapping aliases to their aliases .
7434	Add incomplete penetrance information
7435	Link gene names to gene names .
7436	Send a request to MME .
7437	Return a list of connected nodes .
7438	Get the coordinates of the chrom and position
7439	Determine the sub category for a variant .
7440	Calculate the length of a variant .
7441	Determine the end of a variant .
7442	Parse a single variant and return coordinates .
7443	Main entry point for Cytoband .
7444	Create a new panel .
7445	View for updating a panel .
7446	Export a panel .
7447	Edit a gene .
7448	Save delivery report to case .
7449	Return a dict of HPO terms .
7450	View whitelist users .
7451	Build a phenotype object for a given phenotype ID .
7452	Retrieve information about a gene .
7453	Convert a query string to a list of JSON - like objects .
7454	Display information about a certain user .
7455	View transcripts .
7456	Return a list of events for a particular day .
7457	Page for variants .
7458	List variants of a string .
7459	Instantiate a str variant .
7460	Add a variant object to the store .
7461	Parse a single variant .
7462	Generate a CSV header for variants .
7463	Get information about a variant .
7464	Get a dictionary of indicators for a list of genes .
7465	Add a case to a variant case
7466	Ensure bam file exists .
7467	Return information about a variant .
7468	Parse a gene .
7469	Create a transcript string .
7470	Returns the end position of a variant
7471	Determine the frequency of a variant .
7472	Add clinsig objects to clinsig objects
7473	Generate a link to an organization .
7474	Generate a link to a cosmic link
7475	Generate a beacon URL for a variant .
7476	Return the URL for the UCSC variant .
7477	Determine the percentage of spidx .
7478	Return a list of expected models for a variant .
7479	Return a list of callers for a given variant .
7480	Search for cancer variants .
7481	Exports a ccl variable to the database .
7482	Retrieve a submission for a given submission .
7483	Return the ACMG for a variant .
7484	Post a variant .
7485	Convert an evaluation object to an evaluation object
7486	Upload hgNC symbols to store .
7487	Create an xlsx file for verified variants .
7488	Export all genes to .bed format
7489	Parse a clnsig .
7490	Parse compound information .
7491	Export all genes .
7492	Builds an individual .
7493	Load variants for a case .
7494	Get a case .
7495	Print out the Scout view collections .
7496	Show institute information .
7497	Update an institute .
7498	Return a file handle .
7499	Return the number of dates in the request .
7500	Get the next and previous and previous .
7501	Check if year is in seconds .
7502	Determine the day of the week .
7503	Parse case data .
7504	Add information from a ped file .
7505	Parse an individual
7506	Parse a list of individuals into a list of individuals .
7507	Parse a case .
7508	Parse a ped file .
7509	Build an evaluation object .
7510	Export MT variants for a case .
7511	Checks if a set of parameters are pathogenic .
7512	Determine whether pvs are likely to be pathogenic .
7513	Return whether or not the bs_terms are likely to be binary .
7514	Parses acmg terms and returns prediction
7515	Add gene information to a variant .
7516	Fetch variants from a case .
7517	Returns a list of variants for the sanger variant .
7518	Get a single variant .
7519	Query the database for genes .
7520	Returns a list of variants for the given institute .
7521	Get the causative of a case .
7522	Return a list of variants for a case .
7523	Yields the variants of a case .
7524	Delete old variants .
7525	Find variants with overlapping variants .
7526	Return a list of all evaluated variants for a case .
7527	Get a VCF file .
7528	Retrieve variants for a specific sample .
7529	Connect to MongoDB .
7530	Gets a list of objects from the form .
7531	Create a header for the CLINVAR submission .
7532	Convert a list of submission objects to CSV format .
7533	Load transcripts from ensembl
7534	Show a panel .
7535	Build an Exon from a dict .
7536	Delete a gene panel .
7537	Delete the Scout index .
7538	Delete user from database .
7539	Delete genes collection .
7540	Delete exons from a build .
7541	Delete a case .
7542	View individual individuals .
7543	Parse match objects .
7544	Show cases .
7545	Load a user from the store .
7546	Login to Google .
7547	Builds an institute object .
7548	Delete an event from the database .
7549	Create an event .
7550	List events for a specific variant .
7551	Get events for a user .
7552	Add a phenotype term to a case .
7553	Remove a phenotype term from a case .
7554	Create a comment for a case .
7555	Parse individual genotypes .
7556	Check if the given coordinates match the given chromosome .
7557	Search HPO terms .
7558	Export transcripts .
7559	Load exons .
7560	Load a genomic region .
7561	Return a list of events for a particular month .
7562	Return a queryset of live events for this repeat .
7563	Parse requirements . txt
7564	Check if an existing gene exists .
7565	Update a gene panel .
7566	Create a new panel .
7567	Export a panel .
7568	Return archive information .
7569	Migrate a scenario from an archive .
7570	Migrate a scenario to an archive .
7571	Load a case .
7572	Fetch HGNC genes .
7573	View HPO terms .
7574	Create a Flask application .
7575	Configure application extensions .
7576	Register blueprint .
7577	Configure coverage .
7578	View aliases .
7579	Build a panel
7580	Export verified variants .
7581	Export variants .
7582	Build a VCF entry from a variant object .
7583	Serve up a MongoDB server
7584	Generate an MD5 key from a list of strings .
7585	Connect to MongoDB .
7586	Setup collection from database .
7587	Run Scout index .
7588	Setup SCout database .
7589	Run Scout setup demo .
7590	Sets up the command line .
7591	View institute information .
7592	Parse genetic models .
7593	View the panels .
7594	Add an institute to the database .
7595	Update an institute .
7596	Retrieve a specific institute .
7597	Return True if the given date is valid .
7598	Parse a date into a datetime object .
7599	Export hpo genes .
7600	Parse a rank score entry .
7601	Add a user .
7602	Check connection to MongoDB .
7603	Initialize Flask application .
7604	Load a delivery report into the database .
7605	Add a user to the database .
7606	Run pileup .
7607	Load exons from exons .
7608	Update compound compounds .
7609	Add links to Gene object
7610	List HGNC symbols .
7611	Parse an HGNC gene line .
7612	Parse hgnc file .
7613	Get an open clinvar submission .
7614	Updates an existing clinvar submission .
7615	Gets the id of the clinvar submission .
7616	Add variants and case data to the clinvar submission .
7617	Closes a clinvar submission .
7618	Retrieves all the clinvar submissions for a given user and institute .
7619	Delete a clinvar object .
7620	Returns a list of CLINVars for a given case .
7621	Parse HOobo output .
7622	List all genes .
7623	Get a single gene .
7624	List genes .
7625	Check if panels exist .
7626	Load clinical SNV variants for a case .
7627	Load a Scout from the database .
7628	Decorator to render a function .
7629	Return a case and case object for a case .
7630	Return a list of institute names for the user .
7631	Retrieve the HGNC ID for a gene .
7632	Update a panel .
7633	List disease terms .
7634	Load the disease terms into a list .
7635	Parse frequencies from a variant .
7636	Parse the frequency of a variant .
7637	Parse variant frequencies .
7638	View users .
7639	Build a Gene from a gene info dict .
7640	Load and add a panel panel
7641	Load IMIM - AUTO .
7642	Compares two MIM panels .
7643	Update the mime version of a new panel .
7644	Add a gene panel to database .
7645	Gets a panel .
7646	Delete a panel .
7647	Get a single gene panel .
7648	Search for gene panels .
7649	Build a dict mapping gene names to panels .
7650	Update a panel .
7651	Add pending action to panel .
7652	Applies pending updates to the panel .
7653	List of clinical symbols .
7654	List cases .
7655	Send an email .
7656	Load the indexes from the database .
7657	Update indexes
7658	Drop all indexes
7659	Build a variant query .
7660	Build a Mongo query .
7661	Build query for clinsig
7662	Add genomic coordinates to query .
7663	Applies filters to the given query .
7664	Run Scout wipe
7665	Parses a panel panel into a dictionary
7666	Build a clnsig object
7667	Load a list of gene objects into the database .
7668	Load multiple transcripts .
7669	Load a list of exon objects into the database .
7670	Retrieve a single HGNC gene .
7671	Returns the HGNC ID for a symbol
7672	Fetch genes with HGNC symbols .
7673	Return all genes in the database
7674	Return the number of genes in the database
7675	Drop the hgnc_gene collection .
7676	Drop the transcripts collection .
7677	Drop the exons collection .
7678	Get all ensembl transcript objects
7679	Build a dict mapping HGNC symbols to gene objects .
7680	Find gene by symbol
7681	Get all HGNC symbols by alias
7682	Get all ensembl genes
7683	Return the HGNC symbol for the gene .
7684	Add hgnc id to genes
7685	Build an interval tree for coding genes .
7686	Update an omim panel .
7687	Get information about an institute .
7688	Retrieve a case and case .
7689	View for matches .
7690	View for matching cases .
7691	Delete a matchmaker .
7692	Retrieve a case report .
7693	Render a case report .
7694	Diagnose a case .
7695	Add phenotypes to case .
7696	Handles phenotypes .
7697	Comment event .
7698	View for a case .
7699	Assign a user to a case .
7700	List terms .
7701	Mark a variant as validation .
7702	Mark a variant as causal .
7703	Get the delivery report for a given date .
7704	Share a case .
7705	Rerun a trial .
7706	Open a research dialog .
7707	Download a VCF2cytosure file .
7708	Send multiqc for a case .
7709	Return a list of cases .
7710	Return the case report content .
7711	Calculate the contents of an institute .
7712	Return a list of all the submission for a given user .
7713	Exports the MT variants .
7714	Update the case synopsis .
7715	Retrieve diseases from HPO ids .
7716	Retrieve the information from a VCF file .
7717	Return information about a multiqc case .
7718	Return a list of sanger s ordered by case .
7719	Add a user to matchmaker .
7720	Deletes matching participants .
7721	Get matches for a given case .
7722	Perform a match maker .
7723	Update genes .
7724	Parse a single variant .
7725	Build a transcript from a dictionary .
7726	Loads an institute into the database .
7727	Parse the CADD entry .
7728	Create a case .
7729	Update a single variant .
7730	Update the rank of variants for a case .
7731	Update compound compounds for a single variant .
7732	Update compound compounds
7733	Update compound variants .
7734	Update the coding intervals for a case .
7735	Load a variant into the database .
7736	Inserts a variant into the variant collection .
7737	Load a list of variants into the variant collection .
7738	Assign a case to a case .
7739	Add a case to a case .
7740	Add a diagnostic .
7741	Marks a case as checked .
7742	Event handler for ordering verification .
7743	Gets a list of sanger verbs .
7744	Validate a variant .
7745	Mark a variant as causative .
7746	Update the dismiss variant for a variant .
7747	Set the acmg for a variant .
7748	Parse ids from a case .
7749	Parse a simple ID .
7750	Parse a document id .
7751	Convert hgnc_id to hgnc_id
7752	Convert a variant object to a document id .
7753	Return the number of cases .
7754	Update list of genes based on HGNC symbols .
7755	Fetch case from database .
7756	Delete case from database .
7757	Adds a case to the database .
7758	Replace a case .
7759	Update case id in case .
7760	Submit an evaluation .
7761	Get evaluations for a given variant .
7762	Parse transcript lines .
7763	Parse ensembl query result .
7764	Parse ensembl transcript request .
7765	Parse an ensembl line .
7766	Parse ensembl genes .
7767	Parse ensembl exons
7768	Parse ensembl exon request .
7769	Initialize logging .
7770	Parse an omim line
7771	Parse morbid output .
7772	Parse genemap output .
7773	Manage genotypes .
7774	Convert string to int or float
7775	Format a table of month numbers .
7776	attempt to format the day
7777	Format a month name .
7778	Popover helper .
7779	Build panel information .
7780	Parse a gene info dictionary .
7781	Return a list of Gene objects .
7782	Parse a gene panel .
7783	View diseases .
7784	Update HPO terms .
7785	Return a dictionary of user information .
7786	Parse conservation information from a variant
7787	Parse the conservation score .
7788	Return general case information .
7789	Gets a list of cases grouped by count .
7790	Returns a HttpResponse containing the given context .
7791	Get year and month
7792	Check for cancelled events .
7793	Retrieve the term for an hpo term .
7794	Search for HPO terms .
7795	Get a disease term .
7796	Get disease terms
7797	Load a disease term into the database .
7798	Generate a list of GO IDs based on a list of terms .
7799	Read data from an HDF5 file .
7800	Sets up the frequencies for each channel
7801	Setup time axis .
7802	Read the filterbank .
7803	Compute the lst of the segment
7804	Fill the DC bin .
7805	print info about the file
7806	Calculate the extent of the file .
7807	Plot the waterfall .
7808	Plot the time series .
7809	Write the data to a filterbank file .
7810	Calibrate the median data .
7811	Convert data to a sparse format .
7812	Apply the GRASS algorithm .
7813	Calibration of polarization .
7814	Calculate the fracpols of a string .
7815	Convenience function to write waterfall data to filenames .
7816	Returns the index of the closest element to val .
7817	Rebin data to mean .
7818	Unpack an 8 - bit array .
7819	Calculate differential flux differences between two streams .
7820	Plot the Stokes diode .
7821	Plot diode data .
7822	Plot thegain offsets for the given differential flux .
7823	Open a file .
7824	Setup selection range
7825	Calculate the size of the channel
7826	Calculate the shape of the signal
7827	Determine the start and end indices for each channel
7828	Calculate the start and end times for each channel
7829	Create timestamps .
7830	Populate the frequencies .
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Whether this array isheavy .
7834	Read data from the file .
7835	Read the data from the file .
7836	Read a row from the file .
7837	Read data from the container .
7838	Update the header information .
7839	print info about the file
7840	Write to a file .
7841	Write to HDF5 file .
7842	Write this filter to an HDF5 file .
7843	Determine the size of the blob .
7844	Determine the dimensions of the file .
7845	Grab the data from the spectrum
7846	Tool for creating spectra from GuppiRaw files .
7847	Return the first header of the MAR file .
7848	Find the number of data blocks
7849	Print statistics of the PNG file .
7850	Plot a histogram .
7851	Generate filterbank header .
7852	Find the size of the file
7853	Tool for matchfils .
7854	Tool for creating gppi Raw files .
7855	Calculate the average of the data
7856	Integrate the waterfall .
7857	Calculate the average fluxes .
7858	returns the center of the given frequency
7859	Calculate the F_on and F_OFF ratios .
7860	Calculate the diode spec .
7861	Calculate Tsys .
7862	Calibrates the flux and differential fluxes
7863	Return the length of the header of a file .
7864	Check if the file is a filterbank .
7865	Fix the header of a file .
7866	Generate a header string from a file .
7867	Convert angle to a sigproc angle
7868	Calculate the number of samples in a file .
7869	Convert to a dict .
7870	Add a sub - command parser to subparsers .
7871	Create a parser for zonefile
7872	Remove comments from text .
7873	Add a default name to the text .
7874	Parse a single line .
7875	Parse lines from text .
7876	Parse a zone file .
7877	Return a copy of a field in a dictionary .
7878	Parse a schema string .
7879	Convert a list of classes to a python package .
7880	Return the source code for a class .
7881	Disable auto store .
7882	Dump record in json - encodable object format
7883	Load a serialized record from a dictionary .
7884	Load a record from a string .
7885	Add a schema to the schema .
7886	Returns the schema for the given record name .
7887	Dict representation of this instance .
7888	Add mixin classes to cls .
7889	Create a new record from a class .
7890	Generate a JSON Schema for a record .
7891	Return the schema as a dict .
7892	Auxiliary function for reading mr files .
7893	Write output to output_stream .
7894	Return an OrderedDict with the given key and value .
7895	Execute a search query against the server .
7896	Return a search result .
7897	Return all entities with the given attributes .
7898	Get an Entity from a href .
7899	Given a quote return another quote
7900	Escape a filter .
7901	Return an elementary rotation matrix .
7902	Construct a covariance matrix .
7903	Return the average voltage error .
7904	calculate the parallax error
7905	Calculate the magnitude error .
7906	Calculate the magnitude error .
7907	Make the plot .
7908	Return the average number of transits .
7909	Return the angular distance between two angles .
7910	Transform cartesian coordinates .
7911	Transform spherical coordinates to spherical coordinates .
7912	Transform the covariance matrix to a Jacobian matrix .
7913	Return the scaling factor of an observable .
7914	Makes a plot of Spt and V .
7915	Makes a plot of the spectrum .
7916	Creates a function from a value .
7917	A decorator that wraps a QKeyError .
7918	Uniquote a value .
7919	Apply a function to each item in the collection .
7920	Exclude elements by a function .
7921	Return a new collection filtered by a truth value .
7922	Return a new sequence while keeping only the elements in the collection .
7923	Return a new collection with only the elements that do not occur .
7924	Return a new collection with the elements of this collection .
7925	Find the first matching node
7926	Return the serach path
7927	Iterate over groups in a string .
7928	Yield all registered options
7929	Convert an event tuple into a string .
7930	Builds a list of runs for each register .
7931	Print the results .
7932	Prints the results to stdout .
7933	Print the problem results .
7934	Clean the given code .
7935	Round to the next base .
7936	Split indices into blocks .
7937	Calculate cache access
7938	Calculate the number of cycles per process
7939	Analyze the kernel .
7940	Perform IAC analysis .
7941	Strip and uncomment lines from lines .
7942	Remove unreferenced labels .
7943	Select the best block from a list of blocks .
7944	Prompt for the pointer increment
7945	Print a userselect block from an assembly file .
7946	Add markers to assembly lines .
7947	Initiate an IAC - compatible assembly using IAC .
7948	Main loop .
7949	Runs the simulation .
7950	Generate integers between start and stop .
7951	Get the last modified time of a directory .
7952	Validate the command line arguments .
7953	Main entry point .
7954	Main function .
7955	Return a symbol with positive integers .
7956	Translates a multidim decl to 1D array declaration .
7957	Transform a multidim to 1D arrayRef .
7958	Recursively find all nodes of a given type .
7959	Convert a function to an iterable .
7960	Ensure that datatypes are allowed .
7961	Set a constant .
7962	Subtract expressions from expr .
7963	Return a dictionary of variable sizes .
7964	Calculate relative offset .
7965	Remove duplicate accesses .
7966	Calculate the length of the variable .
7967	Return a generator for the current stack .
7968	Return a list of free symbols .
7969	Return a dictionary with all the possible access to each variable .
7970	Computes the relative distance between each variable in a dictionary .
7971	Convert a global iterator to an index .
7972	The iterator of the global iterator .
7973	Return a global iterator for the given indices .
7974	Return an iterator over the global iteration positions .
7975	Print kernel information .
7976	Print information about available variables .
7977	Prints out the constants .
7978	Print kernel code .
7979	Convert a mathematical AST to a symbol .
7980	Get the offset of an array or a variable .
7981	Return the base name of the array .
7982	Return the index type of a loop .
7983	Builds a list of constant declarations .
7984	Return array declarations .
7985	Return a list of nodes in the kernel .
7986	Builds a list of array declarations and maps to array declarations .
7987	Find innermost loop .
7988	Build a kernel for array initialization .
7989	Build dummy calls .
7990	Build a kernel function declaration .
7991	Builds a list of scalar declarations .
7992	Get the kernel code .
7993	Build a kernel call .
7994	Return the astroid . py file .
7995	Run iaca analysis on the kernel .
7996	Build the executable .
7997	Convert a string to a sympy expression .
7998	Return a unique identifier .
7999	Return the last modified date of the file .
8000	Return a CacheSimulation object .
8001	Calculate the bandwidth .
8002	Get compiler and flags .
8003	Parse perfctr event .
8004	Enforce overlapping intervals
8005	Returns the path to the header directory
8006	Align an iteration to the left of the cacheline boundary .
8007	Returns a list of loads .
8008	Returns the number of hits in the memory .
8009	Returns the number of misses in the memory .
8010	Returns a list of stores .
8011	Returns a list of evicts .
8012	Get information about the memory
8013	Fix an environment variable .
8014	Configure the arggroup .
8015	Print the results .
8016	Parse the description from README . md
8017	Schedule a job to run .
8018	Build a complete item .
8019	Record a purchase in Sailthru .
8020	Retrieves the course content for the given course id
8021	Retrieves course content from the Catalog API .
8022	Update unenrolled list of unenrolled users .
8023	Send a course refund email .
8024	Send an offer assignment email .
8025	Return the logger configuration .
8026	Tries to retry if the request failed .
8027	Fulfill an order .
8028	Get Sailthru client .
8029	Get the value for the given key .
8030	Store a value in the cache .
8031	Returns the value of a worker configuration variable .
8032	Get the overrides file name .
8033	Return the value sorted by version .
8034	Get the installed Eplus version .
8035	Return dict of FileInfo objects .
8036	Populate this table from the provided json data .
8037	Returns a list of all external files in the database .
8038	Set default values for all tables .
8039	Prepares extensible information .
8040	Returns the extended name for the field .
8041	Dictionary with short references for external files .
8042	Get a value from the table .
8043	Update the value inert .
8044	Update inert .
8045	Set default values .
8046	Add new fields to this record .
8047	Removes and returns the value at the specified index .
8048	Insert a value into the field .
8049	Remove this object from the table .
8050	Register a record hook .
8051	Register a link .
8052	Create a regular expression for the given intent .
8053	Determine the duration of a given time .
8054	Serialize event to JSON .
8055	Perform an HTTP request .
8056	Get a list of available services .
8057	Create a directory if it doesn t exist .
8058	Configure a service
8059	Register a CA .
8060	Set recording state .
8061	Update the status of an event .
8062	Configure capture agent state
8063	Return the configuration file path .
8064	Update the configuration file .
8065	Check if we are running .
8066	Initialize the root logger .
8067	Show the home page .
8068	Serve an image .
8069	Run all modules in parallel .
8070	Parse an iCal file into a list of events .
8071	Get upcoming events from the database .
8072	Main control loop .
8073	Run the control loop .
8074	Build an error response .
8075	Return a JSON - serializable response .
8076	Get internal state .
8077	List upcoming events .
8078	Get an event .
8079	Delete an event by uid
8080	Modify an event .
8081	Parse the properties of the workflow .
8082	Process an event .
8083	Start recording .
8084	Render the template to a fragment .
8085	The list of all known resources .
8086	Return a dict representation of this object .
8087	Create a FragmentResource from a dictionary .
8088	Add content to the response .
8089	Add a text resource .
8090	Add a resource URL .
8091	Initialize the JavaScript function .
8092	Return the HTML for the given placement .
8093	Convert a resource to HTML .
8094	Handle GET requests .
8095	Renders a standalone HTML response .
8096	Render a standalone HTML fragment .
8097	Calculate pvalues and pvalues for pvalues .
8098	Convert values to one dimension .
8099	Given an error table and an error table return the closest pep value .
8100	Perform a fast calculation of chromatogram hypotheses .
8101	Calculate the final error table .
8102	Create a summary table from a dataframe .
8103	Compute error statistics .
8104	Find cutoff value based on confidence interval .
8105	Compute a score using the GTG .
8106	Infer peptide peptideforms .
8107	Infer a peptide from an input file .
8108	Infer a protein from an input file .
8109	Subsample an input file to outfile .
8110	Reduce infile to outfile .
8111	Backpropagate an infile to outfile .
8112	Filter sqmass files
8113	Get a group by its ID .
8114	Create a new group .
8115	Delete a group .
8116	Get group members .
8117	Update members of a group .
8118	Get the effective member count .
8119	Check if group is an effective member of net
8120	Modify Sphinx configuration
8121	Create a new HDF5 dataset .
8122	Decrypt contents of a file .
8123	Get stdin and stdout .
8124	Get the stdout from the command .
8125	Get the stderr from the command .
8126	Get the debug output .
8127	Context manager for reading stdin .
8128	Yields stdout from stdout .
8129	Context manager for writing stderr to stdout .
8130	Context manager that yields debug output .
8131	List empty accounts .
8132	List empty container .
8133	Wraps a function with stdout
8134	Wrapper for stderr .
8135	Write error message to file .
8136	Print help for this parser .
8137	Print usage on the command line .
8138	Print version of option .
8139	Makes a request
8140	Create a new account .
8141	Delete an account .
8142	Creates a new container .
8143	Returns a HEAD request for the specified object .
8144	Get an object from a container .
8145	Puts an object into a container .
8146	Creates an object in a container .
8147	Resolve an option to an option .
8148	Return a copy of this object .
8149	Write headers to file .
8150	Manage credentials
8151	Generate a temporary URL .
8152	Quote a value .
8153	Fetches a list of containers .
8154	Get a client .
8155	AES256 encryption function .
8156	Decrypt data using AES256 CBC .
8157	Upload a directory structure .
8158	Put an account
8159	Put a container
8160	Build the manifest body .
8161	Create a new container
8162	Get a temporary url
8163	Display information about Transifex
8164	Print help for a command .
8165	Return True if data is empty .
8166	Encrypt text using AES256CBC .
8167	Get the status of a github repository .
8168	Get a specific pull request
8169	Get list of pull requests .
8170	Write your forwards methods here .
8171	Returns list of slider items
8172	Render the hero slider list .
8173	Acquire a read lock .
8174	Release a read lock .
8175	Acquire a lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task by task_id .
8179	Return a list of tasks .
8180	Convert the object to a dictionary .
8181	Create task from dict .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the backend .
8186	Create an index .
8187	Create an elasticsearch mapping
8188	JSON encoder function .
8189	Write items to writer .
8190	Add a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Yields all items in the store
8193	Validate the arguments .
8194	Parse the archive arguments .
8195	Perform a job .
8196	Schedule a job task .
8197	Cancel a job task .
8198	Run the listener
8199	Listen for new jobs .
8200	Schedule the event loop .
8201	Schedule a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the arguments for a job .
8206	Return the contents of a secret
8207	Register view .
8208	Register a view .
8209	Wrapper for Django s reverse_action .
8210	Get view name .
8211	Get the version from VERSION .
8212	Resolve a key to an alias .
8213	Determine the engine for a URL .
8214	Parses a path into its database and schema .
8215	Return database configuration from url .
8216	Parse a database URL .
8217	Create a new user .
8218	List all users .
8219	Create a new password .
8220	Add a field to the detail view .
8221	Parses a boolean value .
8222	Parse a string into an integer .
8223	Return the parser for the given typ .
8224	Get django settings .
8225	Create a model from a model .
8226	Encode string to base64 .
8227	Create field from dict .
8228	Create a validator class from a dict .
8229	Computes the cartesian product of a list of parameters .
8230	Finds all unique points in a list of parameters .
8231	Change the kwargs for logging .
8232	Decorator for logging .
8233	Create dirs for given filename .
8234	Return a list of strings .
8235	Rename a log file .
8236	Initialize the logger .
8237	Extract variables from a trajectory .
8238	Show progress bar .
8239	Check and replace the command line arguments .
8240	Convert a parser to a string .
8241	Find all options in a parser .
8242	Find the keys of the multiprocessing dictionary .
8243	Check log configuration .
8244	Handle the log file .
8245	Recursively handle log files .
8246	Create logging handlers and tools .
8247	Clean up resources .
8248	Start the stdout .
8249	Write to stream .
8250	Return True if two results are equal .
8251	Test if two Parameters are equal .
8252	Decorator to run a function .
8253	Mark a function as deprecated .
8254	Decorator to specify mutually exclusive parameters .
8255	Deprecated decorator .
8256	Decorator for retrying a function .
8257	Decorator to add a prefix to a class .
8258	Add parameters to traj .
8259	Run the network .
8260	Calculate Euler evolution .
8261	Add parameters to the trajectory .
8262	Computes the difference between two values .
8263	Create a storage service .
8264	Create a storage service .
8265	Add parameters to the trajectory .
8266	Calculate the difference between two values .
8267	Compact an HDF5 file .
8268	Return True if all parameters in a group are in a group .
8269	Build the model equation dictionary .
8270	Pre - build the model .
8271	Build the model .
8272	Build the network .
8273	Run pre - build method .
8274	Build the graph .
8275	Add parameters to the trajectory .
8276	Compute the factor of a spike resampling .
8277	Compute mean fano factor .
8278	Calculate the mean Fano factor for all environments .
8279	Add monitors to the network .
8280	Add monitors to the network
8281	Create the path to the plot folder .
8282	Plot a result .
8283	Print the graphs of the spike monitor
8284	Analyse the network .
8285	Get the batch number
8286	Launch a batch of experiments .
8287	Return node vars .
8288	Return the wrapped function .
8289	Rename the object .
8290	Sets the details for this entry .
8291	Convert a node to a pypet message .
8292	Remove a sub - tree from the tree .
8293	Deletes the given node .
8294	Remove a node or leaf node .
8295	Removes all nodes under the given branch .
8296	Translate a shortcut .
8297	Add a prefix to the root node .
8298	Determine the type of the tree .
8299	Create a generic node .
8300	Add a node to the tree .
8301	Create a link for an act_node .
8302	Check if the names are valid .
8303	Create a group node .
8304	Create a parameter or result .
8305	Sets the details for a specific instance .
8306	Iterate over the nodes of the given node .
8307	Create an iterator for the children of a node .
8308	Perform a breadth - first search on the given node .
8309	Fast search for node .
8310	Search for a node in the tree .
8311	Backward search .
8312	Return the node s children .
8313	Add a group from the storage .
8314	Add a group from the storage .
8315	Returns a list of directory names .
8316	Return a debug representation of the tree .
8317	Return the parent of this node .
8318	Add a group
8319	Add a link .
8320	Remove a link .
8321	Add a leaf group .
8322	Remove the node from the parent .
8323	Remove a child from the group .
8324	Determine if the object contains an item .
8325	Return the default value for the given file name .
8326	Return child objects .
8327	Get the groups
8328	Retrieves the list of all leaves .
8329	Get the list of links .
8330	Store a child in the group .
8331	Store this trajectory in the storage .
8332	Load a child by name .
8333	Load this trajectory .
8334	Add a parameter group .
8335	Add a parameter
8336	Adds a result group .
8337	Add a result .
8338	Adds a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a config group .
8342	Evaluates the maximum fitness .
8343	Add a commit variable to the config .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Convert a flat dictionary into a nested dictionary .
8347	Print a progress bar .
8348	Get the argument specification of a function .
8349	Get kwargs from kwargs .
8350	Formats a timestamp .
8351	Connect to a remote host .
8352	Create all directories of the given path .
8353	Reset the timer .
8354	Get the remaining time .
8355	Convert to dict .
8356	Remove key from annotations .
8357	Convert annotation to string .
8358	Make an ordered result .
8359	Convert a result to a shared object .
8360	Create a shared data object .
8361	Store request data .
8362	Get the data node .
8363	Check if the item supports it .
8364	Create shared data .
8365	Manually manipulate the results of a multiprocess .
8366	Lock a lock .
8367	Send a shutdown signal .
8368	Terminate the socket .
8369	Start the client .
8370	Send a request and return the response .
8371	Acquire the lock .
8372	Listen for incoming requests .
8373	Put data into the server .
8374	Check if the process is running .
8375	Handle incoming data .
8376	Run the thread .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Stores the given arguments .
8380	Store a message in the store .
8381	Store references in the database .
8382	Decorator to parse the configuration .
8383	Collect options from a section .
8384	Parse the config from the config file .
8385	Interpret the config file
8386	Add parameters from the configuration file .
8387	Convert a rule number to a binary array .
8388	Create an initial state .
8389	Plot a pattern .
8390	Calculate cellular automaton pattern .
8391	Test for cellular - pattern .
8392	Signal that the node has been updated .
8393	The overview group .
8394	Loads data from the system .
8395	Stores information about the given object .
8396	Load messages from servc
8397	Helper method to check the properties of the config .
8398	Stores messages from an iterable
8399	Synchronously close the HDF5 file .
8400	Extracts information from the given arguments .
8401	Backup a trajectory .
8402	Reads an output row from TRJ .
8403	Prepare a traj .
8404	Load metadata for a traj .
8405	Load a sub - branch .
8406	Raise an exception if the current trajectory version matches the given version .
8407	Fill the run table for the given traj .
8408	Load the experiment from the overview .
8409	Store the experiments in the overview group .
8410	Create the table overview tables .
8411	Stores a Trajectory .
8412	Stores a sub - branch into the hierarchy .
8413	Create a leaf node .
8414	Helper function to load the nodes of the tree .
8415	Stores the data in the HDF5 file .
8416	This method is used to store the result table entry in the table .
8417	Get or create a table .
8418	Get a node by its name .
8419	Sets the attributes to recall .
8420	Recall the values of the native type .
8421	Add or modify or modify row .
8422	Tries to insert into a row
8423	Extracts the contents of an item into a dictionary .
8424	Truncate string to max_length
8425	If parent_hdf5_group does not exist create a new hdf5 group .
8426	Create a new hdf5 group .
8427	Store v_with_annotations attribute in node
8428	Load the annotations from the node .
8429	Stores a traj group .
8430	Loads a group .
8431	Load all of the annotations of the trajnode .
8432	Add data_dict to flags_dict .
8433	Add a summary comment to the overview table .
8434	Add summary information to the group .
8435	Internal helper to store data from a dictionary .
8436	Internal helper to store a single parameter or result .
8437	Writes data to shared array .
8438	Write a shared table .
8439	Writes a dictionary into a table .
8440	Write to pandas data .
8441	Write data into other array .
8442	Write data into HDF5 group .
8443	Delete a link .
8444	Recursive method for all delete_parameters .
8445	Write data into table .
8446	Create a description dictionary for the table .
8447	Convert a single value to a table column .
8448	Returns the size of each string in a list of strings .
8449	Recursively load data into dictionary .
8450	Read the list of dictionaries .
8451	Read shared data from a shared node .
8452	Read a table or group .
8453	Read an array from the storage .
8454	Loads a trajectory .
8455	Make a set name from an integer index .
8456	Set properties of the object .
8457	Add dynamic imports .
8458	Set the name of the run .
8459	Iterate over the trajectory .
8460	Shrink the trajectories .
8461	Add a parameter to the trajectory .
8462	Create a preset .
8463	Prepares the experiment .
8464	Get a value from the run hierarchy .
8465	Returns True if the run has completed .
8466	Remove expanded parameters from the list .
8467	Copy parameters from the given node to the file .
8468	Explores the parameters in the trajectory .
8469	Update the run information .
8470	Add information about a single run .
8471	Lock all parameters
8472	Lock all derived parameters
8473	Finalize the run .
8474	Loads the skeleton .
8475	Lazily load the module .
8476	Store a backup file .
8477	Make the list of wildcards .
8478	Merge multiple trajectories into the current one .
8479	Merge a single trajectory into a single run .
8480	Rename a full name .
8481	Merge derived parameters from another trajectory .
8482	Merge links from another Trajectory .
8483	Merge config files into this object .
8484	Merge another Trajectory .
8485	Merge results from other_trajectory into the rename dictionary .
8486	Migrate to storage service
8487	Save the trajectory to the storage .
8488	Restore default values .
8489	Set the variable access to the given index .
8490	Make a single run
8491	Return a list of run names .
8492	Returns the run information .
8493	Find the index of each parameter in a list of parameters .
8494	Starts a single run .
8495	Finalize the run .
8496	Set the start time of the run .
8497	Sets the time to finish .
8498	Construct an instance .
8499	Convert parameter dictionaries into dictionaries .
8500	Finalize the run .
8501	Returns the configuration dictionary .
8502	Return the results list .
8503	Store an item in the storage .
8504	Fetch items from storage .
8505	Remove items from the iterator .
8506	Deletes the list of links from the given iterator .
8507	Remove all children of this node .
8508	Delete items from the trajectory .
8509	Initializes the storage service for a single run .
8510	Wrapper for _frozen_pool_single_run .
8511	Configure the pool .
8512	Configure the frozen pool .
8513	Process a single run .
8514	Configure frozen scoop .
8515	Runs a single run .
8516	Configure the logging system .
8517	Configure niceness .
8518	Handle SIGINT .
8519	Run a single run .
8520	Wrap sigint handling
8521	Load a class .
8522	Create a class by name .
8523	Return the length of the parameter
8524	Return a string representation of the result .
8525	Test if two values are equal .
8526	Get parameter range .
8527	Explores the parameter .
8528	Expand the parameter into the list .
8529	Perform some sanity checks .
8530	Store the data in an object table .
8531	Load the parameter from a dictionary .
8532	Load the parameter from a dictionary .
8533	Check if two values are equal .
8534	Check if the data is a supported matrix .
8535	Serialize a sparse matrix .
8536	Build the names for the variable .
8537	Construct a sparse matrix from a data list .
8538	Load the data from a dictionary .
8539	Serialize the object into a dictionary .
8540	Load the parameter from a pickle file .
8541	Convert a key to a key .
8542	Return the value as a string .
8543	Convert to dict .
8544	Convenience method to set positional arguments .
8545	Get a value from the result .
8546	Set a single value .
8547	Return True if the item supports it .
8548	Serialize the result into a dictionary .
8549	Load data from a dictionary .
8550	Set a single result .
8551	Store the result as a dictionary .
8552	Load the parameter from a dictionary .
8553	Merge all files
8554	Upload a file to Sftp
8555	Download a file from SFTP
8556	Create a session .
8557	Merge trajectories .
8558	Start the jobs .
8559	Calculates the product of two reals
8560	Run Euler integration
8561	Postprocessing for firing rates .
8562	Add parameters to the cortex .
8563	Add an exploration of I and tau_ref .
8564	Execute the pre - run on the network
8565	Execute a single network run
8566	Extract all the sub - runs in the given trajectory .
8567	Execute a single network run
8568	Add parameters to the network .
8569	Pre - run the network .
8570	Run the network .
8571	Run the network .
8572	Create a filename for the given trajectory .
8573	Return the next item in the chain .
8574	Merge all trajectories in a folder .
8575	Handle SIGINT .
8576	Load config from file .
8577	Connect to ecobee .
8578	Request access token from ecobee .
8579	Refresh access token .
8580	Get thermostats .
8581	Write tokens to config file .
8582	Set the HVAC mode .
8583	Set the fan minimum on time
8584	Set the hold temperature .
8585	Set the climate hold .
8586	Delete a vacation
8587	Resume a program .
8588	Send a message to a thermostat
8589	Set the humidity of a thermostat
8590	Generate a random delay for SELECTING .
8591	Generate a new timeout
8592	Generate a timeout for a lease
8593	Generate a new lease time .
8594	Return self as a dict .
8595	Reset client attributes .
8596	Get the timeout for a given state and function .
8597	Set a timeout for a state .
8598	Send a discover packet .
8599	Select an offer from the list .
8600	Send a request to the FSM .
8601	Set the timeouts for the lease .
8602	Process received packet .
8603	Process received NAK packet
8604	Called when the selector is ready .
8605	Set up bound state
8606	Renews the lease .
8607	Re - bind the lease .
8608	End the lease .
8609	Initiate an error .
8610	Called when a response has been received .
8611	Called when a request has been received or not .
8612	Raise RENEWING .
8613	Raise REBINDING .
8614	Handle an OFFER packet .
8615	Process an ACK packet .
8616	Process a NAK packet .
8617	Handle an ACK .
8618	Process a NAK packet .
8619	Handle an ACK .
8620	Process a NAK packet .
8621	Called when the client is renewed .
8622	Set a value in this query .
8623	Returns a copy of this query .
8624	Returns a copy of this query .
8625	Get status from server .
8626	Create the output .
8627	Main entry point .
8628	Validate a message
8629	Read tdms file and return channel names and data .
8630	Add deformation to channels .
8631	Convert tdms file to FCS file
8632	Compare two files .
8633	Create a patch .
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if a file exists in the patch .
8637	Backup a single file
8638	Add a file to the patch .
8639	Run the command .
8640	Create the directory if it doesn t exist .
8641	Copy this directory to a directory .
8642	Link a file
8643	Copies the file to the destination
8644	Return the directory of the file .
8645	Backup a file to a new location .
8646	Refresh the current patch .
8647	Unapplies the specified patch .
8648	Unapply the top patch .
8649	Unapply all applied patches .
8650	Apply a patch to the series .
8651	Apply the next patch to the series .
8652	Apply all patches .
8653	Read the series file
8654	Save patchlines to file .
8655	Add a patch to the document .
8656	Insert a list of patches into self . patch2line
8657	Add a list of patches .
8658	Remove a patch .
8659	Return all patches after a given patch .
8660	Returns the patches before the given patch .
8661	Returns a list of patches from the given patch .
8662	Replace a patch .
8663	Create the project .
8664	Raise DBError if version is not supported .
8665	Add this ArgumentGroup to the given parser .
8666	Add this command to an argument parser .
8667	Add this parser to subparsers .
8668	Set the arguments for subparsers .
8669	Add the subparser to the given parser .
8670	Check if a file is in the patch
8671	Check if a file exists in the next patches .
8672	Revert a file to the current working directory .
8673	Import a single patch file .
8674	Import Quilt patches .
8675	Add a way .
8676	Generate node ids from node_ids
8677	Add a node to the graph .
8678	Build a Route object from a relation .
8679	Create route name .
8680	Get the agency ID for a relation .
8681	Process all public transport relations .
8682	Add a relationship
8683	Create dummy data .
8684	Patch agency objects .
8685	Generate dummy trips for a trip .
8686	Write data to a zip file .
8687	Writes all files to the specified destination .
8688	Build agency .
8689	Extract stops from a relation .
8690	Build a Shape object from a relation .
8691	Returns a list of supported versions .
8692	Send an APDU .
8693	Attempts to authenticate devices .
8694	Register a new device .
8695	Authenticate with U2F .
8696	Register a U2F device .
8697	Convert unicode strings to strings .
8698	Wrap a function to return a partial .
8699	Wrap a class .
8700	Check if filepath matches only_blame_patterns .
8701	Convert an email address to an email address .
8702	Return the entry corresponding to the given entry .
8703	Convert markdown to reST .
8704	Run Flawless web server .
8705	Records an error .
8706	Download an image from a URL .
8707	Convert image string to Image object .
8708	Decorator to validate a function .
8709	Check if image is smaller than size .
8710	Raise an ImageSizeError if width is greater than width .
8711	Check that the height of the image is big enough .
8712	Parse a category from an item .
8713	Parse the value as an integer .
8714	Iterate over the items in the document .
8715	Save an error .
8716	Parse the contents of the file
8717	Parse an item into a dictionary .
8718	Get an instance of the model .
8719	Save an item
8720	Download a file from url to dest
8721	Load data from a file .
8722	Get items from the CSV file .
8723	Set whether or not the sandbox can access .
8724	Run a command .
8725	Add multiple files to the container .
8726	Add a file to the sandbox .
8727	Get list of enrollments for a given course .
8728	Gets a list of enrollments for a particular course .
8729	Get all enrollments for a section .
8730	Gets a list of enrollments for a given section .
8731	Get a list of enrollments for a user .
8732	Enrollment for given user .
8733	Get all roles in an account .
8734	Gets a list of roles for an account .
8735	Returns the effective course roles in an account .
8736	Get a single role .
8737	Gets a role by its SIS identifier .
8738	Get a single course .
8739	Gets a course by its ssis id .
8740	Get all courses in an account .
8741	Gets a list of courses in a given account .
8742	Retrieve a list of courses in an account .
8743	Gets a list of courses in a particular account .
8744	Get a list of courses for the given regid .
8745	Create a new course .
8746	Update a course s id .
8747	Get activity for an account .
8748	Get grades for an account .
8749	Get statistics for an account .
8750	Get activity for a given sis course id .
8751	Get a list of assignments by sis_course_id .
8752	Returns a list of student summaries for the given SIS course id .
8753	Get the student activity for the specified user and sis_user_id .
8754	Get student messaging for a specific user .
8755	List all external tools in an account .
8756	Get all external tools in course
8757	Create an external tool
8758	Update an external tool .
8759	Delete an external tool .
8760	Check that object has all required parameters .
8761	Get a user profile .
8762	Get list of users for course .
8763	Gets a list of users for a given SIS course id .
8764	Create a new user .
8765	Get user s logins .
8766	Update a user login .
8767	Parse the next page .
8768	Get a resource URL .
8769	Wrapper for _get_resource .
8770	Get a resource .
8771	Send a PUT request to the API .
8772	Generic POST method .
8773	Delete a resource .
8774	Get a list of canvas admins .
8775	Create a new admin .
8776	Creates an admin with the given user and role .
8777	Delete an admin .
8778	Deletes an admin from an SIS account .
8779	Create a grading standard for course .
8780	Get a specific section .
8781	Retrieve a section by its ID .
8782	Get all sections in a course .
8783	Gets a list of sections in a given course .
8784	Get a list of sections with students in course .
8785	Gets a list of sections with the given sis_id .
8786	Create a section .
8787	Update a section .
8788	Return a list of Quiz objects .
8789	Get a single account .
8790	Get list of sub accounts of given account .
8791	Update an existing account .
8792	Update the SIS account s ID .
8793	Get SSO settings .
8794	Update an existing authorization settings .
8795	Get a term by its sis_term_id
8796	Import data from a CSV string .
8797	Import data from SIS .
8798	Gets the status of an import .
8799	Build the zip archive .
8800	Return a list of assignments for the given course .
8801	Update an existing assignment .
8802	Get all available reports for an account .
8803	Get a list of reports by type and report type .
8804	Create a report .
8805	Create a course provisioning report .
8806	Create a new course sIS export report .
8807	Create an unused courses report .
8808	Get the report data .
8809	Get report status .
8810	Deletes a report .
8811	Move all detection objects in a label .
8812	Flip detections by w
8813	Convert an object to a dict .
8814	Get config from inplace settings .
8815	Return empty value .
8816	Parse args and kwargs .
8817	Create one or more metrics .
8818	Setup logging .
8819	Configure the collector .
8820	Add metrics to the registry .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle metrics request .
8824	Query Wolfram .
8825	Fix Python 3 . 3 . 3 . 3 . 7 .
8826	Make a query and return the result .
8827	Return information about the pod .
8828	Iterate over the results pod
8829	Encode data as JSON .
8830	Make an API call .
8831	Make a GET request .
8832	Make a DELETE request .
8833	Send a PUT request .
8834	Make a POST request .
8835	Process a single query .
8836	Group sentences into sentences .
8837	Disambiguate a PDF file .
8838	Disambiguate a query .
8839	Segment text .
8840	Get the language of text .
8841	Get a concept by conceptId .
8842	Fit the model .
8843	Calculate the score of a new feature .
8844	Fit the MDR algorithm .
8845	Fit the model and predict the result .
8846	Returns the accuracy score for the model .
8847	Compute the feature map .
8848	Transform features according to feature_map .
8849	Calculate the score between features and targets .
8850	Wrapper for MLPredict .
8851	Generates n - way models for a model .
8852	Plots a grid of variables for a model .
8853	Return a dictionary of configuration values .
8854	Get a value from the config
8855	Return a vector representation of members .
8856	Return a vector of members .
8857	Evaluate the given file .
8858	Evaluates the given stream from the given stream .
8859	Evaluate a string .
8860	Bootstrap base module .
8861	Compile the given script into the console .
8862	Create a multi - function from a dispatch function .
8863	Add a new method to a map .
8864	Add a new method .
8865	Return a cached method for the given key .
8866	Remove method from mmap .
8867	Remove a method by key .
8868	Check if a variable is a macro .
8869	Return the line and column of a LLO form .
8870	Decorator for parsing form .
8871	Raise an exception if the node does not appear in the tail .
8872	Recursively visit the given node .
8873	Resolve a bare symbol .
8874	Resolve a form .
8875	Parse an AST .
8876	Check if a variable is shadowed .
8877	Put a new symbol into the scope .
8878	Return a string representation of a list of entries .
8879	String representation of iterable .
8880	Return a string representation of an object .
8881	Fallback for Python objects .
8882	Replace node attributes with location information .
8883	Compile a form into a compiled module .
8884	Incrementally compiles the module .
8885	Compiles a single Python module .
8886	Compile python code into Python code .
8887	Return a sequence of elements from an iterable .
8888	Replace characters in a string .
8889	Remove underscores from a string .
8890	Return a Fraction instance .
8891	Get a logging handler .
8892	Create a map from kvs .
8893	Partition a collection into n elements .
8894	Wrap a function with line numbers and columns .
8895	Read a namespace from the reader .
8896	Read a collection from the reader .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a JSON - delimited dict .
8901	Read a string from the stream .
8902	Read a symbol from the context .
8903	Read a keyword .
8904	Read metadata from the comment stream .
8905	Read a function .
8906	Read a delimited list .
8907	Expand unquoted form .
8908	Expand a form .
8909	Read a delimoted form .
8910	Read an unquoted comment .
8911	Read a Deref form .
8912	Read a single character .
8913	Read a regex pattern from the context .
8914	Read a reader .
8915	Read the next comment .
8916	Read the next token .
8917	Yield expressions from a stream .
8918	Read from a string .
8919	Read the contents of a file .
8920	Update the current location .
8921	Push back to the stack .
8922	Return the next token from the stream .
8923	Create a bytecode .
8924	Return a list of bytecode objects for the given cache .
8925	Return the path to the cache file .
8926	Called when the import hook exits .
8927	Find a module in the given path .
8928	Execute a cached module .
8929	Execute the given module .
8930	Execute a module .
8931	Create symbol .
8932	Complete the given text .
8933	Get or create a PMap .
8934	Return a Keyword instance .
8935	Chain a list of generated py ASTs into a list of nodes .
8936	Load an attribute .
8937	A simple AST generator .
8938	Return the AST of a collection .
8939	Add location information to py_ast with environment information .
8940	Decorator to wrap a function into an ast .
8941	Decorator to wrap a function with the given location and location .
8942	Return True if the value is a dynamic variable .
8943	Return True if the variable is defined in its meta .
8944	Convert an expression to an AST .
8945	Convert an expression into a function definition .
8946	Check if def is on def .
8947	Convert a DO node to a Python AST .
8948	Return a fully - qualified name .
8949	Convert fn arguments to ast . ast
8950	Convert a single_arity function to a Python AST .
8951	Convert a function node to a Python AST .
8952	Convert a function node to a Python AST .
8953	Convert an if body to a Python AST .
8954	Convert an if node to a Python AST .
8955	Convert an Invoke node to a Python AST .
8956	Convert a quote node to a Python AST .
8957	Convert recur node to Python AST .
8958	Convert a recur node to a Python AST .
8959	Generate a setbang node .
8960	Convert a THROW node to a Python AST .
8961	Convert a Try node to a Python AST .
8962	Convert local node to ast
8963	Convert a variable name to an AST .
8964	Convert a symbol to a Python AST .
8965	Convert an interop property to a Python AST .
8966	Convert a maybeclass node to an ast node .
8967	Convert a maybeHostForm node to a Python AST .
8968	Convert a constant value to a Python AST .
8969	Convert list literals to Python AST .
8970	Convert lisp AST to Python AST .
8971	Yield all imported imports .
8972	Create an ImportFrom for the From module .
8973	Create an ast . Assign node .
8974	Create a set from an iterable of members .
8975	Create a set of members .
8976	Return an ast . ExceptHandler node .
8977	Return node s value .
8978	Return an astroid . FunctionDef node .
8979	Return an astroid . While node .
8980	Return an astroid . Try node .
8981	Create a new module .
8982	Return the first element of an object .
8983	Return the rest of an object .
8984	Return the rest of the given coll .
8985	Find the nth next in a collection .
8986	Concatenate o into sequence .
8987	Convert an object to a sequence .
8988	Concatenate multiple sequences .
8989	Create an associative representation of an object .
8990	Return the conjugate of a collection .
8991	Partial decorator .
8992	Dereferenced object .
8993	Test if two objects are equal .
8994	Divide x and y .
8995	Sort a collection by f .
8996	Returns True if the given key is in the coll .
8997	Return the value of an entry in the given dictionary .
8998	Convert an object to a Lisp representation .
8999	Convert an object to a Python object .
9000	Return a string representation of an object .
9001	Collect Python variadic arguments .
9002	Decorator for _TrampolineArgs .
9003	Decorator to set a function s attributes .
9004	Decorate a function with its meta information .
9005	Decorator to mark a function as a function .
9006	Resolve an alias symbol .
9007	Resolve a variable by its alias .
9008	Add generated python code .
9009	Initialize a dynamic variable .
9010	Interns a variable with the given name .
9011	Intern an unbound variable .
9012	Find a variable in the namespace
9013	Find the variable corresponding to the given namespace .
9014	Finds a variable by its qualified name .
9015	Add a default import statement .
9016	Add an alias .
9017	Internally intern a symbol .
9018	Internally associates a symbol with a new_var .
9019	Find the variable corresponding to the symbol .
9020	Add an import statement .
9021	Return the imported module .
9022	Add a reference to the symbol .
9023	Return the reference for the symbol .
9024	Given a list of symbols return all the corresponding references .
9025	Refer to another namespace .
9026	Get or create a namespace .
9027	Get a namespace .
9028	Get a namespace by its name .
9029	Remove a namespace .
9030	Create a completion matcher for completion .
9031	Iterate over aliases .
9032	Return an iterator over all the imported modules .
9033	Return a list of interns .
9034	Complete references .
9035	Completes all aliases in text .
9036	The arguments of the function .
9037	Convert a list of members into a list .
9038	Create a list of members .
9039	Change the style of a scalar .
9040	Decrypt a JWE token .
9041	Encrypts a JSON object .
9042	Delete an item from the cache
9043	Convert the selector to a python object .
9044	Close the stream .
9045	Parse a fiql string into an expression .
9046	Dump ndb_model to filepath .
9047	JSON - serializer for objects .
9048	Decode a date into a datetime object .
9049	JSON decoder .
9050	Default encoder for objects .
9051	Validate release version
9052	Generate a changelog .
9053	Return a list of strongly connected components .
9054	Robustly topological sort the graph .
9055	Set parent expression
9056	Get parent expression
9057	Adds an operator to the stack .
9058	Add an element to the working fragment .
9059	Creates and returns a new expression .
9060	Create a new expression .
9061	Decorator to log a function .
9062	Parse incoming message into a list of dicts .
9063	Convert a list of tuples into an OrderedDict .
9064	Return the first message that matches the given command .
9065	Prepare message for sending .
9066	Flush all incoming messages .
9067	Enable or disable a slide .
9068	Saves the scanning template .
9069	Load a configuration file .
9070	Get information about the device .
9071	r incs a file in the specified range
9072	Locate the package . json file .
9073	Parse the package . json file .
9074	Handle an API error with a JSON response .
9075	Validate yourls response .
9076	homogenize two waves .
9077	Interpolate the dep vector .
9078	Determine the indep vector between two wavelengths .
9079	Verify that two waveforms are compatible .
9080	Load the systemjs manifest .
9081	Return a namedtuple containing the parameters of the module .
9082	Runs a trace using pexdoc .
9083	Shorten a URL .
9084	expand short url
9085	Retrieve short url statistics .
9086	Get statistics for the current user .
9087	Get DB stats .
9088	r Print a command to pypkg .
9089	Emit a command and print it .
9090	Logs a message to stdout .
9091	Decorator to cache a method .
9092	Split an iterable into chunks of size chunksize .
9093	Decorator for chunking an iterable .
9094	Flatten an iterable .
9095	Print a SIGINT signal .
9096	Pretty - print a table .
9097	Create a dummy type .
9098	Return an instance from a human - readable string .
9099	MyLS client .
9100	Trace the waveform module .
9101	Print the dependencies of the requirements . json file .
9102	Add a common prefix to the given plist .
9103	Add multiple Python versions to the list .
9104	Convert comparison operators to string .
9105	Yield chunks of noise
9106	Parses a chunk of data .
9107	r Write a touchstone file .
9108	Return the waveform bound to indep_min and indep_max .
9109	Build the unit string .
9110	Create a new operation .
9111	Calculate the running area .
9112	Validate minimum and maximum values .
9113	r Compute the angle of the waveform .
9114	r Calculate the cosine of the waveform .
9115	r Return the sine of the waveform .
9116	r Return the hyperbolic tangent of waveform .
9117	r Return the average of the waveform .
9118	r Calculate dB from dB .
9119	r Return the derivative of the waveform .
9120	r Compute the inverse of the Fourier transform
9121	r Compute the Fourier transform .
9122	r Compute the Fourier transform of a waveform .
9123	r Compute the Fourier transform .
9124	r Return the index of the input waveform .
9125	r Compute the imaginary part of the waveform .
9126	r Compute the inverse Fourier transform .
9127	r Compute the phase of the waveform .
9128	r Compute the real of the waveform .
9129	r Return the integral of the waveform .
9130	r Return the delay of the wave .
9131	r Logarithmic wave function .
9132	r Calculate the Naverage of a waveform .
9133	r Return the integral of a waveform .
9134	r Return the maximum value of a waveform .
9135	r Return the minimum value of a waveform .
9136	r Calculate the phase of the wave .
9137	r Round a wave .
9138	r Square root function
9139	r Return a new waveform .
9140	r Convert waveform to complex type
9141	r Convert a waveform to float .
9142	r Convert a waveform to integer .
9143	r Return the w value of the wave .
9144	Return a list of JSPM objects for the given path .
9145	Parse a long description .
9146	Build an expression from a list of tokens .
9147	Return the next item after pos .
9148	Split an expression into a list of tuples .
9149	Return pair of delimited delimiters .
9150	Parse an expression .
9151	Remove consecutive delimiters .
9152	Split text into individual parts .
9153	Convert a number to a notation tuple .
9154	r Return the number without exponent .
9155	r Convert a number to a string .
9156	r Convert a number to a float .
9157	r Return the fraction of the decimal number .
9158	r Calculate pengant number .
9159	r Returns the power of a power .
9160	r Calculates the math suffix for peng .
9161	r Remove extra delimiters from an expression .
9162	Convert a number to a scientific string .
9163	Convert a number to a tuple .
9164	Find the sourcemap comment in a file .
9165	Determine if the app needs to be loaded .
9166	Bundle the app
9167	Return the trace - dependencies of an app .
9168	Determine if the contents of the dependency tree matches the given hashes .
9169	Format an arg into a string .
9170	Parse a docstring .
9171	Return a list of valid functions .
9172	Import a context .
9173	Split a line .
9174	Look for init commands .
9175	Return help text for builtin functions .
9176	Find a function in the context .
9177	List functions in a directory .
9178	Check if argument is a flag .
9179	Process the given arguments .
9180	Extract the value from the remaining arguments .
9181	Invoke a single function
9182	Parse a line of commands .
9183	Parse a string .
9184	Parse a parameter .
9185	Parse a return line .
9186	Classify a section .
9187	Classify a line .
9188	Join a list of lines .
9189	Wraps the docstring and returns it .
9190	Convert value to type .
9191	Convert from binary to binary .
9192	Get the size of a type
9193	Format value to type .
9194	Validate the given type .
9195	Checks if the given type name is a known type .
9196	Split a type name into a tuple .
9197	Instantiate a type .
9198	Gets the registered type .
9199	Returns True if the given format is a known format .
9200	Inject a type into the registry .
9201	Load types from a module .
9202	Determine if the spec has been filled
9203	Add a parameter .
9204	Declare a typed return value .
9205	Custom returnvalue decorator
9206	Convert a short - name to a full name .
9207	Return the type of a parameter .
9208	Return a signature string .
9209	Format the return value .
9210	Convert the positional argument to the corresponding value .
9211	Check if positional arguments are passed .
9212	Convert an argument to its type .
9213	Format the exception message .
9214	Convert this exception into a dictionary .
9215	Check and execute a function .
9216	Parse validators .
9217	Find all objects in a container .
9218	Return a context object for a given module .
9219	Get the help text for a function .
9220	Decorator to add a parameter to a function .
9221	Decorator to annotate a function .
9222	Decorator to annotate a function .
9223	Mark a class as context .
9224	Mark a function as annotated .
9225	Decorator to mark a function as annotated .
9226	Return a short description of a function .
9227	Load the cront modules .
9228	Install crontab .
9229	Print all scheduled tasks .
9230	Uninstall the crontab .
9231	Create a file from uri .
9232	Load project configs .
9233	Save project config .
9234	Define a singleton .
9235	Return all the projects that depend on this project .
9236	Decorator to run the project .
9237	Initialize the project .
9238	Set an item to a new value .
9239	Set an attribute .
9240	Create an instance from an iterable .
9241	Returns a function that sets the state of the state .
9242	Creates a setter that sets the given values to the given values .
9243	Returns a function that modify the state .
9244	Return a function that collects the first n arguments .
9245	Wrapper for function .
9246	Apply a function to the current state .
9247	Return a new fold .
9248	Convert Fold to a list of elements .
9249	Apply a function over the given state .
9250	Set the value of the field .
9251	Iterate over an iterable .
9252	The kind of this object .
9253	Main function .
9254	Subtracts a vector from another vector .
9255	Handle input .
9256	Advance robots .
9257	End the game .
9258	Ask the user for a player .
9259	Play a game of naughts and crosses against the computer .
9260	Make a move at the given position .
9261	The winner of this board if one exists .
9262	Yields possible PINins in the board .
9263	Process item .
9264	Open a new spider .
9265	Uploads the current object to S3 .
9266	Create a fileobj containing the JSON data .
9267	Get account state .
9268	Get asset state .
9269	Get information about the block .
9270	Get the block hash .
9271	Get the system fee for a block .
9272	Get the state of a contract .
9273	Get the raw transaction .
9274	Use this method to get a stored data stored in the database .
9275	Use this method to get the out of a transaction .
9276	Send an invocation to a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Call a JSON - RPC method .
9282	Check if a string is a hash256 hash .
9283	Is a hash160?
9284	Encode the parameters of the Invocation params .
9285	Decode an invocation result into a new stack .
9286	Decorator to mark a function as a function .
9287	Snap a datetime to a specific timezone .
9288	Applies the apply_to to the specified timezone .
9289	Renders the template to a file .
9290	Build the barcode .
9291	Calculate the checksum .
9292	Renders the given code .
9293	Connect to KVS .
9294	Main entry point .
9295	Download a file from S3 .
9296	Uploads a file to S3
9297	Downsynchronize a section
9298	Print the contents of the S3 bucket .
9299	Parse an environment variable .
9300	Configure the server .
9301	Add an API key to the configuration .
9302	Generator for json content of folder
9303	Return a dictionary of schemas .
9304	Get the schema for this bucket .
9305	Return a RefResolver object for this schema .
9306	Validate an object against the schema .
9307	Get valid examples .
9308	Returns a list of invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of a OneDrive user .
9313	Get OneDrive object representing list of objects in a folder .
9314	Create a folder .
9315	Add comment message to a specified object .
9316	Convert or dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag and drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and then displays it
9324	Get a parameter from a tag .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components one pixel at a time
9331	delete all of the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update
9334	When dealing with a Top - level window position it absolute lower - right
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated with wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the item from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	called when adding a control to the window
9349	Re - parent a child control with the new wx_obj parent
9350	make multiple copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all modules in the rootpath .
9354	Return a list of children sub - components that are column headings
9355	Update the grid if rows and columns have been added or deleted
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	colod the data based on the column indexed by col
9359	Remove all rows and reset internal structures
9360	Called to create the control which must derive from wxControl .
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell . Returns True if changed
9363	Return True to allow the given key to start editing
9364	This will be called to let the editor do something with the first key
9365	Create a handler for a form tag .
9366	enable or disable menu items
9367	check if all menu items are enabled
9368	enable or disable top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Sets the object tag value
9373	Automatic markdown for tables .
9374	Return the appropriate documentation for an object .
9375	Mangle a signature .
9376	Import a module by fully qualified name .
9377	An autolink role .
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string or None if cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Sets the icon
9386	Display or hide the window optionally disabling all other windows
9387	Open read and eval the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	translate gui2py attribute name from python card legacy code
9393	Write content to the clipboard data can be either a string or a string or a string
9394	Return a list of tuples from a docstring .
9395	Add the object and all its children
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Convert the value into an absolute URL .
9401	Decorator to add an expression filter .
9402	Decorator to register a node filter .
9403	Assert that the current path matches the given path .
9404	Raises an AssertionError if the given path does not exist .
9405	Assert that the given path has the given path
9406	Assert that the given path has no current path .
9407	Select an option .
9408	Apply the filter to the expression .
9409	Get a webdriver instance .
9410	Return an xpath expression
9411	Returns True if the node matches the filters .
9412	Switches to a specific frame .
9413	Open an alert .
9414	Context manager for accepting a confirm dialog .
9415	Temporarily dismiss a confirm dialog .
9416	Context manager for accepting a prompt .
9417	dismiss the prompt .
9418	Save the page .
9419	Saves a screenshot .
9420	Reset server error .
9421	Check if the node matches the given value .
9422	Check if a field has been checked .
9423	Called when a field has no checked .
9424	Checks if the element has an unchecked field .
9425	Wrapper for HTML has_no_field .
9426	Assert that the query matches text .
9427	Assert that there are no text .
9428	Assert that a title matches the given title .
9429	Assert that a window has no title .
9430	Assert that the page has a title
9431	Assert that title has no title
9432	Find all matching criteria .
9433	Finds the first matching results
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for setting a property .
9438	Wraps a capybara function .
9439	Determine if an error should be caught .
9440	Compares the count of the query .
9441	Cache the results cache with the given size .
9442	Returns True if the given options are None otherwise .
9443	Build a failure message .
9444	Returns True if the given count matches the given criteria .
9445	Normalizes text .
9446	Normalize leading whitespace .
9447	Create a regular expression .
9448	Determine whether the path matches the expected path .
9449	Resize window to specified width and height .
9450	Start the application .
9451	Add a closure to the property .
9452	Set instance method .
9453	Declare class method .
9454	Triggers the traceback .
9455	Return object source string .
9456	Return the logger for the given instance .
9457	Set the logger .
9458	Send a request to the API
9459	List channels .
9460	List of users .
9461	Create a Slack message
9462	Translate a user from Slack .
9463	Send a Slack message .
9464	Receive a channel from the server .
9465	Run Slack .
9466	Run Slack client .
9467	Return the difference between two dictionaries .
9468	Colorize message .
9469	Invoked when a task starts .
9470	Invoked when a runner finishes .
9471	Called when the client is running .
9472	Called when a task is skipped .
9473	Convert a network prefix to an address mask .
9474	Check if value is empty .
9475	Add a model .
9476	Get a dictionary of values .
9477	Load data from a dictionary .
9478	Convert to dict .
9479	Parse config values .
9480	Parse the component state .
9481	Translate the configuration into a string .
9482	Load filters .
9483	Find the path to a YANG file .
9484	Convert a model to a dictionary .
9485	Return the difference between two containers .
9486	Perform an HTTP POST request .
9487	Build the authorization code URI .
9488	Get an access token
9489	Get query parameters from a URL .
9490	Return a de - query string .
9491	Build a full URL .
9492	Handle exception .
9493	Create a response object .
9494	Makes an error response .
9495	Make a JSON response .
9496	Returns an authorization code .
9497	Refresh an access token
9498	Get an access token .
9499	Gets an authorization code from the given uri .
9500	Try to get an OAuth 2 . 0 token from POST data .
9501	Returns an authorization object .
9502	Open an I2C device .
9503	Read a byte from the bus .
9504	Read a number of bytes from the bus .
9505	Read a byte from the bus .
9506	Write bytes to the bus .
9507	Write a byte to the bus .
9508	Write data to i2c device .
9509	Return the path to the CDN .
9510	Create a copy of this object .
9511	Create a local copy of this file .
9512	Create a remote copy .
9513	Construct a File object from a dictionary .
9514	Create a new file .
9515	Create a new file from a URL .
9516	Uploads a file and waits for it to disk .
9517	List of file CDN URLs .
9518	Construct a new group from a dictionary .
9519	Create group .
9520	Perform a rest request .
9521	Iterate over the UUIDs of the file .
9522	List API items .
9523	Print a progress bar .
9524	Make a request to the server .
9525	Gets the home mode status .
9526	List all cameras
9527	Retrieve information about one or more cameras .
9528	Retrieve a snapshot
9529	Disable a camera .
9530	Create a motion setting for a camera event .
9531	Saves parameters to MDParam
9532	Update the camera s motion settings .
9533	Check if the last li element is the last item of the list
9534	Iterate over a single list .
9535	Return the value of lvl in li .
9536	Get the vMerge element
9537	Returns the span of the cell as an integer .
9538	Return the TD element at the given index .
9539	Check if style element is false .
9540	Check if rpr is bold .
9541	Is italic?
9542	Check if rpr is underline
9543	Check if p is a title
9544	Generator for text run content .
9545	Get information about a relationship .
9546	Return document data as dictionary .
9547	Return the ordered list type
9548	Builds a list of lists .
9549	Builds a table row .
9550	Build a table element .
9551	Return the content of a tag .
9552	Remove all elements from a tree .
9553	Find a dataset and return its path .
9554	Load MNIST dataset .
9555	Load the CIFAR .
9556	Plot multiple images .
9557	Plot layers .
9558	Plot a grayscale image .
9559	Sample a batch of arrays .
9560	Transform a string into a list of words .
9561	Returns a batch of batches of the encoder .
9562	Predict sequence .
9563	Add conv weights .
9564	Encodes the input into a single numpy array .
9565	Decodes the input using theano algorithm .
9566	Find the output layer .
9567	Compute the autoencoder score .
9568	Predict the output of x .
9569	Predict the probability of x .
9570	Predict logit .
9571	Compute the mean value of the model .
9572	Create a batch of features and labels .
9573	Generate batched batches .
9574	Load the network from disk .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Yields output names matching patterns .
9578	Yields params matching patterns .
9579	Create a regressor from kwargs .
9580	A list of variables .
9581	Calculate accuracy .
9582	Run theano scan .
9583	Build an Activation .
9584	Generate a n - dimensional numpy array using a reservoir .
9585	Clear the losses .
9586	Iterate over the model .
9587	Return a list of monitors .
9588	Return a hash of the layers .
9589	Build the computation graph .
9590	The list of input layers .
9591	Returns a list of variables in the computation .
9592	Find a layer by its parameter .
9593	Compute the feed forward function .
9594	Predict the output of x .
9595	Calculate the classification score .
9596	Save the model to a file .
9597	Load a network from a file .
9598	Calculate the loss .
9599	Builds a list of updates based on the given parameters .
9600	The output size of the layer .
9601	Connects the input and outputs .
9602	Bind to the graph .
9603	Resolve shapes of layers .
9604	Resolve outputs .
9605	Logs information about the layer .
9606	Log the shape of all parameters .
9607	Format a string .
9608	Resolve layer shape .
9609	Find a parameter by its key .
9610	Add a bias parameter .
9611	Convert the form to a dictionary .
9612	Logarithmic variates .
9613	Compute the loggabor image
9614	Add a tier to this interval .
9615	Remove a tier by name .
9616	Get a tier by its name .
9617	Convert to Eaf .
9618	Add a point to this tier .
9619	Add interval to this tier .
9620	Remove interval by time .
9621	Remove a point from this tier
9622	Iterate over intervals .
9623	Returns a sorted list of xmin and xmax values .
9624	Indent an element .
9625	Add an annotation .
9626	Add a single entry to the vocabulary .
9627	Add a description to the vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a new lexicon reference
9631	Add a linguistic type .
9632	Add a link to the document .
9633	Add a new locale .
9634	Add a secondary file descriptor .
9635	Add a tier
9636	Remove all timeslots from tiers .
9637	Return a copy of the EAF .
9638	Generate an annotation id .
9639	Generate a new time id
9640	Get child tiers for the given tier
9641	Get the full time interval .
9642	Get the reference annotation data after a given time .
9643	Get the reference annotation data before the given time .
9644	Returns a list of tier ids for the given linguistic type and parent .
9645	Merge tiers .
9646	Remove all annotations from a tier .
9647	Remove the description associated with the given cv_id and lang_ref .
9648	Remove a license
9649	Remove all linked files .
9650	Remove a property .
9651	Remove a reference annotation .
9652	Remove secondary files .
9653	Remove a tier .
9654	Remove tiers from disk
9655	Rename a tier .
9656	Shift the annotations by time .
9657	Main function .
9658	Display debug information for the storage
9659	Return the base level of text .
9660	Get embedding levels from text .
9661	Extract explicit embedding levels .
9662	Calculate the number of runs for each level .
9663	Resolve all weak types in the storage .
9664	Resolve neutral types .
9665	Reverse a contiguous sequence .
9666	Reorder resolved levels .
9667	Display the current file .
9668	Convert PySide2 import lines into PySide2 objects .
9669	Add an attribute to an object .
9670	Main function for CLI .
9671	Maintain the backwards compatibility
9672	Show the main GUI .
9673	Find the first available GUI
9674	Deregister host .
9675	add to file menu
9676	Maintain the previous selection
9677	Context manager to restore the current time .
9678	Show an empty message box .
9679	Setup Telegram types .
9680	Return the cumulative data .
9681	Get the values for a single axis .
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters necessary to transform x and y coordinates
9684	Reverse a mapping .
9685	Return a range of floats .
9686	Add data to the data .
9687	Add svg definitions
9688	Add data to self . data .
9689	Calculate and draw the graph .
9690	Calculate left margin .
9691	Calculate the border of the right box
9692	Calculate the top margin
9693	Add a popup .
9694	Calculate bottom margin
9695	Draw the graph .
9696	Make a text element .
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X - axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard -code the styles into the SVG XML if style sheets are not used .
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Send a message to a channel .
9709	Dispatch patterns .
9710	Create a new nick
9711	Handle a ping message .
9712	Handle registration .
9713	Enter event loop .
9714	Register with the server .
9715	Main task runner .
9716	Decorator to check if the nick is the boss .
9717	Return a list of regex patterns for the command .
9718	This function is called when the command is successfully completed .
9719	Execute a command .
9720	Add a worker to the list of workers .
9721	Sends an email to the site .
9722	Send a password reset email .
9723	Validate password strength .
9724	Verify that the token is verified .
9725	Remove the user s avatar .
9726	Allow POST requests .
9727	Executor .
9728	Return a docker client .
9729	Return the TLS client .
9730	Return service name .
9731	Wrapper for docker methods
9732	Runs a docker container .
9733	Check the status of the Docker service .
9734	Stop the Docker service
9735	Lowercase email address .
9736	Update an existing password
9737	Update a new password
9738	Validate email address .
9739	Create a new token
9740	Delete a token from the database .
9741	Resend confirmation email .
9742	Handles POST requests .
9743	Update the expiration time of the object
9744	Generate email context for password reset notification .
9745	Email handler .
9746	Handler for password reset .
9747	Custom handler for email validation .
9748	Authenticates the request .
9749	Ensure that the token has expired .
9750	Display a notebook .
9751	Process HV plots .
9752	Create CustomJS callback
9753	Return widget with given name .
9754	Handle plotting functions .
9755	Creates a text input .
9756	Return a list of namedtuples .
9757	Return the owner of a method .
9758	Assign the HTTP Auth Credentials .
9759	Ping the server .
9760	Information about the server .
9761	Retrieves the cluster health information .
9762	Convert a number of bytes to a human readable string .
9763	Calculate the total load of the system
9764	Returns the memory size in bytes .
9765	Get total network up .
9766	List of volume IDs .
9767	Get a volume by its id .
9768	Returns the volume size in bytes
9769	Returns the volume used in the container
9770	Return the volume disk temp .
9771	Return the maximum disk temp for a volume .
9772	Get a disk by its id .
9773	Login to Skype .
9774	Perform a GET request
9775	Execute a GET request .
9776	Get information about the system .
9777	Access the system .
9778	Access sys . storage .
9779	Return a Context object for the given request .
9780	Return the token for the tenant .
9781	Helper function for building an attribute dictionary .
9782	Create a new application with the specified apps .
9783	Remove specified apps from INSTALLED_APPS .
9784	Returns a dict of all settings .
9785	Handle GET requests .
9786	Get value from config .
9787	Change a value in the config file
9788	Migrate the config file
9789	Start the HTTP server .
9790	Wait for the server to respond to .
9791	Get the access information from PRAW .
9792	Check if a token is present .
9793	Set access credentials .
9794	Refresh access information .
9795	Create the manifest table .
9796	Split path into bucket and path .
9797	Determine if a bucket is a mercier .
9798	Extract run id from key .
9799	Remove None values from a dict .
9800	Add run id to DynamoDB .
9801	Check if a run is in the manifest .
9802	Extract the schema from a URI .
9803	Fix schema name and version .
9804	Parses a context into a list of tuples .
9805	Parse an unstructured event .
9806	Transform line into JSON format .
9807	Convert an event to a JSON - compatible object .
9808	Extract the name and template from a response .
9809	Print the context .
9810	Print the rendered variables .
9811	Convert SQL to HTML
9812	Pretty printer for Django context .
9813	Format a dictionary as HTML .
9814	Styles text .
9815	Formats the object .
9816	Format object as pretty printer .
9817	Parse the string at the given position .
9818	Return a list of nodes starting at pos .
9819	Convert latex to text .
9820	Set the tex_input_directory
9821	Read a tex file .
9822	Convert latex to text .
9823	u Convert a string to LaTeX .
9824	Convert a string to ASCII .
9825	Returns information about the organization .
9826	Returns a list of boards .
9827	Gets a list of members from the network .
9828	Updates an existing organisation .
9829	Remove a member from the cluster .
9830	Adds a member by its ID .
9831	Adds a member to the organization .
9832	Returns information about the current account .
9833	Adds a new card to this account .
9834	Returns information about the label information .
9835	Returns a list of check items .
9836	Update label name .
9837	Updates the label with the given query parameters .
9838	Returns the Authorisation URL .
9839	Returns information about the card .
9840	Returns a single board .
9841	Retrieves a list from the server .
9842	Returns a list of checklists .
9843	Adds a comment .
9844	Add an attachment .
9845	Adds a new checklist to this organization .
9846	Adds a new label from a dictionary .
9847	Adds a new label to the class
9848	Adds a member to the organization .
9849	Retrieves information about the current account .
9850	Returns a list of Card objects .
9851	Returns list of organisations .
9852	Create a new board .
9853	Decorator to dispatch a method .
9854	Returns information about the board .
9855	Gets a list of lists .
9856	Returns a list of Labels .
9857	Fetches a card .
9858	Returns a list of Checklists .
9859	Returns a new organisation .
9860	Updates the board .
9861	Adds a new list to this account .
9862	Adds a new label to this project .
9863	Returns information about the checklist information .
9864	Get the card associated with this checklist .
9865	Returns a list of Item objects for this card .
9866	Updates a checklist .
9867	Adds a check item .
9868	Remove a check item .
9869	Updates the name of this check .
9870	Updates the check status .
9871	Add token to query_params .
9872	Check the status of the API .
9873	Build a urllo .
9874	Fetches a JSON response .
9875	Create an organisation object
9876	Create a board from a json string .
9877	Create a Label object from a JSON string .
9878	Create a list object from a list .
9879	Create a Card object from a json string .
9880	Create a Checklist object from a json .
9881	Create a member from a json string .
9882	Get an existing organization .
9883	Get a board .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Get a member .
9888	Extract the domain from a URL .
9889	Convert text to plain text .
9890	Convert text to text .
9891	Convert text into sentence pairs .
9892	Set user password .
9893	Split text with given locations .
9894	Mark regex as possible .
9895	Mark a regex in the text .
9896	Main entry point .
9897	Create an AES cipher .
9898	Return a list of encryption modes .
9899	Default priority .
9900	Check the encryption scheme .
9901	Called when a message is received
9902	Make a unique ID .
9903	Connect to the server
9904	Handle a CONNACK packet .
9905	Convert a string to bytes .
9906	Decode a string into a tuple .
9907	Encode a 16 - bit integer into a bytearray .
9908	Encodes a length value .
9909	Decode length to length .
9910	Encode the message .
9911	Encode this message into a string .
9912	Decode a packet .
9913	Encode the variable to a string .
9914	Decode the packet .
9915	Decode a packet .
9916	Encode this message .
9917	Encode the message header .
9918	Decode a packet .
9919	Encode the variable to a string .
9920	Encode the message to be sent .
9921	Decode a packet .
9922	Decode the packet .
9923	Build the API URL .
9924	Make a request to the API .
9925	Refresh the blocks .
9926	Format the data .
9927	Fit data to data .
9928	Fit k - means clustering
9929	Fit a mean shift to data .
9930	Fit classifier to data .
9931	Predict classifier .
9932	Map cluster ids to their ids .
9933	Sort cluster by clustering .
9934	Convert datetime to datetime .
9935	Returns the total number of points in a dictionary .
9936	Calculate the maximum time span of the Dict .
9937	Unit picker format .
9938	Pretty printed string .
9939	Convert an analyte string to a name .
9940	Convert string to massname
9941	Collate data from in_dir to out_dir
9942	Enumerate a boolean array .
9943	Convert a list of tuples to boolean values .
9944	Fastsmooth the input array .
9945	Fast gradient algorithm .
9946	Finds the minimum values in x and y .
9947	Perform a meanshift clustering .
9948	Run k - means clustering .
9949	Cluster a dataset .
9950	Returns a list of strings defined in the srm file .
9951	Read a configuration file .
9952	Read the config file and return it .
9953	Print all LAtools configuration .
9954	Copy the srmfile to the specified location .
9955	Create a config file .
9956	Change the default configuration .
9957	Exclude downhole bits .
9958	Defrag filter .
9959	Determine the dispikes of the focus .
9960	Plot the spectrum .
9961	Creates the realization and time series
9962	Calculates the ratio between two formats
9963	Calibrates the instrument .
9964	Generate sample statistics .
9965	Calculate the ablation times .
9966	Add a filter to the filter
9967	Keep gradients above threshold
9968	Calculate the Pearson correlation coefficient .
9969	Filter correlations between two series .
9970	Add a new filter to the filter list .
9971	Returns a dict of parameters and their corresponding values .
9972	Plot histograms .
9973	Summarize summary statistics .
9974	Load reference data .
9975	Look up the mro of a type .
9976	Return a pandas . DataFrame containing atomic weight .
9977	Calculate molecular weight
9978	Return a namedtuple containing ANSIequence objects .
9979	Given a stack and a stack return a new stack .
9980	Remove duplicates from stack .
9981	Calculate statistics for gaussian distribution
9982	Compute the gaussian
9983	Compute the standard deviation of stderr .
9984	Get the samples
9985	Despike evolution .
9986	Calculate background mean
9987	Interpolate background data .
9988	Subtract background data .
9989	Calculate ratio .
9990	Make a new subset
9991	Filter the gradients based on the given criteria .
9992	Fit a classifier .
9993	Applies a classifier .
9994	Filter correlations between two samples .
9995	Apply a filter on a set of samples .
9996	Remove samples from the data store .
9997	Return a status message .
9998	Defragment the spectra .
9999	Print out the number of removed samples .
10000	Plot the gradient histogram .
10001	Plot gradient .
10002	Plot histograms .
10003	Plot trace plots .
10004	Draw gradient plots .
10005	Filter plots based on the specified analytes .
10006	Calculate sample_stats .
10007	Write stats to a file
10008	Exports data from LATOOLS to a dataframe .
10009	Exports the traces to a file .
10010	Save the log to a file .
10011	Exports data from LATOOLS
10012	Split a file by regex pattern .
10013	Applies a function f to z .
10014	Plots a plot of the PCA .
10015	Calculate the bayes scale .
10016	Scale values to median .
10017	Add noise to signal
10018	Determine expdecay noise .
10019	add a component to the index
10020	Remove a component
10021	Clears the configuration
10022	Remove unused components .
10023	Return the key matching the given filter key .
10024	Make a component from a key .
10025	Grab the index of the filter
10026	Get information about the component
10027	Decorator to log a function .
10028	Write a log file .
10029	Read a logfile into a dictionary
10030	Decorator to log into a function .
10031	Print modem information .
10032	Send a message .
10033	Parse a file - like object .
10034	Return link to nbviewer .
10035	Return the thumbnail div .
10036	Return the code div .
10037	The code example
10038	Get the url of the notebook .
10039	Return the full path to the output file .
10040	Process notebook .
10041	Create a python file .
10042	Generate a DATA_DOWNLOAD command .
10043	Create a thumbnail .
10044	Extract the description from the command line
10045	Scale an image .
10046	Saves the thumbnail .
10047	Copy the thumbnail figure if it exists .
10048	Get the URL for a notebook .
10049	Return list of languages for db change
10050	Return a default value for a field .
10051	Process post_processor .
10052	Called when a file has been saved .
10053	Refresh the thumbnail cache .
10054	Return a list of all thumbnails .
10055	Create a thumbnail .
10056	Delete a thumbnail .
10057	Create a new thumbnail .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Handle incoming message .
10061	Subscribe to a number .
10062	Set of all accepted states .
10063	Register a provider
10064	Send a message to the sender .
10065	Return a blueprint for receiver .
10066	Return a map of receiver s blueprints .
10067	Handle incoming message .
10068	Handle a status message .
10069	Wrap a function to return a JSON response
10070	Forward an object .
10071	Sign a web3 transaction .
10072	Estimate the amount of gas using Web3
10073	Estimate the gas of a transaction .
10074	Write to the stream .
10075	Read a line from the serial device .
10076	Send a message to the host .
10077	Return the email as a string .
10078	Check if message has bad headers .
10079	Add an attachment
10080	Register new services .
10081	Create a Config object from a module .
10082	Register new resources .
10083	Return the value of the given key .
10084	Exits the given object as an exception .
10085	Sets up the data manager .
10086	Return the ng of wavelength
10087	Calculate the Cauchy equation .
10088	Login to the backend .
10089	Login to Backend .
10090	Returns a list of domains for this account .
10091	Retrieve all items from the API endpoint .
10092	Patch an object
10093	Generic DELETE request
10094	Return True if path1 and path2 are the same .
10095	Create a junction link .
10096	Initialize the logger .
10097	Raise an error .
10098	Claims one or more VCF files .
10099	Build a new column header from MuTect .
10100	Claim a set of vcf files .
10101	Initialize population stats .
10102	Claims the given unclaimed file readers .
10103	Split text into lines .
10104	Return the prefix line terminator .
10105	Return the next line terminator .
10106	Seek to the next line .
10107	Seek to the previous line .
10108	Return the last lines of the file .
10109	Return the first lines of the file .
10110	Yield lines from the file .
10111	Claims strelka files .
10112	Parse a VCF record into a VCFRecord .
10113	Return a dict of sample tag values .
10114	Format the sample tags .
10115	Join the info fields into a comma separated string .
10116	Formats the field into a format field
10117	Return the sample field for a given sample
10118	Returns tab - delimited newline string of VCFRecord .
10119	Add a new sample tag value .
10120	Add or replace a filter .
10121	Return a list of all available categories .
10122	Returns a form for the products form .
10123	Return a form for staff products .
10124	Add an error for a product .
10125	Memorise a function .
10126	Return a form for a model field .
10127	Gets the items that are pending or pending .
10128	Send an email .
10129	Generator for OSM stream .
10130	Parse OSM file .
10131	Iterate over OpenStreetMap notes .
10132	Returns True if the condition passes the filter .
10133	Check if user is met .
10134	Return the remainder of a user .
10135	Filter the queryset .
10136	Filters the queryset .
10137	Filter queryset .
10138	Filter queryset .
10139	Filter for queryset .
10140	Decorator for functions that modify the cart .
10141	Creates a new cart for the specified user .
10142	Extend the maximum number of products for the product .
10143	Applies a voucher to the cart
10144	Validate the cart .
10145	Tries to fix simple vouchers
10146	Recalculate discounts for the current user .
10147	Adds a discount to the list of discounts .
10148	Decorator to register a report view .
10149	Yield all rows in the table .
10150	Returns a form instance .
10151	Render data as HTML .
10152	List all registered reports .
10153	List items sold .
10154	Display a summary of sales .
10155	Displays all payments
10156	Refunds the credit note
10157	View product status .
10158	Return a list of items grouped by item .
10159	Returns a list of invoice items for the given product .
10160	Search for paid invoices by date .
10161	Shows credit notes
10162	List all invoices .
10163	Returns a list of attendees .
10164	Displays a list of users and their associated prices .
10165	Displays the list of products and products .
10166	Return set of missing categories .
10167	Returns the amount of credit for the given invoice .
10168	Check if user is sold out and unregistered .
10169	View that handles the registration .
10170	View for editing the attendee profile .
10171	Handle a profile form .
10172	View for a specific product category .
10173	Handles the products form .
10174	Handles the form of a voucher form .
10175	View for a single user .
10176	View for the invoice view .
10177	Show an invoice .
10178	View for manual payment .
10179	Refund an invoice
10180	Applies a credit note to an invoice .
10181	Amends staff products form .
10182	Extend an existing reservation
10183	Send an email to an invoice .
10184	Displays badges .
10185	Render a badge .
10186	Return a list of discounts for the given user .
10187	Annotate queryset with past use count .
10188	Return a list of available products .
10189	Applies the credit to an invoice .
10190	Add an invoice to the invoice
10191	Generate an access code .
10192	Evaluate a function .
10193	Get object from dotted name .
10194	Returns an invoice for the given cart .
10195	Generates an invoice for a customer .
10196	Generate a list of products from a cart .
10197	Applies the unclaimed credit notes to the invoice .
10198	Check if the user can view the invoice .
10199	Refresh the invoice from the database .
10200	Validate that the invoice is allowed to pay to the invoice .
10201	Updates the invoice status
10202	Marks the invoice aspaid
10203	Check if the invoice matches the cart .
10204	Update the validity of the invoice
10205	Validate the invoice .
10206	Refund the invoice
10207	Send an email to invoice .
10208	Update an annotation from a dictionary .
10209	Flatten a nested schema field .
10210	Print downloaded files .
10211	Download a file field .
10212	Get project data
10213	List available processors
10214	Print processor inputs .
10215	Post rundata .
10216	Upload files to a project .
10217	Upload a file
10218	Download a set of data objects .
10219	Get all subclasses of c .
10220	Get repo and project .
10221	Get evidence phenotypes with suggested changes .
10222	Gets a list of variants with merged changes .
10223	Search variants by coordinate query .
10224	Bulk search variants by coordinates .
10225	Updates the object with the specified properties .
10226	Remove duplicates .
10227	Authenticates asana .
10228	Display a value from a list .
10229	Get the data for an issue .
10230	Move the data from an issue to another .
10231	Get task data .
10232	Get an ASana task by id .
10233	Save the configuration to disk .
10234	Prompt the user for a key .
10235	A decorator that wraps a function in a separate thread .
10236	Flush the queue .
10237	Create a task .
10238	Format a list of task numbers and their links .
10239	Create a task for an issue .
10240	Return all data types for this project
10241	Log an ekm meter .
10242	Init serial port
10243	Set the polling values for this object .
10244	Combine the AB and V2 fields
10245	Render JSON from meter_reads .
10246	Set the context string
10247	Calculate the positive value of a power value .
10248	Set the maximum demand period
10249	Set the password .
10250	Unpack struct .
10251	Convert the contents of the file into a string .
10252	Render the def_buf as JSON
10253	Calculate CRC16
10254	Split an Ekm date into a named tuple
10255	Return the month buffer .
10256	Set the CT ratio
10257	assign a schedule to a schedule
10258	assigns a season to a schedule
10259	Set the season schedule
10260	add holiday date to calendar
10261	Read a schedule from the chassis
10262	Extracts the schedule for a specific period
10263	Reads the month tariff .
10264	Extracts data for the month .
10265	Reads the holiday dates from the device
10266	Extract holiday date .
10267	Reads the settings .
10268	write command message
10269	Send password request .
10270	Update all observers for this request .
10271	Initialize the LCD lookup .
10272	Request A and B
10273	Request A for A
10274	This function is used to send B to the device .
10275	Convert the MAR file to a dictionary .
10276	Calculates the power factor values .
10277	Sends the LCD command to the LCD device
10278	Set relay status .
10279	Send the termination string .
10280	Set the pulse input ratio .
10281	Set zero resettable KWH .
10282	Set the LCD .
10283	Iterate over nested fields .
10284	Iterate over nested schemas .
10285	Return a list of paragraphs
10286	Generate a random text .
10287	Compute the timing information .
10288	Colorize text .
10289	Display text .
10290	Return a summary of the test results .
10291	Parse command line arguments .
10292	Sets up the instance .
10293	Runs an example .
10294	Runs an example .
10295	Transform a description .
10296	Transform a description into examples .
10297	Transform an example .
10298	Walk the example body and transform it to self .
10299	Return an ast . arguments .
10300	Register the path hook .
10301	Transform a byte string into a code object .
10302	Apply an argument parser .
10303	Load a module by its name .
10304	Load modules from a path .
10305	Iterate over the directories in the given path .
10306	Return a function that checks for the given path .
10307	Processes messages from a given location .
10308	Add a new command to the config .
10309	Remove a file from the config .
10310	Send a restart command .
10311	Call place function with results .
10312	Return a tornado service .
10313	Create a service .
10314	Refresh session .
10315	Remove expired nodes .
10316	Remove a node from the node list .
10317	Get the last updated time of a node .
10318	Return a dict of all node ids .
10319	Refresh the session .
10320	Increment the number of times modified
10321	Dereference the node .
10322	Returns a list of tokens interleaved with the delimiter .
10323	Check for bad files .
10324	Merge another status .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Convert x to constant .
10328	Split a function into two iterables .
10329	Convert a function into a function .
10330	Run a process .
10331	Create a Tainternet .
10332	Parse a reader .
10333	Create a parser .
10334	Create an optional parser .
10335	Create a RepeatedOnce parser .
10336	Create a new parser .
10337	Create a RepeatedOnce - separated parser .
10338	Create a parser with a separator .
10339	Check if all states are removed .
10340	Close the call .
10341	Check if the URL is valid .
10342	Add a heart service .
10343	Wrap a Taservice service .
10344	Freeze graph from checkpoint .
10345	Freezes the model .
10346	Save the graph only .
10347	Saves graph only from checkpoint .
10348	Saves weights from a checkpoint .
10349	Restores metadata from a checkpoint .
10350	Parse the tag .
10351	Render a tag .
10352	Validate that the arguments are allowed .
10353	Get context data .
10354	Parse the template tag .
10355	Returns the context data .
10356	Convert caffe model to TensorFlow session .
10357	Freeze a caffe model .
10358	Save graph only .
10359	Make a sequence of rows .
10360	Divide an iterable into n items .
10361	Yield every item in iterable
10362	Remove duplicates from iterable .
10363	Return the next item from iterable .
10364	Yield items from iterable until predicate is true .
10365	Partition the number of items into bins .
10366	Ensure an item is always iterable .
10367	Given a list of callables yield the given callables .
10368	Return a list of duplicate items .
10369	Ensures that all elements in iterable are ordered .
10370	Swap the partition result .
10371	Partition a dictionary by key .
10372	Returns the first n queues
10373	Reset the iterator .
10374	Parses a variable into its parts .
10375	Decorator to declare a template tag .
10376	Return the descendant of the public keychain .
10377	Fetch the SQLite master .
10378	Iterate over nested dictionaries .
10379	Select an object from an object .
10380	Parse a selector .
10381	Processes a selector .
10382	Return the parents of lhs and rhs .
10383	Return the ancestors of lhs and rhs .
10384	Return the siblings of lhs and rhs .
10385	Validate the nth - child expression .
10386	Return a list of nodes that match the given list of validators .
10387	Ping an ICMP port .
10388	Make a request and return the response body .
10389	Expire expired items .
10390	Set a value in the cache .
10391	Get a value from the cache .
10392	Return True if the key is in the cache False otherwise .
10393	Check if the chain is valid .
10394	Return a NistBeaconValue instance from a JSON string .
10395	Create NistBeaconValue from XML string .
10396	Render the rendered content .
10397	Apply fn to the logfile .
10398	Get the table as a list of rows .
10399	Validate a token
10400	Return the cryptography engine .
10401	validate token
10402	Create a new token link .
10403	32 - bit counter .
10404	Compute a counter .
10405	Calculate the average duration .
10406	Setup the outputs .
10407	Setup the sources
10408	Send events to the event queue .
10409	Start the watchdog .
10410	Parse the format string .
10411	Parse log line .
10412	Validate that the field is a valid date .
10413	Ensure that the message is valid .
10414	Store token in session
10415	Name of the device .
10416	Warn if node is not local
10417	Connects receivers to receivers
10418	Create a secret link .
10419	Send an invitation email .
10420	Send confirmation email .
10421	Send email confirmation email .
10422	Send a reject request .
10423	Send email notification .
10424	Create a new secret .
10425	Validate a token
10426	Revoke this token .
10427	Create a new record .
10428	Get request by request_id and user .
10429	Confirm email confirmation .
10430	Mark the request as accepted .
10431	Reject the request .
10432	Create a secret link .
10433	Create a new SHA512 hash .
10434	Verify signature .
10435	Check if record is an imported record .
10436	Display an access request .
10437	View for confirmation email .
10438	Return an SSH command client .
10439	Reverse column .
10440	Return the selected flag .
10441	Query for items .
10442	Return the version from the file .
10443	Set the version of the file
10444	Initialize the SSH configuration .
10445	Start timer .
10446	Called when the event loop is ready .
10447	List linked link .
10448	Create a new connection
10449	Stop the connector .
10450	Empty the queue .
10451	Called when an event is received .
10452	Create a new Riemann client .
10453	Create Elasticsearch client
10454	Encodes an event into a protobuf .
10455	Builds a message protobuf .
10456	Decodes a message into a protobuf message .
10457	Send a list of events .
10458	Generate a preview image .
10459	Retrieve a single file preview .
10460	Send a message to RQ
10461	Message loop .
10462	Check if we should log time .
10463	Send a response to the server .
10464	Abort the SASL session .
10465	Perform SASL preparation for SASL preparation .
10466	Renders the admin footer .
10467	Build payment parameters .
10468	Build payment parameters
10469	Pay with an alias .
10470	Return a version string .
10471	Constructs the layout .
10472	Post construction .
10473	Configure shortcuts
10474	Callback when the item is activated .
10475	Called when an item is selected .
10476	Callback called when the user is clicked .
10477	Finalize options .
10478	Run pyside - rcc .
10479	Clean up the target .
10480	Fetch the list of children .
10481	Remove all children from this node .
10482	Returns the icon associated with the given index .
10483	Run a command and return its child process .
10484	Return the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open files .
10487	Redirect a stream to a file descriptor .
10488	Set widgets attributes on form .
10489	Import a module and return its submodule .
10490	Import modules from INSTALLED_APPS .
10491	Include the template .
10492	Get the URL for an object .
10493	Get the gravatar image .
10494	Validates that the path is a valid filesystem .
10495	Validate an S3 URL
10496	Return the absolute path of a template .
10497	List objects in S3 .
10498	Builds the json for the workflow .
10499	Execute the job .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Create a new AppEngine .
10505	List files under path .
10506	Downloads the file to the specified path .
10507	Check if the path exists .
10508	Gets the parent entity of the given path .
10509	Create a directory .
10510	Uploads a local file to storage .
10511	Delete a file or folder .
10512	Validate the storage path .
10513	Create a new AppEngine .
10514	Create a new Storage instance .
10515	Get entity details .
10516	Set the metadata for an entity .
10517	Get the metadata for an entity .
10518	Update the metadata for an entity .
10519	Deletes metadata for an entity .
10520	List projects .
10521	Get project details .
10522	Create a project .
10523	Deletes a project .
10524	Create a new folder .
10525	Get folder details .
10526	Deletes a folder .
10527	Upload the content of a file .
10528	Copies the content of a file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Converts the given service and version to a service URL .
10533	Return a new request with the given headers .
10534	Returns a new request with the given parameters .
10535	Declare that an exception occurred .
10536	Return a list of boolean fields .
10537	Add a function to the job .
10538	Generate genotyped VCFs using GVCF .
10539	This module will run oncotator on the input .
10540	Sort by time .
10541	Return a list of all the timestamps
10542	Load JSON data .
10543	Shift time by t .
10544	Return the sum of all days
10545	Collect rfxcom data .
10546	Create a new user .
10547	Parses the vns results .
10548	Parses the release results into a list of dicts .
10549	Parse the prod staff results .
10550	Parses the DOM and returns a list of characters .
10551	Return a list of tags
10552	Parse user results .
10553	Serializes a list of files into a tarball .
10554	Iterate over a list of file paths .
10555	Copy a single file to the output_dir .
10556	Create a list of parameters for Spark .
10557	Add Docker parameters to Docker .
10558	Refresh metadata .
10559	Run MuTect on a normal BAM file .
10560	Create this resource .
10561	Return a list of Streams .
10562	Export all devices to a directory
10563	Search for a VNDB database .
10564	Parse search results
10565	Add a stream to the query
10566	Resets the API s API key .
10567	Return a list of users .
10568	This function creates the index files for the reference .
10569	Return a connection to the server .
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a stream into the cache .
10573	Synchronize the cache .
10574	Start the logger .
10575	Stop the thread .
10576	Download the given URL to the file store .
10577	A wrapper for s3am upload
10578	Print ontology labels .
10579	Print ontology tree .
10580	Get the mean size of a BAM file .
10581	Get the id of the container
10582	A wrapper for STAR .
10583	Create a new bucket
10584	Export the stream to a directory
10585	The device object for this device .
10586	Get labels for an ontology
10587	Get ontology hierarchy .
10588	Entry point for the Toil plugin .
10589	Populates the parser with the given config_data .
10590	Get empty config .
10591	Get the mount path .
10592	Add an option to the arg_parser .
10593	Create an argument parser .
10594	Create the command to run the job store .
10595	Set HTTP Basic Auth
10596	Handle an HTTP response .
10597	Ping the query .
10598	Create a new path .
10599	Updates an existing resource .
10600	Delete a path .
10601	Subscribe to a stream .
10602	Create a user .
10603	Return a list of all devices .
10604	This module will run the cutadapt on the two paired endpoints .
10605	Run samtools faidx
10606	Runs the samtools index on a bam
10607	Runs sambamba markdup on input bam .
10608	This module will run samblaster on the input .
10609	Use picard to mark duplicate duplicates .
10610	Runs Picard sort on a BAM file .
10611	This module will run the base recalibration on the input BAM file .
10612	This module will run the kallisto command .
10613	Run the rsem on the input BAM file .
10614	Get the affinity matrix for a test .
10615	Send a command to the client .
10616	Subscribe to a stream
10617	Connect to the websocket .
10618	Attempt to reconnect .
10619	Resubscribe to all subscriptions
10620	Called when a websocket connection is established .
10621	Called when websocket is closed .
10622	Called when a connection error occurs
10623	Callback for receiving messages from websocket
10624	Ensure that the websocket connection is alive .
10625	This module will run GATKSelectVariants on a VCF .
10626	Run GATK VariantFiltration on a VCF .
10627	Run GATK variant recalibrator .
10628	This module is used to apply variant recalibration on a VCF file .
10629	This module will run the GATK CombineVariants command .
10630	Run quickcheck on a BAM file .
10631	Load handler handlers .
10632	Write the configuration to disk .
10633	Get the current configuration .
10634	Get a term from an ontology
10635	Search for ontology
10636	Retrieve a list of ontologies for a given name
10637	Iterate over the descendants of an ontology .
10638	Iterate over the labels of an ontology .
10639	Iterate over labels in an ontology .
10640	Iterate over terms in an ontology .
10641	This module will run fastqc on the fastqc
10642	Add a stream to the query .
10643	Create a Flask application .
10644	Start the Spark master container .
10645	Start the job .
10646	Start the datanode process
10647	Stop Spark container .
10648	Check the status of the container .
10649	Tokenizer . Generates tokens stream from text
10650	Look up a zone by name .
10651	Fetch the configuration for a zone .
10652	Merge configs into a single XML object .
10653	Validate the changeset .
10654	Returns a list of members with the best n fitness score .
10655	Returns the fitness of the group .
10656	Return the average cost function of each group .
10657	Return the median cost function of each group .
10658	Returns the parameter values for each member .
10659	Returns the members of the group .
10660	Add a parameter .
10661	Generate the next generation .
10662	Normalize key - value pairs .
10663	Iterate over os . environ .
10664	Wraps a callable in a context .
10665	Transform a list of pypi packages into a sorted list .
10666	Transform result to string .
10667	Convert HTML to XHTML
10668	Convert xhtml to HTML tag .
10669	Convert a document to a string .
10670	Open a document in a browser .
10671	Drop the tree .
10672	Drop the current tag .
10673	Get an element by id .
10674	Wrapper around cssSelector .
10675	Return a list of member names for each handler .
10676	Get the class counts from environment variables .
10677	Check if we are a single class
10678	Is the current module?
10679	Ensure that the request has the correct parameters
10680	Ensure the identifier is valid .
10681	Decode a path .
10682	Escape an iterable of arguments .
10683	Return the codec name for the given encoding .
10684	Detect the encoding of the UTF - 8 encoding .
10685	Determine the remote address of a proxy .
10686	Convert obj to Decimal
10687	Parse a string .
10688	Parse a BeautifulSoup file .
10689	Convert BeautifulSoup tree to DOM tree .
10690	Get the current traceback .
10691	String representation of exception .
10692	Render the traceback as HTML .
10693	Generate plaintext traceback .
10694	Return a list of lines that are annotated .
10695	Render the source table as HTML .
10696	Return the name of the version of an egg .
10697	Get the locations of the index .
10698	Find all versions of project .
10699	Find an installed version .
10700	Sort the list of links .
10701	Get the content - type of a URL .
10702	Iterate over all links .
10703	Returns True if the request is valid .
10704	Find data files for package .
10705	Exclude data files from a package .
10706	Parse a requirements file .
10707	Join lines in an iterator .
10708	Ignore comments from an iterator .
10709	Compile a marker .
10710	Visitor for AST nodes .
10711	return an astroid . Name node
10712	Convert a string to a number .
10713	Context manager to copy the current request context .
10714	Push a context to the app context .
10715	Pops the app context .
10716	Return a copy of this instance .
10717	Try to match the request .
10718	Pushes a new request to the stack .
10719	Make path relative to rel_to .
10720	Check if a distribution is editable .
10721	Register a function as a URL value preprocessor .
10722	Add a function to the app .
10723	Decorator to register an error handler .
10724	Stream with context manager .
10725	Create a Flask response .
10726	Generate a URL for an application .
10727	Safely join a directory and its absolute path .
10728	Return the root path of a given package .
10729	Return a loaded jinja template
10730	Run completion script .
10731	Return the cookie domain .
10732	Return the cache for a link .
10733	Determine if a package is pure Python .
10734	Yield uninstallation paths .
10735	Raise an exception if the wheel is incompatible with the given version .
10736	Build a single pip wheel .
10737	Iterate over all symbols in code .
10738	Check if last_updated is expired
10739	Add egg info to filelist .
10740	Write the delete marker file .
10741	Check if we are running under a virtualenv .
10742	Get user s username
10743	Return a distribution scheme .
10744	Parse the cache - control header .
10745	Check if a request is cached .
10746	Cache the response .
10747	Update zipimporter cache for given path .
10748	Load the script template .
10749	Install site - patch .
10750	Save the path to disk .
10751	Convert value to Converter
10752	Add filters to the given filterer
10753	Configure a handler from a dictionary .
10754	Add handlers to logger .
10755	Add handlers to a logger .
10756	Execute a script .
10757	Temporarily override the temporary directory .
10758	Return URL and revision .
10759	Get an item from an object .
10760	Generate the given source code .
10761	Compile Jinja2 templates .
10762	Get the default cache location .
10763	Find eggs in a zipfile .
10764	Search for a path_item in the path_item .
10765	Declare a namespace
10766	Get the MRO of a class .
10767	Find an adapter in registry .
10768	Ensure a directory exists .
10769	Return an iterator over the entry points for the given group .
10770	Return True if dist can be added to this distribution .
10771	Return the best match for a requirement .
10772	Evaluate a marker .
10773	Evaluate marker library .
10774	Format a record .
10775	Formats a number using the given locale .
10776	Parse a number pattern .
10777	Return a decimal quantum .
10778	Returns the decimal precision of a number .
10779	Convert scientific notation to scientific notation .
10780	Convert datetime object to seconds .
10781	Parse a list of requirements .
10782	Return unpatched class .
10783	Verify that requirements are valid .
10784	Fetches an egg from the distribution
10785	\ x1b [ 1mNAME \ x1b [ 1m dice - Prints the dice rolls
10786	Convert obj to Price class
10787	Creates a price .
10788	Validate a request
10789	Return the registered method .
10790	Apply a request to the server .
10791	The module for this request .
10792	The blueprint name .
10793	Attach enctype errors to request .
10794	Make an abstract dist from a requirement .
10795	Add a requirement to this environment .
10796	Iterate over all req_to_install and invoke the handler .
10797	Determine if req_to_install should be skipped .
10798	Return a list of requirements to install .
10799	Get all namespace packages .
10800	Encode objects as JSON .
10801	Tokenize an annotation .
10802	Merge two tokens .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Serialize tokens using markup_func .
10806	Expand HTML tags .
10807	Find unbalanced_end .
10808	Convert a list of chunks into words .
10809	Flatten an element .
10810	Split text into words .
10811	Return HTML start tag .
10812	Return HTML end tag .
10813	Serialize an element into a string .
10814	Fix up ins and del tags .
10815	Extracts a constant from code .
10816	Build a URL for the Cache Service .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Create a DOM document from a string .
10820	Validate that a function returns a JSON response .
10821	Returns a TreeWalker object for the given type .
10822	Export an svn repository
10823	Determine the revision for the given location .
10824	Decorator to register a setup method .
10825	The module name
10826	Return True if the config is propagated False otherwise .
10827	Find the path to the instance .
10828	Update template context .
10829	Handle an exception .
10830	Determine if an exception should be caught .
10831	Handle an exception .
10832	Raise FormDataRoutingRedirect .
10833	Dispatch the request .
10834	Return a response with default options .
10835	Create a URL adapter for the given request .
10836	Inject URL defaults into values .
10837	Yield unique values from iterable .
10838	Parse the dependencies of the package .
10839	Convert a requirement to a string .
10840	Convert a pkginfo to a metadata file .
10841	Iterate over loaded modules
10842	Iterate over all classes in this package .
10843	Return a list of method names .
10844	Find the basename of the given basename .
10845	Determine if path is a module path .
10846	Traverse the base directory tree .
10847	Iterate over all the paths of the module .
10848	Add json encoder defaults .
10849	Load default arg defaults .
10850	Set multiple keys in a mapping .
10851	Increment the value of a key by delta .
10852	Dumps an object into a string .
10853	Build a list of options from a request .
10854	Populate the link with the given upgrade .
10855	Ensure that the parent_dir exists .
10856	Remove the temporary source .
10857	Return a pkg_resources . Distribution object for this distribution .
10858	Get the data from the request .
10859	Return the wsgi headers .
10860	r Convert an IRI to a URI .
10861	r Returns the user cache directory .
10862	Return the user data directory for the given application name .
10863	Return the user s log directory .
10864	Returns the user_data_dir for the specified application .
10865	Return a list of site config directories .
10866	Iterate over all of the imported modules .
10867	Main function to restart the interpreter .
10868	Convert a string to text .
10869	Find the CA bundle path .
10870	Parse an HTML document .
10871	Parses the document and returns a DOM tree .
10872	Parse a fragment from a stream .
10873	Return a list of all possible translations of word .
10874	Convert command line arguments to dictionary .
10875	Bind to the server
10876	Print the report .
10877	Load bytecode from file .
10878	Returns a dictionary of stylesheet parameters .
10879	Run a command .
10880	Get the installed Python version .
10881	Return a list of Distribution objects for the given basename .
10882	Find external links .
10883	Open a local file .
10884	Process a URL .
10885	Return a list of paths removed from sys . path
10886	Create a set of absolute paths from sys . path .
10887	Add a package to the sys . path .
10888	Add a site directory to sys . path .
10889	Check if enable usersite is enabled .
10890	Add site - packages .
10891	Set quit and exit .
10892	Add codecs to encodings .
10893	Set default encoding .
10894	Force global eggs after local site packages .
10895	Fix sys . pathpath .
10896	Wrapper for subprocess . Popen .
10897	Check if Pyrex is installed .
10898	Convert pyx files to the specified language .
10899	Run the WSGI application .
10900	Get a resource
10901	Return a user - agent string .
10902	Check if the given name is a URL .
10903	Unpack a file from a URL .
10904	Download the given link and store it in temp_dir .
10905	Check if the given link exists .
10906	Define currency format .
10907	Register currency exchange .
10908	Decode the response .
10909	Default template context processor .
10910	Render a template .
10911	Render a Jinja2 template .
10912	Render a Jinja2 template string .
10913	Parse a version string .
10914	Check if a name is declared in this scope .
10915	Visitor for names node .
10916	Visitor for Include nodes .
10917	Visitor for FromImport node .
10918	Create a whl file .
10919	Executes the given function .
10920	Start a service factory .
10921	URL encode an object .
10922	Return a list of wheels that match a requirement .
10923	Populate a set of requirements from command line options .
10924	Unpack environment into a temporary directory .
10925	Lookup an Amazon Products .
10926	Iterate over pages .
10927	The browse node .
10928	List of BrowseNode objects .
10929	Get an element by path .
10930	Get element text .
10931	Return date value as datetime object .
10932	Get price and currency .
10933	List price .
10934	Send a cached response .
10935	Build a cached response .
10936	Make an attribute getter from an attribute .
10937	Capitalize a string
10938	Sort a list of strings .
10939	Group elements by attribute .
10940	Parses a set of items and returns the result .
10941	Create a logger .
10942	Compares two strings .
10943	Verify signature .
10944	Derive a key from the secret key .
10945	Return the signature for the given value .
10946	Sign the value .
10947	Verify a signature .
10948	Unpack a signed value .
10949	Sign the value .
10950	Validate a signed value
10951	Serialize obj to JSON .
10952	Report a server error .
10953	Find python packages .
10954	Iterate over a list of packages .
10955	Return all directories under base_path .
10956	Prepare response .
10957	Remove a record from a zipfile .
10958	Unpack a wheel .
10959	Install the egg - scripts .
10960	Assemble all graphs
10961	Redraw the graph .
10962	Get a node by ID .
10963	Called when a directed connection is changed .
10964	Handle added edges .
10965	Called when a component has changed .
10966	Handles left d click events .
10967	Add tool canvas to diagram canvas .
10968	Clears the diagram .
10969	Called when a domain model has changed .
10970	Maps the domain model to a new object .
10971	Remove a model from the collection
10972	Map new element to diagram
10973	Set node attributes .
10974	Parse xot data .
10975	Process font .
10976	Processes an ellipse element .
10977	Process a polygon element .
10978	Process a Polyline element .
10979	Create a Text component
10980	Process an image .
10981	Render a GridFS file .
10982	Save object to file .
10983	Load the DOT file .
10984	Checks if a point is in the given coordinates .
10985	Draw the bounding box .
10986	Perform a new graph wizard
10987	Connect to the database .
10988	Parse the dot code .
10989	Create a new graph
10990	Open file dialog
10991	Save the model .
10992	Save the graph as a file .
10993	Configure graph .
10994	Configure nodes .
10995	Configure edges .
10996	Show info about the GODOT .
10997	Add a node .
10998	Add an edge .
10999	Add a subgraph .
11000	Add a new cluster .
11001	Request a graph .
11002	Show options view .
11003	Configure dot code
11004	Callback invoked when user exits
11005	Move components to origin .
11006	Save to file - like object .
11007	Load from a file - like object .
11008	Save to file .
11009	Load an object from a file .
11010	Create an alias of an object .
11011	Parse a text file .
11012	List of start words .
11013	Adds a chain to the Markov chain .
11014	Remove chain from chain .
11015	Build the chain for the given source .
11016	Generate a sentence from the chain .
11017	Create and return a temporary file .
11018	Add a node to the graph .
11019	Deletes a node .
11020	Get a node by its ID
11021	Deletes an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph to this graph .
11024	Handle the program changes .
11025	Set node lists .
11026	Parse a DOT file .
11027	Parse a DOT file .
11028	Build the top graph .
11029	Build a graph from a list of tokens .
11030	Get time units and multiplier for seconds .
11031	Format a duration in seconds .
11032	Path event handler
11033	Create the UI for the graph .
11034	Split a sequence into multiple lists .
11035	Split an iterable into multiple windows .
11036	Main entry point .
11037	Gets the children of the given object .
11038	Append a child to an object
11039	Insert a child into an object
11040	Remove a child from an object
11041	Called when children is replaced
11042	Called when children items are changed
11043	Get label from object .
11044	Set label on object
11045	Called when the label is changed
11046	Initialize the panel .
11047	Update editor widget .
11048	Add the listeners to the editor .
11049	Called when a node has been replaced .
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Called when an object is replaced .
11053	Called when an edge is changed .
11054	Add edges to the graph .
11055	Parse xdot directive .
11056	Handle drawing .
11057	Return a Node instance .
11058	Return an edge factory .
11059	Create a proxy for the database .
11060	Parse xdot directive .
11061	Parse xdot label directive .
11062	Handle drawing changes .
11063	Called when the component has changed .
11064	Change the position of the component
11065	Handle the right down event .
11066	Show information about available styles .
11067	Draws the mainlayer .
11068	Check if a point is in the polygon .
11069	Draws the mainlayer .
11070	Handle an event .
11071	Run the worker thread .
11072	Get full page url .
11073	Render the previous and next page links .
11074	Render the paginated links .
11075	Check if candidate content type matches pattern .
11076	Selects the requested content type based on the requested content type .
11077	Rewrite a URL .
11078	Remove authentication from a URL .
11079	Create a URL identifier .
11080	Normalize a host string .
11081	Discover modules in a directory .
11082	Find all modules in a directory .
11083	Return a list of modules and their dependencies .
11084	List all classes in a module .
11085	Return a list of classes in a module .
11086	Ensure directory exists .
11087	Put text into blob .
11088	Checks if a card number is valid .
11089	Get the version of git
11090	Loads the specified module .
11091	Add path to self . paths
11092	Find a module by name .
11093	Split a line into multiple lines .
11094	Remove all namespaces in the document .
11095	Validate that all versions are equal .
11096	Create an instance from YAML .
11097	Update self . actions with new_dict
11098	Execute all actions in the given directory .
11099	Create an instance from YAML .
11100	Add details to error Reporting .
11101	Emit a record .
11102	Add image_rendition to context .
11103	Log an account attempt .
11104	Add url to queue .
11105	Start workers .
11106	Set the value in the KVStore .
11107	Get a value from the store .
11108	Get the contents of a key .
11109	Return the Consul - Index header
11110	Deletes a key from the store .
11111	Plot a heatmap .
11112	Returns a new datetime with the given number of months .
11113	Add months to date
11114	Is the christmas period?
11115	Use a music service .
11116	Use storage service .
11117	Read data from csv file .
11118	Load the results from a JSON file .
11119	Save data to json file .
11120	Filter data by reference label .
11121	Calculate the average of the values in X by a reference label .
11122	Compute the feature importance report .
11123	Restore session data
11124	Merge dict b into a .
11125	Decorator for dispatching functions .
11126	Decorator to mark a method as a method .
11127	Find registered blocks .
11128	Verify that the given block is registered .
11129	Register a new block .
11130	Unregisters the given block type .
11131	Convert a file to an MP3 file .
11132	Determine a reasonable version based on the current version .
11133	Handle SSL requests .
11134	Initialize celery .
11135	Queues an email .
11136	Parse the Accept header .
11137	Parse a cache - control header value .
11138	Parse a ContentType header .
11139	Parse a forwarded header value .
11140	Parse a string into a list .
11141	Parse a list of parameters into a list of parameters .
11142	Resize an image to fit width
11143	Add a value to this link .
11144	Download the file at url .
11145	Connect to Google Drive API .
11146	Uploads a file to Google Music .
11147	Connect to the music folder .
11148	Write out the sky parameters to file .
11149	Update filenames .
11150	Read ahhi absorption from file .
11151	Scales a_phi by a parameter
11152	Read the pure water absorption from a file .
11153	Read the pure water scattering from a file .
11154	Read IOP from file .
11155	Write iop to file
11156	Build the b of the particle
11157	Build the absorption matrix
11158	Build the total attenuation C
11159	Build all b and c from IOPs
11160	Set batch parameters
11161	Read a parameter file to a dictionary .
11162	Convert a string to a list of floats .
11163	Read the PPR report .
11164	Set the handler for the given signals .
11165	Signal handler .
11166	Default handler for signals .
11167	Pauses the specified signal handler .
11168	Called when a process exits .
11169	Process status signal .
11170	Unregisters an event from the list
11171	Fetch a metric .
11172	Wrapper for fetch_metric
11173	Return a list of elements from iterable .
11174	Print an item to stdout .
11175	Print all items in iterable .
11176	Extract the signature from a function .
11177	Copy the signature from a partial .
11178	Return new argv with new parameters .
11179	Determine if a file is likely to be ignored .
11180	Return priority for given filename .
11181	Convert vlq to integer .
11182	Read a table from a stream .
11183	Parse the header of the archive .
11184	Convert seconds to string
11185	Print detailed details .
11186	Parses the data from the UI .
11187	Search the result file .
11188	Write batch to file .
11189	Extract the data from the result file
11190	Display the connection
11191	Print the graphic information .
11192	Display the error message .
11193	Hide the error message .
11194	Execute planarrad
11195	Cancel the planar radians .
11196	Quit the PlanarRad
11197	Save the figure to disk
11198	Open the log file .
11199	Open the documentation window .
11200	Perform prerequisites
11201	Handle click events
11202	Mouse move event handler
11203	Display the graphic .
11204	Create a LockSet for the given genesis block .
11205	Sign this message with a private key .
11206	signatures are non deterministic
11207	stror or one of quorum noquorum quorum quorum quorum
11208	In the IOU fungible the supply is set by Issuer who issue funds .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid lockset on height
11212	setup a timeout for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring see utils . cstr
11215	Calculate delay for packet .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the contract on the chain
11218	returns class _on_msg_unsafe use x . im_msg_unsafe to get class
11219	registers NativeContract classes
11220	returns True if unknown
11221	receives rlp . decoded serialized
11222	Convert image to image
11223	Convert image to JPEG
11224	Get the F layer .
11225	Returns the layer output .
11226	Get the features for a given layer .
11227	Create a new key file .
11228	Finish the bulk load job
11229	Loads a GTF file .
11230	Put multiple items into the queue
11231	Release the table .
11232	Returns a list of the names of the tables .
11233	Fixes distutils . ccompiler
11234	Find theteradata server .
11235	Get a config value .
11236	Set a value in the config file .
11237	Handle table output
11238	Execute a query .
11239	Get a value from the settings .
11240	Write the default configuration .
11241	Set a column filter .
11242	Writes the data to a writer .
11243	Return the value as a list of strings .
11244	Parse string with multiplier .
11245	Parse a string into a dictionary .
11246	Convert string to device settings .
11247	Wrap text with given indentation .
11248	Return a list of devices and their text .
11249	Set the center frequency
11250	Compute the FFT and pwr array .
11251	Wait for the given state to complete .
11252	Calculate the PSD .
11253	Read the packet from the file - like object f .
11254	Write pwr_array to file .
11255	Submit a function to the work queue .
11256	Return the number of times to repeat .
11257	Generate a frequency plan .
11258	Create a sample buffer .
11259	Setup the PSD .
11260	Stop streaming stream .
11261	Set up the PSD .
11262	Perform a sweep .
11263	Set the receiver s address .
11264	Run zql build with CMake
11265	Filter the given list of datetimes .
11266	Mask datetime .
11267	Mask the given datetime in the specified week .
11268	Filter a list of datetimes to keep only the specified number of days .
11269	Return a list of datetimes to be deleted .
11270	Return a set of dates to keep .
11271	Return a list of dates to be deleted .
11272	Return the control byte based on the read and write command .
11273	Read a single bit .
11274	Write a single bit to an address .
11275	Get the bit number from a bit pattern .
11276	Watches events for a port to the event_queue .
11277	Process events from the event queue .
11278	Tries to bring the GPIO interrupt into userspace
11279	Set a GPIO interrupt edge .
11280	Waits until a file exists .
11281	Register a pin function .
11282	Deregisters a pin .
11283	Enable GPIO interrupts .
11284	Send data to the SPI device .
11285	Render the tabs .
11286	Returns True if any of the fields have any of the field names .
11287	Render the link for the form .
11288	Extract the version of a package .
11289	Add additional keyword arguments to the form .
11290	Check the status of the response .
11291	HTTP GET request
11292	Get download link .
11293	Get a link to a file .
11294	Uploads a file to a folder
11295	Upload a remote URL to the server .
11296	Retrieves the status of a remote upload .
11297	Retrieves information about a folder .
11298	List running converters .
11299	Calculate the humidity .
11300	Calculate the dewpoint .
11301	Publish the message .
11302	Calculate the CRC for the given data .
11303	Verify the CRC
11304	Unpack storm date into string .
11305	Determine whether this record should be used .
11306	Send WAKEUP .
11307	Send a command to the device .
11308	Send DMPPAFT command .
11309	Get the fields of the archive .
11310	Parse the loop .
11311	Update weather data for a station .
11312	Initialize logging .
11313	Return a list of services from the given options
11314	Determine the wind speed .
11315	Set Airflow parameters .
11316	Set the arguments .
11317	Publish the configuration to the file .
11318	Wrap a function with a request .
11319	Initialize Flask extension
11320	Return True if all requirements are satisfied .
11321	Push a context onto the stack .
11322	Remove the override context from the stack .
11323	Override the current value .
11324	Add additional context to current context .
11325	Remove an additional context from the stack .
11326	Context manager to add additional information .
11327	Returns a list of unique field names .
11328	Interpret the stats .
11329	Extract parameters from a query .
11330	Run a query and return the result .
11331	Convert to pandas . DataFrame .
11332	Get a networkx graph from the results .
11333	Draws a pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Return a CsvResultDescriptor for this query .
11337	Check if user is permitted .
11338	Add the context data to the context .
11339	Return a list of widgets sorted by position .
11340	Returns a list of widgets that need to be updated
11341	Register a dashboard widget .
11342	Unregister a widget
11343	Returns the last update of the dashboard widget .
11344	Get the setting for this dashboard .
11345	Save a setting to the dashboard .
11346	Determine if we should update .
11347	Create an array from an array .
11348	Return a new array filled with ones .
11349	Concatenate two arrays .
11350	Check if args are valid .
11351	Format key axes .
11352	Wraps a function into BoltArraySpark .
11353	Align the input to the given axes .
11354	Convert to Spark .
11355	Convert this TimeSeries to a series .
11356	Convert the RDD into a new RDD .
11357	Apply a function to each RDD .
11358	Return an RDD with chunk sizes .
11359	Apply a function to the RDD .
11360	Applies a function to each Spark RDD .
11361	Return the plan for this block .
11362	Remove padding .
11363	Calculate the number of chunks .
11364	Return a list of slices for a plan .
11365	Return a boolean mask of indices .
11366	Repartition this DStream into a new RDD .
11367	Return a new StackedArray .
11368	Align self to the given axis .
11369	Return the first value of the RDD .
11370	Compute a statistic on this RDD .
11371	Compute mean along requested axis .
11372	Compute the variance along an axis .
11373	Compute the standard deviation along an axis .
11374	Sum along axis .
11375	Compute the maximum value along an axis .
11376	Compute the minimum along an axis .
11377	Returns an RDD of chunks of this RDD .
11378	Swap the values of two axes .
11379	Transpose the DataFrame along an axis .
11380	Swap two axes .
11381	Reshape this array to a new shape .
11382	Reshape basic shape .
11383	Slice along axis .
11384	Cast each RDD to a new dtype .
11385	Clip the elements in this RDD .
11386	Convert the RDD to a numpy array .
11387	Convert an argument to a tuple .
11388	Pack a list of arguments into a single tuple .
11389	Ensure shape is valid .
11390	Return True if two arrays are equal .
11391	Convert a list of integers to a list .
11392	Convert a slice into a slice .
11393	Check if new keys are transposed .
11394	Ensure that new keys are reshapeable .
11395	Return a concatenated list of allstack items .
11396	Expand dimensions of an array .
11397	Zips an RDD by index .
11398	Wrap a function into a wrapped function .
11399	Look up a constructor by its arguments .
11400	Reshape the array to new shape .
11401	Transpose the BoltArray along the given axes .
11402	Reshape the stream .
11403	Transpose the array .
11404	Create a new array of ones .
11405	Create a new array of zeros
11406	Concatenate multiple arrays .
11407	Calculate the log likelihood of the given data .
11408	Returns the most likely alpha of the given data .
11409	Calculate discrete alpha .
11410	Determine the most likely alpha of the data .
11411	Determine the best alpha of the data .
11412	Plot the probability density .
11413	Calculates the likelihood ratio of the data .
11414	Sanitize HTML .
11415	Configure analytics for Yandex .
11416	Return list of taggit - tag
11417	Return an MD5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Parse a long value .
11421	Decode the public key .
11422	Parse the command line options .
11423	Process an SSH public key .
11424	Process the SSH DSS message .
11425	Process ECDSA SHA256 hash .
11426	Processed ed25519 data .
11427	Parse SSH2 public key .
11428	Perform a single step .
11429	Process an input token .
11430	A list of mechs .
11431	Store the current credentials .
11432	Main function .
11433	Initialize distribution .
11434	Create audio file .
11435	Return the HTML for the h5bp CSS .
11436	Link to dj frontend normalize .
11437	Render the fontawesome .
11438	Template tag for django - frontend .
11439	Template tag to render dj frontend jquery .
11440	Template tag that renders the jquery UI .
11441	Template tag for dj frontend . DataTables
11442	Return the CSS for the jquery data .
11443	Template tag to render the jquery_data tables .
11444	Template tag that renders the jquery form .
11445	Template tag that renders the scrollTo JavaScript code .
11446	Template tag to render the jupyter notebook .
11447	Return the CSS for twos .
11448	Render Google frontend page .
11449	u Render JavaScript codearea .
11450	Generate authentication hashes .
11451	Calculate the expiration time for a given number of minutes .
11452	Create a user token .
11453	Serialize a User object .
11454	Deserialize a profile .
11455	Update a user s profile .
11456	Called when an authentication failed .
11457	Validate and return a User object .
11458	Check if the request is secure .
11459	Get the username for a given user .
11460	Create a new user .
11461	Login a user .
11462	Logs out the user .
11463	Login with params .
11464	Login with password
11465	Login with a resumption token .
11466	Change the user s password .
11467	Send a password message .
11468	Reset a user s password
11469	Recursively merge two dicts .
11470	Read the contents of a file .
11471	Return the id of an object or None .
11472	Given an iterable of object ids return a dict of dicts .
11473	Get the object id for a meteor .
11474	Get object IDs from meteor_ids .
11475	Get an object by ID .
11476	Set the defaults for an operation .
11477	Set the default value for an operation .
11478	Truncate the given models .
11479	Truncate the database .
11480	Truncate the database .
11481	Initialize the build options .
11482	Set undefined options .
11483	Build the meteor app .
11484	Convert path arguments to a directory .
11485	Seed the seed with the given values .
11486	Return the current state as a dict .
11487	Generate a random string .
11488	Decorator to register an API endpoint .
11489	Generator for all API endpoints .
11490	Clear the API path map .
11491	Pretty print a value .
11492	Validate kwargs .
11493	Called when the websocket connection is open .
11494	Called when the connection is closed .
11495	Called when a message arrives .
11496	Generator for DDP frames
11497	Process a DDP message .
11498	Dispatch a message .
11499	Handle a connection .
11500	Send a ping command .
11501	Receive a subscription .
11502	Remove a subscription .
11503	Send a method
11504	Return info about the websocket .
11505	Run DDP server .
11506	Main entry point .
11507	Print msg with verbosity level .
11508	Stop all server threads .
11509	Start the worker thread .
11510	Connect to PostgreSQL server .
11511	Process a connection .
11512	Make sure psycopg2
11513	Generate a random ID .
11514	Autodiscover dddp .
11515	Return the error as a dict .
11516	Get an object by name .
11517	Send a log message .
11518	Create a handler for a request .
11519	Context manager to add a route to the application .
11520	Add a resource object .
11521	Runs the application .
11522	Send a message .
11523	Send an alert to APNS .
11524	Fetch expired IDs from APNS .
11525	Send data to GCM .
11526	Send a list of messages to GCM server .
11527	Send data to GCMP server .
11528	Send data to the API .
11529	Return a model class from a module location .
11530	Fast forward selection algorithm .
11531	Search giphy .
11532	Use Giphy to translate text .
11533	Get trending tweets .
11534	Fetches a gif by id
11535	Get a screenaver .
11536	Upload a photo to a file .
11537	Convert a dictionary to integers .
11538	Fetch an endpoint
11539	Get a Giphy image
11540	Return a generator of Giphy images .
11541	Fetches a Giphy image .
11542	Upload a gif from a file .
11543	Return the access control extension .
11544	Login to YouTube .
11545	Upload a new video .
11546	Check video status .
11547	Update a video entry .
11548	Delete a video from Youtube
11549	Check video availability .
11550	Display a single video .
11551	Show list of videos .
11552	Upload a direct video
11553	Upload a new video .
11554	Upload a video .
11555	Remove a video .
11556	Get a single entry
11557	Create or update the video .
11558	Delete video
11559	Update metadata .
11560	Update a specific metadata field .
11561	Update this item .
11562	Deserialize a string into a list of Node objects .
11563	Dump a tree into a string .
11564	Deserialize the contents of a file - like object .
11565	Load the contents of a file .
11566	Parse a string into a Node object .
11567	Create a new node .
11568	Return a string representation of the node .
11569	Return ASCII art .
11570	Return the node with the given label .
11571	Prune the tree .
11572	Resolve polytomies .
11573	Remove internal names of all nodes .
11574	Removes all leaf names from the tree .
11575	Decorator to check if a user is authenticated
11576	Disposes a JSON string into a list .
11577	Raise an exception if the specified setting does not exist .
11578	Get an argument by name .
11579	Get a list of values from the request .
11580	Wraps a callback .
11581	Retrieves a cookie value
11582	Clear a cookie .
11583	Redirect to OpenID .
11584	Get the authenticated user .
11585	Builds the request parameters .
11586	Redirect to the OpenID endpoint .
11587	Make a request to Facebook .
11588	Get an authenticated user .
11589	Concatenate a URL .
11590	Parse a header line .
11591	Add a value to the headers .
11592	Get a list of values as a list .
11593	Parse a line of text .
11594	Parse HTTP header .
11595	Normalize header name .
11596	Convert to utf8 .
11597	Convert to unicode .
11598	Convert the given value to a string .
11599	Recursively convert objects to unicode .
11600	Ensure that this plugin is registered .
11601	Iterate over all subclasses of cls .
11602	Based on the matching strategy and optionally the requested method .
11603	Determine if a grid is occupied
11604	Write a groo file .
11605	Write a PDB file .
11606	Determine the number of molecules .
11607	Resizes the contents of a PBC box .
11608	Write top molecules .
11609	Iterate over a resource file .
11610	Send a message to a user .
11611	Send a message to multiple users .
11612	Get the user s messages .
11613	Add messages to the request .
11614	Check config file .
11615	Verify that the profile name is valid .
11616	Retrieve data from config .
11617	Extract password from config .
11618	Update config data .
11619	Update the cfg . pwd with information about a message .
11620	Create config profile
11621	Display required items .
11622	Get data from user .
11623	Get auth data from the user
11624	Configure profile .
11625	Write data to cfg
11626	Write auth data to cfg
11627	Add attachments to message
11628	Send the message .
11629	Send a message .
11630	Return a message factory .
11631	Create a private property .
11632	Validate a property .
11633	Validate input .
11634	Validate that a Twilio attribute is valid .
11635	Validator for SlackPost .
11636	Ensure that the email is valid .
11637	Synchronously send messages .
11638	Add a message to the coroutine .
11639	Read the body of a file .
11640	Remove arguments from kwds .
11641	Send a message .
11642	Get chat id from username
11643	Send message to server .
11644	Sends the message .
11645	Determine the server name for an email address .
11646	Generate the email
11647	Add the email header to the message .
11648	Add the message body
11649	Add attachments to the message
11650	Return an SMTP session
11651	Return an SMTP SSL object
11652	Return an SMTP session
11653	Send and send the email .
11654	Save the tag to a file .
11655	Unload the image .
11656	Get a region of the current image .
11657	Validate the properties .
11658	Clears the internal list .
11659	Return a string representation of the comment .
11660	Read data from the file .
11661	Delete this chunk from the file - like object .
11662	Resizes the chunk to the given size .
11663	Insert a new chunk into the file .
11664	Save ID3 to file .
11665	Delete the contents of the file .
11666	Parse a file .
11667	Process a line .
11668	Add a SourceBlock to the block .
11669	Draws a string on the given font .
11670	Parse an ISO 8601 time string .
11671	Make a list of words .
11672	Turn word into HTML .
11673	Make HTML paragraph .
11674	Make HTML code block .
11675	Convert a list of items into HTML .
11676	Save metadata to file .
11677	Update parent files .
11678	Run the bot .
11679	Register a mapping .
11680	Retrieves the registered controller .
11681	Registers a freeform key .
11682	Calculates the HMAC - SHA256 for the given string .
11683	Build request headers .
11684	Send a request .
11685	Send a GET request to the API .
11686	Send a POST request to the API .
11687	Send a DELETE request .
11688	Return an APE value .
11689	Send a request to the remote device .
11690	Perform an autopaginating API call .
11691	List hosted zones .
11692	Create a new hosted zone .
11693	List resource record sets by ID .
11694	Change the resource record set .
11695	Draw an image .
11696	Draw a region of an image .
11697	Return the size of the packet .
11698	Replace old_pages .
11699	Find the last page in the fileobj .
11700	Set a section
11701	Add a new doc markup .
11702	Processes the content .
11703	Return the markup with the given tag name .
11704	Create a writer for a hosted zone .
11705	Lock a file .
11706	Insert the given size into the given file object .
11707	Delete the given offset from the given file object .
11708	Convert data to UTF - 8 .
11709	Add a change to the list .
11710	Parses the change info element .
11711	Measure the width of a string .
11712	Check if the model has been modified .
11713	Delete this zone .
11714	Save this zone to the hosted zone .
11715	Parse ID3v1v1 tag .
11716	Make ID3v1v1 v2v1 v2 .
11717	Read bytes from the file .
11718	Delete all keys with the given key .
11719	Called when a frame is loaded
11720	Update common API versions .
11721	Convert to version 2 . 0 format
11722	Unload the sound .
11723	Play the sound .
11724	Set the loop points .
11725	Return glyphs and values .
11726	Return a list of glyph names that match the filter .
11727	Dump encoding to file .
11728	Dump an array to a static const array .
11729	NAME pyplot . py
11730	Check if a file exists
11731	Make a list of files from argv .
11732	Parses a hosted zone element .
11733	Parses the delegation set for a zone .
11734	Write blocks to file .
11735	Group padding blocks .
11736	Delete the VCFLACDict
11737	Save metadata to file .
11738	Parses the DNS record element and returns the DNS zone ID and DNS name .
11739	Return a list of the values of the RRset element .
11740	Parse an RRset element .
11741	Delete this hosted zone .
11742	Add a record to this hosted zone .
11743	Create an A resource record .
11744	Create a new AAAA record .
11745	Create a new CNAME record .
11746	Create a new MXNet record .
11747	Create a new NS record .
11748	Create a new PTR record .
11749	Create a new SPF record .
11750	Create a new SRV record .
11751	Create a new TXT record .
11752	Registers a TXXX frame .
11753	Get initial values for a change .
11754	Generate a change element .
11755	Create a new change record set .
11756	Initialize logging .
11757	Return an item by its alias .
11758	Freeze a dictionary .
11759	Join HTML attributes .
11760	Initialize the application .
11761	Initialize all bars .
11762	Bind a bar to the bar .
11763	Return the arguments of the command .
11764	The URL for this request .
11765	Check if the current request is the current endpoint
11766	Validate the metric class .
11767	Get a stat by name .
11768	Calculate statistics for a stat .
11769	Auto - discover INSTALLED_APPS .
11770	Dump the metrics for a given metric .
11771	Handle maintenance .
11772	Get a list of values from a GET request .
11773	Get a GET parameter from the request .
11774	Return the next colour .
11775	Get parameters for a Gecko query .
11776	Displays the number of the Geckoboard number .
11777	Gets the latest count for the current user .
11778	Displays a line chart for a given metric .
11779	Gets the current geckoboard .
11780	Displays the latest count of the selected metrics .
11781	Return a list of gadgets .
11782	Register a gadgets .
11783	Return context data .
11784	Print an error message and exit .
11785	Decorator to validate parameters .
11786	Prompt for long input .
11787	Prompt user for input .
11788	Prompt the user for a file .
11789	Return a DataFrame of games for a given year .
11790	Returns the winner of the game .
11791	Returns the season of the date .
11792	Return a dataframe of starters .
11793	The surface of the game .
11794	Get coinoss information .
11795	Get the weather .
11796	Retrieve information about the organisation .
11797	Return a pandas DataFrame representing the game s schedule .
11798	Return a pandas DataFrame with the standings for the team .
11799	Get table of team stats .
11800	Return a pandas DataFrame of River objects .
11801	Returns a DataFrame of the line scores .
11802	Returns the season of the date .
11803	Get stats from table .
11804	Decorator to switch to a specific directory .
11805	Decorator to cache functions .
11806	Return a unique key for a class instance .
11807	Decorator to cache results of a function .
11808	Returns the age of a person
11809	Get stats table .
11810	Get the stats for the current game .
11811	Get the total stats table .
11812	Return statistics about the per - minute stats .
11813	Return statistics about the per - position per percent .
11814	Get statistics table .
11815	Get a stats table .
11816	Get extended statistics table .
11817	Return the basic playoffs for the game .
11818	Get memory session data .
11819	Expand the details columns into a DataFrame
11820	Add team and opp .
11821	Add team features to dataframe
11822	Calculate the initial win probability for a line .
11823	Pandas DataFrame . DataFrame . DataFrame .
11824	Simple year award .
11825	Returns the team s name
11826	Return box scores for a given year .
11827	Get information about the year in the year .
11828	Get the head coaches by game .
11829	Returns a pandas dataframe for the game .
11830	Return the OFF coordinator .
11831	Return the Defensive Coordinator .
11832	Return the team s team id .
11833	Get offensive scheme .
11834	Returns the Defensive Alignment for the given year .
11835	Returns a DataFrame containing the split values for the given year .
11836	Fetch html from url
11837	Flattens the content of the HTML element .
11838	Convert a relative URL to an ID .
11839	Convert keyword arguments to query parameters .
11840	Read data from HDF5 file .
11841	Return a copy of the read queue .
11842	Get a direct connection .
11843	Close the connection .
11844	Get a batch of data from HDF5 .
11845	Get the remainder of the file at path .
11846	Get a queue from the path .
11847	Get a generator from a queue .
11848	Parse the contents of a file or file - like object .
11849	Dump objects to a file .
11850	Read a varint from the stream .
11851	Get objects from the stream .
11852	Close the file .
11853	Write objects to the stream .
11854	Flush write buffers .
11855	Get the directory of the game .
11856	Input text with keyboard emulation .
11857	Make a fake movie .
11858	Evaluate traits .
11859	Wait until a condition evaluates to True .
11860	Wait until all traits are present .
11861	Add ignored exceptions .
11862	Get the volume value
11863	Returns the main source
11864	Send a message to the remote host .
11865	Return the status of the device .
11866	Power off .
11867	Power on .
11868	Set the volume .
11869	Select a power source
11870	Deobfuscate the given request .
11871	Calculate the CRC32 of the plaintext .
11872	Obfuscate a value .
11873	print missing schema
11874	Return a list of all hrefs
11875	Check if song is a song name
11876	Parse a song .
11877	Build the URL for a song .
11878	Parses the page and returns the URL of the download .
11879	Parses a song .
11880	get html response from url
11881	Download a file using requests .
11882	Download a file using wget
11883	Get a list of station codes by city name .
11884	Get information about a geographic location .
11885	Parse an observation response
11886	Get information about a station .
11887	Return search paths .
11888	A list of compiler extensions .
11889	Return the mimetype of the extension .
11890	Return the mime type of the compiler .
11891	Return the compiler format extension .
11892	Register a processor for a given mimetype .
11893	Unregister a registered processor .
11894	Return a list of paths for all found finders .
11895	Register default values .
11896	Import QtCore module .
11897	Get the metadata netnode .
11898	Add a name to the netnode s metadata .
11899	Delete a netnode plugin name
11900	Import settings from config_path
11901	Export settings to config_path
11902	Property to access directory settings .
11903	Iterate over all keys .
11904	Simple error handler .
11905	Get a table by name
11906	List all DynamoDB tables .
11907	Fetch items for a category
11908	Get the id of an item .
11909	Return the updated timestamp of the item .
11910	Fetch crate owner .
11911	Fetch crate owner .
11912	Fetch versions of crate .
11913	Fetch the crate version information .
11914	Fetch crate data .
11915	Returns the raw data for the category
11916	Get list of crates
11917	Get a crate .
11918	Fetch a crate attribute .
11919	Fetch items from API
11920	Fetch data from catalog .
11921	Fetch the questions for the specified category .
11922	Return a generator of questions .
11923	Fetch events .
11924	Get the last updated date of an item
11925	Determine the category of an item
11926	Get items from ReMo .
11927	Return the buffer list .
11928	The priority of the IOCB .
11929	Release the IO queue .
11930	Submit a list of blocks .
11931	Cancel the associated block .
11932	Cancel all submitted blocks .
11933	Return a list of events .
11934	Fetch events .
11935	Retrieves all cells from GoogleClub .
11936	Parse the feed
11937	Return a list of registered formats .
11938	Return the permission factory .
11939	Create a record blueprint .
11940	Create a url rule .
11941	View for a record .
11942	r Default view method .
11943	r Export a record .
11944	Time a callable .
11945	Close the socket .
11946	Remove a client from the pool .
11947	Increment a metric by name .
11948	Send a timing request .
11949	Record the timing since the given timestamp .
11950	Send a gauge .
11951	Send a gauge delta .
11952	Set a metric to value .
11953	Process a request .
11954	Return a batch client .
11955	Return a unit client .
11956	Flush the batches .
11957	Return a permission checker factory .
11958	Return a batch client .
11959	Flush the batched data .
11960	Return a new TCP client .
11961	Create or update an existing user .
11962	Interpret an object as OpenMath .
11963	Convert a term to OpenMath .
11964	Convert OMS object to Python object .
11965	Convert obj to OpenMath .
11966	Register a class to openmath .
11967	Deprecated version of _conv_to_py
11968	Initialize the Flask application .
11969	Return a list of tuples containing valid choices .
11970	Split model keyword arguments into dictionaries .
11971	Decorator to register a function .
11972	Create a value from an object instance .
11973	Returns the default values for a form .
11974	Decorator to check if a field is required
11975	Decorator for field choices attribute .
11976	Return a string representation of a decimal field .
11977	Return the data for an email field .
11978	Returns a string representation of a date field .
11979	Returns a datetime field .
11980	Return a string representation of a float field .
11981	Return a string representation of an integer field .
11982	Returns a random time field .
11983	Return a random choice field .
11984	Render a single choice field .
11985	Return data for a model choice field .
11986	Convert Python object to bytes .
11987	Publish package
11988	Tag current version
11989	If any field is blank return None .
11990	Load a python global variable .
11991	Build an object from an instance .
11992	Create an OML application .
11993	Construct an OM application .
11994	Decode the given data .
11995	Convert a string to a byte string .
11996	Convert value to fixed precision .
11997	Format a number .
11998	Convert number to money .
11999	Convert blosc data to numpy array .
12000	Compress data from an array .
12001	Add a new workspace .
12002	Remove a workspace .
12003	List available workspaces .
12004	Retrieves a user s name
12005	Check if a repository exists .
12006	Synchronize workspace
12007	Clone a repository
12008	Check if ndio is available
12009	Returns the indices of the voxels in a numpy array
12010	Convert voxels to numpy array
12011	Print out a workspace .
12012	print latest update
12013	Add a console handler .
12014	Execute a command .
12015	Load a PNG file .
12016	Save numpy data to png file .
12017	Save numpy data to PNG files .
12018	Print the status of a workspace .
12019	print status of repo
12020	Get the block size
12021	Posts data to blosc
12022	Load a tiff file .
12023	Save numpy data to tiff file .
12024	Load a TIFF file .
12025	Write the current configuration to a file .
12026	Clone the current branch
12027	Get the version of yoda .
12028	Mix two names together .
12029	Print an option decorator .
12030	Get a list of reserved ids
12031	Merge multiple ids
12032	Propagate to channel
12033	List projects in dataset .
12034	Get a dataset by its name .
12035	List available datasets .
12036	Parse the command line options .
12037	Show a workspace
12038	Shows information about a workspace .
12039	Print all available workspace names .
12040	Generate a full URL for a given endpoint .
12041	Guess the format from a file extension .
12042	Open a file .
12043	Convert an input file to another .
12044	Build a build graph .
12045	Compute invariants for a graph file .
12046	Convert a networkx graph to another format .
12047	Convert a list of ramons to a dictionary .
12048	Convert RAMON type to RAMON
12049	Deletes a channel .
12050	Add a dataset
12051	Convert dataset list to JSON .
12052	Create a dataset dictionary .
12053	Create a channel dictionary .
12054	Create a project dictionary .
12055	Return image size .
12056	Upload data to ndio
12057	Find the path to a workspace .
12058	Get public tokens .
12059	Get project information
12060	Set OCP metadata .
12061	Get a URL .
12062	Perform a POST request .
12063	Delete a URL .
12064	Loads an image from disk .
12065	Save an array to a file .
12066	Infer gaps in a phylogenetic tree
12067	Recover the contents of an open stream .
12068	Install Jinja2 translations .
12069	Execute a Thunk in the given state .
12070	Calculate the percentage of part .
12071	Get cache stats .
12072	Get cache slabs .
12073	Add context data to data .
12074	Show server status .
12075	Render the memcache dashboard .
12076	Display memcache statistics .
12077	Display memcache slabs .
12078	Convert a number of bytes to a human readable string .
12079	Return a Config object for the given children .
12080	Add a directory to this environment .
12081	Apply the given applicator to the file .
12082	The path of the file .
12083	Read the contents of the file
12084	Write data to file .
12085	Configure the logger .
12086	Create the file .
12087	Applies the given applicator to this node .
12088	The absolute path of the file .
12089	Remove this directory .
12090	Prepares the environment .
12091	Cleanup the children .
12092	Return the path to the given path
12093	Return a list of file objects .
12094	Write data to file .
12095	Read the contents of a file
12096	Add one or more files .
12097	Save the current configuration .
12098	Load the yaml file
12099	Clean up the temporary directory .
12100	Load all plugins in a directory
12101	Recursively update a dict .
12102	Create a child node .
12103	Resolve the path into a tuple .
12104	Get the value of the container .
12105	Update this ConfigNode with the given data .
12106	Loads the configuration from disk .
12107	Convert a string to a string .
12108	Build a callback URL .
12109	Read the socket and process it .
12110	Write output to socket .
12111	Send an RPC call .
12112	Reads socket input from socket .
12113	Write socket output .
12114	Decorator to check if a link is not reentrant
12115	Returns a list of settings for the remote device .
12116	Configure the ppn node .
12117	Return the source address of the peer .
12118	The target address of the target .
12119	Called when the parent session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Request a receiver link .
12124	Called when a link is destroyed .
12125	Called when the session is closed .
12126	Process an endpoint event .
12127	Add mark markup to mark .
12128	Called when a remote connection is closed .
12129	Called when the receiver fails .
12130	Extract host and port from an AMQP server address .
12131	Connect to host and port .
12132	Create a server socket .
12133	Determine which connections need to be processed .
12134	Decorator to check that a connection is not reentrant .
12135	Process SASL .
12136	Return the next output buffer .
12137	Create a new sender .
12138	Rejects a sender link .
12139	Create a new receiver .
12140	Called when the connection fails .
12141	Called when a connection is active .
12142	Called when the connection is closed .
12143	Called when an error occurred .
12144	View decorator .
12145	Return a string representation of the color .
12146	Returns a dictionary of font names .
12147	Set compression option .
12148	Add a new object to the buffer .
12149	Write stream to page
12150	Print a stream .
12151	Add a new page to the document .
12152	Set color scheme .
12153	Set default font .
12154	Add a new page .
12155	Set font size
12156	Add text to the PDF .
12157	Add a new line
12158	Add pie chart .
12159	Output the pages .
12160	Return a list of indexes that have been changed .
12161	Output all font files .
12162	Output the images .
12163	Output the output .
12164	Transform a matrix .
12165	Return the absolute position of x and y .
12166	Set the style .
12167	rotate point x and y coordinates
12168	Set the attributes of an object .
12169	Set display mode .
12170	Write output to file .
12171	Put the PDF header .
12172	Output pages .
12173	Put resource dict .
12174	Write information about the product .
12175	Put catalog .
12176	Add the trailer to the buffer .
12177	Perform a breadth - first search on a set of sequences .
12178	Iterate over a sequence of values yielding cycles .
12179	Iterate over a sequence of sequences .
12180	Brent search .
12181	returns True if x < = xmax
12182	Returns True if y < = length
12183	Checks if this coordinate is greater than the given coordinate .
12184	Checks if the y coordinate is greater than the given coordinate .
12185	Return a copy of this cursor .
12186	Add x to x .
12187	Add y to y
12188	Render the table .
12189	Create a tag
12190	Lists tags
12191	Get all labels by name .
12192	Update a label
12193	Delete a tag
12194	Create a tagit
12195	List all tags
12196	Return a list of tags with the specified label .
12197	Create a hook .
12198	List all hooks .
12199	Update a hook .
12200	Create an alert
12201	Get alerts by type .
12202	Update alert .
12203	Setup Sphinx extension .
12204	Return the path to the themes directory .
12205	Generic POST request .
12206	List hosts .
12207	Get a single log .
12208	Finds the tracker slacker slider .
12209	The duration of the waveform .
12210	Update the limits and transit models .
12211	Compute the model parameters .
12212	Build a Bin object .
12213	Free memory usage .
12214	Receive data from the socket .
12215	Read lines from the buffer .
12216	Generator for buffered data .
12217	Return status and message from the server .
12218	Generate info .
12219	Return an info message
12220	Send a command to the server .
12221	Get capabilities .
12222	Set the reader mode .
12223	Quit the server .
12224	Get the date of the server .
12225	Send HELP command .
12226	Generate new groups .
12227	Generate new news lines
12228	Search for new news
12229	List active newsgroups .
12230	Get list of active_times .
12231	List newsgroups
12232	Get list overview . Fmt
12233	Return list of extensions .
12234	Return a list of dictionaries
12235	Return a list of items .
12236	Get information about a group .
12237	Send NEXT command .
12238	Retrieve an article .
12239	Send HEAD command .
12240	Get the message body .
12241	Send XGTITLE command .
12242	Send XHDR command .
12243	Send XZHDR command .
12244	Generator for Xover .
12245	Generator for X pat .
12246	Return a list of xpatterns matching pattern .
12247	Explicitly compress a feature .
12248	Send a POST command .
12249	Calculate the offset from an integer .
12250	Convert value to timestamp .
12251	Convert value to datetime object .
12252	Perform a POST request .
12253	Perform a DELETE request .
12254	Perform an API GET request .
12255	List scheduled queries .
12256	List tags for current account .
12257	Get tags by name or id .
12258	Create an alert .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create an alert .
12262	Delete an alert .
12263	Convert a range to a string .
12264	Parse a newsgroup line
12265	Parse a line of text .
12266	Convert a list of dicts into a string .
12267	Handle POST request .
12268	Run all tests .
12269	Generate a docstring from defaults .
12270	Add a default docstring to a function
12271	Generate a docstring for this class .
12272	Set the value of the field .
12273	Check that value is of type .
12274	Return the value of the variable .
12275	Check if value is scalar .
12276	The symmetric error .
12277	Set validation errors .
12278	Set the parameter values .
12279	Import metrics .
12280	Extract metrics from metrics .
12281	Filter metrics by filter expression .
12282	Call the API .
12283	Parse an expression .
12284	Parse an operator .
12285	Add an op .
12286	Initialize properties .
12287	Return a list of Parameter objects .
12288	Return a numpy array of parameter values .
12289	Return the values of the parameter errors .
12290	Clear derived parameters .
12291	Setter for method .
12292	Parse environment variables .
12293	Returns the URL parameters .
12294	Perform a GET request
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Validate the sceneInfo
12300	Verify the type product
12301	Get the size of the remote file
12302	Download the scene .
12303	Validate bands
12304	Connect to Earthexplorer
12305	Returns a function that starts with the given prefix .
12306	r Return the timezone for the given zone .
12307	Normalize a datetime .
12308	Join iterable with delimiter .
12309	Return a list of positions of newline positions .
12310	Convert a source to a source code .
12311	Dump the result in text format .
12312	Filters the relay results .
12313	Load a fortune from a list of files .
12314	Set the chance of a game .
12315	Run the main function .
12316	Parse a rule .
12317	Special handling .
12318	Gets the grammar from the input_source .
12319	A list of the grammar s rules .
12320	List of comments .
12321	Return a list of directive directives .
12322	Return the source code for this command .
12323	Compile the template .
12324	Return a string with the import directives .
12325	Returns the enum definition .
12326	Returns the class definition .
12327	Find the entry point .
12328	Return the source code for the given rule .
12329	Return the source code for the given rule .
12330	Return the string representation of a rule .
12331	Convert an expression to an ASN .
12332	Convert an AST node to an ASN expression .
12333	Given a list of operands return a list of operands .
12334	Removes all operands from an optree .
12335	Convert AST node to code .
12336	Convert AST node to code .
12337	Convert an AST node to code .
12338	Convert an option group to code .
12339	Convert an AST to code .
12340	Convert a special handle to code .
12341	Convert an OP_ALTERNATE operator to code .
12342	Convert an AST node into a single opcode .
12343	Convert an expression to an expression .
12344	Convert an operation to a code block .
12345	Return code for one or more operands .
12346	Find directives by predicate .
12347	Return True if child is an expression .
12348	Generator for directive definitions .
12349	Handle results .
12350	Get the id of the given id .
12351	Remove a hotkey .
12352	Add command line arguments .
12353	Configure logging .
12354	Validate the required arguments .
12355	Convert infix nodes to postfix .
12356	Postfix a list of nodes .
12357	Reduce a list of nodes .
12358	Add command line arguments
12359	Load the plugin manifest .
12360	Get a metric definition by its name
12361	Calculate the length of the columns column .
12362	Calculate the length of the metrics column .
12363	Replace underscores with underscores .
12364	Print the field markdown .
12365	Output the metrics header .
12366	Generate markdown .
12367	Parse the input .
12368	Check if text has been consumed .
12369	Add command line arguments
12370	Parse a time date .
12371	Output data in CSV format .
12372	Outputs the results in JSON format .
12373	Output raw data .
12374	Outputs the results in XML format .
12375	Return True if node is empty .
12376	Pretty print the tree .
12377	Return a function that returns a repetition .
12378	Get a terminal node .
12379	Return a parse node .
12380	Get an extractor from text .
12381	Count leading whitespace .
12382	Call an extractor .
12383	The position of this node .
12384	Return True if this node is empty .
12385	Add a list of ignored items .
12386	Check if value is a valid type .
12387	Return a copy of this node .
12388	Return a new ParseNode with all children removed .
12389	Merge two ParseNode objects .
12390	Return a copy of this node .
12391	Return a new parse node .
12392	Return the current position .
12393	Return the maximum read position .
12394	Go to the next character .
12395	Step to the next line .
12396	Step to the previous line .
12397	Return the last readed line .
12398	Move cursor by length .
12399	Save current context .
12400	Restores the current context .
12401	Return a string representation of the notification .
12402	Set the name of this signature .
12403	Return the number of variables in this function .
12404	Return the number of functions in this function .
12405	Update the number of types and functions .
12406	Update this scope .
12407	Return a new scope .
12408	Update the signature with another set .
12409	Return a new scope with the intersection of two symbols .
12410	Remove all symbols that are not in the set .
12411	Return a new scope with the current state .
12412	Update self . _hsig with another set .
12413	Return a new scope with symmetric difference .
12414	Add a signature .
12415	Remove a signature from the set .
12416	Discard the signature .
12417	Return a list of all signatures .
12418	The first signature .
12419	Return the last signature .
12420	Get the value of a signature .
12421	Find a scope by its symbol name .
12422	Get a signature by its name .
12423	Return a Scope object with all of the symbols that are not polygons .
12424	Call injector .
12425	Recursively normalize the given AST .
12426	set attributes from another node
12427	Yield all the values in the list .
12428	Check if a hit is OK
12429	Return the signature for this function .
12430	Determine the resolution of this type .
12431	Get the names of all components of a type
12432	Set the resolved name of the type .
12433	Delete a local file .
12434	Delete a file from S3
12435	Delete a file from S3 .
12436	Saves a local file to obj
12437	Saves an object to S3 .
12438	Save object to temp file .
12439	Find list of objects by path
12440	Create an enum type .
12441	Check that the given function is correct .
12442	Add a thing_name to the chainmap .
12443	Decorator to add a method to the class
12444	Decorator to register a function .
12445	Decorator to define a rule .
12446	Decorator to mark a directive .
12447	Decorator for registering a function .
12448	Binds a node to another node .
12449	Read from the stream .
12450	Push the rules into the cache .
12451	Pop the last rule node .
12452	Return the string representation of the node .
12453	Add a parsed stream .
12454	Begin a tag .
12455	End a tag .
12456	Set the rules .
12457	Set the hooks .
12458	Set the directive directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Peeks ahead of text .
12462	Read one character from the stream .
12463	Read a character from the stream .
12464	Read until EOF .
12465	Ignore whitespace .
12466	Set the dtype of the cluster .
12467	Set cluster dtype
12468	Checks that the struct has the correct dtype .
12469	Add a name to a namespace .
12470	Add rules to BNf
12471	Add a new rule .
12472	Add a sequence to the parser tree .
12473	Add an alternative .
12474	Add a range to the sequence .
12475	Repeat a rule .
12476	Add a capture .
12477	Add a bind to the given cell .
12478	Add a hook to the parser .
12479	Set the number of the parameter .
12480	Parse a string .
12481	Parse a single character .
12482	Set the value of the parameter .
12483	Set the name of the hook
12484	Add parameter to hook .
12485	Evaluate the grammar .
12486	Ignore Cxx comments .
12487	Add a state to the simulation .
12488	Returns a string representation of the graph .
12489	Write the graph to a dot file .
12490	Export the graph to a PNG file .
12491	Return a formatted string .
12492	Return the next state
12493	Reset living state
12494	Infer the type of the block
12495	Infer the type of a subexpr
12496	Infer the inferred value of an identifier
12497	Infer a literal
12498	Dump node information
12499	Return a function definition for a parser rule .
12500	Exit scope .
12501	Create an empty statement .
12502	Return astroid . Call node .
12503	Return a lambda expression .
12504	Return an astroid . Hook node .
12505	Return an ast . Expression node .
12506	Return AST node .
12507	Return node s name .
12508	Return AST node as statement .
12509	Return an ast . Seq node .
12510	Return an ast . RepOptional node .
12511	Return AST node .
12512	Return a statement as a statement .
12513	Concatenate two strings .
12514	Set the indentation of a list .
12515	Recursively convert a list to a string .
12516	Print one or more nodes .
12517	Populate an edge from a sequence .
12518	Populates an edge from a state register .
12519	Build a tree of INDRA Statements .
12520	Compares two predicates
12521	Build a Grammar from a string .
12522	Build a Grammar from a file .
12523	Parse an entry from a string .
12524	Parse the given file .
12525	set a node
12526	Set node as int value .
12527	Get a subnode .
12528	Default serializer .
12529	Retrieve a list of available dependencies .
12530	Dict representation of a deposition
12531	Return a list of ids from invenio .
12532	Return a generator of ids from invenio2 .
12533	Import the bibdocfile and return it .
12534	Return a list of bibdoc files .
12535	Get information about the Bibliography .
12536	Check a BibDoc file .
12537	Dump token to dict .
12538	List users .
12539	Dump a User instance .
12540	Retrieve community information .
12541	Get the list of modified records from invenio .
12542	Return list of modified records from in invenio2 .
12543	Return a list of users and their email addresses .
12544	Return the revisions of a record .
12545	Get the collections for a record .
12546	Dump record as JSON .
12547	Return the number of modified bibdoc records .
12548	Dump a record .
12549	Dump a RA .
12550	Load all objects in the database
12551	Collect information about things .
12552	Initialize application context .
12553	Memoize a function .
12554	Get the run_sql module .
12555	Return a list of connected roles .
12556	Get a list of actions .
12557	Dump an access token
12558	Load token from data .
12559	Import a record .
12560	Return the import value for a config variable .
12561	Dump an object to a dict .
12562	Retrieve users from invenio .
12563	Get count of users in invenio2 .
12564	Dump User object to dictionary .
12565	Load deposit data from data .
12566	Create record and persistent identifier .
12567	Load a record from the given dump .
12568	Load dump records .
12569	Inspect dump of a dump .
12570	Load JSON dump files .
12571	Load communities .
12572	Load users from sources .
12573	Load data from sources .
12574	Get profiling statistics .
12575	Entry point for profiling .
12576	Run the profiler .
12577	Delete the profile .
12578	Delete the profile .
12579	Get current status
12580	Disable timestamp on a method .
12581	Load user from data .
12582	Calculate the translation for multiple images .
12583	Merge multiple images into one .
12584	Adds a dimensions with ones to array .
12585	Create a new record .
12586	Create a record .
12587	Update a record .
12588	Create persistent identifiers for records .
12589	Delete record from database .
12590	Create files in record .
12591	Create new file objects for a bucket .
12592	Delete bucket records .
12593	Return a list of pids that are missing .
12594	Prepare the revision list
12595	Prepare the list of files
12596	Prepares the pids for each revision .
12597	Return True if record is deleted .
12598	Load a community .
12599	Load a featured community .
12600	Download something .
12601	Check for something .
12602	Delete this handler .
12603	Return the magnitude of a vector .
12604	Normalize vector .
12605	Transforms the texture coordinates into the mesh .
12606	Ensure that the bone is present in the data .
12607	Set the length of the bone .
12608	Set the object s parent .
12609	Calculate the pivot point
12610	Start animation .
12611	Set camera state .
12612	Unset the current state .
12613	Set the state of the bone .
12614	Disable the rotation .
12615	Ensure model data is cached
12616	Redraw the canvas .
12617	Render an object .
12618	Sets the model for this object .
12619	Writes the reports to the specified path .
12620	Convert a list of test reports into a test suite .
12621	Add a menu
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the canvas .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add a label to main window .
12630	Add a button to the dialog .
12631	Exit the menu .
12632	Add a confirmation button .
12633	Add a button to the dialog .
12634	Update progress bar .
12635	Render all actors .
12636	Render the game .
12637	Context manager for executing a step .
12638	Check if a resource exists .
12639	Add a category
12640	Get the missing texture
12641	Get a model by name .
12642	Load a model .
12643	Get the model data for a given model name .
12644	Loads the model data for a given resource
12645	Add a widget
12646	Draws the submenu .
12647	Redraw the canvas
12648	Redraw the scrollbar .
12649	Checks if a mouse is inside a area
12650	Parses the range .
12651	add a layer
12652	Get the region of the buffer .
12653	Draw the canvas .
12654	Add an action .
12655	Perform an action .
12656	Register a new name .
12657	Add a layer .
12658	Draws all layers .
12659	Deletes all layers .
12660	Wrapper for _border
12661	Offset to window offset .
12662	Get the size of the widget
12663	Read mesh from hdf5 store .
12664	Create a connection matrix .
12665	Set fields
12666	Add one or more fields .
12667	Check that the elements are in the allowed types .
12668	All space in this element .
12669	Calculate the centroids of the mesh .
12670	Return the angles of the mesh .
12671	Return a pandas DataFrame containing the edges of the mesh .
12672	Calculate and return a pandas dataframe .
12673	Convert an element set to a node set .
12674	Convert node sets to surfaces
12675	Add surfaces to elements .
12676	Return a pandas . DataFrame with metadata
12677	The metadata for this step .
12678	Make the workdir if it doesn t already exist .
12679	Run postprocess .
12680	Run GMSH algorithm .
12681	Read a history report
12682	Read a field report from a text file .
12683	Convert a list to a string .
12684	Return an equation string .
12685	Produce an unsorted set .
12686	Parse the response .
12687	Make a GET request
12688	Write xy report to file .
12689	Write a field report to the database .
12690	List available components .
12691	Return error message for this field .
12692	Return True if exception was raised by descriptor
12693	Set the data for this object .
12694	will get the axis mode for the current series
12695	sets the graph ploting options
12696	Create a class .
12697	Loop over datafeeds and process them .
12698	Convert value to float .
12699	Convert a string to an integer .
12700	Plot a graph .
12701	Convert raw data to unicode .
12702	Clean a raw HTML string .
12703	Returns True if mime_type is a valid MIME type .
12704	Clean up a domain name .
12705	Given a domain name return the cut of the domain .
12706	Make a hash keyword .
12707	Collects words in a vocabulary .
12708	Index a stream item .
12709	Invert a hash .
12710	Get the document frequencies for the given hashes .
12711	Look up stream ids .
12712	Look up the TF index for the given h .
12713	Return a list of items from a ProtoStream .
12714	Makes a streamcorpus object from an entry .
12715	Create a ContentItem from a node .
12716	Read a varint from the stream .
12717	Read an A header .
12718	Serialize a streamitem key .
12719	Convert a streamitem into a key and encrypt it .
12720	Change the working directory .
12721	Strip the prefix from a string .
12722	Strip the suffix from a string
12723	Check if needle is a subsequence of haystack .
12724	Example application .
12725	Start the wsgiref server .
12726	Close the server .
12727	Decorator to register a route .
12728	Decorator to register an error handler .
12729	Return the content of a static file .
12730	Return a callback for the error page .
12731	Register a new route .
12732	Resolve a route .
12733	Resolve a non - literal route .
12734	Normalize a route .
12735	Return the response .
12736	Add a header .
12737	Set a cookie .
12738	Return status line .
12739	The Content - Type header .
12740	Returns a list of values for the given key .
12741	Recursively delete a path .
12742	Return a list of all open file descriptors .
12743	List file type stats .
12744	Runs rejester .
12745	Try to fetch a file from S3 .
12746	Returns a list of lines from a file
12747	Return a random adj species pair .
12748	Return a random adjspecies pair .
12749	Morph a sentence .
12750	Print similarity .
12751	Run hiragana command .
12752	List entities .
12753	Calculate shortsum for a given app .
12754	Goolabs API .
12755	Get chrono information .
12756	Create a new stage .
12757	Initialize the stages by name .
12758	Initialize all stages .
12759	Run the reader .
12760	Run all writers .
12761	Runs all of the transforms on the given si .
12762	Replace the given config with the given name .
12763	Build a WSGI application .
12764	Build a set of equiv IDs from sentences .
12765	Returns True if all target mentions are all of the target mentions
12766	Is any of the target mentions?
12767	Parse a rating against a list of tokens .
12768	Match tokens with multiple tags .
12769	Build a tagger file .
12770	align the chunk with the streamer
12771	Shutdown the child process .
12772	Multiply p by p .
12773	Fix email addresses .
12774	generate strings identified as sentences
12775	make a sortedcollection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to unicode .
12778	Create a cleaned file from a list of files .
12779	Create a tagger .
12780	Clean up a span .
12781	This function will align the chunk with the streamcorpus .
12782	Makes absolute paths to absolute paths .
12783	Instantiate a streamcorpus config .
12784	Generate a chunk of json -smith corpus .
12785	Make sure the rendered content are visible .
12786	Makes a cleaned HTML string and returns it .
12787	Make a file containing the content of the i_chunk .
12788	Clean up a span .
12789	Main entry point .
12790	Try to load a stage .
12791	Load the imported modules from the given path .
12792	Load stages from a module .
12793	Initialize a stage by name .
12794	Read bytes from the index .
12795	Filter the given href .
12796	Return a list of labels for this page .
12797	yield all file paths under input_dir
12798	Iterate over all tasks .
12799	Return a random table entry .
12800	Generate tokens from a sentence .
12801	Return a list of sentences and relations .
12802	Decorator for retrying a function .
12803	return True if OK raise Exception if not
12804	Get a bucket from a configuration file .
12805	Decode data to streamitem .
12806	Get a chunk from a bucket .
12807	Convert a stream_id to a key - value pair .
12808	Convert a key to a stream id .
12809	Generate cache key for stream item .
12810	Main function .
12811	Build an argument parser .
12812	Add xpaths to stream item .
12813	Generator for token tokens .
12814	Convert ASCII tokens to character offsets .
12815	Yields xpaths from the given character offsets .
12816	Add an element to the document .
12817	Return the xpath part of the element .
12818	Return the index of the text element .
12819	Iterate over all descendants of element .
12820	Return the elements of the source .
12821	returns elements that match the specified name
12822	Select elements that match a pattern .
12823	Return a list of XML elements that match the name and value .
12824	Iterate over the following siblings of elem .
12825	Make pretty - printed XML tree .
12826	Run inkscape .
12827	Run inkscape export .
12828	Export svg to PDF .
12829	Export svg to png file .
12830	Returns the environment for the given file path .
12831	Sets up the template file .
12832	Fills the document with the given contents .
12833	Save document content to file .
12834	Create a document type from a template file .
12835	Replace SVG code with SVG code .
12836	Render the graph .
12837	Renders the function to a PDF file .
12838	Parse an XML source .
12839	Parse an HTML document .
12840	Return a DOM fragment from a Markdown string .
12841	Insert text .
12842	Insert node before node
12843	Return a copy of this node .
12844	Run a benchmark .
12845	Return the XML value of a node .
12846	Insert a child .
12847	Parse config file .
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create an event .
12851	Main entry point .
12852	Return the file extension .
12853	Add an extension to the filepath if it doesn t already exist .
12854	Get a temporary file .
12855	Remove all files from workdir .
12856	Convert csv to json format
12857	Replace the content of a file .
12858	Parses the content of the page
12859	Check if next element is a link .
12860	Create italic .
12861	Create a strong tag .
12862	Create an underline
12863	Parse tag attributes .
12864	Remove line breaks from tag .
12865	Parse href .
12866	Parse an attribute .
12867	Translates a dictionary of translation values to another .
12868	Convert to json string .
12869	Find all files in folder_path
12870	Concatenate multiple strings together .
12871	Check if full starts with part .
12872	Determine if full is part of full .
12873	Return the length of a string .
12874	Convert an object to boolean .
12875	Given a sequence of expressions yield all elements of the expression .
12876	Look up a value in a table .
12877	Replace characters in SVG code .
12878	Check if an svg file is a string .
12879	Merge two svg files .
12880	Merge multiple PDFs .
12881	Embed a font file to an SVG document .
12882	Embed a font to SVG .
12883	Check the inputs .
12884	Check that the given function is callable .
12885	Recursive function that recurse into output .
12886	Render a template using Jinja2 .
12887	Recursive function to recurse into nested lists .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert obj to booleans .
12891	Serialize a XPath AST .
12892	Change XML encoding of filepath .
12893	Save text into filepath .
12894	Launch an input .
12895	Call a shell command .
12896	Convert a tex file to a PDF .
12897	Return a list of options for the loop .
12898	Transform a geometry to a spatial reference
12899	Create a GeoJSON geometry object .
12900	Expand self into two lists .
12901	Intersect self and other .
12902	Return True if other intersects other .
12903	Generate a polygon object .
12904	Initialize from ZNM .
12905	Write data to a file
12906	Returns a table with rows matching condition .
12907	Return the table at the specified nucleotide .
12908	Return the intersection of this table and another table .
12909	Return a new Table with rows that are not in the given table
12910	Return a Series with odd elements .
12911	Select rows where each element is odd .
12912	Return a Series with odd elements .
12913	Compute the error of the table
12914	Mean squared error .
12915	Binding energy .
12916	Derivative of s2n
12917	S1n operator
12918	Equivalent to s2p
12919	Equivalent to s1p
12920	Calculate a table based on the given relative coordinates .
12921	Wraps a function in a db session
12922	Derive a key from a master password .
12923	Bootstrap a new database .
12924	Search domain by name .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract the lines from a Python file .
12928	Return the prefix of a path .
12929	Returns the ID of the SID
12930	Entry point for the script .
12931	Initialize logging .
12932	Update a file from a URL .
12933	Return a dictionary of available driver names and metadata .
12934	Return the driver for the given path .
12935	Convert geom to numpy array
12936	Convert raster to raster
12937	Open raster from path .
12938	Create raster from bytes
12939	Copy a raster .
12940	List of configuration options .
12941	Create raster .
12942	Sets the geo transform .
12943	Return the data as an array .
12944	The raster envelope .
12945	Drives the driver
12946	Create a new raster
12947	Return a 2D numpy array with masked values .
12948	Return the NoData value associated with this object .
12949	Read raster data .
12950	Resample this raster to a new size .
12951	Save the image to disk .
12952	Set the projection .
12953	Warp this raster to another spatial reference
12954	Calculate the chunklen from an alph_len
12955	Look up an alphabet for a given character .
12956	Encode a single chunk .
12957	Convert a chunk to a long integer .
12958	Get a chunk of data
12959	Decorator for caching functions .
12960	Return a regexp object for the given filename .
12961	Normalize date format .
12962	Detect the default timezone .
12963	Convert the object to a dictionary .
12964	Activate pdb hook .
12965	Pretty - print an object .
12966	Runs the given job_handler .
12967	A worker function .
12968	Run a worker pool .
12969	Sets the classification of this Campaign .
12970	Send a message to LLink .
12971	Turn on a light .
12972	Turn on switch .
12973	Turn on a device .
12974	Turn off a device .
12975	Send messages from the queue .
12976	Send a message to LLink .
12977	Create an adapter from a file .
12978	Sets the nature of this Experiment .
12979	Update options from a dictionary .
12980	Resets all options to default values
12981	Set the configuration files .
12982	Iterate over all option values .
12983	Iterate over all the default values .
12984	Create a config file .
12985	Update configuration values from a dictionary .
12986	Read the contents of a TOML file .
12987	Read the configuration files and merge them into a dict .
12988	Return a list of options for the given section .
12989	Return a list of sections
12990	Solve command options .
12991	Add options to parser .
12992	Build the parser .
12993	Parse command line arguments .
12994	Build the zsh - comp command .
12995	Mark a function as complete .
12996	Return the shell command for a bash command .
12997	Build a bash completion .
12998	Start a new master server .
12999	Called when a new connection is made .
13000	Called when a line is received .
13001	Called when the connection is lost .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close the job .
13005	Run jobs in the master .
13006	Close the server .
13007	Reset all waiting listeners .
13008	Add a result to the future .
13009	Wait for the task to complete .
13010	Load a job from the list of jobs .
13011	Mark the job as done .
13012	Add a result to the queue .
13013	Cancel all active jobs .
13014	Called when the worker has completed .
13015	Distribute available jobs .
13016	Add a job set to the list .
13017	Get a job from the active jobs .
13018	Return a job from the list of jobs .
13019	Add a result for a job .
13020	Called when a job is done .
13021	Close the animation .
13022	Remove duplicates from a list .
13023	Match a regular expression to an object .
13024	Return a list of all entries in the cache .
13025	Get the current AWS region .
13026	Filter entries according to filters .
13027	Get EC2 host details
13028	Create an instance from a dictionary .
13029	Return the value of an attribute
13030	Sort list of entries by attribute .
13031	Return a string representation of the table as a line .
13032	Create an instance from a boto instance .
13033	Returns True if the attribute matches the filter .
13034	Return a human - readable representation of the host .
13035	Render a list of entries .
13036	Add the timestamp to the event dictionary .
13037	Setup logging .
13038	Create a structlog logger
13039	Setup Celery application
13040	Get information about a specific worker
13041	Delete a job
13042	Define a switch option .
13043	Ordered configuration options .
13044	Set values in conf .
13045	Handles config commands
13046	Create zsh and bash files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare a list of rows .
13051	Return a color function .
13052	Generate a color based on a string .
13053	Return a random color .
13054	Prompt the user for input .
13055	Check username and password .
13056	Check if token is valid
13057	Decorator to require a token authentication
13058	Check if process is running .
13059	Dynamically import an object .
13060	Get self - IP address
13061	Make a request to the API .
13062	Prepare POST parameters .
13063	Run the server .
13064	Render the template tag .
13065	Run a command .
13066	Stream a list of commands .
13067	Stream a list of commands .
13068	Returns a list of days between two dates .
13069	Get the path of a command
13070	Build the ssh command .
13071	Build the SCP command .
13072	Copy entries to local_path
13073	Copy a list of entries to a remote path .
13074	Run a command on a list of hosts .
13075	Connect to an entry .
13076	Load an LSI profile .
13077	Create LSI profile from command line arguments .
13078	Add a relationship to this part .
13079	Return a list of all the parts of this package .
13080	Load the relationships from the database .
13081	Add a part to the document .
13082	Load a part .
13083	Return the name for the given extension .
13084	given an element parse out the proper ContentType
13085	Parses the input string and returns a ChatL document .
13086	Builds the JWT .
13087	Assign a force field to an AMPAL object .
13088	Find the maximum radius and NPNP .
13089	Build a structure of force field parameters .
13090	Return the contents as a bytes stream .
13091	Return a generator of segments matching the name .
13092	Copy a directory .
13093	Open a bucket .
13094	Uploads a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all the filenames in a directory .
13098	Return a list of all directories in a directory .
13099	Create bucket prefix .
13100	Delete a file from S3 .
13101	Ensure token is authenticated .
13102	Convert to English
13103	Delete a directory .
13104	Return the URL for the homepage .
13105	Decorator to silence the label without namespace
13106	Display a breadcrumb for the project .
13107	Builds a breadcrumb for the project .
13108	Calculate the interaction energy between AMPAL objects .
13109	Calculate the internal energy of an AMPAL object .
13110	Return the histogram of hotspotent samples .
13111	Get the token for the given host .
13112	Uploads a project .
13113	Determine if we should upload on a Travis event .
13114	Purge a key from Fastly .
13115	Register a build .
13116	Confirm the build .
13117	Recursively merges dict into d .
13118	Main entry point for ldconveyor .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split a path into parts .
13122	Find the path and part of a file .
13123	Return editor for filepath .
13124	Process a module s content .
13125	Generate a chart .
13126	Render a chart .
13127	Serialize dataobj to a chart
13128	Patch the json data to make sure that it doesn t exist
13129	Convert json data to HTML .
13130	Convert a dict to a pandas DataFrame
13131	Write html to folderpath
13132	Return a chart class for the given chart type .
13133	Encode fields .
13134	Link to a GitHub user role .
13135	Infer the URL of the app .
13136	Build an application .
13137	Destroy an app .
13138	Iterate over an object .
13139	Generate a random string .
13140	Generate a random IPv4 address .
13141	Generate a random date between start and end date .
13142	Get a session
13143	Make a request to the API .
13144	Create a build .
13145	Check the status of a build .
13146	Generate a sequence of sequences .
13147	Memoize a function .
13148	Decorator to make a function unique .
13149	Add sub - commands to the parser .
13150	Return the root arg parser
13151	Return the description .
13152	Return the help string
13153	Run the sub - command .
13154	Return encoded data .
13155	Returns a pandas DataFrame with all the paths deleted .
13156	Returns the last n last n files .
13157	Request the activity list .
13158	Request activity data from athlete .
13159	Return the URL for the athlete .
13160	Return the URL for the athlete .
13161	Make a request and return the response .
13162	Create a build .
13163	Build a URL with API auth .
13164	Get a random title .
13165	Generate a random person .
13166	Get last name of languages .
13167	Render the chart .
13168	Setter for Dataset .
13169	Render the chart .
13170	Check the type of the chart .
13171	Generate the full URL for this query .
13172	Open the browser .
13173	Save the image to a file .
13174	Open the URL to the server .
13175	Return image as Image object .
13176	Write to file descriptor fp .
13177	Return the checksum of the file .
13178	Return a decimal amount .
13179	Decorator to add a class name to a class .
13180	Return the list of unprotected and protected claims .
13181	Return the signing keys as a list .
13182	Unpack a metadata statement
13183	Pack a metadata statement .
13184	Evaluate a metadata statement
13185	Recursively change the usage of the given metadata .
13186	Add metadata statements to the request .
13187	Parse command line arguments .
13188	Add command line arguments to the arg_parser .
13189	Applies logging options to log_files .
13190	Log msg % args .
13191	Return a dictionary mapping letters to integers .
13192	Find anagrams in a word .
13193	Convert the class name to a string .
13194	Transform timeseries data into series data .
13195	Get the last value from a timeseries
13196	Validate page number .
13197	Get a page of items from an iterator .
13198	Change mode of path .
13199	Create an internal signing service .
13200	Create a signer client .
13201	Sign a request .
13202	Create a new Thing
13203	Update metadata statement .
13204	Update the signature for a given location .
13205	Yield the contents of a bundle .
13206	Create a bundle from the data .
13207	Returns a list of urls for the given asset type .
13208	Return HTML tags for the given asset type .
13209	Return HTML tags for asset types .
13210	Convert a URL to a protocol .
13211	Find links in a URL .
13212	Connect to AMP server .
13213	Get list of modules .
13214	Import service modules .
13215	Convert a parameter into a tuple .
13216	Returns a new document based on a list of fields .
13217	Applies a date map to a document .
13218	Returns the number of records in the query .
13219	Prints the result of the cursor .
13220	Get a list of tasks that depend on the dependency graph .
13221	Add default departments to project
13222	Add default atypes to project
13223	Add default sequences
13224	Add a shot to a project
13225	Called when a project is saved .
13226	Create a new shot .
13227	Create all tasks for the given element
13228	Connect to peer .
13229	Send a packet to a peer .
13230	Get a config value from a specific section .
13231	Decorator to add a customer process .
13232	Decorator to add cinder to cinder .
13233	Decorator to add a function to a service .
13234	Decorator to add a glance function to a glance .
13235	Decorator to add a function to a swift process
13236	Decorator to add a function to a process .
13237	Decorator to add a heat event to the process .
13238	Add the specified factory .
13239	Remove the specified factory .
13240	Connect to the given factory .
13241	Called when data is received .
13242	Remove a protocol from the list .
13243	Call a remote command .
13244	Called when a connection made .
13245	Called when a connection is made .
13246	Called when data is received .
13247	Send data to the server .
13248	Called when the protocol is lost .
13249	Returns the protocol for the given connection identifier .
13250	Called when a remote connection is received .
13251	Disconnect from the given connection
13252	Center a string on the screen .
13253	Prints a clock on the right line .
13254	Build a version number .
13255	Determine the framework for a target .
13256	Assert that value is convertible to target_unit .
13257	Pad data to block_size
13258	Remove padding from padded data .
13259	Self - sign a request .
13260	Gather the metadata statements for the given context
13261	Pretty print anagram .
13262	Build an argument parser .
13263	Parse the wordlist .
13264	Called when data is received .
13265	Called when an unregistered type is unregistered .
13266	Create an RPC function stub .
13267	Ping a remote call .
13268	Return the regex for this command .
13269	Convert an AMP string to an AMP list .
13270	Convert the array to a string .
13271	Verify that the metadata statement is valid .
13272	Parse the response from the remote server .
13273	Dump database to a temporary file .
13274	returns a list of all databases on this server
13275	Get all local files for a given path .
13276	Synchronize local files to S3
13277	Decorator for views that require user_tokens
13278	View function .
13279	Build Slackware packages
13280	Return an empty bag .
13281	Load JSON from file .
13282	Self - sign a JWT .
13283	Create a JWT signed by signing keys .
13284	Decorator to register a function as a library .
13285	Determine the contents of a given directory .
13286	Runs the test runner .
13287	Return the score of a letter .
13288	Calculate the score of a word .
13289	Generator for word lists .
13290	Check if a word is valid .
13291	Main function for the SOS search
13292	CLI entry point
13293	Called when a string is received .
13294	Get command and responder function .
13295	Parse request values .
13296	Run the responder .
13297	Write a response to the socket .
13298	Called when the connection is lost .
13299	Build a JSONAMP DialectReceiver .
13300	Convert a list of JWKS objects to a KeyJar
13301	Loads the keys from a JSON string .
13302	Deal with nova customer process
13303	Processes an event .
13304	Process neutron customer process .
13305	Process a glance customer process .
13306	Processes a swift customer process .
13307	Process a customer process .
13308	Processes a heat customer process .
13309	Run the app .
13310	Print msg to stdout .
13311	Print msg to stderr .
13312	Register a command class .
13313	Register a command class .
13314	Convert value to string .
13315	Parse this argument from a string .
13316	Update completer dictionary .
13317	Perform the actual work
13318	Init the mq connection
13319	Import service modules .
13320	Initialize the mq consumer
13321	Init cinder consumer
13322	Initialize the neutron consumer
13323	Initialize the glance consumer
13324	Initialize the heat consumer
13325	Enable the given Openstack component .
13326	Get information about a song .
13327	download a song
13328	Execute instructions .
13329	Return the value of the given name .
13330	call a function
13331	Dump MySQL database to a temporary file .
13332	Render DITAA code and output images .
13333	Invoke the application .
13334	Run the application .
13335	Change the current working directory .
13336	Copy a directory tree .
13337	Start the debugger .
13338	Get the modification time of a file
13339	Check if item has changed since last time .
13340	Synchronize the contents of the file .
13341	Remove all files from fdir
13342	Scrape a website .
13343	Downloads and saves the image
13344	Check if image has changed .
13345	Returns a template . Node subclass .
13346	Return a tuple of the caller name and line number
13347	Return the defining component for the given pe_pe .
13348	Main function .
13349	Find a symbol by name and kind .
13350	Check if the given pe_pe is contained in the root .
13351	Determine if a PE type is global
13352	Return the data type name of a type
13353	Retrieve related attributes for a single rgo relationship .
13354	Makes a namedtuple .
13355	Create a function for a bridge
13356	Create a namedtuple object for an external entity .
13357	Create a function to run a function .
13358	Makes a constant .
13359	Create an operation method .
13360	Build a property property .
13361	Create the metaclass for the given object .
13362	Build a simple association .
13363	Make a linked association .
13364	Makes an association from m to m .
13365	Make a component of the model
13366	Perform a single RPC call .
13367	Send an accept request .
13368	Send a REJECT request .
13369	Send a raise message to the given socket .
13370	Send a call to the socket .
13371	Establish results from a call .
13372	Dispatch a reply .
13373	Guess the type name from a string .
13374	Deserialize value into an integer .
13375	r \ \
13376	r
13377	Get a feature by content id .
13378	Retrieve multiple documents from the index .
13379	Put items into Elasticsearch
13380	Delete document identified by content_id .
13381	Delete all documents from the index
13382	Delete the index
13383	Iterate over the cache .
13384	Return an iterator of document ids for the given key ranges .
13385	Scan a prefix for a prefix .
13386	Iterate over all prefix IDs associated with a prefix .
13387	Perform full text scan .
13388	Iterate over fulltext scan ids .
13389	Perform a keyword scan .
13390	Return the IDs of all keywords that match the query .
13391	Iterate over the documents that match the given value
13392	Return feature names .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Calculate the total number of features in a dictionary .
13400	Count the number of bytes in the cache .
13401	Pretty - print a FeatureCounter .
13402	Handles command line options
13403	Default formatter .
13404	Convert an object to a string .
13405	Pretty - print an identifier .
13406	Check the uniqueness constraint for all metaclasses .
13407	Check integrity of a link .
13408	Check the integrity of a subtype .
13409	Return a function that produces a feature index by name .
13410	Convert to lowercase .
13411	Put items into storage .
13412	Delete all data from the database .
13413	Scan for files in the cache .
13414	Return an iterator over the IDs in the specified range .
13415	Perform an index scan .
13416	Scan the index for a specific prefix .
13417	Return the key corresponding to the given index .
13418	Perform an index scan using the given prefix .
13419	Define an index .
13420	Put an index into the store .
13421	Put value into ElasticIndex .
13422	Generate keys for given index .
13423	Return the index with the given name .
13424	Check pypi package name against pypi registry .
13425	Add a translation to the given value .
13426	get type name
13427	Returns the referenced attribute
13428	Builds the XML type for the given CCDDT .
13429	Parses an enum element .
13430	Build a struct type element .
13431	Build user type .
13432	Build the type from a datetime object
13433	Build the XML class .
13434	Build a composite component .
13435	Builds a schema from a metadata object .
13436	Pretty - printed XML string .
13437	Fetches a list of bannedikes .
13438	Set node information .
13439	Decorator to track the execution of a function .
13440	r
13441	r
13442	r
13443	r
13444	r
13445	r
13446	r \ .
13447	r \
13448	r
13449	r
13450	r \ \ \ \ \ \ \ \
13451	r \ > > > >
13452	r \ +
13453	Create a queue
13454	Delete a queue .
13455	Return a list of queues .
13456	List all exchanges
13457	Purge a queue .
13458	Create email message .
13459	Reads the image and returns it .
13460	Check if text is visible .
13461	Main function .
13462	Serialize value to string .
13463	Serialize an association .
13464	Convert a class to a string .
13465	main entry point
13466	Search the database for a query .
13467	Partition a collection by a condition .
13468	Main function .
13469	Add the current language to the context
13470	Find a link between two instances .
13471	Convert the relationship to the target class .
13472	Computes the lookup key for the given instance .
13473	Compute the index key for the given to_instance .
13474	Return the type of an attribute
13475	Create a new instance of this class .
13476	Iterate over all registered metaclasses .
13477	Define a new meta class .
13478	Send a message to ZMQ .
13479	Receive messages from a zmq socket .
13480	Check dead code .
13481	Parse email addresses .
13482	Decorator to create an rpc function .
13483	Build an RPC specification table .
13484	Normalize postcode .
13485	Return the next value .
13486	Accepts all child subsystems
13487	Accepts all children of the PE .
13488	Accept an EPP packet .
13489	Get the average brightness .
13490	Matches the pattern .
13491	Find the match for the given position .
13492	Return the selection for the given character .
13493	Called when cursor position has changed .
13494	Get exception information .
13495	Create an input hook for the prompt .
13496	Get a mapper by name .
13497	Decorator to register a function
13498	Decorator to register a URL .
13499	Add a new rule .
13500	Add a function to the path
13501	Calls the data store .
13502	Execute the input buffer .
13503	Called when the input is pressed .
13504	Handle down pressed button .
13505	Get the previous text in the history .
13506	Select the next line in the history .
13507	Handle reply messages .
13508	Is the history lock?
13509	Return the edited history item .
13510	Sets the history .
13511	Stores the current input buffer .
13512	Called when TimeToClose
13513	Build the Record Collection from a DataFrame
13514	Convert a pandas . DataFrame to a pandas DataFrame .
13515	Perform a spin on a DataFrame .
13516	Set object attributes .
13517	Subscribe to all topics
13518	Log a message .
13519	Merge a list of lists .
13520	Iterate over remote objects .
13521	Convert a notebook to another .
13522	Return a platform - specific platform .
13523	Get an importer for the given path item .
13524	Return a StringIO object .
13525	Parse a version string .
13526	Determine whether the setuptools project should override .
13527	Add distribution to distribution .
13528	Find all installed plugins .
13529	Return the path to the cache .
13530	Parse an entry point from a string .
13531	Return the parsed package info .
13532	Compute the dependencies of the package .
13533	Parse a filename .
13534	Collapse leading whitespace .
13535	Reimplement the hide event handler .
13536	Overrides show event handler .
13537	Return the current text cursor
13538	Update the currently selected item .
13539	Register admin site .
13540	Return partitions of windows .
13541	Return a tuple of cpu hours and idle time .
13542	Return a list of tuples representing the system CPU times .
13543	Read raw input from stdin .
13544	Read a block of data from stdin .
13545	Update tab bar visibility .
13546	Create tab with the current kernel
13547	Add a tab with a frontend
13548	Adds a menu action to the given menu
13549	Create a dynamic magic function .
13550	Populate the list of magic menu
13551	Handle closing all windows .
13552	Generate password
13553	Validate the passed passphrase against the passed passphrase .
13554	Render a boolean cell for an item .
13555	Return indented short title .
13556	Collects a list of booleans .
13557	Toggle boolean
13558	Returns True if the request has changed or not .
13559	Returns True if the request has permission to delete the object .
13560	Add all children of parent to parent .
13561	Make a bintree .
13562	Submit a list of jobs .
13563	Validate the given graph .
13564	Make a color table .
13565	Return a copy of this color scheme .
13566	Adds a new color scheme to the table .
13567	Set the active color scheme .
13568	Return the library path .
13569	Process the iub channel
13570	handles stdin request
13571	Wait for the kernel to be running .
13572	Set the style .
13573	Get the format for the token .
13574	Get the format from the document .
13575	Build a QTextCharFormat from a token .
13576	Find a command in PATH
13577	Normalize a path .
13578	Check that value is a package namespace .
13579	Parse entry points .
13580	Is the last blank line?
13581	Check if the last two blank lines have two blank lines
13582	Transforms an assignment to an IPython line .
13583	Transforms an assignment magic to the IPython .
13584	Transform a line of text into a single line .
13585	Transform an IPython prompt .
13586	Push lines into the interpreter .
13587	Return True if there are more words .
13588	Determine indentation level .
13589	Store the given lines into the buffer .
13590	Return the source and raw data .
13591	Handle cell magic .
13592	Append lines to line mode .
13593	Transforms a single cell into the stack .
13594	Push lines to IPython .
13595	Initialize the observers .
13596	Post a notification .
13597	Return set of observers for a specific notification .
13598	Register a callback for a given ntype .
13599	Create a new job .
13600	Update the status report .
13601	Print group information
13602	Flush a group .
13603	Determine if the job has completed .
13604	Display the status of the component .
13605	Initialize the background
13606	Insert value at given index .
13607	Return a shallow copy of the object .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the current working directory .
13612	Move to another state
13613	Calculate the energy of a given state .
13614	Return a dict with default values .
13615	Check that the table is consistent .
13616	Convert list to dict .
13617	Render a single check .
13618	Print a warning message .
13619	Parse a yaml config file .
13620	Convert a list of rows into HTML .
13621	Build a link .
13622	Render a javascript file
13623	Render a css file
13624	Generate an HTML tag .
13625	Subtract value from value
13626	Multiply value with arg
13627	Divide value to a number .
13628	Modify value by a number .
13629	Return verbose name .
13630	Split a line into its parts .
13631	Add options to the given parser .
13632	Add a builtin function .
13633	Remove a builtin .
13634	Deactivate builtin functions .
13635	Find the real name of the given req .
13636	Iterate over links with explicit rels .
13637	Return a list of comma separated strings .
13638	Entry point for the coverage script .
13639	Add an action .
13640	Appends an action to the parser .
13641	Parse command line options .
13642	Print help message .
13643	Handles help
13644	Check if the arguments are ok
13645	Execute a python code
13646	\ Print info about the coverage info
13647	Unserialize an object .
13648	Set the displayhook .
13649	Logs uncaught exceptions .
13650	Check if a given URL is a valid URL .
13651	Validate a URL .
13652	Validate a URL container .
13653	Pull the values from the global namespace .
13654	Return a list of random ports .
13655	Decorator to create a remote function .
13656	Decorator for parallelizing functions .
13657	Apply the function to sequences .
13658	Return the last n lines of the readline .
13659	Set the auto indentation flag .
13660	Initialize logging .
13661	Save sys module state .
13662	Restores sys . modules .
13663	Register a post - execute function .
13664	Return a new main module .
13665	Cache the main namespace for the main module .
13666	Initialize user namespace
13667	Return a list of all namespace names referenced by this module .
13668	Reset the history
13669	Delete a variable
13670	Reset all variables that match a regex
13671	Push variables to the stack .
13672	Return information about an object .
13673	returns a Struct object
13674	Find an object by name .
13675	Inspect an object
13676	Initialize history manager
13677	Show traceback .
13678	Show a traceback .
13679	Show traceback .
13680	Show the exception traceback .
13681	Prepare text for reading .
13682	Handle completion .
13683	Set a custom completer method .
13684	Set completer frame .
13685	Run a line magic function .
13686	Find a magic object by name .
13687	Define a macro .
13688	Run a command and return the exit code .
13689	Rewrite the input .
13690	Return a dictionary of user variables .
13691	Evaluate user expressions .
13692	Evaluate an expression .
13693	Execute a file safely .
13694	Runs the cached cell magic .
13695	Run a single cell .
13696	Run the given nodes in the given list of nodes .
13697	Enable the IPython notebook .
13698	Expand the given command .
13699	Create a temporary file .
13700	Returns a string representing the input range .
13701	Find the user s code .
13702	Clean up temporary sessions .
13703	Publish a message from the client .
13704	Send a message to multiple targets .
13705	Decorator to skip a test case .
13706	Decorator for testing when a test fails .
13707	Decorator to mark functions as deprecated .
13708	Return a list of profiles in path
13709	Return a list of installed profiles .
13710	Find a distribution by key .
13711	Run a command .
13712	Return the full path of a file
13713	Return the next line .
13714	Send data to the child process .
13715	Send an IVINTR character .
13716	Recompile unicode regexes as bytes regexes . Overridden in subclass . Overridden in subclass .
13717	Wait for a pattern to match .
13718	Search for a searcher .
13719	Recompile bytes regexes as unicode regexes .
13720	Search the string for a given buffer .
13721	Search the buffer .
13722	Create a listener for progress events .
13723	Unpack a directory .
13724	Print msg to stdout .
13725	Return the last error
13726	Execute a command and return its output .
13727	Find the filename and return it .
13728	A list of sorted arcs of the file .
13729	Return the set of arcs that are missing .
13730	Return the list of arcs unpredicted .
13731	Return lines of branch lines .
13732	Return the total number of branches .
13733	Return a dict with the missing branch arcs .
13734	Return information about the branch lines .
13735	Set the precision .
13736	Calculate the percentage coverage of the number of statements .
13737	Return a string representation of the number of points covered by this point .
13738	Highlights given needles .
13739	Highlight a string .
13740	Highlight keywords in string .
13741	Run a function in the context .
13742	Remove quotes from quotes .
13743	Indent a string
13744	Return a marquee .
13745	Format screen .
13746	Remove leading and trailing whitespace from text .
13747	Wrap text into multiple paragraphs .
13748	Find optimal number of rows .
13749	Return the item at the given index .
13750	Compute an item matrix .
13751	Return a list of SList objects
13752	Build the kernel arguments
13753	Set up the ssh connection
13754	Pretty - print an object .
13755	Pretty print an object .
13756	Get the MRO of an object .
13757	Pretty print the object .
13758	Create a pprinter for a sequence .
13759	Create a pprinter for a dictionary .
13760	Pretty print the object .
13761	Print a compiled regex pattern .
13762	Pretty print the object .
13763	Pretty print function .
13764	Pretty print an exception .
13765	Register a function for a type .
13766	Decorator to register a function for a type .
13767	Add text to the output .
13768	Add a breakable to the output .
13769	End a group .
13770	Flush the buffer .
13771	Pretty - print an object .
13772	Get color scheme .
13773	Writes a row into an ODS file .
13774	Get the text from the clipboard .
13775	Get text from osx clipboard .
13776	Get text from the clipboard .
13777	Return the prefix to use for building .
13778	Rekey a dictionary .
13779	Recursively extract datetime objects .
13780	Recursively squash datetime objects .
13781	Convert datetime objects to string .
13782	Convert obj to JSON .
13783	Check if install_dir is correct .
13784	Write a script to the install_dir .
13785	This function is used to sleep the script .
13786	Create the parser for the given prog_name and subcommand .
13787	convert . pyx extensions to . c
13788	Main entry point for a connection
13789	Build a PackageFinder .
13790	Handle logging level changes .
13791	Default logger .
13792	Called when a flag is changed .
13793	Print the help for all aliases .
13794	Print help for all flags .
13795	Print the subcommands .
13796	Print help text .
13797	Print examples .
13798	Update the current configuration .
13799	Initialize a subcommand .
13800	Flatten the flags .
13801	Parse the command line arguments .
13802	Load a config file .
13803	Generate the configuration file .
13804	Downsample an array .
13805	Format a list of tuples .
13806	Write a message to the output .
13807	Called when a config has changed .
13808	Return the help for this class .
13809	Return a help string for a trait .
13810	Return a configuration section for a class .
13811	Clear the instance of this class .
13812	Create an instance of this class .
13813	Format a failure .
13814	Crash handler .
13815	Flush all channels .
13816	Start channels
13817	Read data from a file - like object .
13818	Read from an EINTR .
13819	Wrapper for subprocess .
13820	Split a string .
13821	Compress a dhist .
13822	Decorator to register magics class
13823	Add a function to the dictionary .
13824	Create a marker for a method or method .
13825	Mark a function as a decorator .
13826	Return a dictionary of documentation for all registered magics .
13827	Register one or more magic objects .
13828	Register a function .
13829	Convert a string to LaTeX syntax .
13830	Parse command line options .
13831	Define a default option
13832	Display an IPython notebook
13833	Create a task from a callable .
13834	Return task info with given label
13835	Return the callable object for this task .
13836	Calculate the next run for this schedule
13837	Submit this task .
13838	Run the task .
13839	Run asap .
13840	Run a task on a given callable .
13841	Runs a callable .
13842	Find the path to the security directory .
13843	Create an IPython kernel
13844	Parse a test file .
13845	Create an interrupt event .
13846	Main thread .
13847	Filter namespace by name and type .
13848	Return a list of objects matching the specified pattern .
13849	Raise ValueError if mutually exclusive .
13850	Draw the figure if interactive .
13851	Flush all available figures .
13852	Send a figure to IPython
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate random ports .
13856	Initialize the notebook webapp .
13857	Handle SIGINT signal .
13858	Ask the user to exit .
13859	Shut down the kernel .
13860	Generate stock price options
13861	Replace multiple occurrences of dict with multiple values .
13862	Render the template .
13863	Launch a kernel .
13864	Create the zipfile .
13865	Fix version in metadata . txt
13866	Check if an object is mappable .
13867	Get the partition of a sequence .
13868	Monkey patch pexpect . spawn
13869	Return the contents of a file .
13870	Run the command source .
13871	Generate coverage report .
13872	Generate the XML file for the analysis .
13873	Fetch a PPI file .
13874	Reduce a list of frequencies .
13875	Compute the n - digit frequencies of a file .
13876	Extracts digits from a text file .
13877	Calculate frequencies for one - digit .
13878	Calculate two - digit frequencies .
13879	Calculate n - digit frequencies
13880	Plot two digit frequencies .
13881	Plot one digit frequencies in pi
13882	Prints a debug message .
13883	Reverse URL resolver .
13884	Check if a prefix is private .
13885	Build a TestSuite test suite .
13886	Runs a script .
13887	Debug a test script . src is a string .
13888	Runs a test on a module and prints it .
13889	Return a dict of all hashes in hashroot .
13890	Compress hashroot .
13891	Return a list of all keys in this directory .
13892	Allow the given record .
13893	Returns True if a record matches any of the given records .
13894	Format an error .
13895	Start an interactive shell .
13896	Runs the main loop .
13897	Creates new writer and meta_csv .
13898	Prepare the locale directories .
13899	Write entries to po files .
13900	Write a header to a po file .
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Load a python module
13904	Runs a python file .
13905	Create a code object from a Python file .
13906	Return a Python code object from a . pyc file .
13907	Convert a list of dictionaries into an HTML table .
13908	Set the current value .
13909	Cancel completion .
13910	Select completion to completion
13911	Move the cursor up to the right .
13912	Select the button down .
13913	Selects the left cell .
13914	Select the right corner .
13915	Update the list .
13916	Get word frequency .
13917	Print the number of words and their count .
13918	Convert to string .
13919	Write to file .
13920	Validate a pin
13921	Send a single pin to one or more topics .
13922	Delete a shared pin .
13923	Send a pin to a user .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	Returns a list of topics for the current user .
13927	Decorator to mark a function as monitored .
13928	Initialize progress bar .
13929	Start a task .
13930	Create a subtask .
13931	Update the progress .
13932	Create a new sub monitor .
13933	Set the units of the task .
13934	Display a single page .
13935	Makes sure that the package is correct .
13936	Load a list of python config files into a single Config object .
13937	Load the configuration from disk .
13938	Read the config file as a dict .
13939	Load a flag .
13940	Decode the given argument vector .
13941	Load config from argv .
13942	Load config from argv .
13943	Parse command line arguments .
13944	Convert command line arguments to config .
13945	Find a Python module .
13946	Register a callback for stop processing .
13947	Called when the process is started .
13948	Called when the process is stopped .
13949	Interrupt with SIGINT and kill it .
13950	Build command line arguments
13951	Start the scheduler .
13952	Send a file to the remote host .
13953	Fetch a file from remote
13954	Return the number of engine instances .
13955	Start the engines .
13956	Start a new process .
13957	Default context .
13958	Parse the output from the output .
13959	Write a batch script to disk .
13960	Start the worker .
13961	Create context menu
13962	Append a JPEG to the display .
13963	Append png to the display .
13964	Append an svg to the display .
13965	Adds an image to the document .
13966	Copies the image to the clipboard
13967	Returns the image with the given name .
13968	Insert image into cursor .
13969	Insert an SVG into the cursor .
13970	Save image to file .
13971	Exit when the server has changed .
13972	Initialize environment variables
13973	Rewrite the input
13974	Ask the user to exit .
13975	Set next input
13976	Read a config file .
13977	Get a list of values from a section .
13978	Get a list of values from a section .
13979	Load timestamp from environment variable .
13980	Set values from keyword arguments .
13981	Load configuration files from a file .
13982	Sets an attribute value from a config file .
13983	Expand ~user . path .
13984	Set the delimiter .
13985	Split a line .
13986	Return a list of keywords that match text .
13987	Return a list of matches in text .
13988	Handle the greedy selection .
13989	Return a list of file matches .
13990	Return a list of aliases that match the given text .
13991	Return matches for text .
13992	Return the default arguments for an object .
13993	Complete text .
13994	Handle completion .
13995	Returns True if the record matches one of the tests .
13996	Return a list of records that match the criteria .
13997	Extract a subdict from a record .
13998	Determine if the user is quiet
13999	Write the output prompt .
14000	Write the result data to stdout .
14001	Log output to console .
14002	Raise InvalidOperationException if object is not freezed .
14003	Convert string to Timestamp .
14004	Called when an eventloop has changed .
14005	Dispatch a control message .
14006	Dispatch a message to the shell .
14007	Start the shell .
14008	Flush one iteration
14009	Publish a pyin event .
14010	Abort a request
14011	Send a clear request .
14012	Return the topic name .
14013	Shutdown message
14014	Prepare modules for context
14015	Remove modules from the context stack .
14016	Convert path to absolute .
14017	Return True if the given name is a file - like object .
14018	Check if an object is a class .
14019	Check if path is a package .
14020	Return the full package name for a file .
14021	Format a label .
14022	Return a key that matches a regex .
14023	Transfer a function to another module .
14024	Transfer a class to a given module .
14025	Get CPU times .
14026	Get the command line for the process .
14027	Return a list of open files for the process .
14028	Return a list of connections for the process .
14029	Check if a user has a group .
14030	Resolve a class .
14031	Calculate the usage percentage .
14032	Memoize a function .
14033	Mark a function as deprecated .
14034	Login to Google .
14035	Get the gdocs key from the docstring .
14036	Ensure the temporary path exists .
14037	Clear temporary files .
14038	Upload a file to Google Documents .
14039	Synchronize local and gdocs .
14040	Download data from GODocs .
14041	Upload PODocs to GODocs .
14042	Clear the entire document .
14043	Create a new Qt console connection
14044	Check if url is accessible from this machine
14045	Determine if a URL contains content .
14046	Return the response code of a given URL .
14047	Compare the content type of a URL .
14048	Compare the response code for a given URL .
14049	Validate data .
14050	Clear stdout and stderr .
14051	Find a command .
14052	Factory for creating CodeUnit objects .
14053	Return the rootname of the module .
14054	Open the source file .
14055	Whether this path should be a Python file .
14056	Return the total seconds of a datetime object .
14057	Get the result or raise an exception .
14058	Wait for all the messages to arrive .
14059	Get the results from the job .
14060	Abort the task .
14061	Return the elapsed time in seconds .
14062	Wait for all tasks to finish .
14063	Republish to IPython notebook
14064	Block until all outputs are ready .
14065	Wait for all pending messages to arrive .
14066	Return the absolute path of a file .
14067	Prepares a list of patterns .
14068	Return the separator from a string .
14069	Find python files under dirname
14070	Return the relative filename
14071	Return the canonical filename for the given filename .
14072	Return the data for a zip file .
14073	Returns True if fpath matches the given path .
14074	Returns True if path matches pattern .
14075	Map a path to its canonical filename .
14076	Start the event loop .
14077	Loop over the kernel .
14078	Run Tkinter .
14079	Loop over GTK .
14080	Loop through the kernel and run the cronloop .
14081	Enable an IPython event loop .
14082	Generalized GOE .
14083	Computes the difference between the center eigenvalue of a matrix .
14084	Calculate the difference between ensemble eigenvalues .
14085	Create an instruction .
14086	Parse a step configuration file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load the config file .
14090	Initialize the profile directory .
14091	Generate the default config file .
14092	Write to file .
14093	Erase the file .
14094	Dictionary of line data
14095	A dictionary containing the arc data .
14096	Write data to file .
14097	Read data from a file .
14098	Load data from file .
14099	Read a file and return its lines and arcs .
14100	Merge the data from the data directory into one .
14101	Add line data .
14102	Add arc data .
14103	Add lines to a hash .
14104	Return summary of the file .
14105	Yield lines from the given line .
14106	Run the mainloop .
14107	Replace the contents of the readline history .
14108	Prompt the user for input .
14109	Edit the current syntax error .
14110	Determine if an error should be displayed .
14111	Exit .
14112	Return the URL and revision .
14113	Create a new frontend master
14114	Initialize the given widget .
14115	Return tuple of identity url and location
14116	Convert a trajectory to a numpy array .
14117	Get the source code for the given object .
14118	Sets the color scheme .
14119	Toggle color scheme .
14120	Format a traceback .
14121	Returns a structured traceback .
14122	Format the extracted list .
14123	Format exception only .
14124	show the exception only
14125	Start debugger .
14126	Set the mode .
14127	View decorator that checks if a user is logged in .
14128	Ensure that a module is imported .
14129	Append a line to the code .
14130	Add a section .
14131	returns the given function
14132	Generate code for an expression .
14133	Render the template .
14134	Apply dots to value .
14135	Render a template .
14136	Return a dictionary of formatter instances .
14137	Set a function for the given type .
14138	Decorator to register a function as a function .
14139	Handle float precision .
14140	Return all config files .
14141	Configure self . options .
14142	Configure logging .
14143	Configure the working directory .
14144	Dump a string to stdout .
14145	Pager wrapper for pager .
14146	Page a file .
14147	Get pager command .
14148	Return pager start string
14149	Print a string to the screen .
14150	Print a basic object with basic information .
14151	Pretty print an object .
14152	Return a PNG representation of the given object .
14153	Determine if an object can be printed .
14154	Return latex representation of object .
14155	Add this plugin to the given parser .
14156	Validate a list of strings
14157	Validate that all keys are strings .
14158	The main loop .
14159	Handle incoming message .
14160	Execute a code .
14161	Send a complete completion request .
14162	Get information about an object .
14163	Get a history request .
14164	Shutdown the server .
14165	Flush the queue .
14166	Send an input to the server .
14167	Start the channel .
14168	Stop all channels .
14169	Check if channels are running .
14170	Load the connection from a file .
14171	Write the connection file .
14172	Start a new kernel .
14173	Shutdown the kernel .
14174	Restarts the kernel .
14175	Kill the kernel .
14176	Interrupt the current kernel .
14177	Sends a signal to the kernel .
14178	Check if the connection is alive .
14179	Return a shell channel .
14180	Return the sub channel .
14181	Return an HB channel .
14182	Bind a kernel to an IPEngine
14183	Handle debug messages .
14184	Get the list of extension classes .
14185	Perform pre - step processing
14186	Called after all extensions have been added .
14187	Finalize all extensions
14188	Walk an egg directory .
14189	Scan a module for stubs .
14190	Launch a new IPController instance .
14191	Save the connection dictionary to a file .
14192	load config from json
14193	Loads the secondary configuration file .
14194	Execute a cell in parallel .
14195	Enable or disable pxrun .
14196	Disable autopx
14197	Run an IPython notebook
14198	Run a heartbeat message .
14199	Run a task .
14200	Remove a task from the database .
14201	Patches the given protocol for agents .
14202	Add an attribute to an object .
14203	Accepts a connection .
14204	Reject the pending connection .
14205	Return a new proxy agent .
14206	Validate and save the form .
14207	Handle delete request .
14208	Check if user is logged in .
14209	Report coverage coverage .
14210	Check if all modules have been modified .
14211	Launch an editor for the given file .
14212	Fix an error editor .
14213	Get the current clipboard .
14214	Add a new function to the chain .
14215	Try to get metadata from a path or directory .
14216	Configure the plugin .
14217	Import an item .
14218	Try to use passwordless .
14219	Try to open ssh with passwordless .
14220	Try to connect to paramiko .
14221	Convenience wrapper around open_tunnel
14222	Open a tunnel using OpenSSL .
14223	Stop scheduler tasks .
14224	Unwrap exception .
14225	Register a new engine
14226	Unregister engine .
14227	Handle reply messages .
14228	Flush notifications from the socket .
14229	Flush results from the given socket .
14230	Flush control messages .
14231	Flush messages from the control socket .
14232	Flush messages from the given socket .
14233	Spin every interval
14234	Stop the current spin thread .
14235	Flush the socket .
14236	Wait for jobs to finish .
14237	Send a apply request to the given socket .
14238	Send an execute request to the specified socket .
14239	Return an asynchronous result .
14240	Send a status request to the engine .
14241	Purge results from the query .
14242	Query hub history .
14243	Query the database .
14244	Return a set of opcode objects .
14245	Get the byte parser for this document .
14246	Return the number of lines that match the given regexes .
14247	Parse the text .
14248	Return the first line of a line
14249	Return the first lines in a list .
14250	Parse the source and excluded lines .
14251	A list of all arcs .
14252	Determine the number of exit counts for this node .
14253	Return the child parsers for this node .
14254	Iterate over byte numbers and line numbers .
14255	Find all the lines in this parser .
14256	Return a string representation of the block stack .
14257	Split the code into chunks .
14258	Ensure that the given chunks are empty .
14259	Yields all the arcs in this block .
14260	Return a list of all child parsers .
14261	Return all arcs in this parser .
14262	Add options for coverage .
14263	Start the coverage .
14264	Generate HTML coverage report .
14265	Determine if a file should be included
14266	Interpret a distribution name into Distribution instances .
14267	Open a URL with the user agent .
14268	Fetch a distribution from the environment .
14269	Return the parent of obj .
14270	Return the root topic for the engine .
14271	Render a template and return the rendered string .
14272	Configure the plugin .
14273	Format an error .
14274	Split data by num .
14275	Convert a notebook to another .
14276	Convert a hex color to RGB .
14277	Get color and color for a style .
14278	Returns QFont with given family .
14279	Handle interactive reply messages .
14280	Handle a history reply
14281	Handle pyout messages .
14282	Handle display data .
14283	Show start and end channels
14284	Execute a file .
14285	Process an exception message .
14286	Process an execute payload .
14287	Set the default style .
14288	Open a file .
14289	Create a new in - prompt .
14290	Makes a continuation prompt .
14291	Update style sheet .
14292	Handle highlighting .
14293	Handle response from CloudStack .
14294	Sign request parameters .
14295	Transform the data to a dictionary .
14296	Return virtual memory information .
14297	Return system CPU times .
14298	Return the UID of the process .
14299	Get the groups of the process .
14300	Return a list of threads in the process .
14301	Return list of open files for this process .
14302	Return the hash of a package .
14303	Return package information .
14304	Return package information .
14305	Return the number of cpus on Windows .
14306	Return the number of available cpus .
14307	Return the next result set .
14308	Fetch a single row from the database .
14309	Fetch many rows from the database .
14310	Fetch all rows .
14311	Connect to peer
14312	Read a notebook from a string .
14313	Read a notebook from a string .
14314	Read data from a file .
14315	Write notebook to given format .
14316	Write data to file .
14317	Convert IPynb files to metadata
14318	Load values from a dictionary .
14319	Check if the given name matches the filter .
14320	Determine if a class matches the given class .
14321	Check if a directory should be included .
14322	Check if a file should be included .
14323	Determine if a given function should be called .
14324	Determine if a method should be matched .
14325	Determine if a module should be included .
14326	Return a list of lines from a file .
14327	List pdb files
14328	print list of lines
14329	Print the pdef .
14330	Returns the conversion factor between two currencies .
14331	Convert currency to currency
14332	Compute the market return between two dates .
14333	Return the encoding of a stream .
14334	Return the default encoding .
14335	Write the connection file .
14336	Start the heartbeat thread .
14337	Log the connection info .
14338	Initialize a session .
14339	Initialize IO streams .
14340	Init the kernel .
14341	Initialize the connector .
14342	Connect to the controller
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert domain name to FQDN .
14346	Adds options to the given parser .
14347	Configure the exclude options .
14348	Determine if a directory should be excluded .
14349	Return True if the given extension is linked to the given extension .
14350	Call each function in a list of functions .
14351	Call a list of functions in reversed order .
14352	Append a function to the list .
14353	Insert a function at the given index .
14354	Format the usage message .
14355	Initialize the application .
14356	Write the pid file for this server .
14357	Remove the pid file if it exists .
14358	Get PID from pid file .
14359	Construct a parser from a magic function .
14360	Return the real name of a function .
14361	Highlight the block .
14362	Rehighlight the block .
14363	Sets the format for the highlighting .
14364	Copy text to clipboard .
14365	Execute a command .
14366	Reset the prompt .
14367	Handle tab pressed .
14368	Create context menu .
14369	Handle key press events .
14370	Insert text into the prompt .
14371	Handle complete reply .
14372	Sends a call to the kernel .
14373	Handles the callbacks .
14374	Handle reply messages .
14375	Handle input request .
14376	Handle kernel died .
14377	Handle an object info reply
14378	Handle pyout messages .
14379	Handle stream message .
14380	Handles shutdown requests
14381	Execute a file .
14382	Interrupt the current kernel .
14383	Reset kernel .
14384	Restarts the kernel .
14385	Handle calltips .
14386	Handle completion .
14387	Process error message .
14388	Process an execute message
14389	Handles document contents change .
14390	Add a plugin .
14391	Chain all registered plugins .
14392	Iterate over all registered plugins .
14393	Executes a single function and returns the result .
14394	Configure plugins .
14395	Load all registered plugins .
14396	Load plugins .
14397	Convert latex to png .
14398	Convert latex string to HTML .
14399	Convert a string to an image .
14400	Check if the requirement already exists .
14401	Iterate over processes .
14402	Return the amount of idle time .
14403	Return the object as a dictionary .
14404	The name of the process .
14405	Return the executable of this process .
14406	Return the children of this process .
14407	Calculate CPU percent .
14408	Returns the amount of memory allocated to this machine .
14409	Returns a list of memory maps .
14410	Check if the process is running .
14411	Suspend the process .
14412	Resumes the process .
14413	Kill the process .
14414	Wait for the process to complete .
14415	Wires the kernel .
14416	Hijack the main window .
14417	Check if an identifier is shadowed
14418	Initialize the default transformers .
14419	Register a new transformer .
14420	Unregister a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize handlers .
14425	Register an escape handler .
14426	Unregister an escape handler .
14427	Handle a line_info .
14428	Find handler for line_info .
14429	Apply transformers to a line .
14430	Process a line .
14431	Apply prefilter to lines .
14432	Instances of IPyAutocall in user_ns get autocalled immediately
14433	Allow ! and !! in multi - line statements if multi_line_specials is on
14434	Return the handler for the given line .
14435	Check if the initital identifier on the line is an alias .
14436	Handle line_info .
14437	Process an IPython line .
14438	Handle magic commands .
14439	Handle IPython magic .
14440	Process line info .
14441	Handle a single line .
14442	Reimplemented to hide the widget .
14443	Stop the hide timer .
14444	Reimplemented to draw the tooltip .
14445	Display the call information .
14446	Show the tip .
14447	Handle the cursor position .
14448	Creates a property .
14449	Convert path to absolute form .
14450	Validate an instance against a schema .
14451	The masked representation of the message .
14452	Check if there is no global site .
14453	Calculate pword frequencies for each word .
14454	Create a view decorator .
14455	Return a list of aliases for the current platform .
14456	Define an alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Call an alias .
14460	Transform an alias into a command .
14461	Expand aliases .
14462	Implements the autodoc directive .
14463	Resets the settings .
14464	Split string into actions .
14465	Gets the color for the given color .
14466	Returns QTextCharFormat instance .
14467	Generate a JWT
14468	A decorator to acquire a lock .
14469	Clean expired jwt tokens
14470	Check if a token is already used .
14471	Validate a JWT
14472	Acquire a semaphore .
14473	Return the common prefix of a list of items .
14474	Reimplemented event handler .
14475	Determine the size of the widget .
14476	Check if the current cursor can cut .
14477	Check if the clipboard can be paste .
14478	Clear the input buffer .
14479	Cut the text .
14480	Execute the input buffer .
14481	Get the input buffer .
14482	Set the input buffer .
14483	Set the completion font .
14484	Pastes text into buffer .
14485	Prints to the given printer .
14486	Prompt to the top cursor .
14487	Reset the current font .
14488	Appends text to the cursor .
14489	Append HTML to the display .
14490	Append an HTML snippet to the display .
14491	Append text to the prompt .
14492	Clears the text cursor .
14493	Handles completion .
14494	Fills the text buffer with the given text .
14495	Check if a control key is down
14496	Create a QTextEdit widget .
14497	Create a page control widget .
14498	Reimplemented event handler .
14499	Returns the text of the given block
14500	Return the end cursor
14501	Returns the column number of the input buffer .
14502	Return the line of the input buffer .
14503	Return the prompt cursor .
14504	Get selection cursor
14505	Insert the continuation prompt into the cursor .
14506	Inserts the given text into the given cursor .
14507	Insert the given HTML into the cursor .
14508	Insert text into cursor .
14509	Move the cursor to the end .
14510	Exit the keyboard .
14511	Page .
14512	Called when the prompt is started .
14513	Read a line from the widget .
14514	Sets the prompt prompt .
14515	Set the top cursor .
14516	Show a prompt .
14517	Adjust the scrollbars .
14518	Main function .
14519	Copy a config file .
14520	Create a profile directory by name .
14521	Find a profile directory by name .
14522	Convert a cmp = function into a key = function
14523	Read the contents of a file
14524	Read multiple lines from ps1 and process them .
14525	Create a temporary file and return it .
14526	Close the stream .
14527	Write data to the stream .
14528	Add a new heart handler .
14529	Register a heartbeat failure handler .
14530	a heart just beat
14531	Returns a list of batches of the given sequence .
14532	Extract the path and filename from a path
14533	Walk the directory tree .
14534	Display all progress information .
14535	Calculate the time unit and time in seconds .
14536	Extract dist_cfg from dist_filename
14537	Uncache a zipdir .
14538	Quote an argument .
14539	Checks if all of the dependencies in the top level directory are found .
14540	Set fetch options for base .
14541	Create home directory path
14542	Check if the given name is an archive file .
14543	Make sure an object is mutable .
14544	Return a readonly proxy .
14545	Create a new heading cell .
14546	Create a new notebook node
14547	Create a new notebook node .
14548	Check if path is writable .
14549	Unquote a filename .
14550	Return the path to a file .
14551	Find the absolute path of a file .
14552	Get the home directory .
14553	Return the xdg configuration directory .
14554	Get the IPython directory .
14555	Return the directory of IPython .
14556	Return the path to an IPython module .
14557	Determine if a target is outdated
14558	Return the hash of a file .
14559	Check for an IPython config file .
14560	Update the suggestions dictionary for the given object .
14561	Returns suggestions for the given object .
14562	Return suggestions for the given object .
14563	Return the relative path to this directory .
14564	Return a list of paths that match the pattern .
14565	r Return a list of lines .
14566	Return the md5 hash of the file .
14567	Begin profiling .
14568	Write profiler to stdout
14569	Close profiler .
14570	Handle heartbeats
14571	Enable wx integration with wx .
14572	Disable wx event loop .
14573	Disable Qt4 event loop .
14574	Enable gtk integration .
14575	Enable Tkinter application .
14576	Enable Pyglet integration .
14577	This function saves the wave_saver .
14578	Initialize the database .
14579	Execute a SQL query .
14580	Get information about a specific session .
14581	Get the last n records .
14582	Get a range by string .
14583	Return the path to the history file .
14584	Update a session .
14585	Reset the history .
14586	Get a range session
14587	Store the output of the database .
14588	Write out the cache .
14589	Stop the thread .
14590	Determine the number of CPUs
14591	Return a list of the system CPU times per CPU .
14592	Return a list of disk partitions .
14593	Get a list of processes .
14594	Pretty - print a pair .
14595	Format a list of statements .
14596	Return a string representation of the stack .
14597	Wraps a function so that it can be expensive .
14598	Join multiple regexes .
14599	Remove a file from the filesystem
14600	Updates the md5 hash with the given value .
14601	Update the profiles
14602	Start a cluster .
14603	Stop Engine .
14604	Search for a command .
14605	Read the system body .
14606	Find code units .
14607	Run report_fn and report the results .
14608	Decorator that raises an AssertionError .
14609	Set trace to stdout
14610	Decorator to check if a function is exceeded .
14611	Load IPython extensions
14612	Run the code .
14613	Run lines in user namespace .
14614	Run startup .
14615	Run all of the executable files in the list .
14616	Run code from command line .
14617	Run the specified module .
14618	Decorator for generic functions .
14619	Return the filename of a static file
14620	Return the contents of a file
14621	Escape HTML characters .
14622	Run the coverage report .
14623	Create local static report files
14624	Write html to file .
14625	Generate a hash for a file .
14626	Generate an index . html file .
14627	Read coverage status from directory .
14628	Write coverage status to directory .
14629	Compare two lists .
14630	Get a slice of a sequence .
14631	Split a sequence into multiple elements .
14632	Read config file .
14633	Read the contents of the MANIFEST . in file .
14634	Convert a glob pattern to a regular expression .
14635	Check if filename matches any of the patterns .
14636	Return a list of versions of git ls - files .
14637	Start a kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Get a kernel by its id .
14641	Get kernel ports .
14642	Return the notebook associated with the given kernel id .
14643	Start a kernel .
14644	Shutdown a kernel .
14645	Interrupt the kernel .
14646	Restarts a kernel .
14647	Creates an iiub stream .
14648	Create a shell stream .
14649	Create a hb stream .
14650	Reset instance properties
14651	Export HTML to file .
14652	Export html to xhtml file .
14653	Ensure unicode is UTF8
14654	Replace blank lines with trailing whitespace .
14655	Exports the document .
14656	Try to get an object from the database .
14657	Build a query from a list of terms .
14658	Build a query from a string .
14659	Build a query for dates greater than the given date field .
14660	Build a query for dates less than the given date field .
14661	Return a boolean indicating if a field is null or blank .
14662	Make sure case_INSENSITIVE_FIELDS is set .
14663	Add options to parser .
14664	Validate the attributes of this element
14665	Determine if a method should be accepted
14666	Rotate the text .
14667	Monkey - patch the zmq module .
14668	Create a parser from a URL .
14669	The websocket URL .
14670	Reserialize a reply message .
14671	Inject a cookie message into the request .
14672	Start a heartbeat .
14673	Actually start the hb .
14674	Stop receiving messages .
14675	Load the file .
14676	Get index .
14677	Seek to the given index .
14678	Edit block .
14679	Show the block .
14680	Print all the src_blocks .
14681	Apply a method to a collection of subjects .
14682	Run a batch of functions in a collection .
14683	Run a function over a sequence .
14684	Run a function in parallel .
14685	A decorator that wraps a function in a context .
14686	Decorator to wrap object attributes .
14687	Get the source code for a traceback .
14688	Return a list of lines that match pos .
14689	Display a countdown .
14690	Cleanup the engines
14691	Check if condition is satisfied .
14692	Called when the result is set .
14693	Decorator for saving message IDs .
14694	Call the given function f with all outstanding results .
14695	Runs the given function f and spins .
14696	Get all the messages in the pipe .
14697	Gets a message if there is one that is one that is ready .
14698	Decorator to define a property .
14699	Get only one or more fields .
14700	Parse a URL into a dictionary .
14701	Return a list of modules in path .
14702	Get the list of root modules .
14703	Quick completer for commands
14704	Implements the module completion .
14705	Completes completer .
14706	Handle tab completion .
14707	Parse an XML attribute .
14708	Configure the plugin .
14709	Write XML report to stream .
14710	Add an error .
14711	Add a failure to the report .
14712	Add a test case .
14713	Generate a random bin of two numbers
14714	Returns the index of the given loads .
14715	Internal method to register engine .
14716	Unregister an engine .
14717	Handles all tasks that are grouped by the engine .
14718	Dispatch a task .
14719	Assert that all the tasks have the same time .
14720	Mark a message as unreachable .
14721	Determine if the job should run .
14722	Save unmeted job .
14723	Submit a task to the bus .
14724	Called when a result is received .
14725	Handle a result .
14726	Handle unmetable dependencies .
14727	Update the dependency graph .
14728	Start logging .
14729	Show current logging state .
14730	Log a line .
14731	Write data to the log file .
14732	Stop logging .
14733	Create a new notebook node .
14734	Add a string to the command chain .
14735	Add a regex to the command chain
14736	Given a key yield the corresponding object .
14737	Get all matches for a key .
14738	Called when the notebook directory is changed .
14739	Return a list of notebook ids .
14740	Create a new notebook id .
14741	Remove notebook_id from the cache .
14742	Check if notebook exists .
14743	Find the path to a notebook .
14744	Return the path to a notebook .
14745	Get a notebook .
14746	Get a notebook object .
14747	Save a notebook .
14748	Save notebook .
14749	Save a notebook object
14750	Delete notebook .
14751	Create a new notebook .
14752	Copy notebook .
14753	Yield tokens from a list of tokens .
14754	Yields tokens from source .
14755	Load the default config .
14756	Return a list of default shells .
14757	Parse command line arguments .
14758	Initialize the IPython application .
14759	Initialize the shell
14760	Initialize banner
14761	Return a human - readable representation of an object .
14762	Parse a name into a list .
14763	Set the default value of the property .
14764	Register a handler for a property change .
14765	Return a dictionary of traits from a class .
14766	Return the metadata for the given trait .
14767	Validate value .
14768	Return the default value .
14769	Check if this set has completed .
14770	Return True if this query is unreachable .
14771	Return the dependency as a dict .
14772	Calculate the depth of a node .
14773	Pretty - print a binary tree .
14774	Disambiguate a DNS URL .
14775	Wrapper for allreduce .
14776	Validate the list of engines .
14777	Dispatch a message to the appropriate handler .
14778	Dispatch a query message .
14779	Handle a new heart
14780	Handle a heartbeat failure .
14781	Save a task request .
14782	Save a task result message .
14783	Save an IOPub message
14784	Handle a connection request .
14785	Called when an engine is registered .
14786	Unregisters an engine
14787	Finish registered engines .
14788	Shutdown a client .
14789	Purge pending results .
14790	Extract the content and buffers from a single record .
14791	Get the results for a given client .
14792	Get history of client .
14793	Handle a query .
14794	Change the current working directory .
14795	Decode a CompletedCommand object into a ParsedComplementedCommand object .
14796	Run a command under r root .
14797	Execute the command .
14798	Dispatch a message .
14799	Check if message is from current session
14800	Run the annotate_file method .
14801	Annotate a cu .
14802	Get installed version .
14803	Recursively squash unicode strings .
14804	Extract message header .
14805	Make sure the packer is correct .
14806	Create a message structure .
14807	Sign a list of messages .
14808	Serialize a message .
14809	Send a message to a zmq socket .
14810	Send multiple messages .
14811	Receive messages from a socket .
14812	Given a list of msg_list and a list of msg_list and a list of msg_list and a list of msg_list
14813	Unserialize a message list .
14814	Save SVG document .
14815	Writes a string to the clipboard .
14816	Convert an SVG string to an image .
14817	Return object s info .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Get the argument specification of an object .
14821	Return the call line and docstring for a call .
14822	Find the absolute path of an object .
14823	Find the source line number of the given object .
14824	Return the definition of an object .
14825	Return the header of the table .
14826	print no info
14827	Print a function definition .
14828	Print the documentation of an object .
14829	Display source code .
14830	Print the contents of a file
14831	Format a list of fields .
14832	Display information about an object .
14833	Search for namespaces .
14834	Start a thread that runs the reactor .
14835	Create a Deferred from a test case .
14836	Find the best string that matches the query .
14837	Convert to string .
14838	Convert to XML document .
14839	Load all modules in a package .
14840	Invert a dictionary .
14841	Merge two dictionaries
14842	Convert an object to primitives .
14843	format raw string
14844	Return a list of Matplotlib figures .
14845	Print a matplotlib figure .
14846	Run matplotlib .
14847	Select figure format
14848	Return the GUI and backend
14849	Activate matplotlib .
14850	Configure inline support .
14851	Activate Pylab .
14852	Trace the given frame .
14853	Starts profiling .
14854	Stop the trace .
14855	Start a new tracer .
14856	Starts the execution trace .
14857	Starts the collector .
14858	Stop collecting tracers .
14859	Stop running coverage .
14860	Resumes the installation trace .
14861	Get the line data
14862	Collect all exceptions from a list or list .
14863	Return the traceback for the exception .
14864	Start coverage process
14865	Return the canonical directory of a given morf .
14866	Return the source code for a file .
14867	Return a boolean indicating whether the frame should be traced .
14868	Determine if this should be traced .
14869	Log a warning message .
14870	Check for Python source files .
14871	Start the config .
14872	Exit if auto_data is enabled .
14873	Exclude a given regex
14874	Return the regex for which to be used .
14875	Save data to disk .
14876	Combine parallel data into one .
14877	Harvest the data from the module .
14878	Compute the analysis of a morf .
14879	Return a tuple of statements for a given morf .
14880	Return an Analysis object .
14881	Harvest data into a file .
14882	Runs an annotated file and returns a report .
14883	Generate HTML report .
14884	Return XML report .
14885	Display one or more objects .
14886	Display a list of objects .
14887	Display a list of objects .
14888	Display a list of objects .
14889	Display a list of objects .
14890	Display objects in LaTeX .
14891	Display a list of objects .
14892	Display a list of objects .
14893	Reload the file .
14894	Find the path to a command .
14895	Run a command and print its output .
14896	Forward read events from fd
14897	Read the line and send it .
14898	Import the launcher class .
14899	Start the cluster .
14900	Build a launcher .
14901	Start the engines
14902	Start the cluster .
14903	Get an application using wx .
14904	Check if event loop is running inwx .
14905	Start an event loop .
14906	Get an application for IPython .
14907	Check if event loop is running in Qt4
14908	Start event loop .
14909	Create a blank canvas
14910	Draws cross on the canvas .
14911	Draws a line .
14912	Draw text at given position .
14913	Create an ANTsImage from a grayscale image .
14914	Return a uuid
14915	Return a unique key for a GET request .
14916	Returns the domain of a given URL .
14917	Get query parameters from a URL .
