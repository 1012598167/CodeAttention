0	Convert Sina XML to a list of urls .
1	Download and download a website .
2	Download sina data .
3	Formats text .
4	Print text to stderr .
5	Print a message to stdout .
6	Print a message to stdout .
7	Detect OS .
8	Download a vimeo .
9	Convert ckplayer xml to dict
10	Get video url from video_id
11	Extract m3u real url and segment list of segments
12	Decorates given text .
13	Download the content of the Chromecast .
14	Download the stream .
15	download video by id
16	Match all patterns in text .
17	Parse a query parameter .
18	Download content from url .
19	POST content to url
20	Parses host and returns hostname and port .
21	Get a room ID by its URL .
22	Get the title of the topic part by index .
23	download wanmen by course
24	download wanmen by course topic
25	Checks if a task has a task .
26	Clear the event buffer .
27	Get a snowflake connection .
28	Extract AWS credentials from the connection
29	Get the value of a field
30	Copy SQL to the database
31	Bulk dump table to file
32	Uploads the file to Google Cloud Storage .
33	Get the maximum partition of a table .
34	Get a mysql connection
35	Show the current state of a task .
36	Restart worker threads .
37	Get a connection object
38	Translate values to target language .
39	Get details about an instance
40	Create an instance .
41	Patch an instance .
42	Deletes an instance .
43	Get a single database
44	Create a new database .
45	Update a database .
46	Deletes the specified database .
47	Export an instance .
48	Start the SQL proxy process .
49	Stop the proxy process .
50	Get the version of the proxy .
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete the connection
54	Returns the sqlproxy runner
55	Get the database hook
56	Clean up the database connection .
57	Reserve free TCP port .
58	Normalize a job id .
59	Extract the error code from an error .
60	Remove all DagRun objects from the database .
61	Removes all the tasks from the database .
62	Set the state of all DAGs in the database .
63	Print performance statistics .
64	Checks the status of all tasks .
65	Invoke the lambda function .
66	Create evaluation operations .
67	Make a directory .
68	Convert string to float if possible .
69	Convert datetime to timezone .
70	Convert datetime to naive timezone .
71	Wrapper for datetime
72	Get the druid connection
73	Get a connection object .
74	Run the given endpoint .
75	Check the response .
76	Run a prepped request and check the response .
77	Create a session .
78	Decorator for functions that provide a session .
79	Drop database .
80	Return a string describing the exception .
81	Fetch records from the database .
82	Execute a query against the database .
83	Run the given hql .
84	Insert rows into table .
85	Get the connection object
86	Check if a collection exists .
87	Create a new collection .
88	Check if a database exists .
89	Creates a new database .
90	Deletes the specified database .
91	Deletes a collection .
92	Insert documents into a collection .
93	Deletes a document .
94	Get a single document
95	Get documents from an SQL query .
96	Get a function by name
97	Create a new function .
98	Updates a function .
99	Uploads the function to a zip file .
100	Deletes a function .
101	Get the status of all dependencies .
102	Returns True if all conditions met .
103	Get all failures that have failed .
104	Parse S3 configuration file .
105	Get frozen credentials .
106	Get a connection to the database .
107	Flush the buffer .
108	Correct the filename of a zip file .
109	List all files in a given directory .
110	Constructs a TaskInstance
111	Launch the process manager .
112	Send the termination message to the broker .
113	Exit the process gracefully .
114	Start the worker process .
115	Start the main loop .
116	Start the process in sync .
117	Refresh the DAG directory .
118	Log file processing statistics .
119	Remove import errors from the database .
120	Log file processing stats .
121	Set new_file_paths .
122	Waits until all processed files are done .
123	Update the state of the DAG .
124	End all processes .
125	Create a new SSH client .
126	Creates a transfer job .
127	Get a transfer job
128	Returns a list of all transfer jobs that match the filter .
129	Updates a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resumes a transfer operation .
134	Waits for the given job to be completed .
135	Find tasks for a given task instance .
136	Returns the number of open slots in the pool .
137	Execute a command .
138	Remove option from section .
139	Get a section .
140	Allocates a set of key ids .
141	Begin a transaction .
142	Commit changes .
143	Lookup data for one or more keys .
144	Rollback a transaction .
145	Run a query .
146	Get an operation by name
147	Delete an operation .
148	Poll an operation until it is done .
149	Export project to a bucket .
150	Import a file from a bucket .
151	Publish a message to a target ARN .
152	Get the hostname of the host .
153	Get the connection to the language service .
154	Analyze a single document .
155	Annotate a single document .
156	Classify text .
157	Get the template fields for a class .
158	Implements template field .
159	Disposes the database connection pool
160	Prepare the classpath
161	Check to see if task_id is available
162	Detect if the configuration variable is in the configuration file .
163	Convert an Alchemy object to a dictionary .
164	Splits a list into chunks .
165	Apply a function to an iterable .
166	Chain multiple tasks together .
167	Pretty - print rows .
168	Render a log filename .
169	Get dataproc connection
170	Waits for the operation to finish .
171	Coerce the content into a string .
172	Process the operator execution .
173	Run the pig command .
174	Fetches the celery task s state
175	Return the number of tasks to send to send .
176	The number of tasks per fetch process .
177	Set the value of a variable
178	Get a connection to the API .
179	Create a job .
180	Get a single job
181	Wait until the job finished .
182	Create a new version .
183	Set the default version of a model .
184	List versions of a model .
185	Delete a version .
186	Create a model .
187	Get a model by its name .
188	Write batch data to DynamoDB
189	Injects the executors module into sys . modules .
190	Gets the default executor .
191	Returns an Executor instance
192	Called when an error occurs .
193	Get a pymssql connection
194	Trigger a dag .
195	Delete a DAG .
196	Get information about a task .
197	Get all pools
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the state and exit code of an instance .
202	Get the messages for a given instance .
203	Get logs from a resource group .
204	Delete a container group .
205	Check if a container group exists .
206	Decorator used to apply default parameters .
207	Construct the ingest query .
208	Publish a message on the channel
209	Returns a list of DagRun objects
210	Returns a queryset of all task instances matching the given state .
211	Get a TaskInstance
212	Get the previous DagRun before this DagRun .
213	Get the previous scheduled dagrun .
214	Update the state of the task .
215	Verify that all task instances are present .
216	Send a jenkins request to the server .
217	Convert a context dictionary into Airflow variables .
218	Called when the DAG is triggered .
219	Send a metric to the server .
220	Query metrics .
221	Get a dag by its id
222	Marks a list of dead jobs .
223	Merge a DAG into the DAG .
224	Load all of the files in the dag_folder .
225	Report the dagbag stats .
226	Add number of days to datetime .
227	Format a datetime object using input_format .
228	Check to see if the file is a directory with filesize
229	Check to see if a file exists .
230	Clear the task instances from the database .
231	Return the current attempt number .
232	Generate a command for airflow run .
233	Get the current state of the Task instance .
234	Records the task instance to FAILED
235	Refresh TaskInstance from database .
236	Clear the XCom object .
237	Return the key for this job .
238	Check if this task is done .
239	Returns the next retry datetime .
240	True if this job is ready to be ready to retry .
241	Check if the pool is full
242	Fetch a DagRun object
243	Push a key to the xcom .
244	Pull one or more tasks from a list of tasks .
245	Initialize the run context .
246	Close the file .
247	Get a connection to compute
248	Start an instance
249	Set the machine type .
250	Get instance template .
251	Insert an instance template .
252	Get instance group manager
253	Patch an instance group manager .
254	Wait for the operation to complete .
255	Check if a bucket exists .
256	Create S3 bucket .
257	Check if a prefix exists in the bucket .
258	List prefixes in a bucket .
259	List the keys in a bucket .
260	Check to see if a key exists .
261	Get an object by key .
262	Reads the contents of a key .
263	Get the contents of a key .
264	Check if a wildcard key exists .
265	Get a matching key from S3 .
266	Upload a file to S3 .
267	Load a string from a string .
268	Loads bytes into the S3 bucket .
269	Upload a file - like object to S3 .
270	Copy an object from one bucket to another .
271	Query the cassandra connection .
272	Convert a user type .
273	Sends email .
274	Get a connection to the API .
275	Recognise the given audio .
276	Execute the query .
277	Load entry point plugins .
278	Validate plugin object .
279	Skip a list of tasks
280	Get a connection to Azure Storage .
281	Check if a file exists .
282	Upload a file to the ADL .
283	List files under path .
284	Execute the query .
285	Uncompress a file .
286	Execute the sql query
287	Decorator for logging .
288	Build metrics for a given function
289	Create a cgroup in the given path .
290	Delete a cgroup .
291	Parse the given host .
292	Perform an API call .
293	Get a Salesforce connection
294	Execute a query
295	Describe an object
296	Get the available fields for an object
297	Get object from Salesforce
298	Convert column to timestamp
299	Write query results to file .
300	Get a MongoDB connection .
301	Get a collection of resources
302	Replace multiple documents .
303	Checks if an email has an existing mail .
304	Retrieve mail attachments by name .
305	Download mail attachments .
306	Get a list of attachments by name .
307	Get the file and payload
308	Send records to the delivery stream .
309	Gets the status of all tasks in the task .
310	Sends an email .
311	Sends an email using SMTP .
312	Convert datetime to UTC .
313	Check if a blob exists .
314	Check if a blob with a given prefix exists .
315	Create blob from string data .
316	Read a file from a container .
317	Delete a file from a container .
318	Execute the mlST command
319	Get FTP connection
320	List files in a directory .
321	Retrieve a file from the FTP server .
322	Store a file on the remote server .
323	Get the modification time of a file
324	Executes the Discord webhookHook .
325	Get a connection
326	Check if a directory exists .
327	Check to see if a file exists .
328	List all directories and files in the specified share .
329	Create a new directory .
330	Create a new file from a file .
331	Create a new file from a string .
332	Create a new file from a stream .
333	Get a storage connection .
334	Copy a blob from one bucket to another .
335	Download an object from a bucket .
336	Upload a file to a bucket .
337	Check if a blob exists .
338	Check if blob has been updated after timestamp
339	Delete an object from a bucket .
340	List blobs in a bucket .
341	Get the size of an object in bucket .
342	Get the crc32 checksum of an object .
343	Get the MD5 hash of an object .
344	Create a bucket .
345	Compose source objects into destination blob .
346	Check if secondary training status changed .
347	Extract secondary training status message from job description .
348	Upload a file to S3 using S3 .
349	Configure S3 resources .
350	Validate S3 URL .
351	Get a log connection .
352	Create a new training job .
353	Create a new hyperparameter tuning job .
354	Create a transform job .
355	Create an endpoint
356	Describe a training job .
357	Check the job status
358	Check the status of a training job .
359	Executes the dataflow hook .
360	Run migrations on the database .
361	Run migrations on database .
362	Delete an instance .
363	Create an instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the connection to the CLI
368	Prepare the hive configuration
369	Load a DataFrame into a table .
370	Load a table from a file .
371	Get the metastore client
372	Check for named partition .
373	Check if a table exists
374	Get a connection to the hive
375	Get results from hql
376	Write the results to a CSV file .
377	Get records from the database .
378	Get results from hql
379	Get a search client
380	Returns the endpoint to send to the bot
381	Send a Dingding message .
382	Bind parameters to operation .
383	Escape a string .
384	cast string field to bool
385	Validate that the value is of the expected type .
386	Get a BigQuery connection
387	Get the BigQuery service .
388	Check to see if a table exists .
389	Creates empty table .
390	Updates a table .
391	Cancel the running job .
392	Deletes a table .
393	Runs a table operation .
394	Runs grant access to a dataset .
395	Get a dataset resource .
396	Get list of datasets .
397	Insert rows into a table .
398	Execute an operation .
399	Execute the operation with the given arguments .
400	Gets the next page of results .
401	Returns a Postgres cursor
402	Make intermediate directories .
403	Create a queue .
404	Send a message to a queue .
405	Run the command .
406	Remove the configuration file .
407	Main entry point for nVD3 .
408	Build the HTML header .
409	Builds the container .
410	Builds the javascript chart
411	Create a x axis .
412	Create a y - axis .
413	Get a SQLite connection
414	Decorator for logging .
415	Decorator for gzip .
416	Get the last DagRun from the database .
417	Create a new dagrun
418	execute the message
419	Returns a JSON response .
420	Attempt to open a file .
421	Generate a cache key for the request .
422	Get a connection to the Video Information Service .
423	Annotate a video .
424	Get API key .
425	Get a connection to the opsgenie server .
426	Execute an alert
427	Build the payload for opsgenie
428	Execute the operation
429	Get the connection object
430	Run a query .
431	Check the status of a query execution .
432	Check query execution status .
433	Get a pysftp connection
434	Handles rate limit exception .
435	Call zendesk api
436	Get the partitions of a table .
437	Get a table from a database .
438	Get the location of a table .
439	Get the cluster status
440	Deletes a cluster .
441	Get the snapshots of a cluster .
442	Restore a cluster from a cluster snapshot .
443	Creates a cluster snapshot .
444	Execute the Slack API .
445	Create a job flow
446	Filter files by size
447	Filters files with ignored extensions
448	Execute the query .
449	Get a pool by name
450	Create a new pool .
451	Delete a pool .
452	Convert a Python dictionary to a protobuf .
453	Wait for operation to complete .
454	Get information about a specific operation .
455	Append a resource label to a cluster .
456	Create a cluster .
457	Get a cluster by name .
458	Get webhook endpoint .
459	Build the message payload .
460	Execute the webhook .
461	Encrypt the given plaintext .
462	Imports a table .
463	Imports the given query into target_dir .
464	Export table to export_dir .
465	Get a texttoech client .
466	Synthesize input data .
467	Close the S3 bucket .
468	Get init containers from kube config
469	Get the environment variables for this worker .
470	Returns a list of worker secrets .
471	Get security context .
472	get additional links
473	Heartbeat the job .
474	Launch a process .
475	Start the process .
476	Check if the process finished .
477	Exit gracefully .
478	Update import errors .
479	Process all tasks in the queue .
480	Sets the state of a Task instance without a dag .
481	Get the concurrency map for the given states .
482	Update the state of a task instance .
483	Enqueue tasks with queued state
484	Execute all tasks in the simple dag bag .
485	Update the state of tasks that failed to execute .
486	Process the execution of the executor .
487	Process a DAG file .
488	Update the tasks counters in the database .
489	Update the state of the executor .
490	Get a DagRun object for the given run date .
491	Get task instances for a given dag run .
492	Execute the tasks for the given run dates .
493	Set all dag runs to FAILED
494	Execute the task .
495	This method is called when a job is received .
496	Get client .
497	Get instance by ID .
498	Apply a function to an instance .
499	Creates an instance .
500	Updates an instance .
501	Delete an instance .
502	Get a database .
503	Create a new database .
504	Updates an existing database .
505	Delete a database .
506	Check if the attachment exists .
507	Merge additional properties into a single dictionary .
508	Get a connection to the cluster .
509	Check if a table exists in the cluster .
510	Check if a record exists in the database .
511	Build command for track driver status command .
512	Submit the application .
513	Process the spark submit log .
514	Process the spark status log .
515	Get task runner .
516	Wait for the job to finish .
517	Return a mysql cursor
518	Create a CSV file .
519	Write a local schema file .
520	Get col_type from schema
521	Map mysql_type to string .
522	Executes the SQoop .
523	Decorator to apply the pipeline
524	Extract extra data from dejson
525	Generate dates between start_date and end_date
526	Scale time units according to unit
527	Returns the number of days after n days
528	Initialize a role .
529	Delete a role
530	Returns a list of user s roles
531	Returns a set of all permissions for the user
532	Returns True if user has any of the specified roles .
533	Check if user has permission .
534	Clean faulty permissions .
535	Merge a permission into a view
536	Update the permissions of an admin .
537	Synchronize the permission for a dag .
538	Create permissions for all DAGs .
539	Returns the Fernet object
540	Invoke the partition .
541	Get the Lambda catalog hook .
542	Receive messages from SQS queue .
543	Returns a connection object for the connection
544	Get a connection to a host .
545	Check if an HDFS path exists .
546	r Upload a file to HDFS .
547	Get a pql connection
548	Returns the URI for the connection
549	Convert a date to a dictionary .
550	Convert a time object to a dictionary .
551	Get a redis connection
552	Get a Pandas DataFrame from the database .
553	Run a SQL statement .
554	Set autocommit state .
555	Insert rows into a table .
556	Serialize a cell into a string .
557	Check the health of the scheduler
558	get extra links
559	Get a cloudant connection
560	Executes the webhookHook .
561	Get Google API credentials .
562	Authenticate with the credentials .
563	Decorator to catch HTTP exceptions .
564	Decorator to fall back to default project_id .
565	Return a list of unfinished tasks .
566	Prepare the command for Spark - SQL
567	Convert a PIL Image to a torch tensor .
568	Normalize a tensor .
569	r Resize an image .
570	r Pad image .
571	Crop an image .
572	Crops a PIL Image
573	Flip image horizontally
574	Apply perspective transformation to an image .
575	Flip the image .
576	Crops the given image .
577	Adjust the brightness of an image .
578	Adjust the contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue value .
581	r Adjust the gamma of an image .
582	Rotate an image .
583	Apply the inverse affine transform .
584	Convert image to grayscale
585	Save tensor to file .
586	Find all classes in a given directory .
587	Read an image file .
588	Reads an info file .
589	Read matches files .
590	Compute accuracy .
591	Setup print function to be used for printing .
592	Download url to root .
593	List all directories under the given root .
594	List all files in the given directory .
595	Download a file from Google Drive .
596	Generate random params .
597	Generate random parameters .
598	Generate random params .
599	Get parameters for each image .
600	Generate random parameters .
601	Download the files and verify them
602	Download and extract images from the raw files .
603	Download and extract a zip file .
604	Returns the current theme name
605	Execute the search query .
606	Update the preferences .
607	Get the list of available themes
608	Parse search query
609	Parse response from dcdu .
610	Creates a custom gradient .
611	Multi - dimensional Normal Distribution .
612	Calculates the joint log probability for an 8 - school ensemble .
613	Benchmark a HMC .
614	Decorator to expand docstring .
615	Return the name of a distribution .
616	Build a custom variable .
617	Build a random variable .
618	Make a random variable from distribution_cls .
619	Performs one - step prediction on the observed time series .
620	Forecast the observed time series .
621	Mask x along axis .
622	Fail if x is finite .
623	Fail if x is at least rank at rank .
624	Returns the size of the event .
625	Evaluate a function over one - hot tensor .
626	Get the convert - to tensor function .
627	Returns the size of the mixture of mixture families .
628	Get the next interceptor .
629	Decorator for interceptors .
630	Decorator for tape .
631	Random logistic data .
632	Generate a matplotlib figure for each feature .
633	Build the input pipeline .
634	Check if map_values is valid .
635	Trace a function over a state .
636	Call the given function with the given arguments .
637	Call a function and return its gradient .
638	Concatenate from_structure .
639	Transform a log probability function into a tensor .
640	Performs a leapfrog step .
641	Metropolis HOSTings step .
642	Simulate Hamiltonian .
643	Sign the given control .
644	Create a layer from a dictionary .
645	Convert x to Tensor .
646	Create scale operator .
647	Creates a random walk normal function .
648	Returns a random walk function .
649	Expand x to event rank .
650	r Compute the entropy lower bound .
651	Compute the categorical probabilities .
652	Validate arguments .
653	Raises ImportError if TensorFlow is not installed .
654	Logistic regression .
655	Compute features and labels .
656	Cholesky covariance matrix .
657	Return the standard deviation of x .
658	Variance of variance .
659	Makes a positive axis .
660	Squeeze x along axis .
661	Calculate the Z dimension .
662	Inverse tensor .
663	Compute the semilocal trend transition matrix .
664	Semilocal displacement noise .
665	r Samples of ahalton sequence .
666	Generate permutations .
667	Helper for _get_ indices .
668	Calculate base expansion size .
669	Return a list of prime numbers that are less than n .
670	Returns the eps for a given dtype .
671	Hagerzhang model .
672	Fix step size .
673	Perform a bracket search .
674	Line search after bracketing .
675	The inner bisection function .
676	Prepare arguments for evaluation .
677	Convert a list of values into a Tensor .
678	Solve quadrature symmetric Gauss - Hermite quadrature .
679	Compute softmax quantiles for softmaxnormal quantiles .
680	Check if param is a batch parameter .
681	Determine the shape of the batch event shapes .
682	Interpolate a grid on a grid .
683	Scale a grid .
684	Scale operator w .
685	Concatenate tensors .
686	Helper function for log vectors .
687	Calculate the logsum of a vector vector .
688	Compute vectorized matrix .
689	Extract log probabilities .
690	Marginalized hidden probabilities .
691	Calculates posterior marginalizations .
692	Perform posterior mode .
693	Chooses random direction .
694	Sample next step .
695	Try to call fn with optional arguments .
696	Rend tensors to final_rank .
697	Run one step .
698	Build a TFDistribution from param .
699	Builds the variance of a model .
700	Minimize a tensor in a graph .
701	Computes the mean and variance of a time series .
702	Calculate the initial values of a masked time series .
703	Broadcast the batch shape to the given distributions .
704	Compute the factored joint MVn .
705	Computes the sum of multivariate normal distributions .
706	Calculates empirical statistics for observed time series .
707	Expand the trailing dimension of the observed time series .
708	Canonicalize an observed time series with mask .
709	Create a mixture of posterior draws .
710	Get the range of values .
711	Make a function that returns a summary statistic .
712	Unify distribution function signature .
713	Resolve distribution names into a tuple .
714	Get the required arguments for a function .
715	Computes the KL divergence between two distributions .
716	Build the distribution graph .
717	Resolve distribution arguments .
718	Computes the entropy of the distribution .
719	Check that an argument is in the support of the distribution .
720	Create image summary .
721	Visualize the reconstruction .
722	Generate summation of inputs .
723	Summarize distribution parameters .
724	Summarize the mean of inputs .
725	Create a multivariate NormalDiag .
726	Get the state of the previous state .
727	Call the LSTM cell .
728	Call the convolution layer .
729	Generate a model .
730	Reconstruct the model .
731	Sample static prior .
732	Sample the dynamic prior .
733	Returns the batch shape .
734	Returns the batch shape .
735	Makes a state space model .
736	Sample from state space .
737	Compute the minimum and minimum event ndims .
738	Convert vector size to square matrix size .
739	Returns the indices of the arguments along the given axis .
740	Sort values along axis .
741	Convert x .
742	One - dimensional tensor .
743	Convert a tensor to a numpy array .
744	Log NDTR transform .
745	Log an asymmetric series .
746	Error loss function .
747	Logarithm of x .
748	Compute the joint log probability of text messages .
749	Benchmark text messages using hmc .
750	Determines if the GP is univariate .
751	Gets the marginal distribution .
752	Get the index_points for this GaussianProcess instance .
753	Create an autoregressive stack .
754	Execute one step of the kernel .
755	Bootstrap training results .
756	Compute the outer squared difference between two vectors .
757	Compute the value and batchjacobian .
758	Prevent the second derivative of x .
759	Transform x .
760	Split a covariance matrix into a list of marginals .
761	Decompose a model from posterior moments .
762	Decompose the observed time series .
763	Decompose forecast by component of components .
764	Convert a dense tensor to a SparseTensor .
765	Decorator for operator operator .
766	Return a string representation of a tensor .
767	The shape of the tensor .
768	Returns the sample shape tensor .
769	Sample value .
770	Evaluate the expression .
771	Returns the tensor as a numpy array .
772	Calculates the covariates of the known scale prior .
773	Returns a default template for real NVP .
774	Gaussian unit norm .
775	Logunnorm probability of x .
776	Log normalization .
777	Returns the common dtype for a list of arguments .
778	Make a function that returns a summary statistic .
779	Broadcast tensor to target_tensors .
780	PDF for the peak
781	Calculates the effective sample size .
782	Compute the effective sample size for a single state .
783	Potential scaling reduction .
784	Returns the size of x along axis .
785	Broadcast a list of states to a list of states .
786	Gauss - Hermite quadrature gauss - Hermite quadrature .
787	Computes quantiles of the quadrature scheme .
788	Merge two matrices .
789	Return a new _Mapping with the given field .
790	Merge two dictionaries .
791	Recursively deep_tuple .
792	Initialize the left and double dots .
793	Find the indices of the best interval in x .
794	Slice the bounds of a tensor .
795	Sample with shrinkage .
796	Slice a single dimension .
797	Creates a setter that will set the value of model .
798	Creates a joint joint function for the given model .
799	Get keyword arguments for a function .
800	Block convolutional convolutional layer .
801	Builds a tree of trees .
802	Decorator for embedding functions .
803	Returns True if there is no U turn .
804	Leapfrog implementation .
805	Calculate the log joint .
806	Generate random variates .
807	Default loc scale function .
808	Default mean field normalization function .
809	Default multivariate normal distribution function .
810	Deserialize a function from the serialized serial .
811	Serialize a Lambda function .
812	Concatenate the given structure .
813	Convert a nested structure to Tensor .
814	Convert arguments to Tensor .
815	Call fn with args .
816	Get the attributes of Tensor .
817	Mixture prior .
818	Pack images into memory .
819	Download a file to the root directory .
820	Build fake input files for training images .
821	Validate block_sizes .
822	Check if the inputs are broadcast .
823	Tril multivariate normal tensor .
824	Bernoulli .
825	Normalization operator .
826	Poisson function .
827	Mala_euler method .
828	Calculate drift part .
829	r Compute log acceptance correction .
830	Call the volatility function and return the results .
831	Broadcast volatility .
832	Makes the AR transition matrix .
833	Calculate the shape of x .
834	Call fn with the given output .
835	Call a function and reshape the output .
836	Calculate the DTR reduction .
837	Sample distributions from joint distribution .
838	Allocates the latent dirichlet .
839	Create a Dirichlet model .
840	Get a string representation of the topics .
841	Downloads the newsgroups dataset .
842	Build fake input files for training .
843	Build input files for each batch of sentences .
844	Minimize the graph .
845	Adds control dependencies to the codebook .
846	save images to a file
847	Visualizes training images .
848	Load the Bernstein MNIST dataset .
849	Convert a dtype to a numpy dtype .
850	Returns the base_dtype of a dtype .
851	Check if dtype is boolean .
852	Returns True if dtype is complex .
853	Returns the maximum value of a dtype .
854	Returns the name of the given dtype .
855	Size of a dtype .
856	r Assert that items are of the same type .
857	Assert that the dtype is the same floating point type .
858	Minimize an objective function .
859	Computes the Nelder - Mann algorithm .
860	Return a function that accepts a single realization .
861	Expand the objective function with the given objective function .
862	Evaluate the objective function .
863	Shrink the simplx by shrinkage
864	Replace the value at the given index .
865	Checks the convergence of a simplex .
866	Prepare arguments for evaluation .
867	Prepare the arguments for the given initialsimplex and objective function .
868	Prepare arguments for the given initial vertex .
869	Evaluate objective function .
870	Plots weight mean and standard deviation .
871	Plot the heldout prediction .
872	Build fake data .
873	Returns the keras configuration .
874	Create a TensorBoard instance from a dict .
875	Matrix multiplication .
876	Helper function to compute standard deviation .
877	Assign a log moving mean .
878	Make a columnar .
879	Generate random rademacher .
880	Generate a random rayleigh .
881	Pick a scalar condition .
882	Compute log probability for one fiber .
883	Compute the probability for one fiber .
884	Rotate dimensions .
885	rundo batch normalization .
886	Validate BatchNormalization layer .
887	Slice a single parameter .
888	Given a DistributedDistributionDistributionDistribution and slice it into a dict .
889	Apply a single step .
890	Apply slices to the distribution .
891	Applies slices to the distribution .
892	Fit a model .
893	Calculate convergence criteria for small relative norm weights .
894	Prepare arguments for training .
895	Returns the number of columns in x .
896	Prefer static arguments to static_fn .
897	Copies the docstring of the original function to new_fn .
898	Converts a pred into a boolean .
899	Returns the dimension of the input shape .
900	Returns a case expression .
901	Creates a new name scope .
902	Calculate the standard deviation of mixture weights .
903	Makes a tril scale .
904	Makes a scaling factor .
905	Calculates the shapes for a given location .
906	Determines if scale is a diagonal scale .
907	Check if a distribution is a scalar distribution .
908	Pad mixture dimensions .
909	Chooses a scalar condition .
910	Move a dimension from one dimension .
911	Check that x is non - negative integer form .
912	Compares two tensors .
913	Try to get static value from tf . array .
914	Check if dt is known by dt .
915	Return True if dt is known by dt .
916	Return the largest integer by dtype .
917	Return the smallest integer by dtype .
918	Check if dt is an integer like object .
919	Ensures categorical event shape .
920	Calculate total number of log permutations .
921	Rotate x .
922	Pick a vector of true vectors .
923	Prefer the static broadcast shape to the given shape .
924	Generate a new seed
925	Create a tridiag .
926	Returns the dimension size of x .
927	Process a quadrature grid and return it .
928	Get the arguments for the parent frame .
929	Expand input to a vector .
930	Creates output_tensor with specified dependencies .
931	Validate the rightmost dimension .
932	Validate perm .
933	Convert event shape to tf . TensorShape .
934	Concatenate two tensors .
935	Get dimensions of a TensorShape .
936	Merges two TensorShape into a new TensorShape .
937	Creates a TensorShape with the specified rank at the given rank .
938	Asserts that the target shapes are equal .
939	Augment sample shape .
940	Build a backward pass step .
941	Implements backward smoothing .
942	Builds the kalman filter step .
943	Perform linear Gaussian update .
944	Kalman transition model .
945	Builds the kalman mean step .
946	Builds the kalman covariance matrix .
947	Builds a sampling step .
948	Propagate mean .
949	Propagate covariance matrix .
950	Backward smoothing .
951	Sample from the Gaussian state space model .
952	Calculate posterior marginalizations .
953	Compute the joint mean for each observation .
954	Computes joint covariance covariance matrix .
955	Convert latent moments to observations .
956	Log normalization .
957	The mode .
958	Rotate over samples .
959	Sample from 3d .
960	Returns a copy of a function .
961	Removes all keys with the given value
962	Recursively replace dict with pretty dicts .
963	Get samples from dist .
964	Check if x is a namedtuple - like object .
965	Chooses the base case for the given inputs .
966	Returns a copy of accepted and rejected .
967	Safe sum op .
968	Wrapper for _value_and_gradients .
969	Maybe call a function with the given arguments .
970	Creates a loop for loop iterations .
971	Perform a trace_fn over a loop .
972	Convert a set of kernel results into a setter .
973	Convert a getter to a wrapped function .
974	Decorator for storing parameters in a kernel .
975	Replace the event shape in the input shape .
976	Replace event shape with event shape .
977	Check shape .
978	True if any of the converged and failed .
979	Gets initial state arguments .
980	Performs a line search .
981	Restrict a function over a given direction .
982	Update the state of the current state .
983	Checks the convergence of the objective .
984	Broadcast value to target .
985	Calculate the harmonic number .
986	Creates a default exchange function .
987	Extract field from kernel results .
988	Get the exchange states .
989	Variance scaling term .
990	Returns a function that can be used for forward - log - detection .
991	Returns a function that transforms a bijector .
992	Return the inverse transform function for the given bijector .
993	Performs one step of the transformer .
994	Apply a condition to the tensor .
995	Secondant 2 .
996	Secant 2 .
997	The inner update function .
998	Updates value_and_gradients .
999	Batch search method .
1000	Binary bisect .
1001	Implementation of bisect .
1002	Returns True if two values are finite .
1003	Determines whether a Wolfe is satisfied .
1004	Return the secant between two values
1005	Makes step size update policy .
1006	A lapfrog integration .
1007	Compute log acceptance correction .
1008	Execute one step .
1009	Returns the results for bootstrap calculations .
1010	Binary resnet layer .
1011	Resnet block .
1012	Create an encoder for topics .
1013	Create a decoder for topics .
1014	Makes a Dirichlet distribution .
1015	Sample the chain chain .
1016	Deep Exponential family .
1017	Creates a Deterministic .
1018	Trainable Gamma .
1019	Load nips 2011 papers .
1020	Initialize params .
1021	Determines the kl function for the given types .
1022	Read image from file .
1023	Download all sprites .
1024	Create a single character .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create sprites dataset .
1028	Validate distributions .
1029	Convert a list of kernels into a list of kernels .
1030	Recursively flattens the multiplicand list .
1031	Generate fake data .
1032	Count the number of integers .
1033	Find bins of x .
1034	Create a histogram .
1035	Calculate quantiles .
1036	Ensure the ndims of the input tensor .
1037	Appends the keep_dims to the given axis .
1038	Makes a list of axis lists .
1039	Moves dimensions to the end of the dimension .
1040	Sorts tensor .
1041	Makes a list of component state space models .
1042	Calculate the Allan alpha .
1043	Reverse the inverse log - likelihood .
1044	Jensen - Shannon model .
1045	Compute the Pearson correlation coefficient .
1046	Squaredhellinger .
1047	Triangular matrix .
1048	Return the power of logu .
1049	Absolute log transform .
1050	Compute the jeffrey coefficient .
1051	Modified GAN .
1052	Calculates the dual CSISzar function .
1053	Symmetrized CSISzar function .
1054	Calculates the monte Carlo CSISzar .
1055	Computes the CSSI code for the given logu .
1056	Raise an error if x is not defined .
1057	Batch gather parameters .
1058	Broadcast the event with the given parameters .
1059	r Compute the expectation importance matrix .
1060	Broadcast an event and samples .
1061	Minimize a single Gaussian function .
1062	Return control inputs for the inverse Hessian .
1063	Update the inverse Hessian .
1064	Update the inv_hessian estimate .
1065	Matrix multiplication .
1066	Compute the tensor product of two tensors .
1067	Transpose the tensors in a batch .
1068	Pad the shape of the tensor .
1069	Sum the rightmost dimensions .
1070	Square root .
1071	Returns the common dtype for arg_list .
1072	Minimize a function .
1073	Returns the initial state arguments for the optimizer function .
1074	Get search direction .
1075	Makes an empty queue for the given element .
1076	Push onto the queue .
1077	Mask the PSD .
1078	Returns a boolean mask of x .
1079	Generate a correlation - like matrix .
1080	Calculates the residuals of the correlation matrix .
1081	Compute Clopper - pearson confidence intervals for samples .
1082	Computes the true volumes for each detector .
1083	Time series series .
1084	Cumulative density function .
1085	Perform one step of the population .
1086	Minimize the objective function .
1087	Get initial arguments for the objective function .
1088	Find the best part of a population .
1089	Checks convergence of population .
1090	Get the starting population .
1091	Bulk crossover .
1092	Get the list of mutants from a population .
1093	Generate random mixing indices .
1094	Ensure tensor_list is a list .
1095	Convert to a tensor .
1096	Soft threshold for x .
1097	Clip a tensor by a given value .
1098	Build the input pipeline .
1099	Plot generated images .
1100	Convert a list of productions into a string .
1101	Call the LSTM .
1102	Call the encoder .
1103	Integral operator .
1104	The inverse inverse of the tensor .
1105	Calculate the rank of a matrix .
1106	Pin op .
1107	Solve linear problem .
1108	Computes the inverse of LU matrix .
1109	Construct assertions for LLS .
1110	Construct assertions for LHS .
1111	Compute the sparse block diagonal .
1112	Check if a matrix is valid .
1113	Calculate the negative log likelihood of a model .
1114	r Fit a sparse model .
1115	Generate a list of slices .
1116	Generate a mask .
1117	Create a dense dense layer .
1118	Create an input order .
1119	Create a list of degrees .
1120	Create masks for a set of points .
1121	Create keras initializer for mask .
1122	Builds the graph .
1123	Call the autoregressive layer .
1124	Draw samples from multinomial .
1125	Create a zero - dimensional multivariate multivariate NormalDiag .
1126	Creates a function that dispatches the time series .
1127	Convert params to weights .
1128	Calculate the depth of a graph .
1129	Return the best order of a tree .
1130	Return a function that flatten a chain rule .
1131	Builds the chain rule .
1132	Calculate the variational loss .
1133	Optimized variational posterior .
1134	Builds the last day of season .
1135	Build the residuals matrix .
1136	Builds the seasonal transition matrix .
1137	Build seasonal transition noise .
1138	Builds the seasonal transition noise .
1139	Check if observation data points are empty .
1140	Validate observation data .
1141	Add a scheduler to the scheduler .
1142	Sets the checkpoint .
1143	Sets the gradient clip .
1144	Optimize the layer .
1145	Sets training summary .
1146	Sets the value summary .
1147	Creates a new optimizer .
1148	Sets training data .
1149	Set a summary trigger .
1150	Downloads data sets from training data files .
1151	Get the content of the news feed .
1152	Download GloV2v files
1153	Compile the optimizer .
1154	Fit the model .
1155	Evaluate the model .
1156	Predict data .
1157	Read the MNIST dataset .
1158	Preprocess mnist files .
1159	Get end trigger from options .
1160	Validate the optimizer .
1161	Get the value of the field
1162	Call BigDL function
1163	Call the given Java function with the given arguments .
1164	Convert an RDD to Java ObjectRDD .
1165	Convert Python objects to Java types .
1166	Get activation by name .
1167	Constructor from a numpy array .
1168	Get the label of the feature .
1169	Read and return a DistributedImageFrame .
1170	Write a parquet file to disk .
1171	Get an image from the viewer .
1172	Get the image as a numpy array .
1173	Returns the label of the image .
1174	Get predictions for a distributed distributed image .
1175	predict new data
1176	Fit the optimizer .
1177	Transform the image to a dataset .
1178	Save keras definition to file .
1179	Build Keras model .
1180	Predict class based on data .
1181	Sets weights .
1182	Get weights of the layer .
1183	Save the tensorflow .
1184	Returns the training function .
1185	Load a torch model .
1186	Load Keras .
1187	Create a new Criterion with the given jcriterion .
1188	Load weights from json file .
1189	Load training data .
1190	Build keras model .
1191	Returns the shape of the input .
1192	Get the output shape .
1193	Get MNIST dataset .
1194	Read the data set from the data_dir .
1195	Get the bigDL classpath from environment variables .
1196	Check to see if Spark version is below 2 .
1197	Export a checkpoint .
1198	Saves variable tensors to a file .
1199	Expand the given units along a given axis .
1200	Precompute the next n symbols .
1201	Simple attention layer .
1202	Attention .
1203	Compute BLEU similarity .
1204	Get the log file for the agent .
1205	Log the given utterance .
1206	Compute gradients for summary gradients .
1207	Dump weights to file .
1208	Read data from a dataset .
1209	Train a model from a config file .
1210	Interactively interact with an agent .
1211	Convert a list of labels to one - hot labels .
1212	Convert a proba to one - hot labels .
1213	Construct a TensorFlow session .
1214	Load the model from disk .
1215	Returns the momentum variable .
1216	Update graph variables .
1217	Calculates the f1 score of the predictions .
1218	Process a word .
1219	Stacked tensors .
1220	A Bi - layers .
1221	RNN layer .
1222	Uses stacked high - level highway layers .
1223	Embeds an embedding layer .
1224	Cudnn GRU GRU GRU
1225	Create a cudnn GRU cell .
1226	Create a CUDNN LSTM .
1227	Create a CUDNN .
1228	Implements the Convolution layer .
1229	Uses the CUDM layer .
1230	Multi - layer Convolution .
1231	Dropout layer .
1232	Builds the network .
1233	Builds the word convolution layer .
1234	Build basic network .
1235	Train the model .
1236	Predict on batch .
1237	Convert a list of sentences into a vector .
1238	Convert a list of tags into a vector .
1239	Compute the BLEU measure .
1240	Verify that the SC URL is valid .
1241	Extract certificates from a string .
1242	Verify the certificate chain .
1243	Verify the signature .
1244	Verify the certificate chain .
1245	Returns the JSON representation of all controls .
1246	The core bot framework .
1247	Get telegram controls .
1248	Alexable representation of all controls .
1249	Entry point for DeepPavlov settings .
1250	Wrap a graph as a graph .
1251	Decorator for keras backend .
1252	Calculate accuracy between two examples .
1253	Round accuracy .
1254	Initializer for training variables .
1255	Read data from a file .
1256	Makes a hello agent .
1257	Convert an array to a one - hot unit vector .
1258	Pretty - print metrics .
1259	Populate the settings directory .
1260	Loads the model from the given path .
1261	Saves the model .
1262	Get training op .
1263	Search for words in the trie .
1264	Creates the optimal operation costs .
1265	Start the timer .
1266	Handle incoming request .
1267	Execute the agent .
1268	Generate a new response .
1269	Handle the intent request
1270	Handles a launch request .
1271	Handles an unsupported message
1272	Pretty print the struct
1273	Convert an ELMO loss to a float .
1274	Build a Chainer from a configuration file .
1275	Simulate the model .
1276	Run model on a stream .
1277	Read in input file .
1278	Import a function from a string .
1279	Decorator to register a metric .
1280	Get a metric by its name .
1281	Return decay type from string
1282	Get the best value for the loss .
1283	Encode tokens .
1284	Read requirements . txt file .
1285	Compute the log loss .
1286	Export weights to hub .
1287	Print the details of a dictionary .
1288	Create an ecommerce agent .
1289	Run the bot .
1290	Download a file from the given URL .
1291	Unpacks a tar file .
1292	Decompress the given url to download .
1293	Recursively update a dictionary .
1294	Set the MD5 of a URL .
1295	Set query parameter in url
1296	Generate alexa response .
1297	The JSON representation of the control .
1298	Create a card to be sent to the bot
1299	The JSON representation of the control .
1300	Convert the card to a message .
1301	Compute the F1 score of the team .
1302	Calculate recall at k .
1303	r Check if GPU exists .
1304	Recursively parse a config property .
1305	Parse the config file .
1306	Expand a path .
1307	Create a component from a dictionary .
1308	The main loop .
1309	Delete a conversation .
1310	Refresh the valid certificates .
1311	Verify a request .
1312	Validate the request .
1313	Create a class from a string .
1314	Registers a model class .
1315	Get a model by its name .
1316	Get the path to a GLM regularization path .
1317	Make a GLM model .
1318	Create an H2OCluster object from a list of keys .
1319	Shutdown the H2O instance .
1320	Check if the server is running
1321	Show the cloud status .
1322	List all jobs
1323	Returns a list of all available time zones
1324	Fill with properties from h2custer .
1325	The metalearner parameters .
1326	Runs the test_func until it succeeds .
1327	Get summary of a frame .
1328	Delete a frame
1329	Gets a list of model builders .
1330	Validate model parameters
1331	get metrics for a given model
1332	Get model metrics .
1333	Delete a model by key
1334	Formats the data to a table
1335	Run EC2 instances .
1336	Terminate instances .
1337	Stop instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait until ssh is available .
1341	Get the full name of a method .
1342	Find a function from a frame .
1343	Get a string representation of the arguments .
1344	Wrap text .
1345	Wait for the job to join .
1346	Train the model .
1347	Fit the model .
1348	Get parameters as a dictionary .
1349	Signal handler .
1350	Wipe the output directory .
1351	Remove rSandbox directory .
1352	Scrape the port from the output file .
1353	Scrape cloud size from stdout
1354	Terminate the child process .
1355	Stop all nodes .
1356	Get the IP of the node .
1357	Get the port of the node
1358	Get the ROC of the model .
1359	Determine the vector size
1360	H2O mean absolute error .
1361	H2O mean squared error .
1362	Median absolute error .
1363	Explained variation score .
1364	Assert var is of type
1365	Fail if v matches the given regex
1366	Fail if v does not satisfy the condition .
1367	Extracts arguments from the stack .
1368	Checks the type of var
1369	Returns a string representation of the given type .
1370	Get source code for lambda function .
1371	Checks whether a variable is a valid type .
1372	Check if a variable is a string .
1373	Get the configuration
1374	Read configuration files .
1375	Generate possible paths to log files .
1376	Execute the given progress function .
1377	Store model progress .
1378	Recalculate model parameters .
1379	Estimate completion time .
1380	Guess next poll interval .
1381	Compute the progress at a given time .
1382	Compute the time at the given point .
1383	Draw text to the terminal
1384	Compute the size of all widgets .
1385	Get terminal size .
1386	Set encoding .
1387	Fit the model to the target column .
1388	Get a single frame
1389	Refresh the current cache .
1390	Return the type of a column .
1391	Get columns by type
1392	Print a summary of the H2OFrame .
1393	Get information about the frame .
1394	Return the first rows in the DataFrame .
1395	Matrix multiplication .
1396	Get a list of levels
1397	number of levels
1398	Set the table level .
1399	Set the domain levels .
1400	Rename the table .
1401	Set the column names .
1402	Set column name .
1403	Returns True if the given item is in the table .
1404	Modulo kfold columns .
1405	Stratified kfold columns .
1406	Print the structure of the H2OFrame .
1407	Returns the data as a pandas dataframe
1408	Removes the column at the given index .
1409	Compute the quantile of the columns .
1410	Concatenate multiple frames .
1411	Bind data to this DataFrame .
1412	Rbind a DataFrame to another DataFrame
1413	Split a single frame into multiple frames .
1414	Adds a groupby to the query .
1415	Fill missing values in the H2OFrame .
1416	Impute values in the table .
1417	Merge two columns .
1418	Set the level of the table
1419	Insert missing values into the dataset .
1420	Create a new variable in the table .
1421	Calculate the correlation coefficient of each row .
1422	Compute the distance between two nodes .
1423	Convert to a factor expression .
1424	Split a string by a pattern .
1425	Count the number of rows matching pattern .
1426	Return a new row with substring .
1427	Return a new H2OFrame .
1428	get the entropy of the table
1429	Returns the number of substrings in the tree
1430	Create a table expression
1431	Displays the histogram of the graph .
1432	Compute the maximum number of words .
1433	Replace first occurrence of pattern with replacement .
1434	The toupper of the element
1435	Perform a grep on the DataFrame
1436	Return a new DataFrame with NaN .
1437	Compute the difference laglag .
1438	Return a new H2OFrame .
1439	The minute of the frame
1440	Create a H2OFrame .
1441	Returns a new H2oFrame .
1442	Return a new H2OFrame with rows cut .
1443	Return the index of the maximum value of the Series .
1444	Apply a function along an axis .
1445	Parse the given text .
1446	Parse a file .
1447	Moves the start and end of the region .
1448	Unparse the token .
1449	Returns the centroid size
1450	The centers of the model .
1451	Returns the centers of the model .
1452	Connect to the given server
1453	Make an API call
1454	Check H2O and h2o version .
1455	Imports a module from a path .
1456	Upload a file to a destination frame .
1457	Imports data from a file .
1458	Import a Hive table .
1459	Imports a SQL table
1460	Imports a SQL table
1461	Parse a raw setup .
1462	Make a deep copy of the data .
1463	Get a single model
1464	Get a single grid
1465	Get a single frame
1466	Download a POJO to a POJO .
1467	Download data to a CSV file .
1468	Download all H2O logs to a file .
1469	Export a frame to a file .
1470	Convert data to a list of lists
1471	Run h2o demo .
1472	Load h2o dataset .
1473	Make model metrics .
1474	Upload a file to S3 .
1475	Upload a custom metric .
1476	Ensure frame ID is valid .
1477	Convert a number of bytes to a human - readable string .
1478	Normalize a slice .
1479	Returns True if slice is normalized .
1480	Use mojo to predict data .
1481	Predict from csv files .
1482	Mark decorator as deprecated .
1483	Wait for the job to finish .
1484	Run deepfeatures on each model .
1485	Prints the grid summary
1486	Displays the search results .
1487	Get hyperparameters for a given id
1488	Get hyperparameters for a given model
1489	Get the grid for this object
1490	Compute the F1 for each model .
1491	Returns the importances of the model .
1492	Project the archetypes of a model
1493	Plot the components of the model .
1494	Translate a name .
1495	Redent text .
1496	extract the run into a dictionary
1497	Run extractGLRMRuntime .
1498	Close the H2O session .
1499	Get session id
1500	Start logging .
1501	Prepare data payload
1502	Prepare file payload
1503	Log a start transaction .
1504	Log end transaction .
1505	Log a message to the logger .
1506	Process a response .
1507	Print a message to stdout .
1508	Get the automl for a project .
1509	Download the project from the leader .
1510	Download the project from the leader .
1511	Fit the model to the data .
1512	Scale X .
1513	Inverse transform X .
1514	Extract the true string from a string
1515	Find the node_name of each line in the function list
1516	Find the git hash branch .
1517	Determine if the build timeout is set
1518	Find build failure
1519	Find the build id from the given line
1520	Extract the job build URL from a URL string .
1521	Grab the message from the Java file
1522	Save a dictionary of keys to a pickle file .
1523	Update the summary file .
1524	Write the content of a file .
1525	write a Java message
1526	Loads the message to ignore .
1527	Normalize an enum constant .
1528	Find synonyms for a word
1529	Poll the job status .
1530	Download the assembly .
1531	Fit the frame to the frame
1532	Calculate the percentile of a list
1533	Returns a dict with the default values
1534	get the actual parameters
1535	Embed a deep feature into a single frame .
1536	Returns the scoring history for this model
1537	Show the model details .
1538	Compute the variable importances
1539	Returns the residual degrees of the model .
1540	A dictionary of coefficients .
1541	Download the package from the repository .
1542	Download a MOJO to a MOJO .
1543	Saves the model details .
1544	Ensure the targets are valid .
1545	List of cross validation models .
1546	HMC model .
1547	Run deep learning .
1548	Runs the Glo Estimator .
1549	Wait for a keypress .
1550	Return the data as a Pandas DataFrame .
1551	Print the table as a table .
1552	Runs the given jar .
1553	Finds the j2o . jar file located at the given path .
1554	Yield the paths of all jars in the H2O_JAR_PATH environment .
1555	Returns the HIT ratio table
1556	Wrapper for dictWriter
1557	Convert a URI to a path .
1558	Convert a directory path to a URI .
1559	Parse a list of functions .
1560	Generate the documentation for the given uri .
1561	Return a list of modules that are contained in the package .
1562	Write API documentation to outdir .
1563	Write the index file to outdir .
1564	Returns the table as a list
1565	Loads the global dictionary .
1566	Adds a new message .
1567	update the message dictionary
1568	Extracts a message from a file .
1569	Saves the current state of the dictionary .
1570	print a dictionary of keys to stdout
1571	Parse arguments .
1572	Print usage information .
1573	Locate all python files in a given directory .
1574	Find magic comments in filename .
1575	Process input files .
1576	Apply transform to the pipeline .
1577	Summarize failed tests
1578	Extracts printIntermits in terminal format .
1579	Plot the ROC curve .
1580	Compute the confusion matrix .
1581	Check if a Deep Water model is available .
1582	Removes all data from the given monthToKeep .
1583	Get the list of endpoint groups
1584	Update the site s site .
1585	Returns the data as a JSON string .
1586	Comment a user .
1587	Get user credentials .
1588	Like a user .
1589	Like media with given hashtag .
1590	Check if user is not a bot
1591	Read a list of strings from a file .
1592	Schedules the queue time .
1593	Defer the message .
1594	Downloads a virtual machine .
1595	Guess service info from spec_path .
1596	Update a power shell command .
1597	Deletes an application definition .
1598	Create an application definition .
1599	Returns the URI for the given request .
1600	Returns a connection object for the given request .
1601	Perform a request .
1602	Execute script actions in a cluster .
1603	Checks the name availability of a front door .
1604	Purge deleted items from a vault .
1605	Get the authorization server .
1606	Validate the request_uri .
1607	Get CLI profile .
1608	Get the credentials for the given resource .
1609	Perform a resolve operation .
1610	Checks the availability of a name .
1611	Opens the request .
1612	Sets the timeout for this request .
1613	Sets the request header .
1614	Get all response headers .
1615	Send a request to the client .
1616	The status of the request .
1617	The status text of the request .
1618	The response body .
1619	Sets the client certificate .
1620	Send a request to the server .
1621	Put request header .
1622	Send the request body .
1623	Get the response .
1624	Return a human - readable id .
1625	Get serialization name for element .
1626	Verifies a face to a person .
1627	Add a job to this batch .
1628	Extracts properties from an entry .
1629	Get all the children of a node .
1630	Searches the namespaces of the given child .
1631	Parse an XML string into a ServiceBusNamespace object .
1632	Parse a ServiceBusRegion from an XML string .
1633	Parse a namespace availability response .
1634	Convert an XML string to a Metrics object .
1635	Replace content in a runbook .
1636	List domain recommendations .
1637	Update a kb .
1638	Get member groups for a user .
1639	Build package from given PR number .
1640	Import data from a resource group .
1641	Publish a runbook .
1642	Renew the lock .
1643	Replace word alterations .
1644	Adds a new value to a secret .
1645	Gets the storage account properties .
1646	Gets the keys for a storage account .
1647	Regenerates the keys for a storage account .
1648	Creates a storage account .
1649	Updates a storage account .
1650	Deletes a storage account .
1651	Checks the availability of a storage account name .
1652	Gets the properties of a service .
1653	Creates a new hosted service .
1654	Deletes a hosted service .
1655	Creates a deployment .
1656	Deletes a deployment .
1657	Swaps the deployed deployment .
1658	Changes the configuration of a deployment .
1659	Updates the deployment status .
1660	Upgrades a deployment .
1661	Walks the upgrade domain for a deployment .
1662	Reboot a role instance .
1663	Deletes the specified role instances .
1664	Checks the availability of a hosted service .
1665	Lists the certificates for a service .
1666	Gets a specific certificate .
1667	Adds a certificate to a service .
1668	Deletes a service certificate .
1669	Gets a specific management certificate .
1670	Adds a new certificate to the subscription .
1671	Deletes a management certificate .
1672	Gets the affinity group properties .
1673	Creates an affinity group .
1674	Deletes an affinity group .
1675	Lists the subscription operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address .
1679	Disassociates a reserved IP address .
1680	Gets a reserved IP address .
1681	Gets the specified role .
1682	Creates a new virtual machine deployment .
1683	Adds a role to a deployment .
1684	Updates a role .
1685	Deletes a role .
1686	Captures a role .
1687	Starts a role .
1688	Start the specified roles .
1689	Restart a role .
1690	Shutdown a role .
1691	Shutdown the specified roles .
1692	Adds a DNS server to a deployment .
1693	Updates a DNS server address .
1694	Deletes a DNS server .
1695	Lists the versions of the specified extension .
1696	Replicates a VM image .
1697	Unregisters a VM image .
1698	Shares a virtual machine image .
1699	Creates a VM image .
1700	Deletes the specified VM image .
1701	Returns a list of VM images .
1702	Updates the VM image .
1703	Adds an OS image .
1704	Updates an image .
1705	Updates an image from an image reference .
1706	Deletes an image .
1707	Gets a specific data disk .
1708	Adds a new data disk to a deployment .
1709	Updates a data disk .
1710	Deletes a data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Gets the summary for the specified management group .
1715	Builds the receiver .
1716	Fetch next messages from the handler .
1717	Renew the lock .
1718	Create or update a virtual machine scale set .
1719	Convert to a single placement group .
1720	Perform a single screen text .
1721	Creates a new Key .
1722	Import a key .
1723	Updates a key .
1724	Sets a secret .
1725	Set certificate issuer .
1726	Create a service instance from a connection string .
1727	Get a subscription .
1728	List all subscriptions for a specific topic .
1729	Send messages .
1730	Get sender instance .
1731	Get receiver .
1732	Get a deadletter receiver .
1733	Parses the response for an Async operation .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for the operation status to complete .
1737	Gets the operation status .
1738	Update the management header .
1739	Validate the package name .
1740	Gets a list of certificates for a vault .
1741	Gets a list of regions .
1742	Lists the namespaces .
1743	Gets a namespace .
1744	Creates a namespace .
1745	Deletes a namespace .
1746	Checks the availability of a namespace .
1747	Returns a list of topics .
1748	List notification hubs .
1749	List all Relays in the account .
1750	Gets the metrics rollups for a given metric .
1751	Gets the metrics rollups of a specific metric .
1752	Gets the metrics rollups for a specified metric .
1753	Gets the metrics rollups for a specific metric .
1754	Create a context manager .
1755	Create a venv with the given packages .
1756	Creates a new SQL Server .
1757	Sets the admin password for a server .
1758	Lists the quotas for a server .
1759	Gets the server event logs .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	Lists all firewall rules for a server .
1764	Lists service level objectiveives .
1765	Creates a database .
1766	Updates a database .
1767	Deletes a database .
1768	Returns a list of databases with the specified name .
1769	Lists the domains for a domain .
1770	Close the message handler .
1771	Close the receiver .
1772	Get session state .
1773	Set the session state .
1774	Receive deferred messages .
1775	Merge two reservations .
1776	Validate a bearer token .
1777	Purge data from a table .
1778	Common error handling .
1779	Creates a queue .
1780	Deletes a queue .
1781	Gets a single queue .
1782	Creates a new topic .
1783	Gets a specific topic .
1784	Creates a new rule .
1785	Gets a specific rule .
1786	Lists the rules for a topic .
1787	Creates a new subscription .
1788	Gets a specific subscription .
1789	Lists the subscriptions for the specified topic .
1790	Sends a message to a specific topic .
1791	Unlocks a subscription message .
1792	Send messages to a queue .
1793	Unlocks a queue message .
1794	Receive a queue message from a queue .
1795	Receive a subscription message .
1796	Create an event hub .
1797	Updates an event hub .
1798	Gets the specified event hub .
1799	Sends a message to a hub .
1800	Adds an HTTP header to the request .
1801	Returns the Authorization string for the given request .
1802	Check if token is expired .
1803	Get access token .
1804	Extract query parameters from the request .
1805	Reset the service principal profile .
1806	Deletes the message from the service .
1807	Unlock the message .
1808	Renew the lock .
1809	Add headers to the request .
1810	Serialize this batch body into a dictionary .
1811	Get cluster health information .
1812	Gets cluster health using a given policy .
1813	Unprovision an application type .
1814	Get repair task list .
1815	Submit a property batch .
1816	Generic error handler .
1817	Start a network trace operation .
1818	Lists the slot differences between a slot and a slot .
1819	Swaps a slot .
1820	Gets a list of events by type .
1821	Add a face from a stream .
1822	Handle redirect requests .
1823	Create and start a migration .
1824	Publish events to the specified topic host .
1825	Move resources from one resource group to another .
1826	Set the profile to use .
1827	List query results for a given management group .
1828	Create a queue .
1829	Deletes the specified queue .
1830	Create a topic .
1831	Deletes the specified topic .
1832	Creates a new subscription .
1833	Create a client from a connection string .
1834	Get the properties of the queue .
1835	True if this lock has expired .
1836	Create a new session resource .
1837	Create a new subscription .
1838	Gets the request rate for a given interval .
1839	Process the results queue .
1840	Bulk add tasks to the results_queue .
1841	Loop over the results_queue .
1842	Build a configuration dictionary from a dictionary .
1843	Reset a user s password .
1844	Start a new environment .
1845	Create a message from a response .
1846	Converts an etree element into a Rule object .
1847	Converts an etree element to a Queue .
1848	Converts an etree element into a Topic object .
1849	Converts an etree element into a subscription description .
1850	Create a new certificate .
1851	Delete a certificate .
1852	Get a client from CLI profile .
1853	Build a client from a dictionary .
1854	Load a client from an auth file .
1855	Parse enum results list .
1856	Extracts entries from an entry .
1857	Delete a certificate .
1858	Get a queue by name .
1859	Lists the queue clients .
1860	Get the specified topic .
1861	Returns a list of topic clients .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Gets a specific site .
1865	Creates a site .
1866	Deletes a website .
1867	Updates a website .
1868	Restart a website .
1869	Get historical usage metrics .
1870	Gets the Metric Definitions for the specified website .
1871	Get publish profile .
1872	Get publish profile .
1873	Updates the policies of a registry .
1874	Creates a cloud service .
1875	Checks the availability of a job collection .
1876	Gets a job collection .
1877	Complete a backup operation .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Reconnect to the sender .
1881	Get a certificate from publish settings .
1882	Load cookies from the session .
1883	Get the terminal width .
1884	Return the cut prefix of a string .
1885	Print msg to stderr .
1886	Format a file size .
1887	Format elapsed time .
1888	Create a status line .
1889	Generate progress bar .
1890	Generate segment numbers .
1891	Get segments of this Representation .
1892	Waits for the event to be received .
1893	Put a segment into the queue .
1894	Put value into the queue .
1895	Get parameters for a stream .
1896	Extract the nonce from the previous URL .
1897	Look for vpid from url
1898	Validate data .
1899	Parse XML data .
1900	Parse a QSD string .
1901	Search for a dictionary in a dictionary
1902	Spawn a process .
1903	Iterate over tags in HTML .
1904	Parse a manifest .
1905	Determine the encoding of a sample .
1906	Parse the response .
1907	Parse the response .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Get the message .
1912	Create a LogRecord .
1913	Login to LiveEdu account .
1914	Load a support plugin .
1915	Replace the query string with the query string .
1916	Iterate over the tags .
1917	Iterate over the required arguments
1918	Check file output .
1919	Create pipe output .
1920	Create an HTTP server .
1921	Iterate over http requests .
1922	Output a stream of streams to an HTTP server .
1923	Handle output stream passthrough .
1924	Opens a stream .
1925	Write stream to output
1926	Read data from a stream .
1927	Process a single stream
1928	Fetch streams from plugin .
1929	Retrieves the streams for a given interval
1930	Resolve a stream name for a given stream name .
1931	Formats a list of valid streams according to the given plugins .
1932	Resolve plugin arguments .
1933	Print the loaded plugins .
1934	Authenticate with streamlink using streamlink
1935	Load plugins from files .
1936	Sets up the command line arguments .
1937	Setup console output
1938	Setup http session
1939	Load plugins .
1940	Setup options for streamlink .
1941	Log current versions .
1942	Extract stream_id from text .
1943	Extract the embed from text .
1944	Set an option
1945	Get the value of an option
1946	Set plugin option
1947	Get plugin option .
1948	Resolve a URL .
1949	Load plugins from path
1950	Convert a number of hours minutes to seconds .
1951	Validate that value starts with string .
1952	Validate that value ends with string .
1953	Validate that string contains string .
1954	Get an attribute from a value .
1955	Apply a function to each value in a dictionary .
1956	Apply a function to a dictionary .
1957	Validate URL parameters .
1958	Validate an element and return an element .
1959	Find all elements matching the given XPath .
1960	Find the url of the player in the response .
1961	Parse M3U8U - encoded data .
1962	Try to find a supported player .
1963	Login with the given email and password .
1964	Extract stream_id from HTML .
1965	Extract stream_info from HTML .
1966	Login to the login website .
1967	Add a function to the map .
1968	Make a call to the API .
1969	Start a new session .
1970	Get information about a media .
1971	Create and authenticate the API .
1972	Compress a string .
1973	Format a character .
1974	Format a string .
1975	Read n bytes from the packet
1976	Get the value of this bit .
1977	The explanation of this exception .
1978	Set the decode table .
1979	Sets the length of the sequence
1980	Print the code to stdout .
1981	Read a tuple from the stream .
1982	Return the explanation for the given index .
1983	Return the value at index .
1984	Returns the span of the given index .
1985	Return the value at index .
1986	Return the Mnemonic for the given symbol .
1987	Return the mnemonic for the given index .
1988	Compile the action table .
1989	Execute action .
1990	Makes a string of hexadecimal addresses .
1991	Process the stream .
1992	Read metablock length
1993	Whether the stream is uncompressed .
1994	Change the number of block types .
1995	IMTF
1996	Read prefix array .
1997	Normalize a color .
1998	Polychrome operator for polychrome
1999	Convert an Arrow DataFrame to a pyarrow table .
2000	Decorator to patch a dataset .
2001	Add cartesian velocity vectors to the PMR .
2002	Creates virtual columns of a common motion2vpericular model .
2003	Return a graphviz representation of the graph .
2004	Return a list of counts for each column .
2005	Return a list of choices that match the given mapper .
2006	Creates an application .
2007	Opens multiple files .
2008	Generate a table from an SAMP file .
2009	Create a Dataset from an astropy table
2010	Create a DataFrame from arrays .
2011	Convert scalars from numpy arrays .
2012	convert a Pandas DataFrame to a DataFrame
2013	Load data from a CSV file .
2014	Convenience function for creating a server .
2015	Generate a Zeldovich model .
2016	Concatenate multiple dfs
2017	Returns a range that represents a virtual range .
2018	open a dataset
2019	Evaluate an expression .
2020	Decorator for delayed functions
2021	Returns the set of columns depending on the current selection .
2022	Run a task .
2023	Sorts the pairs .
2024	Get information from a file .
2025	Clear the canvas .
2026	Wait for the plot to finish .
2027	Open the given document .
2028	Write to a file .
2029	Combine arrays and mask arrays .
2030	Apply the nop operation .
2031	Compute the first occurrence of an expression .
2032	Compute the mean of the given expression .
2033	Compute the sum of the given expression .
2034	Calculate the standard deviation of the expression .
2035	Calculate the covariance values for the given values .
2036	Calculate the minimum value of an expression .
2037	Return the minimum value of the expression .
2038	Calculate the median approximations of the given expression .
2039	Displays the plot of the given data .
2040	Calculate the number of healpix pixels in the image .
2041	Generate a matplotlib plot of healpix
2042	Plot the data .
2043	Return the dtype of the expression
2044	Get the path to the private directory .
2045	Get the state of the view
2046	Set the state of the table .
2047	delete virtual meta . yaml file
2048	Write virtual meta data .
2049	Write the meta data .
2050	Return a subset of the columns in the table .
2051	Sets the variable with the given name .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert the view to a dictionary .
2055	Returns a copy of the DataFrame .
2056	Convert to a Pandas DataFrame .
2057	Convert the DataFrame to an Arrow table .
2058	Convert to an astropy table .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Convert cartesian coordinates to polar coordinates .
2062	Convert cartesian vectors to spherical coordinates .
2063	Convert cartesian vectors to polar coordinates .
2064	Add virtual columns to cartesian coordinates .
2065	Add virtual columns to the matrix .
2066	Add virtual columns to cartesian .
2067	Convert cartesian coordinates to spherical coordinates .
2068	Add a virtual column expression .
2069	Delete a virtual column
2070	Add a new variable .
2071	Delete a variable
2072	Return the last n elements .
2073	Print the top and tail of the table .
2074	describe the dataframe
2075	catenate two lists
2076	set the current row
2077	Returns a list of column names
2078	Trim the columns from the DataFrame .
2079	Return a new DataFrame with the specified indices .
2080	Extract the subset of the object .
2081	Return n random samples .
2082	Splits the sequence by randomly splitting it into chunks .
2083	Split the sequence by a given frequency .
2084	Sort the RDD .
2085	Materialize the columns of the DataFrame .
2086	Undo the selected selection .
2087	Update the selection history .
2088	Returns True if the selection can be undone .
2089	Select a boolean expression .
2090	Select rows with non - missing values .
2091	Drop columns from the table .
2092	Selects a bounding box around a rectangle .
2093	Select a bounding box .
2094	Select a circle .
2095	Select an ellipse .
2096	Creates a selectionLasso for the given expression .
2097	Sets the inverse of the selection .
2098	Set selection
2099	Create a new selection
2100	Find valid name .
2101	Return a list of all the nodes in the table .
2102	Generate Graphviz representation of the DataFrame .
2103	Categorize a column .
2104	Encode a column .
2105	Returns the data as a Datas object .
2106	The length of the array .
2107	Horizontally stack two DataFrames .
2108	Concatenate two DataFrames .
2109	Export this DataFrame to a HDF5 file .
2110	Add a column to the dataframe .
2111	Patches a DataFrame .
2112	Decorator to register a function .
2113	Fill an array with NaN .
2114	Return the dayofweek of x .
2115	Return the dayofyear of x
2116	Returns a pandas DataFrame containing a leap year .
2117	Returns the year of the year
2118	Returns the month of x
2119	Return the month name of x .
2120	day of x
2121	Return the day name of x .
2122	weekofyear of year
2123	Returns the hours of the hour series
2124	Returns the value of the minute of x .
2125	get the second value of x
2126	Capitalize x .
2127	Concatenate two strings .
2128	Return True if x is contained in x .
2129	Return the number of occurrences of a pattern .
2130	Find occurrences of sub in x .
2131	Get the row at x .
2132	Search for substring in x .
2133	Convert x to a column string array .
2134	Return a new column string from x .
2135	Pad a string with the given length .
2136	Return a column string array with repeated elements .
2137	Find the first occurrence of a substring .
2138	Like str_rfind
2139	RJUST a string with a given width .
2140	Rstrip a string from x to_strip .
2141	Slice a sequence of strings .
2142	Strip string values from x .
2143	Return a column string representation of x .
2144	Convert x to a column string array .
2145	Return the categorical column of an array .
2146	Convert to a numpy recarray
2147	Write properties to file .
2148	Write comment to file .
2149	Write a property .
2150	Iterate over properties file .
2151	Universal newlines .
2152	Print installed versions .
2153	Rename keyword arguments .
2154	Set the libtlib library .
2155	Track the beats .
2156	Adjust the pitch - shift of an input file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Encode a MIDI note .
2161	Convert frequencies to mel .
2162	Convert mel frequency to MHz
2163	Generate FFT frequencies .
2164	Calculate frequencies for CQT bins .
2165	Generate mel frequencies .
2166	Calculate A weighting matrix .
2167	Calculate times - like times - like samples .
2168	Generate samples of X .
2169	Compute the frequency domain using cqt .
2170	Use the pseudopotential filter .
2171	Implements the CQT filter .
2172	Convenience function to filter a frequency domain using CQT .
2173	Trim a cqt response to a numpy array
2174	CQ Response
2175	Calculate the downsampling count .
2176	Downsampling of the signal .
2177	Calculates the cost of the DWE .
2178	Backtracking method .
2179	Perform viterbi .
2180	Compute the discriminative discriminative function .
2181	Generate a transition matrix .
2182	Generate transition loop loop .
2183	Generate a transition vector .
2184	Generate a transition matrix .
2185	Detect onset envelope .
2186	Compute onset strength .
2187	Find the onset of the onset of the onset of events .
2188	Calculate onset strength .
2189	r Write times to a CSV file .
2190	Write a WAV file .
2191	Get a colormap .
2192	Plot waveplot .
2193	Set the current image
2194	Calculate the coordinates of a mesh .
2195	Validate axes .
2196	Helper function to scale axes
2197	Calculate FFT basis frequencies .
2198	Calculate mel frequency basis .
2199	Calculate the frequencies for a cqt .
2200	Calculate the coordinates of a chromosome .
2201	Convert frames to time .
2202	Estimate the tuning of a piptrack .
2203	Spectrogram .
2204	Compute the Hessian .
2205	Compute the harmonic of the Fourier transform .
2206	Calculate the percuss function of a PSD .
2207	TimeStretch function .
2208	Calculate pitch shift .
2209	Reimplement a list of intervals .
2210	Determine if a signal is nonilent .
2211	Trim data from a sequence of frames .
2212	Split a signal into two samples .
2213	Phase expansion function .
2214	Convert amplitude to dB frequency .
2215	Compute spectrogram .
2216	Calculate beat - percuss - percuss - percuss - percuss
2217	Decompose the components of a matrix .
2218	Filter the nn - similarity matrix .
2219	Filtering filter .
2220	Generate mel frequency weights .
2221	Generate chromosomes of chroma
2222	Convert a window specification to a float window .
2223	r Generate a constant frequency spectrum .
2224	r Calculate constant frequency lengths for constant quantiles .
2225	Convert CQ to chromosome .
2226	Calculate the bandwidth of a window .
2227	Wrapper for scipy . signal
2228	r Multirate filterbank .
2229	r Calculates the mr frequencies for a given midi tuning .
2230	fill window_sq
2231	Calculate the sums of a window of frames
2232	Create a diagonal filter .
2233	Calculate spectral centroid .
2234	Spectral rolloff .
2235	Spectrum of spectral flatness .
2236	Extract features from spectrogram .
2237	Calculate the zero crossing rate .
2238	Spectrogram of chroma
2239	r Compute chroma using CQ
2240	Calculate mel spectrogram
2241	Calculates the Jaccard distance between two numbers .
2242	Returns the index of the match interval that overlaps the given query .
2243	Matches two intervals .
2244	Matches two intervals .
2245	Matches two events .
2246	Calculate saliency .
2247	Calculate harmonic harmonics .
2248	Synthesize harmonic coefficients .
2249	Synthesize harmonic coefficients .
2250	Load audio data from an audio file .
2251	Load audio file .
2252	Convert audio data to mono .
2253	Resample input array to target_sr
2254	Compute the autocorrelation function .
2255	Linear polynomial .
2256	Clicks a set of frames
2257	Create a tone .
2258	Generate a chirp signal .
2259	Get all files in a given directory
2260	Stretch the demo .
2261	Process command line arguments .
2262	Parse the audio file .
2263	r Track the beat track .
2264	Track the beat track .
2265	Calculate the local beat score .
2266	Track the beat track .
2267	Calculate the last beat .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag matrix to a recurrence matrix .
2270	Decorator for timelag filter .
2271	Create a subsegment of data .
2272	Agglomerative clustering .
2273	Path - wise path expansion .
2274	Detect onsets .
2275	Convert numpy array to frames .
2276	Validate audio buffer .
2277	Validate that x is a number .
2278	Pads the length of data to the given size .
2279	Sort an array according to the given axis .
2280	Normalize an input vector .
2281	Local max op .
2282	Picks a peak of an array .
2283	Extract rows from rows .
2284	Roll a sparse matrix .
2285	Convert bytes to float
2286	Convert an index into a slice .
2287	Synchronize data with a given index .
2288	Apply softmask to X_ref .
2289	Tiny op .
2290	convert frames to video
2291	Read the image .
2292	Get a single frame
2293	write frames to frames
2294	Track the progress of a function .
2295	Compute progress bar for a function .
2296	Flip an image .
2297	Rotate image .
2298	Clip bounding boxes to img_shape .
2299	Scales bounding boxes .
2300	crop an image to bboxes
2301	Pad an image with a given shape .
2302	Impad to multiple images .
2303	Scales the size of the given size .
2304	Resize an image .
2305	Resize image to dst_img .
2306	Resize an image .
2307	Register a file handler .
2308	Returns the priority value for a given priority
2309	Dequantize an array .
2310	Display an image
2311	show bounding boxes of an image
2312	Read flow file .
2313	Write flow to file .
2314	Decorator for dequantize .
2315	Loads the state_dict from the module .
2316	Load model from file .
2317	Convert weights to CPU
2318	Save a checkpoint to a file .
2319	Initialize optimizer .
2320	Initialize the logger .
2321	Returns the current learning rate .
2322	Register a hook .
2323	Run the runner .
2324	Register training hooks .
2325	Convert a video into a single file .
2326	Resize a video .
2327	Cut video files .
2328	Concatenate multiple video files into a single file .
2329	Read a list of lines from a file .
2330	Build a dictionary from a file .
2331	3x3 convolution with padding
2332	Create an object from a dictionary .
2333	Wrapper for cv2 . imread
2334	Decode image content .
2335	Write image to file
2336	Convert color image to gray .
2337	Convert gray to bgr
2338	Cast input to dst_type .
2339	Returns True if seq_type is of expected_type
2340	Slice a list of lists .
2341	Decorator to check prerequisites .
2342	Calculate the average value .
2343	Scatter function for multiple devices .
2344	Convert a color to a tuple .
2345	Check the time of a timer .
2346	Start the timer .
2347	Returns the number of seconds since the start of the timer .
2348	Returns the number of seconds since the last check .
2349	Display a flow
2350	Convert a flow to RGB .
2351	Make a color wheel .
2352	Compute accuracy .
2353	Scatter function .
2354	Apply kwargs to input kwargs .
2355	Fetch and parse the response .
2356	Return the JSON representation of the resource .
2357	Return text as a string .
2358	Handle an AWS callback .
2359	Send multiple requests .
2360	Send a request to the API .
2361	Start the worker threads .
2362	Normalize a task .
2363	Parse yaml linenumbers .
2364	Return wheel distribution name .
2365	Returns the basename of the archive .
2366	Add requirements to the metadata file .
2367	Convert an egginfo file into a distribution .
2368	Creates a text message .
2369	Creates suggested actions .
2370	Creates an attachment .
2371	A list of attachments .
2372	Create an attachment .
2373	Create a trace
2374	Sets the telemetry client .
2375	Read the specified keys from the container .
2376	Write changes to the store .
2377	Delete multiple documents .
2378	Create a StoreItem from a result .
2379	Create a dictionary with non - magic attributes .
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fills qna event data .
2385	Returns a conversation reference
2386	Get the name of the step .
2387	Check if a channel supports suggested actions .
2388	Checks if a channel is supported by card_id .
2389	Get the channel_id from the context .
2390	Returns True if the token is a token from emulator .
2391	Create an attachment for a hero card .
2392	The list of parameters .
2393	Mirror the definition .
2394	Return a copy of the inverse gate .
2395	Set control value .
2396	Make a copy of this object .
2397	Convert a string to a QASIF string .
2398	Returns the qasm code .
2399	Run a circuit .
2400	Implements a single pass
2401	Returns a list of all passes in the working list
2402	Dump the results of this flow .
2403	Instantiate the controller class .
2404	Create a uBase
2405	Get parameters for a single gate .
2406	Convert a single - gate to a single - gate matrix .
2407	Returns the index of the einsum matrix .
2408	Returns the einsum index for the given gate indices .
2409	Helper for einsum multiplication .
2410	Convert a DAG circuit into a DAGCircuit .
2411	fit function
2412	fit_fit_func
2413	Plot the coherence .
2414	Shape of rb data
2415	Plot the RB data .
2416	Split a list of runs according to parameters .
2417	Compose two UUIDs
2418	Convert YZ coordinates to ZYZ angles .
2419	Validate input state .
2420	Trim the difference of the image .
2421	Returns the span of the gate .
2422	Convert a circuit to an instruction .
2423	Run the dispatcher .
2424	Finds the best connection to the network .
2425	Create a new Barrier .
2426	Average data .
2427	Process a bit id node .
2428	Process a custom unitary node .
2429	Processes a gate node .
2430	Process a CNOT node .
2431	Process a measure node .
2432	Process the condition .
2433	Create a DAG op .
2434	Return the number of channels for the given channels .
2435	Return the start time of the channel .
2436	Return the stop time of the given channels .
2437	Iterate over all instructions in this schedule .
2438	Check that the value is of the expected type .
2439	Dump additional data .
2440	Load additional data .
2441	Create a validation schema .
2442	Validate instance .
2443	Decorator for validation methods .
2444	Dump the model to a dict
2445	Load data from a dictionary .
2446	Compute the Fourier Transform .
2447	Partial trace vector .
2448	Vectorize a density matrix .
2449	De - vectorize a square matrix .
2450	Convert a polynomial to the rauli matrix .
2451	Takes a numpy array and returns a numpy array .
2452	Polynomial outer product .
2453	Compute the concurrence of a state .
2454	Calculate shannon entropy of a vector .
2455	Compute the Shannon entropy of a state .
2456	Computes mutual information .
2457	Estimate the entanglement of a transformation .
2458	Eof_qubit
2459	Flatten a schedule .
2460	Shift a schedule by time .
2461	Inserts a new Schedule component at the given time .
2462	r Append a child to parent .
2463	Create a U3 gate .
2464	Get backend status .
2465	Start the simulation .
2466	Returns a string with the time remaining .
2467	Disassemble a QObject into a circuit .
2468	Computes the Hamming distance between two strings .
2469	Create quaternion from axis rotation angle .
2470	Create a quaternion from Euler angles .
2471	Normalize the quaternion .
2472	Convert to a 2D matrix .
2473	Converts an euler rotation matrix to a zuler .
2474	Process data .
2475	Plot a histogram of data .
2476	Check if value is a collection .
2477	Check that the given index is out of range .
2478	Check if mat is square matrix .
2479	Determines if a matrix is diagonal .
2480	Check if op is symmetric matrix .
2481	Determines if a matrix is Hermitian matrix .
2482	Check if mat is a positive semidefinite matrix .
2483	Check if mat is an identity matrix .
2484	Check if matrix is a unitary matrix .
2485	Convert data to a Choice .
2486	Convert data to a superoperator .
2487	Convert data to kraus .
2488	Convert data to Chi
2489	Convert data to PTM
2490	Convert data to Stinespring .
2491	Convert data to operator .
2492	Convert an operator to a tensor .
2493	Convert a channel to an operator representation .
2494	Convert data to choi .
2495	Convert data to superop .
2496	Convert kraus operators to a polynomial .
2497	Convert data to kraus .
2498	Convert stines to kroneus .
2499	Convert stinespring to Choi .
2500	Convert a list of kraus positions into stine pairs .
2501	Convert kraus operators to a superoperator .
2502	Transition from the Choi matrix .
2503	Convert data to chi matrix .
2504	Rescale two matrices .
2505	Transform data from a Pauli matrix .
2506	Check the input_dim and output_dim .
2507	Hide ticks and labels .
2508	Set the labels for the plot
2509	Clear the plot
2510	Adds the given vectors .
2511	Add an annotation .
2512	Render the figure .
2513	Plot the front of the surface .
2514	Render the plot
2515	Synthesize a unitary matrix .
2516	Returns the string representation of the top cell
2517	The mid part
2518	The string representation of the bot .
2519	The length of the sentence
2520	Returns the parameters for an instruction .
2521	Returns a label for an instruction .
2522	Return a LaTeX representation of this parameter .
2523	Compile a circuit .
2524	Ignore deprecation warnings .
2525	Return information about local hardware .
2526	Check if hostname and port exists
2527	Check the status of the job .
2528	Create a constant array with constant amplitude .
2529	Calculate the square of a complex phase .
2530	Circular triangle .
2531	Calculate the cosine of the cosine of the waveform .
2532	r Fix the gaussian width .
2533	r Generate a Gaussian with the given parameters .
2534	Gaussian derivative .
2535	r Generate a gaussian with the given parameters .
2536	Creates a pass manager with a default layout .
2537	Generate a pass manager for the given basis set .
2538	Check if the given register is a classical register .
2539	Mirror the circuit .
2540	Return the inverse of the inverse function .
2541	Append an instruction .
2542	Add an instruction .
2543	Add a register to the circuit .
2544	Check that the qubit arguments are duplicate .
2545	Validate qargs .
2546	Validate cargs .
2547	Check that the circuit is compatible .
2548	Returns the QR code as a string .
2549	Draw circuit .
2550	The size of the gate .
2551	Total number of qubits
2552	Return a dictionary of the number of instruction operands .
2553	Count the number of connected components .
2554	Bind parameters to the circuit .
2555	Bind a parameter to the given parameter table .
2556	Plot pulse drawer .
2557	Search for all possible swaps .
2558	Map free gates to free gates .
2559	Calculate the layout distance .
2560	Compute the score of a step .
2561	Copy metadata from a DAG into a DAG .
2562	Map the layout to the gate .
2563	Generate swap gates from an edge .
2564	Run the transpiler .
2565	Adds a physical qubit to the coupling graph .
2566	Adds an edge to the graph .
2567	Create a subgraph containing only the physical components of the graph .
2568	The physical qubits of the graph .
2569	Returns whether the connection is connected .
2570	Compute the distance matrix .
2571	Compute the distance between two physical qubits .
2572	Transpile a circuit .
2573	Construct cu1 gate .
2574	Inverse the instruction .
2575	Implements q_if .
2576	Sends a c_if condition to the gate .
2577	Subscribe to an event .
2578	Dispatch an event to all subscribers .
2579	Unsubscribe from an event .
2580	Publish an event .
2581	Initialize the register .
2582	Defines the initialization circuit .
2583	Returns the discompute circuit .
2584	Calculate the angles of a complex complex .
2585	Generate multiplexerx .
2586	Returns True if value is a virtual value .
2587	Returns a copy of the layout .
2588	Combine two layouts into a single edge map .
2589	Add a toffi gate .
2590	Insert a schedule into the schedule .
2591	Raise TranspilerAccessError
2592	Convert a list of gates into an index vector .
2593	Run the computation .
2594	Compute the graph for each layer .
2595	Group elements by number of qubits .
2596	r Return a Pauli instance from a string .
2597	Initialize from boolean values .
2598	r Compute the product of two Pauli operators .
2599	Convert to an Operator instance .
2600	Convert this circuit into an instruction .
2601	Update the number of qubits .
2602	Update the x .
2603	Insert a Pauli operator into the tensor .
2604	Append a Pauli .
2605	Delete one or more qubits .
2606	Generate a random boolean mask .
2607	Construct a Pauli instance .
2608	Get the measurement outcome of a given qubit .
2609	Add a sample measure .
2610	Add a qubit measurement .
2611	Add qubit to the problem .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Get the state vector .
2615	Validate the measurement of the experiment .
2616	Run a job .
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary .
2620	Initializes the unitary matrix .
2621	Get unitary .
2622	Run a job .
2623	Validate the circuit .
2624	Check if obj is a bit .
2625	Runs the transpiler .
2626	Determines if two intervals overlap .
2627	Shifts the interval by a given time .
2628	Shift this Timelot by a given time .
2629	Return the start time of the channel .
2630	Return the stop time of the given channels .
2631	Determines if the timeslots overlap with the given timeslots .
2632	Merge two Timeslot objects into a new TimeslotCollection .
2633	Shift the timeslot by a given time .
2634	Creates a comment on the repository .
2635	Convert the data into a dictionary .
2636	Displays the state of a state state state .
2637	Create a RZ gate .
2638	Convenience wrapper for the cswap gate .
2639	Initialize the backend property .
2640	Create the graph for the given dag .
2641	Select next program that is next to the next .
2642	Choose the best CX gate .
2643	Select the best problem in prog_qubit .
2644	Run the Transpiler .
2645	Returns a list of instructions .
2646	Inverse of the gate .
2647	Apply q_if to the gate .
2648	Set the c_if value of the gate .
2649	Determines if the matrix is unitary .
2650	conjugate operator .
2651	Transpose operator .
2652	Return the power of operator .
2653	Shape tuple .
2654	Convert a QuantumCircuit instruction into an Operator instance .
2655	This function is used to update the mapper layer .
2656	Separate a bitstring into a string .
2657	Formats a list of array - like memory .
2658	Formats a list of memory array as a string .
2659	Format a list of memory .
2660	Format counts as a dictionary .
2661	Format a state vector .
2662	Formats a unitary matrix .
2663	Decorator to ensure that the job has been submitted .
2664	Submit the job .
2665	Status of the job .
2666	Determines whether this interval is included in the spectrum .
2667	Plots the multoch multoch state
2668	Get qubit default qubit frequencies .
2669	Get the measurement frequencies from the user .
2670	Expand the circuit to the given dag .
2671	Plots the qsphere of the state space
2672	Determine the k - means k for n iterations .
2673	Compute the lex index .
2674	Plot the state of a Pauli state .
2675	Returns a list of unique hardware backends .
2676	The op node
2677	Sample a constant pulse .
2678	Return a new sample pulse .
2679	Return a sample pulse .
2680	Return a sample pulse .
2681	Return a sample pulse .
2682	Returns a sample of cos pulse .
2683	Return a sample pulse .
2684	r Sample pulse .
2685	r Sample the derivative of a given duration .
2686	Returns a SamplePulse .
2687	Calculate the distance of the real axes .
2688	Print the QREG as a string .
2689	Returns a backend instance
2690	Rename a register .
2691	Removes all operations named opname .
2692	Add a quantum register .
2693	Add a classical register .
2694	Add wire to DAG .
2695	Check that the condition is valid .
2696	Get all bits in a given condition .
2697	Create a new DAG node .
2698	Apply an operation back to the graph .
2699	Ensure that the edges in the edge map are valid .
2700	Check the validity of the wiremap .
2701	Map a condition to a wire map .
2702	Extend the gates from the dag .
2703	Compose the input circuit .
2704	Validate wires list .
2705	Make a mapping between two nodes .
2706	Computes the full_pred_map of the input circuit .
2707	Returns a lexicographical sort of the graph .
2708	Returns the edges between nodes .
2709	Returns a list of nodes that match the given op .
2710	The list of gate nodes in this node .
2711	Return a list of named nodes matching the given names .
2712	Returns a list of two qubit gates .
2713	Returns the predecessors of the given node .
2714	Return the predecessors of the given node .
2715	Get the ancestors of a node .
2716	Return the successors of a quantum node .
2717	Removes an op node from the graph .
2718	Removes all ancestors of a node .
2719	Removes all descendants of a node .
2720	Removes all non - ancestor nodes of a node .
2721	Removes all descendants of a node .
2722	Generate the layers of the graph .
2723	Generator for serialization layers .
2724	Iterate over multigraph layers .
2725	Return a set of run names in the graph .
2726	Iterate over nodes on a wire .
2727	Count the number of operations in the graph .
2728	Summary of the tensor .
2729	Create a tomography basis .
2730	Calculate the Pauli measurements .
2731	Create a tomography set .
2732	Process a tomographic set .
2733	Create the tomography circuit for a quantum circuit .
2734	Returns a list of tuples containing the measurement data for the given tomographic circuit .
2735	Calculate marginal counts based on counts .
2736	Fit the tomography data .
2737	Compute the Leastisq fit .
2738	The projection of a basis set .
2739	Compute the inverse of a tensor .
2740	Calculate the wind velocity using the eigenvectors .
2741	Calculate wigner data .
2742	Measure the measurement of a circuit .
2743	Check job status .
2744	Monitor the status of a job .
2745	Compute euler angles for a unitary unitary .
2746	Simplify U 3 .
2747	Adds qubits to the dag .
2748	Generate a table of qubits .
2749	Displays the job history tab .
2750	Plot the number of jobs in a given interval .
2751	Draw the pulse .
2752	Construct cu3 gate .
2753	Build Bell circuit .
2754	Transpile a set of circuits .
2755	Execute a circuit .
2756	Execute a set of experiments .
2757	The drive channel .
2758	The control channel .
2759	The measure channel .
2760	The acquisition channel .
2761	Generate input state .
2762	Assemble a set of Queries .
2763	Unset the Qiskit logger .
2764	Plot the state of a quantum state .
2765	Process the fidelity between two channels .
2766	Process input .
2767	Pop the lexer from the stack .
2768	push a file to the stack
2769	Run DAG on a DAG .
2770	Returns the bound method for the given instruction .
2771	Convert an acquire instruction .
2772	Convert frame change instruction .
2773	Convert persistent value to persistent value .
2774	Convert a drive instruction .
2775	Convert a snapshot instruction .
2776	Update the decorator s annotations .
2777	Generate a sampling function from a function .
2778	Filter backends .
2779	Resolve backend name .
2780	Convert a dag into a QuantumCircuit .
2781	Convert a matrix into a dictionary .
2782	Update the current symtab .
2783	Verify that the bit is a bit in the gate .
2784	Verify that the expression is a list of expressions .
2785	Verify that a gate is a gate .
2786	Verify that the register is correct .
2787	Verify that reg list is valid .
2788	Find the column in the input .
2789	Validate debug value .
2790	Parse data .
2791	Parse data .
2792	Parse the QR code .
2793	Add crz gate .
2794	Returns the basis state of a basis set .
2795	Returns the density matrix .
2796	Calculates the purity of a state .
2797	Runs the given dag .
2798	Render a backend
2799	Update the backend status
2800	Generate the widgets for the jobs pending
2801	Removes CX from the dag .
2802	Get a backend by name
2803	Shape of multipartite shape .
2804	Generate the register specifications for a list of bit labels .
2805	Truncate float .
2806	Returns LaTeX representation of the QR code .
2807	Determine the size of the image .
2808	Returns the size of the Beamer page
2809	Load schema from file .
2810	Get validator instance .
2811	Load all schemas and validators .
2812	Validate a JSON dict against a given schema .
2813	Formats the errors as a string .
2814	Perform majority operation .
2815	Unmajority operator .
2816	Generate a LaTeX source for the given circuit .
2817	Draw a drawer from a circuit .
2818	Generate a random unitary unitary operator .
2819	Generate a random density matrix .
2820	Generate GEGre matrix .
2821	Random density matrix .
2822	Generate a random density matrix .
2823	Returns a list of all names of the module .
2824	Return the power of this operator .
2825	Compose the input system with the given qargs .
2826	Convert a QuantumCircuit instruction to a SuperOp instance .
2827	Run DAG on a DAG .
2828	Serialize a list of circuits into a qiskit representation .
2829	Expand all 3Q gates into a DAG .
2830	Perform the decomposition of the gate .
2831	Defines the gate definition .
2832	Raise ValidationError if value is not a collection .
2833	Raises ValidationError if value is invalid .
2834	Validate atol .
2835	Set rtol .
2836	Reshapes the input_dims .
2837	Dimensions of the input dimension .
2838	Dimensions of the output dimensions .
2839	Returns a copy of the Dataset .
2840	Return the power of this vector .
2841	Return the dimensions for the given dimensions .
2842	Einsum multiplication .
2843	Deserialize the value into a valid schema .
2844	Serialize and raise ValidationError .
2845	Check the type of the field .
2846	Compute the fidelity between two states .
2847	SVD decomposition
2848	Return a copy of the snapshot .
2849	Set the label
2850	Determines if the circuit is unitary .
2851	Convert this operator into an operator .
2852	Convert this channel into an Instruction object .
2853	Initialize the transformer .
2854	Returns the sorted enum for the given model .
2855	Patch strptime modules .
2856	Get the locale map .
2857	Returns a list of locale objects .
2858	Check if tokens are valid .
2859	Split a string .
2860	Parses a date_string .
2861	Parse a date string .
2862	Returns True if given date_string is valid .
2863	Translate a string .
2864	Parses a date string using the given formats .
2865	Creates a generator for the given uri .
2866	Convert an exception to the network error code .
2867	Convert an exception to an HTTP exception .
2868	Read configuration from configuration file .
2869	Compose the phantom configuration
2870	Get information about the streams .
2871	Compose the stepper configuration .
2872	Log stdout and stderr
2873	Expand a string into a float .
2874	Configures the StepperWrapper instance
2875	Publish the stepper summary .
2876	get stpd filename
2877	Read the stepper info from the stepper info file .
2878	Write the stepper info to the file
2879	Create stpd file .
2880	Create a Composite object from a list of rps_schedule .
2881	Returns the number of rps at t .
2882	Execute a subprocess .
2883	Decode monitoring data .
2884	Build the points for a label
2885	Publish a message .
2886	Count the number of matched codes in codes_dict .
2887	Stop the pool
2888	Feed data from stpd file
2889	Initialize logging .
2890	Add user options .
2891	Configures the plugin
2892	Shutdown the plugins gracefully .
2893	Collect data from the queue .
2894	Notify listeners .
2895	Get a marker .
2896	Parse a duration string .
2897	Start the agent on localhost
2898	Start the agent .
2899	Discover the jmeter UDP port .
2900	Add components to the JMX file .
2901	Terminate the process .
2902	Read the stats from the given lines
2903	Create a new criterion object from a string .
2904	Load monitor configuration from XML file .
2905	Create the agent startup config file .
2906	Checks the disk usage
2907	Check that the memory is too large
2908	Get terminal size .
2909	Get right line from widget output .
2910	Truncates the given line_arr to a maximum width .
2911	Render the left panel
2912	Render the screen .
2913	Adds an info widget
2914	Fill the rectangle with whitespace padding .
2915	Calculate the length of a string .
2916	Create a load plan
2917	Get level string .
2918	add an info widget
2919	Make a request to the writer
2920	Load all plugins
2921	Returns the plugin with the given class .
2922	Return a list of plugins that match the given plugin_class .
2923	Copy a file to the artifacts directory .
2924	Add an artifact file to the collection .
2925	Create a temporary file and return it .
2926	Load configuration files .
2927	Write the configuration to disk .
2928	Get all options from a section
2929	Find all sections that start with a prefix
2930	Decode a chunk of stats data .
2931	Get the current phantom info .
2932	Prepare the monitoring agent .
2933	Coroutine to poll the agent data .
2934	Send collected data .
2935	Detect the configuration .
2936	Process a dictionary of metrics
2937	Parse the block of Agent s data .
2938	Subscribe to the given channels .
2939	Run the loop .
2940	Close the stream .
2941	Perform one request .
2942	Submit an order .
2943	Get information about an order .
2944	Get a specific position .
2945	List assets .
2946	Get asset by symbol
2947	Creates a joining sub - plan for a given pipeline definition .
2948	Ensure a dict has a key and value .
2949	Validate dict parameter .
2950	Constructs an event logger .
2951	Construct a json - event logger .
2952	Load config from a file .
2953	Get the configuration for a repository .
2954	Formats the configuration as a string .
2955	Get a pipeline by name .
2956	Get all pipeline definitions .
2957	Get next event from queue .
2958	Execute a pipeline through a pipeline .
2959	Waits until all processes are completed .
2960	Creates a FieldImpl .
2961	Build the execution plan .
2962	Build a pipeline from a pipeline definition .
2963	Build a sub pipeline from a pipeline definition .
2964	Get a solid named name .
2965	Construct the list of publish commands .
2966	Set new release tag .
2967	Create a passthrough context .
2968	Decorator for input selectors .
2969	Decorator to create an output selector schema .
2970	A block of text .
2971	Download file from S3 .
2972	Upload file to S3 .
2973	Context manager for user code error .
2974	Create a new directory .
2975	Context manager for user code execution .
2976	Create a context - free log .
2977	Returns True if any of the steps in the dagster .
2978	True if all steps have been skipped .
2979	Returns the transformed values .
2980	Returns the transformed value .
2981	The data of a step failure .
2982	Creates a PermissiveDict .
2983	Validate the given config value .
2984	Check if the given config value is a valid table .
2985	Execute the core transform .
2986	Decorator to wrap an existing type .
2987	Registers a resource definition .
2988	Create a new EventV2 .
2989	Coalesce the execution plan into a single ordered dictionary .
2990	Get connection params from django . py
2991	Create a new connection
2992	Create a Cursor instance .
2993	Close the connection to the database .
2994	Makes a model from a model dict .
2995	Convert a list of dictionaries into a list of dictionaries .
2996	Returns a formfield for the form field .
2997	Turn value into a dict
2998	Apply relations to the queryset .
2999	Compute the nfps using uniform distribution
3000	Compute nfps .
3001	Compute the best partition based on sizes .
3002	Compute optimal optimal partitions .
3003	Calculate the coefficients of two functions
3004	Initialize the slots .
3005	Returns the size of the seed .
3006	Serializes this MinHash to the buffer .
3007	Deserialize a buffer from a buffer .
3008	Update the hashvalues with the given b .
3009	Merge two minhash functions .
3010	Create a new MinHash with the same permutations .
3011	Add entries to the index .
3012	Yields all keys that match minhash .
3013	Computes the minimum hash of the input vector .
3014	Remove a key from the dictionary
3015	Update bits with the given bit .
3016	Count the number of nonzero values
3017	Merge HyperLogLog with another HyperLogLogLog .
3018	Clear the reg array
3019	Compute the apk score .
3020	Compute the MAPK .
3021	Sort the hashtables by index .
3022	Query the set of keys for minhash .
3023	Close all caches .
3024	Factory for ordered storage .
3025	Factory for unordered storage .
3026	Get user details .
3027	Overrides social login .
3028	Select text from given text .
3029	Parse a scoped select selector .
3030	Parse a single statement .
3031	Parse the value .
3032	Advance one line to one line .
3033	Try to parse a configurable reference .
3034	Augment exception message with given message .
3035	Convert an operation string to markdown format .
3036	Runs the session .
3037	Ensure the decorated function is decorated with the wrapped function .
3038	Decorate a function or class .
3039	Format a value as a string .
3040	Clear the global configuration .
3041	Bind a parameter to a configuration key .
3042	Query a configuration parameter .
3043	Checks if a function has a parameter .
3044	Cache the argument spec for a function call .
3045	Get the positional parameter names of a function .
3046	Get all positional parameters of a function .
3047	Get the default values for a function fn .
3048	Temporarily return a scope context manager .
3049	Decorator for configurable functions .
3050	Generate an operative configuration string .
3051	Parse configuration strings .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse multiple configuration files .
3055	Parses the given value .
3056	Finalize the configuration .
3057	Iterate over nested values .
3058	Iterate over all configurable references .
3059	Add a constant .
3060	Decorator for constants from enum .
3061	Return a list of selectors matching the given partial selector .
3062	Get all matches for partial_selector .
3063	Returns the full selector from the selector tree .
3064	Convert a search query to a string .
3065	Parses the Retry - After header .
3066	Validate a value .
3067	Represent this property as a dict .
3068	Validate and set value .
3069	Get a thing by index .
3070	Initialize the simulation .
3071	Sets default headers .
3072	Prepare request headers .
3073	Get a specific thing
3074	Called when a message is received .
3075	Post a thing .
3076	Delete a thing .
3077	Start the service .
3078	Return a dictionary representation of the action .
3079	Start the action .
3080	Finish the task .
3081	Represent this event as a dictionary .
3082	Get IP address .
3083	Returns a list of IP addresses .
3084	Sets the value .
3085	Notify about an external update .
3086	Return a dict representation of the thing .
3087	Set the href prefix .
3088	Get all property descriptions .
3089	Get action descriptions .
3090	Returns a list of event descriptions matching the given name .
3091	Add a property .
3092	Removes a property from the definition .
3093	Get property value
3094	Get all properties as a dict .
3095	Sets the value of a property .
3096	Get action by name and id .
3097	Add an event .
3098	Add a new event .
3099	Create an action .
3100	Removes an action
3101	Add a new action .
3102	Remove a subscriber .
3103	Add an event subscriber
3104	Remove an event subscriber
3105	Notify about a property
3106	Notify about an action .
3107	Notify about an event .
3108	Annotate the model .
3109	Perform an UPDATE on the model .
3110	Bulk insert .
3111	Inserts the given fields into the database .
3112	Implements the INSERT statement .
3113	Build a postgres insert compiler .
3114	Returns True if field is a magical field .
3115	Get the upsert fields for the model .
3116	Signal handler for model save
3117	Signal handler for delete
3118	Returns an expression that is not None .
3119	Resolve expression .
3120	Returns the SQL representation of the object .
3121	Returns a copy of this object with the given relabels .
3122	Add additional join conditions .
3123	Check if a field is a HStoreField .
3124	Insert values into the table .
3125	Create a hstore required for a given field .
3126	Rename a hstore .
3127	Drop the specified field with the given key .
3128	Generate a constraint name for a given field .
3129	Override create_index_create_index .
3130	Creates a command from a list of commands .
3131	Import the base class from the postgresql backend .
3132	Prepare the database .
3133	Prepare value for field
3134	Returns the query string that represents a query .
3135	Return the SQL for insertions .
3136	Rewrite insert statement .
3137	Rewrite the insert update statement .
3138	Rewrite the SQL statement for insertion .
3139	Build the conflict target .
3140	Get field by name .
3141	Format field name .
3142	Formats the value for a field .
3143	Create hstore unique constraint .
3144	Rename a table with a unique name .
3145	Drop a unique field from the database .
3146	Generate a constraint name for a unique field .
3147	Iterate over the unique keys of a field .
3148	Add a condition .
3149	Return the SQL for this field .
3150	Return tdist95 conf level for a given DataFrame .
3151	Calculate the variance of two samples .
3152	Compute the t - score between samples
3153	Determines if two samples are significant .
3154	Topological sort .
3155	Generator over queens of queens
3156	Play the board .
3157	Select the node in the board .
3158	Move a random game .
3159	Filter benchmarks that are compatible with Python 2 .
3160	Expand a benchmark name into a list of benchmark names .
3161	Generate a string representation of a string .
3162	Generate benchmarks .
3163	Returns the domain of the spline .
3164	Fetch messages from channel
3165	Parse the posts returned by the user .
3166	Get user details .
3167	Fetch items by category
3168	Fetch RSS entries
3169	Setup the command parser .
3170	Fetch bugs for given category .
3171	Gets a list of bugs .
3172	Get comments .
3173	Get history of given bug ids .
3174	Get attachment data .
3175	Gets a list of notes belonging to an issue .
3176	Fetch merged merge requests
3177	Gets the merge notes for a merge .
3178	Get merge versions
3179	Get all merges for a given date .
3180	Fetches a merge .
3181	Fetches the versions of a merge .
3182	Fetch a single merge version .
3183	Gets a list of notes for a given item .
3184	Gets the list of emojis for a given item .
3185	Fetches all the emojis for a note .
3186	Return the time to reset .
3187	Fetch items from GitLab .
3188	Initialize rate limit .
3189	Setup the command line parser .
3190	Fetch the most recent messages .
3191	Extract metadata id from metadata
3192	Get the number of members of a conversation .
3193	Get channel information .
3194	Get information about a user
3195	Setup command parser .
3196	Extract the updated timestamp from the metadata
3197	Parse the bug list .
3198	Parse the raw XML into a list of bugs .
3199	Parse bug activity tags .
3200	Logout from the server .
3201	Retrieves the server s metadata
3202	Get a list of buglist .
3203	Get a list of bugs
3204	Get a single bug activity
3205	Fetch events .
3206	Fetch events from a group .
3207	Get events for a group .
3208	Get comments for a specific event .
3209	Fetches RRSVPS for a given event .
3210	Fetch a question
3211	Fetches comments for the given question
3212	Build a Question object
3213	Fetch questions from API
3214	Get the HTML question
3215	Get comments for post .
3216	Takes a question and parses it into a dict
3217	Parses the answer and returns a list of answers
3218	Returns the number of html pages in a question
3219	Parses update_info element .
3220	Fetch reviews for given category .
3221	Returns a list of reviews .
3222	Fetches and fetches Grrit28 tags .
3223	Get server version .
3224	Get the reviews for the last item
3225	Returns the next group item for the given entry .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute command from remote .
3229	Setup the command line parser .
3230	Fetches the raw data of an issue .
3231	Fetches the attachments for the given issue .
3232	Fetches the messages for the given issue .
3233	Fetches the activities for the given issue .
3234	Fetches user data .
3235	Get user details .
3236	Get the raw text of an issue .
3237	Get a collection of tags for a given issue .
3238	Returns the URL for the project .
3239	Fetch all pages
3240	Get all subscriptions from groupsio
3241	Find group id
3242	Wrapper for requests . get
3243	Setup the command line parser .
3244	Generate a UUID for the given arguments .
3245	Fetch items from backend .
3246	Fetch files from an archive .
3247	Find all backends of a given package .
3248	Fetch metadata for specified category .
3249	Fetch metadata from archive .
3250	Filter classified data for item .
3251	Parse arguments .
3252	Set the authentication arguments
3253	Set the archive arguments
3254	Set the arguments for the output
3255	Run the command .
3256	Initialize the archive manager .
3257	Get the timestamp of the metadata on the item
3258	Parse a mbox file .
3259	Fetch and parse mboxes from mail list .
3260	Copy a mbox into a temporary file .
3261	Validate message fields .
3262	Convert dict to dict .
3263	Get a message from the file .
3264	Fetch commit data .
3265	Fetch items from the repository .
3266	Parse a git log file .
3267	Prepare git path
3268	Setup the command line argument parser .
3269	Iterate over the lines of the stream .
3270	Clone a repository .
3271	Counts the number of objects in the repository .
3272	Determines if the repository is detached .
3273	Update the repository .
3274	Sync this repository .
3275	Get the list of branches from the repository .
3276	Execute git log .
3277	Execute git show .
3278	Fetch the refs from the repo
3279	Get the list of commits from a pack
3280	Updates the refs with the given refs .
3281	Return list of GitRefs for this repository .
3282	Update a ref .
3283	Run a subprocess .
3284	Read the stderr from the process s stderr
3285	Run a git command .
3286	Fetch tweets
3287	Fetches items from the query .
3288	Fetches tweets for the given query .
3289	Setup command line arguments .
3290	Fetch items by category .
3291	Fetch items from Elasticsearch .
3292	Parse a hit from Google Search API .
3293	Fetch search results .
3294	Extract the updated_on timestamp from metadata
3295	Return the category for metadata .
3296	Fetches the pull requests for the given date range .
3297	Fetch repo info
3298	Get all the reactions for an issue
3299	Get list of reactions for issue comment
3300	Get list of assignees from issue .
3301	Get a list of reviews for a pull request .
3302	Get the hashes for the pull commit .
3303	Get the reactions for a pull review comment .
3304	Get user information
3305	Get all the reactions for an issue .
3306	Get issues for a given date .
3307	Get all the pull requests for this repository .
3308	Get repository name .
3309	Get requested reviews for a pull .
3310	Get all the commits for a given PR number .
3311	Get the reactions of a review comment .
3312	Get a user by login
3313	Get the orgs for a given login
3314	Get the rate limit .
3315	Get the rate limit for each token .
3316	Choose the best api token to use .
3317	Check the rate limit and rate limits .
3318	Update current rate limit .
3319	Initialize metadata .
3320	Store an entry in the archive .
3321	Retrieve an entry from the archive .
3322	Create a new archive .
3323	Create a hashcode for a given uri and payload .
3324	Verify the integrity of the archive .
3325	Load metadata from the archive
3326	Return the number of rows in a table .
3327	Create an archive .
3328	Remove an archive .
3329	Search archives .
3330	Search archive files .
3331	Search all files in the directory
3332	Return the file type of a compressed file .
3333	Returns the months between two dates .
3334	Convert message to dict .
3335	Removes illegal characters from the XML string .
3336	Convert XML to dict
3337	Parse the raw JSON response into a list of issues .
3338	Gets a list of issues for the given date .
3339	Get information about an issue .
3340	Get information about a user .
3341	Calls the given resource
3342	Fetch data for a given category
3343	Fetch data from the repository
3344	Return the contents of a repository .
3345	Map custom fields to their values .
3346	Remove custom fields from a list of fields
3347	Yield all issues from the raw page
3348	Fetch issues from a given URL .
3349	Get issues for a given date range .
3350	Get comments for an issue
3351	Get all available fields .
3352	Fetch items
3353	Get all jobs from Jenkins
3354	Get all builds for a given job .
3355	Parse the raw page .
3356	Get questions from the server
3357	Setup command line arguments .
3358	Fetch reviews for given category
3359	Get the timestamp for the given reviews .
3360	Fetch pages at the given URL .
3361	Get all pages in a namespace
3362	Get recent changes
3363	Fetch chat items
3364	Parse messages from a JSON string .
3365	Filter message by chats
3366	Gets a list of updates from the server .
3367	Fetch articles from a group
3368	Add metadata to item
3369	Parses an email address into a dictionary .
3370	Wrapper for _fetch .
3371	Fetch article data
3372	Fetch data from remote server .
3373	Fetch data from the archive
3374	Create an HTTP session .
3375	Setup the rate limit handler .
3376	Sleep for rate limiting .
3377	Updates the rate limit from the response headers .
3378	Parse a Supybot log file .
3379	Retrieve all archives from a given date .
3380	List all Supybot archives
3381	Parse the message stream .
3382	Extract timestamp from the given line .
3383	Parse a message from a string .
3384	Fetch topics from the server .
3385	Parse the topics page .
3386	Get information about a topic
3387	Post a post
3388	Fetch the items of the given category .
3389	Parse the output of the tasks .
3390	Yield users from raw json
3391	List all tasks in the project .
3392	Gets transactions for a list of transactions
3393	Get users
3394	Set phids
3395	Calls the Phabricator API
3396	Get metadata id from metadata
3397	Parse the contents of a JSON file .
3398	Get the contents of the repository .
3399	Get historical content for given content .
3400	Parse the result .
3401	Generate a capabilities URL .
3402	Read XML from a URL .
3403	Read an etree from a string .
3404	Parses the result
3405	Build the base URL .
3406	Get all elements of complex type
3407	Constructs the schema for the given elements .
3408	Returns the URL for the description of a feature type .
3409	Execute complex input with reference
3410	Gets the movie list .
3411	Gets TV list .
3412	Gets a list of movies .
3413	Gets information about the user .
3414	Gets the alternative titles .
3415	Gets credits for this account .
3416	Gets the list of external ids associated with your account .
3417	Get a list of keywords .
3418	Gets the recommendations for the user .
3419	Gets the release dates for a project .
3420	Gets a list of releases .
3421	Gets the translations for the current user .
3422	Gets a list of similar movies .
3423	Get reviews .
3424	Gets changes from the server .
3425	Gets the upcoming subscriptions .
3426	Gets a list of currently playing times .
3427	Gets popular data .
3428	Gets the top rated domains .
3429	Gets account states .
3430	Sets the rating for this user .
3431	Gets the credits for a user .
3432	Gets the credits for the current user .
3433	Gets credit information .
3434	Get TV information .
3435	Gets information about the user .
3436	Get a list of movies .
3437	Gets information about this session .
3438	Gets movie movies .
3439	Creates a new token .
3440	Gets the token validity .
3441	Gets a new session .
3442	Gets a new guest session .
3443	Gets the user s rated movies .
3444	Gets the status of an item .
3445	Create list .
3446	Remove an item from this session .
3447	Clear a list of sessions .
3448	Gets the content ratings for the client .
3449	Gets a list of similar ids .
3450	Gets information on the vehicle .
3451	Gets series information .
3452	Gets the credits for a series .
3453	Gets the list of external IDs for the series .
3454	Gets series information .
3455	Gets the credits for the season .
3456	Gets the list of external ids for the season .
3457	Set attributes to values from a dict
3458	Get movie data .
3459	Get a collection of resources .
3460	Get information about the TV .
3461	Get person information .
3462	Gets company information .
3463	Gets the keywords from the API .
3464	Perform a GET request .
3465	Normalize a string .
3466	Takes a list of refs and calculates the number of n - grams for each refs .
3467	Return count n - grams with count n - grams .
3468	EfCC function .
3469	Align two blocks .
3470	r Iterate over all the descriptors in a module .
3471	Registers a JSON string into the registry .
3472	r Register a descriptor .
3473	Print s to stdout .
3474	r Determine if the given descriptor is a class .
3475	Convert the instance to a JSON string .
3476	The coordinate of this layer .
3477	r Compute the atomic surface of a sphere .
3478	r Return the surface area of the molecule .
3479	r Creates a molecule from a molecule .
3480	Convert a JSON object into a descriptor .
3481	r Fill with missing values .
3482	r Remove missing values
3483	r Iterate over all keys and values .
3484	r Convert the object to a dictionary .
3485	r Return the name of the field .
3486	Decorator for debugging .
3487	Synchronization decorator .
3488	Print a progress message .
3489	Print a message to stdout .
3490	Log a message and exit .
3491	Get a temporary file name .
3492	Set a temporary file .
3493	Remove all temporary files
3494	Get a fixed path .
3495	Get the legal parameters for a given method .
3496	Merge parameters for a method .
3497	Add command line options .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Joins all worker threads .
3501	Count the number of processed tasks
3502	Read S3 keys from environment variables .
3503	Read S3 keys from command line
3504	Read S3 keys from s3 config file
3505	Initialize S3 keys .
3506	Connect to S3
3507	List all buckets
3508	Walks an S3 directory
3509	Walks a localir .
3510	Recursively expand source path .
3511	Upload a single file to the pool .
3512	Upload files from source to target .
3513	Create a bucket .
3514	Update the privilege of an object
3515	Print files from S3 .
3516	Download a single file from S3
3517	Get files from S3
3518	Copy a single file to the pool .
3519	Copy files from source to target .
3520	Delete files from S3
3521	Walk a directory and return relative paths .
3522	Sync files from source to destination .
3523	Compute the MD5 hash of a file .
3524	Get the md5 hash of the file
3525	Ensure that the target directory exists .
3526	Checks to see if the remote key exists in the md5cache
3527	Returns True if path matches the filter_path
3528	Walks an S3 directory and returns the result .
3529	Conditional objects to be considered .
3530	Get file privilege
3531	Lookup an object .
3532	Read a chunk from a file
3533	Upload a file to S3 .
3534	Verify that the file s size is consistent .
3535	Write a chunk to a file .
3536	Copy a file to S3 .
3537	Run the given command .
3538	Validate format parameters .
3539	Pretty print objects .
3540	List buckets .
3541	Create an S3 bucket .
3542	Handler for S3 .
3543	Handles GET command .
3544	Log files .
3545	Dsync command
3546	handler for S3
3547	Copy files from S3 to target .
3548	Delete files from S3
3549	size of S3
3550	size message
3551	Match date string .
3552	Match time .
3553	Match a string .
3554	Validate dict value .
3555	Discover Xiaomi Gateway .
3556	Start listening for messages .
3557	Read from the hub
3558	Push data to the server .
3559	Get the encryption key .
3560	Called when an exception occurs .
3561	Add rollbar to pyramid .
3562	Ensure log handler exists .
3563	Get request .
3564	Initialize the rollbar instance .
3565	Decorator for lambda functions .
3566	Report a message to Rollbar .
3567	Search items by title .
3568	Create a logger for the given agent .
3569	Build user data .
3570	Add data to Lambda context
3571	Add request data to rollbar payload
3572	Checks if the given frame is in the root frame .
3573	Builds the data for the given request .
3574	Build server data .
3575	Build the payload from data .
3576	Run the reactor .
3577	Compose Chinese characters .
3578	Decompose a Hangul letter .
3579	Checks if a string has a jangul .
3580	Extracts a word from a word .
3581	Check if an exception is inside an exception .
3582	Checks if the given node is inside a lambda function .
3583	Get all elements of a tuple .
3584	Check if an exception is thrown .
3585	Checks if the given node is a super node .
3586	Check if the node is an error .
3587	Check if a function is a default argument .
3588	Check if the node is a function decorator .
3589	Checks if the given node is an ancestor of the given frame .
3590	Return the parent of the given node .
3591	Decorator for checking messages .
3592	Collect string fields from a format string .
3593	Get the argument of a call .
3594	Determines if the given node is an exception .
3595	Check if an error is of an error .
3596	Check if a function is decorated with a property decorator .
3597	Check if a function is decorated with the given qnames .
3598	Finds the first exception handler that matches the given node .
3599	Check if the node is a fallback block .
3600	Find exception handlers for given exception .
3601	Determines if a node is ignored .
3602	Check if class is abstract .
3603	Infer a node .
3604	Return node s type .
3605	Check if a function is registered in the singleispatch .
3606	Determines if postponed evaluation is enabled .
3607	Return fully qualified names for module .
3608	Get the absolute name of a module .
3609	Represent tree definitions .
3610	Write the dependency graph .
3611	Visitor for import .
3612	Visit an ImportFrom node .
3613	Check the position of the import node .
3614	Record an import statement .
3615	Check the imports of a module .
3616	Check for relative import
3617	Add imported module .
3618	Check for deprecated module .
3619	Add a message to the preferred module .
3620	Add external dependencies .
3621	Filters out imports that are inside the graph .
3622	Get default options .
3623	Insert default options .
3624	Indicates whether or not the node is visible .
3625	Get callbacks for node .
3626	Visit the given node .
3627	Ensure all messages are consistent .
3628	Check the function call .
3629	Check if the node is boolean .
3630	Check for open mode .
3631	Process a message .
3632	Displays the messages to the screen .
3633	Get the title of a node .
3634	Set default options .
3635	Return True if the node is a builtin module
3636	Add class node .
3637	Get all ancestors of node
3638	Get all instances of the given class .
3639	Extracts classes from the given node .
3640	Leave the project .
3641	Visitor for ImportFrom node .
3642	Create a classDiagram for the given class .
3643	Generate diagram diagrams for the given project .
3644	Check if owner is ignored .
3645	Return a list of names that are similar to the given attribute .
3646	Emit a non - member node .
3647	Check if statement has a parent of the given type .
3648	Determines if a variable is used as a variable .
3649	Check if a variable is a context variable .
3650	Visit the attributes of an attribute .
3651	Check for assignment .
3652	Ensure that the function is callable .
3653	Check for unary operand errors .
3654	Iterate over the interfaces of the given node .
3655	Create a project from a list of files .
3656	Generate a package node .
3657	Initialize the function definition .
3658	Handles assignments .
3659	Handle assignattr_type .
3660	Visit imported modules .
3661	Visit an ImportFrom node .
3662	Compute the given module .
3663	Called when a module is imported .
3664	Returns the ANSI escape code for the given color .
3665	Colorize a message .
3666	Register the given linter .
3667	Handle messages .
3668	Print the given layout .
3669	Process a message .
3670	Write a graph to the stream .
3671	Create a node .
3672	Write an edge between two nodes .
3673	Check that the format string is correct .
3674	Process non - raw string tokens .
3675	Process a section .
3676	Update the section .
3677	generate default table
3678	Writes a table to the stream .
3679	Adds a renamed message .
3680	Register messages from a given checker .
3681	Register a message .
3682	Check if the given symbol id matches the given symbol
3683	Raise an error if the symbol doesn t exist .
3684	Raise an InvalidMessageError .
3685	Get message definitions for a given message id or symbol .
3686	Get a string representation of a message
3687	Print help message
3688	List all available messages .
3689	Initialize pylint builder .
3690	Returns the number of CPU cores .
3691	Add the message stats to the report .
3692	Fix import path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set option .
3696	Register a checker .
3697	Disable all reports .
3698	Enables ports on Python 3 .
3699	Returns a list of checkers that are not registered .
3700	Returns a list of checker names .
3701	Prepare checkers .
3702	Expand the given modules .
3703	Set the current module .
3704	Check an astroid module .
3705	Report the evaluation .
3706	Handle help message
3707	Print full documentation .
3708	List all messages
3709	List all checker groups .
3710	Normalizes text .
3711	Return the module and frame ID for the given node .
3712	Safely decode a line .
3713	Check if a basename is in blacklist_re
3714	Register plugins in the given directory .
3715	Comment a string .
3716	Format an option value .
3717	Format a section .
3718	Formats the given options into a stream .
3719	Insert a child at the given index .
3720	Append a child to this node
3721	Returns the list of parents of this node .
3722	Format the given layout .
3723	Compute the content of a table .
3724	Compute the content of the layout .
3725	Recursively collect block lines .
3726	Handle an ignore message .
3727	Register a report .
3728	Create report sections .
3729	Add stats to the stats dictionary .
3730	Return the name of setters property .
3731	Get setters property .
3732	Returns True if the return node is a constant .
3733	Return a list of possible exc types .
3734	Process messages from a module .
3735	Process a module .
3736	Process comments .
3737	Check if an import from a future import from a future .
3738	Determines if the given statement is in for the given statement .
3739	Look for an overridden method .
3740	Get extra info from node .
3741	Detect global scope .
3742	Returns True if assignName_node is assigned locally .
3743	Mark a node as consumed .
3744	Check for global variables .
3745	Ignore class scope .
3746	Check if node has homonym in upper function scope .
3747	Check that the given node is unbalanced .
3748	Checks the metaclasses of the given node .
3749	Get all packages in the given directory .
3750	Install pylint .
3751	Run install .
3752	Create a table with similar similarities .
3753	Entry point for the hdi .
3754	Append a stream to the parser .
3755	Compute a list of sims .
3756	Prints a summary of similarities to stdout .
3757	Find common elements between two lines .
3758	Iterate over the similarities between two lines .
3759	Enumerate lines starting at start_at .
3760	Create a dictionary mapping line numbers to line numbers .
3761	Returns True if definition is equivalent to call .
3762	Check equality of two nodes .
3763	Determine if two arguments have the same default value .
3764	Determine whether two arguments are different .
3765	Safe inference call result .
3766	Set the scope of the given node .
3767	Check the class definition .
3768	Ensure that the node is consistent .
3769	Ensure that the given node is proper .
3770	Visitor for function def .
3771	Check if the super - delegations of a function is a method .
3772	Leave function definition .
3773	Check that the given node has slots .
3774	Check if the name is a function .
3775	Checks the members of the given node .
3776	Ensure abstract methods are implemented .
3777	Check the signature of a method .
3778	Checks if the given node is a method parameter .
3779	Check if the body is a Raise node .
3780	Check for bad exception context .
3781	Check function definition .
3782	display the report
3783	Check if node is a typing named tuple .
3784	Check if the node is an enum class .
3785	Check if a class is a dataclass .
3786	Initialize the benchmark .
3787	Check the class definition .
3788	Leave class definition .
3789	Visitor for If node .
3790	Check BoolOp expression .
3791	Check the docstring for correctness .
3792	Formats the given template using the given template .
3793	Determines if the token is a trailing colon .
3794	Check if the given node is an actual ELIF .
3795	Check if an element is simplifiable .
3796	Check if a StopIteration is inside a generator .
3797	Check if an exception is inherited from a stopiteration .
3798	Check if a generator is raised .
3799	Check if the node is nested .
3800	Determines if isinstance types of a call .
3801	Check to see if we merge anisinstance .
3802	Checks the chain of two tuples .
3803	Determines if the node is an AND or another node .
3804	Check that the return statements are consistent .
3805	Check if a return statement is ended .
3806	Visit for loops .
3807	Check if graphviz is available .
3808	Runs the project .
3809	Write packages and dependencies
3810	Write all classes to the diagram
3811	Set the printer .
3812	Set the printer .
3813	Determines if this file should be emitted .
3814	Formats the message
3815	Get environment variables .
3816	Run pylint on the given file .
3817	Run a Python interpreter .
3818	Find cycles in the graph .
3819	Get the source s source .
3820	Generate the graph .
3821	Format a section .
3822	Registers a managed message .
3823	Disable a message .
3824	Enable a message .
3825	Get the symbol for a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Print all global options and their options .
3829	Print the checker documentation .
3830	Get the amount of indentation .
3831	Get indentation hint line .
3832	Get the indentation of the token .
3833	Handles line start position .
3834	Returns a tuple of valid indentation strings .
3835	Handles hanging indent after bracket .
3836	Return a _ContinuedIndent .
3837	Push a token onto the stack .
3838	Parse a new line .
3839	Check for parentheses .
3840	Check if the token is a valid type annotation .
3841	Check for equality spaces .
3842	Check that token is surrounded by spaces .
3843	Visitor for default statement .
3844	Check if a multi - statement line is multi - line .
3845	Check if lines are valid .
3846	Check the indentation level .
3847	Check if a node is in an iterating context .
3848	Check if the node is a conditional import statement .
3849	Visit a name .
3850	Visitor for subscripting .
3851	Visitor for attribute
3852	Visitor for ExceptHandler
3853	Check the raise value .
3854	Find the path to the pylintrc file .
3855	Validate value .
3856	Expand the default tag .
3857	Validate option .
3858	Register an option provider .
3859	Set provider option .
3860	Set the value of an option .
3861	Generate configuration file .
3862	Load the configuration file .
3863	Load command line options .
3864	Add a help section .
3865	Output the help message for the command .
3866	Load default values from all options
3867	Get the destination attribute of an option
3868	Get the definition of an option
3869	Get all options grouped by section .
3870	Check if a function is a method call .
3871	Check if the node is a complex format string .
3872	Initialize logging modules .
3873	Visit the imported module .
3874	Visit an import node .
3875	Visitor for call .
3876	Check format string .
3877	Check if a node is in loop .
3878	Return the parent node of a loop node .
3879	Checks if loop exits early .
3880	Extract property classes from a config .
3881	Determines the function name type .
3882	Generate a nice report by type stats
3883	Check if a node is redefined by a decorator .
3884	Determines if a call is a single argument position .
3885	Check if starred node is assigned .
3886	Check for nonlocal and global variables .
3887	Check if call is abstract .
3888	Check if a loop is on a loop .
3889	Check if node is not in loop body .
3890	Initialize the benchmark .
3891	Check if expr is valid .
3892	Visit a lambda function .
3893	Add an assert - on error message .
3894	Check for duplicate keys .
3895	Check for unreachable statements .
3896	Ensures that the node is not in the same body .
3897	Check that the given call is a reverse sequence .
3898	Check if an assignment is valid .
3899	Check if a name is valid .
3900	Check docstring for docstring .
3901	Check that the literal comparator is valid .
3902	Process a subgraph .
3903	Parse a subgraph .
3904	Check that the node is too complex .
3905	Add checker to checker .
3906	Recursively walk the AST tree .
3907	Add a relationship between two objects .
3908	Get a relationship by from_object and relation_type .
3909	Get all the attributes of a node .
3910	Return a list of methods in the given node .
3911	Add an object to the graph .
3912	Returns a list of class names .
3913	The list of classes
3914	Get class by name
3915	The list of modules in this node .
3916	Get a module by name .
3917	Get a module by name .
3918	Add from_module to_module
3919	Delete the grant .
3920	Returns the query for the current model .
3921	Get a user
3922	Get a single token
3923	Set a new token .
3924	Store a grant .
3925	Get a user by code .
3926	Prepare the request .
3927	Initialize the extension .
3928	Create a new remote app object .
3929	Make a request .
3930	Create a new OAuth2 request .
3931	Handles OAuth1 requests .
3932	Handles OAuth2 response .
3933	Handle an authorized response .
3934	Decorator for authorized_response .
3935	Hash a token .
3936	Create a client with a given token .
3937	Create an OAuth client .
3938	Temporarily hide insecure transport .
3939	Perform authorization request .
3940	Decorator for request token handler .
3941	Get client secret .
3942	Get request token secret .
3943	Get access token secret from request .
3944	Get default realms for a client .
3945	Get realms from request .
3946	Get the redirect uri for a given token .
3947	Get the RSA key for a request .
3948	Validate client key .
3949	Validate request token .
3950	Validate access token .
3951	Validate timestamp and nonce .
3952	Validate redirect_uri parameter .
3953	Validate the realms for a request .
3954	Validate verifier .
3955	Verify the request token .
3956	Verify that the realm is valid .
3957	Save an access token .
3958	Save request token .
3959	Save verifier .
3960	Return the error URI for the user .
3961	Confirm the authorization request .
3962	Verify a request .
3963	Get client credentials from the request .
3964	Check if client has been authenticated .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the scope of refresh token .
3968	Confirm a refresh token .
3969	Returns the default redirect uri
3970	Get the default scopes for a client .
3971	Destroy an authorization code for a client .
3972	Persist an authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate a grant .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Validate response_type parameter .
3980	Validate scopes .
3981	Validate username and password .
3982	Revoke an access token .
3983	Update qq api request data
3984	Recursively convert all keys to strings
3985	Change the Authorization header .
3986	Register a remote application .
3987	Create a new remote application .
3988	Extracts the parameters from the request .
3989	Convert text to bytes
3990	Decode text using base64 .
3991	Create a response object .
3992	Get cached clients .
3993	Add a remote app .
3994	Add a remote application .
3995	Try to verify the certificate .
3996	This method is used to verify the success key .
3997	Load private key .
3998	Attempt to load private key callback .
3999	Check if the private key is correct .
4000	Check to see if we have been revoked
4001	Check revocation revocation information .
4002	Creates a new X509Request
4003	Creates a new X509 certificate .
4004	Decorator for functions that require a function .
4005	Verify that locations are valid .
4006	Set the password callback .
4007	Sets the certificate chain .
4008	Use SSL certificate to use .
4009	Use a certificate .
4010	Add an extra chain certificate .
4011	Sets the private key using the private key file .
4012	Use a private key .
4013	Load a client ca list .
4014	Set SSL verification depth .
4015	Load a temporary dh file .
4016	Sets the cipher list .
4017	Sets client CA list .
4018	Adds a client CA .
4019	Decorator to set the TLS server s server name .
4020	Sets the TLS profiles for the connection .
4021	Set the next NPN select callback .
4022	Sets the alpn protocols .
4023	Set the ALPN select callback function .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Register an OCSP client callback .
4027	Set the SSL context .
4028	Get the host name .
4029	Set host name .
4030	Receive data from the socket .
4031	Read bytes from the socket .
4032	Read data from the BIO socket .
4033	Renew the connection .
4034	Shut down the connection .
4035	Get the list of cipher names .
4036	Get client CA list .
4037	Sets the SSL shutdown state .
4038	Get a random value from the server .
4039	Get a random number of random characters .
4040	Get the master key .
4041	Export a keying material .
4042	Get an SSL session .
4043	Get the name of the current cipher .
4044	Get the number of bits of the cipher .
4045	Get the current cipher version .
4046	Get the protocol version .
4047	Get the next protocol message from the server .
4048	Sets the alpn protocols .
4049	Get the ALPN message .
4050	Create new memory buffer .
4051	Convert a BIO object to a string .
4052	Set ASN time .
4053	Get ASN time from a string .
4054	Get a curve by name
4055	Dump a public key .
4056	Load a public key .
4057	Sign data .
4058	Verify signature .
4059	Dump a CRL to a string .
4060	Converts this key to a cryptography key .
4061	Generate a new RSA key .
4062	Check if the key is valid .
4063	Load the elliptic curves .
4064	Load the elliptic curve .
4065	Convert this key to an EC2 key .
4066	Derive the value of the certificate .
4067	Get the components of the certificate .
4068	Get the short name of the certificate .
4069	Get the data of the extension .
4070	Convert this certificate to a cryptography object .
4071	Sets the public key .
4072	Get the public key .
4073	Get the subject name .
4074	Add multiple X509 Extensions to the request .
4075	Returns a list of X509Extension objects .
4076	Verify that this key is valid .
4077	Convert this certificate to a cryptography object .
4078	Set the certificate version .
4079	Get the public key .
4080	Sets the public key .
4081	Sign a string with the given digest .
4082	Get the signature algorithm .
4083	Calculates the digest of the certificate .
4084	Set the serial number .
4085	Get the serial number of the certificate .
4086	Increases the amount of time after a given amount of time .
4087	The gmtime after a given amount of time .
4088	Returns True if the date has expired .
4089	Get the issuer name .
4090	Sets the issuer .
4091	Get the subject name .
4092	Sets the subject .
4093	Adds multiple extensions to this X509 object .
4094	Get an X509Extension object by its index .
4095	Add a certificate to the store .
4096	Add a crl .
4097	Set the time of the certificate .
4098	Initialize the certificate .
4099	Return an X509StoreContextError .
4100	Verify the certificate .
4101	Set the serial number .
4102	Get the serial number of the certificate .
4103	Sets the reason of the certificate .
4104	Get the reason of the certificate .
4105	Set the revocation date of the certificate .
4106	Convert this certificate to a cryptography object .
4107	Get the revoked tokens .
4108	Get the issuer of this certificate .
4109	Sign a digest with the given digest .
4110	Export a certificate to a file .
4111	Get the type name of the object .
4112	Set certificates .
4113	Exports a PKCS12 file .
4114	Sign the given digest .
4115	Verify a key .
4116	Encode the SPKI .
4117	Get the public key .
4118	Set the public key .
4119	Raises an exception from the error queue .
4120	Convert a string to bytes .
4121	Create a helper function for printing tokens .
4122	Get metadata for service .
4123	Get all issues in the board .
4124	Build the annotations for a given card .
4125	Get all boards
4126	Get list of open lists
4127	Get all cards in a list
4128	Get comments for a given card
4129	Generate the URL for the API .
4130	Simple wrapper for getter .
4131	Convert a link to a dictionary .
4132	Get all issues from the server .
4133	Get all pull requests for a given tag
4134	Aggregate remote issues .
4135	Get a config value from main section
4136	Returns a dictionary of all the templates in the configuration .
4137	Validate the service configuration .
4138	Return True if the given issue is included .
4139	Make a table from a grid
4140	Execute the given command .
4141	Try to parse an integer or empty string .
4142	Pull issues from the projectrc repository .
4143	Get data from url
4144	Get a collection of values from a url
4145	Find the local uuid of a task .
4146	Merge two fields into a single task .
4147	Build das config overrides for the given targets .
4148	Parse a sprint string .
4149	Get the credentials from the user .
4150	Calculate multi - Rrouge N - Rrouge n - grams .
4151	Calculate p - values for each gene
4152	Calculate the F - R - R correction for the given data .
4153	Z - score of data .
4154	Plots heatmap of a DataFrame .
4155	Adjust the positions of spines .
4156	Prepare argument parser .
4157	Adds command line arguments for prerank .
4158	Add command line arguments to subparsers .
4159	Adds command line options for enrichment .
4160	Compute enrichment score for each gene .
4161	Generate a ranking metric tensor .
4162	Calculate the rating of a DataFrame .
4163	Calculate the p - value of the GP .
4164	Calculates gsea significance score .
4165	Returns a pandas DataFrame with the names and descriptions of the chart
4166	Returns a list of datasets
4167	Returns the attributes of the dataset .
4168	Returns the list of filters for the given dataset .
4169	Query the HGOMiens Gene Ensembl gene .
4170	Generate GSEA analysis .
4171	Generate a single sample of genes
4172	Wrapper for prerank
4173	Replots the GSEA replot .
4174	Sets the number of CPU cores .
4175	Load gene sets from gene_list
4176	Get the list of libraries for a given database
4177	Download the Enrichr library .
4178	Create heatmat
4179	save results to zipfile
4180	Load gene expression data
4181	Run the GSEA analysis .
4182	Run GSEA computation .
4183	Run samples permu
4184	Calculate enrichment score for each gene .
4185	save results to a file
4186	Parse GSEA output files .
4187	Erich a set of genes
4188	Parse gene sets
4189	Parses the gene list
4190	Sends gene list to url
4191	Check if gene list is recognized by user .
4192	Get the background genes .
4193	Run Enrichr .
4194	Create a cube .
4195	Render the SCosphere script .
4196	Render a torus filter .
4197	Plot the horizontal edges for the given script .
4198	Convert a cube script to a cube .
4199	Get the color values for a given color name .
4200	Validate a list of terms
4201	Turn a variable into a list
4202	write filter xml to script
4203	Parse LS3 loop .
4204	Merge two vertices .
4205	Adds holes to the script .
4206	Split vertices on non - Manifold faces .
4207	Create snap - matched borders filter .
4208	Translate a string to a vector .
4209	Rotate a script .
4210	Scale the given script .
4211	Function to calculate cylindrical co .
4212	Wrap a cylindrical script .
4213	Makes a bend segment
4214	deformation to curve
4215	Convert vc2d to tex
4216	Convert mesh to FCML .
4217	Run uniform resampling script
4218	Generate a Screened Poisson Regression .
4219	Computes the voronoi coefficients of a script .
4220	Adds a filter to the script .
4221	Add vertex quality filter
4222	Add a conditional face function to the script .
4223	Add vertex selection filter
4224	Evaluate a cylindrical script .
4225	Evaluate a spherical sphere .
4226	Joins the script into a string .
4227	Rename a layer .
4228	Change the filter script .
4229	Duplicate the current layer .
4230	Delete all elements in script .
4231	Handle an error .
4232	Initialize a filter script .
4233	Adds a new layer to the stack .
4234	Delete a layer from the stack
4235	save filters to file
4236	Run a script .
4237	Main function for building a map of circles
4238	Implements hausdorff distance filter
4239	Script for Poisson Disk Samples
4240	Add mesh element to the script .
4241	Script for clustering .
4242	Generate a flat plane filter
4243	Filters the per - triangle per - triangle per - triangle
4244	Script for Voronoi filter
4245	Measure the topological measure of the script .
4246	Parse the topology log file
4247	Parse the hausdorff distance log file .
4248	Generate a filter for the given script .
4249	Add Voronoi filter to the script .
4250	Generate cyclic rain wheel .
4251	Return the tangent operator for a given axis .
4252	Return the cross product of two vectors .
4253	Multiply two scalar values .
4254	Define new vertex attribute
4255	Flips the faces in the script .
4256	Script for point sets
4257	Run the taubin script .
4258	Generate a depth filter .
4259	Sort a polynomial file .
4260	Measure the topology .
4261	Measure all the geometries of the geometry .
4262	Measure dimension .
4263	Convert filename to lowercase .
4264	Monkey patch the request_class to ensure that the request_class is set to 64 .
4265	Get the configuration for a set .
4266	Configure uploads
4267	The configuration for this upload .
4268	Returns the URL for the uploaded file .
4269	Returns the full path to a file .
4270	Check if an extension is allowed
4271	Resolve the given basename .
4272	Extract the version info from the given file .
4273	Removes duplicates from objects .
4274	Get the difference between two objects .
4275	Return a sorted list of objects
4276	Trace memory usage event .
4277	The list of code events in the result list .
4278	The overhead of each object in the list .
4279	Compute the amount of memory over the current process .
4280	Profile the package .
4281	Profile the module .
4282	Profile the function .
4283	Run the profiling .
4284	Return a set of module names for the given package .
4285	Run func in separate process .
4286	Returns the type of a run object .
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the profile .
4290	Replace the argv with the current run object .
4291	Sample a signal .
4292	Insert a stack into the stack
4293	Adds sampleCount to the sample count
4294	Recursively format a tree .
4295	Returns a dictionary representation of the call tree .
4296	Return a dictionary with the package information .
4297	Profile the module .
4298	Profile the function .
4299	Transform profiling stats to a sorted list of strings .
4300	Profile the package
4301	Profile the module .
4302	Profile the function .
4303	Initialize the database .
4304	Show guest book .
4305	Add a new entry .
4306	Handler for profiling .
4307	Start the HTTP server .
4308	Get the HTML for the root directory .
4309	Extract the content of the other
4310	Handles GET requests .
4311	Do a POST request
4312	Send a response .
4313	Check if module is standard directory .
4314	Record a line event .
4315	Yield lines without the standard module .
4316	Update the heatmap .
4317	Return a list of lines with the skip map .
4318	Profile the package .
4319	Formats a heatmap file .
4320	Profile the module .
4321	Profile the function .
4322	Run the profiler .
4323	Run a function and return the result .
4324	Predict probabilities for X .
4325	Predict log probabilities .
4326	Fit the model to the data .
4327	Count the number of documents in analyzed_docs .
4328	Sort features .
4329	Limit features in the corpus .
4330	Fit X to X .
4331	Transform the input matrix .
4332	Convert to a scaling scalar .
4333	Wrapper for spark_fit
4334	Predict on X .
4335	Fit the regression model .
4336	Fit the model
4337	Fit the model
4338	Compute the score of a given matrix .
4339	Fit the model to the estimator .
4340	Compute the score of an estimator .
4341	Fit the k - means clustering .
4342	Predict on X .
4343	Predict on X .
4344	Check if the rdd s dtype is acceptable .
4345	Compute the vocab .
4346	Fit the model to the data .
4347	Fit the model to the SVD
4348	Transform X to SVD
4349	Decorator to iterate over an iterable .
4350	Block an iterator over the given dtypes .
4351	Convert an RDD into a BlockRDD .
4352	Apply a function to the RDD .
4353	Shape of the RDD .
4354	Convert the RDD to a numpy array .
4355	Apply a function to each column .
4356	Return the bitperm of a stat .
4357	Return True if path is only root write permissions .
4358	Check the configuration file .
4359	Read configuration from file .
4360	Run a command as a command .
4361	Execute a command .
4362	Execute a command over SSH .
4363	Validate the content and content - type parameters .
4364	Get headers from request .
4365	Get the body of the response .
4366	Returns the URL for the device .
4367	Get the URL for the webhook app .
4368	Convert a Pkt to text .
4369	Print out the MAC address .
4370	Discover all devices .
4371	Execute the device .
4372	Send a confirmation message .
4373	Called when a device is pushed .
4374	Execute a device .
4375	Run the scan .
4376	Convert a Transaction object to a Transaction object .
4377	Find the file in the ledgerrc path .
4378	Install compatibility .
4379	Extract the long description from the README . md file .
4380	Create a PreCalculatedTextMeasurer from a JSON file .
4381	Get the default widths .
4382	Generate a badge .
4383	Generate all supported Unicode characters .
4384	Encode characters with encodings .
4385	Returns a mapping of characters to their length .
4386	Serialize a measurer to a JSON file .
4387	Convolve a 2D image with a gaussian kernel .
4388	Gets the Gaussian kernel .
4389	Convert an image to grayscale .
4390	Run pyssim .
4391	Compute the SIM value between two images .
4392	Compute the SSIM between two images .
4393	Destroy the container .
4394	Set the code version .
4395	Get the status of the node .
4396	Print the current status
4397	Return the node corresponding to a connection .
4398	Try to bind to the server .
4399	Called when a connection is received .
4400	Handle incoming messages .
4401	Helper function to send a message to the client
4402	Determines if the given node should connect to this node .
4403	Connect to a node .
4404	Called when a connection is connected .
4405	Called when the connection is received .
4406	Called when a connection is disconnected .
4407	Add a new connection to the network .
4408	Drop a node from the pool .
4409	Send a message to the node .
4410	Destroy the connection .
4411	Adds an item to the queue .
4412	Put an item into the heap .
4413	Get the value of the element .
4414	Attempt to acquire a lock .
4415	Determines if a lock is acquired .
4416	Release a previously acquired lock .
4417	Decorator to check a function .
4418	Decorator for views that require access to the view .
4419	Set the connection parameters
4420	Create an Elasticsearch index .
4421	Migrate indexes to the index .
4422	Strip metadata from a report
4423	Save aggregated reports to Kafka .
4424	Extract XML from a zip or file object .
4425	Parse an aggregate report file .
4426	Convert a list of reports into a CSV file .
4427	Parse an aggregate report file .
4428	Get IMAP capabilities .
4429	Save the results to a CSV file .
4430	Generate a zip file with the given results .
4431	Email the DMARC results .
4432	Saves aggregate reports to Splunk
4433	Saves crimes to Splunk
4434	Decode a base64 string .
4435	Get the base domain for a given domain .
4436	Get the reverse DNS name of an IP address .
4437	Convert human readable timestamp to datetime .
4438	Download an IP address for a given IP address .
4439	Get information about an IP address .
4440	Convert an email message .
4441	Convert comma separated string to list .
4442	Parse a report file .
4443	Drain the connections from the client .
4444	Publish a message .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from a subscription .
4449	Send ping messages .
4450	Select the next server .
4451	Process an error message .
4452	Process an operation error .
4453	Generate connection parameters .
4454	Process a single ping .
4455	Process a message .
4456	Process informations from the server .
4457	Process the connection from the server .
4458	Flush the queue .
4459	Read loop forever .
4460	Calculate the coactivation of a dataset .
4461	Decode the given images .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Calculate the Pearson correlation coefficient .
4465	Dot product of two images .
4466	Select features based on feature selection .
4467	Get studies for a set of masks .
4468	Get feature order .
4469	Classify a set of regions .
4470	Classify data .
4471	Fit the model .
4472	Set class weights .
4473	Fit cross validation .
4474	Fit the model to the data .
4475	Average images within a set of regions .
4476	Get random voxels .
4477	Returns a list of topic words .
4478	Pearson correlation coefficient .
4479	Calculate fdr .
4480	Load activations from file .
4481	Create the image table
4482	Get a list of ids for a given feature .
4483	Add features to the feature table .
4484	Get feature names .
4485	Get feature counts .
4486	Load dataset from file .
4487	Save the feature table to a file .
4488	Retrieves the image data .
4489	Get feature data .
4490	Returns a list of feature names for the given features .
4491	Get the ids of all features in the dataset .
4492	Search features in the DataFrame .
4493	Get ids by expression
4494	Convert sparse data to sparse matrix
4495	Marks a function as deprecated .
4496	Apply a transformation to the input image .
4497	Convert a list of coordinates to a matrix .
4498	Apply a transformation to a FOC .
4499	Mask an image .
4500	Get mask from layers .
4501	Load images from filenames .
4502	Save an image to a file .
4503	Set logging level .
4504	Expand an address .
4505	Convert a string to a list of tokens .
4506	Parse an address .
4507	Finds near duplicate hashes .
4508	Convert dict to Python object .
4509	Get tick prices for a given ticker .
4510	Get data for a given ticker .
4511	Get list of bulk news
4512	Perform a HTTP request .
4513	Get the bearer token .
4514	Perform a request .
4515	Get tracks from a spot .
4516	Get information about an artist .
4517	Get an artist s albums .
4518	Get artist s top tracks .
4519	Get artist related artists .
4520	Get artists by ids
4521	Get information about a category .
4522	Get a list of playlists for a category .
4523	Get a list of categories .
4524	Get featured playlists .
4525	Get a listing of new releases .
4526	Get recommendations .
4527	Fetches a list of artists with the given ids
4528	Get album albums .
4529	Get all albums for the artist .
4530	Get the total albums for this artist .
4531	List of artists related to this artist .
4532	Get currently playing track .
4533	Get current player .
4534	Get available devices .
4535	List recently played tracks .
4536	Replace multiple tracks .
4537	Reorder tracks in a playlist .
4538	Create a new playlist .
4539	Get playlist s playlists .
4540	Get tracks .
4541	Get all tracks for the album .
4542	Generate OAuth2 URL .
4543	Get an album .
4544	Get an artist .
4545	Get a single track .
4546	Get a single user
4547	Get albums by ids
4548	Get artists .
4549	Perform search .
4550	Convert a string to an ID .
4551	Raises an exception if the object has not attribute .
4552	Create an instance of this class from a client .
4553	Generate OAuth2 URL .
4554	Return a dictionary of attributes .
4555	Returns the query parameters as a string .
4556	Builds the playlist .
4557	Get all tracks .
4558	Resume playback .
4559	Transfer a device to a device .
4560	Retrieve object from href
4561	Extract data from the object
4562	Convert or short month .
4563	Recursively update source urls
4564	Check if the current version is greater than the current version .
4565	Determine if the current branch is a dev version .
4566	Determines if the current version is deprecation .
4567	Backup the configuration file .
4568	Restore the backup .
4569	Check if line is to ignore .
4570	Parse command line options .
4571	Extract the base from element .
4572	Return a list of decoded strings .
4573	Return the status code of the request .
4574	Get the access status .
4575	Check domain validity .
4576	Check if the given domain is a subdomain
4577	Checks IP address validity .
4578	Check if ip is a valid IPv4 range .
4579	Validate url .
4580	Loads the current configuration .
4581	Prints a message to stdout .
4582	Download the given URL .
4583	Ensure entry management URL exists .
4584	Print the header .
4585	Process file .
4586	Print domain information .
4587	Displays the URL to the file .
4588	Print logo .
4589	Extracts domain from extracted_domain .
4590	Extract domain from file
4591	Returns a list of file names
4592	Returns a list of file urls
4593	Switches the given variable .
4594	Get the status of the user .
4595	Process the status file .
4596	Get the project s structure
4597	Create the directory if it doesn t exist .
4598	Delete all files in the directory .
4599	Convert a path to a list of configs .
4600	Load the configuration file .
4601	Download and install the production config .
4602	Download the IANA website .
4603	Downloads the PSL package .
4604	Download directory structure file .
4605	Merge upstream configs
4606	Loads the configuration file .
4607	Split a version string .
4608	Check the versions of two versions .
4609	Check if the project is cloned .
4610	Handles non - unique HTTP responses .
4611	Returns the output directory for analytics .
4612	Output a unified file
4613	Display status file .
4614	Returns True if the domain is not valid .
4615	Extract the public suffix database from the given line .
4616	Load the file from disk
4617	Return a regular expression .
4618	Ensure element is hierarchical .
4619	Load the IBA database .
4620	Return the referer for the given extension .
4621	Yield uri and referer from the url .
4622	Update the ia_domains_db .
4623	Mine to_get
4624	Retrieve data from file
4625	Backup the file
4626	Adds files to the network
4627	Remove file from mine
4628	Returns a list of all mined files
4629	Process the transaction .
4630	Get content of file
4631	Write content to file
4632	Displays the content of a given record .
4633	Update the content of the expiry date .
4634	Receive the referer of the given extension .
4635	Write header to file .
4636	Construct the header data .
4637	Returns the header
4638	Returns a PyFunce . OrderedDict .
4639	Extract the size from the header .
4640	Colorify data .
4641	Serialize data to JSON
4642	Returns the serialized data .
4643	Save the current state of the job .
4644	Calculate time difference between start and end time
4645	Formats the execution time .
4646	Returns a list of files to delete .
4647	Get the list of databases to delete .
4648	Delete all files in the database .
4649	Hash the file .
4650	Hash the data .
4651	Get the hash of the data .
4652	Executes the command .
4653	Remove key from main dict
4654	Rename key in main dict
4655	merge two dictionaries
4656	Write to a JSON file .
4657	Write the main entry to a yaml file .
4658	Replace the directory with the given path .
4659	Write data to file .
4660	Read the contents of the file .
4661	format the main list
4662	Recursively merge two dictionaries .
4663	Returns the list of elements that match the regex
4664	Matches the data .
4665	Replace occurrences with replace_with .
4666	Count the number of tests .
4667	Calculate total percentage .
4668	Output the percentage of files .
4669	Checks if url is valid
4670	Check if the given domain is valid .
4671	Check if this element is a subdomain .
4672	Checks the validity of the domain .
4673	Format historical formating error .
4674	Retrieve the database .
4675	Save the database to the database
4676	The timestamp of the current database .
4677	Get the content of the database
4678	Check if the current database is present
4679	Retrieve information about whois_db
4680	Save the credentials to the whois database .
4681	Check if the user is in the database .
4682	Check if file is older than epoch
4683	Returns the expiration date of the file
4684	Adds a timestamp to the database .
4685	Set up travis permissions .
4686	Commit to Travis
4687	Searches the namespace for the current namespace
4688	Calls whois_server
4689	Checks the status of a URL .
4690	Get the referer of the domain
4691	Get the current object
4692	Return a list of standard library paths .
4693	Return a list of standard package names .
4694	Iterate over unused import lines .
4695	Generator for unused import module .
4696	Yield line numbers from imported import star .
4697	Iterate over imported import star usage messages .
4698	Yield line numbers from messages .
4699	Generator for duplicate key line numbers .
4700	Convert a list of messages into a dictionary .
4701	Check source .
4702	Extract the package name from a line .
4703	Implements multiline import statement .
4704	Is a multiline statement?
4705	Removes imports from an import statement .
4706	Break up an import statement .
4707	Removes unused imports .
4708	Convert a list of messages into a dictionary of message messages .
4709	Removes undefined names from a line .
4710	Removes duplicate key from line numbers .
4711	Determine if a given line contains a key .
4712	Check if value is a literal or name .
4713	Iterate over the lines of the source .
4714	Filter useless lines .
4715	Return the indentation of a line .
4716	Return the ending of a line .
4717	Remove unused imports from source .
4718	Split comma separated string .
4719	Check if filename is a python file .
4720	Determine if filename is a exclude file .
4721	Find files in filenames .
4722	Run autoflake .
4723	Reads the ObtainLeaseResponsePayload payload from the input stream .
4724	Write this lease to a stream .
4725	Write a CancelRequestPayload to the output stream .
4726	Reads a CancelResponsePayload from the input stream .
4727	Create a Name object from name_type and name_type .
4728	Reads the Digest object from the input stream .
4729	Write the digest to the stream .
4730	Create a new Digest object .
4731	Reads the information from the given stream .
4732	Write the application data to the stream .
4733	Create an ApplicationSpecificInformation object .
4734	Reads the Derivation Parameters from a stream .
4735	Write the Derivation Parameters to a stream .
4736	Reads the request payload from the input stream .
4737	Write this request to a stream .
4738	Reads the response payload from the input stream .
4739	Write the response to a stream .
4740	Read SignatureVerifyRequest payload .
4741	Write the network to a stream .
4742	Read SignatureVerifyResponse payload .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Gets attributes from a managed object .
4747	Gets the attribute from a managed object .
4748	Sets attributes on a managed object .
4749	Sets the attribute on the managed object .
4750	Determines if the given policy is allowed for the given object .
4751	Write the decrypted request payload to a stream .
4752	Creates a new key with the given value .
4753	Set the configuration setting .
4754	Load the server configuration file .
4755	Process a bind parameter .
4756	Return a list of CryptographicUsageMask .
4757	Reads a long integer value from the stream .
4758	Write a LongInteger to the stream .
4759	Validate that the value is valid .
4760	Read a big integer from the stream .
4761	Write a BigInteger to the stream .
4762	Validate that the field is an integer .
4763	Validate the field .
4764	Read the boolean value from the stream .
4765	Write the boolean value to the stream .
4766	Write a Boolean object to the stream .
4767	Validate that the value is a bool .
4768	Read Intervals from the stream .
4769	Validate the interval .
4770	The key wrapping data .
4771	Set the key wrapping data .
4772	Validate the key .
4773	Validate the secret data .
4774	Validate the data .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to a string .
4777	Get bit mask from enumerations .
4778	Returns a list of enumerations that match the given bit mask .
4779	Determines if an enumeration is a bit mask .
4780	Reads a KeyPairRequest from the input buffer .
4781	Write the template to a buffer .
4782	Reads the CreateKeyPairResponse payload from the input buffer .
4783	Write this CreateKeyPair to a file .
4784	Reads the attributes from the input buffer .
4785	Write this attribute list to the output buffer .
4786	Reads the getAttributeListResponse payload from the input buffer .
4787	Write this GetAttributeListResponse to a file .
4788	Return a list of all files in the directory
4789	Scan policy files and remove them from policy_directory .
4790	Run the operation policy monitor .
4791	Get the certificate from the connection .
4792	Returns the extended key usage of a certificate .
4793	Extract common names from a certificate .
4794	Get client identity from certificate .
4795	Reads the create request payload .
4796	Write this request to a buffer .
4797	Reads the create response payload from the input buffer .
4798	Write the response payload to the output buffer .
4799	Convert a Python object into a CoreKey object .
4800	Reads the EncryptedResponsePayload payload from the input stream .
4801	Reads the DeriveKeyRequest payload .
4802	Write this Key to a buffer .
4803	Determines if an attribute is supported .
4804	Check if the attribute is deprecated .
4805	Determines if an attribute is applicable to the given object type .
4806	Determines if an attribute is multivalued .
4807	Get valid value from config file .
4808	Read CheckResponsePayload from the input stream .
4809	Write the check response to a stream .
4810	Reads the attribute reference .
4811	Write the attribute reference to the output buffer .
4812	Read attributes from the input stream .
4813	Write the attributes to the output stream .
4814	Reads the nonce from the input stream .
4815	Write the nonce to the stream .
4816	Read username and password credential credential from file .
4817	Write the username and password credentials to the stream .
4818	Read DeviceCredential credentials from a stream .
4819	Write the IP address to a stream .
4820	Read credentials from a stream .
4821	Write credential to file .
4822	Reads MACSignatureKeyInfo from a stream .
4823	Write the MAC signature key information to the stream .
4824	Reads key wrapping data from a stream .
4825	Write the network to a stream .
4826	Reads a KeyWrappingSpecification from a stream .
4827	Write the network to a stream .
4828	Reads the extension information from the given stream .
4829	Write the extension information to the stream .
4830	Creates an extension .
4831	Reads a RevocationReason from the stream .
4832	Write the revocation code to the stream .
4833	Validate the revocation code .
4834	Reads the ObjectDefaults object from the input buffer .
4835	Write the object defaults structure to the output buffer .
4836	Reads the DefaultsInformation object from the input buffer .
4837	Write the DefaultsInformation structure .
4838	Read the RNGParameters object .
4839	Write the RNG parameters to a file .
4840	Reads the ProfileInformation object from the input buffer .
4841	Write the ProfileInformation structure to the output buffer .
4842	Write the ValidationInformation structure to a file .
4843	Reads the CapabilityInformation object from the input buffer .
4844	Write the capabilities to a buffer .
4845	Stops the connection .
4846	Start the connection service .
4847	Reads the LocationPayload payload .
4848	Write the template to a buffer .
4849	Reads the LocationResponse payload from the input buffer .
4850	Write the response payload to the output buffer .
4851	Generate a symmetric key .
4852	Create an asymmetric key pair .
4853	Compute the HMAC using the provided data .
4854	Encrypt the given plaintext using the specified encryption algorithm .
4855	Encrypts a symmetric key .
4856	Encrypts a plaintext using the encryption algorithm .
4857	Decrypts asymmetric ciphertext using asymmetric algorithm .
4858	Create an RSA key pair .
4859	Derives a key from this key .
4860	Load RSA private key from bytes .
4861	Verifies a signature .
4862	Read SignResponsePayload from the input stream .
4863	Write the signature data to the stream .
4864	Reads the usage request from the input stream .
4865	Convert protocol version to KMIP version .
4866	Reads the protocol version from the input stream .
4867	Write the protocol version to the stream .
4868	Read authentication from a stream .
4869	Write the authentication struct to the stream .
4870	Reads a poll request payload .
4871	Reads a Certificate object from the given stream .
4872	Write certificate to a stream .
4873	Authenticate with the SLUGS URL .
4874	Reads the response payload .
4875	Write the archive to the given stream .
4876	Run the TLS handshake .
4877	Reads the RekeyResponse payload .
4878	Determines if a profile is supported .
4879	Derives a key from the server .
4880	Get attributes from a device .
4881	Get a list of attributes for a device .
4882	Execute a batch query .
4883	Sign data .
4884	Open the connection .
4885	Close the connection .
4886	Create a new Key .
4887	Create a key pair .
4888	Register a managed object .
4889	Create new rekey .
4890	Derives a key from the object .
4891	Locate a collection .
4892	Checks the status of a given UUID .
4893	Gets a specific KmipOperation .
4894	Get attributes of a Kmip device .
4895	Activate a Kmip device .
4896	Revokes a revocation request .
4897	Calculate MAC .
4898	Builds a CryptographicParameters object from a dictionary .
4899	Builds an EncryptionKeyInformation object from a dictionary .
4900	Build a MACSignatureKeyInformation object from a dictionary .
4901	Builds a key wrapping specification .
4902	Build the common attributes for this operation .
4903	Builds a name attribute .
4904	Reads the query payload from the input buffer .
4905	Write the query payload to the output buffer .
4906	Write the network information to a byte buffer .
4907	Reads the getAttributesResponse payload .
4908	Write this getAttributesResponse to a buffer .
4909	Get a single entry point
4910	Get named ephemeris named group
4911	Get all distribution points for a given group
4912	Loads the module .
4913	Create an entry point from a string .
4914	Run livereload .
4915	Generate project files .
4916	Generate a controller .
4917	Generate action .
4918	Generate form .
4919	Generate the model .
4920	Generate macro .
4921	Create a new directory .
4922	Rewrite a file with a project name .
4923	Convert a number of seconds to a string .
4924	Ensure the URL is valid .
4925	Encode something as a string .
4926	Decode a string .
4927	Convert a function into a JSON response .
4928	Returns an absolute URL for a given endpoint .
4929	Load the configuration from the environment
4930	Signin a user .
4931	Get the current user
4932	Create the Flask application .
4933	Register jinja environment .
4934	Register blueprint .
4935	Register error handler .
4936	Register hooks for the app .
4937	Write dataframe to a CSV file .
4938	Extract data from CSV reader .
4939	Serializes a dataframe to a writer .
4940	Deserializes a DataFrame from a DataFrame .
4941	Update this object from a dataframe .
4942	Update this object from raw_data .
4943	The URL for the contents of the contents .
4944	Add data from a dataframe .
4945	Adds a new data from a raw data type .
4946	Opens the dataset .
4947	Read the dataset as binary .
4948	Read the entire dataset as text .
4949	Deserialize data into a Pandas DataFrame .
4950	Get intermediate dataset .
4951	Get all experiments in a workspace
4952	Get all datasets in a workspace
4953	Get information about a dataset
4954	Publish a function to a workspace .
4955	A decorator to mark a function as published .
4956	Decorator for annotations .
4957	Decorator to annotate a return type .
4958	Decorator for attaching a function to a function .
4959	Find all globals in code .
4960	Returns a copy of the pen
4961	Lookup a color from a string .
4962	Draws the region .
4963	Cubic Bernstein extension .
4964	Cubic Bernstein equation
4965	Build and return a list of choices .
4966	Returns a function that accepts a list of command options .
4967	Decorator to register an item processor function .
4968	Compose dynamic sitetree .
4969	Initialize the sitetrees .
4970	Empty the site .
4971	Get an entry from cache .
4972	Update an entry in the cache
4973	Sets an entry in the cache .
4974	Initialize the cache .
4975	Resolve the given language alias .
4976	Returns True if the current app is an admin .
4977	Calculate the depth of an item .
4978	Get the current item for the given alias .
4979	Resolve a sitetree item .
4980	Initialize the sitetree .
4981	Get the attribute of the current page .
4982	Get the ancestors of the current item
4983	Render the menu .
4984	Check to see if the item is logged in .
4985	Returns a list of breadcrumbs .
4986	Generate a sitetree .
4987	Render the children of a given item
4988	Get the children of the given item .
4989	Updates the has_children property of the tree item
4990	Filter items based on navigation type .
4991	Get the parent item of a tree item .
4992	Call tree_climber
4993	Resolve a variable .
4994	Returns a sitetree .
4995	Return the sitetree nodes .
4996	Render sitetree breadcrumbs .
4997	Return a sitetree .
4998	Render the given tree items and return the rendered content .
4999	Create a parser for a tag .
5000	Get a URL name for a model .
5001	Re - register the tree admin .
5002	Redirect to the redirect handler .
5003	Redirect to the user .
5004	Redirect to the admin .
5005	Redirect the item to the correct form .
5006	Overrides the default form field .
5007	Get the tree for the given item .
5008	Moves an item
5009	If the tree is changed save it .
5010	Returns the urls for this site .
5011	Returns a JSON - serializable response .
5012	Create a tree model
5013	Creates a new item
5014	Import the app s sitetree module .
5015	Get the model class for a given settings entry .
5016	Create a Config instance from a mapping .
5017	Create a Config instance from a python file .
5018	Load a configuration from a TOML file .
5019	Create a Config instance from an object .
5020	Generate attributes for a span .
5021	Create http headers for a new span .
5022	Determine if the current span is running .
5023	Starts the tracing service .
5024	Stop tracing .
5025	Update annotations with extra annotations .
5026	Add SAM annotation .
5027	Override span name .
5028	Create an Endpoint instance .
5029	Copies an endpoint with a new service name .
5030	Convert this span into a v1 span .
5031	Encode a list of spans .
5032	Convert a protobuf Span to protobuf .
5033	Convert hexadecimal ID to bytes .
5034	Returns the protobuf Span for the given kind .
5035	Convert an endpoint into a zipkin Endpoint .
5036	Convert annotations to protobuf .
5037	Create an annotation object .
5038	Create a BinaryAnnotation object .
5039	Create an Endpoint instance .
5040	Copies an endpoint with a new service name .
5041	Build an annotation list .
5042	Build a list of binary annotations .
5043	Create a new span .
5044	Convert a Thrift span to bytes .
5045	Encode a list of bytes .
5046	Detect the Span version from the message .
5047	Convert spans to output encoding .
5048	Deprecated .
5049	Encode a v2 span .
5050	Create a JSON endpoint for the given endpoint .
5051	Encode a span .
5052	Decodes a list of spans .
5053	Convert a Thrift endpoint into an Endpoint instance .
5054	Decode thrift annotations .
5055	Convert the thrift binary annotations into a dict .
5056	Decode a Thrift span .
5057	Converts a trace_id to a string .
5058	Convert an unsigned long to lower hex .
5059	Write a long value to the buffer .
5060	This function is used to fix up the day of the month .
5061	Set the transaction_code of a tag .
5062	Set the ID of the IM ID tag .
5063	Set the TNR for a tag .
5064	Parses the input string .
5065	Parse a file or file .
5066	Join a string .
5067	Decode a response to a text .
5068	Raise a warning if the rate limit exceeded .
5069	Make a request to the API .
5070	Get bot info .
5071	Get bots .
5072	Read a term from the buffer .
5073	Write a message to the output .
5074	Close the input and out files .
5075	Decode a string .
5076	Encode a term .
5077	Add a source address to the network .
5078	Send all pending messages to the queue .
5079	Set the callback function to be invoked when the client receives a callback .
5080	cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given the TYPES and SCOPES in a given TIMEOUT
5083	construct a SOAP XML string given a prepared SoapEnvelope object
5084	Discover systems using WS discovery
5085	Returns the instance of the tagged item manager .
5086	Get all child relations for a given model .
5087	Get all parent m2m relationships for a given model .
5088	Saves the relation to the database .
5089	Deserialize a dict of child objects .
5090	Validate all unique forms .
5091	Check if all formsets have been changed
5092	Returns a new address with valid checksum .
5093	Generate a checksum .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt the user to enter a seed .
5097	Validate a list of fragment fragments .
5098	Get the key for a given index .
5099	Returns the key for the given address .
5100	Creates a new key iterator .
5101	Create a Kerl .
5102	Insert a sequence of tokens into the state .
5103	Squeeze a number of tokens .
5104	Transforms the state of the state .
5105	Get digests .
5106	Get a list of private keys .
5107	Prepare a multisig transfer command .
5108	Concatenate two strings .
5109	Convert an integer to a list of integers .
5110	Add two numbers .
5111	Full add_trits .
5112	Output seed .
5113	Find transactions for the specified bundles .
5114	Get a list of inputs .
5115	Get new addresses .
5116	Returns a list of Transfers
5117	Promote a transaction .
5118	Recursively replay a bundle .
5119	Send a transfer command .
5120	Send a list of trytes to the device .
5121	Resolve a URI .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Seed a response .
5127	Add digests .
5128	Get a multisig address .
5129	Generate an iterator over the keys .
5130	Convert a digest to an address .
5131	Generate an address for the given key iterator .
5132	Find transaction objects .
5133	Iterate over addresses used by the adapter .
5134	Gets the bundles from the given transaction hashes .
5135	Check if codec is correct .
5136	Get codec info .
5137	Encode the given input .
5138	Decode a string .
5139	Find addresses in the database .
5140	Add a route .
5141	Create a Transaction object from a string .
5142	Convert this message to a JSON - compatible dictionary .
5143	Returns the serialized representation of this signature .
5144	Set the state of the transaction .
5145	Get all the messages in this group .
5146	Return a list of tuples .
5147	Groups the transactions in the chain .
5148	Recursively discover commands from a package .
5149	Execute a request .
5150	Apply filter .
5151	Get the URL for a job .
5152	List of errors .
5153	Returns True if validation is valid .
5154	Generator for validators .
5155	Get errors for bundle signatures .
5156	Validate the group signature .
5157	Traverse a bundle .
5158	Start IOTA API client .
5159	Generate a random seed .
5160	Get the digest of the fragment .
5161	Sign a bundle s inputs .
5162	Print a pretty representation of the object .
5163	Insert a sequence of tokens into the KIT .
5164	Squeeze a list of trits .
5165	Replace the given context with the given context .
5166	Get security level .
5167	Increment the legacy tag counter .
5168	Return the tag of the transaction .
5169	Adds a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign the inputs of the bundle .
5172	Sign the bundle at the given start_index .
5173	Create input transactions .
5174	Convert value to standard unit .
5175	Decompress G1 .
5176	Prime a field by n .
5177	Constructor from a JSON file .
5178	Find words that match the given category .
5179	Find a synonym for a word
5180	Expand abbreviations in text .
5181	Split text into a list of descriptions .
5182	Returns a list of categories
5183	Generate a new colour .
5184	Plot the component .
5185	Create a builtin class from a builtin name .
5186	Retrieve a builtin time scale by name .
5187	Generate a Color instance .
5188	Create a Color object from an image .
5189	Create a legend from a CSV file .
5190	Convert the table to a CSV string .
5191	Returns the maximum width of the list
5192	Get a decorator from the list .
5193	Get an attribute from c .
5194	Return the component of a given colour .
5195	Plot the list .
5196	Create component from text .
5197	Build a summary of the component
5198	Deprecated .
5199	Process a single row .
5200	Parse a CANstrat string .
5201	returns True if all elements are equal
5202	Return a list of all unique thicknesses .
5203	Generate a list of Intervals from top to top .
5204	Clean latitudinal data .
5205	Construct a RangeCollection from a PETREL file .
5206	Build a list of Intervals from a dictionary .
5207	Create a Striplog object from a CSV file .
5208	Create a TimeSeries from an image .
5209	Create a Striplog object from a Log object .
5210	Constructor from a LAS3 string .
5211	Read Intervals from a Canstrat file .
5212	Returns a copy of this Striplog .
5213	Write the list to a CSV file .
5214	Convert the histogram to a LHS3 section .
5215	Plot the axis .
5216	Get the data for a given field .
5217	Extract data from a basis set .
5218	Searches for a search term .
5219	Return a list of all occurrences that overlap .
5220	Return a list of all gaps in the table .
5221	Prune the strip of the strip .
5222	Return a copy of the strip .
5223	Fill self with gaps .
5224	Return a new Striplog with the union of two Striplog objects .
5225	Intersect two Striplog objects .
5226	Merge overlapping segments .
5227	Plot the histogram .
5228	Return a new Striplog .
5229	Crop the list at the given extent .
5230	Run a set of test results .
5231	Convert hex string to name .
5232	Read a log - likelihood from an image .
5233	Override default formatter .
5234	Returns a list of jobs with the given prefix .
5235	Parse a job HCL .
5236	Update a token
5237	Returns a list of all the tokens in the account .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Health information about the deployment .
5241	Drain a node .
5242	Drain a node with a drain spec .
5243	Enables an eligible node .
5244	List files in the repository
5245	Get a stream of data .
5246	Get a file
5247	Join a single agent .
5248	Updates the servers list
5249	Force a node to leave .
5250	Get a list of nodes matching the prefix .
5251	Get all evaluations .
5252	Returns a list of namespace namespaces
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Change a stable job .
5258	Deletes a job .
5259	Get the current configuration .
5260	Delete a peer .
5261	Get all deployments that start with prefix .
5262	Get a random mutator
5263	Get the mutator for the given object .
5264	Get a string polyglot attack .
5265	Fuzz the given object .
5266	Safely decode a string .
5267	Start serving .
5268	Stop the server .
5269	Convert a file to a static HTML file .
5270	Serve the client .
5271	Fuzz decorator .
5272	Spawn a new process .
5273	Get the output of the process .
5274	Finish the process .
5275	Close the multiprocessing process .
5276	Start the plugin .
5277	Execute the given object .
5278	Decorator for JSON encoding .
5279	Build a random string .
5280	Build a string representation of the expression .
5281	Build the QR code .
5282	Build a random value
5283	Build an OptionGram .
5284	Recursively build a definition .
5285	Build the grammar .
5286	Shut down the process .
5287	Run and monitor process .
5288	Start the process .
5289	Generate a random floating point number .
5290	Add definition to cat .
5291	Add def_name to cat_group .
5292	Generate a gramfuzz .
5293	Recursively fuzz the elements of an element .
5294	Returns the fuzzed string .
5295	Get fuzzed data
5296	Decorator for mutating objects .
5297	Signal handler .
5298	Handles the quit command .
5299	Handle a pause command .
5300	Resume execution .
5301	Stop the child process .
5302	Handles restart command .
5303	Returns a list of SkypeEvent objects
5304	Set the mood of this user .
5305	Set user avatar .
5306	Get information about a URL .
5307	Get a single contact
5308	Get a single user
5309	Gets a list of bots .
5310	Get bot by id
5311	Search for a user .
5312	Returns a list of SkypeRequest objects
5313	Create a new instance from a raw dict .
5314	Merge two dicts .
5315	Merge obj into cache .
5316	Make a sync state call
5317	Reads the user s token file
5318	Write token to file
5319	Verify token is valid
5320	Refresh Skype token
5321	Get user id
5322	Get a new token
5323	Synchronize all SkypeEndpoint objects
5324	Check if a user exists .
5325	Authenticate using the given token .
5326	Authenticate to Skype .
5327	Set the messaging service configuration
5328	Ping a user
5329	Gets the current chats .
5330	Get a single chat
5331	Create a new member
5332	Extract user ID from URL .
5333	Get chat to chat .
5334	Iterate over a function yielding each result .
5335	Return unicode text without reason
5336	Return the first handler that matches the given text .
5337	Parse the given text .
5338	Post as a dict for serializing
5339	Load a YAML file .
5340	Export metadata .
5341	Turn metadata into JSON
5342	Match the pattern .
5343	The list of items .
5344	Return list of sublists matching the given pattern .
5345	Change the start of the pattern .
5346	Returns a list of arguments .
5347	Returns a list of all arguments matching the given pattern .
5348	Parses a list of strings .
5349	Convert a trie into a regular expression .
5350	Check the index for the given key .
5351	Insert string at index .
5352	Partition a character into a tuple .
5353	Return a list of spans for the given type .
5354	Shrink the overlapping spans .
5355	Update the span of the given index .
5356	Calculate the number of nesting levels .
5357	Return the shadow of the span .
5358	Return the shadow of the link .
5359	Convert the type to a list of spans .
5360	Deprecated .
5361	The list of parameters .
5362	The parser functions .
5363	The list of templates .
5364	The list of wikilinks .
5365	The list of comments .
5366	The list of external links .
5367	The list of sections .
5368	Returns a list of Table objects .
5369	r Return a list of lists matching the given pattern .
5370	Returns a list of Tag instances .
5371	Iterate over the spans of the given type .
5372	Returns the list of ancestors of this document .
5373	Return the first parent of the given type .
5374	Returns the mode of a list .
5375	Get the first argument from a list of arguments .
5376	Normalize the name .
5377	Removes the first of arguments from the argument list .
5378	Removes duplicate arguments .
5379	Sets the argument with the given name .
5380	Get the argument with the given name .
5381	Check if the arguments have the given name and value .
5382	Delete the argument with the given name .
5383	Convert a CRS code to a string .
5384	Searches an ellipsoid .
5385	Read and parse a URL .
5386	Load a GeoJSON object from a file .
5387	Create a crs object from an EPSG code .
5388	Creates a crs object from an ESRI code .
5389	Create a crs object from an SR code .
5390	Convert text format to CRS .
5391	Write the record to the file .
5392	Read a VLR instance from a stream .
5393	Parse GeoTiff keys from vlrs .
5394	Parse geotiff tags .
5395	Returns the signedness for a given extra dimension .
5396	Return the ID for a given extra dimension type .
5397	Create a new PointRecord from another point record .
5398	Copy fields from another record .
5399	Append zeros to the array
5400	All dimension names .
5401	Return a Vector instance with zeros .
5402	Read points from a stream .
5403	Create a PointCollection from a compressed compressed buffer .
5404	The scaling dimension .
5405	The scaling dimension .
5406	Scale dimension .
5407	Add a new extra dimension .
5408	Write the points data to the given stream .
5409	Write to a file .
5410	Write the file to the specified destination .
5411	Build dtypes for point formats .
5412	Build dtypes for point formats .
5413	Convert numpy dtype to point format .
5414	Returns the minimum file version for point format .
5415	Determine if point format ID is compatible with the given version .
5416	Returns a list of vlr instances
5417	Removes all vlrrs from the list
5418	Read list of VLR objects from a stream .
5419	Check if all files have the same point format id .
5420	Check if all files have the same dtype .
5421	Check that the file signature is correct .
5422	Read a header from the stream .
5423	Read the VRL list from the stream .
5424	Read points from the vlrs file .
5425	Read compressed points data .
5426	Read the internal waveform packet .
5427	Read evlrs from the stream .
5428	Warn if the stream is at the end of the stream .
5429	Opens alas reader .
5430	Read alas file
5431	Create a LandsData instance from header .
5432	Create alas dataset .
5433	Convert a point format to a file .
5434	Merge multiple las files into one .
5435	Write the givenlas to the buffer .
5436	Returns the date of the object .
5437	Set the creation date .
5438	The minimum coordinates of the mesh .
5439	Set the minimum value .
5440	The maximum values of the domain .
5441	set max values
5442	The scales of the scale .
5443	A list of tuples representing the positions of the image .
5444	Read the file version from the given stream .
5445	Convert a header to a new header .
5446	Unpack the given source array into a dtype .
5447	Pack a sub - field array into a sub - field array .
5448	Returns a list of dimensions that are missing .
5449	Returns a dictionary of the sub - fields .
5450	The number of bytes in bytes .
5451	Return True if all dimensions have a waveform packet .
5452	Example demo .
5453	Calculate the checksum of a command .
5454	Print a hex string .
5455	Verify the response and strip the checksum .
5456	Lists the set bit numbers in a string .
5457	Generate a query string .
5458	Example demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Send a disarm command .
5462	Clear the alarm command .
5463	Turn the output of an output .
5464	Keep the connection alive .
5465	Monitor the status of the device .
5466	Close the stream .
5467	Purge the database from the database .
5468	Guess file type
5469	Get file ID for given path .
5470	Get a notebook .
5471	Create a notebook model from a record
5472	Get a directory .
5473	Convert a list of file records into a dictionary .
5474	Create a directory model from a record .
5475	Create a file model from a record .
5476	Save a notebook .
5477	Save a file .
5478	Rename a file .
5479	Delete a file .
5480	Ensure user exists .
5481	Purge a user from the database .
5482	Create a new directory .
5483	Check if a table is in a given directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	List files in a given directory .
5487	List all directories in a given directory .
5488	Generate a where clause for a file .
5489	Query for file creation .
5490	Return a list of file fields .
5491	Get a single file from the database .
5492	Download a file .
5493	Get file ID from user .
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file at the specified path .
5497	Generate the notebooks .
5498	Purge remote checkpoints from the database .
5499	Generate checkpoints from engine .
5500	Generate the notebooks .
5501	Reencrypt a row .
5502	Reencrypt user content .
5503	Derives a single Fernet key from a password .
5504	Derives the fallback Fernet keys from a list of passwords .
5505	Decrypts a single password .
5506	Memoizes a single argument .
5507	Get the name of a column .
5508	Convert a row to a dict .
5509	Convert a row to a dictionary .
5510	Create a remote notebook checkpoint .
5511	Create a remote checkpoint .
5512	Delete a checkpoint .
5513	Get content of a remote checkpoint .
5514	List all checkpoints in the specified path .
5515	Rename all registered checkpoints .
5516	Delete all checkpoints at path .
5517	Purge all remote checkpoints from the database .
5518	Resolve the given API path .
5519	Applies a prefix to the model .
5520	Decorator for path dispatch .
5521	Decorator for kwargs .
5522	Decorator for paths between two backends .
5523	Called when a manager has changed .
5524	Get a single resource .
5525	Normalize API path .
5526	Split an API file path .
5527	Returns a base64 encoded string with the given data .
5528	Read a base64 string .
5529	Decode a base64 string .
5530	Decode a base64 string from base64 .
5531	Return a list of all directories of a given path .
5532	Decorator to raise 404 errors .
5533	Create a user .
5534	Separate files and files into directories and files .
5535	Recursively walk a list of directories .
5536	Iterate over all files in the given manager .
5537	Walk all files with content
5538	Reencrypt multiple users .
5539	Reencrypt a single user .
5540	Unencrypt multiple users .
5541	Unencrypt a single user .
5542	Create a temporary alembic . ini file .
5543	Upgrade a database .
5544	Sanitizes the given block .
5545	Queues an instance of the given type .
5546	Load instances for given embed_type .
5547	Insert instance into block
5548	Load data from the embed .
5549	Validate data .
5550	The admin page .
5551	Convert the object to a dictionary .
5552	Hide the logged in fields .
5553	Remove fields from the request .
5554	Handles GET requests .
5555	Returns a queryset of published items .
5556	Returns the queryset of published_at .
5557	Returns the value of nullBooleanField .
5558	Validate widget .
5559	Validate zone .
5560	Validate that the given string is a valid UUID .
5561	Returns the user s permissions
5562	Modify permissions .
5563	Validate author data .
5564	Validate and save a zone
5565	Get data .
5566	Prepare data .
5567	Render the template .
5568	Get the settings for this Integration .
5569	Respond to Facebook .
5570	Get the settings for an integration .
5571	Update the settings for an integration .
5572	Signup a user .
5573	Convert a list of strings into a string .
5574	Render a zone
5575	Save the featured image .
5576	Save the given section .
5577	Get the file extension .
5578	Returns the url of the media .
5579	Save the image .
5580	Saves the thumbnail of the given image .
5581	The mysql connection object
5582	Get a bandwidth limited stream .
5583	Read amount of bytes .
5584	Consume an AMT .
5585	Schedule a consumer to consume .
5586	Process a scheduled consume request .
5587	Gets the projected rate .
5588	Records the consumption rate .
5589	Submit a file to a bucket .
5590	Poll for a transfer .
5591	Get callbacks for a given transfer .
5592	Filters a dictionary with whitelisted keys .
5593	Decrement the counter .
5594	Finalize the queue .
5595	Check if filename is a special file
5596	Acquire a tag .
5597	Release the acquired lock .
5598	Adjust the size of the chunksize .
5599	Queues a write task to a file .
5600	Get a write task for a given file object .
5601	Return the appropriate download output manager .
5602	Downloads an object from S3 .
5603	Write data to file .
5604	Request a list of write requests .
5605	Check if a file object is seekable .
5606	Submit a file object to a bucket .
5607	Submit a transfer to a bucket .
5608	Copy a source to a bucket .
5609	Delete a bucket .
5610	Shutdown the server .
5611	Cancel a message .
5612	Wait for all pending transfer candidates .
5613	Read amount from file object .
5614	Wrap the given data to a file object .
5615	Return the appropriate upload_input_manager for this transfer .
5616	Sets the given exception .
5617	Set the result .
5618	Set the exception .
5619	Return the result of the job .
5620	Cancel the job .
5621	Submits a task to the executor .
5622	Add a callback to be called when the task is done .
5623	Register a failure cleanup function .
5624	Announce the job .
5625	Submit a task to the executor .
5626	Add a callback to the future .
5627	Upload a file to S3 .
5628	Download a file from a bucket .
5629	Iterate over step function decorators .
5630	Return the first argument of the decorated decorator .
5631	Refactor a step .
5632	Iterate over step function decorators .
5633	Try to parse the arguments of a decorator .
5634	Refactor a single step .
5635	Select the python parser .
5636	Gets a list of users .
5637	Creates a new person .
5638	Updates a membership .
5639	Deletes a membership .
5640	Get the catfact
5641	POST webhook to a room
5642	Gets a list of people .
5643	Deletes a membership .
5644	Validate base_url .
5645	Check if string is a web URL .
5646	Opens a local file .
5647	Raise TypeError if o is not of acceptable types .
5648	Given a list of dictionaries and a list of dictionaries return a dict with the keys that are None .
5649	Check response code .
5650	Convert json_data to dict
5651	Convert date string to datetime .
5652	Get a list of users .
5653	Creates a new team .
5654	Updates a room .
5655	Deletes a room .
5656	Get a list of users .
5657	The creation date of the team .
5658	Get access token from environment variables .
5659	Create a new event .
5660	Updates a webhook .
5661	Deletes a webhook .
5662	Ensure the next URL is valid .
5663	Sets the wait_on_rate_limit flag .
5664	Update the headers .
5665	Return an absolute URL .
5666	Send a request to the API .
5667	Make a GET request .
5668	Get all pages from a given URL .
5669	Get items from a url .
5670	Send PUT request .
5671	Send a DELETE request .
5672	Creates a new login
5673	Get a list of mentioned people .
5674	Create a new message .
5675	Deletes a message .
5676	Create a new user .
5677	Gets a single person .
5678	Updates a person .
5679	Deletes a person .
5680	Gets the current user .
5681	Gets a list of users .
5682	Get a list of users .
5683	Create a new service .
5684	Updates a team .
5685	Deletes the specified team .
5686	Get a list of actors .
5687	Serialize data into a tuple .
5688	Get an authorization token .
5689	The last activity of the user .
5690	Process webhook post request .
5691	Get the public url of the ngrok client .
5692	Delete webhooks with given name .
5693	Create a webhook .
5694	Create webhook .
5695	Connect to the console .
5696	Read all telegram messages .
5697	Read messages from the queue .
5698	Create a DSSPR protocol object .
5699	Create a DSM reader .
5700	Create a TCP connection .
5701	Handle data received from the server .
5702	Called when the connection is lost .
5703	handle telegram
5704	Validate telegram data .
5705	Get version from file
5706	Ensure that the Python version is a python version .
5707	Find all packages in the given directory .
5708	Create a command class .
5709	Returns a Command class for the given function .
5710	Run a shell command .
5711	Ensure that the targets exist .
5712	Wraps a list of commands into a single command .
5713	Returns a FileHandler for the given package specification .
5714	Get data files from data specs .
5715	Get package data .
5716	Compile a regular expression .
5717	Iterate over a path .
5718	Translate a glob pattern .
5719	Joins a translated parts .
5720	Translate a glob pattern .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write indexes to a table .
5724	Write all triggers to a table .
5725	Write constraints to a table .
5726	Write the contents of a table .
5727	Convert a single row to a string .
5728	Write indexes to the file .
5729	Write constraints to the file .
5730	Write the triggers for the given table .
5731	Return the number of rows in the table .
5732	Enqueue data into the database .
5733	Start a task .
5734	Build and return the query string .
5735	Simple JSON serializer .
5736	Reconnect to the database .
5737	Execute a SELECT query .
5738	Connect to the database .
5739	Run the benchmark .
5740	Connect to the aggregator .
5741	Print information about an error .
5742	Total number of connections .
5743	Handles a connection failure .
5744	Build an expression from a list of fields .
5745	Build an UPDATE statement .
5746	Connect to the database .
5747	Initialize the database .
5748	Destroy the database .
5749	Start a new step .
5750	Stops a single step .
5751	Load the start and stop fields .
5752	Disconnect from the API .
5753	Perform a reconnect sequence .
5754	Connect to the websocket .
5755	Process a message .
5756	Stop timers .
5757	Send ping to the server .
5758	Called when pong is received .
5759	Send data to the server .
5760	Unsubscribe
5761	Process a system message
5762	Handle a client response
5763	Handle errors .
5764	Send data to client .
5765	Resubscribe to all channels
5766	Handle authentication events .
5767	Handle configuration changes .
5768	Update the time of a channel .
5769	Reset the connection .
5770	Get a list of candles .
5771	Configure bitfinex configuration
5772	Subscribe to a ticker .
5773	Unsubscribe from a tick .
5774	Subscribe to order book .
5775	Unsubscribe from order book .
5776	Subscribe to book book .
5777	Unsubscribe to book book .
5778	Subscribe to trades .
5779	Unsubscribe from trades .
5780	Subscribe to candles .
5781	Unsubscribe from Candles .
5782	Authenticate to the channel
5783	Cancel an order
5784	Handle a command .
5785	Handle a device command .
5786	Called when a PahoMessage is received .
5787	Create new device type
5788	Publish an event .
5789	Update a device .
5790	List client status .
5791	List all custom bundles
5792	Create a custom bundle
5793	Update a schema definition
5794	Disconnect from the IBM Watson IoT service .
5795	Called when a connection is received .
5796	Subscribe to device events .
5797	Subscribe to a device status .
5798	Subscribe to a specific command
5799	Publish a command to the server .
5800	Called when a message is received .
5801	Handle a device event .
5802	Called when a device is received .
5803	Called when an application is received .
5804	Get a specific event .
5805	Get all events of a device
5806	Make API call .
5807	Initiate a new request .
5808	Get the status of a request .
5809	Close the index .
5810	Count the number of points in the index .
5811	Returns the nearest object to the specified coordinates .
5812	Gets the bounds of the index .
5813	Delete an index .
5814	Create an index from the given stream .
5815	Load a byte array from the page .
5816	Remove an object from the index .
5817	Error checking for Error calls
5818	Load the application .
5819	Initialize the Flask application .
5820	Start the gunicorn server .
5821	Convert a value to a native URL .
5822	Crop the image on the given centerpoint .
5823	Process the given image .
5824	Process an image .
5825	Process an image .
5826	Override the default method to open the image field .
5827	Process the placeholder image .
5828	Update the PPOI field .
5829	Update the PPOI field .
5830	Assign data to the field .
5831	If ppo_field is defined in ppo_field .
5832	Convert obj to string .
5833	Auto - discover all modules that have been installed .
5834	Unregisters an SizedImage subclass .
5835	Unregisters a filter .
5836	Returns the URL for the placeholder image .
5837	Build filters and sizes .
5838	Returns the root folder of the project
5839	Returns the path to the root folder of the project .
5840	Returns the path to the folder containing the downloaded root folder
5841	Delete files matching the given regex
5842	Preprocess the image .
5843	Preprocess GIF image .
5844	Preprocess the image .
5845	Retrieve image from storage
5846	Saves an image to disk .
5847	Return the PPO ID as a string .
5848	Creates a resized image .
5849	Render the template .
5850	Prepare the context for rendering .
5851	Build attributes from attributes .
5852	Returns the path to the resized file
5853	Filters the path to the image with the given filename
5854	Validates that the size of the volume field is valid .
5855	Get image url from image key
5856	Get rendition key from settings .
5857	Format an instruction .
5858	Format a function body .
5859	Decode a bytecode .
5860	Decode a module .
5861	Marks a function as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read the result from the server .
5865	Handle a FastAGI request .
5866	Parse the result of agi_check .
5867	Check the status of an AGI code .
5868	Reset all instances .
5869	Get the list of instances .
5870	Get metadata from setup . py
5871	Get the primary keys of a model
5872	Deserialize a Django model instance .
5873	Retrieves an existing instance from the query .
5874	Returns the declared fields
5875	Deserialize data .
5876	Return kwargs for an association .
5877	Remove orphan snapshots .
5878	snapshot a database
5879	List all snapshots .
5880	Restore a snapshot
5881	Delete a snapshot
5882	Rename a snapshot
5883	Replace a snapshot .
5884	Updates indexes after each epoch for shuffling
5885	Convert textacy to textacy format .
5886	Apply a function to data .
5887	Creates processor for text .
5888	Process text .
5889	Process text .
5890	Generate document length stats .
5891	Returns a Pandas DataFrame of token counts .
5892	Map param_type to string type .
5893	Parse a list of interfaces .
5894	The inverse .
5895	Perform a rollback on duplicate items .
5896	Make a copy of the matrix .
5897	Returns a copy of the object
5898	True if two Mapping objects are equal .
5899	Return an iterable of tuples where the value is an iterable .
5900	Clear the internal state .
5901	Moves the node to the end of the file
5902	Write text to a temporary file .
5903	Search for addresses .
5904	Merge arguments into config .
5905	Load addressbooks .
5906	Prepare search queries .
5907	Create new contact .
5908	Generate a list of birthdays .
5909	Implements the list of phone numbers
5910	List the vCard list
5911	Modify a subcommands .
5912	Remove a subcommand from the vCard .
5913	Execute the source subcommand .
5914	Implements merge subcommands .
5915	Copy or move a vCard to target addressbook .
5916	Get action by alias .
5917	Convert a boolean value to a boolean value .
5918	Create a new contact object .
5919	Create an addressbook from a file .
5920	Create a contact object from user input .
5921	Create a new contact with an existing user input .
5922	Get the list of names of a variable .
5923	Add a category .
5924	Parse a type value .
5925	Convert list to string
5926	Convert a string to a date .
5927	Compares two UIDs .
5928	Search all contacts for a given query .
5929	Search for contacts in the database .
5930	Search for contacts with a given query .
5931	Search the address book .
5932	Get the short uids of all contacts .
5933	Get short uid from uid
5934	Find all VCF files in the source directory .
5935	Load all VCard files matching the query .
5936	Get the abook with the given name .
5937	Get available architectures .
5938	Return a list of available architectures .
5939	Get the argument spec for a function .
5940	Dispatch the given parser .
5941	Safely prompt .
5942	Encode the given value to the output file .
5943	Guess keyword arguments based on keyword arguments .
5944	Adds commands to the given parser .
5945	Decorator to set a new name .
5946	Decorator used to declare arguments .
5947	Prompt user for confirmation .
5948	Return a new Query with the given parameters .
5949	Like LIKE .
5950	Get cached result .
5951	Get the first item from the query .
5952	Delete the results of this query .
5953	Called when the entity is deleted .
5954	Execute a Lua script against a prefix .
5955	Estimate the work of a Lua script .
5956	Search for a set of records .
5957	Count the number of items in the set
5958	Return connection to an object
5959	Convert a string to a list of strings .
5960	Refresh the indices of the specified model .
5961	Clean old indexes .
5962	Add an object to the session .
5963	Get the value of a key
5964	Write data to redis .
5965	Save the object to the database .
5966	Delete the object .
5967	Retrieve a single instance from the database .
5968	Register a dispatcher function .
5969	Open a semaphore .
5970	Get CPU count .
5971	Send the result back to the queue .
5972	Process a worker thread .
5973	Add a pending call item to the call queue .
5974	Ensure the executor thread is running .
5975	Wrap objects in non - picklable objects .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	Waits for jobs completion .
5980	Return a dictionary with the information about the process .
5981	Prepare process data
5982	Close all open file descriptors .
5983	Terminate process with psutil .
5984	Terminate a process .
5985	Gets the list of exit codes from the given processes .
5986	Formats a list of exit codes into a string .
5987	Run the semaphore tracker .
5988	Ensure the process is running .
5989	A simple event processor that prints out events .
5990	Disassemble the Python program .
5991	Start interactive interactive console .
5992	Split a string into arguments .
5993	Generate a stack of frames .
5994	Run a set of hooks .
5995	Called to forget the current frame .
5996	Try to get an integer without error .
5997	Get an integer from argparse .
5998	Process commands .
5999	add a source file to the command queue
6000	Find the next token in the string starting at start_pos .
6001	Print error message .
6002	Read a command line .
6003	Close the connection .
6004	Disassemble the given code .
6005	Disassemble the given bytecode into a byte string .
6006	Return a count of the number of frames
6007	Get the call function name .
6008	Print count entries of the stack trace
6009	Lookup subcmds with the given prefix .
6010	Handle short help messages .
6011	Add a subcommand .
6012	Run a subcommand .
6013	Start debugging .
6014	Show a category .
6015	Gets the line number .
6016	Find the frame that was traced by traceback .
6017	Map thread names to thread IDs .
6018	Validate and return an integer .
6019	Validate onoff or off .
6020	Run set_bool on the debugger .
6021	Run set_int
6022	Run show_bool on the debugger .
6023	Run the showint command .
6024	Show setting value .
6025	Return True if line is a definition statement .
6026	Return True if line is a class definition .
6027	Raise DebuggerQuit
6028	Determine the default background .
6029	Determine if a color is dark .
6030	Extracts the signature of a frame .
6031	Returns a list of all display formats
6032	Displays the given frame
6033	Return a string describing the number .
6034	Read a message from the socket .
6035	Start debugging .
6036	Undefined subcommand .
6037	Run the debugger .
6038	print a list of values
6039	Lookup a signal name .
6040	Lookup a signal by name .
6041	Check if a name is a valid sign name .
6042	Set signal replacement for signal .
6043	Check and adjust the signature of the signature .
6044	handle signals
6045	Handle signals .
6046	Set print method .
6047	Process signal received from the program .
6048	Extract the module name from filename .
6049	Search for a file in directories .
6050	Attempt to find a file in the given path .
6051	All python files caller s dir without the path and trailing .
6052	Write a message to the output .
6053	Run the program .
6054	Format a list of commands .
6055	Post - mortem debugging .
6056	Close the connection
6057	Send a message to the socket .
6058	Complete an identifier .
6059	run a command
6060	Add frames to ignore filter .
6061	Determine if a file canonic .
6062	Return filename .
6063	Returns True if tracing is started .
6064	Checks if the current frame is a stop statement .
6065	Sets to stop on the next event that occurs in frame frame .
6066	Print the stack trace of the given frame .
6067	handle the current frame
6068	Check if frame is correct .
6069	remove breakpointbp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable all breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete breakpoints by filename .
6074	Open the input file .
6075	Read a line from the input stream .
6076	Prompt the user for confirmation .
6077	r \ s +
6078	r \ d +
6079	Submit a query to the pool .
6080	Restore the previous login .
6081	Load a module .
6082	Iterate over all documents .
6083	Main function for the CLI .
6084	Transcode a JSON file to a stream .
6085	Open a json or csv file .
6086	Iterate over the dates in the stream .
6087	Convert date string to float .
6088	Guess file encoding .
6089	Yield lines from a JSON file .
6090	Transcode a file to UTF - 8 .
6091	Open a CSV file .
6092	Iterate over a CSV file .
6093	Main entry point for Transcode .
6094	Creates a new session with the given token .
6095	Save token to file
6096	Perform a request .
6097	Perform a DELETE request .
6098	Wait for the project to build .
6099	Returns the root url
6100	Save a new token .
6101	Make a JSON request and return the result .
6102	POST data to the API .
6103	Returns a new URL with the given path .
6104	Get the default account id .
6105	Get documentation for this service .
6106	Waits for a job .
6107	Perform a GET request .
6108	Print the result as a CSV .
6109	Read parameters from input file .
6110	Simplify a document .
6111	Create a project with a list of documents .
6112	Upload documents from a JSON file .
6113	Main function for the CLI .
6114	Upload a stream of documents to a project .
6115	Upload a file to the server .
6116	Entry point for the script .
6117	Create a new User instance from user credentials .
6118	Login to the user .
6119	Submit login form .
6120	Get data from resource .
6121	Fetch data per period
6122	Prepare the view
6123	Initialize the view .
6124	Render the view .
6125	Called when a change is received .
6126	Updates the menus for the page .
6127	Return a list of urls for each page .
6128	Called when a message is received .
6129	Handle changes from enaml
6130	Create the sub element of the widget .
6131	Initialize the widget .
6132	Destroy the widget .
6133	Add child to widget
6134	Removes child from widget
6135	Iterate over all child widgets .
6136	Set attribute .
6137	Called when the proxy has changed .
6138	Called when a change has been modified .
6139	Perform an XPath search .
6140	Prepare object attributes .
6141	Initialize the widget
6142	Set the HTML source
6143	Observer changes
6144	Handle changes from a block
6145	Update the children of the block
6146	Read the contents of the given file .
6147	Print error message and exit .
6148	Print error message and exit .
6149	Get product by name .
6150	Retrieve a new session .
6151	Reset the store .
6152	Returns a list of Stores
6153	Set delivery system .
6154	Gets the menu for the given store .
6155	Add item to basket
6156	Add a pizza to the basket
6157	Adds a side to the basket
6158	Removes an item from a basket
6159	Set payment method .
6160	Process the payment options .
6161	HTTP GET operation .
6162	HTTP POST operation .
6163	Make an API call to the API .
6164	Append an item to the menu
6165	Adds an exit item to the list
6166	Draws the menu .
6167	Process user input .
6168	Select the selected item .
6169	Parse old menu data
6170	Return the top value of a DataFrame .
6171	Compute the top group by aggregate values .
6172	Convert a string to datetime
6173	Convert datetime to string .
6174	Change the date format of a column .
6175	Cast a column to the given type .
6176	Compute the rank of a DataFrame .
6177	Apply a waterfall function to a DataFrame
6178	Apply math operation between two columns .
6179	Round values in a column .
6180	Change the absolute values of a column .
6181	Pivot table .
6182	Pivot dataframe by group
6183	Groups a DataFrame with aggregations .
6184	Compute the cumulative sum of a column .
6185	Add a row to a DataFrame .
6186	Decorator to catch exceptions .
6187	Decorator to log a message .
6188	Log the time of a function .
6189	Decorator to log output shapes .
6190	Rename the given values .
6191	Compute the cumulative sum of rows in the given DataFrame .
6192	Combine columns into a DataFrame .
6193	Get a parameter value from a function call .
6194	Removes old entries from the cachedir .
6195	Roll up a Pandas DataFrame .
6196	Return the maximum value of a column .
6197	Return the minimum value of a column .
6198	Fill missing values in a column .
6199	Add an offset to a date object .
6200	Add nb_months to a date object
6201	Add nb_years to date object
6202	Parse a date string .
6203	Filter DataFrame by date range .
6204	Convert a column to a percentage .
6205	A family of parameters .
6206	Update the learning updates .
6207	Returns training parameters .
6208	Apply optimization updates .
6209	Samples the first layer in the network .
6210	Prepare the encoder .
6211	Computes the tensor loss .
6212	Apply a function over each set .
6213	Vectorizes the target size .
6214	Print the number of training sets .
6215	Train the model .
6216	Sample the input .
6217	Compute alignment weights .
6218	Compute the context vector .
6219	Concatenate multiple inputs .
6220	Pads the dataset to the given side .
6221	Compute rmsprop .
6222	Print the elapsed time .
6223	Run the optimizer .
6224	Run the benchmark .
6225	Build the variables for the loop .
6226	Run the scan step .
6227	Multiply momentum update parameters
6228	Returns the training step .
6229	Sets the number of batches to skip .
6230	Load parameters from file .
6231	Train the model .
6232	Run the training step .
6233	Run a single step .
6234	Log a score map .
6235	Get the current data .
6236	Apply a function to self .
6237	Logs information about the selected parameters .
6238	Return a tensor of the given type .
6239	Create a list of Variables from a dataset .
6240	Creates a shared variable .
6241	Stack encoders layers .
6242	Stack decoding layers .
6243	Compute the encoder .
6244	Compute the neural network .
6245	Create a 2D Gaussian .
6246	Register a layer .
6247	Monitor the output of each layer .
6248	Returns a list of all parameters
6249	Setup variables .
6250	Compute the map .
6251	Saves model parameters to file .
6252	load parameters from file
6253	Log the network .
6254	Register multiple parameters .
6255	Register new updates .
6256	Register new training updates .
6257	Register multiple monitors .
6258	L2 norm of a list of tensors .
6259	Write single element to file object
6260	Load all elements from a file object .
6261	Load model parameters from path .
6262	Create request elements .
6263	Decode user state .
6264	Parse credentials .
6265	Removes client_id from request elements .
6266	Login to provider .
6267	Convert a dictionary into a simple dictionary .
6268	Convert a list of dictionaries into a dict .
6269	Json - like parser .
6270	Resolve provider class .
6271	Create a cookie .
6272	Saves the current session .
6273	Get cookie data .
6274	Get data .
6275	Generate a signature for the given parts .
6276	Serialize a value into a string .
6277	Returns True if the token has expired .
6278	Expire the token expiration time .
6279	Serialize credentials into a string .
6280	Check if the content is a binary string .
6281	The content of the response .
6282	Create user authorization elements .
6283	Overrides the access method to access the user s data .
6284	Decorator for login .
6285	Login to the user .
6286	Generate a key for a session key .
6287	Set the value of a session .
6288	Generate a CSRF token .
6289	Log a message to the authomatic logger .
6290	Check if HTTP status is in category .
6291	Split url into parts .
6292	Decorator for cross origin .
6293	Set CORS headers .
6294	Returns the kwargs dict for the app instance .
6295	Returns a string representation of an object .
6296	Ensure inst is iterable .
6297	Compare two numbers .
6298	Marks a function as deprecated .
6299	Deserialize a string .
6300	Create an AudioSegment from a file .
6301	Create an AudioSegment from a numpy array .
6302	Executes the given command .
6303	Filters the audio segment .
6304	Calculate the FFT .
6305	Generate frames from the data .
6306	Normalize the SPL of this AudioSegment .
6307	Return a new AudioSegment with the same data .
6308	Resample the window .
6309	Serialize the current state
6310	Generate a spectrogram .
6311	Given a list of candidate offsets choose the first occurrence of that offset .
6312	Determine the offset front of a given onset .
6313	Get the offset front of onset front after onset .
6314	Determine the onset front of an onset front .
6315	Determines the number of periods that are consecutive .
6316	Update the segmentation mask .
6317	Return the index of the first index in the front - end .
6318	Yield the front ids for each onset at a time .
6319	Get the corresponding offsets for the given onset .
6320	Removes any gaps that overlap the segmentation_mask .
6321	Remove front rows that are too large .
6322	Given a list of front and a list of front indices break the front of the front .
6323	Merge adjacent segments .
6324	Separate masks into masks .
6325	Downsample one or two - dimensional arrays .
6326	Takes a list of masks and puts them into the queue
6327	Bandpass filter .
6328	Low - pass filter .
6329	Convert list of data to tf input matrix .
6330	Expand and standardize dataset .
6331	Tests if two elements are equal .
6332	Given a list of filenames return a list of feature scores for each feature .
6333	Load the confusion matrix from an audit file .
6334	Convert list of data to tf input matrix .
6335	Update pip index url based on environment variables .
6336	Autodetect requirements files .
6337	Resolve all available streams .
6338	Resolve a property with a given property .
6339	Find all streams matching the predicate .
6340	Raise an error .
6341	Push a sample to the stream .
6342	push a chunk to the stream
6343	Get information about the stream .
6344	Open the LSL stream .
6345	Perform a time correction .
6346	Get child element .
6347	Return the next sibling of the element .
6348	Get the previous sibling of the element .
6349	Set the name of the element .
6350	Set the value of the expression .
6351	Return a new child element with the given name .
6352	Create a new child element with the given name .
6353	Return a copy of this element .
6354	Return a copy of this element with another element .
6355	Remove a child .
6356	Get the results of the resolver .
6357	Pair a word .
6358	Autocomplete an edge .
6359	Compute the n - grams for the given token .
6360	Iterate over a list of processors .
6361	Run a function over an iterable .
6362	Makes fuzzy word .
6363	Do fuzzy .
6364	index a word
6365	Extract relations extrapolation .
6366	Help command .
6367	Show information about the database
6368	Execute DBKEY .
6369	List geohashes
6370	Get information about a single document .
6371	Index a document .
6372	Count the scores of a word .
6373	Compare two strings .
6374	Send a request .
6375	Execute a list of requests .
6376	Extract bits from the array .
6377	Convert a reinteret representation to a bit vector .
6378	Convert a slice .
6379	Find files matching the given pattern .
6380	Returns True if the iterable is in the given iterable .
6381	Generate a statement for each item in items .
6382	Logical shift left
6383	Return the log2 of x .
6384	Checks if a number is a power 2 - bit integer .
6385	c - like case of switch statement
6386	Defines the default statement .
6387	Register all interfaces of the given interface .
6388	Called when the simulation is finished .
6389	Log change events .
6390	Render a HWProcess instance .
6391	Add agents to a unit .
6392	Get the clk associated with this unit .
6393	Yield items from iterable by fn .
6394	Yield items grouped by fn
6395	Flatten an iterable .
6396	Helper method to add nested if elements from ifContainer .
6397	Removes unconnected signals from netlist .
6398	Checks if the proc is too simple .
6399	Try to merge two processes .
6400	Reduce a list of processes by merging them together .
6401	Memorizes a WRITE request
6402	Serialize unit to RTL .
6403	Returns the name of the output of a list of statements .
6404	Remove all drivers of the given signal .
6405	Create a signal .
6406	Synthesize the program .
6407	Returns the maximum ID for a given statement .
6408	Returns the maximum statement ID for a given proc .
6409	Write data to the simulation .
6410	Set the direction of the master direction
6411	Recursively load declarations .
6412	Return a list of all the signals for this interface .
6413	Returns the physical name of the entity .
6414	The bit length of this element .
6415	Get sensitivity of an operation .
6416	Evaluate an operator .
6417	Convert bits of this operator to another type .
6418	Reinterpret bits in a hStructT .
6419	Returns the number of words between start and end .
6420	Yield items grouped by word index .
6421	Print the given interface as a string .
6422	Generate frames from a TransTmpl template .
6423	Iterate over all parts of this word .
6424	Pack data into a dictionary .
6425	Recursively clean the meta data .
6426	Discovers the enclosures for the given statements .
6427	Given a list of signals find the mutual sensitivity sequence .
6428	Get the context of the RDL statement
6429	Called when the statement is reduced .
6430	Merge another statement .
6431	Determines if two statements are mergable .
6432	Merge two INDRA Statements .
6433	Merge two statements .
6434	Try to reduce a list of statements .
6435	Called when parent is dependent .
6436	Sets the parent stm .
6437	Add stements to the target statement .
6438	Destroy this statement .
6439	Create a new register .
6440	Create a new signature .
6441	Clean all interfaces and private interfaces .
6442	Recursively flatten all fields in sigor .
6443	Unpack the given data into a HStruct .
6444	Convert this operator to a value .
6445	Add a sensitivity to the system .
6446	Evaluate cond condition .
6447	Connect a port to a subsim unit .
6448	Create a new updater for the given value .
6449	Returns a function that updates the values of the array with the given indexes .
6450	Creates a bit vector .
6451	Register a HWProcess .
6452	Evaluate a parameter .
6453	Sets the parameter .
6454	Converts an interface map into a HStruct .
6455	Finalize all allocated resources .
6456	get indexed value
6457	Convert a Python object into a Value instance .
6458	Cast the given signal to the specified type .
6459	Reinterpret the given sigor .
6460	Recursively walk through an interface s parameters .
6461	Return a list of connected connected components .
6462	Pack the interfaces into a binary representation .
6463	Convert a ROM into a HWProcess instance .
6464	Convert this instance to a Rtl .
6465	Register an interface in the class .
6466	Tries to reduce and returns the result of a scalar .
6467	Try to reduce a scalar .
6468	Returns a new name scope .
6469	Decorator for serialization .
6470	Create a HDL type for a given type .
6471	Serialize an if container to a string .
6472	Extract a conditional expression from a condition .
6473	Return a SimBitsT instance .
6474	Get the name of a constant .
6475	Cuts all drivers of the given signal .
6476	load from array
6477	Load struct from struct .
6478	load from hdltype
6479	The width of the item in bits .
6480	Recursively walk the structure .
6481	Convert a value to a given width .
6482	Merges the case list with another statement .
6483	Get the indent number .
6484	Raise an IntfLvlConfError if obj does not exist
6485	Register a parameter .
6486	Update the ParamDeclrCollector with the given prefix .
6487	Register a unit .
6488	Register an interface .
6489	Register an array with the given items .
6490	Get the single driver
6491	Evaluate the function .
6492	Create an operator from operands .
6493	Return a new context with the given indent .
6494	Try to connect to a unit .
6495	Propagate clk to all units
6496	Propagate clk rst n .
6497	Propagate clk rst
6498	Propagate rst_n as rst_n .
6499	Propagate rst .
6500	Iterate over bits in a signal .
6501	Serialize obj into an entity
6502	Serialize obj into an entity .
6503	Serialize params into a nested tuple .
6504	Returns the full name of the object
6505	Make an association .
6506	Prepare a simulation for a given unit .
6507	Convert a unit into a SimModel .
6508	Reconnect signals to the model .
6509	Compute the VCD of a SimModel .
6510	Initialize the write callback .
6511	Connect a signal to the signal .
6512	Register a signal .
6513	Connects this node to the source .
6514	Returns the representation of this instruction .
6515	Determines if a signal is ev dependent on the given process .
6516	Add a process .
6517	Add a hdl proc to run .
6518	Schedules the combinator to wake up the event .
6519	Schedule the apply values .
6520	Resolve conflict strategy .
6521	Run all combinations of the input processors .
6522	Run the sequence processors in the output containers .
6523	Applies the values to the combiner .
6524	Read the value of a signature .
6525	Write a value to the current state .
6526	Adds a process to the event queue .
6527	Simulate a single unit .
6528	Create an operator function from a function .
6529	Convert ternary operations into a list of Ternary instances .
6530	Create temporary variables for the given process .
6531	Calculates the Hamming distance between two hashes .
6532	Calculate the average hash
6533	Calculate the distance between two images .
6534	Setup the device .
6535	Update the power state .
6536	Mutes the volume .
6537	Increase the volume level .
6538	Down the volume down .
6539	Set the volume level .
6540	Reset the board .
6541	Gets the piece at the given square
6542	Removes piece at the given square .
6543	Sets piece at the given square .
6544	Determines if a move is in the stack .
6545	Determines if the board was killed .
6546	Checks if the game is over .
6547	Checks if the position is checkmate .
6548	True if the trajectory is a 4fold repetition .
6549	Remove a move from the stack .
6550	Returns a string representation of the board .
6551	Push a move onto the stack .
6552	Returns the zobrist hash of the board .
6553	Get the piece s color
6554	Create a new PI instance from a given symbol .
6555	Gets the USI representation of the piece .
6556	Create a SQUARE instance from a string .
6557	Parse a string of data .
6558	Parse a single commit .
6559	Load configuration from the command line .
6560	Execute a command from the command line .
6561	Add an argument to the argparse parser .
6562	Load a configuration file .
6563	Generate a YAML file .
6564	Generate a markdown string for this class .
6565	Cast value to string
6566	Returns a list of dates between two dates .
6567	Parse a date string .
6568	Load data from a file .
6569	Set all dates between two dates
6570	Compute the missing rates for the given currency .
6571	Get the rate for a given date .
6572	Convert an amount to another currency
6573	Divide an iterable into n - sized chunks .
6574	Interactively animate frames .
6575	Read a single record
6576	Write a single record to the file .
6577	Return a memoryview of the words in the file .
6578	Extract comments from file .
6579	add an array to the file
6580	Close the DAF file .
6581	Generate a sequence of positions .
6582	Close the file .
6583	Load PCK data .
6584	Compute the segment of the segment .
6585	Check if call is within a logging statement .
6586	Check if the operation is within a log op .
6587	Check if a dictionary is a dictionary .
6588	Check for joined strings .
6589	Check for keyword arguments .
6590	The exception handler .
6591	Detect logging level .
6592	Get exception handler name .
6593	Get the id attribute of value
6594	Check if the node is a bare exception .
6595	Check for exc_info .
6596	Delete a file from the database
6597	Add the widget widget to the database .
6598	Render the rendered content .
6599	Render the template to a response .
6600	URL escape codes .
6601	Configure the Mongodb module .
6602	Convert string to underscore .
6603	Ensure all indexes are already indexed .
6604	Parse the contents of a file .
6605	Load the content of a file .
6606	Parse a single line into a PriceModel object .
6607	Translate a symbol .
6608	Loads the symbol maps .
6609	Get the current session
6610	Add a new price
6611	Import prices from CSV file
6612	Print the latest price for a symbol
6613	List all prices for a given date and currency .
6614	Download prices .
6615	Delete existing price entries .
6616	Get a default session
6617	Create a new symbol map .
6618	List all available price maps
6619	Get symbol by symbol
6620	Read lines from a file .
6621	Convert an entity to a Price object .
6622	Convert a PriceModel to a Price object .
6623	Read configuration file .
6624	Returns the path to the template file .
6625	Creates user config file
6626	Returns the path to the config file .
6627	Get the contents of the configuration file .
6628	Set an option .
6629	Get the value of an option .
6630	Save the contents of the configuration file .
6631	Parse a symbol .
6632	Add a price to the transaction .
6633	Add a price entity to the database .
6634	Download and save a price for a currency .
6635	Gets the session
6636	Get prices for given date and currency .
6637	Get prices on a namespace
6638	Delete all security symbols .
6639	Delete prices for a symbol
6640	Download a price from the agent .
6641	Get securities for a specific agent .
6642	Returns a partial state .
6643	Update the bound_args attribute of the call tree .
6644	Iterate over this node s children .
6645	Decorator for multi - call functions .
6646	Fail if the student parts are equal .
6647	Compare the equality of two functions .
6648	Test whether the student contains text .
6649	Test if a package has an import .
6650	Test whether the student output contains text .
6651	Check for printout .
6652	Assert that the state contains an error .
6653	Test whether the student has been chosen .
6654	Check the validity of a function .
6655	Get the result from a process
6656	Overrides the current state .
6657	Test if an instance is an instance of a student .
6658	Returns a subset of the definition .
6659	Create a new child state
6660	Get a parser instance .
6661	Test if the state has context loop .
6662	Ensure that the given state contains context with the given names .
6663	Check if a student part exists .
6664	Check if a student part exists .
6665	Check the arguments for the given part .
6666	Verify a function call .
6667	Get the true anomaly .
6668	Initialize the ldap3 application .
6669	Initialize LDAP configuration .
6670	Add a server to the pool .
6671	Remove a connection from the stack .
6672	Destroys the connection .
6673	Authenticate using LDAP .
6674	Authenticate using LDAP .
6675	Authenticate to the LDAP server .
6676	Returns a list of groups for a given user
6677	Get user information
6678	Get user information for a given username .
6679	Get an LDAP object
6680	Returns an LDAP connection
6681	Create a connection .
6682	Create an LDAP connection .
6683	Destroy a connection .
6684	Search for resources .
6685	search for labels
6686	Search repository .
6687	search all archives in a collection
6688	speak the database
6689	Announce a command .
6690	Update the secrets
6691	update headers
6692	required for client secrets
6693	download a file to a temporary file
6694	download a url
6695	Update the authorization token
6696	Get or create a folder
6697	Read response from API .
6698	get bucket
6699	Update the secrets from the client
6700	Initialize the client .
6701	Load the secrets from the server .
6702	List all logs that match the given criteria .
6703	List all logs
6704	create folder at endpoint
6705	Initialize the transfer client .
6706	list all containers
6707	Status of backend
6708	add a variable
6709	remove a variable
6710	Activate the client
6711	Delete a backend
6712	Update the base of the image .
6713	Create basic auth header .
6714	Generate HMAC signature .
6715	Generate header signature .
6716	HTTP DELETE request
6717	Send a HEAD request
6718	Parse a GET request .
6719	Disable SSL verification
6720	Remove an image from a container
6721	Get installed version information
6722	Returns a list of packages required to install .
6723	get singularity version
6724	check if the installed version is installed
6725	Returns the absolute path to the installdir .
6726	Get the thumbnail of the registry
6727	Run a shell command .
6728	Get metadata from an image file
6729	Update the account s credentials
6730	Print the output of the response .
6731	Kill the registry
6732	List logs .
6733	Get all collections
6734	Update the required credentials .
6735	Update Google Storage credentials .
6736	get the client
6737	Start an IPython notebook .
6738	Get manifest from repo
6739	Get a manifest
6740	Get the location of the download cache
6741	extract the environment environment from the config
6742	Update the base url
6743	Update the private - token with the private - token .
6744	Get the metadata for the registry .
6745	Get client settings .
6746	Get or update a setting .
6747	Update a setting .
6748	Generate a signature for the registry .
6749	list builders
6750	load a template by name
6751	Get the IP address of an instance
6752	execute build
6753	List all blobs
6754	Search all Containers
6755	CLI entry point
6756	Entry point for the registry .
6757	initialize the database
6758	get template
6759	Search for shared endpoints .
6760	list endpoints
6761	List files on an endpoint
6762	share image
6763	Reads the client secrets file
6764	Initialize and compute services .
6765	Delete an object from a bucket .
6766	delete a file
6767	Destroy an instance
6768	Get subparsers for an argparse parser .
6769	Generate a random string .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a compressed tar archive .
6773	Get the hash of a file .
6774	Read a file .
6775	Read a JSON file
6776	clean up files
6777	push an image to the registry
6778	Get or create collection .
6779	get collection by name
6780	Get a container
6781	list all containers
6782	Inspect container metadata
6783	rename an image
6784	move image to path
6785	delete an image
6786	add image to registry
6787	push a chunked image
6788	Parse a recipe from a string .
6789	Find a single recipe by name .
6790	Generate a tarball for a list of package files .
6791	run build
6792	Update the metadata of a blob .
6793	Format a container name .
6794	Determines whether the user should use color .
6795	Emit error .
6796	Write the given message to the given stream .
6797	Print a table .
6798	push an image
6799	get template by name
6800	get image manifest
6801	get build template
6802	update client secrets
6803	Make a string representation of a class .
6804	Handle S3 errors .
6805	Create proxy object .
6806	Returns a URL for the given user or email address .
6807	Gravatar URL .
6808	Check if the user has a gravatar .
6809	Returns a URL for the given email address .
6810	Generator for chimera blocks .
6811	Given a list of chimera blocks compute the chimera of the chimera block .
6812	Enumerate resonance smiles .
6813	Enumerate a molecule .
6814	Normalize mol .
6815	Apply transform to mol .
6816	Return the canonicalized form of a molecule .
6817	Validate a molecule .
6818	Disconnects atoms from a molecule .
6819	Standardize smiles .
6820	Enumerate all Tautomers in a smiles .
6821	Convert a Tautomer string to its canonical form .
6822	Normalize mol .
6823	Return the tautomer of a molecule .
6824	Return the fragment of a molecule .
6825	Return a copy of mol .
6826	Return a copy of mol .
6827	Return the charge of a molecule .
6828	Return the super parent of a molecule .
6829	Run molvs command
6830	Removes fragments from mol
6831	Choose the largest fragment in mol .
6832	Integrate an IVP .
6833	get stats from github
6834	Get all members of org
6835	Get all teams of org
6836	Get all repos
6837	Get the total number of contributors for a repository .
6838	Get the number of open pull requests for a given repo .
6839	Get all issues from repo
6840	Get the readme of a repo .
6841	Get the license for a given repo
6842	Get all commits for a repository .
6843	write org data to json file
6844	Write the total number of teams to a file .
6845	write languages to file
6846	Ensure that a directory exists .
6847	Removes the given date from the CSV file
6848	Gets a list of organizations that are used by the organisation .
6849	Create an enterprise session .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query repositories .
6853	Get organization from user .
6854	Write the trajectory to a file .
6855	Create a project from a Gitlab Repository object .
6856	Create a project from a dict .
6857	Convert a license string to a dictionary .
6858	Get traffic from repositories
6859	Get all releases from a repository .
6860	Get referrers from the API .
6861	Get data from a url
6862	Write data to a json file
6863	Write data to a file
6864	Check data for duplicates in a file .
6865	Write data to a file
6866	Write referrers to file .
6867	Process a JSON file .
6868	Fetch data from a URL .
6869	Process data .
6870	Login to GitHub .
6871	Get members of org
6872	Write logins to a file
6873	Connect to a URL .
6874	Connect to the given URL .
6875	Query projects .
6876	Clone a git repository .
6877	Compute the number of labor hours for a given month .
6878	Remove null values from dictionary .
6879	Read a GQL query from a file .
6880	Query GitHub from a file .
6881	Submit a query to GitHub .
6882	Waits until a given time stamp is reached .
6883	Prints the number of seconds to the terminal .
6884	Import data from file
6885	Save data to file
6886	Create TFS connection
6887	Connect to TFS Enterprise .
6888	Connect to TFS Enterprise .
6889	Create a Git client .
6890	Connect to TFS Enterprise .
6891	Get GitRepos for a project
6892	Get Tfvc repository list
6893	Get year commits .
6894	Calculate the total number of commits for each week .
6895	Write to file
6896	Initialize backend instances .
6897	Get metrics interface .
6898	Record timing information for a given stat .
6899	Context manager for timing information .
6900	Decorator for timer functions .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Rollup the leaderup stats .
6905	Convert a list of members to an integer field .
6906	Convert a database value to a value .
6907	Convert a value to a python object .
6908	Prepare value .
6909	Recursively resolve a path .
6910	Projects a list of singular sequences into a dictionary of singular sequences .
6911	The mean of the values .
6912	Updates the counter with the given value .
6913	Returns the mean rate of the timer .
6914	Mark the last value .
6915	Send metric to the client .
6916	Serialize a metric .
6917	Formats a metric string .
6918	Send a metric to the buffer .
6919	Check if an option exists .
6920	Encode data to UTF - 8 .
6921	Get or set the value of an option .
6922	Returns a mapping of ledger codes to GUIDs .
6923	Get the choices for the current user .
6924	Map an exact number to a foreign invoice number .
6925	Solve the given grid using sudsat .
6926	Registers a view handler .
6927	Registers a form view .
6928	Registers a method view .
6929	Registers an API view .
6930	A generic API view .
6931	Registers a model view set .
6932	Return a StreamReader for a given file descriptor .
6933	Callback for reading from the socket .
6934	Close the connection .
6935	Called when the connection is lost .
6936	Schedule a watch request .
6937	Unregisters a watcher .
6938	Setup a watch for a given path .
6939	Setup the websocket connection .
6940	Get the next event .
6941	Touch the message .
6942	Update self . interval .
6943	Update the timer interval .
6944	Close all connections .
6945	Determines if this connection is approved .
6946	Connect to a nsqd server .
6947	Query the LookupD for a topic .
6948	Sets the max_in_flight .
6949	Logs a message to the logger .
6950	Add a listener to a listener
6951	Removes a callback from a listener
6952	Calls all registered listeners
6953	Publish a message to a specific topic
6954	set feature transform
6955	Run the prediction function .
6956	Calculate theta factor .
6957	Parse a log file .
6958	Removes duplicate fastq files .
6959	Merge the default adapters into a fasta file .
6960	Run trimmomatic
6961	Parse a depth file .
6962	Parse a depth file .
6963	Set the template file
6964	Set the name of the main channel .
6965	Get user channel information
6966	Render a Jinja2 template .
6967	Render the template .
6968	Set the channels for the workflow .
6969	Update the main loop for the main loop .
6970	Sets the secondary channel for the given source .
6971	Update the attributes of the component .
6972	Set the compiler channels .
6973	Set the raw input using raw input .
6974	Set secondary inputs .
6975	Set extra inputs for the channel .
6976	Parse the coverage header .
6977	Parse assembly file .
6978	Calculate GC content .
6979	Filter contigs based on comparisons .
6980	Get assembly assembly length .
6981	Write the assembly to a file .
6982	Write the assembly report into a single file .
6983	Removes all inner frames from text .
6984	Checks the inner fork sinsanity .
6985	Run insanity checks on a string .
6986	Parses a pipeline string .
6987	Given a list of filenames return the source sequence .
6988	Extract a list of lanes from a string .
6989	Establish a connection to a list of processes .
6990	Establish connection between source and sink .
6991	Add unique identifiers to the pipeline .
6992	Remove unique identifiers from pipeline links .
6993	Ensure required files exist .
6994	Convert a header string into a dictionary .
6995	Convert a string to hours minutes .
6996	Convert a size to a float .
6997	Parse the log file .
6998	Clear the inspect data .
6999	Update the barrier status .
7000	Retrieve a log file .
7001	Assign cpu and memory warnings .
7002	Update the process stats .
7003	Parse the log file .
7004	Update inspect information .
7005	Display the screen overview .
7006	Updates the screen .
7007	Move left to right .
7008	Get last n lines from the log file .
7009	Prepare static info for pipeline
7010	Reads the dag file and returns a dict
7011	Compute the hash of the pipeline .
7012	Return the path to the next flow .
7013	Split the fasta file into splitted sequences .
7014	Main entry point for profiling .
7015	Run brewinnuendo pipeline .
7016	Load a recipe .
7017	List all available recipes .
7018	Validate pipeline string .
7019	Build an upstream pipeline .
7020	Build a task pipeline .
7021	Define a pipeline from a string
7022	Build the pipeline string .
7023	Returns a string representation of a component .
7024	write report to report
7025	Process a list of log files .
7026	Replace the contig names in the assembly file .
7027	Clean up temporary files .
7028	Parse a list of files .
7029	Parse a log file .
7030	Iterate over the database .
7031	Get contig ID from contig string
7032	Get the plot data
7033	Write report data
7034	Parse assembly report
7035	Parse the assembly file .
7036	Calculate summary statistics .
7037	Get labels for each contig .
7038	Calculate GC property .
7039	Get a sliding window of contigs
7040	Run skesa . fasta .
7041	Write a JSON report to a report
7042	Returns the index of the truncated list .
7043	Parse nucleotide range file .
7044	Determine the optimal range of samples .
7045	Get summary information from a summary file .
7046	Check the health of the summary .
7047	parse bowtie log
7048	Parse a process name .
7049	Add a dependency process .
7050	Search the tree for a template .
7051	build the header
7052	build the footer
7053	Sets the channels for all processes .
7054	Sets the init process
7055	Sets the secondary channels
7056	Set the status codes for each process .
7057	Generate a string representation of a resource .
7058	Return a string representing the container configuration .
7059	Returns a string representation of the parameters .
7060	Returns a string with the merged parameters
7061	Returns the manifest as a string .
7062	Set the configuration for all processes .
7063	write a dag to a file
7064	Render the pipeline
7065	Write the configuration files .
7066	Export the params to stdout
7067	Export the directives of the process .
7068	Fetches the container tags
7069	Build the nf file .
7070	Sets kers range .
7071	Run SPAdes .
7072	Get the script id for the report
7073	Update trace_expect timestamp .
7074	Update the size of the log file .
7075	Send a live report to the report queue .
7076	Send the report to the hub .
7077	Close the connection to the server .
7078	Convert adapters to fasta file
7079	Main function for fastqc
7080	Writes output to output file
7081	Main function for mappings
7082	Add version information to the version file .
7083	Read mash output into a JSON file
7084	Colorized print .
7085	Parse procs dictionary .
7086	Collect processors .
7087	Try to guess file compression .
7088	Get the range from a qual string .
7089	Returns a list of valid encoding strings
7090	Parse the coverage table .
7091	Filter assembly file based on minimum coverage .
7092	Filter bam based on coverage info
7093	Evaluate the minimum assembly coverage .
7094	Get assembly size .
7095	Parse assembly mapping file .
7096	Convert CamelCase to CamelCase .
7097	Returns a map of class names to process classes .
7098	Process a newick file
7099	Compute a fasthull for each sample
7100	Maps data to data
7101	Apply median filter .
7102	Compute the KNN for a Gaussian kernel .
7103	Compute the SSM
7104	Compute the N - dimensional correlation matrix .
7105	Gaussian filter .
7106	Compute euclidean distance matrix
7107	Circular shift matrix
7108	Create embedding space for embedded space
7109	Helper function for plotting .
7110	Plot boundaries .
7111	Plots labels for each label
7112	Plot a single track
7113	Plot a tree .
7114	Get a list of feature segments .
7115	Compute the 2D Fourier Transform from a list of feature segments .
7116	Compute the similarity matrix for each feature .
7117	Fit the scatter plot .
7118	Fit the scatter_range to the data .
7119	Read references from an audio file .
7120	Find an estimation for a Sandbox .
7121	Save estimations to a file .
7122	Returns a list of all available algorithms .
7123	Get a configuration dictionary .
7124	Get dataset files .
7125	Reads and parses the hierarchy for the given annotation .
7126	Get the duration of a feature file .
7127	Convert a sequence of times and labels into a file .
7128	Get the path to the dataset file
7129	Attempt to align the segments of the segmentation .
7130	Estimate the beat times for each frame .
7131	Read the beat annotations .
7132	Compute beatsync features .
7133	Read features from file .
7134	Write features to a JSON file .
7135	Returns a list of parameter names .
7136	Compute framesync times .
7137	The frame times for each frame .
7138	The features of the audio file .
7139	Select features .
7140	Preprocess the features .
7141	Preprocesses the input and labels .
7142	Run the command - line tool .
7143	Print results to logger .
7144	Compute GTF results .
7145	Compute the information gain for an annotation .
7146	Process a track file .
7147	Generate results file name .
7148	Process a single track .
7149	Creates a new config variable .
7150	Compute all features for a given audio file .
7151	Process input files .
7152	Gaussian cost function .
7153	Lognormalize a matrix .
7154	Normalize a matrix so that it is equal to 0 .
7155	Normalize X .
7156	Get frames for a given duration
7157	Remove empty segments from times and labels
7158	Calculate Sonify clicks .
7159	Synchronize labels to new labels .
7160	Process the segmentation level .
7161	Align two hierarchies
7162	Compute the distance of the node at the given index .
7163	Estimate the knee of the model .
7164	Extracts data from a dataset .
7165	Run kmeans on X
7166	Compute bic correlation coefficient .
7167	The magnitude of a vector .
7168	Extract bounds from a JSON file .
7169	Load bounds from json file .
7170	Extract labels from a JSON file .
7171	Loads a list of beats from a json file .
7172	Compute the Fourier shift of X .
7173	Compute the label matrix for each label .
7174	Filter activation matrix .
7175	Get the boundaries module corresponding to the boundaries_id .
7176	Get labels module from labels_id
7177	Run a hierarchy on an audio file .
7178	Load data from a flat file .
7179	Run algorithms for the given audio file .
7180	Process a single track .
7181	Process an audio file .
7182	Update the weight matrix .
7183	Translate source text .
7184	Decorator for coroutine functions .
7185	Create accumulator .
7186	Convenience function to run the translator .
7187	Yield words from an iterable .
7188	Receive lines from inputstream .
7189	Decorator for push_url
7190	Translate source to target language .
7191	Read the translation table for a given language .
7192	Print the translation table for a given language .
7193	Remove nodes from the network .
7194	Write a network to an HDF5 file .
7195	Construct a network from a Pandas HDF5 file .
7196	Set the access variable for the given node ids .
7197	Calculate aggregate accessibility variables .
7198	Returns a list of node ids for each node
7199	Plot the data .
7200	Set the pois for the given category .
7201	Get the nearest pois for a given category .
7202	Return a list of nodes that are low connectivity .
7203	Processes a single node
7204	Make Osm query
7205	Build a node query .
7206	Returns a Pandas DataFrame containing node data .
7207	Returns True if value is a regex expression .
7208	Compare the given value with the given expectation .
7209	Decorator for fluent functions .
7210	Compare the given value against the given value .
7211	Trigger method callbacks .
7212	Matches the given request .
7213	Get matchers by name
7214	Initialize a Matcher .
7215	The body .
7216	Sets the body of the response .
7217	Set the value of a key .
7218	Append functions to the list .
7219	Invoke pook . request
7220	Sets the URL .
7221	Sets the headers .
7222	Matches headers .
7223	Matches headers .
7224	Sets the Content - Type header .
7225	Add query parameters to the request .
7226	Sets the body of the request .
7227	Sets the JSON of the request .
7228	Sets the XML matcher for the request .
7229	Load a file .
7230	Sets the object to persist .
7231	The error .
7232	Reply to the mock
7233	Match a request .
7234	Wrap a function asynchronously .
7235	Set the mock engine
7236	Enables or disables the network .
7237	Create a mock
7238	Remove a mock from the list
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Returns True if the request should be used .
7242	Match a request .
7243	Make a copy of this request .
7244	Decorator to activate the engine .
7245	Temporarily switch the engine .
7246	Adds an interceptors to the engine .
7247	Removes an interceptor by name
7248	Get setting from settings_dict
7249	Returns the SQL for the decrypted column .
7250	Set the original value before saving .
7251	Get the placeholder for the database .
7252	Returns a decrypted col
7253	Returns a placeholder for the public_PGP_KEY .
7254	Takes a dictionary of keys and attempts to find the keys that are repeated .
7255	Base regression .
7256	The covariance matrix .
7257	Recurse through the tree .
7258	Calculates the distances between all nodes in the tree .
7259	Propagate the weighted mean and variance .
7260	The explained variance of the tree .
7261	Compute the regression model .
7262	Find the best root node
7263	set Tc values
7264	Calculate the number of branches in the tree
7265	Cost function to compute the cost of a branch
7266	Attach this branch to the tree .
7267	Optimize the coalescent time scale
7268	convert profile to sequence
7269	Normalize a profile .
7270	sets gtr
7271	set GTR model
7272	set the sequence length
7273	Add sequences to the tree .
7274	Prepare the tree .
7275	Calculate the tree nodes .
7276	Calculate the root distance of the tree .
7277	Reconstruct ancestral sequences
7278	Get the branch mutation matrix for a given node .
7279	Returns the expanded sequence .
7280	Create the Fitch profiles
7281	Return the state of the node at pos .
7282	Find the overlap of two arrays .
7283	get the sequence LH for a given position
7284	Calculates the ancestral likelihood of the tree .
7285	Returns the maximum branch length given a node .
7286	Optimizes branch lengths
7287	Optimized branch length optimization
7288	Optimized branch lengths .
7289	Optimizes sequences and branch lengths .
7290	Reconstruct the alignment
7291	Quaternion Q .
7292	Creates a CustomTrunc instance with the given parameters .
7293	Defines the standard model .
7294	Fix the GTR rate matrix .
7295	Probability probabilistic probabilistic .
7296	Optimized version of the optimal T
7297	Optimizes the optimal transport for compressed sequences .
7298	Calculates the probability of a given profile .
7299	Evaluate the expression at time t .
7300	Logical log of a sequence .
7301	Set branch length mode
7302	Filter the clock model
7303	Plot root to tip
7304	Recursively resolve polytomies
7305	Prints the log - likelihood of the tree .
7306	add coalescent prior model
7307	Finds the best root position
7308	Asserts a tree .
7309	Create GTR model
7310	Read a VCF file .
7311	Perform ancestral reconstruction .
7312	Calculates the FWHM for a distribution .
7313	Create a new distribution with a given weight .
7314	Multiply distributions .
7315	Assign dates to the tree
7316	Setup a TreeRegression instance .
7317	Calculates the maximum likelihood tree .
7318	Compute the likelihood of the tree .
7319	Convert dates to dates
7320	Calculates the date uncertainty of a node .
7321	Returns the maximum posterior region of a node .
7322	Returns the minimum value of the interpolation object .
7323	Calculate median interpolation .
7324	Returns a numeric date .
7325	Create a DataFrame from a Regression model .
7326	Connect to guacd server .
7327	Close the connection .
7328	Receive instruction .
7329	Send data to the server .
7330	Sends an instruction .
7331	Send a handshake .
7332	Convert unicode string to utf - 8
7333	Load an instruction from an instruction .
7334	Encode an argument .
7335	Encode the instruction .
7336	Returns the URL for the resource .
7337	Returns the URL to this instance .
7338	Returns the URL for the resource .
7339	Download the file .
7340	Retrieve the parent job .
7341	Ask user for credentials .
7342	Login to the user .
7343	Print user information .
7344	Print user information .
7345	Add filters to the query .
7346	Return a new GenomicFilter with the specified range .
7347	Return a new GenomicFilter with the specified position .
7348	Get the facets for this query .
7349	Recursively process filters .
7350	Gets the next row .
7351	Execute a query .
7352	Creates a new Dataset migration .
7353	Entry point for solver .
7354	Downloads a vault from a local path .
7355	Construct a new instance from a dictionary .
7356	Log out the user .
7357	Send a request to the API .
7358	Retrieve a child object .
7359	Cancels the object .
7360	Parse SNPs annotation .
7361	Convert a row to a dictionary .
7362	Get credentials from netrc file .
7363	save to file
7364	Format a value
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Formats a table .
7370	Migrate this dataset to another dataset .
7371	Validate a full path .
7372	Upload a file or folder .
7373	Validate vault path .
7374	Validate API host URL .
7375	Add files to the manifest .
7376	Annotate a list of records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new formatatter handler .
7380	Format the output data .
7381	Wrapper for tabulate
7382	Get user configuration directory .
7383	r Returns a list of system configuration directories .
7384	Read the default config and validate it .
7385	Read configuration files .
7386	Path to the user config file .
7387	Returns a list of system config files
7388	The list of additional files
7389	Write the default config file .
7390	Read configuration files .
7391	Truncate string to max_width .
7392	Replace occurrences of strings in s .
7393	Call multiple commands in a sequence .
7394	Apply options to a command .
7395	Apply an option to the command .
7396	Initialize options .
7397	Run pep8radius .
7398	Run all of the commands .
7399	Truncate string rows .
7400	Format a list of numbers .
7401	Format a row .
7402	Translate data into a vertical table .
7403	Generate table data .
7404	Render a template file .
7405	Checks if the given type is numeric .
7406	Returns True if type is bool
7407	Returns True if type is a binary type .
7408	Generate a key from a template .
7409	Generate public key pair .
7410	Finds objects matching the template .
7411	Insert image into image .
7412	Export gene panels .
7413	Modify to the first weekday
7414	Increment the occurrence of a given day .
7415	Reverse datetime . repeat .
7416	Calculate counts for biweekly events .
7417	Handle a single chunk event .
7418	Returns a list of variants .
7419	Export verified variants .
7420	Export variants to a single file
7421	Update a user .
7422	List str variants .
7423	Get individual variant information .
7424	Get variant information .
7425	Verify a variant .
7426	Export a CLINAR variable .
7427	Get cancer variants .
7428	View a variant .
7429	View an evaluation .
7430	Get APG .
7431	Upload a panel to an institute .
7432	Download verified excel file .
7433	Get gene IDs by alias .
7434	Add incomplete menetrance info to genes
7435	Link the ensembl gene IDs .
7436	Send request to MME .
7437	Get nodes connected to MME .
7438	Get the coordinates of a chromosome
7439	Determines the sub category for a given variant
7440	Determine the length of the length of a variant
7441	Determines the end of a variant
7442	Parse the coordinates of a variant .
7443	Run cytoband analysis .
7444	Create new panel list .
7445	Update a panel .
7446	Export a panel .
7447	Edit an existing gene .
7448	save a delivery report
7449	Get HPO terms .
7450	Show whitelist users .
7451	Build a phenotype object
7452	Get information about a gene .
7453	Convert a query into a list of dicts .
7454	Index of institute .
7455	Show transcripts .
7456	Displays events for a given day .
7457	Parse variants query
7458	List variant variants
7459	Creates a variant object
7460	Creates a variant object .
7461	Parse a variant
7462	Generate header for variants export .
7463	Get variant information from genes .
7464	Get predictions for each gene .
7465	Generate a variant case .
7466	Find the bam file if it exists .
7467	Get all occurrences of a variant
7468	Parse a gene .
7469	Convert a transcript object to a string .
7470	Return end position of variant
7471	Return the frequency of a variant
7472	Convert CLinsig object to human readable string
7473	Generate a link to the URL for the given variant object .
7474	Generate a URL for a cosmic link .
7475	Generate a URL for beacon .
7476	Generate a URL for the UCSC site .
7477	Check spidex .
7478	Get the expected inheritance of a variant
7479	Get a list of callers associated with a variant
7480	Show cancer variants .
7481	Export a CLARAR variable .
7482	Get the CLVariant submission for a variant .
7483	Get the ACMG for a variant .
7484	Submit a variant assessment .
7485	Convert the given object into an ACM object .
7486	Upload HGNC symbols to the database .
7487	Create an Excel file for verified variants .
7488	Export all genes to a . bed format
7489	Parse a clnsig string .
7490	Parse compound information .
7491	Show gene information .
7492	Build an individual from a dict .
7493	Load cancer variants .
7494	Get a specific case .
7495	List collection collections .
7496	Institute an institute .
7497	Update institute institute .
7498	Get file handle .
7499	Get net from request
7500	Returns the next and previous value of net .
7501	Check if the year is in the current date .
7502	Determine the weekday of a week .
7503	Parse case data .
7504	Add ped information from config data
7505	Parse individual data into a dict .
7506	Parse a list of individuals .
7507	Parse a case .
7508	Parse a ped file .
7509	Build an evaluation object .
7510	Create a report of MT variants associated with the given sample .
7511	Determines if a set of terms are pathogenic .
7512	Determine whether or not a pathogenic term is likely to be considered likely .
7513	Determines if the term is likely to bebenign .
7514	Parse the acmg terms .
7515	Add gene information for a variant
7516	Fetch variants from the database .
7517	Get all variants in sanger .
7518	Get a single variant
7519	Get gene variants
7520	Returns a list of individuals verified by institute_id
7521	Get the causatives of a institute .
7522	Checks the cascade of the corpus .
7523	Iterate over the causatives of the given variant .
7524	Delete variants for a variant type .
7525	Get variants that overlap a variant .
7526	Get all variants in the case .
7527	Retrieves the VCF for a particular variant type .
7528	Get variants for a given sample .
7529	Connect to a MongoDB instance .
7530	Get a list of submission objects from the form .
7531	Generate header for CLINVAR submission .
7532	Generate a list of CSV submission lines .
7533	Load ensembl transcript files
7534	Create a panel .
7535	Build an Exon object from the given information .
7536	Delete a panel .
7537	Delete indexes .
7538	Delete user from database .
7539	Delete genes collection .
7540	Delete exons .
7541	Delete a case .
7542	Show individuals .
7543	Parse MatchMaker matches .
7544	Shows information about cases .
7545	Load user object
7546	Login to Google .
7547	Build institute object .
7548	Delete an event .
7549	Creates an event
7550	Get all comments for a variant
7551	Get events for specified user
7552	Add a phenotype term to the institute .
7553	Removes a phenotype term from the database .
7554	Add a comment to the case .
7555	Extract the genotypes from the individuals
7556	Verify that coordinates match the given coordinates .
7557	Search for hpo terms .
7558	Export transcripts .
7559	Load all exons
7560	Get a region of a chromosome .
7561	Get all events for a given month .
7562	Return a queryset of all cancelations that have been cancelled .
7563	Parse requirements . txt file .
7564	Get an existing gene from the database .
7565	update a panel
7566	build new gene panel
7567	Export a panel to a panel .
7568	Get archive information .
7569	Migrate the data from the archive
7570	Migrate a case .
7571	Get evidence for a case .
7572	Load hgnc genes from the database .
7573	View the team s terms .
7574	Create a Flask application .
7575	Initialize extension .
7576	Register blueprint bindings .
7577	Configure coverage filter
7578	Show aliases for a symbol
7579	Build a panel object
7580	Export verified variants .
7581	Export variants .
7582	Returns a VCF entry for a variant
7583	Run the mongodb server .
7584	Generate an MD5 key for a list of arguments .
7585	Initialize the database .
7586	Setup the database .
7587	Index the index .
7588	Run SCout setup .
7589	Run Scout setup demo .
7590	Setup the experiment .
7591	Show institute information .
7592	Parse genetic models .
7593	Show gene panels .
7594	Insert institute .
7595	Update institute recipient .
7596	Get institute by ID .
7597	matches a date
7598	Parse date string .
7599	Show hpo_genes genes .
7600	Parse rank score entry .
7601	Create a user .
7602	Check connection to MongoDB .
7603	Initialize the MongoDB client .
7604	Load a delivery report .
7605	Adds a user to the database .
7606	Perform pileup
7607	Load the exons from the given lines .
7608	Update the compounds for a case .
7609	Add ensembl links to a gene .
7610	List gene aliases .
7611	Parse hgnc file
7612	Parse hgnc genes
7613	Get open clinvar submission for a user and institute .
7614	Updates aclin_subm_subm_id
7615	Get the clinvar_id associated with the given submission_id .
7616	Adds variants and case data to the database .
7617	Update the status of a clinvar submission .
7618	Get all clinvar submissions for a user .
7619	Delete a clinvar object .
7620	Convert a case to CLINVars .
7621	Parse hpo output .
7622	Show all genes .
7623	Show information about a gene .
7624	List genes in the database .
7625	Check if panels exist in the database .
7626	Load clinical SNV variants from the database .
7627	Load SCout genes from the given adapter .
7628	Decorator to render a template .
7629	Get institute and institute .
7630	Get institute of a user .
7631	Get hgnc_id from gene_info
7632	Update a panel .
7633	Load disease terms .
7634	Load the disease terms from the genemap file .
7635	Extract frequencies from the given variant .
7636	Extract the frequency from the variant info_key .
7637	Parse variant frequency file .
7638	List users .
7639	Build HGNC gene from gene info
7640	Load a gene panel .
7641	Load anOMMIM panel from the database .
7642	Compare two MIM panels
7643	Update mim version for new genes
7644	Add a gene panel to the database .
7645	Get a panel object
7646	Delete a panel
7647	Get a gene panel by ID .
7648	Gets genes from the database .
7649	Build a dictionary of gene names to panels .
7650	Update a panel .
7651	Add pending action to the panel .
7652	Apply the pending changes to the panel .
7653	Get the clinical symbols
7654	List cases .
7655	Emit an email .
7656	Load indexes into the database .
7657	Update the indexes .
7658	Drops all indexes
7659	Build a mongodb variant query
7660	Build a mongodb query .
7661	Build clinsig query
7662	Add genomic coordinates to the query .
7663	Add filters to the mongo query
7664	Wipe the database .
7665	Parse a panel from a CSV file .
7666	Build a CLNig object from the given info .
7667	Load multiple records into the database .
7668	Load multiple transcripts into the database .
7669	Load multiple exon objects into the database .
7670	Get information about a HGNC gene .
7671	Get HGNC ID for a given symbol .
7672	Get genes with a given HGNC symbol .
7673	Get all genes in the database
7674	Return the number of genes in the database .
7675	Drops the hgncene collection .
7676	Drop the transcripts collection .
7677	Drops the exons collection .
7678	Get all transcripts for a given build
7679	Convert hgnc symbol to Gene object .
7680	get gene by alias
7681	Get genes by alias
7682	Get all ensembl genes
7683	Convert the HGNC gene to HGNC symbol .
7684	Add hgnc_id to genes
7685	Build a dictionary of coding intervals .
7686	Update the omim database .
7687	Get all cases for a given institute .
7688	Get information about a case .
7689	View matchmaker results .
7690	Match criteria .
7691	Delete matchmaker .
7692	Generate a report for a case .
7693	Render a PDF report .
7694	Diagnosis of a case .
7695	Add phenotypes to the institute .
7696	Remove phenotypes from the database .
7697	Delete an event .
7698	View the status of an institute .
7699	Assign an institute .
7700	List HPO terms .
7701	Marks a variant as validation .
7702	Mark a variant as causal .
7703	Send delivery report .
7704	Share the given institute .
7705	Rerun an institute .
7706	Open research .
7707	Downloads a VCF2Ccyt closure .
7708	Send multiqc .
7709	Returns a list of cases
7710	Processes the case report .
7711	Generate coverage report .
7712	Get the list of CLAR variables associated with a user .
7713	Export MT variants to Excel
7714	Update the case s synopsis .
7715	Get a list of diseases from hpo IDs .
7716	Convert VCF tocyt closure .
7717	Returns a dictionary of institute information .
7718	Get all sanger entities in the database .
7719	Respond to match a user .
7720	Responsys . delete method
7721	Get matches for MME .
7722	Matches the MME .
7723	Download genes from the omim database .
7724	Parse variant callers .
7725	Build a transcript from a dictionary
7726	Load institute into database .
7727	Parse the CADD entry .
7728	Create a case .
7729	Update a single variant .
7730	Updates the rank of all variants of a variant
7731	Update variants of a variant
7732	Update compound objects in variants
7733	Update compound variants in the database .
7734	Update compounds on a case .
7735	Load a single variant into the database .
7736	Inserts a variant into the database .
7737	Load multiple variants into the database .
7738	Create a new case in case .
7739	Share a case .
7740	Handles the diagnosis of an organization .
7741	Marks a case as checked .
7742	Create an ordering for a variant .
7743	Returns a list of Sanger objects ordered by the given institute .
7744	Validate a variant .
7745	Marks a variant as causative .
7746	Updates the dismiss variant for a variant
7747	Update the ACMG for a variant .
7748	Parse variant ids
7749	Convert a simple ID into a string .
7750	Generate a MD5 key for a document .
7751	Convert hgnc_id to hgnc_id
7752	Get a variant ID from a variant object
7753	Get the number of cases in the database .
7754	Update the dynamic gene list based on HGNC symbols .
7755	Fetch a case .
7756	Delete a case .
7757	Adds a case to the database .
7758	Replace a case .
7759	update a case object
7760	Submit an evaluation for a variant .
7761	Get all evaluations for a variant
7762	Parse the list of transcripts
7763	Parse ensembl gene request
7764	Parse ensembl transcript request
7765	Parse an ENsembl line .
7766	Parse ensembl genes from file
7767	Parse ensembl exons
7768	Parse ENsembl exon request
7769	Initialize logging .
7770	Parse the omim line
7771	Parse MIMOM lines .
7772	Extract phenotype information from genemap file .
7773	Scrape genotypes and phenotypes .
7774	Convert string to int .
7775	Formats the calendar for a month .
7776	Formats the day .
7777	Format month name .
7778	Parses the popover .
7779	Extract panel information .
7780	Parse gene info .
7781	Parse gene lines .
7782	Parse a gene panel file .
7783	Show disease terms .
7784	Drop HPO terms .
7785	Get a list of users .
7786	Parse the conservations string .
7787	Extract the conservations from a variant
7788	Get general case information .
7789	Get a list of cases .
7790	Convert context to a HttpResponse .
7791	Returns the current year
7792	Check for cancelations for a given date
7793	Fetch a single hpo term .
7794	Search HPO terms .
7795	Get a disease term by its identifier .
7796	Get all disease terms for a gene .
7797	Load a disease term into the database .
7798	Given a set of terms return a list of gene ids .
7799	Read data from an HDF5 file .
7800	Set up the frequencies for each channel
7801	Set the time axis for the time axis
7802	Read a filterbank file .
7803	Compute the position of the LST .
7804	Fill the DC bin .
7805	Print information about the file .
7806	Calculate the extent
7807	Plot the waterfall .
7808	Plot time series .
7809	Write the signature data to a file .
7810	Calibration for bandpass .
7811	Convert data to sparse array
7812	Apply the Manger algorithm .
7813	Calculate the pressure and phase offsets for a given cross - section .
7814	Extract fracpols from a string .
7815	Write waterfall data to filenames
7816	Find the index of the closest element in xarray
7817	Rebin the input d
7818	Unpack the given data .
7819	Calculate the difference between two waterflows
7820	Plot the Stokes Diode using the Stokes Diode .
7821	Plot calibrated diode waves for a given DIO cross - section .
7822	Plot the gainoffsets for a given Dio - cross .
7823	Open a file .
7824	Set up selection parameters .
7825	Calculate the size of the selection
7826	Calculate the shape of the selection
7827	Set up the start and stop indices of the channels .
7828	Sets the frequencies for each channel
7829	Populate the timestamps of the file .
7830	Populate the frequencies for each channel .
7831	Calculate the number of channels
7832	Calculate the number of blobs for a given blob dimension .
7833	Determines if the array is heavy .
7834	Read the data .
7835	Read all data from file
7836	Read a row from the file
7837	Read data from the container .
7838	Update the header .
7839	Print information about the file .
7840	Write to file .
7841	Write to HDF5 file .
7842	Write to an hdf5 file .
7843	Determines the size of the blob .
7844	Detect the chunking data .
7845	Grab the plotted data
7846	Create spectra from GuppiRaw files .
7847	Read the first header .
7848	Find the number of data blocks in the file
7849	Print stats to stdout
7850	plot the next data block
7851	Generate filterbank header .
7852	Find the size of the file
7853	Run match_sum .
7854	Create HDF5 files .
7855	Folds the coefficients of the given data
7856	Integrate waterfall
7857	Calculate the flux for the spectrum .
7858	Calculate the center frequency for each channel
7859	Calculate F_ON and F_OFF
7860	Calculate density of waterfall
7861	Calculate the Tsys spectrum
7862	Calculate fluxes for waterfall
7863	Return the number of bytes in the file .
7864	Return True if filename is a filterbank file .
7865	Replace the header with a new value .
7866	Generate the signature string from the header .
7867	Convert angle to sigproc angle
7868	Calculate the number of bits in a file .
7869	Convert the traceback to a dictionary .
7870	Create a subparser for a record type .
7871	Create a parser for zonefile
7872	Removes comments from a string .
7873	Add a default name to the given text .
7874	Parse a single record .
7875	Parse a list of records .
7876	Parse a zone file .
7877	Quote a field in the dataframe
7878	Parse a schema string .
7879	Convert classes to python package .
7880	Generate the source code for a class .
7881	Disable auto store .
7882	Dump record in json - encodable object format
7883	Load a JSON record from a dictionary .
7884	Deserialize a JSON record .
7885	Adds a record to the database .
7886	Get the value of a record .
7887	Return a dict representation of this parameter .
7888	Decorator for mixin classes .
7889	Create a Record instance from a class .
7890	Generate schema dict for record .
7891	Get the root schema dict for a record .
7892	Read mr data from the input stream .
7893	Write output to output stream .
7894	Return a new OrderedDict with the given key .
7895	Query the resource .
7896	Get a search result .
7897	Return a list of entities with the given attributes .
7898	Extract an entity from the collection .
7899	Return a new quote for the given q
7900	Escape a filter .
7901	Returns the rotation matrix for a given axis
7902	Construct covariance matrix .
7903	Calculate the vertical error mean of the spectrum .
7904	calculate parallax error
7905	Gets the magnitude error .
7906	Gets the magnitude error of g .
7907	Make the plot
7908	Returns the average number of transits .
7909	Return the angular distance between two points .
7910	Transform cartesian coordinates .
7911	Transform sky coordinates to cartesian coordinates .
7912	Transform covariance matrix to Jacobian matrix
7913	Returns the error scaling factor for the given observable and beta .
7914	Make plot
7915	Make plot
7916	Takes a list of functions and returns the result .
7917	Decorator for help messages
7918	Convert a string to a unicode string .
7919	Apply a function to each item in the collection .
7920	Return a new QuerySet with only the elements that satisfy the given function .
7921	Filters the collection with the given function .
7922	Return a new Collection with elements from the collection .
7923	Return a new Collection with elements removed from the collection .
7924	Combine collections with others .
7925	Find the node with the given arguments .
7926	Return the path to the serach .
7927	Iterate over a group .
7928	Extract options from regdesc string
7929	Convert an event tuple into a string .
7930	Build a list of scheduled runs .
7931	Print the results .
7932	Print statistics to output file .
7933	Print the results to stdout .
7934	Removes comments from a string .
7935	Round to the nearest base value
7936	Split a list of indices into blocks .
7937	Calculate cache access
7938	Calculate the number of cycles for each cache
7939	Analyze the kernel .
7940	Run IAC analysis .
7941	Strip and uncomment a list of ASM lines .
7942	Strip unreferenced labels .
7943	Select the best block in the assembly .
7944	Select block pointer increment
7945	Parse the lines in the assembly file .
7946	Inserts the markers between two parts .
7947	Implements the IAC analysis .
7948	Main entry point for IAC .
7949	Simulate the kernel .
7950	generator for intergers
7951	Get the last modified datetime .
7952	Validate arguments .
7953	Run the script .
7954	Entry point for pickle .
7955	Symbol pos .
7956	Convert multidim declaration to 1 - dimensional arrays .
7957	Convert multidim array to 1 - dimensional array .
7958	Returns a list of nodes that match the given type .
7959	Force a function to be iterable .
7960	Make sure all datatypes are in the kernel .
7961	Set a constant .
7962	Subtract constants from expr .
7963	Returns the sizes of all variables .
7964	Calculate relative offset
7965	Removes duplicate entries .
7966	The iteration length of the iteration .
7967	Get the loop stack .
7968	Return the index of the expressions in the expression .
7969	Return a dictionary mapping variables names to their variables .
7970	Compute the relative distances between each symbol .
7971	Convert global iterator to indices .
7972	Get an iterator over the global variables .
7973	Convert a list of indices into a global iterator .
7974	Returns an iterator over the global iteration .
7975	Print kernel info .
7976	Print variables information .
7977	Print the constants info .
7978	Print the kernel code .
7979	Convert an expression into a symbol .
7980	Get the offset of an array
7981	Get the basename of an AST .
7982	Returns the index type of the loop .
7983	Build C ++ constants declarations .
7984	Returns a list of ArrayDecl declarations .
7985	Return a list of nodes that are not in the kernel loop .
7986	Build the array declarations .
7987	Find innermost loop in loop_nest .
7988	Build a kernel for array initialization .
7989	Build a dummy call .
7990	Build kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get kernel code .
7993	Build a kernel call .
7994	Get the main code .
7995	Compute the instrumentation analysis .
7996	Compile the kernel .
7997	Convert a string to sympy . Integer .
7998	Generate a unique identifier .
7999	Get the last modified datetime .
8000	Returns a CacheSimulator object
8001	Calculate the bandwidth for the given streams .
8002	Get the compiler and flags .
8003	Parse a perfctr event string .
8004	Ensures that there are no gaps in the sequence
8005	Get the path to the header file .
8006	Calculate the offset of a given iteration .
8007	Returns a list of load counts
8008	Get the number of hits in memory .
8009	Returns a list of misses
8010	Returns a list of all stores
8011	Returns the number of evicts in the memory .
8012	Get information about the machine
8013	Temporarily restore an environment variable .
8014	Configure the argument group .
8015	Print a summary of the results .
8016	Parse the README . md file .
8017	Schedule the job to retry .
8018	Build a purchase item
8019	Record the purchase in Sailthru .
8020	Get the course content from Sailthru
8021	Get course content from Commerce
8022	Update unenrolled list from Sailthru
8023	Send course refund notification .
8024	Send offer assignment notification email .
8025	Get the logger configuration .
8026	Retry the order of an order .
8027	Fulfill an order .
8028	Get Sailthru client .
8029	Get a key from the cache .
8030	Sets the given key in the cache .
8031	Get the configuration setting .
8032	Get the filename of a given variable .
8033	Get a value by version
8034	Get Oplus version .
8035	Returns a dictionary mapping file references to files .
8036	Populates dev_records from json data .
8037	Returns a list of all external files
8038	Set default values for all tables .
8039	Prepare extension info .
8040	Get extended name .
8041	Return a mapping of the short reference names to their short references .
8042	Get the value of a given column .
8043	Updates the value in the field .
8044	Update the dev .
8045	Set default values for fields .
8046	Add fields to the record .
8047	Removes the value at index .
8048	Insert value at index .
8049	Deletes the record .
8050	Register a record hook .
8051	Register a link .
8052	Create a regex for the given intent .
8053	Return the duration of the interval .
8054	Serialize event to JSON .
8055	Send an HTTP request to the server .
8056	Get information about a service .
8057	Try to create a directory .
8058	Configure a service .
8059	Register agent state .
8060	Set the recording state .
8061	Update the status of an event .
8062	Update the agent state .
8063	Get configuration file
8064	Update the configuration .
8065	Check the connection .
8066	Initialize the logger .
8067	Show the screen .
8068	Serve image from config
8069	Run multiple modules .
8070	Parse an ISO 8601 formatted string .
8071	Get current schedule
8072	The main loop .
8073	Main control loop .
8074	Make an error response
8075	Create a data response .
8076	Get internal state .
8077	Show upcoming events .
8078	Get a specific event .
8079	Delete an event .
8080	Modify an event .
8081	Extract parameters from configuration file .
8082	Process an incoming event .
8083	Start capture .
8084	Render the document to a fragment
8085	Returns a list of all resources that are not registered .
8086	Convert to a dictionary .
8087	Create a fragment from a dict .
8088	Add content to the response .
8089	Add a resource to the fragment .
8090	Add a URL to the fragment .
8091	Initialize the javascript function .
8092	Return a string with the given placement .
8093	Convert a resource to HTML .
8094	Handles GET requests .
8095	Render and return a standalone HTML response .
8096	Render the given fragment as standalone HTML .
8097	Calculates the FDR for each parameter
8098	convert values to one - dimensional array
8099	Given an error table and an error table find the values that are closest to the scores .
8100	Fast chromatogram hypothesis for each chromosome
8101	Generate a final error table .
8102	Calculate summary error table
8103	Compute error statistics .
8104	Find the cutoff value for the given scores .
8105	Score classifier .
8106	Implements the IPF file .
8107	Infer peptide from input file
8108	Implements a single protein file .
8109	Subsample an OWS file .
8110	Reduce input file to outfile .
8111	Backpropagate input files to outfile .
8112	Filter a list of sqmass files
8113	Get group by ID .
8114	Create a new group .
8115	Delete a group
8116	Get group members
8117	Update a group s members .
8118	Get the effective member count
8119	Checks if the given group ID is the effective member .
8120	Modify the Sphinx configuration file
8121	Create a new HDF5 dataset .
8122	Decrypt a key .
8123	Get stdin from stdin .
8124	Get the stdout of the process .
8125	Get stderr from stderr .
8126	Get the debug output .
8127	Yield stdin from stdin .
8128	Return a context manager that yields the stdout .
8129	Yield stderr from stderr .
8130	Context manager for debugging .
8131	Delete an account
8132	Empty a container .
8133	Decorator for stdout .
8134	Decorator for stderr .
8135	Write error message to file .
8136	Print the help for this parser .
8137	Print usage information .
8138	Print version information .
8139	Send a request to the server .
8140	Post an account .
8141	Delete an account
8142	Put a container .
8143	HEAD an object .
8144	Get an object from a container .
8145	Put an object into a container .
8146	POST an object to a container .
8147	Resolve an option in the options dictionary .
8148	Returns a copy of the current context
8149	Write headers to file .
8150	Auth client .
8151	Generate a temporary URL .
8152	Convert a value to a string .
8153	List all containers in a given container .
8154	Get a client .
8155	Encrypt a string using AES256 .
8156	Decrypt stream using AES256 .
8157	Uploads a directory structure .
8158	Put account .
8159	Put a container .
8160	Get the manifest body .
8161	Create a container .
8162	Download a temporary URL .
8163	Show information about a Trans .
8164	Print help for given command .
8165	Determine if the stream is empty .
8166	Encrypt a key .
8167	Get repository status .
8168	Get a pull request
8169	Get pull requests
8170	Write your forwards methods here .
8171	Returns a list of slider items
8172	Render a hero slider .
8173	Acquire the reader lock .
8174	Release the pool .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Removes a task from the registry .
8178	Get a task by its ID .
8179	Returns a list of tasks sorted by their id .
8180	Convert the object to a dictionary .
8181	Create a Task instance from a dictionary .
8182	Execute a Perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the query .
8186	Create an index .
8187	Create a mapping .
8188	JSON encoder .
8189	Write items to writer .
8190	Adds a task to the scheduler .
8191	Cancel a scheduled task .
8192	Get stored items .
8193	Validate task arguments .
8194	Creates an ArchivingTaskConfig .
8195	Perform a single job .
8196	Schedule a job asynchronously .
8197	Cancel a scheduled job .
8198	Run the job listener
8199	Listen for jobs .
8200	Schedule the scheduler .
8201	Schedules a task .
8202	Cancel a scheduled job .
8203	Handle a successful job .
8204	Log a failed job .
8205	Build the arguments for the job .
8206	Get the contents of a secret .
8207	Register a view .
8208	Decorator to register view .
8209	Reverse the request .
8210	Get view name .
8211	Extract the version from the version string .
8212	Resolve a key .
8213	Retrieve the engine from the given scheme .
8214	Parse a database path .
8215	Extract database configuration from a database URL .
8216	Parse a database URL .
8217	Login user .
8218	List users .
8219	Create new password .
8220	Adds the field to the view .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Get parser for setting type .
8224	Get settings from environment variables .
8225	Create a model from a model .
8226	Base64 encodes a string .
8227	Create a field from a dict .
8228	Create a validator from a dictionary .
8229	Computes the cartesian product of a parameter dictionary .
8230	Find the unique points in the given parameter list .
8231	Change the kwargs for logging .
8232	Decorator used to configure logging .
8233	Create directories for given filename .
8234	Returns a list of strings
8235	Rename a log file .
8236	Set the logger .
8237	Extract replacements from a given trajectory .
8238	Print progress bar .
8239	Check the arguments for the given parser .
8240	Convert a parser instance to a StringIO object .
8241	Find all options in the given parser .
8242	Searches for multiprocessing .
8243	Check if the log configuration file exists .
8244	Parses the log file .
8245	Recursively handle log files
8246	Create logging handlers and tools .
8247	Finalize the tools .
8248	Start stdout .
8249	Write buffer to stream .
8250	Compares two results .
8251	Compares two parameters .
8252	Decorator for executing a function .
8253	Marks a function as deprecated .
8254	Decorator for specifying parameters that are mutually exclusive .
8255	Decorator for deprecated keyword arguments .
8256	Decorator for retries
8257	Decorator for _prefix_names .
8258	Add parameters to the file .
8259	Run the network
8260	Euler euler scheme
8261	Add parameters to a trapezoid .
8262	Calculates the difference between two values
8263	Create a storage service .
8264	Create a storage service .
8265	Add parameters to a trajectory .
8266	Calculates the difference between two values
8267	Compact an HDF5 file .
8268	Determines if a group of parameters in a group .
8269	Builds a dictionary of model eqs .
8270	Pre - build the model .
8271	Build the model .
8272	Build the model for a given trajectory .
8273	Pre - build connections .
8274	Build the connections for the Brian model .
8275	Add parameters for simulation .
8276	Compute fano factor based on spike data .
8277	Compute the mean factor for each neuron .
8278	Compute the average Fano Factor for all exc neurons .
8279	Add components to the network .
8280	Adds the monitors to the network .
8281	Create path to output folder .
8282	Plots the result of a given job .
8283	prints the graphs of the graph
8284	Analyze a single subrun
8285	Get batch number from argv
8286	Explore a single trajectory .
8287	NNTreeNodeVars object .
8288	The function for this node .
8289	Rename the field .
8290	Sets the internal details .
8291	Translate a node to a message .
8292	Removes a sub - tree from the tree
8293	Delete a node from the tree .
8294	Removes a node from the tree
8295	Removes the node at the given branch .
8296	Translate a short name into a string .
8297	Add prefix to the root node .
8298	Determines the types of a node .
8299	Add a generic type to the group .
8300	Add a node to the tree .
8301	Create a link pointing to an instance .
8302	Ensure the given list of split names are valid .
8303	Create an instance of the given type .
8304	Create any parameter or result node .
8305	Sets the details of a tree node .
8306	Iterate over the nodes of the given node .
8307	Create an iterator for child nodes .
8308	Recursive traversal of a node .
8309	Perform a shallow search .
8310	Search for a node by key .
8311	Backward search .
8312	The children of this node .
8313	Add a group from the storage .
8314	Add a leaf from the storage .
8315	Returns a list of all the data for this directory .
8316	Get debug information about the tree
8317	Get the parent of the parent
8318	Add group type .
8319	Add a link .
8320	Remove a link .
8321	Add a leaf element .
8322	Recursively remove a child .
8323	Remove a child from the group .
8324	Determines if an item exists in the tree .
8325	Get a default value from storage .
8326	Get the children of the node .
8327	Get the groups
8328	Get the list of leaf nodes .
8329	Get the list of links .
8330	Store a child in the group .
8331	Store this trajectory .
8332	Load a child by name .
8333	Recursively load a trajectory .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result group .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a config group .
8342	Compute the maximum value of individual .
8343	Add variables to the given commit .
8344	Make a git commit .
8345	Recursively flatten nested dictionaries .
8346	Create a nested dictionary from a flat dictionary .
8347	Print a progress bar .
8348	Get the arguments for a function .
8349	Get the kwargs for a function .
8350	Format timestamp as a string .
8351	Connect to a TCP port .
8352	Ensure that the given path is a directory .
8353	Reset the statistics for the given index .
8354	Get the remaining time remaining .
8355	Convert to a dict .
8356	Remove a key from annotations .
8357	convert annotation to string
8358	Makes an ordinary result .
8359	Makes a shared result .
8360	Create a shared data model .
8361	Store access data .
8362	Get the data node .
8363	Returns whether the shared result is supported .
8364	Create shared data .
8365	Saves the current state of multiprocessing .
8366	Receive a lock .
8367	Send the shutdown signal to the server .
8368	Finalize the connection .
8369	Start the client .
8370	Send a REP request
8371	Attempt to acquire the lock .
8372	Listen to the socket
8373	send data to server
8374	Detect the pid of the connection .
8375	Handle data .
8376	Run the loop .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store the given arguments .
8380	Add a message to a trajectory .
8381	Store trajectory references .
8382	Decorator that parses configuration variables .
8383	Return a dictionary of keyword arguments for the given section .
8384	Collect configuration variables from configuration .
8385	Interpret the configuration file .
8386	Add parameters from configuration file .
8387	Convert a rule number to a 2 - tuple .
8388	Make initial state .
8389	Plot a pattern .
8390	Implementation of cellular automaton .
8391	Takes a list of rules and maps them to a file
8392	Signal handler for update
8393	Get the overview group
8394	Load data into the service .
8395	Store data in the service .
8396	Load multiple items from an iterable
8397	Helper function to check hdf5 attributes .
8398	Generic function for storing multiple messages .
8399	Called when the file is closed .
8400	Extract file information .
8401	Backup a trajectory .
8402	Read row from table row .
8403	Prepare the trajectory to be merged .
8404	Load meta data fortrj
8405	Load a sub branch .
8406	Check the version of the current trajectory .
8407	Fill the run table in the overview group .
8408	Loads the explorations for the given traj
8409	Store the explorations for a given traj .
8410	Generate the overview tables for a service overview .
8411	Stores a trajectory .
8412	Store a sub - branch of a sub - branch .
8413	Create a leaf from the tree .
8414	Helper function to recursively traverse tree_trajectories
8415	Internal recursive function to store nodes in the tree .
8416	Store parameter or result table entry .
8417	Get or create a table .
8418	Get a single node by name .
8419	Set all attributes to recursively recursively
8420	Recall types of native types .
8421	All add or modify a row .
8422	Insert values into a row .
8423	Return an insert_dict for an item .
8424	Truncate string to max_length .
8425	Create a new HDF5 group .
8426	Helper function for _all_hdf5_groups .
8427	Store the annotations of an item .
8428	Load annotations from an item .
8429	Store a group in the group .
8430	Load a single trajectory into the graph .
8431	Loads all the annotations of a traj node .
8432	Extract flags from flags_dict .
8433	Add summary to the table .
8434	Add metadata table to group .
8435	Store data from a dictionary .
8436	Stores a parameter or result .
8437	Write data into the shared array .
8438	Write a shared table .
8439	Write a dictionary into a pytable object .
8440	Write data to PRM table .
8441	Write data into the group .
8442	Write data into the HDF5 file .
8443	Delete a link .
8444	Retrieve parameter or group from HDF5 .
8445	Write data into a pytable table .
8446	Makes a description from the data .
8447	Get the table column for the given column .
8448	Get the largest length of a list of strings .
8449	Load data into a dictionary .
8450	Load a dictionary into a dictionary
8451	Read shared data .
8452	Read a table from a table or group .
8453	Load an array into the PRM .
8454	Create a new Trajectory object .
8455	Makes the name of a set .
8456	Set property values .
8457	Overrides dynamic_import .
8458	Set the index of the run .
8459	Iterate over the trajectory .
8460	Shrink the tracked parameters .
8461	Add a preset .
8462	Set a parameter .
8463	Prepare the experiment .
8464	Retrieves a value from the run .
8465	Check if the run is complete
8466	Removes expanded parameter from disk .
8467	copy from node
8468	Iterate over all parameters in the trajectory .
8469	Update the run information .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalize the simulation .
8474	Loads the skeleton of the variable .
8475	Loads a variable .
8476	Backup the trajectory .
8477	Reversed wildcards .
8478	Merge two trajectories into the current one .
8479	Merge two runs into one .
8480	Rename a full name .
8481	Merge derived parameters from another trajectory .
8482	Merge links from another trajectory .
8483	Merge config files into this object .
8484	Merge two trajectories .
8485	Merge results from another trajectory .
8486	Migrate this trajectory .
8487	Store the current trajectory .
8488	Restore the default values .
8489	Set all of the parameters to the given index .
8490	Makes a single run
8491	Returns a list of run names
8492	Get the run information for the given name .
8493	Find the index of the elements in the collection .
8494	Starts a single run .
8495	Finalize the run .
8496	Set the start time of the run .
8497	Set the time of the run .
8498	Constructs an instance .
8499	Return a dictionary of values from a dictionary .
8500	Mark the run as completed .
8501	Get the configuration dictionary .
8502	Return the results as a dictionary .
8503	Store a single item in the storage .
8504	Fetch items from the stored trajectory .
8505	Remove items from an iterator .
8506	Delete links from an iterator .
8507	Recursively remove all children
8508	Delete items from the trajectory .
8509	Helper function for pooling .
8510	Wrapper for _frozen_pool
8511	Configure pool .
8512	Configure frozen pool .
8513	Process a single run .
8514	Configures frozen SCOOP data .
8515	Runs a single scoop .
8516	Configure the logging system .
8517	Configure niceness .
8518	Handles SIGINT handling .
8519	Start a single run
8520	Wrap logging .
8521	Load a class from a full string .
8522	Create a class by name .
8523	Returns the length of the parameter
8524	Returns a string representation of the evaluation .
8525	Compare two values .
8526	Get the range of the parameter .
8527	Explore the parameter .
8528	Expand this parameter to a range .
8529	Ensure that the data is of the same type .
8530	Store the contents of the object .
8531	Load the parameter from disk .
8532	Loads the data from a dictionary .
8533	Returns True if two values are equal .
8534	Returns True if data is a supported sparse matrix .
8535	Serialize a sparse matrix to a list of strings .
8536	Build a list of names for the given index .
8537	Reconstruct a sparse matrix from a list of data
8538	Loads the parameter from a dictionary .
8539	Store the data in a pickle .
8540	Loads the parameter from a dictionary .
8541	Translate a key to a string .
8542	Returns a string representation of the HDF5 file .
8543	Convert to a dictionary .
8544	Sets the positional and keyword arguments .
8545	Get a value from the result .
8546	Set a single result .
8547	Returns True if the given item is supported .
8548	Serialize the result .
8549	Load data from a dictionary .
8550	Set a single result .
8551	Store the result in pickle format .
8552	Load values from a dictionary .
8553	Merge all files into the current working directory .
8554	Upload file to Sftp server .
8555	Transfer file to Sftp
8556	Create a session .
8557	Merge trajectories
8558	Start the jobs .
8559	Multiply two reals
8560	Run euler integration .
8561	Post - process the firing rates .
8562	Add parameters for the experiment .
8563	Add an exploration of the given trajectory .
8564	Execute the pre - run of a network pre - run
8565	Execute a network run
8566	Extract subruns from a given traj .
8567	Execute a network run
8568	Adds parameters of a traj to the model
8569	Pre - build the network .
8570	Run the network .
8571	Run the network .
8572	Generate a filename for a given traj .
8573	Get the next item from the chain .
8574	Merge all trajectories in a folder .
8575	Handle SIGINT .
8576	Read config from a file .
8577	Request PIN .
8578	Request access tokens from ecobee .
8579	Refreshes the access token .
8580	Get a list of thermostats .
8581	Write tokens to config file .
8582	Set the HVAC mode .
8583	Set fan min on time .
8584	Sets the hold temperature .
8585	Sets climate hold .
8586	Delete a vacation
8587	Resume a program .
8588	Send a message to the thermostat .
8589	Set the humidity of a temperature .
8590	Generate a random delay .
8591	Generate a random timeout resending
8592	Generate the number of requests needed to renew the lease .
8593	Generate a renewing time .
8594	Returns a copy of self .
8595	Reset all attributes .
8596	Get the timeout for a given state
8597	Set the timeout of a state .
8598	Send discover packet .
8599	Select an offer .
8600	Send a DHCP request .
8601	Set the timers for the lease .
8602	Process a received packet .
8603	Process a NTP packet .
8604	Sets the initial timeout .
8605	Set the lease to BOUND
8606	RENEWING .
8607	Set the script to REBINDING .
8608	End the script .
8609	Called when an error occurs .
8610	Called when a response is received .
8611	This function is called when a request is received .
8612	Raise RENEWING .
8613	Raise REBINDING .
8614	Process an offer .
8615	Process ACK request .
8616	Process NAK .
8617	Receive ACK .
8618	Process NAK .
8619	Process ACK .
8620	Process NAK .
8621	Called when the client is renewing .
8622	Set the value of the query .
8623	Adds a parameter to the query .
8624	Return a copy of this query .
8625	Get the status of the server .
8626	Create the output dictionary .
8627	Run the command .
8628	Validate a message .
8629	Read a TDMS file .
8630	Add the transformation to the data .
8631	Convert a TDMS file to a FCS file .
8632	Test the difference between two files .
8633	Create a patch
8634	Delete the next patch .
8635	Delete a single patch .
8636	Check if a file exists in the patch .
8637	Backup a file .
8638	Add a file to the database .
8639	Run a Quilt command .
8640	Create the directory if it doesn t exist .
8641	Copy this directory to dest .
8642	Link a file .
8643	Copy file to dest
8644	Returns the directory of the file .
8645	Backup a file .
8646	Refresh the index of the Quilt patches .
8647	Unapply a patch .
8648	Unapplies the top patch .
8649	Unapply all applied patches .
8650	Apply a patch .
8651	Applies the next patch to the series .
8652	Apply all patches to the series .
8653	Read the series file
8654	Save the series to disk .
8655	Add a patch .
8656	Insert a list of patches .
8657	Add patches to the document .
8658	Remove a patch .
8659	Returns a list of patches after a given patch .
8660	Returns a list of patches before a given patch .
8661	Returns a list of patches that match the given patch .
8662	Replace a patch .
8663	Create the directory .
8664	Check version of python - quilt meta - data version .
8665	Add the argument to the parser .
8666	Add command line arguments to the parser .
8667	Add this parser to the given subparsers .
8668	Sets the arguments for subparsers .
8669	Add all subparsers to the parser .
8670	Check if a file is in the given patch
8671	Check file in next patches .
8672	Revert a file in the repository .
8673	Import a patch .
8674	Import patches from patches .
8675	Add a way to a way .
8676	Iterate over nodes that are not present in the graph
8677	Add a node to the graph .
8678	Build a route from a relation .
8679	Return the long name of the route .
8680	Get the agency ID from the relation .
8681	Process all public transport relations .
8682	Process a relation .
8683	Create dummy data .
8684	Patches a list of agencies .
8685	Generate dummy trips for a trip .
8686	Write the buffers to a ZIP file .
8687	Write all files to the destination .
8688	Build agency from relation tags .
8689	Extract stops from node .
8690	Generate a Shape from nodes .
8691	Get the supported versions .
8692	Send an APDU .
8693	Authenticate a list of devices .
8694	Register a new user .
8695	Authenticate using U2F
8696	Register multiple devices with the given parameters .
8697	Convert data to str .
8698	Decorator to wrap a function .
8699	Wrap a class in a class .
8700	Returns True if the filepath matches the given filepath .
8701	Get the email address .
8702	Return the first entry in entry_tree
8703	Convert markdown to reST .
8704	Serve the given configuration .
8705	Records the traceback of an exception .
8706	Convert a URL to a PNG image .
8707	Convert a string to an Image object .
8708	Decorator for validating images .
8709	Check if the image is big .
8710	Ensure that the given width is larger than the given width .
8711	Ensure that the given height is big .
8712	Parse the category .
8713	Parse the totals value .
8714	Get all the items from the parser
8715	Save an error .
8716	Parse the content of the source file .
8717	Parse an item .
8718	Returns an instance of the model with the given data .
8719	Save an item .
8720	Download a file from url to dest
8721	Load the file into memory
8722	Yield items from the CSV file
8723	Set the allowed network access settings .
8724	Run a command .
8725	Add files to the container .
8726	Add a file and rename it .
8727	Get all enrollments for a course
8728	Get all enrollments for a course
8729	Get all enrollments for a section
8730	Gets all enrollments for a specific section
8731	Get all enrollments for a user
8732	Enrolls a user .
8733	Get all roles in an account
8734	Get all roles in an Account
8735	Get all course roles in an account
8736	Get a role by its ID .
8737	Get a role by its ID
8738	Get a course
8739	Get course by sis_id
8740	Get all courses in an account .
8741	Get courses in an Account
8742	Get all courses in an Account
8743	Gets the published courses in an Account
8744	Get all courses for a given regid
8745	Create a new course .
8746	Updates a course .
8747	Get activity for a particular term .
8748	Returns a list of grades for a particular term .
8749	Get statistics for a particular term .
8750	Get activity by sis_id
8751	Get assignments by sis_id
8752	Get student summaries by sis_course_id
8753	Get the student activity for a given SIS user
8754	Get student messages for a particular SIS user
8755	Get all external tools in an account .
8756	Get all external tools in a course
8757	Create external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Ensure that the given object has all required parameters .
8761	Get user data .
8762	Get list of users for a course .
8763	Get users for a given SIS course
8764	Creates a new user .
8765	Get user s logins .
8766	Updates a user login .
8767	Extract next page from response headers .
8768	Get resource url .
8769	Get a paged resource .
8770	Make a GET request to the API .
8771	Make a PUT request .
8772	Generic POST operation .
8773	Generic DELETE operation .
8774	Get a list of Canvas admins .
8775	Create an admin .
8776	Create an admin by the SIS Account
8777	Deletes an admin from an account .
8778	Deletes an admin by user
8779	Creates a new grading standard for a course .
8780	Get a section by ID .
8781	Get a section by its Id
8782	Get all sections in a course
8783	Get all sections in a course
8784	Get all sections in a course
8785	Returns the sections with the given course
8786	Create a section .
8787	Updates a section .
8788	Returns a list of Quizes objects
8789	Get an account by ID .
8790	Get all sub accounts for the given account .
8791	Updates an account .
8792	Update SIS ID .
8793	Get sso settings .
8794	Updates the user s auth settings .
8795	Get a term by sis_id
8796	Imports data from a string .
8797	Imports a directory into SIS .
8798	Get the status of an import .
8799	Build the zip archive .
8800	Get all assignments for a course
8801	Updates an assignment .
8802	Get a list of report types associated with the account .
8803	Get a list of reports by type .
8804	Create a report .
8805	Create a course provisioning report .
8806	Creates a SIS export report
8807	Creates a UNUSED report .
8808	Get report data .
8809	Get report status .
8810	Deletes a report .
8811	Move detections in a label .
8812	Flip detections in pixels .
8813	Return a copy of an object .
8814	Get config from settings .
8815	If edit_empty_value is set to True it will be returned .
8816	Parse arguments and return a list of keyword arguments .
8817	Create new metric configurations .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics .
8821	Get a metric by name .
8822	Handles the home page .
8823	Handle metrics request .
8824	Respond to Wolfram .
8825	Fix the HTTPMessage
8826	Send data to Wolframalpha .
8827	Returns a list of information about this node .
8828	Iterate over the results of the Analysis Request .
8829	Encode the given data .
8830	Make a request to the API .
8831	HTTP GET operation .
8832	Perform a DELETE request .
8833	Send PUT request .
8834	POST data to a URL .
8835	Process a query .
8836	Group sentences into sentences .
8837	Disambiguate a PDF file .
8838	Disambiguate a query .
8839	Segment the text using the given text .
8840	Recognize text .
8841	Get a concept
8842	Fit the model .
8843	Compute the accuracy score for the given features .
8844	Fit the MDR .
8845	Fit the model .
8846	Compute the accuracy of the model .
8847	Fit the model to the grid
8848	Transform a feature matrix .
8849	Compute the score between features and targets .
8850	Predict the MDR model
8851	Iterate over n - way models .
8852	Plot the MDR grid
8853	Returns a dictionary with all the keys starting with the given prefix .
8854	Get a configuration value .
8855	Create vector from iterable of members .
8856	Create vector vector .
8857	Evaluate a file .
8858	Evaluate the given stream .
8859	Evaluate a string .
8860	Bootstrap base module .
8861	Run the compiler .
8862	Wrap a dispatch function .
8863	Adds a method to the map .
8864	Add a method .
8865	Get a method by key .
8866	Remove method from map .
8867	Remove a method by key .
8868	Return True if v is a macro .
8869	Get the location of the given form .
8870	Decorator for parsing form .
8871	Raise an exception if no recur .
8872	Assert that the node is tail .
8873	Resolve a bare symbol .
8874	Resolve a sym expression .
8875	Parse an AST .
8876	Whether or not the named variable is used .
8877	Adds a new symbol to the symbol table .
8878	Return a string representation of a list of dictionaries .
8879	Return a string representation of an iterable .
8880	Represent a Python object .
8881	Return a string representation of o .
8882	Ensure that the node s locations are present .
8883	Compile a form and execute it .
8884	Compile a module .
8885	Compile the given module .
8886	Compile a python module .
8887	Convert an iterable .
8888	Makes a string from a string .
8889	Removes a string from a string .
8890	Return a fraction .
8891	Get a logging handler .
8892	Maps a set of keys to a new mapping .
8893	Split a collection into n elements .
8894	Decorator to wrap a function with locator .
8895	Read namespace .
8896	Read a collection .
8897	Read a list .
8898	Read vector .
8899	Read a set .
8900	Read a map literal .
8901	Read a string .
8902	Read a symbol .
8903	Read a keyword .
8904	Read a meta comment .
8905	Read a list of functions .
8906	Read a quoted comment .
8907	Expand a syntax quote form .
8908	Process syntax quoted form .
8909	Read a syntax quote .
8910	Read a unquoted form .
8911	Read a Deref comment .
8912	Read a character from the reader .
8913	Read a regular expression pattern .
8914	Read macros .
8915	Read the next comment .
8916	Read the next token .
8917	Read expressions from a stream .
8918	Reads a string from a string .
8919	Read data from a file .
8920	Update the current location .
8921	Push back to the stack .
8922	Return the next token .
8923	Create a base64 - encoded bytecode .
8924	Get the basecode of a basilisp code .
8925	Return the path to the cache file .
8926	Imports imports from the meta_path .
8927	Find and return a module spec .
8928	Execute a cached BASIS module .
8929	Loads the given module .
8930	Execute a module .
8931	Create a Symbol object .
8932	Complete text .
8933	Get or create a PMap .
8934	Get a keyword .
8935	Given an iterable of Python objects return a list of PyASTStream objects .
8936	Load an attribute .
8937	Simple AST generator .
8938	Generate a collection of tokens .
8939	Add line numbers to the ast .
8940	Decorator to wrap a function into an AST .
8941	Decorator for ast . ast . ast
8942	Return True if v is dynamic .
8943	Determines if a variable is redefable .
8944	Convert an expression into an AST .
8945	Expand a function into a function definition .
8946	Determines if a function should be used for warning .
8947	Convert a DO node into a python ast .
8948	Generate a function name .
8949	Convert function arguments to Python AST .
8950	Convert a singlearity function into a python ast .
8951	Convert a list of functions into a python AST .
8952	Convert a function into a Python AST .
8953	Convert an IF statement into a Python AST .
8954	Convert an IF node into a python ast .
8955	Convert a Invoke node into a Python AST .
8956	Convert a quote node into a Python AST .
8957	Convert recur .
8958	Convert recur point to Python ast .
8959	Convert SETBANG to Python ast .
8960	Convert a THROW AST to a Python AST .
8961	Convert a Try node into a Python AST .
8962	Convert a local symbol to a python ast .
8963	Convert a variable find to a python ast .
8964	Convert a VarRef to a Python AST .
8965	Convert HOST_FIELD to python ast . ast . ast . ast . ast
8966	Convert maybe class to python ast .
8967	Convert maybe host form to python ast .
8968	Convert constant value to Python ast .
8969	Convert a collection literal literal to a Python AST .
8970	Generate Python ast .
8971	Iterate over the base module imports .
8972	Import from base module .
8973	Create an astroid . Namespace variable .
8974	Return a set of members .
8975	Return set of members .
8976	Visitor for ExceptHandler .
8977	Return node s value .
8978	Visit a function def .
8979	Visit a While node .
8980	Visit a Try node .
8981	Create a new module .
8982	Get the first element of an object .
8983	Return the rest of an expression .
8984	Get the nth rest of a collection .
8985	Find the next occurrence of a collection .
8986	Concatenate elements of o and o
8987	Convert o into a sequence .
8988	Concatenate multiple sequences together .
8989	Associate an object with the given kvs .
8990	Complex conjuction .
8991	Decorator for partial functions .
8992	Dereferenced object .
8993	Checks if two values are equal .
8994	Divide two literals .
8995	Sort a collection .
8996	Checks if the given collection exists in the given collection .
8997	Get a value from a given m .
8998	Convert o into a lisp dict .
8999	Convert an object to a python object .
9000	Represent an object .
9001	Collect arguments from Python variadic arguments .
9002	Decorator for trampoline .
9003	Decorator to set attributes on a function .
9004	Wrap a function with meta .
9005	Decorator for _asilisp_fn .
9006	Resolve an alias .
9007	Resolve a variable .
9008	Adds a python variable to the current namespace .
9009	Bootstrap Dynamic Var .
9010	Intern a variable .
9011	Interns an unbound variable .
9012	Find a variable by its name .
9013	Find a variable by its qualified name .
9014	Find a variable by its qualified name .
9015	Add a default import .
9016	Adds an alias .
9017	Emulate intern .
9018	Intern a new_var .
9019	Find a variable by symbol .
9020	Add an import .
9021	Get the imported module .
9022	Add a refer to a variable .
9023	Get the reference of a symbol .
9024	Refers the references to other symbols .
9025	Switches all the namespaces to another Namespace .
9026	Get a namespace by name .
9027	Get a namespace .
9028	Get a namespace .
9029	Removes a namespace .
9030	Returns a completion matcher that matches the completion pattern .
9031	Complete an alias .
9032	Autocomplete modules and aliases .
9033	Returns a list of internals for the given value .
9034	Completes the references for the given value .
9035	Complete the given text .
9036	A tuple of the arguments of the expression .
9037	Returns a list of members .
9038	Returns a list of members .
9039	Decorator to change the style of a scalar .
9040	Decrypt a JWS token .
9041	Encrypt a JWT .
9042	Delete an item from the cache
9043	Convert this instance to a Python tuple .
9044	Close the stream .
9045	Parse a FiQL string into an Expression object .
9046	Serialize a NDB model to a file - like object .
9047	Decode Python objects into Python objects .
9048	Decode a date string .
9049	Decode a value .
9050	Default encoder implementation .
9051	Validate the version string .
9052	Generate a changelog .
9053	Return strongly connected components .
9054	Robustly sort graph .
9055	Set the parent expression
9056	Returns the parent expression
9057	Adds operator to the current fragment
9058	Adds an element to the working fragment .
9059	Creates an AND operator .
9060	Create an operator expression
9061	Decorator for logging .
9062	Parse the received message .
9063	Convert a list of tuples into a OrderedDict .
9064	Return the first message or None .
9065	Prepare send message .
9066	flush socket messages
9067	Enable a slide .
9068	Saves a template to disk
9069	Load a template
9070	Get information about the device .
9071	r Read a Python file .
9072	Locate the package s package . json file .
9073	Parse package . json file .
9074	Raise an exception with a JSON error .
9075	Validate the response .
9076	homogenize two wave functions .
9077	Interpolate the dependent wave .
9078	Get the indep vector of the indep vector .
9079	Verify that two wavelengths are compatible .
9080	Load the systemjs manifest
9081	Return a tuple of callable parameters for module mname .
9082	Run a trace .
9083	Shorten a URL .
9084	Expand a short URL .
9085	Get stats for a short URL .
9086	Get statistics for the current user .
9087	Get DB statistics .
9088	r Print pypkg command .
9089	Echo a shell command .
9090	Log a message to stdout .
9091	Decorator to cache a property .
9092	Iterate over an iterable .
9093	Decorator for chunk processing .
9094	Flatten an iterable .
9095	Print a signal to stderr .
9096	Print a table .
9097	Create a dummy element .
9098	Convert a string to a number .
9099	CLI client .
9100	Trace the module .
9101	Print a list of links to the package
9102	Creates a common entry for the given version .
9103	Create a multi - entry for each Python module .
9104	Convert a comparison operator string to a list of words .
9105	Convert the noise into chunks
9106	Generate parameters for a chunk
9107	r Write a touchstone file .
9108	Bound a waveform to a given index .
9109	Build the units .
9110	Create a new wave operation
9111	Calculate the running area .
9112	Validate indep_min and indep_max arguments .
9113	r Compute the cosine of a wave .
9114	r Compute the cosine of a wave .
9115	r Return the arcsine of a wave .
9116	r Return the angle of the wave .
9117	r Calculate the average waveform .
9118	r Calculate the dB unit vector .
9119	r Derivative of the waveform .
9120	r Compute the inverse Fourier Transform .
9121	r Compute the Fourier transform .
9122	r Compute the Fourier transform .
9123	r Compute the real Fourier Transform .
9124	r Return the db for the given waveform .
9125	r Return the imaginary part of a wave function .
9126	r Compute the inverse Fourier transform .
9127	r Compute the phase of a waveform .
9128	r Compute the inverse Fourier transform .
9129	r Calculate the integral of a waveform .
9130	r Calculate the group delay .
9131	r Logarithm of wave .
9132	r Compute the coverage of the waveform .
9133	r Compute the integral of a wave .
9134	r Return the maximum value of the wave .
9135	r Return the minimum value of the waveform .
9136	r Phase of wave .
9137	r Round the wave .
9138	r Return the square root of a wave .
9139	r Return a subwave .
9140	r Convert a complex wave .
9141	r Convert complex wave to float .
9142	r Convert complex wave to integer .
9143	r Return the wf value of the wave .
9144	Find and return a list of JSPM packages .
9145	Extract a short description from a string .
9146	Build an expression from a list of tokens .
9147	Find the next delimiter in the list .
9148	Extract the functions from the expression
9149	Given a list of delimiter pairs return a tuple of tuples where the first element is the last two delimiter .
9150	Parse an expression .
9151	Removes duplicate delimiter from expr .
9152	Split text into pieces .
9153	Convert a number to a number .
9154	r Convert number to scientific notation .
9155	r Convert a number to a string .
9156	r Convert string to float .
9157	r Calculate peng fraction .
9158	r Return the Pengant number .
9159	r Return the power of a string .
9160	r Determine the math coefficient of a peng suffix .
9161	r Remove extra delimiters .
9162	Convert number to scientific notation .
9163	Convert number to scientific notation .
9164	Find the sourcemap comment in the file .
9165	Check if the app needs extension .
9166	Bundle the app .
9167	Trace the given app .
9168	Determine if this dep_tree matches the given dependencies .
9169	Format a hex dump of a hex string .
9170	Parse a docstring .
9171	Returns a list of valid identifiers .
9172	Implements add action .
9173	Split a line .
9174	Check the initial setup context .
9175	Return help text for builtin functions .
9176	Find a function by name .
9177	Lists all functions in the given context .
9178	Returns True if argument is a flag .
9179	Process a list of arguments .
9180	Extract the value from the argument .
9181	Invoke a single function
9182	Invoke the given line .
9183	Invoke the given string .
9184	Parse a parameter definition .
9185	Parse a return line .
9186	Classify section name .
9187	Classify a single line .
9188	Join paragraphs .
9189	Returns a string representation of the doc .
9190	Convert a value to a type .
9191	Convert a binary value to a type .
9192	Get the size of a type
9193	Formats the given value according to the given format .
9194	Validate the type object
9195	Checks if the given type is known .
9196	Split a complex type .
9197	Instantiate a complex type .
9198	Get a type by its name .
9199	Checks if the given format is a known format .
9200	Inject a type .
9201	Load a type module from a module .
9202	Returns True if spec is filled with positional arguments .
9203	Add a parameter .
9204	Defines a typed return value .
9205	Add a custom returnvalue .
9206	Match a short name .
9207	Get the type of a parameter .
9208	Returns the signature as a string .
9209	Format the return value .
9210	Convert a positional argument .
9211	Check the specification of the function .
9212	Convert an argument to a type .
9213	Formats the message
9214	Convert exception to a dictionary .
9215	Validate and execute a function and execute it .
9216	Parse a list of validators .
9217	Find all objects in a container .
9218	Create a context object from a module .
9219	Get the help text for a function .
9220	Decorator for parameter validation .
9221	Decorator to annotate a return value .
9222	Decorator to annotate a type .
9223	Decorator to annotate a context .
9224	Annotate a function .
9225	Decorator to annotate a function .
9226	Return the short description of a function .
9227	Load all available commands .
9228	Install cronos .
9229	Print all tasks in the crontab
9230	Uninstalls crontab .
9231	Create a new schema .
9232	Load project config files
9233	Save project config files .
9234	Define a singleton property .
9235	Get all dependencies of this project .
9236	Decorator to handle the project command .
9237	Initialize project .
9238	Set an item to a given value .
9239	Set an attribute on this object .
9240	Convert an iterable into a Series .
9241	Creates a setter for the current state .
9242	Creates a set of values for each state .
9243	Returns a function that applies a function to the state .
9244	Returns a function that collects n arguments .
9245	Implementation of the optimizer .
9246	Apply function f to pure state
9247	View the current fold .
9248	Convert Fold to list .
9249	Apply a function over the current state .
9250	Set the value of the current state .
9251	Iterate over an iterable .
9252	Returns the kind of optics .
9253	Run the game .
9254	Returns a copy of this vector with the given other vector .
9255	Handles input .
9256	Advance robots .
9257	End the game .
9258	Move the board .
9259	Play a game of naughts and crosses against the computer .
9260	Makes a move .
9261	The winner of this board if one exists .
9262	Yields the winners of the board .
9263	Add an item to the queue .
9264	Called when a spider is opened .
9265	Upload a chunk to S3 .
9266	Create a file - like object .
9267	Get account state .
9268	Get asset state .
9269	Get information about a block .
9270	Get the block hash .
9271	Get the system fee for a block .
9272	Get the contract state .
9273	Get the raw transaction .
9274	Get the storage of a script .
9275	Get the output of a transaction .
9276	Invoke a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send raw transaction .
9280	Validate an address .
9281	Calls a JSONRPC method .
9282	Return True if s is a hash256 hash .
9283	Check if a string is a hash160
9284	Encode the invocation parameters .
9285	Decodes an InvocationResult .
9286	Decorator to specify the first kwonly argument .
9287	Apply a timezone to a datetime .
9288	Apply the date to a datetime object .
9289	Render the template .
9290	Render the barcode .
9291	Calculate checksum .
9292	Render the code .
9293	Connect to the KVS session .
9294	Main entrypoint for S3 .
9295	Download a file from S3
9296	Upload a file to S3 .
9297	Downsync map_files to S3
9298	Print the difference between the environment and the given section .
9299	Parse an environment variable .
9300	Set basic configuration .
9301	Set API key prefix .
9302	Get all JSON content from a folder
9303	Get all available schemas
9304	Get the schema .
9305	Returns a jsonschema resolver for this resource .
9306	Validate an object .
9307	Get valid examples .
9308	Get invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of a OneDrive user .
9313	Get oneDrive object representing list of objects in a folder .
9314	Create a folder .
9315	Add comment message to a specified object .
9316	Convert or dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag &drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and then displays it
9324	Get parameter from tag .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components one pixel at a time
9331	delete all of the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update
9334	When dealing with a Top -Level window position it is absolute lower - right
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated with the wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the item from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	called when adding a control to the window
9349	Re - parent a child control with the new wx_obj parent
9350	make many copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all modules in the given rootpath
9354	Return a list of children sub - components that are column headings
9355	Update the grid if rows and columns have been added or deleted
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	collected the data based on the column indexed by col
9359	Remove all rows and reset internal structures
9360	Called to create the control which can derive from wxControl .
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell . Returns True if changed
9363	Return True to allow the given key to start editing
9364	This will be called to let the editor do something with the first key
9365	Decorator to register a type handler .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable all top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Set object attributes .
9373	Cleans up HTML table .
9374	Return the documentation for the given object .
9375	Mangle a signature .
9376	Import a module by its name .
9377	Autolink an object
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string or None if cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Set the icon
9386	Display or hide the window optionally disabling all other windows
9387	Open read and eval the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	translate gui2py attribute name from python card legacy code
9393	Write content to the clipboard data can be either a string or a bitmap
9394	Find the documentation in a docstring .
9395	Add the object and all its childrens
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Return the thumbnail as a string .
9401	Decorator for expression filters .
9402	Decorator for node filters .
9403	Assert that the current path matches the current path .
9404	Assert that the given path is not the current path .
9405	Assert that path has the current path .
9406	Assert that path has no path .
9407	Select an option .
9408	Apply filter to expr .
9409	Get a webdriver instance .
9410	Return an xpath representation of the expression .
9411	Returns True if the node matches the filter
9412	Switches to the given frame .
9413	Accept an alert .
9414	Accept a confirmation dialog .
9415	Shows a confirm dialog .
9416	Context manager to accept a prompt .
9417	Shows a prompt .
9418	Save the body to a file .
9419	Saves a screenshot .
9420	Raise server error .
9421	Determines if the filter matches the filter .
9422	Decorator to check if a field has been checked .
9423	Decorator to check if there is no field .
9424	Wrap an unchecked field .
9425	Wrap with no unchecked field .
9426	Assert that the query is text .
9427	Assert that there is no text .
9428	Assert that the title matches the given title .
9429	Assert that a title exists .
9430	Assert that the user has a title .
9431	Assert that a title has no title .
9432	Find all matching results .
9433	Find the first document matching criteria .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for setter methods .
9438	Synchronization decorator .
9439	Decide whether an error should be caught .
9440	Compares the count of the results .
9441	Return True if result is at least size .
9442	Checks if the options in the options dict are None .
9443	Return a failure message .
9444	Returns True if count matches the given criteria .
9445	Normalize text .
9446	Normalize whitespace .
9447	Turn text into a regular expression .
9448	Returns True if the current path matches the current URL .
9449	Resize the window to the specified width and height .
9450	Start the application .
9451	Sets the value of the property .
9452	Sets the instance method .
9453	Sets the class method .
9454	A string representation of the traceback .
9455	Get object source .
9456	Returns the logger for the given instance .
9457	Sets the logger .
9458	Make a request to the API
9459	Get channel list
9460	Get list of users
9461	Makes a message
9462	Translate a message to a user .
9463	Sends a message to Slack
9464	Read a channel from the network .
9465	Run the server .
9466	Run the client .
9467	get the difference between two dictionaries
9468	Colorize a message .
9469	Called when a task is started .
9470	Runs the v2 runner .
9471	Print stats to the console
9472	Called when a task is skipped .
9473	Convert prefix to addrmask .
9474	Decorator to check if value is empty .
9475	Add a model to the document
9476	Get all elements in the collection
9477	Load data from a dictionary .
9478	Convert dict to dict
9479	Parses the configuration .
9480	Parse the contents of the model .
9481	Returns a string representation of the configuration .
9482	Load all filters
9483	Find the YAML file for the given filename .
9484	Convert a model to a dictionary .
9485	Diff two files
9486	POST data to url
9487	Build the authorization code URI .
9488	Get an access token .
9489	Extract query params from url
9490	Dequeries a URL .
9491	Build a URL .
9492	Handle exception .
9493	Create a response object .
9494	Makes a redirect response .
9495	Make a JSON response .
9496	Handles authorization code .
9497	Refresh a refresh token .
9498	Get access token .
9499	Gets the authorization code from the given uri .
9500	Get token from POST data .
9501	Get the Authorization object .
9502	Open the device .
9503	Read a byte from the bus .
9504	Read bytes from the bus .
9505	Read a byte from the bus .
9506	Write bytes to the bus .
9507	Write a byte to the bus .
9508	Write i2c block data to the bus .
9509	Get CDN URL .
9510	Creates a copy of this object
9511	Create a local copy of this repository .
9512	Create remote copy .
9513	Construct a FileObject from a file info dict .
9514	Upload a file to the server .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Returns a list of file CDN URLs .
9518	Construct a new group from a group .
9519	Create a new group .
9520	Base operation for all uuids .
9521	Iterate over all files in the sequence .
9522	Generic function for api_list
9523	Generate a progress bar .
9524	Make a request to the API .
9525	Status of the home mode .
9526	List all cameras .
9527	Gets a list of cameras .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get camera motion set .
9531	Saves a MDP parameter .
9532	Update camera settings .
9533	Check if the li is the last one
9534	Yield all nodes of a single list
9535	Get the value of an ilvl
9536	get v merge element
9537	Return the grid span of the tc element
9538	Get the TD element at the given index
9539	Returns True if style is False False otherwise .
9540	Check if r is bold .
9541	Check if r is italics .
9542	Check if r is underlined .
9543	Check if p is a title .
9544	Yield the text content of a text run .
9545	Get the relationship information from the tree
9546	Get document data .
9547	Returns ordered list type
9548	Build list from list of nodes .
9549	builds tr element from meta data
9550	Recursively build table element .
9551	Get the content of a T tag .
9552	Remove tag from tree
9553	Find dataset and return filename
9554	Load MNIST dataset .
9555	Load the CIFAR dataset .
9556	plots images
9557	Plot a list of layers .
9558	plots filters
9559	Generate batches of arrays .
9560	Encode a string .
9561	Generate batches of the text .
9562	Predict a sequence of sequences .
9563	Add convolution weights .
9564	Encodes the input using the feed - forward algorithm .
9565	Decode a layer .
9566	Find output layer .
9567	Compute the autoencoder score .
9568	Predict function .
9569	Predicts the probabilities of the input .
9570	Predict the logit .
9571	Compute the score of the model .
9572	Create a batch at each sequence of features .
9573	Generate a batch of batches .
9574	Load a network from a file .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Find outputs matching patterns .
9578	Find params matching patterns .
9579	Create regularizers from kwargs .
9580	The list of variables .
9581	Compute the accuracy of the output .
9582	Scan the inputs .
9583	Build an Activation object .
9584	Generate a reservoir of samples .
9585	Set a loss
9586	Iterate over data .
9587	Trains the pool .
9588	Generate a hash of the model .
9589	Build the computation graph .
9590	The list of input layers .
9591	Returns the names of all variables in the model .
9592	Find the layer with the given parameter
9593	Compute the feed - forward function .
9594	Predict function .
9595	Compute the score of the model .
9596	Save the model to a file .
9597	Load a pickled model from a file .
9598	Calculate the loss .
9599	Build the graph for updates .
9600	The output size of the layer .
9601	Connect the input to the inputs .
9602	Bind the graph to the given graph .
9603	Resolve input shapes .
9604	Resolve output shapes .
9605	Logs the current state of the layer .
9606	Count the number of parameters .
9607	Convert a string to a format .
9608	Resolve the shape of a layer .
9609	Find parameter by key .
9610	Add a bias vector .
9611	Returns a dictionary representation of the model .
9612	Calculate the environmental variables .
9613	loggabor image
9614	Add a tier .
9615	Remove a tier by name .
9616	Get a tier by name .
9617	Convert the tier to an EAF .
9618	Add a point to the tier
9619	Add an interval to the tier
9620	Remove interval from tiers .
9621	Removes the specified time interval .
9622	Get all intervals
9623	Returns a list of tuples containing all intervals of the tier
9624	Indent an element .
9625	Add an annotation .
9626	Add an entry to the vocabulary .
9627	Add a description for a cv_id
9628	Add an external reference
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type .
9632	Add a file to the media .
9633	Add a locale .
9634	Add a secondary linked file descriptor .
9635	Add a tier .
9636	Remove all tiers from tiers
9637	Extract annotations from an EAF
9638	Generate an annotation id .
9639	Generate a timestamp for a time .
9640	Get the children tiers for the given id
9641	Get the full time interval
9642	Get the reference annotation data for the given ID .
9643	Get the reference annotation data for the given id .
9644	Get a list of tier ids for a given linguist .
9645	Merge tiers into a new tier .
9646	Removes all annotations from a tier
9647	Removes a cv description from the cortex
9648	Removes a license
9649	Removes all linked files from the media .
9650	Removes a property
9651	Removes the annotation for a given tier
9652	Removes secondary linked files
9653	Remove a tier by id
9654	Remove tiers from the heap .
9655	Rename a tier .
9656	Shifts the tiers of tiers
9657	Run the script .
9658	Display debug information for the storage
9659	Get the base level of text .
9660	Get embedding levels .
9661	Apply embedding to embedding .
9662	Calculate the number of runs
9663	Resolve weak types in the database .
9664	Resolve neutral types in the storage .
9665	Reverse a contiguous sequence .
9666	Reorder resolved levels .
9667	Get the current file
9668	Convert from PySide2 .
9669	Add a new value to an object .
9670	CLI command line interface .
9671	Maintain compatibility of bindings .
9672	Show the main window .
9673	Discovers all registered guis .
9674	Deregister all hosts
9675	Add to filemenu
9676	Context manager to temporarily restore selection
9677	Context manager to temporarily restore time .
9678	Return a message that is not registered .
9679	Load the types from the bot .
9680	Get the cumulative data .
9681	Get the values for a single axis
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters necessary to transform x and y coordinates
9684	Reverse a mapping .
9685	Iterate over floats .
9686	Add data .
9687	Add svg definitions
9688	Validate data .
9689	Burns the graph
9690	Calculate the left margin .
9691	Calculate right margin .
9692	Calculate the top margin .
9693	add a popup to the figure
9694	Calculate bottom margin .
9695	Draw the graph
9696	Make data point text .
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X - axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard - coded the styles into the SVG XML if style sheets are not used .
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to the client .
9709	Returns a list of matching patterns .
9710	Create a new nick
9711	Handle a Ping message .
9712	Handle registration .
9713	Main event loop .
9714	Register with the boss
9715	Main task loop .
9716	Decorator for callback methods that require a boss .
9717	Return the list of command patterns for the given worker .
9718	Called when registration is successful .
9719	Execute a task .
9720	add a worker
9721	Send an email to the user .
9722	Send password reset notification .
9723	Validate password strength .
9724	Verify token .
9725	Delete user .
9726	Allow the request .
9727	Returns a thread pool executor .
9728	Return an instance of docker client .
9729	The TLS client .
9730	The name of the service .
9731	Wrapper around docker API .
9732	Executes the given docker method .
9733	Check the status of the Docker service .
9734	Stop this service .
9735	Filter only unique email addresses .
9736	Update a new password .
9737	Update a new password .
9738	Validate email address .
9739	Update a user s token
9740	Delete a user .
9741	Check if the user is authenticated .
9742	Send email confirmation email .
9743	Update the expiration time of the object .
9744	Generate a password reset email context .
9745	Send email notification .
9746	Send email notification email .
9747	Custom validation email handler .
9748	Authenticate user data .
9749	Verify that the token has expired .
9750	Show Bokeh notebook content .
9751	Process the rendered plots .
9752	Build CustomJS callback
9753	Returns the widget with the given name .
9754	Render a function
9755	Formats a text widget
9756	Return a list of named objects .
9757	Returns the owner of a method .
9758	Assign the authentication values .
9759	Ping the server .
9760	Get information about the server .
9761	Gets the health of the cluster .
9762	Convert bytes to human readable string .
9763	Total CPU load .
9764	Get memory size .
9765	Get total amount of network .
9766	List of all volumes
9767	Get a volume by ID
9768	Get the size of a volume
9769	Get the percentage of usage of a volume
9770	Get the volume temp of a volume .
9771	Get the maximum volume temp .
9772	Get a disk by ID
9773	Login to the server
9774	Execute a GET request
9775	Execute a GET URL .
9776	Update the contents of the entry .
9777	Get system utilization
9778	Access the syno storage
9779	Create a context for a given request .
9780	Get the tenant token
9781	Helper function for building an attribute dictionary .
9782	Append one or more apps .
9783	Removes the specified apps from the INSTALLED_APPS setting .
9784	Get all global settings .
9785	Handles GET request .
9786	Get a value from configparser .
9787	Change a configuration value
9788	Migrate the configuration file .
9789	Start the server .
9790	Wait for a response .
9791	Get new access information .
9792	Verify that the token is present .
9793	Set access credentials .
9794	Refresh access information .
9795	Create the manifest table .
9796	Split the full path into bucket and normalize it .
9797	Determines if a bucket is a glacier .
9798	Extract the run_id from a file .
9799	Remove None values from a dict .
9800	Add a run to the table .
9801	Check if a run is in a manifest .
9802	Extract schema from uri .
9803	Convert schema name to snake case .
9804	Parse a list of contexts .
9805	Parse unstructured event .
9806	Transform a line of text into a JSON string .
9807	Convert a Snowplow event to JSON .
9808	Extract template from response .
9809	Print the context .
9810	Print the available variables .
9811	Formats the SQL query .
9812	Format Django context as HTML .
9813	Formats a dictionary as HTML .
9814	Escape text .
9815	Format object .
9816	Format object .
9817	Get a token from the given string .
9818	Get nodes from a string .
9819	Convert LaTeX text to text .
9820	Set the tex_input_directory .
9821	Read a tex file .
9822	Transform latex to text .
9823	u Converts a Unicode string into LaTeX equivalent .
9824	Convert a string to a Unicode string .
9825	Gets the organization information .
9826	Gets a list of boards .
9827	Gets the members of the group .
9828	Updates an organisation .
9829	Remove a member from the group .
9830	Adds a member by ID
9831	Adds a new member to the organization
9832	Retrieves information about the network .
9833	Adds a card to the account .
9834	Returns information about the label .
9835	Returns a list of checkItems that have been checked .
9836	Updates a label .
9837	Update a label .
9838	Get the authorisation url
9839	Gets card information .
9840	Get a board .
9841	Gets a list of resources .
9842	Gets a list of checklists .
9843	Adds a comment to the action .
9844	Add an attachment to this gist .
9845	Adds a new checklist .
9846	Add a label from a dictionary .
9847	Adds a label from the class
9848	Adds a member to the group
9849	Retrieves member information .
9850	Get cards .
9851	Returns a list of organisations .
9852	Creates a new board .
9853	Decorator for singleispatch methods .
9854	Returns information about the board .
9855	Gets a list of lists .
9856	Gets a list of labels .
9857	Get a card .
9858	Returns a list of checklists .
9859	Get an organisation .
9860	Updates a board .
9861	Adds a new list to the account .
9862	Creates a new label .
9863	Returns information about the checklist .
9864	Get the card
9865	Get checklist items from the card
9866	Updates a checklist .
9867	Adds a new checkItem to the account .
9868	Removes a CheckItem from the CheckItem
9869	Updates the card s name
9870	Updates the checklist
9871	Add authorization token to query parameters .
9872	Raise an exception if the response failed .
9873	Build the uri for the given path .
9874	Fetch a JSON response from a given URI .
9875	Create an organisation .
9876	Create a new board from a dict .
9877	Create a label from a label .
9878	Create a new list .
9879	Create a card from a json string .
9880	Create a new Checklist object from a JSON dict .
9881	Create a new instance of a member
9882	Get an organization
9883	Get a board
9884	Get a single list
9885	Get a card
9886	Get a single checklist
9887	Get a single member
9888	Extract a domain from a URL .
9889	Convert text to markdown text .
9890	Convert text to raw text .
9891	Convert text into text pairs .
9892	Set the password for a service .
9893	Split text with locations .
9894	Mark the given text in the given text .
9895	Mark begin and end of text .
9896	Run the command line .
9897	Create a Cipher object .
9898	Get the mode for a given mode .
9899	Minimum priority .
9900	Check the encryption scheme .
9901	Called when the client is listening .
9902	Makes a unique ID .
9903	Connect to the MQTT server .
9904	Handle a CONNACK packet .
9905	Encode a string .
9906	Decode a string .
9907	Encode a 16 - bit integer .
9908	Encode length .
9909	Decode length .
9910	Encodes the message .
9911	Encode a VCF message .
9912	Decode a packet .
9913	Encode the result .
9914	Decode the given packet .
9915	Decode a packet .
9916	Encode the message .
9917	Encode the message .
9918	Decode a packet .
9919	Encode the message .
9920	Encode the payload .
9921	Decode the given packet .
9922	Decode the packet .
9923	Get the URL for VK .
9924	Make a request to the API .
9925	Refresh the block list .
9926	Formats data .
9927	Fit data to data .
9928	Fit KMeans clustering to data .
9929	Fit mean shift to data .
9930	Fit the classifier to the data .
9931	Predict classifier .
9932	Assign clusters to the given size .
9933	Sort the clusters according to the cluster .
9934	Convert datetime to datetime
9935	get total number of points
9936	Returns the maximum time span of all times
9937	Convert a numpy array to unit pickle format .
9938	Return an element from a string .
9939	Convert an analyte string to a name .
9940	convert an analyte name to a mass name
9941	Collate all files in a given directory .
9942	Enumerate boolean array .
9943	Convert tuples to boolean array .
9944	Fast smoothing function .
9945	Fast gradient of an array .
9946	Find all elements that are within x
9947	Perform mean shift on data .
9948	Cluster k - means clustering .
9949	Cluster a set of data .
9950	Get all defined SRMS in the file
9951	Read the configuration .
9952	Read latools . cfg file
9953	Print all available configurations
9954	Copy the srm file to the specified location .
9955	Create a configuration file .
9956	Change the default configuration .
9957	Removes downhole pixels that are downhole .
9958	Apply a filter to a filter .
9959	The despike function .
9960	Autorange plot .
9961	Creates the indices for the time series
9962	Calculate ratio .
9963	Calculate calibration parameters
9964	Generate sample statistics .
9965	A dictionary of the translations of this period .
9966	Filter the selected analyte
9967	Filter gradients below a given threshold
9968	Calculate the correlation coefficient .
9969	Filter the correlation coefficients .
9970	Add a new filter
9971	Get the parameters for this filter
9972	Plot histograms of data .
9973	Calculate summary statistics .
9974	Load data from Google spreadsheet .
9975	Lookup a type by its type .
9976	Return a list of all isotopes
9977	Calculates the molecular weight of a molecule .
9978	Generate keywords .
9979	Emit a list of elements from a predicate and stack .
9980	Duplicate a stack .
9981	Calculate the weighted average of gaussian statistics .
9982	Gaussian function .
9983	Calculate standard deviation .
9984	Get the samples for the given subset .
9985	The despike function .
9986	Calculate the weighted mean of the background
9987	Calculate background interpolation .
9988	Subtract the background data .
9989	Calculate ratio .
9990	Make a subset of the analysis .
9991	Filter gradients based on thresholds .
9992	Fit a classifier .
9993	Apply classifier .
9994	Filter correlations between samples .
9995	Apply a filter on the data
9996	Remove all samples from the dataset
9997	Return a string describing the status of the filter .
9998	Defragment filter by threshold
9999	Filter all samples which are not removed .
10000	Plot the gradient histogram .
10001	Crossplot gradient plot .
10002	Plots histograms .
10003	Generate trace plots
10004	Plot the gradient plots for each sample .
10005	Run a filter on the data .
10006	Sample the stats .
10007	Retrieve statistics for each sample
10008	Export traces from LATOOLS .
10009	Export the traces to a file .
10010	Save the log to a file .
10011	Export the minimal analysis data to a ZIP file .
10012	Filter a file by regex
10013	Apply a function f to each element of the result .
10014	Plot PCA data .
10015	Compute the bayes scale .
10016	Scales the median to the median .
10017	Decompose noise with noise .
10018	Decompose expdecay .
10019	Add a filter
10020	Remove one or more sets .
10021	Clear the configuration .
10022	Removes unused components .
10023	Find the fuzzkey matching the fuzzkey
10024	Create a boolean array from a key .
10025	Grab filter from filters
10026	Return a string with all components
10027	Decorator to log a function .
10028	Write a log file .
10029	Read a log file .
10030	Decorator for auto login
10031	Get modem information .
10032	Send a SMTP message .
10033	Parse a file - like object .
10034	Return a link to the nbviewer .
10035	Render the thumbnail div .
10036	Code div .
10037	Code example .
10038	The URL for this node .
10039	Get the output file .
10040	Process the notebook .
10041	Convert notebook to python
10042	Generate a URL for download .
10043	Create thumbnail image .
10044	Extract the header and description from the header .
10045	Scale an image .
10046	Sets the thumbnail
10047	Copy the thumbnail figure
10048	Get the URL for a file
10049	Get the language code for a given field .
10050	Return a default value for field .
10051	Process the given image .
10052	Process the image before saving .
10053	Refresh the thumbnail cache .
10054	Get a list of all thumbnails
10055	Create a new image .
10056	Delete a thumbnail .
10057	Create a Thumbnail instance .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Called when a message is received .
10061	Subscribes a number of digits .
10062	Returns a set of all accepted states .
10063	Add a provider .
10064	Send a message .
10065	Create a receiver blueprint for a given provider .
10066	Return a mapping of receiver blueprints .
10067	Handle message received from provider .
10068	Handle a status message .
10069	Decorator for API methods .
10070	Forward an object to the client .
10071	Sign a web3 transaction .
10072	Estimate gas gas using web3 .
10073	Estimate gas gas for a gas .
10074	Write to the stream .
10075	Read a line from the serial port .
10076	Sends a message .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Add an attachment .
10080	Registers services .
10081	Import a module from a module .
10082	Register resources .
10083	Returns the value of a given key .
10084	Raise an exception if the given object is not handled .
10085	Setup the data manager .
10086	Calculate the N - dimensional residuals
10087	Cauchy equation
10088	Login to the backend
10089	Login to the backend .
10090	Returns a list of domains .
10091	Get all pages
10092	Update an object
10093	DELETE request
10094	Determines if two files are the same .
10095	Create a junction .
10096	Initialize the logger .
10097	Raise an error .
10098	Attempt to claim file readers .
10099	Generate a new column header based on the MuTect meta header .
10100	Attempt to claim VCF files .
10101	Initialize population stats .
10102	Claim the unclaimed VCF readers .
10103	Split data into individual lines .
10104	Returns the first line terminator of the given string .
10105	Return the first line terminator of data .
10106	Seek to the next line .
10107	Seek to the previous line .
10108	Return the last lines of the file .
10109	Return the head of the file .
10110	Follow the file and yield lines .
10111	Claim reads from strelka files .
10112	Parse a VCF record .
10113	Returns an OrderedDict of sample tag values .
10114	Return a set of tags for this VCF record .
10115	Join the fields of the info_dict .
10116	Return the format field for the sample
10117	Return sample field for given sample .
10118	Returns tab - delimited string of VcfRecord .
10119	Add sample tag value to sample tag values .
10120	Add or replace the filter .
10121	Return a list of available categories .
10122	Returns a form for product products .
10123	Generate staff products form .
10124	Add an error for a product .
10125	Memoise a function for a user .
10126	Factory for model fields .
10127	Returns items that are pending or pending .
10128	Send email .
10129	Iterate over OpenStreetMap streams .
10130	Parse an OSM file .
10131	Iterate over OpenStreetMap notes .
10132	Returns True if the user passes the filter
10133	Check if the user is met .
10134	Returns the remainder of a user .
10135	Pre - filter the queryset .
10136	Filter the queryset to include items that are not enabled .
10137	Pre - filter the queryset .
10138	Filter the queryset .
10139	Pre - filter the user s groups .
10140	Decorator for functions that modify the cart .
10141	Returns a cart for the given user .
10142	Extend the reservation for the cart .
10143	Applies a voucher
10144	Validate the cart .
10145	Checks the quantity of invalid quantities
10146	Recalculate discounts .
10147	Add discounts to the product .
10148	Decorator to register a report view .
10149	Iterate over the rows in the table .
10150	Get form from request .
10151	Render data .
10152	Lists all reports .
10153	List items sold on invoice
10154	Summarize sales summary .
10155	Show all payments
10156	List of credit note refunds
10157	Display product status .
10158	Display a list of discounts .
10159	Returns a list of tuples of product line items .
10160	Get paid invoices by date .
10161	Displays the credit notes .
10162	Displays invoices .
10163	Show attendees .
10164	View list of speaker registrations .
10165	Return a list of invoices .
10166	Returns the list of available categories .
10167	Get the amount of credit for the given context .
10168	Returns whether or not the user is sold out or not .
10169	Redirect to the page and redirect to the page .
10170	View the profile form .
10171	Handles profile forms .
10172	View a product category .
10173	Handles product form .
10174	Handles the voucher form .
10175	Checkout the current user .
10176	Handles the access of an invoice .
10177	View an invoice .
10178	View for manual payment form .
10179	Refund the invoice .
10180	Applies a credit note to an invoice .
10181	Updates the registration form
10182	Extend a user s reservation
10183	Send email out to recipients .
10184	Render a badge .
10185	Render a badge
10186	Returns a list of discounts for the given user .
10187	Annotate the queryset with the items in the queryset .
10188	Returns a list of available products .
10189	Applies the credit note to the invoice .
10190	Calculates the cancellation fee
10191	Generate an access code .
10192	Lazy evaluation of a function .
10193	Get an object from a module .
10194	Returns an Invoice for the given cart .
10195	Generate a manual invoice .
10196	Generates a product from a cart .
10197	Apply credit notes to invoice .
10198	Check if the user can view this invoice .
10199	Refresh the invoice from the database .
10200	Validates that the invoice is allowed to pay to pay .
10201	Updates the invoice s status .
10202	Marks the invoice as paid .
10203	Returns True if invoice is the cart of the invoice .
10204	Update the invoice s validity .
10205	Removes the invoice .
10206	Refund the invoice .
10207	Send email to invoice .
10208	Update the model with the given data .
10209	Flatten a field into a nested dict
10210	Print files to stdout
10211	Download the specified field .
10212	Get project data
10213	Get all processors
10214	Prints the inputs of a given processor .
10215	Update data from json .
10216	Upload files to a project .
10217	Upload a file to the server
10218	Download processor results .
10219	Recursively get all subclasses of c
10220	Get repo and project .
10221	Get suggested changes .
10222	Returns a list of variants with suggested changes .
10223	Search for variants matching the given coordinate query .
10224	Bulk search for variants by coordinates .
10225	Update the element .
10226	Removes duplicates preserving order .
10227	Authenticate using the Asana API .
10228	Prompt the user for select .
10229	Get data for an issue .
10230	Moves the saved data for an issue from another namespace
10231	Get saved task data .
10232	Get a task by its ID .
10233	Save data to file .
10234	Apply a user to the data .
10235	Decorator to handle ASAN errors .
10236	Flush the queue .
10237	Create a task .
10238	Formats a list of tasks with links to asana .
10239	Create a task in the Asana workspace .
10240	Returns a list of all data types of this project
10241	log a message to EK meter
10242	initialize serial port
10243	Set the polling values .
10244	Combine all fields in the VCF
10245	Get the JSON readings since the given timestamp .
10246	Set the context string
10247	Calculates PF .
10248	set max demand period
10249	Sets the meter password .
10250	Unpack a struct
10251	Convert the raw data into a string .
10252	Render meter data .
10253	Check the CRC of a meter read .
10254	split an ekm date into a tuple
10255	Get the buffer of months buffer
10256	Set CTR ratio
10257	Assign a schedule to the schedule
10258	Assigns the season schedule to the season
10259	Set season schedules
10260	Assign a holiday date to the calendar
10261	Read schedules from a table
10262	Extract the schedule for a given schedule
10263	Request the monthly Tariffs of the specified month .
10264	Extract data from the month .
10265	Read holiday dates .
10266	Extract holiday date from setting
10267	Read the settings .
10268	write command message
10269	send password auth request
10270	Update all observers
10271	Initialize LCD lookup
10272	Perform a request .
10273	Request the ACK data .
10274	Send a request to the serial port .
10275	Set the required fields .
10276	Calculates the fields of the meter .
10277	set display list
10278	Set the relay status .
10279	Send the termination string .
10280	Set pulse input to new_cnst
10281	set zero resettable kw
10282	Set the CRC on the device
10283	Iterate over fields .
10284	Iterate over schema fields .
10285	Returns a list of paragraphs .
10286	Generate a random text .
10287	Return a string with the timing information .
10288	Colorize text .
10289	Write text to the stream
10290	Return a summary of the result .
10291	Parse command line arguments .
10292	Setup the result .
10293	Run the tests .
10294	Run transform .
10295	Transform a description into a class definition .
10296	Transform the description of the description .
10297	Transform example .
10298	Filter the body of the example .
10299	Returns an ast . ast . Argument
10300	Register the path hook .
10301	Transform a byte string into a Python code object .
10302	Apply an argument parser .
10303	Load a module by its name .
10304	Load source from a file .
10305	Discover all files in a directory .
10306	Decorator to check the contents of a file .
10307	Check for messages in a file .
10308	Add a file .
10309	Remove a file
10310	Send a restart command .
10311	Calls the results .
10312	get process monitor
10313	Create a procmon service
10314	Refresh session .
10315	Remove all nodes from the list of nodes .
10316	Remove a node from the cluster
10317	Get the last updated time of a node
10318	Get all nodes .
10319	Refresh the session .
10320	Increment the number of times modified times
10321	Dereference the node .
10322	Returns a list of tokens interleaved with the given delimiter .
10323	Check if path is bad .
10324	Merges two inputs .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Convert a constant to a constant .
10328	Convert a function into an iterable .
10329	Convert a function into an iterable .
10330	Run a process .
10331	Create a TimerService object .
10332	Complete the given parser .
10333	Parse a literal .
10334	Make an optional parser .
10335	Creates a repetition of parser .
10336	Creates a repeating parser .
10337	Creates a new parser with a separator .
10338	Create a new parser with separator .
10339	Check all states in a given location .
10340	Close the state
10341	Checks the current state .
10342	Add a heartbeat to a master .
10343	Wrap a MultiService instance to wrap it into a MultiService
10344	Freezes the graph from a checkpoint .
10345	Freezes the model to a file .
10346	Save graph definition only .
10347	Save graph only from checkpoint .
10348	Save weights from checkpoint .
10349	Restore session from checkpoint .
10350	Parse the given tag .
10351	Render a tag .
10352	Validate tag arguments .
10353	Get the context data .
10354	Parse template tag .
10355	Get context data .
10356	Connect to the caffe model .
10357	Convert caffe def to tensorflow .
10358	Save graph only .
10359	Divide a sequence into multiple rows .
10360	Divide an iterable into a list of strings .
10361	Yield every item in an iterable .
10362	Removes duplicates from an iterable .
10363	Get the first item from an iterable .
10364	Iterate over the iterable until the next element is reached .
10365	Partition count items into a list of bins .
10366	Wrap an iterable .
10367	Context manager to suppress exceptions .
10368	Given an iterable of iterables return a list of tuples that have the same key .
10369	Assert that iterable is ordered .
10370	Swap the result of a partition .
10371	Partition a dict by key .
10372	Get the first n queues
10373	Reset the iterator .
10374	Parse an AS variable .
10375	Decorator to register a template tag .
10376	Get a descendant of the given chain .
10377	Fetch the records from the database .
10378	Iterate over an object .
10379	Select the given selector .
10380	Parse a selector .
10381	Process selector declarations .
10382	Return the parents of two nodes .
10383	Find the ancestors of two nodes .
10384	Find siblings of two nodes .
10385	Parse expr .
10386	Returns a list of objects that match the given validators .
10387	Ping an ICMP port .
10388	Send a request to the given url
10389	Expire expired items .
10390	Set the value of a key .
10391	Get a value from the store .
10392	Determines if a key exists in the store .
10393	Determine if the chain is valid .
10394	Create a NistBeaconValue from a JSON string .
10395	Create NistBeacon value from XML .
10396	Returns the rendered content .
10397	Apply fn to the logfile
10398	Get a list of rows .
10399	Validate token
10400	Returns a connection to the server .
10401	Validate token .
10402	Create token .
10403	Variant of counter32 .
10404	Calculate counter - clock value .
10405	Calculate the average duration .
10406	Setup the outputs
10407	Create sources from a configuration file .
10408	Send a list of events to the bus .
10409	Start the watchdog process
10410	Parse the format string .
10411	Parses the given line .
10412	Ensure that the field is a valid date .
10413	Raise ValidationError if the request has not been rejected .
10414	Verify the access token
10415	The name of the device .
10416	Raise an error if not found .
10417	Connects receiver functions .
10418	Create access link .
10419	Sends an accept notification .
10420	Send email notification to record .
10421	Send email verification email .
10422	Sends a reject notification
10423	Send a notification .
10424	Create new link .
10425	Validate token .
10426	Revoke the link .
10427	Create a new recipient .
10428	Get receiver by user
10429	Confirm the email .
10430	Accept a message .
10431	Reject this request .
10432	Create a secret link .
10433	Generate a SHA512 hash .
10434	Verify a signature .
10435	Determines if the given record is allowed .
10436	Handles access request .
10437	Confirm an access request .
10438	Return an instance of the SSH command client .
10439	Reverse column name
10440	The selected value .
10441	Returns the selected items
10442	Get the version of the file
10443	write version to file
10444	Initialize the ssh configuration .
10445	Start the timer .
10446	Wait for events to be run .
10447	Delete a shared link .
10448	connect to the server
10449	Stop the connection .
10450	Empty the queue .
10451	Called when the event is received .
10452	create a connection to the server
10453	create Elasticsearch client
10454	Encode an event .
10455	Encode a list of events .
10456	Decode a protobuf message .
10457	Sends multiple events .
10458	Generate a file preview .
10459	Retrieve a single file preview .
10460	Send dict to r_q
10461	main loop loop
10462	Returns True if the current time is logged .
10463	Respond to the server .
10464	Abort the SASL message .
10465	Perform SASL preparation .
10466	The admin footer .
10467	Build payment parameters .
10468	Build payment card parameters .
10469	Send a payment with an alias .
10470	Get the version string .
10471	Constructs the layout
10472	Called when the framework is finished .
10473	Configure shortcuts .
10474	Called when the item is activated .
10475	Handle selected item
10476	Updates the location of the user
10477	Finalize resources .
10478	Compile the resource .
10479	Clean the resources .
10480	Returns a list of children .
10481	Removes all children from the document .
10482	Returns the icon at the given index
10483	Run a subprocess .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open file descriptors .
10487	Redirect the given stream to the target .
10488	Set attributes on the form .
10489	Import an app module .
10490	Import all project modules .
10491	Implements the include .
10492	Returns the URL for the given object .
10493	Get the URL for a Gravatar .
10494	Validate that path is a valid filesystem location
10495	Validate a URL .
10496	Return the absolute path of a template .
10497	List objects in S3
10498	Build the worklfow json .
10499	Execute the GPDX operation .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Create a new ApiClient .
10505	Lists the contents of a folder .
10506	Download a file from Storage .
10507	Checks if the given path exists .
10508	Get the parent entity of a path .
10509	Create a folder .
10510	Uploads a file to the storage .
10511	Deletes a folder .
10512	Validate the storage path .
10513	Return a new instance of the client .
10514	Create a new Storage instance .
10515	Gets entity details .
10516	Sets the metadata for the specified entity .
10517	Get the metadata for an entity .
10518	Updates the metadata of an entity .
10519	Deletes the specified metadata for the specified entity .
10520	Get a list of projects .
10521	Gets the project details .
10522	Creates a new project .
10523	Deletes a project .
10524	Create a folder .
10525	Gets the details of a folder .
10526	Deletes the specified folder .
10527	Uploads a file to the server .
10528	Copies the content of a file .
10529	Get the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Sets the service to the given version .
10533	Sets the request s headers .
10534	Returns a copy of the parameters .
10535	Sets the thrown exception .
10536	Returns a list of field names .
10537	Apply a function to the job .
10538	Generate genotype GVCFs using gVCFs .
10539	Run oncotator .
10540	Sort OrderedDict .
10541	Returns the t
10542	Load data from folder
10543	Shift the time series by time
10544	Calculate the sum
10545	Collect information about the serial device .
10546	Create a new user .
10547	Parse vns page
10548	Parse release results .
10549	Parse the output of prod staff .
10550	Parse the results of a character search .
10551	Parses tags and tags
10552	Parse the user s results .
10553	Add a list of files to a tarball .
10554	Perform an operation on all the given files .
10555	Copy a file from the job store
10556	Build Spark configuration parameters .
10557	Return a list of docker parameters to be added to the command .
10558	Refresh the metadata from the database .
10559	Run MuTect using MuTect .
10560	Create a new document .
10561	Get the streams from the database
10562	Export the device s data to a directory .
10563	Search for vndb .
10564	Parse search results .
10565	Add a stream to the dataset .
10566	Reset the device to a new one .
10567	Get a list of users
10568	Create index files
10569	Connect to the server
10570	Add a stream to the database
10571	Add a stream to the database .
10572	Insert a value into the cache .
10573	Syncs all datapoints from the database
10574	Starts the thread .
10575	Stop reading thread .
10576	Download the given url to the file store .
10577	Uploads an s3am job to S3 .
10578	List all labels
10579	Print the ontology .
10580	Get the mean size of a BAM file .
10581	Get the container ID
10582	Run STAR index .
10583	Create a new document .
10584	Export the stream to a JSON file .
10585	Return the device object .
10586	Get all labels for an ontology
10587	Get the ontology hierarchy .
10588	Runs the tool .
10589	Populates the parser with the given config data .
10590	Get the contents of the config file .
10591	Get the mount point for the docker container .
10592	Add an option .
10593	Create an argument parser .
10594	Create a pipeline command .
10595	Set authentication .
10596	Raises an error if the response was not found .
10597	Ping the server .
10598	Create a new resource .
10599	Update a resource .
10600	Delete a path .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Get a list of devices
10604	Run the cutadapt adapter .
10605	Run FaidX on a ref_id
10606	Run samtools index
10607	Use sambamba to mark a BAM file .
10608	Run samblaster
10609	Mark duplicates in picard .
10610	Run Picard sort on a BAM file .
10611	Run base recalibrator .
10612	Run kallisto using kallisto
10613	Run rsem on a BAM file .
10614	Get the user affinity for a given test .
10615	Send a command to the socket .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Attempt to reconnection .
10619	Resubscribe to all subscribed subscribers
10620	Called when the connection is opened .
10621	Called when the websocket connection is closed .
10622	Called when connection is lost
10623	Process a message
10624	Ensure websocket connection is alive
10625	Run GATK SelectVariants to select variants .
10626	Run GATK VariantFiltration on the genome .
10627	Run gatk variant recalibrator .
10628	Apply variant recalibration to a VCF file .
10629	Run GATK combineVariants .
10630	Run quickcheck on a BAM file .
10631	Load handlers from a dictionary .
10632	Write configuration to file .
10633	Get the configuration from the config file .
10634	Get an ontology term
10635	Search ontology .
10636	Suggest a ontology .
10637	Iterate over all descendants of an ontology .
10638	Iterate over the labels of the given ontology .
10639	Iterate over the labels of the ontology .
10640	Iterate over terms of ontology .
10641	Run fastqc
10642	add a stream
10643	Create a Flask application .
10644	Start Spark master container .
10645	Start the Spark worker
10646	Start the datanode worker
10647	Stops the worker .
10648	Check the status of the worker .
10649	Tokenizer . Generates tokens stream from text
10650	Lookup a zone by name
10651	Fetch the R53 configuration for a zone .
10652	Merge config chunks into a single ElementRecordSet .
10653	Validate the changeset .
10654	Minimize members by score .
10655	Returns the fitness score of the group .
10656	The average cost function for each member .
10657	Med cost function .
10658	Returns the total number of parameters in the group .
10659	Get the list of members
10660	Add a parameter .
10661	Generate next generation .
10662	Normalize key - value pairs .
10663	Get environment variables .
10664	Calls the given callable with the given exceptions .
10665	Transform a list of packages into a list of packages .
10666	Transform a result to a string .
10667	Convert html to xhtml .
10668	Convert xhtml to HTML .
10669	Convert a document to a string .
10670	Open document in browser .
10671	Drop the tree .
10672	Drop tag .
10673	Get element by id
10674	Apply CSSSelector .
10675	Iterate over all logger members
10676	Get counts from environment variables .
10677	Returns True if count is a single class
10678	Check if a single module is a single module
10679	Ensure that the request is correct .
10680	Ensure the request id is valid .
10681	Attempt to decode the given path .
10682	Escape the arguments of an iterable .
10683	Return the codec name for the given encoding .
10684	Detect the encoding of the stream .
10685	Get the remote address of a forwarded_for .
10686	Convert obj to Decimal
10687	Create element from string .
10688	Parse a file .
10689	Convert BeautifulSoup tree to HTML .
10690	Get the current traceback .
10691	Format the exception as a string .
10692	Render the report as HTML .
10693	Generate plaintext traceback .
10694	Return a list of lines that are annotated .
10695	Render the source table .
10696	Try to find the version of an egg .
10697	Return the locations of the project .
10698	Find all versions of a given project .
10699	Find an installed install requirement .
10700	Sort a list of links .
10701	Get the Content - Type header .
10702	Iterate over links found in the document .
10703	Checks if this object is verifiable .
10704	Find all data files in the given package .
10705	Exclude files that match the given package .
10706	Parse a requirements file .
10707	Join an iterable .
10708	Ignore comments .
10709	Compile a marker .
10710	Transformer AST node .
10711	visit an attribute node by returning a fresh instance of it
10712	Coerce a string into a number .
10713	Make a copy of the current request context .
10714	Push the context to the stack .
10715	Remove the app context .
10716	Returns a copy of the current app .
10717	Match the request .
10718	Adds the current context to the request .
10719	Makes a relative path relative to a relative path .
10720	Check if a distribution is editable .
10721	Add a url - value preprocessor .
10722	Register a url default function .
10723	Register an error handler .
10724	Convert a generator to a function with context .
10725	Create a response .
10726	Generate a URL for the given endpoint .
10727	Safely join filename .
10728	Get the root path of a given import .
10729	Returns the jinja loader
10730	Run the script .
10731	Returns the domain domain for the session .
10732	Return a cache location for a link .
10733	Determine if the root directory is Purelib .
10734	Yield the paths of the installed packages .
10735	Verify that the wheel version is compatible with pip - version .
10736	Build a single wheel .
10737	Iterate over all code s names .
10738	Decorator for methods that need to be refreshed
10739	Add egg info to the list of files .
10740	Write the delete marker file .
10741	Check if the current environment is running under a virtualenv .
10742	Get the user s username
10743	Build distutils scheme .
10744	Parse the Cache - Control header .
10745	Get a cached request .
10746	Cache the response .
10747	Update the zipimporter cache .
10748	Load template file .
10749	Install site . py .
10750	Save the changes to the file .
10751	Convert a value into a Converter .
10752	Add filters to the given filters
10753	Configure handler .
10754	Add handlers to the logger .
10755	Common configuration for logger .
10756	Execute a script .
10757	Temporarily override the temporary directory .
10758	Return URL and revision .
10759	Get an item from an object
10760	Generate the given source .
10761	Compile jinja2 templates .
10762	Return default cache location .
10763	Find eggs in zip .
10764	Find distributions on the given path .
10765	Declare a namespace .
10766	Get the mRO of a class .
10767	Find an adapter for ob .
10768	Ensure a directory exists .
10769	Iterate over all entries in a group .
10770	Returns True if dist can be added to dist .
10771	Return the best match for req .
10772	Evaluate a marker .
10773	Evaluate markerlib .
10774	Format a single record .
10775	Formats a number according to locale .
10776	Parse a number pattern .
10777	Returns decimal number for given precision .
10778	Returns the decimal precision of a number .
10779	Get scientific notation elements .
10780	Returns the total seconds of a timedelta object .
10781	Parse a list of requirements .
10782	Determines if distutils is patched .
10783	Ensure that the given value is a valid requirements string .
10784	Fetch the egg for the given req .
10785	Roll dice roll .
10786	Convert obj to Price class
10787	Create a price object .
10788	Validate the request .
10789	Get a method from the app .
10790	Run the given method .
10791	The blueprint module .
10792	Returns the blueprint name .
10793	Decorator for error handling .
10794	Make an abstract dist .
10795	Add a requirement to install .
10796	Walks the requirements to install .
10797	Check if req_to_install is installed
10798	Schedule the requirements to install .
10799	Get all namespace packages
10800	Encode a model instance .
10801	Tokenize a document .
10802	Merge two HTML annotations .
10803	Copy annotations from src to dest .
10804	Compress tokens to a list of strings .
10805	Generate HTML for each token .
10806	Generator that expands a list of tokens .
10807	Locate the unbalanced index .
10808	Given a list of chunk tuples and a list of chunk tuples in chunks .
10809	Recursively flatten an element .
10810	Split text into words .
10811	Return start tag .
10812	Return end tag .
10813	Serialize an HTML fragment .
10814	Clean up the ins and del tags .
10815	Extract a constant from code .
10816	Generate a URL for a cache URL .
10817	Recursively links the given element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Decorator for validating API responses .
10821	Get a TreeWalker instance for the given tree type .
10822	Export svn repository .
10823	Get the revision for a given location .
10824	Decorator for setup methods .
10825	The name of the module .
10826	Propagate any exceptions to the server .
10827	Try to find an instance path .
10828	Update the template context .
10829	Handle an HTTP exception .
10830	Tries to trap an exception .
10831	Handle an exception .
10832	Raise the routing exception .
10833	Dispatch the request .
10834	Makes a default response .
10835	Create the URL adapter .
10836	Inject url defaults into the given endpoint .
10837	Generate unique values from an iterable .
10838	Populate the metadata .
10839	Convert a requirement to a string .
10840	Extract metadata from a pkginfo file .
10841	Iterate over the loaded modules .
10842	Iterate over all classes in the module .
10843	Returns a list of all the methods in the class
10844	Find the basename of a filename .
10845	Check if path is a module path .
10846	Recursively walk a site packages directory .
10847	Iterate over the paths of the module .
10848	Add default values to kwargs .
10849	Load the default values for the current app .
10850	Sets multiple keys at once .
10851	Increment the value of key by delta .
10852	Dump an object to a string .
10853	Build an editable options dictionary .
10854	Populate the link with the link .
10855	Ensure source directory exists .
10856	Removes the source from the source directory
10857	Get the distribution for this package .
10858	Get data from the stream .
10859	Returns a WSGI headers .
10860	r Converts an IRI to a native URI .
10861	r Return the path to the user cache directory .
10862	Get user data directory .
10863	Return the path to the user s log files .
10864	Return user_config_dir
10865	Return the site configuration directories for the given appname .
10866	Iterate over all module files .
10867	Run this process with a reloader .
10868	Convert s to text type
10869	Try to find the CA bundle .
10870	Parse an HTML document .
10871	Parse the document .
10872	Parse a DOM fragment .
10873	Translate a word .
10874	Convert arguments to a list of tokens .
10875	Binds the server to the server .
10876	Print report to stdout .
10877	Load bytecode from file .
10878	Convert params dictionary into a dict
10879	Run a subprocess .
10880	Get the implementation version
10881	Return a list of Distribution objects for a given location .
10882	Find external links .
10883	Wrapper for urllib . urlopen
10884	Process a URL .
10885	Removes all possible paths from sys . path .
10886	Initialize paths to directories .
10887	Add a package to sitedir .
10888	Add packages to sys . path .
10889	Check if enableusersite is enabled .
10890	Add site - packages and site - packages .
10891	Set the quit signal .
10892	Aliases encodings .
10893	Set default encoding .
10894	Force global eggs after site - packages .
10895	Attempt to fix sys . path .
10896	Run a subprocess .
10897	Check if Pyrex is installed .
10898	Convert pyrex sources to python language .
10899	Run the application .
10900	Retrieve a shared resource .
10901	Return user agent information .
10902	Return True if name is a URL .
10903	Unpack a link into a location .
10904	Download an HTTP link .
10905	Check if a link is already downloaded .
10906	Registers a currency .
10907	Registers an exchange .
10908	Decode the response .
10909	Default template context processor .
10910	Render a template .
10911	Render a template .
10912	Render a Jinja2 template .
10913	Parse version string .
10914	Returns True if the given name is declared .
10915	Visit a name node .
10916	Process include node .
10917	Generate a FromImport node .
10918	create a whl file and add it to it
10919	A decorator for atomic operations .
10920	Create an HTTPService server .
10921	URL encode a string .
10922	Return a list of distributions that match requirements .
10923	Populate a requirement set .
10924	Export the package to a temporary location .
10925	Lookup an Amazon Product .
10926	Iterate over pages .
10927	The ancestor of this node .
10928	The children of this node
10929	Safely get an element by path .
10930	Safely get element s text .
10931	Safely get element s date .
10932	Returns the price and currency of the offer .
10933	List Price .
10934	Overrides caching .
10935	Cache the response .
10936	Returns a function that gets an attribute from an environment variable .
10937	Convert string to title .
10938	Sort a value .
10939	Group values by attribute .
10940	Apply the filter function to the context .
10941	Create a logger .
10942	Compares two strings .
10943	Verify a signature .
10944	Derives the key from the salt .
10945	Get the signature for the given value .
10946	Sign a value .
10947	Verify a signature .
10948	Unsign a signed value
10949	Sign a value .
10950	Verifies a signed value .
10951	Serialize object to JSON .
10952	Handle an error response .
10953	Find packages .
10954	Iterate over packages in a list of packages .
10955	Iterate over all subdirectories of the given base path .
10956	Prepare the response .
10957	Unign a RECORD file .
10958	Unpack a wheel into a directory .
10959	Install a setuptools script .
10960	Assemble all nodes in the graph
10961	Redraw the canvas .
10962	Get a node by ID
10963	Called when a directed connection is changed .
10964	Assign edges to the object .
10965	Called when a component is changed .
10966	Handles left - click events .
10967	Called when the diagram canvas has changed .
10968	Clear the diagram .
10969	Called when a domain model has changed .
10970	Maps the domain model to new .
10971	Removes all nodes from the tree
10972	Map element to diagram node
10973	Set style attributes
10974	Parses XOT data .
10975	Process font .
10976	Processes an ellipse .
10977	Process a polygon .
10978	Process a polyline token .
10979	Process text .
10980	Process an image .
10981	Render a GridFS file .
10982	Save object to file .
10983	Load the dot file .
10984	Checks if a point is within the given point .
10985	draw the bounds
10986	Opens new graph
10987	Connect to the database .
10988	Parse the dot code and store it in the graph
10989	Create new graph .
10990	open file
10991	Save the model to file .
10992	Save the graph as a file .
10993	Configures the graph .
10994	Configure nodes
10995	Configures edges
10996	Show about the GODot
10997	Add a new node .
10998	Add an edge .
10999	Add a subgraph .
11000	Add a cluster .
11001	Request a new graph .
11002	Edit the options tree .
11003	Configure dot_code
11004	Prompt user to exit .
11005	Move points to origin .
11006	Save object to file .
11007	Load from a file - like object .
11008	Save to file .
11009	Load an object from a file .
11010	Creates an alias property .
11011	Parse a text file .
11012	Get the list of start words
11013	Add a chain .
11014	Removes a chain from the chain
11015	Build a chain from a source sequence .
11016	Generate a sentence .
11017	Creates a temporary file .
11018	Add a node to the graph .
11019	Delete a node
11020	Get a node by ID
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph or cluster .
11024	Check if the program has been changed .
11025	Set node lists .
11026	Parse a DOT file .
11027	Parse a dot file .
11028	Build top graph from tokens .
11029	Build subgraph from tokens .
11030	Returns the units and multiplier for the given number of seconds .
11031	Format a duration as a string .
11032	Change the name of the graph
11033	Creates a subpanel
11034	Split a sequence into n - sized chunks .
11035	Iterate over an iterable .
11036	Run the Godot application .
11037	Get all children of an object .
11038	Append a child to the given object .
11039	Insert a child .
11040	Delete a child from an object
11041	Called when a node is replaced .
11042	Called when the node is changed
11043	Returns the label of the given object
11044	Set the label of an object .
11045	Called when label changes .
11046	Initialize the graph
11047	Update the editor widget .
11048	Add listeners to the graph editor .
11049	Called when nodes are replaced .
11050	Called when the node is changed .
11051	Add nodes to the graph .
11052	Replace edges with new edges .
11053	Handle edges change event .
11054	Add edges to the graph .
11055	Parse an Xdot directive .
11056	Handles drawing event .
11057	Create a Node instance .
11058	Create an edge .
11059	Prepare the database .
11060	Parse the drawing directive .
11061	Parse the label directive .
11062	Handle drawing changes .
11063	Changes the position of the component
11064	Called when the component is changed .
11065	Handle the right click event .
11066	Show information about styles for a given style .
11067	Draw the main layer
11068	Checks if the given point is within the given point .
11069	Draw the main layer
11070	Handle an event .
11071	Run the loop .
11072	Get full page URL .
11073	Render previous and next links .
11074	Render the html links .
11075	Determines if the candidate content type matches the content type .
11076	Selects the content type that matches the requested content type .
11077	Rewrite a URL .
11078	Remove user auth from url .
11079	Create a URL identifier .
11080	Ensure host is valid .
11081	Find all modules in the given directory .
11082	Find all modules in the given directory .
11083	Lists all modules in the given module .
11084	List all classes in a module
11085	List all classes in module
11086	Ensures that a directory exists .
11087	Insert text into blob .
11088	Check to see if the card number is valid .
11089	Get the version of the git repository .
11090	Load a module .
11091	Adds a path to the list of paths
11092	Find a module by its name .
11093	Split a line into multiple lines .
11094	Remove all namespace declarations from the document .
11095	Check the consistency of the installed versions .
11096	Create a new instance from YAML .
11097	Merge two actions .
11098	Execute all actions .
11099	Create a new project from yaml .
11100	Add details to the request .
11101	Emit a record .
11102	Add image_rendition to the context
11103	Log an attempt for a given key .
11104	Add url to queue .
11105	Start the worker threads
11106	Set the value of KVStore .
11107	Get a value from KVStore .
11108	Recurse through KVStore .
11109	Get an index for a given key .
11110	Delete a KVStore .
11111	Plot a heatmap of features .
11112	Return a new datetime .
11113	Add months to date .
11114	Checks if the month is a christmas period .
11115	Use a music service .
11116	Connect to a specific storage service .
11117	Read data from CSV file .
11118	Extract data from JSON file .
11119	Write data to a json file
11120	Filter X by label .
11121	Calculate average values for each label
11122	Compute feature importance report .
11123	Restore previously saved data .
11124	Merge two dictionaries .
11125	Decorator for dispatching function .
11126	Decorator to register a method .
11127	Import registered blocks .
11128	Verify that the block is registered .
11129	Register a block .
11130	Unregisters a block field .
11131	Convert file to MP3
11132	Determine the desired version .
11133	Handles SSL redirect requests .
11134	Initialize celery .
11135	Queues an email .
11136	Parse the Accept header value .
11137	Parses a cache control header value .
11138	Parse content_type into a datastructures .
11139	Parse a Forwarded header value .
11140	Parses a comma - separated list of strings .
11141	Parse a list of parameters .
11142	Resize an image to a given width .
11143	Add a value .
11144	Download a YouTube file .
11145	Connect to Google Drive API .
11146	Upload a file to Google Music
11147	Connect to the music folder .
11148	Write the parameters . txt file .
11149	Updates the filenames
11150	Read the api absorption from file .
11151	Scale a_phi by scale_phi
11152	Read pure water absorption from file .
11153	Read pure water scattering from file .
11154	Read the IOP from a CSV file .
11155	Write a single iteration to a file
11156	Build the b with the scattering fractions
11157	Compute total absorption
11158	Build the total attenuation C .
11159	Build all b and c from IOPs
11160	Set batch parameters
11161	Read a file into a dictionary .
11162	Convert a string to a list of floats .
11163	Read a PR file .
11164	Register a signal handler .
11165	Handles signal signals .
11166	Default signal handler .
11167	Pause signal handler .
11168	Handle abort request
11169	Handle a status signal
11170	Unregisters an event from a list
11171	Fetch a single metric .
11172	Returns a list of metrics sorted by number of floats
11173	Collect the elements of an iterable .
11174	Print an item to stdout .
11175	Pretty print iterable .
11176	Extracts the signature from a function .
11177	Copy a partial signature from a partial .
11178	Returns a new argv with the given arguments .
11179	Checks to see if the given filename matches the metainf files
11180	Get a key for a file .
11181	Convert vlq to int .
11182	Read a table from data .
11183	Parse the header of the archive header .
11184	Returns a string representation of the duration .
11185	Print the details of the game .
11186	Read data from the UI .
11187	Opens the file result .
11188	Write the BatchFile to a file .
11189	Extract data from the output file
11190	Display the current connection .
11191	Print information about the given number of curves .
11192	Display error message .
11193	Hides the error message .
11194	Execute planarrad
11195	Cancel the planar radians .
11196	Quit the Planar radii .
11197	Save the figure .
11198	Open the log file .
11199	Opens the documentation .
11200	Prepare all required actions
11201	Event handler for click
11202	Handles mouse move event .
11203	Set the target of the graphic .
11204	Create a LockSet with the given private key .
11205	Sign this instance .
11206	sign signatures are non deterministic
11207	safe or one of quorum noquorum Noquorum
11208	In the IOU fungible the supply is set by Issuer who issue funds .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid lockset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring see utils . cstr
11215	Calculate the delay of a packet .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the contract on the chain
11218	returns class _on_msg_unsafe use x . im_self to get class
11219	registers native contract classes
11220	returns True if unknown
11221	receives rlp . decoded serialized
11222	Convert from vgg to img .
11223	Convert image to vgg
11224	Get the f layer .
11225	Get layer output .
11226	Get the features for the given layers .
11227	Create a new key file .
11228	Finish the bulk load .
11229	Load data from a file .
11230	Load data into the database .
11231	Release the table .
11232	The list of tables .
11233	Replace compiled compiler flags .
11234	Find theter metadata home .
11235	Get a value from the configuration file .
11236	Set the value of a key .
11237	handle table output
11238	Execute a single command .
11239	Get a value from settings .
11240	Write the default configuration file .
11241	Set the column filter
11242	Write the table to an archive .
11243	Returns the export settings as a string .
11244	Convert a string to a float .
11245	Parse a string of gain from a string .
11246	Extract settings from a string .
11247	Wrap text with columns .
11248	Detect devices and return a list of tuples
11249	Set the center frequency of the spectrum .
11250	Calculate the frequency and pwr_array
11251	Wait for the task to finish .
11252	Update the PSD with a PSD .
11253	Read the data from a file - like object .
11254	Write the packet to a file .
11255	Submit a task to the worker s work queue .
11256	Convert time to number of repetitions .
11257	Generate a frequency plan for a given frequency range .
11258	Create a buffer for the given bins .
11259	Sets up the TimeSeries .
11260	Stop the stream .
11261	Rotate the PSD state .
11262	Optimizes the FFT .
11263	Sets the device address .
11264	Run CMake
11265	Returns a subset of datetimes that are outside the specified range .
11266	Mask a datetime .
11267	Mask a given datetime .
11268	Filter datetimes to keep only those objects .
11269	Convert datetimes to keep only those days .
11270	Return a set of dates to keep only the given date .
11271	Returns the set of dates to delete .
11272	Get SPI Control byte .
11273	Read a bit from the device .
11274	Write a bit to the packet .
11275	Get the bit number of a given bit pattern .
11276	Watch the port events for a given port .
11277	Process events from the queue .
11278	Puts GPIO interrupt into userspace space .
11279	Set the GPIO interrupt edge .
11280	Waits until filename exists .
11281	Register a pin function .
11282	Deregisters a pin .
11283	Enables GPIO interrupts .
11284	Send data to SPI .
11285	Render the form .
11286	Check if the form has any errors .
11287	Render the link .
11288	Extract package version .
11289	Returns the kwargs for the form .
11290	Check the status of the response .
11291	Make a GET request
11292	Get download link .
11293	Upload a link to a folder .
11294	Upload a file to a folder .
11295	Upload a file to the remote repository .
11296	Gets the status of a remote upload .
11297	Returns a list of all folders in the user .
11298	Gets the list of available files in a folder .
11299	Calculate the humidity .
11300	Calculate dewpoint .
11301	Publish a message to the server .
11302	Get the CRC of the given data .
11303	Verify the CRC of data .
11304	Unpack a storm date .
11305	Determine if we should use a revision .
11306	wake up weather station
11307	Send a command to the device .
11308	Send a DMP command .
11309	Get new archive fields
11310	Extract fields from archive
11311	Updates the weather data for a given station .
11312	Initialize logging .
11313	Return a list of site objects
11314	Determine the wind speed of a station .
11315	Sets the weather parameters .
11316	Set the arguments .
11317	Write the configuration to the file .
11318	Decorator to check if the user wants a request .
11319	Initialize the extension .
11320	Fulfill the requirements .
11321	Adds an override to the context .
11322	Remove the override context from the stack .
11323	Context manager for overrides .
11324	Adds the current context to the stack .
11325	Remove the current context from the stack .
11326	Context manager for adding additional elements .
11327	Undo duplicate field names .
11328	Interpret the results .
11329	Extract params from query .
11330	Run a query against the database .
11331	Get a Pandas DataFrame from self
11332	Get the graph representation of the results .
11333	Plot pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Write the result to a CSV file .
11337	Check if user has permission
11338	Adds the widget to the context .
11339	Returns a list of widgets sorted by position .
11340	Returns the widgets that need to be updated .
11341	Register a widget .
11342	Unregisters a widget .
11343	Returns the last update of the dashboard .
11344	Get the settings for this widget .
11345	Save a setting in the dashboard .
11346	Determines if the document should be updated .
11347	Create an array from an array .
11348	Construct an array of ones .
11349	Concatenate two arrays .
11350	Validate arguments .
11351	Validate axes arguments .
11352	wraps a function into a BoltArraySpark
11353	Align the dimensions along the axis .
11354	Convert to SparseVector .
11355	return the cartesian product of the array
11356	Stack the elements of this RDD .
11357	Apply a function over each RDD .
11358	Create a chunk of the RDD .
11359	Map a function over this RDD .
11360	Apply a function to each element in the RDD .
11361	Return a numpy array with the given size .
11362	Remove padding from a value .
11363	Get the number of chunks given a plan and shape .
11364	Generate slices for the given plan .
11365	Get a mask for the given indices .
11366	Repartition the RDD .
11367	Stack the elements of the RDD .
11368	Align values to the given axis .
11369	Return the first element in the RDD .
11370	Compute statistics for each axis .
11371	Return the mean of the data .
11372	Variance .
11373	Return the standard deviation of the DataFrame .
11374	Compute the sum along the given axis .
11375	Return the maximum of the DataFrame .
11376	Return the minimum along an axis .
11377	Return a chunked chunked array
11378	Swap data in a barray .
11379	Transpose the array .
11380	Swap axis values .
11381	Reshape this array to a new one .
11382	Reshape the data to a new one .
11383	Remove slices from the array .
11384	Cast this RDD to a given type .
11385	Clip the elements of this RDD .
11386	Convert the RDD to a numpy array .
11387	Convert argument to tuple .
11388	Convert arguments into a tuple .
11389	Ensure that the given shape is valid .
11390	Check if two arrays are equal .
11391	Convert a list of lists into a list .
11392	Convert slice to slice .
11393	Checks that new values are transposeable .
11394	Ensure that new keys are reshapeable .
11395	Recursively flatten lists of tuples .
11396	Expand an array with extra dimensions .
11397	Zips an RDD with the index of each element .
11398	Wrap a function as a function .
11399	Return a ConstructLocal instance for the given arguments .
11400	Reshape the array .
11401	Transpose the array .
11402	Reshape the array .
11403	Transpose the array .
11404	Constructs an array of ones .
11405	Construct a new array with zeros .
11406	Concatenate multiple arrays .
11407	Discrete likelihood .
11408	Returns the most likely alpha of the given data .
11409	Discrete alpha estimate .
11410	Determine the best alpha of a dataset .
11411	Determine best alpha values for discrete alpha values .
11412	Plot the PCF model .
11413	Calculates the lognormal distribution .
11414	Sanitizes the HTML .
11415	Configure analytics .
11416	Return a list of tag names to tag .
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Parse a long string .
11421	Decode public key .
11422	Parse options .
11423	Process SSH key data .
11424	Process SSH keys .
11425	Process ECDSHA SHA .
11426	Processed ED25516 data .
11427	Parse SSH2 public key .
11428	Process a single input token .
11429	Process a single input token .
11430	The list of supported mechanisms .
11431	Store the credentials in the GSSAPI .
11432	Instantiate the application .
11433	Initialize distribution .
11434	Yield audio file .
11435	Template tag for DJF5B .
11436	Template tag for dj frontend normalize .
11437	Template tag for djfrontend
11438	Render djfrontizr script .
11439	Render django - frontend jquery .
11440	Template tag for django . jqueryui
11441	Render djangojquery datatables
11442	Template tag for DJQueryDatatables .
11443	Renders the jquery datatables for the given version .
11444	Template tag for django . formset
11445	Renders the jQuery scrollto javascript to the specified version .
11446	Render django jquery jquery jquery
11447	Template tag to render twos CSS .
11448	Template tag for DJFRONT_GA .
11449	u Render a JavaScript variable .
11450	Generate authentication hashes .
11451	Calculate the expiration time .
11452	Get user token .
11453	Serialize user data into a dict .
11454	Deserialize profile .
11455	Update a user .
11456	Called when authentication failed .
11457	Validate a user .
11458	Check if the request is SSL .
11459	Get username from user
11460	Create new user token
11461	Logs a user .
11462	Logout from user .
11463	Login to the API .
11464	Login with a password .
11465	Login to a user .
11466	Change user password .
11467	Send a forgotten password to the user
11468	Reset the user s password .
11469	Recursively merge two dictionaries .
11470	Read content from file .
11471	Get the ID of an object
11472	Get the metadata for the given object ids .
11473	Get object_id for a given meteor_id
11474	Given a list of objects return an OrderedDict of object ids .
11475	Get an object from a meteor_id
11476	Set default forwards for the operation .
11477	Set the primary keys for the operation .
11478	Truncate a list of models .
11479	Truncate database forwards .
11480	Truncate database .
11481	Initialize options .
11482	Finalize build options .
11483	Run the meteor build
11484	Convert path arguments to a directory .
11485	Seed random numbers .
11486	The state of the camera .
11487	Generate a random string .
11488	Decorator to register API endpoint .
11489	Iterate over api_path attributes .
11490	Clear the API path map .
11491	Print a formatted string to stdout .
11492	Validate kwargs for a function .
11493	Called when the client is open .
11494	Called when the connection is closed .
11495	Process a message .
11496	Generator for DDP frames
11497	Process a DDP message .
11498	Dispatch a message to the server .
11499	Receive a connection .
11500	Receive a ping message .
11501	Receive a sub message .
11502	Receive a subscription .
11503	Receive a method .
11504	Generate connection info .
11505	Run DDP server .
11506	Django .
11507	If verbosity is greater than 1 .
11508	Stop the DDP worker threads .
11509	Start the process
11510	Run the Postgres greenlet .
11511	Read notifications from the connection .
11512	Monkey patching . patch
11513	Generate a random ID .
11514	Auto - discover API modules .
11515	Convert an error into a dictionary .
11516	Get an instance of this class .
11517	Emit a record .
11518	Decorator for handling HTTP negotiation .
11519	Add a route to the application .
11520	Add a route to a resource .
11521	Run the application .
11522	Send a message .
11523	Send a message to APNS .
11524	Fetches inactive IDs .
11525	Send a message to GCM .
11526	Sends bulk message to GCM
11527	Send data to GCMP .
11528	Send data to the API
11529	Load a model from a module location .
11530	Fast selection algorithm .
11531	Search giphy .
11532	Translate a phrase .
11533	Get trending data .
11534	Get a gif by id
11535	Displays screensaver .
11536	Upload tags to a file .
11537	Convert data to int .
11538	Fetch API data .
11539	Translate a term into a GIF .
11540	Return a generator of Giphy images .
11541	Get a GIF by ID
11542	Upload a gif to a file .
11543	Create an access control element .
11544	Login to Google .
11545	Upload a video .
11546	Check the status of a video .
11547	Update a video entry .
11548	Deletes a video entry .
11549	Check availability of a video
11550	View a video .
11551	List all videos .
11552	Upload a video from zuji .
11553	Upload a video .
11554	Called when the upload is successful .
11555	Removes a video .
11556	Retrieve a single video
11557	Create or update a video .
11558	Delete a video
11559	Updates the container metadata .
11560	Updates a metadata field .
11561	Update this item .
11562	Parse a string into a list of nodes .
11563	Dump a tree into a string .
11564	Load data from a file - like object .
11565	Read data from a file .
11566	Parse a node .
11567	Create a new node .
11568	Returns a string representation of the node .
11569	Return ASCII art .
11570	Get the node with the given label
11571	Prune the tree .
11572	Resolve polytomies .
11573	Removes internal names
11574	Removes all leaf names .
11575	Decorator for methods that require authenticated user .
11576	Process a JSON string .
11577	Raise an exception if the setting is not defined .
11578	Get an argument from the request .
11579	Get a list of parameters from the request .
11580	Wrap a callback .
11581	Get a cookie .
11582	Clear cookie .
11583	Redirect to the login URL .
11584	Get the authenticated user
11585	Generate request parameters .
11586	Redirect to the user .
11587	Send a request to Facebook .
11588	Get an authenticated user .
11589	Concatenate url with query parameters .
11590	Parse a header line .
11591	Add an HTTP header .
11592	Get a list of HTTP headers .
11593	Parse a line .
11594	Parse headers .
11595	Normalize HTTP header name .
11596	Encode a string .
11597	Converts a string to a Unicode string .
11598	Convert a string to a basestring .
11599	Recursively convert object to unicode .
11600	Make sure this plugin has conflicting keyword arguments .
11601	Iterate over all subclasses of cls .
11602	Based on the matching strategy and optionally the requested method .
11603	Calculate the occupancy of a grid .
11604	Write a box to a file .
11605	Write a PDB box to a PDB file .
11606	Determine molecule numbers .
11607	Resize the PBC using the ligands .
11608	write a list of molecules to a file
11609	Iterate over resource file
11610	Send message to user .
11611	Send a message to multiple users .
11612	Get user s messages
11613	Add messages to the request .
11614	Check the config file .
11615	Verify that a profile name is present .
11616	Retrieve data from the config
11617	Retrieve the password from the config .
11618	Update config data .
11619	Update the pwd for a message .
11620	Create a profile
11621	Displays the required items
11622	Get settings from user
11623	Get auth from user
11624	Write profile data .
11625	write data to cfg
11626	Write auth info to cfg .
11627	Adds attachments to the message
11628	Send the message .
11629	Send a message .
11630	Convert a message type to a message type .
11631	Creates a property for a credential property .
11632	Validate a property .
11633	Validate input .
11634	Validate twilio attributes .
11635	Ensure SlackPost attribute is valid .
11636	Validate the whats app .
11637	Send a message to a coroutine .
11638	Add a message to the coroutine .
11639	Load the body from a file .
11640	Trim kwargs from kwds .
11641	Send a message .
11642	Get a chat s ID
11643	Send the message
11644	Sends the message
11645	Get SMTP server
11646	Generate email .
11647	Add headers to the message .
11648	Add the message to the message .
11649	Adds attachments to the message .
11650	Returns an SMTP session
11651	Get an SSL connection .
11652	Get a TLS session .
11653	Sends the email .
11654	save to file
11655	Unload the image .
11656	Get the region of the given region .
11657	Validate this object .
11658	Clear the internal cache .
11659	Serialize the header .
11660	Read the file .
11661	Delete the chunk .
11662	Resize the chunk to the given size .
11663	Insert a chunk in the file .
11664	Save the frame to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a single line .
11668	Add a new source block .
11669	Draw a string .
11670	Parse ISO 8601 time string .
11671	Makes a list of words .
11672	Convert word to HTML .
11673	Make an HTML paragraph .
11674	Make HTML code .
11675	Converts a list of items into an HTML string .
11676	Save the metadata to a file .
11677	Update parent atoms
11678	Run the game .
11679	Register a mapping .
11680	Get a specific controller instance .
11681	Registers a freeform key .
11682	Sign a string .
11683	Build request headers .
11684	Sends a request .
11685	Send GET request .
11686	Send POST request .
11687	Send a DELETE request .
11688	Creates an APE value
11689	Sends a request to the transport .
11690	Implements API call .
11691	List all hosted zones .
11692	Create a new hosted zone .
11693	List resource record sets by zone ID .
11694	Update the resource record set .
11695	Draw an image .
11696	Draw a region on the image .
11697	The size of the packet .
11698	Replace old_pages with new_pages .
11699	Find the last page in the file .
11700	Set a section .
11701	Add a doc markup .
11702	Processes the content .
11703	Return the markup with the given tag name .
11704	Create a HostedZoneRequest .
11705	Lock a file object .
11706	Insert bytes at the given offset .
11707	Delete bytes from file .
11708	convert unicode to UTF - 8
11709	Add a change .
11710	Parses the e_change_info element .
11711	Measure the width of a string .
11712	True if all values have been modified .
11713	Delete this resource record .
11714	Save this resource record .
11715	Parse ID3 tag .
11716	Make ID3v1v1v1v1v2v2v2v2v2 .
11717	Read size bytes .
11718	Delete all values from the dict
11719	Called when frame is loaded .
11720	Update common media .
11721	Updates the version of the header .
11722	Unload the Sound .
11723	Play a sound .
11724	Set the loop points .
11725	Extract glyphs and values .
11726	Filter glyph names based on the filter
11727	Dump the encoding table into a file .
11728	Dump the array as a string .
11729	Main entry point for the script .
11730	Check if a file exists
11731	Makes a list of files from argv
11732	Parse a HostedZone object .
11733	Parses the delegation set element .
11734	Convert a list of blocks to a byte string .
11735	Add padding to blocks .
11736	Delete a VCFLACD file .
11737	Save the metadata to a file .
11738	Parses the RRset XML .
11739	Parse rrset records .
11740	Parse an rrrset element .
11741	Delete this hosted zone .
11742	Add a record to the hosted zone .
11743	Create a resource record .
11744	Create a new AAAAR record .
11745	Create a CNAME record .
11746	Create MX resource record .
11747	Create a new NS resource record .
11748	Create a PTR resource record .
11749	Create a new SPF resource record .
11750	Create a new SRV resource record .
11751	Create a TXT resource record .
11752	Register a frame .
11753	Get the initial values for a change .
11754	Convert a change to an XML .
11755	Generate a ChangeRecordSet request .
11756	Initialize log files .
11757	Get item by alias .
11758	Freeze a dictionary .
11759	Join HTML attributes into a string .
11760	Initialize the application .
11761	Initialize all bars .
11762	Bind a bar .
11763	Return the arguments as a dict .
11764	The URL for this endpoint .
11765	Returns True if the current request is the current one .
11766	Validate the given metric class .
11767	Get a stat by name .
11768	Calculate statistics .
11769	Auto - discover apps .
11770	Displays the metrics for a given metric .
11771	Main maintenance method .
11772	Get a list of variable names from the request .
11773	Get a boolean value from the request .
11774	Get the next colour
11775	Get parameters for gecko request
11776	Displays the number widget for gecko .
11777	Displays the latest metrics for the current user
11778	Returns a list of tuples with the number of lines that have been calculated .
11779	Get the gecko geckometer .
11780	Displays metrics for gecko .
11781	Returns a list of all active gadgets .
11782	Register a gadgets .
11783	Returns the context data .
11784	Print a message to stderr .
11785	Decorator for validating parameters .
11786	Prompt the user for long lines .
11787	Display a list of items .
11788	Prompt the user for a file .
11789	Get all games for a given year .
11790	Returns the team s winner .
11791	Returns the current season .
11792	Returns a list of lists of starters .
11793	The surface of the game .
11794	The coinoss .
11795	Parse weather data .
11796	Get information about the team
11797	Returns a pandas DataFrame with all the games for the given month
11798	Returns a Pandas DataFrame with the standings of the game .
11799	Returns a table of team stats
11800	Returns a DataFrame of Roting votes .
11801	Returns the line scores for each team .
11802	Returns the season number .
11803	Get stats for each team .
11804	Decorator to switch the function to dirPath .
11805	Decorator to cache the results of a function .
11806	Get the key for the class instance .
11807	Decorator for memoization .
11808	gets the age of the person
11809	Get stats table
11810	Get stats for each game
11811	Get stats table .
11812	Return statistics for each hour
11813	Returns stats for each poss in percent
11814	Get the advanced stats table .
11815	Returns a dictionary with the plotting stats .
11816	Get enhanced PBP stats .
11817	Get the basic stats for a given year .
11818	get session object
11819	Expand the detail dataframe into a Pandas DataFrame
11820	Add team and team columns to dataframe .
11821	Add features to dataframe
11822	Estimate initial Win probability for a line .
11823	Returns a Pandas DataFrame with the passed in results .
11824	Get a list of all team s awards .
11825	Get team name .
11826	Returns a list of box scores for a given year .
11827	Return pq for a given year keyword .
11828	Get a list of coaches by team .
11829	Get a DataFrame of games for a given year .
11830	Get the coordinator of a given year .
11831	Returns the Define Coordinator for a given year .
11832	Get the team s ID .
11833	Get the team s scheme
11834	Gets the defignment for the given year
11835	Returns a DataFrame of the splits for the given year .
11836	Get HTML from url .
11837	Recursively flatten links in the tree .
11838	Convert a rel url to a string .
11839	Convert keyword arguments to a query string .
11840	Read data from hdf5 file .
11841	Directly put into the queue .
11842	Get the direct queue index .
11843	Called when the queue is closed .
11844	Read a batch from the dataset .
11845	Get the remainder of a file
11846	Read a batch of files .
11847	Get rows from the queue
11848	Parse a file - like object .
11849	Write a list of objects to a file
11850	Read a varint .
11851	Yield objects from the stream .
11852	Close the file .
11853	Write multiple Pb2 objects to the stream .
11854	Flush the output buffer .
11855	Get the directory of the game s directory .
11856	Input text with keyboard emulation .
11857	Generate a fake movie .
11858	Evaluate the traits .
11859	Wait until condition is met .
11860	Wait until all traits are present
11861	Add ignored exceptions .
11862	Get the volume of the main driver .
11863	Execute the main source function .
11864	Send a message to the socket .
11865	Get the state of the player .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Select a source
11870	Decrypt a request with the given key .
11871	Calculate the CRC32 of a plaintext .
11872	Obfuscate a value .
11873	Check for missing schema .
11874	Returns a list of all hrefs in HTML .
11875	Checks if song name is a song name
11876	Parses a song and parses it
11877	Generate a URL for a song .
11878	Parses google url and returns url
11879	Parses a song .
11880	Download a page and return it .
11881	download a file from requests
11882	Download a file using wget
11883	Searches for station codes by city .
11884	Get a location observation
11885	Parse an observation response
11886	Get observation information .
11887	Return search paths .
11888	The list of compiled compiler extensions .
11889	The mimetype of the current format .
11890	Returns the mime type of the compiler .
11891	Return the compiler format extension .
11892	Register a processor for a given mimetype .
11893	Unregister a processor from a mimetype .
11894	Get the list of paths for this resource .
11895	Register default values .
11896	Try to import Qt core .
11897	Get Netnode instance .
11898	Add a plugin name to the netnode
11899	Remove plugin name from netnode
11900	Import settings from settings file .
11901	Export settings to a QSettings object .
11902	Access the directory .
11903	Iterate over keys .
11904	Simple error handler .
11905	Get a DynamoDB table .
11906	List all DynamoDB tables .
11907	Fetch items for given category .
11908	Get metadata id from metadata
11909	Return the updated_on of the metadata .
11910	Fetches the owner team of a crate .
11911	Fetch the owner user of a crate .
11912	Fetch the versions of a crate .
11913	Fetches the version download of a crate .
11914	Fetch crate data .
11915	Get the summary of the categories .
11916	Fetches list of crate repositories .
11917	Get a crate by ID
11918	Get a crate attribute .
11919	Fetch items from the API
11920	Fetch items from API .
11921	Fetches items for a given category
11922	Get the questions from the server
11923	Fetch events .
11924	Returns the updated field of the metadata for the given item
11925	Determine the category of metadata .
11926	Get items from ReMo
11927	The list of buffers .
11928	The priority of the device .
11929	Release the connection pool .
11930	Submits multiple blocks .
11931	Cancel an event .
11932	Cancel all submitted blocks .
11933	Get events from the queue .
11934	Fetch events .
11935	Get all cells
11936	Parse the feed
11937	Return a list of export formats for the given pid type
11938	Get permission factory .
11939	Create blueprint .
11940	Create a URL rule .
11941	View the given pid .
11942	r Generic view method .
11943	r Export a record .
11944	Calls the given function with the given arguments .
11945	Close the socket .
11946	Remove a client from the pool .
11947	Increment a counter .
11948	Send a timing request .
11949	Record timing since the given time .
11950	Set a gauge .
11951	Update gauge delta .
11952	Set the value of a metric .
11953	Send data to the server .
11954	Get a batch client .
11955	Get a unit client .
11956	Send all batches to the remote server .
11957	Create a checker that checks to see if a record exists .
11958	Create a batch client .
11959	Flush all pending batches .
11960	Creates a new unit client .
11961	Creates a new User object and returns it .
11962	Convert an object to an OpenMath object .
11963	Convert term to OpenMath .
11964	Convert an OMObject to a Python object .
11965	Convert obj to Openmath .
11966	Register a converter to openmath .
11967	Decorator for deprecated register .
11968	Initialize the application .
11969	Generator for valid choices .
11970	Split kwargs into fields and fields .
11971	Decorator for registering a function .
11972	Create a value from the registry .
11973	Returns a dict with any default form fields .
11974	Decorator for field required attributes .
11975	Decorator for field choices attribute .
11976	Returns a string representation of the decimal field .
11977	Formats email field data .
11978	Returns a string representation of a date field .
11979	Returns datetime field data .
11980	Returns a string representation of a float field .
11981	Returns a string representation of the integer field .
11982	Generate a time field .
11983	Return the data for a field
11984	Return the data for multiple choices .
11985	Get the data for a model field .
11986	Encode a Python object as a string .
11987	publish package
11988	Tag the given version .
11989	Decorator to check if any field is null .
11990	Loads a Python module by name .
11991	Builds a class instance from inst .
11992	Create OML list
11993	Creates a tuple
11994	Decode the given data .
11995	Encode the given data .
11996	Convert a number to a fixed number .
11997	Format a number .
11998	Convert number to money
11999	Convert numpy array to numpy array
12000	Compress data from an array .
12001	Add a workspace .
12002	Remove a workspace .
12003	List all workspaces
12004	Get a WWS by name
12005	Check if a repository exists .
12006	sync all repositories
12007	Clone a URL .
12008	Check ndio version
12009	Convert numpy array to voxels .
12010	Convert a list of voxels into a numpy array .
12011	Execute the workflow .
12012	Print the update of a repository .
12013	Add a console handler .
12014	Executes the given command .
12015	Load a PNG file .
12016	Save numpy array to file .
12017	Save a collection of numpy arrays .
12018	Print the status of a workspace .
12019	Print the repository status .
12020	Get block size
12021	Post cutout without chunking .
12022	Load a tiff file .
12023	Save numpy data to file .
12024	Load multiple images from a tiff file .
12025	Write configuration to file .
12026	Clone this branch .
12027	Get the version of yoda .
12028	Mix a greeting with a greeting .
12029	Option decorator .
12030	Get reserved ids .
12031	Merge multiple ids
12032	Propagate to a channel
12033	List all projects in a dataset
12034	Get a dataset .
12035	List all datasets .
12036	Parse the command line options .
12037	Show workspaces .
12038	Show a workspace .
12039	Show all available workspace names
12040	Build the URL for this endpoint .
12041	Guess file format from extension .
12042	Opens a file .
12043	Convert input file to output format .
12044	Build a graph from a site scan .
12045	Compute invariants for graph_file and apply them to graph_file .
12046	Convert a graph to a given format .
12047	Convert a list of ramons into a dictionary .
12048	Lookup the RAMon type .
12049	Deletes a channel .
12050	add dataset
12051	Convert a dataset into a JSON string .
12052	Create dataset dictionary .
12053	Create a channel dictionary .
12054	Create a project dictionary .
12055	Identify image sizes .
12056	POST data to ndio
12057	Find a workspace path .
12058	Get all public tokens
12059	Get project info .
12060	Sets metadata for the OCP .
12061	Make a GET request
12062	POST request to url
12063	Delete a URL .
12064	Load image from hdf5 file .
12065	Save the array to an HDF5 file .
12066	Infer gaps in a phylogenetic tree
12067	Return a copy of the given IO object .
12068	Install the translation functions .
12069	Acquire an exclusive NS .
12070	Returns the percentage of part in data .
12071	Get server stats .
12072	Get a dictionary of slabs
12073	Combine the context data .
12074	Show server status .
12075	Displays the memcache dashboard .
12076	Show statistics for a given server .
12077	Displays the list of available caches .
12078	Convert a number of bytes into a human readable string .
12079	Finds a Config object and returns it
12080	Add a directory .
12081	Apply the configuration to the config .
12082	Absolute path of the file .
12083	Read the contents of the file .
12084	write data to file
12085	Configure logging .
12086	Create the file .
12087	Apply configuration to this node .
12088	The path of this node .
12089	Remove this directory .
12090	Prepare the environment .
12091	Cleanup resources .
12092	Return the path to the given path .
12093	List all files in the directory
12094	Write data to file .
12095	Read the contents of a file .
12096	Add the given arguments to the child .
12097	Save the configuration to a file
12098	Load yaml file
12099	Removes the temporary directory
12100	Load plugins from the given directory .
12101	Recursively update a dictionary .
12102	Return a ConfigNode for the given path .
12103	Resolve the key in the tree .
12104	Get the value of the container .
12105	Update the configuration with the given data .
12106	Load configuration from file .
12107	Convert obj to string
12108	Build the URL for the callback URL .
12109	Process socket input .
12110	Write the output to the socket .
12111	Send an RPC call .
12112	Read input from socket .
12113	Write output to socket .
12114	Raise a RuntimeError if the function is not registered .
12115	Get the remote_set_mode of a Netlink .
12116	Configure the node .
12117	The source address of the source .
12118	The target address of the target .
12119	Called when the session is closed .
12120	Create new sender
12121	Request a new sender .
12122	Create new receiver .
12123	Request a receiver .
12124	Destroy a connection .
12125	Close the session .
12126	Process an endpoint event .
12127	Add mark .
12128	Called when the receiver is closed .
12129	Called when the receiver fails .
12130	Extract host and port from server address .
12131	Connect to host and port .
12132	Create a socket .
12133	Return a list of available connections .
12134	Raise RuntimeError if connection lock is not registered .
12135	Process the SASL step .
12136	Read data from the connection .
12137	Create a new sender .
12138	Reject a sender .
12139	Create a new receiver .
12140	Called when the connection fails .
12141	Called when the ECP connection is active .
12142	Notify remote connection .
12143	Handle protocol errors .
12144	Wrap twilio view .
12145	Get color string .
12146	Returns a dictionary of font files
12147	Set compression flag .
12148	add an object to the buffer
12149	write stream to page
12150	Write a stream .
12151	Add a page to the document .
12152	Set the color scheme .
12153	Sets the default font
12154	Add a new page .
12155	Set font size .
12156	Adds text to the document .
12157	Add newline .
12158	Add a pie chart .
12159	Output the pages .
12160	Get the orientation of the page
12161	Output all fonts .
12162	Output the images .
12163	Output the data to the session .
12164	Transform a transformation matrix .
12165	Returns the absolute position of a given point .
12166	Set style .
12167	Rotate a point .
12168	Set information about the object .
12169	set display mode
12170	Closes the document .
12171	Write PDF header .
12172	Write pages to page .
12173	Put resource dict into the session
12174	Write information about the object .
12175	Write catalog file .
12176	Write the trailer to the file .
12177	Iterate over a sequence of sequences .
12178	Iterate over a sequence .
12179	Gosper function .
12180	Iterate over seqs .
12181	Fit x to the xmax
12182	Fit the y - axis fit to the data
12183	Returns True if x is greater than the given coordinate .
12184	Determines if this coordinate is greater than the given coordinate .
12185	Make a copy of the cursor .
12186	Move x by dx .
12187	Move the y to the y .
12188	Draw the figure .
12189	Create a new tag .
12190	List all tags .
12191	Get label by name
12192	Updates a label
12193	Delete a tag
12194	Creates a new tag
12195	List all tags
12196	Get tags with label_sn
12197	Create a new hook .
12198	List all available hooks
12199	Updates a hook
12200	Create an alert
12201	Get alerts by type
12202	Updates an alert
12203	Setup sphinx extension
12204	Returns the path to the themes .
12205	POST request to logentries .
12206	List all hosts
12207	Get a specific log set
12208	Finds the position of the algorithm in the given position .
12209	Returns the duration of the simulation .
12210	Updates the transit model .
12211	Compute the trajectories .
12212	Binary operation .
12213	Free all resources .
12214	Receive data from the socket .
12215	Yield lines from the socket
12216	Yield bytes from the socket
12217	Parse the status of the connection .
12218	Generate information .
12219	Generate a message .
12220	Send a command to the server .
12221	Get capabilities .
12222	Set the mode reader command .
12223	Quit the server .
12224	The DATE command .
12225	Send SMTP HELP command .
12226	Generate new news groups .
12227	Generate newnews .
12228	Generate new news entries
12229	List active users .
12230	List active times .
12231	List newsgroups .
12232	List overview . fmt
12233	List the available extensions
12234	Generate list of items
12235	Returns a list of values
12236	Get group information .
12237	Send the next article and identifier .
12238	Send article article
12239	Execute a HEAD request .
12240	Get the message body .
12241	Send xg title pattern .
12242	Send XHDR command .
12243	Send XZDR message .
12244	Generator for xover commands .
12245	Execute xpat command .
12246	Generate xpat matching pattern .
12247	Compress gzip data .
12248	Send a POST request to the server .
12249	Convert a value to a float .
12250	Convert a string to a timestamp .
12251	Convert string to datetime object .
12252	Perform a POST request .
12253	Perform a DELETE request .
12254	Make a GET request
12255	List scheduled queries .
12256	List all tags for this user .
12257	Get tag by name or ID
12258	Create an alert .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create an alert .
12262	Deletes the specified tag .
12263	Unparse a range or tuple .
12264	Parse a newsgroup line
12265	Parse a header line .
12266	Unparse headers .
12267	Do a POST request .
12268	Run multiple tests .
12269	Generate a docstring for defaults .
12270	Decorator for defaults .
12271	Generate a docstring for the defaults .
12272	Set the value of the field .
12273	Raise TypeError if value is not expected .
12274	Returns the value of the variable
12275	Check if value is a scalar .
12276	Symmetric error .
12277	Set errors .
12278	Set bounds .
12279	Import metrics .
12280	Extract metrics from a list of metrics .
12281	Filter metrics based on the filter expression .
12282	Calls the api endpoint
12283	Expand the given text .
12284	Match operator .
12285	Expand text .
12286	Initialize required properties
12287	Returns a list of parameters
12288	Returns a numpy array of parameter values
12289	Returns a list of errors
12290	Clear all derived values .
12291	Set the request method .
12292	Get TSP_EMAIL environment variables .
12293	Get the URL parameters .
12294	Do a GET request
12295	Do a DELETE request .
12296	Do a POST request .
12297	Do a PUT request .
12298	Call the API .
12299	Validate the sceneInfo .
12300	Verify the type product .
12301	Get the size of a remote file .
12302	Download the scene .
12303	Validate the bands parameter .
12304	Establish connection to earthexplorer
12305	Returns a decorator that registers a prefix with a prefix .
12306	r Return the timezone for a given zone .
12307	Normalize a datetime .
12308	Joins iterable .
12309	Return a list of all newline positions in text .
12310	Convert a point to a source .
12311	Print the results to stdout .
12312	Remove metrics from the result
12313	Load a fortune from a list of files .
12314	Create a fortune for a list of files .
12315	Run the script .
12316	Convert text into a rule .
12317	Apply special handling .
12318	Parse the input source .
12319	A list of Rule instances .
12320	The list of comments .
12321	Returns a list of all the directives in this node .
12322	Returns the compiled source code .
12323	Compile the template .
12324	Return the import statement .
12325	Returns the token types for parsing .
12326	Returns the class definition .
12327	Return the entry point .
12328	Get the definition of a single rule .
12329	Get the source of a rule .
12330	Get the transform for a rule .
12331	Convert an expression into an ASN string .
12332	Convert an AST node into an ASN .
12333	Return a list of operands that satisfy pred .
12334	Removes grouping groups from an OptionTree
12335	Convert ast node to code .
12336	Convert an AST tree into a Python code object .
12337	Convert an AST node to a Python code .
12338	Convert an OptionGroup to a string .
12339	Return the code for the given AST repetition group .
12340	Convert an AST node to a Python code .
12341	Return the code for an OP_ALTERNATE instruction .
12342	Convert an opr into a python code .
12343	Convert an expression into an expression .
12344	Convert an op operand to a string .
12345	Convert an opr into a python code object .
12346	Find directives that match pred .
12347	Determines if two tokens are flattened .
12348	Extract directives from a comment .
12349	Process the results .
12350	Get id from id .
12351	Remove a key from the list of hotkeys
12352	Add command line arguments .
12353	Configure logging .
12354	Validate the arguments .
12355	Convert infix nodes to postfix .
12356	Convert a list of postfix nodes to an optree .
12357	Reduce a list of operator nodes .
12358	Add command line arguments .
12359	Loads the plugin manifest
12360	Get a metric definition by name
12361	Returns the column length and description
12362	Returns the column lengths of the metrics .
12363	Replace metrics with underscores .
12364	Output the field s fields .
12365	Output the metrics .
12366	Generate Markdown definitions .
12367	Parse input .
12368	Attempt to determine the most consumed text .
12369	Add command line arguments
12370	Parse a string into a datetime object .
12371	Output metrics to csv
12372	Output the given text as JSON .
12373	Output a JSON string .
12374	Generate XML representation of the response .
12375	Determines if the node is a default or terminal node .
12376	Pretty print a tree .
12377	Returns a wrapper for extractor .
12378	Get terminal node .
12379	Get a repetition .
12380	Extract text from text .
12381	Count the number of whitespace in text .
12382	Call extractor .
12383	The position of the node .
12384	Return True if this node is empty .
12385	Add ignored strings .
12386	Check if value is a type .
12387	Return a new ParseNode .
12388	Return a new ParseNode with trimmed children .
12389	Merge two ParseNode objects .
12390	Return a new ParseNode .
12391	Return a new ParseNode .
12392	The Position object .
12393	The maximum readed position .
12394	Go to the next character .
12395	Go to the next line .
12396	Go to the previous line .
12397	The last readed line .
12398	Increment the cursor position .
12399	Save current context .
12400	Restore the current cursor position .
12401	Return a string representation of the type .
12402	Set internal name .
12403	Count the number of variables in the signature .
12404	Count the number of functions .
12405	Update the number of types and functions .
12406	Updates the scope with the given values .
12407	Return a new scope with the given sig and state .
12408	Update the intersection of two sets .
12409	Return a new scope with the given sig and state .
12410	Update the scope with the given oset .
12411	Return a new scope with the given sig .
12412	Update the symmetric difference of two sets .
12413	Return a new scope with symmetric difference .
12414	Add a signature to the scope .
12415	Remove a signature from the set .
12416	Discard a signature .
12417	Returns the values of the signature .
12418	Return the first signature .
12419	The last signature .
12420	Get a signature by key .
12421	Get a scope by its name .
12422	Get a signature by its name .
12423	Returns a list of all symbols that are polymorphic return
12424	Call the TranslatorInjector .
12425	Normalize the AST .
12426	Set this node from another node .
12427	Iterate over rvalues .
12428	Check if a hit is ok
12429	Returns the signature for this parameter .
12430	Resolve this context .
12431	Returns a list of resolved names
12432	Set the resolved name of the given type .
12433	Delete a local file
12434	Delete a file from S3
12435	Delete a file .
12436	Saves object to local file
12437	Saves object to S3
12438	Saves object to file .
12439	Find a bucket by path .
12440	Create an Enum class .
12441	Verify that the arguments of a function is correct .
12442	Add a callobject to the chainmap .
12443	Decorator to add a method to the class .
12444	Decorator to register a function .
12445	Decorator to register a rule .
12446	Decorator for directive .
12447	Decorator for class methods .
12448	Bind dst to dst .
12449	Read an EOF character .
12450	Push the rules to the tree .
12451	Populate self . rule_nodes .
12452	Get the value of a node .
12453	Add a parsed stream .
12454	Begins a tag .
12455	Set the end of tag .
12456	Set rules .
12457	Set the hooks dictionary .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Peeks at the end of the stream .
12462	Read one character .
12463	Read a character from the stream .
12464	Read until the stream ends .
12465	Ignores blanks .
12466	Set the hit_dtype .
12467	Set the cluster dtype .
12468	Ensure that the given hits are compatible .
12469	Add a rule clause to the namespace .
12470	Add rules to bnf .
12471	Add a rule to the parser .
12472	Adds sequences to the parser tree .
12473	Add an alternative
12474	Add a range .
12475	Add a rule .
12476	Add a capture .
12477	Add a binding .
12478	Add a parser hook .
12479	Set parameter number .
12480	Set string value pair .
12481	Set parameter value .
12482	Set parameter identifier .
12483	Set the name of a hook .
12484	Add a parameter .
12485	Get the rules from the EBNF .
12486	Read and parse the stream .
12487	Add a state to the state
12488	Returns a dot representation of the graph .
12489	Save the graph to a dot file .
12490	Write the graph to a png file .
12491	Returns a string representation of the state .
12492	Return the next state .
12493	Reset the state of all alive states
12494	Infer the type of a block .
12495	Infer subexpr .
12496	Infer id from identifier
12497	Infer a literal .
12498	Dumps node localizations
12499	Parse a parser rule .
12500	Returns an exit statement .
12501	Parse the statement .
12502	Visitor for call .
12503	Parse a CallTrue expression .
12504	Visitor for a hook .
12505	Visit the grammar node .
12506	Visitor for Capture AST node .
12507	Return a scope expression .
12508	Visitor for Alt
12509	Visit Seq node .
12510	Visitor for RepOptional expression .
12511	Return an astroid .
12512	Return an astroid .
12513	Concatenate a string to another one .
12514	Set indentation level .
12515	Recursively convert a list into a string .
12516	Print a list of nodes .
12517	Populates all edges from a sequence .
12518	Populate the edge register from all sequences .
12519	Build a state tree from a list of Statements .
12520	Predicate equality operator .
12521	Build a Grammar from a string .
12522	Build a Grammar object from a file .
12523	Parse the source .
12524	Parse a file .
12525	set src to dst
12526	Set the node s value to the dst node .
12527	Get a subnode
12528	Default serializer implementation .
12529	Get a list of depositions .
12530	Dump a data structure to a dictionary .
12531	Get ibcibrecids from a given date .
12532	Get records from invenio2 .
12533	Try to import BibRecDocs .
12534	Dump a list of bibdocs to a file
12535	Get the number of bibdocs .
12536	Check a BibDoc .
12537	Serialize a token .
12538	Gets the count of users .
12539	Dump a user .
12540	Gets the featured community .
12541	Get the ibrecids from a given date .
12542	Get the records that have been modified since the given date .
12543	Get the collection restrictions for a collection .
12544	Get all revisions for a given record .
12545	Gets the collection collections for the given recid
12546	Convert MARC XML to JSON .
12547	Get the number of records matching the given query .
12548	Serialize a record into a dictionary .
12549	Dump object to a dict .
12550	Load data from database .
12551	Collect all things from the database .
12552	Initialize the application context .
12553	Decorator for memoization .
12554	Return the run_sql module .
12555	Gets all connected roles for an action .
12556	Get a list of actions .
12557	Dump the token to a dict .
12558	Load token from data .
12559	Create record dump from MARCX file .
12560	Get the value of a config variable
12561	Serialize object to a dict .
12562	Retrieve users from the database .
12563	Get users from invenio2 .
12564	Dump a User instance
12565	Load a deposit .
12566	Create a record and persist it .
12567	Load a record from the database .
12568	Load records from sources .
12569	Show records in a dump .
12570	Load dump files .
12571	Load communities from sources .
12572	Load users from sources .
12573	Load a deposit from sources .
12574	Returns a list of profiling stats
12575	Run the application .
12576	Dump profiling stats to file .
12577	Delete the profile .
12578	Deletes the profile .
12579	Get the server status .
12580	Temporarily disable timestamp .
12581	Load a user .
12582	Calculate translation of images .
12583	Merge multiple images into one image .
12584	Adds a dimensions with ones to array .
12585	Create a new record .
12586	Create record from dump .
12587	Update a record in the database .
12588	Create persistent identifiers .
12589	Delete record .
12590	Create files in record .
12591	Create file instance .
12592	Delete buckets from record .
12593	Returns a list of pids that are missing .
12594	Prepare the list of revisions
12595	Prepare files
12596	Prepare the pids list
12597	Returns True if the given record is deleted .
12598	Load a community from data .
12599	Load a featured community .
12600	Dump a thing .
12601	Executor for globus check
12602	Delete the widget .
12603	Returns the magnitude of a vector .
12604	Normalize a vector .
12605	Transform the texcoords of the tex .
12606	Ensures the bones in the given data .
12607	Set the length of the bone .
12608	Set the parent of this node .
12609	Get the coordinates of the pivot point
12610	Start animation .
12611	Set the current state
12612	Unset the camera state
12613	Set the state of the texture .
12614	Unset the robot state .
12615	Ensure model data exists .
12616	Redraw the mesh data .
12617	Render the object .
12618	Sets the model .
12619	Write toxml reports to file .
12620	Convert test reports into tox XML .
12621	add a menu
12622	Redraw the label .
12623	Redraw the label .
12624	Draws all widgets .
12625	Delete widget from widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add label to main window
12630	Adds a button to the dialog .
12631	Exit the popup dialog .
12632	Adds a button to the dialog .
12633	add a button to the dialog
12634	Updates the progressbar .
12635	Render all actors .
12636	Render the scene .
12637	Create a context manager for a given step .
12638	Check if a resource exists .
12639	add a category
12640	Get the missing texture
12641	Get a model by name
12642	Load a model by name
12643	Get model data
12644	Load a model from a JSON file
12645	Add a widget .
12646	Draws the menu .
12647	Redraw the canvas
12648	Set the size of the scrollbar .
12649	Checks if a mouse is at the given position
12650	Compute the probability of each group .
12651	Adds a layer to the plot .
12652	Get the region of the given buffer .
12653	Draw the buffers .
12654	Add a function to the action .
12655	Execute the given action .
12656	Register a new name .
12657	Add a layer to the layer .
12658	Draw all layers .
12659	Delete all layers .
12660	The border list
12661	Offset the list .
12662	Returns the size of the widget
12663	Read a mesh from an hdf5 file .
12664	Creates a matplotlib matrix for a given shape .
12665	Set fields .
12666	Add or update fields .
12667	Make sure all elements are in the correct types
12668	The space of the element .
12669	Calculates the centroids and volumes of the mesh .
12670	Calculate the angles of the element
12671	Dictionary of edges
12672	Return the statistics of the mesh .
12673	Convert an element set to a node set .
12674	Convert node set to surface
12675	Convert a surface to element sets .
12676	Return metadata for all fields
12677	The metadata for this step .
12678	Make the work directory .
12679	Run post processing .
12680	Run the GMSH algorithm .
12681	Read a history report .
12682	Read a field report .
12683	Convert a list of lists to a string .
12684	Return an equation string .
12685	Return UNSORTED string for a given label .
12686	Parse the response .
12687	Make a GET request
12688	Write XY report to file .
12689	write a field report
12690	List available components
12691	Return the error message for the field .
12692	Checks if the exc is a Descriptor .
12693	Sets the data
12694	will get the axis mode for the current series
12695	sets the graph plotting options
12696	Create a new class .
12697	Cycle through datafeeds .
12698	Try to convert value to float .
12699	Convert a string to a number .
12700	Render a graph .
12701	force unicode to unicode
12702	Clean HTML .
12703	Returns True if mime_type matches the given mime_type .
12704	Parse domain name .
12705	Removes domain name from domain name .
12706	Makes a hash of the given token .
12707	Collect words from the document .
12708	Index the document .
12709	Invert a hash index .
12710	Get the frequency of a set of hashes .
12711	Yield tuples of stream ids
12712	Yield tuples of tf index ids .
12713	Convert a ProtoStream into an iterable .
12714	Make a stream item from an entry
12715	Makes a ContentItem from a node .
12716	Read a varint from the stream .
12717	Read a block of data .
12718	Serialize a StreamItemKey key .
12719	Convert a streamitem to a key and compress it .
12720	Change the working directory .
12721	Strip a prefix from s .
12722	Strip a suffix from a string .
12723	Check if needle is a subsequence .
12724	Show the web page .
12725	Run the wsgiref server .
12726	Shut down the server .
12727	Registers a route .
12728	Decorator for error handlers .
12729	Get content of a file .
12730	Returns a callback for the error page .
12731	Add a route .
12732	Resolve a route .
12733	Resolve a non literal route .
12734	Normalize pattern .
12735	Generate the response body .
12736	Add a header .
12737	Set a cookie .
12738	Return a string representation of the status .
12739	The Content - Type header .
12740	Get all values for a given key .
12741	Recursively delete files .
12742	Return a list of all open files .
12743	Print statistics about file types .
12744	Rejester run .
12745	Attempt to fetch a file from S3 .
12746	Get the lines of a file .
12747	Generate a random adjective pair .
12748	Generate random adjspecies pair .
12749	Morph a sentence .
12750	Show similarity score .
12751	Run hiragana on the given sentence .
12752	Get entities of a given sentence .
12753	Display the shortsum of a given review .
12754	List keywords .
12755	Get the chrono of a sentence .
12756	Create a new stage .
12757	Initialize stages .
12758	Initialize all stages .
12759	Iterate over the input file .
12760	Run all writers .
12761	Run incremental transform on stream
12762	Replace the config with a new stage .
12763	Create a WSGI application .
12764	Convert a list of sentences into a set of chains .
12765	Returns True if all target mentions in target_mentions are found .
12766	Determine if any of the target mentions in target_mentions .
12767	Compile mentions for a given rating .
12768	Match multiple tokens .
12769	Create a tagger file from the given XML file .
12770	align the given chunk with the given text
12771	Shut down the child process .
12772	multiply p by n
12773	Replace email addresses in text .
12774	generate strings identified as sentences
12775	make a sortedcollection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to unicode .
12778	Create a cleaned file with cleaned files .
12779	Create a temporary NRML file .
12780	Removes whitespace from a string .
12781	align a chunk with the given scanner
12782	Make absolute paths to absolute paths
12783	Instantiate and instantiate a pipeline configuration .
12784	Generate a chunk for the given path .
12785	Remove invisible characters .
12786	Removes whitespace from HTML .
12787	make a clean visible file
12788	Remove whitespace from a string .
12789	Main entry point for the script .
12790	load a stage
12791	Load external stages from path .
12792	Import stages from a module .
12793	Initialize a stage .
12794	Read bytes from index .
12795	Filters a given href
12796	Creates a list of labels .
12797	yield all file paths under input_dir
12798	Get a list of all tasks with a prefix .
12799	Get a random keeper .
12800	Extract tokens from a sentence .
12801	Returns a list of sentences .
12802	Decorator for retrying .
12803	return True if ok raise exception if not
12804	Get a bucket object
12805	Decode the given data .
12806	Get a chunk from a bucket .
12807	Convert a stream_id to kvlayer key .
12808	Convert a KVayer key to a stream ID .
12809	Returns a key for the given stream item .
12810	Runs the application .
12811	Build an argument parser .
12812	Add xpaths to the stream .
12813	Given a list of sentences return a list of tokens .
12814	Convert a list of char tokens to char offsets .
12815	Convert character offsets to xpaths .
12816	Add an element to the tag .
12817	The xpath piece .
12818	The index of the text element .
12819	Iterate over descendants of elem .
12820	Select all elements of a source .
12821	Select elements by name .
12822	Select elements matching the given regex
12823	Select an attribute from an XML element .
12824	Returns the following siblings of elem .
12825	Recursively pretty print XML elements .
12826	Call inkscape .
12827	Wrapper around inkscape .
12828	Export svg to PDF
12829	Export svg to png file
12830	Get a jinja environment for a given file .
12831	Set up the template
12832	Fill document with template contents .
12833	Write the content to a file .
12834	Create a document from a template file .
12835	Fill SVG code with SVG code .
12836	Render the document to a temporary file .
12837	Render the tex file .
12838	Parse the source using an expat .
12839	Parses a source and returns it .
12840	Extract HTML fragment from source .
12841	Insert text .
12842	Insert node before refNode
12843	Clone the node .
12844	Execute the options
12845	Return the string representation of a node .
12846	Insert a child element .
12847	Parse config file .
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create calendar event .
12851	Run the command line .
12852	Get the file extension .
12853	Add an extension to a file .
12854	Get a temporary file .
12855	Remove all files from workdir
12856	convert csv to json
12857	Replace the content of a file .
12858	Parses the soup
12859	Check the next sibling of tag .
12860	Create an italic tag .
12861	Create a strong tag .
12862	Wrap underline tag .
12863	Parse attributes from tag .
12864	Remove line breaks from tag .
12865	Parse a href .
12866	Parse an attribute .
12867	Translate a set of translation strings into a dictionary .
12868	Convert to a JSON string .
12869	Find all files matching the given regex
12870	Concatenate strings .
12871	Check if the first part starts with the given part .
12872	Iterate over parts in full .
12873	Get length of a string .
12874	Convert obj to boolean .
12875	Iterate over a sequence .
12876	Lookup values in a table by key .
12877	Replace HTML characters for SVG code .
12878	Ensure the svg file is an SVG figure .
12879	Merges two svg files
12880	Merge multiple PDFs into a single file .
12881	Embed font to svg
12882	Embed font to svg file
12883	Validate the inputs .
12884	Check if the function is callable .
12885	Recurse through the input and output the output
12886	create input from template
12887	Recurse through the input tree .
12888	Convert obj to string
12889	Convert obj to numbers
12890	Convert obj to boolean
12891	Serialize an XPath AST node .
12892	Change the encoding of an XML file .
12893	Save text into a QR code .
12894	Launch an experiment .
12895	Calls the given command with the given arguments .
12896	Convert a tex file to PDF .
12897	Returns a list of all options for the given invocation
12898	Transform a geometry to another spatial reference .
12899	Create geometry object .
12900	Expand a rectangle with another one .
12901	Intersect two Envelope .
12902	Determine if this envelope intersects other .
12903	get polygon
12904	Construct a DataFrame from ZNM
12905	Write the dataframe to a file .
12906	Return a DataFrame with rows matching a condition .
12907	Returns a table with the specified nucleotide
12908	Return the intersection of another table .
12909	Return a Table with only the elements in the given table .
12910	Return a new Index with only odd elements .
12911	Return only the elements of the RDD .
12912	Return an iterator of elements that are odd .
12913	Calculate the error
12914	Root Mean Square Error .
12915	Binding energy table
12916	S2n .
12917	S1n .
12918	S2P .
12919	S1P .
12920	Creates a derived table
12921	Decorator used to execute a function .
12922	Derives a key from a master password .
12923	Bootstrap a database .
12924	Search domain .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract lines from a file .
12928	Return the prefix of a filesystem path .
12929	Get the SID of the user .
12930	Run the program .
12931	Initialize logging .
12932	Update a file
12933	Return a dictionary of available driver names .
12934	Return the driver for a given path .
12935	Convert geom to array
12936	Rasterize a layer .
12937	Opens a raster file .
12938	Convert bytes to raster
12939	Copy raster to dest
12940	The DMD creation options .
12941	Create a raster object
12942	Sets the geometry transform .
12943	Read the data as an array .
12944	The envelope of the region .
12945	Get the driver object .
12946	Create a new raster
12947	Return a mask of the current shape .
12948	Get the nodata value .
12949	Read a raster file .
12950	Resample this region to a new one .
12951	Saves the image to the specified location .
12952	Sets projection for the dataset
12953	Warp the raster to a spatial reference
12954	Calculate the chunklen and enclosing the given length .
12955	Lookup the alphabet for the given charset .
12956	Encode a single chunk .
12957	Convert a chunk to a long integer .
12958	Get chunk from data
12959	Decorator for cache functions .
12960	Return a compiled regexp for a file .
12961	Normalize date format .
12962	Detect timezone .
12963	Convert object to a dictionary .
12964	Activate pdb hook .
12965	Pretty - print an object
12966	Process the jobs from the server .
12967	The main worker loop .
12968	Run a worker pool .
12969	Sets the classification of this OrderSettings .
12970	Send a message to the server .
12971	Turn on a light .
12972	Turn on switch .
12973	Turn off on with brightness .
12974	Turn off a device .
12975	Send all messages from the queue .
12976	Sends a message to the link .
12977	Create a cmph adapter .
12978	Sets the nature of this ChartSettings .
12979	Update self . def_dict with the given dictionary .
12980	Reset all options to default .
12981	Set configuration files .
12982	Iterate over all options
12983	Returns an iterator over all of the default values
12984	Create a configuration file .
12985	Update configuration values .
12986	Reads the given configuration file .
12987	Reads configuration files .
12988	Generate option names for a given section .
12989	Returns a list of sections for the given command .
12990	Solve command options .
12991	Add options to the parser .
12992	Build the argument parser .
12993	Parse command line arguments .
12994	Handle zsh component commands .
12995	Run a zsh command .
12996	Return a list of command names .
12997	Completes bash command .
12998	Start a new master server .
12999	Called when a connection is made .
13000	Called when a line is received .
13001	Called when the connection is lost .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close the job .
13005	Run a list of jobs .
13006	Close the connection pool .
13007	Remove all waiting threads .
13008	Add a result .
13009	Wait for changes to be completed .
13010	Load the next job .
13011	Called when the job is complete .
13012	Adds a result to the pool .
13013	Cancel all active jobs .
13014	Wait for all active jobs to finish .
13015	Distribute the jobs from the active jobs .
13016	Add a job set to the pool .
13017	Get a job from the hub .
13018	Unregisters a job .
13019	Add a result to the job .
13020	Called when a job set is done .
13021	Close the animation .
13022	Remove duplicates from list .
13023	Recursively match a regular expression .
13024	Return a list of entries that match the filter criteria .
13025	Get EC2 region .
13026	Filter entries that match filters .
13027	Get a host .
13028	Create an instance from a dictionary .
13029	Get attribute from tag .
13030	Sort entries by attribute .
13031	Represent the table as a string .
13032	Create instance from boto instance .
13033	Returns True if the filter matches the filter .
13034	Return the public IP address .
13035	Render a list of entries .
13036	Add timestamp to event dict .
13037	Setup logging .
13038	Create a Logger instance .
13039	Setup Celery app
13040	Get a specific job
13041	Delete a worker .
13042	Create a switch option .
13043	Create a configuration section
13044	Set options from string
13045	Handles config commands .
13046	Create zsh_complete files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare all rows in a table .
13051	Turn text into a terminal color .
13052	Get a color from a string .
13053	Generate a random color .
13054	Prompt user for input .
13055	Check user credentials .
13056	Check token validity .
13057	Decorator for methods that require token auth .
13058	Check if process is running .
13059	Import a module .
13060	Returns the IP address of the connected device .
13061	Make a request to the API .
13062	Prepare post parameters .
13063	Start the application .
13064	Render a template .
13065	Run a shell command .
13066	Stream a list of command dictionaries .
13067	Streams commands from a list of commands .
13068	Returns a number of days between two dates
13069	Get the path of a command .
13070	Build the ssh command .
13071	Build the SCP command .
13072	Copy entries to remote_path
13073	Copy a set of entries from a list of entries .
13074	Run a single SSH command on a list of entries .
13075	Connect to an entry
13076	Load a profile from the given location .
13077	Create a LsiProfile instance from command line arguments .
13078	Add a relationship .
13079	Returns a list of the parts of the given type .
13080	Load the relationships from the given source
13081	Add a part .
13082	Load a Part from the data .
13083	Find the key for the given name .
13084	Given an element parse out the proper ContentType
13085	Parse the input_string and return the result .
13086	Builds a JWT .
13087	Assign force field to the AMPAL object .
13088	Find the maximum radius and NPNP .
13089	Convert force field parameters into a dictionary .
13090	Convert to a bytes object .
13091	Yield all matching segments matching the given name .
13092	Copy a directory .
13093	Open a bucket .
13094	Uploads a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all files in a directory .
13098	Returns a list of all directories in a given directory .
13099	Create prefix for given directory .
13100	Delete a file from the bucket .
13101	Login to the LTD Keeper server .
13102	Returns the loud text of the user
13103	Delete a directory .
13104	Returns the home URL
13105	Decorator to silence a function without namespace .
13106	Bulk breadcrumb .
13107	Bibliographic breadcrumb .
13108	Calculate the interaction energy of an object .
13109	Calculate internal energy .
13110	Returns a list of all hotspots in the tree .
13111	Get a keeper token
13112	Upload a project to Travis .
13113	Decide whether to skip upload on Travis events .
13114	Purge a surrogate from a service .
13115	Register a build .
13116	Confirm the build
13117	Recursively update a dictionary .
13118	Command - line entry point for experiment .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split a path into parts .
13122	Find a file in the given path .
13123	Get the editor for filepath .
13124	Process a module .
13125	Generate a chart
13126	Save a chart object to a file .
13127	Serialize data to a chart .
13128	Patch JSON data .
13129	Convert json data to HTML .
13130	Convert a dict to a Pandas DataFrame
13131	Write html to folder
13132	Makes a chart class
13133	Encode a set of xfields .
13134	Link to a GitHub user .
13135	Infer tarball url from app . json
13136	Build an app .
13137	Destroy an app .
13138	Decorator for iterating over an attribute .
13139	Generate a random binary string .
13140	Generate a random IP address .
13141	Generate a random date .
13142	Create a session .
13143	Make an API request
13144	Create a build .
13145	Check the status of a build .
13146	Generator for sequence numbers .
13147	Decorator for memoization of functions .
13148	Decorator for unique methods .
13149	Register sub commands .
13150	Returns the root arg parser .
13151	Get the description of this element
13152	Get the help for this command
13153	Run this parser .
13154	Encodes data .
13155	Returns a pandas DataFrame containing all of the agents .
13156	Get the last n activities of each file .
13157	Get activity list .
13158	Request activity data .
13159	Returns the endpoint for the given athlete .
13160	Get the full path to an activity .
13161	Make a GET request
13162	Create a build .
13163	Creates a url with the given view
13164	Get a random title .
13165	Get a person .
13166	Generate a random name .
13167	Render the data .
13168	Set the dataset .
13169	Render the chart .
13170	Validate a chart type .
13171	Render and return the URL .
13172	Wrapper around webopen .
13173	Save the image to a file .
13174	Like urllib . urlopen .
13175	Return the image as an Image object
13176	write uri to file
13177	Compute the checksum of the MAR file .
13178	Generate a decimal number .
13179	Decorator to register entity name .
13180	Returns a dict of unprotected and protected and protected properties .
13181	Serialize signing keys as JWSKs .
13182	Unpack metadata statement into ClientMetadataStatement
13183	Pack metadata statement .
13184	Evaluate the metadata statement
13185	Correct the usage of a federation usage .
13186	Extend the request with sms
13187	Parse command line arguments .
13188	Add command line arguments to arg parser .
13189	Apply logging options to log files .
13190	Log msg with verbose verbose .
13191	Map a word to its letter frequency .
13192	Iterate over anagrams in a word .
13193	Convert class name to AMP class name .
13194	Transform a timeseries into a list of x y coordinates
13195	Get the last value of a timeseries
13196	Validate page number .
13197	Extract a page of items from an iterator .
13198	set chmod
13199	Create an internal signing service .
13200	Create a signer client .
13201	Sign a request .
13202	Creates a new resource
13203	Update metadata statement .
13204	Update the signature
13205	Yield the contents of a bundle .
13206	Create a bundle from data .
13207	Returns a list of urls for this asset .
13208	Returns the HTML tags for this asset .
13209	Returns HTML tags for all assets .
13210	Ensure URL is valid .
13211	Find links in url .
13212	Connect to the AMP server .
13213	Get the list of module names .
13214	import modules from service
13215	Convert a comma - separated string into a datetime object .
13216	Return a copy of the document with the given list of fields
13217	Convert datemap to date_map .
13218	Print the cursor .
13219	Output the results of the cursor .
13220	Get a list of tasks from a list of tasks .
13221	Add default departments to the project .
13222	Add default assets to the given project .
13223	Add default sequences .
13224	Create a shot for each user .
13225	Called when a project is created .
13226	Create a new shot .
13227	Create all tasks for the given element
13228	Pre - connect callback .
13229	Send a packet to the peer .
13230	Get a configuration value from a section and key .
13231	Decorator to add a function to a function .
13232	Decorator for Cinder .
13233	Decorator for neutron processing .
13234	Decorator for glance applications .
13235	Decorator for swift processing
13236	Decorator for Keystone
13237	Decorator for heat processors .
13238	Add a factory .
13239	Removes a factory by identifier .
13240	Connect to the given factory .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Calls a remote command .
13244	Called when the connection is made .
13245	Handle multiplexed connection .
13246	Called when data is received .
13247	Send data to the server .
13248	Called when the connection is lost .
13249	Returns the protocol for the given connectionIdentifier .
13250	Called when the remote protocol is received .
13251	Disconnect from a connection
13252	Center a string on the terminal
13253	print the clock on the right
13254	Formats the version number as a string .
13255	Identify the unit framework .
13256	Assert that value is convertible to target_unit .
13257	Pad data to block_size
13258	Pads data to block_size .
13259	Sign a request .
13260	Gather metadata statements .
13261	Print a list of anagrams .
13262	Argument parser .
13263	Parse arguments .
13264	Called when data is received .
13265	Called when a type is not registered .
13266	Create a function stub .
13267	Ping a remote call .
13268	Generate the regex for the command .
13269	Convert string to amp list .
13270	Convert to string .
13271	Verify that the metadata statement is correct .
13272	Parse a JWS response .
13273	Dump a Postgres database to a temporary file .
13274	returns a list of all databases on this server
13275	Get files from a given path .
13276	Synchronize a folder in S3 .
13277	Decorator for views that require user_tokens .
13278	Redirect user to login page .
13279	Build and build packages .
13280	Return a context manager for reading data .
13281	Load the configuration from the file
13282	Produces a self - signed JWT .
13283	Create a JWT signed by signing keyjar .
13284	Wrap a function as a library .
13285	Reconstructs all modules in the given directory .
13286	Run the test runner .
13287	Get the score for a given letter .
13288	Return the score of a word .
13289	Get a list of words .
13290	Return True if the given word is a valid rumble word .
13291	main entry point for SOS search
13292	Run the command .
13293	Called when a string is received .
13294	Get the command and responder for a given command name .
13295	Parse request parameters .
13296	Runs a response and returns it .
13297	Write a response to the transport .
13298	Called when the connection is lost .
13299	Build protocol for given address .
13300	Create a KeyJar from a JWKS string .
13301	Load the key jar from a string .
13302	Process a message .
13303	Process a cinder event .
13304	Process an event .
13305	Process a glance customer .
13306	Process a swift customer .
13307	Process a message .
13308	Process the event type .
13309	Serve the server .
13310	Print msg to stdout .
13311	Print a message to stderr .
13312	Register a command sub class .
13313	Register a command sub class .
13314	Convert value to string .
13315	Validate the argument .
13316	Update completer dictionary .
13317	Connects to the server
13318	Init the mq connection
13319	Initialize the service modules .
13320	Initialize Openstack consumer
13321	Initialize cinder consumer
13322	Initialize the neutron consumer .
13323	Initialize the glance consumer
13324	Initialize heat consumer
13325	Enables OpenStack component notifications .
13326	Get information about a song
13327	download a song
13328	Execute instructions .
13329	Load a name by name .
13330	Call a function .
13331	dump mysqldump to tempdir
13332	Render a DBA code .
13333	Execute the application .
13334	Run the application .
13335	Change the current working directory .
13336	Copy a directory tree to dst .
13337	Starts the debugger .
13338	Get the modification time of a file .
13339	Determines if a file has been modified since last time .
13340	Synchronize all files in the database .
13341	Clear the contents of the file .
13342	Scrape a feed
13343	Download image from url and save it to disk
13344	Check if the image has changed .
13345	Returns a template . Node subclass .
13346	Find the name of the calling function .
13347	Get the defining component of the PE .
13348	Main entry point for ouofoo .
13349	Find a symbol by name and kind .
13350	Checks if the given root is contained in the PE .
13351	Check if PE is global .
13352	Get the data type name of a datetime object .
13353	Get related attributes .
13354	Create an Enum instance .
13355	Creates a function that can be used as a function .
13356	Create external entity functions from a metamodel .
13357	Create a function for a given S_sync .
13358	Convert cnst_symbol to float
13359	Create an operation method from a metaclass .
13360	Create a derived attribute .
13361	Create a class from an object
13362	Makes an association
13363	Create a linked association .
13364	Create association .
13365	Create a component from a model .
13366	Send a reply to the socket .
13367	Accept a channel .
13368	Reject this call .
13369	Raise an exception .
13370	Send a call to the collector .
13371	Establish a connection .
13372	Dispatch a reply .
13373	Guess the type name of a string .
13374	Deserialize a Python value .
13375	r \ \ \ \
13376	r \ \ \ \
13377	Get a feature .
13378	Get documents from the index .
13379	Put features into the layer .
13380	Delete a document
13381	Delete all documents in this index .
13382	Delete the index .
13383	Searches for documents in key_ranges .
13384	Iterate over the ids of the specified keys .
13385	Scan a prefix for features .
13386	Scan a prefix for a prefix .
13387	Perform fulltext search .
13388	Fetch documents from fulltext search .
13389	Scan for keywords .
13390	Iterate over keywords .
13391	Yield ids for a given feature .
13392	Convert feature names into feature names .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Returns the number of bytes in the given dictionary .
13400	Count the number of bytes in the document .
13401	Return a string representation of a FeatureCounter .
13402	Process command line arguments .
13403	Default formatter .
13404	Return a string representation of a link .
13405	Returns a pretty string for the given identifier .
13406	Checks the uniqueness of the metaclass .
13407	Check the integrity of a link .
13408	Ensure subtype is a subtype of supertype
13409	Create a function to index a feature index .
13410	Convert a string to a bytes object .
13411	Put items into the table .
13412	Deletes the table .
13413	Scan the key_ranges .
13414	Scan the keys in the table .
13415	Scan the index for an index .
13416	Indexes a prefix using a prefix .
13417	Scan a prefix and return its key .
13418	Apply a prefix to a prefix .
13419	Define an index .
13420	Insert the given ids into the index table .
13421	Put raw value into the index table .
13422	Generate index keys for given ids .
13423	Get index by name .
13424	Verify that the pypi package name exists in the registry .
13425	Adds a direction to the given value .
13426	Return the name of the type
13427	Get the reference of an attribute
13428	Build the core type element .
13429	Build an enum type element
13430	Builds a struct type element
13431	Build user type element .
13432	Builds the type from the data .
13433	Build an ElementTree Element from an o_obj
13434	Build the element tree for ooofoo .
13435	Build an XML Schema element .
13436	Return pretty - printed XML string .
13437	Fetches a list of stolen likes .
13438	Set the position of the node .
13439	Decorator to track the production of a function .
13440	r
13441	r
13442	r
13443	r
13444	r
13445	r
13446	r \ . \ .
13447	r \
13448	r
13449	r
13450	r
13451	r
13452	r \ \
13453	Create a queue
13454	Delete a queue
13455	List all queues
13456	List all exchanges
13457	Purge a queue
13458	Create a MIME message .
13459	Read the image from the connection .
13460	Returns True if text is visible .
13461	Run the command line .
13462	Serialize a value to a string .
13463	Serialize an association .
13464	Return a string representation of a class .
13465	Entry point for the script .
13466	search for a given query
13467	Partitions the collection with the given condition .
13468	Run the application .
13469	Render the bidi context .
13470	Find the relationship between two models .
13471	Convert this object into a metaclass .
13472	Compute lookup key for given instance .
13473	Compute index key from to_instance .
13474	Return the type of an attribute .
13475	Creates a new instance
13476	Iterate over all of the metaclasses .
13477	Define a new class
13478	Send message to socket .
13479	Receive messages from socket .
13480	Run dead code .
13481	Parse email addresses .
13482	Decorator for rpc functions .
13483	Return a table of the RPC specification .
13484	Normalize postcode .
13485	Return the next value .
13486	Reconstruct SYS instances
13487	Called when the C is loaded .
13488	Accept a PKG .
13489	Get the brightness of the image
13490	Matches the pattern .
13491	Find the matching character at the given position .
13492	Returns a QTextEdit . ExtraSelection
13493	Called when the cursor is changed .
13494	Extract exception information .
13495	Create the input hook for Qt4 .
13496	Get a mapper instance
13497	Decorator to register a URL pattern .
13498	Decorator for urls
13499	Add a pattern to the registry .
13500	Add a new entry .
13501	Calls the given URL with the given arguments .
13502	Execute the history .
13503	Updates the history cursor .
13504	Handles down pressed by shift modifier .
13505	Search the history of a substring .
13506	Go to the next edited history .
13507	Process reply message .
13508	Returns True if history is locked .
13509	Get the edited history .
13510	Set the history .
13511	Store the current input buffer .
13512	Called when the user closes the connection
13513	Build the Record Collection
13514	Convert a collection to a Pandas DataFrame .
13515	Combine a Pandas DataFrame into a DataFrame .
13516	Set attributes from a dictionary .
13517	Subscribes to the given topics
13518	Log a message .
13519	merge list_of_lists into sorted lists
13520	Iterate over a reference .
13521	Convert a notebook to a new one .
13522	Determines the supported platform .
13523	Get importer for path_item .
13524	Wrapper around cStringIO .
13525	Parse a version string .
13526	Override setuptools to override setuptools
13527	Add a distribution to the registry .
13528	Find plugins in the given environment .
13529	Get the cache path for an archive .
13530	Parse an entry point .
13531	Return the parsed pkg_info .
13532	Computes the dependencies for this package .
13533	Parse filename .
13534	Collapse leading whitespace from a string .
13535	Disconnects the current text edit .
13536	Called when the text edit is changed .
13537	Return the current text cursor
13538	Updates the current item .
13539	Register admin site .
13540	Return a list of disk partitions .
13541	Get system CPU time .
13542	Get system cpu times .
13543	Read raw text from stdin .
13544	Read raw text from stdin .
13545	Updates the tab bar visibility .
13546	Create a tab with the current kernel .
13547	Add a new tab with the given name .
13548	Adds a menu action to the given menu
13549	Generate dynamic magic functions
13550	Populates all_magic_menu with a list of magic items
13551	Closes the window .
13552	Generate a password .
13553	Verify that the passed in hashed passwd .
13554	Render an editable boolean cell .
13555	Return the short title of an item .
13556	Recursively collect the jaxitable booleans .
13557	Toggle boolean value of obj .
13558	Check if the user has permission to change the object .
13559	Check if the user has delete permission .
13560	Add n nodes to the graph .
13561	Make a bintree .
13562	Submit jobs to the view .
13563	Ensure that all nodes in the graph have been completed .
13564	Make color table .
13565	Make a copy of this color scheme .
13566	Adds a new color scheme to the table .
13567	Sets the active color scheme .
13568	Return the path to the library .
13569	Process incoming messages from the sub channel .
13570	Handles a request .
13571	Wait for kernel to terminate .
13572	Set the current style .
13573	Get format for token .
13574	Get format from the document .
13575	Returns a QTextCharFormat object for the given token .
13576	Look for a command in PATH .
13577	Normalize path .
13578	Raise an error if the namespace package does not exist .
13579	Validate entry point .
13580	Is the last blank line?
13581	Returns True if the last two blanks are the same .
13582	Transform a system line into a string .
13583	Replace the magic magic in the given line .
13584	Transform a legacy prompt .
13585	Transforms an IPython prompt line .
13586	Push lines to the interpreter .
13587	Returns True if the push is more than one line .
13588	Find indentation for a given line .
13589	Store the given lines into the buffer .
13590	Reset the raw representation of the source .
13591	Process cell magic lines .
13592	Append lines to cell mode .
13593	Transform a single cell .
13594	Push lines to IPython input .
13595	Initialize all registered observers .
13596	Post a notification .
13597	Return set of all observers for a given type
13598	Add a callback function to the registry .
13599	Create a new job
13600	Update the status of all jobs .
13601	Print a group summary .
13602	Flush the group to stdout .
13603	Determine if the status of the component is new .
13604	Displays the status of the process .
13605	Initialize the background job .
13606	Insert a new value at the given index .
13607	Make a shallow copy of this object .
13608	Declare a special variable
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the cwd .
13612	Moves the currently locked range .
13613	Calculate the energy of a route .
13614	Return a dictionary with default values .
13615	Check the table information .
13616	Convert a line to a dictionary .
13617	Render an expression .
13618	Print a message to stderr .
13619	Parse a yaml config file .
13620	convert a list of rows to a table
13621	Build an HTML link .
13622	Render javascript file .
13623	Render CSS file .
13624	Render an image .
13625	Subtract value from value .
13626	Multiply value by arg .
13627	Divide value into a string .
13628	Modify value .
13629	Get verbose name .
13630	Split a line of input .
13631	Add options specific to the parser .
13632	Add a builtin .
13633	Removes a builtin object from the registry .
13634	Removes the builtin .
13635	Find the base name of a req . url .
13636	Return a list of urls for explicit links .
13637	Convert a string to a list of strings .
13638	Run coverage script .
13639	Add an action
13640	Append the action code to the parser .
13641	Parse command line arguments .
13642	Print help for coverage .
13643	Help function .
13644	Validate arguments .
13645	Execute the coverage .
13646	Print information about the coverage
13647	Unserialize a BSON object .
13648	Set the display hook .
13649	Log any exceptions raised by the wrapped function .
13650	Is the given url?
13651	Validate the given url .
13652	Validate url container .
13653	pull a set of keys
13654	Select n random ports .
13655	Decorator for remote functions .
13656	Decorator for parallel functions .
13657	Map a sequence of sequences .
13658	Get the last n lines of the readline .
13659	Set auto indentation .
13660	Initialize the logstart command .
13661	Save sys module state .
13662	Restore sys module state .
13663	Register a post - execute function .
13664	Create a new main module .
13665	Cache the namespace for the main module .
13666	Initialize user namespace .
13667	Returns a list of all namespace references
13668	Reset the state of the session .
13669	Delete a variable
13670	Remove all variables that match regular expression .
13671	Push variables to user namespace .
13672	Return a dictionary of information about an object .
13673	Check if a property is of a property .
13674	Find a struct by name
13675	Inspect an object .
13676	Initialize the history manager .
13677	Show traceback .
13678	Show traceback .
13679	Print a traceback to stdout .
13680	Show exception traceback .
13681	Insert text into the readline .
13682	Completes text .
13683	Sets a custom completer .
13684	Set the current completer frame .
13685	Run a line magic function .
13686	Find magic by name .
13687	Define a macro .
13688	Run a shell command .
13689	Rewrite the input .
13690	Get user variables .
13691	Turn user expressions into a dictionary .
13692	Evaluate expr .
13693	Safe execution of a file .
13694	Run a cached cell magic .
13695	Run a cell .
13696	Run a list of ast nodes .
13697	Enable pylab .
13698	Expand the given command with the given depth .
13699	Create a temporary file .
13700	Extract input lines from the history manager .
13701	Find the user s code .
13702	Shut down the session .
13703	Publish a message to the client .
13704	Send a message to a target .
13705	Decorator to skip a test .
13706	Decorator to check if a test fails .
13707	Marks a function as deprecated .
13708	List all profiles in a directory
13709	Return a list of bundle profiles .
13710	Find the distribution with the given req .
13711	Run a command .
13712	Return the full path of the given filename .
13713	Return the next line .
13714	Send a string to the child process .
13715	Send a VINTR command .
13716	Recompile unicode regexes as byteses . Overridden in subclass .
13717	Expect a pattern .
13718	Read a search loop .
13719	Recompile bytes regexes as unicode regexes .
13720	Search for strings in buffer .
13721	Search the buffer .
13722	Create a listener for log messages .
13723	Copy a directory into a directory .
13724	Print msg to stderr .
13725	Return the last error
13726	Execute a command and return its output .
13727	Try to find a source for the given filename .
13728	Return a list of arcs that are executed .
13729	Return a list of arcs that are not executed .
13730	Return a list of arcs that were unpicted .
13731	Returns a list of lines that are branch lines .
13732	Returns total number of branches
13733	Returns a map of branch arcs that are missing .
13734	Return statistics about branch lines .
13735	Set the precision .
13736	Returns the percentage of coverage of the block .
13737	Returns a string representation of the PC covered .
13738	Highlight text .
13739	Highlight a string .
13740	Implements keywords .
13741	Run a function .
13742	Removes quotes from a string .
13743	Indent a string .
13744	Return a marquee for the given text .
13745	format screen to screen
13746	Recursively dedent text .
13747	Wrap paragraphs in text .
13748	Find optimal optimal sorting of rows .
13749	Helper function for _get_or_get
13750	Compute the matrix of an item matrix .
13751	return a list of fields
13752	Build the argv for the kernel app .
13753	Initialize the tunnel
13754	Pretty - print an object .
13755	Pretty print a representation .
13756	Get the MRO of an object .
13757	Default print method .
13758	Create a pprinter for a sequence .
13759	Factory for pretty printing .
13760	Prints super class .
13761	Print regular expression .
13762	Print the name of the object .
13763	Prints a function .
13764	Print exception information .
13765	Wrap a function for a given type .
13766	Registers a function for a given type .
13767	Write object to output buffer .
13768	Add a breakable line to the buffer .
13769	End a group .
13770	Flush the output buffer .
13771	Pretty print obj .
13772	Returns a string with the default colors
13773	Writes row into ods
13774	Get the content of the clipboard .
13775	Get the content of OSX .
13776	Get text from the clipboard .
13777	Return the path to the build folder .
13778	rekey keys in dikt
13779	Recursively extract dates from an object .
13780	Recursively squash dates .
13781	Convert object to ISO8601 formatted string .
13782	Convert an object to a JSON string .
13783	Check if site directory exists .
13784	Write a script to the install directory .
13785	sleep
13786	Create argument parser .
13787	convert . pyx extensions to . c
13788	main loop of the connection
13789	Build a PackageFinder instance .
13790	Called when the logger is changed .
13791	Get default logger .
13792	Validate flag changes
13793	Print help for aliases .
13794	Print help for flags .
13795	Print subcommands .
13796	Print help to stdout .
13797	Print examples .
13798	Update the configuration with the given dictionary .
13799	Initialize subcommand .
13800	Flatten flags and aliases into a nested dictionary .
13801	Parse command line .
13802	Load a config file .
13803	Generate the configuration file .
13804	Downsample an array .
13805	Format a list of tuples .
13806	Write a message to the output .
13807	Called when config changes .
13808	Get help for class
13809	Get the help text for a trait
13810	Generate a section for the class .
13811	Clear the instance of this class .
13812	Return an instance of this class .
13813	Format a failure .
13814	Hook for debugging .
13815	Flush the channel .
13816	Start channels .
13817	Read data from file .
13818	Read and raise an EINTR .
13819	Handle a subprocess .
13820	Split a string into a list of tokens .
13821	Compress a histogram .
13822	Class decorator for magics
13823	Record a magic function .
13824	Decorator for methods that can be used as a method .
13825	Decorator to register a magic marker for a function .
13826	Returns a dictionary with the documentation for each module .
13827	Register multiple magic objects .
13828	Register a function .
13829	Convert a string to a LaTeX string .
13830	Parse command line options .
13831	Set a default option
13832	Manage the page
13833	Create a task from a string .
13834	Get a TaskInfo with the given label
13835	Create a function object from the given info .
13836	Calculate the next run
13837	Submit task to run .
13838	Run the task .
13839	Run asap .
13840	Run a task .
13841	Run a callable once .
13842	Find the path to the url file
13843	Create an IPython kernel .
13844	Read test steps from test file .
13845	Create an interrupt event .
13846	Run the main loop .
13847	Filter a namespace by name_pattern
13848	List all namespaces in a namespace .
13849	Validate options in dict .
13850	Draw the figure if is active
13851	Send all active figures .
13852	Send a figure to IPython .
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate random ports .
13856	Initialize the webapp .
13857	Handle SIGINT signal .
13858	Confirm the user to exit .
13859	Shut down all kernels
13860	Get stock price options .
13861	Replace all of the strings in a dictionary with a list of strings .
13862	Render the template .
13863	Launch a kernel .
13864	Create a zip file .
13865	Fix the version number in the metadata . txt file .
13866	Check if obj is mappable
13867	Get the partition of a sequence
13868	Decorator for pexpect . spawn
13869	Run the given file .
13870	Run source .
13871	Generate coverage report .
13872	Generate XML file for the analysis .
13873	Fetches a file with the given file .
13874	Reduce a frequency list
13875	Compute n - digit frequency frequencies for n digits .
13876	Extract digits from a txt file .
13877	Calculate one - digit frequency frequency given a number of digits .
13878	Calculate two - digit frequency frequencies .
13879	Generate n - digit frequency frequencies .
13880	plot two digit frequencies
13881	plots the frequencies of one digit counts
13882	Print a debug expression .
13883	Reverse urlresolvers .
13884	Return True if prefix is private .
13885	Create a new test suite .
13886	Run a script .
13887	Debug a test script . src is the script as a string .
13888	Debug a module .
13889	returns a dictionary of hset files
13890	Compress hashroot to hashroot
13891	Returns a list of all keys matching the given glob .
13892	Allow the user to access the given record .
13893	Returns True if the record matches the given record .
13894	Format an error .
13895	Create interactive shell embed .
13896	Mainloop function .
13897	Create new CSV writer and meta_csv .
13898	Prepare translations for locale_root .
13899	Write POEntry objects to po_files .
13900	write header to file
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Import a python module .
13904	Run a python file .
13905	Make a python code from a python file .
13906	Make a code object from a . pyc file .
13907	Convert an item matrix to an HTML table .
13908	Set the current value .
13909	Cancel completion .
13910	Select an index by row and column .
13911	Select the index up .
13912	Select the button down .
13913	Move the index to the left .
13914	Move the index to the right .
13915	Updates the list .
13916	Calculate frequency of words in text .
13917	Print the frequency of each word in frequency dict .
13918	Convert the document to a string .
13919	write to file
13920	Validate pin .
13921	Send a shared pin .
13922	Delete a shared pin .
13923	Send a user PIN .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List all subscribed topics .
13927	Decorate a function to be monitored .
13928	Initialize progress .
13929	Begins execution of a task .
13930	Context manager for subtask .
13931	Update progress monitor .
13932	Create a new sub monitor .
13933	Mark the work as done .
13934	Run a single page .
13935	Make sure the build directory is correct .
13936	Load a list of pyconfig files .
13937	Load the configuration file .
13938	Read the configuration as a dictionary .
13939	Load flag from config
13940	Decode arguments from argv .
13941	Load the configuration from the command line .
13942	Load the configuration .
13943	Parse arguments .
13944	Convert the parsed data into a config object .
13945	Find a python module .
13946	Register a function to be called after stop
13947	Called when the process starts
13948	Called when the process is stopped .
13949	Signal and kill the child process .
13950	Find command line arguments
13951	Start the MPILauncher .
13952	send remote to remote
13953	fetch a remote file
13954	Returns the number of engine instances .
13955	Start n threads
13956	Start the WinHPC job .
13957	Return a default context .
13958	Parse the output of the job .
13959	write batch script
13960	Start a batch script .
13961	Create context menu .
13962	Appends a jpg to the prompt .
13963	Appends png to the prompt .
13964	Appends svg
13965	Adds image to the document .
13966	Copy image to clipboard
13967	Get image by name
13968	Insert an image .
13969	Insert an SVG .
13970	Save image to file
13971	Called when the container is changed .
13972	Initialize environment variables .
13973	Rewrite the input string .
13974	ask to exit
13975	Sets the next input .
13976	Read a config file .
13977	Get a list of values from section
13978	Get a list of values from section .
13979	Parse environment variables .
13980	Set values from keyword arguments .
13981	Load configuration from a file .
13982	Sets attribute from config option
13983	Expand ~user . path .
13984	Set the delimiter expression .
13985	Split a line .
13986	Returns a list of keywords that match the given text .
13987	Returns a list of attributes matching the given string .
13988	Determine the greedy delims .
13989	Returns a list of file matches .
13990	Returns a list of aliases that match the given text .
13991	Return a list of matches for the given text .
13992	Returns the default arguments for the given object .
13993	Completes text .
13994	Handles completion .
13995	Match a single record .
13996	Matches the given record .
13997	Extract a subdict from a dict
13998	True if line is quiet
13999	Write the output prompt .
14000	Write format data .
14001	Log the output .
14002	Raise an InvalidOperationException if the object is freezed .
14003	Convert a MySQL timestamp to a DateTime object .
14004	Called when the eventloop is received .
14005	Process a control message .
14006	Dispatches a shell to the client .
14007	Start the dispatcher .
14008	Do one iteration .
14009	Publish a pyin message .
14010	Abort a request
14011	Send a clear request
14012	Convert the kernel to a bytes string .
14013	Send the shutdown message .
14014	This function is called before the context is executed .
14015	Remove modules from the stack .
14016	Return absolute path .
14017	Check if a file is a file - like object .
14018	Check if an object is a class .
14019	Check if path is a package .
14020	Get the package name from a file .
14021	Convert label to label .
14022	Returns the last key of obj
14023	Transform a function to a given module .
14024	Transform a class to a class .
14025	Get system CPU times .
14026	Get the command line for this process .
14027	Get all open files in the process .
14028	Get all connections for the process .
14029	Check if a user has a group .
14030	Resolve a class .
14031	Returns the percentage of usage between two sets .
14032	Memoizes a function f .
14033	Mark a function as deprecated .
14034	Login to Google .
14035	Get the key from the URL .
14036	Ensure the temporary path exists .
14037	Clear temporary files
14038	Upload a file to GDoc .
14039	Synchronize local and gdocs files .
14040	Download data from gdocs .
14041	Upload a po file to GDocs .
14042	Clear the contents of the current document .
14043	Create a new Qt console
14044	Check if a URL is accessible to this machine
14045	Check if the URL contains the contents of a URL .
14046	Get response code from url .
14047	Compare content_type of url with content_type
14048	Compare response code .
14049	Validate data .
14050	Clear stdout and stderr .
14051	Find the full path to a command .
14052	Create a list of CodeUnit objects .
14053	Return the rootname of the module .
14054	Return the source file for this coverage .
14055	Determines if the file should be .
14056	Return the total seconds of a timedelta object .
14057	Wait for the result .
14058	Wait for all the messages to arrive .
14059	Build a dictionary of results .
14060	Abort this message .
14061	Returns the number of seconds since the last call .
14062	Wait for all tasks to finish .
14063	Republish the content with the given eid
14064	Wait until all outputs are ready .
14065	Wait for all pending messages .
14066	Absolute path from filename .
14067	Prepare patterns .
14068	Extract the separator from a string .
14069	Find all python files in a given directory .
14070	Remove relative path from filename .
14071	Return canonical filename .
14072	Extract zip data from filename .
14073	Returns True if fpath matches self . dirs
14074	Matches the given file .
14075	Apply aliases to path .
14076	Launch the event loop .
14077	Loop over the kernel .
14078	Run tk loop
14079	Loop over the kernel .
14080	Run Cocran loop .
14081	Enable a GUI eventloop .
14082	Calculate GOE element .
14083	Calculate the eigenvalue of the center eigenvalue matrix
14084	Calculate the differences for each ensemble .
14085	Initialize the class .
14086	Parse a YAML file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load the config file .
14090	Initialize profile directory .
14091	Create default config file .
14092	Write the file to disk .
14093	Erases the file .
14094	Return a dict of all line numbers
14095	Return the data for each arc .
14096	Write the data to a file .
14097	Read a file .
14098	Read raw data from filename .
14099	Read a single file
14100	Combine all parallel data .
14101	Add line data .
14102	Add arc data .
14103	Add all executed lines to the given file .
14104	Return a summary of the file .
14105	Return a list of lines that have sentinel .
14106	The main loop .
14107	Replace the history of a multiline history .
14108	Prompt the user for raw input .
14109	Edit the syntax error .
14110	Determine if the error should be recompiled .
14111	Exit the program .
14112	Extract the URL and revision from the URL .
14113	Create a new frontend master widget
14114	Initialize the widgets .
14115	Return information about the identity .
14116	Convert a Robj object into a numpy array
14117	Return the source code of an object .
14118	Sets the active colors
14119	Toggle the color scheme
14120	Convert traceback to text .
14121	Formats the traceback .
14122	Formats a list of extracted files .
14123	Format exception only .
14124	Prints the exception message for the given exception
14125	Start the debugger .
14126	Set the mode .
14127	Decorator for views that require a group .
14128	Import modules from from list .
14129	Adds a line to the code .
14130	Add a section .
14131	Get a function by its name .
14132	Returns the code for the given expression .
14133	Render the template .
14134	Apply dots to values .
14135	Render a template .
14136	Return a dictionary of default formatters .
14137	Set a function for a given type .
14138	Returns the deferred function for a given type .
14139	Called when floating point precision is changed .
14140	Return all user config files .
14141	Configure the test suite .
14142	Configure logging .
14143	Configure the working directory .
14144	Pretty - print a string .
14145	Display a page .
14146	Page a file
14147	Get pager command .
14148	Returns pager start string
14149	Print string to screen .
14150	Print a basic Unicode representation .
14151	Convert a Python object to a png string .
14152	Convert latex string to png
14153	Return True if o is a LaTeX object .
14154	Return a latex representation of an object .
14155	Add plugin options .
14156	Validate a list of strings .
14157	Validate dictionary keys and values .
14158	Run the loop .
14159	Handle incoming messages .
14160	Execute the given code .
14161	Complete a message .
14162	Get information about an object
14163	Get a history request .
14164	Send a shutdown request .
14165	Flush the queue to be flushed .
14166	Prompt the user to enter a string .
14167	Start the channel .
14168	Stop all channels .
14169	Check if the channels are running .
14170	Load the connection file
14171	Write the connection file .
14172	Launch the kernel .
14173	Shut down the kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	Interrupt the kernel .
14177	Signal the kernel .
14178	Check if the process is running .
14179	Return the current shell channel .
14180	Sub channel .
14181	Hb channel object .
14182	Bind kernel to IPython instance
14183	Print a message to stderr .
14184	Get the list of extension classes .
14185	Run pre_step before step .
14186	Called after a step is executed .
14187	Finalize all extensions .
14188	Walks an egg directory .
14189	Scan a module .
14190	Launch an IPController application .
14191	save connection dict to file
14192	load configuration from json file
14193	Load secondary config from JSON file .
14194	execute cell
14195	Enable autopx
14196	Disable autopx .
14197	Run a cell .
14198	Run a heartbeat message .
14199	Run a task .
14200	Removes a task from the database
14201	Patches the protocol for the protocol .
14202	Patches an object if it s missing .
14203	Accept a connection .
14204	Reject a connection .
14205	Get a proxy agent .
14206	Handle form validation .
14207	Handle delete action .
14208	Overrides user_field .
14209	Print coverage report .
14210	Check the status of the module .
14211	Run the editor command .
14212	Replace an error in the editor .
14213	Get the contents of the clipboard .
14214	Add a function to the chain .
14215	Get the metadata object for a given path
14216	Configure the plugin .
14217	Import an item from a string .
14218	Try using passwordless SSH .
14219	Try to authenticate with a passwordless password .
14220	Try to connect to a passwordless server .
14221	Connect to a tunnel .
14222	Open a tunnel .
14223	Stop scheduler tasks .
14224	Unwrap an exception .
14225	Register a new engine
14226	Unregisters an engine .
14227	Handle an execute reply
14228	Send notifications to the socket .
14229	Flush results from the socket .
14230	Flush control messages from the socket .
14231	Flush all ignored control messages .
14232	Flush the contents of the iPub socket .
14233	Notify the worker thread .
14234	Stop the spin thread .
14235	Initiate the event loop .
14236	Wait for jobs to finish
14237	Send apply request to the socket .
14238	Send an execute request .
14239	Get the result of this hub .
14240	Get queue status
14241	Purge results from the server .
14242	Get hub history .
14243	Execute a SQL query .
14244	Return a set of opcode names .
14245	Get the byte parser object .
14246	Returns the number of lines that match the given regexes .
14247	Parse the text .
14248	Returns first line of multiline
14249	Return the first line in the list
14250	Parse the source .
14251	A list of all arcs in the byte parser .
14252	Calculates the number of exit counts for each line .
14253	Return a list of byte parsers for this node .
14254	Iterate over byte numbers .
14255	Find the lines of the parser .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Validate the given chunks .
14259	Return an iterator over the arcs in the file .
14260	Return a list of all the chunks in this parser .
14261	All arcs in this parser .
14262	Add options to the parser .
14263	Initialize coverage statistics
14264	Generate coverage report
14265	Determines if the given file should be included .
14266	Parse a distribution name .
14267	Open a URL with authentication .
14268	Fetch a distribution for a given requirement .
14269	Get the parent of an object .
14270	The root topic of the engine .
14271	Render a template .
14272	Configure the plugin .
14273	Format an error .
14274	Split data into list of integers .
14275	Convert a notebook to the current version .
14276	Convert hexadecimal color to rgb
14277	Get colors for a style
14278	Get Qt font .
14279	Removes the prompt from the request info .
14280	Handle a history reply
14281	Handle pyout messages .
14282	Handle display data .
14283	Update the channel history
14284	Execute a file .
14285	Process an error message .
14286	Process an execute payload .
14287	Set the default style scheme .
14288	Opens an editor file .
14289	Makes the in_prompt tag .
14290	Makes a string containing a continuation prompt .
14291	Called when the style sheet is changed .
14292	Update syntax style .
14293	Handle an asynchronous response .
14294	Sign the request parameters .
14295	Transform data dict to dict
14296	Get virtual memory information .
14297	Get system CPU times .
14298	Get the uuid of the process
14299	Get the number of processes associated with this process .
14300	Get a list of currently running processes .
14301	Get the list of open files for this process .
14302	Get the repository commit hash of a package .
14303	Return information about a package .
14304	Return the system information .
14305	Get the number of cpu cores on Windows
14306	Get the number of CPUs available on the system .
14307	Fetch next result set .
14308	Fetch one row from the database .
14309	Fetch multiple rows .
14310	Fetch all rows .
14311	Connect to the peer
14312	Parse a JSON string .
14313	Read a notebook from a string .
14314	Read data from a file .
14315	Write a notebook to a file .
14316	Write nb to file
14317	Convert ipynb file to metadata
14318	Load values from a dictionary .
14319	Matches the given name .
14320	Determines if a class should be considered a class .
14321	Determines whether the given directory should be matched .
14322	Determine if file should be wanted .
14323	Determines whether the given function should be wanted .
14324	Determines if the given method matches the given method .
14325	Determines if a module is wanted .
14326	Return the lines of a file .
14327	List command .
14328	Print a list of lines .
14329	execute a pdef statement
14330	Returns the conversion factor between two currencies .
14331	Convert currency to currency
14332	Compute the return ratio between two dates .
14333	Get the encoding of a stream .
14334	Return the default encoding .
14335	Write the connection file
14336	Initialize the heartbeat .
14337	Log the connection info .
14338	Initialize the session .
14339	Initialize the IO subsystem .
14340	Initialize the kernel .
14341	Initialize connection .
14342	Register with the controller .
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert domain to FQDN .
14346	Adds options to the given parser .
14347	Configure the exclude options .
14348	Determines if a directory should be excluded .
14349	Determine if links to a dynamic library .
14350	Call each function in a list of functions
14351	Calls all functions in a list
14352	Append a function to the end of the list .
14353	Insert a function at index .
14354	Format the usage line .
14355	Initialize the application .
14356	Write the pid file .
14357	Remove the pid file
14358	Get the PID from a file .
14359	Construct a parser for a magic function .
14360	Returns the real name of the magic function
14361	Highlight the block .
14362	Rehighlight block .
14363	Override default format .
14364	Copy the selection to the clipboard .
14365	Execute a shell command .
14366	Called when the prompt is finished .
14367	Checks if the input buffer is pressed
14368	Creates the context menu .
14369	Called when a keyboard key is pressed .
14370	Insert a continuation prompt .
14371	Handle a complete reply
14372	Execute a callback .
14373	Handle an exec callback .
14374	Handle reply message .
14375	Handle input request .
14376	Handle kernel died events .
14377	Handle an object info reply
14378	Handle Pyout messages .
14379	Handle stream event .
14380	Handle a shutdown reply .
14381	Execute a file .
14382	Interrupt the kernel process .
14383	Reset the execution state .
14384	Restart the kernel .
14385	Handles call tip request .
14386	Completes the input buffer .
14387	Process an error message
14388	Process an execute message .
14389	Called when the document is changed .
14390	Register a plugin .
14391	Chain the arguments passed to the method .
14392	Execute all plugins .
14393	Execute a single plugin .
14394	Configure the plugins .
14395	Loads all registered plugins .
14396	Load plugins .
14397	Convert latex string to PNG .
14398	Convert a latex string to HTML .
14399	Convert math text to image .
14400	Check if this distribution is installed .
14401	Iterate over process instances .
14402	Return the percentage of CPU percent between 0 and 1 .
14403	Return a dict of attributes .
14404	The name of the process .
14405	Absolute path to the current executable .
14406	Get the children of this process .
14407	Get CPU percent .
14408	Returns the total amount of memory .
14409	Get memory maps .
14410	Determines if the process is running .
14411	Suspends the process .
14412	Resumes the process .
14413	Kill the process .
14414	Wait for the process to terminate .
14415	Wires the kernel .
14416	Hijack gtk
14417	Determines if the given identifier is shadowed .
14418	Initialize the transformer classes .
14419	Register a transformer .
14420	Unregisters a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregisters a checker .
14424	Initialize handlers .
14425	Register handler .
14426	Unregister a handler .
14427	Dispatch line_info .
14428	Find handler for given line_info .
14429	Transform a single line .
14430	Preprocess input line .
14431	Convert a list of lines to a string .
14432	Instances of IPyAutocall in user_ns get autocalled immediately
14433	Allow to be combined in multi - line statements if multi_line_specials is on
14434	Return handler for given line .
14435	Check if the initital identifier on the line is an alias .
14436	Process line_info .
14437	Process IPython .
14438	Handles the magic code .
14439	Generate IPython magic .
14440	Process the line .
14441	Process a line .
14442	Reimplemented to hide the widget .
14443	Stop the hide timer .
14444	Overrides paintEvent to paint event .
14445	Show information about the call .
14446	Show the tip .
14447	Handles the cursor position .
14448	A proxied property .
14449	Return absolute path .
14450	Validate an instance against a schema .
14451	masked dict
14452	Returns True if there is no global site - packages .
14453	Calculate frequency for each word in each file .
14454	Decorator for view decorators .
14455	Determine default aliases .
14456	Define an alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Run an alias .
14460	Transform an alias into a command .
14461	Expand aliases .
14462	Autocomplete directive .
14463	Reset sgr settings .
14464	Split a string .
14465	Get color from given color .
14466	Returns a QTextCharFormat object
14467	Generate a JWT .
14468	Decorator for mutex methods .
14469	Removes expired jwt keys from the cache
14470	Returns True if the token is already used .
14471	Validate a JWT token .
14472	Returns a new semaphore .
14473	Returns the common prefix of a list of items .
14474	Reimplemented event filter .
14475	The size of the widget .
14476	Returns True if cursor can be cut .
14477	Returns True if text can be paste .
14478	Clear the input buffer .
14479	Cuts the text .
14480	Execute the input .
14481	Get input buffer .
14482	Sets the input buffer .
14483	Sets the font .
14484	Pastes the text into the clipboard .
14485	Print to stdout .
14486	Prompt the cursor to the top .
14487	Reset the font .
14488	Implements the insert method .
14489	Appends HTML to the prompt .
14490	Appends HTML fetching of the given html page .
14491	Appends plain text to the prompt .
14492	Clears the temporary buffer .
14493	Completes the completion with the given items .
14494	Fill a temporary buffer with text .
14495	Is the control key down?
14496	Create the control object .
14497	Create the page control .
14498	Handle the page key press event .
14499	Get plain text of block
14500	Returns the end cursor
14501	Get the column number .
14502	Get the line of the input buffer .
14503	Get the prompt cursor .
14504	Get selection cursor
14505	Insert a continuation prompt into the cursor .
14506	Insert HTML into cursor .
14507	Insert HTML into the cursor .
14508	Insert text into the cursor .
14509	Keep the cursor in the buffer .
14510	Cancel completion .
14511	Places given text .
14512	Prompt the user to enter the input buffer .
14513	Read a line .
14514	Set the prompt text .
14515	Sets the cursor .
14516	Shows a prompt .
14517	Adjusts the scrollbars of the widget .
14518	Run the command line .
14519	Copy a config file to the location .
14520	Create a profile directory by name .
14521	Find a profile directory by name .
14522	Convert a cmp = function into a key = function
14523	Read a file
14524	Return a list of raw input strings .
14525	Create a temporary file .
14526	Close the stream .
14527	Write data to the stream
14528	Register a new heartbeat handler .
14529	Register a failure handler .
14530	a heart just beat
14531	Returns a list of lists of modulo mod .
14532	Extract path and filename from a given path .
14533	Iterate over all files matching the given pattern .
14534	Displays the total number of iterations .
14535	Return the time unit for the given time .
14536	Extract a Windows installation config from a dist_filename .
14537	Uncaches the given zipdir .
14538	Turn a string into a quoted string .
14539	Check for conflicts in the given dist . txt
14540	Set options for fetching .
14541	Create the home directory .
14542	Return True if name is an archive file .
14543	Decorator for mutable methods .
14544	Decorator for readonly methods .
14545	Create a new heading cell .
14546	Create a new notebook node .
14547	Create a new notebook node .
14548	Check if given path is a writable directory .
14549	Unquote a filename .
14550	Get a python filename .
14551	Find a file in the search path .
14552	Get IPython home directory .
14553	Return the xdg directory .
14554	Get IPython .
14555	Get IPython package directory .
14556	Get the path of a module .
14557	Check if target is outdated .
14558	Compute the md5 hash of a file .
14559	Check for old IPython config files .
14560	Updates the suggestions for the given object .
14561	Returns a list of suggestions for the given object .
14562	Returns a list of suggestions for the given object
14563	Return the relative path to this file .
14564	Return a list of files matching the given pattern .
14565	r Return the lines of the file .
14566	Read the md5 hash of the file .
14567	Initialize profiling .
14568	write profiler report
14569	Finalize the profiler .
14570	The main loop .
14571	Enable wx using wx .
14572	Disable the event loop .
14573	Disable the interactive event loop .
14574	Enables or disables the interactive GUI .
14575	Enable Tkinter .
14576	Enable pyglet hook .
14577	This function is used to save wave .
14578	Initialize the database .
14579	Run a SQL query .
14580	Get session information .
14581	Get the last n sessions .
14582	Extract lines from a string .
14583	Returns the path to the history file
14584	Name a session .
14585	Reset the output history .
14586	Get a range of tokens .
14587	Store output history .
14588	Write out the output cache .
14589	Stop the loop .
14590	get the number of CPUs
14591	Get system per CPU time .
14592	Return a list of all disk partitions .
14593	Return a list of PIDs
14594	Return a human - friendly string representation of a pair .
14595	Format a list of statements into a string .
14596	A short version of the stack .
14597	Decorator for expensive operations .
14598	Join a list of regexes .
14599	Make sure file is gone
14600	Recursively update values with the given values .
14601	Update the profiles
14602	Start a cluster .
14603	Stop the cluster .
14604	Search for a command in PATH .
14605	Execute the system body .
14606	Find all code units in the coverage data .
14607	Run a report on the given files .
14608	Decorator for raising exceptions .
14609	Set the trace
14610	Decorator for time limit
14611	Load all IPython extensions
14612	Run initial setup .
14613	Run the lines in the IPython app .
14614	Run all startup files .
14615	Run all the files in the IPython app .
14616	Run the given command line .
14617	Run the module .
14618	Decorator for generic functions .
14619	Return the filename of a static file .
14620	Read data from file .
14621	Escape HTML .
14622	Generate coverage report .
14623	Copy static report files .
14624	write html to file
14625	Compute the hash of a file .
14626	Write the index file .
14627	Read coverage information from a directory .
14628	Write coverage report to file .
14629	Compare two lists .
14630	Get a slice of a sequence .
14631	Chops a sequence into smaller chunks .
14632	Read configuration files .
14633	Read the MANIFEST . in file .
14634	Convert a glob pattern to a regular expression .
14635	Check if filename matches any of the patterns .
14636	Return a list of versioned files .
14637	Start a kernel .
14638	Shutdown the kernel .
14639	Kill the kernel .
14640	Get a kernel by ID
14641	Get kernel ports .
14642	Return the notebook with the given kernel ID .
14643	Start a kernel .
14644	Shutdown the kernel .
14645	Interrupt the kernel .
14646	Restart a kernel .
14647	Create an IOStream for the given kernel .
14648	Create a kernel stream for the given kernel .
14649	Create a kernel stream for the given kernel .
14650	Removes all of the instance properties
14651	Export HTML to file .
14652	Export an HTML string to a file .
14653	Ensure the image tag is UTF8 .
14654	Convert HTML tags to HTML .
14655	Exports the current figure .
14656	Get a single object from the database .
14657	Given a list of terms and a list of search_fields and a list of search_fields and a list of search fields .
14658	Extract text from a query string .
14659	Build a query for date_field
14660	Build a query for dates less than date_field .
14661	Get null or blank query from field .
14662	Ensure fields are case sensitive .
14663	Add options to the parser .
14664	Validate an attribute against the attributes .
14665	Determines if the given method should be applied to this element .
14666	Rotate the text edit .
14667	Monkey - patch pyzmq .
14668	Create an XML SchemaParser from a schema .
14669	The websocket URL .
14670	Deserialize a reply dict .
14671	Inject a cookie message .
14672	Start the heartbeat .
14673	Start the hb callback .
14674	Stop the event loop .
14675	Load the file .
14676	Validate and validate the index .
14677	Seek to the given index .
14678	Edit a block .
14679	Show the block .
14680	Print all colored blocks .
14681	Run a function over a collection .
14682	batch a collection of functions
14683	Run a function over a sequence .
14684	Run a parallel process on a collection .
14685	Wrap an object with an object .
14686	Decorator to register an object s attributes .
14687	Return the source code of the given traceback .
14688	Finds lines in lines at pos .
14689	Generate a countdown
14690	Stop all engines
14691	Pre - callable .
14692	Called by self . ignore
14693	Decorator for save_ids .
14694	Synchronously synchronize the results .
14695	Invokes the function after the wrapped function .
14696	Get all messages .
14697	Gets a message if there is one that is ready .
14698	Decorator to specify a property .
14699	Return only the properties of this object .
14700	Parse a URL .
14701	Return a list of module names .
14702	Get the list of all the modules
14703	Quick completer for commands
14704	Implements the module completion .
14705	Implements the magic module .
14706	Called when the user selects the user .
14707	Quote an attribute .
14708	Configures the plugin .
14709	Write the errors to the given stream .
14710	Add an error
14711	Add an error to the report .
14712	Add a test to the list .
14713	Generate a random number .
14714	Generate a random index from a list of loads .
14715	Register an engine .
14716	Unregister an engine .
14717	Process all tasks that have been executed .
14718	Process a submission .
14719	Evaluate the timeouts of the task .
14720	Called when a message is unreachable .
14721	Determine if a job should be run .
14722	Save an unmetered message to the graph .
14723	Submit a job to the queue .
14724	Process a result .
14725	Process a result .
14726	Handle unmetered dependencies .
14727	Update the dependencies of the given dep_id .
14728	Start logging .
14729	Prints the current state of the logger .
14730	Write to the log file .
14731	Write data to the logfile .
14732	Stop logging .
14733	Create a new notebook node .
14734	Add an object to the dispatcher .
14735	Add a regular expression .
14736	Generator for matching regexs
14737	Returns an iterator of flat matches for the given key .
14738	Check if the notebook directory exists .
14739	List all available notebooks .
14740	Create a new notebook identifier .
14741	Delete a notebook from the repository
14742	Check if a notebook exists .
14743	Return the path to a notebook .
14744	Get a notebook path by name .
14745	Get information about a notebook .
14746	Get a notebook object
14747	Save a notebook .
14748	Save a notebook .
14749	Save a notebook object
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook
14753	Yield tuples of POSIX POSIX tokens .
14754	Generate tokens from source code .
14755	Load the default config file .
14756	Return the default classes .
14757	Parses command line arguments .
14758	Initialize the IPython app .
14759	Initialize the interactive shell .
14760	Initialize banner .
14761	Return a string representation of an object .
14762	Parses a notification name .
14763	Set the default value of the object .
14764	Called when a trait has changed .
14765	Returns a dictionary of traits for the given class .
14766	Get metadata for a trait
14767	Validate value .
14768	Returns the default value
14769	Returns True if the result is in completed and False otherwise .
14770	Determines if the task is unreachable .
14771	Represent the result as a dict .
14772	Calculate the depth of a tree
14773	Print a binary tree .
14774	Disambiguate a DNS URL .
14775	Apply a function to each element of the stream .
14776	Validate that the target is a list of engines .
14777	Process monitor traffic .
14778	Process a query message .
14779	Handle a new heart .
14780	Handle a heart failure .
14781	Save a task request .
14782	Save a task result message
14783	Save a message to the database .
14784	Handle a connection request .
14785	Receive an engine from a queue
14786	Unregisters an engine
14787	finish registration
14788	Send a shutdown request .
14789	Purge the results from the database .
14790	Extract data from a single record .
14791	Get results from client .
14792	Get the history of a message .
14793	Process a query .
14794	Change the current working directory .
14795	Decode a completed command .
14796	Run a command under the root directory .
14797	Executes the Rscript
14798	Dispatch a message .
14799	Check if the message is from the current session .
14800	Report the given morfs .
14801	Annotate a file with the analysis .
14802	Get installed version .
14803	Recursively squash all unicode strings .
14804	Extract the header from a message or header .
14805	Make sure the packers are valid .
14806	Generate a message object .
14807	Sign a list of messages .
14808	Convert a message to a list of bytes .
14809	Send a message to the given stream .
14810	Send a message to the given stream .
14811	Receive messages from a socket .
14812	Extract identities from a list of messages .
14813	Unserialize a list of message .
14814	Save SVG document
14815	Copy SVG to the clipboard .
14816	Render SVG string .
14817	Return a dict with information about the object .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Get the arguments for an object .
14821	Generate the call line and docstring for a call .
14822	Find the absolute file of an object .
14823	Find the source line number of an object .
14824	Get the definition of an object .
14825	Render the header
14826	Print a message to stdout .
14827	Prints the definition of an object .
14828	Pretty - print the docstring of an object
14829	show source code
14830	Print file .
14831	Format a list of fields .
14832	Display info about an object
14833	Search for namespaces .
14834	Creates a thread and returns it .
14835	Decorator for twisted tests .
14836	Find the best string in the corpus .
14837	Render the document as a string .
14838	Convert the document to an XML document .
14839	Load all modules in a set of packages .
14840	Invert a dictionary into a dictionary .
14841	Merge two dictionaries .
14842	Recursively convert an object into a primitive .
14843	format a string to a string
14844	Get a list of figures .
14845	Print a matplotlib figure .
14846	Decorator for matplotlib
14847	Select figure format .
14848	Return the gui and backend
14849	Activate matplotlib .
14850	Configure inline backends
14851	Activate pylab .
14852	trace event stack trace
14853	Start tracing .
14854	Stops tracing .
14855	Start a new trace .
14856	Installs the tracing function .
14857	Start the collector thread .
14858	Stop the collector .
14859	Pause profiling .
14860	Resume all tracers .
14861	Get the data for the branch
14862	Collect all exceptions from a list of dictionaries .
14863	Render the traceback .
14864	Start the coverage process
14865	Returns the canonical directory of a given morf .
14866	Returns the source code for a file .
14867	Check to see if filename should be traced .
14868	Determine whether a frame should be traced .
14869	Log a warning message .
14870	Look for packages found in source_pkgs .
14871	Start the parser .
14872	Stop the process .
14873	Exclude a regex
14874	Return the regex for which to be excluded .
14875	Save the data to disk .
14876	Combine the data .
14877	Collect data from the source .
14878	analyze morf
14879	Formats the given morf .
14880	Analyze an analysis .
14881	Produce a summary of the data .
14882	Annotate the data .
14883	Generate HTML report .
14884	Generate XML report .
14885	Displays the given list of objects
14886	Convert list of objects to HTML .
14887	Convert list of objects to svg
14888	Convert list of objects to png .
14889	Convert a list of objects to a jpeg format .
14890	Convert list of objects to LaTeX .
14891	Convert list of objects to JSON
14892	Convenience function for display_js
14893	Reload data from file .
14894	Find the given command .
14895	Run a shell command .
14896	Forward read events to fd .
14897	Read lines from the socket .
14898	Find and import a launcher class .
14899	Starts the cluster .
14900	Load a launcher class .
14901	Start the engine .
14902	Start the cluster .
14903	Get app instance .
14904	Check if the event loop is running .
14905	Start the event loop .
14906	Get a QApplication instance .
14907	Check if the event loop is running in Qt4 .
14908	Start the event loop in Qt4 .
14909	Creates a blank canvas .
14910	Draw a cross with a given color .
14911	Draw a line between two positions .
14912	Draw text at position .
14913	Convert grayscale image to an Annotated Image .
14914	Generate a UUID .
14915	Generate a unique key for a GET request .
14916	Returns the domain of a given URL .
14917	Extract query parameters from url
