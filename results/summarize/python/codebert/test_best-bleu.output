0	Convert a Sina XML string to a list of URLs .
1	Download a video .
2	Download a file from Sina .
3	Convert text to text .
4	Print text to stderr .
5	Print a message .
6	Print a message to the console .
7	Detect OS .
8	Download a video by url .
9	Convert ckplayer xml to dict
10	Get a URL for a video .
11	Get the MTV URL for a given URL .
12	Validate the given text .
13	Download a video from a URL .
14	Download the stream
15	download video by id
16	Match all patterns in text .
17	Parse a query parameter .
18	Get content from url
19	Post content to url
20	Parse a hostname .
21	Get a room id by its URL .
22	Get the title for the given topic .
23	Downloads the WANmen by course .
24	Downloads a WANmen page by index .
25	Check if the task has a task .
26	Get the event buffer
27	Get a snowflake connection
28	Get AWS credentials from the connection
29	Get the field for a given field
30	Copy a file to the database
31	Copy a table to a temporary file .
32	Upload the file to Google Cloud Storage .
33	Returns the maximum partition of a table .
34	Get a mysql connection
35	Show the current state of a task .
36	Restart a gunicorn master process .
37	Get a connection to the server .
38	Translate values to target language .
39	Get an instance .
40	Creates an instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database .
44	Creates a database .
45	Update a database .
46	Delete a database .
47	Export an instance .
48	Start the SQL proxy process .
49	Stop the proxy process
50	Get the version of the proxy
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete a connection
54	Gets the proxy runner .
55	Get the database hook
56	Clean up the database hook .
57	Reserve a free TCP port .
58	Normalize an mlengine job id .
59	Get the error code for an error .
60	Remove all DagRun objects
61	Remove all TaskInstance instances
62	Set the state of the DAG .
63	Print performance statistics .
64	Check the status of all tasks .
65	Invoke the lambda function .
66	Creates evaluation operations .
67	Creates a directory .
68	Convert string to float if possible .
69	Convert a naive datetime to a naive datetime .
70	Make naive naive naive datetime .
71	Create a datetime object .
72	Get a connection to druid broker .
73	Get a connection to the server .
74	Send a request to the given endpoint .
75	Check the HTTP response .
76	Run a request and check response .
77	Creates a session .
78	Decorate a function with the given parameters .
79	Drop database .
80	Get an exception message .
81	Get records from hql .
82	Get a Pandas DataFrame from the database .
83	Run a SQL query .
84	Insert rows into table .
85	Get the connection to the Cosmos server .
86	Check if collection exists .
87	Create a collection .
88	Check if a database exists .
89	Creates a new database .
90	Delete a database .
91	Delete a collection .
92	Insert documents into a collection .
93	Delete a document .
94	Get a single document .
95	Retrieve documents from a SQL query .
96	Get a function by name .
97	Creates a new function .
98	Update a function .
99	Uploads a function to a given location .
100	Delete a function .
101	Get status of all dependencies .
102	Checks if the dependency is met .
103	Returns a list of failure reasons for the given context .
104	Parse S3 configuration file .
105	Get the credentials for the account .
106	Get a connection to the vertica server .
107	Flush the buffer .
108	Attempt to determine if the file location should be compressed .
109	List all files in a directory .
110	Construct a TaskInstance for this task .
111	Start the process .
112	Send termination message to the broker .
113	Exit the DAG processor .
114	Start the process .
115	Start the main loop .
116	Start the process in sync mode .
117	Refresh the dag directory .
118	Log file processing .
119	Clear missing import errors .
120	Log file processing stats .
121	Set the list of files to be processed .
122	Waits until all files finished .
123	Update the state of the DAG .
124	End all processes .
125	Create a SSH connection .
126	Creates a transfer job .
127	Get a transfer job
128	List transfer jobs .
129	Updates a transfer job .
130	Delete a transfer job .
131	Cancels a transfer operation .
132	Pause a transfer operation .
133	Resumes a transfer operation .
134	Waits until a transfer job is completed .
135	Find tasks for a task .
136	Get the number of open slots in the session .
137	Run command .
138	Remove an option from a section .
139	Get the section of the airflow .
140	Allocates a set of keys .
141	Begin a transaction .
142	Commit a job .
143	Lookup a list of keys .
144	Rollback a transaction .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until it finishes .
149	Export project to a bucket .
150	Import a file from a bucket .
151	Publishes a message to a target target .
152	Return the name of the hostname_callable .
153	Get a connection to the database .
154	Analyze a document .
155	Annotate a document .
156	Classify text .
157	Get the template fields for the given fullname .
158	Create a role for a template field .
159	Disposes the DB connection pool
160	Prepare the classpath
161	Check if task_id is ready
162	Detect if the configuration variable is in the configuration .
163	Convert an object to a dictionary .
164	Split a list into chunks .
165	Apply function to iterable in chunks .
166	Chain multiple tasks together .
167	Print a table of rows .
168	Render a log filename .
169	Get a connection to the API .
170	Wait for an operation to finish .
171	Coerce a string into a string .
172	Handle an operator execution .
173	Run a pig .
174	Fetch celery task state
175	Return the number of tasks per process .
176	Get the number of tasks per fetch process .
177	Set a variable by key .
178	Get a connection to the server .
179	Create a job .
180	Fetches a single job
181	Wait for a job to finish .
182	Create a new version .
183	Set the default version of a model .
184	List versions of a model .
185	Delete a version .
186	Create a model .
187	Get a model .
188	Write batch data .
189	Inject all executors into the global python module .
190	Get the default executor .
191	Get the execution of an Executor .
192	Called when an error occurs .
193	Get a connection to the database .
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	List all pools
198	Create a new pool
199	Delete a pool
200	Creates or updates a container group .
201	Get the state of an instance .
202	Gets the messages for a given instance .
203	List logs for a given resource group .
204	Delete a container group
205	Check if a container group exists .
206	Decorator to apply default parameters to a function .
207	Construct an ingest query .
208	Publish a message on the channel .
209	Find a dag run .
210	Returns a list of TaskInstance instances for this task .
211	Get task instance by task id
212	Get the previous Dagrun of this DagRun .
213	Get the previous scheduled dag run .
214	Update the state of this task .
215	Verify the integrity of the task .
216	Perform a jenkins request .
217	Convert a context object to a dictionary .
218	Called when a controller is triggered .
219	Send a metric .
220	Query a metric .
221	Get a dag by its id
222	Kill a list of dead jobs .
223	Merge a dag into the graph .
224	Collect all files in the given folder .
225	Report the dagbag stats .
226	Add days to datetime .
227	Convert a datetime object to a string .
228	Returns True if the filepath is a directory or False otherwise .
229	Returns True if the filepath is not empty .
230	Clear all tasks from a list of tasks .
231	Return the number of attempts to run .
232	Generate a command for the Airflow job .
233	Return the current state of this Task instance .
234	Record the task instance as FAILED
235	Refresh TaskInstance from DB .
236	Remove all data from XCom .
237	Return the key for this job .
238	Check if this task is done .
239	Return the next retry datetime .
240	Return True if the job is ready to be ready .
241	Return True if the pool is full
242	Get the DagRun object for this DagRun .
243	Push a key onto the queue .
244	Pull a single item from a list of tasks .
245	Initialize the run context .
246	Close the file .
247	Get a connection to the compute server .
248	Start an instance
249	Set machine type .
250	Get an instance template .
251	Insert an instance template .
252	Get an instance group manager
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists
256	Create a bucket .
257	Check if a prefix exists in the bucket .
258	List all prefixes in a bucket .
259	List all keys in a bucket .
260	Check if a key exists
261	Get an object from S3 .
262	Get the contents of a key .
263	Select a key from a bucket .
264	Check if a wildcard key exists .
265	Get a wildcard key .
266	Upload a file to S3 .
267	Load a string from a string .
268	Upload bytes to S3 .
269	Upload a file object to S3 .
270	Copy an object from one bucket to another .
271	Query the cassandra database .
272	Convert a user type .
273	Send an email .
274	Get a client connection
275	Recognize a speech .
276	Execute the SQL query .
277	Load entrypoint plugins .
278	Validate plugin object .
279	Skip a list of tasks .
280	Get a connection to Azure Storage .
281	Check if a file exists
282	Upload a file to ADL .
283	Return a list of files for the given path .
284	Execute the query .
285	Uncompresses a file .
286	Execute mssql query
287	Decorator for logging .
288	Build metrics for a function .
289	Create a cgroup from a path
290	Delete a cgroup
291	Parse a hostname .
292	Make an API call
293	Get a connection to the Salesforce server
294	Query all objects for all objects
295	Describe an object .
296	Get the list of available fields for an object .
297	Get object from Salesforce
298	Convert column to timestamps .
299	Write query results to file .
300	Get a MongoDB connection .
301	Get a collection collection
302	Replaces multiple documents .
303	Check if a mail has an email .
304	Retrieve mail attachments by name .
305	Download mail attachments .
306	Get attachments by name .
307	Get file and payload
308	Put records in the delivery stream .
309	Get the status of a task .
310	Send an email .
311	Send an email using SMTP .
312	Convert the value to UTC .
313	Check if a blob exists .
314	Checks if a container has a given prefix .
315	Create a blob from a string .
316	Read a file from a container .
317	Delete a file from a container .
318	Generator for MLST .
319	Get FTP connection
320	List all files in a directory .
321	Retrieve a file from FTP .
322	Store a file in the remote device .
323	get modification time
324	Execute the webhook .
325	Get a file service connection
326	Check if a directory exists .
327	Check if a file exists .
328	List all directories and files and files for a share .
329	Create a directory .
330	Create a file from a file .
331	Create a file from a string .
332	Create a file from a stream .
333	Get a storage connection .
334	Copy a blob from one bucket to another .
335	Download a file from a bucket .
336	Upload a file to a bucket .
337	Check if a bucket exists .
338	Check if the object has been updated after the given timestamp .
339	Delete a blob from a bucket .
340	List all blobs in a bucket .
341	Get the size of a bucket .
342	Get the CRC of a blob .
343	Get the MD5 hash of an object .
344	Create a bucket .
345	Compose a list of source objects to destination_object .
346	Check if the secondary training status is changed .
347	Return a string representation of the secondary training status message .
348	Upload a file and upload it to S3 .
349	Configure S3 resources
350	Validate an S3 URL .
351	Get log connection .
352	Create a training job .
353	Create a hyperparameter tuning job .
354	Create a new transform job
355	Create an endpoint .
356	Describe a training job .
357	Check the status of a job .
358	Check the status of a training job .
359	Execute the dataflow hook .
360	Run migrations .
361	Run all migrations .
362	Delete an instance .
363	Create an instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the CLI command for the CLI
368	Prepare the hive configuration
369	Load data from a DataFrame .
370	Load a table from a file .
371	Create a new metastore client .
372	Check to see if a named partition exists .
373	Check if a table exists
374	Get a connection to the hive .
375	Get results from hql
376	Write results to a CSV file .
377	Get records from the database
378	Get a Pandas DataFrame from the results
379	Get the client connection .
380	Get the api endpoint
381	Send Dingding message .
382	Bind parameters to an operation .
383	Escape special characters .
384	Convert a string field to a boolean .
385	Validate that the value is a valid type .
386	Get a BigQuery connection .
387	Get the BigQuery service .
388	Check if a table exists .
389	Create an empty table .
390	Updates a table .
391	Cancels the running job .
392	Run a table deletion .
393	Update a table .
394	Grant access to a dataset .
395	Get a dataset resource .
396	Get list of datasets .
397	Insert rows into a table .
398	Execute an operation .
399	Execute an operation on multiple parameters .
400	Retrieve the next page from the database .
401	Query Postgres database .
402	Make intermediate directories .
403	Create a queue
404	Send a message to a queue .
405	Run a command in a separate thread .
406	Remove the configuration file .
407	Main function .
408	Build HTML header .
409	Builds the container
410	Builds the javascript chart
411	Create a x axis
412	Create a y - axis
413	Get a SQLite connection
414	Decorator to add a log to a view .
415	Decorator to handle gzip requests .
416	Get the last DagRun from the database .
417	Create a new dag run
418	Execute the SQS hook .
419	Return a JSON response .
420	Attempt to open a file - like object .
421	Make a cache key for the request .
422	Get a connection to the VideoIntelligent service .
423	Annotate a video .
424	Get API key .
425	Get a connection to the server .
426	Execute the alert .
427	Builds the payload for the operation
428	Execute the alert hook .
429	Get the connection to the client
430	Run a query .
431	Check the status of a query execution .
432	Poll the query execution status .
433	Get a pysftp connection
434	Handle a ratelimit exception .
435	Call zendesk api .
436	Retrieve partitions from a table .
437	Get a table from a database .
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Get the snapshots of a cluster .
442	Restore a cluster from a cluster snapshot .
443	Create a cluster snapshot .
444	Execute a Slack API call .
445	Create a job flow
446	Filter results by size .
447	Filter results for ignored extensions .
448	Execute the query .
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a Python dictionary to a protobuf .
453	Wait for an operation to finish .
454	Get an operation by name .
455	Append a label to a cluster .
456	Create a cluster .
457	Get a cluster by name .
458	Get the Discord webhook endpoint .
459	Builds a message payload .
460	Run the webhook .
461	Encrypt a plaintext message .
462	Import a table .
463	Import a query from a directory .
464	Export a table to a file .
465	Get the connection to TextToSpeech .
466	Synthesize speech .
467	Close the file .
468	Get init containers
469	Get the environment variables .
470	Get worker secrets
471	Get the security context .
472	Get additional links for the given operator .
473	Update the current job .
474	Launches a process from a file .
475	Start the DagFileProcessor process .
476	Check if the process is done .
477	Exit gracefully .
478	Update import errors .
479	Process DAG run instances .
480	Update the state of a task in a dag .
481	Get the concurrency map for all tasks .
482	Change the state of a TaskInstances .
483	Enqueue tasks that are queued to the executor .
484	Execute the task instances and return the results .
485	Change the state of all tasks that have been failed .
486	Process TaskInstance events .
487	Process a file .
488	Update the counters for tasks .
489	Update the state of the executor .
490	Get a DagRun object for the given date .
491	Get task instances for the given dag run .
492	Execute the tasks for the given run dates .
493	Set the unfinished dag runs to finish .
494	Execute the job .
495	Called when the task runner is alive .
496	Get client .
497	Get instance by id .
498	Apply a function to an instance .
499	Creates an instance .
500	Update an instance .
501	Delete an instance .
502	Get the database for an instance .
503	Create a database .
504	Update a database .
505	Delete a database from an instance .
506	Check if the attachment has a mail attachment .
507	Convert additional parameters into a dictionary .
508	Get a connection to the keyspace
509	Check if a table exists in the cluster .
510	Check if a record exists .
511	Build the command line for the driver .
512	Submit a Spark application .
513	Process the Spark submit log .
514	Process the spark status log .
515	Returns an instance of TaskRunner .
516	Wait for the task to finish .
517	Query MySQL .
518	Configure a CSV file .
519	Write the schema to a local file .
520	Return a dictionary representation of the column type .
521	Map a mysql type to a string .
522	Execute the SQLAlchemy hook
523	Apply a lineage to a function .
524	Return dejson from dejson
525	Generate a list of dates .
526	scale time units by unit
527	Return the number of days ago
528	Initialize a role in the database .
529	Delete a role .
530	Return a list of roles for a user .
531	Returns a dictionary of all permissions for the user .
532	Check if the user has a role .
533	Check if a permission has a permission .
534	Delete faulty permissions .
535	Merge a permission with a permission menu .
536	Update the permissions view for the admin view .
537	Synchronize the view permissions for the given dag .
538	Create permissions for all DAGs
539	Get a Fernet object from the configuration .
540	Invoke the partition on the table .
541	Get the Lambda catalog hook .
542	Queries the SQS sensor .
543	Get a connection to the Hdfs server .
544	Get a connection to the HDFHook .
545	Check if a path exists
546	r Upload a file to HDFS
547	Get the connection to the pinot broker
548	Get the URI for the connection
549	Convert a date object to a dictionary .
550	Convert a time to a dictionary .
551	Get a redis connection
552	Get a Pandas DataFrame from the database .
553	Run a SQL query .
554	Set autocommit on a connection .
555	Insert rows into a table .
556	Serialize a cell into a string .
557	Get the health of the job .
558	List extra links .
559	Get a cloudant connection
560	Execute the Slack hook .
561	Get credentials from Google Cloud Storage .
562	Return an authorized HTTP request .
563	Decorator to handle HTTP errors .
564	Fallback to default project_id
565	List of unfinished tasks .
566	Prepare the SQL command to be used for SQL queries .
567	Convert pic to torch . ndarray .
568	Normalize a tensor image .
569	r Resize an image .
570	r Pad an image .
571	Crop an image .
572	Crops an image .
573	Flip an image .
574	Compute the perspective of an image .
575	Flip an image .
576	Crops an image .
577	Adjust the brightness of an image .
578	Adjust the contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue of an image .
581	r Adjust the gamma of an image .
582	Rotate an image .
583	Apply an affine transformation to an image .
584	Convert image to grayscale .
585	Save tensor to file .
586	Find all classes in a directory .
587	Read an image file .
588	Reads an info file
589	Read matches files .
590	Compute accuracy .
591	Setup the print function to be used for printing .
592	Download url to root
593	List all directories .
594	List all files in root directory .
595	Download a file from Google Drive
596	Get parameters for the image
597	Generate a set of parameters
598	Generate parameters for image .
599	Get a list of parameters
600	Generate parameters for parameters .
601	Download the uploaded files .
602	Download all the images
603	Download and extract a zip file .
604	Get the current theme name .
605	Handles autocompletion .
606	View the preferences .
607	Get a list of all the themes
608	Parse a search query .
609	Parse the response and return the response
610	Custom gradients .
611	Generate a Markov model .
612	Calculate the joint probability of eight weeks .
613	Benchmark Kendall s hmc .
614	Expand docstrings in a function .
615	Return the name of a distribution .
616	Build a custom variable .
617	Build a random variable .
618	Make a random variable from a distribution class .
619	Performs one - step prediction .
620	Perform a prediction on a model .
621	Mask x along axis .
622	Fail if x is finite .
623	Fail if x is greater than rank .
624	Return the size of the event .
625	Evaluate a function over one - hot domain .
626	Convert an identifier to a Tensor function .
627	Calculate the size of the model s size .
628	Get the next interceptor .
629	Decorate a function with the next interceptor .
630	A decorator that returns a sequence of tuples .
631	Random logistic data .
632	Visualize the decision prediction .
633	Build a pipeline .
634	Check that the values are valid .
635	Trace a function over a given function .
636	Call a function with the given arguments .
637	Call a function and return its gradient .
638	Convert from_structure to one .
639	Transform a log probability function into a log probability .
640	Performs a leapfrog step .
641	Perform metropolis hastings step .
642	Implementation of Hamiltonian .
643	Sign an adaptation .
644	Create a layer from a dictionary .
645	Convert x to Tensor .
646	Create scale operator .
647	Creates a random walk normal function .
648	Generate a random walk function .
649	Expand x to event rank .
650	r Returns the entropy of the components .
651	Concatenate logits .
652	Validate arguments .
653	Ensure TensorFlow is installed .
654	Logistic regression .
655	Feature type .
656	Cholesky covariance .
657	Return the standard deviation of x .
658	Variance of variance .
659	Make a positive axis .
660	Squeeze x .
661	Compute the z - factor of x .
662	Inverse of the embedding .
663	Compute the linear trend transition matrix .
664	Transition noise transition noise .
665	r Sample a Holton sequence .
666	Generate permutations .
667	Get the indices of the indices .
668	Compute base expansion size .
669	Return a list of prime numbers .
670	Return the eps of the machine s eps .
671	Hager implementation .
672	Helper function to fix step sizes .
673	Perform a bracket and search .
674	Perform line search after bracketing .
675	Performs a line search .
676	Prepare arguments for evaluation .
677	Convert a list of values into a tensor .
678	Wrapper for softmax normalization .
679	Wrapper for softmax quantiles .
680	Check if param is valid .
681	Determine the batch shape for each event .
682	Interpolate a grid .
683	Scale a grid by scale .
684	Scale w .
685	Concatenate multiple vectors .
686	Logarithmic matrix .
687	Compute the logarithmic matrix .
688	Compute the tensor of a vector .
689	Extract log probabilities .
690	Marginalized hidden probabilities .
691	Return the posterior of the posterior .
692	Posterior mode .
693	Chooses a random direction .
694	Sample next step .
695	If fn_arg_arg_arg_arg_arg_list is None then raise an exception .
696	Reshape x .
697	Run one step .
698	Build a trainable distribution .
699	Build the variance of a model .
700	Minimize a tensor in graph .
701	Compute mean and variance of a time series .
702	Compute the initial value of a masked time series .
703	Broadcast the batch shape to the given distributions .
704	Creates a joint mvn .
705	Sum of multiple distributions .
706	Compute empirical statistics .
707	Expand the trailing dimension of the trailing dimension .
708	Convert an observed time series into a boolean array .
709	Creates a mixture of posterior draws from mean and variance .
710	Return the range of the range .
711	Creates a summary statistic for the given attribute .
712	Convert a distribution signature into a function signature .
713	Resolve distribution names .
714	Get required arguments for a function .
715	Compute KL divergence between two distributions .
716	Build the distribution .
717	Resolve the distribution graph .
718	Compute the entropy of the distribution .
719	Check that the argument is in the correct format .
720	Create an image summary .
721	Visualize a reconstruction .
722	Visualize the analysis .
723	Summarize distribution parameters .
724	Summarize the mean of inputs .
725	Creates a multivariate normalization .
726	Create a zero - based state .
727	Call the LSTM cell .
728	Apply convolution .
729	Generate the decoder model .
730	Reconstruct the model .
731	Sample static prior .
732	Sample a dynamic prior .
733	Return the batch shape .
734	Returns the batch shape of the model .
735	Make a state space model .
736	Sample a state space .
737	Compute the minimum ndims of a list .
738	Convert a vector size to a square matrix .
739	Sort a list of values along an axis .
740	Sort values along an axis .
741	Convert x to ndtr .
742	Compute the residual .
743	Wrapper for ntriples .
744	Log numpy .
745	Log numpy .
746	Derivative function .
747	Logarithm of x .
748	Compute the joint log probability of text messages .
749	Benchmark text messages .
750	Determines whether the given index points are univariate .
751	Gets the marginal distribution .
752	Returns the index_points for the given index_points .
753	Make a stack of activations .
754	Perform one step .
755	Bootstrap the model .
756	Return the outer squared difference between x and y .
757	Compute the value and batch_jacobian .
758	Prevent the second derivative of x .
759	Apply a distributional transform .
760	Split a covariance matrix into a list of marginals .
761	Decompose a model from posterior values .
762	Decomposes the state space of a model .
763	Decompose forecast by component distribution .
764	Convert a dense tensor .
765	Decorator for operator .
766	Return a string representation of a tensor .
767	Sample shape .
768	Return the sample shape tensor .
769	Sample from the distribution .
770	Evaluate the expression .
771	Return a numpy array .
772	Concatenate normalization of a normal scale .
773	Create a template for real NVP template .
774	Uniform unit norm .
775	Logunnormal probability of x .
776	Log normalization .
777	Return the common dtype of a list .
778	Creates a summary statistic for the given attribute .
779	Broadcast tensor to target_tensors .
780	PDF at peak level
781	Returns the effective sample size .
782	Compute the effective sample size .
783	Reduce a single state reduction .
784	Return the size of x .
785	Convert a list of states to a broadcast argument .
786	Generate a quadrature quadrature .
787	Compute quantiles quantiles .
788	Merge two matrices .
789	Return a new _mapping with the given field .
790	Merge two values .
791	deep_deep_tuple
792	Creates a left - double - double - double - qubit exponential batch .
793	Find the indices of the best interval in x .
794	Slice the bounds of a tensor .
795	Sample with shrinkage .
796	Slice a single dimension .
797	Creates a setter that will set the value of the given model .
798	Creates a joint joint function for a model .
799	Get the inputs for a function .
800	Block convolutional layer .
801	Builds a tree graph .
802	Decorator to ensure that the value is None .
803	Return True if the state has no uturn .
804	Perform Leapfrog .
805	Compute the log joint .
806	Generate a random Bernstein distribution .
807	Default scale function .
808	Default normalization function .
809	Default multivariate normal distribution .
810	Deserialize a function into a Keras function .
811	Serialize a function to JSON .
812	Concatenate a single structure into one .
813	Convert nested structure to Tensor .
814	Convert args to a tensor .
815	Call a function with args and return it .
816	Returns a dictionary of attributes for the tensor .
817	Make a mixture prior .
818	Pack images into images .
819	Download a file from a directory .
820	Build fake input functions .
821	Validate block sizes .
822	Check if the input is not broadcast to the model .
823	Construct a multivariate normal tril .
824	Bernoulli .
825	Create a normal layer .
826	Create a poisson function .
827	Generate an euler method .
828	Calculate the drift .
829	r Compute the log acceptance correction .
830	Call the given volatility function and return the result .
831	Convert a volatility of volatility into a single state .
832	Make an AR transition matrix .
833	Calculate the shape of x .
834	Reshape input output .
835	Call fn and reshape output .
836	Btrunc .
837	Sample distributions .
838	Generate a bag of words .
839	Creates a gradients layer .
840	Convert a list of topics to a string .
841	Downloads newsgroups dataset .
842	Build fake input functions .
843	Builds the inputs for each batch of words .
844	Minimize the graph .
845	Adds the control dependent control dependent on the codebook .
846	save images to file
847	Visualize the training images .
848	Load a numpy ndist dataset .
849	Convert a dtype to a numpy dtype .
850	Convert dtype to base_dtype .
851	Return True if dtype is bool False otherwise .
852	Return True if dtype is complex .
853	Return the maximum value of a dtype .
854	Return the name of a dtype .
855	Size of a dtype .
856	r Asserts that all items are of the same type .
857	Asserts that the same type is the same float32 float32 .
858	Minimize an objective function .
859	Compute the Nelder - Mead - Mead algorithm .
860	Return a function that will accept a single realization .
861	Expand an objective function with the given objective function .
862	Returns a function that evaluates the objective function for the given objective function .
863	Shrink the solution at the given index .
864	Replace x with replacement .
865	Check convergence .
866	Prepare arguments for the given objective function .
867	Prepare arguments for the given objective function .
868	Prepare arguments for a single vertex .
869	Evaluate an objective function .
870	plot weights for weights
871	Plot a heldout prediction .
872	Build fake data
873	Get the configuration .
874	Initialize a TensorFlow model from a config dictionary .
875	Matrix multiplication .
876	Helper function to compute standard deviation .
877	Assign a log moving mean .
878	Make a columnar .
879	Generate a random rademacher .
880	Generate a random rayleigh .
881	Pick a scalar condition .
882	Finish the log probability for one fiber .
883	Finish the probability of one fiber .
884	Rotate dimensions .
885	rundo batch normalization .
886	Validate a BatchNormalization layer .
887	Slice a single parameter .
888	Convert a slice of parameters to a dictionary .
889	Apply a single step .
890	Applies a slice_sequence_fn to the distribution .
891	Convenience function for batch_slice .
892	Fit a model .
893	Calculate the convergence criteria for small relative normals .
894	Prepare arguments for the model .
895	Return the number of columns in x .
896	Precision of static_fn .
897	Copy docstring from original_fn to new_fn .
898	Convert a predicate to a boolean .
899	Return the rank of a shape .
900	Returns a smart_case condition .
901	Context manager for creating a variable scope .
902	Compute the standard deviation of a mixture .
903	Creates a tril scale .
904	Creates a diagonal .
905	Creates a list of shapes for a given loc and scale .
906	Check if scale is a diagonal .
907	Check if a scalar distribution is valid .
908	Pad mixture dimensions .
909	Pick a scalar condition .
910	Move a dimension from one dimension to another .
911	Check that x is positive integer form .
912	Compare two shapes .
913	Try to get a static value from x .
914	Check if dt is known by dt .
915	Check if dt is signed by dt
916	Return the largest integer by dt .
917	Return the smallest integer by dt .
918	Return True if dt is an integerlike object .
919	Validate the categorical event shape .
920	Compute the total number of permutations .
921	Rotate x .
922	Pick a vector .
923	Prefer a static broadcast shape between two shapes .
924	Generate a new seed
925	Construct a tridiag .
926	Return the dimension of x .
927	Convert a quadrature grid to a tensor .
928	Get the arguments for the parent frame .
929	Expand x .
930	Creates an output tensor with the specified dependencies .
931	Validate that the rightmost dimension is valid .
932	Validate perm .
933	Return the shape of the event shape .
934	Concatenate two tensors .
935	Return the dimensions of x .
936	Merge two TensorShape into a new TensorShape .
937	Creates a new TensorShape with the specified rank .
938	Assert that the target shape is equal .
939	Updates the shape of the batch shape .
940	Builds a backward - pass step .
941	Perform backward smoothing update .
942	Build a step step .
943	Perform linear update .
944	Kalman transition function .
945	Build a function for kalman - mean step .
946	Build a kalman step .
947	Build a sampling step .
948	Propagate mean along the mean .
949	Propagate covariance .
950	Backward smoothing .
951	Sample from the model .
952	Return the posterior posterior of the posterior .
953	Compute the joint mean of the model .
954	The joint covariance of the covariance matrix .
955	Convert latent moments to observations .
956	Log normalization .
957	The mode of the sensor .
958	Rotate samples .
959	Sample from 3D .
960	Make a copy of a function .
961	Remove all keys that have a value .
962	Recursively replace all values in a pretty dictionary .
963	Get samples from distribution .
964	Check if x is a namedtuple - like object .
965	Chooses a base case .
966	Chooses a class based on the accepted parameters .
967	Safe sum operator .
968	Creates a value and returns the result .
969	Call fn with optional gradients .
970	Creates a smart_for_loop .
971	Perform a trace on a loop .
972	Convert a setter to a setter .
973	Convert a getter to a getter function .
974	Creates a new kernel with the given parameters .
975	Replace the event shape with the given shape .
976	Replace event shape with event shape .
977	Check if shape is valid .
978	Return True if any of the converged and failed .
979	Get initial state arguments for initial state .
980	Performs line search .
981	Restrict a function over a given direction .
982	Update the state of the current state .
983	Check convergence .
984	Broadcast value to target .
985	Anharmonic number .
986	Creates a default exchange function .
987	Get a field from kernel results .
988	Get the set of exchange states .
989	Variance scaling term .
990	Returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function .
991	Return a function that transforms a bijector into a function .
992	Return the inverse transform function for the inverse transformation .
993	Performs one step of one step .
994	Apply a condition to a tensor .
995	Secondant version of secant2 .
996	Internal function for secant2 .
997	Perform a secant2 update .
998	Update the value_and_gradients function .
999	Applies a function to the search interval .
1000	Bias function .
1001	Low level function .
1002	Check if two values are finite .
1003	Checks if the given value is a wolfe .
1004	Return the secant between two values
1005	Creates a new step size update policy policy .
1006	Perform a lapfrog integration .
1007	Compute log acceptance correction .
1008	Performs one step .
1009	Bootstrapper for bootstrap results .
1010	Bayesian resnet model .
1011	Resnet block .
1012	Create an encoder .
1013	Create a decoder for topics .
1014	Create a topic prior for the topic .
1015	Sample chain chain .
1016	Exponential family family .
1017	Creates a trainable positive gradient .
1018	Trainable gamma .
1019	Load nips 2011 papers .
1020	Initialize params .
1021	Returns the kl_func for the registered types .
1022	Read an image file .
1023	Download all sprites .
1024	Create a character .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a dataset .
1028	Validate distributions .
1029	Flatten a list of kernels .
1030	Flatten a list of kernels into a single product list .
1031	Build fake data .
1032	Count the number of integers .
1033	Find bins of x and edges .
1034	Create a histogram .
1035	Compute quantiles .
1036	Get the ndims of x .
1037	Inserts the keep_dims in x .
1038	Make a list of ndims .
1039	Move dimensions to flat end .
1040	Sort a tensor .
1041	Creates a list of model states for each component .
1042	Mean alpha function .
1043	Reverse the inverse of the kernel .
1044	Jensen - Shannon model .
1045	Pearson function .
1046	Squaredhellinger .
1047	Return the diagonal of the tensor .
1048	Return the power of the tensor .
1049	Logarithm .
1050	Compute the Jacobian of the Jacobian .
1051	Modified logarithm .
1052	Dual CSISzar function .
1053	Symmetrized CSISzar function .
1054	Calculate the montezar divergence .
1055	Wrapper for Scikit s implementation .
1056	Ensure that the ndims are consistent .
1057	Wrapper for batch_gather .
1058	Broadcast an event to the given base_dtype .
1059	r Compute the expectation importance .
1060	Broadcast an event and samples .
1061	Minimize function .
1062	Return the inputs for the inverse Hessian .
1063	Update the inverse Hessian for the inverse of the inverse_hessian .
1064	Update the inverse of the inv_hessian .
1065	Matrix multiplication .
1066	Compute the tensor product of two tensors .
1067	Transpose matrices .
1068	Pad the shape of the shape of x .
1069	Sum the right ndims .
1070	Square root of x .
1071	Return the common dtype of a list .
1072	Minimize a function .
1073	Get the initial state of the optimizer .
1074	Get search direction .
1075	Make an empty queue for an element .
1076	Push onto the queue .
1077	Mask x .
1078	Detect if x is large .
1079	Generate a correlation matrix .
1080	Compute the residuals of the correlation matrix .
1081	Compute the Clopper - Pearson - Pearson confidence intervals .
1082	Compute the true volume of the true volume .
1083	Generate a series of Von Mises cdf .
1084	Calculate the cumulative density of a normal distribution .
1085	Perform one step of one step .
1086	Minimize an objective function .
1087	Get the initial arguments for the given objective function .
1088	Find the best value in a population .
1089	Check convergence for convergence .
1090	Get the starting population .
1091	Perform binary crossover on a population .
1092	Get a list of mutant permutations .
1093	Generate a set of random indices .
1094	Ensure a tensor is a list .
1095	Convert to tl .
1096	Soft threshold .
1097	Clip_by_value_min and preserve gradient .
1098	Build a pipeline from images .
1099	Plot generated images .
1100	Convert a list of productions into a string .
1101	Call the model .
1102	Call the encoder .
1103	Integrate x .
1104	Return the inverse of the tensor .
1105	Compute the rank of a matrix .
1106	Pin a tensor .
1107	Solve a LU .
1108	Inverse of LU decomposition .
1109	Constructs a list of assertions .
1110	Constructs the assertion assertions .
1111	Wrapper for sparse block diagonal .
1112	Validate a matrix .
1113	Gradient of negative log likelihood .
1114	r Fit a sparse model .
1115	Generate a list of slices .
1116	Generate a mask .
1117	Create a masked dense layer .
1118	Create an input order .
1119	Create a list of degrees .
1120	Create a list of masks for the given degrees .
1121	Creates a masked initializer for mask .
1122	Build the model .
1123	Call the autoregressive layer .
1124	Draw samples from multinomial .
1125	Create a zero - dimensional multivariate normalization .
1126	Create a function for observing time series .
1127	Convert parameters to weights .
1128	Calculate the depth of a graph .
1129	Return the best order of a tree .
1130	Convert a chain rule to a function .
1131	Builds the model .
1132	Generate a variational loss .
1133	Hyperparameters .
1134	Builds a function that builds the last day of a season .
1135	Build a matrix of effects to residuals .
1136	Build a transition matrix .
1137	Build seasonal transition noise .
1138	Builds the seasonal transition noise .
1139	Return True if the observation points are empty .
1140	Validate the observation data .
1141	Add a new job to the given schedule .
1142	Set the checkpoint on the dataset .
1143	Set gradient clip clip .
1144	Optimize the model .
1145	Sets training summary .
1146	Sets the summary of the value .
1147	Create an optimizer .
1148	Sets training data for this dataset .
1149	Sets the summary trigger trigger .
1150	Reads data sets and labels for training .
1151	Download the news20 files
1152	Download Glove .
1153	Compile the optimizer .
1154	Fit the model .
1155	Evaluate the model .
1156	Predict the given data .
1157	Read MNIST dataset .
1158	Preprocess the MNIST dataset .
1159	Return the end trigger .
1160	Validate an optimizer .
1161	Return the value of the file .
1162	Call big ddl function .
1163	Call a Java function and return its result .
1164	Convert an RDD to a Java RDD .
1165	Convert a Python object to Java types .
1166	Get activation by name .
1167	Create a new NDArray from an ndarray .
1168	Returns the label of the image .
1169	Read and return a DistributedImage .
1170	Write a parquet to a file .
1171	Get an image by key .
1172	Convert this image to an image .
1173	Returns the label of the image .
1174	Get the prediction for this image .
1175	Predict the model .
1176	Fit the model .
1177	Apply transform to dataset .
1178	Save Keras model to file .
1179	Build Keras model .
1180	Predict class based on model .
1181	Sets the weights of the tensor .
1182	Returns the weights of the layer .
1183	Save the tensorflow to a file .
1184	Wrapper for training .
1185	Load a torch model .
1186	Load Keras .
1187	Create a Criterion based on jcriterion .
1188	Load weights from json file .
1189	Load IMDB .
1190	Build Keras model .
1191	Returns the shape of the input shape .
1192	Returns the output shape of this dataset .
1193	Get MNIST dataset
1194	Read the data sets from the local directory .
1195	Return the path to bigDL classpath .
1196	Checks if the current Spark version is below 2 .
1197	Export a checkpoint .
1198	Save variable tensor to file .
1199	Expand a tile into a tile .
1200	Precompute the symbols for future futures .
1201	Simple simple attention layer .
1202	Layer attention .
1203	Compute the BLEU similarity between two sequences .
1204	Get log file .
1205	Log a single utterance .
1206	Summarize gradients .
1207	Dump weights to file .
1208	Read data by config .
1209	Train a model from a config file .
1210	Interactively interact with an agent .
1211	Convert labels to one - hot labels .
1212	Convert probabilities to one - hot labels .
1213	Create a TensorFlow session .
1214	Load the model .
1215	Get the current momentum variable .
1216	Update graph variables .
1217	Calculate the F1 score .
1218	Process a word .
1219	Construct a stacked convolution .
1220	Create a Bi - RNN .
1221	Create a stacked RNN layer .
1222	Creates a stacked high - level convolution .
1223	Create an embedding layer .
1224	Creates a cudnn GRU GRU .
1225	Create a cudnn GRU .
1226	Create a cudnn LSTM .
1227	Create a cudnn - compatible LSTM .
1228	Upper for convolution .
1229	Builds a CUD model .
1230	Builds a tensor .
1231	Dropout .
1232	Build the network .
1233	Build a word convolution .
1234	Build basic network .
1235	Train the model on a batch .
1236	Predict on the model .
1237	Make a sentence from a list of sentences .
1238	Convert a list of tags into a numpy array .
1239	Calculate the BLEU score .
1240	Verify a URL .
1241	Extract certificates from a string .
1242	Verify a list of certificates .
1243	Verify a signature .
1244	Verify a certificate URL .
1245	Return the JSON representation of all controls .
1246	Returns a list of all control controls for this bot .
1247	List of telegram controls .
1248	Return a list of all control controls .
1249	Run DeepPavlov settings .
1250	Convert a function to a graph .
1251	Wrap a function with Keras backend .
1252	Compute the accuracy between two examples .
1253	Round accuracy .
1254	Pre - trained initializer .
1255	Read a data file .
1256	Make a hello agent .
1257	Convert x to one - hot - hot conversion .
1258	Pretty - print metrics .
1259	Populate the settings directory .
1260	Load the model .
1261	Save model to file .
1262	Get the train op .
1263	Search for a word in the triples .
1264	Make the cost cost for the operation .
1265	Start the timer .
1266	Handle a request .
1267	Return a list of agents .
1268	Generate a response from the response .
1269	Handle an intent .
1270	Handle a launch request .
1271	Handle an unsupported message .
1272	Print a pretty representation of the struct .
1273	Convert elmo loss to pll .
1274	Build a Chainer model .
1275	Run a model .
1276	Run a model on a stream .
1277	Read in a text file .
1278	Import a function from a string .
1279	Register a metric .
1280	Get a function by name .
1281	Create a decay type from a label .
1282	Gets the best score for the given values .
1283	Encode a list of tokens .
1284	Read the requirements file .
1285	Calculate the log loss .
1286	Export a weight file .
1287	Print detailed details .
1288	Create an ecommerce agent
1289	Run the bot .
1290	Download a file from a URL .
1291	Unarches a tar file .
1292	Decompress a URL .
1293	Update a dictionary recursively .
1294	Set the MD5 hash of a URL .
1295	Set a query parameter .
1296	Return a dictionary representation of the token .
1297	The JSON representation of the control .
1298	Return a dict containing the card action for this card .
1299	Return the JSON representation of the control .
1300	Convert the card into a message .
1301	Calculate the F1 F1 score .
1302	Calculate recall at k_true .
1303	r Check if GPU is available .
1304	Recursively parse a config property .
1305	Parse the config file .
1306	Expand a path .
1307	Create a component from a dictionary .
1308	Main loop .
1309	Delete a conversation .
1310	Refresh expired certificates .
1311	Verify a signature .
1312	Handle a request .
1313	Create a class from a string .
1314	Register a model class .
1315	Get model by name .
1316	Get the path for a GLM regressor .
1317	Make a GLM model
1318	Create an H2Cluster object from a list of keys .
1319	Shutdown the H2O instance .
1320	Check if the server is running .
1321	Show the status of the cloud
1322	List all jobs
1323	List all available time zones
1324	Fill properties from h2cluster .
1325	The metalearner parameters .
1326	Starts a test_func .
1327	Get summary of a frame .
1328	Delete a frame
1329	List all model builders .
1330	Validate model parameters .
1331	Compute the metrics for a model
1332	Get model metrics .
1333	Delete a model
1334	Tabulate the data
1335	Run an EC2 instance .
1336	Terminate instances .
1337	Stop instances .
1338	Start instances .
1339	Reboot instances .
1340	Waits for an ssh on the host .
1341	Get the full name of a method .
1342	Find a function from a frame .
1343	Get a string representation of the arguments .
1344	Wrap text with indentation .
1345	Wait for the job to finish .
1346	Train model .
1347	Fit the model .
1348	Returns a dictionary of parameters .
1349	Handle signals .
1350	Wipe the output directory .
1351	Remove rsandbox directory
1352	Try to scrape the port from the stdout .
1353	Scrape cloud size from stdout
1354	Stop the child process .
1355	Stop all nodes .
1356	Get the IP of the node .
1357	Get the port of the node .
1358	Compute the ROC .
1359	Determine the size of the vector
1360	Calculate the mean absolute error .
1361	Compute the mean squared error between two targets .
1362	Calculate the median absolute error .
1363	Calculate the explained variance score .
1364	Raise an exception if var is not a type .
1365	Fail if the given regex matches the given regex .
1366	Fail if a condition is not satisfied .
1367	Retrieve the assert_arguments from the stack .
1368	Check if vtype is a valid type
1369	Get the name of a type .
1370	Generate lambda source code .
1371	Check whether a variable is a valid type .
1372	Checks whether the given variable is valid .
1373	Get configuration .
1374	Read all log files .
1375	Generate a list of file paths .
1376	Execute a progress function .
1377	Store model progress .
1378	Recalculate model parameters .
1379	Estimate completion time for completion time .
1380	Guess the next poll interval .
1381	Compute progress at time t .
1382	Get the time at x_target at x_target
1383	Print text to terminal .
1384	Compute the width of all widgets .
1385	Get terminal size .
1386	Set encoding .
1387	Fit a frame to the target .
1388	Get a single frame from an H2OFrame .
1389	Refresh the cache .
1390	Return the type of a column .
1391	Return the columns by column type .
1392	Display a summary .
1393	Display information about the frame .
1394	Return a new DataFrame with the specified rows .
1395	Multiply a matrix .
1396	List of levels
1397	Number of levels
1398	Set the level .
1399	Set the levels of the domain .
1400	Rename columns .
1401	Set the column names
1402	Set column name .
1403	Return True if item is in the list .
1404	Modulo kfold columns .
1405	Stratified kfolders .
1406	Print the structure .
1407	Return a pandas dataframe
1408	Remove a column from the table .
1409	Compute the quantile of the columns .
1410	Concatenate multiple frames .
1411	Bind the given dataframe to the given dataframe .
1412	Rbind dataframe to self .
1413	Split a single frame .
1414	Creates a groupby by a string .
1415	Fill missing values .
1416	Impute the value of a column .
1417	Merge two columns .
1418	Return a new expression
1419	Insert missing values .
1420	Compute the variance of the variable .
1421	Compute the correlation between two columns .
1422	Compute the distance between two points .
1423	Convert to a factor .
1424	Split a string by pattern .
1425	Count the number of matches matching pattern .
1426	Substitute a substring .
1427	Return a new H2Frame .
1428	The entropy of this DataFrame .
1429	Return the number of valid substrings for a given path .
1430	Create a table expression .
1431	Create a histogram
1432	Compute the maximum number of words .
1433	Return a new H2Frame with replacement .
1434	Return a tuple of tuples .
1435	Perform a grep on the table .
1436	Create a new NaN .
1437	Return the difference between two frames .
1438	Return an array of NaNs .
1439	Return the minute of the current frame .
1440	Create a new h2frame .
1441	Generate a new H2oFrame .
1442	Cut a row from the DataFrame .
1443	Return the index of the maximum value of the Series .
1444	Apply a function to the Series .
1445	Parse a text string .
1446	Parse a file .
1447	Move a row by drow .
1448	Unparse the token .
1449	Get the size of the model
1450	List of centers .
1451	Calculate the standard deviation of the model .
1452	Create an H2O connection .
1453	Make an API request
1454	Check the version of h2o .
1455	Import a module from a path .
1456	Upload a file .
1457	Import a file from a file .
1458	Import a Hive table
1459	Import SQL table
1460	Import SQL table
1461	Parse a raw setup .
1462	Make deep copy of data .
1463	Fetches a model .
1464	Get a single grid
1465	Get a single frame
1466	Download a model from a model .
1467	Download a CSV file
1468	Download all H2O log files .
1469	Export a frame to the specified path .
1470	Convert data to a list
1471	Run a demo function .
1472	Load a dataset .
1473	Create model metrics .
1474	Upload a file to S3 .
1475	Upload a custom metric
1476	Validate frame id .
1477	Convert bytes to human readable bytes .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Generate a pandas dataframe from a dataframe .
1481	Predict csv files
1482	Mark a function as deprecated .
1483	Block until the job has finished .
1484	Run deepfeatures on test data .
1485	Display model summary .
1486	Display the hyperparameters .
1487	Get hyperparameters for a model
1488	Get the hyperparameters for a model
1489	Fetches a single grid
1490	F1 model f1 .
1491	Return the importances of the model .
1492	Project the prediction of a model
1493	Plot the model .
1494	Translate a name into a CamelCase name .
1495	Redent a string .
1496	extracts run into a dictionary
1497	Main entry point .
1498	Close H2O session .
1499	Get session id .
1500	Start logging .
1501	Prepare data payload
1502	Prepare file payload
1503	Log a start transaction .
1504	Log the end of a transaction .
1505	Log a message .
1506	Process the response .
1507	Print a message to stdout .
1508	Get the autoML for a project .
1509	Download the project from the leader .
1510	Download a MOjo from the leader .
1511	Fit the model .
1512	Apply scaling to X .
1513	Inverse transform
1514	Extract a true string from a string .
1515	Searches for node_name and returns True if found
1516	Find git hash branch .
1517	Searches for build timeout .
1518	Find build failure .
1519	Find the build id for the given line
1520	Extract the job build url from a URL .
1521	Grab the message from a file .
1522	Save a dictionary to a dictionary .
1523	Update the summary file .
1524	Write the content of a file .
1525	Write a Java message .
1526	Load the JSON messages to ignore .
1527	Normalize an enum constant .
1528	Find synonyms for a word .
1529	Poll the job .
1530	Convert this Assembly to a POJO .
1531	Fit a frame to a single frame
1532	Perform a percentile on a sorted list .
1533	Return a dictionary with default values .
1534	Return the actual parameters for the model
1535	Run deep features on the test data .
1536	Returns the scoring history for the model
1537	Show the model details .
1538	Impress the model importances
1539	Return the residual degrees of freedom in freedom .
1540	A dictionary of coefficients .
1541	Download data from h2o .
1542	Download the MOJ file for this model .
1543	Save model details .
1544	Raise an error if there is a mismatch .
1545	List of cross validation models .
1546	Run Gbm .
1547	Run deep learning .
1548	Run the Glm model .
1549	Wait for a keypress .
1550	Return a pandas dataframe .
1551	Display the table .
1552	Start a new JVM .
1553	Searches for an h2o . jar file .
1554	Yields the path to the jar files
1555	Get the HIT ratio table .
1556	Creates a csv file .
1557	Convert a URI to a path .
1558	Convert a directory path to a relative path .
1559	Parse a line of functions .
1560	Generate documentation for a given URI .
1561	Find modules in the root directory .
1562	Write API documentation to outdir .
1563	Write the index to a file .
1564	Convert the table to a list of integers .
1565	Loads the JSON dictionary
1566	Add a new message .
1567	Update the message dictionary with the given action dictionary .
1568	Extracts a message from a file .
1569	Saves the JSON dictionary to file .
1570	Print a dictionary of keys to stdout .
1571	Parse command line arguments .
1572	Print usage information .
1573	Find all files in the root directory .
1574	Find spell in a file .
1575	Process all files .
1576	Apply transform to the pipeline .
1577	Summarize all tests .
1578	Extracts the report in the format of the report .
1579	Plot the curve .
1580	Compute the confusion matrix .
1581	Check if a deep water model builder is available .
1582	Truncate data back to a given month .
1583	Return a dictionary of endpoint groups
1584	Update site forward .
1585	Convert data to JSON .
1586	Comment a user
1587	Get user credentials .
1588	Like a user .
1589	Like media with media .
1590	Check if user is not bot
1591	Read a file .
1592	Schedule a new scheduled job .
1593	Define a pending message .
1594	Download a resource from a resource group .
1595	Guess service info from spec_path .
1596	Update a powerShell command .
1597	Delete an application by id .
1598	Creates an application definition .
1599	Get the URI for the given request .
1600	Get a connection to a request .
1601	Perform a request .
1602	Execute script actions .
1603	Checks the name of a front door name .
1604	Purge deleted items .
1605	Get the authorization server .
1606	Validate request_uri .
1607	Get CLI profile .
1608	Get Azure CLI credentials .
1609	Resolve a query .
1610	Checks the availability of a named name .
1611	Opens an HTTP request .
1612	Sets the timeout of the request .
1613	Sets a request header .
1614	Get all response headers .
1615	Send a request .
1616	Get the status of the request .
1617	The status of the request .
1618	Get the response body .
1619	Sets the client certificate .
1620	Send a request to the server .
1621	Put a request header .
1622	Send request body .
1623	Get a response .
1624	Get the human readable id for the given id_name .
1625	Get the serialization name for an element .
1626	Verify a face to a person .
1627	Add a job to a job .
1628	Get the properties of an entry .
1629	Get the children of a node .
1630	Find the namespaces of the given child .
1631	Convert an XML string into a ServiceBus namespace .
1632	Convert an XML string into a ServiceBusRegion .
1633	Convert an xml string to a namespace availability response .
1634	Convert an XML string into an object .
1635	Replaces the content of a runbook .
1636	List recommendations for a domain .
1637	Update an existing kb .
1638	Gets a list of member groups for a user .
1639	Build a package from a PR number .
1640	Import data from a resource group .
1641	Publishes an initial job .
1642	Renew the lock .
1643	Replaces a word alter .
1644	Adds a new value to the specified secret resource .
1645	Gets the properties of a storage account .
1646	Gets the keys for a storage account .
1647	Registers the keys for a storage account .
1648	Creates a storage account .
1649	Updates a storage account .
1650	Deletes a storage account .
1651	Fetches availability of a storage account .
1652	Gets the properties of a hosting service .
1653	Creates a hosted service .
1654	Delete a hosted service .
1655	Creates a deployment .
1656	Deletes a deployment .
1657	Swaps a deployed deployment .
1658	Change the configuration of a deployment .
1659	Updates the deployment status .
1660	Upgrade a deployment .
1661	Walk a upgrade domain .
1662	Reboot a role instance .
1663	Deletes a role instances .
1664	Fetches availability of a hosted service .
1665	Fetches a list of certificates for a service .
1666	Fetches a certificate for a service .
1667	Add a certificate to a service .
1668	Deletes a certificate from a service .
1669	Fetches a subscription certificate .
1670	Adds a new certificate .
1671	Delete a management certificate .
1672	Gets the properties of an affinity group .
1673	Creates an affinity group .
1674	Deletes an affinity group .
1675	List subscription operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address .
1679	Disassociate a reserved IP address .
1680	Gets a reserved IP address .
1681	Gets a single role .
1682	Creates a virtual machine deployment deployment .
1683	Adds a role to a deployment .
1684	Updates a role .
1685	Deletes a role .
1686	Captures a role .
1687	Starts a role .
1688	Start a deployment group .
1689	Restart a role .
1690	Shutdown a role .
1691	Shutdown a deployment .
1692	Adds a DNS server to a deployment .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	Fetches a list of all the versions of a resource .
1696	Replicate a VM image .
1697	Unplicate a VM image .
1698	Share a VM image .
1699	Creates a VM image .
1700	Delete a VM image .
1701	List VM images .
1702	Updates a VM image .
1703	Add an OS image .
1704	Updates an OS image .
1705	Updates an OS image .
1706	Delete an image .
1707	Gets a data disk volume .
1708	Adds a new data disk volume .
1709	Updates a data disk volume .
1710	Delete a data disk .
1711	Add a disk .
1712	Updates a disk .
1713	Delete a disk .
1714	Retrieve a summary for a management group .
1715	Build the receiver .
1716	Fetch next messages from the broker .
1717	Renews the lock .
1718	Create or update a virtual machine scale set .
1719	Converts a VM scale set into a single placement group .
1720	Create a screen text .
1721	Creates a new Vault key .
1722	Import a Vault key .
1723	Updates a Vault key .
1724	Sets a secret .
1725	Set certificate issuer .
1726	Create a connection from a connection string .
1727	Get a subscription for a topic .
1728	List all subscriptions for a topic .
1729	Send messages to the broker .
1730	Return an Sender s sender .
1731	Create a receiver for this entity .
1732	Get a deadletter receiver .
1733	Parse the response from an asynchronous response .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Waits for an operation to finish .
1737	Gets the status of an operation .
1738	Update the management header .
1739	Check if travis_tag is valid
1740	Gets a list of certificates for a vault .
1741	Gets a list of regions .
1742	List all namespaces .
1743	Gets a namespace by name .
1744	Creates a namespace .
1745	Deletes a namespace .
1746	Fetches the availability of a namespace .
1747	List all topics .
1748	List a notification hub .
1749	List all relay relays .
1750	Gets the metrics rollups for a given metric .
1751	Gets the metrics rollups for a given metric .
1752	Gets the metrics rollups for a given metric .
1753	Gets the metrics rollups for a given metric .
1754	Create a context manager .
1755	Creates a virtualenv with the given packages .
1756	Creates a SQL Server .
1757	Sets the admin password for a server .
1758	Lists the quotas for a server .
1759	Gets the event log for a given server .
1760	Creates a firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	Lists all firewall rules for a server .
1764	Lists the service level objectives .
1765	Creates a database .
1766	Updates a database .
1767	Delete a database .
1768	List all databases .
1769	List all agreements for a domain .
1770	Close the message handler .
1771	Close the receiver .
1772	Get session state .
1773	Sets the session state .
1774	Receive deferred messages .
1775	Merge a reservation order .
1776	Validate a challenge .
1777	Purge items from a table .
1778	Handle errors .
1779	Create a queue .
1780	Delete a queue .
1781	Fetches a single queue .
1782	Create a topic .
1783	Fetches a single topic .
1784	Creates a new rule .
1785	Gets a single rule .
1786	List all rules for a topic .
1787	Creates a subscription .
1788	Gets a subscription for a topic .
1789	List all subscriptions for a topic .
1790	Send a message to a topic .
1791	Unlocks a subscription message .
1792	Send messages to a queue .
1793	Unlocks a queue message .
1794	Receive a message from a queue .
1795	Receive a subscription message from a topic .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Fetches an event hub .
1799	Send an event to a hub .
1800	Update the HTTP header for the service bus .
1801	Get the authorization token .
1802	Check if token is expired .
1803	Get a token from http client .
1804	Updates the query URI for the request URI .
1805	Reset a service principal profile .
1806	Delete this item from the queue .
1807	Unlock the message .
1808	Renews the lock .
1809	Add headers to the request .
1810	Convert this batch into a batch body .
1811	Gets the health of a cluster .
1812	Gets the cluster health using the specified policy .
1813	Unprovision an application type .
1814	Get a list of repair tasks .
1815	Submit a property batch .
1816	Generic HTTP error handler .
1817	Start a web site trace operation .
1818	List the differences between a slot and a slot .
1819	Swap a single slot .
1820	Fetches events by type .
1821	Add a face from a stream .
1822	Handle redirecting .
1823	Create and start a migration .
1824	Publish events to a topic .
1825	Move resources from a resource group .
1826	Set a profile .
1827	List query results for a management group .
1828	Create a queue .
1829	Delete a queue .
1830	Creates a new topic .
1831	Delete a topic .
1832	Creates a subscription .
1833	Create a connection from a connection string .
1834	Get the properties of the queue .
1835	Return True if the lock has expired .
1836	Create a new session .
1837	Creates a subscription .
1838	Export rate rate by interval .
1839	Return a list of results .
1840	Adds multiple tasks to the job queue .
1841	Handle the task collection .
1842	Build a configuration dictionary from a dictionary .
1843	Reset a user password .
1844	Start an environment .
1845	Create a message from a response .
1846	Convert an etree element into a Rule .
1847	Convert an etree element into a Queue .
1848	Convert an etree element into a Topic .
1849	Convert an etree element into a subscription .
1850	Create a new certificate .
1851	Delete a certificate .
1852	Create a client from CLI profile .
1853	Create a client from a dictionary .
1854	Load a client from an auth file .
1855	Parse an enum results list .
1856	Get the properties of an entry .
1857	Delete a certificate .
1858	Get a queue by name .
1859	List all queues .
1860	Get a topic client .
1861	List all topics .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Fetches a single site .
1865	Create a site .
1866	Delete a website .
1867	Updates a website state .
1868	Restart a website .
1869	Retrieve historical usage metrics for a website .
1870	Gets the Metric definitions for the specified website .
1871	Get the XML of the publish profile .
1872	Gets the publish profile .
1873	Updates a registry policy .
1874	Creates a cloud service .
1875	Check the availability of a job collection .
1876	Gets a job collection .
1877	Complete a backup operation .
1878	Cancels scheduled messages .
1879	Send pending messages to the client .
1880	Receive all pending messages .
1881	Get a certificate from the publish settings .
1882	Load all cookies from the cache
1883	Get the width of a string .
1884	Get the cut prefix from a string .
1885	Print a message to the terminal .
1886	Format file size .
1887	Format elapsed time .
1888	Create a status line .
1889	Print progress bar .
1890	Generate the number of segment numbers for this playlist .
1891	Iterate over all segments .
1892	Waits until the timeout is reached .
1893	Put a segment into the queue .
1894	Put value into the queue .
1895	Get request parameters for a stream .
1896	Extract a nonce from an HTTP result .
1897	Find vpid for a given URL .
1898	Validate a JSON string .
1899	Parse an XML string .
1900	Parse a query string .
1901	Search for a dictionary in a dictionary .
1902	Spawn a command .
1903	Iterate over tags in HTML .
1904	Parse a manifest .
1905	Determine the encoding of a sample .
1906	Convert a response to a Python object .
1907	Parse a response .
1908	Parse cookies .
1909	Parse HTTP headers .
1910	Parse the query parameters from a Cookie object .
1911	Return the message as a string .
1912	Create a log record .
1913	Login to LiveEdu account .
1914	Load a support plugin .
1915	Updates the URL of a URL .
1916	Iterate over all tags in a stream .
1917	Generator over all required dependencies for a given plugin .
1918	Check if file output exists .
1919	Create an output stream .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Write a stream to an HTTP server .
1923	Write a stream to a stream .
1924	Open a stream .
1925	Write a stream to a stream
1926	Read a stream from a stream .
1927	Handle a stream .
1928	Fetch streams for a plugin .
1929	Fetches the streams for a given plugin .
1930	Resolve a stream name .
1931	Format a list of valid streams .
1932	Attempt to resolve a URL .
1933	Print all loaded plugins
1934	Login to Twitch .
1935	Load plugins from a directory .
1936	Setup command line arguments
1937	Setup console output
1938	Setup http session
1939	Setup the plugins
1940	Setup command line options .
1941	Log the current version
1942	Extract stream id from text .
1943	Get an embed from text .
1944	Set an option
1945	Get the value of an option
1946	Set an option for a plugin .
1947	Get the value of a plugin option
1948	Resolve a URL .
1949	Load all registered plugins .
1950	Convert a number of hours minutes to seconds .
1951	Validate that a string starts with a string .
1952	Validate that value ends with a string .
1953	Validate that a string contains a string .
1954	Get an attribute from a value .
1955	Apply a function to the given value .
1956	Apply a function to a dictionary .
1957	Validate URL attributes .
1958	Performs an XML find on the element .
1959	Find all elements of a given XML element .
1960	Finds the URL of the player .
1961	Convert a string into a M3U - encoded object .
1962	Return the appropriate player for the given command .
1963	Login to the user .
1964	Extract stream id from HTML .
1965	Extract stream_info from HTML .
1966	Login to login page .
1967	Add a function to the map .
1968	Make an API call
1969	Start a new session .
1970	Get information about a media .
1971	Creates the API and returns it .
1972	Compress a string .
1973	Format a character .
1974	Format a string s .
1975	Read n bytes from the stream .
1976	Return the value of the code .
1977	Return the explanation of the code .
1978	Set the decode table .
1979	Set the length of the sequence .
1980	Display the code in a given width .
1981	Read a tuple from the stream .
1982	Return an explanation for the given index .
1983	Return the value of the given index .
1984	Return the span of the given index .
1985	Return the value at index .
1986	Return the mnemonic for the given index .
1987	Return the mnemonic for the given index .
1988	Compile the actions table
1989	Evaluate action .
1990	Make a hexadecimal string from the stream .
1991	Process a stream .
1992	Read metablock length .
1993	Is uncompressed data?
1994	Read block type .
1995	Implementation of IMTF
1996	Read a list of strings from a given kind .
1997	Make a monochrome color
1998	Polychrome polychrome
1999	Convert a DataFrame to an Arrow table .
2000	Decorator to patch a function .
2001	Add cartesian velocity vectors to pmagities .
2002	Creates a virtual vector of columns for a given motion .
2003	Return a graphviz representation of the graph .
2004	Return a list of counts for each column .
2005	Apply a mapper to the DataFrame .
2006	Creates an application .
2007	Opens multiple files .
2008	Read an SAMP file and return an AST .
2009	Create a Dataset from an astropy table .
2010	Create a DataFrame from a list of arrays .
2011	Convert scalar values into a numpy array .
2012	Convert a Pandas DataFrame to a DataFrame .
2013	Load a CSV file from a CSV file .
2014	Create a ServerRestore server .
2015	Generate Zeldovich
2016	Concatenate dfs .
2017	Creates a virtual range .
2018	open a dataset
2019	Evaluate an expression .
2020	Decorate a function to be delayed .
2021	Return a set of variables that depend on the selected columns .
2022	Run a task .
2023	Sort the layout by name .
2024	Get info from a file .
2025	Clear the background
2026	Wait for the last plot to finish .
2027	Open a document .
2028	Write a file - like object to a file - like object .
2029	Split arrays and combine them together .
2030	Apply a nop operator .
2031	Compute the first occurrence of an expression .
2032	Compute the mean of an expression .
2033	Compute the sum of an expression .
2034	Calculate the standard deviation of an expression .
2035	Calculate the covariance of the covariance matrix .
2036	Calculate the minimum value of an expression .
2037	Return the minimum value of an expression .
2038	Calculate the median of an expression .
2039	Plot a widget .
2040	Perform healpix count calculation .
2041	Generate a matplotlib plot .
2042	Plot 3D data .
2043	Return the dtype of an expression
2044	Returns the path to the private directory
2045	Get the state of the model
2046	Set the state of the table .
2047	Remove virtual meta data .
2048	Write virtual meta data .
2049	Write meta . yaml file .
2050	Return True if the columns are contained in the columns_list .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert to a dictionary .
2055	Return a copy of this DataFrame .
2056	Convert to pandas DataFrame .
2057	Convert this table into an arrow table .
2058	Convert to an astropy table .
2059	Add a column to the DataFrame .
2060	Renames a column .
2061	Convert cartesian coordinates to polar coordinates .
2062	Add vectors to cartesian coordinates .
2063	Add vectors to cartesian coordinates .
2064	Add columns to cartesian coordinates .
2065	Add a rotation matrix .
2066	Add virtual columns to cartesian coordinates .
2067	Convert cartesian coordinates to spherical coordinates .
2068	Add a new column .
2069	Delete a virtual column
2070	Add a new variable .
2071	Delete a variable
2072	Return the last n elements .
2073	Print the head and tail of the table .
2074	Describe the table .
2075	catenate two lists
2076	Set the current row .
2077	Returns a list of column names .
2078	Remove columns from the DataFrame .
2079	Return a new DataFrame with the given indices .
2080	Extract a subset of the query .
2081	Generate a random sample from the distribution .
2082	Split a sequence of elements into a single array .
2083	Split this sequence into chunks .
2084	Sort the Series by the given index .
2085	Create a new DataFrame with the given virtual column .
2086	Undo the selected selection .
2087	Trigger a selection change .
2088	Return whether the selection can beredo or not
2089	Select a boolean expression .
2090	Select rows that are not missing .
2091	Return a copy of this QuerySet .
2092	Select a rectangle .
2093	Select a box .
2094	Select a circle .
2095	Select an ellipse .
2096	Select a Lasso .
2097	Select a selection in the selection .
2098	Set selection .
2099	Create a new selection
2100	Find a valid name .
2101	Return a list of all nodes in the graph .
2102	Return a graphviz representation of the dataframe
2103	Categorize a column .
2104	Encode a column .
2105	Return a Dataset with all columns .
2106	The length of the array .
2107	hstack two DataFrames
2108	Concatenate two DataFrames together .
2109	Export to HDEx .
2110	Add a column to the DataFrame .
2111	Patch a DataFrame .
2112	Register a function as a function .
2113	Fill NaN with NaN .
2114	Return the dayof week of x .
2115	Return the dayofyear of x
2116	Return True if x is leap year
2117	Convert x to pandas Series .
2118	Convert x to pandas Series
2119	Return the month name of the month .
2120	Return the day of x .
2121	Return the day name of x .
2122	Return the weekof year of x
2123	Convert x to hours .
2124	Convert x to minute .
2125	Return the second value of x .
2126	Capitalize x .
2127	Concatenate x and y .
2128	Return True if x is contained in x .
2129	Return the number of occurrences of x .
2130	Find a substring within x .
2131	Get a column from x .
2132	Return the index of a substring in x .
2133	Convert x to a ColumnStringArrow
2134	Convert x to a column string .
2135	Pad x to a column of x .
2136	Repeats x .
2137	Find a substring within x .
2138	Find a substring within x .
2139	Pad x to a column of x .
2140	Strip a string from x .
2141	Return a slice of x .
2142	Strip a string from x .
2143	Convert x to a column string .
2144	Convert x to a column - like object .
2145	Convert an array to a numpy array .
2146	Convert to numpy array .
2147	Store properties in a file .
2148	Write a comment .
2149	Write a property .
2150	Iterate over properties lines .
2151	Generator for universal newlines .
2152	Show installed versions .
2153	Mark a keyword argument as deprecated .
2154	Set the fftlib library .
2155	Track the audio file .
2156	Adjust the pitch - correction of a file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert midi to a note .
2161	Convert hz frequencies to melm
2162	Convert mels to MHz
2163	Frequency frequencies .
2164	Calculate frequencies for CQT
2165	Calculate mel frequencies .
2166	Calculate A weighting
2167	Sample X - like timeseries .
2168	Sample from X .
2169	Convenience function for hybridization .
2170	Perform a pseudo - CQ filter using pseudopotential filter .
2171	Convert CQT to CQ .
2172	Convenience function for CQT filter .
2173	Trims a cq response to a numpy array .
2174	Cq response
2175	Calculate the number of downsampling counts .
2176	Downsample an audio signal
2177	Calculate the cost of DWE .
2178	Backtracking algorithm .
2179	Perform the viterbi algorithm .
2180	Perform a discriminative decomposition .
2181	Generate a transition matrix
2182	Generate a transition loop .
2183	Generate a transition cycle .
2184	Generate a transition matrix .
2185	Detect onset envelope .
2186	Compute the onset strength .
2187	Calculate the onset of the onset of an onset .
2188	Generate onset strength
2189	r Write times to a csv file .
2190	Write a wav file .
2191	Convert data to colormap .
2192	Plot a waveplot .
2193	Set the current image
2194	Convert matplotlib coordinates to coordinates .
2195	Check if axes is valid .
2196	Scale axes to scale .
2197	Calculate FFT frequency .
2198	Calculate melhz frequencies
2199	Calculate cq frequencies .
2200	Coordinates of chromosomes
2201	Convert frames to time
2202	Estimate the tuning of a piprack .
2203	Spectral Spectrogram .
2204	Compose the hss algorithm .
2205	Compute the harmonic of y .
2206	Perform the mean of y
2207	Stretch the phase of a time series .
2208	Calculate pitch shift
2209	Combine audio data .
2210	Convert signal to Noise .
2211	Trims an array of samples .
2212	Split a signal .
2213	Phase vocoder .
2214	Convert amplitude to db
2215	Generate a spectrogram .
2216	Run hss_beats on a file .
2217	Perform decomposition decomposition .
2218	Filter a set of samples .
2219	Helper function for _filter_filter .
2220	Generate Mel model .
2221	Generate chroma
2222	Convert window_spec to float
2223	r Calculate a constant - length frequency distribution .
2224	r Calculate the frequency lengths of a constant frequency range
2225	Convert CQ to chromosome .
2226	Return the bandwidth of a window .
2227	Get an array of nx .
2228	r Multirate Filter .
2229	r Calculate mr frequencies and sample frequencies .
2230	Fill a window with windows .
2231	Calculate the sum of a window .
2232	Create a diagonal filter .
2233	Calculate the spectral centroid .
2234	Rolloff spectrum .
2235	Calculate the flatness .
2236	Polynomial features .
2237	Calculate zero crossing rate .
2238	Generate chroma using chroma
2239	r Chroma .
2240	Generate a melspectrogram
2241	Compute the Jaccard distance between two numbers .
2242	Find the best match between two candidates .
2243	Match two intervals .
2244	Match two intervals .
2245	Match two events .
2246	Calculate the saturation
2247	Calculate harmonic harmonics .
2248	Calculate harmonic harmonics .
2249	Calculate the harmonics of two functions .
2250	Load audio data from a sound file .
2251	Load audio file .
2252	Convert audio to mono .
2253	Resample an audio array
2254	Autocorrelation function .
2255	Lpc function .
2256	Circular mouse clicks .
2257	Create a tone .
2258	Generate a chirp signal
2259	Get all files in a directory
2260	Stretch a demo of the demo .
2261	Process command line arguments .
2262	Implementation of HPSS .
2263	r Create a beat track .
2264	Perform a beat tracker .
2265	Calculate the beat score .
2266	Calculate the beat score .
2267	Return the last beat .
2268	Convert a recurrence matrix to lag .
2269	Convert lag to recurrence .
2270	Decorator for timelag filter .
2271	Subse a list of frames .
2272	Aggregative clustering .
2273	Gradient of path_enhances .
2274	Detect on onset .
2275	Generate a frame of data .
2276	Validate audio data .
2277	Validate x .
2278	Fix the length of an array .
2279	Sort an array .
2280	Normalize an array .
2281	Return True if x is greater than x .
2282	Pick a peak at x .
2283	Parse rows x .
2284	Roll a sparse matrix .
2285	Convert a buffer to a float32 float
2286	Convert an index to a slice .
2287	Synchronize data into an array .
2288	Multiply softmask x_ref .
2289	Convert x to float32 .
2290	Convert frames to a video file .
2291	Read an image from the device .
2292	Get a single frame
2293	Convert cv2 frames to frames
2294	Track the progress bar .
2295	Create a progress bar .
2296	Flip an image .
2297	Rotate an image .
2298	Clip a list of bounding boxes .
2299	Scales bounding boxes .
2300	Crops an image .
2301	Add an image to an image .
2302	Impress an image to multiple images .
2303	scale size
2304	Resize an image .
2305	Resize image like image .
2306	Resize an image .
2307	Register a handler .
2308	Convert a priority value to a priority .
2309	Dequantize an array .
2310	Display an image .
2311	Display a list of bboxes .
2312	Read a flow file .
2313	Write a flow to a file .
2314	Dequantize a flow .
2315	Load a state_dict from a module .
2316	Load model from file .
2317	Convert weights to CPU
2318	Save model to file .
2319	Initialize optimizer .
2320	Initialize the logger .
2321	Get the current learning rate .
2322	Register a hook .
2323	Run a workflow .
2324	Register training hooks .
2325	Convert a video file into an output file .
2326	Resize a video .
2327	Cut a video .
2328	Concatenate multiple videos into a single file .
2329	Read lines from a file .
2330	Create a dictionary from a file .
2331	3x3 convolution with padding
2332	Create an object from a dictionary .
2333	Read a numpy numpy numpy array .
2334	Create an image from a byte string .
2335	Write an image to a file .
2336	Convert RGB image to gray .
2337	Convert gray to bgr color
2338	Convert inputs to dst_type .
2339	Return True if seq_type is of expected_type
2340	Slice a list .
2341	Decorator to check if a function is required .
2342	Calculate the average of the history .
2343	Concatenate multiple devices .
2344	Convert a color to a tuple .
2345	Check if a timer has expired .
2346	Start the timer .
2347	Return the number of seconds since the start of the timer .
2348	Return the number of seconds since last check .
2349	Display a flow
2350	Convert a flow to RGB .
2351	Make a color wheel .
2352	Compute accuracy .
2353	Scatter function .
2354	Convert inputs to kwargs .
2355	Fetches an HTTP request .
2356	Convert to JSON .
2357	Convert to text .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Make a request .
2361	Start the master
2362	Normalize a task .
2363	Parse yaml lines .
2364	Name of wheel distribution .
2365	Get archive basename .
2366	Add additional requirements to the metadata file .
2367	Convert an egg - info file into a distribution .
2368	Create a message .
2369	Create a suggestion message .
2370	Creates an attachment .
2371	Create a list of attachments .
2372	Create an attachment .
2373	Create a trace .
2374	Set the telemetry client .
2375	Read the contents of a collection .
2376	Write changes to the store .
2377	Delete items from the container .
2378	Create a store item
2379	Create a dictionary from a store item .
2380	Sanitize a key .
2381	Create database and container
2382	Get or create a database .
2383	Get or create a container .
2384	Fills the query results with the given query results .
2385	Get a conversation reference .
2386	Get the name of the step .
2387	Return True if the given channel_id is supported .
2388	Return True if card actions are supported .
2389	Return the channel id for the given context .
2390	Return True if auth token is valid .
2391	Create a hero card attachment .
2392	List of parameters .
2393	Return a copy of this instance .
2394	Return the inverse of this gate .
2395	Set control value .
2396	Creates a shallow copy of the object .
2397	Convert string to QASIF if possible .
2398	Return the qasm instruction .
2399	Run a circuit .
2400	Perform a pass on the graph .
2401	Return a list of PASSes .
2402	Dump all passes to a dictionary .
2403	Instantiate the controller .
2404	Create a uBase
2405	Get parameters for single gate .
2406	Compute a single - gate matrix .
2407	Generate an einsum matrix .
2408	Compute the einsum matrix .
2409	Helper function for indexing matrices .
2410	Convert a circuit into a DAG circuit .
2411	fit function
2412	fit function
2413	Plot the coherence .
2414	Shape of Rb data
2415	Plot data .
2416	Split a list of runs into a list of gates .
2417	Compose U3 .
2418	Convert YZY to ZYZ angle .
2419	Validate the input state .
2420	Trim an image .
2421	Get the span of a gate .
2422	Convert a circuit to an instruction .
2423	Run the given dag .
2424	Return a subset of the best connected components .
2425	Creates a new Barrier .
2426	Calculate the average of counts .
2427	Process a bit id .
2428	Process a custom unitary node .
2429	Processes a gate .
2430	Process a COR node .
2431	Process a measure node .
2432	Process a condition .
2433	Create a DAG op .
2434	Return the duration of a set of channels .
2435	Return the start time of the given channels .
2436	Return the stop time of the given channels .
2437	Iterate over all instructions in this schedule .
2438	Check that the given value is a valid type .
2439	Dump additional data into a dictionary
2440	Load additional data from valid_data .
2441	Creates a valid validation schema .
2442	Validate an instance .
2443	Validate the model after initialization .
2444	Convert the model to a dictionary .
2445	Load a dictionary from a dictionary .
2446	Compute the qft Fourier Transform
2447	Create a partial trace vector
2448	Vectorize a density matrix .
2449	Return a vectorized representation of a matrix .
2450	Convert a choi .
2451	Crop an array from an array .
2452	Return the outer product of two vectors .
2453	Return the concurrence of a state .
2454	Shannon entropy .
2455	Compute the Shannon entropy of a state .
2456	Compute mutual mutual information .
2457	Compute the entanglement of a transition matrix .
2458	Compute eof qubit
2459	Flatten a schedule .
2460	Shift a schedule by name .
2461	Creates a new schedule .
2462	r Append a child to parent .
2463	U3 gate .
2464	Get the backend status .
2465	Start the simulation .
2466	Return the time remaining in seconds .
2467	Disassemble an experiment .
2468	Returns the Hamming distance between two strings .
2469	Create a quaternion from an axis .
2470	Create a quaternion from Euler angles .
2471	Normalize the quaternion .
2472	Convert to a matrix .
2473	Convert an euler to zuler .
2474	Convert data into a dictionary .
2475	Plot a histogram .
2476	Check if value is a collection .
2477	Check that the index is in range
2478	Check if matrices are square .
2479	Check if matrices are diagonal .
2480	Return True if op is symmetric .
2481	Return True if matrices are symmetric .
2482	Return True if matrices are positive semidefinite .
2483	Check if a matrix is an identity matrix .
2484	Check if a matrix is a unitary matrix .
2485	Convert data to Qisk channel
2486	Convert data to superoperator
2487	Convert data to Kraus
2488	Convert data to Chi
2489	Convert data to PMM
2490	Convert data to Stinespring .
2491	Convert data to an operator .
2492	Convert an operator .
2493	Convert data to operator representation .
2494	Convert superop to choi .
2495	Convert data to superop .
2496	Convert krai data to choi
2497	Convert data to kraus .
2498	Convert stines to kraus .
2499	Convert stinespring to Choi .
2500	Convert kraus to stine .
2501	Convert kraus to superop .
2502	Convert data to choi .
2503	Convert data tochi
2504	Reverse two matrices .
2505	Transform data into a matrix .
2506	Check that the input_dim is a n - qubit channel .
2507	Hide ticks and labels .
2508	Set the label for the plot
2509	Clear all points .
2510	Add a list of vectors .
2511	Add an annotation .
2512	Render the plot .
2513	Plot the front of the sphere .
2514	Shows the plot .
2515	Synthesize a unitary matrix .
2516	Returns the top border of the layer .
2517	Return the mid content .
2518	Return the bot .
2519	The length of the sentence .
2520	Return the parameters for a label .
2521	Return the label for an instruction .
2522	Return a latex representation of the parameter .
2523	Compile a circuit .
2524	Add deprecation warnings .
2525	Return information about local hardware .
2526	Check if the given hostname exists .
2527	Check the status of a job .
2528	Create an array of complex times
2529	Compute the square of a complex vector .
2530	Compute the triangle of a triangle .
2531	Cosmic cosine .
2532	r Fix the width of a Gaussian .
2533	r Generate a Gaussian .
2534	Derivative of Gaussian derivative
2535	r Generate a Gaussian .
2536	Creates a pass manager for the pass manager .
2537	Creates a default pass manager .
2538	Checks if the given register exists .
2539	Mirror a circular circuit .
2540	Return the inverse of the circuit .
2541	Appends an instruction to the stack .
2542	Attach an instruction to the stack .
2543	Add a new register .
2544	Make sure that qubits are duplicated .
2545	Validate qargs .
2546	Check that cargs are valid .
2547	Check that the circuit is compatible .
2548	Return the QR Code as a string .
2549	Draw circuit .
2550	The size of the gate .
2551	Width of the QR code
2552	Count the number of operations .
2553	Number of connected components .
2554	Create a new circuit with the given dictionary of parameters .
2555	Bind a parameter to a given parameter .
2556	Draw pulse drawer .
2557	Performs a search on the graph .
2558	Map free gates to free gates .
2559	Calculate the distance between gates .
2560	Score a single step .
2561	Copy metadata from a DAG into a new DAG .
2562	Convert a layout node to a graph .
2563	Convert an edge into a DAG node .
2564	Run the transpiler .
2565	Add a physical qubit .
2566	Add an edge to the graph .
2567	Create a subgraph from a list of nodes .
2568	List of physical qubits .
2569	Check if the graph is strongly connected .
2570	Compute the distance matrix .
2571	Compute the distance between two components .
2572	Transpile a circuit .
2573	Construct a cu1 gate .
2574	Inverse of the instruction .
2575	Apply q_ifs .
2576	Calls c_if .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe a callback .
2580	Publish an event .
2581	Initialize the register .
2582	Define the gate definition .
2583	Return a circuit to uncompute the gate .
2584	Bochastic angles .
2585	Multiply multiple angles .
2586	Check if value is virtual machine .
2587	Make a copy of the layout .
2588	Combine two layouts into a new one .
2589	Multipoli gate .
2590	Insert a schedule into the schedule .
2591	Raise an exception if the given property is notenced .
2592	Convert a list of gates to indices .
2593	Run the transition graph .
2594	Update layer layer .
2595	Pauli group
2596	r Create a Pauli instance from a label .
2597	Initialize a Qiskit .
2598	r Compute the product of p1 and p2 .
2599	Convert to operator .
2600	Convert circuit to an instruction .
2601	Update the number of qubits .
2602	Update the x .
2603	Insert a Pauli .
2604	Append a Pauliillis .
2605	Delete a set of qubits .
2606	Generate a random boolean mask .
2607	Create a Pauli .
2608	Get the measurement outcome of a given qubit .
2609	Add a sample measure .
2610	Add a qubit measure .
2611	Add a qubit .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Get the state vector .
2615	Validate the sampling of the experiment .
2616	Run a job .
2617	Run a job .
2618	Validate that the circuit is valid .
2619	Validate the initial unitary .
2620	Initialize the unitary .
2621	Get unitary .
2622	Run a job .
2623	Validate a circuit .
2624	Check if obj is a bit
2625	Run the transpiler .
2626	Return True if interval overlap
2627	Return a new Interval shifted by the given time .
2628	Return a new Timeslot .
2629	Return the start time of a set of channels .
2630	Return the stop time of a set of channels .
2631	Return True if the timeslots overlap with the given timeslots .
2632	Merge two Timeslot objects into a new Timeslot .
2633	Shift the timeslot by a given time .
2634	Create a comment on the repository .
2635	Processes the data .
2636	Plot the state of a state .
2637	Create a RZ gate .
2638	Convenience method for creating a new Cswap gate .
2639	Initialize the backend property .
2640	Create the graph for the given dag .
2641	Select the next edge of the next program .
2642	Select the best possible cost .
2643	Select the best available hardware .
2644	Run the program .
2645	Returns a list of instructions .
2646	Inverse of the gate .
2647	Apply q_ifs .
2648	Called by c_if .
2649	Return True if the data is unitary .
2650	conjugate operator .
2651	Transpose operator .
2652	Return the power of the operator .
2653	Shape .
2654	Convert an instruction to an operator .
2655	Swap layer update .
2656	Separate a bitstring into a string .
2657	Format a level 0 - 1 array .
2658	Format a list of memory .
2659	Format a list of memory .
2660	Format counts as a dictionary .
2661	Format a state vector .
2662	Format a matrices .
2663	Decorator to ensure that the job has been submitted .
2664	Submit the job to the scheduler .
2665	Return the status of the job .
2666	Indicates whether this interval is included .
2667	Plots a single bloch multochile .
2668	Get the qubit frequencies for each channel .
2669	Return a dictionary of measurement frequencies for each channel .
2670	Unroll the circuit .
2671	Plot the state of a state sphere .
2672	Chooses k - th k .
2673	Lexer lexicographical index .
2674	Plot the state of a Pauli state .
2675	Return a list of unique hardware backends .
2676	The op node .
2677	Sample a constant pulse .
2678	Return a new SamplePulse .
2679	Sample a square pulse .
2680	Return a SamplePulse pulse .
2681	Sample a triangle .
2682	Sample a cosine wave .
2683	Sample a sin .
2684	r Sample pulse .
2685	r Sample derivative of a Gaussian derivative .
2686	Generate a sample pulse .
2687	Calculate the distance between two axes .
2688	Convert to string .
2689	Instantiate a backend instance .
2690	Renames a register .
2691	Remove all ops named by opname .
2692	Add a quantum register .
2693	Add a classical register .
2694	Add a wire node to the graph .
2695	Check if condition is valid
2696	Get all bits in a condition .
2697	Create a new DAG node .
2698	Apply an operation back to the graph .
2699	Make sure that the keyregs are valid .
2700	Check the validity of a wiremap .
2701	Map a condition to a new value .
2702	Extend the state of a dag .
2703	Compose the input circuit .
2704	Validate a list of wires .
2705	Make a mapping between two nodes .
2706	Convert the input circuit to a dictionary .
2707	Return a list of topological nodes .
2708	Iterate over the edges of the graph .
2709	Returns a list of nodes that satisfy the given op .
2710	List of gate nodes .
2711	Return a list of nodes with names matching names .
2712	A list of two qubits .
2713	Get the predecessors of a node .
2714	Returns a list of all predecessors of the given node .
2715	Return the ancestors of a node .
2716	Returns a list of successors of the given node .
2717	Remove an op node from the graph .
2718	Remove all ancestors of a node .
2719	Remove all descendants of a node .
2720	Remove all non - ancestor nodes of a node .
2721	Remove all descendants of a node .
2722	Generate a DAG circuit .
2723	Generator for serialization .
2724	Generator for multigraph layers .
2725	Collect all runs in the graph .
2726	Iterate over all nodes on a wire map .
2727	Count all operations .
2728	Summary of the tensor .
2729	Create a tomography basis .
2730	Calculate the Pauli measure of the Pauli measurement .
2731	Create a tomography set .
2732	Process a tomography set .
2733	Create tomography circuit .
2734	Generate the data for a tomography circuit .
2735	Calculate counts for counts .
2736	Fit the TOMography data to the TOMography data .
2737	Fit to the Leastore
2738	Projection onto a basis matrix .
2739	Compute the inverse of Tomo .
2740	Calculate the Wilson coefficient
2741	Calculate wigner data .
2742	Measure the gate .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Compute euler angles .
2746	Simplify U3 gate .
2747	Add qubits to the graph .
2748	Display the qubits tab .
2749	Display the job history .
2750	Plot jobs history .
2751	Draw the current pulse .
2752	Construct a cu3 gate .
2753	Build a Bell circuit .
2754	Transpile a circuit into a circuit .
2755	Run a circuit on a circuit .
2756	Execute a set of experiments .
2757	Return the drive channel .
2758	Return the control channel .
2759	The measure channel .
2760	Acquire a single channel .
2761	Generate an input state .
2762	Assemble a set of experiments .
2763	Unset the Qiskit logger
2764	Plot a state hinton state .
2765	Compute the fidelity between two channels .
2766	Parse data .
2767	Pop the stack from the stack .
2768	Push a file to the stack .
2769	Run a DAG on a DAG .
2770	Returns the bound method for the given instruction .
2771	Convert an acquire instruction into a dictionary .
2772	Convert a frame change .
2773	Convert a persistent value .
2774	Convert a drive instruction to a model .
2775	Convert a snapshot instruction to a model .
2776	Update the annotations of a pulse .
2777	Generate a sampling function from a function .
2778	Filter a list of backends .
2779	Resolve backend name .
2780	Convert a dag into a QuantumCircuit .
2781	Make a dictionary observable observable .
2782	Update the declaration of an object .
2783	Verify a bit in the gate .
2784	Verify that the expression is valid .
2785	Verify that the object is a gate definition .
2786	Verify that the registry is valid .
2787	Verify that all children are valid .
2788	Find the column of the given token .
2789	Set debug flag .
2790	Parse data .
2791	Run the parser .
2792	Parse the file .
2793	Create a crz gate .
2794	Compute the basis state of a bitstring .
2795	Creates a projection matrix
2796	Calculate the purity of a state .
2797	Run the given dag .
2798	Render a backend .
2799	Update the backend info
2800	Generates the widgets for the jobs pending .
2801	Run cx .
2802	Get a backend by name .
2803	Return the shape of the bipartite shape .
2804	Get the register names for each bit .
2805	Remove a float from a match object .
2806	Render a LaTeX file .
2807	Get the width of the image
2808	Get the size of the page
2809	Load a JSON Schema from a file .
2810	Get a validator for a given schema .
2811	Load all schemas and validate them .
2812	Validate a JSON dictionary against a given schema .
2813	Formats a list of errors .
2814	Perform majority operation
2815	Unmajority .
2816	Generate a latex source
2817	Draw a QR Code from a circuit .
2818	Generate a random unitary operator .
2819	Generate a random density matrix .
2820	Generate a gibre matrix
2821	Random density matrix
2822	Generate a random density matrix
2823	Returns a list of names of names .
2824	Power power of self .
2825	Compose the components of the subsystem .
2826	Convert an instruction to a superoperator .
2827	Run a DAG on the graph .
2828	Convert a list of circuits into a QKObject .
2829	Perform a decomposition on the graph .
2830	Perform the decomposition of the gate .
2831	Define the gate definition .
2832	Check if value is a collection .
2833	Check if value is valid .
2834	Set the atol .
2835	Set rtol .
2836	Reshape the input dimension .
2837	Return the dimensions of the input dimension .
2838	Return a tuple of output dimensions .
2839	Make a shallow copy of the data .
2840	Power up self .
2841	Determine the dimensions for the given dimensions .
2842	Multiply an einsum matrix .
2843	Deserialize a value into a valid schema .
2844	Ensure that the value is valid .
2845	Validate the type of the given value .
2846	Compute the fidelity between two states .
2847	Svd function
2848	Return the inverse of this snapshot .
2849	Set label .
2850	Return True if the operation is unitary .
2851	Convert to operator .
2852	Convert this QuantumChannel to an instruction .
2853	Initialize a transformer .
2854	Sort an enum by name .
2855	Patch the strptime module .
2856	Get a map of languages .
2857	Return a list of all available locale codes .
2858	Check if tokens are valid .
2859	Split a string .
2860	Parses a date string .
2861	Parse a date string .
2862	Checks if the given date_string is valid .
2863	Translate a date_string .
2864	Parse a date string .
2865	Return an ammo generator .
2866	Convert a Java exception to an error message .
2867	Convert an exception to an HTTP error code .
2868	Read the config file
2869	Compose the phantom configuration .
2870	Get information about the stream .
2871	Compose the stepper configuration .
2872	Log stdout and stderr
2873	Expand a time from a string .
2874	Configure the StepperWrapper .
2875	Publish the stepper summary .
2876	Get the filename for the STPD file .
2877	Read the stepper info from the stepper file .
2878	Write the stepper options to a file .
2879	create stpd - file
2880	Create a Composite .
2881	Return the rps at t .
2882	Execute a command .
2883	Decode monitor monitoring data .
2884	Make a list of points for a label
2885	Publish a key .
2886	Count the number of matched codes in a dictionary .
2887	Stop the queue
2888	Feed all of the stpd files
2889	Initialize logging .
2890	Add user options .
2891	Configure the options
2892	Shutdown all plugins .
2893	Collect data from the queue
2894	Notify listeners .
2895	Get a marker for a given type .
2896	Parse a duration string .
2897	Start the agent on localhost .
2898	Start the agent .
2899	Discover the jmeter UDP UDP port .
2900	Add components to a JMX file .
2901	Terminate the process .
2902	Read a list of stats .
2903	Create a criterion from a string .
2904	Read a monitoring configuration file .
2905	Create the startup config file .
2906	Check if disk usage is too large
2907	Checks if the memory is available .
2908	Get terminal size .
2909	Get the right line of the right line
2910	Truncate line_arrays .
2911	Render the left panel .
2912	Render the screen .
2913	Add an info widget .
2914	Fill a rectangle with whitespace .
2915	Return the length of a line .
2916	Create a load plan
2917	Get a string representation of the level .
2918	Add an info widget .
2919	Make a request to the writer .
2920	Load all plugins
2921	Return the plugin with the given plugin_class .
2922	Returns a list of plugins that match the given plugin_class .
2923	Collect a file from the artifacts directory .
2924	Add an artifact file to the collection .
2925	Create a temporary file and return its filename .
2926	Load configuration files .
2927	Flush the config file .
2928	Get all options from a section .
2929	Find all sections in the config .
2930	Convert a chunk of stats into stats_items .
2931	Get the info of the phantom
2932	Installs the monitoring agent .
2933	Poll the data for all agents .
2934	Send the selected data to all listeners .
2935	Detect the configuration .
2936	Handle a single metric
2937	Convert a block of agents into a dictionary .
2938	Subscribe to channels .
2939	Run the event loop .
2940	Close the stream .
2941	Perform one request .
2942	Submit an order
2943	Get an order by ID .
2944	Get a single position
2945	List all assets .
2946	Get an asset
2947	Create a new ExecutionValueSubplan from a pipeline definition .
2948	Check if an object is a dictionary .
2949	Check if an object is a dictionary .
2950	Construct an event logger .
2951	Construct a json - event logger .
2952	Read configuration from a file .
2953	Get the configuration for a repository .
2954	Format a config dictionary for graphs .
2955	Get a pipeline by name .
2956	Get all pipelines
2957	Get next event from process .
2958	Execute a pipeline through a pipeline .
2959	Wait for all processes to finish .
2960	Create a new Dagster Field .
2961	Build an ExecutionPlan .
2962	Build a pipeline .
2963	Build a pipeline from a pipeline definition .
2964	Return the solid named name .
2965	Build the list of publish commands .
2966	Set a new version .
2967	Create a pipeline context definition .
2968	Decorator for creating an input selector .
2969	Decorator for creating an output selector .
2970	Block text with indentation .
2971	Download file from S3 .
2972	Upload a file to S3 .
2973	Context manager that raises an exception if the error occurs .
2974	Create a directory .
2975	Context manager for context manager .
2976	Create a context - free log .
2977	Return True if any of the steps have been completed .
2978	True if the step is skipped .
2979	Return the transformed values .
2980	Return the transformed value .
2981	The data of a step_failure event .
2982	Creates a PermissiveDict .
2983	Check if config value is valid .
2984	Check if config value is valid .
2985	Execute the core transform .
2986	Creates a new dagster type .
2987	Creates a resource definition .
2988	Create an event v2 .
2989	Convert the execution plan into a dictionary .
2990	Get connection parameters .
2991	Create a new connection
2992	Create a new Cursor instance .
2993	Close the connection .
2994	Make a model from a model dictionary .
2995	Convert a value to a Python dictionary .
2996	Create a formfield for the form field .
2997	Convert a value into an object .
2998	Apply filters to the queryset .
2999	Compute nfps .
3000	Compute nfps .
3001	Compute the best partitions for each partition .
3002	Return a list of optimal partitions .
3003	Calculate the correlation coefficient
3004	Initialize the slots .
3005	Return the size of the seed .
3006	Serialize this MinHash into a buffer .
3007	Deserialize a buffer from a buffer .
3008	Update the hashvalues with the given b .
3009	Merge two minhash values .
3010	Concatenate a minhash .
3011	Index entries .
3012	Query all indexes for a given minhash .
3013	Calculate the minimum hash value for a given vector .
3014	Remove a key from the dictionary .
3015	Update the bits of a byte .
3016	Count the number of elements in this range
3017	Merge two HyperLogLogs .
3018	Clear the registry .
3019	Calculate the APK score .
3020	Map a set of predictions to predictions .
3021	Index all hashes .
3022	Query the keys for a given minhash .
3023	Close all connections .
3024	Return an ordered storage .
3025	Factory for unordered storage .
3026	Get user details from JSON .
3027	Set social login state .
3028	Select text from given text .
3029	Parse a scoped_selector .
3030	Parse a single statement .
3031	Parse a single value .
3032	Move one line to one line .
3033	Parse a configurable reference .
3034	Augment an exception message and raise an exception .
3035	Convert a string to markdown format .
3036	Runs after creating a new session .
3037	Ensure that the wrapped function is wrapped .
3038	Decorate a function or class .
3039	Format a value .
3040	Clear the global configuration .
3041	Bind a parameter to a configuration key .
3042	Retrieve a parameter from a configuration key .
3043	Check if a function has a parameter .
3044	Get the argument spec for a function .
3045	Get the positional parameters for a function .
3046	Get all positional parameters for a function .
3047	Get the default values for a function .
3048	Context manager for scope_or_scope .
3049	Decorator to configure a function .
3050	Return a string representation of an operative config string .
3051	Parse a configuration string .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse a list of config files and return a list of dicts .
3055	Parse a config value .
3056	Finalize the configuration .
3057	Iterate over nested values .
3058	Iterate over all the values in a config .
3059	Add a constant .
3060	Add constants from enum .
3061	Return a list of selectors matching the given partial selector .
3062	Returns a list of all matches matching the given partial selector .
3063	Convert a single selector into a single element .
3064	Convert a query to a string .
3065	Parse the retry - after retry - after .
3066	Validate the given value .
3067	Return a dictionary representation of the property .
3068	Validate the value
3069	Get a thing by index .
3070	Initialize the Thing .
3071	Set default headers .
3072	Validate HTTP request headers .
3073	Get a thing .
3074	Handle a message .
3075	POST a thing
3076	Delete a thing .
3077	Start the service .
3078	Return a dictionary representation of the action .
3079	Start the action .
3080	Mark the task as completed .
3081	Return a dictionary representation of the event .
3082	Get the IP address of the local machine .
3083	Returns a list of all available IP addresses .
3084	Set the value of the field .
3085	Notify an external update .
3086	Return a thing description .
3087	Set href prefix .
3088	Returns a dictionary representation of all properties .
3089	Returns a list of action descriptions .
3090	Returns a list of event descriptions for the specified event .
3091	Add a property
3092	Remove a property .
3093	Get the value of a property
3094	Returns a dictionary of all properties .
3095	Set the value of a property
3096	Get action by name .
3097	Add an event .
3098	Add a new available event .
3099	Perform an action .
3100	Remove an action
3101	Add a new action to the list of actions .
3102	Remove a subscriber .
3103	Add a new event subscriber .
3104	Remove an event subscriber .
3105	Notify a property .
3106	Notify an action .
3107	Notify an event .
3108	Add annotations to the model .
3109	Update the database .
3110	Perform bulk insert .
3111	Insert a new record in the database .
3112	Insert a model and return it .
3113	Build a postgres insert compiler .
3114	Returns True if the field is valid .
3115	Get the upsert fields for the model .
3116	Send signals to model .
3117	Handle delete signals .
3118	Create a case where clause is not None .
3119	Resolve an expression .
3120	Return a SQL string representation of the object .
3121	Return a copy of this object .
3122	Add a new join condition to the target table .
3123	Check if a field is a HStore field .
3124	Insert values into the database .
3125	Create a hstore required for a given field .
3126	Rename a hstore for a hstore
3127	Drop a required constraint for a given field .
3128	Generate a constraint name for a constraint .
3129	Creates the SQL index for the given model .
3130	Create a command based on text .
3131	Get the base base class based on settings .
3132	Prepare the database .
3133	Prepare the value for the field
3134	Formats the SQL query string .
3135	Return a list of SQL objects .
3136	Rewrite insert statement .
3137	Rewrite an insert update statement .
3138	Rewrite the SQL statement with the SQLite database .
3139	Build a conflict target .
3140	Get a model field by name .
3141	Format a field name .
3142	Format the field value for the given field .
3143	Create a unique unique constraint for a given field .
3144	Rename a table unique identifier .
3145	Drop a unique unique constraint for a given field .
3146	Generate a unique constraint name for a unique unique field .
3147	Iterate over unique keys .
3148	Add a condition for a given field .
3149	Return the SQL for this query .
3150	Tries to determine the tdist percentile level .
3151	Compute the variance between two samples .
3152	Compute the tscore between two samples .
3153	Check if two samples are significant .
3154	Topological sort .
3155	Generator for n queens .
3156	Play a board .
3157	Select a node from the board .
3158	Playout a board .
3159	Remove benchmarks from benchmarks .
3160	Expand all benchmarks in a benchmark group .
3161	Generate a table of strings .
3162	Generate benchmarks .
3163	Retrieves the domain .
3164	Fetch messages from a channel
3165	Parse the raw posts .
3166	Retrieve information about a user .
3167	Fetch a category
3168	Fetches RSS entries for a given category .
3169	Setup command line parser .
3170	Fetch items from Bugzilla
3171	Retrieve a list of bugs .
3172	Get comments for a list of bug ids .
3173	Get the history of a bug .
3174	Get a list of attachments .
3175	Gets a list of notes for an issue .
3176	Fetch merge requests
3177	Gets a list of notes for a merge .
3178	Get a list of merge versions .
3179	Retrieve all merge items .
3180	Fetches a merge .
3181	Fetch versions of a merge .
3182	Fetches a merge version .
3183	Retrieve notes for a specific item .
3184	Fetches a list of emojis for a given item .
3185	Fetches a list of ids for a note .
3186	Calculate the amount of time to reset .
3187	Fetch items from GitLab .
3188	Initialize rate limit .
3189	Setup the command line parser
3190	Fetch items from a category
3191	Get metadata id for metadata
3192	Get the number of members of a conversation .
3193	Get channel info
3194	Get information about a user
3195	Setup the command line parser .
3196	Return the timestamp of the metadata on the item .
3197	Parse a buglist .
3198	Parse the bug details .
3199	Parse bug activity .
3200	Logout from Bugzilla .
3201	Get the metadata for the Bugzilla Bugzilla API .
3202	Retrieve a list of bugs .
3203	Get a list of bugs .
3204	Get a bug activity
3205	Fetch events
3206	Fetch events from a group .
3207	Get events for a group .
3208	Get comments for a group .
3209	Fetches RRSVPS for a given event .
3210	Fetches a question
3211	Fetch comments for a question .
3212	Build a Question object
3213	Fetches questions for a given path .
3214	Get HTML question .
3215	Get comments for a post .
3216	Parse an HTML question .
3217	Parse the answer from an answer .
3218	Parse the number of html pages .
3219	Parse user info .
3220	Fetch reviews for a given category .
3221	Parse reviews .
3222	Fetches Gerrit 28 .
3223	Get Gerrit server version .
3224	Get reviews for last item
3225	Get the next group item from the server .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute command from remote server .
3229	Setup the command line argument parser .
3230	Fetches issue data
3231	Fetches the attachments for an issue .
3232	Fetches the messages for the issue .
3233	Fetches activities for an issue .
3234	Fetch user data
3235	Get user info
3236	Fetch an issue
3237	Fetch a collection of issues for a collection .
3238	Get the URL for the project
3239	Fetches the contents of a collection .
3240	Get a list of all subscriptions .
3241	Find group id
3242	Perform a GET request .
3243	Setup command line argument parser .
3244	Generate a unique uuid based on arguments .
3245	Fetch data from backend
3246	Fetch files from an archive
3247	Find all backends for a given package .
3248	Fetch metadata for a given category .
3249	Fetch metadata from an archive
3250	Filter classified data .
3251	Parse command line arguments .
3252	Set the authentication arguments for authentication .
3253	Set the arguments for the archive
3254	Add command line arguments to the parser .
3255	Run the backend .
3256	Initialize the archive manager .
3257	Return the timestamp of the metadata on the item .
3258	Parse a mbox file .
3259	Fetch and parse mboxes from a mailing list .
3260	Copy a mbox into a temporary file .
3261	Validate a message .
3262	Convert a dictionary to a dictionary .
3263	Get a message from the file .
3264	Fetch items from commit
3265	Fetch items from repo
3266	Parse git log file .
3267	Initialize git path
3268	Setup the command line parser
3269	Parse the stream .
3270	Clone a git repository .
3271	Count the number of objects in the repository .
3272	Determine if the ref is detached
3273	Update git repo .
3274	Synchronize this repository .
3275	Get a list of commits from the repository .
3276	Create a git log .
3277	Show a list of commits .
3278	Fetch the ref from the repo
3279	Return a list of commits from a pack .
3280	Update a list of refs .
3281	Discover the refs for this repository .
3282	Update a ref
3283	Run a command in the repository .
3284	Read the stderr from the process log stderr .
3285	Execute a git command .
3286	Fetch tweets
3287	Fetch tweets from a category .
3288	Fetches tweets for a given query .
3289	Setup command line argument parser
3290	Fetch items
3291	Fetch hits for a given category .
3292	Parses the hit and returns the results .
3293	Fetch hits for given keywords .
3294	Return the updated datetime of a metadata item
3295	Return the category of metadata .
3296	Fetch pull requests
3297	Fetch repo info
3298	Get the reactions for the issue .
3299	Get the reactions for a comment comment .
3300	Get a list of issue assignments for issue
3301	Get a list of approved reviews for a pull request .
3302	Get a list of hashes for the pull commit .
3303	Get the reactions for a pull review comment .
3304	Get user details
3305	Get all the reactions for an issue .
3306	Retrieve issues .
3307	Yield a list of pull requests .
3308	Get repo name .
3309	Fetch a list of approved reviewers for a given PR number .
3310	List of commits for a given PR number .
3311	Pull comments for a comment .
3312	Get user info .
3313	Returns a list of orgs for the given login .
3314	Get the rate limit .
3315	Get rate limit rate limit .
3316	Choose the best api token .
3317	Check if the rate limit is needed .
3318	Update current rate limit
3319	Initialize metadata .
3320	Store an entry in the archive .
3321	Retrieve an entry in the archive .
3322	Create a new archive .
3323	Make a hashcode for a request .
3324	Verify the integrity of the archive .
3325	Load metadata from the database .
3326	Count the number of rows in a table .
3327	Create an archive
3328	Remove an archive .
3329	Search for archives .
3330	Search for archived archives .
3331	Search for files in directory .
3332	Checks if the filepath is valid .
3333	Generate a list of months between two dates .
3334	Convert a message to a dictionary .
3335	Remove illegal characters from raw XML .
3336	Convert an XML string into a dictionary .
3337	Parse a JSON - formatted JSON string
3338	Retrieve issues for a given date range .
3339	Fetch an issue
3340	Get user details
3341	Make a request to Redmine API .
3342	Fetch data for a given category
3343	Fetch data from repo
3344	Get the contents of a DockerHub repository .
3345	Map custom fields to custom fields .
3346	Filter custom fields based on custom fields .
3347	Parse the raw github page
3348	Fetch issues from url
3349	Get issues for a given date
3350	Get comments for an issue
3351	Get the list of fields
3352	Fetch items
3353	Get the list of jobs
3354	Get all builds for a given job .
3355	Parse a raw page .
3356	Get questions from a given date
3357	Setup command line argument parser
3358	Fetch reviews for a given category .
3359	Get the timestamp of a review .
3360	Fetch pages at url
3361	List all pages in a namespace
3362	List recent changes .
3363	Fetch items
3364	Parse a JSON - formatted JSON string .
3365	Filter message by chats .
3366	Retrieve a list of updates .
3367	Fetch all articles of a group
3368	Add metadata to metadata
3369	Parse an email .
3370	Fetch data from remote server
3371	Fetch an article
3372	Fetch data from remote server .
3373	Fetch data from the archive
3374	Create http session .
3375	Setup the rate limit handler .
3376	Sleep for rate limiting .
3377	Update the rate limit .
3378	Parse a Supybot log file .
3379	Retrieve all archives from a given date .
3380	List all files in the directory
3381	Parse the stream .
3382	Parse a SUPYER timestamp .
3383	Parse a SUPY message .
3384	Fetch topics for a given topic .
3385	Parse the topics page .
3386	Fetches a topic
3387	Get a post .
3388	Fetch all tasks of a given category .
3389	Parse the output of a task .
3390	Parse a raw json string
3391	Iterate over all tasks in a given date .
3392	Retrieve transactions for a list of pids .
3393	List users
3394	Get a list of phids .
3395	Make a request to the API
3396	Return metadata id for metadata
3397	Parse the contents of a JSON file .
3398	Fetches the contents of the repository .
3399	Retrieve historical content for a given content .
3400	Parse the result .
3401	Get the capabilities URL for a service .
3402	Read XML from a URL .
3403	Read a string from a string .
3404	Parse the result of MeasurementTimes .
3405	Build the URL for the request .
3406	Get the elements of a complex type .
3407	Construct a JSON Schema from a list of elements .
3408	Builds the URL for a service type .
3409	Run complex input with complex input
3410	Retrieve movie list .
3411	Retrieve TV list .
3412	Retrieve a list of movies .
3413	Retrieve information about a service .
3414	Retrieve alternative titles .
3415	Retrieve a list of credits .
3416	Retrieve the list of external ids .
3417	Retrieve a list of keywords .
3418	Retrieve recommendations .
3419	Gets release dates .
3420	Retrieve a list of releases .
3421	Retrieve translations for a user .
3422	List similar movies .
3423	Retrieve reviews .
3424	Retrieve changes .
3425	Retrieve the upcoming schedule .
3426	List currently playing .
3427	Retrieve a list of popular topics .
3428	Retrieve a list of top ranked items .
3429	Retrieve account states .
3430	Update a rating .
3431	Retrieve movie credits .
3432	Retrieve a list of tv credits .
3433	Retrieve information about a credit id .
3434	Retrieve TV TV .
3435	Retrieve information about the server .
3436	List movies .
3437	Retrieve information about this session .
3438	List movie movies .
3439	Creates a new token
3440	Validate the token validity .
3441	Create a new session .
3442	Creates a new virtual machine session .
3443	Gets a list of rated movies .
3444	Gets the status of an item .
3445	Create a list .
3446	Remove a media item .
3447	Clear a list of sessions .
3448	Retrieve a list of content ratings .
3449	Retrieve similar IDs .
3450	Retrieve information on the vehicle .
3451	Retrieve information about a season .
3452	Retrieve the credits for a series .
3453	Retrieve all external ids .
3454	Retrieve information about a season .
3455	Retrieve credits for a season .
3456	Retrieve all external ids .
3457	Set the attributes from the response
3458	Retrieve a movie .
3459	Retrieve a collection .
3460	Retrieve TV TV .
3461	Retrieve a person .
3462	Retrieve company details .
3463	Retrieve a single keyword .
3464	Perform a GET request .
3465	Normalize a string .
3466	Given a list of refs return a tuple of n - grams .
3467	Take a ref set and return a tuple .
3468	Evaluate the error function .
3469	Align two texts .
3470	r Get all descriptors in a module .
3471	Register a JSON string .
3472	r Register a descriptor .
3473	Prints a string to the progress bar .
3474	r Check if a descriptor is a subclass .
3475	Convert to JSON .
3476	The coordinate of this descriptor .
3477	r Calculate the atomic angle of a sphere .
3478	r Return a list of surface area .
3479	r Create a molecule from a molecule .
3480	Create a descriptor from a JSON object .
3481	r Fill missing values .
3482	r Drop missing values .
3483	r Iterate over the values of the dictionary .
3484	r Convert to a dictionary .
3485	r Return the name of the field .
3486	Logs a function and returns its result .
3487	Synchronize a function .
3488	Print a progress message .
3489	Prints a message .
3490	Print an error message .
3491	Get a temporary file
3492	Set a temporary file .
3493	Delete temporary files .
3494	Get a fixed path
3495	Returns a list of legal parameters for a given method .
3496	Merge options for a given method .
3497	Add command line options .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Wait for all workers to finish .
3501	Called when the task is processed .
3502	Read S3 keys from environment
3503	Read S3 keys from command line
3504	Read S3 keys from S3 .
3505	Initialize S3 keys
3506	Connect to S3 .
3507	List all S3 buckets .
3508	Walks an S3 directory
3509	Walks a local directory tree .
3510	Expand a source to a list .
3511	Upload a single file to the pool .
3512	Put files into a directory .
3513	Create a bucket .
3514	Update the permissions of an object .
3515	Print files in S3
3516	Download a single file from S3 .
3517	Download files from S3 .
3518	Copy a single file to the target pool .
3519	Copy files from source to target .
3520	Delete files from S3
3521	Recursively walk a directory tree .
3522	Copy files from source to destination .
3523	Return the hash of a file .
3524	Get the md5 hash of the file .
3525	Creates a directory structure .
3526	Check if a remote key exists
3527	Return True if path matches filter_path
3528	Perform a walk on S3 .
3529	Add a file - like object to the result .
3530	Get the privilege of a file .
3531	Lookup an object .
3532	Read a chunk from a file .
3533	Upload a file to S3 .
3534	Verify that the file size is consistent .
3535	Write a chunk to a file .
3536	Copy a file to S3
3537	Run command .
3538	Validate a format string .
3539	Print a list of objects .
3540	List all S3 buckets
3541	Create mb bucket .
3542	Upload files to S3
3543	Handle GET requests .
3544	Print files
3545	Handle dsync command .
3546	Execute cp command .
3547	Copy files from S3
3548	Delete files from S3 handler
3549	S3 handler .
3550	Handler for sizes .
3551	Attempts to match a date .
3552	Match the time of a string .
3553	Match a value in a string .
3554	Validate a dictionary .
3555	Discover all connected devices .
3556	Create a multicast socket .
3557	Get data from RabbitMQ .
3558	Push data to the device .
3559	Generate an AES key .
3560	Handle an exception .
3561	Add a rollbar .
3562	Ensure log handler exists
3563	Get the request for the request .
3564	Initialize the rollbar .
3565	Decorator to wrap a function into a function .
3566	Report a message to Rollbar .
3567	Search for items .
3568	Create a log file .
3569	Build person data .
3570	Add the context data to the lambda context .
3571	Add request data to rollbar .
3572	Checks if there is no local local variables .
3573	Builds the request data .
3574	Build server data .
3575	Build a payload from a dictionary .
3576	Run the server .
3577	Compose Chinese characters .
3578	Decomposes a Hangul letter .
3579	Checks if a string has a Hangul letter .
3580	Attach a word to a word .
3581	Checks if an exception is inside an exception handler .
3582	Check if a node is inside a lambda function .
3583	Get all elements of a node .
3584	Check if a node is inside an exception .
3585	Checks if the given node is a superclass .
3586	Return True if node is an error .
3587	Check if a node is a default argument .
3588	Return True if the given node is a function decorator .
3589	Check whether the given node is an ancestor .
3590	Return the parent of the given node .
3591	Decorator to store a check_messages .
3592	Collect all fields from a string .
3593	Get an argument from a call node .
3594	Check if the given node is inherit from stdout .
3595	Check if an error occurred .
3596	Check if a function is decorated with a property decorator .
3597	Check if a function is decorated with the given qnames .
3598	Find the first catch handler and return it .
3599	Return True if the given node is a fallback block .
3600	Find exception handlers for an exception .
3601	Whether the given node is ignored .
3602	Check if the given node is abstract .
3603	Infer a node from a node .
3604	Return the type of a node .
3605	Check if a function is registered in a singletonispatch function .
3606	Check whether the postponed evaluation is enabled .
3607	Return a list of qualified names .
3608	Get the absolute name of a module .
3609	Return a string representation of a tree .
3610	Creates a dependency graph
3611	Visit an import node .
3612	Visit an import from a node .
3613	Check the position of the import node .
3614	Record an import node .
3615	Check that the import - order is correct .
3616	Check whether a relative import is relative or not .
3617	Add imported module .
3618	Check if a module is deprecated .
3619	Add a message to the list of preferred modules .
3620	Report external dependencies .
3621	Return a dictionary of dependencies that should be imported .
3622	Get default options .
3623	Insert default options .
3624	Returns True if the node is visible .
3625	Get callbacks for a node .
3626	Visit a node .
3627	Check that all messages are consistent .
3628	Check if call is valid .
3629	Check whether a datetime is valid .
3630	Check whether the mode argument is valid .
3631	Handle a message .
3632	Prints the messages to the screen .
3633	Get the title of a node .
3634	Set default options .
3635	Show whether the given node is enabled .
3636	Add class to classdiagram .
3637	Get the ancestors of a node .
3638	Get all nodes of a class .
3639	Extract all classes from a node .
3640	Leave the project and classdiagram .
3641	Add import from pkgdiagram
3642	Create a classdiagram for the given class .
3643	Generate diagram diagrams for the linker .
3644	Check if an owner is ignored .
3645	Return a list of unique names for the given attribute .
3646	Return True if the node has no member .
3647	Check if a node has a parent of the given type .
3648	Check if a variable is used as a variable .
3649	Check whether a variable is not a context variable .
3650	Visit the attributes of an attribute .
3651	Visit a function .
3652	Make sure that a callable is callable .
3653	Check for unary op .
3654	Iterate over the interfaces of a node .
3655	Create a project from a list of files .
3656	Generate a package node .
3657	Initialize a function definition .
3658	Visit node names .
3659	Handle assignattr type .
3660	Visit imported modules .
3661	Visit imported modules .
3662	Compute the module for a module .
3663	Handle imported module .
3664	Return the ANSI escape codes for the given color .
3665	Colorize a message .
3666	Register a reporter .
3667	Handle a message .
3668	Display the given layout .
3669	Handle a message .
3670	Write a graph .
3671	Create a node .
3672	Write an edge between two nodes .
3673	Check that a new format string is valid .
3674	Process a non - raw string token .
3675	Write a layout .
3676	Write an evaluation section .
3677	Render a table .
3678	Generate a table .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Check if a symbol is valid .
3683	Raise an InvalidMessageError if the symbol does not exist .
3684	Raise an InvalidMessageError if invalid .
3685	Get the message definitions for a message or symbol .
3686	Get the display string for a message .
3687	Print a help message
3688	List all registered messages .
3689	Initialize pylint .
3690	Return the number of CPU cores .
3691	Create a report of the messages in the section .
3692	Context manager to fix import path .
3693	Load plugin modules .
3694	Load plugin configuration
3695	Set an option .
3696	Register a checker .
3697	Disable all reports .
3698	Enable Python 3 .
3699	Return a list of checkers .
3700	Returns a list of all checker names .
3701	Prepare a list of checkers .
3702	Expand modules in modules .
3703	Set the current module .
3704	Check whether an AST node is valid .
3705	Report the evaluation .
3706	Handle a help message .
3707	Print full documentation .
3708	List all messages
3709	List all checker groups
3710	Normalize text .
3711	Return the module and frame id for the given node .
3712	Try to decode a line .
3713	Return True if the base name matches the given base name .
3714	Register plugins in a directory .
3715	Comment a string .
3716	Format an option value
3717	Format a section .
3718	Format a list of options .
3719	Insert a child element .
3720	Append a child to this VNode .
3721	All parents of this node .
3722	Format the given layout .
3723	Compute the content of a table .
3724	Generate the content for the given layout .
3725	Collect block lines from a module .
3726	Handle an ignored message .
3727	Register a report .
3728	Creates a report section
3729	Add stats to the stats dictionary .
3730	Return the name of the setters property .
3731	Get the property of the setters property
3732	Return True if the return node is a constant .
3733	Return a list of exception types for the given node .
3734	Processes a module .
3735	Process a module .
3736	Process comments .
3737	Determine if a module is from a future import .
3738	Return True if the given statement is in the given statement .
3739	Return the overridden method .
3740	Get extra info for unpacking extra info .
3741	Detect global scope .
3742	Returns True if the given name_node is not assigned .
3743	Mark a node as consumed .
3744	Handle global variables .
3745	Ignore a class scope .
3746	Check if a node has a homonym .
3747	Check for unbalanced tuples .
3748	Check for metaclasses .
3749	List all packages in a directory .
3750	Install packages .
3751	Run install_lib .
3752	Report the similarity between two stats .
3753	Run the program .
3754	Append a stream to the end of the stream .
3755	Compute a list of sims .
3756	Prints sims .
3757	Find common lines between two lines .
3758	Iterate over each line in each line .
3759	Generate an iterator over the stripped lines .
3760	Create a dictionary of index numbers .
3761	Return True if the definition is equivalent to the call .
3762	Checks if an attribute is equal .
3763	Return True if the original parameter has different values .
3764	Determine whether two parameters are different .
3765	Infer a call result from a node .
3766	Set the scope of the given node .
3767	Check if a class definition is valid .
3768	Check if a node is consistent .
3769	Check that all bases are valid .
3770	Validate a function definition .
3771	Checks if the super delegates to a function .
3772	Leave a function definition .
3773	Check that the given node is in slots .
3774	Check if a name is valid .
3775	Check that all accesses are accessed .
3776	Ensure all abstract methods are abstracted .
3777	Check the signature of a method .
3778	Checks whether the given node is a method parameter .
3779	Return True if the body is a raising an exception .
3780	Add bad exception context .
3781	Visit a function definition .
3782	Display a layout .
3783	Return True if node is a typing namedtuple .
3784	Check if node is an enum class .
3785	Return True if the given node is a valid dataclass .
3786	Initialize the graph .
3787	Check if a class definition is too large .
3788	Leave a class definition
3789	Visit an IF node .
3790	Check the number of booleans .
3791	Check the docstring for validity .
3792	Convert a template to a template
3793	Return True if the token is a trailing commaset .
3794	Check if the given node is an actual elif
3795	Check if a node is simplified .
3796	Check if a stop iteration is inside a generator .
3797	Check if an exception is inherited from the stopiteration .
3798	Check that the next iteration is raised .
3799	Check for nested blocks .
3800	Return a dictionary of types that areinstance types .
3801	Check whether there is an intersection between two instances .
3802	Checks the comparison of two strings .
3803	Checks if a node is an AND or not
3804	Check that the return statements are consistent .
3805	Check if a return node is ended .
3806	Check for loops for loops .
3807	Check if graphviz is available .
3808	Run the project .
3809	Write packages in graph .
3810	Write all classes in diagram .
3811	Set the printer .
3812	Set the printer to a file .
3813	Return True if this message can be emitted .
3814	Formats a help message .
3815	Get environment variables .
3816	Lint a file .
3817	Run a Python command .
3818	Get a list of nodes from the graph .
3819	Get the source code .
3820	Generate the graph
3821	Format a section .
3822	Register a managed message .
3823	Disable a message .
3824	Enable a message .
3825	Get the symbol symbol for a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Print the full documentation for the current checker .
3829	Print the documentation for a checker .
3830	Get indent length .
3831	Generate a line for indentation .
3832	Return the indentation of a token .
3833	Handle a line start .
3834	Get valid indentations .
3835	Handle hanging indentation .
3836	Return a continuation for a given bracket .
3837	Push a token onto the stack .
3838	Add a new line .
3839	Check if keyword is in parentheses .
3840	Return True if there is a valid type annotation .
3841	Check for equality spaces .
3842	Check that the token is surrounded by spaces .
3843	Visit a default node .
3844	Check if multiple statements are valid .
3845	Check if lines are valid .
3846	Check the indentation level .
3847	Check if a node is in an iterable .
3848	Is a conditional import statement?
3849	Visit a name .
3850	Visit a subscript node .
3851	Visit an attribute .
3852	Visit an exception handler .
3853	Check if an exception is raised .
3854	Find the path to the pylintrc file .
3855	Validate a value .
3856	Expand default tag with default tag .
3857	Match a long option .
3858	Register an option provider .
3859	Set provider options
3860	Set the value of an option .
3861	Generate a configuration file .
3862	Load the config file
3863	Load command line options .
3864	Add a help section .
3865	Display the help of the command .
3866	Load default values for all options
3867	Return the name of an option .
3868	Get the definition of an option .
3869	Return a list of options grouped by section .
3870	Check if a function is a method call .
3871	Return True if node is a complex format string .
3872	Initialize a module .
3873	Visit an import from a module .
3874	Visit a module .
3875	Check if a call is valid .
3876	Check format string .
3877	Check if a node is in a loop .
3878	Get the parent node of a break node .
3879	Check if the loop exits early .
3880	Get a set of properties and names of properties .
3881	Determine the name of a function .
3882	Create a report for the given type stats .
3883	Check if a node is redefined .
3884	Checks if a call is only one argument .
3885	Check whether a starred statement is assigned to a role .
3886	Check for nonlocal and global variables .
3887	Check if call is abstract .
3888	Add a warning message to the loop .
3889	Check if a node is in a loop .
3890	Initialize the linter .
3891	Check if expr is valid .
3892	Check if a function is valid .
3893	Add assert on failure .
3894	Handle duplicates .
3895	Check if a node is unreachable .
3896	Check if the given node is not in the same body .
3897	Ensure that the given call is valid .
3898	Check whether the given node is valid .
3899	Check whether a name is valid .
3900	Check if the docstring is valid .
3901	Check if a literal is a valid expression .
3902	Create a subgraph .
3903	Parse a subgraph .
3904	Visit a module tree .
3905	Add a checker to the checker .
3906	Recursively walk the AST tree .
3907	Add a relationship between two objects .
3908	Get a relationship for a given object .
3909	Get the attributes of a node .
3910	Return a list of all methods in a node .
3911	Add an object to the graph .
3912	Return a list of class names .
3913	List of classes .
3914	Get class by name .
3915	List of modules .
3916	Get a module by name .
3917	Get a module by name .
3918	Add a node from a module .
3919	Delete the grant .
3920	Wrapper for query .
3921	Get user by username and password .
3922	Get an item from the database .
3923	Set a token .
3924	Set a grant grant
3925	Get a single client
3926	Prepare a request .
3927	Initialize the app .
3928	Creates a remote app .
3929	Make a request .
3930	Create a new OAuth2 token .
3931	Handle OAuth1 response .
3932	Handle OAuth2 response .
3933	Handle an authorized response .
3934	Decorator for authorized_response handler .
3935	Hash a token .
3936	Create a client from a token .
3937	Create an OAuth session .
3938	Context manager for insecure transport .
3939	Confirm an authorization request .
3940	Decorator for request token handler .
3941	Get client secret .
3942	Get the secret of a request token .
3943	Get the access token for a request .
3944	Get default realms for client .
3945	Get the realms of a request .
3946	Get the redirect uri for a request .
3947	Get the RSA key for a request .
3948	Validate client key .
3949	Validate request token .
3950	Validate an access token .
3951	Validate a timestamp and return True if it exists .
3952	Validate a redirect_uri .
3953	Validate realms .
3954	Validate a verifier .
3955	Verify a request token .
3956	Verify a request token .
3957	Save an access token .
3958	Save request token .
3959	Save a verifier .
3960	Return the error URI for the user .
3961	Confirm an authorization request .
3962	Verify a request .
3963	Get client credentials from request .
3964	Check if client authentication is required .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the scope of a refresh token .
3968	Confirm a refresh token .
3969	Get default redirect uri .
3970	Get the default scopes for a client .
3971	Invalidate an authorization code for a client .
3972	Save an authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate a grant code .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate scopes .
3981	Validate user credentials .
3982	Revoke a token .
3983	Update request data .
3984	Convert dictionary keys to strings
3985	Change the Authorization header .
3986	Register a user to a remote server .
3987	Create a remote app
3988	Extract the parameters from the request .
3989	Convert text to bytes
3990	Decode a base64 string .
3991	Create a new Response object
3992	Return a list of cached clients .
3993	Add a remote app .
3994	Add a new remote app .
3995	Try to check the certificate .
3996	Checks if the process is successful .
3997	Load private key .
3998	Check if the private key is invalid .
3999	Try to load a private private key from a file .
4000	Check if a CRL has been revoked
4001	Check to see if revocation revoked expired .
4002	Create a new X509 certificate .
4003	Create a new certificate .
4004	Convert a function to a list of functions .
4005	Load a certificate from a certificate .
4006	Set the password callback .
4007	Use a certificate chain .
4008	Use a certificate file .
4009	Use a certificate .
4010	Add an extra certificate .
4011	Use a private key file .
4012	Use a private key .
4013	Load a client certificate .
4014	Set SSL verification depth .
4015	Load a temporary dh file .
4016	Set the cipher list .
4017	Sets a list of client certificates .
4018	Add a client CA to the current context .
4019	Set the callback function for the TLS server .
4020	Sets TLS .
4021	Sets the callback for the next NPN device .
4022	Set the alpn protocols .
4023	Sets the callback for the certificate .
4024	Set the OCSP callback .
4025	Sets an OCSP server callback .
4026	Sets an OCSP client callback .
4027	Set SSL context .
4028	Get the name of the SSL server .
4029	Set the host name for the TLS server .
4030	Receive data from the socket .
4031	Receive bytes from the socket .
4032	Read bytes from a BIO connection .
4033	Negotiate the connection .
4034	Shutdown the connection .
4035	Returns a list of encrypted cipher names .
4036	Get client certificates .
4037	Sets the shutdown state .
4038	Get a random character from the server .
4039	Get a random character from the server .
4040	Get the master key .
4041	Export a keying material .
4042	Get a session .
4043	Get the name of the cipher .
4044	Get the current cipher bits .
4045	Get the current SSL cipher version .
4046	Get the version of the SSL protocol .
4047	Gets the next available protocol .
4048	Set the alpn protocols .
4049	Get the negotiated ALPN protocol .
4050	Create a new memory buffer .
4051	Convert a BIO object to a string .
4052	Set ASN time .
4053	Convert timestamp to ASN .
4054	Get a curve by name .
4055	Dump a public key .
4056	Load a public key from a buffer .
4057	Sign data .
4058	Verify a signature .
4059	Dump a CRL into a string .
4060	Converts the key to a cryptography key .
4061	Generate a new RSA key .
4062	Check if the key is valid .
4063	Load the elliptic curves .
4064	Get the elliptic curves
4065	Convert this curve to an EC2 key .
4066	Derive the name of the certificate .
4067	Get the name of the certificate .
4068	Get the short name of the certificate .
4069	Get the data for this certificate .
4070	Convert this certificate to a cryptography .
4071	Set the public key .
4072	Get the public key .
4073	Get the Subject Name of this certificate .
4074	Add extensions to the current request .
4075	Returns a list of all the supported extensions .
4076	Verify a certificate .
4077	Convert this certificate to a cryptography .
4078	Set the version of the certificate .
4079	Get the public key .
4080	Set the public key .
4081	Sign a PKey with the given digest .
4082	Get the signature of the certificate .
4083	Return the signature of the certificate .
4084	Set the serial number .
4085	Get the serial number of this certificate .
4086	Calculate the amount of days after a given amount .
4087	Calculate the amount of days after a given amount .
4088	Returns True if the user has expired .
4089	Get the issuer name .
4090	Set the issuer name .
4091	Get the subject name associated with this certificate .
4092	Set the subject for this certificate .
4093	Add multiple extensions to this certificate .
4094	Get an X509Extension by index .
4095	Add a certificate to the store .
4096	Add a crl .
4097	Set the time of the certificate .
4098	Initialize the certificate .
4099	Get an exception from the store context .
4100	Verify the certificate .
4101	Set the serial number .
4102	Get the serial number of the certificate .
4103	Set the reason for this certificate .
4104	Get the reason of the certificate .
4105	Set the revocation date of this certificate .
4106	Convert this certificate to a cryptography library .
4107	Returns a tuple of revoked certificates .
4108	Get the issuer for this certificate .
4109	Sign a digest with the given digest .
4110	Export a certificate to a PEM .
4111	Get the type name of the object .
4112	Set certificates .
4113	Exports the certificate .
4114	Sign a signature .
4115	Verify a key .
4116	Encode the SPKI .
4117	Get the public key .
4118	Set the public key .
4119	Create an exception from the error queue .
4120	Convert obj to bytes .
4121	Creates a function that prints a token .
4122	Get service metadata .
4123	Iterate over all boards .
4124	Get the annotations for a card .
4125	List all boards .
4126	Get list of open lists .
4127	Get list of open cards .
4128	Get comments for a given card .
4129	Build the API URL for the given path .
4130	Wrapper for getter
4131	Convert a link to a dictionary .
4132	Get all issues for a query
4133	Get pull requests for a given tag
4134	Aggregate issues .
4135	Get a configuration option from the main section .
4136	Return a dictionary of all templates for the task .
4137	Validate the service configuration .
4138	Return True if the issue should be included .
4139	Make a table from a grid
4140	Run an ORacle command .
4141	Return an integer or None if it doesn t exist .
4142	Pull a bugwarrior .
4143	Get data from url
4144	Get collection collection
4145	Find the unique UUID for a task .
4146	Merge a single field from local_task into one .
4147	Build UUIDs override config overrides .
4148	Parse a sprint string .
4149	Get the credentials for the user .
4150	Combine multiple sequences .
4151	Calculate pvalues for each gene
4152	Calculate the confidence interval of pvalues .
4153	Calculate zscore of data .
4154	Plot a dataframe .
4155	Adjust a list of spines .
4156	Prepare the command line parser .
4157	Add a command line parser to subparsers .
4158	Add a command line parser to subparsers .
4159	Add a parser to the Enrichr API .
4160	Compute enrichment score .
4161	Rank a ranking metric .
4162	Calculate the rank of a DataFrame .
4163	calculate the pval value of an expression
4164	Calculate the significance score .
4165	Returns a pandas Series with the names and descriptions .
4166	Retrieve datasets
4167	Returns a pandas DataFrame with the attributes of the dataset .
4168	Get filters for a dataset .
4169	Query the BioMart database .
4170	Run GSEA analysis .
4171	Run single sample GSEA
4172	Run prerank on genes
4173	Replots a graph from GSEA .
4174	Set the number of cores .
4175	Load gene sets .
4176	Get list of available libraries
4177	Download and generate gene sets .
4178	Generate heatmat
4179	Saves results to zipfile
4180	Load gene expression data
4181	Run GSEA .
4182	Run GSEA .
4183	Run samples permu
4184	Run the enrichment score on a dataframe .
4185	Save results on GSEA .
4186	Run GSEA
4187	Enrich a set of genes
4188	Parse gene sets
4189	Parse gene_list .
4190	Send a list of genes to the server .
4191	Check if gene list contains genes .
4192	Get the set of background genes .
4193	Run Enrichr .
4194	Create a cube .
4195	Generate an icosphere filter .
4196	Generate a torus filter .
4197	Plot a 3D plot of a plane .
4198	Plots a cube script .
4199	Return color values for a given color .
4200	Check if a variable is a list
4201	Make a list of variables
4202	write a filter to a script
4203	Run LS3 loop .
4204	Merge two vertices .
4205	Close holes .
4206	Split vertices on non - Manifold faces .
4207	Snapshot mismatched borders filter .
4208	Translate a string .
4209	Rotate a script .
4210	Scale a script .
4211	Function to create a function for a cylindrical function .
4212	Wrap a cylindrical script .
4213	Make a bend to a string .
4214	Transform a script to a curve .
4215	Convert a latex script to a tex file .
4216	Convert a mesh to a face .
4217	Run uniform resampling script
4218	Generate a ScreenedImage from a Python script .
4219	Run a voronoi script .
4220	Create a filter for all faces .
4221	Create a filter for vertex quality .
4222	Add a face function to the script .
4223	Add a vertex function to the script .
4224	Plot a cylindrical script .
4225	Places a sphere .
4226	Joins a script .
4227	Rename a layer .
4228	Change the current layer .
4229	Duplicate a single layer .
4230	Delete a lower layer .
4231	Handle an error .
4232	Initialize a temporary file .
4233	Add a label to the stack .
4234	Remove a layer from the stack .
4235	Save filters to a script file .
4236	Run a script .
4237	Create a circle .
4238	Calculate Hausdorff distance
4239	Generate a Poisson disk .
4240	Create a mesh element .
4241	Run clustering .
4242	Create a flat plane filter
4243	Generate a filter for a single triangle
4244	Generate a voronoi filter
4245	Measure topological measures .
4246	Parse the topology log file
4247	Parse Hausdorff file .
4248	Generate a filter function
4249	Create a Voronoi filter .
4250	Generate a cycle from a script .
4251	Convert x y x y x y x y x y x y x y x y x y x y x y x y x y x y x y x y x x y x x y x y x x y x x x y x y x x y x x x y x y x y x x y x x x y x x x x y x x x x x y x y x x y x x y x x y x y x y x x x y x y x y x x y x x y x y x y x y x y x y x y x y x y x y x
4252	Cross product of two vectors .
4253	Multiply a scalar .
4254	Define a new vertex attribute .
4255	Flip a filter .
4256	Create a filter for point sets .
4257	Run taubin script .
4258	Generate a depth filter .
4259	Sort a polylines file .
4260	Measure topology .
4261	Measure all the geometry of a file .
4262	Measure dimension .
4263	Lowercase extension .
4264	Patch request class .
4265	Get the config for a set .
4266	Configure uploads
4267	Get the configuration for this upload set .
4268	Return the URL for the uploaded file .
4269	Return the path to a file .
4270	Check if an extension is allowed .
4271	Resolve a conflict with a basename .
4272	Get version info from a file .
4273	Remove duplicates .
4274	Get the difference between two objects .
4275	Format object counts .
4276	Trace memory usage .
4277	List of code events .
4278	Return the overhead of the object .
4279	Compute the memory overhead .
4280	Profile the package .
4281	Profile module .
4282	Profile function .
4283	Run the simulation .
4284	Get a set of modules for a package .
4285	Run a function in a separate process .
4286	Get the type of a run object
4287	Initialize the module
4288	Initialize the package .
4289	Initialize a function .
4290	Replace sys . argv with the run object .
4291	Sample a signal .
4292	Insert a stack into the stack .
4293	Fill the sample count for each node
4294	Convert a tree to a dictionary .
4295	Return a dictionary representation of the call tree .
4296	Profile package .
4297	Profile module .
4298	Profile the function .
4299	Convert profiler stats to a sorted list .
4300	Profile the package .
4301	Profile module .
4302	Profile function .
4303	Initialize the database .
4304	Show guestbook .
4305	Add a new entry .
4306	Handler for profiling .
4307	Start the HTTP server .
4308	Handle root HTML .
4309	Handle other files .
4310	Handle GET request .
4311	Do a POST request .
4312	Send a response .
4313	Check if module_path is valid .
4314	Record a line .
4315	Yield lines without stdlib .
4316	Update the heatmap .
4317	Skip lines with skip_map .
4318	Profile the package .
4319	Format a heatmap file .
4320	Profile module .
4321	Profile function .
4322	Run profiler .
4323	Run a function .
4324	Predict probabilities for X .
4325	Predict log probabilities .
4326	Fit the model .
4327	Count documents in analyzed_docs .
4328	Sort vocabulary .
4329	Limit the features in the corpus .
4330	Fit the model to the dataset .
4331	Transform a matrix .
4332	Convert to Scikit .
4333	Fit the model .
4334	Predict on X .
4335	Fit the regression to the model .
4336	Fit the model
4337	Fit the model to Z
4338	Compute the score of the model .
4339	Fit the model to the estimator .
4340	Return the score of the estimator .
4341	Fit the k - means clustering .
4342	Predict on X .
4343	Predict classifier .
4344	Check whether an RDD is acceptable .
4345	Fit the model .
4346	Fit the model .
4347	Fit the model to SVD
4348	Apply the transform to the sparse SVD .
4349	Generator for block collections .
4350	Block an iterator over blocks .
4351	Convert an RDD into a BlockRDD .
4352	Apply a function to the RDD .
4353	Shape of this RDD .
4354	Convert the RDD to a numpy array .
4355	Apply a function to each column .
4356	Return the bitperm of a stat
4357	Return True if the path is only a root writeable .
4358	Check the configuration file .
4359	Read configuration from file .
4360	Run a command as a command .
4361	Execute a command .
4362	Execute a command over SSH .
4363	Validate the content of the device .
4364	Returns a dictionary of headers
4365	Get the body of the response
4366	Get the URL for the device .
4367	Get the URL for the webhook .
4368	Return the text of a packet .
4369	Print discovery information .
4370	List devices .
4371	Execute the device .
4372	Send confirmation on device .
4373	Execute the push command .
4374	Execute a device .
4375	Run scan on device .
4376	Convert a transaction to a Transaction object .
4377	Find the file path to the ledger .
4378	Install compatibility .
4379	Get the long description of the README . md file .
4380	Create a precalculatedTextMeasurer from a JSON file .
4381	Return the default text measurer .
4382	Generate a badge .
4383	Generate all supported Unicode characters .
4384	Generate an iterable of unicode characters .
4385	Calculate a mapping between characters .
4386	Write a JSON file to a JSON file .
4387	Convert a 2D image to a 2D image .
4388	Generate a Gaussian kernel .
4389	Convert an image to grayscale .
4390	Run pyssim .
4391	Calculate the SIM value between two images .
4392	Compute the SSIM between two images .
4393	Destroy the container .
4394	Change the version of the code .
4395	Get the status of the node .
4396	Print the status of the server .
4397	Convert a connection to a node .
4398	Try to bind to the server .
4399	Called when a new connection is received .
4400	Handle an incoming message .
4401	Helper function to send a command .
4402	Return True if the given node should be connected to this node .
4403	Connect to a node .
4404	Called when a connection is received .
4405	Handle an outgoing message .
4406	Called when a connection is disconnected .
4407	Add a node to the pool .
4408	Drop a node from the pool .
4409	Send a message to a node .
4410	Destroy the connection .
4411	Put an item into the queue .
4412	Put an item into the queue .
4413	Get an item from the queue .
4414	Attempt to acquire a lock .
4415	Determines if the lock is acquired .
4416	Release a lock .
4417	Decorator to check a function .
4418	Decorator to ensure that a view is required .
4419	Set the connections for the given hosts .
4420	Create an Elasticsearch index .
4421	Migrate index indexes .
4422	Remove metadata from a report .
4423	Save aggregate reports to Kafka .
4424	Extract XML from file .
4425	Parse an aggregate report file
4426	Convert a report to a CSV file .
4427	Parse an aggregate report file .
4428	Return a list of supported IMAP capabilities .
4429	Save the results to a CSV file .
4430	Generate a zip file for the given results .
4431	Email report results to mail .
4432	Save aggregate reports to Splunk
4433	Save crimes to Splunk .
4434	Decode a string .
4435	Get the base domain for a given domain .
4436	Get the reverse of a DNS domain .
4437	Convert a human readable timestamp to a datetime .
4438	Download an IP address .
4439	Get information about an IP address .
4440	Convert an email message .
4441	Convert a string to a list .
4442	Parse a report file .
4443	Drain the pool .
4444	Publish a message .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from the server .
4449	Send a ping request .
4450	Select the next server .
4451	Process an error message .
4452	Handle an op error .
4453	Create a connection to the server .
4454	Process a single pong .
4455	Process a message .
4456	Process the connection info .
4457	Process a connection from the server .
4458	Flush all pending data .
4459	Read the read loop .
4460	Activate a dataset
4461	Decode images .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Compute the Pearson correlation .
4465	dot product of images
4466	Select features based on feature selection .
4467	Get studies by masks .
4468	Get a list of features in a dataset .
4469	Classify a dataset .
4470	Classifier function .
4471	Fit the model .
4472	Set class weights
4473	Cross validation .
4474	Fit a dataset .
4475	Average images within a given region .
4476	Get random voxels .
4477	Get top words from model .
4478	Calculate Pearson correlation coefficient .
4479	Calculate the FDR of a distribution .
4480	Load activations from file .
4481	Create the image table
4482	Get a list of ids for the given features .
4483	Add a list of features .
4484	Get feature names .
4485	Returns a dictionary of feature names .
4486	Load a dataset from a pickle file .
4487	Save this feature to a file .
4488	Retrieve data from the dataset .
4489	Get the feature data from the dataset .
4490	Return a list of names for the given features .
4491	Get a list of indices for the given features .
4492	Search for features in the DataFrame .
4493	Get a list of ids by expression .
4494	Convert sparse data to csr matrix
4495	Mark a function as deprecated .
4496	Apply a transformation to a matrix .
4497	Convert xyz coordinates to matrices .
4498	Apply a transformation to a coordinate .
4499	Mask an image .
4500	Get the mask of the image .
4501	Load images from filenames .
4502	Save an image .
4503	Set logging level .
4504	Expand an address .
4505	Normalize a string .
4506	Parse an address .
4507	Searches for near - duplicates .
4508	Convert a dictionary to a namedtuple .
4509	Get the price for a ticker .
4510	Get a pandas dataframe .
4511	Get bulk news files
4512	Make an HTTP request .
4513	Get the bearer token .
4514	Perform a request .
4515	Get a list of tracks .
4516	Get an artist .
4517	List album albums .
4518	Get the top tracks for a spot .
4519	List of artists related to a spot .
4520	List artists .
4521	Fetch a category .
4522	List playlists for a category .
4523	List categories .
4524	List featured playlists .
4525	Get a list of new releases .
4526	List recommendations .
4527	Fetches a list of artists .
4528	Get album albums .
4529	Get all albums .
4530	Get the total albums for this artist .
4531	List of artists related to this artist .
4532	Return the currently playing track .
4533	Get the current player .
4534	List devices .
4535	List recently played tracks .
4536	Replace multiple tracks .
4537	Reorders a playlist .
4538	Create a playlist .
4539	Get a list of playlists .
4540	Get a list of tracks .
4541	Get all tracks .
4542	Generate OAuth2 URL .
4543	Get an album .
4544	Get an artist .
4545	Get a single track .
4546	Get a user
4547	Get album albums .
4548	Get artists by id .
4549	Search for songs .
4550	Convert a string to an ID .
4551	A decorator that raises an exception if the given attribute exists .
4552	Create an HTTP client from a client .
4553	Generate an OAuth URL .
4554	Return a dictionary of attributes .
4555	Return a string representation of the parameters .
4556	Builds a list of Playlists .
4557	Get all tracks for this playlist .
4558	Resume playback .
4559	Transfer a device to a device .
4560	Get a spotify object from the href .
4561	Retrieves the log data .
4562	Convert or short month to short_month .
4563	Recursively update code URLs .
4564	Check if version is greater than the current version
4565	Check if git branch is a dev version
4566	Checks if the current version is deprecation
4567	Backup the configuration file .
4568	Restore the backup content .
4569	Check if line is in ignore .
4570	Parse command line options .
4571	Extract the base url from an element .
4572	Convert a string to a string .
4573	Get the access code for this request .
4574	Get the HTTP status .
4575	Check if a domain is valid .
4576	Check if a domain is a subdomain .
4577	Checks if an IP address is valid .
4578	Check if ip is a valid IPv4 range
4579	Validate URL syntax .
4580	Load the configuration file .
4581	Display a message to be safe .
4582	Download URL download .
4583	Get the URL for the entry management .
4584	Print the header .
4585	Process a file decision .
4586	Display a domain .
4587	Print URL to file .
4588	Print the logo .
4589	Convert a domain into a string .
4590	Extract the domain from a file .
4591	Return a list of filenames .
4592	Return a list of file URLs .
4593	Switch the state of a variable .
4594	Get the status of the user .
4595	Generate a status file .
4596	Get the structure for the build
4597	Create directory .
4598	Delete all entries in the directory .
4599	Set the path to the config file .
4600	Load the configuration file .
4601	Install the production config .
4602	Install IANA config .
4603	Install PSL config file .
4604	Install directory structure file .
4605	Merge upstream configuration values .
4606	Load the configuration from the configuration file .
4607	Split a version string into a tuple .
4608	Check if the version is newer than upstream .
4609	Check if the project is cloned .
4610	Handle invalid index .
4611	Return the directory of the analysis host .
4612	Generate a unified file
4613	Display status file .
4614	Return True if the domain is not present .
4615	Populate the list of extensions .
4616	Load the database from disk .
4617	Convert an element to a regular expression .
4618	Convert an element into a hierarchical structure .
4619	Load the database if necessary .
4620	Return the referer for the given extension .
4621	Yield the URLs for the URLs in the URL .
4622	Update the database .
4623	Mine the history of this request .
4624	Retrieve data from the file
4625	Save the file to JSON
4626	Add multiple files to the database .
4627	Remove the file from the cache
4628	Return a list of all files in mine
4629	Processes mining .
4630	Get content from file .
4631	Write content to file .
4632	Log a single record .
4633	Write the expiration date to the log file .
4634	Create a 404 if not found .
4635	Prepare the header for the header
4636	Creates a header
4637	Return the HTTP header
4638	Return a dictionary representation of the data .
4639	Convert a header to a list
4640	Colorify data .
4641	Print the data to JSON .
4642	Return the data as a dictionary .
4643	Save the current state of the object .
4644	Calculate the difference between start and end time .
4645	Format the execution time .
4646	Return a list of files to delete .
4647	Return the list of databases to delete .
4648	Delete all files
4649	Hash a file .
4650	Hash the data
4651	Get a dictionary representation of the hash .
4652	Execute the command .
4653	Remove key from main dict
4654	Rename a key .
4655	Merge two dictionaries .
4656	Write the main dictionary to a JSON file .
4657	Write a yaml file to a yaml file .
4658	Convert a path to a string .
4659	Write data to file .
4660	Read the file .
4661	Return a sorted list of strings
4662	Merge two lists .
4663	Returns a list of elements that match the regular expression .
4664	Return True if the data matches the match .
4665	Replace occurrences with replace_with .
4666	Count the number of tests .
4667	Calculate the percentage .
4668	Log the progress bar .
4669	Check if url is valid
4670	Check if the given domain is valid .
4671	Check if this domain is a valid domain .
4672	Get the status of the test type .
4673	Reformat the historical formating error .
4674	Retrieve the database .
4675	Save the database to the database .
4676	Return the timestamp of the database .
4677	Get the content of the database
4678	Check if the database is present .
4679	Retrieve the info from the user .
4680	Backup the authorization database .
4681	Check if the user is in the database .
4682	Check if the request is older than the current time .
4683	Get the expiration date for this request .
4684	Add a timestamp to the database .
4685	Set Travis permissions for travis
4686	Initialise the Travis build directory .
4687	Perform namespace lookup
4688	Connect to a Whois server .
4689	Get URL status .
4690	Get the referer for this domain
4691	Get the current object for this object .
4692	Return a list of standard paths .
4693	Return a list of package names .
4694	Iterate over unused import lines .
4695	Parse unused import module .
4696	Yield line numbers from imported imports .
4697	Yields a line of imported imported imports .
4698	Iterate over all unused variables .
4699	Generator for duplicate key numbers .
4700	Convert a list of messages into a dictionary .
4701	Check if source is valid .
4702	Extract the package name from a line .
4703	Implement multiline import statement .
4704	Is a multiline statement?
4705	Filter imports from a module .
4706	Break up an import statement .
4707	Filter source code .
4708	Convert a list of messages to a dictionary .
4709	Remove markers from mark_import_import
4710	Remove duplicate key from source line .
4711	Check if a line exists in a line .
4712	Return True if value is a literal or name
4713	Iterate over the lines in the source file .
4714	Filter out useless lines .
4715	Get indentation of a line .
4716	Get the ending of a line .
4717	Replace non - local code .
4718	Split comma separated comma separated string .
4719	Check if filename is a Python file .
4720	Return True if filename is in exclude .
4721	Find files in a directory .
4722	Run autoflake .
4723	Reads the ObtainLeaseResponse payload from a stream .
4724	Write this object to a stream .
4725	Write a CancelRequest payload to the specified stream .
4726	Read a CancelResponse payload from a stream .
4727	Create a new Name .
4728	Read the Digest header from the stream .
4729	Write the digest to the stream .
4730	Create a new Digest key .
4731	Read the application information from the stream .
4732	Write the application data to a stream .
4733	Create an application specific information .
4734	Reads the DerivationParameters from a stream .
4735	Write the Derivation parameters to a file .
4736	Read the getRequest payload from a stream .
4737	Write this request to a stream .
4738	Read a GET response payload from a stream .
4739	Write the payload to a stream .
4740	Read SignatureVerifyRequest payload .
4741	Write the metadata to a stream .
4742	Read SignatureVerifyResponse payload .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Gets the attributes from a managed object .
4747	Get the attribute from a managed object .
4748	Set attributes on a managed object .
4749	Set an attribute on a managed object .
4750	Checks if the given policy is allowed .
4751	Write a decrypted request to a stream .
4752	Create a new secret key .
4753	Set the value of a setting .
4754	Load the server configuration file .
4755	Process a bind parameter .
4756	Return a list of cryptographic usage masks .
4757	Reads a long integer from the stream .
4758	Write the integer to the stream .
4759	Validate that the value is valid .
4760	Reads a big integer .
4761	Write a big integer to the stream .
4762	Validate that the value is valid .
4763	Validate that the value is valid .
4764	Read a boolean value from the stream .
4765	Write a boolean value to the stream .
4766	Write a boolean value to a stream .
4767	Validate that the value is a boolean .
4768	Read interval from the stream .
4769	Validate the interval .
4770	Return a dictionary of key wrapping data .
4771	Set the key wrapping data .
4772	Validate the key value .
4773	Validate that the secret is valid .
4774	Validate that the value is valid .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to an attribute name .
4777	Get a bit mask from an enumeration .
4778	Get a list of enumerations from an enumeration .
4779	Check if an enumeration is a bitmask .
4780	Read a KeyPairRequest from the input buffer .
4781	Write the template to a file .
4782	Read the CreateKeyPairResponse payload .
4783	Write this CreateKeyPair to a file .
4784	Reads the list of attributes from the input buffer .
4785	Write the list of attributes to the output buffer .
4786	Reads the getAttributeList response from the input buffer .
4787	Write this GetAttributeList to a file .
4788	Get a list of JSON files
4789	Scan the policy directory for policies .
4790	Start the monitoring process .
4791	Get a certificate from a connection .
4792	Returns the extended key usage of a certificate .
4793	Returns a list of common names for a certificate .
4794	Get client identity from certificate .
4795	Read create request payload .
4796	Write this CreateRequest to a file .
4797	Read the CreateResponse payload .
4798	Write this CreateResponse payload to the output buffer .
4799	Convert an object into a core key .
4800	Read the EncryptedResponse payload .
4801	Reads the DeriveKey request payload .
4802	Write this Key to a file .
4803	Checks if the given attribute is supported .
4804	Check if an attribute is deprecated .
4805	Returns True if the given attribute is applicable to the given object type .
4806	Check if attribute is multivalued .
4807	Get a valid value from the configuration file .
4808	Read CheckResponse payload .
4809	Write CheckResponse payload to a stream .
4810	Reads the attribute reference .
4811	Write the attribute to the output buffer .
4812	Read the attributes from a stream .
4813	Write the attributes to a stream .
4814	Read a nonce from a stream .
4815	Write a nonce to a stream .
4816	Read username and password credential credential credential credential .
4817	Write the username and password .
4818	Read DeviceCredential credentials from a stream .
4819	Write the device to a stream .
4820	Read credentials from a stream .
4821	Write credential structure to file .
4822	Reads the MAC signature from a stream .
4823	Write a MAC signature key .
4824	Read keywrap data from a stream .
4825	Write the message to a stream .
4826	Reads the keywrap specification from a stream .
4827	Write the message to a stream .
4828	Reads the extension from the stream .
4829	Write this extension to a stream .
4830	Create an extension .
4831	Read a revocation reason from the stream .
4832	Write the revocation code to a stream .
4833	Validate the revocation code .
4834	Reads the object definition .
4835	Write the object definition to the output buffer .
4836	Reads the DefaultsInformation object .
4837	Write the DefaultsInformation structure to the output buffer .
4838	Read the parameters from the input buffer .
4839	Write the parameters to a file .
4840	Reads the profile information from the input buffer .
4841	Write the profile info structure to the output buffer .
4842	Write the ValidationInformation structure to a file .
4843	Reads the capability information from the input buffer .
4844	Write the capabilities to a file .
4845	Stop the connection threads .
4846	Start the connection service .
4847	Reads the LocateRequest payload .
4848	Write the metadata to a file .
4849	Reads the LocateResponse payload .
4850	Write the LocateResponse payload to the output buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Calculate the HMAC HMAC .
4854	Encrypt a plaintext message .
4855	Encrypt a symmetric key .
4856	Encrypt an asymmetric plaintext .
4857	Decrypt an asymmetric ciphertext .
4858	Create an RSA key pair .
4859	Derives a new encryption key .
4860	Create an RSA private key .
4861	Verify a signature .
4862	Read SignResponse payload from a stream .
4863	Write signature payload to file .
4864	Reads GetUsageAllocationRequest from a stream .
4865	Convert ProtocolVersion to KMIP version .
4866	Read the protocol version from a stream .
4867	Write this ProtocolVersion to a stream .
4868	Read credentials from a stream .
4869	Write the authentication structure to a stream .
4870	Read a PollRequest payload from a stream .
4871	Reads the certificate from the stream .
4872	Write the certificate to the stream .
4873	Authenticate using the SLUGS URL .
4874	Read an ArchiveResponse payload .
4875	Write the archive to the specified stream .
4876	Start the session .
4877	Read a RekeyResponse payload from a stream .
4878	Checks if a profile is supported .
4879	Derive a key from an object .
4880	Gets a single attribute from the device .
4881	Get a list of attributes for a device .
4882	Perform a query .
4883	Sign data .
4884	Open a client connection .
4885	Close the connection .
4886	Create a new encryption key .
4887	Create a new keypair .
4888	Register a managed object .
4889	Replaces a new key .
4890	Derives a key .
4891	Locate a collection .
4892	Check the usage of a device .
4893	Fetches a Kmip operation by UID .
4894	Get the attributes of a Kmip operation .
4895	Activate a Kmip device .
4896	Revokes a revocation request .
4897	Compute the MAC .
4898	Builds a CryptoParameters object from a dictionary .
4899	Builds an encryption key .
4900	Builds a MAC signature key .
4901	Build a keywrap specification from a dictionary .
4902	Build a list of common attributes .
4903	Builds a name attribute .
4904	Reads the query payload from the input buffer .
4905	Write the query payload to the output buffer .
4906	Write the metadata to a file .
4907	Reads the getAttributesResponse payload .
4908	Write this getAttributes to a file .
4909	Get a single entry point for a single file .
4910	Get a dictionary of ephemeris names .
4911	Get a list of all files for a group
4912	Loads the object from the module .
4913	Create an entrypoint from a string .
4914	Run livereload .
4915	Generate project files .
4916	Generate a controller .
4917	Generate action .
4918	Generate a form .
4919	Generate a model .
4920	Generate a macro .
4921	Make a directory .
4922	Rewrite the contents of src_file to dst_file .
4923	Convert a datetime to a string .
4924	Check if url is valid .
4925	Encode a string .
4926	Decode a string .
4927	Convert a function to JSON .
4928	Return the absolute URL for a given endpoint .
4929	Load the config from the environment
4930	Register a user in the session .
4931	Get the current user .
4932	Create a Flask application
4933	Register jinja .
4934	Register the blueprint .
4935	Register an error handler .
4936	Register hooks for app .
4937	Write a DataFrame to a CSV file .
4938	Read CSV data from a CSV file .
4939	Serialize a DataFrame into a single DataFrame .
4940	Deserialize a DataFrame into a DataFrame .
4941	Update metadata from a dataframe .
4942	Update from raw_data .
4943	URL for the contents of the contents of the download location .
4944	Add data from a dataframe .
4945	Adds a new image from a raw data stream .
4946	Opens an intermediate dataset .
4947	Read this dataset as binary .
4948	Read the content as text .
4949	Deserialize data into a Pandas DataFrame .
4950	Gets an intermediate dataset .
4951	Get all experiments for a workspace .
4952	Get all datasets for a workspace
4953	Get a single dataset
4954	Decorate a function to publish a function .
4955	Decorate a function to publish a function .
4956	Decorator for annotations .
4957	Decorator to mark a return type .
4958	Attach a function to a function .
4959	Find all globals in the code .
4960	Make a deep copy of the pen .
4961	Lookup a color from a string .
4962	Draws a rectangle .
4963	Compute the cubic extension of the Cubstein - Edstein - Bernstein extension .
4964	Calculate the Cubstein - Bernstein derivative of a cubic distribution .
4965	Build and return a list of tuples for the tree .
4966	Creates a function that returns the options for a command .
4967	Register a function to be called when a function is called .
4968	Compose a dynamic sitetree .
4969	Initialize the tree .
4970	Empty the site .
4971	Get an entry from the cache
4972	Update an entry in the cache .
4973	Set an entry in the cache .
4974	Initialize the view .
4975	Resolve an alias for the given language .
4976	Returns True if the current app is admin .
4977	Calculate the depth of an item .
4978	Get the current item for the given tree alias .
4979	Return the URL for the given sitetree item .
4980	Initialize a sitetree .
4981	Get the attribute of the current page .
4982	Get the depth of the current item .
4983	Create a menu for the given alias .
4984	Check if the item has access to the given item .
4985	Return a list of breadcrumbs .
4986	Create a sitetree .
4987	Get the children of the given item .
4988	Get the children of an item .
4989	Update the children of a tree item .
4990	Filter a list of items .
4991	Get the ancestor of the given item .
4992	Implement tree_climber .
4993	Resolve a variable in the current page .
4994	Parse a sitetree tree .
4995	Return a sitetree node .
4996	Generate a sitetree from a sitetree tree .
4997	Return a sitetree for sitetree .
4998	Render the tree and return the rendered content .
4999	Create a template for a given tag .
5000	Get the name of a model .
5001	Reregister the tree admin .
5002	Handle redirects .
5003	Redirect to the user .
5004	Add an item to the admin .
5005	Redirect to the admin view .
5006	Create a tree item from the tree item .
5007	Get the tree for the given item .
5008	Move item to item .
5009	Save the item to the tree .
5010	Returns a list of links for the tree .
5011	Dump the model to a JSON file .
5012	Create a tree model
5013	Create an item
5014	Import a sitetree module .
5015	Get the model class for the given settings entry .
5016	Create a Config from a mapping .
5017	Create a Config from a Python file .
5018	Create a Config from a TOML file .
5019	Create a Config from an object .
5020	Create a new ZipkinAttrs for a single span .
5021	Create http headers for a new span .
5022	Get the current span for this span .
5023	Start the service .
5024	Stop the logging process .
5025	Add extra annotations to the logging context .
5026	Add an annotation to the server .
5027	Override the span name of the span .
5028	Create an Endpoint .
5029	Copies an endpoint with a new service name .
5030	Build a v1 span .
5031	Encode a list of spans .
5032	Create a protobuf Span from a Span .
5033	Convert hex id to bytes .
5034	Convert a kind to a protobuf .
5035	Convert an endpoint into an endpoint .
5036	Convert a JSON -kin protobuf .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an endpoint .
5040	Copies an endpoint with a new service name .
5041	Build a list of annotations from a dictionary .
5042	Create a list of binary annotations .
5043	Create a new span .
5044	Convert a Thrift span to bytes .
5045	Encode a list of bytes .
5046	Detect the Span version and return the encoding .
5047	Convert spans to spans .
5048	Push a zipkin attribute to the stack .
5049	Encode a v2 span .
5050	Creates a json endpoint
5051	Encode a single span .
5052	Decode a list of spans .
5053	Convert a Thrift endpoint to an Endpoint .
5054	Convert a Thrift annotation to a dictionary .
5055	Convert the Thrift binary annotations into a dict .
5056	Decode a Thrift span .
5057	Convert a trace id to a string .
5058	Convert an unsigned long integer to lower hex .
5059	Write a hex value .
5060	Fixup date before date
5061	Set the transaction code .
5062	Set the IBank ID for a tag .
5063	Set the TNR tag .
5064	Parse a string .
5065	Parse the contents of a file .
5066	Join a string .
5067	Convert JSON response to text .
5068	Disable a ratelimit .
5069	Perform an HTTP request .
5070	Get bot info .
5071	Get a list of bots .
5072	Read a term from the terminal .
5073	Write a message to the stream .
5074	Close the stream .
5075	Decode a string .
5076	Encode a term .
5077	Add an address to the multicast .
5078	Send pending messages to the queue .
5079	Sets a callback for a remote serviceHello .
5080	cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given a given TIMEOUT
5083	construct a raw SOAP XML string
5084	Discover systems using WS - D discovery
5085	Get the tag manager for a tag .
5086	Get all child relations for a model .
5087	Get all child relations for a model .
5088	Saves the relation to the database .
5089	Create a model from a serializable data dictionary .
5090	Validate unique forms .
5091	Returns True if all formsets have changed
5092	Return an address with valid checksum .
5093	Generate the checksum for the address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt user for a seed .
5097	Validate signature fragments .
5098	Get the key at the given index .
5099	Returns the key for the given address .
5100	Creates an iterator over the seed .
5101	Create a Kerl .
5102	Accepts a list of tokens .
5103	Squeeze a list of tokens .
5104	Transform the state of the state
5105	Get a list of digests .
5106	Get a list of private keys .
5107	Prepare a multisig transfer command .
5108	Concatenate two strings .
5109	Convert an integer to a list of tuples .
5110	Convert two numbers to integers .
5111	Concatenate two strings .
5112	Print a seed
5113	Find all transactions for the specified bundles .
5114	Get a list of inputs .
5115	Get a list of new addresses .
5116	Get a list of Transfers
5117	Promote a transaction .
5118	Perform a replay of a bundle .
5119	Send a transfer command .
5120	Send tries to the device .
5121	Resolve an adapter .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Seed a response with the given command .
5127	Add digests .
5128	Get the address of the payment .
5129	Generate an iterator over the keys .
5130	Convert a digest to an address .
5131	Generate an address for the key_iterator .
5132	Return a list of Transaction objects .
5133	Iterate over the addresses used in the given seed .
5134	Takes a list of transaction hashes and returns a list of bundles .
5135	Check if codec is valid .
5136	Get codec info .
5137	Encode a string .
5138	Decode a string .
5139	Find all addresses in the database .
5140	Add a command to this adapter .
5141	Create a Transaction object from a string .
5142	Return a dictionary representation of the signature .
5143	Returns a string representation of the signature .
5144	Set the state of the transaction .
5145	Returns a list of all the signatures in this transaction .
5146	Convert this table into a list of strings .
5147	Return a list of all transactions in the chain .
5148	Discover all commands in a package .
5149	Execute a request .
5150	Apply filter .
5151	Get the URL for a job .
5152	List of validators .
5153	Returns True if there is no validator
5154	Generator for validators .
5155	Get a list of invalid signatures .
5156	Get the error message for a group signature .
5157	Traverse a bundle .
5158	Start the IOTA API client .
5159	Generate a random seed .
5160	Get the digest of the key .
5161	Sign a bundle .
5162	Print a pretty representation of the object .
5163	Accepts a list of tokens .
5164	Squeeze a list of tuples .
5165	Add a context to an exception .
5166	Get security level .
5167	Increment the legacy tag .
5168	Return the tag of this transaction .
5169	Adds a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign all inputs in the bundle .
5172	Sign the bundle at start_index .
5173	Create the inputs for the addy .
5174	Convert value to standard unit .
5175	Decompress a G1 - compressed G1 - compressed G1 .
5176	Prime the inverse of a field .
5177	Create an instance from a JSON file .
5178	Find all words in a given category .
5179	Searches for a word .
5180	Expand abbreviations .
5181	Split a description .
5182	List of categories .
5183	Generate a new color .
5184	Plot the component .
5185	Retrieve a builtin from a builtin name .
5186	Return a Timescale object from a named name .
5187	Generate a Color from components .
5188	Create a ColorImage from an image .
5189	Create a legend from a CSV file .
5190	Convert to csv format
5191	Returns the maximum width of the row .
5192	Get a decorator for a given component .
5193	Returns the value of the given decorator .
5194	Return the component of a given colour .
5195	Plot the list of dictionaries .
5196	Create a Component from a text string .
5197	Build a summary .
5198	Deprecated .
5199	Process a single row .
5200	Convert text to dictionary .
5201	Return True if all elements are equal .
5202	Return a list of unique identifiers .
5203	Create a list of intervals for the top of the tops .
5204	Convert longitudinal data into dict .
5205	Read a petrel file .
5206	Build a list of intervals .
5207	Read a CSV from a CSV file .
5208	Create a TimeSeries from an image .
5209	Create a Log from a Log object .
5210	Parse a LAS3 string .
5211	Reads a Canstratat file .
5212	Make a copy of the Striplog .
5213	Write the list to a csv file .
5214	Convert tolas .
5215	Plot an axis .
5216	Get data for a given field .
5217	Extract data from a basis set .
5218	Searches for a search term .
5219	Finds overlaps .
5220	Find gaps .
5221	Return a copy of the strip .
5222	Return a copy of the strip .
5223	Fill gaps with components .
5224	Union of two Striplog objects .
5225	Intersect two Striplog objects .
5226	Merge overlapping intervals .
5227	Plot a histogram .
5228	Return a new Striplog .
5229	Crop the list at the given extent .
5230	Compute the quality of all tests .
5231	Convert hex to name .
5232	Read a loglike from an image .
5233	Add custom fields to custom form .
5234	List all jobs .
5235	Parse a job hcl .
5236	Update a token .
5237	Returns a list of all allocations for a given prefix .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Update the deployment health of a deployment .
5241	Drain a node .
5242	Drain a node from a node .
5243	Update an eligible node .
5244	List files
5245	Stream a stream
5246	Get a file
5247	Join an agent .
5248	Updates a list of servers .
5249	Force leave a node
5250	Get a list of nodes .
5251	Get evaluations .
5252	Returns a list of namespace namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Change a job .
5258	Delete a job .
5259	Get the current configuration .
5260	Delete a peer .
5261	List all deployments .
5262	Get a random mutator
5263	Get a mutator for the given object .
5264	Get a polyglot attack .
5265	Randomly fuzz the given object .
5266	Convert a string to a string .
5267	Start serving requests .
5268	Stop the server .
5269	Convert a file to HTML .
5270	Serve the test case .
5271	Fuzz decorator .
5272	Spawn a command .
5273	Get the output of the process .
5274	Finish the process .
5275	Close the process .
5276	Start the plugin .
5277	Execute the command with the given object .
5278	Decode a function to JSON .
5279	Build a random string .
5280	Build a string representation of the grammar .
5281	Return a string representation of the query .
5282	Build a set of values from self . values .
5283	Build a new option .
5284	Build a definition from the refname .
5285	Build a STAR grammar .
5286	Shutdown the process .
5287	Run the process and monitor it .
5288	Start the monitor .
5289	Generate a random float .
5290	Add a definition to a cat group .
5291	Add a definition to a cat group .
5292	Generate a gramfuzz .
5293	Perform fuzzing on an element .
5294	Generate a fuzzed string .
5295	Get a fuzzed version of the json
5296	Creates a decorator that can be used to decorate an object .
5297	Handle SIGTERM signal .
5298	Handle quit command .
5299	Handle a paused command .
5300	Resume paused state
5301	Stop the command
5302	Starts a restart command .
5303	Get a list of Skype events .
5304	Set the mood .
5305	Set avatar avatar .
5306	Get metadata for a URL .
5307	Create a contact
5308	Get a single user
5309	List all bots .
5310	Get a single bot .
5311	Search for a user .
5312	Get a list of Skype requests .
5313	Create a new model from a dictionary .
5314	Merge two attributes .
5315	Merge an object into the cache .
5316	Make a synchronous sync request
5317	Read a token file
5318	Write token to file
5319	Verify a token
5320	Refresh a Skype token .
5321	Get user id
5322	Get a token from Skype .
5323	Synchronize the endpoints for Skype .
5324	Check if user exists .
5325	Authenticate a token .
5326	Login to Skype .
5327	Configure the messaging service .
5328	Ping the user .
5329	Get a list of conversations .
5330	Get a single chat
5331	Create a new thread .
5332	Convert user to ID .
5333	Get chat to chat .
5334	Iterate over an iterable .
5335	Return unicode text without reason
5336	Detect the format of a text .
5337	Parses the given text using the given handler .
5338	Post as a dict for serializing
5339	Load a YAML file .
5340	Export metadata to YAML file .
5341	Turn metadata into JSON
5342	Match the pattern .
5343	Return a list of all items .
5344	Return a list of sublists .
5345	Convert pattern to newline .
5346	Returns a list of all arguments that match the expression .
5347	Return a list of lists matching the given pattern .
5348	Parses a list of strings .
5349	Convert a trie to a regular expression .
5350	Check the index for the given key .
5351	Insert a string .
5352	Partition a character by character .
5353	Return a list of spans for a given type .
5354	Shrink new spans .
5355	Update the span with the given index .
5356	Get the number of nesting levels .
5357	Return the shadow of the span .
5358	Return the shadow of the link .
5359	Convert the type to a dictionary .
5360	Deprecated .
5361	The list of all parameters of this Parameter .
5362	List of parser functions .
5363	The list of templates .
5364	List of wikilinks .
5365	List of comments .
5366	List of external links .
5367	List of sections .
5368	Return a list of table names .
5369	r Returns a list of lists .
5370	Return a list of all the tags in this document .
5371	Iterate over the spans of a certain type .
5372	Return a list of all ancestors of this document .
5373	Return the first ancestor of the given type .
5374	Return the mode of a list .
5375	Get an argument from a list of arguments .
5376	Return the name of the comment .
5377	Remove duplicate arguments from the list .
5378	Remove duplicate arguments from the list .
5379	Set the value of an argument .
5380	Get an argument by name .
5381	Return True if the argument has the given name and value .
5382	Delete an argument by name .
5383	Convert a CRC code to a string .
5384	Searches for an ellipsoid .
5385	Read a URL from a URL .
5386	Read a GeoJSON file .
5387	Convert an EPSG code into a crs object .
5388	Convert an ESRI code into a crs object .
5389	Convert a CSR code to a crs object .
5390	Convert a text format string to an object .
5391	Write the record to a file .
5392	Read a VLR record from a stream .
5393	Parse GeoTiff keys from vlrs list .
5394	Parse a GeoTiff key directory .
5395	Return the signedness of an extra dimension .
5396	Return the id for an extra dimension type .
5397	Create a new point from another point record .
5398	Copy fields from another record .
5399	Append zeros to the array .
5400	All dimensions of the array .
5401	Create a vector from points to point_format .
5402	Read points from a stream .
5403	Create a Point from a compressed compressed buffer .
5404	X_scale .
5405	The y - axis .
5406	Return the Z dimension of the data .
5407	Add an extra dimension .
5408	Write point data to a stream .
5409	Write to a file .
5410	Write to a file .
5411	Build a dictionary of dtypes for point formats .
5412	Build dtypes dtypes dtype dtype dtype dtype dtype dtype dtype dtype .
5413	Convert numpy dtype to point format .
5414	Return the minimum file format for a point format .
5415	Check if a point format is compatible with the file format .
5416	Returns a list of vlrs .
5417	Extracts the vlrs from the vlr_type
5418	Read a list of VLR objects from a stream .
5419	Check if files have same point format id
5420	Check if all files have same dtype .
5421	Raise an error if the file signature is invalid .
5422	Read the header from the stream .
5423	Read vlrs from the stream .
5424	Read points from the stream .
5425	Reads compressed points data from the stream .
5426	Read an internal waveform packet .
5427	Read evlrs from the stream .
5428	Warn if the stream is not at the end of the stream .
5429	Opens alas file .
5430	Read alas file
5431	Create a LandsData object from a header .
5432	Create a las data structure .
5433	Convert a point to a point format .
5434	Merge a list of points .
5435	Write a newlas to a file .
5436	The date of the creation date .
5437	Set the creation date .
5438	The minimum values of the mesh .
5439	Set the min and max values
5440	A list of tuples representing the maximum and zeros .
5441	Set the maximum value of the domain
5442	Array of scales .
5443	A list of tuples representing the coordinates of the mesh .
5444	Read the file version .
5445	Convert a header to a new header .
5446	Unpack an array into a numpy array .
5447	Pack an array into a new array .
5448	Return a list of dimensions that are missing in point format .
5449	Return a dictionary of the subfields for this Dimension .
5450	The number of bytes in bytes .
5451	Return True if there is a waveform packet .
5452	Example demo .
5453	Calculate checksum of a command .
5454	Print a hex message .
5455	Verify that the response is valid .
5456	Return a list of set bits from a string .
5457	Generate a query string
5458	Example demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Send a disarm command .
5462	Clear the alarm command .
5463	Turn an output .
5464	Keep alive data .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the database .
5468	Guess the type of a file .
5469	Get file ID for a given path .
5470	Get a notebook from the database .
5471	Create a notebook model from the database .
5472	Get a directory .
5473	Convert a list of file records into a dictionary .
5474	Convert a directory to a directory model .
5475	Create a file model from the database .
5476	Save a notebook .
5477	Save a file .
5478	Rename a file .
5479	Delete a file .
5480	Ensure user exists .
5481	Delete user from database .
5482	Create a directory .
5483	Return True if table is in a directory .
5484	Delete a directory .
5485	Check if directory exists .
5486	Return a list of files in a directory .
5487	List directories in a directory .
5488	Generate a where clause for a file .
5489	Select files for given user .
5490	Return the default fields for a file .
5491	Get a single file from the database .
5492	Get a file .
5493	Get file id
5494	Check if a file exists .
5495	Renames a directory .
5496	Save a file in the database .
5497	Generate notebooks .
5498	Purge remote checkpoints .
5499	Generate the scripts for the given engine .
5500	Generate notebook notebooks .
5501	Reencrypt a row .
5502	Reencrypt user content .
5503	Derive a single Fernet key from a password .
5504	Derive a fallback key from a list of passwords .
5505	Decrypt a single password encryption key .
5506	Memoize a single argument .
5507	Get the name of a column .
5508	Convert a row to a dictionary .
5509	Convert a row to a dictionary .
5510	Create a remote notebook checkpoint .
5511	Create a file checkpoint .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	List all checkpoints at path .
5515	Rename all checkpointpoints .
5516	Delete all checkpoints at path .
5517	Purge all remote checkpoints .
5518	Resolve a path to a root manager .
5519	Applies a prefix to a model .
5520	Decorator to handle a path .
5521	Decorator to handle kwargs .
5522	Decorator to handle old files .
5523	Called when a manager has changed .
5524	Get a single directory model
5525	Normalize API path .
5526	Split a path into its name and name .
5527	Write a nb string to a base64 - encoded string .
5528	Read a file .
5529	Decode an unknown content .
5530	Convert a base64 - encoded string to a string .
5531	Return a list of directories for a path .
5532	Decorator that raises 404Error .
5533	Create a user in the database .
5534	Separate models and files into directories and files .
5535	Recursively walk a directory tree .
5536	Iterate over all files in mgrm .
5537	Iterate over all files in mgr .
5538	Reencrypt all users .
5539	Reencrypt a single user .
5540	Unencrypt all users .
5541	Unencrypt a single user .
5542	Create a temporary alembic file .
5543	Upgrade an alembic database .
5544	Sanitize a block .
5545	Add an instance to the embed .
5546	Load instances for embed_type .
5547	Insert an instance into the block .
5548	Load all embed data .
5549	Validate data .
5550	Admin view .
5551	Convert to JSON .
5552	Hide authenticated fields .
5553	Remove fields from the request .
5554	Handle GET requests .
5555	Return a queryset of published items .
5556	Return a queryset of published items .
5557	Return the value of nullBooleanField .
5558	Validate a widget .
5559	Validate a zone .
5560	Check if an id is a valid UUID
5561	Return the permissions for the user .
5562	Modify permissions .
5563	Validate author .
5564	Save a zone .
5565	Returns the data as a dictionary .
5566	Prepare data as a dictionary
5567	Render template data .
5568	Get the settings for this Integration .
5569	List of pages .
5570	Get the settings for an integration .
5571	Update the settings for an integration .
5572	Signup a user .
5573	Create a maptag tag .
5574	Render a zone
5575	Save the featured image .
5576	Save a subsection .
5577	Get the file extension .
5578	Get the URL for the media .
5579	Save image .
5580	Save an image .
5581	Return the connection to the app .
5582	Get a stream with limited bandwidth limiting .
5583	Read amount of bytes .
5584	Consume an amt .
5585	Schedule a consumer for consumption .
5586	Process a scheduled retry request .
5587	Gets the projected rate .
5588	Record the consumption rate .
5589	Download a file from a bucket .
5590	Poll for a given transfer .
5591	Get a list of callbacks for a transfer .
5592	Return a copy of the original dictionary .
5593	Decrement the counter .
5594	Finalize the queue .
5595	Check if file is a special file .
5596	Acquire a tag .
5597	Release a release token
5598	Adjust the size of the chunk size .
5599	Queues a file - like task to be read .
5600	Get the IO write task .
5601	Get the download output manager for a transfer .
5602	Download an object from a bucket .
5603	Write data to file .
5604	Request a list of pending writes .
5605	Check if fileobj is seekable .
5606	Upload a file object to a bucket .
5607	Download a file from a bucket .
5608	Copy data from a bucket to a bucket .
5609	Delete a task from a bucket .
5610	Shutdown the server .
5611	Cancel a message .
5612	Block until the transfer is received .
5613	Read amount of bytes from fileobj .
5614	Wrap data into a file - like object .
5615	Get the appropriate upload manager for a transfer .
5616	Set an exception .
5617	Set the result .
5618	Set an exception .
5619	Return the result of the task .
5620	Cancels the task .
5621	Submits a task to the given executor .
5622	Add a function to the end of the future .
5623	Add a failure cleanup function .
5624	Called when the task is done .
5625	Submit a task to the executor .
5626	Add a function to the future .
5627	Upload a file to a bucket .
5628	Download a file from a bucket .
5629	Iterate over the function decorators .
5630	Return the first argument of a decorator .
5631	Refactor a step .
5632	Iterate through step function decorators .
5633	Convert a decorator to a single step .
5634	Refactor a single step .
5635	Select the Python parser for the given parser .
5636	Fetches a list of teams .
5637	Create a new person .
5638	Updates a membership group .
5639	Delete a membership .
5640	Get the catfact
5641	Create a new webhook .
5642	Retrieve a list of items from a room .
5643	Delete a membership .
5644	Validate a base URL .
5645	Check if string is a web URL .
5646	Opens a local file .
5647	Check whether o is an instance of the given type .
5648	Convert a list of dictionaries into a dictionary .
5649	Validate the expected response code .
5650	Convert json_data to dict
5651	Convert a string to a string .
5652	List all items in a team .
5653	Create a new team .
5654	Updates a room .
5655	Delete a room .
5656	Fetches a list of items .
5657	The creation date of this team .
5658	Get an access token .
5659	Create an event .
5660	Update a webhook .
5661	Delete a webhook .
5662	Make sure the next URL is valid .
5663	Sets the wait_on_rate flag .
5664	Update request headers .
5665	Return the absolute URL for the given URL .
5666	Perform a request .
5667	Perform a GET request .
5668	Get pages from a URL .
5669	Get items from a url
5670	Perform a PUT request .
5671	Perform a DELETE request .
5672	Create a new login token
5673	Retrieve items from a room .
5674	Create a new message .
5675	Delete a message
5676	Create a new user .
5677	Gets a single person .
5678	Update a person .
5679	Delete a person .
5680	Retrieve the current user .
5681	Retrieve a list of items from the API .
5682	Fetches a list of objects .
5683	Create a new container .
5684	Updates a team .
5685	Deletes a team .
5686	Fetches a list of actors .
5687	Convert data into a tuple .
5688	Get an authorization token
5689	The last activity of the user .
5690	POST webhook
5691	Get the public url for the ngrok client .
5692	Delete webhook by name
5693	Create a webhook .
5694	Create webhook .
5695	Run the console .
5696	Read all telegram messages .
5697	Read messages from the queue .
5698	Create a DSMR protocol .
5699	Create a DSM reader .
5700	Create a TCP connection .
5701	Handle incoming data .
5702	Called when a connection is closed .
5703	Handle a telegram .
5704	Parse telegram data .
5705	Get version from file
5706	Check if the specs are valid .
5707	Find and return a list of packages .
5708	Create a commandclass based on a prerelease command .
5709	Creates a command for the given function .
5710	Run a command .
5711	Ensure that the targets exist .
5712	Wraps a command into a single command .
5713	Create a file handler for the package .
5714	Get the data files for the given data specs .
5715	Get package data .
5716	Compile a regular expression .
5717	Generator for osxplode paths .
5718	Convert a glob pattern to a string .
5719	Join the parts of the translated parts .
5720	Convert a glob pattern to a regular expression .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write indexes .
5724	Write triggers to the database .
5725	Write constraints to a table .
5726	Write the contents of a table .
5727	Process a single row .
5728	Write indexes to the file .
5729	Write constraints to the file .
5730	Write triggers to the file .
5731	Return the number of rows .
5732	Enqueue data into the database .
5733	Start a task .
5734	Build an extra predicate .
5735	Simple JSON serializer .
5736	Reconnect to the database .
5737	Execute a SQL query .
5738	Get a connection to the database .
5739	Run the benchmarks .
5740	Connect to the pool .
5741	Lookup an error by name .
5742	Total number of connections .
5743	Handle a MySQL connection failure .
5744	Create a simple SQL expression
5745	Update a table .
5746	Connect to the database .
5747	Setup the database
5748	Destroy all tables .
5749	Start a step .
5750	Stop a step .
5751	Load steps from raw_steps .
5752	Disconnect from API .
5753	Reconnect to the server .
5754	Connect to the websocket .
5755	Called when a message is received .
5756	Stop timers .
5757	Send a ping to the API .
5758	Called when a pong is received .
5759	Send a payload to the server .
5760	Clear the paused flag .
5761	Handle a system message .
5762	Handle an info response .
5763	Handle errors .
5764	Send data to client
5765	Resubscribe
5766	Handle authentication data .
5767	Handle configuration data .
5768	Update the timestamps for a given channel .
5769	Reset all channels .
5770	Get a list of candles for a given pair .
5771	Configure bitfinex configuration
5772	Subscribe to ticker .
5773	Unsubscribe from tick
5774	Subscribe to an order book .
5775	Unsubscribe from order book .
5776	Subscribe to book .
5777	Unsubscribe from raw book .
5778	Subscribe to trades .
5779	Unsubscribe from trades .
5780	Subscribe to Candidates .
5781	Unsubscribe from Candles .
5782	Authenticate .
5783	Cancel an order
5784	Handle a command .
5785	Handle a device command .
5786	Handle a notification .
5787	Create a new Device Type
5788	Publish an event .
5789	Update a device .
5790	List client status .
5791	List bundles .
5792	Create a bundle
5793	Update a schema definition
5794	Disconnect from the IBM Watson IoT service
5795	Called when a connection is received .
5796	Subscribe to device events .
5797	Subscribe to a device status .
5798	Subscribe to a specific command .
5799	Publish a command .
5800	Called when a message is received .
5801	Handle a device event .
5802	Called when a device is received .
5803	Called when app status is received .
5804	Get a single event .
5805	Get all events for a device
5806	Make an API call .
5807	Initiate a MmtRequest .
5808	Get the status of a request .
5809	Close the index
5810	Counts the number of points within the specified coordinates .
5811	Finds the nearest neighbors of a collection .
5812	Retrieves the bounds of the index .
5813	Delete an index .
5814	Create an index from a stream .
5815	Load a byte array .
5816	Remove an object from the index .
5817	Error checking for Error calls
5818	Load application .
5819	Initialize the Flask application .
5820	Start the gunicorn server .
5821	Convert a value to a native URL set .
5822	Crop an image on a centerpoint .
5823	Convert an image to a PNG image .
5824	Process an image .
5825	Process an image .
5826	Ensure that the image is open .
5827	Process the placeholder image .
5828	Update the PEPI field if necessary .
5829	Update PPOI field .
5830	Set the field data for the field .
5831	Overrides django admin . admin_field_field_field
5832	Convert obj to string
5833	Autodiscover all available apps .
5834	Unregisters an SizedImage subclass .
5835	Unregister a filter .
5836	Get the URL for the image .
5837	Build filters and sizes .
5838	Get root folder
5839	Get the size of the folder
5840	Returns the filename of the downloaded root folder
5841	Delete files matching the given regex .
5842	Preprocess an image
5843	Preprocess GIF image .
5844	Preprocess a JPEG image .
5845	Retrieve an image .
5846	Save an image
5847	Return the PPO ID as a string .
5848	Create a new image
5849	Render a template .
5850	Add a custom widget to the context .
5851	Build a copy of the attributes .
5852	Resizes the path to a file .
5853	Returns the path to the filename of the image .
5854	Validate that the size of the volume field is valid .
5855	Get image url from image key .
5856	Get the rendition key set .
5857	Format an instruction .
5858	Format a function body .
5859	Decode a bytecode .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read the result from the device .
5865	Handle FastAGI request .
5866	Parse an IGI code .
5867	Validate an AGI code .
5868	Reset all instances .
5869	Get all instances .
5870	Get metadata for setup . py
5871	Get the primary keys for a model .
5872	Deserialize a single instance .
5873	Get an existing instance for the given query .
5874	Add declared fields to the model .
5875	Deserialize data into instance .
5876	Split the kwargs into the kwargs .
5877	Delete all snapshots
5878	Snapshot a database
5879	List all snapshots .
5880	Restore a snapshot
5881	Delete a snapshot
5882	Rename a snapshot
5883	Replaces a snapshot .
5884	Updates indexes after each epoch for each epoch for each epoch .
5885	Preprocesses textacy .
5886	Apply a function to data .
5887	Creates a processor for processing text .
5888	Processes text .
5889	Process text .
5890	Generate document length statistics .
5891	Return a pandas DataFrame with token counts .
5892	Map a parameter type to a list of strings .
5893	Convert a list of interface names into a dictionary .
5894	Inverse of the inverse .
5895	Update the items with rollback .
5896	Make a deep copy of the model .
5897	Make a deep copy of this node .
5898	Return True if the values are equal .
5899	Inverse of an item .
5900	Clear all variables
5901	Move a node to the given key .
5902	Write text to a temporary file .
5903	Search for contacts .
5904	Merge arguments into config .
5905	Load a list of addressbooks .
5906	Prepare search query parameters
5907	Create a new card .
5908	Create a list of birthdays for a list of vcards .
5909	Search for phone numbers .
5910	List all contacts
5911	Modify a subcommands .
5912	Remove a contact from a vCard .
5913	Execute a source subcommand .
5914	Perform a merge command .
5915	Copy a subcommands from a list of addresses to target_address .
5916	Returns the action for the given alias .
5917	Convert a boolean value to a boolean value .
5918	Create a new contact .
5919	Create an addressbook from a file .
5920	Create contact from user input .
5921	Create a contact from an existing contact .
5922	Get the names part of a variable .
5923	Add a category .
5924	Parse a type value .
5925	Convert a list to a string .
5926	Convert a string to a datetime object .
5927	Compare two UUIDs .
5928	Search for all contacts .
5929	Search for contacts .
5930	Search for contacts by query .
5931	Search for an address book .
5932	Get a dictionary of uids for a given query .
5933	Get the short UID for a given uid
5934	Find all VCard files .
5935	Load all cards from the Vdir .
5936	Get an abook by name .
5937	Return a dictionary of architectures supported by the architecture .
5938	Return a dictionary of available architectures .
5939	Get the argumentspec for a function .
5940	Execute the command with the given arguments .
5941	Prompt user input .
5942	Encode a value to a string .
5943	Guess the type of keyword arguments .
5944	Add commands to the given parser .
5945	Add a new name to the function .
5946	Decorator to declare an argument
5947	Prompt user for confirmation .
5948	Return a new Query with the given parameters .
5949	Return a copy of this Pattern .
5950	Get a cached result from the database .
5951	Return the first item in the model .
5952	Delete entities from the database .
5953	Delete entity from database .
5954	Execute a redis prefix on the given index .
5955	Estimate the amount of work for the given index .
5956	Perform a search query .
5957	Return the number of records matching the given filters .
5958	Return a connection to the database
5959	Convert a string to a list of strings .
5960	Refreshes the indices of the model .
5961	Clean old indexes .
5962	Add an object to the session .
5963	Get the value of a key .
5964	Write data to Redis writer .
5965	Save changes to the database .
5966	Delete object from database .
5967	Get a single instance by id .
5968	Register a reduce function .
5969	Open a semaphore .
5970	Get CPU count .
5971	Send a result to the result_queue .
5972	Process a single worker .
5973	Add a pending call item to the call queue .
5974	Ensure the executor is running .
5975	Wraps non - pickled objects .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	Waits for jobs completion .
5980	Get the preprocessing data .
5981	Prepare process data
5982	Close file descriptors .
5983	Terminate the process with psutil .
5984	Terminate a child process .
5985	Get the exit codes for all processes .
5986	Format a list of exit codes .
5987	Run the main semaphore .
5988	Ensure the process is running .
5989	A simple event processor that prints out events .
5990	Run the program .
5991	Interactive interactively .
5992	Split a string into a list of arguments .
5993	Get the top level of a function .
5994	Run a list of hooks .
5995	Clear the state of the stack .
5996	Return an integer or None if not found .
5997	Get an integer .
5998	Process commands .
5999	queue a startfile
6000	Finds the next token in a string .
6001	Print an error message .
6002	Read a command line .
6003	Close the connection .
6004	Disassemble a message .
6005	Disassemble a byte string .
6006	Return a count of the number of frames
6007	Get the name of the call function .
6008	Print count entries of the stack trace
6009	Lookup a subcommand with the given prefix .
6010	Display short help .
6011	Add a callback to the list of commands .
6012	Run a subcommand .
6013	Start the debugger .
6014	Show a category .
6015	Run the command .
6016	Try to find a debugged frame .
6017	Map thread names to their names .
6018	Validate an integer .
6019	Validate onoff or offoff .
6020	Run a set on the debugger .
6021	Set an integer .
6022	Run show_onon on the debugger .
6023	Display an int .
6024	Show a setting .
6025	Return True if line is a definition statement .
6026	Return True if line is a class definition .
6027	Handle a threading .
6028	Set default background .
6029	Check if color is dark .
6030	Return the signature of a frame .
6031	Return a list of all display names .
6032	Display a single frame
6033	Return a string representation of the number .
6034	Read a single message .
6035	Displays debug information .
6036	Undefined subcommand .
6037	Run a single thread .
6038	Print a simple array .
6039	Return the name of a signal
6040	Lookup a signal by name .
6041	Checks if a name is a valid signum .
6042	Set a signal replacement .
6043	Check and adjust the signature for the signature .
6044	Print info signal .
6045	Handle a signal .
6046	Handle print method .
6047	Handle signal received .
6048	Convert filename to module name .
6049	Search for a file in directories .
6050	Try to find a file inside a script .
6051	allpy files caller s dir without trailing .
6052	Write a message .
6053	Run the program .
6054	Columnize a list of commands .
6055	Post a postmortem .
6056	Close the connection .
6057	Send a TCP message .
6058	Complete an identifier .
6059	Send a string to the console
6060	Add a list of frames to ignore .
6061	Determine if a file canonic .
6062	Return the filename of the file .
6063	Return True if tracing is started .
6064	Checks whether the given frame is stopped .
6065	Sets to stop on the next event .
6066	Print the stack trace of a function .
6067	Run a file .
6068	Check if the frame name is valid .
6069	remove breakpointbp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable all breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete breakpoints by filename .
6074	Opens a file .
6075	Read a line .
6076	Prompt user for confirmation .
6077	r
6078	r
6079	Submit a query to the pool .
6080	Restore the previous login session .
6081	Load a module .
6082	Iterate over all documents .
6083	Main function .
6084	Convert json to a stream .
6085	Open a JSON or csv file .
6086	Convert a stream of datastore . datastore . datetime . datetime . datetime
6087	Convert date to float .
6088	Detect file encoding .
6089	Read JSON lines from a JSON file .
6090	Transcode a file to UTF - 8 .
6091	Open a csv file .
6092	Read CSV file .
6093	Transcode a CSV file into a JSON stream .
6094	Connect to an auth token .
6095	Save a token .
6096	Make an HTTP request .
6097	Perform a DELETE request .
6098	Wait for the project to finish .
6099	Get the root URL for a given URL .
6100	Save a token
6101	Make a JSON request and return the result .
6102	POST data .
6103	Change the path to a new URL .
6104	Get the default account id
6105	Get documentation for this container
6106	Wait for a job to finish .
6107	Perform a GET request .
6108	Print output as CSV .
6109	Read parameters from a file .
6110	Simplify a document .
6111	Create a project with documents .
6112	Upload documents from a JSON file .
6113	Run the CLI .
6114	Upload a stream to a stream .
6115	Upload a file to the server .
6116	Run the script .
6117	Create a user from login credentials .
6118	Login to the user .
6119	Post login page .
6120	Get data for a resource
6121	Fetch data for each period
6122	Initialize the view
6123	Initialize the view .
6124	Handle GET request .
6125	Handle a change event .
6126	Update menu links .
6127	Return a list of urls for all pages .
6128	Called when a message is received .
6129	Called when a change is changed .
6130	Create the widget .
6131	Initialize the widget .
6132	Destroy the widget .
6133	Called when a child is added .
6134	Remove child from widget
6135	Iterate over all child widgets .
6136	Set an attribute .
6137	Update the proxy .
6138	Called when a change is modified .
6139	Perform an XPath search .
6140	Initialize the object .
6141	Initialize widget .
6142	Set the HTML source
6143	Observer mode
6144	Observe a block .
6145	Update the children of the block .
6146	Read the contents of a file .
6147	Print an error message .
6148	Print error message .
6149	Get product by name .
6150	Create a new session
6151	Reset the store .
6152	Gets a list of Stores .
6153	Set the delivery system
6154	Gets a menu .
6155	Add item to basket
6156	Add an item to a basket
6157	Add a side item to a basket .
6158	Remove item from basket
6159	Set payment method .
6160	Process payment options .
6161	Make a GET request .
6162	Make a POST request .
6163	Make an API call to the API .
6164	Append an item to the menu .
6165	Add an exit item .
6166	Draw the menu .
6167	Process user input .
6168	Select the selected item
6169	Parse old menu data
6170	Sort a DataFrame by value .
6171	Top level aggregation function .
6172	Convert a column to a datetime
6173	Convert a datetime to a string .
6174	Change the date format of a column .
6175	Cast a column to a new column .
6176	Rank a DataFrame .
6177	Apply a waterfall function to a DataFrame .
6178	Perform a basic math operation on a DataFrame .
6179	Round values in a DataFrame .
6180	Change absolute values of a column .
6181	Pivot DataFrame columns .
6182	Pivot dataframe by group .
6183	Group by aggregations .
6184	Calculate cumulative sum of a column .
6185	Add a missing row to a DataFrame .
6186	Catch exceptions raised by logger .
6187	Log a message in a function .
6188	Log the time of a function .
6189	Decorator for log_shapes .
6190	Renames the given values .
6191	Compute the cumulative sum of rows in a DataFrame .
6192	Combine columns aggregation by aggregation function .
6193	Get a parameter value from a function call .
6194	Remove old entries from the cache directory .
6195	Roll up a dataframe .
6196	Return the maximum value of a column .
6197	Return the minimum value of a column .
6198	Fill missing NaN values .
6199	Add an offset to a date object .
6200	Add a number of months to a date object .
6201	Add a date object to a date object .
6202	Parse a date string .
6203	Filter DataFrame by date .
6204	Change percentage of columns of a column .
6205	Perform an ADA family .
6206	Update the learning updates for learning .
6207	Get parameters for training .
6208	Add new parameters for optimization updates .
6209	Generate the first Llimpsepensor .
6210	Initialize the graph .
6211	Compute the cost of the tensor .
6212	Apply a function on each dataset .
6213	Vectorize target sets .
6214	Prints the test set .
6215	Train the model .
6216	Sample from input .
6217	Compute the alignments for each state
6218	Compute the context vector .
6219	Concatenate multiple inputs .
6220	Pad the dataset to the given side .
6221	Multiply core .
6222	Print elapsed time .
6223	Run the compute method .
6224	Run the monitor .
6225	Build the variables for looping .
6226	Run the scan step .
6227	Multiply momentum .
6228	Wrapper for train .
6229	Skip the next batch .
6230	Load model parameters .
6231	Train the model .
6232	Run a single step .
6233	Run a valid step .
6234	Print the score of the given score map .
6235	Get the current dataset .
6236	Apply a function to this Variable .
6237	Prints the user defined parameters
6238	Variable type .
6239	Create a list of variables from a dataset .
6240	Creates an array shared with the given value .
6241	Stack multiple encoders .
6242	Create a stack of decoders .
6243	Encode x .
6244	Decode a single layer .
6245	Create a 2D Gaussian .
6246	Register a layer .
6247	Monitor the output outputs .
6248	Returns a list of all parameters
6249	Setup variables .
6250	Compute a new MapDict .
6251	Save model parameters to file .
6252	Load parameters from a file .
6253	Print network statistics .
6254	Register multiple parameters .
6255	Register a list of updates .
6256	Register new training updates .
6257	Register monitors .
6258	Multiply multiple L2 norm .
6259	Dump one element to a file .
6260	Parse a file - like object .
6261	Load model parameters .
6262	Creates a request element .
6263	Decode a state .
6264	Parse credentials .
6265	Filters out the request elements .
6266	Login to login .
6267	Normalize a dictionary .
6268	Convert a list of items to a dictionary .
6269	Convert a query string into a dictionary .
6270	Resolve provider class .
6271	Create a cookie .
6272	Saves the cookie .
6273	Get the cookie from the adapter .
6274	Return the data as a dictionary .
6275	Generate a signature for the given parts .
6276	Serialize a value into a string .
6277	Returns True if the session has expired
6278	Expire the expiration time of the session .
6279	Serialize credentials into a string .
6280	Return True if the content is a binary string .
6281	Return the content of the response .
6282	Creates an OAuth2 request .
6283	Access the user info
6284	Decorator for login
6285	Login to the user .
6286	Return the key for the session key .
6287	Set a session key .
6288	Generate a CSRF token
6289	Log a message with the given level .
6290	Check if HTTP status is in the given category .
6291	Split a url into parts .
6292	Decorator to enable cross origin .
6293	Set CORS headers .
6294	Get the kwargs for the app instance .
6295	Convert an object to a string .
6296	Ensure inst is iterable .
6297	Return True if two numbers are equal .
6298	Mark a function as deprecated .
6299	Deserialize a string into an AudioSegment object .
6300	Create an AudioSegment from a file .
6301	Create an audio segment from a numpy array .
6302	Execute SOX command .
6303	Filter silence silence .
6304	Compute the Fourier Transform .
6305	Generate frames from the stream .
6306	Normalize the SPL by average .
6307	Return a new AudioSegment from other audio segments .
6308	Resample the stream .
6309	Serialize to JSON .
6310	Generate a spectrogram .
6311	Given a list of candidate offsets choose the front of the front of the candidates .
6312	Get the first offset of the onset of a given onset .
6313	Get the offset of the first onset of the onset of the onset of the onset .
6314	Matches an offset front of the onset front of a given onset .
6315	Returns a list of tuples of tuples of tuples of tuples of tuples .
6316	Update the segmentation mask .
6317	Return the index of the first index in the front - end index .
6318	Iterate over the front of the front of a given onset .
6319	Get the corresponding offsets for a given onset .
6320	Remove overlaps between two segments .
6321	Remove front of front of front
6322	Break the front of front of the front of a front .
6323	Merge adjacent segments .
6324	Separate masks .
6325	Downsample one or more indices .
6326	Run the ANTs algorithm .
6327	Bandpass filter
6328	Lowpass filter .
6329	Convert a list of data into a tf input matrix .
6330	Expand dataset with standard deviation .
6331	Return True if two elements are equal .
6332	Takes an audit file and returns a dictionary of scores .
6333	Load the confusion matrix .
6334	Convert a list of data to tf input .
6335	Update the index url based on environment variables .
6336	Autodetect files
6337	Resolve a list of streams .
6338	Resolve a property by property .
6339	Resolve a stream by predicate .
6340	Handle an error .
6341	Push data to the stream .
6342	Push a chunk to the channel
6343	Get information about the stream .
6344	Opens a stream .
6345	Perform a time correction .
6346	Return a child element with the given name .
6347	Return the next sibling of this element .
6348	Get the previous sibling of this element .
6349	Sets the name of the element .
6350	Set the value of the expression .
6351	Create a new child element .
6352	Create a new child element with the given name .
6353	Return a copy of the element .
6354	Prepend a copy of the element with a new element .
6355	Remove a child .
6356	Returns a list of results for the resolver .
6357	Pair a word .
6358	Autocomplete a query .
6359	Compute the n - grams of a token .
6360	Iterate through a list of processors .
6361	Map an iterator over an iterable .
6362	Make a fuzzy fuzzy word .
6363	Perform fuzzy fuzzy .
6364	Perform fuzzy search .
6365	Extract the relations from the results of the query .
6366	Display help .
6367	Display database info .
6368	Execute a command .
6369	Print geohashes .
6370	Handles GET requests .
6371	Do indexing .
6372	Score a word .
6373	Compare two strings .
6374	Send a response .
6375	Map a request to a list of requests .
6376	Get the bits from an array .
6377	Convert an ARRAY to a bitray .
6378	Convert a slice to a Slice object .
6379	Find files in a directory .
6380	Return True if the value or False otherwise .
6381	Generate a statement for each item in the given items .
6382	Logical shift left
6383	Return the log2 of x .
6384	Return True if num is a power 2 .
6385	c - like case - like case of switch statement
6386	Define default statement .
6387	Register an interface for the given object .
6388	Called when the simulation is started .
6389	Log change events .
6390	Render a single process .
6391	Automatically add agents for the unit .
6392	Get the associated clk for this unit .
6393	Yield elements from iterable by fn .
6394	Group a collection by fn .
6395	Flatten an iterable .
6396	Merges the first if statement into one if it exists .
6397	Remove unconnected signals from netlist .
6398	Check if a proc is too simple .
6399	Try to merge two processes .
6400	Reduce processes by rank .
6401	Called when a write request is received .
6402	Convert a UnitOrCluster to Rtl .
6403	Return the name of the output of a list of statements .
6404	Cut off all drivers of a signal .
6405	Add a signal to the registry .
6406	Synthesize this object .
6407	Get the maximum number of statements for a given statement .
6408	Returns the maximum number of statements in the given proc .
6409	Write data to simulation .
6410	Change the direction of the master
6411	Load all declared declarations .
6412	Return a list of all signatures for this interface .
6413	Returns the physical name of the entity .
6414	Return the length of this element .
6415	Return sensitivity of an operation .
6416	Evaluate an operator .
6417	Convert a bit or integer to an integer .
6418	Reinterpret a set of bits to a hStructT .
6419	Return the number of words between start and end .
6420	Group items by offset .
6421	Print an interface .
6422	Generates a list of frames from a transaction .
6423	Iterate over all parts of this word .
6424	Pack data into a dictionary .
6425	Clean the meta data .
6426	Find all enclosures for the given statements .
6427	Given a list of signals return a set of Sensitivity sequences .
6428	Get the context of the RTL context .
6429	Called when the statement is removed .
6430	Merge two INDRA Statements .
6431	Check if two statements are merged .
6432	Merge two INDRA Statements .
6433	Merge two INDRA Statements .
6434	Try to reduce a list of statements .
6435	Called when a parent event is dependent .
6436	Set the parent of the parent statement .
6437	Register a list of statements into the target statement .
6438	Destroy the state of this statement .
6439	Create a new registry .
6440	Create a new signature .
6441	Clean up all internal interfaces .
6442	Recursively iterate over all fields in a signature .
6443	Unpacks an HStructT into an HStruct .
6444	Convert a signed operator to a new value .
6445	Add a process to the system .
6446	Evaluate a boolean condition .
6447	Connect a SimUnit to another .
6448	Creates a function that checks if the value has changed .
6449	Creates a function that updates the index of the next item in the given index .
6450	Convert a string to a vector .
6451	Register a HW process .
6452	Evaluate a parameter .
6453	Set the value of this parameter .
6454	Convert an interface map into a HStruct .
6455	Finalize the memory .
6456	Get the index of the index .
6457	Create a new value from a Python string .
6458	Autocast a signal to the specified type .
6459	Convert a signature to a new type .
6460	Iterate over all parameters in the interface .
6461	Connects a Packet to a destination .
6462	Convert an interface into a single signature .
6463	Convert a ROM into a process .
6464	Convert this instance to a new one .
6465	Register an interface in an interface .
6466	Try to reduce a sig and return the result .
6467	Try to reduce a signed value .
6468	Get the base name scope scope .
6469	Handle serialization of an object .
6470	Convert a type to an HDL type .
6471	Return a string representation of the ifContainer .
6472	Get the base conditional condition .
6473	Create a SimBitsT .
6474	Get the name of a constant .
6475	Called when the driver is cut off .
6476	Load from an array .
6477	load from hdl struct
6478	Load from hdl .
6479	Return the width of the item .
6480	Recursively walk the tree and return a list of tuples .
6481	Fix the sign of a given width .
6482	Merge two statements into a single statement .
6483	Get indent number .
6484	Raise an exception if objName is not available .
6485	Register a parameter .
6486	Update the parameters from another object .
6487	Register a unit .
6488	Register an interface .
6489	Register an array .
6490	Get single driver .
6491	Execute the static evaluation function .
6492	Create a new operator and return its result .
6493	Return a new context with indentation .
6494	Try to connect to a unit .
6495	Propagate clk to clk
6496	Propagate clkn to rstn
6497	Propagate clk rst
6498	Propagate rstn to rstn .
6499	Propagate rst .
6500	Iterate over bits in a signal .
6501	Serialize an exclude expression .
6502	Serialize an entity into an entity .
6503	Serialize params into a single unit .
6504	Get the full name of the object
6505	Make an association
6506	Convert a unit to a SimModel .
6507	Convert a unit into a SimModel .
6508	Reconnect signals to model .
6509	Simulate unit VCD .
6510	Initialize the write callback .
6511	Connect a signal to this port .
6512	Register a signal .
6513	Connect to the end of the driver .
6514	Return the receiver s signature .
6515	Checks if a signal is evdependent on the process .
6516	Add a process to the queue .
6517	Add a signal to the run .
6518	Schedules the combine of the combine and updates the result .
6519	Schedule apply values .
6520	Resolve conflict resolver .
6521	Run the combine process .
6522	Iterate over seqProcesses .
6523	Applies the values to the values to the list of values .
6524	Read a signature .
6525	Write a signal to the signal .
6526	Add a process .
6527	Simulate a single unit .
6528	Creates a function op .
6529	Convert a list of ternary operations into a Tensor .
6530	Create a handler for the given process .
6531	Returns the Hamming distance between two hashes .
6532	Return the average hash of an image .
6533	Return the distance between two images .
6534	Setup the device
6535	Update the power state .
6536	Mutates the volume .
6537	Increase the volume level .
6538	Down the volume .
6539	Set the volume level .
6540	Reset the board .
6541	Return the piece at the given square .
6542	Remove piece at the given square .
6543	Set piece at the given square .
6544	Determine if a move should be killed or not .
6545	Returns True if the game was killed .
6546	Checks if the game is over the game .
6547	Checks if the move is a checkmate .
6548	Return True if the trajectory is a 4fold repetition .
6549	Remove a move from the stack .
6550	Return the sfen representation of the board .
6551	Push a move onto the end of the list .
6552	Return the zobrist hash of the board .
6553	The color of the piece .
6554	Create a Color instance from a given symbol .
6555	Return the USI representation of the piece .
6556	Creates a Card from a string .
6557	Parse a string of commits .
6558	Parse a commit .
6559	Load the config from the CLI .
6560	Execute command from command line .
6561	Add an argument to the parser .
6562	Load a configuration file .
6563	Generate a yaml file
6564	Generate markdown for a class .
6565	Cast value to cast_as
6566	List all dates between two dates
6567	Parse a date .
6568	Load the contents of a file .
6569	Set missing rates for a given currency
6570	Compute missing rates .
6571	Get the rate for a given date .
6572	Convert amount to new currency
6573	Divide an iterable into n elements .
6574	Rotate frames .
6575	Read n bytes from file .
6576	Write a single record .
6577	Map words to memory .
6578	Return the comment area of the file .
6579	Add an array to the file .
6580	Close the file .
6581	Generate a sequence of positions
6582	Close the file .
6583	Load the PCK data
6584	Compute the correlation between two time series .
6585	Check if a call is within a logging statement .
6586	Check if the op is in a log op .
6587	Check if a dictionary is valid .
6588	Check whether a joined string is joined .
6589	Check if keyword is valid .
6590	Handle exception handling .
6591	Detect logging level .
6592	Get the name of the exception handler .
6593	Get the id attribute of the given value
6594	Check if a node is a bare exception .
6595	Check if an exception is raised .
6596	Delete file if it exists
6597	Create a widget widget widget for the database .
6598	Return rendered PDF content .
6599	Render a PDF template .
6600	quote a string
6601	Configure mongodb .
6602	Convert string to underscore .
6603	Auto - index all indexes .
6604	Parse a file .
6605	Load a file .
6606	parse a line into a PriceModel
6607	Translate a symbol .
6608	Load all symbols .
6609	Get the default session
6610	Add a price .
6611	Import prices from CSV file
6612	Print the latest price for a symbol
6613	List all available prices .
6614	Download prices .
6615	Prune price entries .
6616	Get a default session
6617	Create a new symbol map .
6618	List all available symbols
6619	Get symbol map by symbol .
6620	Read lines from a CSV file .
6621	Convert an entity to a price model .
6622	Convert a PriceModel to an entity .
6623	Read configuration file .
6624	Get the path to the config file .
6625	Create user config file
6626	Returns the path to the config file .
6627	Get the content of the config file .
6628	Set the value of an option .
6629	Get the value of an option .
6630	Save the configuration to a file .
6631	Parse a symbol .
6632	Add a price model .
6633	Add a price entity .
6634	Downloads the price for a symbol
6635	Get the session
6636	Get prices for a given date and currency .
6637	Fetches prices on a namespace
6638	Delete all stocks .
6639	Delete prices for a symbol
6640	Download a price from an agent
6641	Returns a list of securities for the given currency .
6642	Return a partial state partial .
6643	Update the child arguments for the child call .
6644	Recursively descend the tree .
6645	Decorator to handle multiple functions .
6646	Checks if a student part is equal to the given name .
6647	Check whether the state of a state is equal .
6648	Test whether the student contains text .
6649	Test whether a package has an import .
6650	Test whether text contains text .
6651	Check for printout .
6652	Assert that the state contains an error .
6653	Test whether a student has been chosen .
6654	Check if a function exists .
6655	Get the result from the process
6656	Overrides the state of the current state .
6657	Check whether an instance is an instance .
6658	Return a copy of the dictionary .
6659	Create a child state
6660	Get a parser from the tree .
6661	Test whether a context loop has a context loop .
6662	Check if the context has a context with the given name .
6663	Check that the part of a student part exists .
6664	Check if the part of the given index is valid .
6665	Check the arguments for the given name .
6666	Verify a call string .
6667	Get the true anomaly .
6668	Initialize the application .
6669	Initialize the LDAP configuration .
6670	Add a server to the pool .
6671	Remove a connection from the stack .
6672	Destroy a connection from the stack .
6673	Authenticate with LDAP .
6674	Authenticate using LDAP .
6675	Authenticate to LDAP .
6676	Get groups for a user .
6677	Get user info .
6678	Get user info for a given username .
6679	Get an LDAP object
6680	Return a connection to the LDAP server .
6681	Create a connection to the database .
6682	Create an LDAP connection .
6683	Destroy a connection .
6684	Perform a search query .
6685	Search for labels .
6686	Search for repositories .
6687	Search for all archives in a collection .
6688	speak the database
6689	Send a command .
6690	Update the secrets
6691	update headers
6692	Require client secrets
6693	Download a URL to a temporary file .
6694	Send GET request to url
6695	Update authorization token .
6696	Get or create a folder .
6697	Read a response from the server .
6698	create bucket
6699	Update client secrets .
6700	Initialize the client .
6701	Load the secrets .
6702	List log logs .
6703	List all logs
6704	Create folder folder
6705	Initialize the transfer client .
6706	List all containers
6707	Show the status of a backend
6708	Add a variable .
6709	remove a variable
6710	Activate the client
6711	Delete backend .
6712	Update the base
6713	Create basic auth header .
6714	Generate a signature for a payload .
6715	Generate a header signature .
6716	Perform a DELETE request .
6717	Perform a HEAD request .
6718	Perform a GET request .
6719	Verify the certificate
6720	Delete an image
6721	Get the installed version . py
6722	Return a list of dependencies for the given lookup .
6723	Get the singularity version
6724	Check if software is installed
6725	Return the absolute path to the current working directory .
6726	Get the thumbnail image .
6727	Run a command .
6728	Get metadata for an image
6729	Update the account credentials .
6730	Print the output of the response
6731	Kill all registered commands
6732	List logs .
6733	Returns a list of all containers
6734	Update the required credentials .
6735	Update Google Storage credentials .
6736	Get client
6737	Start an IPython notebook .
6738	Get manifest for a repository
6739	Get the manifest for a repository
6740	Get a temporary directory for downloading .
6741	Extract Docker container environment
6742	Update the base url
6743	Update the security token .
6744	Get the metadata for the artifact
6745	Get client settings .
6746	Get and update a setting .
6747	Update a setting .
6748	Generate an authorization token .
6749	List all builders
6750	Load a template by name
6751	Get the IP address of an instance
6752	Run build
6753	List all containers
6754	List all containers
6755	Run the registry .
6756	Run docker registry .
6757	Initialize the database
6758	Get the build template
6759	List all shared endpoints
6760	List endpoint names
6761	List files
6762	Upload a share image
6763	Read the secrets file
6764	Initialize the storage services .
6765	Delete an object from a bucket .
6766	Delete a file
6767	Destroy an instance
6768	Get the subparsers for the given parser .
6769	Generate a string with a delimiter .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a tar archive
6773	Get the hash of a file .
6774	Read a file .
6775	Read JSON file .
6776	Delete all files
6777	Push an image .
6778	Get or create collection collection .
6779	get collection by name
6780	Get a container
6781	List all images
6782	Inspect a container
6783	Rename an image
6784	Move an image
6785	Delete an image
6786	Add image to registry
6787	Push an image
6788	Parse a header from a recipe .
6789	Find a single recipe by name .
6790	Create a tar archive for a list of packages .
6791	Run a build .
6792	Update metadata for a blob .
6793	Format a container name .
6794	Determine whether the user should use color .
6795	Emits an error .
6796	Write a message to a stream .
6797	Display a list of rows .
6798	Push an image
6799	Get template by name
6800	Get the manifest for a given tag
6801	Get the build template
6802	Update client secrets
6803	Make a string representation of a class .
6804	Context manager for raising errors .
6805	Create proxy proxy proxy
6806	Returns the URL for the gravatar URL .
6807	Generate a gravatar URL .
6808	Check if an email has a gravatar .
6809	Get the gravatar profile for an email .
6810	Generator for chimera blocks .
6811	Perform chimera block quantization .
6812	Enumeration of Resonance .
6813	Enumerate a molecule .
6814	Normalize mol .
6815	Apply transform to molecule .
6816	Convert a molecule into a single atom .
6817	Validate a molecule .
6818	Disconnects from a molecule .
6819	Convert a molecule to a molecule .
6820	Enumerate a set of Tautomers .
6821	Convert a Tautomer string to a canonical form .
6822	Normalize molecule .
6823	Return the parent of a molecule .
6824	Return the fragment of a molecule .
6825	Return a copy of the molecule .
6826	Return a copy of mol .
6827	Return the charge of a molecule .
6828	Return the superparent of a molecule .
6829	Run molvs .
6830	Remove a fragment from the molecule .
6831	Choose the largest fragment from a molecule .
6832	Integrate an IVP .
6833	Get GitHub stats .
6834	Get the members of the org
6835	Get all teams of org
6836	List all repos .
6837	Get the total number of contributors .
6838	Get the number of open pull requests .
6839	Get all issues for a repo
6840	Get the readme of a repo .
6841	Get the license for a repo
6842	Get the commits for a repo .
6843	Write a JSON file to the repo
6844	Write totals to file .
6845	Write languages file .
6846	Ensure directory exists
6847	Remove a date from the database .
6848	Return a list of all organizations .
6849	Create an enterprise session .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query repositories for repositories .
6853	Prompts user to enter an organization .
6854	Write to a file .
6855	Create a project from a git repository .
6856	Create a project from a record .
6857	Convert a license .
6858	Get traffic from GitHub
6859	Get a list of releases .
6860	Get a list of referrers
6861	Get data for a given url
6862	Write a json file
6863	Write the data to a file .
6864	Check if data_to_check is in a dictionary
6865	Write data to file
6866	Write referrers to file .
6867	Processes a JSON file .
6868	Fetch data from a URL .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get the emails of the org
6872	Write logins to file
6873	Connect to a URL .
6874	Connect to Gitlab .
6875	Query projects .
6876	Clone a git repository .
6877	Compute the number of hours for a given slug .
6878	Remove null values from dictionary .
6879	Read a GQL query .
6880	Query GitHub .
6881	Submit a query to GitHub .
6882	Waits for a given time stamp .
6883	Print the number of seconds .
6884	Load a JSON file .
6885	Save data to file .
6886	Create a tfs connection
6887	Create a TFS project analysis client .
6888	Create a TFS core client .
6889	Create a Git client .
6890	Create a TFS Git client .
6891	Get Git Repos for a project .
6892	Get a list of Tfvc branches for a project .
6893	Get year commits .
6894	Calculate the total number of commits .
6895	Write to file .
6896	Configure a list of backend instances .
6897	Get metrics interface .
6898	Record timing information for a given stat .
6899	Context manager to run a timer .
6900	Decorate a function with a timer .
6901	Generate a tag .
6902	Log a timing event .
6903	Log a histogram .
6904	Perform a rollup .
6905	Convert a list of members to an integer .
6906	Convert a database value to an enum value .
6907	Convert a value to a Python value .
6908	Prepare the value for the given value .
6909	Recursively resolve a path .
6910	Convert a list of tuples into a dictionary .
6911	Return the mean of the sum
6912	Set the current rate .
6913	Return the mean of the current timer .
6914	Mark the last value .
6915	Serialize a metric .
6916	Serialize a metric .
6917	Format a metric string .
6918	Send a metric to the client .
6919	Check if an option exists .
6920	Convert JSON data to JSON - safe format .
6921	Get or set the value of an option .
6922	Return a mapping of ledger codes to GUID codes .
6923	Get the list of available divisions .
6924	Map exact number to foreign invoice numbers .
6925	Solve the lattice .
6926	A decorator to register a view .
6927	Creates a simple form view .
6928	A decorator to mark a method view as a view view .
6929	Creates an API view .
6930	Creates a generic API view .
6931	Register a model view set .
6932	Create a stream from a file descriptor .
6933	Read the file descriptor .
6934	Close the connection .
6935	Called when a connection is lost .
6936	Schedule a watch request .
6937	Remove a watch .
6938	Setup a watch for a given path .
6939	Initialize the connection .
6940	Get an event from the stream .
6941	Trigger a touch .
6942	Update the interval .
6943	Update the interval .
6944	Close all connections .
6945	Return True if the connection is approved
6946	Connect to NSQd .
6947	Query lookupd for lookupd
6948	Set the max_in_out of this connection .
6949	Called when a message is raised .
6950	Register a callback for a given name .
6951	Remove a callback .
6952	Calls all registered listeners .
6953	Publish a message to a topic .
6954	Set feature transform .
6955	Run prediction function .
6956	calculate theta of s
6957	Parse a log file .
6958	Clean up fastq files .
6959	Merge default adapters .
6960	Run trimmomatic
6961	Read a depth file .
6962	Run depth analysis .
6963	Set the template file
6964	Set the name of the main channel .
6965	Get user channel
6966	Render a template .
6967	Render a template file .
6968	Set the channels for the channel .
6969	Update the main forks for the main loop .
6970	Set the secondary channel for the given source .
6971	Update the attributes of the component .
6972	Set the compiler channels .
6973	Set raw inputs using raw input .
6974	Set secondary inputs
6975	Set extra inputs .
6976	Parse coverage header .
6977	Parse assembly file .
6978	Get GC content .
6979	Filter contigs based on comparisons .
6980	Get assembly length
6981	Write the assembly to a file .
6982	Write the assembly report to a file .
6983	Remove inner links from text .
6984	Make sure the innerfork is in the same order .
6985	Perform sanity checks on a pipeline .
6986	Parse a pipeline .
6987	Tries to find the best match in the pipeline .
6988	Parse a string from a string .
6989	Establish a linear connection .
6990	Establish a connection between two processes .
6991	Add unique identifiers to pipeline .
6992	Remove unique identifiers from pipeline links .
6993	Check if required files exist .
6994	Convert a header to a dictionary .
6995	Convert a string to hours minutes .
6996	Convert size bytes to a float .
6997	Get the pipeline processes
6998	Clear inspect info .
6999	Update the barrier status .
7000	Retrieve lines from log file .
7001	Assign cpu and memcached resources .
7002	Update process stats .
7003	Parse log file .
7004	Update the inspect info .
7005	Display the overview .
7006	Updates the top line .
7007	Left left left left left left left right left left left left left left right left left left right left left left left right left left left right left left left left left left left left right left left left left left left right left left left left left right left left left right left left left left left right left left left left left left left left left right left left left left left left left left left left left left left left left left left left left left right left right left left left left left left left right left left left left left left left left right left left right left left right left left right left right left right left left left left left
7008	Get last n lines
7009	Prepare static files
7010	Read a JSON file and return a dictionary .
7011	Get the hash of the run .
7012	Get the path to the next flow .
7013	Splits a fasta file
7014	Main entry point for profiling .
7015	Run brewuendo .
7016	Run a recipe .
7017	List all available recipes .
7018	Validate a pipeline string .
7019	Build an upstream upstream .
7020	Builds a stream of tasks .
7021	Define a pipeline string .
7022	Runs the given list of tasks .
7023	Convert a component into a string .
7024	Write a report to a report .
7025	Run the trimmomatic report .
7026	Replace assembly names in assembly .
7027	Remove temporary fastq files
7028	Parse a list of files .
7029	Parse a log file .
7030	Iterate over the database .
7031	Get the contig ID from a string .
7032	Get plot data
7033	Write report data .
7034	Run assembly report
7035	Parse assembly file .
7036	Get summary statistics
7037	Get a list of tuples for each contig .
7038	Calculate GC property .
7039	Get the gc_window of the contigs
7040	Run skesa .
7041	Create a JSON report
7042	Return the index of the trimmed list .
7043	Read a range of nucleotide sequences .
7044	Calculate the optimal range of samples .
7045	Get summary information from a file .
7046	Check the health of a summary file .
7047	parse bowtie log
7048	Parse a process name .
7049	Add a dependency to a process .
7050	Search the tree rooted at the given template .
7051	Build the header
7052	build the footer
7053	Set the channels
7054	Set initial inputs
7055	Setup secondary channels
7056	Set the status channels for each process .
7057	Convert a resource dictionary into a string .
7058	Return a string representation of the container
7059	Returns a string representation of the parameters
7060	Returns a string with the merged parameters
7061	Returns the manifest for the pipeline
7062	Set the configuration for all processes .
7063	Write a dictionary to a JSON file .
7064	Render the pipeline
7065	Write configuration files .
7066	Export the parameters as JSON .
7067	Export directives as JSON .
7068	Fetch a list of docker tags
7069	Build the configuration file .
7070	Set the kmer options
7071	Run SPAdes .
7072	Get the script id for the report
7073	Update the trace .
7074	Update the log file .
7075	Send a report to the report
7076	Send a report to the server .
7077	Close the connection to the server .
7078	Convert the adapters file to a fastq file .
7079	Run fastqc command .
7080	Write the master to the output file
7081	Main entry point .
7082	Add version information to the version file .
7083	Generate a JSON file
7084	Print a message to stdout .
7085	Parse a dictionary .
7086	Collect processors from process_map .
7087	Guess the compression of a file .
7088	Convert a qual string to a range .
7089	Return a list of encoded encodings .
7090	Parse a coverage table .
7091	Filter assembly file .
7092	Run samtools view .
7093	Evaluate minimum coverage .
7094	get assembly size
7095	Main entry point .
7096	Convert CamelCase to CamelCase .
7097	Collect the process classes from the components .
7098	Process a newick file
7099	Generate a fasthull .
7100	Map w to data
7101	Perform a median filter .
7102	Compute the KL divergence .
7103	Compute the distance between X .
7104	Compute the covariance matrix .
7105	Gaussian filter .
7106	Compute the distance between X .
7107	Circular shift
7108	Create an embedded space for the embedded space
7109	Helper function for plotting .
7110	Plot the boundaries of all boundaries .
7111	Plot labels .
7112	Plot a single track .
7113	Plot a tree .
7114	Get a list of feature segments .
7115	Convert a sequence of feature segments into a 2D array .
7116	Compute similarity .
7117	Fit the model to the data .
7118	Fit the data to X and y .
7119	Reads references from a file .
7120	Find an estimation .
7121	Save estimations .
7122	Returns a list of all available algorithms .
7123	Get the configuration for the given feature .
7124	Get dataset files
7125	Reads the hierarchy from a jam file .
7126	Get the duration of a feature file .
7127	Write an IRX file to a file .
7128	Get the path of the dataset .
7129	Align a segmentation to a song .
7130	Estimate the timestamps of the beat .
7131	Read the annotations from the JAMS file .
7132	Compute the beatsync features .
7133	Read the features file .
7134	Write the features .
7135	Returns a list of all parameter names .
7136	Compute framesync timesync .
7137	Compute frame times .
7138	The list of features
7139	Select features from a file .
7140	Preprocess the input features .
7141	Preprocesses the labels and labels and labels .
7142	Run the command line .
7143	Print results .
7144	Compute GTF results .
7145	Compute the information gain for an annotation .
7146	Process a track .
7147	Return the filename of the results file .
7148	Process a track .
7149	Creates a new config variable .
7150	Compute all features for each file .
7151	Process a single dataset .
7152	Gaussian cost function .
7153	Lognormalize function .
7154	Normalize a F .
7155	Normalize X .
7156	Get the time frames for a given duration .
7157	Remove empty intervals .
7158	Searify audio clicks .
7159	Synchronize labels between two labels .
7160	Processes a segmentation level .
7161	Align the end of the end of the hierarchy
7162	Compute the distance between nodes .
7163	Estimate the Knee
7164	Get clustering data .
7165	Run kmeans .
7166	Compute the bic correlation coefficient
7167	Return the magnitude of X .
7168	Convert a json file to a bounds array .
7169	Convert a json file to a bounds array .
7170	Convert a json file to a list of labels .
7171	Read a JSON file from a JSON file .
7172	Compute the 2D Fourier Transform .
7173	Compute the labels for each label .
7174	Filter activation matrix .
7175	Get the boundaries module for the specified boundaries .
7176	Get the module module for the given labels_id
7177	Run hierarchical algorithm .
7178	Run a flat file .
7179	Run the algorithm .
7180	Process a track .
7181	Process a audio file .
7182	Updates the weights of the model .
7183	Translate text into text .
7184	Convert a function into a coroutine .
7185	Create an accumulator .
7186	Executor for globus task
7187	A generator that yields text from iterable .
7188	Send lines to stdin .
7189	Creates a connection to the given interface .
7190	Translate a source to a single word .
7191	Return a dictionary of translations for a language .
7192	Print the translation table for the given language .
7193	Remove nodes from a network .
7194	Write a network to an HDF5 file .
7195	Create a network from a pandas HDF5 file .
7196	Set the variables of a node .
7197	Calculate aggregate accessibility variables .
7198	Get node ids from kdtree .
7199	Plot the given data .
7200	Set the poi for the given category .
7201	Find the closest pois for a given category .
7202	Return a list of low connectivity nodes .
7203	Processes a node
7204	Make an osm query
7205	Build a query for a node .
7206	Build an OSM query .
7207	Check if value is a regular expression .
7208	Compare the given value with the given expectation .
7209	Decorator for fluent functions .
7210	Compare a value against a string .
7211	Trigger a list of methods .
7212	Check if the request matches the request .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the body .
7216	Set a JSON response .
7217	Set a key .
7218	Append functions to the list .
7219	Trigger a Pook .
7220	Add a URL to the request .
7221	Set request headers .
7222	Ensure headers are present .
7223	Ensure headers are present .
7224	Set Content - Type header .
7225	Add parameters to the request .
7226	Set the body of the request .
7227	Set the JSON representation of the request .
7228	Set the XML for the request .
7229	Load a file .
7230	Persist the changes to the database .
7231	Set the error .
7232	Create a reply to the mock
7233	Match request .
7234	Activate a function .
7235	Set the mock engine .
7236	Enable or disable a network .
7237	Create a mock
7238	Remove a mock from the list .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Returns True if the request should be used .
7242	Match request .
7243	Make a copy of this request .
7244	Activate an engine .
7245	Context manager .
7246	Add interceptors to the engine .
7247	Remove an interceptor .
7248	Get a setting from a connection .
7249	Convert SQL to SQL
7250	Set the original value before saving it .
7251	Get the placeholder for the given value .
7252	Get a column from the database
7253	Returns a placeholder for the encryption key .
7254	Hunt YAML keys for repeated YAML keys .
7255	Base regression .
7256	Return the covariance matrix .
7257	Recurse through the tree .
7258	Calculate the mean and variance .
7259	Propagate the mean and variance .
7260	Return the explained variance of the tree .
7261	Compute the clockwise regression .
7262	Find the best root of the tree .
7263	set the Tc value of Tc
7264	Calculate the branch count .
7265	Calculate the cost of a node .
7266	Attach this branch to the tree .
7267	Optimize the coalescent time scale
7268	Convert profile to sequence
7269	Normalize a profile .
7270	Set the GTR .
7271	Set GTR model .
7272	Set sequence length
7273	Add sequences to the tree .
7274	Prepare the tree .
7275	Calculate the root nodes .
7276	Calculate the distance between each branch .
7277	Reconstruct the alignment of the tree .
7278	Get the mutation matrix for a node .
7279	Return the expanded sequence .
7280	Create the Fitch profiles
7281	Compute the fitch state at pos .
7282	Find the overlap between two arrays .
7283	Compute the sequence LH for a given position .
7284	The ancestral likelihood of the tree .
7285	Convert branch length to GTR .
7286	Optimize the branch length .
7287	Run the branch length optimization .
7288	Return the optimal length of a branch .
7289	Optimize seq and branch lengths .
7290	Reconstruct an alignment
7291	Compute the Q .
7292	Creates a new gtrim .
7293	Return the model for the given model .
7294	Fix the GTR rate matrix .
7295	Properly compute the probability of t .
7296	Optimizes optimal T
7297	Optimized version of optimized txt .
7298	Properly compute the probability of a profile .
7299	Evolve the evolution .
7300	Return the log - likelihood of a sequence .
7301	Set branch length mode
7302	Filter the clock model
7303	Plot root to tip .
7304	Resolve multiple mergers .
7305	Print the log - likelihood log - likelihood .
7306	add a coalescent model to the tree
7307	Find the best root of the tree .
7308	Make sure the tree is inferred
7309	Create GTR model
7310	Read a vcf file .
7311	Perform ancestral reconstruction .
7312	Calculate the FWHM for a distribution .
7313	Create a new distribution with the given weight .
7314	Multiplies distributions .
7315	Assign dates to the clock tree
7316	Setup a tree regression .
7317	Calculate the maximum likelihood tree .
7318	Return the likelihood of the tree .
7319	Convert dates to dates
7320	Calculate the uncertainty of a node .
7321	Get the maximum region of a node .
7322	Find the minimum value of an interpolation object .
7323	Calculate the median of an object .
7324	Convert datetime to date .
7325	Create a DataFrame from a simulation model .
7326	Connect to guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the client .
7330	Send an instruction .
7331	Establish a handshake .
7332	Convert unicode string to utf - 8 .
7333	Deserialize an instruction .
7334	Encode an arg .
7335	Encode this instruction .
7336	Get the URL for the class .
7337	Get the URL for this instance .
7338	Get the URL for the class .
7339	Download the file to a temporary file .
7340	Retrieve the parent job .
7341	Prompt user for login .
7342	Login to the user .
7343	Display the user .
7344	Print a user .
7345	Create a new QuerySet with the given filters .
7346	Create a new GenomicFilter with the specified range .
7347	Return a new GenomicFilter with the specified position .
7348	Retrieve facets from the query .
7349	Process filters .
7350	Return the next page .
7351	Execute a query .
7352	Migrate dataset to target
7353	Run the solver .
7354	Download all files from a remote path .
7355	Construct an instance from a dictionary .
7356	Log out of the user .
7357	Make an API request .
7358	Retrieve the child object for this task .
7359	Cancels the job .
7360	Parse snpeff output .
7361	Convert a row to a dictionary .
7362	Get the credentials file
7363	Save the configuration to a file .
7364	Format a value .
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Formats a table .
7370	Migrate this dataset to another dataset .
7371	Validate a full path .
7372	Upload the contents of a file .
7373	Validate a vault path .
7374	Validate an API host URL .
7375	Add files to the manifest .
7376	Annotate records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new formatatter .
7380	Format data into output format .
7381	Wrapper for tabulate .
7382	Get user config directory .
7383	r Get the paths for the system .
7384	Read the default config file .
7385	Read configuration files .
7386	Path to user config file
7387	A list of system config files
7388	Return the list of files for this project .
7389	Write default config file .
7390	Read config files .
7391	Truncate a string .
7392	Replace a string in a string .
7393	Calls commands in subprocess .
7394	Apply command options to a command .
7395	Apply an option to a command .
7396	Initialize the options .
7397	Run pep8radius .
7398	Run the command .
7399	Truncate a list of strings .
7400	Format a list of numbers .
7401	Format a row .
7402	Helper function for adapter .
7403	Generate a table from data .
7404	Render a template file .
7405	Checks if the given type is numeric .
7406	Checks if the given type is a boolean .
7407	Return True if type is a binary type .
7408	Generate a key from a template .
7409	Generate a keypair pair .
7410	Finds all objects matching a template .
7411	Insert image into image
7412	Export a panel
7413	Return the first weekday of a weekday .
7414	Repeat the current day .
7415	Perform repeat_repeat_repeat_repeat .
7416	Helper function to handle biweekly batches .
7417	Handle a single chunk .
7418	Returns a list of variants for a collaborator .
7419	Export verified variants .
7420	Export a list of Variant objects to a file
7421	Update a user .
7422	List variant variants .
7423	Get a variant .
7424	Get a variant
7425	Verify a variant verification .
7426	Export a single CLIN variable .
7427	List of cancer variants .
7428	View a variant .
7429	View an evaluation .
7430	Get a classification classification
7431	Upload a panel .
7432	Download verified emails .
7433	Given a set of gene IDs return a dictionary of gene ids .
7434	Add incomplete venetrance info
7435	Link HGNC gene IDs .
7436	Send a request to MME .
7437	Get a list of connected nodes .
7438	Get the coordinates of a cytoband
7439	Get the sub category for a given variant .
7440	Calculate the length of the length of a variant
7441	Get the end of a variant
7442	Parse the coordinates of a single variant .
7443	Run cytoband .
7444	Create panel list .
7445	Update a panel .
7446	Export panel .
7447	Edit a gene .
7448	Save a delivery report .
7449	Get a dictionary of hpo terms .
7450	Display whitelist users .
7451	Build a phenotype object
7452	Get a single gene
7453	Convert a query to JSON .
7454	Display the institute .
7455	List transcripts .
7456	Display a day .
7457	Parse variants query
7458	Retrieve variants from a string .
7459	Create a variant variant
7460	Create a variant .
7461	Parse a variant .
7462	Generate a header for variants export .
7463	Get variant information from a set of genes .
7464	Get predictions for a given set of genes .
7465	Convert a variant object into a case .
7466	Find a bai file if it exists .
7467	Retrieve a list of variants for a variant
7468	Parse a gene .
7469	Convert a transcript object to a string .
7470	Return the end position of a variant
7471	Return the frequency of a variant
7472	Convert clinsig to human readable format .
7473	Return the URL for the link for the given variant object .
7474	Return a link to the cosmic link for a variant .
7475	Generate a link to a beacon .
7476	Generate a URL for a variant .
7477	Return the human readable representation of the spidex .
7478	Return the list of parents of a variant
7479	Return a list of callers for a variant
7480	List cancer variants .
7481	Export a CLAR file .
7482	Get a CLINVars submission for a particular case .
7483	Get an ACCMG for a variant .
7484	Submit a variant ACCG .
7485	Create an evaluation object .
7486	Upload a panel to an institute .
7487	Create a file for verified variants .
7488	Export all genes
7489	Parse a clnig string .
7490	Parse compound information .
7491	List all genes .
7492	Build an individual .
7493	Load variants from a case .
7494	Show a case .
7495	List all collections .
7496	Create institute .
7497	Update institute institute .
7498	Get file handle .
7499	Get net number from request
7500	Get the next and previous value
7501	Check if the year is valid .
7502	Checks the weekday of the month and day .
7503	Parse case data .
7504	Add ped info to a dictionary .
7505	Parse an individual .
7506	Parse individual individuals .
7507	Parse a case .
7508	Parse a ped file .
7509	Build an evaluation object .
7510	Create a report for a particular case .
7511	Checks whether the given terms are pathogenic .
7512	Return whether or not the given terms are likely or not .
7513	Determine whether or not two terms are likely .
7514	Convert a list of terms to an acmgg term .
7515	Add information about a single gene .
7516	Fetch variants from a case .
7517	Retrieve variants from sanger .
7518	Fetch a single variant .
7519	Retrieve gene variants from the database .
7520	Returns a list of entities verified by institute_id
7521	Returns a list of causatives for a case .
7522	Checks to see if a case object is valid for the case .
7523	Iterate over the authors of a case .
7524	Delete variants for a case .
7525	Return a list of variants that overlap a variant .
7526	Get evaluated variants for a case .
7527	Retrieve a region from a case .
7528	Retrieve variants for a given sample .
7529	Connect to a MongoDB server .
7530	Get a list of submission objects from a form .
7531	Generate a header for aclar submission .
7532	Convert a list of submissions into a CSV file .
7533	Load transcripts from an ENsembl .
7534	Create a panel .
7535	Build an exon
7536	Delete a panel
7537	Delete indexes .
7538	Delete user from database
7539	Delete genes collection .
7540	Delete exons .
7541	Delete a case .
7542	List individuals .
7543	Parse MatchMaker match objects .
7544	Show cases .
7545	Load user by email address .
7546	Login to Google .
7547	Build an institute .
7548	Delete an event .
7549	Create an event .
7550	Get events for a particular institute .
7551	Get all events for a user .
7552	Add a phenotype .
7553	Remove a phenotype term from a case .
7554	Create a comment .
7555	Parse individual genotypes .
7556	Checks whether a chromosome is valid .
7557	List hpo terms .
7558	List all transcripts .
7559	Load all exons
7560	Load a region in a case .
7561	Get all events for a particular month .
7562	Return a queryset of objects that have been cancelled .
7563	Parse requirements . txt file .
7564	Get an existing gene .
7565	Update a panel .
7566	Create a new panel
7567	Exports a panel object
7568	Return information about an archive .
7569	Migrate a case .
7570	Migrate a case .
7571	Run research .
7572	Load HGNC genes .
7573	View an hpo .
7574	Create a Flask app
7575	Configure extensions .
7576	Register blueprints .
7577	Configure coverage .
7578	List aliases .
7579	Build a panel
7580	Write verified variants .
7581	Export variants .
7582	Return a VCF entry for a variant .
7583	Run mongodb server .
7584	Generate an MD5 key for a list of arguments .
7585	Initialize MongoDB .
7586	Setup the database .
7587	Run the index index .
7588	Setup the database setup .
7589	Run Scout setup .
7590	Setup the connection
7591	Display institute information .
7592	Parse the genetic models .
7593	List panel panels .
7594	Add institute to database .
7595	Updates an institute .
7596	Fetch an institute
7597	Return True if the given date is valid .
7598	Convert date to date .
7599	Generate gene IDs .
7600	Parse a rank score entry .
7601	Create a user .
7602	Check if the connection is valid .
7603	Initialize the application .
7604	Load a delivery report .
7605	Add a user to the database .
7606	P pileup .
7607	Load a list of exons .
7608	Update the compounds for a case .
7609	Add gene links .
7610	List gene IDs .
7611	Parse an hgnc file .
7612	Parse hgnc genes .
7613	Get an open clinvar submission for a user .
7614	Update aclin_id for aclin_id .
7615	Returns the CLIN variable ID for the given submission id .
7616	Add variants and case data to the database .
7617	Update the status of aclar submission .
7618	Retrieve all clinvar submissions for a user .
7619	Delete a clinvar object .
7620	Convert a case ID to a dict .
7621	Parse hpo output .
7622	List all genes .
7623	View a gene .
7624	List genes .
7625	Check if panel exists in db
7626	Load clinical SNV variants for a particular region .
7627	Load SCout .
7628	Decorator for rendering a function .
7629	Get institute and case .
7630	Return a list of institute institutes .
7631	Get the hgnc_id of a gene
7632	Update a panel .
7633	List all disease terms .
7634	Load the disease terms .
7635	Parse frequencies .
7636	Get the frequency of a variant
7637	Return a dictionary of variant frequencies
7638	Display users .
7639	Build a HGNC Gene
7640	Load a gene panel
7641	Fetches the OMIM - auto - auto - creates a new gene panel
7642	Compare two MIM panels .
7643	Update the MIM version
7644	Add a panel to the database .
7645	Retrieve a panel .
7646	Delete a panel
7647	Fetch a gene panel from the database .
7648	Retrieve genes for a gene .
7649	Convert a case to a panel .
7650	Update a panel .
7651	Add a panel to the panel .
7652	Add a panel to the panel .
7653	Get the clinical symbols for a case .
7654	List cases .
7655	Emit a record .
7656	Load indexes .
7657	Update indexes .
7658	Drop all indexes
7659	Build a MongoDB variant query .
7660	Build a mongo query .
7661	Create clinsig query
7662	Add genomic coordinates to the query .
7663	Add panel and genes related to the query
7664	Clear the database .
7665	Parse a CSV file .
7666	Build a clnig signature
7667	Load multiple gene objects into the database .
7668	Load a single transcript
7669	Load a set of transcripts into the database .
7670	Fetch a gene by its identifier .
7671	Get hgnc_id for a symbol
7672	Fetch genes for a given symbol .
7673	Fetch all HGNC genes
7674	Return the number of genes in a build .
7675	Drop all genomes from the database .
7676	Drop transcripts collection .
7677	Drop the exons collection
7678	Fetch all transcripts for a given build .
7679	Convert hgnc symbol to a dictionary .
7680	Get gene by symbol
7681	Get all genes by alias
7682	Get all ensembl genes
7683	Convert an alias to HGNC symbol .
7684	Add hgnc_id to the guild .
7685	Build a dictionary of coding intervals .
7686	Update omim panel
7687	List all cases .
7688	Get a case .
7689	List matchmaker matches .
7690	Match a matchmaker .
7691	Delete matchmaker .
7692	Display a case report .
7693	Render a case report .
7694	Display a case .
7695	Add a phenotype to the institute .
7696	List phenotypes .
7697	List events .
7698	View the status of a case .
7699	Assign a case to an institute .
7700	List all terms .
7701	Mark a variant validation .
7702	Mark a case as a case .
7703	Send a delivery report .
7704	Share a case .
7705	Rerun a case .
7706	Open a research .
7707	Convert a VCF2Ccyt code to a cable .
7708	Send multiqc request .
7709	List cases .
7710	Create a report for a case .
7711	Calculate coverage report contents
7712	Retrieve a list of CLAR submissions for a user .
7713	Export MT files for a case
7714	Update the case s synopsis .
7715	Query HGPO ids for diseases .
7716	Convert a vcf to a ct closure .
7717	Perform multiqc .
7718	Returns a list of strings that are unevaluated .
7719	Add a user to the MME .
7720	Delete a MME request
7721	Return a dictionary of matches for the MME .
7722	Match a match to a match .
7723	Update gene genes .
7724	Parse callers .
7725	Build a transcript
7726	Load institute into database
7727	Parse the CADD entry .
7728	Create a case .
7729	Update a single variant .
7730	Update the rank of a case .
7731	Update variants for a variant .
7732	Update compound objects .
7733	Update compound variants .
7734	Update compounds on a case .
7735	Load a single variant .
7736	Upsert a single variant .
7737	Load multiple variants .
7738	Assign a case to a case .
7739	Share a case
7740	diagnose a case .
7741	Mark a case as checked .
7742	Create an event for ordering validation .
7743	Return a list of Sanger objects .
7744	Validate a variant .
7745	Mark a variant as causative .
7746	Create a dismiss variant for a variant
7747	Update the ACMG for a variant .
7748	Parse variant ids .
7749	Convert a simple id to a string .
7750	Generate a md5 key for a document .
7751	Convert a panel .
7752	Get a variant ID from a variant object .
7753	Fetch the number of cases in the database .
7754	Update the list of genes for a case .
7755	Fetch a case .
7756	Delete a case .
7757	Add a case to the database .
7758	Replace a case .
7759	update case id
7760	Submit an evaluation .
7761	Get evaluations for a given variant
7762	Parse a list of transcripts .
7763	Parses an ENsembl query and parses the results .
7764	Parse an ENsembl request and parse the results .
7765	Parse an ENsembl line .
7766	Parse ENsembl genes from file
7767	Parse ENsembl exons .
7768	Parse ENsembl exon request .
7769	Initialize logging .
7770	Parse an omim line
7771	Parse OMIM file .
7772	Parse genemap output .
7773	Scanners .
7774	Convert a string to an integer .
7775	Format a month .
7776	Format day .
7777	Format month name .
7778	Add information for the popup .
7779	Get panel info
7780	Parse a single gene .
7781	Parse gene lines .
7782	Parse a gene panel .
7783	List diseases .
7784	Update HPO terms .
7785	List all users .
7786	Parse the conservations .
7787	Parses a variant .
7788	Get information about the general case .
7789	Get a list of cases .
7790	Convert context to JSON response .
7791	Get year and month
7792	check for cancelled events
7793	Fetch an hpo term
7794	Search HPO terms .
7795	Retrieve a disease term .
7796	Get all disease terms for a given gene .
7797	Load a disease term into the database .
7798	Generate a list of GO IDs .
7799	Read HDF5 file .
7800	Set up frequencies for each channel
7801	Setup the timestamps for the time axis
7802	Read a filterbank file .
7803	Compute the LST position
7804	Fill DC bin .
7805	Print info about the file
7806	Calculate the extent
7807	Plot waterfall .
7808	Plot time series .
7809	Write the signature to a file .
7810	Calculate the bandpass bandpass
7811	Convert data to coarse .
7812	Apply Manger model .
7813	Calculate the discharge coefficients for a waterfall
7814	Calculate the fracpols
7815	Write polfil . waterfall
7816	Find the closest value in xarray .
7817	Rebuild a numpy array .
7818	Unpack a numpy array .
7819	Calculate the difference between waterfall
7820	Plot Stokes diode Diagram .
7821	Generate a calibrated Diode .
7822	Plot gain offsets
7823	Open a file .
7824	Setup selection range
7825	Calculate the selection size
7826	Calculate selection shape .
7827	Set up channels .
7828	Set up the frequencies for each channel
7829	Populate timestamps .
7830	Populate the frequency range .
7831	Calculate the number of channels .
7832	Calculate the number of blobs
7833	Checks if the file is heavy .
7834	Read the data from the file .
7835	Read all data from file
7836	Read a single row .
7837	Read data from the container .
7838	Update the header .
7839	Print information about the file .
7840	Write to file .
7841	Write to HDF5 file .
7842	Write to HDF5 light file .
7843	Get the size of the blob dimension
7844	Determine the chunk sizes .
7845	Grab the data from the plot
7846	Generate spectra from Guppi raw file .
7847	Read first header .
7848	Find the number of data blocks .
7849	Print statistics for next data block .
7850	Plot the next data block .
7851	Generate filterbank header .
7852	Find the header size of a file .
7853	Simple command line tool .
7854	Generate HDF5 files .
7855	Perform a foldcalculation on data .
7856	Integrate waterfall
7857	Calculate flux
7858	Calculate the center frequency
7859	Calculate the ratio of f_on and f_off
7860	Calculate the density of waterfall
7861	Calculate the Tsys spec
7862	Calculate fluxes for waterfall
7863	Return the length of the header of a file .
7864	Return True if file is a filterbank .
7865	Replace a header with a new value .
7866	Generate signature header .
7867	Convert angle to sigproc angle
7868	Calculate the number of ints in a file .
7869	Convert to dictionary .
7870	Creates a subparser for rec_type .
7871	Create a command line parser
7872	Remove comments from text .
7873	Add a default name to a string .
7874	Parse a single line .
7875	Parse a string of lines into a dictionary .
7876	Parse a zone file
7877	Return a copy of the given field .
7878	Parse a schema string .
7879	Convert classes to python package .
7880	Return the source code for the given schema .
7881	Decorator to disable auto - register
7882	Dump record in json - encodable object format
7883	Load a record from a JSON dictionary .
7884	Deserialize a JSON record .
7885	Add a record to the database .
7886	Get a record by name .
7887	Return a dictionary representation of variables .
7888	Mixin mixin_cls .
7889	Create a new record from a class .
7890	Return a dictionary representation of a record .
7891	Get the root schema for a record .
7892	Read mr file .
7893	Write output to output stream .
7894	Push the first element of a Dict into a new OrderedDict .
7895	Retrieve a search result from the API .
7896	Get a raw search result .
7897	Return a list of all entities in this collection .
7898	Get an entity from the collection .
7899	Given a quote return a new quote
7900	Escape a filter .
7901	Create an elementary rotation matrix .
7902	Construct covariance matrix .
7903	Calculate the variance of the magnitude of an error .
7904	calculate parallax error
7905	Gets the magnitude error of G .
7906	Return the magnitude error of G .
7907	Make a plot
7908	Calculate the average number of transits .
7909	Return the angular distance between two vectors .
7910	Transform cartesian coordinates .
7911	Transform sky coordinates to spherical coordinates .
7912	Transform a covariance matrix .
7913	Calculate the error scaling factor .
7914	Make a plot
7915	Make a plot
7916	Apply a function to a list of functions .
7917	Decorator for debugging purposes .
7918	Convert a string to a unicode string .
7919	Apply a function to each item in the collection .
7920	Return a new QuerySet with the given function .
7921	Return a new Collection with the given function .
7922	Return a new Collection from the collection .
7923	Return a new Collection with the given function .
7924	Combine multiple collections together .
7925	Wrapper around find method .
7926	Return the path to the os .
7927	Return an iterator over all characters in group .
7928	Generator for register_options
7929	Convert an event tuple to a string .
7930	Build a list of scheduled runs .
7931	Print the results .
7932	Print the results to stdout .
7933	Print the current state of the experiment .
7934	Remove comments from a string .
7935	Round a number to the nearest integer .
7936	Split a list of indices into a list of blocks .
7937	Calculate cache access
7938	Calculate the number of cycles in the memory .
7939	Analyze the kernel .
7940	Perform IAC analysis .
7941	Strip and uncomment an ASM file .
7942	Strip unreferenced labels .
7943	Select the best block in assembly .
7944	Prompt the user for a block pointer .
7945	Display a list of blocks in the assembly file .
7946	Insert markers at start_line .
7947	Implementation of IACAnalysis .
7948	Entry point for the main loop .
7949	Simulate the model .
7950	Generator for iterating over an interval
7951	Get the last modified datetime in the directory
7952	Validate arguments .
7953	Run the script .
7954	Merge two pickle files .
7955	Symbol
7956	Convert multidim to 1d array .
7957	Convert a multidim to 1d array .
7958	Find a node type that matches a given type .
7959	Force a function to be iterable .
7960	Make sure all datatypes are valid .
7961	Set a constant .
7962	Subtract constants from expr .
7963	Get the sizes of all variables .
7964	Calculate the relative offset of a variable .
7965	Remove duplicate accesses
7966	Return the iteration length of the loop .
7967	Generator for looping .
7968	Return a list of free symbols .
7969	Return a dictionary mapping variables to symbols .
7970	Compute the distance between all variables .
7971	Convert global iterator to indices .
7972	Get global iterator .
7973	Convert indices to global iterator .
7974	Return an iterator over the global iteration .
7975	Print kernel info .
7976	Print all variables .
7977	Print all constants .
7978	Print the kernel code .
7979	Convert a math expression to a symbol .
7980	Get the offset of a variable .
7981	Get the basename of the AST .
7982	Get the index type of the loop .
7983	Builds a list of constant declarations .
7984	Returns a list of array declarations .
7985	Get the list of nodes in the kernel .
7986	Build the array declaration for all arrays .
7987	Find the innermost loop in loop_nest .
7988	Build the initial initialization for the kernel .
7989	Build a dummy call .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get kernel code .
7993	Build a kernel call .
7994	Get the main code .
7995	Compute the ARAC analysis .
7996	Build the executable .
7997	Convert a string to a sympy .
7998	Get the identifier for the file .
7999	Return the last modified datetime .
8000	Return a CacheSimulator object
8001	Calculate the bandwidth .
8002	Get the compiler and flags .
8003	Parse a perfctr event .
8004	Enforces no longer overlap
8005	Get the path of the header file .
8006	Align an iteration to the given iteration count .
8007	Returns a list of load counts for this machine
8008	Get the number of hits
8009	Returns a list of misses
8010	Returns a list of all stores in the machine .
8011	Returns a list of evicts of evicts .
8012	Get information about the memory
8013	Temporarily replace an environment variable .
8014	Configure the argument group .
8015	Print the results of the cache .
8016	Parse the README . md file .
8017	Schedule a job to retry .
8018	Build a menu item
8019	Record an item in Sailthru .
8020	Get the course content for a course
8021	Get the content of the course .
8022	Update unenrolled list
8023	Send a course refund notification .
8024	Send an offer assignment notification notification .
8025	Get the logger configuration .
8026	Attempts to retry an order .
8027	Fulfill an order .
8028	Get a Sailthru client .
8029	Get a key from the cache .
8030	Set a key in the cache .
8031	Get the value of the configuration variable .
8032	Get the filename of the overrides file .
8033	Get a value by version .
8034	Version of Eplus .
8035	Return a dictionary of file references .
8036	Populate the dev_data from a JSON dictionary .
8037	Get all external files
8038	Set default values for all tables .
8039	Prepare the extensible metadata for this field .
8040	Get the extended name of the field .
8041	Return a dictionary of the short references for all external files .
8042	Get the value of a given column .
8043	Updates the value of the given field .
8044	Updates the Instance .
8045	Set default values .
8046	Add multiple fields to this record .
8047	Remove an item from the collection .
8048	Insert value at index .
8049	Delete the record .
8050	Register a hook hook .
8051	Register a link .
8052	Create a re - compile regular expression .
8053	Return the duration of a given time .
8054	Serialize this event into a dictionary .
8055	Make an HTTP request .
8056	Get a list of all available services .
8057	Try to create a directory .
8058	Configure a service
8059	Register a CA .
8060	Set the state of a recording .
8061	Update the status of an event .
8062	Update agent state .
8063	Return the path to the configuration file .
8064	Update the configuration file .
8065	Check if the server is valid .
8066	Initialize logging .
8067	Create a preview .
8068	Serve an image
8069	Run all modules .
8070	Parse a CSV file .
8071	Get the current schedule
8072	Run a control loop .
8073	Run the control loop .
8074	Make an error response
8075	Make a data response
8076	Get the internal state
8077	List all upcoming events .
8078	Get an event by uid .
8079	Delete an event .
8080	Modify an event .
8081	Get configuration parameters from a string .
8082	Ingest an event .
8083	Start capture .
8084	Render HTML to a fragment .
8085	List of available resources .
8086	Convert to dictionary .
8087	Create a fragment from a dictionary .
8088	Add content to the response .
8089	Add a media resource .
8090	Add a URL to the fragment .
8091	Initialize the javascript function .
8092	Convert a placement to HTML .
8093	Convert a resource to HTML .
8094	Handle GET request .
8095	Render a standalone HTML response .
8096	Render a HTML fragment to a standalone HTML page .
8097	Calculate the probability density of a distribution .
8098	convert a value to one - dimensional array
8099	Given an error table returns a list of values for each of the scores .
8100	Perform posterior clustering on a single chromosome .
8101	Generate an error table .
8102	Calculate the summary table for a table .
8103	Calculate error statistics .
8104	Calculate the cutoff .
8105	Score a classifier .
8106	Infer the PSF
8107	Infer peptide .
8108	Infer protein genotypes
8109	Subsample an input file .
8110	Reduce input files to outfile .
8111	Backpropagate infile to outfile .
8112	Filter SQmass files
8113	Get a group by ID .
8114	Create a group .
8115	Delete a group
8116	Get group members
8117	Updates the members of a group .
8118	Get the effective member count for a group .
8119	Check if a group is effective
8120	Modify the Sphinx configuration .
8121	Create a new dataset .
8122	Decrypt a key .
8123	Get stdin from stdin .
8124	Get stdout from stdout .
8125	Get stderr from stderr .
8126	Get debug output .
8127	Context manager for reading stdin .
8128	Yield stdout from stdout .
8129	Context manager that yields stderr .
8130	Context manager for debugging .
8131	Delete an account
8132	Delete a container
8133	Decorator to handle stdout .
8134	Wrapper for stderr .
8135	Write an error message to a file .
8136	Print the help text for this option .
8137	Print usage information .
8138	Print version information .
8139	Make a request .
8140	Post an account .
8141	Delete an account
8142	PUT a container
8143	Perform a HEAD request .
8144	Get an object from a container .
8145	Put an object into a container .
8146	Post an object to a container .
8147	Resolve an option in the context .
8148	Return a copy of this context .
8149	Write headers to file .
8150	Authenticate .
8151	Generate a temporary URL .
8152	Convert a string to a string .
8153	Get a listing of containers .
8154	Get a client .
8155	Generator to encrypt a string from stdin .
8156	Decrypt a stream from a stream .
8157	Upload directory structure .
8158	Update account .
8159	Put a container
8160	Get the JSON body for a manifest .
8161	Create a container for a container
8162	Create a temporary temporary URL .
8163	Display a single Transition
8164	Print help for a given command .
8165	Return True if the stream is empty False otherwise .
8166	Encrypt a key .
8167	Get the status of a repo
8168	Get a pull request
8169	Get pull requests
8170	Write your forwards methods here .
8171	Return a list of slider items
8172	Render a hero slider .
8173	Acquire a read lock .
8174	Release all readers .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get task by task id .
8179	Return a list of all tasks in the queue .
8180	Return a dictionary representation of this instance .
8181	Create a task from a dictionary .
8182	Execute a Perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the backend
8186	Create an index
8187	Create a mapping in the index .
8188	Generator for JSON encoding .
8189	Write a generator to a writer .
8190	Add a task to the scheduler .
8191	Removes a task from the scheduler .
8192	Iterate over all stored items .
8193	Validate task arguments .
8194	Convert arguments to archiving task config .
8195	Perform a single job .
8196	Schedule a job in the queue .
8197	Cancels a job task .
8198	Run the main loop
8199	Listen for a new job .
8200	Schedule the scheduler .
8201	Schedules a task .
8202	Cancels a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the arguments for the job .
8206	Get a secret from the secrets directory
8207	Register a view .
8208	Register view decorator .
8209	Shortcut for Django s reverse action .
8210	Get the view name for this view .
8211	Convert a version to a string .
8212	Resolve an alias by key .
8213	Gets the engine for the given scheme .
8214	Parse a database path .
8215	Convert a URL to a dictionary .
8216	Parse a database URL .
8217	Create a new login .
8218	List all users .
8219	Create password change .
8220	Add a field to the view .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Return a parser for the given type .
8224	Get settings from environment variables .
8225	Create a model from a model .
8226	Encode a string .
8227	Create a new field
8228	Create a validator from a dictionary .
8229	Returns the cartesian product of a parameter dictionary .
8230	Find unique points in a list of parameters .
8231	Change logging arguments for logging .
8232	Decorator to configure logging configuration .
8233	Make directories for a log config file .
8234	Get a list of strings
8235	Renames a log file .
8236	Set the logger for this instance .
8237	Extract replacements from a trajectory
8238	Show progress bar .
8239	Check and replace the command line arguments .
8240	Convert a parser to a string .
8241	Find multi - interpolation options .
8242	Convert a dictionary into a dictionary .
8243	Check if log config file exists
8244	Parse the log file .
8245	Handle log_config .
8246	Create logging handlers and tools .
8247	Finalize the tool .
8248	Start the stdout .
8249	Write a buffer to the stream .
8250	Compare two results .
8251	Compare two parameters .
8252	Decorate a function to run on a function .
8253	Mark a function as deprecated .
8254	Decorator that ensures that a function is mutually exclusive .
8255	Mark a function as deprecated .
8256	Decorator to retry n times
8257	Decorator for prefixing .
8258	Add parameters for model .
8259	Run a network .
8260	Calculate euler divergence
8261	Add parameters for simulation
8262	difference between two values
8263	Create a storage service .
8264	Create a storage service .
8265	Add parameters for simulation
8266	Difference between two values
8267	Compact an hdf5 file .
8268	Return True if all parameters in a group are visited .
8269	Build model eqs for model .
8270	Pre - build model .
8271	Build the model .
8272	Build the model .
8273	Perform pre - build and build connections .
8274	Builds the connection graph .
8275	Add parameters to the simulation .
8276	Compute the factor of the Fano factor .
8277	Compute the mean factor for each neuron .
8278	Compute the mean fano factor for all spikes .
8279	Add monitors to a network .
8280	Add monitors to the network .
8281	Create a path to the output folder .
8282	Plots the result of the given job .
8283	Print the graphs of the graph .
8284	Run the analysis .
8285	Get batch number
8286	Explore a batch of samples .
8287	Get the vars for this node .
8288	Return the function node for this node .
8289	Change the name of the object .
8290	Set the details for this node .
8291	Convert a node to a message .
8292	Remove a subtree from the tree .
8293	Delete a node .
8294	Remove a node or leaf node .
8295	Remove a node from the tree .
8296	Translate a shortcut name to a string .
8297	Add prefix to the root node .
8298	Determine the type of a node .
8299	Creates a generic generic node .
8300	Add a node to the tree .
8301	Create a link pointing to an instance .
8302	Make sure that the names are valid .
8303	Create an instance of the given type .
8304	Create or update a single parameter node .
8305	Set the details of a tree .
8306	Iterate over all nodes in the tree .
8307	Make an iterator from a node .
8308	Perform a breadth - first search .
8309	Perform a deep search .
8310	Search for a node by key .
8311	Internal helper for backwards compatibility .
8312	The children of this node .
8313	Add a group from storage .
8314	Add a leaf from the storage .
8315	Return a list of directories for this node .
8316	Generate a debug dictionary .
8317	Get the parent of this node
8318	Add a group .
8319	Add a link .
8320	Remove a link .
8321	Add a leaf node .
8322	Remove a node from the tree .
8323	Remove a child from the group .
8324	Return True if item contains the given item .
8325	Get the default value of a file .
8326	Get the children of this node .
8327	Get the groups
8328	Get the list of leaves
8329	Get the list of links .
8330	Store a child .
8331	Store this trajectory in a group .
8332	Load a child by name .
8333	Load a trajectory
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a new result group .
8338	Adds a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a config group .
8342	Evaluate the maximum fitness .
8343	Add config variables for a commit .
8344	Make a git commit
8345	Flatten a nested dictionary .
8346	Convert a nested dictionary into a nested dictionary .
8347	Print a progress bar .
8348	Get the argumentspec for a function .
8349	Get kwargs from kwargs .
8350	Format a timestamp .
8351	Connect to a TCP port .
8352	Create a directory tree .
8353	Reset self . _start_time .
8354	Get the remaining remaining time .
8355	Convert to a dictionary .
8356	Remove a key from the annotations dictionary .
8357	Convert annotation to string .
8358	Make an ordinary result .
8359	Make a shared result from a key .
8360	Create shared data
8361	Store access data .
8362	Get the data node .
8363	Return True if the item is supported .
8364	Create shared data
8365	Manage the state of a multi - process .
8366	Releases a lock .
8367	Send a shutdown signal .
8368	Close the connection .
8369	Start the client .
8370	Send a request to the server .
8371	Acquire the lock .
8372	Listen for requests .
8373	Put data into the queue .
8374	Detect the pid of the process .
8375	Handle data .
8376	Main loop .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Stores the given arguments .
8380	Store a message in a trajectory .
8381	Store a list of trajectories .
8382	Decorator that parses the config file .
8383	Collect a section from the parser
8384	Collect the configuration from the config file .
8385	Interpret log_config .
8386	Add parameters to the configuration file .
8387	Convert a 1 - bit rule to a numpy array .
8388	Make an initial state
8389	Plot a pattern .
8390	Compute the cellular automaton pattern .
8391	Compute all rules for each rule .
8392	Called when the node is updated .
8393	Get the overview group .
8394	Load a single message .
8395	Store a message in the system .
8396	Load multiple items .
8397	Check the hdf5 properties for the given traj file .
8398	Store multiple items .
8399	Handle closing routine .
8400	Extracts the file information .
8401	Backup a trajectory .
8402	Read a row from a row .
8403	Prepare a new trajectory to be merged .
8404	Load meta data fortrj
8405	Load a sub branch .
8406	Raise an exception if the version is not in the current state .
8407	Fill the run table with the given start and stop .
8408	Load the explorations for the given Trajectory .
8409	Store the explorations table in the overview table .
8410	Make an overview table .
8411	Stores a trajectory .
8412	Store a sub branch in the tree .
8413	Create a leaf node .
8414	Load nodes from a tree .
8415	Internal function to store nodes in a tree .
8416	Add or update parameter table entry to the database .
8417	Get or create a table or create it if it doesn t exist .
8418	Get a node by name .
8419	Convert all of the attributes to recall .
8420	Recallocate the native types of native types .
8421	Add or modify a row .
8422	Insert all keys into a row .
8423	Convert an item to a dictionary .
8424	Convert a string to a string .
8425	Creates a group if it does not exist .
8426	Create a new hdf5 group if it exists .
8427	Store the annotations for the given node .
8428	Load annotations from a node .
8429	Store a group on disk
8430	Load a group from a group .
8431	Load all the annotations from a node .
8432	Extract missing flags from a dictionary .
8433	Add a summary table to the table .
8434	Add metadata for an instance .
8435	Create a PRM store from a dictionary .
8436	Store a parameter or create it if necessary .
8437	Write data into HDF5 file .
8438	Write a shared table .
8439	Write a dictionary into a table .
8440	Write data to a pymongo group .
8441	Write data into the group .
8442	Write data into a group .
8443	Delete a link .
8444	Internal method to handle all of the parameter or group .
8445	Write data into a pytable .
8446	Create a description for a PRM
8447	Get the column column for a column .
8448	Get the length of the longest string of a list of strings .
8449	Load data into a dictionary .
8450	Read a dictionary into a dictionary .
8451	Read the shared data from a shared node .
8452	Read a table or group .
8453	Internal method for reading an array .
8454	Create a new Trajectory object
8455	Make a set name .
8456	Set properties on the network .
8457	Add a list of dynamic imports .
8458	Set the index of the run .
8459	Iterate over a sequence of sequences .
8460	Shrink the model .
8461	Set a preset .
8462	Prepend a parameter to a preset .
8463	Initialize the experiment .
8464	Retrieves a value from the run .
8465	Check if the run is completed .
8466	Remove expansion from disk .
8467	Copy a node from a node .
8468	Iterate over a dictionary of parameters .
8469	Update the run information .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalize the run .
8474	Loads the skeleton
8475	Wrapper for load function .
8476	Backup a trajectory .
8477	Make the reverse wildcard wildcards .
8478	Merge multiple trajectories into the current one .
8479	Merge multiple runs into one .
8480	Rename a full name
8481	Merge derived parameters from another trajectory .
8482	Merge links from another trajectory .
8483	Merge config from another trajectory .
8484	Merge two collections .
8485	Merge results from another trajectory .
8486	Migrate a trajectory .
8487	Store the current trajectory .
8488	Restore default values .
8489	Set the list of parameters to the given index .
8490	Make a single run
8491	Returns a list of all run names
8492	Get the run information .
8493	Similar to find_index_find_index but raises an exception .
8494	Starts a single run .
8495	Finalize the run .
8496	Set start time .
8497	Set the final state of the run .
8498	Construct an instance for the given constructor .
8499	Convert a dictionary into a dictionary .
8500	Finalize the run .
8501	Get the configuration dictionary .
8502	Return a dictionary of results .
8503	Store a single item in a trajectory .
8504	Fetch items from a trajectory .
8505	Remove items from an iterator .
8506	Delete links from an iterator .
8507	Remove a node from the tree .
8508	Delete items from the trajectory .
8509	Wrapper for pooling .
8510	Wrapper for frozen_pool_single_run .
8511	Configure the pool .
8512	Configure frozen pool .
8513	Process single run .
8514	Configure frozen scoop .
8515	Run a single single run .
8516	Configure logging .
8517	Configure the niceness .
8518	Handle SIGINT handling .
8519	Run single run function .
8520	Wrap the logging handler .
8521	Load a class from a fully qualified name .
8522	Create a new class based on its name .
8523	Get the length of a parameter .
8524	Return string representation of f_val .
8525	Compare two values .
8526	Get the range of the parameter .
8527	Explore a parameter .
8528	Expand the parameter range into an array .
8529	Check that the data is valid .
8530	Store the contents of the object .
8531	Load a parameter from a dictionary .
8532	Loads an array parameter .
8533	Compare two values .
8534	Check if data is supported .
8535	Serialize a sparse matrix .
8536	Builds a list of names for the given index .
8537	Construct a sparse matrix from a list of data
8538	Load the data from a dictionary .
8539	Store the data into a dictionary .
8540	Load a dictionary from a dictionary .
8541	Convert a key to a string .
8542	Convert a value to a string .
8543	Convert to a dictionary .
8544	Set the value of a parameter .
8545	Get a single value from the result .
8546	Set a single item .
8547	Return True if the item is supported .
8548	Store the result in a dictionary .
8549	Load a dictionary from a dictionary .
8550	Set a single item .
8551	Stores the data into a dictionary .
8552	Load a dictionary from a dictionary .
8553	Merge all files in the current directory .
8554	Upload a file to Sftp
8555	Download a file .
8556	Create a session
8557	Merge trajectories
8558	Start the jobs .
8559	Multiply two reals .
8560	Run the euler integration .
8561	Postprocessing of a neuron .
8562	Add parameters for the simulation .
8563	Add an exploration of a trajectory .
8564	Execute a pre - run before run
8565	Execute a network run
8566	Extract all subruns from a traj .
8567	Execute a network run .
8568	Add parameters of a traj .
8569	Pre - run pre - run .
8570	Run the network .
8571	Run the network .
8572	Generate a filename for each parameter .
8573	Return the next item in the chain .
8574	Merge all files in a folder .
8575	Handle a SIGINT signal .
8576	Load config from a file .
8577	Request the PIN code .
8578	Request access token from ecobee .
8579	Refreshes the access token
8580	Get a list of thermostats .
8581	Write tokens to config file .
8582	Set HVAC mode .
8583	Set the fan min on time .
8584	Set hold temperature
8585	Set climate hold for a given index .
8586	Delete a vacation
8587	Resume a program .
8588	Send a message .
8589	Set the humidity of a temperature .
8590	Generate a delay for SELECTING .
8591	Generate a timeout for a given number of attempts .
8592	Generate a timeout for a lease .
8593	Generate a renewing time .
8594	Return a dictionary representation of this FSM .
8595	Reset all attributes .
8596	Get the timeout of a state
8597	Set the timeout of a state
8598	Send a discover packet .
8599	Select an offer .
8600	Send a DHCP request .
8601	Set the timeouts for the current state
8602	Process ack packet .
8603	Process a NakNAK packet .
8604	Initiate the initial state
8605	Set the state to BOUND
8606	Set the state of the script .
8607	Set the state of the script .
8608	End the script .
8609	Initialise an ERROR .
8610	Called when a timeout is received .
8611	Called when a request is received .
8612	Raise an RENEWING .
8613	Handle a request received from the request .
8614	Handle an offer .
8615	Handle an ACK request .
8616	Handle a NAK request .
8617	Handle an ACK packet .
8618	Process a NAK packet .
8619	Handle an ACK acknowledge .
8620	Called when a NAK is received .
8621	Called when a new lease is received .
8622	Set a query parameter .
8623	Add a new query to the query .
8624	Return a new QuerySet with the given name and value .
8625	Get server status .
8626	Create output from data .
8627	Run the command .
8628	Validate a message .
8629	Read tdms file
8630	Add deformation
8631	Convert tdms to fcs
8632	Compares the diff between two files .
8633	Create a new patch
8634	Delete the next patch
8635	Delete a single patch .
8636	Check if file exists in patch
8637	Backup a file .
8638	Add a file to the database .
8639	Run a Quilt command .
8640	Create directory if necessary .
8641	Copy directory to dest
8642	Link a file .
8643	Copy file to dest
8644	Get the directory of the file .
8645	Backup a file .
8646	Refresh the contents of the Quilt .
8647	Unapply a patch .
8648	Unapply the top patch
8649	Unapply all pending patches .
8650	Applies a patch to the series .
8651	Apply the next patch .
8652	Apply all patches in the series .
8653	Read the series file .
8654	Save the series to a file .
8655	Add a patch .
8656	Insert a list of patches .
8657	Add a list of patches .
8658	Remove a patch .
8659	Returns a list of patches after the given patch .
8660	Returns a list of patches before the given patch .
8661	Return a list of patches that match the given patch .
8662	Replaces old_patch .
8663	Create directory .
8664	Check the version of the qilt meta data file .
8665	Add this argument to the parser .
8666	Add an argument to the parser .
8667	Add command line arguments to subparsers .
8668	Set the arguments for subparsers .
8669	Add subparsers to the given parser .
8670	Check if file exists in patch
8671	Check if a file is in the next patches .
8672	Reverse a file .
8673	Import a patch .
8674	Import patches .
8675	Add a way .
8676	Iterate over the nodes that are present in the graph .
8677	Add a node to the graph .
8678	Build a route from a relation .
8679	Create the long name for a route .
8680	Get the agency id .
8681	Collect all public transport relations .
8682	Add a relation to the relation .
8683	Create dummy data .
8684	Patches a list of Agency objects .
8685	Generate dummy trips for a trip .
8686	Write a zip file .
8687	Write unzipped files .
8688	Build agency .
8689	Extract stops from a node .
8690	Build a Shape from nodes .
8691	Returns a list of supported versions .
8692	Send an APdu .
8693	Authenticate a list of devices .
8694	Register a user .
8695	Authenticate a U2F request .
8696	Register a U2F device .
8697	Convert unicode strings to str .
8698	Wrap a function and return a wrapped function .
8699	Wrap a cls class .
8700	Return True if filepath matches the given filepath .
8701	Get the email address for the given email address .
8702	Get the first entry in entry_tree .
8703	Convert markdown to reST .
8704	Serve a flawless server .
8705	Record an error .
8706	Convert url to image
8707	Convert a string to an Image object .
8708	Validate an image .
8709	Raise an error if the image is bigger than size .
8710	Ensure that the given width is larger than the given width .
8711	Ensure that the given height is bigger than the given height
8712	Parse a category and return it .
8713	Parse the totals value .
8714	Returns an iterator over all items in the source
8715	Save an error .
8716	Parse the contents of the file .
8717	Parse an item .
8718	Get an instance of the model .
8719	Save an item .
8720	Download a file
8721	Load a file from a file .
8722	Yield items from CSV file
8723	Set the allowed network access settings .
8724	Run a command .
8725	Add multiple files to the container .
8726	Add a file and rename it .
8727	Get all enrollments for a course .
8728	Retrieve enrollments for a course
8729	Get all enrollments for a section .
8730	Retrieve enrollments for a section
8731	Get enrollments for a given regid
8732	Enrollment for a user .
8733	Get all roles in an account
8734	Gets a list of roles in an Account
8735	Returns a list of roles in an account
8736	Get a single role .
8737	Gets a role by Id
8738	Get a course .
8739	Get a course by its Id
8740	Get all courses in an account .
8741	Retrieve courses in an account
8742	Get a list of courses in an account .
8743	Gets all published courses in an Account
8744	Get courses for a given regid
8745	Create a new course .
8746	Update a course id .
8747	Get activity by ID .
8748	Get grades by the given account .
8749	Get statistics for a particular term .
8750	Get activity by sis_id
8751	Get assignments by sis_id
8752	Get the student summaries for the given SIS course
8753	Get the student activity for a particular student .
8754	Get student messages for a particular course
8755	Get all external tools in an account .
8756	Get all external tools in a course .
8757	Create an external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Check that the required parameters are set .
8761	Get user details .
8762	Get list of users for a course .
8763	Get users for a particular course
8764	Create a new user .
8765	Get all logins for a user .
8766	Updates a user login .
8767	Get the next page from the response .
8768	Get a resource url
8769	Get a paged resource
8770	Get the URL for a resource .
8771	Make a PUT request
8772	POST a resource
8773	Delete a resource
8774	Get the list of admins for a given account .
8775	Create an admin .
8776	Creates an admin object
8777	Delete an admin .
8778	Delete an administrator by role .
8779	Create a grading standard for a course .
8780	Get a section by ID .
8781	Get a section by its ID .
8782	Get all sections in a course .
8783	Retrieve sections in a course
8784	Retrieve all sections in a course .
8785	Gets all sections in the course
8786	Create a new section .
8787	Update a section .
8788	Returns a list of Quiz objects .
8789	Get an account .
8790	Get all sub accounts for a given account .
8791	Update an account .
8792	Update SIS ID .
8793	Get authorization settings .
8794	Update auth settings .
8795	Get a term by its ID
8796	Import a string from a string .
8797	Import a directory
8798	Get the status of an import .
8799	Build a zip archive
8800	Get all assignments for a course
8801	Update an assignment .
8802	Get a list of available reports .
8803	Get a list of reports by type .
8804	Create a report .
8805	Create a course provisioning report .
8806	Create a SIS export report .
8807	Create a report for unused courses .
8808	Get report data
8809	Get report status .
8810	Delete a report
8811	Move detections .
8812	Flip detections .
8813	Convert an object to a dictionary .
8814	Return a dictionary of config options .
8815	Return the value of an empty value .
8816	Parse arguments and return a dictionary of keyword arguments .
8817	Create metrics from a list of metrics .
8818	Setup logging .
8819	Configure the registry .
8820	Create a dictionary of metrics .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle metrics request .
8824	Send an event .
8825	Fix the HTTP header .
8826	Perform an API query .
8827	Provide information about the model .
8828	Return a list of all the pods .
8829	Encode a request .
8830	Make an API call
8831	Perform a GET request .
8832	Perform a DELETE request .
8833	Make a PUT request
8834	Perform a POST request .
8835	Process a query .
8836	Group sentences .
8837	Disambiguate PDF .
8838	Disambiguate a query .
8839	Segment a text .
8840	Recognize a language .
8841	Fetches a concept by id
8842	Fit the ensemble .
8843	Compute the score of the given features .
8844	Fit the MDR to the given features .
8845	Fit the model .
8846	Compute the score of the model .
8847	Fit the model to the given features .
8848	Transform a list of features .
8849	Compute the score of the model .
8850	Perform MDR prediction .
8851	Generator for n - way models .
8852	Plot a MDR grid .
8853	Get the config from the app .
8854	Get the value of a config value .
8855	Create a vector from a list of members .
8856	Creates a vector vector .
8857	Parse a file .
8858	Evaluate a stream .
8859	Evaluate a string .
8860	Bootstrap a repl module .
8861	Run a function on a file .
8862	Creates a MultiFunction from dispatch function .
8863	Add a method to a map .
8864	Add a new method .
8865	Get a cached method for the given key .
8866	Remove a method from a map .
8867	Remove a method by key .
8868	Return True if v is a valid macro .
8869	Get the location of the reader .
8870	Decorator for parse function .
8871	Raise an exception if there is no recur .
8872	Assert that the node is tail .
8873	Resolve a bare symbol .
8874	Resolve a fully qualified namespace .
8875	Parse an AST .
8876	Whether or not the named variable should be ignored .
8877	Add a new symbol to the symbol table .
8878	Convert a list of dictionaries into a string .
8879	Return a string representation of an iterable .
8880	Return a string representation of an object .
8881	Return a string representation of an object .
8882	Fix the location of the node .
8883	Compile the form and execute it .
8884	Compile a module .
8885	Compile a module .
8886	Compile a bytecode into a Python module .
8887	Convert an iterable .
8888	Convert a string to a string .
8889	Remove duplicates from a string .
8890	Return a fraction .
8891	Create a logging handler .
8892	Creates a new Map .
8893	Partition a collection by n elements .
8894	Decorator to wrap a function into a wrapped function .
8895	Read namespace .
8896	Read a collection .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a map .
8901	Read a string .
8902	Read a symbol .
8903	Read a keyword .
8904	Read metadata from a comment .
8905	Read a function definition .
8906	Read a quoted comment .
8907	Expand syntax quote quotes .
8908	Convert a syntax quote into a syntax quote .
8909	Read a syntax quote .
8910	Read an unquoted comment .
8911	Read a delimited comment .
8912	Read a single character .
8913	Read a regular expression .
8914	Read a reader macro .
8915	Read the next consuming comment .
8916	Read next token .
8917	Read expressions from a stream .
8918	Read a string from a string .
8919	Read a file .
8920	Update the location of the current line .
8921	Push a pushback to the stack .
8922	Read next token from stream .
8923	Create a base64 - encoded bytecode .
8924	Get the basecode from the cache data .
8925	Return the path to the cache file .
8926	Add imports to the meta_path
8927	Finds the module spec for the given path .
8928	Execute a cached module .
8929	Load a module .
8930	Execute a module .
8931	Creates a symbol .
8932	Complete the given text .
8933	Get or create a Keyword .
8934	Create a keyword for the given name and namespace .
8935	Convert a PyAST AST into a tuple .
8936	Load an attribute .
8937	Simple simple AST generator .
8938	Generate an AST from a form .
8939	Convert a Python AST to a Python AST .
8940	Decorate a function with ast . ast . ast
8941	Decorator to wrap a function in a function .
8942	Check if v is dynamic .
8943	Determine if a variable is redefable .
8944	Convert an expression into an AST .
8945	Convert a function into an expression .
8946	Determine whether or not a function should be used .
8947	Convert a function to a Python AST .
8948	Return the name of a function .
8949	Convert function arguments to Python AST .
8950	Convert a singlearity function to an ast .
8951	Convert a multiarity function to a Python ast .
8952	Convert a function to an AST .
8953	Convert a statement to a Python AST .
8954	Convert an IF node into an AST .
8955	Convert an invoke node into an AST .
8956	Convert a quote node to a Python AST .
8957	Convert recur .
8958	Convert recur point to Python ast .
8959	Convert a SETBANG node to a Python AST .
8960	Convert an AST to a Python AST .
8961	Convert a Try to a Python AST .
8962	Convert a LocalSymbol to an AST .
8963	Convert a var_name to an AST .
8964	Convert a VarRef to a Python AST .
8965	Convert HOST_FIELD to Python ast .
8966	Convert a maybe class to a Python AST .
8967	Convert maybe_host_form to Python ast .
8968	Convert a constant value to a Python AST .
8969	Convert a collection literal literal to a Python AST .
8970	Convert a Lisp AST to a Python AST .
8971	Iterate over imported modules .
8972	Import from base module .
8973	Create a namespace variable .
8974	Convert iterable into a set .
8975	Return a set of members .
8976	Visit an exception handler .
8977	Check if a node is a valid expression .
8978	Visit a function definition .
8979	Visit a While node .
8980	Visit a Try node .
8981	Create a new module .
8982	Return the first element of o .
8983	Return the rest of an expression .
8984	Return the first nth element of collection i .
8985	Find the next item in a collection .
8986	Concatenate o .
8987	Convert an oeq into a sequence .
8988	Concatenate multiple sequences .
8989	Associate an object with the given mapping .
8990	Concatenate a collection .
8991	Partitions a function returning a partial result .
8992	Remove an object from an object .
8993	Return True if v1 or False otherwise .
8994	Divide x and y .
8995	Sort a collection .
8996	Returns True if the collection contains the given key .
8997	Get the value of a key .
8998	Convert o into lisp .
8999	Convert an object to a Python dictionary .
9000	Return a string representation of an object .
9001	Convert arguments to a list of lists .
9002	Wrapper around trampoline .
9003	Creates a wrapped function with the given attributes .
9004	Decorate a function with meta .
9005	Decorator to mark a function as base .
9006	Resolve an alias .
9007	Resolve a variable .
9008	Add a generated Python variable .
9009	Bootstrap a dynamic variable .
9010	Create a new var and return it .
9011	Intern an unbound variable .
9012	Finds the variable in namespace_symbol_symbol_sym
9013	Find a variable in a namespace .
9014	Find a variable in the context .
9015	Add a default import .
9016	Add an alias .
9017	Internally associates a symbol .
9018	Internally assign a new variable .
9019	Find a variable for a given symbol .
9020	Add a module to the registry .
9021	Return the imported module or None if not found .
9022	Add a reference to a variable .
9023	Get the reference for a symbol .
9024	Return a dictionary of references to other symbols .
9025	Swap all references to another namespace .
9026	Get or create a namespace from the cache .
9027	Get a namespace by name .
9028	Get a namespace by name .
9029	Remove a namespace .
9030	Create a completion matcher for completion .
9031	Complete an alias .
9032	Autocomplete modules and aliases .
9033	Complete the internals .
9034	Complete the references for the given value .
9035	Complete a string .
9036	Returns a tuple of the arguments of the expression .
9037	Create a list of members .
9038	Return a list of members .
9039	Change the style of a string .
9040	Decrypt a JWT token .
9041	Encrypt a JWT .
9042	Delete an item from the cache
9043	Convert to a Python tuple .
9044	Close the stream .
9045	Parse a CGI string into an expression .
9046	Write a NDB model to a file - like object .
9047	Handle JSON serialization .
9048	Decode a date from a string .
9049	Decode a JSON value .
9050	Convert an object to JSON .
9051	Validate the release version
9052	Generate a changelog .
9053	Return a list of strongly connected components .
9054	Topological sort algorithm .
9055	Set parent .
9056	Get parent .
9057	Add an operator .
9058	Add an element .
9059	Creates an AND operator with the given elements .
9060	Create an OR operator .
9061	Decorator to log a function .
9062	Parse an incoming message .
9063	Convert tuples to OrderedDict .
9064	Check if a message exists and return it .
9065	Prepare a message for sending .
9066	Flush incoming messages .
9067	Enable or disable a slide .
9068	Saves a template
9069	Load a template
9070	Get information about the device .
9071	r Read a file - like object .
9072	Locate the package file .
9073	Parse package json file
9074	Handle an API error .
9075	Validate the JSON response .
9076	homogenize two waves
9077	Interpolate the direction of a wave .
9078	Calculate the index of the indep - vector between two waves .
9079	Verify that the waveforms are compatible .
9080	Load the systemjs manifest
9081	Return a tuple of parameters for the given mname .
9082	Run a trace .
9083	Shortcut for shorten URLs .
9084	Expand shorturl
9085	Get the stats for a short URL .
9086	Retrieve statistics from the database .
9087	Get database statistics .
9088	r Prints the command line .
9089	Echo a shell command .
9090	Log a message to the console .
9091	Decorator for caching a method .
9092	Break an iterable into chunksize .
9093	Decorator for multiprocessing functions .
9094	Flatten an iterable .
9095	Print a signal to stdout .
9096	Print a table .
9097	Creates a dummy dummy element .
9098	Convert a human readable string .
9099	Authenticate a user .
9100	Trace a module .
9101	Define links .
9102	Creates a common common entry for a Python version .
9103	Creates a multi - entry for a multi - entry .
9104	Convert a string to a list of words .
9105	Convert noise into chunks .
9106	Generate the parsers for a chunk
9107	r Write a touchstone file to a touchstone file .
9108	Create a bounding waveform .
9109	Builds a string representation of the units .
9110	Create a new wave operation
9111	Calculate the area of the running area
9112	Validate the minimum and indep_min and indep_max .
9113	r Compute the cosine of a wave .
9114	r Return the cosine of a wave .
9115	r Return the cosine of a wave .
9116	r Return the angle of a wave .
9117	r Calculate the average waveform .
9118	r Calculate the dB density .
9119	r Derivative of the waveform .
9120	r Fourier Transform .
9121	r Fourier transform function
9122	r Compute the Fourier transform .
9123	r Fourier transform .
9124	r Return the dbdb db for the given waveform .
9125	r Implements the Fourier transform .
9126	r Compute the Fourier transform .
9127	r Compute the phase of a wave .
9128	r Compute the Fourier transform .
9129	r Calculate the integral of a waveform .
9130	r Calculate the delay of a wave .
9131	r Logarithmic mean
9132	r Calculate the coverage of a waveform .
9133	r Compute the integral of a waveform .
9134	r Return the maximum value of a waveform .
9135	r Return the minimum of a waveform .
9136	r Calculate the phase of a wave .
9137	r Round a wave .
9138	r Compute the square root of a wave .
9139	r Creates a subwave wave .
9140	r Convert wave to complex wave .
9141	r Convert wave to float .
9142	r Convert a wave to an integer .
9143	r Calculate the wvalue of a wave .
9144	Searches for the given path .
9145	Get a short description from a string .
9146	Build an expression .
9147	Find the next delimiter in a list .
9148	Get functions from a string expression .
9149	Return a pair of delimiter pairs .
9150	Parse an expression .
9151	Remove duplicate delimiter from expression .
9152	Split text into multiple pieces .
9153	Convert a number to an English .
9154	r Convert number to scientific notation .
9155	r Convert a number to a string .
9156	r Convert a string to a float .
9157	r Calculate peng fraction .
9158	r Calculate the pengant .
9159	r Return the power .
9160	r Calculate the amount of pengix .
9161	r Remove extra delimiters .
9162	Convert number to scientific notation .
9163	Convert number to scientific notation .
9164	Find the sourcemap comment for a file .
9165	Check if the app needs to be used .
9166	Bundle the app
9167	Trace an app .
9168	Determine if the given dep_tree matches this dep_tree .
9169	Format a hexadecimal string .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Try to import an action from a module .
9173	Split a line .
9174	Check for init commands .
9175	Help for builtin functions .
9176	Finds a function in the context .
9177	List all defined functions .
9178	Check if arg is a flag
9179	Process keyword arguments .
9180	Extracts the value of an argument from a string .
9181	Invoke a single function .
9182	Invoke the given line .
9183	Invoke a string .
9184	Parse a parameter definition .
9185	Parse a return line .
9186	Classify a section .
9187	Classify a single line .
9188	Join multiple paragraphs .
9189	Convert the main docstring to a string .
9190	Convert a value to a type .
9191	Convert a binary value to a type .
9192	Get the size of a type
9193	Convert a value to a string .
9194	Validate a type .
9195	Checks if the given type is known .
9196	Split a complex type .
9197	Instantiate a complex type .
9198	Get the type of a type .
9199	Checks if the given format is known .
9200	Inject a typeobj into the registry .
9201	Load a type module from a module .
9202	Check if spec_args is filled with positional arguments
9203	Add a parameter .
9204	Create a typed return value .
9205	Create a custom return value .
9206	Match a short - name string .
9207	Return the type of a param .
9208	Return the signature of the function .
9209	Format the return value .
9210	Convert a positional argument to an argument .
9211	Checks the validity of a function .
9212	Convert an argument to a validator .
9213	Format the message as a string .
9214	Return a dictionary representation of the exception .
9215	Check and execute a function and execute it .
9216	Parse validators .
9217	Find all objects in a container .
9218	Return a context manager for the given module .
9219	Return the help text for a function .
9220	Add a parameter to a function .
9221	Decorator to annotate a function .
9222	Decorator to annotate a function .
9223	Decorator to annotate a context .
9224	Annotate a function .
9225	Annotate a function .
9226	Return the short description of a function .
9227	Load all commands .
9228	Install crontab
9229	Print all tasks .
9230	Uninstall crontab
9231	Create a new schema
9232	Load project config files
9233	Save projects config files
9234	Define a singleton .
9235	Returns a dictionary of all dependent projects for this project .
9236	Decorator for postprocessing .
9237	Initialize the project
9238	Set an item s value .
9239	Set an attribute .
9240	Create a new list from an iterable .
9241	Set the value of the current state .
9242	Returns a function that sets the value of the state of the state .
9243	Modify a function with a function .
9244	Returns a function that returns a tuple with n elements n .
9245	Decorator to wrap a function .
9246	Apply a function to a function .
9247	View a state .
9248	Convert the Fold to a list .
9249	Apply a function over the current state .
9250	Set the state of the current state .
9251	Iterate over an iterable .
9252	Return the kind of this object .
9253	Main function .
9254	Return a copy of this vector .
9255	Handle input .
9256	Advance robots .
9257	End the game .
9258	Move a board .
9259	Play a game of naughts and crosses the computer .
9260	Makes a move .
9261	The winner of this board if one exists .
9262	Generate a generator that yields a tuple of candidates .
9263	Process a single item .
9264	Initialize a spider .
9265	Upload a chunk to S3 .
9266	Create a file - like object .
9267	Get the state of an account .
9268	Get the state of an asset .
9269	Get block by hash .
9270	Get the block hash .
9271	Get the system fee for a block .
9272	Get the state of a contract .
9273	Fetches a raw transaction by its hash .
9274	Get the storage for a script .
9275	Get the transaction out of a transaction .
9276	Invoke a script .
9277	Invoke a contract .
9278	Invoke a script .
9279	Send raw raw raw transaction .
9280	Validate an address .
9281	Make a request to the server .
9282	Return True if s is a hash256 hash
9283	Check if a string is a valid hash160 .
9284	Encode an invocation parameters .
9285	Decode an invocation result into a dictionary .
9286	Decorator to mark a function as first keyword argument .
9287	Convert an instruction to a timezone .
9288	Apply the timezone to a datetime .
9289	Render the template to a file .
9290	Render the barcode .
9291	Calculate checksum .
9292	Render code .
9293	Connect to KVS session .
9294	Main entrypoint .
9295	Download a file from S3
9296	Upload a file to S3
9297	Downsync a configuration file
9298	Display a diff between a section and a section .
9299	Parse an environment variable .
9300	Set basic configuration .
9301	Set the API key .
9302	Get JSON content from a folder .
9303	Return a dictionary of JSON schemas .
9304	Get the JSON representation of the schema .
9305	Get a JSON resolver for this schema .
9306	Validate an object .
9307	Get valid examples .
9308	Get invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of a oneDrive user .
9313	Get one drive of objects in a folder .
9314	Create a folder .
9315	Add comment message to a specified object .
9316	Convert or dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag&Drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and display it
9324	Retrieves a parameter from a tag .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components
9331	delete all of the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update
9334	When a Top - level window position is relative lower - right
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated with the wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the items from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not .
9345	Construct a string representation of the object
9346	Find an object already created
9347	Create a new object identical to self
9348	called when adding a control to the window
9349	Reparent a child control with the new wx_obj parent
9350	make several copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all modules in the given rootpath .
9354	Return a list of children that are column headings
9355	Update the grid if rows and columns have been added
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	colo sort the data based on col
9359	Remove all rows and reset internal structures
9360	Called to create the control which can derive from wxControl .
9361	Fetch the value from the table and prepare the edit control control
9362	Complete the editing of the current cell . Returns True if changed
9363	Return True to allow the given key to start editing
9364	When the editor do something with the first key
9365	Create a type handler for a given type .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable all top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu without its position
9371	Process form submission
9372	Set an object tag .
9373	Iterate over html table .
9374	Return the documenter for the given object .
9375	Mangle a signature .
9376	Import a module by name .
9377	Autolink role
9378	Show a simple popup modal dialog
9379	Modal dialog asking for an input returns string or None if cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Set icon
9386	Display or hide the window optionally disabling all other windows
9387	Open read and evaluate the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	translate gui2attr legacy code
9393	Write content to the clipboard data .
9394	Find autosummary in a docstring .
9395	Add the object and all its children
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Return the thumbnail representation of the image .
9401	Register a function filter .
9402	Add a node filter to a function .
9403	Assert that the current path is in the current path .
9404	Raises an exception if no path is not found .
9405	Checks if a path has the current path .
9406	Assert that a path is not present .
9407	Select an option .
9408	Apply the filter to the given value .
9409	Get an instance of a browser .
9410	Return a string representation of the expression .
9411	Return True if the given node matches the filter .
9412	Switch to the specified frame .
9413	Accept an alert .
9414	Prompt user for confirmation dialog .
9415	Displays a confirmation dialog .
9416	Context manager to accept a prompt .
9417	Displays a prompt .
9418	Save the HTML to a file .
9419	Save a screenshot to a PNG file .
9420	Raise the server error .
9421	Return True if the given value matches the filter .
9422	Checks whether a field is checked .
9423	Returns a boolean indicating whether a field is not checked .
9424	Check whether a field is unchecked .
9425	Checks whether a field is unchecked .
9426	Assert that the query is text .
9427	Fail if there is no text .
9428	Asserts that title matches title .
9429	Assert that a title has no title .
9430	Checks if a title has a title .
9431	Asserts that a title has no title .
9432	Find all matching results .
9433	Find the first match matching criteria .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Creates a decorator that can be used to set the value of a property .
9438	Synchronization decorator .
9439	Check if an element should be caught .
9440	Calculate the count of count results .
9441	Cache the result in the cache .
9442	Checks if the options are not None .
9443	Creates a failure message .
9444	Returns True if count matches the given options
9445	Normalize text .
9446	Normalize whitespace .
9447	Convert text to regular expression .
9448	Returns True if the current path matches the current request .
9449	Resizes the window to the specified width and height .
9450	Start the server .
9451	Add a function to the advanced property .
9452	Sets the instance method .
9453	Set class method .
9454	Return the traceback of the last call .
9455	Get the source code for an object .
9456	Return the logger for the given instance .
9457	Set the logger .
9458	Make a request to the API
9459	List all channels
9460	List of users
9461	Make a message
9462	Translate a message from Slack .
9463	Send a message to Slack .
9464	Read a single channel from the transport .
9465	Run Slack .
9466	Run Slack client .
9467	Return the difference between two dictionaries
9468	Colorize a message .
9469	Called when a task starts .
9470	Run the command on the server .
9471	Print stats on the server .
9472	Called when a task is skipped .
9473	Convert a prefix to a prefix .
9474	Decorator to check if value is empty
9475	Add a model .
9476	Return a dictionary representation of the elements .
9477	Load a dictionary from a dictionary .
9478	Convert to a dictionary .
9479	Parse the configuration element .
9480	Parse the state .
9481	Translate the config into a string .
9482	Load all filters
9483	Searches for the YANG file for the given filename .
9484	Convert a model to a dictionary .
9485	Return the difference between two files .
9486	POST data to url
9487	Get the authorization code for the user .
9488	Get an access token
9489	Return the query parameters for a URL .
9490	Convert url to URL .
9491	Build a URL from a base URL .
9492	Handle an exception .
9493	Make a response .
9494	Make an error response .
9495	Make a JSON response
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get an authorization token
9499	Get an authorization code from a URI .
9500	Get a token from a POST request .
9501	Get the Authorization header .
9502	Open a USB device .
9503	Read a single byte from the bus .
9504	Read bytes from the bus .
9505	Read a byte from the bus .
9506	Write bytes to the bus .
9507	Write byte data to the bus .
9508	Write an i2c block data to the bus .
9509	URL for CDN .
9510	Create a copy of this object
9511	Create a local copy .
9512	Create a remote copy .
9513	Construct a File from a file .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Return a list of file cdn URLs .
9518	Construct a group from a dictionary .
9519	Create a new group
9520	Perform HTTP request .
9521	Iterate over all UUIDs .
9522	List a list of objects
9523	Print progress bar .
9524	Make a request to the server .
9525	Gets the status of the home mode .
9526	List all cameras .
9527	Retrieve camera info .
9528	Retrieve a single camera snapshot .
9529	Disable a camera .
9530	Gets the motion setting for a camera .
9531	Saves an MDP parameter .
9532	Update the camera settings .
9533	Check if li is last li
9534	Yields a single list of nodes .
9535	Get the lvl value for the given namespace
9536	Return the VMerge value of the VMerge .
9537	Get the grid span of a Widget
9538	Get the td element at the given index .
9539	Return True if style is False False otherwise .
9540	Return True if r is bold .
9541	Check if r is italics .
9542	Return True if r is underline .
9543	Return True if p is a title
9544	Get the content of a text run .
9545	Get information about a relationship .
9546	Get document data .
9547	Returns the ordered list type for the ordered list
9548	Build a list .
9549	Builds a TR element
9550	Build a table .
9551	Get the content of a T tag .
9552	Remove tag from tree .
9553	Find a dataset and return it .
9554	Load MNIST dataset .
9555	Load a cifar file .
9556	Plot images .
9557	Plot weights .
9558	Plot filters .
9559	Generate samples from a list of arrays .
9560	Encode a string .
9561	Generate a batch of batches .
9562	Predict a sequence of sequences .
9563	Add weights for convolution .
9564	Encodes data into a numpy array .
9565	Decode a single layer .
9566	Find the output layer .
9567	Return the score of the autoencoder .
9568	Predict the output of x .
9569	Predict the probability of x .
9570	Predict logit .
9571	Compute the score of the model .
9572	Create a batch of features .
9573	Generate a batch of batches .
9574	Load a network from a file .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Iterate over outputs matching patterns .
9578	Iterate through layers matching patterns .
9579	Create a graph from kwargs .
9580	Returns a list of variables .
9581	Compute the accuracy of the target .
9582	Perform a scan .
9583	Build an Activation .
9584	Generate a reservoir
9585	Set a loss
9586	Generate an iterator over the estimator .
9587	Train the model .
9588	Generate a hash based on regularizers .
9589	Build a graph from regularizers .
9590	List of inputs .
9591	Returns a list of variables .
9592	Find the first layer in the layer .
9593	Compute the feed_forward function .
9594	Predict function .
9595	Compute the score of the model .
9596	Save model to file .
9597	Load a model from a file .
9598	Compute the loss .
9599	Build the graph for updates .
9600	The output size of the layer .
9601	Connect the input to the graph .
9602	Bind the graph to the graph .
9603	Resolve input shapes .
9604	Resolve output shapes .
9605	Log the current layer .
9606	Log the parameters of the model .
9607	Format a string .
9608	Resolve the shape of a layer .
9609	Find parameter by key .
9610	Add a bias .
9611	Return a dictionary representation of the model .
9612	Loggabor .
9613	Loggabor image
9614	Add a tier .
9615	Remove a tier
9616	Get a tier by name .
9617	Convert to EAF .
9618	Add a point to the tier .
9619	Add an interval to the tier .
9620	Remove an interval .
9621	Remove a point at time .
9622	Return a list of intervals
9623	Returns a list of tuples of tuples of tuples
9624	Indent an element .
9625	Add an annotation .
9626	Add an entry to the vocabulary .
9627	Add a description for a cv_id
9628	Add an external reference
9629	Add a language .
9630	Add a new lexicon reference .
9631	Add a linguistic type .
9632	Add a linked file .
9633	Add a locale .
9634	Add a linked file .
9635	Add a tier .
9636	Remove all of the timeslots .
9637	Extract the annotations from the EAF
9638	Generate an annotation id .
9639	Generate a timestamp for the timeslots
9640	Return a list of tiers for the given id_tier .
9641	Get the full time interval .
9642	Returns a list of the ref annotation data for the given id .
9643	Returns a list of the ref annotation data for the given id .
9644	Returns a list of tier ids for a given language .
9645	Merge two tiers .
9646	Remove all annotations from a tier
9647	Remove a CV description .
9648	Remove a license .
9649	Remove linked files .
9650	Remove a property
9651	Remove a reference annotation from a tier
9652	Remove all linked linked files .
9653	Remove a tier
9654	Remove a list of tiers .
9655	Renames a tier .
9656	Shift annotations by time .
9657	Run the command .
9658	Display debug information for the storage
9659	Get the base level of text .
9660	Get embedding levels .
9661	Extract embed and override embedding .
9662	Calculate the number of runs .
9663	Resolve weak types .
9664	Resolve neutral types .
9665	Reverse a contiguous sequence .
9666	Reorder all levels in a dictionary .
9667	Processes the file .
9668	Convert from PySide2 .
9669	Add an attribute to an object .
9670	Command line interface .
9671	Maintain compatibility compatibility .
9672	Show the GUI .
9673	Discovers the GUI .
9674	Deprecated .
9675	Add to filemenu
9676	Context manager to temporarily change the selection .
9677	Context manager for managing the current time .
9678	Show a dialog box .
9679	Initialize the types of Telegram bots .
9680	Return a generator over the cumulative data .
9681	Get the values of a single axis .
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters needed to transform x coordinates
9684	Reverse a mapping .
9685	Generator for float values .
9686	Add data to the stream .
9687	Add svg definitions
9688	Add a new configuration
9689	Burns the graph
9690	Calculate the left margin .
9691	Calculate right margin .
9692	Calculate top margin .
9693	Add a popup .
9694	Calculate bottom margin .
9695	Draw the graph
9696	Make a textapoint element .
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard - coded the styles into the SVG XML if not .
9703	Base SVG Document creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data .
9707	Connect to the server .
9708	Respond to a channel .
9709	Return a tuple of all registered patterns .
9710	Create a new nickname .
9711	Handle a Ping message .
9712	Handle registration .
9713	Start the event loop .
9714	Register this node to the boss .
9715	Run a task .
9716	Require a callback to be called when the user has a boss .
9717	Return a list of command - line patterns .
9718	Called when a user is successful .
9719	Execute a command .
9720	Add a worker
9721	Send validation email notification to user .
9722	Send a password reset notification .
9723	Validate password strength .
9724	Verify a token
9725	Delete user .
9726	Allow post request to allow post requests .
9727	Return a threadpool executor .
9728	Get docker client .
9729	Get the TLS client .
9730	Name of service .
9731	Wrapper for docker requests .
9732	Execute a docker command .
9733	Poll docker status
9734	Stop the Docker service .
9735	Remove unique emails from unique email .
9736	Update user password .
9737	Update user password .
9738	Validate an email address .
9739	Create a new token .
9740	Delete token .
9741	Authorize confirmation email .
9742	Handle POST request .
9743	Update the expiration time of the object .
9744	Return a context manager for password reset .
9745	Send notification notification .
9746	Send email notification email notification .
9747	Handle email validation .
9748	Authenticate a request .
9749	Check if the token has expired .
9750	Display a notebook .
9751	Process HTML plots .
9752	Creates customJS callback
9753	Return a widget for the given parameter name .
9754	Render a function
9755	Creates a new TextInput
9756	Convert a list of objects into a list of named objects .
9757	Return the owner of a method .
9758	Assign the auth values to the auth credentials
9759	Ping the server .
9760	Retrieve information about the server .
9761	Gets the health of the cluster .
9762	Convert bytes to readable string .
9763	Return the total load of the CPU
9764	Get memory size .
9765	Get the total number of networks .
9766	List of volumes
9767	Get a volume by id
9768	Get the size of a volume
9769	Get the percentage of usage of a volume
9770	Return the volume of a volume .
9771	Return the maximum disk volume of a volume .
9772	Get disk by id
9773	Login to login .
9774	Get url from url
9775	Execute a GET request
9776	Update the details of the entry .
9777	Get the utils .
9778	Get the storage .
9779	Create a context for the given request .
9780	Get the tenant token .
9781	Helper function for building an attribute dictionary .
9782	Creates a new set of apps from INSTALLED_APPS .
9783	Remove apps from INSTALLEDED_APPS
9784	Get global settings .
9785	Handle GET request .
9786	Get a value from a key .
9787	Change the value of a key .
9788	Migrate config file
9789	Start the HTTP server .
9790	Waits for a response to the server .
9791	Get the new access info .
9792	Check if a token is present .
9793	Set user access credentials .
9794	Refresh the access token .
9795	Create a manifest table .
9796	Split a full path into bucket and normalized prefix .
9797	Check if a bucket exists .
9798	Extract the run id from a key .
9799	Remove None values from a dictionary .
9800	Add a run to the manifest .
9801	Check if a run is in a manifest .
9802	Extract schema from schema URI .
9803	Convert a schema to snake_case .
9804	Parse a list of contexts .
9805	Parse an unstructured event .
9806	Transform a line to JSON .
9807	Convert an event to JSON .
9808	Get the used template from the response .
9809	Print a context block .
9810	Print the variables in the context .
9811	Convert SQL to HTML .
9812	Format a Django context into HTML .
9813	Format a dictionary summary .
9814	Convert text to HTML .
9815	Format an object .
9816	Format an object .
9817	Get a token from a string .
9818	Get a list of nodes from a string .
9819	Convert latex to text .
9820	Set the template directory .
9821	Read a tex file .
9822	Convert latex to text .
9823	u Converts Unicode characters into LaTeX .
9824	Convert a string to unicode .
9825	Retrieves the organisation information .
9826	Get boards .
9827	Get a list of members .
9828	Updates an organisation .
9829	Remove a member from the group .
9830	Add a member by id
9831	Add a new member to the organization .
9832	Fetches list information .
9833	Adds a card to the account .
9834	Fetches label information .
9835	Fetches checkItems
9836	Update label .
9837	Update a label .
9838	Get authorisation url .
9839	Fetches card information .
9840	Get a board .
9841	Gets a list from the server .
9842	Get a list of checklists .
9843	Add a comment .
9844	Add an attachment .
9845	Add a checklist .
9846	Add a label from a dictionary .
9847	Add a label from a class .
9848	Add a member to the group .
9849	Retrieves member information .
9850	Get a list of cards .
9851	Get a list of organizations .
9852	Creates a new board .
9853	Decorate a method to handle a single class .
9854	Retrieve information about the board .
9855	Get list of lists
9856	Get list of labels
9857	Get a card .
9858	Get checklists .
9859	Fetches an organization .
9860	Updates a board .
9861	Add a list .
9862	Add a label .
9863	Fetches checklist info .
9864	Get the card .
9865	Get checklist items
9866	Update a checklist .
9867	Add a checkItem to the account .
9868	Remove a checkItem
9869	Update a checklist name
9870	Updates the checklist item .
9871	Add authorization parameters to query parameters .
9872	Raises an exception if the response fails .
9873	Build the URL for the given path and query parameters .
9874	Fetches and returns a JSON response .
9875	Create an organisation
9876	Create a board .
9877	Create a label .
9878	Create a new list from a list .
9879	Create a card .
9880	Create a checklist from a json dictionary .
9881	Create a new member
9882	Get an organization
9883	Get a board .
9884	Get a list
9885	Get a card .
9886	Get a checklist
9887	Get a single member .
9888	Extract a domain from a URL .
9889	Convert a string to a raw text markdown .
9890	Convert text to raw text .
9891	Convert text into text pairs .
9892	Set the password for a service .
9893	Split text with locations .
9894	Mark a regex in text .
9895	Mark the start and end of a regex .
9896	Run the command line .
9897	Create a new AES cipher
9898	Get the AES mode for the given mode .
9899	Get the priority of the project .
9900	Validate the encryption scheme .
9901	Called when a message arrives .
9902	Make a unique ID for this instance .
9903	Connect to the MQTT server .
9904	Handle a CONNACK packet .
9905	Encode a string .
9906	Decode a string .
9907	Encode a 16 bit integer .
9908	Encode length .
9909	Decode length .
9910	Encode the message .
9911	Encode this message .
9912	Decode a packet .
9913	Encode the response header .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode this message .
9917	Encode this message .
9918	Decode a packet .
9919	Encode this message .
9920	Encode the payload .
9921	Decode a packet .
9922	Decode a packet .
9923	Get the url for the vk .
9924	Make a request to the API .
9925	Refreshes all blocks .
9926	Format the data .
9927	Fit data to data .
9928	Fit KMeans clustering .
9929	Fit a mean shift
9930	Fit the classifier to data .
9931	Predict classifier .
9932	Map clusters to indices .
9933	Sort clusters .
9934	Convert datetime to date
9935	get total number of points
9936	Get the total time span of a dictionary
9937	Convert an array to a unitpicker .
9938	Pretty - print an element .
9939	Convert a string to a name .
9940	convert a string to a massname
9941	Collate all files in a directory .
9942	Enumerate a boolean array .
9943	Convert tuples to boolean .
9944	Fast smoothing .
9945	Fast gradient of an array .
9946	Find the minimum values of x and y .
9947	Cluster mean shift
9948	Cluster KMeans clustering .
9949	Cluster DBSCAN
9950	Get a list of all defined SRMS
9951	Read the configuration .
9952	Read latools . cfg file
9953	Print all available configurations .
9954	Copy the SMR table to a file .
9955	Create a config file
9956	Change the default configuration .
9957	Return a copy of the filter filter .
9958	Defragment a filtered filter .
9959	Deprecated .
9960	Autorange plot
9961	Creates a numpy array for the time series
9962	Set ratio .
9963	Calculate the calibration
9964	Sample the stats .
9965	Return a dictionary of the ablation times
9966	Filter the selected analyte
9967	Filter the gradients at the given threshold .
9968	Calculate the correlation coefficient .
9969	Filter correlation coefficients .
9970	Add a new filter
9971	Returns a dictionary of parameters
9972	Plot histograms .
9973	Summary statistics .
9974	Load reference data
9975	Lookup a type and return its type .
9976	Return a list of all elements for each element .
9977	Calculate molecular weight
9978	Generate a namedtuples for the given arguments .
9979	Emit a predicate from a predicate .
9980	Remove duplicates from a stack .
9981	Calculate the weighted mean and standard deviation
9982	Gaussian function
9983	Calculate standard deviation .
9984	Get the samples for the given subset .
9985	Deprecated .
9986	Calculate weighted mean .
9987	Calculate background
9988	Subtract the background .
9989	Calculate ratio .
9990	Make a subset of the analysis .
9991	Filter gradients by percentile thresholds .
9992	Fit a classifier to the model .
9993	Apply a classifier to a set of samples .
9994	Filter correlation between samples .
9995	Apply a filter on the data
9996	Remove all samples from the data
9997	Return the status of the filter
9998	Defragment filter .
9999	Filter all samples that are not removed .
10000	Plot gradient histogram .
10001	Crossplot gradient plot .
10002	Plot histograms .
10003	Generate a plot of traces .
10004	Plot gradient plots .
10005	Generate a plot for each analysis .
10006	Sample the stats .
10007	Retrieve statistics for the sampler
10008	Exports traces from LATOOLs
10009	Export the traces to a file .
10010	Save log to file .
10011	Export the data to a file .
10012	Split a file into a dictionary .
10013	Apply a function f to f .
10014	Plot a pca .
10015	Calculate the bayes scale .
10016	Calculate the median of an array .
10017	Remove noise from a signal .
10018	Perform exponential decay .
10019	Add a filter
10020	Remove a set or set .
10021	Clear the configuration .
10022	Remove all available analytes
10023	Match the filter key with the given fuzzkey .
10024	Make an array from a key .
10025	Grab an index from a filter
10026	Get information about the component
10027	Log a function .
10028	Write a log file .
10029	Read a log file .
10030	Decorator for auto login
10031	Get information about the modem .
10032	Send a SMS message .
10033	Parse a file - like object .
10034	Return a link to the nbviewer .
10035	Return the thumbnail div .
10036	The code div .
10037	Return the code example for this node .
10038	Get the URL for this node .
10039	Get the output file name .
10040	Process notebook .
10041	Convert nbconvert to python
10042	Generate a URL for download .
10043	Create a thumbnail image .
10044	Get the header and description .
10045	Scale an image .
10046	Saves the thumbnail .
10047	Copy thumbnail figure
10048	Get the URL for a file .
10049	Get list of languages for the given field .
10050	Return the default value for the given field .
10051	Process a thumbnail file .
10052	Pre - save the image if necessary .
10053	Refresh the thumbnail cache .
10054	Return a list of all thumbnail sizes .
10055	Create a thumbnail image .
10056	Delete a thumbnail .
10057	Create a thumbnail .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Called when a message is received .
10061	Subscribe to a number of digits .
10062	Return a set of all accepted states .
10063	Register a provider
10064	Send a message .
10065	Create a receiver blueprint for the given provider .
10066	Return a dictionary of all registered providers .
10067	Receive a message .
10068	Called when a provider is received .
10069	Decorator to handle JSON errors .
10070	Forward an object .
10071	Sign a web3 transaction .
10072	Estimate the gas for a given address .
10073	Estimate the gas gas for a transaction .
10074	Write bytes to the stream .
10075	Read a line .
10076	Send an email .
10077	Return the message as a string .
10078	Check if we have bad headers
10079	Add an attachment .
10080	Register a list of services .
10081	Create a Config object from a module .
10082	Register a service .
10083	Return the value of a key .
10084	Raise an exception if there is an exception .
10085	Setup the service
10086	Calculate the N derivative of the wavelength
10087	Cauchy equation
10088	Initialize the backend .
10089	Login to login .
10090	Returns a dictionary of domains for this node .
10091	Get all pages
10092	Patch an object .
10093	HTTP DELETE request .
10094	Return True if two files are same .
10095	Create a junction link
10096	Initialize logging .
10097	Raises an error .
10098	Claim a list of readers .
10099	Creates a new column header from MuTect metadata .
10100	Claim a set of reads from a VCF file .
10101	Initialize population stats .
10102	Claim a list of unclaimed readers .
10103	Split a string .
10104	Return the first line of a string .
10105	Return the end of a string .
10106	Move the next line to the next line .
10107	Seek to the previous line .
10108	Return the tail of the file .
10109	Return the head of the file .
10110	Generator that yields lines from the file .
10111	Claim reads from strelka .
10112	Parse a VCF record .
10113	Convert sample_fields into an OrderedDict .
10114	Return a set of tags for each sample .
10115	Join the info fields from the info_dict
10116	Return the field name for the sample
10117	Return the sample field for a sample
10118	Returns tab - delimited string of VcfRecord .
10119	Add a new sample tag value .
10120	Add or replace a new filter .
10121	List available categories .
10122	Create a product form for a product .
10123	Create staff products form .
10124	Add an error for a product .
10125	Memoise a function .
10126	Factory for model fields .
10127	Returns a list of items that are pending .
10128	Send an email .
10129	Iterate over OpenStreetMap streams .
10130	Parse osm file .
10131	Iterate over OpenStreetMap notes .
10132	Returns True if the user passes the filter
10133	Check if user has met
10134	Return the remainder of a user .
10135	Preprocesses a queryset .
10136	Preprocesses a queryset .
10137	Preprocesses a queryset .
10138	Preprocesses a queryset .
10139	Pre - filter for users .
10140	Decorate a function to modify the cart .
10141	Create a cart for a user .
10142	Extend the reservation for the cartesian product .
10143	Applies a voucher .
10144	Validate the cart .
10145	Fix invalid errors .
10146	Recalculate discounts .
10147	Add discounts to the product .
10148	Decorator to mark a report view .
10149	Iterate over all cells .
10150	Get form from request
10151	Render the given data .
10152	List all reports .
10153	List items sold
10154	Summarize sales summary .
10155	List all payments .
10156	List of credit note refunds .
10157	List product status .
10158	Display a list of discounts .
10159	List product items .
10160	Return a list of Invoice objects for the given date .
10161	View for credit notes .
10162	View the invoices .
10163	List attendees .
10164	Display a list of speaker registrations .
10165	Manage inventory
10166	Return a list of available categories .
10167	Return the number of available credit for this invoice .
10168	Checks if the user is sold out and unregistered .
10169	View function that redirects to the user .
10170	Edit profile .
10171	Handle a profile form .
10172	View a product category .
10173	Handle products .
10174	Handle a voucher form .
10175	Checkout an invoice .
10176	View an invoice access code .
10177	View an invoice .
10178	View for manual payment .
10179	Refund an invoice .
10180	Apply a credit note .
10181	Register a staff item .
10182	Extend the reservation for a user .
10183	Send an email out of an invoice .
10184	Render badges .
10185	Render a badge .
10186	Return a list of discounts for a user .
10187	Annotate a queryset with past usage information .
10188	List available products .
10189	Applies the credit note to the invoice .
10190	Calculate the cancellation fee .
10191	Generate an access code .
10192	Decorator for lazy evaluation .
10193	Get an object from a dotted name .
10194	Return an invoice for the given cart .
10195	Generates a manual invoice
10196	Generate cart item from cart
10197	Apply credit notes to invoice .
10198	Check if the user can view this invoice .
10199	Refresh invoice from database .
10200	Validate that the invoice is allowed to pay to payment .
10201	Update the invoice status .
10202	Mark the invoice as paid .
10203	Returns True if invoice matches the invoice
10204	Update the validity of the invoice .
10205	Mark this invoice as void .
10206	Refreshes the invoice .
10207	Send an email .
10208	Updates an annotation .
10209	Flatten a single field
10210	Print download files .
10211	Download a file from the processor
10212	Get project data
10213	List all registered processors .
10214	Print all the inputs for a given processor .
10215	Restart data from json .
10216	Upload files to a project .
10217	Upload a file .
10218	Download the results from the server .
10219	Get all subclasses of c .
10220	Get repo and project
10221	Get a list of variants with suggested changes .
10222	Get a list of variants that have been merged .
10223	Search for variants by coordinate query .
10224	Bulk search for variants by coordinates .
10225	Update an element .
10226	Remove duplicates from a sequence .
10227	Login to Asana .
10228	Prompts the user for a user .
10229	Get the data for a given issue
10230	Move the saved data for a given issue .
10231	Get saved task data
10232	Get a task by id .
10233	Save to file .
10234	Return the value of a key .
10235	Decorator to run as a task .
10236	Flush the queue .
10237	Create a task .
10238	Format a list of task numbers with links .
10239	Creates a new task for the given issue .
10240	List of data types for this project .
10241	Logs an EKM meter .
10242	Initialize the serial port .
10243	Set the polling values for polling .
10244	Combine the BAM file and combine them .
10245	Render the JSON read by timestamp .
10246	Set the context string
10247	Calculate PF .
10248	Set max demand period
10249	Set the password .
10250	Unpacks the data into a tuple .
10251	Convert the raw data into a log file .
10252	Render the def_buf .
10253	Calculate the CRC of a meter read .
10254	split an ekmdate string into a namedtuple
10255	Get the mongths buffer .
10256	Set CTR ratio .
10257	Assign a schedule to the schedule
10258	Assign a season schedule to the specified day .
10259	Set season schedules
10260	Assign a holiday date .
10261	Read schedules from a table
10262	Extract a schedule from a schedule
10263	Read MonthTariff format .
10264	Extract the annual tariff from a month .
10265	Read holidays and schedule date .
10266	Extract holiday date from setting_holiday .
10267	Read the settings .
10268	Write a command to the server .
10269	Send password authentication .
10270	Update all observers
10271	Initialize LCD lookup .
10272	Perform a request .
10273	Perform a request .
10274	Perform a request .
10275	Make the AR fields for the field .
10276	Calculate the fields for the measurement .
10277	set display list
10278	Set the relay status .
10279	Send a termination string .
10280	Set pulse ratio .
10281	Set the zero resettable KWH .
10282	Set LCD CRC .
10283	Iterate over the fields in the given schema .
10284	Iterate over the fields in a schema .
10285	Generate a list of paragraphs .
10286	Generate a random text .
10287	Return a string representation of the statistics .
10288	Colorize text .
10289	Display the given text .
10290	Summary of test results .
10291	Parse command line arguments .
10292	Setup the context manager .
10293	Run the test .
10294	Run a transform .
10295	Transform a description to a test case .
10296	Transform a description of a description .
10297	Transform an example .
10298	Iterate through the body of an example .
10299	Return an ast . Argument .
10300	Register a path hook .
10301	Convert a byte string to code .
10302	Apply an argument parser .
10303	Load a module by name .
10304	Load all files from a path .
10305	Discover directories in a directory .
10306	Return a function that checks the contents of a file .
10307	Return a function that checks for messages in a receiver .
10308	Add a place .
10309	Remove a file .
10310	Create a restart message .
10311	Calls the given results .
10312	Get the process monitor .
10313	Create a Processmon service
10314	Refreshes the session .
10315	Remove expired nodes .
10316	Remove a node from the node .
10317	Get the last updated time of a node
10318	Get all nodes in the cluster .
10319	Refresh the session .
10320	Increments all times modified times modified .
10321	Dereference a node .
10322	Returns a list of tokens interleaved with the delimiter .
10323	Check if a path is bad .
10324	Merge two inputs .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Convert x to a constant .
10328	Concatenate a function .
10329	Convert a function to a function .
10330	Run a process .
10331	Make a TimerService
10332	Try to parse a parser .
10333	Return an alternative parser .
10334	Convert a parser to an optional argument .
10335	Creates a RepeatedOnce .
10336	Convert a parser to a regular expression .
10337	Creates a repetition between two parsers .
10338	Return a new RepeatedSeparatedParser with separator separated by separator .
10339	Return a list of states that have been checked .
10340	Close the state
10341	Check if the state is valid .
10342	Add a heartbeat to a master .
10343	Wrap a single service to wrap it into a single service .
10344	Freeze graph from checkpoint .
10345	Freeze a trained model .
10346	Save a graph only .
10347	Save graph only from checkpoint .
10348	Save weights from checkpoint .
10349	Restore model from checkpoint .
10350	Parse the given token and return a new instance .
10351	Render a tag .
10352	Validate a list of arguments .
10353	Get the context data .
10354	Parse a template .
10355	Get context data .
10356	Convert caffe to Tensorflow session .
10357	Freeze a caffe config file .
10358	Save graph only .
10359	Convert a sequence of tuples into rows .
10360	Group n elements from iterable .
10361	Yield successive elements from iterable .
10362	Remove duplicates from an iterable .
10363	Take an iterable and return it .
10364	Take an iterable from iterable until it succeeds .
10365	Partition items into bins .
10366	Convert an item to an iterable .
10367	Context manager to suppress exceptions .
10368	Return a list of duplicates .
10369	Assert that iterable is ordered .
10370	Swap the result of a partition .
10371	Partition a dictionary by key .
10372	Get the first n queues
10373	Reset the iterator .
10374	Parse an AS variable .
10375	Tag a template tag .
10376	Return a descendant of this chain .
10377	Fetch all records from the database .
10378	Iterate over an object .
10379	Select a selector .
10380	Parse a selector .
10381	Processes a production token .
10382	Returns a list of all parents in lhs
10383	Find the ancestors of two nodes .
10384	Return a list of siblings of two nodes .
10385	Validate node production .
10386	Match a list of validators .
10387	Ping an ICMP port .
10388	Perform a GET request .
10389	Expire the cache .
10390	Set the value of a key .
10391	Get the value of a key .
10392	Check if a key exists in the store .
10393	Check if the chain is valid .
10394	Create a NistBeacon value from a JSON string .
10395	Create a NistBeacon value from an XML string .
10396	Return rendered content .
10397	Execute a function on the log file .
10398	Get a list of rows .
10399	Validate a token
10400	Return a connection to the server .
10401	Validate a token .
10402	Create a token .
10403	Convenience function for creating a counter32 .
10404	Calculate the counter - clockwise counter - clockwise .
10405	Calculate the average duration .
10406	Setup the outputs
10407	Setup the sources
10408	Send a list of events .
10409	Start the watchdog .
10410	Parse the format string .
10411	Parse a line into a dictionary .
10412	Validates that the field is a valid date .
10413	Validate a message field .
10414	Verify a token
10415	Device name .
10416	Log a warning message .
10417	Connects all the registered receivers .
10418	Create a link for a user .
10419	Send a notification notification to the user .
10420	Send email notification notification .
10421	Send an email notification .
10422	Send a notification notification to a user .
10423	Send notification .
10424	Create a link .
10425	Validate token
10426	Revoke a link .
10427	Create a new request .
10428	Get a request by user .
10429	Confirm email .
10430	Accepts a request .
10431	Reject this request .
10432	Create a link for the user .
10433	Create a SHA512 hash .
10434	Verify a signature .
10435	Return whether or not the given record is allowed .
10436	Create an access request .
10437	Confirm an email .
10438	Create an SSH command client .
10439	Reverse column .
10440	Return the selected item
10441	Return an ordered list of items
10442	Get the version of the file .
10443	Set the version of the file
10444	Initialize the SSH configuration .
10445	Start the timer .
10446	Wait for events to finish .
10447	Show shared link .
10448	Connect to Riemann .
10449	Stop the connection .
10450	Empty the event queue .
10451	Add events to the list of events .
10452	Create a connection to the server .
10453	Create an Elasticsearch client
10454	Encode an event .
10455	Encode a list of events .
10456	Decode a protobuf message .
10457	Send events to the device .
10458	Generate a file preview .
10459	Retrieve a file preview .
10460	Send a message to RabbitMQ .
10461	Main loop loop .
10462	Return True if log_interval is true False otherwise .
10463	Respond to the server .
10464	Abort the session .
10465	Perform SASL preparation .
10466	The admin footer .
10467	Build payment parameters
10468	Build payment parameters .
10469	Post a payment with an alias .
10470	Get the version number
10471	Initialize the widget .
10472	Called when the user has been setup .
10473	Configure shortcuts .
10474	Called when the item is activated .
10475	Called when the item is selected .
10476	Set the location of the widget .
10477	Finalize resources .
10478	Run the resource .
10479	Run the clean command .
10480	Fetches all children .
10481	Remove all children .
10482	Return the icon for the given index .
10483	Run a command and return its pid .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close open file descriptors .
10487	Redirect stream to target .
10488	Set attributes on the form .
10489	Import an app module .
10490	Import project modules .
10491	Include a token .
10492	Get URL for a gravatar .
10493	Get the avatar for the object .
10494	Validate a file system path
10495	Validate URL .
10496	Get the absolute path of a template .
10497	List all objects in S3 bucket .
10498	Build the worklfow json .
10499	Execute the GDX API .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Create an API client
10505	List folder contents .
10506	Download a file .
10507	Check if a file exists .
10508	Get the parent of a path .
10509	Create a folder .
10510	Upload a file to storage .
10511	Delete a folder .
10512	Validate a storage path .
10513	Create a new storage client .
10514	Create a new entity .
10515	Get details about an entity .
10516	Set the metadata for an entity .
10517	Get metadata for an entity .
10518	Update metadata for an entity .
10519	Delete metadata for an entity .
10520	List projects .
10521	Get project details .
10522	Create a project
10523	Delete project .
10524	Create a folder .
10525	Get folder details .
10526	Delete folder .
10527	Upload a file to the server .
10528	Copy content from a file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Creates a copy of the service .
10533	Return a copy of the request .
10534	Creates a new query with the given parameters .
10535	Sets an exception .
10536	Return a list of field names .
10537	Add a function to the job .
10538	Generate Genotype GVCFs .
10539	Run oncotator .
10540	Sort a list by key .
10541	Returns a list of timestamps .
10542	Load export data .
10543	Shift the sequence by tshift
10544	Calculate the sum
10545	Collect rfxcom
10546	Create a new user .
10547	Parse VN results .
10548	Parse release results .
10549	Parse the prod staff results .
10550	Parse character results .
10551	Parse tag results .
10552	Parse user results .
10553	Add a list of files to a tarball .
10554	Perform an operation on all files in the specified directory .
10555	Copy a file to the output directory .
10556	Make command line parameters for Spark .
10557	Return a list of docker parameters for this task .
10558	Refreshes the metadata from the database .
10559	Run MuTect .
10560	Create a new item
10561	List of streams .
10562	Export the device s data to a directory .
10563	Search for vndb .
10564	Parse search results .
10565	Add a stream to the dataset .
10566	Reset the device .
10567	List all users
10568	Run BWA index files
10569	Connect to the logger .
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a value into the cache .
10573	Syncs all datapoints
10574	Start the syncer .
10575	Stop reading .
10576	Download a URL from a URL .
10577	Upload a file to S3 .
10578	List labels .
10579	Print ontology tree .
10580	Get the mean size of a BAM file .
10581	Get the current container id
10582	Run STAR
10583	Create a new document .
10584	Export the stream to a json file .
10585	Return a device instance .
10586	List all labels for an ontology .
10587	Get an ontology hierarchy .
10588	Run a tool .
10589	Populate the parser from a dictionary .
10590	Get empty config file .
10591	Get the mount point for the Docker container .
10592	Add an option to the parser .
10593	Create an argument parser .
10594	Create a pipeline command
10595	Set authentication .
10596	Handle an HTTP response .
10597	Ping the server .
10598	Create a new node
10599	Update a resource .
10600	Delete a path .
10601	Subscribe to a stream .
10602	Create a new user .
10603	List of devices .
10604	Run cutadapt .
10605	Run FaidX FaidX
10606	Run samtools index .
10607	Run Sambamba markdown command
10608	Run samblaster
10609	Mark duplicates .
10610	Run Picard sort .
10611	Run base recalibrator .
10612	Run kallisto .
10613	Run rsem on a BAM file .
10614	Get the user affinity for a test .
10615	Send a command .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Send a reconnect to the device .
10619	Resubscribe to all subscribed subscriptions
10620	Called when a connection is opened .
10621	Called when the websocket connection is closed .
10622	Called when an error occurs .
10623	Called when a message is received .
10624	Ensure the connection is alive .
10625	Run GATK SelectVariants .
10626	Run GATK VariantFiltration on a genome .
10627	Perform a variant recalibrator .
10628	Apply a variant recalibration .
10629	Combine GATK VariantVariants .
10630	Check if a BAM file exists .
10631	Load handler handlers from a dictionary .
10632	Write configuration to file .
10633	Get the configuration file
10634	Get a term from ontology .
10635	Search ontology .
10636	Suggest a ontology .
10637	Iterate over terms of ontology .
10638	Iterate over the labels of the given ontology .
10639	Iterate over labels in ontology .
10640	Iterate over the ontology hierarchy .
10641	Run fastqc
10642	Add a stream to the query
10643	Create a Flask app
10644	Start the Spark master container .
10645	Start a Spark worker .
10646	Start a new datanode
10647	Stop the Docker worker .
10648	Check the status of a worker .
10649	Tokenizer . Generates tokens stream from text
10650	Lookup a zone by name .
10651	Fetches the DNS configuration for a given zone .
10652	Merge a list of resources into a single XML file .
10653	Validate a change set .
10654	Minimize a list of members .
10655	Returns the fitness score of the group .
10656	Return the cost function of the group .
10657	Returns the median value of the cost function
10658	Returns a dictionary of parameters .
10659	Return the list of members of the group .
10660	Add a parameter .
10661	Generate a new population .
10662	Normalize key - value pairs .
10663	Get the environment variables .
10664	Takes a callable and raises an exception .
10665	Transform a list of packages into a dictionary .
10666	Transform the result to a string .
10667	Convert HTML to XHTML .
10668	Convert xhtml to HTML .
10669	Convert a document to a string .
10670	Open HTML in browser .
10671	Drop the tree .
10672	Drop the current tag .
10673	Get element by id .
10674	Apply CSSSelector .
10675	Iterate over all loggers .
10676	Return a dictionary of counts for each test .
10677	Return True if count is a single class
10678	Checks if the module is a single module .
10679	Validate request parameters
10680	Ensure id is valid
10681	Decode a file system path .
10682	Escape an iterspec in an iterable .
10683	Return the codec name for the given encoding .
10684	Detect BOM .
10685	Get the remote address of a forwarded_to .
10686	Convert an object to a Number .
10687	Parse BeautifulSoup string .
10688	Parse a file .
10689	Convert BeautifulSoup tree to tree .
10690	Get the current traceback .
10691	Return the exception .
10692	Render a summary .
10693	Generate a plaintext traceback .
10694	Return a list of lines that are annotated .
10695	Render the source table .
10696	Determine the version of an egg .
10697	Get the index URLs for the project .
10698	Find all versions of a project .
10699	Find an installed requirement .
10700	Sort links .
10701	Get the content type of a URL .
10702	Iterate over links .
10703	Returns True if the token is verified
10704	Find all data files for package .
10705	Exclude data files from a package .
10706	Parse a requirements file .
10707	Join a list of lines .
10708	Ignore comments .
10709	Compile a marker .
10710	Transformer AST node .
10711	visit an attribute node
10712	Convert a value to a number .
10713	Make a copy of the current request context .
10714	Push the context to the stack .
10715	Remove the app context from the stack .
10716	Make a copy of the app .
10717	Match the request .
10718	Push a request to the app .
10719	Make a relative path relative to a relative path .
10720	Check if a distribution is editable .
10721	Add a function to the list of URL values .
10722	Add a function to the registry .
10723	Register an error handler .
10724	Convert a generator to a stream .
10725	Creates a Flask response .
10726	Generate a URL for the given endpoint .
10727	Safely join a file with the given filename .
10728	Get the root path of a module .
10729	Get the jinja template loader
10730	Run the completion script .
10731	Get the cookie domain for the application .
10732	Create a cache file for links .
10733	Return True if the root directory is a pure Python package .
10734	Yield paths for uninstallation .
10735	Raise an Unsupported Wheel - Version .
10736	Build a single wheel .
10737	Iterate over all symbols .
10738	Decorator to ensure that the user has expired
10739	Add egg info .
10740	Write delete marker file .
10741	Return True if the virtualenv is running
10742	Return the username of the user
10743	Create a distutils scheme
10744	Parse the Content - Control header .
10745	Cache a request .
10746	Cache a response .
10747	Update cache entries for a given path .
10748	Load template template .
10749	Install site .
10750	Save the path to the file .
10751	Convert a value into a Converter
10752	Add filters to the filter .
10753	Configure a logging handler .
10754	Add handlers to a logger .
10755	Add common logging to a logger .
10756	Execute a script .
10757	Temporarily override the temporary directory .
10758	Return the url and revision for the url
10759	Get an item from an object .
10760	Convert source to file .
10761	Compile the template files .
10762	Return the path to the default cache .
10763	Find eggs in a zip file .
10764	Find packages on a path .
10765	Declare a namespace .
10766	Get the mRO of a class .
10767	Find an adapter for ob .
10768	Ensure directory exists
10769	Iterate over all entries in a group .
10770	Return whether this distribution can be added to this distribution .
10771	Find the best match for a requirement
10772	Evaluate a marker .
10773	Evaluate a Marker string .
10774	Format a log record .
10775	Format a number .
10776	Parse a regular expression .
10777	Convert decimal precision to decimal .
10778	Return the decimal precision of a number .
10779	Convert value to scientific notation .
10780	Return the total seconds of a timedelta object .
10781	Parse a requirements string .
10782	Check if distutils is already patched .
10783	Raise an exception if the value is not valid .
10784	Fetches the egg for the build
10785	Roll roll roll .
10786	Convert obj to Price class
10787	Validate price .
10788	Validate a request .
10789	Get a method based on args
10790	Execute the given method and return the result .
10791	Deprecated .
10792	Return the blueprint name of the blueprint .
10793	Ensure a multictypeError is raised .
10794	Make an abstract dist .
10795	Add a requirement .
10796	Iterate through req_to_install .
10797	Check if a requirement is installed .
10798	Return a list of dependencies for this dependency .
10799	Get all namespace packages
10800	Convert obj to JSON .
10801	Tokenize a document .
10802	Merge HTML annotations .
10803	Copy annotations from src to dest
10804	Compress a list of tokens .
10805	Convert a list of tokens into HTML .
10806	Expand a list of tokens .
10807	Locate unbalanced end of unbalanced_end .
10808	Fixup HTML tags .
10809	Flatten an element .
10810	Split text into list of words .
10811	Return the start tag of an element .
10812	Return the end tag of an element .
10813	Serialize an HTML fragment into a string .
10814	Remove tags inside a block .
10815	Extract a constant from code .
10816	Return the cache URL for this service .
10817	Recursively links the given element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Decorate a function to handle errors .
10821	Get the treeWalker for the given tree type .
10822	Export svn repository
10823	Get the revision number for a given location .
10824	Decorator for setup methods .
10825	The name of the module .
10826	Return a boolean indicating if the application should be propagated .
10827	Find the path to the instance .
10828	Update the template context .
10829	Handle an HTTP exception .
10830	Tries to trap an HTTP exception .
10831	Handle an exception .
10832	Raise the appropriate routing exception .
10833	Dispatches the request .
10834	Creates a default HTTP response .
10835	Create the URL adapter for the given request .
10836	Inject url defaults into the given values .
10837	Yield unique values from iterable .
10838	Handle any required Requests .
10839	Convert a requirement to a string .
10840	Convert pkgginfo info to metadata .
10841	Iterate over all available modules .
10842	Iterate over all classes .
10843	Returns a list of all methods for this class .
10844	Find the basename of a given name .
10845	Return True if path is a module .
10846	Iterate over site packages .
10847	Iterate over the paths of the module .
10848	Dump kwargs to json
10849	Set the default argument defaults for the app .
10850	Set multiple keys for a mapping .
10851	Increments a value by delta .
10852	Dump an object to a string .
10853	Build a dictionary of editable options .
10854	Populate the link with the link .
10855	Ensure the source directory exists .
10856	Remove temporary source from temporary directory .
10857	Get the distribution for this package .
10858	Get the data from the stream .
10859	Get the WSGI headers .
10860	r Convert an URI to a native URI .
10861	r Return the path to the user s cache directory .
10862	Return the path to the user data directory .
10863	Get the log directory for the application .
10864	Return the path to the user config directory .
10865	Return a list of directories for the site .
10866	Iterate over all loaded modules .
10867	Restart the process with the given command .
10868	Convert s to text .
10869	Find the CA bundle .
10870	Parse an HTML document .
10871	Parses a stream and returns a DOM document .
10872	Parses a stream into an XML fragment .
10873	Translate a word .
10874	Convert a string to a list of tokens .
10875	Bind to the server .
10876	Print report message .
10877	Load the bytecode from a file .
10878	Convert a dictionary of params to a dictionary .
10879	Run a command .
10880	Get PyPI version .
10881	Return a list of Distribution objects for a given location .
10882	Find external links .
10883	Try to open a URL .
10884	Process a URL .
10885	Return a list of paths that have been removed .
10886	Initialize the pathinfo set .
10887	Add a package .
10888	Add packages to Sitedir
10889	Check if enableusersite is enabled
10890	Add site - packages .
10891	Set up the quit signal .
10892	Alias for globus aliases .
10893	Set default encoding .
10894	Force the global egg - packages after the local site .
10895	Fix sys . pathpath
10896	Run a subprocess .
10897	Check if pyrex is installed .
10898	Convert pyxex source files to language .
10899	Run the WSGI application .
10900	Retrieve a resource from a resource .
10901	Return the user agent .
10902	Return True if name is a valid URL .
10903	Unpacks a link .
10904	Download a link .
10905	Check if link is already downloaded .
10906	Format a currency .
10907	Register an exchange .
10908	Decode the response .
10909	Default template context processor .
10910	Render a template
10911	Render a template .
10912	Render a template string .
10913	Parse the version string .
10914	Returns True if the given variable is declared .
10915	Initialize a Name node .
10916	Render an include node .
10917	Render a from import node .
10918	Create a WHEEL file and add it to it .
10919	A decorator for atomic operations .
10920	Start a service factory
10921	Convert unicode string to unicode string .
10922	Return a list of packages that match a requirement .
10923	Populate the requirements set with the given options .
10924	Export to a temporary directory .
10925	Lookup an Amazon Product
10926	Iterate over pages .
10927	The ancestor of this node .
10928	List of children .
10929	Get an element from path .
10930	Get element s text .
10931	Get the XML element of the element .
10932	Return price and currency .
10933	List price .
10934	Send a request to the controller .
10935	Build a response from the cache .
10936	Make an attribute getter for the given attribute .
10937	Convert string to title .
10938	Sort a value by its value .
10939	Group by attribute .
10940	Apply filter function .
10941	Create a logger instance
10942	Compare two strings .
10943	Verify a signature .
10944	Derives the key derivation of the secret .
10945	Get the signature for a given value .
10946	Sign a value .
10947	Verify a signature .
10948	Unsign a signed value
10949	Sign a value .
10950	Validate a signed value .
10951	Dump an object to a string .
10952	Handle an error .
10953	Find packages .
10954	Yield packages from a list of packages .
10955	Generator for all directories in base_path
10956	Prepare the HTTP response .
10957	Unign a RECORD file .
10958	Unpacks a wheel file into a directory .
10959	Install a setuptools script .
10960	Assemble all nodes in the graph
10961	Redraw the canvas .
10962	Get a node by ID
10963	Called when a directed graph has changed .
10964	Called when a node has changed .
10965	Called when a component has changed .
10966	Handle a left - click event .
10967	Called when the diagram has changed .
10968	Clear the diagram .
10969	Called when a domain model has changed .
10970	Map a domain model to a new one .
10971	Remove all nodes from the model .
10972	Map an element to a diagram .
10973	Set the style of a dot node
10974	Parse an XDot data .
10975	Process a font .
10976	Processes an ellipse .
10977	Process a polygon .
10978	Process a polyline .
10979	Process a text component .
10980	Process an image .
10981	Render a file .
10982	Save an object to a file .
10983	Load a dot file .
10984	Checks if the given point is in the given point .
10985	Draw the bounding box .
10986	Create a new graph
10987	Connect to the database .
10988	Parse dotcode and store graph data
10989	Create a new model
10990	Open a file dialog
10991	Save info to file .
10992	Save the graph as a file dialog .
10993	Configure the graph
10994	Configure nodes
10995	Configure edges
10996	Show info about the user .
10997	Add a node to the graph .
10998	Add an edge .
10999	Add a new subgraph .
11000	Add a cluster .
11001	Request a single graph from the model .
11002	Edit user options
11003	Configure dot code
11004	Called when user exits
11005	Move points to the origin .
11006	Save the object to a file - like object .
11007	Load a file - like object from a file - like object .
11008	Save to file .
11009	Load an instance from a file .
11010	Creates an alias property .
11011	Parse a file .
11012	List of startwords .
11013	Add a chain .
11014	Remove a chain from the chain .
11015	Build a chain from source .
11016	Generate a sentence .
11017	Create a temporary file .
11018	Add a node to the graph .
11019	Delete a node
11020	Get node by ID
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a new subgraph .
11024	Called when the program has changed .
11025	Set the list of nodes
11026	Parse DOT file .
11027	Parse a DOT file .
11028	Build top graph from tokens .
11029	Build a subgraph from tokens .
11030	Get the units and multiplier for the given seconds .
11031	Format duration in seconds .
11032	Load the graph from a file .
11033	Create the UI for the given parent .
11034	Split a sequence into multiple elements .
11035	Iterate over an iterable .
11036	Run Godot application .
11037	Get all children of an object .
11038	Append a child to the object .
11039	Insert a child node at the given index .
11040	Remove a child from an object .
11041	Called when a node has been replaced .
11042	Called when a node has changed .
11043	Get label for an object .
11044	Set label on an object .
11045	Called when the label has changed .
11046	Initialize the graph
11047	Update editor editor .
11048	Add listeners to the graph editor .
11049	Called when a node has been replaced .
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Called when an edge is replaced .
11053	Called when an object has changed .
11054	Add edges to the graph .
11055	Parse an Xdot directive .
11056	Called when drawing a drawing
11057	Create a node factory for the given row factory .
11058	Create an edge factory for the given row factory .
11059	Prepare the connection to the database .
11060	Parse an xdot directive .
11061	Parse a label directive .
11062	Handle drawing changes .
11063	Called when the camera is changed .
11064	Called when the position is changed .
11065	Handles the right down of the right button .
11066	Display information about a specific style .
11067	Draw the main layer
11068	Checks if the given point is inside a polygon .
11069	Draw the main layer
11070	Handle an event .
11071	Run the function .
11072	Get full page URL .
11073	Render the previous page .
11074	Render the seo links .
11075	Return True if the content type matches the content type .
11076	Select the content type based on the content type .
11077	Rewrite a URL .
11078	Remove URL authentication from URL .
11079	Create URL identifier .
11080	Normalize a host name .
11081	Discover all modules in a directory .
11082	Find all modules in a directory .
11083	Return a list of modules for module .
11084	List all classes in a module .
11085	List all classes in a module .
11086	Ensure directory exists
11087	Put text into the blob .
11088	Validate a card number .
11089	Get git version .
11090	Load a module .
11091	Add a path .
11092	Find a module by name .
11093	Split a line .
11094	Remove all namespaces from the root element .
11095	Check for consistency .
11096	Create a new instance from YAML
11097	Merge a dictionary of actions .
11098	Execute all actions
11099	Create a new instance from a YAML file .
11100	Add details to the request .
11101	Emit a record .
11102	Set the context for rendering .
11103	Log an attempt .
11104	Add URL to queue .
11105	Start the workers
11106	Set a KVStore value .
11107	Get the value of a key .
11108	Recurse through KVStore .
11109	Return an index for a given key .
11110	Delete a KVStore
11111	Plot a heatmap .
11112	Return a new datetime .
11113	Add months to a date .
11114	Checks if the month is a holiday period
11115	Set the music service to use .
11116	Create a new storage service .
11117	Read data from CSV file .
11118	Load a JSON file from a JSON file .
11119	Write the data to a json file
11120	Filter X by label .
11121	Calculate the mean of each label
11122	Feature importance of feature import
11123	Restore the data from the database .
11124	Merge two dictionaries .
11125	Decorator to mark a function as many arguments .
11126	Decorator to register a function .
11127	Find all registered blocks .
11128	Verify that the block is valid .
11129	Register a block .
11130	Unregisters a block field .
11131	Convert file to mp3 .
11132	Return a string representation of the desired version .
11133	Handle SSL redirecting .
11134	Initialize celery
11135	Queues an email .
11136	Parse Accept header .
11137	Parse a Cookie Control Control header .
11138	Parse a ContentType string .
11139	Parse a forwarded header value .
11140	Convert a string to a list of strings .
11141	Convert a list of parameters into a list of parameters .
11142	Resize an image to the desired width .
11143	Add a value to the link .
11144	Download a YouTube file .
11145	Connect to Google Drive API .
11146	Upload a file .
11147	Connect to music folder .
11148	Write the input parameters to a file .
11149	Update filenames .
11150	Read api from file .
11151	Scale A_phi by scaling_phi .
11152	Read pure water absorption from file .
11153	Read pure water scattering from file .
11154	Read the IOP from a file .
11155	Write a single iteration to a file .
11156	Build the b
11157	Build the total absorption
11158	Build the total attenuation C
11159	Build all b and c
11160	Set batch parameters
11161	Read a parameter file
11162	Convert a string to a list of floats .
11163	Read a PR report file .
11164	Create a handler for a list of signals .
11165	Handle SIGAL signal .
11166	Handle a signal .
11167	Pause a signal .
11168	Handle a signal .
11169	Called when a signal is received .
11170	Unregisters an event .
11171	Fetches metrics for a given metric .
11172	Fetch a list of dictionaries
11173	Collect items from iterable .
11174	Print an item to a file .
11175	Print all items in iterable .
11176	Set the signature of a function .
11177	Set the signature from a partial .
11178	Returns a copy of the argv with the given parameters .
11179	Ignore metainf files .
11180	Return a key for a file .
11181	Convert vlq to integer .
11182	Read a table .
11183	Parse the header .
11184	Convert seconds to seconds .
11185	Print the details of the game .
11186	Get data
11187	Display the result of the file .
11188	Write the model to a file .
11189	Perform data processing .
11190	Display the current connection .
11191	Print the information of the graphic .
11192	Display an error message .
11193	Hide the error message .
11194	Run the planarrad .
11195	Cancel the planarad
11196	Quit the planarad .
11197	Save figure .
11198	Open log file
11199	Open the documentation .
11200	Execute the actions required by the user .
11201	Called when a click is clicked .
11202	Mouse move event handler
11203	Display the current graphic .
11204	Create a LockSet for the genesis block .
11205	Create a signature
11206	signatures are not deterministic
11207	Only one of quorum quorum quorum
11208	In the supply is set by Issuer .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid lockset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	make privkeys that support color see cstr
11215	Calculate the delay of a packet .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the chain
11218	returns class_unsafe use
11219	registers native contract classes
11220	returns True if unknown
11221	receives rlp . decoded serialized
11222	Convert vgg image to image
11223	Convert image to vgg
11224	Get f layer .
11225	Get layer output .
11226	Get the features for each layer .
11227	Create a new key file
11228	Finish the bulk load job .
11229	Load data from a file .
11230	Put multiple items into the database .
11231	Release a bulk load
11232	List of tables .
11233	Fix the compiler flags .
11234	Searches for the metadata directory .
11235	Get the value of a key .
11236	Set the value of a key .
11237	Handle a table .
11238	Execute a command .
11239	Get the value of a key .
11240	Write default configuration
11241	Set the columns of the columns
11242	Write the table to an archive .
11243	Convert this object to a string .
11244	Convert string to float .
11245	Convert a string to a dictionary .
11246	Convert a string to a dictionary .
11247	Wrap text with indentation .
11248	Detect devices .
11249	Set the center frequency
11250	Calculate the result of the PSD
11251	Wait for the task to finish .
11252	Update the PSD .
11253	Read the data from a file - like object .
11254	Write the header to a file .
11255	Submit a function to the work queue .
11256	Convert time to number of times .
11257	Perform a frequency plan on the device .
11258	Create a new buffer
11259	Setup the stream .
11260	Stop the stream .
11261	Starts a PSD state .
11262	Perform a sweep .
11263	Set the device s address .
11264	Run CMake
11265	Filter a list of datetimes .
11266	Mask a datetime .
11267	Mask a datetime .
11268	Convert datetimes to keep only the days .
11269	Convert datetimes to delete .
11270	Convert a list of dates to a set of dates .
11271	Return a list of dates that are not deleted .
11272	Get SPI control byte .
11273	Read a single bit .
11274	Write a single bit .
11275	Get the bit number of a given bit pattern .
11276	Watch the port events for a given port .
11277	Handle events from an event queue .
11278	Makes a GPIO interrupt to the user .
11279	Set the edge of the GPIO interrupt edge .
11280	Waits until a file exists .
11281	Register a pin function .
11282	Delete a pin function .
11283	Enables GPIO interrupts in userspace .
11284	Send data to SPI .
11285	Render a form .
11286	Check if the form has any errors .
11287	Render a link .
11288	Extract package version .
11289	Return kwargs for the form
11290	Check the status of an HTTP response .
11291	Perform a GET request .
11292	Get download link .
11293	Upload a link to a folder .
11294	Upload a file .
11295	Upload a remote URL .
11296	Retrieve remote upload status .
11297	List folders .
11298	Retrieve all running conversions for a folder .
11299	Calculate the humidity .
11300	Calculate the windpoint .
11301	Publish the message to the server .
11302	Calculate the CRC of a byte string .
11303	Verify the data
11304	Unpacks a storm date .
11305	Determine whether to use a revision .
11306	wake the weather station
11307	Send a command .
11308	Send DMPFT command .
11309	Get new weather fields
11310	Parses the archive fields
11311	Update the weather for a given station .
11312	Initialize logging .
11313	Return a list of site services
11314	Get wind speed from a station
11315	Set the parameters of the camera .
11316	Set the command line arguments
11317	Publishes the configuration to a file .
11318	Decorator to check if user wants to be logged in .
11319	Initialize the app .
11320	Fulfill the current requirements .
11321	Push an override to the current context .
11322	Remove a context from the override context .
11323	Context manager to override the current value .
11324	Push a context onto the stack .
11325	Remove an extra context from the stack .
11326	Context manager for adding additional elements .
11327	Unuplicate field names .
11328	Interpret the results .
11329	Extract params from query .
11330	Run a query .
11331	Return a pandas dataframe .
11332	Get a graph representation of the results .
11333	Plot a pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Return a csv result descriptor .
11337	Checks if the user has permission for the given user .
11338	Set the context data for rendering .
11339	Returns a list of widgets sorted by position .
11340	Returns a list of all widgets that need to be updated .
11341	Register a dashboard widget .
11342	Unregister a widget .
11343	Get the last update for this dashboard .
11344	Get the setting for this dashboard .
11345	Save a setting in the dashboard settings .
11346	Determine whether the update should be updated .
11347	Create an array from an array .
11348	Create a new numpy array .
11349	Concatenate multiple arrays .
11350	Check if arguments are in a Spark context
11351	Convert axes to tuple .
11352	Wraps a function to return a Spark array .
11353	Align the shape of this array .
11354	Convert to Spark .
11355	Convert this TimeSeries into a 2d array .
11356	Create a new RDD from the RDD .
11357	Apply a function to each RDD .
11358	Create a new RDD with the given size .
11359	Apply a function to the RDD .
11360	Apply a function to each element in the RDD .
11361	Return a numpy array with the given size .
11362	Remove padding from an array .
11363	Convert plan to number of chunks .
11364	Create a list of slices for the given plan .
11365	Get a boolean mask for the given indices .
11366	Return a new RDD of npartitions .
11367	Stack all elements of this RDD .
11368	Align the values to the given axis .
11369	Return the first element of the RDD .
11370	Compute statistics for the given axis .
11371	Compute the mean of the columns .
11372	Variance .
11373	Return the standard deviation of the DataFrame .
11374	Compute the sum over all columns .
11375	Return the maximum value of the Series .
11376	Return the minimum value of the Series .
11377	Create a chunk of this array .
11378	Swap a barray to a new barray .
11379	Transpose an array .
11380	Swap axis labels .
11381	Reshape this array to a new shape .
11382	Reshape a new shape to a new one .
11383	Return a copy of this array .
11384	Cast an RDD to a new dtype .
11385	Clip the RDD of this RDD .
11386	Convert to numpy array .
11387	Convert an argument to a tuple .
11388	Convert a list of tuples into a tuple .
11389	Inserts an ndarray .
11390	Check if two arrays are identical .
11391	Convert a list of lists into a list .
11392	Convert a slice into a slice .
11393	Validate that two keys are transposeable .
11394	Validate that new keys are reshapeable .
11395	Concatenate a list of tuples .
11396	Expand an array with extra dimensions .
11397	Combine an RDD with indexing .
11398	Decorator to wrap a function .
11399	Lookup a constructor and return it .
11400	Reshape the array .
11401	Transpose the array along the axis .
11402	Reshape the array to a new shape .
11403	Transpose the array along a given axis .
11404	Create an empty array .
11405	Create a new numpy array .
11406	Concatenate multiple arrays .
11407	Discrete likelihood of a discrete distribution .
11408	Return the probability of the most likely alpha .
11409	Discrete alpha model .
11410	Estimate the best alpha of the data .
11411	Discrete alpha values .
11412	Plot the posterior of the model .
11413	Lognormalization .
11414	Sanitize HTML .
11415	Configure analytics .
11416	Return a list of tag names
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Parse a long integer .
11421	Decode a public key .
11422	Parse command line options .
11423	Process an SSH key .
11424	Process SSH DSS data .
11425	Process ECDSa SHA256 .
11426	Processed ED25516 key .
11427	Parse SSH2 public key .
11428	Perform a single step .
11429	Process a single token .
11430	A list of all the available mechanisms .
11431	Store the credentials .
11432	Entry point for init .
11433	Initialize distutils
11434	Create a audio file .
11435	Generate HTML for h5bp .
11436	Render CSS normalize CSS .
11437	Generate the fontawesome style .
11438	Render the django frontend .
11439	Render django - frontend jquery .
11440	Generate HTML for django - django . django . django . jquery
11441	Add django data to django . django . django . django . django . django . django . django
11442	Return the CSS CSS for the django data tables .
11443	Generate HTML for the django data table .
11444	Generate HTML for django - django formset .
11445	Return HTML for jQuery scrollto scrollto
11446	Render jquery jquery jquery
11447	Shortcut for django - frontend CSS .
11448	Generate HTML for DJFrontend
11449	u Render a JavaScript variable .
11450	Iterate over auth hashes .
11451	Calculate the expiration time .
11452	Get user token
11453	Convert a user to a dictionary .
11454	Deserialize a profile .
11455	Update a profile .
11456	Notify user login failed .
11457	Validate a user .
11458	Check if the request is secure .
11459	Get username from user
11460	Create a new user
11461	Logs a user .
11462	Logout from user .
11463	Login to user .
11464	Login with username and password .
11465	Login to the user .
11466	Change user password .
11467	Send a forgot password notification .
11468	Reset user password .
11469	Merge two dictionaries .
11470	Read a file .
11471	Get the id of an object or model .
11472	Return a dict of dict ids for the given object ids .
11473	Get the object id for an object
11474	Given a list of object ids return a dict of object ids .
11475	Fetch an object from the model
11476	Set default forwards for an operation .
11477	Set default values for models .
11478	Delete a list of models .
11479	Truncate documents from the database .
11480	Truncate the database .
11481	Initialize the options .
11482	Finalize options .
11483	Run the build .
11484	Convert a path to a directory .
11485	Seed a set of values
11486	The state of the camera .
11487	Generate a random string .
11488	Decorator to mark an API endpoint .
11489	Iterate over all of the API endpoints .
11490	Clear API path cache .
11491	Prints a value to the console .
11492	Validate keyword arguments .
11493	Called when the client is open .
11494	Called when a connection is closed .
11495	Called when a message is received .
11496	Parse a DDP message .
11497	Process DDP response .
11498	Calls the dispatch method .
11499	Receive a connection .
11500	Receive a ping message .
11501	Receive a subscription .
11502	Unsubscribe
11503	Receive a method .
11504	Generate a JSON - ready JSON response .
11505	Start a DDP launcher .
11506	Run the main script .
11507	Print a message to the console .
11508	Stop the DDP server .
11509	Start the greenlet process .
11510	Run Postgres server .
11511	Poll for notifications .
11512	Monkey patch the greenlet .
11513	Generate a random id .
11514	Autodiscover API .
11515	Convert an error to a dictionary .
11516	Get an instance of a factory .
11517	Emit a log record .
11518	Creates a middleware middleware that can be used to negotiate HTTP requests .
11519	Add a context manager to the application .
11520	Add a resource object .
11521	Run the application .
11522	Send a message .
11523	Send a bulk message to APNS .
11524	Fetch a list of inactive IDs .
11525	Send a message to GCMM .
11526	Send a bulk message
11527	Send a JSON response .
11528	Send data to the API
11529	Get a model from a module location .
11530	Run fast selection algorithm .
11531	Search Giphy
11532	Translate a giphy term .
11533	Get trending data
11534	Get GIF
11535	Show a screenaver .
11536	Upload tags to Giphy .
11537	Convert a dictionary to integers .
11538	Fetches an API endpoint
11539	Translate a term into a GIF .
11540	Return an iterator over Giphy images .
11541	Fetches GIF by id
11542	Upload a gif to a file .
11543	Create an access control element .
11544	Login to Google .
11545	Upload a video .
11546	Check the status of a video .
11547	Update a video entry .
11548	Delete a video entry .
11549	Check availability of a video .
11550	View a video .
11551	List all videos .
11552	Upload a video .
11553	Upload a video .
11554	Create a new video .
11555	Delete a video .
11556	Get a single video .
11557	Update the video .
11558	Delete video .
11559	Update metadata .
11560	Updates a metadata field .
11561	Update item attributes .
11562	Convert a string to a list of nodes .
11563	Dump a tree into a string .
11564	Load a file - like object
11565	Read a file .
11566	Parse a string .
11567	Create a new node .
11568	Generate a newick string .
11569	Convert ASCII art to ASCII .
11570	Get node by label
11571	Prune a tree .
11572	Resolve polytomies .
11573	Remove all internal names from the tree .
11574	Remove all leaf names .
11575	Decorator to check if user is authenticated .
11576	Displays a JSON string .
11577	Require a setting for a given feature .
11578	Get an argument from the request .
11579	Get a list of parameters from the request .
11580	Decorator for asynchronous callback .
11581	Get a cookie by name .
11582	Clear a cookie
11583	Redirect to the user .
11584	Get an authenticated user .
11585	Creates OAuth request parameters .
11586	Redirect to the user .
11587	Make a request to Facebook .
11588	Get an authenticated user .
11589	Concatenate a URL .
11590	Parse a header line .
11591	Add an HTTP header .
11592	Get a list of HTTP headers .
11593	Parse a single line .
11594	Parse a HTTP header .
11595	Normalize HTTP headers .
11596	Convert value to UTF - 8 .
11597	Convert value to unicode .
11598	Convert a string to a basestring .
11599	Recursively recursively recursively
11600	Initialize the plugin .
11601	Iterate over all subclasses of cls .
11602	Based on the matching strategy and optional origin .
11603	Compute the occupancy of a grid .
11604	Write a box to a file .
11605	Write a PDB box
11606	Determine molecule numbers .
11607	Resize a pbc box for ligids .
11608	Write top molecules to file .
11609	Iterate through pkg_resources
11610	Add a message to a user .
11611	Send a message to users .
11612	Get the messages for a user .
11613	Add messages to the user .
11614	Validate the config file .
11615	Verify a profile name
11616	Retrieve data from a message .
11617	Retrieve the password from the config .
11618	Update the config data
11619	Update the pwd for a message .
11620	Create a profile profile .
11621	Display required items
11622	Get data from user .
11623	Get auth info from user
11624	Configure a profile .
11625	Write data to profile
11626	Write auth info .
11627	Add attachments .
11628	Send message .
11629	Send a message .
11630	Convert a message type to a message .
11631	Creates a property property .
11632	Validate a property .
11633	Validate an input .
11634	Validate twilio .
11635	Validate Slack post .
11636	Validate a WHATS app .
11637	Send a message to a coroutine .
11638	Add a message to the broker .
11639	Get the body of a file
11640	Remove arguments from a dictionary .
11641	Send a message .
11642	Get the chat ID for a user .
11643	Send the content of the message .
11644	Send the message .
11645	Get SMTP server .
11646	Generate an email .
11647	Add headers to the message .
11648	Add a message to the message .
11649	Add attachments to the message .
11650	Get an SMTP session .
11651	Return an SMTP SSL .
11652	Create a TLS session .
11653	Send the email .
11654	Save to file .
11655	Unload an image .
11656	Get the region of the image .
11657	Validate the configuration .
11658	Remove all elements from the cache .
11659	Write the header to a file .
11660	Read data from file .
11661	Delete the chunk .
11662	Resizes the chunk size .
11663	Insert a chunk into the file .
11664	Save the frame to a file .
11665	Delete file .
11666	Parse a file .
11667	Processes a single line .
11668	Add lines to the block .
11669	Draw a string .
11670	Parse ISO 8601 time string .
11671	Make HTML words from a list of words .
11672	Make an HTML word from a word .
11673	Make an HTML paragraph .
11674	Make HTML code from a list of strings .
11675	Make HTML code .
11676	Save metadata to file .
11677	Update parents .
11678	Run the game .
11679	Register a new mapping .
11680	Get the registry for a controller .
11681	Registers a freeform key .
11682	Sign a string .
11683	Get HTTP headers for the request .
11684	Send a request .
11685	Send GET request .
11686	Send a POST request .
11687	Send a DELETE request .
11688	Convert a value into an APE value .
11689	Send a request .
11690	Perform an autopaginating API call .
11691	List all hosted zones .
11692	Create a hosted zone .
11693	List all records in a zone .
11694	Change a change set for a change set .
11695	Draw an image .
11696	Draw a region from an image .
11697	The size of the packet .
11698	Replace old pages with new pages .
11699	Find the last page in the file object .
11700	Set the section of the document .
11701	Add a DocMarkup to the document .
11702	Processes the content .
11703	Get the markup for a tag .
11704	Create a hosted zone request .
11705	Lock a file object .
11706	Insert bytes at the given offset .
11707	Delete bytes from file .
11708	Convert unicode to UTF - 8 .
11709	Add a change .
11710	Parse an e_change_info element .
11711	Measure the width of a string .
11712	Returns True if the model has been modified
11713	Delete this resource record
11714	Save this resource record .
11715	Parses an ID3 tag .
11716	Make an ID3v1v1 v1v1v1v1v2v1v1v2v2v2v1 v1v2v2 .
11717	Read bytes from the file - like object .
11718	Delete all keys from the dictionary
11719	Called when a frame is loaded .
11720	Update common media .
11721	Convert unknown frames to v25 format .
11722	Unload a sound .
11723	Play a sound .
11724	Sets the loop points .
11725	Return a list of glyphs and values .
11726	Filter glyph names from a list .
11727	Dump an encoding table to a file .
11728	Dump an array as a string .
11729	NAME glyphs . py
11730	Check if a file exists
11731	Make a list of files .
11732	Parse a hosted zone .
11733	Parses a DELETE set .
11734	Write a list of blocks .
11735	Group padding blocks .
11736	Delete the metadata block .
11737	Save metadata to file .
11738	Parse an RRset alias .
11739	Parses an rrrset record .
11740	Parse an rrrset .
11741	Delete this hosted zone .
11742	Add a record to this zone .
11743	Creates a new record .
11744	Create a new AAAAR record .
11745	Create a CNAME record .
11746	Create a MX resource record set .
11747	Create a new NS resource record .
11748	Create a PTR record set .
11749	Create a new SPF record set .
11750	Create a new SRV resource record set .
11751	Creates a TXT resource record .
11752	Register a TXXX key .
11753	Get the initial values for a change .
11754	Write an XML change .
11755	Create a ChangeRecordSet request .
11756	Initialize logging .
11757	Return the item associated with the given alias .
11758	Freeze a dictionary .
11759	Concatenate HTML attributes .
11760	Initialize the app .
11761	Initialize the bars .
11762	Bind a bar .
11763	Return a dictionary of arguments .
11764	Get the URL for this request .
11765	Returns True if the view is currently active .
11766	Validate a metric class .
11767	Get a model by name .
11768	Calculate statistics .
11769	Automatically autodiscover apps .
11770	Return a CSV representation of a metric .
11771	Handle maintenance .
11772	Get a list of values from GET variables
11773	Get a boolean value from a GET request .
11774	Get the next colour .
11775	Get parameters for Gecko .
11776	Displays the number widget for gecko .
11777	Displays the latest metrics for the gecko client .
11778	Generate a line chart .
11779	Get the geckometer .
11780	Displays metrics on gecko .
11781	Get the active gadgets .
11782	Register gadgets .
11783	Get the context data .
11784	Print an error message .
11785	Validate a function .
11786	Prompt user for long - line input .
11787	Prompt user for list input .
11788	Prompt user for input .
11789	Get a DataFrame of games for a given year .
11790	Returns the winner of the team .
11791	Get the current season .
11792	List of starters .
11793	The surface of the game .
11794	Get the coin toss .
11795	Get weather information .
11796	Get information about the service .
11797	Schedule the schedule for the game .
11798	Returns a pandas DataFrame of standings .
11799	Get team stats
11800	Returns a DataFrame containing the winners of the current team .
11801	Returns a DataFrame containing the team scores for each team .
11802	Get the year .
11803	Get stats for a table
11804	Switch function to given directory .
11805	Decorator to cache a function in the cache .
11806	Get the key for a class instance .
11807	Memoization decorator .
11808	get the age of the person
11809	Get stats table
11810	Get stats per game
11811	Get the total stats for a given kind
11812	Retrieve statistics per hour
11813	Get stats per poss
11814	Return an advanced stats table .
11815	Returns a stats table
11816	Return the enhanced PBp statistics .
11817	Get the basic stats for a given year .
11818	Get session data
11819	Expand details into a Pandas DataFrame .
11820	Add team columns to a DataFrame .
11821	Add team features .
11822	Calculate the prior probability of a line .
11823	Return a DataFrame with the passed kind .
11824	Return a list of ints for a single year .
11825	Get team name .
11826	Returns a list of box scores for the given year .
11827	Return the pq tag for the given keyword .
11828	Return a list of coaches for the given year .
11829	Schedule games for a given year .
11830	Return the Coordinator for the given year .
11831	Return the Coordinator for the given year .
11832	Get the team s id .
11833	Return the team of the given year
11834	Return the best alignment for the given year
11835	Return a DataFrame with split_value .
11836	Get HTML from url .
11837	Flatten links .
11838	Convert rel url to id
11839	Convert keyword arguments to a query string .
11840	Read an HDF5 file .
11841	Return a copy of the read queue .
11842	Get the first read index .
11843	Called when the reader is closed .
11844	Get a batch from the dataset .
11845	Get the remainder of a file .
11846	Get a queue from the stream .
11847	Get a generator that yields rows from the queue
11848	Parse a file - like object .
11849	Write a list of Pb objects to a file .
11850	Read a varint .
11851	Generator that yields objects from the stream .
11852	Close the stream .
11853	Write multiple pb2 objects .
11854	Flush the output buffer .
11855	Get the directory for this game .
11856	Input text with keyboard emulation .
11857	Generate a fake movie .
11858	Return a list of traits .
11859	Waits until a condition is satisfied .
11860	Waits until all traits are present
11861	Add ignored exceptions .
11862	Execute the main volume
11863	Execute the main function .
11864	Send a message .
11865	Get the current status of the drone .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Select a power source
11870	Decrypt a request .
11871	Calculate the CRC of a plaintext .
11872	Obfuscate a value .
11873	Check for missing songs .
11874	Return a list of all href links .
11875	Checks if a song has a song name
11876	Parse a song .
11877	Generate a URL for a song .
11878	Parse Google URL .
11879	Parses a song .
11880	Download an HTML page
11881	Download a file using requests .
11882	Download a file using wget
11883	Search for station codes by city .
11884	Get a location observation
11885	Parse an observation response
11886	Get a station observation
11887	Return a list of search paths .
11888	List of compiled compiler extensions .
11889	Return the mimetype of the file .
11890	Return the mime type of the compiler .
11891	Return the extension for the compiler .
11892	Register a processor .
11893	Unregister a processor .
11894	List of all available finders .
11895	Register default defaults .
11896	Import Qt core .
11897	Get a netnode . netnode
11898	Add a plugin name to the netnode
11899	Delete a plugin name
11900	Import settings from QSettings .
11901	Export the settings to a QSettings object .
11902	Return the directoryidasettings .
11903	Iterate over all keys .
11904	Simple simple error handler .
11905	Get a DynamoDB table .
11906	List all tables .
11907	Fetch items for a given category
11908	Return the metadata id for a metadata object .
11909	Return the updated datetime of a metadata item .
11910	Fetches the crate owner .
11911	Fetches the owner of the crate owner .
11912	Fetches the versions of a crate .
11913	Fetches the version download for a crate .
11914	Fetches the crate data
11915	Get the summary of the CRATES .
11916	Fetch a list of crate objects
11917	Fetch a crate
11918	Fetch a crate attribute .
11919	Fetches the content of the given path
11920	Fetch items
11921	Fetch questions for a given category .
11922	Fetches questions from GitHub .
11923	Fetch events
11924	Return the updated datetime of the metadata for the given item .
11925	Return the category of metadata .
11926	Get items from ReMo
11927	List of buffers .
11928	Return the IO priority of the device .
11929	Close the queue .
11930	Submit a list of blocks .
11931	Cancel an event .
11932	Cancel all submitted blocks .
11933	Get a list of events .
11934	Fetch events
11935	Get all cells
11936	Parse the feed
11937	Return a list of formats for the given pid_type
11938	Get permission factory .
11939	Create a blueprint .
11940	Create a URL rule for the given endpoint .
11941	View a record view .
11942	r Render a record view .
11943	r Export a record .
11944	Calls a callable and returns the result .
11945	Close the socket .
11946	Remove a client from the pool .
11947	Increments a counter .
11948	Send a timing request .
11949	Record a timing for a given name .
11950	Set a gauge .
11951	Update a gauge delta .
11952	Set a metric .
11953	Add data to the queue .
11954	Create a batch client .
11955	Create a new unit client .
11956	Send a flush to the remote device .
11957	Creates a checker that checks if the user is open .
11958	Create a batch client .
11959	Flush all pending batches .
11960	Create a TCP client .
11961	Create a new user
11962	Convert an object into an OpenMath object .
11963	Convert term to openmath .
11964	Convert an om object into a Python object .
11965	Convert obj to Openmath .
11966	Register a converter to openmath .
11967	Register a function to be deprecated .
11968	Initialize the application .
11969	Generator for valid choices .
11970	Split a model kwargs into a dict .
11971	Register a function in the registry .
11972	Create a new value from the registry .
11973	Creates a default form for the given model .
11974	Decorator that ensures that a field is required .
11975	Creates a decorator that returns a list of choices .
11976	Returns a string representation of a decimal field .
11977	Return a string representing the email field .
11978	Returns a string representation of a date field .
11979	Generate a datetime field .
11980	Convert a float field to a string .
11981	Returns a string representation of an integer field .
11982	Generate a time field .
11983	Generate a random choice field .
11984	Return the data for multiple choices .
11985	Choose a model field from a model .
11986	Encode an object as a string .
11987	Publish package .
11988	Tag the build .
11989	Decorator to check if any field is null .
11990	Try to load a global variable .
11991	Build an instance from inst .
11992	Create an OML list .
11993	Create an omtuple .
11994	Decode a byte string .
11995	Encode a string .
11996	Convert a number to a fixed precision .
11997	Format a number .
11998	Convert number to money
11999	Convert a string to a numpy array .
12000	Convert an numpy array to a compressed bytes .
12001	Add a workspace .
12002	Remove a workspace .
12003	List all available workspaces
12004	Get a WWS ws .
12005	Check if a repository exists .
12006	Sync a workspace
12007	Clone a repository .
12008	Check the version of ndio
12009	Convert an array to a list of voxels .
12010	Convert a list of voxels into a numpy array .
12011	Print a workspace .
12012	Print the updated repo
12013	Create a console handler .
12014	Execute a command .
12015	Load a PNG file .
12016	Save numpy array to file .
12017	Save a collection of numpy arrays .
12018	Print the status of a workspace .
12019	Print status of repo
12020	Get block size
12021	Post cutout without chunking .
12022	Load a tiff file .
12023	Save numpy array to file .
12024	Load a multipage file .
12025	Write configuration to file .
12026	Clone this repository .
12027	Get the version of Yoda .
12028	Combine a greeting with a greeting .
12029	Display an option .
12030	Return a list of reserved ids
12031	Merge multiple ids .
12032	Propagate a token to a channel .
12033	List projects for a dataset
12034	Get a dataset
12035	List datasets .
12036	Parse command line options .
12037	Shows workspaces .
12038	Show a workspace .
12039	Show all available workspace
12040	Return the URL for this endpoint .
12041	Guess the format of a file extension .
12042	Open a file .
12043	Convert input file to output format .
12044	Build a build graph .
12045	Compute invariants for graph upload .
12046	Convert a graph to a graph .
12047	Convert a list of ramons into a dictionary .
12048	Return the RAMon type for the given type .
12049	Delete a channel .
12050	Add a dataset
12051	Convert a dataset to JSON .
12052	Create a dataset .
12053	Create a channel dictionary .
12054	Create a project dictionary .
12055	Identify image sizes .
12056	Upload data to Ndio
12057	Find the path for a workspace .
12058	Get all public tokens .
12059	Get info about a project
12060	Set the metadata for a given token .
12061	Get an HTTP GET request .
12062	POST a url
12063	Delete a URL
12064	Load image from HDF5 file .
12065	Save an array .
12066	Infer gaps in a tree
12067	Return a copy of the IO operation .
12068	Install Jinja translations .
12069	Acquire an exclusive timeout .
12070	Convert a piece of data into a percentage .
12071	Get stats for server .
12072	Get a dictionary of slabs .
12073	Convert the context data into a dictionary .
12074	Display server status .
12075	Displays the memcache dashboard .
12076	Display the memcache statistics .
12077	Displays a list of all caches .
12078	Convert bytes to human readable bytes .
12079	Tries to find a Config object from its children .
12080	Add directories to the environment .
12081	Apply the config to the config .
12082	The path of the file .
12083	Read the file .
12084	Write data to file .
12085	Configure logging .
12086	Create the file .
12087	Apply a configuration on this node .
12088	Get the path of this node .
12089	Remove the directory
12090	Prepare all children .
12091	Cleanup all children .
12092	Return the path to the given path .
12093	List all files
12094	Write data to file .
12095	Read a file .
12096	Add a file or list of files .
12097	Save configuration to file .
12098	Load yaml file
12099	Remove the temporary directory if it exists .
12100	Load plugins from a directory .
12101	Recursively update a dictionary .
12102	Create a child node for the given path .
12103	Resolve the path to a key .
12104	Get the value of the container .
12105	Update the configuration with the given options .
12106	Load configuration from config file .
12107	Convert obj to string
12108	Build a URL for a URL .
12109	Process input .
12110	Write the output to the socket .
12111	Send an RPC request .
12112	Read input from socket .
12113	Write output data to socket .
12114	Decorator to check if a link is not registered .
12115	Return a dictionary of remote_tle modes for a remote link .
12116	Configure the connection .
12117	The source address of this message .
12118	The target address of the target .
12119	Called when the parent session is closed .
12120	Create a new sender .
12121	Request a new Sender Link .
12122	Create a new receiver .
12123	Request a Receiver Link .
12124	Destroy a link .
12125	Close the session .
12126	Process an endpoint event .
12127	Add markdown to markdown .
12128	Called when the receiver is closed .
12129	Called when a receiver fails .
12130	Get the host and port and port .
12131	Connect to the given host and port .
12132	Create a server socket .
12133	Return a list of available connections .
12134	Raise an exception if the connection lock is not registered .
12135	Process a SASL request .
12136	Read data from the transport .
12137	Create a new Sender
12138	Reject a link .
12139	Create a new receiver .
12140	Called when a connection fails .
12141	Called when the connection is active .
12142	Called when a remote connection is closed .
12143	Handle an error .
12144	Decorator for Twilio view .
12145	Get color string .
12146	Get a dictionary of font files
12147	Set compression flag .
12148	Add an object to the buffer .
12149	Write stream to page .
12150	Write a stream .
12151	Add a page to the document .
12152	Set color scheme .
12153	Set default font .
12154	Add a page .
12155	Set font size .
12156	Adds text to the current page .
12157	Add a newline to the page .
12158	Add a pie chart
12159	Output all pages .
12160	Get the orientation changes
12161	Output all fonts .
12162	Output images .
12163	Output the device .
12164	Apply transformation to the current matrix .
12165	Return the absolute position of the current position .
12166	Set style .
12167	Rotate a point .
12168	Set information about the object .
12169	Set display mode .
12170	Close the document .
12171	Write PDF header .
12172	Write pages .
12173	Write resource dictionary .
12174	Put information into the database .
12175	put the catalog
12176	Write the trailer to the database .
12177	Iterate over a sequence of sequences .
12178	Iterate over seqs .
12179	Generator for gosper .
12180	Generator for brent .
12181	Fit xmax to xmax
12182	Fit the ymax to the ymax ymax
12183	Return True if x is greater than x .
12184	Checks if this coordinate is greater than the given coordinate .
12185	Make a copy of this cursor .
12186	Increments the x along the x axis .
12187	Increments the y - axis by dy .
12188	Draw the QR code .
12189	Create a new tag .
12190	List all registered tags .
12191	Get a label by name
12192	Update a label .
12193	Delete tag .
12194	Create a tagit
12195	List all tags
12196	Return a list of tags with label_sn
12197	Create a new hook .
12198	List all registered hooks .
12199	Update a hook .
12200	Create an alert
12201	Get alerts
12202	Update an alert
12203	Setup Sphinx extension
12204	The path to the themes folder .
12205	Perform a POST request .
12206	List all hosts .
12207	Get log data
12208	Searches for a given piece of pieces .
12209	Return the duration of the particle .
12210	Update the state of the model .
12211	Compute the model .
12212	Convenience method for binning .
12213	Free all free memory
12214	Receive data from the socket .
12215	Generator for line lines .
12216	Yield bytes from the stream .
12217	Get the current status and message .
12218	Generate an info message .
12219	Display an info message .
12220	Send a command .
12221	Get capabilities .
12222	Set mode read mode .
12223	Send a QUIT command .
12224	Return a datetime object .
12225	Send a HELP command .
12226	Generate new groups
12227	Generate new news messages
12228	Generate a list of news entries .
12229	List active users
12230	List active times .
12231	List news groups
12232	Generator for listing overview .
12233	List all extensions
12234	List generator .
12235	Concatenate a list of values .
12236	Send a GROUP command .
12237	Request next article .
12238	Send an article
12239	Send a HEAD request .
12240	Get the body of a message .
12241	Print the title .
12242	Send an XHDR message .
12243	Send XZHDR command .
12244	Generate an XOVER command .
12245	Generator for xpatcher .
12246	Generate a list of xpatterns based on pattern .
12247	Compress Gzip Gzip file .
12248	Send a POST request .
12249	Convert a value to an integer .
12250	Convert a string to a timestamp .
12251	Convert a string to a datetime object .
12252	Perform a POST request .
12253	Perform a DELETE request .
12254	Perform a GET request .
12255	List scheduled queries .
12256	List all tags .
12257	Get tag by name or id .
12258	Create an alert notification .
12259	Delete a tag
12260	Create a scheduled query
12261	Create an alert notification .
12262	Delete a tag
12263	Convert a string or tuple to a string .
12264	Parse a newsgroup line
12265	Parse a header line .
12266	Convert headers into a string .
12267	Do a POST request .
12268	Run a list of tests .
12269	Return a string representation of defaults .
12270	Add a default docstring to a function .
12271	Return the docstring for the defaults .
12272	Set the value of the field .
12273	Check if the value is a valid type .
12274	Get the value of the variable
12275	Check if value is a scalar .
12276	Symmetric error .
12277	Set errors .
12278	Set bounds .
12279	Import metrics from metrics
12280	Extract metrics from a dictionary .
12281	Filter metrics .
12282	Calls the API call
12283	Convert text into an expression .
12284	Return an operator for the given text .
12285	Add text to the terminal .
12286	Initialize required attributes .
12287	Returns a list of all parameters .
12288	Returns a list of parameter values for each parameter .
12289	Returns an array of parameter errors
12290	Clear all derived values
12291	Set the HTTP method .
12292	Get the environment variables from the environment
12293	Get URL parameters .
12294	Do a GET request .
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Calls the API call
12299	Validate the scene name .
12300	Verify a type product
12301	Get the size of a remote file .
12302	Download the scene .
12303	Validate a list of bands .
12304	Connect to earthexplorer
12305	Returns a function that returns a prefix that starts with a prefix .
12306	r Determine the timezone for a given zone .
12307	Normalize a timezone .
12308	Join iterable with delimiter .
12309	Return a list of all newlines in a string .
12310	Convert a source to a source line .
12311	Dump the result to the console .
12312	Remove metrics from the response
12313	Load a fortune from a list of strings .
12314	Create a chance for a list of files .
12315	Run the command .
12316	Convert a string to an expression .
12317	Convert a string to a string .
12318	Get the grammar for the grammar
12319	A list of all rules in the grammar .
12320	List of comments .
12321	Return a list of all directives for this comment .
12322	Return the source code .
12323	Generate a formatted string
12324	Get the import statement .
12325	Get the token types for parsing .
12326	Get the class definition .
12327	Find the entry point for the rule .
12328	Get the definition of a rule .
12329	Get the source of a rule .
12330	Get the transform for a rule .
12331	Convert an expression into an ASN string .
12332	Convert an AST node into an ASN .
12333	Given a predicate return a list of operands .
12334	Remove grouping groups from opttree .
12335	Convert AST node to code .
12336	Convert an AST tree to code .
12337	Convert an AST to code .
12338	Convert an option group into an AST .
12339	Convert an AST repetition group to code .
12340	Convert an AST to code .
12341	Convert an AST node to code .
12342	Convert opr to code .
12343	Convert an expression to an expression .
12344	Convert an AST operator to an AST .
12345	Convert an AST instruction to code .
12346	Find directives that satisfy pred .
12347	Flatten a child node .
12348	Parse a comment .
12349	Handle the HTTP response .
12350	Create a new id from id .
12351	Remove a key from a control point .
12352	Add command line arguments
12353	Configure logging .
12354	Validate the arguments
12355	Convert infix to postfix .
12356	Convert a list of nodes to an optree .
12357	Reduce a list of nodes .
12358	Add command line arguments
12359	Load plugin manifest
12360	Get a metric definition by name
12361	Returns a tuple of column lengths
12362	Returns a tuple of column lengths .
12363	Escape metrics .
12364	Prints the fields of the field .
12365	Prints the Metrics header .
12366	Generate Markdown definitions .
12367	Parse the given text .
12368	Attempt to set the most recent consumed text .
12369	Add command line arguments
12370	Parse a time string .
12371	Convert a string to a CSV
12372	Convert a JSON string to JSON .
12373	Output a JSON string .
12374	Convert a string to XML .
12375	Return True if the node is not empty .
12376	Print a root node .
12377	Returns a function that returns a function to extract the repetition .
12378	Get a terminal node .
12379	Get a repetition .
12380	Wrapper for _exclusion .
12381	Count leading whitespace in text .
12382	Call extractor .
12383	Get the position of this node .
12384	Return True if all children are empty .
12385	Add ignored items .
12386	Check if value is a type .
12387	Return a new ParseNode .
12388	Return a new ParseNode with trimmed values removed .
12389	Merge two ParseNode into a new ParseNode .
12390	Create a new parse node .
12391	Return a copy of this parser .
12392	Return the current position .
12393	The maximum readed position .
12394	Go to next character .
12395	Step next line .
12396	Move previous line to previous line .
12397	The last readed line .
12398	Increments the cursor position .
12399	Saves the current cursor position .
12400	Restore the current cursor position .
12401	Return a string representation of the notification .
12402	Set the name of the signature
12403	Return the number of variables .
12404	Return the number of functions .
12405	Update the count .
12406	Update the state of this scope .
12407	Return the union of the current state .
12408	Update the intersection of two sets .
12409	Return a new scope with the intersection of the current state .
12410	Update the set of signatures from oset .
12411	Return a new scope with the given signature .
12412	Update the difference between two sets .
12413	Return the symmetric difference between two states .
12414	Add a signature .
12415	Remove a signature from the set .
12416	Discard a signature .
12417	Return a list of all signatures .
12418	Return the first signature .
12419	Return the last signature .
12420	Get a signature by key .
12421	Get a scope by name .
12422	Get signature by name .
12423	Returns a function that can be used to evaluate all symbols .
12424	Call a TranslatorInjector .
12425	Normalize AST nodes .
12426	Set this node from another node .
12427	Iterate over all values in this RDD .
12428	Check if a hit is ok
12429	Get the signature for this parameter .
12430	Resolve this expression .
12431	Returns a list of resolved names for the given type .
12432	Set the resolved name for a given type .
12433	Delete a local file
12434	Delete a file from S3 .
12435	Delete a file .
12436	Save an object to a temporary file .
12437	Save an object to a file .
12438	Save object to file .
12439	Find a bucket by path .
12440	Creates an enum .
12441	Decorator for checking types of types .
12442	Set a callobject by name .
12443	Add a method to the class .
12444	Decorator to register a function or hook .
12445	Decorator to register a rule .
12446	Decorator to register a directive .
12447	Decorator to register a decorator .
12448	Bind a node to dst .
12449	Read an EOF .
12450	Pushes the new rule nodes to the graph .
12451	Remove all rules from the rule .
12452	Get the value of a node .
12453	Add a stream .
12454	Begins a tag .
12455	End a tag .
12456	Set the rules for the given dictionary .
12457	Set hook hooks .
12458	Set directive directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Return True if text is in the stream .
12462	Read one character from the stream .
12463	Read a character from the stream .
12464	Read until EOF .
12465	Ignore whitespace .
12466	Set the dtype of the cluster
12467	Set cluster dtype
12468	Check that the given hits are compatible .
12469	Add a rule to a namespace .
12470	Add a new rule to the bnf .
12471	Add a new rule .
12472	Add sequences to the parser .
12473	Add an alternative to the parser .
12474	Add a range to the parser .
12475	Add a new rule to the parser .
12476	Add a capture .
12477	Add a binding to the parser
12478	Add a hook to the parser .
12479	Set parameter for parameter
12480	Set a string s value
12481	Set a single parameter .
12482	Set the id of a parameter
12483	Set the name of a hook .
12484	Add a parameter to a hook .
12485	Evaluate the rules in EBNF .
12486	Ignore cxx characters .
12487	Add a state
12488	Return a dot representation of the graph .
12489	Write the graph to a dot file .
12490	Write a PNG file to a PNG file .
12491	Return a string representation of the state .
12492	Return the next state of a new state
12493	Reset alive state .
12494	Infer a block of blocks
12495	Infer a subexpr
12496	Infer the given identifier .
12497	Infer a literal .
12498	Dump all local nodes
12499	Convert a parser rule to a function definition .
12500	Exit the scope .
12501	Convert pt to an expression .
12502	Return an ast node .
12503	Return an astroid expression .
12504	Convert a Hook node to an AST .
12505	Return an AST node .
12506	Visit a capture node .
12507	Return an expression .
12508	Return an ast node .
12509	Convert a Seq AST node into expressions .
12510	Visit a RepOptional node .
12511	Return an astroid .
12512	Return an astroid .
12513	Concatenate a string .
12514	Set indentation level .
12515	Convert a list to a string .
12516	Print a list of nodes .
12517	Populates an edge from a sequence .
12518	Populate an edge register .
12519	Build a state tree from a tree .
12520	Return True if n is equal
12521	Create a Grammar from a string .
12522	Create a Grammar from a file .
12523	Parse a string from a source string .
12524	Parse a file .
12525	Set a node s value
12526	Set the node as an integer .
12527	Get a subnode .
12528	Default serializer .
12529	Get a list of depositions
12530	Dump a deprecation .
12531	Get ids from invenio12 .
12532	Get ids from invenio2 .
12533	Import BibDocs and BibDocs
12534	Dump a BibRecDoc to a file .
12535	Get the number of unique ids
12536	Check the existence of a BibDoc .
12537	Dump an object to a dictionary .
12538	List users .
12539	Dump a model instance .
12540	Retrieve a list of featured community members .
12541	Get list of ibrecids for a given date
12542	Get a list of modified ids from a given date .
12543	Get all restrictions for a collection .
12544	Get a list of revision revisions for a given record .
12545	Get collection collections for a given recid
12546	Convert a MARC XML to a JSON string .
12547	Get the number of records for a given query .
12548	Dump a record into a dictionary .
12549	Dump an RA .
12550	Load data from database
12551	Collect all things that are registered in the database .
12552	Initialize the app context .
12553	Memoize a function .
12554	Get the run SQL
12555	Get all connected roles for an action .
12556	Get the number of actions for a given query .
12557	Dump an rt to a dictionary .
12558	Load a token
12559	Import a record .
12560	Return the import value for a config variable
12561	Dump an object to a dictionary .
12562	Get a list of users .
12563	Get users from invenio2 account .
12564	Dump a user .
12565	Load deposit data .
12566	Create a record and return it .
12567	Load a record from the database
12568	Load records from a source file .
12569	Inspect dump files .
12570	Load dump files .
12571	Load communities files .
12572	Load all users
12573	Load dependencies from sources .
12574	Get stats for all functions
12575	Start the application .
12576	Dump profiler stats to file .
12577	Delete the profile .
12578	Delete the profile .
12579	Get the server status
12580	Disable a timestamp on a request .
12581	Load a user from the database .
12582	Calculate translation of images .
12583	Concatenate multiple images .
12584	Adds a dimension with ones to array .
12585	Create a new record
12586	Create a record from a dump .
12587	Update a record .
12588	Create persistent identifiers .
12589	Delete record .
12590	Create a record in a record .
12591	Create a file in a bucket .
12592	Delete all buckets from a record .
12593	Returns a list of pids that are missing .
12594	Prepare list of revisions
12595	Prepare files
12596	Prepare the list of PIDs for this object
12597	Return True if the revision is deleted .
12598	Create a community .
12599	Load a featured community .
12600	Dump a thing .
12601	Check for a thing .
12602	Delete the widget .
12603	Return the magnitude of a vector .
12604	Normalize vector .
12605	Apply the transformation to the texture .
12606	Ensure the bones of the bone .
12607	Set the length of the bone .
12608	Set the parent of this node .
12609	Get the point of the pivot point
12610	Start animation .
12611	Set the current state
12612	Unset the current state
12613	Set the state of the texture .
12614	Unset the state
12615	Ensure model data exists
12616	Redraw the mesh .
12617	Render an object .
12618	Set the model .
12619	Write reports to a file .
12620	Create testsuite XML .
12621	Add a menu .
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the background
12625	Delete widget .
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	add a label
12630	Add a button to the dialog .
12631	Exit dialog .
12632	Add a button to the dialog .
12633	Add a button to the dialog .
12634	Update progress bar .
12635	Render all actors .
12636	Render the scene .
12637	Context manager for creating a context manager .
12638	Check if a resource exists .
12639	add a category
12640	Get the missing texture
12641	Get model by name
12642	load a model
12643	Get model data
12644	Load model data
12645	Add a widget .
12646	Draw the menu .
12647	Handle redrawing .
12648	Set the size of the scrollable container .
12649	Checks if the mouse is a valid mouse .
12650	Return the probability of each group .
12651	Add a layer to the graph .
12652	Get the region of the given buffer .
12653	Draw the vertex buffer .
12654	Add a function to the action list .
12655	Perform a single action .
12656	Register a new registry .
12657	Add a layer .
12658	Draw all layers .
12659	Delete all layers
12660	Return a list of borders .
12661	Return an offset of the watching list .
12662	Get the size of the widget
12663	Read an hdf5 file .
12664	Create a connection matrix for a given shape .
12665	Set the list of fields
12666	Add a list of fields .
12667	Check whether the elements are valid .
12668	A list of all elements of the type .
12669	Compute the centroids and volumes of the mesh .
12670	Compute the angles of the mesh .
12671	Return the edges of the mesh .
12672	Compute the stats for this mesh .
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Convert a surface tag to element sets .
12676	Return metadata for all fields
12677	Return metadata for this step .
12678	Make the working directory .
12679	Run postprocess .
12680	Run gmsh file
12681	Read a history report .
12682	Read a field report .
12683	Convert a list to a string .
12684	Generate an equation .
12685	Return a UNSORTED string .
12686	Parse the response .
12687	Make a GET request
12688	Write an XY report to a file .
12689	Write a field report .
12690	List available components .
12691	Return the error message for this field .
12692	Checks if an exception is thrown by the given descriptor .
12693	Set the data for the data
12694	will get the axis mode for the current series
12695	set the graph ploting options
12696	Create a new class .
12697	Cycle through all notifications .
12698	Try to convert value to float .
12699	Convert a string to an integer .
12700	Generate a GraphRenderer
12701	Convert raw XML to unicode .
12702	Convert HTML to HTML .
12703	Checks if the mime type matches the given mime type .
12704	Convert domain name to lowercase .
12705	Convert a domain name into a list of domains .
12706	Make a hash for the given token .
12707	Collect all words from the service .
12708	Index a stream .
12709	Invert a hash hash index .
12710	Get the frequencies for the given hashes .
12711	Lookup the stream id for a given hv .
12712	Return a tuple of stream ids for the TF index .
12713	Make stream items from a stream .
12714	Create a stream item from an entry .
12715	Create a ContentItem from a node .
12716	Read a varint from the stream .
12717	Read a string from the stream .
12718	Serialize a streamitem key .
12719	Convert a streamitem into a key and data data .
12720	Context manager to temporarily change the current working directory .
12721	Strip a prefix from a string .
12722	Strip a suffix from a string .
12723	Return True if needle is a subsequence .
12724	Creates a simple Cube .
12725	Run the WSGI server .
12726	Shutdown the server .
12727	Add a function to the router .
12728	Register an error handler .
12729	Get the content of a file .
12730	Return a callback for the error page .
12731	Add a callback to the blueprint .
12732	Resolve the given route and path .
12733	Resolve a non - literal route .
12734	Normalize a pattern .
12735	Return the response .
12736	Add a new header .
12737	Set a cookie .
12738	Return a string representation of the status .
12739	The Content - Type header .
12740	Get all values of a key .
12741	Delete all files in path .
12742	Get a list of open files .
12743	Print statistics about file types .
12744	Run a rejester .
12745	Attempt to fetch a file from a work unit .
12746	Get the lines of a file .
12747	Generate a random adjective pair .
12748	Generate a random adjspecies pair .
12749	Morph a sentence .
12750	Display similarity score .
12751	Run hiragana .
12752	List entities .
12753	Display a shortsum .
12754	List keywords .
12755	Perform a chrono analysis .
12756	Create a stage .
12757	Initialize a list of stages .
12758	Initialize all stages .
12759	Run a single statement .
12760	Run all writers on a txt file .
12761	Run incremental transforms on a stream .
12762	Replace the config with the given name .
12763	Create a WSGI application .
12764	Convert a sentence to a set of entities .
12765	Returns True if all Mentions are found .
12766	Checks if any target mentions in target_mentions are not in target_mentions .
12767	Lookup mentions in a list of mentions .
12768	Match multiple tokens .
12769	Create an annotation file .
12770	Align a chunk of sentences with the same tokenization .
12771	Terminate the child process .
12772	Multiply p .
12773	Fix email addresses .
12774	generate strings identified as sentences
12775	make a sorted collection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to unicode .
12778	create a cleaned file
12779	create a file from a tagger
12780	Remove whitespace from a string .
12781	Align a single chunk of a single chunk .
12782	Make absolute paths to absolute paths
12783	Instantiate a pipeline configuration
12784	Generate a chunk from a JSON - formatted file .
12785	Remove invisible emails .
12786	Remove HTML from HTML .
12787	Make a clean visible file from a list of streams .
12788	Remove whitespace from Penn Treebank .
12789	Main entry point .
12790	Load a stage .
12791	Load external stages from a file .
12792	Load a module from a module .
12793	Initialize a stage .
12794	Read bytes from an index .
12795	Return True if href is valid False otherwise .
12796	Create a list of labels for the given HTML .
12797	yield all file paths under input_dir
12798	Yields all tasks in the cluster .
12799	Get a random keeper .
12800	Generate tokens from a sentence .
12801	Returns a list of sentences .
12802	Decorate a function to retry .
12803	return True if ok raise Exception if not
12804	Get a bucket .
12805	Convert a stream or stream into a stream .
12806	Get a chunk from a bucket .
12807	Convert stream_id to Kvlayer key .
12808	Convert kvlayer key to stream ID .
12809	Generate a cache key for a stream item .
12810	Main function .
12811	Build an argument parser .
12812	Add xpaths to the stream .
12813	Convert sentences to char tokens .
12814	Convert ASCII tokens to char offsets .
12815	Convert an HTML string to xpaths .
12816	Add an element .
12817	Return an xpath piece of the last tag .
12818	The index of the text element .
12819	Generator over all descendants of elem .
12820	Select elements from a source .
12821	Select elements by name .
12822	Select elements matching a pattern .
12823	Select an attribute from a source element .
12824	Return the next sibling of elem .
12825	Make a pretty pretty - printed XML tree .
12826	Call inkscape .
12827	Export a text file to a file .
12828	Convert SVG to PDF .
12829	Convert SVG to PNG .
12830	Get the environment for a file .
12831	Setup the template file
12832	Fill document with template content .
12833	Save content to file .
12834	Create a document from a template file .
12835	Fill the contents of the SVG document .
12836	Render the document to a temporary file .
12837	Render a latex file .
12838	Parse an expat .
12839	Parses an HTML string and returns it .
12840	Parse HTML fragment .
12841	Insert text into the document .
12842	Insert a node before refNode .
12843	Clone a node .
12844	Execute command line options
12845	Return the string representation of a node .
12846	Insert a child element .
12847	Parse the config file .
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create an event .
12851	Create an event .
12852	Get the extension of a file .
12853	Add an extension to a file .
12854	Get a temporary temporary file .
12855	Remove all files from workdir .
12856	Convert a CSV file to JSON
12857	Replace the content of a file .
12858	Parse the soup .
12859	Check if the next tag is a valid tag .
12860	Create an italic tag .
12861	Create a strong tag .
12862	Create an underline under the given tag .
12863	Parse attributes from a tag .
12864	Remove whitespace from tag .
12865	Parse a href .
12866	Parse an attribute .
12867	Translate a dictionary into a dictionary .
12868	Convert object to JSON string .
12869	Find all files matching a regular expression .
12870	Concatenate multiple strings .
12871	Context manager that starts with a given part .
12872	Iterate over the contents of a part .
12873	Return the length of a string .
12874	Convert obj to boolean .
12875	Iterate over seq .
12876	Lookup an item in a table .
12877	Replace unicode characters for SVG code .
12878	Validate svg file .
12879	Merge two SVG files .
12880	Merge PDFs into a single file .
12881	Embed font to SVG
12882	Embed font to SVG file .
12883	Check that all input inputs are valid .
12884	Check if the function is callable .
12885	Recurse through the function .
12886	create an input string from a template
12887	Recursively iterate through the input tree .
12888	Convert obj to string
12889	Convert an object to a number .
12890	Convert obj to boolean
12891	Convert an AST to a string .
12892	Change the encoding of a file .
12893	Save text into a QR Code .
12894	Launch a sound .
12895	Calls a command .
12896	Convert a tex file to PDF .
12897	Returns a list of all options for the given invocation .
12898	Transform a geometry to another .
12899	Create a geometry object .
12900	Expand a list of strings into a range .
12901	Intersect this envelope into a new envelope .
12902	Return True if self intersects self .
12903	create a polygon
12904	Create a DataFrame from ZNM
12905	Write the DataFrame to a file .
12906	Select rows that match condition .
12907	Return a new table at the given nuclei .
12908	Return the intersection of two tables .
12909	Return a new Table with only the columns in the table .
12910	Return an iterator over the odd elements .
12911	Return an iterator over the elements of the Series .
12912	Return an iterator over the elements of the RDD .
12913	Compute an error
12914	Compute the mean squared error .
12915	Return the binding energy
12916	S2n .
12917	S1n .
12918	S2p .
12919	The s1p .
12920	Creates a new table with the given formula .
12921	Execute a function in the database .
12922	Derive a key from the master_password .
12923	Bootstraps a database .
12924	Search for domains .
12925	Modify a domain .
12926	Create a new domain .
12927	Parse a HBS file .
12928	Return the prefix of a path .
12929	Return the ID of the SDR .
12930	Run command .
12931	Initialize logging .
12932	Update a file .
12933	Return a dictionary of available drivers .
12934	Return the driver for the given path .
12935	Convert geom to an array .
12936	Convert raster to raster
12937	Opens a raster file .
12938	Create an raster image from bytes
12939	Copy raster from source to dest
12940	The DMD_CREATION_CONFIG option
12941	Create a raster
12942	Sets the geometry transform .
12943	Read an array from the stream .
12944	Envelope envelope .
12945	Return an instance of the driver .
12946	Create a new raster
12947	Return an array of masked values .
12948	The value of the node .
12949	Read a raster file .
12950	Resample the image .
12951	Save the image to a file .
12952	Sets the projection for the dataset .
12953	Warp this raster to another spatial reference .
12954	Calculate the chunklen
12955	Lookup the alphabet for the given charset .
12956	Encode a single chunk .
12957	Convert a chunk to a long integer .
12958	Get a chunk from data .
12959	Memoize a function .
12960	Convert a file to a regular expression .
12961	Normalize date format .
12962	Detect timezone .
12963	Convert object to a dictionary .
12964	Activate pdb hook .
12965	Pretty - print an object
12966	Handle a job .
12967	Run the job .
12968	Run a worker pool .
12969	Sets the classification of this Order .
12970	Send a message to the thread .
12971	Turn on a light .
12972	Turn on a switch .
12973	Turn on a device .
12974	Turn off a device .
12975	Send messages from the queue .
12976	Send a reply to the link .
12977	Create a cmph adapter .
12978	Sets the nature of this Order .
12979	Update the configuration dictionary .
12980	Reset default values
12981	Set the config files
12982	Iterate over all options
12983	Return a generator over all of the default values
12984	Create the config file at index .
12985	Update configuration dictionary .
12986	Read the configuration from a file .
12987	Reads the config file and returns a dictionary of dicts .
12988	Return a list of names for the given option .
12989	List of sections for a given command .
12990	Solve command options .
12991	Add options to the parser .
12992	Build an argparse parser .
12993	Parse command line arguments .
12994	Run zsh command .
12995	Complete a zsh file .
12996	Build a bash command
12997	Complete a bash command .
12998	Start a master .
12999	Called when a connection is made .
13000	Called when a line is received .
13001	Called when a connection is lost .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close the job .
13005	Run a list of jobs .
13006	Close all workers .
13007	Change the result of a change .
13008	Add a new result .
13009	Block until the task has changed .
13010	Load the next job from the queue .
13011	Complete the job set .
13012	Add a result .
13013	Cancel all pending jobs
13014	Block until all active jobs are done .
13015	Distribute jobs from the active jobs .
13016	Add a new job set to the queue .
13017	Get a job from the queue .
13018	Return a job .
13019	Add a result to the job .
13020	Called when a job set is done .
13021	Close all pending requests .
13022	Remove duplicates from list .
13023	Recursively match a regular expression .
13024	Return a list of all entries in the cache .
13025	Get the region of the EC2 region .
13026	Filter entries that match filters .
13027	Get a host
13028	Create an instance from a dictionary .
13029	Get the value of an attribute .
13030	Sort entries by attribute .
13031	Return a string representation of the table as a string .
13032	Create an instance from an instance .
13033	Returns True if the filter matches the filter
13034	Display the name of the machine .
13035	Render a table .
13036	Add timestamp to an event dictionary .
13037	Setup logging .
13038	Create a logbook .
13039	Setup Celery app
13040	Get a single worker .
13041	Delete a worker .
13042	Create a switch option .
13043	Create a configuration section
13044	Set options from a string
13045	Handles config command .
13046	Create completion files for climan .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Convert a list of strings to a list of strings .
13051	Colorize text .
13052	Get a color from a string .
13053	Generate a random color .
13054	Prompt user for input .
13055	Check user credentials .
13056	Check if token is valid .
13057	Decorator for requiring token authentication .
13058	Check if process is running
13059	Try to import a module .
13060	Return the IP address of the local machine .
13061	Make a request to the API .
13062	Prepare post parameters
13063	Start the server .
13064	Render a template .
13065	Run a command .
13066	Stream a list of commands .
13067	Stream a list of commands .
13068	Returns the number of days between two dates .
13069	Get the path for a command .
13070	Build an ssh command .
13071	Build the SCP command .
13072	Copy entries to remote_path
13073	Copy a list of SCP entries to remote_path .
13074	Run an SSH command on a list of hosts .
13075	Connect to an SSH server .
13076	Load a profile from a file .
13077	Create a LSI profile from command line arguments .
13078	Add a relationship .
13079	Return a list of the parts of the given type .
13080	Load relationships from a source file .
13081	Add a new part .
13082	Load a part from the object .
13083	Find the extension for a given name .
13084	given an element parse out the proper ContentType
13085	Parse a string .
13086	Build a JWT .
13087	Assign a force field based on the force field .
13088	Find the maximum radius and NPNP .
13089	Convert force field parameters into a dictionary .
13090	Return stream as a stream .
13091	Get a list of segments that match name
13092	Copy a directory from a bucket .
13093	Open a bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all files in a directory .
13098	List all directories in a directory .
13099	Create a prefix for a directory .
13100	Delete a file from the bucket .
13101	Ensure the login token exists .
13102	Get the loud text of the language .
13103	Delete a directory .
13104	Return the URL of the home directory .
13105	Silently silence the decorated function .
13106	Generate a breadcrumb .
13107	Generate a breadcrumb .
13108	Calculate the interaction energy of an AMPAL object .
13109	Calculate the internal energy of an AMPAL object .
13110	Return a list of all hotspots .
13111	Get a token from the server .
13112	Upload a ltd file .
13113	Determine whether the event should be skipped .
13114	Remove a surrogate from a service .
13115	Register a build .
13116	Confirm a build .
13117	Recursively update a dictionary .
13118	Main entry point .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split a path .
13122	Find a file and return its parts .
13123	Return the editor for the given filepath .
13124	Process a module .
13125	Generate a chart
13126	Render a chart object .
13127	Convert a DataFrame to a chart .
13128	Patch JSON data .
13129	Convert JSON data to HTML .
13130	Convert a dictionary to a Pandas DataFrame .
13131	Write html to folder
13132	Creates a chart class based on the given type .
13133	Encode a set of fields
13134	Link to GitHub user .
13135	Infer the tarball url
13136	Create an app .
13137	Delete app .
13138	Creates an iterable with the given name .
13139	Generate a binary string .
13140	Generate a random IP address .
13141	Generate a random datetime .
13142	Creates a session .
13143	Make an API request .
13144	Create a build
13145	Check the build status of a build .
13146	Generate a sequence of sequences .
13147	Memoize a function .
13148	Decorate a function with unique arguments .
13149	Register sub commands for this parser .
13150	Get the root arg parser .
13151	Get the description of the object .
13152	Get the help for this node .
13153	Run the action .
13154	Encode a dataset .
13155	Returns a pandas dataframe .
13156	Get the last n times of the last n times
13157	Request activity list .
13158	Get activity data for a given athlete .
13159	Return the endpoint for the athlete .
13160	Return the endpoint for the activity .
13161	Perform a GET request .
13162	Create a build
13163	Creates a url with the given view .
13164	Generate a title .
13165	Generate a person .
13166	Generate a random name .
13167	Render the data as a string
13168	Set the dataset .
13169	Render the chart .
13170	Check if the type is valid
13171	Return the URL for the request .
13172	Wrapper for show .
13173	Save the image to a file .
13174	Perform a URLopen request .
13175	Return an image of the image .
13176	Write URL to file .
13177	Return the checksum of the file .
13178	Generate an amount .
13179	Decorator to register entity name .
13180	Return a dictionary of protected claims .
13181	Return the JWKS as a dict .
13182	Unpacks a metadata statement .
13183	Pack metadata statement .
13184	Evaluate a metadata statement .
13185	Validate the validity of a federation usage statement .
13186	Extend metadata with sms
13187	Parse command line arguments .
13188	Add command line arguments to the command line .
13189	Apply logging options to log files .
13190	Log msg with verbose verbose .
13191	Convert a word to a dictionary .
13192	Generate anagrams in a word .
13193	Convert the class name to anAMP class .
13194	Transform a timeseries into a list of points .
13195	Get the last value of a timeseries
13196	Validate page number .
13197	Get a page of pages .
13198	Change the mode of a file .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request
13202	Create a new object
13203	Update metadata statement .
13204	Update signature .
13205	Yield the contents of a bundle .
13206	Create a bundle from a dictionary .
13207	Returns a list of URLs for the given asset type .
13208	Returns an HTML tag for the given asset type .
13209	Return HTML tags for all assets .
13210	Convert a URL to a URL .
13211	Find links for a given URL .
13212	Connect to the AMP server .
13213	Returns a list of all available modules .
13214	import service modules
13215	Convert a comma - separated comma - separated comma - separated string into a datetime .
13216	Select fields from a document .
13217	Convert a list of datemapoints to date_map .
13218	Prints a cursor to the database .
13219	Print the cursor .
13220	Convert a list of tasks into a graph .
13221	Add default departments .
13222	Add default assets .
13223	Add default sequences .
13224	Add a new user to a project .
13225	Handles post - save actions .
13226	Create a new shot
13227	Create all tasks for an element
13228	Pre - connect to a peer .
13229	Send a packet to a peer .
13230	Get the value of a config value .
13231	Decorator to add a function to a function .
13232	Decorator to add cinder to a function .
13233	Decorator to add a function to the neutron server .
13234	Decorator to register a glance client .
13235	Decorator to mark a function as swift .
13236	Decorator to add a function to a function .
13237	Decorator to add heat processors to an event .
13238	Add a factory .
13239	Remove a factory .
13240	Connect to the given factory .
13241	Receive data from a connection .
13242	Disconnect from a connection .
13243	Calls a remote command .
13244	Called when a connection is made .
13245	Handle multiplexer connection .
13246	Called when data is received .
13247	Send data to the remote device .
13248	Called when a connection is lost .
13249	Returns the local protocol for the given connectionIdentifier .
13250	Called when a remote data is received .
13251	Disconnect from a connection .
13252	Center a string on the screen .
13253	Prints the clock on right .
13254	Return a string representation of the version number .
13255	Identify the unit framework for a target unit .
13256	Assert that the value is conformable .
13257	Pad data to block_size
13258	Pads data to block_size .
13259	Sign a request .
13260	Gather metadata statements for the given context .
13261	Prints a list of sentences .
13262	Create an argument parser .
13263	Parse a list of words .
13264	Called when data is received .
13265	Handle an unregistered type .
13266	Create a function stub stub .
13267	Ping a peer .
13268	Return a regex for the command .
13269	Convert a string to an amp list .
13270	Convert to string .
13271	Verify that the metadata statement is valid .
13272	Parse a JWT response .
13273	Dump a database to a file .
13274	returns a list of all databases on this server
13275	Get local files for a given path .
13276	Sync a folder to a bucket .
13277	Decorator to ensure that the user is required .
13278	Login to login page .
13279	Build a list of modules
13280	Wrapper for readonly .
13281	Load JSON from file .
13282	Create a signed JWT .
13283	Create a JWT signed by signing keyjar .
13284	Decorator to register a function as a library .
13285	Deserialize a test directory .
13286	Run the test runner .
13287	Return the score for a given letter .
13288	Return the score of a word .
13289	Generate a list of words .
13290	Return True if the word is valid .
13291	Main entry point .
13292	Run the command .
13293	Called when a string is received .
13294	Get command and responder for a command .
13295	Parse request values from request .
13296	Run a response and return a deferred .
13297	Write a response to the transport .
13298	Called when a connection is lost .
13299	Build a protocol message from an address .
13300	Convert a JSON string to a keyjar .
13301	Deserialize a JSON string .
13302	Process an event .
13303	Process a cinder customer .
13304	Process an event .
13305	Process a glance customer .
13306	Process an event .
13307	Process an event .
13308	Processes a heat processor .
13309	Start the server .
13310	Print a message to stdout .
13311	Print msg to stderr .
13312	Register a command subclass .
13313	Register a command subclass .
13314	Convert value to string .
13315	Convert a string from a string .
13316	Update the completers dictionary .
13317	Initialize the connection
13318	Initialize mq connection
13319	import service modules
13320	Initialize the Nova consumer
13321	Initialize the cinder consumer
13322	Initialize the neutron broker
13323	Initialize glance broker
13324	Initialize heat consumer .
13325	Enable the notification for a particular component .
13326	Get information about a song .
13327	Download a song .
13328	Execute this instruction .
13329	Return the name of the named name
13330	Call a function .
13331	Dump a MySQL database to a file .
13332	Render a DFA code .
13333	Exit the application .
13334	Run the application .
13335	Change the current working directory .
13336	Copy the contents of src to dst .
13337	Wrapper for debugging .
13338	Get the mtime of a file .
13339	Check if item has changed .
13340	Synchronize the database .
13341	Clear all files
13342	Scrape a website
13343	Download the image
13344	Check if the image has changed .
13345	Returns a template subclass .
13346	Find the caller s name and line number .
13347	Returns the defining component of the pe_PE .
13348	Main function .
13349	Find a symbol by name .
13350	Checks if a pe_pe element is contained in the PE .
13351	Return True if PE_PE_PE is global global .
13352	Returns the name of the data type of a datetime .
13353	Get a list of related attributes .
13354	Create an Enum from an EDT
13355	Create a function for a BEL model .
13356	Create an external entity .
13357	Create a function that can be used to execute a function .
13358	Convert cnst_symbol to float
13359	Creates an operation method for the given object .
13360	Create a derived attribute from a given metaclass .
13361	Create a new class
13362	Create an association
13363	Creates a linked association .
13364	Create an association .
13365	Create a component from a model .
13366	Perform a single call .
13367	Accept a channel .
13368	Reject a request .
13369	Raise an exception .
13370	Send a call to the collector .
13371	Establish a connection for a given call .
13372	Dispatch a reply .
13373	Guess type name .
13374	Deserialize a value into a UUID .
13375	r
13376	r
13377	Get a single document .
13378	Get documents from the index .
13379	Put a list of items into the collection .
13380	Delete a document
13381	Delete all documents .
13382	Delete the index .
13383	Perform a scan on a set of keys .
13384	Generator for scan ids .
13385	Scan a prefix .
13386	Scan a prefix for a prefix .
13387	Perform fulltext scan .
13388	Iterate over documents in fulltext scan .
13389	Iterate over keywords .
13390	Iterate over keywords scan .
13391	Iterate over all documents in the index .
13392	Convert feature names to feature names .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Return the number of bytes in a fc_dict .
13400	Count the number of bytes that match a filter .
13401	Return a string representation of a dictionary .
13402	Process command line arguments .
13403	Default formatter .
13404	Convert a link to a link .
13405	Pretty print a unique identifier .
13406	Check uniqueness constraint for uniqueness .
13407	Check the integrity of a link .
13408	Check the integrity of a subtype .
13409	Generator for feature indexing .
13410	Convert a value to a byte string .
13411	Put items into the KVStore .
13412	Delete all indexes
13413	Scan the key_ranges .
13414	Scan the keys in the table .
13415	Scan the index for an index .
13416	Return the index of a scan prefix .
13417	Indexes a scan prefix and returns the key .
13418	Perform a scan on the index .
13419	Define an index .
13420	Put an index into the index .
13421	Put raw value into index .
13422	Generate index keys for a given index .
13423	Get index by name .
13424	Check if pypi package name is valid
13425	Add a direction to a string .
13426	Returns the type name of the type
13427	Get the reference of an attribute
13428	Build a core type element
13429	Build an enum type element .
13430	Build a struct type element
13431	Build user type element
13432	Builds a type from a datetime
13433	Build an XML Element .
13434	Build an XML element .
13435	Build a XML Schema .
13436	Pretty - print an XML string .
13437	Fetches a list of stolen banners .
13438	Set the position of a node .
13439	Decorator to track the production of a function .
13440	r
13441	r
13442	r
13443	r
13444	r
13445	r
13446	r
13447	r
13448	r
13449	r
13450	r
13451	r
13452	r
13453	Create a queue
13454	Delete a queue
13455	List all queues
13456	List all exchanges
13457	Purge a queue
13458	Create a MIME message .
13459	Read the image from the connection
13460	Return True if text is visible .
13461	Main function .
13462	Serialize a value to a string .
13463	Convert an association to a string .
13464	Convert a cls into a string .
13465	Main entry point .
13466	Search for a given query .
13467	Partition a collection .
13468	Run the application .
13469	Add a bidi context to the context .
13470	Find a relationship between two models .
13471	Convert the source link to a new one .
13472	Compute lookup key for given instance .
13473	Compute the index key for the given instance .
13474	Return the type of an attribute
13475	Create a new instance .
13476	Iterate over all registered instances .
13477	Create a new meta model .
13478	Send a message to a socket .
13479	Receive messages from a socket .
13480	Print dead code .
13481	Parse email addresses .
13482	Decorator to register a function .
13483	Return a dictionary representation of the RPC spec .
13484	Normalize postcode middleware .
13485	Return the next value .
13486	Accepts a PKG .
13487	Accepts a C element .
13488	Accept an EPG .
13489	Get the brightness of the image
13490	Matches the pattern .
13491	Find the position in the text edit .
13492	Get the selection for a character .
13493	Called when the cursor is changed .
13494	Return the exception information for the exception .
13495	Create a hook for Qt4 .
13496	Get a mapper by name .
13497	Add a URL pattern to the request .
13498	Add a function to the URL .
13499	Add a function to the registry .
13500	Add a function to the registry .
13501	Calls the given URL and returns the result .
13502	Execute the command .
13503	Called when the user is pressed .
13504	Called when the cursor is pressed .
13505	Get the previous edited history of a substring .
13506	Get the next edit in the history .
13507	Handle an execute reply .
13508	Check if the history is locked .
13509	Get the edited history .
13510	Set the history .
13511	Store the input buffer .
13512	Called when a shutdown event is closed .
13513	Builds the Record Collection
13514	Convert a collection to a pandas DataFrame .
13515	spin a pandas dataframe
13516	Set attributes from a dictionary .
13517	Subscribe to all topics .
13518	Log a message .
13519	merge list_of_lists sorted by key .
13520	Generator for remote iterator .
13521	Convert a notebook to a new notebook
13522	Return the platform supported by platform .
13523	Get importer for path_item .
13524	Creates a new StringIO object .
13525	Parse a version string .
13526	Override setuptools to override setuptools
13527	Add a distribution to this distribution .
13528	Find plugins for the given plugin_env .
13529	Get the path to the cache directory .
13530	Parse an entry point .
13531	Return the parsed package info .
13532	Compute the dependencies for this requirement .
13533	Parse a filename .
13534	Collapse leading whitespace .
13535	Remove the widget from the editor .
13536	Called when the user has changed .
13537	Return the current text cursor .
13538	Update the currently selected item .
13539	Register admin site
13540	Return a list of all disk partitions .
13541	Get system CPU times .
13542	Return a list of cpu times
13543	Read stdin from stdin .
13544	Read lines from stdin .
13545	Update tab bar visibility .
13546	Create a tab with the current kernel
13547	Add a new tab with a frontend .
13548	Add a menu action to the menu .
13549	Creates a function that returns a function that can be used in the active frontend .
13550	Populate the menu menu for all magic items .
13551	Close all tabs .
13552	Generate a password .
13553	Checks if a passwd is valid .
13554	Creates a button cell for a boolean widget .
13555	Return an indented short title .
13556	Collects the editable_boolean_boolean_boolean_boolean_boolean_boolean_boolean
13557	Toggle a boolean value .
13558	Checks if the user has permission to edit the object .
13559	Check if user has delete permission .
13560	Add nodes to the graph .
13561	Make a binary tree .
13562	Submit a set of jobs to the graph .
13563	Validate that all nodes have completed .
13564	Make a color table .
13565	Make a copy of this color scheme .
13566	Add a new color scheme .
13567	Set the active color scheme .
13568	Return the path to the library .
13569	Handle incoming messages .
13570	Handle input from stdin .
13571	Wait for the kernel to terminate .
13572	Set style .
13573	Get the format for the given token .
13574	Get the format from the document .
13575	Returns a QTextCharFormat object for the given token .
13576	Find a command in PATH .
13577	Normalize a path .
13578	Raise an exception if the namespace package does not exist .
13579	Validate the entry point .
13580	Is the last blank?
13581	Return True if the last two blank lines are last two blank lines .
13582	Convert a line to a string .
13583	Replace magic magic magic .
13584	Transform a legacy prompt to a legacy prompt .
13585	Translate an IPython prompt .
13586	Push lines to the stack .
13587	Return True if there is more more than one line .
13588	Searches for indentation .
13589	Store lines in the buffer .
13590	Reset the raw buffer .
13591	Handle a cell magic .
13592	Append lines to line mode .
13593	Transform a single cell .
13594	Push lines to IPython input .
13595	Initialize all registered observers .
13596	Post a notification .
13597	Get the set of observers for a notification .
13598	Add a callback to the registry .
13599	Create a new job
13600	Update the status .
13601	Print a group of jobs .
13602	Flush a group .
13603	Return the status of the job .
13604	Display the status of the process .
13605	Initialize the background job .
13606	Insert value at index .
13607	Make a deep copy of this object .
13608	Declare a variable
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the current working directory .
13612	Move the current route to a given state .
13613	Return the energy of a given state .
13614	Return a dictionary with default values .
13615	Check whether the table exists .
13616	Convert a line to a dictionary .
13617	Render an expression .
13618	Print a warning message .
13619	Parse a YAML configuration file .
13620	Convert a list of rows into a table .
13621	Build an HTML link .
13622	Render a javascript file .
13623	Render a CSS file .
13624	Render an image .
13625	Subtract value from value .
13626	Multiply a value by arg .
13627	Divide a number .
13628	Modify value by arg .
13629	Get verbose name .
13630	Split a line into a string .
13631	Add options to the parser .
13632	Add a builtin builtin .
13633	Remove a builtin .
13634	Remove all builtins .
13635	Find the base name of a request .
13636	Yield links from the page .
13637	Convert a string to a list of strings .
13638	Run coverage script .
13639	Add an action .
13640	Append an action code to the parser .
13641	Parse command line .
13642	Print help message for coverage .
13643	Handles help .
13644	Check if arguments are valid .
13645	Execute the coverage .
13646	Print debug info .
13647	Unserialize an object .
13648	Set the hook to be used for debugging .
13649	Log the errors of the wrapped function .
13650	Is the given url?
13651	Validate a URL .
13652	Validate a URL .
13653	Pull a key from the global namespace
13654	Select a random number of ports .
13655	Decorator for RemoteFunction .
13656	Creates a parallel function .
13657	Map a sequence of sequences .
13658	Get the tail of the current readline .
13659	Set auto indentation .
13660	Initialize logstart
13661	Save the state of the sys module .
13662	Restore sys module state
13663	Register a function to be run after execution .
13664	Create a new main module .
13665	Cache the main module .
13666	Initialize user namespace .
13667	Return a list of all namespace names for the user .
13668	Reset the session .
13669	Delete a variable
13670	Remove all variables that match a regular expression .
13671	Push variables to user namespace .
13672	Handle ospind .
13673	Handle oind property .
13674	Find a struct by name .
13675	Inspect an object .
13676	Initialize the history manager .
13677	Show traceback .
13678	Show the traceback of an exception .
13679	Display a traceback .
13680	Show a syntax error .
13681	Prepend the current line to the readline .
13682	Complete text with completion .
13683	Set a custom completer .
13684	Set the completer frame .
13685	Runs a magic magic magic magic on a line .
13686	Find a magic magic .
13687	Define a macro .
13688	Run a command on the machine .
13689	Auto rewrite input .
13690	Return a dictionary of variables
13691	Convert user expressions into a dictionary .
13692	Evaluate an expression .
13693	Safely execute a file .
13694	Run a cached cell magic .
13695	Run a cell .
13696	Run a list of ast nodes .
13697	Enable pylab .
13698	Expand global variables to be expanded .
13699	create a temporary file
13700	Extract input lines from history .
13701	Try to find user code .
13702	Shutdown the session .
13703	Publish a message to the client .
13704	Send a message to a target .
13705	Decorator to skip a test condition .
13706	Decorator to mark a test failure .
13707	Mark a function as deprecated .
13708	List all profiles in a directory .
13709	List all installed profiles .
13710	Find the version of a request .
13711	Run a command .
13712	Return the location of a file .
13713	Get the next line from the stream .
13714	Send a string to the child process .
13715	Send a VINTR command .
13716	Recompile unicode regexes as bytes .
13717	Expect a pattern to be matched by a pattern .
13718	Perform a search loop .
13719	Recompile byteses as unicode regexes .
13720	Search for a string in the buffer .
13721	Search for a given buffer .
13722	Create a log listener .
13723	Unpacks a directory .
13724	Print a message to stdout .
13725	Return the last error .
13726	Execute a command .
13727	Find a file for the given filename .
13728	Return a list of all arcs executed .
13729	Return a list of arcs that are not executed .
13730	Returns a list of arcs that were unpicted .
13731	Return a list of line lines .
13732	Total number of branches .
13733	Return a map of missing branches .
13734	Return statistics for the branch .
13735	Set the precision .
13736	Calculate the coverage of the block .
13737	Returns a string representation of the PC coverage .
13738	Highlight a list of strings .
13739	Highlight a string .
13740	Highlight keywords .
13741	Run a function .
13742	Remove quotes from a string .
13743	Indent a string .
13744	Generate a marquee text .
13745	Format screen string to screen .
13746	Redent text .
13747	Wrap paragraphs in text .
13748	Find optimal optimal rows for a list .
13749	Return the item at the given index
13750	Compute an item matrix from items .
13751	returns a list of fields
13752	Build the kernel arguments for the kernel app .
13753	Initialize SSH connections .
13754	Pretty print an object .
13755	Print a representation of an object .
13756	Get the MRO of an object .
13757	Default print method .
13758	Generate a pprrinter for a sequence .
13759	Parses a dictionary .
13760	Print super class .
13761	Print re .
13762	Print the type of an object .
13763	Print a function .
13764	Print an exception .
13765	Register a function for a given type .
13766	Creates a function for a given type .
13767	Write an object .
13768	Make a breakable breakable .
13769	End a group .
13770	Flush the buffer .
13771	Pretty print obj .
13772	Generate a list of exception colors .
13773	Write a single row to the ods file .
13774	Get text from the clipboard .
13775	Get text from OSX clipboard .
13776	Get text from Tkinter .
13777	Return the path to the build directory .
13778	Remove keys from a dictionary .
13779	Extract dates from an object .
13780	Recursively squash dates .
13781	Convert a datetime object to a string .
13782	Convert an object to JSON .
13783	Check if the site directory exists .
13784	Write a script to the install directory .
13785	sleeps the number of times
13786	Create an ArgumentParser for the given subcommand and subcommand .
13787	convert pyx extensions to c
13788	Main function .
13789	Build a PackageFinder .
13790	Called when a logger has changed .
13791	Get the default logger .
13792	Called when a flag has changed .
13793	Print help for aliases .
13794	Print help for flags .
13795	Print all subcommands .
13796	Print help for all commands .
13797	Print examples .
13798	Update the configuration with the given configuration .
13799	Initialize a subcommand .
13800	Flatten the flags dictionary .
13801	Parse command line .
13802	Load a config file .
13803	Generate the configuration file for this class .
13804	Downsample an array .
13805	Format an info .
13806	Write a message to the terminal .
13807	Called when the config is changed .
13808	Get help for class
13809	Get help for a trait .
13810	Generate a section for a class .
13811	Clear the instance s instance .
13812	Create an instance of cls .
13813	Format a failure .
13814	Print crash handler .
13815	Flush all pending events .
13816	Emits the start_channels signal .
13817	Read from a file - like object .
13818	Read an EINTR .
13819	Handle a command .
13820	Split a string into a list of tokens .
13821	Compress a Dhist
13822	Class decorator .
13823	Record a magic magic .
13824	Create a decorator for a method .
13825	Create a decorator that can be used to register a magic function .
13826	Return a dictionary of all the documentation for the magics
13827	Register multiple magic objects .
13828	Register a function .
13829	Format a latex string .
13830	Parse command line options .
13831	Set a default option
13832	Display a page in IPython notebook .
13833	Create a task from a callable .
13834	Get information about a task .
13835	Get a function from the task info .
13836	Calculate the next run .
13837	Submit a task .
13838	Run a task .
13839	Run the Asap .
13840	Run a task with the specified number of iterations .
13841	Run a callable once .
13842	Find the path to the url file
13843	Create an IPython kernel
13844	Read test steps .
13845	Create an interrupt event .
13846	Run the main process .
13847	Filter a namespace by name_pattern .
13848	List all objects in a namespace .
13849	Validate mutex options .
13850	Draw figure if interactive
13851	Flush all figures .
13852	Print figure .
13853	Load an IPython extension .
13854	Unload an IPython extension
13855	Generate random ports .
13856	Initialize the web app .
13857	Handle SIGINT signal .
13858	Ask the user to confirm exit .
13859	Shutdown all kernels
13860	Generate stock options .
13861	Replace multiple strings in a dictionary .
13862	Render a template .
13863	Launch a kernel .
13864	Create a zip file .
13865	Fix version number .
13866	Returns True if obj is mappable
13867	Get partition from seq .
13868	monkey patch pexpect
13869	Run a file .
13870	Run a source .
13871	Generate coverage report .
13872	Create an XML file .
13873	Fetch a file from the super - computer .
13874	Reduce a list of frequencies
13875	Compute n - digit frequencies for n digits .
13876	Convert a txt file to digits .
13877	Compute the frequencies for one digit .
13878	Calculate the frequency of two digits .
13879	Calculate the frequencies of n digits .
13880	Plot two frequencies
13881	Plot 1 digit counts .
13882	Print a debug expression .
13883	Reverse urlresolvers .
13884	Check if a prefix is private .
13885	Create a test suite .
13886	Debug script .
13887	Debug a test script as a string .
13888	Run a module .
13889	Return a dictionary of hashes for hashroot
13890	Compress a hashroot hashroot
13891	Return a list of all files in the root directory .
13892	Return True if the record is allowed .
13893	Return True if the record matches any of the matches .
13894	Format an error .
13895	Create an interactive shell
13896	Run the main loop .
13897	Create new CSV writer
13898	Create a list of directories for translations .
13899	Write po entries to po file .
13900	Write a message header
13901	Subscribe to a user .
13902	Initialize a parser .
13903	Run a Python module .
13904	Run a Python file .
13905	Create code from a Python file .
13906	Create code from a file .
13907	Convert an item matrix to an HTML table .
13908	Set current value .
13909	Cancel completion .
13910	Select an index from a row .
13911	Select the index up to the right .
13912	Selects down down down down
13913	Selects the left corner .
13914	Select the right .
13915	Update the list .
13916	Return a dictionary of word frequencies .
13917	Print word frequency .
13918	Convert to string .
13919	Write to file .
13920	Validate a pin .
13921	Send a shared pin to the specified topics .
13922	Delete a shared pin .
13923	Send a PIN .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List all subscribed topics .
13927	Decorate a function to monitor .
13928	Initialize the progress monitor .
13929	Context manager to start a task .
13930	Context manager for subcommands .
13931	Update progress monitor .
13932	Create a new progress monitor .
13933	Mark the progress as done .
13934	Generate a page .
13935	Make sure the build directory exists .
13936	Load a list of pyconfig files .
13937	Load the configuration file .
13938	Read the config file as a dictionary .
13939	Load a flag
13940	Decode a list of unicode strings .
13941	Load configuration from IPython .
13942	Load the configuration from the command line .
13943	Parse command line arguments .
13944	Convert the parsed data into a config object .
13945	Try to find a module .
13946	Add a function to stop_data
13947	Notify that the process is started
13948	Called when the process is stopped .
13949	Send a SIGINT to the server .
13950	Find command line arguments
13951	Start the MPILauncher .
13952	Send a file to the remote server .
13953	Fetch a remote file from remote .
13954	Return the number of engines .
13955	Start the engine
13956	Start a winh job
13957	Default context defaults .
13958	Parse the output of the job .
13959	write batch script
13960	Start a batch script .
13961	Create a context menu for the given cursor position .
13962	Append jpg to the end of the image
13963	Append png to the end of the PDF .
13964	Appends svg to SVG
13965	Add an image .
13966	Copy image from clipboard
13967	Get image by name .
13968	Insert an image .
13969	Insert an SVG .
13970	Save an image
13971	Called when a timeout is changed .
13972	Initialize the environment
13973	Rewrite the input to the prompt .
13974	Ask the user to exit .
13975	Set the next input to the next input .
13976	Read a config file .
13977	Get a list of values from a section
13978	Get a list of lines from a section .
13979	Parses the environment variable
13980	Set attributes from the given arguments .
13981	Load configuration files from a file .
13982	Set an attribute from a config option
13983	Expand user - expanded path .
13984	Set the delimiter expression .
13985	Split a line .
13986	Return a list of matching keywords .
13987	Return a list of strings matching the given attribute .
13988	Replace greedy delimiter .
13989	Return a list of files matching the given text .
13990	Return a list of aliases for the given text .
13991	Match a string .
13992	Return the default arguments for the given object .
13993	Complete text .
13994	Callback for completion .
13995	Match a single record .
13996	Return a list of matching records .
13997	Extract a subdict from a dictionary .
13998	Return True if prompt is quiet
13999	Write an output prompt .
14000	Write format data .
14001	Log the output of the shell .
14002	Raise an InvalidOperationException if the object is freezed .
14003	Convert a MySQL timestamp to a Timestamp .
14004	Called when an eventloop is changed .
14005	Dispatch a control message .
14006	Displays a shell command .
14007	Start the shell .
14008	Perform one iteration .
14009	Publish a PYin code .
14010	Abort a request .
14011	Clear a clear request
14012	Convert the kernel to a string .
14013	Handle shutdown messages .
14014	Initialize the modules in the stack .
14015	Remove modules from the stack .
14016	Return the absolute path of the given path .
14017	Check if a file is a file - like object .
14018	Check if an object is a class .
14019	Return True if path is a package .
14020	Get package name .
14021	Convert a label to a label .
14022	Return the last key for a regular expression .
14023	Convert a function to a function .
14024	Turn a class into a class .
14025	Get system CPU times .
14026	Get the command line for this process .
14027	Get a list of open files .
14028	Get a list of all connected connections .
14029	Check if user has a group
14030	Resolve a class .
14031	Return the percentage of usage percentage .
14032	Memoize a function .
14033	Mark a function as deprecated .
14034	Login to Gdata .
14035	Get GDocs key
14036	Ensure temporary path exists
14037	Clear temporary files .
14038	Upload a file to Gdoc .
14039	Synchronize local and gdocs .
14040	Download data from gdocs .
14041	Upload po files to GDocs .
14042	Delete empty CSV files .
14043	Create a new Qt console
14044	Check if url is accessible
14045	Return True if the URL contains content in the URL .
14046	Get the response code from url .
14047	Compare the content type of a URL .
14048	Compare the response code for a URL .
14049	Validate data .
14050	Clear stdout .
14051	Find the path to a command .
14052	Convert a list of morfs into a list of code units .
14053	Return the rootname of this drive .
14054	Open coverage file .
14055	Return True if the file should be a Python file .
14056	Return the total seconds of a timedelta object .
14057	Wait for the result to complete .
14058	Block until all messages are ready .
14059	Get a dictionary of results for this job .
14060	Abort this message .
14061	Return the elapsed time of the session .
14062	Wait for all tasks to finish .
14063	Publish content to IPython
14064	Block until all outputs are ready .
14065	Block until all pending messages are ready .
14066	Return the absolute path of a file .
14067	Preprocess patterns .
14068	Return the separator of a string .
14069	Find all Python files in a directory .
14070	Convert filename to relative path .
14071	Return the canonical filename for the given filename .
14072	Get zip data from filename .
14073	Return True if fpath matches fpath
14074	Return True if fpath matches the pattern
14075	Replace aliases in path .
14076	Loop over Qt4 .
14077	Run wx .
14078	Run the main loop .
14079	Loop over gtk kernel
14080	Loop through COCOA .
14081	Enable an IPython event loop .
14082	Return GOE .
14083	Calculate the center eigenvalue of a matrix
14084	Calculate the differences between the ensemble .
14085	Initialize a new instance .
14086	Parse a step configuration file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Try to load the config file .
14090	Initialize profile directory .
14091	Create the default config file .
14092	Write to file .
14093	Erase the current state .
14094	Return a dictionary representation of all lines .
14095	Return a dictionary representation of the arc .
14096	Write to file .
14097	Read a file .
14098	Read raw data from file .
14099	Read a file .
14100	Combine all parallel data files .
14101	Add line data to self . lines .
14102	Add arc data .
14103	Add lines to a file .
14104	Summarize the file .
14105	Get a list of lines from sentinel .
14106	Main loop .
14107	Replace the history of a single line .
14108	Prompt user for input .
14109	Edit the last syntax error .
14110	Determine if an error occurred .
14111	Exit the program .
14112	Get the URL and revision from the URL .
14113	Create a new frontend master
14114	Initialize the colors for the given widget .
14115	Return information about the identity .
14116	Convert a Robj to a numpy array
14117	Get the source code for an object .
14118	Set the color scheme .
14119	toggle the color scheme
14120	Convert a traceback to text .
14121	Format a traceback .
14122	Format a list .
14123	Format an exception .
14124	Show an exception only .
14125	Initialize the debugger .
14126	Set mode .
14127	Decorator for views that require a group .
14128	Import from from from list .
14129	Adds a line to the code .
14130	Add a new section .
14131	Get the value of a function .
14132	Return the code for the given expression .
14133	Render the template .
14134	Apply dots to a value .
14135	Render a template .
14136	Return a dictionary of default formatters .
14137	Set a function for a given type .
14138	Register a function for a given type .
14139	Handle float precision changes .
14140	Return a list of user config files .
14141	Configure the environment
14142	Configure logging .
14143	Configure the working directory
14144	Pretty - print a string .
14145	Print a page of text .
14146	Page a file .
14147	Get pager command .
14148	Get pager start
14149	Prints a string to the screen .
14150	Print basic unicode .
14151	Convert a Python object to a PNG format .
14152	Convert latex string to png .
14153	Return True if o is pretty printable .
14154	Return a latex representation of an object .
14155	Add options to the parser .
14156	Validate a list of strings .
14157	Validate a dictionary .
14158	Run the ioloop .
14159	Handle incoming messages .
14160	Execute the given code .
14161	Complete a message .
14162	Get information about an object .
14163	Send a history request .
14164	Send shutdown request .
14165	Flush the queue .
14166	Send an input to the server .
14167	Start all channels .
14168	Stop all channels .
14169	Return True if the channel is running .
14170	Load a connection configuration file
14171	Write a connection file .
14172	Start a kernel on the device .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	Interrupt the kernel .
14177	Send signal to the kernel .
14178	Return True if the channel is alive .
14179	Get the shell channel
14180	Get a sub channel .
14181	Get the hb channel
14182	Bind kernel to IPython .
14183	Write debug message to stderr .
14184	Get the list of extensions for the given namespace .
14185	Run pre_step before step .
14186	Calls the post_step method .
14187	Finalize the result .
14188	Walk an egg directory .
14189	Scan a module .
14190	Launch a new IPController app .
14191	Save connection info to a file .
14192	load config from json
14193	Load secondary config from JSON
14194	Execute a cell
14195	Enable autopx .
14196	Disable autopx .
14197	Run a Python cell .
14198	Run a heartbeat .
14199	Run a task .
14200	Remove task from task .
14201	Patch the protocol for a protocol .
14202	Patch an object if it does not exist .
14203	Accept a new connection .
14204	Reject a connection .
14205	Get a proxy agent
14206	Handle form validation .
14207	Handle delete action .
14208	Make sure user is authenticated .
14209	Report the coverage of the given morfs .
14210	Check if all modules are enabled .
14211	Open an editor .
14212	Fix editor editor editor .
14213	Get the content of the clipboard .
14214	Add a function to the chain .
14215	Get metadata for a path or module .
14216	Configure the configuration .
14217	Import a package by name .
14218	Try to use a passwordless SSH connection .
14219	Try to connect to a passwordless server .
14220	Try to connect to a passwordless server .
14221	Connect to a tunnel .
14222	Open a tunnel .
14223	Stop scheduled tasks .
14224	Unwrap an exception .
14225	Register an engine .
14226	Unregister an engine .
14227	Handle an execute reply .
14228	Flush all notifications .
14229	Flush results from a socket .
14230	Flush control messages .
14231	Flush all ignored control messages .
14232	Internal method to flush IO messages .
14233	Initiate the main loop .
14234	Stop the spin thread .
14235	Flush the socket .
14236	Waits for a set of jobs .
14237	Send a request to a socket .
14238	Send an execute request .
14239	Get the result of the AsyncResult .
14240	Get queue status
14241	Purge a set of results .
14242	Get the hub history .
14243	Perform a query .
14244	Convert a list of names into a set .
14245	Get the byte parser .
14246	Return a set of lines that match the given regexes .
14247	Parse the text .
14248	Return the first line of a line .
14249	Given a list of lines return a set of lines .
14250	Parse the source .
14251	A list of all arcs .
14252	Count the number of exit counts .
14253	Return a list of all children .
14254	Iterate over byte numbers and line numbers .
14255	Find all statements in the parser .
14256	Return a string representation of the block stack .
14257	Split the code into chunks .
14258	Validate a list of chunks .
14259	Generator of arc arcs .
14260	Return a list of all the children of this parser .
14261	All arcs in this parser .
14262	Add options for coverage .
14263	Initialize coverage .
14264	Generate coverage report .
14265	Return True if file is wanted .
14266	Interpret a distribution .
14267	Open a URL with authentication .
14268	Fetch a distribution for a given requirement .
14269	Get the parent of an object .
14270	Get root topic
14271	Render a template .
14272	Configure the plugin .
14273	Format an error .
14274	Split data by number .
14275	Convert a notebook to a new version .
14276	Convert hex color to rgb .
14277	Get the colors for a given style .
14278	Return a Qt font .
14279	Handle the execution of the command .
14280	Handle a history reply .
14281	Handle PyOut message .
14282	Handle display data .
14283	Called when the shell is started
14284	Execute a file .
14285	Process an error message .
14286	Process an execute payload .
14287	Set default style .
14288	Edit a file .
14289	Make an in - prompt .
14290	Make a continuation prompt .
14291	Update the style sheet .
14292	Called when a syntax style has changed .
14293	Handle an async response .
14294	Sign a request signature .
14295	Transform a dictionary into a dictionary .
14296	Get virtual memory information .
14297	Get system CPU times .
14298	Return a list of the process UUIDs
14299	Get the gids of the process
14300	Get a list of threads for the process .
14301	Returns a list of open files for the process .
14302	Get the commit hash for a package .
14303	Return information about a package .
14304	Print sys .
14305	Return the number of cpus .
14306	Return the number of cpus .
14307	Fetch next set from database .
14308	Fetch one row from the database .
14309	Fetch multiple rows .
14310	Fetch all rows .
14311	Connect to a node .
14312	Convert a JSON string to a notebook .
14313	Convert a string to a notebook .
14314	Read data from a string .
14315	Write nb to a nb file .
14316	Write nb to file .
14317	Convert ipynb files to metadata
14318	Load the value from a dictionary .
14319	Returns True if the given name matches the given filter .
14320	Determine whether the given class should be a class or not .
14321	Determine whether a directory should be wanted .
14322	Determine whether the file should be processed .
14323	Checks whether the given function is wanted .
14324	Check if the given method matches the given method .
14325	Determine whether a module should be wanted .
14326	Read a file .
14327	Print a list of lines .
14328	Print a list of lines .
14329	Execute pdef .
14330	Returns the conversion factor between two currencies .
14331	Convert currency to float
14332	Compute the return value for a given date .
14333	Get stream encoding .
14334	Get default encoding .
14335	Write the connection_file to the database .
14336	Initialize the heartbeat .
14337	Log connection info .
14338	Initialize the session .
14339	Initialize the IO .
14340	Initialize the kernel .
14341	Initialize a connection to the server .
14342	Register a new queue
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert domain name to FQDN .
14346	Add options for nose .
14347	Configure noseExclude .
14348	Determine whether a directory should be ignored .
14349	Returns True if all libraries are linked
14350	Calls multiple functions .
14351	Calls a list of functions .
14352	Append a function to the list .
14353	Insert a function at index .
14354	Format usage information .
14355	Initialize the application .
14356	Write the pid file .
14357	Remove the pid file
14358	Get the PID from a file .
14359	Construct a magic argument parser .
14360	Return the name of a magic function
14361	Highlight a block .
14362	Rehighlight a block .
14363	Set the current format for the current offset .
14364	Copy text to clipboard .
14365	Execute a shell command .
14366	Mark the prompt as finished .
14367	Check if tab is pressed
14368	Creates a context menu .
14369	Handle a keyboard keypress event .
14370	Adds a prompt to the cursor .
14371	Handle completion reply .
14372	Execute a callback on the shell channel .
14373	Handle an exec callback .
14374	Handle an execute reply .
14375	Handle input request .
14376	Handle a kernel died .
14377	Handle an object info reply
14378	Handle PyOut message .
14379	Handle stream messages .
14380	Handle a shutdown message .
14381	Execute a file .
14382	Interrupt the kernel process .
14383	Reset the kernel .
14384	Start the kernel process .
14385	Sets the call tip .
14386	Complete the shell .
14387	Process an error message .
14388	Process an execute message .
14389	Called when the document is changed .
14390	Add a plugin .
14391	Chain all registered plugins .
14392	Generator for all plugins .
14393	Execute a simple function .
14394	Configure the plugins
14395	Load all registered plugins .
14396	Loads all plugins .
14397	Convert latex string to PNG .
14398	Convert latex string to HTML .
14399	Convert math to image .
14400	Checks if the requirement is already installed .
14401	Iterate over all processes .
14402	Calculate the percentage of CPU percent .
14403	Return a dictionary representation of the object .
14404	The name of the process .
14405	Return the path to the executable .
14406	Get the children of this process .
14407	Get the percentage of CPU percent .
14408	Returns the current memory percentage .
14409	Get memory maps .
14410	Returns True if the process is running .
14411	Suspends the process .
14412	Resume the process .
14413	Kill the process .
14414	Wait for the process to terminate .
14415	Wrap the kernel .
14416	Hijack gtk
14417	Checks if the given identifier is shadowed .
14418	Initialize the default transformer .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize the handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Return line_info for line_info .
14428	Find handler for line_info .
14429	Transform a single line .
14430	Preprocess a line .
14431	Convert a list of lines to a string .
14432	Instances of IPyAutocall in user_nsget
14433	Allow not in multi - line statements if multi - line_specials is on
14434	Checks if the given line is valid .
14435	Check if the initital identifier on the line is an alias .
14436	Handle line_info .
14437	Handle IPython commands .
14438	Handle a magic line .
14439	Handle IPython magic .
14440	Handle a single line .
14441	Handle a lineop .
14442	Override Qt method to hide the widget .
14443	Stop the hide timer .
14444	Draws the tooltip on the panel .
14445	Show the info of a call .
14446	Shows the tooltip .
14447	Handle the text editor .
14448	Proxy proxied_attr .
14449	Convert path to absolute path .
14450	Validate an instance against a schema .
14451	Return a masked dictionary .
14452	Returns True if there is no global site - packages .
14453	Calculate the frequency of each word .
14454	Decorator for view decorator .
14455	Return a list of aliases for the given platform .
14456	Create an alias
14457	Define an alias .
14458	Validate an alias command .
14459	Invoke an alias
14460	Transform an alias to a string .
14461	Expand aliases for aliases .
14462	Auto help directive .
14463	Reset sgr .
14464	Split a string .
14465	Return the color associated with the given color .
14466	Returns a QTextCharFormat object
14467	Generate a JWT .
14468	A decorator to acquire a lock .
14469	Remove expired JWT
14470	Check if a token is already used .
14471	Validate a JWT token .
14472	Return a new semaphore .
14473	Return the common prefix of a list .
14474	Filter an event .
14475	Get the size of the widget .
14476	Return True if cursor can be cut .
14477	Return whether the clipboard can be paste .
14478	Clear the input buffer .
14479	Cut the text .
14480	Execute the input .
14481	Get input buffer .
14482	Set the input buffer .
14483	Set font .
14484	Paste the clipboard .
14485	Prints the editor .
14486	Set the cursor to the top cursor .
14487	Reset font .
14488	Appends a custom text to the editor .
14489	Append HTML to the end of the document .
14490	Append HTML fetching the HTML fetching the html page .
14491	Appends plain text to the end of the text .
14492	Clear the temporary buffer .
14493	Completes the completion with the given items .
14494	Fill a temporary buffer .
14495	Determine if a key is down .
14496	Create a control widget .
14497	Create the page control .
14498	Handle a keypress event .
14499	Get the plain text of a block .
14500	Get the end of the text cursor .
14501	Get column number .
14502	Get line of input buffer .
14503	Get prompt cursor .
14504	Get selection cursor .
14505	Insert a continuation prompt .
14506	Insert HTML into cursor .
14507	Insert HTML into cursor .
14508	Insert text into the cursor .
14509	Keep the cursor in the buffer .
14510	Cancel the keyboard quit .
14511	Display text .
14512	Prompts the user to enter the prompt .
14513	Read a line .
14514	Set the prompt .
14515	Sets the text cursor .
14516	Show a prompt .
14517	Adjust the scrollbars .
14518	Run the command line .
14519	Copy a config file to the specified location .
14520	Create a profile directory by name .
14521	Find profile directory by name .
14522	Convert a cmp - function into a key = function
14523	Read a file .
14524	Return a list of raw input lines .
14525	Create a temporary file .
14526	Close the stream .
14527	Write data to the stream .
14528	Add a new heartbeat handler .
14529	Add a heartbeat failure handler .
14530	a heart just beat
14531	Generate a list of integers .
14532	Convert a path to a filename .
14533	Generator for all files in root .
14534	Display all elapsed times .
14535	Convert elapsed time to time .
14536	Extract the config from Windows inst_filename .
14537	Uncaches a directory .
14538	Convert an argument to a string .
14539	Check to see if any of the dependencies are found .
14540	Set options for fetching .
14541	Create the home directory
14542	Return True if name is an archive file .
14543	Decorator for immutable objects .
14544	Set a readonly proxy .
14545	Create a new heading cell .
14546	Create a new metadata node .
14547	Create a new notebook .
14548	Return True if path is a writable directory .
14549	Unquote a filename .
14550	Get the name of a file .
14551	Find a file in the search path .
14552	Return the path to the home directory .
14553	Return the directory of the directory .
14554	Get IPython directory .
14555	Get IPython package directory
14556	Get the path to an IPython module .
14557	Determine if a target is outdated .
14558	Return the md5 hash of a file .
14559	Check for old IPython config files .
14560	Update the suggestions dictionary for objects .
14561	Get suggestions for a given object .
14562	Return a list of suggestions for the given object .
14563	Return the path to the current working directory .
14564	Return a list of files matching pattern .
14565	r Returns a list of lines .
14566	Read md5 hash .
14567	Initialize the profile .
14568	Print profiler report
14569	Close the profiler .
14570	Handle the bot .
14571	Enable wx .
14572	Disable the event loop .
14573	Disable Qt4 .
14574	Enable or disable gtk .
14575	Enable Tkinter .
14576	Enable pyglet hook for pyglet .
14577	Saver the waveaver
14578	Initialize the database .
14579	Run a SQL query .
14580	Get session info
14581	Get the last n rows
14582	Get a range by string
14583	Get the file name for the history .
14584	Name a session .
14585	Reset the session .
14586	Generator that returns a sequence of strings
14587	Store the output of a line .
14588	Write the output to the database .
14589	Stop the simulation .
14590	Get the number of CPUs .
14591	Get the number of CPU times .
14592	Return a list of disk partitions .
14593	Get the list of processes
14594	Return a string representation of a pair .
14595	Format a list of statements .
14596	Shortcut for debugging .
14597	Decorator for expensive queries .
14598	Joins a list of regular expressions .
14599	Make sure the file is gone
14600	Update the contents of a dictionary .
14601	Update cluster profiles
14602	Start a cluster
14603	Stop a cluster
14604	Searches for a command .
14605	Print the body of the process .
14606	Find the code units for the coverage .
14607	Run a report_fn on each file .
14608	A decorator that raises an AssertionError .
14609	Sets the trace .
14610	A decorator that ensures that the time limit is exceeded .
14611	Load IPython extensions
14612	Initialize the code .
14613	Run code in IPython app .
14614	Run startup files .
14615	Run all files in IPython app .
14616	Run code in command line
14617	Run the module .
14618	Decorator for generic functions .
14619	Return the filename of a static file .
14620	Read data from file .
14621	Escape HTML .
14622	Generate coverage report .
14623	Copy static report files
14624	Write HTML to file .
14625	Return the hash of a file .
14626	Write index file .
14627	Read coverage data from a directory .
14628	Write coverage status file .
14629	Sort two lists .
14630	Get a slice from a sequence .
14631	Chops a sequence by size .
14632	Read the config file .
14633	Read the manifest .
14634	Convert a glob pattern to a regular expression .
14635	Check if a file matches the given patterns .
14636	Get the versioned files
14637	Start a kernel
14638	Shutdown a kernel .
14639	Kill a kernel
14640	Get a kernel by id .
14641	Get the kernel ports for a kernel .
14642	Return the notebook ID for the given kernel .
14643	Start a kernel for the given notebook_id
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Create an IO stream .
14648	Create a new shell stream .
14649	Create hb_stream_stream_stream_stream .
14650	Reset all instance properties .
14651	Export HTML to file .
14652	Export HTML to file .
14653	Ensure that the image tag is utf8 .
14654	Remove HTML from HTML .
14655	Exports the file to the editor .
14656	Get a unique item or None if it exists .
14657	Convert a list of tokens into a query string .
14658	Convert a query string to text .
14659	Generate a query that can be greater than date_field .
14660	Get a query that can be less than date_field .
14661	Get null or blank query from field .
14662	Convert fields_dict to case insensitive
14663	Add options to the parser .
14664	Validate an attribute against a method .
14665	Determine whether the given method should be executed .
14666	Rotate the text edit .
14667	Monkey patch pyzmq
14668	Create a parser from a schema .
14669	Get the URL for the websocket .
14670	Convert a reply to JSON .
14671	Inject a cookie message .
14672	Start a heartbeat .
14673	Start the hb callback .
14674	Stop the hb stream .
14675	Open file - like object
14676	Validate the index .
14677	Move to the given index .
14678	Edit a block .
14679	Display the block .
14680	Print all the contents of this block .
14681	Run a function over a collection .
14682	Run a collection on a collection .
14683	Run a function in parallel .
14684	Run a function in parallel .
14685	Decorate a function with an object .
14686	Decorate a function with the given names .
14687	Return a tuple of the source code .
14688	Finds lines in lines at pos .
14689	Print a countdown .
14690	Clean up all engines .
14691	Perform a step before execution .
14692	Preprocesses the result .
14693	Saves the list of messages to the queue .
14694	Synchronously synchronize the results .
14695	Returns the result of the wrapped function .
14696	Get all available messages .
14697	Gets a message if there is one ready .
14698	Decorator to mark a function as a property .
14699	Return a tuple of property names for the given fields .
14700	Parse a URL .
14701	Return a list of module names .
14702	Get the list of the root modules
14703	Shortcut for quick completion .
14704	Return a list of modules .
14705	Called when a command has been completed .
14706	Called when completion is done .
14707	Convert an attribute to a string .
14708	Configure the plugin .
14709	Write test suite to file .
14710	Add an error .
14711	Add a failure to the list .
14712	Add a test case .
14713	Generate a numpy array .
14714	Generate a weighted index based on loads .
14715	Register an engine .
14716	Unregister an engine
14717	Handle all tasks that have been executed .
14718	Dispatch a submission .
14719	Check if there is a task timeout .
14720	Fail an unreachable message .
14721	Attempt to run a job .
14722	Save the unmetered status of a job .
14723	Submit a task .
14724	Dispatch the result of a task .
14725	Handle a single result .
14726	Handle unreachable dependencies .
14727	Update the graph for the given dep_id .
14728	Start a log file .
14729	Print the state of the log .
14730	Write log to log file .
14731	Write data to log file .
14732	Stop logging .
14733	Create a new notebook .
14734	Add a string to the list of strings .
14735	Add a regular expression .
14736	Yield objects matching the given key .
14737	Generator for flat matches .
14738	Check if a notebook directory exists
14739	List all notebooks
14740	Create a new notebook id
14741	Delete a notebook id
14742	Check if a notebook exists .
14743	Find the path for a notebook .
14744	Get the path of a notebook .
14745	Get a notebook .
14746	Get a notebook object .
14747	Save a notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Generate a list of tokens .
14754	Generate a list of tokens for the given source .
14755	Load default config file .
14756	Return a list of classes for this shell .
14757	Parse command line options .
14758	Initialize the IPython app .
14759	Initialize the interactive shell .
14760	Initialize banner .
14761	Print the type of an object .
14762	parse a notification name
14763	Set the default value of an object .
14764	Called when a node has changed .
14765	Return a dictionary of traits .
14766	Get metadata for a trait
14767	Validate that value is a subclass of klass .
14768	Returns the default value for this field
14769	Check if the set has been completed .
14770	Return True if there is unreachable
14771	Return a dictionary representation of the dependency .
14772	Find the depth of a tree .
14773	Print a bintree tree .
14774	Reambiguate a DNS URL .
14775	Apply a function to each element of the result .
14776	Validate that the specified targets are valid
14777	Handle monitor traffic .
14778	Dispatch a query .
14779	Handle a new heartbeat .
14780	Handle a heart failure .
14781	Save a task request .
14782	Save a task result .
14783	Save an IOPub message .
14784	Handle a connection request .
14785	Register an engine .
14786	Unregisters an engine
14787	Finish the registration .
14788	Send a shutdown request .
14789	Purge results from the database .
14790	Convert a single record into a dictionary .
14791	Get results from a client .
14792	Get the history of a message .
14793	Run a query .
14794	Change the current working directory .
14795	Decode a completed command .
14796	Run a command inside the root directory .
14797	Execute the command .
14798	Dispatch a message .
14799	Checks if a message is in this session .
14800	Report a list of morse files .
14801	Annotate a file .
14802	Get installed version .
14803	Recursively resolve unicode strings .
14804	Extract the header from a message .
14805	Make sure the packer is valid .
14806	Create a message .
14807	Sign a list of messages .
14808	Convert a message to a string .
14809	Send a message to a stream .
14810	Send a raw message to a stream .
14811	Receive messages from a socket .
14812	Fetch identities from a list .
14813	Unserialize a message into a dictionary .
14814	Save SVG document .
14815	Save SVG to clipboard .
14816	Convert SVG string to Image .
14817	Return an object s info .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Get the arguments for a function .
14821	Generate the tip for a call .
14822	Find the absolute path of an object .
14823	Find the source lines of an object .
14824	Get the definition of an object .
14825	Return the header
14826	Print a warning message .
14827	Print the definition of an object .
14828	Prints the docstring of an object .
14829	show source code
14830	Print a file .
14831	Format a list of fields .
14832	Display information about an object .
14833	Perform a search on a namespace .
14834	Create a thread and return a thread .
14835	Decorate a function to be called by the test case .
14836	Find the best string in a corpus .
14837	Convert to XML .
14838	Convert to XML .
14839	Load all modules in a package .
14840	Invert a dictionary .
14841	Merge two dictionaries .
14842	Convert an object to a primitive .
14843	Convert a string to a string .
14844	Get a list of figures .
14845	Print a figure .
14846	Creates a function that runs the decorated function .
14847	Select figure format .
14848	Find and return gui and backend
14849	Activate matplotlib .
14850	Configure inline backend
14851	Activate pylab .
14852	Trace an event .
14853	Start the thread .
14854	Stop profiling .
14855	Start a new trace .
14856	Installs the tracing function .
14857	Start the collector .
14858	Stop recording .
14859	Pause all traces .
14860	Start the application .
14861	Get line data .
14862	Collect all exceptions from a call to a list .
14863	Render the traceback .
14864	Start the coverage process
14865	Return the canonical directory for the given morf .
14866	Return the filename for a file .
14867	Determine whether or not a filename should be traced .
14868	Determine if the file should be tracing .
14869	Log a warning .
14870	Check for packages in source_pkgs .
14871	Start the parser .
14872	Stop the process
14873	Exclude a regex
14874	Exclude a list of regexes .
14875	Save data to file .
14876	Combine multiple files into one .
14877	Collect the data from the source .
14878	Perform an analysis .
14879	Convert a morf to an analysis .
14880	Analyze an analysis .
14881	Generate a summary report .
14882	Annotate the data .
14883	Generate HTML report .
14884	Generate an XML report .
14885	Display a list of objects .
14886	Display a list of objects .
14887	Display list of objects .
14888	Display a list of objects .
14889	Display a list of objects .
14890	Display a list of objects .
14891	Display a list of objects .
14892	Display a list of objects .
14893	Reload data from url .
14894	Find the path to the command .
14895	Run a command .
14896	Forward read events .
14897	Read lines from the socket .
14898	Find the launcher class for the given class and kind .
14899	Starts the cluster .
14900	Build a launcher for the given clsname and kind .
14901	Start the engine
14902	Start the cluster .
14903	Get wx .
14904	Returns True if the app is running
14905	Start the event loop .
14906	Get an app for Qt4 .
14907	Check if an event loop is running in Qt4 .
14908	Start the event loop .
14909	Creates a blank canvas .
14910	Draw a cross between two points .
14911	Draw a line between two points .
14912	Draw text at given position .
14913	Convert a grayscale image .
14914	Generate a UUID .
14915	Get a unique key for a GET request .
14916	Get the domain of a URL .
14917	Get URL arguments from a URL .
