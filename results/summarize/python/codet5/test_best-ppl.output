0	Convert Sina XML to a list of URLs .
1	Download a Dailymotion video .
2	Download a Sina video .
3	Print a string with ANSI escape sequences .
4	Print a log message to stderr .
5	Prints an error message and exits the program .
6	Print a message and exit the program .
7	Detect the operating system .
8	Download a file from a Vimeo channel .
9	Get information about a video from an XML file .
10	Get video url from video id .
11	Get mgtv real url .
12	Return a legitized version of text .
13	Download a CBS video .
14	Download a stream .
15	Download an acfun video by vid
16	Match all of the patterns in the text .
17	Parse a query parameter from a URL .
18	Get the content of a URL .
19	Make a POST request and return the content .
20	Parse a hostname and port from a host string .
21	Get room id by room url key .
22	Get the title for a given topic and part .
23	Download Wanmen by course .
24	Download bokecc by course topic and part .
25	Return True if task instance has been queued or running .
26	Get the event buffer for the given dag_ids .
27	Returns a snowflake . connector . connector . Connection object
28	Get the AWS access key and secret key from the Snowflake configuration .
29	Get the value of an extra field .
30	Copy an expert file to a local file .
31	Dump a table to a temporary file .
32	Execute the upload .
33	Get the maximum partition of a table .
34	Get MySQL connection .
35	Show the current state of a task .
36	Restarts worker processes .
37	Get the connection to the server .
38	Translate a string or list of strings .
39	Get information about an instance .
40	Create a new instance .
41	Patch an instance .
42	Delete an instance .
43	Get information about a database .
44	Create a new database .
45	Patch a database .
46	Delete a database from an instance .
47	Export an instance .
48	Start the sql proxy process .
49	Stop the SQL proxy process .
50	Get the SQL proxy version .
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete the connection from the database
54	Returns an instance of CloudSqlProxyRunner .
55	Get the database hook .
56	Cleanup database hook .
57	Reserves a free TCP port .
58	Normalizes the mlengine job id .
59	Get the error code from an exception .
60	Remove all DagRun instances from the database .
61	Remove all task instances from the database .
62	Set the is_paused flag for all Dags .
63	Print statistics about the task instances .
64	Check if all tasks have been processed and print stats .
65	Invoke the lambda function .
66	Create an instance of the DataFlowPythonOperator class .
67	Make a directory and set its umask to 0 .
68	Convert string to float if possible .
69	Make a naive datetime naive .
70	Make a naive datetime from a value .
71	Creates a datetime object from the given arguments .
72	Get the druid broker connection
73	Returns a requests . Session object .
74	Run the request and check the response .
75	Check if the response is valid and raise an exception if not .
76	Run the request and check the response .
77	Create a new session .
78	Decorate a function to provide a session .
79	Reset the database to its initial state .
80	Return a pretty string representation of an exception .
81	Returns a list of records matching the given SQL .
82	Get a pandas dataframe from the database .
83	Returns the result of the given SQL query .
84	Insert rows into a table .
85	Returns a CosmosClient instance
86	Check if a collection exists .
87	Creates a collection with the given name .
88	Check if a database exists .
89	Creates a new database .
90	Deletes a database .
91	Deletes a collection .
92	Insert a list of documents into a collection .
93	Deletes a document from a collection
94	Get a document by its id
95	Returns a list of documents matching the given SQL query string .
96	Get a function by name
97	Create a new function in a location .
98	Update a function .
99	Upload a zip file to a location .
100	Delete a function .
101	Get the statuses of the dependencies of the specified task .
102	Return True if ti is met .
103	Get the failure reasons for a task .
104	Parse the s3 config file .
105	Get the current user s credentials .
106	Get a connection to the vertica server .
107	Flush the buffer to the logger .
108	Check if fileloc is a zipped file .
109	Return a list of all Python file paths in the given directory .
110	Construct and return the TaskInstance for this task .
111	Start the DagFileProcessorManager .
112	Send a termination signal to the manager .
113	Exit gracefully .
114	Start the DagFileProcessorManager .
115	Start the DagParser in an asynchronous manner .
116	Start in sync with the agent .
117	Refresh the DAG directory .
118	Print file processing statistics .
119	Clear non - existent import errors .
120	Log file processing statistics .
121	Set the list of new file paths .
122	Wait until all processors have finished .
123	Heartbeat the DAG parsing process .
124	Terminate all child processes .
125	Create an SSH connection to the remote host .
126	Creates a transfer job .
127	Get a transfer job .
128	List all transfer jobs that match the filter .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resumes a transfer operation .
134	Wait for a transfer job to complete .
135	Find all TaskReschedule instances for the given task instance .
136	Return the number of open slots .
137	Run a command and return its output .
138	Remove an option from a section .
139	Get a section from the configuration .
140	Allocates ids for the given partial keys .
141	Begin a new transaction .
142	Commit the current state of the project .
143	Lookup a set of keys in the project .
144	Roll back a transaction .
145	Run a query against the current project .
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until it is done .
149	Export the project to a storage bucket .
150	Import a file from a storage bucket .
151	Publish a message to a target
152	Get the hostname of the current process .
153	Get the language service client .
154	Perform an analysis of entities in a document .
155	Annotate a document with a set of features .
156	Classify a text document .
157	Get the list of template fields for a class .
158	Template field role .
159	Dispose the ORM connection pool .
160	Prepare the classpath for the Airflow server .
161	Check if the task id is valid .
162	Check if the X - CACHECONF header is present in the configuration file .
163	Convert an object to a dictionary .
164	Generator that yields chunks of a list of items .
165	Reduce the given function in chunks and return the result .
166	Chain a list of tasks together .
167	Pretty print a table .
168	Render a log filename .
169	Get the connection to the dataproc server .
170	Wait for an operation to complete .
171	Coerce the content to a string .
172	Handle a Databricks operator execution .
173	Run a pig command .
174	Fetch celery task state .
175	Return the number of tasks per send process .
176	Return the number of tasks per fetch process .
177	Set a default value for a variable .
178	Get the connection to the server .
179	Creates a job in the specified project .
180	Get an MLEngine job .
181	Wait for a job to complete .
182	Creates a new version of a model .
183	Set the default version of a model .
184	List versions of a model .
185	Delete a version of a model .
186	Create a model in a project .
187	Get a model by name .
188	Write batch data to DynamoDB .
189	Integrate plugins .
190	Get the default executor .
191	Get an executor by its name .
192	Called when an error occurs in a segment .
193	Get a pymssql connection .
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	Get a list of pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the current state exit code and detail status of an instance .
202	Returns a list of all messages for the specified instance .
203	Get the logs of a container .
204	Delete a container group .
205	Check if a container exists in a resource group .
206	Decorator to apply default values to a function .
207	Construct an index_hadoop ingest query .
208	Check for a message on the channel .
209	Find all DagRuns in the database .
210	Get all task instances for this task .
211	Get a task instance from the database .
212	Get the previous DagRun for this Dag .
213	Get the previous scheduled DagRun for this Dag .
214	Update the state of the task .
215	Verify the integrity of the task instance .
216	Make a Jenkins request and return the response body and headers .
217	Convert a context to a dictionary of airflow variables .
218	Conditionally trigger a controller DAG .
219	Send a metric to the server .
220	Query a metric .
221	Get a Dag by its ID .
222	Kills the given zombies .
223	Bags a DAG and all its subdags .
224	Collect all the DAGs in the given folder .
225	Generate a report of the DagBag stats .
226	Add a number of days to a date .
227	Format a dataset to a specific format .
228	Returns True if the file is a directory and False otherwise .
229	Return True if the file was copied to a directory .
230	Clear task instances from the database .
231	Get the next try number .
232	Generate a command to run a task .
233	Get the current state of the task .
234	Record the task instance as FAILED .
235	Refresh this task instance from the database .
236	Clear the XCom data associated with this task .
237	Return the key for this task .
238	Return True if the task is done .
239	Calculate the next retry datetime for this task .
240	Return True if the task is ready to be retried .
241	Check if the pool is full .
242	Get the DagRun object associated with this Dag .
243	Push a value to the XCom cache .
244	Pull a task from the XCom database .
245	Initialize the run context .
246	Upload the log file to the wasb server .
247	Get the connection to the compute API .
248	Start an instance in a zone .
249	Set the machine type of a resource .
250	Get an instance template
251	Insert an instance template .
252	Get an instance group manager
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if the given bucket exists .
256	Creates a new S3 bucket
257	Check if the given prefix is present in the given bucket .
258	List the prefixes in a bucket .
259	List all keys in a bucket .
260	Check if the given key exists in the given bucket .
261	Get an object from a key .
262	Read the contents of a key .
263	Select a key from a bucket .
264	Check if a key matches a wildcard key .
265	Get a key from a wildcard key .
266	Upload a file to S3 .
267	Load the contents of a string into a key .
268	Load a bytes object into a bucket .
269	Upload a file - like object to a bucket .
270	Copy an object from one bucket to another .
271	Execute the CQL query and return the cursor .
272	Convert a user type to a dictionary .
273	Send an email to a list of recipients .
274	Get a SpeechClient object .
275	Recognizes the given audio using the given config .
276	Execute the query .
277	Load plugins from an entry point .
278	Checks if the given plugin object is valid .
279	Mark tasks as skipped .
280	Get the connection to the server .
281	Check if a file exists .
282	Upload a file to the ADL server .
283	Return a list of files or directories in a directory .
284	Execute the Athena query .
285	Uncompress a file .
286	Execute the query using MsSqlHook .
287	Decorator for action logging .
288	Build the metrics dictionary for the given function .
289	Create a cgroup at the given path .
290	Delete a cgroup at the given path .
291	Parse a host and return it as a string .
292	Make a request to the databricks API .
293	Get connection to Salesforce .
294	Make a query and return the results
295	Get the description of an object
296	Returns a list of all available fields for an object
297	Make a query to Salesforce and return the result .
298	Convert a column to a timestamp .
299	Write the results of a query to a file .
300	Get the connection to the Mongo server .
301	Get a MongoDB collection
302	Replace multiple documents in a collection .
303	Returns True if there is a mail attachment with the given name .
304	Retrieve a list of mail attachments for a given email address .
305	Download all mail attachments with the given name .
306	Get all attachments with the given name .
307	Get the filename and payload of the file .
308	Put multiple records into the delivery stream .
309	Check if the task is ready for reschedule .
310	Send an email to a list of recipients .
311	Send an email using SMTP .
312	Process the result value .
313	Check if a blob exists in a container .
314	Check if the given prefix exists in the given container .
315	Create a blob from a string .
316	Read a file from a container .
317	Delete a file from a container .
318	Execute the MLSD command on the specified device .
319	Get FTP connection .
320	List all files in a directory
321	Retrieve a file from FTP .
322	Store a file on the remote host .
323	Get the modification time of a file
324	Execute the webhook .
325	Return a FileService object for the current connection .
326	Check if a directory exists .
327	Check if a file exists in a given share .
328	List all directories and files in a given share .
329	Creates a new directory in a given share .
330	Load a file from a given path .
331	Create a new file from a string .
332	Load a file from a stream .
333	Get the storage client .
334	Copy an object from one bucket to another .
335	Download an object from a bucket .
336	Upload a file to a bucket .
337	Check if an object exists in a bucket .
338	Check if an object has been updated after the given timestamp .
339	Delete an object from a bucket .
340	List all blobs in a bucket .
341	Get the size of an object in a bucket .
342	Get the CRC32c checksum of an object in a bucket .
343	Get the MD5 hash of an object in a bucket .
344	Create a new bucket .
345	Compose one or more source objects to another .
346	Check if the secondary training status has changed .
347	Returns the status message for a secondary training job .
348	Create a tar file and upload it to S3
349	Configure S3 resources .
350	Check if the input S3 URL is valid .
351	Get the log client .
352	Create a training job
353	Create a new hyperparameter tuning job
354	Create a new transform job
355	Create an endpoint
356	Describe a training job with log .
357	Check the status of a SageMaker job .
358	Check the status of a training job .
359	Execute the dataflow job .
360	Run migrations in offline mode .
361	Run all migrations in online mode .
362	Delete an instance .
363	Creates a new instance .
364	Create a new table in the database .
365	Delete a table from an instance .
366	Update a cluster .
367	Prepare the CLI command to be run .
368	Prepare command line arguments for hiveconf .
369	Load a table from a pandas DataFrame .
370	Load a table from a text file .
371	Get the metastore client .
372	Check for a named partition on a table .
373	Check if a table exists .
374	Return a pyhive . hive . hive . Connection object .
375	Get the results for a given query .
376	Write the results to a CSV file .
377	Returns a list of records that match the given query .
378	Returns a pandas dataframe of the results of a query
379	Get the product search client .
380	Get the endpoint to send to the robot .
381	Send a Dingding message .
382	Binds the given parameters to the given operation .
383	Escape a string .
384	Cast string_field to bq_type .
385	Validate that a value is of the expected type .
386	Get the connection to BigQuery .
387	Get the bigquery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancel a running BigQuery query .
392	Deletes a table from the specified deletion dataset .
393	Create or update a table in a dataset .
394	Grant a view access to a dataset .
395	Get a single dataset .
396	Get a list of datasets .
397	Insert all rows into a table .
398	Execute an SQL query .
399	Execute an operation on all the parameters in seq_of_parameters .
400	Returns the next page in the buffer .
401	Execute the query and return the cursor .
402	Make intermediate directories in remote_directory .
403	Creates a queue
404	Send a message to a queue .
405	Run the command and return the process object .
406	Remove the configuration file if exists .
407	Entry point for the NVD3 tool .
408	Build the HTML header .
409	Build the SVG container .
410	Build the js chart for this series
411	Create an x - axis .
412	Create a new y - axis .
413	Get a sqlite3 connection .
414	Decorator to add a logging object to the session .
415	A decorator that compresses the response data using gzip .
416	Get the last DagRun for a Dag .
417	Create a new DAG run .
418	Send a message to the queue .
419	Return a JSON representation of an object .
420	Open a file if it is a zipped file .
421	Make a cache key for the current request .
422	Returns a video intelligence service client .
423	Annotate a video with a set of features .
424	Get the Opsgenie API Key .
425	Returns a requests . Session object .
426	Execute an alert request .
427	Build an OPSGENIE payload .
428	Execute the alert hook .
429	Get the athena client
430	Run a query and return the query execution ID .
431	Check the status of a query execution
432	Poll the status of a query execution .
433	Returns a pysftp . Connection object .
434	Handle rate limit exception .
435	Make a call to the Zendesk API
436	Get the partitions of a table .
437	Get information about a table .
438	Get the location of a table .
439	Get the status of a cluster
440	Delete a cluster
441	Get the list of snapshots for a cluster
442	Restores a snapshot from a cluster
443	Creates a new cluster snapshot
444	Execute the API call .
445	Create a new job flow
446	Filter result for files with size > = MEGABYTE
447	Filter result for ignored extensions .
448	Execute the query and save it to S3 .
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a Python dictionary into a protobuf .
453	Wait for an operation to complete .
454	Get an operation by name .
455	Append a label to a resource .
456	Create a new cluster .
457	Get a single cluster .
458	Get the webhook endpoint .
459	Build the discord payload .
460	Execute the webhook .
461	Encrypt the plaintext using the specified key .
462	Import a table .
463	Import a query into a directory .
464	Export a table .
465	Get the text - to - speech client
466	Synthesize a speech .
467	Upload the log file to S3 .
468	Returns a list of init containers .
469	Get environment variables .
470	Returns a list of secrets to be used by the worker .
471	Get the security context from the kube config .
472	Get the extra links for an operator .
473	Send a heartbeat to the scheduler .
474	Launch a new process and put it on the result queue .
475	Start the DagFileProcessor .
476	Check if the process is done .
477	Exit gracefully after receiving a signal .
478	Update import errors in the database .
479	Process all task instances in the DAG .
480	Change the state of all TaskInstances in a DagRun without a DagRun .
481	Get the number of tasks and DAGs that are in the given states .
482	Change the state of an executable task instance .
483	Enqueue a list of simple task instances to the executor .
484	Execute all task instances in the given set of states .
485	Change the state of tasks that failed to execute .
486	Process executor events .
487	Process a DAG file .
488	Update the counters of all tasks in the status .
489	Manage the executor state .
490	Get a DagRun for the given run_date .
491	Returns a dictionary of task instances for the given DAG run .
492	Execute for each run date in run_dates .
493	Set unfinished dag runs to failed .
494	Execute the backfill job .
495	This callback is called when a heartbeat is received .
496	Get the client for the given project .
497	Get an instance .
498	Apply a function to an instance .
499	Creates a new instance .
500	Update an instance .
501	Delete an instance .
502	Get a database from an instance .
503	Create a database in an instance .
504	Update a database in an instance .
505	Delete a database from an instance .
506	Check if the given attachment has been poked .
507	Prepare additional parameters .
508	Get the connection to the keyspace .
509	Check if a table exists in the cluster
510	Check if a record exists in a table .
511	Build the command to track driver status .
512	Submit a spark application .
513	Process the spark submit log .
514	Process the spark driver status log .
515	Returns the task runner for the given local task job .
516	Wait for the task to end .
517	Execute MySQL query .
518	Configure a CSV file with the given schema .
519	Write the local schema file to disk .
520	Get col_type_dict from schema .
521	Map mysql_type to mysql_type string .
522	Execute the command .
523	Decorator to apply lineage to the operator .
524	Return the extra json as a dictionary .
525	Return a list of dates between start_date and end_date
526	Scale time_seconds_arr to the given unit .
527	Return the number of days ago since the current time .
528	Initialize a role in the database .
529	Delete a role from the database
530	Return a list of roles for the given user .
531	Returns a set of all permissions views for the current user .
532	Check if the user has the specified role .
533	Return True if the user has permission with the given name .
534	Clean faulty permissions .
535	Merge a permission with a view menu .
536	Update the admin permission view .
537	Synchronize the permissions of a view on a DAG .
538	Create permissions for all DAG_VMS and DAG_PERMS
539	Get the Fernet object .
540	Poke for a table .
541	Get the hook to use for this catalog .
542	Poke a message on the queue .
543	Get the connection to the HDFS server .
544	Get the connection to the HDFS server .
545	Check if a path exists .
546	r Upload a file to the HDFS server .
547	Get the connection to the pinot broker
548	Get the URI for the connection .
549	Convert a date to a dictionary .
550	Convert a time object to a dictionary .
551	Get a redis connection .
552	Get a pandas dataframe from a SQL query .
553	Run a SQL statement .
554	Set the autocommit flag on the connection .
555	Insert rows into a table .
556	Serialize a cell to a string .
557	Check the health of the scheduler .
558	Get the extra links for a task .
559	Get the cloudant connection .
560	Execute the webhook .
561	Get the credentials to use for this hook .
562	Authenticates with Google .
563	A decorator that catches GoogleAPICallError exceptions and logs them .
564	Decorator to fallback to GCP default project id .
565	Return a list of unfinished tasks .
566	Prepare the spark - sql command .
567	Convert PIL Image to torch . ByteTensor .
568	Normalize a tensor by subtracting mean and std .
569	r Resizes an image to a given size .
570	r Add padding to an image .
571	Crop an image to the specified dimensions .
572	Crop and resize an image .
573	Flip the left and right side of an image .
574	Apply a perspective transformation to an image .
575	Flip the top and bottom of an image .
576	Given an image crop it to five dimensions .
577	Adjust the brightness of an image .
578	Adjust the contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue of an image .
581	r Adjust the gamma of an image .
582	Rotate an image by angle degrees .
583	Apply an affine transformation to an image .
584	Convert a PIL Image to grayscale .
585	Save a tensor to an image file .
586	Find all classes in a directory .
587	Read an image file .
588	Read info file .
589	Read a list of matches from a file .
590	Calculate the accuracy of the output .
591	Sets up the print function for the distributed python interpreter .
592	Download a URL to a directory .
593	List all directories in a directory .
594	List all files in a directory with the given suffix .
595	Download a file from Google drive .
596	Get random parameters for an image .
597	Get a random set of parameters .
598	Get random parameters for an image .
599	Get a random set of parameters to apply to an image .
600	Get parameters for a random angle translations scale shear
601	Download the image .
602	Download all the images and labels in the raw folder .
603	Download the dataset to the raw folder .
604	Get the current theme name from the request .
605	Autocomplete the given text query .
606	Get the current preferences .
607	Returns a list of all available themes in templates_path .
608	Returns a list of searx bangs for the given full_query .
609	Parse the response from Duckduckgo .
610	Apply a custom gradient to x .
611	Returns a tfd . Independent Normal .
612	Calculate the Eight Schools joint log probability .
613	Benchmark the Eight Schools HMC .
614	Expands the docstring of a function .
615	Return the simple name of a distribution .
616	Build a custom random variable .
617	Create a random variable from a distribution .
618	Creates a function that creates a random variable from a class .
619	Predictive one - step prediction .
620	Apply a forecast to the observed time series .
621	Return the maximum value along an axis .
622	Raises an AssertionError if x is not finite .
623	Raises an AssertionError if x is not equal to the given rank .
624	Compute the size of an event .
625	Evaluate a function on a one - hot distribution .
626	Get a convert - to - tensor function from an identifier .
627	Size of mixture - same - family parameters .
628	Get the next interceptor in the stack .
629	Decorate a function to be interceptable .
630	A context manager for tape data .
631	Generate random toy logistic data .
632	Visualize the decision .
633	Builds the input pipeline .
634	Check that map_values is valid .
635	Trace a function at a given number of steps .
636	Call the function with the given arguments .
637	Call a function and return its return extra and gradient .
638	Convert from_structure to to_structure with broadcasting if necessary .
639	Decorate a log_prob_fn with the given bijector .
640	Takes a LeapFrogStepState and a step_size and returns a LeapFrogStepExtras .
641	Performs the metropolis - hastings step .
642	Hamiltonian Monte Carlo .
643	Sign adaptation .
644	Create a new layer from a config dictionary .
645	Convert x to a tf . Tensor .
646	Create a scale operator .
647	Create a random walk normal function .
648	Create a random walk uniform function .
649	Expand x to the event rank .
650	r Compute the lower bound of the entropy of the distribution .
651	Get the softmax of the categories .
652	Raises an error if validate_args is False .
653	Ensure that TensorFlow is installed .
654	Logistic regression .
655	Get the features and labels of the covertype dataset .
656	Returns the cholesky covariance of x .
657	Calculate the standard deviation of a tensor .
658	Compute the variance of x .
659	Make a list of tensors where axis is positive .
660	Squeeze a tensor along an axis .
661	Returns the z - component of x .
662	Inverse of z .
663	Returns the semilocal linear trend transition matrix .
664	Semilocal linear trend transition noise .
665	r Sample from a Halton sequence .
666	Get the permutations of num_results .
667	Helper function for _get_indices .
668	Return the number of base expansion for num and bases .
669	Return the primes less than or equal to n .
670	Compute machine eps for a given dtype .
671	Hager Zhang .
672	Fix the step size .
673	Wrapper around hzl . bracket .
674	Helper function for HagerZhangLineSearch .
675	Calculate the inner bisection of a HagerZhangLineSearchResult .
676	Prepare args for evaluation .
677	Return a tf . compat . v1 . Print object .
678	Calculate the softmaxnormal gauss - hermite quadrature scheme .
679	Compute the softmax normal quantiles for a given quadrature scheme .
680	Raises an error if the given param is not a valid quadrature .
681	Given a grid and an endpoint affine determine the batch and event shapes .
682	Interpolate a quadrature grid at a given location .
683	Interpolate a grid by the given scale .
684	Multiply w by op by w .
685	Concatenate vectors .
686	Return the log - product of vs and ms .
687	Compute the log - product of ms and vs .
688	Convert a vector matrix into a vector matrix .
689	Extract log probabilities from a distribution .
690	Computes the marginal hidden probabilities .
691	Computes the posterior marginals for the given observations .
692	Posterior mode .
693	Helper function for _choose_random_direction .
694	Helper function for _sample_next .
695	Call fn if fn_result is None return fn_result .
696	Pads x to the right .
697	Performs one step of the slice .
698	Builds a training posterior for the given parameter .
699	Builds the factored variational loss for a model .
700	Minimize a loss function in the graph .
701	Calculate the mean and variance of a time series .
702	Compute the initial value of a masked time series .
703	Broadcasts the batch shape of a list of distributions .
704	Returns a MultivariateNormalLinearOperator for the factored joint distributions .
705	Returns a MultivariateNormalDiag from a list of distributions .
706	Compute empirical statistics for a time series .
707	If observed_time_series_tensor has a trailing dimension expand it .
708	Canonicalizes an observed time series with a mask .
709	Returns a MixtureSameFamily for the given means and variances .
710	Return the number of elements in the range .
711	Creates a function that returns a summary statistic for the given attribute .
712	Unify a call signature for a tfd . Distribution .
713	Helper function to resolve distribution names .
714	Returns a tuple of the required arguments for the given function .
715	Compute the KL divergence between two distributions .
716	Build the distribution function .
717	Resolve the graph for the given distribution_names and leaf_name .
718	Compute the entropy of the distribution .
719	Decorate a function to check that x is in the support of the distribution .
720	Create a summary for an image .
721	Visualize a reconstructed image .
722	Visualize the qualitative analysis .
723	Summarize the parameters of a distribution .
724	Summarize the mean of inputs in nats and bits .
725	Returns a TensorFlow MultivariateNormalDiag .
726	Returns a tuple of the previous state h0 and c0 .
727	Call the LSTM cell .
728	Call the convolutional layer .
729	Generate the likelihood of a batch of samples .
730	Reconstructs the likelihood .
731	Sample from the static prior .
732	Sample from the dynamic prior .
733	The batch shape of the prior .
734	Returns the batch shape of the prior .
735	Creates a state space model .
736	Samples the prior of the model .
737	Compute the minimum event dimension for each bijector in the list .
738	Convert vector length to square matrix size .
739	Sort an array along an axis .
740	Sort an array along an axis .
741	Convert x to a tensor and return it as a string .
742	Compute the NDTR of x .
743	Convert a numpy array into an N - triangular tensor .
744	Compute the logarithm of x .
745	Asymptotic logarithm of x .
746	Compute the square root of x .
747	Computes the log - cdf of x .
748	Compute the log probability of the joint text messages .
749	Benchmark text messages with HMC .
750	Returns True if index_points is a multivariate marginal GP .
751	Returns the marginal distribution of the model .
752	Get the index_points for this GaussianProcess instance .
753	Creates an InvertedAutoregressiveFlow stack .
754	Perform one step of the computation .
755	Perform the bootstrapping of the model .
756	Compute the outer squared difference between x and y .
757	Get the value and batch Jacobian of a function .
758	Prevent 2nd derivative .
759	Apply the distribution to x .
760	Split the covariance into multiple marginals .
761	Decompose a tfp . sts . Sum model into its components .
762	Decompose a model by component .
763	Decompose a model from a MixtureSameFamily of LinearGaussianStateSpaceModel .
764	Converts a dense tensor to a SparseTensor .
765	Return a function that applies an operator to the value of an attribute .
766	Return a string representation of a numpy . ndarray .
767	The shape of the sample .
768	Returns the sample shape as a tensor .
769	Return the value of the distribution .
770	Evaluate the expression .
771	Return the numpy representation of the EagerTensor .
772	Conjugates prior prior with known scale posterior .
773	Returns a default template for a real NVP .
774	Uniform unit norm .
775	Compute the log - norm of x .
776	Compute the log - normalization of the concentration .
777	Returns the common dtype for args_list .
778	Creates a summary statistic for the given attribute .
779	Broadcasts tensor_to_broadcast to target_tensors .
780	Return the PDF at the peak .
781	Compute the effective sample size for a list of states .
782	Compute the effective sample size for a single state .
783	Compute the potential scale reduction for a single state .
784	Returns the size of x along the given axis .
785	Helper function for broadcasting maybelist arguments .
786	Computes the lognormal gauss - hermite quadrature scheme .
787	Computes the lognormal quantiles for the given quadrature scheme .
788	Merge two mappings .
789	Remove a field from the mapping .
790	Merge two values .
791	Return a deep tuple representation of x .
792	Compute the left doubling increments .
793	Find the indices of the best interval of x .
794	Compute the left and right slice boundaries for each doubling step .
795	Sample with shrinkage .
796	Slice a tensor by one dimension .
797	Creates a setter that will set the value of a model parameter .
798	Creates a log - joint function for the given model .
799	Returns a dictionary of the arguments to be passed to a function .
800	VGG convolution block .
801	Helper function to build a Leapfrog tree .
802	A decorator that ensures that the gradient is None for a state .
803	Check if two states have no u - turn .
804	Helper function for leapfrog .
805	Compute the log - joint of current target and current momentum .
806	Helper function for random_bernoulli .
807	Returns the default loc and untransformed scale function .
808	Default mean field normal function .
809	Default multivariate normal function .
810	Deserialize a function from a serialized string .
811	Serialize a function .
812	Broadcast from_structure to to_structure .
813	Convert a nested structure to a tensor .
814	Convert args to a tensor .
815	Call a function with the given arguments .
816	Returns a dictionary of all attributes of a Tensor like object .
817	Create a mixture prior .
818	Pack images into rows cols and depth .
819	Download a file from a directory .
820	Build fake input functions for training and evaluation .
821	Validate block_sizes and bijectors .
822	Check that all inputs have the same shape .
823	Create a multivariate normal triangular layer .
824	Bernoulli layer .
825	Converts x into a tfd . Normal .
826	Computes the Poisson log - rate of x .
827	Helper function for Mala s Euler method .
828	Get the drift .
829	r Computes the log - density of the current state and proposed state .
830	Call volatility_fn and grads_volatility_fn if provided .
831	Broadcasts the volatility parts to the state parts .
832	Creates an AR transition matrix for the given coefficients .
833	Returns the shape of the input tensor .
834	Calls fn with input x and reshapes the output .
835	Calls fn and reshapes the output .
836	Compute the Bayesian Dynamic Dynamic Deviation .
837	Returns a flattened version of the joint distribution of the model .
838	Creates a dirichlet allocation for the given concentration .
839	Creates a dirichlet layer for the LDA model .
840	Returns a list of strings for each topic .
841	Create a newsgroups dataset .
842	Build fake input functions for training and evaluation .
843	Build train and eval input functions .
844	Minimize the gradient and Hessian loss .
845	Adds control - dependencies to the vector quantizer .
846	Save a numpy array to an image file .
847	Visualize training images .
848	Load a Bernoulli MNIST dataset .
849	Convert a tf . dtype to a numpy dtype .
850	Return the base_dtype of the given dtype .
851	Return True if dtype is a boolean .
852	Return True if dtype is complex .
853	Return the maximum value of a dtype .
854	Return the name of a dtype .
855	Returns the size of the given dtype .
856	r Assert that all items have the same base type .
857	Assert that tensors and dtype are of the same type .
858	Minimize an objective function .
859	Nelder - Mead one - step objective .
860	Returns an accept_reflected_fn that returns True and the next_simplex and next_objective_values .
861	Return a function that expands the simplex and replaces the objective at the worst_index with the value of the objective_values .
862	Return a boolean indicating whether the given objective is outside the given contraction .
863	Shrink the simplex to the best vertex .
864	Replace x at index with replacement .
865	Check if a simplex has converged .
866	Prepare the arguments for an objective function .
867	Prepare args for objective_function with initial simplex .
868	Prepare args with initial_vertex .
869	Evaluates an objective function multiple times .
870	Plot weight posteriors .
871	Plot heldout prediction .
872	Build a fake MNIST dataset .
873	Get config dict for Keras .
874	Create a TensorFlow instance from a config dictionary .
875	Matrix multiplication .
876	Helper function for _std_var .
877	Assign a log - moving mean with exponential decay .
878	Make a columnar representation of x .
879	Generate a random rademacher .
880	Generate a random rayleigh random tensor .
881	Pick scalar condition .
882	Finish log probability for one fiber .
883	Finish prob for one fiber .
884	Rotate dimensions if necessary .
885	r Undo batch normalization .
886	Validate a batch normalization layer .
887	Slice a single param by a list of slices .
888	Helper function for _slice_params_from_dist .
889	Apply a single step to a single dimension distribution .
890	Apply a sequence of slices to a distribution .
891	Apply a batch slice to a distribution .
892	Fit a model to a response .
893	Convergence criteria for small relative norm weights change .
894	Prepare args for training .
895	Returns the number of columns of x .
896	Prefer a static version of original_fn .
897	Copy docstring from original_fn to new_fn .
898	Get the static value of a predicate .
899	Returns the rank of a tensor given its shape .
900	Apply a conditional function to a list of predicates and return the result .
901	Create a name scope .
902	Calculate the standard deviation of a mixture .
903	Create a tril scale from loc and scale_tril and scale_diag .
904	Create a scale matrix for the diagonal part of a matrix .
905	Returns a list of tensor shapes from loc and scale .
906	Returns True if scale is a diagonal scale .
907	Check whether the distribution is scalar .
908	Given a mixture distribution and a categorical distribution pad the mixture dimension .
909	Pick scalar condition .
910	Move a tensor from one dimension to another .
911	Check that x is non - negative .
912	Check if two tensors have the same shape .
913	If x is None return it . If x is None return it .
914	Return True if the dtype is unsigned by its base_dtype .
915	Return True if dt is known to be signed by its base_dtype .
916	Return the largest integer value of the given dtype .
917	Return the largest integer value of the given dtype .
918	Return True if the dtype is an integer .
919	Check that a categorical - distribution parameter has at least one dimension .
920	Computes the log combinations of n and counts .
921	Rotate x by shift .
922	Picks a vector from a boolean condition .
923	Prefer static broadcasting of two tensors .
924	Generate a new seed using the given seed and salt .
925	Computes the tridiagonal matrix of a tensor .
926	Returns the dimension size of x along the given axis .
927	Process quadrature_grid_and_probs .
928	Returns a dictionary of all the arguments from the parent frame .
929	Expand x to a vector .
930	Returns output_tensor with control_dependencies applied .
931	Validates that the rightmost_transposed_ndims is an integer .
932	Ensure that perm is a valid permutation vector .
933	Return the event shape for the given shape .
934	Concatenate two tensors .
935	Returns a list of the dimensions of x .
936	Returns a new TensorShape with x merged with other .
937	Returns a copy of x with rank greater than or equal to rank .
938	Checks that static_target_shape and dynamic_target_shape are equal .
939	Augment full_sample_and_batch_shape with partial_batch_dist s batch_shape .
940	Build a backward pass step .
941	Perform backward smoothing update .
942	Build a Kalman filter step .
943	Perform a linear Gaussian update .
944	Compute the predicted mean and covariance of a transition .
945	Build a Kalman mean step .
946	Build a covariance step for Kalman .
947	Build a Kalman sample step .
948	Propagate mean .
949	Propagate a covariance matrix .
950	Perform backward smoothing pass .
951	Sample n samples from the joint model .
952	Smooth the posterior marginals of x .
953	Compute the joint mean of the state prior .
954	Compute the joint covariance .
955	Converts a set of latent means and a set of latent covs to observations .
956	Log normalization for vMF .
957	The mode of the concentration .
958	Rotate the samples by the mean direction .
959	Sample from a 3D distribution .
960	Return a copy of a function .
961	Remove keys with a value from a dictionary .
962	Recursively replace dict values with _PrettyDict .
963	Get samples from the distribution .
964	Return True if x is a namedtuple like object .
965	Choose the base case .
966	Return a new instance of the accepted class with the values of is_accepted and rejected .
967	Safely sum a list of tensors .
968	Wrapper around tf . compat . v1 . value_and_gradients .
969	Call fn with fn_arg_list and return result and grads .
970	Wrapper around tf . while_loop .
971	Run trace_fn for each element in elems .
972	Creates a function that calls the given setter on the results of the kernel .
973	Make a getter that returns the innermost kernel results .
974	Enable the store_parameters_in_results flag in the kernel .
975	Replace event_shape_in with event_shape_out .
976	Replace event_shape_in with event_shape_out .
977	Check that shape is valid .
978	Return True if any of the converged and failed tensors have been reduced .
979	Returns a dictionary of initial state arguments .
980	Perform a line search step .
981	Returns a function that restricts the gradient along the given direction along the given position .
982	Update the position .
983	Check if the current objective and current position are converged .
984	Broadcast a value to a target tensor .
985	Harmonic number .
986	Default exchange proposed function .
987	Get a field from a kernel results object .
988	Get the exchanged states .
989	Returns the variance scale term .
990	Returns a function that computes the forward log - detector jacobian of the given bijector .
991	Returns a function that applies the forward transformation of the given bijector .
992	Returns a function that applies the inverse of the given bijector .
993	Perform one step of the transformation .
994	Apply a conditional to a tensor or a tuple of tensors .
995	Calculate the secant of a value .
996	Helper function for secant2 .
997	Helper function for _Secant2 .
998	Update value_and_gradients_function .
999	Perform a bracket search on the right .
1000	Bisect the gradient of a value_and_gradients_function .
1001	Helper function for _bisect .
1002	Returns True if val_1 and val_2 are finite .
1003	Returns True if val_0 satisfies the Wolfe rule .
1004	Compute the secant of two values .
1005	Create a simple step size update policy .
1006	Helper function for hmc_leapfrog_integrator .
1007	Computes the log - acceptance correction of the current and proposed chains .
1008	Perform one step of HamiltonianMonteCarlo .
1009	Bootstrap the results of the Hamiltonian Monte Carlo kernel .
1010	Bayesian ResNet .
1011	Resnet block .
1012	Creates a dirichlet layer for the encoder .
1013	Create a decoder for a set of topics and words .
1014	Creates a dirichlet prior with concentration .
1015	Sample a Markov chain .
1016	Deep Exponential family .
1017	Construct a trainable positive deterministic .
1018	Construct a tf . Tensor of trainable gamma .
1019	Load NIPS2011 papers from a CSV file .
1020	Initialize parameters .
1021	Returns the KL function registered for type_a and type_b .
1022	Read an image from a file .
1023	Download all sprites .
1024	Create a tf . Tensor representing a character .
1025	Create a sequence of frames from a character .
1026	Create a random sequence .
1027	Create the sprites dataset .
1028	Validate a list of distributions .
1029	Flatten a list of summands .
1030	Flatten a list of multiplicand kernels .
1031	Build fake data for training and testing .
1032	Count the number of integers along an axis .
1033	Find the binning of x along the given edges .
1034	Create a histogram along an axis .
1035	Quantiles along a given axis .
1036	Get the number of statically defined dimensions of x .
1037	Insert back and keep dimensions .
1038	Make a list of non - negative dimensions for an axis .
1039	Move dimensions to the end of a tensor .
1040	Sorts a tensor .
1041	Creates a list of state space models for each component .
1042	Compute the amplitudes of the logarithm of logu .
1043	Reverse log - likelihood .
1044	Compute the Jensen - Shannon log - likelihood .
1045	Computes the Pearson logarithm of a tensor .
1046	Squared Hellinger log - u .
1047	Computes the triangular log - likelihood of a log - likelihood .
1048	Return the log - product of logu and t .
1049	Returns the log1p absolute value of logu .
1050	Compute the Jeffreys log - likelihood .
1051	Modified GAN with respect to logu .
1052	Apply a dual csiszar function to logu .
1053	Symmetricized csiszar function .
1054	Apply a Monte Carlo - Csiszar divergence to a function .
1055	Helper function for csiszar_vimco .
1056	Assert that x has the same number of dimensions as expect_ndims .
1057	Batch gather with broadcasting .
1058	Broadcasts event and params to params .
1059	r Compute the log - likelihood of an expectation importance sampler .
1060	Broadcast event and samples .
1061	Minimizes the gradient of a gradient function .
1062	Check that the initial inverse Hessian is positive definite and symmetric .
1063	Update the inverse Hessian estimate .
1064	Update the inverse Hessian estimate .
1065	Multiply mat by vec .
1066	Compute the product of two tensors .
1067	Transpose a batch .
1068	Pads the shape of x to the right with zeros .
1069	Returns the sum of x along the rightmost dimensions preserving the shape of x .
1070	Returns the sqrt and gradient of x .
1071	Returns the common dtype of a list of tensors .
1072	Minimizes the gradient of a gradient function .
1073	Returns the initial state of the LBfgsOptimizerResults object .
1074	Get the search direction .
1075	Creates an empty queue for the given element .
1076	Pushes new_vecs onto the queue .
1077	Compute the PSD mask of x .
1078	Return x if x is larger than det_bounds .
1079	Compute a uniform correlation matrix .
1080	Create a uniform correlation matrix with volume rejection samples .
1081	Compute the Clopper - Pearson confidence interval .
1082	Computes the true volume of the correlation matrices with the given determinant .
1083	Von Mises CDF series .
1084	Compute the Von - Mises cdf of a normal .
1085	Performs one - step of the objective function on the given population .
1086	Minimize an objective function .
1087	Helper function for _get_initial_args .
1088	Find the best value in the population .
1089	Check if the population is converged .
1090	Get the starting population .
1091	Perform binary crossover on the population .
1092	Get the mutants of a population .
1093	Get random mixing indices .
1094	Ensure tensor_or_list is a list .
1095	Helper function for _get_tol .
1096	Calculate the soft threshold of x .
1097	Clip t by clip_value_min and clip_value_max .
1098	Build the input pipeline .
1099	Plot the generated images .
1100	Convert a list of productions into a string .
1101	Call the LSTM model .
1102	Returns a MultivariateNormalDiag of the latent code .
1103	Return the Hat integral of x .
1104	Inverse of the Hat .
1105	Compute the rank of a matrix .
1106	Inverse of a matrix .
1107	Solve the Luclidian product of perm and rhs .
1108	Inverse of lower_upper with perm perm .
1109	Reconstructs a list of LuAssertions .
1110	Raises an error if the lower_upper is not equal to the rhs .
1111	Compute the diagonal of a sparse block .
1112	Raises an error if a is not a matrix .
1113	Compute the negative log - likelihood of the model with respect to the response .
1114	r Fit a model to a sparse response .
1115	Generates a list of slices for the given number of blocks .
1116	Generate a mask .
1117	Create a masked dense layer .
1118	Create an input order .
1119	Create a list of degrees based on the input size and hidden units .
1120	Create a list of masks for the given list of degrees .
1121	Create an initializer for a masked tensor .
1122	Build the tensor .
1123	Call the autoregressive layer .
1124	Draw a sample of num_samples from logits .
1125	Returns a tfd . MultivariateNormalDiag with zero dimension .
1126	Returns a function that observes the given time series .
1127	Convert params to weights .
1128	Return the depth of the given graph .
1129	Find the best order of parents in a graph .
1130	Flatten a set of named_makers into a single function .
1131	Builds the probabilistic chain rule .
1132	Compute the variational GP loss .
1133	Calculate the optimal variational posterior of a kernel .
1134	Build a function that determines if a time series is the last day of the given number of steps per season .
1135	Builds the effects to residuals matrix .
1136	Builds the seasonal transition matrix .
1137	Builds the seasonal transition noise matrix .
1138	Builds a constrained seasonal transition noise .
1139	Check if an observation data is empty .
1140	Ensure that the observation data is broadcastable .
1141	Adds a scheduler to the current value .
1142	Set the checkpoint trigger .
1143	Set the gravity clip constant .
1144	Optimize the model .
1145	Set the training summary .
1146	Set the value summary .
1147	Create an Optimizer instance .
1148	Set the training data .
1149	Set the summary trigger .
1150	Read images and labels from train and test data sets .
1151	Get news20 texts .
1152	Download and return a dictionary of glove . 6B . sd . txt .
1153	Compiles the value using the given optimizer loss and metrics .
1154	Fit the model to the input data .
1155	Evaluate the value of x and y .
1156	Predict the value of x .
1157	Read the MNIST dataset .
1158	Preprocess the MNIST dataset .
1159	Get the end trigger for the given options .
1160	Validate an optimizer .
1161	Get the value of the field .
1162	Call a bigdl function on a bigdl type .
1163	Call a Java function on the gateway .
1164	Converts a BigDL RDD to a Java object .
1165	Convert Python object to Java object .
1166	Get an activation by its name .
1167	Create a new instance from an np . ndarray .
1168	Returns the label of the image .
1169	Read a distributed image from a parquet file .
1170	Write a parquet file to disk .
1171	Get the image from the current frame .
1172	Get the image of the local frame .
1173	Returns the label of this distributed image frame .
1174	Get the predict value for the specified key .
1175	Predict the value of x .
1176	Fit the model to the data .
1177	Transform the image .
1178	Save a Keras model definition to a JSON file .
1179	Build a keras model .
1180	Predicts the class of a distributed dataset .
1181	Set the weights of the tensor .
1182	Get the weight of the layer .
1183	Saves the tensorflow to a file .
1184	Sets whether or not the model is training or evaluation .
1185	Load a Torch model from a file .
1186	Load Keras model from a JSON or HDF5 file .
1187	Create a new criterion with the given value and type .
1188	Load weights from a JSON file .
1189	Load the imdb dataset .
1190	Build a keras model .
1191	Returns the shape of the input .
1192	Returns the shape of the output image .
1193	Get the MNIST dataset .
1194	Read the movielens data sets from the data directory .
1195	Get the bigdl classpath .
1196	Check if pyspark is version 2 . 2
1197	Export a checkpoint to a dictionary of tensors .
1198	Saves a dictionary of tensors to a file .
1199	Expand a tile along a given axis .
1200	Precompute future symbols .
1201	Simple attention .
1202	Attention layer .
1203	Computes the BLEU distance between the reference and the translation .
1204	Get the log file for this agent .
1205	Write a message to the log file .
1206	Create a summary summary for gradients .
1207	Dump weights to a file .
1208	Read data from a config dictionary .
1209	Train and evaluate a model from a config file .
1210	Interact with an alice agent .
1211	Convert a list of labels to one - hot form .
1212	Convert a list of probabilities into a list of one - hot labels .
1213	Create a config session .
1214	Load the model from disk .
1215	Returns the momentum variable of the model .
1216	Update the learning rate and momentum variables .
1217	Calculate the F1 - MACRO of the predicted values .
1218	Process a word .
1219	Stacked CNN .
1220	Create an RNN layer with GRU cells .
1221	Stacked BI RNN layer .
1222	Stacked highway CNN layer .
1223	Creates an embedding layer .
1224	Cudnn GRU .
1225	Cudnn compatible GRU .
1226	Cudnn LSTM module .
1227	Create a LSTM variable for use with LSTM .
1228	Wrapper for the cudnn_gru function .
1229	Convolutional LSTM model .
1230	Wrapper for cudnn_bi_gru .
1231	Convenience function for variational dropout .
1232	Builds the LSTM model .
1233	Builds the word convolutional layer .
1234	Builds the basic LSTM network .
1235	Train on a batch of data and labels .
1236	Predict on a batch of data .
1237	Make a vector from a list of tokens .
1238	Make a vector from a list of tags .
1239	Calculate the BLEU measure .
1240	Verify if the given URL is a valid sc url .
1241	Extract a list of certificates from a text file .
1242	Verify a chain of certificates .
1243	Verifies the signature of the request body .
1244	Verify the signature chain .
1245	Return the JSON representation of the controls .
1246	Return a list of ms bot frameworks .
1247	Return a list of all telegram controls .
1248	A list of all alexa controls .
1249	Main entry point for DeepPavlov .
1250	Wrap a function with a default graph .
1251	Wrap a function in a Keras session .
1252	Calculate the accuracy of two data sets .
1253	Round the accuracy of a set of predictions .
1254	Pre - trained initializer .
1255	Read data from a file .
1256	Create a hello bot agent .
1257	Convert a vector to a one - hot vector .
1258	Prettify a list of metrics .
1259	Populate the default settings directory .
1260	Load the model from the given path .
1261	Saves the model to disk .
1262	Returns a tf . train . AdamOptimizer for the given loss and learning rate .
1263	Search for a word in the trie .
1264	Make the default operation cost dictionary .
1265	Start the conversation timer .
1266	Handle a request .
1267	Call the agent with the given utterance .
1268	Add session attributes to the response .
1269	Handle an intent request .
1270	Handle the launch request .
1271	Handle an unsupported response .
1272	Pretty print the structure .
1273	Convert an elmo loss list to a floating point number .
1274	Build a Chainer from a configuration file .
1275	Interactively interact with a model .
1276	Predict a model on a stream .
1277	Read a text file into a list of tuples .
1278	Import a function from its string representation .
1279	Decorator to register a metric function .
1280	Get a metric function by its name .
1281	Convert a string label to an integer .
1282	Given a list of values and a list of losses return the best value .
1283	Encode a list of tokens into a numpy array .
1284	Read the requirements . txt file .
1285	Return the log - loss of the prediction .
1286	Export a weight file to a hub .
1287	Show the details of an item .
1288	Build and return an EcommerceAgent .
1289	Entry point for the ms - bot framework server .
1290	Download a file from a URL .
1291	Unzip a tar file .
1292	Decompress a file from a URL .
1293	Recursively updates an editable dict with the values from editing_dict .
1294	Add a . md5 extension to a URL .
1295	Set a query parameter in a URL .
1296	Alexa response .
1297	Return the JSON representation of the control .
1298	Create an ms - bot - framework card action .
1299	Return the JSON representation of the control .
1300	Generate a JSON - ready representation of the message .
1301	Calculate the Squad - v2 F1 .
1302	Return the recall at a given k .
1303	r Check if a GPU device is available .
1304	Recursively parse a config property .
1305	Parse a configuration file .
1306	Expand a path .
1307	Create a Component instance from a dictionary of parameters .
1308	Run the request loop .
1309	Delete a conversation .
1310	Refresh the list of expired certificates .
1311	Verify the signature of the request .
1312	Check the validity of the request and verify the signature .
1313	Import a class from its string representation .
1314	Decorator to register a model class .
1315	Get a model from the registry .
1316	Get the GLM regularization path for a model .
1317	Make a generalized linear estimator for a model .
1318	Create a H2OCluster object from a list of key - value pairs .
1319	Shutdown the H2O instance .
1320	Check if H2O is running .
1321	Show the status of the cluster .
1322	List all available jobs
1323	Returns a list of all available time zones .
1324	Fill properties from a H2OCluster object .
1325	Returns the metalearner parameters as a dictionary .
1326	Stabilize a test function .
1327	Get the summary of a column .
1328	Delete a frame .
1329	Get a list of model builders .
1330	Validate model parameters .
1331	Compute model metrics for a given frame .
1332	Get model metrics .
1333	Delete a model .
1334	Return a table of the data .
1335	Run EC2 instances .
1336	Terminate the specified instances .
1337	Stop an EC2 instance .
1338	Start the specified instances .
1339	Reboot one or more instances .
1340	Wait for SSH on one or more hosts .
1341	Get the full name of a function .
1342	Find a function from its code .
1343	Get a string representation of a function s arguments .
1344	Wrap text to make sure it is not longer than wrap_at
1345	Wait for the job to complete .
1346	Train the model .
1347	Fit the model to the data .
1348	Get the parameters of the H2OEstimator .
1349	This function is called when a signal is received .
1350	Wipe the output directory .
1351	Remove a sandbox directory .
1352	Scrape port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM .
1355	Stop all nodes and client nodes .
1356	Get the IP address of the node .
1357	Get the port number of the node .
1358	Returns the ROC of the model .
1359	Determine the vector size of the pre - trained model .
1360	Compute the H2O mean absolute error .
1361	H2O mean squared error .
1362	Calculate the H2O median absolute error .
1363	Compute the H2O explained variance score .
1364	Raises an exception if var is not of expected type .
1365	Raise an exception if v does not match regex .
1366	Raises an exception if v does not satisfy the condition cond .
1367	Retrieve the arguments to be passed to the assert function .
1368	Check if a variable is of the given type .
1369	Get a string representation of a type .
1370	Get the source code for a lambda function .
1371	Check if a variable is of the correct type .
1372	Check if a variable is one of the constants .
1373	Get H2O configuration .
1374	Read the config file .
1375	Iterate over the log files in the current working directory .
1376	Execute a progress function .
1377	Store model progress .
1378	Recalculate model parameters .
1379	Estimate progress completion time .
1380	Try to guess the next poll interval .
1381	Compute the progress at the given time .
1382	Returns the time at which the progress has elapsed .
1383	Draw text to stdout .
1384	Compute the sizes of the widgets .
1385	Get the size of the terminal .
1386	Set the encoding of the bar .
1387	Fit the encoder to the given frame .
1388	Get a H2OFrame from the cache .
1389	Refresh the cache .
1390	Return the type of the given column .
1391	Get columns by type .
1392	Print a summary of the H2OFrame .
1393	Print a summary of the frame .
1394	Return a new table with the first rows and columns of the table .
1395	Multiply the current frame with the given matrix .
1396	Returns the levels of the H2OFrame .
1397	Returns the number of levels .
1398	Set the level of the frame .
1399	Set the domain levels .
1400	Rename columns .
1401	Set the names of the columns .
1402	Set the name of a column .
1403	Return True if item is in this H2OFrame .
1404	Returns a new H2OFrame with rows divided by n_folds columns .
1405	Stratified k - fold column .
1406	Print the structure of the H2OFrame .
1407	Return the data as a pandas DataFrame .
1408	Pop a column from the frame .
1409	Return a new H2OFrame with a quantile of prob .
1410	Concatenate a list of frames .
1411	Bind an H2OFrame to another H2OFrame
1412	Return a new H2OFrame with rows bound to the given data frame .
1413	Split a frame into multiple frames .
1414	Return a new GroupBy object that will be used to group results .
1415	Fill missing values along specified axis .
1416	Impute the values of a column .
1417	Merge two H2OFrames .
1418	Return the H2OFrame relevel of y .
1419	Insert missing values into the dataset .
1420	Compute the variance of this H2OFrame .
1421	Compute the correlation coefficient of this H2OFrame .
1422	Calculate the distance between two H2OFrames .
1423	Return a new H2OFrame representing the factor of this H2OFrame
1424	Return a new H2OFrame with rows split by pattern .
1425	Return a new H2OFrame with rows that match the given pattern .
1426	Return a new H2OFrame with all elements from start_index to end_index .
1427	Return a new H2OFrame with rows removed from the beginning .
1428	Calculate the entropy of the H2OFrame .
1429	Returns a new H2OFrame with num_valid_substrings populated with the given path_to_words .
1430	Create a table expression for this frame .
1431	Create a histogram of the H2O data .
1432	Returns a new H2OFrame with the largest number of words equal to num_words less than max_cardinality .
1433	Replace the first occurrence of pattern with replacement .
1434	Return the upper - case version of this frame .
1435	Returns a new H2OFrame with all elements that match the given regular expression .
1436	Return a new H2OFrame with NaN values removed .
1437	Returns a new H2OFrame with only one column differencing flag .
1438	Return a new H2OFrame with NA values .
1439	Returns a new H2OFrame with the minute field set .
1440	Create a new H2OFrame with only one row .
1441	Returns a new H2OFrame with random stratified split .
1442	Return a new H2OFrame with columns cutting breaks .
1443	Return the maximum value of each column in this DataFrame .
1444	Apply a function along an axis .
1445	Parse text into a Code object .
1446	Parse a file and return a Code object .
1447	Move the cursor to a new location .
1448	Unparse the token and return the result .
1449	Get the size of the model .
1450	Returns a list of the centers of the model .
1451	Returns the standard deviation of all centers in the model .
1452	Connect to a H2O server .
1453	Make a request to the H2O API .
1454	Check H2O version .
1455	Lazy import a file or directory .
1456	Upload a file to a DataFrame .
1457	Import a CSV file into a DataFrame .
1458	Import a Hive table into a database .
1459	Import a SQL table from a H2O server .
1460	Import a SQL SELECT query from a H2O connection .
1461	Parse a raw H2O frame .
1462	Create a deep copy of a H2OFrame .
1463	Get a specific H2O model .
1464	Get a specific H2O grid
1465	Get a frame by ID .
1466	Download a POJO model .
1467	Download a H2OFrame to a CSV file .
1468	Download all logs from H2O .
1469	Export a frame to a file .
1470	Convert a H2OFrame to a list of H2OFrames .
1471	Wrapper around h2o . demos .
1472	Load a H2O dataset .
1473	Make metrics for predicted and actuals .
1474	Create a new key for a file .
1475	Upload a function to a custom metric file .
1476	Check that the frame id is valid .
1477	Return a human - readable string representation of the given size .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Use mojo_predict_csv to predict a model from a dataframe .
1481	Run Mojo prediction on a csv file .
1482	Decorator to mark a function as deprecated .
1483	Wait for the job to complete .
1484	Return a dictionary of deep features for each model .
1485	Print the summary of the models in the grid
1486	Show the grid search of the model .
1487	Get the hyperparameters of a model .
1488	Get a dictionary of hyperparameters for a model .
1489	Returns a new instance of the H2OGridSearch class .
1490	Calculate the F1 of each model .
1491	Returns a pandas dataframe of the importances of components in the model .
1492	Project the archetypes of the test data .
1493	Plot a screeplot of the model .
1494	Translate a name to its original form .
1495	De - indent text .
1496	Extract run information from a java log file .
1497	main entry point for extractGLRMRuntimeJavaLog . py
1498	Close the H2O session .
1499	Get the current session id .
1500	Start logging all API requests .
1501	Prepare data payload for JSON serialization .
1502	Prepare the payload for a file .
1503	Log the start of a transaction .
1504	Log the end of a transaction .
1505	Log a message to the log file .
1506	Process a H2O response .
1507	Print a message to stdout .
1508	Get the AutoML data for a project .
1509	Download a POJO from the leader .
1510	Download the mojo from the leader .
1511	Fit the model to the data .
1512	Scale X by means and stds .
1513	Apply the mean and standard deviation to each column of data .
1514	Extract true string from string_content .
1515	Find the node name in each line .
1516	Find the git hash branch in each line .
1517	Find the build timeout in each line .
1518	Find the build failure function .
1519	Find the build id in each line .
1520	Extract the job build URL from the URL string .
1521	Grab the java message from the temp file .
1522	Save the failed test info to a pickle file .
1523	Update the summary file .
1524	Write the content of a file to a file handle .
1525	Write a Java message to a text file .
1526	Load the java messages to ignore .
1527	Normalizes an enum constant .
1528	Find synonyms for a word .
1529	Poll the status of the job .
1530	Write the assembly to a POJO file .
1531	Fit H2OFrame to H2OFrame .
1532	Calculate the percentile of a sorted list .
1533	Returns a dictionary of default parameters .
1534	Return the actual parameters of the model .
1535	Get the deep features of a frame .
1536	Get the scoring history for this model .
1537	Print information about the H2O estimator .
1538	Returns the variable importances of the model .
1539	Returns the residual degrees of freedom of the model .
1540	Returns the coefficients of the model .
1541	Download a POJO file .
1542	Download the mojo from H2O .
1543	Save model details .
1544	Check that the actual and predicted rows are the same .
1545	Returns a list of all cross validation models .
1546	H2O gradient boosting estimator .
1547	H2O deep learning example .
1548	H2O Generalized Linear Estimator
1549	Wait for a keypress .
1550	Return the cell as a pandas . DataFrame .
1551	Print the contents of the table .
1552	Start an ICE server .
1553	Find the h2o . jar file .
1554	Yields paths to h2o . jar files .
1555	Get the hit ratio table .
1556	Returns a csv . DictWriter object .
1557	Convert a URI to a path .
1558	Convert a path to a URI .
1559	Parse the lines from the source code .
1560	Generate the API documentation for the given module .
1561	Return a list of all known modules .
1562	Write the API documentation to a directory .
1563	Write the toctree index file .
1564	Converts the table to a list of integers
1565	Loads the message dictionary from a file .
1566	Add a new message to the exclude list .
1567	Update g_ok_java_messages with the message_dict .
1568	Extract a message from a file .
1569	Saves the current dictionary to a pickle file .
1570	Print a dictionary of messages to ignore .
1571	Parse command line arguments .
1572	Print usage message and exit .
1573	Locate all . py files in a directory .
1574	Find the magic number in a file .
1575	Main entry point .
1576	Transform an H2OFrame .
1577	Add all failed tests to the summary_dict_all
1578	Extract print save intermittens from g_summary_dict_all
1579	Plot the ROC curve .
1580	Compute the confusion matrix of the H2O inomial model .
1581	Check if a Deep Water model is available .
1582	Trim the data back to the given month .
1583	Return a dictionary mapping class_name to a list of endpoints .
1584	Update the site forward .
1585	Return a JSON representation of the given data .
1586	Comment a user .
1587	Get credentials from the secret file .
1588	Like a user s feed .
1589	Like the media with a given hashtag .
1590	Check if a user is not a bot
1591	Read a list from a file .
1592	Set the schedule time for this message .
1593	Mark the message as deferred .
1594	Downloads the contents of the specified virtual WAN .
1595	Guess the service info from a path .
1596	Update an existing power shell command .
1597	Deletes an application definition by its ID .
1598	Create or update an application definition by ID .
1599	Returns the URI for the given request .
1600	Returns a _RequestsConnection object for the given request .
1601	Perform an HTTP request .
1602	Executes one or more script actions on a cluster .
1603	Check the availability of a front door .
1604	Deletes the specified vault from the specified location .
1605	Get the authorization server .
1606	Validate the request URI .
1607	Get CLI profile .
1608	Get Azure CLI credentials .
1609	Perform a resolve operation on an application .
1610	This API endpoint allows you to check the availability of a local name .
1611	Opens a new request .
1612	Sets the timeout for this request .
1613	Sets the value of a request header .
1614	Get all response headers for this request .
1615	Send a request to the server .
1616	Returns the status of the request .
1617	Return the status text of the request .
1618	Returns the response body of the request .
1619	Sets the client certificate .
1620	Send a PUT request to the server .
1621	Set a request header .
1622	Send the request body to the client .
1623	Get the response from the request .
1624	Get the readable id from the id_name .
1625	Get the name of the serialization for an element .
1626	Verifies that a person belongs to a face .
1627	Add a job to the batch .
1628	Get the properties of an entry from a node .
1629	Get the children of a node from a path .
1630	Find namespaces from a child element .
1631	Convert an XML string to a ServiceBusNamespace object .
1632	Converts an XML string to a ServiceBusRegion object .
1633	Converts an XML string to a NamespaceAvailabilityResponse object .
1634	Converts an XML string to a Metrics object .
1635	Replace the content of a runbook .
1636	Returns a paginated list of domain recommendations .
1637	Updates an existing Kb .
1638	Returns a list of member groups for the specified object .
1639	Build an Azure SDK package from a given PR number .
1640	Import a set of files into a resource group .
1641	Publish a runbook .
1642	Renew the session lock .
1643	This API endpoint allows you to replace word alterations .
1644	Adds a value to a secret resource .
1645	Retrieves the properties of a storage account .
1646	Gets the keys for the specified storage account .
1647	Regenerates the keys for the specified storage account .
1648	Creates a storage account .
1649	Updates a storage account .
1650	Deletes a storage account .
1651	Checks the availability of the specified storage account .
1652	Retrieves the properties of a service .
1653	Creates a new hosted service .
1654	Deletes a hosted service .
1655	Creates a new deployment .
1656	Deletes a deployment .
1657	Swaps a deployment for a service .
1658	Changes the configuration of a deployment .
1659	Updates the status of a deployment .
1660	Upgrade a deployment .
1661	Walks up the upgrade domain of a service .
1662	Reboots a role instance .
1663	Deletes one or more role instances from a service .
1664	Checks the availability of a service .
1665	List the certificates associated with a service .
1666	Get a service certificate .
1667	Adds a new service certificate .
1668	Deletes a service certificate .
1669	Gets the management certificate for a given thumbprint .
1670	Adds a management certificate to this subscription .
1671	Deletes a management certificate .
1672	Gets the properties of an affinity group .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	Get a list of all subscription operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associate a reserved IP address with a service .
1679	Disassociate a reserved IP address from a service .
1680	Retrieves a reserved IP address .
1681	Gets a persistent VM role .
1682	Creates a new virtual machine deployment .
1683	Adds a role to a service in a deployment .
1684	Updates a role in a deployment .
1685	Deletes a role from a service .
1686	Captures a role instance .
1687	Starts a role .
1688	Starts the specified roles .
1689	Restarts a role .
1690	Shuts down a role .
1691	Shuts down the specified roles .
1692	Adds a DNS server to a deployment .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	List the versions of a resource extension .
1696	Replicates a virtual machine image .
1697	Unreplicates a virtual machine image .
1698	Share a virtual machine image .
1699	Creates a new virtual machine image .
1700	Deletes a virtual machine image .
1701	Returns a list of all VM images .
1702	Updates a virtual machine image .
1703	Adds an OS image .
1704	Updates an existing OS image .
1705	Updates an existing OS Image from a reference to an existing one .
1706	Deletes an OS image .
1707	Gets the details of a specific data disk .
1708	Adds a data disk .
1709	Updates a data disk .
1710	Deletes a data disk .
1711	Adds a new disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Returns the policy states summary for the specified management group .
1715	Builds the receiver .
1716	Fetch a batch of messages from the server .
1717	Renew the session lock .
1718	Creates or updates a virtual machine scale set .
1719	Converts a virtual machine scale set to a single placement group .
1720	This operation allows you to change the content of a screen .
1721	Creates a new key .
1722	Import a key into a Vault .
1723	This operation allows you to update an existing key .
1724	Set the value of a secret .
1725	Sets the certificate issuer for the specified provider .
1726	Create a SharedAccessKey from a connection string .
1727	Get a subscription for a topic .
1728	Get a list of subscriptions for a topic .
1729	Send messages to the sender .
1730	Get a new sender for this entity .
1731	Get a receiver for this entity .
1732	Get a new receiver for the deadletter queue .
1733	Parse the response for an asynchronous operation .
1734	Perform a GET request .
1735	Perform an HTTP PUT request .
1736	Wait for an operation status .
1737	Gets the status of an operation .
1738	Add x - ms - version and content - type to the request headers .
1739	Build a Travis package from Travis . CI .
1740	Returns a paginated list of certificates for the specified vault .
1741	Returns a list of all available regions .
1742	Returns a list of all the namespaces in the service bus .
1743	Get a service bus namespace by name .
1744	Creates a new service bus namespace .
1745	Deletes a namespace .
1746	Checks the availability of a namespace .
1747	Returns a list of the topics with the given name .
1748	Returns a list of the notification hubs with the given name .
1749	Returns a list of the Relays with the given name .
1750	Get a list of metric rollups for a given queue .
1751	Get a list of metric rollups for a topic .
1752	Get a metric rollup notification from a service bus notification hub .
1753	Get a metric rollup relay .
1754	Create a new environment in the given directory .
1755	Create a new virtualenv with the given packages .
1756	Creates a new SQL Server .
1757	Sets the admin password for a server .
1758	Returns a list of quotas for the specified server .
1759	Gets the event logs for a given server .
1760	Creates a new firewall rule for a server .
1761	Updates a firewall rule .
1762	Deletes a firewall rule from a server .
1763	Returns a list of all firewall rules for a server .
1764	Returns a list of all service level objectives for a server .
1765	Creates a new database in the specified server .
1766	Updates a database .
1767	Delete a database .
1768	Returns a list of databases with the given name .
1769	Get a list of all agreements for a given domain .
1770	Close the message handler .
1771	Close the receiver .
1772	Get the current session state .
1773	Set the session state .
1774	Receive deferred messages by sequence number .
1775	Merge an existing reservation with an existing one .
1776	Validate the challenge .
1777	Purge a table from a workspace .
1778	Return an error handler for the given error .
1779	Creates a new queue .
1780	Deletes a queue .
1781	Gets a queue by name .
1782	Creates a topic .
1783	Gets information about a topic .
1784	Creates a new rule in the specified subscription .
1785	Gets a specific rule .
1786	Returns a list of all rules for a topic and subscription .
1787	Creates a new subscription for a topic .
1788	Get a specific subscription .
1789	Returns a list of subscriptions for the specified topic .
1790	Sends a message to a topic .
1791	Unlocks a message in a subscription .
1792	Sends a batch of messages to a queue .
1793	Unlocks a message in a queue .
1794	Receive a message from a queue .
1795	Receive a subscription message .
1796	Creates an event hub .
1797	Updates an existing event hub .
1798	Get an event hub .
1799	Sends an event to a hub .
1800	Add Content - Type and Content - Length to the request headers .
1801	Returns an authorization string that can be used to authenticate requests .
1802	Check if the token is expired .
1803	Get the token for the given host and path .
1804	Update the request URI query .
1805	Reset the service principal profile .
1806	Delete this message from the service bus .
1807	Unlocks the current message .
1808	Renews the lock for this message .
1809	Add headers to the request .
1810	Serialize the message as a batch body .
1811	Get cluster health statistics .
1812	Get cluster health using a cluster health policy .
1813	Unprovision an application type .
1814	This operation allows you to get a list of all RepairTasks .
1815	Submit a property batch for a given name .
1816	Raises an AzureHttpError if an error occurred .
1817	Start a web site network trace operation .
1818	Returns a list of all slot differences between a slot and a target slot .
1819	Perform a swap slot operation .
1820	Get events by type .
1821	Adds a new face to a large face list .
1822	Handle a redirect request .
1823	Create and start a migration in a resource group .
1824	Publish events to a topic .
1825	Move resources from one resource group to another .
1826	Set the profile to use .
1827	Returns the list of query results for the specified management group .
1828	Creates a new queue with the given name .
1829	Delete a queue .
1830	Creates a new topic .
1831	Deletes a topic from the queue .
1832	Creates a new subscription for a topic .
1833	Create a SharedAccessKey from a connection string .
1834	Get the properties of the queue .
1835	Check if the lock has expired .
1836	Create a new Azure Cosmos instance .
1837	Create a new subscription .
1838	Export request rate by interval .
1839	Return a list of results from the results queue .
1840	Add tasks to the results queue .
1841	Task collection thread .
1842	Build a configuration dictionary from a configuration dictionary .
1843	Reset the password of a user .
1844	Start an environment .
1845	Create a message from the response body .
1846	Converts a SB feed entry element to a Rule object .
1847	Convert an ElementTree element to a Queue object .
1848	Convert an ElementTree element to a Topic object .
1849	Convert an ElementTree element to a Subscription object .
1850	Creates a new certificate .
1851	Deletes a certificate .
1852	Get a client from the CLI profile .
1853	Given a client class and a configuration dictionary return the corresponding client object .
1854	Get a client from an auth file .
1855	Parse an enum results list .
1856	Get entry properties from an XML element .
1857	Deletes a certificate from a resource group .
1858	Returns a QueueClient for the specified queue .
1859	List all queues in the service bus .
1860	Get a topic client .
1861	Get a list of all available topics .
1862	Receive deferred messages by sequence number .
1863	Settle deferred messages .
1864	Get the details of a website .
1865	Creates a new website on the server .
1866	Deletes a website .
1867	Update a website .
1868	Restarts a website .
1869	Get a list of historical usage metrics for a website .
1870	Get the list of metric definitions for a given website .
1871	Get the publish profile XML for a website .
1872	Get the publish profile for a website .
1873	Update the policies for a registry .
1874	Creates a new Cloud Service .
1875	Checks the availability of a job collection .
1876	Gets a specific job collection .
1877	Complete a backup operation .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Reconnect to the server .
1881	Get a certificate from a publish settings file .
1882	Load cookies from the cache .
1883	Return the terminal width of a string .
1884	Get the cut prefix of a string .
1885	Print msg to stderr .
1886	Format a file size as a human readable string .
1887	Format the elapsed time in seconds .
1888	Create a status line .
1889	Print the progress of an iterator .
1890	Generate segment numbers for this playlist .
1891	Get all segments for this presentation .
1892	Wait for a given amount of time .
1893	Put a segment into the queue .
1894	Add a value to the queue .
1895	Send a request to a PV SWF .
1896	Extract the nonce from the HTTP result .
1897	Find the vpid for a given url .
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse a query string and validate it .
1901	Search a dictionary for a given key .
1902	Spawn a command and wait for it to finish .
1903	Iterate over tags in HTML .
1904	Parse an MPD manifest .
1905	Determine the encoding of a JSON sample .
1906	Parse a JSON response .
1907	Parse an XML response .
1908	Parse a list of cookies and add them to the request cookies .
1909	Parse HTTP request headers .
1910	Parse query parameters from cookies .
1911	Return the message as a string .
1912	Create a new LogRecord .
1913	Login to the LiveEdu account .
1914	Load a support plugin .
1915	Update the query string in a URL .
1916	Iterate over the tag chunks .
1917	Get all the required arguments for the given argument .
1918	Check the output of a file .
1919	Create an output object .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Create an instance of the output stream for the given plugin .
1923	Passthrough for output stream .
1924	Open a stream for reading and pre - buffering .
1925	Write a stream to the output stream .
1926	Read data from a stream .
1927	Handle a stream .
1928	Fetch streams from a plugin .
1929	Try to fetch streams with exponential backoff .
1930	Resolve a stream name from a dictionary of streams .
1931	Given a plugin and a dictionary of streams return a comma - separated list of valid stream names .
1932	Handle a URL for a streamlink plugin .
1933	Print the list of loaded plugins .
1934	Authenticates streamlink with Twitch .
1935	Load plugins from a list of directories .
1936	Setup command line arguments .
1937	Setup the console .
1938	Setup the HTTP session .
1939	Load all plugins in the plugins directory .
1940	Set up streamlink options based on command line arguments .
1941	Log the current versions of the system .
1942	Extract the stream id from the given text .
1943	Get an iframe from the given text .
1944	Set the value of an option .
1945	Get the value of an option .
1946	Set a plugin option .
1947	Get an option from a plugin .
1948	Resolve a URL .
1949	Load all plugins in the given path .
1950	Convert a string into a number of hours minutes and seconds .
1951	Validate that a string starts with the given string .
1952	Validate that the string ends with the given string .
1953	Validate that the given string is contained in the given string .
1954	Get the value of an attribute .
1955	Apply a function to each value in a dictionary .
1956	Apply a function to each value in a dictionary .
1957	Check if value is a valid URL .
1958	Find an element by XPath .
1959	Find all elements matching the given XPath .
1960	Find the URL to the player .
1961	Parse M3U8 data into a M3U8 object
1962	Determine if a command is a supported player .
1963	Dologin a user .
1964	Extract stream_id from html .
1965	Extract stream_info from html .
1966	Login to the server .
1967	Add a function to be applied to a key .
1968	Make a call to the API .
1969	Start a new session .
1970	Get information about a media .
1971	Create the Crunchyroll API .
1972	Compress a string .
1973	Return a string representation of a character .
1974	Format a string for printing .
1975	Read n bytes from the stream .
1976	Get the value of this code .
1977	Return the explanation of the code .
1978	Set the decode table .
1979	Set the length table .
1980	Print the code .
1981	Read a tuple from the stream .
1982	Return the explanation of the field at the given index .
1983	Get the value at the given index .
1984	Return the lower and upper bound of the value at the given index .
1985	Get the value at the given index .
1986	Return the mnemonic for the given index .
1987	Return the mnemonic for the given index .
1988	Compile the actions from the action table .
1989	Return the value of an action .
1990	Make a hex representation of the data at the given position .
1991	Process the binary stream .
1992	Read the length of the metablock .
1993	Check if uncompressed data is available .
1994	Read the number of block types for a given block type .
1995	Convert a list of values into a list of values .
1996	Read a prefix array .
1997	Return the monochrome color of an image .
1998	Return a polychrome representation of an array .
1999	Create a pyarrow . Table from a vaex . core . Dataset .
2000	Patch a function in Dataset . __hidden__ .
2001	Add virtual columns from cartesian velocity to pmvr
2002	Add virtual columns for a proper motion to vperpendicular motion .
2003	Return a graphviz representation of the expression .
2004	Count the number of values in the column .
2005	Apply a mapping function to each column in the DataFrame .
2006	Create an instance of the VaexApp .
2007	Open multiple files and return a dataframe .
2008	Create an astropy . table from a SAMP message .
2009	Create a DatasetAstropyTable from an astropy . table . Table
2010	Create a new dataframe from a dictionary of arrays .
2011	Create an array from a set of scalars .
2012	Create a vaex dataframe from a pandas dataframe .
2013	Read data from a CSV file .
2014	Create an instance of a REST server .
2015	Create a Zeldovich dataset .
2016	Concatenate a sequence of DataFrames .
2017	Create a virtual range from start to stop .
2018	Open a Vaex dataset .
2019	Evaluate an expression .
2020	Decorator for delayed functions .
2021	Returns a set of all columns that depend on this selection .
2022	Run a task in the executor .
2023	Sorts the list of pairs according to the given order .
2024	Get information about a file .
2025	Clear the figure .
2026	wait for the last plot to finish
2027	Open a document in the current platform .
2028	A context manager for writing to a file .
2029	Given a list of arrays split them and combine them into a single mask .
2030	Return a new NumPy array where each element in the array is not equal to the given expression .
2031	Compute the sum of the first occurrences of the given expression .
2032	Compute the mean of an expression .
2033	Calculate the sum of the values in an expression .
2034	Calculate the standard deviation of an expression .
2035	Calculate the variance of a sequence of values .
2036	Calculate the minimum value of an expression .
2037	Compute the minimum value of a binary expression .
2038	Calculate the median approximation of an expression .
2039	Create a Jupyter plot widget .
2040	Count the number of pixels in a given healpix expression .
2041	Plot healpix data .
2042	Plot a 3D plot of the volume .
2043	Get the dtype of an expression .
2044	Get the path to the private directory for this node .
2045	Get the current state of the column .
2046	Set the state of the table .
2047	Remove the virtual_meta . yaml file
2048	Write the virtual meta to disk .
2049	Write meta . yaml file .
2050	Create a new Subspace object from a list of expressions .
2051	Set the value of a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Return a dictionary representation of the table .
2055	Return a copy of this table .
2056	Convert to a Pandas DataFrame .
2057	Converts a DataFrame to an arrow table .
2058	Convert to an astropy . table . Table .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns from cartesian to polar .
2062	Add virtual columns from cartesian velocity to spherical .
2063	Add virtual columns from cartesian to polar .
2064	Add virtual columns polar velocity to cartesian coordinate system .
2065	Add virtual columns rotation .
2066	Add virtual columns from spherical to cartesian .
2067	Add virtual columns from cartesian to spherical .
2068	Add a virtual column to the table .
2069	Delete a virtual column .
2070	Add a variable to the table .
2071	Delete a variable .
2072	Return the last n elements of the sequence .
2073	Print the head and tail of the table .
2074	Returns a dictionary containing the number of features and their mean std and minmax .
2075	Print two tables .
2076	Set the current row .
2077	Return a list of column names .
2078	Return a copy of the DataFrame with all columns removed .
2079	Return a new DataFrame with only the given indices .
2080	Return a copy of the range .
2081	Returns a random sample of n elements from the dataset .
2082	Return a random split of the array .
2083	Split a sequence into multiple sequences of the same length .
2084	Sorts the array according to the given criteria .
2085	Materialize a virtual column .
2086	Undo a selection .
2087	Redo the current selection .
2088	Return True if the given selection can be reduced .
2089	Set the current selection to a boolean expression .
2090	Select rows with non - missing values .
2091	Drop rows with missing values .
2092	Select a rectangle on the current canvas .
2093	Select a box in a set of spaces .
2094	Select a circle .
2095	Select the ellipse at the given location .
2096	Select a lasso .
2097	Select the inverse of the current selection .
2098	Set a selection .
2099	Create a new selection and add it to the history .
2100	Find a valid column name .
2101	Return a list of all the root nodes in the graph .
2102	Return a graphviz representation of the data .
2103	Categorize a column .
2104	Return the ordinal encoding of a column .
2105	Return an instance of the Datasets class .
2106	Returns the length of the array .
2107	Horizontally stack another DataFrames .
2108	Concatenate two DataFrames .
2109	Export the table to an HDF5 file .
2110	Add a column to the dataframe .
2111	Patch a function in the DataFrame .
2112	Register a function as a closure .
2113	Fill missing values in an array or column .
2114	Return the day of week of the time series x .
2115	Return the day of year of a time series .
2116	Return True if x is a leap year .
2117	Return the year of the given time series .
2118	Return the number of months in the given time series .
2119	Return the name of the month of the given datetime .
2120	Return the day of the given time series .
2121	Return the day name of the given datetime .
2122	Return the week of year of a time series .
2123	Return the hour of a time series .
2124	Return the minute of a time series .
2125	Return the second value of a time series .
2126	Capitalize a string .
2127	Return a string sequence composed of x and other .
2128	Return True if x contains pattern .
2129	Count the number of occurrences of a pattern in a string .
2130	Find the first occurrence of sub in x .
2131	Get a string arrow at the given position .
2132	Find the first occurrence of sub in x .
2133	Convert a string to a column arrow .
2134	Return a copy of x with leading whitespace removed .
2135	Return a column . ColumnStringArrow that pads x to width with fillchar .
2136	Return a new column . ColumnStringArrow with x repeat repeats times .
2137	Return the index of the first occurrence of sub in x starting at start and ending at end .
2138	Return the index of sub in x starting at start and ending at end .
2139	Return a new column . ColumnStringArrow with x padded with fillchar .
2140	Return a copy of x with the trailing whitespace removed .
2141	Slice a string from start to stop .
2142	Return a copy of x with the contents of x stripped .
2143	Convert a string sequence to a column string arrow .
2144	Convert a string to a column arrow .
2145	Get the autotype of an array .
2146	Convert to a numpy recarray .
2147	Write a dictionary of properties to a file handle .
2148	Write a comment to a file .
2149	Write a property to a file .
2150	Iterate over all properties in a file .
2151	Universal newlines in file - like object .
2152	Show installed versions .
2153	This function will be called when a keyword argument is renamed .
2154	Set the numpy . fft library .
2155	Use librosa . beat . beat_track to track beats .
2156	Adjust the tuning of an audio file .
2157	Convert a sequence of frames into a sequence of samples .
2158	Convert a set of samples into a set of frames .
2159	Convert a time series to a set of frames .
2160	Convert a MIDI to a MIDI note .
2161	Convert Hz to Mel .
2162	Convert Mel to Hz .
2163	Returns a numpy array of n_fft frequencies .
2164	Calculate the frequencies for the CQT .
2165	Returns the number of mel frequencies between fmin and fmax
2166	Calculate the A - weighting factor for a set of frequencies .
2167	Compute a time series from a time series .
2168	Return an array of samples with respect to X .
2169	Perform a hybrid CQT filter on the input data .
2170	Compute the pseudo - Fourier transform of a time series .
2171	Compute the ICV - TFT Fourier Transform for a set of data .
2172	Compute the Fourier transform of the CQT data .
2173	Removes the last n_bins rows from the cqt_resp .
2174	Compute the CQT response .
2175	Return the number of early downsamples for the given number of octaves .
2176	Perform early downsampling of a signal .
2177	Calculate the accelerating cost of the dtw .
2178	Helper function for dtw_backtracking .
2179	Viterbi implementation .
2180	Discriminative Viterbi model .
2181	Generate a uniform transition matrix .
2182	Compute the transition loop .
2183	Generate a cycle transition matrix .
2184	Compute the local transition matrix for a given number of states .
2185	Detect onset strength .
2186	Compute the onset strength of a full - spectrum .
2187	Given a set of events and an energy array return the indices of the events that are on the backtrack .
2188	Calculate the onset strength for multiple samples .
2189	r Write a csv file with the given times and annotations .
2190	Write audio data to a WAV file .
2191	Get the color map for the given data .
2192	Plot a waveplot of a time series .
2193	Set the current image .
2194	Helper function to set the coordinates of a mesh .
2195	Check if axes is an instance of matplotlib . axes . Axes .
2196	Scale the axes according to the axes type .
2197	Compute the frequency - domain frequency - domain Fourier transform for a given number of samples .
2198	Return the Melholtz basis for the given frequency range .
2199	Helper function for coord_cqt_hz .
2200	Helper function for plotting chroma coordinates .
2201	Return a time series of the specified number of frames
2202	Estimate pitch tuning using piptrack .
2203	Create a piptrack object from a spectrogram .
2204	Compute the Hermitian Square Sample of a time series .
2205	Harmonic subspace .
2206	Compute the percussive value of y .
2207	Return the time - stretch of a time series .
2208	Pitch shift for a time series .
2209	Remix a series of data into a single series .
2210	Return True if the signal is nonsilent .
2211	Trim the signal to the specified length .
2212	Split a signal into two frames .
2213	Compute the phase vocoder of a time series .
2214	Convert amplitude to db .
2215	Calculate the spectrogram using stft .
2216	Harmonic - percussive separation .
2217	Decompose an NMF matrix .
2218	Apply self - similarity filter to the given self - similarity matrix .
2219	Helper function for the nearest neighbor filter .
2220	Compute the Melian - Leibler - Leibler weights .
2221	Generate a set of wavelengths for each chromosome .
2222	Return a function that takes a window specification and returns an array of floats .
2223	r Constant Q filter .
2224	r Calculate constant Q lengths .
2225	Convert from CQ to chroma .
2226	Get the bandwidth of a given window .
2227	Get a window of size Nx .
2228	r Multirate frequency banks .
2229	r Calculate the center frequency and sample rates for a given tuning .
2230	Fill an array with a window of length n_frames with a window of length hop_length .
2231	Compute the sum square of a window .
2232	Compute the diagonal of a window .
2233	Calculate the spectral centroid of a time series .
2234	Calculate spectral rolloff .
2235	Calculate the spectral flatness of a spectrogram .
2236	Calculate the polynomial features of a spectrogram .
2237	Calculate the zero crossing rate of a time series .
2238	Perform a chroma - stft filter on a spectrogram .
2239	r Chroma - Cqt filter .
2240	Calculate the Mel - Spectrogram .
2241	Compute the Jaccard distance between two integers .
2242	Return the index of the first candidate that overlaps the given query .
2243	Return the number of intervals that overlap the given intervals .
2244	Match two intervals .
2245	Match a list of events .
2246	Calculate the salience of a signal .
2247	Apply harmonic interpolation to an array of data .
2248	Interpolate 1D harmonics along an axis .
2249	Harmonics a 2D array .
2250	Load audio data from a file .
2251	Load audio data from a file .
2252	Convert a numpy array to a mono array .
2253	Resample an audio signal to a specific sampling rate .
2254	Compute the autocorrelation of y along an axis .
2255	Logarithm of the Poisson logarithm of the time series .
2256	Generates a set of clicks for a set of time series .
2257	Calculate the tone for a given frequency and duration .
2258	Calculate the Chirp - linear interpolation of a signal .
2259	Get a set of all files in a directory .
2260	Stretch an audio file .
2261	Parse command line arguments .
2262	Main demo function for HPSS .
2263	r Track the number of beats in a time series .
2264	Return a list of all the beats of the given onset envelope .
2265	Compute the Beat local score .
2266	Compute the beat track for a given period of time .
2267	Calculate the last beat of a cumulative score .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag matrix to a recurrence .
2270	Decorator to convert a timelag to a recurrence .
2271	Calculate the boundaries of a subsegment along an axis .
2272	Perform an agglomerative clustering on the data .
2273	Enhance a path .
2274	Use librosa to detect onsets .
2275	Frames a 1D numpy array into a single frame .
2276	Check that the audio data is valid .
2277	Validate that x is an integer .
2278	Fix the length of a numpy array .
2279	Sort a 2D array along an axis .
2280	Normalize the magnitude of a time series .
2281	Returns True if x is the local maximum along an axis .
2282	Picks a peak from an array .
2283	Sparsify the rows of a numpy array .
2284	Roll a sparse matrix along an axis .
2285	Convert a buffer to a float .
2286	Convert an index to a list of slices .
2287	Sync the data with the given index .
2288	Perform soft masking on a set of data .
2289	Return a tiny version of x .
2290	Write frames to video file .
2291	Read the next image from the stream .
2292	Get a single frame .
2293	Write frames from a CVT file .
2294	Calls func with a progress bar .
2295	Track the progress of a function in parallel .
2296	Flip an image .
2297	Rotate an image by a given angle .
2298	Given a bounding box and an image shape clip it .
2299	Scale a bounding box by the given scale .
2300	Crop an image with the given bounding boxes .
2301	Pad an image with an optional padding value .
2302	Converts an image to a multiple of the given divisor .
2303	Scale the size of a rectangle .
2304	Resizes an image .
2305	Resize an image to a new size .
2306	Rescale an image .
2307	Register a handler for the given file formats .
2308	Get a priority from a string or integer .
2309	Dequantize an array .
2310	Wrapper for cv2 . imshow
2311	Displays the bounding boxes of an image .
2312	Read a flow from a file .
2313	Write a flow to a file .
2314	Dequantize the flow between two numpy arrays .
2315	Load the state_dict from the given module .
2316	Load a model from a checkpoint file .
2317	Convert weights to CPU .
2318	Save a model checkpoint to a file .
2319	Initialize an optimizer .
2320	Initialize the logger .
2321	Returns the current learning rate .
2322	Register a hook .
2323	Run the workflow .
2324	Register hooks for training .
2325	Convert a video file using ffmpeg .
2326	Resize a video file .
2327	Cut video from start to end .
2328	Concatenate multiple video files into one .
2329	Read a list of items from a file .
2330	Read a dictionary from a file .
2331	3x3 convolution with padding
2332	Create an object from a dict .
2333	Read an image from a file .
2334	Decode an image from bytes .
2335	Write an image to a file .
2336	Convert grayscale image to grayscale image .
2337	Convert gray to bgr .
2338	Given an iterable of objects cast them to dst_type .
2339	Checks if a sequence is of the expected type .
2340	Slice a list according to a list of indices .
2341	Decorate a function to check that the specified prerequisites are met .
2342	Calculate the average of the values in the history .
2343	Perform a scatter operation on a list of devices .
2344	Return the value of a color .
2345	Returns the number of seconds since the last check for timer_id .
2346	Start the timer .
2347	Return the number of seconds since the start of the timer .
2348	Return the number of seconds since the last check .
2349	Show a single flow .
2350	Convert a 3D flow to RGB .
2351	Make a 3x3 color wheel .
2352	Calculate the accuracy of the output .
2353	Scatter the inputs to a list of target GPUs .
2354	Helper function for scattering inputs and kwargs .
2355	Perform the request and return the response .
2356	Return the JSON representation of the response .
2357	Return the content of the response as a string .
2358	Handle AWS callback .
2359	Send multiple requests to multiple URLs .
2360	Create a new request object .
2361	Start the master process .
2362	Normalize an Ansible task dict for v2 .
2363	Parse YAML line numbers .
2364	Returns the name of the wheel distribution .
2365	Get the basename of the archive .
2366	Add additional setup . cfg requirements to metadata_path .
2367	Convert an egg - info archive to a distribution archive .
2368	Create a message with the given text .
2369	Create a message with suggested actions .
2370	Create an activity with a list of attachments .
2371	Create a list activity .
2372	Create an activity with a list of attachments .
2373	Create a trace from an activity .
2374	Set the telemetry client .
2375	Read a value from the storage .
2376	Write changes to the storage .
2377	Delete a document from the container .
2378	Create a StoreItem from the result .
2379	Create a dictionary from a store item .
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fill a Qna event with information about the query results .
2385	Get a conversation reference for the given activity .
2386	Get the name of the step at index .
2387	Check if a channel supports suggested actions .
2388	Returns True if the given channel supports card actions .
2389	Get the channel id from the activity .
2390	Check if the given auth header is a valid token from the emulator .
2391	Create a HeroCard attachment .
2392	A list of all parameters .
2393	Returns a copy of this instance with a mirror of its definition .
2394	Returns the inverse of this gate .
2395	Set the value of the control register .
2396	Return a copy of this object .
2397	Add an if statement to the given string .
2398	Return a QASM expression for this parameter .
2399	Run all of the passsets in the given circuit .
2400	Apply a pass to a DAG .
2401	Return a list of all passes .
2402	Return a dictionary representation of the pass .
2403	Return a FlowController instance for the given passes and options .
2404	Create an UBase object .
2405	Return the parameters of a single gate .
2406	Return the matrix for a single gate .
2407	Return the einsum of a set of indices .
2408	Return a string representation of the einsum - velcmul index .
2409	Helper function for _einsum_matmul_index .
2410	Convert a circuit to a DAG circuit .
2411	Evaluate an exponential fit function .
2412	Compute the oscillator function .
2413	Plot the coherence of the data .
2414	Returns a list of the mean and standard deviation of raw_rb .
2415	Plot the survival probabilities of the data .
2416	Split a list of runs on parameters .
2417	Compose two U3 vectors .
2418	Convert from YZY to ZYZ .
2419	Validate that the input is a multi - qubit quantum state .
2420	Remove the background from the given image .
2421	Get the span of a gate instruction .
2422	Convert a circuit to an instruction .
2423	Run the transpiler on the given DAG .
2424	Find the best subset of a set of n_qubits .
2425	Add a barrier to the register .
2426	Calculate the average value of a dictionary of counts and an observable dictionary .
2427	Process a bit id node .
2428	Process a custom unitary node .
2429	Process a gate node .
2430	Process a CNOT node .
2431	Process a measure node .
2432	Process an if node .
2433	Create a DagOp from the given name .
2434	Return the duration of the given channels .
2435	Get the start time of a channel .
2436	Return the stop time of the given channels .
2437	Iterate over all instructions in this schedule .
2438	Check that the value is of the expected type .
2439	Dump additional data .
2440	Load additional data .
2441	Create a validation schema from a schema class .
2442	Validate an instance against the schema .
2443	Decorator to validate after model initialization .
2444	Return a dict representation of the model .
2445	Load a model from a dictionary .
2446	Apply the Fourier transform to a circular matrix .
2447	Compute the partial trace of a vector .
2448	Vectorize a density matrix .
2449	Devectorize a vectorized matrix .
2450	Convert a vector vector to a list of Rahoma vectors .
2451	Chops the elements of an array so that they are less than epsilon .
2452	Compute the outer product of two vectors .
2453	Calculate the concurrence of a state .
2454	Calculate the Shannon Entropy of a vector .
2455	Calculate the shannon entropy of a state vector .
2456	Calculate the mutual information of a state .
2457	Calculate the entanglement of a state - vector or 2 - qubit density matrix .
2458	Calculates the Entropy of an EOS basis .
2459	Flatten a schedule into a single schedule .
2460	Shift a schedule by the given time .
2461	Insert a child schedule into a parent schedule .
2462	r Append a child schedule to a parent schedule .
2463	Create an U3 gate .
2464	Returns the current status of the backend .
2465	Start the iteration .
2466	Returns a string representation of the time remaining to the completed iteration .
2467	Disassemble an Experiments object into a list of circuits .
2468	Calculate the Hamming distance between two strings .
2469	Create a Quaternion object from a rotation angle and axis .
2470	Create a quaternion from an euler angles .
2471	Return a copy of the quaternion normalized .
2472	Convert to a 3x3 matrix .
2473	Convert from Zyz to euler angles .
2474	Takes a dictionary of data and a number of number of labels and returns a dictionary of the values for each label .
2475	Plot a histogram of data .
2476	Check the type of the parameter .
2477	Raises an exception if j is out of range .
2478	Return True if mat is a square matrix .
2479	Check if a matrix is a diagonal matrix .
2480	Check if op is a symmetric matrix .
2481	Return True if mat is a Hermitian matrix .
2482	Check if a matrix is positive semi - definite .
2483	Return True if mat is an identity matrix .
2484	Check if a matrix is unitary .
2485	Convert a QuantumChannel to a Chai .
2486	Convert a QuantumChannel to a SuperOp .
2487	Convert to Kraus .
2488	Convert from Chi to Chi .
2489	Convert from PTM to PTM .
2490	Convert a numpy array to a stinespring array .
2491	Convert data to an operator .
2492	Helper function for _from_operator .
2493	Convert Stinespring to Operator representation .
2494	Convert from super - op to choi .
2495	Convert from Choi to SuperOp .
2496	Convert from kraus to choi .
2497	Convert from Choi to Kraus .
2498	Convert stinespring to kraus .
2499	Convert stinespring to choi .
2500	Convert kraus to stinespring .
2501	Convert from kraus to superoperator .
2502	Chi - to - Chi transformation .
2503	Convert from Choi to Chi .
2504	Reravels two matrices .
2505	Transform data from pauli to pauli .
2506	Raises QiskitError if input_dim is not an n - qubit channel .
2507	Hide tick lines and labels in the given axis .
2508	Set the label convention .
2509	Remove all points vectors and annotations .
2510	Add a list of vectors .
2511	Add an annotation .
2512	Render the figure .
2513	Plot the front of the sphere .
2514	Show the figure .
2515	Return the two - qubit Kak of a unitary matrix .
2516	Return the top of the layer .
2517	Return the MID of the layer .
2518	Return the bot of the layer .
2519	Return the length of the message .
2520	Returns a list of parameters for a label instruction .
2521	Generate a label for a box instruction .
2522	Return the latex representation of the parameter .
2523	Compile a set of circuits into a runnable qobj .
2524	Add a deprecation warning filter .
2525	Return information about the local hardware .
2526	Check if a socket has a connection .
2527	Check the status of an HTML job .
2528	Return a constant time series .
2529	Calculate the square of a time series .
2530	Calculate the triangle of a time series .
2531	Calculate the cosine of a time series .
2532	r Fix the width of a gaussian .
2533	r Calculate the Gaussian of a time series .
2534	Derivative of a Gaussian function .
2535	r Calculate the square of a time series .
2536	Create a default pass manager .
2537	Create a default pass manager simulator .
2538	Returns True if the given register is a valid register .
2539	Return a copy of this circuit with the mirror of its arguments .
2540	Returns the inverse of the circular graph .
2541	Append an instruction onto this context .
2542	Attach an instruction to the stack .
2543	Add a register to the circuit .
2544	Check that there are no duplicate qubits .
2545	Check that qargs are valid .
2546	Check that the arguments are valid .
2547	Check if two circuits are compatible .
2548	Return the QASM representation of the extension .
2549	Draw the circuit .
2550	Returns the number of non - barrier or snapshot gate operations .
2551	Returns the total size of all regulatory registers .
2552	Count the number of operations .
2553	Return the number of connected components .
2554	Returns a copy of the circuit with the given parameters bound to the given dictionary .
2555	Bind the given parameter to the given value .
2556	Draw a pulse from a set of samples .
2557	Given a layout and a set of gates and a coupling map find the minimum number of swaps .
2558	Given a list of gates and a coupling map return a list of mapped gates .
2559	Calculate the layout distance between a set of gates .
2560	Return the score of a step .
2561	Copy metadata from source_dag to target_dag .
2562	Transform a gate for the given layout .
2563	Return a list of DAGNodes representing the swap ops from an edge .
2564	Run the transpiler on the given DAG .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge from one qubit to another .
2567	Return a subgraph of the graph with the given nodes .
2568	List of all physical qubits in the graph .
2569	Return True if the graph is weakly connected .
2570	Compute the distance matrix for the coupling graph .
2571	Compute the distance between two physical qubits .
2572	Use qiskit . compiler . transpile instead .
2573	Add a cu1 gate .
2574	Return the inverse of the instruction .
2575	Apply a Q - if instruction to all instructions in the sequence .
2576	Apply a classical and a value to every instruction in the classical .
2577	Subscribe a callback to an event .
2578	Dispatch an event to all registered subscribers .
2579	Unsubscribe a callback from an event .
2580	Publish an event to the broker .
2581	Add a Initialize instruction to the register .
2582	Define the state of the circuit .
2583	Convert a disentangler gate to an uncompute circuit .
2584	Calculate the Bloch angle of a pair of complex objects .
2585	Creates a multiple of the given target_gate .
2586	Return True if the given value is a virtual register .
2587	Return a copy of this layout .
2588	Combine this layout into an edge map .
2589	Return a new ToffoliGate with two control points .
2590	Insert a schedule into the schedule .
2591	Check if a property is fenced .
2592	Convert a list of gates to a list of indices .
2593	Run the Transpiler on a DAG .
2594	Update the state of a multi - qubit gate .
2595	Returns a list of Pauli objects for the specified number of qubits .
2596	r Create a Pauli object from a string .
2597	Initialize from a boolean vector .
2598	r Compute the product of two Pauli vectors .
2599	Converts a QuantumInfo to an operator .
2600	Convert the circuit to an instruction .
2601	Update the z - axis of the Qiskit object .
2602	Update self . _x with x .
2603	Insert paulis at the given indices .
2604	Appends pauli_labels to paulis and returns self .
2605	Delete a set of qubits from the basis .
2606	Generate a random set of qubits .
2607	Create a Pauli object from a single Pauli label .
2608	Get the measure outcome of a given qubit .
2609	Add a sample measure to the state vector .
2610	Add a QASM measure to the model .
2611	Add a QASM reset to the given qubit .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Get the state vector .
2615	Validate whether to use measure sampling .
2616	Run the Aer job .
2617	Run a single job .
2618	Ensure that the classical registers are all zeros .
2619	Validate the initial unitary .
2620	Initialize the unitary .
2621	Get the unitary .
2622	Run a single job .
2623	Validate that the circuit is valid .
2624	Return True if obj is a bit register .
2625	Run the transpiler on the given DAG .
2626	Check if this interval overlaps with the given interval .
2627	Shift the interval by the given time .
2628	Return a new Timeslot shifted to the given time .
2629	Return the start time of the given channels .
2630	Return the stop time of the given channels .
2631	Check if a timeslot collection is mergeable with another .
2632	Returns a new TimeslotCollection merged with the given timeslots .
2633	Shift the timeslot collection by the given time .
2634	Report as a comment or issue .
2635	Return a dictionary of values for each label in the pauli group .
2636	Display the state of a paulivec plot .
2637	Add an RZZ gate to the circuit .
2638	Add a cswap gate .
2639	Initialize the backend_prop .
2640	Create a program graph from a DAG .
2641	Select the next program edge .
2642	Select the item with the highest cost .
2643	Select the highest reliab of the given program qubit .
2644	Run the transpiler on the given DAG .
2645	Returns a list of all instructions in this gate .
2646	Inverse the gate .
2647	Apply the Q - if operator to each gate in the list .
2648	Apply a classical if operator to each gate .
2649	Return True if the matrix is unitary .
2650	Conjugate operator .
2651	Transpose operator .
2652	Return a power operator .
2653	Return the shape of the output and input dimensions .
2654	Convert an instruction to an operator .
2655	This function is used to update the DAG circuit for a given mapper layer .
2656	Separate a bitstring into a single string .
2657	Format level 0 memory .
2658	Format level one memory .
2659	Format a level - 2 memory list .
2660	Format a dictionary of counts .
2661	Format a state vector as a complex number .
2662	Format a unitary matrix .
2663	Decorator for functions that require the job to be submitted .
2664	Submit the job to the executor .
2665	Returns the status of the job .
2666	Return True if this frequency range includes lo_freq .
2667	Plot Bloch multivector .
2668	Get the default qubit los from the user config .
2669	Get the default measurement frequencies for each channel .
2670	Unroll the circuit to the given basis .
2671	Plot the state of a Q - sphere .
2672	Returns the k - th k - th n - th k - th k
2673	Return the index of the k - th element of the list .
2674	Plot a Pauli state .
2675	Returns a list of unique IBMQ backends .
2676	The op attribute of the node .
2677	Sample a constant pulse .
2678	Return a new pulse with a zero duration .
2679	Return a new pulse that is the square of the given amplitude and period .
2680	Sample a Sawtooth pulse .
2681	Sample a triangle pulse .
2682	Return a new pulse that changes the value of the cos function at the given duration .
2683	Return a new pulse that is the sin of the given duration in Hz .
2684	r Samples a Gaussian pulse .
2685	r Calculate the derivative of a Gaussian .
2686	Return a new pulse with a Gaussian square .
2687	Return the real distance between two axes .
2688	Print a string representation of the QREG node .
2689	Return an instance of backend_cls .
2690	Rename a register .
2691	Remove all nodes with the given name from the graph .
2692	Add a QuantumRegister instance to the circuit .
2693	Add a ClassicalRegister instance to the DAG .
2694	Add a wire to the graph .
2695	Check that the condition is valid .
2696	Return a list of all the bits in a condition .
2697	Add an op node to the multi graph .
2698	Apply an operation back to the graph .
2699	Check that all of the registers in keyregs are present in edge_map .
2700	Check that the wire_map is consistent .
2701	Map the condition to the corresponding value in the wire_map .
2702	Add the back registers from the given DAG .
2703	Compose the back of the circuit .
2704	Check that the given list of wires is valid .
2705	Make a mapping between the pred and succ edges of a node .
2706	Return the full pred_succ_map and full succ_map for the input circuit .
2707	Return a list of all topological nodes in the graph .
2708	Iterate over all edges in the multi - graph .
2709	Return a list of all op nodes in the MultiGraph .
2710	Returns a list of all Gate nodes in the graph .
2711	Returns a list of named nodes in the multi - graph .
2712	Returns a list of all two - qubit gates .
2713	Returns the list of predecessors of the given node .
2714	Returns the list of predecessors of the given node .
2715	Get all ancestors of the given node .
2716	Returns a list of all successors of the given node .
2717	Remove an op node from the graph .
2718	Remove all ancestors of the given node .
2719	Remove all descendants of a node .
2720	Remove all non - ancestors of a node .
2721	Remove all nondescendants of a node .
2722	Returns a list of all layers in the multigraph .
2723	A generator that yields all the serial layers of the circuit .
2724	Iterate over the multigraph layers .
2725	Return a set of all runs that match the given namelist .
2726	Get all nodes that are connected to the given wire .
2727	Count the number of operations in the graph .
2728	Return the properties of the tensor as a dictionary .
2729	Create a TomographyBasis object from a basis set .
2730	Add a Pauli measurement gate to the circuit .
2731	Set the tomography of a set of qubits .
2732	Process the tomography set .
2733	Create tomography circuits from a QuantumCircuit object .
2734	Get the tomography data from the results .
2735	Calculate marginal counts for a set of meas_qubits .
2736	Fit the tomo data using the specified reconstruction method .
2737	Compute the least square fit of the tomo data .
2738	Compute the projector of a list of operations .
2739	Computes the inverse of a Tomo - linear transformation .
2740	Calculate the wizard of a matrix .
2741	Calculate the Wigner data .
2742	Perform measuring on the given circuit .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Calculates the angle of the euler angles of a unitary matrix .
2746	Simplify an U gate .
2747	Enlarge with ancilla layout .
2748	Return an HTML table showing the Qubits .
2749	Build the job history tab .
2750	Plot the history of a list of jobs .
2751	Draw the Pulse .
2752	Add a Cu3 gate .
2753	Builds a bell circuit .
2754	Transpiles a set of circuits .
2755	Run a transpile circuit .
2756	Transpile a set of experiments using the given backend .
2757	The first drive channel in the queue .
2758	Return the control channel of the pulse .
2759	Return the first measurement channel in the queue .
2760	Acquire a channel from the queue .
2761	Set the input state of a circuit .
2762	Assemble a qobj from a list of experiments .
2763	Remove the qiskit logger .
2764	Generate HTML and JavaScript for a state hint on plot .
2765	Process the fidelity of two channels .
2766	Set the input data .
2767	Remove the current lexer from the stack .
2768	Push the current lexer onto the stack .
2769	Run the circuit on the given DAG .
2770	Get the Qobj conversion method for the given instruction .
2771	Convert an acquire instruction into a QObjModel .
2772	Convert a frame change instruction .
2773	Convert a persistent value instruction .
2774	Convert a drive instruction .
2775	Convert a snapshot instruction into a QObject .
2776	Update the annotations of a pulse .
2777	Generates a function that takes a continuous pulse and returns the sampled pulse .
2778	Filter a list of backends based on a set of filters .
2779	Resolve a backend name .
2780	Convert a DAG to a QuantumCircuit .
2781	Make a dictionary representation of an observable matrix .
2782	Update the current symtab .
2783	Verify that a symbol is declared as a bit in the gate .
2784	Verify that the expression list is valid .
2785	Verify that obj is used as a gate or opaque call .
2786	Verify that the given object is valid .
2787	Verify that the object is a list of Registers .
2788	Find the column of the token in the input string .
2789	Parse the debug flag .
2790	Parse data and return a QASM object .
2791	Run the parser .
2792	Parse the QASM file .
2793	Add a Crz gate at theta .
2794	Get the basis state of a bitstring .
2795	Compute the projector of a state matrix .
2796	Calculate the purity of a state vector .
2797	Set the property_set for each wire in the graph .
2798	Returns a widget for the given backend .
2799	Update the status of all backends .
2800	Generate the widgets for the jobs pending progress bar .
2801	Run the CX run on the given dag .
2802	Get a Qiskit backend .
2803	Bipartite shape .
2804	Get the register specs for the given bit labels .
2805	Truncate a floating point number .
2806	Return a LaTeX representation of the image .
2807	Get the number of columns and height of the image .
2808	Get the size of the beamer page .
2809	Load a JSON schema from a file .
2810	Get a jsonschema validator .
2811	Load the default schemas and validators .
2812	Validate a JSON dict against a given schema .
2813	Format the causes of an error .
2814	Calculates the majority of two points .
2815	Compute the unmajority of two points .
2816	Generate a LaTeX source for a QCircuit .
2817	Draw a Matplotlib Drawer for the given circuit .
2818	Generate a random unitary operator .
2819	Generates a random density matrix .
2820	Generate a Ginibre matrix .
2821	Returns a random density of the Hilbert space .
2822	Generate a random density bures .
2823	Returns a list of all custom unitary calls .
2824	Return a new SuperOp with the power of n .
2825	Compose a sub - system of self and other .
2826	Convert an instruction to a SuperOp .
2827	Run the circuit on the given DAG .
2828	Serialize a set of circuits into a Qobj .
2829	Unroll all 3q or more gates in the given DAG .
2830	Run the decomposition on the given DAG .
2831	Define the definition of this gate .
2832	Raises ValidationError if value is not iterable .
2833	Check that the value is of the correct type .
2834	Set the absolute error tolerance .
2835	Set the RTOL value .
2836	Reshape input_dims and output_dims .
2837	Returns a tuple of the input dimensions .
2838	Returns a tuple of the output dimensions .
2839	Return a copy of the current instance .
2840	Return a power of n .
2841	Return a tuple of dimensions for use in Qiskit .
2842	Multiply a tensor with a contracted matrix .
2843	Deserializes the value .
2844	Raises a ValidationError if the data is invalid .
2845	Check if the value is of the expected type .
2846	Compute the fidelity between two states .
2847	Compute the SVD of an array using a function .
2848	Return the inverse of this snapshot .
2849	Set the name of the label .
2850	Return True if self is unitary False otherwise .
2851	Convert to an operator .
2852	Convert a QuantumChannel to an Instruction .
2853	Initialize the transformer .
2854	Sort enum for model .
2855	Monkey - patch strptime_patched .
2856	Get the locale map for the given languages and locales .
2857	Get a list of all available locales .
2858	Check if a list of tokens is valid .
2859	Split a string into a list of tokens .
2860	Parse a date string and return a date object .
2861	Parse a date string and return a datetime . time object .
2862	Returns True if the given date string is a valid date string .
2863	Translate a date string .
2864	Parse a date string with a list of formats .
2865	Get an ammo generator for this stepper .
2866	Convert a Java exception to a network error code .
2867	Convert Java exception to HTTP code .
2868	Read the configuration from the config file .
2869	Compose the configuration for the phantom . conf file .
2870	Get information about the stream .
2871	Compose the configuration for the stepper .
2872	Log stdout and stderr .
2873	Expands a time string into a number of seconds .
2874	Read configuration from config file .
2875	Prepare the stepper .
2876	Get the stpd filename .
2877	Read the cached stepper info from disk .
2878	Write the stepper info to disk .
2879	Make the stpd - file .
2880	Create a Composite from a list of RPS schedule .
2881	Calculate the rps at the given time .
2882	Execute a command and return the exit code .
2883	Decode monitoring data into a list of points .
2884	Make a list of points for a given label .
2885	Publish a status value .
2886	Count the number of matched codes in a dictionary .
2887	Stop the feeder .
2888	Feed stpd files to the task queue .
2889	Initialize logging for tank .
2890	Add user options to self . options .
2891	Configure the plugin with the given options .
2892	Graceful shutdown .
2893	Collect data and stats from the queue .
2894	Notify listeners of aggregated data .
2895	Get a marker of the specified type .
2896	Parse a duration string into a number of seconds .
2897	Start the agent on localhost .
2898	Start the agent .
2899	Try to discover the JMeter UDP port .
2900	Add jmeter components to the configuration .
2901	Terminate the process .
2902	Read the stats data from a file .
2903	Create a custom criterion from a string .
2904	Get the monitoring config from an XML file .
2905	Create the startup config file if it doesn t exist .
2906	Check the disk usage .
2907	Check memory usage .
2908	Get the size of the terminal .
2909	Get the right line from the widget output .
2910	Truncate line_arr to max_width .
2911	Render the left panel .
2912	Render the screen .
2913	Add info widget .
2914	Fill rectangle with empty lines .
2915	Return the length of the given line .
2916	Create a load plan .
2917	Returns a string representation of the level .
2918	Add info widget to screen
2919	Make a request to the writer endpoint .
2920	Load plugins from config .
2921	Search for a plugin of the given type .
2922	Returns a list of plugins of the given type .
2923	Collect a file to the artifacts directory .
2924	Add an artifact file to the collect .
2925	Create a temporary file with the given suffix and prefix .
2926	Load configuration files .
2927	Write the current configuration to a file .
2928	Get a list of all options in a section .
2929	Find all sections with the given prefix .
2930	Decode a chunk of stats data .
2931	Get information about the device .
2932	Install the monitoring agent .
2933	Poll for data from agents .
2934	Send collected data to all listeners .
2935	Detect the telegraf and monitoring configuration .
2936	Handle data items .
2937	Decode agents data into a list of dictionaries .
2938	Subscribe to the given channels .
2939	Start the event loop .
2940	Close the websocket connection .
2941	Perform one request .
2942	Submit an order .
2943	Get an order by ID .
2944	Get a single position by symbol .
2945	Get a list of all assets .
2946	Get an asset by symbol .
2947	Create a joining subplan .
2948	Check if an object is a dict .
2949	Check if an object is a dict .
2950	Construct an event - logger .
2951	Construct a json - event - record - logger .
2952	Create a Config object from a config file .
2953	Get the configuration for a repository .
2954	Format a configuration dictionary for GraphQL .
2955	Get a pipeline definition by its name .
2956	Returns a list of all registered pipelines .
2957	Get the next event from the queue .
2958	Execute a pipeline through a queue .
2959	Wait for all processes to finish .
2960	Creates a new instance of the given dagster type .
2961	Builds the execution plan .
2962	Builds a new plan for the given pipeline definition .
2963	Build a dependency definition for a sub - pipeline .
2964	Return the solid with the given name .
2965	Construct a list of publish comands .
2966	Create a new version and commit it .
2967	Create a PassthroughContextDefinition for the given context .
2968	Create an input selector schema for a config_cls .
2969	Decorator for generating output selector schema .
2970	Write a block of text .
2971	Download a file from S3 .
2972	Upload a file to S3 .
2973	Wrap a DagsterUserCodeExecutionError in a DagsterUserCodeExecutionError .
2974	Creates a new directory if it doesn t exist .
2975	Context manager for user - defined code .
2976	Creates a DagsterLog for the given run_config and pipeline_def .
2977	Whether the Dagster step has been successfully executed .
2978	True if all steps have been skipped .
2979	Return a dictionary of all transformed values .
2980	Return the transformed value for the given output name .
2981	Return the step failure data .
2982	A configuration dictionary with typed fields .
2983	Check if the config value is a valid dataset .
2984	Check if the config value is a valid table .
2985	Execute the core transform for the given inputs .
2986	Decorate an existing type as a Dagster type .
2987	Decorator for creating a resource definition .
2988	Create a new EventV2 .
2989	Coalesce the execution steps in the given execution plan .
2990	Returns a dictionary of connection parameters .
2991	Get a new connection to the database .
2992	Create an instance of the cursor class .
2993	Close the database connection .
2994	Make a model from model_dict .
2995	Convert a list of dictionaries into a list of MDL objects .
2996	Returns the form field for the array field .
2997	Convert a value to a model container .
2998	Apply core filters to a queryset .
2999	Compute the NFPS of a uniform distribution .
3000	Compute the real number of Fourier factors for a set of counts .
3001	Compute the best set of partitions based on the domain sizes and nfps .
3002	Compute the optimal number of partitions based on the counts .
3003	Calculate c1 and c2 for a1 and a2 .
3004	Initialize the slots .
3005	Return the number of bytes needed to store this hash .
3006	Serialize this MinHash into a buffer .
3007	Deserialize a LeanMinHash from a buffer .
3008	Update self . hashvalues with b .
3009	Merge two MinHash objects .
3010	Return the union of two MinHash objects .
3011	Index a set of entries .
3012	Iterate over the keys in the cache that match the given hash .
3013	Calculate the minimum hash of the input vector .
3014	Remove a key from the dictionary .
3015	Update the register with the value b .
3016	Count the number of non - zero values .
3017	Merge two HyperLogLog objects .
3018	Clear the register .
3019	Calculate the APK score .
3020	Compute the mean k - nearest - neighborhood of two arrays .
3021	Sort the hashtables in ascending order .
3022	Returns a list of k keys for the given minhash .
3023	Close all open connections .
3024	Create an ordered storage for the given configuration .
3025	Create an unordered storage object for the given configuration .
3026	Get the user details from the JWT .
3027	Set the process to CONNECT .
3028	Select text from a list of strings .
3029	Parse a scoped selector into a scope and selector tuple .
3030	Parse an import or include statement .
3031	Parse the value .
3032	Advance the parser to the next line .
3033	Parse a configurable reference .
3034	Augment an exception with a message and reraise it .
3035	Return a markdown representation of an operative config string .
3036	Called after a session is created .
3037	Ensure that a function is wrapped in a function .
3038	Decorate a function or class .
3039	Return a string representation of the given value .
3040	Clears the configuration . If clear_constants is True all constants are cleared .
3041	Bind a parameter to a Gin config .
3042	Get the value bound for a given binding key .
3043	Returns True if the function fn_or_cls has a parameter named arg_name .
3044	Get the argument spec for the given function .
3045	Given a function and a list of positional arguments return the names of the positional arguments .
3046	Returns a list of all positional parameter names for the given function .
3047	Get a dictionary of default values for a function .
3048	A context manager that allows you to change the scope of a configuration file .
3049	Decorate a function or class with a configurable name .
3050	Return a string representation of an operative configuration .
3051	Parse a config file .
3052	Register a file reader function .
3053	Parse a config file .
3054	Parse config files and bindings .
3055	Parse a value into a ConfigParser object .
3056	Finalize the configuration .
3057	Recursively iterate over nested values .
3058	Iterate over all references in the given configuration .
3059	Set a constant .
3060	Add constants from enum . Enum .
3061	Returns a list of selectors that match the given partial_selector .
3062	Get all matches that match the partial_selector .
3063	Return the minimal selector for the given complete selector .
3064	Transform a search query into a query string .
3065	Parse the Retry - After HTTP header .
3066	Validate property value .
3067	Return the property description as a dictionary .
3068	Set the value of the field .
3069	Return the thing at the given index or None if it doesn t exist .
3070	Initialize things and hosts .
3071	Set default CORS headers .
3072	Check if the request is for a valid host .
3073	Get a single thing .
3074	Called when a message is received .
3075	Perform actions on a thing .
3076	Remove an action from a thing
3077	Start the server .
3078	Return the action description as a dictionary .
3079	Start the action .
3080	Mark the thing as completed .
3081	Return the event description as a dictionary .
3082	Get the IP address .
3083	Return a list of all IPv4 and IPv6 addresses .
3084	Set the value .
3085	Notify of external update .
3086	Return the description of the resource as a dictionary .
3087	Sets the href prefix for all properties and actions .
3088	Returns a dictionary of property names and their descriptions .
3089	Returns a list of action descriptions .
3090	Returns a list of event descriptions for the specified event .
3091	Add a property to the resource .
3092	Remove a property .
3093	Get the value of a property .
3094	Returns a dictionary of all properties .
3095	Set the value of a property .
3096	Get an action by name and id .
3097	Add an event to the queue .
3098	Add an event to the list of available events .
3099	Perform an action .
3100	Remove an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add a subscriber for an event .
3104	Remove a subscriber for an event .
3105	Notify subscribers of a property change .
3106	Send an action status notification to all subscribers
3107	Send an event to all subscribers .
3108	Annotate the model with the given annotations .
3109	Update the model with the given fields .
3110	Bulk insert .
3111	If the conflict_target or conflict_action is True the primary key will be returned . Otherwise the primary key will be returned .
3112	Creates a new instance of the model and returns it .
3113	Build a PostgresInsertCompiler for the given rows .
3114	Check if a field is magical .
3115	Returns a list of fields to insert and a list of fields to update .
3116	Called when a model is created or updated .
3117	Called when a model is deleted .
3118	Returns an expression that evaluates whether a field is not None .
3119	Return a new HStoreValue with resolved values .
3120	Return the SQL representation of the HSTORE statement .
3121	Return a copy of this object with the same alias as relabels .
3122	Add join conditions to the query .
3123	Check if the given field is an HStoreField .
3124	Insert a list of values into the table .
3125	Creates the required constraint for the given field in the given table .
3126	Rename a required constraint in the HSTORE table .
3127	Drop a required constraint from the HSTORE .
3128	Returns the name of the required constraint for the given field .
3129	Create SQL statement for creating a new index .
3130	Create a custom command class .
3131	Get the database backend base class .
3132	Create the hstore extension .
3133	Returns a string representation of the given value .
3134	Form the returning part of the query .
3135	Returns a list of SQL statements to insert into the database .
3136	Rewrite an insert statement .
3137	Rewrite an insert update statement .
3138	Rewrite insert_nothing SQL statement .
3139	Build the conflict target .
3140	Get the model field for the given name .
3141	Format a field name .
3142	Format the value of a field .
3143	Creates a unique constraint for the given field on the given model .
3144	Rename a unique constraint in the HSTORE .
3145	Drop a unique constraint from the HSTORE .
3146	Generate a unique constraint name for a given field .
3147	Iterate over the uniqueness keys of a field .
3148	Add a condition to the query .
3149	Return the SQL to be executed .
3150	T - distance 95 conf level .
3151	Calculate the variance of two pooled samples .
3152	Compute the T - score between two samples .
3153	Check if two samples are significant .
3154	Topologically sort a list of nodes .
3155	Returns a generator of n - queens of the given number of elements .
3156	Play this node with the given board .
3157	Select a random position from the unexplored list .
3158	Move a random move in the board .
3159	Filter out benchmarks that are not Python 2 - only .
3160	Expand a benchmark name to a list of bench names .
3161	Generate a table of strings .
3162	Initialize benchmarks .
3163	Get the domain of the curve .
3164	Fetch items from the channel .
3165	Parse raw_posts into a list of post objects .
3166	Get information about a specific user .
3167	Fetch all items for a given category .
3168	Fetch items from the feed .
3169	Setup the command parser .
3170	Fetch items for a given category .
3171	Get a list of bugs .
3172	Get comments for a set of bug ids .
3173	Get the history of a bug .
3174	Get a list of attachments for a given bug .
3175	Get all the notes for an issue .
3176	Fetch merge requests from GitLab .
3177	Get the merge notes for a given merge .
3178	Get all merge versions for a given merge .
3179	Retrieve all merges for this project .
3180	Get the content of a merge .
3181	Retrieve all versions of a merge .
3182	Get the content of a version of a merge .
3183	Retrieve the notes for the specified item .
3184	List the emojis of an item .
3185	List the emojis of a note .
3186	Calculate the time to reset the rate limit .
3187	Fetch items from GitLab .
3188	Initialize the rate limit for this project .
3189	Setup the command parser for GitLab .
3190	Fetch the latest messages for a given category .
3191	Return the metadata id for the given item .
3192	Returns the number of members of a conversation .
3193	Get information about a channel .
3194	Get information about a specific user .
3195	Setup command parser for Slack .
3196	Return the timestamp at which the metadata was updated on .
3197	Parse a buglist from a CSV file .
3198	Parse bugs details from raw XML stream .
3199	Parses a bug activity .
3200	Logout from Bugzilla .
3201	Return the XML metadata for this bug .
3202	Returns a list of all bugs that have changed since the given date .
3203	Get a list of bugs .
3204	Get the activity of a bug .
3205	Fetch events for a given category .
3206	Fetch all events in the group .
3207	Get all events for a group .
3208	Get the comments for an event .
3209	Returns a generator that yields all the VRSVP responses for the specified event .
3210	Fetch a question from the server .
3211	Fetch comments for a question .
3212	Builds the question object from the html_question .
3213	Get all questions for a given resource .
3214	Get a single HTML question .
3215	Get comments for a post .
3216	Parse the question container .
3217	Parses the answers from an HTML question .
3218	Parses the number of html pages in the question .
3219	Parses the user - info element .
3220	Fetch items from Gerrit .
3221	Parse reviews from raw json data .
3222	Fetch all reviews from Gerrit 28 .
3223	Get the server version .
3224	Get the reviews of the last item .
3225	Retrieve the next group item to retrieve .
3226	Executes the given command and returns the response .
3227	Execute a command from the archive .
3228	Execute a gerrit command from the remote server .
3229	Setup command parser for Gerrit .
3230	Fetch the data for an issue .
3231	Fetch all attachments for an issue .
3232	Fetch all the messages for an issue .
3233	Fetch all activities for an issue .
3234	Fetch user data
3235	Get information about a user .
3236	Get the raw text of an issue .
3237	Get a collection of items for a given issue .
3238	Get the URL for the project .
3239	Fetch items from a collection .
3240	Get a paginated list of groupsio subscriptions .
3241	Find the group id for this group
3242	Make a GET request and return the response .
3243	Setup command parser for Groups . io .
3244	Generate a UUID from a list of arguments .
3245	Fetch an archive from the given backend .
3246	Fetch items from archive .
3247	Find all backends for the given top_package .
3248	Fetch all items in the specified category .
3249	Fetch items from an archive .
3250	Filter classified data .
3251	Parse command line arguments .
3252	Add authentication arguments to the parser .
3253	Set the arguments for the archive command .
3254	Add the output arguments to the parser .
3255	Run the backend .
3256	Initialize the archive manager .
3257	Return the timestamp of the metadata updated on the item .
3258	Parse a Mbox file into a list of dictionaries .
3259	Fetch messages from mailing_list and parse them .
3260	Copy the mbox to a temporary file .
3261	Check if the message is valid .
3262	Convert case dict to dict .
3263	Get a message from the mailbox .
3264	Fetch items for a given category .
3265	Fetch items from the repository .
3266	Parse a git log from a file .
3267	Add the git path to the parsed_args .
3268	Setup the command parser .
3269	Parse the stream .
3270	Clone a repository into a directory .
3271	Returns the number of objects in the repository .
3272	Check if this repository is detached .
3273	Update the git repository .
3274	Sync the repository .
3275	Get a list of all revisions in the repository .
3276	Get the git log for this repository .
3277	Show the contents of this repository .
3278	Fetch the pack from the remote repository .
3279	Read the list of commits from the pack file .
3280	Update references in the git repository .
3281	Return a list of GitRef objects for this repository .
3282	Update a ref .
3283	Execute a git command in a separate thread .
3284	Read stderr lines from the process .
3285	Execute a git command .
3286	Fetch tweets for a given category .
3287	Fetch items from the API .
3288	Returns a generator of all the tweets that match the given query .
3289	Setup the command parser .
3290	Fetch HITS items .
3291	Fetch items from the API .
3292	Parse Google Search Hits response .
3293	Fetch hits for a list of keywords .
3294	Return the updated_at timestamp of a metadata item .
3295	Return the metadata category for the given item .
3296	Fetch pull requests for a given date range .
3297	Fetch repo info .
3298	Get all the reactions for an issue .
3299	Get the reactions for a given issue comment .
3300	Return a list of issue assignees .
3301	Get the requested reviewers for a pull request .
3302	Get a list of commit hashes for a pull request .
3303	Get the list of pull review reactions for a given comment .
3304	Get user information .
3305	Get the list of reactions for an issue .
3306	Get a list of all issues .
3307	Get a generator of all pulls in the repository .
3308	Get the name of the current repository .
3309	Fetch the requested reviewers for a pull request .
3310	Get a list of commits for a pull request .
3311	Get a list of all replies for a pull review comment .
3312	Get information about a user .
3313	Get a list of organizations for a github user .
3314	Get the rate limit for the given token .
3315	Get the rate limits for the tokens .
3316	Choose the best API token to use .
3317	Check if tokens need to be checked .
3318	Update the current rate limit .
3319	Initialize the metadata table .
3320	Store an entry in the archive .
3321	Retrieve an entry from the archive .
3322	Create an archive .
3323	Make a hash code for a request .
3324	Verify that the archive is valid .
3325	Load metadata from the metadata table .
3326	Count the number of rows in a table .
3327	Create an archive .
3328	Remove an archive .
3329	Search for archived archives .
3330	Search for archived archives .
3331	Search for all files in the directory .
3332	Check if a file has a compressed file type
3333	Generate a range of months between two dates .
3334	Convert an email . message . Message to a dictionary .
3335	Remove invalid XML characters from raw_xml .
3336	Convert an XML string to a dictionary .
3337	Parse issues from a raw JSON string .
3338	Get a list of issues from a given date .
3339	Get information about an issue .
3340	Get information about a user .
3341	Make a call to the Redmine API .
3342	Fetch all items in the given category .
3343	Fetch data from repository
3344	Get the content of a repository .
3345	Given a dict of custom fields and a dict of fields return a dict of custom fields .
3346	Filter custom fields .
3347	Parse the issues page .
3348	Get a list of issues from a given URL .
3349	Returns a list of all issues for a given date .
3350	Get a list of comments for an issue .
3351	Get the list of fields .
3352	Fetch all items for a given category .
3353	Get a list of jobs from Jenkins .
3354	Get a list of builds for a job .
3355	Parse questions from raw_page .
3356	Get a list of questions for a given date .
3357	Setup command parser for StackExchange .
3358	Fetch items from MediaWiki .
3359	Get the max date of the reviews .
3360	Fetch pages from the server .
3361	Get all pages in a namespace .
3362	Get a list of recent changes for the given namespaces .
3363	Fetch messages for a given category .
3364	Parse a JSON response and yield messages .
3365	Filter a message by a list of chats .
3366	Get a list of all updates .
3367	Fetch all the articles in the group .
3368	Add offset to metadata .
3369	Parse an email article .
3370	Wrapper for _fetch_from_remote .
3371	Fetch article data .
3372	Fetch data from remote server .
3373	Fetch data from the archive .
3374	Create an HTTP session .
3375	Set up the rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit from the response headers .
3378	Parse a supybot log file .
3379	Retrieve all supybot archives that are older than from_date .
3380	List all supybot archives .
3381	Parse a supybot message stream .
3382	Parse a supybot timestamp line .
3383	Parse a supybot message .
3384	Fetch all the topics for a given category .
3385	Parse the topics page .
3386	Get information about a topic .
3387	Send a POST request .
3388	Fetch a list of tasks from the server .
3389	Parse a JSON string containing a list of tasks .
3390	Parse a JSON string containing a list of users .
3391	Returns a generator that yields all tasks that have been modified since the given date .
3392	This interface is used to manage transactions .
3393	Get a list of users .
3394	Get a list of phids .
3395	Make a call to the Phabricator Conduit API
3396	Return the metadata id for the given item .
3397	Parse contents summary from raw_json .
3398	Get a list of contents for a given date range .
3399	Get a historical version of a content .
3400	Parse the result of the operation .
3401	Returns the capabilities URL for the given service .
3402	Read an XML document from the given URL .
3403	Convert a string or bytes object into an etree .
3404	Parse the MeasurementTimeseries XML result .
3405	Build the URL with the given path .
3406	Get all elements of a given complex type .
3407	Construct a schema from a list of elements .
3408	Returns the URL to describe a feature type .
3409	complex_input_with_reference - Complex data input with reference
3410	The movie_list endpoint allows you to retrieve a list of movie objects .
3411	Returns a list of TV objects .
3412	Get a list of all movies .
3413	Get information about a resource .
3414	Get a list of alternative titles .
3415	Get credits .
3416	Get a list of external ids .
3417	Get a list of keywords .
3418	Get a list of recommendations .
3419	Get a list of release dates .
3420	Get a list of releases .
3421	Get a list of translations .
3422	Get a list of similar movies .
3423	Get a list of all reviews .
3424	Get a list of changes .
3425	Get a list of upcoming users .
3426	Get the current playing state .
3427	Retrieve popular data .
3428	Get the top rated data .
3429	Get a list of account states .
3430	Set the rating of a user .
3431	Retrieve the credits for a movie .
3432	Get a list of TV credits .
3433	Get information about the credit id .
3434	Retrieve the TV of the current user .
3435	Get information about the server .
3436	Get a list of all available movies .
3437	Get information about the session .
3438	Get a list of all movies in the watchlist .
3439	This API endpoint allows you to create a new token .
3440	The token_validate_with_login endpoint allows you to validate a token .
3441	Get a new session .
3442	Get a new guest session .
3443	Get a list of rated movies .
3444	Get the status of an item .
3445	Creates a new list .
3446	Remove an item from the collection .
3447	Remove all items from the list .
3448	Get a list of content ratings .
3449	Get a list of similar entities .
3450	Get information about the on the air .
3451	Get information about the season number of a series .
3452	Returns a list of credits for each season .
3453	Get a list of external ids for each season .
3454	Get information about the season number and episode number .
3455	Returns the number of credits for each season and episode .
3456	Get a list of all the external IDs for each season and episode .
3457	Set attributes to values .
3458	Get information about a movie .
3459	Get a collection of objects .
3460	Get the current TV .
3461	Get information about a person .
3462	Get company information .
3463	Get a specific keyword .
3464	Perform a multi GET request on the server .
3465	Normalize a string .
3466	Takes a list of reference strings and counts the number of n - grams in each reference .
3467	Create a set of n - gram counts for a set of n - grams .
3468	Return the Eratosthenes - Fourier Transform of a number .
3469	Align source and target texts .
3470	r Get all descriptors in a module .
3471	Register a JSON object to the registry .
3472	r Register a descriptor with the registry .
3473	Print the given string to the given file .
3474	r Check if the given descriptor is a class .
3475	Return a JSON - ready representation of the function .
3476	Get the coordinate of this descriptor .
3477	r Calculate the atomic standard deviation of a sphere .
3478	r Returns the surface area of the rads .
3479	r Construct a VDW from a Molecule object .
3480	Create a Descriptor from a JSON object .
3481	r Fill missing values with a given value .
3482	r Return a copy of the molecule with missing values removed .
3483	r Returns a generator of tuples of keys and values .
3484	r Convert to a dictionary .
3485	r The name of the field .
3486	Log the call to the function .
3487	Decorator to make a function synchronized .
3488	Print a progress message to stderr .
3489	Print a message to stdout .
3490	Print a message and exit with the given status .
3491	Get a temporary file name .
3492	Set the name of a temporary file .
3493	Clean up temporary files .
3494	Return the fixed path for this URL .
3495	Returns a list of legal parameters for the given method .
3496	Merge all legal params from self . opt into kargs .
3497	Add options to the given parser .
3498	Terminate all tasks in the queue
3499	Add a task to the queue .
3500	Wait for all workers to finish .
3501	Record the number of tasks processed .
3502	Read S3 keys from environment variables .
3503	Read S3 keys from commandline .
3504	Read the S3 keys from the config file .
3505	Initialize S3 keys .
3506	Connect to s3
3507	List all buckets in S3 .
3508	Walk an S3 bucket .
3509	Recursively walk the given directory and return a list of all files in the directory .
3510	Expand a list of S3 source files .
3511	Upload a single file from source to target .
3512	Put files from source to target .
3513	Create a bucket .
3514	Update the privilege of the target file .
3515	Print the contents of a source file .
3516	Download a single file from source to target .
3517	Get files from source to target .
3518	Copy a single file from source to target .
3519	Copy files from source to target .
3520	Delete all files in a directory .
3521	Recursively walk a directory and return a list of relative paths .
3522	Sync files from source to target .
3523	Calculate the md5 hash of a file .
3524	Get the MD5 of the file .
3525	Create a directory if it doesn t exist .
3526	Check if the remoteKey has the same md5 as the local one .
3527	Return True if path matches filter_path .
3528	Recursively walk an S3 object .
3529	Add the object to the result list .
3530	Get the permissions of a file .
3531	Look for an object in S3 .
3532	Read a chunk of data from a file .
3533	Upload a file to S3 .
3534	Verify that the downloaded file has the correct size .
3535	Write a chunk of data to a file .
3536	Copy an object from source to target .
3537	Run a command .
3538	Raises an exception if the format is not valid .
3539	Pretty print a list of objects .
3540	List buckets .
3541	Create a new bucket .
3542	Upload files to s3 .
3543	Get a list of files from s3
3544	Print the contents of a file or directory .
3545	Handle dsync command .
3546	Copy files from source to target .
3547	Move files from source to target .
3548	Delete a file from S3 .
3549	S3 DU handler .
3550	Get the total size of a bucket .
3551	Match a date against a value .
3552	Match a time value .
3553	Return a tuple of datetime . timedelta and value .
3554	Check if value is a dict .
3555	Discover Xiaomi gateways .
3556	Create a Multicast Socket and listen for messages .
3557	Get data from the hub .
3558	Push data to callbacks .
3559	Get the key used to encrypt the token .
3560	This function is called when an exception is raised .
3561	Add the pyramid configuration to the config .
3562	Ensure that the log handler is set .
3563	Get the current request .
3564	Initialize a Rollbar instance .
3565	Decorator for lambda functions .
3566	Report a message to Rollbar .
3567	Search for items by title .
3568	Create the agent log .
3569	Build the person data from the request .
3570	Add lambda context data to data .
3571	Add request data to Rollbar payload .
3572	Check if a frame should be added to the stack .
3573	Builds the request data from the given request .
3574	Build server data .
3575	Build the payload to be sent to the API .
3576	Main entry point for Rollbar .
3577	Compose a Hangul character from two strings .
3578	Decompose a Hangul letter into its components .
3579	Return True if the target string contains a jongung letter .
3580	Attach a jong to a word .
3581	Check if the given node is inside an except statement .
3582	Check if the given node is inside a lambda function .
3583	Get all elements of a node .
3584	Check if the given node can be clobbered in an exception .
3585	Return True if the given node is a super node .
3586	Return True if the given node is an error .
3587	Check if the given node is a default argument .
3588	Return True if node is a function decorator .
3589	Check if the given node is an ancestor of the given frame .
3590	Return the parent node of the given node .
3591	Decorator to add messages to the checks_msgs attribute .
3592	Collect all fields in a format string .
3593	Get an argument from an astroid . Call node .
3594	Return True if the given node inherits from the standard exception module .
3595	Check if the given handler raises an exception of the given type .
3596	Check if a function is decorated with a property .
3597	Check if a function is decorated with any of the given qnames .
3598	Find a try except wrapper node .
3599	Check if the given node is a try - except block .
3600	Return a list of exception handlers for the given node .
3601	Return True if the given node ignores the given exception .
3602	Check if a class is abstract .
3603	Try to infer the value of the given node .
3604	Return the type of the given node .
3605	Check if a function is registered in singledispatch .
3606	Check if postponed evaluation is enabled for the given node .
3607	Return a list of fully qualified names of a module .
3608	Get the absolute name of a module from an astroid import node .
3609	Return a string representation of a tree definition .
3610	Write the graph to the given file .
3611	Check that the import node is valid .
3612	Check an import from node .
3613	Check if the node is at the first non - import node .
3614	Record the name of the imported module .
3615	Check the imports order .
3616	Check if relative import is enabled .
3617	Add an imported module to the graph .
3618	Check if a module is deprecated .
3619	Check if a module is a preferred one .
3620	Report external dependencies .
3621	Return a dictionary mapping importee to a set of importers .
3622	Get the default list of options .
3623	Insert default options into sys . argv .
3624	Return True if the given node is visible .
3625	Get the visit and leave callbacks for the given node .
3626	Visit the given node .
3627	Check that all messages have the same checker .
3628	Check if an astroid . Call node is valid .
3629	Check whether the node is a boolean datetime .
3630	Check that the mode argument is valid .
3631	Handle a message .
3632	Display the messages in JSON format .
3633	Get the title of a node .
3634	Set the default options .
3635	Return True if the node is a builtin node .
3636	Add a class to the diagram .
3637	Get all ancestors of the given node .
3638	Return a list of nodes that are associated with the given class .
3639	Add a class node to the class diagram .
3640	Leave the project .
3641	Visit an import from node .
3642	Create a ClassDiagram object for the given class .
3643	Returns a list of Diadef diagrams for the given project .
3644	Return True if owner is ignored .
3645	Return a list of names that are similar to the given attribute name .
3646	Return True if node has no member owner_name .
3647	Check if the given node has a parent of the given type .
3648	Check if a name is used as a variadic .
3649	Return True if the given node has no context for the given variadic name .
3650	Visit an attribute node .
3651	Check if an assignment is possible .
3652	Check if the call is uninferable .
3653	Check for type errors .
3654	Iterate over all interfaces of the given node .
3655	Create an Astroid project from a list of files .
3656	Add a unique identifier to the node .
3657	Set the locals_type attribute of the function node .
3658	Visit an astroid . AssignName node .
3659	Handle assignattr_type .
3660	Handle import nodes .
3661	Visit an import from node .
3662	Determine if a module should be included in a context .
3663	Called when a module is imported .
3664	Get ANSI code .
3665	Colorize a message using ANSI escape codes .
3666	Register the reporters for the given linter .
3667	Handle a message .
3668	Print the given layout to stdout .
3669	Handle a message .
3670	Open a graph with the given attributes .
3671	Write a node .
3672	Writes an edge between two nodes .
3673	Check if the given node is a new format .
3674	Process a non - raw string token .
3675	Add a section to the output .
3676	Format the evaluation section .
3677	Write a table .
3678	Write a default table .
3679	Add a renamed message .
3680	Register messages from the given checker .
3681	Register a message .
3682	Check if the msgid is unique for the given symbol .
3683	Raises an InvalidMessageError if the two symbols are the same .
3684	Raises an InvalidMessageError if the msgid and other_msgid are the same .
3685	Get the message definitions for the given message id or symbol .
3686	Get the display string for a message .
3687	Print a help message for a list of messages .
3688	List all registered messages .
3689	Called when the builder is initialized .
3690	Return the number of CPU cores .
3691	Add messages stats to a report section .
3692	Temporarily fix sys . path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option in the config file .
3696	Register a checker .
3697	Disable all reporters .
3698	Enables and disables Python 3 porting .
3699	Returns a list of all registered checkers .
3700	Returns a list of all registered checker names .
3701	Returns a list of all registered checkers sorted by priority .
3702	Expand a list of modules .
3703	Set the current module .
3704	Check an astroid module .
3705	Report the evaluation of the code .
3706	Help message callback .
3707	Print full documentation .
3708	List all messages .
3709	List all registered checker groups .
3710	Normalize text to line_len and indent .
3711	Get the module and frameid of the given node .
3712	Safely decode the given line using the given encoding .
3713	Return True if base_name is in the blacklist .
3714	Register plugins in the given directory .
3715	Add a comment to the given string .
3716	Format an option value .
3717	Format an INI section .
3718	Format a list of options into an ini stream .
3719	Insert a child at the given index .
3720	Append a child node to this node .
3721	Return a list of all parents of this node .
3722	Apply the given layout to the output stream .
3723	Get the content of a table .
3724	Compute the content of the given layout .
3725	Collect all the lines in the block of a module .
3726	Handle an ignored message .
3727	Register a report callback .
3728	Create a report section .
3729	Add stats to self . stats .
3730	Return the name of the setter property of the given node .
3731	Get the setters property of the given node .
3732	Check if a function returns something .
3733	Return a list of possible exception types for the given node .
3734	Add a message to use - symbolic - message - instead
3735	Check the encoding of the module .
3736	Process the given list of tokens .
3737	Check if the given import is a future import .
3738	Check if the given statement is a for - else branch .
3739	Return the method that is overridden by the given name .
3740	Get extra info about an unpacking node .
3741	Detect if the given node is in the global scope of the given frame .
3742	Return True if name_node is assigned locally .
3743	Mark a node as consumed .
3744	Check if node is a global variable .
3745	Return True if the given node should be ignored .
3746	Return True if the node has a homonym in the upper function scope .
3747	Check for unpacking .
3748	Check for metaclass declarations .
3749	Get a list of all packages in a directory .
3750	Install a Python package .
3751	Run install_lib .
3752	Add the similarities report to the given section .
3753	Main entry point for hdi .
3754	Append a stream to the list of linesets .
3755	Compute a list of all possible simulations .
3756	Display a list of similar lines .
3757	Find common lines between two lineset objects .
3758	Iterate over all the common sims of the linesets .
3759	Iterate over the stripped lines .
3760	Create a dictionary mapping each line number to a list of line numbers .
3761	Return True if definition is equivalent to call .
3762	Check if two nodes have the same attribute .
3763	Check if two parameters have the same default value .
3764	Check if two methods have different parameters .
3765	Try to infer the result of a call .
3766	Add a node to the accessed scope .
3767	Check if this is a class definition .
3768	Check if the MRO of the given node is consistent .
3769	Check that the bases of the given node are valid .
3770	Check if the given node is a method .
3771	Check if the function has a super delegation .
3772	Leave a function definition .
3773	Check if the node is a slot node .
3774	Check if the node is a function .
3775	Check the accessed members of the given node .
3776	Check if a class is abstract .
3777	Check the signature of a method .
3778	Check if the given node is a mandatory method parameter .
3779	Return True if body is an astroid . Raise node .
3780	Check if the given node has a bad exception context .
3781	Check if the function is a super method .
3782	Display all reports in a layout .
3783	Check if the given node is a typing namedtuple .
3784	Check if the given node is an enum class .
3785	Check if the given node is a dataclass .
3786	Add stats to self . stats .
3787	Check for too many ancestors and instance attributes .
3788	Leaves a classdef node .
3789	Visit an If node .
3790	Check whether the given node has enough boolean expressions .
3791	Check that the docstring is not empty .
3792	Format the object with the given template .
3793	Check if the token at index is a trailing comma .
3794	Return True if node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid . If node is an astroid .
3795	Check if node is simplifiable .
3796	Check if stop iteration is inside a generator .
3797	Check if an exception is a subclass of StopIteration .
3798	Check for raising stopiteration in generator next call .
3799	Check if a function has nested blocks .
3800	Return a dict of all duplicated instance types .
3801	Check if the node is an instance of one of the duplicated classes .
3802	Check if the given node is a chained comparison .
3803	Return True if node is an astroid . AndOp and False otherwise .
3804	Check if the node has a consistent return statement .
3805	Returns True if the given node ends with a return statement .
3806	Visit an astroid . For node .
3807	Check if Graphviz is available .
3808	Run the diadefs command .
3809	Write the packages of the given diagram .
3810	Write all the classes in the diagram .
3811	Set the printer to use .
3812	Set the printer to use .
3813	Return True if the message may be emitted .
3814	Format the help message .
3815	Get environment variables .
3816	Run pylint . lint on a config file .
3817	Run epylint and return stdout and stderr .
3818	Get a list of cycles for a given vertex .
3819	Get the source code .
3820	Generate the graph .
3821	Print section and options to stream .
3822	Register a message by its id .
3823	Disable a message .
3824	Enable a message .
3825	Return a list of symbols for a message .
3826	Check if a message is enabled .
3827	Add a message to the report .
3828	Print the full documentation for all checkers .
3829	Print the documentation for a given checker .
3830	Return the number of indentation characters in the given line .
3831	Get the indent hint line for the given bar positions and bad position .
3832	Return the indentation of the token at index idx .
3833	Handle the start of a line .
3834	Get the valid indentations for the token at the given index .
3835	Return a _ContinuedIndent object representing the hanging indentation after the given bracket .
3836	Return a _ContinuedIndent instance for a continuation inside a bracket .
3837	Push a token onto the token stack .
3838	Add a new line to the report .
3839	Check for superfluous parentheses .
3840	Check if the token at i is a valid type annotation .
3841	Check the spacing of the equals operator .
3842	Check if the token is surrounded by a space .
3843	Visit the default statement .
3844	Check if this is a multi - statement line .
3845	Check if a line is valid .
3846	Check the indentation level of a string .
3847	Check if the given node is in the iterating context .
3848	Check if the given node is a conditional import .
3849	Check if the given node is a builtin .
3850	Check if the node s value is an indexable exception .
3851	Check if an attribute is deprecated .
3852	Check if an exception handler is used in an except block .
3853	Check if the node is an astroid . Raise node .
3854	Find the path to the . pylintrc file .
3855	Validate value according to optdict .
3856	Expand the default value of an option .
3857	Match a long option .
3858	Register an option provider .
3859	Callback for setting provider options .
3860	Set the value of a global option .
3861	Generate a configuration file from the configuration providers .
3862	Load the config file .
3863	Load the configuration from the command line .
3864	Add a help section to the parser .
3865	Return the help text of the command line .
3866	Load the default values for all options .
3867	Get the attribute name for an option .
3868	Get the definition of an option .
3869	Yields a list of all the options grouped by section .
3870	Return True if func is a method call .
3871	Check if the given node represents a complex format string .
3872	Visit the logging module .
3873	Visit an import from node .
3874	Add logging modules to _logging_names .
3875	Check if the given node is a log method .
3876	Check if the format string is valid .
3877	Check if the given node is inside a loop .
3878	Return the parent node of the given break node .
3879	Check if an astroid . For or astroid . While loop exits early .
3880	Returns a list of property classes and a list of property names .
3881	Determine the name type of a function .
3882	Report stats by node type .
3883	Check if a node is redefined by a decorator .
3884	Return True if call is a single argument call .
3885	Check if node is a starred function .
3886	Check for nonlocal and global variables .
3887	Check if function is abstract .
3888	Check if the given node has a else statement .
3889	Check if the given node is not in a loop .
3890	Open the file for reading .
3891	Check if the given node is a string expression .
3892	Visit a lambda function call .
3893	Check if an assert is on a tuple .
3894	Check for duplicate keys .
3895	Check if a statement is unreachable .
3896	Check if the given node is not in a finally block .
3897	Check if the given node is reversed .
3898	Check if an assignment is allowed .
3899	Check if the given name is valid .
3900	Check if the node has a docstring .
3901	Check if the literal is a literal comparison .
3902	Add a subgraph to the graph .
3903	Parse a sub - graph .
3904	Check the complexity of a module .
3905	Add a checker to the graph .
3906	Recursively walk the given AST node .
3907	Add a relationship between two objects .
3908	Returns the relationship with the given relation type .
3909	Get the names of the attributes of the given node .
3910	Return a list of all methods in the given node .
3911	Add an object to the diagram .
3912	Return a list of class names from the given list of AST nodes .
3913	Return a list of all ClassDef objects in this AST node .
3914	Return the class with the given name or raise KeyError .
3915	Return a list of all modules in the AST .
3916	Returns the module with the given name or raises KeyError if no such module exists .
3917	Get the module with the given name .
3918	Add a node as a dependency from another module .
3919	Delete the grant from the cache .
3920	Return a query object for the model .
3921	Get user by username and password .
3922	Get an access token or refresh token .
3923	Store a token in the session .
3924	Add a new grant to the session .
3925	Get a client with the given code .
3926	Prepare a request for sending to the server .
3927	Initialize the extension with the given app .
3928	Create an OAuthRemoteApp instance with the given name .
3929	Make an HTTP request .
3930	Create an OAuth2 authorization token .
3931	Handle an OAuth 1 response .
3932	Handle an OAuth2 response .
3933	Return an authorized response .
3934	Decorate a function to return an authorized response .
3935	Returns a tuple containing the application name and the hashed token .
3936	Make a client with the given token .
3937	Create an OAuth client from a token .
3938	Temporarily set the insecure_transport environment variable .
3939	Confirm an authorization request .
3940	Decorate a function to return a request token response .
3941	Get the client secret for a given client key .
3942	Get the secret for a request token .
3943	Get the secret for an access token .
3944	Get the default realms for a client .
3945	Get the realms of a token .
3946	Get the redirect URI for the given token .
3947	Get the RSA key for the given client key .
3948	Validate a client key for a request .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate the timestamp and nonce for a request .
3952	Validate a redirect URI for a client .
3953	Return True if the token is valid for the given realms .
3954	Validate a verifier for a token .
3955	Verify the request token .
3956	Verify that the token is valid for the given realms .
3957	Save the access token for the given request .
3958	Save a request token .
3959	Save a verifier for a token .
3960	Return the error URI for the provider .
3961	Confirm an authorization request .
3962	Verify the signature of a request .
3963	Get client credentials from request .
3964	Returns whether or not the client has required authentication .
3965	Authenticate a client .
3966	Authenticate the client with the given client ID .
3967	Get the original scopes of the refreshed token .
3968	Confirm the given scopes for the given refresh token .
3969	Get the default redirect URI for a client .
3970	Get the default scopes for a client .
3971	Invalidate an authorization code for a client .
3972	Save an authorization code for a client .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate a client id .
3976	Validate a grant code for a client .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Check if the response type is allowed for the client .
3980	Validate a list of scopes for a given client .
3981	Validate a username and its password .
3982	Revoke an access token .
3983	Update the QQ API request data .
3984	Convert dictionary keys to strings .
3985	Change the weibo authorization header .
3986	Register to an OAuth session .
3987	Create a remote application .
3988	Extract parameters from request .
3989	Convert text to bytes .
3990	Decode a base64 encoded string .
3991	Create a Response object with the given headers and body and status .
3992	Get a list of cached clients .
3993	Add a remote application .
3994	Add a remote application .
3995	Check if an exception is raised .
3996	Check if the verification has been successful .
3997	Callback for load_privatekey .
3998	Check if load private key callback is incorrect .
3999	Check if load_privatekey callback is wrong type .
4000	Check if the CRL is revoked .
4001	Check for duplicate X509 Revoked objects .
4002	Create a crypto . X509Req object from a private key .
4003	Create an X . 509 certificate .
4004	Make a decorator for functions that require the given flag .
4005	Load a set of verify locations from a CA file .
4006	Set the password callback .
4007	Set the certificate chain file for this SSL context .
4008	Set the SSL certificate file to use .
4009	Set the certificate for this SSL context .
4010	Add an extra chain certificate to the SSL context .
4011	Use a private key file .
4012	Set the private key for this SSL context .
4013	Load the client CA list from a file .
4014	Set the verify depth of the SSL context .
4015	Load the DH parameters from a file .
4016	Set the cipher list for this SSL context .
4017	Set the client CA list .
4018	Add a client CA certificate authority .
4019	Set the SSL_CTX_set_tlsext_servername_callback function .
4020	Set the use_srtp flag on the SSL context .
4021	Set the callback function to be called when a NPN message is received .
4022	Set the ALPN protocol list .
4023	Set the ALPN select callback .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set the OCSP client callback .
4027	Set the SSL context .
4028	Get the server name of the SSL connection .
4029	Set the host name of the current SSL session .
4030	Receive data from the socket .
4031	Receive data from the socket into a buffer .
4032	Read data from a BIO .
4033	Check if SSL renegotiation is pending .
4034	Shutdown the SSL connection .
4035	Get the list of ciphers supported by this connection .
4036	Get a list of client CA names .
4037	Sets the shutdown state of the SSL session .
4038	Get a random string from the server .
4039	Get a random string from the client .
4040	The master key of the SSL session .
4041	Export a keying material .
4042	Get the current SSL session .
4043	Get the name of the current cipher .
4044	Get the current cipher bits .
4045	Get the version of the current cipher .
4046	Get the name of the SSL protocol version .
4047	Get the next protocol negotiated message .
4048	Set the ALPN protocol list .
4049	Get the ALPN protocol negotiated message .
4050	Create a new memory buffer .
4051	Convert a BIO to a string .
4052	Set the ASN . 1 time value for the given boundary .
4053	Get the ASN . 1 string representation of a timestamp .
4054	Get an elliptic curve by its name .
4055	Return a string representation of a public key .
4056	Load a public key from a buffer .
4057	Sign the data with the given key using the given digest .
4058	Verify the signature with the data and digest .
4059	Dump a X509 CRL to a string .
4060	Converts the EVP key to a cryptography key object .
4061	Generate a key of the specified type and number of bits .
4062	Check if the public key is valid .
4063	Return a set of all supported Elliptic Curve objects .
4064	Get the Elliptic Curve from the given library .
4065	Convert this curve to an EC key .
4066	Return the DER - encoded version of this X509 Name .
4067	Get the components of the name .
4068	Get the short name of the extension .
4069	Get the extension data .
4070	Convert to cryptography . hazmat . x509 . _CertificateSigningRequest object .
4071	Set the public key of the request .
4072	Get the public key of the certificate .
4073	Get the subject name of the certificate .
4074	Add one or more X509 extensions to the request .
4075	Returns a list of all extensions in the X509 request .
4076	Verify that the request is signed by the given private key .
4077	Convert this certificate to a cryptography . hazmat . x509 . _Certificate object .
4078	Set the version of the certificate .
4079	Get the public key of the certificate .
4080	Set the public key of this X509 key .
4081	Sign the X . 509 certificate with the given private key .
4082	Get the signature algorithm of the certificate .
4083	Return the DER - encoded digest of the certificate .
4084	Set the serial number of the certificate .
4085	Get the serial number of the certificate .
4086	Add an amount of seconds to the notAfter field of the certificate .
4087	Add an amount of time until this certificate is not before the given value .
4088	Return True if the token has expired .
4089	Get the issuer name of the certificate .
4090	Set the issuer of the certificate .
4091	Get the subject name of the certificate .
4092	Set the subject of the certificate .
4093	Add one or more extensions to the X509 object .
4094	Get the extension at the given index .
4095	Add a certificate to the hash table .
4096	Add a CRL to the certificate .
4097	Set the time at which the certificate was signed .
4098	Initialize the X509 store context .
4099	Return an X509StoreContextError from the context .
4100	Verify that the certificate is valid .
4101	Set the serial number of the certificate .
4102	Get the serial number of the certificate .
4103	Set the reason for this certificate .
4104	Get the reason of the certificate .
4105	Set the revocation date for this certificate .
4106	Return a cryptography . hazmat . x509 . _CertificateRevocationList object .
4107	Return a tuple of Revoked objects .
4108	Get the issuer of the certificate .
4109	Sign the given digest with the given issuer certificate .
4110	Export a certificate to a PEM - encoded file .
4111	Get the name of the type of the object .
4112	Set the CA certificates .
4113	Export the certificate as a PKCS12 object .
4114	Sign the given digest using the given public key .
4115	Verify the signature of a key .
4116	Return a base64 - encoded version of the SPKI .
4117	Get the public key of the spki .
4118	Set the public key of the SPKI .
4119	Raise an exception from the error queue .
4120	If obj is a string convert it to bytes and warn the user .
4121	Return a function that prints a message to stdout .
4122	Get the metadata for the service .
4123	Returns a generator of issues for each card .
4124	Build a list of annotations for a card .
4125	Get a list of all boards .
4126	Get a list of open lists for a board .
4127	Get a list of cards .
4128	Get comments for a card .
4129	Build the URL for the API .
4130	Get a list of objects from the GitHub API .
4131	Convert a link field to a dictionary .
4132	Get all issues matching the given query .
4133	Return a list of pull requests for the given tag .
4134	Aggregate remote issues .
4135	Get config value or return default if not found .
4136	Returns a dictionary of all templates defined in the configuration .
4137	Check that the config is valid .
4138	Return True if the given issue should be included .
4139	Make a table from a list of lists .
4140	Execute a command and return the output of the command .
4141	Return the integer value of an option .
4142	Pull issues from the taskrc repository .
4143	Make a GET request and return the JSON response .
4144	Get a collection of values from the given URL .
4145	Find the local uuid for a given issue .
4146	Merge the fields from the local task to the remote task .
4147	Build UDAS config overrides for a list of targets .
4148	Parse a Sprint string .
4149	Get the credentials for the target .
4150	Calculate the ROUGE score for multiple sequences .
4151	Calculate p - values for a set of genes .
4152	Return a tuple with the indices of the values that should be rejected and the indices of the values that should be rejected .
4153	Compute the Z - score of a 2D array .
4154	Plot a heatmap for the given dataframe .
4155	Adjust axes spines .
4156	Prepare the argument parser for GeneSetEnrichmentAnalysis .
4157	Adds a parser to subparsers to run GSEApy Prerank on gene list .
4158	Adds a sub - command parser to subparsers to reproduce GSEA desktop output figures .
4159	Adds a sub - command parser for the enrichr command .
4160	Calculate the enrichment score for a set of genes .
4161	Compute the ranking metric tensor .
4162	Compute the ranking metric for a set of classes .
4163	Calculate the GSEA p - value .
4164	Compute the GSEA significance .
4165	Get the names and descriptions of all Marts .
4166	Returns a pandas DataFrame with the names and descriptions of all the datasets in the MART .
4167	Get the attributes of a dataset .
4168	Get the filters for a dataset .
4169	Query HSAPIens gene data .
4170	Run GSEA on a set of genes .
4171	Single Sample GSEA .
4172	Run GSEA Prerank .
4173	Replot a GSEA graph .
4174	Set the number of cores to use .
4175	Load a list of gene sets from a GMT file .
4176	Get a list of all available libraries .
4177	Download and generate Enrichr library genesets .
4178	Compute the heat matrix .
4179	Save results to a zip file .
4180	Load gene expression data from file .
4181	Run GSEA .
4182	Run GSEA .
4183	Run GSEA for each sample in df .
4184	Run the enrichment scores for each sample .
4185	Save the results to an es . txt file .
4186	Run the GSEA analysis .
4187	Run Enrichr on a list of genes .
4188	Parse the user defined genesets .
4189	Parse the gene list .
4190	Send a list of genes to the given URL .
4191	Check if genes are recognized by Enrichr .
4192	Get a set of background genes .
4193	Run Enrichr on the server .
4194	Add a cube layer to a filter script .
4195	Add an icosphere filter to the script .
4196	Add a torus filter to a script .
4197	Draw the hires edges of a plane .
4198	Create a cube with hires .
4199	Get red green and blue values for a given color .
4200	Check that a list has the correct number of terms .
4201	Make a list from a variable .
4202	Write a filter to a filter script .
4203	Create an LS3 Loop filter .
4204	Merge close vertices .
4205	Create a filter to close holes .
4206	This function splits the given script on non - manifold faces .
4207	Adds a filter to the script to filter out bad borders .
4208	Translate a script by the given value .
4209	Rotate a script by angle .
4210	Scale a script by the given value .
4211	Function to convert from cylindrical to cartesian .
4212	Wrap a script into a cylinder .
4213	Bend a script .
4214	Decompose a script to a curve .
4215	Convert a VC to a 3D texture file .
4216	Transfer Color from Mesh to Face
4217	Generate the XML for a uniform mesh resampling filter .
4218	Create an XML filter for a Screened Poisson surface reconstruction script .
4219	Apply Voronoi to a script .
4220	Select all faces and verticals .
4221	Adds a select by Vertex Quality filter to the script .
4222	Adds a conditional face selection filter to the script .
4223	Adds a conditional vertex selection filter to the script .
4224	Make a script a cylindrical vertically within a specified radius .
4225	Calculate the spherical vertitude of a script .
4226	Join a script with a filter .
4227	Rename the current mesh .
4228	Change the current layer of a filter script .
4229	Duplicate the current layer of a filter script .
4230	Delete the lower layer .
4231	Print an error message to the user .
4232	Begin a filter script .
4233	Add a layer to the stack .
4234	Remove a layer from the stack .
4235	Save the script to a file .
4236	Run meshlab server script .
4237	Create an annulus for a shield .
4238	Create a Hausdorff distance filter .
4239	Apply Poisson - disk sampling to a script .
4240	Add a subsampling filter to a filter script .
4241	Clustered Vertex Subsampling filter .
4242	Adds a flat plane filter to the script .
4243	Add a per - triangle filter to the script .
4244	Adds a Voronoi filter to the given script .
4245	Apply the Compute Topological Measures filter to a filter script .
4246	Parse the topology from a MLS log file .
4247	Parse the hausdorff log file .
4248	Create a Per vertex color function .
4249	Write a Voronoi filter to the given script .
4250	Run a cyclic rainbow script .
4251	Return the MPL code for the atan2 function .
4252	Compute the cross product of two vectors .
4253	Multiplies a vector by a scalar .
4254	Define new per - vertex attribute .
4255	Invert the faces orientation of the specified faces .
4256	Compute normals for point sets .
4257	Write a Taubin Smooth filter .
4258	Adds a depth smooth filter to the script .
4259	Sort a polyline file .
4260	Run the measure_topology script and return the result .
4261	Run the measure_geometry and measure_topology script .
4262	Calculate the dimension of a 3D measure .
4263	Lowercase the extension of filename .
4264	Patch app . request_class to use max_content_length .
4265	Return the config dictionary for the given set .
4266	Configure the uploads blueprint .
4267	The configuration for this upload set .
4268	Return the URL for the uploaded file .
4269	Return the path to a file .
4270	Return True if the given extension is allowed .
4271	Resolve a conflict in the target_folder .
4272	Get the version of vprof from the given file .
4273	Remove duplicates from a list of objects .
4274	Return the number of objects in objs1 and objs2 .
4275	Format the object count .
4276	Trace the memory usage of a module .
4277	Return a list of tuples containing the line number memory overhead function and file name .
4278	Return the number of objects overhead .
4279	Compute the memory overhead of the process .
4280	Profile the target package .
4281	Profile the source code into a Python module .
4282	Profile the execution of the function .
4283	Run the profile .
4284	Get a set of all module names in the given package .
4285	Run a function in a separate process .
4286	Returns the type of the run object .
4287	Initialize the module with the given run object .
4288	Initialize the profile for the given run object .
4289	Initialize the profile for a function .
4290	Replace sys . argv with the run object .
4291	This method is called when a signal is received .
4292	Insert a stack into the call tree .
4293	Fills the sampleCount attribute of the given node .
4294	Return a dictionary representation of the tree .
4295	Return the call tree as a dictionary .
4296	Profile the current object .
4297	Profile the run object .
4298	Profile the result of the function .
4299	Return a sorted list of tuples with filename lineno num_calls cum_time time_per_call num_calls time_per_call filename and color_hash .
4300	Return the profile package .
4301	Return the profile module .
4302	Run the function using cProfile .
4303	Initialize the database .
4304	Show the guestbook .
4305	Add an entry to the database .
4306	Handler for profiler .
4307	Start the stats server .
4308	Return the content of the root page .
4309	Return the content and extension of the file .
4310	Handle a GET request .
4311	Handle HTTP POST request .
4312	Send a response to the client .
4313	Check if the given path points to a standard library directory .
4314	Called when a line event is received .
4315	Yield lines without standard library .
4316	Fill the _execution_count and _heatmap with the number of times each line has been run .
4317	Return a list of lines that should be skipped from the source code .
4318	Return a dictionary with information about the profile .
4319	Format a heatmap as a dictionary .
4320	Return the profile module .
4321	Return the profile of the function .
4322	Run all the profilers specified in prof_config .
4323	Run a function on all profilers .
4324	Predict the probability of each row in X .
4325	Predict the log probability of each row in X .
4326	Fit the model to the matrix Z .
4327	Count the number of documents in the vocabulary .
4328	Sort the features in the vocabulary .
4329	Limit features based on document frequency .
4330	Fit the model to the data .
4331	Apply the vocabularies to the matrix Z .
4332	Convert this scaler to a Scikit - like object .
4333	Fit the model to a Spark dataset .
4334	Return the predicted values for each class in X .
4335	Fit a Spark Linear Regression to a matrix .
4336	Fit the model to the given data .
4337	Fit and transform the model .
4338	Calculate the score of a given Z vector .
4339	Fit folds for each parameter in parameter_iterable to Z .
4340	Compute the score of the estimator using the given scorer .
4341	Fit the K - Means model on the data .
4342	Predict the K - means of the input data .
4343	Predict the value of each row in X .
4344	Check whether the given RDD has the expected dtype .
4345	Fit the vocabulary to the data .
4346	Compute the mean and variance of an RDD .
4347	Fit the SVD to the input data .
4348	Transform a truncated SVD to a numpy array .
4349	Helper function for _block_collection .
4350	Generate a block of tuples from an iterator .
4351	Block an RDD .
4352	Apply a function to each element of the RDD .
4353	The shape of the underlying RDD .
4354	Convert this RDD to a numpy array .
4355	Apply a function to each column or dtype .
4356	Return True if s has a bit - permission for perm and pos .
4357	Return True if path has only root write permissions .
4358	Check that the configuration file is correct .
4359	Read configuration from file .
4360	Run a command as a shell .
4361	Execute a command and return stdout and stderr .
4362	Execute a command over an SSH server .
4363	Validate the configuration file .
4364	Returns the default headers for this request .
4365	Get the body of the request .
4366	Returns the URL for the ExecuteHomeAssistant device .
4367	Get the URL for this webhook .
4368	Return the text representation of a packet .
4369	Print a discovery packet .
4370	Scan for devices on the given interface .
4371	Execute the device .
4372	Send a confirmation message to the device .
4373	Called when a push is received .
4374	Execute the given device .
4375	Run the on_push callback .
4376	Convert a Transaction object into a Transaction object .
4377	Find the path to the LEDGER_FILE environment variable .
4378	Run tests for compatibility .
4379	Get long description from README . md .
4380	Create a PrecalculatedTextMeasurer object from a JSON file .
4381	Returns a PrecalculatedTextMeasurer instance .
4382	Generate a Jinja2 badge .
4383	Generate all Unicode characters in the font .
4384	Given a list of characters and a list of encodings generate a list of encodeable characters .
4385	Calculate the character to length mapping .
4386	Write a JSON representation of the deja - vu - sans file .
4387	Wrapper around scipy . ndimage . filters . correlate1d
4388	Get the gaussian kernel .
4389	Convert an image to grayscale and alpha .
4390	Entry point for pyssim .
4391	Compute the SSIM value of this SSIMImage .
4392	Compute the SSIM distance between two images .
4393	Destroy the instance .
4394	Set the current code version .
4395	Get the current status of the server .
4396	Print the status of the server .
4397	Return the node that is connected to the given connection .
4398	Try to bind to the server if necessary .
4399	Called when a new incoming connection is received .
4400	Called when a message is received from the device .
4401	Helper function to send a command to the device .
4402	Returns True if the given node should be connected .
4403	Connect to a single node if it is not already connected .
4404	Called when an outgoing connection is established .
4405	Called when an outgoing message has been received .
4406	Called when a connection is closed .
4407	Add a node to the list of nodes .
4408	Drop a node from the connection pool .
4409	Send a message to a node .
4410	Destroys the connection manager .
4411	Put an item into the buffer .
4412	Add an item to the heap .
4413	Get the first element of the heap .
4414	Try to acquire a lock .
4415	Check if a lock is acquired .
4416	Release a lock .
4417	Decorate a function to check the return value .
4418	Decorator for views that require a token .
4419	Set a list of hosts to connect to .
4420	Create Elasticsearch indexes .
4421	Migrate the aggregate and forensic indexes to the latest version .
4422	Strip out the metadata from the report .
4423	Save aggregate reports to Kafka .
4424	Extract an XML file from an archive .
4425	Parse an aggregate report file .
4426	Convert a list of forensic reports to a CSV file .
4427	Parse an aggregate or forensic report file .
4428	Get IMAP server capabilities .
4429	Save results to output_directory .
4430	Create a zip archive of the results .
4431	Send a report to a list of email addresses .
4432	Save aggregate reports to Splunk
4433	Save forensic reports to Splunk
4434	Decode a base64 encoded string .
4435	Get the public suffix list for the given domain .
4436	Get the reverse DNS address of an IP address .
4437	Convert a human - readable timestamp to a datetime object .
4438	Get the country information for an IP address .
4439	Get information about an IP address .
4440	Convert an Outlook MSG file to RFC822 .
4441	Convert a comma separated string to a list .
4442	Parse a report file .
4443	Drain the connection .
4444	Publish a message to a subject .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject asynchronously .
4448	Remove a subscription from the connection .
4449	Send a ping to the server .
4450	Select the next server in the pool .
4451	Process an error message .
4452	Process an operation error .
4453	Generate the connect command .
4454	Process a Pong .
4455	Process a message .
4456	Process server info .
4457	Process the initial connection .
4458	Flushes all pending data .
4459	Read data from the socket .
4460	Performs a co - activation of the given dataset .
4461	Decode a list of images into a pandas DataFrame .
4462	Load features from a numpy array .
4463	Load features from a list of images .
4464	Calculate Pearson correlation between images .
4465	Return the dot product of the images to decode .
4466	Select features based on feature selection .
4467	Get studies by regions .
4468	Get the feature order of a dataset .
4469	Classify a set of studies by a set of masks .
4470	Classify data using an ERF classifier .
4471	Fit the classifier to the data .
4472	Set the class weight of the classifier .
4473	Fit the model to the data .
4474	Fit the classifier to the dataset .
4475	Calculate the average of the pixels within a set of regions .
4476	Get n_voxels random voxels .
4477	Get the top n_top_words words from the model .
4478	Calculate the Pearson Ratio of a set of points .
4479	Calculate the FDR of a parameter vector .
4480	Load activations from a CSV file .
4481	Create an image table .
4482	Return a list of all studies .
4483	Add one or more features to the feature table .
4484	Get a list of feature names .
4485	Returns a dictionary of feature names and their counts .
4486	Load a dataset from a pickle file .
4487	Save the feature table to a file .
4488	Get the image data .
4489	Get feature data .
4490	Returns a list of the names of the given features .
4491	Get the indices of the features that are above threshold .
4492	Return a list of features that match the search string .
4493	Get ids by expression .
4494	Convert SDF to csr format .
4495	Decorator to mark functions as deprecated .
4496	Transform a matrix from foci to foci .
4497	Convert a 3D vector to a 3D matrix .
4498	Apply a transformation to a coordinate object .
4499	Mask the input image .
4500	Get the mask of the image .
4501	Load an image mask from a list of filenames .
4502	Save an image to a file .
4503	Set the logging level .
4504	Expand an address .
4505	Normalize a string and return a list of tokens .
4506	Parse an email address .
4507	Similar to _near_dupe . near_dupe_hashes .
4508	Convert a dictionary to a Python object .
4509	Get the price of a given ticker .
4510	Get a dataframe of data for a given frequency .
4511	Get a list of bulk news .
4512	Make a request to the API .
4513	Get bearer info from Spotify .
4514	Make a request to the given route .
4515	Get a list of tracks in a spotify .
4516	Get information about a specific artist .
4517	Get a list of albums for a given artist .
4518	Get a list of top tracks for a given artist .
4519	Get a list of all artists related to a given artist .
4520	Get a list of artists .
4521	Get information about a specific category .
4522	Get a list of playlists for a category .
4523	Get a list of categories .
4524	Get a list of featured playlists .
4525	Get a list of new releases .
4526	This API endpoint allows you to get a list of recommendations .
4527	Get a listing of the following artists or users in the given list of ids .
4528	Get a list of all albums in this artist .
4529	Get all albums for this artist .
4530	Return the total albums for this artist .
4531	Get the list of artists related to this artist .
4532	Get the currently playing track .
4533	Get the current player .
4534	Get all available devices .
4535	Get recently played tracks .
4536	Replace tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a new playlist .
4539	Get a list of playlists for this playlist .
4540	Get a list of tracks in this album .
4541	Get all tracks in the album .
4542	Generate a URL for an OAuth 2 . 0 client .
4543	Get an album by spotify id .
4544	Get an artist by spotify id .
4545	Get a single track .
4546	Get a specific user .
4547	Get a list of albums .
4548	Get a list of artists .
4549	Search for tracks playlists and artists .
4550	Converts a string to an identifier .
4551	Assert that a function has an attribute .
4552	Create a new client from an existing client .
4553	Generate a URL to access an OAuth2 token .
4554	Return a dictionary representation of the authorization header .
4555	Return a string representation of the request parameters .
4556	Builds a list of playlists .
4557	Get a list of all tracks for this playlist .
4558	Resume playback .
4559	Transfer the player to the specified device .
4560	Get a Spotify object from its href .
4561	Get the value of the URL .
4562	Convert month names to short names .
4563	Update PyFunceble URLs .
4564	Check if the current version is greater than or equal to the current version .
4565	Check if the current version is a dev version .
4566	Check if the current version is older than the current version .
4567	Backup the log file if auto_continue is True .
4568	Restore the content from the backup file .
4569	Return True if the line is to be ignored .
4570	Given a list of options return a list of domains .
4571	Extract the base URL from an element .
4572	Convert a string to a list of strings .
4573	Returns the HTTP status code of the request .
4574	Get the current HTTP code .
4575	Check if the given domain is valid .
4576	Check if a domain is a subdomain .
4577	Check if an IP address is valid .
4578	Check if an IP address is a valid IPv4 address range .
4579	Check if the given URL is valid .
4580	Load the configuration file .
4581	Stay safe .
4582	Check if the passed URL is valid and download it .
4583	Add the url_to_test attribute to the PyFunceble instance .
4584	Print the header .
4585	This method is called when a file is detected .
4586	Set the domain to test .
4587	Returns a tuple of the url and the status .
4588	Colorify the logo .
4589	Returns a string representation of the domain .
4590	Extract domain from file .
4591	Return the list of files to test .
4592	Returns a list of URLs for each file .
4593	Switch a configuration variable .
4594	Get the expiration date .
4595	Check if the catched string is valid and generate a status file .
4596	Get the structure from the configuration file .
4597	Create a directory if it doesn t exist .
4598	Delete all uneeded directories .
4599	Set the path to the configurations file .
4600	Load the configuration file .
4601	Install production config .
4602	Install iana configuration .
4603	Install the PSL configuration file .
4604	Install the directory structure file .
4605	Merge values from the upstream configuration to the new configuration .
4606	Load the configuration file .
4607	Split version into digits and non - digits .
4608	Check if the local and upstream versions are the same .
4609	Return True if the project has been cloned .
4610	Handle a non - existant index .
4611	Returns the host file directory for analytic host files .
4612	Unified file .
4613	Print the status file .
4614	Check if we should not produce a file .
4615	Add the extension to the public_suffix_db .
4616	Load the PSL database .
4617	Return the standard string representation of the given element .
4618	Determine if an element is a hierarchical URL .
4619	Load the IANA database .
4620	Return the referer for the given extension .
4621	Yields a tuple of the url and the referer of the extension .
4622	Update the iana - domains - db .
4623	Mine the URL .
4624	Retrieve the data from the file .
4625	Backup the contents of the file .
4626	Add elements to the mined dictionary .
4627	Remove the to_get_bare from the file
4628	Return a list of all mined files .
4629	Process the task .
4630	Get the content of a file .
4631	Write content to file .
4632	Write a whois record to the log .
4633	Write the expiration date to the log file .
4634	This method is called when a referer is not found .
4635	Write the header to the output file .
4636	Create a header tuple from a dictionary of data .
4637	Print the header of the response .
4638	Return an OrderedDict of the data to be printed .
4639	Return a list of size bytes from the header .
4640	Colorify data according to the template .
4641	Print data to a JSON file .
4642	Return the data to be printed .
4643	Save the log file .
4644	Calculate the time difference between two dates .
4645	Format the execution time as a string .
4646	Returns a list of files to be deleted .
4647	Returns a list of databases to delete .
4648	Delete all files in the current directory .
4649	Returns the hash of the file using the given algorithm .
4650	Return the hash of the data .
4651	Get the hash of the file or data .
4652	Execute the command and return the output .
4653	Removes a key from the main dictionary
4654	Rename a key in the main dictionary .
4655	Merge two dictionaries .
4656	Write the main dictionnary to a JSON file .
4657	Write the main dictionnary to a YAML file .
4658	Fix the path .
4659	Write data_to_write to file .
4660	Read the contents of the file .
4661	Returns a sorted list of the main list .
4662	Merge the elements in to_merge into self .
4663	Return a list of items that do not match the regex .
4664	Match the data against the regex .
4665	Replace the regex with replace_with .
4666	Count the number of tests .
4667	Calculate the percentages of the number .
4668	Print the results to stdout .
4669	Check if the given URL is valid .
4670	Check if the given domain is valid .
4671	Return True if the element is a subdomain of the given domain .
4672	Check if the current test is valid .
4673	Reformat the historical_formating_error . json file .
4674	Retrieve data from the inactive database .
4675	Backup the inactive database .
4676	Return the timestamp in seconds .
4677	Return the content of the database .
4678	Check if the inactive database is present .
4679	Retrieve the WHOIS database .
4680	Backup the WHOIS database .
4681	Check if the user is in the WHOIS database .
4682	Check if the file is older than the current time .
4683	Get the expiration date of the file .
4684	Add an entry to the database .
4685	Set up travis permissions .
4686	Run travis if configured .
4687	Run the nslookup test .
4688	Send a request to the whois server .
4689	Check if URL is valid .
4690	Get the referer of the domain .
4691	Get the current object .
4692	Return a list of all standard library paths .
4693	Iterate over all standard package names .
4694	Yield the line numbers of unused imports .
4695	Extract the module name from unused import messages .
4696	Yield line numbers of star used imports .
4697	Yield undefined_name and module_name from ImportStarUsage messages .
4698	Yield the line numbers of unused variables .
4699	Yield line numbers of duplicate key line numbers .
4700	Create a dictionary mapping key to a list of messages .
4701	Check if the given source is valid .
4702	Extract the package name from the given line .
4703	Check if the given line is a multiline import .
4704	Check if the given line contains a multiline statement .
4705	Remove imports from unused_module from line .
4706	Break up import statements .
4707	Filter the source code according to SAFE_IMPORTS .
4708	Given a list of messages return a dict mapping line number to the message .
4709	Given a line and a list of marked_star_import_undefined_name return a copy of the line .
4710	Filter the line if there is a duplicate key .
4711	Check if a dict entry has a key .
4712	Return True if value is a literal or a name .
4713	Yield line numbers of useless pass lines .
4714	Yield lines that are not marked as useless pass .
4715	Get the indentation of a line .
4716	Get the ending of a line .
4717	Fixes non - local imports in source code .
4718	Split a string into a set of strings .
4719	Check if the given file is a Python file .
4720	Check if a file should be excluded .
4721	Find all files in a directory .
4722	Command line interface for Autoflake .
4723	Reads a ObtainLeaseResponsePayload from an input stream .
4724	Writes this ObtainLeaseResponsePayload to the output_stream .
4725	Write this CancelRequestPayload to the output stream .
4726	Reads a CancelResponsePayload from an input stream .
4727	Create a new Name object .
4728	Read a Digest from the given data stream .
4729	Write the digest to the stream .
4730	Create a new Digest object .
4731	Read the application specific information from the specified data stream .
4732	Write the application specific information to the given stream .
4733	Create an ApplicationSpecificInformation object .
4734	Reads a KMIP Derivation Parameters from an input stream .
4735	Writes this DerivationParameters to the output stream .
4736	Reads a GetRequestPayload from an input stream .
4737	Writes this request payload to the output stream .
4738	Reads a GetResponsePayload from an input stream .
4739	Writes the response payload to the output stream .
4740	Reads a SignatureVerifyRequestPayload from an input stream .
4741	Write this KMIPSignature to an output stream .
4742	Reads a SignatureVerifyResponsePayload from an input stream .
4743	Process a request .
4744	Builds an error response .
4745	Process a template attribute .
4746	Get attributes from a managed object .
4747	Get an attribute from a managed object .
4748	Set attributes on a managed object .
4749	Set an attribute on a managed object .
4750	Returns True if the given policy is allowed for the given object .
4751	Writes this DecryptRequestPayload to the output stream .
4752	Create an object of the specified type .
4753	Set a configuration setting .
4754	Load the server configuration settings from a file .
4755	Process bind parameter .
4756	Return a list of CryptographicUsageMask objects for the given value .
4757	Read a long integer from the stream .
4758	Write this LongInteger to the stream .
4759	Validate that the value is valid .
4760	Read a big integer from the stream .
4761	Write a BigInteger to the stream .
4762	Validate that the value is an integer .
4763	Validate that the enumeration is valid .
4764	Read a boolean value from the stream .
4765	Write the boolean value to the given stream .
4766	Write this Boolean to the stream .
4767	Validate that the value is a boolean .
4768	Read a KMIPInterval from the stream .
4769	Validate that the interval is valid .
4770	Get the key wrapping data .
4771	Set the key wrapping data .
4772	Validate that the key is valid .
4773	Validate that the secret data is valid .
4774	Validate the opaque data .
4775	Converts an attribute name to a tag name .
4776	Converts an attribute tag to its name .
4777	Get the bit mask from the given enumerations .
4778	Returns a list of Enumerations that match the given bit mask .
4779	Check if an enumeration is a bit mask .
4780	Reads a CreateKeyPairRequestPayload from the input_buffer .
4781	Write this template to the output buffer .
4782	Reads the CreateKeyPairResponsePayload from the input_buffer .
4783	Writes the CreateKeyPair response payload to the output buffer .
4784	Reads a GetAttributeListRequestPayload from the input_buffer .
4785	Writes this GetAttributeListRequestPayload to the output buffer .
4786	Reads the GetAttributeList response payload .
4787	Writes the GetAttributeList response payload to the output buffer .
4788	Return a list of all . json files in a directory .
4789	Scan the policy directory for policies .
4790	Run the operation policy file monitor .
4791	Get the certificate from a connection object .
4792	Get the extended key usage from a certificate .
4793	Get the common names of a certificate .
4794	Get the client identity from a certificate .
4795	Reads a CreateRequestPayload from the input_buffer .
4796	Write the Create request payload to the output buffer .
4797	Reads the Create Response Payload from the input_buffer .
4798	Writes the Create response payload to the output buffer .
4799	Convert an object into a PieKey object .
4800	Reads the EncryptedResponsePayload from an input stream .
4801	Reads the DeriveKeyRequestPayload from the input_buffer .
4802	Writes the DeriveKey request payload to the output buffer .
4803	Returns True if the given attribute is supported .
4804	Check if an attribute is deprecated .
4805	Returns True if the given attribute is applicable to the given object type .
4806	Returns True if the given attribute is multivalued .
4807	Get a valid value from the configuration file .
4808	Reads a CheckResponsePayload from an input stream .
4809	Writes this CheckResponsePayload to the output stream .
4810	Reads the AttributeReference from the input_buffer .
4811	Writes this AttributeReference to the output_buffer .
4812	Read an Attributes object from an input stream .
4813	Write the Attributes object to the output stream .
4814	Reads the nonce from an input stream .
4815	Writes the nonce to the output stream .
4816	Reads the username and password from an input stream .
4817	Writes the username and password to the output stream .
4818	Reads a KMIP Device Credential from an input stream .
4819	Write this KMIP object to an output stream .
4820	Reads a KMIP Credential from an input stream .
4821	Writes this credential to the output stream .
4822	Reads the MACSignatureKeyInformation from an input stream .
4823	Writes this MACSignatureKeyInformation to the output stream .
4824	Reads a KeyWrappingData from an input stream .
4825	Write this key to an output stream .
4826	Reads a KeyWrappingSpecification from an input stream .
4827	Writes this KeyWrappingSpecification to the given byte stream .
4828	Read the extension information from a byte stream .
4829	Write the extension information to the object ostream .
4830	Create an extension information object .
4831	Read a RevocationReason from a stream .
4832	Write this RevocationReason to the stream .
4833	Validate that the revocation code and revocation message are valid .
4834	Reads the ObjectDefaults object from the input_buffer .
4835	Writes the ObjectDefaults object to the output buffer .
4836	Reads the KMIP DefaultsInformation object from the input_buffer .
4837	Writes the DefaultsInformation to the output_buffer .
4838	Reads the RNGParameters from the input_buffer .
4839	Writes the RNG parameters to the output buffer .
4840	Reads the ProfileInformation object from the input_buffer .
4841	Writes the profile information to the output buffer .
4842	Write this KMIP ValidationInformation object to the output stream .
4843	Reads a KMIP CapabilityInformation object from the input_buffer .
4844	Write the CapabilityInformation object to the given output buffer .
4845	Stop the server .
4846	Start the connection service .
4847	Reads a LocateRequestPayload from the input_buffer .
4848	Write this object to the given output buffer .
4849	Reads a LocateResponsePayload from the input_buffer .
4850	Write this LocateResponsePayload to the output_buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a HMAC - based message authentication code .
4854	Encrypt the given text using the specified encryption algorithm and key .
4855	Encrypt the given plain text using the specified symmetric key .
4856	Encrypt plain text using asymmetric encryption .
4857	Decrypt text using asymmetric encryption .
4858	Create an RSA key pair .
4859	Derive a key from this key .
4860	Create an RSA private key from a byte string .
4861	Verifies the signature of a message .
4862	Reads a SignResponsePayload from an input stream .
4863	Writes the payload to the output stream .
4864	Reads a GetUsageAllocationRequestPayload from an input stream .
4865	Converts a ProtocolVersion to a KMIPVersion enum value .
4866	Reads the protocol version from an input stream .
4867	Write the protocol version to the output stream .
4868	Read a KMIP authentication from an input stream .
4869	Write this authentication to the output stream .
4870	Reads a PollRequestPayload from an input stream .
4871	Read a KMIP Certificate from a stream .
4872	Write this certificate to the object ostream .
4873	Authenticate with the SLUGS server .
4874	Reads the payload from an input stream .
4875	Writes the payload to the output stream .
4876	Start the session .
4877	Reads a Rekey response payload from an input stream .
4878	Returns True if the profile is supported .
4879	Derives a key from an object .
4880	Send a get attributes request to the server .
4881	Get a list of attributes .
4882	Send a query request to the server .
4883	Signs the given data with the given unique identifier .
4884	Open the client connection .
4885	Close the client connection .
4886	Creates a new key for the specified algorithm and length .
4887	Creates a cryptographic key pair .
4888	Registers a Pie managed object .
4889	Rekey the object with a unique identifier .
4890	Derives a key from an object .
4891	Returns a list of UUIDs that match the specified criteria .
4892	Check the status of a user .
4893	Get a managed object .
4894	Get attributes of a user .
4895	Activates a user .
4896	Revokes the specified revocation .
4897	Send a MAC address to the device .
4898	Builds a CryptographicParameters object from a dictionary .
4899	Builds a EncryptionKeyInformation object from a dictionary .
4900	Builds a MACSignatureKeyInformation object from a dictionary .
4901	Builds a KeyWrappingSpecification object from a dictionary .
4902	Builds a list of common attributes .
4903	Builds a name attribute .
4904	Reads the query request payload from the input_buffer .
4905	Write this query request payload to the output buffer .
4906	Write this KMIP object to an output stream .
4907	Reads the GetAttributes response payload .
4908	Write the GetAttributes response payload to the output buffer .
4909	Get a single entry point .
4910	Return a dict of all the named endpoints in a group .
4911	Get all entry points in a group .
4912	Load an object from a module .
4913	Create an entry point from an entry point string .
4914	Start a live server .
4915	Generate the project directory .
4916	Generate a new controller .
4917	Generate the action .
4918	Generate a form .
4919	Generate a model .
4920	Generate a macro .
4921	Make a directory if it doesn t exist .
4922	Rewrite src_file with project_name and copy to dst_file .
4923	Returns the number of seconds since the given value .
4924	Check if url is valid .
4925	Encode an object using the secret key .
4926	Decode something into a Python object .
4927	Wrap a function to return a JSON response .
4928	Return an absolute URL for the given endpoint and values .
4929	Load configuration from environment variables .
4930	Sign in a user .
4931	Get the currently logged in user .
4932	Create the Flask application .
4933	Register jinja environment .
4934	Register the routes for the application .
4935	Register error handler .
4936	Register before and after hooks .
4937	Write a dataframe to a csv file .
4938	Read a CSV file into a Pandas DataFrame .
4939	Serialize a pandas . DataFrame to a writer .
4940	Deserialize a DataFrame from a file - like object .
4941	Update this object from a pandas . DataFrame .
4942	Update the object from the raw data .
4943	Return the URL for the contents of the file .
4944	Upload a data frame from a Pandas DataFrame .
4945	Add a new image from a raw data object .
4946	Open an intermediate dataset .
4947	Read the contents of this dataset as binary .
4948	Read the contents of this dataset as text .
4949	Return the data as a pandas . DataFrame .
4950	Returns an instance of the IntermediateDataset class .
4951	Get all experiments in a workspace
4952	Get a list of datasets in a workspace
4953	Get information about a dataset
4954	Publish a function to a workspace .
4955	Creates a function that will be called when a service is published .
4956	Decorator to add type annotations to a function .
4957	Decorator to annotate a function as a return type .
4958	Attach an attachment to a function .
4959	Find all globals in the given code object .
4960	Return a copy of the pen .
4961	Lookup a color from a string .
4962	Draw this region on the given CR context .
4963	Calculate the cubic Bernstein - Extrema distance between two points .
4964	Calculate the cubic Bernstein - Leibler .
4965	Build the list of choices for the tree .
4966	Returns a function that takes a list of command options and returns a tuple of the command options .
4967	Register a function as the items processor .
4968	Compose a dynamic tree from an application .
4969	Initialize the tree .
4970	Empty the site tree cache .
4971	Get an entry from the cache .
4972	Update the value of an entry .
4973	Set an entry in the cache .
4974	Initialize the page .
4975	Resolve the tree alias for the given alias .
4976	Returns True if the current app is an admin .
4977	Calculate the depth of an item .
4978	Get the current item for the given tree alias .
4979	Returns the URL for the given item .
4980	Initialize the site tree .
4981	Get the attribute of the current page .
4982	Get the parent level of the given item .
4983	Creates a menu for the given tree alias and tree branches .
4984	Check if the user has access to the item .
4985	Return the breadcrumbs for the given tree alias .
4986	Returns the tree items for the given alias .
4987	Render the children of the given parent item .
4988	Get the children of the given item .
4989	Updates the has_children property of each tree item .
4990	Filter a list of items based on the current page context .
4991	Get the parent item of the given item .
4992	Recursively climbers a tree item .
4993	Resolve a variable name .
4994	Creates a tree node from the given template .
4995	Returns the children of the given tree item .
4996	Creates a breadcrumb node from the given tree alias .
4997	Create a menu from mytree .
4998	Render a template with the given tree items .
4999	Returns an instance of this class for the given tag .
5000	Get the URL name for a model .
5001	Registers the tree admin .
5002	Redirect to the given path .
5003	Redirect to item_add or item_continue .
5004	Redirect to post_url_continue if post_url_continue is None .
5005	Redirect the user to the tree item .
5006	Add the parent choice field to the form .
5007	Get a tree object .
5008	Move an item in a tree .
5009	Changes the parent of an item .
5010	Returns a list of urls for this admin .
5011	Dump the tree to a response .
5012	Create a tree object .
5013	Create a tree item .
5014	Import the Sitetree module for the given app .
5015	Get the model class for the given settings entry .
5016	Create a Config instance from a mapping .
5017	Create a Config instance from a Python file .
5018	Load a configuration from a TOML file .
5019	Create a Config instance from an object .
5020	Create a ZipkinAttrs object for a span .
5021	Create HTTP headers for a new span .
5022	Get the current context for the current span .
5023	Start the zipkin tracing .
5024	Stop tracing .
5025	Update binary annotations .
5026	Add a sa binary annotation to the client .
5027	Override the name of the span .
5028	Create an Endpoint object .
5029	Copy an endpoint with a new service name .
5030	Build a V1Span from this span .
5031	Encodes a list of Span objects into a protobuf string .
5032	Create a protobuf span from a Span object .
5033	Convert a hex id to its binary representation .
5034	Get the protobuf kind from the given kind .
5035	Convert an endpoint object into a protobuf endpoint object .
5036	Convert a dictionary of annotations into a list of zipkin_pb2 . Annotation objects .
5037	Create an annotation object .
5038	Create a BinaryAnnotation object .
5039	Create a zipkin endpoint .
5040	Copy an endpoint with a new service name .
5041	Build a list of annotations from a dictionary .
5042	Build a list of zipkin_core . BinaryAnnotation objects from a dictionary .
5043	Create a new span .
5044	Convert a Thrift span to a byte string .
5045	Encodes a list of binary Thrift objects into a byte string .
5046	Detect the span version and encoding of a message .
5047	Convert a list of spans to output_encoding .
5048	Push the given zipkin_attr onto the stack .
5049	Encodes the given v2_span into a Thrift span .
5050	Create the JSON representation of the endpoint .
5051	Encodes a Span into a protobuf .
5052	Decode a list of Thrift spans .
5053	Convert a Thrift Endpoint to a Thrift Endpoint object .
5054	Decode Thrift annotations .
5055	Converts a list of Thrift binary annotations into a dictionary of tags local_endpoint and remote_endpoint .
5056	Decode a Thrift span into a Span object .
5057	Convert a trace id to a string .
5058	Converts an unsigned long to a lower hex string .
5059	Writes a 16 - bit unsigned integer to the stream data at the specified position .
5060	Fix the day field in tag_dict if it is too long .
5061	Set the transaction code for a tag .
5062	Adds the iph_id attribute to the tag_dict .
5063	Set the TNR for a tag .
5064	Parses the given data into a dictionary .
5065	Parse a file or file - like object into a Transaction object .
5066	Join lines of a string .
5067	Return response body as json or text .
5068	Warn if we have exceeded a ratelimit quota .
5069	Perform an HTTP request .
5070	Get bot info .
5071	Get a list of bots .
5072	Read a term from the stream .
5073	Write a message to the output stream .
5074	Close the file descriptor .
5075	Decode a string into a term and its unused data .
5076	Encode a term .
5077	Add a source address to the multi - in socket .
5078	Send the next pending message from the queue .
5079	Sets the callback that will be called when the client is listening for a message .
5080	cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given the TYPES and SCOPES in a given TIMEOUT
5083	construct a a raw SOAP XML string given a prepared SoapEnvelope object
5084	Discover systems using WS - Discovery
5085	Returns the tagged item manager .
5086	Get all child relations of the given model .
5087	Return a list of all child m2m relations of the given model .
5088	Save a ClusterableModel instance .
5089	Create a new instance of this model from serialized data .
5090	Validate that all unique fields in the form have been validated .
5091	Return True if any of the forms have changed .
5092	Return an address with a valid checksum .
5093	Generate a checksum for this address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt the user for a seed .
5097	Validate a signature fragment .
5098	Get the key at the given index .
5099	Get the key for the given address .
5100	Create a key iterator .
5101	Create a Kerl instance for the given index .
5102	Given a set of trits absorb them into the state .
5103	Squeeze a set of trits from a set of trits .
5104	Transform state according to TRUTH_TABLE .
5105	Get a list of digests .
5106	Get a list of private keys .
5107	Prepare a multi - signature transfer .
5108	Add two trits .
5109	Return a list of trits from an integer .
5110	Add two trits .
5111	Calculate the full sum of two trits .
5112	Output a seed to the screen .
5113	Send a FindTransactionsCommand to the adapter .
5114	Get a list of inputs between start and stop .
5115	Get a list of new addresses .
5116	Returns a list of all available transfers .
5117	Promote a transaction .
5118	Create a replay bundle command .
5119	Send a set of transfers .
5120	Send a list of trytes .
5121	Resolve an adapter from a URI .
5122	Send a request to the server .
5123	Log a message to the logger .
5124	Send an HTTP request .
5125	Interpret the response as JSON .
5126	Add a response to the response queue .
5127	Add a digest .
5128	Get the MultisigAddress .
5129	Create an iterator that yields addresses from the seed .
5130	Create an address from a digest .
5131	Generate an address from a key iterator .
5132	Find transaction objects .
5133	Iterate over addresses that have been used .
5134	Get the list of bundles from a list of transaction hashes .
5135	Check if a trytes codec is supported .
5136	Get the codec info .
5137	Encode a byte string .
5138	Decode a tryte sequence .
5139	Return a list of addresses matching the given seed .
5140	Add a route for a command .
5141	Create a Transaction instance from a trytes string .
5142	Return the message as a JSON - compatible dictionary .
5143	Get the signature validation trytes .
5144	Set the transaction s is_confirmed flag .
5145	Return a list of all the messages in the transaction group .
5146	Return the transactions as a list of tryte strings .
5147	Return a list of transactions grouped by address .
5148	Find all commands in a given package .
5149	Execute the given request .
5150	Apply a filter to a value .
5151	Get the URL for a job .
5152	Returns a list of validation errors .
5153	Return True if the validator is valid .
5154	Create a validator for the bundle .
5155	Get the bundle signature errors for the given groups .
5156	Return an error message if the group has invalid signature .
5157	Traverse the bundle of a transaction .
5158	Start the repl process .
5159	Generate a random string of given length .
5160	Get the digest of the key .
5161	Sign all input transactions in a bundle .
5162	Pretty print the object .
5163	Add trits to the hash .
5164	Squeeze a set of trits from the hash .
5165	Add context to an exception .
5166	Security level .
5167	Increment the legacy tag .
5168	Get the tag of the current transaction .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign all inputs in the bundle .
5172	Signs the input at the given index .
5173	Create input transactions .
5174	Convert value to standard unit .
5175	Decompress G1 .
5176	Calculates the prime field inverse of an integer .
5177	Create an instance from a JSON file .
5178	Find groups of words in text .
5179	Find the synonym for a word .
5180	Expand the abbreviations in the text .
5181	Split a description into a list of parts .
5182	Return a list of all categories .
5183	Create a random colour .
5184	Plot the component s summary .
5185	Create a builtin LEGEND instance from its name .
5186	Create a TimeScale object from a builtin timescale name .
5187	Create a random instance of Decor with the given components .
5188	Create a Decor object from an image file .
5189	Create a Legend object from a CSV file .
5190	Convert the table to a CSV file .
5191	Returns the maximum width of the table .
5192	Get a Decor object for the given component .
5193	Get an attribute from a class or method .
5194	Get the component of a colour .
5195	Plot all elements in the list .
5196	Create a component from a text string .
5197	Build a summary of the component .
5198	Deprecated . Please use Component instead .
5199	Process a single row of text .
5200	Parse Canstrat text .
5201	Return True if all elements in the sequence are less than zero .
5202	Returns a list of unique thickness values .
5203	Create a list of Interval objects from a list of tops and a basis matrix .
5204	Clean longitudinal data .
5205	Create a IntervalList from a Petrel file .
5206	Build a list of intervals from a dictionary of data .
5207	Create a Striplog object from a CSV file .
5208	Create an instance of this class from an image .
5209	Create a Striplog object from a log file .
5210	Create a Las3 object from a string .
5211	Create an IntervalList from a canstrat file .
5212	Return a copy of the striplog .
5213	Write the striplog to a CSV file .
5214	Convert the Lithology object to a LITH3 format .
5215	Plot a matplotlib . pyplot . Axes object .
5216	Get the data for a given field .
5217	Extract data from a basis set .
5218	Find all components that match the search_term .
5219	Return a list of all incongruities that are greater than or equal to the given value .
5220	Return a list of all gaps in the sequence .
5221	Prune the striplog .
5222	Anneal the strip .
5223	Fill the components with the given component .
5224	Return the union of this striplog and another striplog .
5225	Return the intersection of two striplogs .
5226	Merge overlapping segments .
5227	Plot a histogram of the data .
5228	Invert the striplog .
5229	Crop the striplog to a new extent .
5230	Run a set of tests and return the results as a dictionary .
5231	Convert a hex value to a name .
5232	Read a log - likelihood image from a file .
5233	If the field does not exist return an empty string .
5234	Get a list of jobs with the given prefix .
5235	Parse a job from a HCL string .
5236	Update a token .
5237	Get a list of all allocations for a given prefix .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Get the health of a deployment .
5241	Drain a node .
5242	Drains a node with a spec .
5243	Check if a node is eligible or ineligible .
5244	Get a list of files .
5245	Stream a file .
5246	Get information about a file .
5247	Join an agent to a list of addresses .
5248	Update a list of addresses .
5249	Force leave a node .
5250	Get a list of nodes with the given prefix .
5251	Returns a list of all evaluations that match the given prefix .
5252	Get a list of all namespaces with the given prefix .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job to a new version .
5257	Revert a stable job .
5258	Deregisters a job .
5259	Get the current configuration .
5260	Delete a peer .
5261	Returns a list of all deployments with the given prefix .
5262	Get a random value for the given object type .
5263	Get a random mutator for the given object .
5264	Get a random polyglot attack string .
5265	Fuzz the given object .
5266	Return a safe unicode version of buf .
5267	Start the server .
5268	Stop the PJFServer .
5269	Render a custom HTML file .
5270	Serve the response .
5271	Fuzz an object .
5272	Spawn a PJF process .
5273	Get the output of the process .
5274	Finish the read process .
5275	Close the PJFExecutor .
5276	Start the PJF worker .
5277	Execute a PJFExternalFuzzer command .
5278	Decorator for JSON encoding .
5279	Build a random string .
5280	Build a string from a list of values .
5281	Return the string representation of the expression .
5282	Build a random value .
5283	Build an Opt object .
5284	Build the value of the reference .
5285	Build a random STAR .
5286	Shutdown the PJFProcessMonitor .
5287	Run the child process and monitor its return code .
5288	Start the monitor process .
5289	Returns a random float between a and b .
5290	Add a definition to a category .
5291	Add a category to a category group .
5292	Generate a list of tokens for a given number .
5293	Fuzz the elements in the given element .
5294	Return a fuzzed version of the JSON .
5295	Returns a fuzzed version of the PJF object .
5296	Decorate a function to mutate an object .
5297	Signal handler for the child process .
5298	Quit the current process .
5299	Pause a running process .
5300	Resume the paused state .
5301	Stop the running process .
5302	Restarts the running process .
5303	Returns a list of SkypeEvent objects .
5304	Set the user s mood .
5305	Set the avatar of the user .
5306	Get the meta data for a URL .
5307	Create a new contact for a user .
5308	Get a single user by name .
5309	Get a list of bots .
5310	Get information about a bot .
5311	Search for users .
5312	Returns a list of SkypeRequest objects for each invite .
5313	Create a new instance from raw data .
5314	Merge attributes from another object into this object .
5315	Merge an object into the cache .
5316	Make a call to the sync state API .
5317	Read the token from the token file
5318	Write the token to the token file
5319	Verify that the token is valid .
5320	Refresh Skype token .
5321	Get the username of the current user
5322	Get the registration token .
5323	Get all available Skype endpoints .
5324	Check if a user exists in Skype .
5325	Authenticates a token .
5326	Authenticates using the provided skypeToken .
5327	Configure an endpoint s presence documentation .
5328	Ping this endpoint .
5329	Get a list of recent conversations .
5330	Get information about a chat .
5331	Create a new thread .
5332	Attempt to extract the user id from a URL .
5333	Convert chat url to chat id
5334	Exhaust a function .
5335	Return unicode text no matter what
5336	Detect the format of the given text .
5337	Parse text into metadata and content .
5338	Post as a dict for serializing
5339	Load a YAML file .
5340	Export metadata to a YAML string .
5341	Turn metadata into JSON
5342	Return the full match of this list .
5343	Return a list of all items in the string .
5344	Return the sublists of the wiki with the given pattern . If no pattern is given then all sublists are returned .
5345	Replace pattern with newstart .
5346	Returns a list of all the arguments in the shadow .
5347	Returns a list of WikiList objects matching pattern .
5348	Plant a trie from a list of strings .
5349	Convert a trie into a regular expression .
5350	Check if an index is valid .
5351	Insert string at index .
5352	Return the partition of a character .
5353	Return a list of spans for the given type .
5354	Shrinks the span list from rmstart to rmstop .
5355	Update the length of the span at the given index .
5356	Return the number of nesting levels of this node .
5357	Return a byte string containing the shadow of this span .
5358	Return a byte array that can be used as an external link shadow .
5359	Return a mapping from type to spans .
5360	Deprecated method . Use pformat instead .
5361	The list of parameters .
5362	A list of ParserFunction objects representing the parser functions .
5363	List of Template objects .
5364	The list of wikilinks .
5365	List of Comment objects .
5366	Returns the list of external links .
5367	Return a list of all sections .
5368	Returns a list of all tables in the string .
5369	r Get a list of WikiLists .
5370	Returns a list of tags with the given name .
5371	Iterate over all spans of the given type .
5372	Return a list of all ancestors of the given type .
5373	Return the parent of the given type .
5374	Return the most common element in a list .
5375	Get an argument from a list of arguments .
5376	Return the normal name of the template .
5377	Remove all arguments with duplicate names .
5378	Remove duplicate arguments .
5379	Set the value of an argument .
5380	Get the argument with the given name .
5381	Check if the function has an argument with the given name and optional value .
5382	Remove the argument with the given name .
5383	Convert a CRS code to a string .
5384	Find an Ellipsoid object by its name and type .
5385	Create a CRS object from a URL .
5386	Create a GeoJSON object from a WKT or GeoJSON file .
5387	Create a CRS object from an EPSG code .
5388	Create a CRS object from an ESRI code .
5389	Create a CRS object from a CRS code .
5390	Try to auto - detect the type of CRS from an unknown text .
5391	Write the record to a file - like object .
5392	Read a raw VLR record from a data stream .
5393	Parses a list of GeoTiffKeys from a VLRList .
5394	Parse a GeoTiff key directory into a list of GeoTiffKey objects .
5395	Get the signedness of an extra dimension .
5396	Get the ID for an extra dimension type .
5397	Create a new point record from another point record .
5398	Copy fields from other_record to self .
5399	Append zeros to self . array if value is too small .
5400	Returns a set of all dimension names in the array .
5401	Create an empty point array .
5402	Read a set of points from a stream .
5403	Create a point from a compressed buffer .
5404	The x dimension of the data .
5405	The y coordinate of the data .
5406	The z - dimension of the image .
5407	Add an extra dimension .
5408	Write the point record to a file - like object .
5409	Write to a file .
5410	Write to a file or file - like object .
5411	Build a dictionary of point formats to dtypes .
5412	Builds a dictionary mapping point formats to numpy dtype .
5413	Convert numpy dtype to point format .
5414	Returns the minimum file version for a point format .
5415	Returns True if point_format_id is compatible with file_version .
5416	Get a list of VLR objects of the specified type .
5417	Returns a list of VLRs of the specified type .
5418	Read a list of VLRs from the data stream .
5419	Check if all las files have the same point format id .
5420	Check if all las files have the same dtype .
5421	Raise a PylasError if the file signature is not correct .
5422	Read the header from the stream .
5423	Read a list of VLRs from the file .
5424	Read point records from VLRs .
5425	Read the compressed points data .
5426	Read the internal waveform packet from the stream .
5427	Reads the EVLRList from the data stream .
5428	Warn if we are not at the expected position .
5429	Open a LAS file or file - like object .
5430	Read a Las file and return its contents .
5431	Create a LasData object from a LasHeader object .
5432	Create a LasData object for a point format .
5433	Convert a LasFile object to an LasFile object .
5434	Merge multiple las files into one .
5435	Write the las file then read again .
5436	Return a datetime . date object representing the creation date .
5437	Set the creation date .
5438	Return the minimum values of the points .
5439	Set x y and z min values .
5440	The maximum values of the points .
5441	Set the maximum x y and z values .
5442	Returns a numpy array of the x y and z scales .
5443	Return a numpy array with the x y and z offsets .
5444	Peek the file version from the given stream .
5445	Convert old_header to new_header .
5446	Unpack an array from a mask .
5447	Pack sub_field_array into sub_field_array
5448	Return a list of dimension names that are not present in point_fmt_in .
5449	Returns a dictionary of all sub - fields .
5450	Returns the number of bytes of the extra dimensions .
5451	Return True if this dataset has a waveform packet .
5452	Main function for satel_integra .
5453	Calculate the CRC for the given command .
5454	Print a hex message .
5455	Verify the response and strip the checksum .
5456	Returns a list of the set bits in r .
5457	Generate a query from a command .
5458	Run the demo on the given host and port .
5459	Connect to the server .
5460	Start monitoring .
5461	Send a disarm command .
5462	Clear the alarm .
5463	Set output .
5464	Keep the connection alive .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the user s database .
5468	Guess the type of a file or a notebook .
5469	Get the file id for a given path .
5470	Get a notebook from the database .
5471	Create a notebook model from a database record .
5472	Get a directory .
5473	Convert a list of file records into a list of models .
5474	Create a directory model from a database record .
5475	Create a file model from a database record .
5476	Save a notebook to a file .
5477	Save a file .
5478	Rename a file or directory .
5479	Delete a file or directory .
5480	Ensure a user exists in the database .
5481	Remove all files and directories for a given user .
5482	Create a directory in the database .
5483	Check if a user is in a directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	Get all files in a directory .
5487	Returns a list of all directories in a directory .
5488	Return a where clause for the files table .
5489	Select files for a given user .
5490	Return a list of default file fields .
5491	Get a file from the database .
5492	Get a file from the database .
5493	Get the file id for a user .
5494	Check if a file exists in the database .
5495	Rename a directory .
5496	Save a file to the database .
5497	Generate all notebooks in the database .
5498	Purge all remote checkpoints for a user .
5499	Generate a set of checkpoints .
5500	Generate notebooks from the database .
5501	Reencrypt the content of a row .
5502	Re - encrypt user content .
5503	Derives a single Fernet key from a password and user ID .
5504	Derives a fallback Fernet key from a list of passwords .
5505	Create a crypto factory for a single password .
5506	Memoize a single argument .
5507	Get the column name from a column like object .
5508	Convert a row to a dict without the content field .
5509	Convert a row to a dict with the content field .
5510	Create a checkpoint for the given notebook .
5511	Create a checkpoint for a file .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	Return a list of all checkpoints for a given path .
5515	Move all checkpoints from old_path to new_path
5516	Delete all checkpoints for a given path .
5517	Remove all remote checkpoints from the database .
5518	Resolve a path to a manager and return the manager and the path .
5519	Apply a prefix to a model .
5520	Decorator for dispatching a model from a path .
5521	Decorator for dispatching a model from a path .
5522	Decorator for dispatching a file from one backend to another .
5523	Called when a manager is changed .
5524	Perform a GET request on a path .
5525	Normalizes an API path . Raises an exception if the path is outside the root .
5526	Split a path into a directory name and directory name .
5527	Return a base64 - encoded version of nb .
5528	Read the contents of a base64 encoded nb file .
5529	Decode unknown content from base64 .
5530	Decode a file from base64 .
5531	Returns a list of all directories starting with the given path .
5532	Wrap a function to raise a 404 if the path is outside the root .
5533	Create a user in the database .
5534	Separate directories and files from models .
5535	Recursively walk a directory tree .
5536	Iterate over all files in the directory .
5537	Walk a directory and yield all files with content .
5538	Reencrypt all users in the database .
5539	Reencrypt a single user .
5540	Re - encrypt all users .
5541	Unencrypt a single user .
5542	Generate a temporary alembic . ini file .
5543	Upgrade an Alembic database .
5544	Sanitize a block .
5545	Queue an instance of embed_type with data .
5546	Load a set of instances for the given embed type .
5547	Insert an instance into the cache .
5548	Load data for all embed types .
5549	Validate data .
5550	View for the admin page .
5551	Returns the JSON representation of the object .
5552	Hide all fields that are not authenticated .
5553	Remove fields from self . fields .
5554	Add version and preview_id to kwargs .
5555	Returns a queryset of all published images .
5556	Returns a queryset of publishable items .
5557	Returns True if the field is null False otherwise .
5558	Validate that a widget is valid .
5559	Validate that a zone is valid .
5560	Return True if id is a valid UUID .
5561	Returns an empty string if the user is an admin user .
5562	Modify the permissions of the group .
5563	Validate that an author is a list of dicts .
5564	Save this zone .
5565	Get data as a dictionary .
5566	Prepares the data for the form .
5567	Render the template with the given data .
5568	Get the settings for this integration .
5569	This method is called when an authorization code has been received .
5570	Get the settings for an integration .
5571	Update an integration s settings .
5572	Signup a user .
5573	Create a maptag from a list of strings .
5574	Render a zone .
5575	Save a featured image .
5576	Save the subsection to the database .
5577	Get the extension of the image .
5578	Returns the url of the medium image .
5579	Save the image .
5580	Save a thumbnail of an image .
5581	Get the connection to the MySQL server .
5582	Get a BandwidthLimitedStream for the given fileobj .
5583	Read a number of bytes from the underlying file .
5584	Consumes the requested amount for the given request token .
5585	Schedule a consumer for a token .
5586	Process a scheduled retry token .
5587	Calculate the proposed rate for the given amount of time .
5588	Record the current consumption rate .
5589	Download a file from S3 .
5590	Wait for the result of a transfer .
5591	Get a list of callbacks for the given transfer_future .
5592	Returns a copy of original_dict with only the keys in whitelisted_keys .
5593	Decrement the counter .
5594	Call the callback when the queue is empty .
5595	Return True if filename is a special file .
5596	Acquire a resource with the given tag .
5597	Release a acquire token .
5598	Adjust the chunk size .
5599	Queue a file - like object to be written to .
5600	Returns a IOWriteTask for writing data to a file object .
5601	Returns the download output manager class for the given transfer future .
5602	Main function for downloading objects from S3 .
5603	Write data to fileobj at offset .
5604	Request data to be written to an offset .
5605	Check if a file - like object is seekable .
5606	Upload a file - like object to a bucket .
5607	Download a file - like object to a bucket .
5608	Copy an object from one bucket to another .
5609	Delete an object from a bucket .
5610	Shut down the server .
5611	Cancel all tracked transfer coordinators .
5612	Wait for all tracked transfer coordinators to finish .
5613	Read amount bytes from fileobj .
5614	Wrap data into a file - like object .
5615	Returns the UploadInputManager class for the given transfer_future .
5616	Set the exception of the transfer .
5617	Set the result of the operation .
5618	Set the exception of the future .
5619	Return the result of the future .
5620	Mark the task as cancelled .
5621	Submit a task to an executor .
5622	Add a callback that will be called when the task is completed .
5623	Add a failure cleanup function .
5624	Mark the task as done .
5625	Submit a task .
5626	Add a callback that will be called when the future is completed .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate over step function decorators .
5630	Parse the arguments of a step decorator .
5631	Refactor a step .
5632	Iterate over all step function decorators .
5633	Check if the step argument is a string or a list of strings .
5634	Refactor a step from old_text to new_text .
5635	Select the Python parser to use .
5636	Returns a list of objects for the specified team .
5637	Create a person in a team .
5638	Update a membership .
5639	Delete a membership .
5640	Get the current catfact .
5641	Send a new message to a room
5642	Get a list of users in a room .
5643	Delete a membership .
5644	Validate that base_url is a valid URL .
5645	Return True if string is a valid web URL .
5646	Opens a local file .
5647	Check that o is an instance of one of the acceptable types .
5648	Create a dictionary from a list of dictionaries with values .
5649	Check the response code against expected_response_code .
5650	Convert a JSON string into a dictionary .
5651	Parse a string into a WebexTeamsDateTime object .
5652	List items in a team .
5653	Create a new team .
5654	Update an existing room .
5655	Delete a room .
5656	Returns a generator that yields all the objects in the specified organization .
5657	The creation date of the team .
5658	Get the access token from environment variables .
5659	Create a new event .
5660	Update a webhook .
5661	Delete a webhook .
5662	Ensure that next_url is a valid API endpoint URL .
5663	Setter for _wait_on_rate_limit .
5664	Update the request headers .
5665	Return the absolute URL of the given URL .
5666	Make a request and check the response code .
5667	Make a GET request .
5668	Get a list of pages from a URL .
5669	Get a list of items from a URL .
5670	Make a PUT request .
5671	Send a DELETE request .
5672	Create a new user .
5673	List the members of a room .
5674	Create a new message .
5675	Delete a message .
5676	Create a new email address .
5677	Get information about a person .
5678	This API endpoint allows you to update a person
5679	Delete a person .
5680	Get information about the current user .
5681	Get a list of objects .
5682	Get a list of objects .
5683	Creates a new resource with the given name .
5684	Update a team .
5685	Delete a team .
5686	Get a list of objects .
5687	Serialize a dictionary or list of dictionaries .
5688	Get an authorization code for a client .
5689	Returns the last activity date of the team .
5690	Send a new message to the room
5691	Get the Ngrok public URL .
5692	Delete webhooks with the given name .
5693	Create a new Ngrok Webhook .
5694	Main entry point for webhooks .
5695	Command line interface for DSMR .
5696	Read telegrams from the serial port .
5697	Read telegrams from the serial port .
5698	Create a DSMR protocol .
5699	Create an instance of the DSMR reader .
5700	Create a TCP connection to the DSMR server .
5701	Called when data is received .
5702	Called when the connection is lost .
5703	Handle a received telegram .
5704	Parses the telegram data .
5705	Get the version number from the given file .
5706	Ensure that a Python version is supported .
5707	Find all packages in the top directory .
5708	Create a command class from command line arguments .
5709	Creates a command that runs a function on the distribution .
5710	Run a command and return the output .
5711	Ensure that the given targets exist .
5712	Wrap a list of commands in a class .
5713	Create a FileHandler class from the package data and data files spec .
5714	Get a list of files that match the given data specs .
5715	Get package data .
5716	Compile a glob pattern .
5717	Split a path into a list of paths .
5718	Translate glob patterns into a regular expression .
5719	Join a list of strings into a single string .
5720	Translate a glob part into a regular expression .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write the indexes to the database .
5724	Write triggers to the database .
5725	Write the constraints to the table .
5726	Write the contents of the table to the file .
5727	Process a single row .
5728	Write the indexes to the file .
5729	Write the constraints to the file .
5730	Write triggers to file .
5731	Get the number of items in the queue .
5732	Enqueue the given data into the database .
5733	Start a task in the queue .
5734	Builds a WHERE clause for the given extra_predicate .
5735	Simple JSON serializer for datetime objects .
5736	Reconnect to the MySQL server .
5737	Execute a query and return the first result .
5738	Get a connection to the database .
5739	Run the benchmark .
5740	Attempt to establish a connection to the pool .
5741	Lookup an error code by its number .
5742	Return the number of connections and fairies .
5743	Handle connection failure .
5744	Create a simple QB expression from a dictionary of fields .
5745	Create an UPDATE statement .
5746	Connect to the database .
5747	Set up the database .
5748	Destroy the database .
5749	Start a step .
5750	Stop a step .
5751	Load the start and stop attributes from raw_steps .
5752	Disconnect from the API .
5753	Reconnect to the server .
5754	Connect to the server .
5755	Called when a new message is received .
5756	Stop the timers .
5757	Send a ping to the API .
5758	Check if a Pong has been received .
5759	Send a payload to the API .
5760	Clear the paused flag .
5761	Handle a system message .
5762	Handle information about the client .
5763	Handler for error messages .
5764	Pass data to client .
5765	Resubscribe all channels .
5766	Handle an auth event .
5767	Handle a configuration event .
5768	Update the timestamp of a channel .
5769	Reset the connection to the server .
5770	Return a list of candles for a given pair .
5771	Send a bitfinex config event .
5772	Subscribe to a ticker .
5773	Unsubscribe from a ticker .
5774	Subscribe to the order book
5775	Unsubscribe from the order book
5776	Subscribe to a raw order book .
5777	Unsubscribe from raw order book .
5778	Subscribe to trades
5779	Unsubscribe from trades
5780	Subscribe to candles .
5781	Unsubscribe from candles .
5782	Authenticate with the API .
5783	Cancel an order .
5784	Callback when a command is received .
5785	Callback when a device command is received .
5786	Callback when a message has been received .
5787	Create a new device type
5788	Publish an iot - 2 event .
5789	Update a device .
5790	Returns a list of ClientStatus objects matching the given criteria .
5791	List custom bundles
5792	Create a custom bundle
5793	Update a schema definition .
5794	Disconnect from the IBM Watson IoT Platform .
5795	Called when a connection has been established .
5796	Subscribe to events from a device .
5797	Subscribe to device status .
5798	Subscribe to device commands .
5799	Publish a command to a device .
5800	Called when an unsupported message is received .
5801	Callback when a device event is received .
5802	Callback when a device status event is received .
5803	Callback when an application status is received .
5804	This API endpoint allows you to get the last event for a specific device .
5805	Get all events for a given device .
5806	Make an API call to the API .
5807	Initiate a new management request .
5808	Get the status of a request .
5809	Close the index .
5810	Count the number of points in a set of coordinates .
5811	Find the nearest neighbors of a set of coordinates .
5812	Get the bounds of the index .
5813	Delete a coordinate from the index .
5814	Create an Index from a stream .
5815	Load a byte array from the specified page .
5816	Remove an object from the tree .
5817	Error checking for Error calls
5818	Load the application .
5819	Initialize Flask - Common extension .
5820	Serve the application .
5821	Convert to native value .
5822	Crop the image on the center point .
5823	Process an image and save it to a file .
5824	Process an image and save it to a file .
5825	Process an image and save it to a file .
5826	If data is a VersatileImage object open it and return it .
5827	Process the placeholder image .
5828	Update the PPOI field .
5829	Update the PPOI field of an instance .
5830	Set the PPOI field on the form instance .
5831	Set form_class to SizedImageCenterpointClickAdminField .
5832	Convert an object to a string .
5833	Autodiscover the versatileimagefield module .
5834	Unregister a SizedImage subclass .
5835	Unregister a FilteredImage subclass .
5836	If the field has a placeholder_image_name return the url of that placeholder image .
5837	Build the filters and sizers for this field .
5838	Returns the path to the root folder of the filtered image .
5839	Returns the path to the root folder of the resized image .
5840	Returns the path to the root folder where the images are filtered .
5841	Delete all matching files from the storage .
5842	Preprocess image according to image_format .
5843	Preprocess a GIF image .
5844	Preprocess a JPEG image .
5845	Retrieve an image from the storage .
5846	Save an image file to disk .
5847	Return the PPOI as a string .
5848	Create a resized image from an image file .
5849	Render a ClearableFileInputWithImagePreview widget .
5850	Returns the context for the ClearableFileInputWithImagePreview widget .
5851	Return a copy of base_attrs with extra_attrs .
5852	Returns the path to the resized file .
5853	Given a path_to_image and filename_key return the path to the filtered file .
5854	Validate a list of versatile image field sizes .
5855	Get a URL from an image key .
5856	Returns the Rendition Key Set for a given Rendition Key .
5857	Return a string representation of an instruction .
5858	Format a function body .
5859	Decode an instruction from a byte string .
5860	Decode a module .
5861	Decorator to mark functions as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read a result from the server .
5865	Handle a FastAGI request .
5866	Parse an agi result line .
5867	Check the status code of the Agi server .
5868	Reset all instances to their default values .
5869	Return a list of instances with the same prefix and uid .
5870	Get metadata from setup . py .
5871	Get the primary keys of a model .
5872	Deserializes the value .
5873	Get an existing instance from the query .
5874	Returns the declared fields for the given model .
5875	Deserializes data into a model instance .
5876	Split kwargs and association_attrs from association data .
5877	Delete all orphan snapshots .
5878	Create a snapshot of a database .
5879	List all available snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replace an existing snapshot .
5884	Updates indexes after each epoch for shuffling
5885	Clean text according to textacy .
5886	Apply a function in parallel to a list of data .
5887	Return a function that takes a clean function and a tokenizer function and returns a list of tokens .
5888	Process text .
5889	Process text using parallelization .
5890	Generate statistics about document length .
5891	Returns the word counts as a pandas DataFrame .
5892	Map a param type to a list of types .
5893	Parse a list of interfaces into a dictionary .
5894	Returns the inverse of the receiver .
5895	Update the dictionary with a rollback .
5896	Return a copy of the current state .
5897	Return a copy of the receiver .
5898	Return True if self is equal to other False otherwise .
5899	Get the inverted values of an argument .
5900	Clear the state .
5901	Move a node to the end of the forwarding chain .
5902	Write text to a temporary file .
5903	Get a list of contacts matching the given query .
5904	Merge args into config .
5905	Load address books .
5906	Prepare the search_terms and target_search_terms for a query .
5907	Create a new contact .
5908	Displays the birthdays of a list of VCard objects .
5909	Returns a list of all phone numbers that match the search_terms .
5910	List contacts .
5911	Modify a contact .
5912	Remove a contact from the address book
5913	Run the source command .
5914	Subcommand for merging a list of vCards .
5915	Copy or move a contact to another address book .
5916	Get the action for the given alias .
5917	Convert a boolean parameter to a boolean value .
5918	Create a new contact object .
5919	Create an object from a file .
5920	Create a new contact object from user input .
5921	Create a new contact object from an existing contact with a new user input .
5922	Get the names part of a VCard .
5923	Add a category to the vCard .
5924	Parse a type value .
5925	Convert a list to a string .
5926	Convert a string to a datetime object .
5927	Compare uid1 and uid2 .
5928	Search all contacts that match the given query .
5929	Search for contacts that match a regular expression .
5930	Search for contacts by UID .
5931	Search for addresses in the address book .
5932	Get a dictionary of short UIDs .
5933	Get the short UID from a UID string .
5934	Find vCard files in the directory .
5935	Load all vCard files in the address book .
5936	Return the abook with the given name .
5937	Return the list of available architectures .
5938	Return the list of available architectures .
5939	Get the argspec permissive for a function .
5940	Dispatch an argparse . ArgumentParser to the appropriate function .
5941	Prompt the user for input .
5942	Encode value for output_file .
5943	Guess the type and action from the given kwargs .
5944	Add a list of functions to the given parser .
5945	Decorator to change the name of a function .
5946	Decorator to add an argument to a function .
5947	Prompt user for confirmation .
5948	Replace the current query with a new one .
5949	Add a LIKE filter to the query .
5950	Return the cached result of the query .
5951	Returns the first result or None if there are no results .
5952	Delete entities from the database .
5953	Called when an object is deleted .
5954	Add a prefix to a Lua index .
5955	Estimate the number of work in a lua index .
5956	Perform a search on the database .
5957	Count the number of items matching the given filters .
5958	Return a connection object for the given object .
5959	Return the full text representation of the given value .
5960	Refresh the indices of the given model .
5961	Remove all items from the old index .
5962	Add an object to the session .
5963	Return the value for the given pk .
5964	Write to the Lua table .
5965	Save the object to the database .
5966	Deletes the object from the database .
5967	Get one or more objects from the cache .
5968	Register a reduce function for a given type .
5969	Open a semaphore .
5970	Return the number of CPU cores .
5971	Send a result back to the result queue .
5972	Process the call_queue and result_queue .
5973	Add a call item to the queue .
5974	Ensure the executor is running .
5975	Wrap non picklable objects in a CloudPickledObjectWrapper .
5976	Start the server .
5977	Return a new connection object for the given file descriptor .
5978	Get a reusable executor .
5979	Wait for jobs to complete before resizing .
5980	Get the preparation data for a module .
5981	Prepare the process with the given data .
5982	Close all open file descriptors .
5983	Recursively terminate a process without psutil .
5984	Recursively terminate the process with the given pid .
5985	Get the exitcodes of terminated processes .
5986	Format a list of exitcodes as a string .
5987	Entry point for the semaphore tracker .
5988	Ensure that the process is running .
5989	A simple event processor that prints out events .
5990	Disassembles the code .
5991	Interactively interact with trepan .
5992	Split a string into a list of arguments .
5993	Get the stack of a function and its line number .
5994	Run a list of hooks on an object .
5995	Forget the current state of the stack .
5996	Get an integer from an expression .
5997	Get an integer .
5998	Process all commands in the debugger .
5999	add a source file to the command queue
6000	Returns the position of the next token in the string starting at start_pos .
6001	Print an error message to stderr .
6002	Read a command from the input stream .
6003	Close the connection .
6004	Disassemble a message from a code object .
6005	Disassembles code into bytes .
6006	Return a count of the number of frames
6007	Get the name of the call function .
6008	Print count entries of the stack trace
6009	Look for a subcommand with the given prefix .
6010	Display the short help of a sub - command .
6011	Add a subcommand callback .
6012	Run a sub - command .
6013	Start the debugger .
6014	Show commands in a specific category .
6015	Display information about the current line .
6016	Find the frame that is currently being debugged .
6017	Map thread names to thread ids .
6018	Get an integer from an argument .
6019	Get the value of an on or off flag .
6020	Set the boolean value of an object .
6021	Set an integer value .
6022	Show a boolean value .
6023	Display the current value of an integer .
6024	Show the current value of a variable .
6025	Return True if the given line is a definition statement .
6026	Return True if the given line is a class definition .
6027	Quit the current thread .
6028	Set default background color .
6029	Check if the given RGB values are dark .
6030	Return the name filename and first line number of the current frame .
6031	Return a list of all available display strings .
6032	Return a list of strings describing the frame .
6033	Return a string representation of the message .
6034	Read a message from the socket .
6035	Send a debug message to the trepan .
6036	Display an undefined subcommand .
6037	This is the main entry point for the debugger .
6038	Pretty print an array .
6039	Look up a signal name by its number .
6040	Look up a signal by its name .
6041	Return the canonic signal name for a given signal number .
6042	Set the signal handler for the given signal .
6043	Check and adjust the sighandlers .
6044	Print information about a signal .
6045	Handle a signal .
6046	Set the print method of a signal
6047	Called when a signal is received .
6048	Convert a file name to a module name .
6049	Search for a file in a list of directories .
6050	If py_script is a file return its path . If dirnames is None return the path of the file .
6051	All python files caller s dir without the path and trailing . py
6052	Write a message to the output .
6053	Run the program .
6054	Return a columnized version of a list of commands .
6055	Post - mortem handler for unhandled exceptions .
6056	Close the connection to the server .
6057	Write a message to the socket .
6058	Completes an identifier with the given prefix .
6059	Add a string to the command queue .
6060	Add frames or functions to the ignore filter .
6061	Return the absolute path of a file that can be used as a filename .
6062	Return the filename to use .
6063	Return True if the tracer is started .
6064	Check if we should stop here .
6065	Sets to stop on the next event that happens in frame frame .
6066	Print the stack trace of a function .
6067	Run the debugger on the current frame .
6068	Check if the given function name matches the given frame .
6069	remove breakpoint bp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable all breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete all breakpoints at the given line number .
6074	Open an input file .
6075	Read a line from the input stream .
6076	Prompt the user for confirmation .
6077	r \ s +
6078	r \ d +
6079	Submit a query and return the result as a future .
6080	Restores the original login from the session .
6081	Load a CAN_LOGIN_AS function from a module path .
6082	Iterate over all documents in the given client .
6083	Command line entry point for Luminoso .
6084	Transcode a JSON file to a stream .
6085	Open a . json or . csv file .
6086	Normalize the data in a stream .
6087	Convert a date string to a float .
6088	Detect the encoding of a file .
6089	Stream json lines from a file .
6090	Transcode a file to UTF - 8 and return it .
6091	Open a CSV file in Python 2 .
6092	Read a csv file .
6093	Entry point for the transcode script .
6094	Connect to a Luminoso server .
6095	Save a token to the token file .
6096	Make a request to the Luminoso API
6097	Perform a DELETE request .
6098	Wait for a build to complete .
6099	Get the root url for a given URL .
6100	Save token to token_file .
6101	Make a JSON request to the Luminoso API .
6102	Make a POST request .
6103	Change the path of a resource .
6104	Get the default account .
6105	Get the documentation from the server .
6106	Wait for a job to finish .
6107	Make a GET request .
6108	Print result as CSV .
6109	Read params from input file and json body .
6110	Simplify a document .
6111	Create a new project with a list of documents .
6112	Upload docs from a file .
6113	Command line interface for Luminoso .
6114	Upload a stream to a Luminoso project .
6115	Upload a file to Google Cloud Storage .
6116	Command line interface for recalculating a project .
6117	Creates a Luminoso token from user credentials .
6118	Login to the server .
6119	Login to iPlanetDirectoryPro .
6120	Get the data for a resource .
6121	Fetch data per period .
6122	Prepare the page for rendering .
6123	Initialize the handler .
6124	Handle GET requests .
6125	Called when a message is received from the server .
6126	Update menus .
6127	Return the default handlers for this site .
6128	Called when an update is received .
6129	Update from enaml .
6130	Create widget element .
6131	Initialize the widget .
6132	Remove this component from its parent .
6133	Add a child to the widget .
6134	Remove a child from this component .
6135	Iterate over all child widgets .
6136	Set an attribute on the widget .
6137	Update the attribute of the proxy .
6138	Notify the root object of the change .
6139	Return a list of nodes that match the XPath query .
6140	Prepare the object for use .
6141	Set the source of the component .
6142	Set the source of the widget .
6143	Called when a mode changes .
6144	Called when a change is made to a block .
6145	Update the children of this node .
6146	Read the contents of one or more pathcomponents .
6147	Print an error message and exit .
6148	Print an error when parsing the command line .
6149	Get a product by its name .
6150	Create a new session .
6151	Reset the XSRF store .
6152	Returns a list of all Stores that match the search term .
6153	Set the delivery system for the given postcode .
6154	Returns the product catalog for the given store .
6155	Add an item to the basket .
6156	Add a pizza to the basket .
6157	Adds a side to the basket .
6158	Removes an item from the basket .
6159	Sets the payment method to CASH_ON_DELIVERY .
6160	Process a payment request .
6161	Make a GET request .
6162	Make a POST request .
6163	Make a call to the API .
6164	Append an item to the menu .
6165	Add an exit item to the list .
6166	Draw the menu .
6167	Process user input .
6168	Select the currently selected item .
6169	Parses the old menu and returns a CursesMenu
6170	Top values in a DataFrame by a given value .
6171	Top group values by a given value .
6172	Convert a string to a datetime .
6173	Convert a datetime column to a string .
6174	Change the date format of a column in a DataFrame .
6175	Cast a column to a given type .
6176	Compute the rank of each column in a DataFrame .
6177	Apply waterfall filter to a DataFrame .
6178	Helper function to perform a basic math operation on two columns .
6179	Round values to specified number of decimals .
6180	Calculates the absolute value of a column in a DataFrame .
6181	Pivot the values of a column on a table .
6182	Pivot values by group .
6183	Group a DataFrame by group_cols and apply aggregation to it .
6184	Compute the cumulative sum of a column .
6185	Add a missing row to a dataframe .
6186	Decorator to catch all exceptions raised by a function .
6187	Log a message to the given logger .
6188	Log the execution time of a function .
6189	Decorate a function to log its input and output shapes .
6190	Rename values or columns in a DataFrame .
6191	Compute the cumulative sum of a dataframe .
6192	Combine the columns of a dataframe with an aggregation function .
6193	Get the value of a parameter from a function call .
6194	Remove up to limit entries from the cachedir .
6195	Roll up a DataFrame by a list of levels .
6196	Find the maximum value of a column in a dataframe .
6197	Remove rows with the minimum value from each group .
6198	Fill missing values in a column .
6199	Add an offset to a date object .
6200	Add a number of months to a date object .
6201	Add nb_years to a date object .
6202	Parse a date string into a date object .
6203	Filter a DataFrame by a date column .
6204	Calculates the percentage of a column in a dataframe .
6205	Adapted from theano . core . ada .
6206	Return the learning updates of the model .
6207	Returns a list of training parameters .
6208	Add free parameters to the network .
6209	Compute the first GLimpse sensor .
6210	Prepare the encoder decoder and classifier .
6211	Computes the final cost of the given tensor .
6212	Apply a function to each element of the dataset .
6213	Vectorizes the target .
6214	Report the current state of the model .
6215	Train the model .
6216	Sample from a set of inputs .
6217	Compute the alignments of the previous state .
6218	Compute the context vector .
6219	Concatenate a list of neural variables .
6220	Pad the dataset to the specified length .
6221	Calculate the RMS of the parameters and gradients .
6222	Print the time elapsed since the start .
6223	Run the model on the input data .
6224	Invoke the monitor .
6225	Build loop variables .
6226	Scan a single step of the loop .
6227	Momentum core .
6228	Set the _training_flag flag to True .
6229	Set the number of batches to skip .
6230	Load parameters from a file .
6231	Train the model .
6232	Run a single training step .
6233	Run the validation step .
6234	Log a report of a score map .
6235	Get the current data set .
6236	Apply a function to this NeuralVariable .
6237	Print out information about the used parameters .
6238	Returns a deepy . tensor . Var
6239	Create a list of NeuralVariable objects from a dataset .
6240	Set the value of the shared variable .
6241	Add a stack of layers to the encoding layer .
6242	Stack decoding layers .
6243	Compute the encoding of x .
6244	Decode the input .
6245	Create a 2D Gaussian .
6246	Register a layer .
6247	Record the mean of the outputs of each layer .
6248	Returns a list of all parameters .
6249	Set up the input and output variables .
6250	Compute the output of the function x .
6251	Save parameters to a file .
6252	Load parameters from a file .
6253	Print out information about the network .
6254	Register a set of parameters .
6255	Register a set of updates .
6256	Register a set of training updates .
6257	Register a set of monitors .
6258	Compute the L2 norm of a list of tensors .
6259	Dump an element to a pickle file .
6260	Load elements from a file - like object .
6261	Load parameters from a file .
6262	Creates the request elements for the given request type .
6263	Decode the user_state parameter .
6264	Parse X - Credentials response .
6265	Remove client_id and client_secret from the request elements .
6266	Login to Werkzeug .
6267	Normalizes a dictionary .
6268	Convert a list of items into a dictionary .
6269	Try to parse a JSON - encoded query string into a dictionary .
6270	Resolve a provider class .
6271	Create a cookie to be used in the response .
6272	Save the session data to the client .
6273	Get the data from the cookie .
6274	Get the data for this request .
6275	Generate a signature for the given parts .
6276	Serialize the given value .
6277	Check if the token is valid .
6278	Returns True if the token has expired after the specified number of seconds .
6279	Return a string representation of the credentials .
6280	Return True if content is a binary string .
6281	Return the content of the response .
6282	Create the request elements for the given request type .
6283	Returns information about the user .
6284	Decorate the FlaskAuthomatic login decorator .
6285	Login to the OpenID server .
6286	Return the session key for the given key .
6287	Set a value in the session .
6288	Generate a random CSRF token .
6289	Log a message to the authomatic logger .
6290	Check if HTTP status is in given category .
6291	Split a URL into the base and query parts .
6292	Decorator to enable cross - origin support .
6293	Add CORS headers to the response .
6294	Returns a dictionary of all the keyword arguments for the given app instance .
6295	Return a flexible string representation of an object .
6296	Ensure that an instance is iterable .
6297	Return True if a is close to b .
6298	Mark a function as deprecated .
6299	Deserialize an audio segment from a pickle string .
6300	Create an AudioSegment from a file .
6301	Create an AudioSegment from a NumPy array .
6302	Execute a sox command .
6303	Filter the WAV file for a duration of duration_s .
6304	Calculate the Fourier Transform of this TimeSeries .
6305	Generate frames from the raw data .
6306	Normalize the audio segment by average .
6307	Return a copy of this segment with the contents of the given others .
6308	Resample the audio file .
6309	Return a serialized version of the object .
6310	Calculate the spectrogram of a time series .
6311	Choose an offset_front_id from candidate_offset_front_ids .
6312	Get the offset front id after the given onset_sample_idx .
6313	Returns the id of the offset front after the given onset front .
6314	Given an onset_front_id and an offset_fronts dictionary return the corresponding onset_front_id .
6315	Get consecutive and overlapping fronts .
6316	Update segmentation_mask with onset_fronts and offset_fronts .
6317	Return the id of the given index in the front .
6318	Given a list of onset_fronts return a generator of all fronts that are not 0 .
6319	Get the offsets corresponding to the given onset fronts and offsets .
6320	Remove overlapping segments from fronts .
6321	Remove fronts that are too small .
6322	Given a set of fronts return a dictionary where the keys are the frequencies of the first and the values are the frequencies of the second and the keys are the frequencies of the second .
6323	Merge adjacent segments .
6324	Separate multiple masks .
6325	Downsample one or the other .
6326	Perform an ASA task .
6327	Apply a bandpass filter to data .
6328	Apply a low - pass butter filter to data .
6329	Convert a list of data to a tf . Input .
6330	Expand and standardize a dataset .
6331	Compare two lists ignoring order .
6332	Given a list of audit files and a measurer return a dictionary mapping each audit file to its rank .
6333	Load the confusion matrices from an audit file .
6334	Convert a list of data to a tf . Input matrix and a list of outcomes .
6335	Update the index URL from the configuration files .
6336	Autodetect the requirements . txt and requirements . pip files .
6337	Returns a list of all streams that have been resolved .
6338	Returns a list of StreamInfo objects for the given property and value .
6339	Resolve a predicate to a list of streams .
6340	Handle an error .
6341	Push a sample to the stream .
6342	Push a chunk of data to the stream .
6343	Get information about the stream .
6344	Open a stream for reading .
6345	Perform time correction on the LSL object .
6346	Returns the child element with the given name .
6347	Get the next sibling of this element .
6348	Return the previous sibling of this element .
6349	Set the name of the LSL object .
6350	Set the value of the field .
6351	Append a child element to this element .
6352	Prepend a child element to the end of this element .
6353	Append a copy of elem to this element .
6354	Return a new XMLElement with the contents of elem appended to this one .
6355	Remove a child from this element .
6356	Returns a list of StreamInfo objects representing the results of this resolver .
6357	Pair a word .
6358	Autocomplete edge n - grams .
6359	Computes the edge n - grams of a token .
6360	Iterate through a list of processors for a pipe .
6361	Map a function over an iterable .
6362	Make a fuzzy version of the given word .
6363	Fuzzy search .
6364	Find the fuzzy index of a word .
6365	Extend results with extrapoling relations .
6366	Prints the help for the specified command .
6367	Display information about redis databases .
6368	Get the value of a key .
6369	Do a GEOHASH operation on a point .
6370	Get a list of housenumbers .
6371	Index a document .
6372	Print the highest score of a word .
6373	Compare two strings .
6374	Send a request and return the response .
6375	Map a list of requests to a list of responses .
6376	Get bits from an array of bytes .
6377	Convert an interptet HArray to a bits object .
6378	Convert a slice to a Slice instance .
6379	Find all files matching a pattern in a directory .
6380	Returns True if sigOrVal is in iterable False otherwise .
6381	Create a static for each statement .
6382	Logical shift left
6383	Return the log2 ceiling of x .
6384	Return True if num is a power of 2 .
6385	c - like case of switch statement
6386	Add a default statement .
6387	Register the interfaces of the given object with the given parent .
6388	Called at the beginning of the simulation .
6389	Log a change .
6390	Return the HDL representation of the given method .
6391	Return a list of agents that can be added to the unit .
6392	Returns the associated clk for this unit .
6393	Given an iterable and a function that returns the distinct elements of the iterable .
6394	Group items in a collection by a function .
6395	Flatten a list of iterables .
6396	Merge nested IfContainer from else .
6397	Remove all unconnected signals from the given netlist .
6398	Check if the statement is too simple .
6399	Try to merge two processes .
6400	Reduce processes by rank .
6401	Called when a write request is received .
6402	Convert a unit or class to its RTL form .
6403	Given a list of HdlStatements return the name of the first output in the list of HdlStatements .
6404	Given a list of statements cut off drivers of the given signal .
6405	Create a new RtlSignal with the given name and type .
6406	Synthesize the machine .
6407	Get the maximum STM ID for a STM .
6408	Returns the maximum identifier for each statement in the statement .
6409	Write data to the interface .
6410	Change the direction of the interface .
6411	Load the declarations for this interface .
6412	Returns a list of all the signals for this interface .
6413	Returns the physical name of this port .
6414	Return the bit length of this type .
6415	Returns the sensitivity of an operation .
6416	Evaluate an operator .
6417	Convert sigOrVal to toType .
6418	Reinterpret the bits in sigOrVal into a HStruct .
6419	Return the number of words between start and end .
6420	Group items by word index .
6421	Pretty print an interface .
6422	Generate frames from a TransTmpl object .
6423	Walk through each part of the Transword .
6424	Pack the data into a sequence of values .
6425	Clean up the signal meta data .
6426	Given a list of HdlStatements and a list of HdlOutputs discover the enclosure for each HdlStatement .
6427	Discovers the sensitivity sequence of the signals .
6428	Get the right - hand - side context for this statement .
6429	Called when the HDL has been reduced .
6430	Merge other with this one .
6431	Return True if stmsA and stmsB are mergable .
6432	Merge a list of HdlStatements into a single HdlStatement .
6433	Merge two lists of HdlStatements .
6434	Reduce a list of HdlStatements .
6435	Called when the parent event is marked as event - dependent .
6436	Set the parent HdlStatement .
6437	Add the given list of HdlStatements to the target list .
6438	Destroy this statement .
6439	Create a new register with the given name and dtype .
6440	Create a new signature with the given name and dtype .
6441	Clean the entity as a subunit .
6442	Iterate over the fields of a nested HStruct or HArray .
6443	Unpack data into structT .
6444	Return an operator that signs this value .
6445	Set the sensitivity of a process .
6446	Evaluate a set of conditions .
6447	Connect a port from one SimUnit to another .
6448	Create an updater that updates the current value with the next value .
6449	Make an array updater .
6450	Convert a value to a vector .
6451	Register HWProcess objects .
6452	Evaluate the value of a param .
6453	Set the value of this parameter .
6454	Create an HStruct from an interface map .
6455	Finalize the memories .
6456	Get the index cascade .
6457	Return the value of the field from the given Python value .
6458	Auto cast sigOrVal to toType .
6459	Reinterprets sigOrVal to toType .
6460	Iterate over all parameters of an interface .
6461	Connect srcPacked to dstInterface .
6462	Pack an interface into a signature .
6463	Hardcode ROM into a HWProcess .
6464	Convert this configuration to its RTL representation .
6465	Registers an interface in the interface manager .
6466	Try to reduce the values of sig and val .
6467	Try to reduce val to sig .
6468	Returns the base name scope .
6469	Determine if the given object should be serialized .
6470	Serialize a HdlType object .
6471	Serialize an IfContainer into a string .
6472	Get the base condition for the given condition .
6473	Returns a SimBitsT instance with the given width and signed flag .
6474	Get the name of a constant .
6475	Cut off drivers of the given signal .
6476	Load an array from memory .
6477	Create a TransTmpl object from a HStruct .
6478	Load data from a HdlType .
6479	Returns the number of items in this array .
6480	Walk the structure and all its children into a single transaction .
6481	Fix sign if val is greater than zero .
6482	Merge another IfContainer with this one .
6483	Get the indent string for the given number of spaces .
6484	Raises an IntfLvlConfErr if the object already has a property with the given name
6485	Register a parameter with this scope .
6486	Update the parameters of this PropDeclrCollector from anotherObj .
6487	Register a unit .
6488	Register an interface .
6489	Registers an array with the given name .
6490	Return a single driver .
6491	Performs a static evaluation of the expression .
6492	Create a new RtlSignal from opDef and operands .
6493	Return a copy of this context with the given indent .
6494	Try to connect to the given interface .
6495	Propagate the clk to all units .
6496	Propagate clk and rst_n to all units .
6497	Propagate clk and rst to all units .
6498	Propagate the rst_n to all units in the object .
6499	Propagate the RST to all units in the object .
6500	Iterate over the bits of a RtlSignal or Value .
6501	Internal helper for serializeExcludeEval .
6502	Prepare the object for serialization .
6503	Internal helper for serializeParamsUniq .
6504	Get the full name of the interface .
6505	Create an association for each object in the collection .
6506	Prepare a SimModel for the given unit .
6507	Convert a unit to a SimModel instance .
6508	Re - connect the unit signals to the model .
6509	Convenience function to run a unit - cd analysis on a model .
6510	Initialize the onTWriteCallback method .
6511	Connect this port to a signal .
6512	Registers a signal for this port .
6513	Connect this endpoint to an external signal .
6514	Get the instruction signature .
6515	Check if an event is dependent on a particular process .
6516	Add a process to the queue .
6517	Add a proc to the run list .
6518	Schedule a combination update done event .
6519	Schedule values to be applied .
6520	Returns a callable that will be called when a conflict is resolved .
6521	Run all combinatorial processes .
6522	Run all sequence processes in sequence .
6523	Apply values .
6524	Read the value of the given signature .
6525	Write a value to a signal .
6526	Add a process to the queue .
6527	Simulates the given synthesised unit .
6528	Create an operator that applies fn to all operands .
6529	Convert a list of ternary operators to an IfContainer .
6530	Returns a HWProcess instance for the given proc .
6531	Calculate the Hamming distance between two hashes .
6532	Calculate the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup Vizio platform .
6535	Update the power state .
6536	Mute the volume .
6537	Adjusts the volume level .
6538	Decrease the volume level .
6539	Set the volume level .
6540	Reset the board to its initial state .
6541	Return the piece at the given square .
6542	Remove a piece from the board .
6543	Set the piece at the given square .
6544	Checks if the given move is suicide or check by dropping pawn .
6545	Return True if the player was suicide .
6546	Returns True if the game is over .
6547	Checks if the move is a checkmate .
6548	Return True if the zobrist is a fourfold repetition .
6549	Pop a piece off the stack .
6550	Return the string representation of the file .
6551	Push a USI move onto the stack .
6552	Calculate the Zobrist hash .
6553	Get the symbol of the piece .
6554	Create a color from a symbol .
6555	Returns the USI representation of the piece .
6556	Create a piece from a USI string .
6557	Parse the data into a list of commit objects .
6558	Parse a commit block into a dictionary .
6559	Load config from CLI arguments .
6560	Execute from command line with config .
6561	Add an argument to an argparse . ArgumentParser .
6562	Load config from file .
6563	Generate a YAML representation of the configuration .
6564	Generates a markdown representation of the class .
6565	Cast the value to the correct type .
6566	Returns a list of dates between first_date and last_date
6567	Parse a date from a string .
6568	Load a currency file .
6569	Set missing rates to None .
6570	Compute the missing rates for the given currency .
6571	Get the rate for the given currency and date .
6572	Convert amount to new_currency .
6573	Return a list of n elements from an iterable .
6574	Animate a set of frames .
6575	Read a record from the file .
6576	Write a record to the file .
6577	Map words from start to end in memory .
6578	Read the DAF file comment area .
6579	Add an array to the file .
6580	Close the DAF file .
6581	Computes the position of the given tdb .
6582	Close the DAF file .
6583	Load the PCK data .
6584	Compute the derivative of the segment between two time series .
6585	Check if a call is within a logging statement .
6586	Checks whether the given binary operation is within the logging statement and if it is within the logging argument .
6587	Check that all keys in the dictionary are in the whitelist .
6588	Check if the given node is a joined string .
6589	Check if the keyword is in the whitelist .
6590	Visit an except handler node .
6591	Detect the logging level of the given node .
6592	Get the name of the except handler .
6593	Get the id attribute of the given value .
6594	Check if the given node is a bare exception .
6595	Check for exc_info keyword arguments .
6596	Delete a file from the database if it exists .
6597	Add a get_context and get_template_substitution_values to the widget .
6598	Returns the rendered PDF content .
6599	If the response_class is a PDFTemplateResponse it will return the rendered PDF .
6600	Return a string that can be used as an HTTP quote .
6601	Configure MONGODB options from a module .
6602	Converts a string to an underscored string .
6603	Auto index the collection .
6604	Parse a file into a list of PriceModel objects .
6605	Load the content of a file .
6606	Parse a line into a PriceModel object .
6607	Translate a symbol .
6608	Loads all available symbol maps .
6609	Get the current session .
6610	Add a new price .
6611	Import prices from CSV file .
6612	Get the latest price for a symbol .
6613	List prices for a given date and currency .
6614	Download prices .
6615	Remove old price entries for a security symbol .
6616	Get the default database session .
6617	Add a symbol map to the database .
6618	List all available symbol maps .
6619	Get a symbol map by its id .
6620	Read lines from a CSV file .
6621	Map an entity to a PriceModel .
6622	Map a PriceModel to an Entity .
6623	Read configuration file .
6624	Get the path to the config file .
6625	Copy config file to user dir .
6626	Get the path to the config file .
6627	Get the contents of the configuration file .
6628	Set the value of an option .
6629	Get the value of an option from the configuration .
6630	Saves the configuration to a file .
6631	Parse a symbol into its namespace and mnemonic .
6632	Add a Price model .
6633	Add a price entity to the database .
6634	Download a price .
6635	Get the current session .
6636	Get all prices for a given date and currency .
6637	Get the price for a symbol on a given date .
6638	Prune all security symbols .
6639	Remove all prices for the given symbol .
6640	Download a price from an agent .
6641	Get securities for a currency agent symbol and namespace .
6642	Return the partial state of the function .
6643	Update the child calls .
6644	Iterate over the descendents of this node .
6645	Decorator that decides whether a function should be called multiple times .
6646	Check if student and solution parts have the same length .
6647	Check that the AST is equal to the AST .
6648	Assert that the student code contains the given text .
6649	Assert that a package has been imported .
6650	Tests if the student has output text .
6651	Check if a printout exists in the solution .
6652	Assert that there is no error .
6653	Test if the student process has chosen an option .
6654	Check a function call .
6655	Return the result of a result from a process .
6656	Override a solution with a new one .
6657	Check if an object is an instance in the solution process .
6658	Return a list of all defined items .
6659	Convert the state to a child state .
6660	Get an attribute from a tree .
6661	Check if there is a context loop .
6662	Check if the state has a context with the given names .
6663	Check a student or solution part .
6664	Check if a part with the given index exists .
6665	Check the arguments of a function .
6666	Check if a function call is valid .
6667	Get the true anomaly .
6668	Initialize the ldap3 login manager .
6669	Initialize the LDAP configuration .
6670	Add an LDAP server to the pool .
6671	Decontextualise a connection .
6672	This method is called when an exception is raised .
6673	Authenticate with the LDAP server .
6674	Authenticate using a direct bind to the LDAP server .
6675	Perform an LDAP Search using the given username and password .
6676	Get a list of groups for a user .
6677	Get information about an LDAP user .
6678	Get user info for a given username .
6679	Get an object from an LDAP server .
6680	Create a connection to the LDAP server .
6681	Creates a connection to the database .
6682	Create a connection to the LDAP server .
6683	Destroy a connection .
6684	Search for objects matching the given query .
6685	search for labels
6686	search for items in the collection
6687	search for all artifacts in a collection
6688	speak the client .
6689	Announce a command .
6690	update secrets from environment variables
6691	update self . headers with fields
6692	require client secrets
6693	download url to file_name
6694	stream the response to stream_to
6695	update the Authorization header with the token
6696	Get or create a folder if it doesn t exist .
6697	Read the response body and return it as a dict .
6698	get the bucket to use
6699	Update the client secrets .
6700	Initializes the authentication client .
6701	Load the secrets from the settings file .
6702	List all logs . If no name is provided all logs are printed .
6703	list all logs in the bucket
6704	create a folder in an endpoint
6705	Initialize the transfer client .
6706	search for all containers
6707	Show the current status of the registered clients .
6708	add variable to client secrets
6709	remove variable from client secrets
6710	Activate the given registry backend .
6711	Delete a client secret from the registry .
6712	Set the default base for the image .
6713	Create a basic auth header .
6714	Generate a signature for the given payload and secret .
6715	Generate the header signature for a request .
6716	make a DELETE request
6717	make a HEAD request
6718	Paginate a GET request .
6719	check if SSL certificate is enabled
6720	Remove an image from the registry
6721	Get a dictionary of version information .
6722	Get the list of install requirements .
6723	get Singularity version
6724	check if the given software is installed
6725	Get the path to the install directory .
6726	Return the path to the thumbnail .
6727	Run a command and return the output .
6728	Get metadata for an image .
6729	Update the secrets .
6730	print the response to the console
6731	Kills all registered commands .
6732	List logs for a container .
6733	Get a list of all collections
6734	Update the secrets .
6735	update self . _secrets
6736	Get Singularity client .
6737	Run an IPython script .
6738	get manifests for a repo
6739	get the manifest for a repository
6740	Returns the path to the temporary directory that will be used to download the cache .
6741	extract environment variables from config file
6742	update the base url
6743	Update the headers with the private token .
6744	Get the metadata for the project .
6745	Get client secret settings .
6746	check if setting exists and if not update it
6747	Update a client secret setting .
6748	Generate a SREGISTRY - HMAC - SHA256 signature .
6749	List available builders .
6750	load all templates with the given name
6751	get the IP address of an instance
6752	Create a new instance and run it
6753	list all containers in the bucket
6754	search for all containers in the bucket
6755	List all objects in the registry .
6756	Main entry point for sregistry .
6757	Initialize the database .
6758	get the build template
6759	search for shared endpoints
6760	list all endpoints
6761	list all files in an endpoint
6762	share an image with the dropbox server
6763	Read the client secrets from the secrets file .
6764	Get the storage and compute services .
6765	Delete an object from a bucket .
6766	delete a file
6767	destroy an instance
6768	Returns a dictionary of all sub - parsers for the given parser .
6769	Generate a random string .
6770	Returns the path to a temporary directory .
6771	extract a tar archive to output_folder
6772	extract a tar archive
6773	Get the hash of a file .
6774	Read the content of a file .
6775	Read a JSON file .
6776	clean up files
6777	push image to S3
6778	Get or create a collection if it doesn t exist .
6779	Get a collection by name .
6780	Get a container by name collection_id and tag
6781	get a list of all images
6782	Inspect a container .
6783	rename an image
6784	move image to specified path
6785	remove an image
6786	add an image to the registry
6787	push an image to the registry
6788	Parse the header from the given recipe .
6789	Find a single recipe for a given file .
6790	create a build package from a list of package files
6791	run a build
6792	Update the metadata for a blob .
6793	Format a container name .
6794	Return True if the user wants to use color .
6795	Check if we should emit an error .
6796	Write message to stream .
6797	Print a table .
6798	push an image to a remote endpoint
6799	get a template by name
6800	get the manifest for an image
6801	get the build template
6802	update the client secrets
6803	Make a string representation of a class .
6804	A context manager for s3 errors .
6805	Creates a new file - like object and returns it .
6806	Returns the gravatar url for the given user .
6807	Returns the gravatar url for the given email .
6808	Check if the given email has a gravatar .
6809	Returns the gravatar profile URL for the given email .
6810	Generator for chimera blocks .
6811	Create a chimera block - quotient graph from a chimera graph .
6812	Enumerate resonance smiles .
6813	Enumerate the Resonance Molecules .
6814	Normalize a molecule .
6815	Apply a transform to a molecule .
6816	Return the canonical representation of the molecule .
6817	Validate smiles .
6818	Remove covalent bond between atoms .
6819	Standardize smiles .
6820	Enumerate tautomers from smiles .
6821	Convert smiles to tautomer smiles .
6822	Standardize a molecule .
6823	Return the tautomer parent of the given molecule .
6824	Return the parent fragment of the given molecule .
6825	Remove the stereo chemistry from the molecule .
6826	Returns a copy of the molecule with isotopes set to 0 .
6827	Return the uncharged parent of a molecule .
6828	Returns the super parent of the given molecule .
6829	Entry point for the Molvs script .
6830	Remove fragments from a molecule .
6831	Run LargestFragmentChooser on a molecule .
6832	Integrate an ivp - time series .
6833	Get the stats from github .
6834	Get the members of the organization .
6835	Get the teams of the organization .
6836	Get all repos in the organization .
6837	Get the total number of contributors for a repository .
6838	Get the number of open and closed pull requests for a repository .
6839	Get all issues for a repository .
6840	Get the readme of a repository .
6841	Get the license for a repository .
6842	Get the number of commits in a repository .
6843	Write a JSON file for the given organization and date .
6844	Write the totals to a file .
6845	Write the languages to a file .
6846	Check if the directory exists and if not create it .
6847	Remove a date from a CSV file .
6848	Returns a list of all organizations in the Government Github repository .
6849	Create a GitHub Enterprise session .
6850	Check the API limits .
6851	Connect to GitHub .
6852	Query repositories .
6853	Get an organization .
6854	Write the stargazers to a file .
6855	Create a new Project object from a gitlab Repository object .
6856	Create a new Project object from a DOE CODE record .
6857	Return the object for the given license .
6858	Get the traffic for each repo .
6859	Get the list of releases for a repository .
6860	Get a list of referrers for a repository .
6861	Get data for a given type .
6862	Write a JSON file for each repo .
6863	Write the data to a file .
6864	Check for data redundancy .
6865	Write data to a file .
6866	Write referrers to a file .
6867	Process DOE CODE json file .
6868	Process a DOE CODE API URL .
6869	Process a JSON file or URL .
6870	Login to GitHub .
6871	Get members email addresses .
6872	Write logins to a file .
6873	Connect to a stashy server .
6874	Connect to the Gitlab server .
6875	Query a list of repositories .
6876	Get the SLOC of a git repository .
6877	Compute the labor hours for a given sloc .
6878	Remove None and empty strings from a dictionary .
6879	Read a GQL query from a file .
6880	Query GitHub from a GQL file .
6881	Submit a GraphQL query to the GitHub server .
6882	Wait until the given UTC Timestamp has expired .
6883	Wait for a number of seconds to complete .
6884	Load data from a JSON file .
6885	Save data to a JSON file .
6886	Create a TFS connection .
6887	Create a TFS project analysis client .
6888	Create a TFS core client .
6889	Create a TFS Git Client .
6890	Create a TFS Git Client .
6891	Get the list of Git repositories for a collection .
6892	Get a list of Tfvc repositories for a collection .
6893	Get the number of commits for the current year .
6894	Calculate the total number of commits for each week .
6895	Write the stats to a csv file .
6896	Configure a set of backends .
6897	Return a MetricsInterface object for the given thing .
6898	Send a timing event to all metrics backends .
6899	Context manager for timing stats .
6900	Decorator to add a timer to a function .
6901	Generates a tag from the given key and value .
6902	Log timing information .
6903	Log a histogram .
6904	Roll up to the next flush interval .
6905	Return a case where the given field is ordered by the given members .
6906	Return the enum value from the database value .
6907	Converts the given value to the appropriate Python type .
6908	Return the name of the value to be prepared .
6909	Resolve a path to a set of objects .
6910	Project a list of USLs into a dictionary .
6911	Return the mean of the histogram .
6912	Add a value to the counter .
6913	Return the mean rate .
6914	Mark the value of the derivation .
6915	Send a metric to the server .
6916	Serialize a metric .
6917	Format a metric string .
6918	Add a metric to the buffer and send it .
6919	Return the value of an option from a section .
6920	Ensure JSON data is utf - 8 encoded .
6921	Get or set the value of an option .
6922	Get a mapping from ledger code to guid .
6923	Get a list of available divisions .
6924	Map an exact to foreign invoice numbers .
6925	Solve a sudoku grid .
6926	Create a view from the given injector .
6927	Create a form view from the given injector .
6928	Create a method view on the given injector .
6929	Create an API view .
6930	Create a generic API view .
6931	Add ModelViewSet methods to the injector .
6932	Read a stream from an open file descriptor .
6933	Read data from the file descriptor .
6934	Close the connection .
6935	Call the protocol s connection_lost method .
6936	Schedule a watch for a file or directory .
6937	Unwatch the given watch alias .
6938	Setup an inotify watch .
6939	Setup the inotify client .
6940	Read an event from the stream .
6941	Trigger a TOUCH event .
6942	Decrease the interval .
6943	Update short_interval and long_interval .
6944	Close all connections .
6945	Return True if all connections have been starved .
6946	Connect to nsqd .
6947	Send a GET request to the lookupd server .
6948	Set the maximum number of in - flight connections .
6949	Log a warning when a message is giving up .
6950	Add a callback to listen for events .
6951	Remove a callback from the specified listener .
6952	Trigger an event with the given name .
6953	Publish a message to a topic .
6954	Set the feature transform mode and degree .
6955	Calculate the prediction of the data .
6956	Calculate the angle at a given time .
6957	Parse the log file .
6958	Clean up temporary fastq files .
6959	Merge the default adapters into a FASTA file .
6960	Run trimmomatic .
6961	Read a depth file and return a dictionary of dictionary coverage .
6962	Create a dictionary of plasmid lengths from a depth file .
6963	Set the template to use .
6964	Set the input and output channel names .
6965	Get information about a user channel .
6966	Render a template with the given context .
6967	Render the template and return the string .
6968	Set the input and output channels .
6969	Update the main_forks attribute .
6970	Set the secondary channel for the given source .
6971	Update the attributes of the component .
6972	Sets the compiler channels for this process .
6973	Set raw inputs using raw_input dict .
6974	Set secondary inputs .
6975	Add extra inputs to the context .
6976	Parse the coverage header from a header string .
6977	Parse the assembly file into a list of contigs .
6978	Get the GC content of a sequence .
6979	Filter the contigs based on the given comparisons .
6980	Returns the total length of the assembly .
6981	Write the assembly to output_file .
6982	Write the assembly report to a file .
6983	Remove all inner forks from text .
6984	Check that all of the forks in the pipeline string are valid .
6985	Run insanity checks on a pipeline string .
6986	Parse a pipeline string .
6987	Get the source lane of a fork process .
6988	Parse lanes from raw string .
6989	Establish a linear connection with a list of processes .
6990	Establish a fork connection between two processes .
6991	Add unique identifiers to the pipeline string .
6992	Remove unique identifiers from the input and output pipeline links .
6993	Check that the required files exist .
6994	Convert a header string to a mapping .
6995	Convert a string into a number of seconds .
6996	Return the size coverter of a string .
6997	Get the processes and process tags for the pipeline .
6998	Clear the current inspect state .
6999	Update the barrier status of the processes .
7000	Retrieve the contents of a log file .
7001	Assess resource warnings .
7002	Update process stats .
7003	Parse the log file .
7004	Update the inspector .
7005	Display an overview of the nextflow log .
7006	Move the cursor up or down .
7007	Add padding to the right of the screen .
7008	Get the last n lines from the log file .
7009	Prepare static information about the pipeline .
7010	Load the . treeDag . json file into a dictionary .
7011	Get the hash of the current run .
7012	Get the path to the nextflow . log file .
7013	Create a FASTA file from an assembly file .
7014	Run the pipeline status routine .
7015	Run a Brew innuendo pipeline .
7016	Find the brew recipe with the given name .
7017	List all registered recipes .
7018	Validate that the given pipeline string is valid .
7019	Build the upstream pipeline for a task .
7020	Builds the downstream pipeline for the given task .
7021	Define the pipeline for the given tasks .
7022	Run the auto - pipeline for the given tasks .
7023	Get a string representation of a component .
7024	Write a report to a JSON file .
7025	Main function for trimmomatic_report .
7026	Fix contig names in asseembly .
7027	Clean up temporary fastq files .
7028	Parse a list of files .
7029	Parse a log file into a dictionary .
7030	Iterate through the storage with the given filters .
7031	Get the contig ID from a contig string .
7032	Get the plot data from the storage .
7033	Write the plot and table data to . report . json .
7034	Main function for the assembly report .
7035	Parse the assembly file .
7036	Get summary statistics about the contigs .
7037	Returns a list of labels for each contig in the given window .
7038	Calculate the GC propensity of a sequence .
7039	Get a list of GC sliding contigs .
7040	Main function for skesa .
7041	Write a report to a JSON file .
7042	Returns the index in the list that should be trimmed .
7043	Trims the nucleotide bias assessment from the given data file .
7044	Get the maximum and minimum number of samples between two data sets .
7045	Get the summary information from a file .
7046	Check the health of a summary file .
7047	Parse the Bowtie log .
7048	Parse a process name from a string .
7049	Add a dependency to a process .
7050	Return True if template is in parent_lanes False otherwise .
7051	Build the header .
7052	Build the footer .
7053	Set the channels for all processes .
7054	Set main raw inputs and extra inputs .
7055	Set the secondary channels .
7056	Set the status_channels attribute of each process .
7057	Returns a string representation of the resources dictionary .
7058	Get a string representation of a container configuration .
7059	Returns a string representation of the parameters for each process .
7060	Returns a string with the merged parameters .
7061	Returns a string representation of the manifest .
7062	Set the configurations of the process .
7063	Write a dictionary to a DAG file .
7064	Render the pipeline .
7065	Write the configuration files to the project root .
7066	Write params to stdout .
7067	Export the directives for all processes .
7068	Fetch docker tags from all processes .
7069	Build the NF file .
7070	Set the range of kmers to use .
7071	Run metaSPAdes assembler .
7072	Get the report id from the report file .
7073	Update the size stamp of the trace file .
7074	Update the log file size stamp .
7075	Send a live report to the server .
7076	Send initial POST request to start report live update
7077	Close the connection to the server .
7078	Convert the adatpers file to a FASTQ file .
7079	Run fastqc on the given fastq pair .
7080	Send Mash Dist to Mash output .
7081	This is the main entry point for the mash script .
7082	Add version information to . versions file .
7083	Generate a json file from a MASH output file .
7084	Return a string with a colored version of msg .
7085	Parse the procs_dict .
7086	Run all the processes in the process map .
7087	Try to guess the compression type of a file .
7088	Get the minimum and maximum qualification range from a string .
7089	Get a list of encodings and phred encodings in a given range .
7090	Parse the coverage table .
7091	Filter assembly file to include only contigs with a minimum coverage .
7092	Apply samtools view to a BAM file .
7093	Evaluate the minimum assembly coverage .
7094	Get the size of the assembly file .
7095	Main entry point for assembly mapping .
7096	Convert CamelCase to CamelCase .
7097	Collect the process map from the components module .
7098	Main function for processing a newick file .
7099	Perform a quick hull of a sample .
7100	Map W to data .
7101	Apply a median filter to each column of a 2D array .
7102	Compute the Krnl - Gaussian .
7103	Compute the SSM distance between points X and X .
7104	Compute the number of non - zero components of the covariance matrix .
7105	Apply a Gaussian filter along an axis .
7106	Compute the N - dimensional distance between the points in X .
7107	circular shift of a matrix .
7108	Compute the embedded space of a space .
7109	Plot formatting of an estimator file .
7110	Plot the boundaries of the Estimator .
7111	Plot labels for all algorithms .
7112	Plot the groundtruth of one track .
7113	Plot a tree .
7114	Get a list of feature segments for a given feature matrix .
7115	Convert a list of feature segments to a 2D Fourier Transform .
7116	Compute the similarity of a set of features .
7117	Fit the model to the data .
7118	Perform a partial fit on the data .
7119	Read references from an audio file .
7120	Find an estimation with the given parameters .
7121	Save estimations to a file .
7122	Returns a list of all boundary algorithms .
7123	Get the configuration for a feature .
7124	Returns a list of FileStruct objects for each audio file in the specified directory .
7125	Read Hier references from a JAMS file .
7126	Get the duration in seconds from a JSON file .
7127	Write a mirex file .
7128	Get the path to the dataset file .
7129	Aligns a segmentation with a song .
7130	Estimate the number of beats .
7131	Read the Beat annotation from the JAMS file .
7132	Compute the beatsync features and times for a given set of frames .
7133	Read features from a JSON file .
7134	Write the features to a JSON file .
7135	Returns a list of all parameter names .
7136	Compute framesync times .
7137	Returns the number of framesync or est_beatsync times .
7138	Get the list of features for this audio file .
7139	Select a feature from the registry .
7140	Preprocessing function for MSAF .
7141	Perform post - processing .
7142	Run the speficied algorithm on the MSAF formatted dataset .
7143	Print the mean of the results .
7144	Compute the GTF results for a given reference file .
7145	Compute the information gain .
7146	Process a track file .
7147	Get the name of the results file .
7148	Process the input file and return the results .
7149	Add a config variable to the config object .
7150	Compute all features for a given audio file .
7151	Compute all the features in the input file .
7152	Gaussian cost function .
7153	Log - normalize a signal .
7154	Normalize min and max values .
7155	Normalize a numpy array .
7156	Returns an array of time frames for a given duration .
7157	Remove empty segments from times and labels .
7158	Apply Sonify clicks to an audio file .
7159	Synchronize labels .
7160	Process a segmentation level .
7161	Align the end hierarchies of two hierarchies .
7162	Compute the distance between two nodes .
7163	Estimates the number of k - means and the bic of each k - means .
7164	Get the clustered data .
7165	Run the K - means algorithm on the data .
7166	Compute the Bayesian Information Information Information
7167	Return the magnitude of X .
7168	Convert a json file to a numpy array of bounds .
7169	Convert a json file to a numpy array of bounds .
7170	Convert a json file to a list of labels .
7171	Convert a json file to a list of beats
7172	Compute the 2D Fourier Transform of X .
7173	Compute the most frequent label for each frame .
7174	Filter activation matrix .
7175	Get the module for the given boundaries id .
7176	Get the label module for the given label id .
7177	Run a hierarchical segmentation on an audio file .
7178	Run an audio file using a flat segmenter .
7179	Run estimations on the audio file .
7180	Process a track file .
7181	Process an audio file .
7182	Update the W matrix .
7183	Translate the given text using the given translator .
7184	Decorate a coroutine function .
7185	Return the sum of init + update .
7186	Set a task to be run in the background .
7187	Spool an iterable .
7188	Send data from stdin to target .
7189	Creates a connection object to a push url .
7190	Make a request to the translate API .
7191	Get the translation table for a given language .
7192	Print the translation table .
7193	Remove nodes from the network .
7194	Write a network to a Pandas hdf5 file .
7195	Create a Network object from a pandas . hdf5 file .
7196	Set a variable from a list of node ids .
7197	Get all aggregate accessibility variables .
7198	Get the node_id of each node in the tree .
7199	Plot the data using matplotlib .
7200	Set the maximum number of items for a given category .
7201	Find the nearest POIs of a given distance to a given category .
7202	Get the low connectivity nodes for each impedance .
7203	Process a node .
7204	Make OSM query .
7205	Build a query string for a node .
7206	Query the OSM for a list of nodes .
7207	Return True if value is a regular expression .
7208	Compare a value against an expectation .
7209	Decorator for fluent functions .
7210	Compare expression with value .
7211	Trigger methods on an instance .
7212	Check if the request matches any of the matchers .
7213	Get the matcher with the given name .
7214	Initialize a matcher .
7215	Set the request body .
7216	Set the body of the request as JSON .
7217	Set a value for a key .
7218	Append functions and methods to target .
7219	Trigger the request on the given instance .
7220	Set the URL for the request .
7221	Add headers matcher to the request .
7222	Add headers that are present in the response .
7223	Add headers matcher .
7224	Set the Content - Type header .
7225	Add query parameters to the URL .
7226	Set the body of the request .
7227	Add a JSON matcher to the request .
7228	Set the request XML .
7229	Read the contents of a file .
7230	Set the persist flag .
7231	Set the error message .
7232	Return a new Response object with the given status code .
7233	Match a request against the mock .
7234	Decorate a coroutine function with the given engine .
7235	Set the mock engine .
7236	Enable network for the given hostnames .
7237	Add a mock to the engine .
7238	Remove a mock .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Returns True if the request should be routed to a network .
7242	Return the mock that matches the given request .
7243	Return a copy of the request .
7244	A decorator that activates the engine .
7245	Context manager to enable or disable the current engine .
7246	Add an interceptor to the engine .
7247	Remove an interceptor by its name .
7248	Get the value of a setting .
7249	Return the SQL to decrypt the column .
7250	Set the value of the original attribute on the model instance .
7251	Get the placeholder for this field .
7252	Return a DecryptedCol instance for the given alias .
7253	Return the public GPG key .
7254	Make sure all keys in a YAML file have the same line number .
7255	Base regression .
7256	Return the inverse of the matrix .
7257	Recurses through all non - terminal terminals in the tree .
7258	Calculate the Averages of all terminals in the tree .
7259	Propagate averages .
7260	Returns the explained variance of the tree .
7261	Calculate the regression of the clock model .
7262	Find the best root node .
7263	Set the Timepoint Tc .
7264	Calculate the number of branches in the tree .
7265	Calculate the cost of a branch at a given time .
7266	Attach this branch length interpolation to the tree .
7267	Optimizes coalescent time scale .
7268	Convert a profile to a sequence .
7269	Normalize a profile .
7270	Set the GTR value .
7271	Set the GTR model .
7272	Set the length of the sequence
7273	Attach sequences to nodes .
7274	Prepare the tree .
7275	Prepare the nodes in the tree .
7276	Calculate the distance between the root and the root terminals .
7277	Reconstruct the ancestral sequences from the tree .
7278	Get the branch mutation matrix for the given node .
7279	Returns the expanded sequence of the given node .
7280	Create the Fitch profiles
7281	Get the fitch state of a node at a given position .
7282	Compute the pairwise intersection between two arrays .
7283	Get the sequence of the tree at the given position .
7284	Calculate the ancestral likelihood of the tree .
7285	Convert the branch length to the GTR .
7286	Run branch length optimization on all clades in the tree .
7287	Run the global branch length optimization on the tree .
7288	Return the optimal length of a branch .
7289	Optimize the sequence and branch length of the tree .
7290	Get a ReconstructedSequenceAlignment from the tree .
7291	Return the Q matrix .
7292	Create a custom GTR with the given parameters .
7293	Returns an instance of the given model .
7294	Fix the diagonal of the GTR rate matrix .
7295	Calculate the compressed probability of a sequence pair at a given time .
7296	Calculate the optimal t for a sequence pair .
7297	Optimize the T - compressed sequence for the given multiplicity .
7298	Calculate the probability of a profile at a given time .
7299	Compute the evolution of the profile at time t .
7300	Computes the log - likelihood of a sequence .
7301	Set the branch length mode .
7302	Calculate the clock filter for a given root node .
7303	Plot the root to tip of the tree .
7304	Resolve multiple polytomies .
7305	Print the tree log - likelihood .
7306	Add a coalescent model to the tree .
7307	Find the best root node in the tree .
7308	Assure that the tree is in the correct format .
7309	Create GTR model .
7310	Read sequences from a VCF file if possible .
7311	Reconstruction of ancestral sequences .
7312	Calculate the FWHM of a 1D distribution .
7313	Create a delta function .
7314	Multiply a list of Distribution objects .
7315	Assign dates to all clades in the tree
7316	Setup TreeRegression .
7317	Creates a maximum likelihood tree optimization with temporal constraints .
7318	Calculate the log likelihood of the timetree .
7319	Convert the dates of the clades in the tree to their corresponding date .
7320	Calculate date uncertainty due to rate .
7321	Get the maximum posterior region of a node .
7322	Find the minimum of an interpolation object
7323	Calculate the median of an interpolation object .
7324	Convert a datetime object to a numeric date .
7325	Create a CLOCK model from a regression model .
7326	Get a connection to the guacd server .
7327	Close the connection .
7328	Receive an instruction from the server .
7329	Send data to the server .
7330	Send an instruction to the device .
7331	Establish a VNC handshake .
7332	Convert unicode_str to utf - 8 if possible .
7333	Load an instance from an instruction .
7334	Encode an argument .
7335	Encode the instruction into a string .
7336	Return the URL for this resource .
7337	Return the URL for this instance .
7338	Return the URL for this resource .
7339	Download the file .
7340	Get the parent object of this job .
7341	Ask user for credentials .
7342	Login to SolveBio .
7343	Print the logged - in user .
7344	Print the logged - in user .
7345	Add a filter to the query .
7346	Add a range filter to the filter set .
7347	Add a position filter to the query .
7348	Get a list of facets for the query .
7349	Process a list of filters .
7350	Returns the next item in the buffer .
7351	Execute a query .
7352	Migrate this dataset to another dataset .
7353	Entry point for the solvebio command line interface .
7354	Download a folder from a remote path to a local path
7355	Construct an instance from a dictionary .
7356	Logout the current user .
7357	Make a request to the API .
7358	Retrieve the child object of this task .
7359	Cancel the job .
7360	Parse SNPPEFF annotations .
7361	Convert a VariantRow to a dictionary .
7362	Get the credentials from the netrc file .
7363	Save the configuration to a file .
7364	Format a value according to the given type .
7365	Normalize tabular data to be a dict or a DataFrame .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Format a table .
7370	Migrate this dataset to another dataset .
7371	Validate a full path .
7372	Upload a file or folder .
7373	Validate a vault path .
7374	Validate SolveBio API host URL .
7375	Add files directories or URLs to the manifest .
7376	Annotates a list of records .
7377	Evaluate the expression and return the result .
7378	Set the format name .
7379	Register a new formatter .
7380	Format the output data according to the given format .
7381	Wrapper around tabulate . tabulate .
7382	Get the user config directory for an application .
7383	r Returns a list of system config directories for the given application .
7384	Read the default config file .
7385	Read all configuration files .
7386	Return the path to the user config file .
7387	Return a list of all system config files .
7388	Returns a list of all additional files in the directory .
7389	Write the default configuration file .
7390	Read a list of config files .
7391	Truncate a string if it is longer than max_width .
7392	Replace all occurrences of replace in a string .
7393	Call commands in sequence .
7394	Apply the given options to the given command .
7395	Apply an option to a command .
7396	Initialize the options .
7397	Run pep8radius .
7398	Run all commands in sequence .
7399	Truncates strings in data and headers to max_field_width
7400	Takes a list of rows and formats them as numbers .
7401	Format a single row .
7402	Wrapper for vertical_table .
7403	Generate a table of data .
7404	Render a template file to a file .
7405	Return True if type is a number .
7406	Returns True if type is boolean False otherwise .
7407	Return True if type is a binary type .
7408	Generates a new AES key for the given template .
7409	Generates a new key pair .
7410	Returns a list of CK_OBJECT_HANDLE objects matching the given template .
7411	Insert an image into a QR Code .
7412	Export a panel .
7413	Return the first day of a given weekday .
7414	Return the number of days in the repeat period .
7415	Repeats the given date in reverse .
7416	Helper function for biweekly events .
7417	Handle a single chunk event .
7418	Export variants for a collaborator .
7419	Export all verified variants .
7420	Export a list of MMT variants to a text file .
7421	Update the role of a user .
7422	List all str variants for a given institute and case .
7423	Retrieve a single variant for an institute .
7424	Retrieve a string variant from the store .
7425	Verify a variant .
7426	Export CLINVAR data .
7427	Return the list of variants for a given institute .
7428	Classifies a variant .
7429	View a single evaluation .
7430	Get the ACMG for the given criteria .
7431	Upload a new HGNC panel .
7432	Download the verified variants .
7433	Given a list of HGNC genes return a dictionary mapping HGNC IDs to their corresponding HGNC symbols .
7434	Add incomplete penetrance info .
7435	Link HGNC genes .
7436	Send a request to the MME server .
7437	Get a list of all connected nodes .
7438	Get the coordinates of a cylinder .
7439	Returns the subcategory of the given category .
7440	Calculate the length of a reference sequence .
7441	Get the end position of a BND .
7442	Parse the coordinates of a variant .
7443	Check the coordinates of a cytometry file .
7444	Update the panel list .
7445	Update a panel .
7446	Export a panel .
7447	Edit a HGNC gene .
7448	Save a delivery report to a case .
7449	Get a list of HPO terms .
7450	List the whitelist of users .
7451	Build a phenotype object from an HPO term .
7452	Return the HGNC gene information for the given HGNC ID
7453	Convert a HGNC gene query to a JSON object .
7454	List all institutes .
7455	List all transcripts for a build .
7456	Return a list of events for a given day .
7457	Return a list of SVR variants for a case .
7458	Returns a list of strings that match the given query .
7459	Get information about a single string variant .
7460	Add a variant to an institute and case .
7461	Parse a single variant .
7462	Generate the header for exporting variants .
7463	Get variant info from a list of genes .
7464	Get predictions from a list of genes .
7465	Add information about the variant to the case object .
7466	Find the bai file for a BAM file .
7467	Get the observation data for a variant .
7468	Parse a Gene object .
7469	Return a string representation of a transcript object .
7470	Return the position of the end of the variant .
7471	Returns the most common or uncommon frequency for a variant .
7472	Generate a human - readable representation of a variant .
7473	Return the thousandg link for the given variant .
7474	Return the link to the cosmic mutation .
7475	Generate a link to the beacon network for a variant .
7476	Return the UCSC link to a variant .
7477	Return a human - readable representation of the spidex value .
7478	Return a list of expected inheritance models for a variant .
7479	Return a list of calls in the specified category .
7480	Get a list of cancer variants for a given institute and case .
7481	Export CLINVAR data .
7482	Get a dict of clinvars for a particular submission .
7483	Return an ACMG object for a single variant .
7484	Create a new evaluation for a variant .
7485	Convert an ACMG evaluation object into a dictionary .
7486	Upload a panel to HGNC .
7487	Create an Excel file containing all the verified variants .
7488	Export all genes to . bed format .
7489	Parse a clnsig string into a list of dictionaries .
7490	Parse a list of compounds .
7491	List all genes for a build .
7492	Build an individual object from a dictionary .
7493	Load variants for a particular case .
7494	Return a JSON representation of a case .
7495	List scout collections .
7496	Create a new institute .
7497	Update an institute .
7498	Returns a file handle for the given file path .
7499	Get the net of the current calendar .
7500	Get the next and previous values of a network .
7501	Check if the given year and month are valid .
7502	Check if a given date is a valid weekday .
7503	Parse case data .
7504	Add PEDDY information .
7505	Parse a Pedigree individual sample .
7506	Parse a list of samples into a list of individual objects .
7507	Parse a case from a config file .
7508	Parse a Pedigree - formatted PED file .
7509	Build an evaluation object .
7510	Export Mitochondrial variants for a case .
7511	Return True if the given terms are pathogenic .
7512	Return True if the given terms are likely to be pathogenic .
7513	Return True if bs_terms and bp_terms are likely to be benign .
7514	Given a list of acmg terms return the prediction .
7515	Add the gene information to the variant object .
7516	Fetch variants from a case .
7517	Get all sanger variants .
7518	Get a single variant for a document .
7519	Get a list of gene variants .
7520	Validate an institute .
7521	Get a list of causatives for a given institute .
7522	Check if a case has causatives .
7523	Get all the other causatives of a variant .
7524	Delete old variants for a case .
7525	Returns a list of overlapping variants .
7526	Get all evaluated variants for a case .
7527	Get the VCF file for a region .
7528	Retrieve a list of variants for a sample .
7529	Get a connection to a MongoDB server .
7530	Given a list of variant ids and a dictionary of form fields return a list of objects .
7531	Returns the CLINVAR_HEADER and CASEDATA_HEADER depending on the csv_type .
7532	Given a list of clinvar submission objects and a submission header return a list of csv lines .
7533	Load transcripts from ensembl .
7534	Create a new omim panel .
7535	Build an HGNC Exon from a dictionary .
7536	Delete a panel .
7537	Delete all indexes .
7538	Delete a user from the database .
7539	Drop genes collection .
7540	Delete exons for a build .
7541	Delete a case .
7542	List all individuals for a particular case .
7543	Parse a list of MatchMaker objects for a given patient .
7544	List all cases in a given institute .
7545	Load a user from the store .
7546	Login to Google .
7547	Build an institute object .
7548	Delete an event .
7549	Create an event .
7550	Get all events for the given institute and case .
7551	Get all events for a user .
7552	Add a phenotype to a case .
7553	Remove HPO term from case .
7554	Create a comment event .
7555	Parse the genotypes of a variant .
7556	Check if the given position is in the given coordinates .
7557	Get HPO terms .
7558	Export transcripts from scout .
7559	Load all exons .
7560	Load a region from the HGNC .
7561	Return all events in a given month in a given year .
7562	Return a queryset of live tasks .
7563	Parse requirements . txt file .
7564	Return the existing gene for the HGNC ID .
7565	Update a panel .
7566	create a new gene panel
7567	Export a panel to a dictionary .
7568	Return information about an archive case .
7569	Migrate a scout case to an archive .
7570	Migrate a case .
7571	Research for variants in a case .
7572	Load HGNC gene objects .
7573	Show HPO terms .
7574	Create a Flask application .
7575	Configure the extensions .
7576	Register blueprints .
7577	Configure the application for coverage .
7578	Run scout view aliases .
7579	Build a panel object from a panel_info dict .
7580	Export the verified variants for the given collaborator .
7581	Export variants for a case .
7582	Return a string representation of a VCF entry .
7583	Serve a pymongo server .
7584	Generate a md5 key for a list of strings .
7585	Initialize the connection to the database .
7586	Sets up the HGNC database .
7587	Run scout index .
7588	Run scout setup database .
7589	Run scout setup demo .
7590	Setup the connection to the database .
7591	List the scout institutes .
7592	Parse the genetic models info from a case .
7593	List the panels for a given institute .
7594	Add an institute to the database .
7595	Update an institute .
7596	Fetch a single institute .
7597	Check if the given date is a valid date .
7598	Get a datetime object from a date string .
7599	List all genes in a HPO term .
7600	Parses a rank score entry into a float .
7601	Add a user to the adapter .
7602	Check if a connection is established .
7603	Initialize the MONGO server .
7604	Load a delivery report from the database .
7605	Add a user to the database .
7606	Create a pileup file from the request parameters .
7607	Load ensembl exons from a list of lines .
7608	Update compounds for a case .
7609	Add HGNC and omim links to a gene object .
7610	Show HGNC gene aliases and transcripts .
7611	Parse HGNC header line .
7612	Parse hgnc genes .
7613	Get an open clinvar submission for a user and institute .
7614	Update a clinvar id .
7615	Get clinvar_subm_id from submission_id
7616	Add new variants and case data to clinvar submission .
7617	Update clinvar submission status .
7618	Retrieve all clinvar submissions for a user and institute .
7619	Delete a clinvar object .
7620	Converts a case id to a dictionary of clinvars .
7621	Parse HPO Obo term lines .
7622	Get a list of all genes .
7623	Get a list of genes .
7624	Return a list of genes that match the query .
7625	Check if the panels exist in the database .
7626	Load clinical SNV variants for a given region .
7627	Load a case from the database .
7628	Decorator to render a templated template .
7629	Return the institute and case object for the given institute ID and case name .
7630	Return a list of institutes for the given login user .
7631	Get the HGNC ID from the gene info .
7632	Update a panel .
7633	Load all disease terms .
7634	Load the disease terms from the genemap file .
7635	Parse the frequencies from the transcripts .
7636	Parses the frequency of a variant .
7637	Parses the sv_frequencies from the variant info .
7638	List all users .
7639	Build a HGNC gene from a dictionary .
7640	Load a panel from a string .
7641	Load the OMIM panel .
7642	Compare MIM panels .
7643	Update the MIM version for new genes .
7644	Add a panel to the database .
7645	Get a panel by id .
7646	Delete a panel .
7647	Fetch a gene panel from the database .
7648	Get a list of gene panels .
7649	Build a dictionary mapping HGNC IDs to their panels .
7650	Update a panel .
7651	Add a pending action to a panel .
7652	Apply pending changes to a panel .
7653	Return a set of clinical symbols in a case .
7654	List cases .
7655	Send a record to the mail server .
7656	Load indexes from the database .
7657	Update indexes in the database .
7658	Drop all indexes .
7659	Build a mongo query for a variant .
7660	Build a mongo query for a case .
7661	Add CLINSIG filter to the query .
7662	Add genomic coordinates to the query
7663	Add panel and gene - related parameters to the query .
7664	Wipe the database .
7665	Parses the panel data from a CSV stream .
7666	Build clnsig dict from clnsig_info .
7667	Load gene objects into the HGNC database .
7668	Load a list of transcript objects into the database .
7669	Load a list of exons into the database .
7670	Fetch a single HGNC gene .
7671	Get the HGNC ID for a HGNC symbol .
7672	Get a list of genes with the given symbol .
7673	Get all genes for a given build
7674	Return the number of genes in a build .
7675	Drop all genes from the HGNC collection .
7676	Drop the transcripts from the database .
7677	Drop all exons from the database .
7678	Get all ensembl transcripts
7679	Build a dictionary of HGNC symbols to gene objects .
7680	Get a gene by its alias
7681	Get all genes by alias .
7682	Get all ensembl genes .
7683	Convert HGNC symbol to HGNC symbol .
7684	Add hgnc_id to each gene .
7685	Get the coding intervals for each chromosome .
7686	Update the omim panel .
7687	Get a list of all cases for a given institute .
7688	Get information about a case .
7689	Matches the current user to the given case .
7690	Match a case .
7691	Delete a matchmaker case .
7692	Return the HTML report for a case .
7693	Render a PDF report for a case .
7694	View the diagnosis of a case .
7695	Add or remove a phenotype to a case .
7696	Manage phenotypes for a case .
7697	Comment an event .
7698	Update the status of a case .
7699	Assign a case to a user .
7700	Get a list of HPO terms .
7701	Mark a variant as validation .
7702	Marks a variant as causative .
7703	Get the delivery report for a case .
7704	Share a case .
7705	Rerun a case .
7706	Research a case .
7707	Send a vcf2cytosure . cgh file to the server .
7708	Get the multiqc file for a case .
7709	Return a list of all cases in a case query .
7710	Report the content of a case .
7711	Get the contents of the coverage report .
7712	Get a list of clinvar submissions for a user .
7713	Export the Motorola variants to Excel files .
7714	Update the synopsis of a case .
7715	Get a list of diseases from a list of HPO IDs .
7716	Convert a VCF to a Cytosure .
7717	Create a multiqc object for the given institute and case
7718	Get all unevaluated variants for a given institute and user .
7719	Add a patient to the Matchmaker server .
7720	Delete a case from the Matchmaker server
7721	Return a dictionary of matches for each patient .
7722	Perform a MME match on a case .
7723	Update the genes panel .
7724	Parse the callers information from a variant .
7725	Build a transcript from a transcript info dictionary .
7726	Load an institute into the database .
7727	Given a variant and a list of transcripts return the CADD value .
7728	Load a case from a config file .
7729	Update a variant .
7730	Update the rank of all variants in a case .
7731	Update variant compounds .
7732	Update all compound objects in a list of variants .
7733	Update MongoDB compound variants .
7734	Update compounds on variants in a case .
7735	Load a variant from the database .
7736	Upsert a variant in the database .
7737	Load multiple variants into the database .
7738	Assign a case to a user .
7739	Share a case with a collaborator .
7740	Diagnose an omim .
7741	Mark the case as checked .
7742	Create an event for validating a variant .
7743	Returns a list of all sanger events ordered by verb .
7744	Validate a variant .
7745	Mark a variant as causative .
7746	Create an event for updating a dismiss variant .
7747	Update the ACMG of a variant .
7748	Parse a set of ids for a particular case .
7749	Parse a simple ID .
7750	Generate a md5 key for a document ID .
7751	Convert HGNC panel to HGNC format .
7752	Get a variant id from a variant object .
7753	Get the number of cases .
7754	Update the dynamic gene list for a case .
7755	Fetch a case .
7756	Delete a case .
7757	Add a case object to the database .
7758	Replace a case object .
7759	Update the ID of a case .
7760	Submit an evaluation .
7761	Get all evaluations for a variant .
7762	Parse ensembl transcripts .
7763	Parse an ensembl gene request .
7764	Parse an ensembl transcript request .
7765	Parse an ensembl line .
7766	Parse ensembl genes from a file .
7767	Parse ensembl exons .
7768	Parse an Ensembl Exon request .
7769	Initialize a logging handler for the given logger .
7770	Parse an omim header line .
7771	Parse MORBID MORBID lines .
7772	Given a genemap file and a set of genemap lines return a dict of all the phenotypes in that genemap file .
7773	List MORB genes from genemap and mim2gene files .
7774	Convert string to int or float .
7775	Render the calendar table for a given month .
7776	Set day and weekday attributes .
7777	Format the month name .
7778	Popover helper .
7779	Get information about a panel .
7780	Parse HGNC gene info .
7781	Parse a list of genes from a list of lines .
7782	Parse a gene panel .
7783	List all diseases .
7784	Drop HPO terms .
7785	Return a dictionary of all the users in the store .
7786	Parses the conservation of a variant .
7787	Parses the conserved and not - conserved scores for a variant .
7788	Get information about the general case .
7789	Get a list of all cases grouped by status .
7790	Render the given context to a JSON response .
7791	Get the current year and month from the request .
7792	Check for cancelled events .
7793	Fetch the HPO term with the given id .
7794	Search for HPO terms .
7795	Get a disease term by its identifier .
7796	Get all disease terms for a gene .
7797	Load a disease term into the database .
7798	Given a list of HPO terms generate a list of HGNC IDs .
7799	Read data from HDF5 file .
7800	Set up the frequency range .
7801	Set up time axis .
7802	Read a filterbank from a file .
7803	Compute the LST of the time series .
7804	Blank the DC bin .
7805	Print information about the file .
7806	Calculate the extent of the plot .
7807	Plot a waterfall .
7808	Plot time series .
7809	Write the filterbank to a file .
7810	Calibration for the N1 band pass .
7811	Convert a numpy array to a coarse - grained array .
7812	Apply a Mueller transform .
7813	Calculate the Mueller Matrix for a set of pols .
7814	Calculate the fracpols of a string .
7815	Write a set of fracpols to a file .
7816	Find the index of the closest value in xarr to val
7817	Rebin data into n_x and n_y dimensions .
7818	Unpack an 8 - bit value from a numpy array .
7819	Get the difference between the stokes and the stokes of the given feed type .
7820	Plot stokes diode .
7821	Plot calibrated diode .
7822	Plot the coarse - grained gain offsets .
7823	Open a hdf5 or filterbank file .
7824	Set up the selection range .
7825	Calculate the size of the selection .
7826	Calculate the shape of the selection .
7827	Set the channel start and stop indices .
7828	Set the start and stop frequencies .
7829	Populate the timestamps of the file .
7830	Populate the frequency series from the header .
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Check if the current selection is heavy .
7834	Read data from file .
7835	Read all data from the file .
7836	Read a single row from the file .
7837	Read data from the container .
7838	Update the header with the current values .
7839	Print info about the file .
7840	Write the image to a file .
7841	Write to HDF5 file .
7842	Write to an HDF5 light file .
7843	Get the dimensions of the blob .
7844	Get the chunk dimensions of the file .
7845	Grab data from the plot .
7846	Command line utility for creating spectra from GuppiRaw files .
7847	Read the first header of the file .
7848	Find the number of data blocks in the file .
7849	Print the mean std max and min of the data .
7850	Plot a histogram of the data .
7851	Generate the filterbank header .
7852	Find the size of the header of a file .
7853	%prog matchfils file1 file2
7854	Command line utility for creating HDF5 Raw files .
7855	Calculate the foldcal of a time series .
7856	Integrate calibration using FoldCalibrator .
7857	Calculate the calibrated flux from calflux and calfreq .
7858	Calculate the center frequency of each channel .
7859	Calculate the f - ratio of a set of calibrated data .
7860	Calculate the frequency and frequency of the diode .
7861	Get the Tsys for a given set of measurements .
7862	Calibrate fluxes .
7863	Return the length of the header of a file .
7864	Check if a file is a filterbank .
7865	Replace a header keyword with a new value .
7866	Generate a SIGPROC header string from a FITS file .
7867	Convert angle value to sigproc angle value .
7868	Calculate the number of ints in a file .
7869	Return a dict representation of the traceback .
7870	Creates a sub - command parser for the given record type .
7871	Creates a parser for the zonefile .
7872	Remove comments from text .
7873	Add a default name to the text .
7874	Parse a single record line .
7875	Parses the given text into a dictionary of records .
7876	Parse a JSON zone file .
7877	Quote a field in a dictionary .
7878	Parse an Avro schema string .
7879	Create a Python package from a list of Python classes .
7880	Generate the source code for a class .
7881	Decorator to disable auto - store .
7882	Dump record in json - encodable object format
7883	Load a JSON record from a dictionary .
7884	Load a JSON record from a string .
7885	Add a schema to the schema map .
7886	Get the schema for the given record name .
7887	Return a dictionary representation of the variable .
7888	Add a mixin class to the class .
7889	Create a new instance of metacls from a class .
7890	Get the JSON schema dictionary for the given record .
7891	Get the root schema dictionary for the given record .
7892	A generator that yields MR objects from an input stream .
7893	Write the outputs to the output stream .
7894	Pushes a value onto the front of an OrderedDict .
7895	Returns a new SearchResult object for the given query string .
7896	Returns a SearchResult object with the raw results filtered by the given filters .
7897	Returns a list of all resources that include the given attributes .
7898	Return an Entity object from the result of a GET request .
7899	Find a quote that matches the given quote .
7900	Escape a filter .
7901	Create an elementary rotation matrix for a given axis and rotation angle .
7902	Construct the covariance matrix .
7903	Calculate the vrad error skew average .
7904	Calculate the parallax error .
7905	Calculate the magnitude error of a Gaussian .
7906	Returns the magnitude of the error in EoM .
7907	Make the plot of the magnetic error .
7908	Calculates the average number of transfers for a given beta value .
7909	Calculate the angular distance between two points .
7910	Transform cartesian coordinates .
7911	Transform phi and theta to spherical coordinates .
7912	Transform a covariance matrix .
7913	Returns the error scaling factor for the given observable and beta .
7914	Make a plot of the spt and its velocities .
7915	Make the plot .
7916	Returns a function that applies any number of functions to the given value .
7917	Decorator for methods that catches and re - raises a helpful exception .
7918	Unquote the given value .
7919	Apply one or more functions to each element of the collection .
7920	Return a new DStream with only the elements in this DStream that pass a truth test .
7921	Return a new collection with only elements that pass a truth test .
7922	Return a new collection with items takewhile applying a function to each element in the collection .
7923	Return a new collection with items removed while applying a function to each element .
7924	Return a new collection with all elements from self and others .
7925	Find the first occurrence of a node in the tree .
7926	Return the path to the serach directory .
7927	Return an iterator over a group .
7928	Iterate over all the options in regdescr .
7929	Return a string representation of an event .
7930	Build a list of minimal runs from a list of events .
7931	Print the results to output_file .
7932	Print results to output_file .
7933	Print results to output_file .
7934	Clean the given code string .
7935	Round x to next power of base .
7936	Given a list of indices return a list of the indices that are blocking .
7937	Calculate cache access .
7938	Calculate the number of cycles per cache .
7939	Perform the actual analysis of the kernel .
7940	Run the IACA analysis .
7941	Given a list of lines strip and uncomment the first line .
7942	Strip unreferenced labels from a list of asm lines .
7943	Select the most suitable block in the assembly .
7944	Prompt user for store pointer increment .
7945	Print the blocks in the assembly file .
7946	Insert markers between start_line and end_line .
7947	Run IACA instrumentation on an input file .
7948	Entry point for iaca_instrumentation .
7949	Simulate a model .
7950	Generator that yields a range of integers between start and stop .
7951	Get the last modified datetime of all files in the directory .
7952	Check command line arguments .
7953	Entry point for the command line tool .
7954	Main function for merging two or more pickle files .
7955	Create a symbolic symbol with positive and integer positives .
7956	Transform a multidim declaration to a 1d declaration .
7957	Transform a multidim to a 1D ref .
7958	Find all nodes of the given type in the given AST .
7959	Force a function to return an iterable .
7960	Check the validity of the kernel .
7961	Set a constant .
7962	Substitute constant expressions .
7963	Returns the number of elements in the array .
7964	Calculate the relative offset of an array .
7965	Remove duplicate accesses .
7966	Calculate the length of each iteration .
7967	Get the loop stack .
7968	Return a list of all free symbols in the index .
7969	Return a dictionary mapping variables names to their symbolic accesses .
7970	Returns a dictionary mapping variable names to their relative distances .
7971	Convert a global iterator to a set of indices .
7972	Return the current global iterator .
7973	Convert a list of indices into a global iterator .
7974	Return an iterator over the maximum iteration .
7975	Print information about the kernel .
7976	Print information about the variables .
7977	Print a table of constants .
7978	Print kernel code to output_file .
7979	Convert math_ast to a symbolic symbol .
7980	Get the offsets of an array reference .
7981	Get the basename of an array reference .
7982	Get the type of the loop index .
7983	Builds a list of ast . Decl for each constant .
7984	Returns all ArrayDecl declarations in the kernel AST .
7985	Returns a list of all for statements in the kernel .
7986	Builds the array declarations and a dictionary of the array declarations .
7987	Find the inner most loop in loop_nest .
7988	Build initializations for an array .
7989	Builds a dummy function call statement .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get the code for the kernel .
7993	Build an ast . FuncCall node for the kernel function .
7994	Get the code for the main function .
7995	Perform IACA analysis on the binary .
7996	Compile the kernel and return the executable path .
7997	Convert a string to a symbolic expression .
7998	Get the identifier of the file .
7999	Get the last modified datetime of the file .
8000	Get a cachesim . CacheSimulator object from the memory hierarchy .
8001	Get the bandwidth of the benchmarks .
8002	Get the name of the compiler to use .
8003	Parse a perfctr event into a tuple of parameters .
8004	Enforce no overlapping data .
8005	Get the path to the header file .
8006	Align an iteration with the first level cl boundary .
8007	Returns a list of load counts for each cache level .
8008	Returns a list of all hit counts for each cache level .
8009	Get the number of misses for each cache level .
8010	Get the number of stores in the machine .
8011	Get the number of evicts for each cache level .
8012	Get information about the caches .
8013	Temporarily fix an environment variable .
8014	Configure an argparse . ArgumentParser .
8015	Print results to output_file .
8016	Parses the description from the README . md file
8017	Schedule a retry .
8018	Build an item for a purchase .
8019	Record a purchase in Sailthru .
8020	Get course content from Sailthru .
8021	Get the content of a course run from the Catalog API .
8022	Update the unenrolled list for a user .
8023	Send a course refund notification .
8024	Send an email to an offer assignment notification .
8025	Get the logger configuration .
8026	Retry an order with a given number of retries .
8027	Fulfill an order .
8028	Get the Sailthru client for the given site .
8029	Returns the value associated with the given key or None if it does not exist .
8030	Set a value in the cache .
8031	Get a configuration variable from the configuration module .
8032	Get the filename from the overrides environment variable .
8033	Get a value from a dictionary by version .
8034	Energy plus version .
8035	Returns a dictionary of file references .
8036	Populate the object from the given JSON data .
8037	Returns a list of all external files in the database .
8038	Set the default values for all rows in the table .
8039	Prepares the extensible information for the field .
8040	Get the name of the extended field at the given index .
8041	Return a dictionary of all the short refs of the external files .
8042	Get the value of a column .
8043	Update the value of a device field .
8044	Update inert data .
8045	Set default values for all fields .
8046	Add fields to an extensible record .
8047	Remove and return the value at the given index .
8048	Insert a value at the given index .
8049	Remove this record from the table .
8050	Register a record hook .
8051	Register a link .
8052	Create a regular expression for the given line and intent name .
8053	Return the remaining duration in seconds between the start and end time .
8054	Serialize the event into a dictionary .
8055	Make an HTTP request to the given URL .
8056	Get a list of endpoints for a given service type .
8057	Try to create a directory if it doesn t exist .
8058	Configure an OpenCL service .
8059	Register the CA agent .
8060	Set the state of a recording .
8061	Update event status .
8062	Update the agent state .
8063	Return the path to the configuration file .
8064	Load and validate a configuration file .
8065	Check if the server is in secure mode .
8066	Initialize the logger .
8067	Handle the home page .
8068	Serve an image .
8069	Run all modules in parallel .
8070	Parse an iCalendar string into a list of dictionaries .
8071	Get the schedule of upcoming events .
8072	Control loop for the schedule service .
8073	Control loop for the agentstate service
8074	Make an error response .
8075	Make a JSON response with the given data .
8076	Get the internal state of the service .
8077	Get all upcoming and recorded events .
8078	Get an event by its uid .
8079	Delete an event .
8080	Modify an event .
8081	Extract the parameters from the config file .
8082	Create a new MediaPackage from an event .
8083	Start recording an event .
8084	Render the template to a fragment .
8085	Return a list of all resources .
8086	Return a dictionary representation of the resource .
8087	Create a Fragment object from a dictionary .
8088	Add content to the message .
8089	Add a resource to the fragment .
8090	Add a URL fragment to the resource list .
8091	Initialize a javascript function .
8092	Returns the HTML representation of the resources in the specified placement .
8093	Convert a resource to HTML .
8094	Handle GET requests .
8095	Render the fragment to a standalone HTML response .
8096	Render the fragment to standalone HTML .
8097	Calculates pFDR and qvalues based on pvalues and lamb .
8098	Convert values to a one - dimensional numpy array .
8099	Lookup values from an error table .
8100	Compute the posterior chromatogram hypotheses for a single experiment .
8101	Sampled the final error table .
8102	Summary error table .
8103	Compute the error statistics .
8104	Find the cutoff value in the error statistics .
8105	Run XGB and save the results to outfile .
8106	Infer PEPTIDOforms from an IPF file .
8107	infer_peptides is a wrapper around infer_peptides .
8108	infer proteins from an input file
8109	Subsample an OSW file .
8110	Reduce the contents of infile to outfile .
8111	Backpropagate an oswr file .
8112	Filter SQMASS files .
8113	Get a group by its id .
8114	Creates a new group .
8115	Delete a group .
8116	Get the members of a group .
8117	Update a group s members .
8118	Get the number of effective members in a group .
8119	Check if a network is an effective member of a group
8120	Modify the conf . py file .
8121	Create a new dataset in the HDF5 file .
8122	Decrypt the contents of a file .
8123	Get the standard input of the command .
8124	Get the standard output of the command .
8125	Get the standard error stream .
8126	Get the output of the debug command .
8127	Context manager for stdin .
8128	Context manager for stdout .
8129	Context manager for stderr .
8130	Context manager for debugging .
8131	Empty an account .
8132	Empty a container .
8133	Decorate a function with stdout .
8134	Decorator for logging messages to stderr .
8135	Add an error message to the log .
8136	Print help message to file .
8137	Print the usage of the parser .
8138	Print the version of the program .
8139	Make a request to the server .
8140	Send a POST request to create a new account .
8141	Delete the account .
8142	Send a PUT request to a container .
8143	Perform a HEAD on an object in a container .
8144	Get an object from a container .
8145	Put an object in a container .
8146	Create a new object in a container .
8147	Resolve an option to its value .
8148	Return a copy of this CLIContext .
8149	Write headers to file .
8150	Authenticates the client .
8151	Generate a temporary URL .
8152	Return a quoted version of the value .
8153	Get the contents of a container .
8154	Get a client from the queue .
8155	Encrypt data using AES256CBC .
8156	Decrypt a stream using AES256CBC .
8157	Upload a directory structure to a container .
8158	Put an account .
8159	Put a container .
8160	Get the manifest body .
8161	Create a container with the given path .
8162	Get a temporary URL for a given path .
8163	Display a trans id .
8164	Print help for a specific command .
8165	Check if the buffer is empty .
8166	Encrypt a key using AES256CBC .
8167	Get the status of a repository .
8168	Get information about a pull request
8169	Get a list of pull requests for a repository .
8170	Write your forwards methods here .
8171	Return a list of all published SliderItems .
8172	Render the Hero Slider .
8173	Acquire the reader lock .
8174	Decrement the number of readers .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get the task with the given id .
8179	Return a list of tasks sorted by task_id .
8180	Return a dictionary representation of the configuration .
8181	Create a task from a dictionary .
8182	Execute a Perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the query .
8186	Create an index .
8187	Create a mapping in an index .
8188	Return a JSON - encoded version of the object .
8189	Write a generator of items to a writer .
8190	Add a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Get all the items in the storage .
8193	Helper function to validate the arguments for a task .
8194	Parse the archive args and return a ArchivingTaskConfig .
8195	Publish a job to the pubsub channel .
8196	Schedule a job task for a queue .
8197	Cancel a job task .
8198	Run the job listener .
8199	Listen for jobs .
8200	Schedule the event loop for execution .
8201	Schedule a task for execution .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the job arguments for a task .
8206	Get a secret from the secrets directory .
8207	Register a view with the router .
8208	Decorator to register an admin view .
8209	If the request is not a version request then return the url_name otherwise return the url_name .
8210	Get the name of the view .
8211	Get a version string from a version string .
8212	Resolve the given engine key .
8213	Get the engine for the given scheme .
8214	Parse a path to a database and schema .
8215	Parse a database URL into a dictionary .
8216	Parse an SQLAlchemy database URL .
8217	Create a new user .
8218	Get a list of users .
8219	Create a password change form .
8220	Add the view_name to the kwargs of the field .
8221	Parses a boolean value .
8222	Parse a value as an integer .
8223	Get the parser for the given setting type .
8224	Get Django settings from environment variables .
8225	Create a ModelDict from a model .
8226	Encode a base64 - encoded string .
8227	Create a new field from a field_info dict .
8228	Create a validator from a dictionary .
8229	Cartesian product of a dictionary of parameters .
8230	Find unique points in a list of explored parameters .
8231	Change logging kwargs .
8232	Decorate a function to use a simple logging configuration .
8233	Try to create directories for the given log file .
8234	Get a list of strings from the given argument list .
8235	Rename a log file .
8236	Set the logger for this instance .
8237	Extract replacements from the given trajectory .
8238	Show a progress bar .
8239	Check if the given option is in the given section and if so replace it with the given function .
8240	Convert a parser object to a string io object .
8241	Find all multiproc options in the given parser .
8242	Find the multiproc dictionary .
8243	Check if the log config is valid .
8244	Parse the log_config and return a NoInterpolationParser .
8245	Convert a dictionary into a dictionary .
8246	Set up logging handlers and tools .
8247	Finalize the configuration .
8248	Establish a redirection of stdout .
8249	Write the contents of the buffer to the logger .
8250	Compare two results .
8251	Compare two parameters .
8252	A decorator that ensures that the trajectories are not run by environment .
8253	Decorator to mark a function as deprecated .
8254	Decorate a function to make it mutually exclusive .
8255	Decorator to mark a keyword argument as deprecated .
8256	Wrap a function to retry a number of times .
8257	A class decorator that adds the prefixing methods to the class .
8258	Add Brian2 parameters to the trajectories .
8259	Run the network .
8260	Compute the Euler evolution of a time series .
8261	Add parameters to the trajectories .
8262	Compute the difference of a lorenz distribution .
8263	Helper function to create a storage service object
8264	Factory function for creating a storage service .
8265	Add parameters to the trajectories .
8266	Compute the roessler difference between two values .
8267	Compact an HDF5 file .
8268	Return True if all parameters in the given group are explored .
8269	Builds the model eqs from the trajectories .
8270	Pre - build the model .
8271	Build the BRIAN model .
8272	Build the model .
8273	Check to see if we need to build connections .
8274	Build connections for the given trajectories .
8275	Add parameters to a Brian2Trajectory .
8276	Compute the Fano factor .
8277	Compute the mean fano factor of a collection of neurons
8278	Compute the mean Fano factor over all excent neurons .
8279	Add the monitor to the network .
8280	Add the monitors to the network
8281	Make the print folder .
8282	Plot the result of a function .
8283	Print the spike raster and I_syn_e graphs .
8284	Run the Brian2 - Monitor analysis .
8285	Get the batch number .
8286	Explore a batch of data .
8287	NNTreeNodeVars instance for this node .
8288	NNTreeNodeFunc object for this node .
8289	Set the name and full_name .
8290	Set the details of the branch and run branch .
8291	Convert a node into a message .
8292	Remove a subtree from a node .
8293	Delete a node from the tree .
8294	Remove a node or leaf from the tree .
8295	Remove a node from a branch .
8296	Translate a shortcut name .
8297	Add a prefix to the list of split names .
8298	Determine the type of a node .
8299	Add a generic type .
8300	Add a node to the tree .
8301	Create a link under act_node pointing to instance .
8302	Check that the names in split_names are valid .
8303	Create an instance of any type of group .
8304	Create an instance of the specified type with the given name .
8305	Set the details of a tree node .
8306	Iterate over nodes in the graph .
8307	Create an iterator over the children of the given node .
8308	Recursive implementation of breadth - first traversal .
8309	Perform a very fast search of a node .
8310	Search for a key in a node .
8311	Perform a backward search of a node .
8312	Return the kids of this node .
8313	Add a group from the storage .
8314	Add a leaf from the storage .
8315	Returns a list of all directory data .
8316	Return a debug representation of the tree .
8317	Get the parent of this node .
8318	Add a group to the network .
8319	Add a link to the graph .
8320	Remove a link .
8321	Add a leaf to the graph .
8322	Remove this node from its parent .
8323	Remove a child from the group .
8324	Return True if item is contained in the tree .
8325	Get the default value of a field .
8326	Get the children of this node .
8327	Returns a copy of the groups
8328	Get the list of leaves .
8329	Returns a copy of the links .
8330	Store a child of this group .
8331	Store the trajectory .
8332	Load a child trajectory .
8333	Load the data for this trajectory .
8334	Add a parameter group to the network .
8335	Add a parameter to the function .
8336	Add a result group to the network .
8337	Add a result group to the network .
8338	Adds a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group to the network .
8341	Add a config group to the network .
8342	Evaluate the maximum fitness of an individual .
8343	Add the commit variables to the trajectory .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Given a dictionary and a separator return a nested dictionary .
8347	Display a progress bar .
8348	Get the signature of a function s arguments .
8349	Given a function and a dictionary of keyword arguments return a dictionary of the matching keyword arguments .
8350	Format a timestamp as a string .
8351	Convert a port number to a tcp address .
8352	Raises IOError if path is already a directory
8353	Reset the statistics .
8354	Returns the remaining time in seconds .
8355	Return a dictionary representation of the function .
8356	Remove an annotation .
8357	Return a string representation of the F annotation .
8358	Make an ordinary result .
8359	Make a shared result .
8360	Create a shared data object .
8361	Store data for a request .
8362	Get the data node from the store .
8363	Returns True if the item is supported .
8364	Create a shared data object .
8365	Set the last_process_name to the current process name .
8366	Lock a client .
8367	Send a shutdown signal to the server
8368	Finalize the connection .
8369	Start the client .
8370	Send a REQ request and wait for a REP response .
8371	Acquire the lock .
8372	Listen for incoming requests .
8373	Put data into queue .
8374	Detect if the current process is a fork .
8375	Handle data .
8376	Run the trajectories .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store data in the cache .
8380	Store a message in the reference dictionary .
8381	Store a dictionary of references .
8382	Decorate an init_func to parse the config .
8383	Collect all options from a section .
8384	Collect the configuration from the config file .
8385	Interpret the config file and return the kwargs .
8386	Add parameters to the trajectories .
8387	Convert a rule number to a binary rule number .
8388	Make an initial state .
8389	Plot a pattern with a given rule number .
8390	Convert a 1D cellular automaton to a 1D pattern .
8391	Run cellular_automaton_1D .
8392	Signal that an update has occurred .
8393	Get the overview group .
8394	This method is called when a message is received .
8395	Store a message .
8396	Load multiple items from an iterable .
8397	Check for HDF5 properties in the trajectories .
8398	Store multiple items in an iterable .
8399	This routine is called when the connection is closed .
8400	Extract file information from kwargs .
8401	Backup a trajectory .
8402	Helper function for trj_read_out
8403	Prepare the trajectory to be merged .
8404	Load the meta data of the trajectory .
8405	Load a sub - branch of a trajectory node .
8406	Check the version of the trajectories .
8407	Fill the run table with information about the runs .
8408	Load exploration parameters from the overview group .
8409	Store the explorations of the trajectories .
8410	Make overview tables .
8411	Store a trajectory in the HDF5 file .
8412	Store a sub - branch of a trajectory node .
8413	Create a new leaf instance .
8414	Helper function for _tree_load_nodes .
8415	Helper function for _tree_store_dfs .
8416	Helper function for all_store_param_or_result_table
8417	Get or create a table from the where node .
8418	Get a node by its name .
8419	Set the attributes of an item to reflect the type of the data .
8420	Recall the native type of the data .
8421	Add or modify a row in a table .
8422	Helper function for all insert into a row .
8423	Extract the insert_dict from an HDF5 object .
8424	Cut a string if it is longer than max_length .
8425	Create a new group if it doesn t exist .
8426	Helper function for all_create_or_get_group .
8427	Store the annotations of an item .
8428	Load annotations from node .
8429	Store a group on disk .
8430	Load a group of trajectories .
8431	Load all data from a TrajectoryNode .
8432	Extract missing flags from data_dict .
8433	Add a summary row to the metadata table .
8434	Add information to the metadata table .
8435	Helper function for _prm_store .
8436	Store the parameter or result of an instance .
8437	Write data into shared array .
8438	Write a shared table .
8439	Write a dictionary to an HDF5 table .
8440	Write pandas data to HDF5 .
8441	Write data into an existing array .
8442	Write into an HDF5 array .
8443	Delete a link .
8444	Helper function for all_delete_parameter_or_result
8445	Write data into a pytable .
8446	Create a PTItemMock for each column in the data .
8447	Helper function for _get_table_row and _get_table_col .
8448	Get the maximum length of a list of strings .
8449	Helper function for _prm_load_into_dict .
8450	Read a dictionary from a leaf .
8451	Read the shared data from the given node .
8452	Read the contents of a table or group .
8453	Wrapper for _svrc_read_array
8454	Load a single trajectory .
8455	Make a set name based on the index .
8456	Set the properties of the object .
8457	Add one or more dynamic imports to the import list .
8458	Setter for _crun and _idx
8459	Iterate over all runs in the trajectory .
8460	Shrink the trajectory .
8461	Set the default value of a parameter .
8462	Set the value of a parameter .
8463	Prepare the experiment for use .
8464	Get a value from a run .
8465	Check if a run is completed .
8466	Remove all expanded parameters from disk .
8467	Copy a node from one node to another .
8468	Explore all parameters in the trajectory .
8469	Update the run information dictionary .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Set self . _is_run to False
8474	Loads the skeleton .
8475	Wrapper for PyPi s load method .
8476	Store a backup of the trajectory .
8477	Add wildcards to the _reversed_wildcards dictionary .
8478	Merge multiple trajectories into the current one .
8479	Merge multiple runs into a single run .
8480	Rename the full_name to match the name of the other trajectory .
8481	Merge derived parameters from other_trajectory .
8482	Merge links to other_trajectory .
8483	Merge config with other_trajectory .
8484	Merge two trajectories in the same order .
8485	Merge results from other_trajectory into rename_dict .
8486	Migrate the trajectory to a new name .
8487	Store this trajectory .
8488	Restores the default values of all parameters .
8489	Set all explored parameters to the given index .
8490	Make a single run .
8491	Returns a list of all run names .
8492	Get the run information for a given name or index .
8493	Find the index of the first matching function in a list of parameters .
8494	Start a single run .
8495	Finalize the run .
8496	Set the start time of the run .
8497	Set the finish timestamp of the run .
8498	Construct an instance of the given class .
8499	Helper function to return a dictionary of parameters .
8500	Finalize the run .
8501	Get the configuration dictionary .
8502	Returns the results as a dictionary .
8503	Store a single item to disk .
8504	Load a single item from disk .
8505	Remove items from an iterator .
8506	Delete a list of links .
8507	Remove all nodes that match the predicate .
8508	Remove items from the trajectory .
8509	Wrapper for _sigint_handling_single_run .
8510	Frozen pool single - run .
8511	Configure the pool with the given kwargs .
8512	Set default parameters for frozen pooling .
8513	Process a single - run signal .
8514	Configure frozen_scoop with the given kwargs .
8515	Wrapper for _single_run .
8516	Configure the logging system .
8517	Configure the niceness of the process .
8518	Run a single process with sigint handling .
8519	Run a single run .
8520	Wrap the handler with sigint_handling .
8521	Load a class from a string .
8522	Create a class from the given name .
8523	Returns the length of the range .
8524	Return the value of the function as a string .
8525	Check if two values are equal .
8526	Get the range of the function .
8527	Explore the parameter .
8528	Explore an array .
8529	Perform some sanity checks on the data .
8530	Return a dictionary representation of the data .
8531	Load the parameter from a dictionary .
8532	Load the array parameter from a dictionary .
8533	Compare the values of val1 and val2 .
8534	Return True if the data is a supported matrix .
8535	Serialize a sparse matrix .
8536	Build the names for the parameter .
8537	Reconstructs a matrix from a list of data .
8538	Load the parameter from a dictionary .
8539	Store the parameter in a dictionary .
8540	Load the parameter from a dictionary .
8541	Translate key to v_name if needed .
8542	Return a string representation of the value .
8543	Return the data as a dictionary .
8544	Set the value of the field .
8545	Get a value from the result .
8546	Set a single result .
8547	Check if the item is a sparse matrix .
8548	Return a dictionary representation of the SparseParameter .
8549	Load data from a dictionary .
8550	Set a single result .
8551	Return a dictionary representation of the result .
8552	Load parameters from a dictionary .
8553	Merge all files in a folder .
8554	Upload a file to S3 .
8555	Download a file from S3 .
8556	Create an saga . Session object .
8557	Run the merge_trajs . py script on the remote host .
8558	Start the jobs .
8559	Multiply two reals .
8560	Run the neuron integration .
8561	Add summary . firing_rates to the trajectory .
8562	Add parameters to the model .
8563	Add exploration of I and tau_ref .
8564	Execute the pre - run network .
8565	Execute a network run .
8566	Extract all sub - runs from the given trajectory .
8567	Execute the network run .
8568	Add Parameters of Components and Analysers
8569	Run the pre - run network .
8570	Run the network .
8571	Run the network simulation .
8572	Make a filename for the given trajectory .
8573	Returns the next element in the chain .
8574	Merge all trajectories in a folder .
8575	Handle a SIGINT signal .
8576	Load a configuration from a file .
8577	Request the PIN code from ECobee .
8578	Request access and refresh tokens from ECobee .
8579	Refresh the access_token and refresh_token
8580	Get the list of registered thermostats .
8581	Write the tokens to the config file .
8582	Set the HVAC mode for a thermostat
8583	Set fan minimum on time .
8584	Set the temperature of a thermostat
8585	Set the climate hold of a thermostat
8586	Delete a vacation
8587	Resumes a program .
8588	Send a message to a thermostat
8589	Set the humidity level of a thermostat
8590	Generate a random delay to enter in SELECTING .
8591	Generate a random timeout for a given number of attempts .
8592	Generate the time left for a renew request .
8593	Generate a random renewing time .
8594	Return a dictionary of all FSM attributes .
8595	Reset the attributes of the device .
8596	Get the timeout function for a given state .
8597	Set the timeout of a function .
8598	Send a discover packet .
8599	Select an offer .
8600	Send a DHCPPREQUEST to the server .
8601	Set the timeouts for the lease .
8602	Process a DHCPACK packet .
8603	Process a received DHCPNAK packet .
8604	Set the state to INIT .
8605	Set the interface to be bound .
8606	Set the state to RENEWING .
8607	Set the state to REBINDING .
8608	Set the state to END .
8609	Set the state to ERROR .
8610	Timeout receiving a response to select .
8611	Raises a REQUESTING exception if there are too many retries .
8612	Raises a RENEWING exception if the request has been rebound .
8613	Timeout waiting for a response to a request .
8614	Handle an OFFER packet .
8615	Handle an ACK requesting packet .
8616	Handle a NAK request .
8617	Handle a RENEWING ACK .
8618	Handle a NAK and raise an exception .
8619	Handle a REBINDING ACK .
8620	Handle a NAK rebinding .
8621	Called when the lease is renewed .
8622	Set the value of a query parameter .
8623	Add a query parameter .
8624	Remove a query parameter .
8625	Get the status of the server .
8626	Create output dictionary from data and options .
8627	Entry point for the command line tool .
8628	Validate a message .
8629	Read a Tdms file into a list of channel names and data .
8630	Add a deformation to a list of channel names and data .
8631	Write tdms to fcs file .
8632	Return True if this diff is equal to the given cwd .
8633	Create a new patch .
8634	Delete the next patch .
8635	Delete a patch from the database .
8636	Check if a file is already in a patch
8637	Backup a file .
8638	Add a file to Quilt .
8639	Run the Quilt command .
8640	Create the directory if it doesn t exist .
8641	Copy this directory to another directory .
8642	Link this file to another file .
8643	Copy this file to dest .
8644	Returns the directory object for this file .
8645	Backup a file to dest_dir .
8646	Refresh the index for the given patch .
8647	Unapply the patch with the given name .
8648	Unapply the current top patch .
8649	Unapply all applied patches .
8650	Apply a patch to the series .
8651	Apply the next patch to the series .
8652	Apply all patches in the series .
8653	Read the series file .
8654	Save the series to a file .
8655	Add a patch .
8656	Insert the given patches into the patch2line dict .
8657	Add a list of patches to the document .
8658	Remove a patch .
8659	Returns the list of patches after the given patch .
8660	Returns the list of patches before the given patch .
8661	Return a list of all patches after the given patch .
8662	Replace old_patch with new_patch .
8663	Create the version file .
8664	Check the quilt meta - data version of the database .
8665	Add this argument group to the given parser .
8666	Add the command line arguments to the given parser .
8667	Add this command to subparsers .
8668	Set the args and kwargs for subparsers .
8669	Add the subparsers to the given parser .
8670	Check if a file is in the given patch
8671	Check if file is modified by next patches .
8672	Revert a file to its original state .
8673	Import a quilt patch .
8674	Import a set of patches into Quilt .
8675	Add a way to the graph .
8676	Iterate over all node ids that are not present in the graph .
8677	Add a node to the graph .
8678	Build a Route object from an OpenStreetMap relation .
8679	Create a long name for a route .
8680	Get the agency id for a relation .
8681	Process the public transport file .
8682	Add a relation to the graph .
8683	Create a dummy data object .
8684	Patch a list of agencies .
8685	Create dummy stop times for a trip .
8686	Write the data to a zipped file .
8687	Write the contents of the zipped file to the given destination .
8688	Build an Agency object from a relation .
8689	Extract stops from a relation .
8690	Build a shape for each node in the relation .
8691	Get the supported versions of the device .
8692	Send an APDU to the device .
8693	Authenticate with U2F .
8694	Register with U2F .
8695	Authenticate with U2F .
8696	Register with U2F .
8697	Convert unicode string to unicode string .
8698	Wrap a function with an error decorator .
8699	Wrap a class with an error decorator .
8700	Returns True if filepath matches any of the patterns in only_blame_patterns .
8701	Given an email address return the corresponding email address .
8702	Get an entry from the entry tree .
8703	Convert markdown to reST .
8704	Start the flawless web server .
8705	Record an exception .
8706	Download an image from a URL .
8707	Convert an image string to an Image object .
8708	Decorator to apply a validator to an image .
8709	Check if the image is big enough .
8710	Check if the given width is big enough .
8711	Check if the given height is big enough .
8712	Return the category associated with the given item .
8713	Parse the totals field of an item .
8714	Return an iterator over all the items in the document .
8715	Save an error .
8716	Parse the data and save it to the database .
8717	Parse an item into a dictionary .
8718	Get an instance of the model based on the given data .
8719	Save an item .
8720	Download a file from url to dest .
8721	Load the source file .
8722	Get the items from the CSV file .
8723	Set whether or not to allow network access .
8724	Run a command in the container .
8725	Add files to the container .
8726	Add a file to the working directory and rename it .
8727	Returns a list of CanvasEnrollment objects for the given course .
8728	Method to get the list of enrollments for a given SIS .
8729	Returns a list of CanvasEnrollment objects for each section .
8730	Fetches a list of enrollments for a given SIS Section .
8731	Returns a list of CanvasEnrollment objects for the given regid .
8732	Enroll a user in a course .
8733	Returns a list of CanvasRole objects for each role in the given account .
8734	Get a list of all roles in an account .
8735	Get the effective course roles in the given account .
8736	Get a specific role .
8737	Get a role by account_sis_id
8738	Get a specific course .
8739	Get a single course by its sis id .
8740	Get a list of all courses in an account .
8741	Get a list of all courses in an sis account .
8742	Get a list of all courses in an account that have been published .
8743	Get a list of all published courses in an sis account .
8744	Returns a list of CanvasCourse objects for the given regid .
8745	Creates a new CanvasCourse for the given account .
8746	Update the SIS ID of a course .
8747	This API endpoint allows you to get the activity of a term in an account .
8748	Get a list of grades for a given account and term .
8749	This API endpoint allows you to get the statistics of a term in an account .
8750	Get an activity by its sis course ID .
8751	This API endpoint allows you to get the assignments for a particular sis course .
8752	This API endpoint allows you to get the student summaries for a particular sis course .
8753	Returns the student activity for the given sis user and sis course .
8754	Get the student messaging for the given sis course and user id .
8755	Get a list of external tools in an account .
8756	Returns a list of external tools in a course .
8757	Create an external tool in a context .
8758	Update an external tool .
8759	Delete an external tool from a context .
8760	Check that all required parameters are set for the given object .
8761	Get a user s profile .
8762	Returns a list of CanvasUser objects for the specified course .
8763	Returns a list of users for the given SIS ID .
8764	Creates a new user in the specified account .
8765	Get a list of logins for a user .
8766	Update a user login .
8767	Return the URL of the next page .
8768	Helper function for _get_resource_url
8769	Get a paginated resource .
8770	Wrapper for _get_resource_url .
8771	Make a PUT request to the specified resource .
8772	Helper method for POSTing a resource .
8773	Helper method to delete a resource .
8774	Returns a list of CanvasAdmin objects for the given account .
8775	Create an admin for a user .
8776	Create an admin for a user by SIS Account ID .
8777	Delete an admin for a user
8778	Delete an admin by SIS Account ID .
8779	Create a new grading standard for a given course .
8780	Get a specific section .
8781	Get a specific section by its identifier .
8782	Get a list of all sections in a course .
8783	Calls get_sections_in_course with the given sis_id
8784	Returns a list of all sections with students in the given course .
8785	Calls get_sections_with_students_in_course with the given sis_id
8786	Create a section in a course .
8787	Update a section .
8788	Returns a list of Quiz objects for the given course .
8789	Get a specific account .
8790	Returns a list of all sub - accounts of the given account .
8791	Update an account .
8792	Update the SIS ID of an account .
8793	Get the authentication settings for an account .
8794	Updates the authentication settings for an account .
8795	Get a term by its sis_term_id
8796	Creates a new SISImportModel from a CSV string .
8797	Import a directory into the SIS .
8798	Get the status of an SIS Import .
8799	Build the import . zip file .
8800	Returns a list of Assignment objects for the given course .
8801	Updates an existing assignment .
8802	Get a list of all available reports for the given account .
8803	Get a list of reports of the given type for the given account .
8804	Creates a new report in the specified account .
8805	Creates a course provisioning report .
8806	Creates a course sis export report .
8807	Creates an unused courses report .
8808	Get report data .
8809	Get the status of a report .
8810	Delete a report .
8811	Move all detections in a label .
8812	Horizontally flip detections .
8813	Get a dictionary representation of an object .
8814	Get the config from the settings .
8815	Return the empty value for the field .
8816	Parse arguments and keyword arguments .
8817	Create metrics from a list of MetricConfig objects .
8818	Setup logging to stderr .
8819	Configure the registry .
8820	Create metrics for the given configurations .
8821	Get a metric by name and optional labels .
8822	Handle the home page .
8823	Handles the metrics request .
8824	Query the Wolfram alpha API .
8825	Fix http_client . HTTPMessage . get_content_type and http_client . HTTPMessage . get_param .
8826	Perform a Wolframalpha query .
8827	Return a list of pods assumptions and warnings .
8828	Returns a generator of all results .
8829	Encode data to JSON .
8830	Make a request to the API .
8831	Make a GET request .
8832	Make a DELETE request to the given URL .
8833	Make a PUT request to a URL .
8834	Make a POST request to a URL .
8835	Process a disambiguation query .
8836	Group sentences into groups of total_nb_sentences .
8837	Disambiguates a PDF file .
8838	Disambiguates a query .
8839	Segment the given text .
8840	Get the language of the given text .
8841	Get a single concept .
8842	Fit the ensemble with the given features and classes .
8843	Return the accuracy score of the ensemble .
8844	Fit MDR to a set of features and class labels .
8845	Fit and predict the model .
8846	Returns the accuracy score of the MDR model .
8847	Fit the model to the given features and targets .
8848	Transform a set of features into a new vector .
8849	Calculate the score of the MDR model .
8850	Predict using the MDR model .
8851	Generate n way models .
8852	Plot the MDR grid .
8853	Get the config dictionary for the given app .
8854	Get a configuration value .
8855	Create a vector from an iterable of members .
8856	Create a new vector with the given members .
8857	Evaluate the given file with the given context .
8858	Evaluate the given stream with the given context .
8859	Evaluate a string .
8860	Bootstrap the REPL module .
8861	Run code in the given namespace .
8862	Create a multi - function from a dispatch function .
8863	Add a method to a map .
8864	Add a method to the MultiFunction .
8865	Returns the method with the given key or None if it does not exist .
8866	Remove a method from a map .
8867	Remove a method from the MultiFunction .
8868	Return True if v is a macro .
8869	Get the line and column of a LispForm .
8870	Wrap a parse function to fix missing locations .
8871	Raise an exception if the node is not a RECUR .
8872	Assert that the current node is the tail of the current node .
8873	Resolve a bare symbol .
8874	Resolve a symbol .
8875	Parse the AST for the given reader form .
8876	If warn_on_shadowed_name is set return True . Otherwise return False .
8877	Put a new symbol in the symbol table .
8878	Return a string representation of a map .
8879	Return a string representation of a sequence .
8880	Return a string representation of an object .
8881	Return a string representation of the given object .
8882	Fix missing locations .
8883	Compile the given reader form and execute it .
8884	Compile the given Python AST into the given module .
8885	Compile the given forms into the given module .
8886	Compile a list of bytecode into a Python module .
8887	Convert an iterable into a sequence .
8888	Munge a string .
8889	Remove all underscores and dashes from a string .
8890	Return a Fraction instance .
8891	Get a logging handler .
8892	Create a new map from a mapping .
8893	Split a collection into n elements .
8894	Wrap a function in a with_meta method .
8895	Read a namespace from the reader .
8896	Read a collection from the reader .
8897	Read a list from the reader .
8898	Read a vector from the reader .
8899	Read a set from the reader .
8900	Read a map literal .
8901	Read a string from the reader .
8902	Read a Gensym symbol .
8903	Read a keyword from the context .
8904	Read and return a meta object .
8905	Read a function definition .
8906	Read a quoted list .
8907	Expands a syntax quoted form .
8908	Process a syntax - quoted form .
8909	Read a syntax - quoted form .
8910	Read the next unquoted form .
8911	Read a _DEREF token .
8912	Read a single character .
8913	Read a regular expression from the context .
8914	Read a LispReaderForm from the reader .
8915	Read the next consuming comment .
8916	Read the next LispReaderForm .
8917	Read an expression from a stream .
8918	Read a string into an iterable of ReaderForm objects .
8919	Read a file and return an iterable of reader forms .
8920	Update the location of a character .
8921	Remove the last element from the stack .
8922	Read the next token from the stream .
8923	Encode a Basilis bytecode message .
8924	Get bytecode from cache data .
8925	Return the path to the cache file .
8926	Add BasilispImporter to sys . meta_path .
8927	Find a Basilisp module in the given path .
8928	Execute a cached Basilisp module .
8929	Load and compile a Basilisp module .
8930	Execute a Basilisp module .
8931	Create a new symbol with the given name and namespace .
8932	Return a list of keywords that match the given text .
8933	Get or create a Keyword object .
8934	Return the keyword with the given name and namespace .
8935	Given a generator of GeneratedPyASTs return the dependencies and nodes of the generator .
8936	Load an ast . Attribute from a dotted name .
8937	Wrap a generator function to generate a simple AST .
8938	Create an AST stream from a collection of ASTs .
8939	Set the lineno and col_offset of the Python AST .
8940	Decorate a function to return a GeneratedPyAST with its location .
8941	Decorate a function with ast and loc dependencies .
8942	Return True if v is a dynamic variable .
8943	Return True if v is redefinitable .
8944	Convert an ast . AST into an ast . Expr .
8945	Create an ast . FunctionDef from a GeneratedPyAST .
8946	Check if we should warn on redef .
8947	Convert a Do node into an ast .
8948	Generate the name of a function .
8949	Convert function arguments to ast . AST .
8950	Convert a single - arity function to a Python AST .
8951	Convert a multi - arity function to a Python AST .
8952	Convert a function to a Python AST .
8953	Convert an if - body node to an ast .
8954	Convert an If node into an ast .
8955	Convert Invoke node to ast . Call node .
8956	Convert a Quote node into a Python AST .
8957	Convert a Recur node to an ast .
8958	Convert a Recur node to a Python AST .
8959	Convert a SetBang node into an ast .
8960	Convert a Throw node into an ast .
8961	Convert a Try node into an ast .
8962	Convert a local symbol to an ast .
8963	Return an ast . Attribute node that finds the variable with the given name and namespace .
8964	Convert a VarRef to an ast .
8965	Convert a HostField node to an ast .
8966	Convert a MaybeClass to an ast .
8967	Convert a MaybeHostForm node into a Python AST .
8968	Convert a constant value to a Python AST .
8969	Converts a collection literal to a Python AST .
8970	Generate a Python AST from a Lisp AST node .
8971	Generator of ast . Import nodes .
8972	Create an ast . ImportFrom from the basilisp . lang . runtime module .
8973	Return an ast . Assign node for a namespace variable .
8974	Convert an iterable into a set .
8975	Return a new set containing only the specified members .
8976	Return an ast . ExceptHandler node .
8977	Return node s value if it is a constant .
8978	Return an ast . AST node representing the function definition .
8979	Return an ast . While node .
8980	Return an ast . AST node for the given Try node .
8981	Create a new module .
8982	Returns the first element of o or None if o is not a sequence .
8983	Return the rest of the sequence .
8984	Return the nth rest of a collection .
8985	Returns the nth item in the collection or None if the collection is empty .
8986	Construct a list from a sequence .
8987	Convert an object into a sequence .
8988	Concatenate sequences .
8989	Associate a key - value pair with another key - value pair
8990	Conjugate of a collection .
8991	Decorate a function with the given arguments .
8992	Dereference an object .
8993	Return True if v1 is equal to v2 .
8994	Divide two numbers .
8995	Sort a collection by a function .
8996	Return True if coll contains k .
8997	Get a value from a dictionary .
8998	Convert an object to a Lisp object .
8999	Convert an object to a Python object .
9000	Return a string representation of the given object .
9001	Given a tuple of arguments collect a list of them .
9002	Return a trampoline function for a function .
9003	Decorator to add attributes to a function .
9004	Decorate a function with meta .
9005	Decorator to mark a function as a Basilis function .
9006	Resolve an alias for a symbol .
9007	Resolve a symbol s variable .
9008	Add a generated python to the current namespace .
9009	Bootstrap a dynamic namespace variable .
9010	Intern a variable with the given name and value .
9011	Intern an unbound variable .
9012	Find a variable in a namespace .
9013	Find a variable in a namespace .
9014	Find a variable by its fully qualified name .
9015	Add a default import .
9016	Add an alias to the namespace .
9017	Return the interned value of the given symbol .
9018	Intern a symbol in a map .
9019	Find the variable that corresponds to the given symbol .
9020	Add an import symbol to the module .
9021	Returns the imported module for the given symbol or None if it doesn t exist .
9022	Add a reference to a variable .
9023	Get the reference to the given symbol .
9024	Return a mapping of symbols to their respective variables in other_ns_interns
9025	Set all references to other_ns .
9026	Get or create a namespace from the namespace map .
9027	Get or create a namespace with the given name .
9028	Get the namespace with the given name .
9029	Remove the namespace with the given name .
9030	Returns a completion matcher that matches the given text .
9031	Completes all aliases with the given prefix .
9032	Completes all imports and aliases with the given prefix .
9033	Completes the interns of the given value .
9034	Return a list of all references that match the given value .
9035	Completes the given text .
9036	Returns the arguments of the function .
9037	Return a list of the given members .
9038	Return a list of the given members .
9039	Return a new representer that changes the style of a scalar .
9040	Decrypt a JWT .
9041	Encrypt the given JSON using the given key .
9042	Delete an item from the cache .
9043	Convert to python equivalent .
9044	Close the writer .
9045	Parse a fiql string into an Expression object .
9046	Write an NDB model to a file - like object .
9047	Decode date values .
9048	Decode a date string into a datetime object .
9049	Decode val into a Python object .
9050	Return the default value for an object .
9051	Validate the leicacam release version .
9052	Generate a changelog for the current version .
9053	Return a list of strongly connected components in a graph .
9054	Return a robust topological sort of a graph .
9055	Set the parent of this object .
9056	Returns the parent expression of this object .
9057	Add an operator to the expression .
9058	Adds an element to the working fragment .
9059	Add an AND operator to the expression .
9060	Add an OR operator to the expression .
9061	Decorate a function with a logger .
9062	Parse the received message and return a list of dictionaries .
9063	Convert a list of tuples into a dictionary .
9064	Check a list of messages for a given command .
9065	Prepare the message to send .
9066	Flush all incomming socket messages .
9067	Enable a slide .
9068	Save leicacam template to a file .
9069	Load a leicacam template .
9070	Get information about the device .
9071	r Write an inc file to the given file pointer .
9072	Locate the package . json file .
9073	Parse the package . json file .
9074	Handle an API error with json data .
9075	Validate Yourls API response .
9076	Homogenize two waves .
9077	Interpolate the indep_vector with the given wave .
9078	Get the independent vector between two WAVEs .
9079	Verify that two waveforms are compatible .
9080	Load the systemjs manifest .
9081	Return a tuple of parameters for the given module .
9082	Run a trace of a module .
9083	Shorten a URL .
9084	Expand a short URL .
9085	Get the URL stats for a shortened URL .
9086	Get total clicks total_links total_clicks total_links total_clicks total_links total_links total_clicks total_links total_links total_clicks total_links total_clicks total_links total_links total_clicks total_links total_links total_clicks total_links total_links total_clicks total_links total_links total_clicks total_links total_links total_clicks total_links total clicks total clicks total clicks total clicks total clicks total_links total_clicks total_links total_links
9087	Get the current database stats .
9088	r Print a command to the terminal .
9089	Execute a command and echo it to the terminal .
9090	Log a message to stdout .
9091	A property decorator that caches the result of the given method .
9092	Split an iterable into chunks of size chunksize .
9093	Decorate a function to process chunks of an iterable .
9094	Flatten an iterable .
9095	Exits the program with a SIGINT signal .
9096	Print a tab - separated table .
9097	Create a dummy class with the given name and attributes .
9098	Convert a human readable string to an instance of this class .
9099	Create a Youtube API client .
9100	Trace the Waveform module .
9101	Add links to requirements . json .
9102	Add a common entry to plist .
9103	Add a multi entry to plist .
9104	Convert comparison operators to words .
9105	Iterate over chunks of noise data .
9106	Compute the parameters for a chunk of data .
9107	r Write touchstone data to a file .
9108	Return a copy of the waveform with indep_min and indep_max bound .
9109	Build the units for the given operation .
9110	Return a copy of the wave with the given name and units .
9111	Calculate the running area of a rectangular mesh .
9112	Validate indep_min and indep_max arguments .
9113	r Calculate the cosine cosine of a wavefunction .
9114	r Calculate the square root of a wavefunction .
9115	r Calculate the angle of the sinusoids of a wavefunction .
9116	r Calculate the angle hypothesis of a wavefunction .
9117	r Calculates the average of the input waveforms .
9118	r Return a copy of the given waveset with a dB representation of the input waveset .
9119	r Return the derivative of the waveform .
9120	r Calculates the imaginary part of the FFT of a wavevector .
9121	r Calculates the absolute Fourier Transform of a waveset .
9122	r Compute the Fourier Transform of a waveset .
9123	r Calculates the real - valued Fourier Transform of a waveset .
9124	r Calculate the inverse Fourier Transform of a waveset .
9125	r Calculates the inverse Fourier Transform of a waveset .
9126	r Calculates the absolute Fourier Transform of a waveset .
9127	r Phase of the Fourier Transform of a waveset .
9128	r Calculates the real value of the Fourier Transform of a waveset .
9129	r Return an integral waveform .
9130	r Calculate the group delay of a wave .
9131	r Logarithm of a wavefunction .
9132	r Calculates the linear deviation of the input wave .
9133	r Return the number of independent components of a waveform .
9134	r Return the maximum value of a waveform .
9135	r Calculate the minimum value of a waveform .
9136	r Return the phase of the wave .
9137	r Convert a complex wavefunction to integer .
9138	r Calculates the square root of a wavefunction .
9139	r Return a copy of a subwaveform .
9140	r Return a copy of the wavevector with complex components .
9141	r Convert a complex wavefunction to a float .
9142	r Convert a complex wavefunction to an integer .
9143	r Return the value of an independent variable .
9144	Look for JSPM packages in the given path .
9145	Get the short description from a long description .
9146	Builds an expression from a list of tokens .
9147	Remove the next delimiter from the list .
9148	Get a list of functions from an expression .
9149	Return a list of tuples where each tuple is the left and the second tuple is the right and the second is the left and the second is the right .
9150	Parse an expression .
9151	Remove consecutive delimiters from an expression .
9152	Split text into groups of count elements .
9153	Convert a number into a NumComp tuple .
9154	r Converts a number to its scientific representation .
9155	r Calculates the peng of a number .
9156	r Convert a string to a float .
9157	r Return the peng fraction of a string .
9158	r Return the peng - mant value of a string .
9159	r Convert a string to an EngPower object .
9160	r Calculate the peng suffix math .
9161	r Remove extra delimiters from an expression .
9162	Convert a number to a scientific string .
9163	Convert a number to a scientific tuple .
9164	Find a sourcemap comment in a file .
9165	Check if the file needs an extension .
9166	Run the JSPM bundle command .
9167	Get the trace for the given app .
9168	Return True if the hashes of the dependencies are the same .
9169	Format a hexdump string .
9170	Parse a docstring .
9171	Return a list of all valid identifiers .
9172	Parse a deferred add action .
9173	Split a line into a list of parts .
9174	Check if we need to initialize the context .
9175	Return the help text for a builtin function .
9176	Find a function in the given context .
9177	List all functions defined in the given context .
9178	Return True if arg is a flag .
9179	Process command line arguments .
9180	Extract the value for a keyword argument .
9181	Invoke a single function .
9182	Invoke the method on the given line .
9183	Invoke method on a string .
9184	Parse a parameter declaration from a docstring .
9185	Parse the return declaration of a function .
9186	Classify a section name .
9187	Classify a line .
9188	Join a list of lines into a list of paragraphs .
9189	Wrap the maindoc in a string and format it .
9190	Converts the given value to the specified type .
9191	Convert a binary value to the specified type .
9192	Get the size of the given type .
9193	Formats the given value according to the given type .
9194	Validate that a type object is valid .
9195	Check if the given type name is known .
9196	Split a complex type name into its base and subtypes .
9197	Instantiate a complex type .
9198	Get a type by its name .
9199	Check if the given type has a known format .
9200	Inject a type into the registry .
9201	Load the types from a module .
9202	Return True if pos_args and kw_args are filled .
9203	Add a parameter to the annotation .
9204	Set the return info for a typed return value .
9205	Add a custom return value .
9206	Match a short - name to a full parameter name .
9207	Returns the type of the parameter with the given name .
9208	Return the signature for this function .
9209	Format the return value .
9210	Convert a positional argument .
9211	Check that the spec is valid .
9212	Convert an argument to the specified type .
9213	Return a string representation of the exception .
9214	Return a dictionary representation of the exception .
9215	Check and execute a function and return the result .
9216	Parse a list of validators into a list of tuples .
9217	Find all objects in the given container .
9218	Create a context from a module .
9219	Get the help text for a function .
9220	Decorator to add a parameter to an annotated function .
9221	Decorator to annotate a function with a custom return value .
9222	Decorator to annotate a function with a typed return value .
9223	Decorator to mark a class as a context .
9224	Decorate a function with docannotate .
9225	Mark a function as annotated .
9226	Return the short description of a function .
9227	Load the cron module .
9228	Install crontab tasks .
9229	Print all registered tasks .
9230	Uninstall the current crontab .
9231	Create a new resource from a URI .
9232	Load project configs from the project directory .
9233	Save the projects config to disk .
9234	Define a singleton property on the carrier .
9235	Returns a dictionary of all projects that depend on this project .
9236	Decorator to post - process the result of a function .
9237	Initialize the project .
9238	Set the value of a key in the dictionary .
9239	Set an attribute on the object .
9240	Create an Lens object from an iterable .
9241	Returns a setter that will set the value of the option .
9242	Returns a function that will be called with the given new values .
9243	Return a function that will be applied to each state .
9244	Return a function that returns n arguments .
9245	Raises an error if the function is not implemented .
9246	Apply the function f to the pure state .
9247	Return the preview of this fold .
9248	Converts the fold to a list of values .
9249	Apply a function over the current value .
9250	Set the state to the given value .
9251	Iterate over an iterable .
9252	Return the type of the optics .
9253	Main entry point for the game .
9254	Return a new Vector by stepping the vector towards the given vector .
9255	Handle an input .
9256	Advance the robot s crashes .
9257	End the game .
9258	Ask the user to move the player .
9259	Play a game of naughts and crosses against the computer .
9260	Move the player to the specified location .
9261	The winner of this board if one exists .
9262	Yields the potential wins in the board .
9263	Add an item to the list .
9264	Called when a spider is opened .
9265	Upload a single chunk to S3 .
9266	Make a gzipped file object .
9267	Get the state of an account .
9268	Get the current state of an asset .
9269	Get a block by its hash .
9270	Get the hash of a block .
9271	Get the system fee of a block .
9272	Get the contract state for a given script .
9273	Get a raw transaction by its hash .
9274	Get the value of a key in the storage .
9275	Get the output of a transaction .
9276	Invoke a script with the given parameters .
9277	Invoke a JSON - RPC function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Call a JSON - RPC method .
9282	Return True if s is a hash256 string .
9283	Check if a string is a hash160
9284	Encode a list of invocation parameters .
9285	Decode an invocation result .
9286	Decorate a function to specify the default value of a keyword only argument .
9287	Convert a timezone - aware datetime - like object into a timezone - aware datetime object .
9288	Apply the unit to dttm with the given timezone .
9289	Save the template to a file .
9290	Render the barcode .
9291	Calculate the checksum of the EAN .
9292	Render the code .
9293	Connect to the KVS server .
9294	Entry point for s3conf .
9295	Download a file from s3 .
9296	Upload local_path to remote_path
9297	Downsync a configuration file .
9298	Print a diff between the current configuration and the given section .
9299	Parse an environment variable .
9300	Set basic user credentials .
9301	Set the API key .
9302	Get JSON content from folder .
9303	Returns a dictionary of all registered schemas .
9304	Get the JSON schema for this object .
9305	Returns a jsonschema . RefResolver for this schema .
9306	Validate an object against the schema .
9307	Returns a list of all valid examples .
9308	Returns a list of invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of a OneDrive user .
9313	Get OneDrive object representing list of objects in a folder .
9314	Create a new skydrive folder .
9315	Add comment message to a specified object .
9316	Convert or dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag & drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and then displays it
9324	Get a parameter from a tag .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components one pixel at a time
9331	delete all of the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update
9334	When dealing with a Top - Level window position it absolute lower - right
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated wit the wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the item from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	called when adding a control to the window
9349	Re - parent a child control with the new wx_obj parent
9350	make several copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all modules in a directory .
9354	Return a list of children sub - components that are column headings
9355	Update the grid if rows and columns have been added or deleted
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	col -> sort the data based on the column indexed by col
9359	Remove all rows and reset internal structures
9360	Called to create the control which must derive from wxControl .
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell . Returns True if changed
9363	Return True to allow the given key to start editing
9364	This will be called to let the editor do something with the first key
9365	Creates a metaclass for the given type .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable all top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Set the object attributes from the given tag .
9373	Replace spaces with \ u00a0 .
9374	Get the documenter for the given object .
9375	Mangle a signature .
9376	Import a module by its fully qualified name .
9377	Create an object role .
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string or None if cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Set the icon
9386	Display or hide the window optionally disabling all other windows
9387	Open read and eval the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	translate gui2py attribute name from pythoncard legacy code
9393	Write content to the clipboard data can either a string or a bitmap
9394	Find autosummary in the docstring of a module .
9395	Add the object and all their childs
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Returns the URL of the image as a string .
9401	Register a function as an expression filter .
9402	Register a function as a node filter .
9403	Assert that the current document has the given path .
9404	Assert that there is no current path at the given path .
9405	Check if the given path is the current path .
9406	Returns True if path has no current path .
9407	Select an option .
9408	Apply the filter to the expression .
9409	Returns a webdriver object for the given browser name .
9410	Returns the XPath representation of the expression .
9411	Returns True if the given node matches the filter .
9412	Switch to a frame element .
9413	Accept an alert and wait for it to finish .
9414	Prompt the user to enter a confirmation .
9415	Dismiss the confirm dialog .
9416	Accept a modal prompt .
9417	Dismisses the prompt .
9418	Save the page to a file .
9419	Save a screenshot to a PNG file .
9420	Raise server error if capybara . raise_server_errors is True .
9421	Check if the given node matches the given value .
9422	Tests if element identified by locator is checked .
9423	Tests if element identified by locator is not checked .
9424	Tests if element identified by locator is unchecked .
9425	Tests if element identified by locator is not unchecked .
9426	Assert that the query returns text .
9427	Assert that the query has no text .
9428	Assert that the element has the given title .
9429	Assert that the element does not have a title .
9430	Check if the document has the given title .
9431	Returns True if the document has no title .
9432	Find all elements matching the given criteria .
9433	Find the first element in the collection .
9434	Get the inner content of the given node .
9435	Get the inner text of the given node .
9436	Normalize a URL .
9437	Create a setter decorator that can be used as a decorator .
9438	Decorator to synchronize a function .
9439	Return True if the given error should be caught .
9440	Compare the result count with the query options .
9441	Return True if there are at least size results .
9442	Returns True if the options dict contains only None values .
9443	Generate a failure message .
9444	Returns True if count matches the given options .
9445	Normalizes text .
9446	Normalizes whitespace .
9447	Convert text to a regular expression .
9448	Check if the current URL matches the expected path .
9449	Resize the window .
9450	Start the WSGI server .
9451	Setter for __fcget .
9452	Sets the instance method of the class .
9453	Set the class method to use .
9454	Return the current traceback as a string .
9455	Get the source code for an object .
9456	Returns the logger for the given instance .
9457	Set the logger to use .
9458	Send a request to the API .
9459	Get a list of all channels .
9460	Returns a list of users .
9461	Make a message .
9462	Translate a message .
9463	Send a Slack message .
9464	Read a channel from the protocol .
9465	Run the Slack API .
9466	Run the slack client .
9467	Return the difference between two dictionaries .
9468	Colorize a message .
9469	Called when a task is started .
9470	Called when the result from the runner is OK .
9471	Print the stats to stdout .
9472	Called when a task is skipped .
9473	Convert a prefix to an addressmask string .
9474	A decorator to check if a value is empty .
9475	Add a model to the document .
9476	Get a dictionary of all elements in the collection .
9477	Load attributes from a dictionary .
9478	Convert to a dictionary .
9479	Parse a config element .
9480	Parse the state of the configuration .
9481	Translate the configuration .
9482	Load all Jinja filters .
9483	Find a file in the yang mappings directory .
9484	Convert a model to a dictionary .
9485	Return a diff between two objects .
9486	Make an HTTP POST request .
9487	Returns the authorization code URI for the given parameters .
9488	Get a new access token .
9489	Returns a dictionary of query parameters for the given URL .
9490	Remove the query string from a URL .
9491	Build a URL from a base URL .
9492	Called when an exception is raised .
9493	Make a response object .
9494	Creates a response to redirect to the given URI with the given error .
9495	Make a JSON response .
9496	Returns an authorization code response .
9497	Create a new access token using a refresh token .
9498	Get a token from an authorization code grant .
9499	Get authorization code from URI .
9500	Get token from POST data .
9501	Returns an authorization object from the request header .
9502	Open the i2c device .
9503	Read a single byte from the specified address .
9504	Read a number of bytes from the specified address .
9505	Read a byte from an i2c device .
9506	Write bytes to the device at addr .
9507	Write a byte to a device .
9508	Write a block of data to an i2c device .
9509	Get the CDN URL .
9510	Create a copy of this object .
9511	Create a local copy of the given effects .
9512	Create a remote copy of a file .
9513	Construct a File from a file_info dictionary .
9514	Upload a file object to the server .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Returns a list of all CDN URLs for each file in the group .
9518	Construct a group from a group_info dict .
9519	Create a new group .
9520	Return the base opration for the given request .
9521	Yields all UUIDs of all files in the sequence .
9522	Return a list of items .
9523	Print a bar of the given number of parts .
9524	Make a request to the upload server .
9525	Get the home mode status .
9526	List all cameras .
9527	Get information about the specified cameras .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get motion settings for a camera event .
9531	Save camera parameters .
9532	Update the camera list .
9533	Return True if li is the last li in meta_data
9534	Get data for a single list node .
9535	Get the ILV value of an element .
9536	Get the vMerge attribute of the given element .
9537	Get the number of grid spans
9538	Get the td element at the given index .
9539	Return True if the given style has a false value .
9540	Return True if r is bold False otherwise .
9541	Return True if the element is an italics element .
9542	Return True if r is underlined .
9543	Return True if the element is a Title element .
9544	Get text run content data .
9545	Get the relationship information from a tree .
9546	Get document data from file .
9547	Get ordered list type from meta data .
9548	Build a list from a list of nodes .
9549	Build a tr element .
9550	Build a table element .
9551	Get the content of a tag .
9552	Remove a tag from the tree .
9553	Find a file in the dataset directory .
9554	Load the MNIST dataset .
9555	Load a CIFAR image from a tar archive .
9556	Plot an array of images at a given location .
9557	Plot the layers of a list of weights .
9558	Plot grayscale or rgb filters .
9559	Generates a random batch of data from a list of arrays .
9560	Encode text using the forward index .
9561	Create a batch of classifier inputs and outputs .
9562	Predict a sequence of samples from a set of labels .
9563	Add convolution weights to the model .
9564	Encode the data .
9565	Decode the input z .
9566	Find output layer .
9567	Return the score of x .
9568	Predict the value of the last layer .
9569	Predict the probability of x .
9570	Predict the logit of x .
9571	Return the mean value of the prediction .
9572	Create a batch of features and labels for each sequence .
9573	Create a sample of batches from the dataset .
9574	Load a network from a file .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Given a list of outputs and a list of patterns yield the outputs matching the patterns .
9578	Given a list of layers and a list of patterns yield the parameters that match the pattern .
9579	Create a BernoulliGraph instance from the given kwargs .
9580	Returns a list of all the variables in the model .
9581	Calculate the accuracy of the prediction .
9582	Run the theano scan on inputs and outputs .
9583	Build an Activation object .
9584	Reservoir a set of vectors .
9585	Add a loss to the model .
9586	Iteratively train a dataset using downhill .
9587	Train the model .
9588	Calculate the hash of the model .
9589	Builds the computation graph .
9590	A list of all input layers .
9591	Returns a list of all variables in the loss .
9592	Find the layer with the given name and parameter .
9593	Apply the feed - forward regularizer to x .
9594	Predict the output of the model .
9595	Return the score of the model with respect to x y .
9596	Save the model to a pickle file .
9597	Load a model from a pickle file .
9598	Calculate the loss of the model .
9599	Build the update graph from the given regularizer arguments .
9600	The output size of the layer .
9601	Connect the graph to the inputs .
9602	Bind this layer to a graph .
9603	Resolve the input shapes for each layer .
9604	Resolve the output shape of the layer .
9605	Log the current state of the layer .
9606	Log the parameters .
9607	Format a string for printing .
9608	Resolve a shape from a list of layers .
9609	Find the parameter with the given key .
9610	Add a bias parameter .
9611	Return a dictionary representation of the form .
9612	Compute the log - likelihood of a band .
9613	Calculate the log - likelihood of an image .
9614	Add a new tier to the interval .
9615	Remove a tier by its name .
9616	Returns the tiers with the given name .
9617	Convert to an EAF object .
9618	Add a point to the tier .
9619	Add an interval to the tier
9620	Remove an interval from the tier .
9621	Remove a point from the tier .
9622	Get a list of all intervals .
9623	Returns a list of all intervals .
9624	Increase the indentation level of an element .
9625	Add an annotation to a tier .
9626	Add a controlled vocabulary entry .
9627	Add a description for a controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type to the model .
9632	Add a link to a file .
9633	Add a locale .
9634	Add a secondary linked file descriptor .
9635	Add a new tier .
9636	Remove all time slots from self . timeslots .
9637	Extract a time range from the EAF file .
9638	Generate an annotation id .
9639	Generate a timestamp id .
9640	Returns a list of child tiers for the given id_tier
9641	Get the full time interval .
9642	Get the ref annotation data after the given time .
9643	Get the ref annotation data before the given time .
9644	Returns a list of tiers with the given ling_type and parent .
9645	Merge a list of tiers into a new tier .
9646	Remove all annotations from the given tiers .
9647	Remove a description from the controlled vocabulary .
9648	Remove a license .
9649	Remove linked files .
9650	Remove a property .
9651	Remove the annotation for the given id_tier and time .
9652	Remove secondary linked files .
9653	Remove a tier .
9654	Remove one or more tiers from the simulation .
9655	Rename a tier .
9656	Shift the annotations by the given time .
9657	Entry point for the algorithm .
9658	Display debug information for the storage
9659	Get the base level of the given text .
9660	Get the level of each character in text .
9661	Explicitly embed characters based on their type and level .
9662	Calculate the level runs for the given storage .
9663	Resolve weak types .
9664	Resolve the neutral types of all runs in the given storage .
9665	Reverse a contiguous sequence of characters .
9666	Reorder resolved levels .
9667	Process the current file .
9668	Convert from PySide2 import to Qt import
9669	Add an attribute to an object .
9670	Command line interface for Qt .
9671	Maintain backwards compatibility .
9672	Show the MayaWindow .
9673	Find and return the first gui that is available .
9674	Deregisters the host .
9675	Add to file menu .
9676	Maintain the current selection .
9677	Context manager for maintaining time .
9678	Show a messagebox with no GUI .
9679	Load TelegramBotAPI types .
9680	Get the cumulative sum of the data .
9681	Return a list of values for a single axis .
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters necessary to transform x & y coordinates
9684	Reverse a mapping .
9685	Iterate over a range of floats .
9686	Add a data descriptor to the data list .
9687	Add svg definitions
9688	Add data to the list .
9689	Burn the graph .
9690	Calculate the left margin of the label .
9691	Calculate the right margin .
9692	Calculates the top margin of the graph .
9693	Add a popup to the canvas .
9694	Calculate the bottom margin of the widget .
9695	Draw the graph .
9696	Make a text element for a datapoint .
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X - axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard - code the styles into the SVG XML if style sheets are not used .
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server and return True if successful False otherwise .
9708	Respond to a message .
9709	Return a list of patterns to dispatch to .
9710	Create a new nick .
9711	Handle a PING message .
9712	Called when the server is registered .
9713	Start the event loop .
9714	Register with boss .
9715	Task runner .
9716	Decorator for functions that require a boss channel .
9717	Return a list of regular expression patterns that can be used to match commands .
9718	Called when a command is successfully registered .
9719	Execute a command on a worker .
9720	Add a nick to the queue .
9721	Send a validation notification for this user .
9722	Send a password reset notification .
9723	Validate that the password strength is valid .
9724	Verify that the token is valid .
9725	Remove the user s avatar .
9726	Check if the request is a POST request .
9727	Get the executor to use .
9728	Returns an instance of docker . APIClient .
9729	Return a tuple of the TLS client cert and key .
9730	Return the name of the service .
9731	Wrapper for docker methods .
9732	Submit a docker call to the server .
9733	Poll the Docker service for tasks .
9734	Stop a running Docker service .
9735	Filter the queryset by lowercasing the value .
9736	Update the password of an existing user .
9737	Update the password of an existing user .
9738	Validates that the email address is valid .
9739	Create a new token for the given user .
9740	Delete a token .
9741	Raise PermissionDenied if the user is not logged in .
9742	Send email confirmation email .
9743	Update the expiry date .
9744	Generate context for password reset email .
9745	Send an email to the user .
9746	Email handler for password reset notification .
9747	Add the email subject to the notification .
9748	Returns the user and the auth token for the given request .
9749	If the token has expired raise an AuthenticationFailed exception .
9750	Show a notebook .
9751	Process bokeh plots .
9752	Returns a CustomJS object for the given change .
9753	Returns the widget with the given name .
9754	Render an object using the HoloViews renderer .
9755	Creates a TextInput widget .
9756	Convert a list of objects into a list of named objects .
9757	Get the owner of a method .
9758	Assign HTTP auth values .
9759	Send a ping request to the server .
9760	Get information about the server .
9761	Get the health of the cluster .
9762	Convert bytes to readable string .
9763	Return the total load of the CPU .
9764	Return the memory size in bytes .
9765	Get the total number of transactions in the network .
9766	Get the list of volumes
9767	Get the volume with the given id
9768	Get the total size of a volume
9769	Returns the percentage used for the given volume .
9770	Calculate volume disk temperature average .
9771	Get the maximum temperature of a volume .
9772	Get a disk by its id .
9773	Login to the server .
9774	Wrapper for _execute_get_url .
9775	Execute a GET request against the given URL .
9776	Update the information about the system .
9777	Returns a SynoUtilization object .
9778	Returns a SynoStorage object .
9779	Create a Context object for the given request .
9780	Get the token for the current tenant .
9781	Helper function for building an attribute dictionary .
9782	Overrides settings . INSTALLED_APPS with the given apps .
9783	Remove apps from settings . INSTALLED_APPS .
9784	Returns the global settings as a dictionary .
9785	Handle GET requests .
9786	Get a value from the configuration .
9787	Change the value of a key in the config file
9788	Migrate the OAuth2Util config file .
9789	Start the web server .
9790	Wait for the server to receive a response .
9791	Get new access information from PRAW .
9792	Check if token is present .
9793	Set access credentials for Reddit .
9794	Refresh an OAuth2 access token .
9795	Creates the manifest table .
9796	Split a full path into bucket and prefix .
9797	Check if the given prefix is a glacier bucket .
9798	Extract the run id from a key .
9799	Remove None values from a dictionary .
9800	Add a run id to the manifest .
9801	Check if a run id is in the manifest .
9802	Extracts the vendor name and version from the given URI .
9803	Given a prefix and a schema return a normalized version of the schema .
9804	Parse a list of contexts into a list of tuples .
9805	Parse an unstructed event into a list of tuples .
9806	Transform a line of text into a JSON - ready event .
9807	Return a JSON - ready representation of an event .
9808	Get the name of the template used in the response .
9809	Print the context to the terminal .
9810	Print the variables in the context .
9811	Convert SQL to HTML .
9812	Pretty print a Django context .
9813	Format a dictionary as an HTML summary .
9814	Style text .
9815	Format the given object using the pretty printer .
9816	Write the object to the stream .
9817	Get the next token in the string at the given position .
9818	Return a list of LaTeX nodes from a string .
9819	Convert a LaTeX string to text .
9820	Set the tex input directory .
9821	Read the contents of an input file .
9822	Convert a LaTeX string to text .
9823	u Converts a UTF - 8 string into LaTeX .
9824	Unescape an ASCII string .
9825	Gets the organisation information for the current user .
9826	Returns a list of boards .
9827	Returns a list of members .
9828	Updates an existing organisation .
9829	Removes a member from this group .
9830	Adds a member to the group .
9831	Add a member to the group .
9832	Gets information about the list .
9833	Adds a new card to the account .
9834	Gets the label information .
9835	Returns a list of items that have been checked .
9836	Updates the name of a label .
9837	Helper method to update the label dict .
9838	Get the authorisation URL for the given application .
9839	Returns information about the card .
9840	Returns a board object for the current user .
9841	Creates a new list with the specified parameters and returns it .
9842	Returns a list of checklists .
9843	Adds a comment to the user .
9844	Add an attachment to a file .
9845	Creates a new checklist and returns it .
9846	Adds a label from a dictionary .
9847	Adds a label from a label class .
9848	Adds a member to the group .
9849	Gets information about the member .
9850	Returns a list of cards .
9851	Returns a list of organisations .
9852	Creates a new board .
9853	Decorate a method with a singledispatch .
9854	Gets information about the board .
9855	Returns a list of lists .
9856	Returns a list of labels .
9857	Gets the details of a card .
9858	Returns a list of checklists .
9859	Returns a new organisation for the current user .
9860	Creates a new board and returns it .
9861	Creates a new list and returns it .
9862	Adds a new label .
9863	Gets information about the checklist .
9864	Get the card for this checklist .
9865	Returns a list of checklist items .
9866	Updates a checklist .
9867	Adds an item to the check list .
9868	Removes a check item .
9869	Updates the name of the checklist .
9870	Updates the state of the checklist item .
9871	Add the key and token to the query parameters .
9872	Check for errors and raise appropriate exceptions .
9873	Build the URI for the given path and query params .
9874	Fetch a JSON object from the server .
9875	Create an organisation .
9876	Create a new Trolly Board object .
9877	Create a new label .
9878	Create a new trolly . list . List object .
9879	Create a new card .
9880	Create a new checklist .
9881	Create a trolly . member . Member object
9882	Get an organisation .
9883	Get a board .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Get a member .
9888	Return the domain from the given URL .
9889	Convert raw text to markupless .
9890	Convert raw text to raw text .
9891	Convert text to raw text pairings .
9892	Set the password for a user .
9893	Split text with given locations .
9894	Mark all occurrences of the given regular expression as split .
9895	Mark the beginning and end of a given regular expression as split .
9896	Entry point for the CLI .
9897	Create an AES cipher for the given password and salt .
9898	Get the AES mode .
9899	Return the priority of the client .
9900	Check if the encryption scheme is valid .
9901	Called when a message is published .
9902	Make a unique ID and return it .
9903	Return a Deferred that resolves when a connection is made .
9904	Handle a CONNACK packet .
9905	Encode a string .
9906	Decode a string .
9907	Encodes a 16 - bit signed integer into a 2 - byte bytearray .
9908	Encode the length of a value .
9909	Decode a length value from a byte string .
9910	Encode the header .
9911	Encode the message .
9912	Decode the packet .
9913	Encode the result code .
9914	Decode the packet .
9915	Decode the message .
9916	Encode the message .
9917	Encode the message .
9918	Decode the message from the packet .
9919	Encodes the message into a byte string .
9920	Encodes the message into a byte string .
9921	Decode the message from the packet .
9922	Decode the message from the packet .
9923	Returns the URL for the VK API .
9924	Make a request to the API .
9925	Refresh self . _blocks .
9926	Format the data using the specified analytes .
9927	Fit the model to the given data .
9928	Fit K - means clustering .
9929	Fit a MeanShift model to the data .
9930	Fit the classifier to the data .
9931	Predict the clusters of the data .
9932	Map a set of clusters to a set of indices .
9933	Sort clusters according to sort_by .
9934	Get a date from a datetime object .
9935	Returns the total number of points in a dictionary .
9936	Get the maximum time span of all data in a dictionary .
9937	Generates a unit - picker string from an array of numbers .
9938	Return a string representation of an element .
9939	Convert an analyte - to - namemass string .
9940	Convert an analyte name to mass name .
9941	Collate data from one directory to another .
9942	Enumerate the elements of a boolean array .
9943	Convert a list of tuples into a boolean array .
9944	Perform a fast smooth of an array .
9945	Fast gradient of an array .
9946	Find the indices in x that are less than or equal to y .
9947	Cluster meanshift .
9948	Cluster k - means .
9949	Cluster the data using DBSCAN .
9950	Get a list of all defined SRMs in a SRM file .
9951	Read the configuration from the config file .
9952	Read the latools . cfg file .
9953	Print all LAtools configurations .
9954	Copy the SRM file to the specified location .
9955	Create a configuration file .
9956	Change the default configuration .
9957	Exclude downholes from a filter .
9958	Given a boolean array return a boolean array where each element in the array is greater than or equal to threshold .
9959	Calculate the despiked signal .
9960	Plot the autorange of the time series .
9961	Set up self . ns self . bkgrng and self . sigrng .
9962	Calculate the ratio of all analytes .
9963	Calibrate the time series using the given calibrator .
9964	Sample the stats for the specified analytes .
9965	Returns a dictionary of ablation times .
9966	Add a threshold filter for an analyte
9967	Add a filter to keep gradients below or above a given threshold .
9968	Calculate the correlation between two data sets .
9969	Calculate the correlation between two data sets .
9970	Add a new filter .
9971	Get the parameters of the filter .
9972	Plot a histogram of the data .
9973	Return summary statistics of x and y .
9974	Load reference data from Google Spreadsheet .
9975	Lookup the type class corresponding to TC and G .
9976	Get the atomic weight of each element .
9977	Calculate the atomic weight of a molecule .
9978	Generate keywords for ANSI sequences .
9979	Given a predicate and a stack return an annihilated stack .
9980	Return a new tuple with all elements removed from the stack .
9981	Calculate the weighted statistics of a Gaussian distribution .
9982	Gaussian distribution .
9983	Return the standard deviation of an array .
9984	Get a subset of samples .
9985	Despike the data .
9986	Calculate the weighted mean of the backgrounds .
9987	Calculate background interpolations for one or more analytes .
9988	Apply background subtracting to the given analytes .
9989	Calculate the ratio of all analyses in the dataset .
9990	Make a subset of the samples .
9991	Filter the gradients of an analyte with a threshold of percentiles .
9992	Fit a classifier to an array of analytes
9993	Apply a classifier to a set of samples
9994	Apply a correlation filter to the data .
9995	Apply a filter to each sample in the dataset .
9996	Apply filter off to all samples in the dataset .
9997	Display the status of a sample or a subset .
9998	Add a defragment filter to a set of samples
9999	Filter samples by number of removed samples .
10000	Plot a histogram of the gradients of each of the analytes .
10001	Plot the gradients of each of the specified analytes .
10002	Plot histograms of the focus .
10003	Draw trace plots for each sample .
10004	Generate the gradient plots for each sample .
10005	Filter the reports based on a set of analytes .
10006	Sample the stats for the specified analytes .
10007	Get the statistical data for each sample .
10008	Minimal Reproduction Dataset Exported from LATOOLS .
10009	Export traces to a file .
10010	Write the log to the specified directory .
10011	Export the minimal reproduction dataset to a zip file .
10012	Create a dictionary of splits by a regular expression .
10013	Apply function f to each element of fa and return the result .
10014	Plot a PCA as a scatter plot .
10015	Bayes scale .
10016	Calculate the median scaler of a time series .
10017	Perform noise despike on a signal .
10018	Perform an exponential decay on a signal .
10019	Add a component to the model .
10020	Remove a component from the model .
10021	Clear the state of the model .
10022	Remove all unused components .
10023	Return the index of the component that matches the given fuzzkey .
10024	Make a boolean array from a key .
10025	Grab an index from a filter key or dict .
10026	Return a string with information about the components .
10027	Decorator to log a function call .
10028	Write the log to a file .
10029	Read a log file and return a dictionary of arguments and kwargs .
10030	Decorate a function to autologin .
10031	Get information about the modem .
10032	Send a message to the modem .
10033	Parse a string or file - like object or file - like object .
10034	Return a link to the notebook .
10035	Return the HTML div for the thumbnail .
10036	Return the code div for this snippet .
10037	The code example of the notebook .
10038	Return the URL of the notebook .
10039	Returns the name of the output file
10040	Read a notebook and process it .
10041	Create a python file from a notebook .
10042	Generate the data download string .
10043	Create a thumbnail of the image .
10044	Get the header and description of the cell .
10045	Scale an image .
10046	Save the image to a thumbnail file
10047	Copy the thumbnail figure to the output file .
10048	Get the URL for a given nbfile .
10049	Given a field_name and a list of db_table_fields return the language code for each language .
10050	Returns a function that returns the default value of the field .
10051	Process a thumbnail file .
10052	Save the image to disk .
10053	Refresh the thumbnail cache .
10054	Returns a list of all thumbnails .
10055	Create a thumbnail of the given size .
10056	Delete the thumbnail with the given size .
10057	Create a new thumbnail .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Called when a message is received .
10061	Subscribe a callback for the given number .
10062	Return a set of the states of the message .
10063	Add a provider to the registry .
10064	Send a message to the provider .
10065	Create a receiver blueprint for the given provider .
10066	Returns a dictionary of all registered blueprints .
10067	Called when a message is received .
10068	Called when a status message is received .
10069	Decorator for JSON - EX API .
10070	Forward an object to all connected clients .
10071	Sign a web3 transaction .
10072	Estimate the number of gas needed to send a transaction with web3 .
10073	Estimates the amount of gas needed to send a transaction .
10074	Write to the stream .
10075	Read a line from the serial port .
10076	Send a message .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Add an attachment to the message .
10080	Register a set of services .
10081	Create a Config object from a module .
10082	Register resources .
10083	Returns the value of the given key or raises a ValueError if it is empty .
10084	Exit an object .
10085	Sets up the data manager .
10086	Return the number of non - zero components at a given wavelength .
10087	Calculate the cauchy equation .
10088	Authenticates and authenticates the user .
10089	Login to the backend .
10090	Get all domains .
10091	Get all items from the given endpoint .
10092	Perform an HTTP PATCH request .
10093	Make a DELETE request .
10094	Check if two paths refer to the same file .
10095	Create a junction link in a directory .
10096	Initialize Jacquard logger .
10097	Raise an error with the given message .
10098	Given a list of file_readers return the unclaimed and unclaimed readers .
10099	Get the new column header based on MuTect metaheader .
10100	Return a list of unclaimed reads and a set of unclaimed reads .
10101	Initialize population stats .
10102	Return a list of unclaimed file readers and a list of claimed VCF readers .
10103	Split data into a list of lines .
10104	Check if data starts with a line terminator .
10105	Return the suffix of the line terminator in the given string .
10106	Seek to the next line in the file .
10107	Seek to the beginning of the previous line .
10108	Return the last lines of the file .
10109	Get the first lines of the file .
10110	Yields lines from the file .
10111	Return a list of unclaimed readers and a list of VCF readers .
10112	Parse a single VCF record from a line of text .
10113	Convert a list of sample names to a dictionary of tag values .
10114	Returns the set of tags for this VCF record .
10115	Join the field names and values of the info dictionary .
10116	Returns the format field for the sample .
10117	Return the field name for a sample .
10118	Returns tab - delimited newline terminated string of VcfRecord .
10119	Add a new sample tag value .
10120	Add or replace a filter .
10121	Return a list of all available categories for a user .
10122	Create a form for a list of products .
10123	Create a form for staff products .
10124	Add an error for a product .
10125	Memoise a function .
10126	Create a form for a model s fields .
10127	Return a list of items that are pending or purchased .
10128	Send an email .
10129	Return an iterator over the osm stream .
10130	Parse an OSM file into a list of nodes ways and relations .
10131	Iterate over the notes from OpenStreetMap .
10132	Return True if the user passes the filter .
10133	Return True if the given user is met .
10134	Returns the number of items remaining for the given user .
10135	Filter the queryset to only those which are in the user s cart .
10136	Filter the queryset to only those which are in the user s cart .
10137	Filter the queryset to ensure that there are no more than _BIG_QUANTITY items
10138	Filter the queryset to only include presenter and copresenter .
10139	Filter users by their groups .
10140	Decorator for functions that modify the cart .
10141	Creates a new Cart for the given user .
10142	Auto extend the reservation duration of the cart .
10143	Apply a voucher to the cart .
10144	Validate the cart .
10145	Fix simple errors in the cart .
10146	Recalculate the discounts of all items in the cart .
10147	Add a discount to the cart .
10148	Decorator to create a report view .
10149	Iterate over the rows of the table .
10150	Returns the form to use for the given request .
10151	Render the given data .
10152	List all registered reports .
10153	List the items sold .
10154	Return summary of all sales payment .
10155	Return a report of all payments .
10156	Return a report of the refunded credit notes .
10157	Report the status of the products in the inventory .
10158	Displays the total paid reserved unreserved and refunded usage .
10159	Return a list of line items for each product and category .
10160	Get paid invoices by date .
10161	Return a report of all credit notes .
10162	List all invoices .
10163	List all attendees .
10164	Report the status of the speaker registrations .
10165	Create a manifest for the given products and categories .
10166	Return the set of categories that are not available for the current user .
10167	Returns the amount of unclaimed credit notes .
10168	Check if the user is sold out and the ticket is not registered .
10169	Redirect to the guided registration page .
10170	Edit the attendee profile .
10171	Handle a profile form .
10172	Get a list of available products from a category .
10173	Handle a list of products .
10174	Handles a voucher request .
10175	Checkout the current user s cart .
10176	Redirect to invoice with given access code .
10177	View an invoice .
10178	Manually payment an invoice .
10179	Refund an existing invoice .
10180	Apply a credit note to an invoice .
10181	Amend a registration of a user .
10182	Extend a reservation for a user .
10183	Sends the e - mails of all invoices that have been sent .
10184	Get a list of badges for each user .
10185	Render a badge for a given user .
10186	Returns a list of DiscountAndQuantity objects representing the available discounts for the given user .
10187	Annotate the queryset with the number of past uses .
10188	Returns a list of all available products for a user .
10189	Apply this credit note to an invoice .
10190	Calculate the cancellation fee of the credit note .
10191	Generate a random access code .
10192	Decorator for lazy evaluation of a function .
10193	Get an object from its name .
10194	Create an invoice for the given cart .
10195	Generate a manual invoice for a user .
10196	Generate a LineItem from a cart .
10197	Apply credit notes to an invoice .
10198	Returns True if the user can view the invoice .
10199	Refresh the invoice from the database .
10200	Validate that the invoice is allowed to pay .
10201	Update the status of the invoice .
10202	Mark the invoice as paid .
10203	Check if the current invoice matches the current cart .
10204	Update the validity of the invoice .
10205	Mark the invoice as void .
10206	Refund the invoice .
10207	Send an email to the user of an invoice .
10208	Update the object with the given data .
10209	Flatten a field .
10210	Print all of the downloaded files .
10211	Download a field from the processor .
10212	Get data for a specific project .
10213	Get a list of processors .
10214	Print the input fields of a processor .
10215	Run data from a string .
10216	Upload a file to a processor .
10217	Upload a file to the server .
10218	Download one or more data objects .
10219	Get all subclasses of the given class .
10220	Get the github repo and asana project .
10221	Get a list of variants with suggested changes .
10222	Get all variants with suggested changes merged .
10223	Search variants by coordinate .
10224	Bulk search variants by coordinates .
10225	Update the object from the cache .
10226	Return a list of unique elements in seq .
10227	Authenticate with asana and github .
10228	Prompt user to select a value from a list .
10229	Get the data for a saved issue .
10230	Move saved issue data to other_ns .
10231	Get the task data for a task .
10232	Get an ASANA task .
10233	Save the configuration to a JSON file .
10234	Apply a value to a key .
10235	Decorator for transport tasks .
10236	Flushes the queue .
10237	Create a task .
10238	Format task numbers with links .
10239	Create a task that does not exist in the workspace .
10240	Return a list of all data types for this project .
10241	Log an EKM meter debug message .
10242	Initialize the serial port .
10243	Sets the maximum number of waiting time in seconds .
10244	Combine all non - reserved and CRC fields .
10245	Render a JSON representation of the reads since the given timestamp .
10246	Set the context for this request .
10247	Calculate the PF value from a PF string .
10248	set max demand period
10249	Set meter password .
10250	Unpack a struct from a buffer .
10251	Converts the contents of the buffer to the corresponding data type and scale .
10252	Return a JSON representation of the meter data .
10253	Calculate the CRC for a meter read .
10254	Split an Ekm date into its components .
10255	Return the buffer of months in the given direction .
10256	Set the current control ratio .
10257	Assign a schedule to a period .
10258	Assign a schedule to a season .
10259	Set season schedules .
10260	Assign a new holiday date .
10261	Read a set of Schedules from the device .
10262	Extract information about a given schedule and period .
10263	Read a month s tariffs .
10264	Returns a namedtuple containing the name of the month and the value of the tariff .
10265	Reads the Holidays and Schedules from the EKM .
10266	Extract the Holiday and Month and Day from a setting holiday .
10267	Returns True if settings are valid False otherwise .
10268	Write a command message .
10269	Sends a password request to the serial port .
10270	Update all registered observers .
10271	Initialize the LCD lookup .
10272	Send a request to the EKM .
10273	Request the A value of the meter .
10274	Request the B value of the meter .
10275	Make the A and B fields in self . m_req
10276	Calculates the values of the fields in the band .
10277	Set the LCD display list .
10278	Send a set relay command to the device .
10279	Send termination string to serial port .
10280	Set the pulse input ratio .
10281	Send set zero resettable KWH command .
10282	Set the LCD to use the given password .
10283	Iterate over fields in a schema .
10284	Iterate over a schema .
10285	Return a list of paragraphs .
10286	Generate a random text .
10287	Return a summary of the elapsed time and the result .
10288	Colorize text with given color .
10289	Show the given text .
10290	Return a summary of the result .
10291	Parse command line arguments .
10292	Set up the result manager .
10293	Run the example .
10294	Run the runner with the given configuration .
10295	Transform a describe node into an ast . ClassDef .
10296	Transform a describe body .
10297	Transform an example function .
10298	Transform example body .
10299	Return an ast . arguments object that takes only self .
10300	Register this class as a path hook .
10301	Transform a source file into a Python code object .
10302	Apply an argument parser to the command line arguments .
10303	Load a module by its name .
10304	Load a module from a path .
10305	Find all specs in a directory .
10306	Returns a checker that checks the contents of a file .
10307	Check for new messages in the given location .
10308	Add a command to the config file .
10309	Remove a config file .
10310	Send a RESTART message to the specified places .
10311	Call the function with the given results .
10312	Returns a taservice . MultiService for the given configuration and messages .
10313	Make a procmon service .
10314	Refresh the session for a node .
10315	Remove nodes that have expired .
10316	Remove a node from the cluster .
10317	Get the last updated time of a node .
10318	Get all nodes in the cluster .
10319	Refresh the session .
10320	Increment the times modified counter .
10321	Dereference this node from the registry .
10322	Returns a list of tokens interleaved with the delimiter .
10323	Check if a path is bad .
10324	Merge a status with another one .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Return a constant function .
10328	Splat a function and return the result of the function .
10329	Unsplat a function .
10330	Spawn a process and wait for it to terminate .
10331	Create a TimerService and return it .
10332	Parse the reader and return the result .
10333	Return an alternative parser for the given literal .
10334	Return an optional parser .
10335	Return a RepeatedOnceParser for parser .
10336	Create a RepeatedParser from a parser .
10337	Creates a RepeatedOnceSeparatedParser from a parser and a separator .
10338	Creates a RepeatedSeparatedParser from a parser and a separator .
10339	Return a list of states that have been added to the given location .
10340	Close the connection .
10341	Check if the URL is valid .
10342	Add a heart service if it doesn t exist .
10343	Wrap a taservice . MultiService into a taservice . MultiService .
10344	Freezes a graph from a checkpoint .
10345	Freezes the model .
10346	Save graph only .
10347	Saves a graph only from a checkpoint .
10348	Saves weights from a checkpoint .
10349	Restore from checkpoint .
10350	Parse a tag .
10351	Render a tag .
10352	Validate the arguments passed to a tag .
10353	Get the context data for this tag .
10354	Parse a template tag .
10355	Get the context data for this tag .
10356	Converts a Caffe model to a TensorFlow session .
10357	Freezes a caffe model .
10358	Saves a tensorflow graph only .
10359	Make num_rows rows from a sequence .
10360	Return a string of n items from an iterable .
10361	Iterate over every element of an iterable .
10362	Remove duplicates from an iterable .
10363	Get the next item from an iterable .
10364	Yields items from iterable until predicate returns True .
10365	Partition count items into bins of bin_size .
10366	Convert an item into an iterable .
10367	Return a generator that suppresses any exceptions raised by the given callable .
10368	Return a list of duplicates in a collection of iterables .
10369	Raise an AssertionError if iterable is not ordered .
10370	Swap on miss .
10371	Partition a dictionary into two dictionaries .
10372	Get the first n queues .
10373	Reset the iterator to its original state .
10374	Parse an as - variable token .
10375	Decorator to add a template tag to a library .
10376	Return a PublicKeychain that is a descendant of this one .
10377	Fetch SQLAlchemy master records from the database .
10378	Iterate over an object .
10379	Select an object from a selector .
10380	Parse the given selector .
10381	Parse a selector .
10382	Return a list of nodes that are parents of the given node .
10383	Return a list of all ancestors of two nodes .
10384	Return the list of siblings of two nodes .
10385	Parse the nth - child production .
10386	Return a list of nodes that match a list of validators .
10387	Ping an ICMP device .
10388	Make a request and return the response body .
10389	Remove all expired items from the cache .
10390	Set the value of a key in the cache .
10391	Get the value of a key .
10392	Check if a key is present in the store .
10393	Checks if the chain is valid for the given timestamp .
10394	Create a new NistBeaconValue from a JSON string .
10395	Create a new NistBeaconValue from an XML string .
10396	Minify the content of the template .
10397	Get a function from the log file .
10398	Get a list of rows .
10399	Validate a token .
10400	Get the Fernet engine to use .
10401	Validate a JWT using the supported digest algorithms .
10402	Create a secret link token .
10403	Calculate the counter between two 32 - bit values .
10404	Counter of 64 - bit values .
10405	Calculate the average duration .
10406	Setup Riemann outputs .
10407	Create sources and setup triggers .
10408	Send an event to a source .
10409	Start the watchdog for all sources .
10410	Parse the format string .
10411	Parses the given line into a dictionary .
10412	Validates that the expires_at field is valid .
10413	Validate that the message is not empty .
10414	Verify that the token is valid .
10415	The name of the device or browser .
10416	Warn about nonlocal image URI found .
10417	Connect the receivers .
10418	Create a secret link .
10419	Send an email notification with an accepted access request .
10420	Send a notification to the sender of a confirmed access request .
10421	Send email validation notification .
10422	Send an email to the user that an access request was rejected .
10423	Send an email notification .
10424	Create a new SecretLink .
10425	Validate a secret link token .
10426	Revoke this link .
10427	Create a new email request .
10428	Get a request by its receiver .
10429	Confirm email .
10430	Mark the request as accepted .
10431	Reject this request .
10432	Create a secret link .
10433	Create a SHA512 hash .
10434	Verifies the signature for the given timestamp .
10435	Check if a record is embargoed .
10436	Create an AccessRequest for the given record .
10437	Confirm email for a record .
10438	Return an SSHCommandClientEndpoint for this client .
10439	Return the reverse of a column .
10440	Returns the value of the selected attribute .
10441	Returns the items in the query .
10442	Get the version string from the file .
10443	Set the version of the file .
10444	Initialize the SSH connection .
10445	Start the timer .
10446	Get the next event from the queue .
10447	Delete a shared link .
10448	Create a new connection to the Riemann server .
10449	Stop the connection .
10450	Empty the queue .
10451	Add events to the queue .
10452	Create a new connection to the Riemann server .
10453	Create an elasticsearch client
10454	Encodes an event into a protobuf . Event object .
10455	Encodes a list of events into a protobuf message .
10456	Decode a protobuf message .
10457	Send a series of events .
10458	Generate a file preview .
10459	Retrieve a file preview .
10460	Send a dict to the queue .
10461	This is the main message loop .
10462	Check if we should log the current time .
10463	Respond to a response to a challenge .
10464	Abort the SASL message exchange .
10465	Perform the SASL mapping on a character sequence .
10466	Displays the footer of the admin page .
10467	Build payment parameters .
10468	Builds the payment parameters for registering a credit card .
10469	Pay with an alias .
10470	Get the version number .
10471	Construct the widget .
10472	Called when the QMainWindow is instantiated .
10473	Configures the shortcuts for the up button
10474	Called when an item is activated .
10475	Called when the user selects an item .
10476	Called when the user navigates .
10477	Finalize the options .
10478	Compile resource . py using pyside - rcc .
10479	Clean resources and compiled resources .
10480	Fetch all children .
10481	Refetch all children .
10482	Returns the icon for the item at index .
10483	Call a command and return its pid .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open file descriptors .
10487	Redirect stream to target .
10488	Set the attrs of each widget in a form .
10489	Import an app module .
10490	Import project modules from INSTALLED_APPS .
10491	Include a template .
10492	Get the gravatar url for an object .
10493	Get a gravatar image from an object .
10494	Check if path is a valid file system path .
10495	Check if the given URL is a valid s3 location .
10496	Return the absolute path to a template file .
10497	List all objects in a folder .
10498	Builds the worklfow json from the task template .
10499	Execute the workflow .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Create a new client .
10505	Returns a list of file names for the given path .
10506	Download a file from the storage .
10507	Check if the given path exists .
10508	Get the parent of the given path .
10509	Creates a folder at the given path
10510	Upload a local file to dest_path .
10511	Deletes the file or folder at the given path .
10512	Validate the storage path .
10513	Create a new instance of this class .
10514	Creates a new Storage entity .
10515	Get details about an entity .
10516	Set the metadata for an entity .
10517	Get the metadata for the specified entity .
10518	Updates the metadata for an entity .
10519	Deletes metadata from an entity .
10520	Get a list of projects .
10521	Get details about a project .
10522	Creates a new project .
10523	Delete a project .
10524	Creates a new folder .
10525	Get details about a folder .
10526	Delete a folder .
10527	Upload a file to the storage .
10528	Copies the contents of a file to another file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Set the service_url field to the given service and version .
10533	Return a new request with the given headers .
10534	Returns a copy of this request with the given parameters .
10535	Throw an exception .
10536	Returns a list of fields that should be displayed .
10537	Add a map job to the given job .
10538	This module uses GATK to generate genotyped . vcf files from GVCFs .
10539	This module will run Oncotator on the given VCF .
10540	Sort the list by a function .
10541	Return a list of datetime objects .
10542	Load data . json from folder .
10543	Shift the time series by t .
10544	Return the sum of the raw data .
10545	Run rfxcom on the given serial device .
10546	Create a new user .
10547	Parse VN results .
10548	Parse the release results .
10549	Parse production staff results .
10550	Parse the character results .
10551	Parse tag results .
10552	Parse the user results .
10553	Create a tarball from a list of file paths .
10554	For each file in file_paths write it to output_dir .
10555	Copy a file from the file store to the output directory .
10556	Create a list of parameters to be passed to Spark .
10557	Returns a list of docker parameters to add to the spark master .
10558	Refresh the metadata from the database
10559	This module will run the MuTect analysis .
10560	Create a new file .
10561	Return a list of streams .
10562	Export the device to a directory .
10563	Search VNDB .
10564	Parse search results .
10565	Add a stream to the query .
10566	Reset the API key .
10567	List all users in the database .
10568	Run BWA index on ref . fa .
10569	Connect to the ConnectorDB server
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a value into the cache .
10573	Sync the cache with the database .
10574	Start the syncer .
10575	Stop the thread .
10576	Download a URL to a local file .
10577	Upload a file to S3 .
10578	Print all the labels for the given ontology .
10579	Print the hierarchy of the ontology .
10580	Get the mean insert size of a BAM file
10581	Get the ID of the current docker container .
10582	Run star on r1_id and r2_id .
10583	Create a new document in the database .
10584	Export the stream to a directory .
10585	Return a Device object for this path .
10586	Get all labels for an ontology .
10587	Get the hierarchy of an ontology .
10588	Run the Toil tool .
10589	Populate an argparse . ArgumentParser from a dictionary .
10590	Get the empty config file .
10591	Get the path to the mount point for the current container .
10592	Add an option to an argparse parser .
10593	Create an argument parser .
10594	Create the command to run the pipeline .
10595	Set basic auth for the request .
10596	Handle the response from the server .
10597	Ping the server .
10598	Create a new CRUD resource .
10599	Update a resource .
10600	Perform a DELETE request on the given path .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return a list of all known devices .
10604	This module will run cutadapt on both ends of FASTQ files .
10605	Run samtools faidx on ref . fasta
10606	Run samtools index on a BAM file .
10607	Runs sambamba mkdup on the input BAM file .
10608	Run samblaster on a SAM file .
10609	Mark duplicate BAMs with Picard .
10610	Run Picard sort on a BAM file .
10611	Run BaseRecalibrator on a BAM file .
10612	Runs Kallisto on the R1 and R2 fastq files .
10613	Download and run rsem_ref . tar . gz
10614	Get the user affinity of the test .
10615	Send a JSON - encoded command to the server .
10616	Subscribe to a stream .
10617	Connect to the websocket server .
10618	Reconnect the connector .
10619	Resubscribe to all subscribed streams .
10620	Called when the websocket connection is established .
10621	Called when the websocket connection is closed .
10622	Called when a connection error occurs .
10623	Called when websocket message is received .
10624	Ensure we have a websocket connection .
10625	Run GATK SelectVariants on the input VCF .
10626	Run GATK VariantFiltration on a GATK VCF file .
10627	GATK variant recalibrator .
10628	Applies the recalibration table to a GATK VCF file .
10629	This module will run the GATK CombineVariants command .
10630	Quick check a BAM file .
10631	Load handlers from handler_mapping .
10632	Write configuration to CONFIG_PATH .
10633	Get the configuration from the config file .
10634	Get a term from an ontology .
10635	Search for ontology by name .
10636	Suggest an ontology by name .
10637	Iterate over the descendants of an ontology term .
10638	Iterate over all descendant labels of an IRI .
10639	Iterate over all labels in the ontology .
10640	Iterate over the hierarchy of the given ontology .
10641	Run fastqc on both R1 and R2 .
10642	Add a stream to the query .
10643	Create an instance of the application .
10644	Start the Spark master container .
10645	Start the Spark container .
10646	Start the HDFS container .
10647	Stop Spark worker and HDFS worker .
10648	Check the status of the container .
10649	Tokenizer . Generates tokens stream from text
10650	Lookup a zone by name .
10651	Fetch the R53 configuration for a zone .
10652	Merge a list of config chunks into a single resource record set .
10653	Validate a given changeset .
10654	Minimize the number of members .
10655	Returns the fitness score of the process .
10656	Calculate the average cost function value for each process .
10657	Returns the cost function value of the median cost function .
10658	Returns the parameters of the process .
10659	Return a list of the members of the process .
10660	Add a new parameter .
10661	Generate a new population with the given mut rate and max mut amt .
10662	Normalize keys .
10663	Get all environment variables .
10664	Returns True if the callable raises an exception .
10665	Transform a list of hits into a list of packages sorted by score .
10666	Transform the result to the desired type .
10667	Convert html to XHTML .
10668	Convert an XHTML document to HTML .
10669	Convert an etree . ElementTree object to a string .
10670	Open the document in a web browser .
10671	Drop this node from the tree .
10672	Drop the tag from its parent .
10673	Get element by id .
10674	Return a CSS selector that matches the given expression .
10675	Return a generator of the members of each log handler .
10676	Get test counts from environment variables .
10677	Return True if this is a single class .
10678	Returns True if there is only one module .
10679	Validate that the request contains a list of parameters .
10680	Validate that the request has an identifier .
10681	Decode path using sys . getfilesystemencoding .
10682	Escape all arguments in an object .
10683	Return the codec name for the given encoding .
10684	Detect the encoding of the stream .
10685	Get the remote address from the forwarded_for list .
10686	Convert an object to a Decimal .
10687	Parse a string and return an etree . Element object .
10688	Parse an XML file and return an ElementTree .
10689	Convert a BeautifulSoup tree into a DOM tree .
10690	Get the current traceback .
10691	Return a string representation of the exception .
10692	Render the traceback as HTML .
10693	Generate the plaintext traceback .
10694	Return a list of all lines annotated with this function .
10695	Render the source table .
10696	Given an egg_info and a search_name return the name of the egg that matches the search_name .
10697	Get the location of the index URLs for a project .
10698	Find all versions of a project .
10699	Find a requirement that satisfies req .
10700	Sort links by egg fragment .
10701	Get the content type of a URL .
10702	Return an iterator over all links in the document .
10703	Return True if this request is verifiable .
10704	Find all data files for a package .
10705	Exclude data files from a package .
10706	Parse a requirements . txt file .
10707	Join lines from an iterator .
10708	Remove comments from the given iterator .
10709	Compile a marker string into a function .
10710	Check if node is allowed in environment markers .
10711	return an ast . Attribute node as new ast . Name
10712	Convert a JSON string into a number .
10713	Decorate a view function with the current request context .
10714	Push this context onto the stack .
10715	Pop an app context from the stack .
10716	Return a copy of the current request .
10717	Match the request against the url adapter .
10718	Push the current context onto the stack .
10719	Given a path and a relative path make a relative path .
10720	Check if a distribution is editable .
10721	Add a url value preprocessor function .
10722	Register a function as the URL default function .
10723	Decorator to register an error handler .
10724	Decorate a generator with a context .
10725	Make a response from the given arguments .
10726	Generate a URL for the given endpoint .
10727	Join a path to a file .
10728	Get the root path of a module .
10729	Returns a jinja2 . loader . FileSystemLoader for the template folder .
10730	Run the completion script .
10731	Get the domain of the session cookie .
10732	Return the path to the wheels cache for the given link .
10733	Check if the given name is a pure library in the given directory .
10734	Yields paths to uninstallation files for the given distribution .
10735	Check that the given version is compatible with the given name .
10736	Build a pip - wheel from a request .
10737	Iterate over all symbols in a code object .
10738	Decorator to ensure that rates are fresh .
10739	Add egg info to self . filelist .
10740	Write the delete marker file to the given directory .
10741	Return True if the current process is running under virtualenv .
10742	Get the current user name .
10743	Return the distutils scheme for the given distribution .
10744	Parse the Cache - Control HTTP header .
10745	Returns the cached response for the given request .
10746	Cache the response .
10747	Update the zipimporter cache for a given normalized path .
10748	Load the setuptools template .
10749	Install site . py if it doesn t already exist .
10750	Save the file to disk .
10751	Converts the given value to the appropriate type .
10752	Add filters to the filterer .
10753	Configure a logging handler .
10754	Add handlers to the given logger .
10755	Common logger configuration .
10756	Execute a script from a file .
10757	Temporarily override a temporary directory .
10758	Replace git + and git + ssh with git +
10759	Get an item from an object .
10760	Generates a file from the given source code .
10761	Compile Jinja2 templates into the target directory .
10762	Get the default cache path .
10763	Find all eggs in a zip archive .
10764	Find distributions on a given path .
10765	Declare a namespace for a package .
10766	Get the mro of a class .
10767	Find an adapter for an object .
10768	Ensure that the given path is a directory .
10769	Iterate over all entry points in a group .
10770	Return True if the given distribution can be added .
10771	Find the best matching distribution for the given request .
10772	Evaluate a marker in text .
10773	Evaluate text using markerlib .
10774	Format a log record .
10775	Format a number according to a currency .
10776	Parse a number pattern .
10777	Returns a decimal quantum of the given precision .
10778	Get the precision of a decimal number .
10779	Return the scientific notation elements of a number .
10780	Calculate the total seconds of a timedelta .
10781	Parse a list of requirements .
10782	Ensure that distutils is not patched by setuptools .
10783	Check that value is a list of strings containing valid project and version requirement specifiers .
10784	Fetch an egg from the build directory .
10785	Roll the dice .
10786	Convert a string into a PriceClass object .
10787	Create a Price attribute .
10788	Validate a request .
10789	Get a method from the app .
10790	Apply a method to the given arguments .
10791	Deprecated module . Use request . blueprint instead .
10792	The name of the blueprint for this route .
10793	Attach an enctype error multidict to a request .
10794	Make an abstract distribution .
10795	Add a requirement to the environment .
10796	Walk the list of requirements and install them .
10797	Check if the requirement should be skipped .
10798	Return a list of requirements to be installed .
10799	Return a list of all namespace packages .
10800	Return the JSON representation of the given object .
10801	Tokenize a document with the given annotation .
10802	Merge html annotations from tokens_old to tokens_new
10803	Copy annotations from src to dest .
10804	Decompress a list of tokens into a single list of tokens .
10805	Serialize a list of tokens using the given markup function .
10806	Expand a list of tokens .
10807	Locate an unbalanced end .
10808	Given a list of chunks return a list of tokens .
10809	Flatten an HTML element .
10810	Split text into a list of words .
10811	Return the HTML start tag of the given element .
10812	Return the end tag of an element .
10813	Serialize an element as an HTML fragment .
10814	Fix up ins and del tags .
10815	Extract a constant from a code object .
10816	Returns the cache URL for this service .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Parse an HTML document from a string .
10820	Decorator for API returns .
10821	Returns an instance of the appropriate TreeWalker class for the given tree type .
10822	Export the current svn repository to the given location .
10823	Get the revision of the repository at location .
10824	Decorate a function to be called after the first request was handled .
10825	The name of the module .
10826	Whether or not to propagate exceptions .
10827	Find the path to the instance file .
10828	Update the template context .
10829	Handle an HTTP exception .
10830	Return True if the given exception should be raised .
10831	Handle an exception thrown by the server .
10832	Raises the routing exception if debug is enabled .
10833	Dispatch the request and return the response .
10834	Make a default options response .
10835	Create a URL adapter for the given request .
10836	Injects default values into an endpoint .
10837	Generate unique values from an iterable .
10838	Handle the may - requires key .
10839	Convert a Requirement object to a requirement s requires_dist string .
10840	Convert pkginfo . txt to metadata .
10841	Yields all imported modules .
10842	Iterate over all classes in the test suite .
10843	Return a list of all method names .
10844	Find the basename for the given module name .
10845	Check if the given path is a module path .
10846	Recursively walk the directory tree starting from basedir .
10847	Return a generator of all absolute paths for the module .
10848	Add default values to kwargs .
10849	Load default JSON decoder from kwargs .
10850	Set multiple values in a mapping .
10851	Increment the value of a key by delta .
10852	Serialize a Python object .
10853	Build a dictionary of editable options from a request .
10854	Populate the link attribute of this requirement .
10855	Ensure that the project has a source directory .
10856	Remove temporary source .
10857	Returns a pkg_resources . Distribution object for this distribution .
10858	Get the content of the request .
10859	Get the WSGI headers for the response .
10860	r Convert an IRI to a URI .
10861	r Return the path to the cache directory for the given application .
10862	Return the path to the user s data directory for the given application .
10863	Return the path to the log directory for the given application .
10864	Return the path to the config directory for the given application .
10865	Returns a list of site config directories for the given application .
10866	Iterate over all module files .
10867	Restart with a reloader .
10868	Convert a string to a text type .
10869	Find the path to the CA bundle .
10870	Parse an HTML document .
10871	Parses the given stream and returns the resulting DOM tree .
10872	Parse a fragment from a stream .
10873	Translate a word .
10874	Convert args to tokens .
10875	Bind to the server .
10876	Print a report message to stdout .
10877	Load bytecode from a file .
10878	Convert paramsDict and kwargsDict into a stylesheet params dictionary .
10879	Run a command in the current working directory .
10880	Get the current Python implementation version .
10881	Return a list of distribution objects for the given location and basename .
10882	Find external links in a page .
10883	Try to open the given URL and return the response .
10884	Process a URL .
10885	Remove paths in sys . path that are not in sys . path .
10886	Return a set of all directories in sys . path .
10887	Add a package to sys . path .
10888	Add a directory to sys . path .
10889	Check if the current process is running in a user site .
10890	Add usersitepackages to known_paths .
10891	Set quit and exit methods .
10892	Alias the current locale to mbcs .
10893	Set the default encoding for the current locale .
10894	Force global eggs after local site packages .
10895	Fix sys . path .
10896	A non - blocking version of subprocess . Popen .
10897	Check if we have pyrex installed .
10898	Convert . pyx sources to . cpp and . c files .
10899	Returns a generator that yields the results of the application .
10900	Get the content of a resource .
10901	Return the user agent for the current environment .
10902	Return True if name is a valid URL .
10903	Unpack a file from a URL .
10904	Download a file from an HTTP link .
10905	Check if the download directory is correct .
10906	Register a currency format .
10907	Register a currency exchange .
10908	Decode the response data .
10909	Return the default template context processor .
10910	Render a template with the given context .
10911	Render a template with the given context .
10912	Render a template string .
10913	Parse a version string .
10914	Check if a variable is already declared .
10915	Add a node to the list of declared identifiers .
10916	Include node .
10917	Handle from import .
10918	Create a WHEEL file and add it to it .
10919	A decorator that makes a function atomic .
10920	Create a new service instance and serve it forever .
10921	URL encode an object .
10922	Returns a list of wheels that match the given requirements .
10923	Populate a requirement set with the given requirements .
10924	Export the package to a temporary location .
10925	Lookup an Amazon Product .
10926	Iterate over pages .
10927	Get the ancestor of this browse node .
10928	Return the children of the browse element .
10929	Get an element from a path .
10930	Get the text of the element at the given path .
10931	Safe get element date .
10932	Returns the price and currency of the offer .
10933	Returns the list price and the currency of the item .
10934	Send the request to the controller and return the cached response .
10935	Cache the response .
10936	Creates an attribute getter for the given environment .
10937	Convert a string to a title .
10938	Sort a list .
10939	Group values by an attribute .
10940	Apply a filter to a sequence of objects .
10941	Create a logger for the given app .
10942	Compare two constant time values .
10943	Verify the signature for the given key and value .
10944	Derives the key from the secret key .
10945	Get the signature for the given value .
10946	Sign a value .
10947	Verify the signature of a value .
10948	Unsign a value .
10949	Return the signature of the given value .
10950	Validate that a signed value is valid .
10951	Serialize an object and sign it .
10952	Handle a server error .
10953	Find all packages in where .
10954	Given a list of packages require parents .
10955	Yield all directories in base_path relative to base_path .
10956	Prepare the response based on the cached response .
10957	Unsign a WHEEL file .
10958	Unpack a WHEEL file .
10959	Install the scripts for each of the given distributions .
10960	Arrange all nodes in the graph .
10961	Redraw the graph on the canvas .
10962	Get the node with the given ID .
10963	Called when the directed state has changed .
10964	Called when an edge is added or removed .
10965	Called when a component is changed .
10966	Handles the left click of the tool
10967	Called when the diagram canvas has changed .
10968	Clear the diagram canvas .
10969	Called when a domain model is changed for a diagram .
10970	Maps the domain model to the new model .
10971	Remove the map model from the map .
10972	Map an element to a diagram node .
10973	Set pydot node attributes .
10974	Parse XDOT data .
10975	Process font .
10976	Process an ellipse .
10977	Process a polygon token .
10978	Process a Polyline token .
10979	Process text .
10980	Process image tokens .
10981	Render a GridFS file .
10982	Save an object to the dot file .
10983	Load an object from the dot file .
10984	Check if a point is contained within this region .
10985	Draw the bounding box .
10986	Open the New Dot Graph wizard
10987	Start the database layer .
10988	Parse the dot code and store it in self . model .
10989	Create a new graph .
10990	Open a file dialog and parse it .
10991	Save the model to a file .
10992	Save the model as a dot file .
10993	Configure the graph .
10994	Configure the nodes view .
10995	Configure the edges view .
10996	Edit the godot .
10997	Add a node to the graph .
10998	Add an edge to the graph .
10999	Add a new subgraph to the graph .
11000	Add a cluster to the graph .
11001	Request the graph to be selected .
11002	Edit options .
11003	Configure the dot code .
11004	Called when the user exits the application .
11005	Move components to the origin .
11006	Save data to a file - like object .
11007	Load data from a file - like object .
11008	Save the dataset to a file .
11009	Load an object from a file .
11010	Create an alias property on an object .
11011	Parse a file into a sequence of words .
11012	List of start words .
11013	Add a Markov chain with the given name and order .
11014	Remove a chain .
11015	Build a chain from a source file .
11016	Generate a sentence from the chain .
11017	Create a new dot file with the given program and format .
11018	Add a node to the graph .
11019	Remove a node from the graph .
11020	Get the node with the given ID .
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a new subgraph to the graph .
11024	Called when a program is changed .
11025	Set the node lists of the edges .
11026	Parse a graph from a dot file .
11027	Parse a dot file .
11028	Build the top graph from a list of tokens .
11029	Builds a graph from a list of tokens .
11030	Get the time units and multiplier for a given number of seconds .
11031	Format a duration in seconds .
11032	Called when a new path is changed .
11033	Create the UI for the graph tree .
11034	Split a sequence into n elements .
11035	Yield windows from an iterable .
11036	Main entry point for godot .
11037	Get the children of the given object .
11038	Append a child to the object .
11039	Insert a child into the object at the given index .
11040	Remove a child from an object .
11041	Called when children are replaced .
11042	Called when the children of an object has changed .
11043	Get the label of an object .
11044	Set the label of an object .
11045	Called when the label is changed .
11046	Initialize the graph .
11047	Update the editor .
11048	Add listeners to the graph editor .
11049	Called when a node is replaced .
11050	Handle nodes changed events .
11051	Add nodes to the graph .
11052	Called when an edge is replaced .
11053	Handle edges changed events .
11054	Add edges to the graph .
11055	Parse a xdot directive .
11056	Called when a drawing event is arrived .
11057	Returns a godot . node . Node object for the given row_factory_kw .
11058	Creates a godot . edge . Edge from a row_factory_kw dictionary .
11059	Prepare the database for use .
11060	Parse the xdot drawing directive .
11061	Parse the xdot label directive .
11062	Called when the drawing is changed .
11063	Called when a new position is changed .
11064	Called when a new position has changed .
11065	Right down event handler
11066	Display information about a particular style .
11067	Draw the main layer .
11068	Check if a point is inside a polygon .
11069	Draw the main layer .
11070	Handle an event .
11071	Run the function until stopper is set .
11072	Returns the full url for the given page .
11073	Render the previous and next links .
11074	Render the previous and next links for the current page .
11075	Return True if candidate matches pattern .
11076	Selects the best matching content type based on the requested and available content types .
11077	Rewrite a URL .
11078	Remove the username and password from a URL .
11079	Create a URL identifier for the given user and password .
11080	Normalize a host string .
11081	Return a list of all modules in the given directory .
11082	Return a list of all modules in the given directory .
11083	Returns a list of all the modules in the given module .
11084	Return a list of all classes in a module .
11085	Return a list of all classes in a module .
11086	Ensure that a directory exists .
11087	Put the contents of a file into this blob .
11088	Check if a card number is a Luhn card number .
11089	Get the current git revision .
11090	Load a module .
11091	Add a path to the path list .
11092	Find the module with the given name .
11093	Split a line into two lines .
11094	Remove all namespaces from the root element .
11095	Check if the current version is the same as the desired version .
11096	Create an instance from a YAML dictionary .
11097	Merge the given dictionary with the current one .
11098	Execute the actions in the given directory .
11099	Create an instance from a YAML dictionary .
11100	Add details to the message .
11101	Emit a record .
11102	Add image rendition to context .
11103	Log a login attempt .
11104	Add URL to download queue .
11105	Start the worker threads .
11106	Set the value of a key in the store .
11107	Get a value from the store .
11108	Returns a dictionary of all the values for a given key in the store .
11109	Returns the X - Consul - Index header for the given key
11110	Delete a key from the store .
11111	Plot a HEALPix map for a set of features .
11112	Add months to a timestamp .
11113	Add months to a date .
11114	Check if the current date is a christmas period .
11115	Set the current music service .
11116	Use the specified storage service .
11117	Load data from a CSV file .
11118	Return a list of dictionaries from a JSON file .
11119	Write data to a JSON file .
11120	Filter data by label .
11121	Calculate the average of a set of samples by label .
11122	Calculate the feature importance report .
11123	Restores the data from the session .
11124	Recursively merge dict b into a .
11125	Decorate a dispatch function with a multi value .
11126	Decorator to add a method to a dispatch function .
11127	Find blocks in INSTALLED_APPS .
11128	Verify that a block is valid .
11129	Register a block .
11130	Unregister a block with the registry .
11131	Convert a file to a MP3 file .
11132	Make sure the desired version is reasonable .
11133	Redirect to https if SSL_ENABLED is True .
11134	Initialize celery .
11135	Queue an email .
11136	Parse an Accept header value .
11137	Parse a cache - control header value .
11138	Parse a Content - Type string into a Data - Type object .
11139	Parses the Forwarded HTTP header value .
11140	Parse a string into a list of strings .
11141	Parse a list of parameters .
11142	Resizes an image to fit the given width .
11143	Add a value to the link .
11144	Download a file from YouTube .
11145	Connect to Google Drive .
11146	Upload a file to the server .
11147	Connect to the Music server .
11148	Write sky parameters to a file .
11149	Update self . sky_file attribute .
11150	Read the Ahpi absorption from a file .
11151	Scale a_phi by scale_parameter
11152	Read the pure water absorption from a file .
11153	Read the pure water scattering from a file .
11154	Read an IOP from a CSV file .
11155	Write an iop to a file .
11156	Calculates the b - component of the water with a scattering fraction .
11157	Build total absorption
11158	Calculate the total attenuation C .
11159	Build all b and c from IOPs .
11160	Set the parameters of the batch .
11161	Read a parameter file into a dictionary .
11162	Convert a string to a list of floats .
11163	Read a PR report from a file .
11164	Set the signal handler for the given signals .
11165	Called when a signal is received from the system .
11166	Default signal handler .
11167	Pause the signal handler .
11168	Handle an abort signal .
11169	Signal handler for the status signal .
11170	Remove an event from the list
11171	Fetch a metric from the server .
11172	Return a sorted list of metric values .
11173	Return a list of n elements from an iterable .
11174	Print an item to stdout .
11175	Print all items in an iterable .
11176	Set self . pargs self . var_pargs self . kargl self . kargl
11177	Set variables and variables from a partial signature .
11178	Create a new argument list with the given arguments and keyword arguments .
11179	Return True if the given file should be ignored .
11180	Determine the priority of a file .
11181	Read a VLQ - encoded integer from the stream .
11182	Read a table from the data stream .
11183	Parse the header of a StarCraft II archive .
11184	Returns the duration of the given number of seconds .
11185	Print the details of the game .
11186	Sets the data for the model .
11187	Search for the result file .
11188	Write the batch to a file .
11189	Run the data processing .
11190	Display the connection to the graphic .
11191	Prints the information for the graphic .
11192	Displays the error message .
11193	Hides the error message .
11194	Execute the planarrad . py script
11195	Cancel planarrad .
11196	Quit the planarrad .
11197	Saves the default figure .
11198	Opens the log file .
11199	Open the documentation window .
11200	Handles the prerequisite actions .
11201	Click on the context menu .
11202	Move the tab widget .
11203	Display the target of the graphic .
11204	Create a LockSet from a genesis block and a private key .
11205	Sign this message with a private key .
11206	signatures are non deterministic
11207	either invalid or one of quorum noquorum quorumpossible
11208	In the IOU fungible the supply is set by Issuer who issue funds .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid lockset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring see utils . cstr
11215	Calculate the delay between sender and receiver .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the contract on the chain
11218	returns class _on_msg_unsafe use x . im_self to get class
11219	registers NativeContract classes
11220	returns True if unknown
11221	receives rlp . decoded serialized
11222	Convert an image from vgg to vgg .
11223	Convert image to vgg format .
11224	Get a function layer .
11225	Get the output of a layer .
11226	Returns a dictionary of feature outputs for each layer .
11227	Create a new key file .
11228	Finish the bulk load job .
11229	Load a table from a file .
11230	Put items into the table .
11231	Release the table .
11232	Returns a list of tables that should be used in Giraffe .
11233	Remove flags from compiler_so .
11234	Find the Teradata home directory .
11235	Get a value from the configuration .
11236	Set the value of a key .
11237	Process a table command .
11238	Execute a command .
11239	Get a value from the settings .
11240	Write the default configuration .
11241	Set the names of the columns that should be filtered .
11242	Write the table to a Giraffe archive .
11243	Return the settings as a string .
11244	Convert a string to a float with a multiplier .
11245	Returns a dictionary of all of the specific gains in the given string .
11246	Parse a device settings string into a dictionary .
11247	Wrap text to fit the width of the terminal .
11248	Get a list of all available SoapySDR devices .
11249	Set the center frequency of the PSD .
11250	Compute the result of the Fourier transform .
11251	Wait for a result and return it .
11252	Update the PSD using Welch s method .
11253	Read data from a file - like object .
11254	Write a PWR array to a file .
11255	Submit a function to the work queue .
11256	Convert an integration time to a number of repeats .
11257	Calculate the frequency plan for a given frequency range .
11258	Create a buffer for the given number of bins .
11259	Set up the Fourier Transform .
11260	Stop streaming .
11261	Set the frequency of the PSD .
11262	Perform a sweep of the Fourier transform .
11263	Set the slave address .
11264	Configure zql build with CMake .
11265	Filter a list of datetimes by a certain number .
11266	Return a new datetime with 0 hour minute second and microsecond masked .
11267	Return a new datetime with the same weekday as the given one .
11268	Return a set of datetimes that should be kept .
11269	Given a list of datetimes return a list of datetimes that should be deleted .
11270	Convert a list of datetime objects into a set of dates .
11271	Given a list of dates return a list of dates to delete .
11272	Get the SPI control byte .
11273	Read a single bit from an address .
11274	Write a single bit to an address .
11275	Get the bit number of the given bit pattern .
11276	Watch a port for interrupt events .
11277	Handle events from the event queue .
11278	Bring the gpio interrupt into userspace .
11279	Set the gpio interrupt edge .
11280	Wait until a file exists .
11281	Register a callback for a given pin .
11282	Deregisters a pin function map .
11283	Bring interrupts into userspace .
11284	Send a message to the SPI bus .
11285	Render the tab .
11286	Return True if the form has any errors .
11287	Render the link .
11288	Extract the version of a package from the configuration file .
11289	Add pack to form kwargs .
11290	Check the response status and raise appropriate exceptions .
11291	Make a GET request to the API .
11292	Get the download link for a file .
11293	Upload a link to a folder .
11294	Upload a file to a folder .
11295	Upload a remote file to a remote folder .
11296	Get the status of a remote upload .
11297	List all files in a folder .
11298	Get a list of all running conversions in a folder .
11299	Calculate the humidity from a temperature and a dewpoint .
11300	Calculate the Dewpoint from temperature and humidity .
11301	Publish the message .
11302	Calculate the CRC of the given data .
11303	Verify the CRC of the data .
11304	Unpack a Storm date into a string .
11305	Check if we are using a rev . B archive .
11306	Send a WAKEUP to the device .
11307	Send a command to the weather station .
11308	Send a DMPAFT command .
11309	Get the new archive fields .
11310	Parse the contents of the archive .
11311	Update weather for a given station .
11312	Initialize the logging module .
11313	Return a list of PubService objects for the given opts .
11314	Get the wind gust of the given mph .
11315	Set the parameters of the sensor .
11316	Set the arguments .
11317	Write the arguments to a file .
11318	Decorator for functions that expect a request object .
11319	Initialize the extension for the given app .
11320	Return True if all of the requirements satisfy the request .
11321	Push an override context onto the stack .
11322	Pop an override context from the stack .
11323	A context manager that overrides an existing value .
11324	Push an additional context onto the stack .
11325	Pop an additional context from the stack .
11326	Add an additional element to the stack .
11327	Given a list of field names return a list of unique field names .
11328	Return a string representation of the stats .
11329	Extract params from query .
11330	Run a query and return the results .
11331	Returns a pandas dataframe of the data .
11332	Returns a NetworkX MultiGraph representation of the results .
11333	Plot a Pie plot of the data .
11334	Plot the data .
11335	Plot a bar plot of the data .
11336	Write the result to a CSV file .
11337	Check if a user has the given permission .
11338	Add the widget to the context data .
11339	Returns the list of widgets sorted by position .
11340	Returns a list of widgets that need to be updated .
11341	Register a new dashboard widget .
11342	Unregister a widget class .
11343	Get the last update of the dashboard widget .
11344	Get a setting by its name .
11345	Save a setting .
11346	Returns True if the job should be updated .
11347	Construct an array from an array - like object .
11348	Construct an array of ones .
11349	Concatenate two spark arrays .
11350	Check if arguments are of the correct type .
11351	Format axes argument .
11352	Wrap a function into a BoltArraySpark object .
11353	Align the array with the given axes .
11354	Convert to spark array .
11355	Return the element - wise tordd of this array .
11356	Stack the elements of the RDD into a new RDD of specified size .
11357	Apply a function to each element of the RDD .
11358	Split the RDD into chunks of the specified size along the specified axis .
11359	Apply a function to each element of the RDD .
11360	Return a new BoltArraySpark by applying a function to each value in the RDD .
11361	Get the plan for a given size and axes .
11362	Remove padding from value .
11363	Get the number of chunks in a plan .
11364	Get a list of slices for a plan .
11365	Get a boolean mask for a set of indices .
11366	Return a new RDD with rows repartitioned to the specified number of rows .
11367	Return a stacked version of the underlying RDD .
11368	Align axis to split .
11369	Return the first element of the RDD .
11370	Compute a stat of each value along an axis .
11371	Return the mean along an axis .
11372	Compute the variance of each group along an axis .
11373	Return the standard deviation of each group along an axis .
11374	Return the sum of the values along an axis .
11375	Return the maximum value along an axis .
11376	Return the minimum value along an axis .
11377	Create a chunked array from this RDD .
11378	Return a new array with swapped keys and values .
11379	Transpose the array along the specified axes .
11380	Swaps axis1 and axis2 .
11381	Reshape this array to the given shape .
11382	Helper function for _reshapebasic .
11383	Squeeze the array along an axis .
11384	Return a new RDD with values converted to the specified type .
11385	Return a new RDD with values clipped to the specified range .
11386	Convert this RDD to an array .
11387	Converts an argument into a tuple .
11388	Convert a list or tuple into a tuple .
11389	Validate that an ndarray is of the given shape .
11390	Return True if all elements in a and b are equal .
11391	Return a flattened version of a list .
11392	Reconstruct a slice from a slice object .
11393	Check if new and old axes can be transposed .
11394	Ensure that new and old keys have the same size .
11395	Flatten a list of numpy arrays into a single numpy array .
11396	Expand an arbitrary number of dimensions in an array .
11397	Zip an RDD with an index .
11398	Wrap a function in a ConstructLocal and ConstructSpark
11399	Look for an instance of ConstructLocal .
11400	Reshape a BoltArray to a new shape .
11401	Transpose one or more axes .
11402	Reshape a BoltArray to a new shape .
11403	Transpose one or more axes .
11404	Construct an array of ones .
11405	Create a new instance of ConstructLocal with zeros .
11406	Concatenate multiple NumPy arrays .
11407	Calculate the discrete likelihood of a data set .
11408	Calculate the most likely alpha of a discrete distribution .
11409	Calculate discrete alpha for MLE data .
11410	Find the most likely alpha of the data .
11411	Find the most likely alpha of the data .
11412	Plot the PPF of the data .
11413	Compute the lognormal distribution .
11414	Sanitize a Turbo HTML string .
11415	Configure analytics for Yandex .
11416	Return a list of tag names .
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of the private key .
11419	Return the SHA512 hash of the private key .
11420	Parse a byte string into a long .
11421	Decode the public key from base64 .
11422	Parse the given list of options .
11423	Process SSH public key data .
11424	Process the SSH_DSS message .
11425	Process an ECDSA SHA1 message .
11426	Process ed25516 message .
11427	Parse the public key from the supplied keydata .
11428	Perform one step of the algorithm .
11429	Perform one step of the import process .
11430	Returns a list of all mechanisms .
11431	Store the credentials for the given mech .
11432	Main entry point for the command line interface .
11433	Initialize the distribution .
11434	Create an audio . wav file .
11435	Returns the h5bp . css file for the given version .
11436	Return a normalized version of the Django frontend .
11437	Render the font - awesome page .
11438	Render the modernizr . js file .
11439	Render a JQuery page .
11440	Render the JQueryUI page .
11441	Render the JQuery Datatables page .
11442	Returns a link to the datatables css file for the given version .
11443	Returns the html for the jQuery datatables themeroller .
11444	Render the jQuery formset .
11445	Render the JQuery Scroll To page .
11446	Render the JQuery - Smooth Scroll page .
11447	Returns the twbs css for the given version .
11448	Returns the HTML for the Google Analytics page .
11449	u Render a CodeMirror textarea .
11450	Iterate over the authentication hashes for the given user .
11451	Calculate the expiry time for a given number of minutes .
11452	Generate a token for a given user .
11453	Serialize a User instance .
11454	Deserialize a Meteor profile .
11455	Update a user s profile .
11456	Raise a MeteorError if authentication failed .
11457	Check if the token is valid for the user .
11458	Check if the request is secure .
11459	Get the username of a user .
11460	Create a new user .
11461	Log in a user .
11462	Logout the current user .
11463	Login with password or resume token .
11464	Login with password .
11465	Login to the server with a resume token .
11466	Change the password of a user .
11467	Forgot password for a user .
11468	Reset a user s password .
11469	Recursively merges two dictionaries .
11470	Read the contents of a file .
11471	Get the meteor id of an object .
11472	Given a model and a list of object_ids return the meteor_ids for each object .
11473	Get the object id for the given model and meteor_id .
11474	Given a model and a list of meteor_ids return a mapping of object ids to None .
11475	Get an object from the database .
11476	Set the default forwards for the given operation .
11477	Set the default reverse operation .
11478	Truncate all models in the database .
11479	Truncate database forwards .
11480	Truncate the database backwards .
11481	Initialize the options .
11482	Finalize build and build_py options .
11483	Run all meteor builds .
11484	Convert a path to a directory .
11485	Generate a random seed for a set of values .
11486	Return the current state of the curve .
11487	Generate a random string from the given alphabet .
11488	Decorate a function as an API endpoint .
11489	Iterate over all API endpoints of an object .
11490	Clear the API path map cache .
11491	Pretty print a value .
11492	Validate kwargs for a function .
11493	Called when the websocket connection is opened .
11494	Called when the connection is closed .
11495	Called when a WebSocket message is received .
11496	Yields DDP frames from EJSON message .
11497	Process a DDP request .
11498	Dispatch a message .
11499	Connect to the server .
11500	Receive a PING message .
11501	Send a sub message .
11502	Unsubscribes from the server .
11503	Send a method to the server .
11504	Return information about the socket .
11505	Run DDPLauncher .
11506	Entry point for the command line interface .
11507	Print msg with verbosity > = 1 .
11508	Stop the Postgres greenlet .
11509	Start the postgres greenlet .
11510	Start the postgres greenlet .
11511	Poll for notifications .
11512	Make sure the green flag is set .
11513	Generate a random meteor id .
11514	Autodiscover DDP API .
11515	Return a dictionary representation of the exception .
11516	Get an object from the cache .
11517	Emit a log record .
11518	Create a middleware for the negotiation middleware .
11519	A context manager for adding routes to an application .
11520	Add a resource object to the router .
11521	Run a web application .
11522	Send a message to the device .
11523	Send an alert to one or more registration ids .
11524	Fetch all inactive IDs from the APNS server .
11525	Send a message to a GCM device .
11526	Send a message to one or more registration ids .
11527	Send a JSON request to the GCMPush server .
11528	Send data to the API .
11529	Get a model from a module location .
11530	Fast forward selection algorithm .
11531	Search for giphy documents .
11532	Translate a Giphy term to a Giphy phrase .
11533	Get a list of trending giphy objects .
11534	Returns a Giphy object for the specified gif .
11535	Create a Giphy Screensaver object .
11536	Upload a file to Giphy .
11537	Convert integer values to integers .
11538	Make a request to the API endpoint with the given parameters .
11539	Translate a term or phrase into a GIF .
11540	Yield GiphyImage objects for trending images .
11541	Get a Giphy Image by ID .
11542	Upload a gif file .
11543	Create an access control extension .
11544	Authenticate with Youtube .
11545	Upload a new video .
11546	Check the upload status of a video
11547	Update a video .
11548	Delete a video from Youtube
11549	Check the availability of a video .
11550	View for a single video .
11551	List all videos for a user .
11552	Upload a video from zuqqa .
11553	Upload a video .
11554	Return the URL to upload a video .
11555	Remove a video .
11556	Get information about the video .
11557	Save the video .
11558	Delete a video
11559	Update the metadata for this resource .
11560	Update a metadata field .
11561	Update this item s attributes .
11562	Parse a string into a list of nodes .
11563	Return a string representation of the given trees .
11564	Load a Python object from a file - like object .
11565	Read the contents of a file .
11566	Parse a node from a string .
11567	Create a new node .
11568	Return a newick representation of this node .
11569	Convert an ASCII art to a string .
11570	Get the node with the given label .
11571	Remove all nodes in the tree that are not in the given leaves .
11572	Resolve polytomies .
11573	Remove all internal names from the tree .
11574	Remove all leaf names from the tree .
11575	Decorator for functions that require authentication .
11576	Disposes of a JSON string .
11577	Raise an exception if the setting is not defined .
11578	Get the value of an argument .
11579	Get a list of all the values of a request parameter .
11580	Return a function that will be called when the callback is called with the given arguments .
11581	Get the value of a cookie .
11582	Clear a cookie .
11583	Redirect to the OpenID authentication endpoint .
11584	Get the authenticated user .
11585	Generate the request parameters for an OAuth request .
11586	Redirect to the OAuth 2 . 0 authorization endpoint .
11587	Send a request to Facebook .
11588	Get an authenticated user .
11589	concat url with args
11590	Parse a header line .
11591	Add a value to the HTTP header .
11592	Get a list of headers with the given name .
11593	Parse a single line .
11594	Parse the HTTP response headers .
11595	Normalizes a HTTP header name .
11596	Ensure that value is utf - 8 encoded .
11597	Converts the given value to unicode .
11598	Convert a value to a string .
11599	Recursively converts the given object to unicode .
11600	Raise an error if there is another auth plugin with the same keyword .
11601	Iterate over all subclasses of cls .
11602	Based on the matching strategy and the origin and optionally the requested method a tuple of policyname and origin to pass back is returned .
11603	Return the number of occupancy points in a grid .
11604	Write grobox to outfile .
11605	Write a PDB file .
11606	Given the total number of molecules and the absolute number of molecules and the relative number of molecules determine the numbers of the molecules .
11607	Set the box size for a lipids box .
11608	Write the top molecules to outpath .
11609	Iterate over the contents of a resource file .
11610	Add a message to a user s log messages .
11611	Send a message to the specified users .
11612	Get the list of messages for a user .
11613	Add messages to the user if they are logged in .
11614	Check if a message is in the config file .
11615	Verify that the profile name is valid .
11616	Retrieve data from config .
11617	Retrieve the password from the config .
11618	Update the config data for the given message .
11619	Update the password key in the config .
11620	Create a new config profile .
11621	Displays the required items to configure a profile .
11622	Get data from user .
11623	Get the authentication parameters for a message type .
11624	Create a new configuration entry for a profile .
11625	Write data to a profile .
11626	Write auth data to cfg . pwd .
11627	Add attachments to the message .
11628	Send the message .
11629	Send a message .
11630	Create a message of the specified type .
11631	Creates an obfuscated credential property .
11632	Creates a property that checks that the given attribute is valid .
11633	Validate an input for a message type .
11634	Check that a twilio attribute is valid .
11635	Validate a SlackPost message .
11636	Validate a WhatsApp email address .
11637	Return a coroutine that sends messages to the server .
11638	Add a message to the message queue .
11639	Get the body from a file .
11640	Given a dict of keyword arguments trim out any values that are not present in the dictionary .
11641	Send a message .
11642	Get the chat id of a user
11643	Send the message to the server .
11644	Send the message .
11645	Get the SMTP server from an email address .
11646	Generate email message .
11647	Add the header to the message .
11648	Add the body to the message .
11649	Add attachments to the message .
11650	Get the SMTP session object .
11651	Return an SMTP_SSL object for this connection .
11652	Return an SMTP session with TLS enabled .
11653	Send the email .
11654	Save the tags to a file .
11655	Unloads the image .
11656	Get the region of the image .
11657	Check if the dictionary is valid .
11658	Remove all elements from the list .
11659	Write this comment to a byte string .
11660	Reads the data from the file .
11661	Delete this chunk from the file .
11662	Resize the chunk to the given size .
11663	Insert a chunk into the AIFF file .
11664	Save the frame to a file .
11665	Delete a file from the cache .
11666	Parse a file .
11667	Process a normal line .
11668	Add a new block to the block list .
11669	Draw a string as a glyph .
11670	Parse an ISO 8601 time string into a datetime object .
11671	Convert a list of words into an HTML string .
11672	Make the HTML representation of a word .
11673	Make HTML para from a list of words
11674	Make HTML code from a list of lines .
11675	Make the HTML representation of a list of items .
11676	Save the MP4 metadata to a file .
11677	Update the parents of a file .
11678	Start the game .
11679	Register a mapping for a vendor and product .
11680	Get a controller from the registry .
11681	Register a freeform key .
11682	Return the HMAC - SHA256 digest of the string_to_sign .
11683	Returns the request headers for the request .
11684	Send a request to Route53 .
11685	Send a GET request to the API .
11686	Send a POST request to the API .
11687	Send a DELETE request to the API .
11688	Create an APEValue from the given value and kind .
11689	Send a request and parse the response .
11690	Perform an autopaginating API call .
11691	Get a list of all available hosted zones .
11692	Create a new hosted zone .
11693	Get a list of resource record sets by zone id .
11694	Change resource record sets .
11695	Draw an image .
11696	Draw a region of an image .
11697	Return the size of the header .
11698	Replace old_pages with new_pages .
11699	Find the last Ogg page in a file .
11700	Set the section .
11701	Add markup to self . markups .
11702	Process the content .
11703	Returns the markup with the given tag name or None if it does not exist .
11704	Creates an XML writer for creating a new hosted zone .
11705	Try to lock the file object .
11706	Insert a number of bytes into a file .
11707	Delete a number of bytes from a file .
11708	convert unicode to UTF - 8
11709	Add a change to the route .
11710	Parses the change_info element and returns it as a dictionary .
11711	Measure the width of a string .
11712	Return True if the object has been modified .
11713	Delete this hosted zone .
11714	Save this hosted zone .
11715	Parses ID3v1 frames .
11716	Make ID3v1 from id3 .
11717	Read at most size bytes from the file .
11718	Delete all values for the given key .
11719	Add a tag to the dictionary .
11720	Update the common APIC fields .
11721	Update to v24 .
11722	Unloads the sound .
11723	Play this sound .
11724	Set voice loop points .
11725	Split adobe_glyph_list into glyphs and values .
11726	Return a list of glyph names that match the given filter .
11727	Write an encoding definition to a file .
11728	Dump an array to a file .
11729	NAME glyph_names . py
11730	Check if a file exists .
11731	Make a list of files .
11732	Parse a HostedZone element and return a HostedZone object .
11733	Parses a DelegationSet element and sets the _nameservers attribute of the zone .
11734	Write a list of Block objects to a byte string .
11735	Group padding blocks into a single Padding .
11736	Delete the VCFLACDict from the file .
11737	Save the metadata block to a file .
11738	Parses an RRSet alias element .
11739	Parses the RFSet record values from the XML response .
11740	Parse a Route53 RRSet element .
11741	Delete this hosted zone .
11742	Add a record to this hosted zone .
11743	Create an A Resource Record Set .
11744	Create a new AAAA Resource Record Set .
11745	Create a new CNAME resource record .
11746	Create a MX Resource Record Set .
11747	Create a new NSResourceRecordSet .
11748	Create a new PTR resource record .
11749	Create a new SPF resource record .
11750	Create a new SRV resource record .
11751	Create a TXT resource record .
11752	Register a TXXX key with the ID3v2 library .
11753	Get the values of a change .
11754	Write a change to XML .
11755	Write a ChangeResourceRecordSetRequest to the server .
11756	Initialize logging .
11757	Return the item with the given alias .
11758	Freezes a dictionary .
11759	Join HTML attributes .
11760	Initialize the application .
11761	Initialize all bar initializers .
11762	Bind a bar to the widget .
11763	Returns the arguments of the command .
11764	Get the URL for this request .
11765	Check if the current request is the current one .
11766	Validates that the metric class is properly configured .
11767	Get a stat model by its name .
11768	Calculate statistics for a set of frequencies .
11769	Auto - discover INSTALLED_APPS and gadgets modules .
11770	Dump the statistics for a metric .
11771	Update the maintenance statistics .
11772	Get a list of values from GET variables .
11773	Get a boolean value from the GET request .
11774	Get the next colour .
11775	Get parameters for Gecko chart .
11776	Geckoboard number widget .
11777	Geckoboard drag widget .
11778	Geckoboard line chart .
11779	Get the latest count of a geckoboard metric
11780	Geckoboard Funnel .
11781	Return a list of all active gadgets .
11782	Register a gadgets .
11783	Return the context data for this gadgets .
11784	Print an error message and exit .
11785	Decorator for functions that validate the params .
11786	Prompt the user for a long input .
11787	Prompt the user for a list of items .
11788	Prompt the user for an output file .
11789	Get the schedule for a given year .
11790	Returns the winner or None if there is no winner
11791	The season of the year .
11792	Return a DataFrame of player starters .
11793	The surface of the game .
11794	Return the coin toss .
11795	Get the current weather of the game .
11796	Return information about the ref .
11797	Get the schedule of the game .
11798	Return a pandas dataframe of all standings .
11799	Get the team stats table .
11800	Get the roy voting data .
11801	Returns a pandas DataFrame of line scores .
11802	The season of the year .
11803	Get the player stats for each team .
11804	Decorator that switches the current working directory to dirPath .
11805	Decorate a function to cache the results of a given URL .
11806	Get the key for a class instance .
11807	Memoize the result of a function .
11808	Calculate the age of a given year month and day .
11809	Get stats table .
11810	Return statistics about the number of games in the game .
11811	Get statistics about the total number of rows in the table .
11812	Return statistics about the number of minutes per minute .
11813	Return statistics about the percentages of each position .
11814	Get the advanced stats table .
11815	Return statistics about shooting .
11816	Get statistics about the advanced pbp data .
11817	Get basic playoffs for a given gamelog year .
11818	Get the current value from the session
11819	Expand the detail column of a data frame .
11820	Add team and opp columns to a DataFrame .
11821	Add team features to a DataFrame .
11822	Calculate the initial win probability of a line .
11823	Return the passing playoffs as a pandas DataFrame
11824	Return a list of awards for a given year .
11825	Get the name of the team .
11826	Get the boxscores for a given year .
11827	Return the PQ element for the given year and keyword .
11828	Get the list of coaches for a given year .
11829	Get the schedule for a given year .
11830	Get offensive coordinator href for a given year .
11831	Return the defensive coordinator href for a given year .
11832	Return the stadium ID for a given year .
11833	Return the offensive scheme for a given year .
11834	Returns the defensive alignment for a given year .
11835	Get all splits for a given year .
11836	Get HTML from given URL .
11837	Flatten links in a DOM tree .
11838	Convert a relative URL to an id .
11839	Convert keyword arguments to a query string .
11840	Read data from an HDF5 file .
11841	Add a direct put to the read queue .
11842	Get a direct access to the queue .
11843	Close the connection .
11844	Get a batch from an HDF5 file .
11845	Get the remainder of the file at the given path .
11846	Get a queue of data from a file .
11847	Get a generator for the given path .
11848	Parse a file - like object into a protobuf object .
11849	Dump a list of protobuf objects to a file .
11850	Read a varint from the stream .
11851	Get a list of objects from the stream .
11852	Close the file descriptor .
11853	Write pb2_obj to the stream .
11854	Flush the write buffer .
11855	Get the game s directory .
11856	Emulate input text with keyboard emulation .
11857	Make a fake movie .
11858	Evaluate the traits .
11859	Wait until a condition is true .
11860	Wait until all traits are present .
11861	Add the specified exceptions to the list of ignored exceptions .
11862	Execute the main volume operator on the device .
11863	Get the main source of an operator .
11864	Send a message to the server .
11865	Get the status of the NAD .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Select a source .
11870	Deobfuscate a request .
11871	Calculate the CRC of the given plaintext .
11872	Encrypt the value using the unfriendly - obfuscate filter .
11873	Check if a song is missing .
11874	Returns a list of all links and their name .
11875	Check if song name is available .
11876	Parse a song from a URL .
11877	Generate a URL for a song .
11878	Parses the Google download URL from an HTML page .
11879	Parses a song and returns the website URL .
11880	Get the HTML response from the given URL .
11881	Download a file using requests .
11882	Download a file using wget
11883	Find all station codes in a given city .
11884	Get information about a location .
11885	Parse an observation response .
11886	Get an observation for a station .
11887	Return a list of paths to search for .
11888	Returns a list of all compilers registered for this compiler .
11889	Returns the mimetype of the file .
11890	Return the mimetype of all compilers .
11891	Return the extension of the compiler format .
11892	Register a processor for a mimetype .
11893	Unregister a processor for a mimetype .
11894	Returns a list of all paths for all finders .
11895	Register default mimetypes preprocessors and postprocessors .
11896	Try to import PySide or PyQt5
11897	Get the meta netnode .
11898	Add a netnode plugin name .
11899	Remove a netnode plugin name .
11900	Import settings from a config file .
11901	Export settings to config_path .
11902	Returns a DirectoryIDASettings object with the current configuration directory .
11903	Return an iterator over all keys in the database .
11904	Simple error handler .
11905	Get a DynamoDB table .
11906	List all DynamoDB tables .
11907	Fetch all items for a given category .
11908	Return the metadata id for the given item .
11909	Return the updated_at timestamp of a metadata item .
11910	Fetch the owner team of a crate .
11911	Fetch the owner user of a crate .
11912	Fetch the versions of a crate .
11913	Fetch the downloads attribute of a crate .
11914	Fetch crate data .
11915	Get the summary of the category .
11916	Returns a paginated list of crates for each category .
11917	Get a specific crate .
11918	Get a specific crate attribute .
11919	Fetch items from a given path .
11920	Fetch all items in a category .
11921	Fetch items from Kitsune .
11922	Get all questions .
11923	Fetch events for a given category .
11924	Return the number of seconds that the metadata was updated on .
11925	Return the metadata category of an item .
11926	Get items from ReMo .
11927	Return the list of buffers in this IOCB .
11928	The priority of the IOCB .
11929	Close the connection .
11930	Submit a list of blocks .
11931	Cancel the given block .
11932	Cancel all submitted blocks .
11933	Get the requested number of events .
11934	Fetch events for a given category .
11935	Get all cells spreadsheet data .
11936	Parse the feed .
11937	Get the export formats for the given pid_type .
11938	Returns the default permission factory .
11939	Create the Invenio - Records - UI blueprint .
11940	Create a URL rule .
11941	View for a record .
11942	r Default view method .
11943	r Export a record .
11944	Time a callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment the value of a metric .
11948	Send a timing request .
11949	Add a timing value since the given start time .
11950	Send a gauge to the server .
11951	Send a gauge delta .
11952	Set the value of a metric .
11953	Send data to the server .
11954	Create a batch client .
11955	Create a unit client .
11956	Flush all pending batches to the remote address .
11957	Creates a MyPermissionChecker for the given record .
11958	Create a new TCP batch client .
11959	Flushes all buffered messages to the socket .
11960	Create a new TCP client .
11961	Create a User instance with the specified permissions and groups .
11962	Interpret x as an OpenMath object .
11963	Convert a term to OpenMath .
11964	Convert an object to a Python object .
11965	Convert an object to OpenMath .
11966	Register a converter to a Python class .
11967	Deprecated register to python .
11968	Initialize the application .
11969	Returns a generator that yields all valid choices .
11970	Split a dictionary of keyword arguments into a dictionary of fields and aggregation functions .
11971	Decorator to register a function for a given field type .
11972	Create a value from an object instance .
11973	Returns the default form data and form files for any form .
11974	Decorator to check if a field is required .
11975	Decorator for field choices attibute .
11976	Return a string representation of a decimal field .
11977	Returns the data for an email field .
11978	Generate random data for a date field .
11979	Return the data for a datetime field .
11980	Return a string representation of a float field .
11981	Return a string representation of an integer field .
11982	Generate random data for a time field .
11983	Return a random choice for the field .
11984	Returns a random choice for the field .
11985	Returns a random value from the queryset .
11986	Encode a Python object into a byte string .
11987	Publish a package .
11988	Tag the current version .
11989	Decorator to check if any field is blank .
11990	Load a global variable from a Python module .
11991	Build an instance with the given state .
11992	Create an OMApplication for a list of Python objects .
11993	Create an OMApplication for a tuple .
11994	Decode a byte string into a bytearray .
11995	Encodes the given data into a byte string .
11996	Converts a number to a fixed value .
11997	Format a number .
11998	Convert a number to a Money object .
11999	Convert data to a numpy array .
12000	Decompress an array of bytes and return it .
12001	Add a new workspace .
12002	Remove a workspace from the configuration .
12003	Return a list of available workspaces .
12004	Returns the object with the given name or None .
12005	Check if a repository exists in a workspace
12006	Sync the repositories for a workspace .
12007	Clone a repository to a given path .
12008	Check if a newer version of ndio is available .
12009	Convert an array into a list of vectors .
12010	Convert a list of voxels into a numpy array .
12011	Print a workspace .
12012	Print an update of a repository .
12013	Set the console handler .
12014	Execute a command in the current working directory .
12015	Load a PNG file to a numpy array .
12016	Save numpy data to png file .
12017	Save a collection of numpy arrays to a png file .
12018	Print the status of a workspace .
12019	Print the status of a repository .
12020	Get the block size of a token .
12021	Post a cutout without chunking the data .
12022	Load an image from a TIFF file .
12023	Save a numpy array to a TIFF file .
12024	Load a multipage from a tiff file .
12025	Write the configuration to a file .
12026	Clone the current branch to the given URL .
12027	Get the version of yoda .
12028	Mix a name with a greeting and match it .
12029	Decorator for options .
12030	Reserve a number of ids from a channel .
12031	Merge a list of ids into a channel .
12032	Propagate a channel .
12033	List all projects in a dataset .
12034	Get information about a dataset .
12035	Returns a list of all available datasets .
12036	Parse command line arguments .
12037	Show a workspace .
12038	Show information about a workspace .
12039	Show all the workspaces .
12040	Return the URL for the given endpoint .
12041	Try to guess the file format from the extension .
12042	Open an image file .
12043	Convert an input file to an output file .
12044	Build a GRUTE graph .
12045	Upload invariants to graph file .
12046	Convert a graph file from one format to another .
12047	Convert a list of ramons into a dictionary .
12048	Returns the RAMON type for the given type .
12049	Delete a channel .
12050	Add a new dataset .
12051	Return a JSON - ready representation of a dataset .
12052	Create a dictionary representation of a dataset .
12053	Create a dictionary representation of a channel .
12054	Create a dictionary representation of a project .
12055	Identify the dimensions of an image .
12056	Upload data to ndio .
12057	Find the path to a repository in a workspace .
12058	Get a list of all public tokens .
12059	Get information about a project .
12060	Set the metadata for an OCSP token .
12061	Make a GET request to the given URL .
12062	Send a POST request to the given URL .
12063	Send a DELETE request to the given URL .
12064	Load data layers from a hdf5 file .
12065	Saves an array to an HDF5 file .
12066	Infer gaps in a tree .
12067	Return a new NvimIO with the recovered value .
12068	Installs gettext translations into the Jingo environment .
12069	Apply a thunk to an exclusive state guard .
12070	Return the percentage of the data .
12071	Get cache stats for a given server .
12072	Get a dictionary of all cache slabs .
12073	Return the context data for the given request .
12074	Show the status of the memcached server .
12075	View for the memcache dashboard .
12076	Show the cache statistics for a given server .
12077	List the available memcached slabs for a given server .
12078	Convert a number of bytes to a human readable string .
12079	Find a Config object in the children dictionary .
12080	Add a directory to the environment .
12081	Apply applicator to the config file .
12082	The full path to the file .
12083	Read the contents of the file .
12084	Write data to the file .
12085	Configure the logger .
12086	Create the file if it does not exist .
12087	Apply the applicator to the configuration .
12088	Return the absolute path to the file .
12089	Remove the directory .
12090	Prepare the environment for execution .
12091	Clean up the tree .
12092	Return the absolute path to a file .
12093	Return a list of all files in the directory .
12094	Write data to a file .
12095	Read the contents of a file .
12096	Add a file or a list of files .
12097	Save the configuration to a YAML file .
12098	Load configuration from file .
12099	Clean up the temporary directory .
12100	Load all plugins in the given directory .
12101	Recursively update target dict with values from source .
12102	Return a child node with the given path .
12103	Resolve a path to a node and its key .
12104	Get the value of the field .
12105	Update the configuration with the given data and options .
12106	Load configuration from file .
12107	Apply the configuration to a string .
12108	Build the callback url for a message .
12109	Process the input from the socket .
12110	Send output to pyngus .
12111	Send an RPC call request .
12112	Read data from a socket .
12113	Write output data to socket .
12114	Wrap a function to make sure it is not reentrant .
12115	Get remote settle modes .
12116	Configure this node with the given properties .
12117	The address of the source .
12118	The address of the target .
12119	Called when the parent session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Request a receiver link .
12124	Called when a link is destroyed .
12125	Check if we need to close the session .
12126	Process an endpoint event .
12127	Add a mark tag to the Markdown document .
12128	Called when the receiver is closed .
12129	Called when the receiver has failed .
12130	Get the host and port from a server address .
12131	Connect a socket to a given host and port .
12132	Create a server socket .
12133	Return the list of readers writers and timers that need processing .
12134	Decorator to make sure a function is not reentrant .
12135	Process the connection .
12136	Return the next output data .
12137	Create a new sender link .
12138	Reject a sender link .
12139	Create a new receiver .
12140	Called when the connection has failed .
12141	Called when the connection is up .
12142	Called when the remote connection is closed .
12143	Called when a protocol error occurred .
12144	Decorator for twilio views .
12145	Returns a string representation of the color .
12146	Returns a dictionary of font names to font families .
12147	Set the compression option .
12148	Add an object to the buffer .
12149	Write a stream to the output buffer .
12150	Put a stream into the output stream .
12151	Add a new page to the document .
12152	Set the color scheme .
12153	Set the default font .
12154	Add a page to the document .
12155	Set the font size .
12156	Add text to document .
12157	Add a newline to the current page .
12158	Add a pie chart to the page .
12159	Output all pages .
12160	Get a list of all pages that have an orientation change .
12161	Output all fonts .
12162	Output the images .
12163	Output the image to the device .
12164	Transform the current matrix .
12165	Calculate the absolute position of a point .
12166	Set the style of the symbol .
12167	Rotate a point by the given angle .
12168	Set information about the object .
12169	Set display mode .
12170	Close the document and return the output .
12171	Write PDF header .
12172	Write pages to the server .
12173	Put the resource dictionary into the document .
12174	Put information about the object .
12175	Put the current catalog .
12176	Put the trailer of the file .
12177	Iterate over a sequence of floyd values .
12178	Generate a naive sequence of values .
12179	Generator that yields the gosper of a sequence .
12180	Generator that yields the brent value of a sequence .
12181	Return True if x + test_length is within self . xmax
12182	Return True if y + test_length is within ymax
12183	Return True if x is greater than or equal to test_ordinate .
12184	Return True if y is greater than or equal to or equal to test_ordinate .
12185	Return a copy of the current cursor .
12186	Add a number to the x - coordinate .
12187	Add a value to the y - axis .
12188	Draw the entire table .
12189	Create a tag .
12190	Get a list of tags .
12191	Get all labels with the given name .
12192	Update a tag
12193	Delete a tag .
12194	Create a tagit
12195	Get a list of tags .
12196	Returns a list of tags with the given label SN .
12197	Create a hook .
12198	List all registered hooks .
12199	Update a hook .
12200	Create an alert .
12201	Returns a list of alerts of the given type and optional args .
12202	Update an alert
12203	Setup Sphinx extension .
12204	Returns the path to the themes directory .
12205	Make a POST request to the logentries API .
12206	List all hosts .
12207	Get a single log set .
12208	Find an attacker slider for a given position .
12209	Calculate the duration in seconds .
12210	Update the model with the given kwargs .
12211	Compute the limbdark .
12212	Perform a binary operation on the array .
12213	Free memory .
12214	Read data from socket .
12215	Generator that yields lines from the buffer .
12216	Generator that yields data from the buffer .
12217	Get the status code and message from the response .
12218	Generate an info message .
12219	Generate an info message .
12220	Send a command to the NNTP server .
12221	Get a list of capabilities for the specified keyword .
12222	Send the MODE READER command .
12223	Quit the NNTP server .
12224	Get the current date .
12225	Send the NNTP HELP command .
12226	Generate new groups from a timestamp .
12227	Generate new news from pattern and timestamp .
12228	Return a list of newnews objects for the given pattern and timestamp .
12229	List active groups .
12230	List active times .
12231	List newsgroups .
12232	List overview formats .
12233	List all available extensions .
12234	Generate a list of the given keyword .
12235	Return a list of values for the given keyword and optional argument .
12236	Get the total first last and group of a group .
12237	Get the next article and ident .
12238	Get the article number of a message .
12239	Send a HEAD request .
12240	Get the body of a message .
12241	Send an XGTITLE command .
12242	Send an XHDR message .
12243	Compress a message header .
12244	Generator for the XOVER command .
12245	Generate an XPAT message .
12246	Return a list of XPattern objects for the given ID range .
12247	Send XFEATURE COMPRESS GZIP command .
12248	Send a POST request .
12249	Return the offset of the given value .
12250	Convert a value to a timestamp .
12251	Convert a string to a datetime object .
12252	Make a POST request to the API .
12253	Perform an HTTP DELETE request .
12254	Make a GET request to the API .
12255	List all scheduled queries for this account .
12256	List the tags for this log entry .
12257	Returns a list of tags with the given name or id
12258	Create an alert notification .
12259	Delete a tag .
12260	Create a new scheduled query .
12261	Create a new scheduled query .
12262	Delete a tag .
12263	Convert an integer or tuple into a string .
12264	Parse a newsgroup info line .
12265	Parse a header line .
12266	Convert a dict of headers into a string .
12267	Do a POST request .
12268	Run tests .
12269	Generates a docstring with the given defaults .
12270	Creates a decorator that adds a docstring to the function s docstring .
12271	Return a docstring with the default values of the class .
12272	Set the value of the field .
12273	Check if the given value is of the correct type .
12274	Return the value of the variable .
12275	Raises TypeError if value is not a scalar .
12276	Return the symmetric error of the curve .
12277	Set the errors .
12278	Set the bounds free errors and value .
12279	Import the metrics from the API .
12280	Convert a list of metrics into a dictionary .
12281	Filter the results based on the filter expression
12282	Call the API .
12283	Return the expression terminal .
12284	Return an operator token .
12285	Return an OP_ADD token .
12286	Initialize the properties of the object .
12287	Get a list of all parameters .
12288	Returns a numpy array of the values of the specified parameters .
12289	Returns a numpy array of the errors of each parameter .
12290	Clear all Derived parameters .
12291	Set the method to use .
12292	Get environment variables .
12293	Get the URL parameters for the request .
12294	Perform a GET request .
12295	Perform an HTTP DELETE request .
12296	Perform an HTTP POST request .
12297	Perform an HTTP PUT request .
12298	Call the API .
12299	Validate that the scene name and prefix are valid .
12300	Verify that the type product is valid .
12301	Get the size of the remote file
12302	Download the scene .
12303	Validates that a list of bands is a valid band .
12304	Establish connection to Earthexplorer
12305	Returns a function that returns True if the given name starts with the given prefix .
12306	r Convert a timezone string into a timezone object .
12307	Normalizes a timezone - aware datetime .
12308	Join a list of strings with the given delimiter .
12309	Return a list of the positions of the newline characters in a string .
12310	Convert a point to a source string .
12311	Print the output of the relay .
12312	Remove metrics control and plugins from the result .
12313	Load fortunes from a list of files .
12314	Set the chance of a set of fortunes .
12315	Run the command line tool .
12316	Return a rule token .
12317	Handle special handling .
12318	The grammar of the input source .
12319	A list of all rules in the grammar .
12320	The list of comments in the grammar .
12321	Returns a list of all directives .
12322	Returns the compiled output source .
12323	Return a string representation of the token .
12324	Get the imports of the module .
12325	Returns a string representation of the token type enum .
12326	Return the class definition as a string .
12327	Get the name of the entry point .
12328	Get the definition of the given rule .
12329	Get the source code for the given rule .
12330	Get the name of the transform for the given rule .
12331	Convert an expression into an AS number .
12332	Convert an AST node into an AST node .
12333	Given a list of operands and a predicate return a list of the operands that match the predicate .
12334	Remove all grouping groups from an OptreeNode .
12335	Convert an AST node to a Python code object .
12336	Convert an AST AST node into a Python code object .
12337	Convert an AST terminal to a list of code blocks .
12338	Convert an ast . OptionGroup to a list of code lines .
12339	Convert a RepetitionGroup to a list of code lines .
12340	Convert a special handling expression into a list of code blocks .
12341	Convert an OP_ALTERNATE operator to its code representation .
12342	Convert an OP_CONCAT AST node into its code representation .
12343	Convert an ast . OpExclusion to its corresponding python code .
12344	Convert an OP_MULTIPLY instruction to its corresponding Python code .
12345	Convert an OP_REPEAT instruction to its corresponding python code .
12346	Find all directives that match the given predicate .
12347	Return True if child and parent are of the same type as parent .
12348	Parse the directives from the given comment .
12349	Print the result of the API call .
12350	Get a wx . Id object .
12351	Remove a hotkey from a control
12352	Add command line arguments to the parser .
12353	Configure logging .
12354	Check if the arguments are valid .
12355	Convert an infix to a postfix .
12356	Convert a list of operators to an OptreeNode .
12357	Reduce a list of OptreeNodes into a single OptreeNode .
12358	Add command line arguments to the parser .
12359	Load the plugin manifest .
12360	Get a metric definition by its name .
12361	Returns the length of each column in the table .
12362	Returns the maximum display and description length of the metrics column .
12363	Escape all underscores in the metrics name .
12364	Output a markdown representation of the field .
12365	Prints the metrics to the screen .
12366	Generate the markdown file .
12367	Parse the input text and return a tree .
12368	Update self . most_consumed based on the length of the original text .
12369	Add command line arguments to the parser .
12370	Parse a time string into a datetime object .
12371	Output the results in a CSV format .
12372	Output the results in a JSON format .
12373	Output raw JSON .
12374	Return an XML representation of the results .
12375	Return True if the node is a trimmed node .
12376	Pretty print the root node .
12377	Return a function that returns the repetition of the inputted value .
12378	Return a parse node for the given value .
12379	Get a parse node representing a repetition .
12380	Get the exclusion from the text .
12381	Count the number of leading whitespace in a string .
12382	Call extractor on text .
12383	The position of this parse node .
12384	Return True if this node is empty .
12385	Add a list of tokens to be ignored .
12386	Check if the given value is of the correct type .
12387	Return a flattened version of this parse node .
12388	Return a new ParseNode that is a trimmed version of this ParseNode .
12389	Merge two ParseNodes .
12390	Return a copy of this parse node with a new type .
12391	Return a compressed version of this parse node .
12392	Return the current position .
12393	Return the maxreaded position .
12394	Move to the next character .
12395	Move to the next line .
12396	Move to the previous line .
12397	Return the last line of the current line .
12398	Increment the cursor position by length .
12399	Save the current cursor position .
12400	Restores the current context .
12401	Return a string representation of the notification .
12402	Set the name of the signature .
12403	Count the number of variables in the signature .
12404	Count the number of functions in the signature .
12405	Update self . _nvars self . _nfuns .
12406	Update this scope with a list of signatures .
12407	Return a new scope with the union of the given signatures .
12408	Update the scope with the intersection of oset .
12409	Return a new Scope that is the intersection of this one and the given one .
12410	Remove all keys in oset from the scope .
12411	Return a new scope that is the difference of this one with the given signature .
12412	Update self with the symmetric difference of oset .
12413	Return a new Scope that is the symmetric difference of this one and the given one .
12414	Add a signature to the scope .
12415	Remove a Signature from the set .
12416	Remove the signature from the scope .
12417	Return the values of this signature .
12418	Returns the first signature in the signature list .
12419	Return the last signature .
12420	Get the signature for the given key .
12421	Get a scope by its name .
12422	Get a signature by symbol name .
12423	Get all polymorphic return signatures .
12424	Call the translator injector .
12425	Normalizes an AST node .
12426	Set the value of this node to the value of another node .
12427	Return an iterator over all the values in this list .
12428	Check if a hit is ok .
12429	Get the signature for this function .
12430	Resolve the expression .
12431	Returns a list of resolved names for the given type name .
12432	Set the resolved name of a type .
12433	Delete a local file .
12434	Delete a file from an S3 bucket
12435	Delete a file .
12436	Save a temporary file to a local file .
12437	Save a temporary file to S3 .
12438	Save an object to a temp file .
12439	Find a path in an S3 bucket .
12440	Create an Enum class with the given sequential and named arguments .
12441	Check that a function has the correct types .
12442	Set one object in the chainmap .
12443	Decorator to add a method to the class .
12444	A decorator that registers a function as a hook .
12445	Decorator to add a rule or hook to a class .
12446	Decorator to mark a function as a directive .
12447	Decorator to register a function as a decorator .
12448	Bind src to dst .
12449	Read the end of the file .
12450	Push the rule nodes onto the stack .
12451	Pop the rule nodes from the stack .
12452	Get the value of a node .
12453	Add a stream to the parser .
12454	Start a new tag with the given name .
12455	Mark the end of a tag .
12456	Set the rules of the class .
12457	Set the hooks for this class .
12458	Set the directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Return True if the next token is the given text .
12462	Check if there is at least one character in the stream .
12463	Read a single character from the stream .
12464	Read until the stream is at EOF .
12465	Return True if the stream has at least one blank line .
12466	Set the hit dtype .
12467	Set the cluster dtype .
12468	Check the structure compatibility .
12469	Add a ruleclause name to the namespace .
12470	Add a rule to the parser tree .
12471	Add a rule to the parser tree .
12472	Add cla to sequences .
12473	Add an alternative to the given alternatives .
12474	Add a range to the sequence .
12475	Add an lookahead rule to the parser tree .
12476	Add a capture to the sequence .
12477	Add a Bind to a sequence .
12478	Add a hook to the sequence .
12479	Set the value of a parameter to an integer .
12480	Set the value of a parameter to a string .
12481	Set the parameter pair for a single character .
12482	Set the id of a parameter .
12483	Set the name of a hook .
12484	Add a parameter to a hook .
12485	Evaluate the BNF DSL and return the result .
12486	Return True if the stream is at the beginning of a Cxx file .
12487	Add a state to the state manager .
12488	Return a string representation of the graph .
12489	Write the graph to a dot file .
12490	Write the image to a PNG file .
12491	Return a string representation of the state .
12492	Return the next state .
12493	Reset the living state .
12494	Infer the type of each element in the body .
12495	Infer a subexpression .
12496	Infer a symbol by its name .
12497	Infer a literal .
12498	DUMP NODE LOCAL INFOS
12499	Return an ast . FunctionDef for the given rule .
12500	Return an ast . stmt for the exit scope .
12501	Return an ast . stmt for the given parser tree .
12502	return an ast . Call node as an ast . expr
12503	Return an ast . expr for the True call .
12504	Return an ast . expr for the hook node .
12505	Return an ast . expr for the given rule .
12506	Return an ast . expr for a Capture node .
12507	Return an ast . stmt or ast . expr for the current scope .
12508	Return an ast . stmt for an ast . Alt node .
12509	Return an ast . stmt for the given Seq node .
12510	visit a RepOptional node by returning an ast . stmt or ast . expr
12511	Return an ast . stmt for a REP0N node .
12512	Return an ast . stmt for a Rep0N node .
12513	Append the contents of src to dst .
12514	Set the indentation level of each element in a list .
12515	Convert a list into a string .
12516	Print a list of nodes .
12517	Populate an edge from a list of MatchExpr objects .
12518	Populate a state register with a list of sequences .
12519	Build the state tree .
12520	Return True if n == val .
12521	Build a grammar from a string .
12522	Load a grammar from a file .
12523	Parse an entry rule from a string or stream .
12524	Parse a file .
12525	Set a node from src to dst .
12526	Set the value of the node src to the value of dst .
12527	Get the value of a sub - node .
12528	Default serializer .
12529	Returns the total number of depositions for a given query .
12530	Serialize a deposition to a dictionary .
12531	Get recids from invenio 12 database .
12532	Get recids from invenio . legacy database .
12533	Import BibDoc from invenio .
12534	Dump the BibDoc files for a given recid .
12535	Get the number of documents in the database .
12536	List all files in BibDoc .
12537	Return a dict representation of the token .
12538	Get the number of users .
12539	Dump a User object to a dictionary .
12540	Get the number of communities .
12541	Get modified recids from Invenio 12 .
12542	Get modified recids from Invenio 2 database .
12543	Get restrictions for a given collection .
12544	Get a list of revisions for a record .
12545	Get all and restricted collections for a record .
12546	Dump a MARCXML record to a JSON string .
12547	Get all modified BibDoc recids that match the given query .
12548	Dump a record from a given date .
12549	Return a dict representation of the given RA .
12550	Load common data into a model .
12551	Collect things from entry points .
12552	Initialize the application context .
12553	Cache the results of a function .
12554	Get the run_sql module .
12555	Get the list of roles connected to an action .
12556	Get a list of actions .
12557	Return a dict representation of the remote token .
12558	Load a token from the given data dict .
12559	Import a MARCXML or JSON record .
12560	Try to import config_var_imp from app . config .
12561	Return a dict representation of the object .
12562	Get users from Invenio .
12563	Returns the number of users in invenio .
12564	Serialize a User object into a dictionary .
12565	Load an invenio deposit record .
12566	Create a record and a persistent identifier for a deposit .
12567	Load a record from the database .
12568	Load records from a list of sources .
12569	Inspect all records in a dump .
12570	Load a single dump from one or more sources .
12571	Load communities from a set of sources .
12572	Load users from a list of sources .
12573	Load a deposit task .
12574	Get a list of profiling statistics .
12575	Main entry point for Tornado .
12576	Dump profiling to a file .
12577	Handle a DELETE request .
12578	Delete the current profile .
12579	Get the running status .
12580	Decorate a method to disable timestamping .
12581	Load user from data dict .
12582	Calculate the translations of the images in parallel .
12583	Stitch a collection of images into a single image .
12584	Adds a dimensions with ones to array .
12585	Create a record from a dump .
12586	Create a record from a dump .
12587	Update a record .
12588	Create persistent identifiers for a record .
12589	Delete a record .
12590	Create files in a record .
12591	Create a file instance for a bucket and key .
12592	Delete all buckets from a record .
12593	Return a list of PersistentIdentifier objects that are missing .
12594	Prepare the list of revisions .
12595	Sort files by version .
12596	Prepare the list of pid values for the process .
12597	Check if a record is marked as deleted .
12598	Load a new instance of the Community class from the given data .
12599	Load a FeaturedCommunity object from a dictionary .
12600	Dump a thing to a JSON file .
12601	Run a check on the given thing .
12602	Delete the peng widget .
12603	Calculate the magnitude of a vector .
12604	Return a normalized version of v .
12605	Transform a set of tex coordinates .
12606	Ensure that the _bones key is present in the data .
12607	Set the length of the bones .
12608	Set the parent of this bone .
12609	Calculate the point on the pivot .
12610	Start animation .
12611	Set the current state of the object .
12612	Unsets the current state of the object .
12613	Set the state of the rotation .
12614	Unset the state of the rotation .
12615	Ensure that the model data is available for the given object .
12616	Redraw the model .
12617	Draw the current state of the object .
12618	Set the model .
12619	Write a list of reports to a file .
12620	Convert a list of test reports to XML .
12621	Add a menu to the window .
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the background .
12625	Delete a widget .
12626	Redraw the label .
12627	Register event handlers on the world .
12628	Register the event handlers for the player .
12629	Add a label to the main window .
12630	Add an ok button .
12631	Exit the dialog .
12632	Add a button with a confirm button .
12633	Add a cancel button .
12634	Update the progress bar .
12635	Render all registered actors .
12636	Render the world in 3d mode .
12637	Create a context manager for a step .
12638	Check if a resource exists .
12639	Add a category .
12640	Get the missing texture
12641	Returns the model object with the given name .
12642	Load a model object .
12643	Returns the model data for the given name .
12644	Load model data from a JSON file .
12645	Add a widget to the container .
12646	Draw the menu .
12647	redraw the background and stencil
12648	Redraw the scrollbar .
12649	Check if the mouse is aabb of the given size .
12650	Return the p - value of this interval .
12651	Add a layer to the graph .
12652	Get a region of data from the given buffer .
12653	Draw the current buffer .
12654	Add an action .
12655	Perform an action on all registered actions .
12656	Register a name with the registry .
12657	Add a layer to the graph .
12658	Draw the layered widget .
12659	Remove all layers from the widget .
12660	The border of the widget .
12661	Get the offset of the widget .
12662	Returns the width and height of the widget
12663	Read a Mesh from an HDF5 file .
12664	Make a connection matrix of the given shape .
12665	Set the list of fields to be used .
12666	Add one or more fields .
12667	Check that all elements have the same type .
12668	Return the space of this element .
12669	Returns the centroids and volumes of each element .
12670	Returns a list of angles for each argument type .
12671	Get the edges of the mesh .
12672	Returns a pandas DataFrame with the stats of each cluster .
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Convert a surface to element sets .
12676	Return the metadata for each field .
12677	Return the metadata of the step .
12678	Make the working directory if it doesn t exist .
12679	Run the post - processor .
12680	Run GMSH .
12681	Read a history report from a file .
12682	Read field report from file .
12683	Convert a list to a string .
12684	Return a string representation of the equation .
12685	Return a string representation of an unsorted set .
12686	Parse the response and return the payload .
12687	Make a GET request .
12688	Write an XY report to disk .
12689	Write a field report to disk .
12690	List all registered components .
12691	Return an error message for this field .
12692	Check if an exception was thrown by a descriptor .
12693	Set the data for this object .
12694	will get the axis mode for the current series
12695	sets the graph ploting options
12696	Create a class with the given name and attributes .
12697	Cycle through the datafeeds .
12698	Try to convert a value to a float .
12699	Convert a string to a number .
12700	Plot a graph .
12701	Convert raw string to unicode .
12702	Make a clean HTML document from raw data .
12703	Returns True if mime_type matches one of include_mime_types .
12704	Clean domain name from raw_string .
12705	Return a list of the domain name cuts from the left .
12706	Make a hash keyword for the given token .
12707	Collect the number of words in the sentence .
12708	Perform keyword indexing on a stream item .
12709	Invert a token hash .
12710	Get the document frequencies for the given hashes .
12711	Lookup stream ids for a given hash .
12712	Lookup the stream_id and value for a given hash .
12713	Make stream items from a file - like object .
12714	Make a streamcorpus . ContentItem from a permalink entry .
12715	Make a streamcorpus . ContentItem from a node .
12716	Read a varint from the stream .
12717	Read an A block from the stream .
12718	Serialize StreamItem key .
12719	Convert a streamitem to a key and data tuple .
12720	Temporarily change the current working directory .
12721	Strip a prefix from a string .
12722	Strip a suffix from a string .
12723	Check if needle is a subsequence of haystack .
12724	Create an ice web application .
12725	Start the server .
12726	Shutdown the server and close it .
12727	Decorator to add a route to the router .
12728	Register a callback that will be called when an error occurs .
12729	Serve a static file .
12730	Get the error page callback .
12731	Add a route to the router .
12732	Resolve a route .
12733	Resolve a non - literal route .
12734	Return the type and pattern for the given pattern .
12735	Return the response body as a list .
12736	Add a header to the response .
12737	Set a cookie .
12738	Return a string representation of the status of the response .
12739	The content type of the response .
12740	Get all values for a given key .
12741	Recursively delete a directory .
12742	Get the open file descriptors for the current process .
12743	Print file type stats .
12744	Run the rejester on a work unit .
12745	Attempt to fetch a file from S3 .
12746	Get a list of lines from a file .
12747	Generate a random adjoint species pair .
12748	Generate a random adjacency pair .
12749	Morph a sentence .
12750	Get the similarity of a query pair .
12751	Convert a sentence to Hiragana .
12752	List entities in a sentence .
12753	Get the shortsum of a review .
12754	Show a list of keywords .
12755	Get the chrono for a given sentence .
12756	Create a new scp stage .
12757	Initialize a list of stages with the given name .
12758	Initialize all stages .
12759	Run a single chunk of text .
12760	Run the writers .
12761	Run an incremental transform on a stream .
12762	Replace a pipeline configuration with a new one .
12763	Creates a WSGI application .
12764	Given a dictionary of sentences return a dictionary of equivalences and their tokens .
12765	Return True if target mentions are in chain_mentions False otherwise .
12766	Return True if target_mentions contains any of chain_mentions .
12767	Given a rating and a list of tokens return the index of the matched token .
12768	Given a stream item and an aligner_data dictionary find all tokens that match the given aligner_data .
12769	Creates a new ner . xml file from a clean - visible path .
12770	Align i_chunk with ner_xml_path with o_chunk
12771	Terminate the child process .
12772	Multiply p by n .
12773	Fix email addresses in text .
12774	generate strings identified as sentences
12775	make a sortedcollection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to unicode .
12778	Create a cleansed file from a chunk .
12779	Create an NER file for a tagger .
12780	Remove punctuation and whitespace from a string .
12781	Align a chunk with a ner file .
12782	Make all paths relative to the current working directory .
12783	Instantiates the streamcorpus pipeline from the given configuration .
12784	Generate john - smith - corpus chunks .
12785	Re - based make clean visible .
12786	Make html clean visible .
12787	Make clean_visible_file from i_chunk to clean_visible_path
12788	Remove punctuation and whitespace from a string .
12789	Main function of the script .
12790	try to load a function from a module
12791	Load external Stages from a file .
12792	Load the Stages from a module .
12793	Initialize a stage with the given configuration .
12794	Read a sequence of bytes from a stream .
12795	Return True if href should be included in the URL .
12796	Create a list of Label objects for the given offset type .
12797	yield all file paths under input_dir
12798	Get a generator of all tasks .
12799	Get a random available row .
12800	Yield tokens from the given sentence .
12801	Get a list of sentences from the given ner_dom .
12802	Decorator to retry a function .
12803	return True if okay raise Exception if not
12804	Get the bucket from the configuration .
12805	Decode data into a streamcorpus . Chunk object .
12806	Get a single chunk from a bucket .
12807	Convert a stream_id to a kvlayer key .
12808	Convert a kvlayer key to a stream id .
12809	Generate a key for a stream item .
12810	Entry point for the command line tool .
12811	Build the command line argument parser .
12812	Add XPATH_CHARS to the stream item .
12813	Convert a list of SIS sentences to a list of Unicode tokens .
12814	Convert a list of SIS tokens to a list of character offsets .
12815	Convert a list of character offsets to a list of XpathRanges .
12816	Add an element to the document .
12817	XPath representation of the piece .
12818	Return the index of the text element .
12819	Iterate over all descendants of the given element .
12820	Select elements from an XML tree .
12821	Select elements with the given name .
12822	Select elements that match the given regular expression .
12823	Select an attribute from an XML element .
12824	Returns an iterator over the following siblings of the given element .
12825	Make a pretty - printed representation of the given XML element .
12826	Call the inkscape command .
12827	Export an input file to an output file .
12828	Convert SVG file to PDF file .
12829	Convert an SVG file to a PNG file
12830	Returns a Jinja2 Environment for the given file path .
12831	Set up the template file .
12832	Fills the file with the contents of the document .
12833	Saves the content of the template to a file .
12834	Create a Document instance from a template file .
12835	Replace all SVG characters in the contents of the document .
12836	Render the document to an SVG file .
12837	Render the template to a PDF file .
12838	Parse an XML source with an expat handler .
12839	Parse an HTML document and return the first element .
12840	Return the HTML fragment of the given source string .
12841	Insert text data at the end of the document .
12842	Insert node before refNode .
12843	Return a copy of this element .
12844	Execute the command .
12845	Return a string representation of the given node .
12846	Insert a child at the given index .
12847	Parse config file .
12848	Get Google API credentials .
12849	Create a dictionary of datetimes for an event .
12850	Create a Google calendar event .
12851	Main entry point .
12852	Get the extension of a file .
12853	Add extension if needed .
12854	Get a temporary file .
12855	Remove all files with the given extension from workdir .
12856	Convert csv to json
12857	Replace a string in a file .
12858	Parses the HTML .
12859	Check the next sibling of a tag .
12860	Create italic tag .
12861	Create strong tag .
12862	Create underline tag .
12863	Parse the attributes of a tag .
12864	Clean line breaks from a tag .
12865	Parse the href and return the query
12866	Parse an attribute .
12867	Translate key values in a dictionary .
12868	Return a JSON string representation of the object .
12869	Find all files in a folder that match a regular expression .
12870	Concatenate a sequence of strings .
12871	Check if full starts with part .
12872	Return True if full contains part .
12873	Yield the length of a string .
12874	Convert a sequence into a boolean .
12875	Iterate over the elements of a sequence .
12876	Lookup a key in a table .
12877	Replace all characters in svg_content with their corresponding XML entities .
12878	Check if svg_file is a string or SVGFigure .
12879	Merge two SVG files .
12880	Merge multiple PDFs into a single PDF file .
12881	Embed font files to SVG .
12882	Embed a font file to an SVG file .
12883	Check that all inputs are of the correct type .
12884	Check that the provided function is callable .
12885	Recursively calls the function recursively .
12886	Create a Jinja2 input from an option dictionary .
12887	Recurses through a list of options and adds them to the output list .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize an XPath expression into a list of tokens .
12892	Change the encoding of an XML file .
12893	Save a VCard string into a QR Code file .
12894	Launch an input . mdp file .
12895	Call a command with the given arguments .
12896	Convert a LaTeX file to a PDF .
12897	Returns a list of all the options of the given psy .
12898	Transform a geometry to a new spatial reference
12899	Create an ogr . Geometry object from a GeoJSON or WKB geometry .
12900	Expand a sequence of integers into a sequence of integers .
12901	Return the intersection of this envelope and another .
12902	Checks if this Envelope intersects the given Envelope .
12903	Return a polygon representation of the ring .
12904	Create a new instance from a ZNM matrix .
12905	Write the dataframe to a file .
12906	Select rows from the table according to the given condition .
12907	Return the table at the given nuclei .
12908	Return the intersection of this table and another table .
12909	Return a new table with rows in self but not in table .
12910	Returns a copy of the vector where each element in the vector is odd and each element is even even .
12911	Return a new matrix where each element in the matrix is an even or odd number .
12912	Return a new matrix where each element in the matrix is even even even .
12913	Return a new table with all rows in the table relative_to .
12914	Calculate the mean square error of the data .
12915	The binding energy .
12916	Convert from s to n .
12917	S1n operator .
12918	Convert from s to p .
12919	Return the s1p transformation .
12920	Returns a Table with the values derived from the given formula .
12921	Run a function in a db session .
12922	Derives the key from the master password .
12923	Bootstrap a new database .
12924	Search for domains by name .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract HBSE messages from a file .
12928	Convert a path to a VSIPREFIX .
12929	Get the SRID of the EPSG .
12930	Entry point for the script .
12931	Initialize logging .
12932	Update a file from a URL .
12933	Returns a dictionary of all available drivers .
12934	Returns an ImageDriver instance for the given path .
12935	Convert a geometry to an array .
12936	Rasterize a layer .
12937	Open a GDAL Raster from a file - like object .
12938	Create a new GDAL . Image instance from bytes .
12939	Copy a raster to another location .
12940	Returns a dictionary of options and their values .
12941	Create a new GDAL Raster object .
12942	Set the GeoTransform to use .
12943	Read an array from the file .
12944	The envelope of the raster .
12945	Get the image driver .
12946	Create a new raster .
12947	Returns a ~numpy . ma . MaskedArray
12948	Return the value of the NoDataValue attribute of the element .
12949	Wrapper around ds . ReadRaster .
12950	Resample this image to a new size .
12951	Save the image to a file .
12952	Set the projection of the object .
12953	Warp the raster to a spatial reference .
12954	Calculate the chunk length for the given alph_len .
12955	Lookup the alphabet for the given character set .
12956	Encode the chunk at the given index .
12957	Convert a chunk to a long value .
12958	Get chunk from data .
12959	A decorator that caches the results of a function .
12960	Return a compiled regular expression for the given file .
12961	Normalizes a date format .
12962	Detect the timezone of the current locale
12963	Convert the object to a dictionary .
12964	Activate pdb hook .
12965	Return an emphasis representation of an object .
12966	Handle jobs from the server .
12967	Main worker function .
12968	Run a worker pool .
12969	Sets the classification of this OrderFulfillment .
12970	Send a message to the link .
12971	Turn on a light .
12972	Turn on switch .
12973	Turn on with brightness .
12974	Turn off a device .
12975	Send all messages in the queue .
12976	Send a reliable message to the link .
12977	Create a CMMH adapter for the given object .
12978	Sets the nature of this OrderFulfillment .
12979	Update the configuration with the given dictionary .
12980	Reset all options to their default value .
12981	Set the config files .
12982	Iterate over all options and their values .
12983	Get the default values for all options .
12984	Create the config file at the given index .
12985	Update a configuration dictionary .
12986	Read the configuration from a TOML file .
12987	Read configuration files .
12988	Return a list of option names for the given option .
12989	Return a list of all sections .
12990	Helper function for _cmd_opts_solver .
12991	Add options from opts_dict to parser .
12992	Build an argparse . ArgumentParser .
12993	Parse command line arguments .
12994	Helper function for zsh comp command .
12995	Complete a zsh comprehension .
12996	Return a list of bash comprehension commands .
12997	Run a complete command on the given path .
12998	Start a new master .
12999	Called when a new connection has been made .
13000	Receive a JSON response from the server .
13001	Called when the connection to the worker is lost .
13002	Called when a job is loaded .
13003	Called when a response has been received .
13004	Close the job .
13005	Run a list of jobs .
13006	Close the connection to the server .
13007	Change the state of the future .
13008	Add a result to the result set .
13009	Wait for the future to be complete .
13010	Load the next job from the queue .
13011	Mark the job as done .
13012	Add a result to the result set .
13013	Cancel all active jobs .
13014	Wait for all active jobs to finish .
13015	Distribute jobs to the job_sources dictionary .
13016	Add a list of jobs to the queue .
13017	Get a job from the queue .
13018	Return a job back to the pool .
13019	Add a result to a job .
13020	Called when the job set is done .
13021	Close the connection .
13022	Uniquify a list .
13023	Check if an object matches a regular expression .
13024	Return a list of entries that match the given filters .
13025	Get the EC2 region .
13026	Filter a list of entries based on a list of filters and exclude .
13027	Get the public DNS name of a host .
13028	Create an instance from a dictionary .
13029	Get the value of an attribute .
13030	Sort a list of entries by an attribute .
13031	Return a string representation of the table as a line .
13032	Create an instance from a boto instance .
13033	Return True if this query matches the given filter .
13034	Display the IP address .
13035	Render a list of entries as a table .
13036	Add a timestamp to the event dict .
13037	Setup logging handler .
13038	Create a structlog logger .
13039	Setup a Celery application .
13040	Get information about a worker .
13041	Remove a job from the queue .
13042	Create a switch configuration option .
13043	Return the configuration section of the config file
13044	Set a configuration dictionary from a list of strings .
13045	Command handler for config commands .
13046	Create complete files in the given path .
13047	Render a list of columns .
13048	Render a single row .
13049	Render a table .
13050	Prepares the rows in a table .
13051	Creates a function that colorizes the given text .
13052	Get a color from a string .
13053	Generate a random color .
13054	Prompt the user for input .
13055	Check if username and password are valid .
13056	Check if a token is valid .
13057	Decorator for resources that require a token authentication .
13058	Check if a process is running .
13059	Import an object from a module .
13060	Get the current IP address .
13061	Make a request to the given URL .
13062	Prepare post parameters for POST request .
13063	Serve a DNA server .
13064	Render the template with the given attributes .
13065	Run a command and stream it output to stdout .
13066	Stream a list of command dictionaries .
13067	Stream all the commands in a list of dictionaries .
13068	Calculate the number of network days between two dates .
13069	Get the path to a command .
13070	Build the ssh command to use .
13071	Build the SCP command for a given host .
13072	Copy a list of entries to a local file .
13073	Copy files from a list of entries to a local path .
13074	Run a command on a list of hosts .
13075	Connect to an entry via SSH .
13076	Load a LSI profile .
13077	Create a LsiProfile object from command line arguments .
13078	Add a relationship to a part .
13079	Return a list of related objects of the given type .
13080	Load the relationships from the given data source .
13081	Add a Content - Type part .
13082	Load a part from the given data .
13083	Find the item with the given name .
13084	given an element parse out the proper ContentType
13085	Parses the input string and returns a list of Chatl objects .
13086	Builds a JWT using the provided secret key .
13087	Assign a force field to an AMPAL object .
13088	Find the maximum number of rad and npnp .
13089	Make a dictionary of force field parameters .
13090	Return the object as a byte stream .
13091	Get a list of files that start with the given name .
13092	Copy a directory from one bucket to another .
13093	Open an S3 bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all files in a directory .
13098	Returns a list of all directories in a given directory .
13099	Create a prefix for a given directory .
13100	Delete a file from the bucket .
13101	Ensure that the user is logged in .
13102	Get the loud name for the given language .
13103	Delete a directory .
13104	Return the home URL .
13105	Decorator to silence a function without a namespace .
13106	Return a breadcrumb for the project home page .
13107	Add a breadcrumb to the project home page .
13108	Calculate the energy of an AMPAL object .
13109	Calculate the internal energy of an AMPAL object .
13110	Returns a list of the number of hotspots for each leaf .
13111	Get a Keeper token .
13112	Upload an ltd repository .
13113	Check if we should skip a Travis event .
13114	Purge a key from Fastly .
13115	Register a build for a given product .
13116	Confirm that a build was successfully uploaded .
13117	Recursively update a dictionary .
13118	Entry point for ltdconveyor .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split a path into a list of paths .
13122	Find a file in a path .
13123	Get the XML editor for the given file path .
13124	Process a module node .
13125	Generate HTML for a chart .
13126	Generate HTML for a chart .
13127	Serialize dataobj into a chart object .
13128	Patch json data .
13129	Convert a JSON object to HTML .
13130	Convert a dictionary to a Pandas DataFrame .
13131	Write html to folderpath .
13132	Return a Chart class for the given chart type .
13133	Encode x and y fields .
13134	Link to a GitHub user .
13135	Infer the tarball URL from the app . json file .
13136	Create a new Happy app .
13137	Destroy an app .
13138	Decorate a class with an iterable attribute .
13139	Generate a random binary string of given length .
13140	Generate a random IPv4 address .
13141	Generate a random datetime . date from start and end dates .
13142	Get the Heroku session .
13143	Make a request to the Heroku API .
13144	Create a new build from a tarball .
13145	Check the status of a build .
13146	Generate a sequence of strings with the given prefix .
13147	A decorator that caches the result of a function .
13148	Decorator to make a function unique .
13149	Add the sub - commands to the given parser .
13150	Get the root argument parser .
13151	Get the description of the function .
13152	Get the help text of the command .
13153	Run the command with the given arguments .
13154	Encode a dataset .
13155	Get all athletes .
13156	Get the last n activities .
13157	Request the activity list of an athlete .
13158	Request the activity data from an athlete .
13159	Return the endpoint for the given athlete .
13160	Return the URL for an activity file .
13161	Make a request to the Golden Cheetah API .
13162	Create a new build .
13163	Create a URL with authentication .
13164	Generate a random title .
13165	Generate a random person .
13166	Get a random last name .
13167	Render the chart .
13168	Set the dataset .
13169	Render the chart .
13170	Check if a chart type is valid .
13171	Return the URL for the request .
13172	Open the document in a web browser .
13173	Save the image to a PNG file .
13174	Make a request to the server and return the response .
13175	Fetch an image object from the URL .
13176	Write the URL to the file - like object fp .
13177	Calculate the SHA256 checksum of the template .
13178	Returns a random amount between min and max .
13179	Decorator to set the entity_name attribute on the top class .
13180	Return the unprotected and protected claims .
13181	Return the signing keys as a JSON - ready dictionary .
13182	Unpack a metadata statement .
13183	Pack a metadata statement .
13184	Evaluate the metadata statement .
13185	Correct the federation usage of a metadata statement .
13186	Add metadata statements to the request .
13187	Parse command line arguments .
13188	Add command line arguments to an argparse parser .
13189	Apply logging options .
13190	Log a message at verbose level .
13191	Return a dictionary mapping each letter to a counter .
13192	Find anagrams in a word .
13193	Convert class name to an AMP class .
13194	Transform a timeseries to a list of y - values .
13195	Get the last value from a timeseries .
13196	Validate that a page number is an integer .
13197	Get a page of items from an iterator .
13198	Chmod a file or directory .
13199	Create an internal signing service .
13200	Create an instance of the signing service .
13201	Sign a request .
13202	Create a new resource .
13203	Update a metadata statement .
13204	Update the signature for a given location .
13205	Yields the contents of a bundle .
13206	Create a new bundle from the given data .
13207	Returns a list of urls for the given asset type .
13208	Render HTML tags for the given asset type .
13209	Generate HTML tags for all available asset types .
13210	Ensure that the given URL has a protocol .
13211	Find links to a given URL .
13212	Connect to the AMP server .
13213	Returns a list of all the modules in the project .
13214	Import the service modules .
13215	Convert a string to a list of dates .
13216	Select fields from a nested dict .
13217	Apply a date map to a document .
13218	Print a cursor to a CSV or JSON file .
13219	Print the cursor to stdout .
13220	Returns a list of all the tasks in do_tasks in dep_graph .
13221	Add default dependencies to a project .
13222	Add the defaultatypes to the project .
13223	Add default sequences to the project .
13224	Add a shot for each user in the project .
13225	This handler is called when a project is saved .
13226	Create a global shot for a sequence .
13227	Create all tasks for the given element .
13228	Called before a connection is established .
13229	Send a packet to a peer .
13230	Get a value from a config file .
13231	Decorator to register a function as a Nova process .
13232	Decorator to register a function as a Cinder process .
13233	Decorator to add a function to process event_type .
13234	Decorator to add a function to process a Glance event .
13235	Decorator to add a function to process event_type .
13236	Decorator to register a function as a keystone process .
13237	Decorator for Openstack . Heat .
13238	Add a factory .
13239	Remove a factory .
13240	Creates a connection to the specified protocol factory .
13241	Called by pika when data is received .
13242	Disconnect a protocol .
13243	Call a remote command .
13244	Create a multiplexed AMP connection .
13245	Called when an AMP connection is made .
13246	Called when data has been received .
13247	Send data to the device .
13248	Called when the connection is lost .
13249	Returns the protocol for the given connection identifier or raises NoSuchConnection if no such protocol exists .
13250	Called when data is received from the remote device .
13251	Close a connection .
13252	Return a string centered on the terminal .
13253	Print a clock on the right .
13254	Return a string representation of a version number .
13255	Identify the unit framework for the given target unit .
13256	Assert that the given value is convertible to the given target unit .
13257	Add padding to data_to_pad .
13258	Unpad the data to the specified block size .
13259	Sign a request using the self - signer .
13260	Gather metadata statements for a given context .
13261	Pretty print anagrams .
13262	Create an argument parser .
13263	Print a list of anagrams in each word .
13264	Called when data has been received .
13265	Called when a type is unregistered .
13266	Create a function stub for a remote function .
13267	Ping a remote call .
13268	Return the regular expression used to match a command .
13269	Create an AmpList from a string .
13270	Return a string representation of this list .
13271	Verify that the metadata statement is valid .
13272	Parse a remote response .
13273	Dump a database to a file .
13274	returns a list of all databases on this server
13275	Get all local files in a directory .
13276	Synchronize the contents of a folder .
13277	Decorator for functions that require tokens .
13278	Login the user .
13279	Build a CLI from a path and package .
13280	Creates a new Fridge instance and closes it .
13281	Load the root JSON from the file .
13282	Generate a self - signed JWT using the given keyjar .
13283	Generate a JWT for a signed request using the given keyjar .
13284	Decorator to register a function as a library .
13285	Load all . py files in the test directory .
13286	Entry point for librarian tests .
13287	Return the score of a given letter .
13288	Calculate the score of a word .
13289	Get a list of words .
13290	Return True if word is a valid Scrabble word .
13291	Find the best answer for a query .
13292	Run the command line tool .
13293	Called when a string is received .
13294	Returns the command and responder function for a given command name .
13295	Parse the request values from the command .
13296	Run the given responder with the given request .
13297	Write the response to the client .
13298	Called when the connection is lost .
13299	Build and return a JSONAMP dialect receiver .
13300	Converts a JSON string to a KeyJar object .
13301	Load a KeyJar from a JSON string .
13302	Process an event .
13303	Process a Cinder customer event .
13304	Process an event .
13305	Process an event .
13306	Process a swift event .
13307	Process a customer event .
13308	Process an event .
13309	Serve the web application .
13310	Print msg to stdout .
13311	Print msg to stderr .
13312	Register a command subclass .
13313	Register a command subclass .
13314	Returns the string representation of the given value .
13315	Create an argument from a string .
13316	Update the completers dictionary with the values from cdict .
13317	Connect to Ternya .
13318	Initialize the MQ connection .
13319	Initialize the service modules .
13320	Init the nova consumer .
13321	Init cinder consumer .
13322	Init the neutron consumer .
13323	Create a consumer for Openstack . Glance .
13324	init heat consumer
13325	Enable notification for an Openstack component .
13326	Get information about a song .
13327	Download a song into a mp3 file .
13328	Execute the instruction and return the result .
13329	Return the value of a global variable .
13330	Call a function from the stack .
13331	Dump a database to a file .
13332	Render a Ditaa image .
13333	Called when the application exits .
13334	Run the application .
13335	Temporarily change the current working directory .
13336	Copy a directory or directory tree to a new location .
13337	Set the current debugger .
13338	Get the mtime of a file .
13339	Check if an item has changed since the last time it was created .
13340	Synchronize all files in the directory .
13341	Remove all data from the cache .
13342	Scrape a feed from a URL .
13343	Download the image to the cache directory .
13344	Check if the image has changed since the last time it was last modified .
13345	Returns a template . Node subclass .
13346	Find the filename line number and function name of the caller .
13347	Get the defining component of the given PE .
13348	Entry point for the ooaofooa script .
13349	Find a symbol in the stack .
13350	Return True if pe_pe is contained in root .
13351	Return True if the PE is global False otherwise .
13352	Get the name of the data type .
13353	Get the names of the attributes that are related to r_rgo and r_rto
13354	Create an Enum object from an EDT .
13355	Create an interpretation function for a bridge .
13356	Create an EE object from an external entity .
13357	Create a function that runs the interpret function on the given metamodel .
13358	Make a constant from a CNST_SYC object .
13359	Create a classmethod for an operation .
13360	Create a property for a derived attribute .
13361	Create a metaclass for the given object .
13362	Make a simple association .
13363	Make a linked association .
13364	Create an association from a relationship .
13365	Create a Domain from a BP model .
13366	Perform a work on a socket .
13367	Send an ACCEPT message to the server .
13368	Reject a message .
13369	Send an exception to reply_socket .
13370	Send a call and wait for it to finish .
13371	Establish a connection to a worker .
13372	Dispatch a reply .
13373	Guess the type of a value .
13374	Deserialize a value from the given type .
13375	r \ )
13376	r \ )
13377	Get a single feature from the index .
13378	Get one or more content from the index .
13379	Put items into the index .
13380	Delete a document from the index .
13381	Delete all mappings from the index .
13382	Delete the index .
13383	Perform a scan on the database and return a generator of DIDs and FC objects .
13384	Return a generator that yields the ids of the objects in the specified key range .
13385	Scan for features with a given prefix .
13386	Return a generator of all the IDs of all features with the given prefix .
13387	Perform a fulltext scan on the database .
13388	Perform a fulltext scan on the database .
13389	Perform a keyword scan on the database .
13390	Return an iterator over the IDs of all keywords in a query .
13391	Scan for ids in a given index .
13392	Convert a list of feature names into a list of feature names .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Returns the total number of features in a dictionary .
13400	Count the number of bytes that match a set of predicates .
13401	Return a human - readable string representation of a FeatureCollection .
13402	Process docopt options .
13403	Default formatter for errors .
13404	Return a pretty representation of an instance .
13405	Return a string representation of a unique identifier for an instance .
13406	Check the uniqueness constraint of a model .
13407	Check the integrity of a link .
13408	Check the integrity of a subtype .
13409	Return a function that returns the index of the given features .
13410	Convert an integer to a byte string .
13411	Put a list of items into the table .
13412	Delete all data from the database .
13413	Scan the table for the given key ranges .
13414	Scan for IDs in a set of key ranges .
13415	Scan the index table for the given value .
13416	Add a value prefix to an index .
13417	Scan the index for a prefix and return the key .
13418	Helper function for _index_scan_prefix .
13419	Define an index .
13420	Put a value in the index table .
13421	Put a raw value into the index table .
13422	Iterate over the keys for a given index .
13423	Return the index with the given name .
13424	Check pypi package name against pypi registry .
13425	Add a direction to a value .
13426	Get the name of a type .
13427	Get the refered attribute .
13428	Build a simple type element from a core data type .
13429	Builds an XML element for an enum type .
13430	Builds an XML element representing a complex type .
13431	Build a simple type element for a user .
13432	Builds the type of the given S_DT .
13433	Build an XML element representing a complex type .
13434	Builds an XML element representing a complex type .
13435	Builds the XML Schema for the given m element .
13436	Prettify an XML string .
13437	Fetch stolen bikes .
13438	Set node . position and node . character_stream .
13439	Decorator to track the production of a function .
13440	r \ = =
13441	r ! =
13442	r \ - >
13443	r \ > =
13444	r \ > =
13445	r \ =
13446	r \ .
13447	r \ [
13448	r \ [
13449	r \ ?
13450	r \ >
13451	r \ >
13452	r \ +
13453	Create a new queue .
13454	Delete a queue .
13455	List all queues .
13456	List all exchanges .
13457	Purge a queue .
13458	Create an email message .
13459	Read the image from the tesseract server .
13460	Check if the text is visible .
13461	Entry point for xtuml .
13462	Serialize a value to the given type .
13463	Serialize an association object into a string .
13464	Serialize a class into a CREATE TABLE statement .
13465	Entry point for n - gram search .
13466	Search for elements that match the given query .
13467	Partition a collection according to a condition .
13468	Run the server .
13469	Add bidi context variables to the context .
13470	Find a link between two objects .
13471	Return a formalized representation of this link .
13472	Compute the lookup key for the given instance .
13473	Compute the index key for the given instance .
13474	Return the type of an attribute .
13475	Create a new instance with the given arguments and keyword arguments .
13476	Return an iterator over all instances in the storage .
13477	Define a new class with the given attributes .
13478	Send a message to the broker .
13479	Receive a message from a ZMQ socket .
13480	Run vulture and print out the dead code .
13481	Parses email addresses from a list of strings .
13482	Create an RPC function .
13483	Get the rpc spec table for the given app .
13484	Normalize postcode .
13485	Return the next value .
13486	Accept an S_SYS instruction .
13487	Accept a C_C instruction .
13488	Accept the PE_PKG AST node .
13489	Get the brightness of the image .
13490	Return True if the expression matches the pattern .
13491	Find a match in the document at the given position .
13492	Returns the extra selection for the given character .
13493	Called when the cursor position has changed .
13494	Return the exc_info tuple .
13495	Create an inputhook for Qt4 .
13496	Get a mapper instance .
13497	Decorator to add a URL pattern to the router .
13498	Decorator for registering a URL route .
13499	Add a function to the data store .
13500	Add a function to the registry .
13501	Call a method on a URL .
13502	Add the input buffer to the history .
13503	Called when the up button is pressed .
13504	Return True if the down button is pressed .
13505	Find the previous occurrence of substring in the history .
13506	Find the next occurrence of substring in the history .
13507	Handle an execute reply message .
13508	Return True if history is locked .
13509	Return the value of the edit at the given index .
13510	Set the history .
13511	Store the current edits in the history .
13512	Event handler for time to close .
13513	Build the Record Collection from a DataFrame .
13514	Convert a collection into a pandas dataframe .
13515	Wrapper around turntable . spin . batch .
13516	Set the attributes of the object .
13517	Subscribe to the topics .
13518	Log a message .
13519	Merge a list of lists into a sorted list .
13520	Iterate over a remote iterator .
13521	Convert a notebook from v1 to v2
13522	Return the platform supported by the current platform .
13523	Get the importer for the given path item .
13524	Return a StringIO object .
13525	Parse a version string into a tuple .
13526	Check if we should override setuptools .
13527	Add a distribution to the distribution list .
13528	Find all the plugins in the given environment .
13529	Get the path to a cached archive .
13530	Parse an entry point .
13531	Parses the package info from the metadata file .
13532	Compute the dependencies of the package .
13533	Parse a filename into its name and format .
13534	Collapses leading whitespace from the header and the text .
13535	Remove the event filter from this widget .
13536	Handles the show event for the completion widget .
13537	Returns the current text cursor .
13538	Update the currently selected item .
13539	Register the admin site for all models in the application .
13540	Get a list of disk partitions .
13541	Get system CPU times .
13542	Return a list of the system times per CPU .
13543	Read raw data from stdin without blocking .
13544	Read raw block from stdin .
13545	Update tab bar visibility .
13546	Create a new tab with the current kernel .
13547	Add a new tab with a given frontend .
13548	Add an action to the menu
13549	Creates a function that executes the magic and returns the result .
13550	Populate all magic menu .
13551	Close all tabs and stop all kernels
13552	Generate a password .
13553	Check if a password is correct .
13554	Render an editable boolean cell .
13555	Return an indented short title for the given item .
13556	Collect the editable_boolean_field and editable_boolean_result functions .
13557	Toggles the boolean value of an object .
13558	If settings . TREE_EDITOR_OBJECT_PERMISSIONS is True check if the user has permission to change the object .
13559	If TREE_EDITOR_OBJECT_PERMISSIONS is True check if the user has permission to delete the object .
13560	Add n child nodes to the graph .
13561	Make a bintree graph from a list of levels .
13562	Submit the given jobs to the graph .
13563	Check that all nodes in the tree have been completed .
13564	Make a color table from templates .
13565	Return a copy of this color scheme .
13566	Add a color scheme to the table .
13567	Set the active color scheme .
13568	Return the path to the site - packages directory .
13569	Handle iopub messages .
13570	Handle a request from the stdin .
13571	Wait for the kernel to exit .
13572	Set the style to use .
13573	Get the format for the given token .
13574	Get the format from the document .
13575	Returns a QTextCharFormat object for the given token and style .
13576	Find a command in a list of paths .
13577	Normalize a path .
13578	Check that the given attribute is a valid namespace package .
13579	Check if value is a valid entry point map .
13580	Return True if the last line of the source string is a blank line .
13581	Return True if src ends with two blanks .
13582	Replace assign_system with get_ipython . getoutput .
13583	Transform assign_magic to get_ipython . magic .
13584	Remove the classic prompt from the given line .
13585	Transform an IPython prompt line .
13586	Push a list of lines onto the stack .
13587	Return True if push accepts more lines .
13588	Find the number of spaces and whether the line should be indented or not .
13589	Store the given lines in the buffer .
13590	Reset the source to its original state .
13591	Handle cell magic .
13592	Append lines to cell_magic_parts .
13593	Transform a single cell .
13594	Push a line to the input splitter .
13595	Initialize the observers .
13596	Post a notification .
13597	Returns a set of all registered observers for the given notification type and sender .
13598	Add an observer for a given type and sender .
13599	Create a new background job .
13600	Update the status of the jobs .
13601	Print the results of a group .
13602	Flush all jobs from a group .
13603	Return the new status of the job .
13604	Update the status of the process .
13605	Initialize the background job .
13606	Insert the value at the given index .
13607	Return a copy of the object .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the current working directory .
13612	Move to a random state .
13613	Calculate the energy of a state .
13614	Return a dictionary of default values for the given keys .
13615	Check the existence of the table .
13616	Convert a list of values to a dictionary .
13617	Render an SQLAlchemy expression for the given check .
13618	Print a warning message to stderr .
13619	Parse the config file .
13620	Convert a list of rows into a table .
13621	Creates a link with text or url .
13622	Render a javascript file .
13623	Return a link to a CSS file .
13624	Create an image tag .
13625	Return the difference between value and arg .
13626	Multiply value by arg .
13627	Divide value by arg .
13628	Returns the mod of the given value with the given argument .
13629	Return the verbose name of an object .
13630	Split a line from the user input .
13631	Add command line options to the parser .
13632	Add a value to the builtin dictionary .
13633	Remove a built - in variable .
13634	Deactivate the interpreter .
13635	Find the name of a URL in the index .
13636	Return a generator that yields links with explicit rels .
13637	Convert a string to a list of strings .
13638	Run the coverage script .
13639	Add an action to a dash .
13640	Append the action code for the given option .
13641	Parse command line arguments .
13642	Print coverage help .
13643	Handle the help command .
13644	Check if the command line arguments are valid .
13645	Execute a Python script .
13646	Print information about the coverage .
13647	Unserialize an object from a list of buffers .
13648	Set the display hook .
13649	Log uncaught exceptions raised by a function .
13650	Return True if url is a valid URL .
13651	Validate a URL .
13652	Validate a URL container .
13653	Pull a value from the user namespace .
13654	Select n random ports .
13655	Creates a remote function from a view .
13656	Create a parallel version of a function .
13657	Map a sequence of sequences and return the result .
13658	Get the last n lines from the readline history .
13659	Set the auto - indent feature .
13660	Initialize logstart command .
13661	Save sys module state .
13662	Restore sys module state .
13663	Register a function to be called after the command is executed .
13664	Create a new main module .
13665	Cache a module s namespace .
13666	Initialize the user namespace .
13667	Return a list of all namespaces referenced by this module .
13668	Reset the state of the module .
13669	Remove a variable from the display hook .
13670	Reset selective variables to their default values .
13671	Push a set of variables onto the stack .
13672	Return a dictionary of information about an object .
13673	Return a Struct object for the given name .
13674	Find a Struct object by name .
13675	Inspect an object .
13676	Initialize the history manager .
13677	Called when an exception is raised .
13678	Show the traceback of an exception .
13679	Print traceback to stdout .
13680	Show the traceback of a syntax error .
13681	Insert the current line before the next line .
13682	Completes the given text .
13683	Set a custom completer .
13684	Set the global namespace and global namespace of the current frame .
13685	Run a line magic function .
13686	Find a magic by its name .
13687	Define a macro .
13688	Run a command and return its exit code .
13689	Auto - rewrite input .
13690	Return a dictionary of user - defined variables .
13691	Return a dictionary of user - defined expressions .
13692	Evaluate an expression and return the result .
13693	Try to open a file for safe execution .
13694	Calls run_cell_magic with a cached cell magic body .
13695	Run a single cell .
13696	Run the given AST nodes in the given cell .
13697	Enable pylab .
13698	Expand variables in a string .
13699	Create a temporary file and store it in self . tempfiles .
13700	Extract the input lines from the history .
13701	Find the code for the given target .
13702	Called when the process exits .
13703	Broadcast a message to a sender .
13704	Send a message to one or more targets .
13705	Decorator to skip the test if the skip_condition is True .
13706	Mark a function as skipped due to known failure .
13707	Decorator to mark functions as deprecated .
13708	Return a list of all profiles in a directory .
13709	Return a list of all bundled profiles .
13710	Find the distribution that matches the given request .
13711	Run a command and wait for its completion .
13712	Returns the full path to a file or None if it doesn t exist .
13713	Read the next line and return it .
13714	Send data to the child process .
13715	Send an interrupt to the child .
13716	Recompile unicode regexes as bytes regexes . Overridden in subclass .
13717	Expects a pattern to be matched .
13718	Return the index of the first occurrence of an item in the buffer .
13719	Recompile bytes regexes as unicode regexes .
13720	Search for the best matching string in the buffer .
13721	Search for the best match in the buffer .
13722	Creates a listener that logs the progress of a progress monitor .
13723	Unpack a directory .
13724	Print a message to stdout or stderr .
13725	Get the last error from the log .
13726	Execute a command and return the output .
13727	Find the source code for the given file .
13728	Return a list of the arcs that have been executed .
13729	Return a list of arcs that have not been executed .
13730	Returns a list of unpredicted arcs .
13731	Return a list of branch lines .
13732	Return the total number of branches .
13733	Return a mapping of arcs to their missing branch lines .
13734	Return a dictionary containing the number of exits and the number of missing branches .
13735	Set the precision .
13736	Returns the number of covered statements .
13737	Returns a string representation of the PC covered value .
13738	Highlight text in haystack using a list of needles .
13739	Highlight a string according to a set of keywords .
13740	Highlight words in a string .
13741	Run a function in a separate thread .
13742	Unquote the ends of an input string .
13743	Indent a string by nspaces spaces .
13744	Return a marquee of text .
13745	Convert a string to a screen format .
13746	Remove leading and trailing whitespace from a string .
13747	Wrap paragraphs in a list of newlines .
13748	Find the optimal number of columns and width for a list of rows .
13749	Get a value from a list or return a default value if the list is empty .
13750	Compute an item matrix from a list of items .
13751	Return a new SList with the given fields .
13752	Build the command line arguments for the kernel .
13753	Setup tunnels for SSH connections .
13754	Pretty print an object .
13755	Pretty print an object .
13756	Get the mro of an object .
13757	Pretty print an object .
13758	Create a printer function for a sequence of objects .
13759	Create a printer function for a dictionary .
13760	Pretty print a super class .
13761	Pretty print a compiled regular expression .
13762	Pretty print a type .
13763	Pretty print a function .
13764	Pretty print an exception .
13765	Register a printer function for the given type .
13766	Register a function to be called for a given type .
13767	Add a text object to the buffer .
13768	Add a breakable group to the buffer .
13769	End a group .
13770	Flush the buffer to the output .
13771	Pretty print an object .
13772	Create a color scheme table for the exception .
13773	Write a row into an Ods spreadsheet .
13774	Get the text from the clipboard .
13775	Get the clipboard .
13776	Get text from the clipboard .
13777	Returns the path to the temporary folder for building .
13778	Rekey a dictionary .
13779	Recursively extract dates from an object .
13780	Squash dates in a dictionary .
13781	Return the ISO8601 string representation of the given object .
13782	Convert a Python object to a JSON string .
13783	Check if the install_dir is an easy - install . pth directory .
13784	Write a script to the install directory .
13785	Sleep for t seconds .
13786	Create an argument parser .
13787	convert . pyx extensions to . c
13788	Send a connection request to the iopub .
13789	Build a PackageFinder object .
13790	Called when the logger s log level has changed .
13791	Return the default logger .
13792	Called when flags have changed .
13793	Print aliases help .
13794	Print the help text for all flags .
13795	Print subcommands .
13796	Print help for the configurables .
13797	Print the examples .
13798	Update the config with a new one .
13799	Initialize a sub - command .
13800	Flatten the flags and aliases .
13801	Parse command line arguments .
13802	Load a config file .
13803	Generates the configuration file for this class .
13804	Downsample k elements from an array .
13805	Format a dictionary of information .
13806	Write a message to the terminal .
13807	Called when the configuration has changed .
13808	Get the help text for the given class .
13809	Get the help text for a trait .
13810	Generate the configuration section for the given class .
13811	Clears the instance of the given class .
13812	Create an instance of the given class .
13813	Return a tuple of the failure code and the traceback .
13814	Print a message to stderr when an exception is raised .
13815	Flushes the socket .
13816	Start channels .
13817	Read data from a file - like object .
13818	Read the next line without raising an EINTR exception .
13819	Run a command in a subprocess and return the output .
13820	Split a string into a list of tokens .
13821	Decompress a DHistogram into a list of lists .
13822	Create a magics class .
13823	Record a function as a magic in a dictionary .
13824	Decorator to mark a function as a method magic marker .
13825	Decorator to register a magic marker for a function .
13826	Return a dictionary of all the documentation for all the magics .
13827	Register a class of magics .
13828	Register a function as a magic .
13829	Format a string in LaTeX format .
13830	Parse command line options .
13831	Set the default option for a magic function .
13832	Display a guiref in an IPython notebook .
13833	Create a Task object from a callable .
13834	Get information about a task with the given label .
13835	Get the callable from the task s funcinfo .
13836	Calculate the next run based on the schedule .
13837	Submit this task to the run task channel .
13838	Run the task .
13839	Run asap .
13840	Run the callable with the given number of iterations .
13841	Run the callable only once .
13842	Find the path to the url file .
13843	Open the ports for direct connections as an IPython kernel .
13844	Run all test steps in a test file .
13845	Create an interrupt event .
13846	Run the process .
13847	Filter a namespace by name and type .
13848	List all objects in a namespace that match a pattern .
13849	Check that all options in ex_op are mutually exclusive .
13850	Draw the current figure if interactive .
13851	Flush all figures to the display .
13852	Send a figure to the backend .
13853	Load an IPython extension .
13854	Unloads an IPython extension .
13855	Generate n random ports .
13856	Initialize the web application .
13857	Handle SIGINT signal .
13858	Confirm shutdown of Notebook Server .
13859	Shut down all kernels
13860	Calculate the price options for a set of paths .
13861	Replace multiple values in a string .
13862	Render a field .
13863	Launch a kernel with the given code and file .
13864	Create a zip file in the working directory .
13865	Fix version in metadata . txt .
13866	Check if an object is mappable .
13867	Get the partition of a sequence .
13868	Monkey patch pexpect . spawn .
13869	Run code from a file .
13870	Run a command from a source string .
13871	Write out the coverage report to a file .
13872	Write an XML file for the analysis .
13873	Download a file from pi . super - computer . org .
13874	Reduce a list of frequency frequencies .
13875	Given a filename and the number of digits compute the frequency of each digit .
13876	Convert a txt file to a list of digits .
13877	Given a list of digits return the frequency of each digit .
13878	Calculate the frequency of a set of two - digit values .
13879	Calculate the frequency of the given number of digits .
13880	Plot two - digit frequency frequencies .
13881	Plot one - digit frequency counts in pi
13882	Print an expression in debug mode .
13883	Reverse the given view with optional query string .
13884	Return True if prefix is a private name .
13885	Create a test suite for documentation files .
13886	Run debugging on the source code .
13887	Debug a test script . src is the script as a string .
13888	Print a debug message for a module .
13889	Get a dictionary of all the files in the hash root .
13890	Remove all the files in hashroot from the cache .
13891	Return a list of all keys in the directory .
13892	Return True if the given record is allowed .
13893	Return True if record matches any of the given matchers .
13894	Format an error and add it to the test .
13895	Create an interactive shell .
13896	Entry point for the main loop .
13897	Get new csv writer and meta writer .
13898	Prepare locale directories .
13899	Write a list of POEntry objects for each language .
13900	Write header to po file .
13901	Subscribe to a user .
13902	Initialize the command line parser .
13903	Run a python module .
13904	Run a Python file .
13905	Create a code object from a Python source file .
13906	Make code from . pyc file .
13907	Generates an HTML table from an item matrix .
13908	Set the current value .
13909	Cancel the completion of this widget .
13910	Select an index in the completion list .
13911	Move cursor up one line .
13912	Move cursor down one line .
13913	Move cursor to the left .
13914	Move cursor to the right .
13915	Update the sliding interval .
13916	Get the frequency of words in a text file .
13917	Print the word frequency counts for each word .
13918	Return a string representation of the XML document .
13919	Write the document to a file .
13920	Validates that the given pin is valid .
13921	Send a shared pin to topics .
13922	Delete a shared pin .
13923	Send a user pin .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	Get a list of all subscribed topics .
13927	Decorator to register a task as monitored .
13928	Begin a progress monitor .
13929	Context manager for a task .
13930	Context manager for a sub - task .
13931	Update the progress monitor .
13932	Create a sub - monitor .
13933	Update the progress indicator .
13934	Display a string as a page .
13935	Ensure that the build location is correct .
13936	Load a list of pyconfig files into a Config object .
13937	Load configuration from file .
13938	Read the configuration file as a dictionary .
13939	Load configuration from a dictionary .
13940	Decode command line arguments .
13941	Load configuration from command line arguments .
13942	Load the configuration from the given arguments .
13943	Parse command line arguments .
13944	Convert self . parsed_data to self . config
13945	Find a module by its name .
13946	Add a callback to be called when a stop event is received .
13947	Called when the process is started .
13948	Called when the process has stopped .
13949	Interrupt the current process then kill it .
13950	Return a list of command line arguments for the MPI program .
13951	Start the MPI launcher .
13952	Send a file to a remote host .
13953	Fetch a file from a remote host .
13954	Returns the number of engines .
13955	Start the specified number of engines .
13956	Start a WinHPC job .
13957	Return a default context dictionary .
13958	Extract the job id from the output .
13959	Write the batch script to disk .
13960	Start the job with the given number of jobs .
13961	Creates the context menu for the given position .
13962	Append a JPG to the prompt .
13963	Append a PNG image to the display .
13964	Append an SVG to the prompt .
13965	Add an image to the control .
13966	Copy an image to the clipboard .
13967	Returns the image resource for the given name .
13968	Insert an image .
13969	Insert SVG data into the document .
13970	Save an image .
13971	Called when the exit_now_changed signal is received .
13972	Initialize the environment .
13973	Rewrite the input with the given command .
13974	Send an exit message to the client .
13975	Set the next input text .
13976	Read a config file .
13977	Get a list of values from an option .
13978	Get a list of lines from an option .
13979	Set self . timid from environment variables .
13980	Set attributes from keyword arguments .
13981	Load configuration from a config file .
13982	Set an attribute from a config file .
13983	Expand user path .
13984	Set the list of delimiters to use .
13985	Split a line from the cursor position .
13986	Return a list of all keywords that match the given text .
13987	Return a list of expressions that match the given text .
13988	Greedy changed handler .
13989	Return a list of files that match the given text .
13990	Return a list of aliases that match the given text .
13991	Return a list of matches for text .
13992	Get the default arguments for an object .
13993	Completes the given text .
13994	Completes the given text with the given state .
13995	Return True if the record matches one of the tests .
13996	Return a list of records that match the given check .
13997	Extract a subdict from a record .
13998	Check if the prompt is quiet .
13999	Write the output prompt .
14000	Write format data to stdout .
14001	Log the output of the prompt .
14002	Raise an exception if the object is freezed .
14003	Convert a mysql timestamp to a Timestamp object .
14004	Called when an event loop has changed .
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the shell .
14008	Do one iteration of the loop .
14009	Publish a pyin message .
14010	Handle an abort request .
14011	Send a clear_reply message .
14012	Return a string representation of the given topic .
14013	Send a shutdown message to the iopub
14014	Add the current module to the stack .
14015	Remove sys . modules from the stack .
14016	Return an absolute path to a directory .
14017	Return True if the given file is a file or a directory .
14018	Return True if obj is a class .
14019	Check if the given path is a package .
14020	Get the package name of a Python file .
14021	Pad a label to 70 characters .
14022	Return a function that returns the last occurrence of the given regular expression .
14023	Transplant a function to a module .
14024	Return a transplanted class .
14025	Get the cpu times of the current process .
14026	Get the commandline for the process .
14027	Return a list of open file descriptors for the process .
14028	Get a list of connections for this process .
14029	Check if a user has a group .
14030	Resolve a class from its path .
14031	Calculate the percent of used and total usage .
14032	Memoize a function .
14033	Decorator to mark functions as deprecated .
14034	Login to the server .
14035	Extract the key from the URL .
14036	Ensure that the temporary directory exists .
14037	Clear temporary files .
14038	Upload a file to the GDoc .
14039	Synchronize with the PODocs repository .
14040	Download trans . csv and meta . csv from gdocs to po files .
14041	Upload POD files to GDoc .
14042	Remove all items from the gdoc file .
14043	Create a new Qt console connection .
14044	Check if the given URL is accessible .
14045	Check if a URL has a given contents .
14046	Get the HTTP response code of the given URL .
14047	Compare the content type of a URL .
14048	Compare the response code of a URL .
14049	Check that the data is valid .
14050	Clear stdout and stderr output .
14051	Find the absolute path to a command .
14052	Creates a list of CodeUnit objects from a list of Morf objects .
14053	Return the root name of the module .
14054	Return the source file for this code .
14055	Returns True if the file should be converted to a python file .
14056	Return the total seconds of a timedelta .
14057	Wait for the result to be available .
14058	Wait for a message to complete .
14059	Get a dictionary representation of the jobs .
14060	Abort the current message .
14061	Return the number of seconds elapsed since the last request was submitted .
14062	Wait for interactive tasks to finish .
14063	Republish display_pub .
14064	Wait for all outputs to be ready .
14065	Wait for the message to arrive .
14066	Return the absolute path of a file .
14067	Prepare a list of patterns .
14068	Extract the separator from a string .
14069	Find all python files in a directory .
14070	Remove the relative directory from the filename .
14071	Return the canonical filename for the given filename .
14072	Get the zip data from the given file .
14073	Return True if fpath matches any of the directories in self . dirs
14074	Return True if fpath matches one of the patterns .
14075	Map a path to a canonical filename .
14076	Start the event loop for Qt4 .
14077	Start the wx event loop .
14078	Main loop for Tkinter .
14079	Start the GTK embed kernel .
14080	Run the main loop for Cocoa .
14081	Enable a GUI eventloop .
14082	Return the Greatest Common Deviation
14083	Calculate the difference between the center eigenvalue of a matrix .
14084	Calculate the difference between the center eigenvalue of each ensemble .
14085	Create a new instance of this variable .
14086	Parse a YAML configuration file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load the config file .
14090	Initialize the profile dir .
14091	Generate the default config file .
14092	Write the file to disk .
14093	Erases all lines and arcs .
14094	Return a dictionary mapping file names to line names .
14095	Returns a dictionary of all arc names and their values .
14096	Write the data to a pickle file .
14097	Read an ARC file .
14098	Read the raw data from a pickle file .
14099	Read data from a file .
14100	Combine parallel data files .
14101	Add line data .
14102	Add arc data .
14103	Add the executed lines and arcs to the hash .
14104	Return a dictionary containing the number of lines in each file .
14105	Get lines pasted by Ctrl - D .
14106	Entry point for the main loop .
14107	Replace the line history with the string source_raw .
14108	Prompt the user for input .
14109	Edit the last syntax error .
14110	Return True if the error should be recompiled .
14111	Exit the program .
14112	Get the URL and revision from the VCS url .
14113	Create a new frontend master .
14114	Initialize colors for the given widget .
14115	Return a tuple of identity url pub_url location
14116	Convert a numpy array to a numpy rec object .
14117	Find the source code for the given object .
14118	Set the color scheme .
14119	Toggles the color .
14120	Return a string representation of the traceback .
14121	Format a structured traceback .
14122	Format a list of files and lines .
14123	Format an exception only .
14124	Show an exception only .
14125	Call the debugger .
14126	Set the formatting mode .
14127	Decorator for views that checks if the user is a superuser of the specified group .
14128	Ensure that a module is imported from a list of modules .
14129	Add a line to the code .
14130	Add a section to the code .
14131	Get a function by its name .
14132	Return the code for the given expression .
14133	Render the template with the given context .
14134	Given a value and a list of dots return the value .
14135	Render a template with the given context
14136	Return a dictionary of default formatters .
14137	Register a function for the given type .
14138	Register a function for a given type .
14139	Called when the value of precision has changed .
14140	Return a list of user - defined config files .
14141	Configure the test suite .
14142	Configure logging .
14143	Set the directory where to look for tests .
14144	Print out a page of text at the specified location .
14145	Print a string to stdout .
14146	Page the contents of a file .
14147	Get the pager command to use .
14148	Returns the start string for the given pager .
14149	Snip a string .
14150	Pretty print a basic object .
14151	Convert a latex object into a PNG image .
14152	Print a string to a PNG image .
14153	Return True if o can be printed to latex .
14154	Print a latex representation of an object .
14155	Add options to the given parser .
14156	Validate that a list is a list of strings .
14157	Validate that all keys and values in a dictionary are strings .
14158	Run the ioloop loop .
14159	Handle incoming message .
14160	Execute the given code .
14161	Send a complete request .
14162	Get information about an object .
14163	Send history request .
14164	Send a shutdown request .
14165	Flushes the buffer .
14166	Send an input reply to the client .
14167	Start the channels .
14168	Stop all channels .
14169	Return True if all channels are running .
14170	Load the connection file .
14171	Write the connection file .
14172	Launch a kernel on the local interface .
14173	Shut down the kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	Interrupt the current process .
14177	Send a signal to the kernel .
14178	Check if the connection is still alive .
14179	Returns the shell channel .
14180	Return the sub - channel .
14181	Return the HB channel .
14182	Bind a kernel to an IPython instance .
14183	Log a message at the debug level .
14184	Return a list of all registered extension classes .
14185	Execute the pre - step extension .
14186	Call the post_step method of all registered extensions .
14187	Perform the finalization of the extension .
14188	Walk an egg directory and return a generator of files and directories .
14189	Scan a module .
14190	Launch a new instance of the IPControllerApp .
14191	Save a connection dictionary to a file .
14192	load config from JSON file
14193	Load secondary config from JSON .
14194	Execute a cell in parallel .
14195	Enable autopx .
14196	Disable autopx .
14197	Run raw cell .
14198	Run tasks when a heartbeat is received .
14199	Run a task from a message .
14200	Remove task from queue .
14201	Patch the protocol so that it can be used as an agent .
14202	Patch an object s attribute if it doesn t exist .
14203	Accept a new connection .
14204	Reject a pending connection .
14205	Get a proxy agent .
14206	Called when the form is valid .
14207	Deletes the object and returns the success URL .
14208	If the user is authenticated set the user field to the request . user .
14209	Print out a report of the Morfologik code units .
14210	Check if all modules have changed since the last run .
14211	Run the editor on the given file .
14212	Fixes an error in the vim editor
14213	Get the current clipboard .
14214	Add a function to the chain .
14215	Get metadata for a given path or module .
14216	Configure the logger with the given options .
14217	Import an item from a package .
14218	Try to connect to a passwordless SSH server .
14219	Try to connect to a passwordless SSH server .
14220	Try to connect to a passwordless SSH server .
14221	Create a tunnel connection to the given socket .
14222	Open a tunnel to a remote host .
14223	Stop scheduling tasks .
14224	Unwrap an exception .
14225	Register a new engine .
14226	Unregister an engine .
14227	Handle an execute reply message .
14228	Flush all pending notifications .
14229	Flushes the results from the given socket .
14230	Flushes all control messages from the socket .
14231	Flushes all ignored control messages from the socket .
14232	Flush all messages from the iopub socket .
14233	Spin every interval seconds .
14234	Stop spinning thread .
14235	Spin down the server .
14236	Wait for one or more jobs to complete .
14237	Send an apply request to a socket .
14238	Send an execute request to the server .
14239	Get the result of one or more messages .
14240	Query the server for the status of one or more engines .
14241	Purge the results of the specified jobs from the specified targets .
14242	Get the hub history .
14243	Send a DB query to the server .
14244	Return a set of all opcodes in names .
14245	Get the byte parser .
14246	Return a set of lines that match one or more regular expressions .
14247	Parse the raw text .
14248	Return the first line of the given line .
14249	Return a set of the first lines in a list that are not in the ignore list .
14250	Parse the source as a Python source file .
14251	Return a list of all arcs in the byte file .
14252	Return a dictionary of the number of classes and their exit counts .
14253	Return a list of child parsers .
14254	Iterate over the byte and line numbers of the code .
14255	Find all statements in this parser .
14256	Return a string representation of the block stack .
14257	Split the code into chunks .
14258	Validate that all the chunks in the given list are valid .
14259	Iterate over all of the arcs in the file .
14260	Return a list of all chunks for this parser .
14261	Return a set of all arcs in this parser .
14262	Add options specific to coverage .
14263	Start the coverage process
14264	Generate the coverage report .
14265	Return True if the given file should be included in the cover package .
14266	Yield Distribution objects for the given distribution name .
14267	Open a URL with authentication .
14268	Fetch a distribution from the environment .
14269	Get the parent object of the given object .
14270	Returns the root topic of the engine .
14271	Render a template with the given context
14272	Set the configuration .
14273	Format an error .
14274	Split data by num elements .
14275	Convert a notebook to this notebook format .
14276	Convert hex color to rgb .
14277	Get the colors for the given stylename .
14278	Returns a QFont object for the given font name .
14279	Handle execute reply .
14280	Handle a history reply .
14281	Handle pyout messages .
14282	Handle a display data message .
14283	Start the channel history .
14284	Execute a file at the given path .
14285	Process an execute error message .
14286	Process an execute payload .
14287	Set default style .
14288	Edit a file .
14289	Make the in - prompt for the given number .
14290	Make a continuation prompt .
14291	Called when the style sheet has changed .
14292	Called when the syntax style has changed .
14293	Handle a response from the CloudStack server .
14294	Sign url_parameters with api_secret .
14295	Transform data to a dict .
14296	Return information about the virtual memory .
14297	Get the cpu times of the system .
14298	Get the UIDs of the current process .
14299	Get the gids of the process .
14300	Get a list of all threads in the current process .
14301	Return a list of open file descriptors for the current process .
14302	Get the current commit hash of a package .
14303	Return information about a package .
14304	Return information about the system .
14305	Return the number of CPUs on Mac OS X .
14306	Return the number of CPUs supported by the current platform .
14307	Returns the next result set or None if there is no more results .
14308	Fetch a single row from the result set .
14309	Fetch many rows from the result set .
14310	Fetch the next row from the result set .
14311	Connect to a node .
14312	Read a notebook from a JSON string .
14313	Read a notebook from a string .
14314	Return a list of reads in the given format .
14315	Write the given nb to the given format .
14316	Write a NumPy object to a file .
14317	Convert a . ipynb file to a . metadata file
14318	Load a value from a dictionary .
14319	Return True if the given name matches one of the rules .
14320	Return whether or not the given class should be included in the test case .
14321	Return whether or not the given directory should be included .
14322	Return whether or not the given file should be included .
14323	Return True if the given function should be called .
14324	Return True if the given method should be called .
14325	Return whether or not the given module should be included .
14326	Return a list of lines from a file .
14327	List all lines in a pydb file .
14328	Print a list of lines from a file .
14329	Handle pdef arguments .
14330	Calculate the conversion factor between two currencies .
14331	Convert a value from one currency to another .
14332	Calculate the return of a currency .
14333	Get the encoding of a stream .
14334	Get the default encoding for stdin .
14335	Write the connection file to disk .
14336	Initialize the heartbeat channel .
14337	Log information about the connection .
14338	Initialize the session .
14339	Initialize sys . stdout and sys . stderr .
14340	Initialize the kernel .
14341	Initialize the connector .
14342	Register with the controller .
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert a domain name to a fully qualified name .
14346	Add command line options for NoseExclude .
14347	Configure the NoseExclude class .
14348	Returns True if dirname should be included False otherwise .
14349	Return True if the extension links to a dynamic library .
14350	Call each function in a list .
14351	Call each function in reverse order .
14352	Append a function to the end of the list .
14353	Insert a function at the given index .
14354	Format the usage message .
14355	Initialize the application .
14356	Write the current process id to the pid file .
14357	Remove the pid file .
14358	Get the process id from the pid file .
14359	Construct a MagicArgumentParser from a magic function .
14360	Return the real name of a magic function .
14361	Highlights the current block of the given string .
14362	Rehighlight the given block .
14363	Set the highlighting format .
14364	Copy the current selection to the clipboard .
14365	Execute a command .
14366	Called when the prompt is finished .
14367	Check if tab is pressed .
14368	Add the copy raw action to the context menu .
14369	Filter console key press events .
14370	Insert a continuation prompt .
14371	Handle a complete reply .
14372	Set a callback to be called when an expression is executed .
14373	Handle an exec callback message .
14374	Handle an execute reply .
14375	Handle an input request .
14376	Called when the kernel has been restarted .
14377	Handle object info reply .
14378	Handle a pyout message .
14379	Handle stream message .
14380	Handle a shutdown reply .
14381	Execute a file .
14382	Interrupt the kernel process .
14383	Reset the interpreter to its initial state .
14384	Restart kernel process .
14385	Request the call tip .
14386	Completes the current request .
14387	Process an execute error message .
14388	Process the execute message .
14389	Called when the document contents change .
14390	Add a plugin to the registry .
14391	Chain the arguments to the registered plugins .
14392	Generate the results of all plugins .
14393	Call all registered plugins and return the result .
14394	Configure the plugins .
14395	Load plugins from entry points .
14396	Load all builtin plugins .
14397	Convert a LaTeX string to a PNG string .
14398	Convert a LaTeX string to HTML .
14399	Convert math to image .
14400	Check if the package already exists .
14401	Iterate over processes in the process map .
14402	Returns the percentage of idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle idle
14403	Return a dictionary representation of the current process .
14404	The name of the process .
14405	Try to guess the executable to use .
14406	Get the children of this process .
14407	Get the percentage of CPU usage .
14408	Returns the amount of physical memory that is available in the system .
14409	Return a list of memory maps .
14410	Return True if the process is running .
14411	Suspends the process .
14412	Resumes the process .
14413	Kill this process .
14414	Wait for the process to finish .
14415	Wires the kernel to the main thread .
14416	Hijack the gtk . main and gtk . main_quit functions .
14417	Check if an IP address is shadowed .
14418	Initialize prefilter transformers .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize the prefilter checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize the prefilter handlers .
14425	Register a handler for the given name .
14426	Unregister a handler .
14427	Prefilter a line info .
14428	Find a handler for the given line info .
14429	Transform a line .
14430	Prefilter a line .
14431	Prefilter lines .
14432	Instances of IPyAutocall in user_ns get autocalled immediately
14433	Allow ! and !! in multi - line statements if multi_line_specials is on
14434	Return the prefilter handler for the given line .
14435	Check if the initital identifier on the line is an alias .
14436	Handle line_info .
14437	Transform the ifun and the rest of the function call .
14438	Handle the magic command .
14439	Return an IPython magic command .
14440	Handle a single line .
14441	Handle a command line .
14442	Hides the call tip widget when the user presses enter or leave .
14443	Overloads the enter event to stop the timer .
14444	Paint the call tip label .
14445	Show call info .
14446	Show the given tip .
14447	Called when the cursor position has changed .
14448	Creates a property that gets and sets the value of a proxied attribute .
14449	Canonicalize a path .
14450	Validate an instance against a JSON schema .
14451	Returns the masked dictionary .
14452	Check if we are running in a virtualenv with no global site packages .
14453	Calculate the frequency of each word in a file .
14454	Decorator for views .
14455	Return a list of aliases to use .
14456	Define an alias .
14457	Define an alias for a command .
14458	Validate that the given alias is valid .
14459	Call an alias .
14460	Transform an alias to a command .
14461	Expand aliases .
14462	Return an astroid . section node for the auto - help directive .
14463	Reset the SGR to its initial state .
14464	Split a string into a list of actions .
14465	Returns a QColor instance for the given color .
14466	Returns the QTextCharFormat object for this font .
14467	Generate a JWT token .
14468	Wrap a function to acquire a mutex .
14469	Remove expired JWTs .
14470	Return True if the token is already used .
14471	Validate a JWT token .
14472	Creates a new semaphore with the given count .
14473	Return the common prefix of a list of files .
14474	Return True if the event should be ignored .
14475	Returns the width and height of the scroll bar .
14476	Return True if the cursor can be cut .
14477	Return True if the control can be pasted .
14478	Clear the control and prompt .
14479	Cuts the cursor .
14480	Executes the prompt .
14481	Get the input buffer .
14482	Set the input buffer .
14483	Sets the font .
14484	Pastes the current text into the buffer .
14485	Print the control .
14486	Move the cursor to the top of the prompt .
14487	Reset the font .
14488	Append a custom string to the control .
14489	Append html to the prompt .
14490	Append HTML fetching plain text .
14491	Append text to the prompt .
14492	Clears the temporary buffer .
14493	Completes the menu with the given items .
14494	Fill the temporary buffer with text .
14495	Returns True if control key is down .
14496	Creates a QPlainTextEdit or QRichTextEdit control .
14497	Create the page control .
14498	Filter page key press events .
14499	Returns the plain text of the given block
14500	Get the end cursor .
14501	Returns the column number of the input buffer cursor .
14502	Get the current line of the input buffer .
14503	Get the current prompt cursor .
14504	Get the cursor for the selection .
14505	Insert the continuation prompt .
14506	Insert html into the text cursor .
14507	Insert html and return plain text .
14508	Insert plain text .
14509	Keep cursor in buffer .
14510	Quit the keyboard .
14511	Page text .
14512	Called when the prompt has been started .
14513	Read a line from the console .
14514	Set the continuation prompt .
14515	Sets the top cursor .
14516	Show the prompt .
14517	Adjusts the scrollbars of the control .
14518	Main entry point for the metadata tool .
14519	Copy a config file to the specified location .
14520	Create a profile directory by its name .
14521	Find a profile directory by its name .
14522	Convert a cmp = function into a key = function
14523	Read a file and return its contents .
14524	Run raw_input on multiple lines .
14525	Create a temporary python file and write it to it .
14526	Close the stream .
14527	Write data to file and output stream .
14528	Add a new heartbeat handler .
14529	Add a new heart failure handler .
14530	a heart just beat
14531	Returns a list of batch_size elements from the given sequence .
14532	Convert a path to a filename .
14533	Walk a directory and yield all files matching a pattern .
14534	Display elapsed average average and estimated time .
14535	Return the elapsed average and est_end time units .
14536	Extract the wininst config from the given dist_filename .
14537	Uncaches the contents of a zip directory .
14538	Quote an argument for use with NLTK .
14539	Check for conflicts in install_dir and all_site_dirs .
14540	Set fetcher options in setup . cfg .
14541	Create the home directory if it doesn t exist .
14542	Check if a file is an archive file .
14543	Return a mutable version of obj .
14544	Creates a read - only proxy for the given object .
14545	Create a new heading cell .
14546	Create a new notebook node .
14547	Create a new notebook node with the given parameters .
14548	Return True if path is a writable directory .
14549	Unquote a filename .
14550	Return the full path to a Python file .
14551	Find a file in any of the search paths .
14552	Get the current home directory .
14553	Get the XDG_CONFIG_HOME environment variable .
14554	Get the path to the IPython working directory .
14555	Get the path to the IPython package directory
14556	Get the path to an IPython module .
14557	Check if a target is newer than any of the given dependencies .
14558	Return the md5 hash of a file .
14559	Check for old IPython config files .
14560	Update the suggestions dictionary for the given object .
14561	Get suggestions for the given object with the given size .
14562	Get the suggestions for the given object .
14563	Return the relative path to the current directory .
14564	Return a list of files matching the pattern .
14565	r Get a list of lines from the file .
14566	Read the MD5 hash of the file .
14567	Create a new hotshot profile .
14568	Print the profiling report to stream .
14569	Finalize the process .
14570	Send a HEARTBEAT message .
14571	Enable wxPython .
14572	Disable wx event loop
14573	Disable Qt4 .
14574	Enable GTK .
14575	Enable the Tkinter application .
14576	Enable pyglet .
14577	Add a wave saver to the histogram .
14578	Initialize the database .
14579	Run a SQL query with the given parameters .
14580	Get information about a specific session .
14581	Get the last n lines from the database .
14582	Get a range from a string .
14583	Get the name of the history . sqlite file .
14584	Set remark to the given session name .
14585	Reset the history to its initial state .
14586	Get a range of lines from the history .
14587	Store the output of a log line .
14588	Write the output cache to the database .
14589	Stop the process .
14590	Get the number of CPUs .
14591	Get the system CPU times per CPU .
14592	Return a list of all available disk partitions .
14593	Return a list of all available processes .
14594	Return a nice string representation of a pair .
14595	Given a list of statements and a list of lines return a formatted string .
14596	Return the current stack as a string .
14597	A decorator that caches the result of a function .
14598	Join a list of regular expressions into a single string .
14599	Remove a file from the filesystem .
14600	Update the md5 hash of v .
14601	Add profiles to self . profiles
14602	Start a cluster .
14603	Stop a cluster .
14604	Find a command in the PATH .
14605	Print stdout and stderr to stdout and stderr .
14606	Find all code units in the specified morfs .
14607	Run report_fn on each of the code units in morfs .
14608	A decorator that ensures that a function raises one of the specified exceptions .
14609	Set the current trace of the current process .
14610	Decorator to check if a function took too long .
14611	Load IPython extensions .
14612	Initialize the code .
14613	Run code from IPythonApp . exec_lines .
14614	Run all startup files in the profile directory .
14615	Run files in IPythonApp . exec_files .
14616	Run code given at command line .
14617	Run the module if it is defined .
14618	Decorator for generic methods .
14619	Find the full path to a static file .
14620	Return the contents of a data file .
14621	Escape a string .
14622	Report the coverage .
14623	Copy static report files to the local directory .
14624	Write html to file .
14625	Calculate the hash of a file .
14626	Write the index . html file .
14627	Read the status file from the given directory .
14628	Write the coverage report to a directory .
14629	Return True if lst1 == lst2 False otherwise .
14630	Get a slice of a sequence .
14631	Split a sequence into smaller chunks of size .
14632	Read configuration from setup . cfg .
14633	Read the MANIFEST . in file .
14634	Convert a glob to a regular expression .
14635	Return True if filename matches any of the patterns .
14636	Return a list of all versioned files in the current working directory .
14637	Start a new kernel .
14638	Shut down a kernel .
14639	Kill a kernel .
14640	Get the kernel with the given id .
14641	Get the ports of a kernel .
14642	Returns the notebook with the given kernel id or None if there is none .
14643	Start a kernel for a given notebook .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Creates an iopub stream for the given kernel .
14648	Creates a shell stream for the given kernel .
14649	Creates a HB stream for the given kernel .
14650	Reset one - time properties .
14651	Export html to file .
14652	Export HTML to an XHTML file .
14653	Ensure image tag is UTF - 8 encoded .
14654	Fix HTML headers .
14655	Export the document to a PNG or SVG file .
14656	Returns the unique object or None if there is no such object .
14657	Given a list of tokenized terms and a list of search fields return a query that includes the given terms .
14658	Given a query string and a list of search fields return a boolean indicating whether the query should be included or not .
14659	Returns a Q object with a date field greater than or equal to the given number of days .
14660	Returns a Q object with a date field less than or equal to the given number of days .
14661	Get the null or blank query for the given field .
14662	If CASE_INSENSITIVE_FIELDS is defined in self . model . CASE_INSENSITIVE_FIELDS remove it from fields_dict
14663	Add command line options .
14664	Validate the attributes of a method .
14665	Return True if the given method is an instance of the correct class .
14666	Rotate the ring .
14667	Monkey patch pyzmq to use XREQ and ROUTER
14668	Create a parser object from a schema URL .
14669	Return the websocket URL for this request .
14670	Reserialize a reply message .
14671	Injects a cookie message into the request .
14672	Start a heartbeat .
14673	Start the heartbeat callback if it is not already running .
14674	Stop the heartbeat callback .
14675	Load the file .
14676	Validate and return the index .
14677	Set the current block index .
14678	Edit the block at the specified index .
14679	Print the block at the specified index .
14680	Print all the blocks in the colored format .
14681	Run a method on each subject in a collection .
14682	Batch a collection of objects using the given method .
14683	Run a function in a number of threads .
14684	Run a parallel method on a collection of objects .
14685	Decorator to wrap a function with an object .
14686	Decorate a function to enter an object s attributes .
14687	Return the source code and index of a traceback .
14688	Find lines that can be inspectable at the given position .
14689	Create a countdown element .
14690	Terminate the controller and all engines .
14691	Check if the condition is met .
14692	Set the ignore attribute on the result .
14693	Call the given function with the given args and kwargs .
14694	Sync the results of a function with the client .
14695	Spin the execution of a function after it has finished .
14696	Return a list of all messages in the queue .
14697	Gets a message if there is one that is ready .
14698	Decorator to define a property on an object .
14699	Returns a tuple of all of the given fields .
14700	Parse a URL into a dictionary .
14701	Return a list of all modules in the given path .
14702	Get the list of root modules .
14703	Quick completion hook for commands .
14704	Return a list of all possible completion modules for the given line .
14705	Completer for shell commands .
14706	Completer for shell commands .
14707	Quote an XML attribute .
14708	Configure the plugin .
14709	Write an XML report to the given stream .
14710	Add an error to the error list .
14711	Add a failure to the report .
14712	Add a success test .
14713	Generate a random twobin number .
14714	Given a list of loads returns the index of the first item in the list .
14715	Register an engine .
14716	Unregister an engine .
14717	Handle stranded tasks .
14718	Dispatch a task submission .
14719	Check for tasks that have timed out .
14720	Fail the message with the given id .
14721	Try to assign a task to a job .
14722	Save the unmet job to the graph .
14723	Submit a task to the server .
14724	Handle a result message .
14725	Handle a result message .
14726	Handle an unmet dependency .
14727	Update the graph .
14728	Start the log file .
14729	Print the current state of the logging .
14730	Log a line .
14731	Write data to the log .
14732	Stop logging .
14733	Create a new worksheet .
14734	Add an object to a command chain .
14735	Add an object to the command chain .
14736	Return an iterable of objects that match the given key .
14737	Return the flat matches of the given key .
14738	Called when a directory is changed .
14739	List all notebooks in the notebook directory .
14740	Create a new notebook id .
14741	Remove a notebook id from the registry .
14742	Check if a notebook exists .
14743	Find the path to a notebook .
14744	Get the path to a notebook file by its name .
14745	Get a specific notebook .
14746	Get a JSON notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Yield tokens from a list of tokens .
14754	Generate a list of lines for each token in the source string .
14755	Load the default config file .
14756	Return a list of default classes .
14757	Parse command line arguments .
14758	Initialize the application .
14759	Initialize the interactive shell .
14760	Initialize the banner .
14761	Return a string representation of an object .
14762	Parse the name of a notifier .
14763	Set the default value of an object .
14764	Called when a trait is changed .
14765	Return a dictionary of all traits in the given class .
14766	Get the metadata for a given trait .
14767	Validate that value is a subclass of self . klass .
14768	Get the default value .
14769	Return True if all items in self are in completed or failed .
14770	Return True if the task is unreachable .
14771	Return the dependencies as a dictionary .
14772	Get the depth of a node in a tree .
14773	Print a Bintree object .
14774	Disambiguate DNS URLs .
14775	Apply a function to each element of the sequence and return the result .
14776	Validate targets .
14777	Process a monitor traffic message .
14778	Dispatch a query message .
14779	Handle a new heart .
14780	Handle a heartbeat failure .
14781	Save a task request .
14782	Process a task result message .
14783	Save an IOPub message .
14784	Handle a connection request .
14785	Register an engine .
14786	Unregister an engine .
14787	Finish the registration of an engine .
14788	Handle a shutdown request .
14789	Purge results from the database .
14790	Extract the content and buffers from a record .
14791	Get the results of a query .
14792	Get the history of a message .
14793	Query the database .
14794	Temporarily change the current working directory .
14795	Decode the output of a completed command .
14796	Run a command under the current working directory .
14797	Execute the Rscript command and return the output .
14798	Dispatch a message .
14799	Check if the message is from this session .
14800	Report the Morfologik report .
14801	Annotate a file with a cover analysis .
14802	Get the installed version of a policy .
14803	Squash unicode objects .
14804	Extract the header from a message or header dict .
14805	Check the packers and unpackers .
14806	Create a message from the message header .
14807	Signs a list of messages .
14808	Serialize a message .
14809	Send a message to a socket .
14810	Send a raw message to a stream .
14811	Receive a message from a socket .
14812	Feed idents from a list of messages .
14813	Deserialize a message from a list of bytes .
14814	Save a string as an SVG document .
14815	Writes a string to the clipboard .
14816	Convert an SVG string to an image .
14817	Create a dictionary of information about an object .
14818	Get the docstring of an object .
14819	Get the source code of an object .
14820	Get the args varargs varkw and defaults for an object .
14821	Return the call line and docstring for a function call .
14822	Find the absolute path to an object s file .
14823	Find the line number of the source code of an object .
14824	Get the definition of an object .
14825	Return the color table header .
14826	Print a message if it is not found
14827	Print the definition of an object .
14828	Print the documentation of an object .
14829	Display the source code of an object .
14830	Print the contents of a file .
14831	Format a list of fields .
14832	Display information about an object .
14833	Search for namespaces in a namespace table .
14834	Return the current twisted . internet . reactor thread .
14835	Decorator for twisted deferreds .
14836	Find the best matching string in the corpus .
14837	Return a string representation of the document .
14838	Return the XML representation of the document .
14839	Load all modules in a set of packages .
14840	Invert a dictionary .
14841	Merge two dictionaries .
14842	Convert an object to its primitive representation .
14843	Format the raw string using the given scheme .
14844	Get a list of figure objects for a set of fig_nums .
14845	Print a figure to the screen .
14846	A wrapper around safe_execfile to enable interactive mode .
14847	Select the format to use for the figure .
14848	Find the gui and backend to use .
14849	Activate matplotlib backend .
14850	Configure inline support .
14851	Activate a pylab backend .
14852	Trace the current frame .
14853	Start tracing .
14854	Stop the measurement .
14855	Start the tracer .
14856	Installation trace .
14857	Start the collector .
14858	Stop the collector .
14859	Pause all tracers .
14860	Resume all tracers .
14861	Get line data .
14862	Return a list of CompositeError objects for each RemoteError in rdict_or_list
14863	Render the traceback of an exception .
14864	Start coverage process if it is set .
14865	Return the canonical directory for a Morf object .
14866	Return the source code for the given file .
14867	Determine if a file should be traced with a reason .
14868	Check if the frame should be traced .
14869	Print a warning message to stderr .
14870	Check for Python packages .
14871	Start the collector .
14872	Called when the process exits .
14873	Add a regex to the exclude list
14874	Return the regular expression for which to exclude .
14875	Save data to disk .
14876	Combine all parallel data into one .
14877	Harvest data from source files .
14878	Calculate the analysis of a Morf - like object .
14879	Return a tuple of the filename excluded missing and formatted analysis results .
14880	Analyzes the given code unit .
14881	Report the results of the harvesting .
14882	Annotate the contents of a Morfologik filesystem .
14883	Report a Morfologik report to an HTML file .
14884	Report a Morfologik coverage report .
14885	Display a list of objects .
14886	Display a list of objects as HTML .
14887	Display a series of objects as an SVG .
14888	Display a list of objects as a PNG image .
14889	Display a list of objects in JPEG format .
14890	Display a list of objects in latex format .
14891	Display a list of objects as JSON .
14892	Display JavaScript for a list of objects .
14893	Reload data from file or url .
14894	Find a command in the current working directory .
14895	Run a command and wait for it to finish .
14896	Forward read events from an open file descriptor .
14897	Read the next line from the file descriptor .
14898	Find the launcher class .
14899	Start the cluster .
14900	Build an instance of the launcher class .
14901	Start the ioloop engine .
14902	Start the cluster .
14903	Returns a wx . PySimpleApp instance
14904	Check if the wx app is running in event loop .
14905	Start the wx event loop .
14906	Get an instance of Qt4 .
14907	Check if Qt4 is running in event loop .
14908	Start an event loop for Qt4 .
14909	Create a blank canvas .
14910	Draw a cross - section of the image .
14911	Draw a line between two points .
14912	Set the text at the given position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Get a random UUID .
14915	Get a unique key from a GET dictionary .
14916	Get the domain of a URL .
14917	Get the arguments from a URL .
