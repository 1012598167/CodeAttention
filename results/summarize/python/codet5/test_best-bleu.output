0	Convert Sina XML to a list of URLs .
1	Download a Dailymotion video .
2	Download a Sina video .
3	Prints a string with the given colors .
4	Print a log message to stderr .
5	Prints an error message to the console .
6	Prints a message to the console .
7	Detect the operating system .
8	Download a vimeo file from a Vimeo channel .
9	Get information from a ckplayer XML file .
10	Get video URL from video ID .
11	Returns a tuple of m3u_url segments_size segments_list
12	Return a legitized version of the given text .
13	Download a video from CBS .
14	Download a stream .
15	Download an acfun video by vid .
16	Match all patterns in text .
17	Parse a query parameter from a URL .
18	Get the content of a URL .
19	Send a POST request to a URL .
20	Parse a host string into hostname and port .
21	Get room id by room url key .
22	Get the title for a given topic and part .
23	Helper function for wanmen_download_by_course .
24	Download a bokecc by course topic part .
25	Check if a task instance has been queued or running .
26	Get the event buffer for the given dag_ids .
27	Get a connection to Snowflake .
28	Get AWS credentials .
29	Get the value of an extra field .
30	Copy an expert to a file .
31	Copy a table to a temporary file .
32	Upload a file to Google Cloud Storage .
33	Get the maximum partition of a table .
34	Get a connection to the MySQL server
35	Show the current state of a task .
36	Restarts the workers .
37	Get a Client instance .
38	Translate a list of values .
39	Get information about an instance .
40	Create a new instance .
41	Patch an instance .
42	Delete an instance .
43	Get information about a database .
44	Create a new database .
45	Patch a database .
46	Deletes a database from an instance .
47	Export an instance .
48	Start the SQL proxy .
49	Stop the SQL proxy .
50	Get the version of the SQL proxy .
51	Create a new connection .
52	Retrieve a connection from the database .
53	Delete a connection from the database
54	Returns a CloudSqlProxyRunner object .
55	Get the database hook .
56	Cleanup database hook .
57	Reserve a free TCP port .
58	Normalize a mlengine job id .
59	Get the error code from an exception .
60	Remove all DagRun instances from the database .
61	Delete all task instances in the DAG .
62	Set DAG s paused state to is_paused .
63	Print statistics about successful tasks .
64	Check if all tasks have been processed .
65	Invoke the Lambda function .
66	Create evaluate operations for a DataFlowPythonOperator .
67	Creates a directory at the given path .
68	Convert a string to a float if possible .
69	Convert a naive datetime to a naive datetime .
70	Make a naive datetime from a datetime object .
71	Return a datetime object .
72	Get the connection to the druid broker
73	Returns a requests . Session object .
74	Run the request and return the response .
75	Raises an exception if the response is not an HTTP response .
76	Run the request and check the response .
77	Create a new session .
78	Decorate a function to provide a session .
79	Reset the database .
80	Return a pretty string representation of an exception .
81	Returns a list of records matching the given SQL .
82	Get a pandas DataFrame from a SQL query .
83	Run an SQL query .
84	Insert rows into a table .
85	Returns a CosmosClient instance .
86	Checks if a collection exists in the database .
87	Create a new collection .
88	Checks if a database exists .
89	Create a new database .
90	Deletes a database .
91	Deletes a collection .
92	Insert a list of documents into a collection .
93	Deletes a document from a collection .
94	Get a document by its id .
95	Returns a list of documents matching the given SQL query string .
96	Get a function by name .
97	Create a new function in a location .
98	Update a function .
99	Upload a zip file to a location .
100	Delete a function .
101	Get the status of the dependencies of a task .
102	Check if dep status is met .
103	Get a list of failure reasons for a given task .
104	Parse an S3 config file .
105	Get a list of frozen credentials .
106	Get a connection to the vertica server
107	Flush the buffer to the logger .
108	Check if fileloc is a zipped file .
109	List all py files in a directory .
110	Construct a TaskInstance from this TaskInstance .
111	Starts the DagFileProcessorManager .
112	Send a termination signal to the manager .
113	Terminate the DAG processors gracefully .
114	Start the DagFileProcessorManager .
115	Start the DAG parsing process asynchronously .
116	Start the DAG parsing process .
117	Refresh the DAG directory .
118	Print file processing stats .
119	Clear nonexistent import errors .
120	Log file processing stats .
121	Set the list of new file paths .
122	Wait for all processors to finish .
123	Heartbeat the DAG parsing process .
124	Terminate all processes .
125	Create SSH connection to the remote host .
126	Create a transfer job .
127	Get a transfer job by name .
128	List transfer jobs .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancels a transfer operation .
132	Pause a transfer operation .
133	Resumes a transfer operation .
134	Wait for a transfer job to complete .
135	Find all TaskReschedule instances for a given task instance .
136	Returns the number of open slots .
137	Runs a command and returns the output of the command .
138	Remove an option from a section .
139	Get the value of a specific section .
140	Allocate ids from a list of partial keys .
141	Begin a new transaction .
142	Commit the current state of the project .
143	Lookup a set of keys .
144	Roll back a transaction .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll for an operation to complete .
149	Export a project to a storage bucket .
150	Import a file from a storage bucket .
151	Publish a message to a target .
152	Get the hostname of the server .
153	Get the connection to the language service .
154	Analyzes entities in a document .
155	Annotate a text document with the specified features .
156	Classify a text document .
157	Returns a list of template fields for the given class .
158	Template field role .
159	Disposes the ORM connection pool .
160	Prepare the classpath .
161	Check if task_id exists .
162	Return True if the configuration variable is X - CACHECONF .
163	Convert an object to a dictionary .
164	Generator that yields chunks of items .
165	Reduce a function in chunks of size chunk_size .
166	Chain tasks together .
167	Pretty print a list of rows .
168	Render a log filename .
169	Get a connection to the DataProcessor API .
170	Wait for an operation to complete .
171	Coerce a JSON string to a string .
172	Handle a databricks operator execution .
173	Run a pig command .
174	Fetch celery task state .
175	Return the number of tasks per send process .
176	Returns the number of tasks per fetch process .
177	Set a default value for a variable .
178	Get a connection to the server .
179	Create a new MLEngine job .
180	Get an MLEngine job .
181	Wait for a job to finish .
182	Create a new version of a model .
183	Set the default version of a model .
184	List versions of a model .
185	Deletes a version from a model .
186	Create a model in a project .
187	Get a model by name .
188	Write batch data to DynamoDB .
189	Add plugins to sys . modules .
190	Get the default executor .
191	Returns an instance of the specified executor .
192	Called when an error occurs .
193	Get a pymssql connection .
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	Get a list of pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the current state exit code and status of an instance .
202	Get a list of messages from an instance view .
203	Get the logs for a container .
204	Deletes a container group .
205	Check if a container exists in a resource group .
206	Decorate a function so that it can be used as a decorator .
207	Construct an index_hadoop ingest query .
208	Poke a message from a channel .
209	Return a list of DagRun objects .
210	Get all task instances .
211	Get a task instance from the database .
212	Get the previous DagRun .
213	Get the previous scheduled DagRun .
214	Update the state of the task .
215	Verify integrity of a task .
216	Perform a Jenkins request and return the response body and headers .
217	Convert a context to a dict of airflow variables .
218	Conditionally trigger a controller DAG .
219	Send a metric to the server .
220	Query a metric .
221	Get a DAG by its ID .
222	Kills the given zombies .
223	Bag a DAG and all sub - DAGs .
224	Collect all dags in a folder .
225	Return a report of the dagbag stats .
226	Add days to a date string .
227	Format a dataset according to the input format .
228	Returns True if the file is a directory and False otherwise .
229	Poke a file to a directory .
230	Remove all task instances from a list of TaskInstance objects .
231	Return the number of times to try .
232	Generate a command to run a task .
233	Returns the current state of the task .
234	Record the task instance as FAILED .
235	Refresh this TaskInstance from the database .
236	Clears the XCom data from the database .
237	Get the key for this task .
238	Returns True if the task is done .
239	Returns the next retry datetime .
240	Check if we are ready to retry .
241	Check if the pool is full .
242	Get a DagRun object from the database .
243	Push a key - value pair to the XCom queue .
244	Pull one or more tasks from XCom .
245	Initialize the run context .
246	Close the connection to the wasb server .
247	Get a connection to the compute API .
248	Starts an instance in a zone .
249	Set the machine type of a zone .
250	Get an instance template .
251	Insert an instance template .
252	Get an instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create a S3 bucket .
257	Check if a prefix exists in a bucket .
258	List all prefixes in a bucket .
259	List all keys in a bucket .
260	Check if the given key exists in the given bucket .
261	Get an S3 object from a key .
262	Reads the contents of a key .
263	Select the content of an S3 object .
264	Check if a wildcard key exists in a bucket .
265	Get a key from a wildcard key .
266	Load a file from S3 .
267	Load data from a string .
268	Load bytes to S3 .
269	Load a file - like object to S3 .
270	Copy an object from one bucket to another .
271	Query Cassandra and return a cursor .
272	Convert a user type to a dictionary .
273	Sends an email to a list of recipients .
274	Get a SpeechClient instance .
275	Recognizes speech .
276	Execute the query .
277	Load plugins from a list of entry points .
278	Check if plugin_obj is a valid AirflowPlugin .
279	Skip tasks from a dag run .
280	Returns an instance of the AzureDLFileSystem class .
281	Check if a file exists .
282	Upload a file to the ADL server .
283	List files or directories .
284	Execute the Athena query .
285	Uncompress a file .
286	Execute the query using MsSqlHook .
287	Decorator for action logging .
288	Build the metrics dictionary for the given function .
289	Create a cgroup at the given path .
290	Delete a cgroup at the given path
291	Return the hostname of the given host .
292	Perform a request to the databricks API .
293	Get connection to Salesforce .
294	Make a query for all objects
295	Get a description of an object
296	Get a list of available fields for an object .
297	Get an object from Salesforce
298	Convert a column to a series of timestamps .
299	Write an object to a file .
300	Get a connection to the Mongo server .
301	Get a MongoDB collection .
302	Replace many documents in a collection .
303	Check if there is a mail attachment with the given name .
304	Retrieve a list of mail attachments by name .
305	Download mail attachments .
306	Get all attachments with the given name .
307	Get the filename and payload .
308	Put multiple records into the delivery stream .
309	Get reschedule statuses for a task instance .
310	Sends an email .
311	Sends an email using SMTP .
312	Process the result value .
313	Check if a blob exists in a container .
314	Check if a prefix exists in a container .
315	Create a blob from a string .
316	Read a file from a blob .
317	Delete a file from a container .
318	Execute the MLSD command .
319	Returns a ftplib . FTP object
320	List all files in a directory .
321	Retrieve a file from FTP .
322	Store a file in a remote path .
323	Get the modification time of a file .
324	Execute the webhook .
325	Get a FileService object .
326	Check if a directory exists .
327	Check if a file exists in a share .
328	List all files in a directory .
329	Create a directory in a share .
330	Load a file from a file path .
331	Create a file from a string .
332	Load a file from a stream .
333	Get a connection to the storage server .
334	Copy an object from one bucket to another .
335	Download a file from a bucket .
336	Upload a file to a bucket .
337	Check if an object exists in a bucket .
338	Check if a blob is updated after a given timestamp .
339	Delete a blob from a bucket .
340	List all blobs in a bucket .
341	Get the size of a file in a bucket .
342	Get the CRC32C checksum of an object in a bucket .
343	Get the MD5 hash of an object in a bucket .
344	Create a new bucket .
345	Compose one or more source objects to another bucket .
346	Check if the secondary training status has changed .
347	Returns the status message for a secondary training job .
348	Upload a tar file to S3 .
349	Configure S3 resources .
350	Check that the input S3 URL is valid .
351	Get a log connection .
352	Create a training job .
353	Create a hyperparameter tuning job .
354	Create a new transform job .
355	Create an endpoint .
356	Describe training job with log .
357	Check the status of a SageMaker job .
358	Check training status of a training job .
359	Execute the dataflow job .
360	Run migrations in offline mode .
361	Run migrations online .
362	Delete an instance .
363	Creates a new instance .
364	Create a new table .
365	Deletes a table from an instance .
366	Update a cluster .
367	Prepare the CLI command .
368	Prepare hiveconf command line arguments .
369	Load data from a pandas DataFrame .
370	Load a table from a text file .
371	Get a thrift client for the metastore connection .
372	Check for a named partition .
373	Check if a table exists .
374	Returns a pyhive . hive . Connection object .
375	Get a list of results for a given query .
376	Write the results to a CSV file .
377	Get a list of records for a given table .
378	Returns a pandas DataFrame .
379	Get an instance of ProductSearchClient .
380	Get the endpoint to send data to the robot .
381	Send Dingding message .
382	Takes a dictionary of parameters and returns a string representation of the parameters .
383	Escape special characters in a string .
384	Cast string_field to bq_type .
385	Raises a TypeError if the value is not of the expected type
386	Returns a BigQueryConnection object .
387	Get a bigquery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancel a running BigQuery query .
392	Deletes a table from a dataset .
393	Run an upsert operation on a table .
394	Grant a view access to a dataset .
395	Get a dataset by ID .
396	Get a list of datasets .
397	Insert rows into a table .
398	Execute an SQL query .
399	Executes the given operation on all of the given sequences of parameters .
400	Returns the next page of results .
401	Execute the query using Postgres .
402	Make directories in remote_directory .
403	Create a queue .
404	Sends a message to a queue .
405	Run the command and return a subprocess . Popen .
406	Remove the config file .
407	Main entry point for NVD3 - Charts generator .
408	Build HTML header .
409	Build the container .
410	Build the js chart
411	Create an x - axis .
412	Create a y - axis .
413	Get a sqlite3 connection .
414	Decorator for logging actions .
415	Decorate a view function to make it gzipped .
416	Get the last DagRun for the given dag_id .
417	Create a dagrun .
418	Send a message to the SQS queue .
419	Return a JSON response .
420	Open a file if it is a zipped file .
421	Generate a cache key for the request .
422	Get an instance of VideoIntelligenceServiceClient .
423	Annotate a video .
424	Get the API Key for Opsgenie
425	Returns a requests . Session object .
426	Execute an alert request .
427	Build an opsgenie payload .
428	Execute the alert hook .
429	Get a connection to the athena server
430	Runs a query .
431	Check the status of a query execution
432	Poll the status of a query execution .
433	Returns a pysftp . Connection object .
434	Handle rate limit exceptions .
435	Make a call to Zenesk .
436	Get partitions from a table .
437	Get a table from a database .
438	Get the location of a table .
439	Returns the status of a cluster .
440	Delete a cluster .
441	Get the list of snapshots for a cluster .
442	Restores a cluster from a snapshot .
443	Create a cluster snapshot .
444	Execute the API call .
445	Create a job flow .
446	Filter result for files with size > = size .
447	Filter result for ignored extensions .
448	Execute the query .
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a Python dictionary to a protobuf .
453	Wait for an operation to complete .
454	Get an operation by name .
455	Append a label to a cluster proto .
456	Create a new cluster .
457	Get a cluster by name .
458	Get the webhook endpoint .
459	Build the discord payload .
460	Execute the webhook .
461	Encrypt the given plaintext using the specified key .
462	Import a table .
463	Import a query into a directory .
464	Export a table .
465	Get a TextToSpeechClient instance .
466	Synthesize speech data .
467	Upload the log file to S3 .
468	Returns a list of init containers
469	Get environment variables .
470	Returns a list of kubernetes secrets .
471	Get the security context .
472	Get the extra links for a QBOL command .
473	Send a heartbeat to the scheduler .
474	Launch a new process to process a file .
475	Starts the DagFileProcessor .
476	Wait for the process to finish .
477	Exit gracefully .
478	Update import errors .
479	Process all task instances in a DAG .
480	Change the state of all tasks in a DagRun without a DagRun .
481	Get the number of concurrent tasks for the given states .
482	Change the state of an executable task instance .
483	Enqueue task instances with queued state .
484	Execute the task instances for the given states .
485	Change the state of tasks that failed to execute .
486	Process events from the executor .
487	Process a DAG file .
488	Update the status of the running tasks .
489	Manage the state of the executor .
490	Get a DagRun for the given run_date .
491	Returns a dictionary of task instances for the given dag run .
492	Execute tasks for a list of run_dates .
493	Set all dag runs to failed .
494	Execute the backfill job .
495	This method is called when a job is started .
496	Returns a Client instance for the given project .
497	Get an instance by id .
498	Apply a function to an instance .
499	Create a new instance .
500	Update an instance .
501	Delete an instance .
502	Get a database from an instance .
503	Create a database in an instance .
504	Update a database .
505	Delete a database from an instance .
506	Check if the attachment exists in the mailbox .
507	Prepare additional parameters .
508	Get a connection to the keyspace .
509	Check if a table exists in the cluster .
510	Check if a record exists in a table .
511	Build the track driver status command .
512	Submit a spark application .
513	Process spark submit log .
514	Process spark driver status log .
515	Returns a TaskRunner instance for the given local task job .
516	Wait for the job to finish .
517	Query MySQL and return a cursor .
518	Configure a csv file .
519	Write the local schema file to disk .
520	Returns a dictionary of column names to column types .
521	Map a mysql type to a mysql type string .
522	Execute the command .
523	Decorator to apply a lineage to a pipeline .
524	Return the extra json as a dict
525	Return a list of dates between start_date and end_date .
526	Scale time_seconds_arr to the given unit .
527	Return the number of days ago .
528	Initialize a role in the database .
529	Delete a role .
530	Returns a list of roles for the given user .
531	Get all permissions views .
532	Check if the user has the specified role .
533	Check if user has permission for view_menu_name .
534	Delete faulty permissions
535	Merge a permission with a view menu .
536	Update the admin permission view .
537	Synchronizes the permissions of a DAG view .
538	Create permissions for all DAGs .
539	Returns a Fernet object .
540	Check for partition .
541	Returns an instance of the hook class .
542	Poke a message from the SQS queue .
543	Get a connection to the HDFS server .
544	Get the connection to the HDFS server .
545	Check if a path exists .
546	r Upload a file to the HDFS server .
547	Get the connection to pinot broker
548	Get the URI for the connection .
549	Convert a date to a dictionary .
550	Convert a time object to a dictionary .
551	Get a redis connection .
552	Get a pandas DataFrame from a SQL query .
553	Run a SQL query .
554	Set the autocommit flag for the given connection .
555	Insert rows into a table .
556	Serialize a cell to a string .
557	Check if scheduler is healthy .
558	Get extra links for a task .
559	Get a cloudant connection .
560	Execute the webhook .
561	Get credentials from a JSON or JSON key file .
562	Returns an authorized HTTP object .
563	A decorator that catches GoogleAPICallError exceptions and raises an exception .
564	Decorate a function to set the project_id parameter to None .
565	Return a list of unfinished jobs .
566	Prepare the spark - sql command .
567	Convert a PIL image to a torch . ByteTensor .
568	Normalize a tensor by the given mean and standard deviation .
569	r Resizes an image to a given size .
570	r Padding a PIL image .
571	Crop a PIL image .
572	Resized a PIL image .
573	Flip the left - right corner of an image .
574	Perspective a PIL image .
575	Flip the top - bottom corner of an image .
576	Crop a 5x5 image to a given size .
577	Adjusts the brightness of an image .
578	Adjust the contrast of an image .
579	Adjusts the saturation of an image .
580	Adjusts the hue of an image .
581	r Adjusts the gamma of an image .
582	Rotate an image by angle .
583	Apply an affine transform to an image .
584	Convert a PIL image to a grayscale image .
585	Save a tensor as a PIL image .
586	Find all classes in a directory .
587	Read n images from a directory .
588	Read a info file into a LongTensor .
589	Read matches_file from data_dir .
590	Calculate accuracy .
591	Set up a print function for distributed output .
592	Download a URL to a file .
593	List all directories in a directory .
594	List all files with the given suffix .
595	Download a file from Google Drive .
596	Get random parameters for the image .
597	Get a random set of parameters .
598	Get random image parameters .
599	Returns a list of transforms to be applied to the image .
600	Get a random angle translations scale and shear .
601	Download the SBU_captioned photo .
602	Download training and test images .
603	Download and extract the training set .
604	Get the current theme name .
605	Autocompleter function .
606	Get the current preferences .
607	Returns a list of all available themes .
608	Returns a list of searx bangs for the given search query .
609	Parse the response from the DuckDuck Go API .
610	Custom gradient .
611	A multi - dimensional Normal layer .
612	Eight Schools - Joint log probability .
613	Benchmark for eight schools .
614	A decorator that expands the docstring of a function .
615	Return a simple name for the given distribution .
616	Build a custom random variable .
617	Create a random variable from a distribution .
618	Create a random variable from a distribution class .
619	One - step prediction .
620	Forecast the given time series .
621	Return the maximum along an axis ignoring NaNs .
622	Assert that x is finite .
623	Raises an AssertionError if x is less than rank .
624	Compute the size of an event .
625	Evaluate all - one - hot .
626	Get convert - to - tensor function from an identifier .
627	Returns the size of the mixture same family parameters .
628	Get the next interceptor in the stack .
629	Decorate a function to be intercepted .
630	A context manager for tape data .
631	Generate random toy logistic data .
632	Visualizes the decision .
633	Build input pipeline .
634	Check that map_values is valid .
635	Trace a transition function at a given number of steps .
636	Call a transition function with the given arguments .
637	Call a transition function and return the result and gradient of the transition .
638	Convert from_structure to to_structure .
639	Returns a function that transforms a log probability function .
640	Helper function for leapfrog_step .
641	The metropolis - hastings step .
642	Hamiltonian Monte Carlo .
643	Signs adaptation .
644	Create a TensorFlow instance from a config dict .
645	Convert x to a tensor .
646	Create a scale operator .
647	Returns a random walk normal function .
648	Returns a random walk uniform function .
649	Expand x to the event rank .
650	r Compute the lower bound of the entropy of each component .
651	Returns the softmax of the cat probabilities .
652	Validate outcomes logits and probs .
653	Ensure that TensorFlow Probability is installed .
654	Logistic regression .
655	Get covertype features and labels .
656	Cholesky covariance .
657	Returns the standard deviation of x .
658	Compute the variance of x .
659	Make a positive axis .
660	Squeeze x along axis .
661	Returns the z - value of x .
662	Inverse of z .
663	A semilocal linear trend transition matrix .
664	Semilocal linear trend transition noise .
665	r Sample from a Halton sequence .
666	Returns a list of random permutations for each dimension .
667	Helper function for _get_indices .
668	Calculate the base expansion size .
669	Returns the number of primes less than n .
670	Compute the epsilon of the machine .
671	Hager - Zhang model .
672	Given a value_and_gradients_function and a step_size_shrink_param return a tf . while_loop .
673	Given a value_and_gradients_function return a HagerZhangLineSearchResult .
674	Helper function for line search .
675	Returns a HagerZhangLineSearchResult for the inner bisection .
676	Prepare args for evaluation .
677	Returns a string representation of the given values .
678	A quadrature scheme for softmaxnormal gauss - hermite .
679	Create a quadrature scheme for a softmax normal grid .
680	Check that the param is a valid quadrature .
681	Given a grid and an endpoint affine determine the batch event shapes .
682	Interpolate a quadrature grid at a given location .
683	Interpolate the scale of a quadrature grid .
684	Scale a linear operator .
685	Concatenate vectors together .
686	Log - vector matrix .
687	Compute the log - sum of ms + vs .
688	Compute the vector matrix .
689	Extract log probabilities from the distribution .
690	Marginal hidden probs .
691	Posterior marginals .
692	Posterior mode .
693	Choose random direction .
694	Sample the next step .
695	If fn_arg_list is a list then call it with fn_arg_list .
696	Pads x to the right .
697	Create a slice for one step .
698	Build a training posterior .
699	Build a factored variational loss .
700	Minimize the loss function in the graph .
701	Calculate the mean and variance of a masked time series .
702	Compute the initial value of a masked time series .
703	Broadcasts the batch shape of a list of distributions .
704	Returns a MultivariateNormalLinearOperator for factored joint MNVs .
705	Returns a MultivariateNormalDiag for the given distributions .
706	Compute empirical statistics .
707	Expand trailing dimensions .
708	Canonicalizes an observed time series with a mask .
709	Returns a MixtureSameFamily for the given means and variances .
710	Return the range of the range .
711	Returns a function that can be used to compute a summary statistic .
712	Unify the signature of a distribution function .
713	Resolve distribution names .
714	Get the required arguments for a function .
715	Compute the KL divergence between two distributions .
716	Build the distribution function .
717	Returns a tuple of distribution names and their arguments .
718	Computes the entropy of the distribution .
719	Check that an argument is in the support of the distribution .
720	Create a summary for images .
721	Visualizes a reconstructed image .
722	Visualizes the qualitative analysis .
723	Summarize the distribution parameters .
724	Summarize the mean in NATS and bits .
725	Returns a MultivariateNormalDiag .
726	Create a zero state .
727	Call the LSTM cell .
728	Call conv1 conv2 and conv4 .
729	Generate a new likelihood from a batch of samples .
730	Reconstructs the model .
731	Sample from static prior .
732	Sample dynamic prior .
733	The shape of the batch .
734	The shape of the batch .
735	Create a state space model .
736	Sample parameters from the prior model .
737	Compute the minimum event dimensions for each bijector in the list .
738	Convert vector length to square matrix size .
739	Sort a list of values along an axis .
740	Sort a list of values along an axis .
741	Return an ndtr from x .
742	NDTR function .
743	N - dimensional triangular representation of a tensor .
744	Logarithmic NDTR .
745	Log - NDTR asymptotic series .
746	Eigenvalue function .
747	Log - cdf on laplace .
748	Compute the log probability of the text messages .
749	Benchmark for text messages in HMC .
750	Returns True if index_points is a multivariate marginal GP .
751	Get the marginal distribution .
752	Return the index_points for this GaussianProcess instance .
753	Create an IFF stack .
754	Performs one step of the kernel .
755	Bootstrap the model .
756	Returns the outer squared difference between x and y .
757	Returns the value and batch jacobian of a function .
758	Prevent 2nd derivative .
759	Compute the distribution of x .
760	Split a covariance into multiple marginals .
761	Decomposes a model into components .
762	Decomposes a state space model by component .
763	Decomposes a forecast by component .
764	Convert a dense tensor to a sparse tensor .
765	Decorator for operator functions .
766	Return a string representation of a NumPy tensor .
767	The shape of the sample .
768	Sample shape tensor .
769	The value of the distribution .
770	Evaluate the expression .
771	Return the value as a numpy array .
772	Conjugates known scale posterior .
773	Default NVP template .
774	Return a uniform unit norm .
775	Log - unnormed probability .
776	Log - normalization .
777	Returns the common dtype for args_list .
778	Create a summary statistic function .
779	Broadcasts tensor_to_broadcast to target_tensors .
780	Returns the PDF at the peak .
781	Return the effective sample size for a list of states .
782	Compute the effective sample size for a single state .
783	Compute the potential scale reduction for a single state .
784	Returns the size of x along the given axis .
785	Helper function for broadcasting maybelist arguments .
786	Quadrature scheme for lognormal gauss - hermite .
787	Computes the lognormal quantiles .
788	Merge two mappings .
789	Remove a field from the mapping .
790	Merge two values .
791	Return a deep copy of x .
792	Left doubling increasing .
793	Find the indices of the best interval .
794	Slice bounds by doubling .
795	Sample with shrinkage .
796	Slice a single dim of x_initial by step_size .
797	Returns a function that will be used to set the value of the model .
798	Creates a log - joint function for the given model .
799	Get the inputs of a function .
800	VGG convolution block .
801	Build a Leapfrog tree .
802	Check that the gradient is None for a state .
803	Returns True if there is no u - turn .
804	Helper function for leapfrog .
805	Calculate the log probability of the joint .
806	Helper function for random_bernoulli .
807	Create a default loc scale function .
808	Default mean field normal function .
809	Default multivariate normal function .
810	Deserialize a function from a string .
811	Serialize a function .
812	Broadcasts from_structure to to_structure .
813	Convert a nested structure to a tensor .
814	Convert a list of arguments into a tensor .
815	Call a function with the given arguments .
816	Returns a dictionary of tensor - like attributes .
817	Create a mixture prior .
818	Pack images into chunks .
819	Download a file to a directory .
820	Build fake input functions .
821	Validate block_sizes and bijectors .
822	Check that all inputs have the same shape .
823	Returns a multivariate normal triangular model .
824	Bernoulli layer .
825	Normal layer .
826	Returns a Poisson layer .
827	Mala - Euler method .
828	Returns a list of drifts .
829	r Compute the log - acceptance correction .
830	Call volatility_fn and return the results of the volatility function .
831	Broadcasts volatility parts to state parts .
832	Create an AR transition matrix .
833	Sample the shape of the input tensor .
834	Reshapes the input tensor .
835	Calls fn and reshapes the output .
836	Betainc function .
837	Sample the distribution and return a flattened list of values .
838	Create a dirichlet allocation .
839	Create a dirichlet layer for LDA .
840	Get a list of strings for each topic .
841	Create a newsgroups dataset .
842	Build fake input functions .
843	Build input functions for training and evaluation .
844	Minimize gradient and hessian loss .
845	Add ema control dependencies to the codebook .
846	Save an array of images to a file .
847	Visualize training images .
848	Load a Bernoulli MNIST dataset .
849	Convert a tf . dtype to a numpy dtype .
850	Return the base dtype for the given dtype .
851	Returns True if the given dtype is a boolean .
852	Check if the given dtype is a complex .
853	Returns the maximum value of the given dtype .
854	Returns the name of the given dtype .
855	Returns the size of the given dtype .
856	r Assert that items are of the same base type .
857	Assert that tensors and dtype are of the same floating point type .
858	Minimize an objective function .
859	Nelder - Mead one step .
860	Return a function that can be used as an accept_reflected_fn .
861	Returns a function that can be used to expand a simplex .
862	Returns a function that returns True if the objective function is outside the contraction .
863	Shrinks the simplex to the best vertex .
864	Replace x with replacement at index .
865	Check whether the simplex is converged .
866	Prepare the arguments for the objective function .
867	Prepare args for objective_function with initial simplex .
868	Prepare args for objective_function with initial_vertex .
869	Evaluate an objective function multiple times .
870	Plot weight posteriors .
871	Plot heldout prediction .
872	Build a fake MNIST data .
873	Returns a dictionary of config values .
874	Create a TensorFlow instance from a config dict .
875	Matrix product .
876	Helper function for std_var .
877	Assign log_moving_mean_exp to a tensor .
878	Make a columnar representation of x .
879	Returns a random tensor of the given shape .
880	Rayleigh random tensor .
881	Pick a scalar condition .
882	Finish the log probability for one fiber .
883	Finish prob for one fiber .
884	Rotates the dimensions of x .
885	r Undo batch normalization .
886	Validate batchnorm_layer .
887	Slice a single param .
888	Return a dictionary of slice parameters for the given distribution .
889	Apply a single step to a distribution .
890	Apply a sequence of slices to the distribution .
891	Apply a batch slice to the distribution .
892	Fit a model to a model matrix .
893	Convergence criteria for small relative norm weights change .
894	Prepare args for training .
895	Returns the number of columns .
896	Prefer static arguments from original_fn .
897	Returns a copy of original_fn with the same arguments as new_fn .
898	Get the value of a static predicate .
899	Returns the rank of a tensor given a shape .
900	Case control flow .
901	Create a name scope .
902	Calculate the mean and standard deviation of a mixture .
903	Create a tril scale .
904	Make a diagonal scale from loc to scale_diag .
905	Get shapes from loc and scale .
906	Returns True if scale is a diagonal scale .
907	Check whether distribution is scalar .
908	Pad mixture dimensions .
909	Pick a scalar condition .
910	Move a dimension from source_idx to dest_idx .
911	Check that x is non - negative and contains fractional components .
912	Same dynamic shape .
913	Try to get a static value .
914	Check if the dtype is known to be unsigned .
915	Returns True if the dtype is known to be signed by the base_dtype .
916	Return the largest integer in the given dtype .
917	Returns the smallest integer of the given dtype .
918	Check if a dtype is an integer .
919	Check that a categorical - distribution parameter has at least one dimension .
920	Computes the logarithmic combinations of n and counts .
921	Rotates x by shift .
922	Picks a vector from a boolean condition .
923	Prefer static broadcasting .
924	Generate a new seed .
925	Create a tridiagonal matrix .
926	Returns the dimension size of x along the given axis .
927	Process quadrature grid and probs .
928	Returns a dictionary of the arguments of the parent frame .
929	Expand x to a vector .
930	Returns a tensor with the given dependencies .
931	Validate rightmost transposed dimensions .
932	Check that perm is a valid permutation vector .
933	Return the event shape .
934	Concatenates two tensors .
935	Returns a list of the dimensions of x .
936	Merge a TensorShape with another TensorShape .
937	Returns a new TensorShape with rank at least rank .
938	Check that static_shape and dynamic_shape are equal to static_target_shape .
939	Augment the shape of the full_sample_and_batch_shape .
940	Build a backward pass step .
941	Update the backward smoothing .
942	Build a kalman filter step .
943	Linear Gaussian update .
944	Kalman transition .
945	Build a kalman mean step .
946	Build a Kalman cov step .
947	Build a kalman sample step .
948	Propagate mean .
949	Compute the covariance matrix from the covariance matrix .
950	Backward smoothing pass .
951	Sample n observations from the joint model .
952	Smooth posterior marginals .
953	Compute the mean joint .
954	Compute the joint covariance matrix .
955	Convert latents to observations .
956	Log - normalization for vMF .
957	Returns the mean direction and concentration .
958	Rotates the samples by the mean direction .
959	Sample from a 3D distribution .
960	Return a copy of a function .
961	Remove keys with a value from a dictionary .
962	Recursively replaces nested dictionaries with _PrettyDict .
963	Get samples from the distribution .
964	Returns True if x is a namedtuple .
965	Choose a base case based on is_accepted accepted and rejected .
966	Returns a new instance of accepted based on is_accepted accepted and rejected .
967	Compute the sum of x .
968	Wrapper around tf . value_and_gradients .
969	Helper function for maybe_call_fn_and_grads .
970	Wrapper around tf . while_loop .
971	Performs a trace scan .
972	Returns a function that will be used as a decorator for the innermost setter .
973	Returns a function that returns the results of the innermost getter .
974	Add store_parameters_in_results flag to all kernels .
975	Replace event_shape_in with event_shape_out .
976	Replace event_shape_in with event_shape_out .
977	Check that the shape is valid .
978	Given a set of converged tensors and a set of failed tensors return True if any of them converged .
979	Get initial state arguments .
980	Line search step .
981	Returns a function that restricts a value and gradient along a given direction .
982	Update position .
983	Check whether the current gradient and objective are converged .
984	Broadcast the value to the target tensor .
985	Harmonic number .
986	Default exchange proposed function .
987	Get a field from a kernel results object .
988	Get exchanged states .
989	Returns the variance scale term .
990	Returns the forward log - det - jacobian function for the given bijector .
991	Returns a function that transforms a bijector into a list of states .
992	Returns an inverse transformation function for the given bijector .
993	Perform one step of the transition .
994	Returns a new Tensor where cond is True for tval and fval .
995	Secant 2 .
996	Helper function for secant2 .
997	Helper function for secant2 .
998	Update value_and_gradients_function .
999	Given a search interval and a value_and_gradients_function return an intermediate result .
1000	Bisect value_and_gradients_function .
1001	Bisect a value_and_gradients function .
1002	Check if two values are finite .
1003	Returns True if the value of val_0 and val_c satisfies a wolfe .
1004	Calculate the secant between two values .
1005	Create a simple step size update policy .
1006	Leapfrog integrator for one step .
1007	Compute the log - acceptance correction .
1008	One step of the Hamiltonian Monte Carlo .
1009	Bootstrap the results of the Hamiltonian Monte Carlo .
1010	Bayesian ResNet .
1011	Resnet block .
1012	Create a dirichlet encoder .
1013	Create a decoder function .
1014	Create a dirichlet prior .
1015	Sample a Markov chain .
1016	Create a deep exponential family .
1017	Train a positive deterministic .
1018	Create a trainable gamma .
1019	Load NIPS2011 papers .
1020	Initialize parameters .
1021	Returns the KL function for the given type .
1022	Read an image from a file .
1023	Download sprites from a zip file .
1024	Create a character with the given skin hair and top and pants .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a sprites dataset .
1028	Validate a list of distributions .
1029	Flatten a list of kernels into a list of summands .
1030	Flatten a list of kernels into a list of kernels .
1031	Build fake data .
1032	Count the number of integers in an array .
1033	Find bins .
1034	Create a histogram along an axis .
1035	Quantiles along a given axis .
1036	Returns the number of statically defined dimensions .
1037	Insert back keep dimensions .
1038	Make a list of non - negative dimensions for a static axis .
1039	Move dimensions to flat end .
1040	Sort a tensor by top k .
1041	Returns a list of state space models for each component .
1042	Returns the amari - alpha function for the given logu .
1043	Reverse logarithmic KL .
1044	Jensen - Shannon model .
1045	Pearson distribution .
1046	Squared Hellinger .
1047	Computes the triangular logarithm of logu .
1048	T - power function .
1049	Returns the log1p absolute value of logu .
1050	Jeffreys model .
1051	Computes the modified GAN .
1052	Dual csiszar function .
1053	symmetrized csiszar function .
1054	Monte Carlo - Csiszar divergence .
1055	Helper function for csiszar_vimco .
1056	Raises a ValueError if ndims is not statically defined .
1057	Batch gather with broadcasting .
1058	Broadcasts the event to the params .
1059	r Logarithmic sampling of expectation importance samples .
1060	Broadcast event and samples .
1061	Minimize a value and gradient function .
1062	Check that the inverse Hessian is positive definite .
1063	Update the inverse Hessian estimate .
1064	Update the inv_hessian estimate .
1065	Multiply mat by vec .
1066	Returns the tensor product of two tensors .
1067	Transpose a tensor .
1068	Pads the shape right with zeros .
1069	Calculate the sum of the rightmost ndims .
1070	Returns the sqrt and gradient of x .
1071	Returns the common dtype for the given list of arguments .
1072	Minimize a value and gradient function .
1073	Returns the initial state of the optimizer .
1074	Get search direction .
1075	Create an empty queue for the given element .
1076	Push new_vecs onto the queue .
1077	Returns a tensor where the eigenvalues of x are greater than zero .
1078	Return x where x is larger than det_bounds .
1079	Create a uniform correlation matrix .
1080	Rejection sampling function .
1081	Clopper - Pearson confidence interval .
1082	Compute the true volume of the correlation matrix .
1083	Von - Mises CDF series .
1084	Von - Mises cdf function .
1085	One - step objective function .
1086	Minimize an objective function .
1087	Get initial arguments .
1088	Find the best value in the population .
1089	Check whether the population is converged .
1090	Get the starting population .
1091	Binary crossover .
1092	Get a list of mutants from a population .
1093	Get random mixing indices .
1094	Ensure that a tensor is a list or a tuple .
1095	Convert the tol to a tensor .
1096	Soft - thresholding .
1097	Clip t by clip_value_min and clip_value_max .
1098	Build input pipeline .
1099	Plot generated images .
1100	Convert a list of productions into a string .
1101	Call the LSTM algorithm .
1102	Returns a MultivariateNormalDiag .
1103	Hat approximation .
1104	Inverse of the Hat .
1105	Compute the rank of a matrix .
1106	Inverse of a matrix .
1107	Solve lower_upper and permute rhs .
1108	Inverse of a LuMatrix .
1109	Reconstructs a list of assertions .
1110	Return a list of LuSolver assertions .
1111	Compute the diagonal of a sparse block .
1112	Validate a matrix .
1113	Calculate the negative log likelihood and the Fourier Transform .
1114	r Fit a sparse model .
1115	Generate a list of slices .
1116	Generate a mask .
1117	Create a masked dense layer .
1118	Create an input order .
1119	Create a list of degrees .
1120	Create masks for the given degrees .
1121	Create a masked initializer .
1122	Builds the event mask .
1123	Call autoregressive layer .
1124	Draw random samples from logits .
1125	Create a zero - dimensional multivariate normal diagonal .
1126	Returns a function that can be used to observe a timeseries .
1127	Convert params to weights .
1128	Explore the depth of a graph .
1129	Returns a tuple of names and their parents sorted alphabetically .
1130	Flatten a list of named_makers into a single distribution function .
1131	Builds the distribution function from a model .
1132	Compute the variational loss .
1133	Optimal variational posterior .
1134	Build is_last_day_of_season function .
1135	Builds the matrix of effects to residuals .
1136	Builds the seasonal transition matrix .
1137	Build a seasonal transition noise function .
1138	Build a constrained seasonal transition noise .
1139	Check if the observation data is empty .
1140	Validate the observation data .
1141	Add a scheduler to the sequence .
1142	Set the checkpoint .
1143	Set the constant clip .
1144	Optimize the model .
1145	Set training summary .
1146	Set the value summary .
1147	Create an optimizer from a training set .
1148	Set training data .
1149	Set a summary trigger .
1150	Read images and labels from train_dir .
1151	Get a list of texts from news20 .
1152	Get W2V from GloVE . 6B . txt .
1153	Compile the model .
1154	Fit the model to the input data .
1155	Evaluate the model .
1156	Predict the model with the given data .
1157	Read MNIST data from disk .
1158	Preprocess MNIST data .
1159	Get the end trigger for the given options .
1160	Validate the optimizer .
1161	Get the value of the field .
1162	Call a BigDl function .
1163	Call a Java function with the given arguments .
1164	Convert an RDD to a Java Object RDD .
1165	Convert a Python object to a Java object .
1166	Get an activation by its name .
1167	Create a new instance from a numpy . ndarray .
1168	Get the label of the image .
1169	Read an image from a parquet file .
1170	Write a parquet file .
1171	Get the image from the image_frame
1172	Get the image of the local image frame .
1173	Get the label of the image frame .
1174	Get the prediction of the image .
1175	Predict the model for the given input .
1176	Fit the model .
1177	Transform the image .
1178	Save a Keras definition to a JSON file .
1179	Build a Keras model .
1180	Predict the class of the model .
1181	Set the weights of the tensor .
1182	Get the weights of the layer .
1183	Save the tensorflow to a file .
1184	Call the value s training function .
1185	Load a Torch model from a file .
1186	Load Keras from a JSON or HDF5 file .
1187	Create a new Criterion from a JCriterion .
1188	Load weights from a JSON file .
1189	Load training and test data from imdb .
1190	Build a Keras model .
1191	Returns the shape of the input .
1192	Returns the shape of the output .
1193	Read MNIST data sets .
1194	Read data sets from WHOLE_DATA .
1195	Return the path to the bigdl jar .
1196	Check if Spark version is below 2 . 2 .
1197	Export a checkpoint to a dictionary of tensors .
1198	Save a dictionary of tensors to a file .
1199	Expands a tile of the given units .
1200	Precompute future symbols .
1201	Simple attention .
1202	Attention layer .
1203	Compute the BLEU distance between two corpora .
1204	Get the log file for this agent .
1205	Write a log message to the log file .
1206	Summarize gradient updates .
1207	Dump weights to a file .
1208	Read data from a JSON config .
1209	Train and evaluate a model from a config file .
1210	Interacts with an alice agent .
1211	Convert a list of labels to one - hot labels .
1212	Convert proba to one - hot representation .
1213	Create a config session .
1214	Load model from disk .
1215	Returns the momentum variable .
1216	Update the graph variables .
1217	Calculate the F1 - MACRO score .
1218	Convert a word to a list of strings .
1219	Stacked CNN .
1220	Bi - RNN .
1221	RNN layer for stacked BI .
1222	Stacked highway CNN .
1223	Create an embedding layer .
1224	Cudnn GRU .
1225	Cudnn compatible GRU .
1226	Cudnn LSTM .
1227	CDN compatible LSTM .
1228	CDN - Bayesian GRU .
1229	CNN convolutional convolutional convolutional graph .
1230	A stacked version of cudnn_bi_gru .
1231	Convenience function for variational dropout .
1232	Builds the LSTM network .
1233	Build word convolutional layer .
1234	Builds a basic LSTM network .
1235	Train the model on a batch of data .
1236	Predict on a batch of data .
1237	Create a vector from a list of sentences .
1238	Convert a list of tags into a vector of indices .
1239	Calculate the BLEU measure .
1240	Verify that a SC URL is valid .
1241	Extract certificates from a text file .
1242	Verify a chain of certificates .
1243	Verify the signature of the request body .
1244	Verify a signature chain URL .
1245	Returns the JSON representation of the controls .
1246	Return a list of ms bot frameworks .
1247	Return a list of telegram controls .
1248	Alexa controls .
1249	Main entry point for DeepPavlov .
1250	Wrap a function with a graph .
1251	Wrap a function in a Keras backend .
1252	Calculate the accuracy of the prediction .
1253	Calculate the accuracy of the prediction .
1254	Pre - trained initializer .
1255	Read data from a file .
1256	Create a hello bot agent .
1257	Convert from one hot to one hot .
1258	Prettify a list of metrics .
1259	Populate the default settings directory .
1260	Load the model from disk .
1261	Save model to file .
1262	Get train op .
1263	Search for a word in the trie .
1264	Create a dictionary of operation costs .
1265	Start the conversation timer .
1266	Handle a single request .
1267	Call the agent with the given utterance .
1268	Generate a response from the response template .
1269	Handle an intent request .
1270	Handle the launch request .
1271	Handle an unsupported message .
1272	Pretty print the structure .
1273	Convert an elmo loss to a PPL .
1274	Build a Chainer from a config file .
1275	Interactively interact with a model .
1276	Run a Chainer model on a stream .
1277	Read words and tags from a text file .
1278	Import a function from a string .
1279	Decorator to register a function as a metric .
1280	Get a metric function by its name .
1281	Return DecayType instance from label string .
1282	Given a list of values and a list of losses return the best value .
1283	Convert a list of tokens into an empirical representation .
1284	Read the requirements . txt file .
1285	Return the log loss of the prediction .
1286	Export a weight file to a hub .
1287	Show the details of an item .
1288	Build and return an EcommerceAgent instance .
1289	Run ms - bot - framework server .
1290	Download a file from a URL .
1291	Untar a tar file .
1292	Download a file from the given URL to the given path .
1293	Recursively updates a dictionary recursively .
1294	Add a . md5 extension to a URL .
1295	Set a query parameter in a URL .
1296	Alexa response .
1297	Return the JSON representation of the control .
1298	Create a POSTBACK card .
1299	Return the JSON representation of the control .
1300	Return a JSON - ready representation of the message as a dict .
1301	Squad - v2 F1 .
1302	Calculate the recall at k examples .
1303	r Check whether the GPU is available .
1304	Parse a config property .
1305	Parse a config file into a dictionary .
1306	Expand the given path .
1307	Create a Component instance from a dictionary of parameters .
1308	Run the request loop .
1309	Delete a conversation .
1310	Refresh all expired certificates .
1311	Verify the signature of the request .
1312	Handle an Alexa request .
1313	Return a class from a class description string .
1314	Decorator to register a model class .
1315	Get a model class from its name .
1316	Returns the GLM regularization path .
1317	Create a generalized linear estimator from a model .
1318	Create a H2OCluster object from a list of key - value pairs .
1319	Shuts down the H2O instance
1320	Check if the H2O server is running
1321	Show the status of the cluster .
1322	List all jobs
1323	Returns a list of time zones .
1324	Fill properties from a h2ocluster .
1325	Get the metalearner parameters .
1326	Stabilizes a test function .
1327	Get the summary of a H2O column .
1328	Delete a frame .
1329	Get a list of model builders .
1330	Validate model parameters .
1331	Compute metrics for a given model and frame
1332	Get model metrics .
1333	Delete a model .
1334	Return a table of data .
1335	Run EC2 instances .
1336	Terminate EC2 instances .
1337	Stop EC2 instances .
1338	Start EC2 instances .
1339	Reboot EC2 instances .
1340	Wait for SSH on a list of IP addresses .
1341	Get the full name of a function .
1342	Find a function from a Python code .
1343	Return a string representation of a function s signature .
1344	Wrap text to make sure it is not too long .
1345	Wait for the job to complete .
1346	Train the model .
1347	Fit a sklearn model .
1348	Returns a dictionary of parameters .
1349	Signal handler . Tear down CLOUDS .
1350	Wipe the output directory .
1351	Remove a sandbox directory .
1352	Scrape port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM .
1355	Stop all nodes and client nodes .
1356	Get the IP address of the node .
1357	Get the port of the client .
1358	Returns a dictionary of ROC metrics .
1359	Determine the size of the vector .
1360	H2O mean absolute error .
1361	H2O mean squared error .
1362	H2O median absolute error .
1363	H2O explained variance score .
1364	Raises an exception if the variable is not of the expected type .
1365	Raises an exception if v does not match regex .
1366	Raises an exception if v does not satisfy the condition cond .
1367	Retrieve assert arguments from the stack trace .
1368	Check if a variable is of the given type .
1369	Returns a string representation of the given type .
1370	Get source code for lambda function .
1371	Check if a variable is of the correct type .
1372	Check if a variable is a valid enum .
1373	Get the H2O config .
1374	Read the config file .
1375	Return a list of candidate log files .
1376	Execute a progress function .
1377	Store model progress .
1378	Recalculate model parameters .
1379	Estimate progress completion time .
1380	Guess the next poll interval .
1381	Compute the progress at the given time .
1382	Calculate the time at which the progress bar should be displayed .
1383	Draw text to stdout .
1384	Compute the sizes of the widgets .
1385	Get the size of the terminal .
1386	Set the encoding of the bar .
1387	Fit the encoder to the given frame .
1388	Get a H2OFrame from a frame_id .
1389	Refresh the cache .
1390	Return the type of the given column .
1391	Return a list of columns of the given type .
1392	Print the summary of the H2OFrame .
1393	Show the summary of the current frame .
1394	Return a new DataFrame with the first row and the first column .
1395	Multiply this H2OFrame by a matrix .
1396	Returns the levels of this H2OFrame .
1397	Returns the number of levels .
1398	Set the H2O frame s level .
1399	Set the levels of the domain .
1400	Rename columns .
1401	Set the names of the columns .
1402	Set the name of a column .
1403	Returns True if this H2OFrame contains the given item .
1404	Return a new H2OFrame with n_folds k - folds .
1405	Stratified k - fold column .
1406	Print the structure of the H2OFrame .
1407	Return the data as a pandas DataFrame .
1408	Pop a column from the frame .
1409	Returns a new H2OFrame with quantiles .
1410	Concatenate frames into a single DataFrame .
1411	Return a new H2OFrame bound to the given data frame .
1412	Return a new H2OFrame bound to the given data frame .
1413	Splits the runif into multiple frames .
1414	Return a new GroupBy object .
1415	Return a new H2OFrame filled with missing values .
1416	Impute the values of a column .
1417	Merge two H2OFrames .
1418	Return a relevel expression .
1419	Insert missing values into the dataset .
1420	Return the variable of this H2OFrame .
1421	Compute the correlation matrix of this H2OFrame .
1422	Calculate the distance between two H2OFrames .
1423	Return an asfactor expression .
1424	Return a new H2OFrame split by pattern .
1425	Return a new H2OFrame containing the number of rows that match the pattern .
1426	Return a new H2OFrame containing the substring of this H2OFrame .
1427	Return a new H2OFrame with the elements removed from the beginning of this H2OFrame .
1428	Returns a new H2OFrame with the entropy of the frame .
1429	Returns a new H2OFrame with the number of valid substrings .
1430	Return a new H2OFrame with a table .
1431	Create a histogram of the H2O data .
1432	Returns a new H2OFrame with a maximal cardinality of num_words .
1433	Replace all occurrences of pattern with replacement .
1434	Return an upper case expression .
1435	Returns a new H2OFrame containing only the elements that match the given pattern .
1436	Return a new H2OFrame with NaNs removed .
1437	Returns a new H2OFrame with only the first column .
1438	Returns a new H2OFrame with the is . na operator .
1439	Return a minute expression .
1440	Return a new H2OFrame with the same columns as this frame .
1441	Returns a new H2OFrame with a random split .
1442	Return a new H2OFrame with the given breaks .
1443	Return the maximum value of each column in this DataFrame .
1444	Apply a function to the H2OFrame .
1445	Parse text and return a Code object .
1446	Parse a file into a Code object .
1447	Move the cursor to a new location .
1448	Unparse the token and return the result .
1449	Get the size of the model .
1450	Returns the centers of the model .
1451	The standard deviation of the centers .
1452	Connect to a H2O server .
1453	Make a request to the H2O API .
1454	Check the version of H2O .
1455	Imports a file or directory .
1456	Upload a file to a DataFrame .
1457	Import data from a file .
1458	Import a Hive Table .
1459	Import a SQL table .
1460	Import a SQL select statement into a H2O table .
1461	Parse a raw H2O frame .
1462	Create a deep copy of a H2OFrame .
1463	Get a model by its ID .
1464	Get a single H2O grid
1465	Get a H2OFrame by ID .
1466	Download a POJO from H2O .
1467	Download a CSV file from H2O .
1468	Download all logs from H2O .
1469	Export a frame to a file .
1470	Convert H2OData to a list of H2ODataFrames .
1471	Run a demo function .
1472	Load a dataset from a relative path .
1473	Make metrics from predicted and actual frames .
1474	Upload a file to a key .
1475	Upload a custom metric function to a file .
1476	Check that a frame id is valid .
1477	Returns a human - readable representation of the given size .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Run mojo prediction on a pandas dataframe .
1481	Predict a Mojo from a CSV file .
1482	Decorator to mark a function as deprecated .
1483	Wait for the job to complete .
1484	Return a dictionary of deep features for each model .
1485	Print a summary of the models .
1486	Show a table of hyperparameters .
1487	Get a list of hyperparameters for a model .
1488	Get a dictionary of hyperparameters for a model .
1489	Returns a new H2OGridSearch instance .
1490	Calculate the F1 of each model .
1491	Returns a pandas DataFrame of the importances of components .
1492	Project archetypes from the test data .
1493	Plot a screeplot .
1494	Translate a name into a human - readable name .
1495	Indent text by ind spaces .
1496	Extract run information from a java log file .
1497	main entry point for the extractGLRMRuntimeJavaLog . py script
1498	Close the H2O session
1499	Get the session ID .
1500	Start logging all API requests .
1501	Prepare data payload .
1502	Prepare the payload of a file .
1503	Log the start of a transaction .
1504	Log the end of a transaction .
1505	Log a message to the log file .
1506	Process the response and save it to a file .
1507	Print a message to the console .
1508	Get the automl for a given project .
1509	Download a POJO from the leader .
1510	Download a mojo from the leader .
1511	Compute mean and standard deviation .
1512	Scale X by the mean and standard deviation .
1513	Inverse transform .
1514	Extract true string from string_content .
1515	Find the node name in each line .
1516	Find git hash branch in each line .
1517	Find build timeout in each line .
1518	Find build failure .
1519	Find build id in each line .
1520	Extract job build URL from URL string .
1521	Grab a java message from a file .
1522	Save the test dictionary to a pickle file .
1523	Update the summary file .
1524	Write the content of a file to a file handle .
1525	Writes a Java message to a text file .
1526	Load java messages to ignore .
1527	Normalize an enum constant .
1528	Find the synonym scores for a word .
1529	Poll the status of the job .
1530	Save the assembly to a POJO .
1531	Fit the H2OFrame to the given frame .
1532	Calculate the percentile of a list of numbers .
1533	Returns a dict of default parameters .
1534	Return a dictionary of actual parameters .
1535	Perform deep features on a test data frame .
1536	Get the scoring history for this model .
1537	Show model details .
1538	Returns the variable importances as a pandas DataFrame .
1539	Returns the residual degrees of freedom .
1540	Returns the coefficients of the model .
1541	Download a POJO from H2O .
1542	Download the mojo from H2O .
1543	Save model details .
1544	Raises a ValueError if the row lengths do not match .
1545	Returns a list of cross validation models
1546	H2OGradientBoosting estimator .
1547	H2O deep learning example .
1548	H2O Generalized Linear Estimator
1549	Wait for a keypress .
1550	Return the cell values as a pandas DataFrame .
1551	Show the table .
1552	Start a new JVM .
1553	Find h2o . jar .
1554	Return a list of paths to the jar files .
1555	Get the hit ratio table for this model .
1556	Returns a csv . DictWriter object .
1557	Convert a URI to a path .
1558	Convert a path to a URI .
1559	Parse the lines into functions and classes .
1560	Generates an API documentation for a given module .
1561	Return a list of all modules in the current directory .
1562	Write API documentation to a directory .
1563	Write the toctree index .
1564	Convert the table to a list of integers .
1565	Loads a dictionary of messages from a file .
1566	Add a new message to the list of messages to exclude .
1567	Update g_ok_java_messages with message_dict .
1568	Extract a message from a file .
1569	Save the dictionary to a file .
1570	Print a dictionary of messages to ignore .
1571	Parse command line arguments .
1572	Print usage and exit .
1573	Locate all . py files in a directory .
1574	Find a magic in a file .
1575	Main entry point for testing .
1576	Transform an H2OFrame .
1577	Add failed tests to the summary dictionary
1578	Extract print save intermittens .
1579	Plot the ROC curve .
1580	Compute the confusion matrix for the given metrics and thresholds .
1581	Check if a Deep Water model is available .
1582	Trim the data back to a given month .
1583	Return a dictionary of endpoint groups .
1584	Update site forward .
1585	Return a JSON representation of the given data .
1586	Comment a user s medias .
1587	Get credentials from the secret file .
1588	Like a user s medias .
1589	Like media with a given hashtag .
1590	Check if user_id is not a bot .
1591	Read a list from a file .
1592	Schedule the message to be enqueued .
1593	Mark the message as deferred .
1594	Downloads the contents of a virtual WAN .
1595	Guess the service info from a path .
1596	Update a power shell command .
1597	Deletes an application definition by its ID .
1598	Creates or updates an application definition by ID .
1599	Return the URI for the given request .
1600	Returns a RequestsConnection object for the given request .
1601	Perform a HTTP request .
1602	Executes script actions on a cluster .
1603	Check front door name availability .
1604	Deletes a vault from the specified location .
1605	Get the authorization server .
1606	Validate the request_uri .
1607	Returns an instance of the CLI profile .
1608	Get Azure CLI credentials .
1609	Resolve a query .
1610	Check name availability for a given location .
1611	Opens a new request .
1612	Sets the timeout for this request .
1613	Sets a request header .
1614	Get all response headers for this request .
1615	Sends a request to the client .
1616	Returns the status of the request .
1617	Return the status text of the request .
1618	Return the response body of the request .
1619	Sets the client certificate .
1620	Send an HTTP PUT request to the server .
1621	Add a header to the request .
1622	Sends the request body to the client .
1623	Get the response from the request .
1624	Get a readable ID from a name .
1625	Get the serialization name for the given element name .
1626	Verifies a face to a person .
1627	Adds a job to the batch .
1628	Returns a dictionary of entry properties .
1629	Get a list of child nodes from a path .
1630	Find namespaces from a child element .
1631	Convert an XML string to a ServiceBusNamespace object .
1632	Converts an XML string to a ServiceBusRegion object .
1633	Converts an XML string to a NamespaceAvailability object .
1634	Converts an XML string to a Metrics object .
1635	Replaces the content of a runbook .
1636	Returns a paginated list of domain recommendations .
1637	Updates a Kb .
1638	Returns a list of member groups for the specified user .
1639	Builds a package from a pull request .
1640	Import data from a file - like object .
1641	Publishes a runbook to a runbook .
1642	Renew the session lock .
1643	Replaces the specified word alterations .
1644	Adds a value to a secret value resource .
1645	Gets the properties of a storage account .
1646	Gets the keys associated with a storage account .
1647	Regenerate storage account keys .
1648	Create a storage account .
1649	Updates a storage account .
1650	Deletes a storage account .
1651	Checks if a storage account is available for a given service .
1652	Gets the properties of a hosted service .
1653	Create a new hosted service .
1654	Deletes a hosted service .
1655	Creates a new deployment .
1656	Deletes a deployment .
1657	Swaps a deployment from one production to another .
1658	Changes a deployment configuration .
1659	Updates the status of a deployment .
1660	Upgrade a deployment .
1661	Walks up the upgrade domain .
1662	Reboot a role instance .
1663	Deletes one or more role instances .
1664	Checks if a service is available for a given hosted service .
1665	List the certificates associated with a service .
1666	Get a service certificate .
1667	Adds a service certificate to a service .
1668	Deletes a service certificate .
1669	Gets a management certificate for this subscription .
1670	Adds a management certificate to this subscription .
1671	Deletes a management certificate .
1672	Gets the properties of an affinity group .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	List subscription operations .
1676	Create a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associate a reserved IP address with a service .
1679	Disassociates a reserved IP address from a service .
1680	Retrieves a reserved IP address .
1681	Gets a persistent VM role .
1682	Creates a virtual machine deployment .
1683	Adds a role to a deployment .
1684	Updates a role in a deployment .
1685	Deletes a role from a service .
1686	Captures a role .
1687	Starts a role .
1688	Starts one or more roles .
1689	Restarts a role .
1690	Shuts down a role .
1691	Shuts down the specified roles .
1692	Adds a DNS server to a service .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	List the versions of a resource extension .
1696	Replicates a virtual machine image .
1697	Unreplicates a virtual machine image .
1698	Share a virtual machine image .
1699	Creates a virtual machine image .
1700	Deletes a virtual machine image .
1701	List virtual machine images .
1702	Updates a virtual machine image .
1703	Adds an OS image .
1704	Updates an OS image .
1705	Updates an OS image from an image reference .
1706	Deletes an OS image .
1707	Get a Data Virtual Hard Disk .
1708	Adds a data disk to the specified service .
1709	Updates a data disk .
1710	Deletes a data disk .
1711	Adds a disk to the volume .
1712	Update a disk .
1713	Deletes a disk .
1714	Summarize policy states for a management group .
1715	Builds the receiver .
1716	Fetch the next batch of messages .
1717	Renews the session lock .
1718	Creates or updates a virtual machine scale set .
1719	Converts a virtual machine scale set to a single placement group .
1720	This API endpoint allows you to access screen text .
1721	Create a new key .
1722	Import a key from a vault .
1723	Updates a key .
1724	Sets a secret .
1725	Sets a certificate issuer .
1726	Create a shared access key from a connection string .
1727	Get a subscription for a topic .
1728	List all subscriptions for a topic .
1729	Send messages to the sender .
1730	Returns an instance of the sender class .
1731	Get a receiver for this entity .
1732	Get a deadletter receiver .
1733	Parse the response for an asynchronous operation .
1734	Perform a GET request .
1735	Perform an HTTP PUT request .
1736	Wait for an operation to complete .
1737	Gets the status of an operation .
1738	Add x - ms - version to the request s headers .
1739	Build a Travis package .
1740	Retrieve certificates from a vault .
1741	Returns a list of all regions in the service bus .
1742	Returns a list of service bus namespaces .
1743	Get a service bus namespace by name .
1744	Create a service bus namespace .
1745	Deletes a service bus namespace .
1746	Checks the availability of a service bus namespace .
1747	Returns a list of topics with the given name .
1748	Returns a list of notification hubs .
1749	Returns a list of all Relays with the given name .
1750	Get a list of metrics rollups from a service bus queue .
1751	Get a list of metrics rollups for a topic .
1752	Get a list of metrics rollups for a given service bus .
1753	Get a list of metrics rollups for a given relay .
1754	Create an extended environment .
1755	Create a virtualenv with the given packages .
1756	Creates a new server .
1757	Sets the server s admin password .
1758	Returns a list of quotas for the specified server .
1759	Gets the event logs for a server .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	Returns a list of firewall rules for the specified server .
1764	List service level objectives .
1765	Creates a new database .
1766	Updates a database .
1767	Delete a database .
1768	Returns a list of databases .
1769	Returns a list of top level domain agreements .
1770	Close the message handler .
1771	Shuts down the receiver .
1772	Get the current session state .
1773	Set the session state .
1774	Receive deferred messages .
1775	Merge one or more sources into a single reservation .
1776	Validate a challenge .
1777	Purge a table from a workspace .
1778	Return an error handler for the given error .
1779	Creates a new queue .
1780	Deletes a queue .
1781	Gets a queue by name .
1782	Create a topic .
1783	Gets a topic by name .
1784	Creates a new rule in a subscription .
1785	Get a single rule .
1786	List rules for a topic and subscription .
1787	Creates a subscription for a topic .
1788	Gets a subscription from a topic .
1789	List subscriptions for a topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a queue message .
1794	Receive a message from a queue .
1795	Receive a subscription message from a topic .
1796	Creates an event hub .
1797	Update an event hub .
1798	Gets an event hub .
1799	Sends an event to a hub .
1800	Add a Content - Type header to the request .
1801	Returns an authorization string that can be used to authenticate requests .
1802	Check if the token is expired .
1803	Get a token for the given host and path .
1804	Update the request URI query .
1805	Resets the service principal profile .
1806	Delete this message from the service bus .
1807	Unlocks the message .
1808	Renews the lock .
1809	Add headers to the request .
1810	Returns the batch body as a dict .
1811	Get cluster health statistics .
1812	Get cluster health using a cluster health policy .
1813	Unprovisions an application type .
1814	Get a list of repair tasks .
1815	Submit a property batch .
1816	A general error handler .
1817	Starts a web site network trace operation .
1818	List the differences between a slot and a target slot .
1819	Swap a slot .
1820	Get events by type .
1821	Adds a face to a large face list .
1822	Handle a redirect response .
1823	Create and start a migration .
1824	Publish events to a topic .
1825	Move resources from one resource group to another .
1826	Set the profile to use .
1827	Returns a paginated list of query results for the specified management group .
1828	Create a queue .
1829	Delete a queue .
1830	Create a new topic .
1831	Delete a topic .
1832	Create a subscription for a topic .
1833	Create a Shared Access Key from a connection string .
1834	Get the properties of the queue .
1835	Check if the lock is expired .
1836	Create a new session .
1837	Create a subscription .
1838	Export request rate by interval .
1839	Return a list of results from a queue .
1840	Add tasks to the queue .
1841	The task collection thread .
1842	Build a config dictionary from a config dict .
1843	Resets the password of a user .
1844	Starts an environment .
1845	Create a message from the response body .
1846	Convert an XML element to a Rule object .
1847	Convert a queue XML element to a Queue object .
1848	Convert an XML element to a Topic object .
1849	Convert an xml . etree . Element to a subscription .
1850	Create a new certificate .
1851	Deletes a certificate .
1852	Get a client instance from a CLI profile .
1853	Get a client object from a JSON dictionary .
1854	Get a client instance from an auth file .
1855	Parses the response body into a list of return types .
1856	Get entry properties from an XML element .
1857	Deletes a certificate .
1858	Get a queue from the service bus .
1859	List all queues in the service bus .
1860	Get a topic from the service bus .
1861	List all topics in the service bus .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Get the Site details for a website .
1865	Create a new website .
1866	Deletes a website .
1867	Update a website .
1868	Restarts a website .
1869	Get historical usage metrics for a given website .
1870	Get the list of metric definitions for a given webspace and website .
1871	Get the publish profile XML for a website .
1872	Get the publish profile for a website .
1873	Updates the policies for a registry .
1874	Creates a Cloud Service .
1875	Checks the availability of a job collection .
1876	Get information about a specific job collection .
1877	Completes a restore operation .
1878	Cancels scheduled messages .
1879	Send all pending messages .
1880	Reconnect to the sender .
1881	Get a certificate from a publish settings file .
1882	Load cookies from the cache .
1883	Return the terminal width of a string .
1884	Get the cut prefix of the given value .
1885	Print a message in place .
1886	Format a file size as a human readable string .
1887	Format elapsed time in human readable format .
1888	Create a status line .
1889	Print the progress of the given iterator .
1890	Generate the number of segments for this playlist .
1891	Get segments for this presentation .
1892	Wait for a given amount of time .
1893	Put a segment into the queue .
1894	Queue the given value in the given queue .
1895	Get parameters from a pvswf .
1896	Extract the nonce from the response .
1897	Look for a vpid from a URL .
1898	Parse JSON data .
1899	Parse an XML string .
1900	Parse a query string .
1901	Search a dictionary for a key in a list or dict .
1902	Spawn a new process .
1903	Iterate over HTML tags .
1904	Parse a manifest from a URL .
1905	Determine the encoding of a JSON sample .
1906	Parse a JSON response .
1907	Parse an XML response .
1908	Parse a list of cookies .
1909	Parse HTTP headers .
1910	Parse query params from cookies .
1911	Return a string representation of the message .
1912	Create a new LogRecord .
1913	Login to LiveEdu .
1914	Load a support plugin .
1915	Update a query string from a URL .
1916	Iterate over all the tags in the buffer .
1917	Get all required arguments for a given plugin .
1918	Check the output of a file .
1919	Create a file - like object .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Start a HTTP server and return an output stream .
1923	Start a player output stream .
1924	Open a stream and return a tuple of fd and pre - buffer .
1925	Write a stream to the output stream .
1926	Read data from a stream .
1927	Handle a single stream .
1928	Fetch streams from a plugin .
1929	Fetch streams for a given plugin .
1930	Resolve a stream name from a list of streams
1931	Format a list of valid streams .
1932	Handle the URL of a streamlink plugin .
1933	Print a list of available plugins .
1934	Authenticate using Twitch OAuth .
1935	Load plugins from a list of directories .
1936	Setup command line arguments .
1937	Setup the console .
1938	Setup the HTTP session .
1939	Load plugins from the plugins directory .
1940	Set up the streamlink options .
1941	Log the current versions of the system .
1942	Extract the stream id from the given text .
1943	Get an iframe from the given text .
1944	Set the value of an option .
1945	Get the value of an option .
1946	Set a plugin option .
1947	Get the value of a plugin option .
1948	Resolve a URL to a plugin .
1949	Load all plugins from the given path .
1950	Returns the number of hours minutes and seconds in seconds .
1951	Validate that a string starts with a given string .
1952	Validate that a string ends with a given string .
1953	Returns a validator that validates that the value contains the given string .
1954	Get the value of an attribute .
1955	Apply a function to each value in a dictionary .
1956	Apply a function to each element of a dictionary .
1957	Validate that the value is a valid URL .
1958	Find an element by XPath .
1959	Find all elements matching xpath .
1960	Find the URL of the player .
1961	Load M3U8 data .
1962	Return the player that supports the given command .
1963	Dologin to Streamlink .
1964	Extract stream_id from html .
1965	Extract stream info from HTML .
1966	Login to the server .
1967	Add a function to be applied to a key .
1968	Perform an API call to the API .
1969	Start a new session .
1970	Get information about a media .
1971	Create a Crunchyroll API .
1972	Compress a string .
1973	Return a string representation of a character .
1974	Format a string according to the output format .
1975	Read n bytes from the stream .
1976	Return the value of this code .
1977	Return the explanation of the code .
1978	Set the decode table .
1979	Set the length table .
1980	Prints the code to the screen .
1981	Read a tuple from the stream .
1982	Return an explanation string for the given index .
1983	Return the value at the given index .
1984	Returns the span of the extra table at the given index .
1985	Get the value for a given index .
1986	Return the mnemonic for the given symbol index .
1987	Return the mnemonic for the given index .
1988	Compile actions from the action table .
1989	Perform an action .
1990	Make a hex string from the stream at the given position .
1991	Process the stream .
1992	Read the length of the metablock .
1993	Read the uncompressed data from the stream .
1994	Read a block type .
1995	Convert a list of values into a list of values .
1996	Read a prefix array .
1997	Compute a monochrometric color from an I - array .
1998	Returns a polychrome representation of I .
1999	Create an arrow table from a vaex dataframe .
2000	Registers a function as a hidden function .
2001	Add virtual columns to the PMVR .
2002	Add virtual columns for proper motion to vperpendicular .
2003	Return a graphviz representation of the expression .
2004	Get the value counts for each column in the dataset .
2005	Map the expression to a dictionary of values .
2006	Returns a VaexApp instance .
2007	Create a DataFrame from a list of filenames .
2008	Create an astropy . table from a SAMP message .
2009	Create a DatasetAstropyTable from an astropy . table . Table object .
2010	Create a DataFrame from a dictionary of arrays .
2011	Create an array from a dictionary of scalar values .
2012	Create a DataFrame from a pandas DataFrame .
2013	Create a DataFrame from a CSV file .
2014	Create a ServerRest instance from a URL .
2015	Create a Zeldovich dataset .
2016	Concatenate a sequence of Dataset objects .
2017	Create a range of virtual values .
2018	Open a dataset .
2019	Evaluate the given expression .
2020	Decorator for delayed functions .
2021	Returns a set of columns depending on the current selection .
2022	Run a task .
2023	Sort the list of pairs by name .
2024	Get information from a file .
2025	Clear the canvas .
2026	Wait for the last plot to finish
2027	Open a document in the operating system .
2028	A context manager for writing to a file .
2029	Split and combine masks into two arrays .
2030	Nop an expression .
2031	Count the first occurrence of the given expression .
2032	Calculate the mean of an expression .
2033	Calculate the sum of a list of expressions .
2034	Calculate the standard deviation of an expression .
2035	Calculate the covariance of a sequence of expressions .
2036	Calculate the minimum value of an expression .
2037	Calculate the minimum value of an expression .
2038	Approximate the median of an expression .
2039	Create a Jupyter plot widget .
2040	Count the number of pixels in a given healpix expression .
2041	Plot a healpix plot .
2042	Plot a 3D plot of the volume .
2043	Returns the data type of the given expression .
2044	Get the path to the private directory .
2045	Get the state of the virtual column .
2046	Set the state of the table .
2047	Remove the virtual_meta . yaml file
2048	Write the virtual_meta . yaml file .
2049	Write metadata to a YAML file .
2050	Generate a list of subspaces .
2051	Set the value of a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert the table to a dictionary .
2055	Create a copy of the DataFrame .
2056	Convert the DataFrame to a Pandas DataFrame .
2057	Convert a DataFrame to an arrow table .
2058	Convert the table to an astropy . table . Table object .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to polar coordinates .
2062	Add virtual columns for cartesian velocity to spherical
2063	Add virtual columns to polar coordinates .
2064	Add virtual columns to cartesian coordinates .
2065	Adds a rotation matrix to the virtual columns .
2066	Add virtual columns from spherical to cartesian .
2067	Add virtual columns from cartesian coordinates to spherical coordinates
2068	Add a virtual column to the table
2069	Deletes a virtual column .
2070	Add a variable to the model .
2071	Delete a variable .
2072	Return the last n elements .
2073	Print the head and tail of the table .
2074	Describe all features in the dataset .
2075	Print the result of a cat operation .
2076	Set the current row .
2077	Return a list of column names .
2078	Returns a new DataFrame with columns removed .
2079	Return a new DataFrame with the given indices .
2080	Extract all elements from the range .
2081	Return a random sample from the dataset .
2082	Split the sequence by frac times .
2083	Split a sequence into multiple sequences .
2084	Sorts the Series by the given value .
2085	Materialize a virtual column .
2086	Undo a selection .
2087	Redo a selection .
2088	Check if a selection can be redoed .
2089	Select a boolean expression .
2090	Select non - missing values .
2091	Drop missing values from the DataFrame .
2092	Select a rectangle .
2093	Select boxes from a list of spaces and limits .
2094	Select a circle .
2095	Select an ellipse .
2096	Select a lasso .
2097	Select the inverse of the current selection .
2098	Set a selection .
2099	Add a new selection to the selection history .
2100	Find a valid name for the given initial_name .
2101	Return a list of root nodes .
2102	Return a graphviz representation of the dataframe .
2103	Categorize a column .
2104	Return an ordinal representation of a column .
2105	Return a Datasets object .
2106	Returns the length of the mask .
2107	Helper function for hstacking DataFrames .
2108	Concatenate two DataFrame objects together .
2109	Export data to an HDF5 file .
2110	Add a column to the DataFrame .
2111	Patch a function in the DataFrame class .
2112	Register a function as a closure .
2113	Fill missing values in an array .
2114	Return the day of week of the given datetime .
2115	Return the day of year of the given datetime .
2116	Return True if x is a leap year
2117	Return the year of the given datetime .
2118	Return the month of the given datetime .
2119	Return the month name of the given datetime .
2120	Return the day of the given time series .
2121	Return the day name of the given datetime .
2122	Return the week of year of the given datetime .
2123	Returns the hour of the time series x .
2124	Return the minute of the time series x .
2125	Returns the second value of x in seconds .
2126	Capitalize a string .
2127	Concatenate two strings together .
2128	Returns True if x contains a pattern .
2129	Count the number of occurrences of pat in x .
2130	Find the first occurrence of sub in x .
2131	Get a string arrow from a string sequence .
2132	Return the index of the first occurrence of sub in x .
2133	Convert a string to a column string arrow .
2134	Strip leading whitespace from x and return a ColumnStringArrow .
2135	Pads a string to the specified width .
2136	Return a new string that is repeated x times .
2137	Return the index of the first occurrence of sub in x .
2138	Returns the index of the first occurrence of sub in x .
2139	Return a new column with x padded with fillchar .
2140	Return a new column with the contents of x removed .
2141	Return a slice of x from start to stop .
2142	Strip a string from x and return a ColumnStringArrow .
2143	Convert a string sequence to a string arrow .
2144	Convert a string to a column string arrow .
2145	Get the autotype of an array .
2146	Return a numpy . recarray representation of the object .
2147	Store properties to a file handle .
2148	Write a comment to a file handle .
2149	Writes a property to a file .
2150	Iterate over properties from a file - like object .
2151	Yield unicode lines from a file - like object .
2152	Show installed versions .
2153	This function is used to rename a keyword argument .
2154	Set the fft library .
2155	Tracking beats from a file .
2156	Adjusts the tuning of an audio file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time to frames .
2160	Convert a midi to a note .
2161	Convert Hz to Mel .
2162	Convert mel to hz .
2163	Returns an array of FFT frequencies .
2164	Calculate CQT frequencies .
2165	Returns a list of mel frequencies .
2166	A weighting function .
2167	Compute the time series of samples from X .
2168	Return an array of samples from X .
2169	Hybrid CQT filter .
2170	Compute pseudo - CQT .
2171	Compute the ICEQT filter .
2172	CQT Filtering function .
2173	Removes the last n_bins rows from the cqt_resp .
2174	CQT response function .
2175	Return the number of early downsamples .
2176	Perform an early downsampling of the input signal .
2177	Calculate the accelerometer cost .
2178	This function returns a list of tuples where each element in the list is a list of tuples where each element in the list is a list of tuples where each element in the list is a tuple with the first element and the second element is the second element in the list .
2179	Viterbi algorithm .
2180	Discriminative version of Viterbi .
2181	Return a uniform transition matrix .
2182	The transition loop .
2183	Return the transition cycle of n_states .
2184	Returns a transition matrix for the given number of states .
2185	Detect onset .
2186	Compute onset strength .
2187	Given a set of events and an energy return the minima of the backtrack .
2188	Calculate onset strength .
2189	r Write times to a CSV file .
2190	Write a wav file .
2191	Returns a matplotlib colormap for the given data .
2192	Plot a waveplot of audio data .
2193	Set the current image .
2194	Return the coordinates of a mesh .
2195	Check if axes is an instance of Axes .
2196	Helper function to scale axes .
2197	Returns a 2D array of n - dimensional FFT frequencies .
2198	Calculate the melhz for a given number of samples .
2199	Returns the frequency of the cqt at the given number of octaves .
2200	Returns a list of chromosomes for the given number of octaves .
2201	Returns a time series of n frames .
2202	Estimate pitch tuning using piptrack .
2203	Pillow - Tracking algorithm .
2204	Compute harm and perc from stft .
2205	Harmonic model .
2206	Compute the percussive value of y .
2207	Stretch a time series by a given rate .
2208	The pitch shift function .
2209	Remix y by a list of intervals .
2210	Return True if signal is nonsilent .
2211	Trim nonsilent frames from a signal .
2212	Split a signal into two samples .
2213	Phase vocoder .
2214	Convert amplitude to db .
2215	Calculate the spectrogram .
2216	Harmonic - percussive separation .
2217	Decompose an NMF matrix .
2218	Neural network filter .
2219	Helper function for nn_filter .
2220	Compute the Mel - Leibler weights .
2221	Create a set of chromosomes .
2222	Returns a function that can be used to create a float window .
2223	r Calculate the constant Q .
2224	r Calculate constant Q lengths .
2225	Convert CQ to chroma .
2226	Calculate the bandwidth of a given window .
2227	Get a window of size Nx .
2228	r Multirate frequency banks .
2229	r Calculate the MR frequency for a given tuning .
2230	Fill x with a window of length n_frames with a window of length hop_length
2231	Calculate the sum square of a window .
2232	Compute the diagonal of a window .
2233	Calculate the spectral centroid .
2234	Spectral rolloff .
2235	Calculate the spectral flatness .
2236	Calculate the polynomial features .
2237	Calculate zero crossing rate .
2238	Perform a chroma - stft filter on a spectrogram .
2239	r Calculate chroma from CQT .
2240	Calculate the melometric spectrogram .
2241	Calculate the Jaccard distance between two integers .
2242	Given a query and a list of intervals return the index of the candidate that overlaps the query .
2243	Given a set of intervals and a set of intervals find the overlap between them .
2244	Given a list of intervals return True if the intervals match .
2245	Match events from events_from to events_to .
2246	Calculate the salience of a signal .
2247	Interpolate harmonics .
2248	Interpolate 1D harmonics .
2249	Harmonics a 2D array .
2250	Load audio data from a file .
2251	Load audio data from audio file .
2252	Convert audio data to mono .
2253	Resample a signal to a given sampling rate .
2254	Calculate the autocorrelation of y .
2255	Logarithmic PCM .
2256	Clicks the audio at a given time .
2257	Calculate a tone from a frequency and duration .
2258	Return a Chirp signal .
2259	Return a set of all files in a directory .
2260	Stretch a demo .
2261	Parse command line arguments .
2262	Main demo function for HPSS .
2263	r Beat Tracker .
2264	Return a list of beats for a given time period .
2265	Calculate the Beat local score .
2266	Beat tracking routine .
2267	Calculate the last beat from the cumulative score .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag matrix to a recurrence .
2270	Decorator to apply a timelag filter to a function .
2271	Create a sub - segment of the given frames .
2272	Agglomerative clustering .
2273	Enhance a path .
2274	Detect onsets .
2275	Returns a frame of length frame_length from y .
2276	Check if audio data is valid .
2277	Validate that x is an integer .
2278	Fix the length of the data .
2279	Sort a 2D array by the given axis .
2280	Normalize the magnitude of an array S .
2281	Returns True if x is a local max of the given axis .
2282	Picks a peak from the input array .
2283	Sparsify a matrix of rows .
2284	Roll a sparse matrix along a specified axis .
2285	Convert a buffer of bytes to a float .
2286	Convert an index to a list of slices .
2287	Sync the data with the given index .
2288	Compute the soft mask of X and X_ref
2289	Calculate the tiny value of x .
2290	Convert frames to video files .
2291	Read the image from the VCAP .
2292	Get a single frame from the VCAP .
2293	Convert a CVT file into a list of frames .
2294	Track the progress of the given tasks .
2295	Track the progress of a sequence of tasks .
2296	Flip an image .
2297	Rotates an image by a given angle .
2298	Given a list of bboxes return a new array with the clipped bboxes .
2299	Scale a bounding box by a given scale .
2300	Crop an image to a bounding box .
2301	Returns an impad of the given shape .
2302	Improve impad to multiple images .
2303	Scale the size to a given scale .
2304	Resizes an image to a given size .
2305	Resize an image to a new image .
2306	Rescale an image to a given scale .
2307	Register a file handler with a list of file formats .
2308	Get a priority from a string or priority enum .
2309	Dequantizes an array .
2310	Wrapper around cv2 . imshow
2311	Create an image with a list of bboxes .
2312	Read a flow from a file .
2313	Write a flow to a file .
2314	Dequantizes a flow .
2315	Load a state_dict from a module .
2316	Load a checkpoint from a file .
2317	Convert a dict of weights to a dict of CPU weights .
2318	Save a model checkpoint to a file .
2319	Initialize an optimizer object .
2320	Initialize a logger .
2321	Returns the current learning rate .
2322	Register a hook .
2323	Run the workflow .
2324	Register training hooks .
2325	Convert a video file using ffmpeg .
2326	Resize a video file .
2327	Cut video from a video file .
2328	Concatenate video files into a single video file .
2329	Return a list of items from a file .
2330	Read a dict from a file .
2331	3x3 convolution with padding
2332	Create an object from a dict .
2333	Read an image from a file or path .
2334	Decode image from bytes .
2335	Write an image to a file .
2336	Convert a BGR image to a grayscale image .
2337	Convert a gray scale image to a gray scale image .
2338	Return an iterable of dst_type casts to dst_type .
2339	Checks if a sequence is of the expected type .
2340	Slice a list of integers .
2341	Decorate a function to check that the prerequisites are met .
2342	Calculate the average of n values .
2343	Convenience function for scattering a tensor or a list of devices .
2344	Convert a color to a color value .
2345	Check the time of a timer .
2346	Start the timer .
2347	Return the time since the start of the timer .
2348	Return the time since the last check .
2349	Show a flow .
2350	Convert a 3D flow to RGB .
2351	Create a color wheel from a list of bins .
2352	Calculate accuracy .
2353	Perform scattering on target_gpus .
2354	Helper function for scattering inputs and kwargs .
2355	Perform the request and return a Response .
2356	Return a JSON representation of the response .
2357	Return the contents of the response as a string .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Create a new Request object .
2361	Start the master process .
2362	Convert a task dict from v2 to v3 .
2363	Parse a YAML file and return a mapping of line numbers .
2364	The name of the wheel distribution .
2365	Get the basename of the archive .
2366	Add additional requirements to setup . cfg .
2367	Convert an egg - info file to a dist - info file .
2368	Create a message with the given text .
2369	Create a suggested actions message .
2370	Create a list of attachments .
2371	Create a list of attachments .
2372	Create an activity with a list of attachments .
2373	Create a trace from a turn activity .
2374	Set the telemetry client .
2375	Read one or more keys from the storage .
2376	Write changes to the storage .
2377	Deletes one or more keys from the container .
2378	Create a StoreItem object from the result .
2379	Create a dictionary from a store item .
2380	Sanitize a key .
2381	Create a database and a container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fill the QNA event with the results of the query .
2385	Returns a conversation reference for the given activity .
2386	Get the name of a step .
2387	Check if a channel supports suggested actions .
2388	Check if a channel supports card actions .
2389	Get channel id from turn context .
2390	Check if the given auth header is a valid token from the emulator .
2391	Create a hero card attachment .
2392	A list of all parameters .
2393	Returns a new instance with the same definition as this one .
2394	Returns a new gate that is the inverse of this gate .
2395	Set the control value of a classical register .
2396	Return a copy of the object .
2397	Return a QASM if statement .
2398	Return the QASM for this parameter .
2399	Run the circuit and return a new circuit .
2400	Perform a pass and return a DAG .
2401	Return a list of all passes in the working list .
2402	Return a dictionary of all passes in this flow .
2403	Factory function for creating a FlowController .
2404	Create a UBase object .
2405	Return the parameters for a single gate .
2406	Returns the matrix of a single gate .
2407	Return the einsum - matmul index for a set of gate indices .
2408	Returns the einsum - vecmul index of a set of gate indices .
2409	Helper function for _einsum_matmul_index .
2410	Convert a circuit to a DAG circuit .
2411	Function to calculate the likelihood of an exponential distribution .
2412	Compute the oscillation function .
2413	Plot a coherence .
2414	Returns a list of numpy arrays with mean and standard deviation
2415	Plot RBF data .
2416	Split a list of runs on parameters .
2417	compose u3 from theta1 phi1 and lambda2
2418	Convert YYZ to ZYZ .
2419	Validate that the input is a valid quantum state .
2420	Removes the background from the image .
2421	Get the span of a gate .
2422	Convert a circuit to an instruction .
2423	Run the Transpiler on a DAG .
2424	Find the best subset of n_qubits .
2425	Create a barrier .
2426	Calculate the average value of a dictionary of counts .
2427	Process a bit_id node .
2428	Process a custom unitary .
2429	Process a gate node .
2430	Process a CNOT node .
2431	Process a measure node .
2432	Process if node .
2433	Create a DAG operation .
2434	Return the duration of the given channels .
2435	Get the start time of a channel .
2436	Get the stop time for the given channels .
2437	Iterate over all instructions in this schedule .
2438	Check that the value is of the expected type .
2439	Dump additional data .
2440	Load additional data .
2441	Create a validation schema from a schema class .
2442	Validate a model instance .
2443	Decorator to validate after model initialization .
2444	Convert the model to a dictionary .
2445	Load a model from a dict .
2446	Apply the QFT algorithm to the circ .
2447	Partial trace of a vector .
2448	Vectorize a density matrix .
2449	Given a vectorized square matrix return a vectorized square matrix .
2450	Convert a choi vector to a list of rauli vectors .
2451	Return a copy of the array where the values are less than epsilon .
2452	Compute the outer product of two vectors .
2453	Calculate the concurrence of a state .
2454	Calculate the shannon entropy of a vector .
2455	Calculate the entropy of a state .
2456	Calculate the mutual information of a state .
2457	Compute the entanglement of a state - vector .
2458	Return the Entropy of a qubit .
2459	Flatten a schedule into a single schedule .
2460	Shift a schedule by a given time .
2461	Insert a child schedule into a parent schedule .
2462	r Append a schedule component to the end of the parent schedule .
2463	Add an U3 gate to this gate .
2464	Returns the status of the backend .
2465	Start the iteration .
2466	Returns the time remaining for the current iteration .
2467	Disassembles a QObject into a list of circuits .
2468	Calculates the Hamming distance between two strings .
2469	Create a Quaternion from an axis rotation .
2470	Calculate quaternion from euler angles .
2471	Normalize the quaternion .
2472	Convert to a 3x3 matrix .
2473	Convert the rotation matrix to an euler rotation matrix .
2474	Takes a dictionary of data and returns a dictionary with the most common values for each label .
2475	Plot a histogram of data .
2476	Check that the value is of the correct type .
2477	Raises an exception if the index is out of range .
2478	Check if mat is a square matrix .
2479	Check if mat is a diagonal matrix .
2480	Check if op is a symmetric matrix .
2481	Returns True if mat is a Hermitian matrix .
2482	Returns True if mat is a positive semidefinite matrix .
2483	Check if mat is an identity matrix .
2484	Check if a matrix is unitary .
2485	Convert a QuantumChannel to a Chai object .
2486	Convert a QuantumChannel to a SuperOp .
2487	Convert rep to Kraus .
2488	Convert Chi to Chi .
2489	Convert from PTM to PTM .
2490	Convert Kraus to Stinespring .
2491	Convert a rep to an operator .
2492	Convert an operator to a NumPy array .
2493	Convert Stinespring to Operator representation .
2494	Convert a superop to a choi .
2495	Helper function for _choi_to_superop
2496	Convert a Kraus matrix to a choi matrix .
2497	Convert a choi matrix to a kraus matrix .
2498	Convert stinespring to kraus .
2499	Convert stinespring to choi .
2500	Convert kraus to stinespring .
2501	Convert kraus to superop .
2502	Convert ChI to ChI .
2503	Convert Chi - to - Chi transform .
2504	Reravel between two matrices .
2505	Transform a pauli matrix to a pauli matrix .
2506	Check that the input_dim is an n - qubit channel .
2507	Hide tick lines and labels .
2508	Set the label convention .
2509	Clears all points vectors and annotations .
2510	Add vectors to the vector list .
2511	Add an annotation to the graph .
2512	Render the figure .
2513	Plot the front of the sphere .
2514	Show the figure .
2515	Two - qubit Kak from a unitary matrix .
2516	Return the top of the image .
2517	Return the mid of the image .
2518	Return the center of the bot .
2519	Return the length of the message .
2520	Return a list of parameters for a label instruction .
2521	Generate a label for a box instruction .
2522	Return the latex representation of the parameter .
2523	Compile a set of circuits into a runnable qobj .
2524	Add a filter for deprecation warnings .
2525	Return local hardware information .
2526	Check if the given hostname has a connection .
2527	Check the status of a job variable .
2528	Return a constant array with the given times and amp .
2529	Calculate the square of a time series .
2530	Calculate the triangle of a time series .
2531	Calculate the cosines of a time series .
2532	r Fixes the width of a Gaussian distribution .
2533	r Calculate the gaussian of a time series .
2534	Derivative of a Gaussian distribution .
2535	r Calculate the square of a time series .
2536	Create a default pass manager .
2537	Create a default pass manager simulator .
2538	Checks if the given register is a Quantum or Classical Register .
2539	Returns a copy of this circuits in reverse order .
2540	Inverse of the circular graph .
2541	Append an instruction to the context .
2542	Attach an instruction to the stack .
2543	Add one or more registers to the circuit .
2544	Check that there are no duplicate qubits .
2545	Check that the qargs are valid .
2546	Check that the cargs are valid .
2547	Check that two circuits are compatible .
2548	Return a QASM string .
2549	Draw the circuit .
2550	Returns the number of ops in this gate .
2551	The total width of all registries .
2552	Count the number of ops in each instruction .
2553	Returns the number of connected components .
2554	Returns a new circuit with the given parameters bound to the given dictionary .
2555	Bind a value to a parameter .
2556	Plot a Pulse Drawer .
2557	Search forward n swaps .
2558	Given a layout and a list of gates return a list of mapped gates .
2559	Calculate the distance between the layout and the coupling map .
2560	Calculate the score of a step .
2561	Copy circuit metadata from source_dag to target_dag .
2562	Given a gate and a layout return a copy of it .
2563	Create a list of swap ops from an edge .
2564	Run the transpiler on a DAG .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge from one qubit to another .
2567	Create a subgraph of this CouplingMap .
2568	List of physical qubits .
2569	Returns True if the graph is weakly connected .
2570	Compute distance matrix for the coupling graph .
2571	Returns the distance between two physical qubits .
2572	Transpile a set of circuits .
2573	Cu1 gate .
2574	Inverse the instruction .
2575	Call q_if on all instructions .
2576	Return a new gate with the given classical and value .
2577	Subscribes a callback to an event .
2578	Dispatch an event to all registered subscribers .
2579	Unsubscribe a callback from an event .
2580	Publish an event to the broker .
2581	Initialize a QuantumRegister .
2582	Define a disentangling circuit .
2583	Create a disentangler circuit .
2584	Calculate the bloch angle between two complex numbers .
2585	Multiplex a list of angles to a target gate .
2586	Returns True if the given value is a virtual value .
2587	Return a copy of this layout .
2588	Combine this layout into an edge map .
2589	Return a new ToffoliGate with two control points .
2590	Insert a schedule into the schedule .
2591	Check if a property is fenced .
2592	Convert a list of gates to a list of indices .
2593	Run the transpiler .
2594	Update a single - qubit gate layer .
2595	Returns a list of Pauli objects for the given number of qubits .
2596	r Create a Pauli object from a label string .
2597	Initialize from a boolean vector .
2598	r Compute the SGN product of two Pauli objects .
2599	Convert a QuantumInfo to an Operator object .
2600	Create a QuantumInstruction from this circuit .
2601	Update z .
2602	Update x .
2603	Insert paulis at the given indices .
2604	Append paulis to the list .
2605	Delete the qubits at the given indices .
2606	Create a random set of qubits .
2607	Create a Pauli instance from a Pauli label .
2608	Get the measure outcome for a given qubit .
2609	Add a sample measure to the state vector .
2610	Add a QASM measure to the model .
2611	Add a QASM reset to the given qubit .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Get the state vector .
2615	Check whether measure sampling can be performed .
2616	Run a basic Aer job .
2617	Run a job .
2618	Raises an exception if the number of qubits is greater than maximum .
2619	Validate the initial unitary .
2620	Initialize the unitary .
2621	Get the unitary .
2622	Run a job .
2623	Validate that the qobj is valid for this circuit .
2624	Check if the given object is a bit .
2625	Run the transpiler .
2626	Check if this interval overlaps with another interval .
2627	Shift the interval by the given time .
2628	Returns a new Timeslot for the given time .
2629	Return the start time of the given channels .
2630	Get the stop time of the given channels .
2631	Returns True if the timeslot collection is mergeable with the timeslot collection .
2632	Returns a new TimeslotCollection with the merged timeslots .
2633	Shifts all timeslots at a given time .
2634	Report as a comment or issue .
2635	Process pauli data .
2636	Plot a Paulivec state .
2637	Add an RZZ gate to the circuit .
2638	Add a cswap gate .
2639	Initialize the backend_prop .
2640	Create a program graph from a DAG .
2641	Select the next program edge .
2642	Select the best candidate gate from the gate list .
2643	Select the highest reliab of the given prog_qubit .
2644	Run the transpiler .
2645	Returns a list of all instructions in this gate .
2646	Inverse the gate .
2647	Given a list of qregs return a new gate .
2648	Apply a classical condition to each gate .
2649	Returns True if the matrix is unitary .
2650	Conjugate operator .
2651	Transpose the operator .
2652	Return a new Operator with the power of n .
2653	Return the shape of the model .
2654	Convert a QuantumCircuit to an Operator .
2655	Helper function for swapping a mapper layer .
2656	Separate a bitstring into a list of substrings .
2657	Format level 0 memory .
2658	Format a level one memory .
2659	Format level 2 memory .
2660	Format a dictionary of counts .
2661	Format a state vector into a complex array .
2662	Format a unitary matrix .
2663	Decorator to ensure that a job is submitted .
2664	Submit the job .
2665	Returns the status of the job .
2666	Returns True if this frequency range includes lo_freq .
2667	Plot a bloch multivector .
2668	Return a dictionary of default frequencies for each qubit .
2669	Get the default measurement frequencies for each channel .
2670	Given a DAG return a new DAG .
2671	Plot the state of a QSphere .
2672	Choose a random number from n and k .
2673	Returns the index of the first k elements in the list .
2674	Plot a paulivec state .
2675	Get a list of unique IBMQ backends .
2676	The op of this node .
2677	Sample a constant pulse .
2678	Sample a zero pulse .
2679	Sample a square Pulse .
2680	Sample a Sawtooth pulse .
2681	Sample a triangular Pulse .
2682	Sample a cosine pulse .
2683	Sine Pulse .
2684	r Sample a Gaussian Pulse .
2685	r Derivates a Pulse from a Gaussian distribution .
2686	Sample a gaussian square pulse .
2687	Return the distance between the axis and the real axis .
2688	Print the QReg as a string .
2689	Return an instance of backend_cls .
2690	Rename a DAG register .
2691	Remove all ops with the given name .
2692	Add a QuantumRegister instance to the circuit .
2693	Add a ClassicalRegister instance to the circuit .
2694	Add a wire to the DAG .
2695	Check that the condition is valid .
2696	Return a list of all bits in a condition .
2697	Add an operation node to the graph .
2698	Applies an operation back to the DAG .
2699	Check that all of the registers in edge_map are valid .
2700	Check that the wire map is consistent .
2701	Map the condition to the wire_map .
2702	Extend the current DAG back into the current DAG .
2703	Compose the back - hand side of the circuit .
2704	Check that the list of wires is valid .
2705	Make a mapping between the pred and succ edges of a node .
2706	Return the full pred_succ_map and full_succ_map .
2707	The topological nodes of the multi - graph .
2708	Get the edges of the multi - graph .
2709	Returns a list of all op nodes in the MultiGraph .
2710	Returns a list of all gate nodes .
2711	Returns a list of named nodes .
2712	Returns a list of two Q - gate nodes .
2713	Returns the predecessors of the given node .
2714	Returns a list of the predecessors of the given node .
2715	Get the ancestors of the given node .
2716	Returns a list of the successors of the given node .
2717	Removes an operation node from the graph .
2718	Removes all ancestors of the given node from the graph .
2719	Remove all descendants of the given node .
2720	Remove all non - ancestors of the given node .
2721	Remove all nondescendants of the given node .
2722	Returns a list of layers in the multigraph .
2723	Return a list of serial layers for this circuit .
2724	Iterate over the multigraph layers .
2725	Return a set of all runs that match the given namelist .
2726	Returns a generator that yields all nodes on the given wire .
2727	Count the number of topological operations .
2728	Returns a summary of the tensor s properties .
2729	Return a TomographyBasis object .
2730	Add a Pauli measurement to the circuit .
2731	Set tomography .
2732	Process tomography set .
2733	Create tomography circuits .
2734	Return tomography data for a given tomoset .
2735	Calculate marginal counts for a set of meas_qubits .
2736	Fit the tomo data using the given method .
2737	Compute the least - squares fit of the tomo data .
2738	Compute the projector of a list of operations .
2739	Calculate the inverse of the linear transformation .
2740	Returns the wizard of a vector rho .
2741	Calculate the Wigner data .
2742	Perform measaction on a circuit .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Calculate the euler angles for a 1q unitary matrix .
2746	Simplifies a U gate .
2747	Enlarge with ancilla layout .
2748	Return a table of Qubits .
2749	Build the job history tab .
2750	Plot the history of a list of jobs .
2751	Draw the PulseData object .
2752	Cu3 gate .
2753	Build a bell circuit .
2754	Transpiles a set of circuits .
2755	Transpiles a circuit .
2756	Execute a set of experiments .
2757	The first drive channel in the queue .
2758	The first control channel in the queue .
2759	The first measurement channel in the queue .
2760	Return the first acquire channel in the queue .
2761	Set the input state of the input signal .
2762	Assemble a list of experiments .
2763	Remove all handlers from qiskit logger .
2764	This function generates an iplot state hint on the input state .
2765	Process the fidelity between two channels .
2766	Read data from the input stream .
2767	Remove the current lexer from the stack .
2768	Push a new lexer onto the stack .
2769	Create a DAGCircuit from a DAG .
2770	Get the Qobj conversion method for the given instruction .
2771	Convert an acquire instruction to a QOBJ model .
2772	Convert a frame change to a QObject .
2773	Convert a persistent value to a QObject .
2774	Convert a drive instruction to a QObject .
2775	Convert a snapshot to a QObject .
2776	Update the annotations of a pulse .
2777	Generates a function that can be used to sample a continuous pulse .
2778	Filter a list of backends based on a list of filters .
2779	Resolve a backend name from a list of backends .
2780	Convert a DAG to a Quantum circuit .
2781	Make a dictionary representation of a matrix observable .
2782	Update the current symtab .
2783	Verify that a symbol is declared as a bit in the gate .
2784	Verify that a list of expressions is valid .
2785	Verify that the symbol is a gate or opaque call .
2786	Verify that the given symbol is in the given type .
2787	Verify that the object is a list of RegObjects .
2788	Find the column of the token in input_ .
2789	Parse the debug flag .
2790	Parse data and return a QASM object .
2791	Run the parser .
2792	Parse the QASM file .
2793	Create a crz gate .
2794	Return the basis state of a bitstring .
2795	Compute the projector of a state matrix .
2796	Calculate the purity of a state .
2797	Run the graph .
2798	Create a widget for a backend .
2799	Update backend status .
2800	Generates a widgets . HBox containing the current value and the maximum value .
2801	Run CX on the given dag .
2802	Get a Qiskit backend matching the criteria .
2803	The shape of the bipartite graph .
2804	Given a list of bit labels return a tuple of register names and the maximum value for each register .
2805	Helper function to truncate float values .
2806	Returns a LaTeX string .
2807	Returns the number of columns and the width of the image .
2808	Calculate the beamer page size .
2809	Load a schema from a JSON file .
2810	Get a jsonschema validator .
2811	Load default schemas and validators .
2812	Validate a JSON dict against a schema .
2813	Format a ValidationError as a string .
2814	Calculate the majority of a line .
2815	Unmajority function .
2816	Generate latex source from a QCircuit .
2817	Create a Matplotlib Drawer for a circuit .
2818	Returns a random unitary operator .
2819	Generates a random density matrix .
2820	Generate a Ginibre matrix .
2821	Random density matrix .
2822	Returns a random density of bures .
2823	Returns a list of all custom unitary calls .
2824	Return a new SuperOp with the power of n .
2825	Compose a sub - system from another one .
2826	Convert an instruction to a SuperOp .
2827	Run the DAG and return a DAG .
2828	Convert a list of circuits into a Qobj .
2829	Unrolls all 3q - or - more gates in a DAG .
2830	Decompose the gate into a DAG .
2831	Define the definition of the gate .
2832	Check that the value is of the expected type .
2833	Check that the value is of the correct type .
2834	Set the atmospheric tolerance .
2835	Set the RTOL parameter .
2836	Reshapes the input_dims and output_dims .
2837	Returns a tuple of input dimensions .
2838	Returns a tuple of the output dimensions .
2839	Return a copy of the model .
2840	Return a new Qiskit instance with the power of n .
2841	Return a tuple of dimensions .
2842	Implementation of the einsum function .
2843	Try to find a valid schema among the choices .
2844	Raises a ValidationError if the value is not a valid schema
2845	Check that the value is of the expected type .
2846	Calculate the fidelity between two states .
2847	Compute the SVD of a matrix .
2848	Returns the inverse of this snapshot .
2849	Set the label .
2850	Returns True if the operator is unitary .
2851	Convert the matrix to an operator .
2852	Convert QuantumChannel to Instruction .
2853	Initialize a QuantumChannel transformer .
2854	Sort enum for model .
2855	Patch the strptime module .
2856	Get the locale map for the given languages and locales .
2857	Get a list of available locales .
2858	Check if tokens are valid .
2859	Split a string into words .
2860	Parse a date string .
2861	Parse a date string into a time object .
2862	Check if a date string is a valid date string .
2863	Translate a date string .
2864	Parse a date string with a list of date formats .
2865	Get the ammo generator .
2866	Convert a Java exception to a net number .
2867	Convert a Java exception to an HTTP exception .
2868	Read config from config file .
2869	Compose the config file .
2870	Get information about the stream .
2871	Compose the configuration of the stepper .
2872	Log stdout and stderr .
2873	Expands a time string into an integer .
2874	Read stepper configuration .
2875	Prepare the stepper .
2876	Returns the path to the SPTD file .
2877	Read the stepper info from the file .
2878	Write stepper info to a JSON file .
2879	Make stpd - file .
2880	Create a step from a list of rps_schedule .
2881	Calculate the rps at a given time .
2882	Execute a command and return its return code .
2883	Decode monitoring data .
2884	Create a list of points for a given label .
2885	Publish a status .
2886	Count the number of codes that match the given regex .
2887	Stop the feeder .
2888	Feed data from the STPD file .
2889	Initialize logging .
2890	Add user options .
2891	Configure the plugin .
2892	Graceful shutdown .
2893	Collect data from the queue .
2894	Notify all listeners of aggregated data .
2895	Get a marker for a given marker type .
2896	Parse a duration string into seconds .
2897	Start the agent .
2898	Start the agent .
2899	Try to discover a JMeter UDP port .
2900	Add jmeter components to the configuration file .
2901	Terminate the process .
2902	Read stats from a list of lines .
2903	Create a custom criterion from a string .
2904	Get monitoring config from XML file .
2905	Create a startup config file .
2906	Check the disk usage .
2907	Check if there is enough free memory .
2908	Get the size of the terminal .
2909	Get right line from widget output .
2910	Truncate line_arr to max_width characters .
2911	Render the left panel .
2912	Render the screen .
2913	Add a info widget to the list .
2914	Fill the rectangle with spaces .
2915	Returns the length of the given line .
2916	Create a load plan .
2917	Returns a string representation of the level .
2918	Add a info widget to the screen
2919	Make a request to the writer endpoint .
2920	Load plugins .
2921	Search for a plugin of a given type .
2922	Returns a list of plugins of the given type .
2923	Copy a file to the artifacts directory .
2924	Add an artifact file to the collect .
2925	Create a temporary file with the given suffix and prefix .
2926	Load config files .
2927	Flush the configuration to a file .
2928	Get a list of options for a given section .
2929	Find all sections that start with a given prefix .
2930	Extract statistics from a chunk of stats data .
2931	Get information about the device .
2932	Install monitoring agent .
2933	Poll for data from agents .
2934	Send collected data to all listeners .
2935	Detect the configuration type .
2936	Handle data items .
2937	Decode agents data into a list of dicts .
2938	Subscribe to the given channels .
2939	Subscribes and closes the event loop .
2940	Close the websocket connection .
2941	Perform one HTTP request .
2942	Submit an order .
2943	Get an order by ID .
2944	Get a position by symbol .
2945	List all assets .
2946	Get an asset by symbol
2947	Create a joining subplan .
2948	Check that obj is a dict .
2949	Check if obj is a dict .
2950	Construct an event - logger .
2951	Construct a json - event - logger .
2952	Create a Config instance from a config file .
2953	Get the config for a given repository .
2954	Format config for GraphQL .
2955	Get a pipeline by name .
2956	Returns a list of all pipelines .
2957	Get the next event from the queue .
2958	Execute a pipeline through a queue .
2959	Wait for all processes to finish .
2960	Create a Dagster Field instance .
2961	Build the execution plan .
2962	Builds a plan from a pipeline definition .
2963	Builds a sub - pipeline from a list of solid names .
2964	Returns the solid with the given name .
2965	Construct publish comands .
2966	Release a new version .
2967	Create a passthrough context definition .
2968	Decorator to create input selector schema .
2969	Decorator for generating output selector schema .
2970	Wraps the given text with the given prefix .
2971	Download a file from S3 .
2972	Upload a file to S3 .
2973	A context manager for user code execution errors .
2974	Create a new directory .
2975	Context manager for user code execution .
2976	Create a DagsterLog object .
2977	Returns True if any step was successful .
2978	True if all steps have been skipped .
2979	Return a dictionary of transformed values .
2980	Returns the value of the transformed value .
2981	Return the failure data for each step .
2982	A configuration dictionary with typed fields .
2983	Check if config value is a valid dataset .
2984	Check if the config value is a valid table .
2985	Execute a core transform .
2986	Decorate an existing type as a dagster type .
2987	Decorator for creating a resource definition .
2988	Create a new event .
2989	Coalesce the topological steps of the given execution plan .
2990	Get connection parameters .
2991	Get a new connection to the database .
2992	Create a new cursor .
2993	Close the database connection .
2994	Create a model instance from model_dict .
2995	Convert a list of dictionaries into a list of MDL objects .
2996	Create a form field for the array field .
2997	Convert the given value to a model instance .
2998	Apply core filters to the queryset .
2999	Compute the NFPS of a uniform distribution .
3000	Compute the NFPS for the given counts and sizes .
3001	Compute the best set of partitions .
3002	Return a list of optimal partitions for the given sizes and counts .
3003	Calculate the c - vector of two points .
3004	Initialize the slots .
3005	Return the number of bytes needed to store the hash .
3006	Serialize this MinHash into a buffer .
3007	Deserialize a LeanMinHash from a byte string .
3008	Update the hash .
3009	Merge this MinHash with another MinHash .
3010	Returns a new MinHash with the union of two MinHash objects .
3011	Index a set of entries .
3012	Query the database for the given hash and size .
3013	Calculate the minimum hash of the input vector .
3014	Remove a key from the set .
3015	Update the register with the given value .
3016	Count the number of non - zero values .
3017	Merge HyperLogLog with another HyperLogLog .
3018	Clear all registers .
3019	Calculate the APK score .
3020	Compute the mean k - grams from actual and predicted .
3021	Sort the hashtables .
3022	Query the cache for the given minhash and return a list of k keys .
3023	Close all hashtables and keys .
3024	Create an ordered list storage .
3025	Create an unordered set storage .
3026	Get user details .
3027	Set the social login process to CONNECT .
3028	Select text from a list of strings .
3029	Parse a scoped selector .
3030	Parse a statement .
3031	Parse the value .
3032	Advance the parser to the next line .
3033	Parse a configurable reference .
3034	Augment an exception with a message .
3035	Return a markdown representation of an operative config string .
3036	This method is called after a session is created .
3037	Wrap a function so that it can be used as a decorator .
3038	Decorate a function or class .
3039	Return a string representation of a value .
3040	Clears the config .
3041	Bind a Gin binding key to a value .
3042	Returns the value bound for the given binding key .
3043	Returns True if fn_or_cls has a parameter named arg_name .
3044	Get the argument spec for a function .
3045	Return a list of positional parameter names .
3046	Returns a list of all positional parameter names .
3047	Get the default values for the given function .
3048	A context manager for config_scope .
3049	Decorator for creating a configurable decorator .
3050	Return an operative config string .
3051	Parse a config file .
3052	Register a file reader function .
3053	Parse a config file .
3054	Parse a list of config files and parse the bindings .
3055	Parse a string value into a ConfigParser object .
3056	Finalizes the configuration .
3057	Iterate over flattened values .
3058	Iterate over all references .
3059	Set a constant .
3060	Create constants from an enum class .
3061	Given a partial selector return a list of matching selectors .
3062	Get all matches that match the partial_selector .
3063	Returns the minimal selector for the given selector .
3064	Return a string representation of a search query .
3065	Parse the Retry - After header .
3066	Validate the value of the property .
3067	Return the property description as a dict .
3068	Set the value of the field .
3069	Get a thing by its index .
3070	Initialize things and hosts .
3071	Set default CORS headers .
3072	Check if the request is a valid host .
3073	Get a single thing .
3074	Called when a message is received from the client .
3075	Perform actions on a thing .
3076	Delete an action from a thing
3077	Start the server .
3078	Return the action description as a dictionary .
3079	Start the thing .
3080	Mark the thing as completed .
3081	Return the event description as a dictionary .
3082	Get the IP address .
3083	Return a list of IPv4 or IPv6 addresses .
3084	Set the value to the given value .
3085	Notify the user of an external update .
3086	Return a JSON - ready representation of this thing .
3087	Sets the href prefix for all actions and properties .
3088	Returns a dictionary of property descriptions .
3089	Returns a list of action descriptions .
3090	Returns a list of event descriptions .
3091	Add a property to the resource .
3092	Remove a property from the model .
3093	Get the value of a property .
3094	Returns a dictionary of all properties .
3095	Set the value of a property .
3096	Get an action by name and id .
3097	Add an event to the queue .
3098	Add an event to the list of available events .
3099	Perform an action .
3100	Remove an action from the queue .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Send a property status message to all subscribers .
3106	Send an action status to all subscribers .
3107	Send an event to all subscribers .
3108	Annotate the model with the given annotations .
3109	Update the model with the given fields .
3110	Bulk insert .
3111	Create a new record in the database .
3112	Create a new record and return it .
3113	Build a PostgresInsertCompiler .
3114	Check if the field is magical .
3115	Get insert and update fields .
3116	Called when a model is saved .
3117	Called when a model is deleted .
3118	Returns a boolean expression where the given fields are not None .
3119	Returns a new HStoreValue with resolved values .
3120	Return the SQL representation of the HSTORE .
3121	Return a copy of this instance with the given relabels .
3122	Add join conditions to the query .
3123	Check if the given field is a HStoreField .
3124	Insert a list of objects into the table .
3125	Create a required constraint in the HSTORE .
3126	Rename an existing HSTORE required constraint .
3127	Drop the required constraint from the HSTORE .
3128	Returns the name of the required constraint .
3129	Create a SQL CREATE INDEX statement .
3130	Create a custom command class .
3131	Get the database backend base class .
3132	Create the hstore extension .
3133	Prepare the value of the field .
3134	Return a RETURNING statement .
3135	Return a list of SQL statements .
3136	Rewrite an insert statement .
3137	Rewrite the insert update statement .
3138	Return a rewrite for insert_nothing .
3139	Build the conflict target .
3140	Get model field by name .
3141	Format a model field name .
3142	Format the value of a model field .
3143	Create a HSTORE unique constraint .
3144	Rename a unique constraint in the HSTORE .
3145	Drop a unique constraint from the HSTORE .
3146	Generate a unique constraint name .
3147	Iterate over uniqueness keys .
3148	Add an extra condition to the query .
3149	Return the SQL representation of the query .
3150	Returns the tdist95 conf level for the given df .
3151	Calculate the variance of the pooled samples .
3152	Calculate the t - score between two samples .
3153	Check if two samples are significant .
3154	Topological sort .
3155	Return a generator of n queens .
3156	Plays the node at the given board .
3157	Select a random position from the unexplored list .
3158	Move a random playout from the board .
3159	Filter out benchmarks that are not compatible with Python 2 .
3160	Expand a benchmark name to a list of bench names .
3161	Generate a table of strings .
3162	Initialize benchmarks .
3163	Returns the domain of the curve .
3164	Fetch all posts from the channel .
3165	Parse the raw_posts and return a list of posts .
3166	Get information about a specific user .
3167	Fetch all items for a given category .
3168	Fetch items from the feed .
3169	Setup command line parser .
3170	Fetch all items for a given category .
3171	Get a list of bugs for a given date .
3172	Get comments for a given bug .
3173	Get the history of a bug .
3174	Get attachments for a given bug .
3175	Get a list of notes for an issue .
3176	Fetch merge requests from GitLab .
3177	Get all notes for a given merge .
3178	Get all merge versions for a given merge id .
3179	Get a list of merges .
3180	Merge a project into another repository .
3181	Get all versions of a given merge .
3182	Merge a version of a project .
3183	Fetch notes for an item .
3184	Fetch emojis from GitLab .
3185	Get a list of emojis for a given item and note .
3186	Calculate time to reset the rate limit .
3187	Fetch items from GitLab .
3188	Initialize the rate limit .
3189	Setup command line parser .
3190	Fetch messages from a given date .
3191	Return a unique identifier for a metadata item .
3192	Get the number of members of a conversation .
3193	Get channel information .
3194	Get information about a user .
3195	Setup command line parser .
3196	Return the timestamp of the last time the metadata was updated .
3197	Parse a buglist from a CSV file .
3198	Parse bugs details .
3199	Parse a bug activity .
3200	Logout from Bugzilla .
3201	Get the XML metadata for this bug .
3202	Get a list of bugs .
3203	Get a list of bugs .
3204	Get the activity of a bug .
3205	Fetch events from a given date range .
3206	Fetch events from a group .
3207	Get events from a group .
3208	Get all comments for a given event .
3209	Get a list of rsvps for a given event .
3210	Fetch a question from the server .
3211	Fetch comments for a question .
3212	Builds a question object from html_question .
3213	Get questions from the API .
3214	Get a single HTML question .
3215	Get comments for a post .
3216	Parse a question container .
3217	Parse answers from an HTML question .
3218	Parse number of html pages .
3219	Parse user info .
3220	Fetch items from Gerrit .
3221	Parse reviews from a JSON string .
3222	Fetch all reviews from Gerrit28 .
3223	Get the server version .
3224	Get all reviews for a given item .
3225	Returns the next group item to retrieve .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute a gerrit command from the remote server .
3229	Setup command line parser .
3230	Fetch issue data .
3231	Fetch attachments for an issue .
3232	Fetch all messages for a given issue .
3233	Fetch all activities for a given issue .
3234	Fetch user data .
3235	Get information about a user .
3236	Get the raw text of an issue .
3237	Get a collection of items for a given issue .
3238	Get the URL of the project .
3239	Fetch items from a collection .
3240	Get subscriptions from groupsio .
3241	Find group id from group name
3242	Wrapper around requests . get .
3243	Setup the command line parser .
3244	Generate a UUID from a list of arguments .
3245	Fetch items from a backend .
3246	Fetch items from an archive .
3247	Find all backends for a given top_package .
3248	Fetch all items in a given category .
3249	Fetch items from an archive .
3250	Filter classified data .
3251	Parse command line arguments .
3252	Set authentication arguments .
3253	Set the arguments for the archive command .
3254	Add output arguments to the parser .
3255	Run the backend .
3256	Initialize the archive manager .
3257	Return the timestamp of the last modification of a metadata item .
3258	Parse a mbox file into a list of dicts .
3259	Fetch and parse messages from the mailing list .
3260	Copy a mbox to a temporary file .
3261	Validate the message .
3262	Convert a casedict to a dict .
3263	Get a message by key .
3264	Fetch items for a given category .
3265	Fetch items from the repository .
3266	Parse a git log file .
3267	Pre - init hook .
3268	Setup command line parser .
3269	Parse the stream .
3270	Clone a git repository into a directory .
3271	Count the number of objects in this repository .
3272	Returns True if the repository is detached .
3273	Update the git repository .
3274	Sync the repository .
3275	Get the rev - list of the repository .
3276	Get the git log for this repository .
3277	Show commits from a git repository .
3278	Fetch the pack from the remote repository .
3279	Read commits from a pack file .
3280	Update a list of refs .
3281	Return a list of GitRefs for this repository .
3282	Update a git ref .
3283	Execute a git command .
3284	Read stderr lines from the git log .
3285	Execute a git command .
3286	Fetch tweets for a given category .
3287	Fetch tweets for a given category .
3288	Get a list of tweets that match the query .
3289	Setup command line parser .
3290	Fetch all items for a given category .
3291	Fetch data for the given keywords .
3292	Parse a GoogleSearch hits response .
3293	Fetch hits for the given keywords .
3294	Return the timestamp of the last time the item was fetched .
3295	Return the metadata category for a given metadata item .
3296	Fetch pull requests .
3297	Fetch repo info .
3298	Get reactions for an issue .
3299	Get reactions for a given issue comment .
3300	Get a list of issue assignees .
3301	Get the requested reviewers for a pull request .
3302	Get a list of all commits from a pull request .
3303	Get the reactions for a pull review comment .
3304	Get user details .
3305	Fetch all reactions for a given issue .
3306	Fetch all issues .
3307	Get a list of pull requests for this repository .
3308	Get the name of the repository .
3309	Fetch the requested reviewers for a pull request .
3310	Fetch commits for a pull request .
3311	Fetch the reactions for a pull review comment .
3312	Get information about a user .
3313	Get a list of organizations for a user .
3314	Get the rate limit for a given token .
3315	Get the remaining rate limits for the given tokens .
3316	Choose the best API token to use .
3317	Check if we need to check tokens .
3318	Update the current rate limit .
3319	Initialize the metadata table .
3320	Store an entry in the archive table .
3321	Retrieve an entry from the database .
3322	Create a new archive .
3323	Generate a hash code for a given uri payload and headers .
3324	Verify that the archive is valid .
3325	Load metadata from the database .
3326	Count the number of rows in a table .
3327	Create a new archive .
3328	Remove an archive .
3329	Search for archived archives .
3330	Search for archived archives .
3331	Search for files in the directory .
3332	Check if a file is a compressed file .
3333	Generate a range of months between two dates .
3334	Convert an email message to a dictionary .
3335	Remove invalid XML characters from raw_xml .
3336	Convert an XML string to a dictionary .
3337	Parse a JSON string into a list of issues .
3338	Get a list of issues for a given date .
3339	Get details about a specific issue .
3340	Get information about a user .
3341	Make a call to the Redmine API
3342	Fetch DOCKERHUB data .
3343	Fetch data from the repository .
3344	Get the content of a Docker repository .
3345	Given a dict of custom fields and a dict of fields return a dict of custom fields .
3346	Filter custom fields .
3347	Parse issues from a raw page .
3348	Get a list of issues from a given date .
3349	Get a list of issues for a given date .
3350	Get all comments for a given issue .
3351	Get the list of fields .
3352	Fetch all items for a given category .
3353	Get jobs from Jenkins .
3354	Get all builds for a given job .
3355	Parse questions from raw_page .
3356	Get all questions for a given date .
3357	Setup command line parser .
3358	Fetch items from MediaWiki .
3359	Given a list of reviews return the timestamp of the most recent review .
3360	Fetch all pages from the server .
3361	Get all pages in a namespace .
3362	Get the most recent changes for a set of namespaces .
3363	Fetch messages for a given category .
3364	Parse a JSON string into a list of messages .
3365	Return True if the message belongs to one of the chats .
3366	Get a list of updates .
3367	Fetch articles from NNTP .
3368	Return the metadata for an item .
3369	Parse an article from a raw string .
3370	Wrapper for _fetch_from_remote .
3371	Fetch article data .
3372	Fetch data from the remote server .
3373	Fetch data from the archive .
3374	Create an HTTP session .
3375	Setup rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit .
3378	Parse a supybot log file .
3379	Retrieve all archives that are older than a given date .
3380	List all supybot archives .
3381	Parse a supybot message stream .
3382	Parse a supybot timestamp line .
3383	Parse a supybot message .
3384	Fetch a list of topics .
3385	Parse the topics page and return a list of tuples .
3386	Get information about a topic .
3387	Post a post .
3388	Fetch all tasks for a given category .
3389	Parse tasks from a JSON string .
3390	Return a generator of users from a JSON string .
3391	Returns a generator that yields all tasks for a given date .
3392	Get a list of transactions for a given PID .
3393	Get a list of users .
3394	Get a list of phids .
3395	Call Phabricator Conduit API .
3396	Return a unique ID for a metadata item .
3397	Parse the contents summary from a JSON string .
3398	Returns a generator over the contents of the MSEARCH resource .
3399	Get a historical version of a content .
3400	Parse the result of the query .
3401	Return the capabilities URL for a given service URL .
3402	Read an XML document from a URL .
3403	Read a string from a file - like object .
3404	Parse the result of the query .
3405	Build the URL .
3406	Get all elements of a complex type .
3407	Construct a schema from a list of XML elements .
3408	Get describe feature type URL .
3409	Create a complex data input with a reference .
3410	Get movie list .
3411	Get a list of TV objects .
3412	Get a list of movies .
3413	Get information about the current user .
3414	Get alternative titles .
3415	Get credits .
3416	Get a list of external ids .
3417	Get a list of keywords .
3418	Get a list of recommendations .
3419	Get a list of release dates .
3420	Get a list of releases for the current user .
3421	Retrieve translations .
3422	Get a list of similar movies .
3423	Get a list of reviews .
3424	Retrieve a list of changes .
3425	Get a list of upcoming events .
3426	Get the current state of now playing .
3427	Retrieve popular data .
3428	Get the top rated data .
3429	Get account states .
3430	Create a rating .
3431	Get the credits for a movie .
3432	Get a list of tv credits .
3433	Get information about a credit .
3434	Query the TV for the specified parameters .
3435	Get information about the current user .
3436	List movies .
3437	Get information about the user .
3438	Get a list of movies from a watchlist .
3439	Create a new token .
3440	Validate a token with login .
3441	Create a new session .
3442	Create a new guest session .
3443	Get a list of rated movies .
3444	Get the status of an item .
3445	Create a new list .
3446	Remove an item from the collection .
3447	Remove all items from the list .
3448	Get a list of content ratings .
3449	Returns a list of similar entities .
3450	Get the on the air status .
3451	Get information about the season and season number .
3452	Get credits for a season .
3453	Returns a list of external ids for each season .
3454	Get information about the season number and episode number .
3455	Get credits .
3456	Get a list of external IDs for each season and episode .
3457	Set attributes to values .
3458	Get movie data .
3459	Get a collection of documents .
3460	Get TV data .
3461	Retrieve a single person .
3462	Get company details .
3463	Get a specific keyword .
3464	Perform a multi - query .
3465	Convert a string to a list of tokens .
3466	Given a list of n - grams and a list of n - grams return a tuple of length and maximum number of ngrams .
3467	Create a set of n - grams from a set of n - grams .
3468	Eratosthenes - Fourier Transform
3469	Align the texts of source_blocks to target_blocks .
3470	r Get all descriptors in a module .
3471	Register a JSON object as a descriptor .
3472	r Register a new version .
3473	Prints the given string to the given file .
3474	r Returns True if desc is a descriptor class .
3475	Return a JSON representation of the function .
3476	Return the coordinate of the descriptor .
3477	r Calculate the atomic standard deviation of a sphere .
3478	r Returns the surface area of the rads .
3479	r Construct a VDW from a Molecule object .
3480	Create a Descriptor object from a JSON object .
3481	r Returns a new molecule with missing values filled with value .
3482	r Drop missing values from the molecule .
3483	r Returns a list of tuples of keys and values .
3484	r Return a dict representation of the dictionary .
3485	r The name of the value .
3486	Decorate a function to log the call and return the result .
3487	A decorator that ensures a function is synchronized .
3488	Prints a message to stderr .
3489	Prints a message to stdout .
3490	Show an error message and exit with the given status .
3491	Create a temporary file .
3492	Set a temporary file to target .
3493	Delete temporary files .
3494	Return a fixed path .
3495	Returns a list of legal parameters for a given method .
3496	Merge opt params into kargs .
3497	Add extra options to the parser .
3498	Terminate all tasks in the queue .
3499	Add a task to the queue .
3500	Wait for all workers to finish .
3501	Record the number of tasks processed .
3502	Read S3 keys from environment variables .
3503	Read S3 keys from commandline .
3504	Read S3 keys from a config file .
3505	Initialize S3 keys .
3506	Connect to s3 .
3507	List all buckets in S3
3508	Recursively walks the S3 server .
3509	Recursively walk a directory and return a list of paths .
3510	Expand a list of S3 files .
3511	Upload a single file to S3 .
3512	Put files from source to target .
3513	Create a S3 bucket .
3514	Update the permissions of the target file .
3515	Print a list of source files .
3516	Download a single file from S3 .
3517	Get files from source to target .
3518	Copy a single file from source to target .
3519	Copy files from source to target .
3520	Delete files from S3 .
3521	Recursively walk a directory and return a list of relative paths .
3522	Sync files from one local directory to another .
3523	Calculate the hash of a file .
3524	Get the md5 of the file .
3525	Create a directory if it doesn t exist .
3526	Check whether the remote key is the same as the local one .
3527	Returns True if path matches filter_path .
3528	Recursively walks the S3 bucket .
3529	Add a conditional object to the result .
3530	Get file permissions .
3531	Look up an object in S3 .
3532	Read a chunk of data from a file .
3533	Upload a file to S3 .
3534	Verify that the downloaded file size is consistent .
3535	Write a chunk of data to a file .
3536	Copy an S3 object to another S3 object .
3537	Run a command .
3538	Validates the given format and arguments .
3539	Pretty print a list of objects .
3540	List buckets .
3541	Create a bucket .
3542	Put files to S3 .
3543	Get files from S3 .
3544	cat files from s3
3545	Handle dsync command .
3546	Copy files to S3 .
3547	Copy files from s3 to s3
3548	Delete a file from S3 .
3549	Show size of files in S3 .
3550	Get the total size of the S3 bucket .
3551	Match date .
3552	Returns a tuple of time and value .
3553	Returns a tuple of the delta and the value .
3554	Checks that the given value is a valid JSON dict .
3555	Discover Xiaomi gateways .
3556	Create a Multicast Socket and listen for messages .
3557	Get a message from the hub .
3558	Push data to callbacks .
3559	Get the AES key from the token .
3560	Report the exception of a job .
3561	Add a rollbar hook to the config .
3562	Ensure the log handler is set .
3563	Get the current request .
3564	Initialize rollbar .
3565	Decorator for lambda functions .
3566	Report a message to Rollbar .
3567	Search for items by title .
3568	Create the agent log .
3569	Helper function to build person data .
3570	Add lambda context data to data .
3571	Add request data to data .
3572	Check if a frame is added to the stack .
3573	Build request data .
3574	Build server data .
3575	Builds a payload from data .
3576	Start rollbar server .
3577	Compose a Hangul character from chosung joongsung and jongsung
3578	Decomposes a Hangul letter .
3579	Checks if the target string is a Hangul .
3580	Attach a josa to a word .
3581	Check if a node is inside an exception handler .
3582	Check if the given node is inside a lambda .
3583	Get all elements of a node .
3584	Check if the given node can be clobbered in an exception .
3585	Returns True if the given node is a super class .
3586	Check if the given node is an error .
3587	Check if the given node is a default argument .
3588	Check if the given node is a function decorator .
3589	Check if the given node is an ancestor of the given frame .
3590	Return the parent of the given node .
3591	Create a function that will be called when a message is received .
3592	Collect fields from a format string .
3593	Get an argument from a call node .
3594	Check if the given node is an exception .
3595	Check if an error is of the given type .
3596	Check if a function is decorated with a property .
3597	Check if a function is decorated with any of the given qnames .
3598	Find a try - except wrapper node .
3599	Check if the given node is a try - except wrapper .
3600	Return a list of exception handlers for the given node .
3601	Check if the given node ignores the given exception .
3602	Check if a class is abstract .
3603	Try to infer the value of the given node .
3604	Returns the type of the given node .
3605	Check if a function is registered in singledispatch .
3606	Check if postponed evaluation is enabled .
3607	Return a list of fully qualified names from a module name .
3608	Given an astroid . ImportNode return the absolute name of the imported module .
3609	Return a string representation of a tree definition .
3610	Write a graph to a file .
3611	Check for multiple imports .
3612	Check an import from node .
3613	Check the position of an import node .
3614	Record an import node .
3615	Check the order of imports in the stack .
3616	Check if relative import is allowed .
3617	Add an imported module to the import graph .
3618	Check if a module is deprecated .
3619	Check if a module is preferred .
3620	Report external dependencies .
3621	Filter dependencies graph .
3622	Return a list of default options .
3623	Insert default options into sys . argv .
3624	Returns True if the given node is visible .
3625	Get the callbacks for a given node .
3626	Visit the given node and call the appropriate callback .
3627	Check that the message id is consistent .
3628	Check if the node is a call .
3629	Check whether the node is a datetime .
3630	Check that the mode argument is valid .
3631	Add a message to the message list .
3632	Display messages in JSON format .
3633	Get the title of the given node .
3634	Set default options .
3635	Returns True if the given node is a builtin node .
3636	Add a class node to the diagram .
3637	Get all ancestors of a given node .
3638	Get a list of nodes associated with a given class .
3639	Add a class to the diagram .
3640	Return a tuple of the package and class diagrams .
3641	Visit an importfrom node and add it to the package diagram
3642	Returns a ClassDiagram object for the given class .
3643	Get a list of Diadef diagrams .
3644	Returns True if the owner is ignored .
3645	Return a list of names that are similar to the given attribute name .
3646	Check if the given node is a member of the given owner .
3647	Check if the given node has a parent of the given type .
3648	Check if name is used as a variadic .
3649	Check if the given node is not a variadic function .
3650	Visit attribute nodes .
3651	Check if the node is an assignment function .
3652	Check if the function is uninferable .
3653	Check for invalid unary operand types .
3654	Iterate over the interfaces of the given node .
3655	Create a project from a list of files .
3656	Visitor for package nodes .
3657	Set the locals_type attribute of the function node .
3658	Assign the name of the current function or class or function .
3659	Handle assignattr_type .
3660	Import nodes .
3661	Import from node .
3662	Determine if the given module is a standard module .
3663	Returns the path of the imported module .
3664	Get ANSI code .
3665	Colorize a message with ANSI escape codes .
3666	Register the reporter for the given linter .
3667	Handle a message .
3668	Display a layout .
3669	Handle a message .
3670	Open a graph .
3671	Write a node .
3672	Writes an edge between two nodes .
3673	Check if the format string is valid .
3674	Process a non - raw string token .
3675	Format a single section .
3676	Format the evaluation section .
3677	Add a table to the layout .
3678	Write a default table .
3679	Add a renamed message to the message definition .
3680	Register messages from a Checker instance .
3681	Register a message .
3682	Check that the msgid is unique for the given symbol .
3683	Raises an InvalidMessageError for duplicate symbols .
3684	Raises an InvalidMessageError if the msgid and other_msgid are not unique .
3685	Returns a list of message definitions for the given message id or symbol .
3686	Return a string representation of a message .
3687	Print help for all messages in msgids .
3688	List all messages .
3689	Called when the builder is initialized .
3690	Return the number of CPU cores .
3691	Report messages stats .
3692	A context manager that fixes the import path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set the value of an option .
3696	Register a checker .
3697	Disable all reporters .
3698	Enables or disables python3 porting .
3699	Returns a list of all registered checkers .
3700	Returns a sorted list of all check names .
3701	Returns a list of all registered checkers .
3702	Expand a list of modules into a list of files .
3703	Set the current module .
3704	Check an astroid module .
3705	Report the results of the evaluation .
3706	Help message callback .
3707	Print full documentation .
3708	List messages .
3709	List all check groups .
3710	Normalize text to be indented by line_len characters .
3711	Returns a tuple of the module and the frameid of the given node .
3712	Try to decode the given line using the given encoding or the default encoding .
3713	Return True if base_name is in the blacklist .
3714	Register all plugins in a directory .
3715	Return a comment from a string .
3716	Format an option value .
3717	Format an INI section .
3718	Format options to a file - like object .
3719	Insert a child at the given index .
3720	Append a child node to this node .
3721	Returns a list of all parents of this node .
3722	Format the output of the given layout .
3723	Get the content of a table .
3724	Compute the content of the given layout .
3725	Collect all the lines in the module .
3726	Handle an ignored message .
3727	Register a new report .
3728	Create a report section .
3729	Add stats to self . stats .
3730	Get the name of the setter property .
3731	Get the name of the setter property .
3732	Check if a function returns something .
3733	Return a list of possible exceptions .
3734	This method is called when a module is loaded .
3735	Process a module .
3736	Process a list of tokens .
3737	Check if the given import is a future import .
3738	Check if statement is in a for - else branch .
3739	Return the overridden method node for the given name .
3740	Get extra info for unpacking .
3741	Detect if the given node is in a global scope .
3742	Check if name_node is assigned locally .
3743	Mark a new node as consumed .
3744	Check for global variables .
3745	Return True if the node is in a class scope .
3746	Check if the function is in the upper function scope .
3747	Check if unpacking is possible .
3748	Check for metaclasses .
3749	Return a list of all packages in a directory .
3750	Install a pylint package .
3751	Run install_lib .
3752	Add similarities to a table section .
3753	Main entry point for the simulator .
3754	Append a stream to the list of linesets .
3755	Compute the list of sims that have no duplicates .
3756	Display a list of sims .
3757	Find common lines between lineset1 and lineset2
3758	Iterate over all simulations .
3759	Iterate over the stripped lines .
3760	Create a dictionary of line numbers .
3761	Check if a definition is equivalent to a call .
3762	Check if two nodes have the same attribute .
3763	Returns True if both parameters have the same default value .
3764	Check if two parameters are different .
3765	Infer the result of a call .
3766	Add a scope to be accessed .
3767	Check if the node is a class .
3768	Check that the mro of the given node is consistent .
3769	Check that the bases of the given node are valid .
3770	Check if function is overridden .
3771	Check if the function is a useless super method .
3772	Leaves a function definition .
3773	Check if node is in slots .
3774	Check if the node is a function attribute .
3775	Check whether the node is a member of the accessed dict .
3776	Check if a class is abstract .
3777	Check the signature of method1 and refmethod .
3778	Check if the given node is a mandatory method parameter .
3779	Returns True if the body is a Raise node .
3780	Check for bad exception context .
3781	Check if the function is a super function .
3782	Display all reports in a layout .
3783	Check if the given node is a namedtuple .
3784	Check if the given node is an enum class .
3785	Check if the given node is a dataclass .
3786	Start the linter .
3787	Check for too many ancestors and instance attributes .
3788	Leaves a class definition .
3789	Return an astroid . If node .
3790	Check for too many boolean expressions .
3791	Check that the docstring is well - formed .
3792	Format the object as a string .
3793	Check if the token is a trailing comma .
3794	Check if the given node is an elif .
3795	Check if the if statement is simplifiable .
3796	Check if stop iteration is inside a generator .
3797	Check if the given exception is a subclass of StopIteration .
3798	Raising stopiteration in generator next call .
3799	Check if nested blocks are needed .
3800	Return a dict of duplicated instance types .
3801	Check if the first argument is an instance of the same class .
3802	Check if a comparison is chained .
3803	Check if the given node is an and - or - tternary .
3804	Check if the return statement is consistent .
3805	Returns True if the given node is a return node .
3806	Walk the body of a for loop .
3807	Check if Graphviz is available .
3808	Run diadefs command .
3809	Write packages to the printer .
3810	Write the classes of the given diagram .
3811	Set the printer to use .
3812	Set a VCG printer .
3813	Returns True if we should be emitted .
3814	Format the help for this message .
3815	Return a dict of environment variables .
3816	Run pylint . lint on a file .
3817	Run epylint and return stdout and stderr .
3818	Get a list of cycles from a graph .
3819	Get the source code .
3820	Generate a graph from the source file .
3821	Format a section of options .
3822	Register a message by its ID .
3823	Disable a message .
3824	Enable a managed message .
3825	Return a list of symbols for a message .
3826	Check if a message is enabled .
3827	Add a message to the message store .
3828	Print the full documentation for all checkers .
3829	Print the documentation for a given checker .
3830	Return the number of spaces and tabs in a line .
3831	Given a list of bar positions and a list of bad positions return a tuple of indent and delta message .
3832	Return the indentation of the token at the given index .
3833	Handle a line start token .
3834	Get the valid indentations for the given token .
3835	Hanging indentation after a bracket .
3836	Return a _ContinuedIndent object for a continuation inside a bracket .
3837	Push a token onto the stack .
3838	Create a new line .
3839	Check for keyword parentheses .
3840	Check if the token is a valid type annotation .
3841	Check for equals spacing .
3842	Check that the token is surrounded by a space .
3843	Visit the default statement .
3844	Check for multiple statements .
3845	Check that the given lines are valid .
3846	Check the indentation level of a string .
3847	Check if the given node is in the iterating context .
3848	Check if the given node is a conditional import .
3849	Check if the name is a builtin .
3850	Check if the value is an instance of an exception .
3851	Check if an attribute can be inferred .
3852	Check if the node is an except handler .
3853	Raise an astroid . Raise node by checking its value .
3854	Find the path to the . pylintrc file .
3855	Validate the given value against the given options dictionary .
3856	Expand the default value of an option .
3857	Match a long option .
3858	Register a new options provider .
3859	Set the value of a provider option .
3860	Set the value of a global option .
3861	Generates a config file from the options_providers .
3862	Load configuration from a config file .
3863	Load command line configuration .
3864	Add a help section to the parser .
3865	Return the help text of the command line .
3866	Load the default values for all options .
3867	Get the name of the attribute of an option .
3868	Get the option definition for the given option .
3869	Return a list of all options grouped by section .
3870	Check if a function is a method call .
3871	Checks whether the given node is a complex format string .
3872	Visitor for logging modules .
3873	Visit the import from AST node .
3874	Add logging modules to _logging_names .
3875	Check if the function is a logging method .
3876	Check if the format string is valid .
3877	Check if the given node is in a loop .
3878	Returns the parent node of the given break node .
3879	Check if loop exits early .
3880	Returns a tuple of property classes and a set of property names .
3881	Determine the type of a function .
3882	Report the stats for a particular node type .
3883	Check if the given node is a redefined decorator .
3884	Check if the given call is a single argument call .
3885	Check if node is a starred statement .
3886	Check for nonlocal and global variables .
3887	Check if the function is abstract .
3888	Check for useless else on loop .
3889	Check if the given node is in a loop .
3890	Add stats to the linter .
3891	Return an astroid . Expression node if possible .
3892	Return an astroid . Lambda node if necessary .
3893	Check if assert is on tuple .
3894	Check for duplicate keys .
3895	Check if the node is unreachable .
3896	Check if the node is not in a finally block .
3897	Check if the given node is reversed .
3898	Check that the name of an assignment is valid .
3899	Check that a name is valid .
3900	Check if the given node is a docstring .
3901	Check whether the literal is a constant or not .
3902	Add a subgraph to the graph .
3903	Parse a sub - graph .
3904	Check the complexity of a module .
3905	Add a checker to the tree .
3906	Recursively walks the AST tree .
3907	Add a relationship between two objects .
3908	Get the relationship of the given type from the given object .
3909	Get the names of the attributes of the given node .
3910	Return a sorted list of all methods in the given node .
3911	Add an object to the diagram .
3912	Return a list of class names .
3913	Returns a list of all ClassDef objects .
3914	Return the class with the given name .
3915	Return a list of all modules .
3916	Return the module with the given name .
3917	Get a module by name .
3918	Add a dependency from a module .
3919	Delete the grant .
3920	Query the database .
3921	Get user by username and password .
3922	Get an access token or refresh token .
3923	Store a token in the database .
3924	Store a new grant in the database .
3925	Get a client by code .
3926	Prepare a request .
3927	Initialize the app .
3928	Create a remote application .
3929	Perform an HTTP request .
3930	Perform an OAuth2 authorization request .
3931	Handle an OAuth 1 . 0 response .
3932	Handle an OAuth2 response .
3933	Handle an authorized response .
3934	Decorate a function to return an authorized response .
3935	Returns a tuple of the application name and the token .
3936	Make a client with the given token .
3937	Create an OAuth client .
3938	Set the OAUTHLIB_INSECURE_TRANSPORT environment variable .
3939	Confirm an authorization request .
3940	Decorator to create a request token response .
3941	Get the client secret for a given client key .
3942	Get the secret for a request token .
3943	Get the secret of an access token .
3944	Get the default realms for a client .
3945	Get a list of realms for a given token .
3946	Get the redirect URI for the given token .
3947	Get the RSA key for the given client key .
3948	Validate a client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate a timestamp and nonce .
3952	Validate a redirect URI for a given client key .
3953	Validate the realms provided in the request .
3954	Validate a verifier for a given client_key .
3955	Verify the request token .
3956	Verify that the request token matches the realms provided .
3957	Save an access token .
3958	Save a request token .
3959	Save a verifier for a given token .
3960	Return the error URI .
3961	Confirm an authorization request .
3962	Verify that the request is valid for the given scopes .
3963	Get client credentials from request .
3964	Check if the client is confidential .
3965	Authenticate a client .
3966	Authenticate with a client_id .
3967	Get the original scopes of the refresh token .
3968	Confirm that the refresh token has the given scopes .
3969	Get the default redirect URI for a given client .
3970	Get the default scopes for a given client .
3971	Invalidate an authorization code .
3972	Save an authorization code for a client .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate a client_id .
3976	Validate a grant code .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Check if the response type is allowed by the client .
3980	Validate the scopes for a given client .
3981	Validate a username and password .
3982	Revoke an access token .
3983	Update QQ API request data .
3984	Convert keys to strings .
3985	Change weibo header .
3986	Register a remote application with the given oauth instance .
3987	Create a remote application .
3988	Extract parameters from the request .
3989	Convert text to bytes .
3990	Decode a base64 encoded string .
3991	Create a Response object .
3992	Get a list of cached clients .
3993	Add a remote app to the registry .
3994	Add a remote application .
3995	Check if an exception is raised .
3996	Check if the certificate is valid .
3997	Load private key .
3998	Check that the load_privatekey callback is correct .
3999	Check if load_privatekey callback is wrong type .
4000	Check if the CRL is revoked .
4001	Check for duplicate X509 certificates .
4002	Create a X . 509 certificate request .
4003	Create a new X . 509 certificate .
4004	A decorator to make a function that will be used as a decorator .
4005	Load verify locations from a CA file .
4006	Set the default passwd callback .
4007	Use a certificate chain file .
4008	Use a certificate file .
4009	Use a X . 509 certificate .
4010	Add an extra chain certificate to the SSL context .
4011	Use a private key file .
4012	Use a private key .
4013	Load a client CA file .
4014	Set the verify depth of this SSL context .
4015	Load a temporary DH from a file .
4016	Set the cipher list .
4017	Set the client CA list .
4018	Add a client CA certificate .
4019	Set the SSL_CTX_set_tlsext_servername_callback .
4020	Sets the SSL_CTX_USE_SRTP flag .
4021	Set NPN select callback .
4022	Set the ALPN Protocols .
4023	Set the ALPN select callback .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set the OCSP client callback function .
4027	Set the SSL context .
4028	Get the server name .
4029	Set the TLSEXT host name .
4030	Receive data from the socket .
4031	Receive data from the socket into a buffer .
4032	Read data from a BIO socket .
4033	Return True if SSL renegotiation is pending .
4034	Shuts down the SSL connection .
4035	Returns a list of cipher names .
4036	Returns a list of client CA names .
4037	Sets the shutdown state of the SSL connection .
4038	Get a random string from the server .
4039	Get a random string from the client .
4040	The master key of the SSL session .
4041	Export a keying material .
4042	Get a new SSL session .
4043	Returns the name of the current cipher .
4044	Get the current cipher bits .
4045	Returns the version of the current cipher .
4046	Get the protocol version name .
4047	Returns the next protocol negotiated message .
4048	Set the ALPN Protocols .
4049	Get the ALPN protocol negotiated .
4050	Create a new memory buffer .
4051	Convert a BIO object to a string .
4052	Set the ASN . 1 time boundary .
4053	Get the ASN . 1 time from the given timestamp .
4054	Get an elliptic curve by name .
4055	Dump a public key to a string .
4056	Load a public key from a PEM or ASN . 1 file .
4057	Sign the given data with the given key .
4058	Verifies a signature against a certificate .
4059	Dump a CRL to a string .
4060	Convert the EVP key to a cryptography key .
4061	Generates a new RSA or DSA key .
4062	Check that the public key is valid .
4063	Return a set of all elliptic curves .
4064	Return a list of elliptic curves .
4065	Convert the curve to an EC_KEY object .
4066	Return a DER - encoded DER - encoded version of the X . 509 certificate .
4067	Get the components of the name .
4068	Get the short name of the extension .
4069	Get the extension data .
4070	Return a cryptography . hazmat . x509 . CertificateSigningRequest object .
4071	Set the public key of the request .
4072	Get the public key of the request .
4073	Get the subject name of this certificate .
4074	Add extensions to the request .
4075	Returns a list of X509 extensions .
4076	Verify that the request is signed by the given PKey .
4077	Return a cryptography . hazmat . x509 . Certificate object .
4078	Set the version of the certificate .
4079	Get the public key of the certificate .
4080	Set the public key of this X . 509 certificate .
4081	Sign the X . 509 certificate with a private key .
4082	Get the signature algorithm .
4083	Returns the digest of the given name .
4084	Set the serial number .
4085	Get the serial number of the certificate .
4086	Advance the not after the given amount .
4087	Advance the not before the given amount .
4088	Check if the token has expired .
4089	Get the issuer name for this certificate .
4090	Set the issuer for this certificate .
4091	Get the subject name for this certificate .
4092	Set the subject of the certificate .
4093	Add one or more X509 extensions to the certificate .
4094	Get the extension at the given index .
4095	Add a certificate to the hash table .
4096	Add a CRL to the certificate store .
4097	Set the verification time for this certificate .
4098	Initialize the X509 store context .
4099	Create a X509StoreContextError from the current context .
4100	Verify the certificate .
4101	Set the serial number from a hex string .
4102	Get the serial number of the certificate .
4103	Set the revocation reason .
4104	Get the reason of the certificate being revoked .
4105	Set the revocation date for this certificate .
4106	Return a cryptography . hazmat . x509 . CertificateRevocationList object .
4107	Returns a tuple of Revoked objects .
4108	Get the issuer of the certificate .
4109	Sign this CRL with the given certificate and key .
4110	Export a certificate to a PEM file .
4111	Get the type name of the object .
4112	Set the CA certificates .
4113	Export the certificate to a PKCS12 file .
4114	Signs the given digest using the given private key .
4115	Verify that the given key is valid for this spki .
4116	Encode the SPKI as a base64 string .
4117	Get the public key of the spki .
4118	Set the public key of the SPKI .
4119	Create an exception from an error queue .
4120	Convert a text object to bytes .
4121	Returns a function that can be used to print tokens to the terminal .
4122	Get service metadata .
4123	Returns a generator that yields all issues for each list of cards .
4124	Get annotations for a given card .
4125	Get all boards
4126	Get a list of lists for a board .
4127	Get a list of cards .
4128	Get comments for a card .
4129	Return the URL for the API .
4130	Get a list of links from a URL .
4131	Convert a link field to a dictionary .
4132	Get all issues that match the given query .
4133	Return a list of pull requests for a given tag .
4134	Aggregate remote issues .
4135	Get config value or default if not found .
4136	Returns a dictionary of all templates defined in the config file .
4137	Validate that the service configuration is valid .
4138	Returns True if the given issue should be included .
4139	Create a table from a grid of rows .
4140	Execute a command and return the output of the command .
4141	Get an integer value from a configuration file .
4142	Pull issues from the taskrc repository .
4143	Get data from a URL .
4144	Get a collection of values from a URL .
4145	Find the local uuid for a given issue .
4146	Merge the left task with the right task .
4147	Build UDAS config overrides from a list of targets .
4148	Parse a Sprint string into a dictionary .
4149	Get credentials from the credentials file .
4150	Calculate the ROUGE score for multiple sequences .
4151	Calculate pvalues for a set of gene sets .
4152	Calculate the fdrcorrection of a set of values .
4153	Compute the z - score of a 2D array .
4154	Plot a heatmap from a pandas DataFrame .
4155	Adjust axes spines .
4156	Prepare the argument parser for GeneSetEnrichment Analysis
4157	Adds the prerank subcommand to the subparsers .
4158	Adds the replot subcommand to the subparsers .
4159	Add the enrichr subcommand to the subparsers .
4160	Enrichment score .
4161	Compute the ranking metric tensor .
4162	Calculate the ranking metric .
4163	Calculate the GSEA p - value .
4164	Compute GSEA significance .
4165	Get the names and descriptions of the marts .
4166	Returns a pandas DataFrame of the datasets in a MART .
4167	Get the attributes of a dataset .
4168	Get the filters for a dataset .
4169	Query the Biomart database .
4170	Create a GSEA graph .
4171	Single Sample GSEA .
4172	Run GSEA_Prerank .
4173	Replot GSEA_Replot .
4174	Set the number of cores to use .
4175	Load a list of gene sets from a GMT file .
4176	Get a list of all available libraries .
4177	Download Enrichr library gene sets .
4178	Compute heatmat .
4179	Save results to a zip file .
4180	Load gene expression data from file .
4181	Run GSEA .
4182	Run GSEA .
4183	Run a set of samples using GSEA .
4184	Run enrichment scores for each sample .
4185	Save the results to a . es file .
4186	Run GSEA .
4187	Enrich a list of genes using Enrichr .
4188	Parse a list of genesets and return a dictionary of genesets .
4189	Parse the gene list into a list of strings .
4190	Send a list of genes to the given URL .
4191	Check if all genes are recognized by Enrichr .
4192	Get the set of background genes .
4193	Run Enrichr .
4194	Create a cube filter .
4195	Create an icosphere filter .
4196	Create a torus filter .
4197	Create a plane of hires .
4198	Cube hires .
4199	Get color values from color_names . txt
4200	Check that the variable is a list of num_terms .
4201	Make a list of num_terms .
4202	Write a filter to a filter script .
4203	Create LS3 Loop filter .
4204	Merge close vertically .
4205	Create a filter to close holes .
4206	This function splits vertically on non - manifold faces .
4207	This function writes an XML filter for snap_mismatched_borders .
4208	Translate a script by the given value .
4209	Rotate a script around a specified axis .
4210	Scale a script by the given value .
4211	Return a function that can be used as a cylindrical function .
4212	Wrap a script into a cylinder .
4213	Bend a script .
4214	Convert a deformation to a curve .
4215	Convert a VC to a tex file .
4216	Convert a mesh to a face file .
4217	Create a uniform mesh resampling filter .
4218	Render a Poisson surface reconstruction script .
4219	Voronoi algorithm .
4220	Select all faces and vertically
4221	Adds a vertex quality filter to the script .
4222	Write a conditional face selection filter .
4223	Adds a conditional vertex selection filter to the script .
4224	Draw a cylindrical vertically .
4225	Calculate the spherical verticies of a script .
4226	Generates a filter string from the given script .
4227	Rename a filter .
4228	Change the current layer .
4229	Duplicate the current layer .
4230	Delete a lower layer .
4231	Houston error handler .
4232	Start a new filter script .
4233	Adds a new layer to the stack .
4234	Remove a layer from the stack .
4235	Save the filters to a file .
4236	Run a meshlab script .
4237	Create a shield .
4238	Create a hausdorff distance filter .
4239	Create a Poisson - disk filter .
4240	Add a mesh element to a script .
4241	Clustered Vertex Subsampling filter .
4242	Create a flat plane filter .
4243	Create a per - triangle filter .
4244	Create a Voronoi filter .
4245	Compute Topological Measures from a filter script .
4246	Parse topology from a MLS log file .
4247	Parse the hausdorff log file .
4248	Create a filter for per - vertex color functions .
4249	Voronoi filter .
4250	Cyclic rainbow .
4251	Convert radians to radians .
4252	Returns the cross product of two vectors .
4253	Multiply a vector by a scalar .
4254	Define new per - vertex attribute .
4255	Flip faces .
4256	Compute normals for point sets .
4257	Taubin Smooth filter .
4258	Depth Smooth filter .
4259	Sort a polyline file .
4260	Measure the topology of a temporary 3D file .
4261	Run measure_geometry and measure_topology .
4262	Measure the dimension of a 3D surface .
4263	Lowercase the extension of a filename .
4264	Patch the request class .
4265	Get the config for a given set .
4266	Configure upload sets .
4267	Get upload set configuration .
4268	Return the URL for the uploaded file .
4269	Return a path to a file .
4270	Check if the given extension is allowed .
4271	Try to find a conflict in target_folder .
4272	Get the version of vprof from a file .
4273	Remove duplicates from a list of objects .
4274	Get the difference between two objects .
4275	Format a dictionary of objects into a list of tuples .
4276	Trace the memory usage of a module .
4277	Return a list of code events .
4278	Returns the number of objects in this object .
4279	Compute the memory overhead of the process .
4280	Profile the target package .
4281	Profile the run object .
4282	Calls the run_object and returns the profile and the result .
4283	Run the profile .
4284	Return a set of all module names in the given package path .
4285	Run a function in a separate process .
4286	Return the type of a run object .
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the function .
4290	Replace sys . argv with the run object .
4291	Sample a signal from the stack .
4292	Insert a stack into a call tree .
4293	Fill the sample count for the given node .
4294	Format the tree .
4295	Return the call tree .
4296	Return a dict of stats about the object .
4297	Return a dict with information about the run object .
4298	Runs the object and returns a dictionary of stats .
4299	Transform stats to a list of tuples .
4300	Create a profile package .
4301	Return the profile module .
4302	Run the profile function .
4303	Initialize the database .
4304	Show the guestbook .
4305	Add an entry to the database .
4306	Handle profiler requests .
4307	Start the stats server .
4308	Return the content of the root page .
4309	Handle other files .
4310	Handle a GET request .
4311	Handle a POST request .
4312	Send a response to the client .
4313	Check if module_path points to a standard library .
4314	Record a line .
4315	Return a list of lines without standard library .
4316	Fill the heatmap with the number of lines without stdlib .
4317	Return a list of lines that should be skipped from the source code .
4318	Return a dict with information about the profile .
4319	Format a heatmap from a source file .
4320	Returns the profile module for the run object .
4321	Runs the function and returns the result of the function .
4322	Run all profilers specified in prof_config .
4323	Run a profiler .
4324	Returns the predicted probabilities of X .
4325	Predict the log probability of each row .
4326	Fit the model to the given Z matrix .
4327	Count the number of documents in the vocabulary .
4328	Sort the vocabulary by the number of features .
4329	Limit features by document frequency .
4330	Fit the model to the data .
4331	Apply the vocabularies to the matrix Z .
4332	Convert a StandardScaler to a Scikit - like object .
4333	Spark fit method .
4334	Spark predict method .
4335	Fit a SparkLinearRegression model .
4336	Fit the model to the given Z .
4337	Fit and transform the model .
4338	Calculate the score of a given Z vector .
4339	Fit the model with the given parameters .
4340	Compute the score of the estimator using the given scorer .
4341	Train K - Means model .
4342	Returns an RDD of the predictors for the given data .
4343	Use SparkSGDClassifier to predict data .
4344	Checks whether the given RDD is of the expected type .
4345	Compute the vocabulary of each feature in Z .
4346	Compute the mean and variance of an RDD .
4347	Fit the SVD to the input Z .
4348	Transform a Spark truncated SVD .
4349	Helper function for _block_collection .
4350	Returns a block of tuples .
4351	Block an RDD .
4352	Apply a function to the RDD and return a new RDD .
4353	The shape of the RDD .
4354	Convert the RDD to a NumPy array .
4355	Apply a function to each element of the DataFrame .
4356	Return a boolean indicating whether the file s mode is a bit - permission .
4357	Return True if path is only a root write .
4358	Check that the configuration file is correct .
4359	Read config from file .
4360	Run a command as a shell .
4361	Execute a command and return stdout and stderr .
4362	Execute a command over an SSH server .
4363	Validate the configuration .
4364	Returns a copy of the default headers .
4365	Get the body of the request .
4366	Returns the URL for the ExecuteHomeAssistant .
4367	Get the URL for the webhook .
4368	Return a text representation of a packet .
4369	Print a discovery packet .
4370	Discover devices .
4371	Execute the device .
4372	Send a confirmation message to the device
4373	Called when a push is received .
4374	Execute the given device .
4375	Run on_push callback .
4376	Convert a Transaction object to a Transaction object .
4377	Find the path to the LEDGER_FILE file .
4378	Install and run tests .
4379	Get long description from README . md .
4380	Create a PrecalculatedTextMeasurer instance from a JSON file .
4381	Returns a PrecalculatedTextMeasurer instance .
4382	Generates a badge from two texts .
4383	Generator for supported Unicode characters .
4384	Given a list of characters and a list of encodings generate a sequence of encoded characters .
4385	Returns a mapping of characters to their width .
4386	Write deja - vu - sans data to a JSON file .
4387	Convolve a 2D Gaussian kernel to a 2D image .
4388	Calculate the gaussian kernel .
4389	Convert an image to a grayscale image .
4390	Command line interface for pyssim .
4391	Calculate the SSIM value .
4392	Compute the SSIM value between two images .
4393	Destroy the object .
4394	Set the code version .
4395	Get the status of the server .
4396	Print the status of the server .
4397	Return the node that is connected to the given connection .
4398	Try to bind to the server .
4399	Called when a new incoming connection is received .
4400	Called when a message is received from the device .
4401	Helper function to send a command to the device .
4402	Returns True if the given node should connect .
4403	Attempt to connect to a single node if it is not already connected .
4404	Called when an outgoing connection is established .
4405	Called when an outgoing message is received from the device .
4406	Called when a connection is disconnected .
4407	Add a node to the list of nodes .
4408	Drop a node from the pool .
4409	Send a message to a node .
4410	Destroy the connection manager .
4411	Put an item into the buffer .
4412	Put an item into the heap .
4413	Get the first element of the heap .
4414	Try to acquire a lock .
4415	Check if a lock is acquired .
4416	Release a lock .
4417	Decorate a function to check the response .
4418	Decorate a view function to check if the request has a valid token .
4419	Create a connection to the given hosts .
4420	Create Elasticsearch indexes .
4421	Migrate the given indexes to the latest version .
4422	Remove metadata from a report .
4423	Save aggregate reports to Kafka .
4424	Extract an XML file from an archive .
4425	Parse an aggregate report file .
4426	Convert a list of forecast reports to a CSV file .
4427	Parse a report file .
4428	Get IMAP capabilities .
4429	Save the results to the output directory .
4430	Create a zip file for the given results .
4431	Sends a report to an email address .
4432	Save aggregate reports to Splunk
4433	Save forensic reports to Splunk
4434	Decode a base64 encoded string .
4435	Get the base PSL for a given domain .
4436	Get the reverse DNS address from an IP address .
4437	Convert a human timestamp to a datetime object .
4438	Get the country for a given IP address .
4439	Get information about an IP address .
4440	Convert an Outlook MSG to rfc822 .
4441	Convert a comma separated string to a list of strings .
4442	Parse a report file .
4443	Drain the connection .
4444	Publish a message to a subject .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject asynchronously .
4448	Unsubscribe from a server .
4449	Send a ping to the server .
4450	Select the next server from the pool .
4451	Process an error message from the server .
4452	Handle an operation error .
4453	Create the connect command .
4454	Process a pong .
4455	Process a message .
4456	Process server info .
4457	Process the connect init message from the server .
4458	Flushes the queue .
4459	Read data from the socket .
4460	Coactivates a set of studies .
4461	Decode a list of images into a pandas DataFrame .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Calculate Pearson correlation .
4465	Returns the dot product of the images .
4466	Select features based on feat_select .
4467	Get a list of studies from a list of masks .
4468	Get the order of features in the dataset .
4469	Classify a set of regions .
4470	Classify a set of features .
4471	Fit the classifier .
4472	Set the weight of the classifier .
4473	Perform cross validation .
4474	Fit the classifier to the given dataset .
4475	Calculate the average of a set of regions within a dataset .
4476	Get random voxels from the dataset .
4477	Get the top n_top_words words from the model .
4478	Calculate the Pearson distance between x and y .
4479	FDR function .
4480	Load activations from a CSV file .
4481	Create an image table .
4482	Get a list of studies .
4483	Add features to the feature table .
4484	Returns a list of feature names .
4485	Returns a dictionary of feature names and counts .
4486	Load a dataset from a pickle file .
4487	Save the feature table to a file .
4488	Get the image data .
4489	Get feature data .
4490	Returns a list of the names of the features .
4491	Get the ids of features that are above a given threshold .
4492	Return a list of features that match the search string .
4493	Get a list of ids from an expression .
4494	Convert SDF to sparse sparse matrix .
4495	Decorator to mark a function as deprecated .
4496	Transform a matrix from foci to mat .
4497	Convert xyz coordinates to MATLAB coordinates .
4498	Apply a transformation to a foci .
4499	Mask the image .
4500	Get a mask of the given layers .
4501	Load images from a list of filenames .
4502	Save a Nifti1 image to a file .
4503	Set the logging level .
4504	Expand an address .
4505	Return a list of tokens from a string .
4506	Parse an address .
4507	Calculate near - dupe hashes .
4508	Convert a dictionary to a namedtuple .
4509	Get the price of a given ticker .
4510	Get a pandas DataFrame from a list of tickers .
4511	Get a list of bulk news .
4512	Perform an HTTP request .
4513	Get bearer information .
4514	Make a request to the given route .
4515	Get a list of albums tracks .
4516	Get information about an artist .
4517	Get a list of albums for an artist .
4518	Get a list of top - tracks for an artist .
4519	Get a list of artists related to a spotify .
4520	Retrieve artists for a list of spotify ids .
4521	Get information about a specific category .
4522	Get a list of playlists for a category .
4523	Get a list of categories .
4524	Get a list of featured playlists .
4525	Get a list of new releases .
4526	Get a list of recommendations .
4527	Get a list of followers or users .
4528	Get a list of albums for this artist .
4529	Get all albums for this artist .
4530	Returns the total number of albums for this artist .
4531	Returns a list of artists related to this artist .
4532	Get the currently playing track .
4533	Get the current player .
4534	Get all available devices .
4535	Return a list of recently played tracks .
4536	Replace tracks in a playlist .
4537	Reorder a playlist .
4538	Create a playlist .
4539	Get a list of playlists .
4540	Get a list of tracks for this album .
4541	Get all tracks for this album .
4542	Return the URL for an OAuth 2 . 0 client .
4543	Get an album by spotify id .
4544	Get an artist by spotify id .
4545	Get a track by ID .
4546	Get a user by spotify id .
4547	Get albums .
4548	Get artists .
4549	Search for tracks in a list of types .
4550	Convert a string to an ID .
4551	Assert that a function has an attribute .
4552	Create an instance of this class from a client .
4553	Generate a URL to access an OAuth 2 . 0 client .
4554	Return a dictionary of attributes that can be sent to the client .
4555	Returns a string representation of the request parameters .
4556	Build a list of playlists .
4557	Get all tracks for this playlist .
4558	Resume playback .
4559	Transfer a device to the player .
4560	Get a Spotify object from its href .
4561	Get the current test data .
4562	Convert month names to short names .
4563	Update PyFunceble documentation files .
4564	Check if the current version is greater than the current version .
4565	Check if git branch is a dev version .
4566	Returns True if the current version is greater than the current version .
4567	Saves the backup data to the log file .
4568	Restores the current state of the test .
4569	Return True if the line is to be ignored .
4570	Given a list of options return a list of domains .
4571	Extract the base URL from an element .
4572	Convert a list of strings into a list of strings .
4573	Returns the status code of the request .
4574	Get the current HTTP code .
4575	Check if the given domain is valid .
4576	Check if a domain is a subdomain .
4577	Check if ip is a valid IPv4 address .
4578	Check if an IP address is a valid IPv4 address range .
4579	Check if a URL is valid .
4580	Loads the configuration from the current directory .
4581	Stay safe .
4582	Check if the URL passed is a valid URL and download it .
4583	Get the URL of the entry management page .
4584	Print the header .
4585	Check the status of a file .
4586	Returns a tuple of domain and status .
4587	Returns a tuple of url and status .
4588	Colorify the logo .
4589	Format a domain into a human - readable string .
4590	Extract domain from file .
4591	Returns a list of files to test .
4592	Returns a list of file URLs .
4593	Switches the state of an issue .
4594	Get the expiration date .
4595	Handle the catched status .
4596	Get the structure from the config file .
4597	Create a directory if it doesn t exist .
4598	Delete uneeded directories .
4599	Set the path to a configuration file .
4600	Load configuration file .
4601	Install production config .
4602	Install iana configuration .
4603	Install the PSL configuration file .
4604	Install the directory structure file .
4605	Merge the upstream configuration with the upstream configuration .
4606	Load the configuration file .
4607	Split a version string into digits and non - digits .
4608	Check if the local and upstream versions are valid .
4609	Returns True if the project is cloned .
4610	Handle a non - existant index .
4611	Returns an analytic host file directory .
4612	Print a unified file .
4613	Print the status file .
4614	Check to see if we should not produce a file .
4615	Add an extension to the public suffix database .
4616	Load the psl database from disk .
4617	Return a regular expression for the given element .
4618	Returns a hierarchical version of the given element .
4619	Load the iana database .
4620	Return the referer for the given extension .
4621	Return a list of all valid extensions .
4622	Update iana - domains - db .
4623	Mine a URL .
4624	Retrieve mined data from the file .
4625	Backup the file .
4626	Add a list of files to be mined .
4627	Remove the bare from the list .
4628	Return a list of mined files .
4629	This method is called by pyfunceble .
4630	Get content from a JSON file .
4631	Write content to file .
4632	Write a whois record .
4633	Write the expiration date to the log file .
4634	This method is called when a referer is not found .
4635	Write the header to the output file .
4636	Create a header tuple from a dictionary of data .
4637	Print the header of the response .
4638	Return an OrderedDict of the data to print .
4639	Return a list of size bytes from the given header .
4640	Colorize data according to the template .
4641	Print data to a JSON file .
4642	Get the data to print .
4643	Save the log to a file .
4644	Calculate the time difference between two dates .
4645	Format the execution time as a string .
4646	Return a list of files to delete .
4647	Returns a list of databases to delete .
4648	Delete all files and databases .
4649	Returns the hash of the file .
4650	Returns the hash of the data .
4651	Get the hash of the file or data .
4652	Execute the command and return the output .
4653	Remove a key from the main dictionary .
4654	Rename a key to a new key .
4655	Merge two dictionnaries .
4656	Write the main dictionnary to a JSON file .
4657	Dump the main dictionnary to a YAML file .
4658	Given a list of paths split them into a list of paths .
4659	Write data to file .
4660	Read the contents of the file .
4661	Return a sorted list of the main list .
4662	Merge two lists of dictionaries or lists .
4663	Return a list of not matching strings .
4664	Match the data against the regex .
4665	Replace all occurrences of this string with another string .
4666	Count the number of tests .
4667	Calculate the number of tests .
4668	Print the results of the test .
4669	Check if a URL is valid .
4670	Checks if a domain is valid .
4671	Checks if the given domain is a subdomain .
4672	Check if the test type is valid .
4673	Reformat the historical - formating error .
4674	Retrieve the inactive database if it exists .
4675	Backup the inactive database .
4676	Return the timestamp in seconds .
4677	Returns a list of all files in the inactive database .
4678	Check if inactive database is present .
4679	Retrieve the whois database .
4680	Backup the whois database .
4681	Check if the user is in the database .
4682	Check if the current time is older than the current time .
4683	Get the expiration date for this request .
4684	Add a new record to the database .
4685	Set up travis permissions .
4686	Run travis .
4687	Get the hostname aliases and IPs from the hostname .
4688	Send a whois request to the server .
4689	Returns a URLStatus object .
4690	Get the referer for the given domain extension .
4691	Get the current object .
4692	Return a list of paths to the standard Python libraries .
4693	Return a list of all standard package names .
4694	Yield line numbers of unused imports .
4695	Extract unused import module name from messages .
4696	Yield line numbers for star import used messages .
4697	Extract undefined name from import star usage messages .
4698	Yield line numbers of unused variables .
4699	Find duplicate key line numbers .
4700	Create a dictionary of key - > list of messages .
4701	Check the source for errors .
4702	Extract the package name from the given line .
4703	Return True if line is a multiline import statement .
4704	Check if the line is a multiline statement .
4705	Filter imports that are not in unused_module
4706	Break up import statements .
4707	Filter the source code according to the SAFE_IMPORTS setting .
4708	Given a list of messages return a dict mapping line numbers to messages .
4709	Filter star imports .
4710	Filter out duplicate keys .
4711	Check if a dict entry has a key .
4712	Check if value is a literal or a name .
4713	Yields line numbers of useless pass lines .
4714	Filter useless pass lines .
4715	Return the indentation of a line .
4716	Get the ending of a line .
4717	Given a source code return a filtered copy of the source .
4718	Split a comma - separated string into a set of strings .
4719	Check if filename is a . py file .
4720	Check if filename is in the exclude list .
4721	Find all files in filenames .
4722	Command line interface for Autoflake .
4723	Reads a ObtainLeaseResponsePayload from an input stream .
4724	Writes this ObtainLeaseResponsePayload to the output stream .
4725	Writes this CancelRequestPayload to the output stream .
4726	Reads a CancelResponsePayload from an input stream .
4727	Create a Name instance from a name value and name type .
4728	Reads a Digest from an input stream .
4729	Writes the digest to the given output stream .
4730	Create a Digest instance .
4731	Reads a KMIP ApplicationSpecificInformation from an input stream .
4732	Writes the application specific information to the given output stream .
4733	Create a ApplicationSpecificInformation object .
4734	Reads a KMIP Derivation Parameters from an input stream .
4735	Writes the Derivation Parameters to the output stream .
4736	Reads a GetRequestPayload from an input stream .
4737	Writes this GetRequestPayload to the output stream .
4738	Reads a GetResponsePayload from an input stream .
4739	Writes the response payload to the output stream .
4740	Reads a SignatureVerifyRequestPayload from an input stream .
4741	Writes this KMIP signature to an output stream .
4742	Reads a SignatureVerifyResponsePayload from an input stream .
4743	Process a request .
4744	Builds an error response .
4745	Process a template attribute .
4746	Retrieves attributes from a managed object .
4747	Get an attribute from a managed object .
4748	Set attributes on a managed object .
4749	Sets an attribute on a managed object .
4750	Checks if the given policy is allowed for the given object type and operation .
4751	Writes this DecryptRequestPayload to the output stream .
4752	Create an instance of the given secret type .
4753	Sets a configuration setting .
4754	Load server configuration settings from a file .
4755	Process bind parameter value .
4756	Return a list of cryptographic usage masks .
4757	Reads a long integer from an input stream .
4758	Writes the LongInteger to the KMIP header .
4759	Validate the value of the LongInteger .
4760	Reads a big integer from the specified byte stream .
4761	Writes the BigInteger to the given byte stream .
4762	Validate that the value is an integer .
4763	Validate that the enumeration is valid .
4764	Reads a boolean value from the buffer .
4765	Writes the boolean value to the given stream .
4766	Writes the Boolean field to the stream .
4767	Validate that the value is a boolean .
4768	Reads a KMIP Interval from a byte stream .
4769	Validate that the interval is valid .
4770	Get the key wrapping data .
4771	Set the key wrapping data .
4772	Validates that the key is valid .
4773	Validate that the secret data is valid .
4774	Validate that the opaque data is valid .
4775	Convert an attribute name to a tag name .
4776	Convert an attribute tag to a name .
4777	Get a bitmask from a list of enumerations .
4778	Given an enumeration and a bit mask return a list of enumeration objects .
4779	Checks whether the given enumeration is a bit mask .
4780	Reads this CreateKeyPairRequestPayload from an input buffer .
4781	Writes the template attribute to the KMIP output buffer .
4782	Reads the CreateKeyPair response payload .
4783	Writes the CreateKeyPair response payload to the given output buffer .
4784	Reads a GetAttributeListRequestPayload from an input buffer .
4785	Writes this GetAttributeListRequestPayload to the output buffer .
4786	Reads the GetAttributeList response payload .
4787	Writes the GetAttributeList response to the given output buffer .
4788	Return a list of all json files in a directory .
4789	Scan the policy directory for policies .
4790	Run the policy file monitor .
4791	Get a certificate from a connection object .
4792	Get the extended key usage from a certificate .
4793	Get a list of common names from a certificate .
4794	Get the client identity from a certificate .
4795	Reads a Create Request Payload from an input buffer .
4796	Writes the Create request payload to the given output buffer .
4797	Reads the Create Response Payload from an input buffer .
4798	Writes this CreateResponsePayload to the given output buffer .
4799	Convert an object to a PieKey or PieKey object .
4800	Reads a KMIP Response Payload from an input stream .
4801	Reads the DeriveKey request payload .
4802	Writes the DeriveKey request payload to the given output buffer .
4803	Returns True if the given attribute is supported .
4804	Checks if an attribute is deprecated .
4805	Returns True if the given attribute applies to the given object type .
4806	Checks if an attribute is multivalued .
4807	Get a valid value from a configuration file .
4808	Reads a CheckResponsePayload from an input stream .
4809	Writes this CheckResponsePayload to the output stream .
4810	Reads a KMIP AttributeReference from an input buffer .
4811	Writes this AttributeReference to the KMIP output buffer .
4812	Reads the Attributes object from an input stream .
4813	Writes the Attributes object to the output stream .
4814	Reads a nonce from an input stream .
4815	Writes the nonce to the output stream .
4816	Reads a UsernamePasswordCredential from an input stream .
4817	Writes the username and password to the output stream .
4818	Reads a KMIP Device Credential from an input stream .
4819	Writes this KMIP object to an output stream .
4820	Reads a KMIP Credential from an input stream .
4821	Writes this credential to the output stream .
4822	Reads this MACSignatureKeyInformation from an input stream .
4823	Writes this MACSignatureKeyInformation to the output stream .
4824	Reads a KeyWrappingData from an input stream .
4825	Writes the message to an output stream .
4826	Reads a KeyWrappingSpecification from an input stream .
4827	Writes this KeyWrappingSpecification to an output stream .
4828	Reads the extension information from a byte stream .
4829	Writes the extension information to the given output stream .
4830	Create a new extension information object .
4831	Reads a RevocationReason from a byte stream .
4832	Writes this RevocationReason to the given output stream .
4833	Validate the revocation code and revocation message .
4834	Reads the ObjectDefaults object from an input buffer .
4835	Writes the ObjectDefaults structure to the KMIP output buffer .
4836	Reads a KMIP DefaultsInformation object from an input buffer .
4837	Writes the DefaultsInformation to the KMIP output buffer .
4838	Reads a KMIP RNGParameters object from an input buffer .
4839	Writes the RNGParameters structure to the KMIP output buffer .
4840	Reads a ProfileInformation object from an input buffer .
4841	Writes the profile information to the KMIP output buffer .
4842	Writes this KMIP ValidationInformation to the KMIP output buffer .
4843	Reads a KMIP CapabilityInformation object from an input buffer .
4844	Writes the CapabilityInformation object to the given output buffer .
4845	Stop the server .
4846	Start the connection service .
4847	Reads a LocateRequestPayload from an input buffer .
4848	Writes this template to the KMIP output buffer .
4849	Reads a LocateResponsePayload from an input buffer .
4850	Writes this LocateResponsePayload to the given output buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a HMAC - based message authentication code .
4854	Encrypt the given text using the specified encryption algorithm .
4855	Encrypts the given text using the specified symmetric key .
4856	Encrypt text using asymmetric encryption .
4857	Decrypts the text using the asymmetric encryption algorithm .
4858	Create a new RSA key pair .
4859	Derives a key using the specified derivation method .
4860	Create a RSA private key from a byte string .
4861	Verifies the signature of a message .
4862	Reads a SignResponsePayload from an input stream .
4863	Writes this SignResponsePayload to the output stream .
4864	Reads a GetUsageAllocationRequestPayload from an input stream .
4865	Converts a ProtocolVersion object to a KMIPVersion enum .
4866	Reads the protocol version from an input stream .
4867	Writes the protocol version to the given output stream .
4868	Reads a KMIP Authentication object from an input stream .
4869	Writes this authentication to the output stream .
4870	Reads a PollRequestPayload from an input stream .
4871	Reads a KMIP Certificate from a byte stream .
4872	Writes this certificate to the given byte stream .
4873	Authenticate to the SLUGS server .
4874	Reads an archive response payload from an input stream .
4875	Writes the payload to the output stream .
4876	Start the session .
4877	Reads a RekeyResponsePayload from an input stream .
4878	Checks whether the profile is supported by the given conformance clause .
4879	Derives a key from one or more unique identifiers .
4880	Get attributes for a given uuid .
4881	Get attribute list .
4882	Send a query to the server .
4883	Signs the given data using the given credential .
4884	Open the client connection .
4885	Close the client connection .
4886	Create a cryptographic key .
4887	Creates a cryptographic key pair .
4888	Register a Pie ManagedObject .
4889	Rekey the given uid and offset .
4890	Derives a key from a set of unique identifiers .
4891	Locates a list of objects in the specified object group .
4892	Checks the usage limits for a given uid .
4893	Get a managed object by uid .
4894	Gets the attributes of a Kmip object .
4895	Activates a Kmip instance .
4896	Revokes the specified revocation .
4897	Sends a MAC address to a Kmip device .
4898	Builds a cryptographic parameters object from a dictionary .
4899	Builds a EncryptionKeyInformation object from a dictionary .
4900	Builds a MACSignatureKeyInformation object from a dictionary .
4901	Builds a KeyWrappingSpecification from a dictionary .
4902	Build common attributes .
4903	Build a name attribute .
4904	Reads a QueryRequestPayload from an input buffer .
4905	Writes the query request payload to the given output buffer .
4906	Writes this KMIP object to the given output buffer .
4907	Reads the GetAttributes response payload .
4908	Writes the GetAttributes response payload to the output buffer .
4909	Get a single entry point .
4910	Get a group by name .
4911	Get all entry points in a group .
4912	Load an object from a module .
4913	Create an entry point from a string .
4914	Start a livereload server .
4915	Generate project files .
4916	Generate a new controller .
4917	Generate an action for a given controller .
4918	Generate a form .
4919	Generate a model .
4920	Generate a new macro .
4921	Create a new directory .
4922	Copy a file from src_file to dst_file .
4923	Return the time since the given value .
4924	Check if url is valid .
4925	Encode something to a URL safe string .
4926	Decode a string into a Python object .
4927	Wrap a function to return a JSON response .
4928	Returns the absolute URL for the given endpoint .
4929	Load the config from the environment .
4930	Sign in a user .
4931	Get the currently logged in user .
4932	Create a Flask application .
4933	Register a Jinja2 environment .
4934	Register all blueprints .
4935	Register an error handler .
4936	Register before and after request hooks .
4937	Write a dataframe to a CSV file .
4938	Read a csv file into a pandas DataFrame .
4939	Serialize a dataframe .
4940	Deserialize a DataFrame from a reader .
4941	Update the object from a pandas DataFrame .
4942	Update the object from raw_data .
4943	Return the URL of the contents of the file .
4944	Add data from a pandas DataFrame .
4945	Upload a raw data to a data type .
4946	Open an intermediate dataset .
4947	Read the contents of this dataset as binary data .
4948	Read the dataset contents as text .
4949	Returns a pandas DataFrame .
4950	Get an intermediate dataset for the given node and port .
4951	Get all experiments in a workspace .
4952	Get a list of datasets for a workspace .
4953	Get information about a dataset .
4954	Publish a function or a workspace .
4955	Returns a function that will be called when a service is published .
4956	Decorator to add annotations to a function .
4957	Decorator to add a return annotation to a function .
4958	Attach an attachment to a function .
4959	Find the names of all globals in the given code .
4960	Return a copy of this pen .
4961	Lookup a color from a string .
4962	Draw the rectangular area .
4963	Cubic bernstein extrema .
4964	Helper function for cubicbernstein interpolation .
4965	Build a list of choices for the tree .
4966	Returns a function that takes a list of command options and returns a tuple of command options .
4967	Register a function as the items hook .
4968	Compose a dynamic tree from a module or a string .
4969	Initialize the site tree cache .
4970	Remove all sites from the cache .
4971	Get an entry from the cache .
4972	Update an entry s value .
4973	Set an entry in the cache .
4974	Initialize the page .
4975	Returns the tree alias for the given alias .
4976	Returns True if the current app is an admin .
4977	Calculate the depth of an item .
4978	Get the current item for the given tree alias .
4979	Returns the URL for the given sitetree item
4980	Initialize the site tree .
4981	Get the current page s attribute .
4982	Get the ancestor of current_item .
4983	Create a menu from a tree alias and a list of branches
4984	Checks if the current user has access to the item .
4985	Return a list of breadcrumbs for the given tree alias .
4986	Get the tree items for the given alias .
4987	Returns the children of the given parent item .
4988	Get a list of children for a given tree alias .
4989	Updates the has_children attribute of each tree item .
4990	Filter a list of items based on a navigation type .
4991	Get the parent item of the given item .
4992	Recursively climbers a tree item .
4993	Resolve a variable name .
4994	Returns an instance of sitetree . TreeNode .
4995	Get the children of a tree item .
4996	Add a breadcrumb to the site tree .
4997	The sitetree menu tag .
4998	Render a template with the given tree items .
4999	Returns an instance of this class for the given preposition .
5000	Get the URL name for a model .
5001	Re - register the tree admin .
5002	Redirect the user to the given path .
5003	Redirect the user to the index page .
5004	Add a new item to the tree .
5005	Redirect the user to the change page .
5006	Get the form for the tree item .
5007	Get a tree object .
5008	Move a tree item up or down .
5009	Save the model to the database .
5010	Returns a list of urls for the tree admin .
5011	Dump the tree view to a file .
5012	Create a tree object .
5013	Create a tree item .
5014	Import app s sitetree module .
5015	Get the model class for the given settings entry .
5016	Create a Config instance from a mapping .
5017	Create a Config instance from a Python file .
5018	Create a Config instance from a TOML file .
5019	Create a Config instance from an object .
5020	Create a ZipkinAttrs object for a span .
5021	Create HTTP headers for a new span .
5022	Get the current context for this span .
5023	Start tracing .
5024	Stop the zipkin transport .
5025	Update binary annotations .
5026	Add a sa binary annotation to the logging context .
5027	Override the name of the span .
5028	Create an endpoint object .
5029	Create a copy of an endpoint with a new service name .
5030	Build a V1Span from this span .
5031	Encodes a list of spans into a protobuf .
5032	Create a protobuf span .
5033	Convert a hex string to a byte string .
5034	Return the protobuf kind for the given kind .
5035	Convert an endpoint to a zipkin_pb2 . Endpoint object .
5036	Convert annotations to a list of zipkin_pb2 . Annotation objects .
5037	Create a zipkin annotation .
5038	Create a binary annotation .
5039	Create a zipkin endpoint .
5040	Copy an endpoint with a new service name .
5041	Create a list of annotations .
5042	Create a list of binary annotations .
5043	Create a new span .
5044	Convert a Span to a byte string .
5045	Encodes a list of binary thrift objects into a byte string .
5046	Detect the span version and encoding .
5047	Convert spans to output_encoding .
5048	Push zipkin attributes to the stack .
5049	Encodes a single v2 span into a byte string .
5050	Create a JSON endpoint from an endpoint object .
5051	Encode a span into a protobuf .
5052	Decode a list of spans into a list of Span objects .
5053	Convert a thrift endpoint to an Endpoint object .
5054	Decode the Thrift annotations into a tuple of tuples .
5055	Convert a list of Thrift binary annotations into a dictionary of tags .
5056	Decode a Thrift span into a Span object .
5057	Convert a trace ID to a string .
5058	Convert an unsigned long to a hex string .
5059	Writes a 16 - bit integer to the given byte array at the given position in hexadecimal format .
5060	Fix up the day of the month if it is too long .
5061	Set the transaction code in the tag_dict .
5062	Set the iph_id attribute of the tag .
5063	Set the TNR for the given tag .
5064	Parses the given data string into a dictionary of tags .
5065	Parse a file or file - like object .
5066	Join a string of lines into a single string .
5067	Return response as JSON or text .
5068	Log a warning if we have exceeded a ratelimit .
5069	Perform a HTTP request .
5070	Get bot info .
5071	Get a list of bots .
5072	Read the next packet from the stream .
5073	Write a message to the output stream .
5074	Close the file descriptor .
5075	Decode a byte string into a Term object .
5076	Encode a term .
5077	Add a source address to the multi - in socket .
5078	Send the next message from the queue .
5079	Sets the remote service hello callback .
5080	cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given the TYPES in a given TIMEOUT
5083	construct a a raw SOAP XML string given a prepared SoapEnvelope object
5084	Discover systems using WS - Discovery
5085	Get the tagged item manager .
5086	Return a list of all child relations of a model .
5087	Get all child m2m relations .
5088	Save the clusterable model .
5089	Create a model instance from a serializable data dict .
5090	Validate that all unique fields in the form are valid .
5091	Returns True if all forms have changed .
5092	Return a new address with a valid checksum .
5093	Generate a checksum for this address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt the user for a seed .
5097	Validate signature fragments .
5098	Get the key at the given index .
5099	Get a key for the given address .
5100	Create a key iterator .
5101	Create a Kerl from the given index .
5102	Absorb a sequence of trits .
5103	Squeeze a sequence of trits .
5104	Transform the state according to the truth table .
5105	Get a list of digests .
5106	Get a list of private keys .
5107	Prepare a multisig transfer .
5108	Add trits from left to right .
5109	Return a list of trits from an integer .
5110	Add two trits .
5111	Calculate the full sum of two trits .
5112	Output a seed to the screen .
5113	Find transactions .
5114	Get inputs from the adapter .
5115	Get a list of new addresses .
5116	Get a list of transfers .
5117	Promote a transaction .
5118	Create a replay bundle command .
5119	Send a transfer .
5120	Send trytes to the adapter .
5121	Resolve an adapter from a URI .
5122	Send a request to the server .
5123	Log a message to the logger .
5124	Send an HTTP request .
5125	Interprets the response and raises an exception if it is not a JSON response .
5126	Add a response to the response queue .
5127	Add a digest .
5128	Returns a MultisigAddress object .
5129	Create an iterator of addresses .
5130	Create an address from a digest .
5131	Generate an address from a key iterator .
5132	Find transaction objects .
5133	Iterate over the addresses used by the adapter .
5134	Get a list of bundles from a list of transaction hashes .
5135	Check if a trytes codec is available .
5136	Get codec info .
5137	Encode a byte string .
5138	Decode a tryte sequence .
5139	Returns a list of addresses that match the given criteria .
5140	Add a route to the router .
5141	Create a Transaction instance from a trytes string .
5142	Return a JSON - compatible representation of the transaction .
5143	Get the signature validation trytes .
5144	Set the is_confirmed flag .
5145	Return a list of all the messages in this transaction .
5146	Return a list of tryte strings .
5147	Return a list of transactions grouped by address .
5148	Find all commands in a given package .
5149	Execute the given request .
5150	Apply a filter to a value .
5151	Get the URL for a job .
5152	Returns a list of validation errors .
5153	Returns True if the validator is valid .
5154	Create a validator for the bundle .
5155	Get a list of signature errors from a list of groups .
5156	Returns an error message if the group has invalid signature .
5157	Traverse a bundle .
5158	Start the repl .
5159	Return a random string of the given length .
5160	Get the digest of the key .
5161	Signs input transactions .
5162	Pretty print the JSON representation of the object .
5163	Add trits to the hash .
5164	Squeeze a list of trits .
5165	Add a context to an exception .
5166	Security level .
5167	Increments the legacy tag .
5168	Return the tag of the transaction .
5169	Add a transaction to the bundle .
5170	Finalizes the bundle .
5171	Sign all inputs in this bundle .
5172	Signs the input at the given index .
5173	Create input transactions .
5174	Convert a value to a standard IOTA unit .
5175	Decompress G1 .
5176	Calculates the prime field of a given number of fields .
5177	Create an instance from a JSON file .
5178	Find the groups of words that match the given category .
5179	Find the synonym for a given word .
5180	Expands the abbreviations in the text .
5181	Split a description into words .
5182	Return a list of all categories .
5183	Create a random colour .
5184	Plot the component s summary .
5185	Create a builtin LEGEND object .
5186	Create a TimeScale object from a builtin timescale name .
5187	Create a random Decorator from a list of components .
5188	Create a Decor object from an image file .
5189	Create a Legend from a CSV file .
5190	Convert the table to a CSV file .
5191	Returns the maximum width of the table .
5192	Get a Decor object for a given component .
5193	Return the value of an attribute of a given class .
5194	Get the component of the given colour .
5195	Plot the data .
5196	Create a component from a text string .
5197	Return a summary of the component .
5198	The Rock class was renamed Component .
5199	Process a single row of text .
5200	Parse a canstrat from a text string .
5201	Return True if the graph is strict .
5202	Return a list of unique thickness values .
5203	Return a list of Interval objects from a list of tops .
5204	Clean data for longitudinal data .
5205	Read longitudinal data from a petrel file .
5206	Build a list of intervals from a dictionary of data .
5207	Create a Striplog object from a CSV file .
5208	Create an instance of this class from an image file .
5209	Create a Striplog instance from a log file .
5210	Create a Las3 object from a string .
5211	Create a Interval object from a canstrat file .
5212	Return a copy of this Striplog .
5213	Write a list of components to a CSV file .
5214	Convert the Lithology to a LITH3 file .
5215	Plot a legend on the given axis .
5216	Get the data for a given field .
5217	Extract data from a basis .
5218	Find all components that match the search_term .
5219	Find overlapping incongruities .
5220	Find incongruities that are not incongruities .
5221	Prune a striplog .
5222	Anneal the strip .
5223	Fill the component list with a list of components .
5224	Returns a new striplog with the union of this striplog and another striplog .
5225	Returns a new striplog with the intersection of this striplog and another striplog .
5226	Merge overlapping segments into a new segment .
5227	Plot the histogram .
5228	Inverts the striplog .
5229	Crop the striplog to the given extent .
5230	Return the quality of the given tests .
5231	Convert a hex string to a name .
5232	Create a loglike from an image file .
5233	Return the field name for the given field name .
5234	Get a list of jobs with the given prefix .
5235	Parse a job HCL .
5236	Update a token .
5237	Get a list of all allocations for a given prefix .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Check the health of an allocation .
5241	Drain a node .
5242	Drain a node with a spec .
5243	Set the eligible state of a node .
5244	List files .
5245	Get a stream of data .
5246	Get a stat of a file .
5247	Join an agent .
5248	Update a list of servers .
5249	Force leave a node .
5250	Get a list of nodes with the given prefix .
5251	Get all evaluations for a given prefix .
5252	Get all namespaces for a given prefix .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Revert a job to a new version .
5258	Deregister a job .
5259	Get the current configuration .
5260	Delete a peer .
5261	Get all deployments for a given prefix .
5262	Get a random value for a given object type .
5263	Get a random mutator .
5264	Get a random string from polyglot_attacks .
5265	Fuzz the given object .
5266	Return a safe unicode string from a buffer .
5267	Start the web server .
5268	Stop PJFServer .
5269	Create a custom HTML file .
5270	Serve the testcase .
5271	Fuzz an object .
5272	Spawn a PJF process .
5273	Get the output of the process .
5274	Wait for the read to finish .
5275	Close the PJFExecutor .
5276	Start the PJF worker .
5277	Execute PJFExternalFuzzer .
5278	Decorate a function to encode JSON data .
5279	Build a random string .
5280	Return a string representation of the current scope .
5281	Return a string representation of the query string .
5282	Build a random value .
5283	Build an OptGram .
5284	Build the value of the reference .
5285	Build a random star .
5286	Shuts down PJFProcessMonitor .
5287	Spawn a new process and monitor it .
5288	Start the monitor process .
5289	Returns a random float between a and b .
5290	Add a definition to a category .
5291	Add a category to a category group .
5292	Generate a number of grams .
5293	Fuzz an element .
5294	Return the fuzzed JSON string .
5295	Get fuzzed PJF elements .
5296	Decorate a function to return a Mutator .
5297	Signal handler for SIGTERM .
5298	Exit the current process .
5299	Pause the running process .
5300	Resume a paused command .
5301	Stop the running process .
5302	Restarts the running process .
5303	Returns a list of SkypeEvent objects .
5304	Set user s mood .
5305	Set the user s avatar .
5306	Get the meta data for a given URL .
5307	Get a contact from a user .
5308	Get a user by ID .
5309	Get a list of bots .
5310	Get information about a bot .
5311	Search for users with a search string .
5312	Returns a list of SkypeRequest objects .
5313	Create a new instance from raw data .
5314	Merge the attributes from another object into this object .
5315	Merge an object into another object .
5316	Perform a sync state call .
5317	Read a token from a file .
5318	Write token to file .
5319	Verify that a token is valid .
5320	Refresh the skype token .
5321	Get the user ID .
5322	Get a Skype Registration Token .
5323	Get all available endpoints .
5324	Check if a user exists in Skype .
5325	Authenticates and returns a new token .
5326	Authenticates a skype token .
5327	Configure this endpoint s presence documentation .
5328	Ping a Skype endpoint .
5329	Get a list of recent conversations .
5330	Get a single chat .
5331	Create a new thread .
5332	Convert a user URL to a user ID .
5333	Convert chat URL to chat ID .
5334	Exhaust an iterator over the results of a function .
5335	Return unicode text no matter what
5336	Detect the format of the given text .
5337	Parse text into metadata and content .
5338	Post as a dict for serializing
5339	Load a YAML file .
5340	Export metadata to a YAML string .
5341	Turn metadata into JSON
5342	Return a fullmatch for this list .
5343	Return a list of all items in the string .
5344	Return a list of sublists that match the given pattern .
5345	Replace the start of the pattern with the new start .
5346	Returns a list of arguments .
5347	Returns a list of WikiLists that match the pattern .
5348	Create a trie from a list of strings .
5349	Convert a trie into a regular expression .
5350	Check if an index is valid .
5351	Insert a string at the given index .
5352	Partition a character into two parts .
5353	Return a list of spans of the given type .
5354	Remove all spans from rmstart to rmstop .
5355	Insert or update the span at the given index .
5356	The number of nesting levels .
5357	Return the shadow of this span .
5358	Return the extended link shadow .
5359	Return a dictionary mapping type to spans .
5360	Use pformat instead .
5361	Returns a list of Parameter objects .
5362	Returns a list of ParserFunction objects .
5363	Returns a list of Template objects .
5364	The list of wikilinks .
5365	Returns a list of Comment objects .
5366	Returns a list of external links .
5367	Return a list of sections .
5368	Returns a list of tables .
5369	r Return a list of WikiLists .
5370	Returns a list of tags .
5371	Iterate over all spans of the given type .
5372	Returns a list of the ancestors of this sentence .
5373	Get the parent of this wiki text .
5374	Return the most common element in a list .
5375	Get an argument from a list of arguments .
5376	Return the name of the template .
5377	Removes the first argument from the list of arguments .
5378	Remove duplicate arguments .
5379	Set the value of an argument .
5380	Get the argument with the given name .
5381	Check if the function has an argument with the given name .
5382	Remove the argument with the given name .
5383	Convert a crscode to a string .
5384	Find an ellipsoid by name and crstype .
5385	Create a CRS object from a URL .
5386	Create a GeoJSON object from a file .
5387	Convert EPSG code to CRS object .
5388	Create a CRS object from an ESRI code .
5389	Create a CRS object from a CRS code .
5390	Return a CRS object from an unknown text string .
5391	Write the record to a file - like object .
5392	Read a raw VLR from a data stream .
5393	Parse a list of GeoTiffKeys from a VLRList .
5394	Parse a GeoTiffKeyDirectoryVlr and return a list of GeoTiffKeys .
5395	Get the signedness of an extra dimension .
5396	Get the ID for an extra dimension type .
5397	Create a new point record from another point record .
5398	Copy fields from another record .
5399	Append zeros to the end of the array if it is too small .
5400	Returns a set of all dimensions names .
5401	Create a new instance of point_format filled with zeros .
5402	Create a point from a file - like object .
5403	Create a point from a compressed buffer .
5404	The x - axis of the data .
5405	The height of the y - axis .
5406	The z - axis .
5407	Add an extra dimension to the point data .
5408	Write the VLRs to an output stream .
5409	Write data to a file .
5410	Write to a file or file - like object .
5411	Build a dictionary of point formats and dimensions .
5412	Build a dictionary of tuples of point formats and dimensions .
5413	Convert a NumPy dtype to a point format .
5414	Returns the minimum file version for a point format .
5415	Checks if a point format ID is compatible with a file version .
5416	Returns a list of VLRs of the given type .
5417	Extract VLRs of a given type .
5418	Read num_to_read VLRs from data_stream .
5419	Check if all las files have the same point format id .
5420	Check if all las files have the same dtype .
5421	Raises an exception if the file signature is not correct .
5422	Read the header from the stream .
5423	Reads a list of VLRs from the file .
5424	Read points from the VLRs .
5425	Read the compressed points data .
5426	Read the internal waveform packet .
5427	Reads the list of EVLRs from the stream .
5428	Warn if we are not at the expected position .
5429	Open a LAS file or file - like object .
5430	Read data from a las file .
5431	Create a LasData object from a LasHeader object .
5432	Create a LasData object .
5433	Convert a Las file to a point format .
5434	Merge multiple las files into one .
5435	Write las to a file and read it again .
5436	Return the creation date .
5437	Set creation date .
5438	The minimum values of the curve .
5439	Set the minimum values .
5440	The maximum values of the points .
5441	Set the maximum x y and z values .
5442	Returns a list of scales .
5443	A list of offset values .
5444	Peek the file version from the given stream .
5445	Convert the old header to a new header .
5446	Unpack a mask into a numpy array .
5447	Pack sub_field_array into sub_field_array .
5448	Return a list of dimension names that are missing from the point format .
5449	Returns a dictionary of all sub - fields .
5450	The number of bytes of extra dimensions .
5451	Returns True if the image has a waveform packet .
5452	Main function for satel_integra .
5453	Calculate the CRC of the given command .
5454	Print a hex string .
5455	Verify that the response is well - formed .
5456	Return a list of set bits .
5457	Generates a query string from a command .
5458	Connect to the SATEL server and connect to it .
5459	Connect to the server .
5460	Start monitoring .
5461	Send a disarm command .
5462	Clear the alarm .
5463	Turn on or off an output .
5464	Keep the connection alive .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Remove the user from the database .
5468	Guess the type of a file or a notebook .
5469	Get the file id for the given path .
5470	Get a notebook from the database .
5471	Create a notebook model from a database record .
5472	Get a directory by path .
5473	Convert a list of file records into a list of models .
5474	Create a directory model from a database record .
5475	Create a file model from a database record .
5476	Save a notebook to a file .
5477	Save a file to the database .
5478	Rename a file or directory .
5479	Delete a file or directory .
5480	Ensure that a user exists in the database .
5481	Delete a user from the database .
5482	Create a directory in the database .
5483	Check if user_id is in db_dirname
5484	Delete a directory from the database .
5485	Check if a directory exists .
5486	Get all files in a directory .
5487	Get all directories in a directory .
5488	Return a where clause for a file query .
5489	Select files by user id and api path .
5490	Return a list of default file fields .
5491	Get a single file from the database .
5492	Get a file by user_id .
5493	Get the file id for a user .
5494	Check if a file exists in the database .
5495	Rename a directory .
5496	Save a file to the database .
5497	Generate notebooks .
5498	Delete all remote checkpoints for a user .
5499	Generate checkpoints from the database .
5500	Generate notebooks from a table .
5501	Re - encrypt the content of a row .
5502	Re - encrypt user content .
5503	Derives a single Frenet key from a password and a user ID .
5504	Derives fallback Fernet keys from a list of passwords .
5505	Create a single password crypto factory .
5506	Memoizes a single argument .
5507	Get the name of a column or cast .
5508	Convert a row to a dict with no content field .
5509	Convert a row to a dict with the content field .
5510	Create a checkpoint for a notebook .
5511	Create a checkpoint for the given content .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	List all checkpoints for a given path .
5515	Move all checkpoints to a new path .
5516	Delete all checkpoints for a given path .
5517	Remove all remote checkpoints from the database .
5518	Resolve a path to a root manager .
5519	Apply a prefix to a model .
5520	A decorator that dispatches a path to a manager .
5521	Decorator to dispatch a path to a manager .
5522	Decorator to dispatch files from old to new paths .
5523	Called when a directory name has changed .
5524	Get a single root directory .
5525	Normalize the API path .
5526	Split a path into a name and dirname .
5527	Return a base64 - encoded representation of nb .
5528	Read data from a base64 string .
5529	Decode unknown content from base64 .
5530	Decode a base64 - encoded file .
5531	Returns a list of all directories starting with the given path .
5532	Wrap a function to raise a 404 if the path is outside the root .
5533	Create a postgres user .
5534	Given a list of models return a list of directories and files .
5535	Walks a list of directories and returns a list of directories and files .
5536	Iterate over all files in a directory .
5537	Iterate over all files and yield their content .
5538	Re - encrypt all users .
5539	Re - encrypt a single user .
5540	Un - encrypt all users .
5541	Unencrypt a single user .
5542	Create a temporary alembic . ini file .
5543	Upgrade a database to a specific revision .
5544	Sanitize a block .
5545	Queue an instance for the given embed type .
5546	Load instances from a list of ids .
5547	Insert an instance into the embed block .
5548	Load data for all embed types .
5549	Validate the data passed in .
5550	View for the admin page
5551	Return a JSON representation of the object .
5552	Hide authenticated fields .
5553	Exclude fields from the request .
5554	Handle GET requests .
5555	Return a queryset of published images .
5556	Return a queryset of publishable objects .
5557	Returns True if the field is null False otherwise .
5558	Validate that a widget is valid .
5559	Validate that a zone is valid .
5560	Returns True if id is a valid UUID .
5561	Returns the permissions of the user .
5562	Modify the permissions of the group .
5563	Validates author data .
5564	Save a zone .
5565	Get the data from the request .
5566	Prepare the data to be sent to the client .
5567	Render the template .
5568	Get the settings of the Integration .
5569	This method is called when the user is logged in .
5570	Get the settings for an integration .
5571	Update an integration s settings .
5572	Signup a user .
5573	Create a maptag from a list of strings .
5574	Render a zone .
5575	Save a featured image .
5576	Save a subsection to the database .
5577	Get the extension of the image .
5578	Return the URL for a medium image .
5579	Save the image .
5580	Save a thumbnail of the given image .
5581	Return a mysql connection object .
5582	Returns a BandwidthLimitedStream .
5583	Read the given amount of bytes from the file .
5584	Consumes the requested amount of time .
5585	Schedule a consumer for the given token .
5586	Process scheduled consumers .
5587	Calculate the projected rate .
5588	Record the current consumption rate .
5589	Download a file from a bucket .
5590	Poll for the result of a transfer .
5591	Get a list of callbacks for a given transfer_future .
5592	Returns a copy of original_dict filtered by whitelisted_keys .
5593	Decrements the counter .
5594	Call the callback when the queue is empty .
5595	Check if a file is a special file .
5596	Acquire a tag from the semaphore .
5597	Release the semaphore for the given tag .
5598	Adjust the chunk size to the given value .
5599	Queue a file - like object to be written to .
5600	Returns an IOWriteTask .
5601	Returns the download output manager class for the given transfer future .
5602	Main download loop .
5603	Write data to a file object .
5604	Request data to be written at the given offset .
5605	Check if a file - like object is seekable .
5606	Uploads a file - like object to a bucket .
5607	Download data from a file - like object .
5608	Copy an object from one bucket to another .
5609	Deletes a key from a bucket .
5610	Shuts down the server .
5611	Cancel all transfer coordinators .
5612	Wait for all transfer coordinators to finish .
5613	Read amount bytes from a file - like object .
5614	Wrapper for open_file_chunk_reader_from_fileobj .
5615	Returns the UploadInputManager class for the given transfer future .
5616	Set the exception of the transfer .
5617	Set the result of the operation .
5618	Set the exception of the task .
5619	Wait for the future to finish .
5620	Mark the task as cancelled .
5621	Submit a task to the given executor .
5622	Add a done callback .
5623	Add a failure cleanup function .
5624	Mark the task as done .
5625	Submit a task to the queue .
5626	Add a done callback to the future .
5627	Uploads a file to S3 .
5628	Download a file from S3 .
5629	Iterate over all step functions .
5630	Parse the arguments of a decorator .
5631	Refactor a step .
5632	Iterate over all step function decorators .
5633	Return the first argument of the given decorator .
5634	Refactor a step .
5635	Select the Python parser to use .
5636	List items in a team .
5637	Create a new person in a team .
5638	Update a membership .
5639	Delete a membership .
5640	Get the current catalog fact .
5641	Create a new message from a webhook .
5642	List items in a room .
5643	Delete a membership .
5644	Validate that the base_url contains a valid scheme and network location .
5645	Returns True if string is a web URL .
5646	Opens a local file and returns an EncodableFile object .
5647	Check that o is an instance of one of the acceptable types .
5648	Create a dictionary from a list of dictionaries and a dictionary of items .
5649	Raises an exception if the response code is not expected .
5650	Convert a JSON string into a dictionary .
5651	Parse a date string into a DateTime object .
5652	List items in a team .
5653	Create a new team .
5654	Update a room .
5655	Delete a room .
5656	List all objects in the organization .
5657	The created date of the team .
5658	Get the access token from the environment .
5659	Create a new event .
5660	Update a webhook .
5661	Delete a webhook .
5662	Remove max = null from next - URL .
5663	Sets the wait_on_rate_limit flag .
5664	Update the headers of the request .
5665	Return the absolute URL of the given URL .
5666	Perform a single HTTP request .
5667	Perform a GET request .
5668	Get all pages from a URL .
5669	Get items from a URL .
5670	Perform an HTTP PUT request .
5671	Perform a DELETE request .
5672	Create a new user .
5673	List items in a room .
5674	Create a new message .
5675	Delete a message .
5676	Create a new user .
5677	Get a person by ID .
5678	Update a person .
5679	Delete a person .
5680	Get the current user s details .
5681	Get a list of objects .
5682	Get a list of objects .
5683	Create a new object .
5684	Update a team .
5685	Delete a team .
5686	Get a list of objects .
5687	Converts a Python object into a Python tuple .
5688	Get an authorization code .
5689	The last activity of the team .
5690	Create a new message from a webhook .
5691	Get NGROK public URL .
5692	Delete webhooks with the given name .
5693	Create a new Ngrok webhook .
5694	Create a new NGROK webhook .
5695	Command line interface for DSMR console .
5696	Read telegrams from the serial port .
5697	Read telegram data from the serial port .
5698	Create a DSMR protocol .
5699	Create a DSMR reader connection .
5700	Create a TCP connection to the DSMR server .
5701	Received data from the server .
5702	Called when the connection is lost .
5703	Handle a received telegram .
5704	Parse telegram data .
5705	Get the version number from a file .
5706	Check if a Python version is supported .
5707	Find all packages in the top directory .
5708	Create a command class .
5709	Create a command class for the given function .
5710	Run a command .
5711	Create a class that checks that the given targets are present .
5712	Decorate a command class with a list of commands .
5713	Create a FileHandler class .
5714	Get data files from a list of data specs .
5715	Get package data .
5716	Compile a glob pattern .
5717	Split a path into its components .
5718	Translate glob patterns to regular expressions .
5719	Join a list of translated parts into a single string .
5720	Translate a glob part into a regular expression .
5721	Truncate the given table .
5722	Writes a table to the Postgres database .
5723	Writes indexes to the database .
5724	Writes the triggers to the database .
5725	Writes the constraints to the database .
5726	Write contents of a table to a file object .
5727	Process a single row .
5728	Writes indexes to the file .
5729	Writes the constraints to the file .
5730	Write triggers to the file .
5731	Get the number of items in the queue .
5732	Enqueue data into the queue .
5733	Start the queue .
5734	Build a WHERE clause for the extra_predicate .
5735	Return the ISO - 8601 representation of the given object .
5736	Reconnect to the database .
5737	Execute a query and return the first row .
5738	Get a connection to a database .
5739	Run the benchmark .
5740	Connect to the pool .
5741	Look up a system variable by its errno .
5742	Returns the total number of connections and fairies .
5743	Handle connection failure .
5744	Create a simple QB expression .
5745	Create an UPDATE statement .
5746	Connect to a database .
5747	Setup the database .
5748	Delete all tables .
5749	Start a new step .
5750	Stop a step .
5751	Load steps from raw_steps .
5752	Disconnect from the API .
5753	Reconnect to the server .
5754	Connect to the server .
5755	Called when a new message is received .
5756	Stop the timers .
5757	Send a ping to the API .
5758	Check if a Pong has been received .
5759	Send a payload to the API .
5760	Clears paused flag and re - subscribes to softly .
5761	Handle a system message .
5762	Handle the info response from the server .
5763	Handle error messages from the server .
5764	Pass data to the client .
5765	Resubscribe all channels .
5766	Handle an auth message .
5767	Handle a configuration event .
5768	Update the last timestamp of a channel .
5769	Reset the connection to the server .
5770	Get a list of candles for a given pair .
5771	Send a bitfinex config event .
5772	Subscribe to ticker events .
5773	Unsubscribe from a ticker .
5774	Subscribe to an order book .
5775	Unsubscribe from an order book .
5776	Subscribe to a raw order book .
5777	Unsubscribe from a raw order book .
5778	Subscribe to trades .
5779	Unsubscribe from trades .
5780	Subscribe to candles .
5781	Unsubscribe from candles .
5782	Authenticate with the API .
5783	Cancel an order .
5784	Called when a command is received from the device .
5785	Called when a device command is received .
5786	Called when a message is received from the device .
5787	Create a new device type .
5788	Publish an event .
5789	Update a device .
5790	Returns a list of client statuses .
5791	List custom bundles .
5792	Create a custom bundle .
5793	Update a schema .
5794	Disconnect from the IBM Watson IoT Platform .
5795	Called when a connection is established .
5796	Subscribe to events from a device .
5797	Subscribe to device status events .
5798	Subscribe to device commands .
5799	Publish a message to a device .
5800	Called when a message is received on an unsupported topic .
5801	Called when a device event is received .
5802	Device status event handler .
5803	Called when the client receives a status message from the server .
5804	Get an event from a device .
5805	Get all events for a given device .
5806	Make an API call .
5807	Initiate a mgmt request .
5808	Get the status of a request .
5809	Close the index .
5810	Count the number of coordinates in the index .
5811	Returns the ids of the nearest neighbors of the specified coordinates .
5812	Get the bounds of the index .
5813	Deletes the index at the given coordinates .
5814	Create an Index from a stream .
5815	Load a byte string from a page .
5816	Delete an object from the tree .
5817	Error checking for Error calls
5818	Load the application .
5819	Initialize Flask - Common extension .
5820	Starts a Gunicorn server
5821	Convert the value to a URL set .
5822	Crop an image on the center point .
5823	Process an image and save it to a file .
5824	Process an image and save it to a file .
5825	Inverts an image and saves it to a file .
5826	If data is not None open it and return it .
5827	Process the placeholder image .
5828	Update the PPOI field .
5829	Update the ppoi field of an instance .
5830	Set the value of the PPOI field .
5831	Set form_class to SizedImageCenterpointClickAdminField
5832	Convert a value to a string .
5833	Autodiscover the versatileimagefield registry .
5834	Unregisters a SizedImage subclass .
5835	Unregister a FilteredImage subclass .
5836	Returns the URL of the image .
5837	Build filters and sizers .
5838	Get the root folder of the filtered image .
5839	Get the root folder of the resized image .
5840	Returns the path to the root folder where the images are filtered .
5841	Delete matching files from storage .
5842	Preprocess image according to image_format .
5843	Preprocess a GIF image .
5844	Preprocess JPEG images .
5845	Retrieve an image from the storage .
5846	Save an image file to disk .
5847	Return the PPOI as a string .
5848	Create a resized image .
5849	Render a ClearableFileInputWithImagePreview widget .
5850	Returns the context for the widget .
5851	Return a copy of base_attrs with extra_attrs .
5852	Get the path to the resized file .
5853	Given a path_to_image and a filename_key return the path to the filtered file .
5854	Validate versatileimagefield_sizekey list .
5855	Get image url from image key .
5856	Get the Rendition Key Set for the given key .
5857	Return a string representation of an instruction .
5858	Format a function body .
5859	Decode bytecode into Instructions .
5860	Decode a module from a memoryview .
5861	Decorator to mark a function as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read the result from the server .
5865	Handle a FastAGI request .
5866	Parse an AGI result line .
5867	Check the status code of the Agi server .
5868	Reset all instances to their default values .
5869	Return a list of all instances .
5870	Get metadata from setup . py .
5871	Get the primary keys of a model .
5872	Deserialize the given value into a related model instance .
5873	Get an existing instance from a query .
5874	Get declared fields .
5875	Deserializes the given data into a model instance .
5876	Split model kwargs into kwargs and association attributes .
5877	Delete orphan snapshots .
5878	Create a snapshot of a database .
5879	List all snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Updates indexes after each epoch for shuffling
5885	Clean text according to textacy .
5886	Apply a function to a list of data .
5887	Returns a function that takes a text string and returns a list of tokens .
5888	Process text .
5889	Process text using parallel processing .
5890	Generate document length statistics .
5891	Returns a pandas DataFrame of token counts .
5892	Map a param type to a list of types .
5893	Parse a list of interfaces into a dictionary of dicts .
5894	Returns the inverse of the model .
5895	Update items with rollback .
5896	Returns a copy of the model .
5897	Return a copy of this node .
5898	Returns True if self is equal to other and False otherwise .
5899	Return an inverted version of an argument .
5900	Clears the state of the signal .
5901	Move forward to the end of the forward list .
5902	Write text to a temporary file .
5903	Get contacts from a list of address books .
5904	Merge args into config .
5905	Load a list of address books .
5906	Prepare search queries .
5907	Create a new contact from a list of address books
5908	Return a comma - separated list of birthday strings .
5909	Returns a list of phone numbers that match the search_terms .
5910	List contacts from a list of vcards .
5911	This function is called by khard to modify a vcard .
5912	Remove a contact from the address book
5913	Run the source command .
5914	Merge a list of vcards .
5915	Copy or move a contact to another address book .
5916	Get the action for the given alias .
5917	Convert a boolean parameter to a boolean value .
5918	Create a new contact .
5919	Create a private object from a file .
5920	Create a contact from a user input .
5921	Create a contact object from an existing contact and a new user input .
5922	Returns a list of the names of the given part .
5923	Add a category to the vcard .
5924	Parse a type value from a list of types .
5925	Convert a list to a string .
5926	Convert a string to a datetime object .
5927	Compare two UID strings .
5928	Search all contacts for a given query .
5929	Search for contacts whose full name matches a regular expression .
5930	Search for contacts with the given query .
5931	Search for addresses in the address book .
5932	Get a dictionary of short UIDs .
5933	Get a short UID from a UID string
5934	Find VCard files .
5935	Load all vcards in the address book .
5936	Get a book with the given name .
5937	Return the available architectures .
5938	Return list of available architectures .
5939	Returns an ArgSpec for the given function .
5940	Dispatch a command .
5941	Prompt the user for input .
5942	Encode the given value to UTF - 8 .
5943	Try to guess the type from the given keyword arguments .
5944	Add commands to a parser .
5945	Decorator to mark a function as named .
5946	Decorator to add an argument to a function .
5947	Prompt user for confirmation .
5948	Replace the current query with the given kwargs .
5949	Like filter .
5950	Get the cached result of the query .
5951	Returns the first result of the query .
5952	Delete the results of the query .
5953	Called when an entity is deleted .
5954	Add a prefix to a Redis index .
5955	Estimate the number of work for a given index .
5956	Search the database for the given filters .
5957	Count the number of items matching the given filters .
5958	Return a connection object for the given object .
5959	Return the full text representation of the given value .
5960	Refreshes the indices of the given model .
5961	Clean up the old index .
5962	Add an object to the session .
5963	Get the value for a given primary key .
5964	Write Lua data to redis .
5965	Save the object to the database .
5966	Delete the record .
5967	Get the values for the given ids .
5968	Register a reduce function for a given type .
5969	Open a semaphore .
5970	Return the number of CPU cores .
5971	Sends a result back to the result queue .
5972	Process a queue of calls .
5973	Add a call item to the queue .
5974	Ensure the executor is running .
5975	Wrap non - picklable objects .
5976	Start the server .
5977	Return a copy of the given file descriptor .
5978	Get a reusable executor .
5979	Wait for all pending jobs to complete .
5980	Get preparation data .
5981	Prepare process data .
5982	Close all open file descriptors .
5983	Terminate a subprocess without psutil .
5984	Terminate a process and all its children .
5985	Get the exitcodes of the processes that have terminated .
5986	Format a list of exitcodes as a string .
5987	Start the semaphore tracker .
5988	Check if the process is still running .
5989	A simple event processor that prints out events .
5990	Run the program .
5991	Interactively interact with Trepan .
5992	Split a string into a list of arguments .
5993	Return a list of tuples of frames and line numbers .
5994	Run a list of hooks on an object .
5995	Forget the current state of the stack .
5996	Get an integer from a string .
5997	Get an integer from the command line .
5998	Process all commands .
5999	Add a source file to the queue .
6000	Returns the next token in the string starting at start_pos .
6001	Prints an error message to the console .
6002	Read a command from the input stream .
6003	Close the connection .
6004	Disassembles a message from a Python code object .
6005	Disassembles code into bytes .
6006	Return a count of the number of frames
6007	Get the name of the call function .
6008	Print count entries of the stack trace
6009	Lookup the subcommand with the given prefix .
6010	Display a short help for a given subcommand .
6011	Add a subcommand to the command list .
6012	Run a subcommand .
6013	Start the debugger .
6014	Show commands in a specific category .
6015	Run Mclifns .
6016	Find the frame that should be used for debugging .
6017	Map thread names to thread ids .
6018	Get an integer from an argument .
6019	Get the value of the onoff flag .
6020	Set the boolean value of the debugger .
6021	Set an integer value .
6022	Show a boolean value .
6023	Show the current value of an integer .
6024	Show the current value of a variable .
6025	Check if the given line is a definition statement .
6026	Check if the given line is a class definition .
6027	Quit the current thread .
6028	Set default background color .
6029	Check if a color is darker or not .
6030	Return the signature of the given frame .
6031	Return a list of all available display strings .
6032	Display a frame .
6033	Return a human - readable string representation of the message .
6034	Read a message from the socket .
6035	Send a debug message to trepan .
6036	Display an undefined subcommand .
6037	Run the debugger .
6038	Pretty print a simple numpy array .
6039	Look up a signal name by its number .
6040	Lookup a signal by name .
6041	Return the name of a canonic signal .
6042	Set the signal handler for a given signal .
6043	Check and adjust all sighandlers .
6044	Print information about a signal .
6045	Handle a signal .
6046	Set the print method for a signal .
6047	Handle a signal .
6048	Convert a file name to a module name .
6049	Search for a file in a list of directories .
6050	Whence a file in a directory or a list of directories .
6051	All python files caller s dir without the path trailing . py
6052	Write a message to the output .
6053	Run the program .
6054	Columnize a list of commands .
6055	Post - mortem event handler .
6056	Close the connection .
6057	Write a message to the socket .
6058	Completes an identifier .
6059	Add a command to the queue .
6060	Add frames to ignore_filter .
6061	Return the path of a canonic file .
6062	Return the filename to use .
6063	Check if the tracer is started .
6064	Check if we should stop here .
6065	Sets to stop on the next event that happens in frame frame .
6066	Print the stack trace of the given function .
6067	This function is called by pyficache .
6068	Check if b . funcname matches the frame .
6069	remove breakpoint bp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable all breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete all breakpoints at the given line .
6074	Open an input file .
6075	Read a line from the input stream .
6076	Prompt the user for confirmation .
6077	r \ s +
6078	r \ d +
6079	Submit a query as a future .
6080	Restores the original login from the session .
6081	Load a CAN_LOGIN_AS module .
6082	Iterate over all documents in a batch .
6083	Main entry point for Luminoso analysis .
6084	Transcode a JSON file to a file - like object .
6085	Open a JSON file or a CSV file .
6086	Given a stream of documents and a date format return a generator of documents .
6087	Convert a date string to a timestamp or float .
6088	Detect the encoding of a file .
6089	Generator that yields JSON lines from a file .
6090	Transcode a file to UTF - 8 .
6091	Open a CSV file in Python 2 .
6092	Read a csv file .
6093	Main entry point for the transcode script .
6094	Connect to a Luminoso server .
6095	Save a token to a json file .
6096	Make a request to the Luminoso API .
6097	Perform a DELETE request .
6098	Wait for a build to complete .
6099	Get the root URL for a given URL .
6100	Save a token to a file .
6101	Send a JSON request to the Luminoso API .
6102	Make a POST request to the API .
6103	Change the path of the resource to the given path .
6104	Get the default account .
6105	Get the documentation for this client .
6106	Wait for a job to finish .
6107	Perform a GET request .
6108	Print a list of lines as CSV .
6109	Read parameters from a JSON file .
6110	Simplify a document .
6111	Create a project with a list of documents .
6112	Upload docs to a project .
6113	Command line interface for Luminoso .
6114	Upload a stream of documents to a project .
6115	Upload a file to a project .
6116	Command line interface for the recalculator .
6117	Create a LuminosoUser instance from user credentials .
6118	Login to the server .
6119	Post the login page .
6120	Get the data for a particular resource .
6121	Fetch the data for each period .
6122	Prepare the view .
6123	Initialize the view .
6124	Handle GET requests .
6125	Called when a message is received from the client .
6126	Update menus .
6127	Return a list of default handlers for this site .
6128	Called when a message is received from the viewer .
6129	Called when the DOM has been modified .
6130	Create the widget element .
6131	Initialize the widget .
6132	Remove this component from its parent .
6133	Add a child component to this component .
6134	Remove a child from this component .
6135	Return a generator over all child widgets .
6136	Set the value of an attribute .
6137	Update the proxy .
6138	Notify the root object of the change .
6139	Returns a list of nodes that match the given query .
6140	Initialize and activate the proxy .
6141	Set the source of the component .
6142	Set the source of the component .
6143	Called when the user changes the mode .
6144	This method is called when a block is changed .
6145	Update the children of this node .
6146	Read a file and return its contents .
6147	Prints an error message to stderr .
6148	Error parsing command line .
6149	Get a product by its name .
6150	Create a new session .
6151	Reset the store .
6152	Returns a list of stores that match the given search term .
6153	Set the delivery system for a given postcode .
6154	Get a menu for a given store .
6155	Add an item to the basket .
6156	Add a pizza to the basket .
6157	Add a side to the basket .
6158	Removes an item from the basket .
6159	Sets the payment method .
6160	Process a payment request .
6161	Perform a GET request .
6162	Perform a POST request .
6163	Calls the given API verb with the given arguments .
6164	Append an item to the menu .
6165	Add an exit item to the end of the list .
6166	Draw the menu .
6167	Process user input .
6168	Select the currently selected item .
6169	Parse old menu data .
6170	Return a DataFrame with the top limit rows .
6171	Return a new DataFrame with the top limit rows grouped by aggregate_by .
6172	Convert a string to a datetime .
6173	Convert datetime to string .
6174	Change the date format of a column in a DataFrame .
6175	Cast a column to a given type .
6176	Compute the rank of each column in a DataFrame .
6177	Perform waterfall on a dataframe .
6178	Perform a basic math operation on two columns .
6179	Round the values of a column to the given number of decimals .
6180	Adjust the absolute values of a column .
6181	Create a pivot table from a DataFrame .
6182	Pivot a variable by a group .
6183	Group the columns of a DataFrame by group_cols .
6184	Compute the cumulative sum of a DataFrame .
6185	Add missing rows to a dataframe .
6186	Decorator to catch exceptions raised in a function .
6187	Decorate a function to log a message .
6188	Decorator to log the execution time of a function .
6189	Decorate a function to log shapes .
6190	Rename values and columns in a DataFrame .
6191	Compute the cumulative sum of the given columns .
6192	Combine columns based on aggregation function .
6193	Get the value of a parameter from a function call .
6194	Remove up to limit entries from a cachedir .
6195	Roll up a DataFrame to a list of levels .
6196	Return a DataFrame with the values of the maximum value in the specified groups .
6197	Find the indices of the columns that have the minimum value in the given groups .
6198	Fill missing values in a column .
6199	Add an offset to a date object .
6200	Add a number of months to a date object .
6201	Add a number of years to a date object .
6202	Parse a date string into a date object .
6203	Filter a DataFrame by a date .
6204	Calculate the percentage of a column in a DataFrame .
6205	Adapted from theano . core .
6206	Compute the learning updates for the model .
6207	Returns a list of training parameters .
6208	Optimizes the network .
6209	Compute the first glimpse sensor .
6210	Prepare the encoder decoder and classifier .
6211	Compute the final cost of the given tensor .
6212	Apply a function to each element of the dataset .
6213	Vectorize the target set .
6214	Report the current state of the model .
6215	Train the model .
6216	Sample from a list of samples .
6217	Compute alignments based on previous state .
6218	Compute the context vector .
6219	Concatenate a list of variables .
6220	Pads the dataset to the specified length .
6221	Compute the RMS of the parameters .
6222	Report time in minutes .
6223	Run the model .
6224	Run the monitor .
6225	Build loop variables .
6226	Scan the loop .
6227	Momentum core .
6228	If the training flag is True then the branch is then the branch is else .
6229	Skip a given number of batches .
6230	Load parameters from a file .
6231	Train the model .
6232	Run the training step .
6233	Run the validation step .
6234	Report a score map .
6235	Get the current data set .
6236	Apply a function to this NeuralVariable .
6237	Report the used parameters .
6238	Returns a variable of the given type .
6239	Create a list of neural variables from a dataset .
6240	Helper function for theano . shared .
6241	Stack layers and add them to the encoding_layes list .
6242	Stack a list of decoding layers .
6243	Encode the input tensor .
6244	Decode the input data .
6245	Create a 2D Gaussian .
6246	Register a new layer .
6247	Record the mean of the outputs of each layer .
6248	Returns a list of all parameters .
6249	Set up the input variables .
6250	Compute the output of the function .
6251	Save all parameters to a file .
6252	Load parameters from a file .
6253	Report the network state .
6254	Registers a list of parameters .
6255	Register a list of updates .
6256	Register training updates .
6257	Register a set of monitors .
6258	Calculate the L2 norm of a list of tensors .
6259	Dump one element to a pickle file object .
6260	Load elements from a file - like object .
6261	Load parameters from a file .
6262	Create the request elements for the given request type .
6263	Decode user state .
6264	Parse X - Credentials response .
6265	Remove client_id and client_secret from request elements .
6266	Login to a provider .
6267	Takes a dict and returns a normalized copy of it .
6268	Convert a list of items into a dictionary .
6269	Parse a JSON - encoded query string into a dictionary .
6270	Resolve a provider class .
6271	Create a cookie string .
6272	Save the session data to the adapter .
6273	Get data from the cookie .
6274	Get the data for this request .
6275	Return the signature of the given parts .
6276	Return a serialized version of the given value .
6277	Check if the token is valid .
6278	Returns True if the expiration time is greater than the given number of seconds .
6279	Serialize the credentials into a string .
6280	Returns True if content is a binary string .
6281	Return the content of the response .
6282	Create the request elements for the given request type .
6283	Access user info .
6284	Decorator for FlaskAuthomatic .
6285	Authenticates the user .
6286	Return a session key .
6287	Set the value of a session key .
6288	Generate a random CSRF token .
6289	Log a message to the authomatic logger .
6290	Check if the HTTP status is in the given category .
6291	Split url into base and query string .
6292	Decorator to enable cross - origin support .
6293	Set CORS headers .
6294	Return a dictionary of app - specific options .
6295	Return a flexible string representation of an object .
6296	Ensure that an instance is iterable .
6297	Check if two numbers are close .
6298	Decorator to mark a function as deprecated .
6299	Deserialize a pickle string into a AudioSegment object .
6300	Create an AudioSegment from a file .
6301	Create an AudioSegment from a NumPy array .
6302	Execute a Sox command .
6303	Silently filter the WAV file .
6304	Calculate the Fourier Transform .
6305	Generate frames from the raw data .
6306	Return a new AudioSegment that is normalized by a given sampling rate .
6307	Return a new AudioSegment with the contents of this one and the contents of the others .
6308	Resample the audio file .
6309	Serialize the object to a pickle string .
6310	Create a spectrogram .
6311	Choose an offset front id from a list of candidate_offset_front_ids .
6312	Get the offset front id after the given onset sample index .
6313	Get the offset front id after the given onset front .
6314	Given a onset_front_id and a dictionary of offset_fronts and a dictionary of onsets and offsets return the first matching offset_front_id .
6315	Get consecutive and overlapping fronts .
6316	Update a segmentation mask based on onset and offset fronts .
6317	Get the front id from the index .
6318	Return a generator that yields all front ids that are onset fronts .
6319	Get the offsets corresponding to the given onset fronts and onsets .
6320	Remove overlapping segments from fronts .
6321	Remove fronts that are too small .
6322	Break poorly matched fronts .
6323	Merge adjacent segments .
6324	Separate a mask into multiple masks .
6325	Downsample one or the other .
6326	Asa task .
6327	Bandpass filter .
6328	Lowpass filter .
6329	Convert a list of data to a tf . Input matrix .
6330	Expand and standardize a dataset .
6331	Return True if two lists are equal ignoring order .
6332	Given a list of audit files and a measurer return a dictionary of feature scores grouped by their similarity .
6333	Load audit confusion matrices from a JSON file .
6334	Convert a list of data to a tf . Input matrix and a list of outcomes .
6335	Update the index URL from the config files .
6336	Autodetect requirements files .
6337	Resolve all streams .
6338	Resolve the given property to the given value .
6339	Resolve a predicate to a list of streams .
6340	Handle an error code .
6341	Push a sample to the stream .
6342	Push a chunk of data to the stream .
6343	Get information about the stream .
6344	Open a new LSL stream .
6345	Perform time correction on the LSL device .
6346	Create a child element .
6347	Returns the next sibling of this element .
6348	Returns the previous sibling of this element .
6349	Set the name of the device .
6350	Set the value of the field .
6351	Append a child element to this element .
6352	Prepend a child element to the end of this element .
6353	Append a copy of elem to this element .
6354	Prepend a copy of elem to this element .
6355	Remove a child from this element .
6356	Returns a list of StreamInfo objects .
6357	Returns a list of pairs of words .
6358	Autocomplete edge n - grams .
6359	Compute the n - grams of the given token .
6360	Iterate over a pipe .
6361	Apply a function to an iterable of tasks and return a new iterator .
6362	Make a fuzzy search for a word .
6363	Fuzzy search .
6364	Fuzzy index .
6365	Extract manytomany relations and add them to the bucket .
6366	Prints help for all available commands .
6367	Show information about redis databases .
6368	Get the value of a DB key .
6369	Calculate the geohash for a given latitude and longitude .
6370	Get a list of housenumbers .
6371	Index a document .
6372	Print the best score for the given word .
6373	Print the distance between two strings
6374	Send a request to the server .
6375	Map a list of requests into a list of responses .
6376	Get bits from an array of words .
6377	Convert a reinterptet HArray to a bits object .
6378	Convert a slice to a Slice instance .
6379	Find all files in a directory that match a pattern .
6380	Returns True if all elements in iterable are equal to sigOrVal .
6381	Static for each statement .
6382	Logical shift left
6383	Convert a log2 number to an integer .
6384	Returns True if num is a power of 2 .
6385	c - like case of switch statement
6386	Add a default statement to this Stm .
6387	Register an Interface or Unit as a VCD variable .
6388	This method is called before the simulation is started .
6389	Log a change to the VCD .
6390	Returns the HW code for the given method .
6391	Returns a list of agents that can be added to the unit .
6392	Get the clk associated with this unit .
6393	Return distinct elements from iterable by function .
6394	Iterate over items grouped by a function .
6395	Flatten an iterable of iterables .
6396	Merge nested IfContainer into self . elIfs
6397	Remove all unconnected signals from the network .
6398	Check if the statement is too simple .
6399	Try to merge two HWProcesses .
6400	Reduce processes by rank .
6401	Called when a write request is received .
6402	Serialize a unit or class to a RTL file .
6403	Given a list of HdlStatements return the name of the output of each HdlStatement .
6404	Return a list of statements separated by the cut - off drivers of the given signal .
6405	Create a new signal .
6406	Create a synthesized HW object .
6407	Get the maximum ID for a given STM .
6408	Returns the maximum id of each statement in the proc .
6409	Write data to the interface .
6410	Change the direction of the interface .
6411	Loads the declarations for this interface .
6412	Return a list of signal objects for this interface .
6413	Returns the physical name of the entity .
6414	Returns the bit length of this object .
6415	Returns the sensitivity of a given operation .
6416	Evaluate the given operator .
6417	Convert the given signature or value to the given type .
6418	Reinterprets a signature or value into a hstruct .
6419	Returns the number of full words between start and end .
6420	Group words by word index .
6421	Prints an interface to a file .
6422	Generate frames from TransTmpl .
6423	Iterate over all words .
6424	Pack the data into a list of values .
6425	Clean up the signal meta data .
6426	Given a list of HdlStatements and a list of outputs discover the enclosure for each statement .
6427	Discovers the sensitivity sequence of signals .
6428	Get the RTL context for this statement .
6429	Update the state of this HDLStatement .
6430	Merge this statement with another statement .
6431	Returns True if stmsA and stmsB are mergable .
6432	Merge multiple HdlStatements into one HdlStatement .
6433	Merge two lists of HdlStatements .
6434	Try to reduce a list of HdlStatements .
6435	Called when the parent event is dependent .
6436	Set the parent HdlStatement .
6437	Register a list of HdlStatements into the target list .
6438	Remove this statement from the context .
6439	Create a register with the given name and dtype .
6440	Create a signature for the given type .
6441	Clean the entity as a subunit .
6442	Recursively walks the fields of a HStruct or HArray .
6443	Unpack a HStruct from a list of bytes .
6444	Return a new Operator that is signed or unsigned .
6445	Add a sensitivity process to a list of sensitivity processes .
6446	Evaluate the conditions of a set of conditions .
6447	Connect a port to a subsim unit .
6448	Create an updater function .
6449	Create an array updater function .
6450	Convert a NumPy value to a Bits object .
6451	Register the HWProcess .
6452	Evaluate a parameter .
6453	Set the value of the parameter .
6454	Create a HStruct from an interface map .
6455	Remove all memories .
6456	Get the index cascade .
6457	Create a new value from a Python value .
6458	Cast sigOrVal to toType .
6459	Reinterprets the given signature or value to the given type .
6460	Iterate over all parameters of an interface .
6461	Return a list of connections from srcPacked to dstInterface .
6462	Packs an interface into a signature .
6463	Convert a ROM into a HWProcess .
6464	Convert this IntfLvl into a RTL .
6465	Register an interface .
6466	Try to reduce the signal and return the value .
6467	Try to reduce the value of sig to the value of val .
6468	Returns a new name scope .
6469	Returns True if obj is a declaration or a definition .
6470	Convert a HdlType to a HdlType object .
6471	Returns a string representation of a IfContainer .
6472	Returns a tuple with the condition c and whether the condition is negated .
6473	Return a SimBitsT instance .
6474	Get the name of a constant .
6475	Cuts off drivers of the given signal .
6476	Load data from an array of HdlTypes .
6477	Load a TransTmpl from a HStruct .
6478	Load data from a HdlType .
6479	Returns the number of items in the HArray .
6480	Walks the HStruct and HArray up to the given offset .
6481	Fix the sign of a signed value .
6482	Merge this IfContainer with another IfContainer .
6483	Get the indent string for a given number of spaces .
6484	Raises an exception if the object already has the specified property .
6485	Register a parameter with this scope .
6486	Update the params from another prop declr collector .
6487	Register a new unit .
6488	Register an interface .
6489	Register an array .
6490	Return a single driver .
6491	Performs a static evaluation of the expression .
6492	Create a new RtlSignal from a list of operands .
6493	Return a new context with the given indent .
6494	Try to connect to an interface .
6495	Propagate a clk to all units .
6496	Propagate clk and rst_n to all units .
6497	Propagate clk and rst to all units .
6498	Propagate RSTN to all units .
6499	Propagate the RST to all units .
6500	Iterate over the bits of a signal or value .
6501	Helper function for serializeExcludeEval .
6502	Helper function for serializeOnceEval .
6503	Helper function for serializeParamsUniq .
6504	Get the full name of the interface .
6505	Make association for each object in the collection .
6506	Prepare a simulator for a given unit .
6507	Convert a unit to a SimModel .
6508	Re - connect unit signals to a model class .
6509	Convenience function for simUnitVcd .
6510	Initialize onTWriteCallback .
6511	Connect this port to a signal .
6512	Registers an intern signal for this port .
6513	Connect this endpoint to an intern signal .
6514	Returns the signature of the instruction .
6515	Returns True if the ev is dependent on the given process .
6516	Add a process to the queue .
6517	Add a proc to the list of procs to be run .
6518	Schedule a comb update done event .
6519	Schedule the apply values .
6520	Create a conflict resolve strategy for a set of values .
6521	Run the comb processes .
6522	Run sequence processes .
6523	Apply values to the sequence .
6524	Read the value of the given signature .
6525	Writes the given value to the given signal .
6526	Add a process to the queue .
6527	Simulates a synthesised unit .
6528	Create a function that takes a list of operands and returns the result of the function .
6529	Convert a list of ternary operators to an IfContainer .
6530	Process a HW state machine .
6531	Calculate the Hamming distance between two hashes .
6532	Calculate the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup Vizio platform .
6535	Update the power state .
6536	Mute the volume .
6537	Adjusts the volume level .
6538	Decrease the volume level .
6539	Sets the volume level .
6540	Reset the board to its initial state .
6541	Return the piece at the given square .
6542	Remove a piece from the board .
6543	Set a piece at a given square .
6544	Check if move is suicide or check by dropping pawn .
6545	Returns True if the player was suicide .
6546	Returns True if the game is over .
6547	Returns True if the move is a checkmate .
6548	Check if the transposition is a fourfold repetition .
6549	Pop a move from the stack .
6550	Returns a list of string representations of the spherical harmonics .
6551	Push a usi to the stack .
6552	Returns the zobrist hash of the board .
6553	Return the symbol of the piece .
6554	Create a PIECE color from a symbol .
6555	Returns the USI representation of the piece .
6556	Create a Piece object from a USI string .
6557	Parse a list of commits from a string .
6558	Parse a commit into a dict .
6559	Load config from command line arguments .
6560	Execute a command from the command line .
6561	Adds the config file to the argument parser .
6562	Load config from a file .
6563	Generate a YAML representation of the current configuration .
6564	Generates a markdown representation of the class .
6565	Cast the given value to the correct type .
6566	Return a list of dates between two dates .
6567	Parse a date from a string .
6568	Load currency file .
6569	Set missing rates to None .
6570	Compute missing rates for a given currency .
6571	Get the rate for the given currency and date .
6572	Convert amount to new_currency .
6573	Group the elements of an iterable by n elements .
6574	Animate a list of frames .
6575	Read a record from the file .
6576	Write a record to the file .
6577	Map words from start to end .
6578	Read a DAF file s comment area .
6579	Add an array to the file .
6580	Close the DAF file .
6581	Computes the position from the given tdb .
6582	Close the DAF file .
6583	Load the PCK data .
6584	Compute the segment at the given time - series .
6585	Visitor for Call AST node .
6586	Check if the binary operation is within the logging context .
6587	Visitor for Dict AST node .
6588	Checks if the node is a joined string .
6589	Check if the keyword is in the whitelist .
6590	Visit an except handler node .
6591	Detect logging level .
6592	Get the name of the except handler .
6593	Get the id attribute of the given value .
6594	Check if the given node is a bare exception .
6595	Check for exc_info keywords .
6596	Delete a file if it exists .
6597	Returns a class that can be used as a db file widget .
6598	Returns the rendered PDF .
6599	If the response_class is a subclass of PDFTemplateResponse then it will be returned .
6600	Return a string that can be used as an HTTP quote .
6601	Configure MONGODB options .
6602	Convert a string to an underscored string .
6603	Auto - index the collection .
6604	Parse a file and return a list of PriceModels .
6605	Load lines from a file .
6606	Parse a line of text into a PriceModel object .
6607	Translate a symbol .
6608	Load all symbol maps .
6609	Get the current session .
6610	Add a price to the database
6611	Import prices from CSV file .
6612	Get the latest price for the given symbol .
6613	List prices for a given date and currency .
6614	Download prices from the database .
6615	Remove old price entries from the database .
6616	Get the default database session .
6617	Add a symbol map to the database .
6618	List all symbol maps .
6619	Get symbol map by id .
6620	Read lines from a CSV file .
6621	Map an entity to a PriceModel .
6622	Create a Price object from a PriceModel .
6623	Read a configuration file .
6624	Returns the path to the config file .
6625	Create user config file .
6626	Get the path to the config file .
6627	Get the contents of the config file .
6628	Set the value of an option .
6629	Get the value of an option .
6630	Save the configuration to a file .
6631	Parse a symbol into its namespace and mnemonic .
6632	Add a price to the list .
6633	Add a price entity to the database .
6634	Download a price .
6635	Get the current session .
6636	Get all prices for a given date and currency .
6637	Get a list of prices on a given date .
6638	Prune all security symbols .
6639	Delete all prices for the given symbol .
6640	Download a price from finance .
6641	Get securities for a given currency agent symbol and namespace .
6642	Return a partial state .
6643	Update the child calls .
6644	Returns an iterator over the descendents of this node .
6645	Decorator for multi - decisions .
6646	Check if the student part has the same length as the solution part .
6647	Check whether the AST is equal to the AST .
6648	Checks if the student code contains the given text .
6649	Check if a package has an import .
6650	Test whether the student output contains text .
6651	Check if there is a printout in the solution .
6652	Report a warning if there is no error .
6653	Test whether the user has chosen an option .
6654	Check a function call .
6655	Returns a tuple of the result and the result of the process .
6656	Override the state with a solution AST .
6657	Check if an instance is in the solution process .
6658	Return a list of all defined items .
6659	Convert this state to a child state .
6660	Get the value of an attribute from a tree .
6661	Test if there is a context loop .
6662	Check that the state has a context with the given name .
6663	Check that a student part exists and has a solution part .
6664	Check that a part is defined at the given index .
6665	Check that the arguments passed to the function are valid .
6666	Check that a call is valid .
6667	Returns the true anomaly .
6668	Initialize the ldap3 login manager .
6669	Initialize LDAP configuration .
6670	Add a new LDAP server to the pool .
6671	Remove a ldap3 connection from the stack .
6672	Destroy all ldap3_manager connections .
6673	Authenticate with the LDAP server .
6674	Perform a direct bind to the LDAP server .
6675	Perform an LDAP Search using the given username and password .
6676	Get a list of groups for a specific user .
6677	Get user info .
6678	Get user info for a given username .
6679	Get an object from the LDAP server .
6680	Create a connection to the LDAP server .
6681	Create a connection to the server .
6682	Create a connection to the LDAP server .
6683	Destroy a connection .
6684	Search for containers .
6685	Search for labels .
6686	Search for documents .
6687	Search for all artifacts in a collection .
6688	Send a message to the client .
6689	Announces the given command .
6690	Update the secrets .
6691	Update the headers of the response .
6692	Check if the client has secrets .
6693	Download a file from a URL .
6694	Stream a URL to a file .
6695	Update the Authorization header with the current token .
6696	Get or create a folder .
6697	Read the response content into a dict .
6698	Get a bucket .
6699	Update the client secrets .
6700	Initialize the client .
6701	Load GLOBUS authentication and transfer secrets .
6702	List all logs .
6703	List all logs in the bucket .
6704	Create a new endpoint folder .
6705	Initialize the transfer client .
6706	Search for all containers .
6707	Show the status of the active client .
6708	Add a client secret to the registry .
6709	Remove a client secret from the registry .
6710	Activate a client secret .
6711	Delete a client secret .
6712	Update the base for the image .
6713	Create a basic auth header .
6714	Generate a signature for a given payload and secret .
6715	Generate a SREGISTRY - HMAC - SHA256 header .
6716	Make a DELETE request to a URL .
6717	Send a HEAD request to a URL .
6718	Returns a list of results from a GET request .
6719	Check if SSL is enabled .
6720	Remove an image from the registry .
6721	Return a dictionary of version information .
6722	Returns a list of install requirements .
6723	Get Singularity version .
6724	Check if the given software is installed .
6725	Get the path to the install directory .
6726	Returns the path to the thumbnail file .
6727	Run a command and return the output .
6728	Get metadata from image file .
6729	Update the secrets .
6730	Print the response to a file .
6731	Kills all registered commands .
6732	List logs for a container .
6733	Get a list of all collections
6734	Update the secrets .
6735	Update self . _secrets .
6736	Get Singularity client .
6737	This is the main entry point for IPython
6738	Get all the manifests for a given repo .
6739	Get the manifest for a repository .
6740	Returns a path to a temporary directory that can be used to download files .
6741	Extract environment variables from config file .
6742	Update the base URL .
6743	Update the private token headers .
6744	Get the metadata for the registry .
6745	Get client secret settings .
6746	Check if a setting exists and if not update it .
6747	Update a client secret setting .
6748	Generate authorization header .
6749	List available builders .
6750	Load a list of templates by name .
6751	Get the IP address of an instance .
6752	Create a new instance .
6753	List all containers in the bucket .
6754	List all containers in the bucket .
6755	Command line entry point .
6756	The main entry point for sregistry .
6757	Initialize the database .
6758	Get the build template .
6759	Search for endpoints .
6760	List all endpoints .
6761	List all files in an endpoint .
6762	Share an image .
6763	Read client secrets from a JSON file .
6764	Get the storage and compute services .
6765	Delete an object from a bucket .
6766	Delete a file or directory .
6767	Delete an instance .
6768	Return a dictionary of all sub - parsers for the given parser .
6769	Generate a random string .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a tar archive .
6773	Get the hash of a file .
6774	Read the contents of a file .
6775	Read a JSON file .
6776	Clean up a list of files .
6777	Push an image to S3 .
6778	Get or create a collection .
6779	Get a collection by name .
6780	Get a container by name collection_id
6781	List all containers .
6782	Inspect a container .
6783	Rename an image .
6784	Move an image to a new location .
6785	Remove an image from a container
6786	Add an image to the registry .
6787	Push an image to the registry .
6788	Parse a header from a recipe .
6789	Find a recipe that matches the given pattern .
6790	Create a build package from a list of package files .
6791	Run a build .
6792	Update the metadata for a given blob .
6793	Format a container name .
6794	Check if the user wants to use color .
6795	Return True if the logging level is an error .
6796	Write a message to a stream .
6797	Print a table of rows .
6798	Push an image to a remote endpoint .
6799	Get a template by name .
6800	Get the manifest for a given image .
6801	Get the build template .
6802	Update the client secrets .
6803	Return a string representation of a class .
6804	Context manager for S3 errors .
6805	Create a new instance of the proxy class .
6806	Returns the gravatar url for the given user or email address .
6807	Get a gravatar URL for the given email .
6808	Check if the user has a gravatar .
6809	Returns the URL for a gravatar profile .
6810	Generator for chimera blocks .
6811	Create a chimera block - quotient graph .
6812	Enumerate resonance smiles .
6813	Return a list of ResonanceMol objects .
6814	Normalize a molecule .
6815	Apply a transform to a molecule .
6816	Given a molecule return a list of tautomers .
6817	Validate a smiles file .
6818	Remove covalent bonds from a molecule .
6819	Standardize smiles .
6820	Enumerate tautomers from smiles .
6821	Canonicalizes a tautomer smiles .
6822	Standardize a molecule .
6823	Return the tautomer parent of a molecule .
6824	Return the fragment of the parent molecule .
6825	Remove stereochemistry from a molecule .
6826	Set the isotope of the parent molecule to 0 .
6827	Uncharge the parent molecule .
6828	Returns the super - parent molecule .
6829	Command line interface for Molvs .
6830	Remove fragments from a molecule .
6831	Choose the largest fragment for the given molecule .
6832	Integrate an IVP .
6833	Get stats from GitHub .
6834	Get the number of mems of the organization .
6835	Get the teams of the organization .
6836	Get all repos .
6837	Get the number of contributors in a repo .
6838	Get the number of pull requests in a repo .
6839	Get all issues for a given repo .
6840	Get the readme for a repo .
6841	Get the license path for the given repo .
6842	Get the number of commits in a repo .
6843	Write a JSON file for the given organization .
6844	Write the totals to a file .
6845	Write the languages to a file .
6846	Check if directory exists .
6847	Remove a date from a CSV file .
6848	Returns a list of all organizations in the Government Github repository .
6849	Create a GitHub Enterprise session .
6850	Check the rate limit for requests .
6851	Connect to GitHub .
6852	Query for repositories .
6853	Get an organization .
6854	Write stargazers to a file .
6855	Create a project from a gitlab repository .
6856	Create a project from a DOE CODE record .
6857	Return a license object .
6858	Get the traffic for all repos .
6859	Get all releases for a given repository .
6860	Get a list of referrers .
6861	Get data for a given type .
6862	Write json file for each repo in dict_to_write
6863	Writes the data to a file .
6864	Check for data redundancy .
6865	Write data to a file .
6866	Write referrers to a file .
6867	Process a DOE CODE json file .
6868	Fetch DOE CODE JSON from DOE CODE API
6869	Process a JSON file or a URL .
6870	Login to GitHub .
6871	Get members email addresses .
6872	Write the logins to a file .
6873	Connect to a stashy server .
6874	Connect to a gitlab server .
6875	Query a list of repos .
6876	Clones a git repository and returns the SLOC .
6877	Compute the number of labor hours for a given sloc .
6878	Remove null values from a dictionary .
6879	Read a GQL query file .
6880	Query GitHub from a GQL file .
6881	Submit a git query to the GitHub API .
6882	Wait for a given UTC Timestamp to be reset .
6883	Countdown a number of seconds .
6884	Load data from a JSON file .
6885	Save the data to a file .
6886	Create a TFS connection .
6887	Create a TFS project analysis client .
6888	Create a TFS core client .
6889	Create a TFS Git client .
6890	Create a TFS Git Client .
6891	Get a list of Git repositories for a given collection .
6892	Get a list of Tfvc Branches for a given collection .
6893	Get the number of commits for the current year .
6894	Calculate the total number of commits .
6895	Write the last year commits to a CSV file .
6896	Configure a list of backends .
6897	Returns a MetricsInterface object for the given thing .
6898	Send a timing event to all registered metrics backends .
6899	Context manager for timing stats .
6900	Decorate a function with a timer .
6901	Generates a tag from a key - value pair .
6902	Log a timing event .
6903	Log a histogram .
6904	Rollup the stats to the leader .
6905	Create a case for ordering enum members .
6906	Convert a DB value to an enum value .
6907	Convert a value to an enum value .
6908	Returns the name of the given value .
6909	Resolve a path to a set of objects .
6910	Given a list of usls project them into a dictionary .
6911	Returns the mean value of the histogram .
6912	Mark the number of samples .
6913	Calculate the mean rate .
6914	Mark the value as derived .
6915	Send a metric to the client .
6916	Serialize a metric to a list of strings .
6917	Format a metric string .
6918	Add a metric to the buffer and send it .
6919	Get the value of an option from the config file .
6920	Make sure the data is UTF - 8 encoded .
6921	Get or set the value of an option .
6922	Get a mapping from ledger code to guid .
6923	Get a list of available divisions .
6924	Map exact invoice numbers to foreign invoice numbers .
6925	Solve a sudoku grid .
6926	Create a view with the given injector .
6927	Create a form view .
6928	Create a method view .
6929	Create an API view .
6930	Create a generic API view .
6931	Create a model view set .
6932	Create a stream from a Unix file descriptor .
6933	Read data from the file descriptor .
6934	Called when the connection is closed .
6935	Call the protocol s connection_lost method .
6936	Schedule a watch for a path .
6937	Remove a watch from the inotify .
6938	Add a watch to the inotify .
6939	Setup the inotify server .
6940	Get an event from the stream .
6941	Trigger a TOUCH event .
6942	Update the interval .
6943	Update the interval of the timer .
6944	Close all connections .
6945	Returns True if the connection is starved .
6946	Connect to nsqd .
6947	Query the lookupd endpoint .
6948	Set the maximum number of in - flight connections .
6949	Log a message giving up .
6950	Add a callback to listen for events .
6951	Remove a callback from a listener .
6952	Trigger an event .
6953	Publish a message to a topic .
6954	Set feature transform mode .
6955	Calculate the prediction .
6956	Calculate the theta of a vector s .
6957	Parse the log file .
6958	Remove temporary fastq files .
6959	Merge default adapters into a single fasta file .
6960	Run trimmomatic .
6961	Reads a depth file and returns a dict of dictionary coverage .
6962	Main function for plasmid - length plotting .
6963	Set the template path .
6964	Set the main channel names .
6965	Get user channel info .
6966	Render a Jinja2 template .
6967	Returns a string representation of the template .
6968	Set the channels for the lane .
6969	Update main_forks .
6970	Set the secondary channel for the given source .
6971	Update the attributes of the component .
6972	Set the compiler channels .
6973	Set the raw inputs .
6974	Set secondary inputs .
6975	Add extra inputs to the context .
6976	Parse coverage from header string .
6977	Parse an assembly file .
6978	Get the content of a GC sequence .
6979	Filter contigs based on a list of comparisons .
6980	Returns the length of the assembly .
6981	Write the assembly to a file .
6982	Write the assembly report to a file .
6983	Removes all inner forks from text .
6984	Check that all of the forks in pipeline_string are valid .
6985	Perform insanity checks on a pipeline string .
6986	Parse a pipeline string .
6987	Given a fork process and a list of pipelines find the first lane that matches the fork signature .
6988	Parse lanes from a raw string .
6989	Establish a linear connection with a list of processes
6990	Create a fork connection between two processes .
6991	Add unique identifiers to a pipeline string .
6992	Remove unique identifiers from pipeline links .
6993	Check that the required files are present .
6994	Convert a header string to a dictionary .
6995	Convert a string to a number of seconds .
6996	Convert a string to a size coverter .
6997	Get pipeline processes from the log file .
6998	Clear the state of the inspect .
6999	Update barrier status .
7000	Retrieve the contents of a log file .
7001	Assess resource warnings .
7002	Update process stats .
7003	Parse the log file .
7004	Update the inspector .
7005	Display the overview of the next flow .
7006	Move the cursor up or down .
7007	Adjust padding to the right of the screen .
7008	Get the last n lines from the log file .
7009	Returns a dict of static information about the pipeline .
7010	Read the . treeDag . json file and return a dict .
7011	Get the hash of the pipeline .
7012	Get nextflow command path from log file .
7013	Create a FASTA file from an assembly file .
7014	Run the pipeline status routine .
7015	Brew an innuendo pipeline .
7016	Find a brew recipe by its name .
7017	List all recipes .
7018	Validate that a pipeline string is valid .
7019	Build the upstream pipeline for a task .
7020	Builds the downstream pipeline for the given task .
7021	Define a pipeline string from a string of tasks .
7022	Run the auto - pipeline for the given tasks .
7023	Return a string representation of a component .
7024	Write a report to a JSON file .
7025	Main function for trimmomatic_report .
7026	Fix contig names .
7027	Remove temporary fastq files .
7028	Parse a list of files .
7029	Parse the log file .
7030	Iterate over a list of filters .
7031	Get contig id from contig string .
7032	Returns a dictionary of plot data .
7033	Write plot and table data to . report . json
7034	Main function for the assembly report .
7035	Parse the assembly file .
7036	Get statistics about the contigs .
7037	Returns a list of labels for each contig in the window .
7038	Calculate the garbage collection of a given length .
7039	Get a sliding window of contigs .
7040	Run Skesa .
7041	Write a JSON report to a JSON file .
7042	Returns the index of the first non - empty element in the list .
7043	This function is used to trim the range of nucleotides .
7044	Get the minimum and maximum values for each sample from p1 to p2 .
7045	Get summary information from a file .
7046	Check the health of a summary file .
7047	Parse the bowtie log .
7048	Parse a process name from a string .
7049	Add a dependency process to the pipeline .
7050	Search the tree for a lane that matches the given template .
7051	Build the header .
7052	Build the footer .
7053	Set channels for all processes .
7054	Set the init process .
7055	Set secondary channels .
7056	Set the status channels for each process .
7057	Return a string representation of a dictionary of resources .
7058	Return a string representation of a container .
7059	Returns a string representation of the parameters of all processes .
7060	Returns a string with merged parameters .
7061	Returns a string representation of the manifest .
7062	Set the configurations for all processes .
7063	Write a DAG to a file .
7064	Render the pipeline .
7065	Write the config files to the project root directory .
7066	Write params to stdout .
7067	Export directives to a JSON file .
7068	Return a dictionary of docker tags .
7069	Build the configuration file .
7070	Set the kmers option .
7071	Run metaSPAdes .
7072	Get the report id from the report file .
7073	Update the size stamp of the trace file .
7074	Update the size of the log file .
7075	Send a live report to the server .
7076	Initialize live reports .
7077	Close the connection to the server .
7078	Convert a FASTA file to a FASTA file .
7079	Run fastqc .
7080	Send Mash Dist to Mash output .
7081	This function is the main entry point for the Mash algorithm .
7082	Build the versions file .
7083	Generate a JSON file from a Mash output file .
7084	Print a message with a color label .
7085	Parse the procs dictionary .
7086	Collect processes from the process map .
7087	Guess the compression type of a file .
7088	Get the range of qualitudes from a string .
7089	Return a list of valid encodings in a given range .
7090	Parse a coverage table .
7091	Filter the assembly file to only contain contigs with a minimum coverage .
7092	Filter a BAM file using samtools view .
7093	Evaluate minimum assembly coverage .
7094	Get the size of the assembly file .
7095	Main entry point for assembly mapping .
7096	Convert CamelCase to CamelCase .
7097	Collect a map of process names to component classes .
7098	Main function for processing a newick file .
7099	Quickhull algorithm .
7100	Map W to data .
7101	Median filter .
7102	Compute the Krnl - Gaussian .
7103	Compute the SMM of X .
7104	Compute the N - dimensional covariance matrix from X and G .
7105	Gaussian filter .
7106	Compute the distance between two sets of points .
7107	Returns a circular shift of X .
7108	Compute the embedded space .
7109	Plot formatting .
7110	Plot the boundaries of the Estimator .
7111	Plot a set of labels .
7112	Plot one track .
7113	Plot a tree of segments .
7114	Returns a list of feature segments .
7115	Convert a list of feat segments to a 2D Fourier Transform .
7116	Compute the similarity of a feature set .
7117	Fit the model to X and Y .
7118	Perform partial fit on X and Y .
7119	Read references from a JAM file .
7120	Find an estimation with the given parameters .
7121	Save estimations to a file .
7122	Returns a list of all boundary algorithms .
7123	Get the configuration for a given feature .
7124	Returns a list of FileStruct objects for each audio file in the given path .
7125	Read hier references from a JAMS file .
7126	Get the duration of a feature file .
7127	Write a mirex file .
7128	Get the path to the dataset file .
7129	Given a list of beat times and a song return a list of beats and a list of labels .
7130	Estimate the number of beats .
7131	Read beats from a JAMS file .
7132	Compute beat sync features .
7133	Read features from a JSON file .
7134	Write features to a JSON file .
7135	Return a list of parameter names .
7136	Compute framesync times .
7137	Returns a list of frame times for this feature .
7138	Get the features from the audio file .
7139	Select a feature from the registry .
7140	Preprocessing function for MSAF .
7141	Perform post - processing .
7142	Command line interface for speficied algorithm .
7143	Print the mean of the results .
7144	Compute the gt results for a given estimator file .
7145	Compute information gain .
7146	Process a track file .
7147	Get the name of the results file .
7148	Process the input file and return the results .
7149	Add a config variable to the config object .
7150	Compute all features for a given audio file .
7151	Process a dataset file .
7152	Calculate the cost of a Gaussian distribution .
7153	Log - normalization function .
7154	Normalize F to be between min and max .
7155	Normalize X according to norm_type .
7156	Returns a list of time frames .
7157	Remove empty segments from a list of times .
7158	Sonify clicks .
7159	Synchronize labels from old_bound_idxs to new_labels
7160	Process a segmentation level .
7161	Align the end hierarchies of two hierarchies .
7162	Compute distance between nodes .
7163	Estimate the K - Kknee .
7164	Get clustered data .
7165	Run the K - means algorithm .
7166	Compute the BIC .
7167	Returns the magnitude of X .
7168	Convert a json file to a list of bounds .
7169	Convert a json file to a list of bounds .
7170	Convert a json file to a list of labels .
7171	Convert a JSON file to a list of beats .
7172	Compute the 2D Fourier Transform of X .
7173	Compute a list of labels .
7174	Filter activation matrix .
7175	Get the module for the given boundary id .
7176	Get the module for the given label id .
7177	Run hierarchical segmentation .
7178	Run a flat file .
7179	Run the algorithms for the given audio file .
7180	Process a track .
7181	Process an audio file .
7182	Update the beta matrix .
7183	Translate the text using the command line arguments .
7184	Decorate a coroutine function .
7185	Combine two lists of lists .
7186	Set a task to be run in a separate thread .
7187	Spool an iterable .
7188	Send data from inputstream to target .
7189	Decorator to create a connection to a push url .
7190	Translate a phrase from a source to another .
7191	Get the translation table for a given language .
7192	Print the translation table .
7193	Remove nodes from a network .
7194	Write a network to a Pandas hdf5 file .
7195	Create a network from a pandas . hdf5 file .
7196	Set an access variable for a list of node ids .
7197	Get all aggregate accessibility variables .
7198	Get the node ids from the KDTree .
7199	Plot a scatter plot .
7200	Set the number of POIs for a given category .
7201	Find the nearest pois in a category .
7202	Get the low connectivity nodes for each impedance .
7203	Process a node .
7204	Make OSM query .
7205	Build a query string for a node .
7206	Query OSM for nodes .
7207	Check if value is a regular expression .
7208	Compare the value against the expectation .
7209	Decorator for fluent functions .
7210	Compare an expression against the given value .
7211	Trigger the methods of a Pook instance .
7212	Check if the request matches any of the matchers .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the request body .
7216	Set the body of the request as JSON .
7217	Set the value of a key to a value .
7218	Append functions to target .
7219	Trigger the request for the given instance .
7220	Set the URL of the request .
7221	Set request headers .
7222	Add a header matcher that matches the given names .
7223	Add headers matcher .
7224	Set the Content - Type header .
7225	Add query parameters to the request .
7226	Set the body of the request .
7227	Add a JSON matcher to the request .
7228	Set the XML matcher for this request .
7229	Read the contents of a file .
7230	Set the persist flag .
7231	Set the error message .
7232	Create a new response with the given status code .
7233	Match a request against the mock .
7234	Decorator to activate or disable a coroutine .
7235	Set the mock engine .
7236	Enable networking for the given hostnames .
7237	Add a mock to the engine .
7238	Remove a mock from the list .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Check if the request should be used as a network .
7242	Check if a request matches any of the mocks .
7243	Return a copy of this request .
7244	A decorator that activates the engine .
7245	Context manager to enable or disable the engine .
7246	Add an interceptor to the chain .
7247	Remove an interceptor by its name .
7248	Get the value of a setting .
7249	Decrypts the column and returns the SQL .
7250	Set the original value of the model instance .
7251	Return a placeholder for the given value .
7252	Return a DecryptedCol instance for the given alias .
7253	Get the public GPG key .
7254	Hunt repeated YAML keys .
7255	Base regression function .
7256	Returns the inverse of the matrix .
7257	Recurses through all nonterminals .
7258	Calculate the averages for all nonterminals in the tree .
7259	Propagate averages .
7260	Explained variance of the tree .
7261	Calculate and return a regression model .
7262	Find the best root node .
7263	Set the Tc value .
7264	Calculate the number of branches in the tree .
7265	Calculate the cost of a branch at a given time .
7266	Attach the branch length interpolator to the tree .
7267	Optimize coalescent time scale .
7268	Convert a profile to a sequence .
7269	Normalize a profile .
7270	Set the GTR value .
7271	Set GTR model in TreeAnc class .
7272	Set the length of the sequence .
7273	Attach sequences to nodes .
7274	Prepare the tree .
7275	Prepare the tree for insertion into the tree .
7276	Calculate the distance to the root node .
7277	Reconstructs ananc from the tree .
7278	Get the branch mutation matrix for the given node .
7279	Returns the expanded sequence of the given node .
7280	Create the Fitch profiles .
7281	Calculate the fitch state of a node at the given position .
7282	Given a list of arrays return the intersection of the two arrays .
7283	Returns the sequence of ancestral sequences .
7284	Calculate the ancestral likelihood .
7285	Convert branch length to GTR .
7286	Optimize the branch length of the tree .
7287	Run the branch length optimization .
7288	Calculate the optimal length of a branch .
7289	Optimize the sequence and branch length of the tree .
7290	Reconstructs the Anc and returns a MultipleSeqAlignment .
7291	Returns the Q matrix .
7292	Create a custom GTR instance .
7293	Return a standard model for the given model .
7294	Fix the diagonal of the GTR rate matrix .
7295	Calculate the probability of a compressed sequence at a given time .
7296	Calculate the optimal t of a sequence pair .
7297	Optimize the t - compressed distribution .
7298	Calculate the probability of a profile pair at a given time .
7299	Compute the evolution of the profile at time t .
7300	Computes the log - likelihood of a sequence .
7301	Set the branch length mode .
7302	Returns a dictionary of residuals for all terminals in the tree .
7303	Plot the root to tip .
7304	Resolve multiple polytomies .
7305	Print the tree log - likelihood .
7306	Add a coalescent model to the tree .
7307	Find the best root node .
7308	Assure that the input file is a tree .
7309	Create GTR model .
7310	Read a VCF file if it is a VCF file .
7311	Reconstruction of ancestral sequences .
7312	Calculate the FWHM .
7313	Create a delta function .
7314	Multiply a list of Distribution objects .
7315	Assign dates to the tree .
7316	Setup the TreeRegression class .
7317	Make a maximum likelihood tree with temporal constraints .
7318	Calculate the log likelihood of the timetree .
7319	Convert the dates of all clades in the tree .
7320	Calculate date uncertainty due to rate .
7321	Get the maximum posterior region for a given node .
7322	Find the minimum value of an interpolation object .
7323	Calculate the median value of an interpolation object .
7324	Return the numeric date of the given datetime .
7325	Create a ClockModel instance from a dictionary of values .
7326	Create a connection to the guacd server .
7327	Close the connection .
7328	Receive an instruction from the client .
7329	Send data to the server .
7330	Sends an instruction to the device .
7331	Establish a new handshake .
7332	Convert unicode string to utf - 8 string .
7333	Load an instance from an instruction .
7334	Encode an argument to a string .
7335	Encode the instruction .
7336	Returns the URL for the class .
7337	Determine which URL to use for this instance .
7338	Return the URL for a class .
7339	Download the file .
7340	Get the parent object for this job .
7341	Ask for SolveBio credentials .
7342	Login to SolveBio .
7343	Print the current user .
7344	Print user information .
7345	Return a new QuerySet with the given filters .
7346	Add a range filter to the filter set .
7347	Add a position filter to the filter set .
7348	Get a list of facets for this query .
7349	Given a list of filters return a list of filters .
7350	Returns the next item in the buffer .
7351	Execute a query .
7352	Migrate this dataset to another dataset .
7353	Main entry point for SolveBio .
7354	Download a folder from a vault .
7355	Construct an instance from a dictionary of values .
7356	Logout the user .
7357	Make a request to the API .
7358	Get the child object for this task .
7359	Mark the task as cancelled .
7360	Parse SNPEFF annotations .
7361	Convert a genome row to a dictionary .
7362	Get credentials from netrc file .
7363	Save the configuration to a file .
7364	Format a value according to the given type .
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Format a table .
7370	Create a migration between this dataset and a target dataset .
7371	Validate a full path .
7372	Upload a file or folder to a vault .
7373	Validate a vault path .
7374	Validate SolveBio API host URL .
7375	Add files or directories to the manifest .
7376	Annotate a list of records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new formatter .
7380	Format the output data according to the given format .
7381	Wrapper around tabulate .
7382	Get the user s config directory .
7383	r Return a list of system config directories .
7384	Read the default config file .
7385	Read all config files .
7386	The path to the user config file .
7387	Return a list of system config files .
7388	A list of additional files .
7389	Write the default config file .
7390	Read a list of config files .
7391	Truncate a string to max_width characters .
7392	Replace all occurrences of replace in a string .
7393	Call commands in sequence .
7394	Apply the given options to the given command .
7395	Apply an option to a command .
7396	Initialize the options .
7397	Run pep8radius .
7398	Run HTML and HTML documentation commands .
7399	Truncate string data and headers to max_field_width characters .
7400	Format numbers .
7401	Format a single row .
7402	Helper function to create a vertical table .
7403	Generate a table from the given data .
7404	Render a template file to a file .
7405	Checks if the type is a number .
7406	Checks if the given type is a boolean .
7407	Checks if the given type is a binary type .
7408	Generates a new key for the given template .
7409	Generates a new key pair .
7410	Returns a list of CK_OBJECT_HANDLE objects matching the given template .
7411	Insert an image into the QR Code .
7412	Export a panel .
7413	Return the first weekday of a given weekday .
7414	Repeats the given day .
7415	Repeats each day in reverse order .
7416	Helper function for biweekly events .
7417	Handle a single chunk event .
7418	Get a list of variants for a particular collaborator .
7419	Export a list of verified variants .
7420	Convert a list of variants into a list of lines .
7421	Add or update a user s roles .
7422	Get a list of variants for a given institute .
7423	Retrieve a single SVR variant .
7424	Returns a string representation of a single variant .
7425	Verify a variant .
7426	Export a clinvar .
7427	Get a list of variants for a given institute .
7428	Classify a single acmg .
7429	Delete an evaluation .
7430	Get the acmg for the given criteria
7431	Upload a new HGNC symbol panel .
7432	Download the verified variants .
7433	Given a list of HGNC genes and a list of HGNC symbols return a dictionary of gene ids .
7434	Add incomplete penetrance info to genes .
7435	Link genes from HGNC to HGNC .
7436	Send a request to the MME server .
7437	Get a list of nodes connected to matchmaker .
7438	Get the coordinates of a cylindrical interval .
7439	Get the sub - category .
7440	Get the length of a given segment .
7441	Get the end of the BND .
7442	Parse the coordinates of a variant .
7443	Check some coordinates in a cytoband file
7444	Create a new panel .
7445	Update a panel .
7446	Export a panel to a PDF
7447	Edit a gene .
7448	Save a delivery report to a case .
7449	Get a list of HPO terms .
7450	List users in the whitelist .
7451	Build a phenotype object from a phenotype_id .
7452	Create a gene record from a HGNC ID .
7453	Return a list of genes that match the given query .
7454	List all institutes .
7455	Run scout view of transcripts .
7456	Return a list of events for a given day .
7457	Get a list of variants from a query .
7458	Get a list of variants for a given institute .
7459	Get information about a single string variant .
7460	Add a variant to an institute .
7461	Parse a single variant .
7462	Return a list of variants export header .
7463	Get variant information from a list of genes .
7464	Get predictions from a list of genes .
7465	Given a case_obj and a variant_obj return the case object .
7466	Find bai file from BAM file .
7467	Get observations for a single variant .
7468	Parse a gene object .
7469	Return a string representation of a transcript object .
7470	Returns the position of the end of the variant .
7471	Returns the frequency of the variant .
7472	Generate a human - readable representation of the clinsig .
7473	Returns the thousandg link for the given variant .
7474	Return a link to a cosmic mutation .
7475	Return a link to the beacon network .
7476	Return the ucsc link for the given variant .
7477	Return a human - readable representation of the spidex .
7478	Return a list of expected inheritance models for a variant .
7479	Return a list of all callers for a given variant .
7480	Get a list of cancer variants .
7481	Export CLINVAR data .
7482	Get clinvar submission .
7483	Returns an ACMG object for a particular variant .
7484	Perform a variant evaluation on a given institute .
7485	Convert an ACMG evaluation object into a dictionary .
7486	Upload HGNC symbols to HGNC .
7487	Create an Excel file containing verified variants .
7488	Export all genes to . bed format
7489	Parse a clnsig into a list of dicts .
7490	Parse a comma - separated list of compounds .
7491	List all genes .
7492	Build an individual object from a dictionary .
7493	Load variants from a case .
7494	Return a JSON representation of a case .
7495	List scout collections .
7496	Load an institute .
7497	Update institute .
7498	Returns a file handle for the given file path .
7499	Get the number of times a given request is in .
7500	Get the next and previous net number .
7501	Check if year is valid .
7502	Check the weekday of a given year month and day .
7503	Parse case data .
7504	Add Peddy information to the config file .
7505	Parse a single individual .
7506	Parse individuals from a list of samples .
7507	Parse a case from a config file
7508	Parse a Pedigree file .
7509	Build an evaluation object .
7510	Export Mitochondrial variants .
7511	Check if a pathogenic term is present .
7512	Check if a pathogenic term is likely to be used .
7513	Returns True if bs_terms and bp_terms are likely to be benign .
7514	Given a list of acmg terms return the prediction .
7515	Add gene information to a variant object .
7516	Fetch variants from a case .
7517	Get all sanger variants for a given institute .
7518	Get a single variant from a document .
7519	Get a list of gene variants .
7520	Validate an institute .
7521	Get all causatives for a particular institute .
7522	Returns a list of causative variants for a case .
7523	Given a case and a variant return a list of other causatives .
7524	Delete variants for a case .
7525	Returns a list of overlapping variants .
7526	Get all variants for a given case .
7527	Get the VCF file for a region of a case .
7528	Retrieve variants for a given sample .
7529	Get a connection to a MongoDB server .
7530	Given a list of variant ids and a dict of form fields return a list of objects .
7531	Returns a dict with the CLINVAR_HEADER and CASEDATA_HEADER values .
7532	Given a list of submission objects and a dictionary of submission headers return a list of csv lines .
7533	Load transcripts from ensembl .
7534	Create a new panel .
7535	Build an Exon from a dictionary of exon info .
7536	Delete a panel .
7537	Delete all indexes .
7538	Delete a user from the database
7539	Drop genes collection .
7540	Delete exons for a given build .
7541	Delete a case .
7542	List all individuals in a case .
7543	Parse a list of match objects for a patient .
7544	Show a list of cases .
7545	Load a user from the store .
7546	Login to a user .
7547	Build an institute object .
7548	Delete an event .
7549	Create a new event .
7550	Get events for a particular institute .
7551	Get all events for a user .
7552	Add a phenotype to a case .
7553	Remove a HPO term from a case .
7554	Create a comment event .
7555	Parse genotypes from a list of individuals .
7556	Check if the position is in the given coordinates .
7557	Get HPO terms .
7558	Export transcripts .
7559	Load ensembl exons .
7560	Load a region from HGNC .
7561	Return a queryset of all events for a given month .
7562	Return a queryset of live tasks .
7563	Parse requirements . txt file .
7564	Returns the existing gene with the given hgnc_id
7565	Update a gene panel .
7566	Create a new gene panel .
7567	Export a panel .
7568	Return information about a particular case .
7569	Migrate a scout case .
7570	Migrate a scout case .
7571	Research a case .
7572	Load genes from HGNC .
7573	Show HPO terms .
7574	Create a Flask application .
7575	Configure the extensions .
7576	Register blueprints .
7577	Configure the app for coverage .
7578	Run scout view aliases .
7579	Build a panel object from a panel info dict .
7580	Export verified variants to an Excel file .
7581	Export variants .
7582	Get a VCF entry from a variant object .
7583	Start mongod server .
7584	Generates a md5 hash of a list of arguments .
7585	Initialize the application .
7586	Set up the database .
7587	Run scout index .
7588	Setup the scout database .
7589	Run scout setup demo
7590	Setup the connection to the database .
7591	Show institutes .
7592	Parse genetic models info .
7593	Show the panels for a given institute .
7594	Add institute to the database .
7595	Update an institute .
7596	Fetch institute by ID .
7597	Checks if the given date is a valid date .
7598	Get a datetime object from a date string .
7599	Export genes from a hpo term .
7600	Parse the rank score from a rank score entry .
7601	Add a user to an institute
7602	Check the connection to a MongoDB server .
7603	Initialize the application .
7604	Load a delivery report from a case .
7605	Add a user to the database .
7606	Pileup pileup .
7607	Load exons from a list of lines .
7608	Update compounds for a case .
7609	Add links to a gene object .
7610	Show HGNC gene information .
7611	Parse a HGNC line .
7612	Parse hgnc genes .
7613	Get an open clinvar submission for a user and institute .
7614	Update a clinvar submission .
7615	Get clinvar_id from submission_id
7616	Add new variants to a clinvar submission .
7617	Update the status of a clinvar submission
7618	Retrieve all clinvar submissions for a user and institute .
7619	Delete a clinvar object .
7620	Convert a case id to a list of clinvars .
7621	Parse a HPO OBO file .
7622	Get a list of genes .
7623	Return a list of genes .
7624	Return a list of genes .
7625	Check if the panels exist in the database .
7626	Load clinical SNV variants for a given region .
7627	Load a case from the database .
7628	Decorate a function to render a templated template .
7629	Get institute object and case object .
7630	Return a list of institutes for the given login user .
7631	Get the HGNC ID from the gene info .
7632	Update a gene panel .
7633	Load all diseases .
7634	Load the hpo disease terms .
7635	Parse the frequencies from the transcripts .
7636	Parse a frequency from a variant s info key .
7637	Parse the SV frequencies from the variant info .
7638	List users .
7639	Build a HGNC gene .
7640	Load a panel and add it to the panel
7641	Load the OMIM - AUTO panel .
7642	Compare two MIM panels .
7643	Update the MIM version for new genes .
7644	Add a gene panel to the database .
7645	Get a panel by ID .
7646	Delete a panel .
7647	Fetch a gene panel from the database .
7648	Get a list of gene panels .
7649	Convert a gene to panels .
7650	Update a panel .
7651	Add a pending action to a panel .
7652	Apply pending updates to a panel .
7653	Get all clinical symbols for a case .
7654	List cases .
7655	Send a record to the SMTP server .
7656	Load indexes from the database .
7657	Update indexes in the database .
7658	Drop all indexes for all collections .
7659	Builds a mongo query for a variant .
7660	Builds a mongo query for a given case .
7661	Add CLINSIG filter to the query .
7662	Add genomic coordinates to the query
7663	Add genes - related parameters to the query
7664	Wipe a scout database
7665	Parse a panel from a CSV stream .
7666	Build a CLNSig object from a dictionary .
7667	Loads a batch of gene objects into the HGNC collection .
7668	Loads a batch of Transcript objects into the database .
7669	Load a list of exons into the database .
7670	Fetch a single HGNC gene .
7671	Get the HGNC ID for a given symbol .
7672	Get a list of genes with the given symbol .
7673	Get all genes for a given build .
7674	Return the number of genes in a given build .
7675	Drop all genes from the collection .
7676	Drop the transcripts collection .
7677	Drop the exons from the collection .
7678	Fetch all ensembl transcripts
7679	Build a dictionary of HGNC symbols to gene objects .
7680	Get a gene by alias .
7681	Fetch all genes by alias .
7682	Fetch all ensembl genes .
7683	Return the HGNC symbol associated with this gene .
7684	Add hgnc_id to a list of genes
7685	Get a dictionary of coding intervals for each gene .
7686	Update the omim gene panel
7687	Get all cases for a given institute .
7688	Get information about a case .
7689	Get matchmaker matches .
7690	Match a case .
7691	Delete a matchmaker case .
7692	Report the content of a case .
7693	Render a PDF report for a case .
7694	Diagnosis for a case .
7695	Add or remove a phenotype from a case .
7696	Remove phenotypes from a case .
7697	Delete an event .
7698	Change the status of a case .
7699	Assign a user to a case .
7700	List HPO terms .
7701	Mark a variant as validation .
7702	Mark a variant as causative .
7703	Send a delivery report to a specific institute .
7704	Share a case .
7705	Rerun a case .
7706	Research a case .
7707	Send a vcf2cytosure . cgh file .
7708	Send a multiqc file to a specific institute
7709	Retrieve a list of cases from a case query .
7710	Report the content of a case .
7711	Get the contents of the coverage report .
7712	Get a list of clinvar submissions for a user .
7713	Export MT variants to an Excel file .
7714	Update the synopsis of a case .
7715	Get a list of diseases from a list of HPO IDs .
7716	Convert VCF to Cytosure .
7717	Returns a dict of institute and case objects .
7718	Get a list of unevaluated sanger values for a given institute .
7719	Add a user to matchmaker .
7720	Delete a case from Matchmaker .
7721	Get all matches for a particular case .
7722	Query the MME for a particular case .
7723	Drop genes and transcripts .
7724	Return a dictionary of all callers for a given variant .
7725	Build a transcript from a transcript_info dict .
7726	Load an institute into the database .
7727	Given a variant and a list of transcripts return the cadd value .
7728	Load a case from a yaml file
7729	Update a single variant .
7730	Update the rank of all variants in a case .
7731	Update variant compounds .
7732	Update compound objects .
7733	Update compound variants in MongoDB .
7734	Update variant compounds for a case .
7735	Load a variant from the database .
7736	Upsert a variant in the database .
7737	Loads a list of variants into the database .
7738	Assign a user to a case .
7739	Share a collaborator with a case .
7740	Diagnose a case .
7741	Mark a case as checked .
7742	Order a verification for a particular variant .
7743	Returns a list of sanger events ordered by verb .
7744	Validate a variant .
7745	Mark a variant as causative in a case .
7746	Update a dismiss variant .
7747	Update ACMG .
7748	Return a dictionary of ids for a particular variant .
7749	Parse a simple ID from chrom pos ref and alt .
7750	Generate a unique identifier for a document .
7751	Convert a HGNC panel to HGNC .
7752	Get a variant id from a variant object .
7753	Get the number of cases in the collection .
7754	Update the dynamic gene list .
7755	Fetch a case .
7756	Delete a case .
7757	Add a case to the database .
7758	Replace a case .
7759	Update case id .
7760	Submit an evaluation .
7761	Get all evaluations for a given variant .
7762	Parse ensembl transcripts .
7763	Parse an ensembl gene request .
7764	Parse an ensembl transcript request .
7765	Parse an ensembl line .
7766	Parse ensembl genes from a file .
7767	Parse ensembl exons .
7768	Parse an Ensembl EXON request .
7769	Initialize a logging object .
7770	Parse an omim line .
7771	Parse MORBID header lines .
7772	Given a genemap file return a dictionary of mim_number - > phenotype dictionary .
7773	List the genes in a genetic map .
7774	Convert a string to a number .
7775	Render the month table .
7776	Format a day .
7777	Format month name .
7778	Create a popover for this event .
7779	Get information about a panel .
7780	Parse a gene from a dictionary .
7781	Parse gene lines into a list of genes .
7782	Parse a gene panel .
7783	Show diseases .
7784	Drop HPO terms .
7785	Return a dict of users and their events .
7786	Parse the conservation information for a variant .
7787	Parse the conservation of a variant .
7788	Get general case info .
7789	Get a list of cases grouped by status .
7790	Render the context to a JSON response .
7791	Get the year and month from the query string .
7792	Check for cancelled events .
7793	Fetch a HPO term by its ID .
7794	Search for HPO terms .
7795	Get a disease term by its identifier .
7796	Get all disease terms for a given gene .
7797	Loads a disease term into the database .
7798	Generates a list of genes from a list of HPO terms .
7799	Read data from an HDF5 file .
7800	Set up the frequency range .
7801	Set up time axis .
7802	Read filterbank from a file .
7803	Compute the LST from the header .
7804	Blanks the DC bin .
7805	Print information about the file .
7806	Calculate the extent of the plot .
7807	Plot the waterfall .
7808	Plot time series .
7809	Write the filterbank to a file .
7810	Calibration for the N1 band pass .
7811	Convert a numpy array of data to a coarse - grain .
7812	Apply Mueller .
7813	Calibrate a set of pols .
7814	Calculate the fracpols of a string .
7815	Write a list of fracpols to a file .
7816	Returns the index of the closest value in xarr .
7817	Rebin the data into n_x and n_y dimensions .
7818	Unpack an 8 - bit array into an 8 - bit array .
7819	Get the difference between two stokes .
7820	Plot stokes diode .
7821	Plot calibrated diode .
7822	Plot the coarse - grain gain offsets .
7823	Open a file for reading .
7824	Set up the selection range .
7825	Calculate the size of the selection .
7826	Calculate the shape of the selection .
7827	Set up channels .
7828	Setup frequency ranges .
7829	Populate the timestamps of the file .
7830	Get the frequency of each channel .
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Check if the current selection size is heavy .
7834	Read data from the file .
7835	Read all data from the file .
7836	Read a single row from the file .
7837	Read data from the container .
7838	Update the header .
7839	Print info about the file .
7840	Write the container to a file .
7841	Write the container to an HDF5 file .
7842	Write the filterbank to an HDF5 file .
7843	Get the dimensions of the blob .
7844	Get the chunk dimensions .
7845	Grabs data from the data store .
7846	Command line utility for creating spectra from GuppiRaw files .
7847	Read the first header from the file .
7848	Find the number of data blocks in the file .
7849	Print the current stats .
7850	Plot a histogram of data .
7851	Generate filterbank header .
7852	Find the size of the header of a file .
7853	%prog matchfils file1 file2
7854	Create HDF5 Raw files .
7855	Folds the data according to the given period of time .
7856	Integrate the calibrated data .
7857	Calculate the calibrated flux .
7858	Calculate the center frequency of each channel .
7859	Calculate the F - Ratio of the calibrated data .
7860	Calculate diode spec .
7861	Return the Tsys of the diode .
7862	Calibrate fluxes .
7863	Return the length of the header of a file .
7864	Check if file is a filterbank .
7865	Replace a header keyword with a new value .
7866	Generates a SIGPROC header string from a signature file .
7867	Convert a angle value to a sigproc angle .
7868	Calculate the number of ints in a file .
7869	Return a dict representation of the traceback .
7870	Create a subparser for the given record type .
7871	Create a parser for the zonefile .
7872	Remove comments from text .
7873	Add a default name to the given text .
7874	Parse a single record line .
7875	Parse a text file into a dictionary of dictionaries .
7876	Parse a zone file .
7877	Return a copy of the data with the given field escaped .
7878	Parse an Avro schema string .
7879	Create a Python package from a list of classes .
7880	Generate the source code for a class .
7881	Decorator to disable auto - register .
7882	Dump record in json - encodable object format
7883	Load a JSON record from a dictionary .
7884	Load a JSON record from a string .
7885	Add a schema to the schema map .
7886	Get the schema for the given record name .
7887	Return a dict of variables that can be serialized to JSON .
7888	Mixin a class .
7889	Create a new instance of metacls from a class .
7890	Get the schema dictionary for the given record .
7891	Get the root schema dictionary for the given record .
7892	Read lines from the input stream .
7893	Write the outputs to the output stream .
7894	Push a key - value pair onto the front of a dictionary .
7895	Get a query string for this search .
7896	Returns a new SearchResult with the given filters .
7897	Returns a list of all entities that include the given attributes .
7898	Get entity from href .
7899	Return the first quote that matches the given quote .
7900	Escape a filter string .
7901	Returns an elementary rotation matrix .
7902	Construct the covariance matrix .
7903	Calculate the vrad - error - skew average .
7904	Calculate parallax error .
7905	Returns the magnitude error of G .
7906	Returns the magnetic error in EoM .
7907	Make a plot of the magnetic error and magnetic error .
7908	Calculate the average number of transits .
7909	Returns the angular distance between two points .
7910	Transform cartesian coordinates .
7911	Transform cartesian coordinates to spherical coordinates .
7912	Transform the covariance matrix .
7913	Returns the error scaling factor for the given observable and beta .
7914	Make a plot of the sptVabsAndVmini .
7915	Make the plot of the VRVs and VRVs .
7916	Returns a function that applies one or more functions to a value .
7917	Decorator to make sure that an exception is raised in a helpful way .
7918	Convert a unicode string to a unicode string .
7919	Apply one or more functions to each element of the collection .
7920	Exclude elements from this collection .
7921	Return a new collection with items filtered by a given function .
7922	Return a new collection where items are takewhile .
7923	Drop items from the collection by applying a function to each element of the collection .
7924	Returns a new collection with the same elements as this collection .
7925	Returns the first occurrence of the first occurrence of the first occurrence of the first occurrence of the first occurrence of the first occurrence of the second occurrence of the second occurrence of the first occurrence of the second occurrence of the second occurrence of the first occurrence of the second occurrence of the first occurrence of the second occurrence of the second occurrence of the second occurrence .
7926	Return the path to the serach directory .
7927	Return an iterator over a group of characters .
7928	Yield options from a regdescr string .
7929	Return a string representation of an event tuple .
7930	Build a list of minimal runs from a list of events .
7931	Print results to a file .
7932	Print results to a file .
7933	Print the results to a file .
7934	Remove comments from the given code .
7935	Round x to next number of base .
7936	Return a list of indices that are blocking .
7937	Calculate cache access .
7938	Calculate the number of cycles per cacheline .
7939	Analyzes the results of the kernel .
7940	Run IACA analysis .
7941	Return a list of stripped and uncommented lines .
7942	Strip unreferenced labels from a list of lines .
7943	Select the best suitable assembly block .
7944	Select the store pointer increment .
7945	Print the blocks in the assembly file .
7946	Insert markers between start_line and end_line .
7947	Run iaca instrumentation on the input file .
7948	Main entry point for iaca_instrumentation .
7949	Simulate a kernel .
7950	Yields a sequence of integers from start to stop .
7951	Get the last modified datetime .
7952	Check command line arguments .
7953	Entry point for the command line interface .
7954	Merge two pickle files .
7955	Create a symbol with positive and integer values .
7956	Transform a multidim declaration to a 1d declaration .
7957	Transform a multidim to a 1d - ref .
7958	Find all nodes of the given type in the given AST .
7959	Force a function to return an iterable .
7960	Check that the mixing of datatypes within a kernel is supported .
7961	Set a constant .
7962	Substitute constant expressions .
7963	Get the size of the array .
7964	Calculate the relative offset of a variable .
7965	Remove duplicate accesses .
7966	Returns the length of the iteration .
7967	Get loop stack .
7968	Return an ordered list of free symbols .
7969	Return a dictionary of sympy accesses .
7970	Returns a dictionary of relative distances .
7971	Convert a global iterator to a list of indices .
7972	Return the global iterator .
7973	Convert indices to a global iterator .
7974	Returns an iterator over the maximum iteration .
7975	Print kernel information .
7976	Print information about the variables .
7977	Print constants information .
7978	Print the kernel code to the output file .
7979	Convert a math expression to a symbol .
7980	Get the offsets of an array reference .
7981	Get the basename of an array reference .
7982	Get the type of the loop index .
7983	Build a list of const declarations .
7984	Returns a list of array declarations .
7985	Returns a list of all for statements in the kernel .
7986	Build a list of array declarations .
7987	Find the most loop in loop_nest .
7988	Build array initializations .
7989	Build dummy function calls .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get the code for a kernel .
7993	Build a kernel call .
7994	Get code for the main . c file .
7995	Perform IACA analysis .
7996	Build an executable .
7997	Convert a string to a Sympy expression .
7998	Get a unique identifier for this file .
7999	Get the last modified time of the file .
8000	Returns a cachesim . CacheSimulator object .
8001	Get the bandwidth of the benchmarks .
8002	Get compiler name and flags .
8003	Parse a perfctr event into a tuple of event parameters .
8004	Enforce that there is no overlap in the data .
8005	Return the path to the header file .
8006	Aligns the iteration with the first level of the cl boundary .
8007	Returns a list of load counts .
8008	Returns a list of hit counts for each cache level .
8009	Get the number of misses .
8010	Get the number of stores in the memory hierarchy .
8011	Get the number of evicts .
8012	Get information about the memory hierarchy .
8013	Set an environment variable to the given value .
8014	Configure command line arguments .
8015	Print results to a file .
8016	Parse the description from the README . md file .
8017	Schedule a retry .
8018	Build a purchase item .
8019	Record a purchase in Sailthru .
8020	Get course content from Sailthru .
8021	Get course content from the Ecommerce API .
8022	Update the list of unenrolled users .
8023	Send a course refund notification .
8024	Send an offer assignment notification email .
8025	Get the logger configuration .
8026	Retry the fulfillment of an order .
8027	Fulfill an order .
8028	Returns a SailthruClient instance for the given site code .
8029	Get a value from the cache .
8030	Set the value of a key in the cache .
8031	Get the value of a configuration variable .
8032	Get the value of the environment variable .
8033	Get a value from a dictionary by version .
8034	Energy plus version .
8035	Returns a dictionary of file references .
8036	Populate the device from a JSON data dict .
8037	Returns a list of all external files .
8038	Set the default values for all tables .
8039	Prepare the extensible field descriptors .
8040	Get the extended name for the given index .
8041	Return a dict of all the short refs .
8042	Get the value of a column .
8043	Update the value of the field at the given index .
8044	Update the inert data .
8045	Set default values for all fields .
8046	Add fields to the record .
8047	Remove and return the value at the given index .
8048	Insert a new value at the given index .
8049	Remove the record from the table .
8050	Register a record hook .
8051	Register a link .
8052	Create a regular expression from a line of text .
8053	Return the remaining duration in seconds .
8054	Serialize the event .
8055	Perform an HTTP request to the given URL .
8056	Get a list of available services for a given service type .
8057	Try to create a directory .
8058	Configure a service .
8059	Set agent state to idle .
8060	Set the state of a recording .
8061	Update the status of an event .
8062	Update the agent state .
8063	Return the path to the configuration file .
8064	Load and validate a configuration file .
8065	Check if the agent is running in backup mode .
8066	Initialize the logger .
8067	Display a list of upcoming and processed events .
8068	Serve an image .
8069	Run all modules in parallel .
8070	Parse an iCalendar string into a list of dicts .
8071	Get a list of upcoming events for a given agent .
8072	Control loop for the schedule service .
8073	Control loop for agentstate service .
8074	Make an error response .
8075	Make a JSON response with the given data .
8076	Get the internal state of the service .
8077	Get all events from the database .
8078	Get an event by its uid .
8079	Delete an event .
8080	Modify an event .
8081	Extract parameters from config file .
8082	Ingest an event .
8083	Start recording an event .
8084	Render the HTML to a fragment .
8085	Returns a list of all resources .
8086	Return a dict representation of the object .
8087	Create a Fragment from a dict of pods .
8088	Add content to the message .
8089	Add a resource to the fragment .
8090	Add a URL fragment to the resource list .
8091	Initialize a JavaScript function .
8092	Convert the list of resources to HTML .
8093	Convert a resource to HTML .
8094	Returns a response for a GET request .
8095	Render a standalone HTML fragment .
8096	Render the given fragment as standalone HTML .
8097	Calculate pFDR and qvalues .
8098	Convert values to a single dimension array .
8099	Lookup values from an error table .
8100	Perform posterior chromatogram hypotheses .
8101	Sampled the final error table .
8102	Create a summary error table from a DataFrame .
8103	Compute the error statistics from the target scores and decoy scores .
8104	Find the cutoff of the error statistics .
8105	This function is the main score function . This function is called by the Scikit - learn program .
8106	Infer peptidoforms from input file .
8107	In - place peptide inference .
8108	Infer proteins from a file .
8109	Subsample an OSW file .
8110	Reduce an OSW file .
8111	Backpropagate an OSWR file .
8112	Filter sqmass files .
8113	Get a group by id .
8114	Create a group .
8115	Delete a group .
8116	Get all members of a group .
8117	Update a group s members .
8118	Get the number of effective members in a group .
8119	Check if a net is an effective member of a group
8120	Modify the conf . py file .
8121	Create an HDF5 dataset .
8122	Decrypt the contents of a file .
8123	Get the stdin .
8124	Get the output of the subprocess . Popen .
8125	Get the standard error stream .
8126	Get the output of the debug command .
8127	Wrapper around subprocess . Popen . with_stdin .
8128	Context manager for stdout .
8129	Context manager for stderr .
8130	Context manager for debugging .
8131	Empty an account .
8132	List the contents of a container .
8133	Decorator to wrap a function with stdout .
8134	Decorator for logging messages to stderr .
8135	Write an error message to the given file .
8136	Print the help of the parser .
8137	Print the usage of the parser .
8138	Print the version of the program .
8139	Perform an HTTP request .
8140	Create a new account .
8141	Delete an account .
8142	Create or update a container .
8143	Perform a HEAD request on an object .
8144	Get an object from a container .
8145	Put an object in a container .
8146	Create a new object in a container .
8147	Resolve a configuration option .
8148	Returns a copy of this CLIContext .
8149	Write headers to file .
8150	Authenticates the given client .
8151	Generate a temporary URL .
8152	Quote a string or unicode string .
8153	Get the contents of a container .
8154	Get a client from the queue .
8155	Encrypt data using AES - 256 - CBC .
8156	Decrypt a stream of bytes using AES - 256 - CBC .
8157	Upload a directory structure to a container .
8158	Put an account .
8159	Put a container .
8160	Get the manifest body .
8161	Create a container with the given path .
8162	Get a temporary URL for a given path .
8163	Print trans id to stdout .
8164	Prints help for a specific command .
8165	Check if the buffer is empty .
8166	Encrypt data using AES - 256 - CBC .
8167	Get the status of a repository .
8168	Get information about a pull request
8169	Get a list of pull requests for a repository .
8170	Write your forwards methods here .
8171	Returns a queryset of all published SliderItems .
8172	Render the hero slider .
8173	Acquire a reader lock .
8174	Decrements the number of readers .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get the task with the given id .
8179	Returns a list of all tasks .
8180	Return a dict representation of the configuration .
8181	Create a TaskConfig object from a dictionary .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the query .
8186	Create an elasticsearch index .
8187	Create an Elastic Search mapping .
8188	Return a JSON - encoded representation of the given object .
8189	Write a generator of items to a file .
8190	Add a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Get a list of all items in the storage .
8193	Validate the arguments for a given task .
8194	Parse archiving arguments .
8195	Perform a job on a queue .
8196	Schedule a job task on a queue .
8197	Cancels a job task .
8198	Run the job listener .
8199	Listen for new messages .
8200	Schedule the event loop .
8201	Schedule a task for execution .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the arguments for a job .
8206	Get a secret from the secrets directory .
8207	Register a view with the router .
8208	Register an admin view .
8209	Returns the URL for the given action .
8210	Get the name of the view .
8211	Return a version string .
8212	Resolve a key to an alias .
8213	Get an engine from a scheme .
8214	Parse a path into a database and schema .
8215	Parse a database URL into a dictionary .
8216	Parse a database URL and return a DatabaseInfo object .
8217	Create a new user .
8218	List users .
8219	Create a password change form .
8220	Build the URL field for the detail view .
8221	Parse a boolean value .
8222	Parse an integer from a string .
8223	Get a parser for a given setting type .
8224	Get Django settings from environment variables .
8225	Create a ModelDict from a model .
8226	Encode a base64 - encoded string .
8227	Create a new field from a field_info dict .
8228	Create a validator class from a dictionary .
8229	Returns the cartesian product of two dictionaries .
8230	Find unique points in a list of explored parameters .
8231	Change the logging kwargs .
8232	Decorate a function to use a simple logging configuration .
8233	Try to create dirs for filename .
8234	Returns a list of strings .
8235	Rename a log file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Show a progress bar .
8239	Check and replace parser arguments .
8240	Convert a parser to a string io object .
8241	Find multiproc options .
8242	Find multiproc dictionary .
8243	Check the logging configuration .
8244	Parse the log file and return a NoInterpolationParser .
8245	Convert a dictionary of log files into a dictionary .
8246	Set up logging handlers and tools .
8247	Finalizes all tools .
8248	Establish a redirection of stdout .
8249	Write a buffer to the stream .
8250	Returns True if the results of two inputs are equal .
8251	Check if two parameters are equal .
8252	Decorator to mark a function as manual run .
8253	Decorator to mark a function as deprecated .
8254	Decorate a function to ensure that the two parameters are mutually exclusive .
8255	Decorator to mark a function as deprecated .
8256	Decorator to retry a function .
8257	Returns a new class with a prefix for naming .
8258	Add Brian2 parameters to the Trajectory .
8259	Run the network .
8260	Euler scheme .
8261	Add parameters to the trajectories .
8262	Calculate the difference between lorenz values .
8263	Helper function to create a storage service
8264	Factory function for creating a storage service .
8265	Add parameters to the trajectories .
8266	Calculate the difference between two values .
8267	Compact an HDF5 file .
8268	Check if all parameters in a group are explored .
8269	Builds the model eqs from the trajectories .
8270	Pre - build the model .
8271	Build the model .
8272	Build the model for the given trajectories .
8273	Pre - build the network .
8274	Build the network for the given trajectories .
8275	Add parameters to a Brian2Trajectory .
8276	Compute the Fano factor .
8277	Compute the mean Fano factor for each neuron in a collection of neurons
8278	Compute the mean Fano factor over all neurons .
8279	Add monitoring to the network .
8280	Add the monitors to the network
8281	Make a folder for the plot .
8282	Plot the result .
8283	Helper function for plotting spikes .
8284	Analyzes the network .
8285	Get the batch number .
8286	Explore a batch of samples .
8287	Returns a NNTreeNodeVars object .
8288	Returns a NNTreeNodeFunc object .
8289	Set the name of the object .
8290	Set the details of the branch and run .
8291	Convert a node to a message .
8292	Remove a subtree from the tree .
8293	Delete a node from the tree .
8294	Remove a node or leaf from the tree .
8295	Recursively removes a branch from the tree .
8296	Translate a shortcut name to a wildcard name .
8297	Add a prefix to the list of split names .
8298	Determine the type of a sub - tree .
8299	Add a generic item to the tree .
8300	Add a leaf to the tree .
8301	Create a link under act_node .
8302	Check that the split names are valid .
8303	Create a new instance of the specified type .
8304	Create a new instance of the specified type .
8305	Set the details of a tree node .
8306	Iterate over nodes .
8307	Returns an iterator over the children of the given node .
8308	A breadth - first traversal of the tree .
8309	Perform a very fast search of a node .
8310	Search for a key in the tree .
8311	Helper function for backwards search .
8312	The kids of this NNTreeNode .
8313	Add a group to the network .
8314	Add a leaf from the storage .
8315	Returns a list of all files in the directory .
8316	Return a debug representation of the tree .
8317	Get the parent of this node .
8318	Add a group to the network .
8319	Adds a link to the graph .
8320	Remove a link from the network .
8321	Adds a leaf to the network .
8322	Remove this node from its parent .
8323	Remove a child from the group .
8324	Returns True if the object contains the given item .
8325	Get the value of a file or directory .
8326	Get the children of this node .
8327	Returns a copy of the groups
8328	Returns a copy of the leaves .
8329	Returns a copy of the links .
8330	Store a child of this group .
8331	Store the current state of the trajectory .
8332	Load a child trajectory .
8333	Load the trajectory .
8334	Adds a parameter group to the network .
8335	Adds a parameter to the network .
8336	Add a result group to the network .
8337	Add a result group to the network .
8338	Adds a derived parameter group to the network .
8339	Adds a derived parameter to the network .
8340	Adds a config group to the network .
8341	Add a config to the network .
8342	Evaluate the maximum of a set of individuals .
8343	Add the commit variables to the traj .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Create a nested dictionary from a flat dictionary .
8347	Create a progress bar .
8348	Get the arguments of a function .
8349	Given a function and a dictionary of keyword arguments return a dict of matching keyword arguments .
8350	Format a timestamp as a string .
8351	Convert a port to a tcp address .
8352	Raises IOError if path is already a directory .
8353	Reset the timer .
8354	Get the remaining time for the given index .
8355	Return a copy of the dictionary .
8356	Remove an annotation by its key .
8357	Return a string representation of the F annotation .
8358	Make an ordinary result .
8359	Make a shared result .
8360	Create shared data .
8361	Store access data for this trajectory .
8362	Get the data node from the store .
8363	Check if the given item supports this SharedResult .
8364	Create a shared data object .
8365	Manually manipulate the multiproc .
8366	Lock a client .
8367	Send a shutdown signal to the server .
8368	Finalize the context .
8369	Start the client .
8370	Send a REQ to the server and wait for the response .
8371	Acquire a lock .
8372	Listen for messages from the ZMQ server .
8373	Send a message to the queue .
8374	Detect fork .
8375	Handle a data message .
8376	Receive data from the storage service .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store data in the storage service .
8380	Store a message in the reference dictionary .
8381	Store a list of references .
8382	Decorate an init_func with a ConfigInterpreter .
8383	Collect keyword arguments from a section .
8384	Collect the configuration from the config file .
8385	Interprets the config file and returns the kwargs .
8386	Add parameters to the trajectories .
8387	Convert a rule number to a binary rule number .
8388	Make a random initial state .
8389	Plot a pattern .
8390	A 1D cellular automaton .
8391	Run cellular automaton .
8392	Signal that a node has been updated .
8393	Get the overview group .
8394	Load data from a list of stuff_to_load
8395	Store a message .
8396	Load items from a list of tuples .
8397	Check for HDF5 properties in traj config .
8398	Store multiple items in a single message .
8399	This routine is called when the SRVC connection is closed .
8400	Extract file information from kwargs .
8401	Backup a trajectory into a file .
8402	Read out a row of data from a TRJ file .
8403	Create a new run table for the given trajectories .
8404	Load meta - data for the trajectory .
8405	Load a sub - branch .
8406	Check the version of the trajectories .
8407	Fill the run table with the run information .
8408	Load exploration parameters from the overview group .
8409	Store explorations for the given trajectories .
8410	Make the overview tables for the given tables_to_make
8411	Store a trajectory .
8412	Store a sub - branch in the tree .
8413	Create an instance of the leaf class .
8414	Helper function for _tree_load_nodes .
8415	Helper function for _tree_store_dfs .
8416	Store a parameter or result table entry .
8417	Get or create a table from the where node .
8418	Get a node by name .
8419	Set all attributes to recall natives .
8420	Recall the native type of the data .
8421	Add or modify a row .
8422	Helper function to insert values into a row .
8423	Extract the insert dict from an item .
8424	If the string is too long I truncate it to max_length characters .
8425	Create or get a new group .
8426	Create or get a group from a key .
8427	Store annotations from item_with_annotations to node .
8428	Load annotations from item_with_annotations .
8429	Store a group of trajectories .
8430	Load a group of trajectories .
8431	Load a skeleton from a group .
8432	Extract missing flags from data_dict .
8433	Add a comment to the summary table .
8434	Add meta information to the group .
8435	Create a new group from a dictionary of data to store .
8436	Store a parameter or result .
8437	Helper function to write data into a shared array .
8438	Write a shared table .
8439	Writes a dictionary to an HDF5 table .
8440	Write pandas data to the HDF5 file .
8441	Write data into an existing HDF5 array .
8442	Write data into an HDF5 array .
8443	Delete the link with the given name .
8444	Delete a parameter or result or a group .
8445	Write data into a pytable group .
8446	Create a description dictionary from a dictionary of data .
8447	Returns a pt . Col object for the given key and column .
8448	Get the maximum length of a list of strings .
8449	Helper function for _prm_load_into_dict .
8450	Read a dictionary from a PRM file .
8451	Read the shared data from the given node .
8452	Read data from a table or group .
8453	Read the contents of the given array .
8454	Load a trajectory .
8455	Make a set name based on the index .
8456	Set the properties of the network .
8457	Add dynamic imports to self . _dynamic_imports .
8458	Set the name of the function to run .
8459	Iterate over all runs in the trajectory .
8460	Shrinks the trajectory .
8461	Set a default parameter for the trajectory .
8462	Set the value of a parameter .
8463	Prepare the experiment for use .
8464	Get the value of a run from a list of runs .
8465	Check if a run is completed .
8466	Remove all expanded parameters from disk .
8467	Create a copy of the tree from a node .
8468	Explore a trajectory .
8469	Update the run information .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalizes the run .
8474	Loads the skeleton .
8475	Load a file or directory .
8476	Backup the trajectory .
8477	Make a dictionary of reversed wildcards .
8478	Merge multiple trajectories into one .
8479	Merge multiple runs into a single run .
8480	Rename the full_name to match the other_trajectory s wildcards .
8481	Merge derived parameters .
8482	Merge links between two trajectories .
8483	Merge config from other_trajectory .
8484	Merge two Trajectories in a slow way .
8485	Merge results from other_trajectory .
8486	Migrate the trajectory to a new storage service .
8487	Store the trajectory .
8488	Restore the default values of all parameters .
8489	Set all explored parameters to the given index .
8490	Make a single run .
8491	Returns a list of all run names .
8492	Get the run information for the given name or index .
8493	Given a list of parameter names find the index of the first matching parameter .
8494	Start a single run .
8495	Finalizes the run .
8496	Set the start time of the run .
8497	Set the finish timestamp of the run .
8498	Construct an instance of the given class .
8499	Helper function to return a dictionary of parameters .
8500	Finalize the run .
8501	Get the current configuration .
8502	Return the results as a dictionary .
8503	Store a list of items to disk .
8504	Load items from disk .
8505	Remove items from an iterator .
8506	Delete links from iterator_of_links .
8507	Remove all nodes that match the predicate .
8508	Remove items from the trajectory .
8509	Wrapper for _sigint_handling_single_run .
8510	Frozen pool single run .
8511	Configure the pool .
8512	Configure the frozen pool .
8513	Process a single run .
8514	Configure the frozen_scoop variable .
8515	Perform a single run of scoop .
8516	Configure the logging system .
8517	Configure the niceness of the process .
8518	Run a single single - run .
8519	Run a single run .
8520	Wrap the handler in a separate thread .
8521	Load a class from a string .
8522	Create a class by name .
8523	Returns the length of the range .
8524	Return a string representation of the function value .
8525	Check whether two values are equal .
8526	Get the range of the array .
8527	Explore the parameter .
8528	Expands the parameter .
8529	Check that all values in the given list are of the correct type .
8530	Return a dictionary with data and explored data .
8531	Load the parameter from a dictionary .
8532	Load the array parameter from a dictionary .
8533	Returns True if two values are equal .
8534	Check if the data is a supported matrix .
8535	Serialize a sparse matrix into a list of strings .
8536	Build a list of names for the parameter .
8537	Reconstructs an SPSP matrix from a list of data strings .
8538	Load a sparse parameter from a dictionary .
8539	Store the data in a pickle format .
8540	Load the parameter from a dictionary .
8541	Translate a key to a human readable name .
8542	Return a string representation of the field value .
8543	Return a copy of the data .
8544	Set the value of the field .
8545	Get a single value from the result set .
8546	Set a single result .
8547	Check if the item is a sparse matrix .
8548	Convert the SparseParameter to a dictionary .
8549	Load data from a dictionary .
8550	Set a single result .
8551	Store the result in a dictionary .
8552	Load parameters from a dictionary .
8553	Merge all files in a folder .
8554	Upload a file to S3
8555	Download a file from S3 .
8556	Create an saga session .
8557	Merge trajectories .
8558	Start all the jobs .
8559	Multiplies two reals .
8560	Run the Euler integration .
8561	Add firing rates to summary . firing_rates
8562	Add parameters to a Trajectory object .
8563	Add exploration of I and tau_ref .
8564	Execute a pre - run network .
8565	Execute a network run .
8566	Extract sub - runs from the given trajectories .
8567	Execute a network run .
8568	Add Parameters of Components and Analysers .
8569	Pre - run the network .
8570	Run the network .
8571	Run the network .
8572	Make a filename for a given trajectories
8573	Returns the next element in the chain .
8574	Merge all trajectories in a folder .
8575	Handle a SIGINT signal .
8576	Load config from a JSON file .
8577	Request ECobee PIN code .
8578	Request tokens from ECobee .
8579	Refreshes the access token .
8580	Get thermostat data from Ecobee
8581	Write the tokens to the config file .
8582	Set the HVAC mode for a thermostat .
8583	Set fan minimum on time .
8584	Set hold temperature for a thermostat .
8585	Set the hold of a thermostat at the specified index .
8586	Delete a vacation
8587	Resume a thermostat at the specified index .
8588	Send a message to a thermostat .
8589	Set the humidity level of a thermostat .
8590	Generate a random delay for SELECTING .
8591	Generate a random timeout for a given number of attempts .
8592	Generate a timeout for a renew request .
8593	Generate a random renewing time .
8594	Returns a dictionary of all FSM attributes .
8595	Reset DHCPCAP attributes .
8596	Get the timeout function for a given state and function .
8597	Set a new timeout for a given state and function .
8598	Send a discover packet .
8599	Select an offer .
8600	Sends a DHCPPREQUEST packet to the FSM .
8601	Set the timeouts for the lease .
8602	Process a DHCPACK packet .
8603	Process a DHCPNAK packet .
8604	Set the state to INIT .
8605	Change the state of the client to BOUND .
8606	RENEWING state .
8607	Set the state to REBINDING .
8608	End the lease .
8609	Set the state to ERROR .
8610	Timeout waiting for a response to select .
8611	Timeout waiting for a response to a request .
8612	Timeout waiting for a request to be renewed .
8613	Timeout waiting for a response to a request .
8614	Receive an OFFER .
8615	Handle an ACK request .
8616	Handle a NAK request .
8617	Handle a RENEWING ACK .
8618	Handle a NAK RENEWING state .
8619	Handle a REBINDING packet .
8620	Handle a NAK rebinding .
8621	Called when the lease is renewed .
8622	Set the value of a query string .
8623	Add a query parameter to the query string .
8624	Removes a query parameter from the query string .
8625	Get the status of a Supervisor server .
8626	Create a dictionary of output templates .
8627	Command line entry point .
8628	Validate a message .
8629	Read a Tdms file and return a list of channel names and data .
8630	Add a deformation to a list of chn names .
8631	Convert tdms file to FCS file .
8632	Returns True if the diff is equal to the given directory .
8633	Create a new patch .
8634	Delete the next patch .
8635	Delete a patch from the database .
8636	Check if a file is already in a patch .
8637	Backup a file .
8638	Add a file to the database .
8639	Run the Quilt command .
8640	Create the directory if it does not exist .
8641	Copy this directory to another directory .
8642	Link this file to another file .
8643	Copy the file to the destination directory .
8644	Returns a Directory object for this file .
8645	Backup a file to dest_dir .
8646	Refresh the index for the given patch .
8647	Unapply a patch .
8648	Unapply the current top patch .
8649	Unapply all applied patches .
8650	Apply a patch to the series .
8651	Applies the next patch to the series .
8652	Apply all patches .
8653	Read the series file .
8654	Save the series to a file .
8655	Add a patch to the list of lines .
8656	Insert patches into self . patchlines .
8657	Add patches to the list of patches .
8658	Remove a patch .
8659	Returns a list of patches after the given patch .
8660	Returns a list of patches before the given patch .
8661	Return a list of patches until the given patch .
8662	Replace old_patch with new_patch .
8663	Create the version file .
8664	Check that the quilt version is supported by python - quilt .
8665	Add this argument to the given parser .
8666	Add the arguments to the given parser .
8667	Add the parser to the subparsers .
8668	Set the arguments for the subparsers .
8669	Add the subparsers to the given parser .
8670	Check if a file is in a given patch .
8671	Check if file is modified by next patch .
8672	Revert a file .
8673	Import a quilt patch .
8674	Import a list of patches into the quilt patches directory .
8675	Add a way to the graph .
8676	Return a list of node ids that are not present in the graph .
8677	Add a node to the graph .
8678	Build a Route object from a relation .
8679	Create a long name for a route .
8680	Get the agency id for the given relation .
8681	Process the public transport relations .
8682	Add a relation to the model .
8683	Create dummy data .
8684	Patch a list of agencies .
8685	Create dummy stop times for a given trip .
8686	Write the buffer to a zip file .
8687	Write the unzipped data to a file .
8688	Build an Agency object from a relation .
8689	Extract stops from a relation .
8690	Build a shape from a relation and a list of ways .
8691	Returns a list of supported versions of the device .
8692	Send an APDU to the device .
8693	Authenticate with U2F .
8694	Send a finish enrollment request to U2F .
8695	Authenticate with U2F .
8696	Register with a list of U2F devices .
8697	Convert unicode strings to unicode strings .
8698	Wrap a function with an error decorator .
8699	Wraps all methods of a class with an error decorator .
8700	Returns True if filepath matches only blame patterns .
8701	Convert an email address to an email address .
8702	Get an entry from the tree .
8703	Convert markdown to reST .
8704	Start a flawless web server .
8705	Record an exception in the stack trace .
8706	Download an image from a URL .
8707	Convert a string to an Image object .
8708	Validate an image using a validator function .
8709	Check if image is big enough .
8710	Check if the image s width is big enough .
8711	Check if the height of the image is big enough .
8712	Returns a Category object for the given item .
8713	Parse the totals value from the given item .
8714	Get all items from the XML file .
8715	Add an error to the error list .
8716	Parse all items and save them to the database .
8717	Parse an item and return a dictionary of parsed data .
8718	Get an instance of the model based on the given data .
8719	Save an item to the database .
8720	Download a file from a URL .
8721	Load data from a file .
8722	Get items from the CSV file .
8723	Sets the allow_network_access flag .
8724	Run a docker command .
8725	Adds files to the container .
8726	Add a file to the working directory and rename it .
8727	Get all enrollments for a course .
8728	Get all enrollments for a given sis_id .
8729	Get all enrollments for a given section .
8730	Get all enrollments for a given SIS Section .
8731	Returns a list of CanvasEnrollments for a given regid .
8732	Enroll a user in a course .
8733	Get all roles in an account .
8734	Get a list of roles for a given SIS ID .
8735	Get the effective course roles in the given account .
8736	Get a role from an account .
8737	Get a role by account SIS ID .
8738	Get a course by id .
8739	Get a course by its SIS ID .
8740	Get courses in an account .
8741	Get courses in an account by its SIS ID .
8742	Get a list of courses published in an account .
8743	Get a list of courses published in a sis_account .
8744	Returns a list of courses for a given regid .
8745	Create a new course in an account .
8746	Update the SIS ID of a course .
8747	Get the activity for a given account and term .
8748	Get a list of grades for a given account and term .
8749	Get statistics for a particular account and term .
8750	Get activity by sis course id .
8751	Get assignments by sis_course_id .
8752	Get the student summaries for a particular sis course .
8753	Get the student activity for the given sis course and user id .
8754	Get the student messaging for the given sis course and user id .
8755	Get a list of external tools in an account .
8756	Get external tools in a course .
8757	Create an external tool .
8758	Update an external tool .
8759	Delete an external tool from a context .
8760	Check that all required parameters are set .
8761	Get user profile .
8762	Get users for a course .
8763	Get users for a given sis course ID .
8764	Create a user in an account .
8765	Get a list of user s logins .
8766	Update a user s login .
8767	Find the next page in the response .
8768	Get a resource from a URL .
8769	Get a paginated list of resources .
8770	Get a resource from a URL .
8771	Make a PUT request to a resource .
8772	Make a POST request to a resource .
8773	Delete a resource .
8774	Returns a list of CanvasAdmin objects for the specified account .
8775	Create an admin for a user .
8776	Create an admin by SIS Account ID .
8777	Delete an admin for a user .
8778	Delete an admin by SIS Account ID .
8779	Create a new grading standard for a course .
8780	Get a section by ID .
8781	Get a section by its sis_id .
8782	Get all sections in a course .
8783	Get a list of sections in a course .
8784	Get a list of all sections in a course .
8785	Get a list of sections with students in a course .
8786	Create a section in a course .
8787	Update a section .
8788	Get a list of quizzes for a course .
8789	Get an account by ID .
8790	Get a list of sub - accounts for a given account .
8791	Update an account .
8792	Update the SIS ID for an account .
8793	Get the authentication settings for an account .
8794	Update the authentication settings for an account .
8795	Get a term by its sis_term_id
8796	Import a CSV file into SIS .
8797	Import a directory into SIS .
8798	Get the status of a given SISImport .
8799	Build an import . zip file .
8800	Get all assignments for a course .
8801	Update an assignment .
8802	Get a list of available reports for a given account .
8803	Get a list of reports by type .
8804	Create a new report .
8805	Create course provisioning report .
8806	Create a SIS export report .
8807	Create an unused courses report .
8808	Get report data .
8809	Get the status of a report .
8810	Delete a report .
8811	Move all detections in a label .
8812	Flip detections .
8813	Get a dictionary from an object .
8814	Get the config from the settings .
8815	Return an empty string .
8816	Parse arguments and kwargs .
8817	Create metrics from a list of metric configurations .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics from a list of metric configs .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle the metrics request .
8824	Query Wolfram .
8825	Fixes http_client . HTTPMessage . get_content_type .
8826	Query the WolframAlpha API .
8827	Return a list of pods assumptions and warnings .
8828	Returns a list of all results .
8829	Encode the given data into JSON .
8830	Make a request to the API .
8831	Perform a GET request .
8832	Perform an HTTP DELETE request .
8833	Perform an HTTP PUT request .
8834	Send a POST request to a URL .
8835	Process a disambiguation query .
8836	Group sentences into groups of total_nb_sentences .
8837	Disambiguate a PDF file .
8838	Disambiguate a query .
8839	Segment the given text .
8840	Get the language for the given text .
8841	Get a single concept by ID .
8842	Fit the ensemble to the given features and classes .
8843	Compute the accuracy of the model .
8844	Fit the MDR to the given features and class labels .
8845	Fit the model and predict the model .
8846	Compute the accuracy of the model .
8847	Fit the model to the given features and targets .
8848	Transform a list of features into a single feature .
8849	Calculate the score of the MDR model .
8850	Compute MDR from X and Y .
8851	Generate n way models .
8852	Plot the MDR grid .
8853	Returns a dict of all config items that start with the given prefix .
8854	Get the value of a configuration key .
8855	Create a vector from a list of members .
8856	Create a vector from a list of members .
8857	Evaluate a file and return the last result .
8858	Evaluate the given stream and return the last result .
8859	Evaluate a string and return the last result .
8860	Bootstrap a REPL module .
8861	Run the compiler .
8862	Create a multi - function from a dispatch function .
8863	Add a method to a map .
8864	Add a method to the MultiFunction .
8865	Get the method for the given key .
8866	Remove a method from a map .
8867	Remove the method with the given key .
8868	Returns True if v is a macro .
8869	Locate the line and column of a LispForm .
8870	Decorate a parse function with the location of the form .
8871	Raise an exception if there is no recur .
8872	Assert that the current node is the tail of the current node .
8873	Resolve a bare symbol .
8874	Resolve a symbol .
8875	Parse the AST and return the root node .
8876	Whether to warn on shadowed variable .
8877	Put a new symbol in the symbol table .
8878	Return a string representation of a list of entries .
8879	Return a string representation of a sequence .
8880	Return a string representation of a LispObject .
8881	Return a string representation of the given object .
8882	Fix missing locations .
8883	Compile and execute a form .
8884	Compile a Python module .
8885	Compile a list of reader forms into a Python module .
8886	Compile bytecode .
8887	Convert an iterable into a sequence .
8888	Munge a string .
8889	Remove underscores and dashes from a string .
8890	Create a fraction .
8891	Get a logging handler .
8892	Create a map from a mapping of key - value pairs .
8893	Split a collection into n elements .
8894	Decorate a function with a line and column mapping .
8895	Read a namespaced name .
8896	Read a collection from the reader .
8897	Read a list from the reader .
8898	Read a vector from the reader .
8899	Read a set .
8900	Read a map literal .
8901	Read a string from the reader .
8902	Read a Gensym .
8903	Read a keyword .
8904	Read and return a meta object .
8905	Read function body .
8906	Read a quoted string .
8907	Expands a syntax quote form .
8908	Process a syntax - quoted form .
8909	Read a syntax - quoted form .
8910	Read an unquoted form .
8911	Read a derivation form .
8912	Read a single character .
8913	Read a regex from a string .
8914	Read a reader macro .
8915	Read the next consuming comment .
8916	Read the next token .
8917	Read an expression from a stream .
8918	Read data from a string .
8919	Read data from a file .
8920	Update the location of the current line .
8921	Remove the last item from the stack .
8922	Read the next token from the stream .
8923	Generate a Basilisp bytecode .
8924	Extract bytecode from the bytecode cache .
8925	Return the path to a cache file .
8926	Add BasilispImporter to sys . meta_path .
8927	Find a Basilisp module in the given path .
8928	Execute a cached Basilisp module .
8929	Execute a Basilisp module .
8930	Execute a Basilisp module .
8931	Create a new symbol .
8932	Returns a list of keywords that match the text .
8933	Get or create a Keyword object .
8934	Get a keyword by name and namespace .
8935	Given a list of GeneratedPyASTs return a tuple of dependencies and nodes .
8936	Load an attribute from a string .
8937	A simple AST generator .
8938	Return an AST for a collection of ASTs .
8939	Set the lineno and col offset of the PyAST .
8940	Decorate a function to return a GeneratedPyAST .
8941	Decorate a function to return a GeneratedPyAST .
8942	Returns True if v is a dynamic variable .
8943	Returns True if v is a redef .
8944	Convert an ast . AST into an ast . Expr .
8945	Create an ast . FunctionDef from a GeneratedPyAST .
8946	Check if a symbol should be warned on redefinition .
8947	Convert a Do node into a Python AST .
8948	Generate a function name from a string .
8949	Convert function arguments to ast . AST .
8950	Convert a single - arity function to a Python AST .
8951	Convert a multi - arity function to a Python AST .
8952	Convert a Fn node to a Python AST .
8953	Convert an if - body node into a Python AST .
8954	Convert an If node into a Python AST .
8955	Convert Invoke node to Python AST .
8956	Convert a Quote node to a Python AST .
8957	Convert a Recur node to a Python AST .
8958	Convert a Recur node to a Python AST .
8959	Convert a SetBang node into a Python AST .
8960	Convert a Throw node to a Python AST .
8961	Convert a Try node into a Python AST .
8962	Convert a local symbol to a Python AST .
8963	Return an ast . Attribute node for finding a variable in the given namespace .
8964	Convert a VarRef to a PyAST .
8965	Convert a HostField to a Python AST .
8966	Convert a MaybeClass to a Python AST .
8967	Convert a MaybeHostForm node into a Python AST .
8968	Convert a constant value form into a Python AST .
8969	Convert a collection literal form into a Python AST .
8970	Generate a Python AST from a Lisp AST .
8971	A generator that yields all module imports .
8972	Returns an ast . ImportFrom node .
8973	Return an ast . Assign node for a namespace variable .
8974	Return a new set from the given members .
8975	Return a new set with the given members .
8976	Return an ast . ExceptHandler node .
8977	Check if expression is constant .
8978	Return an ast . FunctionDef node .
8979	Return an ast . While node .
8980	Return an ast . Try node .
8981	Create a new module .
8982	Returns the first element of the sequence or None if the sequence is not a sequence .
8983	Returns the rest of the sequence o or None .
8984	Returns the nth element of a collection .
8985	Returns the nth element of the collection or None if the collection is empty .
8986	Constrains a sequence of items into a list .
8987	Convert an object to a sequence .
8988	Concatenate sequences together .
8989	Associate a map with a list of key - value pairs .
8990	Conjugate of a collection .
8991	Decorate a function to be used as a partial function .
8992	Dereference an object .
8993	Returns True if v1 is equal to v2 .
8994	Divide two numbers .
8995	Sort a collection by a function .
8996	Returns True if coll contains the key k .
8997	Get the value of a key .
8998	Convert an object to a Lisp object .
8999	Convert an object to a Python object .
9000	Return a string representation of the given object .
9001	Collect arguments into a list of tuples .
9002	Decorator for trampoline functions .
9003	Decorator to add attributes to a function .
9004	Decorate a function with a meta map .
9005	Decorator to mark a function as _basilisp_fn .
9006	Resolve an alias for a symbol .
9007	Resolve a symbol s variable name .
9008	Add a generated python to the current namespace .
9009	Bootstrap a dynamic variable .
9010	Intern a variable .
9011	Intern an unbound variable .
9012	Find a variable in a namespace .
9013	Find a variable in a namespace .
9014	Find a variable by its fully qualified name .
9015	Add a default import to GATED_IMPORTS
9016	Add an alias to a namespace .
9017	Return the interned version of the given symbol .
9018	Intern a symbol .
9019	Find the variable for the given symbol .
9020	Add an import symbol to the module .
9021	Get the import module for the given symbol .
9022	Add a reference to a symbol .
9023	Get the reference variable for the given symbol .
9024	Refer to all the symbols in other_ns_interns .
9025	Refer to other_ns .
9026	Get or create a new namespace .
9027	Get or create a namespace by name .
9028	Get a namespace by name .
9029	Remove a namespace from the namespace map .
9030	Returns a completion matcher that matches the given text .
9031	Returns a list of aliases that match the given prefix .
9032	Returns a list of imports and aliases that match the prefix .
9033	Returns a list of all interns that match the given value .
9034	Returns a list of all references that match the given value .
9035	Completes the given text .
9036	Returns the arguments of the function .
9037	Return a list of members .
9038	Create a list with the given members .
9039	Create a new representer that changes the style of a scalar .
9040	Decrypts a JWT .
9041	Encrypt a JSON string using the given key store .
9042	Delete an item from the cache .
9043	Return a tuple with the selector comparison and argument .
9044	Close the stream .
9045	Parse a fiql string into an Expression .
9046	Dump a model to a file - like object .
9047	Decode date values .
9048	Decode a date string into a datetime object .
9049	Decode a date from a string .
9050	Return the default value for the given object .
9051	Validate the version of leicacam
9052	Generate a changelog for the given version .
9053	Return a list of strongly connected components .
9054	Return a robust topological sort of a graph .
9055	Set the parent of this object .
9056	Get the parent expression .
9057	Add an operator to the expression .
9058	Adds an element to the current working fragment .
9059	Add an AND operator to the expression .
9060	Create an OR expression .
9061	Decorate a function with a debug level .
9062	Parse a receive message .
9063	Convert a list of tuples into a dict .
9064	Check if a message matches a given command .
9065	Prepare the send message .
9066	Flush incomming socket messages .
9067	Enable a slide .
9068	Save leicacam template to file .
9069	Load a leicacam template .
9070	Get information about the device .
9071	r Increase the number of lines in a file .
9072	Locate the package . json file .
9073	Parse the package . json file .
9074	Handle an API error with JSON data .
9075	Validate Yourls API response .
9076	Homogenize two waves .
9077	Interpolate the indep_vector of the wave .
9078	Get the indep vector between two wavesets .
9079	Verify that two waveforms are compatible .
9080	Load the systemjs manifest .
9081	Return a tuple of parameters for the given module .
9082	Run a trace of a module .
9083	Shorten a URL .
9084	Expand a short URL .
9085	Get the URL stats for a given short url .
9086	Get statistics for the current user .
9087	Get the current database stats .
9088	r Print a command to the terminal .
9089	Executes a command and writes the output to a file pointer .
9090	Log a message to stdout .
9091	A property decorator that caches the result of the given method .
9092	Iterate over chunks of iterable .
9093	Decorator for chunk processing .
9094	Flatten an iterable .
9095	Set up a signal handler for Ctrl - C .
9096	Print a tab - delimited table .
9097	Create a dummy class .
9098	Create a new instance from a human - readable string .
9099	Create a YOURLS client .
9100	Trace the wave_core module .
9101	Add links to requirements . json .
9102	Add a common entry to plist .
9103	Create a multi entry for each Python version .
9104	Convert comparison operators to words .
9105	Generate chunks of noise data .
9106	Parse a chunk of data .
9107	r Write touchstone data to file .
9108	Given a waveform and an indep_min and an indep_max return the bound indep_vector .
9109	Return a string representation of indep_units and dep_units .
9110	Return a copy of the wave with the given desc and units .
9111	Calculate the running area of a triangulation .
9112	Validate indep_min and indep_max arguments .
9113	r Calculate the acos of a wave .
9114	r Calculate the acosh of a waveset .
9115	r Calculate the angle in radians of a waveset .
9116	r Calculate the angle of the Hermite wave .
9117	r Average a waveform .
9118	r Convert a wave to a dB wave .
9119	r Calculate the derivative of a wave .
9120	r Returns the imaginary part of the FFT .
9121	r Calculates the absolute Fourier Transform of a wave .
9122	r Fourier Transform
9123	r Fourier Transform .
9124	r Computes the Fourier Transform for the given wave .
9125	r Calculate the imaginary part of the Fourier Transform .
9126	r Calculate the absolute Fourier Transform of a wave .
9127	r Return the phase of the ifft phase .
9128	r Return the real value of the Fourier Transform .
9129	r Return an integral waveform .
9130	r Calculate the group delay for the given wave .
9131	r Computes the logarithm of a wave .
9132	r Calculate the naverage of a wave .
9133	r Calculate the n - integral of a waveform .
9134	r Return the maximum value of a waveform .
9135	r Calculate the minimum value of a waveform .
9136	r Return the phase of the wave .
9137	r Converts a complex wave to an integer .
9138	r Calculate the square root of a waveset .
9139	r Create a subwave from a waveform .
9140	r Return a copy of a complex wave .
9141	r Convert a complex wave to a float .
9142	r Convert a complex wave to an integer .
9143	r Return the value of the wvalue of the wave .
9144	Return a list of files that match the given path .
9145	Get a short description from a long description .
9146	Builds an expression from a list of tokens .
9147	Remove the next delimiter from the list .
9148	Get a list of functions from an expression .
9149	Returns a list of tuples where each tuple is a tuple of tuples where each tuple is the left and the second tuple is the right and the second is the right .
9150	Parse an expression .
9151	Remove consecutive delimiters from an expression .
9152	Split text into count joints .
9153	Convert a number to an eng_tuple .
9154	r Converts a number to a scientific representation .
9155	r Return a peng representation of a number .
9156	r Convert a string to a float .
9157	r Return the peng fraction of a string .
9158	r Return the peng mant of a string .
9159	r Return an EngPower object from a string .
9160	r Return the peng_suffix_math corresponding to the given suffix .
9161	r Remove extra delimiters from an expression .
9162	Convert a number to a scientific string .
9163	Convert a number to a scientific representation .
9164	Find a sourcemap comment in a file .
9165	Check if the app needs an extension .
9166	Run the JSPM bundle .
9167	Call trace - deps . js for the given app .
9168	Returns True if the hashes of the dependencies are the same .
9169	Format a hexdump string .
9170	Parse a docstring and return a dict of parameters and returns .
9171	Return a list of all valid identifiers .
9172	Helper function for deferred add actions .
9173	Split a line into parts .
9174	Check to see if we need to initialize a context .
9175	Return help text for built - in functions .
9176	Find a function in the given context .
9177	List all functions in a directory .
9178	Check if the argument is a flag .
9179	Process command line arguments .
9180	Extract the value of an argument .
9181	Invoke a single function .
9182	Invoke a single line of text .
9183	Invoke a method on a string .
9184	Parse a parameter from a docstring .
9185	Parse a return line .
9186	Return the class name of the given section .
9187	Classify a single line .
9188	Join a list of lines into paragraphs .
9189	Wrap the maindoc in a string and format it .
9190	Convert a value to a given type .
9191	Convert a binary value to the specified type .
9192	Get the size of a given type .
9193	Formats the given value according to the given type .
9194	Validate that a type object is valid .
9195	Check if the given type name is known .
9196	Split a complex type into its base and sub - types .
9197	Instantiate a complex type from a list of subtypes .
9198	Get a type by name .
9199	Check if the given type is a known format .
9200	Inject a type into the registry .
9201	Load types from a module .
9202	Returns True if pos_args and kw_args are filled .
9203	Add a parameter to the annotation .
9204	Create a typed return value .
9205	Create a custom return value .
9206	Match a short - name to a full parameter name .
9207	Returns the type of the parameter with the given name .
9208	Return the signature of the function .
9209	Format the return value .
9210	Convert a positional argument .
9211	Check that the spec is valid .
9212	Convert an argument to a type .
9213	Format the message .
9214	Return a dict representation of the exception .
9215	Check and execute a function .
9216	Parse a list of validators .
9217	Find all objects in the given container .
9218	Create a context from a module .
9219	Get the help text for a function .
9220	Decorator to register a function as a parameter .
9221	Decorator to annotate a function as a return value .
9222	Decorator to annotate a function as a return type .
9223	Decorator to mark a class as a context .
9224	Decorate a function with docannotation .
9225	Decorate a function s metadata .
9226	Return the short description of a function .
9227	Load all commands .
9228	Installs all tasks in the registry .
9229	Print all tasks in the registry .
9230	Uninstall the Kronos bread crumb .
9231	Create a new resource from a URI .
9232	Load project configs from a directory .
9233	Save projects config to file .
9234	Define a singleton for a carrier .
9235	Get all projects that depend on this project .
9236	Decorate a function to post - process the result of the command .
9237	Initialize a project .
9238	Set the value of a key to a value .
9239	Set the value of an attribute .
9240	Create a Lens instance from an iterable .
9241	Set the value of the optic .
9242	Decorator for setting many values .
9243	Returns a function that will be applied to the state .
9244	Returns a function that returns n arguments .
9245	Call the function f with the state of the lens .
9246	Apply a function to the state .
9247	View the Fold .
9248	Convert a Fold to a list of Consts .
9249	Apply a function over the set .
9250	Set the state to the given value .
9251	Iterate over an iterable .
9252	Return the kind of optics .
9253	Main loop for the game .
9254	Return a new vector that is step towards the other vector .
9255	Handle a single input .
9256	Advance the robot s crashes .
9257	End the game .
9258	Move the player .
9259	Play a game of naughts and crosses against the computer .
9260	Make a move in the board .
9261	The winner of this board if one exists .
9262	Returns a generator over the potential wins .
9263	Add a new item to the list of items .
9264	Open a new spider .
9265	Upload a chunk to S3 .
9266	Create a file - like object .
9267	Get the state of an account .
9268	Get the state of an asset .
9269	Get a block by its hash .
9270	Get the hash of a block .
9271	Get the system fee of a block .
9272	Get the state of a contract .
9273	Get a raw transaction by its hash .
9274	Get the storage value for a given script hash and key .
9275	Get a single transaction out .
9276	Invoke a JSON - RPC script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Perform a JSON RPC call .
9282	Check if a string is a hash256 string .
9283	Check if a string is a hash160 .
9284	Encode invocation parameters .
9285	Decode invocation result .
9286	Decorator for first_kwonly_arg .
9287	Return a new DTTM with the given instruction applied to the given timezone .
9288	Applies the unit to the given dttm and returns the result in the given timezone .
9289	Save the template to a file .
9290	Render the Barcode .
9291	Calculate the checksum of the EAN .
9292	Render the code .
9293	Connect to the KVS server .
9294	Main entry point .
9295	Download a file from S3 .
9296	Upload a file to S3 .
9297	Downsync an S3 config file .
9298	Get the diff of a config section .
9299	Parse an environment variable .
9300	Set the username and password .
9301	Set the API key .
9302	Get JSON content from a folder .
9303	Returns a dictionary of all schemas in JSON_PATH
9304	Get the schema for this model .
9305	Returns a jsonschema . RefResolver .
9306	Validate the given object against the schema .
9307	Returns a list of valid examples .
9308	Returns a list of invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh refresh access_token .
9312	Returns id of a OneDrive user .
9313	Get OneDrive object representing list of objects in a folder .
9314	Create a new folder .
9315	Add comment message to a specified object .
9316	Convert dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag & drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and then displays it
9324	Get the value of a tag parameter .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components one pixel at a time
9331	delete all of the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update
9334	When dealing with a Top - Level window position it absolute lower - right
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated wit the wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the item from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item an empty string if none
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	called when adding a control to the window
9349	Re - parent a child control with the new wx_obj parent
9350	make several copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all modules in a directory .
9354	Return a list of children sub - components that are column headings
9355	Update the grid if rows and columns have been added or deleted
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	col -> sort the data based on the column indexed by col
9359	Remove all rows and reset internal structures
9360	Called to create the control must derive from wxControl .
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell . Returns True the changed
9363	Return True to allow the given key to start editing
9364	This will be called to let the editor do something with the first key
9365	Create a metaclass for a form tag type .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable all top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Sets the attributes of an object based on the given tag .
9373	Replace spaces with \ u00a0
9374	Get the documenter for the given object .
9375	Mangle a signature .
9376	Import a module by its name .
9377	Create an autolink role .
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string None or cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Set a wx . Icon
9386	Display the window optionally disabling all other windows
9387	Open read and eval the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	translate gui2py attribute name from pythoncard legacy code
9393	Write content to the clipboard data can either a string or a bitmap
9394	Find autosummary in the docstring of a module .
9395	Add the object and all their childs
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Convert a HyperlinkedSorlImage to a URL .
9401	Decorator to register an expression filter .
9402	Register a function as a node filter .
9403	Assert that the current document matches the given path .
9404	Assert that there is no current path at the given path .
9405	Check if the current path matches the given path .
9406	Returns True if path has no current path .
9407	Select the selected option .
9408	Apply the filter to the expression .
9409	Returns a webdriver object for the given browser name .
9410	Return the XPath representation of the expression .
9411	Returns True if the node matches the filter .
9412	Switch to a frame element .
9413	Accept an alert .
9414	Accept a confirmation dialog .
9415	Dismiss the confirm dialog .
9416	Accept a modal prompt .
9417	Dismisses the prompt .
9418	Save the page body to a file .
9419	Save a screenshot to a PNG file .
9420	Raise the server error .
9421	Check if the given value matches the filter .
9422	Returns whether the element identified by locator is checked .
9423	Checks if the element identified by locator is not checked .
9424	Checks if the element identified by locator is unchecked .
9425	Returns True if the element identified by locator is not checked .
9426	Assert that the given text matches the given options .
9427	Assert that there is no text in the query .
9428	Assert that the subject is a title .
9429	Raise an ExpectationNotMet exception if there is no title with the given title .
9430	Returns True if the message has the given title .
9431	Returns True if there is no title .
9432	Find all objects matching the given criteria .
9433	Find the first item in the collection .
9434	Return the inner content of the given node .
9435	Return the inner text of the given node .
9436	Normalize a URL .
9437	Decorate a function as a setter .
9438	Decorator to synchronize a function .
9439	Returns True if the given error should be caught .
9440	Compare the number of results .
9441	Return True if the result iterator is at least size .
9442	Returns True if options contains None values .
9443	Return an error message for a failure .
9444	Check if the given count matches the given options .
9445	Normalize text .
9446	Normalize whitespace .
9447	Convert a string to a regular expression .
9448	Returns True if the current URL matches the expected path .
9449	Resize the window .
9450	Start the WSGI server .
9451	Set the getter function .
9452	Set the instance method .
9453	Set the class method to use .
9454	Return the traceback as a string .
9455	Return a string representation of an object .
9456	Get the logger for the given instance .
9457	Set the logger to use .
9458	Send a request to the API .
9459	List channels .
9460	Returns a list of users .
9461	Create a message .
9462	Translate a slack message .
9463	Send a Slack message .
9464	Read messages from a channel .
9465	Run the Slack API .
9466	Run the slack client .
9467	Return the differences between two dictionaries .
9468	Format a message with a given color .
9469	Called when a task is started .
9470	Print the result of the runner .
9471	Print stats on each host .
9472	Called when a task is skipped .
9473	Convert a prefix to an addressmask .
9474	Check that a value is not empty .
9475	Add a model to the document .
9476	Get all elements in the collection .
9477	Load model attributes from a dictionary .
9478	Convert the dictionary to a dictionary .
9479	Parse config elements .
9480	Parse the state of the device .
9481	Translate the config to a string .
9482	Load all JINJA filters .
9483	Find a yang file .
9484	Convert a Yang model to a dictionary .
9485	Return a diff between two objects .
9486	Perform an HTTP POST request .
9487	Get authorization code URI .
9488	Get a new access token .
9489	Return a dictionary of query parameters from a URL .
9490	Remove query string from a URL .
9491	Build a URL from a base URL .
9492	Handle an exception .
9493	Create a Response object .
9494	Create a redirect error response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Get a refresh token from a refresh token .
9498	Get a token from an authorization code .
9499	Get authorization code from a URI .
9500	Get a token from the POST data .
9501	Returns an authorization object from the authorization header .
9502	Open the i2c device .
9503	Read a single byte from the bus at the specified address .
9504	Read a number of bytes from a device .
9505	Read a byte from an I2C bus .
9506	Write bytes to the device at the specified address .
9507	Write a byte to a device .
9508	Write data to the i2c bus .
9509	Return the CDN URL .
9510	Create a copy of this object .
9511	Create a local copy .
9512	Create a remote copy .
9513	Construct a File instance from a file_info dict .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Returns a list of CDN URLs for each file in the group .
9518	Construct a group from a group_info dict .
9519	Create a new upload group .
9520	Perform a base operation on the storage .
9521	A generator over the UUIDs of all files in the sequence .
9522	Helper function to create a list of items .
9523	Print a bar of the given number of parts .
9524	Perform an upload request .
9525	Get home mode status .
9526	List all cameras .
9527	Get information about a list of cameras .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get motion settings for a camera event .
9531	Save a camera parameter .
9532	Update the motion settings .
9533	Check if li is the last li in meta_data .
9534	Get data for a single list node .
9535	Get the iLV value from the XML element li .
9536	Get the vMerge element .
9537	Get the number of grid spans .
9538	Get the td at the given index .
9539	Return True if style is false .
9540	Returns True if r is a bold style .
9541	Returns True if r is an italics element .
9542	Returns True if r is underlined .
9543	Returns True if p is a title .
9544	Get text run content data .
9545	Get relationship info from a media tree .
9546	Get document data from a file .
9547	Get ordered list type .
9548	Builds a list of lists .
9549	Builds a tr element from a tr element .
9550	Build a table element from a table .
9551	Get the content of a tag .
9552	Removes a tag from the tree .
9553	Find a dataset from a URL .
9554	Load MNIST data .
9555	Load CIFAR - 10 . tar . gz file .
9556	Plot an array of images .
9557	Plot a list of weights .
9558	Plot a grayscale or rgb filter .
9559	Generates a random batch of arrays .
9560	Encode text using the forward index .
9561	Create a batch of classifier inputs and outputs .
9562	Predict a sequence of labels .
9563	Add convolution weights to the model .
9564	Encode x using feed - forward .
9565	Decode z using theano .
9566	Find the output name for a given layer .
9567	Return the score of the autoencoder .
9568	Predict the output of the model .
9569	Predict the probability of x .
9570	Predict the logit .
9571	Calculate the score of the model .
9572	Create a batch of features and labels for each sequence .
9573	Create a sample of batches from the dataset .
9574	Load a network from a file .
9575	Generates a random matrix from rows and cols .
9576	Returns a random vector of size .
9577	Iterate over outputs matching a list of patterns .
9578	Given a list of layers and a list of patterns return the names of the params that match the patterns .
9579	Create a BernoulliDropout instance from kwargs .
9580	Returns a list of variables .
9581	Calculate the accuracy of the prediction .
9582	Run the theano scan .
9583	Build an activation .
9584	Reservoir a list of numbers .
9585	Add a loss to the model .
9586	Iterate over training data .
9587	Train the model .
9588	Returns a hash of the layers losses and regularizers
9589	Build the computation graph .
9590	A list of input layers .
9591	Returns a list of all variables in the loss .
9592	Find a layer by name and param .
9593	Run the feed - forward function .
9594	Predict the output of the model .
9595	Calculate the score of the model .
9596	Save the model to a file .
9597	Load a model from a file - like object .
9598	Calculate the loss of the model .
9599	Build a graph of updates .
9600	The output size of the layer .
9601	Connect the graph to the inputs .
9602	Bind the model to the graph .
9603	Resolve input shapes .
9604	Resolve the output shapes for this layer .
9605	Log the current state of the layer .
9606	Log the number of parameters .
9607	Format the name of the object into a string .
9608	Resolve a shape name from a list of layers .
9609	Find the parameter with the given key .
9610	Add a bias to the model .
9611	Return a dict representation of the form .
9612	Calculate the loggabor distribution .
9613	Calculate the loggabor image .
9614	Add a new tier .
9615	Remove a tier by its name .
9616	Get the tier with the given name .
9617	Create an EAF object from this TierSet .
9618	Add a point to the list of intervals .
9619	Add an interval to the list of intervals
9620	Remove an interval from this tier .
9621	Remove a point from the text tier .
9622	Get a list of intervals .
9623	Returns a list of all intervals .
9624	Indent an element .
9625	Add an annotation to a tier .
9626	Add a controlled vocabulary entry .
9627	Add a description to a controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a new lexicon reference .
9631	Add a linguistic type .
9632	Add a link to a media file .
9633	Add a locale .
9634	Add a secondary linked file .
9635	Add a new tier .
9636	Remove all time slots from self . timeslots .
9637	Extract annotations from the EAF file .
9638	Generate an annotation id .
9639	Generate a timestamp .
9640	Get all child tiers for a given id_tier .
9641	Get the full time interval .
9642	Get the ref annotation data after a given time .
9643	Get the ref annotation data before the given time .
9644	Returns a list of tier ids for a given linguistic type .
9645	Merge a list of tiers into one tier .
9646	Remove all annotations from a tier .
9647	Remove a description from a controlled vocabulary .
9648	Remove a license from the list .
9649	Remove linked files .
9650	Remove a property .
9651	Remove a reference annotation from the given tier .
9652	Remove secondary linked files .
9653	Remove a tier .
9654	Remove tiers from the list of tiers .
9655	Rename a tier .
9656	Shift the annotations by a given time .
9657	Command line interface for the algorithm .
9658	Display debug information for the storage
9659	Get the base level of the text .
9660	Get embedding levels from text .
9661	Explicitly embed characters based on the given storage .
9662	Calculate the level runs .
9663	Resolve weak types .
9664	Resolve neutral bidi types .
9665	Reverse a contiguous sequence of characters .
9666	Reorder resolved levels .
9667	Process the current file .
9668	Convert a list of lines into a list of lines .
9669	Add a new attribute to an object .
9670	Command line interface for Qt .
9671	Maintains backwards compatibility .
9672	Show MayaWindow .
9673	Return the first gui registered with pyblish .
9674	Deregister a host from pyblish .
9675	Add a file to the filemenu
9676	A context manager for maintaining a selection .
9677	A context manager for maintaining the current time .
9678	Show a messagebox with no registered guis .
9679	Set up types .
9680	Get the cumulative sum of the data .
9681	Get the values for a single axis .
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters necessary to transform x & y coordinates
9684	Reverse mapping .
9685	Returns a range of floats .
9686	Add a data descriptor to the data .
9687	Add svg definitions
9688	Add data to the list .
9689	Burn the graph .
9690	Calculate the left margin .
9691	Calculate right margin .
9692	Calculate the top margin of the graph
9693	Add a popup .
9694	Calculate bottom margin .
9695	Draw the graph .
9696	Create a text element for a datapoint .
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X - axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard - code the styles into the SVG XML if style sheets are not used .
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Send a message to a channel or nick .
9709	Return a list of patterns that can be used to dispatch messages .
9710	Create a new nick .
9711	Handle a PING message .
9712	Called when a server is registered .
9713	Start the event loop .
9714	Register with boss .
9715	Run the task queue .
9716	Returns a callback that will be called when a channel is boss .
9717	Return a list of command patterns .
9718	Called when the client is listening and the client is listening .
9719	Execute a command on a worker .
9720	Add a nick to the queue .
9721	Sends a validation notification to the current site .
9722	Send a password reset notification .
9723	Validate password strength .
9724	Verify that the token is valid .
9725	Delete the user s avatar .
9726	Check if the request is a POST request .
9727	Returns a ThreadPoolExecutor instance .
9728	Return a docker . APIClient instance .
9729	Return the TLS client certificate and key .
9730	The name of the service .
9731	Wrapper around docker . client . method .
9732	Submit a docker call .
9733	Poll for tasks in a Docker service
9734	Stop a Docker service .
9735	Filter the queryset based on the value .
9736	Update a user s password .
9737	Update the password of an instance .
9738	Validates that the given email address is valid .
9739	Create a new token .
9740	Delete a token .
9741	Check if the user is logged in and if not raise PermissionDenied .
9742	Send a confirmation email to the user .
9743	Update the expiry of the object .
9744	Context for the password reset email .
9745	Sends an email to the user s email .
9746	The password reset email handler .
9747	This function is called when a notification is sent to a validation email .
9748	Returns a tuple of user and auth token .
9749	Check if the token has expired and update the expiry time .
9750	Show a notebook .
9751	Process hv plots .
9752	Returns a CustomJS object for the given change .
9753	Returns a widget for the given param_name .
9754	Returns the current state of an object .
9755	Create a TextInput widget .
9756	Return a list of named objects .
9757	Get the owner of the given method .
9758	Assign auth values .
9759	Ping the server .
9760	Retrieve information about the server .
9761	Returns the health of the cluster .
9762	Convert a number of bytes to a human readable string .
9763	Total CPU load .
9764	Return the size of the memory in bytes .
9765	Get the total number of transactions in the network .
9766	Returns a list of volume ids .
9767	Returns the volume with the given id
9768	Get the total size of a volume .
9769	Returns the percentage of used volumes .
9770	Returns the average disk temperature of a volume .
9771	Get the maximum disk temperature for a volume .
9772	Get a disk by its ID .
9773	Login to the server .
9774	Perform a GET request to the given URL .
9775	Execute a GET request .
9776	Update the entry .
9777	Returns a SynoUtilization object .
9778	Returns a SynoStorage object .
9779	Create a Context object for the given request .
9780	Get the tenant token .
9781	Helper function for building an attribute dictionary .
9782	Override INSTALLED_APPS with a list of apps .
9783	Remove apps from INSTALLED_APPS .
9784	Get global settings .
9785	Handle a GET request .
9786	Get a value from the config file .
9787	Change the value of the given key .
9788	Migrate the old config file to a new one .
9789	Start the webserver .
9790	Wait for the server to return a response code .
9791	Get new access information from PRAW .
9792	Check if the token is present . If not request a new token .
9793	Set access credentials for Reddit .
9794	Refresh the access token .
9795	Create the manifest table .
9796	Split a full S3 path into bucket and prefix .
9797	Check if a prefix is a glacier bucket .
9798	Extract the run_id from a key .
9799	Remove None values from a dictionary .
9800	Add a run to the manifest .
9801	Check if run_id is in manifest .
9802	Extract the schema from a URI .
9803	Convert a schema to a human - readable name .
9804	Parse contexts and return a list of tuples .
9805	Parse an unstructured event into a list of tuples .
9806	Transform a line of text into a good event .
9807	Return a JSON - ready representation of a good event .
9808	Get the name of the template used by the response .
9809	Format a list of contexts into HTML .
9810	Print a list of variables .
9811	Format a SQL string into HTML .
9812	Format a Django context object as HTML .
9813	Format a dictionary as HTML .
9814	Returns a string that can be used to style the text .
9815	Format the given object .
9816	Format the given object to the given stream .
9817	Get a token from a string .
9818	Get LaTeX nodes from a string .
9819	Convert LaTeX to text .
9820	Set the tex input directory .
9821	Read a file from the input directory .
9822	Convert a LaTeX string to text .
9823	u Convert a UTF - 8 string into LaTeX .
9824	Convert an ASCII string to UTF - 8 .
9825	Gets the organisation information .
9826	Returns a list of boards .
9827	Returns a list of members .
9828	Update an organisation .
9829	Removes a member from the group .
9830	Add a member to the group .
9831	Add a member to the group .
9832	Get information about the list .
9833	Add a card to the account .
9834	Get label information .
9835	Returns a list of check items .
9836	Update the label name .
9837	Update the label dict .
9838	Get the authorisation URL for the given application .
9839	Get card information .
9840	Get a board .
9841	Get a list .
9842	Returns a list of checklists .
9843	Add a comment to the user .
9844	Add an attachment to a file .
9845	Adds a new checklist to this account .
9846	Add a label from a dictionary .
9847	Add a label from a class .
9848	Add a member to the group .
9849	Get member information .
9850	Returns a list of cards .
9851	Returns a list of organisations .
9852	Create a new board .
9853	Decorator for singledispatch methods .
9854	Returns information about the board .
9855	Returns a list of lists .
9856	Returns a list of labels .
9857	Get a card by its ID .
9858	Returns a list of checklists .
9859	Get an organisation .
9860	Update a board .
9861	Create a new list .
9862	Adds a label to the user .
9863	Get checklist information .
9864	Get the card for this checklist .
9865	Returns a list of checklistitem objects .
9866	Update a checklist .
9867	Add a new item to check .
9868	Remove a check item .
9869	Update the name of the checklist .
9870	Update the state of the checklist item .
9871	Add authorisation to the query params .
9872	Raises an exception if the response is not 200 .
9873	Build the URL for the Trello API .
9874	Fetch a JSON response from a URI .
9875	Create an organisation .
9876	Create a new trolly board .
9877	Create a new label .
9878	Create a trolly . list . List from a JSON list .
9879	Create a trolly card .
9880	Create a new checklist .
9881	Create a member .
9882	Get an organisation .
9883	Get a board by id .
9884	Get a list by id .
9885	Get a card by id .
9886	Get a checklist .
9887	Get a member .
9888	Convert a URL to a domain .
9889	Convert text to raw text .
9890	Convert text to raw text .
9891	Convert text to raw text pairings .
9892	Set the password for a service and username .
9893	Split text with locations .
9894	Mark all occurrences of a regular expression as split .
9895	Mark the beginning and end of a regex as split .
9896	Run the command line tool .
9897	Create an AES cipher .
9898	Returns a list of AES modes .
9899	Return the priority of this instance .
9900	Check the encryption scheme .
9901	Called when a message is published .
9902	Make a unique ID .
9903	Connect to the MQTT server .
9904	Handle a CONNACK packet .
9905	Encodes a string to a byte string .
9906	Decode a string from a byte string .
9907	Encode a 16 - bit integer into a 2 - byte bytearray .
9908	Encode a length to a byte string .
9909	Decode a length from a byte string .
9910	Encode the header to a byte string .
9911	Encode the message .
9912	Decode the packet .
9913	Encode the response .
9914	Decode the packet .
9915	Decode the packet .
9916	Encode the message .
9917	Encode the message .
9918	Decode the packet .
9919	Encode the message .
9920	Encode the message .
9921	Decode the packet .
9922	Decode the message from a packet .
9923	Get the URL for the VK API .
9924	Make a request to the API .
9925	Refresh the list of blocks .
9926	Format the data according to the specified analytes .
9927	Fit the model to the given data .
9928	Fit a KMeans model .
9929	Fit a MeanShift to the given data .
9930	Fit the classifier to the data .
9931	Predict clusters for the given data .
9932	Map a set of clusters to an array of integers .
9933	Sort a cluster by the given sort_by
9934	Get a date string from a datetime object .
9935	Returns the total number of points in a dictionary .
9936	Get the total time span of the data .
9937	Generates a unit string from an array of numbers .
9938	Return a string representation of an element .
9939	Convert analyte to namemass .
9940	Convert an analyte name to mass name .
9941	Copy data from in_dir to out_dir .
9942	Enumerate a boolean array .
9943	Convert a list of tuples into a boolean array .
9944	Fast smoothing function .
9945	Fast gradient function .
9946	Find the indices of the minimum values in x .
9947	Cluster meanshift .
9948	Cluster KMeans .
9949	Cluster data using DBSCAN .
9950	Get a list of unique srms from a SRM file .
9951	Read latool config from disk .
9952	Read latools . cfg file and return a ConfigParser object .
9953	Print all LAtools configurations .
9954	Copy a SRM file to a directory .
9955	Create a configuration file .
9956	Change the default configuration .
9957	Exclude downholes from a filter .
9958	Given a filter and a threshold return a copy of the filter .
9959	Despike the signal .
9960	Plot the autocorrelation range .
9961	Create a set of indices for the time series .
9962	Calculate the ratio of all analytes .
9963	Calibrate a set of analytes .
9964	Sample the stats for the given analytes .
9965	Returns a dictionary of ablation times .
9966	Filter an analyte based on a threshold .
9967	Filter the gradient of an analyte based on a threshold .
9968	Calculate the correlation between two analytes .
9969	Filter a set of correlations .
9970	Add a new filter to the filter list .
9971	Return a dictionary of parameters for the filter .
9972	Plot a histogram of the data .
9973	Return a DataFrame of summary stats .
9974	Load reference data from Google spreadsheets .
9975	Lookup a type in the registry .
9976	Returns a DataFrame of elements with atomic weight .
9977	Calculate the atomic weight of a molecule .
9978	Generate a tuple of ANSI sequences .
9979	Given a predicate and a stack return an annihilated tuple .
9980	Dedupe a stack .
9981	Calculate Gauss - Weighted Statistics .
9982	Gauss - Leibler .
9983	Return the standard deviation of an array .
9984	Get a subset of samples .
9985	Despike the data .
9986	Calculate the weighted mean of an analytes .
9987	Calculate background interpolations for one or more analytes
9988	Subtraction of analytes from the background
9989	Calculate the ratio of all analyses .
9990	Make a subset of samples .
9991	Filter the gradient of an analyte with a threshold of percentiles .
9992	Add a classifier to the model .
9993	Apply a classifier to samples .
9994	Apply correlation filter to samples .
9995	Filter samples based on a filter function .
9996	Filter off a set of samples
9997	Filter the status of a sample or subset .
9998	Defragment samples by a given threshold .
9999	Filter the number of removed samples .
10000	Plot the gradients of the given analytes .
10001	Plot the gradients of the given analytes .
10002	Plot histograms .
10003	Draw trace plots for samples .
10004	Plot the gradient of the samples .
10005	Apply a filter to a list of samples .
10006	Sample stats for the given analytes .
10007	Get the stats for the given samples .
10008	Minimal Reproduction Dataset exported from LATOOLS
10009	Export traces to a file .
10010	Save the log to a file .
10011	Minimal Reproduction Dataset export .
10012	Split a file by a regular expression .
10013	Apply a function to each element of a Functor and return a new Functor .
10014	Plot a PCA .
10015	Bayes scale .
10016	Calculate the median scaler .
10017	Perform noise despike on a signal .
10018	Perform an exponential decay on a signal .
10019	Add a new component to the set .
10020	Remove a component or a set of components .
10021	Clear the current state of all analytes .
10022	Remove unused components .
10023	Find the nearest match for a given key .
10024	Create a boolean array from a key string .
10025	Grabs an index from a filter key .
10026	Return a string representation of the component info .
10027	Decorator for logging functions .
10028	Write a log file .
10029	Read a log file and return a dictionary of run arguments .
10030	A decorator for autologin .
10031	Get information about the modem .
10032	Send a message to modem .
10033	Parse a string or file - like object .
10034	Return a link to the notebook .
10035	Returns the HTML for the thumbnail .
10036	Return the code div for this example .
10037	The name of the code example .
10038	The URL of the notebook .
10039	Return the name of the output file .
10040	Process the notebook .
10041	Create a python file .
10042	Return a data download string .
10043	Create a thumbnail of the image .
10044	Returns a tuple of header and description .
10045	Scale an image .
10046	Save the image to a thumbnail file
10047	Copy the thumbnail figure .
10048	Get the URL for a given nbfile .
10049	Given a field name and a list of db table fields return a list of language codes .
10050	Returns a function that returns the default value of the field .
10051	Process a thumbnail file .
10052	Called before the model instance is saved .
10053	Refresh the thumbnail cache .
10054	Get all thumbnails .
10055	Create a new thumbnail .
10056	Delete the thumbnail with the given size .
10057	Create a thumbnail .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Called when a message has been received .
10061	Subscribe to a given number .
10062	Return a set of accepted delivered and expired states .
10063	Add a provider to the registry .
10064	Send a message to the provider .
10065	Create a receiver blueprint for the given provider .
10066	Get the receiver blueprints .
10067	Send a message to the gateway .
10068	Send a status message to the gateway .
10069	Decorator for jsonex_api .
10070	Forward an object to all connected clients .
10071	Signs a web3 transaction .
10072	Estimate the gas of a transaction with web3 .
10073	Estimate the gas of a transaction .
10074	Write to the stream .
10075	Read a line from the serial port .
10076	Sends a message to all recipients .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Attach an attachment to the message .
10080	Register services .
10081	Create a Config object from a module .
10082	Register resources .
10083	Returns the value of the given key if it is not empty .
10084	Return True if the object should be closed and False otherwise .
10085	Sets up the data manager .
10086	Returns the number of samples at a given wavelength .
10087	Calculate the cauchy equation .
10088	Initialize the backend .
10089	Login to the backend .
10090	Get a list of domains .
10091	Get all items from a given endpoint .
10092	Perform an HTTP PATCH request .
10093	Perform a DELETE request .
10094	Returns True if path1 and path2 are the same .
10095	Create a new junction link .
10096	Initialize the logger .
10097	Raise an exception with the given message .
10098	Returns a tuple of file_readers and a list of vcf . VcfReader objects .
10099	Get a new column header from the MuTect metaheader .
10100	Return a list of unclaimed vcf readers .
10101	Initialize population stats .
10102	Given a list of unclaimed file readers and a list of VCF readers claim them .
10103	Split data into lines .
10104	Return the line terminator of the given data .
10105	Return the line terminator of the given data .
10106	Seek to the next line .
10107	Seek to the previous line .
10108	Return the last lines of the file .
10109	Return the first lines of the file .
10110	Yields lines from the file .
10111	Return a tuple of unclaimed readers and a list of vcf readers .
10112	Parse a VCF record from a VCF line .
10113	Return a dictionary of sample tag values .
10114	Format the tags of the VCF record .
10115	Join info fields into a single string .
10116	Format the sample field .
10117	Return the field name for a sample .
10118	Returns tab - delimited newline terminated string of VcfRecord .
10119	Add a new sample tag value .
10120	Add or replace a filter .
10121	Return a list of all available categories for a user .
10122	Returns a form for a list of products .
10123	Create a form for staff products .
10124	Add an error to a product .
10125	Memoise a function .
10126	Create a form for model fields .
10127	Return a list of items pending or purchased .
10128	Send an email .
10129	Returns an iterator over the osm stream .
10130	Parse an OSM file into a tuple of nodes ways and relations .
10131	Iterate over osm notes .
10132	Returns True if the user passes the filter .
10133	Check if the user passes the filter .
10134	Returns the number of items remaining for the given user .
10135	Filter the queryset to only those that are released by the user .
10136	Filter the queryset to only those products that have been released paid or active .
10137	Filter the queryset to ensure that there are no more than _BIG_QUANTITY items .
10138	Filter the queryset to see if the user is presenter or copresenter .
10139	Filter users by groups .
10140	Decorator to mark a cart as modified by batching .
10141	Create a new Cart for the given user .
10142	Auto extend the reservation duration of the cart .
10143	Apply a voucher to the cart .
10144	Validate the cart .
10145	Remove vouchers that are not available in the cart .
10146	Recalculate discounts for all products in the cart .
10147	Add a discount to the cart .
10148	Decorator to create a report view .
10149	Return a generator over the rows of the table .
10150	Get form from GET request .
10151	Render the given data .
10152	List all reports .
10153	Returns a list of items sold .
10154	Returns a summary of the sales payment .
10155	Returns a queryset of all payments .
10156	Retrieve the refunds for a credit note .
10157	Display the status of the products in the inventory .
10158	Display the status of a discount .
10159	Return a list of product line items .
10160	Get paid invoices by date .
10161	Retrieve credit notes .
10162	List all invoices .
10163	List all attendees .
10164	Report the status of speaker registrations .
10165	Create a manifest for the given products and categories .
10166	Return a list of missing categories .
10167	Returns the amount of unclaimed credit notes .
10168	Check if the user is sold out and is not registered .
10169	This function is used to redirect the user to the registration page .
10170	Edit the profile form .
10171	Create a profile form and save it to the database .
10172	Show a list of available products for a given category .
10173	Handle a list of products .
10174	Handle a voucher request .
10175	Checkout a user s cart .
10176	Check if invoice is paid or unpaid .
10177	View a single invoice .
10178	Manually payment the invoice .
10179	Refund an invoice .
10180	Apply a credit note to an invoice .
10181	Create a staff product form for a given user .
10182	Extend a reservation for a user .
10183	Send invoice e - mails .
10184	View for badges .
10185	Render a badge for a user .
10186	Get a list of available discounts for a user .
10187	Annotate the queryset with past uses .
10188	Get a list of available products for a user .
10189	Applies the credit note to an invoice .
10190	Calculate the cancellation fee for this invoice .
10191	Generate a random access code .
10192	Returns a function that can be used as a lazy function .
10193	Get an object from a module name .
10194	Returns an invoice for the given cart .
10195	Create a manual invoice for a user .
10196	Generate line items from a cart .
10197	Apply credit notes to invoice .
10198	Returns whether the user can view the invoice .
10199	Refresh invoice and cart from db .
10200	Validate that this invoice is allowed to pay .
10201	Updates the status of the invoice .
10202	Mark invoice as paid
10203	Check if invoice matches cart .
10204	Update the validity of the invoice .
10205	Mark invoice as voided .
10206	Refund the invoice .
10207	Send an email to the invoice s user .
10208	Update the object with the given data .
10209	Flatten a field into a flat dictionary .
10210	Print all downloaded files .
10211	Download a file from Gencloud .
10212	Get data for a specific project .
10213	Get a list of processors .
10214	Print all input fields of a processor .
10215	Run data from a string .
10216	Upload fields to a processor .
10217	Upload a file to the server .
10218	Download data from a list of data objects .
10219	Get all subclasses of the given class .
10220	Get a repository and a project .
10221	Get a list of variants with suggested changes .
10222	Get a list of variants with suggested changes merged .
10223	Search variants by coordinates .
10224	Search variants by coordinates .
10225	Update the object from the cache .
10226	Remove duplicates from a sequence .
10227	Authenticates and returns True if authentication was successful .
10228	Select a value from a list .
10229	Get the data for a saved issue .
10230	Move saved issue data to other_ns .
10231	Get the saved task data .
10232	Get an ASANA task .
10233	Save the data to a JSON file .
10234	Apply a key - value pair .
10235	Decorator for transport tasks .
10236	Flushes the queue .
10237	Create a task in a workspace .
10238	Format task numbers with links .
10239	Create a new task in the given workspace .
10240	Return a list of all data types for this project .
10241	Log EKM Meter debug messages .
10242	Initialize the serial port .
10243	Sets the maximum number of times to wait for a given number of seconds .
10244	Combine the V4 and V3 meter into a single list of fields .
10245	Render a JSON representation of the reads since the given timestamp .
10246	Set the context of the request .
10247	Calculate the PF value .
10248	Set max demand period .
10249	Set meter password .
10250	Unpacks a struct from a buffer .
10251	Convert the contents of the buffer to the correct format .
10252	Returns a JSON representation of the given defbuf .
10253	Calculate and return the CRC of the raw_read .
10254	Split an Ekm date into two parts .
10255	Return the buffer of months in the given direction .
10256	Set the current CT ratio .
10257	Assign a schedule to a period .
10258	Assign a schedule to a season .
10259	Set season schedules .
10260	Assign a new holiday date .
10261	Read a set of Schedules from the device .
10262	Given a schedule and a period extract the information about that schedule .
10263	Read a month s tariffs .
10264	Extract a month s tariff .
10265	Read the holidays and schedules .
10266	Extract holiday date from setting_holiday
10267	Returns True if the settings are valid .
10268	Write a command message .
10269	Sends a password request to the serial port .
10270	Update all observers .
10271	Initialize the LCD lookup .
10272	This method is used to make a request to the EKM .
10273	Request the A data from the meter .
10274	Request a single byte from the meter .
10275	Make all the fields in self . m_blk_a .
10276	Calculates the values of the fields .
10277	Set the LCD display list .
10278	Set the relay status .
10279	Send termination string to serial port .
10280	Set the pulse input ratio .
10281	Set zero resettable KWH .
10282	Set the LCD .
10283	Iterate over fields .
10284	Iterate over a schema .
10285	Return a list of paragraphs .
10286	Generates a random string of the given length .
10287	Return a summary of the elapsed time and the result .
10288	Return a string with the given color .
10289	Show the given text .
10290	Return a summary of the test result .
10291	Parse command line arguments .
10292	Setup the result manager .
10293	Run the example .
10294	Transform the given config into a Python object .
10295	Transform a describe node into an ast . ClassDef .
10296	Transform describe body .
10297	Transform an example function .
10298	Transform example body .
10299	Returns an ast . arguments object that takes only self .
10300	Register this class as a path hook .
10301	Convert a source file to a Python code object .
10302	Apply an argument parser to the arguments .
10303	Load a module by its name .
10304	Load modules from a path .
10305	Iterate over all files in a directory .
10306	Returns a function that checks the contents of a directory .
10307	Check for new messages in the given location .
10308	Add a file to the config .
10309	Remove a file or directory .
10310	Send a RESTART message .
10311	Call the given function with the given results .
10312	Returns a taservice . MultiService object .
10313	Make a procmon service .
10314	Refreshes the session for the given node .
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the last updated time of a node .
10318	Get all nodes in the cluster .
10319	Refreshes the session .
10320	Increment the number of times modified .
10321	Dereference this node .
10322	Returns a list of tokens interleaved with the delimiter .
10323	Check if a path is bad .
10324	Merge a status with another one .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Return a constant function .
10328	Decorator to splat a function .
10329	Unsplat a function .
10330	Spawn a new process and wait for it to finish .
10331	Create a timer service .
10332	Parse the input and return the result of the parser .
10333	Return a parser for the given literal or a list of literals .
10334	Return an optional parser .
10335	Return a RepeatedOnceParser .
10336	Return a RepeatedParser .
10337	Create a RepeatedOnceSeparatedParser from a parser and a separator .
10338	Create a RepeatedSeparatedParser from a parser and a separator .
10339	Check the states of the given location .
10340	Close the connection .
10341	Check if the connection is in a valid state .
10342	Add a heart service .
10343	Wrap a heart service in a taservice . MultiService .
10344	Freezes the graph from a checkpoint .
10345	Freezes the model .
10346	Save a graph only .
10347	Saves a graph only from a checkpoint .
10348	Saves weights from a checkpoint .
10349	Restore from a checkpoint .
10350	Parse a tag and return a new instance .
10351	Render an HTML tag .
10352	Validate the arguments of a template tag .
10353	Get the context data for this tag .
10354	Parse a template tag .
10355	Get the context data .
10356	Convert a Caffe model to a Tensorflow session .
10357	Freeze a caffe model .
10358	Save a caffe model to a file .
10359	Make a list of rows from a sequence of sequences .
10360	Return n - sized chunks of iterable into n - sized strings .
10361	Iterate over every element of an iterable .
10362	Remove duplicates from an iterable .
10363	Return the next element of an iterable .
10364	Yields items from iterable until predicate returns True .
10365	Return a list of bins of the given number of items .
10366	Return an iterable that is always iterable .
10367	Given a list of callable and a list of exceptions suppresses them .
10368	Return a list of duplicates of the given iterables .
10369	Assert that iterable is ordered by key .
10370	Swap on miss .
10371	Partition a dictionary by a key .
10372	Get the first n queues .
10373	Reset the iterator to the original state .
10374	Parse an as variable .
10375	Decorator to add a template tag to a library .
10376	Return a new PublicKeychain that is a descendant of this one .
10377	Fetch a list of sqlite_master records .
10378	Iterate over objects .
10379	Select an object from a selector .
10380	Parse a selector .
10381	Parse a selector .
10382	Return a list of nodes that are parents of lhs .
10383	Return a list of all ancestors of lhs and rhs .
10384	Return a list of siblings of two nodes .
10385	Nth child production .
10386	Return a list of nodes that match the given validators .
10387	Ping ICMP .
10388	Make a request to the given URL and return the response body .
10389	Remove expired items from the cache .
10390	Set the value of a key in the store .
10391	Get the value of a key .
10392	Returns True if the store contains the key k .
10393	Check if the chain is valid .
10394	Create a NistBeaconValue object from a JSON string .
10395	Create a NistBeaconValue object from an XML string .
10396	Returns the rendered content .
10397	Get a list of lines from the log file .
10398	Get a list of rows .
10399	Validate a token .
10400	Returns a Fernet instance .
10401	Validate a JWT using the supported algorithms .
10402	Create a secret link token .
10403	Calculate the counter value between two values .
10404	Calculate the counter of 64 - bit values .
10405	Calculate the average duration in seconds .
10406	Setup Riemann outputs .
10407	Setup sources .
10408	Send an event to a source .
10409	Start source watchdog .
10410	Parse a format string .
10411	Parse a log line .
10412	Validates that the expires_at field is valid .
10413	Validate that the message is not empty .
10414	Verify that the token is valid .
10415	Return the name of the device .
10416	Helper function for _warn_node_old .
10417	Connect the receivers .
10418	Create a secret link .
10419	Send a notification to the user that the request was accepted .
10420	Send a notification to the sender of a new request .
10421	Send email validation notification .
10422	Send a reject notification to the sender .
10423	Sends a notification to the given recipients .
10424	Create a new SecretLink .
10425	Validate a secret link token .
10426	Revoke this link .
10427	Create a new email validation request .
10428	Get request by receiver .
10429	Mark the request as confirmed .
10430	Mark this request as accepted .
10431	Reject this request .
10432	Create a secret link .
10433	Returns a SHA512 hash .
10434	Verify that a message is valid for a given timestamp .
10435	Check if a record is embargoed .
10436	Create an access request .
10437	Confirm an email .
10438	Return an SSHCommandClientEndpoint instance .
10439	Returns the reverse of the given column .
10440	The name of the selected item .
10441	Returns the list of items .
10442	Get the version string from the file .
10443	Set the version of the file .
10444	Initialize the SSH connection .
10445	Start the timer .
10446	Get the next event from the queue .
10447	Delete a shared link .
10448	Connect to the Riemann server .
10449	Stop the thread .
10450	Remove all events from the queue .
10451	Add events to the queue .
10452	Create a new client .
10453	Create an elasticsearch client .
10454	Encodes an event into a protobuf . Event .
10455	Encode a Riemann message .
10456	Decode a message from a byte string .
10457	Send events to the device .
10458	Generate previews .
10459	Retrieve a preview .
10460	Send a dict to the Redis queue .
10461	Message loop .
10462	Check if we should log the current time .
10463	Respond to a response to a challenge .
10464	Abort the SASL message exchange .
10465	Do the actual mapping of characters in a SASL string .
10466	The admin footer tag .
10467	Build payment parameters .
10468	Build payment parameters for register credit card .
10469	Pay with an alias .
10470	Get the version string .
10471	Constructs the layout for this widget .
10472	Called by the QMainWindow when the QMainWindow is instantiated .
10473	Configure the shortcuts .
10474	Called when an item is activated .
10475	Called when the user clicks on the selected item .
10476	Called when the user clicks on the location widget .
10477	Finalize the options .
10478	Run resource . py using pyside - rcc .
10479	Run the clean command .
10480	Fetch all children .
10481	Re - fetch all children .
10482	Returns the icon at the given index .
10483	Wrapper around subprocess . Popen .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open file descriptors .
10487	Redirect the given stream to the given target .
10488	Set the attrs of all widgets in the form .
10489	Import a module from app_name .
10490	Import project modules .
10491	Include a template .
10492	Get the URL of a gravatar .
10493	Get a gravatar image .
10494	Validate that the given path is a valid filesystem location .
10495	Check if url is a valid s3 location .
10496	Return the absolute path of a template file .
10497	List all objects in S3 .
10498	Builds a JSON representation of the task template .
10499	Execute the job .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Create a new instance of this class .
10505	List all files in a folder .
10506	Download a file from the storage .
10507	Checks if the given path exists .
10508	Get the parent of the given path .
10509	Creates a folder at the given path .
10510	Uploads a local file to the storage .
10511	Delete a folder or a file .
10512	Validate the storage path .
10513	Create a new instance of this class .
10514	Create a new instance of this class .
10515	Get details about an entity .
10516	Set the metadata for an entity .
10517	Get the metadata for a given entity .
10518	Update the metadata for an entity .
10519	Deletes the metadata for the given entity .
10520	List projects .
10521	Get project details .
10522	Create a project .
10523	Delete a project .
10524	Create a folder .
10525	Get details about a folder .
10526	Delete a folder .
10527	Upload a file to the storage .
10528	Copy a file s content to another file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record to the database .
10532	Set the service URL to the given service and version .
10533	Add headers to the request .
10534	Returns a new instance with the given params .
10535	Throw an exception .
10536	Get the list of fields to display .
10537	Add a map job to the given job .
10538	Run GATK genotypes using GVCFs .
10539	Run Oncotator .
10540	Sort the list by a function .
10541	Returns a list of datetime objects .
10542	Load export data from a folder .
10543	Shift the time series by t .
10544	Calculate the sum of the data .
10545	Collect data from rfxcom .
10546	Create a new user .
10547	Parse VN results .
10548	Parse release results .
10549	Parse production staff results .
10550	Parse character results .
10551	Parse tag results .
10552	Parse user results .
10553	Create a tar file from a list of file paths .
10554	For each file in file_paths write to output_dir .
10555	Copy a file from a job to a temporary directory .
10556	Returns a list of Spark configuration parameters .
10557	Returns a list of docker parameters to add to the spark master .
10558	Refresh the metadata from the database
10559	Run the MuTect analysis .
10560	Create a new file in the database .
10561	Return a list of streams .
10562	Export the device to a directory .
10563	Search VNDB .
10564	Parse search results .
10565	Add a stream to the query .
10566	Reset the API key .
10567	Return a list of users .
10568	Run the BWA index .
10569	Connect to the ConnectorDB
10570	Add a stream to the database .
10571	Add a new stream to the database .
10572	Insert a new value into the cache .
10573	Sync all the datapoints in the cache .
10574	Start the syncer .
10575	Stop the thread .
10576	Download a job from a URL .
10577	Uploads a file to S3 .
10578	Print all labels for a given ontology .
10579	Show the hierarchy of the ontology .
10580	Get the mean insert size of a bam file .
10581	Returns the ID of the current container .
10582	Run star on r1_id and r2_id
10583	Create a new document in the database .
10584	Export the stream to a JSON file .
10585	Return a Device object for this path .
10586	Get a list of labels for a given ontology .
10587	Get the hierarchy of an ontology .
10588	Run the Toil tool .
10589	Populate arg_parser from config data .
10590	Get an empty config file .
10591	Get the path to the mount point .
10592	Add an option to the argument parser .
10593	Create an argument parser .
10594	Create the pipeline command .
10595	Set basic auth .
10596	Handle the response from the server .
10597	Ping the server .
10598	Create a new CRUD .
10599	Update an existing CRUD .
10600	Delete a CRUD resource .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return a list of all devices .
10604	Run cutadapt .
10605	Run samtools faidx on ref . fasta
10606	Run samtools index on a BAM file
10607	Run sambamba markdup on a BAM file .
10608	Run samblaster .
10609	Mark duplicates in a BAM file .
10610	Run Picard Sort .
10611	Run base recalibration on a BAM file .
10612	Run Kallisto .
10613	Run RSEM on a BAM .
10614	Get the user affinity for a test .
10615	Send a command to the client .
10616	Subscribe to a stream .
10617	Connect to the server .
10618	Reconnect to the connector .
10619	Resubscribe to all subscribed streams .
10620	Called when the websocket is opened .
10621	Called when the websocket is closed .
10622	Called when a connection error occurs .
10623	Called when a message is received from the connector .
10624	Check if we need to send a ping to the connector .
10625	Select variants from GATK .
10626	Run GATK VariantFiltration .
10627	GATK variant recalibrator .
10628	Apply GATK recalibration to a VCF .
10629	Combine variants with GATK .
10630	Quick check a BAM file .
10631	Load handlers from a mapping of packet types to handlers .
10632	Write the configuration to a JSON file .
10633	Get configuration from the config file .
10634	Get a single term from an ontology .
10635	Search for ontology by name .
10636	Suggest an ontology by name .
10637	Iterate over the descendants of an ontology term .
10638	Iterate over all descendants of the given ontology .
10639	Iterate over all the labels in the ontology .
10640	Iterate over the hierarchy of terms .
10641	Run fastqc on R1 and R2 .
10642	Add a stream to the query .
10643	Create a Flask application .
10644	Start the Spark master container .
10645	Start the Spark worker .
10646	Start the HDFS container .
10647	Stop Spark and HDFS .
10648	Check the status of the container .
10649	Tokenizer . Generates tokens stream from text
10650	Lookup a zone by name .
10651	Fetch the R53 config from a zone .
10652	Merge a list of config chunks into a single XML element .
10653	Validate a changeset .
10654	Minimize the number of members .
10655	Returns the fitness of the process .
10656	Ave cost function value .
10657	Returns the median cost function value of each member .
10658	Returns the parameters of the process .
10659	Returns a list of the members of the process .
10660	Adds a new parameter to the model .
10661	Generate a new population .
10662	Normalize a dictionary of key - value pairs .
10663	Get all environment variables .
10664	Returns True if callable raises an exception .
10665	Transform a list of hits into a list of dictionaries .
10666	Transform the result to bytes or unicode .
10667	Convert HTML to XHTML .
10668	Convert an XHTML document to HTML .
10669	Return a string representation of the given XML document .
10670	Open a document in a web browser .
10671	Removes this node from the tree .
10672	Removes the tag from the tree .
10673	Get element by id .
10674	Create a CSSSelector object from a CSS expression .
10675	Return a list of loghandler members .
10676	Get test counts from environment variables .
10677	Check if a test is a single class .
10678	Returns True if there is only one module .
10679	Validate that the request parameters are valid .
10680	Validate that the request is a valid identifier .
10681	Decode a file - like object into a unicode string .
10682	Escape a list of arguments .
10683	Return the codec name for the given encoding .
10684	Detect UTF - 8 BOM .
10685	Get the remote address from the forwarded_for list .
10686	Convert an object to a Decimal object .
10687	Parse an XML string and return an Element object .
10688	Parse a file and return an etree . ElementTree object .
10689	Convert a beautiful soup tree to HTML .
10690	Get the current traceback .
10691	Return a string representation of the exception .
10692	Render a summary of the traceback .
10693	Generate a plaintext traceback .
10694	Return a list of lines that are annotated with this function .
10695	Render the source table .
10696	Check if the egg_info matches the search_name .
10697	Get the location of the index URL for the given project .
10698	Find all versions of a given project .
10699	Find a requirement that satisfies the given requirement .
10700	Sort links by egg fragment .
10701	Get the content - type of the given URL .
10702	Return a list of Link objects .
10703	Returns True if the request is verifiable .
10704	Find data files for a given package .
10705	Exclude files from the exclude_package_data dict
10706	Parse a requirements file .
10707	Yields lines from an iterator .
10708	Ignore comments from the given iterator .
10709	Compile a marker into a function .
10710	Return an astroid . EnvironmentMarker node .
10711	Return an ast . Attribute node .
10712	Convert a JSON string into a number .
10713	Creates a copy of the current request context .
10714	Push this context onto the stack .
10715	Pop an app context from the stack .
10716	Return a copy of the current instance .
10717	Match the request against the url adapter .
10718	Push the current request context onto the stack .
10719	Given a path and a relative path make a relative path .
10720	Check if a distribution is editable .
10721	Register a url value preprocessor .
10722	Register a function as a URL default function .
10723	Decorator to register an error handler .
10724	Decorate a generator function with a context .
10725	Make a response from a list of arguments .
10726	Generate a URL for the given endpoint .
10727	Join a path to a file .
10728	Get the root path of a module .
10729	Returns a Jinja2 loader .
10730	Run the comprehension .
10731	Get the domain of the cookie .
10732	Return the path to the cache file for the given link .
10733	Check if root - is - purelib is present in the WHEEL directory .
10734	Return a list of paths to uninstall the given distribution .
10735	Check that the wheel - version is compatible with this version of pip .
10736	Build a pip - wheel .
10737	Iterate over all symbols in a code object .
10738	Decorator to ensure that a rate is freshly updated .
10739	Add egg info to self . filelist .
10740	Writes a PIP_DELETE_MARKER_FILENAME to a file .
10741	Check if we are running under a virtualenv .
10742	Get user name .
10743	Get distutils scheme .
10744	Parse the Cache - Control header .
10745	Get a cached response from the cache .
10746	Cache the response .
10747	Update the zipimporter cache .
10748	Load the setuptools template .
10749	Install site . py .
10750	Save the path to a file .
10751	Convert the given value to an instance of the appropriate type .
10752	Add filters to filterer .
10753	Configure a logging handler .
10754	Add handlers to a logger .
10755	Common logger configuration .
10756	Execute a script from a file .
10757	A context manager that overrides the temporary directory .
10758	Returns a tuple of the url and the revision of the file .
10759	Get an item from an object .
10760	Generates a file from a source code .
10761	Compile Jinja2 templates .
10762	Returns the path to the default cache directory .
10763	Find all eggs in a zip archive .
10764	Find distributions on a path .
10765	Declare a namespace for a given package .
10766	Get the mro of a class .
10767	Find an adapter from the registry .
10768	Create a directory if it does not exist .
10769	Iterate over all entry points in a group .
10770	Check if the given distribution can be added .
10771	Find the best match for the given request .
10772	Evaluate a marker .
10773	Evaluate a string using the markerlib library .
10774	Format a log record .
10775	Format a number according to a currency .
10776	Parse a number pattern .
10777	Returns a decimal quantum of the given precision .
10778	Returns the precision of a decimal number .
10779	Return scientific notation elements .
10780	Returns the total number of seconds in seconds .
10781	Parse a list of requirements .
10782	Return the unpatched class .
10783	Check that the requirement specifiers are valid .
10784	Fetch and install an EGG .
10785	Roll a dice .
10786	Convert a price string to a PriceClass object .
10787	Create a price attribute .
10788	Validate the request .
10789	Get a method by name .
10790	Apply a method to the given arguments .
10791	Deprecated . Use request . blueprint instead .
10792	The blueprint name of the endpoint .
10793	Attach an enctype error multidict to the request object .
10794	Make an abstract distribution based on the req_to_install
10795	Add a requirement to the list of requirements .
10796	Walk the list of requirements and call handler for each one .
10797	Check if req_to_install should be skipped .
10798	Return a list of requirements to be installed .
10799	Return a sorted list of all namespace packages .
10800	Return a JSON representation of the given object .
10801	Return a list of tokens that are annotated with an annotation .
10802	Merge annotations from tokens_old to tokens_new .
10803	Copy annotations from src to dest .
10804	Takes a list of tokens and compresses them into a list of tokens .
10805	Serialize a list of tokens into HTML .
10806	Expand a list of tokens into HTML .
10807	Locate an unbalanced end .
10808	Given a list of chunks return a list of tokens .
10809	Flatten an element .
10810	Split text into words .
10811	Return a string representation of the element s start tag .
10812	Return the end of a tag .
10813	Serialize an element as an HTML fragment .
10814	Fixup ins and del tags .
10815	Extract a constant from a code object .
10816	Return the cache URL for this service .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Parse an HTML document from a string .
10820	Decorate a function to return a JSON response .
10821	Returns a TreeWalker object for the given tree type .
10822	Export the svn repository to a file .
10823	Get the revision of the given location .
10824	Decorator to mark a function as a setup method .
10825	Return the name of the module .
10826	Return whether or not to propagate exceptions .
10827	Find the path to the instance file .
10828	Update the template context .
10829	Handle an HTTP exception .
10830	Check if the given exception is an HTTP exception .
10831	Handle an exception .
10832	Raises a RequestRedirect if it is a FormDataRoutingRedirect .
10833	Dispatches the request and returns the response .
10834	Create a default options response .
10835	Create a URL adapter for the given request .
10836	Injects default values into the given endpoint .
10837	Generate unique values from an iterable .
10838	Handle may - requires key .
10839	Returns a string representation of the requirement s requirements .
10840	Convert pkginfo to metadata .
10841	Import all modules in the current directory .
10842	Iterate over all classes in the test suite .
10843	Return a list of method names .
10844	Find the basename for the given name .
10845	Check if the given path is a module path .
10846	Return a generator over all directories and files under basedir .
10847	Return a list of absolute paths for all modules .
10848	Set the default values for the kwargs .
10849	Load default JSON decoder from kwargs .
10850	Set multiple keys to multiple values .
10851	Increment the value of a key by delta .
10852	Return a string representation of an object .
10853	Build a dictionary of editable options from a request .
10854	Populate the link attribute .
10855	Ensure that the project has a source directory .
10856	Removes the temporary source directory .
10857	Returns a pkg_resources . Distribution for the given egg_info .
10858	Get the data from the response .
10859	Get headers from the WSGI response .
10860	r Convert an IRI to a URI .
10861	r Return the path to the user s cache directory .
10862	Return the path to the user data directory for the given application .
10863	Return the path to the user s log directory .
10864	Return the path to the user s config directory .
10865	Return a list of site config directories for the given application .
10866	Iterate over all module files .
10867	Restarts the system with a reloader .
10868	Convert a string to a text type .
10869	Try to find a CA bundle .
10870	Parse an HTML document .
10871	Parse an XML document from a stream .
10872	Parse a fragment from a stream .
10873	Translate a word to a list of transmissions .
10874	Convert arguments to tokens .
10875	Bind to the server .
10876	Print a report to stdout .
10877	Load bytecode from a file .
10878	Convert a stylesheet params dictionary to a stylesheet params dictionary .
10879	Run a command in a subprocess .
10880	Get the version of the Python implementation .
10881	Return a list of distros for a given location .
10882	Find external links in a page .
10883	Open a local file or directory .
10884	Process a URL and return a list of distros .
10885	Remove all paths from sys . path .
10886	Return a set of all directories in sys . path .
10887	Add a package to sys . path .
10888	Add sitedir to sys . path .
10889	Check to see if we can enable usersite .
10890	Add usersitepackages to known_paths .
10891	Set up quit and exit .
10892	Alias the default locale to mbcs .
10893	Set the default encoding .
10894	Force global eggs after local site packages .
10895	Fix sys . path to include pyclasspath .
10896	Wrapper around subprocess . Popen .
10897	Check if we have pyrex installed .
10898	Convert . pyx sources to . cpp or . c .
10899	Returns a generator that can be used as a context manager for debugging .
10900	Get a resource from a file .
10901	Return a user - agent string .
10902	Check if the given name is a URL .
10903	Unpack a file from a URL .
10904	Download a file from an HTTP URL .
10905	Check if a file is already downloaded .
10906	Format a currency .
10907	Register a currency exchange .
10908	Decode the response data .
10909	Default template context processor .
10910	Render a template with the given context .
10911	Render a template .
10912	Render a template string .
10913	Parse a version string .
10914	Returns True if the given name is declared .
10915	Add an identifier to the list of declared identifiers .
10916	Include AST node .
10917	A from import statement .
10918	Create a WHEEL file .
10919	Decorate a function so that it can be executed atomically .
10920	Factory for service factory .
10921	Return a URL - escaped version of obj .
10922	Returns a list of wheels that match the given requirement .
10923	Populate a requirement set .
10924	Export a pip file to a temporary directory .
10925	Lookup ASINs .
10926	Iterate over pages .
10927	The ancestor of this node .
10928	Returns a list of child browse nodes .
10929	Get an element from a path .
10930	Get the text of the element at the given path .
10931	Get the date of the element at the given path
10932	Returns the price and currency of the offer .
10933	Get the list price .
10934	If the request is a GET request return a cached response .
10935	Build a cache response based on the request .
10936	Returns a function that returns the value of the given attribute .
10937	Return a title from a string .
10938	Sort a list of values .
10939	Group the values by the given attribute .
10940	Apply a filter to a sequence of items .
10941	Create a debug logger .
10942	Compare two constant time values .
10943	Verify the signature of the given key against the given value .
10944	Derives the key from the secret key .
10945	Get the signature of the given value .
10946	Return the signature of the given value .
10947	Verify that a value is signed by a signature .
10948	Unsign a value .
10949	Return the signature of the given value .
10950	Validate that a signed value is valid .
10951	Serialize an object to a byte string .
10952	Raises an exception for a server error .
10953	Find packages in a directory .
10954	Given a list of packages return a list of packages that require parents .
10955	Iterate over all directories in base_path .
10956	Prepare the response to be sent to the client .
10957	Unsign a wheelfile .
10958	Unpack a wheelfile to a directory .
10959	Install scripts from a list of distributions .
10960	Arrange all data in the graph .
10961	Redraw the graph .
10962	Get the node with the given ID .
10963	Change the directed state of the graph .
10964	Called when an edge is added or removed .
10965	Called when a component is changed .
10966	This method is called when the left mouse button is pressed .
10967	Called when the diagram canvas has changed .
10968	Clears the diagram canvas .
10969	Called when a domain model has changed .
10970	Maps the domain model to a pydot graph .
10971	Unmap the model from the map .
10972	Map an element to a diagram node .
10973	Set the style of the given node .
10974	Parse XDOT data .
10975	Process the font .
10976	Process an ellipse .
10977	Process a polygon .
10978	Create a Polyline from a list of tokens .
10979	Create a Text component from the tokens .
10980	Process an image token .
10981	Render a GridFS file .
10982	Save an object to the dot file .
10983	Load an object from a dot file .
10984	Check if a point is in the rectangle .
10985	Draw the bounding box .
10986	Open a new graph wizard .
10987	Start the SQLAlchemy database layer .
10988	Parse the dot data and store it in self . model
10989	Create a new graph .
10990	Open a file and parse it .
10991	Save the model to a file .
10992	Save the model to a file .
10993	Configure the graph .
10994	Configure the nodes view .
10995	Configure the edges view .
10996	Edit about godot .
10997	Add a node to the graph .
10998	Add an edge to the graph .
10999	Add a subgraph to the graph .
11000	Add a cluster to the graph .
11001	Request the selected graph .
11002	Edit godot options .
11003	Configure the dot code .
11004	Called when the user exits .
11005	Move components to the origin .
11006	Save data to a file - like object .
11007	Load data from a file - like object .
11008	Save the model to a file .
11009	Load an object from a file .
11010	Create an alias for a property .
11011	Parse a file into words .
11012	List of start words .
11013	Add a Markov chain .
11014	Remove the chain with the given name .
11015	Build a chain from a source file .
11016	Generates a random sentence from the chain .
11017	Create a dot file .
11018	Add a node to the graph .
11019	Delete a node .
11020	Get a node by ID .
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when a program has changed .
11025	Set the node lists of all edges .
11026	Parse a dot file into a graph .
11027	Parse a dot file .
11028	Builds a graph from a list of tokens .
11029	Builds a graph from the given tokens .
11030	Get units and multiplier for a given number of seconds .
11031	Format a duration in seconds .
11032	Called when the user clicks on a new path .
11033	Create an editor for the graph .
11034	Split a sequence into n elements .
11035	Yield windows from iterable .
11036	Run the Godot application .
11037	Returns a list of all children of the given object .
11038	Append a child to the given object .
11039	Insert a child into the object at the given index .
11040	Remove a child from an object .
11041	Called when children have been replaced .
11042	Called when the children of an object have changed .
11043	Get the label for the given object .
11044	Set the label of an object .
11045	Called when the label is changed .
11046	Initialize the graph .
11047	Update the editor .
11048	Add listeners to the graph editor .
11049	Called when a node is replaced by another node .
11050	Updates the list of nodes .
11051	Add nodes to the graph .
11052	This method is called when an edge is replaced .
11053	Handles the edges event .
11054	Add edges to the graph .
11055	Parse a xdot directive .
11056	Called when the user clicks on a drawing event .
11057	Returns a godot . node . Node instance .
11058	Returns a godot . edge . Edge instance .
11059	Create a MongoEngineProxy for the given context .
11060	Parse the Xdot drawing directive .
11061	Parse a xdot label directive .
11062	Called when the drawing state has changed .
11063	Called when the component s position changes .
11064	Called when a new position has changed .
11065	Normal right down event handler
11066	Highlight the CSS for the given style .
11067	Draw the main layer .
11068	Check if a point is inside a polygon .
11069	Draw the main layer .
11070	Handle an event .
11071	Run the event loop .
11072	Returns the full URL for the given page .
11073	Render the previous and next links .
11074	Render the seo links .
11075	Returns True if candidate matches pattern .
11076	Select the best match for a given content type .
11077	Rewrites a URL .
11078	Remove auth information from a URL .
11079	Create a URL identifier from user and password .
11080	Normalize a host string .
11081	Return a list of all modules in a directory .
11082	Return a list of all modules in a directory .
11083	Returns a list of all modules that match the given name .
11084	List all classes in a module .
11085	Return a list of all classes in a module .
11086	Ensures that a directory exists .
11087	Create a blob from a text string .
11088	Check if the number is a Luhn card number .
11089	Get the current git version .
11090	Load a module .
11091	Add a path to the list of paths
11092	Find a module by name .
11093	Split a line into two lines .
11094	Remove all namespaces from the root .
11095	Check if the version of setup . py matches the desired version .
11096	Create a new instance from a YAML file .
11097	Merge a dictionary of actions into this instance .
11098	Execute the actions .
11099	Create a new instance from a YAML file .
11100	Add details to the message .
11101	Emit a record to the server .
11102	Add the image rendition to the context
11103	Log an attempt for a given key .
11104	Add a URL to the download queue .
11105	Start the workers .
11106	Set the value of a key .
11107	Get the value of a key .
11108	Recursively walks the index for the given key .
11109	Get the index for a given key .
11110	Delete a key .
11111	Plot a heatmap of feature importance data .
11112	Add a number of months to a datetime object .
11113	Add a number of months to a date .
11114	Check if the current date is a christmas period .
11115	Use a music service .
11116	Use a storage service .
11117	Read data from a CSV file .
11118	Return a list of items from a JSON file .
11119	Save data to a JSON file .
11120	Filter data by label .
11121	Calculate the average value of each row in the dataframe by label .
11122	Feature importance report .
11123	Restore the data from the session .
11124	Merge dict b into a .
11125	Decorator for multi - dispatching functions .
11126	Decorate a function to be used as a dispatch function .
11127	Find all registered blocks .
11128	Verify that the given block is valid .
11129	Register a block with the registry .
11130	Unregisters a block from the registry .
11131	Convert a file to a . mp3 file .
11132	Make sure the desired version is reasonable .
11133	Checks if SSL is enabled and redirects to http or https .
11134	Initialize celery .
11135	Queue an email .
11136	Parse the Accept header value .
11137	Parse a cache - control header value .
11138	Parse a Content - Type string into a ContentType object .
11139	Parse a forwarded header value .
11140	Parse a comma - separated list from a string .
11141	Parse a parameter list .
11142	Resizes an image to fit the given width .
11143	Add a value to the link .
11144	Download a file from YouTube .
11145	Connect to Google Drive .
11146	Upload a file to Music .
11147	Connect to the Music server .
11148	Write sky parameters to a file .
11149	Update filenames .
11150	Read ahpi absorption from a file .
11151	Scale a_phi by scale_parameter
11152	Read pure water absorption from a file .
11153	Read pure water scattering from a file .
11154	Reads an IOP file and interpolates it to the common wavelength
11155	Write an iop to a file .
11156	Calculates the b - value based on the scattering fraction .
11157	Build total absorption .
11158	Build the total attenuation C .
11159	Builds all b and c from all IOPs
11160	Set the batch parameters .
11161	Read a parameter file into a dictionary .
11162	Convert a string to a list of floats .
11163	Read the pr_report file .
11164	Set a signal handler for the given signals .
11165	Called when a signal is received from the system .
11166	Default signal handler .
11167	Pause the signal handler .
11168	Handle a SIGABRT signal .
11169	Status signal handler .
11170	Remove an event from the event list
11171	Fetch a metric from the server .
11172	Fetch a sorted list of metrics .
11173	Return a list of n elements from an iterable .
11174	Print an item to stdout .
11175	Print all items in iterable .
11176	Get the signature from a function .
11177	Create a signature from a partial instance .
11178	Return a copy of the arguments .
11179	Return True if the given file should be ignored .
11180	Get a key for a file .
11181	Convert a VLQ to an integer .
11182	Read a table from a VLQ file .
11183	Parse the StarCraft II header .
11184	Get the duration of a given number of seconds .
11185	Print details about the game .
11186	Get the data for this widget .
11187	Search for the result file .
11188	Write the batch to a file .
11189	Read data from the result file .
11190	Display the connection to the graphic .
11191	Prints information about the graphic .
11192	Displays the error message .
11193	Hide the error message .
11194	Runs the planarrad script .
11195	Cancel the planarrad dialog
11196	Quit the planarrad .
11197	Save the figure to disk .
11198	Opens the log file .
11199	Opens the documentation window .
11200	Handles prerequisite actions .
11201	Called when the user clicks on the tab .
11202	This method is called when the mouse is moved .
11203	Display the target of the graphic .
11204	Create a lockset from a genesis block and a private key .
11205	Sign this message with a private key .
11206	signatures are non deterministic
11207	either invalid one of quorum noquorum quorumpossible
11208	In the IOU fungible the supply is set by Issuer who issue funds .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid lockset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring see utils . cstr
11215	Calculate delay between sender and receiver .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the contract on the chain
11218	returns class . _on_msg_unsafe use x . im_self to get class
11219	registers NativeContract classes
11220	returns True if unknown
11221	receives rlp . decoded serialized
11222	Convert a vgg image to a vgg image .
11223	Convert image to vgg format .
11224	Get a function layer .
11225	Get the output of a layer .
11226	Returns a dictionary of feature names and their outputs .
11227	Create a new key file .
11228	Finish the bulk load job .
11229	Load a table from a file .
11230	Put a batch of items into the table .
11231	Release the table .
11232	Return a list of tables .
11233	Set up the CCompiler . compile method to remove the specified flags .
11234	Find the Teradata home directory .
11235	Get the value of the given key .
11236	Set the value of a secure key .
11237	Handle a table command .
11238	Execute a command .
11239	Get a value from the settings .
11240	Write a default configuration file .
11241	Set the names of the columns to be filtered .
11242	Write the table to a Giraffe archive .
11243	Return a string representation of the settings .
11244	Convert a string to a float with a multiplier .
11245	Convert a comma - separated string to a dictionary of gains .
11246	Parse device settings from a comma - separated string .
11247	Wrap text with given indent .
11248	Detect SoapySDR devices .
11249	Set the center frequency of the PSD .
11250	Return the result of the Fourier Transform .
11251	Wait for a result to be returned .
11252	Update the state of the PSD .
11253	Read data from a file - like object .
11254	Write pwr_array to file .
11255	Submit a function to be executed in a separate thread .
11256	Calculate the number of times to repeat .
11257	Calculate the frequency plan for a given range of bins .
11258	Create a buffer for the given number of bins .
11259	Setup the stream .
11260	Stop the stream .
11261	Set the frequency of the PSD .
11262	Sweep the Fourier Transform .
11263	Set the slave address .
11264	Run CMake .
11265	Filter a list of datetimes .
11266	Return a new datetime with hour minute second and microsecond zero .
11267	Mask a datetime to be a week .
11268	Return a list of datetimes that should be kept .
11269	Given a set of datetimes return a list of datetimes that have been deleted .
11270	Convert a list of dates to a set of dates .
11271	Given a list of dates return a list of dates to delete .
11272	Returns the SPI control byte .
11273	Read a single bit from the specified address .
11274	Writes a single bit to the specified address .
11275	Get a bit number from a bit pattern .
11276	Watch a port for interrupt events .
11277	Handles events from the event queue .
11278	Bring the GPIO interrupt into userspace .
11279	Set the GPIO interrupt edge .
11280	Wait until a file exists .
11281	Register a callback for a given pin .
11282	Deregisters a pin function map .
11283	Bring gpio interrupts into userspace .
11284	Send one or more bytes to the SPI bus .
11285	Render the tab .
11286	Check if the form has any errors .
11287	Render the link .
11288	Extract the version of a package .
11289	Add the pack to the form kwargs .
11290	Checks the response status and raises appropriate exceptions .
11291	Perform a GET request .
11292	Get a download link for a file .
11293	Upload a link to a folder .
11294	Upload a file to a folder .
11295	Upload a remote file to a remote folder .
11296	Returns the status of a remote upload .
11297	List all files in a folder .
11298	Returns a list of all running conversions in a folder .
11299	Calculate humidity from temperature and dewpoint .
11300	Calculate dewpoint from temperature and humidity .
11301	Publish the message to the server .
11302	Calculate the CRC of the given data .
11303	Verify the CRC of the given data .
11304	Unpack a Storm date into a string .
11305	Check if we are using a rev . B archive .
11306	Send a WAKEUP command to the device .
11307	Send a command to the device .
11308	DMPAFT command .
11309	Get new archive fields from DMPAFT .
11310	Parse the archive .
11311	Weather update .
11312	Initialize the log .
11313	Return a list of PUB_SERVICES .
11314	Get the wind gust of the given station .
11315	Set the parameters for this instance .
11316	Set the arguments to be passed to the function .
11317	Write the arguments to a file .
11318	Decorator to make sure user wants a request .
11319	Initialize the app .
11320	Returns True if all requirements are fulfilled .
11321	Push a new override context onto the stack .
11322	Pop an override context from the stack .
11323	A context manager to override the current context .
11324	Push an additional context onto the stack .
11325	Pop an additional context from the stack .
11326	Add additional items to the stack .
11327	Returns a list of duplicate field names .
11328	Return a string representation of the stats .
11329	Extract params from query .
11330	Run a query .
11331	Returns a pandas DataFrame containing the data .
11332	Returns a networkx graph .
11333	Create a pie plot .
11334	Plot the data .
11335	Plot a bar plot .
11336	Write the result to a CSV file .
11337	Checks if the user has permission perm .
11338	Returns the context data for this widget .
11339	Returns a sorted list of widgets sorted by position .
11340	Returns a list of widgets that need to be updated
11341	Register a widget class .
11342	Unregister a widget class .
11343	Get the last update of the dashboard widget .
11344	Get a setting by its name .
11345	Save a setting to the database .
11346	Returns True if the update interval has passed .
11347	Convert an array to a NumPy array .
11348	Construct an array of ones along an axis .
11349	Concatenate two spark arrays .
11350	Check if arguments are compatible with pyspark .
11351	Format axes argument .
11352	Wrap a function into a BoltArraySpark instance .
11353	Return a new array with axes aligned to the given axes .
11354	Convert the Series to a spark array .
11355	Return the tordd of this TimeSeries along an axis .
11356	Return a new RDD with a stack of size elements .
11357	Apply a function to each element of the RDD .
11358	Return a new RDD with chunks of the same shape as this one .
11359	Apply a function to a ChunkedArray .
11360	Return a new BoltArray by applying a function to each element of the RDD .
11361	Get a plan from the shape of the array .
11362	Remove padding from value .
11363	Get number of chunks from a plan .
11364	Returns a list of slices for the given plan .
11365	Returns a boolean mask of the given indices .
11366	Return a new RDD with repartitions .
11367	Return a new StackedArray of the same shape as this one .
11368	Align axis .
11369	Returns the first element of the RDD .
11370	Return a stat of the Series along the specified axis .
11371	Return the mean value along an axis .
11372	Return the variance along an axis .
11373	Return the standard deviation along an axis .
11374	Return the sum of the values along an axis .
11375	Return the maximum value along an axis .
11376	Return the minimum value along an axis .
11377	Create a new ChunkedArray from this RDD .
11378	Perform a swap operation on k and vaxes .
11379	Return a new DataFrame with the given axes .
11380	Swap axis1 and axis2 .
11381	Reshapes an array to the given shape .
11382	Reshapes the key and value arrays to the given shape .
11383	Squeeze a vector along an axis .
11384	Return a new RDD with values of the same dtype as this RDD .
11385	Return a new RDD with values clipped to the given range .
11386	Convert the RDD to an array .
11387	Convert an argument to a tuple .
11388	Convert a list or tuple into a tuple .
11389	Validate that the shape of an ndarray is in the given axes .
11390	Return True if all elements of a and b are all close .
11391	Convert a list of integers into an array of integers .
11392	Convert a slice to a slice .
11393	Check if new and old axes are transposed .
11394	Check that the new and old keys are consistent .
11395	Concatenate a list of arrays and concatenate them together .
11396	Recursively expands an array of dimensions .
11397	Zip a RDD with an index .
11398	Wraps a function so that it can be used as a constructor .
11399	Lookup the constructor for the given arguments .
11400	Return a new BoltArray with the given shape .
11401	Return a new BoltArray with the given axes .
11402	Return a new BoltArray with the given shape .
11403	Transpose one or more axes .
11404	Construct a NumPy array filled with zeros .
11405	Construct a NumPy array of zeros .
11406	Concatenate multiple NumPy arrays .
11407	Calculate discrete likelihood .
11408	Calculate the most likely alpha .
11409	Calculate discrete alpha .
11410	Find the most likely alpha for the given data .
11411	Discrete best alpha .
11412	Plot the PPF .
11413	Compute the lognormal distribution .
11414	Sanitize Turbo HTML .
11415	Configure Yandex Analytics .
11416	Return a list of tag names .
11417	Returns the MD5 hash of the key .
11418	Returns the SHA - 256 hash of the key .
11419	Returns the SHA512 hash of the key .
11420	Parse a long from a byte string .
11421	Decode a base64 - encoded public key .
11422	Parse options and return a dictionary of parsed options .
11423	Process SSH RSA key data .
11424	Process SSH DSS parameters .
11425	Process an ECDSA SHA - 1 message .
11426	Process an ed25516 message .
11427	Parse SSH2 public key .
11428	Perform one step of the algorithm .
11429	This method is called by GSSHAPY to process a single token .
11430	Return a list of mechs .
11431	Store a credential .
11432	Main entry point .
11433	Initialize the distribution .
11434	Create an audio . wav file .
11435	Returns the HTML for the h5bp css .
11436	Returns a normalized version of the Django frontend .
11437	Returns the font - awesome page .
11438	Returns the modernizr page .
11439	Returns a javascript file that can be used to render a jQuery page .
11440	Returns a jQuery UI page .
11441	Render jQuery DataTables .
11442	Returns a CSS link to the jQuery datatables .
11443	Returns the HTML for the jQuery datatables themeroller .
11444	Returns a jQuery formset .
11445	Return a jQuery scroll to a specific version .
11446	Render the jQuery - Smooth Scroll page .
11447	Returns a CSS link to the twbs bootstrap page .
11448	Returns the Google Analytics page .
11449	u Render a CodeMirror textarea .
11450	Generate a list of hashes for the given user and purpose .
11451	Calculate the expiry time for a given number of minutes .
11452	Generate a token for a user .
11453	Serialize a User object .
11454	Deserialize a profile into a dictionary .
11455	Update a user s profile .
11456	Raises a MeteorError if authentication failed .
11457	Validate a token and return a User instance .
11458	Check if the request is secure .
11459	Get username from user expression .
11460	Create a new user .
11461	Called when a user is logged in .
11462	Logout the current user .
11463	Login with password or resume token .
11464	Login with a username and password .
11465	Login with a resume token .
11466	Change the user s password .
11467	Forgot password for a user .
11468	Reset a user s password .
11469	Merge two dictionaries .
11470	Read the contents of a file .
11471	Get the meteor id for the given object or model .
11472	Get meteor ids from a list of object ids .
11473	Get the object_id for the given model .
11474	Get object ids from a list of meteor ids .
11475	Get an object from the database .
11476	Set the default forwards for the given operation .
11477	Set the default reverse of the model .
11478	Truncate the given models .
11479	Truncate the database forwards .
11480	Truncate the database backwards .
11481	Initialize the options .
11482	Finalize build and build_py options .
11483	Run the meteor build process .
11484	Convert a path to a directory .
11485	Shuffles the random number generator .
11486	Return the state of the signal .
11487	Generates a random string from the given alphabet .
11488	Decorate a function as an API endpoint .
11489	Return an iterator over the endpoints of all the API endpoints in the given object .
11490	Clears the API path map cache .
11491	Pretty print a value to stdout .
11492	Validate kwargs for a function .
11493	Called when a websocket connection is opened .
11494	Called when the client closes the connection .
11495	Called when a message is received from the client .
11496	Get DDP frames from an EJSON message .
11497	Process a DDP request .
11498	Dispatch a message to a handler .
11499	Connect to the server .
11500	Receive a ping from the server .
11501	Send a sub message to the server .
11502	Unsubscribes a subscription .
11503	Send a method to the server .
11504	Return information about the DDP - PPP server .
11505	Run DDPLauncher .
11506	Entry point for the command line interface .
11507	Print a message to the console .
11508	Stop the postgres greenlet .
11509	Start the postgres greenlet .
11510	Start the postgres greenlet .
11511	Poll for notifications from the given connection .
11512	This function is called by gevent . monkey . patch_all .
11513	Generate a random meteor id .
11514	Autodiscover dddp modules .
11515	Return a dict representation of the exception as a dict .
11516	Get an object from a factory .
11517	Emit a log record .
11518	Create a negotiation middleware .
11519	A context manager for adding routes to the application .
11520	Add a resource object to the router .
11521	Run a web application .
11522	Send a message to the GCM .
11523	Send a message to a list of registration ids .
11524	Fetch inactive IDs from APNS .
11525	Send a message to a GCM device .
11526	Send a message to a list of registration ids .
11527	Send a JSON request to the GCMPush server .
11528	Send data to the API .
11529	Get the model class from a module location .
11530	Fast forward selection algorithm .
11531	Perform a Giphy search .
11532	Translate a GIPHY string .
11533	Returns a list of trending Giphy objects .
11534	Get a gif from a gif id .
11535	Screensaver a Giphy instance .
11536	Upload a file to Giphy .
11537	Convert integer values to integers .
11538	Fetch data from a given endpoint .
11539	Translate a term or phrase into a GIF .
11540	Get trending images .
11541	Get a Giphy Image by ID .
11542	Upload a gif file .
11543	Create an access control extension .
11544	Authenticate with YOUTUBE .
11545	Upload a video to Youtube .
11546	Check the status of a video .
11547	Update a video .
11548	Delete a video from Youtube
11549	Check video availability .
11550	View for a video .
11551	List videos for a user .
11552	Upload a video from zuqqa .
11553	Upload a Youtube video .
11554	Upload a video .
11555	Remove a video .
11556	Fetch a single video entry .
11557	Save the video .
11558	Delete a video
11559	Update the metadata for this resource .
11560	Update a metadata field .
11561	Update the item .
11562	Parse a string into a list of nodes .
11563	Return a string representation of a list of trees .
11564	Load data from a file - like object .
11565	Read the contents of a file .
11566	Parse a node from a string .
11567	Create a new node .
11568	Return a newick representation of this node .
11569	Return an ASCII art string .
11570	Get the node with the given label .
11571	Remove all leaves from the tree .
11572	Resolve polytomies .
11573	Remove all internal names from the tree .
11574	Remove leaf names from the tree .
11575	Decorate a function to check if the user is authenticated .
11576	Disposes a JSON string .
11577	Raise an exception if the setting does not exist .
11578	Get the value of an argument .
11579	Returns a list of all the values of the named argument .
11580	Decorate a callback to be used as a callback function .
11581	Get the value of a cookie .
11582	Removes a cookie from the cookie monster
11583	Redirect the user to the login page .
11584	Get the authenticated user .
11585	Return the request parameters for an OAuth request .
11586	Redirect the user to the authorization page .
11587	Send a request to Facebook .
11588	Get an authenticated user .
11589	Concatenate url with args .
11590	Parse a header line .
11591	Add a new HTTP header .
11592	Get a list of headers with the given name .
11593	Parse a single line of text .
11594	Parse headers and return a new instance .
11595	Normalize a HTTP header name .
11596	Convert unicode to utf - 8 .
11597	Convert a value to a unicode string .
11598	Convert a string to a unicode string .
11599	Recursively convert a Python object to unicode .
11600	Check if there is another auth plugin with the same keyword .
11601	Iterate over all subclasses of cls .
11602	Based on the matching strategy and the origin and optionally the requested method a tuple of policyname and origin to pass back is returned .
11603	Calculate the number of points occupied in a grid .
11604	Write groboxes to a file .
11605	Write a PDB file .
11606	Given a total number of molecules and a relative number of molecules determine the number of molecules .
11607	Resizes a PBC to match the given lipids .
11608	Write the top molecules to a file .
11609	Iterate over a resource file .
11610	Add a message to a user s messages list .
11611	Log a message to all users .
11612	Get a list of messages for a user .
11613	Add messages to the response if user is logged in .
11614	Check the config file .
11615	Verify that the profile name is in the config .
11616	Retrieve data from config .
11617	Retrieve password from config .
11618	Update config data .
11619	Update the password of the config .
11620	Create a new config profile .
11621	Display required items for a given message type .
11622	Get data from user .
11623	Get auth information from user .
11624	Create a new configuration entry for a profile .
11625	Write data to a profile .
11626	Write auth data to config .
11627	Add attachments to the message .
11628	Send the message .
11629	Send a message .
11630	Create a message from a message type .
11631	Create a credential property .
11632	Create a property that checks that the given attribute is valid .
11633	Validate the input for the given message type .
11634	Check that the value of a twilio attribute is valid .
11635	Validate a SlackPost message .
11636	Validate a WhatsApp email address .
11637	A coroutine for sending messages .
11638	Add a message to the message queue .
11639	Get the body from a file .
11640	Given a dictionary of keyword arguments return a new dictionary with only the keys that are not present in the dictionary .
11641	Send a message .
11642	Get the chat id for a user .
11643	Send the message to the server .
11644	Send the message .
11645	Get the SMTP server for the given address .
11646	Generate a multipart message .
11647	Add headers to the message .
11648	Add the body to the message .
11649	Add attachments to the message .
11650	Get an SMTP session .
11651	Return an SMTP_SSL object .
11652	Create a TLS session and return it .
11653	Send the email .
11654	Save the tags to a file .
11655	Unload the image .
11656	Get the region of the image .
11657	Validate that the dictionary is valid .
11658	Remove all elements from the list .
11659	Return a byte string representation of the message .
11660	Reads the data from the file .
11661	Delete the chunk .
11662	Resizes the chunk to the given size .
11663	Insert a new chunk .
11664	Save the frame to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a normal line .
11668	Add lines to the list of source blocks .
11669	Draw a string as a glyph .
11670	Parse an ISO 8601 time string into a datetime object .
11671	Convert a list of words into HTML .
11672	Return an HTML representation of a word .
11673	Make HTML para .
11674	Make HTML code from a list of lines
11675	Convert a list of items into HTML .
11676	Save the metadata to a file .
11677	Update the parents of the path .
11678	Run the game .
11679	Register a mapping for a given vendor and product .
11680	Get a controller from the registry .
11681	Registers a freeform key .
11682	Return a base64 - encoded HMAC - SHA256 digest of the given string .
11683	Get request headers .
11684	Send a request to Route53 .
11685	Send a GET request to the API .
11686	Send a POST request to the server .
11687	Send a DELETE request .
11688	Convert a value to an APEValue object .
11689	Send a request to the server .
11690	Perform an autopaginating API call .
11691	Get a list of all zones .
11692	Create a new hosted zone .
11693	Get a list of resource record sets for a zone .
11694	Change resource record sets .
11695	Draw an image from x1 to y1 .
11696	Draws a region of an image .
11697	Returns the size of the header .
11698	Replace old_pages with new_pages .
11699	Find the last Ogg page in a file .
11700	Set the section to the given name .
11701	Add markup to self . markups .
11702	Process the given content .
11703	Get the markup with the given tag name .
11704	Create a new hosted zone writer .
11705	Lock a file - like object .
11706	Insert size bytes into file - like object .
11707	Delete bytes from a file - like object .
11708	Convert unicode or bytes to UTF - 8 .
11709	Add a change to the route .
11710	Parse a change info element .
11711	Measure the width of a string .
11712	Returns True if the model has been modified .
11713	Delete this hosted zone .
11714	Save this resource record set to the hosted zone .
11715	Parse ID3v1 frames .
11716	Make ID3v1 from ID3 .
11717	Read up to size bytes from the file .
11718	Delete all keys starting with key .
11719	Add a tag to the loaded frame .
11720	Update the common APIC fields .
11721	Update the frame to the V24 version .
11722	Unload the sound .
11723	Play the sound .
11724	Set loop points .
11725	Extract adobe glyphs and values from adobe_glyph_list .
11726	Return a list of glyph names that match the filter .
11727	Dump an encoding to a file .
11728	Dump an array to a file .
11729	Entry point for PostScript glyph names .
11730	Check if a file exists .
11731	Return a list of file paths .
11732	Parse a HostedZone element into a HostedZone object .
11733	Parse a DelegationSet element and populate zone . _nameservers .
11734	Write a list of blocks to a byte string .
11735	Group padding blocks into multiple Padding objects .
11736	Delete all VCFLACDicts .
11737	Save the metadata to a file .
11738	Parse a RRSet alias .
11739	Parse rrset record values .
11740	Parse a RRSet element into a dict .
11741	Delete this hosted zone .
11742	Add a record to this hosted zone .
11743	Create an A Resource Record Set .
11744	Create a new AAAA resource record set .
11745	Create a CNAME resource record set .
11746	Create a MX Resource Record Set .
11747	Create a new NSResourceRecordSet .
11748	Create a new PTR resource record .
11749	Create a new SPF resource record .
11750	Create a SRV record .
11751	Create a TXT resource record .
11752	Registers a TXXX key .
11753	Get the values for a given change .
11754	Write a change to a xml . etree . Element .
11755	Create a change resource record set request .
11756	Initialize logging .
11757	Return the item with the given alias .
11758	Returns a tuple of tuples sorted by key .
11759	Join HTML attributes .
11760	Initialize the app .
11761	Initialize all bars .
11762	Bind a bar to the widget .
11763	Returns a dictionary of arguments .
11764	The URL for the request .
11765	Returns True if the request is the current view .
11766	Validates that the metric class is valid .
11767	Get a statistic by its name .
11768	Calculate statistics for the given stat and frequencies .
11769	Autodiscover gadgets modules .
11770	Dump statistics to a CSV file .
11771	Update the maintenance statistics .
11772	Get the value of a GET variable .
11773	Get a boolean value from a GET request .
11774	Get the next colour .
11775	Get Gecko params .
11776	Geckoboard number widget .
11777	Geckoboard drag widget .
11778	Geckoboard line chart .
11779	Geckoboard geckometer .
11780	Geckoboard funnel .
11781	Returns a list of all active stats .
11782	Register a gadget .
11783	Get the context data for this gadgets .
11784	Prints an error message to stderr .
11785	Decorate a function to validate params against a schema .
11786	Prompt user for a long input .
11787	List input lines .
11788	Prompt user for a file name .
11789	Get the schedule for a given year .
11790	Returns the winner or None if there is no winner .
11791	The season of the year .
11792	Return a pandas DataFrame of starters .
11793	The surface of the game .
11794	Get the game s coin toss .
11795	Get the weather information from the game .
11796	Return information about the reference table .
11797	Get the schedule for this game .
11798	Return a pandas DataFrame of standings .
11799	Get the team stats table .
11800	Get roy voting data .
11801	Returns a pandas DataFrame of line scores .
11802	The season of the year .
11803	Get player stats .
11804	Decorator to switch the current working directory to dirPath .
11805	Decorate a function to cache a URL .
11806	Get a key for a class instance .
11807	Decorator to memoize a function .
11808	Returns the age of the given year month and day
11809	Get stats table .
11810	Get statistics about the number of games in the game .
11811	Get statistics about the total number of samples .
11812	Get statistics about the number of minutes per minute .
11813	Get statistics about the total number of positions per 100 .
11814	Get information about the advanced statistics .
11815	Get the shooting statistics .
11816	Get statistics about the advanced pbp .
11817	Get the basic playoffs for a given year .
11818	Get the current value from the session
11819	Expand the details of a DataFrame into a pandas DataFrame .
11820	Add team and opp columns to a DataFrame .
11821	Add team features to the dataframe .
11822	Calculate the initial win probabilities for a given line .
11823	Returns a pandas DataFrame of the passing playoffs .
11824	Return a list of awards for a given year .
11825	The name of the team .
11826	Get the box scores for a given year .
11827	Return a pq object for the given year and keyword .
11828	Return a list of all coaches in a given year .
11829	Get the schedule for a given year .
11830	Get off - coordinator href for a given year .
11831	Returns the URL of the Coordinator for the given year .
11832	Get the stadium ID for a given year .
11833	Returns the offensive scheme for a given year
11834	Returns the defensive alignment for a given year .
11835	Return a DataFrame of all splits for a given year .
11836	Get HTML from a URL .
11837	Flatten links .
11838	Convert a URL to an ID .
11839	Convert keyword arguments to query string .
11840	Read data from a HDF5 file .
11841	Perform a direct put on the queue .
11842	Get a direct access to the queue .
11843	Close the connection .
11844	Get a batch from an HDF5 file .
11845	Get the remainder of the given path .
11846	Get a queue of n_procs examples from a file .
11847	Get a generator from a queue .
11848	Parse a file - like object or file - like object .
11849	Dump a list of objects to a file - like object .
11850	Read a varint from the stream .
11851	Get a list of objects from the stream .
11852	Close the file descriptor .
11853	Write one or more objects to the stream .
11854	Flush the write buffer .
11855	Get the game s directory .
11856	Input text with keyboard emulation .
11857	Create a fake movie .
11858	Returns a list of all traits that should be evaluated .
11859	Wait for a condition to be true .
11860	Wait until all traits are present .
11861	Add exceptions to the list of ignored exceptions .
11862	Get the main volume of the device .
11863	Get the main source for the given operator .
11864	Send a message to the server .
11865	Get the status of the NAD .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume of the device .
11869	Select a source .
11870	Deobfuscate a request .
11871	Calculate the CRC of the given plaintext .
11872	Obfuscate the given value using unfriendly - deobfuscation .
11873	Check for missing songs
11874	Return a list of all links .
11875	Check if song name is present .
11876	Parse a song from a URL .
11877	Return the URL for a google search .
11878	Parse Google download URL .
11879	Parse a song from Google .
11880	Get an HTML response from a URL .
11881	Download a file using requests .
11882	Download a file using wget
11883	Search for station codes by city name .
11884	Get location observation .
11885	Parse an observation response .
11886	Get an observation for a given station .
11887	Return a list of paths to search for .
11888	Returns a list of all compilers .
11889	The mimetype of the file .
11890	Return the mimetype of all compilers .
11891	Return the extension of the compiler .
11892	Register a processor for a given mimetype .
11893	Unregister a processor for a mimetype .
11894	A list of paths to search for .
11895	Register the default handlers and preprocessors .
11896	Import PyQt5 or PySide .
11897	Get a Netnode object from the IDA settings .
11898	Add a netnode plugin name .
11899	Remove a netnode plugin .
11900	Import settings from a config file .
11901	Export settings to a QSettings object
11902	Return a DirectoryIDASettings object .
11903	Return an iterator over all keys in this directory .
11904	Simple error handler .
11905	Return an instance of a DynamoDB table .
11906	List all tables in DynamoDB .
11907	Fetch all items for a given category .
11908	Get the id of a metadata item .
11909	Return the timestamp of the last time the item was fetched .
11910	Fetch the crate s owner team .
11911	Fetch the crate s owner user .
11912	Fetch versions of a crate .
11913	Fetch version downloads from a crate .
11914	Fetch crate data .
11915	Get the summary of the category .
11916	Returns a list of crates .
11917	Fetch a crate by its ID .
11918	Retrieve a single crate attribute .
11919	Fetch all crates from a given path .
11920	Fetch all items for a given category .
11921	Fetch questions from Kitsune .
11922	Get questions from Kitsune .
11923	Fetch events for a given category .
11924	Return the timestamp of the last time the metadata was updated on .
11925	Return the metadata category for the given item .
11926	Get items from ReMo .
11927	A list of buffers .
11928	The priority of the IOCB .
11929	Release the context .
11930	Submit a list of IOCBs .
11931	Cancels the given IOCB .
11932	Cancel all submitted blocks .
11933	Get a list of events .
11934	Fetch events for a given category .
11935	Get all cells from MozillaClub .
11936	Parse the feed and yield events .
11937	Returns a sorted list of export formats for the given pid_type .
11938	Returns the permission factory object .
11939	Create a blueprint .
11940	Create a URL rule .
11941	Create a record view .
11942	r Default view method .
11943	r Export a record .
11944	Time a callable .
11945	Close the socket .
11946	Remove a client from the pool .
11947	Increment a metric .
11948	Send a timing request .
11949	Add a timing to the queue .
11950	Send a gauge to the server .
11951	Send a gauge delta .
11952	Set the value of a metric .
11953	Request data to be sent to the server .
11954	Create a batch client .
11955	Create a unit client .
11956	Send all batches to the remote address .
11957	Create a MyPermissionChecker class for the given record .
11958	Create a new TCPBatchClient .
11959	Flush all buffered messages from the queue .
11960	Create a new TCP client .
11961	Create a User instance with the specified permissions and groups .
11962	Interprets a Python object as an OpenMath object .
11963	Convert a term to an OpenMath object .
11964	Convert an OMSymbol or OMSApplication to a Python object .
11965	Convert an object to an OpenMath object .
11966	Register a converter to be used to convert a Python object to OpenMath objects .
11967	Deprecated register_to_python .
11968	Initialize the Flask application .
11969	Return a generator of valid choices .
11970	Split keyword arguments into model fields and aggregation fields .
11971	Decorator to register a function for a given field type .
11972	Create a new value from the given arguments .
11973	Return the default form data and form files .
11974	Decorator to mark a field as required .
11975	Decorator for field choices .
11976	Return a string representation of a decimal field .
11977	Return the data for an email field .
11978	Generate data for a date field .
11979	Generate data for a datetime field .
11980	Return a string representation of a float field .
11981	Return a string representation of an integer field .
11982	Generate a random time for a time field .
11983	Return a random choice for a field .
11984	Returns a random choice for a field .
11985	Return a random value from the queryset .
11986	Encode a Python object to bytes .
11987	Publish a package .
11988	Tag the current version .
11989	Returns a function that returns None if the field is blank .
11990	Load a global variable from a Python module .
11991	Build an instance with the given state .
11992	Create a list of Python objects .
11993	Create a tuple application .
11994	Decode a byte string into a bytes object .
11995	Encode a byte string .
11996	Converts a number to a fixed number .
11997	Format a number .
11998	Convert a number to a money number .
11999	Convert data to a numpy array .
12000	Convert an array of bytes into a byte string .
12001	Add a new workspace .
12002	Remove a workspace .
12003	List all workspaces .
12004	Get a single ws by name .
12005	Check if a repository exists in a workspace .
12006	Sync the repositories for a workspace .
12007	Clone a repository .
12008	Check if the version of ndio is available
12009	Convert a numpy array to a list of vectors .
12010	Create a numpy array from a list of voxels .
12011	Print workspace name or all .
12012	Update a repository .
12013	Set the console handler .
12014	Execute a command and return a subprocess object .
12015	Load a PNG file into a numpy array .
12016	Save a numpy array to a png file .
12017	Save a collection of numpy arrays to a PNG file .
12018	Print the status of a workspace .
12019	Print the status of a repository .
12020	Get the block size of a cube .
12021	Post a blosc cutout without chunking .
12022	Load an image from a tiff file .
12023	Save a numpy array to a TIFF file .
12024	Load a multipage from a tiff file .
12025	Write the configuration to a file .
12026	Create a clone of this repository .
12027	Get the version of yoda .
12028	Print a message with a greeting and a name .
12029	Option decorator .
12030	Reserve a number of ids from a channel .
12031	Merge multiple ids into one or more ramons .
12032	Propagate a channel .
12033	List all projects in a dataset .
12034	Get a dataset by name .
12035	List all datasets .
12036	Parse the command line arguments .
12037	Show a workspace .
12038	Show a workspace .
12039	Show all workspaces .
12040	Return the URL for the given endpoint .
12041	Try to guess the file format from a file extension .
12042	Open an image file .
12043	Convert an input file to an output file .
12044	Build a GRUTE graph .
12045	Compute invariants from a graph file .
12046	Convert a graph file to a set of output formats .
12047	Convert a list of ramons into a dictionary .
12048	Return the RAMON type for the given type .
12049	Deletes a channel .
12050	Add a new dataset .
12051	Return a JSON representation of an ND dataset .
12052	Create a dictionary of parameters for a dataset .
12053	Create a channel dictionary .
12054	Return a dict of project information .
12055	Identify the dimensions of an image .
12056	Upload data to ndio .
12057	Given a workspace name and a config dictionary find the path for that workspace .
12058	Get a list of public tokens .
12059	Get information about the project .
12060	Set metadata for an OCSP token .
12061	Make a GET request to the given URL .
12062	Make a POST request to a URL .
12063	Make a DELETE request to a URL .
12064	Load data from an hdf5 file .
12065	Save an array to an HDF5 file .
12066	Infer gaps in a tree .
12067	Recover a NvimIO .
12068	Install Jinja2 translations .
12069	Apply a thunk to the state of the guard .
12070	Calculate the percentage of the data .
12071	Get statistics about the cache .
12072	Get a dict of all available cache SLabs .
12073	Return a dict of context data .
12074	View for the server status page .
12075	View for the memcache dashboard .
12076	Show the statistics for a given server .
12077	View for the Slabs admin page .
12078	Returns a human - readable human - readable representation of the given value .
12079	Find a Config object from a dict of children .
12080	Add a directory to the environment .
12081	Apply the applicator to the config file .
12082	The full path of the file .
12083	Read the contents of the file .
12084	Write data to file .
12085	Configure the logger .
12086	Create the file if it does not exist .
12087	Apply a configuration applicator to this node .
12088	The path of the file .
12089	Remove the directory .
12090	Prepare the environment for execution .
12091	Remove all children from the tree .
12092	Return the full path to the given path .
12093	List all files in the directory .
12094	Write data to a file .
12095	Read the contents of a file .
12096	Add a file or a list of files .
12097	Save the data to a YAML file .
12098	Load data from yaml file .
12099	Remove the file from disk .
12100	Load plugins from a directory .
12101	Recursively update target dict with source dict .
12102	Create a child node with the given path .
12103	Resolve the path and return a tuple of the node and the key .
12104	Get the value of the field .
12105	Update the config with the given data and options .
12106	Load the configuration from a file .
12107	Apply the config to a string .
12108	Build the URL for a callback .
12109	Read input from the pyngus socket .
12110	Send output to pyngus .
12111	Send a request to the server .
12112	Read data from a socket .
12113	Write output data to a socket object .
12114	Wrap a function so that it can be invoked from a callback .
12115	Get remote settle modes .
12116	Configure the link .
12117	The source address of the link .
12118	The address of the target .
12119	Called when the parent session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Request a receiver link .
12124	Remove a link from the list of destroyed links .
12125	Check if we need to close the session .
12126	Process an endpoint event .
12127	Add a mark pattern to the Markdown .
12128	Called when the receiver is closed .
12129	Called when the receiver has failed .
12130	Get host and port from server address .
12131	Connect a socket to a given host and port .
12132	Create a server socket for a given host and port .
12133	Returns the list of connections that need to be processed .
12134	Decorator to ensure that a connection is not retrtrant .
12135	Process the connection .
12136	Get the next output byte from the transport .
12137	Create a new sender link .
12138	Rejects a sender link .
12139	Create a new receiver .
12140	Called when a connection has failed .
12141	Called when the connection is up .
12142	Called when the remote connection is closed .
12143	Called when a protocol error occurred .
12144	Decorator for twilio views .
12145	Return a string representation of the color .
12146	Returns a dictionary of font names .
12147	Set the compression option .
12148	Add an object to the buffer .
12149	Write a stream to the buffer .
12150	Put a stream into the output stream .
12151	Add a new page to the document .
12152	Set the color scheme .
12153	Set the default PDFFont .
12154	Add a page to the page list .
12155	Set the size of the font .
12156	Add text to the page .
12157	Add a newline to the current page .
12158	Add a pie chart to the PDF .
12159	Output a list of pages .
12160	Get a list of all orientation changes .
12161	Output all fonts .
12162	Output all images .
12163	Write the image to the device .
12164	Transform the current matrix .
12165	Returns the absolute position of the current matrix .
12166	Set the style of the symbol .
12167	Rotates a point by the given angle .
12168	Set information about the object .
12169	Set the display mode .
12170	Close the document and return a string or None .
12171	Put PDF header .
12172	Write pages to file .
12173	Write a resource dictionary to the PDF .
12174	Write information to the PDF .
12175	Put a catalog .
12176	Put a new trailer .
12177	Floyd sequence generator .
12178	A naive version of naive .
12179	Return a generator that yields values from a list of seqs .
12180	Brent generator .
12181	Returns True if x + test_length is within self . xmax .
12182	Returns True if y + test_length is within ymax
12183	Returns True if x is greater than test_ordinate .
12184	Check if the y - coordinate of this coordinate is greater than the y - coordinate of the test coordinate .
12185	Return a copy of this cursor .
12186	Add a number to the x - axis .
12187	Add the y - axis to the current y - axis .
12188	Draw the table .
12189	Create a new tag .
12190	List all tags .
12191	Get all labels with the given name .
12192	Update a tag .
12193	Delete a tag .
12194	Create a tagit .
12195	List tags .
12196	Returns a list of tags with the given label SN .
12197	Create a hook .
12198	List all hooks .
12199	Update a hook .
12200	Create an alert .
12201	Returns a list of alerts with the given type and args .
12202	Update an alert .
12203	Setup Sphinx extensions .
12204	Return the path to the themes directory .
12205	Perform a POST request to the logentries API .
12206	List all hosts .
12207	Get information about a log set .
12208	Find attacker slider .
12209	Calculate the duration in seconds .
12210	Update the current state of the model .
12211	Compute the limbdark .
12212	Bin the limbdark .
12213	Free the memory of the arrays .
12214	Receive data from the NNTP socket .
12215	Generator that yields lines from the buffer .
12216	Generator that yields bytes from the buffer .
12217	Get status code and message from NNTP response .
12218	Generate an info message .
12219	Generate an info message .
12220	Send a command to the NNTP server .
12221	Get the capabilities of the NNTP server .
12222	Set NNTP mode reader .
12223	Quit the NNTP server .
12224	Get the date of the NNTP server .
12225	Help the NNTP server .
12226	Generate new groups from a timestamp .
12227	Generate newnews messages .
12228	Generate new news for given pattern and timestamp .
12229	List active NNTP groups .
12230	List active times .
12231	List newsgroups .
12232	List overview formats .
12233	List available NNTP extensions
12234	Return a generator for the given keyword .
12235	Return a list of values .
12236	Group the NNTP server .
12237	Get the next NNTP article .
12238	Send an article to NNTP .
12239	Send HEAD request to NNTP .
12240	Get the body of a message .
12241	Send a XGTITLE command to NNTP .
12242	Send an XHDR message .
12243	Send an XZHDR message .
12244	Generator for XOVER command .
12245	Generator for XPAT commands .
12246	Return a list of XPattern objects .
12247	Compress NNTP data using XFEATURE COMPRESS GZIP
12248	Send a POST request to NNTP .
12249	Return the offset of the given value .
12250	Convert a timestamp string to a timestamp string .
12251	Convert a string to a datetime object .
12252	Make a POST request to the API .
12253	Perform an HTTP DELETE request .
12254	Perform an HTTP GET request .
12255	List all scheduled queries .
12256	List all tags for this log entry .
12257	Get tags by name or id .
12258	Create an inactivity alert .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a new scheduled query .
12262	Delete a tag .
12263	Convert an integer or tuple into a string .
12264	Parse a newsgroup line .
12265	Parse header line .
12266	Unparse HTTP headers .
12267	Do a POST request .
12268	Run tests .
12269	Return a string representation of the defaults .
12270	Decorator to add defaults to a function s docstring .
12271	Returns a docstring for the defaults section .
12272	Set the value of the field .
12273	Check that the value is of the correct type .
12274	Get the value of the variable .
12275	Check that the value is of the correct type .
12276	Return the symmetric error .
12277	Set the errors .
12278	Set the bounds free errors and value .
12279	Import metrics from V2 .
12280	Convert a list of metrics into a dictionary of metrics .
12281	Filter metrics based on filter_expression .
12282	Call the API .
12283	Return the expression terminal .
12284	Return an operator .
12285	Add a text to the end of a string .
12286	Initialize all required properties .
12287	Return a list of Parameter objects .
12288	Returns a list of the values of the given parameters .
12289	Returns a numpy array of the errors for the given parameter names .
12290	Clears all derived parameters .
12291	Set the method to use .
12292	Get environment variables .
12293	Get the URL parameters .
12294	Perform a GET request .
12295	Perform an HTTP DELETE request .
12296	Perform a POST request .
12297	Perform an HTTP PUT request .
12298	Call the API .
12299	Validate that the scene info is valid .
12300	Verify that the type product is valid .
12301	Get the size of the remote file .
12302	Download the scene .
12303	Validate a list of bands .
12304	Establishes connection to Earthexplorer
12305	Returns a function that returns True if the given name starts with the given prefix .
12306	r Return a timezone object for the given zone .
12307	Normalize a datetime . datetime object .
12308	Join an iterable of strings with an escape character .
12309	Return a list of positions of the newline characters in text .
12310	Given a source file and a position return a list of lines where each line is located at the given position .
12311	Dump the results to stdout .
12312	Remove metrics control and plugins from the result .
12313	Load fortunes from a list of files .
12314	Set the chance of a set of fortunes .
12315	Main entry point .
12316	Return a rule .
12317	Handle special handling .
12318	Returns the grammar from the input source .
12319	Returns a list of rules .
12320	List of comments .
12321	List of directives .
12322	Returns the compiled source code .
12323	Returns a string representation of the token definition .
12324	Returns the import directives as a string .
12325	Returns a string representation of the token type enum .
12326	Return the class definition string .
12327	Get the entry point name .
12328	Get the definition of the given rule .
12329	Get the source of the given rule .
12330	Get the transform string for the given rule .
12331	Convert an expression to ASN .
12332	Convert an AST node to an ASN .
12333	Given a list of operands and a predicate return a list of new operands .
12334	Remove grouping groups from an optree .
12335	Convert an AST node to a Python code object .
12336	Convert an AST AST node to a Python code object .
12337	Convert a terminal to a list of code blocks .
12338	Convert an AST OptionGroup into a list of code lines .
12339	Convert a repetition group into a list of code lines .
12340	Convert a special handling AST into a list of code strings .
12341	Convert an OP_ALTERNATE expression into a list of code lines .
12342	Concatenate OP_CONCAT operands to code .
12343	Convert an ast . OpExclusion to a list of lines .
12344	Convert an ast . OpMultiply to a list of code lines .
12345	Convert an ast . OpRepeat to a list of lines .
12346	Return a list of directives that match the predicate .
12347	Return True if child and parent are the same as parent .
12348	Parse directives from a comment .
12349	Handle the results of the API call .
12350	Returns a wx . Id object .
12351	Remove a hotkey from a control
12352	Add command line arguments .
12353	Configure logging .
12354	Validate the arguments .
12355	Convert infix operators to postfix operators .
12356	Convert a list of nodes to an OptreeNode .
12357	Reduce a list of nodes into a list of OptreeNodes .
12358	Add command line arguments to the parser .
12359	Load the plugin manifest .
12360	Get a metric definition by name .
12361	Returns a tuple of the length of the columns of the fields .
12362	Returns the total number of columns in the metrics table .
12363	Escape underscores in metrics names .
12364	Prints a markdown representation of the fields .
12365	Prints the metrics in markdown format .
12366	Generate markdown file .
12367	Parse the input text .
12368	Update self . most_consumed based on text .
12369	Add command line arguments .
12370	Parse a time string into a datetime object .
12371	Prints the results to a csv file .
12372	Prints a JSON representation of the given text .
12373	Output text as JSON .
12374	Return an XML representation of the results .
12375	Returns True if the node is empty and is not a terminal node .
12376	Pretty print the root node and all its children .
12377	Return a function that returns a repetition of the given bounds .
12378	Return a parse node for a terminal value .
12379	Get the repetition of the given text .
12380	Check if the text matches the exclusion .
12381	Count the number of leading whitespace in text .
12382	Call the extractor function .
12383	The position of this parse node .
12384	True if all children of this node are empty .
12385	Add ignored messages to the queue .
12386	Check if the value is a type of the node .
12387	Returns a flattened version of this ParseNode .
12388	Returns a new ParseNode that is a trimmed copy of this ParseNode .
12389	Merge two ParseNodes together .
12390	Return a new parse node of the given type .
12391	Return a new ParseNode that is a compressed version of this ParseNode .
12392	The current position .
12393	Return the maxreaded position .
12394	Step to the next character .
12395	Add a new line to the end of the file .
12396	Move the cursor to the previous line .
12397	Return the last line of the current line .
12398	Increment the cursor position by length .
12399	Save the current cursor position in the context list .
12400	Restore the current context .
12401	Return a formatted string representation of the notification .
12402	Set the name of the signature .
12403	Count the number of variables in the HSIG .
12404	Count the number of functions in the HSIG .
12405	Update the number of variables and functions .
12406	Update the scope with a list of signatures .
12407	Return a new scope with the union of this scope and the given signature .
12408	Update the scope with the intersection of oset .
12409	Return a new scope that is the intersection of this scope and the given signature .
12410	Remove all keys in oset from this scope .
12411	Return a new scope that is the difference of this scope and the given signature .
12412	Update self with the symmetric difference of oset .
12413	Return a new Scope that is the symmetric difference of this one .
12414	Add a signature to the scope .
12415	Remove a signature from the set .
12416	Remove a signature from this scope .
12417	Return the values of this signature .
12418	Return the first signature .
12419	Return the last signature .
12420	Get the signature for the given key .
12421	Get a scope by symbol name .
12422	Get a signature by symbol name .
12423	Get all polymorphic return signatures .
12424	Call the Translator Injector .
12425	Normalize the given AST .
12426	Set the attributes of this node to the values of the othernode .
12427	A generator that yields all the values in this sequence .
12428	Check if hit is ok .
12429	Get the signature for this parameter .
12430	Resolve all components of this context .
12431	Returns a list of resolved names for the given type name .
12432	Set the resolved name for the given type .
12433	Delete a local file .
12434	Delete a file from S3 .
12435	Delete a file from S3 .
12436	Save a file to a local file .
12437	Save a temporary file to S3 .
12438	Save an object to a temp file .
12439	Find files in S3 by path .
12440	Create an Enum class .
12441	Check that a function is of the correct type .
12442	Set one thing in the chainmap .
12443	Decorator to add a method to the class .
12444	Decorator to add a hook to a class .
12445	Decorator to add a rule to the class .
12446	Decorator to mark a function as a directive .
12447	Decorator to register a function as a decorator .
12448	Bind a node to another node .
12449	Read the end of the file .
12450	Push rule nodes to the stack .
12451	Remove all rule nodes from the stack .
12452	Get the value of the given node .
12453	Add a stream to be parsed .
12454	Starts a new tag .
12455	Mark the end of a tag .
12456	Set the rules for this class .
12457	Set hooks .
12458	Set the directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Return True if the stream is at the given text .
12462	Check if there is at least one character in the stream .
12463	Read a single character from the stream .
12464	Read until the stream is at EOF .
12465	Ignore blank lines .
12466	Set the hit dtype .
12467	Set the cluster dtype .
12468	Check that the hit data is compatible with the cluster hit data .
12469	Add a rule clause to a namespace .
12470	Add a rule to the parser tree .
12471	Add a rule to the parser tree .
12472	Add a sequence to the parser tree .
12473	Add an alternative to the list of alternatives .
12474	Add a range to the sequence .
12475	Add a lookahead rule to the parser tree .
12476	Add a capture to the sequence .
12477	Add a Bind to the sequence .
12478	Add a hook to the sequence .
12479	Set the value of a parameter to an integer .
12480	Convert a string to a parameter pair .
12481	Convert a single character to a parameter pair .
12482	Set the id of a parameter .
12483	Set the name of a hook .
12484	Add a parameter to a hook .
12485	Get the rules of the EBNF bnf .
12486	Ignore Cxx characters from the stream .
12487	Add a state to the list of states .
12488	Return a string representation of the graph .
12489	Write the graph to a dot file .
12490	Write the pipe to a PNG file .
12491	Return a string representation of the state .
12492	Return the next state .
12493	Reset the living state .
12494	Infer the type of each element in the body .
12495	Infer a subexpression .
12496	Infer a symbol by its name .
12497	Infer a literal .
12498	Dump node local info .
12499	Return an ast . FunctionDef for a Topython rule .
12500	Return an ast . stmt for the exit scope .
12501	Return a list of clauses .
12502	Return an ast . Call node .
12503	Return an ast . CallTrue node .
12504	Return an ast . Call node for the hook .
12505	Return an ast . Call node for the rule .
12506	Return an ast . And statement for the Capture node .
12507	Return an ast . Name for the scope .
12508	Return an ast . Alt statement .
12509	Return an astroid . Seq node as an ast . stmt .
12510	Return an ast . If the node is an ast . If it is an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast . If it s an ast .
12511	Visitor for Rep0N AST node .
12512	Visit a Rep0N node and return a list of statements .
12513	Add indentation to the end of the source string .
12514	Set the indent level of each element in the list .
12515	Convert a list of strings to a string .
12516	Print a list of nodes .
12517	Populate a state from a sequence of MatchExpr objects .
12518	Populate a state register from a list of sequences .
12519	Build the state tree and populate the root edge .
12520	Returns True if n is equal to val .
12521	Create a grammar from a string .
12522	Load a grammar from a file .
12523	Parse an entry rule from a string or stream .
12524	Parse a file .
12525	Set the value of a node .
12526	Set the value of a node as an integer .
12527	Get the value of a sub - node .
12528	Return the default serializer for the given object .
12529	Get a list of depositions for a given query .
12530	Dump a deposition to a dictionary .
12531	Get recids from invenio 12 .
12532	Get recids from invenio 2 database .
12533	Import and return BibDoc objects .
12534	Return a list of bibdoc files for the given recid .
12535	Get the number of documents in the database .
12536	Check if a BibDoc file exists .
12537	Dump an OAuth 2 . 0 token object to a dictionary .
12538	Get the number of users .
12539	Dump a User object to a dictionary .
12540	Get the number of communities .
12541	Get modified recids for invenio 12 .
12542	Get all modified recids for a given date .
12543	Get restrictions for a given collection .
12544	Get a list of revisions for a particular record .
12545	Get all collections for a record .
12546	Dump a MARCXML to a JSON string .
12547	Get all modified recids that match the given query .
12548	Dump a record from a given date .
12549	Return a JSON representation of the given RA .
12550	Load a model from the given data .
12551	Collect things entry points .
12552	Initialize the app context .
12553	A decorator that caches the result of the decorated function .
12554	Try to import the dbquery module if it is available .
12555	Get all roles connected to an action .
12556	Retrieve actions from the database .
12557	Return a JSON representation of a remote token .
12558	Load a token from a dict .
12559	Import a record from the database .
12560	Return the value of config_var_imp or the default value .
12561	Dump the object to a dictionary .
12562	Get users from INVENIO 12 .
12563	Get the number of users in invenio 2 .
12564	Dump a User object into a dictionary .
12565	Load a deposit record .
12566	Create a new record and a persistent identifier .
12567	Load a record from the database .
12568	Load records from a list of sources .
12569	Inspect records from a list of sources .
12570	Load data from one or more JSON files .
12571	Load communities from a list of sources .
12572	Load users from a list of sources
12573	Load a deposit from a list of sources .
12574	Get stats from yappi .
12575	Main entry point for Tornado .
12576	Dump stats to a file .
12577	Delete the profile .
12578	Delete the profile .
12579	Show running status .
12580	Decorator to disable timestamping .
12581	Load a user from the database .
12582	Calculate translations of images in parallel .
12583	Given a list of images return a stitched image .
12584	Adds a dimensions with ones to array .
12585	Create a persistent identifier record .
12586	Create a new record .
12587	Update a record with the given revisions .
12588	Create persistent identifiers for a record .
12589	Delete a persistent identifier record .
12590	Create files for a record .
12591	Create a file instance for the given bucket and key .
12592	Delete all buckets in a record .
12593	Returns a list of PIDs that are missing .
12594	Prepare the list of revisions .
12595	Add files to self . files
12596	Prepare the list of PID values .
12597	Check if a record is deleted .
12598	Load a community from a dictionary .
12599	Load a featured community .
12600	Dump a thing to a JSON file .
12601	Check the existence of a thing .
12602	Delete all event handlers .
12603	Calculate the magnitude of a vector .
12604	Normalize a vector .
12605	Transform the tex coordinates .
12606	Add bones to the data dict .
12607	Set the length of the bones .
12608	Set the parent of this bone .
12609	Calculate the point of the pivot point .
12610	Start animation .
12611	Set the state of the object .
12612	Unsets the state of the object .
12613	Set the rotation state of the bone .
12614	Unsets the state of the rotation .
12615	Create model data if it doesn t exist .
12616	Redraw the model .
12617	Draw the batch3d of the model .
12618	Set the model .
12619	Write reports to a file .
12620	Convert a list of test reports to XML .
12621	Add a menu to the window .
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the background .
12625	Delete a widget .
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add a label to the main window .
12630	Add an ok button to the dialog .
12631	Exit the dialog .
12632	Add a confirm button to the dialog .
12633	Add a cancel button to the dialog .
12634	Update the progress bar .
12635	Render all actors to a 3D view .
12636	Render the world in 3D mode .
12637	Create a context manager for a step .
12638	Check if a resource exists .
12639	Add a new category .
12640	Returns a pyglet . image . Image object .
12641	Get a model object by name .
12642	Load a model from disk .
12643	Get model data by name .
12644	Load model data from JSON file .
12645	Add a widget to this widget .
12646	Draw the menu .
12647	Called when the canvas is resized .
12648	Redraw the scrollbar .
12649	Check if the mouse is aabb of the given size
12650	Returns the p - value of the interval .
12651	Add a layer to the layer list .
12652	Get a region of the buffer .
12653	Draw the buffer .
12654	Add an action to the actions dictionary .
12655	Executes the given action .
12656	Register a name with the registry .
12657	Add a layer to the graph .
12658	Draw the layered widget .
12659	Delete all layers .
12660	Returns a WatchingList with the border of the widget .
12661	Return a WatchingList with the current position and size .
12662	Returns the size of the widget .
12663	Read a mesh from an HDF5 file .
12664	Create a connection matrix from shape .
12665	Set fields .
12666	Add fields to the query .
12667	Check that all elements are in know types .
12668	The space of this element .
12669	Returns a list of centroids and volumes for each element .
12670	Returns a list of angles .
12671	Return a pandas DataFrame of edges .
12672	Returns a pandas DataFrame of the stats of the mesh .
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Convert a surface to a set of element sets .
12676	Return the metadata of the fields .
12677	Return the metadata of the step .
12678	Make directories if they don t exist .
12679	Run post - processing .
12680	Run GMSH .
12681	Read a history report from a file .
12682	Read a field report from a file .
12683	Convert a list of numbers to a comma - separated string .
12684	Returns a string representation of the equation .
12685	Returns an unsorted set from a DataFrame .
12686	Parse the response and return the payload .
12687	Perform an HTTP GET request .
12688	Write an xy report to a file .
12689	Write a field report to a file .
12690	List available components .
12691	Returns an error message if the condition is not met .
12692	Check if an exception was raised by a descriptor .
12693	Set the data for this object .
12694	will get the axis mode for the current series
12695	sets the graph ploting options
12696	Create a class with the given name and attributes .
12697	Cycle through datafeeds .
12698	Try to convert a value to a float .
12699	Convert a string to a number .
12700	Plot a graph .
12701	Convert unicode string to unicode string .
12702	Make a clean HTML from a raw string .
12703	Returns True if mime_type is in include_mime_types .
12704	Get the domain name from a raw string .
12705	Return a list of domain name cuts .
12706	Make a hash keyword for the given token .
12707	Collect the number of words in the sentence .
12708	Index a stream item .
12709	Invert a hash .
12710	Get the document frequencies for the given hashes .
12711	Lookup the stream ids for a given hash .
12712	Lookup the stream ids for a given hash .
12713	Make stream items from a file - like object .
12714	Create a stream item from a permalink entry .
12715	Create a ContentItem object from a node .
12716	Read a varint from the stream .
12717	Read an A block from the stream .
12718	Serialize a StreamItem key .
12719	Convert a streamitem to a key and data tuple .
12720	Context manager to change the working directory .
12721	Removes a prefix from a string .
12722	Removes a suffix from a string .
12723	Returns True if haystack is a subset of needle .
12724	Cube web application .
12725	Start wsgiref server .
12726	Shuts down the server .
12727	Decorator to add a route to the router .
12728	Decorator to register an error handler .
12729	Serve a static file .
12730	Get the error page callback .
12731	Add a route to the router .
12732	Resolve a route .
12733	Resolve a non - literal route .
12734	Normalize a regex or wildcard pattern .
12735	Return the response as a list of bytes .
12736	Add a header to the response .
12737	Set a cookie .
12738	Return a string representation of the status code .
12739	Return the Content - Type header .
12740	Get all values for a given key .
12741	Delete a directory and all its contents .
12742	Get a list of open file descriptors .
12743	Print file type stats .
12744	Run the rejester .
12745	Attempt to fetch data from S3 .
12746	Get a list of lines from a file .
12747	Generate a random species pair .
12748	Returns a random adjspecies pair .
12749	Morph a sentence .
12750	Get the similarity of a query pair .
12751	Convert a sentence to Hiragana .
12752	List entities in a sentence .
12753	Shortsum a review .
12754	Show keywords for a given app .
12755	Get the chrono for a given sentence .
12756	Create a new SCP stage .
12757	Initialize a list of stages .
12758	Initialize all stages .
12759	Run a single chunk of text .
12760	Run the writers .
12761	Run an incremental transform on a stream item .
12762	Replace a pipeline with a new config .
12763	Create a WSGI application .
12764	Given a list of sentences return a dictionary of equivalences .
12765	Returns True if all mentions are in chain_mentions .
12766	Returns True if any of the target mentions are in chain_mentions .
12767	Given a rating and a list of tokens return a list of matched mentions .
12768	Given a stream item and an aligner data return a list of matched tokens .
12769	Create a new ner file .
12770	Align a chunk with a NER XML file .
12771	Terminate the child process .
12772	Multiplies p by n .
12773	Fix emails in text .
12774	generate strings identified as sentences
12775	make a sortedcollection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to unicode .
12778	Create a cleansed file from a list of chunks .
12779	Create a new ner file .
12780	Remove punctuation and whitespace from span .
12781	Align a chunk with a ner file .
12782	Make absolute paths for streams .
12783	Instantiate a pipeline config from the given config dict .
12784	Generate a john - smith - corpus .
12785	Remove invisible text from html .
12786	Given a HTML string return a clean - visible HTML string .
12787	Create a clean visible file .
12788	Remove punctuation and whitespace from a string .
12789	This is the main entry point for the script .
12790	Try to load a stage from a module .
12791	Load external Stages from a file .
12792	Load Stages from a module .
12793	Initialize a stage .
12794	Read a sequence of bytes from a byte stream .
12795	Return True if the given href is a valid domain .
12796	Create a list of labels based on the offset type .
12797	yield all file paths under input_dir
12798	Get a list of tasks .
12799	Get a random row from the available set .
12800	Yield tokens from a DOM document .
12801	Get a list of sentences from a NER DOM .
12802	Return a function that retries the given function .
12803	return True if okay raise Exception if not
12804	Get S3 bucket from config .
12805	Decode data into a streamcorpus . Chunk
12806	Get a single chunk from a key .
12807	Convert a stream_id to a kvlayer key .
12808	Convert a kvlayer key to a stream id .
12809	Generate a key for a stream item .
12810	Main entry point for the pony server .
12811	Build the argument parser .
12812	Add xpaths to a stream item .
12813	Given a list of SIS sentences and a list of SIS sentences return a list of tokens .
12814	Convert a list of SIS tokens into a sequence of offsets .
12815	Convert char offsets to xpaths .
12816	Add a tag to the list of tags .
12817	Return the XPath representation of the piece .
12818	Return the index of the text element .
12819	Iterate over all descendants of elem .
12820	Return a list of elements from source .
12821	Select elements with the given name .
12822	Select elements that match the given name pattern .
12823	Select an attribute from a list of elements .
12824	Returns an iterator over the following siblings of elem .
12825	Make a pretty - print representation of an XML element .
12826	Call the inkscape command .
12827	Export a file using Inkscape .
12828	Convert svg file to PDF file .
12829	Convert an SVG file to a PNG file
12830	Returns a Jinja2 Environment for the given file path .
12831	Set up the template file .
12832	Fill the file with the contents of doc_contents .
12833	Save the content of the document to a file .
12834	Create a Document instance from a template file path .
12835	Replace HTML characters with SVG code .
12836	Render the image to a file .
12837	Render the template to a PDF .
12838	Parse an XML source string into an expat parser .
12839	Parse an HTML document and return the first element .
12840	Return an HTML fragment from a source string .
12841	Insert text at the end of the document .
12842	Insert node before refNode .
12843	Returns a shallow copy of this element .
12844	Execute the command .
12845	Return a string representation of the given node .
12846	Insert a child into the XML tree .
12847	Parse config file .
12848	Get Google credentials .
12849	Create event datetimes .
12850	Create a Google calendar event .
12851	Main entry point for the event loop .
12852	Get the extension of a file .
12853	Add an extension to a file .
12854	Returns a temporary file .
12855	Remove files with the given extension from the given workdir .
12856	Convert csv file to json file .
12857	Replace the content of a file with a new string .
12858	Parse the HTML .
12859	Check if the next tag is a link .
12860	Create italic tag .
12861	Create a strong tag .
12862	Create underline tag .
12863	Parse the attributes of a tag .
12864	Remove line breaks from a tag .
12865	Parse the query string from a URL .
12866	Parse an attribute .
12867	Translate key values from translations .
12868	Return a JSON string representation of the object .
12869	Find all files in folder_path that match regex .
12870	Concatenate multiple strings into one string .
12871	Returns True if full starts with part .
12872	Returns True if part is contained in full .
12873	Returns the length of a string .
12874	Convert a sequence into a boolean .
12875	Iterate over a sequence of strings .
12876	Given a sequence of strings return the values for the given tableid and key .
12877	Replace HTML entities with HTML entities .
12878	Check that svg_file is a valid SVG file .
12879	Merge two SVG files .
12880	Merge multiple PDFs into one PDF file .
12881	Embed a font file to an SVG file .
12882	Embed a font file to an SVG file .
12883	Check that inputs are of the correct type .
12884	Check that the function is callable and has exactly one argument
12885	Recursively calls the function and returns the result of the function
12886	Create an input from a list of dictionaries .
12887	Recursively walks the input options and adds them to the output .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize an AST into a list of strings .
12892	Change the encoding of an XML file .
12893	Save a QR code to a file .
12894	Launch a Melody input .
12895	Call a command and return its return code .
12896	Convert a tex file to a PDF file .
12897	Returns a list of options for the given psy .
12898	Transform a geometry to a spatial reference .
12899	Returns an ogr . Geometry object .
12900	Expand a list of integers .
12901	Return the intersection of this Envelope and another Envelope .
12902	Returns True if this Envelope intersects the other Envelope .
12903	Returns a polygon of the ring .
12904	Create a Dataframe from Z N and M .
12905	Write a dataframe to a file .
12906	Select rows where condition is True .
12907	Return the table at the given nuclei .
12908	Return the intersection of this table and the given table .
12909	Returns a new table where the columns are not in the given table .
12910	Select elements that are odd and even .
12911	Select elements that are even and odd .
12912	Select elements that are evenly even .
12913	Return a new table with the error of the current table .
12914	Returns the mean error of the model .
12915	Returns a table with the binding energy .
12916	Convert from spherical harmonics to linear harmonics
12917	S1 - N algorithm .
12918	Convert from spherical harmonics to Pascals
12919	S1P equation .
12920	Return a new Table with the values derived from this table .
12921	Executes a function in a db session and returns the result .
12922	Derives a key from a master password .
12923	Bootstrap a new database .
12924	Search for domains by name .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract HBS from a file object .
12928	Convert a VSI path to a VSI path .
12929	The SRID of the EPSG .
12930	Main entry point .
12931	Initialize logging .
12932	Update a file from a URL .
12933	Returns a dictionary of all available drivers .
12934	Return an ImageDriver instance for the given path .
12935	Convert a geometry to a NumPy array .
12936	Rasterize a layer .
12937	Open a raster from a file - like object .
12938	Create a raster from a byte array of bytes .
12939	Copy a raster from one location to another
12940	Returns a dictionary of options .
12941	Create a raster file .
12942	Sets the GeoTransform to use .
12943	Read an array from the file .
12944	The envelope of the raster .
12945	Returns the ImageDriver instance .
12946	Create a new raster .
12947	Return a masked array with the given geometry .
12948	Returns the no - data value of the node .
12949	Reads a raster from the dataset .
12950	Resample the image to the specified size .
12951	Save the image to a file .
12952	Sets the projection of the dataset .
12953	Warp the raster to a WKT file .
12954	Calculate the chunk length for the given alph_len .
12955	Lookup the alphabet for a given character set .
12956	Encode the chunk at the given index .
12957	Convert a chunk to a long value .
12958	Get a chunk from the data .
12959	Decorator to memoize a function .
12960	Return a regular expression for the given filename .
12961	Convert a date string to a datetime object .
12962	Detect the timezone of the current locale .
12963	Convert the object to a dictionary .
12964	Activates a pdb hook .
12965	Return an emphasis representation of an object .
12966	Handle jobs from a worker .
12967	Main worker function .
12968	Run a worker pool .
12969	Sets the classification of this DeviceSettings .
12970	Send a message to the link .
12971	Turn on a light .
12972	Turn on a switch .
12973	Turn on the device with the given brightness .
12974	Turn off a device .
12975	Send messages from the queue .
12976	Send a reliable message to the link .
12977	Create an adapter for the given cmph wrapper .
12978	Sets the nature of this Order .
12979	Update the configuration from a dictionary .
12980	Reset all options to their default values .
12981	Set the config files .
12982	A generator over the options and their values .
12983	Get the default values for all options .
12984	Create the config file at the given index .
12985	Update all sections in a configuration dictionary .
12986	Read configuration from a toml file .
12987	Read configuration files .
12988	Return a list of names for the given option .
12989	Return a list of all sections .
12990	Helper function for _cmd_opts_solver .
12991	Add options to the parser .
12992	Build an argparse . ArgumentParser .
12993	Parse command line arguments .
12994	Helper function for zsh comp command .
12995	Run a ZSH comprehension .
12996	Return a list of bash commands for the given command .
12997	Run a bash command .
12998	Start a new master .
12999	Called when a new connection is made .
13000	Received a JSON response from the server .
13001	Called when the connection to the worker is lost .
13002	Called when a job is loaded .
13003	Called when a response is received from the worker .
13004	Close the job .
13005	Add a job set to the queue .
13006	Close the connection to the server .
13007	Wait for all waiters to finish .
13008	Add a result to the list of results .
13009	Wait for the future to be completed .
13010	Load the next job from the queue .
13011	Mark the job as done .
13012	Add a result to the queue .
13013	Cancel all jobs in the queue .
13014	Wait for all jobs to finish .
13015	Distribute jobs to self . _job_sources .
13016	Add a job set to the queue .
13017	Get a job from the queue .
13018	Return a job back to the pool .
13019	Add a result to a job .
13020	Called when a job set is done .
13021	Close the connection .
13022	Uniquify a list of strings .
13023	Returns True if obj matches regex .
13024	Return a list of entries that match the given filters .
13025	Get AWS region .
13026	Filter entries based on filters .
13027	Get the public DNS name of a host .
13028	Create an instance from a dictionary .
13029	Get the value of an attribute .
13030	Sort entries by attribute .
13031	Return a string representation of the table as a line of text .
13032	Create an instance from a boto instance .
13033	Returns True if the query matches the given filter .
13034	Display the IP address .
13035	Render a table of entries .
13036	Add a timestamp to the event dict .
13037	Setup logging .
13038	Create a structlog logger .
13039	Setup a Celery application .
13040	Get information about a worker .
13041	Delete a job .
13042	Create a switch option .
13043	Return a dictionary of config options .
13044	Set configuration values from a list of option strings .
13045	Command handler for config commands .
13046	Create complete zsh and bash files .
13047	Render a list of columns .
13048	Render a row of cells .
13049	Render a table .
13050	Takes a list of rows and converts them to strings .
13051	Return a function that can be used to colorize text .
13052	Get a color from a string .
13053	Return a random color .
13054	Get input from user input .
13055	Check if username and password are valid .
13056	Check if a token exists in the database .
13057	Decorate a resource function to check if the request has a token .
13058	Check if a process is running .
13059	Import a module and return an object .
13060	Get the current IP address .
13061	Perform a REST API request .
13062	Prepare post parameters .
13063	Start a DNA server .
13064	Render the template .
13065	Runs a command and returns the output of the command .
13066	Stream a list of command dictionaries .
13067	Stream commands to stdout .
13068	Calculate the number of network days between two dates .
13069	Return the path to the given command .
13070	Build SSH command .
13071	Build a SCP command .
13072	Copy entries to remote_path .
13073	Copy a list of SCP entries to a local path .
13074	Run a command on a list of hosts .
13075	Connect to an SSH entry .
13076	Load a LSI profile .
13077	Create a LsiProfile object from command line arguments .
13078	Create a relationship for the given part .
13079	Returns a list of related objects of the given type .
13080	Load relationships from the given source .
13081	Add a Content - Type part to the list .
13082	Load a part from the given data .
13083	Find an item by name .
13084	given an element parse out the proper ContentType
13085	Parse a string and return a list of Chatl objects .
13086	Builds the JWT .
13087	Assign a force field to all atoms in the ampal object .
13088	Find the maximum rad and npnp .
13089	Create a dictionary of force field parameters .
13090	Return a file - like object as a stream .
13091	Get a list of segments that start with the given name .
13092	Copy a directory from src_path to dest_path .
13093	Open an S3 bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all filenames in a directory .
13098	List all directories in a directory .
13099	Create a prefix for a given directory .
13100	Delete a file from the bucket .
13101	Checks to see if a token exists .
13102	Return the loud version of the current language .
13103	Delete a directory .
13104	Return the URL of the home page .
13105	Decorate a function to silence the home namespace .
13106	Return a breadcrumb for the project home page .
13107	Create a breadcrumb for the project home page .
13108	Get the energy of the interactions in the given ampal objects .
13109	Get the internal energy of an AMPAL object .
13110	Return a list of all hotspots .
13111	Get a Keeper token .
13112	Upload an ltd to a git repository .
13113	Check if we should skip a Travis event .
13114	Purge a key from Fastly .
13115	Register a build for a given product .
13116	Confirm a build .
13117	Recursively updates a dictionary with the contents of u .
13118	Main entry point for ltdconveyor .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split a path into a list of parts .
13122	Find a file from a path .
13123	Get the editor for the given file path .
13124	Process a module node .
13125	Generate HTML for a single chart .
13126	Generate HTML for a chart .
13127	Serialize a data object to a chart object .
13128	Patch json_data with vegas schema .
13129	Convert JSON data to HTML .
13130	Convert a dictionary to a Pandas DataFrame .
13131	Write a file to a folder .
13132	Return a chart class for the given chart type .
13133	Returns a tuple of X and Y fields .
13134	Create a reference to a GitHub user .
13135	Infer the URL of the tarball .
13136	Create a new Happy app .
13137	Delete an app .
13138	Decorate a class with an iterable attribute .
13139	Generate a random binary string of given length .
13140	Generate a random ip address .
13141	Return a random date from start to end .
13142	Return a session object .
13143	Make a request to the Heroku API .
13144	Create a build from a tarball .
13145	Check the status of a build .
13146	Generate a sequence of strings from the given prefix .
13147	Decorator to memoize a function .
13148	Decorate a function to return a list of unique results .
13149	Register all sub - commands .
13150	Get the root argparser .
13151	Get the description of the object .
13152	Get the help string .
13153	Run the command .
13154	Encode a dataset .
13155	Get a list of athletes .
13156	Get the last n activities .
13157	Request the activity list from the athlete .
13158	Request activity data from the athlete .
13159	Return the endpoint for an athlete .
13160	Return the URL for the activity endpoint .
13161	Make a request to the Golden Cheetah API .
13162	Create a build .
13163	Return a URL with authentication .
13164	Generate a random title for the given languages and genders .
13165	Generate a random person .
13166	Get a random last name .
13167	Render the data .
13168	Set the dataset to use .
13169	Render the chart .
13170	Check if type is valid .
13171	Return the URL for the request .
13172	Show the page in a web browser .
13173	Save the image to a file .
13174	Perform a request to the server .
13175	Return a PIL Image object from the URL .
13176	Write a URL to a file - like object .
13177	Returns a SHA - 1 hash of the contents of the template .
13178	Returns a random amount between min and max .
13179	Decorator to set the class s entity_name attribute .
13180	Return a dict of unprotected and protected claims .
13181	Return the signing keys as a list of dicts .
13182	Unpacks a metadata statement .
13183	Pack a metadata statement .
13184	Evaluate the metadata statement .
13185	Given a metadata dict and a federation_usage return the correct metadata dict .
13186	Add metadata statements to the request .
13187	Parse command line arguments .
13188	Add command line arguments to the argument parser .
13189	Apply logging options to log files .
13190	Log a message at verbose level .
13191	Return a dictionary mapping each letter to a number .
13192	Get anagrams in a word .
13193	Convert a class name to an AMP class .
13194	Transform timeseries data to a list of y - values .
13195	Get the last value from a timeseries .
13196	Validate that a page number is an integer .
13197	Get a page of items from an iterator .
13198	Chmod a file or directory .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request .
13202	Create a new resource .
13203	Update a metadata statement .
13204	Update the signature for a given location .
13205	Yields bundle contents .
13206	Create a bundle from the given data .
13207	Returns a list of URLs for the given asset type .
13208	Render the HTML for the given asset type .
13209	Returns a list of HTML tags for each asset type .
13210	Protocolise a URL .
13211	Find links to a given URL .
13212	Connect to the AMP server .
13213	Returns a list of all modules in the project .
13214	Import service modules .
13215	Convert a date parameter to a list of dates .
13216	Select fields from a nested dict .
13217	Convert a list of datetime objects into a list of datetime objects .
13218	Return the number of rows in the cursor .
13219	Print the cursor to stdout .
13220	Get a list of tasks from a list of tasks .
13221	Add default dependencies to a project .
13222	Add default Atypes to a project .
13223	Add default sequences to a project .
13224	Add a userrnd shot to a project .
13225	This handler is called when the model is saved .
13226	Create a global shot for the given sequence .
13227	Create all tasks for the given element .
13228	Connect to a peer .
13229	Send a packet to a peer .
13230	Get a value from a config file .
13231	Decorator to register a function as a nova customer process .
13232	Decorator to register a Cinder event type .
13233	Register a function as a Neutron event handler .
13234	Decorator to add a function to process Glance events .
13235	Decorator to register a function as a swift event handler .
13236	Decorator to add a function to process a keystone event .
13237	A heat event decorator .
13238	Add a factory to the registry .
13239	Remove a factory from the registry .
13240	Connect to the given factory .
13241	Receive data from a connection .
13242	Disconnect from a connection .
13243	Call a remote command .
13244	Create a multiplexed AMP connection .
13245	Called when an AMP connection is made .
13246	Called when data is received from the client .
13247	Send data to the device .
13248	Called when a connection has been lost .
13249	Get the local protocol for the given connection identifier .
13250	Called when a message is received from a remote device .
13251	Disconnect from a connection .
13252	Return a string centered on the terminal .
13253	Print a clock on the right .
13254	Return a version number as a string .
13255	Identify the unit framework for the given target unit .
13256	Raise a TraitError if the given value is not in the given target unit .
13257	Pads data_to_pad with the given block_size .
13258	Unpads a block of data .
13259	Sign a request using the self - signing mechanism .
13260	Gather metadata statements for a given context .
13261	Pretty print anagrams .
13262	Create an argument parser .
13263	Print anagrams in words .
13264	Handle incoming data .
13265	Called when a typekey is not registered .
13266	Create a function stub from a remote function URL .
13267	Ping a remote call .
13268	Return a regex that can be used to match commands .
13269	Parse an amp . AmpList from a string .
13270	Returns a string representation of the AMPList .
13271	Verify that the metadata statement is valid .
13272	Parse a JSON or JWT response .
13273	Dump a database to a file .
13274	returns a list of all databases on this server
13275	Get all local files in a directory .
13276	Sync a folder with S3 .
13277	Decorator to ensure that the user has access to a list of services .
13278	Login the user .
13279	Build a CLI from a list of modules .
13280	Create a new Fridge instance with readonly mode .
13281	Load the root JSON file .
13282	Generate a self - signed JWT .
13283	Create a JWT for a request signed by signing keys .
13284	Decorator to register a function as a library .
13285	Load all . py files in the test directory .
13286	Main entry point for librarian tests .
13287	Return the score of a given letter .
13288	Calculate the score of a word .
13289	Get a list of words .
13290	Returns True if word is a valid scrabble word .
13291	Search for the best answer .
13292	Run Stupidly simple code answers .
13293	Called when a string is received from the server .
13294	Returns the command and responder function for a given command .
13295	Parse the request values .
13296	Returns a deferred that resolves when a response is received .
13297	Write a response to the transport .
13298	Called when the connection is lost .
13299	Build a JSONAMP dialect receiver .
13300	Convert a JSON string to a KeyJar object .
13301	Load keys from a JSON string .
13302	Process a nova customer event .
13303	Process a Cinder customer event .
13304	Process a neutron event .
13305	Process a glance customer event .
13306	Process a swift event .
13307	Process a keystone customer event
13308	Process a heat customer event .
13309	Starts a Wsgiref server .
13310	Print a message to stdout .
13311	Print an error message to stderr .
13312	Register a Command subclass .
13313	Register a Command subclass .
13314	Returns the string representation of the argument .
13315	Create an argument from a string .
13316	Update the completers dictionary with the values in cdict .
13317	Start the Ternya connection .
13318	Initialize a MQ connection .
13319	Initialize the service modules .
13320	Init the nova consumer .
13321	Init cinder consumer .
13322	initiate neutron consumer
13323	initiate a glance consumer
13324	Init heat consumer .
13325	Enable notification for a given Openstack component .
13326	Get information about a song .
13327	Download a music file .
13328	Execute the instruction .
13329	Load a module by its name .
13330	Call a function .
13331	Dump a MySQL database to a file .
13332	Render a ditaa image .
13333	Call the atexit function .
13334	Run the application .
13335	Context manager to change the current working directory .
13336	Copy a directory or a directory to a directory .
13337	Set up the debugger .
13338	Get the mtime of a file .
13339	Check if a file has been modified or not .
13340	Synchronize all files in the directory .
13341	Remove all files in the directory .
13342	Scrape a feed from a URL .
13343	Download the image .
13344	Check if the image has changed .
13345	Returns a template . Node subclass .
13346	Find the filename and line number of the calling function .
13347	Get the defining component of the given PE_PE .
13348	Command line entry point for ooaofooa .
13349	Find a symbol in the stack .
13350	Returns True if pe_pe is contained in root .
13351	Check if PE_PE is a global PE_PE .
13352	Get the name of the data type .
13353	Get the list of related attributes .
13354	Create an Enum object from an EDT .
13355	Create a bridge function .
13356	Create an EE object from an external entity .
13357	Create a function that can be used to perform a sync operation .
13358	Create a constant from a CNST_SYC .
13359	Create an operation class .
13360	Create a derived attribute .
13361	Create a class for the given object .
13362	Create a simple association .
13363	Create a linked association .
13364	Create an association from a relationship .
13365	Create a component from a model .
13366	Perform a single RPC call on a socket .
13367	Send a ACCEPT message to a socket .
13368	Send a REJECT message to a socket .
13369	Send an exception to a socket .
13370	Send a call to the broker .
13371	Establish a connection to a worker .
13372	Dispatch a reply .
13373	Guess the type name from the given value .
13374	Deserializes a value into a Python object .
13375	r \ (
13376	r \ )
13377	Get a single feature from the index .
13378	Get one or more content ids .
13379	Put features into the index .
13380	Delete the document with the given id .
13381	Delete all mappings from the index .
13382	Delete the index .
13383	Perform a scan on a set of key ranges .
13384	Returns a generator that yields the ids of the objects that match the given key ranges .
13385	Scan a prefix for features .
13386	Returns a generator that yields the ids of all the IDs that match the given prefix .
13387	Perform a fulltext scan .
13388	Perform a fulltext scan .
13389	Perform a keyword scan .
13390	Get the IDs of all keywords in a query .
13391	Scan the index for ids that match the given value .
13392	Return a list of feature names .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Returns the number of bytes in the given dictionary of features .
13400	Count the number of bytes that match the filter predicates .
13401	Return a human - readable string representation of a Counter .
13402	Process docopt arguments .
13403	Default error formatter .
13404	Return a string representation of a link .
13405	Return a string representation of a unique identifier .
13406	Check the uniqueness constraint for the given model .
13407	Check the integrity of a link .
13408	Check the integrity of a subtype .
13409	Return a function that returns the index of the given feature names .
13410	Convert an integer to a byte string .
13411	Put a list of items into the table .
13412	Delete all entries in the table .
13413	Scan the cache for the given key ranges .
13414	Return a list of ids for the given key ranges .
13415	Scan the index for the given value .
13416	Perform a scan of the index with a prefix .
13417	Returns the key of the first key that matches the given prefix .
13418	Helper function for _index_scan_prefix .
13419	Define a new index .
13420	Put an index into the KVL .
13421	Put a raw value into an index .
13422	Iterate over the keys for a given index .
13423	Return the index with the given name .
13424	Check that pypi_package_name is a valid pypi package .
13425	Add a direction to a string .
13426	Get the name of the type .
13427	Get the refered attribute .
13428	Build a core type element .
13429	Builds an XML element representing an enum type .
13430	Builds a struct type from an SDT .
13431	Build a user type element .
13432	Builds a type from an S_DT .
13433	Builds the XML representation of a complex type .
13434	Builds a XML element representing a complex type .
13435	Builds a XML Schema from a model .
13436	Prettify an XML string .
13437	Fetch bikes from stolen - bikes .
13438	Set the position of the node based on the lexer .
13439	Decorator to track production information .
13440	r \ = =
13441	r ! =
13442	r \ - >
13443	r \ > =
13444	r \ > =
13445	r \ =
13446	r \ .
13447	r \ [
13448	r \ [
13449	r \ ?
13450	r \ <
13451	r \ >
13452	r \ +
13453	Create a new queue .
13454	Delete a queue .
13455	List all queues
13456	List all exchanges
13457	Purge a queue .
13458	Create a multipart message .
13459	Read the text from the tesseract server .
13460	Check if text is visible .
13461	Parse command line options .
13462	Serialize a value to a string .
13463	Serialize an association .
13464	Return a string representation of a class .
13465	Search for files using n - grams .
13466	Search for elements that match the given query .
13467	Partition a collection according to a condition .
13468	Run the server .
13469	Return the bidi context .
13470	Find a link between two instances .
13471	Create a formalized representation of this link .
13472	Compute the lookup key for the given instance .
13473	Compute the index key for the given instance .
13474	Get the type of an attribute .
13475	Create a new instance of the class .
13476	Return an iterator over all instances of this model .
13477	Add a new class to the model .
13478	Send a message to a ZMQ socket .
13479	Receive messages from a ZMQ socket .
13480	Run vulture and print dead code .
13481	Parse email addresses from a list of strings .
13482	Returns a function that can be used as an RPC function .
13483	Return a dictionary of RPC specifications for the given app .
13484	Normalize postcode .
13485	Read the next value from the stream .
13486	Accept an S_SYS instruction .
13487	Accept a C_C instruction .
13488	Accept a PE_PKG instruction .
13489	Get the brightness of the image .
13490	Match a pattern against a list of arguments .
13491	Find the first occurrence of a character in the document .
13492	Returns an extra selection for the given character .
13493	Called when the cursor position has changed .
13494	Return the exc_info tuple .
13495	Create an inputhook for Qt4 .
13496	Get a mapper instance .
13497	Decorator to add a URL pattern to the router .
13498	Register a function as a URL .
13499	Add a pattern to the data store .
13500	Add a path to the registry .
13501	Call the specified method on the given URL .
13502	Execute the console .
13503	Called when the user presses the up button .
13504	Returns True if the cursor is at the end of the history .
13505	Find the previous occurrence of substring in the history .
13506	Find the next occurrence of substring in the history .
13507	Handle the execute reply message .
13508	Check if history is locked .
13509	Get the edited history at the given index .
13510	Set the history .
13511	Store the current state of the history .
13512	This method is called when the user closes the connection .
13513	Build a collection of records from a DataFrame .
13514	Convert a collection of records into a pandas DataFrame .
13515	Performs a spin - batch operation on a DataFrame .
13516	Set the attributes of the object .
13517	Subscribes to all topics
13518	Log a message .
13519	Merge a list of lists into a sorted list .
13520	Iterate over a remote iterator .
13521	Convert a notebook from v1 to v2
13522	Return the supported platform .
13523	Get an importer for a given path item .
13524	Return a StringIO object .
13525	Parse a version string .
13526	Check if setuptools is available .
13527	Add a dist to the list .
13528	Find all plugins in the plugin_env .
13529	Get the path to the cache for the given archive .
13530	Parse an entry point .
13531	Parse the PKG_INFO metadata .
13532	Compute the dependencies for this package .
13533	Parse a filename into its name and format .
13534	Collapses leading whitespace into a single line .
13535	Disables the completion widget .
13536	Called when the completion widget is shown .
13537	Return the current text cursor .
13538	Update the currently selected item .
13539	Register all models with the admin site .
13540	Return a list of disk partitions .
13541	Get system CPU times .
13542	Return a list of cpu times .
13543	Read raw data from stdin .
13544	Read raw block from stdin .
13545	Update tab bar visibility .
13546	Create a new tab with the current kernel .
13547	Add a tab with a frontend .
13548	Add an action to the menu .
13549	Make a dynamic magic function .
13550	Populate the magic menu .
13551	Called when the user closes the window .
13552	Prompt for a password .
13553	Check if a password is correct .
13554	Render an editable boolean cell .
13555	Return an indented short title for the given item .
13556	Collect editable boolean values .
13557	Toggles a boolean for an object .
13558	If TREE_EDITOR_OBJECT_PERMISSIONS is set return True .
13559	Returns True if the user has the delete permission for the given object .
13560	Add n children to the graph G .
13561	Create a bintree .
13562	Submit the given jobs to the view .
13563	Validate that the tree G is valid .
13564	Create a color table from the color templates .
13565	Create a copy of this color scheme .
13566	Add a new color scheme to the table .
13567	Set the active color scheme .
13568	Return the path to the site - packages .
13569	Handle iopub messages .
13570	Handle a request from the stdin .
13571	Wait for the kernel to finish .
13572	Set the style to use .
13573	Get the format for the given token .
13574	Get the format from the document .
13575	Returns a QTextCharFormat object for the given token and style .
13576	Find a command in a list of paths .
13577	Normalize a path .
13578	Check that the given value is a valid namespace .
13579	Check if value is a valid entry point map .
13580	Return True if src ends with a blank line .
13581	Return True if src ends with two blanks .
13582	Transform assign system .
13583	Transform assign magic function .
13584	Transform a classic prompt line .
13585	Transform an IPython prompt line .
13586	Push lines to the stack .
13587	Check if there is more than one line in the buffer .
13588	Find the number of spaces and whether the line should be indented .
13589	Store a list of lines into the buffer .
13590	Reset the internal state of the source .
13591	Handle cell magic .
13592	Append lines to cell_magic_parts .
13593	Transform a cell .
13594	Push input lines to the input splitter .
13595	Initialize the observers .
13596	Post a notification to all registered observers .
13597	Return a set of observers for a given notification type and sender .
13598	Register an observer for a given type and sender .
13599	Create a new background job .
13600	Update the status of the running jobs .
13601	Print a group of jobs .
13602	Flush a group of jobs .
13603	Update the status of the job .
13604	Update the status of the job .
13605	Initialize the background job .
13606	Insert a new value at the given index .
13607	Returns a copy of the file .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the current working directory .
13612	Move the route to the given state .
13613	Returns the energy of the cities in the given state .
13614	Returns a dict of default values for the given keys
13615	Check if the table exists .
13616	Convert a list of values to a dictionary .
13617	Returns a list of SQLAlchemy expressions for the given check .
13618	Print a warning message to stderr .
13619	Parse the config file .
13620	Render a table of rows .
13621	Create a link to a URL .
13622	Render a javascript file .
13623	Return a link to a CSS file .
13624	Create an image tag .
13625	Returns the difference of value and arg .
13626	Multiply a number by another number .
13627	Divide a number by another number .
13628	Returns the remainder of the given value by the given argument .
13629	Get the verbose name of a model form or model .
13630	Split user input into pre esc and ifun .
13631	Add options to the parser .
13632	Add a built - in value to the dictionary .
13633	Remove a built - in value from the registry .
13634	Deactivates all builtins .
13635	Find the base URL for the given URL name .
13636	Return a list of links that have a rel attribute set .
13637	Convert a shell list to a list of strings .
13638	Run coverage script .
13639	Add an action to a dash .
13640	Append an action to the parser . values . actions .
13641	Parse command line options .
13642	Print coverage help .
13643	Handles the help command .
13644	Check if arguments are valid .
13645	Execute a Python script .
13646	Print coverage information .
13647	Unserializes a pickle object .
13648	Set the display hook .
13649	Calls the given function and logs any uncaught exceptions .
13650	Check if the given URL is a valid URL .
13651	Validate a URL .
13652	Validate a URL container .
13653	Helper function for pulling values from the user namespace .
13654	Select n random ports .
13655	A decorator for creating a remote function .
13656	Returns a function that can be used as a parallel function .
13657	Map a sequence of sequences .
13658	Get the last n lines from the readline history .
13659	Sets the auto - indent flag .
13660	Initialize the logstart command
13661	Save sys module state .
13662	Restore sys module state .
13663	Register a post - execute function .
13664	Create a new FAKEMOD module .
13665	Cache the main module .
13666	Initialize the user namespace .
13667	Return a list of all namespaces referenced by this module .
13668	Reset the state of the module .
13669	Delete a variable .
13670	Remove all variables that match the given regex .
13671	Push variables to the user namespace .
13672	Return a dict of information about an object .
13673	Helper function for ofind_property .
13674	Find an object by name .
13675	Inspect an object .
13676	Initialize the history manager .
13677	Called when an exception is raised .
13678	Show the traceback of an exception .
13679	Print traceback to stdout .
13680	Show a syntax error .
13681	Insert the next line in the readline .
13682	Completes the given text .
13683	Set a custom completer .
13684	Set the current namespace and global namespace for the completer .
13685	Run a line magic function .
13686	Find a magic by name .
13687	Define a macro in the user namespace .
13688	Execute a command and return its exit code .
13689	Auto - rewrite input .
13690	Return a dictionary of user variables .
13691	Convert a dictionary of user expressions into a dictionary of strings .
13692	Evaluate an expression and return the result .
13693	Execute a file in a safe way .
13694	Run a cell magic .
13695	Run a cell .
13696	Run a list of AST nodes .
13697	Enable pylab .
13698	Expand variables in a command .
13699	Create a temporary file and store it in self . tempfiles
13700	Extract input lines from history .
13701	Find user code .
13702	Cleanup temporary files and reset the session .
13703	Broadcast a message to a sender .
13704	Send a message to one or more targets .
13705	Decorator to skip test if skip_condition is True .
13706	Decorator to raise KnownFailureTest if fail_condition is True .
13707	Decorator to mark a function as deprecated .
13708	List all profiles in a directory .
13709	List all bundled profiles .
13710	Find a distribution by its key .
13711	Run a command and wait for it to finish .
13712	Returns the full path to a file or None if the file does not exist .
13713	Read the next line from the stream .
13714	Send a string to the child process .
13715	Send an interrupt to the child .
13716	Recompile unicode regexes as bytes regexes . Overridden in subclass .
13717	Expects a pattern to be matched .
13718	The expect_any method will loop until a match is found .
13719	Recompile bytes regexes as unicode regexes .
13720	Search for the first occurrence of a string in the buffer .
13721	Search the buffer for the best match .
13722	Create a listener for a progress monitor .
13723	Unpack a directory .
13724	Emit a message to the console .
13725	Return the last error from the log .
13726	Execute a command and return its output .
13727	Find the source file for the given filename .
13728	Returns a list of arcs that have been executed .
13729	Returns a list of arcs that have not been executed .
13730	Returns a list of unpredicted arcs .
13731	Return a list of branch lines .
13732	Returns the total number of branches .
13733	Return a dictionary of missing arcs .
13734	Return a dictionary of branch stats .
13735	Set the precision .
13736	Returns the number of statements that have been executed and the number of branches that were executed .
13737	Return a string representation of the PC covered .
13738	Highlight text from a list of needles .
13739	Highlight the given string using the given keywords .
13740	Highlight words in a string .
13741	Run a function in a separate thread .
13742	Unquote the end of a string .
13743	Indent a string .
13744	Return a marquee of the given width .
13745	Format a string in screen format .
13746	Return a dedented version of text .
13747	Return a list of paragraphs wrapped by newlines .
13748	Find the optimal number of rows and columns .
13749	Returns the value at the given index or the default value if the index is out of bounds .
13750	Compute an item matrix from a list of items .
13751	Return a new SList with the given fields .
13752	Build the kernel arguments .
13753	Initialize the SSH connection .
13754	Pretty print a Python object .
13755	Pretty print an object to stdout .
13756	Get the mro of the given class .
13757	Pretty print an object .
13758	Create a function to print a sequence of objects .
13759	Create a printer function for a dictionary .
13760	Pretty print a super class .
13761	Pretty print a re . compile pattern .
13762	Print the type of an object .
13763	Pretty print a function .
13764	Pretty print an exception .
13765	Register a printer function for a given type .
13766	Register a function for a given type .
13767	Add text to buffer or write to output .
13768	Add a breakable group to the stack .
13769	End a group .
13770	Flush the buffer .
13771	Pretty print an object .
13772	Create a ColorSchemeTable for the exception colors .
13773	Writes a row into an ODS sheet .
13774	Get the text from the clipboard .
13775	Get the contents of the clipboard .
13776	Get text from the clipboard .
13777	Returns a path to a temporary directory that can be used for building .
13778	Rekey all keys in a dictionary .
13779	Extract dates from a python object .
13780	Squashes dates .
13781	Convert a datetime object to a date string .
13782	Convert a Python object to a JSON string .
13783	Check if the site directory exists and if so create a PthDistributions object .
13784	Write a script to the install directory .
13785	Sleep for a given number of seconds .
13786	Create a parser for the given command .
13787	convert . pyx extensions to . c
13788	Send a connection request to the iopub .
13789	Build a PackageFinder object .
13790	Called when a log level has changed .
13791	Create a default logger .
13792	Called when flags have changed .
13793	Print help for aliases .
13794	Print help for all flags .
13795	Print a list of subcommands .
13796	Print help for all configurables .
13797	Print examples .
13798	Update the config with the given config .
13799	Initialize a subcommand .
13800	Flatten the flags and aliases .
13801	Parse command line arguments .
13802	Load a config file .
13803	Generate the configuration file .
13804	Downsample k elements from an array .
13805	Format a dictionary of information .
13806	Write a message to the output .
13807	This method is called when the configuration has changed .
13808	Get help for a given class .
13809	Get the help text for a given trait .
13810	Generate a configuration section for the given class .
13811	Clears the instance of the given class .
13812	Create an instance of the given class .
13813	Return a tuple of error code and traceback .
13814	This function is called when an exception is raised .
13815	Flush the socket .
13816	Start all channels .
13817	Read data from a file - like object .
13818	Read a string from a file object without interrupting .
13819	Wrapper around subprocess . Popen .
13820	Split a string into a list of tokens .
13821	Compress a DHIST into a list of lists .
13822	Register a magics class .
13823	Record a magic in a dictionary .
13824	Decorator to mark a function as a magic method .
13825	Decorator to register a function as a magic marker .
13826	Return a dictionary of documentation for all magics .
13827	Register a list of magic objects .
13828	Register a function as a magic .
13829	Format a LaTeX string .
13830	Parse command line options .
13831	Set the default option for a magic function .
13832	Create a page with a guiref .
13833	Create a Task object from a callable .
13834	Get information about a task with the given label
13835	Get the callable from the task s function info .
13836	Calculate the next run .
13837	Submit this task to the run task channel .
13838	Run the task .
13839	Run asap .
13840	Run a callable for a given number of iterations .
13841	Run the callable once .
13842	Find the url file .
13843	Bind the kernel to the engine .
13844	Run test steps .
13845	Create an interrupt event .
13846	Wait for the process to finish .
13847	Filter a namespace by name and type .
13848	List all objects in a namespace .
13849	Check that all options in ex_op are mutually exclusive .
13850	Draw the current figure if interactive .
13851	Flush all figures .
13852	Send a figure to the backend .
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate n random ports .
13856	Initialize the web application .
13857	Handle SIGINT signal .
13858	Confirm shutdown of Notebook Server .
13859	Shuts down all kernels
13860	Calculate price options for a given number of days .
13861	Replace all occurrences of the given dict with the given text .
13862	Render the prompt with the given name .
13863	Launch a kernel .
13864	Create a zip file .
13865	Fix version in metadata . txt .
13866	Returns True if obj is a mappable object .
13867	Get a partition of a sequence .
13868	Monkeypatch pexpect . spawn .
13869	Run a source file and return the output .
13870	Run a list of commands .
13871	Generates a coverage report from a list of morfs .
13872	Create an XML file for the given analysis .
13873	Fetch a file from pi . super - computing . org .
13874	Reduce a list of frequency frequencies .
13875	Compute n - digit frequency frequencies from a txt file .
13876	Convert a txt file to a list of digits .
13877	Calculate the frequency of each digit in a list of digits .
13878	Calculate the frequency of two digits .
13879	Calculate the frequency of a number of digits .
13880	Plot two - digit frequency frequencies .
13881	Plot one digit frequency in pi .
13882	Print an expression in debug mode .
13883	Returns the URL for the given view .
13884	Returns True if prefix is a private name .
13885	Create a test suite from a list of file paths .
13886	Run a debug script from a source code .
13887	Debug a test script . src is the script as a string .
13888	Run a debug script on a module .
13889	Return a dict of all files in the hashroot .
13890	Remove all files in the hashroot .
13891	Return a list of all keys in the directory .
13892	Returns True if the given record is allowed .
13893	Return True if any of the matchers match the given record .
13894	Format an error and add to the test s captured logging .
13895	Embed an interactive shell .
13896	Main loop .
13897	Create a new csv writer and a new one .
13898	Prepare the locale directories for the given languages .
13899	Write POEntry objects to a dictionary of POEntry objects .
13900	Write header to po file .
13901	Subscribe to a user .
13902	Initialize the command line parser .
13903	Run a python module .
13904	Run a Python file .
13905	Create code from a Python source file .
13906	Load code from a . pyc file .
13907	Return an HTML table from an item matrix .
13908	Set the current value .
13909	Cancels the completion of the window .
13910	Select an index from a given row and column .
13911	Select up the cursor .
13912	Select down the cursor .
13913	Move the cursor to the left .
13914	Move the cursor to the right .
13915	Update the list .
13916	Calculate the frequency of words in text .
13917	Print word frequency counts .
13918	Return a string representation of the XML document .
13919	Write the document to a file .
13920	Validate a pin .
13921	Send a pin to a list of topics .
13922	Delete a shared pin .
13923	Send a user pin .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List all subscriptions for a user .
13927	Decorator to monitor a function .
13928	Start a progress monitor .
13929	Context manager to start a new task .
13930	A context manager for a subtask .
13931	Update the progress monitor .
13932	Create a submonitor .
13933	Mark the task as done .
13934	Display a string as a page .
13935	Move the package to a new location .
13936	Load a list of config files into a Config object .
13937	Load config from file .
13938	Read a config file into a dictionary .
13939	Load a flag from a dict or Config object .
13940	Decode command line arguments into unicode strings .
13941	Load configuration from command line arguments .
13942	Load the configuration from the given arguments .
13943	Parse command line arguments .
13944	Convert self . parsed_data to self . config .
13945	Find a module by name .
13946	Add a callback to be called when a stop event is received .
13947	Called when a process is started .
13948	Called when the process has stopped .
13949	Interrupt the current process then kill the current process .
13950	Return a list of command line arguments .
13951	Start the MPILauncher .
13952	Send a file to a remote host .
13953	Fetch a file from a remote host .
13954	Count the number of engines .
13955	Start the specified number of engines .
13956	Start a Win HPC job .
13957	Return a default context dict .
13958	Parse the job id from the output .
13959	Write a batch script to disk .
13960	Start the job .
13961	Create a context menu .
13962	Append a jpg to the list .
13963	Append a PNG image to the display .
13964	Append a SVG element to the document .
13965	Add an image to the document .
13966	Copy an image to the clipboard .
13967	Returns a QImage resource for the given name .
13968	Insert an image into the cursor .
13969	Insert SVG data into the cursor .
13970	Save image to file .
13971	Called when the exit_now_changed signal is received .
13972	Initialize the environment .
13973	Re - rewrite the input .
13974	Ask the user to exit the shell .
13975	Set the next input text .
13976	Read config from a file .
13977	Get a list of values from a config file .
13978	Get a list of lines from a section option .
13979	Set the timid flag from an environment variable .
13980	Set attributes from keyword arguments .
13981	Load config files from a config file .
13982	Set an attribute from a config file .
13983	Expands a user path .
13984	Set the list of delimiters to use .
13985	Split a line into parts .
13986	Return a list of global keywords that match the given text .
13987	Return a list of matches for the given text .
13988	This function is called when the user changes the splitter .
13989	Return a list of files that match the given text .
13990	Return a list of aliases that match the given text .
13991	Return a list of matches for text .
13992	Return a list of default arguments for the given object .
13993	Completes the given text .
13994	Completes the given text with the given state .
13995	Return True if the record matches one of the tests .
13996	Return a list of records that match the given check .
13997	Extract a subdict from a message record .
13998	Check if the prompt is quiet .
13999	Write the output prompt to stdout .
14000	Write format data to stdout .
14001	Log the output of the prompt .
14002	Raise an exception if the object is freezed .
14003	Convert a mysql timestamp string to a Timestamp object .
14004	Called when an event loop has changed .
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the shell .
14008	Perform one iteration of the loop .
14009	Publish a pyin message .
14010	Abort a request .
14011	Send a clear reply to a stream .
14012	Return a string representation of a topic .
14013	Send shutdown message to the iopub socket .
14014	Add modules to the stack .
14015	Remove all modules from the stack .
14016	Return the absolute path of a directory .
14017	Return True if the given file is a file - like object .
14018	Check if the given object is a class .
14019	Check if path is a package .
14020	Get the package name of the given file .
14021	Return a string representation of a label .
14022	Return a function that returns the last key that matches the given regex .
14023	Transplant a function .
14024	Return a transplanted class .
14025	Get system CPU times .
14026	Get the command line for the process .
14027	Return a list of open files for the process .
14028	Return a list of nt_connection objects for this process .
14029	Check if user has a group .
14030	Resolve a class from a path .
14031	Return the percentage of usage in percent .
14032	Memoizes a function .
14033	Decorator to mark a function as deprecated .
14034	Login to PODocs .
14035	Get the key from the URL .
14036	Ensure that the temporary directory exists .
14037	Clear temporary files .
14038	Upload a file to the GDoc .
14039	Synchronizes the PODocs file .
14040	Download data from GDOCS to POD files .
14041	Upload po files to ODS .
14042	Removes the empty file from the temporary directory .
14043	Create a new qtconsole connection .
14044	Check if a URL is accessible from this machine .
14045	Check if a URL has a given contents .
14046	Get the HTTP response code from a URL .
14047	Compare the content type of a URL .
14048	Compare the response code of a URL .
14049	Validate that data is a dict .
14050	Clear stdout and stderr output .
14051	Find the path to a command .
14052	Create a list of CodeUnits from a list of Morf files .
14053	Return the root name of the module .
14054	Returns a file - like object containing the source of the code .
14055	Returns True if the file should be a python file .
14056	Calculate the total number of seconds .
14057	Wait for the result to be available .
14058	Wait for a message to complete .
14059	Get a dictionary of engine ids and their results .
14060	Abort all messages in the queue .
14061	Return the elapsed time in seconds .
14062	Wait for all tasks to finish .
14063	Republish the content to the displaypub .
14064	Wait until all outputs are ready .
14065	Wait for one or more messages to complete .
14066	Return the absolute path of a file .
14067	Given a list of patterns return a list of absolute paths .
14068	Extract the separator from a string .
14069	Find all python files in a directory .
14070	Return the filename relative to the current directory .
14071	Return the canonical filename for the given filename .
14072	Get the zip data from a zip file .
14073	Return True if fpath starts with one of the dirs .
14074	Return True if fpath matches one of the patterns .
14075	Map a path to a canonical filename .
14076	Start event loop for Qt4 .
14077	Start a wx event loop .
14078	Main loop for Tkinter .
14079	Start a GTK kernel .
14080	Cocoa loop .
14081	Enable a GUI .
14082	Returns the GOE of the given number of points .
14083	Calculate the difference between the center eigenvalue and the eigenvector .
14084	Calculate the difference between the center eigenvalues of the ensemble .
14085	Create a new instance of the class .
14086	Parse a YAML file into a list of steps .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Loads the config file .
14090	Initialize the profile directory .
14091	Create a default config file .
14092	Write to a file .
14093	Erases all lines and arcs .
14094	Return a dictionary of line data .
14095	Returns a dictionary of arc names and arcs .
14096	Write data to a pickle file .
14097	Read data from a file .
14098	Read raw data from a file .
14099	Read lines and arcs from a file .
14100	Combine parallel data .
14101	Add line data .
14102	Add arc data .
14103	Add executed lines and arcs to the hash .
14104	Returns a dictionary with the number of lines in each file .
14105	Get pasted lines .
14106	Main loop .
14107	Replace a line in the history with a new line .
14108	Prompt the user for input .
14109	Edit the last syntax error .
14110	Check if the error should be recompiled .
14111	Exit the program .
14112	Get the URL and revision of the VCS .
14113	Create a new frontend master .
14114	Initialize colors .
14115	Returns a tuple of identity url pub_url location
14116	Convert Robj to a numpy . rec object .
14117	Find source code for given object .
14118	Set the colors of the color scheme table .
14119	Toggle the color scheme .
14120	Return a text representation of a traceback .
14121	Format a traceback .
14122	Format a list of files and lines .
14123	Format an exception only .
14124	Show an exception only .
14125	Call the debugger .
14126	Set FormattedTB mode .
14127	Decorator for views that checks that the user is a member of a given group .
14128	Recursively import modules from a list of modules .
14129	Add a line to the code .
14130	Add a section to the code .
14131	Get a function by name .
14132	Return the code for the given expression .
14133	Render the template .
14134	Perform dot notation on a value .
14135	Render a template .
14136	Return a dictionary of default formatters .
14137	Register a function for a given type .
14138	Register a function for a given type .
14139	Called when the user changes the precision of a float .
14140	Return a list of user config files .
14141	Configure the test suite .
14142	Configure logging .
14143	Set the working directory to the given directories .
14144	Print a dumb page of text .
14145	Display a string in a page .
14146	Show the contents of a file .
14147	Get the pager command .
14148	Return the start string for the given pager .
14149	Print a snipped string .
14150	Print a basic unicode string .
14151	Convert latex to PNG .
14152	Print a latex string to a PNG file .
14153	Returns True if the given object can print latex .
14154	Print a LaTeX representation of the given object .
14155	Add options to the plugin .
14156	Validate that the input list is a list of strings .
14157	Validate that all keys and values in a dict are strings .
14158	Run the ioloop loop .
14159	Handle incoming messages .
14160	Execute the given code .
14161	Send a complete request to the client .
14162	Get information about an object .
14163	Send a history request .
14164	Shuts down the server .
14165	Flushes the queue .
14166	Send an input message to the client .
14167	Start all channels .
14168	Stop all channels .
14169	Check if all channels are running .
14170	Load the connection file .
14171	Write the connection file to disk .
14172	Launch a kernel on the local interface .
14173	Shuts down the kernel .
14174	Restarts the kernel .
14175	Kills the kernel .
14176	Interrupt the kernel .
14177	Send a signal to the kernel
14178	Check if the device is alive .
14179	Returns a shell channel .
14180	The sub - channel .
14181	Returns an instance of the HB channel .
14182	Bind a kernel to an IPEngineApp instance .
14183	Log a message at debug level .
14184	Return a list of all extension classes .
14185	Execute the pre - step extension .
14186	Execute the post - step extension .
14187	Perform the finalization of the extension .
14188	Iterate over the contents of an egg directory .
14189	Scan a module .
14190	Launch a new instance of IPControllerApp .
14191	Save a connection dictionary to a file .
14192	Load config from JSON file .
14193	Load the secondary config from a JSON file .
14194	Execute a cell in parallel .
14195	Enable autopx .
14196	Disable autopx .
14197	Run a single cell .
14198	This function is called when a heartbeat is received .
14199	Run a task .
14200	Remove a task from the queue .
14201	Patch a protocol so that it can be used as an agent .
14202	Patch an object s attribute if it is missing .
14203	Accept a new connection .
14204	Reject the connection .
14205	Get a proxy agent .
14206	This method is called when the form is valid .
14207	Delete the object .
14208	If the user is logged in set the user field to the request s user .
14209	Report the coverage of the code units .
14210	Check if all modules have been compiled .
14211	Open a file in an editor .
14212	Fixes an error in the vim editor .
14213	Get text from the clipboard .
14214	Add a function to the chain .
14215	Get metadata from path_or_module .
14216	Configure the logger .
14217	Import an item from a package .
14218	Try to connect to a passwordless SSH server .
14219	Try to connect to a passwordless SSH server .
14220	Try to connect to a passwordless SSH server .
14221	Create a tunnel connection to the given socket .
14222	Open a tunnel to a remote host .
14223	Stop scheduling tasks .
14224	Unwrap an exception .
14225	Register a new engine .
14226	Remove an engine from the queue .
14227	Handle a ExecuteReply message .
14228	Flush all notifications from the socket .
14229	Flush the results from a zmq socket .
14230	Flush control messages from the socket .
14231	Flush ignored control messages .
14232	Flush all messages from the iopub .
14233	Spins every interval seconds .
14234	Stop the spin thread .
14235	Spin down the socket .
14236	Wait for jobs to complete .
14237	Sends an apply request to the client .
14238	Send an execute_request message to the client .
14239	Get a result from a list of message ids or message ids .
14240	Query the status of one or more engines .
14241	Purge the results of one or more jobs .
14242	Get the history of the hub .
14243	Execute a database query .
14244	Return a set of opcode names .
14245	Get the byte parser .
14246	Return a set of lines that match one or more regexes .
14247	Parse the raw text .
14248	Return the first line of the given line .
14249	Given a list of lines return a set of the first lines that are not in ignore .
14250	Parse the source code .
14251	A list of all arcs .
14252	Counts the number of exit lines .
14253	Return a list of child parsers .
14254	Iterate over the byte and line numbers of the code .
14255	Find all statements .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Validate that the chunks are valid .
14259	A generator that yields the line numbers of each instruction in the file .
14260	Return a list of all the chunks of this parser .
14261	Return a set of all arcs in this parser .
14262	Add coverage options to the parser .
14263	Start the coverage process
14264	Generate coverage report .
14265	Return True if the file should be included in the cover .
14266	Interprets a distribution name .
14267	Open a URL with authentication .
14268	Fetch a distribution for a given requirement .
14269	Get the parent object of the given object .
14270	The root topic of the engine .
14271	Render a template .
14272	Configure the capture mode .
14273	Format an error .
14274	Split data by num elements .
14275	Convert a notebook from v2 to v3 .
14276	Convert a hex color to an RGB color .
14277	Return a dictionary of colors for the given stylename .
14278	Returns a QFont object for the given font family .
14279	Handle the execute reply .
14280	Handle history reply .
14281	Handle a pyout message .
14282	Handle display data .
14283	Start the channel history .
14284	Execute a file .
14285	Process an execute error message .
14286	Process the execute payload .
14287	Set default style .
14288	Edit a text file .
14289	Return the in - prompt for the given number .
14290	Make a continuation prompt .
14291	Called when the style sheet has changed .
14292	Called when the syntax style has changed .
14293	Handle the response from the CloudStack API .
14294	Signs the given URL parameters .
14295	Transform data to a dict .
14296	Return information about the virtual memory .
14297	Get system CPU times .
14298	Get the UID s of the process .
14299	Return a list of GID objects for the process .
14300	Get a list of process threads .
14301	Return a list of open file descriptors for this process .
14302	Get the commit hash of a package .
14303	Return information about a package .
14304	Return information about the system .
14305	Return the number of CPUs on Mac OS X .
14306	Return the number of CPUs available on the system .
14307	Get the next set of messages .
14308	Fetch one row from the result set .
14309	Fetch many rows from the result set .
14310	Fetch the next row from the result set .
14311	Connect to one or more peers .
14312	Read a notebook from a JSON string .
14313	Read a Py notebook from a string .
14314	Return a list of reads from a string .
14315	Writes nb to a given format .
14316	Write a number of bytes to a file .
14317	Convert . ipynb files to metadata .
14318	Load a value from a dictionary .
14319	Returns True if the given name matches the filter .
14320	Returns whether or not the given class should be used .
14321	Returns whether or not the given directory should be included .
14322	Check whether the given file should be included .
14323	Check whether a function should be called .
14324	Check whether the given method should be called .
14325	Returns whether the given module should be used .
14326	Return a list of lines from a file .
14327	List pydb files .
14328	Print a list of lines from a file .
14329	PDEF command .
14330	Returns the conversion factor between two currencies .
14331	Convert a currency from one symbol to another .
14332	Compute the return value for a given date .
14333	Get the encoding of a stream .
14334	Return the default encoding .
14335	Write the connection file to disk .
14336	Initialize the heartbeat channel .
14337	Log information about the connection .
14338	Initialize the session .
14339	Initialize the IO stream .
14340	Initialize the kernel .
14341	Initialize the connector .
14342	Register with the controller .
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert a domain name to a FQDN .
14346	Add options to the parser .
14347	Configure NoseExclude .
14348	Check if a directory should be excluded .
14349	Check if the given extension links to a dynamic library .
14350	Call each function in a list of functions .
14351	Call each function in reverse order .
14352	Append a function to the end of the list .
14353	Insert a function at the given index .
14354	Format usage information .
14355	Initialize the application .
14356	Write the PID file to disk .
14357	Remove the pid file .
14358	Get the PID from a file .
14359	Construct a MagicArgumentParser from a magic function .
14360	Return the real name of a magic function .
14361	Highlights the current block .
14362	Rehighlight the given block .
14363	Set the highlight format .
14364	Copy the current selection to the clipboard .
14365	Execute a shell command .
14366	Called when the prompt is finished .
14367	Check if tab is pressed .
14368	Create a context menu at the given position .
14369	Filter console key press events .
14370	Insert a continuation prompt .
14371	Handle a complete reply .
14372	Silently execute a user expression .
14373	Handle an exec callback message .
14374	Handle a execute reply .
14375	Handle incoming input request .
14376	Called when the kernel has been deactivated
14377	Handle an object info reply .
14378	Handle pyout messages .
14379	Handle a stream message .
14380	Handle a shutdown message .
14381	Execute a file .
14382	Interrupt the kernel .
14383	Reset the shell to the initial state .
14384	Restarts the kernel .
14385	Create a call tip request .
14386	Completes the current request .
14387	Process an execute error message .
14388	Process the execute message .
14389	Called when the document contents change .
14390	Add a plugin to the list of plugins
14391	Call all registered plugins .
14392	Generate a list of results from all plugins .
14393	Call all registered plugins and return the result .
14394	Configure plugins .
14395	Load plugins from entry points .
14396	Load builtin plugins .
14397	Convert a LaTeX string to a PNG string .
14398	Convert LaTeX to HTML .
14399	Convert a math string to an image .
14400	Check if the distribution already exists .
14401	Iterate over all processes .
14402	Calculate the CPU usage in percent .
14403	Return a dictionary of attributes .
14404	The name of the process .
14405	Return the path to the executable to use .
14406	Get the children of this process .
14407	Get CPU usage in percent .
14408	Get the current memory usage in percent .
14409	Get a list of memory maps .
14410	Check if the process is running .
14411	Suspends the process .
14412	Resumes the process .
14413	Kills the process .
14414	Wait for the process to finish .
14415	Wake up the kernel .
14416	Hijack the main and main_quit functions .
14417	Check if an IP address is shadowed .
14418	Initialize transformers .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize the default checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize the handlers .
14425	Register a handler for the given name .
14426	Remove a handler from the registry .
14427	Prefilter a line info .
14428	Find a handler for the given line info .
14429	Transform a line .
14430	Prefilter a single line .
14431	Prefilter lines .
14432	Instances of IPyAutocall in user_ns get autocalled immediately
14433	Allow ! and !! in multi - line statements if multi_line_specials is on
14434	Return a prefilter handler for the given line info .
14435	Check if the initital identifier on the line is an alias .
14436	Handle a single line .
14437	Handle a system call .
14438	Handle the magic command .
14439	Handle the magic command .
14440	Handle a single line .
14441	Handle a command line .
14442	Called when the user clicks on the call tip widget .
14443	Called when the user clicks on the call tip widget .
14444	Draws the call tip label .
14445	Show call info .
14446	Show the given tip .
14447	Called when the cursor position has changed .
14448	Creates a property that gets and sets the given attribute to the given value .
14449	Canonicalizes a path .
14450	Validate an instance against a JSON schema .
14451	Returns a new MaskedDict instance .
14452	Check if the virtualenv has no global site packages .
14453	Calculate the frequency of words in a list of filenames .
14454	Decorate a function as a view decorator .
14455	Return a list of default aliases .
14456	Define a soft alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Call an alias .
14460	Transform an alias to a command string .
14461	Expand aliases from user input .
14462	A directive to display the help for the test program .
14463	Reset the SGR .
14464	Split a string into a list of actions .
14465	Returns a QColor instance for the given color .
14466	Returns a QTextCharFormat instance .
14467	Generate a new JWT .
14468	Decorate a function to acquire a lock .
14469	Remove expired JWTs .
14470	Check if a token is already used .
14471	Validate a JWT .
14472	Create a new semaphore with the given count .
14473	Returns the common prefix of a list of files .
14474	This method is called when the user presses an event .
14475	Returns the size of the splitter .
14476	Check if the cursor can be cut .
14477	Returns whether or not the user can paste .
14478	Clears the input buffer .
14479	Cuts the cursor .
14480	Executes the prompt .
14481	Get the input buffer .
14482	Set the input buffer .
14483	Sets the font for the completion widget .
14484	Pastes the text in the clipboard .
14485	Print to the given printer .
14486	Set the cursor to the top of the prompt .
14487	Reset the font .
14488	Append custom input to the cursor .
14489	Append HTML to the page .
14490	Append HTML fetching plain text .
14491	Append plain text to the prompt .
14492	Clears the temporary buffer .
14493	Completes the completion with the given items .
14494	Fill the temporary buffer with text .
14495	Returns whether control key is down or not .
14496	Create a QPlainTextEdit or QRichTextEdit control .
14497	Create a custom page control .
14498	Filter page keypress event handler
14499	Get the plain text of a block .
14500	Returns the end of the text cursor .
14501	Return the cursor column of the input buffer .
14502	Get the cursor line from the input buffer .
14503	Get the cursor for the prompt .
14504	Get selection cursor .
14505	Insert continuation prompt .
14506	Insert html into cursor .
14507	Insert HTML and return plain text .
14508	Insert text in plain text mode .
14509	Keep the cursor in the buffer .
14510	Quit the keyboard .
14511	Create a new page of text .
14512	Called when the prompt has been started .
14513	Read a line from the terminal .
14514	Set the continuation prompt .
14515	Sets the top cursor .
14516	Show the prompt .
14517	Adjusts the vertical scrollbar .
14518	Command line entry point .
14519	Copy a config file to the current location .
14520	Create a profile directory by name .
14521	Find a profile directory by its name .
14522	Convert a cmp = function into a key = function
14523	Read the contents of a file .
14524	Read multiple lines from the terminal .
14525	Create a temporary file and a file object .
14526	Close the stream .
14527	Write data to the stream .
14528	Add a new heart handler .
14529	Register a heart failure handler .
14530	a heart just beat
14531	Returns a list of batches of size batch_size .
14532	Convert a path to a filename .
14533	Walks a directory and returns all files that match the pattern .
14534	Display the elapsed time and number of loops .
14535	Returns a tuple of elapsed average and estimated end time units .
14536	Extract the wininst config from a file .
14537	Uncaches a zip directory .
14538	Return a quoted string representation of an argument .
14539	Check for conflicts .
14540	Set up fetch options .
14541	Create the home directory if it doesn t exist .
14542	Check if a file name is an archive file .
14543	Create a mutable proxy class for the given object .
14544	Creates a read - only proxy for an object .
14545	Create a new heading cell .
14546	Create a new NotebookNode object .
14547	Create a new notebook node .
14548	Check if path is a writable directory .
14549	Unquote a filename .
14550	Get the filename of a . py file .
14551	Find a file in a list of search paths .
14552	Get the user s home directory .
14553	Get the XDG_CONFIG_HOME environment variable .
14554	Get the path to the . ipython directory .
14555	Return the path to the IPython package directory .
14556	Get the path to the IPython module .
14557	Check if target is newer than deps .
14558	Returns the md5 hash of a file .
14559	Check if there is an old config file .
14560	Update the suggestions dictionary for the given object .
14561	Get suggestions for a given object with a given size .
14562	Get suggestions for a given object .
14563	Return the relative path of this directory .
14564	Return a list of files matching the given pattern .
14565	r Returns a list of lines .
14566	Read the md5 digest of the file .
14567	Create a new hotshot profile .
14568	Print a profiling report to the given stream .
14569	Clean up the stats file .
14570	Send a HEARTBEAT message .
14571	Enable wx .
14572	Disable wx event loop .
14573	Disable Qt4 .
14574	Enable GTK .
14575	Enable Tkinter .
14576	Enable pyglet .
14577	The wave saver function .
14578	Initialize the database .
14579	Run a SQL query and return a list of tuples .
14580	Get information about a session .
14581	Get the last n lines from the database .
14582	Get a range from a string .
14583	Get the name of the history file .
14584	Set the remark for the given session .
14585	Reset the history .
14586	Get a range of lines from the history .
14587	Store the output of a given line in the database .
14588	Write the input and output cache to the database .
14589	Stop the event loop .
14590	Get the number of CPUs .
14591	Get a list of system CPU times .
14592	Return a list of disk partitions .
14593	Get a list of all processes .
14594	Return a nice string representation of a pair .
14595	Format a list of lines into a comma - separated string .
14596	Return a string representation of the stack trace .
14597	Decorator to cache the result of a function .
14598	Join a list of regular expressions into a single string .
14599	Remove a file from the filesystem .
14600	Update the md5 hash of the given value .
14601	Update the list of cluster profiles .
14602	Start a cluster .
14603	Stop a cluster .
14604	Find a command in the PATH .
14605	Read system body from stdout and stderr .
14606	Find the code units for the given morfs .
14607	Run report_fn on each code unit .
14608	Decorate a function to raise any of the given exceptions .
14609	Set the current stack trace .
14610	Decorator to check if a function is timed out .
14611	Initialize IPython extensions .
14612	Initialize the code .
14613	Run code from IPythonApp . exec_lines .
14614	Run all startup files in the startup directory .
14615	Run IPythonApp . exec_files .
14616	Run code given at command line .
14617	Run the module .
14618	Decorate a function to be used as a generic function .
14619	Return the path to a static file .
14620	Read data from a file .
14621	Escape the given string .
14622	Report HTML files .
14623	Copy static files to the local directory .
14624	Write html to a file .
14625	Calculate the hash of the source file .
14626	Write the index . html file .
14627	Read the status file from a directory .
14628	Write the coverage status to a file .
14629	Return True if lst1 and lst2 are sorted .
14630	Get a slice of a sequence .
14631	Split a sequence into chunks of size .
14632	Read config from setup . cfg .
14633	Read the MANIFEST . in file .
14634	Convert glob pattern to regular expression .
14635	Returns True if filename matches any of the patterns .
14636	Return a list of all files in the current working directory .
14637	Start a kernel .
14638	Shuts down a kernel .
14639	Kill a kernel .
14640	Get a kernel by its id .
14641	Get the ports of a kernel .
14642	Returns the notebook ID associated with a kernel .
14643	Start a kernel for a given notebook .
14644	Shuts down a kernel .
14645	Interrupt a kernel .
14646	Restarts a kernel .
14647	Create an iopub stream for the given kernel .
14648	Create a shell stream for a kernel .
14649	Create a HB stream for the given kernel .
14650	Remove all OneTimeProperty attributes from this instance .
14651	Export HTML to a file .
14652	Export HTML to an XHTML file .
14653	Ensure the image tag is UTF - 8 encoded .
14654	Remove empty paragraphs from HTML .
14655	Export the current document to a file .
14656	Returns a unique object or None if there is no such object .
14657	Given a list of tokenized terms and a list of search fields return a list of includes .
14658	Get the text query from a query string .
14659	Get a query for a date greater than a given number of days .
14660	Get a date less than a given number of days .
14661	Returns the null or blank query for the given field .
14662	Add case - insensitive fields to fields_dict .
14663	Add options to the parser .
14664	Validate an attribute against a method and class .
14665	Check if the given method is a valid method .
14666	Rotates the ring .
14667	Patch pyzmq to be compatible with pyzmq .
14668	Create a parser from a schema URL .
14669	Return the websocket URL .
14670	Return a JSON - serializable representation of a list of messages .
14671	Injects a cookie message into the request .
14672	Start the heartbeat loop .
14673	Start the heartbeat .
14674	Stop the heartbeat .
14675	Load the file .
14676	Get the index of the demo .
14677	Seek to the specified block .
14678	Edit a block .
14679	Show the block at the specified index .
14680	Show all blocks .
14681	Run a method on each subject in a collection .
14682	Batch a collection of functions .
14683	Run a function in a thread .
14684	Run a method in parallel .
14685	Decorator to wrap a function with an object .
14686	Decorate a function with a list of object attributes .
14687	Return a tuple of lines and index of the traceback .
14688	Given a list of lines and a position return a list of lines to inspect .
14689	Create a countdown menu .
14690	Stop all the engines and kill the controller .
14691	Check if the condition is met .
14692	This method is called after a call is done .
14693	Save message ids to the history .
14694	Sync the results of a function .
14695	Spins a function after a given amount of time .
14696	Get a list of messages from the queue .
14697	Gets a message if there is one that is ready .
14698	Decorate a function to return the value of a property .
14699	Returns a tuple of property objects for the given fields .
14700	Parse a URL into a dictionary .
14701	Return a list of all modules in a directory .
14702	Get a list of all root modules .
14703	Quick completion hook .
14704	Parse a module completion line .
14705	Completer for magic run commands .
14706	Completer function .
14707	Quote an attribute .
14708	Configure the plugin .
14709	Report the results of the test suite .
14710	Add an error to the testcase .
14711	Add a failure to the testcase
14712	Add a testcase as a successful test .
14713	Return a random number between 0 and n .
14714	Given a list of loads return the index of the first item in the list .
14715	Register a new engine .
14716	Remove an engine from the queue .
14717	Handle stranded tasks .
14718	Dispatch a submission message .
14719	Audits tasks that have timed out .
14720	Fail an unreachable job .
14721	Check whether the given job can be run .
14722	Save a job as unmet .
14723	Submit a task to the engine .
14724	Handle a result message .
14725	Handle a result message .
14726	Handle an unmet dependency .
14727	Update the graph based on the dep_id .
14728	Start the logging process .
14729	Print the current state of the logging .
14730	Write a line to the log .
14731	Write data to the log file .
14732	Stop logging .
14733	Create a new worksheet .
14734	Add an object to a command chain .
14735	Add a regular expression to the chain .
14736	Return a list of strings that match the given key .
14737	Return a flat list of matches for the given key .
14738	Called when a notebook dir has changed .
14739	List all notebooks in the notebook directory .
14740	Create a new notebook id .
14741	Delete a notebook by its identifier .
14742	Check if a notebook exists .
14743	Find the path to a notebook .
14744	Get the path to a notebook file by name .
14745	Get a notebook .
14746	Get a notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook to a JSON file .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Yield tokens from a list of tokens .
14754	Return a list of lines of tokens from a source string .
14755	Load the default config file .
14756	Return a list of default classes .
14757	Parse command line arguments .
14758	Initialize the application .
14759	Initialize the shell .
14760	Initialize the banner .
14761	Return a string representation of an object .
14762	Parse a notifier name .
14763	Set the default value of the trait .
14764	Called when a trait is changed .
14765	Return a dict of all traits of the given class .
14766	Get the metadata for a given trait .
14767	Validate that value is a subclass of self . klass .
14768	Get the default value .
14769	Returns True if all items in self are in completed or failed .
14770	Returns True if the chain is unreachable .
14771	Return a dict representation of the dependencies .
14772	Get the depth of a node in a tree .
14773	Print a bintree .
14774	Disambiguate a DNS URL .
14775	Return the result of applying a function to each element of the sequence .
14776	Validate targets .
14777	Handle monitor traffic messages .
14778	Dispatch a query message .
14779	Handle a new heart .
14780	Handle a heartbeat failure .
14781	Save a task request .
14782	Save a task result message .
14783	Save an IOPub message to the database .
14784	Handle a connection request .
14785	Register an engine .
14786	Unregister an engine .
14787	Finish a registration .
14788	Handle a shutdown request .
14789	Remove all records that match the given query .
14790	Extract the content and buffers from a record .
14791	Get the results of a query .
14792	Get the history of a client .
14793	Query the database .
14794	Change the current working directory to newdir .
14795	Decode the output of a command .
14796	Run a command under the current working directory .
14797	Execute the Rscript command .
14798	Dispatch a message .
14799	Check if message is from this session .
14800	Report a list of Morf objects .
14801	Add coverage information to a coverage file .
14802	Get the installed version of a given policy .
14803	Squashes unicode strings into unicode strings .
14804	Extract the header from a message or header dict .
14805	Check the packers and unpacks the message .
14806	Create a message from a message type .
14807	Sign a list of messages .
14808	Serialize a message .
14809	Send a message to a socket .
14810	Send a list of messages to a stream .
14811	Receive a message from a socket .
14812	Feed identities from a list of messages .
14813	Unserialize a message from a list of bytes .
14814	Save a string to an SVG file .
14815	Writes a string to the clipboard .
14816	Convert an SVG string to a QImage .
14817	Return a dictionary of object info .
14818	Get the docstring of an object .
14819	Get the source code of an object .
14820	Get the arguments of a Python function or method .
14821	Return a tuple of call line and docstring .
14822	Find the absolute path of an object s file .
14823	Find the line number of the source code of an object .
14824	Get the definition of an object .
14825	Return the head of the color table .
14826	Print a message to the console .
14827	Print the definition of an object .
14828	Prints the documentation of an object .
14829	Display the source of an object .
14830	Print the contents of a file .
14831	Format a list of fields .
14832	Get information about an instance .
14833	Search for names in a list of namespaces .
14834	Return a twisted . internet . reactor . Thread instance .
14835	Decorator to return a twisted Deferred .
14836	Find the best string in the given corpus .
14837	Return a string representation of the document .
14838	Convert the document to XML .
14839	Load all modules in a list of packages .
14840	Invert a dictionary .
14841	Merge two dictionaries .
14842	Convert an object to a primitive object .
14843	Format the given raw string using the given scheme .
14844	Get a list of figures .
14845	Print a figure to the screen .
14846	Returns a function that can be used as a function that can be used as a context manager .
14847	Select the figure format to use .
14848	Find gui and backend .
14849	Activate matplotlib backend .
14850	Configure inline support .
14851	Activates a pylab backend .
14852	Trace a function call .
14853	Start tracing .
14854	Stop the timer .
14855	Start a new tracer .
14856	Start tracing and return a function .
14857	Start the fullcoverage collector .
14858	Stop the collector .
14859	Stop all tracers .
14860	Resume all tracers .
14861	Get line data .
14862	Given a dict of RemoteError objects and a list of RemoteError objects return a list of CompositeError objects .
14863	Render the traceback of an exception .
14864	Start coverage process .
14865	Return the canonical directory of a Morf file .
14866	Return the source code for a given file .
14867	Check if the file should be traced .
14868	Check if the file should be traced .
14869	Print a warning to stderr .
14870	Check for source packages .
14871	Start the collector .
14872	Called when the process exits .
14873	Add a regex to the exclude list .
14874	Return the regular expression for which which should be excluded .
14875	Save the data to disk .
14876	Combine parallel data .
14877	Harvest data from source files .
14878	Compute the analysis of the MORF .
14879	Analyzes a Morf file and returns a tuple of tuples of filename excluded and missing formatted .
14880	Analyzes the given code unit .
14881	Report the results of the harvesting .
14882	Annotate the given morfs with the given options .
14883	Report the results of the HTML analysis .
14884	Report XML data to a file .
14885	Display a list of objects .
14886	Display a list of objects as HTML .
14887	Display a list of SVG objects .
14888	Display a list of images or plain text .
14889	Display a list of JPG objects .
14890	Display a list of latex objects .
14891	Display a list of objects as JSON .
14892	Display a list of JavaScript objects .
14893	Reload data from a file or URL .
14894	Find the path to a command .
14895	Send a command to the pexpect system .
14896	Forward read events to a zmq socket .
14897	Read a line from the file - like object .
14898	Find the Launcher class .
14899	Start the cluster .
14900	Build a new launcher .
14901	Start the IPython cluster .
14902	Start the cluster .
14903	Get a wx application .
14904	Check if wx is running in event loop .
14905	Starts a wx event loop .
14906	Get an instance of Qt4 .
14907	Check if Qt4 is running .
14908	Start event loop .
14909	Create a blank canvas .
14910	Draw a cross - section .
14911	Draw a line between two positions .
14912	Set the text at the given position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Get a random UUID .
14915	Get a unique key from a get dict .
14916	Returns the hostname of the given URL .
14917	Get arguments from a URL .
