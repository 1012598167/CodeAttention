0	Convert sina xml data to a list of URLs .
1	Download a dailymotion video from a URL .
2	Download a video from Sina .
3	Run a sprint .
4	Print a sprint log .
5	Print a message to sys . exit
6	Print a message to sys . exit .
7	Detect the operating system .
8	Download a Vimeo file by channel .
9	Get CK Player info by XML .
10	Get a random video URL from a video ID .
11	Get MGTV real url .
12	Return a legitimized version of the given text .
13	Download a video from a URL .
14	Download a stream .
15	Download a video from ACFUN .
16	Match all patterns in text .
17	Parse a query parameter .
18	Get the content of a URL .
19	Make a POST request to the given URL .
20	Parse a hostname and port .
21	Get showroom id by room url key .
22	Get title by json topic part .
23	Download topics and parts from the wanmen API .
24	Download a course by topic part .
25	Returns True if there is a task in the queue .
26	Get the event buffer .
27	Get a snowflake connector .
28	Get the aws credentials .
29	Return the value of the field with the given name .
30	Copy expert data to a file .
31	Dump a table to a file .
32	Executes a Google Cloud Storage Hook .
33	Return the maximum partition of a table .
34	Get a connection to the database .
35	Print the current state of a task .
36	Restart all the workers in the master process .
37	Get a connection to the server .
38	Translate values into target_language .
39	Get an instance of a project .
40	Create a new instance .
41	Patch an instance .
42	Delete an instance .
43	Get information about a database .
44	Create a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Start the sql proxy .
49	Stop the sql proxy .
50	Get the version of the proxy .
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete a connection .
54	Returns a CloudSqlProxyRunner instance .
55	Gets the database hook .
56	Cleanup the database hook .
57	Reserve a free tcp port .
58	Normalize mlengine job id .
59	Get the error code for a given error .
60	Delete all dag runs .
61	Delete all TaskInstances in the dag .
62	Sets the state of the dags that are paused .
63	Print the status of the task instance .
64	Sets the heartbeat of this SchedulerMetricsJob
65	Invoke a Lambda function .
66	Creates a DataFlowPythonOperator for the given task_prefix .
67	Make a directory .
68	Convert string to float if possible .
69	Convert a datetime to a timezone - aware datetime .
70	Make a datetime naive .
71	Return a datetime object .
72	Get the connection to the druid broker .
73	Get a connection to the server .
74	Run a request .
75	Checks the response and raises an AirflowException if any errors are found .
76	Run a prepped request and check the response .
77	Create a new session .
78	Decorate a function to provide a session .
79	Reset the database .
80	Return a pretty - formatted exception message .
81	Get a list of records from the database .
82	Get a pandas DataFrame from the given hql .
83	Run the given hql .
84	Insert rows into a table .
85	Return a CosmosClient instance .
86	Check if a collection exists .
87	Create a new collection .
88	Check if a database exists .
89	Create a new database .
90	Deletes a database .
91	Delete a collection .
92	Insert a list of documents into the Airflow database .
93	Delete a document .
94	Get a document by its id .
95	Returns a list of documents matching the given SQL string .
96	Get a function by name .
97	Create a new function .
98	Update a function .
99	Upload a function to a zip file .
100	Delete a function by name .
101	Returns a list of statuses for the specified task dependencies .
102	Check if a task is met .
103	Get failure reasons for a task .
104	Parse an S3 configuration file .
105	Get the credentials for a given region .
106	Get a connection to vertica .
107	Flushes the buffer .
108	Check if fileloc is a zipfile or not .
109	Return a list of file paths in a directory .
110	Construct a TaskInstance
111	Start the DagFileProcessorManager .
112	Send a termination message to the manager .
113	Exit gracefully upon receiving a signal .
114	Start the dag file processor .
115	Start the loop asynchronously .
116	Start the process in sync .
117	Refreshes the dag directory .
118	Print the status of the process .
119	Clear nonexistent import errors .
120	Log processing statistics for a list of known file paths .
121	Set the file paths in the queue .
122	Wait for all files to be finished .
123	Processes a DAG file .
124	Terminate the process .
125	Create an SSH client for the given SSH connection id .
126	Create a transfer job .
127	Get a transfer job .
128	List all transfer jobs matching the given filter .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a transfer job to complete .
135	Find a TaskReschedule for a task instance .
136	Returns a list of open slots for the given session .
137	Run a command and return its output and stderr .
138	Remove an option from a section .
139	Get a section from the environment .
140	Allocate a set of keys to the project .
141	Begin a new transaction
142	Commit the given body to the project .
143	Perform a lookup of a project .
144	Rollback a transaction .
145	Run a query on the project .
146	Get an operation by name .
147	Delete an operation by name .
148	Poll an operation until it is done .
149	Export this project to a storage bucket .
150	Import a file from a storage bucket .
151	Publish a message to a target .
152	Get the hostname from the configuration file .
153	Returns a LanguageServiceClient instance .
154	Analyze entities in a document .
155	Annotate a text document .
156	Classify a text document .
157	Return a list of template fields for the given fullname .
158	Generate a role for a template field .
159	Dispose of the connection pool .
160	Prepare sys . path for a classpath .
161	Check if the target_task_id is valid .
162	Return X - CACHECONF configuration variable .
163	Convert an alchemy object to a dictionary .
164	Yields a list of items in chunk_size .
165	Reduce an iterable in chunks .
166	Chain a list of tasks .
167	Print a table of rows .
168	Render a log filename .
169	Get a connection to the dataproc server .
170	Wait for an operation to complete .
171	Coerce a string or a dict into a string .
172	Handle a databricks operator execution .
173	Run the airflow pigop command .
174	Fetch the state of a celery task .
175	Returns the number of tasks per send process .
176	Returns the number of tasks per fetch process .
177	Set the default value of a variable .
178	Get a connection to the server .
179	Create a new job .
180	Get an MLEngine job .
181	Wait for a job to complete .
182	Create a new version of a model .
183	Set the default version of a model .
184	List all versions of a model .
185	Delete a version from a project .
186	Create a new model .
187	Get a model by name .
188	Write a batch of items to the DynamoDB table .
189	Integrate the plugins .
190	Get the default executor .
191	Return the executor for the given executor name .
192	Raise an AirflowException when a segment error occurs .
193	Get a connection to the database .
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	Returns a list of pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Returns the state exit code and detail status for the given resource group .
202	Returns a list of messages associated with a resource group .
203	Get a list of logs for a resource group .
204	Delete a container group .
205	Check if a container with the given name exists .
206	Decorator to apply defaults to a function .
207	Construct the ingest query .
208	Pluck a message from a channel .
209	Find a run in a dag .
210	Returns a list of TaskInstance objects .
211	Get a task instance .
212	Get the previous dagrun .
213	Get the previous scheduled dagrun .
214	Update the state of the task .
215	Verify the integrity of the task .
216	Make a JSON request and return the response body and headers .
217	Convert a context to airflow variables .
218	Conditionally trigger a dag_run_obj
219	Send a metric to a datapoint .
220	Query the API for a specific metric .
221	Get a dag by id .
222	Kill a list of zombies .
223	Bag a DAG .
224	Collect all the dags in a folder .
225	Generate a report for the dagbag .
226	Add a number of days to a datetime .
227	Convert a datetime object to a datetime object .
228	Poke for a directory with files matching the regex .
229	Poke for files in the specified directory .
230	Clears all task instances in a task .
231	Get the try number .
232	Generate an airflow command .
233	Get the current state of the task .
234	Record the task instance as FAILED .
235	Refresh this TaskInstance from the database .
236	Clear the XCom data .
237	Get the key for this task .
238	Returns True if the task s downstream tasks are done .
239	Returns the datetime of the next retry .
240	Check if the state is ready for a retry .
241	Returns True if pool is full False otherwise .
242	Get the DagRun object for this run .
243	Push a value to the XCom .
244	Returns a tuple of task_ids and a dag_id .
245	Initialize the run context .
246	Close the upload .
247	Get a connection to the compute server .
248	Start an instance of a resource .
249	Set the machine type of a resource .
250	Get an instance template .
251	Insert an instance template .
252	Get an instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create a new bucket .
257	Check for a prefix in a bucket .
258	List common prefixes in a bucket .
259	List all keys in a bucket .
260	Check if a key exists in the bucket .
261	Get a key from S3 .
262	Read a key from a bucket .
263	Select a key from a bucket .
264	Check if a wildcard key exists .
265	Get a wildcard key from a bucket .
266	Load a file into a bucket .
267	Load a string .
268	Load a file - like object from S3 .
269	Load a file object .
270	Copy an object from one bucket to another .
271	Query the Cassandra database .
272	Convert a user type into a dictionary .
273	Send an email to a user .
274	Get a SpeechClient instance .
275	Recognize a speech .
276	Executes the query .
277	Load a list of entry - point plugins .
278	Check if a plugin is a valid Airflow plugin .
279	Skip a list of tasks .
280	Get an AzureDLFileSystemClient .
281	Check if a file exists in the cache .
282	Upload a file to ADLU .
283	Return a list of all files in a path .
284	Execute a single Athena query .
285	Uncompress a file .
286	Returns a cursor for querying mssql .
287	Decorator for logging actions .
288	Build metrics for a given function .
289	Create a cgroup from a path .
290	Delete a cgroup .
291	Parse a hostname .
292	Perform an API call to the databricks API .
293	Get a Salesforce connection .
294	Make a query and return the results .
295	Return a description of an object .
296	Return a list of all available fields for the given object .
297	Get an object from Salesforce .
298	Convert a column to a timestamp .
299	Write an object to a file .
300	Returns a MongoDB client .
301	Get a MongoDB collection .
302	Replaces multiple documents in a collection .
303	Returns True if there is a mail attachment with the given name .
304	Retrieves a list of attachments for a given email .
305	Downloads the attachments for a given email .
306	Return a list of attachments matching the given name .
307	Return the filename and payload of the part .
308	Put a batch of records into the delivery stream .
309	Get the status of a task instance .
310	Send an email to a user .
311	Send an email using SMTP .
312	Process a result value .
313	Check if a blob exists .
314	Check for a prefix in a container .
315	Load a blob from a string .
316	Read a file from a container .
317	Delete a file from a container .
318	Run OPTS MLSD .
319	Get the FTP connection .
320	List all files in a directory .
321	Retrieve a file from FTP .
322	Store a file at remote_full_path .
323	Get the MOD time for a given path .
324	Execute the webhook .
325	Returns a FileService object for the given connection .
326	Check if a directory exists .
327	Check if a file exists in the specified directory .
328	List all directories and files in a share .
329	Create a directory .
330	Load a file from a file path .
331	Load a string from a file .
332	Load a file from a stream .
333	Get a connection to the server .
334	Copy an object from one bucket to another .
335	Download an object from a bucket .
336	Upload an object to a bucket .
337	Check if a blob exists .
338	Check if an object is updated after a certain time .
339	Delete a blob .
340	List blobs in a bucket .
341	Get the size of an object in a bucket .
342	Get the CRC32C checksum of an object in a bucket .
343	Get the MD5 hash of an object in a bucket .
344	Create a new bucket .
345	Compose source objects to a destination object in a bucket .
346	Check if the secondary training status has changed .
347	Return the secondary training status message .
348	Load a tar file and upload it to S3 .
349	Configure S3 resources .
350	Check if an S3 URL exists .
351	Get the logs client .
352	Create a training job .
353	Create a hyperparameter tuning job .
354	Create a transform job .
355	Create an endpoint .
356	Describe a training job with a log .
357	Check the status of a SageMaker job .
358	Check the status of a training job with a log .
359	Execute the data flow .
360	Run migrations offline .
361	Run migrations online .
362	Delete an instance .
363	Create a new Instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the cli command .
368	Prepare a hiveconf file .
369	Load a DataFrame from a DataFrame .
370	Load a table from a file .
371	Get a Metastore client .
372	Check for a named partition in a table .
373	Check if a table exists in the database .
374	Get the connection to the hive server .
375	Get the results of a query .
376	Write the cursor to a CSV file .
377	Get a list of records from a hive .
378	Get pandas DataFrame from hql .
379	Returns a ProductSearchClient .
380	Get the dingding endpoint .
381	Send a Dingding message .
382	Bind parameters to the operation .
383	Escape a string .
384	Cast string_field to bq_type .
385	Validate that the given value is of the expected type .
386	Get a BigQueryConnection object .
387	Get the BigQuery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancel a BigQuery query .
392	Delete a table .
393	Update a table .
394	Run grant dataset view access .
395	Get a dataset .
396	Get a list of datasets .
397	Insert all rows into a table .
398	Execute a SQL query .
399	Executes an operation on a sequence of parameters .
400	Returns the next query result .
401	Returns a PostgreSQL cursor .
402	Create intermediate directories for a given remote directory .
403	Create a new queue .
404	Send a message to a queue .
405	Run a command in a subprocess .
406	Closes the cfg file .
407	Main function for nvd3 . py
408	Builds the html header .
409	Build the container header .
410	Build the jschart for the tooltip .
411	Create an x axis .
412	Create a y axis .
413	Get a sqlite3 connection .
414	Decorator for logging actions .
415	Wrap a view function to be gzipped .
416	Get the last DagRun with the given dag_id .
417	Create a dag .
418	Execute the SQSHook and return the result .
419	Returns an AirflowJsonResponse for the given object .
420	Open a file if it is a zipfile .
421	Make a cache key .
422	Get a VideoIntelligenceServiceClient .
423	Annotate a video .
424	Get the Airflow API key .
425	Get a connection to opsgenie .
426	Execute the alerts .
427	Build the opsgenie payload .
428	Execute the alert hook .
429	Get the Athena client .
430	Run a query .
431	Check the state of a query execution .
432	Check if the query is in an intermediate or final state .
433	Get a pysftp connection .
434	Handle a rate limit exception .
435	Make a call to the Zendesk server .
436	Get a list of partitions for a table .
437	Get a table by name .
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Get a list of snapshots for a cluster .
442	Restore a cluster from a snapshot .
443	Create a cluster snapshot .
444	Execute a method on Slack .
445	Create a new job flow .
446	Filter for files with size >= size .
447	Filter a result for ignored extensions .
448	Executes the query in the S3 bucket .
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a Python dictionary to a proto object .
453	Wait for an operation to complete .
454	Get an operation by name .
455	Add a label to a cluster proto .
456	Create a new cluster .
457	Get a cluster by name .
458	Get the endpoint of a Discord webhook .
459	Build the json payload for the discord .
460	Execute the webhook .
461	Encrypts the given plaintext using the given key .
462	Import a table .
463	Import a query to a directory .
464	Export a table .
465	Get a TextToSpeechClient .
466	Synthesize a speech .
467	Close the connection to S3 .
468	Returns a list of containers to initialize .
469	Return a dict of environment variables .
470	Returns a list of kubernetes secret objects .
471	Get the security context .
472	Returns a list of links for the given operator and execution date .
473	Get the heartbeat of the job .
474	Launches an airflow process .
475	Start the DagFileProcessor
476	Check if the process is done .
477	Exit gracefully upon receiving a signal .
478	Update import errors in dagbag .
479	Process the instances of a task in a queue .
480	Change the state of a TaskInstance without dagrun .
481	Returns a dictionary mapping task ids to their concurrency mappings .
482	Change the state of a list of executable task instances .
483	Enqueue task instances with queued state .
484	Executes a list of tasks in the given states .
485	Change the state of tasks that failed to execute .
486	Process executor events .
487	Processes a DAG file .
488	Update the counters with the current state .
489	Manage the state of the executor .
490	Return a DagRun object for the given run date .
491	Get the list of tasks to run for a given dag_run .
492	Execute the tasks for the given run_dates .
493	Set unfinished dag runs to FAILED .
494	Execute the backfill job .
495	Callback for heartbeats .
496	Get a client object for a project .
497	Get an instance .
498	Apply a function to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get a database from an instance .
503	Create a new database .
504	Update a database .
505	Delete a database .
506	Returns True if there is an attachment in the mail folder .
507	Prepare additional parameters .
508	Get a connection to the cluster .
509	Check if a table exists in the cluster .
510	Check if a record exists in the given table .
511	Build a command to poll the driver status .
512	Submit a Spark application .
513	Process spark submission log .
514	Process the Spark driver status log .
515	Returns a task runner for a local task job .
516	Wait for the task to finish .
517	Returns a MySqlHook to query the database .
518	Construct a csv file .
519	Write the local schema file .
520	Returns a dict containing the column name and type .
521	Map a MySQL type to a python type .
522	Execute the Sqoop hook .
523	Decorator to apply a lineage to a function .
524	Parse the extra dejson for this connection .
525	Return a list of dates between start_date and end_date
526	Scale a time array to the given unit .
527	Returns a timedelta of n days .
528	Initialize a role .
529	Delete a role .
530	Return a list of user s roles .
531	Get all permissions views for this user .
532	Check if a user has a role .
533	Check if a view has a permission .
534	Delete faulty permissions .
535	Merge a permission into the view menu .
536	Update the admin permission view .
537	Synchronize view permissions .
538	Create a new permission vm for all DAGs .
539	Get the fernet from the configuration .
540	Perform a poke operation on the table .
541	Get the aws glue catalog hook .
542	Peek for messages on the queue .
543	Get the HDFS connection .
544	Get a webhdfs connection .
545	Check if hdfs_path exists .
546	r Load a file from source to destination .
547	Get the connection to the broker .
548	Get the URI for this connection .
549	Convert a date to a dictionary .
550	Convert a time to a dictionary .
551	Get the connection to the Redis server .
552	Get data from a pandas database .
553	Execute a SQL statement .
554	Sets the autocommit attribute of a connection .
555	Insert rows into a table .
556	Serialize a cell into a string .
557	Check the health of the scheduler .
558	Returns a list of links to the dag or task .
559	Get the connection to the cloudant server .
560	Execute the webhook .
561	Get the credentials for the hook .
562	Returns an AuthorizedHttp instance .
563	Decorator to catch HTTP exceptions .
564	Decorator to fall back to default project_id .
565	Return a list of unfinished tasks .
566	Prepare a Spark - SQL command .
567	Convert a PIL Image or ndarray to a Tensor .
568	Normalize the mean and standard deviation of a tensor .
569	r Resize an image .
570	r Pad an image with padding .
571	Crop an image .
572	Crop an image to a given size .
573	Flip an image to the right .
574	Transform an image to a perspective image .
575	Flip a PIL Image .
576	Crop an image to a given size .
577	Adjust the brightness of an image .
578	Adjusts the contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue of an image .
581	r Adjust the gamma of an image .
582	Rotate an image .
583	Compute the affine matrix of an image .
584	Convert an image to grayscale .
585	Save a tensor to a file .
586	Find all classes in a directory .
587	Read an image file .
588	Read information from a file .
589	Read matches files from data_dir .
590	Compute the accuracy of the output .
591	Setup for distribution .
592	Download a file from a URL .
593	Returns a list of all directories in a directory .
594	Return a list of files in a directory .
595	Download a file from Google Drive .
596	Returns a list of parameters for a given image and output_size .
597	Returns a list of random params for the given width height and distortion_scale .
598	Generate random params for a given image .
599	Returns a list of params for the given parameters .
600	Generates a random angle and translation based on the given parameters .
601	Download the dataset .
602	Download the training set .
603	Download the zip archive .
604	Get the current theme name .
605	Returns a 400 - word autocomplete string .
606	Returns a dict of preferences .
607	Returns a list of all the themes in the templates directory .
608	Returns a list of dictionaries for a given search query .
609	Parse a response from the API .
610	Create a custom gradient .
611	Returns a tfd . Independent .
612	Compute the joint log probability of eight schools .
613	Benchmark 8 - school HMC .
614	Expand a function s docstring .
615	Return a simple name for a distribution .
616	Build a custom RandomVariable .
617	Convert a distribution to a random variable .
618	Make a RandomVariable from a distribution .
619	Create a one - step predictive model .
620	Creates a forecast for a given time series .
621	Maximize the mask if it is non - finite .
622	Assert that x is finite .
623	Assert that x is ranked at the most .
624	Calculate the event size of a tensor .
625	Evaluate all one hot events .
626	Convert an identifier to a tensor function .
627	Calculate the params size of a tensor .
628	Get the next interceptor from the stack .
629	Decorator to make a function interceptable .
630	Create an interceptable tape .
631	Generate a set of num_examples of logistic data .
632	Visualize a decision .
633	Build the input pipeline .
634	Checks if the given map_values are valid .
635	Trace a state using a function .
636	Call a function with the given arguments .
637	Call a function and return a tuple with extra and grads .
638	If from_structure is the same as to_structure then broadcast it to to_structure .
639	Transform a log probability function into a bijector .
640	Takes a leapfrog step .
641	Returns a tuple of tensors containing the current and proposed states .
642	Computes the Hamiltonian Monte - Carlo state .
643	Returns a tf . nest corresponding to the adaptation of the given control .
644	Deserialize a tfp layer from a config file .
645	Convert x to a tensor .
646	Create a scale operator .
647	Create a random walk normal function .
648	Create a random walk uniform function .
649	Expand a tensorshape to an event rank .
650	r Calculate the lower bound of the entropy .
651	Returns the cat probabilities for the given log probabilities .
652	Validate arguments .
653	Ensure that TensorFlow is installed by default .
654	Logistic regression for a set of features .
655	Returns a set of features and labels based on the covtype .
656	Calculate the Cholesky covariance .
657	Compute standard deviation over a given axis .
658	Compute the covariance of x along a given axis .
659	Make a positive axis .
660	Squeeze a value along an axis .
661	Return the z - axis of x .
662	Inverse of _inv_z .
663	Semilocal linear trend transition matrix .
664	Semilocal linear transition noise .
665	r Sample a halton sequence .
666	Generate num_results permutations .
667	Get the indices of a sequence .
668	Calculate the expansion size of a number of bases .
669	Returns the number of primes that are smaller than n .
670	Machine the eps of a dtype .
671	Calculate the hager - zhang function .
672	Fix the step size of a tensor .
673	Return a HagerZhangLineSearchResult for a bracketed value and gradient function .
674	Perform a line search after bracketing .
675	Performs a line search on the inner boundary of a line .
676	Prepares the arguments to be passed to the function .
677	Prints the passed - through tensor .
678	Softmaxnormal Gauss - Hermite quadrature scheme .
679	Compute the softmax normal quantiles for a given quadrature scheme .
680	Check if a parameter is a quadrature parameter .
681	Determines the batch event shapes for a given grid .
682	Interpolate a point in a quadrature grid .
683	Interpolate a quadrature grid at a given scale .
684	Scale a LinearOperatorIdentity .
685	Concatenate a list of vectors .
686	Compute the log - vector matrix .
687	Return a log matrix vector .
688	Return a vector matrix .
689	Extract log probabilities from a distribution .
690	Returns a tf . log_vector_matrix with marginally hidden probabilities .
691	Returns the posterior marginals for the given observations .
692	Creates a posterior mode for the given observations .
693	Choose a random direction .
694	Sample the next log probability .
695	Call a function with a list of arguments .
696	Return a padded version of x .
697	Create a one - step slice .
698	Build a training posterior for a given parameter .
699	Builds a variational loss from the observed time series .
700	Minimize a build loss function in a graph .
701	Calculate the moments of masked time series .
702	Compute the initial value of a masked time series .
703	Given a list of distributions broadcast a batch shape .
704	Returns a MultivariateNormalLinearOperator for a set of distributions .
705	Returns the sum of all MultivariateNormalDiags in the given distributions .
706	Compute the empirical statistics of a time series .
707	Expands the trailing dimension of the observed time series .
708	Canonicalize an observed time series with mask .
709	Returns a tfd . MixtureSameFamily based on the mean and variances .
710	Return a range of values .
711	Make a summary statistic for the given attr .
712	Unify the call signature of a function .
713	Resolve distribution names .
714	Returns a tuple of the required arguments for a function .
715	Compute the KL divergence between two distributions .
716	Build a list - like model .
717	Return a tuple of distribution names and leaf names .
718	Compute the entropy of the distribution .
719	Decorator to check if an argument is in the support of a distribution .
720	Generate a summary image of a sequence .
721	Visualize a reconstruction .
722	Visualize a qualitative analysis .
723	Generate a histogram of the distribution parameters .
724	Summarize the mean in nats and bits .
725	Call the tfd . MultivariateNormalDiag function .
726	Returns the zero state of the tensor .
727	Returns a MultivariateNormalDia .
728	Convert a list of inputs into a tf . conv .
729	Generate a likelihood .
730	Reconstruct the model .
731	Sample a static prior .
732	Sample dynamic prior .
733	Returns the tensor shape of the batch .
734	Returns the batch_shape tensor .
735	Create a state - space model .
736	Generate a prior sample of the model .
737	Compute the minimum ndims for a list of bijectors .
738	Convert a vector size to square matrix size .
739	Sort values along an axis .
740	Sort values along an axis .
741	Convert a numpy array to a tensor .
742	Compute the NDTR of x .
743	Convert a tensor to a numpy array .
744	Convert a tensor to a log - ndtr .
745	Compute the log of an asymptotic series .
746	Compute the erfinv of a tensor .
747	Compute the log of a tensor in Laplace .
748	Compute joint log probability for text messages .
749	Benchmark text messages using HMC .
750	Returns True if the index_points are a multivariate Gaussian .
751	Returns the marginal distribution .
752	Returns the index_points of this GaussianProcess instance .
753	Create an iaf stack .
754	Sets the current state to one step .
755	Returns the bootstrap results for the given state .
756	Return the outer squared difference between x and y .
757	Return a value and a batch of Jacobian gradients .
758	Prevent the 2nd derivative from being implemented .
759	Performs a tensorshape scalar transform on x .
760	Split a covariance into marginals .
761	Decompose a model from posterior marginals .
762	Decompose a time series into a state space model .
763	Decompose a forecast by component .
764	Convert dense_to_sparse to sparse .
765	Decorate a function to be an operator .
766	Return a numpy string representation of a tensor .
767	Returns the sample shape of the tensor .
768	Returns a sample shape tensor .
769	Returns the value of the distribution .
770	Evaluate the value .
771	Returns the value as a numpy array .
772	Determines if a prior corresponds to a known scale posterior .
773	Creates a function that reshapes tensors .
774	Return a uniform unit norm .
775	Compute the log - normal probability of x .
776	Compute the log normalization .
777	Return the common dtype for a list of arguments .
778	Make a summary statistic for the given attribute .
779	Broadcast a set of tensors to a set of target tensors .
780	Calculate the PDF at peak .
781	Calculate the effective sample size for a list of states .
782	Calculate the effective sample size for a single state .
783	Compute the potential scale reduction for a single state .
784	Return the size and dtype of an axis .
785	Broadcast a list - like argument .
786	Generates a quadrature scheme with lognormal Gauss hermite .
787	Compute lognormal quantiles for a quadrature scheme .
788	Merge two dictionaries .
789	Remove a field from the map .
790	Merge two values .
791	Return a deep tuple .
792	Calculate the left doubling increments .
793	Find the indices of the best interval in x .
794	Slice bounds by doubling .
795	Sample with shrinkage .
796	Slice a tensor by one dimension .
797	Create a function to set the value of a model .
798	Creates a function that logs a model .
799	Given a function and a list of kwargs return the kwargs .
800	Convolutional Gaussian convolution block .
801	Build a tree from values and gradients .
802	Decorator to check if a value and gradients are None .
803	Return True if there is no u - turn between two states .
804	Leapfrog a value and gradients function .
805	Compute the log probability of the current target and the current momentum .
806	Generate a random bernoulli tensor .
807	Creates a function that adds a loc variable to the model .
808	Returns the default function for the mean field normalization .
809	Returns the default multivariate normal function .
810	Deserialize a function from a keras object .
811	Serialize a Lambda function .
812	Broadcast from_structure to to_structure .
813	Convert a nested struct to a tensor .
814	Convert a list of arguments to a tensor .
815	Call a function with the given arguments .
816	Returns a dictionary of tensor - like attributes .
817	Make a mixture prior .
818	Pack images into rows and cols .
819	Download a file to a directory .
820	Build fake input fns .
821	Validate that block_sizes is a vector of the same length as bijectors .
822	Check if broadcasting indicates an error in model specification .
823	Multivariate normal tril .
824	Bernoulli tensor .
825	Normalize a tensor .
826	Poisson tensor .
827	Create a mala_euler_method from a list of parts .
828	Get the drift for a given step size and volatility .
829	r Compute log acceptance correction .
830	Calls a volatility function with the given results and gradients .
831	Given a list of volatility parts and a list of state parts return a list of volatility parts .
832	Construct a transition matrix from a list of coefficients .
833	Sample the shape of x .
834	Reshape input and output .
835	Call a function and reshape the output .
836	Returns a bdtr function .
837	Return a flat sample of the distributions .
838	Calculate the latent Dirichlet allocation .
839	Make an LDA variantal layer .
840	Returns a list of string representations of the topics .
841	Download a dataset of newsgroups from a directory .
842	Build fake input fns .
843	Build input fns for training .
844	Minimize a hessian loss function .
845	Add ema control dependencies to a vector quantizer .
846	Save a set of images to a file .
847	Visualize training data .
848	Load bernoulli - mnist dataset .
849	Return dtype as numpy dtype .
850	Return the base dtype of the given dtype .
851	Return True if dtype is a boolean .
852	Return True if dtype is complex .
853	Return the maximum value of a dtype .
854	Return the name of the given dtype .
855	Return the size of a data type .
856	r Assert that all items have the same base type .
857	Assert that all tensors have the same float dtype .
858	Minimize an objective function .
859	Performs a one - step Nelder - Mead .
860	Returns a function that accepts reflected values .
861	Adds an expansion function to an objective function .
862	Returns True if the objective is outside of the contraction function .
863	Returns True if the shrinkage is greater than the best .
864	Replace x at the given index .
865	Check the convergence of two simplexes .
866	Prepare the arguments for an objective function .
867	Prepare args with the initial_simplex and at_initial_simplex .
868	Prepare args with initial vertices .
869	Return the objective function and a list of n_points .
870	Plot weight posteriors .
871	Plot a holdout prediction .
872	Build a fake MNIST data object .
873	Returns a dictionary containing the configuration of the keras server .
874	Initialize a tf . v2 instance from a config file .
875	Matmulate two numpy arrays .
876	Helper function for std_var .
877	Assigns a moving log mean exp to a variable .
878	Make a tensorshape column .
879	Generate a random rademacher distribution .
880	Generate a random rayleigh .
881	Pick a scalar condition .
882	Finish the log probability for a single fiber .
883	Finishes the probability for a single fiber .
884	Rotate x if rotate_right is True
885	r Undo a batch normalization .
886	Validate the BatchNormalization layer .
887	Slice a single parameter into slices .
888	Convert a distribution s parameters to a dictionary .
889	Apply a single step to a dist .
890	Apply a sequence of slices to a dist .
891	Apply a batch of slices to a distribution .
892	Fit a model to a response .
893	Convergence criteria for small relative norm weights change .
894	Prepares the arguments for a given model matrix .
895	Return the number of columns in x .
896	Decorate a function to be static .
897	Copies docstring from original_fn to new_fn .
898	Get the value of a static predicate .
899	Returns the rank of a tensor based on its shape .
900	Returns a smart case for the given pred_fn pairs .
901	Generate a name scope .
902	Calculate the standard deviation of a mixture weight vector .
903	Make a triangular scale .
904	Make a scale for a given dimension .
905	Creates a tensorshape event from a loc and a scale .
906	Checks if the given scale is a diagonal scale .
907	Checks if the given distribution is a scalar distribution .
908	Pad the mixture and categorical dimensions .
909	Pick a scalar condition .
910	Moves x from one dimension to another .
911	Wrapper for embed_check_nonnegative_integer_form .
912	Return True if two tensors have the same dynamic shape .
913	Try to get a static value from x if it doesn t exist .
914	Check if dt is known unsigned by dtype .
915	Returns True if dt is known and signed by dtype .
916	Return the largest integer by dtype .
917	Return the smallest integer by dtype .
918	Check if dt is integer - like by dtype .
919	Validate the shape of a categorical parameter .
920	Returns the total number of permutations and the number of permutations .
921	Rotate a tensor by a given shift .
922	Pick a tensor from a cond .
923	Return a tf . TensorShape that prefers a static broadcast shape .
924	Generate a new seed .
925	Create a triangular triangle .
926	Return the size of x along an axis .
927	Process a quadrature grid and its probabilities .
928	Returns a list of arguments for a parent frame .
929	Expand a tensor to a vector .
930	Return a tf . Tensor with the given dependencies .
931	Validate rightmost_transposed_ndims .
932	Validate a permission .
933	Return a TensorShape for the given shape .
934	Concatenate two tensors .
935	Returns the dimensions of x .
936	Merge a TensorShape with another .
937	Returns a TensorShape with the given rank at least .
938	Check if a tensorshape is equal .
939	Given a partial_batch_dist and a full_sample_and_batch_shape return the full_sample_and_batch_shape .
940	Build a backward pass step .
941	Perform a backward smoothing update .
942	Build a Kalman filter step .
943	Linear Gaussian update .
944	Calculate the Kalman transition .
945	Build a Kalman mean step .
946	Build a Kalman covariance step .
947	Build a Kalman sample step .
948	Propagate the mean .
949	Propagate a covariance matrix .
950	Perform a backward smoothing pass .
951	Returns a sample of the joint state space model .
952	Returns the posterior marginals of x .
953	Compute the joint mean .
954	Compute joint covariances .
955	Convert latents to observations .
956	Log normalization of the event .
957	Return the mode of the concentration .
958	Rotate a set of samples .
959	Generate a 3D sample .
960	Return a copy of a function .
961	Remove keys with value from a dict .
962	Recursively replace a dict with a PrettyDict .
963	Returns a tf . sample with the given values .
964	Returns True if x is a namedtuple .
965	Choose the base case for the given is_accepted and is_accepted .
966	Choose a type from is_accepted to rejected .
967	Safely reduce the sum of x .
968	Compute the value and gradients of a function .
969	Calls a function with a list of arguments and returns the result .
970	Returns a tf . while_loop .
971	Run trace_scan on elems .
972	Decorator to create the innermost setter .
973	Decorator to create an innermost getter .
974	Enable store parameters in results .
975	Replace an event shape in a tensor .
976	Replace event shape in tensorshape with event shape out .
977	Check if the shape is valid .
978	Returns True if any of the tensors converged .
979	Returns a dict of initial state arguments .
980	Perform a line search step .
981	Restrict a value along a direction .
982	Update a position .
983	Checks if the converged grad_tolerance f_relative_tolerance and x_tolerance are equal .
984	Broadcast a value to a target .
985	Return the harmonic number of x .
986	Returns a default exchange proposed function .
987	Extract a field from a kernel result .
988	Returns a list of states that have been exchanged .
989	Returns the variance scale term .
990	Returns the forward log detection function for a given bijector .
991	Returns the forward transform function for a given bijector .
992	Convert a list - like bijector into a list - like function .
993	Perform a one - step transformation of the current state .
994	Convert a tuple or tuple to a tuple or tuple .
995	Convert a value and gradients function to a secant function .
996	Convert a value and gradients function to a value and gradients function .
997	Update a value and gradients function .
998	Update a value and gradients function .
999	Return a bracketed version of a value and gradients function .
1000	Bisect a value between two tensors .
1001	BISect a value and gradients function .
1002	Return True if val_1 is finite False otherwise .
1003	Return True if val_0 satisfies Wolfe s requirements .
1004	Compute the secant of two values .
1005	Make a simple step size update policy .
1006	Wrapper around hmc_leapfrog_integrator_one_step .
1007	Compute the log acceptance correction .
1008	Perform a one - step operation .
1009	Returns a bootstrapped version of the results .
1010	Bayesian resnet .
1011	Resnet block .
1012	Create a keras encoder .
1013	Make a decoder for num_topics and num_words
1014	Make a prior for num_topics .
1015	Sample a Markov chain .
1016	Deep Exponential Family .
1017	Trainable positive deterministic variable .
1018	Trainable gamma .
1019	Load NIPS 2011 papers .
1020	Initialize amplitude and length parameters .
1021	Returns a key - value pair for type_a and type_b .
1022	Read an image from a file .
1023	Download sprites from a zip file .
1024	Create a character .
1025	Create a sequence of action frames .
1026	Create a random sequence .
1027	Create sprites dataset .
1028	Validate a list of distributions .
1029	Flatten a list of kernels into a list of summands .
1030	Flatten a list of multiplication kernels .
1031	Build fake data .
1032	Count integers in an array .
1033	Find bins in a tensor .
1034	Generate a histogram .
1035	Compute the quantiles of a tensor .
1036	Get the ndims of a tensor .
1037	Insert back keep dimensions on axis .
1038	Make a list of non - negative values for an axis .
1039	Move x_ndims to a flat end .
1040	Sort a tensor .
1041	Create a state space model for each component .
1042	Compute the amari - alpha of a tensor .
1043	Reverse log - likelihood .
1044	Compute the Jensen - Shannon tensor .
1045	Calculate the Pearson tensor .
1046	Squared Hellinger tensor .
1047	Returns a triangular tensor .
1048	Compute the power of a tensor .
1049	Compute the log1p abs of a tensor .
1050	Returns the jeffreys tensor of the given logu .
1051	Calculate the modified gan function .
1052	Convert a logu function to a csiszar function .
1053	Compute the symmetrized csiszar function .
1054	Compute the Monte Carlo - Ciszar divergence .
1055	Helper function for csiszar_vimco_helper
1056	Assert that x has ndims .
1057	Concatenate params and indices with bcast .
1058	Broadcast cat event and params .
1059	r Calculate the logspace for the expectation importance sampler .
1060	Broadcast an event and a list of samples .
1061	Minimize a value and gradients function .
1062	Calculate the control inputs for the initial hessian .
1063	Update the inverse hessian .
1064	Update the hessian of the bfgs .
1065	Multiply mat with vec .
1066	Compute the tensor product between two tensors .
1067	Transpose a matrix into a batch .
1068	Pad a tensor to the right with ones .
1069	Sum rightmost ndims preserving shape .
1070	Compute the square root of x with infinite gradients .
1071	Return the common dtype for a list of arguments .
1072	Minimize the value and gradients of a tensor .
1073	Returns the initial state of the LBfgsOptimizer
1074	Returns the search direction of the state .
1075	Create an empty queue for a given element .
1076	Push new_vecs to new_queue .
1077	Mask the eigenvalues of a tensor .
1078	Returns True if x is larger than det_bounds .
1079	Return a uniform correlation - like matrix .
1080	Returns the correlation matrix volume and rejection samples .
1081	Computes the Clopper - Pearson confidence interval .
1082	Compute the true volume of a correlation matrix .
1083	Construct a Von Mises cdf series .
1084	Derivative of Von Mises s cdf normal function .
1085	Perform a one - step objective function on a population .
1086	Minimize an objective function .
1087	Returns the initial arguments for the objective function .
1088	Find the best value in a population .
1089	Check if a population has converged .
1090	Returns the starting population .
1091	Perform a binary crossover of a population .
1092	Return a list of mutations for a given population .
1093	Returns a list of tensors containing the mixing indices of the given size .
1094	Ensure a tensor is a list .
1095	Convert a value to a tensor .
1096	Calculate a soft threshold .
1097	Clips a tensor by a given value and preserves the gradient .
1098	Build an input pipeline from tensor slices .
1099	Plot the generated images .
1100	Convert a list of productions to a string .
1101	Calls the latent_code function .
1102	Return a MultivariateNormalDiag .
1103	Compute the integral of x .
1104	Compute the integral of x .
1105	Calculate the rank of a matrix .
1106	Pin a value to a tensor .
1107	Solve LU tensors .
1108	Convert a lower_upper value to a tensor .
1109	Reconstruct assertions based on lower_upper and perm .
1110	Solve the assertions .
1111	Returns a SparseTensor .
1112	Validate a matrix .
1113	Gradient of non - zero log likelihood .
1114	r Fit a sparse model to a graph .
1115	Generate n_in and n_out slices from num_blocks .
1116	Generate a mask from num_blocks .
1117	Creates a masked dense graph .
1118	Create an input order based on input_size .
1119	Creates a list of degrees for a given input size .
1120	Create masks for the given degrees .
1121	Create a masked initializer .
1122	Build the event from the given input shape .
1123	Convert x to a tensor .
1124	Draw a sample of a multinomial .
1125	Return a tfd . MultivariateNormalDiag with zero dimension covariance .
1126	Returns a function to observe a time series .
1127	Convert parameters to weights .
1128	Return the depth of a graph .
1129	Returns the best order of a graph .
1130	Flatten the probabilities of a chain rule .
1131	Build a chain rule from a model .
1132	Calculate the variational loss .
1133	Compute the optimal variational posterior .
1134	Builds the is_last_day_of_season tensor .
1135	Build the effects - to - residuals matrix .
1136	Build a seasonal transition matrix .
1137	Build a seasonal transition noise .
1138	Build a seasonal transition noise for a given drift scale .
1139	Checks if the observation data is empty .
1140	Validate observation data .
1141	Add a new scheduler .
1142	Set a checkpoint .
1143	Sets the constant clip of the gradient between min and max .
1144	Returns the optimal layer of the model .
1145	Sets the training summary .
1146	Sets the value summary .
1147	Create a new Optimizer .
1148	Sets the training data for the given RDD .
1149	Sets a summary trigger .
1150	Read data sets from a training directory .
1151	Download and return a list of news 20 files .
1152	Download Glove . 6B . txt file .
1153	Compile a bigdl .
1154	Fit a BigDl to a dataset .
1155	Evaluate a bigdl .
1156	Predict the value of x .
1157	Get a MNIST record from a dataset .
1158	Preprocess mnist data .
1159	Returns the maximum epoch or iteration of the end trigger .
1160	Validate the optimizer .
1161	Returns the value of this object .
1162	Call a bigdl function .
1163	Call a Java function with the given arguments .
1164	Convert a BigDLSerDe object to a Java object .
1165	Convert a Python object to a Java object .
1166	Get an activation by name .
1167	Initialize a BigDL object from an ndarray .
1168	Returns the label of the image feature .
1169	Read a parquet from a file .
1170	Write a parquet to a file .
1171	Get an image of a float .
1172	Returns a tensor representation of the image .
1173	Returns the label of the distributed image frame .
1174	Returns the predicted image for the given key .
1175	Predict the value of x .
1176	Fit the model to x y .
1177	Transform a bigdl image .
1178	Save a Keras definition to a JSON file .
1179	Build a keras model .
1180	Predict class distribution .
1181	Set the weights of the bigdl .
1182	Returns the weights of the layer .
1183	Save a tensorflow .
1184	Returns an instance of the training function .
1185	Load a Torch layer from a file .
1186	Load Keras from json or hdf5 files .
1187	Returns a criterion for the given criterion .
1188	Loads weights from a JSON file .
1189	Load a keras dataset from a keras database .
1190	Build a keras model .
1191	Get the shape of the input .
1192	Get the shape of the output .
1193	Get the MNIST for a given data type .
1194	Read data sets from ml - 1m zip file .
1195	Returns the path to the bigdl class .
1196	Check if the version of Spark is below 2 . 2 .
1197	Export a checkpoint to a tf . train . CheckpointReader .
1198	Save a list of tensors as a bigdl dictionary .
1199	Expand a tile along an axis .
1200	Precompute future symbols for a given trie .
1201	Simple attention .
1202	Compute the attention of the inputs .
1203	Compute the bleu of a corpus .
1204	Get the log file for the agent .
1205	Log an utterance .
1206	Returns a list of tf . trainable_variables and tf . accumulator .
1207	Dump weights to a file .
1208	Read a dataset by config .
1209	Train and evaluate a model from a json dict .
1210	Interact with an agent .
1211	Convert a list of labels into a one - hot list of labels .
1212	Convert a proba to a one - hot list .
1213	Create a tf . Session object from a configuration file .
1214	Load a model from a file .
1215	Returns the momentum variable of the optimizer .
1216	Updates the graph variables .
1217	Round y_true to y_predicted .
1218	Process a word .
1219	Convert a list of units into a stacked CNN .
1220	Create a bi - rnn cell .
1221	Creates a stacked bi - directional RNN layer .
1222	Convert a list of units into a stacked highway layer .
1223	Create an embedding layer .
1224	Create a cudnn_rnn GRU .
1225	Create a gru compatible with cudnn .
1226	Create a cudnn LSTM .
1227	Create a cudnn - compatible LSTM .
1228	Wrapper for cudnn_bi_gru .
1229	Wrapper for cudnn_bi_lstm .
1230	Creates a cudnn_stacked_bi_gru .
1231	Variational dropout .
1232	Builds the word vectorizers .
1233	Build word cnn .
1234	Build a basic network from word outputs .
1235	Train on a batch of data .
1236	Predict on batch of data .
1237	Make a vector from a list of words .
1238	Convert a list of tags into a vector .
1239	Improved version of bleu_advanced .
1240	Verify that the given URL is a valid SC URL .
1241	Extract all certs from a certificate txt .
1242	Verify that all certs in a chain are valid .
1243	Verify a signature .
1244	Verify the authenticity of an Amazon certificate .
1245	Returns a list of all controls that are JSON - encoded .
1246	Returns a list of all ms_bot_framework controls .
1247	Returns a list of all telegrams .
1248	Returns a list of all alexa controls .
1249	Main entry point for DeepPavlov .
1250	Wrap a function with a graph .
1251	Wrap a function in a keras graph .
1252	Returns the accuracy of y_true and y_predicted .
1253	Round the accuracy of y_true to y_predicted .
1254	Create a pre - trained initializer .
1255	Read data from a file .
1256	Create a hello bot agent .
1257	Convert x to a one - hot unit .
1258	Convert a list of metrics into an OrderedDict .
1259	Populate the default settings directory .
1260	Load a TensorFlow model .
1261	Saves this TensorFlow model to a file .
1262	Returns a tf . train_op .
1263	Search for a word in the dictionary d .
1264	Returns a dict containing the default operation costs .
1265	Start the timer .
1266	Handle a request .
1267	Calls the agent on the given utterance .
1268	Generate a response from a response dict .
1269	Handle an intent request .
1270	Handle a launch request .
1271	Handle unsupported messages .
1272	Return a pretty representation of p .
1273	Convert elmo loss to a float .
1274	Build a chainer from a config file .
1275	Interact with a model .
1276	Predict on - stream .
1277	Read an input file .
1278	Construct a function from a string .
1279	Register a function as a metric .
1280	Get a metric by name .
1281	Construct a DecayType from a string .
1282	Given a list of values and a list of losses return the best value .
1283	Encode a list of tokens .
1284	Read the requirements . txt file .
1285	Returns the log loss of a given y - axis .
1286	Export weight_file to hub_dir .
1287	Show the details of a list of items .
1288	Create an ecommerce agent based on tfidf_retrieve
1289	Run ms_bot_framework_server .
1290	Download a file from a given path .
1291	Unpack a tar file .
1292	Decompress a download URL .
1293	Recursively update a dict .
1294	Set path to a . md5 file .
1295	Set a query parameter .
1296	Returns an alexa - formatted response .
1297	Returns a JSON representation of the control .
1298	Returns the ms_bot_framework .
1299	Returns the json representation of the text .
1300	Returns the ms_bot_framework for this card .
1301	Compute the f1 of a squad .
1302	Return the number of times y_true and y_pred are recalled .
1303	r Check if a GPU is available .
1304	Parse a config property .
1305	Parse a config file into a dictionary .
1306	Expand a path .
1307	Construct a Component from a dictionary of parameters .
1308	Executes the command in the input queue .
1309	Delete a conversation .
1310	Refreshes all expired certificates .
1311	Verify a request .
1312	Handle a request .
1313	Construct a class from a string .
1314	Register a model class .
1315	Get a model object from a string .
1316	Get the GLM regularization path for a model .
1317	Create a GLM model .
1318	Create a H2OCluster object from a list of key - value pairs .
1319	Shutdown the H2O instance .
1320	Returns True if the server is running .
1321	Show the status of the cluster .
1322	Returns a list of all jobs .
1323	List all timezones .
1324	Fill self with properties from another h2o cluster .
1325	Returns the metalearner_params dictionary .
1326	Stabilize the sandbox for errors .
1327	Get a summary of a column .
1328	Delete a frame .
1329	Make a JSON request to the ModelBuilders API .
1330	Validate model parameters .
1331	Compute metrics for a given model .
1332	Get model metrics .
1333	Delete a model .
1334	Create a tabular representation of the data .
1335	Run EC2 instances .
1336	Terminate EC2 instances .
1337	Stop all instances in a region .
1338	Start EC2 instances .
1339	Reboot EC2 instances .
1340	Wait for SSH on the given ips .
1341	Return the full name of a function .
1342	Find a function from a code frame .
1343	Return a string representation of a function s arguments .
1344	Wrap text into a string .
1345	Join the job .
1346	Train the model .
1347	Fit the sklearn framework .
1348	Returns a dict containing the parameters of this H2Ostimator .
1349	Handle incoming signals .
1350	Cleans up the output directory .
1351	Remove a sandbox directory .
1352	Scrape the port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM and wait for it to finish .
1355	Stop all client nodes .
1356	Get the IP address of the client .
1357	Returns the port of this node .
1358	Returns the ROC of the model .
1359	Determines the vec_size of the model .
1360	Compute the h2o mean absolute error .
1361	Compute the h2o mean squared error between actual and predicted values .
1362	Calculate the median absolute error between actual and predicted values .
1363	Calculate the h2o explained variance score .
1364	Assert that a variable is of the given type .
1365	Raises an H2OValueError if the argument does not match the regex .
1366	Raises an H2OValueError if an argument does not satisfy the condition .
1367	Retrieve assertion arguments from a file .
1368	Check if var is of type vtype .
1369	Get the name of a type .
1370	Generate the source code for a lambda function .
1371	Check if a variable is valid .
1372	Check if a variable is in the mangle .
1373	Read the config from the device .
1374	Read the config file .
1375	Return a list of log files that can be used for logging .
1376	Execute a progress function .
1377	Store model progress data .
1378	Recalculate the model parameters .
1379	Estimate the progress completion time .
1380	Guess the next poll interval .
1381	Compute the progress at time t .
1382	Returns the time at which x_target has progressed .
1383	Draw text to stdout .
1384	Compute the widths of the widgets .
1385	Get terminal size .
1386	Set the encoding of the bar .
1387	Fit the data to the given frame .
1388	Returns an H2OFrame with the given id .
1389	Refreshes the cache .
1390	Return the type of a column .
1391	Returns the columns of this H2OFrame corresponding to the given type .
1392	Display a summary of the H2OFrame .
1393	Print a description of the frame .
1394	Return a new DataFrame with rows and columns .
1395	Multiply this H2OFrame with the given matrix .
1396	Returns a list of the levels of this node .
1397	Return the number of levels .
1398	Set the level of this node .
1399	Set the levels of this H2OFrame .
1400	Rename columns in the table .
1401	Set the names of this node .
1402	Set the name of the column in the frame .
1403	Returns True if the given item is in the H2OFrame .
1404	Returns a module - k - fold column of this H2OFrame .
1405	Returns a stratified k - fold column .
1406	Print the structure of the H2OFrame .
1407	Returns a pandas . csv . DataFrame containing the frame data .
1408	Remove an element from the H2OFrame .
1409	Return the quantile of the H2OFrame .
1410	Concatenate a list of frames .
1411	Bind a dataframe to a H2OFrame .
1412	Bind a dataframe to an H2OFrame .
1413	Split a single frame into multiple frames .
1414	Returns a new GroupBy with the given bytearray .
1415	Return an h2o . fillna node .
1416	Impute the value of a column .
1417	Merge two H2OFrames .
1418	Relevel a node .
1419	Insert missing values into the dataset .
1420	Return a scalar representation of the variable .
1421	Returns a scalar representation of this H2OFrame .
1422	Returns a H2OFrame with the distance of the node at y .
1423	Returns a new H2OFrame with this node as a factor .
1424	Return a new H2OFrame with a strsplit expression .
1425	Returns an H2OFrame with the number of matches matching the given pattern .
1426	Return a new H2OFrame with a substring .
1427	Return a new H2OFrame with the given set of nodes removed .
1428	The entropy of this H2OFrame .
1429	Returns the number of valid substrings .
1430	Return a table representation of this H2OFrame .
1431	Return a histogram of this node .
1432	Returns a new H2OFrame with an isax node .
1433	Return a new H2OFrame with the given pattern and replacement .
1434	Return the toupper expression of this node .
1435	Return a new H2OFrame with the given pattern .
1436	Omit this node from the H2OFrame .
1437	Returns the 1 - column difflag of this H2OFrame .
1438	Returns an H2OFrame representation of this node .
1439	Returns a H2OFrame representing the minute of this node .
1440	Return a h2o . runif expression for this node .
1441	Returns a random stratified split .
1442	Create a new H2OFrame with the given breaks .
1443	Return the idxmax of this node .
1444	Apply a function to the given axis .
1445	Parse a string into a Code object .
1446	Parse a file into a Code object .
1447	Move drow to dcol .
1448	Unparse the tokens .
1449	Returns the number of cells in the model .
1450	Returns a list of cell centers .
1451	Returns the standard deviation of the centers of each cell .
1452	Connect to an h2o server .
1453	Make a request to the H2O API .
1454	Check the version of the h2o - python package .
1455	Lazy import a path .
1456	Upload a file .
1457	Import data from a file .
1458	Import a hive table .
1459	Import a SQL table .
1460	Import a SQL select query .
1461	Parse a raw H2OFrame .
1462	Create a deep copy of the given data .
1463	Get a model by its id
1464	Get information about a grid .
1465	Get a frame by its ID .
1466	Download a model to a POJO file .
1467	Download data to a CSV file .
1468	Download all logs from a directory .
1469	Export a frame to a file .
1470	Return an H2OFrame as a list .
1471	Demonstrate a function .
1472	Load a dataset from a relative path .
1473	Returns a list of model metrics for the given prediction and actual frame .
1474	Put a key to a file .
1475	Upload a custom metric .
1476	Check if a frame id is valid .
1477	Returns a human readable string of a given size .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Convert a pandas . DataFrame to csv .
1481	Predict a csv file using mojo .
1482	Deprecated decorator .
1483	Join the job .
1484	Returns a list of model . deepfeatures objects for the given test data .
1485	Print a summary of all the models .
1486	Print the hyperparameters .
1487	Get the hyperparameters for the given id .
1488	Return a dictionary of hyperparameters for the given id .
1489	Get the grid for this model .
1490	Returns a dictionary of model . F1 objects .
1491	Returns a pandas DataFrame with the values of each component .
1492	Get the archetypes for the given test data .
1493	Plot a bar plot .
1494	Translate a name into a string .
1495	Dedent a string .
1496	Extracts the run data from a javaLogText file .
1497	runtime javalog . py
1498	Close the H2O session .
1499	Get the session id .
1500	Start logging all API requests to a file .
1501	Prepare the data payload .
1502	Prepare the payload for the given filename .
1503	Log a start transaction .
1504	Log the end of the transaction .
1505	Log a message to the logger .
1506	Process a H2O response .
1507	Print a message .
1508	Get the automl for a project .
1509	Download a python model from the leader .
1510	Download a mojo file .
1511	Fits the model to the given data .
1512	Transform X to y .
1513	Inverse transform X .
1514	Extract a true string from a string_content .
1515	Find the name of the node in each line .
1516	Find a git hash branch .
1517	Find the build timeout in each line .
1518	Find a build failure .
1519	Find build id in each line .
1520	Extract a job build URL from a string .
1521	Grab a Java message from a temporary file .
1522	Save the g_test_root_dir and g_test_passed_tests to a dict .
1523	Update the g_summary_text_file
1524	Write the contents of a file to a file2read file .
1525	Write a Java message to a text file .
1526	Load java messages to ignore .
1527	Normalize an enum constant .
1528	Find all synonyms for a word .
1529	Poll the job status .
1530	Save the assembly to a . java file .
1531	Fit the H2OFrame to the given frame .
1532	Calculate the percentile of a list .
1533	Returns a dictionary with the default values for each parameter .
1534	Returns a dictionary containing the actual values of the params .
1535	Creates a deepfeatures job .
1536	Get the scoring history for this model .
1537	Print information about this H2Ostimator .
1538	Returns a VariableMatrix from the model .
1539	Returns the residual degrees of freedom .
1540	Returns the coef of the model .
1541	Download a python model from the given path .
1542	Download the h2o - genmodel . jar and save it to path .
1543	Save the details of the model to a directory .
1544	Check if y_actual and y_predicted match .
1545	Returns a list of cross validation models .
1546	Generates an H2O radiation boosting estimator .
1547	Train a deep learning model .
1548	Generate a generalized linear model .
1549	Wait for a keypress .
1550	Returns a pandas . DataFrame .
1551	Show the H2O data .
1552	Start a jvm .
1553	Find a jar in the local server .
1554	Returns a generator of the path to the jar file .
1555	Returns the hit ratio table .
1556	Create a csv . DictWriter .
1557	Convert a URI to a path .
1558	Convert a path to a URI .
1559	Parse a line source into functions and classes .
1560	Generate the API documentation for the given URI .
1561	Discover the modules in the root_path .
1562	Write API documentation to outdir .
1563	Write a toctree index to outdir .
1564	Convert to a list .
1565	Load a dict from a pickle file .
1566	Add a new message .
1567	Update a message dictionary .
1568	Extract a message from a file .
1569	Save java messages to a pickle file .
1570	Print a dict of java messages .
1571	Parse command line arguments .
1572	Print usage information .
1573	Find all files in root_dir .
1574	Find magic in a file .
1575	Processes the ROOT_DIR files .
1576	Transform data into an H2OFrame .
1577	Returns a summary of all failed tests .
1578	Extracts the Intermittents from a JSON file and saves them to a file .
1579	Plot the ROC curve .
1580	Calculate the confusion matrix .
1581	Check if the Deep Water model builder is available .
1582	Trim data back to the given monthToKeep .
1583	Return a list of endpoint groups .
1584	Updates or creates a Site .
1585	Return the data as a JSON - serializable object .
1586	Returns the amount of comments received from a user .
1587	Get username and password from a file .
1588	Like a user s feed .
1589	Like a media with a given hashtag .
1590	Check if a user is not a bot .
1591	Read a list from a file .
1592	Schedule the message .
1593	Send a defer message .
1594	Download a resource group .
1595	Guess the service info from a spec path .
1596	Update a PowerShell command .
1597	Delete an application definition by its Id .
1598	Create or update an application definition by id .
1599	Returns the URI for the given request .
1600	Returns a RequestsConnection object .
1601	Perform a request .
1602	Execute script actions .
1603	Checks the availability of a front door .
1604	Purge deleted data from a vault .
1605	Returns the authorization server value .
1606	Validate a request URI .
1607	Get the azure - cli - core CLI profile .
1608	Get Azure CLI credentials .
1609	Resolve a query .
1610	Sends a CheckNameAvailabilityRequest to check name availability .
1611	Open an HTTP request .
1612	Sets the timeout for this request .
1613	Set the request header .
1614	Get all response headers .
1615	Send this Variant to the server .
1616	Returns the current status of the connection .
1617	Returns the status text of the request .
1618	Returns the response body for this request .
1619	Sets the client certificate .
1620	Make a PUT request to the server .
1621	Set a request header .
1622	Send a request to the server .
1623	Get the response from the HTTP request .
1624	Get a readable id .
1625	Get the serialization name for the given element name .
1626	Verify a face to a person .
1627	Add a job to the queue .
1628	Get the properties of an entry from a node .
1629	Get the children of a node from a path .
1630	Find namespaces from a child node .
1631	Convert an XML string to a ServiceBusNamespace object .
1632	Convert an XML string to a ServiceBusRegion object .
1633	Convert an XML string to a NamespaceAvailability object .
1634	Convert xmlstr to metrics .
1635	Replace the content of a resource group with a runbook .
1636	List all recommended domains .
1637	Update a kb .
1638	Get a user s member groups .
1639	Build a package from a package number .
1640	Import data from a resource group .
1641	Publish an operation to a resource group .
1642	Renew the Session lock .
1643	Replace word alterations .
1644	Add a secret value resource .
1645	Gets the properties of a storage account .
1646	Gets the keys for a storage account .
1647	Regenerate storage account keys .
1648	Create a storage account .
1649	Updates a storage account .
1650	Delete a storage account .
1651	Check if a storage account name is available .
1652	Get the properties of a hosted service .
1653	Create a new hosted service .
1654	Delete a hosted service .
1655	Create a new deployment .
1656	Delete a deployment .
1657	Swap a deployment to another .
1658	Change the configuration of a deployment .
1659	Update the status of a deployment .
1660	Upgrade a deployment .
1661	Walks the upgrade domain .
1662	Reboot a role instance .
1663	Delete a list of role instances from a deployment .
1664	Checks the availability of a hosted service name .
1665	Fetches a list of certificates associated with a service .
1666	Get a certificate for a service .
1667	Add a certificate to a service .
1668	Delete a certificate for a service .
1669	Gets the management certificate for a given thumbprint .
1670	Add a management certificate .
1671	Deletes a management certificate .
1672	Gets the properties of an affinity group .
1673	Create a new affinity group .
1674	Delete an affinity group .
1675	List all subscription operations .
1676	Create a new reserved IP address .
1677	Deletes a reserved IP address .
1678	Associate a reserved ip address with a service .
1679	Disassociate a reserved ip address .
1680	Gets the reserved IP address for a given name .
1681	Get a role for a given service and deployment .
1682	Create a virtual machine deployment .
1683	Add a role to a service .
1684	Update a role .
1685	Delete a role .
1686	Capture a role .
1687	Start a role instance .
1688	Start roles for a given service and deployment .
1689	Restart a role instance .
1690	Shutdown a role .
1691	Shutdown roles for the specified service and deployment .
1692	Add a DNS server to a service .
1693	Update a DNS server .
1694	Delete a DNS server .
1695	Fetches a list of all resource extension versions for a given publisher and extension .
1696	Replicate a virtual machine image .
1697	Unreplicates a VM image .
1698	Share a virtual machine image .
1699	Create a virtual machine image .
1700	Delete a virtual machine image .
1701	Returns a list of VM images for the specified location publisher and category .
1702	Updates a virtual machine image .
1703	Add an os image .
1704	Update an OS image .
1705	Update an OS image from an image reference .
1706	Delete an OS image .
1707	Get the data disk for a given service role lun .
1708	Add a data disk .
1709	Update a data disk .
1710	Delete a data disk .
1711	Add a disk .
1712	Update a disk .
1713	Delete a disk .
1714	Generate a summary for a management group .
1715	Build the receiver .
1716	Fetch the next batch of messages .
1717	Renew the lock .
1718	Create or update a virtual machine scale set .
1719	Converts a VMScaleSet to a single placement group .
1720	Sends a screen - text message .
1721	Create a new key .
1722	Import a key from a vault .
1723	Update a key .
1724	Set a secret .
1725	Sets the certificate issuer .
1726	Create a new Service from a connection string .
1727	Get a subscription for a topic .
1728	List all subscriptions for a specific topic .
1729	Sends a list of messages .
1730	Returns a SessionSender object .
1731	Get a SessionReceiver object .
1732	Returns a Receiver object for a deadletter request .
1733	Parse a response for an asynchronous operation .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Get the status of an operation .
1738	Update the headers for the management request .
1739	Build a TRAVIS package .
1740	Get a list of certificates from a vault .
1741	Returns a list of all service bus regions .
1742	List the namespaces for this service .
1743	Get the namespace associated with a service .
1744	Create a new namespace .
1745	Delete a namespace .
1746	Checks the availability of a namespace .
1747	Get a list of topics by name .
1748	Get a list of NotificationHubs .
1749	Get a list of relays by name .
1750	Get the rollups for a given metric from a queue .
1751	Get metrics rollups for a topic .
1752	Get a notification for a metric rollup .
1753	Get a metric rollup from a relay .
1754	Create an ExtendedEnvBuilder .
1755	Create a venv with packages installed .
1756	Create a new MySQL server .
1757	Set the server admin password .
1758	List the quotas for a server .
1759	Get server event logs .
1760	Create a firewall rule .
1761	Update a firewall rule .
1762	Delete a firewall rule .
1763	Fetches a list of firewall rules for a server .
1764	Returns a list of ServiceLevelObjectives for the specified server .
1765	Create a new database .
1766	Update a database .
1767	Delete a database .
1768	Fetches a list of databases by name .
1769	List all agreements for a given name .
1770	Close this message handler .
1771	Close the receiver .
1772	Get the current session state .
1773	Set the session state .
1774	Receive deferred messages .
1775	Merge multiple reservations .
1776	Validate a challenge .
1777	Purge a table from a workspace .
1778	Handle errors .
1779	Create a new queue .
1780	Delete a queue .
1781	Get information about a queue .
1782	Create a new topic .
1783	Get information about a topic .
1784	Create a new rule .
1785	Get a rule by name .
1786	List rules for a topic .
1787	Create a new subscription for a topic .
1788	Get a subscription for a topic .
1789	List subscriptions for a topic .
1790	Send a message to a topic .
1791	Unlock a subscription message .
1792	Send a batch of messages to a queue .
1793	Unlock a queue message .
1794	Receive a message from a queue .
1795	Receive a subscription message .
1796	Create an event hub .
1797	Update an event hub .
1798	Get information about an event hub .
1799	Send a message to a hub .
1800	Update service bus headers .
1801	Get a WRAP access token .
1802	Check if a token is expired .
1803	Get a new token .
1804	Update the request URI query .
1805	Reset a service principal profile .
1806	Delete this queue message .
1807	Unlock the queue message .
1808	Renew the lock on the queue .
1809	Add headers to the request .
1810	Serializes this object as a batch body .
1811	Get the health of a cluster .
1812	Get the cluster health using the given policy .
1813	Unprovisions an application type .
1814	Get a list of tasks for a given task .
1815	Submit a property batch .
1816	Raise AzureHttpError .
1817	Start a web - site network trace operation .
1818	List the differences between a slot and another .
1819	Swap a slot in a resource group .
1820	Get an event by type .
1821	Add a face from a stream .
1822	Handle a redirect request .
1823	Create and start a migration .
1824	Publish events to a topic .
1825	Move resources from one resource group to another .
1826	Sets the profile to use .
1827	List the results for a management group .
1828	Create a new queue .
1829	Delete a queue .
1830	Create a new topic .
1831	Delete a topic .
1832	Create a subscription to a topic .
1833	Create a shared access key from a connection string .
1834	Get the properties of this Namespace .
1835	Check if the lock has expired .
1836	Create a new resource group .
1837	Create a new subscription .
1838	Export request rate by interval .
1839	Handle the output from the results_queue .
1840	Add chunk_tasks_to_add to the results queue .
1841	Task collection thread handler .
1842	Build a config dictionary from a config object .
1843	Reset a password for a user .
1844	Start a new environment .
1845	Create a message from a response .
1846	Convert an etree element to a Rule .
1847	Convert an etree element to a Queue element .
1848	Convert an etree element to a topic .
1849	Convert an etree element to a subscription .
1850	Create a new resource group .
1851	Delete a certificate from a resource group .
1852	Get a client from a cli profile .
1853	Get a graphrbac management client from a json dictionary .
1854	Load a client from an auth file .
1855	Parse an enum result list .
1856	Get the properties of an entry from an element .
1857	Delete a certificate .
1858	Returns a QueueClient for the specified queue name .
1859	List all queues .
1860	Returns a TopicClient for the specified topic name .
1861	Returns a list of TopicClient objects .
1862	Receive deferred messages .
1863	Settlement for deferred messages .
1864	Get information about a specific site .
1865	Create a new site .
1866	Delete a site .
1867	Update a site .
1868	Restart a website .
1869	Get historical usage metrics for a given webspace and website .
1870	Gets the MetricDefinitions for the specified webspace and website .
1871	Get the publish profile XML .
1872	Get the publish profile for the given webspace and website .
1873	Updates the policies for a resource group .
1874	Create a cloud service .
1875	Checks the availability of a job collection .
1876	Get a job collection .
1877	Complete a restore operation .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Reconnect to the Sender .
1881	Get a certificate from a publish settings file .
1882	Load cookies from the cache .
1883	Returns the terminal width of the given value .
1884	Get the cut prefix for a given value .
1885	Print a message inplace .
1886	Format a file size .
1887	Format the elapsed time as a string .
1888	Create a status line .
1889	Iterate over the data in an iterator .
1890	Generate segment numbers for this playlist .
1891	Returns a generator that yields all segments of this representation .
1892	Wait for a given amount of time .
1893	Put a segment into the queue .
1894	Put a value into a queue .
1895	Parse akamaihd - player stream .
1896	Extract a node from an HTTP result .
1897	Find vpid on url and return it .
1898	Parse JSON data .
1899	Parse an XML string .
1900	Parse a query string .
1901	Searches a dictionary for a given key .
1902	Spawn a command .
1903	Iterate over tags .
1904	Parse a manifest .
1905	Determine the JSON encoding for a sample .
1906	Parse a JSON string .
1907	Parse an XML document .
1908	Parse a list of cookies .
1909	Parse headers .
1910	Parse query params .
1911	Get a message from the server .
1912	Create a log record .
1913	Login as a user .
1914	Load a support plugin .
1915	Update the qsd of a URL .
1916	Iterate over chunks of the file .
1917	Returns a generator yielding all required plugins for a given name .
1918	Check if a file exists and if so overwrite it .
1919	Create a file output from a plugin .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Create an output stream from a VLC plugin .
1923	Creates an output stream passthrough .
1924	Open a file descriptor stream .
1925	Open a stream for a plugin .
1926	Read a file from a stream .
1927	Handle a stream .
1928	Fetch streams from a plugin .
1929	Fetch streams with retry .
1930	Resolve a stream name from a list of streams .
1931	Format a list of valid streams .
1932	Handle a URL .
1933	Print the plugins .
1934	Authenticate with Twitch OAuth .
1935	Load plugins from a directory .
1936	Setup the arguments for the parser .
1937	Setup the console .
1938	Setup the http session .
1939	Load plugins from a directory .
1940	Setup streamlink options .
1941	Log current OS and streamlink versions .
1942	Get the stream id for the given text .
1943	Get the iframe for the given text .
1944	Set a key to a value .
1945	Get an option based on the key .
1946	Set an option for a plugin .
1947	Get an option for a plugin .
1948	Resolve a URL .
1949	Load plugins from a given path .
1950	Convert hours minutes seconds to int .
1951	Check if a value starts with a string .
1952	Check if a string ends with a value .
1953	Checks if a string is present .
1954	Returns the value of an attribute .
1955	Apply a function to a list of values .
1956	Convert a python function to a python object .
1957	Validate a URL .
1958	Find an element in an XML document .
1959	Find all elements in an XML document .
1960	Find the player s url .
1961	Load data from a file .
1962	Return the supported player for the given command .
1963	Attempt to login using the given email and password .
1964	Extract a stream id from an HTML string .
1965	Extract stream info from html .
1966	Login to the login website .
1967	Add a function to the map .
1968	Make a call to the API .
1969	Start a new session .
1970	Get information about a media .
1971	Create the Crunchyroll API .
1972	Compress a string .
1973	Returns the character formatter for a character .
1974	Convert a string to a formatted string .
1975	Read n bytes from the stream .
1976	Return the value of this code .
1977	Returns an explanation of the code .
1978	Sets the decode table .
1979	Sets the length of the table .
1980	Prints the code to the screen .
1981	Read a tuple from a stream .
1982	Returns the explanation for the given index .
1983	Returns the value at the given index minus extra .
1984	Returns the span of the value at the given index .
1985	Return the value of a given index .
1986	Return the mnemonic for the given index .
1987	Return the mnemonic for the given index .
1988	Compiles the action list .
1989	Execute an action .
1990	Returns a HexData object for the given position .
1991	Process a stream .
1992	Returns the length of the metablock .
1993	Read uncompressed data .
1994	Reads a block type .
1995	Convert a list of indices to a mtf .
1996	Read a prefix array .
1997	Convert an image to monochrome .
1998	Create a polychrome image .
1999	Create an arrow table from a Vaex DataFrame .
2000	Return a patched version of f .
2001	Add virtual columns with Cartesian velocity to the PMVR .
2002	Adds two virtual columns perpendicular to each other .
2003	Returns a Graphviz node and a dot .
2004	Returns a list of the number of values in the series .
2005	Return a dict - like object mapping the expression to the given mapper .
2006	Create a Vaex application .
2007	Concatenate multiple files into a single dataframe .
2008	Create an AstropyTable object from a SAMP table .
2009	Create a DatasetAstropyTable from an astropy table .
2010	Create a DataFrame from a list of arrays .
2011	Convert scalars to numpy arrays .
2012	Create a DataFrameArray from a Pandas DataFrame .
2013	Read data from a CSV file .
2014	Return a vaex . remote . ServerRest object for the given url .
2015	Compute the Zeldovich distribution .
2016	Concatenate multiple dataframes .
2017	Returns a range of values between start and stop .
2018	Open a dataset .
2019	Evaluate an expression .
2020	Decorator to mark a function as delayed .
2021	Returns a set of columns that depend on the given Dataset .
2022	Schedule a task and run it .
2023	Sort the data by column .
2024	Get information about a file .
2025	Clear the background of the figure .
2026	Wait for the last plot to finish .
2027	Open a document .
2028	Open a file and write it to it .
2029	Split arrays and combine masks .
2030	Perform a no - p operation on an expression .
2031	Compute the first string of an expression .
2032	Compute the mean of an expression .
2033	Compute the sum of an expression .
2034	Return the standard deviation of an expression .
2035	Compute the covariance of a sequence of expressions .
2036	Calculate the minmax value of an expression .
2037	Compute the minimum value of an expression .
2038	Calculate the median approximation of an expression .
2039	Plot a jupyter plot .
2040	Return the number of healpix images .
2041	Plot a healpix image .
2042	Plot a 3D volume plot .
2043	Return the dtype of the data .
2044	Returns a private directory .
2045	Get the state of the state .
2046	Set the state of the index .
2047	Remove the virtual_meta . yaml file .
2048	Writes the virtual_meta . yaml file .
2049	Write meta . yaml .
2050	Returns the subspaces of this column .
2051	Set the value of a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Return a dict representation of the table .
2055	Returns a copy of this DataFrame .
2056	Convert this DataFrame to a Pandas DataFrame
2057	Convert to an arrow table .
2058	Convert to an astropy . table object .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns from Cartesian to polar coordinates .
2062	Add virtual columns to the spherical .
2063	Add virtual columns with Cartesian velocities to polar coordinates .
2064	Add virtual columns with polar velocity to Cartesian .
2065	Add virtual columns rotation .
2066	Add virtual columns to the Cartesian .
2067	Add virtual columns from Cartesian to spherical
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a variable to the table .
2071	Delete a variable .
2072	Returns the last n elements of the sequence .
2073	Print a header and tail table .
2074	Returns a pandas representation of the feature .
2075	Catches two IPython tables .
2076	Set the value of the current row .
2077	Returns a list of column names .
2078	Return a new DataFrame with the columns removed .
2079	Take a DataFrame with the given indices .
2080	Extract indices from a range .
2081	Takes a random sample of the state .
2082	Split a random fracture into multiple fractures .
2083	Split a fractal into multiple fractals .
2084	Sort the data by a set of values .
2085	Materialize a virtual column into a DataFrame .
2086	Undo a selection .
2087	Redo a selection .
2088	Returns True if the selection can be redone .
2089	Execute a boolean expression and return the result .
2090	Select a non - missing column .
2091	Drop non - missing columns .
2092	Select a rectangle .
2093	Select a box from a list of spaces and limits .
2094	Select a circle .
2095	Select an ellipse .
2096	Create a SelectionLasso object .
2097	Inverse the current selection .
2098	Create a new selection .
2099	Create a new selection .
2100	Find a valid name for a given initial name .
2101	Returns a list of nodes that are the root of the tree .
2102	Return a graphviz representation of the dataframe .
2103	Categorize a column .
2104	Encode an ordinal column .
2105	Returns a list of Data objects .
2106	Return the length of the array .
2107	stack two DataFrames horizontally
2108	Concatenate two DataFrames .
2109	Export data to HDF5 format .
2110	Add a column to this DataFrameArray .
2111	Patch a DataFrame .
2112	Decorator to register a function .
2113	Fill a numpy array with a given value .
2114	Returns the datetime . dayofweek of x .
2115	Convert a datetime . dayofyear . value to a pd . Series .
2116	Returns True if x is a leap year .
2117	Returns the datetime . year of x .
2118	Return the dt values for a month .
2119	Returns the datetime . month_name of x .
2120	Returns the datetime . day of x .
2121	Return the datetime . day_name of x .
2122	Returns the datetime . weekofyear of x .
2123	Returns the datetime . hour of x .
2124	Returns the datetime . minute of x .
2125	Returns the dt seconds of x .
2126	Returns a ColumnStringArrow that capitalizes x .
2127	Concatenate two strings .
2128	Returns True if x contains a pattern .
2129	Count the number of characters in a string .
2130	Find a substring in a string sequence .
2131	Returns a column . ColumnStringArrow .
2132	Find the index of a string .
2133	Returns a ColumnStringArrow with x lowercased .
2134	Returns a ColumnStringArrow from a string .
2135	Pad a column with a string .
2136	Returns a ColumnStringArrow that repeats x .
2137	Find a substring in a string sequence .
2138	Find the index of a string .
2139	Adjusts x to a given width .
2140	Returns a column . ColumnStringArrow containing the string x .
2141	Slice a string from start to stop .
2142	Strip a string from a column .
2143	Return a string representation of a column s title .
2144	Convert x to a ColumnStringArrow .
2145	Return the autotype of an array .
2146	Return a numpy . recarray of the dict .
2147	Store properties in a file - like object .
2148	Write a comment to a file .
2149	Write a property to a file .
2150	Iterate over all properties in a file .
2151	Generates newlines from a file - like object .
2152	Print INSTALLED VERSIONS
2153	Rename a keyword argument .
2154	Set fftlib .
2155	Load a beat track from a file .
2156	Adjust the tuning of an audio file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert a time series to frames .
2160	Convert a midi to a note .
2161	Convert from hz to mel .
2162	Convert mel to hz .
2163	Compute the frequency of fft .
2164	Compute the CQT frequencies for a set of bins .
2165	Compute the frequencies of mels .
2166	Calculate the A - weighting for a set of frequencies .
2167	Convert X to a times - like representation .
2168	Samples X along a given axis .
2169	Hybrid CQT .
2170	Pseudo CQT .
2171	Compute the ICQT for a given C .
2172	Compute a constant - Q filter for a given sr .
2173	Trim the top n_bins of a CQT representation .
2174	Compute a CQT response .
2175	Return the number of downsamples between n_octaves and filter_cutoff .
2176	Downsample signal y to sr .
2177	Calculate the accu cost .
2178	Backtracking for D_steps .
2179	Calculate the Viterbi function .
2180	Apply a viterbi discrimination to a transition matrix .
2181	Return a uniform transition between n_states .
2182	Create a transition loop .
2183	Calculate the transition cycle of a set of states .
2184	Apply a local transition to a set of states .
2185	Detect the onset of a signal .
2186	Compute the onset strength .
2187	Backtrack the onset of an event .
2188	Compute the onset strength of a mel spectrogram .
2189	r Convert a list of times to a CSV file .
2190	Write a WAV file .
2191	Returns a cmap of the data .
2192	Plot a waveplot .
2193	Set the current image .
2194	Return the mesh coordinates for the given axes .
2195	Check that axes is an instance of matplotlib . axes . Axes .
2196	Scale axes according to axes type .
2197	Compute the frequency spectrum of a given coordinate .
2198	Compute the mel hz of a given frequency range .
2199	Compute the frequency of a cqt .
2200	Compute the chroma coordinates of a chromosome .
2201	Convert a number of frames to a time .
2202	Estimate pitch tuning using piptrack .
2203	Create a piptrack spectrogram .
2204	Compute the hpss of a string .
2205	Compute the harmonic of y .
2206	Return a percussive representation of y .
2207	Returns the time - stride of a time series .
2208	Perform a pitch - shift resampling .
2209	Remix a sequence of intervals .
2210	Convert a signal to a frame .
2211	Trim a signal to a specified number of frames .
2212	Split a signal into a list of samples .
2213	Create a phase vocoder .
2214	Convert amplitude to db .
2215	Generate a spectrogram .
2216	Compute the hpss beats of a percussive component .
2217	Decompose S into components and activations .
2218	Filter self - similarity matrix .
2219	Helper function for nn filtering .
2220	Compute the mel coefficients for a given sr and fft .
2221	Compute the chromosomes of a sequence .
2222	Create a float window from a spec .
2223	r Compute the constant Q of a string .
2224	r Compute constant q - lengths .
2225	Convert a CQ to chroma .
2226	Calculate the bandwidth of a window .
2227	Get a window from scipy . signal
2228	r Multirate filterbank .
2229	r Returns the center frequencies and sample rates for a given tuning .
2230	Fill a window with ss data .
2231	Compute the sum square of a window .
2232	Apply a diagonal filter to a window .
2233	Create a spectral centroid .
2234	Calculate the spectral rolloff .
2235	Calculate the flatness of a spectrogram .
2236	Compute the polynomial features of a spectrogram .
2237	Calculate the rate of zero crossings .
2238	Generate a chromosome stft spectrogram .
2239	r Compute the chromosome - specific cqt .
2240	Compute a mel spectrogram .
2241	Calculate the Jacobian between two integers .
2242	Given a query and a list of candidates determine if the intervals overlap .
2243	Matches two intervals .
2244	Match a list of intervals .
2245	Matches two lists of events .
2246	Compute the salience of a signal .
2247	Interpolate harmonics along an axis .
2248	Perform a 1D interpolation of harmonics .
2249	Compute the harmonics of a 2D array .
2250	Load an audio file .
2251	Load audio data from an audio file .
2252	Convert y to mono .
2253	Resample y to target_sr .
2254	Return the autocorrelation of y along an axis .
2255	Return the LPC of y in the given order .
2256	Performs audio clicks .
2257	Generate a tone .
2258	Chirp a signal .
2259	Returns a list of all files in a directory .
2260	Stretch a demo file .
2261	Parse arguments and return a list of arguments .
2262	Write a demo of a HPSS file .
2263	r Generate a beat track .
2264	Generate a beat tracker .
2265	Beat the local score for a given period .
2266	Generate a beat track dp .
2267	Calculate the last beat of a cumulative score .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag matrix to a recurrence matrix
2270	Decorator for time - lag filters .
2271	Return a subsegment of the data .
2272	Agglomerative clustering .
2273	Enhance a path .
2274	Detect onsets .
2275	Frame a numpy . ndarray .
2276	Validate that y is a monophonic audio file .
2277	Validate that x is an integer .
2278	Fix the length of the data .
2279	Sort a 2D array by axis .
2280	Normalize S .
2281	Returns True if x is larger than axis .
2282	Pick a peak from the input array .
2283	Scipy . sparse . lil_matrix
2284	Roll x along a sparse axis .
2285	Convert a buffer to a float .
2286	Convert an index to a slice .
2287	Synchronize a set of indexes .
2288	Softmask X and X_ref .
2289	Return a tiny representation of x .
2290	Convert a frame directory to a video file .
2291	Read the image from the cache .
2292	Get a frame from the cache .
2293	Convert a cvt file to a cvt file .
2294	Track the progress of a list of tasks .
2295	Track the progress of a function in parallel .
2296	Flip an image .
2297	Rotate an image .
2298	Clip bboxes to img_shape .
2299	Scale a set of bboxes .
2300	Crop an image using bboxes .
2301	Pad an image with a given shape .
2302	Convert an image to a multi - divisor image .
2303	Scale a size to a given scale .
2304	Resize an image .
2305	Resize an image like a dst image .
2306	Rescale an image .
2307	Register a file handler .
2308	Returns the priority value for the given priority .
2309	Dequantize an array .
2310	Show an image .
2311	Show the bboxes of an image .
2312	Read a flow from a file .
2313	Write a flow to a file .
2314	Dequantize a flow .
2315	Load a state dict from a module .
2316	Load a checkpoint from a file .
2317	Convert a state dict to a cpu dict .
2318	Save a checkpoint to a file .
2319	Initialize an Optimizer object .
2320	Initialize a logger .
2321	Return a list of param groups for the current optimizer .
2322	Register a hook .
2323	Run a workflow .
2324	Register training hooks .
2325	Convert a video file .
2326	Resize a video .
2327	Cut a video file .
2328	Concatenate a list of video files .
2329	Read a list of items from a file .
2330	Read a dictionary from a file .
2331	3x3 convolution with padding
2332	Create an object from a dict .
2333	Read a numpy array or file .
2334	Create an image from a bytearray .
2335	Write an image to a file .
2336	Convert a BGR image to a GRAY image .
2337	Convert a grayscale image to a BGR image .
2338	Cast inputs to dst_type .
2339	Checks if a sequence is of the expected type .
2340	Slice a list into a list of integers .
2341	Decorator to check that the specified prerequisites are met .
2342	Compute the average of all values in the history .
2343	Return a scatter plot of the input .
2344	Return the value of a color .
2345	Check the time of a timer .
2346	Starts the process .
2347	The number of seconds since the timer started .
2348	Returns the number of seconds since the last check .
2349	Show a flow .
2350	Convert a flow to RGB .
2351	Make a color wheel from a list of bins .
2352	Compute the accuracy of the output .
2353	Return a scatter plot of the inputs .
2354	Return a tuple of inputs and kwargs .
2355	Fetch a response from the API .
2356	Returns a JSON - serializable object .
2357	Returns a string .
2358	Handle an AWS callback .
2359	Make a request to multiple URLs .
2360	Make a request to the given URL .
2361	Start the master worker .
2362	Normalize the v2 version of a task .
2363	Parse a YAML file for line numbers .
2364	Return the name of the wheel distribution .
2365	Returns the basename of the archive .
2366	Add requirements from setup . py to metadata_path .
2367	Convert egginfo_path to distinfo_path .
2368	Sends a text message .
2369	Creates a SuggestedActions message
2370	Create a new attachment .
2371	List attachments .
2372	Create an attachment for a given URL .
2373	Create a trace for a turn activity .
2374	Sets the bot s telemetry client .
2375	Read a dictionary from the database .
2376	Write a change to the database .
2377	Delete an item from the database .
2378	Create a StoreItem from a result .
2379	Create a dictionary for the given store item .
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fill a QNA event .
2385	Returns a ConversationReference for the given activity .
2386	Get the name of the step at the given index .
2387	Check if a channel supports suggested actions .
2388	Check if a channel supports card actions .
2389	Returns the channel_id of the activity .
2390	Checks if the given auth header is a valid JWT token .
2391	Prepare an attachment for a HeroCard .
2392	Returns a list of the params defined in the definition .
2393	Return a copy of this instance .
2394	Return the inverse of this gate .
2395	Sets the control value of this Qiskit .
2396	Return a copy of this object .
2397	Return a qasmif string .
2398	Returns the qasm of the parameter .
2399	Run a circuit .
2400	Perform a transformation pass .
2401	Returns a list of all passes in the working list .
2402	Return a dict containing all the passes for this flow controller .
2403	Returns a FlowControllerLinear .
2404	Return a new UBase object .
2405	Return the parameters for a single gate .
2406	Returns a single gate matrix .
2407	Helper function for einsum_matmul_index .
2408	Compute the einsum vector index for a set of gate indices .
2409	Helper function for _einsum_matmul_index .
2410	Convert a circuit to a DAGCircuit .
2411	Compute the fit function .
2412	Fit a function to an osc .
2413	Plot the coherence of two data sets .
2414	Returns a list of tuples containing the mean and standard deviation of the rb .
2415	Plot rb data .
2416	Split a list of runs on a set of parameters .
2417	Compose a u3 matrix .
2418	Convert y - axis coordinates to z - axis coordinates .
2419	Validate input quantum state .
2420	Trim the edges of an image .
2421	Returns the span of the gate for the given instruction .
2422	Convert a circuit to an instruction .
2423	Run the transpiler on the given dag .
2424	Return the best subset of n_qubits .
2425	Return a list of qubits to be used as a barrier .
2426	Compute the average of the data in the given observable .
2427	Process a bit id node .
2428	Process a custom unitary node .
2429	Process a gate node .
2430	Process a cnot node .
2431	Process a Measure node .
2432	Process if node .
2433	Create a dag op .
2434	Returns the duration of a channel .
2435	Return the start time of a channel .
2436	Returns the stop time for a given channel .
2437	Returns an iterable of instructions for the given time .
2438	Check if value is of expected type .
2439	Dump additional data .
2440	Load additional data .
2441	Create a validation schema .
2442	Validate a model instance .
2443	Decorate a shallow_schema method to raise a ModelValidationError .
2444	Serializes this model to a dictionary .
2445	Initialize a ModelValidationError from a dictionary .
2446	Compute the QFT of a circle .
2447	Compute the partial trace of a vector .
2448	Return a vectorized version of a density matrix .
2449	Devectorize a vectorized square matrix .
2450	Convert choi to rauli .
2451	Chop an array by epsilon .
2452	Return the outer vector of vector1 and vector2 .
2453	Compute the concurrence of two qubits .
2454	Calculate Shannon entropy .
2455	Compute the entropy of a state .
2456	Compute mutual information between two states .
2457	Return the entanglement of a state .
2458	Compute the entropy of a qubit .
2459	Flatten a schedule .
2460	Shift a schedule to a new time .
2461	Insert a new ScheduleComponent into a Schedule .
2462	r Append a ScheduleComponent to a Schedule .
2463	Returns a U3Gate .
2464	Returns the current status of the backend .
2465	Start the iteration .
2466	Returns a string representing the time remaining in the iterator .
2467	Disassemble qobj into circuits run config and user qobj header .
2468	Calculate the Hamming distance between two strings .
2469	Calculate a quaternion from a rotation axis .
2470	Construct a quaternion from Euler angles .
2471	Normalize the Quaternion .
2472	Convert to a Matrix object .
2473	Convert the matrix to a Z - axis matrix .
2474	Process data into a dict .
2475	Plot a histogram .
2476	Checks if the value is a collection or a collection .
2477	Raise QiskitIndexError if index j is out of range
2478	Checks if a matrix is a square matrix .
2479	Return True if mat is a diagonal matrix .
2480	Return True if op is a symmetric matrix .
2481	Check if a matrix is a Hermitian matrix .
2482	Check if a matrix is a positive semidefinite matrix .
2483	Return True if mat is an identity matrix .
2484	Return True if mat is a unitary matrix .
2485	Convert a data object to a Choi object .
2486	Convert a superop to a superop .
2487	Convert input_dim to output_dim .
2488	Convert input_dim to output_dim .
2489	Convert input_dim to output_dim .
2490	Convert input_dim to output_dim .
2491	Convert input_dim to output_dim .
2492	Create a DataFrame from an operator .
2493	Convert a channel to an Operator representation .
2494	Convert a superop object to a Choi object .
2495	Reshuffle data from choi to superop .
2496	Convert kraus coordinates to choi coordinates
2497	Convert Choi matrix to Kraus matrix .
2498	Convert stinespring data to kraus data .
2499	Convert input_dim to output_dim .
2500	Convert kraus to stinespring .
2501	Convert kraus to superop .
2502	Convert chi - to choi transformation .
2503	Convert choi to chi .
2504	Compute the reshaping of two tensors .
2505	Transform a Gaussian matrix from a Pauli matrix .
2506	Check if input_dim is equal to output_dim .
2507	Hide ticklines and labels .
2508	Set the label convention .
2509	Clear all points vectors and annotations .
2510	Add a list of vectors to the graph .
2511	Add an annotation to the graph .
2512	Render the figure .
2513	Plot the front of the axis .
2514	Render the figure .
2515	Return the two - qubit Kak function for a unitary matrix .
2516	Returns the top of the layer .
2517	Returns a tuple containing the content of the middle layer .
2518	Returns a bot representation of this layer .
2519	Returns the length of the top mid and bot .
2520	Returns a list of params for a label .
2521	Returns the label for a box instruction .
2522	Return a latex representation of this parameter .
2523	Compile a set of circuits into a qobj .
2524	Filter deprecation warnings .
2525	Return information about the local hardware .
2526	Check if the given host has a connection to the given port .
2527	Check the status of a job .
2528	Returns a constant ndarray .
2529	Compute the square of a time series .
2530	Returns a complex triangle .
2531	Compute the cosine of an array .
2532	r Fix the width of a Gaussian array .
2533	r Compute a Gaussian .
2534	Derivative of a Gaussian function .
2535	r Calculate the square of a gaussian .
2536	Create a default pass manager .
2537	Creates a default pass manager .
2538	Check if a register exists .
2539	Returns a copy of this mirror .
2540	Return the inverse of this circle .
2541	Append an instruction to this object .
2542	Append an instruction to the list .
2543	Add a register to the circuit .
2544	Raise QiskitError if there are duplicate qubit arguments
2545	Raise QiskitError if qargs are not valid .
2546	Raise QiskitError if any of the cargs are not valid .
2547	Check if the circuits are compatible .
2548	Generate a qasm string .
2549	Draw the circuit .
2550	Return the number of gate operations .
2551	Returns the width of the array .
2552	Return the number of operations .
2553	Return the number of connected components .
2554	Bind parameters to the circuit .
2555	Bind a parameter to a value .
2556	Create a pulse drawing .
2557	Search forward n swaps .
2558	Map the free gates to the coupling map .
2559	Calculate the layout distance .
2560	Compute the score of a step .
2561	Returns a DAGCircuit object from a coupling map .
2562	Transform a gate for a given layout .
2563	Create a SwapGate from an edge .
2564	Run the coupling map .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge to the graph .
2567	Returns a sub - graph of the CouplingMap .
2568	The list of physical qubits in the graph .
2569	Returns True if the graph is weakly connected .
2570	Compute the distance matrix .
2571	Returns the distance between two physical qubits .
2572	Deprecated . Use compiler . transpile instead .
2573	Returns a Cu1Gate .
2574	Return the inverse of the instruction .
2575	Returns a boolean indicating whether or not this gate should be invoked .
2576	Returns the gate with classical if and val .
2577	Subscribe to an event .
2578	Dispatch an event to all subscribers .
2579	Unsubscribe from an event .
2580	Publish an event to the broker .
2581	Initialize a QuantumRegister .
2582	Define the circuit .
2583	Return a list of gates to uncompute .
2584	Calculate the Bloch angle between two complexes .
2585	Compute the multiplex of a target gate .
2586	Check if a value is a virtual number .
2587	Return a copy of this layout .
2588	Combines two layouts into a single edge map .
2589	Return a new ToffoliGate with the given keys ctl1 and ctl2 .
2590	Insert a new schedule component .
2591	Raises TranspilerAccessError if the given property is not protected .
2592	Convert a list of gates to a list of indices .
2593	Runs the coupling map .
2594	Update the DAGCircuit .
2595	Generate a pauli group .
2596	r Create a Pauli string from a label .
2597	Initialize a Qiskit object from a boolean .
2598	r Returns a new Pauli and phase .
2599	Convert this matrix to a quantum operator .
2600	Converts this circuit to an instruction .
2601	Update the z - axis .
2602	Update the x - axis .
2603	Insert Pauli labels into the matrix .
2604	Appends a list of paulis to the table .
2605	Delete a set of qubits .
2606	Generate a random number of qubits
2607	Create a Pauli singleton .
2608	Returns the measure outcome for a qubit .
2609	Add a sample measure to the state vector .
2610	Add a qasm measure to the model .
2611	Add qasm reset for a qubit .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Return the state vector .
2615	Validate that measure sampling is allowed .
2616	Run a job on a Qobj .
2617	Run a job .
2618	Validate a qobj .
2619	Validate that the initial unitary is correct .
2620	Initialize the unitary .
2621	Returns a unitary .
2622	Run a job on a Qobj .
2623	Validate a qobj .
2624	Check if an object is a bit .
2625	Run the transpiler .
2626	Returns True if this interval overlaps with this interval .
2627	Shift the interval between start and end times .
2628	Shift the interval to the given time .
2629	Return the start time of a channel .
2630	Return the stop time of a channel .
2631	Checks if a collection of timeslots can be combined with this collection .
2632	Returns a new TimeslotCollection with all slots merged together .
2633	Returns a TimeslotCollection for the given time .
2634	Report an issue .
2635	Return a dict of labels and values for a given rho .
2636	Plot the state of a Paulivec object .
2637	Return the RZZGate between two qubits .
2638	Wrapper for cswap .
2639	Initialize the backend property .
2640	Create a program graph from a dag .
2641	Return the next pending program edge .
2642	Select the best remaining cx from the gate list .
2643	Select the best remaining qubit in the graph .
2644	Run the program on the given dag .
2645	Returns a list of instruction names for this composite gate .
2646	Return the inverse of this gate .
2647	Returns the q - if of the gate .
2648	Returns the c - if of the gate .
2649	Returns True if the matrix is unitary .
2650	Return the conjugate operator .
2651	Transpose the input and output dimensions .
2652	Returns the power of the operator .
2653	Returns a tuple of the output and input dimensions .
2654	Convert a QuantumCircuit instruction to an Operator .
2655	Update a mapper layer .
2656	Separate a bitstring into substrings .
2657	Formats a level 0 memory .
2658	Formats a level 1 memory .
2659	Formats the memory at level 2 .
2660	Format a list of counts into a dictionary .
2661	Format a state vector .
2662	Format a unitary matrix .
2663	Decorator to raise an exception if the job is not submitted yet .
2664	Submit the job .
2665	Returns the current status of the job .
2666	Returns True if the load balancer includes the given frequency .
2667	Plot a Bloch multi - vector .
2668	Get the qubit frequencies from the user s LO config .
2669	Get the meas_lo for the given user_lo_config .
2670	Unroll the circuit to the given basis .
2671	Plot the state of a quaternion .
2672	Return the k - th value in n .
2673	Return the index of n in lst .
2674	Plot a Gaussian state .
2675	Returns a list of unique backends .
2676	Return the op node .
2677	Returns a sampled constant pulse .
2678	Returns a sample of a zero pulse .
2679	Square a pulse .
2680	Generate a sawtooth pulse .
2681	Create a pulse for a triangle .
2682	Return a sampled cosine pulse .
2683	Generate a Sin Pulse .
2684	r Gaussian Pulse .
2685	r Sample a Gaussian derivative pulse .
2686	Gaussian Square Pulse .
2687	Returns the real distance between x and y .
2688	Convert to a string .
2689	Get an instance of backend_cls
2690	Rename a register .
2691	Remove all ops with opname .
2692	Add a QuantumRegister to the circuit .
2693	Add a ClassicalRegister to the circuit .
2694	Add a wire to the graph .
2695	Check if a condition is met .
2696	Return a list of all bits in a condition .
2697	Add an op node to the graph .
2698	Apply an operation back to the graph .
2699	Check the registers of an edgemap .
2700	Check the validity of a wire mapping .
2701	Map a condition to the given wire map .
2702	Extends a DAG to the back of the DAG .
2703	Compose a back circuit .
2704	Check if the list of wires is valid .
2705	Make pred and succ maps for a given node .
2706	Returns a dictionary mapping pred_map to succ_map .
2707	Topological nodes of the graph .
2708	Yields the edges of the graph .
2709	Returns a list of op nodes .
2710	Returns a list of gate nodes .
2711	Returns a list of named nodes .
2712	Returns a list of two Q gates .
2713	Return the predecessors of a node .
2714	Return a list of predecessors of the given node .
2715	Returns the ancestors of a node .
2716	Returns a list of successors of the given node .
2717	Remove an op node from the graph .
2718	Remove ancestors of a node .
2719	Remove all descendants of a node .
2720	Remove all non - ancestors of a node .
2721	Remove all non - descendants of a node .
2722	Returns a DAGCircuit containing all layers of the graph .
2723	Returns a DAGCircuit containing the serial layers .
2724	Yields all layers of the multigraph .
2725	Collect topological operations from a namelist .
2726	Returns a generator that yields nodes on a wire .
2727	Count the number of operations .
2728	Returns a summary of the properties of the tensor .
2729	Returns a TomographyBasis object for the given basis .
2730	Calculate Pauli - Meas Gates .
2731	Calculate the tomography set of a set of qubits .
2732	Process a tomography set .
2733	Create a list of tomography circuits .
2734	Return the data for a given tomography .
2735	Return the marginal counts of a set of qubits .
2736	Fit a reconstruction method to the given tomography data .
2737	Perform a least - squares fit on the data .
2738	Project a list of operations on a basis .
2739	Tomo - linear inversion .
2740	rho_wizard = rho_wizard = rho_wizard = rho_wizard
2741	Generate wigner data .
2742	Set the meas_fun of a circuit .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Compute the euler angles of a 2x2 unitary matrix .
2746	Simplify U .
2747	Run EnlargeWithAncilla .
2748	Returns a tab containing information about the qubits
2749	Display the job history .
2750	Plot the history of a job .
2751	Draw the pulses .
2752	Return the Cu3Gate .
2753	Build a bell circuit .
2754	Transpile a list of circuits .
2755	Transpile a circuit .
2756	Execute a set of experiments .
2757	Returns the drive channel .
2758	Returns the control channel .
2759	Returns the measurement channel .
2760	Returns the acquire channel .
2761	Compute the input state .
2762	Assemble an experiment .
2763	Unsets the qiskit logger .
2764	Plot a HINTON state .
2765	Processes the fidelity of two channels .
2766	Input data to the lexer .
2767	Pop the qasm file from the stack
2768	Push a file to the stack .
2769	Run DAGCircuit .
2770	Returns the bound method for the given instruction .
2771	Convert acquire instruction to QobjMeasurementOption
2772	Convert a frame change instruction to a Qobj object .
2773	Convert a persistent value into a Qobj object .
2774	Convert a drive to a Qobj object .
2775	Convert snapshot to Qobj object .
2776	Update the annotations of a discretized pulse .
2777	Generate a sampler for a continuous pulse .
2778	Filter a list of backends according to a set of criteria .
2779	Resolve a backend name .
2780	Convert a dag to a circuit .
2781	Make a dict observable from a matrix .
2782	Update the symtab for the given object .
2783	Verify that an object is declared as a bit in the gate .
2784	Verify a list of expressions .
2785	Verify that an object is used as a gate or opaque call .
2786	Verify that the given object_type is a valid regex .
2787	Verify a list of registers .
2788	Find a column in the input string .
2789	Parse a debug value .
2790	Parse the given data into a QAM object .
2791	Run the parser .
2792	Parse the qasm file .
2793	Create a new CrzGate .
2794	Compute the basis state of a string .
2795	Convert a state into a density matrix .
2796	Return the purity of a state .
2797	Run the computation on the given dag .
2798	Create a widget for the backend .
2799	Update the backend information .
2800	Generate pending jobs widget .
2801	Returns a list of all cx runs in a dag .
2802	Get a backend matching the criteria .
2803	Return the bipartite shape of the input and output dimensions .
2804	Returns a generator of register names and values .
2805	Truncate a float .
2806	Write the beamer data to a latex array .
2807	Get the depth of the image .
2808	Get the beamer page .
2809	Load a schema from a JSON file .
2810	Get a validator for a schema .
2811	Load schemas and validaters .
2812	Validate a JSON dict against a schema .
2813	Formats a list of causes of an error .
2814	Returns the majority of the points in a b c
2815	Returns the unmajority of a b c .
2816	Generate a LaTeX source for a circuit .
2817	Matplotlib circuit drawer .
2818	Generate a random unitary dimension .
2819	Generate a random density matrix .
2820	Generate a Ginibre matrix .
2821	Generate a random density HSS matrix .
2822	Generate a random ginibre matrix .
2823	Returns a list of all calls to this unitary .
2824	Returns the power of the super - operation .
2825	Compose a subsystem .
2826	Convert an instruction to a SuperOp .
2827	Run the measure and barrier operations on the given dag .
2828	Serialize a list of circuits into a Qobj .
2829	Decompose a 3Q or more gates into a DAGCircuit .
2830	Run the operation on the given dag .
2831	Define the U3Gate .
2832	Check the type of the given value .
2833	Check if the given value is of the given type .
2834	Sets the atol of this Qiskit .
2835	Sets the RTOL of this Qiskit .
2836	Reshape the input and output dimensions .
2837	Returns a tuple of the input dimensions .
2838	Returns a tuple of the output dimensions .
2839	Return a copy of this object .
2840	Return a copy of this Qiskit with n positive integer powers .
2841	Return a tuple of the dimensions of a Qiskit .
2842	Compute the imsum of a matrix .
2843	Deserialize a value .
2844	Serialize a value into a JSON object .
2845	Check if the given value is of the given type .
2846	Compute the fidelity of two states .
2847	Compute the svd of a function func .
2848	Return the inverse of this Snapshot .
2849	Sets the label of this object .
2850	Returns True if the operation is unitary .
2851	Converts this object to an Operator object .
2852	Converts this QuantumChannel to an Instruction .
2853	Initialize a Transformer object .
2854	Sort an enum for a given model .
2855	Patch the _strptime module .
2856	Returns an OrderedDict mapping languages to locales .
2857	Get a list of locales .
2858	Checks if the given tokens are valid .
2859	Split a string into a list of strings .
2860	Parse a date string .
2861	Parse a time string .
2862	Returns True if the given date_string is valid .
2863	Translate a date - string .
2864	Parse a string with a list of date formats .
2865	Gets the ammo generator for this stepper .
2866	Convert a Java exception to a 3 - tuple .
2867	Convert a JMeter exception to an HTTP exception .
2868	Read the configuration from the config file .
2869	Compose a config string .
2870	Get information about the stream .
2871	Compose the config .
2872	Log stdout and stderr .
2873	Expand a time string .
2874	Read the configuration of the stepper wrapper .
2875	Prepare stepper information .
2876	Return the stpd filename .
2877	Read options from a cached stepper file .
2878	Write cached options to the si file .
2879	Make the stpd file .
2880	Create a step factory from an RPS schedule .
2881	Return the rps at the given time .
2882	Execute a command and return the result .
2883	Decode the monitoring data into a list of points .
2884	Make a list of points for a given label .
2885	Publish a value to the database .
2886	Count the number of codes that match the given regex .
2887	Stop the task queue .
2888	Feed all killer tasks .
2889	Initialize logging .
2890	Add user options to the core .
2891	Configure the lock file .
2892	Shutdown gracefully .
2893	Collect data from the queue .
2894	Notify all listeners of aggregated data .
2895	Get a marker for a given type .
2896	Parse a duration string .
2897	Start the agent on localhost .
2898	Start the agent .
2899	Discover the JMeter UDP port .
2900	Add jmeter components to a JMX .
2901	Terminate the process .
2902	Read data from a list of lines .
2903	Create a criterion from a string .
2904	Load monitoring config from XML file .
2905	Create a startup config file .
2906	Check disk usage .
2907	Check if memory is free .
2908	Get terminal size .
2909	Get the right line for the given widget output .
2910	Truncate line_arr to max_width .
2911	Render the left panel .
2912	Render the screen .
2913	Add a widget to the list of info widgets .
2914	Fill a rectangle .
2915	Return the length of a line .
2916	Create a LoadPlanBuilder .
2917	Return a string representation of the level .
2918	Add a widget to the screen .
2919	Make a request to the writer .
2920	Load plugins from config . plugins
2921	Returns the plugin of the specified type .
2922	Returns a list of plugins of the specified type .
2923	Collect artifacts from a file .
2924	Add an artifact file to the collection .
2925	Create a temporary file in the artifacts_dir
2926	Load configuration files .
2927	Flush the configuration to a file .
2928	Get a list of options for a given section .
2929	Find all sections that start with a prefix .
2930	Decode a chunk of statistics .
2931	Get cached info .
2932	Install the monitoring agent .
2933	Collect data from all agents and send it to the server .
2934	Send collected data to all listeners .
2935	Detect the telegraf and monitoring configurations .
2936	Handle data items .
2937	Decode agent data .
2938	Subscribe to a list of channels .
2939	Run the event loop .
2940	Close the window .
2941	Make one HTTP request .
2942	Submit an order .
2943	Get an order by its Id .
2944	Get the position of a symbol .
2945	Returns a list of Asset objects .
2946	Returns an Asset object for the given symbol .
2947	Create a joining subplan for the given pipeline definition .
2948	Check if a parameter is a dict .
2949	Check if obj is a dict .
2950	Construct an event - logger .
2951	Construct a json - event - record - logger .
2952	Create a Config object from a file .
2953	Get the config for a given repository .
2954	Format a config for graphql .
2955	Get a pipeline by name .
2956	Returns a list of all pipelines .
2957	Get the next event from a queue .
2958	Execute a pipeline through a queue .
2959	Joins the Semaphore process .
2960	Construct a FieldImpl based on a dagster type .
2961	Build an ExecutionPlan from a pipeline definition .
2962	Build a pipeline .
2963	Build a sub - pipeline .
2964	Returns True if the pipeline has a solid named name .
2965	Construct a list of publish commands .
2966	Release a new version .
2967	Passthrough a PipelineContextDefinition .
2968	Decorator to create an input selector schema .
2969	Decorator to create an output selector schema .
2970	Create a block of text .
2971	Download the contents of the target file from S3 .
2972	Upload a file to S3 .
2973	Convert a user code error to a bounding box .
2974	Make a directory if it does not exist .
2975	Create a context manager for a user code error .
2976	Create a DagsterLog for a context - free pipeline .
2977	Returns a boolean indicating whether the step was successful or not .
2978	Returns True if all steps have been skipped .
2979	Returns a list of values that have been transformed .
2980	Returns a transformed value .
2981	Returns the step failure data .
2982	Creates a PermissiveDict .
2983	Check if config_value is a valid dataset .
2984	Check if config_value is a valid table .
2985	Executes the core transform for the given inputs .
2986	Create a dagster type from an existing type .
2987	Create a ResourceDefinition .
2988	Create a new EventV2 .
2989	Returns an OrderedDict of the topological steps in the execution plan .
2990	Get connection parameters .
2991	Create a new connection to the database .
2992	Create a cursor .
2993	Close the connection to the database .
2994	Create a model from a dictionary .
2995	Convert a value to a list of dicts .
2996	Creates a new form field .
2997	Convert value to a python object .
2998	Apply the core filters to the queryset .
2999	Compute nfps uniformly .
3000	Compute the real number of frames per second .
3001	Compute the best partitions for a given number of parts .
3002	Compute optimal partitions .
3003	Calculate the difference between a1 and a2
3004	Initialize the slots .
3005	Returns the byte size of the seed and length .
3006	Serialize this MinHash into a buffer .
3007	Deserialize a BUF file .
3008	Update self . hashvalues with b .
3009	Merge this MinHash with another MinHash
3010	Create a MinHash from a list of MinHashes .
3011	Index a set of entries .
3012	Perform a minhash query on all indexes .
3013	Returns the minimum hash of a vector .
3014	Remove a key from the hashtables .
3015	Update the hash of b .
3016	Returns the number of nonzero values in the matrix .
3017	Merge two HyperLogLogs .
3018	Clear the data .
3019	Calculate apk between actual and predicted .
3020	Map k values to actual and predicted values .
3021	Returns the index of the hashtables .
3022	Given a minhash and a k - value return a list of results .
3023	Close the hash table .
3024	Return an ordered storage object .
3025	Given a config return a dict or redis set storage .
3026	Returns the user data for the given object .
3027	Override get_social_login to set process to CONNECT
3028	Select text from a string .
3029	Parse a scoped selector .
3030	Parse a statement .
3031	Parse a value .
3032	Advance one line .
3033	Parse a configurable reference .
3034	Adds an exception to the message and raises the exception .
3035	Markdownify an operative config string .
3036	Create a gin . gin file in the output directory .
3037	Ensure that a function is wrappable .
3038	Decorate a function or class .
3039	Format a value to a literal .
3040	Clears the config .
3041	Bind a parameter to a Gin config .
3042	Query the configuration for a parameter .
3043	Check if fn_or_cls has a parameter .
3044	Return a cached version of a function s argspec .
3045	Get the list of positional parameter names supplied by a function .
3046	Get all positional parameter names for a function .
3047	Get the default configuration parameter values for a function .
3048	Validate a config scope .
3049	Make a function configurable .
3050	Format an operative config string .
3051	Parse a config file .
3052	Register a file reader function .
3053	Parse a config file .
3054	Parse config files and bindings .
3055	Parse a config value .
3056	Finalize the config .
3057	Iterate over flattened values .
3058	Iterate over all references in a configuration .
3059	Sets the value of a constant .
3060	Convert an enum class to a list of constants .
3061	Return a list of selectors matching the given partial selector .
3062	Get all matches for a partial selector .
3063	Return a minimal selector .
3064	Return a string representation of a search query .
3065	Parse retry - after header .
3066	Validate the value against the metadata .
3067	Return a copy of the metadata as a property description .
3068	Validate and set the value .
3069	Get the thing at idx .
3070	Initialize things and hosts .
3071	Set default headers .
3072	Prepare the HTTP request .
3073	Get information about a thing .
3074	Called when a message is received .
3075	Perform a POST request to a thing .
3076	Delete a thing .
3077	Start the webthing service .
3078	Returns a description of the action .
3079	Start the process .
3080	Called when the task is finished .
3081	Returns a description of the event .
3082	Get an IP address from a socket .
3083	Returns a list of IPv4 and IPv6 addresses .
3084	Set the value .
3085	Notify of an external update .
3086	Returns a description of the thing .
3087	Set the href prefix of all properties and actions .
3088	Returns a dictionary containing the description of each property .
3089	Returns a list of action descriptions .
3090	Returns a list of event descriptions for the given event name .
3091	Add a property to the list of properties .
3092	Remove a property .
3093	Get a property by name .
3094	Returns a dictionary containing all the properties of this object .
3095	Set the value of a property .
3096	Get an action by name and id .
3097	Add an event to the event list .
3098	Add an event to the list of available events .
3099	Perform an action .
3100	Remove an action from the queue .
3101	Add an action to the available_actions list .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Notify all subscribers of a property .
3106	Notify all subscribers of an action .
3107	Notify all subscribers of an event .
3108	Add new annotations to the model .
3109	Update the database with the given fields .
3110	Bulk insert rows into the database .
3111	Insert the given fields into the database .
3112	Inserts the given fields into the database and returns the result .
3113	Build the insert compiler .
3114	Check if a field is a magic field .
3115	Returns a list of fields to add to the model instance .
3116	Called when a model is saved .
3117	Called when a model is deleted .
3118	Returns True if the given fields are not None .
3119	Resolve an expression .
3120	Return a string representation of this object as a SQL statement .
3121	Returns a clone of this object with the given relabels .
3122	Add join conditions to the table .
3123	Check if a field is an instance of an HStoreField .
3124	Adds a list of objs to the database .
3125	Create a required hstore constraint .
3126	Rename a required hstore table .
3127	Drop a hstore required constraint .
3128	Return the required constraint name for the given field and key .
3129	Create a SQL statement .
3130	Create a custom command from a list of commands .
3131	Get the base class from settings .
3132	Add the hstore extension to the database .
3133	Converts a dict or list into a dict .
3134	Returns the RETURNING form .
3135	Returns a list of SQL queries .
3136	Rewrite an insert statement .
3137	Rewrite the insert_update statement .
3138	Rewrite insert_nothing clause .
3139	Build a conflict target for the query .
3140	Return the model field with the given name .
3141	Format a field name .
3142	Formats the value of a field .
3143	Create an hstore unique constraint .
3144	Rename an hstore unique constraint .
3145	Drop an hstore unique constraint .
3146	Generate a unique constraint name .
3147	Iterate over uniqueness keys .
3148	Add a condition to a field .
3149	Convert the table to a SQL statement .
3150	Returns the T - Distance 95 - Conf level of a dataframe .
3151	Calculate the pooled variance of two samples .
3152	Compute the t - score between two samples .
3153	Check if two samples are significant .
3154	Given a list of roots and a list of getParents return a list of topologically similar nodes .
3155	Return a generator that yields the number of queens in a list .
3156	Play a board .
3157	Select a board from the unexplored list .
3158	Play a random game on the board .
3159	Filter out benchmarks that are not compatible with base_ver .
3160	Return a new BenchmarkName instance with the given name and a list of BenchGroups .
3161	Generate a string table .
3162	Initialize the benchmarks .
3163	Returns a tuple of the number of knots and the degree of the knot .
3164	Fetch messages of a channel .
3165	Parse a list of posts .
3166	Get information about a user .
3167	Fetch items from a category .
3168	Fetch rss entries from feed .
3169	Setup the command parser .
3170	Fetch items from the database .
3171	Get a list of bugs .
3172	Returns the comments for the given bug_ids .
3173	Get the history of a bug .
3174	Get attachments for a set of bug ids .
3175	Get a list of notes for an issue .
3176	Fetch all merge requests .
3177	Get a list of notes for a given merge .
3178	Returns a list of versions for a given merge .
3179	Get a list of all merges .
3180	Merge a project into another project .
3181	Get a list of versions of a merge .
3182	Get a version from a merge .
3183	Fetch a list of notes for an item .
3184	Fetch emojis from GitLab .
3185	Fetch emojis for a note .
3186	Calculate the time to reset the rate limit .
3187	Fetch items from GitLab .
3188	Initialize the rate limit .
3189	Setup the command parser .
3190	Fetch a list of items from the database .
3191	Get the metadata id of an item .
3192	Get the members of a conversation .
3193	Get information about a channel .
3194	Fetches information about a user .
3195	Setup the command parser .
3196	Return a timestamp of the metadata updated on the given item .
3197	Parse a raw CSV file into a list of dicts .
3198	Parse the bug details from an XML stream .
3199	Parse an HTML table of bug activity .
3200	Logs out of Bugzilla .
3201	Returns a dict containing the metadata for this object .
3202	Returns a list of all bugs .
3203	Get a list of bug ids
3204	Get the activity of a bug .
3205	Fetch items from the database .
3206	Fetch events of a given category .
3207	Get a list of events for a group .
3208	Returns a generator yielding all comments for the given group .
3209	Get a list of RRSVPS from a group .
3210	Fetch a question from the server .
3211	Fetch the comments for a question .
3212	Build a question object from an html question .
3213	Fetch questions from the API .
3214	Fetch an HTML question .
3215	Get comments for a given post .
3216	Parse a question container .
3217	Parse an html question .
3218	Parse number of HTML pages .
3219	Parse user info .
3220	Fetch items from Gerrit .
3221	Parse reviews from a JSON string .
3222	Fetch gerrit28 from the server .
3223	Get the version of Gerrit .
3224	Get reviews for a given item .
3225	Returns the next item in a group .
3226	Execute a command .
3227	Execute a command from an archive .
3228	Execute a Gerrit command from a remote machine .
3229	Setup the command parser .
3230	Fetches the data for an issue .
3231	Fetch attachments for an issue .
3232	Fetches all the messages for an issue .
3233	Fetches all activities associated with an issue .
3234	Fetch user data .
3235	Get information about a user .
3236	Get information about an issue .
3237	Get a bug collection for an issue .
3238	Returns the url for this project .
3239	Fetch items from a given path .
3240	Get groupsio paginated subscriptions .
3241	Find the group id for this group .
3242	Fetch an object from a URL .
3243	Setup the command parser .
3244	Convert a string to a UUID .
3245	Fetch an archive from a backend .
3246	Fetch files from an archive .
3247	Find all backends for a given top package .
3248	Fetch a single item from the database .
3249	Fetch metadata from an archive instance .
3250	Filter classified data for an item .
3251	Parse command line arguments .
3252	Add authentication arguments to the parser .
3253	Sets the arguments for the archive command .
3254	Set the output parsing arguments .
3255	Fetch items from the archive .
3256	Initializes the archive manager .
3257	Returns the timestamp of the metadata update on the given item .
3258	Parse a MBox file .
3259	Fetch and parse messages from a mailing list .
3260	Copy the contents of a mbox to a temporary file .
3261	Validate a message .
3262	Convert a case dictionary to a dict .
3263	Get a message from the mailbox .
3264	Fetch a list of items from the database .
3265	Fetch items from the repository .
3266	Parse a git log from a file .
3267	Pre - initialize git path .
3268	Setup the command parser .
3269	Parse the stream .
3270	Clone a repository into a new directory .
3271	Count the number of objects in the directory .
3272	Check if the repository is detached .
3273	Update the repository .
3274	Sync the repository .
3275	Get the rev - list for this repository .
3276	Get the git log for this repository .
3277	Run the git show command .
3278	Fetch a package from the dulwich server .
3279	Read commits from a git packet .
3280	Update a list of references .
3281	Discover git repositories .
3282	Update a git ref .
3283	Execute a command in a subprocess .
3284	Read stderr .
3285	Execute a command .
3286	Fetch a list of tweets .
3287	Fetch tweets from a given category .
3288	Get a list of tweets for a given query .
3289	Setup the command parser .
3290	Fetch a list of items from the database .
3291	Fetch all items in a category .
3292	Parse the hits json .
3293	Get a list of hits for the given keywords .
3294	Returns the timestamp of the metadata updated on a given item .
3295	Returns the metadata category for the given item .
3296	Fetch pull requests from the server .
3297	Fetch repo info .
3298	Returns a list of all the reactions for an issue .
3299	Returns a list of all reactions for a given issue comment .
3300	Get issue assignees .
3301	Returns a list of all the reviewers requested by pr_num .
3302	Get a list of pull commits .
3303	Get a list of reactions for a pull review comment .
3304	Returns the user object for the given login .
3305	Fetch all the reactions for an issue .
3306	Fetch a list of issues .
3307	Returns a generator yielding all the pulls in the repository .
3308	Returns a list of all repositories in this repository .
3309	Pulls the requested reviewers for a given PR number .
3310	Get a list of commits for a given PR .
3311	Retrieves the reactions for a given review comment .
3312	Get a user by login .
3313	Get user orgs for a given login .
3314	Get the rate limit for a given token .
3315	Returns the rate limits for all tokens .
3316	Choose the best API token .
3317	Check if we need to check the number of tokens .
3318	Update the current rate limit .
3319	Initialize the metadata table .
3320	Store data in the archive .
3321	Retrieve an entry from the database .
3322	Create a new archive .
3323	Create a hashcode for a given URI and payload .
3324	Verify the integrity of the archive .
3325	Load metadata infomation of archive .
3326	Return the number of rows in a table .
3327	Create a new archive .
3328	Remove an archive from the system .
3329	Search archives .
3330	Searches for archive files that match the given criteria .
3331	Return a generator yielding all files in the directory .
3332	Check if filepath is a compressed file type .
3333	Yields a list of months between two dates .
3334	Convert an email message to a dictionary .
3335	Remove invalid xml characters from raw_xml .
3336	Convert raw XML to a dict .
3337	Parse issues from a JSON string .
3338	Returns a list of issues .
3339	Get information about an issue .
3340	Get information about a user .
3341	Make a request to Redmine .
3342	Fetch items from the DockerHub .
3343	Fetch items from the repository .
3344	Get information about a repository .
3345	Map a custom field to a custom field .
3346	Filter custom fields .
3347	Parse issues from a json page .
3348	Get a list of items from a URL .
3349	Get all issues for a given date .
3350	Get the comments for an issue .
3351	Get a list of fields from the API .
3352	Fetch items from a category .
3353	Get a list of jobs from the API .
3354	Fetches all builds for a given job .
3355	Parse questions from a json page .
3356	Returns a generator of questions .
3357	Setup the command parser .
3358	Fetch items from MediaWiki .
3359	Get the maximum timestamp for a list of reviews .
3360	Fetch 1 - 27 pages from the API .
3361	Get all pages in a namespace .
3362	Return a list of recent pages in a namespace .
3363	Fetch a message for a given category .
3364	Parse a list of messages from a JSON file .
3365	Filter a message by a list of chats
3366	Calls UPDATES_METHOD with the given parameters .
3367	Fetch the articles of the given category .
3368	Return the metadata for the given item .
3369	Parse an email article .
3370	Fetch data from a remote host .
3371	Fetch a single article .
3372	Fetch data from a remote server .
3373	Fetch data from an archive .
3374	Create a requests . Session object .
3375	Setup the rate limit handler .
3376	Sleep for rate limit .
3377	Updates the rate limit for the response .
3378	Parse a Supybot log file .
3379	Retrieve a list of supybot archives .
3380	Return a list of supybot archives .
3381	Parse the stream .
3382	Parse a SUPYBOT_TIMESTAMP_REGEX line .
3383	Parse a SUPYBOT message .
3384	Fetch all topics in a given category .
3385	Parse the topics page .
3386	Get information about a topic .
3387	Send a POST request .
3388	Fetch tasks of a given category .
3389	Parse a JSON - encoded list of tasks .
3390	Parse user data from a JSON string .
3391	Returns a generator that yields all tasks .
3392	Get a list of MANIPHEST_TRANSACTIONS .
3393	Returns a list of users with the given phids .
3394	Get a list of phids .
3395	Call the given method with the given parameters .
3396	Return the metadata id of an item .
3397	Parse the contents summary from a JSON string .
3398	Returns a generator of the contents of the resource .
3399	Returns the historical content for the given content_id and version .
3400	Parse the result of the test .
3401	Returns the capabilities url for a given service .
3402	Read an etree from a URL .
3403	Read an etree from a string .
3404	Parse the wml2 result .
3405	Build a url from a query string .
3406	Find all elements of a complex type .
3407	Construct a schema from a list of elements .
3408	Get the description of a feature type from a URL .
3409	Performs a complex input with a reference .
3410	Get a movie list .
3411	Get a list of TVs .
3412	Get a list of movies .
3413	Get information about a user .
3414	Get alternative titles .
3415	Returns a list of credits associated with this account .
3416	Get external ids .
3417	Get a list of keywords .
3418	Returns a list of recommendations .
3419	Get a list of release dates .
3420	Get a list of releases .
3421	Get a list of translations .
3422	Get a list of similar movies .
3423	Get a list of reviews .
3424	Get a list of changes .
3425	Get a list of upcoming events .
3426	Check if the player is currently playing .
3427	Returns a list of popular attributes .
3428	Returns a list of the top - rated services .
3429	Get a list of account states .
3430	Returns the rating for the current user .
3431	Get movie credits .
3432	Get credits for a TV .
3433	Get credit information .
3434	Get information about a TV .
3435	Get information about a resource .
3436	Get a movie list .
3437	Get information about a session .
3438	Get a list of movies in the watchlist .
3439	Create a new token .
3440	Validate a token with a login .
3441	Create a new session .
3442	Create a new guest session .
3443	Get a list of movies rated by the user .
3444	Get the status of an item .
3445	Create a new list .
3446	Remove a media item .
3447	Clear a list .
3448	Returns a list of the user s content ratings .
3449	Returns a list of objects that are similar to this object .
3450	Get on - the - air information .
3451	Get information about a season .
3452	Get credits for a season .
3453	Returns a list of external ids .
3454	Get information about a season .
3455	Get credits for a season .
3456	Returns a list of external ids .
3457	Set the attributes of the object to the values in the response .
3458	Get information about a movie .
3459	Get the contents of a collection .
3460	Get information about a TV .
3461	Get information about a person .
3462	Get information about a company .
3463	Get the value of a keyword .
3464	Get a list of multi - tuples .
3465	Normalize a string .
3466	Returns the number of refs and the maximum number of refs .
3467	Returns the number of n - grams in a reference set .
3468	Calculate the erfcc of x .
3469	Align source and target texts .
3470	r Get all descriptors in a module .
3471	Register a Descriptor from a JSON string .
3472	r Registers a model .
3473	Write progress bar to stdout .
3474	r Checks if a descriptor is a class .
3475	Serializes this object to a JSON string .
3476	Returns the coordinate of the 2D descriptor .
3477	r Calculate the atomic mass at i .
3478	r The surface area of the molecule .
3479	r Convert a molecule into a molecule .
3480	Create a ConstDescriptor object from a JSON string .
3481	r Fill missing values .
3482	r Drop missing values and descriptions .
3483	r Returns a list of keys and values .
3484	r Return a dict representation of the object .
3485	r Returns the name of the descriptor .
3486	Log all calls to a function .
3487	A decorator to ensure that a function is synchronized .
3488	Write a progress message to stdout .
3489	Write a message to stdout .
3490	Fail with a message .
3491	Get a temporary file from a target .
3492	Set a temporary file .
3493	Remove all temporary files .
3494	Returns a fixed path .
3495	Returns a list of legal parameters for the given method .
3496	Merge the legal parameters of a method into a kargs .
3497	Add additional options to the parser .
3498	Terminate the task .
3499	Add a task to the queue .
3500	Join all the workers .
3501	Returns the number of tasks that have been processed .
3502	Read S3 keys from environment variables .
3503	Read S3 keys from the command line .
3504	Read S3 keys from s3cfg file .
3505	Initialize S3 keys .
3506	Connect to S3 .
3507	List all S3 buckets .
3508	Run s3walk on a directory .
3509	Return a list of all files in the given basedir .
3510	Expand a source .
3511	Upload a single file to S3 .
3512	Put files from source to target .
3513	Create a new bucket .
3514	Updates the privilege of an object .
3515	Print a list of files from S3 .
3516	Download a single file from the pool .
3517	Get a list of files from a source directory .
3518	Copy a single file from source to target .
3519	Copy files from source to target .
3520	Delete all files in source .
3521	Return a list of paths relative to dir .
3522	Sync files from source to target .
3523	Returns the MD5 hash of a file .
3524	Get the MD5 of the file .
3525	Create a directory if it doesn t exist
3526	Check if md5cache and remoteKey match .
3527	Return True if path matches filter_path .
3528	Perform a s3 walk .
3529	Return a new object if it is a file or directory .
3530	Return the file privilege for the given source .
3531	Lookup a head object from an S3 URL .
3532	Read a chunk from a file .
3533	Upload a file from source to target .
3534	Verify the size of the downloaded file .
3535	Write a chunk of data to a file .
3536	Copy an object from source to target .
3537	Run a command .
3538	Validate the given command and args .
3539	Pretty print a list of objects .
3540	Return a list of buckets .
3541	Handle S3 bucket creation .
3542	Create a S3 file handler .
3543	Get s3 file handler .
3544	Handle S3 commands .
3545	Handle dsync commands .
3546	Handle cp files .
3547	Handle mv files .
3548	Delete files from the S3 handler .
3549	Handle s3 . src .
3550	Returns the total size of the message .
3551	Matches the given date with the given value .
3552	Matches the given time with the current time .
3553	Return a datetime . delta object matching the given value .
3554	Check if a dict value is valid .
3555	Discover Xiaomi gateways .
3556	Listen to messages from the server .
3557	Get data from a hub .
3558	Push data to the callbacks .
3559	Returns a ciphertext key .
3560	Handle exceptions from a job .
3561	Adds a tween to the rollbar .
3562	Ensure that the log handler is set .
3563	Get a request from the API .
3564	Initialize a Rollbar .
3565	Decorator for lambda functions .
3566	Report a message to Rollbar .
3567	Return a list of items matching the search criteria .
3568	Create the agent log .
3569	Build a person property from a request .
3570	Add lambda context data .
3571	Add the request data to the request data .
3572	Check if add_locals is correct .
3573	Builds the data for a request .
3574	Build the server data dict .
3575	Build a payload from a dictionary .
3576	Main entry point for the Echo reactor .
3577	Compose a Hangul character .
3578	Decompose a Hangul letter .
3579	Return True if the given letter is a jongsung string .
3580	Attach a word to a string .
3581	Check if a node is inside an except .
3582	Check if a node is inside a Lambda .
3583	Returns an iterator over all elements of a node .
3584	Check if a node is clobbering .
3585	Check if a node is super .
3586	Check if a node is an error .
3587	Check if a node is a default argument .
3588	Check if the given node is a function decorator .
3589	Returns True if the given node is an ancestor of the given frame .
3590	Assign a parent to a node .
3591	Returns a function that checks messages .
3592	Returns an iterable of fields from a format string .
3593	Get an argument from a call .
3594	Check if a node inherits from a standard expression .
3595	Returns True if the error is of the given type .
3596	Check if a function is decorated with a property .
3597	Check if a function is decorated with the given qnames .
3598	Find a TryExcept wrapper node .
3599	Check if a node is a fallback block .
3600	Returns a list of exception handlers for the given node .
3601	Check if a node ignores an exception .
3602	Check if a class is abstract .
3603	Safely infer the value of a node .
3604	Return the type of a node .
3605	Check if a function is registered in a singledispatch function .
3606	Check if a postponed evaluation is enabled .
3607	Return a list of qualified names for a given modname .
3608	Given an import node and a module name return the import name .
3609	Return a list of tree definitions .
3610	Write a dependency graph to a file .
3611	Visit an import node .
3612	Check if a module is imported from another module .
3613	Check the import position of a node .
3614	Record an import .
3615	Check if imports are in order .
3616	Check if relative import is enabled .
3617	Add an imported module to this node .
3618	Check if a module is deprecated .
3619	Check if a module is in preferred_modules .
3620	Report external dependencies .
3621	Filter the dependency graph .
3622	Returns a list of the default options .
3623	Insert default options .
3624	Show the attribute of a node .
3625	Get the callbacks for the given node .
3626	Visit a node and return its callbacks .
3627	Check the consistency of the message ids .
3628	Visit a call node .
3629	Check if the given node is a datetime object .
3630	Check if the node is in open mode .
3631	Handle a message .
3632	Print messages to a JSON file .
3633	Get the title of a node .
3634	Set default options .
3635	Show a node .
3636	Add a class to the classdiagram .
3637	Get the ancestors of a node .
3638	Returns a list of all nodes that are associated with the given klass .
3639	Extract classes from a node .
3640	Leave a project .
3641	Add an import from node to the pkgdiagram
3642	Returns the class diagram for a given class .
3643	Returns a list of class - specific diadefs .
3644	Check if an owner is ignored .
3645	Returns a list of names that are similar to the given name .
3646	Emits a boolean indicating whether the given node is a member of the given owner .
3647	Check if a node has a parent of a given type .
3648	Check if a name is used as a variable .
3649	Returns True if the variable is not in the context of the given node .
3650	Visit an attribute node and return a list of its members .
3651	Visit a function node and return a list of function nodes .
3652	Check if a call is an uninferable call .
3653	Visit a UniaryOp node .
3654	Yield all interfaces of a node .
3655	Create a project from a list of files .
3656	Recursively visit a package .
3657	Visit a functiondef node .
3658	Visit a node s astroid . AssignName .
3659	Handle assignattr type .
3660	Visit an import node and check if it is relative .
3661	Visit an import from node .
3662	Compute the module name for a given context and path .
3663	Import a module from a node .
3664	Return an ANSI code string .
3665	Colorize an ANSI message .
3666	Registers the linter with the VSTextReporter .
3667	Handle a message .
3668	Print the output to a text file .
3669	Handle a message .
3670	Write a graph to the stream .
3671	Write a node to the stream .
3672	Write an edge between two nodes .
3673	Check if the given function has a new format .
3674	Process a non - raw string token .
3675	Visit a section .
3676	Visit the evaluation section .
3677	Visit a table and write it to the file .
3678	Create a default table .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Check if a symbol is a valid alternative message .
3683	Raise InvalidMessageError if message id cannot have both symbol and other_symbol
3684	Raise InvalidMessageError if symbol and other_msgid are used at the same time .
3685	Returns the message definitions for the given message id or symbol .
3686	Get the display string for a message .
3687	Print help message for given msgids .
3688	List all messages .
3689	Build a pylint . extensions . pylint . extensions . rst .
3690	Return the number of CPUs in the system .
3691	Report the statistics for a specific message .
3692	Fix python import path .
3693	Load plugin modules from a list of modnames .
3694	Load the configuration of the dynamic plugins .
3695	Set the value of an option .
3696	Register a checker .
3697	Disable all reports .
3698	Configure python3 porting mode .
3699	Returns a list of all checkers .
3700	Returns a sorted list of checker names .
3701	Prepares the list of checkers to be used .
3702	Expand a list of files .
3703	Set the current module .
3704	Check the astroid module .
3705	Report the evaluation of the code .
3706	Displays a help message .
3707	Print the full documentation of an option .
3708	List messages in the message store .
3709	List all linter groups .
3710	Normalize a string .
3711	Return the module and frameid of a node .
3712	Safely decode a line .
3713	Check if a basename is in a blacklist .
3714	Register all plugins in directory .
3715	Return a comment from a string .
3716	Format an option value .
3717	Format a section .
3718	Format options in ini format .
3719	Insert a child at the given index .
3720	Add a child node to this node .
3721	The parents of this node .
3722	Format the stdout .
3723	Get the content of a table .
3724	Compute the content of a layout .
3725	Collect block lines from the message store .
3726	Handle an ignored message .
3727	Register a report .
3728	Create a report section from the stats .
3729	Add stats to self . stats
3730	Returns the property name of the setter .
3731	Returns the setter property of a node .
3732	Returns True if the return_node is a Const and returns is None .
3733	Return a list of possible exception types for the given node .
3734	Processes a module .
3735	Process a module .
3736	Process a list of tokens .
3737	Check if the given statement is from a future import .
3738	Returns True if stmt is in the parent branch of stmt .
3739	Return the overridden method with the given name .
3740	Returns the unpacking extra info for the given node .
3741	Detect the global scope of a node .
3742	Returns True if the given name node is assigned locally .
3743	Mark a node as consumed .
3744	Visit a global node .
3745	Ignore the class scope of the given node .
3746	Checks if the given node is in the upper function scope .
3747	Check the unpacking of a node .
3748	Check the metaclasses of a node .
3749	Returns a list of packages in a directory .
3750	Install pylint packages .
3751	Run the install .
3752	Report the similarities between two tables .
3753	Run sys . argv .
3754	Append a stream to the list of LineSets .
3755	Compute the sims of the ensembles .
3756	Print a list of sims .
3757	Find common lines between two lines .
3758	Iterate over all sims .
3759	Enumerate the lines that have been stripped .
3760	Returns a dictionary containing the list of lines that have been skipped .
3761	Check if a definition is equivalent to a call .
3762	Check if an argument is equal to another .
3763	Check if the original parameter has a different default value .
3764	Computes the difference between the original and the overridden parameters .
3765	Safely infer the result of a call .
3766	Set the attrname of a node .
3767	Visit a classdef node .
3768	Check if mro is consistent .
3769	Check if a node has proper base classes .
3770	Visit a functiondef node .
3771	Check if a function is a method or decorator .
3772	Leave a functiondef .
3773	Check if a node is in any of the slots .
3774	Visit a node by name .
3775	Check if members of a node have been accessed .
3776	Checks if the base class of the node is abstract .
3777	Check if the signature of a method is valid .
3778	Check if a method parameter is mandatory .
3779	Check if a node is raising .
3780	Check if the given node has a bad exception context .
3781	Visit a functiondef node .
3782	Display the reports for a given layout .
3783	Check if a node is a typedtuple .
3784	Check if a node is an enum class .
3785	Check if a node is a data class .
3786	Open the linter .
3787	Visit a classdef node .
3788	Leaves a class node .
3789	Visit a If node .
3790	Check if the given node has too many boolean expressions .
3791	Check if the docstring is correct .
3792	Return a formatted version of the template .
3793	Check if a token is trailing comma .
3794	Returns True if the given node is an actual elif .
3795	Check if the given node is a simplifiable if
3796	Check if the stop iteration is inside a generator .
3797	Check if the exception inherits from a stopiteration .
3798	Check if the next call will raise a stop iteration in the generator .
3799	Check if a node is a nested block .
3800	Duplicate isinstance types .
3801	Check if consider - merging - isinstance is a valid argument .
3802	Check if a comparison is chained .
3803	Check if a node is an and or ternary .
3804	Check if the returns are consistent .
3805	Check if a node is returning or not .
3806	Visit a function for the given node .
3807	Check if graphviz is available .
3808	Create a project from a list of files .
3809	Write all the packages in the diagram to the printer .
3810	Write classes to the printer .
3811	Set the printer for a given file .
3812	Sets up the VCG printer .
3813	Returns True if this version may be emitted .
3814	Formats the help message .
3815	Return a python environment dictionary .
3816	Lint a python file .
3817	Run a python command .
3818	Get cycles from a graph dict .
3819	Returns the source of the message . If the source is None it will be returned .
3820	Generate the graph .
3821	Format a section .
3822	Registers a managed message by its id .
3823	Disable a managed message .
3824	Enable a managed message .
3825	Returns the message symbol for the given message id
3826	Check if a message is enabled .
3827	Add a message to the message store .
3828	Print the full documentation of Pylint .
3829	Print checker documentation .
3830	Return the indentation length of a line .
3831	Get the indent hint line from a list of bar positions .
3832	Indent a token at idx .
3833	Handle a line start .
3834	Returns a copy of idx and a copy of valid indentations .
3835	Indent after a bracket .
3836	Indent a continuation inside a bracket .
3837	Push a token into the stack .
3838	Add a new line to the queue .
3839	Check the keyword parentheses .
3840	Returns True if the token has a valid type annotation .
3841	Check if the given tokens have the same spacing .
3842	Check if a token is surrounded by a space .
3843	Visit a node and check if it is a statement .
3844	Check if a line contains multiple statements .
3845	Check a list of lines .
3846	Check the indentation level of a string .
3847	Check if the given node is in an iterating context .
3848	Check if a node is a conditional import .
3849	Visit a node and add a message if necessary .
3850	Visit a subscript node .
3851	Visit an attribute node and add a message if necessary .
3852	Visit an except handler node and check if it is used in the block .
3853	Visit a raise node .
3854	Find the path to the pylintrc file
3855	Validate a value against an optdict .
3856	Expand the default value of an option .
3857	Matches an optparse long option .
3858	Register an option provider .
3859	Set provider option .
3860	Set a global option .
3861	Generate a config file .
3862	Load the config file .
3863	Load the command line configuration .
3864	Add a help section .
3865	Returns a formatted help message .
3866	Load default values from options .
3867	Return the name of the option attribute .
3868	Returns the option definition for the given option .
3869	Yield options by section .
3870	Check if a function is a method call .
3871	Returns True if the given node is a complex format string .
3872	Visit a logging module .
3873	Visit an import from node .
3874	Add a module to the import list .
3875	Visit a call node and check if it is a logging class .
3876	Check if the given argument is a valid format string .
3877	Check if a node is in the loop .
3878	Get the parent of a break loop node .
3879	Returns True if the loop exits early .
3880	Get properties from a config file .
3881	Determine the function name type for the given node .
3882	Returns a dict of stats for each node type .
3883	Check if a node is redefined by a given decorator .
3884	Check if a call has only one argument .
3885	Visit a starred node .
3886	Check if a node is nonlocal and global .
3887	Visit a call node and check if it is abstract .
3888	Check if the node is usedless on the loop .
3889	Check if a node is in the loop .
3890	Open the linter .
3891	Visit a node and check if it is a valid expression .
3892	Visit a lambda node .
3893	Assert that the node is a tuple .
3894	Visit a dict .
3895	Check if the node is unreachable .
3896	Check if a node is not in the final body .
3897	Check if a node is reversed .
3898	Check if the given node is a valid assignment .
3899	Check if a name is valid .
3900	Check the docstring of a node .
3901	Check if a literal is a const or boolean .
3902	Parse a subgraph of a node .
3903	Parse a subgraph .
3904	Visit a module .
3905	Add a checker to the checker list .
3906	Walk an astroid .
3907	Add a relation between two objects .
3908	Get a relation from a given object .
3909	Returns a list of attributes associated with the given node .
3910	Returns a list of methods for the given node .
3911	Add an object to the diagram .
3912	Returns a list of class names for the given nodes .
3913	Returns a list of all classes in this node .
3914	Return the class with the given name .
3915	Returns a list of all modules in this node .
3916	Return the module with the given name .
3917	Return the module with the given name and node .
3918	Add a from dependency to a node .
3919	Delete this grant .
3920	Returns a query object for the current user .
3921	Get a user by username and password .
3922	Returns the first item in the query that matches the given access_token .
3923	Set a token .
3924	Set a grant .
3925	Get a client by code .
3926	Prepare a request .
3927	Initialize the application .
3928	Create a remote application .
3929	Make a request to the API .
3930	Authorize a request .
3931	Handle an OAuth1 response .
3932	Handle an oauth2 response .
3933	Handle an authorized response .
3934	Decorator for authorized_response .
3935	Returns a hashed version of the given token .
3936	Create a client with the given token .
3937	Create a new OAuth client .
3938	Check if the transport is insecure .
3939	Confirm an authorization request .
3940	Decorator to create a request token response .
3941	Get the secret of a client .
3942	Get the request token secret for a given request .
3943	Get the secret of an access token .
3944	Get default realms for a given client .
3945	Get the realms of the given token .
3946	Get the redirect uri of the given token .
3947	Get the rsa key for a given client .
3948	Validate a client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate timestamp and nonce .
3952	Validate a request s redirect uri .
3953	Validate a set of realms .
3954	Validate a request s verifier .
3955	Verify a request token .
3956	Verify a set of realms .
3957	Save an access token .
3958	Save a request token .
3959	Save a verifier .
3960	Returns the OAuth2 error URI .
3961	Confirm authorization request .
3962	Verify a request .
3963	Get client credentials from request .
3964	Check if client authentication is required .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the original scopes of a refresh token .
3968	Confirm scopes for a refresh token .
3969	Get the default redirect uri for a given client .
3970	Get the default scopes for a client .
3971	Invalidate an authorization code for a client .
3972	Save an authorization code for a client .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate a client id .
3976	Validate a grant for a given code .
3977	Validate a grant type .
3978	Validate a refresh token .
3979	Validate a response type .
3980	Validate the scopes .
3981	Validate a user s credentials .
3982	Revoke an access token .
3983	Update QQ API request data .
3984	Convert a dictionary to a string .
3985	Change weibo header .
3986	Register a remote application with OAuth .
3987	Create a remote application .
3988	Extract params from a request .
3989	Convert text to bytes .
3990	Decode base64 - encoded text .
3991	Create a response from headers body and status .
3992	Returns a list of cached clients .
3993	Add a remote application .
3994	Add a remote application .
3995	Check if there is an exception .
3996	Check the success of all the iterations .
3997	Check if the load_privatekey callback is called .
3998	Check if the load_privatekey callback is wrong .
3999	Check if the load_privatekey callback is wrong type .
4000	Returns a list of Revoked objects .
4001	Check if the X509 has been revoked .
4002	Create a new X509Request with the given key and digest .
4003	Create a new certificate .
4004	Decorator to mark a function as required .
4005	Load verification locations from a file .
4006	Sets the default password callback .
4007	Use a certificate chain file .
4008	Use a certificate file .
4009	Use an X509 certificate .
4010	Add an extra chain certificate to the context .
4011	Use a private key file .
4012	Use a private key .
4013	Load a client CA file .
4014	Sets the verification depth .
4015	Load a tmp DH file .
4016	Set the cipher list .
4017	Set the client CA list .
4018	Add a client CA .
4019	Sets the tlsext servername callback .
4020	Set the TLS - ext use - srtp setting .
4021	Sets the NPN select callback .
4022	Set a list of alphanumeric protos .
4023	Sets the SSL_CTX_set_alpn_select callback .
4024	Set the Ocsp callback .
4025	Set an OCSP server callback .
4026	Set an OCSP client callback .
4027	Sets the SSL context .
4028	Get the server name .
4029	Set the TLSext host name .
4030	Read a string from the socket and return it .
4031	Read nbytes from the socket into a buffer .
4032	Read a biosocket from the socket .
4033	Renegotiate the SSL connection .
4034	Shutdown the SSL connection .
4035	Get a list of ciphers .
4036	Get a list of client CAs .
4037	Set the shutdown state of the SSL connection .
4038	Get a random string from the server .
4039	Get a random client .
4040	Get the master key of the SSL session .
4041	Export keying material .
4042	Get a python session .
4043	Get the current cipher name .
4044	Get the bits of the current cipher .
4045	Get the current cipher version .
4046	Returns the SSL protocol version name .
4047	Get the next negotiated protocol .
4048	Set the alphanumeric protobufs .
4049	Get the negotiated alpn protocol .
4050	Create a new memory buffer .
4051	Convert a Bio object to a string .
4052	Set ASN1 time .
4053	Returns the ASN1 time for a given timestamp .
4054	Get an elliptic curve by name .
4055	Dump a public key .
4056	Load a public key from a buffer .
4057	Sign a PKE with a digest .
4058	Verify a signature against an EVP .
4059	Dump an X509 CRL into a string .
4060	Convert to a cryptography key .
4061	Generate a new RSA key .
4062	Check if the key is valid .
4063	Load elliptic curves from lib .
4064	Load elliptic curves from lib .
4065	Convert to an EC_KEY object .
4066	Return a string representation of the X509 object .
4067	Returns a list of the components of the X509 .
4068	Get the short name of the extension .
4069	Returns the ASN1_STRING data for this extension .
4070	Returns a CertificateSigningRequest object .
4071	Set public key .
4072	Get the public key .
4073	Get the subject name .
4074	Add extensions to the request .
4075	Returns a list of X509Extension objects .
4076	Verify that a PKey is valid .
4077	Return a hazmat certificate .
4078	Set the X509 version .
4079	Get public key .
4080	Set a public key .
4081	Sign a PKey with a digest .
4082	Returns the signature algorithm for this object .
4083	Get a digest by name .
4084	Set the serial number .
4085	Get the serial number of the X509 .
4086	Set the notAfter value of the GM time adj .
4087	Sets the gmtime adj notBefore value .
4088	Returns True if the account has expired or False otherwise .
4089	Get the name of the issuer .
4090	Set the X509 issuer .
4091	Returns the subject name .
4092	Set the subject name .
4093	Add an X509Extension to the list of extensions .
4094	Get the X509 extension for the given index .
4095	Add a certificate to the certificate store .
4096	Add a CRL to the store .
4097	Set the time of the X509 store .
4098	Initialize the X509 store .
4099	Get the X509 error from the context .
4100	Verify a certificate .
4101	Set the serial number .
4102	Get the serial number of the revoked device .
4103	Set the reason for this request .
4104	Get the reason for this revoke .
4105	Set the revoked date .
4106	Returns a hazmat . hazmat . x509 certificate revocation list
4107	Returns a list of X509 Revoked objects .
4108	Get the X509 issuer .
4109	Sign an X509 certificate .
4110	Export a certificate to a PEM file .
4111	Returns the type name of the object .
4112	Sets the CA certificates .
4113	Export the certificate to a file .
4114	Sign a key with a digest .
4115	Verify that the given key is valid .
4116	Encode this Spki as a b64 encoded string .
4117	Get the public key for this spki .
4118	Set the public key of the spki .
4119	Create an exception from an error queue .
4120	Convert a text object to a bytes object and a warning .
4121	Returns a helper function for printing tokens .
4122	Get the metadata for the service .
4123	Returns a generator yielding all issues .
4124	Get the annotations for a card .
4125	Get a list of boards .
4126	Get a list of lists for a board .
4127	Get a list of cards .
4128	Get comments for a card .
4129	Generate a URL for the github API .
4130	Get a link from a URL .
4131	Link a field to a dictionary .
4132	Get a list of issues matching the given query .
4133	Return a list of pull requests for a given tag .
4134	Aggregate remote issues .
4135	Returns the config value for the given key or default .
4136	Returns a dictionary of templates for this task .
4137	Validate a service config .
4138	Returns True if the issue should be included .
4139	Create a table from a grid .
4140	Evaluate an oracle command .
4141	Return the value of an option in a section as an integer .
4142	Pull a bugwarrior . lockfile .
4143	Get the data for a given URL .
4144	Get a collection of values from a URL .
4145	Find the local uuid for an issue .
4146	Merge remote_issue with local_task .
4147	Build uda config overrides from a list of targets .
4148	Parse a sprint string .
4149	Get the credentials for this user .
4150	Given a list of n - gram sequences and a list of scores ids compute the scores for each n - gram .
4151	Calculate p - values for a query .
4152	Compute the FDR for a given set of values .
4153	Calculate the z - score of data2d .
4154	Create a heatmap from a dataframe .
4155	Adjust the spines of an axis .
4156	Create a command line argument parser .
4157	Add a prerank parser to subparsers .
4158	Adds a plot parser to subparsers .
4159	Add an enrichr parser to subparsers .
4160	Compute the enrichment score of a gene .
4161	Compute the ranking metric tensor .
4162	Calculate the ranking metric .
4163	Compute gsea p - value .
4164	Compute the GSEA significance .
4165	Concatenate all marts .
4166	Get a list of datasets .
4167	Returns a DataFrame with the attributes of the given dataset .
4168	Returns a DataFrame with the filters for the given dataset .
4169	Query Biomart for a specific gene .
4170	Generate a GSEA plot .
4171	Singular - sample GSEA .
4172	Perform a prerank on a set of gene sets .
4173	Performs a replot of a graph .
4174	Set the number of cores .
4175	Load a gene set from a gmt parameter .
4176	Return a list of libraries for the given database .
4177	Download and generate Enrichr library gene sets .
4178	Return the heatmat of a dataframe .
4179	Save results from zipdata to outdir .
4180	Load gene expression data .
4181	Parse GSEA data files .
4182	Run GSEA .
4183	Runs gsea_compute on each sample in df .
4184	Runs the enrichment score tensor on each sample .
4185	Save results on samples to outdir .
4186	Run GSEA .
4187	Enrich a gene list with a list of gene sets .
4188	Parse gene sets .
4189	Parse the gene lists .
4190	Send a list of genes .
4191	Check if a gene is recognized by Enrichr .
4192	Returns a set of genes in the background .
4193	Run Enrichr .
4194	Create a cube from a script .
4195	Create an icosphere filter .
4196	Create a torus filter .
4197	Creates a grid of x and y - axis vertices from a script .
4198	Creates a cube of a given size with x y and z segments .
4199	Returns a list of color values .
4200	Check if a variable has num_terms terms .
4201	Make a list from a tuple or list .
4202	Write a filter script to a file .
4203	Loop over a subdivision surface .
4204	Merge close vertices .
4205	Closes a list of holes .
4206	Split Vertexes Incident on Non Manifold Faces
4207	Snap mismatched borders .
4208	Translate a script .
4209	Rotate a script along an axis .
4210	Scale a script .
4211	Convert a Python script to a CylCo function .
4212	Wrap a script to a cylinder .
4213	Bend a script to a specified radius and angle .
4214	Deform a script to a curve .
4215	Converts a vertex color to a texture .
4216	Transfers a mesh to a face .
4217	Uniform mesh resampling .
4218	Screened Poisson Surface Reconstruction .
4219	Create a voronoi color for a script .
4220	Return a list of all faces and vertices .
4221	Returns the vertex quality of a script .
4222	Write a face selection function to a script .
4223	Return a vert function for a given script .
4224	Convert a script to a cylindrical shape .
4225	Return the spherical vert of a script .
4226	Join a script into a single XML file .
4227	Rename the current mesh .
4228	Change the current mesh layer .
4229	Duplicate a script .
4230	Delete a lower layer of a script .
4231	Handle a TEMP3D error .
4232	Begin a TEMP3D filter script .
4233	Add a new layer to the stack .
4234	Remove a layer from the stack .
4235	Save the script to a file .
4236	Run a script on the Meshlab server .
4237	Create an annulus .
4238	Calculate the Hausdorff distance between two Mesh layers .
4239	Performs a Poisson - disk sampling .
4240	Sample a mesh element .
4241	Clustered Vertex Subsampling
4242	Create a flat plane .
4243	Per - triangle paramterization .
4244	Create a Voronoi Atlas from a script .
4245	Computes the topological measures of a script .
4246	Parse a topology file .
4247	Parse hausdorff distance .
4248	Create a Per Vertex Color Function XML .
4249	Create a Voronoi Vertex Mesh .
4250	Generate a cyclic rainbow .
4251	Returns a 2 - tuple of y and x .
4252	Returns the cross product of two vectors .
4253	Multiply a scalar with a vector .
4254	Create a new vert attribute .
4255	Flip a face .
4256	Returns a list of point sets .
4257	Perform taubin smoothing .
4258	Create a depth filter .
4259	Sort a file s polyline vertices .
4260	Measure a topology using TEMP3D .
4261	Measure geometry and topology using TEMP3D .
4262	Measure a dimension .
4263	Lowercase the extension of a filename .
4264	Patch a request class .
4265	Returns a dict containing the config for a set .
4266	Configure upload sets .
4267	Returns the configuration of the upload .
4268	Returns the url for the uploaded file .
4269	Returns the path to the given filename .
4270	Return True if the specified extension is allowed .
4271	Resolve a conflict .
4272	Get the version info from a vprof file .
4273	Remove duplicates from a list of objects
4274	Returns the number of objects in objs1 compared to objs2 .
4275	Returns a list of objects sorted by type and name .
4276	Trace the memory usage of a frame .
4277	Returns a list of code events .
4278	Returns the number of overhead events for this process .
4279	Compute memory overhead .
4280	Profile a package .
4281	Profile a module .
4282	Profile a function .
4283	Returns a dictionary containing the object name and the number of objects in memory .
4284	Return a set of module names for a given package path .
4285	Run a function in a separate process .
4286	Return the type of the run object .
4287	Initialize the run module .
4288	Initialize the run_object .
4289	Initialize the run object .
4290	Replace sys . argv with self . _run_args .
4291	Sample a frame .
4292	Insert a call tree into the stack .
4293	Fills the sample count of a node .
4294	Format a tree .
4295	Return the call tree .
4296	Return a dict containing the stats of the current run .
4297	Returns a dict containing information about the module .
4298	Profile a function .
4299	Transform the stats of a profiler into a list of records .
4300	Create a profile package .
4301	Returns the profile module .
4302	Profile a function .
4303	Initialize the database .
4304	Show a guestbook .
4305	Add an entry to the database .
4306	The profiler handler .
4307	Start an HTTP server .
4308	Handle the root html file .
4309	Handle the contents of the other file .
4310	Execute a GET request .
4311	Perform a POST request .
4312	Send a HTTP response .
4313	Check if module_path is a standard directory .
4314	Record a line .
4315	Return a generator yielding lines without stdlib .
4316	Fill the heatmap with the number of lines without stdlib .
4317	Skip lines from src_code .
4318	Create a profile package for the run object .
4319	Format a heatmap file .
4320	Returns a profile of the run module .
4321	Profile a function .
4322	Run the profilers specified in prof_config .
4323	Run a profiler .
4324	Predict probability .
4325	Predict the log probability of X .
4326	Fit the spmatrix .
4327	Count the vocabulary of a list of documents .
4328	Sort a vocabulary into a list of features .
4329	Returns a set of features that are within a given vocabulary .
4330	Fits and transforms the RDD .
4331	Transform a dictionary into a spmatrix .
4332	Convert this Scaler to a Scikit Scaler .
4333	Fit a Spark model .
4334	Predict X using Spark .
4335	Fit a SparkLinearRegression to Z .
4336	Perform a pre - transformation .
4337	Fits and transforms Z using the given fit parameters .
4338	Returns the score of Z .
4339	Fit the model to the given parameter_iterable .
4340	Returns the score of the given estimator .
4341	Fit the Spark KMeans model .
4342	Predict X using the SparkKMeans model .
4343	Predict the SGD classifier for X .
4344	Check the dtype of an RDD .
4345	Fits the model to a given RDD .
4346	Compute the mean and var for a given dataset .
4347	Fits and transforms the SVD .
4348	Transform a SparkTruncatedSVD into a SparkTruncatedSVD
4349	Generates a collection of blocks from an iterator .
4350	Block a tuple of dtypes .
4351	Convert an RDD to a block RDD .
4352	Transform an RDD using a function .
4353	Returns the shape of the RDD .
4354	Convert to a numpy array .
4355	Transform a list of columns into a list of indices .
4356	Return the bitperm for a given position .
4357	Check if path is only a root write .
4358	Check if the given configuration file is correct .
4359	Load configuration from file .
4360	Run a command as a shell command .
4361	Execute a command in a subprocess .
4362	Execute a command over SSH .
4363	Validate the configuration file .
4364	Return a copy of the default headers .
4365	Returns the body of the request .
4366	Get the url for this HomeAssistant .
4367	Get the url for this Webhook .
4368	Convert a pkt string to a string .
4369	Print a discovery message .
4370	Scan for devices that are not in mac_id_list
4371	Execute the device .
4372	Send a confirmation message to the device .
4373	Called when the device is pushed .
4374	Execute the command on the specified device .
4375	Run the on_push command .
4376	Convert a transaction to a Transaction object .
4377	Find the path to the ledgerrc file .
4378	Compatibility check .
4379	Returns a long description of the pybadges
4380	Load a PrecalculatedTextMeasurer from a JSON file .
4381	Create a PrecalculatedTextMeasurer from a JSON file .
4382	Create a JINJA2 badge .
4383	Generate all supported characters in deja_vu_sans_path
4384	Generate encodeable characters from a list of characters and encodings .
4385	Calculate a mapping from character width to length .
4386	Writes a TextIO object to a JSON file .
4387	Convolve a 2D Gaussian kernel .
4388	Returns a gaussian kernel .
4389	Convert an image to a grayscale image .
4390	Computes the complex wavelet SSIM using the metric .
4391	Calculate the SSIM value of a target image .
4392	Compute the SSIM between two images .
4393	Destroy the config .
4394	Sets the code version .
4395	Get the status of the raft .
4396	Prints out the current status .
4397	Convert a connection to a node .
4398	Bind this node if it s ready .
4399	Called when a new connection is received .
4400	Called when an incoming message is received .
4401	Called when a command fails .
4402	Check if the given node should be connected .
4403	Connect to node if necessary .
4404	Called when an incoming message is received .
4405	Called when an incoming message is received .
4406	Called when a connection is disconnected .
4407	Add a node to the network .
4408	Drop a node from the network .
4409	Send a message to a node .
4410	Destroy the connection to the server .
4411	Add an item to the list .
4412	Put an item into the heap .
4413	Get a value from the heap .
4414	Try to acquire a lock .
4415	Returns True if the lock is acquired .
4416	Release a lock .
4417	Decorator for checking a function .
4418	Check if a request requires a token .
4419	Set a list of hosts .
4420	Create Elasticsearch indexes .
4421	Migrate aggregate and forensic indexes .
4422	Remove the metadata from a report .
4423	Save aggregate reports to Kafka .
4424	Extract XML from a file .
4425	Parse an aggregate report file .
4426	Convert a list of forensic reports to a CSV file .
4427	Parse an aggregate report file .
4428	Returns a list of IMAP server capabilities .
4429	Save aggregate and forensic reports to output_directory .
4430	Get a zip file of the results .
4431	Send a DMARC report to the specified host .
4432	Save aggregate reports to Splunk .
4433	Save forensic reports to Splunk .
4434	Decode a base64 encoded string .
4435	Download public suffix list from public suffix . org
4436	Get the reverse DNS for a given IP address .
4437	Convert a human readable timestamp to a datetime object .
4438	Download a GeoIP database for a given IP address .
4439	Get information about an IP address .
4440	Convert an Outlook message .
4441	Convert a string to a list .
4442	Parse a report file .
4443	Drain a subsegment .
4444	Publishes the given payload to the given subject .
4445	Publish a request to the server .
4446	Publish a message .
4447	Subscribe to a subject asynchronously
4448	Unsubscribe from a subscription .
4449	Send a ping and wait for it to finish .
4450	Select the next server in the pool .
4451	Process a NatsError message .
4452	Process an operation error .
4453	Connect to the server .
4454	Process the pings received from the server .
4455	Process a message .
4456	Processes information from the server pool .
4457	Process connection initialization .
4458	Flushes data from the queue .
4459	Read a loop of data from the stream .
4460	Perform coactivation analysis on a dataset .
4461	Decode a set of images .
4462	Load features from an array .
4463	Load features from a list of images .
4464	Returns the Pearson correlation between two images .
4465	Return the dot product of the image .
4466	Select a feature from a list of features .
4467	Return a list of studies grouped by regions .
4468	Get the feature order of a dataset .
4469	Classify a dataset by regions .
4470	Classify data using a classifier .
4471	Fit the model to X and y
4472	Set the weight of the classifier .
4473	Fit cross validation .
4474	Fit the classifier to a dataset .
4475	Compute the average of a dataset within a set of regions .
4476	Get a random number of voxels from a dataset .
4477	Returns a list of top words for each topic in the model .
4478	Calculate the Pearson correlation coefficient between two data points .
4479	Compute the FDR of a point p .
4480	Load activation data from a CSV file .
4481	Create an image table .
4482	Returns a list of studies .
4483	Add a list of features to the feature table .
4484	Returns a list of feature names .
4485	Returns a dict of feature names and counts .
4486	Load dataset from a pickle file .
4487	Save the feature table to a file .
4488	Get the image data for a subset of studies or voxels
4489	Get feature data .
4490	Returns a list of names ordered by features .
4491	Get the ids of a list of features .
4492	Returns a list of features matching the given search .
4493	Returns a list of ids matching the given expression .
4494	Convert sdf to csr .
4495	Deprecated function decorator .
4496	Transform a set of foci into a matrix .
4497	Convert xyz coordinates to mat coordinates .
4498	Apply a transformation to the given foci .
4499	Masks an image .
4500	Get the mask of the image .
4501	Load images from a list of filenames .
4502	Save an image to a file .
4503	Set logging level .
4504	Expand an address .
4505	Normalize a string into a list of tokens .
4506	Parse an address .
4507	Returns a list of hashes for a list of labels and values .
4508	Convert a dictionary to an object .
4509	Get the price of a ticker .
4510	Get a DataFrame from the API .
4511	Get bulk news from Tiingo .
4512	Make a request to the server .
4513	Get bearer information .
4514	Make a request to the API .
4515	Get a list of tracks from a spotify album
4516	Get information about an artist .
4517	Get a list of artist albums .
4518	Get artist s top tracks .
4519	Get a list of artists related to a spotify .
4520	Get a list of artists .
4521	Get information about a specific category .
4522	Get playlists for a given category .
4523	Get a list of categories .
4524	Get a list of featured playlists .
4525	Get a list of new releases .
4526	Returns a list of recommendations for seed artists .
4527	Get a list of artists or users that are following this artist .
4528	Returns a list of all albums associated with this artist .
4529	Return a list of all albums for this artist .
4530	Get the total number of albums for this artist .
4531	Returns a list of artists related to this artist .
4532	Returns the currently playing track .
4533	Get the current player .
4534	Return a list of available devices .
4535	List recently played tracks .
4536	Replace tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a new playlist .
4539	Get a list of playlists .
4540	Returns a list of tracks for this album .
4541	Get a list of all tracks for an album .
4542	Get an OAuth2 url .
4543	Get a single album .
4544	Get an artist by ID .
4545	Get a track by id .
4546	Get a user by id .
4547	Get a list of albums by their ids
4548	Returns a list of artists with the given ids
4549	Search for a song .
4550	Convert a string to an ID .
4551	Raise a SpotifyException if attr is not present .
4552	Create an instance from a client .
4553	Generate a URL for a client .
4554	Returns a dict containing the attributes of this request .
4555	Returns a string containing the parameters of this object .
4556	Build a list of playlist tracks .
4557	Get all tracks in the playlist .
4558	Resume playback on the specified device .
4559	Transfer a player from one device to another .
4560	Retrieve a Spotify object from its href attribute .
4561	Returns a PyFunceble object .
4562	Convert or shorten a month .
4563	Update code urls .
4564	Check if the current version is greater than the current version .
4565	Check if git branch is a dev version .
4566	Returns True if the current version does not require deprecation .
4567	Backup the current configuration .
4568	Restore the backup content .
4569	Check if a line is to ignore .
4570	Handle a list of options .
4571	Extracts the base from the given element .
4572	Formats a decoded string .
4573	Returns the status code of the request .
4574	Get a list of valid HTTP codes .
4575	Check if a domain is valid .
4576	Check if a domain is a subdomain .
4577	Check if an IPv4 address is valid .
4578	Check if ip is a valid IPv4 range .
4579	Check if url is a valid URL .
4580	Load the config from the current directory .
4581	Print a random message to the user .
4582	Download entry management URL .
4583	Set the url for the entry management .
4584	Print the header .
4585	Make a decision about a file .
4586	Sets the domain to test .
4587	Prints the url to the terminal .
4588	Colorize the logo .
4589	Returns a string representation of the extracted domain .
4590	Extract a domain from a file .
4591	Returns a list of files to test .
4592	Returns the URL of a file .
4593	Switch the state of a variable .
4594	Returns a PyFunceble instance based on to_test and to_official .
4595	Generates a status file for the given URL .
4596	Get the structure .
4597	Create a directory .
4598	Deletes the uneeded element from the structure .
4599	Convert a path to a list of configs .
4600	Load the configuration from a YAML file .
4601	Install the production config .
4602	Install the iana config .
4603	Install the psl config .
4604	Install a directory structure file .
4605	Merge values from upstream config .
4606	Load a configuration file .
4607	Split a version into digits and non - digits .
4608	Check if the local and upstream versions match .
4609	Check if a file is cloned .
4610	Handle non - existent indexes .
4611	Returns the directory where the analysis is stored .
4612	Prints the results of the unified test .
4613	Generates a status file for the domain .
4614	Check if a file should not be produced .
4615	Return a list of public suffixes for the given line .
4616	Load the database from a JSON file .
4617	Convert an element to a standard regex .
4618	Return a hierarchical version of the given element .
4619	Load the iana_db .
4620	Return the referer for the given extension .
4621	Returns a generator yielding all available domain extensions .
4622	Update the iana - domains - database .
4623	Returns a list of all elements that have been mined .
4624	Returns a dictionary containing the mined data .
4625	Back up the file if necessary .
4626	Add elements to to_add .
4627	Remove the to_get_bare element .
4628	Returns a list of all mined files .
4629	Processes a PyFunceble object .
4630	Get the contents of a file .
4631	Write content to a JSON file .
4632	Get whois information for a record .
4633	Returns the expiration date of the extracted file .
4634	Check if a referer is not found .
4635	Create a link to the generated file if it doesn t exist .
4636	Construct a header from a list of data .
4637	Returns the HTTP header .
4638	Construct a PyFunceble . OrderedDict from the given size .
4639	Returns the number of bytes in a header .
4640	Colorize the data .
4641	Print the output as JSON .
4642	Returns a dict containing the data to be printed .
4643	Save the file to disk .
4644	Calculate the time difference between start and end .
4645	Return a string representation of the time between start and end .
4646	Returns a list of files to delete .
4647	Return list of databases to delete .
4648	Delete almost everything in the directory .
4649	Returns the hash of a file .
4650	Returns a hash of the data .
4651	Returns a dictionary containing all the valid algorithms .
4652	Execute the command .
4653	Remove a key from the main dictionary .
4654	Rename a key in the main dictionary .
4655	Merge two dictionaries into a single dictionary .
4656	Dump the dictionary to a JSON file .
4657	Dump the dictionary to a YAML file .
4658	Fixes the path of the file .
4659	Write data_to_write to file .
4660	Read the functions from a file .
4661	Returns a list of strings sorted by key .
4662	Merge all elements in to_merge .
4663	Returns a list of strings that are not matching the regex .
4664	Returns True if the regex matches .
4665	Replaces the regex with the data .
4666	Count the number of tests .
4667	Calculate the percentages .
4668	Returns a dict containing the logs .
4669	Check if a URL is valid .
4670	Checks if a domain is valid .
4671	Check if this element is a subdomain of this element .
4672	Return a SyntaxStatus .
4673	Reformat historical_formating_error into a dictionary .
4674	Retrive the inactive database .
4675	Backup the inactive database .
4676	Returns the timestamp of the inactive database .
4677	Returns the contents of the inactive database .
4678	Check if the database is present .
4679	Retrieve the WHOIS database .
4680	Backup the whois database .
4681	Check if the file is in the database .
4682	Returns True if the time is older than the current time .
4683	Get the expiration date for this authorization .
4684	Add the epoch to the database .
4685	Get permissions for travis .
4686	Execute the travis command .
4687	Lookup a host by its IP address .
4688	Connect to a whois server .
4689	Returns a PyFunceble instance .
4690	Returns the referer for this domain .
4691	Return the current object .
4692	Returns a generator yielding all python libraries in the standard directory .
4693	Return a generator of standard package names .
4694	Yield unused import line numbers .
4695	Yields the module name of an unused import message .
4696	Yield all imported line numbers .
4697	Yields ImportStarUsage messages with undefined name .
4698	Yield unused variable line numbers .
4699	Duplicate key line numbers from a message source .
4700	Create a dictionary from a list of messages .
4701	Check if a source file is valid .
4702	Extract package name from a line .
4703	Import a multiline statement .
4704	Returns True if the given line is a multiline statement .
4705	Filter a string based on imports .
4706	Split a line into a list of imports .
4707	Filter the source code .
4708	Get a list of messages by line .
4709	Filter a string containing a star import .
4710	Filter a line for duplicate keys .
4711	Check if a dict entry has a key .
4712	Check if value is a literal or a name .
4713	Yield useless line numbers from a pass line .
4714	Filter useless pass lines .
4715	Return the indentation of a line .
4716	Return the end of a line .
4717	Remove unused variables from the source code .
4718	Split string with comma separated characters .
4719	Check if filename is a python file .
4720	Check if a file is an exclude file .
4721	Given a list of filenames return a list of filenames that match recursively .
4722	Main entry point for argparse .
4723	Read ObtainLeaseResponsePayload from a stream .
4724	Writes the ObtainLeaseResponsePayload to the output stream .
4725	Writes the CancelRequestPayload to the specified output stream .
4726	Read a CancelResponsePayload from a stream .
4727	Create a new NameValue .
4728	Read a digest from an istream .
4729	Write the digest to the given ostream .
4730	Create a new Digest .
4731	Read an application specific information from a stream .
4732	Write the ApplicationSpecificInformation to ostream .
4733	Create an ApplicationSpecificInformation
4734	Read the DerivationParameters from a stream .
4735	Write a bytearray stream to the output stream .
4736	Read a request payload from a stream .
4737	Write a bytearray stream to the specified output_stream .
4738	Read a response payload from a stream .
4739	Write the payload to a stream .
4740	Read a SignatureVerifyRequestPayload .
4741	Write a bytearray to a stream .
4742	Read a signature verification response payload .
4743	Process a request .
4744	Build an error response .
4745	Processes a template attribute .
4746	Get attributes from a managed object .
4747	Get an attribute from a managed object .
4748	Set attributes on a managed object .
4749	Set an attribute on a managed object .
4750	Returns True if the specified operation is allowed on the specified object .
4751	Write the payload to the output stream .
4752	Create a new ObjectType .
4753	Sets a configuration setting .
4754	Load the server configuration from a file .
4755	Process a bind parameter .
4756	Process a result value .
4757	Read a long integer from a stream .
4758	Write this LongInteger to ostream .
4759	Validate that the value is valid .
4760	Read a big integer from a stream .
4761	Write a KMIP object to ostream .
4762	Validate that the value is an integer .
4763	Validate that the enumeration value is valid .
4764	Read a boolean value from a buffer .
4765	Write boolean value to buffer .
4766	Write an object to the stream .
4767	Validate that the value is a boolean .
4768	Read an Interval from the given istream .
4769	Validate that the value is valid .
4770	Creates the key_wrapping_data dictionary .
4771	Set the key wrapping data .
4772	Validate that the key is valid .
4773	Validate that the secret value is valid .
4774	Validate that the data type is valid .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to a name .
4777	Get the bit mask from a list of enumerations .
4778	Returns a list of enumerations with the given bitmask .
4779	Check if an enumeration is a bit mask .
4780	Read a CreateKeyPairRequestPayload from a file .
4781	Writes the common template attributes to a buffer .
4782	Read a CreateKeyPairResponsePayload from a buffer .
4783	Write the CreateKeyPair response payload to a bytearray stream .
4784	Read an attribute list from a file .
4785	Writes this GetAttributeListRequestPayload to a local buffer .
4786	Reads an attribute list from a file .
4787	Writes the GetAttributeList response payload to a buffer .
4788	Return a list of all . json files in a directory .
4789	Scan for policies in the policy directory .
4790	Run the operation policy file monitor .
4791	Get an X509 certificate from a connection .
4792	Gets the extended key usage from a certificate .
4793	Returns a list of common names in a certificate .
4794	Get the client identity from a certificate .
4795	Read the Create request payload .
4796	Writes the Create request payload to the given buffer .
4797	Read the Create response payload .
4798	Writes the Create response payload to the output buffer .
4799	Convert a SymmetricKey or PrivateKey to a SymmetricKey .
4800	Read an EncryptResponsePayload .
4801	Read a DeriveKey request payload .
4802	Write the DeriveKey request payload .
4803	Checks if the given attribute is supported .
4804	Checks if an attribute is deprecated .
4805	Checks if the given attribute is applicable to the given object type .
4806	Returns True if the given attribute is multivalued .
4807	Get a valid value from a configuration file .
4808	Read a CheckResponsePayload from a stream .
4809	Write a bytearray stream to the output stream .
4810	Read a KMIP attribute from a buffer .
4811	Writes the AttributeReference object to the output buffer .
4812	Read the Attributes object from the input stream .
4813	Writes the Attributes object to the output stream .
4814	Read a Nonce from a stream .
4815	Write the nonce to the output stream .
4816	Read a UsernamePasswordCredential from a stream .
4817	Write this UsernamePasswordCredential to a Bytearray stream .
4818	Read a DeviceCredential from a stream .
4819	Write a bytearray stream to the device .
4820	Read a Credential from a stream .
4821	Writes the credential to a bytearray stream .
4822	Read MACSignatureKeyInformation from a stream .
4823	Writes the MACSignatureKeyInformation to a stream .
4824	Read a KeyWrappingData object from a stream .
4825	Write a Bytearray to a stream .
4826	Read a KeyWrappingSpecification from a stream .
4827	Write this struct to a Bytearray .
4828	Read ExtensionInformation from a stream .
4829	Write this ExtensionInformation to ostream .
4830	Create a new ExtensionInformation
4831	Read a RevocationReason object from a stream .
4832	Write this RevocationReason to a BytearrayStream .
4833	Validate the revocation_code and revocation_reason code .
4834	Read the ObjectDefaults object from a buffer .
4835	Writes the ObjectDefaults structure to the output buffer .
4836	Read a DefaultsInformation from a file .
4837	Write the DefaultsInformation structure to a bytearray stream .
4838	Read the RNGParameters object .
4839	Write the RNGParameters structure to the output buffer .
4840	Read a ProfileInformation from a file .
4841	Writes the ProfileInformation structure to the output buffer .
4842	Writes the ValidationInformation structure to the output buffer .
4843	Reads the CapabilityInformation object from a buffer .
4844	Writes the CapabilityInformation object to the output buffer .
4845	Stop the connection threads .
4846	Start the connection service .
4847	Read a LocateRequestPayload from a file .
4848	Write a bytearray stream to the output buffer .
4849	Read a LocateResponsePayload from a file .
4850	Writes this LocateResponsePayload to a local buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a hash - based message authentication code .
4854	Encrypt plain text using the specified encryption algorithm .
4855	Encrypt plain text using a symmetric encryption algorithm .
4856	Encrypt plain text using an asymmetric encryption algorithm .
4857	Decrypt a string using an asymmetric decryption algorithm .
4858	Create an RSA key pair .
4859	Derives a key from a derivation method .
4860	Create an RSA private key .
4861	Verify the signature of a message .
4862	Read a SignResponsePayload from a stream .
4863	Writes the signature data to the output stream .
4864	Read a GETUsageAllocationRequestPayload .
4865	Convert a protocol version to a KMIP version .
4866	Read a protocol version from a stream .
4867	Writes the protocol version to the output stream .
4868	Read an Authentication object from a stream .
4869	Writes the Authentication struct to the output stream .
4870	Read a poll request payload .
4871	Read a certificate from a stream .
4872	Writes the certificate to the given ostream .
4873	Authenticate using the SLUGS URL .
4874	Read an ArchiveResponsePayload .
4875	Writes the ArchiveResponsePayload to the output stream .
4876	Start a TLS session .
4877	Read the RekeyResponsePayload from a stream .
4878	Returns True if the profile is supported by the specified conformance clause and authentication suite .
4879	Derives a key from an object .
4880	Get a list of attributes for a batch .
4881	Get a list of attributes for a batch item .
4882	Query the database .
4883	Sign a batch of data .
4884	Open the client connection .
4885	Close the client connection .
4886	Create a new CryptographicAlgorithm .
4887	Create a new key pair .
4888	Register a Pie managed object .
4889	Rekey a key .
4890	Derives a key from a set of unique identifiers .
4891	Locate an object group member .
4892	Check if uid usage_limits_count and lease_time are valid .
4893	Get a managed object by uid .
4894	Returns a list of attributes for the given uid and attribute_names
4895	Activate a Kmip .
4896	Revoke a license .
4897	Executes a MAC on the given data .
4898	Builds the CryptographicParameters object .
4899	Builds the EncryptionKeyInformation object .
4900	Build the MAC signature key information .
4901	Builds a KeyWrappingSpecification object .
4902	Builds a list of common attributes .
4903	Builds a name attribute .
4904	Read a QueryRequestPayload from a buffer .
4905	Writes the QueryRequestPayload to the given buffer .
4906	Writes a kubernetes object to a buffer .
4907	Reads a KmipResponsePayload
4908	Writes the GetAttributes response to the given buffer .
4909	Get a single entry point for a given group .
4910	Returns a dictionary containing the names of all members of a group .
4911	Return a list of entry points for a given group .
4912	Load the object .
4913	Create an entry point from a string .
4914	Handle live reload .
4915	Generate a project directory .
4916	Generate a controller .
4917	Generate an action .
4918	Generate a form .
4919	Generate a model from a template file .
4920	Generate a macro .
4921	Make a directory if it does not exist .
4922	Rewrite src_file and copy it to dst_file .
4923	Convert a datetime . datetime . datetime object to a datetime . timesince object .
4924	Check if the url is correct .
4925	Encode something into a URL safe string .
4926	Decode something .
4927	Decorator to convert a function to json .
4928	Returns the absolute URL for the given endpoint .
4929	Load configuration from environment variables .
4930	Sign in a user .
4931	Return the current user .
4932	Create Flask application .
4933	Register a jinja2 loader .
4934	Register routes with Flask .
4935	Register an error handler .
4936	Register hooks for the app .
4937	Convert a dataframe to a CSV file .
4938	Read a dataframe from a CSV file .
4939	Serialize a dataframe .
4940	Deserialize a dataframe .
4941	Update this object from a dataframe .
4942	Update this object from raw data .
4943	Returns the url for the contents of the file .
4944	Add data from a dataframe .
4945	Add a data type from raw data .
4946	Returns the contents of the intermediate dataset .
4947	Read the dataset as a binary .
4948	Read the dataset content as text .
4949	Serializes this object to a dataframe .
4950	Get an IntermediateDataset object for the given node and port .
4951	Get all experiments associated with a workspace .
4952	Get datasets for a workspace .
4953	Get a dataset .
4954	Publish a workspace .
4955	Create a service .
4956	Decorator to add annotations to a function .
4957	Decorator to set the return type of a function .
4958	Add an attachment to a function .
4959	Find all globals in the given code .
4960	Returns a copy of this pen .
4961	Lookup a brewer color .
4962	Draw the curve .
4963	Calculate the Cubic Bernstein Extrema .
4964	Calculate the Cubic Bernstein distance between two points .
4965	Build a list of choices from a site tree .
4966	Get a list of options from a list of command options .
4967	Register a function with the items hook .
4968	Compose a dynamic tree .
4969	Initialize the cache .
4970	Delete all sitetrees .
4971	Get an entry by name and key .
4972	Update the value of an entry .
4973	Set the value of an entry .
4974	Initializes the API .
4975	Resolve an I18N tree alias .
4976	Checks if the current application is an admin .
4977	Calculate the depth of an item .
4978	Get the current item of a tree .
4979	Get the url for a sitetree item .
4980	Initialize a SiteTree .
4981	Get the current page attribute for the given alias .
4982	Get the ancestor level of the current item .
4983	Create a menu for a tree .
4984	Check if the user has access to the given item .
4985	Climb the breadcrumb tree .
4986	Returns a tree with the given alias .
4987	Get the children of the given parent item .
4988	Get a tree s children .
4989	Update if a tree item has any children .
4990	Filter a list of items .
4991	Get an ancestor item from a tree .
4992	Create a tree climber for the given tree alias .
4993	Resolve a variable .
4994	Return a sitetree tree node .
4995	Return a list of the children of a sitetree .
4996	Return a breadcrumb node from a sitetree tag .
4997	Return a sitetree menu node .
4998	Render a site tree .
4999	Returns a template for the given tag .
5000	Get the URL name of a model .
5001	Reregister tree admin .
5002	Handle redirects .
5003	Redirects the user to the given response .
5004	Add an item to the tree .
5005	Handle a response change request .
5006	Creates a form for the given obj .
5007	Get a model tree .
5008	Move an item in a tree .
5009	Save a model .
5010	Return a list of urls for the tree admin .
5011	Returns a smuggler . views . View object .
5012	Create a tree model .
5013	Create a tree item .
5014	Import the sitetree module for the given app .
5015	Get a model class from a settings entry .
5016	Create a config object from a mapping .
5017	Initialize a Configuration object from a python file .
5018	Load a configuration from a toml file .
5019	Create a Config object from an object .
5020	Create ZipkinAttrs for a span .
5021	Create HTTP headers for a new span .
5022	Returns the current context .
5023	Start the transport .
5024	Stop the transport .
5025	Update binary annotations .
5026	Add a binary annotation to the logging context .
5027	Override logging_context . span_name
5028	Create an endpoint .
5029	Copies an endpoint with a new service name .
5030	Build a V1Span object for this trace .
5031	Encode a list of spans into a string .
5032	Create a protobuf span .
5033	Convert a hex id to bytes .
5034	Return the protobuf of the given kind .
5035	Convert endpoint from zipkin_pb2 . Endpoint to zipkin_pb2 . Endpoint .
5036	Convert a list of annotations into a list of Annotations .
5037	Create a zipkin annotation .
5038	Create a binary annotation .
5039	Create a zipkin endpoint .
5040	Copies an endpoint with a new service name .
5041	Build a list of annotations .
5042	Build a list of binary annotations .
5043	Create a new span .
5044	Convert a thrift span to bytes .
5045	Encode a list of thrift objects into bytes .
5046	Detect the span version and encoding of a message .
5047	Convert a list of spans to output_encoding .
5048	Deprecated . See DEPRECATIONS . rst
5049	Encode a v2 span .
5050	Create a json endpoint .
5051	Encode a given span .
5052	Decode a list of spans into a list of spans .
5053	Converts a thrift endpoint into an Endpoint object .
5054	Decodes a list of thrift annotations .
5055	Convert from thrift_binary_annotations .
5056	Decode a thrift span .
5057	Convert a trace id to a string .
5058	Convert an unsigned long string to a lower hex string .
5059	Write a value in hexadecimal format .
5060	Preprocessor for datefixup .
5061	Set the transaction code for a transaction .
5062	Set the iph_id of a transaction .
5063	Set the tnr of a transaction .
5064	Parse tag data .
5065	Parse a file - like object .
5066	Join two or more lines together .
5067	Return the response as json or text .
5068	Retry until we have exhausted a ratelimit quota
5069	Make a request to the API .
5070	Get information about a bot .
5071	Get a list of bots .
5072	Read a term from the stream .
5073	Write a message to the stream .
5074	Close the filesystem .
5075	Decode a string .
5076	Encode a term into a string .
5077	Add a source address .
5078	Send pending messages to the queue .
5079	Sets the remote service hello callback .
5080	cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given the TYPES and SCOPES in a given TIMEOUT
5083	construct a raw SOAP XML string given a prepared SoapEnvelope object
5084	Discover systems using WS - Discovery
5085	Returns the tagged item manager .
5086	Returns a list of all child relationships in a model .
5087	Returns a list of all child m2m relationships .
5088	Saves the M2M model to the database .
5089	Create a model object from serializable data .
5090	Validate that all forms are unique .
5091	Return True if the data has changed .
5092	Returns an Address with a valid checksum .
5093	Generates the address checksum .
5094	Parse a command line argument .
5095	Create an argument parser for this node .
5096	Prompt the user for a seed .
5097	Validate signature fragments .
5098	Get a key by index .
5099	Get the key for the given address .
5100	Create an iterator .
5101	Create a Kerl sponge for the given index .
5102	Absorb a sequence of trits .
5103	Squeeze a list of trits .
5104	Transform the state to a new state .
5105	Returns a list of digests for this address .
5106	Returns a list of private keys .
5107	Prepare a multisig transfer command .
5108	Add a list of tuples to the left and right .
5109	Convert an integer to a list of trits .
5110	Add trits to left and right .
5111	Returns a list of tuples containing the tuples of left and right and any tuples containing the tuples of left and right .
5112	Print a seed to the screen .
5113	Returns a list of transactions .
5114	Executes the GetInputs command on the adapter .
5115	Gets a list of new addresses .
5116	Returns a GetTransfersCommand for the given start and stop states .
5117	Promote a transaction .
5118	Returns a ReplayBundle command .
5119	Sends a transfer .
5120	Sends a list of trytes to the adapter .
5121	Resolve an adapter from a URI .
5122	Send a request to the server .
5123	Log a message to the logger .
5124	Send an HTTP request .
5125	Interpret a response from a node .
5126	Seed a response to a command .
5127	Add a digest to the pool .
5128	Get a multisig address .
5129	Create an iterator .
5130	Construct an Address object from a digest .
5131	Generate an address from a key iterator .
5132	Returns a list of Transaction objects .
5133	Returns an iterator over all addresses that are used in a transaction .
5134	Get bundles from transaction hashes .
5135	Check if the given codec is valid .
5136	Returns a CodecInfo object .
5137	Encode a byte string into a binary string .
5138	Decode a byte string .
5139	Returns a list of addresses .
5140	Add a route .
5141	Construct a TransactionHash from a list of trytes .
5142	Return the transaction as a JSON - compatible object .
5143	Returns a list of tries to validate the signature .
5144	Sets the is_confirmed and is_confirmed values .
5145	Returns a list of messages for this transaction .
5146	Return a list of transactions as tryte strings .
5147	Returns a list of all transactions in the group .
5148	Discover all commands in a package .
5149	Execute a request .
5150	Apply a filter to a value .
5151	Get a job s url .
5152	Returns a list of errors .
5153	Returns True if the validation is valid .
5154	Creates a validator for all transactions in the bundle .
5155	Returns a list of signature errors for a bundle .
5156	Returns an error message if the signature of a group is invalid .
5157	Traverse a bundle transaction .
5158	Start ipython repl .
5159	Generate a random seed .
5160	Returns a digest of the fragments .
5161	Signs the input transactions for the given bundle .
5162	Return a pretty representation of the object .
5163	Absorb a set of trits .
5164	Squeeze a list of trits .
5165	Return an object with the given context .
5166	Returns the security level of the address .
5167	Increment the legacy tag .
5168	Returns the tag of the message .
5169	Add a transaction to the bundle .
5170	Finalizes the bundle .
5171	Signs the inputs .
5172	Signs an input transaction at a given index .
5173	Create input transactions for a given addy .
5174	Converts an IOTA value to a standard unit .
5175	Decompress G1 .
5176	prime_field_inv - prime_field_inv - prime_field_inv
5177	Load an object from a JSON file .
5178	Find the word groups in the given text .
5179	Find a synonym for a word .
5180	Expand abbreviations in the lexicon .
5181	Split a description .
5182	Returns a list of all categories .
5183	Generate a random colour .
5184	Plot a figure on the specified axis .
5185	Return a built - in version of a name .
5186	Build a Timescale object from a CSV file .
5187	Generate a random list of decors .
5188	Create a Decorator object from an image file .
5189	Create a Legend object from a CSV file .
5190	Return a csv representation of the table .
5191	Returns the maximum width of the list .
5192	Returns a Component or Component instance for the given Component .
5193	Get the value of an attribute .
5194	Returns the component of the given colour .
5195	Plot all the objects in the list .
5196	Create a lexicon object from a text .
5197	Generate a summary of the dict .
5198	Deprecated version of Rock .
5199	Process a row of text into a dictionary of columns .
5200	Parse canstrat text .
5201	Returns true if a and b are in a strict order .
5202	Return a sorted list of unique values .
5203	Create a list of intervals from a list of tops .
5204	Clean longitudinal data .
5205	Read a list of intervals from a petrel file .
5206	Build a list of intervals from a dictionary .
5207	Create a Striplog object from a CSV file .
5208	Create a DataFrame from an image file .
5209	Create a Striplog object from a log file .
5210	Construct a LAS3 description from a string .
5211	Create an IntervalList object from a canstrat file .
5212	Return a copy of this striplog .
5213	Writes the list to a CSV file .
5214	Serializes this section to a LaS3 file .
5215	Plot the axis .
5216	Get the data for a given field .
5217	Extract a logarithmic interval from the data .
5218	Return a list of dictionaries that match the given search term .
5219	Returns a list of all overlaps .
5220	Find incongruities .
5221	Prune a striplog .
5222	Return the annealing of the strip .
5223	Returns a deep copy of self with gaps filled .
5224	Returns the union of this striplog with another striplog .
5225	You can only intersect striplogs with each other .
5226	Merge all overlaps .
5227	Plot the histogram .
5228	Invert the striplog .
5229	Crop the list to the specified extent .
5230	Returns the quality of a list of tests .
5231	Convert a hex string to a name .
5232	Read a log - like object from an image file .
5233	Return the value of a custom form field .
5234	Get a list of jobs .
5235	Parse a job HCL .
5236	Update an existing token .
5237	Returns a list of all available allocations .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Get the health of a deployment allocation .
5241	Drain a node .
5242	Drain a node with the specified drain specification .
5243	Get an eligible node .
5244	List all files in a directory .
5245	Stream a file or directory .
5246	Get stats for a file .
5247	Join an agent .
5248	Update a list of servers .
5249	Force a node to leave .
5250	Get a list of nodes for the given prefix .
5251	Returns a list of evaluations for a given prefix .
5252	Get all namespaces for a given prefix .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Revert a job to a stable version .
5258	Deregister a job .
5259	Get a raft configuration .
5260	Delete a peer .
5261	Get all deployments for a given prefix .
5262	Returns a random object of the given type .
5263	Returns a mutator for the given object .
5264	Returns a random string of polyglot attacks .
5265	Generate a random fuzz for a given object .
5266	Return a safe unicode string from a string .
5267	Start the server .
5268	Stop PJFServer .
5269	Return a custom html file .
5270	Return a PJFTestcaseServer .
5271	Decorate an object with fuzz .
5272	Spawn a new command .
5273	Get the output of stdin .
5274	Finish a read .
5275	Close the PJFExecutor .
5276	Start the worker .
5277	Execute a PJFExternalFuzzer .
5278	Encode a function as a JSON string .
5279	Build a string from a predicate .
5280	Build a list of statements .
5281	Returns a string representation of the query .
5282	Build a value from a predicate .
5283	Build the OptGram .
5284	Build a reference from a given prefix .
5285	Build a STAR object from a predicate .
5286	Shutdown PJFProcessMonitor
5287	Run the process and spawn a monitor .
5288	Start the monitor .
5289	Return a random floating point value .
5290	Add a definition to the group .
5291	Add def_name to cat_group .
5292	Generate a number of gramfuzz fields .
5293	Returns a tuple containing all the fuzz elements for the given element .
5294	Returns a fuzzed version of the URL .
5295	Returns a fuzzed version of the JSON .
5296	Decorate an object to be mutated .
5297	Send a signal to the child process .
5298	Terminate the cli command .
5299	Pause the process .
5300	Resume a command .
5301	Stop the cli command .
5302	Restart the CLI process .
5303	Returns a list of Skype events .
5304	Sets the user s mood .
5305	Sets the avatar for this user .
5306	Get the metadata for a given URL .
5307	Create a new Skype contact .
5308	Get a Skype user .
5309	Returns a list of SkypeBots .
5310	Get information about a Skype bot .
5311	Returns a list of Skype users matching the given query .
5312	Returns a list of SkypeRequest objects .
5313	Create a Skype object from a raw string .
5314	Merge this object with another .
5315	Merge an object into the cache .
5316	Make a call to the SyncState API .
5317	Reads the token from the token file .
5318	Writes the token to the token file .
5319	Verify that the given token is valid .
5320	Refreshes the Skype token .
5321	Get the user id for this user .
5322	Get a registration token .
5323	Syncs all the Skype endpoints .
5324	Check if a user exists .
5325	Authenticate using the given token .
5326	Authenticate using a skype token .
5327	Create a Skype config file .
5328	Ping the endpoint .
5329	Get the most recent chats .
5330	Get a single chat with a user .
5331	Create a new thread .
5332	Convert a user to an ID .
5333	Convert a chat url to an ID .
5334	Exhaust a function .
5335	Return unicode text no matter what
5336	Returns the format handler that matches the given text .
5337	Parse text and return metadata and content .
5338	Post as a dict for serializing
5339	Load a YAML file .
5340	Export metadata to yaml .
5341	Turn metadata into JSON
5342	Returns a match object for this list .
5343	Returns a list of all the items in the list .
5344	Returns a list of all sublists matching the given pattern .
5345	Convert a string to a new start .
5346	Returns a list of all arguments .
5347	Returns a list of all Wiki objects matching the given pattern .
5348	Plant a trie from a list of strings .
5349	Convert a trie into a string .
5350	Check if an index is out of range .
5351	Insert a string at the specified index .
5352	Return the atomic partition of a character .
5353	Returns the subspans of the specified type .
5354	Shrink the intervals between start and stop .
5355	Insert or update a span at the given index and length .
5356	Returns the nesting level of the parser .
5357	Return a bytearray of the shadow of the string .
5358	Return the shadow of the extension link .
5359	Convert a PPP type to a list of spans .
5360	Deprecated use pformat instead .
5361	Returns a list of Parameter objects .
5362	Returns a list of ParserFunction objects .
5363	Returns a list of Template objects .
5364	Returns a list of WikiLink objects .
5365	Returns a list of comments .
5366	Returns a list of ExternalLink objects
5367	Returns a list of sections .
5368	Returns a list of tables .
5369	r Returns a list of lists matching the given pattern .
5370	Returns a list of Tag objects .
5371	Return a generator for subspans of a given type .
5372	Returns a list of all ancestors of the given type .
5373	Return the parent of the given type .
5374	Return the maximum number of items in a list .
5375	Get an argument from a list of arguments .
5376	Generate a normal name for this comment .
5377	Recursively remove the first argument from the list of arguments .
5378	Returns a dictionary of args that are not dup - safe .
5379	Set the value of an argument .
5380	Returns the argument with the given name .
5381	Returns True if the argument has the given name and value .
5382	Remove an argument from the list .
5383	Convert a CRS code to a string .
5384	Find an ellipsoid by name and CRS type .
5385	Create a CRS object from a URL .
5386	Load a GeoJSON object from a file .
5387	Convert an epsg code to a CRS code .
5388	Convert an ESRI code to a CRS code .
5389	Convert sr - org code to crscode .
5390	Create a CRS from unknown text .
5391	Write this record to a file .
5392	Read a VLR from a stream .
5393	Parse GeoTiffKeys from a list of VLRs .
5394	Parse a GeoTiff key .
5395	Returns the signedness for an extra dimension .
5396	Returns the id for the type of the extra dimension .
5397	Create a new record from a point record .
5398	Copy fields from other_record to self .
5399	Appends zeros to the array if the value is too small .
5400	Return a frozenset of all dimensions names .
5401	Returns a NumPy array with zeros .
5402	Initialize a PointData object from a stream .
5403	Decompress a point from a compressed buffer .
5404	Returns the x - dimension of the header .
5405	Returns the y - axis dimension of the header .
5406	Returns the z - dimension of the header .
5407	Add an extra dimension to the point data .
5408	Write the point record to a stream .
5409	Write to a file .
5410	Write a file to a destination .
5411	Convert a list of point formats to dtypes .
5412	Build a dictionary of unpacked point formats dtypes .
5413	Convert a numpy array dtype to a point format .
5414	Return the minimum file version for a point format .
5415	Checks if the given point format is compatible with the given file version .
5416	Returns a list of vlrs of the specified type .
5417	Returns a list of vlrs of the given type .
5418	Read num_to_read from data_stream .
5419	Check if all files have the same point format ID .
5420	Check if all files have the same dtype .
5421	Raise PylasError if file signature is wrong .
5422	Read a header from the stream .
5423	Read VLRs from the stream .
5424	Read points from a list of vlrs .
5425	Reads the compressed points data from the stream .
5426	Read the internal waveform packet .
5427	Read EVLRs from the stream .
5428	Warn if there are bytes between end_of and start_of
5429	Open a LasReader object from a source file .
5430	Read a LaS file from a source file .
5431	Create a LasData object from a header .
5432	Create a LasData object from a point format .
5433	Convert a point format to a point format .
5434	Merge a list of las files .
5435	Writes a file and reads it again .
5436	Returns a datetime . datetime object .
5437	Sets the creation date .
5438	Returns a numpy array of the minimum values .
5439	Set x y z minimum values .
5440	Returns a numpy array of the maximum values .
5441	Sets the maximum values of the axis .
5442	Returns the x y and z scales .
5443	Returns the x y and z offsets of the vector .
5444	Return a string representation of the file version .
5445	Convert header from old_header to new_version .
5446	Unpack a mask from a source array .
5447	Pack an array into a sub - field array .
5448	Returns a list of lost dimensions .
5449	Returns a dict of all sub - fields in the composition .
5450	Returns the number of extra bytes .
5451	Returns True if there is a waveform packet .
5452	Main entry point for satel_integra .
5453	Return the checksum of a command .
5454	Print a hex string .
5455	Verify and strip a response .
5456	Returns a list of set bits .
5457	Generate a query string from a command .
5458	Demonstrate the given host and port .
5459	Connect to the server .
5460	Start monitoring .
5461	Send a disarm command .
5462	Clear the alarm .
5463	Set the output of a command .
5464	Send a keep - alive message to the server .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the user s database .
5468	Guess the type of a file or directory .
5469	Get the file id for a given path .
5470	Get a notebook from the database .
5471	Create a notebook model from a database record .
5472	Get a directory from the database .
5473	Convert a list of file records into a dictionary .
5474	Create a directory model from a database record .
5475	Create a file model from a database record .
5476	Save a notebook to the database .
5477	Save the model to a file .
5478	Rename a file .
5479	Delete a file or directory .
5480	Ensure a user exists in the database .
5481	Remove a user from the database .
5482	Create a new directory .
5483	Check if a table is in a directory .
5484	Delete a directory .
5485	Check if a directory exists in the database .
5486	Returns a list of files in a directory .
5487	Returns a list of directories in a directory .
5488	Returns a boolean indicating if a file exists and if so where .
5489	Select a file from a list of fields .
5490	Return a list of file default fields .
5491	Get a file from the database .
5492	Get the contents of a file .
5493	Get the file id for a user .
5494	Check if a file exists in the database .
5495	Rename a directory .
5496	Save a file to the database .
5497	Generates a list of files .
5498	Purge remote checkpoints from the database .
5499	Generate remote checkpoints .
5500	Generate notebooks from a table .
5501	Reencrypt the contents of a row .
5502	Reencrypt a user s content .
5503	Derives a single fernet key from a password and user id .
5504	Derive fallback fernet keys from a list of passwords .
5505	Create a Fernet encryption factory for a single password .
5506	Memoize a function s single argument .
5507	Get the name of a column like .
5508	Convert a row to a dict with no content .
5509	Convert a row to a dict containing the contents of the fields .
5510	Create a checkpoint for a notebook .
5511	Create a file checkpoint .
5512	Delete a remote checkpoint .
5513	Get the content of a checkpoint .
5514	Returns a list of checkpoints for the given path .
5515	Move all checkpoints from old_path to new_path
5516	Delete all checkpoints at path .
5517	Purge remote checkpoints .
5518	Resolve a path from a manager dict .
5519	Apply a prefix to a model .
5520	A decorator that dispatches a path and returns the result .
5521	Wraps a path dispatcher with kwargs .
5522	Move files from one backend to another .
5523	Called when a manager has changed .
5524	Get the contents of a directory .
5525	Normalize an API path .
5526	Split an API file path into a directory and a filename .
5527	Returns a base64 encoding of a filename .
5528	Return a list of reads from a base64 file .
5529	Decode an unicode string from a base64 encoded string .
5530	Decode a file from a base64 - encoded file .
5531	Returns a list of all directories with a prefix .
5532	Wrap a function to raise an HTTPError if it s outside the root .
5533	Create a new user in the database .
5534	Separate directories and files from a list of models
5535	Walk a list of directories .
5536	Returns a generator that yields all files in a folder .
5537	Returns a generator yielding all files with content .
5538	Reencrypt all users .
5539	Reencrypt a single user .
5540	Unencrypt all users .
5541	Unencrypt a single user .
5542	Create a temporary alembic . ini file .
5543	Upgrade a database .
5544	Sanitize a block .
5545	Queue an instance of the given embed type .
5546	Load instances of a given embed type .
5547	Insert an instance into a block .
5548	Load the embedding data .
5549	Validate the given data .
5550	Returns the admin page for the given request .
5551	Returns a JSON representation of the object .
5552	Hide fields that are not authenticated .
5553	Exclude all fields from the query .
5554	Execute a GET request .
5555	Returns a queryset based on the query parameters .
5556	Returns a queryset based on the query parameters .
5557	Returns the value of the attribute for the given instance .
5558	Validate a widget .
5559	Validate a zone .
5560	Check if id is a valid UUID .
5561	Returns the user s permissions .
5562	Modify the user s permissions .
5563	Validate that the author is a person .
5564	Save the zone to the database .
5565	Returns a dictionary containing the data for this field .
5566	Returns a dictionary containing the data for each field .
5567	Render the template .
5568	Returns a list of settings for this Integration .
5569	Create a Facebook API callback .
5570	Get the settings for an integration .
5571	Update the settings of an integration .
5572	Signup a user .
5573	Map a tagname to a list of contents .
5574	Return a zone widget .
5575	Save a featured image .
5576	Saves a subsection .
5577	Return the extension of the image .
5578	Returns the MEDIA_URL for this image .
5579	Save the image to a file .
5580	Save an image as a thumbnail .
5581	Returns the connection to the database .
5582	Returns a BandwidthLimitedStream object for the given file object .
5583	Read an amount of bytes from the stream .
5584	Consume a request .
5585	Schedules the consumption of a token .
5586	Process a scheduled consumption token .
5587	Calculate the projected moving average rate .
5588	Record the consumption rate .
5589	Download a file from a bucket .
5590	Wait for a transfer to complete and return the result .
5591	Return a list of callbacks for the given callback type .
5592	Return a filtered version of the original dict .
5593	Decrement the count .
5594	Calls the callback if it s finished .
5595	Check if filename is a special file .
5596	Acquire a tag .
5597	Release an acquire token .
5598	Adjust the current chunksize .
5599	Queue a file IO task .
5600	Get an IOWriteTask object for writing data to a file .
5601	Returns the download output manager for the given transfer future .
5602	Download a file from a bucket .
5603	Write data to fileobj .
5604	Request a list of writes .
5605	Check if fileobj is seekable .
5606	Upload a file to a bucket .
5607	Download a file from a bucket .
5608	Creates a copy of a key in a bucket .
5609	Delete a key from a bucket .
5610	Shutdown the server .
5611	Cancel a transfer .
5612	Wait for a KeyboardInterrupt to occur .
5613	Read an amount of data from a file object .
5614	Wrap data in callbacks and close callbacks .
5615	Returns the UploadInputManager class .
5616	Set the exception for this transfer .
5617	Set the result .
5618	Set the exception . If override is True the exception will be set .
5619	Returns the result of the execution .
5620	Cancel this task .
5621	Submit a task to an executor .
5622	Add a function to the done_callbacks list .
5623	Add a function to the fail_cleanups list .
5624	Announce that the task is done .
5625	Submit a task to the Executor .
5626	Add a callback to be called when the future is done .
5627	Upload a file to S3 .
5628	Download a file from a bucket .
5629	Iterate over the decorators for the step function .
5630	Returns the args of a step decorator .
5631	Refactor a step from old_text to new_text .
5632	Iterate over all decorators for a step function .
5633	Returns a python value for the given decorator .
5634	Refactor a step from old_text to new_text .
5635	Select a python parser .
5636	List items in a team .
5637	Create a new object .
5638	Update a membership .
5639	Delete a membership .
5640	Get a single catfact .
5641	Send a POST request to the webhook .
5642	List items in a room .
5643	Delete a membership .
5644	Validate a base url .
5645	Check if string is a web url .
5646	Open a local file .
5647	Check if o is of one of the acceptable_types .
5648	Convert a list of dictionaries into a dictionary .
5649	Check if the response code matches the expected response code .
5650	Convert a JSON string to a dict .
5651	Return a string representation of a Webex team s datetime .
5652	Get a list of items from the API .
5653	Create a new project .
5654	Update a room .
5655	Delete a room .
5656	Get a list of items from the API .
5657	Returns the date when this team was created .
5658	Get an access token from the environment variable .
5659	Create a new resource .
5660	Update a webhook .
5661	Delete a webhook .
5662	Fixes the next url if it doesn t exist .
5663	Set the wait_on_rate_limit value .
5664	Update the headers of the request .
5665	Return the abs url for the given url .
5666	Make a request to the given url and return the response code .
5667	Make a GET request to the given URL .
5668	Get a list of pages from a URL .
5669	Get a list of items from a URL .
5670	Send a PUT request to a URL .
5671	Send a DELETE request .
5672	Create a new token .
5673	List items in a room .
5674	Create a new message .
5675	Delete a message .
5676	Create a new account .
5677	Get a person .
5678	Update a person s information .
5679	Delete a person from the API .
5680	Returns the current user .
5681	Get a list of items from the API .
5682	Get a list of items from the API .
5683	Create a new object .
5684	Update a team .
5685	Delete a team .
5686	Get a list of items from the API .
5687	Serialize data into a tuple .
5688	Get authorization code for a client .
5689	The last activity for this team .
5690	Post events to the webhook .
5691	Get the ngrok public url .
5692	Deletes all webhooks with the given name .
5693	Create a ngrok webhook .
5694	Delete webhooks with name WEBHOOK_NAME .
5695	Command line interface for reading DSMR data .
5696	Read a telegram from the stream .
5697	Read a telegram from the queue .
5698	Create a DSMR protocol .
5699	Create a dsmr reader connection .
5700	Create a connection to a TCP dsmr reader .
5701	Called when data is received .
5702	Called when a connection is lost .
5703	Handle a telegram .
5704	Parse the telegram data .
5705	Get the version of a file .
5706	Ensure python version is supported .
5707	Find all packages in a directory .
5708	Create a command class .
5709	Create a command for a given function .
5710	Run a command .
5711	Ensures that all files in targets exist .
5712	Wraps a list of commands into a single command .
5713	Returns a FileHandler for the given package data and data_files .
5714	Given a list of data files and a list of existing files return a dictionary containing the data files .
5715	Get the package data for a given root directory .
5716	Compile a pattern .
5717	Returns a generator that yields the contents of a path .
5718	Translate a glob file into a string .
5719	Join a list of translated parts into a single string .
5720	Translate a glob part into a string .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write a table to the database .
5724	Write triggers to the database .
5725	Write constraints to a table .
5726	Write the contents of a table to a file .
5727	Process a row in a table .
5728	Write the indexes to the file .
5729	Write constraints to the file .
5730	Write triggers to the file .
5731	Return the number of items in the queue .
5732	Enqueue data into the database .
5733	Start a task handler .
5734	Build the extra predicate .
5735	Return a JSON serializable datetime object .
5736	Reconnect to the database .
5737	Perform a query and return a list of rows .
5738	Get a connection to a database .
5739	Run the benchmark .
5740	Connect to the aggregator .
5741	Lookup a value by its number .
5742	Returns the number of connections in the network .
5743	Handle a potential connection failure .
5744	Generate a simple QB expression .
5745	Update a table .
5746	Connect to the database .
5747	Setup the database .
5748	Delete all tables in the database .
5749	Start a new step .
5750	Stop a step .
5751	Loads the raw_steps from the parser .
5752	Disconnect from the API .
5753	Reconnect to initialzion .
5754	Connect to the websocket .
5755	Called when a message is received .
5756	Stop the timers .
5757	Send a ping event to the API .
5758	Check if the Pong has been received .
5759	Send a request to the API .
5760	Clear the paused flag and resubscribe softly .
5761	Handle a system message .
5762	Raise an exception if the data is invalid .
5763	Handle errors .
5764	Handle incoming data .
5765	Resubscribe from a channel .
5766	Handle authentication .
5767	Handle a configuration change .
5768	Update the timestamps of a channel .
5769	Reset the connection .
5770	Get a list of candles for a given timeframe .
5771	Set the bitfinex config .
5772	Subscribe to a ticker .
5773	Unsubscribe from a ticker .
5774	Subscribe to an order book .
5775	Unsubscribe from an order book .
5776	Subscribe to a raw order book .
5777	Unsubscribe from a raw order book .
5778	Subscribe to a pair of trades .
5779	Unsubscribe from a pair of trades .
5780	Subscribe to a pair of candles .
5781	Unsubscribe from a pair of candles .
5782	Authenticate with the API .
5783	Cancel an order .
5784	Called when a device command is received .
5785	Called when a device command is received .
5786	Called when a message is received .
5787	Create a new device type .
5788	Publish an event to a topic .
5789	Update a device .
5790	Returns a ClientStatusList .
5791	Get a list of bundles .
5792	Create a new bundle .
5793	Updates a schema .
5794	Disconnect from the IBM Watson IoT Platform .
5795	Called when a connection is made .
5796	Subscribe to events from a device .
5797	Subscribe to a specific device status .
5798	Subscribe to a device command .
5799	Publish a command .
5800	Called when an unsupported message is received .
5801	Called when a device event is received .
5802	Called when a device status message is received .
5803	Called when a status message is received from a client .
5804	Get the last event for a given device .
5805	Get all events for a given device .
5806	Make a call to the API .
5807	Initiate a MgmtRequest request .
5808	Get the current status of a device .
5809	Close the index .
5810	Returns the number of intersecting indexes for the given coordinates .
5811	Returns the index of the closest object to the given coordinates .
5812	Get the bounds of the index .
5813	Delete an index .
5814	Create an idx object from a stream .
5815	Load a ByteArray from a page .
5816	Delete an object from the tree .
5817	Error checking for Error calls
5818	Load the application .
5819	Initialize Flask - Common extension .
5820	Runs the Flask and Gunicorn development servers
5821	Converts the value to a native image field .
5822	Crop an image on the centerpoint .
5823	Process an image and save it to disk .
5824	Process an image .
5825	Process an image and save it to disk .
5826	Convert this VersatileImageFormField to a python object .
5827	Process placeholder image .
5828	Pre - save the PPOI field .
5829	Update the ppoi_field of an instance .
5830	Save the data to the form .
5831	Create a form field for this image .
5832	Convert an object to a string .
5833	Autodiscover versatileimagefield .
5834	Unregister a SizedImage subclass .
5835	Unregister a FilteredImage subclass .
5836	Returns the url for this image .
5837	Builds filters and sizedimages for this field .
5838	Returns the root folder of the filtered file .
5839	Returns the size of the root folder .
5840	Returns the path to the filtered sized root folder .
5841	Delete matching files from storage .
5842	Preprocess an image .
5843	Preprocess a GIF image .
5844	Preprocess a JPEG image .
5845	Retrieve an image from a file .
5846	Save an image to disk .
5847	Return the PPOI as a string .
5848	Create a resized image .
5849	Render a template .
5850	Returns a dict containing the context for this file input .
5851	Returns a copy of base_attrs with optional extra_attrs .
5852	Get the path to a resized image .
5853	Returns the path to a filtered image .
5854	Validate a list of sizes .
5855	Get a url from an image key .
5856	Gets the rendition key set for the given key .
5857	Return a string representation of an instruction .
5858	Format a function body .
5859	Decode a bytecode into an instruction .
5860	Decode a module .
5861	Deprecated function decorator .
5862	Create a connection to the server .
5863	Close the connection to the server .
5864	Read the result from the reader .
5865	Handle FastAGI requests .
5866	Parse an AGI result line .
5867	Check AGI code .
5868	Reset the instance to its original state .
5869	Returns a list of all instances of this object .
5870	Get metadata for a given path .
5871	Returns a list of primary keys in a model .
5872	Deserialize a value .
5873	Get an instance of the query with the given value .
5874	Override get_declared_fields to override dict_cls
5875	Load a ModelSchema from the given data .
5876	Split model kwargs and association attributes .
5877	Delete orphan snapshots .
5878	Create a snapshot of a database .
5879	List all available snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Updates indexes after each epoch for shuffling
5885	Return a preprocessed version of a string .
5886	Apply a function to the given data .
5887	Process a text constructor .
5888	Process a text string .
5889	Process text in parallel .
5890	Generates stats for document length .
5891	Returns a Pandas DataFrame with token counts .
5892	Map a param type to a string type .
5893	Parse a list of interfaces .
5894	Return the inverse of the vector .
5895	Update with a rollback .
5896	Return a copy of this instance .
5897	Create a copy of this node .
5898	Check if two Mappings have the same order .
5899	Return the inverted value of an argument .
5900	Clears all data .
5901	Move a node to the end of the node .
5902	Write text to a temporary file .
5903	Get contacts from a list of address books .
5904	Merge arguments into config .
5905	Load address books from config . abooks .
5906	Prepare source and target search queries .
5907	Select an address book for a new contact .
5908	Return a list of birthdays for a given vcard .
5909	Return a list of phone numbers matching the given search terms .
5910	List contacts in a subcommand .
5911	Modify a subcommand .
5912	Remove a contact from the address book .
5913	Creates a subprocess and sends it to the given editor .
5914	Merge a list of vcards .
5915	Copy or move a subcommand from one address book to another .
5916	Returns the action for the given alias .
5917	Convert a boolean value in a config file .
5918	Create a new contact .
5919	Create an AddressBook object from a file .
5920	Create a contact object from a user input .
5921	Create a new contact from an existing contact with a new user input .
5922	Returns a list of names for a given part .
5923	Add a category to the vcard .
5924	Parse a type value .
5925	Convert a list to a string .
5926	Convert a string to a datetime object
5927	Compare two uids .
5928	Yield all contacts matching the given query .
5929	Return a generator of contact names matching the given query .
5930	Search for a uid in the list of contacts .
5931	Search for an address book .
5932	Get a dictionary of short uids .
5933	Return the short uid for the given uid .
5934	Returns a generator of vcard files .
5935	Load a CarddavObject from a Vdir .
5936	Get an abook by name .
5937	Returns a list of available ARM and ARM64 architectures .
5938	Return the available ARM and X86 architectures .
5939	Return a valid argspec for a given function .
5940	Dispatch a command to the given parser .
5941	Prompt the user for input .
5942	Encode a value into a string .
5943	Given a dict of kwargs return a dict of kwargs .
5944	Add commands to a parser .
5945	Decorator to add a named attribute to a function .
5946	Decorator to add an arg to a function .
5947	Prompt the user for an action .
5948	Replace this query with a new one .
5949	Like a pattern .
5950	Return a cached result .
5951	Return the first entry in the list .
5952	Delete entities of models with foreign key relationships
5953	Called when an entry is deleted .
5954	Return a lua for a redis prefix .
5955	Estimate the work LUA for a given index .
5956	Perform a search using the specified filters .
5957	Count the number of occurrences of filters in a connection .
5958	Return a connection object for the given object .
5959	Convert a string to a full text .
5960	Refresh the indices of a model .
5961	Clean old index .
5962	Add an object to the database .
5963	Returns the value of a given key .
5964	Write LUA data to redis .
5965	Save the current state to a dict .
5966	Delete this object .
5967	Get a list of ids .
5968	Register a dispatcher .
5969	Open a semaphore .
5970	Calculate the CPU count .
5971	Send a result to the result queue .
5972	Process a worker .
5973	Add a call item to the queue .
5974	Ensure that the executor is running .
5975	Wrap an object in a non - picklable object .
5976	Start the server .
5977	Duplicate a process .
5978	Get a reusable executor .
5979	Wait for all running jobs to complete .
5980	Returns a dict containing the preparation data .
5981	Prepare data for logging .
5982	Close all files in keep_fds .
5983	Terminate a process without psutil .
5984	Recursively terminate a process .
5985	Get the exitcodes of the processes that have been terminated .
5986	Format a list of exitcodes .
5987	Main semaphore tracker .
5988	Ensure that the process is running .
5989	A simple event processor that prints out events .
5990	Disassembles the msg and msg_nocr .
5991	Interact with the given banner and read function .
5992	Split a string into a list of arguments .
5993	Get the stack for a given frame .
5994	Run a list of hooks on an object .
5995	Forgets the current state of the thread .
5996	Get the noerr value for the given argument .
5997	Get an integer from a command .
5998	Process all commands in the loop .
5999	Add a source file to the queue .
6000	Return the next token in a string .
6001	Send an error message to the user .
6002	Read a command .
6003	Close the connection .
6004	Disassemble a byte string into a byte string .
6005	Disassemble a sequence of bytes into a single byte string .
6006	Return a count of the number of frames
6007	Get the call function name for a given frame .
6008	Print count entries of the stack trace
6009	Lookup a subcmd by its prefix .
6010	Short help for a subcmd .
6011	Add a subcmd to the command list .
6012	Run a subcmd .
6013	Debug a python object .
6014	Show commands in a given category .
6015	Run Mclifns .
6016	Find a debugged frame .
6017	Map thread names to their ids .
6018	Get an integer value from a command .
6019	Get the value of an onoff command .
6020	Set a boolean value in the debugger .
6021	Run a set_int command on an object .
6022	Show a boolean value .
6023	Show the value of an object .
6024	Show the value of an object .
6025	Check if a line is a DEF statement .
6026	Check if a line is a class definition .
6027	Raise a DebuggerQuit if there is a threaded read .
6028	Returns True if the environment variable TERM is set to False otherwise
6029	Check if r g b is dark rgb .
6030	Return the signature of a frame .
6031	Returns a list of all display objects in the list .
6032	Add a frame to the list of displayed frames .
6033	Returns a string representation of the object .
6034	Read a message from the stream .
6035	Debug the remote trepan .
6036	Undefined subcommand .
6037	Find and set the debugged frame .
6038	Print a simple array .
6039	Lookup the SIG name of a signal .
6040	Lookup a signal by its name .
6041	Return the canonic signname of a name .
6042	Set a signal replacement handle .
6043	Check and adjust the signature handlers .
6044	Print information about a signal .
6045	Handle an action .
6046	Handle a print request .
6047	Handle incoming signal .
6048	Convert a filename to a module name .
6049	Search for a file in a list of directories .
6050	Given a python script return a python script .
6051	All python files caller s dir without the path and trailing . py
6052	Write a message to the output .
6053	Run the python program .
6054	Columnize a list of commands .
6055	Post - mortem traceback .
6056	Close the connection .
6057	Write a message to the server .
6058	Return a complete identifier for a given command .
6059	Print a string to the terminal .
6060	Add an ignore filter to this filter .
6061	Return the canonic of a filename .
6062	Return the filename of the debugger .
6063	Returns True if the tracer is started .
6064	Check if a frame is a stop here event .
6065	Sets to stop on the next event that happens in frame .
6066	Return the stack trace of a function .
6067	Run the debugger .
6068	Check if a frame has a function name .
6069	remove breakpoint bp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable all breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete breakpoints by line number .
6074	Open a text file .
6075	Read a line from the input .
6076	Prompt the user for confirmation .
6077	Add a whitespace character to the token .
6078	r  d + NUMBER .
6079	Convert a query to a Future .
6080	Restore the original login .
6081	Load a CAN_LOGIN_AS module .
6082	Iterate over documents .
6083	Main entry point for Luminoso .
6084	Transcode a JSON file to a stream .
6085	Open a . json or . csv file .
6086	Normalize the data in a stream .
6087	Convert a string to a datetime object .
6088	Detect the encoding of a file .
6089	Yield json lines from a file .
6090	Transcode a file to UTF - 8 .
6091	Open a csv file somehow py2 .
6092	Read a CSV file .
6093	Translate CSV or JSON input to a JSON stream .
6094	Connect to a Luminoso server .
6095	Save a token to a file .
6096	Make a request to the Luminoso API .
6097	Delete a file or directory .
6098	Wait for a project to be built .
6099	Returns the root url of the given URL .
6100	Save a token to a file .
6101	Make a JSON request .
6102	Make a POST request to the API .
6103	Change the path of a file .
6104	Get the default account .
6105	Returns the documentation for this project .
6106	Wait for a job to complete .
6107	Make a HTTP GET request to the given path .
6108	Print the result as a CSV .
6109	Read parameters from a JSON file .
6110	Simplify a document .
6111	Create a project with a list of documents .
6112	Upload docs to a project .
6113	Main entry point for argv .
6114	Upload a stream to Luminoso .
6115	Upload a file to a server .
6116	Command - line entry point .
6117	Create a token from a user s credentials .
6118	Login to the server .
6119	Post a login page .
6120	Get the data for a resource .
6121	Fetch data from the API .
6122	Prepares the view to be imported .
6123	Initialize the view .
6124	Returns a DemoHandler object .
6125	Called when a message is received .
6126	Update the menus of the page .
6127	Returns a list of default static file handlers .
6128	Called when a JSON message is received .
6129	Called when the DOM is modified .
6130	Create the widget .
6131	Initialize the widget .
6132	Destroy this WebComponent .
6133	Add a child to this component .
6134	Remove a child from this component .
6135	Returns a generator of all child widgets .
6136	Set an attribute of a widget .
6137	Update the proxy .
6138	Notify the user of a change .
6139	Return a list of declarations matching the given query .
6140	Initializes and activates the proxy .
6141	Initialize the widget .
6142	Set the source of this component .
6143	Observe a change in a block .
6144	Observe a block change .
6145	Observe the children of the given change .
6146	Read the contents of a file .
6147	Write error message to stderr and exit .
6148	Error parsing .
6149	Get a product by its name .
6150	Create a new session .
6151	Reset the store .
6152	Get a list of stores matching the given search term .
6153	Sets the delivery system for a store .
6154	Get a menu from a store .
6155	Add an item to the basket .
6156	Adds a pizza to a recipe basket .
6157	Add a side to a basket .
6158	Remove an item from a basket .
6159	Sets the payment method .
6160	Process a payment .
6161	Get a file from the API .
6162	Perform a POST request .
6163	Call the API .
6164	Append an item to the menu .
6165	Add an exit item to the list .
6166	Draw the cursor .
6167	Process user input .
6168	Select the item to be selected .
6169	Parse old menu data .
6170	Return the top value of a DataFrame .
6171	Returns a DataFrame with a top - level group .
6172	Convert a string to datetime .
6173	Convert a datetime to a string .
6174	Convert a DataFrame to a new date format .
6175	Cast a column to a given type .
6176	Return the rank of a dataframe .
6177	Create a waterfall object from a DataFrame .
6178	Perform basic math operations on a DataFrame .
6179	Round values in a DataFrame to a specified number of decimals .
6180	Return the absolute values of a column in a DataFrame
6181	Pivot a DataFrame to the specified index .
6182	Pivot a DataFrame by a group .
6183	Groups a DataFrame by a set of columns .
6184	Compute the cumulative sum of a DataFrame .
6185	Add missing rows to a DataFrame .
6186	Decorator to catch exceptions .
6187	Decorator to log a message to a logger .
6188	Decorator to log the time of a function .
6189	Decorator that logs the input and output shapes of a function .
6190	Rename a DataFrame .
6191	Compute the cumulative sum of a DataFrame .
6192	Combine columns for aggregation .
6193	Get the value of a parameter from a function call .
6194	Remove old entries from a cachedir .
6195	Roll a DataFrame up a number of levels .
6196	Calculate the maximum value of a column in a DataFrame .
6197	Returns a new DataFrame with the minimum values for the given column .
6198	Fills a column with a numeric value .
6199	Add an offset to a date object .
6200	Add a number of months to a date object .
6201	Add nb_years to a date object .
6202	Parse a date from a string .
6203	Filter a DataFrame by a specific date .
6204	Return the percentage of a column in the DataFrame .
6205	Performs ada_family_core on a set of parameters .
6206	Returns a list of training and optimization updates .
6207	Returns the training parameters .
6208	Returns a list of optimization updates .
6209	The first glimpse sensor .
6210	Prepares the input and output layers .
6211	Compute the tensor of x .
6212	Map a function to the test set .
6213	Vectorize the target to the given size .
6214	Returns a logging . info .
6215	Train a set of tests .
6216	Sample a set of inputs .
6217	Computes the aligned values from the precomputed values .
6218	Compute the context vector .
6219	Concatenate a list of variables .
6220	Pads the given side with the given length .
6221	Compute the RMSP of a set of parameters and gradients .
6222	Prints the current time in seconds .
6223	Computes and returns the cost for the given data .
6224	Invoke the trainer .
6225	Builds the tensor variables for the loop .
6226	Perform a step - by - step scan of the loop .
6227	Computes the momentum of a set of parameters .
6228	Set the iftrain flag .
6229	Skip n_epochs and n_batches
6230	Load parameters from a file .
6231	Train a set of parameters .
6232	Run a training step .
6233	Run a valid step .
6234	Write a score map to stdout
6235	Returns the data for the given data_split
6236	Apply a function to the tensor .
6237	Report accessed parameters .
6238	Return the value of a tensor .
6239	Create a neural variable from a dataset .
6240	Create a shared value .
6241	Add encoders to the stack .
6242	Add decoders to the stack .
6243	Compute the encoding of x .
6244	Decode x .
6245	Create a 2D gaussian .
6246	Register a layer .
6247	Monitor the outputs of each layer .
6248	Returns a list of all parameters .
6249	Setup the input and test variables .
6250	Compute and return a MapDict .
6251	Save network parameters to a file .
6252	Load parameters from a file .
6253	Returns a dict with information about the network .
6254	Register a list of parameters .
6255	Register a list of updates .
6256	Register training updates .
6257	Register a list of monitors .
6258	Return the l2 norm for multiple tensors .
6259	Dump elt_to_pickle to file_obj
6260	Load a pickled elt from a file object .
6261	Load the params from a file .
6262	Create a request element .
6263	Decode a state into a JSON string .
6264	Parse credentials data .
6265	Filter the request elements based on the request type .
6266	Login to a provider .
6267	Normalize a dictionary .
6268	Convert a list of items to a dictionary .
6269	Parse a json - qs body .
6270	Resolve a provider class .
6271	Create a cookie .
6272	Save the session data to the cookie .
6273	Get the data from the adapter .
6274	Returns a dictionary containing the data for this object .
6275	Return the signature of the secret .
6276	Serialize a value into a string .
6277	Returns True if the token is valid False otherwise .
6278	Returns True if expiration_time is less than or equal to seconds .
6279	Serialize credentials to a tuple .
6280	Returns True if content is a binary string .
6281	Returns the content of the response .
6282	Create a request element .
6283	Access the user info .
6284	Login to FlaskAuthomatic .
6285	Authenticate the user .
6286	Generate a session key .
6287	Set a session key .
6288	Generate a CSRF hash of a secret .
6289	Log a message .
6290	Check if the HTTP status is in a given category .
6291	Split url into base and params .
6292	Enable cross - origin using options .
6293	Sets the CORS headers for a response .
6294	Returns a dict containing the kwargs for the app instance .
6295	Return a flexible string representation of an object .
6296	Ensure that an iterable is returned .
6297	Return True if a is close to b .
6298	Decorator to mark functions as deprecated .
6299	Deserialize a string into an AudioSegment .
6300	Create an AudioSegment from a file .
6301	Create a NumPy array from a numpy array .
6302	Execute a Sox command .
6303	Filter a WAV file for silence .
6304	Compute the fft of a time series .
6305	Generates frames from the raw data .
6306	Normalize the SPL of an AudioSegment by average .
6307	Reduce this AudioSegment to a list of AudioSegments .
6308	Resample the audio .
6309	Serialize the state into a string .
6310	Create a spectrogram .
6311	Given a list of candidate offset front ids and a list of offset front ids and a list of offsets_corresponding_to_onsets return a list of noverlap ids and a list of noverlap ids .
6312	Get offset front id after onset sample idx .
6313	Get the offset front id after the given onset front .
6314	Match an offset front id to an onset front id .
6315	Get a list of consecutive and overlapping fronts from a list of onset fronts .
6316	Update the segmentation mask .
6317	Get the front id from the index .
6318	Get front ids one at a time .
6319	Given a list of onset fronts and a list of onsets return a list of corresponding offsets .
6320	Remove overlaps from a segmentation mask .
6321	Remove fronts that are too small .
6322	Breaks the poorly matched fronts by a threshold .
6323	Merge adjacent segments of a mask .
6324	Return a list of masks separated by threshold .
6325	Downsample one or the other stft .
6326	Perform an ASAS task .
6327	Apply a bandpass filter to data .
6328	Apply a low - pass filter to data .
6329	Convert a list to a TF input .
6330	Expands and standardizes a data set .
6331	Return True if a and b are in equal ignore order .
6332	Given a list of filenames and a measurer return a list of feature scores grouped by similarity .
6333	Loads the confusion matrices from an audit file .
6334	Convert a list to a TF input .
6335	Update the index url from the config files .
6336	Autodetect requirements files .
6337	Resolve a list of streams .
6338	Resolve a stream by a property .
6339	Resolve a predicate by predicate .
6340	Handle an error .
6341	Push a single sample to the stream .
6342	Push a chunk of data into the buffer .
6343	Get information about the stream .
6344	Open a stream to the object .
6345	Returns a time corrected version of the object .
6346	Return an XML element with the given name .
6347	Return the next sibling of this element .
6348	Return the previous sibling of this element .
6349	Set the name of this object .
6350	Sets the value of this object .
6351	Append a child element to this element .
6352	Prepend a child element to this element .
6353	Return a copy of this element .
6354	Return a copy of this XML element .
6355	Remove a child element from this element .
6356	Returns a list of StreamInfo objects for this resolver .
6357	Create a pair of tokens from a word .
6358	Prints a dictionary of n - grams .
6359	Compute the edge ngrams of a token .
6360	Iterate over a list of processors .
6361	Returns an iterator over the tasks in an unordered iterable .
6362	Make a fuzzy word .
6363	Print a word fuzzily .
6364	Do a fuzzy index on a word .
6365	Returns a list of relations that can be extrapolated .
6366	Print help for a given command .
6367	Print information about the database .
6368	Get a key from a DB .
6369	Do a geohash of the given latitude and longitude .
6370	Get a house number .
6371	Print the index details for a given id
6372	Print the best score of a word .
6373	Compute the distance between two strings .
6374	Send a request to a remote server .
6375	Map a list of requests to a list of requests .
6376	Returns a Bits object from a Python array .
6377	Reinterpret harray to bits .
6378	Convert a slice to a SLICE object .
6379	Find all files matching pattern in a directory .
6380	Return the value of a parameter in an iterable .
6381	Static for each item in items .
6382	Logical shift left
6383	Convert a log number to a ceil number .
6384	Checks if a number is a pow2 .
6385	c - like case of switch statement
6386	Sets the default for the given statements .
6387	Registers all interfaces in obj with the VcdWriter .
6388	Register a synthesised unit before a simulator .
6389	Log a change to vcdWriter .
6390	Render a HWProcess .
6391	Add agents to a unit .
6392	Returns the class associated with this UnitBase .
6393	Returns a generator that yields distinct elements of an iterable .
6394	Returns a generator that yields all items in a collection grouped by a function .
6395	Flatten an iterable .
6396	Merge a nested IfContainer from another IfContainer .
6397	Remove unconnected signals from a netlist .
6398	Check if a process is too simple .
6399	Try to merge two HWProcess .
6400	Convert a list of processes into a single list of processes .
6401	Called when a Write request is received .
6402	Serialize a unit or class to a RTL file .
6403	Given a list of HdlStatements return the name of the Process and Mark Outputs .
6404	Cuts off all drivers of a signal .
6405	Create a RtlSyncSignal .
6406	Synthesize the architecture .
6407	getMaxStmIdForStm - Returns the maxId of the specified STM .
6408	Returns the maximum number of statements in a process .
6409	Write data to sim .
6410	Change the direction of the interface .
6411	Loads the declarations .
6412	Return a list of signals for a given interface .
6413	Returns the physical name of the entity .
6414	Return the bit length of the dtype .
6415	Returns the sensitivity of an operation .
6416	Evaluate an operator .
6417	Converts a sigOrVal to a Bits object .
6418	Reinterpret a sigOrVal to a hstruct .
6419	Returns the full word width between start and end .
6420	Groups a transaction by word index .
6421	Print an interface to a file .
6422	Create a FrameTmpl object from a TransTmpl transaction .
6423	Returns a generator that yields a list of words .
6424	Packs the given data into a dictionary .
6425	Clean the signal metadata .
6426	Find an enclosure for a list of statements and outputs .
6427	Discover the sensitivity of a set of signals .
6428	Return the RTL context for this statement .
6429	Called when the state is reduced .
6430	Merge other into self .
6431	Returns True if stmsA and stmsB are merged .
6432	Merge statements into a single HDLStatement .
6433	Merge two StatementLists .
6434	Try to reduce a list of statements .
6435	Called when a parent event is dependent .
6436	Sets the parent state .
6437	Registers a list of statements with the target .
6438	Destroy the RTL context .
6439	Register a container .
6440	Create a signature for a container .
6441	Clean the interfaces as a subunit .
6442	Returns a generator that yields all fields of a sigOrVal .
6443	Unpack a HStruct .
6444	Return a signed version of this Operator .
6445	Calculate the sensitivity of a process .
6446	Evaluate a condition in a simulator .
6447	Connect a simUnit to a subSimUnit .
6448	Creates an updater for a given value .
6449	Create an array updater .
6450	Create a vector from a byte string .
6451	Process a HWProcess .
6452	Evaluate a parameter .
6453	Sets the value of this parameter .
6454	Construct a HStruct from an input map .
6455	Remove all SyncPorts SyncPorts SyncPorts and SyncPorts .
6456	Returns the index cascade .
6457	Create a new ValueCls object from a Python object .
6458	Cast a sigOrVal to a toType .
6459	Reinterpret a sigOrVal to a new type .
6460	Iterate over all interfaces in intf . _interfaces and add them to discovered .
6461	Connect srcPacked to dstInterface .
6462	Pack an integer into a dictionary .
6463	Hardcode a rom into a process .
6464	Converts this entity to a targetPlatform .
6465	Registers an interface with a given intf .
6466	Try to reduce and return a value .
6467	Try to reduce a xor .
6468	Returns a NameScope object for the name scope .
6469	Returns a seriazlized decision for the given object .
6470	Returns a HdlType instance for the given type .
6471	Return a string representation of an IfContainer .
6472	Returns a tuple of c and isNegated .
6473	Return a tuple of SimBits .
6474	Get the name of a constant .
6475	Cuts off all drivers of a sign .
6476	Load a TransTmpl from an array .
6477	Load a TransTmpl from a HStruct .
6478	Load a bit from a dtype .
6479	Returns the width of the item .
6480	Returns a tuple of tuples with each tuple corresponding to the given offset .
6481	Fixes a value to a given width .
6482	Merge this StatementList with another StatementList .
6483	Returns the indent string for the given indentNum .
6484	Check if a property with the given name is available .
6485	Registers a parameter with the scope .
6486	Updates the parameters of this object with those of another object .
6487	Register a new unit .
6488	Register an interface .
6489	Register an array .
6490	Returns a single driver .
6491	Performs a static evaluation of all operands .
6492	Register an Operator with a set of operands and a set of outputs
6493	Return a copy of this object with indentation .
6494	Try to connect to a unit .
6495	Propagate the clk of an object .
6496	Propagate the clk - rst - n of an object .
6497	Propagate the clk - rst of an object .
6498	Propagate the rst_n of an object .
6499	Propagate the rst of an object .
6500	Iterate over the bits of a sigOrVal .
6501	Serializes obj to exclude obj .
6502	Convert obj . name to clsName .
6503	Returns True if obj is a declaration and False otherwise .
6504	Return the full name of the object .
6505	Creates a new association for each object in the list .
6506	Prepare a SimModel instance for a given unit .
6507	Convert a unit to a SimModel .
6508	Reconnects a synthesised unit or interface to a model .
6509	Convert a SimModel into a vcd .
6510	Initialize the onTWriteCallback method .
6511	Connect this port to a signal .
6512	Register a signal for this port .
6513	Connects the src endpoint to the dst driver .
6514	Returns the internal signature of the object .
6515	Checks if a process is EV dependent on another process .
6516	Add a process to the queue .
6517	Add a HDL process to the current run .
6518	Schedules a combUpdateDoneEv event .
6519	Schedules the application of the values .
6520	Returns a boolean indicating whether the newValue conflicts with the resolve strategy .
6521	Runs all the comb processes in the output container .
6522	Runs all the sequence processes in the pipeline .
6523	Returns a generator containing the values to be applied .
6524	Read the value of a signature .
6525	Write a value to a SimSignal .
6526	Add a process to the queue .
6527	Simulate a synthesised unit .
6528	Creates a function that mks an operation .
6529	Converts a list of statements into a list of If statements .
6530	Process a HWProcessor .
6531	Calculate the distance between two hashes .
6532	Calculate the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup the Vizio platform .
6535	Update the state of the device .
6536	Mute the volume .
6537	Volume up .
6538	Volume down .
6539	Set the volume level .
6540	Resets the piece_bb to its original state .
6541	Returns the piece at the given square .
6542	Remove a piece at a given square .
6543	Set a piece at a given square .
6544	Checks if a move is suicide or if it is a check .
6545	Return True if the turn was a suicide .
6546	Returns True if the game is over .
6547	Returns True if this is a checkmate .
6548	Returns True if this is a fourfold repetition .
6549	Pop a piece from the stack .
6550	Return a string representation of the sfen .
6551	Pushes the given usi to the current position .
6552	Returns the zobrist hash of the board .
6553	Returns the symbol of the piece .
6554	Construct a PIECE object from a symbol .
6555	Returns the UUID of the piece .
6556	Create a Piece object from a USI string .
6557	Parse a list of commits .
6558	Parse a commit into a dict .
6559	Load the config from the command line .
6560	Execute from a django command line .
6561	Add an argument to the argparse parser .
6562	Load config from a file .
6563	Generates a YAML document from a YAML file .
6564	Generates a Markdown docstring for the class .
6565	Cast a value to this object .
6566	Return a list of dates between first_date and last_date
6567	Parse a date from a string .
6568	Load a currency file .
6569	Set missing rates to None .
6570	Compute the missing rates for a currency .
6571	Get the rate for the given currency and date .
6572	Convert an amount to a new currency .
6573	Group an iterable into n lists .
6574	Animate a sequence of frames .
6575	Read a record from the file .
6576	Write a record to the file .
6577	Map words between start and end .
6578	Returns the comment area of the DAF file .
6579	Add an array to the summary_control_struct .
6580	Close the DataFrame .
6581	Compute the position of each position in tdb .
6582	Close the file .
6583	Load the PCK data .
6584	Compute the coefficients of two tdbs .
6585	Visit a format call node .
6586	Visit a BinOp node .
6587	Checks if the given node is in the whitelist .
6588	Visit a JoinedStr .
6589	Check if a keyword is in the whitelist .
6590	Visit a LoggingVisitor or LoggingHandler node .
6591	Detect the logging level of a node .
6592	Return the name of the exception handler for this node .
6593	Returns the id attribute of the given value .
6594	Checks if the given node is a bare exception .
6595	Check if the given node has any exception information .
6596	Delete a file if it exists .
6597	Returns a django . db_file_widget that displays the template substitution values .
6598	Render a PDF from a template .
6599	Render the PDFTemplateView to a response .
6600	Convert a string to an http quote .
6601	Configure MONGODB options .
6602	Return an underscored version of a string .
6603	Auto - index a collection .
6604	Parse a price model from a file .
6605	Load a single line from a file .
6606	Parse a line into a PriceModel .
6607	Translate a symbol .
6608	Load all symbol maps .
6609	Get the current session if it exists .
6610	Add a price to the price database .
6611	Import prices from a CSV file .
6612	Print the last price for a security symbol .
6613	List prices for a given currency .
6614	Download prices from PriceDB .
6615	Remove all price entries from the price database .
6616	Get the default session for the price database .
6617	Add a new SymbolMap to the database .
6618	List all symbols in the price database .
6619	Get a symbol by its identifier .
6620	Read lines from a CSV file .
6621	Maps an entity to a PriceModel .
6622	Map a model to a Price object .
6623	Read a configuration file .
6624	Get the path to the config template .
6625	Create a user config file .
6626	Returns the path to the config file .
6627	Get the contents of the config file .
6628	Set the value of an option .
6629	Get an option from the config .
6630	Save the configuration to a file .
6631	Parse a symbol into namespace and mnemonic .
6632	Add a price .
6633	Add a price entity to the price repository .
6634	Download the price for the given symbol and currency .
6635	Get the current session .
6636	Get all prices for a given date and currency .
6637	Get all prices for a given date .
6638	Remove all security symbols from the repository .
6639	Remove all prices for a security symbol .
6640	Download and parse the price for the given symbol and currency .
6641	Get a list of securities .
6642	Return the partial state of the function .
6643	Update child calls .
6644	Returns a generator that yields all the children of this node .
6645	Decorator for multi - dec calls .
6646	Check if the student and solution parts have the same length .
6647	Check if the code and code match inside has_equal_ast .
6648	Check if a string contains the given text .
6649	Check if a package is imported .
6650	Check if the student outputs the given text .
6651	Check if a node has a printout .
6652	Check if the state contains an error .
6653	Check if correct has been selected .
6654	Check if a function is valid .
6655	Get a result from a process .
6656	Override a solution .
6657	Checks if an instance is in the solution process .
6658	Returns a list of defined items .
6659	Convert this node to a child node
6660	Returns the x - axis of a parser .
6661	Check if a context loop exists .
6662	Check if a state has a specific context .
6663	Check if a part has been defined .
6664	Check if a part is defined .
6665	Check if the given argument is valid .
6666	Checks a lambda function call .
6667	Get the true anomaly .
6668	Initialize LDAP3 app .
6669	Initialize LDAP configuration .
6670	Add a server to the pool .
6671	Decontextualise a connection .
6672	Unbind a connection used within the request context .
6673	Authenticate a user with LDAP .
6674	Authenticate a user using a direct connection .
6675	Authenticate to LDAP using search_bind method .
6676	Get a list of user groups for a given DN .
6677	Get information about a user .
6678	Get user information for a given username .
6679	Get an object by dn filter and attributes .
6680	Create a connection to the Flask application .
6681	Create a connection to the server .
6682	Create a connection to the LDAP server .
6683	Destroy a connection .
6684	Perform a search on the container .
6685	Search for a label .
6686	Search all repositories .
6687	Search all jobs in a collection .
6688	Speak to the client .
6689	Announce a command to the user .
6690	Update the settings for the Google Drive client .
6691	Update the headers .
6692	Require client secrets .
6693	Download a file from url to file_name .
6694	Stream the contents of a URL to a stream .
6695	Updates the authorization token .
6696	Get or create a folder .
6697	Read a response from the server .
6698	Get the S3 bucket .
6699	Update client secrets .
6700	Initialize the client .
6701	Load the secret settings .
6702	Return a list of logs .
6703	List all the blobs in the bucket .
6704	Create a folder at an endpoint .
6705	Initialize the transfer client .
6706	Search for all containers .
6707	Print the status of the backend .
6708	Add a variable to the settings .
6709	Remove a variable from the backend .
6710	Activate a client .
6711	Delete a backend .
6712	Update the base for the given image .
6713	Generate basic auth header .
6714	Generate a signature for the given payload and secret .
6715	Generate a header signature for a request .
6716	Delete a URL .
6717	Handle HTTP HEAD requests .
6718	Return a paginated list of results for a given url .
6719	Verify that the certificate is valid .
6720	Remove an image from the registry .
6721	Get the version lookup from the version . py file
6722	Get a list of install requirements for a given lookup .
6723	Get the version of SINGULARITY .
6724	Check if a software is installed .
6725	Returns the absolute path to the install directory .
6726	Returns a thumbnail of the robot .
6727	Run a command and return its output .
6728	Get the metadata for a given image file .
6729	Update the user s secrets .
6730	Print the output of a response .
6731	Destroy all the commands in args .
6732	List the logs for a container .
6733	Returns a list of all collections in the account .
6734	Update SREGISTRY_SWIFT_AUTHTYPE .
6735	Update Google Storage secret settings .
6736	Get Singularity client .
6737	Announce an IPython command .
6738	Get the manifests for a given repository .
6739	Get the manifest for a repository .
6740	Get the download cache for a given destination .
6741	Extract the Docker container environment from the config file .
6742	Update the base and artifacts .
6743	Update the secret headers .
6744	Get the metadata for the GitLab API .
6745	Get the settings for a given client .
6746	Get and update the specified setting .
6747	Update a setting .
6748	Authorize a user .
6749	List all builders in a zone .
6750	Load the templates for a given name .
6751	Get an IP address from the Cloud Console .
6752	Run beepboop build .
6753	List all containers in the bucket .
6754	Search for all containers in the bucket .
6755	Main entry point for sregistry .
6756	Main entry point for the sregistry client .
6757	Initialize the database .
6758	Get a single build template .
6759	List shared endpoints .
6760	List all the endpoints .
6761	List all files associated with an endpoint .
6762	Create a shared link .
6763	Read the client secrets from the registry .
6764	Returns a list of services to use .
6765	Delete an object from a bucket .
6766	Delete an object from the bucket .
6767	Destroy an instance .
6768	Returns a list of subparsers for the given parser .
6769	Generate a descriptor and a list of numbers .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a tar archive .
6773	Get the hash of a file .
6774	Read the contents of a file .
6775	Read data from a JSON file .
6776	Clean up a list of files .
6777	Push an image to Sregistry .
6778	Get or create a collection by name .
6779	Get a collection by name .
6780	Get a container .
6781	Returns a list of images matching the given query .
6782	Inspect a container .
6783	Rename an image .
6784	Move an image to a new location .
6785	Remove an image from the container .
6786	Add an image to the registry .
6787	Push an image to the server .
6788	Parse the header of a recipe .
6789	Find a single recipe for a given file .
6790	Create a build package from a list of package files .
6791	Run a CYAN build .
6792	Update the metadata for a blob
6793	Format a container name .
6794	Returns True if the user prefers to use color .
6795	Emits an error message .
6796	Write a message to a stream .
6797	Create a table from a list of rows .
6798	Push an image to a remote endpoint .
6799	Get a template by name .
6800	Get the manifest for a given image .
6801	Get a single build template .
6802	Update client secrets .
6803	Return a string representation of a class .
6804	Raise S3 errors for a given path .
6805	Create a proxy for a temporary file .
6806	Return the gravatar url for the given user or email .
6807	Returns the Gravatar url for the given email .
6808	Check if email has a Gravatar .
6809	Returns the url for a Gravatar profile .
6810	Yield chimera blocks .
6811	Calculate the Chimera block quotient .
6812	Enumerate the resonance smiles .
6813	Enumerate mol .
6814	Normalize a molecule .
6815	Apply a transform to a molecule .
6816	Compute the canonicalization of a molecule .
6817	Validate a list of smiles .
6818	Disconnect from a metal detector .
6819	Convert smiles to a Chem . Mol .
6820	Enumerate tautomers using smiles .
6821	Convert a smiles molecule to a smiles molecule .
6822	Standardize a molecule .
6823	Return the parent tautomer of the given molecule .
6824	Returns the parent fragment of the given molecule .
6825	Return a copy of this Molecule as a stereo parent .
6826	Returns the parent isotope of the given molecule .
6827	Return the charge of the parent molecule .
6828	Return a new Molecule that is the parent of this Molecule .
6829	Main entry point for Molvs .
6830	Remove a fragment from the molecule .
6831	Choose the largest fragment of a molecule .
6832	Integrate ivp data .
6833	Get stats from github .
6834	Get the list of members of the organization .
6835	Returns the number of teams in the org .
6836	Get a list of repos .
6837	Returns the total contributors for the given repo .
6838	Returns the open and closed pull requests for the given repo .
6839	Get all issues in a repository .
6840	Get the readme for the given repo .
6841	Get the license for the given repo .
6842	Get all commits for a given repository .
6843	Write a github - data . json file to disk .
6844	Write the totals to a file .
6845	Write the list of languages to a file .
6846	Check if a directory exists .
6847	Remove a date from a CSV file .
6848	Returns a list of github organizations .
6849	Create a GitHub Enterprise session .
6850	Check if api_required is exceeded .
6851	Connect to a GitHub server .
6852	Query the repositories of an organization .
6853	Get the organization .
6854	Write the stargazers to a file .
6855	Create a project from a gitlab repository .
6856	Convert a doecode record to a python object .
6857	Create a license object .
6858	Get the traffic for all repositories .
6859	Get a list of releases for a repository .
6860	Returns a list of referrers for the given url and headers .
6861	Get traffic data from the API .
6862	Write a github - data dictionary to a file .
6863	Writes the list of clones to a file .
6864	Check for data redundancy .
6865	Write data to a file .
6866	Write the referrers to a file .
6867	Process a DOE CODE json file .
6868	Process a DOE CODE URL and return a list of records .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get the email addresses of the members of the organization .
6872	Write all logins to a file .
6873	Connect to a stashy server .
6874	Connect to Gitlab .
6875	Query Github repositories .
6876	Convert a git repo to a sloc .
6877	Compute labor hours for a given sloc .
6878	Removes null values from a dictionary .
6879	Read a GQL file .
6880	Query GitHub from a file .
6881	Submit a git query to the github API .
6882	Wait for the current UTC timestamp to be reset .
6883	Prints a countdown to the user .
6884	Load data from a file .
6885	Save data to a file .
6886	Create a TFS connection .
6887	Create a TFS Enterprise project analysis client .
6888	Create a TFS core client .
6889	Create a TFS Git Client .
6890	Create a TFS Git Client .
6891	Get a list of repositories for a project .
6892	Get a list of Tfvc Branches for a project .
6893	Get the number of commits for a given year .
6894	Calculate the total commits for a given week .
6895	Write the last year commits to a file .
6896	Configure the backends .
6897	Returns a MetricsInterface for the given thing .
6898	Returns the timing of a given stat .
6899	Generate a timer for the given stat .
6900	Decorator to register a timer function .
6901	Generate a tag for a given key .
6902	Log timing information .
6903	Log a histogram .
6904	Calculate the next rollup .
6905	Order an enumeration .
6906	Create a new Enum object from a DB value .
6907	Convert a value to a python object .
6908	Get a pre - defined value .
6909	Resolve a path .
6910	Project USLs on a dictionary .
6911	Returns the mean of all values .
6912	Mark the current rate as 1 .
6913	Returns the mean rate of the elapsed time .
6914	Mark a value .
6915	Send a metric to the server .
6916	Serialize a metric .
6917	Format a metric string .
6918	Send a metric in a buffer .
6919	Get a setting from the specified section and option .
6920	Convert JSON data to UTF - 8 .
6921	Get or set the value of an option in a section .
6922	Get the map from a list of ledger codes to a list of ledger IDs .
6923	Returns the code and description of the current division .
6924	Maps exact to foreign invoice numbers .
6925	Solve a sudoku grid .
6926	Create a view handler and return it .
6927	Create a form view handler and return it .
6928	Creates a method view and returns it .
6929	Create an APIView handler and return it .
6930	Generate a generic API view .
6931	Create a model view set handler .
6932	Read a file descriptor from a file descriptor .
6933	Wait for the file descriptor to be read .
6934	Close the connection to the server .
6935	Called when the connection was lost .
6936	Setup a watch request .
6937	Remove a watch from the descriptors .
6938	Setup a watch on an alias .
6939	Setup the aitools stream and transport .
6940	Get an event from the stream .
6941	Handle a touch event .
6942	Returns True if the test was successful otherwise False .
6943	Called when a failure occurs .
6944	Close the connection to the server .
6945	Returns True if the network is starved .
6946	Connect to an NSQD server .
6947	Parse the lookupd query .
6948	Sets the max_in_flight of the connection .
6949	Called when a message is giving up .
6950	Add a callback to a listener .
6951	Remove a callback from a listener .
6952	Trigger a list of listeners .
6953	Publish a message to a topic .
6954	Sets the feature transform .
6955	Returns the prediction for the given input data .
6956	Return theta of a string s .
6957	Parse a log file .
6958	Remove temporary fastq files .
6959	Merge default adapters into a single file .
6960	Run trimmomatic .
6961	Reads a depth file .
6962	Load plasmid length from json file .
6963	Sets the template path .
6964	Set the names of the main channels .
6965	Get a user s channel .
6966	Render a template into a jinja2 environment .
6967	Render the template as a string .
6968	Set the channels for this lane .
6969	Update the main forks .
6970	Set a secondary channel for a source .
6971	Updates the attributes of this component .
6972	Sets the number of compiler channels in the pipeline .
6973	Set the raw inputs .
6974	Set the secondary inputs for a channel .
6975	Set the extra inputs for a channel .
6976	Parse coverage header .
6977	Parse an assembly file .
6978	Get the GC content of a sequence .
6979	Filter contigs based on comparisons .
6980	Returns the total length of the assembly .
6981	Write the filtered assembly into a file .
6982	Write the assembly report to a file .
6983	Removes all forks from a string .
6984	Internal fork insanity checks .
6985	Return a list of insanity checks for a pipeline .
6986	Parse a pipeline string .
6987	Get the source lane from a list of pipelines .
6988	Return a list of lanes from a string .
6989	Establish a linear connection with a list of processes .
6990	Fork a connection from source to sink .
6991	Add unique identifiers to a pipeline string .
6992	Remove unique identifiers from pipeline links .
6993	Raise an InspectionError if the required files do not exist .
6994	Return a dict mapping headers to tuples .
6995	Return the human - readable version of a string .
6996	Returns the size of a file - like object .
6997	Get pipeline processes from the log file .
6998	Clear all trace information .
6999	Update the status of the barrier .
7000	Retrieve a log file if it exists .
7001	Assert that the resource warnings are valid .
7002	Update the status of all processes .
7003	Parse the log file .
7004	Update the inspection .
7005	Display an overview of the current flow .
7006	Move the cursor up or down .
7007	Right - left padding .
7008	Get the last 300 lines from the log file .
7009	Prepare the static information for the pipeline .
7010	Convert a . treeDag . json file to a dictionary .
7011	Returns the md5 hash of the run .
7012	Get the path of the nextflow . log file .
7013	Main entry point for the script .
7014	Main entry point for the pipeline .
7015	Brew an innuendo .
7016	Create a brew recipe from a recipe name .
7017	List all available recipes .
7018	Validate a pipeline string .
7019	Build an upstream pipeline .
7020	Build the downstream pipeline for a given task .
7021	Define a pipeline string .
7022	Runs the pipeline for the given tasks .
7023	Return a string representation of a component .
7024	Write a report to a file .
7025	Parse log files and write a report .
7026	Fix contig names in asseembly . fa
7027	Remove temporary fastq files .
7028	Parse a list of files .
7029	Parse a log file .
7030	Iterate over a set of filters .
7031	Get the contig id from a string .
7032	Returns a dictionary containing the plot data .
7033	Writes the report data to a JSON file
7034	Get summary statistics for an assembly .
7035	Parse an assembly file .
7036	Get the summary stats for each contig .
7037	Return a list of labels for the given window .
7038	Compute the GCC property of a string .
7039	Returns a list of sequences that have a sliding window .
7040	Run the skesa subprocess .
7041	Write a report in JSON format .
7042	Returns the index of a list of biased values .
7043	Trim a range of nucleotides from a file .
7044	Returns the optimal 5trim and optimal 3trim of p1_data .
7045	Get summary information from a file .
7046	Check the health of a summary file .
7047	Parse a bowtie log file .
7048	Parse a process name string .
7049	Add a dependency to a process .
7050	Returns True if the tree is backwards from the given template .
7051	Build the header .
7052	Build the header and footer .
7053	Set main channels .
7054	Sets up the init process .
7055	Sets the secondary channels .
7056	Set the status_strs and report_strs of the processes .
7057	Convert a resource dictionary into a string .
7058	Return a string representation of a container .
7059	Returns a string representation of the parameters .
7060	Return a string representation of the merged parameters .
7061	Returns a string representation of the main script .
7062	Set configurations .
7063	Write a treeDag to a file .
7064	Render the pipeline .
7065	Write the configs to a file .
7066	Export parameters to stdout .
7067	Export directives to stdout .
7068	Fetches the container tags from the terminal .
7069	Build the pipeline .
7070	Set Kmer range based on max read length .
7071	Main entry point for spades .
7072	Get the id of the next flow report .
7073	Update the trace_watch .
7074	Update the size of the log file .
7075	Send a live report to the server .
7076	Initialize live reports .
7077	Close the connection and send a DELETE request .
7078	Convert a fastqc adapters file to a fastqc adapters file .
7079	Run fastqc .
7080	Sends the mash_output to the output file .
7081	mash_output - mash_dist - mash_cutoff - mash_dist - mash_cutoff - mash_cutoff - mash_cutoff - mash_cutoff - mash_dist - mash_cutoff - mash_cutoff - mash_cutoff - mash_cutoff - mash_cutoff - mash_file - mash_file -
7082	Returns a list of dicts containing the current version of the template .
7083	Read a mash file and generate a dictionary and a list to pre - process the final json
7084	Print a message as a colored string .
7085	Parse a process dict .
7086	Create a ProcessCollector from a process map .
7087	Guess the compression type of a file .
7088	Returns the minimum and maximum value of a qual string .
7089	Return valid encodings and phreds in a range .
7090	Parse a coverage table from a file .
7091	Filter an assembly file based on minimum coverage and coverage info .
7092	Filter a BAM file based on coverage information .
7093	Evaluate minimum assembly coverage .
7094	Get the assembly size and contig size from a file .
7095	Run assembly mapping processing .
7096	Convert a CamelCase string to a lowercase string .
7097	Collect a process map from pkgutil .
7098	Process a newick file .
7099	Quick hull of a sample .
7100	Maps the W coordinates to the data .
7101	Apply a median filter to X .
7102	Compute the gaussian krnl of a signal .
7103	Compute the SSM of X .
7104	Computes the numpy . ndarray between X and G .
7105	Apply a gaussian filter to X .
7106	Compute the numpy . ndarray of X .
7107	Returns the circular shift of X .
7108	Compute the embedded space of a matrix .
7109	Plot the formatting of the output file .
7110	Plot all boundaries .
7111	Plot all labels .
7112	Plot a single track .
7113	Plot a tree .
7114	Returns a list of feat segments for the given feature dimensions .
7115	Convert a list of feat_segments to a list of 2dfmcs .
7116	Compute the similarity of a set of matrices .
7117	Fit the model to X Y .
7118	Fit the model to X and Y .
7119	Load the references from an audio file .
7120	Find the estimate for the given parameters .
7121	Save estimates to a file .
7122	Returns a list of all boundary algorithms .
7123	Given a feature and annot_beats return a configuration dictionary .
7124	Returns a list of dataset files in a given path .
7125	Read hierarchical references from a jams file .
7126	Get the duration of a feature file .
7127	Write msaf intervals to a file .
7128	Return the path to the dataset file .
7129	Align the segments of a song .
7130	Estimate the number of beats .
7131	Read annotated beats from the JAMS file .
7132	Compute the beat sync features .
7133	Read the features from the file .
7134	Write features to a JSON file .
7135	Returns a list of all parameter names .
7136	Compute frames sync times .
7137	Returns a list of frame times for this feature .
7138	Compute and write the features of the audio file .
7139	Select a feature from the features registry .
7140	Preprocess the MSAF feature string .
7141	Post - process a list of indices .
7142	Runs the MSAF formatted dataset .
7143	Print the results to stdout
7144	Compute gt results from a gt file .
7145	Compute the information gain .
7146	Process a track .
7147	Get the name of the results file .
7148	Process a msaf file .
7149	Add a config variable .
7150	Compute all features for a given audio file .
7151	Process a dataset file .
7152	Return the gaussian cost of X .
7153	Compute the lognormalization of a function .
7154	Normalize a function to a minimum and maximum value .
7155	Normalize X to norm_type .
7156	Returns the number of frames in a time series .
7157	Remove empty segments from times and labels .
7158	Sonify clicks .
7159	Synchronize two sets of labels .
7160	Process the segmentation level .
7161	Align the ends of two hierarchies .
7162	Compute the distance to node at idx .
7163	Estimate the K - k - knee .
7164	Returns clustered data .
7165	Run K - Means .
7166	Compute the Bias - Laplacian distance .
7167	Compute the magnitude of X .
7168	Convert a JSON file to a numpy array of bounds .
7169	Convert a JSON bounds file to a numpy array .
7170	Convert a json file to a list of labels .
7171	Convert a JSON file to a list of beats .
7172	Compute the ffmc2d of X .
7173	Computes the labels of X based on rank and R .
7174	Filter activation matrix .
7175	Get a bounding module by its id .
7176	Returns the module for the given labels_id .
7177	Run a hierarchical segmentation .
7178	Process a flat file - like object .
7179	Run a set of algorithms on the audio file .
7180	Process a track .
7181	Process a msaf file .
7182	Updates the beta and beta of the model .
7183	Main entry point for the translator .
7184	Decorator for coroutines .
7185	Returns the accumulator of init and update .
7186	Set a translation task .
7187	Spool an iterable .
7188	Return the source code for the given target .
7189	Decorator to push a URL to an interface .
7190	Translate a phrase from source to target .
7191	Return a translation table for a given language .
7192	Print the translation table for a given language .
7193	Remove nodes from a network .
7194	Convert a Pandas network to an HDF5 file .
7195	Create a network from a Pandas HDF5 file .
7196	Set node_ids to variable .
7197	Returns a pd . Series with the aggregated variables at the given distance .
7198	Get node ids from x_col y_col
7199	Plot a scatter plot .
7200	Sets the POI for a given category .
7201	Find the nearest pois in a category .
7202	Return the low - connectivity nodes .
7203	Process a node .
7204	Make an osm query .
7205	Build a query for a node .
7206	Returns a DataFrame of nodes matching the OSM query .
7207	Check if a value is a regular expression .
7208	Compare two values .
7209	Decorate a function to be fluent .
7210	Compare an expression with a value .
7211	Trigger a list of methods for the given instance .
7212	Return True if the request matches one of the specified matchers .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the _body attribute .
7216	Serialize data to a JSON formatted string .
7217	Set the value of a key in the container .
7218	Append a list of functions or methods to the target .
7219	Trigger a request .
7220	Add a URL matcher to the request .
7221	Add headers to the request .
7222	Ensure headers are present .
7223	Ensure headers are present .
7224	Sets the content - type of the request .
7225	Add params to the request .
7226	Add a body matcher to the request .
7227	Add a JSONMatcher to the request .
7228	Add an XMLMatcher to the request .
7229	Read the file at path .
7230	Persist the object .
7231	Set a RuntimeError .
7232	Send a reply to the client .
7233	Matches a request object to this mock .
7234	Activate a function asynchronously .
7235	Set the mock engine .
7236	Enable or disable networking for a list of hostnames .
7237	Create a mock .
7238	Remove a mock .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Returns True if the request should use the network filter .
7242	Return True if the request matches any of the filters .
7243	Return a copy of this request .
7244	Activate a function .
7245	Activate or disable an engine .
7246	Add an interceptor to the engine .
7247	Remove an interceptor from the list of interceptors .
7248	Returns the value of a key in the settings dictionary .
7249	Returns the decrypted column as a SQL .
7250	Pre - save the hash .
7251	Get a placeholder for the given value .
7252	Returns the column with the given alias .
7253	Get a PGP key from the database .
7254	hunt yaml keys in a YAML file
7255	Compute the base regression of a Q - matrix .
7256	Returns the cinv of the tree .
7257	Recursively recurse the tree .
7258	Calculate the averages of the tree .
7259	Propagate the averages .
7260	Returns the explained variation of the tree .
7261	Computes the r - val of the model .
7262	Find the best root of the tree .
7263	Set Tc values and Timepoints of equal length
7264	Calculate the number of branches in the tree .
7265	Returns the cost of merging a branch .
7266	Attach all clades to the tree .
7267	Optimize coalescent time scale .
7268	Convert a profile to a sequence .
7269	Normalize a profile .
7270	Sets the GTR of this site .
7271	Set GTR model in TreeAnc class
7272	Sets the sequence length of the tree .
7273	Attach sequences to nodes .
7274	Prepare the tree .
7275	Prepare the nodes in the tree .
7276	Calculate the dist2root of the tree .
7277	Reconstruct the ancestral sequences .
7278	Returns the mutation matrix of a branch .
7279	Returns the expanded sequence of the given node .
7280	Walk up the tree and create the Fitch profiles
7281	Given a node and a position return a fuzzy state .
7282	Return a pairwise intersection of two arrays .
7283	Returns the LH of a sequence .
7284	Returns the ancestral likelihood of the tree .
7285	Returns the maximum branch length for a given node .
7286	Optimize the branch length .
7287	Run branch length optimization on the global tree .
7288	Returns the optimal branch length for the given node .
7289	Optimize sequences and branch length .
7290	Get the reconstructed alignment for this tree .
7291	Compute the Q axis .
7292	Creates a custom graph with the given parameters .
7293	Return a standard JC69 K80 HKY85 T92 TN93
7294	Check if we can fix the diagonal of the Q .
7295	Compute the prob - t of a seq_pair .
7296	Compute the optimal time between two sequences .
7297	Compute the optimal t for the given seq_pair .
7298	Computes the probability of a t - profile for the given multiplicity .
7299	Compute the evolution of a profile at a given time .
7300	Return the log - likelihood of a sequence .
7301	Set the branch length mode .
7302	Returns a clock filter .
7303	Plots the root to the tip of the tree .
7304	Resolve all polytomies in the tree .
7305	Print the tree log - likelihood .
7306	Add coalescent prior .
7307	Find the best root position in the tree .
7308	Ensure that a tree exists .
7309	Create a GTR from a list of parameters .
7310	Read a VCF file if it exists .
7311	Reconstruction of an ancestral tree .
7312	Calculate the FWHM for the given distribution .
7313	Return the delta function at x_pos .
7314	Multiply a set of distributions .
7315	Assign dates to nodes in the tree .
7316	Setup the tree regression .
7317	Create a maximum likelihood tree with temporal constraints .
7318	Returns the time tree likelihood .
7319	Convert a clock tree to a list of datetime objects .
7320	Calculate the date uncertainty due to rate .
7321	Get the maximum posterior region of a node .
7322	Return the minimum of the interpolation object .
7323	Compute the median interpolation of a grid .
7324	Convert a datetime object to a numeric datetime object .
7325	Create a DC object from a regression model .
7326	Connect to the guacd server .
7327	Close the connection to the server .
7328	Receive an instruction from the server .
7329	Send data to the server .
7330	Send an instruction to the server .
7331	Start a guacamole handshake .
7332	Convert unicode string to UTF - 8 .
7333	Load an instruction .
7334	Encode an argument into a string .
7335	Encode the instruction .
7336	Returns the url for a class .
7337	Returns the URL to request for this instance .
7338	Returns the url for a class .
7339	Download a file or directory .
7340	Returns the parent object of this job .
7341	Ask SolveBio for credentials .
7342	Login to solvebio .
7343	Check if the user is logged in .
7344	Print a message to the user .
7345	Return a new Filter object with the given filters .
7346	Return a clone of this GenomicFilter .
7347	Return a clone of the chromosome at the given position .
7348	Returns a dict of facets .
7349	Process a list of filters .
7350	Return the next page in the iterator .
7351	Execute a query .
7352	Migrate a Dataset to another Dataset .
7353	Main entry point for SolveBio .
7354	Download all files from remote_path to local_path .
7355	Construct an instance from a list of values .
7356	Logout from OAuth2 .
7357	Make a request to the API .
7358	Returns the child object of this task .
7359	Cancel the job .
7360	Parse the SNPEFF info dict .
7361	Convert a row to a dictionary .
7362	Returns a list of credentials .
7363	Save the configuration to a file .
7364	Format a value .
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Format a table .
7370	Migrate a Dataset to another Dataset .
7371	Validate a full path .
7372	Upload a file to a remote repository .
7373	Validate a full path .
7374	Validate the SolveBio API host URL .
7375	Add a file or directory .
7376	Annotate a list of records .
7377	Evaluate the expression .
7378	Sets the format name .
7379	Register a new output format handler .
7380	Formats the input data using a preprocessor .
7381	Return an iterator over the headers .
7382	Return the user s config directory .
7383	r Return a list of system config directories .
7384	Reads the default config file .
7385	Read all config files .
7386	Returns the path to the user config file .
7387	Returns a list of system config files for this application .
7388	Return a list of all files in the additional_dirs .
7389	Write the default config file .
7390	Read a list of config files .
7391	Truncate a string .
7392	Replace a string with a new string .
7393	Call a list of commands in the sequence .
7394	Apply options to a command .
7395	Apply an option to a command .
7396	Initialize the options .
7397	Run pep8radius .
7398	Run all the commands in the script .
7399	Truncate a string .
7400	Format the data and headers according to the given format .
7401	Return a string representation of a row .
7402	Create a vertical table .
7403	Generate a table from a list of headers .
7404	Render a template file .
7405	Returns True if the given type is a numeric value .
7406	Returns True if the given type is a pool .
7407	Returns True if the given type is a binary type .
7408	Generate a Key object from a template .
7409	Generates a key pair .
7410	Returns a list of objects matching the template .
7411	Insert an image .
7412	Export a gene panel .
7413	Returns the first day of the week .
7414	Count the number of times a day repeats itself .
7415	Count the number of times a date is repeated .
7416	Helper function for biweekly count .
7417	Handle a single chunk event .
7418	Export a list of variants .
7419	Export a list of verified variants .
7420	Export variants to MT format .
7421	Add a role to a user .
7422	Return a list of variants for a given institute and case .
7423	Returns a variant object for a given variant .
7424	Returns a string representation of a variant .
7425	Verify a variant .
7426	Redirect to cases . clinvar_submissions
7427	Returns a list of cancer variants in a case .
7428	Post a variant acmg .
7429	Get an evaluation for the given evaluation_id .
7430	Returns the acmg for the given criteria .
7431	Upload a panel to the institute .
7432	Download a verified Excel file .
7433	Returns a dict mapping hgnc_id to true_id
7434	Add incomplete penetrance info to genes .
7435	Link genes from ensembl hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc hgnc ex
7436	Send a request to a matchmaker url .
7437	Get a list of nodes connected to a matchmaker .
7438	Get the cytoband coordinates for a given position .
7439	Return a subcategory for a given category .
7440	Get the length of a file .
7441	Get the end of a list .
7442	Parse the coordinates of a variant .
7443	Check some coordinates .
7444	Returns a redirect to the panel controllers page .
7445	Update a panel .
7446	Export a panel to a PDF .
7447	Edit a gene .
7448	Load a delivery report .
7449	Return a list of hpo phenotypes .
7450	Run scout view users
7451	Build a phenotype object for the given phenotype_id .
7452	Return a Gene object for the given hgnc_id
7453	Convert a list of genes to a dictionary .
7454	Return a list of all accessible institutes .
7455	Run scout view of transcripts .
7456	Display a list of events for the given day .
7457	Return a list of variants matching the variants query .
7458	Returns a list of variants matching the variants query .
7459	Returns a string representation of a variant .
7460	Create a SV variant .
7461	Parse a variant .
7462	Returns a header for exporting variants .
7463	Get variant information from a list of genes .
7464	Get predictions for a set of genes .
7465	Create a variant case .
7466	Find a bai file .
7467	Get observations for a given case and variant .
7468	Parse a gene object .
7469	Return a string representation of a transcript .
7470	Return the end position of a variant .
7471	Return the frequency of a variant .
7472	Return a human readable version of a clinsig variant .
7473	Return a link to a thousandg variant .
7474	Return a link to a cosmic variant .
7475	Generate a beacon link for a variant .
7476	Generate a link to a UCS variant .
7477	Return a human - readable representation of a variant .
7478	Return expected inheritance of a variant .
7479	Returns a list of callers for a given variant object .
7480	Return a list of variants for a given cancer case .
7481	Exports a CLIN variant .
7482	Get the submission for a clinvar .
7483	Returns an acmg dictionary for a variant .
7484	Post a variant acmg .
7485	Returns an evaluation object .
7486	Upload HGNC symbols to a file .
7487	Creates a verified excel file .
7488	Export all genes to . bed format .
7489	Parse a CLN signature .
7490	Parse a list of compounds .
7491	Export scout genes .
7492	Build an individual with the given id .
7493	Load variants from scout .
7494	Create a case for an institute .
7495	Run scout view collections
7496	Create a new institute .
7497	Update an institute .
7498	Get the file handle for a given file path .
7499	Get the net for a given request .
7500	Get the next and previous value of a net .
7501	Check if the given year month and error are valid .
7502	Check if a date is a weekday .
7503	Parse case data .
7504	Add Peddy information to the config file .
7505	Parse an individual from a Pedigree .
7506	Parse individuals from a list of samples .
7507	Parse a case configuration .
7508	Parse a PED file .
7509	Build an evaluation for a given variant .
7510	export mitochondrial variants for a scout case
7511	Returns True if pvs is pathogenic .
7512	Returns True if pvs is likely to be pathogenic .
7513	Check if bs and bp terms are likely to be benign .
7514	Get acmg predictions from a list of terms .
7515	Add gene information to a variant object .
7516	Fetch variants from a case .
7517	Get variants for a given institute or case .
7518	Return a variant for a given document .
7519	Generate a list of gene variants .
7520	Check if an institute has been validated .
7521	Get causals for a case .
7522	Checks if the variants are valid for the given case and institute .
7523	Yields the Causatives associated with the given variant .
7524	Delete variants for a case .
7525	Returns a list of variants that are overlapping .
7526	Returns a list of variants that have been evaluated .
7527	Get a VCF file for a specific region .
7528	Retrieve a sample of variants for a given subject .
7529	Get a connection to the MongoDB server .
7530	Given a list of variant ids and a list of submission fields return a list of submission objects .
7531	Returns a CLINVAR_HEADER for each submission object .
7532	Given a list of submission objects return a list of submission lines .
7533	Load a list of transcripts .
7534	Load the OMIM gene panel .
7535	Build an exon from a chromosome .
7536	Delete a panel .
7537	Delete all indexes in the database .
7538	Delete a user from the database
7539	Delete genes from scout .
7540	Delete exons from a build .
7541	Delete a case .
7542	Retrieve individuals from a scout .
7543	Parse a list of MatchMaker objects .
7544	Show a list of cases .
7545	Load a LoginUser object from a user email .
7546	Logs a user into Google .
7547	Build an institute object .
7548	Delete an event .
7549	Create a new event .
7550	Fetch all events for a given variant .
7551	Returns a list of events associated with a user .
7552	Add a phenotype to a case .
7553	Remove a HPO term from a case .
7554	Create an event for a comment on a variant .
7555	Parse genotypes from a list of individuals .
7556	Check if a chromosome has the given coordinates .
7557	Return the hpo terms .
7558	Export scout transcripts .
7559	Load exons from a build .
7560	Load a region .
7561	Get all events for a given month in a given year .
7562	Returns a list of all objects that are currently live .
7563	Parse requirements . txt file .
7564	Get an existing gene .
7565	Update a gene panel .
7566	Create a new gene panel .
7567	Export a panel to the store .
7568	Return information about an archive case .
7569	Migrate scout case to archive_data .
7570	Migrate a case from one archive to another .
7571	Run scout load research .
7572	Load hgnc genes from omim api .
7573	Run scout view hpo
7574	Create a Flask application .
7575	Configure the extensions for the application .
7576	Register blueprints .
7577	Configure the coverage .
7578	Run scout view aliases
7579	Build a panel .
7580	Exports the verified variants for the given collaborator .
7581	Export variants to scout .
7582	Get a vcf entry for a variant .
7583	Serve a MongoDB server .
7584	Generate a MD5 key from a list of arguments .
7585	Initialize the MONGO database .
7586	Setup the database .
7587	Run scout index .
7588	Setup scout database .
7589	Setup scout .
7590	Setup scout - demo
7591	Get a list of institutes .
7592	Parse genetic models .
7593	Run scout view panels
7594	Add an institute to the database .
7595	Update an institute .
7596	Fetch an institute by its Id .
7597	Returns True if the given date matches the given date .
7598	Convert a datetime object to a datetime object
7599	Generate a list of hpo genes .
7600	Parse a rank score entry .
7601	Add a user to an institute .
7602	Test a connection to a MongoDB server
7603	Initialize a MONGO application .
7604	Load a delivery report .
7605	Add a user to the database .
7606	Pileup vcf and bai files .
7607	Load exons from ensembl transcripts .
7608	Update the compounds of a case .
7609	Add links to a gene object .
7610	Generate a hgnc gene .
7611	Parse an hgnc line .
7612	Parse a list of hgnc genes .
7613	Get an open clinvar submission for a user and institute .
7614	Updates a clinvar submission .
7615	Returns the clinvar_subm_id for the given submission_id
7616	Add new variants and case data to a submission .
7617	Update status of a clinvar submission .
7618	Retrieve all clinvar submissions for a user and institute .
7619	Delete a clinvar object .
7620	Convert a case to clinVars .
7621	Parse an hpo - obo file into a dictionary .
7622	Returns a dict of all genes .
7623	Return a list of controller genes .
7624	Returns a list of all genes in the API .
7625	Check if a panel exists in the database .
7626	Load clinical SNV variants from the database .
7627	Load a scout case .
7628	Decorator to mark a function as templated .
7629	Find an institute and case .
7630	Returns a list of institutes associated with a login user .
7631	Get the hgnc_id of a gene .
7632	Update a panel .
7633	Load disease terms from the omim gene panel .
7634	Load the hpo_diseases from genemap_lines .
7635	Parse the frequencies from a variant and transcripts .
7636	Parse the frequency of a variant .
7637	Parse variant frequency information .
7638	Run scout view users
7639	Build a hgnc gene .
7640	Load a panel from a parsed panel .
7641	Load an OMIM panel from the database .
7642	Compare two MIM panels .
7643	Update MIM version for new genes .
7644	Add a gene panel to the database .
7645	Get a panel by its Id .
7646	Delete a panel .
7647	Fetch a gene panel .
7648	Returns a list of gene panels .
7649	Converts a case object to a list of panels .
7650	Update a panel .
7651	Add a pending action to a panel .
7652	Apply pending updates to a panel .
7653	Returns a set of clinical symbols for a case .
7654	Returns a list of cases .
7655	Emit a SMTP record .
7656	Load indexes from the database .
7657	Update the indexes in the database .
7658	Drop all indexes
7659	Build a MongoDB variant query .
7660	Build a MongoDB query .
7661	Add CLINSIG filter with trusted_revision_level
7662	Add genomic coordinates to the query
7663	Add panel and genes - related parameters to the query
7664	Wipe the entire database .
7665	Parse a panel from a CSV file .
7666	Build clnsig object from clnsig_info .
7667	Load a gene bulk .
7668	Loads a list of transcript objects into the collection .
7669	Loads a list of transcript objects from the exon collection .
7670	Fetch a gene by hgnc_identifier
7671	Return the hgnc_id for the given hgnc_symbol .
7672	Fetch genes with hgnc_symbol
7673	Fetch all genes .
7674	Returns the number of genes in a given build .
7675	Drop all genes from the collection .
7676	Drop the transcripts collection .
7677	Drop the exons collection .
7678	Fetch all ensembl transcripts
7679	Convert hgnc_symbol_to_gene .
7680	Get a gene by alias .
7681	Fetch all genes by alias
7682	Fetch all ensembl genes .
7683	Convert a hgnc alias to a hgnc gene .
7684	Add an hgnc id to scout .
7685	Get the coding intervals for the given genes .
7686	Update the omim gene panel .
7687	Get all cases for a given institute .
7688	Create a case for an institute .
7689	Check if a case matches a matchmaker .
7690	Matches a case with a matchmaker .
7691	Delete a matchmaker case .
7692	Create a case report for a given case .
7693	Download a pdf of a case report .
7694	Return a link to diagnose a case .
7695	Get a list of phenotypes for a given case .
7696	List actions for phenotypes .
7697	List events for a given case .
7698	Get the status of a case .
7699	Assign a case to an institute .
7700	Return a list of hpoterms
7701	Mark a validation request .
7702	Mark a variant as causal .
7703	Get the delivery report for a case .
7704	Share a case with an institute .
7705	Rerun a case .
7706	Opens a case for a given institute .
7707	Convert a VCF to a cytosure file .
7708	Send a multiqc request to the controllers .
7709	Returns a list of all cases in case_query .
7710	Returns the case report content .
7711	Generate coverage report content .
7712	Return a list of submissions for a given user and institute .
7713	Returns a list of Excel files for a case .
7714	Update a synopsis for a case .
7715	Get a list of hpo_ids .
7716	Convert a VCF to cytosure .
7717	Creates a multiqc object for a given case .
7718	Get the unevaluated variants for a given institute and user .
7719	Add a patient to a Matchmaker store .
7720	Delete a case .
7721	Matches a case with a given mme token .
7722	Matches a MME case .
7723	Run scout update genes .
7724	Parse the callers of a variant .
7725	Build a transcript .
7726	Load an institute into the database .
7727	Parse a CADD entry for a variant .
7728	Parse case data .
7729	Update a variant .
7730	Update the variant rank for a case .
7731	Update a variant s compounds .
7732	Update compound objects for the given variants .
7733	Update mongo compound variants .
7734	Update the case compounds for a given case object .
7735	Load a variant from the database .
7736	Inserts a new variant in the database .
7737	Load variants in bulk .
7738	Create an event to assign a case to a user .
7739	Share a case with a collaborator .
7740	Diagnose a case .
7741	Mark a case as checked .
7742	Create an event for ordering validation for a variant
7743	Return a list of sanger events that match the given criteria .
7744	Validate a variant .
7745	Mark a case as causative .
7746	Create an event for updating dismiss variant .
7747	Update a variant s acmg .
7748	Parse a list of ids .
7749	Parse a simple id .
7750	Parse a document id .
7751	Convert a panel to hgnc id .
7752	Get a variantantid from a variant object .
7753	Returns the number of cases in the case collection .
7754	Update the dynamic gene list .
7755	Fetches a single case .
7756	Delete a case .
7757	Add a case to the database .
7758	Replace a case in the case collection .
7759	Update a Caseid case .
7760	Submit an evaluation for a given variant .
7761	Get the evaluations for a variant .
7762	Parse ensembl transcripts .
7763	Parse an Ensembl gene request .
7764	Parse an Ensembl transcript request .
7765	Parse an Ensembl line .
7766	Parse ensembl genes from a file .
7767	Parse ensembl exons .
7768	Parse an Ensembl exon request .
7769	Initialize a logger .
7770	Parse an omim line .
7771	Parse OMIM morbid lines .
7772	Get a set of phenotypes from a genemap .
7773	Context manager for mim2gene and mim2gene .
7774	Convert a string to a number .
7775	Format a month in a calendar .
7776	Formats a day and weekday .
7777	Format the month name .
7778	Helper function for popovers .
7779	Get information about a panel .
7780	Parse a gene identifier .
7781	Parse a list of gene lines .
7782	Parse a gene panel .
7783	Run scout view diseases
7784	Run scout update hpo
7785	Returns a dict of all users in the store .
7786	Parse dbNSFP_GERP_RS and dbNSFP_phylop .
7787	Parse a variant s conservation score .
7788	Returns a dictionary of information about a general case .
7789	Returns a list of case groups .
7790	Render the context to a JSON response .
7791	Get the year and month for a given queryset .
7792	Check for cancelled events .
7793	Fetch an hpo term .
7794	Return a list of hpo terms .
7795	Returns the term associated with a given disease .
7796	Returns a list of all disease terms .
7797	Load a disease term into the database .
7798	Generate a list of genes for the given hpo_terms .
7799	Read an HDF5 file .
7800	Sets up the frequency ranges .
7801	Sets up the time axis .
7802	Read the filterbank from a file .
7803	Compute the LST of the telescope .
7804	Blank a DC bin .
7805	Prints out information about the device .
7806	Calculate the extent of a plot .
7807	Plot a waterfall .
7808	Plot a time series .
7809	Write the sigproc header to a file .
7810	Calculate the N1 band - pass .
7811	Convert a numpy array to a coarse array .
7812	Apply Kullback reshaping to I Q U and V .
7813	Calculate the Mueller Matrix variables .
7814	Calculate the fracpols of a string .
7815	Write a waterfall to a file .
7816	Returns the array with the closest value to xarr .
7817	Re - bin a DataFrame .
7818	Unpack an 8 - bit integer into an 8 - bit integer .
7819	Returns the difference between a waterfall and a waterfall .
7820	Plot a diode of stokes .
7821	Plot a calibrated diode .
7822	Plots the gain offsets of a diode .
7823	Open a file and return an H5Reader .
7824	Sets up the selection range .
7825	Calculate the selection size .
7826	Calculate the selection shape .
7827	Sets up the channels .
7828	Sets up the frequency ranges .
7829	Populate the timestamps in the file .
7830	Populate the freqs .
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Returns True if the selection is heavy .
7834	Read data from the header .
7835	Read all data from the file .
7836	Read a single row from the file .
7837	Read data from the container .
7838	Update the header .
7839	Print information about the file .
7840	Write a file to a file .
7841	Write to HDF5 file .
7842	Write to a hdf5 file .
7843	Get the blob dimensions .
7844	Get the chunk dimensions from the header .
7845	Grab the data from the plot .
7846	Command line utility for creating spectra from GuppiRaw files .
7847	Read the first header from the file .
7848	Find the number of data blocks in the file .
7849	Print the stats .
7850	Plot a histogram .
7851	Generate a filterbank header .
7852	Find the header size of a file .
7853	%prog batch_script
7854	Command line utility for creating HDF5 Raw files .
7855	Calculate the fold - cal of a time series .
7856	Integrate a waterfall .
7857	Calculate the calfluxes .
7858	Calculate the center frequency of a set of frequencies .
7859	Compute the frequency ratios .
7860	Calculate the diode spec .
7861	Returns a tsys spec for a diode .
7862	Called to calibrate the fluxes of a waterfall .
7863	Return the length of a header in a file .
7864	Check if filename is a filterbank .
7865	Given a filename and a keyword and a new value fix the header .
7866	Generate a sigproc header .
7867	Convert an angle value to a sigproc . angle object .
7868	Calculate the number of bytes in a file .
7869	Serializes this frame to a dictionary .
7870	Add a subparser to a list of subparsers .
7871	Create a ZonefileLineParser .
7872	Remove comments from a string .
7873	Add a default name to a string .
7874	Parse a single line of supported records .
7875	Parse a list of lines into a json zone file .
7876	Parse a JSON zone file .
7877	Quote a field .
7878	Parse a JSON schema string .
7879	Convert a list of classes to a python package .
7880	Convert a pyschema . schema . record to a python source .
7881	Defines a decorator that disables auto_store .
7882	Dump record in json - encoded object format
7883	Load a JSON record from a JSON dictionary .
7884	Load a json record .
7885	Add a record to the schema map .
7886	Get a record by name .
7887	Returns an OrderedDict containing the vars of this object .
7888	Return a mixin class for the given mixin class .
7889	Create a record from a class .
7890	Returns a SchemaGenerator instance for the given record .
7891	Returns the root schema dictionary for the given record .
7892	Returns a generator that reads lines from the input stream .
7893	Write a list of outputs to output_stream .
7894	Push a value to the front of an ordered dictionary .
7895	Returns a string representation of the query .
7896	Returns a search result for the given filters .
7897	Returns a list of entities that include the given attributes .
7898	Get an Entity from a href .
7899	Returns a new quote for a given quote .
7900	Escape a string from a string .
7901	Returns the elementary rotation matrix for a given axis .
7902	Construct a covariance matrix .
7903	Calculate the sky avg of a vrad error .
7904	Calculate the parallax error .
7905	Calculate the magnitude error of a graph .
7906	gMagnitudeError EoM .
7907	Make a plot of the given args .
7908	Returns the average number of transits for a given beta .
7909	Calculate the angular distance between two points .
7910	Transform Cartesian coordinates to dot coordinates .
7911	Convert sky coordinates to cartesian coordinates .
7912	Transforms the covariance matrix .
7913	Returns the error scaling factor for the given observable .
7914	Create a plot of the current axis .
7915	Make a plot of the gRvs .
7916	Returns either a null or a list of nulls .
7917	Helpful failure decorator .
7918	Convert a string to a Unicode string .
7919	Return a collection containing each item in the collection .
7920	Excludes the given function from the filter .
7921	Return a collection filtered by a given function .
7922	Returns a collection of items while the given function is running .
7923	Returns a collection that will be dropped while the given function is called .
7924	Zip a collection into a single collection .
7925	Find a node .
7926	Return the absolute path to the serach iaca file .
7927	Return an iterator over the characters in a group .
7928	Return an iterator over the options in the given regdescr .
7929	Convert an event tuple to a string .
7930	Build a list of minimal runs for the given events .
7931	Print the results to stdout .
7932	Print the results to stdout .
7933	Print results to stdout .
7934	Remove pragmas from the code .
7935	Round x to the next base value .
7936	Given a list of indices return a list of blocks .
7937	Calculate the access to the cache .
7938	Calculate the number of cycles for each cacheline .
7939	Calculate the number of flops per iteration .
7940	Perform the IACA analysis .
7941	Strip and uncomment a list of asm lines .
7942	Strip unreferenced labels from asm_lines .
7943	Select the best block from a list of blocks .
7944	Select a pointer increment from a block .
7945	Select a block from a list of blocks .
7946	Insert markers between start_line and end_line .
7947	Instrumentation for iaca .
7948	Main entry point for kerncraft .
7949	Simulate a model .
7950	Yield a number of intergers between start and stop .
7951	Get the datetime of the last modified file in a directory .
7952	Check if the arguments are valid .
7953	Run the command line interface .
7954	Recursively merges two or more pickle files . Only supports pickles consisting of a single dictionary object .
7955	Return a sympy . Symbol with positive and integer positions .
7956	Transform a MultiDimDecl to a 1D Decl .
7957	Transform a multidim array reference to a 1d reference .
7958	Find the type of a node .
7959	Decorator to force a function to be iterable .
7960	Check if the kernel supports multiple datatypes .
7961	Set the value of a constant .
7962	Return the subs constants of an expression .
7963	Returns a dict of the array sizes in bytes .
7964	Calculate the relative offset of a variable .
7965	Remove duplicate accesses .
7966	Returns the length of the iteration .
7967	Returns a generator yielding all the loops in the stack .
7968	Returns a list of all indices in a given order .
7969	Compile sympy accesses .
7970	Compiles the relative distances .
7971	Convert a global iterator to a list of indices .
7972	Returns the global iterator .
7973	Convert a list of indices to a global iterator .
7974	Returns the maximum global iteration of the indices .
7975	Print kernel information .
7976	Print information about the variables .
7977	Print information about the constants .
7978	Print kernel code .
7979	Convert a convolution AST to a sympy . Integer .
7980	Returns the offsets of the given array reference .
7981	Returns the basename of the given aref .
7982	Get the index type .
7983	Build the declarations for the constants .
7984	Returns a list of array declarations .
7985	Get the kernel loop nest .
7986	Builds a dictionary of array declarations .
7987	Find the innermost loop in the loop_nest .
7988	Build the initializations for the arrays .
7989	Build a list of dummy calls .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Get kernel code from a file .
7993	Build a kernel call .
7994	Get the code for the main . c file .
7995	Assemble an iaca . s file .
7996	Build the executable .
7997	Convert a string to a sympy . Integer .
7998	Return the identifier of the file .
7999	Get the last modified datetime .
8000	Returns a CacheSimulator from the memory hierarchy .
8001	Get the bandwidth for a given cache level .
8002	Returns the specified compiler and flags .
8003	Parse a perfctr event .
8004	Enforce that there is no overlap .
8005	Return the absolute path to the header file .
8006	Align an iteration with the cl_boundary .
8007	Returns the number of loads in the cache .
8008	Returns the number of hits in memory .
8009	Returns the number of MISSes .
8010	Returns the number of stores in the machine .
8011	Returns the number of evicts .
8012	Returns a dict of information about the cache .
8013	Fix an environment variable .
8014	Configure the arggroup parser .
8015	Print results to stdout .
8016	Parse a README . md file .
8017	Schedule a retry .
8018	Build a purchase item for a given course .
8019	Record a purchase .
8020	Get the content of a course .
8021	Get the content of a course run from the ecommerce API .
8022	Update the list of unenrolled users .
8023	Send a refund email .
8024	Send an email with the subject and email body of an offer assignment notification .
8025	Get the logger configuration .
8026	Retry an order .
8027	Fulfill an order .
8028	Returns a SailthruClient for the given site code .
8029	Get the value of a key .
8030	Set a value in the cache .
8031	Get the value of a configuration variable .
8032	Returns the filename of the variable that overrides the environment variable .
8033	Get a value by version .
8034	Returns the Energy Plus version sorted by version .
8035	Returns a dict containing the file_refs .
8036	Populate the device from the given json data .
8037	Returns a list of external files .
8038	Set the default values for all tables .
8039	Prepares the extensible field descriptors .
8040	Return the extended name of the field at the given index .
8041	Returns a dict of all naive short references .
8042	Get the value of a column .
8043	Update the inert value at the given index .
8044	Update the object with the given data .
8045	Set the default values for this field .
8046	Add fields to the record .
8047	Pops the value at the specified index .
8048	Insert a new value at the given index .
8049	Delete this record .
8050	Register a new record hook .
8051	Register hooks for a given link .
8052	Create a regex for the given line .
8053	Returns the remaining time in seconds between the start and end times .
8054	Serialize this event into a dictionary .
8055	Make an HTTP request to the given URL .
8056	Return a list of endpoints for a given service type
8057	Try to create a directory .
8058	Configure a service .
8059	Register a CA .
8060	Set the recording state .
8061	Update the status of an event .
8062	Update agent state .
8063	Return the path to the pyca configuration file .
8064	Update a configuration file .
8065	Check if the connection is secure .
8066	Initialize logging .
8067	Return a list of all upcoming events .
8068	Serve an image .
8069	Run all modules .
8070	Parse a datetime . ical file into a dict .
8071	Get the schedule for a service .
8072	Controls the flow of events .
8073	Shut down the agentstate service .
8074	Create an error response .
8075	Returns a json response with the given data .
8076	Get the internal state of a service .
8077	Returns a list of events in the database .
8078	Get an event by its uid .
8079	Delete an event with the given uid
8080	Modify an event .
8081	Get config parameters from a list of properties .
8082	Ingest a mediapackage .
8083	Start recording an upcoming event .
8084	Render the request to a Fragment object .
8085	Returns a list of all available resources .
8086	Return a dict representation of the object .
8087	Create a Fragment object from a dictionary .
8088	Add a new content to the list .
8089	Add a FragmentResource to the FragmentResources list .
8090	Add a FragmentResource to this FragmentResources .
8091	Initialize the JS API .
8092	Convert a list of resources to HTML .
8093	Convert a resource to HTML .
8094	Returns a JSONResponse from a GET request .
8095	Render a request as a standalone HTML response .
8096	Render a fragment as standalone HTML .
8097	Calculate p - values .
8098	Convert a list or tuple to a one - dimension array .
8099	Lookup values from the error table .
8100	Compute the posterior chromatogram hypotheses in a fast fashion .
8101	Create a final error table from a dataframe .
8102	Returns a summary error table for the given dataframe .
8103	Computes the error statistics for a given set of targets .
8104	Find the cutoff value .
8105	Compute the score of a classifier .
8106	Infer peptidoforms from a peptide file .
8107	Infer peptides from infile to outfile .
8108	Infer a protein from an input file .
8109	Subsample an OSW file .
8110	Recursively reduce an OSW file .
8111	Backpropagate an oswr file .
8112	Filter sqmass files .
8113	Get a group by its Id .
8114	Create a new group .
8115	Delete a group .
8116	Get a list of members of a group .
8117	Update members of a group .
8118	Get the effective member count for a group .
8119	Checks if a group is an effective member of a network .
8120	Modify conf . py .
8121	Create a dataset .
8122	Decrypt a key .
8123	Get a stdin instance .
8124	Get stdout .
8125	Get the stderr file .
8126	Get debug information .
8127	Run a command with stdin .
8128	Execute a command with stdout .
8129	Execute a command with stderr .
8130	Execute a debug command .
8131	List an account .
8132	Check if a container is empty .
8133	Decorator to make a function output as stdout .
8134	Decorator for sys . stderr .
8135	Write an error message to a file .
8136	Print help to file .
8137	Print options usage to file .
8138	Print the version of the option .
8139	Make a request to the API .
8140	Make a POST request to the account .
8141	Delete an account .
8142	PUT a container .
8143	Create a HEAD request for a given object .
8144	Get an object from a container .
8145	Put an object into a container .
8146	Post an object to a container .
8147	Resolve an option .
8148	Return a copy of this context .
8149	Write headers to file .
8150	Get the auth information for the client .
8151	Generate a temporary URL .
8152	Parse a value and return a string .
8153	Context manager for fdo .
8154	Get a client .
8155	Encrypt a string using AES256CBC .
8156	Decrypt an AES256CBC key using stdin .
8157	Upload a directory structure .
8158	Put an account .
8159	Put a container into the context .
8160	Get the manifest body .
8161	Create a new container .
8162	Create a temporary URL .
8163	Transform an X - Trans - Id into UTC .
8164	Print help for a given command .
8165	Returns True if the buffer is empty .
8166	Encrypts the given key with AES 256CBC .
8167	Get the status of a repository .
8168	Get a pull request from the API .
8169	Returns a list of pull requests for the given repo .
8170	Write your forwards methods here .
8171	Returns a list of published SliderItems .
8172	Render a Hero Slider .
8173	Acquire a reader .
8174	Release the reader mutex .
8175	Acquire the writer .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task by its id .
8179	Returns a list of tasks .
8180	Return a dict representation of the config .
8181	Initialize a TaskConfig object from a dictionary .
8182	Execute a perceval job .
8183	Initializes the archive manager .
8184	Run the job .
8185	Execute the fetch command .
8186	Create an Elastic Search index .
8187	Create an Elastic Search mapping .
8188	Encode a request as a JSON string .
8189	Write a list of items to a file .
8190	Add a task to the scheduler .
8191	Remove a task .
8192	Returns a generator yielding all items in the queue .
8193	Validate a task s arguments .
8194	Parse ArchivingTaskConfig . from_dict .
8195	Perform a job on a queue .
8196	Schedule a task for a job in a queue .
8197	Cancel a job task .
8198	Run the job listener .
8199	Listen for messages on the channel .
8200	Start the scheduler .
8201	Schedule a task to be run .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the arguments for a job .
8206	Returns the secret with the given name .
8207	Register a view .
8208	Register a new admin view .
8209	Perform a reverse action on a URL .
8210	Returns the view name .
8211	Get a version string from a version string .
8212	Resolve a key from a cursor .
8213	Return the django - bananas . url engine for the given scheme .
8214	Parse a path into a database and schema .
8215	Parse a database url into a dictionary .
8216	Parse a database URL .
8217	Create a new user .
8218	Returns a list of all records for a user .
8219	Create a new password .
8220	Build url field and kwargs .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Get a parser for a given setting type .
8224	Get the django settings .
8225	Create a new instance from a model .
8226	Encode a string into a base64 - encoded string .
8227	Create a field from a field_info dict .
8228	Create a Validator object from a dict .
8229	Create a cartesian product from a dictionary of parameters .
8230	Find unique points in a list of parameters .
8231	Change logging kwargs .
8232	Decorator to provide a simple logging configuration .
8233	Try to create directories for a given filename .
8234	Get a list of strings from a list of arguments .
8235	Rename a log file .
8236	Set the logger for this module .
8237	Extract the replacements for a given trajectory .
8238	Show a progress bar .
8239	Check and replace parser args .
8240	Convert a parser to a string io .
8241	Find multiproc options in a parser .
8242	Find a multiproc dict from a dictionary .
8243	Check the logging configuration .
8244	Handle config parsing .
8245	Handle a dict configuration .
8246	Create logging handlers and tools .
8247	Finalize the tabula rasa .
8248	Start stdout redirection .
8249	Write a stream to stderr .
8250	Check if two inputs are equal .
8251	Check if two inputs are equal .
8252	Decorate a function to perform a manual run .
8253	Decorator to mark a function as deprecated .
8254	Decorator to specify that two parameters are mutually exclusive .
8255	Decorator for kwargs_api_change .
8256	Decorator to retry a function .
8257	Returns a prefix naming class .
8258	Add parameters to Brian2Parameter .
8259	Run a neural network .
8260	Compute the euler scheme .
8261	Add parameters to the simulation .
8262	Calculate the Lorenz difference between two values .
8263	Create a storage service .
8264	Create an HDF5StorageService from a filename .
8265	Add parameters to the simulation .
8266	Compute the difference between two arrays of values .
8267	Compact a HDF5 file .
8268	Returns a boolean indicating if any parameters are in a group .
8269	Build model . eqs dictionary .
8270	Pre - build the model .
8271	Build the model .
8272	Build a model from a dictionary .
8273	Pre - build the network .
8274	Build a connection .
8275	Add a parameter to the simulation .
8276	Compute the Fano factor .
8277	Compute the mean fano factor for each neuron .
8278	Compute the mean fano factor for each neuron .
8279	Add a monitor to a network .
8280	Add monitors to the network .
8281	Create a folder for the given traj .
8282	Plot a result .
8283	Print the graphs to a file .
8284	Analyse the current subrun and subrun list .
8285	Get a batch from the command line .
8286	Explore the sigma of a batch .
8287	The NNTreeVars of this node .
8288	Returns the function for this node .
8289	Rename a file .
8290	Set the details of a branch .
8291	Convert a node to a message .
8292	Remove a subtree from the tree .
8293	Delete a node from the tree .
8294	Remove a node or leaf from an instance .
8295	Remove a node along a branch .
8296	Translate a shortcut name .
8297	Add a prefix to a list of split names .
8298	Determine the types of a node .
8299	Add a node to a group .
8300	Add a node to the tree .
8301	Create a link between an act node and an instance .
8302	Check if the split_names are valid .
8303	Create a new group for the given parent node .
8304	Create a param or result node .
8305	Set the details of a tree node .
8306	Iterate over nodes .
8307	Return an iterator over the children of a node .
8308	Recursively traverse the BFS of a node .
8309	Perform a very fast search of a node .
8310	Search for a key in a node .
8311	Perform a backwards search of a node .
8312	The children of this node .
8313	Add a group from a storage object .
8314	Add a leaf from storage .
8315	Returns a list of all files in the directory .
8316	Creates a Bunch object for debugging .
8317	Returns the parent of this root .
8318	Add a group to the interface .
8319	Add a link to the interface .
8320	Remove a link from the interface .
8321	Add a leaf to this group .
8322	Remove this variable from the parent .
8323	Remove a child from this group .
8324	Check if an item exists in the file .
8325	Get the default value for a file .
8326	Returns a copy of this object s children .
8327	Returns a copy of self . _groups
8328	Returns a copy of this file s leaves .
8329	Returns a copy of self . _links .
8330	Store a child of this group .
8331	Store the current trajectory in a file .
8332	Load a child instance .
8333	Load a pypetconstant .
8334	Add a parameter group to the interface .
8335	Add a parameter to the interface .
8336	Add a result group .
8337	Add a result to a result group .
8338	Add a derived parameter group to the interface .
8339	Add a derived parameter to the interface .
8340	Add a configuration group to the interface .
8341	Add a configuration to the interface .
8342	Evaluate the fitness of a single individual .
8343	Add git variables to a commit .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Create a nested dictionary from a flat dictionary .
8347	Create a progress bar .
8348	Get the argspec for a function .
8349	Given a function and a kwargs dictionary return the kwargs that match .
8350	Convert a timestamp to a datetime object .
8351	Convert a port to a tcp address .
8352	Create race directories for a given path .
8353	Reset the index to the current index .
8354	Returns the number of seconds remaining for the given index .
8355	Convert to a dict .
8356	Remove a key from the annotations .
8357	Convert f_ann to string .
8358	Make an ordinary result .
8359	Create a SharedResult object from a result .
8360	Create shared data .
8361	Make a request to the data store .
8362	Get the data node .
8363	Returns a SharedResult that supports the given item .
8364	Create a shared data object .
8365	Modify a multiprocess safe way .
8366	Re - request a lock .
8367	Send a DONE signal to the server .
8368	Finalize the connection .
8369	Start the client .
8370	Sends a request to the server and retries the response .
8371	Acquire a connection to the server .
8372	Sends a python object to the socket .
8373	Send a message to the server .
8374	Detect a fork in the connection .
8375	Handle a message .
8376	Run the service .
8377	Receive data from the queue .
8378	Receive data from the server .
8379	Store args and kwargs .
8380	Store msg to self . references .
8381	Store a list of pypetconstants .
8382	Decorate a function to parse a config file .
8383	Collect a section from the parser .
8384	Returns a dict of kwargs to be passed to _collect_config .
8385	Interpret the kwargs .
8386	Add parameters to a traj config file .
8387	Convert a rule number to a numpy array .
8388	Create an initial state from a list of cells .
8389	Plot a pattern .
8390	Cellular Automaton 1D .
8391	Compute all patterns .
8392	Send a signal to all active nodes .
8393	Get the overview group .
8394	Load a pypetconstant .
8395	Store stuff_to_store to msg .
8396	Load multiple items from an iterable .
8397	Check the HDF5 properties of a storage service .
8398	Stores multiple items from an iterable .
8399	Run the srvc_closing routine .
8400	Extract information from the srvc file .
8401	Backup the current trajectory into a HDF5 file .
8402	Read a row from a list of columns .
8403	Prepare for merging .
8404	Load meta data from traj .
8405	Load a sub - branch from a tree .
8406	Check pypet version .
8407	Fill the run table with run information .
8408	Loads an exploration from a TrajectoryGroup .
8409	Stores the explorations for the given traj .
8410	Make a list of overview tables .
8411	Store a new trajectory .
8412	Store a sub branch of a tree .
8413	Create a new tree .
8414	Recursively load nodes from a tree .
8415	Recursively store a node in the tree .
8416	Store a param or result table entry .
8417	Get or create a table from a where node .
8418	Get a node by its name .
8419	Recall all attributes to natives .
8420	Returns True if the data is of a native type .
8421	Add or modify a row .
8422	Insert all values in insert_dict into a row .
8423	Extract the insert dict from the item .
8424	Cut a string to a maximum length .
8425	Create a new HDF5 group if it doesn t exist .
8426	Create a new HDF5 group if it doesn t exist .
8427	Store the annotations for a node .
8428	Load annotations from item_with_annotations .
8429	Store a group on disk .
8430	Load a group of nodes from the tree .
8431	Load the skeleton of a node .
8432	Extract missing flags from a data dictionary .
8433	Add a summary to a PRM table .
8434	Add metadata information to an instance .
8435	Create a new HDF5 storage group from a dictionary .
8436	Store a parameter or result on disk .
8437	Write a shared array .
8438	Write a shared table .
8439	Write a dictionary into a table .
8440	Write pandas data to a pandas dataframe .
8441	Write data to another HDF5 array .
8442	Write data into a HDF5 array .
8443	Delete a link .
8444	Delete a parameter or result from an instance .
8445	Write data into a pytable .
8446	Make a description of the data .
8447	Get a column from a table .
8448	Get the longest string size from a list of strings .
8449	Load a node into a dictionary .
8450	Read a dictionary from a leaf .
8451	Read the shared data from a shared node .
8452	Read a table from a storage group .
8453	Read an array from the storage .
8454	Load a trajectory .
8455	Create a set name for a set .
8456	Set the properties of the interface .
8457	Add dynamic imports to the list of dynamic imports .
8458	Sets the name or idx of the function to run .
8459	Iterate over the runs of this trajectory .
8460	Shrink the trajectory .
8461	Set a parameter in the trajectory .
8462	Pre - set a parameter .
8463	Prepares the experiment for execution .
8464	Get a value from a list of runs .
8465	Check if a run is completed .
8466	Removes all parameters from disk .
8467	Returns a copy of the given node .
8468	Explore all parameters in the build_dict .
8469	Update a run information dictionary .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock derived parameters .
8473	Convenience method to finalize the process .
8474	Load the skeleton .
8475	Load a file - like object .
8476	Store a backup of this trajectory .
8477	Makes the reversed wildcards .
8478	Merge multiple trajectories into the current one .
8479	Merge two trajectories into one .
8480	Rename a full path .
8481	Merge parameters from other_trajectory into this one .
8482	Merge links between two trajectories .
8483	Merge config from other_trajectory into this one .
8484	Merge other_trajectory into this one .
8485	Merge results from other_trajectory into self .
8486	Migrate the trajectory to a new location .
8487	Store this node .
8488	Restore the default value of all parameters .
8489	Sets the parameters to the specified index .
8490	Make a single run .
8491	Returns a list of run names .
8492	Return the run information for the given name or idx .
8493	Find the idx of a parameter .
8494	Start a new run .
8495	Finalize a run .
8496	Set the start time of the run .
8497	Sets the end time of the run .
8498	Construct a Trajectory instance .
8499	Return an item dictionary .
8500	Finalize the run .
8501	Returns a dictionary of config items .
8502	Get the results of a search .
8503	Store items for a trajectory to disk .
8504	Load items from disk .
8505	Remove an iterator of items from the network .
8506	Delete all links in iterator_of_links
8507	Removes all children from the tree .
8508	Delete items from the trajectory .
8509	Pool a single run .
8510	Handle a single run of a pool .
8511	Configure the pool .
8512	Configure a frozen pool .
8513	Process a single run .
8514	Delete old SCOOP data from the revolution .
8515	Scoop a single run .
8516	Configure the logging system .
8517	Configure niceness .
8518	Handle a single run of sigint .
8519	Perform a single run .
8520	Wraps the given kwargs into a logging handler .
8521	Load a class from a string .
8522	Create a class from a list of dynamic imports .
8523	Returns the length of this parameter s range .
8524	Returns a string representation of the current value .
8525	Returns True if the two inputs are equal .
8526	Returns the range for this parameter or a copy of it .
8527	Explicitly explore the given iterable .
8528	Expands this Parameter s range .
8529	Check if data is of the same type as the original entry value .
8530	Store the data in a dictionary .
8531	Load a parameter from disk .
8532	Load a Parameter from a dictionary .
8533	Returns True if val1 and val2 are equal .
8534	Returns True if data is a supported matrix .
8535	Serialize a SparseParameter matrix .
8536	Builds a tuple of names for a SparseParameter .
8537	Construct a spsp . spsp . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . spsp . sps .
8538	Load a SparseParameter from a dictionary .
8539	Store the data in a dictionary .
8540	Load a PickleParameter from disk .
8541	Translate a key to a string .
8542	Convert a value to a string .
8543	Convert a file to a dictionary .
8544	Set a positional value .
8545	Returns a list of keys .
8546	Set a single item in the result .
8547	Check if an item is supported by the SparseResult .
8548	Store the SparseResult to a dictionary .
8549	Load a SparseResult from a json dictionary .
8550	Set a single item to a PickleResult .
8551	Store the data in a pickle dictionary .
8552	Load data from a pickle dictionary .
8553	Merge all files in a folder .
8554	Upload a file to Saga .
8555	Download a file from Saga .
8556	Create a Saga session .
8557	Merge trajectories .
8558	Start a batch of jobs .
8559	Multiply the product of two reals .
8560	Run Euler integration .
8561	Post - process a neuron .
8562	Add parameters to the simulation .
8563	Add exploration of I and tau_ref
8564	Execute a network pre - run .
8565	Execute a network run .
8566	Extract all subruns of a duration parameter .
8567	Execute a network run .
8568	Adds parameters to the network runner .
8569	Pre - run the network .
8570	Run the network .
8571	Run the network simulation .
8572	Create a filename for a Traj .
8573	Return the next item in the iterator chain .
8574	Merge all files in a folder .
8575	Handle a SIGINT prompt .
8576	Read a config from a file .
8577	Request a pin from Ecobee .
8578	Request tokens from Ecobee .
8579	Refresh the access_token and refresh_token .
8580	Returns a list of thermostats .
8581	Write the access tokens to the config file .
8582	Set the HVAC mode of a thermostat .
8583	Set the fan minimum on time .
8584	Set the temperature of a thermostat .
8585	Set a climate hold on a thermostat .
8586	Delete a vacation
8587	Resume a program .
8588	Send a message to a thermostat .
8589	Set the humidity level of a thermostat .
8590	Generate a random selection delay .
8591	Generate a random timeout to resend .
8592	Generate a timeout to renew a lease .
8593	Generate a renewal time for a lease .
8594	Returns a dict representation of the FSM .
8595	Reset the attributes of the DHCP client .
8596	Get the timeout for a function .
8597	Set the state of a function to a timeout .
8598	Sends a discovery message to the client .
8599	Select an offer .
8600	Send a DHCP request to the server .
8601	Set the timers for this lease .
8602	Process a DHCPACK request .
8603	Process a DHCPNAK message .
8604	Set the current state to INIT .
8605	Set the current state of the client .
8606	Renew the lease .
8607	REBINDING - Set the current state of the client .
8608	End the lease .
8609	Raise INIT if there is an error .
8610	Timeout to select a new offer .
8611	Timeout when a request is received .
8612	Raise RENEWING if timeout is exceeded .
8613	Timeout for request rebinding .
8614	Receive an offer .
8615	Process an ACK request .
8616	Receive a NAK request .
8617	Receive an ACK that is renewing .
8618	Receive a NAK renewing message .
8619	Receive an ACK rebinding .
8620	Receive a NAK rebinding .
8621	Called when a lease is renewed .
8622	Set the value of a django object .
8623	Add a new value to the queryset .
8624	Remove a value from the QSL .
8625	Get the status of the server .
8626	Create a dict with the given data and options .
8627	Main entry point for sys . exit .
8628	Validate a message .
8629	Read a tdms file .
8630	Adds deformation to a list of dictionaries .
8631	Convert a TDM file to a FCS file .
8632	Return True if cwd is equal to cwd .
8633	Create a new patch .
8634	Delete the next patch from the database .
8635	Delete a patch from the database .
8636	Check if filename is in patch .
8637	Backup a file .
8638	Add a file to the database .
8639	Run the command .
8640	Create the directory if it does not exist .
8641	Copies this directory to another directory .
8642	Add a link to this file .
8643	Copies the file to a new location .
8644	Returns the directory where the file is located .
8645	Create a backup of a file .
8646	Refreshes the quilt .
8647	Remove a patch from the database .
8648	Unapplies the top patch .
8649	Unapplies all applied patches .
8650	Apply a patch to the database .
8651	Apply the next patch to the database .
8652	Apply all the patches to the database .
8653	Read a series file and add a patch to it .
8654	Save the series to a file .
8655	Add a patch to the current line .
8656	Insert a list of patches into the file .
8657	Add a list of patches .
8658	Remove a patch .
8659	Return a list of all patches after a given patch .
8660	Return a list of all patches before a given patch .
8661	Returns a list of lines that have been patched until the given patch is applied .
8662	Replace an old patch with a new one .
8663	Create a new version file .
8664	Check the version of the quilt meta - data .
8665	Add this argument group to a parser .
8666	Add an argument to a parser .
8667	Add subparsers to the parser .
8668	Set the subparsers args .
8669	Add subparsers to the parser .
8670	Check if filename is in patch .
8671	Check if filename is in next patches .
8672	Revert a file to a patch .
8673	Import a patch .
8674	Import a list of patches .
8675	Add a way to the way list .
8676	Returns a generator of node ids that are not present in the tree .
8677	Return the node with the given id .
8678	Build a route from a relation .
8679	Create a route with a long name .
8680	Returns the agency id for the given relation .
8681	Process public transport relations .
8682	Returns a Relation object for the given relation .
8683	Create dummy data for a list of routes and stops .
8684	Patch a list of agencies .
8685	Create a dummy trip stoptimes for a trip .
8686	Write a zipped version of the arc to a file .
8687	Write unzipped data to destination .
8688	Build an Agency object from a relation .
8689	Extract stops from a list of nodes .
8690	Build a Shape object from a list of nodes .
8691	Returns a list of supported versions .
8692	Send an APD to the device .
8693	Authenticate with a U2F device .
8694	Register a facet on a device .
8695	Authenticate a U2F device .
8696	Register a U2F device .
8697	Convert a dict or list of dicts into a string .
8698	Wrap a function with an error handler .
8699	Decorator for class methods .
8700	Returns True if the filepath matches the given pattern .
8701	Return the email address for the given email .
8702	Get an entry from an entry tree .
8703	Convert markdown to reST .
8704	Serve a configuration file .
8705	Record an error in a stack .
8706	Convert a URL to an image .
8707	Convert a string to an Image object .
8708	Decorator to validate a function .
8709	Check if an image is big enough .
8710	Checks if the given width is big enough for the given image .
8711	Check if the given height is big enough for the given image .
8712	Parse a Category object .
8713	Parse the totals of a field .
8714	Iterate over the items in the ElementTree .
8715	Save an error to the error file .
8716	Parse the source data .
8717	Parse an item .
8718	Get an instance of this model .
8719	Save an item to an instance .
8720	Download a file from a URL to a destination .
8721	Load a file from a source file .
8722	Returns a generator that yields all the items from the source file .
8723	Sets the allow_network_access value .
8724	Execute a docker command .
8725	Add a list of files to the Sandbox .
8726	Add and rename a file .
8727	Returns a list of CanvasEnrollments for a given course .
8728	Gets the enrollments for a given SI .
8729	Gets the enrollments for a section .
8730	Gets the enrollments for a Section by its Id .
8731	Returns a list of CanvasEnrollments for the given regid .
8732	Enrolls a user in a course .
8733	Returns a list of all roles in an account .
8734	Gets the list of roles associated with an account .
8735	Gets the effective course roles in an account .
8736	Get a specific role .
8737	Get a role by its SI ID .
8738	Returns a CanvasCourse object for the specified course .
8739	Get a course by its IS ID .
8740	Get a list of courses in an account .
8741	Gets the courses in a sis account by sis_id .
8742	Get all courses in an account that have been published .
8743	Gets the published courses in an account by sis_id .
8744	Returns a list of courses for a given regid .
8745	Create a new CanvasCourse
8746	Update a course s IS ID .
8747	Get activity by account .
8748	Gets the grades for a given SI account and term .
8749	Get statistics for a given account and term .
8750	Get activity by sis_course_id
8751	Get assignments by sis_course_id
8752	Get student summaries by sis_course_id
8753	Get student activity for sis_user_id and sis_course .
8754	Get a student s communication for a given sis_user_id
8755	Get external tools in an account .
8756	Get external tools in a course .
8757	Create an external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Raise DesignError if any of required_parameters is not set .
8761	Returns a CanvasUser for the specified user .
8762	Returns a list of CanvasUsers associated with a course .
8763	Gets the users for a given IS course .
8764	Create a new CanvasUser .
8765	Get a user s logins .
8766	Update a user login .
8767	Returns the next page from the response .
8768	Get a resource url .
8769	Get a paged resource .
8770	Get a resource from the API .
8771	Put a resource to the DAO .
8772	Post a resource to the DAO .
8773	Delete a resource .
8774	Returns a list of CanvasAdmin objects for the given account .
8775	Create an admin role for a user .
8776	Create an administrator by sis id .
8777	Delete an admin role .
8778	Delete an administrator by sis id .
8779	Creates a grading standard for a course .
8780	Get a section by its id .
8781	Get a section by sis_id
8782	Get all sections in a course .
8783	Get all sections in a course by sis_id
8784	Gets the sections with students in course .
8785	Gets the sections with students in a course .
8786	Create a CanvasSection .
8787	Updates a section .
8788	Get quizzes for a given course .
8789	Gets a CanvasAccount by its Id .
8790	Returns a list of all sub - accounts of an account .
8791	Updates an account .
8792	Update an account s SIS ID .
8793	Get the SSO settings for an account .
8794	Update the auth settings for an account .
8795	Get a term by its SIID .
8796	Import a SISImportModel as a string .
8797	Import a directory .
8798	Get the status of an import .
8799	Build a zip archive .
8800	Gets the assignments for a given course .
8801	Updates an assignment .
8802	Returns a list of available report types for the given account .
8803	Returns a list of reports corresponding to the given report type .
8804	Create a new report .
8805	Create a provisioning report for a course .
8806	Create a SIS export report for a course .
8807	Create an unused courses report .
8808	Get the data for a report .
8809	Get the status of a report .
8810	Delete a report .
8811	Move detections from label to dy to dx
8812	Flip detections from label to w .
8813	Get a dict from an object .
8814	Return a dict containing the config for the given request .
8815	Return the edit_empty_value .
8816	Parse args and kwargs .
8817	Creates a new MetricConfig .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics from a list of configs .
8821	Get a metric by name and labels .
8822	Handle the home page .
8823	Handle a request for metrics .
8824	Send an event to Wolfram .
8825	Fixes the HTTPMessage .
8826	Perform a wolframalpha query .
8827	Return an iterator over the pods and assumptions .
8828	Returns a list of results .
8829	Encodes the given data into a JSON string .
8830	Make a request to the API .
8831	Execute a GET request .
8832	Delete a file or directory .
8833	Send a PUT request to a URL .
8834	Send a POST request to a URL .
8835	Process a disambiguation query .
8836	Group a list of sentences into a list of sentences .
8837	Disambiguate a PDF .
8838	Disambiguate a query .
8839	Segment a text .
8840	Get the language for the given text .
8841	Fetches a concept .
8842	Fit the model to the given features and classes .
8843	Calculate the accuracy score of a feature .
8844	Fit the model to the given features and class_labels .
8845	Fit and predict a set of features .
8846	Calculate the accuracy score of the MDR model .
8847	Fits the model to the given features and targets .
8848	Transform a list of features into a new feature .
8849	Calculate the score of a Continuous MDR model .
8850	Predict the MDR .
8851	Generate n - way models .
8852	Plots the mdr grid .
8853	Return a dict containing the config of the given app .
8854	Get the value of a config key .
8855	Return a vector with the given members .
8856	Returns a vector with the given members .
8857	Evaluate a file .
8858	Evaluate all forms in a stream .
8859	Evaluate a string .
8860	Returns a bootstrapped representation of the given namespace .
8861	Run a file or code .
8862	Returns a MultiFunction corresponding to the given dispatch .
8863	Add a method to a map .
8864	Add a method to the MultiFunction .
8865	Get a method from the cache .
8866	Remove a method from a map .
8867	Remove a method from the function .
8868	Check if a variable is a macro .
8869	Return the line and column of a form .
8870	Decorator to add a location to a parse function .
8871	Raises an exception if there is no recur .
8872	Assert that a node is a tail .
8873	Resolve a bare symbol .
8874	Resolve a symlink .
8875	Parse an ASTM form .
8876	Returns a boolean indicating whether or not the variable is shadowed .
8877	Add a new symbol to the symbol table .
8878	Map a list of entries to a trailer .
8879	Return a list of sequences from an iterable .
8880	Return a string representation of a LispObject .
8881	Fallback function for _lrepr_bool .
8882	Fix missing locations in the node .
8883	Compile and execute a form .
8884	Compile a module incrementally .
8885	Compile a ReaderForm into a module .
8886	Compile the given bytecode into a Python module .
8887	Return a sequence from an iterable .
8888	Convert a string to a munge string .
8889	Desunge a string .
8890	Returns a fraction of a number .
8891	Get a logging handler .
8892	Create a Map object from a set of kvs .
8893	Partition a list into n - sized chunks .
8894	Decorator to add a location to a function .
8895	Read a namespaced string .
8896	Read a collection .
8897	Read a list from a reader .
8898	Read a vector .
8899	Read a set from a reader .
8900	Read a map literal from a reader .
8901	Read a string from a reader .
8902	Read a symbol .
8903	Read a keyword .
8904	Reads the metadata .
8905	Read a function from a reader context .
8906	Read a QUOTE comment .
8907	Expand syntax quote form .
8908	Convert a form to a ReaderForm .
8909	Reads the syntax - quoted form .
8910	Read the unquote form .
8911	Read a Deref form .
8912	Read a character from the reader .
8913	Read a regex pattern from a reader context .
8914	Return a LispReaderForm for the given context .
8915	Read the next consuming comment .
8916	Read the next token .
8917	Read data from a stream .
8918	Read a string from the stream .
8919	Read the contents of a file .
8920	Update the location of a line .
8921	Sets the pushback depth . Raises IndexError if there is more than pushback_depth .
8922	Get the next token from the stream .
8923	Generates a bytecode from a MAGIC_NUMBER .
8924	Get a bytecode from a basilisp file .
8925	Create a cache file from a source file .
8926	Hook imports to sys . meta_path .
8927	Find a module specification .
8928	Executes a cached module .
8929	Execute a Basilisp module .
8930	Execute a module .
8931	Return a Symbol object .
8932	Complete a string .
8933	Get or create a PMap from a keyword .
8934	Generate a keyword .
8935	Returns a tuple of dependencies and nodes for a PyAST .
8936	Load an attribute .
8937	Creates a simple AST generator .
8938	Returns a collection of ASTs for a given generator .
8939	Generate a python AST with a location .
8940	Decorator to wrap a function with a python AST .
8941	Decorator to create a python AST with a list of dependencies .
8942	Check if a variable is dynamic .
8943	Check if a variable is redefable .
8944	Convert an AST to a statement .
8945	Return an expressionized version of a function .
8946	Check if we should warn on a redef .
8947	Convert a Do node to a GeneratedPyAST .
8948	Generate a name for a filename .
8949	Convert a generator s arguments to a Python AST .
8950	Convert a single arity function to a python AST .
8951	Convert a multi - arity function to a python AST .
8952	Convert a NodeOp . FN to a GeneratedPyAST .
8953	Convert if_body to python AST .
8954	Convert an if to a python AST .
8955	Invoke a function and return a GeneratedPyAST .
8956	Convert a QUOTE node to a GeneratedPyAST .
8957	Convert a loop recur to a python AST .
8958	Convert a recur point to a python AST .
8959	Convert a SetBang node to a python AST .
8960	Convert a Throw node to a GeneratedPyAST .
8961	Try to convert a node to a Python AST .
8962	Convert a NodeOp . LOCAL to a GeneratedPyAST .
8963	Convert a var_name to a python AST .
8964	Convert a symlink to a python AST .
8965	Convert an interop property to a python AST .
8966	Convert a Maybe class to a Python AST .
8967	Convert a MaybeHostForm node to a GeneratedPyAST object .
8968	Convert a constant value to a python AST .
8969	Convert a collection of literals to a python AST .
8970	Generate a lisp AST node .
8971	Iterate over module imports .
8972	Import aliases from a module .
8973	Create a new namespace variable .
8974	Returns a set of members from an iterable .
8975	Returns a set with the given members .
8976	Visit a ExceptHandler node .
8977	Visit a Expr node .
8978	Visit a FunctionDef node .
8979	Recursively visit a While node .
8980	visit a Try node and return a copy of it
8981	Create a new module .
8982	Return the first sequence of o .
8983	Return the rest of a sequence .
8984	Return the nth rest value of a column .
8985	Return the nth next element in a sequence .
8986	Return the consonant of a sequence .
8987	Convert an object to a sequence .
8988	Concatenate a list of sequences .
8989	Assoc an object .
8990	Return the cons of a collection .
8991	Decorator to wrap a function with a list of arguments .
8992	Dereference an object .
8993	Return True if v1 is equal to v2 .
8994	Return the fraction of x and y .
8995	Sort a sequence .
8996	Returns True if coll contains k .
8997	Returns the value of k in m .
8998	Convert an object to a lisp object .
8999	Convert an IPersistent object to a Python object .
9000	Return a human - readable representation of an object .
9001	Returns a tuple of args .
9002	Trampoline a function .
9003	Decorator to add attributes to a function .
9004	Decorator to add a meta attribute to a function .
9005	Convert a function to a basilisp function .
9006	Resolve an alias for a symbol .
9007	Resolve a variable alias .
9008	Add a generated python variable .
9009	Bootstrap a variable into a namespace .
9010	Intern a variable in a Namespace .
9011	Unbound a variable in a Namespace .
9012	Find a symbol in a Namespace .
9013	Find a variable in the namespace of a symbol .
9014	Find a safe value for a symbol .
9015	Add a module as a default import .
9016	Add an alias to this symbol .
9017	Intern a sym with a variable .
9018	Create a new variable in a lmap . Map .
9019	Find a reference to a symbol .
9020	Add an import .
9021	Get an import for a symbol .
9022	Adds a reference to a sym .
9023	Get a reference to a symbol .
9024	Returns the refers for all entries in other_ns_interns .
9025	Refers all interns to this namespace .
9026	Get a namespace or create a new namespace .
9027	Get or create a namespace .
9028	Returns the namespace of a symbol .
9029	Remove a namespace .
9030	Returns a CompletionMatcher for the given text .
9031	Returns an iterable of all aliases matching the given prefix .
9032	Iterate over imports and aliases matching the given prefix .
9033	Returns a boolean indicating if the value is a match or not .
9034	Returns an iterable of complete references for the given value .
9035	Complete a string .
9036	Returns a tuple of the arguments .
9037	Return a list of members .
9038	Return a list of all the members in the iterable .
9039	Change the style of a scalar .
9040	Decrypt a JWT .
9041	Encrypt a JSON - like object .
9042	Remove a key from the cache .
9043	Convert to a python object .
9044	Close the file .
9045	Parse a fiql string into an expression .
9046	Dump an NDB model to a file .
9047	Returns a dict containing the hooks for the given object .
9048	Decode a date from a string .
9049	Decode a date into a JSON object .
9050	Returns the default JSON encoder for the given object .
9051	Validate the leicacam version string .
9052	Generate a changelog for the given version .
9053	Returns a list of strongly connected components .
9054	Return a robust topological sort of a graph .
9055	Sets the parent of this expression .
9056	Returns the parent of this expression .
9057	Add an operator to the working fragment .
9058	Add an element to this expression .
9059	Add an operator to the expression .
9060	Add an operator to the expression .
9061	Decorator for logging a function .
9062	Parse a received message .
9063	Convert a list of tuples into a dict .
9064	Check a list of messages for a given value .
9065	Prepares the message for sending .
9066	Flush all incomming socket messages .
9067	Enable a slide .
9068	Save a leicacam template .
9069	Load a leicacam template .
9070	Get information about a stage .
9071	r Inclines a file .
9072	Locate the package . json file .
9073	Parse a package json file .
9074	Handle API error with jsondata .
9075	Validate a response from yourls .
9076	Homogenize two wave vectors .
9077	Interpolate a dep vector .
9078	Get the indep vector of two waveforms .
9079	Verify that two waveforms are compatible .
9080	Load the systemjs manifest .
9081	Return a list of tracing parameters for a given mname .
9082	Run a trace on a file .
9083	Shorten a URL .
9084	Expand a URL .
9085	Get url stats for a given short URL .
9086	Return a dict of stats for a given filter .
9087	Returns a DBStats object .
9088	r Execute a pypkg sep command in mdir .
9089	Execute a command with a term echo .
9090	Log a message to stdout .
9091	Decorator to cache a method .
9092	Iterate over chunks of an iterable .
9093	Decorator to process a function in chunks .
9094	Flatten an iterable .
9095	Send a SIGINT signal to the system .
9096	Print a table to stdout .
9097	Return a dummy type .
9098	Convert a human - readable string to a NumPy array .
9099	Create a new yourls client .
9100	Trace a waveform module .
9101	Return a list of links in a requirements . json file
9102	Make a common entry for the given python version .
9103	Make a multi - entry entry .
9104	Convert a list of ops to words .
9105	Yield chunks of noise .
9106	Parse a chunk of data .
9107	r Write a touchstone to a file .
9108	Return a bound waveform .
9109	Build dep_units from dep_units and op .
9110	Return a copy of the operation .
9111	Calculate the running area between two vectors .
9112	Validate indep_min and indep_max arguments .
9113	r Calculate the absolute cosine of a wave .
9114	r Calculate the arccosh of a wave .
9115	r Calculate the asin of a wave .
9116	r Calculate the atanh of a wave .
9117	r Compute the average of a waveform .
9118	r Calculate the dB of a wave .
9119	r Calculate the derivative of a waveform .
9120	r Compute the ffti of a wave .
9121	r Compute the fftm of a wave .
9122	r Compute the fftp phase of a wave .
9123	r Compute the fft of a wave .
9124	r Compute the db of an ifft wave .
9125	r Calculate the imag of a wave .
9126	r Compute the ifftm of a wave .
9127	r Compute the inverse phase of a wave .
9128	r Compute the indices of a wave at a given number of points .
9129	r Compute the integral of a waveform .
9130	r Calculate the group delay of a wave .
9131	r Log of a wave .
9132	r Compute the n - average of a waveform .
9133	r Compute the n - integral of a waveform .
9134	r Return the maximum value of a waveform .
9135	r Return the minimum value of a waveform .
9136	r Calculate the phase of a wave .
9137	r Convert a complex waveform to an integer .
9138	r Return the square root of a wave .
9139	r Compute the subwaveform of a waveform .
9140	r Compute the complex component of a wave .
9141	r Convert a complex waveform to a float .
9142	r Convert a complex waveform to an integer .
9143	r Calculate the value of an independent variable .
9144	Find a jspm package at a given path .
9145	Get a short description from a long description .
9146	Build an expression from a list of tokens .
9147	Removes the next delimiter from the list of items .
9148	Return a list of function names for a given expression .
9149	Returns the ldelim and rdelim of a given expression .
9150	Parse an expression .
9151	Removes consecutive delims from an expression .
9152	Split text by sep and return a tuple of tuples .
9153	Convert a number to an English tuple .
9154	r Return a string with no exp .
9155	r Return a peng representation of a number .
9156	r Returns a float representation of a number .
9157	r Returns a peng - frac representation of a number .
9158	r Returns a float representing a peng .
9159	r Returns the power of a peng number .
9160	r Calculate the POWER_TO_SUFFIX_MATHEMATICAL .
9161	r Remove extra delims from an expression .
9162	Convert a number to a scientific string .
9163	Convert a number to a scientific tuple
9164	Find the sourcemap comment in a file .
9165	Returns True if the app needs an extension .
9166	Runs the bundle command .
9167	Trace an application .
9168	Returns True if the hashes in the dep_tree match .
9169	Format a string as a hexdump .
9170	Parse a docstring .
9171	Returns a list of valid identifiers .
9172	Return a context object for the given add action .
9173	Split a line into its parts .
9174	Check if init_commands is interactive .
9175	Returns the help text for a function .
9176	Find a function by name .
9177	List functions in a directory .
9178	Check if an argument is a flag .
9179	Process the arguments of a function .
9180	Extract a value from a keyword argument .
9181	Invoke one function on a line .
9182	Invoke the function at the end of a line .
9183	Invoke a string .
9184	Parse a parameter declaration .
9185	Parse a return line .
9186	Classify a section .
9187	Classify a line .
9188	Join lines into a list of paragraphs .
9189	Wrap the document and write it to a string .
9190	Convert a value to a given type .
9191	Convert a binary value to a type object .
9192	Returns the size of the given type .
9193	Convert a value to a given type .
9194	Validate a type object .
9195	Returns True if the given type name is known .
9196	Split a type name into base and subtype .
9197	Instantiate a type for a complex type .
9198	Returns the type for the given type name .
9199	Checks if the given type is a known format .
9200	Inject a type into the model .
9201	Load a type module .
9202	Return True if pos_args and kw_args have been filled .
9203	Add a parameter to the annotation .
9204	Return the value of a typed return value .
9205	Create a custom return value .
9206	Match a short - name to a keyword parameter name .
9207	Return the type of the parameter with the given name .
9208	Generate a signature for this object .
9209	Format a return value .
9210	Convert a positional argument .
9211	Check the spec of a function .
9212	Convert an argument to a type .
9213	Return a string representation of the message .
9214	Return a dict representation of the message .
9215	Validate a function and execute it .
9216	Parse a list of validators .
9217	Find all objects in a container .
9218	Return the name and context of a module .
9219	Returns the help text for the given function .
9220	Decorator to add a parameter to a function .
9221	Annotate a function with a return value .
9222	Annotate a function with a typed return value .
9223	Annotate a class with its context .
9224	Annotate a function .
9225	Annotate a function .
9226	Return a short description of a function .
9227	Load cron commands .
9228	Install the crontab .
9229	Prints all tasks in the registry .
9230	Uninstall crontab .
9231	Create a schema for a given uri .
9232	Load project configs from YAML file .
9233	Save project config to a YAML file .
9234	Define a singleton class .
9235	Returns a list of all projects that depend on this project .
9236	Decorator to post - process a function .
9237	Initialize a project .
9238	Sets the value of a key .
9239	Sets the value of a builtin attribute .
9240	Create an instance of this object from an iterable .
9241	Set a new value .
9242	Returns a setter that iterates over a set of values .
9243	Add a function to the state .
9244	Returns a tuple of n arguments .
9245	Apply a function to the lens .
9246	Apply a function to a pure state .
9247	View the current state of the Fold .
9248	Convert a Fold to a list of Folds .
9249	Apply a function over a state .
9250	Set a value to the specified state .
9251	Iterate over an iterable .
9252	Returns the kind of the optic .
9253	Main entry point for the game .
9254	Step to the left of another vector .
9255	Handle input from the player .
9256	Advance the player s robots .
9257	End the game .
9258	Move a player .
9259	Play a game of naughts and crosses against the computer .
9260	Make a move .
9261	The winner of this board if one exists .
9262	Returns a generator yielding all possible wins .
9263	Process an item and upload it to the server .
9264	Open a spider .
9265	Upload a chunk to S3 .
9266	Create a fileobj from a gzip file .
9267	Get the current state of an account .
9268	Get the current state of an asset .
9269	Get a block by hash .
9270	Get the hash of a block .
9271	Get the system fee for a block .
9272	Get the contract state for the given script hash .
9273	Get the value of a raw transaction .
9274	Get a storage key for a script .
9275	Get the value of a tx_hash at the specified index .
9276	Invoke a JSON - RPC contract .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Call a jsonrpc method .
9282	Check if a string is a 256 - bit hash .
9283	Check if a string is a 160 - character hash .
9284	Encode invocation parameters into a list of strings .
9285	Decode an invocation result .
9286	Decorator to mark a function as first_kwonly_arg .
9287	Take a timezone - based instruction and apply it to dttm .
9288	Apply this datetime to a datetime in a timezone .
9289	Save the object to a file .
9290	Render the barcode .
9291	Calculate the checksum .
9292	Render the given code .
9293	Connect to a KVS server .
9294	Runs the s3 entrypoint .
9295	Download a file from a remote location .
9296	Upload a file to S3 .
9297	Downsync a section .
9298	Display the difference between the given section and the local filesystem .
9299	Parse an environment variable .
9300	Set a basic username and password .
9301	Sets the API key .
9302	Get json content from a folder .
9303	Get a list of schemas .
9304	Get a schema from a JSON file .
9305	Return a jsonschema . RefResolver object for the given schema .
9306	Validate an object against the schema .
9307	Returns a list of valid examples for this schema .
9308	Returns a list of invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of a OneDrive user .
9313	Get OneDrive object representing list of objects in a folder .
9314	Create a folder .
9315	Add comment message to a specified object .
9316	Convert or dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag&drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and then displays it
9324	Retrieves a parameter from a tag .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components one pixel at a time
9331	delete all of the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update
9334	When dealing with a Top - Level window position it absolute lower - right
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated wit the wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the item from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	called when adding a control to the window
9349	Re - parent a child control with the new wx_obj parent
9350	make several copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all the modules in the given rootpath .
9354	Return a list of children sub - components that are column headings
9355	Update the grid if rows and columns have been added or deleted
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	column -> sort the data based on the column indexed by col
9359	Remove all rows and reset internal structures
9360	Called to create the control which must derive from wxControl .
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell . Returns True if changed
9363	Return True to allow the given key to start editing
9364	This will be called to let the editor do something with the first key
9365	Decorator to register a type handler .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable all top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Sets the tag for the given object .
9373	Return an HTML representation of the auto summary table .
9374	Returns a Documenter instance for the given object .
9375	Mangle a signature .
9376	Import a module by its name .
9377	Autolink a role .
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string or None if cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Sets the icon for this object .
9386	Display or hide the window optionally disabling all other windows
9387	Open read and eval the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	convert gui2py attribute name from pythoncard legacy code
9393	Write content to the clipboard data can be either a string or a bitmap
9394	Find an autosummary in a docstring .
9395	Add the object and all their childs
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Returns a representation of the image .
9401	Decorator to create an expression filter .
9402	Decorator to create a node filter .
9403	Assert that the given path is the current path .
9404	Assert that the current path does not exist .
9405	Check if the given path exists .
9406	Check if the given path has no current path .
9407	Select an option .
9408	Apply a filter to a value .
9409	Return a webdriver object based on the given browser name .
9410	Return the XPath of the expression .
9411	Returns True if the given node matches the filters .
9412	Switch to a frame .
9413	Accept an alert .
9414	Accept a confirmation message .
9415	Dismiss a confirmation message .
9416	Accept a prompt .
9417	Dismiss a prompt .
9418	Save the page to a file .
9419	Save a screenshot .
9420	Raise a server error .
9421	Returns True if the given value matches the given node .
9422	Check if a field has been checked .
9423	Check if a field is not checked .
9424	Check if a field is unchecked .
9425	Check if a field is not unchecked .
9426	Assert that the query contains the given text .
9427	Assert that there is no text in the query .
9428	Assert a title .
9429	Assert that the query has no title .
9430	Check if the file has a title .
9431	Check if there is a title .
9432	Returns a list of all results matching the specified criteria .
9433	Find the first item in the list .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for setting properties .
9438	Decorator to synchronize a function .
9439	Check if an error should be caught .
9440	Returns the number of items in the cache that match the query .
9441	Returns True if the result cache is at least size bytes .
9442	Returns True if the given options are None .
9443	Formats a failure message .
9444	Check if the given count matches the given options .
9445	Normalizes a string .
9446	Normalize whitespace in text .
9447	Convert a string to a regex .
9448	Returns a boolean indicating if this URL is a valid URL for the given session .
9449	Resize window to given width and height .
9450	Start the WSGI application .
9451	Create a new AdvancedProperty with the given cgetter .
9452	Sets the instance method of this class .
9453	Separates the class method .
9454	Return the traceback of the most recent call .
9455	Return a string representation of the object source .
9456	Returns the logger for the given instance .
9457	Get a logger instance .
9458	Send a request to the API .
9459	Access the channels
9460	Access the users
9461	Create a message for a channel .
9462	Translate a message to slack .
9463	Send a message to a Slack channel .
9464	Read a message from a channel .
9465	Run the Slack API .
9466	Run the slack client .
9467	Compute the difference between two dicts .
9468	Colorize a message .
9469	Called when a task is started .
9470	Check if a result is OK .
9471	Prints a summary of stats for each host .
9472	Run a task on a skipped host .
9473	Convert a prefix to an address mask .
9474	Decorator to check if a value is empty .
9475	Add a model to the list of supported models .
9476	Returns a dictionary containing all the elements of the object .
9477	Load a dictionary of attributes .
9478	Return a dict representation of the object .
9479	Parse a config file .
9480	Parse the state of a device .
9481	Translate the config .
9482	Load all filters from JINJA_FILTERS
9483	Find a YANG parsing file .
9484	Convert a model to a dictionary .
9485	Returns the difference between f and s .
9486	Make a HTTP POST request to the given URL .
9487	Get the authorization code URI .
9488	Get a new token .
9489	Returns the query parameters for a given URL .
9490	Dequery a URL .
9491	Build a url from a base url .
9492	Handle an exception .
9493	Make a response .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get a token for a given grant type .
9499	Get the authorization code for a given URI .
9500	Get a token from a POST request .
9501	Returns an authorization object .
9502	Open the device .
9503	Read a byte from the device .
9504	Read bytes from a device .
9505	Read byte data from a bus .
9506	Write bytes to the device .
9507	Write a bytearray to the device .
9508	Write i2c block data .
9509	Return the cdn url .
9510	Create a copy of this object .
9511	Create a local copy of the file .
9512	Create a remote copy of a file .
9513	Construct a file object from a file_info object .
9514	Upload a file .
9515	Upload a file from a url .
9516	Upload a file from a URL synchronously .
9517	Returns a list of file cdn urls for this group .
9518	Construct a Group object from group_info .
9519	Create a group from a list of files .
9520	Make a request to the storage_url .
9521	Returns a generator of uuids for each file in the sequence .
9522	Print a list of items .
9523	Yields a progress bar .
9524	Make a request to upload a file .
9525	Home mode status .
9526	Get a list of cameras .
9527	Get camera information .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Returns a MotionSetting for a camera event .
9531	Saves the MDParam for a camera .
9532	Update the camera settings .
9533	Returns True if li is the last li in meta_data .
9534	Returns a generator that yields a single list node .
9535	Get the ilvl for a given namespace .
9536	Get a vMerge object from a tc file .
9537	Returns the grid span of a tc .
9538	Return the timedelta at the given index .
9539	Checks if a style is False .
9540	Check if a string is bold .
9541	Returns True if r is an italic .
9542	Check if a string is underlined .
9543	Returns True if p is a title .
9544	Returns a generator that yields text - run content data .
9545	Get information about a relationship .
9546	Parse a document . xml file .
9547	Returns the ordered list type for numId and ilvl .
9548	Build a list from a list of nodes .
9549	Build an etree element from a tuple .
9550	Build an etree . Element for a table .
9551	Get the content of a tag .
9552	Remove a tag from a tree .
9553	Find a dataset by url .
9554	Load mnist . pkl file .
9555	Load data from a CIFAR file .
9556	Plot an array of images .
9557	Plot a list of layers .
9558	Plot a list of filters .
9559	Create a batch from a list of arrays .
9560	Encode a string into a list of strings .
9561	Create a batch of classifiers .
9562	Predict a sequence of labels .
9563	Add weights for a convolutional model .
9564	Encode x using feed - forward .
9565	Decode a z - tuple .
9566	Find the output name of a layer .
9567	Compute the score of the autoencoder .
9568	Predict the value of x .
9569	Predict the probability of x .
9570	Predict the logit of x .
9571	Calculate the score of the prediction .
9572	Create a batch of features and labels at a given sequence length .
9573	Create a batch of sequences from a dataset .
9574	Load a network from a path .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Given a list of outputs and a list of patterns yield names and expressions that match .
9578	Given a list of layers and a list of patterns yield a list of names and params matching those patterns .
9579	Create a pattern from kwargs .
9580	Returns a list of variables .
9581	Calculate the accuracy of the model .
9582	Scan a list of inputs and outputs .
9583	Build an Activation .
9584	Create a reservoir from a list of matrices .
9585	Add a loss .
9586	Iterate over the dataset .
9587	Train a set of monitors .
9588	Returns a md5 hash of the model .
9589	Build the computation graph .
9590	Returns a list of all inputs in this layer .
9591	Returns a list of variables .
9592	Find the layer with the given parameter .
9593	Compile a feed - forward function .
9594	Predict the output of x .
9595	Calculate the score of the model .
9596	Save the model to a file .
9597	Load a Network from a file .
9598	Returns the loss of the graph .
9599	Returns a list of updates for this graph .
9600	The size of the output layer .
9601	Connect to a set of inputs .
9602	Bind to a graph .
9603	Resolve the inputs for the given layers .
9604	Resolve the outputs of the layer .
9605	Logs the current state of the layer .
9606	Returns the log of the parameters .
9607	Convert a string to a string .
9608	Resolve a shape from a list of layers .
9609	Find a key by name .
9610	Add a bias vector to the model .
9611	Return a dict representation of this object .
9612	Compute the log - gabor .
9613	Compute the log - gabor image .
9614	Add a new interval tier .
9615	Remove a tier .
9616	Get a tier by name .
9617	Convert to an Eaf object .
9618	Add a point to the intervals .
9619	Add an interval to the tier .
9620	Remove an interval from the tier .
9621	Remove a point from the intervals .
9622	Returns a generator yielding the intervals .
9623	Returns a list of all intervals .
9624	Indent an element .
9625	Add an annotation to a tier .
9626	Add a controlled vocabulary entry .
9627	Add a description to a controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type .
9632	Add a link to a file .
9633	Add a locale .
9634	Add a secondary linked file to the linked_file_descriptors dictionary .
9635	Add a tier .
9636	Remove all timeslots from self . timeslots
9637	Extract time slots between start and end .
9638	Generate an annotation id .
9639	Generate a time - stamp id .
9640	Get the child tiers for the given id tier .
9641	Returns the full time interval .
9642	Get the data for a reference annotation after a given time .
9643	Get the data for a reference annotation before a given time .
9644	Get tier ids for a given ling_type .
9645	Merge a list of tiers .
9646	Remove all annotations from a tier .
9647	Remove a description from a controlled vocabulary .
9648	Remove a license .
9649	Removes files that are linked to a file .
9650	Remove a property .
9651	Remove a reference annotation from a tier .
9652	Remove secondary linked files .
9653	Remove a tier .
9654	Remove a list of tiers .
9655	Rename a tier .
9656	Shift the number of annotations to the given time .
9657	Main entry point for optparse .
9658	Display debug information for the storage
9659	Get the base level of a text .
9660	Get the embedding levels for the given text .
9661	Add embedding and overrides to the storage .
9662	Calculate the number of runs for a given level .
9663	Resolve weak types .
9664	Resolve non - negative types from a list of runs .
9665	Reverse a contiguous sequence .
9666	Reorder the resolved levels .
9667	Process a maya scene .
9668	Convert a list of lines from PySide2 to QtCompat .
9669	Add an attribute to an object .
9670	Parse command line arguments .
9671	Ensure backward compatibility of the binding .
9672	Show a Maya window .
9673	Discover a gui and return it .
9674	Deregister a Maya host .
9675	Adds a script to the file menu .
9676	Ensure that a selection is maintained .
9677	Returns a generator that yields the maintained time .
9678	Show no GUI .
9679	Setup the types for this bot .
9680	Returns a generator that yields the cumulative data .
9681	Get values for a single axis in a dataset .
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters necessary to transform x & y coordinates
9684	Reverse a mapping .
9685	Yield a range of floats from start to stop .
9686	Add a data descriptor to the dataset .
9687	Add svg definitions
9688	Add a new conf to the data dict .
9689	Render the graph .
9690	Calculate the left margin .
9691	Calculate the margin of the right key .
9692	Calculate the top margin .
9693	Add a popup .
9694	Calculate the bottom margin .
9695	Draw the graph .
9696	Make a datapoint text .
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X - axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard - code the styles into the SVG XML if style sheets are not used .
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to a PRIVMSG message .
9709	Dispatch patterns .
9710	Create a new nick .
9711	Handle a PING request .
9712	Handle registered messages .
9713	Enter the event loop .
9714	Register the node with the boss .
9715	Task runner .
9716	Requires a callback to be called by the boss .
9717	Returns a list of command patterns .
9718	Register a success message .
9719	Execute a task on a worker .
9720	Add a nick to the worker list .
9721	Send validation email .
9722	Send a password reset notification .
9723	Validate a password strength value .
9724	Verify a user token .
9725	Delete a user .
9726	Returns True if the user can view the given view .
9727	Return a ThreadPoolExecutor instance .
9728	Return a docker APIClient instance .
9729	Get a TLS client .
9730	Return the service name .
9731	Execute a docker method .
9732	Submit a method to a docker server .
9733	Poll the Docker service to see if it is running .
9734	Stop the Docker service .
9735	Adds a filter to the queryset .
9736	Update an existing password .
9737	Update the instance with the new password .
9738	Validate an email address .
9739	Create a new token and return it .
9740	Delete a token .
9741	Initialize a ResendConfirmationEmail .
9742	Send a POST request .
9743	Updates the expiry of this object .
9744	Context for password reset email notification .
9745	Handle an email notification .
9746	Sets the email subject of the password reset notification .
9747	Adds a validation email subject to a notification .
9748	Authenticate the user with the given request .
9749	Authenticate the user with the given key .
9750	Show the contents of a notebook .
9751	Process a list of bokeh plots .
9752	Returns a custom JS callback for the given change .
9753	Get a widget for a given parameter name .
9754	Render a bokeh function .
9755	Create a text widget .
9756	Return a list of named objects .
9757	Returns the owner of the method .
9758	Assign HTTP Auth Credentials to the user and password .
9759	Ping the device .
9760	Send a GET request and return the result .
9761	Get the health of the cluster .
9762	Convert a bytes number to a readable string .
9763	Returns the total CPU load .
9764	Returns the memory size in bytes .
9765	Returns the total number of devices connected to the network .
9766	Returns a list of volumes .
9767	Get a volume by its id
9768	Returns the total size of a volume .
9769	Returns the percentage used of a volume .
9770	Returns the average disk temperature for a given volume .
9771	Returns the maximum disk temperature for a volume .
9772	Get the disk with the given id .
9773	Authenticate using the SYNO API .
9774	Get a URL from the server .
9775	Execute a get URL request .
9776	Update the entry s utilisation .
9777	Returns a SynoUtilization instance .
9778	Returns a SynoStorage instance .
9779	Create a Tenant object for a given request .
9780	Returns the tenant token .
9781	Helper function for building an attribute dictionary .
9782	Override settings . INSTALLED_APPS .
9783	Override settings . INSTALLED_APPS if any of them are not in apps .
9784	Returns a dict of all global settings .
9785	Perform a GET request to the server .
9786	Get a value from the config .
9787	Change a value in the config file .
9788	Migrate OAuth2Util config file .
9789	Start a web server .
9790	Wait for a response from the server .
9791	Get new access information .
9792	Check if the token is present .
9793	Set access credentials for Reddit .
9794	Refresh OAuth2 tokens .
9795	Create a manifest table .
9796	Split a full path into bucket and prefix .
9797	Check if a bucket is a glacier .
9798	Extract a run id from a key .
9799	Clean a dictionary .
9800	Add a table to a manifest .
9801	Check if a table is in a manifest .
9802	Extract a Snowplow schema from a URI .
9803	Convert a schema to a snake - case schema .
9804	Parse a list of contexts .
9805	Parse an unstructured event .
9806	Transform a JSON event into a python event .
9807	Convert a SnowplowEventTransformation to a JSON string .
9808	Returns the name of the template used in the response .
9809	Print a django context .
9810	Prints the variables in the context .
9811	pformat_sql_html .
9812	pformat_django_context_html
9813	pformat_dict_summary_html
9814	Helper function to style the given text .
9815	Format an object .
9816	Format an object to a stream .
9817	Get a token from a Latex string .
9818	Get a list of nodes in a Latex object .
9819	Convert a list of nodes to text .
9820	Sets the tex_input_directory .
9821	Read a file from the input directory .
9822	Convert a LaTeX object to text .
9823	u Convert a Unicode string to a LaTeX string .
9824	Convert a string to unascii .
9825	Fetches information about the organisation .
9826	Get a list of boards .
9827	Returns a list of all members of the URI .
9828	Update an organisation .
9829	Remove a member .
9830	Add a member by id .
9831	Add a member to the group .
9832	Fetches a list of information from the server .
9833	Add a card to the account .
9834	Fetches the label information from the API .
9835	Returns a list of items .
9836	Update the label name .
9837	Updates the label dict .
9838	Get the user authorisation URL .
9839	Get card information .
9840	Get a board from the API .
9841	Create a list from a URI .
9842	Returns a list of checklists for the given query parameters .
9843	Add a comment .
9844	Add an attachment to a file .
9845	Add a checklist to the database .
9846	Add a label from a dictionary .
9847	Add a label from a class .
9848	Add a member to this group .
9849	Get member information .
9850	Get a list of cards .
9851	Returns a list of organisations .
9852	Create a new board .
9853	Decorator to register a single - dispatch method .
9854	Fetches information about the board .
9855	Returns a list of lists matching the given query parameters .
9856	Returns a list of labels .
9857	Get a card by its id
9858	Returns a list of all available checklists .
9859	Get information about an organisation .
9860	Update the board .
9861	Add a list to the database .
9862	Add a label to the list .
9863	Fetches the checklist information .
9864	Get a card from the checklist .
9865	Returns a list of items matching the given query parameters .
9866	Updates a checklist .
9867	Add an item to the checklist .
9868	Remove an item from the list .
9869	Update the name of a checklist .
9870	Update the state of a checklist .
9871	Add an Authorisation to the query .
9872	Raise an exception if a resource is not available .
9873	Build a URI from a path .
9874	Fetch JSON data from a URI .
9875	Create an organisation .
9876	Create a new board .
9877	Create a new label .
9878	Create a list .
9879	Create a new card .
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organisation .
9883	Get a board by id .
9884	Get a list by id .
9885	Get a card by id .
9886	Create a new checklist with the given id .
9887	Create a new member .
9888	Extract a domain from a URL .
9889	Convert a string to a plain text token .
9890	Convert a string to raw text .
9891	Convert a string to a list of sentences .
9892	Set a password for a service .
9893	Split text with locations .
9894	Mark a string as a regex .
9895	Mark a regex as beginning and ending .
9896	Run a command line tool .
9897	Create a new AES cipher .
9898	Get the AES mode .
9899	Returns the priority of this package .
9900	Check the encryption scheme .
9901	Publish a message .
9902	Create a unique identifier .
9903	Connect to the MQTT server .
9904	Handle a CONNACK packet .
9905	Encodes a string to UTF - 8 .
9906	Decode a string .
9907	Encode a 16 - bit integer .
9908	Encode a 128 - bit value into a bytearray .
9909	Decodes the length of a string .
9910	Encode the header to a string .
9911	Encodes this message into a byte string .
9912	Decode a packet .
9913	Encode the result into a string .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode this message .
9917	Encode the message .
9918	Decode a packet .
9919	Encode the message .
9920	Encode the message .
9921	Decode a packet .
9922	Decode a packet .
9923	Returns a URL to the VK API .
9924	Make a request to the API .
9925	Refreshes the block list .
9926	Format data into a numpy array .
9927	Fit the data using the standard scaler .
9928	Fit the KMeans algorithm to the given data .
9929	Fit a MeanShift to the given data .
9930	Fit the model to the data .
9931	Returns a list of clusters for the given data .
9932	Map cluster ids to sampled clusters .
9933	Sort clusters by their mean and rank .
9934	Convert a datetime to a datetime object .
9935	Returns the total number of points in a dictionary .
9936	Returns the total time span in seconds .
9937	Returns a unitpicker for a metric .
9938	Return a pretty representation of a string .
9939	Analyte 2 namemass .
9940	Convert analyte to massname .
9941	Collect data from a CSV file .
9942	Enumerate a boolean array .
9943	Convert a tuple to a boolean .
9944	Fast - smooth a matrix .
9945	Compute the fast - grading of a matrix .
9946	Find the minimum value of x and y .
9947	Cluster mean - shift .
9948	Cluster n_clusters with k - means .
9949	Cluster data using DBSCAN .
9950	Get a defined SRM from a SRM file .
9951	Read a LaTeX configuration .
9952	Read latools . cfg .
9953	Print all LAtools configurations .
9954	Copy a Latools SRM file to the specified destination .
9955	Create a LaTeX configuration file .
9956	Change the default configuration .
9957	Exclude downholes from a filt .
9958	Defragment a Filter .
9959	Despike the data .
9960	Plot the autorange of the data .
9961	Returns the mkrngs of the bkgrng and trnrng .
9962	Return the ratio of the analytes to the internal standard .
9963	Called to calibrate the data .
9964	Sample stats from analytes .
9965	Returns the ablation times of the time series .
9966	Filter an analyte by a given threshold .
9967	Filter analyte based on a gradient threshold .
9968	Calculate the correlation between two analytes .
9969	Filter the correlation between two analytes .
9970	Create a new filter .
9971	Returns a dictionary containing the parameters of the filter .
9972	Plot histograms .
9973	Compute summary statistics for x and y .
9974	Load reference data from Google Spreadsheets .
9975	Lookup a type from a TC and a type variable .
9976	Calculate the atomic weight of an element .
9977	Calculate the M of a molecule .
9978	Generate ANSISequences tuple .
9979	annihilate a predicate from a stack .
9980	Deduplicate a stack into a tuple .
9981	Gaussian weighted statistics .
9982	Gaussian Gaussian .
9983	Return the stderr of an array .
9984	Returns a list of samples from a subset .
9985	Despike the data .
9986	Calculate the weighted mean .
9987	Calculate the interpolation of the bkg .
9988	Subtract a set of analytes from the Bkg .
9989	Calculate the ratio of the data .
9990	Create a subset of the analysis .
9991	Filter an analyte by a threshold of percentiles .
9992	Fit a classifier to the data .
9993	Apply a classifier to the data .
9994	Filter the correlation between two analytes .
9995	Turn the filter on .
9996	Turn off a filter .
9997	Returns a string describing the status of the filter .
9998	Defragment the data with a filter .
9999	Filter samples by number of samples removed .
10000	Plot a histogram of the gradients .
10001	Plot a gradient crossplot .
10002	Plot histograms .
10003	Generate tracing plots .
10004	Generate gradient plots .
10005	Filter reports by analytes .
10006	Sample the stats from analytes .
10007	Returns a list of stats for each sample .
10008	Minimal export of traces .
10009	Export traces to a zip archive .
10010	Save the log to a directory .
10011	Export a minimal set of traces .
10012	Parse a regex file .
10013	Map function fa to function f .
10014	Plot a pca at a given time .
10015	Compute the Bayes scale of a matrix .
10016	Returns a scaler for the median value of s .
10017	Noise despike .
10018	Computes the expdecay decomposition of a signal .
10019	Add a new component to the set .
10020	Remove a component from the set .
10021	Clears all components and analytes
10022	Remove all unused switches and analytes .
10023	Returns True if the given fuzzkey matches one or more filter names equally well .
10024	Convert a key to a string .
10025	Grab a filter and return it .
10026	Returns a string containing the information about the component .
10027	Decorator to log a function .
10028	Write a log file .
10029	Read a log file .
10030	Decorator for autologin functions .
10031	Get information about the server .
10032	Send a message to an eternalegypt server
10033	Parse a file - like or string object .
10034	Return a link to nbviewer . jupyter .
10035	Returns a snippet of the thumbnail .
10036	Return the code snippet as a div .
10037	Return the code_example attribute .
10038	Returns the url of the site .
10039	Return the path to the output file .
10040	Process a notebook .
10041	Create a python file .
10042	Download data from a list of files .
10043	Create a new thumbnail .
10044	Get a description from a string .
10045	Scale an image .
10046	Save the image as a thumbnail .
10047	Return a copy of the thumbnail figure .
10048	Get the url for a file .
10049	Given a field name and a list of db_table_fields return a generator of db_change_languages .
10050	Create a function that returns the default value of a field .
10051	Process a thumbnail file .
10052	Save a model instance to a file .
10053	Refreshes the cache .
10054	Returns a list of all thumbnails .
10055	Create a new thumbnail .
10056	Delete the image at the specified size .
10057	Create a new thumbnail .
10058	Return a Thumbnail object for the given source name and size .
10059	Delete a thumbnail .
10060	Receive a message from the server .
10061	Subscribe to a callback for a given number .
10062	Returns a list of the states of this request .
10063	Add a provider .
10064	Send a message to the server .
10065	Create a receiver blueprint for a given provider .
10066	Returns the receiver blueprints for this provider .
10067	Receive a message from the gateway .
10068	Receive a status from the gateway .
10069	Decorator for JSONEx API calls .
10070	Forward an object to one or more clients .
10071	Sign a web3 transaction .
10072	Estimate tx gas using web3 .
10073	Estimate the amount of gas to use for a given operation .
10074	Write the specified number of bytes to the stream .
10075	Read a line from the stream .
10076	Send a message to the specified recipients .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Attach a file .
10080	Register a list of services .
10081	Create a Config object from a module .
10082	Register a list of resources .
10083	Returns the value for the given key .
10084	Exit obj with the given type and value .
10085	Setup the data manager .
10086	Returns the number of bytes in a given wavelength .
10087	Calculate the Cauchy equation .
10088	Initialize the backend .
10089	Login with the given username and password .
10090	Returns a dictionary of domain names .
10091	Get all links for a given endpoint .
10092	Patch an object .
10093	Send a DELETE request .
10094	Return True if path1 and path2 are the same file
10095	Create a junction link .
10096	Initialize the logger .
10097	Raise a UsageError .
10098	Return a list of unclaimed readers and a list of vcfReaders .
10099	Get a new column header from a vcf_reader .
10100	Claim a set of vcf and hc files .
10101	Initialize population statistics from a vcf file .
10102	Returns unclaimed_file_readers and translated_vcf_readers .
10103	Split a string into a list of lines .
10104	Return the prefix of a line terminator .
10105	Returns the terminator of the given string if it ends with the suffix .
10106	Seek the next line in the file .
10107	Seek the previous line of the file .
10108	Return the last line of the file .
10109	Return the head of the file .
10110	Returns a generator that yields lines from the file .
10111	Returns a list of strelka . vcfreaders .
10112	Parse a VCF record .
10113	Given a list of sample_names and a list of sample_fields return a list of sample_values .
10114	Returns a vcfRecord . _EMPTY_SET containing the tags .
10115	Join the info fields in the info_dict .
10116	Returns a string representation of the field .
10117	Return a string representation of a sample field .
10118	Returns tab - delimited newline terminated string of VcfRecord .
10119	Add a new sample tag value .
10120	Add or replace a filter .
10121	Return a list of all available categories for a user .
10122	Creates a ProductsForm for a given category .
10123	Returns a StaffProductsForm for the given user .
10124	Add an error for a product .
10125	Memoise a function .
10126	Returns a ModelFieldsForm for the given model .
10127	Returns the list of items pending or purchased .
10128	Send an email to a user .
10129	Iterate over the OSM stream .
10130	Parse an OSM file .
10131	Iterate over OSM notes .
10132	Returns True if the given user passes the filter .
10133	Returns True if the given user is met .
10134	Return the quantity remaining for a user .
10135	Returns a queryset filtered by the user .
10136	Returns a queryset filtered by the user .
10137	Pre - filter a queryset .
10138	Perform a pre - filter on the given user .
10139	Filter a user based on a condition .
10140	Decorator to memoise a function to modify a cart .
10141	Create a new reservation for a given user .
10142	Add a reservation to the cart .
10143	Apply a voucher to the cart .
10144	Validate the cart .
10145	Remove all valid vouchers from the cart .
10146	Recalculates all available discounts .
10147	Add a discount to the cart .
10148	Decorator to create a report view .
10149	Returns a generator that yields all rows of a given content type .
10150	Returns the form for the given request .
10151	Render the given data .
10152	List all reports .
10153	Return a list of items that have been sold .
10154	Returns a summary of the sales payment .
10155	Return a QuerysetReport of all payments .
10156	Returns a list of credit note refunds .
10157	Get the status of a product .
10158	Get the status of a discount .
10159	Returns a list of all line items in a product line .
10160	Return a list of invoices that have been paid by date .
10161	Return a QuerysetReport of credit notes .
10162	List all invoices .
10163	Return a list of attendees .
10164	List speaker registrations .
10165	Return a list of invoices .
10166	Returns a list of categories that are not available for the given context .
10167	Return the amount of credit available for a given context .
10168	Returns a boolean indicating whether the ticket is sold out or unregistered .
10169	Guided registration .
10170	Edit an attendee s profile .
10171	Handle a profile request .
10172	Return a list of available products for a given category .
10173	Handle products form .
10174	Handle a voucher .
10175	Checkout a user .
10176	Returns a redirect to invoice .
10177	View an invoice .
10178	Manually pay an invoice .
10179	Refund an invoice .
10180	Applies a credit note to an invoice .
10181	Modify the registration of a user .
10182	Extend a user s reservation .
10183	Send an invoice email .
10184	Returns a list of invoice badges .
10185	Render a user badge .
10186	Returns a list of all available discounts for a user .
10187	Annotate with past usages .
10188	Return a list of all available products for a user .
10189	Applies this credit note to an invoice .
10190	Calculate the cancellation fee .
10191	Generate a random access code .
10192	Lazy evaluate a function .
10193	Get an object from a name .
10194	Create a new invoice from a cart .
10195	Generate a manual invoice .
10196	Generate a product from a cart .
10197	Applies credit notes to an invoice .
10198	Checks if a user can view the invoice .
10199	Refresh the invoice from the database
10200	Validate that you are allowed to pay for unpaid invoices .
10201	Update the status of the invoice .
10202	Mark the invoice as paid .
10203	Returns True if the invoice matches the cart .
10204	Updates the validity of the invoice .
10205	Mark the invoice as void .
10206	Refund the amount of the invoice .
10207	Send an email to a user .
10208	Update the annotation .
10209	Flatten a field .
10210	Print the downloads .
10211	Download a field from gencloud .
10212	Get the data for a project .
10213	Returns a list of processors .
10214	Print the inputs of a given processor .
10215	Load data from a JSON string .
10216	Upload a project to a processor .
10217	Upload a file to the server .
10218	Download a field from the cache .
10219	Returns a list of all subclasses of c .
10220	Get repository and project .
10221	Get variant phenotypes with suggested changes .
10222	Get variant phenotypes with suggested changes merged .
10223	Search variants by their coordinates .
10224	Bulk search variants by coordinates .
10225	Load this element from the cache .
10226	Recursively uniqify a sequence .
10227	Authenticate to Asana API .
10228	Prompt the user to select a value from the list .
10229	Get the data for a saved issue .
10230	Moves the saved issue data to the other one .
10231	Get the data for a task that has been saved .
10232	Get an asana task by id .
10233	Save the data to a JSON file .
10234	Prompt the user for a value .
10235	Wrap a function in a transport task .
10236	Flush an item from the queue .
10237	Create a task in an asana workspace .
10238	Formats a list of task numbers with links .
10239	Create a missing task in a workspace .
10240	Returns a list of data types for this project .
10241	Log an ekmmeters debug message .
10242	Initialize the port .
10243	Sets the m_max_waits and m_wait_sleep values
10244	Combines two AB meter types .
10245	Renders a JSON string of the reads since the given timestamp .
10246	Sets the context of the request .
10247	Calculate the PF .
10248	Sets the maximum demand period .
10249	Sets the password for a given pwd .
10250	Unpacks a meter data structure .
10251	Convert meter data to meter data .
10252	Render meter data as a JSON string .
10253	Calculate the CRC of a meter read .
10254	Split an EK date into a namedtuple .
10255	Returns the mons buffer in the given direction .
10256	Sets the CTRatio .
10257	Assign a schedule to a period .
10258	Assigns a schedule to a season .
10259	Sets the season schedules .
10260	Assigns a holiday date .
10261	Reads the schedules from the specified tableset .
10262	Extracts a schedule for a given period .
10263	Reads monthly rates for a given month .
10264	Extracts the kWh tax for a given month .
10265	Reads the holiday dates .
10266	Extracts the holiday date for a given setting holiday .
10267	Reads the HolidayDates and MonthlyTariffs .
10268	Write a command message .
10269	Write a password string to the serial port .
10270	Updates the list of observer objects .
10271	Initializes the LCDLookup object .
10272	Make a request to the server .
10273	Send a request to the meter .
10274	Send a request to the meter .
10275	Creates an AB object from a list of values .
10276	Calculate the Fields of the BLK .
10277	Sets the LCDC password for a list of display items .
10278	Set the relay status .
10279	Send a termination string to the serial port .
10280	setPulseInputRatio - Sets the current input rate .
10281	Sets the KWH to zero .
10282	Sets the LCD for the given password .
10283	Iterate over fields in a schema .
10284	Iterate over fields in a schema .
10285	Returns a list of paragraphs .
10286	Generate a random string .
10287	Return the elapsed time and result as a string .
10288	Returns a string with the given color and text .
10289	Show a single line of text .
10290	Return a summary of a result .
10291	Parse command line arguments .
10292	Setup the formatter .
10293	Starts the test run .
10294	Transform an example loader into a python executable .
10295	Transform a description into a TestCase .
10296	Transform a description body into an example .
10297	Transform an example into a FunctionDef .
10298	Transform an example body into a node .
10299	Returns True if the argument takes only self .
10300	Register a path hook .
10301	Convert source_bytes to source_path .
10302	Apply an argument parser .
10303	Load a file by name .
10304	Load a source from a given path .
10305	Discover all files in a directory .
10306	Check the contents of a file in a given location .
10307	Returns a list of messages for a given receiver .
10308	Add a place to a directory .
10309	Remove a place from the filesystem .
10310	Restart one or more places .
10311	Call a function on the results .
10312	Get a message from the server .
10313	Create a service .
10314	Refresh a node s session .
10315	Remove expired nodes from the nodelist
10316	Remove a node from the nodelist
10317	Get the last update of a node .
10318	Get all nodes in the nodelist .
10319	Refreshes the session .
10320	Increment the number of times the key has been modified .
10321	Dereference a node .
10322	Returns a list of tokens interleaved with the delimiter .
10323	Check if a path is bad .
10324	Merge two statuses .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Create a callable that returns x as a constant .
10328	Splatter a function .
10329	Unsplatter a function .
10330	Run a process .
10331	Create a timer service .
10332	Completely parse a reader .
10333	Parse a list of literals .
10334	Return an OptionalParser for the given parser .
10335	Returns a RepeatedOnceParser for the given parser .
10336	Returns a RepeatedParser .
10337	Given a parser and separator return a RepeatedOnceSeparatedParser .
10338	Returns a RepeatedSeparatedParser .
10339	Check if a state exists .
10340	Close the state .
10341	Check if the state is closed .
10342	Adds a new heart to the master .
10343	Wrap a service s heart .
10344	Freeze a graph from a checkpoint .
10345	Freeze a checkpoint .
10346	Save a graph to a file .
10347	Save a graph only from a checkpoint .
10348	Save weights from a checkpoint .
10349	Restore data from a checkpoint .
10350	Parse a tag .
10351	Render a tag .
10352	Validate that a tag requires at least one argument .
10353	Get context data .
10354	Parse a tag .
10355	Get the value of a context .
10356	Convert a Caffe to TensorFlow session .
10357	Freeze a tensorflow .
10358	Save a graph to a file .
10359	Create num_columns rows from num_columns .
10360	Group n items in iterable without filling it with string .
10361	Iterate over every item in an iterable .
10362	Remove duplicate items from an iterable .
10363	Return the next iterable and the original iterable .
10364	Takes an iterable until it satisfies the predicate .
10365	Partition count items into bin_size .
10366	Returns an always iterable for the given item .
10367	Suppress all exceptions from the given callables .
10368	Return duplicates of the given iterables .
10369	Assert that an iterable is ordered .
10370	Swaps the result of a partition on a missing item .
10371	Partition a dictionary into two dictionaries .
10372	Get the first n queues .
10373	Reset the iterator .
10374	Parse a token as a variable .
10375	Create a tag for a template .
10376	Return the public keychain descendant of the given chain path .
10377	Fetch a list of records from the sqlite master .
10378	Iterate over the nodes of an object .
10379	Returns True if obj matches the specified selector .
10380	Parse an object using a selector .
10381	Return a list of validators that can be used to select a selector .
10382	Returns a list of nodes that have a parent in lhs .
10383	Return a list of ancestors of a node .
10384	Return the siblings of a node in a list .
10385	Return the nth child production of lexeme .
10386	Returns a list of validators that match the given object .
10387	Ping an ICMP port .
10388	Make a GET request to a Tensor .
10389	Expire the cache .
10390	Set the value of k to v .
10391	Get a tuple from the store .
10392	Returns True if the given key is present in the store .
10393	Checks if the given timestamp is valid .
10394	Initialize a NestBeaconValue object from a JSON string .
10395	Initialize a NISTBeaconValue object from an XML string .
10396	Returns the rendered content of the response .
10397	Get a filename from the logfile .
10398	Returns a list of rows .
10399	Validate a token .
10400	Returns the fernet engine .
10401	Validate a token against all supported algorithms .
10402	Create a new token .
10403	Compute the 32 - bit counter .
10404	Counter 64 - bit integer .
10405	Returns a timedelta of the average duration .
10406	Setup tensor outputs .
10407	Setup the sources .
10408	Send an event to a source .
10409	Stop the source watchdog .
10410	Parse a format string .
10411	Parse a line of log data .
10412	Validate that a field is valid at a given date .
10413	Validate that a message is provided to the requester when it is rejected .
10414	Verify that the token is valid .
10415	The name of the device .
10416	Warn about a nonlocal image URI .
10417	Connect the receivers of the request .
10418	Create a secret link .
10419	Send an accept notification to the user .
10420	Send confirmation emails .
10421	Sends an email verification notification .
10422	Sends a rejection notification to the user .
10423	Send an email notification .
10424	Create a new link .
10425	Validate the given token against the expected data .
10426	Revoke this link .
10427	Create a new Request object .
10428	Get a user by a receiver .
10429	Confirm that the email address is valid .
10430	Accepts a request .
10431	Reject the request .
10432	Create a secret link .
10433	Return a SHA512 hash .
10434	Verify a message .
10435	Check if a record is embargoed .
10436	Make an access request to a record .
10437	Confirm a record .
10438	Create a new SSHCommandClientEndpoint .
10439	Reverse the value of a column .
10440	Returns the item that has been selected .
10441	Returns a list of the items in the query .
10442	Return the version of the file .
10443	Set the version of the file .
10444	Initialize ssh configuration .
10445	Start the timer .
10446	Check if the service is running .
10447	Delete a secret link .
10448	Create a Riemann client .
10449	Stop the connection .
10450	Empty the queue .
10451	Called when an event is received .
10452	Create a connection to the server .
10453	Create a new Elasticsearch client .
10454	Encode a protobuf event .
10455	Encode the given events into a protobuf message .
10456	Decode a message from a string .
10457	Send a series of events to the device .
10458	Generate a file preview .
10459	Retrieve a preview .
10460	Send a r_q message .
10461	Send a message to the worker loop .
10462	Returns True if the log time is greater than the time_interval .
10463	Respond with an empty response to a challenge .
10464	Abort the session .
10465	u0020  u0020
10466	Returns an admin footer node for the given parser .
10467	Build a PaymentParameters object .
10468	Build a PaymentParameters object for registering a credit card .
10469	Make a payment with an alias .
10470	Return a string representation of the current version .
10471	Constructs the widget .
10472	Handle post - construction tasks .
10473	Configures the shortcuts .
10474	Called when an item is activated .
10475	Called when the user selects an item .
10476	Sets the location of the widget at the given index .
10477	Convenience method to finalize options .
10478	Run pyside - rcc .
10479	Run the CleanCommand .
10480	Returns a list of all children of this object .
10481	Refetch all children .
10482	Returns the icon at the given index .
10483	Execute a command and wait for it to finish .
10484	Returns the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open file descriptors .
10487	Redirect the stream to the given target .
10488	Set the attributes of the form widgets .
10489	Import an application module .
10490	Import project modules from settings . INSTALLED_APPS
10491	Include the contents of the given parser .
10492	Get a gravatar url for a given object .
10493	Get an image of a Gravatar object .
10494	Check if path is a valid filesystem location .
10495	Check if url is a valid s3 location .
10496	Get the absolute path of a template file .
10497	List objects in the S3 bucket .
10498	Build a JSON representation of the Worklfow task .
10499	Execute the request to the GBDX API .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Create a new ApiClient .
10505	List the contents of a storage path .
10506	Download a file from a storage path .
10507	Check if a storage path exists .
10508	Get the parent entity of the given path .
10509	Create a directory .
10510	Upload a file to the server .
10511	Delete a folder .
10512	Validate a storage path .
10513	Create a new StorageClient .
10514	Create a new StorageRequest .
10515	Gets the details of an entity .
10516	Set the metadata for an entity .
10517	Get the metadata for an entity .
10518	Update the metadata for an entity .
10519	Delete metadata for an entity .
10520	Fetches a list of projects .
10521	Get project details .
10522	Create a new project .
10523	Delete a project .
10524	Create a new folder .
10525	Get the details of a folder .
10526	Delete a folder .
10527	Upload a file to the storage .
10528	Copy the contents of a file to another file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record to the collection .
10532	Returns the service url for the given service and version .
10533	Return a copy of this object with the given headers .
10534	Return a new instance with the given parameters .
10535	Throw an exception .
10536	Get a list of fields from the database .
10537	Add a function to a map job .
10538	Generate genotype GVCFs .
10539	Run Oncotator on a vcf .
10540	Sort the list .
10541	Returns a list of datetime objects .
10542	Load data . json from a folder .
10543	Shift the t - axis .
10544	Returns the sum of all values .
10545	Collect rfxcom data from a serial device .
10546	Create a new user .
10547	Parse VN results from a soup .
10548	Parse the release results from a table .
10549	Parse the results of a staff search .
10550	Parse character results from a table .
10551	Parse tags from a soup .
10552	Parse user results from a table .
10553	Tarball a list of files into a directory .
10554	For all files in file_paths in output_dir .
10555	Copy a file job to a local temporary directory .
10556	Make parameters for Spark .
10557	Returns a list of docker parameters .
10558	Refresh the metadata .
10559	Run Mutect on a BAM file .
10560	Create a new file in the database .
10561	Return a list of streams from the database .
10562	Export the device data to a directory .
10563	Search for a VNDB .
10564	Parse search results .
10565	Add a stream to the query .
10566	Reset the device s API key .
10567	Return a list of all users in the database .
10568	Run a BWA index .
10569	Connect to the ConnectorDB server .
10570	Add a stream to the connector database .
10571	Add a stream to the database .
10572	Insert a new value into the cache .
10573	Sync all the datapoints in the database .
10574	Start the syncer .
10575	Stops the sync thread .
10576	Download a job from a given url .
10577	Upload an S3AAM file to S3 .
10578	Get a list of labels for an ontology .
10579	Generates a tree of ontologies .
10580	Calculate the mean insert size for a given bam .
10581	Get the current Docker container ID .
10582	Download and run a tar archive .
10583	Create a new schema .
10584	Export the stream to a directory .
10585	Returns a Device object from the database .
10586	Get a list of labels for an ontology .
10587	Get the hierarchy for an ontology .
10588	Run a ruamel command .
10589	Populate the parser from a config file .
10590	Get empty config file .
10591	Get the mount path for the container .
10592	Add an option to the parser .
10593	Creates an argument parser for this workflow .
10594	Create a pipeline command .
10595	Set a user s auth .
10596	Handle the result of the request .
10597	Ping the server .
10598	Create a new file at path .
10599	Update a file .
10600	Delete a file at path .
10601	Subscribe to a stream .
10602	Create a new account .
10603	Return a list of all devices in the database .
10604	Run a cut adapter on two fastq files .
10605	Run samtools faidx .
10606	Run samtools index .
10607	Run sambamba markdup on the given bam .
10608	Run samblaster on a sam file .
10609	Mark duplicates in a BAM file .
10610	Run Picard sort .
10611	Run a base recalibration .
10612	Download and run Kallisto .
10613	Download and run the rsem . tar . gz file .
10614	Get the user affinity for a test .
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Connect to the server .
10618	Reconnect to the server .
10619	Resubscribe to all subscriptions .
10620	Called when the Websocket is opened .
10621	Called when the Websocket is closed .
10622	Called when a connection error occurs .
10623	Called when a message is received from the server .
10624	Ensure that the connection is pinged .
10625	Run GATK SelectVariants to select variants .
10626	Perform variant filtration on a vcf .
10627	Run GATK variant recalibrator .
10628	Apply variant recalibration using GATK .
10629	Combine variants in a genome using GATK .
10630	Perform a quick check of a bam file .
10631	Load handlers from a handler mapping .
10632	Write configuration to a JSON file .
10633	Load the configuration from a JSON file .
10634	Get the term for the given ontology and IRI .
10635	Perform an ontology search .
10636	Suggest a new ontology .
10637	Iterate over the descendants of the given ontology .
10638	Iterate over the descendants of the given ontology .
10639	Iterate over the labels for the given ontology .
10640	Iterate over the terms in the hierarchy .
10641	Run a fastqc job .
10642	Add a stream to the query .
10643	Create a Flask application .
10644	Start a Spark master container .
10645	Start a new Spark worker .
10646	Start a datanode .
10647	Stop the Spark worker .
10648	Checks the status of the container .
10649	Tokenizer . Generates tokens stream from text
10650	Lookup a zone .
10651	Fetch the config for a given zone .
10652	Merge config chunks into a single resource record set .
10653	Validate a changeset .
10654	Returns a list of members with the lowest fitness score .
10655	Returns the fitness score of the group .
10656	Returns the value of the cost function for each process .
10657	Returns the median cost_fn for each member of the group .
10658	Returns a dictionary containing the parameters of this process .
10659	Returns a list of the members of this process .
10660	Add a new parameter .
10661	Generate the next generation of the population .
10662	Normalize a list of keys .
10663	Returns a generator yielding all environment variables .
10664	Returns True if the given callable throws an exception .
10665	Transform a list of hits into a list of packages .
10666	Transform a result to a string .
10667	Convert html to XHTML .
10668	Convert XHTML to HTML .
10669	Convert an etree document to a string .
10670	Open a document in a web browser .
10671	Remove this tree from the tree .
10672	Drop the tag .
10673	Get an element by its id .
10674	Returns a CSSSelector for the given expression .
10675	Iterate over the members of a logging handler .
10676	Returns a dict of the number of tests in the environment .
10677	Check if a class is a single class .
10678	Check if a module is a single class .
10679	Validate a request s parameters .
10680	Validate a request s identifier .
10681	Decode a filesystem path .
10682	Escape a value from an iterable .
10683	Return the canonical name of an encoding .
10684	Read a BOM from the stream .
10685	Get the remote address for the given forwarded_for .
10686	Convert obj to Decimal or float .
10687	Parse a string .
10688	Parse a file into an ElementTree .
10689	Convert a beautiful_soup_tree to an html tree .
10690	Get the current traceback .
10691	Return a traceback of the exception .
10692	Render a summary of the call .
10693	Generate a plaintext traceback of the most recent call .
10694	Returns a list of lines that are annotated with the code .
10695	Render the source text .
10696	Returns True if egg_info matches search_name .
10697	Get the location of the project s index urls .
10698	Find all versions of a project .
10699	Find a requirement .
10700	Sort a list of links .
10701	Get the content - type of a URL .
10702	Returns a generator yielding all links .
10703	Returns True if the API is verifiable .
10704	Find all data files in src_dir .
10705	Remove files from package src_dir .
10706	Parse a requirements file .
10707	Joins the lines in an iterator .
10708	Ignore comments from iterator .
10709	Compile a marker .
10710	Visit a marker in the environment .
10711	visit an attribute node and return a copy of it
10712	Coerce a value to be a number .
10713	Return a copy of the current request context .
10714	Pushes the app context to the stack .
10715	Pops the context from the stack .
10716	Return a copy of this object .
10717	Matches the request .
10718	Push the request to the top of the stack .
10719	Make a path relative to the given path .
10720	Returns True if dist is editable .
10721	Add a preprocessor to the url value .
10722	Adds a function to the url defaults list .
10723	Register an error handler .
10724	Decorator to stream a generator or function with a context .
10725	Create a response object from a list of arguments .
10726	Generate a URL for the given endpoint .
10727	Safely join a file in a directory .
10728	Get the root path of an import .
10729	Returns a jinja loader for the template folder .
10730	Run a script .
10731	Get session cookie domain .
10732	Returns a cache directory for the given link .
10733	Check if a directory is a purelib directory .
10734	Return a list of uninstallation paths for the given dist .
10735	Check if a wheel is compatible with a given version .
10736	Build a wheel from a request .
10737	Iterate over all symbols in a code object .
10738	Decorator to ensure that rates are updated every 5 minutes .
10739	Add egg info to the filelist .
10740	Write a PIP_DELETE_MARKER_FILENAME to a file .
10741	Return True if running under a virtualenv .
10742	Get a user s name .
10743	Install a distutils distribution .
10744	Parse Cache - Control headers .
10745	Check if a request has been cached .
10746	Cache a response .
10747	Update the zipimporter cache .
10748	Load setuptools template .
10749	Install site . py .
10750	Save the file to disk .
10751	Converts a value into a dict .
10752	Add a filter to the config .
10753	Configure the handler based on the config .
10754	Add handlers to a logger .
10755	Create a common logger config .
10756	Execute a script from a file .
10757	Override a temporary directory .
10758	Returns the url and revision of the repository .
10759	Get an item from obj .
10760	Generate a file from a source file .
10761	Compile jinja2 templates .
10762	Return the default python egg cache path .
10763	Find eggs in a zip archive .
10764	Find a distribution on a given path .
10765	Declare a package namespace .
10766	Get the MRO of a class .
10767	Find an adapter for an object in the registry .
10768	Ensure that path is a directory .
10769	Iterate over all entry points in a group .
10770	Returns True if dist can be added .
10771	Find the best match for a given req .
10772	Evaluate a marker .
10773	Evaluate the Markerlib environment .
10774	Format a log record .
10775	Format a number into a currency .
10776	Parse a number pattern .
10777	Converts a precision to a decimal . Decimal .
10778	Returns the decimal precision of a number .
10779	Return the scientific notation elements for a given value .
10780	Returns the total number of seconds of a timedelta .
10781	Parse a string of requirements .
10782	Check if distutils has been patched .
10783	Raise DistutilsSetupError if value is not a valid requirement .
10784	Fetch a build egg .
10785	Perform a dice roll .
10786	Convert a price object to a PriceClass .
10787	Create a price object .
10788	Validate a request .
10789	Get a method by id .
10790	Apply a method to the server .
10791	Deprecated . Use request . blueprint instead .
10792	Return the blueprint of the url rule .
10793	Attach the enctype error to the request . files .
10794	Make an abstract distribution from a request .
10795	Add a requirement to the environment .
10796	Walk from a list of requirements to a list of installed requirements .
10797	Check if req_to_install should be skipped .
10798	Returns a list of dependencies to install .
10799	Returns a list of all namespace packages .
10800	Returns the default value for the given object .
10801	Tokenize a document with an annotation .
10802	Merge annotations from two HTML strings .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Given a list of tokens and a markup function return a generator of tokens .
10806	Expand a list of tokens .
10807	Locate an unbalanced end .
10808	Given a list of tuples return a list of tuples where each tuple is a tuple and each tuple is a tuple .
10809	Flatten an HTML element .
10810	Return a list of words from a string .
10811	Return the start tag of an element .
10812	Return the end of a tag .
10813	Serialize an etree element into an HTML string .
10814	Fix up ins and delete tags .
10815	Extract a constant from a code .
10816	Return a cache URL for this service .
10817	Creates an autolink for the given element .
10818	Kill all conditional comments in a document .
10819	Create a document from a string .
10820	Decorator for API returns .
10821	Get a tree walker for a given tree type .
10822	Export a svn repository to a location .
10823	Get the revision for a given location .
10824	Decorate a function to be called before the application starts serving requests .
10825	Return the name of the import .
10826	Propagate exceptions .
10827	Find the path to the instance of this import .
10828	Update the template context .
10829	Handle HTTP exceptions .
10830	Trap HTTP exceptions .
10831	Handle an exception .
10832	Raise a routing exception .
10833	Dispatches the request to the user .
10834	Returns the default HTTP response for the given HTTP options .
10835	Create a URL adapter for the given request .
10836	Inject url_default_functions into the endpoint .
10837	Yield unique values from an iterable .
10838	Handle MayRequires .
10839	Convert a list of requirements to a list of requirements .
10840	Convert a pkginfo file to a metadata file .
10841	Returns a generator yielding all modules in the current directory .
10842	Returns a list of all classes in this object .
10843	Returns a list of method names .
10844	Find a basename from a list of basenames
10845	Check if the given path is a module path .
10846	Returns a generator yielding all files in basedir .
10847	Returns a generator yielding all the paths to the files in this directory .
10848	Dump args to defaults .
10849	Load default values from kwargs .
10850	Set many items in a mapping .
10851	Increment the value of a key .
10852	Dump an object to a string .
10853	Build a dict of editable options from a request .
10854	Populate the link with the given finder .
10855	Ensures that the source directory exists .
10856	Remove a temporary source .
10857	Returns a pkg_resources . Distribution object .
10858	Load the form data and return it .
10859	Returns the WSGI headers for the given environment .
10860	r Convert an IRI to a URI .
10861	r Return the path to the user s cache directory .
10862	Return the user - data directory for a given application .
10863	Return a full path to the user s log directory .
10864	Return the user s config directory .
10865	Return a list of site - specific config directories .
10866	Iterate over all . pyc and . pyo files .
10867	Restart with a reloader .
10868	Convert a string to text .
10869	Find a CA bundle .
10870	Parse an HTML document .
10871	Parse a stream into a document .
10872	Parse a fragment from a stream .
10873	Translate a word .
10874	Convert args to tokens .
10875	Bind the request to the server .
10876	Print report to stdout .
10877	Load bytecode from a file .
10878	Returns a dictionary of stylesheet parameters .
10879	Run a command and return the result .
10880	Get the python version .
10881	Return a list of distributions for a given location .
10882	Find external links to a page .
10883	Open a local url .
10884	Process a URL .
10885	Returns a list of paths that have been removed .
10886	Initialize sys . path info .
10887	Add a package to a directory .
10888	Add a site directory .
10889	Check if a user site is enabled .
10890	Add site - packages to a list of known paths .
10891	Sets up the Quitter class .
10892	Create an alias for mbcs .
10893	Set the encoding .
10894	Force global eggs after local site packages .
10895	Fix python classpaths in sys . path .
10896	Popen a subprocess with non - blocking output .
10897	Check if we have a Pyrex build extension .
10898	Convert pyx sources to language .
10899	Debug an application .
10900	Get a resource by filename .
10901	Create a user agent .
10902	Returns True if the given name is a URL .
10903	Unpack a file from a URL .
10904	Download a file from a URL .
10905	Check if a download directory exists .
10906	Register a currency .
10907	Register an exchange for a component .
10908	Decode a response .
10909	Returns the default template ctx processor .
10910	Render a template .
10911	Render a template .
10912	Render a template string .
10913	Parse a Python version .
10914	Check if a parameter is declared locally .
10915	Visit a node s identifiers .
10916	Visit a Include node .
10917	Visit a module from an import .
10918	Create a wheelfile and add it to the base directory .
10919	Decorator to atomize a function .
10920	Create a service factory .
10921	Encode obj to unicode .
10922	Returns True if req matches the requirements .
10923	Populate a requirement set .
10924	Export a file to a given location .
10925	Lookup an Amazon Product .
10926	Iterate over all pages .
10927	Returns the ancestor of this node .
10928	Return a list of all children of this node .
10929	Get an element from a path .
10930	Safely get the text of an element .
10931	Safely get an element date .
10932	Get the price and currency of the offer .
10933	Returns the list price for this item .
10934	Send a request to the Cache .
10935	Build a response from a request .
10936	Make an attrgetter for the given environment .
10937	Return the title of a string .
10938	Perform a sort operation on a string .
10939	Group a value by an attribute .
10940	Call a function with the given arguments and kwargs .
10941	Create a logger .
10942	Return True if val1 and val2 are constant times .
10943	Verify a signature .
10944	Derives a key from the secret key .
10945	Get the signature for the given value .
10946	Return a signed version of the value .
10947	Verify the signature of a value .
10948	Unsign a value .
10949	Return a signed version of the value .
10950	Validate a signed value .
10951	Serialize obj to bytes .
10952	Raise a ServiceException for a server error .
10953	Returns a list of packages matching the given criteria .
10954	Given a list of packages return a generator yielding all the packages that require their parents .
10955	Iterate over all directories in base_path .
10956	Prepare a HTTPResponse .
10957	Unsign a RECORD . jws file .
10958	Unpack a wheel file .
10959	Install the scripts for the given distributions .
10960	Arranges all the data in the graph .
10961	Redraw the canvas .
10962	Return the node with the given ID .
10963	Called when a direction is changed .
10964	Add edges to the graph .
10965	Called when a component has changed .
10966	Normal left click event handler
10967	Called when the diagram canvas changed .
10968	Clear the diagram canvas .
10969	Called when a domain model has changed for a diagram .
10970	Map the domain model .
10971	Remove a map element from the model .
10972	Map an element to a diagram .
10973	Create a pydot node .
10974	Parse xdot data .
10975	Process a set of tokens into a font .
10976	Process an ellipse component .
10977	Construct a Polygon object from a list of tokens .
10978	Create a Polyline component from a list of tokens .
10979	Process a text component .
10980	Process an image .
10981	Render a GridFS file .
10982	Save a dot file to disk .
10983	Load a dot file .
10984	Returns True if point_x is in point_y .
10985	Draw the bounds .
10986	Perform a new dot graph wizard .
10987	Connect to the SQLAlchemy database layer .
10988	Parse the dot code .
10989	Create a new graph .
10990	Open a Graphviz file .
10991	Save info to a file .
10992	Save the graph as a file .
10993	Configure the graph .
10994	Configure the nodes .
10995	Configure the edges view .
10996	Edit a Godot trait .
10997	Add a node to the graph .
10998	Add an edge to the graph .
10999	Add a subgraph to the graph .
11000	Add a cluster to the graph .
11001	Request a graph from the user .
11002	Edit options .
11003	Configure the dot_code view .
11004	Prompt the user to exit .
11005	Move components from origin to origin .
11006	Save this object to a file - like object .
11007	Load this object from a file - like object .
11008	Save the object to a file .
11009	Load an object from a file .
11010	Create an Alias property .
11011	Parse a text file .
11012	Returns a list of start words .
11013	Add a chain to the Markov chain .
11014	Remove a chain by name .
11015	Build a chain from source to chain .
11016	Generate a random sentence from a chain .
11017	Create a new program .
11018	Add a node to the graph .
11019	Delete a node .
11020	Get a node by ID .
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when a program is changed .
11025	Sets the node lists for each edge .
11026	Parse a DOT file .
11027	Parse a dot file .
11028	Build a top - level graph .
11029	Build a graph from tokens .
11030	Returns the units and the multiplier for a given number of seconds .
11031	Format a duration in seconds .
11032	Load the graph from the editor .
11033	Create a new user interface .
11034	Split a sequence into n parts .
11035	Yield a list of windows from an iterable .
11036	Run the application .
11037	Return a list of all children of the given object .
11038	Append a child to the given object .
11039	Insert a child into the graph .
11040	Delete a child node or edge from an object .
11041	Called when children are replaced .
11042	Called when the children of an object have changed .
11043	Return the label for the given object .
11044	Set the label of an object .
11045	Called when the label of an object changes .
11046	Initialize the graph .
11047	Update the editor .
11048	Add listeners to the graph .
11049	Replace a node with a new one .
11050	Called when the nodes have changed .
11051	Add nodes to the graph .
11052	Replace an edge with a new one .
11053	Called when an edge is changed .
11054	Add edges to the graph .
11055	Parse an XDot directive .
11056	Called when an object is drawn .
11057	Return a node from a row factory .
11058	Create an edge factory .
11059	Set up the MongoEngineProxy connection .
11060	Parse the XDot drawing directive .
11061	Parse the xdot label directive .
11062	Called when the drawing has changed .
11063	Called when a position change occurs .
11064	Called when a position has changed .
11065	Normal right - down event handler .
11066	Highlight information about a style .
11067	Draw the main layer .
11068	Check if a point is inside a polygon .
11069	Draw the main layer .
11070	Handle an event .
11071	Run the function in the queue .
11072	Get the full page URL for a given page number .
11073	Render the previous and next links .
11074	Render the SEO links .
11075	Checks if the given content type matches the given pattern .
11076	Select the content type based on the given pattern .
11077	Rewrite a URL .
11078	Remove url auth from url .
11079	Create URL identifier .
11080	Normalize a host string .
11081	Find all modules in a directory .
11082	Find all modules in a directory .
11083	Return a list of all modules in mname .
11084	Return a list of all classes in a module .
11085	Return a list of all classes in a module .
11086	Ensure a directory exists .
11087	Create a new blob from the given text .
11088	Check if a card number is a Luhn number .
11089	Get the current git version .
11090	Load a module .
11091	Add a path to the list of paths .
11092	Returns a module loader for a given module name .
11093	Split a line into multiple lines .
11094	Remove all namespaces from the root .
11095	Check if the current version is consistent with the desired version .
11096	Construct a dict from a YAML string .
11097	Merge a new dict into this one .
11098	Execute all actions in cwd .
11099	Create an instance from a YAML file .
11100	Add details to a message .
11101	Emit a record .
11102	Add the image_rendition or original to the context .
11103	Log a login attempt .
11104	Add a URL to the queue .
11105	Start the worker queues .
11106	Set the value of k to v .
11107	Get a key from the store .
11108	Recursively fetch a key from the API .
11109	Get an X - Consul - Index .
11110	Delete a KVStore .
11111	Plot a heatmap .
11112	Add months to the given timestamp .
11113	Add months to a date .
11114	Check if this is a Christmas period .
11115	Use a music service .
11116	Connect to a storage service .
11117	Read records from a CSV file .
11118	Create a list from a JSON file .
11119	Serialize to a JSON file .
11120	Returns a list of tuples matching the given label .
11121	Returns a float of the average of X y given a label .
11122	Report the importance of a feature .
11123	Restore a data dictionary .
11124	Merge two dictionaries .
11125	Creates a function that can be used to call multiple functions .
11126	Decorator to apply a method to a function .
11127	Find all registered blocks .
11128	Verify that a block is registered with the block registry .
11129	Register a block .
11130	Unregister a block .
11131	Convert a file to an MP3 file .
11132	Return a reasonable desired version .
11133	Handle ssl redirects .
11134	Initialize a celery task .
11135	Queue mail to a list of addresses .
11136	Parse the accept header .
11137	Parse a CacheControl header .
11138	Parse a datastructures . ContentType .
11139	Parse a Forwarded header .
11140	Parse a list of strings .
11141	Parse a list of parameters .
11142	Resize image to fit width .
11143	Add a value to the link .
11144	Download a file from YouTube .
11145	Create a connection to Google Drive .
11146	Upload a file to a folder .
11147	Connect to the music folder .
11148	Write sky parameters to a file .
11149	Update the filenames in the input file .
11150	Read ahpi absorption from a file .
11151	Scale a_phi by the given parameter .
11152	Reads water absorption data from a file .
11153	Reads water scattering from a file .
11154	Read an iop from a file .
11155	Write an IOP to a file .
11156	Build b with scattering fraction of 0.01833 .
11157	Build the total absorption .
11158	Build total attenuation C .
11159	Build all b and c from IOPs
11160	Set the parameters for a batch .
11161	Read a parameter file into a dictionary .
11162	Convert a string to a list of floats
11163	Read a PRP report from a file .
11164	Set the handler for the given signals .
11165	Handle a sigal signal .
11166	Set the default handler for the given signal .
11167	Pause the signal handler .
11168	Abort the process .
11169	Called when a status signal is received .
11170	Remove an event from a list .
11171	Fetch a metric .
11172	Fetch a sorted metric .
11173	Collect n items from an iterable .
11174	Print an item to stdout .
11175	Print all items in iterable to a file .
11176	Create a signature from a function .
11177	Initialize a sig object from a partial object .
11178	Returns a copy of self . argv .
11179	Return True if the filename matches any of the META - INF files .
11180	Return the key for a given filename .
11181	Convert vlq to int .
11182	Read a table from a list of fields .
11183	Parse the user data header .
11184	Return the duration in seconds .
11185	Print the details of the game .
11186	Returns a tuple containing the data for this batch .
11187	Displays the result of a search for a file .
11188	Write the batch to a file .
11189	Processes the data in the result file .
11190	Display the connection to the graph .
11191	Prints graphic information about num_curve .
11192	Displays the error message .
11193	Hide the error message .
11194	Execute the planarrad .
11195	Cancel the current planarrad .
11196	Quit the application .
11197	Save the artist s figure .
11198	Open the log file .
11199	Open the documentation .
11200	Show all prerequisite actions .
11201	Called when a button is clicked .
11202	Moves the cursor to the current position .
11203	Display the graphic target .
11204	Returns a new LockSet with the given genesis and privkey signed .
11205	Sign a private key .
11206	Signatures are non deterministic
11207	either invalid or one of quorum noquorum quorumpossible
11208	In the IOU fungible the supply is set by Issuer who issue funds .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid lockset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring see utils . cstr
11215	Calculate the delay between a sender and receiver .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the contract on the chain
11218	returns class . on_msg_unsafe use x . im_self to get class
11219	registers NativeContract classes
11220	returns True if unknown
11221	receives rlp . decoded serialized
11222	Convert a vector to an image .
11223	Convert an image to a vector .
11224	Returns the function for a given layer .
11225	Get the output of a layer .
11226	Returns a list of features for x .
11227	Create a new key file .
11228	Finish the bulk load job .
11229	Load a Giraffe table from a file .
11230	Put a list of items into the database .
11231	Release this BulkLoad .
11232	Returns a list of all tables in the Giraffe .
11233	Remove compiler flags from source code .
11234	Find the teradata home directory .
11235	Get a value from the config .
11236	Set the value of a key .
11237	Turn on or off a table .
11238	Execute a command .
11239	Get a value from a key .
11240	Write a default girafferc configuration file .
11241	Set the filter for this Giraffe .
11242	Serialize to a TeradataArchive object .
11243	Convert to a string .
11244	Return a float with a multiplier .
11245	Return a dict of the specific gain values in a string .
11246	Get device settings from a string .
11247	Wrap a string in a text wrapper .
11248	Return a list of SoapySDR devices
11249	Set the center frequency .
11250	Returns the result of the psd state .
11251	Wait for a future to arrive .
11252	Update the spectral state of samples_array .
11253	Read data from a file .
11254	Write the pwr_array to a file .
11255	Submit a function to the queue .
11256	Returns the number of repetitions for a set of bins .
11257	Plan a freq plot .
11258	Create a new buffer .
11259	Setup the stream .
11260	Stop the stream .
11261	Read a frequency from the stream .
11262	Perform a sweep .
11263	Set the I2C address .
11264	Run cmake to build zql .
11265	Filter a list of datetimes by a number .
11266	Mask a datetime . datetime object .
11267	Convert a datetime object to a weekday .
11268	Convert a list of datetimes to a list of datetime objects .
11269	Convert a list of datetimes to a datetimes object .
11270	Return a set of dates to keep .
11271	Return a list of dates to delete .
11272	Get the spi control byte .
11273	Read a bit from an address .
11274	Write a bit to the address .
11275	Get a bit number from a bit pattern .
11276	Watch for events on a port .
11277	Handle events in a queue .
11278	Brings a GPIO interrupt into the userspace .
11279	Set the gpio interrupt edge .
11280	Waits until a file exists .
11281	Register a callback for a pin function .
11282	Deregister a pin .
11283	Enable gpio interrupts .
11284	Sends bytes_to_send to SPI .
11285	Render a form .
11286	Returns True if the form has any errors .
11287	Render a link .
11288	Extract the version from a package .
11289	Returns the kwargs for the form .
11290	Check the status of a request .
11291	Make a request to the API and return the response .
11292	Get a link to download a file .
11293	Upload a link to a folder .
11294	Upload a file to a folder .
11295	Upload a folder to a remote url .
11296	Get the status of a remote upload .
11297	Get a list of files in a folder .
11298	Gets the running conversions for a folder .
11299	Calculate the humidity for a given temperature and dewpoint
11300	Calculate the dewpoint of the given temperature and humidity .
11301	Publishes the document .
11302	Returns a CRC for the given data .
11303	Verify that the data is valid .
11304	Unpack a storm date .
11305	Use the archive revision B if possible .
11306	Wake up the weather station .
11307	Send a command to the server .
11308	Execute the DMPAFT command .
11309	Get the new archive fields .
11310	Parse the data from the database .
11311	Update weather information for a given interval .
11312	Initialize the syslog handler .
11313	Returns a list of pub services .
11314	Get the wind speed value for a given station and interval
11315	Set the parameters .
11316	Set the args .
11317	Publish the dict to a file .
11318	Decorator to indicate that a user wants to make a request .
11319	Initialize the application .
11320	Fulfill a set of requirements .
11321	Push an override to the top of the stack .
11322	Remove this context from the stack .
11323	Push an override to the current state .
11324	Push an additional ctx stack to the current stack .
11325	Removes the context from the stack .
11326	Add a new item to the queue .
11327	Unduplicate a list of field names .
11328	Interpret the stats from a list of results .
11329	Extract params from a query .
11330	Execute a query and return the result .
11331	Returns a Pandas DataFrame .
11332	Create a graph from the results .
11333	Plot a pie .
11334	Plot the x and y coordinates .
11335	Create a bar plot .
11336	Returns a CSV representation of the result .
11337	Check if a user has a permission .
11338	Override get_context_data .
11339	Returns a list of widgets sorted by position .
11340	Return a list of widgets that need to be updated .
11341	Register a widget .
11342	Unregister a widget .
11343	Get the last update for this widget .
11344	Get a widget setting by name .
11345	Save a setting to the dashboard .
11346	Returns True if update should be made .
11347	Create a Spark array .
11348	Returns a ConstructSpark with the given shape and axis .
11349	Concatenate two Spark arrays .
11350	Check if an argument is valid .
11351	Return a tuple of axes .
11352	Wrap a function in a BoltArraySpark .
11353	Align a set of axes .
11354	Convert to a Spark array .
11355	Returns the tordd of a sequence along an axis .
11356	Returns a stacked version of the RDD .
11357	Map a function to a test array .
11358	Return a chunk of a given size .
11359	Map a function to a random value .
11360	Create a new BoltArraySpark with the given function .
11361	Return a numpy . vshape . Plan object .
11362	Remove padding from an axis .
11363	Get the number of elements in a plan of a given shape .
11364	Returns a list of slices .
11365	Get a mask from a list of integers .
11366	Returns a new RDD with the given number of partitions .
11367	Returns a StackedArray of the given size .
11368	Align values along an axis .
11369	Returns the first value in the array .
11370	Calculate the stats for a given axis .
11371	Returns the mean over the given axis .
11372	Returns the variance along an axis .
11373	Return the standard deviation along an axis .
11374	Return the sum over the given axis .
11375	Returns the maximum value along an axis .
11376	Return the minimum value along an axis .
11377	Return a chunk of a given size along an axis .
11378	Swap kaxes and vaxes .
11379	Transpose a set of axes .
11380	Swap axis1 and axis2 .
11381	Reshape this BoltArraySpark into a new shape .
11382	Reshape keys and values based on shape .
11383	Squeeze out the axis . If axis is None then the axis will be selected .
11384	Construct an RDD of the specified type .
11385	Clip values between min and max .
11386	Convert to an array .
11387	Convert an argument to a tuple .
11388	Convert a list or ndarray into a tuple .
11389	Inshape an ndarray .
11390	Return True if a and b have the same shape .
11391	Convert a list into a list .
11392	Slicify slc to a dimension .
11393	Check if two axes can be transposed .
11394	Check if two keys are reshapable .
11395	Concatenate a list of values into a single ndarray .
11396	Iterate over an array and add extra dimensions .
11397	Returns a tuple containing the number of partitions and the index of the partitions .
11398	Wrap a function in a docstring .
11399	Lookup a ConstructLocal constructor .
11400	Reshape the BoltArraySpark to the given shape .
11401	Transpose a BoltArraySpark .
11402	Reshape the barray to a new shape .
11403	Transpose the barray to the given axes .
11404	Returns a ConstructLocal with the given shape dtype and order .
11405	Returns a ConstructLocal object with zeros .
11406	Concatenate multiple BoltArrayLocal objects .
11407	Calculate the discrete likelihood .
11408	Calculate the most likely alpha of a data set .
11409	Calculate the discrete MLE of a data set .
11410	Calculate the discrete best alpha for the given data .
11411	Calculate the discrete best alpha .
11412	Plot the PPF .
11413	Compute the lognormal of the model .
11414	Sanitize a Turbo page .
11415	Configure analytics for a given identifier .
11416	Return a list of tags .
11417	Return the MD5 hash of the decoded key .
11418	Returns the SHA256 hash of the key .
11419	Return the SHA - 512 hash of this key .
11420	Parse a long string .
11421	Decode a base64 encoded key .
11422	Parse a list of options .
11423	Process an SSH RSA public key .
11424	Process ssh dss data .
11425	Process ecdsa SHA data .
11426	Process ed25516 data .
11427	Parse a SSH2 public key .
11428	Takes a single step of the process .
11429	Create a new token based on the input_token .
11430	Returns a list of mechs .
11431	Store this credential to a file .
11432	Returns a dict of properties and options .
11433	Initialize the python environment .
11434	Create a PyAudio file .
11435	HTML for h5bp . css .
11436	Normalize djfrontend CSS .
11437	Return a djfrontend fontawesome stylesheet .
11438	Create a modernizr script for the DJ frontend .
11439	Create a jQuery template for the DJFRONTEND_JQUERY setting .
11440	Return the jquery ui for the given version .
11441	Create jquery . dataTables template .
11442	Returns a jquery . dataTables . css .
11443	Themeroller for jquery . dataTables .
11444	Create a template for the jquery formset .
11445	Wrapper for jquery . scrollTo .
11446	Creates a jquery . smooth - scroll template .
11447	Returns a Bootstrap css template for the DJ frontend .
11448	Return a djfrontend_ga string .
11449	u Render a CodeMirrorTextarea .
11450	Iterate over authentication hashes .
11451	Calculate the expiry time for a given number of minutes .
11452	Get a user s token .
11453	Serialize a User object into a User object .
11454	Deserialize a profile .
11455	Update a profile .
11456	Raise MeteorError if authentication failed .
11457	Validate a user .
11458	Check if the request is secure .
11459	Get a user s name .
11460	Create a new user .
11461	Logs a user in .
11462	Logout a user .
11463	Login with a username and password .
11464	Login with a username and password .
11465	Login with a resume token .
11466	Change the password of a user .
11467	Handle a forgot password request .
11468	Reset a user s password .
11469	Merge a dict into a dict .
11470	Read the contents of a file .
11471	Get the metadata id of an object or model .
11472	Get a list of object ids corresponding to a model .
11473	Get the object id associated with a meteor .
11474	Get a list of object ids .
11475	Get an object by its id .
11476	Set default forwards for an operation .
11477	Set the default reverse operation for an operation .
11478	Truncate a list of models .
11479	Shortcut for truncating the forwards .
11480	Truncate the database backwards .
11481	Initialize the build options .
11482	Finalize the build options .
11483	Run meteor build command .
11484	Convert a path to a directory .
11485	Seed a list of values .
11486	Returns a dictionary containing the state of the object .
11487	Generate a random string .
11488	Decorate an API endpoint .
11489	Returns a generator yielding all API endpoints for a given object .
11490	Clears the API path map cache .
11491	Print a name and a value .
11492	Validate kwargs of a function .
11493	Called when the WSGI server is opened .
11494	Called when the connection is closed .
11495	Called when a message is received .
11496	Create DDP frames from an EJSON message .
11497	Process a DDP request .
11498	Dispatch a message to the given handler .
11499	Create a connection to the backend .
11500	Receive a Ping request .
11501	Create a new sub .
11502	Unsub a user .
11503	Receive a random stream from the API .
11504	Generates information about a websocket .
11505	Serve a DDPLauncher .
11506	Command - line entry point for Django .
11507	Print a message .
11508	Stop the Postgres Greenlet .
11509	Run Postgres Greenlet .
11510	Run django - ddp .
11511	Poll the psycopg2 server .
11512	Greenify the psycopg2cffi module .
11513	Generate a random meteor id .
11514	Autodiscover dddp module .
11515	Return the error as a dict .
11516	Get an object from a factory .
11517	Emit a meteor record .
11518	Create a middleware for a negotiation request .
11519	Add a route context to an application .
11520	Add a resource object to the route .
11521	Run a web application .
11522	Send a message to the registration .
11523	Send a message to all registered registrations .
11524	Fetch inactive registration ids .
11525	Send a message to a GCMM .
11526	Send a bulk message to a GCM server .
11527	Sends a JSON message to the application .
11528	Send a request to the API .
11529	Get a model from a module location .
11530	Run a fast forward selection algorithm .
11531	Search for Giphy objects .
11532	Translate a Giphy term or phrase .
11533	Return a Giphy object with trending data .
11534	Return a Giphy object with the given gif_id .
11535	Create a screensaver for the Giphy API .
11536	Upload tags to Giphy .
11537	Convert data to ints .
11538	Fetch data from an endpoint .
11539	Translate a term or phrase into a GiphyImage .
11540	Yield GiphyImages that are trending .
11541	Returns a GiphyImage with the given gif_id
11542	Upload a file to GIPHY .
11543	Returns an AccessControlElement for the given access control .
11544	Authenticate using the given email or password .
11545	Upload a video to YouTube .
11546	Check the upload status of a video .
11547	Update a video .
11548	Delete a video from Youtube .
11549	Check the availability of a video .
11550	Get a video by its id .
11551	List videos for a user .
11552	Upload a video from Zuqqa .
11553	Upload a video .
11554	Upload a video to youtube .
11555	Remove a video .
11556	Fetches a video entry .
11557	Save the video to a file .
11558	Delete a video .
11559	Update the metadata .
11560	Update a metadata field .
11561	Update this item s data .
11562	Parse a string into a list of nodes .
11563	Dump a list of trees to a string .
11564	Load a file from file - like object .
11565	Read the contents of a file .
11566	Parse a string into a node .
11567	Create a new node .
11568	Return a newick of the name and its descendants .
11569	Return an ascii - formatted art string .
11570	Return the node with the given label .
11571	Prune a list of leaves .
11572	Resolve polytomies .
11573	Removes all internal names .
11574	Removes all leaf names .
11575	Decorator to make sure that the user is authenticated .
11576	Dispose of a JSON string .
11577	Raise an exception if the given setting is not defined in the application .
11578	Returns the argument with the given name .
11579	Returns a list of arguments for the given name .
11580	Create an async callback .
11581	Get a cookie by name .
11582	Clears a cookie .
11583	Redirect the user to the OpenID endpoint .
11584	Get the authenticated user .
11585	Generate OAuth request parameters .
11586	Authorize a redirect .
11587	Make a request to Facebook .
11588	Get an authenticated user .
11589	Concatenate two URLs .
11590	Parse a header line .
11591	Add a new HTTP header .
11592	Get a list of headers for a given name .
11593	Parse a line into a dict .
11594	Parse a list of headers .
11595	Normalize a header name .
11596	Convert a string to a UTF - 8 encoded string .
11597	Convert a string to a Unicode string .
11598	Convert a value to a basestring .
11599	Recursively unicode an object .
11600	Setup auth plugins .
11601	Iterate over all subclasses of cls .
11602	Based on the matching strategy and the origin and optionally the requested method a tuple of policyname and origin to pass back is returned .
11603	Returns the number of points in the grid that are occupied .
11604	Write a gro file to a file .
11605	Write atoms to a PDB file .
11606	Determine the number of molecules in a list .
11607	Resize a PBC for lipids .
11608	Write top - level information about a list of molecules .
11609	Iterate over the contents of a file .
11610	Send a message to a user .
11611	Send a message to all users .
11612	Get a user s messages .
11613	Process a response .
11614	Verify a config file .
11615	Verify a message s profile name .
11616	Retrieve data from config .
11617	Retrieve a PWD from a config file .
11618	Update config data .
11619	Update config pwd .
11620	Create a config profile for the given message type .
11621	Print the required items for a profile .
11622	Get data from the user s settings .
11623	Get the user s auth from the message type .
11624	Configure a profile .
11625	Write data to cfg .
11626	Write authentication message to cfg .
11627	Add attachments to the message .
11628	Send a message to the server .
11629	Send a message .
11630	Create a message factory .
11631	Create a credential property .
11632	Validate a property .
11633	Validate a message input .
11634	Validate a Twilio attribute .
11635	Validate a SlackPost attribute .
11636	Validate whatsapp attribute .
11637	Send a coroutine .
11638	Add a message to the coroutine .
11639	Read the body from a file .
11640	Remove arguments that are not in kwds .
11641	Send a message .
11642	Get the chat id for a user .
11643	Send a message to the server .
11644	Send the message .
11645	Get the SMTP server for the given address .
11646	Generate an email message .
11647	Add a header to the message .
11648	Add the body to the message .
11649	Add attachments to the message .
11650	Get the SMTP session .
11651	Get smtplib . SMTP_SSL context
11652	Get a SMTP session .
11653	Sends an email to the specified recipients .
11654	Save this tag to a file .
11655	Unloads the image .
11656	Get a region of the image .
11657	Validate that the key is a valid value .
11658	Removes all objects from the database .
11659	Writes the object to a file .
11660	Read the contents of the file .
11661	Delete this chunk .
11662	Resize the file .
11663	Insert a chunk into the file .
11664	Save the image to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a normal line .
11668	Add the lines to the source file .
11669	Draw a string of text .
11670	Parse ISO 8601 time string .
11671	Convert a list of words to an HTML line .
11672	Convert a word to an HTML block .
11673	Converts a list of words into an html paragraph .
11674	Converts a list of lines into html code .
11675	Converts a list of items into an HTML string .
11676	Save the metadata to a file .
11677	Update the parent fileobj with the given delta .
11678	Run a game .
11679	Register a product .
11680	Return the vendor and product id for the given controller .
11681	Register a freeform key .
11682	Return a base64 - encoded signature for a string .
11683	Return HTTP request headers .
11684	Send a request to the Route53 server .
11685	Send a get request to the endpoint .
11686	Send a post request to the endpoint .
11687	Send a delete request to the endpoint .
11688	Convert a value to an APE value .
11689	Send a request to the server .
11690	Perform an autopaginating API call .
11691	List hosted zones .
11692	Create a new hosted zone .
11693	List resource record sets for a given zone .
11694	Get a list of resource record sets for a given change set .
11695	Draw an image .
11696	Draw an image region .
11697	Returns the total size of the packets .
11698	Replace old_pages with new_pages .
11699	Find the last page of an Ogg header .
11700	Sets the section of the document .
11701	Add markup to the document .
11702	Returns a list of markups for the given content .
11703	Return the markup with the given tag name .
11704	Create a new hosted zone .
11705	Lock a file object .
11706	Insert bytes into a file .
11707	Delete bytes from a file .
11708	Convert data to UTF - 8 .
11709	Add a change to the record set .
11710	Parse an e_change_info object into a dictionary .
11711	Return the content width of a string .
11712	Returns True if this object has been modified .
11713	Delete this record set .
11714	Save this ChangeSet to the database .
11715	Parse id3v1 data .
11716	Convert id3 to v1 .
11717	Read a full size bytes from the file .
11718	Removes a key from the list .
11719	Load a frame from the database .
11720	Update the common fields .
11721	Update the frame to v24 .
11722	Unloads the sound .
11723	Plays the voice .
11724	Sets the start and end points of the voice loop .
11725	Returns a list of glyphs and values .
11726	Return a list of glyph names filtered by the given filter .
11727	Dump an encoding to a file .
11728	Dump an array to a file .
11729	Main entry point .
11730	Check if a file exists .
11731	Make a list of files .
11732	Parse a HostedZone object .
11733	Parse a delegation set into a zone . _nameservers dict .
11734	Write a list of blocks to disk .
11735	Group paddings in a list of blocks .
11736	Delete metadata blocks from the file .
11737	Save metadata blocks to a file .
11738	Parse an rrset alias .
11739	Parse rrset record values .
11740	Parse an rrset .
11741	Delete this zone .
11742	Add a record to a record set .
11743	Create an AResourceRecordSet .
11744	Create an AAAAResourceRecordSet .
11745	Create a CNAMEResourceRecordSet .
11746	Create a new MXResourceRecordSet .
11747	Create an NSResourceRecordSet .
11748	Create a PTRResourceRecordSet .
11749	Create a SPFResourceRecordSet .
11750	Create a new SRVResourceRecordSet .
11751	Create a new TXT record .
11752	Register a TXXX key .
11753	Returns a dict of the values of a change .
11754	Write a change to a resource record set .
11755	Writes a ChangeResourceRecordSet to an XML file .
11756	Initialize logging .
11757	Add an alias to an item .
11758	Freeze a dictionary into a tuple .
11759	Join HTML attributes to a template .
11760	Initialize the app .
11761	Initialize all bar values .
11762	Bind a bar .
11763	Returns a dict containing the arguments of the callable .
11764	Returns the url for this endpoint .
11765	Returns True if the view is currently running .
11766	Validate a metric class .
11767	Get a stat by name .
11768	Calculate stats for a given set of frequencies .
11769	Autodiscover INSTALLED_APPS module
11770	Dump a metric to csv
11771	Handle a maintenance .
11772	Get an array from a GET request .
11773	Get a boolean value from a GET request .
11774	Get the next GECKO colour .
11775	Returns a dict of gecko parameters .
11776	Returns a widget for the geckoboard number .
11777	Returns a tuple of the geckoboard metrics .
11778	Generate a line chart for a geckoboard .
11779	Return a geckoboard geckometer .
11780	Create a geckoboard dashboard .
11781	Returns a list of active gadget stats .
11782	Register a gadget to the registry .
11783	Returns a dictionary with the context data .
11784	Print an error message and exit .
11785	Decorator for validating a function .
11786	Prompt the user for a long input .
11787	Prompt the user for a list of items .
11788	Prompt the user for a filename .
11789	Get the schedule for a given year .
11790	Returns the winner of the match .
11791	Returns the current season .
11792	Returns a list of all starters .
11793	Returns the surface of the game .
11794	Return the coin toss for this game .
11795	Returns the weather information for the game .
11796	Returns information about the team s refs .
11797	Return a list of all games for a given month .
11798	Returns the standings as a DataFrame .
11799	Returns the stats table for the selected team .
11800	Returns the roy voting table for the current year .
11801	Returns a DataFrame containing the linescore of the team .
11802	Returns the year of the month .
11803	Get player stats from a table .
11804	Decorator to switch a function to a directory .
11805	Decorate a function to cache a URL .
11806	Get a class instance key from a list of arguments .
11807	Decorator to memoize a function .
11808	Returns the age of a child .
11809	Get stats from a table .
11810	Get stats per game .
11811	Returns the totals for a given kind .
11812	Get statistics per 36 minutes .
11813	Get stats per 100 positions .
11814	Get advanced stats .
11815	Returns the stats for a specific shooting .
11816	Get advanced pbp statistics .
11817	Return the basic gamelog for a given year .
11818	Gets the current session value .
11819	Expand details in a DataFrame .
11820	Adds team and opp columns to a dataframe .
11821	Add team features to the dataframe .
11822	Calculate the initial probability of a given line .
11823	Returns a DataFrame containing the passing table .
11824	Return a list of awards for a given award .
11825	Returns the name of the div .
11826	Return the box score for a given year .
11827	Returns a pq for a given year and keyword .
11828	Returns the head coaches for a given year .
11829	Schedule a game for a given year .
11830	Return the Offensive Coordinator for the given year .
11831	Returns the defensive coordinator for a given year .
11832	Retrieve the stadium for a given year .
11833	Return the Offense Scheme for a given year .
11834	Returns the defensive alignment for a given year .
11835	Return a DataFrame with splits removed .
11836	Returns the HTML for the given URL .
11837	Flatten links in a text document .
11838	Convert url to id .
11839	Convert kwargs to QS .
11840	Streamer read process .
11841	Executes the read_queue and the put_idx commands .
11842	Get a direct read from the queue .
11843	Close the queue .
11844	Get a batch from the hdf5 file .
11845	Returns the remaining block of a given path .
11846	Get the queue for a given path .
11847	Get a generator for a given path .
11848	Parse a file - like object .
11849	Dump an object to a file .
11850	Read a Varint from the file .
11851	Returns a generator yielding all objects .
11852	Close the filesystem .
11853	Write an object to the buffer .
11854	Flush the file descriptor .
11855	Returns the path to the game directory .
11856	Input text with keyboard emulation .
11857	Make a fake movie from nframes .
11858	Returns a list of tuples describing the traits .
11859	Wait until a condition is met .
11860	Wait until all traits are present .
11861	Adds a list of ignored exceptions to this object .
11862	Return the value of the main volume .
11863	Return the source of the given operator .
11864	Send a message to the server .
11865	Return the status of the NAD .
11866	Power off the device .
11867	Power on the device .
11868	Set the CMD volume .
11869	Select a source .
11870	Deobfuscate a request .
11871	Return the CRC of a plaintext .
11872	Deobfuscate a value .
11873	Print missing schema .
11874	Return a list of all hrefs .
11875	Check if a song name is available .
11876	Parse a song .
11877	Get a Google url for a song .
11878	Parse a google download url .
11879	Parses a song from a website .
11880	Get the HTML response for a given URL .
11881	Download a file from a URL .
11882	Download a file using wget .
11883	Returns a list of StatusCodes for a given city .
11884	Get a location observation .
11885	Parse an observation response .
11886	Get a station observation .
11887	Returns a list of paths to the index .
11888	Returns a list of all available compilers .
11889	Returns the mimetype of this file .
11890	Returns the MIME type of the compiler .
11891	Returns the compiler formatted extension .
11892	Register a processor for a given mimetype .
11893	Remove a processor from a mimetype .
11894	Returns a list of paths .
11895	Register the defaults of all the preprocessors and postprocessors .
11896	Import QtCore from PyQt5 .
11897	Returns a MetaNetnode object with the given name .
11898	Add a plugin name to a network node .
11899	Remove a plugin name from a network node .
11900	Import settings from config_path .
11901	Export settings to a config file .
11902	Returns a DirectoryIDASettings object .
11903	Iterate over the keys in the database .
11904	Handle API exceptions .
11905	Get a table by name .
11906	Return a list of DynamoDB tables .
11907	Fetch crates for a given category .
11908	Return the metadata id of an item .
11909	Returns the timestamp of the last time the item was updated .
11910	Fetches the owner team for a crate .
11911	Fetches the owner user for a crate .
11912	Fetches the version information for a crate .
11913	Fetches the version downloads for a crate .
11914	Fetch data from a crate .
11915	Get a summary of the CRATES API .
11916	Returns a list of crates .
11917	Get a crate by ID .
11918	Get a crate attribute .
11919	Fetch items from the server .
11920	Fetch a list of items from the database .
11921	Fetch all questions for a given category .
11922	Get a list of questions from the API .
11923	Fetch a list of items from the database .
11924	Returns the timestamp of the updated field for the given item .
11925	Return the metadata category of the given item .
11926	Get a list of items from the ReMo API .
11927	Returns a list of buffers .
11928	Returns the IOCB priority .
11929	Close the queue .
11930	Submit a list of blocks .
11931	Cancel a block .
11932	Cancel all submitted blocks .
11933	Get a list of events .
11934	Fetch an event by category .
11935	Get all cells from the spreadsheet .
11936	Parse the event data from the feed .
11937	Returns the export formats for a given pid type .
11938	Returns the permission factory .
11939	Create a blueprint for the given endpoints .
11940	Create a URL rule .
11941	Resolve a PID value to a record .
11942	r View a record using the default view method .
11943	r Export a record .
11944	Call a callable for a given time .
11945	Close the socket .
11946	Remove a client .
11947	Increment a metric .
11948	Send a metric in milliseconds .
11949	Calculate the timing since the given start time .
11950	Send a Gauge request .
11951	Send a GaugeDelta request .
11952	Set a metric .
11953	Make a request to the server .
11954	Create a batch client .
11955	Create a client for the unit .
11956	Flush the stream to the remote address .
11957	Create a permission checker for a record .
11958	Create a TCPBatchClient .
11959	Flush all pending messages from the socket .
11960	Returns a TCPClient for the unit .
11961	Returns a user object for a given user and permissions .
11962	Interprets x as an OpenMath object .
11963	Convert a term to an OpenMath object .
11964	Convert an object to a python object .
11965	Convert obj to OpenMath .
11966	Register a callable to openmath . OMAny .
11967	Deprecated version of register_to_python .
11968	Initialize the application .
11969	Returns a generator of valid choices .
11970	Split model kwargs into fields and agrs .
11971	Register a function to the registry .
11972	Create a new value for this object .
11973	Create a default form based on any_form_fields .
11974	Decorator for fields that require a random attribute .
11975	A decorator for field_choices .
11976	Convert a field to a decimal value .
11977	Returns a string representation of a field .
11978	Generate random data for a date field .
11979	Generate random datetime data for a given field .
11980	Return the data for a float field .
11981	Return the integer value of a field .
11982	Generate random data for a time field .
11983	Generate a random choice string for a given field .
11984	Return the data for a multiple choice field .
11985	Generate a random model choice for a given field .
11986	Encode an XML object into a string .
11987	Publish a package .
11988	Add a tag to the git repository .
11989	Decorate a function to return None if the field is blank .
11990	Load a module from a python module .
11991	Build a state from a tuple .
11992	Returns a list of OM symbols .
11993	Returns a tuple of the OMSymbol .
11994	Decode data into a bytearray .
11995	Encode a string into a byte string .
11996	Convert a value to a fixed value .
11997	Format a number .
11998	Converts a number to a money object .
11999	Convert data to a numpy array .
12000	Convert a blosc array into a blosc object .
12001	Add a workspace .
12002	Remove a workspace .
12003	Return a list of workspaces .
12004	Get a WS object by name .
12005	Check if a repository exists in a workspace .
12006	Synchronize workspaces and repositories .
12007	Clone a repository .
12008	Check if ndio version is available .
12009	Convert a numpy . ndarray to voxels .
12010	Create a numpy array from a list of voxels .
12011	Execute a workspace .
12012	Print an update of a repository .
12013	Sets the console handler .
12014	Execute a command .
12015	Load an image from a PNG file .
12016	Save numpy data to a PNG file .
12017	Save a collection of layers to a png file .
12018	Print a workspace .
12019	Print the status of a repository .
12020	Get the size of a block .
12021	Post cutout blosc data .
12022	Load an image from a file .
12023	Save a TIFF file .
12024	Load a multipage tiff file .
12025	Write the configuration to a YAML file .
12026	Clone a branch .
12027	Get the version of yoda .
12028	Mix and match greetings .
12029	Decorator to print an option .
12030	Get a list of reserve IDs for a given token and channel .
12031	Merge a list of ids .
12032	Propagate a token to a channel .
12033	List projects in a dataset .
12034	Get a dataset by name .
12035	Return a list of datasets .
12036	Parse command line options .
12037	Show the workspace .
12038	Show a workspace .
12039	Show all workspaces .
12040	Returns the url for this connection .
12041	Guess the file format from a file extension .
12042	Open an image file .
12043	Convert in_file to out_file .
12044	Build a graph .
12045	Compute the invariants of a graph file .
12046	Convert a graph from one format to another .
12047	Convert a list of ramons to a dictionary .
12048	Return a RAMON object of the given type .
12049	Delete a channel .
12050	Add a dataset to the model .
12051	Return a JSON - serializable representation of a dataset and project .
12052	Return a dict representation of a dataset .
12053	Return a dict representation of a channel .
12054	Return a dict representation of a project .
12055	Identify the size of an image .
12056	Post data to ndio .
12057	Find the path to a workspace .
12058	Returns a list of public tokens .
12059	Get project information .
12060	Upload metadata to the remote server .
12061	Get a URL .
12062	Make a POST request to a URL .
12063	Delete a URL .
12064	Load a hdf5 file .
12065	Save an array to an HDF5 file .
12066	Infer gaps in a tree .
12067	Recover a NvimIO .
12068	Install jinja translations .
12069	Generate exclusive NS .
12070	Returns the percentage of the data in the given part .
12071	Returns a dictionary of stats for the cache server .
12072	Returns a dict containing the server name and the server name . If server_name is None it will return the server name and the server name .
12073	Return context data as a dict .
12074	Get server status .
12075	Display a dashboard .
12076	Get cache statistics for a given server .
12077	Get a list of slabs for a given server .
12078	Returns the human readable size of the given value .
12079	Find a Config from a list of children .
12080	Add kwargs to the directory .
12081	Applies the given applicator to the config file .
12082	Returns the path to the file .
12083	Read a file from the filesystem .
12084	Write data to file .
12085	Configure the file handler .
12086	Create the file if it does not exist .
12087	Applies the given applicator to the config file .
12088	Returns the path to the file .
12089	Remove the contents of the directory .
12090	Prepare all children .
12091	Remove all children from the tree .
12092	Returns the path to the given path .
12093	Returns a list of all files in this directory .
12094	Write data to a file .
12095	Read the contents of a file .
12096	Add a file to the tree .
12097	Save the object to a file .
12098	Load data from a YAML file .
12099	Remove the file if it exists .
12100	Load plugins from a directory .
12101	Update a dict from source to target .
12102	Returns a ConfigNode corresponding to the given path .
12103	Resolve the path .
12104	Get the value of the container .
12105	Update a ConfigNode .
12106	Load defaults from a YAML file .
12107	Applies the config variable to a string .
12108	Build a callback url .
12109	Process the input from the socket .
12110	Send the output to the socket .
12111	Send a RPC call request .
12112	Read data from a socket .
12113	Write socket output to a socket object .
12114	Raise a RuntimeError if the function is not reentrant .
12115	Returns the remote settle modes for a proton link .
12116	Configure the handler .
12117	Returns the address of the source link .
12118	Returns the address of the remote target .
12119	Called when the parent session is closed .
12120	Create a new sender .
12121	Add a SenderLink to the connection .
12122	Create a new receiver .
12123	Create a ReceiverLink for a request .
12124	Destroy a link .
12125	Called when the session needs to be closed .
12126	Process an endpoint event .
12127	Extend Markdown .
12128	Close a remote receiver .
12129	Called when a receiver fails .
12130	Get host and port from a server address .
12131	Connect to a socket .
12132	Create a server socket .
12133	Return a list of readers writers and timers that need processing .
12134	Raise a RuntimeError if the connection is not reentrant .
12135	Process the connection .
12136	Returns the output data of the connection .
12137	Create a new sender .
12138	Rejects the given link_handle .
12139	Create a new Receiver .
12140	Called when the connection failed .
12141	Ensure the connection is up .
12142	Called when the connection needs to be closed .
12143	Called when a protocol error occurs .
12144	Decorator for twilio view .
12145	Return a string representation of the color .
12146	Returns a dictionary of font names .
12147	Sets the compression option .
12148	Add an object to the PDF .
12149	Output a stream .
12150	Put a stream to the server .
12151	Add a page to the document .
12152	Set the color scheme .
12153	Sets the default font .
12154	Add a page to the PDF .
12155	Set the font size .
12156	Add text to the PDF .
12157	Add a newline to the page .
12158	Add a pie chart to the page .
12159	Outputs a list of pages .
12160	Returns a list of all orientation changes .
12161	Output the fonts .
12162	Output all the images in the session .
12163	Outputs the XObject XSubtype XImage XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype Image XSubtype
12164	Transform the matrix a b c d e f .
12165	Returns the absolute position of x and y .
12166	Set the style .
12167	Rotate pointX to pointY .
12168	Set information about this object .
12169	Sets the display mode .
12170	Close the document .
12171	Put the PDF header .
12172	Put the pages in the document .
12173	Put the resource dict into the session .
12174	Put the information into the session .
12175	Puts the catalog into the session .
12176	Put the trailer .
12177	Given a list of sequences return a floyd function .
12178	Generate a naive list of sequences .
12179	Gosper a sequence of sequences .
12180	Generate a brent value for a sequence .
12181	Return True if x = test_length .
12182	Return True if y = test_length .
12183	Returns True if x is greater than test_ordinate .
12184	Returns True if y is greater than test_ordinate .
12185	Return a copy of this cursor .
12186	Add dx to self . x
12187	Add dy to self . y .
12188	Draw the cursor .
12189	Create a new Action .
12190	Get a list of tags .
12191	Get a label by name .
12192	Update a label .
12193	Delete an action .
12194	Create a new label .
12195	Returns a list of actions .
12196	Returns a list of tags for the given label .
12197	Create a new action .
12198	Get a list of all available hooks .
12199	Update a hook .
12200	Create an alert .
12201	Returns a list of alerts matching the given alert type .
12202	Update an alert .
12203	Setup the sphinx extension .
12204	Returns the absolute path to the themes package .
12205	Make a POST request to logentries .
12206	Get a list of hosts .
12207	Get information about a log set .
12208	Find a sliding attacker .
12209	Compute the duration of the time series .
12210	Update the kwargs .
12211	Compute the transit limbdark and arrays .
12212	Bind the arrays to the transit .
12213	Free the arrays .
12214	Read from the socket and write to the buffer .
12215	Generate a single line from the buffer .
12216	Generates a buffer of the given length .
12217	Return the NNTP code and message .
12218	Generates information from a message .
12219	Return a string representation of a message .
12220	Send a command to the NNTP server .
12221	Returns a list of NNTP capabilities .
12222	Raise NNTPReplyError if mode is not 200 .
12223	Quit the connection .
12224	Returns a datetime object .
12225	Raise a NNTPReplyError if there is no help .
12226	Generate a list of new groups .
12227	Generate NNTP NEW NEWS lines .
12228	Returns a list of tuples matching the given pattern and timestamp .
12229	List active newsgroups .
12230	Generate a list of active times .
12231	Generate a list of newsgroups .
12232	Generate list overview . FMT file .
12233	Generate a list of extensions .
12234	Generate a list of dictionaries .
12235	Returns a list of objects matching the given keyword and arg .
12236	Return the total first last and group of a group .
12237	Return the next article and ident .
12238	Write an article to NNTP .
12239	Execute the HEAD command .
12240	Return the body of the message .
12241	Execute the XGTITLE command .
12242	Execute an XHDR command .
12243	Execute the XZHDR command .
12244	Generate XOVER code and message .
12245	Generate an XPAT message .
12246	Generate a list of XPath objects from a header .
12247	XFEATURE COMPRESS GZIP .
12248	Send a POST request .
12249	Return the offset of a value .
12250	Return a timestamp for a given value .
12251	Return a datetime object .
12252	Make a POST request to the API .
12253	Delete a URL from the API .
12254	Get the contents of a URL from the API .
12255	List the scheduled queries for this account .
12256	List all tags for this account .
12257	Get a tag by name or id .
12258	Create an alert .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a scheduled query .
12262	Delete a tag .
12263	Unparse a range .
12264	Parse a newsgroup line .
12265	Parse a header line .
12266	Unparse a list of headers .
12267	Send a POST request to the server .
12268	Run a list of tests .
12269	Convert defaults to docstring .
12270	Decorator to add a defaults docstring to a function .
12271	Returns a docstring for the defaults class .
12272	Set the value .
12273	Checks if the given value is of the specified type .
12274	Returns the value of this attribute .
12275	Check if the given value is of the correct type .
12276	Returns the symmetric error .
12277	Sets the errors .
12278	Set the bounds and free parameters .
12279	Import metrics from v2Metrics .
12280	Extract a dictionary of metrics .
12281	Return a list of metrics that match the filter expression .
12282	Call the RPC API .
12283	Returns the expression terminal for the given text .
12284	Return an operator for the given text .
12285	Add an operation to the token .
12286	Initialize the properties .
12287	Returns a list of Parameter objects .
12288	Returns a numpy array of the values of the given parameters .
12289	Returns a numpy array of param errors .
12290	Clears all derived parameters .
12291	Sets the value of the method . If the value is not present raises AttributeError .
12292	Get environment variables .
12293	Get the URL parameters .
12294	Perform a HTTP GET request .
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Raises an error if the prefix is not in the satellites map .
12300	Verify the type product of the satellite .
12301	Get the size of the remote file .
12302	Download the scene .
12303	Validate that a parameter is a valid band .
12304	Connect to Earthexplorer .
12305	Add a prefix to a name .
12306	r Return the timezone for a given timezone .
12307	Normalize a datetime .
12308	Join elements of iterable with delimiter .
12309	Return a list of all newline positions in a text .
12310	Convert a pointer to a source .
12311	Dump the results to a text file .
12312	Remove metrics and plugins from the results .
12313	Load a fortune from a list of files .
12314	Load a chance from a list of files .
12315	Execute a command and exit if it fails .
12316	Concatenate the given text into a rule .
12317	Handle special characters in a string .
12318	Returns the grammar of the input source .
12319	Returns a list of rules for this token .
12320	Return a list of comments for this token .
12321	Returns a list of directives .
12322	Returns the output source .
12323	Returns a formatted version of the token .
12324	Returns a string representation of the import directives
12325	Returns the token type of the parser .
12326	Returns the class definition .
12327	Get the entry point .
12328	Get the definition of a rule .
12329	Return the source of a rule .
12330	Get the transform for a rule .
12331	Convert an expression to an AS number .
12332	Convert a TokenType node to an AS number .
12333	Return a list of operands in a hopper .
12334	Remove grouping groups from an optree .
12335	Convert an OptreeNode or Identifier to a Code object .
12336	Convert an optree node to a code object .
12337	Convert AST terminal to code .
12338	Convert an option group to code .
12339	Convert a repetition group to code .
12340	Convert special_handling to code .
12341	Convert an opnode s operands to code .
12342	Concatenate an operator into a single line of code .
12343	Convert op . operands to code .
12344	Multiply op to code .
12345	Convert an AST operand to code .
12346	Return a list of directives that match the given predicate .
12347	Flatten a TokenType . expression .
12348	Extract directives from a comment .
12349	Handle API results .
12350	Generate a new ID .
12351	Remove a hotkey from a control .
12352	Add command line options to the parser .
12353	Configure logging level .
12354	Validate the arguments .
12355	Convert an infix node to a postfix node .
12356	Convert a postfix node to an Optree node .
12357	Reduce a list of nodes to a list of OperatorNodes .
12358	Add command line options to the metric parser .
12359	Load the plugin manifest .
12360	Returns the metric definition for the given name .
12361	Returns the lengths of the fields columns .
12362	Returns the length of each column in the metrics table .
12363	Escapes the underscores .
12364	Outputs the fields in Markdown format .
12365	Prints the metrics in Markdown format .
12366	Generates and outputs a Markdown object .
12367	Parse a string into a tree .
12368	Attempt to consume the given text .
12369	Add arguments to the parser .
12370	Parse a string into a datetime object .
12371	Print the results as a CSV file .
12372	Output data as a JSON string .
12373	Output a raw JSON string .
12374	Generates an xml . dom . XML document containing the results of the TrueSight Pulse measurement .
12375	Return True if the parse node is empty or if it is a terminal .
12376	Print a python file .
12377	Returns a partial representation of a repetition .
12378	Get the terminal for a given value .
12379	Get a repetition node from a string .
12380	Get the exclusion for the given text .
12381	Return the number of leading whitespace characters in the text .
12382	Call the given extractor with the given text .
12383	Return the position of the parse node .
12384	Returns True if this ParseNode is empty .
12385	Add an ignored value to the consumed value .
12386	Check if the given value is a node type .
12387	Return a flattened version of this node .
12388	Returns a new ParseNode with this node trimmed .
12389	Returns a new ParseNode with this node merged with another .
12390	Returns a ParseNode of a new type .
12391	Return a compressed version of this node .
12392	Returns the position of the cursor .
12393	Returns the maximum readed position .
12394	Step to the next character .
12395	Step to the next line .
12396	Step past the previous line .
12397	Returns the last line of the cursor .
12398	Increment the position of the cursor .
12399	Save the current cursor context .
12400	Restores the current context .
12401	Return a string representation of this notification .
12402	Sets the name of the model .
12403	Count the number of variables .
12404	Count the number of functions .
12405	Update ntypes nvars nfuns
12406	Update the state of this StateScope .
12407	Returns a new Scope with the given signature .
12408	Update the intersection with the given oset .
12409	Return a new Scope with the intersection of the given sig .
12410	Update the difference between oset and this Scope .
12411	Return a new Scope with a different signature .
12412	Update the symmetric difference between oset and this Scope .
12413	Returns a new Scope with a symmetric difference .
12414	Adds a new signature to this Scope .
12415	Remove a signature from the set .
12416	Discard a signature .
12417	Returns a list of the values of this Signature .
12418	Return the first signature .
12419	Return the last signature .
12420	Returns the signature for the given key .
12421	Get a Scope object by symbol name .
12422	Get a signature by symbol name .
12423	Get all polymorphic return values .
12424	Call an injector on a node .
12425	Normalize a node based on its type .
12426	Set attributes of another node .
12427	Returns a generator that yields the values of the tuple .
12428	Check if a hit is ok .
12429	Returns the signature for the computation .
12430	Returns a list of tuples corresponding to this tuple .
12431	Returns a list of resolvable names for the given type name .
12432	Sets the resolved name of a type .
12433	Delete a local file .
12434	Delete a file from S3 .
12435	Delete a file .
12436	Save an object to a local file .
12437	Save a file to S3 .
12438	Save the object to a temporary file .
12439	Find a bucket by path in S3 .
12440	Create an enum object .
12441	Check the types of a function .
12442	Set one thing in a chainmap .
12443	Decorator to add a method to a class .
12444	Decorator to add a hook to a class .
12445	Decorator to add a rule to a class .
12446	Decorator to add a directive to a function .
12447	A decorator that adds a nonlocal directname to the decorator .
12448	Bind dst to src .
12449	Read an EOL string from the stream .
12450	Pushes the rule nodes into the cache .
12451	Pop the rule nodes from the cache .
12452	Return the value of a node .
12453	Add a stream with the given content and name .
12454	Begin a tag .
12455	End a tag .
12456	Set a set of rules .
12457	Sets the hooks of the class .
12458	Set a list of directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Check if the given text is in the stream .
12462	Returns True if there is only one character in the stream .
12463	Read a character from the stream .
12464	Read until EOF is reached .
12465	Ignore blanks .
12466	Set the hit dtype of the cluster .
12467	Set the cluster dtype .
12468	Check struct compatibility .
12469	Add a ruleclause name .
12470	Add a rule to a BNF .
12471	Add a new rule .
12472	Add a sequence to the tree .
12473	Add an alternative to the tree .
12474	Add a range to the sequence .
12475	Add a lookahead rule to the sequence .
12476	Add a capture to the sequence .
12477	Add a bind to a sequence .
12478	Add a hook to a sequence .
12479	Return the number of a parameter .
12480	Return True if the parameter is a string .
12481	Return True if the given parameter is a char .
12482	Get the id of a parameter .
12483	Set the name of a hook .
12484	Add a parameter to a hook .
12485	Get rules from EBNF dsl .
12486	Ignore cxx characters .
12487	Add a state to the state list .
12488	Return a dot - formatted representation of the graph .
12489	Write to a dot file .
12490	Write to a png file .
12491	Return a string representation of the state .
12492	Returns the next state of this state .
12493	Reset the living state .
12494	Infer a block .
12495	Infer a subexpression .
12496	Infer the identifier .
12497	Infer literal values from a list of arguments .
12498	Dump local information about the nodes .
12499	Parse a top - level rule .
12500	Exit the scope .
12501	Return the clause for the given parser tree .
12502	Visit a Call node and return a call object .
12503	Visit a CallTrue node .
12504	Visit a Hook node .
12505	Visit a Rule node .
12506	Visit a capture node .
12507	Visit a scope node .
12508	Parse an Alt node .
12509	Parse a sequence of expressions and return a list of expressions .
12510	Visit a RepOptional node .
12511	Parse a Rep0N node .
12512	Parse a Rep1N node .
12513	Catend src to dst .
12514	Set the indentation of a list .
12515	Convert a list to a string .
12516	Echo a list of nodes .
12517	Populate a state from a sequence .
12518	Populate the state register .
12519	Build a state tree .
12520	Returns True if n is equal to val .
12521	Construct a grammar from a string .
12522	Create a grammar from a file .
12523	Parse an entry rule from a string .
12524	Parse an entry rule from a file .
12525	Set the value of a node .
12526	Set a node as an integer .
12527	Get a subnode from dst .
12528	Return a default serializer for a given object .
12529	Get the total number of depositions for a given date .
12530	Dump a Deposition to JSON .
12531	Return a list of recids for a given date .
12532	Returns a list of recids invenio2 .
12533	Import BibDoc from legacy . bibdocfile .
12534	Dump a BibDoc object to disk .
12535	Return a list of dbquery ids to check .
12536	Check a BibDoc .
12537	Dump an object to a dictionary .
12538	Returns the number of users and the total number of users .
12539	Dump an object to a dictionary .
12540	Return a list of FeaturedCommunities
12541	Returns a set of modified recids invenio12 .
12542	Returns a set of modified recids invenio2 .
12543	Get the restrictions for a collection .
12544	Returns a list of record revisions for a given job date .
12545	Returns a dict of all collections of a record .
12546	Dump a marcxml record to json .
12547	Return a list of bibdoc recids matching the given query .
12548	Dump a record to disk .
12549	Dump a RA to a dictionary .
12550	Load a common model from the database .
12551	Returns a dict of all entry points in the invenio_migrator . things group .
12552	Initialize the application context .
12553	Memoize a function .
12554	Get the run_sql from invenio . legacy . dbquery
12555	Get a list of connected roles for an action .
12556	Get a list of actions for a given query .
12557	Dump a remote account to a dictionary .
12558	Load a token .
12559	Import a record from the database .
12560	Return the value of config_var_imp or default .
12561	Dump an object to a dictionary .
12562	Get a list of users .
12563	Returns a list of users invenio2 .
12564	Dump a user to a dictionary .
12565	Load a deposit from the database .
12566	Create a new record with the given data .
12567	Load a record from a dump .
12568	Load records from a list of sources .
12569	Return a list of records matching the given recid .
12570	Load a task from a list of sources .
12571	Load communities from source files .
12572	Load users from a list of sources .
12573	Load a deposit from sources .
12574	Get profiler stats .
12575	Start the IOLoop .
12576	Dump stats to a file .
12577	Delete the profile .
12578	Delete the profiler .
12579	Get the current state of the server .
12580	Disable timestamp for a method .
12581	Load a user from invenio_accounts
12582	Calculate the translations of the images in parallel .
12583	Merge a list of images .
12584	Adds a dimensions with ones to array .
12585	Create a persistent identifier .
12586	Create a new record .
12587	Update a record with the given revisions .
12588	Create a persistent identifier for a record .
12589	Delete a record .
12590	Create a record from a list of files .
12591	Create a new file instance .
12592	Delete all buckets in a record .
12593	Returns a list of persistent identifiers that are missing .
12594	Prepare the revisions .
12595	Returns a dict containing all the files .
12596	Prepare the PIDs .
12597	Returns True if the record is deleted .
12598	Load a community .
12599	Load a featured community .
12600	Dump a thing to a file .
12601	Check if the thing is in the list of available things to migrate .
12602	Delete this widget .
12603	Returns the magnitude of a vector .
12604	Return a normalized version of a vector .
12605	Transform tex coordinates .
12606	Ensure that bones are present .
12607	Set the length of the bone .
12608	Sets the parent of this bone .
12609	Gets the pivot point for the given data .
12610	Start animation .
12611	Set the state of the object .
12612	Unset the state of the object .
12613	Set the state of the region .
12614	Unset the state of the region .
12615	Ensures that obj has a modeldata attribute .
12616	Redraw obj .
12617	Draw obj .
12618	Sets the model .
12619	Write reports to a toxml file .
12620	Convert a list of test reports into a XML string .
12621	Add a menu to the window .
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the window .
12625	Deletes a widget .
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add a label_main to the widget .
12630	Add btn_ok button .
12631	Exit the dialog .
12632	Add btn_confirm button .
12633	Add btn_cancel button .
12634	Update the progress bar .
12635	Render the scene in 3D .
12636	Render the world in 3D .
12637	Return a context manager for a step .
12638	Returns True if a resource with the given name exists .
12639	Add a category .
12640	Returns the missing texture .
12641	Load a model by name .
12642	Load a model .
12643	Returns the model data for a given model name .
12644	Load a model from a json file .
12645	Add a new widget .
12646	Draw the submenu .
12647	Called when the background is redrawn
12648	Called when the scrollbar is redrawn
12649	Returns True if mpos is equal to size and pos .
12650	Returns the number of occurrences of this occurrence .
12651	Add a layer to the graph .
12652	Get a region from a buffer .
12653	Draw the arrays in the given mode .
12654	Add an action to the list of actions .
12655	Execute an action .
12656	Create a new id for the given name .
12657	Add a layer to the graph .
12658	Draws all layers of the widget .
12659	Delete all layers from the widget .
12660	Returns the border of this list .
12661	Returns the offset of the current widget .
12662	Returns the size of the widget .
12663	Read a mesh from an HDF5 file .
12664	Create a connection from a shape .
12665	Adds a list of fields to the query .
12666	Add a list of fields to the query .
12667	Check if the elements are allowed .
12668	Returns the space of the element .
12669	Returns a list of centroids and volumes .
12670	Returns a list of angles .
12671	Returns a pd . MultiIndex of the edges .
12672	Concatenate centroids and volumes .
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Convert a surface to a set of elements .
12676	Returns the metadata for each field .
12677	Returns the metadata for this step .
12678	Make the directories for the work directory .
12679	Run a post - processing command .
12680	Run the gmsh command .
12681	Read a history report from a file .
12682	Read a field report .
12683	Convert a list to a string .
12684	Return the equation as a string .
12685	Return an unsorted set from a dataframe .
12686	Parse a response .
12687	Get a request from the API .
12688	Write an XY report to a file .
12689	Write a field report .
12690	List the creators of a given ComponentType .
12691	Attempt to set the f_type attribute inst to the val_type value .
12692	Returns True if the exception was thrown by a descriptor .
12693	Set the data .
12694	will get the axis mode for the current series
12695	sets the graph plotting options
12696	Create a class .
12697	Process datafeeds and draw notifications .
12698	Try to convert a value to a ForceNumeric .
12699	Convert a string to a float .
12700	Plot a graph .
12701	Convert a raw string to unicode .
12702	Make a clean HTML document from a string .
12703	Returns True if the mime_type matches the include_mime_types .
12704	Convert a string to a domain name .
12705	Return a list of left - cut domain names for a given domain .
12706	Returns a hash of the given tok .
12707	Collect words from a sentence .
12708	Index a stream item .
12709	Invert a hash .
12710	Returns a dictionary mapping hashes to the frequency of each document .
12711	Lookup a key in the HASH_TF_INDEX_TABLE
12712	Lookup a TF - encoded kvlayer .
12713	Make a list of stream items from a file .
12714	Create a stream item from a streamcorpus entry .
12715	Create a streamcorpus . ContentItem object from the given node .
12716	Read a Varint from the stream .
12717	Read a block from the stream .
12718	Serialize a stream item key .
12719	Convert a streamitem to a key and data .
12720	Return a working directory for the given path .
12721	Strip the prefix from a string .
12722	Strip a suffix from a string .
12723	Check if a needle is a subsequence of another needle .
12724	Returns an ice cube .
12725	Run the WSGI server .
12726	Shutdown and close the server .
12727	Decorator to add a callback to the router .
12728	Decorator for error handlers .
12729	Return a 404 if the path is a file .
12730	Get error page callback .
12731	Add a callback to a method .
12732	Resolve a route with the given method and path .
12733	Resolve a non - literal route .
12734	Normalize a pattern .
12735	Returns a string representation of the response .
12736	Add a new header .
12737	Set a cookie .
12738	Returns a string describing the status of the request .
12739	The content type of the media .
12740	Get all values for a given key .
12741	Recursively recursively delete all files in a directory .
12742	Return a list of open files .
12743	Print the file type stats for a stream item .
12744	Run rejester on a work unit .
12745	Fetch public datasets from Amazon AWS .
12746	Get a list of lines from a file .
12747	Generate a random adjacency species pair .
12748	Generate a random adj species pair .
12749	Returns a list of words in a sentence .
12750	Return the similarity score for a given app .
12751	Convert a sentence to a hiragana .
12752	Create a new entity .
12753	Shortsum a review .
12754	Return a list of keywords for a given app .
12755	Return a list of datetime objects for a given request .
12756	Create a new stage .
12757	Initialize a list of stages .
12758	Initialize all stages .
12759	Read a chunk of text .
12760	Run a list of writers .
12761	Run incremental transforms on a stream .
12762	Replace the given config with a PipelineStages instance .
12763	Create an application .
12764	Given a list of sentences return a list of chain ids corresponding to equiv IDs .
12765	Returns True if all the mentions in target_mentions are in chain_mentions .
12766	Returns True if any of target_mentions are in chain_mentions .
12767	Given a rating and a list of tokens compile a look - ahead match .
12768	Match multiple tokens in a stream item .
12769	Create a new ner file .
12770	Align a chunk with a stream .
12771	Shutdown the child .
12772	Multiply p by n .
12773	Replace email addresses with brackets .
12774	generate strings identified as sentences
12775	make a sortedcollection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to unicode .
12778	Make a clean file from a chunk .
12779	Create a NER file for a tagger .
12780	Remove punctuation and whitespace from a span .
12781	Align a chunk with a stream .
12782	Make absolute paths in config .
12783	Instantiate a streamcorpus config .
12784	Generate a chunk from a john - smith file .
12785	Re - based make visible HTML .
12786	Return a clean HTML string .
12787	Make a clean - visible file .
12788	Remove punctuation and whitespace from a string .
12789	Main entry point for pdb .
12790	Try to load a stage from a module .
12791	Load external stages from a file .
12792	Load stages from a module .
12793	Initialize a stage .
12794	Read idx_bytes to idx_bytes .
12795	Return True if the given href is a domain .
12796	Returns a list of labels for the given clean_html .
12797	yield all file paths under input_dir
12798	Returns a generator yielding all tasks .
12799	Returns a random keeper from the available rows .
12800	Yield tokens from a sentence dom .
12801	Return a list of sentences for the given ner_dom .
12802	Decorator to retry a function .
12803	return True if okay raise Exception if not
12804	Get the bucket parameter from the config .
12805	Decode a streamcorpus message .
12806	Get a chunk from a bucket .
12807	Convert a stream id to a kvlayer key .
12808	Convert a kvlayer key to a stream ID .
12809	Return the md5 hash of the stream item .
12810	Make all your dreams for a pony come true
12811	Build a parser for HTTPony .
12812	Add xpaths to a stream item .
12813	Convert a list of sentences to a list of tokens .
12814	Convert a list of tokens into a list of char offsets .
12815	Convert char_offsets to XPathTextCollector .
12816	Add an element to the list of tags .
12817	Return the XPath XPath piece for this element .
12818	Returns the index of the text element .
12819	Yield all descendants of an XML element .
12820	Select elements from an XML source .
12821	Returns True if the XML element with the given name matches the given source .
12822	Returns True if xml_name matches pat .
12823	Select an attribute from a source .
12824	Return an iterator over the siblings of the given element .
12825	Convert an XML element to plain text .
12826	Call the inkscape command .
12827	Export inkscape to a file .
12828	Convert a svg file to a pdf file .
12829	Convert an SVG file to a PNG file .
12830	Returns a jinja environment for the given file .
12831	Sets up the template file .
12832	Fills the document with the given content .
12833	Save the template content to a file .
12834	Create a doctype from a template file .
12835	Returns a new SVGDocument with the given content .
12836	Render a file .
12837	Render a file to a PDF .
12838	Parse an XML file .
12839	Parse an HTML document .
12840	Parse a HTML document and return a markup fragment .
12841	Insert text before or after the given data .
12842	Insert a node before a reference node .
12843	Return a clone of this node .
12844	Executes the given option .
12845	Return a string representation of a node .
12846	Insert a child into the XML .
12847	Parse the configuration file .
12848	Get Google credentials .
12849	Create event datetimes .
12850	Create a calendar event .
12851	Parse the options config and create an event .
12852	Get the extension of a file .
12853	Add an extension to a filepath if needed .
12854	Returns a named temporary file .
12855	Remove all files in workdir with extension .
12856	Convert a CSV file to a JSON file .
12857	Replace the content of a file .
12858	Parse all the tags in the soup .
12859	Check if the next tag is in the blacklist .
12860	Create an italicized tag .
12861	Create a strong tag .
12862	Create an underline tag .
12863	Parse the attributes of a tag .
12864	Remove line breaks from a tag .
12865	Parse a URL .
12866	Parse an attribute .
12867	Translate key values in a dictionary .
12868	Serializes this object to a JSON string .
12869	Return a list of files that match the given regex .
12870	Concatenate a list of strings .
12871	Returns True if ctx starts with part .
12872	Returns True if ctx contains full and part .
12873	Yield the length of a string .
12874	Convert an object to a boolean .
12875	Returns a generator that yields each element of a sequence .
12876	Lookup a key in a table .
12877	Replace characters in svg_content with & &gt  and &lt .
12878	Check if svg_file is str or svgutils . SVG
12879	Merge two svg files .
12880	Merge a list of PDF files into a single PDF file .
12881	Embed a font file into an svg tree .
12882	Embed a font to an SVG file .
12883	Check that all inputs are valid .
12884	Check that the provided function is callable .
12885	Recursively recurses between inputs and output .
12886	Create a jinja2 input .
12887	Recursively recurse through the inputs and outputs .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize xp_ast to str .
12892	Change the encoding of an XML file .
12893	Generate a QR code from a string .
12894	Launch a melody .
12895	Call a command with the given arguments .
12896	Convert a tex file to a pdf file .
12897	Returns a list of options for the given psy .
12898	Transform a Geometry object to a given spatial reference .
12899	Create a Geometry object from a JSON string .
12900	Extends the bounding box of another by expanding the bounding box .
12901	Return the intersection of this Envelope with another Envelope .
12902	Returns True if this Envelope intersects with other .
12903	Returns a 2D polygon of the ring .
12904	Create a DataFrame from a ZNM .
12905	Write the data to a file .
12906	Select a table based on a condition .
12907	Returns the table at the given nuclei .
12908	Return the intersection of this table with another table .
12909	Returns the table that is not in this table .
12910	Returns a boolean indicating whether the selection is odd - even .
12911	Returns True if the selection is even - odd .
12912	Returns True if the input is even - sided with the input .
12913	Returns an error table .
12914	Return the mean squared error .
12915	Calculate the binding energy .
12916	Derivative of s2n .
12917	Derivative of s1n .
12918	Derivative of s2p .
12919	Derivative of s1p .
12920	Return a derived Table .
12921	Check if a function uses the database .
12922	Derive a key from a master password .
12923	Bootstrap a new database .
12924	Search for domains matching the given query .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract hbs from a file .
12928	Convert a path to a VSI prefix .
12929	Returns the epsg id .
12930	Executes a command and exits .
12931	Initialize logging .
12932	Update a file .
12933	Returns a dict of all available drivers .
12934	Returns an ImageDriver object for the given path .
12935	Convert a geom to a raster array .
12936	Rasterize a layer .
12937	Open a raster from a file - like object
12938	Create a raster from bytes .
12939	Copies a raster from one location to another .
12940	Returns a dictionary of options for this DMD instance .
12941	Create a raster .
12942	Sets the GeoTransform for the given affine .
12943	Read an array from the file .
12944	Returns the envelope of the raster .
12945	Returns the driver object for this image .
12946	Create a new raster .
12947	Returns a masked array .
12948	Returns the nodata value .
12949	Reads a Raster from the stream .
12950	Resample the image to a new size .
12951	Save this image to a file .
12952	Sets the projection of a spatial reference .
12953	Warp a SpatialReference to another SpatialReference .
12954	Calculate the length of a chunk .
12955	Lookup an alphabet for a given characterset .
12956	Encode a chunk of data at the given index .
12957	Convert a 256 - bit chunk to a 256 - bit long string .
12958	Get a chunk from the given data .
12959	Memoize a function .
12960	Compile a regexp file .
12961	Normalize a date format .
12962	Detect the timezone .
12963	Convert this swagger to a dictionary .
12964	Activate pdb post - mortem hook .
12965	Converts a dict to a JSON string .
12966	Handle incoming jobs .
12967	Runs the job handler until it completes .
12968	Run a worker pool .
12969	Sets the classification of this Company .
12970	Send a message to the queue .
12971	Turn on a light .
12972	Turn on a switch .
12973	Turn on a light .
12974	Turn off a device .
12975	Send a message while the queue is empty .
12976	Send a reliable message .
12977	Create an adapter for the given object .
12978	Sets the nature of this DataFrame .
12979	Updates the values in sct_dict with the values in conf_arg .
12980	Reset all defaults .
12981	Set config files .
12982	Returns a generator yielding the values of each option .
12983	Returns a generator yielding the default options .
12984	Create a config file .
12985	Update a configuration dictionary .
12986	Read a config file .
12987	Read the config files .
12988	Returns a list of possible names for the given option .
12989	Returns a list of the sections for the given command .
12990	Solve a command s options .
12991	Add options to the parser .
12992	Build argparse . ArgumentParser .
12993	Parse the command line arguments .
12994	Execute a zsh command .
12995	Compile a function from a zsh file .
12996	Execute a bare command .
12997	Execute a bash command and return the result .
12998	Start a master server .
12999	Create a new connection to the worker .
13000	Called when a line is received .
13001	Called when a worker connection is lost .
13002	Load a job .
13003	Called when the worker receives a response .
13004	Close the job .
13005	Add a job set to the master .
13006	Close the server and manager .
13007	Change the status of all the waiters .
13008	Add a result to the list .
13009	Wait for the future to be completed .
13010	Load the next job from the queue .
13011	Called when the job is done .
13012	Add a result to the list of jobs .
13013	Cancel the current job .
13014	Wait for the job to be done .
13015	Distribute all available jobs .
13016	Add a new job set to the queue .
13017	Get a job from the active js .
13018	Return a job from the queue .
13019	Add a result to a job .
13020	Called when a job set is done .
13021	Cancel all active js .
13022	Uniquify a list .
13023	Return True if obj matches the given regex .
13024	Get a list of entries from the cache .
13025	Get the EC2 region .
13026	Filter a list of entries according to a set of filters .
13027	Get the host for a given instance .
13028	Create an entry from a json dictionary .
13029	Get an attribute .
13030	Sort a list of entries by an attribute .
13031	Return the repr as a line .
13032	Create an instance from a boto instance .
13033	Return True if the attribute matches the given filter .
13034	Returns a string representation of the object .
13035	Render a list of entries .
13036	Add a timestamp to the event dict .
13037	Setup logging handlers .
13038	Create a structlog logger .
13039	Setup Celery .
13040	Get information about a worker .
13041	Delete a worker .
13042	Configure a switch option .
13043	Create a section of the config file .
13044	Set a configuration string .
13045	Handle config commands .
13046	Create zsh and bash files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Convert a table into a list of rows .
13051	Return the color of a number .
13052	Get the color hash of a string .
13053	Generate a random color .
13054	Prompt the user for input .
13055	Check credentials for a user .
13056	Check if the given token is valid .
13057	Decorator to check if the request requires a token .
13058	Check if a process is running .
13059	Import obj_name from mod_path .
13060	Returns the ip address of the server .
13061	Make a request to the given url .
13062	Prepare the post parameters .
13063	Serve a configuration object .
13064	Render a template .
13065	Stream a command to stdout .
13066	Stream a list of commands to all threads .
13067	Stream a list of commands .
13068	Get a list of workdays between two dates .
13069	Get the path of a command .
13070	Build an ssh command .
13071	Build the scp command .
13072	Copy entries to remote_path local_path and profile .
13073	Copies a list of SCP entries to a new directory .
13074	Run an SSH command on a list of hosts .
13075	Connect to an SSH server .
13076	Load an LsiProfile .
13077	Initialize a LsiProfile object from a list of arguments .
13078	Returns a Relationship object for the given part .
13079	Returns a list of packages that are related to the given relationship type .
13080	Load relationships from source .
13081	Add a part to the list .
13082	Load a part .
13083	Find the object with the given name .
13084	given an element parse out the proper ContentType
13085	Parse a string into a Chatl tree .
13086	Build a JWK from the secret key .
13087	Assign a force field to an Ampal object .
13088	Find max rad and max npnp .
13089	Returns a dict of the force field parameters .
13090	Returns the object as a stream .
13091	Yield matching segments from a zf .
13092	Copy a directory from one bucket to another .
13093	Open a bucket .
13094	Upload a source directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List filenames in a directory .
13098	List all directories in a directory .
13099	Create a prefix for a directory .
13100	Delete a file from the bucket .
13101	Ensure that the user is logged in .
13102	Returns a boolean indicating whether the language is loud .
13103	Delete a directory .
13104	Return the home URL .
13105	Silence a function without a namespace .
13106	Project home breadcrumb in Bs3 format .
13107	Project home breadcrumb in bs4 format
13108	Calculate the energy of each interaction in an AMPAL object .
13109	Get the internal energy of an AMPAL object .
13110	Return a list of all hotspots .
13111	Get a keeper token .
13112	Upload a product to Travis
13113	Check if we should skip a Travis event .
13114	Purge a surrogate key .
13115	Register a new build .
13116	Confirm that a build has been completed .
13117	Deep update a mapping .
13118	Entry point for ltdconveyor .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split path into drive and tail .
13122	Find a file in a path .
13123	Get the default editor for the given filepath .
13124	Process a module .
13125	Generate an HTML chart .
13126	Convert a chart object to HTML .
13127	Serialize a data object to a chart .
13128	Patches the json data .
13129	Convert a JSON string to an HTML string .
13130	Convert a dictionary to a DataFrame .
13131	Write html to a file .
13132	Create a chart class from a DataFrame .
13133	Encode x and y fields .
13134	Create a ghuser role .
13135	Infer tarball URL from app . json .
13136	Create a new app .
13137	Delete an app .
13138	Iterate over an attribute of an iterable .
13139	Convert a string to a binary string .
13140	Return the ipaddress of a user .
13141	Generate a random date .
13142	Get a Heroku Session object .
13143	Make a request to the Heroku API .
13144	Create a tarball build .
13145	Check the status of a build .
13146	Generate a sequence .
13147	Decorator that memoizes a function .
13148	A decorator to make a function unique .
13149	Register a sub - command parser .
13150	Returns the root argparser .
13151	Returns the description of the object .
13152	Returns the help string if it exists .
13153	Run the command .
13154	Encode a string or a dataset .
13155	Returns a list of all registered athletes .
13156	Returns a list of the last n activities .
13157	Request a list of activities for an athlete .
13158	Request activity data for an athlete .
13159	Return an endpoint for an athlete .
13160	Return an activity endpoint for the given athlete .
13161	Get a GoldenCheetah request .
13162	Create a new build .
13163	Create a url with api auth .
13164	Generate a random title .
13165	Generate a random person name .
13166	Generate a random last name .
13167	Render the list of options .
13168	Create a new dataset .
13169	Render the chart .
13170	Check the type of the chart .
13171	Returns the URL of the API .
13172	Open a web browser and return a string .
13173	Save the image to file .
13174	Returns the url of the request .
13175	Returns a string representation of the image .
13176	Write the URL to a file .
13177	Return a hexadecimal digest of the checksum .
13178	Returns the number of bytes between min and max .
13179	Decorator to add an entity name to a class .
13180	Return the unprotected and protected claims .
13181	Returns a dictionary containing the signature keys as JWKs .
13182	Unpack a client metadata statement .
13183	Pack a metadata statement .
13184	Evaluate a metadata statement .
13185	Check if metadata_statements matches federation_usage .
13186	Extend a request with a message .
13187	Parse command line arguments .
13188	Add command line arguments to a parser .
13189	Apply logging operations to log_files .
13190	Log a message using verbose logging .
13191	Returns a dictionary containing the letters of a word .
13192	Generate anagrams in a word .
13193	Convert a class to an AMP string .
13194	Transform a timeseries into a list of dicts .
13195	Get the last value from a time series .
13196	Validate that the page number is an integer .
13197	Get the page of an iterator .
13198	Change the mode of a file .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request .
13202	Create a new request .
13203	Update a metadata statement .
13204	Update the signature for a given location .
13205	Yield bundle contents .
13206	Create a bundle .
13207	Returns a list of URLs for the given asset type .
13208	Returns the HTML tags for the given asset type .
13209	Return a list of HTML tags for each asset type .
13210	Convert a URL to a HTTP url .
13211	Returns a list of links to the given URL .
13212	Connect to AMP server .
13213	Returns a list of all modules in the project .
13214	Import all service modules .
13215	Convert a parameter to a list of dates .
13216	Select fields from a dict .
13217	Create a CursorFormatter . date_map_field from a list of datemaps .
13218	Print a cursor .
13219	Print the number of items in the cursor .
13220	Get a list of tasks from a list of tasks .
13221	Add default departments to a project .
13222	Add default Atypes to a project .
13223	Add default sequences to a project .
13224	Add a user s rnd shot to the project .
13225	Handle post - save messages .
13226	Create a shot for a sequence .
13227	Create all tasks for the given element .
13228	Pre - connect to a peer .
13229	Send a packet to a peer .
13230	Get a value from the config .
13231	Decorate a function to process nova events .
13232	Decorate a function to process events of the specified type .
13233	Decorate a function to process neutron events .
13234	Decorate a function to process a glance event .
13235	Decorate a function to process a Swift event .
13236	Decorator to process keystone events .
13237	Decorate a function to process an event of the specified type .
13238	Add a factory .
13239	Remove a factory by identifier .
13240	Create a connection to a factory .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Create a multiplexed AMP connection .
13245	Create a multiplexed AMP connection .
13246	Called when data is received locally .
13247	Send data to a remote device .
13248	Called when the connection is lost .
13249	Get the local protocol for the given connection identifier .
13250	Returns a dict of data received from a remote device .
13251	Disconnect a connection .
13252	Return a centered version of a string .
13253	Print a clock on the right of the string .
13254	Convert a version number to a string .
13255	Identify a unit framework for a target unit .
13256	Assert that the given value is convertible to the given target_unit .
13257	Pad data_to_pad to block_size bytes .
13258	Remove padding from input data .
13259	Sign a message .
13260	Gather metadata statements for this context .
13261	Prints the anagrams of the input word .
13262	Adds an argument parser to the command line .
13263	Main entry point for sys . argv
13264	Handle unprocessed data .
13265	Called when a type is unregistered .
13266	Create a function stub .
13267	Ping a remote call .
13268	Generate a regex for a command .
13269	Create an AmpList object from a string containing a proton .
13270	Convert this ampList to a string protobuf .
13271	Verify that the metadata statement is valid .
13272	Parse a remote response .
13273	Dump a database to a file .
13274	returns a list of all databases on this server
13275	Returns a dict of all local files in a path .
13276	Sync local and S3 files in a folder .
13277	Decorator to redirect to service if tokens are required .
13278	Logs a user in .
13279	Build a package .
13280	Creates a new fridge and returns it .
13281	Load the data from a JSON file .
13282	Self - sign a JWK .
13283	Returns a JWT containing a signed key .
13284	Decorate a function so that it can be used as a library .
13285	Load source code from testdir .
13286	Runs the tests in a library .
13287	Calculate the score of a letter .
13288	Calculate the score of a word .
13289	Generate a list of words from a file .
13290	Check if a word is a valid scrabble word .
13291	Main entry point for SOSearch .
13292	Run a StackOverflow query .
13293	Called when a string is received .
13294	Returns the command and responder for the given command name .
13295	Parse the request values .
13296	Execute a request and return a response .
13297	Write a response to the transport .
13298	Called when a connection is lost .
13299	Build a JSONAMPDialectReceiver for the given address .
13300	Convert a jwks object to a KeyJar .
13301	Load a bundle from a json string .
13302	Process a message .
13303	Process a cinder message .
13304	Process a message from a neutron customer .
13305	Process a message .
13306	Process a message .
13307	Process a message .
13308	Process a message .
13309	Serve the WSGI server .
13310	Print a message to stdout .
13311	Print a message to stderr .
13312	Register a CommandSubClass .
13313	Register a CommandSubClass .
13314	Converts the given value to a string .
13315	Initialize an argument from a string .
13316	Updates a completion dictionary .
13317	Initialize the connection to the Ternya server .
13318	Initialize a new MQ connection .
13319	Initialize the service modules .
13320	Initialize a Nova consumer .
13321	Initialize a cinder consumer .
13322	Initialize a neutron consumer .
13323	Initialize a glance consumer .
13324	Initialize a heat consumer .
13325	Enable the notification for an Openstack component .
13326	Get information about a song .
13327	Download a song to a thread .
13328	Execute the instruction .
13329	Load a name from the globals .
13330	Call a function .
13331	Dump a database to a file .
13332	Render a ditaa file .
13333	Calls the application s atexit function .
13334	Run the application .
13335	Context manager to recursively change a directory .
13336	Copy the contents of src to dst .
13337	Post - mortem debugger .
13338	Get the mtime of a file .
13339	Check if an item has changed .
13340	Synchronize all files in the fdir .
13341	Clear all files in the filesystem .
13342	Scrape an IPDB feed .
13343	Download an image from a URL .
13344	Check if the image has changed .
13345	Returns a template . Node subclass .
13346	Find the most recent call to the logger .
13347	Get the defining component of a PE .
13348	This is the entry point for the xtuml command line interface .
13349	Find a symbol in the stack .
13350	Check if a package is contained in a package .
13351	Check if a PE is a global PE .
13352	Get the data type name from a datetime object .
13353	Return a list of attributes that are related to r_rgo r_rto
13354	Return a namedtuple of enums for a given datetime .
13355	Create a bridge from a metamodel .
13356	Create an external entity from a metamodel .
13357	Run a function on a metamodel .
13358	Return a string representation of a constant .
13359	Return a function that can be used to run an operation .
13360	Create a derived attribute .
13361	Create a class for a given object .
13362	Create a simple association .
13363	Returns a m - > r - > r - > association .
13364	Create a new association .
13365	Create a component from a bp_model .
13366	Perform a call to the given socket .
13367	Send an ACCEPT message to the client .
13368	Reject a call .
13369	Raise an exception .
13370	Wait for a call .
13371	Establish a result queue .
13372	Dispatch a reply .
13373	Guess the type name .
13374	Deserialize a value .
13375	r  x  x  x
13376	r
13377	Get a feature by content_id .
13378	Get a list of content ids .
13379	Put a list of items into the indexes .
13380	Delete a document .
13381	Delete all documents in the index .
13382	Delete the index if it exists .
13383	Returns a generator that yields the _id and _source .
13384	Scan for feature ids .
13385	Scan a prefix for features .
13386	Scan for prefix ids .
13387	Perform a fulltext scan of a query .
13388	Returns a generator of fulltext scan ids .
13389	Perform a keyword scan .
13390	Iterate over keyword scan ids .
13391	Returns a generator of index ids for a given feature name .
13392	Return the source of a feature .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Return the number of bytes in a file - like object .
13400	Count the number of bytes passed to the filter_preds .
13401	Returns a string representation of a string counter .
13402	Process docopts .
13403	Return the default formatter for an error message .
13404	Convert an XML string to a link string .
13405	Return a pretty - printed identifier .
13406	Checks the uniqueness constraint .
13407	Check the integrity of a link .
13408	Check the integrity of a subtype .
13409	Return the index of a list of feature names .
13410	Convert a string to an integer .
13411	Put a list of items into the table .
13412	Delete all items from the table .
13413	Scan the table for key ranges .
13414	Scan the table for ids in key_ranges .
13415	Scan the index table for a value .
13416	Return the index scan prefix for a given index .
13417	Return the index scan prefix and return key .
13418	Scan the index for a prefix .
13419	Define an index .
13420	Adds an index to the table .
13421	Put a raw value into the index table .
13422	Given an index name and a list of ids and fcs return a generator of index keys .
13423	Returns the index with the given name .
13424	Check if pypi_package_name is valid .
13425	Add a direction to a value .
13426	Returns the type name of a datetime object .
13427	Returns the attribute referenced by o_attr
13428	Build a core type from a datetime object .
13429	Build an enumeration type .
13430	Build a struct type .
13431	Build a user s type .
13432	Return the build type for a datetime object .
13433	Build an xs . Element class for the given object .
13434	Build a component from an xs . Element .
13435	Build the XML schema .
13436	Return a prettier version of an XML string .
13437	Fetch a list of stolen bikes .
13438	Set the positional information of the node .
13439	Decorator to track the production of a function .
13440	r
13441	r
13442	r  - >
13443	r  x1b [ 1mNAME  x1b [ 0m LE - > t_LE
13444	r  x1b [ 1mNAME  x1b [ 0m GE expression
13445	r
13446	r  .
13447	r
13448	r  ]
13449	r  ?
13450	r  t = LESSTHAN
13451	r
13452	r
13453	Create a new queue .
13454	Delete a queue .
13455	List all queues .
13456	List all exchanges .
13457	Purge a queue .
13458	Create a MIME message .
13459	Read the text from the file .
13460	Return True if the text is visible .
13461	Main entry point for the command line interface .
13462	Serialize a value to a string .
13463	Serialize an association string .
13464	Serialize a class to XML .
13465	Main entry point for n - grams search .
13466	Search the SLB for a given query .
13467	Partition a collection into succeed and fail lists .
13468	Run a random app .
13469	Return a django . utils . bidi context .
13470	Find a link between inst1 and inst2
13471	Return a formalized version of the object .
13472	Compute the lookup key for the given from_instance .
13473	Compute the index key for the given to_instance .
13474	Returns the attribute type for the given attribute name .
13475	Create a new instance of this object .
13476	Returns a generator of all instances of this class .
13477	Define a metaclass with the given attributes .
13478	Send a message to a socket .
13479	Receive messages from a socket .
13480	Return a dead code file .
13481	Parse a list of email addresses .
13482	Return a rpc function .
13483	Return the rpc spec table for an application .
13484	Normalize a postcode middleware .
13485	Read the next value from the stream .
13486	Accept a system .
13487	Accept a C - C string .
13488	Accept a PE - PKG packet .
13489	Get the brightness of the image .
13490	Return True if the value matches the given args .
13491	Find a match for a position in the document .
13492	Returns a selection for a character .
13493	Changes the cursor position .
13494	Return the exception information .
13495	Create an inputhook for Qt4 .
13496	Get a Mapper instance by name .
13497	Decorator to add a function to the url .
13498	Decorator to add a function to a URL .
13499	Add a pattern to the data store .
13500	Add a function to a file .
13501	Make a call to a URL .
13502	Executes the given source .
13503	Check if the cursor is up pressed .
13504	Returns True if the cursor is downpressed .
13505	Returns the previous edit in the history . If as_prefix is False it will be replaced .
13506	Returns the next edit in the history .
13507	Handle an ExecuteReply request .
13508	Returns True if the history is locked .
13509	Returns the edited history for the given index .
13510	Set the history .
13511	Store the current edits in the input buffer .
13512	Called when a console is closed .
13513	Build the Record Collection from a DataFrame .
13514	Convert a collection to a DataFrame .
13515	Convert a DataFrame to a DataFrame .
13516	Set the attributes of this object .
13517	Subscribe to all topics .
13518	Log a message .
13519	Merge a list of lists into a single list .
13520	Iterate over a reference in a remote location .
13521	Convert a notebook to this notebook format .
13522	Return the supported platform .
13523	Get an importer for a path item .
13524	Return a string - like object .
13525	Parse a version string .
13526	Override setuptools .
13527	Add a new entry to the list . If insert is True the entry will be added . If replace is True it will be replaced .
13528	Find all plugins in a given environment .
13529	Get the path to the cached files .
13530	Parse a Requirement from a string .
13531	Returns the parsed PKG_INFO .
13532	Compute the dependencies of this package .
13533	Parse a filename .
13534	Collapse leading ws from header and txt .
13535	Hide an event .
13536	Show an event in the text editor .
13537	Returns the current text cursor .
13538	Update the current text cursor .
13539	Register an admin site .
13540	Returns a list of all disk partitions .
13541	Returns a tuple of the CPU times of a system .
13542	Returns a list of system CPU times per user .
13543	Read a non - block file from stdin .
13544	Read a raw block from stdin .
13545	Update the tab bar visibility .
13546	Create a new tab with the current kernel .
13547	Add a tab with the given frontend .
13548	Add an action to a menu .
13549	Creates a new DynamicMagic object .
13550	Populate the all_magic_menu .
13551	Close all tabs and stop all kernels .
13552	Generate a random password .
13553	Check if a passphrase is a valid passwd .
13554	Create an editable boolean cell .
13555	Return the indented short title of an item .
13556	Collect all editable booleans from the list .
13557	Toggle a boolean for an object .
13558	Check if the user has permission to change the object .
13559	Checks if the user has permission to delete an object .
13560	Add n children to a graph .
13561	Create a bintree with the given levels .
13562	Submit a list of jobs to the view .
13563	Validate a tree .
13564	Create a color table .
13565	Return a copy of this ColorScheme .
13566	Add a ColorScheme instance to the table .
13567	Set the active color scheme .
13568	Return the path to the home library .
13569	Handle IOpub messages .
13570	Handle a stdin request .
13571	Wait for the kernel to be running .
13572	Set the style .
13573	Get the format for the given token .
13574	Returns a QTextCursor for the given document .
13575	Returns a QTextCharFormat object for the given style .
13576	Find a command in the environment .
13577	Normalize a path .
13578	Raise DistutilsSetupError if the given value is not a package namespace .
13579	Check entry points .
13580	Returns True if src is the last blank line .
13581	Return True if src is the last two blank lines .
13582	Transform a python line into a python line .
13583	Transform a python line into a python line .
13584	Transform a plain text prompt into a plain text prompt .
13585	Transform an IPython prompt into a list of strings .
13586	Push a list of lines to the input .
13587	Returns True if the input accepts more lines .
13588	Find the indentation space for a given line .
13589	Store a list of lines in a buffer .
13590	Reset the source to its raw state .
13591	Handle the cell magic .
13592	Append a list of lines to the cell .
13593	Transform a cell .
13594	Push a list of lines to IPython .
13595	Initialize observers .
13596	Post a notification to all observers .
13597	Return a set of observers for a notification .
13598	Add a callback to the observers list .
13599	Create a new BackgroundJobFunc
13600	Update the status of all running jobs .
13601	Print a report of a group .
13602	Flushes a group .
13603	Get a new status for this job .
13604	Update the status of the group .
13605	Initialize the background job .
13606	Insert a new value at idx .
13607	Return a copy of this object .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the canonicalized path .
13612	Moves the lock to a new state .
13613	Returns the energy of the city .
13614	Return a dictionary containing the default values for the given keys .
13615	Check if the table is valid .
13616	Convert a list to a dictionary .
13617	Render an expression from a check .
13618	Print a warning message .
13619	Parse a YAML configuration file .
13620	Convert a list of rows to a table .
13621	Create a link to a URL .
13622	Return a javascript file .
13623	Generate a CSS file from a URL .
13624	Generate an image from a URL .
13625	Convert a numeric value to a numeric value .
13626	Multiply a numeric value with a numeric argument .
13627	Convert a numeric value to a numeric value .
13628	Validate that a value is a numeric value .
13629	Return the verbose name of an object .
13630	Split user input into pre - esc - ifun and rest - ifun .
13631	Add options to the parser .
13632	Add a builtin .
13633	Remove a builtin .
13634	Deactivate all builtins .
13635	Find the url name of a requirement .
13636	Returns a generator that yields explicit links to the given rels .
13637	Unshell a string into a list .
13638	Run the coverage script .
13639	Add an action to a dash .
13640	Append an action to the options parser .
13641	Run a command on the command line .
13642	Print a help message to the user .
13643	Returns a boolean indicating if a help command is available .
13644	Check if the args are allowed .
13645	Execute a python module .
13646	Print debug information .
13647	Unserialize an object .
13648	Set the current display hook .
13649	Log exceptions in a function .
13650	Returns True if the given URL is a valid URL .
13651	Validate a URL .
13652	Validate a url container .
13653	Pull a list or tuple of keys from the user .
13654	Returns a list of random ports .
13655	Create a remote function .
13656	Create a ParallelFunction .
13657	Map a sequence to another sequence .
13658	Returns the tail of the current readline .
13659	Set the auto - indent feature .
13660	Initializes the logstart method .
13661	Save the sys . modules state .
13662	Restore the sys . modules state .
13663	Register a post - execution function .
13664	Create a new main module .
13665	Create a copy of the main ns file in the cache .
13666	Initialize the user ns .
13667	Returns a list of all NS references for the current user .
13668	Reset the history manager .
13669	Delete a var .
13670	Reset all references to the given regex .
13671	Push a list of variables to the API .
13672	Find the identifier for the given oname .
13673	Find a property based on oname .
13674	Returns a Struct object for the given oname .
13675	Returns True if object is found False otherwise .
13676	Initialize the history manager .
13677	Show a traceback for an exception .
13678	Show a traceback .
13679	Print a traceback .
13680	Shows a SyntaxError .
13681	Pre - readline method .
13682	Complete a line of text .
13683	Set a custom completer .
13684	Sets the completer namespace and global namespace .
13685	Run a line magic .
13686	Find a magic by name .
13687	Define a macro .
13688	Execute a command on the system .
13689	Auto - rewrite input .
13690	Get a dictionary of user variables .
13691	Return a dictionary of user expressions .
13692	Evaluate an expression .
13693	Safely execute an IPython file .
13694	Run a cached cell magic .
13695	Run a single cell .
13696	Run an ast . Exec node .
13697	Enable pylab .
13698	Expand the value of a variable .
13699	Create a temporary file .
13700	Extract input lines from the history manager .
13701	Find the user code for the given target .
13702	Execute all atexit operations .
13703	Broadcast a message .
13704	Send a message to a list of targets .
13705	Decorator to raise a SkipTest exception if a test condition is met .
13706	Decorator to raise a KnownFailureTest if the test fails .
13707	Deprecated decorator .
13708	List all profiles in a directory .
13709	Return a list of bundled profiles .
13710	Find the version of req .
13711	Run a command .
13712	Return the filename of the given filename .
13713	Read the next line from the stream .
13714	Send a message to the server .
13715	Send a VINTR or a VINTR to the child .
13716	Recompile unicode regexes as bytes regexes . Overridden in subclass .
13717	Expect a pattern .
13718	Expects a search loop .
13719	Recompile bytes regexes as unicode regexes .
13720	Search for a string in a buffer .
13721	Searches the given buffer and returns the index of the best match .
13722	Create a logging listener .
13723	Unpack a directory .
13724	Emit a message to stdout .
13725	The last error in the log .
13726	Check the output of a command .
13727	Find the source for the given filename .
13728	The number of arcs that have been executed .
13729	Returns a list of all arcs that are missing .
13730	Return a list of unpredicted arcs .
13731	Returns a list of all branch lines .
13732	Returns the total number of branches .
13733	Returns the list of branch arcs that are missing .
13734	Returns a dict of branch stats .
13735	Set the precision .
13736	Returns the percentage of statements that are covered .
13737	Returns a string representation of the covered pixels .
13738	Highlight text in a haystack .
13739	Highlight a string .
13740	Highlight words in a string .
13741	Run a function .
13742	Unquote the end of a string .
13743	Indent a string .
13744	Convert a string to a marquee .
13745	Format a screen string .
13746	Dedent a string .
13747	Wrap text into paragraphs .
13748	Find the optimal value for a list of rows .
13749	Returns the value of i or default if i is not found .
13750	Compute the item matrix from a list of items .
13751	Return a list of SList objects with the given fields .
13752	Build the kernel argv .
13753	Initialize ssh connection .
13754	Pretty - print an object .
13755	Pretty print an object to stdout .
13756	Get the mro of an object .
13757	Return a pretty - printed representation of an object .
13758	Generate a pprinter for a sequence .
13759	Create a pprinter for a dict .
13760	Print obj to p .
13761	Compile a pattern into a pprint .
13762	Print a pprint to obj .
13763	Print a function to p .
13764	Print an exception to p .
13765	Return a function for a given type .
13766	Get a function for a type by name .
13767	Write a text object to the output buffer .
13768	Write a breakable string to the output buffer .
13769	End a group .
13770	Flushes the buffer .
13771	Return a pretty representation of an object .
13772	Add exception colors to TermColors .
13773	Write row into ods . content .
13774	Get text from the clipboard .
13775	Get the clipboard text .
13776	Get text from the clipboard .
13777	Get the path to the temporary folder for building .
13778	Rekey a dictionary .
13779	Extract datetimes from an object .
13780	Squash all datetimes in obj .
13781	Return the default datetime for a given object .
13782	Convert an object to a JSON string .
13783	Check if the site directory exists .
13784	Write a UMASK script to a directory .
13785	Sleep here .
13786	Create an argument parser .
13787	convert . pyx extensions to . c
13788	Main entry point for zmq .
13789	Build a PackageFinder object .
13790	Called when the logging level has changed .
13791	Returns the default log handler .
13792	Called when a flag has changed .
13793	Print help for aliases .
13794	Print help for all flags .
13795	Print the subcommands .
13796	Print a help message to the user .
13797	Print examples .
13798	Update self . config .
13799	Initialize a subcommand .
13800	Flatten the flags .
13801	Parse a command line .
13802	Load a config file .
13803	Generate a configuration file .
13804	Downsample an array .
13805	Returns a formatter for the given info .
13806	Write a message to the output stream .
13807	Check if the config has changed .
13808	Get help for a class .
13809	Get help for a given trait .
13810	Create a section for a class s configuration .
13811	Clears the instance of the class .
13812	Create an instance of a subclass .
13813	Format a failed traceback .
13814	Print a traceback to stderr .
13815	Flushes the socket channel .
13816	Override start_channels to emit started_channels .
13817	Read a string from a file .
13818	Returns a python object with no interrupt .
13819	Execute a command and call a callback .
13820	Split an argument into a list of tokens .
13821	Compress a dhist and return a new dhist .
13822	Create a magics class .
13823	Record a magic function .
13824	Mark a method as a magic .
13825	Decorator to mark a function as a magic .
13826	Returns a dictionary of the lsmagic docs .
13827	Register a class of magics .
13828	Register a magic function .
13829	Format a string in LaTeX .
13830	Parse the options table .
13831	Sets the default option of a function .
13832	Create a guiref for a page .
13833	Create a task with the given callable .
13834	Get information about a task with a given label .
13835	Get a function from the funcinfo dict
13836	Calculate the next run .
13837	Submit a request to the Run Task Channel .
13838	Send a message to the task .
13839	Run asap .
13840	Run a task in iterations .
13841	Run the callable only once .
13842	Find the path to the url file .
13843	Bind an IPython kernel to the engine .
13844	Reads test steps from ctxt .
13845	Create an interrupt event .
13846	Wait for multiple objects to be processed .
13847	Filter a list of objects by name and type .
13848	List all names in a namespace .
13849	Raise a ValueError if the arguments are mutually exclusive .
13850	Draw a figure if it is interactive .
13851	Flush all active figures .
13852	Send a figure to the backend .
13853	Load an IPython extension .
13854	Unload an ipython extension .
13855	Generate n random ports .
13856	Initialize the web application .
13857	Handle a SIGINT signal .
13858	Shutdown the notebook server .
13859	Shut down all the kernels .
13860	Price options for a given number of days .
13861	Replace multiple elements in a dict with text .
13862	Render a color scheme .
13863	base_launch_kernel is a wrapper around pythonw .
13864	Create a zipfile .
13865	Fix the version of a file .
13866	Check if an object is mappable .
13867	Get a partition from a sequence .
13868	Patch pexpect with a monkeypatch .
13869	Run a file .
13870	Run a source command .
13871	Generate a report of the coverage .
13872	Create an XML file for the given analysis .
13873	Fetch a pi200m file .
13874	Reduce a frequency list to a list of frequencies .
13875	Compute the frequency of a given number of digits in a file .
13876	Convert a txt file to digits .
13877	Calculate the frequency of a single digit .
13878	Compute the frequency of two digits .
13879	Compute the frequency of a number of digits .
13880	Plot two - digit frequency distributions .
13881	Plot one digit counts in f1 .
13882	Print a debug message .
13883	Reverse a view .
13884	Check if a prefix is private .
13885	Returns a unittest . TestSuite from a list of paths .
13886	Create a debug script from a source code .
13887	Debug a test script . src is the script as a string .
13888	Debug a module .
13889	Returns a dict with the given hashroot .
13890	Compress a hash file .
13891	Returns a list of all files in the root directory .
13892	Allow or deny a record .
13893	Returns True if the record matches any of the matchers .
13894	Formats an error message .
13895	Embed a terminal interactive shell .
13896	Returns a DummyMod object .
13897	Returns a trans_title meta_title and meta_csv_path .
13898	Given a list of languages and a locale root make a directory for them .
13899	Write PO entries to a PO file .
13900	Write a header to a po file .
13901	Subscribe a user .
13902	Initialize a notifo parser .
13903	Run a python module .
13904	Run a python file .
13905	Create a code object from a Python file .
13906	Read code from a . pyc file .
13907	Convert a list of items to an html table .
13908	Set the current value .
13909	Cancel the completion of the task .
13910	Select the index of a row or column .
13911	Selects up from the list .
13912	Selects the first element down from the list .
13913	Select the left index .
13914	Select the right index .
13915	Update the current list .
13916	Get the frequency of each word in a text file .
13917	Print a list of words from a list of frequencies .
13918	Convert the XML to a string .
13919	Write the text to a file .
13920	Validate a pin .
13921	Send a shared pin to a topic .
13922	Delete a shared pin .
13923	Send a pin to a user .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List all subscriptions for a user .
13927	Decorator to mark a function as monitored .
13928	Begin a progress monitor .
13929	Perform a task .
13930	Subtask the submonitor .
13931	Call progressmonitor . update .
13932	Add a ProgressMonitor to the submonitor .
13933	Called when the job is done .
13934	Publish a string to the pager .
13935	Ensure that the build location is correct .
13936	Load a list of pyconfig files .
13937	Load the config file .
13938	Read a python file as a dictionary .
13939	Load a flag from the config file .
13940	Decode an argv into a list of strings .
13941	Load configuration from IPython configuration file .
13942	Load a config file .
13943	Parse the given args .
13944	Convert the parsed data to a config file .
13945	Find a module by name or path .
13946	Called when a callback is called .
13947	Called when the process is started .
13948	Notify that the process has stopped .
13949	Interrupt and then kill the process .
13950	Returns a list of command - line arguments .
13951	Start the MPILauncher .
13952	Send a file to remote .
13953	Fetch a file from a remote host
13954	Return the number of engines .
13955	Start a new cluster .
13956	Start a new HPC job .
13957	Return the default context for this cluster .
13958	Parse a job id .
13959	Write a batch script .
13960	Start a batch of jobs .
13961	Create a context menu .
13962	Append a new jpg .
13963	Append a PNG to the input .
13964	Append a new svg to the prompt .
13965	Add an image to the document .
13966	Copy an image to the clipboard .
13967	Returns a QTextDocument with the given name .
13968	Insert an image .
13969	Insert svg data into cursor .
13970	Save an image to a file .
13971	Exit if the IOLoop has changed .
13972	Initialize environment variables .
13973	Auto - rewrite input .
13974	Ask the user to exit .
13975	Set the next input of the interactive shell .
13976	Read a config file .
13977	Get a list of values from a section and option .
13978	Return a list of lines for the given section and option .
13979	Create an instance of timid from an environment variable .
13980	Create an attribute from a list of arguments .
13981	Initialize a HandyConfig object from a file .
13982	Set an attribute from a config option .
13983	Expand the user of a path .
13984	Convert a list of delimiters to a string .
13985	Split a line into multiple lines .
13986	Returns a list of global keywords that match the given text .
13987	Returns a list of all attributes that match the given text .
13988	Called when a greedy variable is changed .
13989	Returns a list of files that match the given text .
13990	Returns a list of aliases that match the given text .
13991	Returns a list of python attributes that match the given text .
13992	Return the default arguments for the given object .
13993	Complete a line of text .
13994	Complete a line of text .
13995	Returns True if a key matches one of the tests .
13996	Return a list of records matching the given check .
13997	Extract a subdict from a message .
13998	Returns True if the prompt has been silenced .
13999	Writes the output prompt to the shell .
14000	Write format data to stdout .
14001	Write the output to the logger .
14002	Raise an InvalidOperationException if the object is frozen .
14003	Convert a string to a Timestamp .
14004	Called when an event loop is changed .
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the shell .
14008	Performs one iteration of the shell .
14009	Publish a pyin topic .
14010	Send an aborted request to the server .
14011	Clear a request .
14012	Return a python topic string .
14013	Send a shutdown message to the server .
14014	Add the modules before the context .
14015	Remove all modules from sys . modules .
14016	Return the absolute path of a directory .
14017	Check if a file exists or ends with . py .
14018	Check if an object is a class .
14019	Check if the given path is a package .
14020	Get a package from a . py file .
14021	Return the length of a label .
14022	Return the last key of a regex .
14023	Transplant a function to a given module .
14024	Transplant a class to a given module .
14025	Get system CPU times .
14026	Returns the process command line for this process .
14027	Returns a list of open files for this process .
14028	Returns a list of all connected processes .
14029	Check if a user has a group .
14030	Resolve a class from a path .
14031	Calculate usage percentage .
14032	Memoize a function .
14033	Decorator to mark functions as deprecated .
14034	Login to PODocs .
14035	Get the gdocs key .
14036	Ensure that the temporary path exists .
14037	Clear all temporary files .
14038	Upload a file to the Gdocs server .
14039	Downloads and synchronizes the data from Gdocs .
14040	Download the csv and meta data from Gdocs .
14041	Upload a PO document to the local directory .
14042	Clear the empty . csv file
14043	Create a new Qt console .
14044	Check if a URL is accessible from this machine
14045	Check if a URL has the given contents .
14046	Get the response code for a given URL .
14047	Compare the content type of a URL .
14048	Compare the response code of a URL .
14049	Validate data .
14050	Clear stdout and stderr output .
14051	Find a python command .
14052	Generate a list of CodeUnit objects from a list of Morf objects .
14053	Return a flattened rootname for this drive .
14054	Returns the source of the file .
14055	Return True if the filename should be a python file .
14056	Returns the total number of seconds of a timedelta .
14057	Get a result from the server .
14058	Wait for the message to be processed .
14059	Get a dict of all the jobs running on the given engine .
14060	Abort this message .
14061	Return the number of seconds elapsed since this message was submitted .
14062	Wait for the task to complete .
14063	Republish a displaypub .
14064	Wait for all outputs to be ready .
14065	Wait for a message to be processed .
14066	Return the absolute path of a file .
14067	Prepend a list of patterns to an abs file .
14068	Return the sep of a string .
14069	Find all python files in a directory .
14070	Returns the relative filename of the given filename .
14071	Returns the canonical filename for the given filename .
14072	Get data from a zip file .
14073	Returns True if fpath matches fpath .
14074	Returns True if fpath matches fpath .
14075	Map a path to the canonical filename .
14076	Start a Qt4 event loop .
14077	Create an IPython . lib . wx loop .
14078	Loops through the kernel and returns a Timer .
14079	Loop over a gtk kernel .
14080	Loop on a Cocoa kernel .
14081	Enable a GUI .
14082	Returns the GOE of a given number of points .
14083	Calculate the center eigenvalue difference of a matrix .
14084	Returns the ensemble differences between num and N .
14085	Initialize a new step .
14086	Parse a YAML file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load a config file .
14090	Initialize the profile directory .
14091	Stage the default config file .
14092	Write the file to disk .
14093	Erases the file .
14094	Return a dict containing the line data .
14095	Returns a dict of the arc data .
14096	Write data to a file .
14097	Read a file from the filesystem .
14098	Read raw data from a file .
14099	Read lines and arcs from a file .
14100	Combine parallel data into a single file .
14101	Add line data to the file .
14102	Add arc data to self . arcs
14103	Add lines and arcs to the hash .
14104	Return a dict containing the summaries of the lines in the file .
14105	Returns a list of lines that have been pasted .
14106	Interact with the mainloop .
14107	Replace a multiline history with a multiline history .
14108	Prompt the user for raw input .
14109	Edit a SyntaxTB error .
14110	Check if e should be recompiled .
14111	Ask the user to exit .
14112	Returns the revision of the url .
14113	Create a new frontend widget .
14114	Initialize the colors for a widget .
14115	Returns a tuple of information about this pub .
14116	Convert Robj to a numpy array .
14117	Find the source code for the given object .
14118	Set the active color scheme .
14119	Toggle the color scheme .
14120	Convert a structured traceback to text .
14121	Returns a string containing the traceback of the most recent call .
14122	Format a list of colors .
14123	Format an exception only value .
14124	Show an exception only message .
14125	Debugger for the current color scheme .
14126	Set the mode of the formatted TB .
14127	Requires a user to be a member of a group .
14128	Ensure that a module is from a list .
14129	Add a line to the code .
14130	Add a section to the code .
14131	Get a function by name .
14132	Return the code for a given expression .
14133	Render the function .
14134	Convert a value to a list of dots .
14135	Render a template .
14136	Returns a dictionary with the default formatters .
14137	Get a function for a given type .
14138	Get a function for a given type by its name .
14139	Change the precision of a float .
14140	Return a list of user config files .
14141	Configure the python environment .
14142	Configure the logging configuration .
14143	Configure the working directory based on where .
14144	Print a single page of text .
14145	Print a string .
14146	Print a page of a file .
14147	Get the default pager command .
14148	Get the start of a pager .
14149	Print a snippet of a string .
14150	Print basic unicode text .
14151	Convert an object to a PNG .
14152	Print a png representation of an object .
14153	Check if an object can be printed in LaTeX .
14154	Return a latex representation of the given object .
14155	Add options to the plugin .
14156	Validate a list of strings .
14157	Validate that a dictionary is a string .
14158	Start the ioloop loop .
14159	Handle a response message .
14160	Execute a request .
14161	Complete a request .
14162	Get information about an object .
14163	Send a history request to the server .
14164	Shutdown the server .
14165	Flushes the IOLoop .
14166	Send an input message to the server .
14167	Start the channels .
14168	Stop all channels .
14169	Returns True if any of the channels are running .
14170	Load a connection file .
14171	Write the connection file .
14172	Launch a kernel on a local interface .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	Interrupts the kernel .
14177	Send a signal to the kernel .
14178	Returns True if the kernel is alive .
14179	Get the shell channel .
14180	Returns the sub - channel .
14181	Access the hb_channel
14182	Bind a kernel to an IPEngineApp instance .
14183	Print a debug message .
14184	Returns a list of extension classes .
14185	Check if a step should be skipped .
14186	Post a step .
14187	Finalize the extension .
14188	Returns a generator yielding all files in egg_dir .
14189	Scan a module for stubs .
14190	Launch a new IPControllerApp instance .
14191	Save a connection dict to a file .
14192	Load config from JSON file .
14193	Load secondary config from JSON .
14194	Execute a cell in parallel .
14195	Enable autopx .
14196	Disable autopx .
14197	Run a single cell .
14198	Run a heartbeat .
14199	Run a task .
14200	Remove a task .
14201	Patch a protocol for a given agent .
14202	Patch an object if it s missing an attribute .
14203	Accept a connection to the server .
14204	Reject a connection .
14205	Returns a ProxyAgent with a context .
14206	Check if the given form is valid .
14207	Delete an object .
14208	Pre - save the UserViewMixin .
14209	Generate a report for the given Morfs .
14210	Check if the module is enabled or not .
14211	Create an editor for the given filename .
14212	Fix an editor error .
14213	Get the clipboard .
14214	Add a function to the chain .
14215	Get the metadata for a given path or module .
14216	Configure the config .
14217	Import an item from a package .
14218	Try passwordless ssh .
14219	Try to openssh with a passwordless keyfile .
14220	Try to use passwordless paramiko .
14221	Create a tunnel connection .
14222	Open a tunnel .
14223	Stop scheduling tasks .
14224	Unwrap an exception .
14225	Register an engine in the queue .
14226	Unregister an engine .
14227	Handle an ExecuteReply .
14228	Flushes all notifications .
14229	Flushes the results from the queue .
14230	Flushes control messages from the socket .
14231	Flushes the ignored control socket .
14232	Flushes an IOPUB message .
14233	Sets the timer to spin every interval seconds .
14234	Stops the spin thread .
14235	Returns a tuple with the current state of the connection .
14236	Wait for a list of jobs to finish .
14237	Send an application request to the client .
14238	Send an executable request to a socket .
14239	Get the result of a search .
14240	Get the status of a queue .
14241	Purge results from a list of targets .
14242	Send a history request to the hub .
14243	Send a query to the database .
14244	Return a set of opcodes .
14245	Returns a ByteParser instance .
14246	Return a list of lines matching the given regexes .
14247	Parse the text .
14248	Get the first line of a multiline .
14249	Return a list of the first lines in a list .
14250	Parse a Python source file .
14251	Returns a list of all arcs in the byte stream .
14252	Returns a dict containing the number of lines that have been excluded .
14253	Returns a list of all child parsers of this object .
14254	Yields a tuple of bytes and lines .
14255	Find all statements in child parsers .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Validate a list of chunks .
14259	Returns a generator of arcs .
14260	Returns a list of all child parsers .
14261	Returns a set of all arcs in this parser .
14262	Add Coverage options to the parser .
14263	Start the coverage .
14264	Generate a coverage report .
14265	Returns True if the given file is a want file .
14266	Interpret a distribution name .
14267	Open a URL with authentication .
14268	Fetch a distribution for a requirement .
14269	Returns the parent of the given object .
14270	Return the engine s root topic .
14271	Render a template .
14272	Configure the capture .
14273	Formats an error as a tuple .
14274	Split data by num bytes .
14275	Convert a notebook from v2 to v3
14276	Convert a hex color to an RGB color .
14277	Returns a dict of colors for a given style name .
14278	Returns a QFont object for a given family .
14279	Handle an ExecuteReply request .
14280	Handle a history reply .
14281	Handle a pyout message .
14282	Handle a display message .
14283	Overrides the _started_channels method to load the guiref_magic .
14284	Execute a file .
14285	Process an error message .
14286	Process a payload .
14287	Set default style .
14288	Edit a file .
14289	Make an in - prompt string .
14290	Construct a continuation prompt .
14291	Called when the style sheet has changed .
14292	Called when the syntax style has changed .
14293	Handle a CloudStack response .
14294	Generate a signature for a URL .
14295	Transform a dictionary into a dict .
14296	Returns the amount of memory available in the virtual machine .
14297	Get the CPU times of a system .
14298	Returns a list of process uids .
14299	Get the gids of the process .
14300	Returns a list of process threads .
14301	Returns a list of open files for this process .
14302	Return a hash of a package .
14303	Return information about a package .
14304	Return sys . txt information about the package .
14305	Return the number of CPUs in a Windows machine .
14306	Return the number of CPUs on the system .
14307	Get the next set of messages from the database .
14308	Fetch one row from the database .
14309	Fetch multiple rows from the database .
14310	Fetch all rows .
14311	Connect to a peer .
14312	Parse a JSON string into a Notebook object .
14313	Parse a python file into a notebook file .
14314	Return a list of reads from a string .
14315	Writes an NB object to the specified format .
14316	Write data to a file - like object .
14317	Convert all . ipynb files to metadata .
14318	Load a value from a dictionary .
14319	Returns True if the given name matches the criteria .
14320	Sets the desired class in the plugins .
14321	Returns True if dirname is a directory .
14322	Returns True if the given file is wanted by the plugin .
14323	Returns True if the given function is wanted .
14324	Returns True if the given method is wanted by the plugin .
14325	Returns True if the given module is wanted .
14326	Read lines from a file .
14327	List a command in the pydb .
14328	Print a list of lines .
14329	Execute a pdef command .
14330	Convert from_symbol to to_symbol .
14331	Convert a currency from one symbol to another .
14332	Compute the return of the currency between start_date and end_date .
14333	Get the encoding of a stream .
14334	Return the default encoding .
14335	Write the connection file .
14336	Initialize the heartbeat .
14337	Log information about the connection .
14338	Initialize the session .
14339	Initialize the IO API .
14340	Initialize the kernel .
14341	Initialize the SSH connection .
14342	Register with the controller .
14343	Convert HTML content to text .
14344	Convert a Markdown object to text .
14345	Convert a domain to a FQDN .
14346	Add options to the NoseExclude command .
14347	Configure a NoseExclude .
14348	Determine if a directory should be excluded .
14349	Return a boolean indicating if the given extension is a dynamic library .
14350	Call a list of functions and return the result .
14351	Call each function in reversed order .
14352	Append a function to the list .
14353	Insert a function at the given index .
14354	Format a usage message .
14355	Initialize the application .
14356	Write the pid file to the profile directory .
14357	Remove the pid file .
14358	Get the PID from a file .
14359	Construct a parser for a magic function .
14360	Return the real name of a magic function .
14361	Highlight a block of text .
14362	Re - highlight a block .
14363	Set the format of the current highlighter .
14364	Create a copy of this widget .
14365	Execute a shell command .
14366	Prompt the reader to finish reading .
14367	Check if the tab has been pressed .
14368	Create a context menu .
14369	Filter a console keypress event .
14370	Inserts a continuation prompt at the cursor .
14371	Handle a complete reply .
14372	Execute a shell command with a callback .
14373	Handle the execution of a callback .
14374	Handle an execution reply .
14375	Handle an input request .
14376	Called when the kernel has died .
14377	Handle an object info reply .
14378	Handle a pyout message .
14379	Handle a stream .
14380	Handle a shutdown message .
14381	Execute a file .
14382	Interrupts the kernel process .
14383	Reset the cursor position .
14384	Restart the kernel .
14385	Returns True if a calltip is available .
14386	Executes a completion request .
14387	Process an error message .
14388	Process a message and print a warning if the message is OK .
14389	Change the contents of a document .
14390	Add a plugin .
14391	Return a list of static arguments .
14392	Generate a list of plugins .
14393	Return a list of simple plugins .
14394	Configure the plugins .
14395	Load plugins from pkg_resources .
14396	Load plugins from nose . plugins .
14397	Convert a latex string to a png .
14398	Convert a latex string to HTML .
14399	Convert a MathText object to a figure .
14400	Check if the package exists .
14401	Iterate over processes .
14402	Calculate the percentage of CPU time between two time intervals .
14403	Return a dict representation of this instance .
14404	Get the name of the process .
14405	Return the process s executable .
14406	Returns a list of all children of this process .
14407	Returns the CPU percentage of the current process .
14408	Returns the memory percentage of the device .
14409	Returns a list of memory maps .
14410	Returns True if the process is running .
14411	Suspend the process .
14412	Resumes the process .
14413	Kill the process .
14414	Wait for the process to complete .
14415	wire the kernel to the gobject .
14416	Hijack a Gtk object .
14417	Return True if identifier is shadowed by ip .
14418	Initialize transformers .
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize the checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize the handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Return a handler for the given line_info .
14428	Find the handler for the given line_info .
14429	Transform a line .
14430	Pre - filter a line .
14431	Pre - filter a list of lines .
14432	Instances of IPyAutocall in user_ns get autocalled immediately
14433	Allow and !! in multi - line statements if multi - line_specials is on
14434	Check if the given line_info is a help line . If not return None .
14435	Check if the initital identifier on the line is an alias .
14436	Handle a line of text .
14437	Handle a line .
14438	Handle a line .
14439	Handle an IPython line .
14440	Handle an IPyAutocall line .
14441	Handle a line .
14442	Filter an event .
14443	Override this method to stop the timer .
14444	Adds an event to the widget .
14445	Show information about a call .
14446	Show a text tip .
14447	Called when the cursor is changed .
14448	Returns a property that proxies a local attribute to another .
14449	Convert a path to a canonical path .
14450	Validate a JSON schema .
14451	Returns the masked version of this object .
14452	Returns True if the virtualenv is running under no - global .
14453	pwordfreq - pwordfreq - pwordfreq
14454	Decorate a view with a function decorator .
14455	Return a list of default aliases .
14456	Soft - define an alias .
14457	Define an alias for a command .
14458	Validate an alias command .
14459	Call an alias .
14460	Transform an alias into a string .
14461	Expand an alias .
14462	Generate the autohelp directive .
14463	Reset the sgr .
14464	Split a string into actions and beeps .
14465	Returns a QColor instance for the given color .
14466	Returns a QTextCharFormat object .
14467	Generate a JWT .
14468	Decorator for mutating a function .
14469	Remove jwts that are older than 2 .
14470	Return True if the given tok is already used .
14471	Validate a JWT .
14472	Returns a semaphore .
14473	Return the common prefix for a list of items .
14474	Filter a keypress event .
14475	Returns a QtCore . sizeHint object .
14476	Returns True if the cursor can be cut .
14477	Check if the user can paste text to the clipboard .
14478	Clears the input buffer .
14479	Remove selected text from the cursor .
14480	Execute the command .
14481	Returns the input buffer .
14482	Sets the input buffer .
14483	Sets the font for this tab .
14484	Paste text into the clipboard .
14485	Prints the dialog .
14486	Sets the prompt cursor to the top of the screen .
14487	Resets the font .
14488	Append a custom input to the cursor .
14489	Appends an html string to the end of the page .
14490	Appends a custom html_fetching_plain_text .
14491	Append a plain text prompt .
14492	Clears the temporary buffer .
14493	Called when the cursor completes with the given items .
14494	Fill a temporary buffer with text .
14495	Returns a boolean indicating whether or not the key is down .
14496	Creates the control object .
14497	Create a custom page control .
14498	Filter a page keypress event .
14499	Returns the plain text of a block .
14500	Returns the cursor to the end of the text .
14501	Returns the column number of the input buffer cursor .
14502	Get input buffer cursor line .
14503	Returns the cursor for the prompt .
14504	Returns the selection cursor for the given position .
14505	Inserts a continuation prompt .
14506	Inserts an html string into the cursor .
14507	Inserts html and returns plain text .
14508	Insert text into the cursor .
14509	Keep cursor in buffer .
14510	Quits the keyboard .
14511	Print a single page of text .
14512	Starts the prompt .
14513	Read a line of text .
14514	Sets the continuation prompt .
14515	Sets the cursor to the top of the screen .
14516	Show a prompt .
14517	Adjust the scrollbars .
14518	Main entry point for the python command line interface .
14519	Copy a config file to a new location .
14520	Create a profile directory by name .
14521	Find a profile directory by name .
14522	Convert a cmp= function into a key= function
14523	Read the contents of a file .
14524	Return a list of raw input lines .
14525	Create a temporary python file .
14526	Close the file .
14527	Write data to the file .
14528	Add a new heartbeat handler .
14529	Add a new heart failure handler .
14530	a heart just beat
14531	Return a list of sequences in batches of batch_size .
14532	Convert a path to a filename .
14533	Iterate over all files in a directory .
14534	Prints elapsed elapsed avg and est_end .
14535	Returns the time unit for a given elapsed time .
14536	Extract a WinInst configuration file .
14537	Uncaches a zip directory .
14538	Convert a string to a numpy ndarray .
14539	Check if there are conflicts in dist .
14540	Set fetcher options .
14541	Create the home directory for the current user .
14542	Check if a file is an archive file .
14543	Make an object mutable .
14544	Create a ReadonlyProxy for the given object .
14545	Create a new heading cell .
14546	Create a new notebook metadata .
14547	Create a new author .
14548	Return True if path is a writable directory .
14549	Unquote a filename .
14550	Return the path to a . py file .
14551	Find a file in the search paths .
14552	Returns the IPython home directory .
14553	Return the XDG_CONFIG_HOME or XDG_CONFIG_CONFIG_CONFIG_HOME .
14554	Get the IPython directory .
14555	Returns the IPython package directory .
14556	Return the path to the IPython module .
14557	Returns a boolean indicating if a target is out of date .
14558	Return the hash of a file .
14559	Check for an old IPython config file .
14560	Update the suggestions dictionary .
14561	Get suggestions with a given size .
14562	Get suggestions for an object .
14563	Returns the relative path to this cwdu .
14564	Return a list of globs matching the given pattern .
14565	r Returns a list of lines from the file .
14566	Read a md5 file .
14567	Create the profile if it is not already available .
14568	Print profiler statistics .
14569	Finalize the stats file .
14570	Handle keyboard interrupts .
14571	Enable wx .
14572	Disable the GUI WX .
14573	Disables QT4 .
14574	Enable the gtk interface .
14575	Enable a Tkinter application .
14576	Enable pyglet .
14577	Wrapper around wave - saver .
14578	Initialize the database .
14579	Run a SQL query .
14580	Get information about a session .
14581	Get the last n lines of a query .
14582	Get a range by a string .
14583	Return the path to the history . sqlite file for the given profile .
14584	Set the name of a session .
14585	Reset the cwdu to its original state .
14586	Generate a range session .
14587	Store a line number in the output cache .
14588	Writes the history log to a new session .
14589	Stop the thread .
14590	Get the number of CPUs in the system .
14591	Get system per CPU times .
14592	Return a list of disk partitions .
14593	Return a list of pids .
14594	Return a nice string representation of a pair .
14595	Format a list of statements into a list of lines .
14596	Return a string representation of a stack .
14597	Decorator to add a cache attribute to a function .
14598	Join a list of regexes into a single string .
14599	Ensure a file is gone .
14600	Update a dict or tuple .
14601	Update the cluster profiles .
14602	Start a cluster .
14603	Stop a cluster .
14604	Find the path to a command .
14605	Return the system body .
14606	Find code units for a set of Morfs .
14607	Report a set of Morf files .
14608	Decorate a function to raise exceptions .
14609	Set stdout and stdout .
14610	Decorator to mark a function as timed .
14611	Initialize IPython extensions .
14612	Initialize the script .
14613	Run code from IPythonApp . exec_lines
14614	Run all startup files in the profile directory .
14615	Run all IPythonApp . exec_files .
14616	Run code given at command line .
14617	Run the module .
14618	Return a generic function .
14619	Return the filename of a static file .
14620	Read data from a file .
14621	Escape a string .
14622	Report the data in the html directory .
14623	Make the local static report files .
14624	Write an html file to a file .
14625	Returns the hash of a file .
14626	Write the index . html to the directory .
14627	Read the status from a file .
14628	Write the coverage to a file .
14629	Return True if lst1 is equal to lst2 .
14630	Return a slice of a sequence .
14631	Crush a sequence into chunks of size .
14632	Read setup . cfg
14633	Read the contents of MANIFEST . in
14634	Convert glob to regexp .
14635	Return True if filename matches any of the given patterns .
14636	Returns a list of files that have been versioned .
14637	Start a kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Get a kernel by id .
14641	Get the ports associated with a kernel .
14642	Returns the notebook for the given kernel .
14643	Start a kernel for a notebook .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Create an IOpub stream for a given kernel .
14648	Create a new shell stream for a given kernel .
14649	Create a DB stream for a given kernel .
14650	Reset the object to its original state .
14651	Export an HTML document to a file .
14652	Export an XHTML document to a file .
14653	Ensure that the image tag is UTF - 8 encoded .
14654	Helper function to fix html .
14655	Export the file .
14656	Get a single object or None if it does not exist .
14657	Returns a query that includes the fields in search_fields .
14658	Get a text query from a string .
14659	Returns a query for the date greater than the given date_field .
14660	Returns a query that returns a date without a date field .
14661	Get the null or blank query for a given field .
14662	Delete all fields that are case - insensitive .
14663	Add options to the parser .
14664	Validate a method s attributes .
14665	Returns True if we want a method .
14666	Rotate the cursor .
14667	Patch zmq . eventloop . ioloop . ioloop . install .
14668	Create a parser from a WSDL schema .
14669	Return the url for the websocket .
14670	Reserialize a reply .
14671	Inject a cookie message into the request .
14672	Send a ping to the kernel and call the callback .
14673	Start the hb_periodic callback .
14674	Stop the hb stream .
14675	Load the file from the filesystem .
14676	Get the index of the demo .
14677	Seek the block at the given index .
14678	Edit a block .
14679	Print the block at the specified index .
14680	Print all blocks .
14681	Execute a method on each subject in a collection .
14682	Create a batch from a collection .
14683	Run a function in a thread .
14684	Run a method on a collection in parallel .
14685	Decorator to wrap a function with an object .
14686	Decorate a function with objattrs .
14687	Find the source of a tb frame .
14688	Return a list of inspectable lines .
14689	Display a countdown for a given name and date .
14690	Clean up a list of engines .
14691	Perform a pre - call and return a step result .
14692	Return the result of a post - call .
14693	Save the message ids to the history .
14694	Synchronize the results of a function .
14695	Returns the spin after the given function .
14696	Returns a list of messages .
14697	Gets a message if there is one that is ready .
14698	Decorate a function to return a property .
14699	Returns a tuple containing only the specified fields .
14700	Parse a URL .
14701	Return a list of all modules in a path .
14702	Get the list of root modules .
14703	Create a quick completion for a command .
14704	Returns a list of modules that have been completed .
14705	Returns a list of python executables to run .
14706	Return a list of bookmarks for the given event .
14707	Return an xml - encoded quote of the given attribute .
14708	Configure the plugin .
14709	Write a report to XML .
14710	Add an error to the errorlist .
14711	Add a failed test .
14712	Add a test to the success list .
14713	Returns the number of bins between two loads .
14714	Returns a random number based on the weights of the given loads .
14715	Register an engine .
14716	Unregister an engine .
14717	Handle stranded tasks .
14718	Dispatch a submission message .
14719	Check if any of the tasks have timeouts .
14720	Called when a message is unreachable .
14721	Check if a job can be run .
14722	Save the unmet message for the given job .
14723	Submit a task to the engine .
14724	Dispatch the result of an Invaid task .
14725	Handle a result message .
14726	Handle unmet dependencies .
14727	Update the graph with the given dep_id .
14728	Start a log file .
14729	Print the current state of logging .
14730	Log line_mod and line_ori .
14731	Write data to the log file .
14732	Stop logging .
14733	Create a new worksheet .
14734	Add a string to the chain .
14735	Add a regex to an object .
14736	Dispatch the given key to the regexs .
14737	Returns a generator that yields all matches of the given key .
14738	Called when the notebook dir has changed .
14739	Returns a list of notebooks .
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Find the path to a notebook by its name .
14744	Get the path of a notebook by its name .
14745	Get the metadata for a notebook .
14746	Get a notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Return a list of phys tokens .
14754	Generate a list of token lines from a source file .
14755	Load default config file .
14756	Returns a list of the default interactive shell classes .
14757	Parse command line arguments .
14758	Initialize TerminalIPythonApp .
14759	Initialize a TerminalInteractiveShell instance
14760	Init the banner .
14761	Return the repr type of an object .
14762	Parse a notifier name .
14763	Set the default value of an object .
14764	Called when a trait change occurs .
14765	Returns a dict of the traits of a class .
14766	Returns the metadata for a given trait .
14767	Validate that the value is a subclass of the given object .
14768	Returns the default value .
14769	Check if a task is completed or not .
14770	Returns True if the completion is unreachable .
14771	Return the dependency list as a dict .
14772	Return the depth of a tree .
14773	Print a binary tree .
14774	Disambiguate a DNS URL .
14775	All - reduce a function to a value .
14776	Validate a list of targets .
14777	Dispatch a monitor message .
14778	Dispatch a query message to the client .
14779	Handle a new heart .
14780	Handle a heart failure .
14781	Save a task request .
14782	Save a task result message .
14783	Save an IOPub message to the database .
14784	Send a connection request .
14785	Register an engine .
14786	Unregister an engine .
14787	Finish a registration .
14788	Send a shutdown request .
14789	Purge results from the database .
14790	Extract a record from a dict .
14791	Get the results for a given message .
14792	Get the history of a given message .
14793	Perform a query against the database .
14794	Change the contents of a directory .
14795	Decode a completed command s output .
14796	Run a command under the root directory .
14797	Execute the script .
14798	Handle a message .
14799	Check if the message is from this session .
14800	Report annotated files .
14801	Annotate a file with the given analysis .
14802	Get the version of apt - cache policy .
14803	Squash unicode into unicode .
14804	Extract a header from a message .
14805	Check if the packer can handle the message .
14806	Create a new message .
14807	Sign a list of messages .
14808	Serialize a message .
14809	Send a message to a stream .
14810	Send a list of msg_list to a stream .
14811	Receive messages from a socket .
14812	Feed idents from a list of messages .
14813	Unserialize a message list .
14814	Save a string as an SVG document .
14815	Convert svg string to clipboard .
14816	Convert an SVG string to an image .
14817	Return a dict containing the information about an object .
14818	Return the docstring of an object .
14819	Return the source code of an object .
14820	Returns the argspec for the given object .
14821	Return a call line and docstring for the given oinfo .
14822	Find the filename of an object .
14823	Find the source lines of an object .
14824	Return a py3compat . unicode string representation of an object .
14825	Return the header of a color table .
14826	Prints a message with no information .
14827	Print the definition of an object .
14828	Returns a docstring for the given object .
14829	Return a python source for the given object .
14830	Print the contents of a file .
14831	Format a list of fields .
14832	Display information about an object .
14833	Search for a pattern in a namespace table .
14834	Return a threaded reactor .
14835	Decorator that defers execution until a timeout is reached .
14836	Find the best string for a query in a corpus .
14837	Convert this ElementTree to a string .
14838	Returns an XML representation of the document .
14839	Load all modules in a set of packages .
14840	Invert a dictionary into a dict .
14841	Merge two lists into a single list .
14842	Convert an object to a primitive .
14843	Format the output as a 2 - dimensional string .
14844	Returns a list of figs .
14845	Print a figure .
14846	Run a pylab . mpl file .
14847	Select a figure format .
14848	Find gui and backend .
14849	Activate matplotlib .
14850	Configure the inline support for the given backend .
14851	Activate a pylab gui .
14852	Trace a frame .
14853	Start the current thread .
14854	Stops the trace function .
14855	Start the tracer .
14856	Start the installation tracer .
14857	Start the collection .
14858	Stop collecting data .
14859	Stop all tracers .
14860	Resume all tracer threads .
14861	Returns the line data for the current branch .
14862	Collect exceptions from a list of dictionaries .
14863	Render the traceback for the given excid .
14864	Start the coverage process .
14865	Returns the canonical directory for the given morf .
14866	Return the source code for the given filename .
14867	Check if a file should be traced with a reason .
14868	Check if tracing should be done .
14869	Add a warning to the coverage . py file .
14870	Check for packages in source_pkgs .
14871	Starts the tree .
14872	Stop the atexit process and save the data .
14873	Exclude a regex .
14874	Exclude a regex from the config .
14875	Save the test to a file .
14876	Combine all the files in the file_locator .
14877	Returns a dict containing the collected data .
14878	Compute the analysis of a morf .
14879	Returns a 2 - tuple of statements excluded missing and formatted .
14880	Analyze a CodeUnit .
14881	Creates a SummaryReporter object from the provided arguments .
14882	Annotate a file or directory .
14883	Generate an HTML report .
14884	Generate an XML report .
14885	Display a list of objects .
14886	Display a list of objects in html format .
14887	Display a list of svg objects .
14888	Display a list of objects as a PNG .
14889	Display a list of objects in JPEG format .
14890	Display a list of objects in lattice .
14891	Display a list of objects as JSON .
14892	Display a list of javascript objects .
14893	Reload the data from a file .
14894	Find a py3 command .
14895	Print a command to stdout .
14896	Forward read events from a file descriptor .
14897	Read a line from the file and send it to the socket .
14898	Find a Launcher class based on its name and kind .
14899	Start the cluster .
14900	Build a launcher class .
14901	Start IPython cluster .
14902	Start the ipcluster .
14903	Return a wx . PySimpleApp instance .
14904	Check if an event loop is running .
14905	Start event loop wx .
14906	Return an instance of a Qt4 application .
14907	Returns True if the event loop is running in Qt4 .
14908	Start a Qt4 event loop .
14909	Create a blank canvas .
14910	Draw a cross .
14911	Draw a line between two points .
14912	Set the text at the given position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Get a UUID .
14915	Returns a unique key from a get dictionary .
14916	Get a domain name from a URL .
14917	Returns a dictionary of args for the given URL .
