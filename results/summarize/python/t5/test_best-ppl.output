0	Convert sina . xml to a list of URLs .
1	Download a dailymotion video from a url .
2	Download a video from Sina .
3	Sprint text .
4	Print a sprint log .
5	Print a message to stdout .
6	Print a message to stdout and exit .
7	Detect the operating system .
8	Download a Vimeo file by channel .
9	Get CK Player info by XML .
10	Get a random video URL from a video ID .
11	Get MGTV real url .
12	Return a legitimized version of the given text .
13	Download a video from cbs .
14	Download a stream .
15	Download a video from ACFUN .
16	Match all patterns in text .
17	Parse a query parameter .
18	Get the content of a URL .
19	Make a POST request to the given URL .
20	Parse a host name and port .
21	Get showroom id by room url key .
22	Get title by json topic part .
23	Download WWANMEN topics by course .
24	Download a video by course topic part .
25	Returns True if there is a task in the queue .
26	Returns a dict of all events in the event buffer .
27	Returns a snowflake . connector object .
28	Get AWS credentials .
29	Returns the value of the field with the given name .
30	Copy an expert file to the database .
31	Dump a table to a file .
32	Upload a file to Google Cloud Storage .
33	Return the maximum partition of a table .
34	Get the connection to the MySQL database .
35	Print the current state of a task .
36	Restart num_workers_expected workers .
37	Get a connection to the server .
38	Translate values to target_language .
39	Get a single instance .
40	Create a new instance .
41	Patch an instance .
42	Delete an instance .
43	Get information about a database .
44	Create a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Starts the sql proxy .
49	Stops the sql proxy .
50	Get the version of the SQLAlchemy proxy .
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete a connection .
54	Returns a CloudSqlProxyRunner instance .
55	Gets the database hook .
56	Cleanup the database hook .
57	Reserve a free tcp port .
58	Normalize MLEngine job id .
59	Get the error code for a given error .
60	Delete all dag runs .
61	Clears all dag task instances .
62	Sets the state of the paused dags .
63	Print the status of the task instance .
64	Computes the number of successful TaskInstances .
65	Invoke a lambda function .
66	Creates a DataFlowPythonOperator for the given task_prefix .
67	Make a directory .
68	Convert string to float if possible .
69	Convert a datetime to a timezone - aware datetime .
70	Make a datetime naive .
71	Return a datetime object .
72	Get the connection to the druid broker .
73	Get a connection to the server .
74	Run a request .
75	Checks the response and raises an AirflowException if there is an error .
76	Runs a prepped request and checks the response .
77	Create a new session .
78	Decorate a function to provide a session .
79	Reset the database .
80	Returns a pretty representation of an exception message .
81	Get a list of records from the database .
82	Get a pandas DataFrame from the given hql .
83	Run the given hql with the given parameters .
84	Insert rows into a table .
85	Returns a CosmosClient instance .
86	Checks if a collection exists .
87	Create a new collection .
88	Checks if a database exists .
89	Create a new database .
90	Deletes a database .
91	Deletes a collection .
92	Insert a list of documents into the Airflow database .
93	Deletes a document .
94	Get a single document .
95	Returns a list of documents in a collection .
96	Get a function by name .
97	Create a new function in a location .
98	Update a function .
99	Upload a function to a zip file .
100	Delete a function by name .
101	Returns a generator of DepStatus for the specified task dependencies .
102	Returns True if all dependencies are met .
103	Get the failure reasons for a task .
104	Parse an Airflow S3 configuration file .
105	Gets the credentials for the specified region .
106	Get the connection to the vertica server .
107	Flushes the buffer .
108	Check if fileloc is a zipfile or not .
109	Return a list of file paths in a directory .
110	Construct a TaskInstance
111	Start the DagFileProcessorManager .
112	Send a termination message to the manager .
113	Exit gracefully upon receiving a signal .
114	Starts the dag file processor .
115	Start the loop asynchronously .
116	Start the dag parsing process in sync .
117	Refreshes the dag directory .
118	Prints the stats to the console .
119	Clears non - existent import errors .
120	Log file processing stats .
121	Set the file paths in the queue .
122	Waits until all processes are finished .
123	Processes a DAG file .
124	Terminate all children of this process .
125	Creates an SSH client for the given conn_id .
126	Create a transfer job .
127	Get a transfer job .
128	List all transfer jobs matching the given filter .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancels a transfer operation .
132	Pauses a transfer operation .
133	Resumes a transfer operation .
134	Wait for a GCP transfer job to complete .
135	Returns a TaskReschedule object for the given task instance .
136	Returns a scalar of the number of times this task has been used .
137	Run a command and return its output .
138	Remove an option from a section .
139	Returns the airflow section for the specified section .
140	Allocates the given partial_keys to this project .
141	Begin a new transaction .
142	Commit the given body to the project .
143	Lookup a set of keys .
144	Rollback a transaction .
145	Run a query on the project .
146	Get an operation by name .
147	Delete an operation by name .
148	Poll an operation until it is done .
149	Export this project to a storage bucket .
150	Import a file from a storage bucket .
151	Publish a message to a target .
152	Return the hostname of a callable .
153	Returns a LanguageServiceClient instance .
154	Analyze entities in a document .
155	Annotate a text document .
156	Classify a text document .
157	Returns a list of template fields for the given fullname .
158	Return a list of template fields for a given role .
159	Dispose of DB connection pool .
160	Prepares the path to the config file .
161	Check if the target_task_id is valid .
162	Return X - CACHECONF configuration variable .
163	Convert an alchemy object to a dictionary .
164	Yields items in chunks of size chunk_size .
165	Reduce an iterable in chunks .
166	Chains up and down tasks .
167	Print a table to python .
168	Render a log filename .
169	Get a connection to the dataproc server .
170	Wait for an operation to complete .
171	Convert a string or a dict to a string .
172	Handle a databricks operator execution .
173	Run a pigop command .
174	Fetch the state of a celery task .
175	Returns the number of tasks per send process .
176	Returns the number of tasks per fetch process .
177	Sets the default value of a variable .
178	Get a connection to the server .
179	Create a new job .
180	Get a single MLEngine job .
181	Waits for a job to complete .
182	Create a new version of a model .
183	Set the default version of a model .
184	List all versions of a model .
185	Delete a version of a model .
186	Create a new model .
187	Get a model by name .
188	Write a batch of items to the DynamoDB table .
189	Integrate the plugins .
190	Returns the default executor .
191	Returns the executor for the given executor name .
192	Called when a segment error occurs .
193	Get a connection to the database .
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	Returns a list of Airflow pools .
198	Create an Airflow pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the current state exit code and detail status for a resource group .
202	Returns a list of messages for a resource group .
203	Return a list of logs for a resource group .
204	Delete a container group .
205	Check if a container with the given name exists .
206	Decorator to apply defaults to a function .
207	Construct the ingest query .
208	Send a poke request to Redis .
209	Find a run in a dag .
210	Returns a list of TaskInstance objects .
211	Get a task instance .
212	Get the previous dagrun .
213	Get the previous scheduled dagrun .
214	Update the state of the task .
215	Verify the integrity of the task instance .
216	Make a request to the jenkins server and return the response body and headers .
217	Convert a context to airflow variables .
218	Conditionally trigger a DAG .
219	Send a metric to a datapoint .
220	Perform a query against the Metric API .
221	Get a dag by ID .
222	Kill a list of zombies .
223	Bag a DAG .
224	Collect all the dags in the dag_folder .
225	Generate a report of the dagbag stats .
226	Add a number of days to a datetime .
227	Convert a datetime object to a datetime object .
228	Peek for a directory with files matching the regex .
229	Returns a list of files in the specified directory .
230	Clears all task instances in a dag .
231	Returns the number to try if the state is running .
232	Generate an airflow command .
233	Return the current state of the task instance .
234	Record the task instance as FAILED .
235	Refresh a TaskInstance from the database .
236	Clear XCom data .
237	Returns the key for this task .
238	Returns True if the task s downstream tasks are done .
239	Returns the datetime of the next retry .
240	Returns True if the state is ready for a retry .
241	Returns True if pool is full False otherwise .
242	Get the dagrun for this run .
243	Push a value to the XCom .
244	Returns a pull function for the given task_ids and dag_id .
245	Initialize the run context .
246	Closes the file .
247	Get a connection to the compute server .
248	Start an instance of a resource .
249	Set the type of a machine in a zone .
250	Get an instance template .
251	Insert an instance template .
252	Get an instance group manager .
253	Patch an instance group manager .
254	Wait for a GCE operation to complete .
255	Check if a bucket exists .
256	Create a new bucket .
257	Check for a prefix in a bucket .
258	List common prefixes in a bucket .
259	List all keys in a bucket .
260	Check for a key in the S3 bucket .
261	Get a single key from S3 .
262	Read a key from the database .
263	Select an object from a bucket .
264	Check if a wildcard key exists .
265	Get a wildcard key .
266	Load a file into a bucket .
267	Load a string into a bucket .
268	Load a file - like object from the server .
269	Load a file - like object .
270	Copy an object from one S3 bucket to another .
271	Executes the Cassandra query .
272	Convert a user type to a dictionary .
273	Send an email to a user .
274	Get a SpeechClient .
275	Recognize a speech .
276	Executes the query .
277	Load airflow plugins from a list of entry points .
278	Check if a plugin is a valid Airflow plugin .
279	Skip a list of tasks .
280	Returns an adlsFileSystemClient for this store .
281	Check if a file exists in the cache .
282	Upload a file to ADLU .
283	Return a list of all files in a path .
284	Executes a single Athena query .
285	Uncompress a file .
286	Returns a cursor for querying mssql .
287	Decorator for action logging .
288	Build metrics for a given function and namespace .
289	Create a cgroup for a given path .
290	Delete a cgroup from the tree .
291	Parse a urlparse host .
292	Perform an API call to the databricks API .
293	Get a Salesforce connection .
294	Make a query and return the results .
295	Returns a description of an object .
296	Returns a list of all available fields for the given object .
297	Get an object from Salesforce .
298	Convert a column to a timestamp .
299	Writes the query results to a file .
300	Returns a MongoDB client .
301	Returns a MongoDB collection .
302	Replaces multiple documents in a collection .
303	Check if a mail attachment exists .
304	Retrieves a list of attachments for a given email .
305	Downloads the attachments for a given email .
306	Returns a list of attachments matching the given name .
307	Returns the filename and payload of the part .
308	Put a batch of records into the delivery stream .
309	Returns a generator of statuses for a task instance .
310	Send an email to a user .
311	Send an email using SMTP .
312	Process a result value .
313	Check if a blob exists .
314	Check for a prefix in a container .
315	Load a blob from a string .
316	Read a file from a container .
317	Delete a file from a container .
318	Run MLSD on the given path .
319	Get the FTP connection .
320	Return a list of files in a directory .
321	Retrieve a file from FTP .
322	Store a file at remote_full_path in local_full_path .
323	Get the MOD time for a given path .
324	Execute the webhook .
325	Returns a FileService object for the given connection .
326	Check if a directory exists .
327	Check if a file exists in the specified directory .
328	Fetches a list of directories and files for a given share .
329	Create a directory .
330	Load a file from a file path .
331	Load a string from a file .
332	Load a file from a stream .
333	Gets the current connection to the server .
334	Copy an object from one bucket to another .
335	Download an object from a bucket .
336	Upload an object to a bucket .
337	Check if a blob exists in a bucket .
338	Check if a blob is updated after a given time .
339	Delete a blob .
340	List blobs in a bucket .
341	Get the size of an object in a bucket .
342	Get the CRC32C checksum of an object in a bucket .
343	Get the MD5 hash of an object in a bucket .
344	Create a new bucket .
345	Compose source_objects to destination_object .
346	Check if the secondary training status has changed .
347	Returns a message indicating the status of the secondary training .
348	Load a tar file and upload it to S3
349	Configure S3 resources .
350	Check if the given S3 URL exists .
351	Get the logs client .
352	Create a training job .
353	Create a hyperparameter tuning job .
354	Create a transform job .
355	Create an endpoint .
356	Describe a training job with a log .
357	Check the status of a SageMaker job .
358	Check the status of a training job with a log .
359	Execute the dataflow .
360	Run migrations offline .
361	Run migrations online .
362	Delete an instance .
363	Creates a new Instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the JDBC cli command .
368	Prepare a hiveconf dict .
369	Load data from a pandas DataFrame .
370	Load a table from a file .
371	Returns a Metastore client .
372	Check for a named partition .
373	Check if a table exists in the database .
374	Get the connection to the hive server .
375	Get the results of a query .
376	Write the results to a csv file .
377	Returns a list of records from the given hive .
378	Return pandas DataFrame .
379	Returns a ProductSearchClient .
380	Get the dingding endpoint .
381	Send a dingding message .
382	Bind parameters to the operation .
383	Escape a string .
384	Cast string_field to bq_type .
385	Validate that the value is of the expected type .
386	Returns a BigQueryConnection object .
387	Returns the BigQuery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancel one or more BigQuery jobs .
392	Delete a table .
393	Update a table in a dataset .
394	Run grant dataset view access .
395	Get a dataset .
396	Returns a list of datasets .
397	Inserts all rows into a table .
398	Execute a SQL query .
399	Executes an operation on a sequence of parameters .
400	Returns the next query result .
401	Returns a PostgreSQL cursor .
402	Create intermediate directories for a given remote directory .
403	Create a new queue .
404	Send a message to a queue .
405	Run a command in a subprocess .
406	Called when the process is finished .
407	Main entry point for nvd3 . py
408	Builds the HTML header .
409	Builds the container header .
410	Builds the jschart tooltip .
411	Create a new x axis .
412	Create a y axis .
413	Returns a sqlite3 connection object .
414	Decorator for logging actions .
415	Decorator for gzipped view functions .
416	Get the last dagrun for a dag_id .
417	Create a dagrun .
418	Executes the SQSHook and returns the result .
419	Returns a JSON response for the given object .
420	Open a possibly - zipped file .
421	Make a cache key .
422	Get the VideoIntelligenceServiceClient .
423	Annotate a video .
424	Get the Airflow API key .
425	Get a connection to opsgenie .
426	Executes the request and returns the result .
427	Build the opsgenie payload .
428	Execute the Opsgenie alert hook .
429	Get the Athena client .
430	Runs a query and returns the query execution ID .
431	Checks the status of a query execution .
432	Polls the query execution status .
433	Return a pysftp connection object .
434	Handle a rate limit exception .
435	Make a call to the Zendesk server .
436	Get a list of partitions for a table .
437	Get a table by name .
438	Returns the location of a storage table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Get a list of snapshots for a cluster .
442	Restore a cluster from a snapshot .
443	Creates a new cluster snapshot .
444	Execute the Slack API call .
445	Create a new job flow .
446	Filter for files with size > = size .
447	Filter a result for ignored extensions .
448	Executes the query .
449	Get a pool by name .
450	Create an Airflow pool .
451	Delete a pool .
452	Convert a Python dictionary to a proto object .
453	Wait for an operation to complete .
454	Get an operation by name .
455	Append a label to the cluster proto .
456	Create a new cluster .
457	Get a cluster by name .
458	Get a webhook endpoint from a Discord connection .
459	Build the discord payload .
460	Execute the webhook .
461	Encrypts the given plaintext using the given key .
462	Import a table .
463	Import a query to a directory .
464	Export a table to an export directory .
465	Returns a TextToSpeechClient .
466	Synthesize input_data voice and audio_config .
467	Closes the connection to the server .
468	Returns a list of init containers .
469	Return a dict of environment variables .
470	Returns a list of kubernetes secrets .
471	Get the security context .
472	Returns a list of links to the Qbole API for the given operator and execution date .
473	Get the heartbeat of the job .
474	Launch an airflow process .
475	Start the DagFileProcessor
476	Returns True if the task is done .
477	Exit gracefully upon receiving a signal .
478	Updates the dagbag with import errors .
479	Process a list of task instances in a DAG .
480	Change the state of a task instance without dagrun .
481	Returns a dictionary mapping task ids to their concurrency maps .
482	Change state of executable task instances .
483	Enqueue task instances with queued state .
484	Executes a list of tasks in the given states .
485	Change the state of tasks that failed to execute .
486	Processes executor events .
487	Processes a DAG file .
488	Update all counters in a task .
489	Manages the state of the executor .
490	Returns a DagRun object for the given run date .
491	Returns the list of TaskInstances to run for the given dag_run .
492	Execute the task instances for the given run_dates .
493	Set unfinished dag_runs to FAILED .
494	Execute the backfill job .
495	Send a heartbeat to the task runner .
496	Get a client for a project .
497	Get a single instance .
498	Apply a function to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get a database .
503	Creates a new Airflow database .
504	Update a database .
505	Deletes a database from an instance .
506	Returns a boolean indicating if there is an attachment for this mail .
507	Prepares the additional_properties dictionary .
508	Get a connection to the cluster .
509	Check if a table exists in the cluster .
510	Check if a record exists in the given table .
511	Builds a command to poll the driver s status .
512	Submit a Spark application .
513	Process spark submit log .
514	Process the spark driver status log .
515	Returns the task runner for the given local task job .
516	Wait for the task to finish .
517	Returns a cursor for querying mysql .
518	Constructs a csv file with the given schema .
519	Write the local schema file .
520	Returns a dictionary describing the type of a column .
521	Returns a dictionary mapping a MySQL type to a SQL type .
522	Execute the Sqoop hook .
523	Apply a function to the Lineage .
524	Parse the extra dejson for this connection .
525	Return a list of dates within a given time range .
526	Scale a time array according to a given unit .
527	Returns a timedelta of n days .
528	Initialize a role in the database .
529	Delete a role .
530	Returns the user s roles .
531	Returns a set of all permissions views .
532	Check if a user has a role .
533	Check if a view has a permission .
534	Delete faulty permissions .
535	Merge a permission with a view menu .
536	Update the admin permission view .
537	Synchronize view permissions .
538	Create a new permission vm for all DAGs .
539	Returns a Fernet instance .
540	Poke for a partition in the database .
541	Get the aws_glue catalog hook .
542	Send a message to the SQSSensor .
543	Get the HDFS connection .
544	Get a webhdfs connection .
545	Check for a HDFS path .
546	r Upload a file from source to destination .
547	Get the connection to the pinot broker .
548	Returns the URI for this connection .
549	Convert a date to a dictionary .
550	Convert a time to a dictionary .
551	Get a Redis connection .
552	Get a pandas DataFrame from the database .
553	Execute a SQL query .
554	Sets the autocommit of a connection .
555	Insert rows into a table .
556	Serialize a cell to a string .
557	Check the health of the scheduler .
558	Returns a list of links for a task .
559	Gets the connection to the cloudant server .
560	Execute the webhook .
561	Get the credentials for the hook .
562	Returns an AuthorizedHttp object .
563	Decorator to catch HTTP exceptions .
564	Decorator to fallback to default project_id .
565	Return a list of unfinished tasks .
566	Prepare a Spark - SQL command .
567	Convert a PIL Image or ndarray to a Tensor .
568	Normalize the mean and standard deviation of a tensor .
569	r Resize an image .
570	r Pad an image with padding .
571	Crop an image .
572	Crop an image to a given size .
573	Flip an image to the right .
574	Transform an image to a perspective image .
575	Flip a PIL Image to the left .
576	Crop an image to a given size .
577	Adjust the brightness of an image .
578	Adjusts the contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue of a PIL Image .
581	r Adjusts the gamma of an image .
582	Rotate a PIL Image .
583	Compute the inverse affine matrix of an image .
584	Convert an image to grayscale .
585	Saves a tensor to a file .
586	Find all classes in a directory .
587	Read an image file .
588	Read the labels from an info . txt file
589	Read matches file from data_dir .
590	Compute the accuracy of the output .
591	Setup for distribution .
592	Download a URL to a directory .
593	Return a list of all directories in the given root directory .
594	Return a list of files in a directory .
595	Download a file from Google Drive .
596	Returns a random set of params for the given image .
597	Returns a list of random params for the given width height and distortion scale .
598	Generate random params for a given image .
599	Returns a list of params to apply to an image .
600	Returns a random set of params .
601	Downloads the dataset to the local filesystem .
602	Download the training set .
603	Download a zip archive .
604	Returns the current theme name .
605	Returns a 400 completer if autocomplete is enabled .
606	Returns a dict of preferences .
607	Returns a list of all themes in templates_path .
608	Returns a list of dictionaries for a searx query .
609	Returns a string representation of the response .
610	Returns a tf . custom_gradient .
611	Returns a tfd . Independent .
612	Compute the joint log probability of eight schools .
613	Benchmark 8 - school HMC model .
614	Expand the docstring of a function .
615	Return a simple name for a distribution .
616	Build a custom RandomVariable .
617	Convert a distribution into a random variable .
618	Make a RandomVariable from a distribution .
619	Performs a one - step prediction on the observed time series .
620	Forecast a model based on an observed time series .
621	Returns a mask that masks non - finite values .
622	Assert that x is finite .
623	Assert that x is ranked at the most .
624	Calculate the size of an event .
625	Evaluate all one hot tensors .
626	Returns the function that converts an identifier to a tensor .
627	Returns a tf . params_size for a given number of components .
628	Get the next interceptor .
629	Decorator to make a function interceptable .
630	Create a function that intercepts a tape .
631	Given num_examples and num_examples of num_examples construct a toy logistic data .
632	Plots the weights of a decision .
633	Build the input pipeline .
634	Raises a ValueError if the arguments are invalid .
635	Returns a tuple of the state and the full trace of the function .
636	Call a function with the given arguments .
637	Call a function and return a tuple with extra and gradients .
638	Convert from_structure to to_structure if possible .
639	Transform a log probability function into a bijector .
640	Performs a leapfrog step .
641	Returns a tuple of current and proposed tensors .
642	Computes the Hamiltonian Monte Carlo state .
643	Returns a tf . nest corresponding to the adaptation of the given control to the given set point .
644	Deserialize a tfp layer from a config file .
645	Convert x to a tensor .
646	Create a scale operator .
647	Create a random walk normal function .
648	Create a random walk uniform function .
649	Expand x to event rank .
650	r Calculate the lower bound of the entropy .
651	Categorical probabilities .
652	Validate arguments .
653	Ensure that TensorFlow is installed by default .
654	Logistic regression with Bernoulli labels .
655	Returns a tf . tf . Feature and a tf . tf . label
656	Calculate the Cholesky covariance .
657	Compute the standard deviation of x over the sample_axis .
658	Returns the covariance of x along a given axis .
659	Returns a tf . Tensor for a positive axis .
660	Squeeze a tensor along an axis .
661	Return the z - axis of x .
662	Inverse of _inv_z .
663	Semilocal linear trend transition matrix .
664	Semilocal linear trend transition noise .
665	r Sample a halton sequence .
666	Generate num_results permutations .
667	Returns a list of tf . indices .
668	Calculate the base expansion size .
669	Returns the primes that are smaller than n .
670	Convert dtype to eps .
671	Calculate the hager - zhang function .
672	Fixes the step size of val_c_input .
673	Returns a hzl . bracket and line search .
674	Perform a line search after bracketing .
675	Performs a line search on the inner boundary of a line .
676	Prepare the arguments to be passed to the _prepare_args function .
677	Print a tf . compat . v1 .
678	Softmaxnormal Gauss - Hermite quadrature scheme .
679	Creates a quadrature scheme with softmax normal quantiles .
680	Check if a parameter is a quadrature parameter .
681	Given a grid and an endpoint_affine determine the batch event shapes .
682	Interpolate a location on a quadrature grid .
683	Interpolate a quadrature grid to the given scale .
684	Scale a LinearOperatorIdentity .
685	Concatenate a list of vectors .
686	Compute the log - vector matrix .
687	Returns a log matrix vector .
688	Compute the vector matrix of a tensor .
689	Extract log probabilities from a distribution .
690	Returns a tf . log_vector_matrix with marginal hidden probabilities .
691	Returns the posterior marginals for the given observations .
692	Returns the posterior mode for the given observations .
693	Choose a random direction .
694	Sample the next component of a target log probability .
695	Call a function with a list of arguments .
696	Return a padded version of x .
697	Executes one step of the slice .
698	Builds a training posterior for a parameter .
699	Builds a model with a factored variational loss .
700	Minimize a build loss in a graph .
701	Calculate the moments of a masked time series .
702	Compute the initial value of a masked time series .
703	Returns a tf . broadcast_batch_shape .
704	Factored Joint MultivariateNormalOperator .
705	Returns the sum of all MultivariateNormalDiags .
706	Compute the empirical statistics of a time series .
707	Expands the trailing dimension of the observed time series .
708	Canonicalizes an observed time series with mask .
709	Returns a tfd . MixtureSameFamily based on the mean and variances .
710	Returns a range of values .
711	Returns a function that computes a summary statistic for the given attribute .
712	Unify the call signature of a function .
713	Resolve dist_names to leaf_name .
714	Returns a tuple of the required arguments for a function .
715	Compute the KL divergence between two distributions .
716	Build a list - like model .
717	Returns a tuple of distribution names and leaf names .
718	Compute the entropy of this distribution .
719	Decorator to check if an argument is in the support of a distribution .
720	Generate a summary image of a sequence .
721	Visualize a reconstruction .
722	Visualize qualitative analysis .
723	Generate a histogram of the distribution parameters .
724	Summarize mean in nats and bits .
725	Call tfd . MultivariateNormalDiag .
726	Returns the zero state of the tensor .
727	Returns a MultivariateNormalDia .
728	Convert a list of inputs into a tf . Conv object .
729	Generate a likelihood .
730	Reconstruct a model from a list of inputs .
731	Sample a batch of samples at a time .
732	Sample dynamic prior .
733	Returns a tf . TensorShape of the batch parameters .
734	Returns the tensor of the batch_shape_tensor .
735	Create a state - space model .
736	Generate a prior sample of the model .
737	Compute the minimum ndims for a list of bijectors .
738	Convert vector size to square matrix size .
739	Sort values along a given axis .
740	Sort values along a given axis .
741	Convert a numpy array to a tensor .
742	Compute the NDTR of x .
743	Convert a tensor to a numpy array .
744	Log a value as an NDTR tensor .
745	Log - ndtr asymptotic series .
746	Convert x to a tensor with erfinv .
747	Computes the log of a tensor in Laplace .
748	Computes the joint log probability of text messages .
749	Benchmark text messages using HMC .
750	Returns True if the index_points are a multivariate Gaussian .
751	Returns the marginal distribution .
752	Returns the index_points of this GaussianProcess instance .
753	Create an iaf stack .
754	Sets the current state to one step .
755	Returns the bootstrap results for a given state .
756	Returns the outer squared difference between x and y .
757	Return a value and a batch of Jacobian gradients .
758	Prevents the 2nd derivative from being implemented .
759	Performs a distributional transform on x .
760	Split the covariance into marginals .
761	Decompose a model from posterior marginals .
762	Decompose the observed time series into a state space model .
763	Decompose a forecast by a given component .
764	Convert dense_to_sparse to sparse .
765	Decorate a function to be an operator .
766	Convert a numpy tensor to text .
767	Returns the sample shape of the tensor .
768	Returns a sample shape tensor .
769	Returns the value of the distribution .
770	Evaluate the value .
771	Returns the numpy representation of the Tensor .
772	Determines if a prior corresponds to a known scale posterior .
773	Creates a function that uses the real_nvp_default_template
774	Return a uniform unit norm .
775	Compute the log - normal probability of x .
776	Compute the log normalization .
777	Return the common dtype for a list of arguments .
778	Returns a function that creates a summary statistic for the given attribute .
779	Broadcast a set of tensors to a set of target tensors .
780	Calculate the PDF at the peak .
781	Calculate the effective sample size for a list of states .
782	Calculate the effective sample size for a single state .
783	Computes the potential scale reduction for a single state .
784	Return the size of the axis of x .
785	Broadcast a list - like argument .
786	Quadrature Scheme Lognormal Gauss hermite .
787	Compute the lognormal quantiles of a quadrature scheme .
788	Merge a set of elements into a single object .
789	Remove a field from the map .
790	Merge two values .
791	Return a deep tuple .
792	Calculate the left doubling increments .
793	Find the indices of the best intervals in x .
794	Slice the bounds of x_initial by doubling .
795	Sample with shrinkage .
796	Slice a tensor by one dimension .
797	Create a function that can be used to set the value of a model .
798	Creates a function that logs a model s probabilities .
799	Given a function and a list of kwargs return a list of kwargs .
800	Convolutional Gaussian convolution block .
801	Build a tree from values and gradients .
802	Decorator to check if a value and gradients are None .
803	Returns True if there is no u - turn between two states .
804	Wrapper for _leapfrog .
805	Computes the log probability of the current target and the current momentum .
806	Generate a random bernoulli tensor .
807	Creates a function that adds a loc scale to the model .
808	Returns the default mean field normal function .
809	Returns a default multivariate normal function .
810	Deserialize a function from a serialized Keras object .
811	Serialize a Lambda function .
812	Broadcast from_structure to to_structure .
813	Convert a nested struct to a tensor .
814	Convert a list of arguments to a tensor .
815	Call a function with the given arguments .
816	Returns a dictionary of tensor - like attributes .
817	Returns a tfd . MultivariateNormalDiag for a mixture prior .
818	Pack a list of images .
819	Download a file to a directory .
820	Builds a set of fake input functions .
821	Validate that block_sizes is a vector of the same length as bijectors .
822	Check if flat_xs is not broadcasted .
823	Multivariate normal triangulation .
824	Bernoulli tensor .
825	Normalize a tensor .
826	Poisson tensor .
827	Generate a mala_euler_method from a list of parts .
828	Returns the drift for the given step size and volatility .
829	r Compute log acceptance correction .
830	Calls the volatility function with the given results and gradients .
831	Given a list of volatility parts and a list of state parts return a list of volatility parts that might be broadcasted .
832	Construct a transition matrix from a list of tensors .
833	Sample the shape of x .
834	Call reshape_input_output .
835	Calls a function and reshapes the output .
836	Returns bdtr function .
837	Returns a flat sample of the distributions .
838	Calculate the latent Dirichlet allocation .
839	Make a lda variantal .
840	Returns a list of string representations of topics .
841	Download a dataset of newsgroups .
842	Builds a set of fake input functions .
843	Build input_fns for training .
844	Minimize a hessian loss function .
845	Add ema_control_dependencies to vector_quantizer .
846	Saves an image to a file .
847	Visualize training data .
848	Load the bernoulli - mnist dataset .
849	Return dtype as numpy dtype .
850	Return the base dtype of the given dtype .
851	Return True if dtype is a boolean .
852	Check if a dtype is complex .
853	Return the maximum value of a dtype .
854	Return the name of the given dtype .
855	Return the size of a tf dtype .
856	r Assert that all items have the same base type .
857	Assert that all tensors have the same dtype .
858	Minimize an objective function .
859	Performs the Nelder - Mead - One - Step method .
860	Returns a function that accepts reflected values .
861	Returns a function that expands an objective function .
862	Returns a function that returns False if objective_values is outside of the constraints .
863	Returns True if the shrinkage is greater than or equal to best .
864	Replace x at index with replacement .
865	Check the convergence of two simplexes .
866	Prepares the arguments for the objective function .
867	Prepares the arguments with the initial_simplex and the batch_evaluate_objective .
868	Prepare a tf . args with an initial vertex .
869	Returns a tf . map_fn with the objective_function and the n_points .
870	Plot weight posteriors .
871	Plot heldout prediction .
872	Build fake MNIST data .
873	Get Keras configuration .
874	Initialize a tf . v2 instance from a tf . config file .
875	Multiplies two numpy arrays .
876	Helper function for _std_var
877	Assigns a moving log mean expression to a variable .
878	Make a column of x .
879	Generate a random rademacher distribution .
880	Generate a random Rayleigh distribution .
881	Pick a scalar condition .
882	Finishes the log probability for a single fiber .
883	Finishes the probability for a single fiber .
884	Rotate the dimensions of x if necessary .
885	r Undo a batch normalization .
886	Validate BatchNormalization layer .
887	Slice a single parameter into slices .
888	Convert params_event_ndims to slices .
889	Apply a single step to a distribution .
890	Apply slice overrides to dist .
891	Generate a batch of slices .
892	Fit a model to a response .
893	Convergence criteria for small relative norm weights change .
894	Prepares the arguments for a tensorflow .
895	Return the number of columns in x .
896	Decorate a function to prefer static arguments .
897	Copies docstring from original_fn to new_fn .
898	Get the value of a static predicate .
899	Returns the rank of a shape tensor .
900	Returns a case for the given pred_fn pairs .
901	Generate a name scope .
902	Calculate the standard deviation of a mixture weight vector .
903	Make a triangular scale .
904	Make a scale for a diagonal part .
905	Returns a list of tensor shapes from a location and a scale .
906	Checks if the given scale is a diagonal scale .
907	Check if a scalar distribution is correctly reparameterized .
908	Pad mixture_distribution categorical_distribution with event_ndims .
909	Pick a scalar condition .
910	Move dimension x from source_idx to dest_idx
911	Wrapper for embed_check_nonnegative_integer_form .
912	Return True if two tensors have the same shape .
913	Try to get a static value from x if it doesn t exist .
914	Returns True if dt is known unsigned by dtype .
915	Returns True if dt is known and signed by dtype .
916	Return the largest integer by dtype .
917	Returns the smallest integer by dtype .
918	Checks if a datetime is integer - like by its dtype .
919	Embed a categorical parameter into a tensor .
920	Compute the total number of log combinations .
921	Rotate a tensor by a given shift .
922	Pick a tensor from a cond .
923	Returns a tf . TensorShape that prefers a static broadcast shape .
924	Generate a new seed .
925	Return a tf . tridiagonal function .
926	Return the size of x along an axis .
927	Process quadrature grid and probabilities .
928	Returns the arguments for the parent frame .
929	Expand a tensor to a vector .
930	Return a tf . Tensor with the given dependencies .
931	Validate rightmost_transposed_ndims .
932	Validate a permission .
933	Convert a shape to a TensorShape .
934	Concatenate two tensors .
935	Returns the dimensions of x .
936	Merge x with other .
937	Returns a TensorShape with x with rank at least rank .
938	Checks if a tf . TensorShape is equal to a given shape .
939	Given a partial_batch_dist and a full_sample_and_batch_shape return a tensorshape .
940	Builds a backward pass step .
941	Performs a backward smoothing update .
942	Builds a Kalman filter step .
943	Linear Gaussian update .
944	Calculate the Kalman transition .
945	Builds a Kalman mean step .
946	Builds a Kalman covariance step .
947	Build a Kalman sample step .
948	Propagate the mean to a new axis .
949	Propagate a covariance matrix .
950	Performs a backward smoothing pass .
951	Sample n samples from the joint state space model .
952	Returns the posterior marginals of x .
953	Compute the joint mean .
954	Compute joint covariances .
955	Convert latents to observations .
956	Log normalization of the event .
957	Return the mode of the concentration .
958	Rotate a set of samples .
959	Sample from a 3D model .
960	Return a copy of a function .
961	Remove keys with value from a dict .
962	Recursively replaces a dict with a PrettyDict .
963	Returns a tf . sample for a given distribution .
964	Returns True if x is a namedtuple .
965	Chooses the base case for the given is_accepted and is_rejected .
966	Returns a tuple of is_accepted and rejected .
967	Safely reduce the sum of a tensor .
968	Convert a function to a value and gradients tensor .
969	Calls a function with a list of arguments and returns the result .
970	Returns a tf . smart_for_loop .
971	Run a trace scan on elems .
972	Return a decorator that sets the innermost result of the given setter .
973	Decorator to make a getter for the innermost kernel results .
974	Enables the kernel to store parameters in the results .
975	Replace event shape in shape tensor .
976	Replace event shape in tensorshape with event shape out .
977	Check if shape is valid .
978	Returns True if any of the input tensors converged .
979	Returns a dict of initial state arguments .
980	Perform a line search step .
981	Return a function that restricts values along a direction .
982	Updates the position of the next objective .
983	Check if the gradient and f_relative_tolerance are converged .
984	Broadcast value to a target tensor .
985	Return the harmonic number of x .
986	Returns a tf . reshape of the default exchange proposed function .
987	Extract a field from the kernel results .
988	Returns a tf . stack of the exchanged states .
989	Returns the variance scale term .
990	Returns the forward log detector function for a Jacobian bijector .
991	Returns a function that transforms the given bijector forward .
992	Returns a function that transforms a bijector into a list - like object .
993	Performs a one - step transformation of the current state .
994	Convert a tuple or tuple to a tuple or tuple .
995	Compute the 2 - dimensional secant of a given value .
996	Convenience function to update a value and gradients function .
997	Update the value - and - gradients function .
998	Update a value and gradients function .
999	Return a bracketed version of a value and gradients function .
1000	Bisect a value between initial_left and initial_right .
1001	Returns a bisection of the input tensor .
1002	Returns True if val_1 is finite False otherwise .
1003	Returns True if val_0 satisfies Wolfe equation .
1004	Compute the secant of two vectors .
1005	Creates a policy for a simple step size update .
1006	Implementation of stepfrog_integrator_one_step .
1007	Compute the log acceptance correction .
1008	Performs one step of the kernel .
1009	Returns a bootstrapped version of the results .
1010	Bayesian resnet .
1011	Resnet block .
1012	Create an encoder for the given activation .
1013	Make a decoder for num_topics and num_words .
1014	Create a prior with num_topics and initial_value .
1015	Sample a Markov chain .
1016	Deep Exponential Family .
1017	Trainable positive deterministic model .
1018	Trainable gamma model .
1019	Load NIPS 2011 papers .
1020	Initialize amplitude and length_scale parameters .
1021	Returns a tf_inspect . _DIVERGENCES . _DIVERGENCES . _DIVERGENCES .
1022	Read an image from a file .
1023	Download sprites from DATA_SPRITES_URL .
1024	Create a character .
1025	Create a sequence of frames .
1026	Generate a random sequence .
1027	Create a dataset of sprites .
1028	Validate a list of distributions .
1029	Flatten a list of kernels into a list of summands .
1030	Flatten a list of multiplication kernels .
1031	Build fake data .
1032	Count integers along an axis .
1033	Find the bins of a tensor .
1034	Generate a histogram .
1035	Compute the quantiles of a tensor .
1036	Get the ndims of a tensor .
1037	Insert back keep dimensions .
1038	Make a list of non - negative values for a given axis .
1039	Moves dimensions to a flat end .
1040	Sort a tensor according to its shape .
1041	Make a set of state - space models for each component .
1042	Computes the amari - alpha of a tensor .
1043	Compute the KL - reverse of a log - likelihood .
1044	Compute the Jensen - Shannon tensor .
1045	Calculate the Pearson tensor .
1046	Squared Hellinger tensor .
1047	Returns a triangular tensor .
1048	Compute the power of a tensor .
1049	Compute the abs of a log1p tensor .
1050	Calculate the jeffreys tensor .
1051	Calculate the modified gan function .
1052	Returns the dual CSIZAR function for a given logu .
1053	Compute the symmetrized csiszar function .
1054	Compute the Monte Carlo - Ciszar divergence .
1055	Helper function for csiszar_vimco_helper .
1056	Assert that x has ndims .
1057	Batch - gather a set of parameters along an axis .
1058	Broadcast a CatEvent with the given parameters .
1059	r Computes the logspace mean of the expectation importance sampler .
1060	Broadcast event and samples .
1061	Minimize a value and gradients function .
1062	Computes the control inputs for the initial hessian .
1063	Update the inverse hessian of the input tensor .
1064	Computes the cross - term of the bfgs with respect to the hessian estimate .
1065	Multiplies mat and vector to the right .
1066	Computes the tensor product between two tensors .
1067	Perform a batch transpose of a matrix .
1068	Pad a tensor to the right with ones .
1069	Sum rightmost ndims preserving shape .
1070	Compute the square root of x with infinite gradients .
1071	Return the common dtype for a list of arguments .
1072	Minimize a tensor .
1073	Returns the initial state of the value and gradients function .
1074	Returns the search direction of the state .
1075	Create an empty queue for a given element .
1076	Push new_vecs to new_queue .
1077	Cast a tensor to a pseudo - discrete matrix .
1078	Returns True if x is larger than det_bounds .
1079	Return a uniform correlation - like matrix .
1080	Calculate the volume of rejection samples for a correlation matrix .
1081	Computes the Clopper - Pearson confidence interval .
1082	Compute the volume of the true rejection matrices .
1083	Derivative of Von Mises s cdf_series .
1084	Derivative of Von Mises s cdf normal function .
1085	Perform a one - step objective function on a population .
1086	Minimize a population using an objective function .
1087	Returns the initial arguments for the objective function .
1088	Find the best value in a population .
1089	Check if the population has converged .
1090	Returns the starting population .
1091	Perform a binary crossover of a population .
1092	Return a list of mutations in a population .
1093	Returns a tf . tensor that returns a random distribution of a given size .
1094	Ensures that a tensor is a list .
1095	Convert a tensor to a non - negative tensor .
1096	Calculate a soft threshold .
1097	clip_by_value_preserve_gradient is a wrapper around tf . compat . v1
1098	Builds a pipeline of training images .
1099	Plots generated images .
1100	Convert a list of productions to a string .
1101	Calls the lstm .
1102	Create a MultivariateNormalDiag from inputs .
1103	Compute the integral of x .
1104	Compute the integral of x .
1105	Return the rank of a matrix .
1106	Convert a tensor to a numpy array .
1107	Solve LU tensors .
1108	Returns a lu_matrix_inverse .
1109	Returns a list of assertions for a given lower_upper .
1110	Helper function for _lu_reconstruct_assertions .
1111	Returns a tf . SparseTensor for a sparse block diagram .
1112	Validate a matrix .
1113	Gradient of non - zero log likelihood .
1114	r Fit a model to a sparse graph .
1115	Generate n_in n_out slices from num_blocks .
1116	Generate a mask from num_blocks .
1117	Creates a masked dense graph .
1118	Creates an input order based on input_size .
1119	Creates a list of degrees for a given input size .
1120	Create masks for a set of degrees .
1121	Create a masked Keras initializer .
1122	Builds the event based on the input shape .
1123	Convert x to a tensor .
1124	Draw a sample of a multinomial .
1125	Return a tfd . MultivariateNormalDiag with zero dimension covariance .
1126	Return an observation function for a time series .
1127	Convert parameters to weights .
1128	Return the depth of an annotated graph .
1129	Return the best order of a graph .
1130	Return a function that flattens a chain rule .
1131	Build a chain rule from a model .
1132	Variational loss .
1133	Returns the optimal variational posterior .
1134	Builds the is_last_day_of_season tensor .
1135	Build the effects - to - residuals matrix .
1136	Builds a transition matrix with seasonal permutations .
1137	Build a multivariate normalized seasonal transition noise .
1138	Constrained seasonal transition noise .
1139	Checks if the observation data is empty .
1140	Validate observation data .
1141	Add a new scheduler .
1142	Set the checkpoint at checkpoint_trigger .
1143	Sets the gradient clip constant value .
1144	Returns the optimal layer of the model .
1145	Sets the training summary .
1146	Sets the value summary .
1147	Create a new DistriOptimizer .
1148	Set training data .
1149	Sets the summary trigger .
1150	Read data_sets from a training directory .
1151	Download and return a list of news 20 files .
1152	Download and parse Glove W2V file .
1153	Compile the BigDl .
1154	Runs the BigDlFunc on the given data .
1155	Evaluate this BigDlFunc .
1156	Predict the value of x .
1157	Get a MNIST record from a dataset .
1158	Preprocess MNIST data .
1159	Returns the maximum epoch or iteration of the end trigger .
1160	Validate the optimizer .
1161	Returns the value of the object at the specified path .
1162	Call a bigdl function .
1163	Call a Java function with the given arguments .
1164	Convert an RDD to a Java object .
1165	Convert a Python object to Java .
1166	Get an activation by name .
1167	Create a DataFrame from a ndarray .
1168	Returns the label of the feature .
1169	Returns a DistributedImageFrame from a parquet file .
1170	Write a parquet to a file .
1171	Returns a float representation of the image .
1172	Returns a ndarray representation of the image .
1173	Returns the label of the distributed image frame .
1174	Returns the predicted image for the given key .
1175	Predict the value of x .
1176	Fit a model to a dataset .
1177	Transform a dataset into a bigdl image .
1178	Save a Keras definition to a JSON file .
1179	Build a keras model .
1180	Returns the predicted class for the given data_rdd .
1181	Sets the weights of this BigDl .
1182	Returns the weights of the layer .
1183	Save the tensorflow to a file .
1184	Returns an instance of the training function .
1185	Load a tornado layer from a file path .
1186	Load Keras from a JSON or HDF5 file .
1187	Returns a criterion for the given jcriterion .
1188	Loads weights from a JSON file .
1189	Loads a keras . preprocessing . imdb file .
1190	Build a Keras model .
1191	Returns the shape of the input .
1192	Returns the shape of the output .
1193	Get the MNIST for a given dataset .
1194	Read data sets from data_dir .
1195	Returns the path to the bigdl class .
1196	Check if pyspark is older than 2 . 2 .
1197	Export a checkpoint to a tf . train . CheckpointReader .
1198	Save a list of tensors to a bigdl file .
1199	Expand a tile along an axis .
1200	Precompute future symbols for a given trie .
1201	Simple attention .
1202	Attention .
1203	Computes the bleu of two corpus .
1204	Get the log file for the agent .
1205	Log an utterance to the log file .
1206	Returns a list of tf . trainable_variables with updated gradients .
1207	Dump weights to tf_save_dir .
1208	Read dataset by config .
1209	Create a training and evaluation model from a config file .
1210	Interact with Alice .
1211	Convert a list of labels to a one - hot list .
1212	Convert a proba to a one - hot array .
1213	Create a tf . ConfigProto session .
1214	Load a model from a file .
1215	Returns the momentum variable of the optimizer .
1216	Updates the graph variables .
1217	Rounds the f1 macro .
1218	Process a word into a tuple .
1219	Stacks n_hidden_layers on top of each other .
1220	Bi - RNN .
1221	Stacked bi - directional RNN .
1222	Creates a stacked highway layer .
1223	Create an embedding layer .
1224	Create a cudnn GRU .
1225	Computes a gru based on cudnn_gru .
1226	Create a cudnn_lstm .
1227	Create a cudnn - compatible LSTM .
1228	Wrapper for cudnn_bi_gru .
1229	Wrapper for cudnn_bi_lstm .
1230	Generate stacked bi - gru for cudnn .
1231	Variational dropout .
1232	Builds the word vectors .
1233	Build word cnn .
1234	Builds a basic LSTM network .
1235	Train the model on a batch of data .
1236	Performs a prediction on a batch of data .
1237	Make a vector from a list of words .
1238	Convert a list of tags into a vector .
1239	Calculate the brevity and brevity of a sentence .
1240	Verify that the given URL is a valid SC URL .
1241	Extract certificates from a certificate txt .
1242	Verify a list of certs in a chain .
1243	Verify a signature .
1244	Verify an Amazon certificate .
1245	Returns a list of control . json objects .
1246	Returns a list of all ms_bot_framework controls .
1247	Returns a list of all telegrams .
1248	Returns a list of all alexa controls .
1249	Main entry point for DeepPavlov .
1250	Wrap a function with a graph .
1251	Decorate a function with keras . backend .
1252	Returns the accuracy of y_true against y_predicted .
1253	Round the accuracy of y_true to y_predicted .
1254	Create a pre - trained initializer .
1255	Read data from a file .
1256	Create a Hello bot agent .
1257	Convert x to a one - hot unit .
1258	Convert a list of metrics into an OrderedDict .
1259	Populate the default settings directory .
1260	Loads a TensorFlow model .
1261	Save this TensorFlow model to a file .
1262	Returns a tf . train_op .
1263	Search for a word in the dictionary d .
1264	Returns a dict of the current operation costs .
1265	Start the timer .
1266	Handle a request .
1267	Reacts to the given utterance .
1268	Generates a response from a response dict .
1269	Handle a request intent .
1270	Handle a launch request
1271	Handle unsupported messages .
1272	Return a pretty representation of p .
1273	Convert elmo loss to ppl .
1274	Build a chainer from a config file .
1275	Interact with a model .
1276	Predict on a stream .
1277	Read a file into a list of strings .
1278	Construct a function from a string .
1279	Register a function as a metric .
1280	Get a metric by name .
1281	Construct a DecayType from a string .
1282	Given a list of values and a list of losses return the best value .
1283	Encode a list of tokens .
1284	Read the requirements . txt file .
1285	Calculate the log loss of a stochastic model .
1286	Export weight_file to hub_dir .
1287	Show the details of a list of items .
1288	Create an ecommerce agent .
1289	Runs the ms_bot_framework_server .
1290	Download a file from a given path .
1291	Unpack a tar file .
1292	Decompress a download URL .
1293	Recursively updates an editable dictionary .
1294	Set the MD5 of a URL .
1295	Set a query parameter for a URL .
1296	Returns the alexa response .
1297	JSON representation of the control .
1298	Returns the ms_bot_framework .
1299	JSON representation of the text .
1300	Returns the ms_bot_framework for this message .
1301	Compute the f1 of the ground truth and predicted ground truths .
1302	Calculate the recall at a given k - value .
1303	r Check if a GPU is available .
1304	Parse a config property .
1305	Parse a configuration file into a dictionary .
1306	Expand a user - defined path .
1307	Construct a Component from a dictionary of parameters .
1308	Executes the request and output queues .
1309	Delete a conversation .
1310	Refreshes all expired certificates .
1311	Verify that a request is valid .
1312	Handle a request .
1313	Construct a class from a string .
1314	Register a model class .
1315	Get a model by name .
1316	Get the GLM regularization path for a model .
1317	Create a GLM model .
1318	Create a new H2O cluster object from a list of key - value pairs .
1319	Shutdown the H2O instance .
1320	Returns True if the server is running .
1321	Show the status of the cluster .
1322	Returns a list of jobs .
1323	List all timezones .
1324	Fill self with properties from other .
1325	Return the metalearner_params dictionary .
1326	Stabilize the sandbox for errors .
1327	Retrieve a summary of a column .
1328	Delete a frame .
1329	Make a request to the model_builders API .
1330	Validate model parameters .
1331	Compute metrics for a given model .
1332	Get model metrics .
1333	Delete a model .
1334	Create a tabular representation of the data .
1335	Run EC2 instances .
1336	Terminate EC2 instances .
1337	Stop all instances in a region .
1338	Start EC2 instances .
1339	Reboot EC2 instances .
1340	Wait for SSH on a list of ips .
1341	Return the full name of a function .
1342	Find a function from a code frame .
1343	Return a string representation of a function s arguments .
1344	Wrap text into a string .
1345	Join the job .
1346	Train the model .
1347	Fit the sklearn model to the given data .
1348	Returns a dictionary containing the parameters of this H2Ostimator .
1349	Signal handler .
1350	Cleans up the output directory .
1351	Remove a sandbox directory .
1352	Scrape the port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM and wait for it to finish .
1355	Stop all nodes and client nodes .
1356	Get the IP address of the client .
1357	Returns the port of this node .
1358	Returns the ROC of the model .
1359	Determine the vector size of the pre - trained model .
1360	Calculate the h2o mean absolute error .
1361	Compute the h2o mean squared error between actual and predicted values .
1362	Calculate the median absolute error between the actual and predicted values .
1363	Calculate the h2o explained variance score .
1364	Assert that a variable is of the given type .
1365	Raises H2OValueError if v does not match regex .
1366	Raises an H2OValueError if the condition does not satisfy .
1367	Retrieves the assertion arguments from a file .
1368	Checks if a variable is of the given type .
1369	Get the name of a type .
1370	Return the source code for a lambda function .
1371	Check if a variable is valid .
1372	Check if var is a mangle .
1373	Returns a dict of OConfig objects .
1374	Read the config file .
1375	Generate h2oconfig log files .
1376	Executes the given progress function .
1377	Store the model s progress data .
1378	Recalculate the model parameters .
1379	Estimate the progress completion time .
1380	Guess the next poll interval .
1381	Compute the progress at time t .
1382	Returns the time at which x_target has progressed .
1383	Draw text to stdout .
1384	Computes the widths of the widgets .
1385	Get terminal size .
1386	Set the encoding of the bar .
1387	Fits the model to the given frame .
1388	Get a H2O frame .
1389	Refreshes the cache .
1390	Return the type of a column .
1391	Returns the columns of this H2OFrame corresponding to the given type .
1392	Display a summary of the H2OFrame .
1393	Print a description of the frame .
1394	Returns a new DataFrame with the first n rows and the second n columns .
1395	Multiplies this H2OFrame with the given matrix .
1396	Returns a list of the levels of this node .
1397	Returns the number of levels .
1398	Set the level of this H2O frame .
1399	Set the levels of this H2OFrame .
1400	Rename columns in the table .
1401	Set the names of this node .
1402	Set the name of a column in the frame .
1403	Returns True if item is in the H2OFrame .
1404	Calculate the modulo - kfold column of the H2O frame .
1405	Returns a stratified k - fold column .
1406	Returns the structure of the H2OFrame .
1407	Returns a pandas . csv file as a pandas data frame .
1408	Remove a column from the H2OFrame .
1409	Returns the quantile of this H2OFrame .
1410	Concatenate a list of frames .
1411	Bind data to a H2OFrame .
1412	Bind data to this H2OFrame .
1413	Split a sequence of frames into a sequence of frames .
1414	Returns a new GroupBy object based on the given string .
1415	Return an h2o . fillna expression .
1416	Impute the value of a column .
1417	Merge two H2OFrames .
1418	Return a new H2OFrame with the node releveled .
1419	Insert missing values into the dataset .
1420	Returns a scalar representation of the variable .
1421	Return the correlation coefficient of this H2OFrame .
1422	Returns a H2OFrame of the distance between this node and y .
1423	Return the H2OFrame as a factor .
1424	Return a new H2OFrame with the strsplit expression .
1425	Returns an H2OFrame with count matches for the given pattern .
1426	Return a new H2OFrame with a substring .
1427	Return a new H2OFrame with the lstrip expression .
1428	Return the entropy of this H2OFrame .
1429	Returns the number of valid substrings of path_to_words .
1430	Returns a H2OFrame representation of the table .
1431	Returns a histogram of the node .
1432	Returns a H2OFrame with isax expressions .
1433	Return a new H2OFrame with a subexpression .
1434	Return the toupper node of this H2OFrame .
1435	Return a new H2OFrame with grep expressions .
1436	Return a new H2OFrame with the NA omit node removed .
1437	Returns the 1 - column difflag of this H2OFrame .
1438	Returns an H2OFrame representing this node as a numpy array .
1439	Returns a H2OFrame representing the minute of this node .
1440	Return a h2o . runif expression node .
1441	Returns a random stratified split .
1442	Cut this H2OFrame .
1443	Returns the index of the maximum node in the H2O frame .
1444	Apply a function along a given axis .
1445	Parse a string into a Code object .
1446	Parse a file into a Code object .
1447	Move the cursor to a new row .
1448	Unparse the token .
1449	Returns the size of the model .
1450	Returns a list of the centers of each cell in the model .
1451	The standard deviation of the centers of each cell .
1452	Connect to an h2o server .
1453	Make a request to the H2O API .
1454	Check the version of h2o - python .
1455	Lazy import a path .
1456	Upload a file to a file server .
1457	Import data from a file .
1458	Import a hive table .
1459	Import a SQL table .
1460	Import select query from SQLite database .
1461	Parse a raw H2OFrame .
1462	Return a deep copy of data with the given xid .
1463	Get a model by ID .
1464	Get information about a grid .
1465	Get a single frame .
1466	Download a model to a POJO jar .
1467	Download a dataset as a CSV file .
1468	Download all log files in a directory .
1469	Export a frame to a file .
1470	Returns an H2OFrame with data as a list .
1471	Demonstrate a function .
1472	Load a dataset from a relative path .
1473	Returns a list of model metrics for the given prediction and actual frame .
1474	Put a key to a file .
1475	Upload a custom metric .
1476	Checks if a frame id is valid .
1477	Returns a human readable string of size .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Convert a pandas . DataFrame to csv .
1481	Run mojo prediction on a CSV file .
1482	Deprecated decorator .
1483	Join the job queue .
1484	Returns a dictionary of deepfeatures for each model .
1485	Print a summary of all the models .
1486	Print the hyperparameters .
1487	Get the hyperparameters of a model .
1488	Returns a dictionary of hyperparameters for a model .
1489	Get the grid for this model .
1490	Return a dictionary of model . F1 objects .
1491	Returns a pandas DataFrame with the values of the variables .
1492	Get the archetypes of a project .
1493	Plot the variances of the model .
1494	Translate a name into a string .
1495	Remove indentation from text .
1496	Extracts the run data from a java log file .
1497	main entry point for GLRMRuntimeJavaLog
1498	Close the H2O session .
1499	Gets the session_id of the current user .
1500	Start logging all API requests to a file .
1501	Prepare the data payload .
1502	Prepare the payload for a file .
1503	Log a start transaction .
1504	Log the end of a transaction .
1505	Log a message to the logger .
1506	Process a H2O response .
1507	Print a message .
1508	Get the automl for a project .
1509	Download a python model from a given path .
1510	Download a mojo model .
1511	Fits the model to the data .
1512	Transform X using the mean and standard deviation .
1513	Inverse transform X .
1514	Extract a true string from a string_content .
1515	Find the name of the node in each line .
1516	Find the git hash branch .
1517	Find the build timeout in each line .
1518	Find a build failure .
1519	Find the build id in each line .
1520	Extracts the job build URL from a string .
1521	Grab a Java message from a temporary file .
1522	Saves the g_test_root_dir and g_test_passed_tests to a dict
1523	Update the g_summary_text_file .
1524	Write the contents of a file to file2read .
1525	Write a Java message to a text file .
1526	Load java messages to ignore .
1527	Normalize an enum constant .
1528	Returns a list of synonyms for the given word .
1529	Polls the H2O job to see if it has progressed
1530	Write the assembly to a . java file .
1531	Fit the model to a H2OFrame .
1532	Calculate the percentile on a list of lists .
1533	Returns a dictionary with the default values of the parameters .
1534	Returns a dictionary of the actual params .
1535	Creates a deepfeatures job for this model .
1536	Returns the scoring history for this model .
1537	Show information about this H2Ostimator .
1538	Returns a tuple of the variable and its relative values .
1539	Returns the residual degrees of freedom .
1540	Returns the coefficients of the model .
1541	Download a python model from a given path .
1542	Downloads the h2o - genmodel . jar and saves it to path .
1543	Save the model details to a JSON file .
1544	Check that y_actual and y_predicted are equal .
1545	Returns a list of cross validation models .
1546	Generates a gbm image of the prostate .
1547	Train a deep learning model .
1548	Generate a generalized linear model .
1549	Wait for a keypress .
1550	Return the data as a pandas DataFrame .
1551	Show the H2ODis table .
1552	Start a jvm .
1553	Find a jar on the local server .
1554	Return a list of paths to the h2o . jar file .
1555	Returns the hit ratio table of the model .
1556	Create a csv . DictWriter .
1557	Convert a URI to a path .
1558	Convert a directory path to a URI .
1559	Parse a list of lines .
1560	Generate the API documentation for a given URI .
1561	Discover all the modules in the root_path .
1562	Write API documentation to outdir .
1563	Write a toctree index to outdir .
1564	Convert to a list of integers .
1565	Load a dict from a pickle file .
1566	Add a new message .
1567	Update a message dictionary .
1568	Extract a message from a file .
1569	Save java messages to a pickle file .
1570	Print a dict of ignored messages .
1571	Parse command line arguments .
1572	Print the usage of the script .
1573	Locate all files in a directory .
1574	Find magic in a file .
1575	Processes the ROOT_DIR files .
1576	Transform data into an H2OFrame .
1577	Returns a list of all failed tests .
1578	Extract Print Save Intermittents from the global summary .
1579	Plot the ROC curve .
1580	Calculate confusion matrix .
1581	Check if a Deep Water model is available .
1582	Trim data back to a given month .
1583	Returns a dictionary of endpoint groups .
1584	Update or create a Site forward .
1585	Return data as a JSON string .
1586	Comment a user s medias .
1587	Get the login and password for a given username .
1588	Like a user .
1589	Like media with given hashtag .
1590	Check if a user is not a bot .
1591	Read a list from a file .
1592	Schedules the message to be scheduled at a specific time .
1593	Send a deferred message .
1594	Download a resource group to a virtual WAN .
1595	Guess the service info from a spec path .
1596	Updates a PowerShell command .
1597	Delete an application definition by its identifier .
1598	Create or update an application definition by id .
1599	Returns the URI for the given request .
1600	Get a connection object for the given request .
1601	Perform a request .
1602	Executes script actions on the specified resource group and cluster .
1603	Checks the availability of a front door .
1604	Purge deleted data from a vault .
1605	Returns the authorization server value .
1606	Validate a request URI .
1607	Get the azure - cli - core CLI profile .
1608	Get Azure CLI credentials .
1609	Resolve a query .
1610	Sends a CheckNameAvailabilityRequest to check name availability .
1611	Open an HttpRequest .
1612	Sets the timeout for this request .
1613	Sets the request header .
1614	Get all response headers .
1615	Send a request to this variable .
1616	Returns the current status of the connection .
1617	Returns the status text for this request .
1618	Returns the response body for this request .
1619	Sets the client certificate .
1620	Send a HTTP request to the server .
1621	Set the HTTP request header .
1622	Send a request .
1623	Returns a list of all HTTP response headers .
1624	Returns a readable id name .
1625	Returns the serialization name for the given element name .
1626	Verify a face to a person .
1627	Add a job to the queue .
1628	Get the properties of an entry from a minidom XML node .
1629	Get the children of a node from a path .
1630	Find namespaces from a child node .
1631	Convert an XML string to a ServiceBusNamespace object .
1632	Parse an XML string into a ServiceBusRegion object .
1633	Convert a minidom XML string to a namespace availability response .
1634	Convert xmlstr to metrics .
1635	Replace content in a runbook .
1636	List all recommended domains .
1637	Update a kb .
1638	Get a user s member groups .
1639	Build a package from a package number .
1640	Import data from a resource group .
1641	Publish a runbook to a resource group .
1642	Renew the Session lock .
1643	Replace word alterations .
1644	Add a secret value resource .
1645	Gets the properties of a storage account .
1646	Returns a list of keys for a storage account .
1647	Regenerate storage account keys .
1648	Create a new storage account .
1649	Updates a storage account .
1650	Deletes a storage account .
1651	Checks the availability of a storage account name .
1652	Gets the properties of a hosted service .
1653	Create a new hosted service .
1654	Deletes a hosted service .
1655	Create a new deployment .
1656	Delete a deployment .
1657	Swaps a deployment from a production to a service .
1658	Changes the configuration of a deployment .
1659	Updates the status of a deployment .
1660	Upgrade a deployment .
1661	Walks the upgrade domain of a service .
1662	Reboot a role instance .
1663	Deletes a list of role instances .
1664	Checks the availability of a service name .
1665	Fetches a list of certificates for a service .
1666	Get a certificate for a service .
1667	Add a certificate to a service .
1668	Delete a certificate for a service .
1669	Gets the management certificate for the given thumbprint .
1670	Add a management certificate .
1671	Deletes a management certificate .
1672	Gets the properties of an affinity group .
1673	Create a new affinity group .
1674	Deletes an affinity group .
1675	List all subscription operations .
1676	Create a new reserved IP address .
1677	Deletes a reserved IP address .
1678	Associate a reserved ip address with a service .
1679	Disassociate a reserved ip address .
1680	Returns the reserved IP address for a given name .
1681	Returns a PersistentVMRole object for the given role .
1682	Creates a new virtual machine deployment .
1683	Add a role to a service .
1684	Updates a role .
1685	Delete a role .
1686	Captures a role .
1687	Start a role instance .
1688	Start roles for a given service and deployment .
1689	Restart a role instance .
1690	Shutdown a role .
1691	Shuts down roles for the specified service and deployment .
1692	Add a DNS server .
1693	Update a DNS server .
1694	Delete a DNS server .
1695	Fetches a list of the versions of a resource extension .
1696	Replicates a virtual machine image .
1697	Unreplicates a VM image .
1698	Share a virtual machine image .
1699	Creates a virtual machine image .
1700	Delete a VM image .
1701	List all VM images for a given location publisher and category .
1702	Updates a virtual machine image .
1703	Add an os image .
1704	Update an os image .
1705	Updates an OS image from an image reference .
1706	Delete an os image .
1707	Returns the data disk path for the specified service deployment role and lun .
1708	Add a new data disk .
1709	Updates a data disk .
1710	Delete a data disk .
1711	Add a disk .
1712	Updates a disk .
1713	Delete a disk .
1714	Generate a summary for a management group .
1715	Builds the receiver .
1716	Fetch the next batch of messages .
1717	Renew the lock for this session .
1718	Create or update a virtual machine scale set .
1719	Converts this VMScaleSet to a single placement group .
1720	Send a screen - text message .
1721	Create a new key .
1722	Imports a key from a vault .
1723	Update a key in the vault .
1724	Sets a secret .
1725	Sets a certificate issuer .
1726	Create a Service from a connection string .
1727	Get a subscription for a topic .
1728	List all subscriptions for a specific topic .
1729	Sends a list of messages .
1730	Returns a SessionSender object .
1731	Returns a SessionReceiver .
1732	Returns a Receiver for a deadletter request .
1733	Parse a response for an asynchronous operation .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Get the status of an operation .
1738	Updates the request s management headers .
1739	Build a TRAVIS package .
1740	Gets a list of certificates for a given vault .
1741	Returns a list of all service bus regions .
1742	Fetches a list of all namespaces .
1743	Get a specific namespace .
1744	Create a new namespace in a region .
1745	Delete a namespace .
1746	Checks the availability of a namespace .
1747	Fetches a list of topics by name .
1748	Fetches a list of NotificationHubs .
1749	Fetches a list of relays by name .
1750	Get the rollups for a metric in a queue .
1751	Get metrics rollups for a topic .
1752	Get a list of metrics rollup notifications for a hub .
1753	Get a metric rollup from a relay .
1754	Create a new ExtendedEnvBuilder .
1755	Create a virtualenv with packages installed .
1756	Create a new server .
1757	Sets the server admin password .
1758	List the quotas for a server .
1759	Get event logs for a server .
1760	Create a firewall rule .
1761	Update a firewall rule .
1762	Delete a firewall rule .
1763	Fetches a list of firewall rules for a server .
1764	Returns a list of ServiceLevelObjectives for the specified server .
1765	Create a new database .
1766	Update a database .
1767	Delete a database .
1768	Fetches a list of databases .
1769	List all agreements for a given name .
1770	Close this message handler .
1771	Close the receiver .
1772	Get the current session state .
1773	Sets the session state .
1774	Receive deferred messages .
1775	Merge multiple reservations .
1776	Validate a challenge .
1777	Purge a table from a workspace .
1778	Handle errors .
1779	Create a new queue .
1780	Delete a queue .
1781	Get information about a queue .
1782	Create a new topic .
1783	Get a specific topic .
1784	Create a new rule .
1785	Get a specific rule .
1786	List rules for a topic .
1787	Create a new subscription for a topic .
1788	Get a subscription for a topic .
1789	List subscriptions for a topic .
1790	Send a message to a topic .
1791	Unlock a subscription message .
1792	Send a batch of messages to a queue .
1793	Unlocks a queue message .
1794	Receive a message from a queue .
1795	Receive a subscription message .
1796	Create an event hub .
1797	Update an event hub .
1798	Get the details of an event hub .
1799	Send a message to a hub .
1800	Update service bus headers .
1801	Returns the authorization string for the given request .
1802	Check if a token is expired .
1803	Get a WRAP token .
1804	Updates the request URI query .
1805	Resets a service principal profile .
1806	Delete the message from the queue .
1807	Unlocks the queue message .
1808	Renew the lock on the queue .
1809	Add headers to the request .
1810	Serializes this object as a batch body .
1811	Get the health of a cluster .
1812	Get the cluster health using the given policy .
1813	Unprovisions an application type .
1814	Get a list of tasks that need to be repaired .
1815	Submit a property batch .
1816	Generic HTTP Error handler .
1817	Start a web site network trace operation .
1818	List the differences between a slot and a resource group .
1819	Swap a slot in a resource group .
1820	Get events by type .
1821	Add a face from a large face list stream .
1822	Handle a redirect request .
1823	Create and start a migration .
1824	Publish events to a topic .
1825	Moves resources from one resource group to another .
1826	Sets the profile to use .
1827	List the query results for a management group .
1828	Create a new queue .
1829	Delete a queue .
1830	Create a new topic .
1831	Delete a topic .
1832	Create a new subscription to a topic .
1833	Create a shared access key from a connection string .
1834	Returns the properties of this Namespace .
1835	Returns True if the lock has expired .
1836	Create a new node .
1837	Create a new subscription .
1838	Export request rate by interval .
1839	Handle the output from the results_queue .
1840	Add chunks of tasks to results_queue .
1841	Task collection thread .
1842	Build a config dictionary from a config file .
1843	Resets a user s password .
1844	Start an environment for a user .
1845	Create a message from a response .
1846	Convert an etree element to a Rule .
1847	Convert an etree element to a Queue element .
1848	Convert an etree element to a topic .
1849	Convert an etree element to a subscription element .
1850	Create a new certificate .
1851	Delete a certificate from a resource group .
1852	Get a client from a cli profile .
1853	Get a GraphRbacManagementClient from a json dictionary .
1854	Load a client from an auth file .
1855	Parse an enum result list .
1856	Get the properties of an entry from an element .
1857	Delete a certificate .
1858	Returns a QueueClient .
1859	Returns a list of QueueClient objects .
1860	Returns a TopicClient for the given topic name .
1861	Returns a list of TopicClient instances .
1862	Receive deferred messages .
1863	Settlement for deferred messages .
1864	Get details of a specific site .
1865	Create a new site .
1866	Delete a website .
1867	Update a website .
1868	Restart a website .
1869	Get historical usage metrics for a given webspace and website .
1870	Gets the MetricDefinitions for the specified webspace and website .
1871	Get publish profile xml .
1872	Returns the publish profile for the given webspace and website name .
1873	Updates the registry policies for a resource group .
1874	Create a new cloud service .
1875	Checks the availability of a job collection .
1876	Gets a single job collection .
1877	Completes a restore operation .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Reconnect to the Sender .
1881	Get a certificate from a publish settings file .
1882	Load all cached cookies .
1883	Calculate the terminal width of a value .
1884	Get the cut prefix for a given value .
1885	Print a message to stderr .
1886	Format a file size .
1887	Format elapsed time into a string .
1888	Create a status line .
1889	Iterate over data in iterator .
1890	Generate segment numbers for a playlist .
1891	Returns a generator that yields the segments of this representation .
1892	Wait for a given time .
1893	Submit a segment to the executor .
1894	Put a value into a queue .
1895	Parse akamaihd - player stream .
1896	Extract a node from an HTTP result .
1897	Returns the vpid for the given url .
1898	Parse JSON data .
1899	Parse an XML string .
1900	Parse a query string .
1901	Searches a dictionary for a given key .
1902	Spawn a new command .
1903	Iterate over tags .
1904	Parse a manifest and return a dict .
1905	Determine the json encoding for a sample .
1906	Parse a JSON string .
1907	Parse an XML document .
1908	Parse a set of cookies .
1909	Parse headers .
1910	Parse query params .
1911	Returns the message as a string .
1912	Create a new log record .
1913	Login as a user .
1914	Load a support plugin .
1915	Update the query string of a URL .
1916	Iterate over chunks of the file .
1917	Returns a set of plugins that require a given name .
1918	Checks if a file exists and if so overwrites it .
1919	Create a FileOutput object for the given plugin .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Creates an output stream using the HTTP server .
1923	Output a stream passthrough .
1924	Open a file descriptor from a stream .
1925	Open a stream for the given plugin .
1926	Read a stream from a file - like object .
1927	Handle a stream .
1928	Fetch a list of streams for the given plugin .
1929	Fetch streams with retrying .
1930	Resolve a stream name from a list of streams .
1931	Format a list of valid streams .
1932	Handle a URL .
1933	Print a list of loaded plugins .
1934	Authenticate using Twitch OAuth .
1935	Load plugins from a list of directories .
1936	Sets up the arguments parser .
1937	Setup the global console .
1938	Setup the http session .
1939	Load plugins from PLUGINS_DIR
1940	Setup streamlink options .
1941	Log current OS and streamlink versions .
1942	Get the stream id for the given text .
1943	Get the iframe for the given text .
1944	Set the value of an option .
1945	Returns the option for the given key .
1946	Set an option for a plugin .
1947	Returns the plugin option for the given key .
1948	Resolve a URL .
1949	Load plugins from a given path .
1950	Convert a string to hours minutes seconds .
1951	Validate that a value starts with a string .
1952	Validate that a value ends with a string .
1953	Returns True if the value contains a string .
1954	Creates a getter that returns the value of the given attribute .
1955	Apply a filter to a dictionary .
1956	Map a function to a python object .
1957	Validate a URL .
1958	Find an element in an XML document .
1959	Find all elements in xml .
1960	Find the player s url .
1961	Load and parse a M3U8 file .
1962	Returns the supported player for a given command .
1963	Attempts to login using the given email and password .
1964	Get stream id from html .
1965	Extract stream info from html .
1966	Login to the login website .
1967	Add a function to the map .
1968	Make a call to the API .
1969	Starts a new session .
1970	Get information about a media .
1971	Create the Crunchyroll API .
1972	Compress a string .
1973	Returns the character formatter for a character .
1974	Convert a string to a formatted string .
1975	Read n bytes from the stream .
1976	Return the value of this code .
1977	Returns an explanation of the code .
1978	Sets the decode table .
1979	Sets the length table .
1980	Prints a code to the screen .
1981	Read a tuple from the given stream .
1982	Returns the explanation for the given index .
1983	Returns the value at the given index minus extra .
1984	Returns the span of the table at the given index .
1985	Returns the value at the given index .
1986	Returns the mnemonic for the given index .
1987	Return the mnemonic at the given index .
1988	Compiles the action list into a list of actions .
1989	Executes a single action .
1990	Returns the HEX data for a given position .
1991	Process a stream .
1992	Returns the length of the metablock .
1993	Read uncompressed data .
1994	Reads a block type .
1995	Convert a list of indices to a list of indices .
1996	Reads a prefix array .
1997	Convert an image to monochrome .
1998	Create a polychrome image .
1999	Create an arrow table from a VaEx DataFrame .
2000	Patches a file - like object with hidden data .
2001	Adds a Cartesian velocity column to the PMVR .
2002	Add virtual columns perpendicular to the model .
2003	Returns a graphviz representation of the graph .
2004	Returns a list of tuples representing the number of values in the series .
2005	Return a new DataFrame with the values from the given mapper .
2006	Create a Vaex application .
2007	Concatenate multiple dataframes into a single dataframe .
2008	Create an Astropy table from a SAMP table .
2009	Create a DatasetAstropyTable object from an astropy table .
2010	Create a DataFrame from a list of arrays .
2011	Convert scalars to numpy arrays .
2012	Create a DataFrameArray from a Pandas DataFrame .
2013	Read a pandas DataFrame from a CSV file .
2014	Return a vaex . remote . ServerRest object for the given url .
2015	Compute the Zeldovich distribution .
2016	Concatenate two DataFrames .
2017	Return the virtual range of a column .
2018	Open a dataset at the given path .
2019	Evaluate an expression in a dataset .
2020	Decorator to mark a function as delayed .
2021	Returns a set of columns that depend on the given DataSelection .
2022	Schedules a task and runs it .
2023	Sorts the data by a given column .
2024	Get information about a file .
2025	Clears the background .
2026	Wait for the last plot to finish .
2027	Open a document on the OS .
2028	Opens a file and writes it to it .
2029	Split arrays and combine them into a single mask .
2030	Perform a no - op on an expression .
2031	Returns a list of strings matching the given expression .
2032	Compute the mean of an expression .
2033	Compute the sum of an expression .
2034	Return the standard deviation of an expression .
2035	Compute the covariance matrix .
2036	Calculate the minmax of an expression .
2037	Compute the minimum value of an expression .
2038	Calculate the median approximation of an expression .
2039	Plot a jupyter plot .
2040	Return the number of healpix images .
2041	Plot a healpix image .
2042	Plot a 3D volume .
2043	Return the dtype of the data .
2044	Returns a private directory .
2045	Returns the state of the model .
2046	Set the state of the index .
2047	Remove the virtual_meta . yaml file .
2048	Writes the virtual_meta . yaml file to disk .
2049	Write meta . yaml .
2050	Returns a list of subspaces for this column .
2051	Set the value of a variable .
2052	Evaluates a variable .
2053	Evaluate the selection mask .
2054	Convert the table to a dictionary .
2055	Returns a copy of the DataFrame .
2056	Convert this DataFrame to a Pandas DataFrame .
2057	Convert the dataframe to an arrow table .
2058	Convert to an astropy . table object .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Adds virtual columns from Cartesian to polar .
2062	Add virtual columns to the spherical .
2063	Adds virtual columns with Cartesian velocity to the polar matrix .
2064	Add virtual columns with polar velocity to Cartesian .
2065	Add a rotation matrix for virtual columns .
2066	Add virtual columns from spherical to cartesian .
2067	Adds virtual columns from Cartesian to spherical .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a variable to the table .
2071	Delete a variable .
2072	Returns the last n elements of the list .
2073	Print the n - tuples of the head and tail table .
2074	Returns a pandas representation of the feature .
2075	Catches two IPython tables .
2076	Sets the value of the current row .
2077	Returns a list of column names .
2078	Return a new DataFrame with the columns removed .
2079	Take a list of indices from this DataFrame .
2080	Returns a tuple of the indices of the filtered and unfiltered ranges .
2081	Returns a random sample of the state .
2082	Split a random state into a list of indices .
2083	Split a fractal into its components .
2084	Sorts the data by a given sorting order .
2085	Materialize a virtual column into a DataFrame .
2086	Undo a selection .
2087	Redo a selection .
2088	Check if a selection can be redone .
2089	Executes a boolean expression and returns the result .
2090	Select a non - missing column .
2091	Drop non - missing values from the table .
2092	Select a rectangle .
2093	Select a box from a list of spaces and limits .
2094	Select a circle .
2095	Select an ellipse .
2096	Creates a SelectionLasso object and returns it .
2097	Return the inverse of the current selection .
2098	Create a new selection .
2099	Create a new selection .
2100	Find a valid name for a given initial name .
2101	Returns a list of nodes that are the root of the node tree .
2102	Return a graphviz representation of the dataframe .
2103	Categorize a column .
2104	Encode an ordinal column .
2105	Returns a list of Data objects .
2106	Returns the length of the array .
2107	Stack this DataFrame horizontally with other .
2108	Concatenate two DataFrames .
2109	Export data to HDF5 .
2110	Add a column to the DataFrameArray .
2111	Patches a DataFrame with the given name .
2112	Register a function as a lazy function .
2113	Fill a numpy array with a value .
2114	Returns the datetime . dayofweek value of x .
2115	Returns the datetime . dayofyear value of x .
2116	Returns True if x is a leap year .
2117	Returns the year of the dt of x .
2118	Return the dt values for a month .
2119	Return the month name of x as a string .
2120	Convert a datetime . day object to a datetime . day object .
2121	Returns the datetime . day_name of x .
2122	Returns a pandas DataFrame of dt . weekofyear values .
2123	Convert a datetime . hour object to a pd . Series .
2124	Returns a pandas Series of dt . minute values .
2125	Return the second value of the dt of x .
2126	Returns a ColumnStringArrow that capitalizes x .
2127	Concatenate two strings .
2128	Returns True if x contains a pattern .
2129	Count the number of characters in a string sequence .
2130	Find a substring in a string sequence .
2131	Get a string array from a column .
2132	Find the index of a string .
2133	Returns a ColumnStringArrow with x lowercased .
2134	Returns a ColumnStringArrow from a string x .
2135	Pad a column with a string array .
2136	Returns a ColumnStringArrow that repeats x .
2137	Find a substring in a string sequence .
2138	Find the index of a string .
2139	Returns a new row with x rjusted to the given width .
2140	Returns a ColumnStringArrow from a string x .
2141	Slice a string from start to stop .
2142	Strips a string from x .
2143	Return a string representation of the title of a column .
2144	Returns a ColumnStringArrow representing the upper part of x .
2145	Return the autotype of an array .
2146	Returns a numpy . recarray of the dict .
2147	Store properties in a file - like object .
2148	Write a comment to a file .
2149	Write a property to a file handle .
2150	Iterate over all properties in a file .
2151	Generates newlines from a file - like object .
2152	Print INSTALLED VERSIONS
2153	Rename a keyword argument .
2154	Set fftlib .
2155	Load a beat track from a CSV file .
2156	Adjust the pitch - correction of the input audio file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert a time series to frames .
2160	Convert a midi string to a note .
2161	Convert frequencies from hz to Mel .
2162	Convert mel amplitudes to hz amplitudes .
2163	Compute the frequency of a fft signal .
2164	Compute CQT frequency corrections .
2165	Computes the frequencies of mels .
2166	Calculate the A - weighting for a set of frequencies .
2167	Compute the times - like of X .
2168	Samples X along a given axis .
2169	Hybrid CQT filter .
2170	Pseudo cqt filter .
2171	Compute the inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter - inter
2172	Compute the FFT of a constant - Q filter .
2173	Trim the top n_bins of a CQT stack .
2174	Compute a CQT response .
2175	Returns the number of downsamples between n_octaves and hop_length .
2176	Downsample the signal at y to sr .
2177	Calculate the accu cost .
2178	Backtracking for D_steps .
2179	Compute the Viterbi function .
2180	Apply a viterbi discrimination to a transition matrix .
2181	Return a uniform transition between n_states and n_states .
2182	Computes a transition loop .
2183	Cycle through n_states with a given probability .
2184	Apply a local transition to a set of states .
2185	Detect the onset of a signal .
2186	Compute the full - spectrum onset strength .
2187	Backtrack the onset of an event .
2188	Compute the onset strength of multiple mel spectrograms .
2189	r Write a list of times to a CSV file .
2190	Write a WAV file .
2191	Compute the cmap of the data .
2192	Plot a waveform along a given axis .
2193	Set the current image .
2194	Return the mesh coordinates for the given axes .
2195	Check that axes is an instance of matplotlib . axes . Axes .
2196	Scale axes according to axes type .
2197	Compute the frequency spectrum of a given coordinate .
2198	Computes the mel frequency basis for a given frequency range .
2199	Computes the frequency spectrum of a coordinate in hz .
2200	Compute the chroma coordinates of a sequence .
2201	Convert a number of frames to a coordinate time .
2202	Estimate pitch tuning using piptrack .
2203	Create a piptrack spectrogram .
2204	Compute the HPSS of a vector y .
2205	Compute the harmonic of a given y .
2206	Returns a percussive representation of y .
2207	Returns the time - stride of a time series .
2208	Perform a pitch - shift resampling .
2209	Remix a sequence of intervals .
2210	Convert a signal to a frame .
2211	Trim a signal to a single frame .
2212	Split a signal into a list of frames .
2213	Generate a phase vocoder .
2214	Convert amplitude to db .
2215	Generate a spectrogram .
2216	Performs hpss_beats on a percussive component .
2217	Decompose S into components and activations .
2218	Filter segment by self - similarity matrix .
2219	Helper function for nn_filter .
2220	Compute the melodiometry of sr using fft .
2221	Compute the chromosome frequency distribution .
2222	Create a float window from a spec .
2223	r Compute the constant Q of a string .
2224	r Compute the constant q - lengths of a string .
2225	Convert a CQ to chroma .
2226	Calculate the bandwidth of a window .
2227	Get a single window from scipy . signal .
2228	r Multirate filterbank .
2229	r Calculate the center frequencies and sample rates for a given tuning .
2230	Fill x with data from n_frames .
2231	Compute the sum square of a window .
2232	Apply a diagonal filter to a window .
2233	Create a spectral centroid .
2234	Calculate the spectral rolloff .
2235	Calculate the flatness of a spectrogram .
2236	Generate a spectrogram of polynomial features .
2237	Compute the mean of zero crossings .
2238	Generate a chromosome - specific STFT spectrogram .
2239	r Compute the chromosome - specific cqt .
2240	Compute a mel spectrogram .
2241	Calculate the Jacobian between two integers .
2242	Given a query and a list of candidates determine if the intervals overlap .
2243	Match intervals from a list of intervals to a list of intervals .
2244	Match a list of intervals .
2245	Matches two lists of events .
2246	Compute the salience of a signal .
2247	Interpolate harmonics along a given axis .
2248	Perform a 1D interpolation of harmonics .
2249	Compute the harmonics of a 2D array .
2250	Load audio from a file .
2251	Load audio data from audio file .
2252	Convert y to mono .
2253	Resample y to target_sr .
2254	Return the autocorrelation of y along a given axis .
2255	Returns the LPCC of y in the given order .
2256	Returns a list of audio clicks .
2257	Generate a tone .
2258	Return the chirp of a signal .
2259	Returns a list of files in a directory .
2260	Stretch a demo file .
2261	Parse command line arguments .
2262	Load a hpss demo file .
2263	r Generate a beat track .
2264	Generate a beat tracker .
2265	Compute the local score for a given period of time .
2266	Generate a beat track for a given period .
2267	Calculate the last beat of a cumscore .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag matrix to a recurrence matrix
2270	Decorator to add a timelag filter to a function .
2271	Return a subsegment of the data .
2272	Agglomerative clustering .
2273	Enhance a path .
2274	Detect onsets .
2275	Frame a numpy . ndarray .
2276	Validate audio data .
2277	Check if x is a valid integer .
2278	Fixes the length of the data .
2279	Sort a 2D array by axis .
2280	Normalize S along a given axis .
2281	Returns True if x is the local maximum of axis .
2282	Pick a peak from the input array .
2283	Scipy . sparse . lil_matrix
2284	Roll a sparse matrix along a given axis .
2285	Convert a buffer to a float .
2286	Convert an index to a slice .
2287	Synchronize a set of indexes .
2288	Apply a softmask to X .
2289	Return a tiny representation of x .
2290	Convert a list of frames to a video file .
2291	Read the image from the cache .
2292	Get a frame by ID .
2293	Convert a CVT file to a list of frames .
2294	Track the progress of a list of tasks .
2295	Track the progress of a function in parallel .
2296	Flip an image in the specified direction .
2297	Rotate an image .
2298	Clip bboxes to img_shape .
2299	Scale a set of bboxes to a given scale .
2300	Crop an image using bboxes .
2301	Pad an image with a given shape .
2302	Convert an image to a multi - divisor image .
2303	Scale a size to a given scale .
2304	Resize an image to a given size .
2305	Resize an image according to dst_img .
2306	Rescale an image to a given scale .
2307	Register a file handler .
2308	Returns the priority of a request .
2309	Dequantize a numpy array .
2310	Show an image .
2311	Show the bboxes of an image .
2312	Read data from a flow file .
2313	Write a flow to a file .
2314	Dequantize a flow vector .
2315	Load a state dict from a module .
2316	Load a checkpoint from a file .
2317	Converts a dictionary of weights to a cpu dict .
2318	Save a checkpoint to a file .
2319	Initializes an Optimizer object .
2320	Initialize a logger .
2321	Returns the current lr of the optimizer .
2322	Register a new hook .
2323	Run the workflow for the given data_loaders .
2324	Register training hooks .
2325	Convert a video file .
2326	Resize a video file .
2327	Cut a video file .
2328	Concatenate a list of video files .
2329	Read a list from a file .
2330	Read a dictionary from a file .
2331	3x3 convolution with padding
2332	Construct an object from a dict .
2333	Read a numpy array or file .
2334	Create an image from a byte string .
2335	Write an image to a file .
2336	Convert a BGR image to a grayscale image .
2337	Convert a grayscale image to a BGR image .
2338	Cast inputs to dst_type .
2339	Checks if a sequence is of the expected type .
2340	Slice a list of integers into a list of lists .
2341	Decorator to check that the specified prerequisites are met .
2342	Compute the average of n values over a period of time .
2343	Scatter input using a set of devices .
2344	Convert a color value to a tuple .
2345	Check the time of a timer .
2346	Starts the process .
2347	Returns the time since the timer started .
2348	Returns the number of seconds since the last check .
2349	Show an image of a flow .
2350	Convert a flow to RGB .
2351	Make a color wheel from a list of bins .
2352	Compute the accuracy of the output .
2353	Apply scattering to inputs .
2354	Return a tuple of inputs and kwargs for scattering .
2355	Fetch a response from the server .
2356	Returns a JSON object .
2357	Returns a string .
2358	Handle an AWS callback .
2359	Perform a request to multiple URLs .
2360	Make a request to the given URL .
2361	Start the master worker .
2362	Normalize a task v2 . 2 .
2363	Parse a YAML file for line numbers .
2364	Return the name of the wheel distribution .
2365	Returns the basename of the archive .
2366	Add requirements from setup . py .
2367	Convert egginfo_path to distinfo_path .
2368	Sends a text message to the user .
2369	Creates a SuggestedActions message .
2370	Creates a new attachment .
2371	List attachments .
2372	Create an attachment for a given URL .
2373	Creates a trace for the given activity .
2374	Sets the bot s telemetry client .
2375	Read a list of keys from the database .
2376	Writes a change to the database .
2377	Deletes a list of keys .
2378	Create a StoreItem from a result .
2379	Create a dictionary for the given store item .
2380	Sanitize a key .
2381	Create the database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fills a QNA event .
2385	Returns a ConversationReference for the given activity .
2386	Get the name of the step at the given index .
2387	Check if a channel supports suggested actions .
2388	Check if a channel supports card actions .
2389	Returns the channel_id of the given turn context .
2390	Checks if the given auth_header is a valid token from an emulator .
2391	Prepare an attachment for a hero card .
2392	Returns a list of the params defined in the definition .
2393	Return a mirror of this instance .
2394	Returns the inverse of this gate .
2395	Sets the classical control value .
2396	Return a copy of this object .
2397	Returns a qasmif string .
2398	Returns the QASM of the parameter .
2399	Run a circuit .
2400	Perform a transformation pass on a dag .
2401	Returns a list of all passes .
2402	Returns a dict of all the passes for this flow controller .
2403	Returns a FlowControllerLinear .
2404	Adds a UBase to the equation .
2405	Return the parameters for a single gate .
2406	Returns the matrix for a single gate .
2407	Returns the index of the einsum matrix .
2408	Returns the einsum vector index for a set of gate indices .
2409	Helper function for _einsum_matmul_index .
2410	Convert a circuit to a DAGCircuit .
2411	Fit a function to x .
2412	Fit a function to an osc .
2413	Plot the coherence function .
2414	Returns a list of tuples containing the mean and standard deviation of the data .
2415	Plot rb data .
2416	Split a list of runs on a set of parameters .
2417	Composes a u3 matrix .
2418	Convert y - axis coordinates to z - axis coordinates .
2419	Validate the input quantum state .
2420	Trim the edges of an image .
2421	Returns the span of the gate .
2422	Convert a circuit to an instruction .
2423	Run the transpiler on the given dag .
2424	Return the best subset of n_qubits .
2425	Returns a list of qubits to be used as a barrier .
2426	Computes the average of the counts of an observable .
2427	Process a bit id node .
2428	Process a custom unitary node .
2429	Process a gate node .
2430	Process a Cnot node .
2431	Process a Measure node .
2432	Process if node .
2433	Create a dag op .
2434	Returns the duration of a channel .
2435	Return the start time of a channel .
2436	Returns the stop time of a channel .
2437	Returns an iterable of instructions for the given time .
2438	Checks that the value is of the expected type .
2439	Dump additional data to a dictionary .
2440	Load additional data .
2441	Create a validation schema .
2442	Validate a model instance .
2443	Decorate a shallow_schema method to raise ValidationError .
2444	Serializes this model to a dictionary .
2445	Initialize a ModelValidation object from a json dictionary .
2446	Compute the QFT of a circle .
2447	Compute the partial trace of a vector .
2448	Return a vectorized version of a density matrix .
2449	Returns a vectorized square matrix .
2450	Convert choi to rauli .
2451	Chop an array by epsilon .
2452	Return the outer vector of vector1 and vector2 .
2453	Compute the concurrence of two qubits .
2454	Compute the Shannon entropy of a vector .
2455	Compute the entropy of a state .
2456	Returns the mutual information of a state .
2457	Returns the entanglement of a state .
2458	Compute the entropy of a qubit .
2459	Flatten a schedule .
2460	Shift a schedule to a new time .
2461	Insert a time into a Schedule .
2462	r Append a child to a Schedule .
2463	Returns a U3Gate .
2464	Returns the current status of the backend .
2465	Start the iteration .
2466	Returns a string representation of the time remaining in the iterator .
2467	Disassemble qobj into circuits run config and user qobj header .
2468	Calculate the Hamming distance between two strings .
2469	Convert axis rotation to quaternion .
2470	Generate a quaternion from Euler angles .
2471	Normalize the Quaternion .
2472	Convert to a numpy array .
2473	Convert to z - axis .
2474	Process data and return a dict .
2475	Plot a histogram of data .
2476	Check if value is a collection or a type .
2477	Checks that the index j is within the given range .
2478	Checks if a matrix is a square matrix .
2479	Checks if a matrix is a diagonal matrix .
2480	Returns True if op is a symmetric matrix .
2481	Checks if a matrix is a Hermitian matrix .
2482	Check if a matrix is a positive semi - definite matrix .
2483	Checks if a matrix is an identity matrix .
2484	Checks if a matrix is a unitary matrix .
2485	Convert a data object to a Choi object .
2486	Convert input_dim to output_dim .
2487	Convert input_dim to output_dim .
2488	Convert input_dim to output_dim .
2489	Convert input_dim to output_dim .
2490	Convert input_dim to output_dim .
2491	Convert input_dim to output_dim .
2492	Create a DataFrame from an operator .
2493	Convert a channel to an Operator representation .
2494	Convert a superop to choi .
2495	Convert choi to superop .
2496	Convert kraus to choi .
2497	Convert Choi matrix to Kraus matrix .
2498	Convert stinespring data to kraus data .
2499	Convert stinespring data to Choi data .
2500	Convert kraus vectors to stinespring vectors .
2501	Convert a Kraus operator to a superop operator .
2502	Convert chi - to choi transformation .
2503	Convert choi to chi .
2504	Compute the reravel matrix between two tensors .
2505	Transforms the data from Pauli to num_qubits .
2506	Check that the input_dim and output_dim are n - qubits .
2507	Hide ticklines and labels .
2508	Set the label convention .
2509	Clear all points vectors and annotations .
2510	Add a list of vectors to the graph .
2511	Add an annotation to the graph .
2512	Render the figure .
2513	Plot the front axis .
2514	Render the figure and show it .
2515	Return the two - qubit Kak function for a unitary matrix .
2516	Returns the top of the mesh .
2517	Returns a tuple containing the middle of the content .
2518	Returns a representation of the bot .
2519	Returns the length of the top mid and bot .
2520	Returns a list of params for a label .
2521	Returns a label for a box instruction .
2522	Return a LaTeX representation of this parameter .
2523	Compile a set of circuits into a qobj .
2524	Filter deprecation warnings .
2525	Return information about the local hardware .
2526	Check if the given host has a connection to the given port .
2527	Check if a job is done or cancelled .
2528	Returns a constant ndarray .
2529	Compute the square of a complex signal .
2530	Returns a complex triangle .
2531	Compute the cosine of a complex waveform .
2532	r Fixes the width of a Gaussian array .
2533	r Compute a Gaussian .
2534	Derivative of a Gaussian function .
2535	r Calculate the square of a gaussian .
2536	Creates a default pass manager .
2537	Returns the default pass manager for the given basis gates .
2538	Check if a register exists .
2539	Returns a copy of this mirror .
2540	Return the inverse of this circle .
2541	Append an instruction to the list .
2542	Append an instruction to the list .
2543	Add a register to the QCircuit .
2544	Raise QiskitError if there are duplicate qubit arguments
2545	Check that the qargs are valid .
2546	Checks that all the cargs are valid .
2547	Check if circuits are compatible .
2548	Generate a qasm string .
2549	Draw the circuit .
2550	Return the number of gate operations .
2551	Returns the width of the mesh .
2552	Returns a dictionary containing the number of operations .
2553	Returns the number of connected components .
2554	Bind parameters to the circuit .
2555	Bind a parameter to a value .
2556	Plot a pulse drawing .
2557	Search forward n swaps .
2558	Given a list of gates and a coupling map return a list of mapped free gates .
2559	Calculate the distance between the layout and the given gates .
2560	Compute the score of a given step .
2561	Returns a copy of the DAGCircuit with the given coupling map .
2562	Transform a gate for a given layout .
2563	Returns a list of swap operations for the given edge .
2564	Run the coupling map on the given DAG .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge to the graph .
2567	Return a new CouplingMap with the given list of nodes .
2568	Returns a list of all physical qubits in the graph .
2569	Returns True if the network is weakly connected .
2570	Compute the distance matrix .
2571	Returns the distance between two physical qubits .
2572	Transpile a set of circuits .
2573	Add a Cu1Gate to the graph .
2574	Returns the inverse of the instruction .
2575	Returns self . gate . q_if .
2576	Check if a classical value is a valid gate .
2577	Subscribe to an event .
2578	Dispatch an event to all registered subscribers .
2579	Unsubscribe from an event .
2580	Publish an event to the broker .
2581	Initialize a list of qubits .
2582	Define the circuit .
2583	Returns a list of gates to uncompute .
2584	Calculate the Bloch angle between two complexes .
2585	Compute the angle weight of a multiplex circuit .
2586	Checks if a value is a virtual number .
2587	Return a copy of this layout .
2588	Combines two layouts into a single edge map .
2589	Return a new ToffoliGate with the given coordinates .
2590	Insert a new schedule component .
2591	Raises TranspilerAccessError if the fenced property is not protected .
2592	Convert a list of gates to a list of indexes .
2593	Runs the mapper on the given DAG .
2594	Update the DAGCircuit .
2595	Returns a pauli group of tensors .
2596	r Create a Pauli string from a label .
2597	Initialize from a boolean vector .
2598	r Calculate the product of two phases .
2599	Convert this matrix to a quantum operator .
2600	Converts the Pauli circuit to an instruction .
2601	Update the z - qubits of the Qiskit .
2602	Update the qubits of x .
2603	Insert Pauli matrices .
2604	Appends a list of paulis to the list .
2605	Delete a set of qubits .
2606	Generate a random number of qubits
2607	Create a Pauli single .
2608	Returns the measure outcome for a qubit .
2609	Add a sample measure to the model .
2610	Adds a qasm measure to the model .
2611	Add qasm reset for a qubit .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Returns the state vector .
2615	Validate that measure sampling is allowed .
2616	Runs a job on the given QOBJECT .
2617	Run a single job .
2618	Validate a qobj .
2619	Validate that the initial unitary is correct .
2620	Initialize the unitary .
2621	Returns the unitary .
2622	Run a job on a QObject .
2623	Validate qobj s configuration .
2624	Check if obj is a bit .
2625	Run the transpiler on the given dag .
2626	Returns True if the interval has overlap with this interval .
2627	Shift the interval by a given time .
2628	Shift the time to a new time slot .
2629	Return the start time of a channel .
2630	Return the stop time of a channel .
2631	Checks if a collection of timeslots can be combined with this collection .
2632	Returns a new TimeslotCollection with all slots merged together .
2633	Shift the current time to a new time slot .
2634	Report an issue .
2635	Process rho data into a dictionary .
2636	Plot the state of a Paulivec object .
2637	Returns the RZZGate between two qubits .
2638	Wrapper for cswap .
2639	Initialize the backend property .
2640	Create a program graph from a dag .
2641	Returns the next pending program edge .
2642	Returns the best remaining cx .
2643	Select the best remaining qubit for prog_qubit .
2644	Runs the program on the given dag .
2645	Returns a list of CompositeGate instruction names .
2646	Returns the inverse of this gate .
2647	Returns a list of gate . q_if objects .
2648	Compute the c_if of all gates .
2649	Returns True if the matrix is unitary .
2650	Return the conjugate operator .
2651	Transpose the input and output dimensions .
2652	Returns the power of the operator .
2653	Returns a tuple of the output and input dimensions .
2654	Convert a QuantumCircuit instruction to an Operator .
2655	Swap mapper layer update .
2656	Separate a bitstring from a list of creg sizes .
2657	Convert a level 0 memory to a complex array .
2658	Convert a level 1 memory to a complex array .
2659	Formats the memory at level 2 .
2660	Formats a list of counts into a dictionary .
2661	Formats a state vector into a numpy array .
2662	Format a matrix as a unitary matrix .
2663	Decorator to raise an exception if the job is not submitted yet .
2664	Submit the job .
2665	Returns the status of the job .
2666	Returns True if the load balancer includes the given frequency .
2667	Plot a bloch multivector .
2668	Get the qubit - lo frequencies from the user - provided config .
2669	Returns the meas_lo for the given user_lo_config .
2670	Unroll the circuit to the given basis .
2671	Plot the state of a quaternion .
2672	Given a number and a k - value return the k - value .
2673	Returns the index of n in lst that corresponds to k in lst
2674	Plot the state of a pipette using Pauli s algorithm .
2675	Returns a list of unique backends .
2676	Returns the op node .
2677	Create a pulse with a constant duration and amp .
2678	Returns a sample of a zero pulse .
2679	Returns a sampled square pulse .
2680	Create a Sawtooth Pulse .
2681	Generate a pulse for a triangle .
2682	Return a sampled cosine pulse .
2683	Generate a Sin Pulse .
2684	r Sample a gaussian pulse .
2685	r Sample a Gaussian derivative pulse .
2686	Generate a gaussian square pulse .
2687	Returns the distance between the real and imaginary axes .
2688	Convert to a string .
2689	Return an instance of backend_cls .
2690	Rename a register .
2691	Removes all ops with the given name .
2692	Add a QuantumRegister to the circuit .
2693	Add a ClassicalRegister to the circuit .
2694	Add a wire to the graph .
2695	Check if a condition is met .
2696	Return a list of all bits in a condition .
2697	Add an op node to the graph .
2698	Apply an operation back to the graph .
2699	Check the edgemap registers .
2700	Check the validity of a wire mapping .
2701	Given a wire map and a condition return a new condition .
2702	Extend the DAG to the back of the DAG .
2703	Compose a back DAGCircuit .
2704	Check if a list of wires is valid .
2705	Returns the pred and succ maps for a given node .
2706	Returns a dictionary mapping pred_map to succ_map .
2707	Topological nodes of the graph .
2708	Iterate over the edges of the graph .
2709	Returns a list of op nodes .
2710	Returns a list of all gate nodes .
2711	Returns a list of named nodes .
2712	Returns a list of two Q gates .
2713	Returns the predecessors of the given node .
2714	Returns a list of predecessors of the given node .
2715	Returns the ancestors of the given node .
2716	Return a list of quantum successors of a node .
2717	Remove an op node from the graph .
2718	Remove ancestors of a node .
2719	Remove all descendants of a node .
2720	Remove all non - ancestors of a node .
2721	Remove all non - descendants of a node .
2722	Returns a list of DAGCircuit layers .
2723	Returns a DAGCircuit containing the serial layers .
2724	Iterate over the layers of the multi - graph .
2725	Collect runs from the topological_op_nodes .
2726	Returns a generator that yields nodes on a wire .
2727	Count the number of operations .
2728	Returns a dictionary describing the properties of the tensor .
2729	Returns a TomographyBasis instance for a given basis .
2730	Calculate Pauli - Meas Gates .
2731	Calculate the tomography set of a set of qubits .
2732	Process a tomography set .
2733	Create a list of tomography circuits .
2734	Convert a list of tomography results into a dict .
2735	Returns the marginal counts of a set of qubits .
2736	Fits a reconstruction method to the tomography data .
2737	Perform a least - squares fit on the data .
2738	Project a list of operations onto a basis .
2739	Compute tomo - linear invariants .
2740	rho_wizard is a wrapper around np . linalg . eigh .
2741	Generate wigner data .
2742	Set the meas_fun of a circuit .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Compute the Euler angles of a 2x2 unitary matrix .
2746	Simplify U .
2747	Run EnlargeWithAncilla on the given dag .
2748	Returns the qubits tab .
2749	Display the job history .
2750	Plot the history of a job .
2751	Returns a pulse drawing .
2752	Add a Cu3Gate to the graph .
2753	Build a BellCircuit from a QuantumRegister .
2754	Transpile a set of circuits .
2755	Transpile a circuit .
2756	Execute a set of experiments .
2757	Returns the drive channel .
2758	Returns the control channel .
2759	Returns the measurement channel .
2760	Returns the acquire channel .
2761	Compute the input state .
2762	Assemble a sequence of experiments .
2763	Unsets the qiskit logger .
2764	Plot a HINTON state .
2765	Compute the fidelity of two channels .
2766	Input data to the lexer .
2767	Remove the qasm line from the stack .
2768	Push a file to the stack .
2769	Run DAGCircuit on the given dag .
2770	Returns the bound method for the given instruction .
2771	Convert acquire command to QobjMeasurementOption
2772	Convert a frame change instruction to a Qobj object .
2773	Convert a persistent value .
2774	Convert a drive to a Qobj object .
2775	Convert snapshot to Qobj model .
2776	Updates the annotations of a discretized pulse .
2777	Generate a sampler for a continuous pulse .
2778	Filter backends based on a set of criteria .
2779	Resolve a backend name .
2780	Convert a dag to a circuit .
2781	Make a dict observable from a matrix .
2782	Update the symtab .
2783	Verify that an object is declared as a bit in the gate .
2784	Verify a list of expressions .
2785	Verify that an object is used as a gate or opaque call .
2786	Verify that the given object_type is a valid regex .
2787	Verify a list of registers .
2788	Find a column in the input string .
2789	Parse a debug value .
2790	Parse the given data into a QASM object .
2791	Run the parser .
2792	Parse the QASM file .
2793	Create a new CrzGate .
2794	Compute the basis state of a string .
2795	Convert a state into a density matrix .
2796	Return the purity of a state .
2797	Run the computation on the given dag .
2798	Create a widget for the given backend .
2799	Update the backend information .
2800	Generate the job pending widget .
2801	Returns a list of run objects for the given dag .
2802	Returns the backend matching the criteria .
2803	Returns the bipartite shape of the input and output dimensions .
2804	Iterate over a list of bit_labels and yield register specifications .
2805	Truncate a float .
2806	Generate a beamer page in latex format .
2807	Get the depth of the image .
2808	Get the beamer page .
2809	Load a schema from a file .
2810	Get a validator for a schema .
2811	Load schemas and validaters .
2812	Validate a JSON dictionary against a schema .
2813	Formats a python error message .
2814	Returns the majority of points in a b c .
2815	Returns the unmajority of a b c .
2816	Generate a LaTeX source for a circuit .
2817	Draw a circuit using Matplotlib .
2818	Generate a random unitary dimension .
2819	Generate a random density matrix .
2820	Generate a ginibre matrix .
2821	Generates a random density HSS .
2822	Generate a random density BURE matrix .
2823	Returns a list of all custom callables .
2824	Returns the power of a matrix .
2825	Compose a subsystem .
2826	Convert a QuantumCircuit instruction to a SuperOp .
2827	Run the barrier layer on the given dag .
2828	Serialize a list of circuits into a qobj .
2829	Decompose a 3Q or more gates into a DAGCircuit .
2830	Run DAGCircuit on the given dag .
2831	Defines the U3Gate .
2832	Checks that the value is of the given type .
2833	Check the type of the given value .
2834	Sets the atol of this Qiskit .
2835	Sets the RTOL of this Qiskit .
2836	Reshape input_dims and output_dims .
2837	Returns a tuple of input dimensions .
2838	Returns a tuple of the output dimensions .
2839	Returns a copy of this object .
2840	Returns a copy of this Qiskit with powers n .
2841	Returns a tuple of the dimensions of a Qiskit .
2842	Compute the imsum of a matrix .
2843	Deserialize a value .
2844	Validate and serialize the data .
2845	Checks that the given value is of the correct type .
2846	Compute the fidelity of two states .
2847	Compute the svd of a function func .
2848	Return the inverse of this Snapshot .
2849	Sets the label .
2850	Returns True if the operation is unitary .
2851	Converts this object to an Operator .
2852	Converts this QuantumChannel to an Instruction .
2853	Initialize a transformer .
2854	Sort an enum for a model .
2855	Patch _strptime . calendar . day_abbr .
2856	Returns an OrderedDict mapping languages to locales .
2857	Get a list of locales .
2858	Checks if the given tokens are valid .
2859	Split a string into a list of strings .
2860	Parse a date string .
2861	Parse a time string .
2862	Returns True if the given date_string is valid .
2863	Translate date_string to datetime . txt .
2864	Parse a string with a list of date formats .
2865	Gets the ammo generator for this stepper .
2866	Convert a Java exception to a 3 - tuple .
2867	Convert a JMeter exception to an HTTP exception .
2868	Read configuration from config file .
2869	Compose a config string .
2870	Get information about the stream .
2871	Compose the STPD file .
2872	Log stdout and stderr .
2873	Expand a time string by a specified number of times .
2874	Reads the config from the OPTION_AMMOFILE .
2875	Prepare stepper information .
2876	Returns the filename of the STPD file .
2877	Read the cached stepper info file .
2878	Write cached options to the si file .
2879	Make the stpd file .
2880	Create a new RPS schedule .
2881	Return the rps at time t .
2882	Execute a shell command .
2883	Decode monitoring data into a list of points .
2884	Make a list of points for a given label .
2885	Publish a value to the database .
2886	Count the number of codes that match a regex .
2887	Stop the task queue .
2888	Feed all killer tasks .
2889	Initialize logging .
2890	Add user options .
2891	Configure the lock .
2892	Shutdown gracefully .
2893	Collect data from the queue .
2894	Notify all listeners of aggregated data .
2895	Returns a marker of the given type .
2896	Parse a duration string .
2897	Start the agent .
2898	Start the agent .
2899	Discover the JMeter UDP port .
2900	Add jmeter components to a JMX .
2901	Terminate the process .
2902	Read data from a list of lines .
2903	Create a criterion from a string .
2904	Load monitoring config from XML file .
2905	Create an agent startup config file .
2906	Check disk usage .
2907	Checks if there is enough memory available .
2908	Get the terminal size .
2909	Returns the right line for the given widget output .
2910	Truncate line_arr to max_width .
2911	Render the left panel .
2912	Render the screen .
2913	Add a widget to the list of info widgets .
2914	Fill a rectangle with the prepared lines .
2915	Returns the length of a line .
2916	Create a LoadPlanBuilder .
2917	Returns a string representation of the level .
2918	Add a widget to the screen .
2919	Make a request to the writer .
2920	Load plugins from config . plugins .
2921	Returns the plugin of the given type .
2922	Returns a list of plugins of the specified type .
2923	Collect artifacts from a file .
2924	Add an artifact file to the collection .
2925	Create a temporary file with the given suffix and prefix .
2926	Load configuration files .
2927	Flush the configuration to a file .
2928	Returns a list of options for a given section .
2929	Return a list of all sections starting with the given prefix .
2930	Decode a chunk of statistics .
2931	Returns the cached info .
2932	Install the monitoring agent .
2933	Collect data from all agents and send it to the server .
2934	Sends collected data to all listeners .
2935	Detect the telegraf and monitoring configurations .
2936	Handle data items .
2937	Decode agent data from a JSON block .
2938	Subscribe to a list of channels .
2939	Run asynchronously .
2940	Close the window .
2941	Make one HTTP request .
2942	Submit an order .
2943	Get an order by ID .
2944	Returns the current position of a symbol .
2945	Returns a list of Asset objects .
2946	Returns the Asset for the given symbol .
2947	Create a joining subplan for a pipeline .
2948	Returns obj if param_name is a dict .
2949	Check if obj is a dict .
2950	Construct an event - logger .
2951	Construct a json - event - record - logger .
2952	Create a Config object from a file .
2953	Returns the config for a given repository .
2954	Format a config string for graphql .
2955	Get a pipeline by name .
2956	Returns a list of all pipelines .
2957	Get the next event from a queue .
2958	Execute a pipeline through a queue .
2959	Join the Semaphore process .
2960	Returns a FieldImpl for a given dagster type .
2961	Build an ExecutionPlan from the given pipeline definition .
2962	Build a pipeline .
2963	Build a sub - pipeline .
2964	Returns a dict of solids with the given name .
2965	Construct a list of publish commands .
2966	Release a new version .
2967	Passthrough a PipelineContextDefinition .
2968	Decorator to create an input selector schema .
2969	Decorator to create an output selector schema .
2970	Create a block of text .
2971	Download the contents of the target file from S3 .
2972	Upload a file to S3 .
2973	Construct a DagsterError from a user code error .
2974	Make a directory if it doesn t exist .
2975	Creates a context manager for a user code error .
2976	Create a DagsterLog for a context free pipeline .
2977	Returns a boolean indicating whether the step was successful or not .
2978	Returns a list of all STEP_SKIPPED events .
2979	Returns the transformed values .
2980	Returns the transformed value .
2981	Returns the data for a step failure .
2982	Returns a PermissiveDict .
2983	Check if config value is a valid dataset .
2984	Check if config_value is a valid table .
2985	Execute a core transform .
2986	Create a dagster type .
2987	Returns a ResourceDefinition .
2988	Create an EventV2 event .
2989	Returns an OrderedDict containing the topological steps of the execution plan .
2990	Get the connection params .
2991	Create a new connection to the database .
2992	Create a cursor .
2993	Closes the connection to the database .
2994	Make a model from a dictionary .
2995	Convert value to a list of python objects .
2996	Returns a form field .
2997	Convert value to a python object .
2998	Apply the filters to the given queryset .
2999	Compute nfps uniformly .
3000	Compute np . zeros from counts and sizes .
3001	Compute the best partitions for a given number of parts .
3002	Compute the optimal number of partitions .
3003	Calculate the difference between a1 and a2 .
3004	Initializes the slots .
3005	Returns the byte size of this object in bytes .
3006	Serialize this MinHash into a bytestring .
3007	Deserialize a bytestring into a bytestring .
3008	Updates the hash function for b .
3009	Merge this MinHash with another MinHash
3010	Create a new MinHash from a list of MinHashes .
3011	Index a set of entries .
3012	Query the indexes with the given minhash and size .
3013	Returns the minimum hash of a vector .
3014	Remove a key from the hash table .
3015	Update the hash of b .
3016	Returns the number of non - zeros in the matrix .
3017	Merge another HyperLogLogLog with this one .
3018	Clears the grid .
3019	Calculate apk between actual and predicted .
3020	Calculate the k - tuple between actual and predicted .
3021	Returns the index of the hashtables .
3022	Given a minhash and a k - value return a list of results .
3023	Close the hash table .
3024	Returns an ordered list storage .
3025	Given a config return a DictSetStorage .
3026	Returns a JWTUserDetailsSerializer for the given user .
3027	Override get_social_login to add CONNECT to the state .
3028	Select text from a list of strings .
3029	Parse a scoped selector .
3030	Parse a single statement .
3031	Parse a value .
3032	Advance one line .
3033	Parse a configuration reference .
3034	Adds a message to an exception and raises it .
3035	Markdownify an operative config string .
3036	Run a gin file after creating a session .
3037	Ensure a function is wrappable .
3038	Decorate a function or class .
3039	Formats a value to a literal .
3040	Clears the current configuration .
3041	Bind a parameter to a Gin config .
3042	Query the binding key for a parameter .
3043	Check if fn_or_cls has a parameter .
3044	Returns a cached version of a function s argument specification .
3045	Returns a list of positional parameter names supplied by a function .
3046	Get all positional parameter names for a function .
3047	Returns a dictionary containing the default values of a configuration parameter .
3048	Validate a config scope .
3049	Make a function configurable .
3050	Format an operative config string .
3051	Parse a config file .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse config files and bindings .
3055	Parse a string value .
3056	Finalize the config .
3057	Iterate over flattened values .
3058	Iterate over all references in a configuration .
3059	Sets the value of a constant .
3060	Convert an enum class to a list of constants .
3061	Returns a list of selectors matching the given partial selector .
3062	Returns a list of all matches matching the partial selector .
3063	Returns the minimal selector for the given complete selector .
3064	Return a string representation of a search query .
3065	Parse Retry - After header .
3066	Validate the value against the metadata .
3067	Return a copy of the metadata as a property description .
3068	Validate and set the value .
3069	Returns the thing at idx .
3070	Initialize things and hosts .
3071	Set default headers .
3072	Prepare the HTTP request .
3073	Get a single thing .
3074	Called when a message is received from the server .
3075	Performs a POST request to a thing .
3076	Delete a thing .
3077	Start the webthing service .
3078	Return the action s description as a dictionary .
3079	Starts the process .
3080	Called when the task is finished .
3081	Returns a description of the event .
3082	Get the IP address of the device .
3083	Returns a list of IPv4 and IPv6 addresses .
3084	Set the value .
3085	Emits a notification of an external update .
3086	Returns a description of the thing .
3087	Sets the href prefix of all properties and actions .
3088	Returns a dictionary describing all the properties of this object .
3089	Returns a list of action descriptions .
3090	Returns a list of event descriptions for the given event name .
3091	Add a property to the list of properties .
3092	Removes a property from this object .
3093	Get the value of a property .
3094	Returns a dict of the properties of this object .
3095	Set the value of a property .
3096	Return the action with the given name and ID .
3097	Add an event to the event list .
3098	Add an available event to the list of available events .
3099	Perform an action .
3100	Remove an action by name and ID .
3101	Add a new available action .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Notify all subscribers of a property .
3106	Notify all subscribers of an action .
3107	Notify subscribers of an event .
3108	Add annotations to the model .
3109	Updates the database with the given fields .
3110	Bulk insert rows into the database .
3111	Add a new field to the database .
3112	Creates a new model and inserts it into the database .
3113	Build an insert compiler for a list of rows .
3114	Check if a field is a magic field .
3115	Returns a list of fields to insert and update .
3116	Called when a model is saved .
3117	Called when a model is deleted .
3118	Returns True if one or more fields are not None .
3119	Resolve an expression .
3120	Returns a string representation of the object as SQL .
3121	Returns a clone of this object with the given relabels .
3122	Add join conditions to the table .
3123	Returns True if field_name is an instance of HStoreField .
3124	Insert and update a list of objects .
3125	Create a required hstore .
3126	Rename a hstore required table .
3127	Drop a hstore required constraint .
3128	Return the required constraint name .
3129	Create a SQL statement .
3130	Create a custom command .
3131	Returns the base class for the Postgres database backend .
3132	Create hstore extension if it does not exist .
3133	Converts a dict or list into a dict .
3134	Returns the RETURNING form for this query .
3135	Returns a list of SQL queries .
3136	Rewrite an insert statement .
3137	Rewrites the SQL statement for insert_update .
3138	Rewrite insert_nothing clause .
3139	Builds the conflict target for the query .
3140	Returns the model field with the given name .
3141	Formats a field name .
3142	Formats the value of a field .
3143	Create a unique hstore constraint .
3144	Rename a hstore unique name .
3145	Drop an hstore unique constraint .
3146	Generate a unique constraint name for a table .
3147	Iterate over uniqueness keys .
3148	Add a condition to a field .
3149	Convert the table to a SQL statement .
3150	Returns the T - Distance 95 Conf level of a DataFrame .
3151	Calculate the pooled variance of two samples .
3152	Compute the t - score between two samples .
3153	Check if two samples are significant .
3154	Given a list of roots and a list of getParents return a list of topologically similar nodes .
3155	Return a generator that yields the number of queens in a list .
3156	Play a board .
3157	Select a board from the unexplored list .
3158	Play a random game .
3159	Filter out benchmarks that are not compatible with base_ver .
3160	Given a bench group name and a list of bench groups expand the name of that bench group .
3161	Generate a string table .
3162	Initialize a list of benchmarks .
3163	Returns a tuple with the knot degree and the number of knots .
3164	Fetch messages of a channel .
3165	Parse the raw_posts and yield a list of posts .
3166	Get information about a user .
3167	Fetch a list of items from the database .
3168	Fetch rss entries from feed .
3169	Setup the command parser .
3170	Fetch items from the database .
3171	Get a list of bugs .
3172	Get comments for a list of bug_ids .
3173	Get the history of the given bug_ids .
3174	Retrieve attachments for a list of bug ids .
3175	Returns a list of notes for the given issue .
3176	Fetch all merge requests .
3177	Returns a list of notes for a given merge .
3178	Returns a list of versions for a given merge .
3179	Returns a list of all merged items .
3180	Merge multiple projects .
3181	Fetch all versions of a merge .
3182	Merge a GitLab version .
3183	Fetch a list of notes for an item .
3184	Fetch emojis for an item .
3185	Fetch note emojis .
3186	Calculate time to reset rate limit .
3187	Fetch items from GitLab .
3188	Initialize the rate limit .
3189	Setup the command parser .
3190	Fetch a message by category .
3191	Returns the metadata id for the given item .
3192	Get the members of a conversation .
3193	Get channel information .
3194	Fetches information about a user .
3195	Setup the command parser .
3196	Returns a timestamp of the metadata updated on the given item .
3197	Parse a raw csv file and yield a list of rows .
3198	Parse XML and yield bug details .
3199	Parse an HTML table of bug activity .
3200	Logs out of Bugzilla .
3201	Returns the XML - formatted metadata .
3202	Returns a list of all bugs .
3203	Get a list of bug ids
3204	Get the activity of a bug .
3205	Fetch a list of events .
3206	Fetch events of a group .
3207	List events in a group .
3208	Returns a generator yielding all the comments for the given event .
3209	Get a list of RRSVPS from a group .
3210	Fetches an html question from the server .
3211	Fetch the comments for a question .
3212	Build a question object from an HTML question .
3213	Returns a generator of questions from the API .
3214	Fetch the HTML question for the given question_id .
3215	Get comments for a given post .
3216	Parse a question container .
3217	Parse an html question .
3218	Parse number of HTML pages .
3219	Parse user info .
3220	Fetch items from Gerrit .
3221	Parse reviews from a JSON string .
3222	Fetch Gerrit28 data from the server .
3223	Get the version of Gerrit .
3224	Get the reviews for a given item .
3225	Retrieve the next item from a group entry .
3226	Execute a command from the archive .
3227	Execute a command from an archive .
3228	Execute a Gerrit command from a remote machine .
3229	Setup the command parser .
3230	Fetches the data for an issue .
3231	Fetch attachments for an issue .
3232	Fetches all the messages for an issue .
3233	Fetches all activities for an issue .
3234	Fetch user data .
3235	Get information about a user .
3236	Get information about an issue .
3237	Get a single bug collection for an issue .
3238	Returns the url for this project .
3239	Fetch items from a given path .
3240	Get groupsio paginated subscriptions .
3241	Find the group_id for this group .
3242	Perform a HTTP GET request .
3243	Setup the command parser .
3244	Generate a UUID .
3245	Fetch items from backend_class .
3246	Fetch items from an archive .
3247	Find all backends for a given top package .
3248	Fetch items for a given category .
3249	Fetch metadata from an archive .
3250	Filter classified data .
3251	Parse command line arguments .
3252	Add authentication arguments to the parser .
3253	Sets the arguments for the archive command .
3254	Sets the output arguments .
3255	Fetch items from the archive .
3256	Initializes the archive manager .
3257	Returns the timestamp of the metadata update for the given item .
3258	Parse a MBox from a file .
3259	Fetch and parse messages from a mailing list .
3260	Copy the contents of a mbox to a temporary file .
3261	Validate a message .
3262	Convert a case dictionary to a dict .
3263	Get a message from a mailbox .
3264	Fetch a list of items from the database .
3265	Fetch items from the repository .
3266	Parse a git log from a file .
3267	Pre - initialize git path .
3268	Setup the command parser .
3269	Parse the stream .
3270	Clone a git repository .
3271	Count the number of objects in the repository .
3272	Returns True if the repository is detached .
3273	Update this repository .
3274	Sync this Git repository with another Git repository .
3275	Get the rev - list for this repository .
3276	Logs the current state of the repository .
3277	Run the git show command .
3278	Fetch a pack from the dulwich server .
3279	Read commits from a git packet .
3280	Update a list of references .
3281	Returns a list of git references .
3282	Update a git ref .
3283	Execute a command in a subprocess .
3284	Read stderr .
3285	Execute a command in a subprocess .
3286	Fetch a list of tweets .
3287	Fetch a list of tweets .
3288	Get a list of tweets for a given query .
3289	Setup the command parser .
3290	Fetch a list of items by category .
3291	Fetch all items in a category .
3292	Parse hits . json .
3293	Returns a list of hits for the given keywords .
3294	Returns the timestamp of the last time an item was updated .
3295	Returns the metadata category for the given item .
3296	Fetch pull requests for a given date range .
3297	Fetch repo info .
3298	Returns a list of all reactions for the given issue number .
3299	Get the reactions for an issue comment .
3300	Returns a list of issue assignees .
3301	Gets the list of reviewers to pull .
3302	Returns a list of pull commits .
3303	Returns a list of reactions for a pull review comment .
3304	Get the user object for the given login .
3305	Fetch all the reactions for an issue .
3306	Fetch a list of issues .
3307	Iterate over the pulls for this repository .
3308	Returns a string representation of the repository .
3309	Pulls a list of reviewers for a given PR number .
3310	Retrieves a list of commits for a particular PR .
3311	Returns a list of reactions for a pull review comment .
3312	Get a user by login .
3313	Get orgs for a user on github .
3314	Get the rate limit for a given token .
3315	Returns the rate limits for all tokens .
3316	Chooses the best API token based on the current rate limit .
3317	Returns True if we need to check the number of tokens .
3318	Update the rate limit .
3319	Initialize the metadata table .
3320	Store data in the database .
3321	Retrieve an entry from the database .
3322	Create a new archive .
3323	Make a hashcode from a URI and a list of headers .
3324	Verify the existence of the archive .
3325	Load metadata infomation of archive .
3326	Returns the number of rows in a table .
3327	Create a new archive .
3328	Remove an archive .
3329	Search archives .
3330	Returns a generator yielding a list of Archive objects .
3331	Returns a generator yielding all files in the directory .
3332	Check if a file is compressed .
3333	Yields a list of months between two dates .
3334	Convert an email message to a dictionary .
3335	Removes all illegal characters from an xml string .
3336	Convert XML to a dict .
3337	Parse issues from a JSON string .
3338	Returns a list of issues .
3339	Get information about an issue .
3340	Get information about a user .
3341	Call the Redmine API .
3342	Fetch data from DockerHub .
3343	Fetch items from a repository .
3344	Fetch information about a repository .
3345	Map a custom field to a list of custom fields .
3346	Filter custom fields .
3347	Parse issues from a json page .
3348	Get a list of items from a URL .
3349	Get all issues for a given date .
3350	Get all comments for an issue .
3351	Returns a list of fields from the API .
3352	Fetch items from the database .
3353	Returns a list of jobs .
3354	Get details about a specific build .
3355	Parse questions from a json page .
3356	Returns a generator of questions .
3357	Setup the command parser .
3358	Fetch items from MediaWiki .
3359	Get the maximum timestamp for a list of reviews .
3360	Fetch 1 - 27 pages .
3361	Get all pages in a namespace .
3362	Returns a list of recent pages in a namespace .
3363	Fetch a message from the server .
3364	Parse a list of messages from a JSON file .
3365	Filter a message by chats .
3366	Calls the UPDATES_METHOD API endpoint .
3367	Fetch the articles of the given category .
3368	Return the metadata for the given item .
3369	Parse an email article .
3370	Fetch data from the server .
3371	Fetch a single article .
3372	Fetch data from a remote handler .
3373	Fetch data from an archive .
3374	Creates a requests . Session object and mounts it .
3375	Sets up the rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit for a response .
3378	Parse a supybot log file
3379	Retrieve a list of supybot archives .
3380	Return a list of supybot archive locations .
3381	Parse the SUPYBOT stream .
3382	Parse a SUPYBOT_TIMESTAMP_REGEX line and return the timestamp and message .
3383	Parse a supybot message .
3384	Fetch all topics in a category .
3385	Parse the topics page .
3386	Get information about a topic .
3387	Send a POST request .
3388	Fetch all the items in a category .
3389	Parse a list of tasks from a JSON file .
3390	Parse user data from a JSON file .
3391	Iterate over the MANIPHEST_TASKS object .
3392	Get a list of transactions for the specified phids .
3393	Get a list of users with phids .
3394	Get a list of phids .
3395	Calls the given method with the given parameters .
3396	Return the metadata id of an item .
3397	Parse the contents summary from a JSON file .
3398	Returns a generator that yields the contents of the resource .
3399	Returns the historical content for a given content_id and version .
3400	Parse the result of the test .
3401	Returns the capabilities URL for a given service URL .
3402	Read an etree from a URL .
3403	Read an ElementTree from a string .
3404	Parse the result and return a MeasurementTimeseries
3405	Build a url from a query string .
3406	Returns a list of all elements of a complex type .
3407	Construct a schema from a list of elements .
3408	Get the description of a feature type from a URL .
3409	Performs a complex input with a reference .
3410	Get a list of movies .
3411	Get a list of TVs .
3412	Get a list of movies .
3413	Get information about a user .
3414	Get alternative titles .
3415	Returns a list of credits .
3416	Get external ids .
3417	Get a list of keywords .
3418	Returns a list of recommendations .
3419	Get a list of release dates .
3420	Get a list of releases .
3421	Get a list of translations .
3422	Get a list of similar movies .
3423	Get a list of reviews .
3424	Get a list of changes .
3425	Get a list of upcoming events .
3426	Check if the player is currently playing .
3427	Returns a list of popular URLs .
3428	Get a list of top rated services .
3429	Returns a list of the current account states .
3430	Get a rating for a user .
3431	Get movie credits .
3432	Get credits for a TV .
3433	Get credit information .
3434	Get information about a TV .
3435	Get information about a resource .
3436	Get a list of movies .
3437	Get information about the session .
3438	Get a list of movies in your watchlist .
3439	Create a new token .
3440	Validate a token with a login .
3441	Create a new session .
3442	Create a new guest session .
3443	Get a list of movies rated by the user .
3444	Get the status of an item .
3445	Create a new list .
3446	Remove a media item .
3447	Clear a list .
3448	Returns a list of the user s content ratings .
3449	Returns a list of objects that are similar to this object .
3450	Get on - the - air information .
3451	Get information about a season .
3452	Retrieve credits for a series .
3453	Returns a list of external ids .
3454	Get information about a series .
3455	Retrieve credits for a series .
3456	Get all external ids for a season .
3457	Set the attributes of the object to the values of the response .
3458	Get information about a movie .
3459	Get information about a collection .
3460	Get information about a TV .
3461	Get information about a person .
3462	Get information about a company .
3463	Get a specific keyword from the API .
3464	Performs a multi - step GET request .
3465	Normalize a string into a list of strings .
3466	Takes a list of refs and returns the number of refs and the maximum number of refs .
3467	Cook a reference set .
3468	Calculate the erfcc of x .
3469	Align source and target texts .
3470	r Returns a generator of all descriptors in a module .
3471	Register a Descriptor from a JSON string .
3472	r Registers a scene .
3473	Print progress bar to stdout .
3474	r Checks if a descriptor is a class .
3475	Returns a JSON representation of the object .
3476	Returns the coordinate of the 2D descriptor .
3477	r Calculate the atomic mass at i .
3478	r Returns the surface area of the molecule .
3479	r Construct an Atom from a molecule .
3480	Creates a ConstDescriptor object from a JSON string .
3481	r Fill missing values in the molecule .
3482	r Drop missing values .
3483	r Returns a tuple of the keys and values .
3484	r Return a dict representation of the object .
3485	r Returns the name of the descriptor .
3486	Logs the number of calls to a function .
3487	A decorator to ensure that a function is synchronized .
3488	Print a progress message to stdout .
3489	Print a message to stdout .
3490	Fail with a message .
3491	Get a temporary file from a target .
3492	Set a tempfile to a target .
3493	Remove all TEMP_FILES files .
3494	Returns a fixed path to the file .
3495	Returns a list of legal parameters for the given method .
3496	Merge legal_params legal_params and kargs .
3497	Add options to the parser .
3498	Terminate the task .
3499	Add a task to the queue .
3500	Join all the workers .
3501	Return a boolean indicating how many tasks have been processed .
3502	Read S3 keys from environment variables .
3503	Read S3 keys from the command line .
3504	Read S3 keys from s3cfg file .
3505	Initialize S3 keys .
3506	Connect to S3 .
3507	List all S3 buckets .
3508	Run s3walk on a directory .
3509	Returns a list of all files in the given basedir .
3510	Expand a source .
3511	Upload a single file to the pool .
3512	Put files from source to target .
3513	Create a new S3 bucket .
3514	Updates the privilege of an object .
3515	Print a list of files to S3 .
3516	Download a single file from the pool .
3517	Get a list of files from source to target .
3518	Copy a single file from source to target .
3519	Copy files from source to target .
3520	Delete all files in source .
3521	Returns a list of paths that are relative to dir .
3522	Sync files from source to target .
3523	Returns the MD5 hash of a file .
3524	Returns the MD5 of the file .
3525	Create a directory if it doesn t exist
3526	Check if md5cache and remoteKey match .
3527	Return True if the given path matches the given filter path .
3528	Performs a s3walk search and returns the result .
3529	Add a new object to the result if it is a file or directory .
3530	Returns the privilege of a file .
3531	Return the head object of the given S3 URL .
3532	Read a chunk from a file .
3533	Upload a file from source to target .
3534	Verify that the size of the downloaded file is consistent .
3535	Write a chunk of data to a file .
3536	Copy an object from one S3 source to another .
3537	Run a command .
3538	Validate command - line arguments .
3539	Return a string representation of a list of objects .
3540	Handle a list of buckets .
3541	Create an S3 bucket .
3542	Execute the s3 handler .
3543	Get s3 file handler .
3544	Calls the cat handler .
3545	Handle s3 dsync commands
3546	Executes a cp_files command .
3547	Handle mv files .
3548	Delete a file handler .
3549	Handle s3 handlers .
3550	The total size handler .
3551	Matches a date .
3552	Matches a time .
3553	Return a datetime . timedelta object matching the given value .
3554	Check if a dict value is valid .
3555	Discover Xiaomi gateways .
3556	Creates a multicast socket and listens to messages .
3557	Get data from a hub .
3558	Push data to the callbacks .
3559	Returns a ciphertext key .
3560	Handle exceptions from a job .
3561	Adds a tween to the rollbar .
3562	Ensure we have a logging handler .
3563	Get a request from the API .
3564	Initialize the Rollbar .
3565	Decorator for lambda functions .
3566	Report a message to Rollbar .
3567	Returns a list of items matching the search criteria .
3568	Create the agent log file .
3569	Builds a person object from a request .
3570	Add lambda context data .
3571	Add the request data to the request data .
3572	Check if add_locals is allowed in SETTINGS .
3573	Builds the data for a request .
3574	Build the server data dictionary .
3575	Build a payload from a dictionary .
3576	Run the server .
3577	Compose chosung and joongsung characters .
3578	Decompose a Hangul letter into a string .
3579	Returns True if the given letter is a jongsung character .
3580	Attach a word to a string .
3581	Check if a node is inside an except .
3582	Check if a node is inside a Lambda .
3583	Returns an iterator over all elements of a node .
3584	Return True if the given node is clobbering .
3585	Check if a node is a super node .
3586	Check if a node is an error .
3587	Check if a node is a default argument .
3588	Check if a node is a function decorator .
3589	Check if a node is an ancestor name of another node .
3590	Assign a parent to a node .
3591	Returns a function that checks messages .
3592	Returns an iterable of fields from a format string .
3593	Get an argument from a call node .
3594	Check if a node inherits from a standard expression .
3595	Returns a boolean indicating whether the error is of the given type .
3596	Check if a function is decorated with a property .
3597	Check if a function is decorated with the given qnames .
3598	Finds the ASTroid . ExceptHandler and ASTroid . TryExcept node for the given node .
3599	Check if a node is a fallback block .
3600	Returns a list of exception handlers for the given node .
3601	Check if a node ignores an exception .
3602	Check if a class is abstract .
3603	Safely infer the value of a node .
3604	Return the type of a node .
3605	Check if the node is registered in a singledispatch function .
3606	Check if a node is postponed evaluation enabled .
3607	Return a list of qualified names for a modname .
3608	Returns the import name for the given import node and module .
3609	Return a list of string representations of a tree .
3610	Write a dependency graph to a file .
3611	Visit an import node .
3612	Visit an import from node .
3613	Check if the position of the node is correct .
3614	Record an import .
3615	Checks if imports are in order .
3616	Check if relative import is enabled .
3617	Adds an imported module to this node .
3618	Check if a module is deprecated .
3619	Check if a module is in preferred_modules .
3620	Report external dependencies .
3621	Returns a dict of importers that depend on the given internal or external package .
3622	Returns a list of the default options .
3623	Insert default options .
3624	Show the attribute of a node .
3625	Get the callbacks for the given node .
3626	visit a node by returning a new instance of it
3627	Checks the consistency of the message ids .
3628	Visit a call node .
3629	Check if the given node is a datetime . time .
3630	Check if the node is in open mode .
3631	Handle a message .
3632	Print messages to a JSON file .
3633	Get the title of a node .
3634	Set the default options based on the configuration .
3635	Returns True if the given node is a builtin .
3636	Add a class to the graph .
3637	Get the ancestors of the given node at the given level .
3638	Returns an iterator over the nodes that are associated with the given class .
3639	Extract classes from a node .
3640	Leave a project .
3641	Add an import from node to the list of dependencies .
3642	Returns the class diagram for a given class .
3643	Returns a list of class diagrams for the given project and linker .
3644	Returns True if owner is ignored .
3645	Returns a list of node names that are similar to the given attrname .
3646	Emits a node if it does not have a member .
3647	Check if a node has a parent of a given type .
3648	Returns True if name is used as a variable in any of the variadics .
3649	Given a node and a variadic name and a list of variadics return a node . statement .
3650	Visit an attribute node and return a list of its members .
3651	Visit an assign node .
3652	Check if a call is uninferable .
3653	Visit a UniaryOp node .
3654	Iterate over all interfaces of a node .
3655	Create a project from a list of files .
3656	visit a package node by returning a fresh instance of it
3657	Visit a functiondef node and generate its id .
3658	visit a node by returning a fresh instance of it
3659	Handle assignattr type .
3660	Visit an import node and check if it is relative .
3661	Attempt to import a module from a context file .
3662	Compute the module name for the given context name and path .
3663	Import a module from a node .
3664	Return an ANSI code string .
3665	Colorize an ANSI message .
3666	Registers the parser and VSTextReporter .
3667	Handle a message .
3668	Print the output to a text file .
3669	Handle a message .
3670	Write a graph to the stream .
3671	Write a node to the stream .
3672	Write an edge between two nodes .
3673	Check if a new format method is available .
3674	Process a non - raw string token .
3675	Visit a section .
3676	Visit the evaluation section .
3677	Visit a table and write it to the file .
3678	Write a default table to the file .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a new message .
3682	Check if a symbol is a valid alternative message .
3683	Raise InvalidMessageError if message id cannot have both symbol and other_symbol .
3684	Raise InvalidMessageError if symbol and other_msgid are used at the same time .
3685	Returns the message definitions for the given message id or symbol .
3686	Returns a string representation of a message .
3687	Print help message for given msgids .
3688	List all messages .
3689	Builds the pylint . extensions . rst and pylint . extensions .
3690	Return the number of CPUs in the system .
3691	Report the stats for a section of messages .
3692	Fix python import path .
3693	Load a list of modules from a list of modules .
3694	Loads the configuration of the dynamic plugins .
3695	Set the value of an option .
3696	Register a checker .
3697	Disable all reports .
3698	Configure python3 porting mode .
3699	Returns a list of checkers .
3700	Returns a sorted list of checker names .
3701	Prepares the list of checkers to be used .
3702	Expand a list of files .
3703	Set the current module .
3704	Checks an astroid module .
3705	Report evaluation of code .
3706	Display a help message .
3707	Print full documentation .
3708	List messages in the message store .
3709	List all linter groups .
3710	Normalize text .
3711	Returns the module and frameid of the given node .
3712	Safely decode a line .
3713	Check if base_name is in blacklist_re .
3714	Register all plugins in a directory .
3715	Return a comment from a string .
3716	Return a string representation of an option value .
3717	Format a section of a file .
3718	Format an ini file - like object .
3719	Insert a child at the given index .
3720	Add a child node to this node .
3721	The parents of this node .
3722	Format the stdout with the given layout .
3723	Get the content of a table .
3724	Compute the content of a layout .
3725	Collect block lines from the message store at the given module node .
3726	Handle an ignored message .
3727	Register a report with the checker .
3728	Create a report section for each report checker .
3729	Add stats to self . stats
3730	Returns the setter property name of a node .
3731	Returns the setter property of a node .
3732	Checks if the return_node is a Const and returns a value .
3733	Return a list of possible exception types for the given node .
3734	Processes a module .
3735	Process a module .
3736	Process a list of tokens .
3737	Check if the given statement is from a future import .
3738	Returns True if stmt is in the For or else branch of parent .
3739	Returns the overridden method with the given name .
3740	Return the unpacking info for the given infered node .
3741	Detect the global scope of a node .
3742	Returns True if name_node is assigned locally .
3743	Mark a node as consumed .
3744	Visit a global node .
3745	Ignore the class scope of the given node .
3746	Check if a node has a homonym in the upper function scope .
3747	Check if infered is unpacking .
3748	Check the metaclasses of a node .
3749	Returns a list of packages in a directory .
3750	Install pylint .
3751	Runs the install .
3752	Returns a table of similarity statistics for a section .
3753	Run sys . argv .
3754	Append a line set to a stream .
3755	Compute the sims of the ensembles .
3756	Print a list of sims .
3757	Find common lines between two lines .
3758	Iterate over all sims .
3759	Iterate over the lines that have been stripped .
3760	Returns a dictionary containing the indices of the lines that have been skipped .
3761	Check if a definition is equivalent to a call .
3762	Check if an argument is equal to another .
3763	Check if the original parameter has a different default value .
3764	Returns a boolean representation of the original and overridden parameters .
3765	Safely infer the result of a call .
3766	Set the attrname of a node .
3767	Visit a classdef node .
3768	Check if the mro of the node is consistent .
3769	Check if a node inherits from any of its base classes .
3770	visit a FunctionDef node by returning a fresh instance of it
3771	Check if a function is a method or decorator .
3772	Leave a function node .
3773	Check if a node is in any of the slots .
3774	Visit a node by name .
3775	Check if members of a node have been accessed .
3776	Checks if the base class of the given node is abstract .
3777	Check if the signature of a method is valid .
3778	Check if a method parameter is mandatory .
3779	Check if a node is raising .
3780	Check if the given node has a bad exception context .
3781	visit a functiondef node by returning a fresh instance of it
3782	Displays the reports for a layout .
3783	Check if the node is a TYPING_NAMEDTUPLE node .
3784	Check if a node is an enum class .
3785	Check if the given node is a data class .
3786	Open the linter .
3787	Visit a classdef node .
3788	Leaves a class node .
3789	Visit a If node .
3790	Check if a node has too many boolean expressions .
3791	Check the docstring of a node .
3792	Returns a formatted version of the template .
3793	Check if a token is trailing comma .
3794	Returns True if the given node is an actual elif .
3795	Check if a node is a simple if .
3796	Check if a stop iteration occurred inside a generator .
3797	Check if an exception is inherited from a stopiteration .
3798	Check if raising stopiteration in generator next call .
3799	Check if a node is a nested function definition .
3800	Returns a set of duplicated isinstance_types objects .
3801	Check if consider - merging - isinstance is a valid argument .
3802	Check if a chained comparison is valid .
3803	Check if a node is an and or ternary .
3804	Checks if a node has consistent returns .
3805	Check if a node is returning or not .
3806	Visit a for node .
3807	Check if graphviz is available .
3808	Run the diadefs command .
3809	Write all the packages in a diagram .
3810	Write all classes in a diagram to the printer .
3811	Set the printer .
3812	Set the printer for the graph .
3813	Returns True if the file may be emitted .
3814	Formats the help message .
3815	Returns a dict of environment variables .
3816	Lint a python file .
3817	Run a python command .
3818	Get a list of cycles from a graph dict .
3819	Returns the source of the message .
3820	Generates a graph from the given output file .
3821	Format a section of a file .
3822	Registers a handler for a managed message .
3823	Disable a managed message .
3824	Enable a managed message .
3825	Return the symbol for the given message id .
3826	Check if a message is enabled .
3827	Add a message to the message store .
3828	Print the full documentation of Pylint .
3829	Print checker documentation .
3830	Return the length of the indentation of a line .
3831	Given a list of bar positions and a bad position return an indentation hint line .
3832	Indent the token at idx .
3833	Handle a line start .
3834	Returns a copy of idx and a copy of valid indentations .
3835	Returns a _ContinuedIndent for hanging after a bracket .
3836	Returns a ContinuationIndent for the given position inside the given bracket .
3837	Push a token onto the stack .
3838	Add a new line to the queue .
3839	Check keyword parentheses .
3840	Returns True if the token has a valid type annotation .
3841	Check if the tokens have equal spacing .
3842	Check if a token is surrounded by a space .
3843	Visit a node and check if it is a statement .
3844	Check if a line contains multiple statements .
3845	Check a list of lines .
3846	Check the indentation level of a string .
3847	Check if the given node is in an iterating context .
3848	Check if a node is a conditional import .
3849	Visit a node and add a message if it has a name .
3850	Visit a subscript node .
3851	Visit an xreadlines . Attribute node .
3852	Visit an except handler node .
3853	Visit a raise node .
3854	Find the path to pylintrc .
3855	Validate a value against an optdict .
3856	Expands the default value of the given option .
3857	Match a long option .
3858	Register an option provider .
3859	Set a provider option .
3860	Set the value of a global option .
3861	Generate a config file .
3862	Load the config file .
3863	Load a command line configuration .
3864	Add a help section .
3865	Returns a formatted help message .
3866	Load default values from options .
3867	Return the name of the option attribute .
3868	Returns the definition of an option in this section .
3869	Iterate over all options in a section .
3870	Check if a function is a method call .
3871	Check if a node is a complex format string .
3872	Visit a logging module .
3873	Visit an importfrom node .
3874	Add logging modules to the node s logs .
3875	Visit a call node and check if it is a logger .
3876	Check if the format_string is a valid format string .
3877	Check if a node is in a loop .
3878	Returns the parent of the break loop node .
3879	Returns True if the loop exits early .
3880	Get properties from a config file .
3881	Determine the type of function name for the given node .
3882	Report the stats for a given node type .
3883	Check if a node has been redefined by a given decorator .
3884	Check if a call is a call with only one argument .
3885	Visit a starred node .
3886	Check if a node is nonlocal and global .
3887	Visit a call node and check if it is abstract .
3888	Useless - else - on - loop .
3889	Check if a node is in the loop .
3890	Open the linter and add stats .
3891	Visit an expression node .
3892	visit a lambda node by returning a fresh instance of it
3893	Assert that the node is a tuple .
3894	visit a dict node and add keys
3895	Check if a node is unreachable .
3896	Check if a node is not in the final body .
3897	Check if a node is reversed .
3898	Visit the assignname node and check if it s a valid assignment .
3899	Check the name of a node .
3900	Check the docstring of a node .
3901	Check if a node is a literal comparison .
3902	Parse a sub - graph .
3903	Parse a subgraph .
3904	visit a module and add a message if it is too complex
3905	Add a checker .
3906	Walk an astroid .
3907	Add a relation between two objects .
3908	Get a relation from from_object .
3909	Returns a sorted list of attributes for the given node .
3910	Returns a list of methods for the given node .
3911	Add an object to the diagram .
3912	Returns a list of class names for the given nodes .
3913	Returns a list of all classes in this node .
3914	Return the class with the given name .
3915	Returns a list of all modules in this node .
3916	Return the module with the given name .
3917	Return the module with the given name and node .
3918	Adds from_module to node s dependencies .
3919	Delete this grant .
3920	Returns a query object for the given model .
3921	Get a user by username and password .
3922	Returns a query based on the access token or refresh token .
3923	Set a token .
3924	Set a grant for a given client .
3925	Get a client by code .
3926	Prepare a POST or GET request .
3927	Initialize the application .
3928	Create an OAuth remote app .
3929	Make a request to the API .
3930	Authorize a user with OAuth2 .
3931	Handle an OAuth1 response .
3932	Handle an OAuth2 response .
3933	Handle an authorized response .
3934	Decorator for authorized_response .
3935	Returns a hashed version of the given token .
3936	Create a client with the given token .
3937	Create a new OAuth client .
3938	Check if the transport is insecure .
3939	Confirm an authorization request .
3940	Decorator to create a request token response .
3941	Get the client secret for a given client key .
3942	Get request token secret .
3943	Get the secret of an access token .
3944	Get default realms for a client .
3945	Get the realms of the given token .
3946	Get the redirect uri for a given request token .
3947	Returns the rsa_key for the given client_key .
3948	Validate a client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate timestamp and nonce .
3952	Validate a request s redirect_uri .
3953	Validate a set of realms .
3954	Validate a request against a verifier .
3955	Verify a request token .
3956	Verify a list of realms .
3957	Save an access token .
3958	Save a request token .
3959	Save a verifier .
3960	Returns the OAuth error URI .
3961	Confirm authorization request .
3962	Verify a request .
3963	Get the client credentials from a request .
3964	Returns True if client authentication is required .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Returns the original scopes of the refresh token .
3968	Confirm the scopes for a refresh token .
3969	Returns the default redirect uri for the given client .
3970	Get the default scopes for a client .
3971	Invalidate an authorization code for a client .
3972	Save an authorization code for a client .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate a client ID .
3976	Validate a grant for the given code .
3977	Validate a grant type .
3978	Validate a refresh token .
3979	Validate a response type .
3980	Validate a set of scopes .
3981	Validate a username and password .
3982	Revoke an access token .
3983	Update QQ API request data .
3984	Convert a dictionary to a string .
3985	Change weibo header .
3986	Register a remote application with OAuth .
3987	Create a new remote application .
3988	Extract params from a request .
3989	Convert text to bytes .
3990	Decode base64 - encoded text .
3991	Create a response from headers body and status .
3992	Returns a list of cached clients .
3993	Add a remote application .
3994	Add a remote application .
3995	Check if there is an exception .
3996	Checks if all iterations are successful .
3997	Callback for loading a private key .
3998	Check if the load_privatekey callback is correct .
3999	Check if the load_privatekey callback is of the wrong type .
4000	Returns a list of Revoked objects .
4001	Check if X509_REVOKED_dup exists .
4002	Create a new X509Request with the given public key and digest .
4003	Creates a new certificate .
4004	Decorator to mark a function as required .
4005	Load verification locations from a file .
4006	Sets the default password callback .
4007	Use a certificate chain file .
4008	Sets the SSL_CTX to use a certificate file .
4009	Uses an X509 certificate .
4010	Add an extra chain certificate .
4011	Use a private key file .
4012	Use a private key .
4013	Load a client CA file .
4014	Sets the verification depth .
4015	Load a tmp DH file .
4016	Sets the cipher list .
4017	Sets the list of client CAs .
4018	Add a client CA .
4019	Sets the tlsext servername callback .
4020	Set the TLS extension to use srtp .
4021	Sets the NPN select callback .
4022	Set a list of alphanumeric protobufs .
4023	Sets the ALPN select callback .
4024	Sets the Ocsp callback .
4025	Set an OCSP server callback .
4026	Sets the callback for the OCS client .
4027	Sets the SSL context .
4028	Returns the server name .
4029	Set the TLS extension host name .
4030	Receive a message from the server .
4031	Read nbytes from the socket into a buffer .
4032	Read a biosocket from the socket .
4033	Renegotiate this connection .
4034	Shutdown the SSL connection .
4035	Returns a list of ciphers .
4036	Returns a list of client CAs .
4037	Set the shutdown state of the SSL connection .
4038	Get a random string from the server .
4039	Get a random client .
4040	Returns the master key for this connection .
4041	Export keying material .
4042	Gets the current SSL session .
4043	Get the current cipher name .
4044	Get the bit number of the current cipher .
4045	Get the current cipher version .
4046	Returns the protocol version name .
4047	Get next negotiated protocol .
4048	Set the alphanumeric protobuf .
4049	Returns the negotiated alpn protocol .
4050	Create a new membuf .
4051	Convert a bio to a string .
4052	Set the ASSN1 time .
4053	Returns the ASN1 time for a given timestamp .
4054	Returns the elliptic curve with the given name .
4055	Dump a public key to a buffer .
4056	Load a public key from a buffer .
4057	Sign a PKE with a digest .
4058	Verify a signature against an EVP .
4059	Dump an X509 CRL to a string .
4060	Convert to a cryptography key .
4061	Generate a new RSA key .
4062	Check if the key is valid .
4063	Load elliptic curves from lib .
4064	Load elliptic curves from lib .
4065	Convert this curve to an EC_KEY object .
4066	Returns the X509 name as a string .
4067	Returns a list of X509 components .
4068	Returns the short name of the extension .
4069	Get the data for this ASN .
4070	Returns a hazmat . hazmat . x509 certificate signing request
4071	Set public key .
4072	Get public key .
4073	Returns the subject name of this object .
4074	Add extensions to the request .
4075	Returns a list of X509Extension objects .
4076	Verify a PKey .
4077	Returns a hazmat x509 certificate .
4078	Set the X509 version .
4079	Get public key .
4080	Set public key .
4081	Sign a PKey with a digest .
4082	Returns the signature algorithm for this object .
4083	Get a digest by name .
4084	Sets the serial number .
4085	Get the serial number of the X509 .
4086	Sets the notAfter value of the GMTime object .
4087	Set the gmtime adj to notBefore .
4088	Returns True if the account has expired or False otherwise .
4089	Returns the name of the issuer .
4090	Set the X509 issuer .
4091	Returns the subject name .
4092	Set the subject name .
4093	Add an X509Extension to this element .
4094	Returns the X509 extension for the given index .
4095	Add a certificate to the certificate store .
4096	Add a CRL to the store .
4097	Set the time of the X509 store .
4098	Initialize the X509 store .
4099	Get the X509 error from the context .
4100	Verify a certificate .
4101	Set the serial number .
4102	Get the serial number of the revoked device .
4103	Set the reason for this connection .
4104	Get the reason for the revoked X509 .
4105	Set the revoked date .
4106	Returns a hazmat . hazmat . x509 certificate revocation list .
4107	Returns a list of X509 Revoked objects .
4108	Get the X509 issuer .
4109	Sign an X509 certificate .
4110	Export a certificate to a PEM file .
4111	Returns the type name of the object .
4112	Sets the CA certificates .
4113	Export the certificate to a file .
4114	Sign a key with a digest .
4115	Verify that the given key is valid .
4116	Encode this Spki as a B64 - encoded string .
4117	Get the public key for this spki .
4118	Sets the public key for this spki .
4119	Returns a list of exceptions from an error queue .
4120	Converts text to bytes and warns about deprecation .
4121	Returns a factory for printing tokens .
4122	Returns the metadata for the service .
4123	Returns a generator yielding all issues .
4124	Returns a list of annotations for a card .
4125	Get a list of boards .
4126	Get a list of lists for a board .
4127	Get a list of cards .
4128	Get comments for a card .
4129	Returns the api url for the given path .
4130	Get a link from github .
4131	Convert a field name to a dictionary .
4132	Get a list of issues based on a query .
4133	Return a list of pull requests for the given tag .
4134	Aggregate remote issues .
4135	Returns the config value for the given key or default .
4136	Returns a dictionary of templates for this task .
4137	Validate a service config .
4138	Return a boolean indicating whether the issue should be included .
4139	Create a table from a grid .
4140	Evaluate an oracle command .
4141	Returns the value of the given option in the given section .
4142	Pull a bugwarrior . lockfile .
4143	Get the data for a given URL .
4144	Get a collection of values from a URL .
4145	Find the local uuid for a given issue .
4146	Merge remote_issue with local_field .
4147	Builds the uda config overrides for the given targets .
4148	Parse a sprint string .
4149	Get the credentials for the current user .
4150	Given a list of n - gram sequences and a list of scores ids compute a multi - gram score for each n - gram .
4151	Calculate p - values for a query .
4152	Compute the FDR for a given set of values .
4153	Calculate the z - score of a 2D array .
4154	Create a heatmap of a dataframe .
4155	Adjust the spines of an axis .
4156	Create an argument parser .
4157	Adds a prerank parser to subparsers .
4158	Adds a plot parser to subparsers .
4159	Adds an enrichr parser to subparsers .
4160	Compute the enrichment score of a gene .
4161	Returns a ranking metric tensor .
4162	Compute the ranking metric of a dataframe .
4163	Compute the gsea p - value .
4164	Compute the GSEA significance .
4165	Returns a list of all marts .
4166	Get a list of ENSEMBL datasets .
4167	Returns a DataFrame with the attributes of the given dataset .
4168	Returns a DataFrame with the filters for the given dataset .
4169	Query Biomart for a specific gene .
4170	Generate a GSEA plot .
4171	SingularSampleGSEA .
4172	Perform a GSEA Prerank on a set of genes .
4173	Performs a replot of a graph .
4174	Set the number of cores .
4175	Load gene sets from a gmt parameter .
4176	Returns a list of libraries for the specified database .
4177	Download and generate Enrichr gene sets .
4178	Calculate the heatmat of a dataframe .
4179	Save results to zipdata .
4180	Load gene expression data .
4181	Parse GSEA data files .
4182	Run GSEA .
4183	Runs all the samples in a dataset permu .
4184	Runs the enrichment score tensor on a set of samples .
4185	Save results on samples to outdir .
4186	Run GSEA .
4187	Enrich a gene list with a list of gene sets .
4188	Parse a list of enrichr libraries .
4189	Parse a list of gene names .
4190	Send a list of genes .
4191	Check if a list of genes is recognized by Enrichr .
4192	Returns a set of background genes .
4193	Run Enrichr .
4194	Create a cube from a script .
4195	Create an icosphere filter .
4196	Create a torus from a script .
4197	Returns a list of tuples where each tuple is a tuple of x and y .
4198	Draws a cube of x and y segments .
4199	Returns a list of color values .
4200	Check if a variable has num_terms terms .
4201	Make a list from a tuple or list .
4202	Write a filter script to a file .
4203	Loop over LS3 subdivisions .
4204	Merge close vertices .
4205	Closes a list of holes .
4206	Split Vertexes Incident on Non Manifold Faces
4207	Snap mismatched borders .
4208	Translate a script .
4209	Rotate a script along a given axis .
4210	Scale a script to a given value .
4211	Convert a cyl_co script to a cyl_co function .
4212	Wrap a script to a cylinder .
4213	Bend a script to a given radius and pitch .
4214	Deform a tangent to a curve .
4215	Convert a vertex color to a texture .
4216	Transfers a mesh to a face .
4217	Performs a uniform mesh resampling .
4218	Screened Poisson surface reconstruction .
4219	Create a voronoi color for a script .
4220	Filter all faces and vertices .
4221	Return the vertex quality of a script .
4222	Generates a boolean function for a face selection script .
4223	Returns a vert function for the given script .
4224	Convert a script to a cylindrical shape .
4225	Return the spherical vert of a script .
4226	Returns a string representation of the merge script .
4227	Rename the current mesh .
4228	Change the current mesh layer .
4229	Duplicate a script .
4230	Delete the lower layer of a script .
4231	Handle a TEMP3D error .
4232	Start a TEMP3D filter script .
4233	Add a new layer to the stack .
4234	Removes a layer from the stack .
4235	Save a script to a file .
4236	Run a script on the Meshlab server .
4237	Create an annulus from a sphere .
4238	Calculate the Hausdorff distance between a mesh and a target mesh .
4239	Performs a Poisson - disk sampling .
4240	Sample a mesh element .
4241	Clustered Vertex subsampling .
4242	Create a flat plane .
4243	Per - triangle paramterization .
4244	Generate a Voronoi Atlas from a script .
4245	Computes the topological measures of a script .
4246	Parse a topology log file .
4247	Parse the hausdorff distance log file .
4248	Create a Per Vertex Color Function XML .
4249	Create a Voronoi Vertex Mesh .
4250	Generate a cyclic rainbow .
4251	Convert y and x to python 2 . 0 .
4252	Returns the cross product of two vectors .
4253	Multiply scalar with vector v1 .
4254	Create a new vertices attribute .
4255	Flip a script .
4256	Compute normals for a set of points .
4257	Perform taubin smoothing .
4258	Returns the depth of a smoothed script .
4259	Sort a file s polyline vertices .
4260	Measure the topology of a TMP3D file .
4261	Measure geometry and topology using TEMP3D .
4262	Measure the dimension between two axes .
4263	Convert a filename to lowercase .
4264	Patches the request class .
4265	Returns a dict containing the config for the given app .
4266	Configure upload sets .
4267	Get the configuration for this upload .
4268	Returns the URL of the uploaded file .
4269	Returns the path to the given filename .
4270	Returns True if an extension is allowed in the config .
4271	Resolve a conflict name .
4272	Get the version of a vprof file .
4273	Remove duplicates from a list of objects
4274	Returns the number of objects in objs1 compared to objs2 .
4275	Formats a list of objects into a list of strings .
4276	Trace memory usage of a frame .
4277	Returns a list of code events .
4278	Returns the number of overhead objects in the process .
4279	Computes the memory overhead of the process .
4280	Profile a package .
4281	Profile a module .
4282	Profile a function .
4283	Returns a dict containing the object name code_events total_events and result .
4284	Returns a set of module names for a given package .
4285	Run a function in a separate process .
4286	Return the type of the run_object .
4287	Initialize a module .
4288	Initializes a package for the given run object .
4289	Initialize the run_object .
4290	Replace sys . argv with self . _run_args .
4291	Sample a frame .
4292	Insert a call tree into the stack .
4293	Fills the sample count of a node .
4294	Returns a dict representation of the tree .
4295	Returns the call tree as a dictionary .
4296	Returns a dict with the stat profiler .
4297	Profile the stats module .
4298	Returns a dictionary describing the stat profiler function .
4299	Transform a profiler s stats into a list of records .
4300	Create a cProfile . Profile object .
4301	Returns a dict containing information about the module .
4302	Returns a dictionary describing the profile function .
4303	Initialize the database .
4304	Show a guestbook .
4305	Add an entry to the database .
4306	The profiler handler .
4307	Start an HTTP server .
4308	Handle the root html file .
4309	Handle the contents of the other file .
4310	Do a GET request .
4311	Perform a POST request .
4312	Send a response to the server .
4313	Check if a module is a standard directory .
4314	Record a line .
4315	Returns a generator yielding lines without stdlib .
4316	Fill the heatmap with the number of lines without stdlib .
4317	Skip lines from src_code .
4318	Returns a dict of the profile package .
4319	Format a heatmap file .
4320	Returns the profile of the run module .
4321	Profile the run function .
4322	Run a set of profilers .
4323	Run a profiler .
4324	Predict the probabilities of X .
4325	Predict the log probability of X .
4326	Fit the model to a set of data .
4327	Count the vocabulary of a list of documents .
4328	Sort a vocabulary into a list of features .
4329	Return a set of features with a given vocabulary .
4330	Fits and transforms the RDD to the given data .
4331	Transform Z into a sp . spmatrix
4332	Convert this Scaler to a Scikit Scaler .
4333	Fit a Spark model to a set of data .
4334	Predict X using Spark .
4335	Fit a SparkLinearRegression to a vector Z .
4336	Performs a pre - transform and then performs a fit .
4337	Fits and transforms Z using the given fit parameters .
4338	Returns the score of Z .
4339	Fit the model to the given parameter_iterable .
4340	Calculate the score of an estimator against a Z - test .
4341	Fits the Spark KMeans model to the given data .
4342	Predict X using the SparkKMeans model .
4343	Predict the classifier for X .
4344	Check the dtype of an RDD .
4345	Fit the model to a set of features .
4346	Fits the model to the given data .
4347	Fits and transforms the SVD .
4348	Transform an RDD into a SparkTruncatedSVD .
4349	Generate a block collection .
4350	Blocks a tuple of dtypes .
4351	Convert an RDD to a block RDD .
4352	Transform an RDD using a function .
4353	Returns the shape of the RDD .
4354	Convert to a numpy array .
4355	Transform a column into a dtype .
4356	Return the bitperm for a given position .
4357	Check if path is only a root write .
4358	Check if the given configuration file is correct .
4359	Load configuration from file .
4360	Run a command as a shell command .
4361	Execute a command in a subprocess .
4362	Execute a command over SSH .
4363	Validate the configuration file .
4364	Return a copy of the default headers .
4365	Returns the data as a JSON string .
4366	Returns the url of the event for this device .
4367	Returns the url for this Webhook .
4368	Convert a pkt string to a string .
4369	Print information about a mac id .
4370	Scan for devices that are not in the mac id list .
4371	Execute the device .
4372	Send a confirmation message to the device .
4373	Called when the device is pushed .
4374	Execute a command on a device .
4375	Run the scan .
4376	Convert a transaction to a Transaction object .
4377	Find the ledger . rc file .
4378	Compatibility testing .
4379	Returns a description of the README file .
4380	Load a PrecalculatedTextMeasurer from a JSON file .
4381	Create a PrecalculatedTextMeasurer from a JSON file .
4382	Create a JINJA2 badge .
4383	Generates a list of characters supported by deja_vu_sans .
4384	Generates a list of encodeable characters from a list of strings .
4385	Calculate the character - to - length mapping .
4386	Write a text file to a JSON file .
4387	Convolve a 2D Gaussian kernel into a 2D kernel .
4388	Returns a gaussian kernel .
4389	Convert an image to grayscale .
4390	Main entry point for pyssim .
4391	Calculate the SSIM value for a target image .
4392	Compute the SSIM between two images .
4393	Destroy the container .
4394	Sets the code version .
4395	Returns the status of the raft .
4396	Prints the current status .
4397	Convert a connection to a node .
4398	Attempts to bind to this node if it is ready .
4399	Called when a new connection is received .
4400	Called when an incoming message is received .
4401	Called when a command fails .
4402	Check if a TCP node should be connected .
4403	Connect to node if necessary .
4404	Called when an outgoing message is received .
4405	Called when an outgoing message is received .
4406	Called when a connection is disconnected .
4407	Add a node to the network .
4408	Drops a node from the network .
4409	Send a message to a node .
4410	Destroys the connection to the server .
4411	Add an item to the list .
4412	Put an item into the heap .
4413	Get a value from the heap .
4414	Try to acquire a lock .
4415	Returns True if the lock is acquired False otherwise .
4416	Release a lock .
4417	Decorator for checking a function .
4418	Returns a view function that checks if a token is required for the request .
4419	Set a list of hosts .
4420	Create Elasticsearch indexes .
4421	Migrate indexes from aggregate_indexes to forensic_indexes
4422	Remove report metadata from report .
4423	Save aggregate_reports to kafka .
4424	Extract XML from a file .
4425	Parse the aggregation report file .
4426	Convert a list of forensic reports to a csv file .
4427	Parse an aggregate report file .
4428	Returns a list of the IMAP server capabilities .
4429	Save aggregate_reports and forensic_reports to output_directory
4430	Generates a zip file from a list of subdirectories
4431	Send a DMARC report to the specified host .
4432	Save aggregate reports to Splunk .
4433	Save a list of forensic reports to Splunk
4434	Decode base64 - encoded data .
4435	Get the public suffix list for a given domain .
4436	Get the reverse DNS for an IP address .
4437	Convert a human readable timestamp to a datetime object .
4438	Download the GeoIP database for a given IP address .
4439	Get information about an IP address .
4440	Convert an Outlook MSG file to an EML file .
4441	Convert a string to a list .
4442	Parse a report file .
4443	Returns a list of tasks to drain .
4444	Publish the given payload to the given subject .
4445	Publish a request to the server .
4446	Publish a message to the server .
4447	Subscribe to a subject .
4448	Unsubscribe a subscriber .
4449	Send a ping to the server and wait for it to finish .
4450	Select the next server in the pool .
4451	Process a NatsError message .
4452	Process an operation error .
4453	Executes a command to connect to the server .
4454	Process incoming pings .
4455	Process a message .
4456	Processes info from the server pool .
4457	Process connection initialization .
4458	Flushes data from the queue .
4459	Returns a generator that reads data from the stream .
4460	Perform coactivation analysis on a dataset .
4461	Decode a list of images .
4462	Load features from an array .
4463	Load features from images .
4464	Returns the Pearson correlation between two images .
4465	Returns the dot product of the image .
4466	Select features from a list of features .
4467	Returns a list of studies grouped by regions .
4468	Get the feature order of a dataset .
4469	Classify a dataset by regions .
4470	Classify data using a classifier .
4471	Fit the model to X and y .
4472	Set the weight of the classifier .
4473	Fit the cross validation algorithm to the given data .
4474	Fit the classifier to a dataset .
4475	Compute the average of a dataset within a set of regions .
4476	Get a random number of voxels in the image .
4477	Returns a list of top words for each topic in the model .
4478	Compute the Pearson correlation coefficient .
4479	Compute the Frequency Derivative of Radiation .
4480	Load activation data from a CSV file .
4481	Create an image table .
4482	Returns a list of studies .
4483	Add a list of features to the feature table .
4484	Returns a list of feature names .
4485	Returns a dict of feature names and counts .
4486	Load dataset from file .
4487	Save the feature table to a file .
4488	Returns the image data as a sparse matrix .
4489	Get feature data .
4490	Returns a list of names ordered by features .
4491	Returns a list of ids for a list of features .
4492	Returns a list of features matching the given search string .
4493	Returns a list of ids for the given expression .
4494	Convert a SDF to a sparse CSR matrix .
4495	Deprecated function decorator .
4496	Transform a matrix from a set of points to a set of points .
4497	Convert xyz coordinates to mat coordinates .
4498	Apply a transformation to a set of coordinates .
4499	Masks the given image .
4500	Returns a mask for the image .
4501	Load images from a list of filenames .
4502	Save the masked image to a file .
4503	Set logging level .
4504	Expands an address to a list of languages .
4505	Given a string and a list of token types return a list of token types .
4506	Parse an IPv4 address .
4507	Returns a list of hashes for the given labels and values .
4508	Convert a dictionary to a namedtuple .
4509	Get the price of a ticker .
4510	Get a DataFrame from the API .
4511	Get bulk news from Tiingo .
4512	Make a request to the server .
4513	Get bearer information .
4514	Make a request to the API .
4515	Get all tracks for a spotify album .
4516	Get information about an artist .
4517	Get artist albums .
4518	Get artist s top tracks .
4519	Get artists related to a spotify id .
4520	Get a list of artists .
4521	Get information about a category .
4522	Get a list of playlists for a category .
4523	Return a list of categories .
4524	Get a list of featured playlists for a given locale and timestamp .
4525	Get all new releases for a country .
4526	Get recommendations for a list of seed artists .
4527	Get a list of artists or users that are following this artist .
4528	Returns a list of all the albums associated with this artist .
4529	Returns a list of all albums for this artist .
4530	Get the total number of albums for this artist .
4531	Returns a list of artists related to this artist .
4532	Returns the currently playing track .
4533	Get the current player .
4534	Returns a list of available devices
4535	List of recently played tracks .
4536	Replace tracks in playlist .
4537	Reorder tracks in a playlist .
4538	Create a new playlist .
4539	Returns a list of playlists .
4540	Returns a list of all tracks in the album .
4541	Returns a list of all tracks in the album .
4542	Get an OAuth2 url .
4543	Get a single album .
4544	Get an artist by ID .
4545	Get a track by id .
4546	Get a user by id .
4547	Get a list of albums by their id .
4548	Returns a list of artists with the given ids
4549	Search for a song .
4550	Convert a string to an ID .
4551	Raise an exception if the attr is not present .
4552	Create an instance from a client .
4553	Generate a URL for a client .
4554	Returns a dictionary of attributes for this client .
4555	Returns a string representation of the parameters .
4556	Build a playlist .
4557	Returns a list of all tracks in this playlist .
4558	Resume a playback on the specified device .
4559	Transfer a player from one device to another .
4560	Retrieves a Spotify object from its href attribute .
4561	Returns a PyFunceble instance .
4562	Convert a month to a shorter one .
4563	Update the code urls .
4564	Check if the current version is greater than the current one .
4565	Check if git branch is a dev version .
4566	Returns True if the current version requires deprecation .
4567	Backup the current configuration .
4568	Restore the contents of the backup .
4569	Check if a line is to ignore .
4570	Handle a list of options .
4571	Extracts the base from the given element .
4572	Returns a list of decoded strings .
4573	Returns the status code of the request .
4574	Returns the HTTP code .
4575	Check if a domain is valid .
4576	Check if a domain is a subdomain .
4577	Check if ip is a valid IPv4 address .
4578	Check if an IPv4 address is a range .
4579	Checks the syntax of a URL .
4580	Load config from INTERN .
4581	Prints a message to stdout .
4582	Download entry management URL .
4583	Set the url of the entry management file .
4584	Prints the header .
4585	Process a file decision .
4586	Sets the domain to test .
4587	Prints the url to the terminal .
4588	Colorize the logo .
4589	Returns a string representation of the extracted domain .
4590	Extract a domain from a file .
4591	Returns a list of files to test .
4592	Returns the URL of a file .
4593	Switches the state of a variable .
4594	Returns a PyFunceble instance .
4595	Generate a SYNTAX file for this URL .
4596	Returns a json - ready representation of the structure .
4597	Create a directory .
4598	Deletes a directory if it exists .
4599	Convert a path to a list of configurations .
4600	Load the config file .
4601	Install the production . yaml .
4602	Install the iana config .
4603	Install the psl config .
4604	Install a directory structure file .
4605	Merge upstream config values .
4606	Loads and merges the upstream configuration file .
4607	Split a version into digits and non - digits .
4608	Check if local and upstream versions match .
4609	Check if a cloned version of a PyFunceble is available .
4610	Handle non - existent indexes .
4611	Returns the directory where the analysis is stored .
4612	Prints the unified file .
4613	Generates a status screen and prints it .
4614	Check if a file should not be produced .
4615	Returns a list of public suffixes for the given line .
4616	Load the database from a JSON file .
4617	Returns a standard regex for the given element .
4618	Returns a sorted list of python elements .
4619	Load the iana_db .
4620	Return the referer for the given extension .
4621	Returns a generator yielding all available domain extensions .
4622	Update iana - domains - db
4623	Returns a list of all elements that have been mined .
4624	Returns a dictionary containing the mined data .
4625	Back up the file if necessary .
4626	Adds a new element to the to_add list .
4627	Removes the to_get_bare element if it exists .
4628	Returns a list of all mined files .
4629	Processes a PyFunceble instance .
4630	Returns the contents of a file .
4631	Write content to a JSON file .
4632	Query whois for a record .
4633	Returns the expiration date of the extracted file .
4634	Check if a referer is not found .
4635	Create a link to the generated file if it doesn t already exist .
4636	Construct a header from a list of data .
4637	Returns the HTTP header .
4638	Construct a PyFunceble . OrderedDict from the given size .
4639	Returns the number of bytes in a header .
4640	Helper function to colorify data .
4641	Returns a JSON representation of the output .
4642	Returns the data as a dictionary .
4643	Save the file to disk .
4644	Calculate the time difference between start and end .
4645	Returns a string representation of the time between start and end .
4646	Returns a list of files to delete .
4647	List of databases to delete .
4648	Deletes almost everything in the directory .
4649	Returns the hash of a file .
4650	Returns the hash of the data .
4651	Returns the hash of the file or data .
4652	Execute the command and return the result .
4653	Remove a key from the dictionary .
4654	Rename a key in the dictionary .
4655	Merge multiple dictionaries into a single dictionary .
4656	Dump the dictionary to a JSON file .
4657	Dump the dictionary to a YAML file .
4658	Fixes the path of a file .
4659	Write data_to_to_write to self . file .
4660	Returns a list of funilry objects from the file .
4661	Returns a list of strings sorted alphabetically .
4662	Merge a list of dictionaries into a single list .
4663	Returns a list of strings that do not match the regex .
4664	Returns True if the string matches the regex .
4665	Replace the regex with replace_with .
4666	Count the number of tests .
4667	Calculate the percentages .
4668	Log the results to the output directory .
4669	Returns True if the given URL is valid False otherwise .
4670	Checks if a domain is valid .
4671	Returns True if the element is a subdomain of the domain .
4672	Returns a SyntaxStatus .
4673	Reformat historical_formating_error into a dictionary .
4674	Retrieve data from the inactive database .
4675	Backup the inactive database .
4676	Returns the timestamp of the inactive database .
4677	Return the contents of the inactive database .
4678	Check if the database is present .
4679	Retrieve the WHOIS database .
4680	Backup the whois database .
4681	Returns True if the file is in the database .
4682	Returns True if the time is older than the current time .
4683	Returns the expiration date for this authorization .
4684	Add the epoch to the database .
4685	Get permissions for travis .
4686	Sets up the travis build directory .
4687	Returns a tuple containing the ns lookup .
4688	Connect to a whois server .
4689	Returns a PyFunceble instance .
4690	Returns the referer for this domain .
4691	Returns the current object .
4692	Return a generator yielding all python libraries in the standard directory .
4693	Return a generator of standard package names .
4694	Yield unused import line numbers .
4695	Yields the module name of an unused import message .
4696	Yields Line Numbers for Star Import Used messages .
4697	Yields ImportStarUsage messages with undefined name .
4698	Yield unused variable line numbers from a list of messages .
4699	Yield messages with duplicate key line numbers .
4700	Create a dictionary from a list of messages .
4701	Check if a file is valid .
4702	Extracts the package name from a line .
4703	Import a multiline statement .
4704	Returns True if the given line is a multiline statement .
4705	Filter out imports that are not in unused_module .
4706	Breaks a line into a list of imports .
4707	Returns a list of all unused imports from the source code .
4708	Get a list of messages by line .
4709	Filter a star import line by its undefined name .
4710	Filter out duplicate keys in a message .
4711	Check if a dict entry has a key .
4712	Check if value is a literal or a name .
4713	Yield useless line numbers from a pass line .
4714	Filter useless pass lines .
4715	Return the indentation of a line .
4716	Get the ending of a line .
4717	Fix the code in a source file .
4718	Split comma separated strings .
4719	Returns True if filename is a python file .
4720	Returns True if filename is an exclude file .
4721	Given a list of filenames return a list of filenames that match recursively .
4722	Main entry point for argparse .
4723	Read ObtainLeaseResponsePayload from input_stream .
4724	Writes the ObtainLeaseResponsePayload to the given output stream .
4725	Writes this CancelRequestPayload to the given output stream .
4726	Read a CancelResponsePayload from a stream .
4727	Create a new name .
4728	Read a digest from the given istream .
4729	Write a KMIP digest to the given ostream .
4730	Create a new Digest .
4731	Read an ApplicationSpecificInformation from a stream .
4732	Write the ApplicationSpecificInformation to ostream .
4733	Create an ApplicationSpecificInformation
4734	Reads the DerivationParameters from the input stream .
4735	Write a bytearray to a stream .
4736	Reads a GetRequestPayload from the given input stream .
4737	Writes a KMIP file to a bytearray stream .
4738	Read a response payload from a stream .
4739	Writes this payment to a byte stream .
4740	Reads the signature verification request payload .
4741	Write a kubernetes - ip address to a stream .
4742	Parse the signature verification response payload .
4743	Process a request .
4744	Build an error response .
4745	Processes a template attribute .
4746	Retrieves the attributes from a managed object .
4747	Get an attribute from a managed object .
4748	Set attributes on a managed object .
4749	Sets an attribute on a managed object .
4750	Returns True if the specified operation is allowed on the specified object .
4751	Writes a bytearray to the given stream .
4752	Create a new ObjectType .
4753	Sets a configuration setting .
4754	Load the server configuration from a file .
4755	Process bind parameter .
4756	Returns a list of CryptographicUsageMask objects for the given value .
4757	Read a long integer from the given istream .
4758	Write this LongInteger to the given ostream .
4759	Validate that the value is valid .
4760	Read a big integer from the given istream .
4761	Write a KMIP object to ostream .
4762	Validate that the value is of the correct type .
4763	Validate the enumeration .
4764	Read a boolean value from a buffer .
4765	Write a boolean value to the buffer .
4766	Write a KMIP object to a stream .
4767	Validate that the value is a boolean .
4768	Read data from a KMIP stream .
4769	Validate that the value is of the correct type .
4770	Creates the key_wrapping_data dictionary .
4771	Sets the key wrapping data .
4772	Validate that the key is valid .
4773	Validate that the secret value is valid .
4774	Validate that the data type is valid .
4775	Converts an attribute name to a tag .
4776	Converts an attribute tag to a name .
4777	Get the bit mask from a list of enumerations .
4778	Returns a list of enumerations with the given bit mask .
4779	Checks if the given enumeration is a bit mask .
4780	Reads the CreateKeyPairRequestPayload .
4781	Writes a KMIP file to a buffer .
4782	Read CreateKeyPairResponsePayload .
4783	Writes the CreateKeyPair response payload to the given buffer .
4784	Read an attribute list from a file .
4785	Writes this GetAttributeListRequestPayload to the given buffer .
4786	Reads the GetAttributeListResponsePayload .
4787	Writes the GetAttributeList response to the given buffer .
4788	Return a list of all . json files in a directory .
4789	Scan for policy files and restore or delete them .
4790	Run the operation policy file monitor .
4791	Get an x509 certificate from a connection .
4792	Gets the extended key usage from a certificate .
4793	Returns a list of common names in a certificate .
4794	Get the client identity from a certificate .
4795	Read the Create request payload .
4796	Writes the Create request payload to the given buffer .
4797	Read the Create response payload .
4798	Writes the Create response payload to the given buffer .
4799	Convert obj to a python object .
4800	Reads the encrypted response payload .
4801	Reads the DeriveKey request payload .
4802	Write the DeriveKey request payload .
4803	Returns True if the given attribute is supported .
4804	Checks if the given attribute is deprecated .
4805	Returns True if the given attribute is applicable to the given object type .
4806	Checks if the given attribute is multivalued .
4807	Get a valid value from a configuration file .
4808	Read a CheckResponsePayload from a stream .
4809	Write a kubernetes . Bytearray to a stream .
4810	Read a KMIP attribute from a buffer .
4811	Writes the KMIP object to the given buffer .
4812	Read the Attributes object from the input stream .
4813	Writes the Attributes object to the output stream .
4814	Read a Nonce from a stream .
4815	Writes the nonce to the given output stream .
4816	Read a UsernamePasswordCredential from a stream .
4817	Writes a UsernamePasswordCredential to the given output stream .
4818	Read a DeviceCredential from a stream .
4819	Write a KMIP stream to the device stream .
4820	Read a Credential from a stream .
4821	Writes the credential to a bytearray stream .
4822	Read MAC signature key information .
4823	Writes the MACSignatureKeyInformation to the specified output stream .
4824	Read a KeyWrappingData object from a stream .
4825	Write a KMIP object to a Bytearray stream .
4826	Read a KeyWrappingSpecification from a stream .
4827	Write this struct to a bytearray stream .
4828	Reads the ExtensionInformation from a stream .
4829	Write this ExtensionInformation to a bytearray stream .
4830	Create a new ExtensionInformation
4831	Read a RevocationReason from the given istream .
4832	Write the RevocationReason to the given ostream .
4833	Validate revocation_code and revocation_reason code .
4834	Read the ObjectDefaults object .
4835	Writes the ObjectDefaults structure to the given buffer .
4836	Reads the DefaultsInformation from the input buffer .
4837	Writes the DefaultsInformation structure to the given buffer .
4838	Read the RNGParameters object .
4839	Write the RNGParameters structure to the output buffer .
4840	Read a KMIP ProfileInformation from a file .
4841	Writes the ProfileInformation structure to the output buffer .
4842	Writes the ValidationInformation to a BytearrayStream .
4843	Reads the CapabilityInformation from the given buffer .
4844	Writes the CapabilityInformation object to the output buffer .
4845	Stops the connection threads .
4846	Starts a new connection to the server .
4847	Read a LocateRequestPayload from a file .
4848	Writes a KMIP file to the output buffer .
4849	Reads the LocateResponsePayload .
4850	Writes a LocateResponsePayload to a local buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a hash - based message authentication code .
4854	Encrypts plain text using the specified encryption algorithm .
4855	Encrypt plain text using a symmetric encryption algorithm .
4856	Encrypt plain text using asymmetric encryption .
4857	Decrypt a string using asymmetric decryption .
4858	Generate an RSA key pair .
4859	Derives a key from a derivation method .
4860	Create an RSA private key .
4861	Verifies the signature of a message .
4862	Read a SignResponsePayload from a stream .
4863	Writes a SignResponsePayload to a stream .
4864	Gets the unique identifier from the given input stream .
4865	Convert a protocol version to a KMIP version .
4866	Read a protocol version from a stream .
4867	Writes the KMIP struct to the output stream .
4868	Read Authentication credentials from the input stream .
4869	Writes the Authentication struct to a byte stream .
4870	Read a poll request payload .
4871	Read a certificate from the given istream .
4872	Write the certificate to the given ostream .
4873	Authenticate using the SLUGS URL .
4874	Read an ArchiveResponsePayload from a stream .
4875	Writes the ArchiveResponsePayload to the given output stream .
4876	Starts a TLS session .
4877	Read the RekeyResponsePayload .
4878	Returns True if the profile is supported by the specified conformance clause and authentication suite .
4879	Derives a key from an object .
4880	Returns a list of attributes for a batch item .
4881	Get a list of attributes .
4882	Sends a query to the server .
4883	Sign a batch of data .
4884	Opens the client connection .
4885	Closes the client connection .
4886	Create a CryptographicAlgorithm .
4887	Create a new key pair .
4888	Register a Pie managed object .
4889	Rekey a key .
4890	Derives a key from a set of unique identifiers .
4891	Locate an object group member .
4892	Check if a unique identifier is valid .
4893	Get a managed object .
4894	Returns a list of attributes for the given uid and attribute_names
4895	Activate a kmip .
4896	Revoke a license .
4897	Executes a MAC on the given data .
4898	Builds the CryptographicParameters dictionary .
4899	Builds EncryptionKeyInformation from a dictionary .
4900	Builds the MAC signature key information .
4901	Builds a KeyWrappingSpecification from a dictionary .
4902	Builds a list of common attributes .
4903	Builds a name attribute .
4904	Read a QueryRequestPayload from the given buffer .
4905	Writes the QueryRequestPayload to the given buffer .
4906	Write a KMIP object to a buffer .
4907	Reads the GetAttributesResponsePayload .
4908	Writes the GetAttributes response to the given buffer .
4909	Get a single entry point for a given group .
4910	Returns a dictionary containing the names of all elements in a group .
4911	Returns a list of entry points for a given group .
4912	Load the object .
4913	Create an entry point from a string .
4914	Live reload server .
4915	Generate a project directory .
4916	Generate a controller .
4917	Generate an action .
4918	Generate a form .
4919	Generate a model .
4920	Generate a macro .
4921	Make a directory if it doesn t exist .
4922	Rewrite src_file and copy it to dst_file .
4923	Convert a datetime . datetime object to a datetime . timesince object .
4924	Check if url is correct .
4925	Encode something into a URL safe string .
4926	Decode something .
4927	Decorate a function to return a JSON response .
4928	Returns the absolute URL for the given endpoint .
4929	Load configuration from environment variables .
4930	Sign in a user .
4931	Returns the current user .
4932	Create a new Flask application .
4933	Register a jinja2 loader .
4934	Register routes .
4935	Register an error handler .
4936	Register hooks for the app .
4937	Convert a dataframe to a CSV file .
4938	Read a DataFrame from a CSV file .
4939	Serialize a dataframe .
4940	Deserialize a dataframe .
4941	Update this object from a dataframe .
4942	Update this object from raw data .
4943	Returns the URL for the contents of the file .
4944	Add data from a dataframe .
4945	Add a data type from raw data .
4946	Opens the intermediate dataset .
4947	Read this dataset as a binary file .
4948	Read the dataset content as text .
4949	Convert to a DataFrame .
4950	Get an intermediate dataset .
4951	Get a list of experiments in a workspace .
4952	Get datasets for a workspace .
4953	Get a dataset .
4954	Publish a workspace .
4955	Create a service for a given url .
4956	Decorator to add annotations to a function .
4957	Decorator to set the return type of a function .
4958	Add an attachment to a function .
4959	Find all globals in a given bytecode .
4960	Returns a copy of this pen .
4961	Lookup a brewer color .
4962	Draw the cursor to the given cr .
4963	Calculate the Cubic Bernstein Extrema .
4964	Calculate the Cubic Bernstein distance .
4965	Build a list of choices from a site tree .
4966	Returns a function that returns a list of options for the given command options .
4967	Register a function as a items hook .
4968	Compose a dynamic tree .
4969	Initialize the cache .
4970	Remove all sitetrees from the cache .
4971	Get an entry by name and key .
4972	Updates the value of an entry .
4973	Set the value of a cache entry .
4974	Initialize the object with the given context .
4975	Resolve an I18N tree alias .
4976	Returns True if the current application is an admin .
4977	Calculate the depth of an item .
4978	Get the current item of a tree .
4979	Get the url for a sitetree item .
4980	Initialize a SiteTree .
4981	Returns a sitetree attribute for the current page .
4982	Returns the level of the ancestor of the current item .
4983	Create a menu for the given alias .
4984	Checks if the current user has access to the item .
4985	Returns a list of breadcrumbs for the given tree .
4986	Returns a string representation of a tree .
4987	Get the children of the given parent item .
4988	Returns a list of children of the given item .
4989	Update tree_items has_children attribute .
4990	Returns a list of items filtered by navigation type .
4991	Returns the ancestor of the given item .
4992	Creates a tree climber for a tree .
4993	Resolve a variable .
4994	Return a sitetree tree node .
4995	Returns a list of sitetree_children nodes .
4996	Return sitetree_breadcrumbs node .
4997	Return a sitetree menu node .
4998	Render a site tree .
4999	Returns a Template for the given tag .
5000	Returns the URL name of a model .
5001	Reregister tree admin .
5002	Handles redirects .
5003	Return a HttpResponseRedirect .
5004	Add an item to the tree .
5005	Handle a response change request .
5006	Overrides the get_form method .
5007	Get a model tree .
5008	Move an item in a tree .
5009	Save a model .
5010	Returns a list of tree urls .
5011	Returns a smuggler . views . View object .
5012	Create a tree model .
5013	Create a tree item .
5014	Import the sitetree module for the given app .
5015	Returns the model class for the given settings entry name .
5016	Create a config object from a mapping .
5017	Create a Configuration object from a python file .
5018	Load configuration from a toml file .
5019	Create a Configuration object from an object .
5020	Create ZipkinAttrs for a given span .
5021	Create HTTP headers for a new span .
5022	Return current context .
5023	Starts the zipkin transport .
5024	Stops the Zipkin transport .
5025	Update binary annotations .
5026	Add a binary annotation to the logging context .
5027	Override the span name in the logging context .
5028	Create an endpoint .
5029	Copies an endpoint with a new service name .
5030	Builds a V1Span object for this trace .
5031	Encode a list of spans into a string .
5032	Create a protobuf span .
5033	Convert a hex id to bytes .
5034	Returns the protobuf of the given kind .
5035	Convert a zipkin . pb2 . Endpoint to a zipkin . pb2 . Endpoint .
5036	Convert a list of annotations to a list of Annotations .
5037	Create a zipkin annotation .
5038	Create a binary annotation .
5039	Create a zipkin endpoint .
5040	Copies an endpoint with a new service name .
5041	Build a list of annotations .
5042	Build a list of binary annotations .
5043	Create a new span .
5044	Convert a thrift span to bytes .
5045	Encodes a list of thrift objects into bytes .
5046	Detect the span version and encoding of a message .
5047	Convert a list of spans to output_encoding .
5048	Deprecated . See DEPRECATIONS . rst .
5049	Encodes a v2 span .
5050	Create a json endpoint .
5051	Encode a span using Zipkin encoding .
5052	Decode a list of spans into a list of spans .
5053	Converts a thrift endpoint into an Endpoint object .
5054	Decodes a list of thrift annotations .
5055	Convert from thrift_binary_annotations .
5056	Decode a thrift span .
5057	Convert a trace id to a string .
5058	Convert an unsigned long string to a lower hex string .
5059	Write a long value in hexadecimal format .
5060	Preprocessor for datefixup .
5061	Set the transaction code for a transaction .
5062	Set the iph_id of a transaction .
5063	Set the tnr of a transaction .
5064	Parse tag data .
5065	Parse a file - like object .
5066	Join two or more lines together .
5067	Return the response as json or text .
5068	Logs a warning if ratelimit is exceeded .
5069	Make a request to the API .
5070	Get information about a bot .
5071	Get a list of bots .
5072	Read a term from the stream .
5073	Write a message to the stream .
5074	Close the filesystem .
5075	Decode a string .
5076	Encode a term into a string .
5077	Add a source address .
5078	Send pending messages to the queue .
5079	Sets the remote service hello callback .
5080	cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given the TYPES and SCOPES in a given TIMEOUT
5083	construct a raw SOAP XML string given a prepared SoapEnvelope object
5084	Discover systems using WS - Discovery
5085	Returns the tagged item manager .
5086	Returns a list of all children of the given model .
5087	Returns a list of all child - to - children relationships .
5088	Saves the M2M model to the database .
5089	Create a model from serializable data .
5090	Validate that all forms are unique .
5091	Check if the data has changed .
5092	Returns an Address with a valid checksum .
5093	Generates an AddressChecksum .
5094	Parse a command line argument .
5095	Creates an argument parser for this node .
5096	Prompt the user for a seed .
5097	Validate signature fragments .
5098	Returns the key for the given index iterations .
5099	Returns the key for the given address .
5100	Create a new iterator .
5101	Creates a sponge with the given index .
5102	Absorbs a set of trits at a given offset .
5103	Squeeze a list of trits .
5104	Transform the state to a new state .
5105	Returns a list of digests .
5106	Returns a list of private keys .
5107	Prepare a multisig transfer command .
5108	Return a list of tuples containing the tuples left and right .
5109	Convert an integer to a list of trits .
5110	Add trits to left and right .
5111	Returns a list of tuples where each tuple is a list of tuples . The tuple is a list of tuples .
5112	Output a seed .
5113	Executes the FindTransactions command on the adapter .
5114	Executes the GetInputs command on the adapter .
5115	Gets a list of new addresses .
5116	Returns a GetTransfers command .
5117	Promote a transaction .
5118	Returns a command to replay a transaction .
5119	Sends a list of transfers .
5120	Sends a list of trytes to the adapter .
5121	Resolve an adapter from a URI .
5122	Send a request to the server .
5123	Log a message to the logger .
5124	Send an HTTP request to a URL .
5125	Interprets a response from a node .
5126	Seed a response for a given command .
5127	Add a digest to the pool .
5128	Returns the multisig address .
5129	Create an iterator that generates a new key .
5130	Construct an Address object from a digest .
5131	Generates an address from a key iterator .
5132	Returns a list of Transaction objects .
5133	Iterate over the addresses used by the given seed and start .
5134	Get bundles from a list of transaction hashes .
5135	Check if the given encoding is a valid trytes codec .
5136	Returns a CodecInfo object .
5137	Encode a byte string into a binary string .
5138	Decode a byte string .
5139	Returns a list of addresses .
5140	Add a route .
5141	Construct a TransactionTrytes object from a list of trytes .
5142	Returns a JSON - compatible representation of this message .
5143	Returns a tuple of the signature validation trytes .
5144	Returns True if the transaction is confirmed False otherwise .
5145	Returns a list of messages .
5146	Returns a list of transactions as tryte strings .
5147	Returns a list of all transactions in this transaction .
5148	Discover all commands in a package .
5149	Execute the request and return the response .
5150	Apply a filter to a value .
5151	Get a job s url .
5152	Returns a list of errors .
5153	Returns True if the argument is valid False otherwise .
5154	Creates a validator for the transaction .
5155	Returns a list of bundle signature errors .
5156	Returns an error message if the signature of a group is invalid .
5157	Traverses a bundle transaction .
5158	Start the ipython repl .
5159	Generate a random seed .
5160	Returns the digest of the fragments .
5161	Signs the input transactions for the given bundle .
5162	Return a pretty representation of p .
5163	Absorb a set of trits .
5164	Squeeze a list of trits to a specified length .
5165	Add a context to an expression .
5166	Returns the security level of an address .
5167	Increment the legacy tag .
5168	Returns the tag of the message .
5169	Add a transaction to the bundle .
5170	Finalizes the bundle .
5171	Signs the inputs using a key generator .
5172	Signs an input transaction at a given index .
5173	Create input transactions for the given addy .
5174	Converts an IOTA value to a standard unit .
5175	Decompresses a point on G1 .
5176	prime_field_inv - prime_field_inv - prime_field_inv - prime_field
5177	Load an object from a JSON file .
5178	Find the word groups in the given text .
5179	Find a synonym for a word .
5180	Expand abbreviations in text .
5181	Split a description into a list of words .
5182	Returns a list of categories .
5183	Generate a random colour .
5184	Plots the figure on the specified axis .
5185	Return a list of built - in modules .
5186	Returns the builtin timescale for the given name .
5187	Generates a random list of decors .
5188	Create a Decorator from an image file .
5189	Create a Legend object from a CSV file .
5190	Returns a csv representation of the table .
5191	Returns the maximum width of the list .
5192	Returns a decor for a Component .
5193	Returns the value of the specified attribute if it exists .
5194	Returns the component with the given colour .
5195	Plots each element in the list in a different format .
5196	Create a Component instance from text .
5197	Returns a string representation of the component s summary .
5198	Deprecated version of Rock .
5199	Process a row of text into a list of items .
5200	Parse a canstrat string into a dictionary .
5201	Returns true if all points in self are within a bounding box .
5202	Returns a sorted list of unique values .
5203	Return a list of intervals from a list of tops .
5204	Clean longitudinal data .
5205	Read data from a PETREL file .
5206	Build a list of intervals from a dictionary .
5207	Create a Striplog object from a CSV file .
5208	Creates a DataFrame from an image file .
5209	Create a Log object from a log file .
5210	Construct a DataFrame from a LAS3 string .
5211	Create an IntervalList object from a canstrat file .
5212	Return a copy of this striplog .
5213	Write the list to a CSV file .
5214	Convert the LITH section to a LaS3 file .
5215	Plot the axis .
5216	Returns a numpy array of data for a given field .
5217	Extract a logarithmic interval from the data .
5218	Return a list of dictionaries that match the given search term .
5219	Returns a list of all overlaps .
5220	Returns a list of incongruities .
5221	Prune a striplog .
5222	Return the annealing of the strip .
5223	Returns a copy of self with gaps filled .
5224	You can only union striplogs with each other .
5225	You can only intersect striplogs with each other .
5226	Merge overlaps .
5227	Plot a histogram of the data .
5228	Return an inverted version of the Striplog .
5229	Crop the list to the specified extent .
5230	Returns the quality of a list of tests .
5231	Convert hexadecimal to name .
5232	Read a log - like object from an image file .
5233	Return the value of a custom form field .
5234	Returns a list of jobs with the given prefix .
5235	Parse a job HCL .
5236	Update an existing token .
5237	Returns a list of allocations for a given prefix .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Get the health of a deployment allocation .
5241	Drain a node .
5242	Drain a node with a specific drain specification .
5243	Get an eligible node .
5244	List all files in a directory .
5245	Stream a file or directory .
5246	Get stats for a file .
5247	Join a list of addresses .
5248	Update a list of servers .
5249	Forcibly leaves a node .
5250	Get a list of nodes for a prefix .
5251	Get evaluations for a given prefix .
5252	Get all namespaces for a given prefix .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Return a job with the given id and version .
5258	Deregister a job .
5259	Get raft configuration .
5260	Delete a peer .
5261	Get a list of deployments for a given prefix .
5262	Returns a random object of the given type .
5263	Return mutator for obj_type .
5264	Returns a random string of polyglot attacks .
5265	Generates a random fuzz for the given object .
5266	Return a safe unicode string from a string .
5267	Start the server .
5268	Stop PJFServer .
5269	Returns a custom html file .
5270	Returns a PJFTestcaseServer .
5271	Decorate an object with fuzz .
5272	Spawn a new command .
5273	Get the output of stdin .
5274	Finishes a read .
5275	Close the PJFExecutor .
5276	Start the PJF worker .
5277	Execute a PJFExternalFuzzer .
5278	Decorator for json encoding .
5279	Build a string from a pre - defined value .
5280	Build a list of statements from a pre - defined list .
5281	Returns a string representation of this Q .
5282	Build a value from a predicate .
5283	Build the OptGram .
5284	Build a reference .
5285	Build a STAR object from a given pre .
5286	Shutdown the PJFProcessMonitor
5287	Run the process and monitor .
5288	Start the monitor .
5289	Return a random floating point value .
5290	Add a definition .
5291	Add a def_name to a cat group .
5292	Generate a number of gramfuzz fields .
5293	Returns a dict of fuzzed elements .
5294	Returns a fuzzed version of the URL .
5295	Returns a fuzzed version of the JSON .
5296	Decorate an object to be mutated .
5297	Send a signal to the child process .
5298	Terminate the cli command .
5299	Pauses the process .
5300	Resume a command .
5301	Stop the cli command .
5302	Restart the process .
5303	Returns a list of SkypeEvent objects .
5304	Sets the user s mood .
5305	Sets the avatar for this user .
5306	Returns the metadata for a given URL .
5307	Get a single Skype contact .
5308	Get a single Skype user .
5309	Returns a list of SkypeBots .
5310	Get information about a Skype bot .
5311	Returns a list of Skype users matching the given query .
5312	Returns a list of SkypeRequest objects .
5313	Create a Skype object from a raw string .
5314	Merge other into self .
5315	Merge obj into self . cache
5316	Returns the sync state for the given method and url .
5317	Reads the token from the token file .
5318	Writes the token to the token file .
5319	Verifies that the given token is valid .
5320	Refreshes the current Skype token .
5321	Get the user id for this user .
5322	Gets a new registration token .
5323	Syncs all Skype endpoints .
5324	Checks if a user exists .
5325	Send a token and return a new token .
5326	Authenticate using a skype token .
5327	Configure a Skype presence document .
5328	Ping the user .
5329	Get the most recent chats .
5330	Get a single chat with a user .
5331	Create a new Skype user .
5332	Convert a URL to a user ID .
5333	Convert a chat url to an ID .
5334	Exhaust a function by iterating over iterables .
5335	Return unicode text no matter what
5336	Returns the format handler that matches the given text .
5337	Parse text and return metadata and content .
5338	Post as a dict for serializing
5339	Load a file into a YAML document .
5340	Export metadata to yaml .
5341	Turn metadata into JSON
5342	Returns a tuple of the list pattern and the cache string .
5343	Returns a list of items .
5344	Returns a list of sublists corresponding to i .
5345	Convert a string to a new start .
5346	Returns a list of all arguments .
5347	Returns a list of WikiLists matching the given pattern .
5348	Plant a trie from a list of strings .
5349	Convert a trie into a string .
5350	Checks the index of a key .
5351	Insert a string at the specified index .
5352	Return the atomic partition of a character .
5353	Returns the sub - spans of the specified type .
5354	Shifts the rmstart and rmstop intervals .
5355	Insert or update a span at the given index and length .
5356	Returns the nesting level of this parser .
5357	Returns a bytearray of the shadow of the string .
5358	Create a shadow for the extension link .
5359	Convert a python type to a list of spans .
5360	Deprecated use pformat instead .
5361	Returns a list of Parameter objects .
5362	Returns a list of ParserFunction objects .
5363	Returns a list of Template objects .
5364	Returns a list of WikiLink objects .
5365	Returns a list of comments .
5366	Returns a list of external links .
5367	Returns a list of sections .
5368	Returns a list of tables .
5369	r Returns a list of lists .
5370	Returns a list of tags .
5371	Generator for sub - spans of a given type .
5372	Returns a list of all ancestors of the given type .
5373	Returns the parent of the given type .
5374	Return the mode of a list .
5375	Get an argument from a list of arguments .
5376	Generate a normal name for this comment .
5377	Removes the first of the duplicated arguments from the argument list .
5378	Remove duplicated arguments from the argument list .
5379	Set the value of an argument .
5380	Returns the argument with the given name .
5381	Returns True if the argument has the given name and value .
5382	Delete the argument with the given name .
5383	Convert a CRS code to a string .
5384	Find an ellipsoid by name and CRS type .
5385	Create a CRS object from a URL .
5386	Load a CRS object from a file .
5387	Convert epsg code to crscode .
5388	Convert an ESRI code to a CRS .
5389	Convert sr - org code to crscode .
5390	Create a CRS from unknown text .
5391	Write this record to a file .
5392	Read a VLR from a stream .
5393	Parse GeoTiffKeys from a list of VLRs .
5394	Parse a GeoTiff into a list of GeoTiffKey objects .
5395	Returns the signedness of an extra dimension .
5396	Returns the id of the extra dimension type in the given type string .
5397	Create a new record from a point record .
5398	Copy fields from other_record to self .
5399	Appends zeros if the value is too small .
5400	Returns a set of all dimensions names .
5401	Returns a NumPy array with zeros .
5402	Initialize a PointData object from a stream .
5403	Create a LasZip object from a compressed buffer .
5404	Returns the x - dimension of the header .
5405	Returns the y - axis dimension of the header .
5406	Returns the z - scale and offset of the header .
5407	Adds an extra dimension to the point data .
5408	Writes the point record to a stream .
5409	Write to a file .
5410	Write a file to a destination .
5411	Convert point format dimensions to dtypes .
5412	Build a dictionary of unpacked point formats dtypes .
5413	Convert a numpy array dtype to a point format .
5414	Return the minimum file version for a point format .
5415	Checks if a point format is compatible with a given file version .
5416	Returns a list of vlrs of the given type .
5417	Returns a list of vlrs of the given type .
5418	Read num_to_read from data_stream .
5419	Check if all files have the same point format ID .
5420	Check if all files have the same dtype .
5421	Raises PylasError if file signature is wrong .
5422	Read the header from the stream .
5423	Read VLRs from the stream .
5424	Reads the points from the vlrs .
5425	Reads compressed points data from the stream .
5426	Read the internal waveform packet .
5427	Read EVLRs from the stream .
5428	Warn if the stream is not at the expected position .
5429	Open a file as a LasReader .
5430	Read a LAS file from a file - like object .
5431	Create a LasData object from a LAS header .
5432	Create a LasData object for a point format .
5433	Convert a point format to a point format .
5434	Merge a list of points files into a single point file .
5435	Writes a file then reads it again .
5436	Returns a datetime . date object .
5437	Sets the creation_year and creation_day_of_year attributes
5438	Returns a numpy array of the minimum values .
5439	Set x y z_min .
5440	Returns a numpy array of the maximum values .
5441	Set the max coordinates .
5442	Returns a numpy array of the scales .
5443	Returns a numpy array of the offsets of this coordinate system .
5444	Returns a string representation of the file version .
5445	Convert header from old_header to new_version .
5446	Unpack a mask from a source array .
5447	Pack a sub - field array with a mask .
5448	Returns a list of lost dimensions .
5449	Returns a dict of all sub - fields .
5450	Returns the number of extra bytes .
5451	Returns True if there is a waveform packet .
5452	Main entry point for satel_integra .
5453	Return the checksum of a command .
5454	Print data in hexadecimal format .
5455	Verify that a response is valid and strip it .
5456	Returns a list of set bits .
5457	Generate a query string .
5458	Demonstrate AsyncSatellite .
5459	Open a connection to the server .
5460	Start monitoring .
5461	Send a disarm command .
5462	Clear the alarm .
5463	Set the output of a command .
5464	Send a keep - alive query to the server .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the user s database .
5468	Guess the type of the file at the given path .
5469	Get the file id for a given file path .
5470	Get a notebook from the database .
5471	Create a notebook model from a database record .
5472	Get a directory from the database .
5473	Convert a list of file records into a dictionary .
5474	Create a directory model from a database record .
5475	Create a file model from a database record .
5476	Save a notebook to the database .
5477	Save the model to a file .
5478	Rename a file .
5479	Delete a file or directory .
5480	Ensure a user exists in the database .
5481	Purge a user .
5482	Create a directory for a user .
5483	Check if a user is in a directory .
5484	Delete a directory .
5485	Check if a directory exists in the database .
5486	Returns a list of files in a directory .
5487	Returns a list of directories in a directory .
5488	Returns a file where the user_id and api_path match .
5489	Returns a query to select a file .
5490	Return a list of file default fields .
5491	Get a file from the database .
5492	Get the contents of a file .
5493	Get the file id for a user .
5494	Check if a file exists in the database .
5495	Rename a directory .
5496	Save a file to the database .
5497	Generates a list of files .
5498	Purge remote checkpoints for a user .
5499	Generate remote checkpoints .
5500	Generate ipynb notebooks .
5501	Reencrypt the content of a row .
5502	Reencrypt a user s content .
5503	Derives a single fernet key from a password and user ID .
5504	Derives fallback fernet keys from passwords .
5505	Create a single password encryption factory .
5506	Memoizes a single argument of a function .
5507	Returns the name of a column like .
5508	Convert a row to a dict with no content .
5509	Convert a row to a dict with content .
5510	Create a checkpoint for a notebook .
5511	Create a file checkpoint .
5512	Delete a remote checkpoint .
5513	Get the content of a checkpoint .
5514	Returns a list of checkpoints for a given path .
5515	Move all checkpoints from old_path to new_path .
5516	Delete all checkpoints for a given path .
5517	Purge remote checkpoints .
5518	Resolve a path from a manager dict .
5519	Apply a prefix to a model .
5520	Wrapper for path_dispatch1 .
5521	Wrapper for path_dispatch_kwarg .
5522	Dispatches a path between two backends .
5523	Called when a manager has changed .
5524	Get the contents of a directory .
5525	Normalize an API path .
5526	Split an API file path into a directory and a filename .
5527	Returns a base64 - encoded write object .
5528	Reads from a base64 - encoded file .
5529	Decode an unicode string from a base64 - encoded string .
5530	Create a Mime from a base64 file .
5531	Returns a list of directories with a prefix .
5532	Wraps a function to raise an HTTPError if it s outside the root .
5533	Create a user in a checkpoint .
5534	Separate directories and files from a list of models .
5535	Walk a list of directories .
5536	Iterate over all files in a directory or subdirectory .
5537	Returns a generator that yields all files with content .
5538	Reencrypt all users .
5539	Reencrypt a single user .
5540	Unencrypt all users .
5541	Unencrypt a single user .
5542	Create a temporary alembic . ini file .
5543	Upgrade an existing alembic database .
5544	Sanitize a block .
5545	Queue an instance of the specified embed type .
5546	Load instances of a given embed type .
5547	Insert an instance into a block .
5548	Load the embedding data .
5549	Validate the given data .
5550	Returns the admin page for the given request .
5551	Returns a JSON representation of the object .
5552	Hide fields that are not authenticated .
5553	Exclude all fields from the query .
5554	Get a preview of a version .
5555	Get the published queryset .
5556	Returns a queryset based on the query parameters .
5557	Returns the value of the attribute for the given instance .
5558	Validate a widget .
5559	Validate a zone .
5560	Checks if the given id is a valid UUID
5561	Returns the user s permissions .
5562	Modify the user s permissions .
5563	Validate that the data is a valid author .
5564	Save the zone to the database .
5565	Returns a dictionary containing the data for this object .
5566	Returns a dict with the data ready to be parsed .
5567	Render the data .
5568	Returns a list of settings for this integration .
5569	Get a list of pages for a user .
5570	Returns the settings for the given integration .
5571	Update the settings for an integration .
5572	Signup a user .
5573	Map a tagname to a list of items .
5574	Return a zone widget .
5575	Saves the featured image .
5576	Saves a subsection .
5577	Return the extension of the image .
5578	Get the MEDIA_URL for this image .
5579	Saves the image to disk .
5580	Save an image as a thumbnail .
5581	Return the connection to the mysql database .
5582	Returns a BandwidthLimitedStream object for the given file object .
5583	Read an amount of bytes from the stream .
5584	Consumes a request token .
5585	Schedules the consumption of a token .
5586	Process a scheduled consumption token .
5587	Calculate projected moving average rate .
5588	Record the consumption rate at a given time .
5589	Download a file from a bucket .
5590	Wait for a transfer to complete and return the result .
5591	Returns a list of callbacks for the given callback type .
5592	Returns a filtered version of original_dict .
5593	Decrement the count .
5594	Calls the callback if the callback is finished .
5595	Check if filename is a special file .
5596	Acquire a tag .
5597	Release an acquire token .
5598	Adjust the chunksize of the file .
5599	Queue a task to be written to a file .
5600	Get an IOWriteTask for writing data to a file .
5601	Returns the download output manager class .
5602	Download a file from a bucket .
5603	Write data to fileobj .
5604	Request a list of writes .
5605	Return True if fileobj is seekable .
5606	Upload a file to a bucket .
5607	Download a file from a bucket .
5608	Creates a copy of a key in a bucket .
5609	Deletes a key from a bucket .
5610	Shutdown the server .
5611	Cancels a transfer .
5612	Wait for a KeyboardInterrupt to be received .
5613	Read amount from fileobj .
5614	Wrap data with callbacks and close_callbacks .
5615	Returns the UploadInputManager class .
5616	Set the exception for this transfer .
5617	Set the result of the test .
5618	Sets the exception to be raised . If override is True the exception will be raised .
5619	Returns the result of the execution .
5620	Cancel the task .
5621	Submit a task to the given executor .
5622	Add a function to the done_callbacks list .
5623	Add a function to the fail_cleanups list .
5624	Announce that the task is done .
5625	Submit a task to the server .
5626	Add a callback to be called when the future is done .
5627	Upload a file to S3 .
5628	Download a file from a bucket .
5629	Iterate over decorators for step functions .
5630	Returns a boolean indicating if the given decorator accepts the given arguments .
5631	Refactor a step from old_text to new_text .
5632	Iterate over all decorators for a step function .
5633	Converts a decorator argument to a python value .
5634	Refactor a step from old_text to new_text .
5635	Select a python parser .
5636	Get a list of items for a team .
5637	Create a new object .
5638	Update a membership .
5639	Delete a membership .
5640	Get a single catfact .
5641	Handle a webhook POST request .
5642	Get a list of items from the API .
5643	Delete a membership .
5644	Validate a base URL .
5645	Check if string is a web url .
5646	Open a local file .
5647	Checks if o is of one of the acceptable types .
5648	Convert a list of dictionaries into a dictionary .
5649	Check if response status code matches expected response code .
5650	Convert json_data to a dict .
5651	Returns a string representation of a Webex Teams datetime .
5652	Get a list of items from the API .
5653	Create a new project .
5654	Update a room .
5655	Delete a room .
5656	Get a list of objects from the API .
5657	Returns the date when this Webex Team was created .
5658	Returns the access token for the given environment variable .
5659	Create a new resource .
5660	Update a webhook .
5661	Delete a webhook .
5662	Fixes the next URL if it is not a valid API endpoint URL .
5663	Set the wait_on_rate_limit flag .
5664	Update the headers of the request .
5665	Returns the abs url for the given url .
5666	Make a request to the given url and return the response .
5667	Make a GET request to the given URL .
5668	Get a list of pages from a URL .
5669	Get a list of items from a URL .
5670	Send a PUT request to a URL .
5671	Send a DELETE request .
5672	Create a new token .
5673	List items in a room .
5674	Create a new message .
5675	Delete a message .
5676	Create a new account .
5677	Get a person .
5678	Update a person s profile .
5679	Delete a person from the API .
5680	Returns the current user .
5681	Get a list of objects .
5682	Get a list of objects .
5683	Create a new object .
5684	Update a team .
5685	Delete a team .
5686	Get a list of items from the API .
5687	Serialize data into a tuple .
5688	Get authorization code for a client .
5689	The last activity for this team .
5690	Handle a post event service request .
5691	Get the ngrok public url .
5692	Deletes all webhooks with the given name .
5693	Create a ngrok webhook .
5694	Delete webhooks with name WEBHOOK_NAME
5695	Command line interface for DSMR .
5696	Read all the telegrams from the serial port .
5697	Read telegrams from a queue .
5698	Create a partial DSMR protocol .
5699	Create a dsmr reader .
5700	Create a connection to a TCP dsmr reader .
5701	Called when data is received .
5702	Called when a connection is lost .
5703	Handle a telegram .
5704	Parse telegram data .
5705	Get the version of a file .
5706	Ensure python version .
5707	Returns a list of packages in the given top directory .
5708	Create a command class .
5709	Creates a command for a given function .
5710	Run a command and return the result .
5711	Ensures that a list of targets exists .
5712	Wraps a list of commands into a single command .
5713	Returns a FileHandler for the given package data and data files .
5714	Given a list of data files and a list of existing files return a dictionary of data files .
5715	Returns the package data for a given root directory .
5716	Compile a pattern into a string .
5717	Returns a generator that yields the contents of a path .
5718	Translates a glob file into a string .
5719	Joins a list of os_sep_class .
5720	Translates a glob part into a string .
5721	Truncate a table .
5722	Write a table to the database .
5723	Writes a table to the database .
5724	Write triggers to a table .
5725	Write constraints to a table .
5726	Write the contents of a table to a file .
5727	Process a single row of a table .
5728	Writes the indexes to the file .
5729	Write constraints to the file .
5730	Write triggers to the file .
5731	Return the number of items in the queue .
5732	Enqueue data into the database .
5733	Start the task handler .
5734	Build extra predicate from extra_predicate .
5735	Return a simple JSON serializable object .
5736	Reconnect to the database .
5737	Performs a query against the database and returns the result .
5738	Get a connection to a database .
5739	Run the benchmark .
5740	Connect to the aggregator .
5741	Lookup a value by its number .
5742	Returns the number of connections .
5743	Handle a potential connection failure .
5744	Generate a simple QB expression .
5745	Update a table .
5746	Connect to the database .
5747	Setup the database .
5748	Destroy the database .
5749	Start a new step .
5750	Stop a step .
5751	Loads a list of raw steps .
5752	Disconnect from the API .
5753	Reconnect to Initialzion .
5754	Connect to the websocket .
5755	Called when a message is received .
5756	Stop the timers .
5757	Send a ping event to the API .
5758	Check if Pong was received in time .
5759	Send an API request .
5760	Remove the pause flag and resubscribe softly .
5761	Handle a system message .
5762	Handle info requests .
5763	Error handler .
5764	Handle data passing it to the client .
5765	Re - subscribe to a channel .
5766	Handle authentication .
5767	Handle a configuration request .
5768	Update timestamps of a channel .
5769	Reset the connection .
5770	Get a list of candles for a given timeframe .
5771	Configure bitfinex .
5772	Subscribe to a ticker .
5773	Unsubscribe from a ticker .
5774	Subscribe to an order book .
5775	Unsubscribe from an order book .
5776	Subscribe to a raw order book .
5777	Unsubscribe from a raw order book .
5778	Subscribe to trades for a pair .
5779	Unsubscribe from a pair of trades .
5780	Subscribe to a pair of candles .
5781	Unsubscribe from a pair of contacts .
5782	Authenticate to the API .
5783	Cancel an order .
5784	Called when a device command is received .
5785	Called when a device command is received .
5786	Called when a message is received .
5787	Create a new device type .
5788	Publish an event to a topic .
5789	Update a device .
5790	Returns an IterableClientStatusList .
5791	Get a list of all custom bundles .
5792	Create a new custom bundle .
5793	Updates a schema .
5794	Disconnect from the IBM Watson IoT Platform .
5795	Called when a connection is made .
5796	Subscribe to events from a device .
5797	Subscribe to a specific device status .
5798	Subscribe to commands for a device .
5799	Publish a command to a device .
5800	Called when an unsupported message is received .
5801	Called when a device event is received .
5802	Called when a device status message is received .
5803	Called when a status message is received from a client .
5804	Get the last event for a device .
5805	Get all events for a given device .
5806	Make an API call .
5807	Initiate a Mgmt request .
5808	Get the status of a request .
5809	Close the index .
5810	Returns the number of intersecting indexes for the given coordinates .
5811	Returns the index of the closest object to the given coordinates .
5812	Returns the bounds of the index .
5813	Delete a coordinate from the index .
5814	Create an idx object from a stream .
5815	Load a bytearray from a page .
5816	Delete an object from the tree .
5817	Error checking for Error calls
5818	Load the application .
5819	Initialize Flask - Common extension .
5820	Runs the development server .
5821	Returns a native representation of the image field .
5822	Crop an image on the centerpoint .
5823	Process an image and save it to disk .
5824	Process an image and save it to disk .
5825	Process an image and save it to disk .
5826	Convert this VersatileImageFormField to a python object .
5827	Process placeholder image .
5828	Add a new model instance to the PPOI field .
5829	Update the ppoi_field of a file .
5830	Override save_form_data to add ppoi .
5831	Returns the default form field .
5832	Convert a value to a string .
5833	Autodiscover versatileimagefield .
5834	Unregisters a SizedImage subclass .
5835	Unregister a FilteredImage subclass .
5836	Returns the url for this image .
5837	Builds the filters and sizedimages for this field .
5838	Returns filtered root folder .
5839	Returns the size of the root folder .
5840	Returns the filtered size of the root folder .
5841	Delete matching files from storage .
5842	Preprocess an image .
5843	Preprocess a GIF image .
5844	Preprocess a JPEG image .
5845	Retrieve an image from a file .
5846	Save an image to disk .
5847	Return the PPOI as a string .
5848	Creates a resized image .
5849	Render the template with the given name and value .
5850	Override get_context to include template_name and checkbox_name .
5851	Returns a copy of base_attrs with optional extra_attrs .
5852	Get the path to a resized image .
5853	Returns the path to the filtered image .
5854	Validate a list of size keys .
5855	Returns the url for a given image key .
5856	Gets the rendition key set for the given key .
5857	Return a string representation of an instruction .
5858	Format a function body .
5859	Decode a bytecode into an Instruction .
5860	Decode a module into a ModuleFragment .
5861	Deprecated function decorator .
5862	Create an asyncio . Task connection .
5863	Close the connection to the server .
5864	Read the response from the reader and parse it .
5865	Handle FastAGI requests .
5866	Parse an AGI result line .
5867	Check AGI code .
5868	Reset all instances to their original state .
5869	Returns a list of the instances of this object .
5870	Get the metadata for a given path .
5871	Returns the primary keys of a model .
5872	Deserialize a value .
5873	Returns an existing instance of the given value .
5874	Override get_declared_fields .
5875	Load a model schema from data .
5876	Split model kwargs and association .
5877	Delete orphan snapshots .
5878	Create a snapshot of a database .
5879	List all available snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Updates indexes after each epoch for shuffling
5885	Return a preprocessed version of text .
5886	Apply a function to data in parallel .
5887	Processes a text constructor .
5888	Process a text string .
5889	Process text in parallel .
5890	Generates stats for document length .
5891	Returns a pandas DataFrame with token counts .
5892	Map a param_type to a list or array .
5893	Parse a list of interfaces .
5894	Returns the inverse of self .
5895	Update with a rollback .
5896	Return a copy of this instance .
5897	Create a copy of this Sentinel .
5898	Returns True if two Mappings have the same order .
5899	Return the inverted value of an argument .
5900	Clears the cache .
5901	Move a node to the end of the node .
5902	Write text to a temporary file .
5903	Return a list of contacts matching the given query .
5904	Merge arguments into config .
5905	Load address books from config . abooks .
5906	Prepare source and target search queries .
5907	Create a new contact from a list of address books .
5908	Returns a list of birthdays for a given vcard .
5909	Search for phone numbers in a list of vcards .
5910	List a list of contacts .
5911	Modify a subcommand .
5912	Remove a contact from the address book .
5913	Executes a subcommand on the selected vcard .
5914	Merge a list of vcards .
5915	Copy or move a subcommand .
5916	Returns the action for the given alias .
5917	Convert a boolean value in a config file to a default value .
5918	Create a new contact .
5919	Create an AddressBook object from a file .
5920	Create a Contact object from a user input .
5921	Create a new contact from an existing contact with a new user input .
5922	Returns a list of names for a given part .
5923	Add a category to the object .
5924	Parse a type value .
5925	Convert a list to a string .
5926	Convert a string to a date .
5927	Compare two uids .
5928	Searches for all contacts matching the given query .
5929	Returns a generator of contact names matching the given query .
5930	Search for a uid .
5931	Search for an address book .
5932	Get a dictionary of short uids .
5933	Returns the short uid for the given uid
5934	Returns a generator of vCard files .
5935	Loads a carddav object from a file .
5936	Get an abook by name .
5937	Returns a dict of available ARM and SPARC architectures .
5938	Return the available ARM and X86 architectures .
5939	Returns a valid argspec for a function .
5940	Dispatch a command to the given parser .
5941	Prompt the user for input .
5942	Encodes the given value into a string .
5943	Given a dictionary of kwargs return a dictionary of kwargs .
5944	Add commands to a parser .
5945	Decorator to add a named attribute to a function .
5946	Decorator to add an arg to a function .
5947	Prompt user for confirmation .
5948	Replace this query with a new query .
5949	Like a pattern .
5950	Returns a cached result .
5951	Return the first entry in the list .
5952	Delete entities of models with foreign key relationships .
5953	Called when an ent is deleted .
5954	Return a lua for a redis prefix .
5955	Estimate the work LUA for a given index and prefix .
5956	Perform a search on a connection .
5957	Count the number of connections in a network .
5958	Return a connection object for the given object .
5959	Convert a string to a full text .
5960	Refresh the indices of a model .
5961	Clean the old index of a model .
5962	Add an object to the database .
5963	Returns the value for a given key .
5964	Write a LUA file to Redis .
5965	Save this object to a dict .
5966	Delete this object .
5967	Get a list of ids .
5968	Register a dispatcher .
5969	Open a semaphore .
5970	Returns the CPU count .
5971	Send a result to the result_queue .
5972	Process a call queue and result queue .
5973	Add a call item to the call queue .
5974	Ensure that the executor is running .
5975	Wrap non - picklable objects .
5976	Start the server .
5977	Duplicates the given file descriptor .
5978	Get a reusable executor .
5979	Wait until all pending work items have been completed .
5980	Returns a dictionary containing the preparation data .
5981	Prepares the data to be passed to the process .
5982	Close all files in keep_fds .
5983	Terminate a process without psutil .
5984	Terminate a process recursively .
5985	Returns the exitcodes of all processes that have been terminated .
5986	Return a string representation of the given exitcodes .
5987	Main semaphore tracker .
5988	Ensure semaphore tracker is running .
5989	A simple event processor that prints out events .
5990	Disassembles the msg and msg_nocr into a single byte string .
5991	Interact with a banner .
5992	Split a string into a list of arguments .
5993	Returns a list of tuples containing f tb_frame and botframe .
5994	Run a list of hooks on an object .
5995	Forgets the current state of the thread .
5996	Get the noerr value for the given argument .
5997	Get an integer .
5998	Process all commands .
5999	Add a file to the queue .
6000	Return the next token in a string at the given position .
6001	Send an error message to the user .
6002	Read a command from the command line .
6003	Closes the connection .
6004	Disassemble a byte string into a byte string .
6005	Disassemble a byte string into a byte string .
6006	Return a count of the number of frames
6007	Get the call function name for a frame .
6008	Print count entries of the stack trace
6009	Lookup a subcmd by its prefix .
6010	Short help for a subcmd .
6011	Add a subcmd_cb to the command list .
6012	Run a subcmd .
6013	Debug the debugger .
6014	Show the commands in a category .
6015	Run Mclifns .
6016	Find a debugged frame .
6017	Map thread names to their ids .
6018	Get an integer value from a command .
6019	Get the on - off value .
6020	Set a boolean value in the debugger .
6021	Runs set_int on the given object .
6022	Show a boolean value .
6023	Run show int on obj .
6024	Show the value of an object .
6025	Check if a line is a DEF statement .
6026	Check if a line is a class definition .
6027	Quit a threaded thread .
6028	Set default bounding box .
6029	Check if r g b is dark rgb .
6030	Return the signature of a frame .
6031	Returns a list of all display objects in the list .
6032	Add a frame to the list of frames .
6033	Returns a formatted string representation of the value .
6034	Read a message from the device .
6035	Call trepan . api . debug
6036	Undefined subcommand .
6037	Run a thread .
6038	Print a simple array .
6039	Lookup the SIG name of a signal .
6040	Lookup a signal by name .
6041	Return the canonic signname of a name .
6042	Set a signal replacement handle .
6043	Check and adjust the signature handlers .
6044	Print information about a signal .
6045	Handle an action .
6046	Handle a print message .
6047	Handle a signal .
6048	Convert a filename to a module name .
6049	Search for a file in a list of directories .
6050	Given a python script and a list of directories return the python script .
6051	All python files caller s dir without the path and trailing . py
6052	Write a message to the output .
6053	Run the python program .
6054	Columnize a list of commands .
6055	Check for post - mortem exceptions .
6056	Close the connection .
6057	Write a message to the server .
6058	Return the complete identifier for a given prefix .
6059	Write a string to the database .
6060	Add an ignore filter .
6061	Returns the canonic filename for the given filename .
6062	Returns the filename of the debugger .
6063	Returns True if the tracer is started .
6064	Check if a frame is a stop here .
6065	Sets to stop on the next event that happens in frame .
6066	Return the stack trace of a file .
6067	Run the debugger .
6068	Check if a frame has a valid function name .
6069	remove breakpoint bp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable all breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete breakpoints by line number .
6074	Open a file - like object .
6075	Read a line from the input .
6076	Prompt the user for confirmation .
6077	r Removes whitespace from a string .
6078	r  d + NUMBER
6079	Convert a query into a Future .
6080	Restore the original login .
6081	Load a CAN_LOGIN_AS module .
6082	Iterate over documents .
6083	Command - line entry point .
6084	Transcode a JSON or CSV file to a stream .
6085	Open a json or csv file .
6086	Normalize the data in a stream .
6087	Convert a string to a datetime object .
6088	Detect the encoding of a file .
6089	Yield json lines from a file .
6090	Transcode a file to UTF - 8 .
6091	Open a csv file somehow py2 .
6092	Read a CSV file .
6093	Translate CSV or JSON input to a JSON stream .
6094	Connect to a Luminoso server .
6095	Save a token to a file .
6096	Make a request to the Luminoso server .
6097	Delete a file or directory .
6098	Wait for a project to complete .
6099	Returns the root url of the given URL .
6100	Save a token to a file .
6101	Make a JSON request to Luminoso .
6102	Send a POST request .
6103	Changes the path of a file .
6104	Get the default account .
6105	Returns the documentation for this project .
6106	Wait for a job to complete .
6107	Make a HTTP GET request and return the response .
6108	Print the result as a CSV .
6109	Read parameters from a JSON file .
6110	Simplify a document .
6111	Create a project with a list of documents .
6112	Upload docs to a project .
6113	Parse command line arguments .
6114	Upload a stream to a Luminoso server .
6115	Upload a file to a server .
6116	Command - line entry point .
6117	Create a new token from a user s credentials .
6118	Login to the server .
6119	Post a login page .
6120	Get the data for a resource .
6121	Fetch data for a given period .
6122	Prepares the view to be imported .
6123	Initialize the view .
6124	Calls the DemoHandler s get method .
6125	Called when a message is received .
6126	Update menus .
6127	Returns a list of default static file handlers .
6128	Called when a JSON message is received .
6129	Called when the DOM is modified .
6130	Create the widget for this element .
6131	Initialize the widget .
6132	Destroy this WebComponent .
6133	Add a child to this component .
6134	Removes a child from this component .
6135	Returns a generator of all child widgets .
6136	Set an attribute of a widget .
6137	Updates the proxy .
6138	Notify the user of a change .
6139	Find the XPath nodes matching the given query .
6140	Initializes and activates the proxy .
6141	Initialize the widget for this component .
6142	Set the source for this component .
6143	Observe a change in the current state of the object .
6144	Observe a change in a block .
6145	Observe the children of the given change .
6146	Read the contents of a file .
6147	Write an error message to stderr and exit .
6148	Error parsing .
6149	Get a product by its name .
6150	Create a new session .
6151	Resets the current store .
6152	Returns a list of stores matching the given search term .
6153	Sets the delivery system for a store .
6154	Get a menu from a store .
6155	Add an item to the basket .
6156	Adds a pizza to a recipe basket .
6157	Add a side to a basket .
6158	Remove an item from the basket .
6159	Sets the payment method .
6160	Process a payment .
6161	Calls the get API .
6162	Perform a POST request .
6163	Call the API .
6164	Append an item to the menu .
6165	Add an exit item to the list .
6166	Draw the cursor to the screen .
6167	Process user input .
6168	Selects the item to be selected .
6169	Parse old menu data .
6170	Return the top value of a DataFrame .
6171	Returns a DataFrame with the top values in a group .
6172	Convert a string to datetime .
6173	Convert a datetime to a string .
6174	Convert a DataFrame to a date format .
6175	Cast a column to a given type .
6176	Return the rank of values in a DataFrame .
6177	Convert a DataFrame to a waterfall dataframe .
6178	Perform a basic math operation on the DataFrame .
6179	Round values in a DataFrame to a specified number of decimals .
6180	Return the absolute values of a column in a DataFrame .
6181	Pivot a DataFrame to the specified index .
6182	Pivot a DataFrame by a set of groups .
6183	Groups a DataFrame by a set of columns .
6184	Compute the cumulative sum of a dataframe .
6185	Add a missing row to the DataFrame .
6186	Decorate a function to catch exceptions .
6187	Log a message to a logger .
6188	Decorator to log the time of a function .
6189	Decorator that logs the results of a function .
6190	Rename a DataFrame .
6191	Compute the cumsum of a DataFrame .
6192	Combine columns for aggregation .
6193	Get the value of a parameter from a function call .
6194	Removes old entries from the cachedir .
6195	Roll a DataFrame up a number of levels .
6196	Returns a DataFrame with the maximum values for the given column .
6197	Given a column and a list of groups return a DataFrame with the minimum values .
6198	Fill a numeric column in a DataFrame .
6199	Add an offset to a date object .
6200	Add nb_months to date object .
6201	Add nb_years to a date object .
6202	Parse a date from a string .
6203	Filter a DataFrame by a date column .
6204	Returns the percentage of a column in a dataframe .
6205	Computes the ada family core .
6206	Returns a list of updates to the training parameters and gradients .
6207	Returns the training parameters .
6208	Update parameters and free parameters for optimization .
6209	The first glimpse sensor .
6210	Sets up the encoder and decoder .
6211	Computes the tensor of x .
6212	Map a function to the training and testing set .
6213	Vectorizes the target to size bytes .
6214	Log information about the training and test set .
6215	Trains the model .
6216	Sample a set of inputs .
6217	Computes aligned weights based on precomputed values .
6218	Compute the context vector .
6219	Concatenate a list of variables along an axis .
6220	Pad the data to the given side and length .
6221	Compute the RMSP of a set of parameters .
6222	Prints the current time in seconds .
6223	Computes and returns the cost for the given data .
6224	Invoke the trainer .
6225	Builds the tensor variables for the loop .
6226	Perform a single scan step .
6227	Computes the momentum of a set of parameters .
6228	Set the iftrain flag .
6229	Skip n_epochs epochs and batches
6230	Load parameters from a file .
6231	Runs a training session .
6232	Run a single training step .
6233	Run a valid epoch .
6234	Write a score map to stdout
6235	Returns the data for the given data_split
6236	Apply a function to the NeuralVariable .
6237	Report accessed parameters to logger .
6238	Returns a tensor of type var .
6239	Create a list of neural variables from a dataset .
6240	Returns a shared version of the value .
6241	Stack encoders on top of each other .
6242	Stack decoders on top of each other .
6243	Encode x into a NeuralNetwork .
6244	Decode x .
6245	Create a 2D gaussian .
6246	Register a layer .
6247	Monitor the outputs of each layer .
6248	Returns a list of all parameters .
6249	Setup the input_tensor and test_output
6250	Compute and return a MapDict .
6251	Save network parameters to a file .
6252	Load parameters from a file .
6253	Returns a dict containing information about the network .
6254	Register a set of parameters .
6255	Register a list of updates .
6256	Register a list of training updates .
6257	Register a list of monitors .
6258	Compute the l2 norm of multiple tensors .
6259	Dump elt_to_pickle to file_obj
6260	Load an elt from a file - like object .
6261	Load the params from a file .
6262	Create a request element .
6263	Decode a state into a JSON string .
6264	Parse X credentials data .
6265	Filter x - request elements based on request type .
6266	Login to a provider .
6267	Normalize a dictionary .
6268	Convert a list of items to a dictionary .
6269	Parse a JSON query string .
6270	Resolve a provider class .
6271	Create a cookie .
6272	Saves the session data to the cookie .
6273	Returns a dictionary containing the data for this object .
6274	Returns a dictionary containing the data for this object .
6275	Returns a hex digest of the secret .
6276	Serialize the value to a string .
6277	Return True if the token is valid False otherwise .
6278	Returns True if the expiration time is less than or equal to seconds .
6279	Serialize credentials to a tuple .
6280	Returns True if content is a binary string .
6281	Returns the content of the response .
6282	Create a request element .
6283	Override _access_user_info .
6284	Decorator to login to FlaskAuthomatic .
6285	Login to the OpenID server .
6286	Return the session key .
6287	Set the session key and value .
6288	Generate a CSRF hash of a secret .
6289	Log a message .
6290	Check if HTTP status is in a given category .
6291	Split url into base and params .
6292	Decorator to enable cross - origin .
6293	Sets the CORS headers for a response .
6294	Returns a dict of the kwargs for a given app instance .
6295	Convert obj into a string .
6296	Ensure that inst is an iterable .
6297	Returns True if a is close to b .
6298	Decorator to mark functions as deprecated .
6299	Deserialize a string into an AudioSegment .
6300	Create an AudioSegment from a file .
6301	Create a NumPy array from a NumPy array .
6302	Execute a Sox command .
6303	Filter the WAV file for silence .
6304	Compute the fft of a time series .
6305	Generates a list of frames from the raw data .
6306	Normalize the SPL of an AudioSegment by average .
6307	Reduce this AudioSegment to a list of AudioSegments .
6308	Resample the audio file .
6309	Serialize the state to a pickle file .
6310	Create a spectrogram .
6311	Given a list of candidate offset front ids and a list of offset front ids and offsets_corresponding_to_onsets return a list of noverlap ids .
6312	Get offset front id after onset sample idx .
6313	Get the offset front id after the given onset front .
6314	Match an offset front id to an onset front id .
6315	Get the frequency indexes of consecutive and overlapping onset fronts .
6316	Update the segmentation mask .
6317	Get the front id from the index .
6318	Get front ids one at a time .
6319	Given a list of onset fronts and a list of offsets return a list of corresponding offsets .
6320	Remove overlaps between fronts and segmentation_mask .
6321	Remove fronts that are too small .
6322	Breaks a list of fronts that are not well matched .
6323	Merge adjacent segments .
6324	Return a list of masks separated by a threshold .
6325	Downsample one or the other of a two - dimensional mask .
6326	Perform an ASAA task .
6327	Apply a bandpass filter to data .
6328	Apply a low - pass filter to data .
6329	Convert a list to a TF input .
6330	Expand and standardize a dataset .
6331	Returns True if a and b are in equal ignore order .
6332	Returns a list of feature scores grouped by similarity_bound .
6333	Loads the confusion matrices from an audit file .
6334	Convert a list to a TF input .
6335	Update the index url from config files .
6336	Autodetect requirements files .
6337	Returns a list of StreamInfo objects for the given wait_time .
6338	Return a list of StreamInfo objects for a given property .
6339	Resolve a predicate by predicate .
6340	Handle an error code .
6341	Push a single sample to the stream .
6342	Push a chunk of data into the data buffer .
6343	Return a StreamInfo object for this stream .
6344	Open a stream to the object .
6345	Called by lsl_time_correction .
6346	Returns the child element with the given name .
6347	Returns the next sibling of this element .
6348	Return the previous sibling of this element .
6349	Sets the name of this object .
6350	Sets the value of this object .
6351	Append a child element to this XML document .
6352	Prepend a child element to this one .
6353	Append a copy of elem to this element .
6354	Returns a copy of this XML element prependicated on the given element .
6355	Remove a child element from this element .
6356	Returns a list of StreamInfo objects for this resolver .
6357	Pair a word with a dictionary .
6358	Execute AUTOCOMPLETE query .
6359	Compute the edge ngrams of a token .
6360	Iterate over processors in a pipe .
6361	Returns an iterator over the tasks in an unordered iterable .
6362	Make a fuzzy word .
6363	Print a word fuzzily .
6364	Do a fuzzily indexed word .
6365	Extend results_extrapoling_relations .
6366	Print help for a given command .
6367	Print information about Redis databases .
6368	Get the value of a DB key .
6369	Generate a geohash from a latitude and longitude
6370	Get a housenumbers document by id
6371	Print the index details for the given id .
6372	Print the best score of a word .
6373	Compute the distance between two strings .
6374	Send a request to a remote server .
6375	Map a list of requests to a single request .
6376	Returns a list of bits from an array .
6377	Reinterpret Harray to bits .
6378	Convert a slice to a SLICE object .
6379	Find all files matching pattern in a directory .
6380	Return the value of a parameter in an iterable .
6381	Static for each item in items .
6382	Logical shift left
6383	Convert a log - number to a hInt .
6384	Checks if a number is a pow 2 number .
6385	c - like case of switch statement
6386	Sets the default of a list of statements .
6387	Registers a VcdWritingScope with the VcdWriter .
6388	Register interfaces and enddefinitions before a synthesis .
6389	Log a change to vcdWriter .
6390	Render a HWProcess .
6391	Automatically adds agents to a unit .
6392	Returns the class that is associated with this unit .
6393	Returns a generator that yields distinct elements of an iterable .
6394	Returns a generator that yields items from a collection grouped by a function .
6395	Flatten iterables to a given level .
6396	Merge ifContainer and ifFalse from another IfContainer .
6397	Remove unconnected signals from a netlist .
6398	Checks if a proc is too simple .
6399	Try to merge two HWProcess .
6400	Convert a list of processes into a single list of processes .
6401	Called when a Write request is received .
6402	Serialize a unit or class to a RTL file .
6403	Given a list of HdlStatements return the name of the process and mark its outputs .
6404	Return a list of all drivers of a signal .
6405	Creates a RtlSyncSignal .
6406	Synthesize the architecture .
6407	getMaxStmIdForStm - Gets the maximum ID for a given STM .
6408	Returns the maximum number of statements in a process .
6409	Write data to sim .
6410	Change the direction of the interface .
6411	Loads the declarations .
6412	Return a list of signals for a given interface .
6413	Returns the physical name of the port .
6414	Returns the bit length of the dtype .
6415	Returns the sensitivity of an operation .
6416	Evaluates the given operator .
6417	Converts the given sigOrVal to the given type .
6418	Reinterpret a sigOrVal to a hstruct .
6419	Returns the full word gap between start and end .
6420	Group items in a transaction by word index .
6421	Print an interface to stdout .
6422	Create a FrameTmpl from a TransTmpl transaction .
6423	Returns a generator that yields all the words in the text .
6424	Packs the given data into a dictionary .
6425	Clean the signal metadata .
6426	Given a list of statements and a list of outputs return a set of the enclosed statements .
6427	Given a list of signals discover the casual sensitivity of each signal .
6428	Return the RTL context of the statement .
6429	Handle a reduction event .
6430	Merge other into self .
6431	Returns True if stmsA and stmsB are merged .
6432	Merge a list of HDL statements into a single HDL statement .
6433	Merge two StatementLists .
6434	Try to reduce a list of statements .
6435	Called when a parent event is dependent .
6436	Sets the parent state .
6437	Register a list of statements to the target .
6438	Destroy this RTL .
6439	Register a container .
6440	Generate a signature for a container .
6441	Clean the interfaces as a subunit .
6442	Returns a generator that yields all the fields of a sigOrVal .
6443	Unpack a HStruct .
6444	Return a signed version of this Operator .
6445	Calculate the sensitivity of a process .
6446	Evaluate a condition in a simulator .
6447	Connect srcName to dstName in direction direction .
6448	Creates an updater function for a given value .
6449	Creates an array updater .
6450	Create a vector from a byte string .
6451	Process a list of statements in a HWProcess .
6452	Evaluates a parameter .
6453	Sets the value of this parameter .
6454	Constructs a HStruct from an input map .
6455	Remove all SyncPorts and AsyncPorts .
6456	Returns the index cascade .
6457	Create a new ValueCls instance from a Python object .
6458	Cast a signature or value to a specific type .
6459	Reinterprets a sigOrVal to a new type .
6460	Iterate over all interfaces in intf . _interfaces .
6461	Connect srcPacked to dstInterface .
6462	Pack an integer into a dictionary .
6463	Hardcodes a rom into a process .
6464	Converts this object to a targetPlatform .
6465	Registers an interface with the given intf .
6466	Try to reduce and return a boolean value .
6467	Try to reduce the value of a XOR .
6468	Returns a NameScope object for the name scope .
6469	Returns a seriazlized representation of obj .
6470	Sets the HdlType of the serializer .
6471	Return a string representation of a IfContainer .
6472	Returns the base condition of a node .
6473	Return a tuple of SimBits with the given width signed .
6474	Returns the name of a constant .
6475	Cuts off all drivers of a sign .
6476	Loads a TransTmpl from an array .
6477	Load a TransTmpl from a HStruct .
6478	Load a bit from a dtype .
6479	Returns the width of the item .
6480	Generates a flattened representation of this transaction .
6481	Signs a value to a given width .
6482	Merge this statement with another statement .
6483	Returns the indentation for the given indentation number .
6484	Check if obj has a property with the given name .
6485	Registers a parameter with the scope .
6486	Updates the parameters of this object with those of another object .
6487	Registers a new unit .
6488	Registers a new interface .
6489	Register an array .
6490	Returns a single driver .
6491	Performs a static eval of all operands .
6492	Create a new RTL Operator with the given operands and resT .
6493	Returns a copy of self with indentation added .
6494	Try to connect to a device if it doesn t exist .
6495	Propagate clk to all units in the object .
6496	Propagate the rst - n of the clk in obj .
6497	Propagate the clk - rst of an object .
6498	propagate rst_n to all units in obj
6499	Propagate the rst of an object .
6500	Iterate over the bits of a value in a signature .
6501	Serializes an exclude evaluation .
6502	Serializes obj once - evaluate .
6503	Serializes paramsUniqEval to a dict .
6504	Returns the full name of the object .
6505	Creates a new association for each node in the list .
6506	Create a SimModel instance for a given unit .
6507	Convert a unit to a SimModel .
6508	Reconnect signals from a synthesised unit or interface to a model .
6509	Convert a SimModel into a vcd .
6510	Initialize onTWriteCallback .
6511	Connect this port to a signal .
6512	Register a signal for this port .
6513	Connects the endpoints to the endpoints .
6514	Returns the internal signature of the object .
6515	Checks if a process is evDependent on a signal .
6516	Add a process to the queue .
6517	Adds a process to the sequence sequence or comb .
6518	Schedules a combUpdateDoneEv event .
6519	Schedules the application of the values .
6520	Returns a boolean indicating whether the newValue conflicted with the resolve strategy .
6521	Runs all the comma - separated processes .
6522	Runs all sequences in the pipeline .
6523	Generates a generator that yields the values to be applied .
6524	Read the value of a signature .
6525	Write a value to a SimSignal .
6526	Add a process to the queue .
6527	Simulate a unit .
6528	Returns a function that maps operands to a signal base .
6529	Converts a list of statements into a list of If statements .
6530	Process a HWProcess .
6531	Calculate the hash distance between two strings .
6532	Calculate the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup the Vizio platform .
6535	Updates the state of the device .
6536	Mute the volume .
6537	Volume up .
6538	Volume down .
6539	Set the volume level .
6540	Resets the piece_bb to its original state .
6541	Returns the piece at the given square .
6542	Remove a piece at a given square .
6543	Set a piece at a given square .
6544	Checks if a move is suicide or a check by dropping a pawn .
6545	Returns True if the turn was a suicide .
6546	Returns True if the game is over .
6547	Returns True if the move is a checkmate .
6548	Returns True if zobrist_hash is a fourfold repetition .
6549	Pops the piece from the stack .
6550	Return a list of string representations of the file .
6551	Pushes the given usi to the current position .
6552	Returns the zobrist hash of the board .
6553	The symbol of the piece .
6554	Construct a PIECE object from a symbol .
6555	Returns the UUID of the piece .
6556	Construct a Piece object from a Unicode string .
6557	Parse a list of commits .
6558	Parse a commit into a dict .
6559	Load the config from the command line .
6560	Execute from a django command line .
6561	Add an argument to the argparse parser .
6562	Load config from a file .
6563	Generates a YAML representation of the class .
6564	Generates a markdown representation of the class .
6565	Cast a value .
6566	Returns a list of dates between two dates .
6567	Parse a date from a string .
6568	Load a currency file .
6569	Set missing rates to None .
6570	Compute the missing rates for a currency .
6571	Get the rate for a given currency and date .
6572	Convert an amount to a currency .
6573	Group an iterable into n lists .
6574	Animate a sequence of frames .
6575	Read a record from the file .
6576	Write a record to the file .
6577	Map words from start to end .
6578	Returns the comment area of the DAF file .
6579	Add an array to the summary_control_struct .
6580	Close the DataFrame .
6581	Compute the position of each position in a tdb .
6582	Close the file .
6583	Load the PCK data .
6584	Compute the coefficients of two tdbs .
6585	Visit a format call node .
6586	Visit a BinOp node .
6587	Check if the given node is in the whitelist .
6588	Check if the node is a JoinedStr .
6589	Check if the given node is in the whitelist .
6590	Returns a new LoggingVisitor with the specified exception handler .
6591	Detect the logging level of a node .
6592	Return the name of the exception handler for the given node .
6593	Returns the id attribute of the given value .
6594	Checks if the given node is a bare exception .
6595	Check if exception info is present in the given node .
6596	Delete a file if it exists .
6597	Returns a widget for the db file widget .
6598	Render a PDF from a template .
6599	Render the PDFTemplateView to a response .
6600	Convert a string to an http quote .
6601	Configure a MONGODB module .
6602	Return an underscored version of a string .
6603	Auto - index a collection .
6604	Parse a price model from a file .
6605	Load a file into a list of strings .
6606	Parse a line of text into a PriceModel .
6607	Translate a symbol into a string .
6608	Load all symbol maps .
6609	Get the current session .
6610	Add a price to the price database .
6611	Import prices from a CSV file .
6612	Print the last price for a security symbol .
6613	List prices .
6614	Download prices from PriceDB .
6615	Remove all price entries with the given symbol .
6616	Get the default session for the price database .
6617	Add a new SymbolMap to the database .
6618	List all price maps .
6619	Get a SymbolMap by its identifier .
6620	Read lines from a CSV file .
6621	Maps an entity to a PriceModel .
6622	Maps a model to a Price .
6623	Read a configuration file .
6624	Returns the path to the config template .
6625	Create the user config file .
6626	Returns the user s config path .
6627	Get the contents of the config file .
6628	Set the value of an option .
6629	Returns the value of the given option .
6630	Save the configuration to a file .
6631	Parse symbol into namespace and mnemonic .
6632	Add a price .
6633	Add a price entity to the price repository .
6634	Downloads the price for the given symbol currency and agent .
6635	Get the current session .
6636	Get all prices for a given date and currency .
6637	Get prices for a given date .
6638	Remove all SecuritySymbols from this repository .
6639	Remove all prices for a security symbol .
6640	Download and parse the price for the given symbol and currency .
6641	Returns a list of securities .
6642	Returns the partial state of the function .
6643	Update child calls .
6644	Returns a generator that yields all the descendants of this node .
6645	Decorator to remove multiple nodes from a function .
6646	Check if the student and solution parts have the same length .
6647	Check if the code and code match inside has_equal_ast .
6648	Check if a string contains the given text .
6649	Check if a package has been imported .
6650	Check if the student outputs the given text .
6651	Check if a node has a printout .
6652	Check if the state has no errors .
6653	Check if correct has been selected .
6654	Check if a function is valid .
6655	Get a result from a process .
6656	Override a solution .
6657	Checks if an instance is in the solution process .
6658	Returns a list of defined items .
6659	Convert to a child node .
6660	Returns a parser object for the given tree .
6661	Check if a context loop exists .
6662	Check if a state has a specific context .
6663	Check if a part has been defined .
6664	Check if the part has the specified index .
6665	Check if the given argument is valid .
6666	Checks a lambda function call .
6667	Returns the true anomaly of the sample .
6668	Initialize the application .
6669	Initialize LDAP configuration .
6670	Add a server to the pool .
6671	Decontextualise a connection .
6672	Teardown the ldap3 manager .
6673	Authenticates a user with LDAP .
6674	Authenticate a user using a direct connection .
6675	Authenticate to LDAP using the search_bind method .
6676	Returns a list of user groups for a given DN .
6677	Get information about a user .
6678	Get user information for a given username .
6679	Get an LDAP object .
6680	Create a connection to the LDAP server .
6681	Create a new connection to the server .
6682	Create a connection to the LDAP server .
6683	Destroy a connection .
6684	Returns a list of objects matching the given query .
6685	Search for a label .
6686	Search for a repository .
6687	Search for all jobs in a collection .
6688	Speak to the client .
6689	Announce a command to the user .
6690	Updates the settings for the Google Drive client .
6691	Update the headers .
6692	Requires client secrets .
6693	Download a file from url to file_name .
6694	Stream a URL and headers to a stream .
6695	Updates the authorization token .
6696	Get a folder or create it if it doesn t exist .
6697	Read a response from the server .
6698	Get the S3 bucket .
6699	Updates the client secrets .
6700	Initialize the clients .
6701	Loads the secret settings .
6702	Return a list of logs .
6703	Returns a list of all containers with a log extension .
6704	Create a new endpoint folder .
6705	Initializes the transfer client .
6706	Search all containers .
6707	Print the status of the backend .
6708	Add a new value to backend .
6709	Remove a variable from a backend .
6710	Activate a backend .
6711	Delete a backend .
6712	Update the base for the given image .
6713	Generate a basic auth header .
6714	Generate a signature for the given payload and secret .
6715	Generate a header signature .
6716	Delete a URL .
6717	Handle HTTP HEAD requests .
6718	Paginate a GET request .
6719	Verify that the certificate is valid .
6720	Remove an image .
6721	Get the version lookup from the version . py file
6722	Return a list of install_requires .
6723	Get the SINGULARITY version .
6724	Check if a software is installed .
6725	Returns the absolute path to the install directory .
6726	Returns the thumbnail of the robot .
6727	Run a command and return its output .
6728	Get the metadata for a given image file .
6729	Update the SREGISTRY_DROPBOX_TOKEN .
6730	Print the output of a response .
6731	Kill all the commands in the command line .
6732	List the logs for a container .
6733	Returns a list of all collections for this account .
6734	Update SREGISTRY_SWIFT_AUTHTYPE .
6735	Update Google Storage secret settings .
6736	Get a singleton client .
6737	Announce an IPython command .
6738	Get the manifests for a given repository .
6739	Get the manifest for a given repo .
6740	Get the download cache for a given destination .
6741	Extract the environment from the config file .
6742	Update the base and artifacts .
6743	Update the private - token .
6744	Returns the metadata for the Gitlab API .
6745	Returns a list of settings for a client .
6746	Get and update a set of settings .
6747	Update a setting .
6748	Authorizes a user .
6749	List all builders in a zone .
6750	Returns a list of templates matching the given name .
6751	Get an IP address from the Cloud Console .
6752	Run the beepboop build
6753	List all containers in the bucket .
6754	Search for all containers in the bucket .
6755	Main entry point for sregistry .
6756	Main entry point for sregistry .
6757	Initialize the database .
6758	Get a singleton build template .
6759	Search shared endpoints .
6760	List all endpoints for a given query .
6761	List all files associated with an endpoint .
6762	Create a shared link with the given query .
6763	Read client secrets .
6764	Returns a list of services for the given version .
6765	Delete an object from a bucket .
6766	Delete an object from the bucket .
6767	Destroy an instance .
6768	Returns a dict of subparsers for the given parser .
6769	Generate a delimiter .
6770	Returns a temporary directory .
6771	Extract a tar archive .
6772	Extract a tar archive .
6773	Get the hash of a file .
6774	Read the contents of a file .
6775	Read data from a JSON file .
6776	Clean up a list of files .
6777	Push an image to Sregistry .
6778	Get or create a collection .
6779	Get a collection by name .
6780	Get a single container .
6781	Returns a list of images matching the given query .
6782	Inspect a container .
6783	Rename an image .
6784	Move an image to a new location .
6785	Remove an image from the container .
6786	Add an image to the registry .
6787	Push an image to the server .
6788	Parse the header of a recipe .
6789	Find a single recipe for a given file .
6790	Create a build package from a list of files .
6791	Run a CYAN build .
6792	Update metadata for a blob .
6793	Format a container name .
6794	Returns True if the user prefers to use color .
6795	Emits an error message .
6796	Write a message to the given stream .
6797	Create a table from a list of rows .
6798	Push an image to a remote endpoint .
6799	Get a template by name .
6800	Get a single image from a repository .
6801	Get a singleton build template .
6802	Update client secrets .
6803	Return a string representation of a class .
6804	Error handling for s3 .
6805	Create a temporary file .
6806	Return a gravatar url .
6807	Returns the Gravatar url for the given email .
6808	Check if email has a Gravatar image .
6809	Returns the url for a Gravatar profile .
6810	Yield chimera blocks .
6811	Calculate the Chimera block quotient .
6812	Enumerate resonance smiles .
6813	Enumerate mol .
6814	Normalizes a molecule .
6815	Apply a transform to a molecule .
6816	Compute the canonicalization of a molecule .
6817	Validate a list of smiles .
6818	Disconnect a metal detector .
6819	Convert smiles to a Chem . Mol object .
6820	Enumerate tautomers using smiles .
6821	Convert smiles to a tautomer .
6822	Normalize and reionize a molecule .
6823	Return the parent tautomer of the given molecule .
6824	Returns the parent fragment of the given molecule .
6825	Return a copy of mol with stereochemistry removed .
6826	Returns the parent isotope of the given molecule .
6827	Return the charge of the parent molecule .
6828	Return a new Molecule that is the parent of this Molecule .
6829	Main entry point for Molvs .
6830	Remove a fragment from a molecule .
6831	Choose the largest fragment of a molecule .
6832	Integrate ivp .
6833	Get github stats .
6834	Returns the number of members of the organization .
6835	Get teams of org .
6836	Get a list of repos .
6837	Returns the total number of contributors for the given repo .
6838	Returns the open and closed pull requests for the given repo .
6839	Get all issues in a repository .
6840	Get the readme for a given repo .
6841	Returns the license for the given repo .
6842	Get all commits for a repository .
6843	Write a github - data . json file to disk .
6844	Write the totals to a file .
6845	Write the list of languages to a file .
6846	Check if a directory exists .
6847	Remove a date from a CSV file .
6848	Returns a list of github organizations .
6849	Create a GitHub Enterprise session .
6850	Check if api_required is exceeded
6851	Connect to a GitHub server .
6852	Query the repositories of an organization or repository .
6853	Get the organization .
6854	Write the stargazers to a file .
6855	Create a new project from a gitlab repository .
6856	Create a new project from a doecode record .
6857	Returns a dict representation of a license .
6858	Get Github traffic .
6859	Get a list of releases for a repository .
6860	Returns a list of referrers for the given URL and repo name .
6861	Returns a dictionary of data for a given url .
6862	Write data to a JSON file .
6863	Writes the list of referrers and views to a file .
6864	Check for data redundancy .
6865	Write data to a file .
6866	Writes the referrers to a file .
6867	Process a DOE CODE json file .
6868	Process a DOE CODE URL and return a list of records .
6869	Process a JSON file or URL .
6870	Login to the GitHub Organization Stats App .
6871	Get the email addresses of the members of the organization .
6872	Write the user and email to a file .
6873	Connect to url with username and password .
6874	Connect to Gitlab .
6875	Query Github repositories .
6876	Convert a git repo to a sloc .
6877	Compute labor hours for a given Sloc .
6878	Removes null values from a dictionary .
6879	Reads a GQL file .
6880	Query GitHub from a file .
6881	Submit a query to the github API .
6882	Prints the current UTC timestamp and waits for it to reset .
6883	Prints a countdown to the console .
6884	Load data from a file .
6885	Save data to a file .
6886	Create a TFS connection .
6887	Create a TFS project analysis client .
6888	Create a TFS core client .
6889	Create a TFS Git Client .
6890	Create a TFS Git Client .
6891	Get a list of Git Repositories for a project .
6892	Get a list of Tfvc repositories for a project .
6893	Get the number of commits for a given year .
6894	Calculate total commits for a given week .
6895	Write the last year commits to a file .
6896	Configure a set of backends
6897	Returns a MetricsInterface for the given thing .
6898	Return the timing of a given stat .
6899	Generate a timer for the given stat .
6900	Decorator to register a timer .
6901	Generate a tag for a given key .
6902	Log timing information .
6903	Log a histogram .
6904	Roll up the count rate and gauge stats .
6905	Order an enumeration field .
6906	Create a new Enum object from a db value .
6907	Convert the value to a python object .
6908	Get a pre - defined value .
6909	Resolve a path into a set of objects .
6910	Convert a dictionary of Term objects into a dictionary of Term objects .
6911	Returns the mean of all values .
6912	Mark the current rate as 1 .
6913	Returns the mean elapsed time in seconds .
6914	Mark a value .
6915	Send a metric to the server .
6916	Serialize a metric to a list of strings .
6917	Format a metric string .
6918	Sends a metric to the server in a buffered manner .
6919	Override get method to raise MissingSetting exception .
6920	Convert JSON data to UTF - 8 if possible .
6921	Get or set the value of an option in a section .
6922	Returns a dictionary mapping a list of ledger codes to their GUIDs .
6923	Returns a list of codes and descriptions .
6924	Maps exact to foreign invoice numbers .
6925	Solve a Sudoku grid .
6926	Create a view handler and return it .
6927	Adds a form view to the given injector .
6928	Creates a method view and returns it .
6929	Create an APIView and let it be used as a view .
6930	Generic API View .
6931	Create a model view set handler .
6932	Read a file descriptor from a file descriptor .
6933	Check if the file descriptor is ready to be read .
6934	Close the connection .
6935	Called when a connection is lost .
6936	Setup a watch request .
6937	Unwatch an alias .
6938	Setup a watch for the given alias .
6939	Setup the aioutils server .
6940	Get an event from the server .
6941	Triggers a TOUCH event .
6942	Returns a boolean indicating whether the test was successful .
6943	Called when a failure occurs .
6944	Close the connection to the server .
6945	Returns True if the network is starved .
6946	Connect to a Nsqd server .
6947	Returns a lookupd query string .
6948	Sets the max_in_flight of the connection .
6949	Called when the user gives up on a message .
6950	Add a callback to the list of listeners .
6951	Remove a callback from a listener .
6952	Trigger a list of listeners .
6953	Publish a message to a topic .
6954	Sets the feature transform .
6955	Performs a prediction on the input data .
6956	Return theta of a given string .
6957	Parse a log file .
6958	Clean up paired fastq files .
6959	Merge default adapters into a single file .
6960	Run trimmomatic .
6961	Reads a depth file .
6962	Plot plasmids from a JSON file .
6963	Sets the template path .
6964	Sets the names of the main channels .
6965	Get the user s channel information .
6966	Render a template .
6967	Return the string representation of the template .
6968	Set the channels for this lane .
6969	Update the main forks for the given sink .
6970	Set a secondary channel for a given source .
6971	Updates self . directives with values from attr_dict
6972	Sets the number of compiler channels in the pipeline .
6973	Set the raw inputs .
6974	Sets the secondary inputs of a channel .
6975	Set the extra inputs for a channel .
6976	Parse coverage header .
6977	Parse an assembly file and populate contigs .
6978	Get the GC content of a sequence .
6979	Filter contigs based on a list of comparisons .
6980	Returns the total length of the assembly .
6981	Write the filtered assembly to a file .
6982	Write the assembly report to a file .
6983	Removes all forks from a string .
6984	Internal fork insanity checks .
6985	Return a list of insanity checks for a pipeline .
6986	Parse a pipeline string .
6987	Get the source lane from a list of pipelines .
6988	Get a list of lane names from a string .
6989	Establish a linear connection with a list of processes .
6990	Fork a connection from source to sink .
6991	Add unique identifiers to a pipeline string .
6992	Remove unique identifiers from a list of pipeline links
6993	Raises an InspectionError if the required files cannot be found .
6994	Given a header return a dict of tuples separated by  t .
6995	Return the human - readable version of a string .
6996	Return the size of a file .
6997	Get pipeline processes .
6998	Clear the internal state of the process .
6999	Update the status of the barrier .
7000	Retrieve a log file from a given path .
7001	Assert that the resource warnings are valid .
7002	Update the status of all processes .
7003	Parse the log file .
7004	Updates the inspection .
7005	Displays an overview of the current process .
7006	Move the cursor up or down .
7007	Right - left padding .
7008	Get the last n lines from the log file .
7009	Prepare the static info files for the pipeline .
7010	Convert a . dag . json file to a dictionary .
7011	Returns the md5 hash of the run .
7012	Get the path of the nextflow . log file .
7013	Generates a FASTA file for the given sample ID .
7014	Main entry point for the pipeline .
7015	Brew innuendo .
7016	Returns a brew recipe with the given name .
7017	List all available recipes .
7018	Validate a pipeline string .
7019	Build the upstream pipeline for a given task .
7020	Builds the downstream pipeline for a given task .
7021	Define a pipeline .
7022	Runs the pipeline for the given tasks .
7023	Returns a string representation of a component .
7024	Write a report to a file .
7025	Parse log files and write a report .
7026	Fix contig names in the asseembly file .
7027	Remove temporary fastq files .
7028	Parse a list of files .
7029	Parse a log file .
7030	Iterate over a set of filters .
7031	Get the contig id from a string .
7032	Returns a dictionary containing the plot data .
7033	Writes the report data to a JSON file
7034	Main entry point for the assembly report .
7035	Parse an assembly file .
7036	Get the summary stats for each contig .
7037	Returns a list of labels for the given window .
7038	Returns the G - C property of a string .
7039	Returns a list of sequences that have a sliding window .
7040	Run skesa .
7041	Write a json report .
7042	Return the index of a list of biased values .
7043	Trim nucleotide bias .
7044	Returns the optimal 5trim and optimal 3trim for a set of samples .
7045	Get summary information from a file .
7046	Check the health of a summary file .
7047	Parse the bowtie log file .
7048	Parse a process name string .
7049	Add a dependency to a process .
7050	Return True if the tree is backwards from the given template .
7051	Build the header .
7052	Build the footer .
7053	Sets the main channels .
7054	Sets up the init process .
7055	Sets the secondary channels .
7056	Sets the status compiler and report compiler channels .
7057	Returns a string representation of a resource dictionary .
7058	Return a string representation of a container .
7059	Returns a string representation of the parameters .
7060	Returns merged parameters as a string .
7061	Returns a string representation of the manifest .
7062	Sets the configurations .
7063	Write a treedag to a file .
7064	Render the pipeline .
7065	Write configs to a file .
7066	Export params to stdout .
7067	Export directives to stdout
7068	Returns a dict of parsed container tags .
7069	Build the fork tree .
7070	Set Kmer range based on max read length .
7071	Main entry point for spades .
7072	Returns the id of the report .
7073	Update the trace_watch .
7074	Update the size of the log file .
7075	Send a live report to the server .
7076	Send a POST request to start live reports
7077	Send a DELETE request to the server .
7078	Convert a fastqc adapters file to a fastqc adapters file .
7079	Runs the fastqc command .
7080	Sends the mash_output to the output file .
7081	mash_output - mash_dist - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash_cutoff - hash
7082	Returns a list of all available build versions for this template .
7083	Read a mash file and generate a dictionary and a list of dictionaries .
7084	Print a message as a colored string .
7085	Parser for procs_dict .
7086	Create a ProcessCollector from a process map .
7087	Guess the compression type of a file .
7088	Returns the range of values in a qual_str .
7089	Returns a list of valid encodings in a range .
7090	Parse a coverage table from a file .
7091	Filter an assembly file based on minimum coverage and coverage info .
7092	Filter a BAM file based on coverage information .
7093	Evaluate minimum assembly coverage .
7094	Get the assembly size and contig size from a file .
7095	Main entry point for assembly mapping processing .
7096	Convert a camel case name to lowercase .
7097	Collect a process map from pkgutil .
7098	Main entry point for dendropy .
7099	Quick hulling of a sample .
7100	Map the W coordinates to the data .
7101	Apply a median filter to X .
7102	Compute the k - rnl of a Gaussian signal .
7103	Compute the SSM of X .
7104	Compute the N - covariance between X and G .
7105	Apply a gaussian filter to X .
7106	Computes the euclidean distance between X and X .
7107	Returns the circular shift of X .
7108	Compute the embedded space of a matrix .
7109	Plot the formatting of the output file .
7110	Plots the boundaries of an Est file .
7111	Plot all labels .
7112	Plot a single track .
7113	Plot a tree .
7114	Returns a list of feat segments for the given feature dimensions .
7115	Converts a list of feat_segments to a list of 2dfmcs .
7116	Compute the similarity between a set of F and a set of bounding boxes .
7117	Fit the model to the given data .
7118	Fit the model to X and Y .
7119	Load the references from an audio file .
7120	Find a sandbox estimate .
7121	Save estimates to a file .
7122	Returns a list of all boundary algorithms .
7123	Get the msaf config for a feature .
7124	Returns a list of FileStruct objects for each audio file in in_path .
7125	Read hierarchical references from a jams file .
7126	Get the duration of a feature file .
7127	Write a list of times to a . msaf file .
7128	Returns the path to a dataset file .
7129	Align segments for a song .
7130	Estimate the number of beats .
7131	Read annotated beats from the JAMS file .
7132	Compute the beat sync features .
7133	Read features from a file .
7134	Write features to a JSON file .
7135	Returns a list of param names .
7136	Compute frames sync times .
7137	Returns a tuple of frame times for this feature .
7138	Returns a list of the features for this audio file .
7139	Select a feature from the features registry .
7140	Preprocesses the MSAF feature string .
7141	Postprocesses a set of indices and labels .
7142	Runs the MSAF formatted dataset .
7143	Print the results to stdout
7144	Compute gt results from a gt file .
7145	Compute the information gain .
7146	Process a track .
7147	Returns a file name for the results file .
7148	Process a msaf result file .
7149	Adds a config variable .
7150	Compute all features for a given audio file .
7151	Processes a set of dataset files .
7152	Return the gaussian cost of X .
7153	Lognormalize a function .
7154	Normalizes a function from min to max .
7155	Normalize X according to norm_type .
7156	Returns the number of frames in a time series .
7157	Remove empty segments .
7158	Sonify clicks .
7159	Synchronize new and old labels .
7160	Processes the segmentation level .
7161	Align the end of two hierarchies .
7162	Compute the distance to the node at idx .
7163	Estimate the K - k - knee .
7164	Get clustered data .
7165	Run K - Means .
7166	Computes the Bias - Laplacian distribution .
7167	Calculate the magnitude of X .
7168	Convert a JSON file to a numpy array of bounds .
7169	Convert json bounds to a numpy array .
7170	Convert a JSON file to a list of labels .
7171	Convert a JSON file to a list of beats .
7172	Compute the ffmc2d of X .
7173	Compute the label frames for a filter activation matrix .
7174	Filter activation matrix .
7175	Returns a module for the given boundaries_id .
7176	Returns the module for the given labels_id .
7177	Run hierarchical segmentation .
7178	Run a flat file - like object .
7179	Run a set of algorithms on a file .
7180	Process a track .
7181	Process a msaf file .
7182	Update the W - matrix .
7183	Translate a file - like object .
7184	Decorator to initialize a function with a coroutine .
7185	Return the accumulator of init and update .
7186	Set a translation task .
7187	Iterate over an iterable and yield words .
7188	Return the source code for the given target .
7189	A decorator that pushes the URL of an interface to the server .
7190	Translate a phrase from source to target .
7191	Returns a translation table for a given language .
7192	Print a translation table in a given language .
7193	Remove nodes from a network .
7194	Convert network to Pandas HDF5 file .
7195	Create a network from a pandas HDF5 file .
7196	Set node_ids to variable .
7197	Returns a pd . Series that aggregates all the variables at a given distance .
7198	Get node ids from x_col and y_col .
7199	Plot a scatter plot .
7200	Set the POI for a category .
7201	Finds the pois in a category within a given distance of the imp .
7202	Return the low - connectivity nodes .
7203	Process a node .
7204	Make an OSM query .
7205	Build a query for a node .
7206	Returns a DataFrame of nodes matching the OSM query .
7207	Check if value is a regular expression .
7208	Compare a value with an expectation .
7209	Decorate a function to be fluent .
7210	Compare an expression with a value .
7211	Trigger methods based on a list of arguments .
7212	Returns True if the request matches one of the specified matchers .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Sets the body of the request .
7216	Serialize data to JSON .
7217	Set the value of a key in the container .
7218	Append a list of functions or methods to a target .
7219	Trigger a request .
7220	Add a URL matcher to the request .
7221	Add headers to the request .
7222	Ensure headers are present .
7223	Ensure headers are present .
7224	Set the content - type of the request .
7225	Add params to the request .
7226	Add a body matcher to the request .
7227	Adds a JSONMatcher to the request .
7228	Add an XMLMatcher to the request .
7229	Read a file from the filesystem .
7230	Persist the object .
7231	Set a RuntimeError .
7232	Returns a Response object with the given status .
7233	Matches a request to this mock .
7234	Activate a coroutine function asynchronously .
7235	Sets the mock engine .
7236	Enables or disables networking for a list of hostnames .
7237	Add a mock to the engine .
7238	Remove a mock .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Returns True if the request should use the network .
7242	Returns True if the request matches any of the filters .
7243	Return a copy of this request .
7244	Activate a function .
7245	Activate or disable an engine .
7246	Add an interceptor to the engine .
7247	Remove an interceptor by name .
7248	Returns the value of a key in the settings dictionary .
7249	Returns the decrypted column and params as SQL .
7250	Add a new hash to model_instance .
7251	Returns a placeholder for the given value .
7252	Returns a decrypted column for the given alias .
7253	Returns the PGP key for the given value .
7254	Load a YAML document and hunt for duplicate YAML keys .
7255	Computes the base regression of a Q matrix .
7256	Returns the covariance matrix .
7257	Return a recursive representation of the tree .
7258	Calculate the averages of the tree .
7259	Propagate the averages of tv bv and var .
7260	Returns the explained variance of the tree .
7261	Returns a ClockModel for the given slope .
7262	Find the best root of the tree .
7263	Set Tc values and Timepoints of equal length
7264	Calculate the number of branches in the tree .
7265	Returns the cost of merging a branch .
7266	Attaches this clade to the tree .
7267	Optimize the coalescent time scale .
7268	Convert a profile to a sequence .
7269	Normalize a profile .
7270	Sets the GTR of this site .
7271	Set GTR model in TreeAnc class
7272	Sets the sequence length of the tree .
7273	Attach sequences to nodes in the tree .
7274	Prepare the tree .
7275	Prepare the nodes in the tree .
7276	Calculate the dist2root of the tree .
7277	Reconstruct ancestral sequences based on method .
7278	Returns the mutation matrix of a branch .
7279	Returns the expanded sequence of the given node .
7280	Walk up the tree and create the Fitch profiles
7281	Given a node and a position return the state of the node .
7282	Returns the intersection of two Fitch arrays .
7283	Returns the LH of the sequence at the given position .
7284	Returns the ancestral likelihood of the tree .
7285	Converts the branch length of a node to a GTR .
7286	Optimize the branch length of the tree .
7287	Runs branch length optimization on the global tree .
7288	Returns the optimal branch length for the given node .
7289	Optimize sequences and branch length .
7290	Gets the reconstructed alignment for the tree .
7291	Computes the Q of the matrix .
7292	Creates a new GTR with the given parameters .
7293	Return a standard JC69 K80 F81 HKY85 T92 TN93 .
7294	Check if we can fix the diagonal of the Q .
7295	Computes the prob_t of a sequence at a given time .
7296	Computes the optimal time between two sequences .
7297	Compute the optimal T for a given seq_pair .
7298	Computes the probability t of a set of profiles .
7299	Evolve a profile at a given time .
7300	Return the log - likelihood of a sequence .
7301	Sets the branch length mode of the tree .
7302	Apply a clock filter to the tree .
7303	Plot the root to the tip of the tree .
7304	Resolve polytomies in the tree .
7305	Prints the log - likelihood of the tree .
7306	Add a coalescent prior to the tree .
7307	Find the best root position in the tree .
7308	Ensure that a tree exists .
7309	Create a GTR from a list of parameters .
7310	Read a vcf file if it exists .
7311	Reconstruction of the ancestral tree .
7312	Calculate the FWHM for the given distribution .
7313	Return the delta function at x_pos .
7314	Multiply a set of distributions .
7315	Assign dates to nodes in the tree .
7316	Setup tree regression .
7317	Make a TimeTree with temporal constraints .
7318	Returns the log likelihood of the time tree .
7319	Converts the tree from datetime to timedelta .
7320	Calculate the date uncertainty due to rate of a node .
7321	Get the maximum posterior region of a node .
7322	Return the minimum of the interpolation object .
7323	Compute the median interpolation of a grid .
7324	Convert a datetime object to a numeric date .
7325	Create a DC object from a regression model .
7326	Create a connection to the Guacd server .
7327	Close the connection to the server .
7328	Receive an instruction from the server .
7329	Send data to the server .
7330	Send an instruction to the server .
7331	Start a guacamole handshake .
7332	Convert unicode string to UTF - 8 .
7333	Load an instruction .
7334	Encodes a string into ELEM_SEP .
7335	Return the encoding of the instruction .
7336	Returns the url for a class .
7337	Returns the URL for this instance .
7338	Returns the URL for a class .
7339	Download a file or directory .
7340	Returns the parent object of this job .
7341	Ask SolveBio for credentials .
7342	Login to solvebio .
7343	Check if the user is logged in .
7344	Print a message indicating that the user is logged in .
7345	Returns a new Filter instance with the given filters .
7346	Return a clone of a chromosome within a given range .
7347	Return the clone of the given chromosome at the given position .
7348	Returns a dict of facets .
7349	Process a list of filters .
7350	Returns the next page .
7351	Execute a query .
7352	Migrates a Dataset to another Dataset .
7353	Main entry point for SolveBio .
7354	Download all files from remote_path to local_path .
7355	Construct an instance from a list of values .
7356	Logout from OAuth2 .
7357	Make a request to the API .
7358	Returns the child object of this task .
7359	Cancel the job .
7360	Parse the SNPEFF info string .
7361	Convert a row to a dictionary .
7362	Returns a list of credentials .
7363	Save the configuration to a file .
7364	Convert a value to a formatted string .
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Format a table .
7370	Migrate a Dataset to another Dataset .
7371	Validate a full path .
7372	Upload a file or directory to a remote repository .
7373	Validate a full path .
7374	Validate API host URL .
7375	Add a file or directory .
7376	Annotate a list of records .
7377	Evaluate the expression .
7378	Sets the format name .
7379	Register a new output format handler .
7380	Formats the input data using the specified format name .
7381	Returns an iterator over the data in a tabular format .
7382	Returns the user s config directory .
7383	r Returns a list of system config directories .
7384	Reads the default config file .
7385	Read all config files .
7386	Returns the path to the user config file .
7387	Return a list of system config files .
7388	Returns a list of paths to additional files .
7389	Write the default config file .
7390	Read a list of config files .
7391	Truncates a string to a specified width .
7392	Replace a string with a new string .
7393	Call a list of commands in a sequence .
7394	Applies the given options to the given command .
7395	Applies a command to an option .
7396	Set the branch to master and fix to False .
7397	Run the pep8radius fix command .
7398	Runs clean_docs html_docs html_docs view_docs .
7399	Return a truncated version of a string .
7400	Formats the data and headers according to the specified format .
7401	Returns a string representation of a row .
7402	Create a vertical table .
7403	Generate a table from a list of headers .
7404	Render a template file to dst_file .
7405	Returns True if the given type is a numeric type .
7406	Returns True if the given type is a bool .
7407	Returns True if the given type is a binary type .
7408	Generates a key from a template .
7409	Generates a key pair .
7410	Returns a list of objects matching the template .
7411	Insert a QR image .
7412	Export a gene panel .
7413	Returns the first day of the given weekday .
7414	Repeats the count for a given day .
7415	Count the number of times a date repeats itself .
7416	Helper function for biweekly events .
7417	Handle a single chunk event .
7418	Returns a list of all variants in a document .
7419	Export a list of verified variants .
7420	Export variants to MT format .
7421	Add a role to a user .
7422	Return a list of variants for the given institute and case .
7423	Returns a variant for the given institute and case .
7424	Returns a string representation of a variant .
7425	Verify a variant .
7426	Redirect to cases . clinvar_submissions
7427	Returns a list of cancer variants in a case .
7428	Post a variant acmg .
7429	Get an evaluation for the given evaluation_id
7430	Returns the acmg for the given criteria .
7431	Upload a panel to the institute .
7432	Downloads a verified Excel file .
7433	Returns a dict mapping hgnc_ids to their aliases .
7434	Add incomplete penetrance info to genes .
7435	Given a list of hgnc ids and a list of mim2gene ids and a list of mim2gene ids and hpo ids and hpo ids and hpo ids and hpo ids and hpo ids and hpo ids and hpo ids and hpo ids and hpo ids and hp
7436	Make a request to the Matchmaker API .
7437	Returns a list of all nodes connected to the Matchmaker server .
7438	Get the coordinates of a cytoband at a given position .
7439	Returns the subcategory for the given ref_len .
7440	Get the length of a file .
7441	Get the end of a file .
7442	Parse variant coordinates .
7443	Parse a cytoband file .
7444	Parse a panel CSV file .
7445	Update a panel .
7446	Export a panel to a PDF .
7447	Edit a gene .
7448	Load a delivery report .
7449	Return a list of hpo phenotypes for a query .
7450	Run scout view users
7451	Build a phenotype object for the given phenotype_id .
7452	Get a gene from a hgnc_id
7453	Convert a list of HGNC genes to a dictionary .
7454	Returns a list of institutes accessible to the user .
7455	Run scout view of transcripts
7456	Display events for a given day .
7457	Return a list of variants for a given case .
7458	Returns a list of variants matching the variants query .
7459	Returns a string representation of a variant .
7460	Create a SV variant .
7461	Parse a variant .
7462	Returns the header for exporting variants .
7463	Get variant information for a list of genes .
7464	Get predictions for a list of genes .
7465	Generate a variant case .
7466	Find a bai file .
7467	Returns a list of observations for the given variant .
7468	Parse a gene object .
7469	Return a string representation of a transcript .
7470	Return the end position of a variant .
7471	Return the frequency of a variant .
7472	Returns the human readable version of a clinsig variant .
7473	Return a link to a thousandg variant .
7474	Returns a link to a cosmic variant .
7475	Generate a beacon link for a variant .
7476	Generate a URL for a UCS variant .
7477	Return a human readable representation of a spidex variant .
7478	Return expected inheritance of a variant .
7479	Returns a list of callers for a given variant object .
7480	Return a list of variants for a given cancer case .
7481	Export clinvars .
7482	Get clinvar submission .
7483	Returns an acmg dictionary for a variant .
7484	Post an evaluation for a variant .
7485	Returns an evaluation for the given evaluation object .
7486	Upload HGNC symbols to a panel .
7487	Creates a verified excel file .
7488	Export all genes to . bed format
7489	Parse a CLN signature .
7490	Parse a list of compounds .
7491	Export scout genes .
7492	Build an individual with the given id .
7493	Load variants from scout .
7494	Create a case for a given institute .
7495	Run scout view collections
7496	Load an institute .
7497	Update an institute .
7498	Get the file handle for a given file path .
7499	Returns the net for a given request .
7500	Returns the next and previous element of a net .
7501	Check if year month and error are valid .
7502	Check if a date is a weekday .
7503	Parse case data .
7504	Add peddy information to the config file .
7505	Parse an individual from a Pedigree .
7506	Parse a list of samples into a list of individuals .
7507	Parse a case configuration .
7508	Parse a PED file into a FamilyParser .
7509	Build an evaluation for a given variant .
7510	Export mitochondrial variants for a scout case .
7511	Returns True if pvs is pathogenic .
7512	Returns True if pvs is likely to be pathogenic .
7513	Returns True if bs_terms is likely to be benign False otherwise .
7514	Get the acmg prediction from a list of terms .
7515	Add gene information to a variant .
7516	Fetch variants from a case .
7517	Return a list of sanger variants .
7518	Find a variant in a document .
7519	Returns a list of gene variants .
7520	Check if an institute has been verified .
7521	Get causals for a case .
7522	Checks if the variants in the case_obj match the variants in the institute_obj
7523	Iterate over the Causatives of a variant .
7524	Delete variants for a case .
7525	Returns a list of variants that are overlapping the given variant .
7526	Returns a list of variants that have been evaluated .
7527	Returns a VCF file for a region .
7528	Retrieve a sample of variants for a given subject .
7529	Get a connection to MongoDB .
7530	Given a list of variant ids and a list of form fields return a list of submission objects .
7531	Returns the CLINVAR_HEADER for a list of submission objects .
7532	Given a list of submission objects return a list of submission lines .
7533	Load and parse ensembl transcripts .
7534	Load the OMIM gene panel .
7535	Build an exon from a chromosome .
7536	Delete a panel .
7537	Delete all indexes in the scout database
7538	Delete a user from the database
7539	Delete genes for a given build .
7540	Delete exons from a build .
7541	Delete a case .
7542	Retrieve individuals from a scout .
7543	Parse a list of MatchMaker objects for a patient .
7544	Run scout view of institutes
7545	Load a user from the store .
7546	Login to Google .
7547	Build an institute with the given display name .
7548	Delete an event .
7549	Create a new event .
7550	Fetch all events for a given variant .
7551	Returns a list of events for a user .
7552	Add a phenotype to a case .
7553	Remove a phenotype from a case .
7554	Create an event for a comment on a variant .
7555	Parse genotypes .
7556	Check the coordinates of a chromosome .
7557	Return the hpo_terms dict .
7558	Export scout transcripts .
7559	Load exons from ensembl .
7560	Load a region .
7561	Return all events for a given month in a given year .
7562	Return a list of objects that are currently live .
7563	Parse the requirements . txt file .
7564	Get an existing gene .
7565	Update a gene panel .
7566	Create a new panel .
7567	Export a panel to the store .
7568	Returns a dictionary of archive information .
7569	Migrate a scout case .
7570	Migrate a case from one archive to another .
7571	Run scout load research .
7572	Load hgnc genes from the omim api .
7573	Run scout view hpo
7574	Create a Flask application .
7575	Configure extensions .
7576	Register blueprints .
7577	Configure the coverage .
7578	Run scout view aliases
7579	Build a panel .
7580	Exports the verified variants for the given collaborator .
7581	Export variants to scout .
7582	Return a vcf entry for a variant .
7583	Serve a MongoDB server .
7584	Generate a MD5 key from a list of arguments .
7585	Initializes a MONGO application .
7586	Setup the database .
7587	Run scout index .
7588	Setup scout database .
7589	Run scout setup
7590	Setup scout - demo .
7591	List institutes .
7592	Parse genetic models .
7593	Run scout view panels
7594	Add an institute to the database .
7595	Update an institute .
7596	Fetch a single institute .
7597	Checks if a date is a valid date .
7598	Convert a date to a datetime object .
7599	Generate a list of hpo genes .
7600	Parse a rank score entry .
7601	Add a user to an institute .
7602	Test a connection to a MongoDB server .
7603	Initialize a MONGO application .
7604	Load a delivery report .
7605	Add a user to the database .
7606	Pileup vcf alignments .
7607	Load exons from ensembl transcripts .
7608	Update the compounds in a case .
7609	Add links to a gene object .
7610	Return an hgnc adapter .
7611	Parse a HGNC line .
7612	Parse a list of hgnc genes .
7613	Get an open clinvar submission for a user and institute .
7614	Updates a clinvar submission id .
7615	Returns the clinvar_subm_id for the given submission_id .
7616	Add new variants and case data to clinvar submission .
7617	Update clinvar submission status .
7618	Retrieve all clinvar submissions for a user and institute .
7619	Deletes a clinvar object .
7620	Convert a case to clinVars .
7621	Parse an hpo - obo file into a dictionary .
7622	Returns a list of all known genes .
7623	Returns a list of genes associated with a controller .
7624	Returns a list of genes .
7625	Check if the given panels exist in the database .
7626	Load clinical SNV variants from the database .
7627	Load a scout case .
7628	Decorator to mark a function as templated .
7629	Find an institute and case .
7630	Returns a list of institutes for a login user .
7631	Returns the hgnc_id for the given gene_info and adapter
7632	Update a panel .
7633	Load disease terms from the omim gene panel .
7634	Load the hpo disease terms from genemap_lines .
7635	Parse frequencies from a variant and transcripts .
7636	Parse the frequency of a variant .
7637	Parse variant frequency information .
7638	Run scout view users
7639	Build a hgnc gene .
7640	Load a panel from a parsed panel .
7641	Load OMIM - AUTO panel .
7642	Compare two MIM panels .
7643	Update MIM version for new genes .
7644	Add a gene panel to the database
7645	Get a panel by its id .
7646	Delete a panel .
7647	Fetch a gene panel .
7648	Returns a list of gene panels .
7649	Converts a case object into a list of panels .
7650	Updates a panel .
7651	Add a pending action to a panel .
7652	Apply pending updates to a panel .
7653	Returns a set of clinical symbols in a case .
7654	Returns a list of cases .
7655	Emits a SMTP message .
7656	Load indexes from the database .
7657	Update all indexes in the collection .
7658	Drop all indexes .
7659	Build a MongoDB variant query .
7660	Build a MongoDB query .
7661	Create a CLINSIG query .
7662	Add genomic coordinates to the query .
7663	Add panel and genes - related parameters to the query
7664	Wipe the database .
7665	Parse a panel from a CSV file .
7666	Build a clnsig object from a dictionary .
7667	Load a gene bulk .
7668	Loads a list of transcript objects into the collection .
7669	Loads a list of transcript objects from the exon collection .
7670	Fetch an hgnc gene .
7671	Return the hgnc_id for a given hgnc_symbol .
7672	Fetch genes with a given HGNC symbol .
7673	Fetch all genes .
7674	Return the number of genes in a given build .
7675	Drop the HGNC gene collection .
7676	Drops the transcripts collection .
7677	Drop the exons collection .
7678	Fetch all ensembl transcripts
7679	Convert hgnc_symbol_to_gene .
7680	Get a gene by alias .
7681	Fetch all genes by alias
7682	Fetch all ensembl genes .
7683	Return the hgnc_symbol for the given alias .
7684	Add a hgnc id to a list of genes .
7685	Get the coding intervals for the given genes .
7686	Update the omim gene panel .
7687	Get all cases for a given institute .
7688	Create a case for a given institute .
7689	Returns a list of matches for the given institute and case .
7690	Match a case with a matchmaker .
7691	Delete a matchmaker case .
7692	Returns a report of a case .
7693	Download a pdf of a case report .
7694	Returns a link to diagnose a case .
7695	Get a list of phenotypes for a given case .
7696	List actions for phenotypes .
7697	List events for a given case .
7698	Get the status of a case .
7699	Assign a case to an institute .
7700	Return a list of hpoterms .
7701	Marks a validation for a variant .
7702	Mark a variant as causal .
7703	Get the delivery report for a case .
7704	Share a case with a collaborator .
7705	Rerun a case .
7706	Opens a case for a given institute .
7707	Convert a VCF to a cytosure file .
7708	Send multiqc data to a controller .
7709	Returns a list of cases .
7710	Returns the case report content .
7711	Return a dict containing the coverage report content .
7712	Returns a list of submissions for a given user and institute .
7713	Export MT files to Excel .
7714	Update a synopsis for a case .
7715	Return a list of diseases associated with a set of HPOs .
7716	Convert a VCF to cytosure .
7717	Create a multi - case case for a given institute .
7718	Get a sanger unevaluated variant .
7719	Add a patient to a Matchmaker database .
7720	Delete a case from Matchmaker .
7721	Returns a list of mme matches for the given case and institute .
7722	Matches a MME submission .
7723	Run scout update genes
7724	Parse variant callers .
7725	Build a single transcript .
7726	Load an institute into the database .
7727	Parse a CADD entry for a variant .
7728	Parse case data .
7729	Updates a variant .
7730	Update the variant rank for a case .
7731	Update variant compounds .
7732	Update the compound objects for the given variants .
7733	Update mongo compound variants .
7734	Update case compounds .
7735	Loads a variant from the database .
7736	Upsert a variant in the database .
7737	Load variants in bulk .
7738	Assign a case to a user .
7739	Share a case with a collaborator .
7740	Diagnose a case .
7741	Mark a case as checked .
7742	Order validation for a variant .
7743	Return a list of sanger events for a given institute or user .
7744	Validate a variant .
7745	Mark a case as causative .
7746	Create event for updating dismiss variant .
7747	Update a variant s acmg .
7748	Parse a list of ids .
7749	Parse a simple id .
7750	Parse a document ID .
7751	Convert a panel to a HGNC header .
7752	Given a variant object and a family ID return a new variantantid .
7753	Returns the number of cases in the collection .
7754	Update the dynamic gene list .
7755	Fetches a single case .
7756	Delete a case .
7757	Add a case to the database .
7758	Replaces an existing case with a new one .
7759	Update a Caseid case .
7760	Submit an evaluation for a variant .
7761	Get all evaluations for a variant .
7762	Parse Ensembl transcripts .
7763	Parse ensembl gene request .
7764	Parse an Ensembl transcript request .
7765	Parse an Ensembl line .
7766	Parse ensembl genes from a file .
7767	Parse ensembl exons .
7768	Parse an Ensembl exon request .
7769	Initialize a logger .
7770	Parse an omim line .
7771	Parse OMIM morbid lines .
7772	Returns a set of phenotypes found in the genemap .
7773	Genemap mim2gene and phenotypes .
7774	Convert a string to a number .
7775	Formats a month table .
7776	Formats a day and weekday .
7777	Formats a month name .
7778	Helper function for popovers .
7779	Get information about a panel .
7780	Parse a gene into a dict .
7781	Parse a list of gene lines into a list of HGNC identifiers .
7782	Parse gene panel .
7783	Run scout view diseases
7784	Run scout update hpo
7785	Returns a dict of all users in the store .
7786	Parse dbNSFP_GERP RS phylop dbNSFP_phylop 100way_vertebrate
7787	Parse a variant s conservation score .
7788	Returns a dictionary of general case information .
7789	Returns a list of case groups .
7790	Render the context to a json response .
7791	Returns the year and month for a given query string .
7792	Check for cancelled events .
7793	Fetch an hpo term .
7794	Return a list of hpo terms .
7795	Returns the disease term for a given disease identifier
7796	Returns a list of all disease terms .
7797	Load a disease term into the database .
7798	Generate a list of genes for a list of hgnc_ids .
7799	Read an HDF5 file .
7800	Sets up the frequency ranges .
7801	Setup time axis .
7802	Read a filterbank from a file .
7803	Compute the LSTM coordinates of the telescope .
7804	Blank an interger number of coarse channels from the DC bin .
7805	Print information about the device .
7806	Calculate the extent of a plot .
7807	Plot a waterfall .
7808	Plot a time series .
7809	Write the sigproc header to a file .
7810	Called to calibrate band - pass N1 .
7811	Convert data to coarse - grained data .
7812	Apply Kullback s algorithm to a matrix .
7813	Calculate the gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma
7814	Calculate the fracpols of a string .
7815	Write a waterfall to a polfils file .
7816	Returns the index of the closest array to the given value .
7817	Rebin a dataframe .
7818	Unpack an 8 - bit integer into an 8 - bit integer .
7819	Get the difference between two waterfalls .
7820	Plot a diode of stokes .
7821	Plot a calibrated diode .
7822	Plots the gain offsets of a diode .
7823	Open a file and return an H5Reader object .
7824	Sets up the selection range .
7825	Calculate the size of the selection .
7826	Calculate the selection shape .
7827	Setup the channels in the file .
7828	Sets up the frequency ranges .
7829	Populate the timestamps in the file .
7830	Populate the frequency ranges .
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Returns True if the selection is heavy .
7834	Read data from the header .
7835	Read all data from the file .
7836	Read a single row from the file .
7837	Read data from the container .
7838	Update the header .
7839	Print information about the file .
7840	Write file to filename_out .
7841	Write to HDF5 file .
7842	Write data to hdf5 file .
7843	Get the blob dimensions for a given chunk size .
7844	Returns a tuple of the chunk dimensions .
7845	Grab the data for a plot .
7846	Command line utility for creating spectra from GuppiRaw files .
7847	Read the first header from the file .
7848	Find the number of data blocks in the file .
7849	Print the stats .
7850	Plot histogram .
7851	Generate the header for the filterbank .
7852	Find the size of the header of a file .
7853	%prog batch_script
7854	Command line utility for creating HDF5 Raw files .
7855	Calculate the fold - cal of a time series .
7856	Integrate a waterfall using foldcal .
7857	Calculate the calfluxes .
7858	Returns the center frequency of a frequency matrix .
7859	Compute the frequency ratios .
7860	Calculate the diode spec .
7861	Calculate the TSys of a diode .
7862	Called to calibrate the fluxes of a waterfall .
7863	Return the length of the header of a file .
7864	Check if filename is a filterbank .
7865	Fixes the header of a file .
7866	Generate a sigproc header for a file .
7867	Convert an angle string to a sigproc angle string .
7868	Calculate the number of bits in a file .
7869	Serializes this frame to a dictionary .
7870	Add a subparser to subparsers .
7871	Create a ZonefileLineParser .
7872	Remove comments from a string .
7873	Add a default name to a string .
7874	Parse a line of supported records .
7875	Parse a list of lines into a json zone file .
7876	Parse a JSON zone file .
7877	Quote a field .
7878	Parse an Avro schema string .
7879	Convert a list of classes to a python package .
7880	Convert a pyschema . schema to a python class source .
7881	Defines a decorator that disables auto_store .
7882	Dump record in json - encoded object format
7883	Load a JSON record from a dictionary .
7884	Load a json record .
7885	Add a record to a schema .
7886	Get a record by name .
7887	Returns an OrderedDict of the vars .
7888	Returns a mixin class for the given mixin class .
7889	Create a new record from a class .
7890	Returns a SchemaGenerator instance for the given record .
7891	Returns a dict of the root schema for the given record .
7892	A generator that reads lines from the input_stream .
7893	Write a list of outputs to output_stream .
7894	Push a value to the front of an ordered dictionary .
7895	Returns a SearchResult for the given query string .
7896	Returns a search result with the given filters .
7897	Returns a list of Entities that include the given attributes .
7898	Returns an Entity from a href .
7899	Returns a new quote for a given quote .
7900	Escapes quotes from a string or string .
7901	Returns an elementary rotation matrix .
7902	Construct a covariance matrix .
7903	Returns the avg of the vmag of spt .
7904	Calculate the parallax error .
7905	Calculate the magnitude error of a graph G .
7906	gMagnitudeError EoM .
7907	Makes a plot from the given args .
7908	Returns the average number of transits for a given beta .
7909	Returns the angular distance between two points .
7910	Transform cartesian coordinates to dot coordinates .
7911	Convert sky coordinates to cartesian coordinates .
7912	Transforms the covariance matrix .
7913	Returns the error scaling factor for the given observable .
7914	Makes a plot of the current axis .
7915	Makes a plot of the gRvs and hsv
7916	Decorator to apply one or more functions to a value .
7917	Decorate a method to raise a HelpfulFailure if it fails .
7918	Returns a uniquote of the given value .
7919	Returns a collection containing each item in the collection .
7920	Explicitly apply a function to the filter .
7921	Returns a collection filtered by func .
7922	Returns a collection of items taken while the given function is called .
7923	Returns a new Collection that will be dropped while the given function is called .
7924	Zip a collection of items together .
7925	Find a node .
7926	Return the absolute path to the serach iaca file .
7927	Returns an iterator over the characters in a group .
7928	Generate options from a regdescr .
7929	Convert an event tuple into a string .
7930	Build a list of minimal runs from a list of events .
7931	Print the results to stdout
7932	Print the results to stdout
7933	Print results to stdout .
7934	Remove pragmas and macros from the code .
7935	Round x to the next base value .
7936	Given a list of indices and a block_size return a list of blocks .
7937	Calculate the access to the cache .
7938	Calculate the number of cycles for each cacheline .
7939	Calculate the flops per iteration .
7940	Runs the IACA analysis .
7941	Strip and uncomment a list of asm lines .
7942	Strip unreferenced labels from asm_lines .
7943	Select the best block from a list of blocks .
7944	Selects the number of bytes to increment a block .
7945	Select a block from the assembly file .
7946	Insert markers between start_line and end_line .
7947	Perform iaca instrumentation .
7948	Main entry point for kerncraft .
7949	Simulate a model .
7950	Returns a generator that yields a number of integers between start and stop .
7951	Get the datetime of the last modified file in a directory .
7952	Check if the arguments are valid .
7953	Run the command line interface .
7954	Recursively merge two or more pickle files . Only supports pickles consisting of a single dictionary object .
7955	Return a sympy . Symbol with positive and integer positions .
7956	Transform a multidim declaration to a 1d declaration .
7957	Transform a multidim array reference to a 1d reference .
7958	Find the type of a node .
7959	Decorator to force an iterable to be returned .
7960	Check if the kernel supports multiple datatypes .
7961	Set the value of a constant .
7962	Returns a subset of expr s constants .
7963	Returns a dict of the array sizes .
7964	Calculate the relative offset of a variable .
7965	Remove duplicate accesses .
7966	Returns the length of an iteration .
7967	Returns a list of strings describing the current loop stack .
7968	Returns a list of indices in the given order .
7969	Compile sympy accesses into a dictionary .
7970	Compile sympy_accesses to a dictionary of relative distances .
7971	Convert a global iterator to a list of indices .
7972	Returns the global iterator .
7973	Convert a list of indices to a global iterator .
7974	Returns the maximum global iteration .
7975	Print kernel information .
7976	Print information about the variables .
7977	Print information about the constants .
7978	Print kernel code .
7979	Convert a convolution AST to a sympy . Integer .
7980	Returns the offsets of the given array reference .
7981	Returns the basename of the given aref .
7982	Get the index type .
7983	Builds a list of constant declarations .
7984	Returns a list of array declarations .
7985	Returns the kernel loop nest .
7986	Builds a dictionary of array declarations .
7987	Find the innermost loop in the loop_nest .
7988	Builds the initializations for the arrays .
7989	Build a list of dummy calls .
7990	Build a kernel function declaration .
7991	Build a list of scalar declarations .
7992	Read the kernel code from a file .
7993	Build a kernel call .
7994	Get the code for the main . c file .
7995	Assemble an iaca . s file .
7996	Build the LIKWID executable .
7997	Convert a string to a sympy representation .
7998	Returns the identifier of the file .
7999	Returns the datetime of the last time the file was modified .
8000	Returns a CacheSimulator from the memory hierarchy .
8001	Get the bandwidth of a cluster based on its benchmarks .
8002	Returns the specified compiler and flags .
8003	Parse a perfctr event .
8004	Enforces that there is no overlap .
8005	Return the absolute path to the header file .
8006	Align an iteration with cl_boundary .
8007	Returns the number of loaded files .
8008	Returns the number of hits in memory .
8009	Returns the number of memory misses .
8010	Returns the number of stores in the machine .
8011	Returns the number of evicts .
8012	Returns a dictionary of information about the cache .
8013	Fixes an environment variable .
8014	Configure the arggroup parser .
8015	Print results to stdout .
8016	Parse the README . md file .
8017	Schedule a retry .
8018	Build a purchase item for a course .
8019	Record a purchase in Sailthru .
8020	Get the content of a course .
8021	Get the content for a course from the ecommerce site .
8022	Update the list of unenrolled users .
8023	Send a refund email .
8024	Send an offer assignment notification email .
8025	Get edx logger configuration .
8026	Retry an order .
8027	Fulfills an order .
8028	Returns a SailthruClient for the given site code .
8029	Get the value of a key .
8030	Sets the value of a key for a given duration .
8031	Get the value of a configuration variable .
8032	Returns the filename of the overrides of the given environment variable .
8033	Get a value by version .
8034	Returns the energy plus version sorted by version .
8035	Returns a dict of file references .
8036	Populate the device from a json data dictionary .
8037	Returns a list of external files .
8038	Set the default values for all tables .
8039	Prepares the extensible field descriptors .
8040	Return the extended name of the field at the given index .
8041	Returns a dict of all naive short references .
8042	Get the value of a column based on a filter criteria .
8043	Update the value at the given index .
8044	Updates the object with new data .
8045	Set the default values for this field .
8046	Add fields to the record .
8047	Pops the value at the specified index .
8048	Insert a new value at the given index .
8049	Delete this device .
8050	Registers a new record hook .
8051	Registers a hook for a given link .
8052	Create a regex for the given line .
8053	Returns the remaining time in seconds between the start and end times .
8054	Serialize the event to a dictionary .
8055	Make an HTTP request to the given URL .
8056	Returns a list of endpoints for the given service type
8057	Try to create a directory .
8058	Configure an Opencast service .
8059	Register a capture agent .
8060	Set the recording state .
8061	Update the status of an event .
8062	Update the agent state .
8063	Return the path to the pyca configuration file .
8064	Updates a configuration file .
8065	Check if the connection is secure .
8066	Initialize the logger .
8067	Return a list of all upcoming events .
8068	Serve a captured image .
8069	Run all the modules in modules .
8070	Parse an ICLE file into a dict .
8071	Get the schedule for a service .
8072	Starts the control loop .
8073	Shut down the agentstate service .
8074	Returns a JSON response for an error .
8075	Returns a JSON response with the given data .
8076	Returns the internal state of the service .
8077	Returns a list of events .
8078	Get an event by its uid .
8079	Delete a recorded event .
8080	Modify an event .
8081	Returns a list of config parameters .
8082	Ingest a mediapackage .
8083	Start recording an upcoming event .
8084	Render the request to a Fragment object .
8085	Returns a list of all available resources .
8086	Serializes this object to a dictionary .
8087	Create a Fragment from a json dictionary .
8088	Adds the given content to the list .
8089	Add a FragmentResource to the FragmentResources list .
8090	Adds a FragmentResource to the list of Fragments .
8091	Initializes the API with a js function .
8092	Convert a list of resources to HTML .
8093	Convert a resource to HTML .
8094	Returns a JSONResponse from a GET request .
8095	Render a standalone html response .
8096	Render a fragment as standalone html .
8097	Calculate the Fast Fourier Distance .
8098	Convert a list or tuple to a one - dimension array .
8099	Lookup values from the error table .
8100	Compute the posterior chromatogram hypotheses .
8101	Creates a final error table from a dataframe .
8102	Generates a summary error table for a dataframe .
8103	Computes the error statistics for a set of targets .
8104	Find the cutoff value .
8105	Compute the classifier s score for a given input file and output file .
8106	Infer peptidoforms from a PSF file .
8107	Infer peptides from infile to outfile .
8108	Infer a protein from an input file .
8109	Subsample an OSW file .
8110	Recursively reduce an OSW file .
8111	Backpropagate an oswr file .
8112	Filter sqmass files based on a set of parameters .
8113	Get a group by its ID .
8114	Create a new group .
8115	Delete a group .
8116	Get a list of members of a group .
8117	Update members of a group .
8118	Get the effective member count for a group .
8119	Checks if a group is an effective member of a network .
8120	Modify conf . py .
8121	Create a dataset .
8122	Decrypt a key .
8123	Return an instance of stdin .
8124	Get stdout .
8125	Get the stderr file .
8126	Get debug output .
8127	Run a command with stdin .
8128	Execute a command with stdout .
8129	Execute a command with stderr .
8130	Execute a debug command .
8131	List an account .
8132	Check if a container is empty .
8133	Decorator to make a function output as stdout .
8134	Decorate a function to handle stderr files .
8135	Write an error message to a file .
8136	Print help to file .
8137	Print options usage to file .
8138	Print the version of the option .
8139	Make a request to the API .
8140	Make a POST request to the account .
8141	Delete an account .
8142	Send a PUT request for a container .
8143	Returns a HEAD request for the given object .
8144	Get a single object from a container .
8145	Put an object into a container .
8146	POST an object to a container .
8147	Resolve an option .
8148	Return a copy of this context .
8149	Write headers to a file - like object .
8150	Get the auth information for a client .
8151	Generate a temporary URL .
8152	Parse a string or string and quote it .
8153	Execute a FORDO query on a given path .
8154	Get a client .
8155	Encrypt a string using AES .
8156	Decrypt data using AES256CBC .
8157	Upload a directory structure .
8158	Put an account on the server .
8159	Put a container into the context .
8160	Get the manifest body .
8161	Create a new container .
8162	Create a temporary URL .
8163	Get the trans_id from x_trans_id .
8164	Print help for a given command .
8165	Check if the buffer is empty .
8166	Encrypt AES - 256CBC chunks .
8167	Get the status of a repository .
8168	Get a single pull request .
8169	Returns a list of pull requests for the given repo .
8170	Write your forwards methods here .
8171	Return a list of published SliderItems .
8172	Render a Hero Slider .
8173	Acquire a reader .
8174	Releases the current reader .
8175	Acquire the writer .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task by its id .
8179	Returns a list of tasks .
8180	Return a dict representation of the config .
8181	Initialize a TaskConfig object from a dictionary .
8182	Execute a perceval job .
8183	Initializes the archive manager .
8184	Run the job .
8185	Execute the fetch command .
8186	Create an Elastic Search index .
8187	Create an ElasticSearch mapping .
8188	JSON encoder .
8189	Write a list of items to a file .
8190	Add a task to the scheduler .
8191	Remove a task .
8192	Returns a generator that yields all items in the queue .
8193	Validate task_id and backend_args .
8194	Parse archive_args and return ArchivingTaskConfig .
8195	Perform a job on a queue .
8196	Schedule a task in a job queue .
8197	Cancel a job task .
8198	Run the job listener .
8199	Listen for job messages .
8200	Start the scheduler .
8201	Schedules a job for a given task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the arguments for a job .
8206	Returns the secret with the given name .
8207	Register a view .
8208	Register a new admin view .
8209	Perform a reverse action on a URL .
8210	Returns the view name .
8211	Returns a VERSION string .
8212	Resolves a key from a cursor .
8213	Returns the django - bananas . url engine for the given scheme .
8214	Parse a string into a database and schema .
8215	Parse a database url and return a dictionary .
8216	Parse a database URL .
8217	Create a new user .
8218	Returns a list of items for a user .
8219	Create a new password .
8220	Build url field and kwargs .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Get a parser for a given setting type .
8224	Get Django settings .
8225	Create a model instance from a model .
8226	Encode a string into a base64 - encoded string .
8227	Create a new field .
8228	Create a Validator instance from a dict .
8229	Calculate the cartesian product of a dictionary of parameters .
8230	Find unique points in a list of parameters .
8231	Change logging kwargs .
8232	Decorator to provide a simple logging configuration .
8233	Try to create directories for a filename .
8234	Get a list of strings from a list of arguments .
8235	Rename a log file .
8236	Set the logger .
8237	Extracts the replacements from the given trajectory .
8238	Show a progress bar .
8239	Check and replace parser args .
8240	Convert a parser to a string io .
8241	Find multiproc options in parser .
8242	Find the multiproc_ key in a dictionary .
8243	Check if the log_config is correct .
8244	Handle config parsing .
8245	Handle a dict configuration .
8246	Create logging handlers and tools .
8247	Finalize the tabula_rasa .
8248	Start stdout .
8249	Write a stream to the stdout .
8250	Return True if two inputs are equal .
8251	Check if two input parameters are equal .
8252	Decorate a function so that it can be run manually .
8253	Deprecated decorator .
8254	Decorator to make a function mutually exclusive .
8255	Decorator to mark a function as deprecated .
8256	Decorator to retry a function .
8257	Returns a prefix naming class .
8258	Add parameters to a Brian2Parameter .
8259	Run a neural network .
8260	Compute the euler scheme .
8261	Add parameters to the simulation .
8262	Calculate the Lorenz difference between two values .
8263	Create a storage service .
8264	Create an HDF5StorageService from a filename .
8265	Add a set of parameters to the simulation .
8266	Compute the difference between two arrays of values .
8267	Compact a HDF5 file .
8268	Returns a boolean indicating if any parameters are in a group .
8269	Build the eqs for the model .
8270	Pre - build the model .
8271	Build the model .
8272	Build a model from brian_list and network_dict
8273	Pre - build the network .
8274	Build a new connection .
8275	Add parameters to the simulation .
8276	Compute the Fano factor .
8277	Compute the mean fano factor .
8278	Analyse a network .
8279	Add a monitor to a network .
8280	Add monitors to the network .
8281	Make a folder for the given traj .
8282	Plot a result .
8283	Print the current spike raster plot .
8284	Analyse Brian2Monitor results .
8285	Get a single batch .
8286	Explore the sigma of a batch .
8287	The NNTreeNodeVars of this node .
8288	Returns the function for this node .
8289	Rename a file .
8290	Sets the details of the tree .
8291	Convert a node to a message .
8292	Remove a subtree from a node .
8293	Delete a node from the tree .
8294	Remove a node or leaf from an instance .
8295	Remove a node along a branch .
8296	Translate a shortcut name .
8297	Add a prefix to split_names .
8298	Returns a tuple of GROUP LEAF and LINK .
8299	Add a node to a group .
8300	Add a node to the tree .
8301	Create a link between the given node and the given instance .
8302	Checks that the names in split_names are valid .
8303	Create a group for the given parent node .
8304	Create a param or result node .
8305	Set the details of a tree node .
8306	Iterate over nodes .
8307	Create an iterator that iterates over the children of the given node .
8308	Perform a recursive traversal of BFS nodes .
8309	Perform a very fast search of a node .
8310	Search a node for a given key .
8311	Perform a backwards search of a node .
8312	The children of this node .
8313	Add a group from storage .
8314	Add a leaf from storage .
8315	Returns a list of pypet . dir . Data objects .
8316	Returns a debug class for this node .
8317	Returns the parent of the root .
8318	Add a group to the network .
8319	Add a link to a group .
8320	Remove a link from the interface .
8321	Add a leaf to the group .
8322	Removes this variable from its parent .
8323	Remove a child from this group .
8324	Returns True if the file contains the given item .
8325	Get the default value for a file .
8326	Returns a copy of the children .
8327	Returns a copy of self . _groups .
8328	Returns a copy of the current leaves .
8329	Returns a copy of self . _links .
8330	Store a child of this group .
8331	Store this trajectory in a file .
8332	Load a child of this instance .
8333	Load data from a file - like object .
8334	Add a parameter group to the interface .
8335	Add a parameter to the interface .
8336	Add a result group .
8337	Add a result to a result group .
8338	Add a derived parameter group to the interface .
8339	Add a derived parameter to the interface .
8340	Add a configuration group .
8341	Add a configuration to the interface .
8342	Evaluate the fitness of a single individual .
8343	Add commit variables to traj .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Nest a dictionary into a nested dictionary .
8347	Create a progress bar .
8348	Get the argspec for a function .
8349	Given a function and a dict of kwargs return a dict of matching kwargs .
8350	Convert a timestamp into a datetime object .
8351	Convert a port to a tcp address .
8352	Make all the directories in a given path .
8353	Resets the index to the given value .
8354	Returns the number of seconds remaining for the given index .
8355	Convert the file to a dictionary .
8356	Remove a key from the annotations .
8357	Convert an annotation to a string .
8358	Make an ordinary result .
8359	Create a SharedResult object from a result .
8360	Create shared data .
8361	Make a request to the data store .
8362	Get the data node .
8363	Returns a new SharedResult if the given item is supported .
8364	Create a shared data object .
8365	Modify a multi - process process in a safe way .
8366	Re - request a lock .
8367	Send a DONE signal to the server .
8368	Finalize the connection .
8369	Start the client .
8370	Sends a request to the server and retries the response .
8371	Acquire a LOCK connection .
8372	Listen for messages from the server .
8373	Send a message to the server .
8374	Detect a fork in the connection .
8375	Handle data messages .
8376	Runs the Trajectory .
8377	Receive data from the queue .
8378	Receive data from the server .
8379	Store args and kwargs .
8380	Store msg to self . references .
8381	Store a list of pypetconstants as references .
8382	Decorator for init_func to parse a config file .
8383	Returns a dict of kwargs for the given section .
8384	Returns a dict of kwargs that can be passed to _collect_config .
8385	Returns a dictionary of kwargs .
8386	Adds the parameters to the traj config file .
8387	Convert a rule number to a numpy array .
8388	Make an initial state from a list of cells .
8389	Plot a pattern on a cell .
8390	Cellular Automaton . 1D .
8391	Compute all patterns .
8392	Send a signal to all active nodes .
8393	Returns the overview group .
8394	Load stuff_to_load .
8395	Store msg in stuff_to_store .
8396	Load multiple items from an iterable .
8397	Check HDF5 properties .
8398	Store multiple items from iterable .
8399	Run the srvc_closing routine .
8400	Extract information from the srvc file .
8401	Backup the trajectory into a HDF5 file .
8402	Read out a row from a table .
8403	Prepares a new table for merging .
8404	Load meta data from traj .
8405	Load a sub - branch of a tree .
8406	Check if the current pypet version matches the current trajectory .
8407	Fills the run table with run information .
8408	Loads an exploration from a TrajectoryGroup .
8409	Stores the explorations for the given traj .
8410	Creates a list of table names to be used in the srvc view .
8411	Store a new trajectory .
8412	Store a sub - branch of a tree .
8413	Create a new leaf in a tree .
8414	Recursively load nodes from a tree .
8415	Recursively store nodes in the tree .
8416	Store a param or result table entry .
8417	Get or create a table from the HDF5 file .
8418	Get a node by its name .
8419	Recall natives of all set attributes .
8420	Recalls the native type of the data .
8421	Add or modify a row in a table .
8422	Inserts all the values in insert_dict into a row .
8423	Extract a dictionary from an item .
8424	Cut a string to a maximum length .
8425	Create a new HDF5 group if it doesn t exist .
8426	Create a new HDF5 group if it doesn t exist .
8427	Store annotations for item_with_annotations at node .
8428	Load annotations from item_with_annotations into node .
8429	Store a group on disk .
8430	Load a GRP group .
8431	Load the skeleton of a node .
8432	Extract missing flags from data_dict .
8433	Add _summary to the metadata of a PRM instance .
8434	Add metadata to a table .
8435	Create a new HDF5 storage group from a dictionary .
8436	Store a parameter on disk or return the result .
8437	Write data to a shared array .
8438	Write a shared table .
8439	Write a dictionary into a pytable .
8440	Write data to a pandas DataFrame .
8441	Write data to another HDF5 array .
8442	Write data to HDF5 file .
8443	Delete a link .
8444	Delete a parameter or result from an instance .
8445	Write data into a pytable .
8446	Makes a description from the given data .
8447	Get a single column from a table .
8448	Returns the length of the longest string in string_list .
8449	Process a load into a dictionary .
8450	Read a dictionary from a leaf .
8451	Read shared data from shared_node .
8452	Read a table from a storage group .
8453	Read an array from the storage .
8454	Load a trajectory .
8455	Make a set name from a set index .
8456	Set the properties of the interface .
8457	Add dynamic imports to the list of dynamic imports .
8458	Sets the f_crun and v_idx .
8459	Iterate over the runs of this trajectory .
8460	Shrink the trajectory .
8461	Pre - set a parameter .
8462	Pre - set a parameter .
8463	Prepare the parameters for the experiment .
8464	Get a value from a list of runs .
8465	Check if a run is completed .
8466	Removes all expanded parameters from disk .
8467	Returns a copy of the given node .
8468	Use f_expand to explore a trajectory .
8469	Update a run information dictionary .
8470	Add a run information .
8471	Lock all parameters .
8472	Lock derived parameters .
8473	Convenience method for _finalize .
8474	Load the skeleton .
8475	Load a file - like object .
8476	Store a backup of this trajectory .
8477	Returns a list of translated wildcards .
8478	Merge multiple trajectories into the current one .
8479	Merge multiple runs into this one .
8480	Rename a full trajectory name .
8481	Merge derived parameters from other_trajectory into this one .
8482	Merge links from other_trajectory to self .
8483	Merge config . git with other_trajectory .
8484	Merge other_trajectory into self .
8485	Merge results from other_trajectory into self .
8486	Migrate this trajectory to a new location .
8487	Store this node .
8488	Restore the default value of all parameters .
8489	Sets the parameters to the specified index .
8490	Make a single run of the graph .
8491	Returns a list of run names .
8492	Returns the run information for the given name or index .
8493	Find the index of a parameter in the name_list .
8494	Start a new run .
8495	Finalize a run .
8496	Set the start time of the run .
8497	Sets the finish time of the run .
8498	Construct a Trajectory instance .
8499	Return an item dictionary .
8500	Finalize the run .
8501	Returns a dictionary of config items .
8502	Returns the results of the search .
8503	Store items for a trajectory .
8504	Load items from disk .
8505	Remove an iterator of items from the network .
8506	Delete links from iterator_of_links .
8507	Removes all children from the tree .
8508	Delete items from the trajectory .
8509	Wrapper for _pool_single_run .
8510	Handle a single run of a pool .
8511	Configure the storage pool .
8512	Configure a frozen pool .
8513	Process a single run .
8514	Delete the old scoop data from the revolution .
8515	Convenience function for scooping a single run .
8516	Configure the logging system .
8517	Configure niceness .
8518	Handle a single run of sigint .
8519	Run a single run .
8520	Wraps the given kwargs into a handler .
8521	Load a class from a string .
8522	Create a new dynamic class .
8523	Returns the length of this parameter s range .
8524	Returns a string representation of the current value .
8525	Returns True if two inputs are equal .
8526	Returns the range of the current parameter .
8527	Explores the given iterable of parameters .
8528	Expands the range of the Parameter .
8529	Raises an exception if data is not of the same type as the original entry .
8530	Store the data in a dictionary .
8531	Load a parameter from a dict .
8532	Load a Parameter from a dictionary .
8533	Returns True if val1 and val2 are equal .
8534	Returns True if data is a supported matrix .
8535	Serialize a SparseParameter matrix .
8536	Builds a tuple of names for a SparseParameter .
8537	Construct a sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps . sps sps sps sp
8538	Load a SparseParameter from a dictionary .
8539	Store the data in a dictionary .
8540	Load a pickle parameter from a dict .
8541	Translate a key to a string .
8542	Convert a value to a string .
8543	Convert the file to a dictionary .
8544	Set a positional value .
8545	Returns a list of tuples corresponding to the given args .
8546	Set a single item in the result .
8547	Check if an item is supported by the SparseResult .
8548	Store the SparseResult to a dictionary .
8549	Load a SparseResult from a dict .
8550	Set a single item to a pickled result .
8551	Store the results in a pickle dictionary .
8552	Load data from a pickle dictionary .
8553	Merge all files in folder .
8554	Upload a file to saga .
8555	Download a file from Saga .
8556	Create a Saga session .
8557	Merge trajectories .
8558	Start a list of jobs .
8559	Multiply the product of two reals .
8560	Run Euler integration on a neuron .
8561	Post - process a neuron .
8562	Adds the parameters to the simulation .
8563	Add exploration of I and tau_ref .
8564	Execute network pre - run .
8565	Execute a network run .
8566	Extract the subruns of a duration parameter .
8567	Execute a network run .
8568	Add parameters to the network .
8569	Pre - run the network .
8570	Run a network .
8571	Run the network simulation .
8572	Creates a filename for the given traj .
8573	Returns the next iterator in the chain .
8574	Merge all files in a folder .
8575	Handle a SIGINT prompt .
8576	Read a config from a file .
8577	Request a pin from Ecobee .
8578	Request tokens from Ecobee .
8579	Refreshes the access token .
8580	Returns a list of thermostats .
8581	Write the access tokens to the config file .
8582	Sets the HVAC mode of a thermostat .
8583	Set the fan minimum on time for a thermostat .
8584	Sets the temperature of the thermostat at the specified index .
8585	Sets a climate hold on a thermostat .
8586	Delete a vacation .
8587	Resume a program .
8588	Send a message to a thermostat .
8589	Sets the humidity level of a thermostat .
8590	Generate a random selection delay .
8591	Generate a random timeout to resend .
8592	Generate a timeout to renew a lease .
8593	Generates a renewal time based on a lease time .
8594	Returns a dict representation of the FSM .
8595	Reset the attributes of a DHCP client .
8596	Get the timeout for a function .
8597	Set the timeout of a function .
8598	Sends a discovery message to the server .
8599	Select an offer .
8600	Send a DHCP request to the server .
8601	Set the timers for this lease .
8602	Process a DHCPACK request .
8603	Process a DHCPNAK packet .
8604	Sets the current state to INIT .
8605	Set the current state of the client .
8606	Renew the lease .
8607	REBINDING callback .
8608	End the lease .
8609	Raise a STATE_ERROR if there is an error .
8610	Returns a boolean indicating whether the current state is ready to be selected .
8611	Timeout when a request is received .
8612	Raise RENEWING if timeout is exceeded .
8613	Timeout for request rebinding .
8614	Receive a new offer .
8615	Receive an ACK from the server .
8616	Receives a NAK request .
8617	Receive an ACK that is renewing .
8618	Receives a NAK renewing packet .
8619	Receive an ACK rebinding .
8620	Receive a NAK rebinding .
8621	Called when the lease expires .
8622	Set the value of a django object .
8623	Add a new value to the queryset .
8624	Remove a value from the queryset .
8625	Get the status of the server .
8626	Creates a dict with the given options .
8627	Main entry point for the python module .
8628	Validate a message .
8629	Read a nptdms . TdmsFile from a TDM file .
8630	Adds a deformation to the data .
8631	Convert a TDM file to a FCS file .
8632	Returns True if cwd is equal to cwd .
8633	Create a new patch .
8634	Delete the next patch in the series .
8635	Delete a patch from the database .
8636	Check if a file is in a patch .
8637	Backup a file .
8638	Add a file to the quilt .
8639	Run the quilt command .
8640	Create the directory if it does not exist .
8641	Copies this directory to another directory .
8642	Add a link to this file .
8643	Copy this file to another directory .
8644	Returns the directory where the file is located .
8645	Backup a file to dest_dir .
8646	Refreshes the quilt .
8647	Unapplies a patch to the database .
8648	Unapplies the top patch .
8649	Unapplies all applied patches .
8650	Apply a patch to the database .
8651	Applies the next patch to the series .
8652	Applies all the patches to the series .
8653	Read the series file and add a patch to each line .
8654	Save the series to a file .
8655	Add a patch to the current line .
8656	Insert a list of patches into the current line .
8657	Add a list of patches .
8658	Remove a patch .
8659	Return a list of all patches after a given patch .
8660	Return a list of all patches before a given patch .
8661	Returns a list of all patches until a given patch is applied .
8662	Replace old_patch with new_patch .
8663	Create the version file if it doesn t exist .
8664	Check the version of the quilt meta - data file .
8665	Add the arguments to the given parser .
8666	Add an argument to a parser .
8667	Add the given subparsers to the given parser .
8668	Set the arguments for the subparsers .
8669	Add subparsers to the given parser .
8670	Check if filename is in patch .
8671	Check if a file is in the next patch .
8672	Revert a file to a patch .
8673	Import a patch file .
8674	Import a list of patches .
8675	Add a way to the way list .
8676	Returns a generator of node ids that are not present in the graph .
8677	Returns a Node object for the given node .
8678	Build a route from a relation .
8679	Create a route with a long name .
8680	Returns the agency id for the given relation .
8681	Process a public transport relations file .
8682	Returns a Relation object for the given relation .
8683	Create dummy data for a list of stops .
8684	Patches a list of agencies .
8685	Create a dummy trip stoptimes for a trip .
8686	Write a . txt file to a zip file .
8687	Write unzipped data to destination .
8688	Build an Agency object from a relation .
8689	Extract stops from a list of nodes .
8690	Build a Shape object from a list of nodes .
8691	Returns a list of supported versions .
8692	Send an APD to the device .
8693	Authenticate with a U2F device .
8694	Register a new client .
8695	Authenticate a device .
8696	Register a U2F device .
8697	Convert UTF - 8 encoded data to string .
8698	Wrap a function with an error decorator .
8699	Wraps a class method with an error decorator .
8700	Returns True if the filepath matches the given pattern .
8701	Returns the email address for the given email .
8702	Get an entry from an entry tree .
8703	Convert markdown to reST .
8704	Serve a configuration file .
8705	Record an error .
8706	Convert a URL to an image .
8707	Convert a string to an Image object .
8708	Decorator to validate a function .
8709	Check if an image is big enough .
8710	Checks if the width of the image is big enough .
8711	Check if a given image height is big enough .
8712	Parse a category .
8713	Parse the total value of an item .
8714	Returns an iterator over the items in the ElementTree .
8715	Saves an exception to the error file .
8716	Parse the source data .
8717	Parse a single item .
8718	Get an instance of the model from the given data .
8719	Save an item to an instance .
8720	Download a file from url to dest .
8721	Load a file from a source file .
8722	Returns a generator that yields all the items in the table .
8723	Sets the allow_network_access value .
8724	Execute a docker command .
8725	Add a list of files to the Sandbox .
8726	Adds a file and renames it .
8727	Returns a list of CanvasEnrollments for a given course .
8728	Gets the enrollments for a given SI .
8729	Returns a list of CanvasEnrollments for a section .
8730	Gets the enrollments for a specific section .
8731	Returns a list of CanvasEnrollments for the given regid .
8732	Enrolls a user in a course .
8733	Returns a list of the roles in an account .
8734	Gets the list of roles in an account with the specified SI ID .
8735	Gets the effective course roles in an account .
8736	Get a single role .
8737	Gets a role by its SI ID .
8738	Returns a CanvasCourse .
8739	Get a course by its IS ID .
8740	Returns a list of courses in an account .
8741	Gets a list of courses in a given SI account .
8742	Gets the list of courses that have been published in an account .
8743	Gets published courses in account by sis_account_id
8744	Returns a list of courses for the given regid .
8745	Creates a new course .
8746	Update a course s IS ID .
8747	Get activity by account and term .
8748	Get grades for a given IS account and term .
8749	Get statistics for a specific SI account and term .
8750	Get activity by sis_course_id
8751	Get assignments by sis_course_id
8752	Get student summaries by sis_course_id
8753	Get activity for a student for a given sis_user_id .
8754	Get the communication for a student for a given sis_user_id
8755	Returns a list of external tools in an account .
8756	Get all external tools in a course .
8757	Create an external tool .
8758	Updates an external tool .
8759	Delete an external tool .
8760	Raise DesignError if required_parameters is not set .
8761	Returns a CanvasUser for the specified user .
8762	Returns a list of CanvasUsers for the given course .
8763	Gets the users for a given IS course .
8764	Creates a new Canvas user .
8765	Get all logins for a user .
8766	Updates a user login .
8767	Returns the next page from the response .
8768	Get the URL of a resource .
8769	Get a paged resource .
8770	Get a resource from a URL .
8771	Put a resource to the DAO .
8772	Post a resource to the DAO .
8773	Delete a resource .
8774	Returns a list of CanvasAdmin objects .
8775	Create an admin role for a user .
8776	Creates an admin with the given sis id .
8777	Delete an admin role .
8778	Delete an admin by sis id .
8779	Creates a new GradingStandard for a course .
8780	Get a specific section .
8781	Get a section by its IS ID .
8782	Get all sections in a course .
8783	Gets the sections in a course by its IS ID .
8784	Gets the sections with students in course .
8785	Gets the sections with students in a course by its IS ID .
8786	Creates a new section in a course .
8787	Updates a section .
8788	Get quizzes for a course .
8789	Gets an account by ID .
8790	Returns a list of the sub - accounts of the given account .
8791	Updates an account .
8792	Updates an account s SIS ID .
8793	Get SSOSettings for an account .
8794	Update the auth settings for an account .
8795	Get a term by sis_term_id
8796	Imports a SISImportModel as a string .
8797	Imports a directory .
8798	Returns the status of the given sis_import .
8799	Build a CSV archive .
8800	Returns a list of assignments for a given course .
8801	Updates an assignment .
8802	Returns a list of available report types for the given account .
8803	Returns a list of Report objects for the given report type .
8804	Create a new report .
8805	Creates a provisioning report for a course .
8806	Create a course SIS export report .
8807	Create an unused courses report .
8808	Get the data for a report .
8809	Get the status of a report .
8810	Delete a report .
8811	Move detections from label to dy to dx
8812	Flip detections from label to w .
8813	Convert an object into a dict .
8814	Returns a dict of config values .
8815	Returns the edit_empty_value value .
8816	Parse args and kwargs from a template token .
8817	Creates a list of MetricConfig objects .
8818	Setup logging .
8819	Configures the registry .
8820	Create metrics from a list of configs .
8821	Get a metric by name and labels .
8822	Handle the home page .
8823	Handle metrics requests .
8824	Query Wolfram |Alpha API .
8825	Fixes the HTTPMessage .
8826	Query Wolfram Alpha API .
8827	Return an iterator of information about the pod .
8828	Returns a list of results .
8829	Encodes the given data into a JSON string .
8830	Make a request to the API .
8831	Perform a GET request to a URL .
8832	Delete a URL .
8833	Send a PUT request to a URL .
8834	Send a POST request to a URL .
8835	Process a disambiguation query .
8836	Group sentences into groups of length group_length .
8837	Disambiguate a PDF .
8838	Disambiguate a query .
8839	Segment a text file .
8840	Get a language from the language service .
8841	Fetches a concept .
8842	Fit the model to the given features and classes .
8843	Calculate the accuracy score for a set of features .
8844	Fits the model to the given features and class_labels .
8845	Fit and predict a set of features .
8846	Calculate the accuracy score for a set of features .
8847	Fits the model to the given features and targets .
8848	Transform a list of features into a new feature .
8849	Scores a continuous MDR model against a set of targets .
8850	Predict the MDR of a set of data .
8851	Generate n - way models .
8852	Plots the mdr grid .
8853	Returns a dict of config items for the given app .
8854	Get the value of a config key .
8855	Returns a vector with the given members .
8856	Returns a vector with the given members .
8857	Evaluate a file .
8858	Evaluate all forms in a stream .
8859	Evaluate a string .
8860	Return a bootstrapped repl for the given namespace .
8861	Run basilisp .
8862	Returns a MultiFunction corresponding to the given dispatch .
8863	Add a method to a map .
8864	Add a method to the MultiFunction .
8865	Returns the method for the given key .
8866	Remove a method from a map .
8867	Remove a method from the MultiFunction .
8868	Check if a variable is a macro .
8869	Returns the line and column of a form .
8870	Decorator for parsing a form with a location .
8871	Raises an exception if recur does not appear in tail position .
8872	Assert that node s recursion is tail .
8873	Resolve a bare symbol .
8874	Resolve a symlink symbol .
8875	Parse an ASTM node .
8876	Returns a boolean indicating whether the variable has been shadowed .
8877	Add a new symbol to the symbol table .
8878	Convert a list of tuples into a single string .
8879	Return a string representation of an iterable .
8880	Return a string representation of a LispObject .
8881	Fallback function for _lrepr_bool
8882	Fixes the location of a node that doesn t exist .
8883	Compile and execute a form .
8884	Compile a module incrementally .
8885	Compile a list of forms into a module .
8886	Compile bytecode into a Python module .
8887	Return a sequence from an iterable .
8888	Return a string with munge replacements .
8889	Desemunge a string .
8890	Returns a fraction of a number .
8891	Return a logging handler .
8892	Create a Map object from a set of kvs .
8893	Partition a list into n parts .
8894	Decorator to wrap a function with a location .
8895	Read a name - separated string .
8896	Read a collection .
8897	Read a list .
8898	Read a vector .
8899	Read a set from a reader .
8900	Read a map literal .
8901	Read a string .
8902	Read a symbol .
8903	Read a keyword .
8904	Read the metadata of a symbol .
8905	Read a function from a ReaderContext .
8906	Read a QUOTE comment .
8907	Expands a syntax - quoted form into a list of lists .
8908	Convert a form to a ReaderForm .
8909	Reads a syntax - quoted form .
8910	Read a unquote form .
8911	Read a Deref form .
8912	Read a character from the reader .
8913	Read a regex pattern .
8914	Returns a LispReaderForm for the given context .
8915	Read the next consuming comment .
8916	Read the next token .
8917	Read an iterable from a stream .
8918	Read a string from a file .
8919	Read the contents of a file .
8920	Update the location of a character .
8921	Sets the pushback depth . Raises IndexError if the pushback depth is too deep .
8922	Returns the next token in the stream .
8923	Generate a bytecode based on a MAGIC_NUMBER .
8924	Get a bytecode from a basilisp file .
8925	Create a cache file from a source file .
8926	Hook imports to sys . meta_path .
8927	Find a module specification .
8928	Execute a cached Basilisp module .
8929	Execute a Basilisp module .
8930	Execute a module .
8931	Return a Symbol object .
8932	Complete a string .
8933	Get or create a PMap from a keyword .
8934	Returns a hash of a keyword .
8935	Returns a tuple of dependencies and nodes for a PyAST .
8936	Load attribute from AST .
8937	Creates a simple AST generator .
8938	Returns a tuple of PyASTStream and PyASTStream for a collection of ASTs .
8939	Generates a python AST with the given location .
8940	Decorator for _ast_with_loc .
8941	Decorator for _ast_with_loc_deps .
8942	Check if a variable is dynamic .
8943	Check if a variable is redefable .
8944	Convert an AST to a statement .
8945	Returns an expressionized version of the given body .
8946	Check if we should warn on redef .
8947	Convert a Do node to a GeneratedPyAST .
8948	Return the name of a filename .
8949	Convert a list of arguments to a python AST .
8950	Convert a single arity function to a python AST .
8951	Convert a multi - arity function to a python AST .
8952	Convert a NodeOp . FN to a GeneratedPyAST .
8953	Convert if_body_to_py_ast to GeneratedPyAST .
8954	Convert if to python AST .
8955	Convert an Invoke node to a GeneratedPyAST .
8956	Convert a quote node to a GeneratedPyAST object .
8957	Convert a RECUR node to a GeneratedPyAST .
8958	Convert a recur node to a GeneratedPyAST node .
8959	Convert a SetBang node to a GeneratedPyAST .
8960	Convert a Throw node to a GeneratedPyAST .
8961	Try to convert a node to a python AST .
8962	Convert a local symbol to a python AST .
8963	Convert a variable find to a python AST .
8964	Convert a symlink to a python AST .
8965	Convert an interop property to a python AST .
8966	Convert a Maybe class to a python AST .
8967	Convert a MaybeHostForm node to a GeneratedPyAST object .
8968	Converts a ConstantValue to a GeneratedPyAST .
8969	Convert a collection of literals to a python AST .
8970	Generates a lisp AST node .
8971	Iterate over all module imports .
8972	Return an ast . ImportFrom object from a module import .
8973	Create a new namespace variable .
8974	Returns a set with the given members .
8975	Returns a set with the given members .
8976	Visit a ExceptHandler node .
8977	visit an expression node by returning a fresh instance of it
8978	visit a FunctionDef node and return a copy of it
8979	Visit a While node by returning a copy of it .
8980	visit a Try node and return a copy of it
8981	Create a new module .
8982	Return the first sequence in a sequence .
8983	Return the rest of a sequence .
8984	Return the nth rest of a column .
8985	Return the nth next element in a sequence .
8986	Return the cons of a sequence .
8987	Convert an object to a sequence .
8988	Concatenate sequences into a single sequence .
8989	Assoc an object .
8990	Return the cons of a collection .
8991	A decorator that wraps a function with a list of arguments .
8992	Dereference an object .
8993	Return True if v1 is equal to v2 .
8994	Return the fraction of x and y .
8995	Sort a list of sequences .
8996	Returns True if coll contains a k - th element .
8997	Returns the value of k in m or default if m is an associative .
8998	Convert an object to a lisp backup .
8999	Convert an IPersistent object to a Python object .
9000	Return a human - readable representation of an object .
9001	Collect python variadic arguments .
9002	Decorator for trampoline functions .
9003	Decorator to add attributes to a function .
9004	Decorator to add a meta attribute to a function .
9005	Convert a function to a _basilisp_fn
9006	Resolve an alias for a symbol .
9007	Resolve a variable alias .
9008	Add a generated python to a variable .
9009	Bootstrap a Dynamic Var into a Namespace .
9010	Intern a variable in a Namespace .
9011	Intern a variable in a Namespace .
9012	Find a name in a namespace .
9013	Find a variable in the namespace of a symbol .
9014	Find a variable in this context that is safe to use .
9015	Add a default import for a module .
9016	Add an alias to the namespace .
9017	Intern a symbol with a variable .
9018	Create a new variable in a lmap . Map .
9019	Find a reference to a symbol .
9020	Add an import .
9021	Get an import for a symbol .
9022	Add a reference to sym .
9023	Get a reference to a symbol .
9024	Returns a lmap . Map object that refers to all entries in other_ns_interns .
9025	Swaps references between this namespace and other_ns .
9026	Get a namespace or create it if it doesn t exist .
9027	Get or create a namespace .
9028	Returns the namespace of a symbol .
9029	Remove a symbol from the namespace .
9030	Returns a CompletionMatcher for the given text .
9031	Iterate over all aliases that match the given prefix .
9032	Iterate over imports and aliases for a given prefix .
9033	Returns an iterator over the interns of the given value .
9034	Returns an iterable of complete references for the given value .
9035	Complete a string .
9036	Returns a tuple of the arguments .
9037	Return a list of members .
9038	Returns a list with a list of members .
9039	Change the style of a scalar .
9040	Decrypt a JWT .
9041	Encrypt a JSON string using a key store .
9042	Delete an item from the cache .
9043	Returns a python representation of this comparison .
9044	Close the file .
9045	Parse a fiql string into an expression .
9046	Dump ndb_model to fp .
9047	Returns a dictionary containing the values of the given object .
9048	Decode a date from a string .
9049	Decode a date or datetime object into a JSON object .
9050	Returns the default JSON encoder for the given object .
9051	Validate the leicacam version string .
9052	Generate a changelog for the current version .
9053	Returns a list of strongly connected components in a graph .
9054	Robust topological sort of a graph .
9055	Set the parent of this FiqlObject .
9056	Returns the parent of this expression .
9057	Add an operator to the Fragment .
9058	Add an element to this expression .
9059	Add an operator to the expression .
9060	Add an operator to the expression .
9061	Decorator for logging a function .
9062	Parse a received message and return a list of messages .
9063	Convert a list of tuples to a dictionary .
9064	Check if a list of messages match a given command .
9065	Prepares the message for sending .
9066	Flush all incomming socket messages .
9067	Enable a slide .
9068	Save a leicacam template .
9069	Load a leicacam template .
9070	Get information about a stage .
9071	r Inclines a file .
9072	Find the path to the package . json file .
9073	Parse a package json file .
9074	Handle API error with jsondata .
9075	Validate a response from yourls .
9076	Homogenize two wave vectors .
9077	Interpolate a dep vector .
9078	Returns the indep_vector of two waveforms .
9079	Verify that waveforms are compatible .
9080	Loads the systemjs manifest .
9081	Returns a list of params for tracing mname .
9082	Run a trace of a module and callables .
9083	Shorten a URL .
9084	Expand a URL .
9085	Get shortened url stats .
9086	Get DBS stats .
9087	Returns the DBStats API call .
9088	r Execute a PMISC command in a given directory .
9089	Executes a command and returns the stdout and stderr
9090	Log a message to the stdout .
9091	Decorator to cache a method .
9092	Iterate over chunks of an iterable .
9093	Decorator to process a function in chunks .
9094	Flatten an iterable .
9095	Send a SIGINT signal to the system .
9096	Print a table to stdout .
9097	Return a dummy type .
9098	Convert a human - readable string to an integer .
9099	Authenticate with yourls .
9100	Run trace on a waveform module .
9101	Returns a list of links in the requirements . json file
9102	Make a common entry for a given python version .
9103	Given a list of pkg_pyvers and a dictionary of ver_dict make a multi - entry .
9104	Convert a list of operations to words .
9105	Yield noise in chunks .
9106	Parse chunks of data .
9107	r Write a touchstone to a file .
9108	Return the bounding box of a waveform .
9109	Build dep_units from dep_units and op
9110	Returns a copy of the operation .
9111	Calculate the running area of a vector .
9112	Validate indep_min and indep_max arguments .
9113	r Calculate the absolute cosine of a wave .
9114	r Calculate the absolute cosine of a wave .
9115	r Calculate the asin of a wave .
9116	r Calculate the atanh of a wave .
9117	r Compute the average of a waveform .
9118	r Calculate the db of a waveform .
9119	r Compute the derivative of a waveform .
9120	r Compute the ffti of a wave .
9121	r Compute the fftm of a wave .
9122	r Compute the fftp phase of a wave .
9123	r Compute the fftr of a wave .
9124	r Compute the db of an ifft wave .
9125	r Calculate the imag of a wave .
9126	r Compute the abs of a wave at npoints .
9127	r Compute the inverse transition phase of a wave .
9128	r Compute the indices of a wave at a given number of points .
9129	r Compute the integral of a waveform .
9130	r Calculate the group delay of a wave .
9131	r Logarithm of a waveform .
9132	r Compute the n - average of a waveform .
9133	r Compute the n - integral of a waveform .
9134	r Compute the n - th maximum of a waveform .
9135	r Return the minimum value of a waveform .
9136	r Calculate the phase of a wave .
9137	r Round a complex waveform to a number of decimal places .
9138	r Calculate the square root of a wave .
9139	r Compute the subwaveform of a waveform .
9140	r Compute the complex of a waveform .
9141	r Convert a complex waveform to a float .
9142	r Convert a complex waveform to an integer .
9143	r Calculate the wvalue of a waveform .
9144	Return a list of jspm packages found at the given path .
9145	Get a short description from a long description .
9146	Build an expression from a list of tokens .
9147	Returns the next rdelim that matches the given position .
9148	Return a list of function names for a given expression .
9149	Return a list of ldelims and rdelims for a given expression .
9150	Parse an expression .
9151	Removes consecutive delims from an expression .
9152	Returns a tuple of _split_every .
9153	Convert a number to an English tuple .
9154	r Returns a string with no exp .
9155	r Return a peng representation of a number .
9156	r Returns a float representation of a number .
9157	r Return the peng - frac representation of a number .
9158	r Returns a float representation of a peng .
9159	r Returns the power of a peng number .
9160	r Computes the peng_suffix matrix from suffix and offset .
9161	r Remove extra delims from an expression .
9162	Convert a number to a scientific string .
9163	Convert a number to scientific tuple .
9164	Find the sourcemap comment in a file .
9165	Returns True if the app needs an extension .
9166	Run jspm bundle .
9167	Returns a trace of an application .
9168	Returns True if the hashes in the dep_tree match .
9169	Format an argument as a hexdump .
9170	Parse a docstring .
9171	Returns a list of valid identifiers .
9172	Returns a context object for the given add action .
9173	Split a line into its parts .
9174	Check if the current context is interactive .
9175	Returns the help text for a builtin function .
9176	Find the function with the given name in the context .
9177	List functions in a directory .
9178	Check if an argument is a flag .
9179	Process a list of arguments for a function .
9180	Extract a value from a keyword argument .
9181	Invoke one function on a line .
9182	Invoke a function on a line .
9183	Invoke the function on a string .
9184	Parse a parameter declaration .
9185	Parse a return line .
9186	Helper function to classify a section .
9187	Classify a line .
9188	Join lines into a list of paragraphs .
9189	Wraps the document and formats it to a string .
9190	Convert a value to a given type .
9191	Convert a binary value to a given type .
9192	Returns the size of the given type .
9193	Convert a value to a given type .
9194	Validate a type object .
9195	Return True if type_name is a known type .
9196	Split a type name into base and subtype .
9197	Instantiate a type .
9198	Returns the type with the given name .
9199	Returns True if the given type is a known format .
9200	Injects a type into the model .
9201	Load a type module .
9202	Returns True if pos_args and kw_args have been filled .
9203	Add a parameter to the annotation .
9204	Returns a typed return value .
9205	Create a custom return value .
9206	Match a short - name to a list of keyword parameters .
9207	Return the type of the parameter with the given name .
9208	Returns a string representation of the signature .
9209	Formats a return value .
9210	Converts a positional argument to a value .
9211	Check the spec of a function .
9212	Convert an argument to a type .
9213	Return a string representation of the message .
9214	Return a dict representation of this message .
9215	Validate a function and execute it .
9216	Parse a list of validators .
9217	Find all the objects in a container .
9218	Return the name and context of a module .
9219	Returns the help text for the given function .
9220	Decorator to add a parameter to a function .
9221	Annotate a function with a return value .
9222	Annotate a function with a typed return value .
9223	Decorator to create a context object .
9224	Annotate a function .
9225	Annotate a function .
9226	Return a short description of a function .
9227	Load cron jobs .
9228	Install crontab .
9229	Prints a list of tasks .
9230	Uninstall crontab .
9231	Create a new schema for a given uri .
9232	Load project configs from a directory .
9233	Save project config to a YAML file .
9234	Define a single instance of a class .
9235	Returns a dictionary mapping project names to their dependencies .
9236	Decorator to post - process a function .
9237	Initialize a project .
9238	Sets the value of a key .
9239	Sets the attribute name to value .
9240	Create an instance of this object from an iterable .
9241	Set a new value .
9242	Returns a setter that iterates over the state and sets new_values .
9243	Add a function to a state .
9244	Returns a tuple of n arguments .
9245	Apply a function to the lens .
9246	Apply a function to a pure state .
9247	View the current state of the Fold .
9248	Convert a Fold to a list of lists .
9249	Apply a function over a state .
9250	Set a value to the given state .
9251	Iterate over an iterable .
9252	Returns the kind of the optic .
9253	Main entry point for the game .
9254	Step forwards from self to other .
9255	Handle input from the player .
9256	Advance the robots .
9257	End the game .
9258	Performs a player move .
9259	Play a game of naughts and crosses against the computer .
9260	Make the player move to a given position .
9261	The winner of this board if one exists .
9262	Yields all possible wins .
9263	Process an item and upload it to the server .
9264	Open a spider .
9265	Upload a chunk to S3 .
9266	Create a JSONLines file object .
9267	Get the current state of an account .
9268	Get the current state of an asset .
9269	Get a block by hash .
9270	Get the hash of a block .
9271	Get the system fees associated with a block .
9272	Get the contract state for a given script hash .
9273	Get the raw transaction value for a given transaction hash .
9274	Get a storage key for a script hash .
9275	Get the value of a tx_hash at the given index .
9276	Invoke a JSONRPCMethods script .
9277	Invokes a function on the specified parameters .
9278	Invoke a JSONRPCMethods script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Call a JSON - RPC method .
9282	Check if a string is a hash of 256 characters .
9283	Check if a string is a hash of 160 characters .
9284	Encodes invocation parameters into a list of strings .
9285	Decode an invocation result .
9286	Decorator to mark a function as first_kwonly_arg .
9287	Snap a timezone to a timezone .
9288	Apply this datetime to a datetime in a timezone .
9289	Saves the rendering to a file .
9290	Render the barcode .
9291	Calculate the checksum .
9292	Renders the given code .
9293	Connect to a KVS server .
9294	Main entrypoint for s3conf .
9295	Download the s3 configuration file .
9296	Upload a file to S3 .
9297	Downsync a config file .
9298	Display the difference between the current S3 configuration and the current configuration .
9299	Parse an environment variable .
9300	Set a basic username and password .
9301	Sets the API key .
9302	Get json content from a folder .
9303	Return a list of all schemas in the current directory .
9304	Load the schema from a JSON file .
9305	Returns a jsonschema . RefResolver object for the given schema .
9306	Validate an object against the schema .
9307	Returns a list of valid examples .
9308	Returns a list of invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of a OneDrive user .
9313	Get OneDrive object representing list of objects in a folder .
9314	Create a folder .
9315	Add comment message to a specified object .
9316	Convert or dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag&drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and then displays it
9324	Retrieves a parameter from a tag .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components one pixel at a time
9331	delete all of the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update
9334	When dealing with a Top - Level window position it absolute lower - right
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated wit the wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the item from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	called when adding a control to the window
9349	Re - parent a child control with the new wx_obj parent
9350	make several copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all the modules in the given rootpath .
9354	Return a list of children sub - components that are column headings
9355	Update the grid if rows and columns have been added or deleted
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	column -> sort the data based on the column indexed by col
9359	Remove all rows and reset internal structures
9360	Called to create the control which must derive from wxControl .
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell . Returns True if changed
9363	Return True to allow the given key to start editing
9364	This will be called to let the editor do something with the first key
9365	Decorator to register a type handler .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable all top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Sets the tag for the given object .
9373	Return an HTML representation of a table s autosummary .
9374	Returns a Documenter instance for the given object .
9375	Mangle a signature .
9376	Import a module by its name .
9377	Add an autolink role to a document .
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string or None if cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Sets the icon of the widget .
9386	Display or hide the window optionally disabling all other windows
9387	Open read and eval the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	translate gui2py attribute name from pythoncard legacy code
9393	Write content to the clipboard data can be either a string or a bitmap
9394	Find the autosummary of an object in a docstring .
9395	Add the object and all their childs
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Returns a representation of the image .
9401	Decorator to create an expression filter .
9402	Decorator to create a node filter .
9403	Assert that the given path is the current path of the document .
9404	Assert that the current path does not exist .
9405	Check if a path exists .
9406	Check if path has no current path .
9407	Select an option .
9408	Apply a filter to a value .
9409	Returns a webdriver for a given browser name .
9410	Return the XPath of the expression .
9411	Returns True if the given node matches the filters .
9412	Switches to a frame .
9413	Accept an alert .
9414	Accept a confirmation message .
9415	Dismiss the confirmation message .
9416	Accepts a prompt .
9417	Dismiss a prompt .
9418	Save the page to a file .
9419	Saves a screenshot to a file .
9420	Raises the server error if any .
9421	Returns True if the value matches the filter .
9422	Check if a field has been checked .
9423	Check if a field is not checked .
9424	Check if there is an unchecked field .
9425	Returns True if there is no unchecked field .
9426	Assert that the query contains the given text .
9427	Assert that there is no text in the query .
9428	Assert that the title matches the query .
9429	Raises ExpectationNotMet if there is no title .
9430	Check if the file has a title .
9431	Check if there is a title with the given keyword arguments .
9432	Returns a list of all matches matching the query .
9433	Find the first item in the list .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for setting the value of a function .
9438	Decorator to synchronize a function .
9439	Check if an error should be caught .
9440	Returns the number of results to compare .
9441	Returns True if the result cache is at least size bytes .
9442	Returns True if any of the options are None .
9443	Generates a message for a failure .
9444	Returns True if the given count matches the given options .
9445	Normalizes a string .
9446	Normalize whitespace in text .
9447	Convert text to regex .
9448	Returns a boolean indicating if the current URL is a valid URL for the given session .
9449	Resize the window to the specified width and height .
9450	Start the WSGI application .
9451	Add a cgetter to the AdvancedProperty .
9452	Sets the instance method of this class .
9453	Separates a class method .
9454	Returns a string representation of the log traceback .
9455	Returns a string representation of the object source .
9456	Returns the logger for the given instance .
9457	Sets the logger to use .
9458	Send a request to the API .
9459	Access the channels
9460	Access the users
9461	Create a message for a channel .
9462	Translate a message to slack .
9463	Send a message to Slack .
9464	Read a message from a channel .
9465	Run the Slack API .
9466	Run slack client .
9467	Compute the difference between two dicts .
9468	Colorize a message .
9469	Called when a task starts .
9470	Run a runner on a result .
9471	Prints a summary of stats for each host .
9472	Print the result of a runner on a skipped host .
9473	Convert a prefix to an address mask .
9474	Decorator to check if a value is empty .
9475	Add a model to this object .
9476	Returns a dictionary containing all the elements in the list .
9477	Load a model from a dictionary .
9478	Convert the list to a dictionary .
9479	Parse a config file .
9480	Parse the state of the device .
9481	Translate a config file .
9482	Load the JINJA_FILTERS class .
9483	Find the path to a yang file .
9484	Convert a model to a dictionary .
9485	Returns the difference between f and s .
9486	Make an HTTP POST request to the given URL .
9487	Get the authorization code URI .
9488	Get a new token .
9489	Parse url query parameters .
9490	Dequery a URL .
9491	Build a url from a base url .
9492	Handle an exception .
9493	Create a Response object from a response body .
9494	Makes a response to a redirect error .
9495	Make a JSON response .
9496	Gets the authorization code for a given request .
9497	Refreshes a refresh token .
9498	Get an authorization token for a given client .
9499	Gets the authorization code for a given URI .
9500	Get an OAuth token from a POST request .
9501	Gets the authorization from the request .
9502	Open a device .
9503	Read a byte from the device .
9504	Read a number from the device .
9505	Read a byte from the device .
9506	Write a buffer of bytes to the device .
9507	Write a byte string to the device .
9508	Write i2c block data .
9509	Returns the CDN URL .
9510	Creates a copy of this object .
9511	Create a local copy of the file .
9512	Create a remote copy of a file .
9513	Construct a FileInfo object from the given file_info .
9514	Upload a file to a store .
9515	Upload a file from a URL .
9516	Upload a file from a URL synchronously .
9517	Returns a list of file cdn URLs for this group .
9518	Construct a group from group_info .
9519	Create a group from a list of files .
9520	Perform a base operation on the request .
9521	Returns a generator of uuids for each file in the sequence .
9522	Print a list of items .
9523	Yields a progress bar .
9524	Make a request to upload a file .
9525	Home mode status .
9526	Get a list of cameras .
9527	Get camera information .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get a motion enum for a camera .
9531	Saves the MDParam for a camera .
9532	Update the camera settings .
9533	Returns True if li is the last li in meta_data .
9534	Convert a list of nodes into a single list of nodes .
9535	Get the ilvl for a given namespace .
9536	Returns the vMerge xpath of the given tc .
9537	Returns the grid span of a tc .
9538	Returns the timedelta at the given index .
9539	Check if a style is false .
9540	Check if a string is bold .
9541	Check if a string is italics .
9542	Check if a string is underlined .
9543	Returns True if p is a title .
9544	Returns a generator that yields text - run content data .
9545	Returns a dictionary of information about a relationship .
9546	Parse a document . xml file and return a dictionary .
9547	Returns the list type ordered by numId and ilvl .
9548	Build a list from a list of nodes and meta data .
9549	Build an etree element from a tuple .
9550	Build an etree . Element for a table .
9551	Get the content of a tag .
9552	Strip a tag from all elements in the tree .
9553	Find a dataset by URL .
9554	Load MNIST data from a pickle file .
9555	Load a CIFAR file .
9556	Plot a list of images .
9557	Plot a list of layers .
9558	Plot a set of filters .
9559	Create a batch from a list of arrays .
9560	Encodes a string into a list of strings .
9561	Generate a batch of classifiers .
9562	Predict a sequence from a set of labels and steps .
9563	Add weights for a convolution .
9564	Encode x using the feed - forward algorithm .
9565	Decode a z - dimensional graph .
9566	Find the output name of a layer .
9567	Compute the score of the autoencoder .
9568	Predict the value of x .
9569	Predict the probability of x .
9570	Predict the logit of x .
9571	Calculate the mean of the predicted values .
9572	Given a list of features and labels and a list of seq_begins and seq_lengths return a list of features labl and mask .
9573	Returns a sample of sequences from a dataset .
9574	Load a network from a file path .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Yield names and expressions that match a set of patterns .
9578	Yield names and params matching patterns .
9579	Create a pattern from kwargs .
9580	Returns a list of variables .
9581	Calculate the accuracy of the model .
9582	Scan a list of inputs and outputs .
9583	Build an Activation .
9584	Reservoir function .
9585	Add a loss to the graph .
9586	Iterate over the dataset .
9587	Train a set of monitors .
9588	Returns a md5 hash of the model .
9589	Build the computation graph .
9590	Returns a list of all input layers .
9591	Returns a list of variables .
9592	Find the layer with the given parameter .
9593	Compile a feed - forward function .
9594	Predict the output of x .
9595	Calculate the score of the model .
9596	Save the model to a file .
9597	Load a network from a file .
9598	Returns the loss of the graph .
9599	Returns a list of updates .
9600	The size of the output layer .
9601	Connect to a set of inputs .
9602	Bind to a graph .
9603	Resolve input shapes .
9604	Resolve the outputs of the layer .
9605	Log the parameters for this layer .
9606	Returns the logarithm of the parameters .
9607	Format a string .
9608	Resolve a shape from a list of layers .
9609	Find a key by name .
9610	Add a bias vector .
9611	Return a dict representation of the form .
9612	Compute the log - gabor .
9613	Compute the log - gabor image .
9614	Add a tier to the graph .
9615	Remove a tier .
9616	Returns the tier with the given name .
9617	Convert to Eaf .
9618	Add a point to the intervals .
9619	Add a new interval to the tier .
9620	Remove an interval from the tier .
9621	Remove a point from the graph at a given time .
9622	Returns a generator yielding the intervals .
9623	Returns a list of all intervals .
9624	Indent the text of an element .
9625	Add an annotation to a tier .
9626	Add a controlled vocabulary entry .
9627	Adds a description for a controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type .
9632	Add a link to a file .
9633	Add a locale .
9634	Add a link to a secondary file .
9635	Add a new tier .
9636	Remove all timeslots from self . timeslots .
9637	Extract time slots between start and end .
9638	Generate an annotation id .
9639	Generate a time slot id .
9640	Returns the child tiers for the given id tier .
9641	Returns the full time interval .
9642	Get the reference annotation data after a given time .
9643	Returns a list of annotations between a given time .
9644	Returns a list of tier IDs for the given ling_type .
9645	Merge a list of tiers into one .
9646	Remove all annotations from a tier .
9647	Removes a description from a controlled vocabulary .
9648	Remove a license .
9649	Remove files that are linked to a file .
9650	Remove a property .
9651	Remove a reference annotation .
9652	Remove secondary linked files .
9653	Remove a tier .
9654	Remove a list of tiers .
9655	Rename a tier .
9656	Shift annotations from one time to another .
9657	Entry point for optparse .
9658	Display debug information for the storage
9659	Returns the base level of the given text .
9660	Return a list of embedding levels .
9661	Perform explicit embedding and overrides .
9662	Calculate the number of runs for a given level .
9663	Resolve weak types .
9664	Resolve non - negative types .
9665	Reverse a contiguous sequence .
9666	Helper function to reorder resolved levels .
9667	Process a maya scene .
9668	Convert a list of lines from PySide2 to Qt .
9669	Add an attribute to an object .
9670	Parse command line arguments .
9671	Ensure backward compatibility of a binding .
9672	Show the MayaWindow widget .
9673	Discover a gui and return it .
9674	Deregister a Maya host .
9675	Adds a file to the file menu
9676	Ensures that a selection is maintained .
9677	Returns a generator that yields the maintained time .
9678	Show no GUI .
9679	Setup the types for this bot .
9680	Returns a generator that yields the cumulative data .
9681	Returns a list of values for a single axis .
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters necessary to transform x & y coordinates
9684	Reverse a mapping .
9685	Yield a range of floats from start to stop .
9686	Add data to the model .
9687	Add svg definitions
9688	Add a new config file .
9689	Renders the graph .
9690	Calculate left margin .
9691	Calculate the margin to the right of the key .
9692	Calculate the margin at the top of the graph .
9693	Add a popup with the given label .
9694	Calculate bottom margin .
9695	Draw the graph .
9696	Make a datapoint text .
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X - axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard - code the styles into the SVG XML if style sheets are not used .
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance
9705	Runs a bot on the given host and port .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to a PRIVMSG message .
9709	Dispatch patterns .
9710	Generate a new nick .
9711	Handle a PING request .
9712	Handle a registered request .
9713	Attempt to open a connection to the server .
9714	Register the node with the boss .
9715	Task runner .
9716	Decorator to require a callback to be called by the boss .
9717	Returns a list of command patterns .
9718	Register a success message .
9719	Execute a task on a worker .
9720	Add a worker with the given nick .
9721	Send validation email .
9722	Send password reset notification .
9723	Validate a password strength value .
9724	Verify a user s access token .
9725	Delete a user .
9726	Returns True if the request is allowed for the view .
9727	Returns a ThreadPoolExecutor .
9728	Returns a docker APIClient .
9729	Returns the TLS client .
9730	Returns the service name .
9731	Wrapper for docker methods .
9732	Submit a method to a docker server .
9733	Check if a Docker service is running .
9734	Stops the Docker service .
9735	Returns a new UniqueEmailValidator for the given value .
9736	Update an existing password .
9737	Updates the instance with the new password .
9738	Validate a user email address .
9739	Create a new token and return it .
9740	Delete an object .
9741	Initializes a new ResendConfirmationEmail
9742	Send a HTTP POST request .
9743	Updates the expiry of this object .
9744	Context manager for password reset email notification .
9745	Handle an email notification .
9746	Handle password reset email notifications .
9747	Adds a validation email subject handler to the notification .
9748	Authenticate the user with the given request .
9749	Authenticate the user with the given key .
9750	Show the contents of a notebook .
9751	Return a list of bokeh plots .
9752	Returns a custom JS callback for the given change .
9753	Returns a widget for the given parameter name .
9754	Render obj to view .
9755	Returns a text widget .
9756	Return a list of named objects .
9757	Returns the owner of a method .
9758	Assign HTTP Auth Credentials to the user .
9759	Ping the device .
9760	Returns a tuple of information about the device .
9761	Get the health of the cluster .
9762	Convert a number of bytes to a readable string .
9763	Returns the total CPU load .
9764	Returns the memory size in bytes .
9765	Returns the total number of devices in the network .
9766	Returns a list of volumes .
9767	Get a volume by its id .
9768	Returns the total size of a volume .
9769	Returns the percentage used of a volume .
9770	Returns the average disk temperature for a volume .
9771	Returns the maximum disk temperature for a volume .
9772	Returns the disk with the given id
9773	Authenticate using the SYNO API .
9774	Executes a GET request to the given URL .
9775	Executes a get request at the given URL .
9776	Update the entry .
9777	Get the utilisation for this entry .
9778	Returns the SynoStorage object for this entry .
9779	Returns a Tenant object for the given request .
9780	Returns the tenant token .
9781	Helper function for building an attribute dictionary .
9782	Override settings with INSTALLED_APPS .
9783	Override settings . INSTALLED_APPS if INSTALLED_APPS is set .
9784	Returns a dict of all global settings .
9785	Do a GET request to the server .
9786	Get a value from the config .
9787	Change the value of a key .
9788	Migrate OAuth2Util config file .
9789	Start the web server .
9790	Wait for a response from the server .
9791	Get new access information from Reddit .
9792	Checks if a new token is present .
9793	Set the access credentials for Reddit .
9794	Refresh OAuth2 tokens .
9795	Create a manifest table .
9796	Split a full path into bucket and prefix .
9797	Check if a bucket is a glacier .
9798	Extract the run id from a key .
9799	Clean a dictionary .
9800	Add a run to a table .
9801	Check if a run is in a manifest .
9802	Extract a Snowplow Schema from a URI .
9803	Remove snake case organization and version from a schema .
9804	Parse a list of contexts .
9805	Parse an unstructured event .
9806	Transform an event line into a JSON event .
9807	Convert a SnowplowEventTransformation to a JSON string .
9808	Returns the name of the template used in the response .
9809	Print a django context .
9810	Print a list of variables in a context .
9811	Returns a pformat_sql_html string .
9812	Format a django - context html string .
9813	pformat_dict_summary - html
9814	Helper function to style the given text .
9815	Formats the given object using PrettyPrinter .
9816	Format an object to a stream .
9817	Get a token from a Latex string .
9818	Returns a list of nodes in a LaTeX object .
9819	Convert a list of latex nodes to text .
9820	Sets the tex_input_directory .
9821	Read a file from the input directory .
9822	Convert a LaTeX nodelist to text .
9823	u Convert a Unicode string to a LaTeX string .
9824	Convert a string to unascii .
9825	Fetch organisation information .
9826	Returns a list of boards .
9827	Returns a list of members .
9828	Updates an organisation .
9829	Remove a member .
9830	Add a member by id .
9831	Add a member to a group .
9832	Fetches list information from the server .
9833	Add a card to the account .
9834	Returns the label information for this URI .
9835	Returns a list of items .
9836	Updates the label name .
9837	Updates the label dict .
9838	Get the user authorisation URL .
9839	Get card information .
9840	Get a board from the API .
9841	Get a list from the server .
9842	Returns a list of checklists for the given query parameters .
9843	Add a comment .
9844	Add an attachment to a file .
9845	Adds a new checklist .
9846	Add a label from a dictionary .
9847	Add a label from a class .
9848	Add a member .
9849	Get member information .
9850	Returns a list of cards .
9851	Returns a list of organisations .
9852	Create a new board .
9853	A decorator to register a single - dispatch method .
9854	Fetches board information .
9855	Returns a list of lists .
9856	Returns a list of labels .
9857	Get a single card .
9858	Returns a list of all available checklists .
9859	Get information about an organisation .
9860	Updates the board .
9861	Add a list to the database .
9862	Add a label to the list .
9863	Returns a JSON representation of the checklist .
9864	Get a card .
9865	Returns a list of items matching the given query parameters .
9866	Updates a checklist .
9867	Add an item to the list .
9868	Removes an item from the list .
9869	Updates the name of a checklist .
9870	Update the state of a checklist .
9871	Adds a new Authorisation request .
9872	Raise an exception if a resource is unavailable .
9873	Build a URL for a given path .
9874	Fetch JSON data from a URI .
9875	Create a new organisation .
9876	Create a new board .
9877	Create a new label .
9878	Create a list .
9879	Create a new card .
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organisation by id .
9883	Get a board by id .
9884	Get a list by id .
9885	Get a card by id .
9886	Create a new checklist .
9887	Get a member by id .
9888	Extract a domain from a URL .
9889	Convert a string to a tokenized HTML string .
9890	Convert text to a python object .
9891	Convert a string to a list of sentences .
9892	Set a password for a service .
9893	Split text with locations .
9894	Mark a regex with split_locations .
9895	Mark a regex as beginning and ending .
9896	Main entry point for the CLI .
9897	Create a new AES cipher .
9898	Get the AES mode .
9899	Returns the priority of this package .
9900	Check the encryption scheme .
9901	Publish a message .
9902	Creates a unique identifier .
9903	Connect to the MQTT server .
9904	Handle a CONNACK packet .
9905	Encodes a string to UTF - 8 .
9906	Decode a string .
9907	Encode a 16 - bit integer .
9908	Encodes a 128 - bit value into a bytearray .
9909	Decodes the length of a string .
9910	Return the encoded version of the header .
9911	Encode the var header .
9912	Decode a packet .
9913	Encodes the result into a string .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode this message into a string .
9917	Encode the message .
9918	Decode a 16 - bit packet .
9919	Encode this message into a string .
9920	Encode the message .
9921	Decode a packet .
9922	Decode a packet .
9923	Returns a URL to the VK API .
9924	Make a request to the API .
9925	Refreshes the block list .
9926	Formats the data into a numpy array .
9927	Fit the model to the given data .
9928	Fit the KMeans model to the data .
9929	Fit a MeanShift to data .
9930	Fit the model to the data .
9931	Returns a list of clusters for the given data .
9932	Map cluster ids to sampled clusters .
9933	Sort clusters by rank .
9934	Parse a datetime and return a date object .
9935	Returns the total number of points in a dictionary .
9936	Returns the total time span of a DataFrame .
9937	Returns a unitpicker for a given value .
9938	Returns a pretty representation of a string .
9939	Analyte 2 namemass .
9940	Return the mass name of an analyte .
9941	Collect data from a CSV file .
9942	Enumerate a boolean array .
9943	Convert a tuple to a boolean .
9944	Fast - smooth a matrix .
9945	Apply a fast gradient to an array a .
9946	Finds the minimum distance between x and y
9947	Cluster MeanShift .
9948	Cluster n_clusters with k - means .
9949	Cluster data using DBSCAN .
9950	Returns a numpy array of defined SRMs .
9951	Read LaTools configuration .
9952	Read the latools config file .
9953	Print all currently defined LAtools configurations .
9954	Copy the SRMTable . csv file to the specified destination .
9955	Create a new LaTeX configuration file .
9956	Change the default configuration .
9957	Returns a copy of a Filter that excludes downholes .
9958	Defragment a Filter .
9959	Calculate the despike of the focus .
9960	Plot an autorange plot .
9961	Returns a tuple of boolean and tuple of boolean values .
9962	Returns the ratio of analytes to the internal standard .
9963	Calculate a set of analytes .
9964	Sample stats from analytes .
9965	Returns a dict of the ablation times .
9966	Filter analytes below and above a given threshold .
9967	Filter analyte for gradients below a given threshold .
9968	Calculate the correlation between two analytes .
9969	Filter the correlation between two samples .
9970	Create a new filter .
9971	Returns a dictionary containing the filter parameters .
9972	Plot histograms of data .
9973	Compute summary statistics .
9974	Load reference data from Google Spreadsheets .
9975	Lookup the type of a type variable .
9976	Returns a list of elements .
9977	Calculate the mass of a molecule .
9978	Generate a tuple of ANSI keywords .
9979	annihilate a tuple based on a predicate and a stack
9980	Deduplicate a tuple .
9981	Gaussian weighted statistics .
9982	Gaussian Gauss .
9983	Returns the standard deviation of a .
9984	Returns a list of samples for a given subset .
9985	Despike the data .
9986	Calculate the weighted mean .
9987	Calculate the interpolation of the bkg .
9988	Subtract a set of analytes from the Bkg .
9989	Calculate the ratios .
9990	Create a subset of the analysis .
9991	Filter gradient thresholds based on a set of percentiles .
9992	Fit a classifier to the data .
9993	Apply a classifier to the data .
9994	Filter the correlation between two analytes .
9995	Filter on analyte or samples
9996	Turn off a filter .
9997	Returns a string describing the status of the sample and subset .
9998	Filter the data with a defrag filter .
9999	Filter samples by number of samples removed .
10000	Plot a histogram of the gradients .
10001	Plot a gradient crossplot .
10002	Plot histograms .
10003	Returns a list of tracing plots .
10004	Plots gradient plots .
10005	Filter reports by analytes .
10006	Sample the stats for each trace .
10007	Returns a list of stats for each sample .
10008	Returns a pd . DataFrame with minimal export traces .
10009	Export traces to a directory .
10010	Save the log to a directory .
10011	Export the minimal traces to a directory .
10012	Parse a file by regex .
10013	Map function fa to function f .
10014	Plot a polynomial .
10015	Compute the Bayes scale of a matrix .
10016	Returns a scaler for the median of a string .
10017	Noise despike algorithm .
10018	Compute the expdecay decay function .
10019	Add a new component .
10020	Remove a component from the graph .
10021	Clears the cache .
10022	Remove all unused switches and analytes .
10023	Returns True if the given fuzzkey matches one or more filter names equally well .
10024	Convert a key to a numpy array .
10025	Grab a filter and return it .
10026	Returns a string containing information about the component .
10027	Decorator to log a function .
10028	Write a log file .
10029	Read a log file .
10030	A decorator that allows a function to be auto - logged in .
10031	Get information about the modem .
10032	Send a message to an eternalegypt server .
10033	Parse a file - like or string object .
10034	Return a link to nbviewer . jupyter .
10035	Returns a snippet of the thumbnail .
10036	Returns the code snippet as a string .
10037	Returns the code_example attribute of this object .
10038	Returns the url of the nbviewer
10039	Returns the path to the output file .
10040	Process a notebook .
10041	Create a python file .
10042	Download a list of files .
10043	Create a new thumbnail .
10044	Returns a description of the document .
10045	Scale a PIL image .
10046	Save the image to a thumbnail .
10047	Returns a copy of the thumbnail figure .
10048	Returns the url for the given filename .
10049	Given a field name and a list of db_table_fields return a generator of db_change_languages .
10050	Creates a function that returns the default value of a field .
10051	Process a thumbnail file .
10052	Save a model instance to a file .
10053	Refreshes the cache .
10054	Return a list of all thumbnails .
10055	Create a new thumbnail .
10056	Delete the image at the specified size .
10057	Create a new thumbnail .
10058	Returns a Thumbnail with the given name and size .
10059	Delete a thumbnail .
10060	Receive a message from the server .
10061	Subscribe to a callback for a given number .
10062	Returns a list of the states of this request .
10063	Add a provider .
10064	Send a message to the server .
10065	Returns the receiver blueprint for the given provider .
10066	Returns a dictionary of receiver blueprints .
10067	Receive a message from the gateway .
10068	Receive a status from the gateway .
10069	Decorator for jsonex API calls .
10070	Forward an object to one or more clients .
10071	Sign a web3 transaction .
10072	Estimate the amount of gas at the given address using Web3 .
10073	Estimate the amount of gas to use in a transaction .
10074	Write bytes to the stream .
10075	Read a line from the stream .
10076	Send a message to the specified recipients .
10077	Return the message as a string .
10078	Return True if there are any bad headers in the reply .
10079	Attach a file to this document .
10080	Register a list of services .
10081	Create a Config object from a module .
10082	Register a list of resources .
10083	Returns the value for the given key .
10084	Exit the object with the given type and value .
10085	Setup the data manager .
10086	Returns the number of atoms at the given wavelength .
10087	Calculate the Cauchy Equation .
10088	Initialize the backend .
10089	Login with the given username and password .
10090	Returns a dictionary of domain names .
10091	Get all results for a given endpoint .
10092	Patch an object .
10093	Send a DELETE request .
10094	Return True if path1 and path2 are the same file .
10095	Create a junction link .
10096	Initialize the Jacquard logger .
10097	Raise a UsageError .
10098	Returns a list of unclaimed readers and a list of vcf_readers .
10099	Get a new column header from a vcf_reader .
10100	Claims a set of vcf and hc files .
10101	Initialize population stats .
10102	Claims unclaimed_file_readers and translated_vcf_readers .
10103	Split a string into a list of lines .
10104	Return the prefix of a line terminator .
10105	Returns the line terminator for the given data .
10106	Seek to the next line in the file .
10107	Seek to the previous line in the file .
10108	Returns the last 10 lines of the file .
10109	Returns the first 10 lines of the file .
10110	Iterate over the contents of the file .
10111	Claims a set of file readers .
10112	Parse a VCF record .
10113	Given a list of sample_names and a list of sample_fields return a dictionary of sample tag values .
10114	Return a vcf . vcfRecord . _EMPTY_SET containing the tags .
10115	Join info_dict to self . info .
10116	Returns a string representation of the format field .
10117	Return a string representation of a sample field .
10118	Returns tab - delimited newline terminated string of VcfRecord .
10119	Add a new sample tag value .
10120	Add or replace a filter .
10121	Return a list of categories available to a user .
10122	Creates a ProductsForm for the given category and products .
10123	Return a StaffProductsForm for the given user .
10124	Add an error for a product .
10125	Memoise a function .
10126	Returns a ModelFieldsForm for the given model .
10127	Returns a list of items pending or purchased .
10128	Send an email to a user .
10129	Iterate over the OSM stream .
10130	Parse an OSM file and return a list of nodes ways and relations .
10131	Iterate over OSM notes .
10132	Returns True if the given user passes the filter .
10133	Returns True if the user is a member of the group .
10134	Returns the quantity remaining for a user .
10135	Filter in - cart carts by user .
10136	Returns a queryset filtered by user .
10137	Perform a pre - filter on a queryset .
10138	Perform a pre - filter on the user .
10139	Filter a user based on a condition .
10140	Decorator that memoises a function if it modifies a cart .
10141	Create a new reservation for a given user .
10142	Add a reservation to the cart .
10143	Apply a voucher to the cart .
10144	Validate the cart .
10145	Remove invalid vouchers from the cart .
10146	Recalculates the discounts for the current user .
10147	Add a discount to the cart .
10148	Decorator to create a report view .
10149	Returns a generator yielding all the rows of the data .
10150	Returns the form for the given request .
10151	Renders the given data .
10152	List all registered reports .
10153	Returns a list of items that have been sold .
10154	Returns a summary of all sales .
10155	Returns a QuerysetReport of all payments
10156	Returns a list of credit note refunds .
10157	Get the status of a product .
10158	Returns a list of items with the discount status .
10159	Returns a list of invoices for a product line .
10160	List all invoices that have been paid since the given date .
10161	Return a QuerysetReport of credit notes .
10162	List all invoices .
10163	Get a list of attendees .
10164	List speaker registrations .
10165	Show a list of invoices .
10166	Returns a list of categories that are missing from the context .
10167	Returns the amount of credit available for a given context .
10168	Returns a boolean indicating whether the context is sold out and the user is unregistered .
10169	Redirect the user to a new page if the user has completed the registration .
10170	Edit an attendee s profile .
10171	Handle an AttendeeProfile .
10172	List available products for a given category .
10173	Handle products form .
10174	Handle a voucher .
10175	Checkout a user .
10176	Returns a redirect to the invoice .
10177	View an invoice .
10178	Manually pay an invoice .
10179	Refund an invoice .
10180	Generate a credit note .
10181	Modify the registration of a user .
10182	Extend the reservation period for a user .
10183	Send an email to all invoices .
10184	Returns a list of badges .
10185	Render a user badge .
10186	Returns a list of all available discounts for a user .
10187	Annotate with past usages .
10188	Return a list of all available products for a user .
10189	Apply this credit note to an invoice .
10190	Calculate the cancellation fee .
10191	Generate a random access code .
10192	Creates a lazy function that evaluates a function .
10193	Get an object from a module name .
10194	Create a new invoice for a given cart .
10195	Generate a manual invoice .
10196	Generate a product from a cart .
10197	Applies credit notes to an invoice .
10198	Returns True if the user can view the invoice .
10199	Refresh the invoice from the database
10200	Validate that the user is allowed to pay for unpaid invoices .
10201	Update the invoice status .
10202	Mark the invoice as paid .
10203	Returns True if the invoice matches the cart .
10204	Updates the validity of the invoice .
10205	Mark the invoice as void .
10206	Refunds the amount of the invoice .
10207	Send an email to a user .
10208	Update the annotation .
10209	Flatten a field .
10210	Print all downloads .
10211	Download the results for a given field .
10212	Get data for a project .
10213	Returns a list of processors .
10214	Print the inputs of a processor .
10215	Load data from a JSON string .
10216	Upload a project to a processor .
10217	Upload a file to the server .
10218	Download a field from the cache .
10219	Returns a list of all subclasses of c .
10220	Get a repository and project .
10221	Get variant phenotypes with suggested changes .
10222	Get variant phenotypes with suggested changes merged .
10223	Return a list of variants matching the given coordinate query .
10224	Bulk search variants by coordinates .
10225	Load this element from the cache .
10226	Return a list of all elements in a sequence that are not in the list .
10227	Authenticate to asana api .
10228	Prompt the user to select a value from a list .
10229	Returns the data for a saved issue .
10230	Move issue data from other_ns to self . data .
10231	Get the data for a task that has been saved .
10232	Get an asana task by ID .
10233	Save data to a JSON file .
10234	Prompt the user for a value .
10235	A decorator that wraps a function in a transport task .
10236	Flush all items in the queue .
10237	Create a task in an asana workspace .
10238	Formats a list of task numbers with links .
10239	Create a missing task in a workspace .
10240	Returns a list of data types for this project .
10241	Log an ekmmeters debug message .
10242	Initialize the serial port .
10243	Sets the m_max_waits and m_wait_sleep values
10244	Combines all of the AB fields .
10245	Renders the meter reads as a JSON string .
10246	Sets the ekm context .
10247	Calculate the power flow function .
10248	Sets the maximum demand period .
10249	Sets the metadata of a password .
10250	Unpacks a meter data structure from a buffer .
10251	Convert meter data to meter data .
10252	Render def_buf as JSON .
10253	Calculate the CRC of a meter read .
10254	Split an EK date into a namedtuple .
10255	Returns the mons buffer in the given direction .
10256	Sets the CT Ratio .
10257	Assign a schedule to a period .
10258	Assigns a schedule to a season .
10259	Sets the season schedules .
10260	Assigns a holiday date .
10261	Reads the schedules from the specified tableset .
10262	Extracts a schedule for a given period .
10263	Reads monthly rates for a given month .
10264	Extracts the kWh tariff for a given month .
10265	Read Holiday Dates .
10266	Extracts the holiday date for a given setting holiday .
10267	Returns a boolean indicating whether the read was successful or not .
10268	Write a command message .
10269	Authenticate using a password string .
10270	Updates the list of observers .
10271	Initializes the LCD lookup .
10272	Send a request to the ekm server .
10273	Send a request to the meter .
10274	Send a request to the meter .
10275	Make AB request .
10276	Calculate the Power Factors .
10277	Sets the LCDCmd for the specified display list .
10278	Sets the relay .
10279	Send a serial post - end message .
10280	setPulseInputRatio - Sets the current input rate .
10281	Sets the KWH to zero .
10282	Sets the length of the LCD .
10283	Iterate over fields in a schema .
10284	Iterate over a schema .
10285	Returns a list of paragraphs .
10286	Generate a random string .
10287	Returns the elapsed time and result as a string .
10288	Return a string with the given color and text .
10289	Show a single line of text .
10290	Returns a summary of the result .
10291	Parse command line arguments .
10292	Setup the formatter .
10293	Starts the test run .
10294	Transform a config file into an example loader .
10295	Transforms the description of a node .
10296	Convert a description body into an example .
10297	Transform an example into a FunctionDef .
10298	Transform an example body into a node .
10299	Returns True if the argument takes only self .
10300	Register a path hook .
10301	Convert source_bytes to code .
10302	Apply an argument parser .
10303	Load a file by name .
10304	Load a source from a given path .
10305	Iterate over all files in a directory .
10306	Checks the contents of a file in a given location .
10307	Returns a list of messages for a given receiver .
10308	Add a place to a directory .
10309	Remove a place from the filesystem .
10310	Restart one or more places .
10311	Call a function on the results .
10312	Get a list of messages .
10313	Create a service .
10314	Refresh a node s session .
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the last update date of a node .
10318	Get a list of all nodes .
10319	Refreshes the current session .
10320	Increment the number of times a key has been modified .
10321	Dereference this node .
10322	Returns a list of tokens interleaved with the delimiter .
10323	Check if a path is bad .
10324	Merge two statuses .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Returns a function that returns the constant of x .
10328	Splat a function into a list of iterables .
10329	Unsplatter a function .
10330	Run a process .
10331	Create a timer service .
10332	Completely parse a reader .
10333	Given a list of literals return an alternative parser .
10334	Returns an OptionalParser for the given parser .
10335	Returns a parser for the first time .
10336	Returns a RepeatedParser for the given parser .
10337	Given a parser and a separator return a RepeatedOnceSeparatedParser .
10338	Given a parser and separator return a RepeatedSeparatedParser .
10339	Check if a state exists in a list of states .
10340	Close the state .
10341	Check if the connection is still open .
10342	Adds a heart to the master .
10343	Wraps a service into a heart .
10344	Freeze a graph from a checkpoint .
10345	Freeze a model from a checkpoint .
10346	Save a graph to a file .
10347	Save a graph only from a checkpoint .
10348	Save weights from input_checkpoint to output_path .
10349	Restore data from a checkpoint .
10350	Parse a tag .
10351	Render a tag .
10352	Validate that a tag requires at least one argument .
10353	Get context data .
10354	Parse a tag .
10355	Get context data .
10356	Convert a Caffe model to a TensorFlow graph .
10357	Freeze the caffedef and caffemodel files .
10358	Save a graph to a file .
10359	Make num_columns rows from seq .
10360	Groups an iterable into n chunks without filling the string .
10361	Iterate over every item in iterable .
10362	Remove duplicate items from iterable .
10363	Returns the first element of an iterable .
10364	Takes an iterable until a predicate is met .
10365	Partition count items into bins of size bin_size
10366	Returns an always iterable for the given item .
10367	Suppress callables that raise exceptions .
10368	Returns the number of duplicates in the given iterables .
10369	Assert that an iterable is ordered .
10370	Swaps the result of a partition_result to a new result .
10371	Partition a dictionary into two dictionaries .
10372	Get the first n queues .
10373	Reset the iterator .
10374	Parse a token as a variable .
10375	Create a tag for a template .
10376	Returns the descendant of this public keychain .
10377	Fetch a list of sqlite master records .
10378	Returns an iterator over the nodes of an object .
10379	Returns True if obj matches the specified selector .
10380	Parse the given selector .
10381	Returns a list of production methods for a selector .
10382	Returns a list of nodes whose parents are in lhs and rhs
10383	Returns the list of ancestors of a node .
10384	Return the siblings of a node in lhs and rhs
10385	Returns the nth child production of the given expression .
10386	Returns a list of nodes matching the given validators .
10387	Ping an ICMP port .
10388	Make a request to the TensorFlow server and return the response .
10389	Expire all cached items .
10390	Set the value of k to v .
10391	Get a tuple from the store .
10392	Returns True if there is a k value in the store .
10393	Checks if the given timestamp is a valid NistBeacon .
10394	Initialize a NestBeaconValue from a json string .
10395	Initialize a NISTBeaconValue object from an XML string .
10396	Returns the minified JsTemplateResponse content
10397	Get a filename from the logfile .
10398	Returns a list of rows .
10399	Validate the given token against the expected data .
10400	Returns a Fernet engine .
10401	Validate a token against all supported algorithms .
10402	Create a new token .
10403	Compute the 32 - bit counter .
10404	Counter 64 - bit integer .
10405	Returns the average duration in seconds for a list of visits .
10406	Setup tensor outputs .
10407	Setup the sources and triggers .
10408	Send an event to a source .
10409	Start a watchdog for all sources .
10410	Parse a format string .
10411	Parse a line of log data .
10412	Validate that a field expires at the given date .
10413	Validate that a message is provided to the requester .
10414	Verify that the token is valid .
10415	The name of the device .
10416	Warn about a nonlocal image URI .
10417	Connect the receivers of the request .
10418	Create a secret link .
10419	Sends an accept notification to the user .
10420	Sends confirmation emails .
10421	Sends an email verification notification .
10422	Sends a zenodo access request rejected notification .
10423	Send an email notification .
10424	Create a new link .
10425	Validate the given token against the expected data .
10426	Revoke this link .
10427	Create a new request .
10428	Get a user by a receiver .
10429	Confirm the email address of the request .
10430	Accepts a request .
10431	Reject the request .
10432	Create a secret link .
10433	Returns a SHA512 hash .
10434	Verify the signature of a message .
10435	Check if a record is embargoed .
10436	Send an access request to a user .
10437	Confirm a record .
10438	Create a new SSHCommandClientEndpoint .
10439	Reverse the value of a column .
10440	Returns a string representation of the selected item .
10441	Returns the list of items in the query .
10442	Return the version of the file .
10443	Set the version of the file .
10444	Initialize ssh .
10445	Start the timer .
10446	Check if the service is running .
10447	Delete a shared link .
10448	Create a Riemann client .
10449	Stop the connection .
10450	Empty the queue .
10451	Called when an event is received .
10452	Create a Riemann UDP client .
10453	Creates an Elasticsearch client .
10454	Encodes an event into a protobuf object .
10455	Encodes the given events into a protobuf message .
10456	Decode a message into a protobuf message .
10457	Sends a series of events to the device .
10458	Generate a preview of a file .
10459	Retrieve a preview .
10460	r_q_send sends msg_dict to r_q
10461	Send a message to the worker loop .
10462	Returns True if the time delta is greater than log_interval .
10463	Respond with an empty response to a challenge .
10464	Abort the SASL authentication process .
10465	u0020  u0020  u0020  u0020
10466	Return an admin footer node .
10467	Builds a PaymentParameters object for the given amount .
10468	Build a PaymentParameters object for registering a credit card .
10469	Make a payment with an alias .
10470	Returns a string representation of the current version .
10471	Constructs the widget .
10472	Handle post - construction tasks .
10473	Configures the up and down shortcuts .
10474	Called when an item is activated .
10475	Called when the user selects an item .
10476	Sets the location of the widget at the given index .
10477	Finalize resource options .
10478	Run pyside - rcc .
10479	Runs the CleanCommand .
10480	Returns a list of the children of this object .
10481	Refetch all children .
10482	Returns the icon at the given index .
10483	Execute a shell command .
10484	Returns the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open file descriptors .
10487	Redirect the stream to the given target .
10488	Set the attrs of the form widgets .
10489	Import a module from an app name .
10490	Import INSTALLED_APPS INSTALLED_APPS modules .
10491	Returns a new include node based on the parser .
10492	Returns the gravatar url for the given object .
10493	Get an image of a Gravatar object .
10494	Check if a path is a valid filesystem location .
10495	Check if a URL is a valid s3 location .
10496	Returns the absolute path of a template file .
10497	List objects in the S3 bucket .
10498	Build a JSON representation of the Worklfow task .
10499	Execute a request to the GBDX API .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Rest restore a project from the archive .
10504	Create a new ApiClient .
10505	List the contents of a storage path .
10506	Download a file to the specified path .
10507	Check if a storage path exists .
10508	Returns the parent of the given path .
10509	Create a directory at the given path .
10510	Upload a file to the server .
10511	Delete a folder .
10512	Validate a storage path .
10513	Create a new StorageClient .
10514	Create a new StorageEntity .
10515	Gets the details of an entity .
10516	Sets the metadata for an entity .
10517	Get the metadata for an entity .
10518	Updates the metadata for an entity .
10519	Delete metadata for an entity .
10520	Fetches a list of projects .
10521	Get project details .
10522	Create a new project .
10523	Delete a project .
10524	Create a new folder .
10525	Gets the details of a folder .
10526	Deletes a folder .
10527	Upload a file to the storage .
10528	Copy the contents of a file to another file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record to the collection .
10532	Returns the service url for the given service and version .
10533	Set the headers for this request .
10534	Returns a new instance with the given parameters .
10535	Throw an exception .
10536	Returns a list of ListDisplay objects for the given request .
10537	Add a function to a map job .
10538	Generate a genome . fa file from a gvcfs file .
10539	Run Oncotator on a vcf .
10540	Sort the list according to the given key .
10541	Return a list of datetime . datetime objects .
10542	Loads data . json from a folder .
10543	Shift the t - axis .
10544	Returns the sum of all values .
10545	Collect RFX data from a serial device .
10546	Create a new user .
10547	Parse VN results .
10548	Parse the release results from a table .
10549	Parse the production staff results from a soup .
10550	Parse character results .
10551	Parse tags from a soup .
10552	Parse user results from a table .
10553	Tarball a list of files into a directory .
10554	For all files in file_paths in output_dir .
10555	Copy a file job to the given output directory .
10556	Creates a list of parameters for Spark .
10557	Returns a list of docker parameters .
10558	Refresh metadata from the database .
10559	Run Mutect on a BAM file .
10560	Create a new object in the database .
10561	Return a list of streams from the database .
10562	Export device data to a directory .
10563	Search for a VNDB .
10564	Parse search results .
10565	Add a stream to the dataset .
10566	Reset the device s API key .
10567	Returns a list of users .
10568	Run the BWA index for the given ref_id .
10569	Returns a ConnectorDB instance .
10570	Add a stream to the connector .
10571	Add a stream to the database .
10572	Insert a new value into the cache .
10573	Sync all the datapoints in the database .
10574	Starts the synchronization process .
10575	Stops the sync thread .
10576	Download a file from a given url .
10577	Upload an S3AAM file to S3 .
10578	Print a list of labels .
10579	Generate a tree of ontologies .
10580	Get the mean insert size for a given bam .
10581	Get the current Docker container ID .
10582	Download the tar . gz file for the given job .
10583	Create a new schema in the database .
10584	Export the stream to a directory .
10585	Returns a Device object from the database .
10586	Get a list of labels for an ontology .
10587	Get the hierarchy for the given ontology .
10588	Run a ruamel command .
10589	Populate arg_parser from config_data .
10590	Get empty config file .
10591	Get the path to the docker mount .
10592	Add an option to the argument parser .
10593	Creates an argument parser .
10594	Create a pipeline command .
10595	Sets the authentication settings for a user or API key .
10596	Handle a response from the server .
10597	Ping the server .
10598	Create a new file at the given path .
10599	Update a file or directory .
10600	Delete a file at path .
10601	Subscribe to a stream .
10602	Create a new record in the database .
10603	Returns a list of devices .
10604	Runs a cutadapt on two fastq files .
10605	Run samtools faidx on a reference index .
10606	Run samtools index .
10607	Run sambamba markdup on the given bam .
10608	Run samblaster on a sam file .
10609	Mark duplicates in a BAM file .
10610	Run Picard Sort on the given bam .
10611	Run base recalibration on a BAM file .
10612	Download and run kallisto hg38 . idx file
10613	Download and run rsem .
10614	Get the user affinity for a test .
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Attempts to reconnect to the server .
10619	Resubscribe to all subscriptions .
10620	Called when the websocket is opened .
10621	Called when the websocket is closed .
10622	Called when a connection error occurs .
10623	Handle a message from the server .
10624	Ensure that the Websocket is pinging .
10625	Run GATK SelectVariants to select variants .
10626	Perform variant filtration on a VCF .
10627	GATK variant recalibrator .
10628	Apply variant recalibration using GATK .
10629	Combine variants using GATK .
10630	Perform a quick check of a bam file .
10631	Load handlers from handler_mapping .
10632	Write configuration to a JSON file .
10633	Load the configuration from a JSON file .
10634	Returns the term for the given ontology and IRI .
10635	Perform a search on the ontology .
10636	Suggest a new ontology .
10637	Iterate over all descendant terms of an ontology .
10638	Iterate over all descendant labels of the given ontology .
10639	Iterate over the labels for the given ontology .
10640	Iterate over the terms in the hierarchy .
10641	Run a fastqc job on the given r1 and r2 .
10642	Add a stream to the query .
10643	Create a Flask application .
10644	Start a Spark master container .
10645	Start a new spark worker job .
10646	Start a datanode .
10647	Stop the Spark worker .
10648	Checks the status of the container .
10649	Generates tokens stream from text
10650	Lookup a zone .
10651	Fetch the configuration for a given zone .
10652	Merge config chunks into a single resource record set .
10653	Validate a changeset .
10654	Returns a list of members with the lowest fitness score .
10655	Returns the fitness score of the group .
10656	Returns the sum of the cost_fn_val of all processes .
10657	Returns the median cost_fn for each member .
10658	Returns a dictionary containing the parameters of this process .
10659	Returns a list of the members of this group .
10660	Add a new parameter .
10661	Generate the next generation of the population .
10662	Normalize a list of key - value pairs .
10663	Returns a generator of environment variables .
10664	Returns True if the given callable throws an exception .
10665	Transform a list of hits into a list of packages .
10666	Transform a result to a string .
10667	Convert html to XHTML .
10668	Convert XHTML to HTML .
10669	Convert an ElementTree to a string .
10670	Open a document in a web browser .
10671	Remove this tree from the tree .
10672	Drop the tag .
10673	Get an element by its id .
10674	Returns a CSS selector for the expression expr .
10675	Iterate over the members of a log handler .
10676	Returns a dict of the number of tests in the environment .
10677	Check if a class is a single class .
10678	Check if a module is a single class .
10679	Validate that the request parameters are valid .
10680	Validate a request identifier .
10681	Decode a filesystem path .
10682	Escape values from iterable .
10683	Return the canonical name of an encoding .
10684	Read a BOM from the stream .
10685	Returns the remote address for the given forwarded_for .
10686	Convert obj to Decimal or float .
10687	Parse a string .
10688	Parse a file into an ElementTree .
10689	Convert a beautiful_soup_tree to an html tree .
10690	Returns the current traceback .
10691	Return a string representation of the exception .
10692	Render a summary of the error .
10693	Generate a plaintext traceback .
10694	Returns an annotated list of lines .
10695	Render the source text .
10696	Returns a boolean indicating if the given egg_info matches the given search_name .
10697	Returns a list of mkurl . pypi . index urls and their locations .
10698	Find all versions of a project .
10699	Find a requirement .
10700	Sort a list of links .
10701	Get the content - type of a URL .
10702	Returns a generator of links .
10703	Returns True if the API is verifiable .
10704	Find all data files in src_dir .
10705	Remove files from src_dir .
10706	Parse a requirements file .
10707	Join the lines of an iterator into a list .
10708	Ignore comments from iterator .
10709	Returns a function that compiles a marker .
10710	Visit a marker in the environment .
10711	visit an attribute node by returning a fresh copy of it
10712	Coerce a value to a number .
10713	Return a copy of the current request context .
10714	Pushes the app to the stack .
10715	Pops the current context from the stack .
10716	Return a copy of this request .
10717	Match the request to the url adapter .
10718	Pushes the request to the top of the stack .
10719	Makes the given path relative to the given relative path .
10720	Check if a distribution is editable .
10721	Adds a preprocessor to the url value .
10722	Add url_default_functions to self . name .
10723	Register a function as an error handler .
10724	A decorator to stream a generator or function with a context .
10725	Create a response object from a list of arguments .
10726	Generate a URL for the given endpoint .
10727	Safely join a filename into a directory .
10728	Returns the root path of the given import .
10729	Returns a jinja loader for the template folder .
10730	Run a script .
10731	Get session cookie domain .
10732	Returns a cache directory for the given link .
10733	Check if a directory is a purelib root directory .
10734	Return a list of uninstallation paths for a given dist .
10735	Check if a wheel is compatible with a given version .
10736	Build a wheel from a request .
10737	Iterate over all symbols in a code object .
10738	Decorator to ensure that rates are updated every 5 minutes .
10739	Add egg info to filelist .
10740	Writes a PIP DELETE_MARKER_FILENAME to the given directory .
10741	Check if the system is running under a virtualenv .
10742	Get the user s username .
10743	Install a distutils distribution .
10744	Parse Cache - Control headers .
10745	Check if a request has been cached .
10746	Cache a response .
10747	Update the zipimporter cache .
10748	Load setuptools template .
10749	Install site . py .
10750	Save the file to disk .
10751	Converts a value to a dict .
10752	Add a filter to the config .
10753	Configure the formatter handler .
10754	Add handlers to a logger .
10755	Add a common logger config to the logger .
10756	Execute a script from a file .
10757	Override a temporary directory .
10758	Returns the url and revision of the file .
10759	Get an item from obj .
10760	Generate a file from a source .
10761	Compile jinja2 templates .
10762	Returns the default python egg cache .
10763	Find eggs in a zip archive .
10764	Find a distribution on a given path .
10765	Declare a package namespace .
10766	Returns the mro of a class .
10767	Find an adapter for an object in the registry .
10768	Make sure the given path is a directory .
10769	Iterate over all entry points in a group .
10770	Returns True if dist can be added .
10771	Returns the best match for the given req .
10772	Evaluate a marker .
10773	Evaluate the Markerlib environment .
10774	Format a log record .
10775	Format a number into a currency .
10776	Parse a number pattern .
10777	Converts a precision to a decimal quantum .
10778	Returns the decimal precision of a number .
10779	Return the scientific notation elements for a given value .
10780	Returns the total number of seconds of a timedelta .
10781	Parse a string of requirements .
10782	Check if distutils has already been patched .
10783	Raise DistutilsSetupError if value is not a valid requirement specifier .
10784	Fetch a build egg .
10785	Roll dice .
10786	Convert a price object to a Price class .
10787	Create a price object .
10788	Validate a request .
10789	Get a method by id .
10790	Apply a method to the server .
10791	Deprecated . Use request . blueprint instead .
10792	Returns the blueprint of the url rule .
10793	Attach a multidict enctype error to the request .
10794	Make an abstract distribution from a request .
10795	Add a requirement to the environment .
10796	Walk a list of requirements to install .
10797	Check if req_to_install should be skipped .
10798	Return a list of dependencies to install .
10799	Returns a list of all namespace packages .
10800	Convert obj into a JSON response .
10801	Tokenize a document with an annotation .
10802	Merge annotations from two HTML strings .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Given a list of tokens and a markup function return a generator that yields each token .
10806	Convert a list of tokens to HTML .
10807	Locate an unbalanced end .
10808	Given a list of tuples return a list of tuples where each tuple is a tuple and each tuple is a tuple .
10809	Convert an HTML element into a list of HTML elements .
10810	Split a string into a list of words .
10811	Return the start tag of an element .
10812	Return the end of a tag .
10813	Serialize an HTML fragment into a string .
10814	Fix up ins and del tags in the xpath .
10815	Extract a constant from a code .
10816	Returns a URL for the cached AWSECommerce service .
10817	Creates an autolink for the given element .
10818	Kill all conditional comments in a document .
10819	Create a document from a string .
10820	Decorate a function to return a JSONResponse .
10821	Returns a tree walker for a given tree type .
10822	Export a svn repository to a location .
10823	Get the revision for a given location .
10824	Decorate a function to be called before the application starts serving requests .
10825	Returns the name of the import .
10826	Returns a list of exceptions that can be propagated .
10827	Find the path to the instance .
10828	Updates the template context .
10829	Handle an HTTP exception .
10830	Trap an HTTP exception .
10831	Handle an exception .
10832	Raise a FormDataRoutingRedirect exception .
10833	Dispatch a request to the server .
10834	Returns the default HTTP response class for the given HTTP options .
10835	Create a URL adapter for the given request .
10836	Inject url_default_functions into endpoint .
10837	Yield unique values from an iterable .
10838	Handle may_requires .
10839	Convert a list of requirements to a list of requirements .
10840	Convert pkginfo . txt to metadata . txt .
10841	Iterate over the modules in this directory .
10842	Returns a list of all classes in the module .
10843	Returns a list of method names .
10844	Find a basename from a list of basenames
10845	Return True if path is a module path .
10846	Returns a generator yielding all files and directories in basedir .
10847	Returns a generator of file paths .
10848	Dump default values for args .
10849	Load default arguments from kwargs .
10850	Set many items in a mapping .
10851	Increment the value of a key by delta .
10852	Dump an object to a string .
10853	Build a dict of editable options for a request .
10854	Populates the link with the given finder .
10855	Returns True if source directory exists in parent_dir .
10856	Remove a temporary source .
10857	Returns a pkg_resources . Distribution object .
10858	Returns the form data as a dict .
10859	Returns the WSGI headers for the given environ .
10860	r Convert an IRI to a URI .
10861	r Returns the user - defined cache directory for the given appname .
10862	Return the user - data directory for the given appname .
10863	Returns the user s log directory .
10864	Returns the user config directory for the given appname .
10865	Return a list of site - specific config directories for the given appname .
10866	Iterate over all . pyc and . pyo files .
10867	Restart the process with reloader .
10868	Convert a string to text .
10869	Find the CA bundle .
10870	Parse an HTML document .
10871	Parse a stream into a document .
10872	Parse a fragment from a stream .
10873	Translate a word .
10874	Converts arguments to tokens .
10875	Bind this request to the server .
10876	Print report to stdout .
10877	Load a bytecode from a file .
10878	Returns a dictionary of stylesheet params .
10879	Run a command and return the result .
10880	Return the python version number .
10881	Return a list of distributions for a given location .
10882	Returns a generator yielding all external links to a page .
10883	Open a local URL .
10884	Process a URL .
10885	Returns a list of paths removed from sys . path .
10886	Initialize sys . path info .
10887	Add a package to a site directory .
10888	Add a site directory .
10889	Check if user site is enabled .
10890	Add site - packages to a list of known paths .
10891	Create a Quitter class .
10892	Create an alias for mbcs .
10893	Set sys . encoding .
10894	Force global eggs to be created after local site packages .
10895	Fix python classpaths in sys . path .
10896	Runs a subprocess in a non - blocking way .
10897	Check if distutils has a Pyrex build extension .
10898	Convert pyx sources to language .
10899	Generate a debug message for the application .
10900	Get a resource by filename .
10901	Return a dict containing the user agent information .
10902	Returns True if name is a URL .
10903	Unpack a file from a URL .
10904	Download a file from a URL .
10905	Check if a download directory exists .
10906	Register a currency format .
10907	Register an exchange for a component .
10908	Decode a response .
10909	Returns the default template ctx processor .
10910	Render a template and send it to the app .
10911	Render a template .
10912	Render a template string .
10913	Parse a distutils version string .
10914	Check if a parameter is declared locally .
10915	Visit a Name node .
10916	Visit a Include node .
10917	Parse a template from an import node .
10918	Create a . whl file in the base_dir .
10919	Decorator to make a function atomic .
10920	Factory function to create a service .
10921	Encode obj as unicode using charset .
10922	Returns True if req matches wheels .
10923	Populate a requirement set .
10924	Export a file to a location .
10925	Lookup an Amazon Product .
10926	Iterate over all pages .
10927	Returns the ancestor of this node .
10928	Returns a list of all children of this node .
10929	Safely get an element from a path .
10930	Returns the text of the element at the given path .
10931	Safely get an element date .
10932	Gets the price and currency .
10933	List price .
10934	Send a request to the server .
10935	Build a response from a request .
10936	Returns an attrgetter for the given attribute .
10937	Convert a string to a title .
10938	Sort a value based on the environment .
10939	Group a value by an attribute .
10940	Calls a filter on a sequence .
10941	Create a logger .
10942	Returns True if val1 and val2 are constant times .
10943	Verify a signature .
10944	Derives a key from the secret key .
10945	Return a base64 encoded signature for the given value .
10946	Returns the signature of the given value .
10947	Verify the signature of the given value .
10948	Unsign a signed value .
10949	Returns the signature of the given value .
10950	Validate a signed value .
10951	Dump obj to stdout .
10952	Raise a ServiceError .
10953	Returns a list of packages matching the given criteria .
10954	Given a list of packages return a generator yielding all the packages that require their parents .
10955	Iterate over all directories in base_path .
10956	Prepares the HTTPResponse for the given request .
10957	Unsign a RECORD . jws file .
10958	Unpack a wheel file to a destination file .
10959	Install scripts for all distributions .
10960	Arranges all the data in the graph .
10961	Redraws the current canvas .
10962	Return the node with the given ID .
10963	Called when a directed graph has changed .
10964	Add edges to the graph .
10965	Called when a component has changed .
10966	Normal left click event handler
10967	Called when the diagram canvas changed .
10968	Clears the diagram canvas .
10969	Called when a domain model has changed for a diagram .
10970	Map the domain model to a new model .
10971	Remove a node from the model .
10972	Map an element to a diagram .
10973	Create a pydot node with the given attributes .
10974	Parse xdot data .
10975	Process a set of tokens into a font .
10976	Process an ellipse component .
10977	Construct a Polygon from a list of tokens .
10978	Process a list of tokens into a Polyline component .
10979	Processes a text component .
10980	Process an image .
10981	Render a GridFS file .
10982	Save the object to a dot file .
10983	Load a dot file .
10984	Returns True if point_x is in point_y .
10985	Draw the bounds of the graph .
10986	Perform a new dot graph wizard .
10987	Connect to the SQLAlchemy database layer .
10988	Parse the dot code .
10989	Create a new graph .
10990	Open a Graphviz file .
10991	Save info to a file .
10992	Save the graphviz model to a file .
10993	Configure the graph .
10994	Configure the nodes .
10995	Configure the edges view .
10996	Edit a godot trait .
10997	Add a node to the graph .
10998	Add an edge to the graph .
10999	Add a subgraph to info .
11000	Add a cluster to the graph .
11001	Request a graph from the user .
11002	Edit livemodal options .
11003	Configure the dot code view .
11004	Prompt the user to exit .
11005	Move components from origin to origin .
11006	Save to a file - like object .
11007	Load this object from a file - like object .
11008	Save the object to a file .
11009	Load an object from a file .
11010	Create an Alias property .
11011	Parse a file and yield words .
11012	Returns a list of start words .
11013	Add a Markov chain .
11014	Remove a chain by name .
11015	Build a chain from source to chain .
11016	Generate a random sentence from the given chain .
11017	Create a dot file and save it to disk .
11018	Add a node to the graph .
11019	Removes a node from the graph .
11020	Get a node by ID .
11021	Delete an edge from the graph .
11022	Adds an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when a program is changed .
11025	Sets the node lists for each edge in the graph .
11026	Parse a dot file into a graph .
11027	Parse a dot file .
11028	Build a top - level graph .
11029	Build a graph from tokens .
11030	Return the units and multiplier for a given number of seconds .
11031	Format a duration in seconds .
11032	Load the graph from the editor .
11033	Create a new user interface .
11034	Split a sequence into n parts .
11035	Iterate over a list of windows .
11036	Runs the application .
11037	Return a list of all children of the given object .
11038	Append a child to the end of the graph .
11039	Insert a child into the graph .
11040	Delete the child of the given index .
11041	Callback called when children are replaced .
11042	Callback called when the children of the given object change .
11043	Return the label for the given object .
11044	Set the label of an object .
11045	Called when the label of an object changes .
11046	Initializes the graph .
11047	Updates the editor .
11048	Add listeners to the graph .
11049	Replace a node with a new one
11050	Called when nodes have changed .
11051	Add nodes to the graph .
11052	Replace an edge with a new one .
11053	Called when an edge is changed .
11054	Add edges to the graph .
11055	Parse Xdot directive .
11056	Print drawing information .
11057	Return a node from a row factory .
11058	Create an edge factory .
11059	Create a MongoEngineProxy for this engine .
11060	Parse the XDot drawing directive .
11061	Parse Xdot label directive .
11062	Called when drawing has changed .
11063	Called when a position change occurs .
11064	Called when the position of the component has changed .
11065	Normal right down event handler .
11066	Highlight information about a style .
11067	Draw the main layer .
11068	Returns True if point_x is inside point_y .
11069	Draw the main layer .
11070	Handle an event .
11071	Run the function in the queue until the stopper is set .
11072	Get the full url for a given page number .
11073	Render the previous and next links .
11074	Render seo links .
11075	Return True if the content type of a candidate matches the content type of a pattern .
11076	Selects the content type that matches the given pattern .
11077	Rewrite a URL .
11078	Removes auth from a URL .
11079	Create URL identifier .
11080	Normalize a host string .
11081	Find all modules in a directory .
11082	Returns a list of modules in a directory .
11083	Return a list of all modules in a module .
11084	Returns a list of all classes in a module .
11085	Return a list of all classes in a module .
11086	Ensure a directory exists .
11087	Create a blob from text .
11088	Check if a card number is a valid Luhn number .
11089	Get the current git version .
11090	Load a module .
11091	Add a path to the list of paths .
11092	Returns a module loader for the given module name .
11093	Split a line into multiple lines .
11094	Remove all namespaces from the root .
11095	Check the version of the setup . py file for consistency .
11096	Create a new instance from a YAML dict .
11097	Merge a new dictionary into this one .
11098	Execute all actions in cwd .
11099	Create a new instance from a YAML file .
11100	Add details to a flask message .
11101	Emits a record to the server .
11102	Add the image rendition or original to the context .
11103	Log a login attempt .
11104	Add a URL to the queue .
11105	Starts a list of workers .
11106	Send a PUT request to the KVStore .
11107	Make a GET request to the store .
11108	Recursively fetch a key from the API .
11109	Returns the X - Consul - Index for a given key .
11110	Delete an item from the KVStore .
11111	Plot a heatmap of features .
11112	Add months to the given timestamp .
11113	Add months to a date .
11114	Returns True if this is a Christmas period .
11115	Use a music service .
11116	Connect to a storage service .
11117	Load data from a CSV file .
11118	Load a list from a JSON file .
11119	Serializes the data to a JSON file .
11120	Returns a list of tuples where each element is a reference to the given label .
11121	Returns the average of X y and ref_label .
11122	Generate a feature importance report .
11123	Restore a data dictionary .
11124	Merge two dictionaries .
11125	Creates a function that can be used to call multiple functions .
11126	Decorator to apply a method to a function .
11127	Find blocks in INSTALLED_APPS .
11128	Verify that a block is valid .
11129	Register a block in the registry .
11130	Unregisters a block .
11131	Convert a file to an MP3 file .
11132	Returns a reasonable desired version string .
11133	Handle ssl redirects .
11134	Initialize a celery task .
11135	Queues an email to be sent .
11136	Parse Accept header .
11137	Parse a CacheControl header .
11138	Parse a datastructures . ContentType from a string .
11139	Parse a Forwarded header .
11140	Parse a list of strings .
11141	Parse a list of parameters .
11142	Resize image to fit width .
11143	Add a value to the link .
11144	Download a file from YouTube .
11145	Create a connection to the Google Drive server .
11146	Upload a file to a folder .
11147	Connect to the music folder .
11148	Write sky parameters to a file .
11149	Update sky_file and ds_code
11150	Read ahpi absorption from a file .
11151	Scale a_phi by the given scale parameter .
11152	Reads water absorption data from a file .
11153	Reads water scattering from a file .
11154	Read an iop from a CSV file .
11155	Write an IOP to a file .
11156	Build b with a given scattering fraction .
11157	Build the total absorption .
11158	Build the total attenuation C .
11159	Build all b and c from IOPs .
11160	Sets the parameters for a batch .
11161	Read a parameter file into a dictionary .
11162	Convert a string to a list of floats .
11163	Read the quad solid angle mean point theta table .
11164	Set the handler for the given signals .
11165	Handle a sigal signal .
11166	Default signal handler .
11167	Pause the signal handler .
11168	Handle an abort request .
11169	Called when a status signal is received .
11170	Remove event from event list .
11171	Fetch a metric .
11172	Fetch a sorted metric .
11173	Return n items from iterable as a list .
11174	Print an item to stdout .
11175	Print all items in iterable to a file .
11176	Return the signature of a function .
11177	Initialize a sig from a partial sig .
11178	Returns a copy of self . argv .
11179	Return True if filename should be ignored .
11180	Return the key for a file .
11181	Convert vlq to int .
11182	Read a table from a list of fields .
11183	Parse the user data header .
11184	Returns the duration in seconds .
11185	Print the details of the game .
11186	Returns a tuple of the data for this batch .
11187	Searches for a report file and displays it .
11188	Writes the batch to a file .
11189	Processes the data from the result file .
11190	Display the connection to the graph .
11191	Print graphic information .
11192	Displays the error message .
11193	Hide the error message .
11194	Execute the planarrad .
11195	Cancel the planar array .
11196	Quit the planar array .
11197	Saves the artist s figure .
11198	Open the log file .
11199	Open the documentation .
11200	Show all prerequisite actions .
11201	Called when a button is clicked .
11202	Moves the mouse to the current position .
11203	Display the graphic target .
11204	Creates a new LockSet with the given privkey signed by genesis .
11205	Sign a private key .
11206	Signatures are non deterministic
11207	either invalid or one of quorum noquorum quorumpossible
11208	In the IOU fungible the supply is set by Issuer who issue funds .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid lockset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring see utils . cstr
11215	Calculate the delay between the sender and receiver .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the contract on the chain
11218	returns class . on_msg_unsafe use x . im_self to get class
11219	registers NativeContract classes
11220	returns True if unknown
11221	receives rlp . decoded serialized
11222	Convert a vector to an image .
11223	Convert an image to a Vgg .
11224	Returns the function for a given layer .
11225	Get the output of a layer .
11226	Returns a dict of features for x .
11227	Create a new key file at the given path .
11228	Finishes the bulk load job .
11229	Read a Giraffe table from a file .
11230	Put a list of items into the database .
11231	Release a BulkLoad from this Giraffe .
11232	Returns a list of the tables in this Giraffe .
11233	Remove compiler flags from a list of sources .
11234	Find the teradata home directory .
11235	Get a value from the config .
11236	Set the value of a key .
11237	Turn on or off a table .
11238	Execute a command .
11239	Get a value from the settings .
11240	Write a default girafferc configuration file .
11241	Set the filter for this Giraffe .
11242	Serialize this Giraffe to a binary archive .
11243	Convert to a string .
11244	Convert a string to a float with a multiplier .
11245	Return a dict of the specific gain values in a string .
11246	Returns a dictionary of device settings .
11247	Wraps a string with indentation .
11248	Return a list of SoapySDR devices
11249	Sets the center frequency .
11250	Returns a pwr array based on the psd state .
11251	Wait for the result of the given Psd state .
11252	Update the psd state with the given samples_array
11253	Read data from a file .
11254	Write pwr_array to file f .
11255	Submit a function to the queue .
11256	Returns the number of repetitions for a set of bins .
11257	Create a freq plan .
11258	Create a new buffer with the given bins and repeats .
11259	Setup the fft window .
11260	Stop the stream .
11261	Read a frequency from the device .
11262	Perform a sweep using fft .
11263	Set the I2C address .
11264	Run cmake to build zql .
11265	Filter a list of datetimes by a number .
11266	Mask a datetime . datetime object .
11267	Convert a datetime to a weekday .
11268	Convert a list of datetimes to a list of datetimes to keep .
11269	Convert a list of datetimes to a list of datetime objects .
11270	Return a set of dates to keep .
11271	Return a list of dates to delete .
11272	Returns the spi control byte .
11273	Read a bit from the stream .
11274	Write a bit to the stream .
11275	Get the bit number from a bit pattern .
11276	Watch for events on a given port .
11277	Handle events in a queue .
11278	Brings a GPIO interrupt into the userspace .
11279	Set the gpio interrupt edge .
11280	Waits until a file exists .
11281	Register a callback for a pin function .
11282	Deregister a pin .
11283	Enable gpio interrupts .
11284	Sends bytes_to_send to the SPI server .
11285	Render the form .
11286	Returns True if the form has any errors .
11287	Render a link .
11288	Extracts the version from the configuration file .
11289	Override get_form_kwargs to add foundation_version .
11290	Check the status of a request .
11291	Perform a HTTP GET request .
11292	Get a download link for a file .
11293	Upload a link to a folder .
11294	Upload a file to a folder .
11295	Upload a file to a remote server .
11296	Get the status of a remote upload .
11297	Get a list of files in a folder .
11298	Gets the running conversions for a folder .
11299	Calculate the humidity for a given temperature and dewpoint
11300	Calculate the dewpoint from temperature and humidity .
11301	Publishes the request to the server .
11302	Returns the CRC for the given data .
11303	Verify that the data is valid .
11304	Unpack a storm date .
11305	Returns a boolean indicating whether to use the archive revision B .
11306	Wake up the weather station .
11307	Send a command to the device .
11308	Send DMPAFT command to VPro .
11309	Get the new archive fields .
11310	Parse the fields from the database .
11311	Update the weather for a given interval .
11312	Initialize the syslog handler .
11313	Returns a list of pub services .
11314	Get the wind speed for a given station and interval
11315	Sets the parameters for the forecast .
11316	Set the args .
11317	Publish the dict to a file .
11318	Decorator to indicate that a user wants to make a request .
11319	Initializes an application .
11320	Fulfill a set of requirements .
11321	Push an override to the top of the stack .
11322	Remove this context from the stack .
11323	Push an override to the current node .
11324	Push an additional ctx stack onto this stack .
11325	Removes the context from the stack .
11326	Add a new item to the queue .
11327	Return an unduplicated list of field names .
11328	Convert a list of stats to a string .
11329	Extract params from a query .
11330	Executes a query and returns the result .
11331	Returns a Pandas DataFrame .
11332	Returns a multi - dimensional graph of the results .
11333	Plot a pie .
11334	Plot the x and y coordinates .
11335	Create a bar plot .
11336	Returns a CSV result descriptor .
11337	Check if a user has a permission .
11338	Overrides render widget . get_context_data .
11339	Returns a list of widgets sorted by position .
11340	Return a list of widgets that need to be updated .
11341	Register a widget .
11342	Unregister a widget .
11343	Get the last update for this widget .
11344	Get a widget setting .
11345	Save a setting to the dashboard .
11346	Returns True if there should be an update .
11347	Convert an array to a Spark object .
11348	Construct a Spark with a one - dimensional array .
11349	Concatenate two Spark arrays .
11350	Check if an argument is valid .
11351	Convert a list or tuple of axes to a tuple .
11352	Wrap a function into a BoltArraySpark .
11353	Align a set of axes .
11354	Convert to a Spark array .
11355	Returns the tordd of the vector sc along an axis .
11356	Return a new RDD stacked on top of the current RDD .
11357	Map a function to an ndarray .
11358	Return a chunk of the rdd .
11359	Map a random function to the dtype .
11360	Return a new BoltArraySpark with the given function .
11361	Returns a numpy . dtype . Plan object .
11362	Remove padding from an axis .
11363	Given a plan and shape return the number of nchunks .
11364	Returns a list of slices .
11365	Get a mask from a list of integers .
11366	Returns a new RDD with the given number of partitions .
11367	Return a new StackedArray of the same size as this one .
11368	Align axis to self . split .
11369	Returns the first item in the array .
11370	Returns the stats for a given axis .
11371	Returns the mean over the specified axis .
11372	Returns the variance over the specified axis .
11373	Returns the standard deviation over the specified axis .
11374	Return the sum over the given axis .
11375	Returns the maximum value along an axis .
11376	Returns the minimum value along an axis .
11377	Returns a chunk of the data .
11378	Swap kaxes and vaxes .
11379	Transpose a set of axes .
11380	Swap axes .
11381	Reshape this BoltArraySpark into a new shape .
11382	Reshape keys and values based on shape .
11383	Squeeze the matrix along an axis .
11384	Convert this RDD to a dtype .
11385	Clip values between min and max .
11386	Convert to a numpy array .
11387	Convert an argument to a tuple .
11388	Pack arguments into a tuple .
11389	Inshape an ndarray .
11390	Return True if a and b are all close .
11391	Convert a list of integers to a list of integers .
11392	Return a slicified version of slc .
11393	Returns True if new can be transposed to old .
11394	Check if new is reshapable from old .
11395	Concatenate a list of ndarrays into a single ndarray .
11396	Iterate over an array and add extra dimensions .
11397	Zip an RDD with a given index .
11398	Wrap a function in a docstring .
11399	Lookup a ConstructLocal constructor .
11400	Reshape this BoltArraySpark to a new shape .
11401	Transpose a set of axes into a BoltArraySpark .
11402	Reshape the barray to a new shape .
11403	Transpose this BoltArraySpark onto a set of axes .
11404	Returns a ConstructLocal of the given shape dtype and order .
11405	Returns a ConstructLocal with zeros .
11406	Concatenate multiple BoltArrayLocal objects .
11407	Calculate the discrete likelihood .
11408	Calculate the most likely alpha of a data set .
11409	Calculate the discrete MLE of a data set .
11410	Calculate the discrete best - fit alpha for the given data .
11411	Calculate the discrete best - fit alpha .
11412	Plot the PPF .
11413	Compute the lognormal of the model .
11414	Sanitize a Turbo HTML document .
11415	Configure analytics for a Yandex object .
11416	Return a list of tags .
11417	Returns the MD5 hash of the decoded key .
11418	Return the SHA256 hash of the decoded key .
11419	Returns the SHA512 hash of the decoded key .
11420	Parse a long string .
11421	Decode a base64 encoded public key .
11422	Parse a list of options .
11423	Process ssh RSA data .
11424	Process ssh - dss data .
11425	Processes ECDSA SHA data .
11426	Process ed25516 data .
11427	Parse SSH2 PUBLIC KEY .
11428	Performs a single GSS step .
11429	Performs a single token step .
11430	Returns a list of mechs .
11431	Store GSS credentials .
11432	Convenience wrapper around init .
11433	Initialize the python environment .
11434	Create a . wav file .
11435	Return the HTML for the DJFRONTEND_H5BP_CSS template .
11436	Normalize djfrontend CSS .
11437	Return the fontawesome stylesheet for the DJ Frontend .
11438	Create a modernizr template for the DJ frontend .
11439	Create a jQuery template for the DJFRONTEND_JQUERY plugin .
11440	Returns the jquery - ui for the given version .
11441	Creates a jquery . dataTables template .
11442	Returns a jquery . dataTables . css file .
11443	Returns a themeroller for jquery data tables .
11444	Create a template for the jQuery formset .
11445	Wrapper for jquery_scrollTo .
11446	Creates a template for SmoothScroll .
11447	Returns a css template for the DJ frontend .
11448	Returns a YAML representation of djfrontend_ga .
11449	u Render a JavaScript variable .
11450	Iterate over authentication hashes for a user .
11451	Calculate expiry time .
11452	Get a user s token .
11453	Serialize a User object to a dictionary .
11454	Deserialize a profile .
11455	Update a profile .
11456	Raise MeteorError if authentication failed .
11457	Validate a user .
11458	Check if the request is secure .
11459	Get a user s name .
11460	Create a new user .
11461	Logs a user in .
11462	Logout a user .
11463	Login with a username and password .
11464	Login with a username and password .
11465	Login with a resume token .
11466	Change the password of a user .
11467	Handle a forgot password request .
11468	Reset the user s password .
11469	Merge two dictionaries into a single dictionary .
11470	Read the contents of a file .
11471	Get the metadata id for the given object or model .
11472	Given a list of object ids return a list of AleaMeta objects .
11473	Get the object id associated with a meteor id .
11474	Get a list of object ids from a list of meteor ids
11475	Get an alea model object by its meteor ID .
11476	Set default forwards for a given operation .
11477	Set the default reverse operation for an operation .
11478	Truncate a list of models .
11479	Shortcut for truncate_forwards .
11480	Truncate the database backwards .
11481	Initialize the build options .
11482	Finalize the build options .
11483	Run meteor build command .
11484	Convert a path to a directory .
11485	Generate a random seed from a list of values .
11486	Returns a dictionary describing the current state of the node .
11487	Generate a random string .
11488	Decorate an API endpoint .
11489	Returns a generator yielding all API endpoints for a given object .
11490	Clears the API path map cache .
11491	Print a value to stdout .
11492	Validate kwargs of a function .
11493	Called when the WSGI server opens .
11494	Called when the connection is closed .
11495	Called when a message is received .
11496	Read DDP frames from an EJSON message .
11497	Process a DDP request .
11498	Dispatch a message to the appropriate handler .
11499	Create a new connection to the DDP server .
11500	Receive a Ping request .
11501	Recieve a sub .
11502	Unsub a subscription .
11503	Receive a method from the API .
11504	Generate ddpp socket js info .
11505	Serve a web server .
11506	Entry point for django - settings .
11507	Print a message .
11508	Stops the Postgres Greenlet .
11509	Run the postgres greenlet .
11510	Run django - ddp
11511	Poll the psycopg2 server .
11512	Patch psycogreen with psycogreen .
11513	Generate a random meteor id .
11514	Autodiscover dddp module .
11515	Return the error as a dict .
11516	Get an object from a factory .
11517	Emit a meteor record .
11518	Create a middleware for a negotiation request .
11519	Add a route context to an application .
11520	Add a resource object to the API .
11521	Run a web application .
11522	Send a message to the registered user .
11523	Send a message to all registered apns .
11524	Fetch inactive registration ids .
11525	Send a message to a GCM registration .
11526	Send a bulk message to the GCM server .
11527	Sends JSON data to the application .
11528	Send a request to the API .
11529	Get a model from a module location .
11530	Runs a fast forward selection algorithm .
11531	Search Giphy for a given term or phrase .
11532	Translate a term or phrase to Giphy .
11533	Returns a Giphy object with trending data .
11534	Return a gif with the given id .
11535	Create a Giphy screensaver .
11536	Upload a file to Giphy .
11537	Convert data to ints .
11538	Fetch data from an endpoint .
11539	Translate a term or phrase into a GIF .
11540	Yield GiphyImages with a trending rating .
11541	Return a GiphyImage with the given gif_id
11542	Upload a file to GIPHY .
11543	Returns an AccessControlElement for the given access control .
11544	Authenticates the user with the given email or password .
11545	Upload a video to youtube .
11546	Checks the upload status of a video .
11547	Updates an existing video .
11548	Delete a video from Youtube .
11549	Check availability of a video .
11550	Get a video .
11551	List videos for a user .
11552	Directly upload a video to youtube .
11553	Upload a video .
11554	Upload a video to youtube .
11555	Remove a video .
11556	Fetch a video entry from the API .
11557	Save the video to a file .
11558	Delete a video .
11559	Update the metadata with the given parameters .
11560	Update a metadata field .
11561	Update this item .
11562	Returns a list of nodes from a string .
11563	Dump a list of trees to a string .
11564	Load comments from a file - like object .
11565	Read the contents of a file - like object .
11566	Parse a string into a Node object .
11567	Create a new node .
11568	Generate a newick label for this node .
11569	Returns an ascii art representation of the text .
11570	Return the node with the given label .
11571	Prune a list of leaves .
11572	Resolve polytomies .
11573	Removes all internal names .
11574	Removes all leaf names .
11575	Decorator to require a user to be authenticated .
11576	Dispose of a JSON string .
11577	Raise an exception if the given setting is not defined in the application .
11578	Returns the argument with the given name .
11579	Returns a list of arguments for a given name .
11580	Call a callback with args or kwargs
11581	Get a cookie by name .
11582	Clears a cookie .
11583	Redirects the user to the login page .
11584	Get the authenticated user .
11585	Generate OAuth request parameters .
11586	Redirects the user to the authorized endpoint .
11587	Make a request to Facebook .
11588	Get an authenticated user .
11589	Concatenate two URLs .
11590	Parse a header line .
11591	Add a new value to the list .
11592	Get a list of headers for a given name .
11593	Parse a line of text .
11594	Parse headers .
11595	Normalize a header name .
11596	Encodes a value as UTF - 8 .
11597	Convert a value to a unicode string .
11598	Convert a value to a basestring .
11599	Recursively convert obj to unicode .
11600	Setup auth plugins .
11601	Iterate over all subclasses of cls .
11602	Based on the matching strategy and the origin and optionally the requested method a tuple of policyname and origin to pass back is returned .
11603	Returns the number of points in the grid that are occupied .
11604	Write a gro file to a file .
11605	Write atoms to a PDB file .
11606	Determine the number of molecules .
11607	Resize a PBC for lipids .
11608	Write a list of molecules to a top file .
11609	Iterate over the contents of a resource file .
11610	Send a message to a user .
11611	Send a message to a list of users .
11612	Get a user s messages .
11613	Process a response .
11614	Verify a config file .
11615	Verify a message s profile name .
11616	Retrieve data from a config file .
11617	Retrieve a pwd from a config file .
11618	Update config data .
11619	Update the pwd of a config message .
11620	Create a config profile .
11621	Print the required items for a given message type .
11622	Returns a dictionary containing the user s settings .
11623	Get the user s auth from a message type .
11624	Configure a profile .
11625	Write data to cfg .
11626	Write auth message to cfg .
11627	Add attachments to the message .
11628	Send a message to the server .
11629	Send a message .
11630	Create a message factory .
11631	Creates a property for a credential .
11632	Validate a property .
11633	Validate a message input .
11634	Validate a Twilio phone number .
11635	Validate a SlackPost attribute .
11636	Validate whatsapp value .
11637	Send a coroutine .
11638	Add a message to the coroutine .
11639	Get the body from a file .
11640	Returns a dict of kwargs to be passed to kwds .
11641	Send a message .
11642	Get the chat id of a user .
11643	Send a message to the server .
11644	Send a message to the server .
11645	Get the SMTP server for the given address .
11646	Generate the email .
11647	Add a header to the message .
11648	Add the body to the message .
11649	Add attachments to the message .
11650	Get the SMTP session .
11651	Returns a SMTP_SSL instance .
11652	Returns a SMTP session .
11653	Sends an email to the specified recipients .
11654	Save the object to a file .
11655	Unloads the image .
11656	Get a region of the image .
11657	Validate that all values are valid .
11658	Clears the cache .
11659	Writes the object to a file .
11660	Read data from the file .
11661	Delete this chunk .
11662	Resize the file .
11663	Insert a chunk into the file .
11664	Save the image to a file .
11665	Delete a file .
11666	Parse a file - like object .
11667	Process a normal line .
11668	Add a block of lines to the file .
11669	Draw a string of text .
11670	Parse ISO 8601 time string .
11671	Converts a list of words into an html string .
11672	Returns the HTML representation of a word .
11673	Convert a list of words into an html paragraph .
11674	Converts a list of lines into html code .
11675	Returns a string of html code for the given list of items .
11676	Save MP4 metadata to a file .
11677	Update the parent fileobj .
11678	Run a game .
11679	Register a product with a vendor .
11680	Return the vendor and product id for the given controller .
11681	Register a freeform key .
11682	Return a base64 - encoded signature for a string .
11683	Returns the HTTP request headers .
11684	Send a request to the server .
11685	Send a get request to the endpoint .
11686	Send a post request to the endpoint .
11687	Send a delete request to the endpoint .
11688	Convert a value to an APE value .
11689	Send a request to the server .
11690	Perform an autopaginating API call .
11691	Returns a list of hosted zones .
11692	Create a new hosted zone .
11693	List resource record sets for a zone .
11694	Get the change resource record sets for a given change set .
11695	Draw an image .
11696	Draw a region of an image .
11697	Returns the total number of packets .
11698	Replace old_pages with new_pages .
11699	Find the last page of an Ogg header file .
11700	Sets the section of the document .
11701	Add markup to the document .
11702	Returns a list of markups for the given content .
11703	Return the markup with the given tag name .
11704	Create a new hosted zone .
11705	Lock a file - like object .
11706	Insert bytes into a file .
11707	Delete bytes from a file .
11708	Convert data to UTF - 8 .
11709	Add a change to the record set .
11710	Parse an e_change_info string into a dict .
11711	Measure the content width of a string .
11712	Returns True if the object has been modified .
11713	Delete this record set .
11714	Save this resource record to a ChangeSet .
11715	Parse ID3v1 data .
11716	Make id3v1 from id3v2 .
11717	Read size bytes from the file .
11718	Deletes all keys with the given key .
11719	Loads the frame with the given tag .
11720	Update the common APIC fields .
11721	Update the frame to v24 .
11722	Unloads the sound .
11723	Plays the voice .
11724	Sets the start and end points of the voice loop .
11725	Returns a list of glyphs and values .
11726	Filter a list of glyph names by a given filter .
11727	Dump a list of encodings to a file .
11728	Dump an array to a file .
11729	CLI entry point .
11730	Check if a file exists .
11731	Make a list of files .
11732	Parse a HostedZone object .
11733	Parse an e_delegation_set into a list of nameservers .
11734	Write a list of blocks to a file .
11735	Group paddings into a list of blocks .
11736	Delete metadata blocks from the file .
11737	Save metadata to a file .
11738	Parse an rrset alias .
11739	Parse rrset resource records .
11740	Parse an RSET .
11741	Delete this zone .
11742	Add a record to the record set .
11743	Create an AResourceRecordSet .
11744	Create an AAAAResourceRecordSet .
11745	Create a CNAMEResourceRecordSet .
11746	Create a new MXResourceRecordSet .
11747	Create a new NS record .
11748	Create a PTRResourceRecordSet .
11749	Create a SPFResourceRecordSet .
11750	Create a new SRVResourceRecordSet .
11751	Create a new TXT record .
11752	Register a TXXX key .
11753	Returns a dict of the values of a change .
11754	Write a change to a ResourceRecordSet .
11755	Writes a ChangeResourceRecordSet to XML .
11756	Initialize logging .
11757	Return the item with the given alias .
11758	Freeze a dictionary into a tuple .
11759	Returns a template and a list of HTML attributes .
11760	Initialize the app .
11761	Initialize all bar values .
11762	Bind a bar .
11763	Returns a dict containing the arguments of the caller .
11764	Returns the url for this endpoint .
11765	Returns True if the view is currently running .
11766	Validate a metric class .
11767	Get a stat by name .
11768	Calculate statistics for a set of frequencies .
11769	Autodiscover INSTALLED_APPS .
11770	Dump a metric to csv
11771	Handle maintenance requests .
11772	Get the value of a GET variable .
11773	Get a boolean value from a GET request .
11774	Returns the next colour .
11775	Returns a dictionary of gecko parameters .
11776	Returns the geckoboard number widget .
11777	Returns a tuple of the most recent metrics .
11778	Returns a geckoboard line chart .
11779	Get a geckoboard geckometer .
11780	Create a geckoboard dashboard .
11781	Returns a list of active gadget stats .
11782	Register a gadget in the registry .
11783	Returns a dictionary of context data .
11784	Print an error message and exit .
11785	Decorator for validating a function .
11786	Prompt user for long input .
11787	Prompt the user for a list of items .
11788	Prompt the user to input a file name .
11789	Returns a DataFrame with the schedule for a given year .
11790	Returns the winner of the match .
11791	Returns the current season .
11792	Returns a dict of the starters .
11793	Returns the surface of the game .
11794	Returns the coin toss for this game .
11795	Returns the weather information for the current game .
11796	Returns information about the team s refs .
11797	Returns a list of schedules for the current month .
11798	Returns the standings as a DataFrame .
11799	Returns the team stats table for the given selector .
11800	Returns the roy voting results for the current yr .
11801	Returns a pandas DataFrame with line scores .
11802	Returns the year of the month .
11803	Returns a list of player stats .
11804	Decorator to switch a function to a directory .
11805	Decorate a function to cache a URL .
11806	Returns a tuple of class instance keys .
11807	Decorator to memoize a function .
11808	Returns the age of a user .
11809	Returns a stats table .
11810	Get stats per game .
11811	Returns a table of totals for a given kind .
11812	Get statistics per 36 minutes .
11813	Get stats per 100 positions .
11814	Returns a table of advanced stats .
11815	Returns the stats for a specific shooting .
11816	Get advanced pbp statistics .
11817	Returns the basic gamelog for a given year .
11818	Gets the session data .
11819	Expand details in a DataFrame .
11820	Add team columns to a DataFrame .
11821	Add team features to the dataframe .
11822	Calculate the initial probability of a given line being a window .
11823	Returns a DataFrame with a passing table .
11824	Returns a list of awards for a given year .
11825	Returns the name of the div .
11826	Returns the box score for a given year .
11827	Returns a pq for the year with the given keyword .
11828	Returns the head coaches for a given year .
11829	Returns a DataFrame with the schedule for the given year .
11830	Returns the Offensive Coordinator for the given year .
11831	Returns the defensive coordinator for a given year .
11832	Retrieve the stadium for a given year .
11833	Return the Offense Scheme for a given year .
11834	Returns the defensive alignment for a given year .
11835	Turn off splits for a given year .
11836	Returns the HTML for the given URL .
11837	Flatten links in a text document .
11838	Convert url to id .
11839	Convert kwargs to qs .
11840	Streamer read process .
11841	Executes the read_queue and put_idx commands .
11842	Get a direct read from the queue .
11843	Close the queue .
11844	Get a batch from an hdf5 file .
11845	Returns the last block of data at the given path .
11846	Get a queue of n_procs reads .
11847	Get a generator for a given path .
11848	Parse a file - like object .
11849	Dump ofp to pb_objs .
11850	Read a Varint from the file .
11851	Returns a generator that yields all the objects in the file .
11852	Close the filesystem .
11853	Write an object to the buffer .
11854	Flush the file descriptor .
11855	Returns the directory where this game is located .
11856	Input text with keyboard emulation .
11857	Make a fake movie from nframes .
11858	Returns a list of tuples describing the traits .
11859	Wait until a condition is met .
11860	Wait until all traits are present in element_with_traits
11861	Adds a list of ignored exceptions to this object .
11862	Return the value of the main volume .
11863	Return the source of the given operator .
11864	Send a message to the server .
11865	Return the status of the NAD .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Select a power source .
11870	Deobfuscate a request .
11871	Return the CRC of a plaintext string .
11872	Deobfuscate a value .
11873	Print missing schema for a song .
11874	Returns a list of all hrefs .
11875	Check if a song name is available .
11876	Parse a song .
11877	Generate a Google url for a song .
11878	Parse html and return a download URL .
11879	Parse a song URL .
11880	Get the HTML response for a given URL .
11881	Download a file from a URL .
11882	Download a file using wget .
11883	Returns a list of StatusCodes for a given city .
11884	Get a location observation .
11885	Parse observation response json .
11886	Get station observation .
11887	Returns a list of paths .
11888	Returns a list of all available compilers .
11889	Returns the mimetype of the format .
11890	Returns the compiler mimetype .
11891	Returns the compiler format extension .
11892	Register a processor for a given mimetype .
11893	Unregister a processor for a mimetype .
11894	Returns a list of paths .
11895	Register the defaults for the mime types preprocessors and postprocessors .
11896	Import QtCore from PyQt5 or from PySide
11897	Returns a MetaNetnode object for the given node .
11898	Add a plugin name to the list of known plugin names .
11899	Removes a plugin name from the list of known plugin names .
11900	Import settings from config_path .
11901	Export settings to a config file .
11902	Gets the DirectoryIDASettings API client .
11903	Iterate over the keys in the database .
11904	Simple error handler .
11905	Get a table .
11906	Return a list of DynamoDB tables .
11907	Fetch items for a category .
11908	Returns the metadata id of an item .
11909	Returns the timestamp of the last time an item was updated .
11910	Fetches the owner team of a crate .
11911	Fetches the owner user of a crate .
11912	Fetch the versions of a crate .
11913	Fetches the downloads for a crate .
11914	Fetch crate data .
11915	Returns a summary of the category .
11916	Returns a list of crates .
11917	Retrieve a crate by ID .
11918	Fetches a crate attribute .
11919	Fetch a list of items from the server .
11920	Fetch items from the database .
11921	Fetch all the items in a category .
11922	Returns a generator of questions .
11923	Fetch a list of items from the database .
11924	Returns the timestamp of the metadata for the given item .
11925	Return the metadata category of the given item .
11926	Returns a list of items for the given category .
11927	Returns the list of buffers .
11928	Returns the IOCB priority .
11929	Close the queue .
11930	Submit a list of blocks .
11931	Cancel a block .
11932	Cancel all submissions .
11933	Returns a list of events .
11934	Fetch a list of events by category .
11935	Get all cells from spreadsheet data .
11936	Parse the event data from the feed .
11937	Returns a list of formats for a given PID type .
11938	The permission factory .
11939	Create a blueprint for the given endpoints .
11940	Create a URL rule .
11941	Redirect to a record view .
11942	r View a record using the default view method .
11943	r Export a record .
11944	Call a callable for a given time .
11945	Close the socket .
11946	Remove a client .
11947	Increment a metric .
11948	Send a metric in milliseconds .
11949	Returns a time since the given start time .
11950	Send a Gauge request .
11951	Send a GaugeDelta request .
11952	Set a metric .
11953	Send a request to the server .
11954	Create a batch client .
11955	Returns a new client for the unit .
11956	Flush the stream to the remote address .
11957	Creates a permission checker for a record .
11958	Create a TCPBatchClient .
11959	Flush all pending requests to the server .
11960	Returns a TCPClient for this unit .
11961	Returns a User object for a given user .
11962	Interprets x as an OpenMath object .
11963	Convert a term to an OpenMath object .
11964	Convert an object to a python object .
11965	Convert an object to OpenMath .
11966	Register a converter to openmath .
11967	Deprecated version of register_to_py .
11968	Initialize a Redis application .
11969	Returns a generator of valid choices .
11970	Split a dictionary into model fields and fields_agrs .
11971	Register a function in the registry .
11972	Create a new value .
11973	Convert any form to any_form_files .
11974	Decorator for fields that require a random attribute .
11975	A decorator for field_choices_attibute .
11976	Convert a field to a decimal value .
11977	Returns a string representation of an email field .
11978	Generate date field data .
11979	Generate a random datetime from a datetime field .
11980	Return the data for a float field .
11981	Returns the integer value of a field .
11982	Generate random data for a time field .
11983	Generate a random choice string for a given field .
11984	Return the data for a multiple choice field .
11985	Generate a random model choice for a given field .
11986	Encode an xml object as bytes .
11987	Publish a package .
11988	Tag a build .
11989	Decorate a function to return None if the field is blank .
11990	Load a module from a python module .
11991	Build a state from a dict .
11992	Returns a list of OM symbols .
11993	Returns a tuple of the OMSymbol .
11994	Decode data into a bytearray .
11995	Encode a string into a byte string .
11996	Convert a value to a fixed value .
11997	Format a number .
11998	Converts a number to money .
11999	Convert data to numpy array .
12000	Convert a blosc array into a blosc . DataArray .
12001	Add a workspace .
12002	Remove a workspace .
12003	Return a dict of all workspaces .
12004	Returns a WebSocket by name .
12005	Check if a repository exists in a workspace .
12006	Synchronize workspaces and repositories .
12007	Clone a repository .
12008	Check the version of ndio .
12009	Convert a numpy array to voxels .
12010	Convert a list of voxels into a numpy array .
12011	Execute a workspace .
12012	Print an update of a repository .
12013	Sets the console handler .
12014	Execute a command .
12015	Load an image from a png file .
12016	Save numpy data to a png file .
12017	Save a collection of numpy layers .
12018	Print a workspace .
12019	Print the status of a repository .
12020	Get the block size of a cube .
12021	Post cutout of blosc data .
12022	Load an image from a tiff file .
12023	Save a TIFF file .
12024	Load a multi - page tiff file .
12025	Write configuration to a YAML file .
12026	Clone a branch .
12027	Returns the yoda version .
12028	Mix and match greetings .
12029	Decorator to print an option .
12030	Returns a list of ids to reserve for a given channel .
12031	Merge a list of ramon ids .
12032	Propagate a token to a given channel .
12033	List projects in a dataset .
12034	Get a dataset .
12035	Returns a list of datasets .
12036	Parse command line options .
12037	Show workspace .
12038	Show a workspace .
12039	Show all workspaces .
12040	Returns the url for the given endpoint .
12041	Guess the file format from a file extension .
12042	Open an image file .
12043	Convert in_file to out_file .
12044	Build a graph .
12045	Compute the invariants of a graph file .
12046	Converts a graph from one format to another .
12047	Convert a list of ramons to a dictionary .
12048	Returns a RAMON object of the given type .
12049	Delete a channel .
12050	Add a dataset to the model .
12051	Returns a json representation of the dataset and metadata .
12052	Return a dictionary representation of a dataset .
12053	Return a dict representation of a channel .
12054	Return a dict representation of a project .
12055	Identify the size of the image .
12056	Post data to ndio .
12057	Find the path to a workspace .
12058	Returns a list of public tokens .
12059	Get information about a project .
12060	Set the metadata for the given token .
12061	Get a URL .
12062	Make a POST request to a URL .
12063	Delete a URL .
12064	Load an HDF5 file into a numpy array .
12065	Save array to HDF5 file .
12066	Infer gaps in a tree .
12067	Recover a nvim IO .
12068	Install jinja translations .
12069	Returns a generator that yields exclusive NS .
12070	Returns the percentage of the data .
12071	Returns a dictionary of stats from the cache .
12072	Returns a dict of dicts containing the mc_client and mc_slabs .
12073	Return context data as a dict .
12074	Return the server status .
12075	Displays a Memcache Dashboard .
12076	Get cache statistics for a server .
12077	Get a list of memory slabs for a server .
12078	Returns the number of bytes in human readable form .
12079	Find a Config from a list of children .
12080	Add kwargs to the directory .
12081	Applies the given applicator to the config file .
12082	Returns the path to the file .
12083	Read the contents of the file .
12084	Write data to file .
12085	Configure the log file .
12086	Creates the file if it does not exist .
12087	Applies the given applicator to the config file .
12088	Returns the path to the file .
12089	Remove the contents of the directory .
12090	Prepare all the children .
12091	Cleans up the cache .
12092	Returns the path to the given path .
12093	Returns a list of all files in this directory .
12094	Write data to a file .
12095	Read the contents of a file .
12096	Add a file to the tree .
12097	Save data to a YAML file .
12098	Load the data from a YAML file .
12099	Remove the file if it exists .
12100	Load plugins from a directory .
12101	Update a dict from source to target .
12102	Returns a child node of this node .
12103	Resolve the path .
12104	Returns the value of the container .
12105	Update this ConfigNode .
12106	Load the defaults file .
12107	Apply the config to a string .
12108	Build a callback URL .
12109	Process the input from the socket .
12110	Send the output to the pyngus server .
12111	Send a RPC call request .
12112	Read data from a socket .
12113	Write data to a socket .
12114	A decorator that ensures that a function is not reentrant .
12115	Returns the remote settle modes for the given proton link .
12116	Configure a node handler based on its properties .
12117	The address of the remote source .
12118	Returns the address of the target .
12119	Called when the parent session is closed .
12120	Create a new sender .
12121	Add a SenderLink to the connection .
12122	Create a new receiver .
12123	Create a ReceiverLink for a request .
12124	Destroys a link .
12125	Called when the session needs to be closed .
12126	Process an endpoint event .
12127	Extend Markdown .
12128	Called when the remote receiver is closed .
12129	Called when a receiver fails .
12130	Get the host and port for a given server address .
12131	Connect to the given host and port .
12132	Create a server socket .
12133	Return a list of readers writers and timers that need processing .
12134	A decorator that ensures that a connection is not reentrant .
12135	Process the connection .
12136	Returns the output data of the connection .
12137	Create a new sender .
12138	Reject a link handle .
12139	Create a new Receiver .
12140	Called when a connection failed .
12141	Called when the connection is up .
12142	Called when the remote connection needs to be closed .
12143	Called when a protocol error occurs .
12144	Decorator for twilio_view .
12145	Return a string representation of the color .
12146	Returns a dictionary of ttf files .
12147	Sets the compression value .
12148	Add an object to the PDF .
12149	Output a string to a stream .
12150	Put a stream to the server .
12151	Add a page to the document .
12152	Set the color scheme .
12153	Sets the default font for this PDF .
12154	Add a page to the PDF .
12155	Set the font size .
12156	Add text to the PDF .
12157	Add a newline to the page .
12158	Add a pie chart to the page .
12159	Outputs a list of pages .
12160	Returns a list of all orientation changes .
12161	Output fonts .
12162	Output a list of images .
12163	Outputs the XObject and subtype to the session .
12164	Transforms the matrix a b c d e f into the matrix f
12165	Returns the absolute position of the vector .
12166	Set the style .
12167	Rotate pointX to pointY .
12168	Set information about this object .
12169	Sets the display mode .
12170	Closes the document .
12171	Put the PDF header .
12172	Put the pages of the document into the session .
12173	Puts a resource dictionary into the session .
12174	Puts the information into the session .
12175	Puts the catalog into the session .
12176	Put the trailer .
12177	Given a list of sequences return a floyd function .
12178	A naive version of CycleDetected .
12179	Yields sequences from a list of sequences .
12180	Given a sequence of sequences yield a brent function .
12181	Returns True if x = test_length and False otherwise .
12182	Returns True if the y - axis fits the given test_length .
12183	Return True if x is greater than test_ordinate .
12184	Returns True if y is greater than test_ordinate .
12185	Return a copy of this cursor .
12186	Add dx to self . x .
12187	Add y coordinates to self . y .
12188	Draw the cursor .
12189	Create a new image .
12190	Get a list of tags .
12191	Get a label by name .
12192	Update a label .
12193	Delete an item .
12194	Create a new label .
12195	Returns a list of actions .
12196	Return a list of tags for the given label_sn .
12197	Create a new trigger group .
12198	Returns a list of all available hooks .
12199	Update a hook .
12200	Create an alert .
12201	Returns a list of alerts of the given type .
12202	Update an alert .
12203	Setup the sphinx extension .
12204	Returns the absolute path to the themes package .
12205	Make a POST request to LogEntry .
12206	Get a list of hosts .
12207	Get a log set from the server .
12208	Find an attacker sliding from occ_bb to piece_bb .
12209	Compute the duration of the time series .
12210	Update the model with the given keyword arguments .
12211	Compute the limbdark .
12212	Bind the arrays to the transit .
12213	Free the arrays .
12214	Receive data from the NNTP socket .
12215	Generate a single line from the buffer .
12216	Generate a buffer of length bytes .
12217	Return the NNTP code and message .
12218	Generate information from a message .
12219	Return a string representation of a message .
12220	Send a command to the NNTP server .
12221	Returns a list of NNTP capabilities .
12222	Raise NNTPReplyError if mode is not read .
12223	Quit the NNTP server .
12224	Returns a datetime object .
12225	Send a HELP command .
12226	Generate a list of new groups .
12227	Generate NNTP NEW NEWS lines .
12228	Returns a list of tuples matching the given pattern and timestamp .
12229	List active newsgroups .
12230	Generate a list of active times .
12231	Generate a list of newsgroup names and descriptions .
12232	Generator for list overview . FMT .
12233	Generate a list of extensions .
12234	Generate a list of dictionaries .
12235	Returns a list of dictionaries .
12236	Return the number of members of a group .
12237	Get the next article and identifier .
12238	Send an article to the NNTP server .
12239	Execute the HEAD command .
12240	Return the body of the message .
12241	Executes the XGTITLE command and returns the result .
12242	Execute XHDR on the given header .
12243	Execute the XZHDR command and return the response .
12244	Generator for XOVER messages .
12245	Generate an XPAT message .
12246	Returns a list of tuples corresponding to the given id_range .
12247	Compress a gzip file .
12248	Send a POST request .
12249	Return the offset of a value .
12250	Return a timestamp for a given value .
12251	Return a datetime object .
12252	Make a POST request to the API .
12253	Delete a URL from the API .
12254	Perform a HTTP GET request to the given url .
12255	List the scheduled queries for this account .
12256	Fetches a list of all tags for this account .
12257	Get a tag by name or id .
12258	Create a new alert .
12259	Delete a tag .
12260	Creates a scheduled query .
12261	Create a scheduled query .
12262	Delete a scheduled query .
12263	Unparse a range .
12264	Parse a line of newsgroup info .
12265	Parse a header line .
12266	Unparse headers .
12267	Send a POST request to the server .
12268	Run a list of tests .
12269	Returns a docstring representation of the defaults .
12270	Decorator to add a defaults docstring to a function .
12271	Returns a docstring for the defaults class .
12272	Sets the value to the given value .
12273	Checks that the given value is of the correct type .
12274	Returns the value of this variable .
12275	Check if the value is of the correct type .
12276	Returns the symmetric error .
12277	Set a list of scalar errors .
12278	Set the bounds .
12279	Import metrics .
12280	Extract metrics from a dictionary .
12281	Return a list of metrics that match the filter expression .
12282	Call the RPC API .
12283	Returns the expression terminal for the given text .
12284	Return an operator for the given text .
12285	Add a new token to the token list .
12286	Initialize the properties .
12287	Returns a list of Parameter objects .
12288	Returns a numpy array of parameter values .
12289	Returns a numpy array of parameter errors .
12290	Clears all Derived values .
12291	Sets the method of this object .
12292	Get environment variables .
12293	Returns the URL parameters .
12294	Perform a HTTP GET request .
12295	Performs a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Raises WrongSceneNameError if the prefix is invalid .
12300	Verify the type product of a satellite .
12301	Get the size of the remote file .
12302	Download the scene to a directory .
12303	Validate a list of parameter bands .
12304	Establish a connection to Earthexplorer .
12305	Add a prefix to a name .
12306	r Returns the timezone information for a given zone .
12307	Normalize a datetime .
12308	Join elements of iterable with delimiter .
12309	Return a list of all newline positions in the text .
12310	Convert a pointer to a source line .
12311	Dump the results to a text file .
12312	Filter metrics and plugins .
12313	Load a fortune from a list of files .
12314	Sets the chance of a file to a given number of files .
12315	Run a command and exit if the command fails .
12316	Concatenate the given text into a rule .
12317	Handle special characters in text .
12318	Returns the grammar as a dictionary .
12319	Returns a list of rules for this token .
12320	Returns a list of comments for this token .
12321	Returns a list of directives .
12322	Returns the output source .
12323	Returns a formatted version of the token .
12324	Return a string representation of the import directives .
12325	Returns the token type as a string .
12326	Returns the class definition as a string .
12327	Returns the entry point .
12328	Returns the definition of a rule .
12329	Get the source of a rule .
12330	Returns the transform for the given rule .
12331	Convert an expression to an AS number .
12332	Convert a node into an AS number .
12333	Returns a list of operands in a hopper .
12334	Remove grouping groups from an optree .
12335	Convert an AST node to a python code object .
12336	Convert an optree node to code .
12337	Convert AST terminal to code .
12338	Convert an option group to a list of options .
12339	Convert a repetition group to a string .
12340	Assemble a special handler code .
12341	Convert an AST operand to code .
12342	Concatenate an operation into a single line of code .
12343	Convert an AST operand to a line of code .
12344	Multiply op to code .
12345	Convert AST operands to code .
12346	Returns a list of directives that match the given predicate .
12347	Flatten a TokenType . expression .
12348	Extract directives from a comment .
12349	Handle API results .
12350	Generate a new id .
12351	Remove a hotkey from a control .
12352	Add command line options to the parser .
12353	Configure logging level .
12354	Validate the arguments .
12355	Convert a list of OperatorNodes into a list of OperatorNodes .
12356	Convert a list of postfixes to an OptreeNode .
12357	Reduce a list of nodes to a list of OperatorNodes .
12358	Add command line options to the MetricCommon .
12359	Load the plugin manifest .
12360	Returns the metric definition for the given name .
12361	Returns the length of the fields column .
12362	Returns the length of the metrics column .
12363	Escapes all under - scores .
12364	Outputs the fields in Markdown format .
12365	Prints the metrics in Markdown format .
12366	Generates and outputs a Markdown document .
12367	Parse a string into a tree .
12368	Attempts to consume the given text .
12369	Add command line options to the parser .
12370	Parse a string into a datetime object .
12371	Prints a csv representation of the results .
12372	Output data as a JSON string .
12373	Output a JSON string to stdout .
12374	Generate an xml . dom . dom . dom . dom . dom . dom . dom . dom . dom . dom XML document
12375	Returns True if the parse node is empty or if it is a terminal .
12376	Print a python file .
12377	Returns a partial representation of a repetition .
12378	Returns the terminal of the given text .
12379	Returns a parse node with repetition .
12380	Get the exclusion for the given text .
12381	Count the number of leading whitespace characters in text .
12382	Calls the given extractor with the given text .
12383	The position of the parse node .
12384	Returns True if this ParseNode is empty .
12385	Add an ignored item to the consumed list .
12386	Returns True if value is a node type .
12387	Returns a new ParseNode with the given predicate flattened .
12388	Returns a new ParseNode with all of its children trimmed .
12389	Returns a new ParseNode with this and other merged .
12390	Return a ParseNode with the new type retyped .
12391	Return a compressed version of this node .
12392	Returns the current position of the column .
12393	Returns the max - readed position .
12394	Step to the next character .
12395	Step to the next line .
12396	Step past the previous line .
12397	Returns the last line of the cursor .
12398	Increment the cursor position to length bytes .
12399	Save the current cursor context .
12400	Restores the current context .
12401	Return a formatted representation of this notification .
12402	Sets the name of the model .
12403	Count the number of variables .
12404	Count the number of functions .
12405	Updates self . _ntypes _nvars _nfuns
12406	Updates this StateScope with the given signature .
12407	Returns a new Scope with the union of the given signature .
12408	Update the intersection with the given oset .
12409	Returns a new Scope with the intersection of the given sig .
12410	Updates the Scope based on the difference between oset and this Scope .
12411	Returns a new Scope with a different signature .
12412	Update self . _hsig with symmetric differences from oset .
12413	Returns a new Scope with a symmetric difference .
12414	Adds a signature to the scope .
12415	Remove a signature from the set .
12416	Discard a signature .
12417	Returns a list of signature values .
12418	Returns the first signature .
12419	Returns the last signature .
12420	Returns the signature for the given key .
12421	Get a Scope object by symbol name .
12422	Get a signature by symbol name .
12423	Get all polymorphic returns .
12424	Call an injector on a node .
12425	Normalize an AST node .
12426	Set the value of this node to the value of another node .
12427	Returns a generator yielding the previous values .
12428	Check if a hit is OK .
12429	Returns a tuple containing the signature of the computation .
12430	Returns a list of tuples corresponding to this tuple .
12431	Returns a list of resolvable names for the given type name .
12432	Sets the resolved name of a type .
12433	Delete a local file .
12434	Delete a file from S3 .
12435	Delete a file .
12436	Save an object to a local file .
12437	Save a file to S3 .
12438	Save obj to a temp file .
12439	Find a bucket by its path in S3 .
12440	Create an enum object .
12441	Checks the types of a function .
12442	Set one thing in a chainmap .
12443	Decorator to add a method to a function .
12444	Decorator to add a hook to a class .
12445	Decorator to add a rule to a class .
12446	Decorator for directives .
12447	A decorator that adds a non - local name to a function .
12448	Bind dst to src .
12449	Read EOF .
12450	Pushes the rule nodes to the top of the tree .
12451	Pops rule nodes from the tree .
12452	Return the value of a node .
12453	Add a stream with the given content and name .
12454	Begin a tag with the given name .
12455	End a tag .
12456	Set a set of rules .
12457	Sets the hooks of the class .
12458	Set a list of directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Returns True if the given text is in the stream .
12462	Returns True if there is only one character in the stream .
12463	Read a character from the stream .
12464	Read until EOF .
12465	Ignore blanks .
12466	Set the hit dtype of the cluster .
12467	Set the cluster dtype .
12468	Check struct compatibility .
12469	Add a ruleclause name .
12470	Add a rule to a BNF .
12471	Add a new rule .
12472	Add sequences to cla .
12473	Add an alternative to the tree .
12474	Add a range to the sequence .
12475	Add a lookahead rule to the sequence .
12476	Add a capture to a sequence .
12477	Add a bind to a sequence .
12478	Add a hook to a sequence .
12479	Returns True if the parameter is n bytes long .
12480	Returns True if the parameter is a string .
12481	Returns True if param is a valid character .
12482	Get the id of a parameter .
12483	Set the name of a hook .
12484	Add a parameter to a hook .
12485	Returns a list of rules to parse .
12486	Ignore cxx characters .
12487	Add a state .
12488	Return a dot representation of the graph .
12489	Write to a dot file .
12490	Write to a png file .
12491	Convert the state to a formatted string .
12492	Returns the next state of this state .
12493	Resets the current living state .
12494	Infer block type .
12495	Infer a subexpression .
12496	Infer the identifier .
12497	Infer a literal from the given arguments .
12498	Dump local information about the nodes .
12499	Parse a top - level rule .
12500	Returns an ast . stmt .
12501	Returns the clause for the given parser tree .
12502	Visit a call node and return the result .
12503	Visit a CallTrue node .
12504	Visit a Hook node and return an expr .
12505	Visit a Rule node .
12506	Visit a capture node and return a list of start and end tags .
12507	Visit a scope node .
12508	Visit an Alt node and return a list of stmt .
12509	Visit a sequence node and return a list of expressions and stmts .
12510	Visit a RepOptional node .
12511	Visit a Rep0N node .
12512	visit a Rep1N node and return a list of stmts
12513	Catend src to dst with indentation .
12514	Set the indentation of a list .
12515	Convert a list to a string .
12516	Print a list of nodes to stdout
12517	Populate an edge from a sequence .
12518	Populate the state register .
12519	Build a state tree from a list of statements .
12520	Returns True if n is equal to val .
12521	Build a grammar from a string .
12522	Read a grammar from a file .
12523	Parse an entry rule from a string .
12524	Parse an entry rule from a file .
12525	Set the value of a node .
12526	Set a node as an integer .
12527	Get a subnode of a node .
12528	Return a default serializer for a datetime object .
12529	Return the total number of depositions for a given query .
12530	Dump a deposition to a JSON formatted string .
12531	Returns a list of recids for a given date .
12532	Returns a list of recids invenio2 .
12533	Import BibDoc from legacy . bibdocfile .
12534	Dump a BibRecDoc to a BibDoc object .
12535	Return a list of bibdoc ids to check .
12536	Check a BibDoc .
12537	Dump an object to a dictionary .
12538	Return the number of users and the total number of users .
12539	Dump an object to a dictionary .
12540	Return a list of FeaturedCommunities
12541	Returns a set of modified recids invenio12 .
12542	Returns a set of modified recids invenio2 .
12543	Get the restrictions for a collection .
12544	Returns a list of revisions for a given record .
12545	Returns a dict of all collections of a record .
12546	Dump a marcxml record to json .
12547	Get bibdoc recids for a given query .
12548	Dump a MarcXML record to disk .
12549	Dump a RADIUS object to a dictionary .
12550	Load a common model from the database .
12551	Returns a dict of all entry points in the invenio_migrator . things group .
12552	Initialize the invenio application context .
12553	A decorator that memoizes a function .
12554	Returns a run_sql object .
12555	Get the connected roles for the given action id .
12556	Get a list of actions for a given query .
12557	Dump a RemoteToken object to a dictionary .
12558	Load token from data .
12559	Import a record from the database .
12560	Return the value of config_var_imp or default .
12561	Dump an object to a dictionary .
12562	Get users from invenio . dbquery .
12563	Returns a tuple of the number of users and the total number of users .
12564	Dump a user to a dictionary .
12565	Load a deposit from the database .
12566	Create a new record with the given data .
12567	Load a record from a file .
12568	Load records from a list of sources .
12569	Return a list of records with the given recid .
12570	Load data from a list of sources .
12571	Load communities from source files .
12572	Load users from a list of sources .
12573	Load a deposit from sources .
12574	Get profiler stats .
12575	Start a tornado web application .
12576	Dump stats to a file .
12577	Delete the profile .
12578	Delete the profiler .
12579	Get the current status of the server .
12580	Disable timestamp for a method .
12581	Load a user from a user profile .
12582	Calculate translations for a list of images in parallel .
12583	Stitch a list of images together .
12584	Adds a dimensions with ones to array .
12585	Create a new persistent identifier .
12586	Create a new record in the database .
12587	Update a record .
12588	Create a persistent identifier for a record .
12589	Delete a record .
12590	Create a list of files for a record .
12591	Create a new file instance .
12592	Delete all buckets in a record .
12593	Returns a list of persistent identifiers that are missing .
12594	Prepare revisions .
12595	Returns a dictionary containing all the files in the database .
12596	Prepare the PIDs .
12597	Check if a record is deleted .
12598	Load a community .
12599	Load FeaturedCommunity object .
12600	Dump a thing to a file .
12601	Check if thing is in the list of available things to migrate .
12602	Delete this widget .
12603	Returns the magnitude of a vector .
12604	Return a normalized version of a vector .
12605	Transform tex coordinates .
12606	Ensures that the bones are present .
12607	Set the length of the bone .
12608	Sets the parent of this bone .
12609	Gets the pivot point for the given data .
12610	Start animation .
12611	Set the state of the object .
12612	Unset the state of the object .
12613	Set the state of the bone .
12614	Unset the state of the region .
12615	Ensures that obj has the modeldata attribute .
12616	Redraw obj .
12617	Draw obj in batch 3d .
12618	Sets the model of this object .
12619	Write a set of reports to a file .
12620	Convert a list of test reports into a XML string .
12621	Add a menu to the window .
12622	Redraws the label .
12623	Redraws the label .
12624	Draws the window .
12625	Deletes a widget .
12626	Redraws the label .
12627	Registers event handlers .
12628	Registers event handlers .
12629	Add a label to the main window .
12630	Add btn_ok button .
12631	Exit the dialog .
12632	Add btn_confirm button .
12633	Add a cancel button .
12634	Update the progress bar .
12635	Render the scene in a 3D view .
12636	Render the world in 3D .
12637	Context manager for opening a step .
12638	Returns True if a resource with the given name and extension exists .
12639	Add a category .
12640	Returns the missing texture .
12641	Get a model by name .
12642	Load a model .
12643	Get the model data for a given model name .
12644	Load a model from a JSON file .
12645	Adds a new widget .
12646	Draws this menu .
12647	Redraws the background .
12648	Redraws the scrollbar .
12649	Returns true if mpos is larger than size and pos is smaller than size .
12650	Returns the p - value of the tuple .
12651	Add a layer to the graph .
12652	Get a region from a buffer .
12653	Draws the vertex arrays .
12654	Add an action to the list of actions .
12655	Executes the given action .
12656	Add a new name to the registry .
12657	Add a layer to the graph .
12658	Draw the widget .
12659	Delete this widget .
12660	Returns the border of this list .
12661	Returns the offset of the current widget .
12662	Returns the size of the widget .
12663	Read mesh from HDF5 file .
12664	Create a connection from a shape .
12665	Add a list of fields to the query .
12666	Add a list of fields to the query .
12667	Check if the elements are in the argiope list .
12668	Returns the space of the Argiope element .
12669	Returns a list of centroids and volumes .
12670	Returns a list of the angles of the argiope .
12671	Returns a pd . MultiIndex of the edges .
12672	Concatenate centroids and volumes .
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Convert a surface to a set of elements .
12676	Returns the metadata for all the fields .
12677	Returns a pd . Series containing the metadata for this step .
12678	Make all directories in the work directory .
12679	Run a post - processing command .
12680	Run the gmsh command .
12681	Read a history report from a CSV file
12682	Read a field report .
12683	Convert a list to a string .
12684	Returns a string representation of the equation .
12685	Returns a string representation of an unsorted set .
12686	Parse a response from the API .
12687	Get a request from the API .
12688	Write an XY report to a file .
12689	Write a field report .
12690	List the creators of a given ComponentType .
12691	Attempted to set the f_type attribute to the val_type value .
12692	Returns True if the exception was thrown by the descriptor .
12693	Set the data for this axis .
12694	will get the axis mode for the current series
12695	sets the graph plotting options
12696	Create a class with the given attributes .
12697	Process the datafeeds and draw notifications .
12698	Try to convert a value to a float .
12699	Convert a string to a float .
12700	Plot a graph .
12701	Convert a raw string to unicode .
12702	Make a clean HTML document from a raw string .
12703	Returns True if mime_type matches mime_type .
12704	Cleans the domain name from a string .
12705	Returns a list of left - cut domain names for a given domain name .
12706	Returns a hash of the given tok .
12707	Collect words from a sentence .
12708	Index a stream item .
12709	Invert a hash into a list of keys .
12710	Returns a dictionary mapping hashes to the frequency of each document .
12711	Lookup a key in the HASH_TF_INDEX_TABLE .
12712	Lookup TF ids from a HASH_TF_INDEX_TABLE .
12713	Make a list of stream items from a ProtoStreamReader
12714	Make a stream item from an entry .
12715	Create a streamcorpus . ContentItem object from the given node .
12716	Read a Varint from the stream .
12717	Read a block from the stream .
12718	Serialize a stream item key into a string .
12719	Convert a streamitem to a key and data .
12720	Yields the working directory of the given path .
12721	Strip a prefix from a string .
12722	Strip a suffix from a string .
12723	Check if a needle is a subsequence of another needle .
12724	Returns an ice cube .
12725	Run the WSGI server .
12726	Shutdown and close the server .
12727	Decorator to add a callback to the router .
12728	Decorator to mark a callback as an error handler .
12729	Returns a 404 if the path is a file .
12730	Get error page callback .
12731	Add a callback to a method .
12732	Resolve a non - literal route .
12733	Resolve a non - literal route .
12734	Normalizes a pattern .
12735	Returns a string representation of the response .
12736	Add a new header .
12737	Set a cookie .
12738	Returns the status line of the response .
12739	The content type of the media .
12740	Get all values for a given key .
12741	Recursively delete a directory tree .
12742	Return a list of open file descriptors .
12743	Returns statistics about the file type of a stream item .
12744	Run rejester on a work unit .
12745	Fetch public datasets from Amazon AWS .
12746	Returns a list of lines from a file .
12747	Generate a random adjacency species pair .
12748	Generate a random adjacency species pair .
12749	Morph a sentence to a list of words .
12750	Return the similarity score for the given app_id .
12751	Execute a hiragana request .
12752	Return a list of entities .
12753	Return a summary of a review .
12754	Return a list of keywords .
12755	Return a list of datetimes for a given request .
12756	Create a new SCP stage .
12757	Initialize a list of stages .
12758	Initialize all stages .
12759	Read a chunk of text .
12760	Run all the writers .
12761	Run incremental transforms on a stream .
12762	Replace a config file with a PipelineStages instance .
12763	Create an application .
12764	Given a list of sentences return a list of chains with equiv ids .
12765	Returns a boolean indicating if all target_mentions and chain_mentions match .
12766	Return True if any of target_mentions are in chain_mentions .
12767	Given a rating and a list of tokens compile a look_ahead_match regex .
12768	Match multiple tokens in a stream item .
12769	Create a new NER file .
12770	Align a chunk with a NER file .
12771	Shutdown the child process .
12772	Multiply p by n .
12773	Fix email brackets in text .
12774	generate strings identified as sentences
12775	make a sortedcollection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to unicode .
12778	Create a cleansed file .
12779	Create a NER file for a tagger .
12780	Remove punctuation and whitespace from a span .
12781	Align a chunk with a stream .
12782	Make absolute paths from a config file .
12783	Instantiate a streamcorpus config file .
12784	Generate the john - smith - corpus chunk .
12785	Re - based make visible HTML .
12786	Convert html to a clean string .
12787	Make a clean - visible file .
12788	Remove punctuation and whitespace from a string .
12789	Main entry point for pdb .
12790	Try to load a stage from a module .
12791	Load external stages from a file .
12792	Load stages from a module .
12793	Initialize a stage .
12794	Read idx_bytes to idx_bytes .
12795	Returns True if the given href is valid False otherwise .
12796	Returns a list of labels for the given clean html .
12797	yield all file paths under input_dir
12798	Iterate over all tasks .
12799	Returns a random keeper from the available rows .
12800	Yield tokens from sentence_dom .
12801	Returns a list of sentences for the given ner_dom .
12802	Decorator to retry a function .
12803	return True if okay raise Exception if not
12804	Get the bucket parameter from the config file .
12805	Decode a streamcorpus message .
12806	Get a chunk from a bucket .
12807	Convert a stream_id to a kvlayer key .
12808	Convert a kvlayer key to a stream ID .
12809	Return the md5 hash of the stream item .
12810	Make all your dreams for a pony come true
12811	Build an argparse . ArgumentParser .
12812	Add xpaths to a stream item .
12813	Convert a list of sentences to a list of character tokens .
12814	Convert a list of char tokens to a list of char offsets .
12815	Convert char_offsets to XpathTextCollector .
12816	Adds an element to the list of tags .
12817	Return the XPath XPath piece for this element .
12818	Returns the index of the text element .
12819	Returns a generator of all descendants of an XML element .
12820	Select elements from an XML source .
12821	Returns a list of elements whose XML name matches the given name .
12822	Returns True if xml_name matches pat .
12823	Select an attribute from a source .
12824	Return an iterator over the siblings of the given element .
12825	Make an XML element pretty - printed .
12826	Call the inkscape command .
12827	Export inkscape to a file .
12828	Convert an SVG file to a PDF .
12829	Convert an SVG file to a PNG file .
12830	Returns a jinja environment for the given file path .
12831	Sets up the template file .
12832	Fills the document with the given content .
12833	Save the content of the document to a file .
12834	Create a document from a template file .
12835	Returns a new SVGDocument with the given content .
12836	Render a file .
12837	Render a file to a PDF .
12838	Parse an XML document .
12839	Parse an HTML document .
12840	Parse a markup document and return a fragment .
12841	Insert text before or after data .
12842	Insert a node before a reference node .
12843	Return a clone of this node .
12844	Execute the namelist and makefile options .
12845	Return a string representation of a node .
12846	Insert a child into the XML document .
12847	Parse the config file .
12848	Get Google credentials .
12849	Create event datetimes .
12850	Create a calendar event .
12851	Parse options and create an event .
12852	Get the extension of a file .
12853	Add an extension to a file if it doesn t already exist .
12854	Returns a named temporary file .
12855	Remove all files in workdir with extension .
12856	Convert a CSV file to a JSON file .
12857	Replace the content of a file .
12858	Parse a list of tags .
12859	Check if a tag has a next sibling .
12860	Create an italicized tag .
12861	Create a strong tag .
12862	Create an underline tag .
12863	Parse the attributes of a tag .
12864	Remove line breaks from a tag .
12865	Parse a url href .
12866	Parse an attribute value .
12867	Translate key values in a dictionary .
12868	Serializes this object to a JSON string .
12869	Returns a list of files that match the given regex .
12870	Concatenate a list of strings together .
12871	Yields full . startswith dictionaries .
12872	Returns True if ctx contains full and part .
12873	Yield the length of a string .
12874	Convert obj to a boolean .
12875	Returns a generator that yields each element of a sequence .
12876	Looks up a key in a table .
12877	Replace & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
12878	Check if svg_file is str or svgutils . SVG .
12879	Merge two svg files .
12880	Merge a list of PDF files into a single PDF file .
12881	Embed a list of font files into an svg tree .
12882	Embed a font into an SVG file .
12883	Checks the inputs of the melody .
12884	Check that the provided function is callable .
12885	Perform a recursive function on the inputs and outputs .
12886	Create a Jinja2 input .
12887	Recursively recurse through the inputs and outputs .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize xp_ast into a tuple .
12892	Change the encoding of an XML file .
12893	Generate a QR code from a string .
12894	Launch a melody .
12895	Call a command with the given arguments .
12896	Convert a tex file to a pdf file .
12897	Returns a list of options for the given psy .
12898	Transforms a Geometry object from one spatial reference to another .
12899	Create a Geometry object from a JSON string .
12900	Extends self by expanding other .
12901	Returns the intersection of this Envelope with another Envelope .
12902	Checks if this Envelope intersects another Envelope .
12903	Returns a 2D polygon of the ring .
12904	Create a DataFrame from a ZNM .
12905	Write data to a file .
12906	Returns a list of Table objects corresponding to the given condition .
12907	Returns the table at the given nuclei .
12908	Returns the intersection of this table with another table .
12909	Returns the table that is not in the given table .
12910	Returns an odd - even representation of the model .
12911	Returns a boolean indicating whether the input is even - distributed .
12912	Returns a boolean indicating whether the input is even or even .
12913	Returns an error table .
12914	Return the mean squared error .
12915	Calculate the binding energy of the molecule .
12916	Derivative of s2n .
12917	Derivative of s1n .
12918	Derivative of s2p .
12919	Derivative of s1p .
12920	Returns a derived Table .
12921	Returns True if the given function uses the database .
12922	Derives a key from a master password .
12923	Bootstrap a new database .
12924	Search for domains matching the given query .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract hbs from a file .
12928	Return the VSI prefix of a path .
12929	Returns the srid of the epsg .
12930	Executes a command and exits .
12931	Initialize logging .
12932	Update a file .
12933	Returns a dict of all available drivers .
12934	Returns the image driver for a given path .
12935	Convert a GeoJSON raster to an array .
12936	Rasterize a raster layer .
12937	Open a raster from a file - like object
12938	Create a raster from bytes .
12939	Copies a raster from one location to another .
12940	Returns the DMD_CREATIONOPTIONLIST option list .
12941	Create a raster of the given size at the given path .
12942	Sets the geometries of an affine .
12943	Read an array from the file .
12944	Envelope of the Raster .
12945	Returns the driver object for this image .
12946	Create a new raster .
12947	Returns a masked array .
12948	Returns the nodata value .
12949	Reads a raster from the file .
12950	Resample the image to a given size .
12951	Save this image to a file or directory .
12952	Sets the projection of a spatial reference .
12953	Warp a SpatialReference to another SpatialReference .
12954	Calculate the length of a chunk .
12955	Lookup an alphabet for a given character set .
12956	Encode a chunk of data .
12957	Convert a 256 - bit chunk to a 256 - bit long string .
12958	Get a chunk of data at the given index .
12959	Memoize a function .
12960	Return a string representation of a regexp file .
12961	Normalize a date format .
12962	Detect timezone .
12963	Convert this swagger to a dictionary .
12964	Activate the pdb debug hook .
12965	Returns a pretty - printed representation of obj .
12966	Handle incoming jobs .
12967	Runs the job handler until all jobs are completed .
12968	Run a multiprocessing worker pool .
12969	Sets the classification of this Account .
12970	Send a message to the server .
12971	Turn on a light .
12972	Turn on a switch .
12973	Turn on a light with a given brightness .
12974	Turn off a device .
12975	Send a reliable message to the queue .
12976	Send a reliable message .
12977	Create an adapter for the given object .
12978	Sets the nature of this DataFrame .
12979	Update the value of a config dict .
12980	Resets the default values .
12981	Sets the list of config files .
12982	Returns a generator yielding all available options .
12983	Returns a generator of the default options .
12984	Create a config file .
12985	Update a configuration dictionary .
12986	Reads a config file and returns a dictionary .
12987	Read all config files .
12988	Returns a list of string representations of the options in the given section .
12989	Returns a list of the sections for the given command .
12990	Solve the command options for the given command name .
12991	Add options to the parser .
12992	Build argparse . ArgumentParser .
12993	Parse command line arguments .
12994	Execute a zsh command .
12995	Execute a zsh command and return the result .
12996	Execute a bash - comp command .
12997	Execute a bash command and return the result .
12998	Start a master server .
12999	Create a new connection to the worker .
13000	Called when a line is received from the server .
13001	Called when a worker connection is lost .
13002	Called when a job is loaded .
13003	Called when a response has been received .
13004	Close the job .
13005	Add a job set to the master .
13006	Closes the connection to the server .
13007	Change the status of all the waiters .
13008	Add a result to the list .
13009	Wait for a future to be created .
13010	Load the next job from the queue .
13011	Called when the job is done .
13012	Add a result to the list of jobs .
13013	Cancel all the jobs in the queue .
13014	Wait until all jobs have been completed .
13015	Distribute all available jobs .
13016	Add a new job set to the queue .
13017	Get a job from the active js .
13018	Return a job from the queue .
13019	Add a result to a job .
13020	Called when a job set is done .
13021	Cancel all active js .
13022	Uniquify a list into a single list .
13023	Returns True if obj matches the given regex .
13024	Returns a list of entries matching the given filters .
13025	Get AWS EC2 region .
13026	Filter a list of entries based on the given filters and exclude .
13027	Returns the host with the given name .
13028	Create an Entry from a json dictionary .
13029	Returns the value of the given attribute .
13030	Sort a list of entries by an attribute .
13031	Returns the repr as a string .
13032	Create an instance from a boto instance .
13033	Returns True if the filter matches the regex .
13034	Returns a string representation of the object .
13035	Render a list of entries .
13036	Add a timestamp to the event dictionary .
13037	Setup logging handlers .
13038	Create a logger .
13039	Set up Celery .
13040	Get information about a worker .
13041	Delete a worker .
13042	Convenience wrapper for internal . Switch .
13043	Returns a section of the config file .
13044	Set a configuration string .
13045	Handle config commands .
13046	Create complete zsh files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Convert a table into a list of strings .
13051	Return the color of a number .
13052	Returns the color hash of a string .
13053	Generate a random color .
13054	Prompt the user for input .
13055	Check the credentials of a user .
13056	Check if the given token is valid .
13057	Decorator to require token authentication for a resource .
13058	Check if a process is running .
13059	Import obj_name from mod_path .
13060	Get the dyndns ip address .
13061	Make a request to a URL .
13062	Prepare the params for the given post_params .
13063	Serve a configuration object .
13064	Render the template to a string .
13065	Stream a command to stdout .
13066	Streams a list of commands to a list of threads .
13067	Stream a list of commands to stdout .
13068	Returns a list of workdays between two dates .
13069	Get the path of a command .
13070	Build an ssh command .
13071	Build a scp command .
13072	Copy entries to remote_path local_path and profile .
13073	Copy entries from remote_path to local_path .
13074	Run an SSH command on a list of hosts .
13075	Connect to an entry via SSH .
13076	Load an LsiProfile .
13077	Initialize a LsiProfile object from args .
13078	Returns a Relationship object for the given part .
13079	Returns a list of all packages that are related to the given relationship type .
13080	Load relationships from source .
13081	Add a part to the list .
13082	Load a part .
13083	Find the extension for a given name .
13084	given an element parse out the proper ContentType
13085	Parse a string into a Chatl tree .
13086	Build a JWK from a secret key .
13087	Assign a force field to an Ampal object .
13088	Finds the maximum radial and npnp radians .
13089	Returns a dictionary of the force field parameters .
13090	Return the object as a byte stream .
13091	Returns a generator that yields all the segments that match the given name .
13092	Copy a directory from one bucket to another .
13093	Open an S3 bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	Return a list of filenames in a directory .
13098	List all directories in a directory .
13099	Create a prefix for a directory .
13100	Delete a file .
13101	Ensure that the user is logged in .
13102	Returns a boolean indicating whether the language is loud .
13103	Delete a directory .
13104	Return the home URL .
13105	Silence a function without a namespace .
13106	Project home breadcrumb in Bs3 format .
13107	Project home breadcrumb in bs4 format
13108	Calculate the interaction energy of the given Ampal objects .
13109	Get the internal energy of an AMPAL object .
13110	Return a list of all hotspots .
13111	Get a keeper token .
13112	Upload a product to Travis .
13113	Check if we should skip a Travis event .
13114	Purge a surrogate key .
13115	Register a new build .
13116	Confirm that a build has been completed .
13117	Return a deep update of a mapping .
13118	Main entry point for ltdconveyor .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split path into drive and tail .
13122	Find a file in a path .
13123	Returns the default editor for the given filepath .
13124	Process a module .
13125	Generate a chart .
13126	Convert a chart object to HTML .
13127	Serialize a data object to a chart .
13128	Patches the json data .
13129	Convert json data to HTML .
13130	Convert a dictionary to a DataFrame .
13131	Write html to a file .
13132	Returns a Chart instance for the given type of dataframe .
13133	Encode x and y fields .
13134	Create a ghuser role .
13135	Infer tarball URL from app . json .
13136	Create a new app .
13137	Delete an app .
13138	Iterate over an attribute of an iterable .
13139	Convert a string to a binary string .
13140	Returns a valid ipad address .
13141	Generate a random date .
13142	Get a Heroku Session object .
13143	Make a request to the Heroku API .
13144	Create a tarball build .
13145	Checks the status of a build .
13146	Generate a sequence from a prefix .
13147	Decorator that memoizes a function .
13148	A decorator to make a function unique .
13149	Register sub - commands for the given parser .
13150	Returns the root argparser .
13151	Returns the description of the object .
13152	Returns a string representation of the help message .
13153	Run the command with the given arguments .
13154	Encode a string or a dataset .
13155	Returns a list of athletes .
13156	Returns a list of the last n activities .
13157	Request the activity list for an athlete .
13158	Request activity data .
13159	Returns an endpoint for an athlete .
13160	Returns an activity endpoint for the given athlete .
13161	Get a GoldenCheetah request .
13162	Create a new build .
13163	Generate a url with api auth .
13164	Generate a random title .
13165	Generate a random person name .
13166	Generate a random last name .
13167	Renders the list of ticks .
13168	Create a new dataset .
13169	Render the chart .
13170	Check the type of the chart .
13171	Render and return the API URL .
13172	Opens a web browser and returns a string .
13173	Save the image to a file .
13174	Returns a url for the request .
13175	Returns a string representation of the image .
13176	Write a URL to a file .
13177	Return a hexadecimal digest of the checksum .
13178	Return the number of bytes between min and max .
13179	Decorator to add an entity name to a class .
13180	Returns a dictionary of unprotected and protected claims .
13181	Returns a JWK representation of the signing keys .
13182	Unpack a JWS metadata statement .
13183	Pack a metadata statement .
13184	Evaluate a metadata statement .
13185	Ensure metadata_statements matches federation_usage .
13186	Extend a request with a Message .
13187	Parse command line arguments .
13188	Add command line arguments to a parser .
13189	Apply logging operations to log_files .
13190	Log a verbose message .
13191	Returns a dict of letters in a word .
13192	Iterate over anagrams in a word .
13193	Convert a class to an AMP string .
13194	Transform a timeseries into a list of tuples .
13195	Get the last value from a time series .
13196	Validate a page number .
13197	Get a single page from an iterator .
13198	Change the mode of a file .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request .
13202	Create a new request .
13203	Update a metadata statement .
13204	Updates the signature for a given location .
13205	Yield bundle contents .
13206	Create a new bundle .
13207	Returns a list of URLs for the given asset type .
13208	Returns HTML tags for the given asset type .
13209	Returns HTML tags for each asset type .
13210	Convert a URL to a HTTP url .
13211	Returns a list of links to the given URL .
13212	Connect to AMP server .
13213	Returns a list of all modules in the project .
13214	Import all service modules .
13215	Convert a parameter to a list of dates .
13216	Select fields from a nested dictionary .
13217	Returns a CursorFormatter . date_map_field for the given datemap_list .
13218	Prints a cursor .
13219	Print the number of items in the cursor .
13220	Given a list of do_tasks and a dependency graph return a list of task graphs .
13221	Adds default departments to a project .
13222	Add default atypes to a project .
13223	Add default sequences to a project .
13224	Add a user rnd shot to a project .
13225	Handle post - save requests .
13226	Create a shot for a sequence .
13227	Create all tasks for the given element .
13228	Pre - connect to a peer .
13229	Send a packet to a given peer .
13230	Get a value from the config .
13231	Decorate a function to process nova events .
13232	Decorate a function to process an event of the specified type .
13233	Decorate a function to process neutron events .
13234	A decorator to add a function to a glance customer process .
13235	Decorate a function to process Swift events .
13236	Decorator to add a function to a keystone customer process .
13237	Decorate a function to process an event of the specified type .
13238	Add a factory .
13239	Remove a factory by identifier .
13240	Create a connection to a factory .
13241	Receives data from a connection .
13242	Disconnect from a connection .
13243	Call a remote command .
13244	Create a multiplexed AMP connection .
13245	Multiplexed AMP connection made .
13246	Called when data is received locally .
13247	Send data to a remote device .
13248	Called when the connection is lost .
13249	Returns the local protocol for the given connection identifier .
13250	Receives data from a remote device .
13251	Disconnect a connection .
13252	Return a centered version of a string .
13253	Print the current time on the right .
13254	Return a string representation of a version number .
13255	Identify a unit framework for a target unit .
13256	Assert that the given value can be converted to the given target unit .
13257	Pad data_to_pad to block_size bytes .
13258	Removes padding from input data .
13259	Sign a message .
13260	Gather metadata statements for this context .
13261	Pretty print the anagrams .
13262	Parse command line arguments .
13263	Main entry point for sys . argv
13264	Handle unprocessed data .
13265	Called when a type is unregistered .
13266	Create a function stub .
13267	Send a call to a remote peer .
13268	Generate a regex for a command .
13269	Create a new AmpList object from a string .
13270	Convert this ampList to a string representation of a proto .
13271	Verify a metadata statement .
13272	Parse a remote response .
13273	Dump a file to a database .
13274	returns a list of all databases on this server
13275	Returns a dictionary of local files at the given path .
13276	Sync local and S3 files in a folder .
13277	A decorator that redirects to the request if tokens are required .
13278	Login as a new user .
13279	Build a package .
13280	Returns a new instance of this class that is readonly .
13281	Load the data from a JSON file .
13282	Self - sign a JWK .
13283	Returns a JSON - serializable JSON - serializable JSON - serializable JSON - serializable JSON object
13284	A decorator that adds a SINGLE element to a function .
13285	Returns a python source for the given testdir .
13286	Run the test runner for each card in a library .
13287	Calculate the score of a letter .
13288	Calculate the score of a word .
13289	Generate a list of words .
13290	Checks if a scrabble word is valid .
13291	Main entry point for SOSearch .
13292	Run a StackOverflow query .
13293	Called when a string is received .
13294	Returns the command and responder for the given command name .
13295	Parse the request values .
13296	Executes a request and returns a response .
13297	Write a response to the transport .
13298	Called when a connection is lost .
13299	Builds a JSONAMPDialectReceiver for the given address .
13300	Convert a JWKS object to a KeyJar object .
13301	Load a jstr into the bundle .
13302	Process a message .
13303	Process a message .
13304	Process a neutron event .
13305	Process a message .
13306	Process a message .
13307	Process a message .
13308	Process a message .
13309	Serve the WSGI server .
13310	Print a message to stdout .
13311	Print a message to stderr .
13312	Registers a CommandSubClass .
13313	Registers a CommandSubClass .
13314	Converts the given value to a string .
13315	Creates a new argument from a string .
13316	Updates a completion dictionary .
13317	Initializes and connects to Ternya .
13318	Initialize the MQ server .
13319	Initialize the service modules .
13320	Initialize a Nova consumer .
13321	Initialize a cinder consumer .
13322	Initialize a neutron consumer .
13323	Initialize a glance consumer .
13324	Initialize a heat consumer .
13325	Enables the notification for an OpenStack component .
13326	Get information about a song .
13327	Download a song to all threads .
13328	Executes the instruction .
13329	Load a name from the globals .
13330	Call a function .
13331	Dump a MySQL database to a file .
13332	Render a DITAA file .
13333	Calls the atexit function .
13334	Run the application .
13335	Change the current working directory .
13336	Copy the contents of src to dst .
13337	Executes the debugger .
13338	Get the mtime of a file .
13339	Check if an item has changed .
13340	Synchronize all files in self . fdir .
13341	Clears the filesystem .
13342	Scrape an IPDB feed .
13343	Download an image from a URL .
13344	Returns True if the image has changed since the last request .
13345	Returns a template . Node subclass .
13346	Find a caller and print the traceback .
13347	Returns the defining component of a PE .
13348	Entry point for the command line interface .
13349	Find a symbol in the stack .
13350	Returns True if the given PE is contained in the given root PE .
13351	Check if a PE is a global PE .
13352	Get the data type name from a datetime object .
13353	Returns a list of attributes that are related to a reference .
13354	Convert a datetime . datetime object into an Enum object .
13355	Create a bridge from a metamodel .
13356	Create an external entity from a metamodel .
13357	Create a function from a metamodel .
13358	Convert CNST to a constant value .
13359	Return a function that can be used to run an operation .
13360	Create a derived_attribute property .
13361	Create a class for a given object .
13362	Make a simple association .
13363	Return a tuple of source and target associations .
13364	Returns a function that can be used to create an association .
13365	Create a component from a bp_model .
13366	Executes a call on a socket .
13367	Send an ACCEPT message .
13368	Send a REJECT message .
13369	Raise an exception .
13370	Wait for hints to arrive .
13371	Establish a result queue .
13372	Dispatch a reply .
13373	Guess the type name .
13374	Deserialize a value .
13375	r
13376	r
13377	Get a single feature .
13378	Get a list of document ids .
13379	Put a list of items into the indexes .
13380	Delete a document .
13381	Delete all documents in the index .
13382	Delete the index if it exists .
13383	Returns a generator that yields the _id and _source .
13384	Scan for feature ids .
13385	Scan a prefix for features .
13386	Scan a prefix for _ids .
13387	Perform a fulltext scan of a query .
13388	Returns a generator of fulltext scan ids .
13389	Scan the query_id query_fc for keywords .
13390	Returns a generator of keyword ids .
13391	Returns a generator of index ids .
13392	Returns the source of the feature_names .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Return the number of bytes in a file - like object .
13400	Count the number of bytes in the file .
13401	Returns a string representation of a string counter .
13402	Process docopts arguments .
13403	Return the default formatter for an error message .
13404	Convert an XML string to a link string .
13405	Return a pretty representation of an identifier .
13406	Check if the uniqueness constraint is met .
13407	Check the integrity of a link .
13408	Check the integrity of a subtype .
13409	Returns a generator that yields a list of feature names .
13410	Convert a string to a lower - case string .
13411	Put a list of items into the table .
13412	Delete all tables and indexes .
13413	Scan the table for key ranges .
13414	Scan the table for ids in key_ranges .
13415	Scan the index table for a value .
13416	Index scan prefix .
13417	Returns the index scan prefix and return key .
13418	Implements the index scan prefix transformation .
13419	Define an index .
13420	Adds an index to the table .
13421	Put a raw value into the index table .
13422	Returns a generator of index keys for a given index name .
13423	Returns the index with the given name .
13424	Check if a pypi package name is valid .
13425	Add a direction to a value .
13426	Returns the type name of a datetime object .
13427	Returns the referenced attribute of an object .
13428	Build a core type from a datetime . datetime object .
13429	Build an enumeration type from a datetime . datetime object .
13430	Build a type for a struct .
13431	Build a user s type .
13432	Returns the build type for a given datetime .
13433	Build an ElementTree class for the given object .
13434	Build a component from a list of O_OBJ .
13435	Build the XML schema .
13436	Return a prettier version of an XML string .
13437	Fetch a list of stolen bikes .
13438	Set the positional information of a node .
13439	Decorator to track the production of a function .
13440	r
13441	r
13442	r  - >
13443	r  x1b [ 1mNAME  x1b [ 0m LE - > t_LE
13444	r  x1b [ 1mNAME  x1b [ 0m GE expression
13445	r
13446	r  . t . DOT .
13447	r Return the LSQBR of a string .
13448	r Return the RSQBR of a string .
13449	r  ?
13450	r Length of a tuple .
13451	r
13452	r
13453	Create a new queue .
13454	Delete a queue .
13455	List all queues .
13456	List all exchanges .
13457	Purge a queue .
13458	Create a MIME message .
13459	Read the contents of the image .
13460	Returns True if the text is visible .
13461	Command line entry point .
13462	Serialize a value to a string .
13463	Serialize an association string .
13464	Serialize a class to XML .
13465	Command - line entry point .
13466	Search the SLB for a given query .
13467	Partition a collection into succeed and fail lists .
13468	Run a list of bikes .
13469	Return a django . utils . bidi context .
13470	Find the link between inst1 and inst2 .
13471	Returns a formalized version of this link .
13472	Compute the lookup key for the given from_instance .
13473	Returns the index key for the given to_instance .
13474	Returns the attribute type corresponding to the given attribute name .
13475	Create a new instance of this object .
13476	Iterate over all instances of this class .
13477	Define a metaclass with the given attributes .
13478	Send a message to a ZMQ socket .
13479	Receive messages from a socket .
13480	Write dead code to a file .
13481	Parse a list of email addresses .
13482	Return a rpc function .
13483	Return a dict of the rpc spec for the given app .
13484	Normalize a postcode middleware .
13485	Returns the next value .
13486	Accept a system .
13487	Accept a C - C string .
13488	Accept a PE - PKG string .
13489	Get the brightness of the image .
13490	Matches the value with the given arguments .
13491	Find a match in the document at the given position .
13492	Returns a selection for the character at the given position .
13493	Changes the cursor position .
13494	Return the exception information .
13495	Create an inputhook for Qt4 .
13496	Get a mapper by name .
13497	Decorator to add a function to the URL .
13498	Decorator to add a function to a URL .
13499	Add a pattern to the data store .
13500	Add a function to a file or directory .
13501	Make a call to a URL .
13502	Executes the given source .
13503	Return True if the cursor is uppressed False otherwise .
13504	Returns True if the cursor is downpressed .
13505	Returns the history of the previous edit .
13506	Returns the next edit in the history .
13507	Handle an ExecuteReply request .
13508	Returns True if history is locked False otherwise .
13509	Returns the edited history for the given index .
13510	Set the history .
13511	Store the current edits in the input buffer .
13512	Called when the timer closes .
13513	Build a record collection from a DataFrame .
13514	Convert a collection to a DataFrame .
13515	Convert a DataFrame to a DataFrame using a spin method .
13516	Set the attributes of this object .
13517	Subscribe to all topics .
13518	Log a message .
13519	Merge a list of lists into a single list .
13520	Iterate over a reference in a remote view .
13521	Convert a notebook to this notebook format .
13522	Returns the supported macOS platform .
13523	Get an importer for a path item .
13524	Returns a cStringIO object .
13525	Parse a version string .
13526	Return True if setuptools should be overridden .
13527	Add a dist to the list of entries .
13528	Find plugins for a given plugin_env .
13529	Returns the path to the cached files .
13530	Parse src into a Requirement object .
13531	Returns the parsed PKG_INFO .
13532	Compute the dependencies of this package .
13533	Parse a filename .
13534	Collapse leading ws into a single string .
13535	Hide the current cursor position .
13536	Shows an event to the user .
13537	Returns the current text cursor .
13538	Update the current text cursor .
13539	Registers an admin site .
13540	Returns a list of all disk partitions .
13541	Returns a tuple of the CPU times for the specified user and system .
13542	Returns a list of system CPU times per user .
13543	Read a non - block file from stdin .
13544	Read a raw block from stdin .
13545	Update the tab bar visibility .
13546	Create a new tab with the current kernel .
13547	Add a tab with the given frontend .
13548	Add an action to a menu .
13549	Creates a new DynamicMagic with the given magic .
13550	Populates the all_magic_menu .
13551	Closes the console .
13552	Generate a random password .
13553	Check if a hashed passphrase is valid .
13554	Create an editable boolean cell .
13555	Return an indented short title for the given item .
13556	Collect editable booleans .
13557	Toggles the value of a boolean .
13558	Check if user has permission to change object .
13559	Check if user has permission to delete object .
13560	Add n children to a graph .
13561	Create a bintree with the given levels .
13562	Submit a list of jobs to the view .
13563	Validate a tree .
13564	Make a color table .
13565	Return a copy of this ColorScheme .
13566	Adds a ColorScheme instance to the table .
13567	Set the active color scheme .
13568	Return the path to the home library .
13569	Handle IOpub messages .
13570	Handle a STDIN request .
13571	Wait for the kernel to be running .
13572	Set the style .
13573	Returns the format for the given token .
13574	Returns the formatted text of the given document .
13575	Returns a QTextCharFormat for the given style .
13576	Find a command in the environment .
13577	Normalize a path .
13578	Check if nsp is a package namespace .
13579	Check if entry points are valid .
13580	Check if the last blank line is a string .
13581	Return True if src is the last two blank lines .
13582	Transforms a line from _assign_system_re to _assign_system_re
13583	Transform an assignment magic line into a python magic line .
13584	Transforms a line of a classic prompt into a list of strings .
13585	Transform an IPython prompt into a list of strings .
13586	Push a list of lines to the input .
13587	Returns True if there are more accepts .
13588	Find the indentation space for a given line .
13589	Store a list of lines in a buffer .
13590	Reset the source to its raw state .
13591	Handle the cell magic .
13592	Append a list of lines to the cell in line mode .
13593	Transform a cell .
13594	Push a list of lines to IPython .
13595	Initialize observers .
13596	Post a notification to all observers .
13597	Return a set of observers for a notification .
13598	Add an observer .
13599	Create a new BackgroundJobFunc .
13600	Update the status of all running jobs .
13601	Print the list of jobs in a group .
13602	Flushes a group .
13603	Get a new status .
13604	Update the status of the group .
13605	Initialize the background job .
13606	Insert a new value at idx .
13607	Return a copy of this object .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the canonicalized path to the given value .
13612	Move the current state to a new state .
13613	Returns the energy of a city .
13614	Returns a dictionary with the default values for the given keys .
13615	Check if the PRAGMA table is valid .
13616	Convert a list to a dictionary .
13617	Render an expression .
13618	Print a warning message to stderr .
13619	Parse a YAML configuration file .
13620	Returns a string representation of a table .
13621	Create a link to a URL .
13622	Return the javascript file for a given URL .
13623	Return a CSS file for a given URL .
13624	Generate an image from a URL .
13625	Subtract a numeric value from a string .
13626	Multiplies the given value with the given argument .
13627	Convert a numeric value to a numeric value .
13628	Validate that the given value is a numeric value .
13629	Returns the verbose name of obj .
13630	Split a user input line .
13631	Add options to the parser .
13632	Add a builtin .
13633	Remove a builtin .
13634	Deactivate all builtins .
13635	Find the url name of a requirement .
13636	Returns a generator that yields explicit links to the given rels .
13637	Removes the shell list from a string .
13638	Entry point for the Coverage script .
13639	Add an action to a dash .
13640	Append an action to the options parser .
13641	Run a command on the command line .
13642	Print a help message to the user .
13643	Returns a boolean indicating if a help command is available .
13644	Check if args are allowed .
13645	Execute a python module or file .
13646	Help function for debugging .
13647	Unserialize an object .
13648	Set the display hook .
13649	Log uncaught exceptions .
13650	Returns True if the given URL is a valid URL .
13651	Validate a URL .
13652	Validate a url container .
13653	Convert a list of keys to a list of dicts .
13654	Returns a list of random ports .
13655	Decorator to create a remote function .
13656	Creates a ParallelFunction for parallelizing a view .
13657	Map a sequence of sequences .
13658	Returns a list of n items from the current readline .
13659	Set the auto - indent feature .
13660	Initializes the logstart method .
13661	Saves the sys . modules state .
13662	Restore sys . modules to its original state .
13663	Register a post - execution function .
13664	Create a new main module .
13665	Create a copy of a file in the main cache .
13666	Initialize the user namespace .
13667	Returns a list of all user NS references .
13668	Reset the history manager .
13669	Delete a variable .
13670	Reset all nested references to their default values .
13671	Push a list of variables to the API .
13672	Returns a dictionary of aliases for the given oname .
13673	Return a Struct representation of the given oname .
13674	Returns a Struct for the given oname .
13675	Returns True if object is found False otherwise .
13676	Initialize the history manager .
13677	Show a traceback for an exception .
13678	Show the full traceback .
13679	Print a traceback .
13680	Show a SyntaxError traceback .
13681	Pre - readline method .
13682	Complete a line of text .
13683	Set a custom completer .
13684	Set the completer namespace and global namespace .
13685	Run a line magic on a line .
13686	Find a magic by name .
13687	Defines an IPython macro .
13688	Execute a command on the system .
13689	Auto - rewrite input .
13690	Returns a dictionary of user - defined variables .
13691	Returns a dictionary of user expressions .
13692	Evaluate an expression .
13693	Safely execute an IPython file .
13694	Run a cached magic on a cell .
13695	Runs a single cell .
13696	Run AST nodes .
13697	Enable pylab .
13698	Expand a variable .
13699	Create a temporary file .
13700	Extract a range of lines from the history .
13701	Find the user code for a given target .
13702	Ends the current session and unlinks all temporary files .
13703	Broadcast a message .
13704	Send a message to a list of targets .
13705	Decorator to raise a SkipTest exception if a test condition is met .
13706	Decorator to raise a KnownFailureTest if the test fails .
13707	Decorator to mark functions as deprecated .
13708	List all profiles in a directory .
13709	Return a list of bundled profiles .
13710	Find a version that matches req .
13711	Run a command .
13712	Returns the filename of the given filename .
13713	Read the next line from the stream .
13714	Send a string to the server .
13715	Integer sender .
13716	Recompile unicode regexes as bytes regexes . Overridden in subclass .
13717	Expect a pattern .
13718	Expects a searcher to run in a loop .
13719	Recompile bytes regexes as unicode regexes .
13720	Searches the given buffer for the best match .
13721	Searches the given buffer for matches and returns the index of the best match .
13722	Create a listener for logging .
13723	Unpack a directory .
13724	Emit a message to stdout .
13725	Return the last error in the log .
13726	Check the output of a command .
13727	Find the source for a given filename .
13728	Returns a list of arcs that have been executed .
13729	Returns a list of all arcs that are missing .
13730	Returns a list of all unpredicted arcs .
13731	Returns a list of all the branch lines .
13732	Returns the total number of branches .
13733	Returns the list of branch arcs that are missing .
13734	Returns a dict of branch stats .
13735	Sets the precision .
13736	Returns the percentage of covered states .
13737	Returns a string representation of the covered pixels .
13738	Highlight text in a haystack .
13739	Highlight a string with the given keywords .
13740	Highlight words in a string .
13741	Runs a function on the object .
13742	Unquote the end of a string .
13743	Indent a string .
13744	Return a marquee .
13745	Format a screen string .
13746	Dedent a string .
13747	Return a list of paragraphs wrapped in text .
13748	Finds the optimal value for a list of rows .
13749	Get a value from a list or return default if it doesn t exist .
13750	Compute the item matrix from a list of items .
13751	Return a list of SList objects with the given fields .
13752	Build the kernel argv .
13753	Initialize ssh connection .
13754	Pretty print an object .
13755	Pretty print an object .
13756	Get the mro of an object .
13757	Returns a pretty print of obj .
13758	Generate a pprinter for a sequence of sequences .
13759	Create a pretty printer for a dict .
13760	Print a pretty - printed version of an object .
13761	Compile a re pattern into a pprint .
13762	Print pprint to obj .
13763	Print a function to pprint .
13764	Print an exception to stdout .
13765	Return a function for a given type .
13766	Return a pprinter for a type with the given name .
13767	Write obj to the output buffer .
13768	Write a breakable line to the output buffer .
13769	End a group .
13770	Flushes all buffered data .
13771	Return a pretty representation of the given object .
13772	Add exception colors to TermColors .
13773	Write row into ods . content .
13774	Get text from the clipboard .
13775	Get the clipboard output .
13776	Get text from the clipboard .
13777	Get the build prefix .
13778	Rekey a dictionary .
13779	Extract datetimes from obj .
13780	Squash all datetimes in obj .
13781	Convert a datetime object to a datetime object .
13782	Convert obj to a JSON string .
13783	Check if the install_dir is a site directory .
13784	Write a script to a directory .
13785	Sleep here for a given time .
13786	Create a new ArgumentParser .
13787	convert . pyx extensions to . c
13788	Main entry point for zmq .
13789	Build a PackageFinder object .
13790	Called when the logging level has changed .
13791	Returns the default log handler .
13792	Called when flags have changed .
13793	Print help for aliases .
13794	Print help for all flags .
13795	Print the subcommands .
13796	Print a help message to the user .
13797	Print examples .
13798	Update the config with the given config .
13799	Initialize a subcommand .
13800	Returns a flattened representation of the flags .
13801	Parse a command line .
13802	Load a config file .
13803	Generate a config file .
13804	Downsample an array to a k - sized sample .
13805	Returns a formatter that yields labels and data .
13806	Write a message to the output stream .
13807	Called when a config has changed .
13808	Returns a help string for the class .
13809	Returns a help message for the given trait .
13810	Create a section for a class s configuration .
13811	Clears the instance of cls .
13812	Create an instance of this class .
13813	Formats a failure as a string .
13814	Print a traceback to IPython . core . interactiveshell .
13815	Flushes the socket channel .
13816	Override start_channels to emit started messages .
13817	Read data from file - like object .
13818	Returns the contents of p with no interrupt .
13819	Execute a command and return a callback .
13820	Split an argument into a list of tokens .
13821	Compress a dhist into a new set .
13822	Create a magics class .
13823	Record a function as a magic .
13824	Mark a method as a magic .
13825	Decorator to mark a function as a magic .
13826	Returns a dictionary of lsmagic docstrings .
13827	Register a list of magic objects .
13828	Register a magic function .
13829	Format a LaTeX string .
13830	Parse the options table .
13831	Add a magic function to the options table .
13832	Returns a page with a gui_reference .
13833	Create a task with the given callable .
13834	Get information about a task with a given label .
13835	Get the callable from the info dict .
13836	Calculate the next run .
13837	Submit a request to the Run Task Channel .
13838	Send a message to the task .
13839	Run the calculation asap .
13840	Run a task in iterations .
13841	Run the callable only once .
13842	Find the url file in the security directory .
13843	Bind an IPython kernel to the engine .
13844	Reads a test file and timidizes it .
13845	Create an interrupt event .
13846	Run the process .
13847	Filter a list of objects by name and type .
13848	List all names in a namespace .
13849	Raise a ValueError if the arguments are mutually exclusive .
13850	Draw a figure if it is interactive .
13851	Flush all active figures .
13852	Send a figure to the backend .
13853	Load an IPython extension .
13854	Unload an ipython extension .
13855	Generate n random ports .
13856	Initialize the web application .
13857	Handle a SIGINT signal .
13858	Shutdown the notebook server .
13859	Shut down all the kernels .
13860	Generates a list of stock price options .
13861	Replace multiple elements of text in a dictionary .
13862	Render a color scheme .
13863	base_launch_kernel is a wrapper around pythonw .
13864	Create a new zipfile in the working directory .
13865	Fix the version of the metadata . txt .
13866	Returns True if obj is mappable .
13867	Get a partition of a sequence .
13868	Patch pexpect with monkeypatch .
13869	Run a file and return the output .
13870	Run a source command .
13871	Generate a report of the coverage .
13872	Create an XML file for the given analysis .
13873	Fetch a pi200m file .
13874	Reduce a frequency list to a list of frequencies .
13875	Compute the frequency of a given number of digits in a file .
13876	Convert a txt file to digits .
13877	Given a list of digits return the frequency of each digit .
13878	Compute the frequency of two digits .
13879	Compute the frequency of a number of digits .
13880	Plot two - digit frequency distributions .
13881	Plot one digit counts in f1 .
13882	Print a debug message .
13883	Reverse a URL .
13884	Check if a prefix is private .
13885	Returns a unittest . TestSuite for a list of DocFile paths .
13886	Debug a source code .
13887	Debug a test script . src is the script as a string .
13888	Run a debug script on a module .
13889	Return a dict of hashes .
13890	Compress a hashroot .
13891	Returns a list of all files in the directory .
13892	Allow or deny a record .
13893	Returns True if the record matches any of the given matchers .
13894	Return a formatted error message .
13895	Embed a terminal interactive shell .
13896	Returns a DummyMod object for the mainloop .
13897	Helper function to get new csv writers .
13898	Given a list of languages and a locale root create a directory for them .
13899	Write entries to PO files .
13900	Write a header to a POST file .
13901	Subscribe a user .
13902	Initialize the option parser .
13903	Run a python module .
13904	Run a python file .
13905	Make code from a python file .
13906	Create a code object from a . pyc file .
13907	Convert a list of item_matrix to an HTML table .
13908	Set the current position .
13909	Cancels the completion of the tab .
13910	Select the index of a row or column .
13911	Move the cursor up one row .
13912	Selects the first element down from the list .
13913	Selects the left element of the list .
13914	Move the cursor to the right .
13915	Updates the current list .
13916	Get the frequency of each word in a text file .
13917	Print word frequency n times .
13918	Convert the XML to a string .
13919	Write to a file .
13920	Validate a pin .
13921	Send a shared pin to a user .
13922	Deletes a shared pin .
13923	Send a pin to a user .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List all subscriptions for a user .
13927	Decorator to mark a function as monitored .
13928	Begin monitoring progress .
13929	Perform a task .
13930	Iterate over submonitor units .
13931	Call progressmonitor . update .
13932	Add a submonitor to the progress monitor .
13933	Called when the job is done .
13934	Publish a string to the pager .
13935	Corrects the location of the build directory .
13936	Load a list of pyconfig files into a Config object .
13937	Load the config file .
13938	Load a python config file as a dict .
13939	Load the flag from the config file .
13940	Decode a list of unicode strings .
13941	Load IPython configuration .
13942	Load the config from the command line .
13943	Parse command line arguments .
13944	Convert to a config file .
13945	Find a module by name or path .
13946	Send a stop callback .
13947	Called when the process is started .
13948	Called when a process is stopped .
13949	Interrupt the process and then kill it .
13950	Returns a list of command - line arguments .
13951	Start the MPILauncher .
13952	Send a file to the remote .
13953	Fetch a file from a remote host
13954	Return the number of engines .
13955	Start one or more engines .
13956	Start a new HPC job .
13957	Return the default context for this cluster .
13958	Parse a job id output .
13959	Write a batch script to the file .
13960	Start a batch of scripts .
13961	Create a context menu .
13962	Append a new jpg .
13963	Append a custom PNG to the input .
13964	Appends a new svg to the prompt .
13965	Add an image to the document .
13966	Copy an image to the clipboard .
13967	Returns a QTextDocument with the given name .
13968	Insert an image to the cursor .
13969	Insert svg data into cursor .
13970	Save an image .
13971	Exit if the IOLoop has changed .
13972	Initialize environment variables .
13973	Auto - rewrite input .
13974	Ask the user to exit .
13975	Sets the next input of the interactive shell .
13976	Read a config file .
13977	Returns a list of values for the given section and option .
13978	Return a list of lines for the given section and option .
13979	Create a timid object from an environment variable .
13980	Create a new object from a list of arguments .
13981	Load a HandyConfig from a file .
13982	Set an attribute from a config option .
13983	Expand the user of a path .
13984	Compile a list of delimiters .
13985	Split a line into multiple lines .
13986	Returns a list of global keywords that match the given text .
13987	Returns a list of objects that match the given text .
13988	Called when a greedy variable is changed .
13989	Returns a list of files that match the given text .
13990	Returns a list of aliases for the given text .
13991	Returns a list of python names that match the given text .
13992	Return a list of default arguments for obj .
13993	Complete a line of text .
13994	Complete a line of text .
13995	Returns True if a key matches one of the tests .
13996	Returns a list of all records that match the given check .
13997	Extract a subdict from a message .
13998	Returns True if the prompt has been quieted .
13999	Writes the output prompt to the console .
14000	Write format data to stdout .
14001	Logs the output to the logger .
14002	Raise InvalidOperationException if the object is frozen .
14003	Convert a string to a Timestamp .
14004	Called when an event loop is changed .
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the shell .
14008	Performs one iteration of zmq .
14009	Publish a pyin topic .
14010	Send an aborted request to the server .
14011	Clear a request .
14012	Convert a topic to a byte string .
14013	Send a shutdown message to the server .
14014	Add the module stack before the context .
14015	Remove all modules from sys . modules .
14016	Returns the absolute path of a directory .
14017	Check if a file exists or ends with . py .
14018	Check if an object is a class .
14019	Returns True if the given path is a package .
14020	Get a package from a . py file .
14021	Return the length of a label .
14022	Return the last key of a regex .
14023	Transplant a function to a given module .
14024	Transplant a class from a module to a class .
14025	Get system CPU times .
14026	Returns the process s current command line .
14027	Returns a list of open files for this process .
14028	Returns a list of all connected processes .
14029	Check if a user has a group .
14030	Resolve a class from a path .
14031	Calculate usage percentage .
14032	Memoize a function .
14033	Decorator to mark functions as deprecated .
14034	Login to PODocs .
14035	Get the gdocs key .
14036	Ensures that the temporary path exists .
14037	Clear all temporary files .
14038	Upload a file to the GDocs server .
14039	Downloads and synchronizes the data from Gdocs .
14040	Download the csv and meta data from Gdocs .
14041	Upload a PO document to the local ODS .
14042	Clears the empty . csv file
14043	Create a new Qt console .
14044	Check if a URL is accessible from this machine .
14045	Check if a URL has the given contents .
14046	Get the response code for a given URL .
14047	Compare the content type of a URL .
14048	Compare the response code of a URL to a given code .
14049	Validate data .
14050	Clear stdout and stderr .
14051	Find the path to a command .
14052	Returns a list of CodeUnit objects from a list of Morf objects .
14053	Return a flattened version of the root name .
14054	Returns the source of the file .
14055	Return True if the file should be a python file .
14056	Returns the total number of seconds of a timedelta .
14057	Get a result from the server .
14058	Wait for the message to be ready .
14059	Returns a dict of all the jobs running on the given engine .
14060	Abort the request .
14061	Returns the number of seconds elapsed since the message was submitted .
14062	Wait for the task to finish .
14063	Republish a displaypub .
14064	Wait until all outputs are ready .
14065	Wait for the message to be ready .
14066	Return the absolute path of a file .
14067	Takes a list of patterns and returns a list of patterns .
14068	Return the sep of a string .
14069	Find all python files in a directory .
14070	Returns the relative filename of the given filename .
14071	Returns the canonical filename for the given filename .
14072	Get data from a zip file .
14073	Returns True if fpath matches the current directory .
14074	Returns True if fpath matches any of the pats .
14075	Map a path to a canonical filename .
14076	Loops over the kernel using Qt4 .
14077	A wrapper for the IPython wx loop .
14078	Loop over a Tk kernel .
14079	Loop over a gtk kernel .
14080	Loops over a Cocoa kernel .
14081	Enable a GUI .
14082	Computes the GOE for a given number of samples .
14083	Centered eigenvalue difference matrix .
14084	Returns the ensemble differences between num and N .
14085	Initialize a new step .
14086	Parse a YAML file .
14087	Parse a step configuration .
14088	Initializes the crash handler .
14089	Load a config file .
14090	Initializes the profile directory .
14091	Stage the default config file .
14092	Write the file to disk .
14093	Erases the file .
14094	Return the line data as a dict .
14095	Returns a dict of the arc data .
14096	Write data to a file .
14097	Read a file .
14098	Read data from a file .
14099	Read lines and arcs from a file .
14100	Combine parallel data into a single file .
14101	Add line data to the file .
14102	Add arc data .
14103	Add lines and arcs to the hash .
14104	Return a dict containing the summary of the file .
14105	Returns a list of lines that have been pasted .
14106	Main loop for the mainloop .
14107	Replace a multiline history cell with a multiline history cell .
14108	Prompt the user for raw input .
14109	Edits a syntax error .
14110	Check if e should be recompiled .
14111	Asks the user to exit .
14112	Returns the revision of the url .
14113	Create a new widget for the frontend .
14114	Initialize the colors for a widget .
14115	Returns a tuple of identity pub_url and location
14116	Convert a Robj object to a numpy array .
14117	Find the source code for the given object .
14118	Set active colors .
14119	Toggles the active color scheme .
14120	Convert a traceback to text .
14121	Returns a string describing the traceback of the most recent call .
14122	Format a list of colors .
14123	Formats an exception only value .
14124	Show an exception only message .
14125	Debugger for the current color scheme .
14126	Set the mode of the formatted TB .
14127	Decorator to check if a user is a member of a group .
14128	Ensure that a module is from a list .
14129	Add a line to the code .
14130	Add a section to the code .
14131	Get a function by name .
14132	Returns the code for the given expression .
14133	Renders the object with the given context .
14134	Add dots to a value .
14135	Render a template .
14136	Returns a dictionary containing the default formatters .
14137	Return a function for a given type .
14138	Return a deferred printer for the given type_module and type_name .
14139	Change the precision of a float .
14140	Return a list of user config files .
14141	Configure the python environment .
14142	Configure the logging configuration .
14143	Configure the working directory based on where .
14144	Print a single page of text .
14145	Print a string .
14146	Show a page of a file .
14147	Returns the pager command .
14148	Get the start of a pager .
14149	Print a snippet of a string .
14150	Print basic unicode text .
14151	Convert an object to a png .
14152	Prints an object as a PNG .
14153	Returns True if o can be printed in LaTeX .
14154	Return a latex representation of o .
14155	Add options to the plugin .
14156	Validate a list of strings .
14157	Validate that a dictionary is a string .
14158	Run the ioloop loop .
14159	Handle a request .
14160	Executes the given code .
14161	Complete a request .
14162	Get information about an object .
14163	Send a history request to the server .
14164	Shutdown the server .
14165	Flushes the buffer .
14166	Reply to the user s input .
14167	Start all channels .
14168	Stop all channels .
14169	Returns True if any of the channels are running .
14170	Load the connection file .
14171	Write a connection file .
14172	Launch a kernel on a local interface .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kills the kernel .
14176	Interrupts the kernel .
14177	Signals the kernel to be running .
14178	Returns True if the kernel is alive .
14179	Get the shell channel .
14180	Get the sub - channel .
14181	Access the hb_channel
14182	Bind an IPEngineApp to an IPEngineApp instance .
14183	Print a debug message .
14184	Returns a dict of namespace extension classes .
14185	Check if a step should be skipped .
14186	Post a step .
14187	Finalize the extension .
14188	Returns a generator yielding all BDF files in egg_dir .
14189	Scan a module for stubs .
14190	Launch a new IPControllerApp instance .
14191	Save a connection dictionary to a file .
14192	Load the connection info from a JSON file
14193	Load secondary config from JSON .
14194	Execute a single cell in parallel .
14195	Enable autopx .
14196	Disable autopx .
14197	Run a pxfile cell .
14198	Run a heartbeat .
14199	Run a task .
14200	Remove a task from a message .
14201	Patch a protocol for a given agent .
14202	Patches an attribute if it is missing .
14203	Accepts a connection to the server .
14204	Reject the connection for the given reason .
14205	Returns a ProxyAgent with context .
14206	Check if the given form is valid .
14207	Performs a DELETE request .
14208	Override pre_save to make sure the user is authenticated .
14209	Generates a report for the given Morfs .
14210	Check if the module is enabled or not .
14211	Create an editor for the given filename .
14212	Fix an editor error .
14213	Get the clipboard .
14214	Add a function to the chain .
14215	Get the metadata for a given path or module .
14216	Configures the config .
14217	Import a module .
14218	Try passwordless ssh .
14219	Try to openssh with a passwordless keyfile .
14220	Try to connect to a paramiko server using a keyfile .
14221	Create a tunnel connection to a server .
14222	Open an openssh tunnel .
14223	Stop scheduling tasks .
14224	Unwrap an exception and return it .
14225	Register an engine in the queue .
14226	Unregister an engine .
14227	Handle a reply .
14228	Flushes all notifications .
14229	Flushes the results from the socket .
14230	Flushes control messages from a socket .
14231	Flushes the ignored control socket .
14232	Flushes an IoPub message .
14233	Spin the machine every interval seconds .
14234	Stops the spin thread .
14235	Returns a tuple containing the current state of the connection .
14236	Wait for a list of jobs to finish .
14237	Applies a function to a socket .
14238	Executes a request on the specified socket .
14239	Get the result of a search .
14240	Sends a queue_request and returns the status of the request .
14241	Purge results from a list of targets .
14242	Send a history request to the hub .
14243	Send a query to the database .
14244	Return a set of opcodes .
14245	Returns a ByteParser instance .
14246	Returns a set of lines matching a set of regexes .
14247	Parse the text and generate tokens .
14248	Returns the first line of a multiline .
14249	Return a list of the first lines in a list of lines .
14250	Parse the source code .
14251	Returns a list of all arcs in the byte stream .
14252	Returns a dict of the number of exclusion lines .
14253	Returns a list of all child parsers of this object .
14254	Returns a generator that yields a tuple of bytes and lines .
14255	Returns a generator yielding all the statements in the parser .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Validate a list of chunks .
14259	Returns a generator yielding arcs .
14260	Returns a list of all child parsers .
14261	Returns a set of all arcs of all child parsers .
14262	Add coverage options to the parser .
14263	Starts the coverage .
14264	Generate coverage report .
14265	Returns True if the given file is a want file .
14266	Convert a basename to a distribution name .
14267	Open a URL with authentication .
14268	Fetch a distribution for a requirement .
14269	Returns the parent of the given object .
14270	Return the engine s root topic .
14271	Render a template .
14272	Configure the capture .
14273	Formats an error as a tuple .
14274	Split data by num .
14275	Convert a notebook from v2 to v3
14276	Convert hex color to rgb color .
14277	Returns a dict of colors for a given style name .
14278	Returns a QFont object for the given family .
14279	Handle an IPython response .
14280	Handle a history reply .
14281	Handle a pyout message .
14282	Handle a display data message .
14283	This method is called when the IPythonWidget is started .
14284	Execute a file .
14285	Process an error message .
14286	Process a payload .
14287	Sets the default style .
14288	Edit a file .
14289	Make an in - prompt string .
14290	Returns a string representing a continuation prompt .
14291	Called when the style sheet has changed .
14292	Called when the syntax style has changed .
14293	Handle a CloudStack client response .
14294	Generate a signature for a URL .
14295	Transform a dictionary into a dict .
14296	Returns a dictionary of information about the virtual memory .
14297	Get system CPU times .
14298	Returns a list of process uids .
14299	Returns a list of process gids .
14300	Returns a list of all threads in the process .
14301	Returns a list of open files for this process .
14302	Return the hash of a package s commit .
14303	Return information about a package .
14304	Return sys . txt information about the package .
14305	Return the number of CPUs .
14306	Return the number of CPUs on the system .
14307	Get the next set of results from the database .
14308	Fetch one row from the database .
14309	Fetch multiple rows from the database .
14310	Fetch all rows .
14311	Connect to a peer .
14312	Parse a JSON string into a Notebook object .
14313	Parse a python file into a notebook .
14314	Return a list of reads from a string .
14315	Writes an NB object to a given format .
14316	Write data to a file - like object .
14317	Convert all . ipynb files to metadata .
14318	Load a value from a dictionary .
14319	Returns True if the given name matches the criteria .
14320	Determines if cls is wanted by the plugins .
14321	Returns a boolean indicating whether or not the directory is wanted .
14322	Returns True if the given file is wanted by the plugin .
14323	Returns True if the function is wanted False otherwise .
14324	Returns True if the given method is wanted by the plugin .
14325	Returns a boolean indicating whether the given module is wanted .
14326	Read lines from a file .
14327	List a command in the pydb .
14328	Print a list of lines .
14329	Perform a pdef command .
14330	Convert from_symbol to to_symbol on date
14331	Convert currency from one symbol to another .
14332	Compute the currency return between start_date and end_date .
14333	Return the encoding of a stream .
14334	Return the default encoding .
14335	Write the connection file .
14336	Initializes the heartbeat .
14337	Log information about the connection .
14338	Initialize the session .
14339	Initialize the IO API .
14340	Initialize the kernel .
14341	Initialize the SSH connection .
14342	Register with the controller .
14343	Convert html content to text .
14344	Convert Markdown to text .
14345	Convert a domain to a FQDN .
14346	Add options to the NoseExclude parser
14347	Configure the NoseExclude .
14348	Determine if a directory should be excluded .
14349	Return a boolean indicating if the given extension is a dynamic library .
14350	Call a list of functions and return the result .
14351	Call each function in a list of functions and return the result .
14352	Append a function to the list .
14353	Insert a function at the given index .
14354	Format a usage message .
14355	Initialize the application .
14356	Write the pid file for this server .
14357	Remove the pid file .
14358	Get the PID from a file .
14359	Constructs a parser for the given magic function .
14360	Return the real name of a magic function .
14361	Highlights a block of text .
14362	Re - highlights a block .
14363	Set the format of the current highlighter .
14364	Make a copy of this widget .
14365	Execute a message .
14366	Prompt the reader to finish highlighting .
14367	Check if the tab has been pressed .
14368	Create a context menu at the given position .
14369	Called when a console key is pressed .
14370	Inserts a continuation prompt at the cursor .
14371	Handle a complete reply .
14372	Execute a command with a callback .
14373	Handle a callback message .
14374	Handle a response from the server .
14375	Handle an input request .
14376	Emits a message when the kernel has died .
14377	Handle an object info reply .
14378	Handle a pyout message .
14379	Handle a stream .
14380	Handle a shutdown reply .
14381	Executes a file at the specified path .
14382	Interrupts the current kernel process .
14383	Reset the cursor position .
14384	Restart the kernel .
14385	Handle a calltip request .
14386	Called when the shell is complete .
14387	Process an error message .
14388	Process an OK message .
14389	Change the contents of a document .
14390	Add a plugin .
14391	Returns a list of static arguments .
14392	Generate a list of plugins .
14393	Return a list of simple plugins .
14394	Configure the plugins .
14395	Load plugins from pkg_resources .
14396	Load plugins from nose . plugins .
14397	Convert a latex string to a png .
14398	Convert a latex string to HTML .
14399	Convert math text to a matplotlib figure .
14400	Check if the package exists .
14401	Iterate over processes .
14402	Calculate the percentage of CPU usage .
14403	Return a dict representation of this instance .
14404	Return the name of the process .
14405	Return the process s executable .
14406	Returns a list of all children of this process .
14407	Returns the CPU percentage of the current process .
14408	Returns the memory percentage of the device .
14409	Returns a list of memory maps .
14410	Returns True if the process is running .
14411	Suspend the process .
14412	Resumes the current process .
14413	Kill the process .
14414	Wait for a process to complete .
14415	Wire the kernel to the gobject .
14416	Hijack gtk .
14417	Returns True if identifier is shadowed by ip .
14418	Initialize transformers .
14419	Register a transformer .
14420	Unregisters a transformer .
14421	Initialize the checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize the handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Return a handler for the given line_info .
14428	Find the handler for the given line_info .
14429	Transform a line .
14430	Pre - filter a line .
14431	Pre - filter a list of lines .
14432	Instances of IPyAutocall in user_ns get autocalled immediately
14433	Allow and !! in multi - line statements if multi - line_specials is on
14434	Check if the given line_info is a pre - filter .
14435	Check if the initital identifier on the line is an alias .
14436	Handle the given line_info .
14437	Handle an IPython line .
14438	Handle the given line_info .
14439	Handle an IPython line .
14440	Handle an IPython line .
14441	Handle the given line_info .
14442	Filter an event .
14443	Override enterEvent to stop the timer .
14444	Adds an event to the widget .
14445	Show information about a call .
14446	Show a text tip .
14447	Called when the cursor is changed .
14448	Creates a property that proxies a local attribute to a doc .
14449	Convert a path to a canonical path .
14450	Validate a JSON schema .
14451	Returns a masked version of this object .
14452	Check if virtualenv has no global site packages .
14453	pwordfreq - pwordfreq - pwordfreq - pwordfreq
14454	Returns a decorator for a view function .
14455	Return a list of default aliases .
14456	Soft - define an alias .
14457	Define an alias for a command .
14458	Validate an alias command .
14459	Call an alias .
14460	Transform an alias into a string .
14461	Expand an alias .
14462	Generates the autohelp directive .
14463	Reset the sgr value .
14464	Split a string into a list of BeepAction objects .
14465	Get a color from the color map .
14466	Returns a QTextCharFormat for this character .
14467	Generate a JWT .
14468	Decorator for mutexing a function .
14469	Remove jwts that are older than 2 .
14470	Returns True if the given tok is already used .
14471	Validate a JWT .
14472	Returns a semaphore .
14473	Return the common prefix for a list of items .
14474	Called when the user presses a key .
14475	Returns a QtCore . sizeHint object representing the size of the document .
14476	Returns True if the cursor can be cut .
14477	Check if the user can paste text to the clipboard .
14478	Clears the input buffer .
14479	Remove selected text from the cursor .
14480	Executes the given source .
14481	Returns the input buffer .
14482	Sets the input buffer .
14483	Sets the font for this tab .
14484	Paste text into the clipboard .
14485	Prints to the specified printer .
14486	Prompt the user to move to the top of the screen .
14487	Resets the font .
14488	Append input to the current cursor .
14489	Appends an html string to the end of the page .
14490	Appends a custom html_fetching_plain_text .
14491	Appends plain text to the input .
14492	Clears the temporary buffer .
14493	Completes the text with the given items .
14494	Fills the temporary buffer with text .
14495	Returns a boolean indicating whether a control key is down .
14496	Creates the control object .
14497	Create the page control .
14498	Called when a page key is pressed .
14499	Returns the plain text of a block .
14500	Returns the cursor to the end of the text .
14501	Returns the column number of the input buffer cursor .
14502	Get input buffer cursor line .
14503	Returns the prompt cursor .
14504	Returns the selection cursor .
14505	Inserts a continuation prompt .
14506	Inserts html into cursor .
14507	Inserts html and returns plain text .
14508	Insert text at cursor .
14509	Keep cursor in buffer .
14510	Quits the keyboard .
14511	Print a single page of text .
14512	Starts the prompt .
14513	Read a line of text .
14514	Sets the continuation prompt .
14515	Sets the cursor to the top of the screen .
14516	Show a prompt to the user .
14517	Adjust the scrollbars .
14518	Parse the command line arguments and return a formatter .
14519	Copy a config file to a new location .
14520	Create a profile directory by name .
14521	Find a profile directory by name .
14522	Convert a cmp= function into a key = function
14523	Read the contents of a file .
14524	Returns a list of raw input lines .
14525	Create a temporary python file and return its contents .
14526	Close the file .
14527	Write data to the file .
14528	Add a new heartbeat handler .
14529	Add a new heart failure handler .
14530	a heart just beat
14531	Return a list of sequences in batches of batch_size .
14532	Convert a path to a filename .
14533	Iterate over all files and subdirectories in a directory .
14534	Display all elapsed seconds .
14535	Returns a time unit based on elapsed time .
14536	Extract a WinInst configuration file .
14537	Uncaches a zip directory .
14538	Convert a string to a numpy string .
14539	Check if there are any conflicts in dist .
14540	Set fetcher options .
14541	Create the home directory .
14542	Check if a file is an archive file .
14543	Make an object mutable .
14544	Creates a ReadonlyProxy for the given object .
14545	Create a new heading cell .
14546	Create a new metadata node .
14547	Create a new author .
14548	Return True if path is a writable directory .
14549	Unquote a filename .
14550	Returns the path to a . py file .
14551	Find a file in the search paths .
14552	Returns the IPython home directory .
14553	Return the XDG_CONFIG_HOME or XDG_CONFIG_CONFIG_CONFIG_CONFIG_HOME .
14554	Returns the IPython directory .
14555	Returns the IPython package directory .
14556	Return the path to the IPython module .
14557	Returns 0 if target is older than deps .
14558	Return the hash of a file .
14559	Check for old IPython config files .
14560	Update the suggestions dictionary .
14561	Returns a list of suggestions with the given size .
14562	Return a list of suggestions for an object .
14563	Returns the relative path to this cwdu .
14564	Return a list of globs matching the given pattern .
14565	r Returns a list of lines from the file .
14566	Read a md5 file .
14567	Create the profile if it is not already available .
14568	Print profiler statistics .
14569	Finalize the stats file .
14570	Handle keyboard interrupts .
14571	Enables or disables wx .
14572	Disable WX .
14573	Disables QT4 .
14574	Enables the gtk interface .
14575	Enables or disables Tkinter .
14576	Enable pyglet .
14577	Wrapper around wave_saver .
14578	Initialize the database .
14579	Run a SQL query .
14580	Get information about a specific session .
14581	Returns the last n items in the queue .
14582	Get a range by its string representation .
14583	Returns the name of the histogram file for the given profile .
14584	Set the name of a session .
14585	Reset the cwdu to its original state .
14586	Get a range of lines from the input histogram .
14587	Store a line number in the output cache .
14588	Writes the history log to the database .
14589	Stops the process .
14590	Return the number of CPUs on the system .
14591	Get system per CPU times .
14592	Return a list of disk partitions .
14593	Return a list of the process pids .
14594	Return a nice string representation of a pair .
14595	Format a list of lines .
14596	Return a string representation of a stack .
14597	Decorator to add a cached attribute to a function .
14598	Join a list of regexes into a single string .
14599	Check if a file is gone .
14600	Update a dict or tuple .
14601	Update the cluster profiles .
14602	Start a cluster .
14603	Stop a cluster .
14604	Find a command in the environment .
14605	Print the system body .
14606	Find code units for a set of Morfs .
14607	Report a set of Morf files .
14608	Decorate a function to raise exceptions .
14609	Set stdout and stdout .
14610	Decorator to mark a function as timed .
14611	Load IPython extensions .
14612	Initializes the script .
14613	Run IPython code from exec_lines .
14614	Run all startup files in the profile_dir .
14615	Run all IPythonApp . execut_files
14616	Run code given at command line .
14617	Run the module if it is not already running .
14618	Generic function decorator .
14619	Return the filename of a static file .
14620	Read data from a file .
14621	Escape &lt; and &gt .
14622	Report the contents of the html file .
14623	Make the local static report files .
14624	Write html to a file .
14625	Returns the hash of a file .
14626	Write the index . html to the directory .
14627	Read a file from a directory .
14628	Write the coverage to a file .
14629	Return True if lst1 is equal to lst2 .
14630	Return a slice of a sequence .
14631	Crush a sequence into chunks of size .
14632	Read setup . cfg
14633	Read the contents of MANIFEST . in .
14634	Translate glob to regexp .
14635	Returns True if filename matches any of patterns .
14636	Returns a list of files that have been versioned .
14637	Start a kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Returns the kernel with the given id
14641	Get the ports of a kernel .
14642	Returns the notebook for the given kernel_id .
14643	Start a kernel for a notebook .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Create an Iopub stream for a kernel .
14648	Create a new shell stream for a given kernel .
14649	Create a mapping kernel stream .
14650	Resets the instance to its original state .
14651	Export an HTML document to a file .
14652	Export an XHTML document to a file .
14653	Ensure an image tag is UTF - 8 encoded .
14654	Fixes the html .
14655	Export the file .
14656	Returns a unique object or None if it does not exist .
14657	Returns a query that includes the fields in search_fields .
14658	Construct a text query from a query string .
14659	Returns a query to get a date greater than a given date field .
14660	Returns a query for a date without a date field .
14661	Get the null or blank query for a given field .
14662	Add case - insensitive fields to fields_dict .
14663	Add options to the parser .
14664	Validate a method s attrib .
14665	Returns True if we want the given method .
14666	Rotate the cursor to the left .
14667	Patch zmq . eventloop . ioloop . install .
14668	Create a parser from a WSDL schema .
14669	Returns the websocket URL .
14670	Reserialize a reply .
14671	Injects a Cookie . SimpleCookie into the request .
14672	Start the hb process .
14673	Start the hb_periodic_callback .
14674	Stops the hb stream .
14675	Load the file from the filesystem .
14676	Get the index of a block .
14677	Seek to the block at the given index .
14678	Edit the file at the specified index .
14679	Print the block at the specified index .
14680	Prints all the src_blocks .
14681	Execute a method on each subject in a collection .
14682	Create a batch from a collection .
14683	Run a function on a sequence of threads .
14684	Run a method on a collection of processes in parallel .
14685	Decorator to wrap a function with obj .
14686	Decorate a function with objattrs .
14687	Find the source of a tb file .
14688	Given a list of lines and a position return the list of inspectable lines .
14689	Display a progressbar with a countdown .
14690	Cleanup a list of engines .
14691	Returns the result of a pre - call .
14692	Return the result of a post - call .
14693	Save the message ids to the client s history .
14694	Synchronize the results of a function .
14695	Execute a function and return the result .
14696	Returns a list of messages .
14697	Gets a message if there is one that is ready .
14698	Decorator to mark a function as a property .
14699	Returns a tuple containing only the specified fields .
14700	Parse a URL into a config dictionary .
14701	Returns a list of all modules in a path .
14702	Get the list of installed root modules .
14703	Create a quick completion for a command .
14704	Returns a list of modules that have been imported .
14705	Return a list of python executables for a magic run .
14706	Returns a list of all bookmarks .
14707	Return a saxutils . quoteattr for the given attribute .
14708	Configure the plugin .
14709	Write a report to XML .
14710	Adds an error to the errorlist .
14711	Adds a failed test to the error list .
14712	Adds a test success message .
14713	Calculate the number of bins between two loads .
14714	Generates a random index based on the weights .
14715	Register an engine .
14716	Unregister an engine .
14717	Handle stranded tasks .
14718	Dispatch a message to the server .
14719	Check if any of the messages in the dependencies have timeouts .
14720	Fail msg_id if it is unreachable .
14721	Check if a job can be run .
14722	Save the unmet msg_id for the given job .
14723	Submit a task to the server .
14724	Dispatch the result of the task .
14725	Handle a result message .
14726	Handle unmet dependencies .
14727	Updates the graph for a given dependency .
14728	Starts the log file .
14729	Prints the current state of the logger .
14730	Log line_mod and line_ori .
14731	Write data to the log file .
14732	Stops the logging process .
14733	Create a new worksheet .
14734	Add a string to the chain .
14735	Add a regex to an object .
14736	Yields all the objects matching the given key .
14737	Returns a generator that yields all the flat matches of a key .
14738	Create a new notebook directory .
14739	Returns a list of notebooks .
14740	Create a new notebook id .
14741	Delete a notebook id .
14742	Check if a notebook exists .
14743	Find the path to a notebook .
14744	Returns the path to a file with the given name .
14745	Get information about a notebook .
14746	Get the metadata for a notebook .
14747	Save a new notebook .
14748	Save a notebook .
14749	Saves a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Return a list of phys tokens .
14754	Generate a list of token lines from a source file .
14755	Load the default config file .
14756	Returns a list of default interactive shell classes .
14757	Parse command line arguments .
14758	Initialize the TerminalIPythonApp .
14759	Initializes the terminal interactive shell instance .
14760	Initializes the banner .
14761	Return the repr type of an object .
14762	Parse a notifier name .
14763	Set the default value of obj .
14764	Handle a trait change .
14765	Returns the traits of a class .
14766	Returns the metadata for a trait .
14767	Validate that obj is a valid value .
14768	Returns the default value .
14769	Check if a task is completed or not .
14770	Returns True if the completion is unreachable .
14771	Return the dependency as a dict .
14772	Return the depth of a tree .
14773	Print a binary tree .
14774	Disambiguate a DNS URL .
14775	All - reduce a value .
14776	Validate a list of targets .
14777	Dispatch a monitor traffic message .
14778	Dispatch a query to the client .
14779	Handle a new heart .
14780	Handle a heart failure .
14781	Save a task request to the queue .
14782	Save a task result message .
14783	Save an IOPub message to the database .
14784	Send a connection request .
14785	Register an engine .
14786	Unregister an engine .
14787	Finishes a registration .
14788	Send a shutdown request .
14789	Purge results from the database .
14790	Extract a python record into a dictionary .
14791	Get the results for a given message .
14792	Get a client s history .
14793	Executes a query against the database .
14794	Change the current working directory .
14795	Decodes the output of a completed command .
14796	Run a command under root .
14797	Execute the script .
14798	Handle a message .
14799	Check if the message is from this session .
14800	Report annotated MRFs .
14801	Annotate a file with the given analysis .
14802	Get the installed version of apt - cache policy
14803	Squash unicode into unicode .
14804	Extract the header from a message .
14805	Check if the packers are valid .
14806	Create a new message .
14807	Sign a list of messages .
14808	Serialize a message .
14809	Send a message to a ZMQ stream .
14810	Send a list of msg_list to a stream .
14811	Receive messages from a socket .
14812	Feed idents into msg_list .
14813	Unserialize a list of messages .
14814	Save a string as an SVG document .
14815	Convert svg string to clipboard .
14816	Convert an SVG string to an image .
14817	Returns a dictionary of information about an object .
14818	Returns the docstring of the given object .
14819	Return the source of obj .
14820	Returns the argspec for the given object .
14821	Returns a call_line and docstring for the given oinfo .
14822	Find the filename of an object .
14823	Find the source lines of an object .
14824	Return the hdef of the given object .
14825	Returns a string representation of a header .
14826	Prints a message with no information .
14827	Returns the definition header for the given object .
14828	Return a list of docstrings for the given object .
14829	Returns the source code for the given object .
14830	Print the contents of a file .
14831	Format a list of fields .
14832	Display information about an object .
14833	Search for a pattern in a namespace table .
14834	Create a threaded reactor .
14835	A decorator that defers execution until a timeout is reached .
14836	Given a query and a corpus find the best match .
14837	Convert this ElementTree to a string .
14838	Returns an XML representation of the document .
14839	Load all modules in a set of packages .
14840	Invert a dictionary into a dict .
14841	Merge two dictionaries into a single dictionary .
14842	Convert an object to a primitive .
14843	Format the output as a 2 - color string .
14844	Returns a list of figures .
14845	Print a figure to the canvas .
14846	Creates a runner function that executes a file in a safe way .
14847	Select the appropriate figure format .
14848	Find the gui and backend .
14849	Activate matplotlib .
14850	Configure the inline support for the given backend .
14851	Activate a pylab gui .
14852	Trace a frame .
14853	Start the current thread .
14854	Stops the trace function .
14855	Start the tracer .
14856	Returns a function that can be used to trace an installation .
14857	Starts the tracer .
14858	Stop collecting data .
14859	Stop all tracers .
14860	Resume all tracer threads .
14861	Returns a dictionary of line data .
14862	Collect exceptions from a list of dictionaries .
14863	Render a traceback for an exception .
14864	Start coverage process .
14865	Returns the canonical directory for the given morf .
14866	Return the source filename for a given filename .
14867	Check if a filename should be traced with a reason .
14868	Determine if a file should be traced .
14869	Add a warning to coverage . py .
14870	Check if the source_pkgs file exists .
14871	Load data from source and pylib dirs .
14872	Called when atexit is called .
14873	Exclude a regex .
14874	Removes a regex from the list .
14875	Save the data to a file .
14876	Combine all the files in the config .
14877	Returns a dict containing the collected data .
14878	Compute the analysis function for a given morf .
14879	Returns a 2 - tuple of analysis statements excluded missing and formatted .
14880	Extracts an Analysis from a CodeUnit .
14881	Create a SummaryReporter based on the provided arguments .
14882	Annotate a list of morfs .
14883	Returns an HTML report .
14884	Generate an XML report .
14885	Display a list of objects .
14886	Display a list of objects in html format .
14887	Display a list of svg objects .
14888	Display a list of objects as a PNG .
14889	Display a list of jpeg objects .
14890	Display a list of objects in LaTeX .
14891	Display a list of objects as JSON .
14892	Display a list of javascript objects .
14893	Reload the data from a file .
14894	Find a py3 command .
14895	Print a command to stdout .
14896	Forward read events from a file descriptor .
14897	Reads a line from the file and sends it to the socket .
14898	Find a Launcher class based on its name and kind .
14899	Start the cluster .
14900	Build a launcher class .
14901	Start the IPython cluster .
14902	Start the ipcluster .
14903	Returns a wx . PySimpleApp instance .
14904	Returns True if the event loop is running .
14905	Starts the event loop .
14906	Returns a Qt4 application .
14907	Returns True if the application is running in the event loop .
14908	Starts a Qt4 event loop .
14909	Create a blank canvas .
14910	Draw a cross - section .
14911	Draw a line between two points .
14912	Set the text at the given position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Get a UUID .
14915	Returns a unique key from a get dictionary .
14916	Get a domain name from a URL .
14917	Returns a dictionary containing the arguments for the given URL .
