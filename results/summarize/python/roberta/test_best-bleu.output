0	Convert sina_xml_data to URL list .
1	Download videos .
2	Download a video .
3	Simulate text .
4	Print a debug message .
5	Prints an error message
6	Print a message to stdout .
7	Detect os .
8	Download video by channel .
9	Convert ckplayer xml to dict .
10	Get video url from video id .
11	Get the m3tv URL .
12	Converts a string of text into its canonical form .
13	Download a video .
14	download stream
15	Download video by vid .
16	match all matches in text
17	Parse query parameters .
18	Get the content of a given URL .
19	Perform a HTTP POST request .
20	Parse a host .
21	Get room id for a given room URL .
22	Retrieves the title for a given json topic .
23	Download WANMEN files by course .
24	Download wanmen_topic .
25	Check if a task exists .
26	Get the event buffer .
27	Get a snowflake connection
28	Get AWS credentials .
29	Get the field value for a field .
30	Copy an expert to the database .
31	Bump a table into a table .
32	Upload a file to Google Cloud Storage .
33	Returns the maximal partition of a table .
34	Return a connection to the MySQL server .
35	Show task state .
36	Restart a gunicorn master
37	Get a new connection .
38	Translate a value .
39	Get an instance
40	Create an instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database
44	Create a new database
45	Monkey patch database .
46	Delete a database
47	Export an instance .
48	Start the SQL proxy process .
49	Stop the cloud proxy .
50	Returns the version of the proxy .
51	Create a connection .
52	Retrieve a connection from the database .
53	Delete a connection .
54	Retrieves the SQLProxyRunner for the specified proxy .
55	Get the database hook .
56	Cleanup Postgres database hooks .
57	Reserve a free TCP port .
58	Normalize mlengine job id .
59	Return the error code of an error .
60	Delete all DagRuns .
61	Delete all DAG task instances .
62	Set the state of all DAGs in the session .
63	Print statistics about the task .
64	Sets the number of tasks in the DB .
65	Invoke the lambda function .
66	Create evaluation ops for DataFlow .
67	Create a directory if it doesn t exist .
68	Convert a string to a float if possible .
69	Convert a value into a timezone aware .
70	Makes a naive datetime .
71	Create a datetime object .
72	Get connection to druid broker .
73	Return a connection to the server .
74	Perform a HTTP request .
75	Raises an AirflowException if the request was successful .
76	Run a prepped request .
77	Create a context manager .
78	Decorator to wrap a function into a session .
79	Drop database tables
80	Helper function to return a pretty formatted message
81	Retrieve the records .
82	Returns a pandas DataFrame with the given hql .
83	Execute a SQL query .
84	Adds rows to the table .
85	Get a connection to the Cosmos server .
86	Determines if a collection exists .
87	Creates a new collection .
88	Determines if a database exists .
89	Create a new database .
90	Delete a database .
91	Delete a collection .
92	Insert documents in a collection .
93	Delete a document .
94	Get a single document .
95	Returns a list of documents matching the given SQL query string .
96	Get a function by name .
97	Create a new function .
98	Update a function .
99	Upload a function .
100	Delete a function .
101	Return a generator of statuses for the given session .
102	Returns True if the given session is met .
103	Generator for failure reasons
104	Parse S3 configuration file .
105	Get the credentials for a given region .
106	Return a connection to the database
107	Flush the buffer .
108	Check if a file iszipped .
109	Return a list of python files in the given directory .
110	Construct a TaskInstance
111	Starts the DagFileProcessor manager .
112	Send a termination message to the manager .
113	Exit all DAG processors .
114	Start the DagFileManager process .
115	Start the worker thread .
116	Start the process in sync .
117	Refresh the dag_dir .
118	Print the file statistics .
119	Clear missing import errors .
120	Log statistics about file processing .
121	Set the new filepaths .
122	Waits until all processes finished .
123	Called by DAG when the DAG is finished .
124	Terminate the child process .
125	Return a SSH client .
126	Create a transfer job .
127	Get a transfer job .
128	List transfer jobs .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pauses a transfer operation .
133	Resumes a transfer operation .
134	Wait for a transfer job to complete .
135	Find tasks for a task instance .
136	Return all open slots .
137	Run a command .
138	Remove an option .
139	Returns the section for the given section .
140	Allocate the keys for a project .
141	Begin a transaction .
142	Commit a project .
143	Lookup a project by its keys .
144	Rolls back a transaction .
145	Runs a query against the database .
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until it is done .
149	Export entities to a storage bucket .
150	Imports entities from a GCS file .
151	Publish message to target ARN .
152	Returns the hostname of the connection
153	Get a LanguageServiceClient
154	Returns a list of entities for a given document .
155	Annotate a document .
156	Classify given document .
157	Get the template for the given module .
158	Link a template field .
159	Disposes the connection pool .
160	Prepare the config path .
161	Check the task id .
162	Detect the config variable .
163	Convert an object to a dictionary .
164	Splits a list of items into chunks .
165	Apply a function over an iterable .
166	Chain multiple tasks .
167	Pretty print a list of rows .
168	Render a log file .
169	Get a connection object
170	Wait for an operation to complete .
171	Coerce a string into a json object .
172	Handles databricks execution .
173	Runs the shell .
174	Get celery task state
175	Returns the number of tasks per send process .
176	Returns the number of tasks per fetch process .
177	Set the default value for a key .
178	Return a connection object
179	Creates a new job .
180	Get a single job .
181	Wait for a job to complete .
182	Creates a new version .
183	Set the default version of a model .
184	List versions of a given model .
185	Delete a version .
186	Create a model .
187	Get a model by its name .
188	Write batch data into a table .
189	Integrate the executors .
190	Get the default executor .
191	Get the executor for a specific executor .
192	Called when a segment error occurs .
193	Get pymssql connection
194	Trigger a run .
195	Delete a dag
196	Get task information .
197	Get a list of Airflow pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Returns the details for the specified state .
202	Return a list of messages for a given resource group .
203	Get logs for a container .
204	Delete a container group .
205	Check if a container exists .
206	Decorator to apply default arguments .
207	Construct an ingest query .
208	Pokes a message on the channel .
209	Finds a run of a given dag_id .
210	Return a list of TaskInstance instances .
211	Get TaskInstance
212	Get the previous Dag run .
213	Get the previous Dag run .
214	Updates the state of the task .
215	Verify the integrity of the flow .
216	Send a JENkins request and return the response .
217	Convert a context object to a dictionary of Airflow variables .
218	Conditionally trigger a controller .
219	Send a metric .
220	Perform a Metric query .
221	Get a dag by id
222	Kills dead jobs .
223	Bag a dag
224	Collect dags .
225	Return a string representation of the dagbag .
226	Add a number of days .
227	Convert a datetime object to a datetime object .
228	Pokes a directory with the given pattern .
229	Pokes a file .
230	Remove all the jobs from the list .
231	Return the current attempt number .
232	Generate a command to run a task .
233	Return the current state of the task .
234	Record the error .
235	Refreshes the task instance from the database .
236	Clear the data for this task .
237	Return the task key .
238	Determines if the task is done .
239	Calculate the next retry datetime .
240	Determines if the machine is ready to retry .
241	Return True if the pool is open .
242	Return the DagRun object for this session .
243	Push a task onto the queue .
244	Pull a task .
245	Initialize the run context .
246	Closes the local file .
247	Get a connection to the database .
248	Start an instance .
249	Set machine type .
250	Get an instance template
251	Insert an instance template .
252	Get instance group manager .
253	Patches an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create a bucket .
257	Check the prefix for a bucket .
258	List common prefixes .
259	List all keys in a bucket .
260	Check if a key exists .
261	Get an object from S3 .
262	Read the given key .
263	Select a specific key .
264	Check if a wildcard key exists .
265	Get a wildcard key .
266	Upload a file to S3
267	Load a string from a file .
268	Load a bytes object from a file .
269	Upload a file - like object
270	Copy an object
271	Query the Cassandra database .
272	Convert a user type to a user type .
273	Sends an email .
274	Get a connection to the server .
275	Recognise audio .
276	Execute the SQL query .
277	Given a list of entry_points load the plugins .
278	Check if a plugin is in an Airflow plugin .
279	Skip the given dag_run .
280	Get a connection to Azure DB .
281	Check if a file exists .
282	Upload a file to a remote path .
283	Return a list of files matching the given path .
284	Execute the query .
285	Uncompress a file .
286	Executes mssql and returns cursor
287	Decorate a function to execute action logging .
288	Build metrics .
289	Create cgroup .
290	Delete a cgroup
291	Parse a hostname from a host .
292	Make an API call
293	Get a Salesforce connection
294	Make a query for all objects
295	Describe an object .
296	Get the list of available fields .
297	Make an object from a Salesforce query
298	Convert a column to a timestamp .
299	Write object to file .
300	Get a MongoDB client .
301	Get mongo collection .
302	Replaces multiple documents .
303	Check if a mail has an attachment .
304	Retrieve mail attachments by name .
305	Download mail attachments .
306	Find attachments by name .
307	Get file content .
308	Upload records to Redis .
309	Get statuses for a given task instance .
310	Send email .
311	Sends an SMTP email .
312	Convert the result value to UTC .
313	Check if a blob exists .
314	Check if a given prefix exists for a given container .
315	Create a blob from a string .
316	Read a file from a blob .
317	Delete a file from a container .
318	Lists the mlsd files
319	Get FTP connection .
320	List files in a directory .
321	Retrieve remote file from remote server .
322	Store a remote file .
323	Get modification time .
324	Execute Discord webhookHook .
325	Get a connection object
326	Check if a directory exists .
327	Check if a file exists .
328	List directories and files for a share .
329	Create a directory .
330	Load a file from a file .
331	Create a new file from a string .
332	Load a file from a stream .
333	Get a connection object from the server .
334	Copy a file from one bucket to another .
335	Download a file from a bucket .
336	Upload an object to a file .
337	Check if a bucket exists .
338	Check if the given object is updated after the given object .
339	Delete a blob .
340	List blobs .
341	Get the size of an object in a bucket .
342	Returns the cc32c32c32c32c32c32c32c32c32c32c32c32c32c64 checksum of the object .
343	Get the MD5 hash of an object .
344	Create a bucket .
345	Compose files in one bucket to another .
346	Check the status of the secondary training job .
347	Return the status message for a secondary training job .
348	Upload a file to a S3 .
349	Configure S3 resources .
350	Check the provided S3 URL .
351	Return a connection to the bot .
352	Create a training job .
353	Create a hyperparameter tuning job .
354	Create a new transform job .
355	Create an Endpoint
356	Describe a training job with a log .
357	Check the status of a job .
358	Check the status of a training job .
359	Execute data flow .
360	Run migrations .
361	Run migrations online .
362	Delete an instance .
363	Create an instance .
364	Create a new table .
365	Delete a table .
366	Update a cluster .
367	Prepare the command line for the CLI .
368	Flatten a hive conf into a dictionary .
369	Load a DataFrame from a DataFrame .
370	Load a table from a file .
371	Return the metastore client .
372	Check for named partition .
373	Check if a table exists .
374	Return a connection to the Holeserver .
375	Return a list of results .
376	Write rows to a CSV file .
377	Get the records for a given hive .
378	Returns a pandas dataframe
379	Get a connection to the ProductSearch API .
380	Determines the backend endpoint .
381	Send Dingding message .
382	Bind parameters to the given operation .
383	Escape a string .
384	Cast a Bq_field to bq_type
385	Validate that value is a valid value .
386	Get a BigQuery connection
387	Get a bigquery service instance
388	Check if a table exists .
389	Create empty table .
390	Patch a table .
391	Cancel a BigQuery query .
392	Delete a table .
393	Updates a table .
394	Grant the view access to the given dataset .
395	Get dataset .
396	Get datasets list
397	Insert all rows into a table .
398	Execute the given operation .
399	Execute the given operation .
400	Returns the next page .
401	Execute the postgres command .
402	Create intermediate directories .
403	Create a queue .
404	Send a message to a queue .
405	Run a command .
406	Removes the config file
407	Main entry point for nvd3 .
408	Build the html header .
409	Build the container .
410	Build the Jsch chart
411	Create x axis .
412	Create y axis .
413	Get a connection to the database .
414	Decorator to add action logging .
415	Decorator that handles gzipped requests .
416	Get the last Dag run .
417	Create a DAG run .
418	Sends a message to the SQS queue .
419	Create a JSON response .
420	Opens a file or directory .
421	Generate a cache key .
422	Get a VideoIntelligenceService client .
423	Annotate a video .
424	Returns the API key .
425	Return a connection to the OPGenie API .
426	Execute an alert .
427	Builds the OOPgenie payload .
428	Execute the OpsGenie hook .
429	Return the connection object for the client .
430	Run a query .
431	Check the query execution status .
432	Poll the query status .
433	Returns a pysftp connection object
434	Retry rate limit exceptions .
435	Calls a zendesk
436	Get a list of partitions .
437	Get a specific table .
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Get all snapshots for a cluster .
442	Restore a cluster from a snapshot .
443	Create a cluster snapshot .
444	Execute the API call .
445	Create a new Azure Airflow .
446	Filter file size by size .
447	Filter out excluded extensions .
448	Execute the S3Hook
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a python dictionary to a protobuf .
453	Wait for an operation to complete .
454	Gets a specific operation .
455	Append label to resource label .
456	Create a cluster .
457	Get a specific cluster .
458	Get Discord webhook endpoint .
459	Build the ordinal payload .
460	Run Discord .
461	Encrypt a plaintext .
462	Import a table .
463	Import a query .
464	Export a table to a file .
465	Get a connection to the chatroom .
466	Synthesize audio .
467	Closes the upload .
468	Get init containers .
469	Get environment variables .
470	Get the worker secrets .
471	Get the security context .
472	Return a list of extra links .
473	Sets the heartbeat for this job .
474	Launches the process of an Airflow process .
475	Start the DagFileProcessor .
476	Determines if the process is done .
477	Exit gracefully .
478	Update import errors .
479	Process DAG instances .
480	Update the state of the tis_to_with_states without dag_states .
481	Get the map for each task .
482	Update the state of the given task instances .
483	Enqueue task instances with task instances .
484	Executes the list of tasks in the DAG .
485	Set the state of all tasks that failed to be executed .
486	Process the execution events .
487	Process DAG file .
488	Update task counters .
489	Manage execution state .
490	Get a DagRun for a given run .
491	Return the task instances for the given dag_run .
492	Execute the DAG run for the given dates .
493	Set failed dag runs to failed state .
494	Execute the DAG run .
495	Callback for the heartbeat callback .
496	Get an instance of Client .
497	Get an instance .
498	Apply func to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get a database instance .
503	Create a new database .
504	Update a database .
505	Delete a database .
506	Pokes this attachment .
507	Prepare and merge additional properties .
508	Get a connection to the cluster .
509	Check if a table exists .
510	Check if the given table exists .
511	Build track driver status command .
512	Submits an application .
513	Process the spark submit log .
514	Process a spark driver status log
515	Returns a TaskRunner for the given local task job .
516	Wait for the task to complete .
517	Executes the SQL returning the cursor .
518	Configure csv file .
519	Write a local schema to a file .
520	Determines the type of a column .
521	Return a mapping of MySQL type to SQL type .
522	Executes the SqoopHook .
523	Decorator to apply a lineage .
524	Extract the extra data from the json response
525	Compute a range of dates between two dates .
526	Takes an array of units and returns a list of tuples representing the time units .
527	Return the number of days past the given number of days .
528	Initialize a role .
529	Delete a role .
530	Get the user s roles .
531	Get all permissions for the user .
532	Check if a user has a role .
533	Check if a permission has a permission .
534	Delete faulty permissions .
535	Merge permission menu and view menu .
536	Update permissions view .
537	Syncs the permissions for the given dag .
538	Create permission for all DAGs .
539	Get Fernet object .
540	Pokes a table .
541	Get the catalog hook .
542	Pushes messages on the queue .
543	Return a Kubernetes connection object
544	Return an AirflowHDFHook instance .
545	Check if the hdfs path exists .
546	r Load a file to a given destination .
547	Get the connection to pinot broker .
548	Get the URI for the connection .
549	Convert a date to a dictionary .
550	Convert a time to a dictionary .
551	Get a redis connection
552	Return a pandas DataFrame with the given parameters .
553	Execute sql statement .
554	Set autocommit .
555	Insert rows into a table .
556	Serialize a cell
557	Return the health of the scheduler .
558	Get extra links .
559	Get a cloudant connection
560	Executes the Slack WebhookHook .
561	Gets the credentials for the OAuth service .
562	Get the Authorized HTTP URL .
563	Decorator to catch Airflow exceptions .
564	Fallback to default project id .
565	Determines whether the job is unfinished .
566	Prepare the connection command .
567	Convert a pic to a tensor .
568	Normalize a tensor .
569	r resize an image
570	r Add padding to an image .
571	Crop an image .
572	Resizes an image .
573	Flip an image .
574	Calculate the perspective of an image .
575	Flip image .
576	Crops the given image .
577	Adjusts the brightness of an image .
578	Adjust contrast to image .
579	Adjust the saturation of an image .
580	Adjust hue value .
581	r Adjust the gamma of an image .
582	Rotate an image .
583	Transform an image using affine transform .
584	Convert an image to grayscale .
585	Save an image .
586	Find classes in a directory .
587	Read image file .
588	Reads a Tensor from a file .
589	Reads a list of matches from a file .
590	Calculate accuracy .
591	This function is called when a distribution is distributed .
592	Download a file from a URL .
593	Return a list of all directories in a directory .
594	Return a list of files that match the given suffix .
595	Download a file from Google Drive .
596	Get parameters for the image .
597	Generate params .
598	Generate random parameters .
599	Get parameters for a given brightness .
600	Get parameters for a given scale .
601	Download the dataset .
602	Download the image .
603	Download zip archive .
604	Return the current theme name .
605	Implements the autocomplete method .
606	Get the preferences .
607	Return a list of themes for a given path .
608	Search for a search query .
609	Retrieves the response
610	Apply custom gradient to x .
611	Convenience wrapper around MVN .
612	Calculates the J - joint log probability for a joint .
613	Benchmark 8_schools .
614	Wrap docstring to docstring .
615	Return a simple name from a distribution .
616	Build a random variable .
617	Return a random variable .
618	Returns a random variable .
619	Perform one step prediction for one step space .
620	Predict the state space for the given model .
621	Return the minimum value of x .
622	assert that x is finite
623	Evaluates the rank at x .
624	Calculate the size of an event .
625	Evaluate one - hot - hot - hot - hot .
626	Convert a string identifier to a Tensor function .
627	Sets the params_size for the specified number of components .
628	Return next interceptor .
629	Decorate a function as interceptor .
630	Decorator for recording data .
631	Random logistic data .
632	Plot the decision decision .
633	Build the input pipeline .
634	Check if map values are valid .
635	Trace function .
636	Call a function fn with args .
637	Call a function and return its gradient .
638	Cast a sequence from to_structure .
639	Transform a log - likelihood function into a log - likelihood function .
640	Generate a leapfrog step .
641	Perform a metropolis step .
642	Compute Hamiltonian Monte Carlo Monte Carlo Monte Carlo .
643	Sign an adaptation .
644	Construct a Tensor from a dictionary .
645	Convert x to tensor .
646	Create scale operator .
647	Create a random walk normal function .
648	Create a random walk function .
649	Return the tensor rank of x .
650	r Compute the entropy - lower bound .
651	Calculate the cat_probs .
652	Validate arguments .
653	Ensure TensorFlow Probability is installed .
654	Calculate the logistic regression .
655	Calculate coverage type .
656	Calculate the cholesky covariance .
657	Return the standard deviation of x .
658	Calculate the variance of x .
659	Convert ndims to a positive axis .
660	Squeeze the given axis .
661	Return the vector at x .
662	Inverse of z .
663	Construct a semilocal transformation matrix .
664	Calculate the semilocal gradient for a given scale .
665	r Sample a Halton sequence .
666	Generate permutations for num_results .
667	Get the indices for the given num_results .
668	Returns the size of the expansion .
669	Determines if n is less than n .
670	Return the eps for a given dtype .
671	Hager hagerang .
672	Apply step_size_size to val_c .
673	Hook for bracket search .
674	Hager search function .
675	Hager search function .
676	Prepare arguments for function call .
677	Return a copy of the pass_through_tensor .
678	Compute quadrature Schema for softmax normal .
679	Apply softmax normalization .
680	Check if a parameter is valid .
681	Determine the shape of the event shapes .
682	Interpolate loc .
683	Interpolate a grid .
684	Scales a linear operator .
685	Concatenate vectors .
686	Compute the log matrix of the log matrix .
687	Compute the log matrix of the log matrix .
688	Compute the vector matrix .
689	Calculate the log probability for each state .
690	Computes the marginal probabilities for hidden states .
691	Compute posterior marginal .
692	Define posterior mode .
693	Chooses random direction based on random direction .
694	Samples the next step .
695	Tries to call fn if possible .
696	Right pad with padding .
697	Run one step .
698	Build a tf . posterior distribution .
699	Build the factorization loss .
700	Minimize in a build loss function .
701	Compute the moments of a time series .
702	Compute the initial value of a masked time series .
703	Calculate the broadcast shape of a list of distributions .
704	Construct a Multivariate Multivariate Markov operator .
705	Calculate the sum of multivariate normal distributions .
706	Compute empirical statistics .
707	Expand a temporal dimension tensor .
708	Convert the observed time series into a canonicalized time series .
709	Mix the diagonal draws from the posterior distributions .
710	Return the range of the variable .
711	Return a summary statistic for the given model attribute .
712	Unify a call signature .
713	Resolve distribution names .
714	Determines the required args for the given fn .
715	Compute KL divergence between two distributions .
716	Build the model .
717	Resolve the distribution function .
718	Compute the entropy of the distribution .
719	Check that the argument is in the support of the distribution .
720	Compute image summary .
721	Visualize the reconstruction .
722	Visualize a quantile analysis .
723	Summarize the model parameters .
724	Summarize the mean in units .
725	Returns a multivariate Normal Diag .
726	Generate the zero state .
727	Call self . _layer .
728	Call the input .
729	Compute the likelihood of the model .
730	Reconstruct the model using the given inputs .
731	Samples the static prior .
732	Samples the dynamic prior to the given samples .
733	Returns the shape of the tensor .
734	Tensor for batch shape .
735	Make a state space model .
736	Samples the prior of the state space .
737	Compute the min_event_ndims given a list of dicts .
738	Convert a matrix to a square matrix .
739	Sort values according to the given axis .
740	Sort values according to given axis .
741	Return ndtr .
742	Non - linear interpolation .
743	Return an unsigned ndtri .
744	Compute the log - likelihood .
745	Calculate the log - likelihood of x .
746	Calculate the error vector .
747	Logarithmic Laplace .
748	Calculate the joint log probability for the joint - translation .
749	Benchmark text_messages .
750	Determines if the marginal GP is univariate .
751	Gets the marginal distribution for the given index points .
752	Returns the index_points for the given index_points .
753	Make an IF stack .
754	One step of one step .
755	Calculate the bootstrap results .
756	Return the outer squared difference between x and y .
757	Calculate the value and batchjacobian .
758	Prevent second derivative .
759	Apply the distribution transformation to x .
760	Split a list of block_sizes into a list of blocks .
761	Decompose model from posterior_matrices .
762	Decompose a model using a state space .
763	Decomposes the forecast for the given component .
764	Convert a dense tensor to a SparseTensor .
765	Decorator for operator methods .
766	Return text representation of a tensor .
767	Return the sample shape .
768	Return the sample_shape as a tf . sample_shape .
769	The sample value .
770	Evaluate the model .
771	Return the numpy .
772	Conjugates the prior for a prior .
773	Returns the real NVP default template .
774	Unit norm .
775	Calculate the log - likelihood of x .
776	Calculate the log normalization .
777	Return the common dtype of args_list .
778	Create a function that returns a summary statistic for the given attribute .
779	Convert a tensor to a scalar output .
780	Returns the pdf at the given peak .
781	Calculate the effective sample size .
782	Calculate effective sample size .
783	Compute the potential reduction for a single state .
784	Determines the size of x .
785	Broadcasts a broadcast argument .
786	Computes the quadrature model for a Gaussian distribution .
787	Compute quadrature schemas .
788	Merge two dicts .
789	Return a copy of this mapping with the given field .
790	Merge two values .
791	Convert x to a nested tuple .
792	Calculate the left - step multipliers .
793	Find the indices of the best interval in x .
794	Slice the bounds of the data .
795	Generate a sample with shrinkage .
796	Slice a slice of the data .
797	Creates a function that returns a set of values for the given model .
798	Create a function that returns a log joint function .
799	Helper function to get input arguments .
800	vg convolution block .
801	Build a Leapfrog tree .
802	Decorator to check if value is not None .
803	Determines if there is no U - turn .
804	Leapfrog function .
805	Compute the joint joint of the target log .
806	Random variates .
807	Add a default scale function .
808	Generate a default mean normal function .
809	Default multivariate normal function .
810	Deserialize a Keras function .
811	Serialize lambda function .
812	Broadcasts a structure from one structure to another .
813	Convert a nested structure to a tensor .
814	Convert a list of arguments to a tensor .
815	Call fn with args
816	Return a dict of Tensor s attributes .
817	Makes a multivariate covariance matrix prior .
818	Pack images into a single image .
819	Download a file to a directory .
820	Build fake input function .
821	Validate block_samples .
822	Check whether a model is broadcast .
823	Multivariate normal tril .
824	Bernoulli .
825	Normalize x .
826	Poisson function .
827	Generate an euler method .
828	Calculate drift for given step size .
829	r Compute the log acceptance correction .
830	Given a state and a state and a gradient_fn call it .
831	If a volatility part is broadcast to the given state parts .
832	Make AR transformation matrix .
833	Samples the shape of x .
834	Call the reshape function .
835	Call tf . tf .
836	Compute the derivative of k .
837	Flatten samples from the distributed distribution .
838	Calculate latent Dirichlet allocation .
839	Create a Dirichlet variates .
840	Return a string representation of the topics .
841	Load the newsgroups dataset .
842	Build fake input function .
843	Build tf . tf . tf . tf .
844	Minimize the loss function .
845	Calculates the weights for a given metric .
846	Save images to file .
847	Generates a visualization of training images .
848	Load MNIST MNIST dataset .
849	Convert a numpy dtype into a numpy dtype .
850	Return the base dtype of dtype .
851	Check if a dtype is a bool .
852	Check if a dtype is a complex .
853	Return the maximum value of a dtype .
854	Return the name of the given dtype .
855	Return the size of the given dtype .
856	r Asserts that two items are of the same type .
857	Raises an AssertionError if dtype is not the same floating point type .
858	Minimize an objective function .
859	One - step optimization .
860	Return a function that accepts a list of objective values .
861	Exponential function .
862	Returns a function that accepts an objective function .
863	Shrink the minimization of the objective function .
864	Replace x at index .
865	Determines whether the objective function is converged .
866	Prepare arguments for an objective function .
867	Prepare arguments for initial_simplex .
868	Prepare arguments for evaluation .
869	Evaluate an objective function .
870	Plots the weight matrix of the posterior .
871	Plot the holdout prediction .
872	Build dummy data .
873	Get the configuration for the Keras model .
874	Deserialize a tensor from a configuration .
875	Multiply two matrices .
876	Helper function for _std_var .
877	Assigns a log - likelihood variable .
878	Make a columnar .
879	Generate randomrademacher .
880	Calculate a random Rayleigh .
881	Pick a scalar condition .
882	Calculate the log probability for a single fiber .
883	Calculate probability for one FFT .
884	Rotate dimensions if necessary .
885	r A batch normalization .
886	Validate BatchNormNormalization layer .
887	Slice a single parameter .
888	Convert a list of slices to a dictionary .
889	Helper function to apply a single step .
890	Applies slice overrides to each slice .
891	Batch slice .
892	Fits a model .
893	Compute the convergence norm of the relative norm .
894	Prepare arguments for training .
895	Return the number of columns in x .
896	Prefer a static function .
897	Return a copy of the docstring of a function .
898	Gets a static predicate from a tensor .
899	Takes a shape_tensor_fn and returns it .
900	Creates a control case .
901	Yield a name scope .
902	Compute the standard deviation of a tensor .
903	Make a tril scale .
904	Create a diagonal scale .
905	Create a shape from a loc .
906	Determines if a scale is diagonal .
907	Check that a scalar distribution is valid .
908	Pad the tensor dimensions of a tensor .
909	Pick a scalar condition .
910	Move a dimension to another one .
911	Build an embed_negative_form for non - negative integers .
912	Return True if two dimensions are equal .
913	Convert x to a tf . np . ndarray .
914	Check if dt is known by dtype .
915	Check if dtype is known by dtype .
916	Return the largest integer by dtype .
917	Return the smallest integer of the given dtype .
918	Check if dtype is an integer like object .
919	Embed categorical event shape .
920	Calculate the log combinations of counts .
921	Transpose x .
922	Tries to pick a vector from a cond .
923	Given a static_broadcast_shape return the TensorShape .
924	Generate a new seed
925	Tridiag .
926	Return the dimension size of x .
927	Convert a grid of quadrature values to grid probabilities .
928	Return the arguments for the parent frame .
929	Apply tensor to x .
930	Create a tf . tensor with the given dependencies .
931	Validate and validate the rightmost dimension .
932	Validate perm .
933	Return the event shape .
934	Concatenate two tensors .
935	Return the dimensions of x .
936	Return a new TensorShape with the same shape .
937	Create a TensorShape with the given rank .
938	Raises an AssertionError if static_shape is not None .
939	Assigns sample_shape to full_sample_shape .
940	Build the backward pass step .
941	Perform backward smoothing update .
942	Build kalman filter step .
943	Linear Gaussian update .
944	Kalman transition matrix .
945	Build kalman mean step .
946	Builds the kalman covariance matrix .
947	Build kalman sampling step .
948	Propagate mean .
949	Propagate covariance matrix .
950	Backward smoothing pass .
951	Generate a sample of the joint n joint .
952	Computes the posterior of the posterior .
953	Compute the joint mean of the joint matrix .
954	Compute the joint covariance matrix .
955	Convert latents to observations .
956	Calculate the log normalization .
957	Get the mode of the volume .
958	Rotate the events .
959	Samples a 3D distribution .
960	Return a copy of a function .
961	Return a copy of dict with keys removed .
962	Recursively replace a pretty dict .
963	Wrapper for n_samples .
964	Return True if x is namedtuple - like .
965	Chooses a base case .
966	Convenience function to choose one of accepted fields .
967	Safely reduce the sum .
968	Wrapper for _get_value_and_values .
969	Call fn and return the result .
970	Wrapper for _smart_for_loop_fn .
971	Trace trace_fn .
972	Creates a setter that will be used to set the innermost results .
973	Creates a function that returns the innermost function .
974	Enables and returns a kernel for use in store_parameters .
975	Replace the event_shape in event_shape_in .
976	Replaces event_shape in event_shape_in .
977	Check if shape is valid .
978	True if any of the input tensors have converged .
979	Returns the arguments for the initial state function .
980	Line search step .
981	Restrict function along given direction .
982	Update the position of the state .
983	Checks the convergence of the given objective .
984	Broadcasts the given value to the given target .
985	Compute the harmonic number .
986	Generate a default exchange function .
987	Extract field from kernel results .
988	Computes the set of exchange states for each replica .
989	The variance scaling term .
990	Creates a forward logjacobian function .
991	Transform a bijector into a forward function .
992	Transform a bijector .
993	Implementation of one step .
994	Create a new tf . tf . DataFrame from fval .
995	Second step of secant .
996	Sets up the secant at the given values .
997	Inverse of secant2 .
998	Update a value and its gradient .
999	Applies bracketing function .
1000	Batch bisect function .
1001	bisect function .
1002	Determines if the value is finite .
1003	Determines if the given parameter is unsatisfiable .
1004	secant secant
1005	Make a step size update policy .
1006	One step implementation .
1007	Compute the log acceptance correction .
1008	Implementation of one step .
1009	Returns the results of the calculation .
1010	Bayesian Resnet .
1011	Resnet block .
1012	Create Dirichlet encoder .
1013	Create a decoder for the given topics .
1014	Create Dirichlet prior .
1015	Samples a Monte Carlo chain .
1016	Deep Exponential family .
1017	Create a deterministic with the given shape .
1018	Train a Gaussian Gamma model .
1019	Load Nips 2011 papers .
1020	Initialize params .
1021	Returns the kl_fn associated with the given type_a .
1022	Reads an image from a file .
1023	Download sprites .
1024	Creates a new character with pants .
1025	Create a sequence of frames
1026	Create a random sequence .
1027	Create a sprites dataset .
1028	Validate distributions .
1029	Flatten a list of kernels .
1030	Flatten a list of kernels .
1031	Build fake data .
1032	Count the number of integrations in an array .
1033	Find the binning of x .
1034	Create a histogram .
1035	Compute the quantiles of x .
1036	Return the ndims of x .
1037	Inserts back keep_dims along axis .
1038	Make a list of non - negative nonnegative axes .
1039	Move dimensions to the end of x .
1040	Sort a tensor .
1041	Create a list of component state space models for each parameter .
1042	Calculate the amari alpha .
1043	Computes the KL divergence function .
1044	Calculate the Jensen - Shannon log - likelihood .
1045	Calculate Pearson correlation .
1046	Calculate the squared - hellinger .
1047	Compute the triangular log - likelihood .
1048	Compute the power of t .
1049	Calculate the log - likelihood .
1050	Calculate the Jacobian of the Jacobian .
1051	Calculate the modifiedgan .
1052	Calculate dual CSISzar function .
1053	Symmetrized CSISzar function .
1054	Calculate the CSISzar function .
1055	Calculate CSISzar output .
1056	Raises an AssertionError if x is not expected .
1057	Batch batch with broadcasting .
1058	Broadcast an event .
1059	r Compute the log - likelihood estimate of the expectation space .
1060	Broadcasts an event .
1061	Minimize a value .
1062	Computes the inverse control inputs .
1063	Update the inverse of the inverse_state .
1064	Calculate the inverse - weighted update function .
1065	Multiply a vector onto the right .
1066	Tensor product .
1067	Transpose matrices .
1068	Pad ndims with zero dimensions .
1069	Computes the sum of ndims preserving ndims .
1070	Return the square root of x .
1071	Return the common dtype for argument_list .
1072	Minimize a value .
1073	Returns the initial state for a given value and gradient .
1074	Calculate the search direction for a given state .
1075	Make an empty queue for an element .
1076	Push a queue onto the queue .
1077	Mask a PSD .
1078	Ensure that x is large enough .
1079	Uniform correlation matrix .
1080	Calculate the volume of the correlation matrix .
1081	Compute the Clopper - Pearson confidence interval .
1082	Compute the true volume of a detector .
1083	The Von Mises series .
1084	Cumulative normal distribution .
1085	One step function .
1086	Minimize an objective function .
1087	Helper function to get initial arguments .
1088	Find the best value in a population .
1089	Convenience function to check for convergence .
1090	Get initial population .
1091	Perform a binary crossover on the population .
1092	Get the mutations for a given population .
1093	Generate random mixing indices .
1094	Ensure that tensor_list is a list .
1095	Convert totol .
1096	Soft - threshold .
1097	Clip the tensor by the given value .
1098	Build the input pipeline .
1099	Plot generated images .
1100	Convert a list of outputs into a string .
1101	Call the latent function .
1102	Multivariate Normal Diag .
1103	Integrate of x .
1104	Integral embedding .
1105	Rank a matrix .
1106	Pinv .
1107	Lu Solver .
1108	Lu_matrix .
1109	Helper function to construct assertions .
1110	Helper function to resolve assertions .
1111	Sparse block diag .
1112	Validate matrix .
1113	Calculate the gradient of the log - likelihood .
1114	r Fit a sparse - sparse model matrix .
1115	Generate a list of slices for each block .
1116	Generate mask .
1117	Masked dense layer .
1118	Create numpy array of input_size
1119	Create a list of degrees for a given order .
1120	Create masks for a given number of degrees .
1121	Create a mask for a mask .
1122	Build the event .
1123	Apply tensor to x .
1124	Draws a sample of the data .
1125	Create a Multivariate Multi - dimensional Multi - dimensional MultiDigg .
1126	Creates a Multivariate TimeSeries for a TimeSeries .
1127	Convert params to weights .
1128	Calculate the depth of a graph .
1129	Returns the best order in the tree .
1130	Flatten a chain rule .
1131	Builds the model .
1132	Calculate the variational loss .
1133	Calculate the optimal variance of a kernel .
1134	Builds the last day of a given season .
1135	Builds the residuals matrix for a given set of effects .
1136	Builds a transition matrix .
1137	Build a seasonal transition noise .
1138	Builds a multivariate seasonal transition tensor .
1139	Determines if the observation data points are empty .
1140	Validate observation data .
1141	Adds a new scheduler .
1142	Set a checkpoint .
1143	Set the gradclip constant .
1144	Optimize the model .
1145	Set the training summary .
1146	Set the value summary .
1147	Create a local optimizer .
1148	Set the training data for this dataset .
1149	Set a summary trigger .
1150	Load training data sets .
1151	Get a list of news20 tags .
1152	Download the GloVE file .
1153	Compile the optimizer .
1154	Fits the Dataset .
1155	Evaluate the given value .
1156	Predict the input data .
1157	Read MNIST dataset .
1158	Preprocess the MNIST dataset .
1159	Return the end trigger for the given options .
1160	Validate the optimizer .
1161	Get the value .
1162	Call a Java function .
1163	Call a Java function
1164	Convert an RDD into a Java object .
1165	Convert Python object to Java .
1166	Get activation by name .
1167	Construct a NumPy array from an ndarray .
1168	Get image label .
1169	Read a DistributedImageFrame .
1170	Write data to a file .
1171	Get an image .
1172	Convert to ImageTensor .
1173	Get the label of the image .
1174	Get the predicted image .
1175	Predict from x .
1176	Fit the model .
1177	Transform this dataset to a new image .
1178	Save Keras definition to disk .
1179	Build keras model .
1180	Predict class distributed by data_rdd .
1181	Set weights for the model .
1182	Get weights for layer .
1183	Save tensorflow to file .
1184	Set the training function .
1185	Load a layer .
1186	Load Keras model .
1187	Create a new Criterion with the given jcriterion .
1188	Load weights from a json file .
1189	Load the imdb .
1190	Build keras model .
1191	Get shape .
1192	Get the output shape .
1193	Get MNIST dataset .
1194	Extract data set from data_dir .
1195	Return the path to the BIGDL class .
1196	Determines whether the Spark version is below 2 .
1197	Export checkpoint .
1198	Save a variable tensor .
1199	Expand a tile on a given axis .
1200	Precompute future symbols
1201	Simple simple attention layer .
1202	Attention .
1203	Compute the BLEU score for a given translation .
1204	Get the log file .
1205	Log a message .
1206	Summarize gradients for gradients .
1207	Dump weights to file .
1208	Read data by dictionary .
1209	Train model from a config file .
1210	Interactively interact with an agent .
1211	Convert a list of labels into onehot .
1212	Convert a list of labels to one - hot labels .
1213	Return a tf . ConfigProto object .
1214	Load model from disk .
1215	Returns the value of the moment variable
1216	Update the graph variables .
1217	Calculate the F1 score .
1218	Process a word .
1219	Construct convolutional layer .
1220	Binn cell .
1221	Bnn layer .
1222	Construct convolutional convolution layer .
1223	Embeddings layer .
1224	Construct convolutional GRU .
1225	A convolutional convolution layer .
1226	Construct a LSTM .
1227	Creates a convolution layer .
1228	Budnn implementation .
1229	Calculate the BUDM .
1230	Convenience function for convolution .
1231	Create a tensorflow dropout .
1232	Build the network .
1233	Build a convolution layer .
1234	Build LSTM network .
1235	Train the model on the given data .
1236	Predict on a batch .
1237	Generate ndarray representation of sent message .
1238	Convert tags to numpy array
1239	Compute the BLEU measure .
1240	Verify a SC - URL
1241	Extract certificates .
1242	Verify the certificate chain .
1243	Verify a request signature .
1244	Verify the Amazon AWS certificate chain .
1245	Returns a JSON representation of the JSON object .
1246	Returns a list of supported bots .
1247	Returns the telegram .
1248	A list of all controls .
1249	Main entry point .
1250	Wrap a graph into a graph .
1251	A decorator for keras .
1252	Calculate accuracy .
1253	Calculate the round accuracy .
1254	Initializer for pretrained initialization .
1255	Read data_path .
1256	Creates a hello agent based on hello world .
1257	Convert x to one hot k .
1258	Return a prettified version of metrics .
1259	Create the default settings directory .
1260	Load model from disk .
1261	Saves model to disk .
1262	Get training op for training loss .
1263	Trie search .
1264	Make the default operation cost .
1265	Start the timer .
1266	Handle a request .
1267	Actual agent response .
1268	Generate a response for a request .
1269	Handle an intent .
1270	Handle launch data .
1271	Handle unsupported messages .
1272	Print a pretty representation of this cycle .
1273	Convert elmo loss to pl .
1274	Build a Chainer object .
1275	Function to interact with a model
1276	Predict model on stream .
1277	Read a file from a file .
1278	Return a function from a string .
1279	Register a function as a metric .
1280	Get a metric by name .
1281	Convert a string label into a decay type .
1282	Get the best value for the given values .
1283	Encodes a list of tokens .
1284	Read requirements file .
1285	Calculate the log loss .
1286	Export weights to a hub file .
1287	Prints the details of an item .
1288	Create an ecommerce agent
1289	Main entry point for the bot .
1290	Download a list of files .
1291	Untar a file .
1292	Download a given URL .
1293	Recursively updates a dictionary recursively .
1294	Set the MD5 hash of a URL .
1295	Set query parameter .
1296	Return a dictionary representation of alexa response .
1297	Return the JSON representation of the response .
1298	Return the template for the MS bot .
1299	Return the JSON representation of the response .
1300	Return a dict representation of the bot .
1301	Calculate the F1 F1 score .
1302	Compute recall at k_predicts .
1303	r Check GPU existence .
1304	Parse config property .
1305	Parse a config file .
1306	Expand a path .
1307	Create a Component from a dictionary .
1308	Main loop .
1309	Delete a conversation .
1310	Refreshes all valid certificates
1311	Verify a request .
1312	Process a request .
1313	Return a class from a string .
1314	Decorator to register a model class .
1315	Get a model by name .
1316	Get the GLM regularization path .
1317	Create a new GLM model .
1318	Create an object from a dictionary .
1319	Shutdown the H2O instance .
1320	Check if the server is running .
1321	Show the status of the cluster .
1322	List available jobs .
1323	Lists the time zones .
1324	Fill this object with another other .
1325	Get the metalearner params .
1326	Sets up the test_func to retry .
1327	Get a summary of a single frame .
1328	Delete a frame .
1329	Returns a list of model builders .
1330	Validate model parameters .
1331	Compute the metrics for a given model .
1332	Get a list of model metrics .
1333	Delete a model .
1334	Make a table of data
1335	Run EC2 instances .
1336	Terminate instances .
1337	Stop an EC2 instance .
1338	Start EC2 instances .
1339	Reboot an instance .
1340	Wait for SSH on a host .
1341	Get the full name of a method .
1342	Find a function from a frame .
1343	Return a string representation of the function s arguments .
1344	Wrap text at the end of a string .
1345	Join the current model .
1346	Trains the model .
1347	Fit the model .
1348	Return a dict of parameters .
1349	Handles signal handlers
1350	Remove the output directory .
1351	remove rsandbox directory
1352	Scrape port from stdout .
1353	Extract cloud size from stdout .
1354	Stop the JVM .
1355	Stop this node .
1356	Get the IP for this node .
1357	Get the port .
1358	Calculate ROC .
1359	Determine the size of the vector .
1360	Calculate the absolute error .
1361	Calculate the mean squared error .
1362	Calculate the median absolute error .
1363	Calculate H2O explained variance .
1364	Raises an AssertionError if var is not a type .
1365	Raises an AssertionError if v is not matched .
1366	Fail if the condition satisfies a condition .
1367	Retrieve the assert_arguments from the stack .
1368	Check the type of vtype .
1369	Generate the name of a type .
1370	Generate source code .
1371	Check that the given variable is valid .
1372	Check if a variable is valid .
1373	Read H2O configuration .
1374	Read configuration file .
1375	Generate paths to log files .
1376	Execute the model .
1377	Store the progress of the model .
1378	Recalculate model parameters .
1379	Estimate completion time for the given progress .
1380	Guess next poll interval .
1381	Compute the progress at the given time .
1382	Compute the progress at x_target .
1383	Draw the widget .
1384	Compute the size of the widget .
1385	Get the terminal size .
1386	Set the encoding of the barcode .
1387	Fit the frame .
1388	Get an H2O frame .
1389	Refreshes the cache .
1390	Get the type of a column .
1391	Return a new QuerySet representing the columns by type .
1392	Return a summary of the H2O .
1393	Describe the current frame .
1394	Return the first n rows .
1395	Return the multiplication of a matrix .
1396	List of levels .
1397	Total number of levels .
1398	Set the level of this node .
1399	Set the levels of the graph .
1400	Renames columns .
1401	Set the column names .
1402	Set the column name .
1403	Determines whether an item is in the table .
1404	Generate a modulo_kfold column .
1405	Construct a strified k - fold column .
1406	Print the structure of the structure .
1407	Return a pandas dataframe as a pandas dataframe
1408	Remove a column from the table .
1409	Compute the quantile of the model .
1410	Concatenate multiple frames .
1411	Bind a dataframe to a cbind .
1412	Rearrange a dataframe .
1413	Splits a single frame into multiple batches .
1414	Returns a groupby with the given value .
1415	Add a fillna .
1416	Impute values for a given column .
1417	Merge two columns .
1418	Return a relevel expression .
1419	Insert missing values .
1420	Generate a var expression .
1421	Compute the correlation matrix .
1422	Return the distance between two points .
1423	Return an astroid .
1424	Split a string into a list of strings .
1425	Return the count matches for a given pattern .
1426	Construct a substring from a substring .
1427	Remove rows from the table .
1428	Return the entropy .
1429	Return the number of valid substrings .
1430	Return a table of data .
1431	Plot the histogram .
1432	Compute the Isax expression .
1433	Return a sub - expression that matches the given pattern .
1434	Creates toupper .
1435	Grep the given pattern .
1436	Inverse of NaN .
1437	Return the difference between two columns .
1438	Return True if the table is NaN .
1439	Return the minute as a float .
1440	Generate a runif expression .
1441	Generate a random spline split .
1442	Return a new cut expression .
1443	Return the indices of the first index .
1444	Apply function to each axis .
1445	Parse a text .
1446	Parse a file .
1447	Move one row to another .
1448	Unparse tokens .
1449	Return the size of the centroid .
1450	Return a list of centers .
1451	Return the standard deviation of the cell .
1452	Create a new H2O connection .
1453	Perform an HTTP request .
1454	Check version of h2o .
1455	import a path into a list of paths
1456	Upload a file to a path .
1457	Imports data from a file .
1458	Import Hive Table .
1459	Import SQL table .
1460	Import select_query rows .
1461	Parse an H2O frame .
1462	Deep - copy a dataframe .
1463	Get a single model .
1464	Get information about a single grid .
1465	Get a single frame .
1466	Download a model from a model .
1467	Download a csv file
1468	Download all H2O logs .
1469	Export a single frame .
1470	Convert data to a list .
1471	Generate a demo for a given function .
1472	Load a dataset from a relative path .
1473	Compute the metrics for the predicted frame .
1474	Put a key in a file .
1475	Upload a custom metric .
1476	Raises an exception if the frame id is invalid .
1477	Return a human - readable representation of the given size .
1478	Normalize a slice
1479	Check if a slice is normalized .
1480	Predict a dataframe from a dataframe .
1481	Provide a prediction for a CSV file .
1482	Mark a function as deprecated .
1483	Joins the queue .
1484	Return the deep features of the given layer .
1485	Print the summary of the model .
1486	Display the model .
1487	Get the hyperparameters for a model id .
1488	Get a dict of hyperparameters .
1489	Get a single grid .
1490	Returns the F1 of the model .
1491	Return the importance of the model .
1492	Get the ARchetypes for the given test data .
1493	Plot the screeplot .
1494	Translate a name .
1495	Indent a string .
1496	Extracts run information from a Python log .
1497	Main entry point .
1498	Close the session .
1499	Get the session id .
1500	Start logging .
1501	Prepare a data payload
1502	Prepare the content of a file .
1503	Log a transaction .
1504	Logs an end transaction .
1505	Log a message .
1506	Saves the response to a file .
1507	Prints a message .
1508	Get an AutoML object
1509	Download a clone from the leader .
1510	Download the model from the given path .
1511	Fit the model .
1512	Apply the transform to the data .
1513	Inverse transform
1514	Extract a true string from a string .
1515	Tries to find a node s name .
1516	Tries to find a git_hash branch .
1517	Finds the build timeout .
1518	Searches for a build failure .
1519	Tries to find build id for a given build file .
1520	Extract build URL .
1521	Grab a Java message from a string .
1522	Save the dictionary to a dictionary .
1523	Update the summary file .
1524	Write the content of a file .
1525	Write Java message .
1526	Load Java messages to ignore .
1527	Normalize enum constant .
1528	Find synonyms for a word .
1529	Poll the status of a job .
1530	Save the Assembly to a file .
1531	Fits the assembly .
1532	Determines the percentile of a list
1533	Return a dict with the default values .
1534	Return a dictionary of parameters for the model .
1535	Return the deep features for a particular layer .
1536	Get the scoring history for a model .
1537	Displays the model .
1538	Return a dict of variable importances
1539	Calculate the residual degrees of freedom .
1540	Get coefficients .
1541	Download a pojo .
1542	Download a MOJO file .
1543	Save model details .
1544	Raises ValueError if mismatch is invalid .
1545	Return list of cross validation models .
1546	Train GBM model .
1547	Deep learning .
1548	Generate a GLM model .
1549	Wait until Ctrl - C is pressed .
1550	Return the dataframe as a pandas DataFrame .
1551	Displays the table .
1552	Start a JVM server .
1553	Searches for a jar .
1554	Yields the path to the h2o_jar .
1555	Return the HIT ratio table .
1556	Create a csv writer from a csv file .
1557	Convert uri to path .
1558	Convert a path to a relative path .
1559	Parse lines .
1560	Generate documentation for given uri .
1561	Find all available modules .
1562	Write API documentation .
1563	Write the index to a file .
1564	Return a list of cell values .
1565	Load a dictionary from a json file .
1566	Add a new message
1567	Update the message dictionary .
1568	Extract a message from a file .
1569	Save the dictionary to a json file .
1570	Print a dict to stdout .
1571	Parse command line arguments .
1572	Print out the usage information .
1573	Locate all files in a given directory .
1574	Find the magic in a file .
1575	Tokenize the file .
1576	Transform a pipeline .
1577	Summarize all failed runs .
1578	Extract informations from print save .
1579	Plot the ROC curve .
1580	Return a confusion matrix for the given metrics .
1581	Check if a model is available .
1582	Trim data back to the previous date .
1583	Return the list of endpoint groups .
1584	Update site s site .
1585	Return json data as a dict .
1586	Comment user .
1587	Get credentials from a file .
1588	Like a user .
1589	Get the media for a given hashtag .
1590	Check if a user is not bot .
1591	Read list from file .
1592	Schedules a message .
1593	Reserve the message .
1594	Download an existing resource .
1595	Guess service info from a spec .
1596	Update a powerShell command .
1597	Delete an application by id .
1598	Create or update an application definition .
1599	Returns the URI for the given request .
1600	Create a connection to the remote host .
1601	Perform a HTTP request .
1602	Execute script actions .
1603	Check the name of a front door name .
1604	Purge a previously deleted vault .
1605	Return the authorization server .
1606	Validate a request URI .
1607	Get CLI profile .
1608	Get the credentials for the acure CLI .
1609	Resolves an application .
1610	Check name availability .
1611	Open a URL .
1612	Sets the timeout .
1613	Sets the request header .
1614	Gets the response headers .
1615	Send a request .
1616	Returns the status of the request .
1617	Returns the status text .
1618	Return response body .
1619	Sets the client certificate .
1620	Create a new HTTP request .
1621	Put request header .
1622	Send request body .
1623	Get the response body .
1624	Get a readable identifier .
1625	Return the serialization name .
1626	Verifies a face to a person .
1627	Adds a new job .
1628	Extracts the properties of an entry from an XML node .
1629	Get the children of a node .
1630	Find namespaces from a child .
1631	Parse XML string into a namespace .
1632	Parses an XML string into a Region object .
1633	Convert xml to namespace availability .
1634	Convert XML string to metrics .
1635	Replaces the content of a runbook .
1636	List recommendations .
1637	Update an existing kb .
1638	Get the members of a group .
1639	Build package from sdk_number .
1640	Import data from a resource group .
1641	Publish a runbook .
1642	Renew the lock .
1643	Replaces word_alterations .
1644	Add a value to a SecretValue resource .
1645	Gets the storage account properties .
1646	Retrieves the keys for a specific storage account .
1647	Regenerate the keys of a storage account .
1648	Create a storage account .
1649	Updates a storage account .
1650	Deletes a storage account .
1651	Check the availability of a storage account .
1652	Retrieves the hosted service properties .
1653	Create a new hosted service .
1654	Delete a hosted service .
1655	Creates a new deployment .
1656	Delete a deployment .
1657	Swap a deployment for a service .
1658	Change a deployment configuration .
1659	Updates a deployment s status .
1660	Upgrade an existing deployment .
1661	Walk through an upgrade domain .
1662	Reboot a role instance .
1663	Delete role instances .
1664	Checks the service availability .
1665	List service certificates .
1666	Get a service s certificate .
1667	Add a service certificate .
1668	Delete a service certificate .
1669	Get the management certificate .
1670	Adds a management certificate .
1671	Delete the management certificate .
1672	Retrieves the affinity group properties .
1673	Create a new affinity group .
1674	Deletes an affinity group .
1675	Lists all subscriptions .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address .
1679	Disassociate a reserved IP address .
1680	Get a reserved IP address .
1681	Gets a specific role .
1682	Creates a virtual machine deployment .
1683	Adds a role to a service .
1684	Updates a role .
1685	Delete a role .
1686	Captures a role .
1687	Start a role .
1688	Start the roles for a deployment .
1689	Restart a role .
1690	Shutdown a role .
1691	Shutdown the specified roles .
1692	Adds a DNS server .
1693	Updates a DNS server .
1694	Delete a DNS server .
1695	Lists the versions of a resource extension .
1696	Replicate a virtual machine image .
1697	Unplicate a VM image .
1698	Share a virtual machine image .
1699	Creates a virtual machine image .
1700	Delete a VM image .
1701	List VM images .
1702	Update a VM image .
1703	Adds an image .
1704	Update an image .
1705	Update an image from an OS image reference .
1706	Delete an image .
1707	Retrieves a data disk for a deployment .
1708	Adds a disk to a data disk .
1709	Update a data disk .
1710	Delete a data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Generate a summary for a policy group .
1715	Build the receiver .
1716	Fetch next batch .
1717	Renews lock .
1718	Create or update a virtual machine scale set .
1719	Converts a single placement group to a single placement group .
1720	Display a screen text .
1721	Creates a new key .
1722	Import a key .
1723	Update a key .
1724	Set a secret .
1725	Set a certificate issuer .
1726	Construct a Connection object from a connection string .
1727	Get a specific subscription .
1728	List all subscribed subscriptions .
1729	Sends multiple messages .
1730	Get a new Sender for this session .
1731	Get a receiver for this session .
1732	Returns a Receiver for a deadletter .
1733	Parse an async operation response for an async operation .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Get the status of an operation .
1738	Update the management headers .
1739	Build a Travis - CI package .
1740	Returns a list of certificates for a given vault .
1741	Returns a list of regions for the service bus .
1742	List namespaces .
1743	Retrieves a specific service bus name .
1744	Creates a namespace .
1745	Deletes a namespace .
1746	Retrieves the name availability for a service bus .
1747	Retrieve a list of topics .
1748	Retrieve information about a specific notification hub .
1749	Retrieve a list of Relays .
1750	Retrieves a metric rollups queue .
1751	Gets the metrics rollups for a specific topic .
1752	Get the metrics rollups for a specific hub .
1753	Get the metric rollups for a specific relay .
1754	Create an extension builder .
1755	Creates a virtualenv with packages .
1756	Create a new server .
1757	Sets the server admin password .
1758	List the quotas for a given server .
1759	Get event logs for a specific server .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	List all Firewall Rules .
1764	List Service Objectives for a given server .
1765	Create a new database .
1766	Update a database .
1767	Delete a database .
1768	Retrieve a list of databases .
1769	List all existing domains .
1770	Close this message handler .
1771	Close the receiver .
1772	Get the session state .
1773	Set the session state .
1774	Receive messages from the queue .
1775	Merge a reservation .
1776	Validate the challenge .
1777	Purge a workspace .
1778	Return an error handler .
1779	Create a queue .
1780	Delete a queue .
1781	Get a specific queue .
1782	Create a new topic .
1783	Gets a specific topic .
1784	Create a new rule .
1785	Get a specific rule .
1786	List the rules for a topic .
1787	Create a subscription .
1788	Get a specific subscription .
1789	List all subscribed subscriptions .
1790	Send a message to a specific topic .
1791	Unlock a subscription .
1792	Sends a batch of messages to a queue .
1793	Unlocks a message from a queue .
1794	Receive a message from a queue .
1795	Receive a message from a topic .
1796	Create an event hub .
1797	Updates an event hub .
1798	Get an event hub .
1799	Send a message to a specific hub .
1800	Update service bus headers .
1801	Get the authorization token for the request .
1802	Determines if a token is expired .
1803	Fetches a signed OAuth token .
1804	Convert a request URI into a query string .
1805	Reset the service principal profile .
1806	Delete the queue .
1807	Unlock the queue .
1808	Renew the lock .
1809	Add headers to request .
1810	Return the Body as a dict .
1811	Get the health of a cluster .
1812	Gets the cluster health information for a given application .
1813	Unprovision an application type .
1814	Get repair task list .
1815	Submit a property batch description .
1816	Raises an exception when an error occurs .
1817	Start a web site trace operation .
1818	List the differences between a slot group .
1819	Swap a slot .
1820	Search for events by event type .
1821	Add a new face to a stream .
1822	Handles redirecting .
1823	Creates a new migration .
1824	Publish events to a topic .
1825	Move resources from one source to another .
1826	Set a profile definition .
1827	Lists the query results for a given management group .
1828	Create a queue .
1829	Delete a queue .
1830	Create a new topic .
1831	Delete a specific topic .
1832	Creates a new subscription .
1833	Create a connection object from a connection string .
1834	Get entity properties .
1835	True if the lock is expired .
1836	Create a new session resource .
1837	Creates a new subscription .
1838	Returns a request rate based on an interval .
1839	Process results queue .
1840	Add a batch of tasks to the job queue .
1841	Task collection thread .
1842	Build configuration dictionary .
1843	Reset a user s password .
1844	Start an environment .
1845	Create a message from a response
1846	Convert an XML element to a rule .
1847	Converts an ETree element into a Queue object .
1848	Parse an ETree element .
1849	Converts an ETree element into a subscription .
1850	Create a new certificate .
1851	Delete a certificate .
1852	Construct a client from a CLI profile .
1853	Construct a GraphRacClient from a json dictionary .
1854	Creates a client from an auth file .
1855	Parse enum results list .
1856	Get the properties of an element .
1857	Delete a subscription group .
1858	Get a queue by name .
1859	Lists all queues .
1860	Get a specific topic .
1861	Returns a list of topics for the service .
1862	Receive deferred messages .
1863	Deal with deferred messages .
1864	Retrieves information about a specific site .
1865	Create a site .
1866	Delete a site .
1867	Updates a website .
1868	Restart a website .
1869	Get historical usage metrics for a webspace .
1870	Retrieves the MetricDefinitions for a given website .
1871	Returns the XML for a publish profile .
1872	Get a publish profile .
1873	Update the registry policies .
1874	Create a Cloud Service .
1875	Checks the availability of a job collection .
1876	Gets a specific job collection .
1877	Completes an operation .
1878	Cancel scheduled messages .
1879	Send pending messages .
1880	Reconnects all pending messages .
1881	Get a certificate from a publish settings path .
1882	Load all cached cookies .
1883	Return the terminal width .
1884	Return the cut prefix .
1885	Print a message to stderr .
1886	Formats the size in bytes
1887	Formats the elapsed time in seconds .
1888	Create a status line .
1889	Print a progress bar .
1890	Generate the number of segments for this playlist .
1891	Iterate over the segments .
1892	Waits for the event to stop .
1893	Put a segment into the queue .
1894	Queue a queue .
1895	Sets request parameters .
1896	Extract the nonce from the response .
1897	Find the vpid for a given URL .
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse QSD data .
1901	Search for a dictionary .
1902	Spawn a command .
1903	Iterate through HTML tags .
1904	Parse a MPD document .
1905	Determines the UTF - 8 encoding of a sample .
1906	Parse JSON response .
1907	Parse an XML string .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Get the message .
1912	Create a log record .
1913	Login to LiveEdu account .
1914	Load a support plugin .
1915	Update the query string with the given URL .
1916	Iterate over chunks of file fd .
1917	Return set of required plugins .
1918	Check the file output .
1919	Create a file output .
1920	Create an HTTP server .
1921	Iterate over http requests .
1922	Creates an output stream .
1923	Helper to output a stream to a stream .
1924	Open a stream .
1925	Write a stream to a file .
1926	Read a stream from a stream .
1927	Process a stream .
1928	Fetch streams from plugin .
1929	Return a list of streams for a given plugin .
1930	Resolve a name from a list of streams .
1931	Formats a list of valid streams .
1932	Sets up the plugin for the given URL .
1933	Prints the list of available plugins .
1934	Authenticate streamlink with Twitch .
1935	Load plugins from a directory .
1936	Setup command line arguments .
1937	Setup console .
1938	Setup the HTTP session
1939	Load the plugins .
1940	Set up the options .
1941	Log current version .
1942	Extract the stream id from the given text .
1943	Search for an embed .
1944	Set a single option .
1945	Retrieve a single option from the server .
1946	Set plugin option .
1947	Get plugin option .
1948	Resolve a given URL .
1949	Load plugins .
1950	Converts a value to hours minutes seconds .
1951	Validate that string starts with string .
1952	Validate that string ends with string .
1953	Validate a string .
1954	Creates a getter for the given attr .
1955	Return a copy of the filter function .
1956	Apply a function to each element of a dictionary .
1957	Validate a URL .
1958	Find element in xpath .
1959	Find all occurrences of xpath .
1960	Try to find the url of the player .
1961	Parse M3U8 data .
1962	Return a list of supported players .
1963	Login to Dologin .
1964	Extract the stream id from html .
1965	Extract the stream info from the HTML .
1966	Login to InfluxDB .
1967	Applies a function to the map .
1968	Make an API call .
1969	Start a new session .
1970	Get information about a media .
1971	Create an API session .
1972	Compress a string .
1973	Helper to output a character formatter .
1974	Format a string for printing .
1975	Read n bytes from the stream .
1976	Return the value of the code .
1977	Return an explanation .
1978	Set the decoding table .
1979	Set the length of the sequence .
1980	Displays the given bitPattern .
1981	Read a tuple from a stream .
1982	Return an explanation for the given index .
1983	Return the value at index .
1984	Return the span of the table .
1985	Return the value at index .
1986	Generate a Mnemonic .
1987	Return mnemonic string .
1988	Return a list of actions .
1989	Evaluate the given action .
1990	Create a HEX data string .
1991	Process a stream .
1992	Metablock length
1993	Determines if the stream is uncompressed .
1994	Set block type .
1995	Convert a list of values into a MTF
1996	Read a prefix array .
1997	Compute the monochrome of a color .
1998	Polychrome polychrome .
1999	Create a pyarrow table from a DataFrame .
2000	Monkey patch Dataset .
2001	Add Cartesian vectors to Cartesian coordinates .
2002	Add virtual columns to motion .
2003	Return a graphviz representation of the graph .
2004	Compute the counts for each occurrence .
2005	Return a new Mapper with the given nan_mapping .
2006	A vaex app
2007	Opens multiple files .
2008	Create an astropy table from SAMP .
2009	Create a DatasetAstropy from a table .
2010	Create a DataFrame from a list of arrays .
2011	Construct a NumPy array from a list of arrays .
2012	Create a DataFrame from a pandas DataFrame .
2013	Load data from CSV file .
2014	Create a vex server
2015	Derivative of Zeldovich .
2016	Concatenate two lists .
2017	Returns a new column of the given range .
2018	Open a dataset .
2019	Evaluate the given expression .
2020	Decorate a function to be executed after a call .
2021	Return the set of columns that depend on the given ds .
2022	Run a task .
2023	Sort the selection .
2024	Get information about a file .
2025	Clear the background image .
2026	Wait for the plot to finish .
2027	Open a document .
2028	Write a file to a file .
2029	Split masked arrays into a single array .
2030	Return the nop op .
2031	Compute the first element of an expression .
2032	Calculate the mean of an expression .
2033	Calculate the sum of an expression .
2034	Compute the variance of an expression .
2035	Compute the covariance between x and y .
2036	Compute the minimum value of an expression .
2037	Compute the minimum value of an expression .
2038	Calculate the median percentile of an expression .
2039	Plot a matplotlib widget .
2040	Calculate healpix count .
2041	Plot the healpix plot .
2042	Plot a 3D 3D figure .
2043	Return the dtype of the expression .
2044	Get the private directory .
2045	Get the state of the state
2046	Set the state .
2047	Remove virtual meta files
2048	Write virtual meta data to disk .
2049	Write the meta data .
2050	Return a list of subspaces .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Return a dict representation of the table .
2055	Return a copy of the DataFrame with selected columns .
2056	Convert DataFrame to Pandas DataFrame .
2057	Convert vex_df to arrow table .
2058	Create an astropy table .
2059	Adds a column to the DataFrame .
2060	Renames a column .
2061	Add virtual columns to cartesian coordinates .
2062	Add Cartesian vectors to cartesian coordinates .
2063	Adds cartesian vectors to cartesian coordinates .
2064	Add virtual columns to cartesian .
2065	Add a rotation matrix to the xnew .
2066	Add virtual columns to cartesian .
2067	Add Cartesian coordinates to spherical coordinates .
2068	Adds a virtual column .
2069	Delete a virtual column
2070	Add a variable .
2071	delete a variable
2072	Return the last n rows .
2073	Print the last n rows .
2074	Describe features .
2075	Display the HTML table .
2076	Set the current row to value .
2077	Return a list of column names .
2078	Return a new DataFrame with rows removed .
2079	Return a new DataFrame with selected indices .
2080	Extract the range from the range .
2081	Draw samples from the model .
2082	Splits a single partition .
2083	Split the sequence into individual parts .
2084	Sort the data .
2085	Calculate physical column .
2086	Undo the selected selection .
2087	Toggle the selected selection .
2088	Determines whether a selection can beredo or not .
2089	Create a new selection expression .
2090	Return a new selection with the selected columns .
2091	Remove rows with missing values .
2092	Select rectangle .
2093	Select a box .
2094	Select a circle .
2095	Select ellipse .
2096	Create a SelectionLasso .
2097	Returns a new |Selection| object with the selected selector .
2098	Set selection .
2099	Create a selection .
2100	Find a valid name .
2101	Returns the root nodes of the graph .
2102	Return a graphviz representation of the graph .
2103	Sort a column by label .
2104	Encode a column as ordinal .
2105	Return a Dataset representing the data .
2106	Returns the length of the sequence .
2107	Hashes two DataFrames .
2108	Concatenate two DataFrame objects .
2109	Export an hdf5 file .
2110	Add a column .
2111	Patch a DataFrame .
2112	Register a function as a function .
2113	Fill NaN values with NaN .
2114	dayofofofweek
2115	dayofofofyear
2116	Determines if x is a Leap year .
2117	Returns a pandas Series representing the year .
2118	Time series .
2119	Return the month name .
2120	day of day
2121	Date of day .
2122	Returns the weekofofofofofofofyear .
2123	Calculate the hour of x .
2124	Convenience function to take a minute .
2125	Convert seconds to seconds .
2126	Capitalize x .
2127	Concatenate two strings .
2128	Determines if a string contains a pattern .
2129	Return the number of characters in x .
2130	Find substring in x .
2131	Get a column string from x .
2132	Return the index of a string in x .
2133	Convert x to lowercase .
2134	Remove a string from x .
2135	Pad a string to a string .
2136	Return a string of x .
2137	Find substring in x .
2138	Return the index of a string in x .
2139	Rearrange x .
2140	Reverse string .
2141	Return a slice of x .
2142	Strip a string from x .
2143	Return the title of x .
2144	Convert a string x to an upper column .
2145	Return the autotype of an array .
2146	Return a copy of this R .
2147	Write properties to file fh .
2148	Write a comment to file .
2149	Write a property .
2150	Iterate over properties of a file .
2151	Generate newlines for a file .
2152	Displays the versions of the library .
2153	Rename a keyword .
2154	Set the fft library .
2155	Tracks a track to a file .
2156	Adjust the pitch tuning of the audio file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert a note to a note string .
2161	Convert hz to mol .
2162	Calculate the frequency for a given mel .
2163	Return fft frequencies .
2164	Calculate the frequency for a given frequency .
2165	Calculate mel frequencies .
2166	Calculate A weighting for a given frequencies .
2167	Compute time - like samples from X .
2168	Calculate samples of X .
2169	Calculate the CQT - FQT - FrequencySeries .
2170	Perform pseudo - CQT .
2171	Calculate the ICQT frequency FQT .
2172	Compute the FFT FFT for a frequency domain .
2173	Trims a stack from a cqt_resp
2174	Compute Cqt response
2175	Calculate the low - level downsample count .
2176	Decompose a signal using the decompression algorithm .
2177	Calculate the cost of the cost function .
2178	Backtracking function .
2179	Viterbi implementation .
2180	Compute Viterbi negation of a transition matrix .
2181	Uniform transition matrix .
2182	Create a transition loop .
2183	Compute a transition cycle for a given number of states .
2184	Create a transition matrix for a given number of states .
2185	Detect the detection of the onset .
2186	Compute the onset strength .
2187	Calculate the backtrack based on the energy .
2188	Calculate onset strength
2189	r Write a csv file to a csv file .
2190	Write a wav file .
2191	Calculate a colormap given data .
2192	Plot a waveplot .
2193	Set image .
2194	Convert matplotlib coordinates to mesh coordinates .
2195	Validate the axes .
2196	Helper function to scale axes .
2197	Calculate the FFT frequency series .
2198	Calculate mel - frequency basis .
2199	Calculate the frequency in Hz .
2200	Calculate the coordinates of the lattice .
2201	Calculate the coordinate time .
2202	Estimate the tuning of a piptrack .
2203	Calculate the piptrack
2204	Calculate the Hessian of the impact function .
2205	Calculate harmonic .
2206	Calculate the percussive .
2207	Compute the time stretch of a time series .
2208	Calculate pitch shift .
2209	Return a mingled version of y .
2210	Convert a signal from a signal to a frame .
2211	Trim data from a signal .
2212	Splits the signal at the given location .
2213	Phase vocab .
2214	Convert amplitude to amplitude .
2215	Compute the spectrogram of the data .
2216	Calculate the beat track .
2217	Decomposes a set of components into a single matrix .
2218	N - similarity matrix .
2219	Helper function for _nn_filter .
2220	calculate mel frequency
2221	Calculate the chroma
2222	Creates a float window .
2223	r Calculates the frequency for a frequency series .
2224	r Calculates the frequency lengths of a constant q .
2225	Convert CQ to chroma .
2226	Calculate the bandwidth of a window .
2227	Get a window for a given window .
2228	r Multirate FFT .
2229	r Calculates the frequency frequencies for a given tuning tuning .
2230	Apply a window - fill function to x .
2231	Calculate the number of frames for a given window .
2232	Apply a window filter to the data .
2233	Calculate the spectral centroid of the spectrum .
2234	Calculate the spectral rolloff .
2235	Calculate the spectral density .
2236	Calculate the features for a given signal .
2237	Calculate the zero crossing rate .
2238	Calculate the chroma spectrogram .
2239	r Calculates the chroma for a given bin .
2240	Calculate the Melspectrogram
2241	Compute the Jaccard between two integers .
2242	Determines the best match for the given intervals .
2243	Match two intervals .
2244	Attempt to match a range of intervals .
2245	Matches two events .
2246	Calculate the salience
2247	Calculate the interpolation of the interpolated harmonics .
2248	1D interpolation .
2249	Compute the harmonics .
2250	Load an audio file .
2251	Load an audioread .
2252	Convert y to mono .
2253	Resample a signal .
2254	Calculate the autocorrelation function for a given axis .
2255	Compute lpc .
2256	Create a series of clicks .
2257	Calculate tone
2258	Chirp chirp .
2259	Get a set of files matching extensions .
2260	Takes an audio file and writes it to disk .
2261	Process arguments .
2262	Calculate the hpss output .
2263	r beat track .
2264	Calculate the beat score for a given aperture .
2265	Compute the local score .
2266	Compute the track track for a given period .
2267	Return the last beat for a given cumulative score .
2268	Convert recurrence matrix to lag matrices .
2269	Convert a lag array to a recurrence matrix .
2270	A decorator to wrap a function in a time series .
2271	Subsegment data .
2272	Agglomerative clustering .
2273	Generate path - enhancer path .
2274	Detect onset detection .
2275	Create a frame .
2276	Validate audio .
2277	Convert x to int .
2278	Fix the length of a data array .
2279	Sort an array along a given axis .
2280	Normalize a matrix .
2281	Returns the localmax of x .
2282	Picks a peak using the given parameters .
2283	Sparsify rows .
2284	Roll x along axis .
2285	Convert x to float .
2286	Convert index to slice .
2287	Syncs an array of data .
2288	Soft mask .
2289	Small vectorized version of x .
2290	Write a video to a video file .
2291	Read the current position .
2292	Get a single frame .
2293	Write frame to csv file .
2294	Displays a progress bar .
2295	Compute the progress bar for each task .
2296	Flip image .
2297	Rotate the image .
2298	Create a new bounding box clipping .
2299	Scale a bounding box .
2300	Multiply a bounding box .
2301	Impads an image to a given shape .
2302	Convert an image to multiple pixels .
2303	Convert a scale to a scale .
2304	Resize a cv2 image
2305	Resize an image to an image .
2306	Resize an image .
2307	Register a file handler .
2308	Convert an integer to a priority .
2309	Determines the minimum value of an array .
2310	Display an image
2311	Display the bounding boxes of an image .
2312	Read a flow .
2313	Write a flow to a file .
2314	Determines the flow of the given dy .
2315	Load the state dictionary into the model .
2316	Load model checkpoint .
2317	Convert a state dictionary to CPU .
2318	Save a checkpoint .
2319	Init optimizer .
2320	Initialize the logger .
2321	Get the current optimizer .
2322	Register a hook .
2323	Run a workflow .
2324	Register training hooks .
2325	Convert a video file to a file .
2326	Resize a video .
2327	Cut video .
2328	Concatenate video_list into video_list .
2329	Create a list from a file .
2330	Read a dictionary from a file .
2331	3x3 convolution with padding
2332	Create an object from a dictionary .
2333	Read an image .
2334	Decode an image from bytes .
2335	Write image to file .
2336	Convert a BGR color image to a color image .
2337	Convert black pixels to BGR .
2338	Cast input to dst_type .
2339	Determines whether a sequence is a sequence of type .
2340	Slice a list of lists into a single dimension .
2341	Decorator to check prerequisites .
2342	Average values .
2343	Create a scatter plot of a device .
2344	Convert a color to a color tuple .
2345	Check the time of a timer .
2346	Start the timer .
2347	Returns the elapsed time of the timer .
2348	Returns the elapsed time of the timer .
2349	Display a flow
2350	Convert an RGB color to RGB .
2351	Create a color wheel .
2352	Compute accuracy .
2353	Create a scatter plot from target_gpus .
2354	Create kwargs from kwargs .
2355	Execute the request and return the response .
2356	Send a JSON - RPC request .
2357	Return the raw text as a string .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Make a request .
2361	Start the worker threads .
2362	Normalize a task v2 .
2363	Parse yaml line numbers .
2364	Return the wheel distribution name .
2365	Returns the name of the archive .
2366	Add packages to the setup . py file .
2367	Convert an egginfo file to a distribution .
2368	Create a text message .
2369	Create a SuggestedAction for the given actions .
2370	Create an attachment .
2371	Create a list of attachments .
2372	Create an attachment .
2373	Create a trace .
2374	Sets the telemetry client .
2375	Read the specified keys .
2376	Write changes to the store .
2377	Delete the specified keys .
2378	Create StoreItem object .
2379	Create a dict representation of the store .
2380	Sanitize a key .
2381	Create db and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fill QNnaEvent with QNnaEvent .
2385	Returns the conversation reference for the given activity .
2386	Get the step name .
2387	Returns True if the channel supports suggested actions .
2388	Check if card supports card actions .
2389	Return the channel id .
2390	Determines if the given token is a JWT token .
2391	Create an Attachment for a hero card .
2392	The list of parameters for this parameter .
2393	Return a mirror of this instance .
2394	Return the inverse of this gate .
2395	Set the c_if parameter .
2396	Return a copy of this instance .
2397	Return the qasmif string .
2398	Return the qasm parameter .
2399	Run a circuit .
2400	Apply the transformation to the given dag .
2401	Return a list of all passes .
2402	Dump all passes .
2403	Create a new FlowController .
2404	Add a UBase to the model .
2405	Return the parameters for a single gate .
2406	Return the matrix of a single gate .
2407	Return the einsum index for a matrix .
2408	Return einsum matrix for einsum indices .
2409	Helper function for einsum multiplication .
2410	Convert a circuit into a DAG circuit .
2411	Exponential fit function .
2412	Calculate the OSC fit function .
2413	Plot the coherence of the function .
2414	Calculate the raw data
2415	Plot a function to plot data .
2416	Split runs on a list of runs .
2417	Compose the dual polynomial .
2418	Convert YZ to YYZ .
2419	Validate input state .
2420	Trim the given image .
2421	Get the index of a gate .
2422	Convert a circuit into an instruction .
2423	Compute the layout for the given dag .
2424	Return the best connected subgraph of the network .
2425	Generate a Barrier
2426	Calculate the average value of a given observable .
2427	Process the bit_id of a node .
2428	Process a custom unitary node .
2429	Processes a gate .
2430	Process CXML node .
2431	Processes a Measure .
2432	Process if node .
2433	Create dag op .
2434	Return the duration of a channel .
2435	Return the start time of a channel .
2436	Chops stop time .
2437	Iterate over instructions for the given time .
2438	Check the type of the given data .
2439	Dump additional data .
2440	Load additional data .
2441	Create a validation schema for a given schema .
2442	Validate a model instance .
2443	Validate the model after init_method .
2444	Return the data as a dict .
2445	Create a model instance from a dictionary .
2446	Calculate the Fourier transform .
2447	Return a partial trace vector .
2448	Vectorize density matrix .
2449	De - vectorize a matrix .
2450	Convert choi to rauli matrix .
2451	Chunk an array .
2452	Return the outer product of two vectors .
2453	Return the concurrence of a state .
2454	Calculate shannon entropy .
2455	Calculate shannon entropy .
2456	Calculate mutual information .
2457	Calculate the entanglement of a state .
2458	Calculate Shannon entropy .
2459	Flatten a schedule .
2460	Shift a schedule .
2461	Create a new schedule .
2462	r Add a schedule component .
2463	Add a new U3 gate .
2464	Return the status of the backend .
2465	Start the timer .
2466	Return the elapsed time in seconds .
2467	Disassemble a run .
2468	Calculate hamming distance .
2469	Construct quaternion from axis .
2470	Construct a quaternion from Euler angles .
2471	Normalize the quaternion .
2472	Convert the image to a matrix .
2473	Convert the polynomial to zeromials
2474	Convert the data to a dictionary .
2475	Plot a histogram .
2476	Check the type of the element .
2477	Check that the index is out of the range .
2478	Check whether a matrix is square .
2479	Check if a matrix is diagonal .
2480	Check if op is symmetric matrix .
2481	Determines if a matrix is a Hermitian matrix .
2482	Check whether a matrix is positive definite .
2483	Check whether a matrix is identity matrix .
2484	Determines whether a matrix is a unitary matrix .
2485	Convert input data to a quantum channel .
2486	Convert input data to superop .
2487	Convert data to Kraus operator .
2488	Convert data to Chi .
2489	Convert PLM to PTM .
2490	Convert input data to stinespring .
2491	Convert input data to operator .
2492	Convert an operator to an operator .
2493	Convert a channel to operator representation .
2494	Convert a superop .
2495	Convert data to superop .
2496	Convert kraus operator to choi .
2497	Convert a polynomial to a Kraus operator .
2498	Convert data to kinespring pairs .
2499	Convert a series of stinespring data to a polynomial .
2500	Convert kraus to stine pairs .
2501	Convert Kraus operator to superop
2502	Convert an input matrix to achoi transform .
2503	Convert a scalar value to ai matrix .
2504	Rearvel product .
2505	Transforms data from Pauli matrix .
2506	Check that the input_dim is a n - qubit channel .
2507	Hide tick lines and labels .
2508	Set label convention .
2509	Clears the scene .
2510	Add vectors .
2511	Add an annotation .
2512	Render the figure .
2513	Plot the front frame .
2514	Show the figure .
2515	Calculate two qubit kwargs .
2516	Return the center of the image .
2517	The center of the image .
2518	The center of the bot .
2519	Returns the length of the bot .
2520	Returns the parameters for a given instruction .
2521	Returns the label for the given instruction .
2522	Return a latex representation of the parameter .
2523	Compile a circuit .
2524	Add deprecation warnings .
2525	Return information about the local hardware .
2526	Check if a connection exists .
2527	Check the status of a job .
2528	Compute a constant .
2529	Return the square of a complex number .
2530	Calculate a triangular triangle .
2531	Return the cosine of a complex .
2532	r Fixed Gaussian_sigma_sigma_sigma_sigma .
2533	r Generate a Gaussian of the given times .
2534	Derivative of the Gaussian distribution .
2535	r Gaussian .
2536	Default pass manager .
2537	Return a default pass manager instance .
2538	Check if a given register has a registered register .
2539	Return a mirror of the data .
2540	Inverse of self .
2541	Append an instruction .
2542	Attach an instruction .
2543	Add a quantum register .
2544	Raises an exception if qubits are not duplicated .
2545	Check that qargs are in the circuit .
2546	Checks that the cargs argument is valid .
2547	Raises a QiskitError if the circuit is compatible
2548	Return a string representation of the QR code .
2549	Draw the circuit .
2550	Return the number of gates in the buffer .
2551	Returns the total number of rows in the table .
2552	Counts the number of operations in the database .
2553	Return the number of connected components .
2554	Bind parameters to the circuit .
2555	Bind the given parameter to the database .
2556	Draw pulse drawer .
2557	Calculate forward N swaps .
2558	Map a set of gates to free gates .
2559	Calculate the distance between two gates .
2560	Return the score of a step .
2561	Creates a copy of the DAG metadata
2562	Transform a gate for a gate .
2563	Create a swap gate from a layout .
2564	Run the decomposition .
2565	Adds a physical qubit to the coupling graph .
2566	Add an edge to the graph .
2567	Return a sub - graph of the coupling map .
2568	Return the list of physical qubits .
2569	Check if the connection is connected .
2570	Compute distance matrix .
2571	Compute the distance between two nodes .
2572	Transpile a binary quadratic model .
2573	Create a new Cu1Gate .
2574	Inverse of all instructions .
2575	Set the Q_if_ifs and qregs .
2576	Set the C_if_if attribute .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe from an event .
2580	Publish an event .
2581	Initialize the qubits .
2582	Define the circuit .
2583	Convert gates to uncompute circuit .
2584	Calculate the bloch angle of a complex .
2585	Generate a multix circuit .
2586	Return True if value is a virtual register .
2587	Return a copy of this layout .
2588	Combine a layout into an edge map .
2589	Create a new ToffiGate .
2590	Insert a schedule into the schedule .
2591	Check if the fenced property is protected .
2592	Convert a list of gates into a list of integers .
2593	Run the simulation .
2594	Update the layout of a matrix .
2595	Return the Pauli group of the Pauli operators .
2596	r Convert a label to a Pauli string .
2597	Initialize from x z .
2598	r Compute the Pauli divergence .
2599	Convert this matrix to an operator .
2600	Converts this circuit to a QuantumCircuit .
2601	Update the number of qubits .
2602	Update x .
2603	Insert a matrix into the matrix .
2604	Append a list of Pauli components .
2605	Delete all qubits .
2606	Generate a random vector .
2607	Construct a Pauli operator .
2608	Calculate the measure outcome of a state
2609	Add a sample to the classical memory .
2610	Add a quantum measurement .
2611	Adds a qubit to the qubit
2612	Validate initial statevector .
2613	Initialize the statevector .
2614	Get the state vector .
2615	Validate the sample sampling .
2616	Run a job .
2617	run a job
2618	Validate the given QObject .
2619	Validate initial unitary .
2620	Initialize the unit .
2621	Get unit vector .
2622	Run a job .
2623	Validate the configuration .
2624	Check if an object is a bit
2625	Run Transpiler .
2626	Check if the interval has overlap .
2627	Shift the interval .
2628	Return a new Timelot with the given time .
2629	Return the start of a channel .
2630	Return the number of channels stop .
2631	Returns True if the timeslot is merged with the given timeslotCollection .
2632	Returns a new TimelotCollection with the given timeslotCollection .
2633	Shift a TimelotCollection by a given number of slots .
2634	Report an issue .
2635	Helper function to process the data .
2636	Plots the state paulive c .
2637	Create a new RZ gate .
2638	Swap two DataFrames .
2639	Initialize the backend property
2640	Create the program graph .
2641	Determines the next program based on Q2H mapping .
2642	Determines the best CX that can be used to compute the CX .
2643	Given a prog_qubit return the remaining qubits .
2644	Run the program .
2645	Return a list of instructions .
2646	Inverse of the gate .
2647	Set the Q_if_ifs
2648	Set the c_if_if attribute .
2649	Determines if the matrix is unitary .
2650	conjugate operator
2651	Return a transpose operator .
2652	Return the power of the operator .
2653	Shape tuple .
2654	Convert an instruction to an operator .
2655	Creates a new DAGCircuit update based on the matrix i and j .
2656	Convert a bitstring into a list of bit strings .
2657	Format a level zero memory .
2658	Formats a level 1 - memory memory memory .
2659	Format a level2 memory count list .
2660	Formats the counts dictionary
2661	Formats a statevector from a vector .
2662	Format a complex matrix .
2663	Decorator for methods that require a job .
2664	Submit the job .
2665	Status of the job .
2666	Return True if this range is included in this range .
2667	Plot a single blochctor .
2668	Return the qubit frequency for the user .
2669	Return the mean value for the user - lo .
2670	Run the circuit .
2671	Plot the state of a quantum state .
2672	Return n - th k k .
2673	Return lex index .
2674	Plot the paulvec distribution .
2675	Return the unique hardware backends .
2676	The op .
2677	Create a sample pulse .
2678	Create a zero pulse .
2679	Calculate the sample pulse .
2680	Simulate a sample of the sawtooth .
2681	Create a sample of a triangle .
2682	Calculate the cospulse .
2683	Simulate a sin pulse .
2684	r Sample a Gaussian pulse .
2685	r Sample derivative of a gaussian posterior distribution .
2686	Create a GaussianPulse .
2687	Calculate the distance between x and y .
2688	Write a string to a string .
2689	Get backend instance .
2690	Rename a register
2691	Remove all ops named by name .
2692	Add a quantum register .
2693	Adds a classical register .
2694	Add a wire to the DAG .
2695	Raises an exception if the condition is invalid .
2696	Return all the bits in a given cond .
2697	Add node to DAG node .
2698	Applies an operation back to the graph .
2699	Verify that the Edgem map is valid
2700	Check the validity of a wire map .
2701	Map a condition on the wire map .
2702	Extend back register .
2703	Compose back_map into a DAG .
2704	Check that the wire list is valid .
2705	Creates a dictionary mapping node names to predictions for each node .
2706	Return a dictionary mapping the input_map to the output_map .
2707	Return a list of topological nodes .
2708	Iterate over all edges .
2709	Returns a list of nodes that match the given op .
2710	Return a list of gate nodes .
2711	Return a list of named nodes .
2712	Get two Q gates .
2713	Return the predecessors of a node .
2714	Return the predecessors of a node .
2715	Return the ancestors of a node .
2716	Returns a list of successors of a node .
2717	Remove an op node from the graph .
2718	Removes ancestors of a node .
2719	Removes descendants of a node .
2720	Removes all non - ancestral nodes of a node .
2721	Removes all descendants of a node .
2722	Return a list of DAGCircuit objects .
2723	Generate a sequence of DAG layers .
2724	Iterate over all nodes in the input map .
2725	Return a list of runs grouped by namelist .
2726	Iterate over nodes on a wire .
2727	Count the number of topological operations .
2728	Return a dictionary of properties .
2729	Create a tomography basis .
2730	Calculate the Pauli Markov basis for a Pauli measure .
2731	Create a tomography set .
2732	Processes a tomography set .
2733	Create a tomographic circuit .
2734	Calculate information for a given tomography .
2735	Calculate the marginal counts for each sample .
2736	Fits a tomographic projection using the given method .
2737	Calculate Leastq fit .
2738	Return a projection of op_list .
2739	Compute the linear inverse of a tensor .
2740	Computes the wizard for the given rho .
2741	Calculate Wigner data
2742	Assign a measurement function to the gauge .
2743	Print a message to stdout .
2744	Monitor a job .
2745	Calculate euler angles .
2746	Simplify a 2 gate .
2747	Run the graph .
2748	Generate a tab for the given backend .
2749	Build the job history .
2750	Plots the history of the given jobs .
2751	Draws the animation .
2752	Create a new Cu3Gate .
2753	Build a Bell circuit .
2754	Transpile a binary quadratic model .
2755	Simulate a transpile circuit .
2756	Execute multiple experiments .
2757	The drive channel .
2758	The control channel .
2759	The |MeasureChannel| object containing the |Index| object .
2760	Acquire the channel .
2761	Calculate the input state .
2762	Assemble multiple experiments .
2763	Remove the Qiskit log .
2764	Plot a state - hinton state .
2765	Calculate the frequencies between two channels .
2766	Handle input data .
2767	Pop and return the stack .
2768	Push the stack to the stack .
2769	Run DAG .
2770	Returns the bound method for the given instruction .
2771	Convert an acquire command to acquire mode .
2772	Convert frame change .
2773	Convert a persistent value to a continuous value .
2774	Convert a drive to a drive .
2775	Convert a QObject to a QObject .
2776	Update the annotations .
2777	Decorator for sampling function
2778	Filter back backends based on their configuration .
2779	Resolve a backend name .
2780	Convert a dag to a QuantumCircuit .
2781	Convert a matrix observable to a dictionary .
2782	Updates the name of the current instance .
2783	Verify that a bit is declared as a bit .
2784	Verify an expression list .
2785	Verify a gate definition .
2786	Verify that the given object is valid .
2787	Verify a list of objects
2788	Find a column in the input token .
2789	Validate debug value .
2790	Parse data .
2791	Run parser .
2792	Parse the Qasm file .
2793	Add a new CZ gate .
2794	Calculate the basis of a string .
2795	Return a projection matrix for a state .
2796	Calculate purity .
2797	Runs the graph .
2798	Creates a backend widget
2799	Update the backends .
2800	Generate a new job widget .
2801	Run the Dx graph .
2802	Get a specific backend .
2803	Shape of bipartite .
2804	Get the register names for the given bit labels .
2805	Truncate a float .
2806	Render a latex array .
2807	Calculate the depth of the image .
2808	Returns the width of the Beamer page .
2809	Load schema from file .
2810	Get a validator for a schema .
2811	Load schema and validators .
2812	Validate JSON against a given schema .
2813	Format the given error message .
2814	Compute the majority of two points .
2815	Calculate unmajority .
2816	Generate a latex image for a QCircuit .
2817	Creates a matplotlib drawing wrapper .
2818	Return a random unitary operator .
2819	Generate a random density matrix .
2820	Generate a genibre matrix .
2821	Generate a random density .
2822	Generate a random density .
2823	Returns a list of tuples describing the call s children .
2824	Power of the matrix .
2825	Compose a subsystem .
2826	Convert an instruction to a SuperCircuit .
2827	Run DAG circuit .
2828	Create a QKunk object from a circuit .
2829	Run DAG instruction .
2830	Run DAG .
2831	Define the U3 gate .
2832	Validate the given value .
2833	Check the type of the container .
2834	Sets the atol .
2835	Sets the RTTol .
2836	Reshape the input dimensions .
2837	Returns the dimensions of the input dimensions .
2838	Returns the output dimensions of the output .
2839	Return a copy of this object .
2840	Return the power of this matrix .
2841	Return the number of dimensions for a given dimension .
2842	Einsum operator .
2843	Deserialize schema .
2844	Serialize a value into a dictionary .
2845	Check the type of the model .
2846	Compute the fidelity between two states .
2847	Svd function .
2848	Return the inverse of this snapshot .
2849	Set the label .
2850	Determines if a unit is unitary .
2851	Convert to an operator .
2852	Converts this QTP instruction to an instruction .
2853	Initialize a transformer .
2854	Sort enum by symbol name .
2855	Monkey patch strptime
2856	Get a dictionary of locales .
2857	Get all available locale objects .
2858	Check if tokens are valid .
2859	Split a string into tokens .
2860	Parse a date string .
2861	Parse time string .
2862	Determines if a given date string is applicable to the given date .
2863	Translate a date_string to a string .
2864	Parse a date string .
2865	Creates an ammo generator
2866	Convert Java exception to Java exception .
2867	Convert a Java exception to a Java exception .
2868	Read configuration .
2869	Create a phantom config file
2870	Get information about the stream .
2871	Prepare the configuration .
2872	Logs a stderr to stderr .
2873	Expand a string into a string .
2874	Read StepperWrapper .
2875	Prepare stepper info
2876	Return the filename of the StPD file .
2877	Read the stepper options .
2878	Write the stepper options .
2879	Make the stepper file .
2880	Create a step .
2881	Return the value at time t .
2882	Execute a command .
2883	Decode the monitoring data into a dict .
2884	Make the points for a label .
2885	Publish a key .
2886	Count the number of matched codes .
2887	Stop the worker thread .
2888	Feed the stpd file .
2889	Initialize the logging .
2890	Add user options .
2891	Configure the application .
2892	Do graceful shutdown .
2893	Collect stats from the queue .
2894	Notify listeners
2895	Create a marker for the specified marker type .
2896	Parse duration .
2897	Start the agent on localhost .
2898	Start the agent .
2899	Discovers the jmeter UDP port .
2900	Add JMX components .
2901	Terminate the process .
2902	Read stats from the file .
2903	Create a criterion from a string .
2904	Parse the config file .
2905	Create a new agent startup config file .
2906	Check the disk usage .
2907	Check if memory is available .
2908	Get the terminal size .
2909	Get the right line for the widget .
2910	Truncate a line .
2911	Render the left panel .
2912	Render the screen .
2913	Add an info widget
2914	Fill the rectangle with the screen .
2915	Calculate the length of a line .
2916	Create a load plan .
2917	Get the level as a string .
2918	Add an info widget .
2919	Make a request to the writer .
2920	Load the plugins .
2921	Return the plugin with the given name .
2922	Returns a list of plugins matching the given type .
2923	Collect the given file .
2924	Add artifact file to collect .
2925	Create a temporary file .
2926	Load config files .
2927	Flush the config .
2928	Get all options from a section .
2929	Find sections by prefix .
2930	Decode statistics for a chunk .
2931	Get the cached info for this phantom .
2932	Prepares the monitoring agent .
2933	Poll for agents .
2934	Send the collected data to all listeners .
2935	Detect the telegraf configuration .
2936	Process data items .
2937	Decode the data for a given block .
2938	Subscribe to a channel .
2939	Run the event loop .
2940	Close this object .
2941	Perform a single HTTP request .
2942	Submit an order .
2943	Get an order by id .
2944	Get a specific position .
2945	List assets .
2946	Get a specific asset .
2947	Create a join - plan .
2948	Validate a dictionary parameter .
2949	Convert a dictionary of key - value pairs into a dictionary .
2950	Construct an event logger .
2951	Constructs a JsonEventLogger for a given json path .
2952	Read configuration from file .
2953	Return the configuration for a given repository .
2954	Format a GraphQL configuration .
2955	Get a pipeline by its name .
2956	Get a list of all pipelines .
2957	Get the next event in a queue .
2958	Execute a pipeline through a pipeline .
2959	Wait for all processes to join .
2960	Create a field for a Dagster type .
2961	Builds execution plan .
2962	Builds the pipeline .
2963	Build a sub - pipeline .
2964	Validate a solid name .
2965	Construct the publish commands .
2966	Release a new version
2967	Creates a passthrough context definition .
2968	Decorator that converts a selector to a selector schema .
2969	Decorator to convert a selector to a function .
2970	Block text .
2971	Download files from S3
2972	Upload file to S3 .
2973	A context manager for a user - code error .
2974	Create a new directory .
2975	Context manager for user - code execution .
2976	Create a Logger instance .
2977	Return True if the step has success otherwise False .
2978	Return True if step is skipped .
2979	Return the transformed values .
2980	Return the transformed value .
2981	Return the data for step failure .
2982	Returns a copy of the configuration dictionary .
2983	Check if a config value is valid .
2984	Check if a config value is valid .
2985	Execute a core transform .
2986	Convert an existing type to a DAGster type .
2987	Create a resource definition .
2988	Create an EventV2
2989	Merge execution steps into a single step .
2990	Get connection parameters .
2991	Create a new database connection .
2992	Create a new cursor .
2993	Close the database connection .
2994	Make a model from a model .
2995	Convert a dictionary into a list of dictionaries .
2996	Set the model form field .
2997	Converts the value to a MDL object .
2998	Apply filters to the queryset .
2999	Compute the Nfps uniform distribution .
3000	Compute the nfps at the given sizes .
3001	Compute the best partition for nfps .
3002	Compute the optimal partition for the given sizes .
3003	Calculate the Pearson correlation coefficient .
3004	Initialize the slots for the given seed .
3005	Calculate the byte size in bytes .
3006	Serialize the block into a binary buffer .
3007	Deserialize a LeanMinHash object .
3008	Update the hash function .
3009	Merge this MinHash into another MinHash .
3010	Creates a new MinHash instance .
3011	Return the index of the given entries .
3012	Returns an iterator over the sorted index values .
3013	Minimal hash .
3014	Remove a key from the dictionary .
3015	Update the rank .
3016	Returns the number of samples in the model .
3017	Merge this HyperLogLog into another HyperLogLog .
3018	Clears the memory .
3019	Compute the APK error .
3020	Calculate the KL divergence between the predicted values .
3021	Index all hashtables .
3022	Perform a query on minhash .
3023	Close all hashtables .
3024	Return an ordered list storage .
3025	Return a new unorderedSetStorage instance .
3026	Get user details .
3027	Get social login .
3028	Select a given text .
3029	Parse scoped selector .
3030	Parse a statement .
3031	Parse the value .
3032	Advance one line .
3033	Parse a configurable reference .
3034	Augment an exception message and reraise it .
3035	Converts a string to markdown format .
3036	Saves the session to the database .
3037	Converts a function into a wrapper function .
3038	Decorator to turn a function into a class .
3039	Format a value .
3040	Clears the configuration .
3041	Bind a parameter .
3042	Query the parameter for a given key .
3043	Determines if a function has a parameter .
3044	Get the argument spec from the cache .
3045	Extract positional parameter names from args .
3046	Get positional parameter names from positional arguments .
3047	Returns a dictionary of default values for the given function fn .
3048	Context manager for config_scope .
3049	Creates a decorator .
3050	Return a string representation of the operative configuration .
3051	Parse the configuration .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse a list of config files and return a list of dictionaries .
3055	Parse a config value .
3056	Finalize the configuration .
3057	Iterate over flattened values .
3058	Iterate over config values in a config dictionary .
3059	Validate a constant .
3060	Construct a Constant instance from an Enum .
3061	Return a list of selectors matching the given partial_selector .
3062	Get all matches matching the given partial selector .
3063	Return the minimal selector .
3064	Searches for a search query .
3065	Parse the Retry - after argument .
3066	Validate the value .
3067	Return the metadata as a dictionary .
3068	Set the value .
3069	Get a thing by id .
3070	Initialize the host .
3071	Set default headers .
3072	Prepare the HTTP request .
3073	Get a single thing
3074	Process a message .
3075	Perform a post request .
3076	Delete a thing .
3077	Start the service .
3078	Return the action description .
3079	Start the action .
3080	Mark the task as completed .
3081	Return the event description as a dictionary .
3082	Get IP address .
3083	Return a list of IPv6 addresses .
3084	Set the value forward .
3085	Notify external update .
3086	Return the thing description as a dict .
3087	Set the href prefix .
3088	Get a dictionary of property descriptions .
3089	Get a list of action descriptions .
3090	Get a list of event descriptions .
3091	Add a property .
3092	Remove a property .
3093	Get a property by name .
3094	Get a dictionary of properties .
3095	Set a property .
3096	Get action by name .
3097	Add an event .
3098	Add an available event .
3099	Perform an action .
3100	Remove an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Notify about a property
3106	Send an action to all subscribers .
3107	Send a message to an event .
3108	Add annotations to the model .
3109	Update records in the database .
3110	Bulk insert rows .
3111	Insert one or more fields .
3112	Insert one or more fields .
3113	Build a postgres insert compiler .
3114	Determines whether a field is a Magical field .
3115	Get the insert fields for a model instance .
3116	Called when a model is created
3117	Delete model instance .
3118	Checks whether a field is not None .
3119	Resolve a HStore expression .
3120	Return the SQL as a SQL string .
3121	Return a copy of this alias .
3122	Add join conditions to the table .
3123	Determines if a field is a Hstore field .
3124	Insert values into a list of objects .
3125	Creates a new hstore entry in the table .
3126	Rename a table .
3127	Drop a field from the table .
3128	Generate a required constraint name .
3129	Create SQL statement .
3130	Create a CustomCommand instance .
3131	Returns the base class for the Postgres DB backend .
3132	Create the database .
3133	Prepare the value for the field
3134	Form a RETURNING statement
3135	Returns the query as a SQL string .
3136	Rewrite insert .
3137	Rewrite insert update .
3138	Rewrite SQL statement .
3139	Builds the conflict target .
3140	Returns the model field for the given name .
3141	Formats the query field as a query string
3142	Formats the value of a field .
3143	Create a unique constraint for the given model .
3144	Renames a unique table .
3145	Adds a unique constraint to the table .
3146	Generate a unique constraint name .
3147	Iterate over unique keys .
3148	Add a new value to the field .
3149	Return the SQL for the compiler .
3150	Calculate the tdist95 percentile for a dataframe .
3151	Calculate the variance of the sample .
3152	Compute the T score of two samples .
3153	Determines whether two samples are significant .
3154	Given a list of nodes return the toposorts of the topology .
3155	Return the number of queens .
3156	Play a board .
3157	Select a board .
3158	Move a random play out .
3159	Filter benchmarks based on benchmarks .
3160	Expand the name of a benchmark group .
3161	Generate a string table .
3162	Initialize benchmarks .
3163	Returns the domain of the domain .
3164	Fetch messages from a given category .
3165	Parse raw posts .
3166	Retrieve information about a specific user .
3167	Fetch categories
3168	Fetch and parse rss entries
3169	Setup the command parser .
3170	Fetch items from given date .
3171	Returns the number of bugs for the given date .
3172	Returns a list of comments for the specified bug_ids .
3173	Returns a list of bug IDs for the given bug IDs .
3174	Returns a list of attachments .
3175	Returns a list of notes for the given issue id .
3176	Fetch merge requests .
3177	Get notes for a given merge .
3178	Get the versions of a merge .
3179	Retrieve the list of merged commits .
3180	Merge a merge .
3181	Get all versions for a given merge .
3182	Retrieve the merged version of a repository .
3183	Get all notes for a specific item .
3184	Get emojis for a given item_type .
3185	Get a list of notes for a specific item .
3186	Calculate the time to reset the rate limit .
3187	Fetch items from GitLab .
3188	Initialize the rate limit .
3189	Setup the argument parser .
3190	Fetch latest data from given date .
3191	Generate a metadata id .
3192	Get the members of a conversation .
3193	Retrieves information about a channel .
3194	Retrieve information about a user .
3195	Setup the command line parser .
3196	Return the timestamp of the metadata .
3197	Parse a csv file .
3198	Parse a XML string containing bugs .
3199	Parse a bug activity table .
3200	Logout from Bugzilla .
3201	Retrieves the metadata for the client .
3202	Return a paginated list of bug bugs .
3203	Retrieve a list of Bug objects .
3204	Get bug activity information .
3205	Fetch data from from to_date .
3206	Fetch events from a group .
3207	Retrieve events for a group .
3208	Get comments for a specific event .
3209	Get VRSVPPS for a group .
3210	Fetch a question
3211	Fetches the comments for the given question .
3212	Build question object .
3213	Gets all the questions for a given path .
3214	Get HTML for a question .
3215	Get comments for a post .
3216	Parse question question .
3217	Parse answers from question .
3218	Parse the number of HTML pages .
3219	Parse the user info .
3220	Fetch reviews for a given category .
3221	Extract reviews from raw JSON data .
3222	Fetch a Gerrit 28 .
3223	Returns the server version .
3224	Get the reviews for the last item .
3225	Return the next group item in the group .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute a command on remote .
3229	Setup the argument parser .
3230	Fetch data for a given issue .
3231	Fetch all attachments for an issue .
3232	Fetch all the messages for an issue .
3233	Fetch all activities for an issue .
3234	Fetches data for a user .
3235	Get a user by name .
3236	Get information about an issue .
3237	Get a collection of bugs .
3238	Get the URL for the project .
3239	Fetch data from the given path .
3240	Yields all subscriptions
3241	Find the group id .
3242	Perform a GET request
3243	Setup the command parser .
3244	Generate a UUID .
3245	Fetch archive .
3246	Fetch archive from archive .
3247	Find backends of the given package .
3248	Fetch archive metadata .
3249	Fetch metadata from an archive .
3250	Filter an item based on its metadata .
3251	Parse arguments .
3252	Set authentication arguments .
3253	Set the archive arguments .
3254	Set the output arguments .
3255	Run the archive .
3256	Initialize the archive manager .
3257	Return the timestamp of the metadata for the given item .
3258	Parse MBox message .
3259	Fetches and parses messages from a given date .
3260	Copy a mbox into a mbox .
3261	Validate a message .
3262	Convert a message to a dict .
3263	Get message from file .
3264	Fetch latest items
3265	Fetch latest items from repository .
3266	Parse git log .
3267	Initialize the git repository .
3268	Setup the argument parser .
3269	Parse the stream .
3270	Clone a repository .
3271	Count the number of objects in the repository .
3272	Determines whether the repository is detached .
3273	Update the repository .
3274	Syncs the Git repository .
3275	Return a list of git revisions .
3276	Logs a git repository .
3277	Return a generator that yields the specified commits .
3278	Fetch a package from GitRef .
3279	Extract commits from a given Pack .
3280	Update all refs
3281	Discover the git refs .
3282	Update ref .
3283	Execute a command .
3284	Reads stderr from the process .
3285	Run git command .
3286	Fetch tweets .
3287	Fetch a list of items from a given category .
3288	Get a list of tweets for a query .
3289	Setup the argument parser .
3290	Fetch categories
3291	Fetch data for a given category .
3292	Parses a search query .
3293	Fetch hits for given keywords .
3294	Given a metadata item return the timestamp .
3295	Return the metadata category .
3296	Fetches a list of pull requests for a given date .
3297	Fetch repo info from the server .
3298	Get list of reactions for an issue .
3299	Get list of reactions for a comment .
3300	Get issue assignments .
3301	Get a list of pull requests .
3302	Get a list of pull commits for a group .
3303	Get pull review reactions for a comment .
3304	Get a user
3305	Get a list of all the reactions for a given issue .
3306	Get a list of issues .
3307	Iterate over pull requests .
3308	Get repository .
3309	Get the list of reviewed reviews .
3310	Get pull commits
3311	Get review reactions for a comment .
3312	Get a user by login .
3313	Get user orgs for a given login .
3314	Get the rate limit .
3315	Get the rate limit for the tokens .
3316	Choose the best available token .
3317	Determines if the rate limit needs to be checked .
3318	Update the current rate limit .
3319	Initialize metadata .
3320	Store an archive in the database .
3321	Retrieve an entry from the archive .
3322	Create an archive .
3323	Generate a hash for a given request .
3324	Verify the archive .
3325	Load metadata .
3326	Return the number of rows in a table .
3327	Create the archive .
3328	Remove an archive .
3329	Search for archive files .
3330	Search for archive files .
3331	Search for files in the directory .
3332	Check the file type of a given filepath .
3333	Generate a range of months between two dates .
3334	Convert message to dict .
3335	Remove illegal characters from raw XML .
3336	Convert xml to dict .
3337	Parse a raw JSON response .
3338	Returns a list of issues .
3339	Get information about an issue .
3340	Retrieve information about a specific user .
3341	Perform a redmine request
3342	Fetch data .
3343	Fetch data from the repository .
3344	Get information about a repository .
3345	Maps custom fields to custom fields
3346	Filter custom fields based on custom fields .
3347	Parse a raw JSON response .
3348	Get list of issues .
3349	Get list of issues for given date .
3350	Get comments for an issue .
3351	Get the list of fields .
3352	Fetch a set of categories
3353	Gets a list of jobs for this repository .
3354	Get information about a particular job .
3355	Parse question questions .
3356	Return a generator of queries for the given date range .
3357	Setup the argument parser .
3358	Fetch reviews for a given category .
3359	Get the maximum timestamp of the review .
3360	Fetch 1 page .
3361	Get pages .
3362	Get the most recent pages .
3363	Fetch a specific category .
3364	Parse a JSON - RPC message .
3365	Filter a message by chats
3366	Retrieve a list of updates .
3367	Fetch articles for a group .
3368	Add metadata to an item .
3369	Parse an article .
3370	Fetch data from remote archive .
3371	Fetch an article .
3372	Fetch data from remote server .
3373	Retrieves data from an archive .
3374	Creates a http session .
3375	Setup the rate limit handler .
3376	Sleep for a rate limit .
3377	Update rate limit .
3378	Parse a Supybot log file .
3379	Returns a list of archive entries sorted by date .
3380	Returns a list of suybot archives in the directory
3381	Parse the message .
3382	Parse a SUPYBOT message .
3383	Parse SUPYBOT message .
3384	Fetch the topics for a given category .
3385	Parse the topics page .
3386	Get information about a specific topic .
3387	Send a post request .
3388	Fetch a list of tasks .
3389	Parse a JSON document .
3390	Parse list of users .
3391	Returns a generator of tasks .
3392	Retrieve transactions for a given list of phids .
3393	Get information about users .
3394	Get a list of phids .
3395	Make a Conduit Conduit Conduit Conduit Conduit Conduit Conduit Conduit Conduit Conduit Conduit API
3396	Generate a metadata id for an item
3397	Parse the contents summary .
3398	Retrieves the contents of the file .
3399	Retrieve historical content for a given content id .
3400	Parse measurement result .
3401	Parse the capabilities URL .
3402	Read an etree from a URL .
3403	Reads an etree from a string .
3404	Parses the results
3405	Build the base URL .
3406	Extract elements from complex type .
3407	Construct a schema for the given elements .
3408	Extracts the description from a URL .
3409	Generate a complex input with the given reference .
3410	Get information about a movie .
3411	Get information about a TV list .
3412	Get movie movies .
3413	Gets information about a specific project .
3414	Retrieves the alternative subtitles .
3415	Retrieve credit information .
3416	Get a list of external ids .
3417	Gets all keywords .
3418	Get recommendations .
3419	Get a list of release dates .
3420	Retrieve a list of releases .
3421	Retrieve a list of translations .
3422	Gets a list of similar movies .
3423	Gets a list of reviews .
3424	Retrieve a list of changes .
3425	Retrieve a list of upcoming events .
3426	Gets the currently playing player .
3427	Retrieve a list of popular values .
3428	Returns a dictionary with the top - rated ratings .
3429	Gets the state of the specified account .
3430	Rate a rating .
3431	Get movie credits .
3432	Get TV credits .
3433	Gets credit information .
3434	Get TV data .
3435	Gets information about a specific project .
3436	Get information about a movie .
3437	Gets information about a specific session .
3438	Get movie movies .
3439	Create a new token .
3440	This endpoint is used to validate a user s credentials .
3441	Create a new session .
3442	Create a new guest session .
3443	Returns a dictionary containing the movie s ratings .
3444	Get the status of an item .
3445	Create a list .
3446	Remove an item from the session .
3447	Clears a list .
3448	Gets the content ratings for a given id .
3449	Retrieve a list of similar attributes .
3450	Calls on on_air .
3451	Retrieves a specific season .
3452	Retrieves credits for a series .
3453	Gets a list of external ids .
3454	Gets information about a series .
3455	Gets the credits for a series .
3456	Gets a list of external ids .
3457	Set attributes from the response to a dictionary .
3458	Get information about a movie .
3459	Get a specific collection .
3460	Get information about a TV .
3461	Retrieve information about a person .
3462	Get information about a company .
3463	Get information about a specific keyword .
3464	Retrieve information about a single resource .
3465	Normalize a string .
3466	Calculate the number of refs .
3467	Calculate the number of samples in a reference sequence .
3468	Calculate Erfcc .
3469	Align two texts together .
3470	r Returns all descriptor objects in a module .
3471	Register a list of Descriptor objects .
3472	r Register a file descriptor .
3473	Prints a progress bar .
3474	r Determine if a descriptor is a subclass of a given descriptor .
3475	Convert this object to a JSON string .
3476	Get the current coordinate .
3477	r Compute the atomic S of an atom .
3478	r Returns the surface area of the surface .
3479	r Convert a molecule into a molecule object .
3480	Create a ConstDescriptor from a JSON string .
3481	r Add missing values .
3482	r Remove missing values from this object .
3483	r Returns a list of dictionaries .
3484	r Convert this object into a dictionary .
3485	r Returns the name of this object .
3486	Logs a function as a string .
3487	Decorator for synchronized functions .
3488	Print a progress message
3489	Print a message to stdout .
3490	Print an error message to stdout .
3491	Generate a temporary file .
3492	Set a temporary file .
3493	Remove all temporary files in temp files .
3494	Get the fixed path of the path .
3495	Gets the legal params for the given method .
3496	Merge opt params .
3497	Add command line options .
3498	Terminate the queue .
3499	Adds a task to the queue .
3500	Join the workers .
3501	Called when the worker is processed .
3502	Retrieve S3 keys from environment variables .
3503	Extract S3 keys from commandline options .
3504	Get the S3 keys from the s3 config file .
3505	Initialize s3_keys .
3506	Connect to S3 .
3507	List all S3 buckets .
3508	Recursively walk a directory tree .
3509	Walk a directory recursively .
3510	Expand source files .
3511	Upload a single file to a directory .
3512	Put files into a directory .
3513	Create a bucket .
3514	Update privileges .
3515	Prints a list of files
3516	Download a single file
3517	Get a list of files matching the source .
3518	Copy a single file .
3519	Copy files from one directory to another .
3520	Delete files from S3
3521	Recursively walk through a directory .
3522	Recursively sync files .
3523	Calculate the MD5 hash of a file .
3524	Get the MD5 of the file .
3525	Create a directory if it doesn t exist .
3526	Check if the MD5 cache file exists .
3527	Determines if the path matches the filter .
3528	Walk an S3 directory using s3_url .
3529	Return a list of objects that match the given object .
3530	Get file privilege for given source .
3531	Look up a HEAD object by its URL .
3532	Read a file from a file .
3533	Upload a file to S3 .
3534	Verify the file size .
3535	Write a file to a file .
3536	Copy a file or directory .
3537	Run a command .
3538	Validate parameters .
3539	Pretty print a list of objects .
3540	List S3 buckets .
3541	Handler for a bucket .
3542	Put files into S3 .
3543	Get a file handler
3544	Calls cat handler
3545	Dsync files
3546	CP3 handler
3547	Execute mv handler
3548	Delete files from S3 .
3549	File handler .
3550	Calculate the total size in bytes .
3551	Match date .
3552	Match the current time .
3553	Tries to match the given value .
3554	Validate option value .
3555	Discover Nexus Gateway .
3556	Start listening for messages .
3557	Get data from hub .
3558	Push data to the backend
3559	Generate a key .
3560	An exception handler
3561	Include a rollbar .
3562	Create a log handler .
3563	Retrieves the request object for a flask request
3564	Initialize rollbar .
3565	A decorator to wrap a function as a lambda function .
3566	Report a message to Rollbar .
3567	Search for items .
3568	Create an agent log file .
3569	Build the person data
3570	Add lambda context data .
3571	Add request data .
3572	Checks whether the given frame has the correct locale .
3573	Build request data .
3574	Build server data .
3575	Build a payload from a dictionary .
3576	Run the server .
3577	Compose a Hangul character .
3578	Decompose a Unicode Hangul letter .
3579	Checks if the given letter has jangul .
3580	Attach a word to a word .
3581	Check if a node is inside an exception handler .
3582	Check whether a node is inside a Lambda node .
3583	Iterate over all the nodes of the given node .
3584	Return True if node is in clobber .
3585	Determines whether a node is a super .
3586	Check if a node is an error .
3587	Checks if node is a default argument .
3588	Return True if node is a function decorator .
3589	Return True if node is an ancestor of a node .
3590	Assign a node to a node .
3591	Decorator to check messages .
3592	Yield tuples of string fields from a format string .
3593	Get the argument from a call node .
3594	Determines if an exception is inherited from the given node .
3595	Creates an error handler for a given type .
3596	Check if a node is decorated with a property
3597	Check whether a function is decorated with a function .
3598	Searches for a TryExcept node .
3599	Check if a node is from a fallback block .
3600	Return a list of tuples containing the exception handlers for the given exception .
3601	Returns whether an exception is ignored .
3602	Check if a node is abstract .
3603	Return the inferred value of a node .
3604	Return the type of node .
3605	Check whether a function is registered in the given function definition .
3606	Check whether a node is postponed .
3607	Return the qualified name of a module .
3608	Return the name of the import node .
3609	Return a representation of the tree definitions .
3610	Create a graph for the given file .
3611	Record imported module .
3612	Visit a module .
3613	Check if node is correct .
3614	Record an import node .
3615	Check if import_order is correct .
3616	Check if a module is relative import node .
3617	Add a module to the node .
3618	Check that a module is deprecated .
3619	Check whether a node is a preferred module .
3620	Report external dependencies .
3621	Returns a filter graph for the dependency graph .
3622	Return the path to the default configuration file .
3623	Insert the default options .
3624	Return the visibility of a node .
3625	Get callbacks .
3626	Visit a node .
3627	Check that all messages are consistent .
3628	Check function call .
3629	Check if a node is datetime .
3630	Check whether a node is open - open - mode .
3631	Handle a message .
3632	Prints out a message .
3633	Return the title of a node .
3634	Set default options .
3635	Check if a node exists .
3636	Adds a class to the node .
3637	Get all ancestors of a given node .
3638	Get nodes associated with the given node .
3639	Extract classes from a node .
3640	Leave a project
3641	Add ImportFrom node .
3642	Return classDiagram object for given klass .
3643	Return a list of DiadeF diagrams .
3644	Return True if owner is ignored .
3645	Return a list of nodes that are similar to the given attribute .
3646	Emit a member from a node .
3647	Check if a node has a parent of the given type .
3648	Determines whether a name is a valid name .
3649	Determines whether a node is a valid context .
3650	Visit an attribute .
3651	Handle assignments .
3652	Check if callable is callable .
3653	Record a UnaryOP operation .
3654	Iterate over all interfaces .
3655	Create a project from a list of files .
3656	Generate package node .
3657	Generate a function definition .
3658	Handles assign name .
3659	Handles assignment attributes .
3660	Import module .
3661	Visit a module node .
3662	Compute the module for the project .
3663	Add a module to the module .
3664	Return an ansi - formatted string .
3665	Colorize an ANSI code .
3666	Register a VSTextReporter .
3667	Handle a message .
3668	Print the given layout .
3669	Print message .
3670	Opens an open graph .
3671	Print a node .
3672	Write an edge to the graph .
3673	Check the format of a function .
3674	Process a non - raw string token .
3675	Handle the section .
3676	Record the current section .
3677	Render a table .
3678	Generate a default table .
3679	Adds a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Raises an exception if the message doesn t exist .
3683	Raises an InvalidMessageError if there is a duplicate symbol .
3684	Raises an InvalidMessageError if the message id does not exist .
3685	Return a list of message definitions .
3686	Return a string representation of a message
3687	Print help message .
3688	List all messages .
3689	Instantiates the Sphinx builder for the given app .
3690	Return the number of CPUs in the scheduler .
3691	Produce a report of statistics about a specific message .
3692	Temporarily fix sys . path . path
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set a single option .
3696	Register a checker .
3697	Disables all reporter reports .
3698	Enable Py3 logging mode .
3699	Get the list of checkers .
3700	Return a sorted list of checker names .
3701	Prepare a list of checkers .
3702	Expand the specified modules .
3703	Set the current module .
3704	Process a module .
3705	Report the evaluation .
3706	Display help message .
3707	Print full documentation .
3708	List messages .
3709	List cb groups .
3710	Normalize given text .
3711	Get the module and frame id of a module .
3712	Decode a line .
3713	Return True if the given base name matches the base name .
3714	Import plugins from a directory .
3715	Return comment string .
3716	Format option value .
3717	Format a section .
3718	Format an INI file .
3719	Insert child at index .
3720	Append a node to the VNode .
3721	The parents of this node .
3722	Format the given layout .
3723	Return the table content of a given table .
3724	Compute the content of the given layout .
3725	Collect all block lines .
3726	Handle an ignored message .
3727	Register a report .
3728	Return a list of reports .
3729	Add stats to self . stats .
3730	Returns the name of the setters property .
3731	Get the property of a given node .
3732	Checks if a return node is something else .
3733	Return a list of possible exception types for the given node .
3734	Processes a message .
3735	Process a module .
3736	Process the notes .
3737	Determines whether a module is imported from a future import .
3738	Determines whether the given statement is in the given statement .
3739	Returns the overridden method .
3740	Gets the extra info for a node .
3741	Detects the global scope .
3742	Return True if name_node is assigned to name node .
3743	Mark the consumed node as consumed .
3744	Visit a global variable .
3745	Check if a class scope is ignored .
3746	Check if a function has homonym in the given scope .
3747	Check that the value is unpackable .
3748	Check metaclasses .
3749	Return a list of packages in the given directory .
3750	Install packages .
3751	Run install .
3752	Produce a report of the differences between two tables .
3753	Simulate the command line .
3754	Append a line to the stream .
3755	Computes pairs of pairs of pairs of pairs of pairs of pairs of pairs of lines .
3756	Prints a summary of the pairs of lines and their pairs .
3757	Find the common common between two lines .
3758	Iterate over the lines of each line .
3759	Iterate through the lines of the given start_at .
3760	Return the index .
3761	Determines whether a call is equivalent to a call .
3762	Check whether two arguments are equal .
3763	Return True if overridden_default_value has the same default value .
3764	Determines whether two parameters are different .
3765	Understand call result .
3766	Add a node to the node .
3767	Check class definition .
3768	Check if node is consistent .
3769	Checks if the base classes are valid .
3770	Check function definition .
3771	Check if the super_delegation is missing .
3772	Leave a function def .
3773	Checks if node is in slots
3774	Set name .
3775	Check members of a node .
3776	Check whether the class is abstract .
3777	Checks whether a method is valid .
3778	Determines whether a node is a mandatory method parameter .
3779	Determines whether the given body is a raise .
3780	Add a bad exception context .
3781	Visit the function definition .
3782	Display a report .
3783	Determines whether a namedtuple is namedtuple .
3784	Determines whether the given node is an enum class .
3785	Check if a node is a dataclass .
3786	Open the linter .
3787	Called when a class def is instantiated .
3788	Leave classdef
3789	Visit an if node .
3790	Check whether there is a boolean expression .
3791	Check if docstring is valid .
3792	Format the template .
3793	Determines whether a COMMA character is a trailing COMMENT .
3794	Check if the given node is an actual elif .
3795	Checks if node is simplifiable
3796	Check if a node is inside a stop iterator .
3797	Checks if an exception is inherited from the stop iterator .
3798	Raises an exception if there is no stop iteration in the generator .
3799	Check for nested blocks .
3800	Returns a dict mapping node names to duplicated instances .
3801	Check if a node is merged .
3802	Checks whether the given node is chaining .
3803	Determines if a node is an AND or operand .
3804	Check that node has consistent return statements .
3805	Determines if a node is terminated or not .
3806	Return node s representation .
3807	Check if graphviz is available .
3808	Run the project .
3809	Write packages to diagram .
3810	Write classes to diagram .
3811	Set the dot Backend layout
3812	Set the VCG printer .
3813	Whether this module can be emitted .
3814	Formats a help message
3815	Get environment variables .
3816	Lints a file .
3817	Run python code .
3818	Given a dictionary of vertices return a list of cycles .
3819	Get the source .
3820	Generate a graphviz file .
3821	Pretty - print section .
3822	Register a message handler .
3823	Disable a message .
3824	Enable a message .
3825	Return the symbol for a message .
3826	Check if a message is enabled .
3827	Adds a message to the message store .
3828	Print full documentation .
3829	Print a checker .
3830	Calculate the amount of indentation .
3831	Return indentation line .
3832	Indent a token .
3833	Handles line start
3834	Get indentation for indx .
3835	Return the hanging indentation after bracket .
3836	Return the indentation of a bracket .
3837	Push a token onto the stack .
3838	Add a new line .
3839	Checks the parentheses of a given keyword .
3840	Check if there is a bracket annotation .
3841	Check that tokens are equal .
3842	Check that the given token is surrounded by the given i .
3843	Visitor for statement .
3844	Check for multiple statements .
3845	Check a list of lines .
3846	Check for indentation level .
3847	Check if the given node is in an iterable .
3848	Check if a node is a conditional import .
3849	Record the name of a node .
3850	Iterate over the given node .
3851	Handle xreadlines attribute .
3852	Visit an exception handler .
3853	Return a raise node .
3854	Find pylintrc .
3855	Validate a value .
3856	Expand the default option .
3857	Match long option .
3858	Register an option provider .
3859	Set provider option .
3860	Set global options .
3861	Generate a configuration dictionary .
3862	Load configuration file .
3863	Load command line options .
3864	Add help section .
3865	Return the help for the command .
3866	Load the default values
3867	Get the name of an option .
3868	Get the definition of an option .
3869	Iterate over all options grouped by section .
3870	Check whether a function is a method call .
3871	Determines whether a node is a complex format string .
3872	Set the logging module .
3873	Record the import from the module .
3874	Add logging modules to the module .
3875	Visitor for a call .
3876	Check format_string .
3877	Check if a node is in loop .
3878	Get the parent node of a break node .
3879	Determines if a loop is empty .
3880	Return a set of BUILTIN properties .
3881	Determines the name of a function .
3882	Return a report of the node s statistics .
3883	Check if a node is redefined by a decorator .
3884	Checks whether a call is one argument position .
3885	Visit starred node .
3886	Check that node is not local and global .
3887	Check if call is abstract .
3888	Check if node is not in loop .
3889	Check if node is in loop .
3890	Opens the linter .
3891	Visit expr .
3892	visit a CallSite node by returning a fresh instance of it
3893	An astroid . Assert node .
3894	Add dict to dict .
3895	Check that the node is unreachable .
3896	Check if node is not in the node .
3897	Checks if node is valid .
3898	Check for assignment name .
3899	Check whether a node is blacklisted .
3900	Check docstring .
3901	Check that literal - comparison is valid .
3902	Create a subgraph .
3903	Parse a subgraph .
3904	Visit a module .
3905	Add checker .
3906	Walk an astroid .
3907	Adds a relationship between two objects .
3908	Get a relationship from a given object .
3909	Return a list of node attributes .
3910	Return a sorted list of methods .
3911	Adds an object to the diagram .
3912	Return a list of class names .
3913	Return all classes in this node .
3914	Return the class with the given name .
3915	A list of Module objects .
3916	Return the module with the given name .
3917	Get a module by name .
3918	Adds a node to the node .
3919	Delete the grant for this client .
3920	Query the database .
3921	Get a user by username .
3922	Get an access token .
3923	Set a token .
3924	Set a grant .
3925	Get client by id .
3926	Prepare a request .
3927	Initialize the extension .
3928	Creates an OAuth remote app .
3929	Make a request .
3930	Authorize OAuth2 .
3931	Handles OAuth1 response .
3932	Handles OAuth2 requests .
3933	Handle an authorized response .
3934	Decorator for authorized_response methods .
3935	Hash a token .
3936	Make a client with the given token .
3937	Create a OAuth client .
3938	A context manager which ensures that the OAuth_INSECIB_INIT_INIT_TRANURE_TRANUTH_TRANURE_TRANUTH_TRANSURE_TRANSECUTHLIBUTIVURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRANSURE_TRAN
3939	Confirm the authorization request .
3940	Wrap a request token handler .
3941	Get the secret of a request .
3942	Get request token secret .
3943	Get the secret of a request .
3944	Returns the default realms for a given client key .
3945	Get realms of request .
3946	Get redirect uri .
3947	Get the rsa key for a request .
3948	Validate a client key
3949	Validate the request token .
3950	Validate an access token .
3951	Validate timestamp .
3952	Validate a redirect URI .
3953	Validate realms .
3954	Validate a verifier .
3955	Verify the request token .
3956	Verify the realms of a request .
3957	Save an access token .
3958	Save request token .
3959	Save a verifier .
3960	Return the error URI for the request .
3961	Confirm the authorization request .
3962	Verify a request .
3963	Get client credentials from request .
3964	Decorator to check if a client is authenticated .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the scopes of the refresh token .
3968	Confirm scopes for a refresh token .
3969	Get the default redirect uri .
3970	Get the default scopes for a client .
3971	Delete an authorization code .
3972	Save an authorization code for a client .
3973	Save a bearer token .
3974	Validate a bearer token
3975	Validate a client id
3976	Validate a code .
3977	Validate grant type
3978	Validate a refresh token .
3979	Validate a response type .
3980	Validate scopes .
3981	Validate username and password
3982	Revoke a token
3983	Update QQAPI request data .
3984	Convert a dictionary to a string .
3985	Change the Webibo header .
3986	Register a new app to a remote application .
3987	Create a new app .
3988	Extract parameters from request .
3989	Converts given text to bytes .
3990	Decode base64 to base64 .
3991	Create a response object .
3992	Get cached clients .
3993	Add a new app to the app .
3994	Add a remote app .
3995	Check for errors .
3996	Check the success of each iteration .
3997	Load private key callback .
3998	Try to load a private key callback .
3999	Load a private key callback .
4000	Check the revoked list .
4001	Checks that the certificate is revoked .
4002	Create a certificate request .
4003	Create a certificate .
4004	Decorator to make a function that requires a given flag .
4005	Load location information from a file .
4006	Sets the authentication callback .
4007	Sets whether an SSL certificate file should be used .
4008	Use an SSL certificate file to use the certificate .
4009	Use an SSL certificate .
4010	Adds a certificate to a certificate .
4011	Use a private key .
4012	Use a private key .
4013	Load SSL CA list .
4014	Set SSL verification depth .
4015	Load a temporary dh file .
4016	Set cipher list .
4017	Set client CA list .
4018	Adds a CA .
4019	Sets the SSL certificate callback .
4020	Set TLS RTTP use for TLS sessions .
4021	Sets the callback .
4022	Set the TLS protos for the SSL certificate .
4023	Sets the authentication callback .
4024	Sets the OCSP callback .
4025	Sets an OCSP server callback .
4026	Sets the OCSP client callback .
4027	Sets the SSL context .
4028	Return the server name .
4029	Set TLS host name .
4030	Receive a packet .
4031	Receive data into a buffer .
4032	BIO read .
4033	Negotiate SSL certificate .
4034	Shutdown the connection .
4035	Returns a list of SSL ciphers .
4036	Return a list of client CA names .
4037	Sets the SSL shutdown .
4038	Get a random server .
4039	Get a random client .
4040	Get the master key .
4041	Export a keying material .
4042	Get a session object .
4043	Return the cipher name .
4044	Gets the bit of the cipher .
4045	Get the current SSL cipher version .
4046	Returns the protocol version .
4047	Get the next negotiated message .
4048	Set the TLS protos for the SSL certificate .
4049	Gets the negotiated authentication policy .
4050	Return a new memory buffer .
4051	Convert a BIO to a string .
4052	Set ASN1 time .
4053	Return the ASN1 time .
4054	Get an elliptic curve by name .
4055	Dump a public key .
4056	Load a public key .
4057	Sign a PKEY with the given digest .
4058	Verifies an EVP signature .
4059	Dump a CRL to a file .
4060	Returns the cryptography key .
4061	Generate a new RSA key .
4062	Check whether the key is valid .
4063	Load the elliptiptic curve .
4064	Loads the curves from lib .
4065	Return a new ECKEY instance .
4066	Derivative of this key .
4067	Return a list of components .
4068	Get the short name .
4069	Return the data as a string .
4070	Returns a cryptography object representing the certificate signing request .
4071	Set the public key .
4072	Get a private key .
4073	Return the subject name .
4074	Adds extensions to the X509 extension .
4075	Get the X509 extensions .
4076	Verify a certificate .
4077	Return a cryptography object .
4078	Set the version .
4079	Get a private key .
4080	Set the public key .
4081	Sign a key .
4082	Get the signature algorithm .
4083	Calculate the digest of a given key .
4084	Set the serial number .
4085	Get the serial number .
4086	Delete the gms time after the given amount .
4087	Calculate the time before the given amount .
4088	True if the cache has expired .
4089	Get the name of the X509 certificate .
4090	Set the X509 certificate .
4091	Get the subject name .
4092	Set the X509 subject .
4093	Adds extensions to the X509 extension .
4094	Get the X509 extension .
4095	Adds a certificate to the store .
4096	Adds a certificate to the store .
4097	Sets the time in seconds .
4098	Initialize the certificate .
4099	Return an X509 instance from the store context .
4100	Verify a certificate .
4101	Set the serial number .
4102	Return the serial number .
4103	Set the reason .
4104	Get the reason .
4105	Sets the rev revocation date .
4106	Return a cryptography representation of the revocation registry .
4107	Get revoked revocation keys .
4108	Get the X509 certificate .
4109	Sign a certificate .
4110	Export a certificate .
4111	Get the type name of the object .
4112	Set CA certificates .
4113	Export this certificate .
4114	Sign a key .
4115	Verify a private key .
4116	Return a b64 encoded string .
4117	Get a private key .
4118	Set the private key .
4119	Creates an exception from an error queue .
4120	Convert a string label to a bytes object .
4121	Generate a print token .
4122	Return metadata for service .
4123	Iterate over all issues .
4124	Build the annotations for a card .
4125	Get all boards .
4126	Get list of open lists .
4127	Get a list of cards .
4128	Get comments for a card
4129	Construct the API URL for the given path .
4130	Get a JSON response
4131	Convert a link field to a dictionary .
4132	Returns a dictionary of issues for the given query .
4133	Returns a list of Requests for a given tag .
4134	Aggregate remote issues .
4135	Gets the config value for a given key .
4136	Get a dictionary of templates for this task .
4137	Validate config .
4138	Include an issue
4139	Make a table from a grid
4140	Evaluate an oracle .
4141	Get integer value .
4142	Pull a bugwarrior repository .
4143	Perform a GET request .
4144	Get a collection of data for a given URL .
4145	Find a local UUID for a given issue .
4146	Merge a single field from a remote field .
4147	Given a list of targets build the UDA config overrides .
4148	Parse a sprint string .
4149	Get the credentials for this application .
4150	Calculate the score for multiple sequences .
4151	Calculate pvalues for each gene .
4152	Calculate the fdcorrelation of a distribution .
4153	Compute the Z - score of the data .
4154	Plot a heatmap of a dataframe
4155	Adjust the ticks for the axes .
4156	Create an argument parser .
4157	Creates a parser for prerank genes .
4158	Adds command line options for plotting .
4159	Creates a parser for Enrichr
4160	Compute the enrichment score .
4161	Generate ranking metric .
4162	Calculate the ranking metric .
4163	Calculate gsea pval .
4164	Calculate the gsea distribution .
4165	Returns a pandas DataFrame containing the Marts .
4166	Returns a list of datasets .
4167	Returns a pandas DataFrame with the attributes of the dataset
4168	Returns a DataFrame with all the filters
4169	Query Biomart database .
4170	Generate a GSEA plot
4171	Calculate SSG SEA of genes .
4172	Run pre - rank algorithm .
4173	Generate a replot plot
4174	Set the number of CPU cores .
4175	Load gene sets .
4176	Returns a list of library libraries .
4177	Download Enrichr library files .
4178	Compute heat matrix .
4179	Saves the results to a file .
4180	Load gene expression data
4181	Run GSEA algorithm .
4182	Run GSEA analysis .
4183	Run GSEA on the data .
4184	Calculate the enrichment scores for a given dataframe .
4185	Saves the GSEapy results .
4186	Run GSEA .
4187	Enrich gene_sets .
4188	Parse the enriched gene sets .
4189	Parse gene list .
4190	Sends a list of genes to a given URL .
4191	Check genes for Enrichr list .
4192	Get the background .
4193	Run the enriched library .
4194	Creates a cube .
4195	Create an ICosphere .
4196	Construct a torus .
4197	Plot a 3D plane edges for a plane .
4198	Helper function for cube_hires .
4199	Return the color values for a given color .
4200	Check that a variable is valid .
4201	Make a list of values .
4202	Write a filter script .
4203	Create an LS3 loop .
4204	Merge close vertices .
4205	Closes holes .
4206	Split vertices on non - Manifold faces .
4207	Captures mismatched borders .
4208	Translate a script .
4209	Rotate a script .
4210	Scale a script to a given value .
4211	Convert a cylindrical to cylindrical coordinate .
4212	Convert a cylinder to a cylinder .
4213	Return the bend of a script .
4214	Transform a curve into a rotation matrix .
4215	Convert vc3D to tex .
4216	Convert a mesh to WCF format .
4217	Build a uniform resampling of a script .
4218	Create a Screened Poisson surface for a screen .
4219	Draw a voronoi from a script .
4220	List all available faces .
4221	Return vertices for vertices .
4222	Create a face function .
4223	Returns verttex function .
4224	Return the radius of a cylindrical script .
4225	Calculate the spherical vertices of a circle .
4226	Join a script .
4227	Rename a script .
4228	Change a script .
4229	Duplicate a script .
4230	Delete a lower script .
4231	Print error message .
4232	Initialize a TEMP3D mesh .
4233	Add a layer to the stack .
4234	Delete a layer from the stack .
4235	Save filters to file .
4236	Run the script .
4237	Create an annulus image .
4238	Generate a Hausdorff distance .
4239	Produce a Poisson disk .
4240	Create a mesh element .
4241	Create a clustered virtual vertices .
4242	Construct a flat plane from a script .
4243	Generate per - triangle per - triangle .
4244	Generate Voronoi documentation for a given script .
4245	Compute the topology for a script .
4246	Parse the topology .
4247	Parse the hausdorff log file .
4248	Return a function that can be used to render a template .
4249	Write a Voronoi diagram to a Voronoi file .
4250	Create a cyclic rainbow .
4251	Format a hexadecimal representation .
4252	Return the cross product of two vectors .
4253	Multiply two vectors .
4254	Define VCF attribute .
4255	Flip a script .
4256	Compile point sets .
4257	Format a Taubin script .
4258	Generate depth for a script .
4259	Return a list of polylines sorted by line .
4260	Calculate the measure of the topology .
4261	Calculate the measure of all measurements in a file .
4262	Calculate the dimension of a molecule .
4263	Return a lowercase version of filename .
4264	Monkey patch the request class .
4265	Return the config for a given user .
4266	Configure upload_sets .
4267	Return the upload configuration .
4268	Return the URL for the uploaded file .
4269	Return the path to the config file .
4270	Check if the given extension is allowed .
4271	Return the name of a conflict .
4272	Get VProf version .
4273	Remove duplicate objects from a list .
4274	Calculate the difference between two objects .
4275	Format the object count .
4276	Trace memory usage .
4277	Return a list of code events .
4278	Returns the number of objects in the queue .
4279	Compute the memory over the RSS .
4280	The profile of the package .
4281	Profile the module .
4282	Compute the profile of the function .
4283	Run the profiling .
4284	Return a set of module names for the given package .
4285	Run a function in a separate process .
4286	Determines the type of a run object .
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the function .
4290	Replace sys_args with self . _run_args .
4291	Sample a single frame from a frame .
4292	Insert a stack into the stack .
4293	Return the number of sample counts for this node .
4294	Format the tree .
4295	Return the tree for the call tree
4296	Generate a profile for profiling .
4297	The module for profiling .
4298	Execute the profiling function
4299	Transform the stats into a list of dictionaries .
4300	The cProfile package .
4301	Entry point for the cProfile module .
4302	Execute cProfile function
4303	Initialize the database .
4304	Show the guestbook .
4305	Insert a new entry .
4306	Handler for profiler .
4307	Start profiling server .
4308	Return the root .
4309	Return the content of the file .
4310	Handle a GET request .
4311	Perform a POST request .
4312	Send an HTTP response .
4313	Check if a module is a standard directory .
4314	Record a single line .
4315	Iterate over lines without stdlib .
4316	Calculate the heatmap .
4317	Return a list of lines with skip_map .
4318	The package metadata .
4319	Format a heatmap .
4320	Profile a module for profiling .
4321	Generate a function that returns a profile of the function .
4322	Run profiler .
4323	Run the profiler .
4324	Predict probabilities for X .
4325	Predicts the log probabilities for X .
4326	Fit the model .
4327	Count the number of words in the corpus .
4328	Sort the features in the vocabulary .
4329	Return a subset of features that cover the document .
4330	Fit the transform to Z .
4331	Transform X .
4332	Convert to a Scikit scalar .
4333	Fit the SPARK model .
4334	Spark prediction .
4335	Compute the SparkLinear Regression
4336	Fit the model .
4337	Fit the model .
4338	Compute the score of the model .
4339	Fits the model with the given parameters .
4340	Calculate the score for a given score .
4341	Train k - means clustering .
4342	Predict RDD for X .
4343	Predict classifier .
4344	Check the dtype of an RDD .
4345	Fit the estimator .
4346	Fit the model to the data
4347	Fit a SparkTruncated SVD
4348	Compute the SparkTruncated SVD
4349	A generator that yields blocks of a given iterator .
4350	Given a list of dtypes return a list of block tuples .
4351	Block an RDD .
4352	Return a new RDD with the given function fn .
4353	The shape of the RDD .
4354	Convert the RDD to a numpy array .
4355	Apply the transform function to the given column .
4356	Return the bit perm .
4357	Return True if the root write is only a root write .
4358	Check the configuration file .
4359	Read configuration from file .
4360	Run a command as a command .
4361	Execute a command in a subprocess .
4362	Execute remote command on ssh .
4363	Validate the configuration .
4364	Get the headers .
4365	Get the body of the request .
4366	Get the api s URL .
4367	Get the URL for the IFTTT device .
4368	Return a text representation of a device .
4369	Print information about a pkt .
4370	List MAC IDs .
4371	Execute the device .
4372	Sends a confirmation on the device .
4373	Execute a push event .
4374	Execute a thread .
4375	Run devices .
4376	Convert a transaction to a transaction .
4377	Searches for ledgerrc file .
4378	Install compatibility .
4379	Return the long description of the package .
4380	Create a PrecalculatedTextMeasurer object from a json file .
4381	Get the default TextMeasurer instance .
4382	Adds a badge to the text .
4383	Generate supported characters .
4384	Generate unicode characters .
4385	Calculate the mapping between characters and characters .
4386	Write a JSON object to a JSON file .
4387	Convolve a 2D image using convolution .
4388	Compute the Gaussian kernel .
4389	Convert an image to grayscale .
4390	Main entry point for pyssim .
4391	Compute the sigma value for the image .
4392	Compute the SSIM between two images .
4393	Destroy the combobox .
4394	Set the code version .
4395	Get the status of the node .
4396	Print the status of the task .
4397	Return the node associated with a given connection .
4398	Tries to bind the server if it is ready .
4399	Called when a new connection is received .
4400	Callback called when an incoming message is received .
4401	Sends a command to the fleet
4402	Determines if a node should be connected to a TCP node .
4403	Sets up a single node if possible .
4404	Callback called when a connection is received .
4405	Callback called when an outgoing message is received .
4406	Callback invoked when a connection is disconnected .
4407	Adds a node to the graph .
4408	Drop a node .
4409	Send a message to the node .
4410	Destroy this node .
4411	Add an item to the queue .
4412	Put an item into the heap .
4413	Get a value from the heap .
4414	Tries to acquire a lock .
4415	Determines if a lock is acquired .
4416	Releases a lock .
4417	Decorator to check a function
4418	Decorator for views that require a view function .
4419	Set the hosts .
4420	Create indexes .
4421	Migrate the indexes to the given indexes .
4422	Strip the metadata from the report
4423	Save aggregate reports to Kafka .
4424	Extract the XML from a file .
4425	Parse an aggregate report XML file .
4426	Convert Forensics reports to CSV .
4427	Parse an aggregate report file .
4428	Get IMAP capabilities .
4429	Save the aggregate report to a file .
4430	Return a zip file containing the report .
4431	Email a report .
4432	Save aggregate reports to Splunk
4433	Saves the forensic reports to a Splunk HMC .
4434	Decode base64 .
4435	Download the base domain file from the public suffix list .
4436	Get the reverse DNS from an IP address .
4437	Parse a human - readable timestamp .
4438	Download the location of a geoIP .
4439	Get information about an IP address .
4440	convert msg from msg to msg
4441	Convert string to list .
4442	Parse a single report file .
4443	Drain the connection .
4444	Publish a message .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from a subscription .
4449	Flush the connection .
4450	Select next available server .
4451	Process a NatsError .
4452	Called when an operation is closed .
4453	Return a connection string
4454	Process a pong .
4455	Process a single message .
4456	Process server info .
4457	Process connection init .
4458	Flushes all pending data .
4459	Read data from the reader .
4460	Perform coactivation on a dataset .
4461	Decode images .
4462	Load features from an array .
4463	Load features from images .
4464	Calculate Pearson correlation .
4465	dot product
4466	Select feature selection .
4467	Given a dataset and a list of regions return a list of labeled regions .
4468	Returns the features in the given dataset .
4469	Classify regions in a dataset .
4470	Classifier for classification .
4471	Fit classifier .
4472	Set class weight .
4473	Fit the cross validation algorithm .
4474	Fits a dataset .
4475	Compute the average of each region within a region .
4476	Generate random voxels for a dataset .
4477	Get the top words for a given model .
4478	Calculate Pearson correlation .
4479	Calculate the FDR .
4480	Load activations from file .
4481	Create an image table
4482	Returns a list of identifiers corresponding to the given feature table .
4483	Add features to the feature table .
4484	Get feature names .
4485	Return a dictionary of feature names .
4486	Load a dataset from a file .
4487	Save the feature table to a file .
4488	Get image data .
4489	Get feature data .
4490	Return a list of column names ordered by features .
4491	Return a list of indices that are above the given threshold .
4492	Returns a list of features matching the given search .
4493	Return a list of IDs matching the given expression .
4494	Convert sparse dataframe to csr matrix .
4495	Mark a function as deprecated .
4496	Compute the transformation of a matrix .
4497	Convert fyz coordinates to matrices .
4498	Apply a transformation to a coordinate .
4499	Mask an image .
4500	Get image mask .
4501	Load image data .
4502	Save image to nifti1 file .
4503	Set the logging level .
4504	Expand an address .
4505	Normalize a string s .
4506	Parse an address .
4507	Calculate the near - duplicate hashes .
4508	Convert an object to a python object .
4509	Get tick prices .
4510	Retrieve a pandas dataframe .
4511	Get bulk news .
4512	Perform a HTTP request .
4513	Get information about the bearer token .
4514	Make a request .
4515	Get album tracks .
4516	Get information about an artist .
4517	Get an artist s albums .
4518	Get the top tracks for a spotify .
4519	A list of artists related to a spotify .
4520	Get a list of artists .
4521	Get a specific category .
4522	Get a list of playlists for a category .
4523	List categories .
4524	Get a listing of featured playlists .
4525	Fetch new releases .
4526	Get recommendations .
4527	Retrieve the followers of a user .
4528	Get a list of albums .
4529	Get all albums .
4530	Get the total albums for a given market .
4531	Retrieve a list of artist related artists .
4532	Return the currently playing track .
4533	Get the current player .
4534	Get a list of devices .
4535	Returns a list of recently played tracks .
4536	Replace tracks in a playlist .
4537	Reorder a playlist .
4538	Create a playlist .
4539	Get a list of playlists .
4540	Get a list of tracks .
4541	Get all tracks .
4542	Get OAuth2 URL .
4543	Get an album .
4544	Get an artist .
4545	Get a track .
4546	Get a user by spotify_id .
4547	Get albums .
4548	Get list of artists .
4549	Search for a playlist .
4550	Convert a string to a id .
4551	A decorator that asserts a function s attribute hasattr .
4552	Construct an instance from a client .
4553	Build an OAuth URL .
4554	Return a dictionary of the attributes of this object .
4555	Return the parameters as a string .
4556	Build the playlist .
4557	Get all tracks .
4558	Resume playback .
4559	Transfer a Player to another Player .
4560	Creates a Spotify object based on the href .
4561	Extract log information from the server .
4562	Convert a short month to a short month .
4563	Update code URLs .
4564	Check if version is greater than version .
4565	Determines whether the current version is a git version .
4566	Determines whether this version is required for this version .
4567	Backup the configuration .
4568	Restore the backup
4569	Return True if line is to ignore .
4570	Process a list of options .
4571	Extract the base url from an element .
4572	Formats a list of decoded objects
4573	Perform a HTTP GET request .
4574	Return the HTTP response .
4575	Validate a syntax check .
4576	Check if a domain is subdomain .
4577	Checks ipv4 syntax .
4578	Check if ip is a valid IPv4 range .
4579	Check URL syntax .
4580	Loads the config file .
4581	Safely keep the user alive .
4582	Download entry URL .
4583	Download entry management URL .
4584	Print header .
4585	Process file decision .
4586	Return the name of a domain .
4587	Get the URL for a file .
4588	Colorize the log .
4589	Format a domain into a string .
4590	Extract domain from file .
4591	Convert the file to a list of files .
4592	Return file URL .
4593	Switch a configuration variable .
4594	Get the status of the class .
4595	Parse the status .
4596	Retrieve the structure from disk .
4597	Create directory structure .
4598	Delete all uneded keys .
4599	Sets path to config file .
4600	Load the configuration file .
4601	Install the production configuration .
4602	Install IANA config .
4603	Install PSL configuration .
4604	Install a directory structure file .
4605	Merge this configuration into a new one .
4606	Load upstream configuration file .
4607	Split a version string into a list of digits .
4608	Check the version of the upstream .
4609	Determines whether or not this project is cloned .
4610	Handle a Django index .
4611	Sets the analysis host directory .
4612	Print unified file .
4613	Get status file .
4614	Check if file is not produced .
4615	Update the list of extensions .
4616	Load the database from disk .
4617	Return a regular expression .
4618	Convert an element into a hierarchical hierarchy .
4619	Load the database .
4620	Return the referer for the given extension .
4621	Generator for download extensions
4622	Update the index database .
4623	Makes all the elements in the cache
4624	Retrieve data from the cache
4625	Save the metadata to a json file .
4626	Add to to_add
4627	Remove an element from the cache
4628	Returns a list of the mined minions .
4629	Process the mine .
4630	Get the content of a file .
4631	Write content to file .
4632	WHOIS record .
4633	Update the expiration date .
4634	This function is called when a referer is not found .
4635	Write the header to the file .
4636	Constructs a header .
4637	Set the header
4638	Construct a PyFunce object .
4639	Return the size of a given header .
4640	Colorize data .
4641	Return a JSON - formatted representation of the object .
4642	Return a JSON - ready representation of the response .
4643	Save the file to disk .
4644	Calculate time difference .
4645	Formats the execution time .
4646	Return a list of files to delete .
4647	Return a list of databases to delete .
4648	Delete all files in the database .
4649	Return the hash of the file .
4650	Return the hash of the data .
4651	Get the file hash .
4652	Execute the command .
4653	Remove a key from the dictionary
4654	Rename a key .
4655	Merge two dictionaries .
4656	Write to a JSON file .
4657	Save this model to a yaml file .
4658	Convert a path into a path .
4659	Write data to file .
4660	Read the file .
4661	Determines the main list .
4662	Merge this list into another one .
4663	Return list of strings that match regex .
4664	Determines if the given regex match .
4665	Replace occurrences with regex .
4666	Return the number of tests for this experiment .
4667	Calculate the percentage .
4668	Print out the log .
4669	Check if url is valid .
4670	Check if a domain is valid .
4671	Check whether the given domain is a subdomain .
4672	Get status .
4673	Reformat the historical error .
4674	Retrieve the database .
4675	Save the state of the database to a dictionary .
4676	Return the timestamp of the database .
4677	Return the content of the file .
4678	Check if the database is present .
4679	Retrieve the whois database .
4680	Save the whois database to the database .
4681	Check if the user is in the database .
4682	Determines if the file is older than the database .
4683	Get the expiration date of the author .
4684	Add a connection to the database .
4685	Set build permissions for travis .
4686	Run Travis CI build .
4687	Lookup the DNS record .
4688	Tries to connect to a Whois server .
4689	Get the status of a web server .
4690	Return the value of the domain .
4691	Get the current object .
4692	Return a generator of all standard paths .
4693	Return a list of package names .
4694	Generator for unused line numbers
4695	Find unused module name .
4696	Yield line numbers for each line .
4697	Yields undefined name for undefined usage messages .
4698	Iterate over unused variable line numbers .
4699	Duplicate key line numbers .
4700	Convert a list of messages to a dictionary .
4701	Check source code .
4702	Extract package name from line .
4703	Check if a string is a multiline statement .
4704	Parse a multiline statement .
4705	Filters out unused imports .
4706	Converts a line into a list of imports .
4707	Filter out unused imports .
4708	Converts a list of lines into a dictionary of message objects .
4709	Filters out marked_star_import .
4710	Filter out duplicate_line_numbers .
4711	Check if a dict entry has a key .
4712	Check if a value is a literal or not .
4713	Generator for useless pass line numbers .
4714	Filter useless pass lines .
4715	Return the indentation of a line .
4716	Get end of line .
4717	Sanitize source code .
4718	Split comma separated string into comma separated list .
4719	Determines whether a file is a python file .
4720	Determines whether filename is excluded .
4721	Yields all files matching the given filenames .
4722	Main entry point .
4723	Read LeaseResponsePayloadPayload
4724	Write the MIP to the output stream .
4725	Write a CancelRequestPayload to the output stream .
4726	Read a CancelResponsePayload from the input stream .
4727	Create name value .
4728	Read the KE - chain .
4729	Write a MIP object to the stream .
4730	Create a Digest object .
4731	Read the application information .
4732	Write the application specific information .
4733	Create application specific information .
4734	Read data from a KipStream .
4735	Write the KMIP file .
4736	Read the request payload .
4737	Write the MIP to a file .
4738	Parses the response payload .
4739	Write the response to a file .
4740	Read the KMIP payload .
4741	Write the KMIP stream .
4742	Parsed response payload .
4743	Process a request .
4744	Build an error response .
4745	Processes a template attribute .
4746	Retrieves the attributes from the managed object .
4747	Extracts an attribute from a managed object .
4748	Set attributes on managed object .
4749	Set the attribute on the managed object .
4750	Check if the given policy is allowed for the given policy .
4751	Writes the data to a file .
4752	Create a new key .
4753	Set a setting .
4754	Load server configuration settings from a file .
4755	Convert a value to a bitmask .
4756	Return a list of CryptographicUsageMask objects .
4757	Read the KMIP value .
4758	Write the KMIP file .
4759	Validate the value .
4760	Read the MIP version .
4761	Write the KMIP file .
4762	Validate the value .
4763	Validate the value .
4764	Read boolean value .
4765	Write a boolean value to the stream .
4766	Write the KMIP version .
4767	Validate the value .
4768	Read the MIP parameter .
4769	Validate the value .
4770	Return key wrapping data .
4771	Set key wrapping data .
4772	Validate the key .
4773	Validate the data .
4774	Validate the data type .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to a string .
4777	Get bit mask from a list of enumerations .
4778	Return a list of enumerations from a bit mask .
4779	Determines if a potential mask is a bit mask .
4780	Read KeyPairRequest from input buffer .
4781	Write the output buffer .
4782	Read KeyPairPairResponse payload .
4783	Write the KMIP buffer .
4784	Read from the input buffer .
4785	Writes the MIP to the output buffer .
4786	Read GetAttributeListResponse payload .
4787	Write the GetAttributeList to a file .
4788	Return a sorted list of json files .
4789	Scan for policies .
4790	Run the operation policy monitor .
4791	Get a certificate from a connection .
4792	Get the extension usage for a given certificate .
4793	Get the common names of a certificate .
4794	Returns the client identity for a given certificate .
4795	Read CreateRequest payload .
4796	Write the output buffer .
4797	Read the CreateResponse payload .
4798	Writes the output to the output buffer .
4799	Convert a Python object to a Python object .
4800	Read the EncryptResponsePayload payload .
4801	Read from the input buffer .
4802	Write this partition to a file .
4803	Check if an attribute is supported .
4804	Check if an attribute is deprecated .
4805	Determines whether an attribute is applicable to an attribute .
4806	Determines whether an attribute is multivalued .
4807	Gets a value from a config file .
4808	Read CheckResponsePayload from input stream .
4809	Write CheckResponsePayload to a file .
4810	Read from the input buffer .
4811	Write to the output buffer .
4812	Read data from a KMIP stream .
4813	Writes the MIP to the output stream .
4814	Read the KMIP stream .
4815	Write the KMIP stream .
4816	Read password credential from input stream .
4817	Write the username and password .
4818	Read the device credentials .
4819	Write the KMIP stream .
4820	Read a KMIP file .
4821	Write the Credential header to the file .
4822	Read MAC - signature data .
4823	Write a MIP message .
4824	Read KMIP data .
4825	Write the KMIP file .
4826	Read KeyWrapper .
4827	Write the KMIP file .
4828	Reads the extension information from the output stream .
4829	Write this extension .
4830	Create a new extension .
4831	Read the KMIP message .
4832	Write the revocation message .
4833	Validate the revocation code .
4834	Read the object definition .
4835	Write the object definition .
4836	Read the defaults information from a file .
4837	Write the DefaultsInformation structure .
4838	Read from the input buffer .
4839	Write this RNGParameters to the output buffer .
4840	Read the ProfileInformation from a file .
4841	Write the ProfileInformation structure .
4842	Write the ValidationInformation structure to the output buffer .
4843	Read Capability Information .
4844	Write the output buffer .
4845	Stop the server thread .
4846	Serve the connection .
4847	Read the request payload .
4848	Write the KMIP file .
4849	Read data from a MocateResponse .
4850	Write a KocateResponsePayload to the output buffer .
4851	Generate a symmetric key .
4852	Create an asymmetric key pair .
4853	Calculate MAC address .
4854	Encrypts the given data .
4855	Encrypts a symmetric key .
4856	Encrypts an asymmetric encryption key .
4857	Decrypt an asymmetric cipher according to the encryption algorithm .
4858	Generate an RSA key pair pair .
4859	Derives a key .
4860	Create an RSA private key .
4861	Verify the signature .
4862	Read data from a file .
4863	Write this message to a file .
4864	Read the MIP request .
4865	Converts a protocol version string to KMIP version .
4866	Read the KMIP version .
4867	Write the KMIP stream .
4868	Read credentials from a file .
4869	Write this MIP to a file .
4870	Read PollRequestPayload from input stream .
4871	Read the KMIP stream .
4872	Write a certificate to a file .
4873	Authenticate the user .
4874	Read the ArchiveResponse payload .
4875	Write the metadata to a file .
4876	Run the connection .
4877	Read a RekeyResponse payload .
4878	Checks if the given authentication_suite is supported .
4879	Derive a key .
4880	Get a list of attributes .
4881	Get an attribute list .
4882	Executes a query and returns the results .
4883	Sign a request .
4884	Opens a client connection .
4885	Close the client connection .
4886	Create a cryptographic algorithm .
4887	Create a key pair .
4888	Register a ManagedObject .
4889	Create a new rekey .
4890	Derives a key from an object type .
4891	Locate the object with the specified attributes .
4892	Perform a check on the device .
4893	Get a Kmip object .
4894	Gets the attributes for a given UID .
4895	Activates a Kmip device .
4896	Revoke revocation code .
4897	Get mac address .
4898	Build cryptographic parameters .
4899	Builds the encryption key information .
4900	Builds MAC - signature key information .
4901	Builds a Key wrapping specification .
4902	Build common attributes .
4903	Build a name attribute .
4904	Read the query payload .
4905	Write the query result to the output buffer .
4906	Write the KMIP file .
4907	Read GetAttributesResponse payload .
4908	Write the GetAttributesResponse to the output buffer .
4909	Get an entry point for a given group .
4910	Get a list of all groups in a group .
4911	Return a list of all available distros .
4912	Load the object .
4913	Create an EntryPoint from a string .
4914	Start a live browser .
4915	Generate a project .
4916	Generate controller file .
4917	Generate action .
4918	Generate form .
4919	Generate a model .
4920	Generate a macro .
4921	Create a directory .
4922	Rewrite a file and copy it to dst_file .
4923	Return a string representation of a time .
4924	Check if the given URL is valid .
4925	Encode a string .
4926	Decode a Python object .
4927	Decorator for jsonify
4928	Return the absolute URL for a given endpoint .
4929	Load the configuration .
4930	Signs a user in the database .
4931	Get the current user .
4932	Create Flask application .
4933	Register jinja2 .
4934	Register a blueprint .
4935	Register an error handler .
4936	Register the HTTP headers .
4937	Write dataframe to CSV .
4938	Read dataframe from CSV file .
4939	Serializes a dataframe .
4940	Deserialize a dataframe .
4941	Update this object from a dataframe .
4942	Update this object from raw data .
4943	Returns the URL for the content .
4944	Upload a file from a dataframe .
4945	Add a new entry to the dataset .
4946	Opens the workspace .
4947	Return the binary contents as binary .
4948	Read the contents of the workspace as text .
4949	Convert this object to a Pandas DataFrame .
4950	Get an intermediate dataset .
4951	Get all experiments for a workspace .
4952	Get all datasets for a workspace .
4953	Get information about a dataset .
4954	Publish a function or workspace .
4955	Decorator to mark a function as publishable .
4956	Decorator to declare that a function is annotated .
4957	Decorate a function to return a function .
4958	Decorator to attach a function to a file .
4959	Return a set of globals .
4960	Return a copy of the pen .
4961	Look for a color in Gtk .
4962	Draw a bounding box .
4963	Calculate Bernstein - Jacobian extension .
4964	Compute the Jacobian of the Bernstein Jacobian .
4965	Build the choices tree .
4966	Creates a function that returns a function that returns a function that will call the command with the given arguments .
4967	Register items hook .
4968	Create a dynamic sitetree .
4969	Initialize the tree
4970	Delete all tables .
4971	Get an entry by name .
4972	Update an entry s value .
4973	Set an entry .
4974	Initialize the cache .
4975	Resolve tree alias .
4976	Check if the current app is admin .
4977	Calculate the depth of an item .
4978	Get the current item of a tree .
4979	Resolve a sitetree item .
4980	Init a sitetree .
4981	Returns the attr for the given page .
4982	Get the descendant level of the tree .
4983	Creates a menu
4984	Check if the current user has access to the given item .
4985	Update the breadcrumbs based on the current context .
4986	Create a sitetree .
4987	Render the navigation items .
4988	Return the children of an item .
4989	Updates the children of the tree .
4990	Filter items according to the navigation_type .
4991	Get an ancestor of a tree item .
4992	Recursively traverses tree item hierarchy .
4993	Resolve a variable .
4994	Create a sitetree node .
4995	Parses a sitetree template .
4996	Return a sitetree node for the given parser .
4997	Return a sitetree menu .
4998	Renders a sitetree .
4999	Create a tag for a tag .
5000	Get model URL .
5001	Register the admin .
5002	Handler for HttpResponseRedirect .
5003	Returns a HttpResponseRedirect for the given request .
5004	Add a new item to the tree .
5005	Redirect to the tree item change .
5006	Add the choice field to the widget .
5007	Create a new tree .
5008	Move a tree item to another item .
5009	Save the parent model .
5010	Add links to the site .
5011	Export a view to a json file .
5012	Create a tree model .
5013	Create a tree item
5014	Import an application s sitetree module .
5015	Returns the model class for the given settings entry .
5016	Create a Config object from a mapping .
5017	Create a configuration object from a python file .
5018	Construct an instance from a TOML file .
5019	Create a Config instance from an instance .
5020	Create ZipkinAttrs for a given span .
5021	Create http headers for a new span .
5022	Get the current context .
5023	Start the transport .
5024	Stop the transport .
5025	Update the binary annotations .
5026	Add a SSA annotation .
5027	Override the span name .
5028	Create an Endpoint instance .
5029	Create a new Endpoint with the given service name .
5030	Build a v1 span .
5031	Encodes a list of protos .
5032	Create protobuf .
5033	Convert a hexadecimal hexadecimal representation to bytes .
5034	Determines the type of the given kind .
5035	Convert an endpoint into a zipkin endpoint .
5036	Convert zipkin annotations to zipkin annotations .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create a zipkin endpoint .
5040	Creates a new endpoint with the given service name .
5041	Build an annotation list .
5042	Build binary annotation list .
5043	Create a new span .
5044	Converts Thrift span to bytes .
5045	Encodes a binary_thrift_list into a byte string .
5046	Determines the span version of a message .
5047	Encode spans .
5048	Push the given zipkin attrs into the current thread .
5049	Encode a Thrift span .
5050	Create json endpoint .
5051	Encode protobuf .
5052	Decode a list of spans .
5053	Convert a Thrift endpoint from a Thrift endpoint .
5054	Decode Thrift annotations .
5055	Convert from thrift annotations to strings .
5056	Decode a Thrift span .
5057	Converts a trace_id to a string .
5058	Converts an unsigned long value to lower - case string .
5059	Writes a hexadecimal string .
5060	Preprocessor for preprocessing .
5061	Set the transaction code .
5062	Set the iph_id tag .
5063	Set the tr tag for the MBank .
5064	Parse tag data .
5065	Parse a file .
5066	Join a string into a single string .
5067	Returns the json or text of the response
5068	Toggle a rate limit .
5069	Perform a request .
5070	Get bot info .
5071	Get bots .
5072	Read packet .
5073	Write a single packet .
5074	Close the file .
5075	Decode a byte string .
5076	Encodes a term into a string .
5077	Add a source address .
5078	Send all pending messages .
5079	Sets the remote service callback .
5080	cleans up and stops and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given the TYPES and scopes in a given Timeout .
5083	construct a raw SOAP XML string given a prepared SOAPEnvelope object
5084	Discover systems using WS - Discovery
5085	Get the item manager .
5086	Get all child relations of a model .
5087	Get all child m2m relations for a model .
5088	Save the related model .
5089	Create a model from a data dictionary .
5090	Validate the unique_fields .
5091	Check if the form has changed .
5092	Return an address with valid checksum .
5093	Generate an AddressChecksum from the given address .
5094	Parse arguments .
5095	Create an argument parser .
5096	Prompt the user for a seed .
5097	Validate signature fragments .
5098	Get a key by index .
5099	Get the key for the given address .
5100	Create a new KeyIterator .
5101	Create a sponge .
5102	Substitute a list of trits .
5103	Squeeze the given trits .
5104	Transform the state .
5105	Builds a GetDigestsCommand command .
5106	Builds a command to get the private keys .
5107	Prepares a transfer command .
5108	Calculate the distances between two spans .
5109	Calculate the trits from an int .
5110	Calculate the shift between two numbers .
5111	Calculates the full cross - correlations between two populations .
5112	Prints out the seed .
5113	Retrieve a list of transactions .
5114	Gets the inputs command .
5115	Builds a new address command .
5116	get Transfers Command
5117	promote a transaction
5118	Registers a replay bundle command .
5119	Send a transfer command .
5120	Send a send command to the device .
5121	Resolve a URI from a URI .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response from the node .
5126	Seeds a response .
5127	Add a digests entry .
5128	Get the address .
5129	Creates an iterator for the KeyGenerator .
5130	Creates an Address object from a digest .
5131	Generate an address from a key iterator .
5132	Returns a list of Transaction objects .
5133	Iterate over all addresses used by this adapter .
5134	Returns a list of bundles that match the given transaction_hashes .
5135	Check if the codec is valid .
5136	Builds a codec object .
5137	Encode an alphabet .
5138	Decode a byte string .
5139	Return a list of addresses that match the given index .
5140	Add a new route .
5141	Create a Transaction instance from a string .
5142	Return a JSON representation of the signature .
5143	Gets the valid timestamp for the address .
5144	Set the transaction state .
5145	Return a list of Messages .
5146	Return a string representation of the transaction .
5147	Return a list of transactions grouped by the last transaction .
5148	Return a list of commands from a package .
5149	Execute a request .
5150	Apply filter .
5151	Get the URL for a job .
5152	Return a list of errors .
5153	Return True if the validator is valid False otherwise .
5154	Creates validator .
5155	Return a list of bundle signature errors .
5156	Return the error for a group .
5157	Traverse a bundle .
5158	Start an interactive REPL
5159	Return a random seed .
5160	Get the digest of the blob .
5161	Sign the inputs of a bundle .
5162	Print a pretty representation of a cycle .
5163	Subtracts the given trits .
5164	Squeeze the given trits .
5165	Append an exception to the context .
5166	Get security level .
5167	Increment a legacy tag
5168	Return the Tag as a Tag .
5169	Adds a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign inputs .
5172	Sign inputs at start_index .
5173	Create input transactions .
5174	Convert a value to a standard unit .
5175	Decompress G1 .
5176	Prime field n .
5177	Construct an instance from a JSON file .
5178	Find words that match the given text .
5179	Find a synonym for a word
5180	Expand abbreviations .
5181	Split description .
5182	Return a list of categories .
5183	Generate a random colour .
5184	Plot the component .
5185	Construct a builtin class from the given name .
5186	Construct a builtin timescale object from the given name .
5187	Return a random set of components .
5188	Create a ColorImage from an image .
5189	Create a Decorator from a CSV file .
5190	Return the CSV as a CSV string .
5191	Returns the maximum width of the list .
5192	Get a Component instance for this component .
5193	Return the attribute value for the given c attr .
5194	Determines the component of a color .
5195	Plot the data .
5196	Create a Component from text .
5197	Build a summary .
5198	Create a Rock Ridge Component .
5199	Process a single row .
5200	Parse a CANstrat string .
5201	Return a boolean indicating whether all points are sorted .
5202	Return a list of unique values .
5203	Generate a list of intervals based on a basis set .
5204	Clean longitudinal data .
5205	Construct a Point instance from a PETrel .
5206	Build a list of intervals .
5207	Create a DataFrame from a CSV file .
5208	Create an image from an image .
5209	Create a Striplog object from a log .
5210	Create a LAS3 object from a string .
5211	Create an Interval object from a file .
5212	Return a copy of this Striplog .
5213	Write data to a CSV file .
5214	Export this data to a LaTeX file .
5215	Plot a matplotlib axis .
5216	Get the data for the given field
5217	Extract data from the log .
5218	Return a list of hits matching the given search term .
5219	Return all intervals that overlap the given index .
5220	Return a list of gaps that match the given index .
5221	Prune the sequence .
5222	Return anneal .
5223	Return a copy of this component with the given components .
5224	Return a copy of this Striplog with another one .
5225	Intersect two Striplog objects .
5226	Merge overlapping segments .
5227	Plot the histogram .
5228	Invert the Striplog .
5229	Crop a Striplog .
5230	Compute the quality of the tests
5231	Return the name from a hex string .
5232	Create a loglike object from an image .
5233	Return the field name .
5234	Get a list of jobs .
5235	Parse a job .
5236	Update a token .
5237	Get all allocated allocations .
5238	Fail a deployment .
5239	Pauses a deployment .
5240	Get the health of a deployment .
5241	Drain a node .
5242	Drain a node with a drain .
5243	Sets the eligible node for a node .
5244	List files .
5245	Streams data from a file .
5246	Get information about a file .
5247	Join an agent .
5248	Update existing servers .
5249	Force leave a node .
5250	Get a list of nodes .
5251	Get a list of Evaluations .
5252	Get namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Starts a stable job .
5258	Deregister a job .
5259	Get SWAG configuration .
5260	Delete a peer .
5261	Get all deployments .
5262	Get a random value .
5263	Return a random mutation .
5264	Generate random polyglot attack .
5265	Returns a random FuzzFactor .
5266	Convert buffer to unicode .
5267	Start serving .
5268	Stop the server .
5269	Generate the html for a file .
5270	Start serving .
5271	Returns a mutate object .
5272	Spawn command .
5273	Get the output .
5274	Finish a read call .
5275	Closes the JFExecutor .
5276	Start the server .
5277	Execute jinja .
5278	Decode json .
5279	Build a random string .
5280	Build the list of parameters
5281	Build the Q object .
5282	Build a random value .
5283	Build OptGram instance .
5284	Build a fuzzer .
5285	Build an OptGram using a pre - trained algorithm .
5286	Shutdown the process .
5287	Run and monitor the process .
5288	Start the monitor .
5289	Return random float .
5290	Add a definition .
5291	Add a def to a cat group .
5292	Generate a macro .
5293	Returns a list of elements that match the given element .
5294	Return a fuzzed version of the config .
5295	Return fuzzed elements .
5296	Decorator for mutating objects .
5297	Signal handler .
5298	Terminate the command .
5299	Send a pause command .
5300	Resume a command .
5301	Terminate the command .
5302	Handle a command .
5303	Get Skype events .
5304	Set the mood of the user .
5305	Set avatar .
5306	Return the metadata for a given URL
5307	Get a single contact
5308	Get a user from Skype .
5309	Get a list of Skype bots .
5310	Get Skype bot user
5311	Search for Skype user
5312	Get Skype requests .
5313	Create an instance of this class from raw data .
5314	Merge this instance with another .
5315	Merge an object .
5316	Send sync states request .
5317	Read the token file .
5318	Write a token file .
5319	Verify Skype token .
5320	Refreshes Skype Token
5321	Get Skype user id .
5322	Get Skype registration token
5323	Synchronize Skype Endpoints .
5324	Check whether a user exists .
5325	Authenticate token .
5326	Authenticate using Skype Token .
5327	Configure Skype presence .
5328	Ping the Skype connection .
5329	Get recent chats .
5330	Share a Skype group .
5331	Create a new Skype user
5332	Extract the ID from the email address .
5333	Convert a chat URL to a chat ID .
5334	Returns a generator yielding each item of the given iterable .
5335	Return unicode text no matter .
5336	Detect the format of a text .
5337	Parse the given text .
5338	Post as a dict for serializing .
5339	Load YAML file .
5340	Export metadata to YAML file .
5341	Turn metadata into JSON
5342	Return the match string .
5343	Return a list of items .
5344	Return list of sublists for given index .
5345	Convert the pattern to match the pattern .
5346	Get the list of arguments .
5347	Return list of lists matching pattern .
5348	Turn a list of strings into a trie
5349	Convert a trie to a regular expression .
5350	Check the index for the given key .
5351	Insert string at index .
5352	Return the partition of a string .
5353	Return the list of spans of the given type .
5354	Shrink a range of spans .
5355	Insert new span at index .
5356	Return the current nesting level .
5357	Return the shadow of the span .
5358	Return the shadow of the extension .
5359	Convert the type to a list of spans .
5360	Pretty print indentation .
5361	Returns a list of all parameters .
5362	Return a list of parser functions .
5363	Returns a list of Template instances .
5364	List of WikiLink objects .
5365	Return a list of comments .
5366	Get the external links .
5367	Return a list of sections .
5368	Return a list of tables .
5369	r Returns a list of WikiList objects .
5370	Return a list of Tag objects .
5371	Iterate over all spans of the given type .
5372	Returns a list of WikiText objects for the given type .
5373	Return the WikiText of the given type .
5374	Return the mode of a list .
5375	Get an argument by name .
5376	Return a normalized name .
5377	Remove the first argument from the arguments list .
5378	Remove duplicate arguments from a tag .
5379	Set the argument of the parser .
5380	Get an argument by name .
5381	Check if an argument has an argument .
5382	Delete an argument .
5383	Returns a unicode string of the given codetype .
5384	Find an ellipsid .
5385	Creates a crs object from a URL .
5386	Create GeoJSON object from a GeoJSON file .
5387	Convert an EPSG code to a Python object .
5388	Convert an ESRI code to a protobuf .
5389	Creates an RS - code object from a string .
5390	Convert an unknown text into a crs object .
5391	Write record to file .
5392	Read a VLR header from a data stream .
5393	Parse GeoTiffKey objects .
5394	Parse GeoTiff key .
5395	Returns the signedness for the given index .
5396	Returns the ID for the extra dimension type .
5397	Create a new instance from a point record .
5398	Copy dimensions from this dimension to another dimension .
5399	Add zeros to the array .
5400	The names of all dimensions .
5401	Construct a NumPy array from a point format .
5402	Create a PointData object from a stream .
5403	Construct a Point instance from a compressed compressed buffer .
5404	The scale dimension of the data .
5405	Calculate the y - dimension .
5406	The scale dimension of the header .
5407	Add a new extra dimension .
5408	Write the points to a file .
5409	Write to file .
5410	Write to file .
5411	Build the dtypes for a point format .
5412	Build the dtypes for each point_formats .
5413	Convert a NumPy array to a point format .
5414	Returns the minimum file version for a point format .
5415	Determines if a point format file is compatible with a point format .
5416	Return a list of vlrs matching the given type .
5417	Extract vlrs from the given type .
5418	Read from data stream .
5419	Return True if file_format_id has the same point format .
5420	Determines if two files have the same dtype .
5421	Raises a PylasError if the file signature is not found .
5422	Read the header from the stream .
5423	Read VRLs from file .
5424	Read a PackedPoint record .
5425	Reads the compressed points data .
5426	Read the internal waveform packet .
5427	Read EVLRLRLs .
5428	Warn if there is at least one of the expected range .
5429	Opens alas file .
5430	Read data from a file .
5431	Create a SASData object from a header .
5432	Create a SAS Data object .
5433	Convert a PointRecord to a Point format .
5434	Merge multiple files into a single file .
5435	Write data to a LaTeX file .
5436	The date of the year .
5437	Set the creation date .
5438	The number of seconds of the object .
5439	set the minutes
5440	The number of points in the bounding box .
5441	Set the bounding box .
5442	Array of scales .
5443	A list of 2D numpy arrays representing the x and y offsets .
5444	Return the file version .
5445	Convert a header to a new header .
5446	Unpack a mask from a source array .
5447	Pack a sub - field .
5448	Returns a list of lost dimensions .
5449	Return a dict of the sub_fields .
5450	Return the number of extra dimensions .
5451	True if there is a waveform packet .
5452	Main function for satel integration .
5453	Calculate the checksum of a command .
5454	Print a hexadecimal representation of data .
5455	Verify a response .
5456	Given r return a list of set bits .
5457	Generate a query string .
5458	This interface is used to demo the server .
5459	Connect to the server .
5460	Start monitoring .
5461	Arm a partition .
5462	Clear the alarm .
5463	Turn the output .
5464	Keep the connection alive .
5465	Monitor the status of the device .
5466	Close the writer .
5467	Purge the database .
5468	Guess the type of notebook .
5469	Return file_id for given path .
5470	Get a notebook model from a file .
5471	Create a notebook model from a record .
5472	Get a directory from a file .
5473	Given a list of file records yield the corresponding notebook record .
5474	Create a directory model from a record .
5475	Create a file model from a DB record .
5476	Save a notebook .
5477	Save a file in the database .
5478	Rename a file .
5479	Delete a file .
5480	Ensure user exists in database .
5481	Remove user from database .
5482	Create a directory .
5483	Determines whether a user is in a table .
5484	Delete directory .
5485	Check if a directory exists .
5486	Return a list of files in a given directory .
5487	Return a list of directories in the database .
5488	Return True if a file with the given api_path exists .
5489	Query file .
5490	Return the default fields for a file .
5491	Retrieve a file from a user .
5492	Retrieve a file from the database .
5493	Get file id .
5494	Check if a file exists .
5495	Renames a directory .
5496	Save a file .
5497	Generate notebook files .
5498	Purge all remote checkpointpoints .
5499	Generate remote checkpointbooks .
5500	Generate all notebooks .
5501	Reencrypt a row .
5502	Re - encrypt the content of a user .
5503	Derives a single FFS key from a user .
5504	Derives fallback Fernet keys from a list of passwords .
5505	Generate a single - password cipher .
5506	Memoizes a single argument .
5507	Return the name of a column .
5508	Convert a row to a dict .
5509	Convert row to dict
5510	Create a notebook checkpoint .
5511	Create file checkpoint .
5512	Delete a single checkpoint .
5513	Get the content of a checkpoint .
5514	Return a list of checkpoint objects .
5515	Rename all remote checkpointpoints .
5516	Delete all checkpointpoints .
5517	Purge the database .
5518	Resolve the path based on the path .
5519	Apply a prefix to a model .
5520	Decorator to handle path arguments .
5521	Decorator to handle kwargs .
5522	Decorator to handle old files .
5523	Called when a manager has changed .
5524	Get a copy of a directory .
5525	Normalize api path .
5526	Split the api file path into a tuple .
5527	Encode a base64 string .
5528	Read a base64 string .
5529	Decode unknown bytes .
5530	Parses a base64 - encoded file - like object .
5531	Given a path and a prefix return the prefix .
5532	Wrap a path outside of root .
5533	Create a database user .
5534	Given a list of models return a list of dictionaries .
5535	Walk a directory tree yielding all subdirectories .
5536	Yields all files in a given directory .
5537	Yields all files with content
5538	Re - encrypt encrypted users .
5539	Reencrypt a single user .
5540	Unencrypt all users .
5541	Decrypt a single user .
5542	Creates an alembic . ini file .
5543	Upgrade the database .
5544	Sanitize a block .
5545	Adds an instance to the queue .
5546	Load instances for embed_type .
5547	Insert a block into the block .
5548	Load embedding data .
5549	Validate the data .
5550	The admin view .
5551	Return a JSON representation of the object .
5552	Hide the authenticated fields .
5553	Remove fields from the request
5554	Override get_publishable .
5555	Return the queryset for this comment .
5556	Return queryset of published_at .
5557	Get nullBoolean attribute .
5558	Validate widget .
5559	Validate a zone .
5560	Validate a UUID
5561	Get permissions for the group .
5562	Modify the given permissions .
5563	Validator for authors .
5564	Save a zone .
5565	Return the data as a dictionary .
5566	Prepare data for serialization .
5567	Render the template .
5568	Get all settings .
5569	Callback for Facebook .
5570	Get integration settings .
5571	Update the integration settings .
5572	Register a new invite .
5573	Convert a list of tags into a string .
5574	Show a zone .
5575	Save a featured image .
5576	Save a subsection .
5577	Get the extension .
5578	Return the absolute path to the medium
5579	Save the image .
5580	Save a thumbnail image .
5581	Return the MySQL connection .
5582	Get a BandwidthLimitedStream .
5583	Read amount of bytes .
5584	Consume an AMT .
5585	Schedules the consumption of a given token .
5586	Process the scheduled consumption .
5587	Calculate the projected moving average rate .
5588	Record the current consumption rate .
5589	Download a file .
5590	Poll for a transfer .
5591	Get callbacks for a given transfer_future .
5592	Return a copy of the dict with whitelisted keys .
5593	Decrement the counter .
5594	Finalize the callback .
5595	Check if a file is a special file .
5596	Acquire a tag .
5597	Releases a tag .
5598	Adjust the number of chunksize for this file .
5599	Queue a file - write operation .
5600	Build IOWrite task .
5601	Returns the appropriate download_output_manager class for the given transfer_future .
5602	Main function for download .
5603	Write data to file .
5604	Request pending write requests .
5605	Determines if the given file object is seekable .
5606	Upload a file to a bucket .
5607	Download a file .
5608	Copy a source to another bucket .
5609	Delete a subscription .
5610	Shutdown the queue .
5611	Cancel a pending transfer .
5612	Wait for transfer to complete .
5613	Read data from the file .
5614	Wrap data into a file object .
5615	Returns the correct upload_input_manager class for a transfer .
5616	Sets the exception .
5617	Set the result .
5618	Sets the exception .
5619	Wait for the task to finish .
5620	Cancel the task .
5621	Submits a task to executor .
5622	Adds a callback to be called when a call is done .
5623	Adds a failure cleanup container .
5624	Called when the job is done .
5625	Submit a task .
5626	Add a callable to the future .
5627	Upload a file to a bucket .
5628	Download a file from a bucket .
5629	Iterate over func decorators .
5630	Parse a decorator .
5631	Refactor a step .
5632	Iterate over step function decorators .
5633	Extract the arguments from a decorator .
5634	Refactor a step .
5635	Select the parser for the Redbaron Python interpreter .
5636	Get a list of items .
5637	Create a new person .
5638	Updates a membership .
5639	Delete a membership .
5640	Get a specific fact .
5641	POST a new room
5642	Get a list of person objects .
5643	Delete a member .
5644	Validate a base URL .
5645	Check if a string is a web URL .
5646	Opens a local file .
5647	Raises TypeError if o is not acceptable .
5648	Convert a list of dictionaries into a dictionary .
5649	Raises an exception if the response code is not expected .
5650	Convert a dictionary into a json object .
5651	Convert a datetime object to a string .
5652	Get a list of items .
5653	Create a new team .
5654	Update a room .
5655	Delete a private room .
5656	Get a list of items .
5657	The creation date of the video .
5658	Get the access token .
5659	Create a new object .
5660	Update a webhook .
5661	Delete a webhook .
5662	Parse the next URL .
5663	Waits for a rate limit .
5664	Update the HTTP headers .
5665	Return the absolute URL of the given URL .
5666	Perform a request .
5667	Perform a GET request .
5668	Get a list of pages .
5669	Get a list of items from a url .
5670	HTTP PUT operation .
5671	Delete a URL .
5672	Create a new JWT .
5673	Retrieve a list of people .
5674	Create a private file .
5675	Delete a message .
5676	Create a new user .
5677	Get a specific person .
5678	Update a person .
5679	Delete a person .
5680	Retrieve information about the current user .
5681	Get a list of objects .
5682	Get a list of objects .
5683	Create a new object .
5684	Update a team .
5685	Delete a team .
5686	Get a list of objects .
5687	Deserialize data into a dict .
5688	Get an access token .
5689	Get the last active activity .
5690	Process webhook service .
5691	Get the NGRK public URL .
5692	Delete webhooks with given name .
5693	Create a webhook .
5694	Create webhook .
5695	Print the console .
5696	Read data from telegram .
5697	Read telegram from queue .
5698	Create a DSMR protocol object .
5699	Create a dsmr reader .
5700	Create a TCP connection .
5701	Handle incoming data .
5702	Called when a connection is lost .
5703	Process a telegram .
5704	Parse telegram data .
5705	Get the version string for a file .
5706	Ensure python version is a python version .
5707	Find packages .
5708	Creates a command class for the given package .
5709	Returns a function that returns a function that can be used to run a function .
5710	Run a command .
5711	Make sure that the given targets exist .
5712	Wraps the given list of commands .
5713	Create a file handler .
5714	Retrieve a list of files for the given data specs .
5715	Get package data .
5716	Compile pattern .
5717	Split a path into a list of paths .
5718	Translate a glob .
5719	Join a list of translations .
5720	Translate glob part .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write indexes .
5724	Write the given table to the database .
5725	Write all constraints to the database .
5726	Write contents to a table .
5727	Process a row .
5728	Write the indexes .
5729	Write the constraints to the file .
5730	Write the table to the database .
5731	Return the size of the query .
5732	Enqueue a new table .
5733	Start a new task .
5734	Build the AND predicate for the given predicate .
5735	Simple JSON serializer .
5736	Reconnect to the database .
5737	Get a query from the database .
5738	Get a database connection
5739	Run the benchmark .
5740	Establish a connection to the pool .
5741	Look for a given error .
5742	Return the number of connections .
5743	Handle a connection failure .
5744	Create a simple expression .
5745	Update a table .
5746	Connect to the database .
5747	Set up the database .
5748	Destroys the database .
5749	Start a step .
5750	Stop a step .
5751	Parse the steps .
5752	Disconnect from the API .
5753	Reconnect a new connection .
5754	Establish a websocket connection .
5755	Called when a message is received .
5756	Stop pingers .
5757	Send ping to API .
5758	Check pong .
5759	Send a payload to WebSocket .
5760	Unpause all messages .
5761	Process a system message .
5762	Handle an info message .
5763	Handle an error .
5764	Data handler for data .
5765	Resubscribe channels .
5766	Handle channel data .
5767	Handle a conf .
5768	Update the timestamps of a channel .
5769	Reset the connection .
5770	Set the candles for a given pair .
5771	Configure bitfinex
5772	Subscribe to a ticker .
5773	Unsubscribe from a Ticker .
5774	Subscribe to a book .
5775	Unsubscribe from a book .
5776	Subscribe to a book .
5777	Unsubscribe from raw order book .
5778	Subscribe to trades .
5779	Unsubscribe from trades from a pair .
5780	Subscribe to a pair of colors .
5781	Unsubscribe from a pair of pairs .
5782	Authenticate the API .
5783	Cancel an order .
5784	Callback called when a command is received .
5785	Callback called when a device command is received .
5786	Callback called when a message is received .
5787	Creates a new device type .
5788	Publish an event .
5789	Update a device .
5790	Retrieve client status information .
5791	List all attachments
5792	Create a new bundle .
5793	Update a schema .
5794	Disconnect from IBM Watson Platform .
5795	Called when a client is connected .
5796	Subscribe to device events .
5797	Subscribe to a device status .
5798	Subscribe to a device .
5799	Publish a command .
5800	Called when an unsupported message is received .
5801	Process a device event .
5802	Callback called when a device is received .
5803	Callback called when appStatus is received .
5804	Get a specific event .
5805	Get all events for a device UUID .
5806	Make an API call .
5807	Initiate a new MgmtRequest .
5808	Get the status of a MmtRequest .
5809	Close the index .
5810	Return the number of intersecting points .
5811	Return the index associated with the given coordinates .
5812	Gets the bounds of the index .
5813	Delete an index .
5814	Create an index from a stream .
5815	Load a byte array .
5816	Remove the specified object from the index .
5817	Error checking for Error calls
5818	Load the application .
5819	Initialize Flask - related extension
5820	Serve Gunicorn server .
5821	Convert a value to a native image field .
5822	Crop the image on the center point .
5823	Process an image .
5824	Process an image .
5825	Process an image .
5826	Converts the given data into a Python object .
5827	Process the placeholder image .
5828	Pre - save model field .
5829	Update ppoi field .
5830	Save the form data as a tuple .
5831	Define the default form field .
5832	Convert an object to a string .
5833	Auto - discover all installed images .
5834	Unregisters a Sizer subclass .
5835	Unregisters a filter subclass .
5836	Add the URL to the placeholder image .
5837	Build filters and initialize the filter library .
5838	Returns the path to the root folder .
5839	Returns the path to the root folder .
5840	Get the path to the root folder .
5841	Delete matching files from the storage .
5842	Preprocess image .
5843	Preprocess GIF image .
5844	Preprocess image .
5845	Retrieve image from disk .
5846	Saves an image to a file .
5847	Return ppoi as string .
5848	Creates a resized image
5849	Render the template with the given name .
5850	Add a context to the context .
5851	Build a copy of the attributes dictionary .
5852	Returns a normalized path to the given image .
5853	Retrieve the path to the given image .
5854	Validate a list of image fields .
5855	Extracts the url from an image key .
5856	Validate a rendition key set .
5857	Format an instruction .
5858	Format a function .
5859	Decode a bytecode .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Establish a connection .
5863	Close the protocol .
5864	Read the next line of the report .
5865	Handler for FastAGI request .
5866	Parse an agi code line .
5867	Check the status of an agi code .
5868	Reset instances .
5869	Get the list of instances .
5870	Return the metadata for a given path .
5871	Get the primary keys for a model
5872	Deserialize the given value .
5873	Get an existing instance matching the given query .
5874	Get declared fields .
5875	Deserialize data .
5876	Split the association of the model .
5877	Delete table .
5878	Create a new database .
5879	List available snapshots .
5880	Restore a snapshot
5881	Delete a snapshot
5882	Rename a snapshot
5883	Replaces a snapshot
5884	Updates indexes after each epoch for shuffling for shuffling .
5885	Converts unicode string to string .
5886	Apply a function to the given data .
5887	Return a function that processes text from a text .
5888	Process text .
5889	Process text using parallelization .
5890	Generate the doc_length_stats based on the doc_hct .
5891	Returns a pandas DataFrame with the word count .
5892	Map a parameter type .
5893	Parse a list of interfaces .
5894	Return the inverse .
5895	Perform a rollback update .
5896	Return a copy of this instance .
5897	Return a copy of this instance .
5898	Check whether two Mappings are equal .
5899	Return an iterable of values in a dict .
5900	Clear the memory .
5901	Move fwdm to end .
5902	Write a temporary file .
5903	Return a list of contacts for a given addressbook .
5904	Merge arguments into a config object .
5905	Load address books .
5906	Prepare the search query string .
5907	Create new contact .
5908	Return a list of birthdays .
5909	Formats a phone number
5910	Print a list of contacts .
5911	Modify a subcommand .
5912	Delete contact file .
5913	Execute a subcommand
5914	Execute merge subcommand .
5915	Select a subcommand from the target address book .
5916	Get action for given alias .
5917	Convert a boolean config value to a boolean value .
5918	Create a new contact .
5919	Construct an Address object from a file .
5920	Create a Contact object from a user input .
5921	Create a contact object from an existing contact .
5922	Returns the name of the vCard
5923	Adds a category .
5924	Parse the type value .
5925	Convert list to string .
5926	Convert a string to a datetime object .
5927	Compares two UUIDs
5928	Search for all contacts
5929	Search for a list of contacts .
5930	Searches for UIDs matching the given query .
5931	Search for an address book .
5932	Get a dictionary of short_uids .
5933	Return the short_uid of a short uid .
5934	Searches for VCard files .
5935	Load a card from a VCard .
5936	Get an abook by name .
5937	Return an array of ARM architectures .
5938	Return an array of ARM architectures .
5939	Return argspec for given function .
5940	Dispatch the given parser .
5941	Prompt the user for input .
5942	Encode an output file .
5943	Try to guess the type of kwargs .
5944	Adds functions to a parser .
5945	A decorator to mark a function as a named name .
5946	Decorator to add an argument to a function .
5947	Prompt user for confirmation .
5948	Return a copy of the query with the given parameters .
5949	Like filter .
5950	Return a cached result .
5951	Returns the first matching query
5952	Delete all entities of the model .
5953	Called when a model is deleted .
5954	Return the Redis prefix for the given index .
5955	Estimate the ll for a given index .
5956	Perform a search .
5957	Count the number of records in the database .
5958	Return a connection to an object .
5959	Full text representation of a value .
5960	Refresh indices for a model .
5961	Clean old index .
5962	Add an object .
5963	Return the value associated with the given key .
5964	Auxiliary function to write a single record .
5965	Save the object to the database .
5966	Removes the object from the database .
5967	Get one or more objects .
5968	Register a reduce function .
5969	Open semaphore handle .
5970	Determines the CPU usage for the scheduler .
5971	Sends a result to work queue .
5972	Main worker loop .
5973	Add a call item to the queue .
5974	Ensure the executor is running .
5975	Wrap Cloudpickled objects into a Cloudpickled class .
5976	Start the process .
5977	Decompress a fd .
5978	Gets the executor for the given max_workers .
5979	Blocks until the executor is completed .
5980	Get preparation data .
5981	Prepare process data .
5982	Close all open files .
5983	Recursively terminate a process without psutil .
5984	Recursively terminate a process .
5985	Get the exit codes .
5986	Format a list of exit codes .
5987	Main entry point for semaphore .
5988	Ensure the process is running .
5989	A simple event processor that prints out out events .
5990	Run the program .
5991	Use this function to interact with an interactive console .
5992	Split a string .
5993	Get a stack of frames .
5994	Runs all registered hooks .
5995	Removes the current frame .
5996	Get the value of an int .
5997	Parse an integer .
5998	Process the commands .
5999	queue startfile
6000	Given a string return the next token .
6001	Log an error message .
6002	Read a command from the script .
6003	Close the connection .
6004	Disassemble a message .
6005	Disassemble instructions .
6006	Return a count of frames .
6007	Return the name of a call function .
6008	Print count entries of the stack trace .
6009	Look up a subcommand .
6010	Help message for short cmd .
6011	Add a subcmd callback .
6012	Run a subcommand .
6013	Start a debugger .
6014	Display a category .
6015	Search for a line number
6016	Given a frame return the trace frame .
6017	Map thread names to thread names .
6018	Parse an integer .
6019	Return a boolean indicating whether the argument is off or off .
6020	Run setting on obj .
6021	Set an integer .
6022	Run a boolean on the object .
6023	Display an int .
6024	Show a value .
6025	Determines if a line is a definition statement .
6026	Return True if line is a class definition .
6027	Quits the debugger .
6028	Set background color
6029	Determines if a color is dark .
6030	Return the signature of a frame .
6031	Return a list of all items
6032	Converts a frame into a list of frames
6033	Return a string representation of this object .
6034	Read a message from the MTP socket .
6035	Print a debug message .
6036	Create a subcommand .
6037	Runs the thread .
6038	Pretty - print an array .
6039	Lookup the name of a signal .
6040	Look up a signal by name .
6041	Determines the name of a name .
6042	Set a replacement for signal .
6043	Check if any of the sigs are present and adjust them .
6044	Prints an info signal .
6045	Process an action .
6046	Handle print .
6047	Process a signal .
6048	Extract the module name from a file .
6049	Search for a file in a directory .
6050	Return the path to a python file .
6051	All python files caller s dir without the path and trailing .
6052	Write a message .
6053	Run the program .
6054	Return a column of the given list of commands .
6055	Run the post mortem debugger .
6056	Close the connection .
6057	Write a message .
6058	Completes an identifier .
6059	Process a string .
6060	Add frames to ignore filters .
6061	Determines if filename can be used to search for files .
6062	Return the file name .
6063	Check if the trace is started .
6064	Determines whether the frame is stop or not .
6065	Sets to stop on next event that happens in frame
6066	A stack trace function .
6067	Run the debugger .
6068	Check the function name of a function .
6069	remove breakpointbp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete breakpoints by lineno .
6074	Opens the input .
6075	Read a single line .
6076	Prompt the user for confirmation
6077	r Add a whitespace .
6078	r Add a number .
6079	Return the query as a future .
6080	Restore the original session .
6081	Load a module .
6082	Iterate over documents .
6083	Main function .
6084	Transforms a CSV file into a stream .
6085	Open json or csv file .
6086	Convert a stream of data into a data structure .
6087	Convert date_format to float .
6088	Detect file encoding .
6089	Yields lines from a JSON file .
6090	Translate a file to UTF - 8 .
6091	Open a csv file .
6092	Read CSV file and yield rows .
6093	Entry point for the script .
6094	Create a connection from a URL .
6095	Save token to file .
6096	Perform a HTTP request .
6097	HTTP DELETE request .
6098	Wait until the project is finished .
6099	Return the root URL for a given URL .
6100	Save a token .
6101	Wrapper for json_request .
6102	Perform a POST request .
6103	Change the URL of a path .
6104	Get the default account .
6105	Get documentation for this resource .
6106	Wait for a job to complete .
6107	Perform a GET request .
6108	Print a csv to stdout .
6109	Read parameters from input file .
6110	Simplify the given document .
6111	Create a project with the given language .
6112	Upload the specified documents to a project .
6113	Main entry point .
6114	Upload a stream .
6115	Upload a file to a file .
6116	Main entry point .
6117	Create a LuminosityLogin object from the user credentials .
6118	Login .
6119	Post login page .
6120	Get data for a given p_p_id .
6121	Fetch data per day .
6122	Prepare view .
6123	Initialize the view .
6124	Override render method .
6125	Process a JSON - RPC message .
6126	Update menus .
6127	Return a list of urls for this page .
6128	Handle a JSON - RPC event .
6129	Called when enaml changes
6130	Create a new child widget .
6131	Initialize widget
6132	Destroy this component .
6133	Add a child to the widget .
6134	Remove child from child
6135	Iterate over child widgets .
6136	Set an attribute .
6137	Called when a proxy has changed .
6138	Notify about a changed object .
6139	Returns a list of nodes matching the given query .
6140	Initialize the proxy .
6141	Initialize the widget .
6142	Sets the source widget .
6143	Observe mode .
6144	Observe a block .
6145	Insert children .
6146	Read the contents of the given path components .
6147	Print an error message
6148	Print error message .
6149	Get a product by name .
6150	Create a new session .
6151	Reset the store .
6152	Returns a list of stores for a given search term .
6153	Set the delivery system .
6154	Get a menu .
6155	Adds an item to a basket
6156	Add a pizza to a basket .
6157	Adds a side to a basket
6158	Remove an item from a basket .
6159	Sets the payment method .
6160	Process payment options .
6161	Perform a HTTP GET request .
6162	HTTP POST method .
6163	Call the api and return the response .
6164	Add an item to the menu .
6165	Add an exit item
6166	Draw the menu .
6167	Process keyboard input .
6168	Select the selected item
6169	Parse a menu .
6170	Return the top values of a DataFrame .
6171	Compute the top group of a DataFrame .
6172	Convert pandas dataframe to datetime
6173	Convert a DataFrame to strftime .
6174	Convert a datetime object to a datetime object .
6175	Cast one or more columns to another .
6176	Rank values in a DataFrame .
6177	Calculate the waterfall of a DataFrame .
6178	Basic math operation .
6179	Round a DataFrame to a given number of decimal places .
6180	Return a new DataFrame with the given column values .
6181	Takes a DataFrame and returns the pivot table .
6182	Takes a DataFrame of columns and returns a new DataFrame with all columns in the group .
6183	Groups a DataFrame by groupby .
6184	Compute cumsum for a given column .
6185	Add missing row to DataFrame .
6186	Decorator to catch exceptions .
6187	Log a message .
6188	Log the time of the given logger .
6189	Logs the output shapes .
6190	Rename columns .
6191	Compute the sum of values for each column in the dataframe .
6192	Combine multiple columns into a single DataFrame .
6193	Get the parameter value from a function call .
6194	Removes old entries from a cachedir .
6195	Takes a pandas DataFrame and returns a new DataFrame with aggregated columns .
6196	Calculate the index of a group .
6197	Calculate the minimum value of a group .
6198	Fill missing values .
6199	Add an offset to a date object .
6200	Return the number of months in the given date object .
6201	Adds a number of years to the given date object .
6202	Parse ISO 8601 formatted date string .
6203	Filter DataFrame columns by date range .
6204	Calculate the percentage of a column .
6205	Core function for the ADA family .
6206	Updates the learning updates .
6207	Get training params .
6208	Add free parameters for optimization .
6209	Calculate the first step of the cursor .
6210	Prepare the graph for training .
6211	Compute the Tensor cost .
6212	Apply function func to each instance .
6213	Vectorize target .
6214	Report the training data .
6215	Train the model .
6216	Return a sample of the input .
6217	Compute the alignment weights based on precomputed values .
6218	Compute the context vector .
6219	Concatenate tensors .
6220	Pad the dataset with the given length .
6221	Yields the core for each parameter .
6222	Prints a report .
6223	Calculate the cost function .
6224	Invoke the benchmark .
6225	Build the loop variables .
6226	Scan a step .
6227	Calculate the core of the momentum .
6228	Set the training flag for this branch .
6229	Skip the number of epochs .
6230	Load the best parameters .
6231	Train the model .
6232	Calculate train cost for given epoch .
6233	Run a single epoch .
6234	Report the score_map .
6235	Get training data .
6236	Apply a function to the graph .
6237	Prints a report of the parameters .
6238	Calculate the variance of a tensor .
6239	Create neural network variables from data .
6240	Return the shared value .
6241	Takes a list of encoding layers and adds them to the stack .
6242	Takes a list of decoding layers and adds them to the decoding layers
6243	Return the encoding for x .
6244	Decode a neural network .
6245	Creates a 2D Gaussian .
6246	Register a layer .
6247	Monitor the output of each layer .
6248	All free parameters .
6249	Setup variables .
6250	Compute the MapDict .
6251	Save model parameters to file .
6252	Load parameters from a file .
6253	Prints out a log message .
6254	Register the given parameters .
6255	Register updates .
6256	Register training updates .
6257	Register monitors .
6258	Calculate the normalization of a tensor .
6259	Dump elt to pickle .
6260	Load a file - like object .
6261	Load model parameters from file .
6262	Create request elements .
6263	Decode a state .
6264	XC credential parser .
6265	Filters X request elements .
6266	Login to Werkzeug .
6267	Convert a dict to a list of strings .
6268	Convert a list of tuples into a dictionary .
6269	Parse a query body .
6270	Resolve the provider class .
6271	Create a cookie .
6272	Save the cookie .
6273	Get cookie data .
6274	Return the data as a dict .
6275	Generate a signature .
6276	Serialize a value to a string .
6277	Returns True if the certificate is valid False otherwise .
6278	Checks if the given number of seconds has expired .
6279	Return the credentials as a string .
6280	Checks if the given content is a binary string .
6281	Return the content as a string .
6282	Create request elements .
6283	Set the user s email .
6284	Decorator used to authenticate the view .
6285	Login to the organization .
6286	Generate a session key .
6287	Set a session key .
6288	Generate a random CRSF .
6289	Logs a message .
6290	Checks if the given HTTP status is in the given category .
6291	Split url into params .
6292	Decorator to enable cross - origin plugins .
6293	Set CORS headers .
6294	Returns the kwarg dictionary for the app instance .
6295	Return a string representation of an object .
6296	Ensure that inst is iterable .
6297	Return True if two iterables are close .
6298	Mark a function as deprecated .
6299	Deserialize an AudioSegment object .
6300	Create an AudioSegment from a file .
6301	Create a new AudioSegment from a numpy array .
6302	Execute SOX command
6303	Filters out silence .
6304	Calculate the FFT of this TimeSeries .
6305	Generate a sequence of frames .
6306	Normalize SPL segment by average .
6307	Return a new AudioSegment with the given others .
6308	Resample the signal .
6309	Serialize the state to a dictionary .
6310	Calculate the spectrogram .
6311	Given a list of candidates choose the first non - overlapping front ids .
6312	Calculate the index after offset_sample_idx after offset_sample_idx .
6313	Determines the offset_front_id after the start of an offset .
6314	Determines the offset id to match on offsets .
6315	Returns a list of dictionaries that overlap with the onset front .
6316	Update segmentation mask .
6317	Calculate the front id from the index .
6318	Generate a set of id ids that have one at a time .
6319	Calculate the offsets that correspond to the given offsets .
6320	Remove gaps from a segmentation mask .
6321	Removes all fronts that are smaller than size .
6322	Break a list of back - matched pairs into two lists .
6323	Merge adjacent segments .
6324	Split a mask into a list of masks .
6325	Downsample one or two - dimensional arrays .
6326	Perform an ISTTA task .
6327	Bandpass filter .
6328	Low - pass filter .
6329	Convert a list of responses into a tf . Tasks .
6330	Given a data_index and a data_index expand it .
6331	Check if two elements are equal .
6332	Given a list of filenames and a list of filenames and a list of filenames return a list of the RDDs .
6333	Load the confusion matrix .
6334	Convert list of responses to tf input .
6335	Update the index url from the config files .
6336	Autodetect files .
6337	Resolves a list of streams .
6338	Resolve a stream by its value .
6339	Resolve a stream by predicate .
6340	Raise an error if an error occurs .
6341	Push a single sample .
6342	Pushes a chunk of x into the stream .
6343	Get stream information .
6344	Open the stream .
6345	Returns the time correction of the object .
6346	Create a child element .
6347	Return the next sibling of this element .
6348	Return the previous sibling of the element .
6349	Set name .
6350	Set the value .
6351	Append a child to this element .
6352	Prepend a child .
6353	Return a copy of the element .
6354	Prepend a copy of an element .
6355	Remove a child node .
6356	Return a list of stream information .
6357	Parse word .
6358	\ x1b [ 1mNAME \ x1b [ x1b [ 1mNAME \ x1b [ 1mNAME \ x1b [ 0mNAME \ x1b [ 0m_get_AUTO_AUTOCOMOMOMOMOMOMOMOMODE_AUTOCOMOMOMLETE_AUTOCOMLETE_AUTOCOMENTS
6359	Compute the number of edges in the network .
6360	Iterate over a given pipe .
6361	Imapunordered iterator .
6362	Convert a word to a string .
6363	Fuzzy
6364	Fuzzy index .
6365	Extend the results of a query .
6366	Print help for a command .
6367	Print DB info .
6368	get DBKEY type
6369	Print GEOHASH .
6370	\ x1b [ 1mNAME \ x1b [ 1mNAME \ x1b [ 0m ids
6371	Print index details .
6372	Score word .
6373	Compare two strings
6374	send a response
6375	Return a list of requests .
6376	Extract bits from a given array .
6377	Convert a YAML representation to a YAML representation .
6378	Convert a slice to a slice .
6379	Yield all files matching the given pattern .
6380	Determines whether a value is in an iterable .
6381	Create a statement for each item in the parentUnit .
6382	Logical shift left .
6383	Convert a numeric value to aceil .
6384	Determines whether a number is a POW2 .
6385	c - like case of switch statement
6386	Set the default stem .
6387	Register a vcdWriter .
6388	Initialize the simulation .
6389	Logs a change .
6390	Process method .
6391	Generate a list of agents for a unit .
6392	Get the association of this unit .
6393	Yields distinct values from a given iterable .
6394	Yield items grouped by fn .
6395	Flatten an iterable .
6396	Merge nested if if if else False .
6397	Remove unconnected signals from a network .
6398	Check if a proc is a simple assignment .
6399	Tries to merge two PDL statements .
6400	Reduce a list of processes .
6401	Registers a write request .
6402	Serialize a Unit or Unit or a Unit or Unit or a Unit or Unit or class .
6403	Given a list of statements return the name of the output .
6404	Takes a list of statements and returns a list of cut - off - off - off - off statements .
6405	Add a sig to the register .
6406	Synthesize the architecture .
6407	Returns the highest priority for a given stm .
6408	Get the max statement ID for statements .
6409	Write data to simulation .
6410	returns the master dir
6411	Load declarations .
6412	Return a list of signals for the specified interface .
6413	Return the name of the entity .
6414	The bit length of this interface .
6415	Determines the sensitivity of an operation .
6416	Evaluate the given operator .
6417	Convert the given signature to the appropriate type .
6418	Re - interpret the given bits to a hStructT string .
6419	Return the full word width .
6420	Group items by word index .
6421	Pretty print interface .
6422	Extract frames from a TransTmpl object .
6423	A generator that walks the parts of the word .
6424	Pack the data into a dictionary
6425	Clean signal meta .
6426	Return a set of enclosures for the given statements .
6427	Given a list of signals find the corresponding sensitivity .
6428	Return the RDL context for this statement .
6429	Process HDL statement .
6430	Merge two statements .
6431	Determines if a list of statements is merged .
6432	Merge statements into a single HDLStatement .
6433	Merges a list of statements into a single HDLStatement .
6434	Tries to reduce a list of statements .
6435	Called when a parent event is received .
6436	Set parent statement .
6437	Register stem nodes .
6438	Destroy the context .
6439	Create a new register .
6440	Create a signature .
6441	Clean a subunit .
6442	Recursively flatten the fields of a struct .
6443	Unpack data into a HVal object .
6444	Convert signed value to a signed operator .
6445	Add a process to the process .
6446	Simulate simEvalCond
6447	Connect a port to a subSimUnit .
6448	Creates an updater for the given value .
6449	Creates an array updater for the given item .
6450	Convert a value to a bit vector .
6451	Processes the given proc .
6452	Evaluate a parameter .
6453	Set the value of this parameter .
6454	Convert an interface to a HType object .
6455	Finalize the memory .
6456	Retrieves the index .
6457	Create a new ValueCluster object from a PyPy array .
6458	Auto - cast the value to the appropriate type .
6459	Reinterpret cast function .
6460	Yields all parameters in the given interface .
6461	Calculate connections between srcPacks .
6462	Concatenate an intf to a file pointer .
6463	Convert a rom into a list of processes .
6464	Converts this TargetPlatform to a Rtl object .
6465	Register the interface in the interface .
6466	Tries to return a boolean indicating whether the value is a valid vtype
6467	Tries to convert a value to a XOR .
6468	Returns the base name scope for this class .
6469	Return the decision for the given object .
6470	Generate HDL type .
6471	Create an IfContainer instance from a string .
6472	Extracts the baseCond from a string .
6473	SimBits T .
6474	Return the name of the const .
6475	Return the cutoff driver for the given signal .
6476	Load transform from an array .
6477	Load a TransTStruct from a struct .
6478	Load this object from a htype .
6479	Get the width of the item .
6480	Iterate over the elements of this subtree .
6481	Return a copy of the given value .
6482	Merge two statements .
6483	Return indent number .
6484	Raises an IntFLvlConfError if the property does not exist .
6485	Register a parameter .
6486	Update ParamDeclrCollection from otherObj .
6487	Register a unit .
6488	Register an interface .
6489	Register an array with the given name .
6490	Get the single driver .
6491	Evaluate the static expression .
6492	Convenience function for adding RTL signals .
6493	Return a copy of self with new indent .
6494	Try to connect a driver .
6495	Propagate clk from obj to obj .
6496	Propagate clk to obj .
6497	Propagate a clk rst .
6498	Propagate rstn to obj
6499	Propagate rst to obj
6500	Iterate over bits .
6501	Serialize exclude statements .
6502	Return a serialized version of the declaration .
6503	Serialize params uniq .
6504	Get the full name of the interface .
6505	Make an association .
6506	Create a model from a unit .
6507	Create a SimModel instance from a unit .
6508	Reconstructs all the signals in the model .
6509	Simulate SimUnitVcd .
6510	This is a context manager that will be called when the callback is called .
6511	Connect a port .
6512	Register an external signal .
6513	Connects to the external source .
6514	Get the external identifier .
6515	Determines if a signal is injected on a signal .
6516	Adds a process to the queue .
6517	Adds a HDLProc to the schedule .
6518	Schedules a comb update event .
6519	Schedules the apply_apply_apply .
6520	Confirms that a value is conflict with another value .
6521	Run combineProcesses .
6522	Run SeqProcesses .
6523	Applies the values applied to the calculation .
6524	Return a copy of the object .
6525	Write a value to the signal .
6526	Adds a new process .
6527	Simulate a unit .
6528	Creates an operands .
6529	Convert a list of statements into a list of statements .
6530	Create a new HW process .
6531	Calculate the distance between two strings .
6532	Calculate the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup the Vizio platform
6535	Update the power state .
6536	Mocks the volume .
6537	Increment the volume .
6538	Decrement the volume down .
6539	Set volume level .
6540	Reset the piece .
6541	Create a piece at the given square .
6542	Remove a piece at the given square .
6543	Set the piece at the given square .
6544	Determines if a move is killed by a move .
6545	Determines if the king is killed .
6546	Determines if the game is over .
6547	Determines if the player is a checkmate .
6548	Determines whether this cell is a repeated repetition .
6549	Removes the item from the move stack .
6550	Return a string representation of the piece .
6551	Pushes a move from the system .
6552	Calculate the Zobrist hash .
6553	Return the symbol of the piece .
6554	Creates a new instance from the given symbol .
6555	Return a string representation of the piece .
6556	Create a Piece instance from a string .
6557	Parse list of commits .
6558	Parse a git commit .
6559	Load command line arguments .
6560	Execute Django config with given command line .
6561	Add an argument parser .
6562	Load configuration from file .
6563	Generate a YAML document
6564	Generate a markdown file .
6565	Return the cast as a string .
6566	Returns a list of dates between two dates .
6567	Parse a date string .
6568	Load a file .
6569	Sets the number of missing dates to None
6570	Compute the missing rates for the given currency .
6571	Get the rate for a currency .
6572	Convert currency to currency
6573	Slice an iterable .
6574	Utility function to animate frames
6575	Read a record from the file .
6576	Write a record to the file .
6577	Map words to memoryview
6578	Return the comments as a string .
6579	Add an array to the summary .
6580	Close the DAF file .
6581	Compute the position of each position in the sequence .
6582	Close the DAF file .
6583	Load the PCK data .
6584	Compute the segmentation .
6585	Process call .
6586	Called when a binary operation is checked .
6587	Called when a dict is checked .
6588	Check if a string is within a string .
6589	Called when a node is checked .
6590	Replace an exception handler .
6591	Detect the logging level .
6592	Return the name of an exception handler .
6593	Converts a value into an id attribute .
6594	Return True if node is a bare exception .
6595	Check for errors .
6596	Removes the file if it exists .
6597	Add a link to the database .
6598	Render the template .
6599	Render the PDF template .
6600	Return a Unicode quote for the given string .
6601	Configure a module .
6602	Convert string to underscore .
6603	Automatically auto - index the metadata .
6604	Parse a file .
6605	Load content from a file .
6606	Parse a line into a price model .
6607	Translate a symbol .
6608	Load symbol map .
6609	Get the default session .
6610	Add a price .
6611	Import prices from CSV file .
6612	Print latest price .
6613	Print latest prices .
6614	Download prices .
6615	Prune price entries .
6616	Get the default session .
6617	Add new symbol map .
6618	List all price maps .
6619	Get symbol by its identifier .
6620	Read lines from CSV file .
6621	Maps an entity to a price model .
6622	Maps a price model .
6623	Read configuration file .
6624	Returns the path to the config file .
6625	Create the user s config file .
6626	Return the path to the config file .
6627	Get the contents of the config file .
6628	Set a configuration option .
6629	Get an option by its name .
6630	Save configuration to file .
6631	Parse a symbol .
6632	Add a price model .
6633	Add a price entity .
6634	Get the price for a symbol .
6635	Return the session object .
6636	Get prices for a given date .
6637	Get prices on a symbol .
6638	Prune all prices .
6639	Prune prices for a given symbol
6640	Download price for given symbol .
6641	Get all securities .
6642	Partial partial function .
6643	Update child arguments .
6644	Recursively descend the tree .
6645	Decorator to make a function callable .
6646	Returns True if student part has equal part length .
6647	Determines whether a function has equal AST .
6648	Tests whether a string contains code .
6649	Test if the given package has a valid import .
6650	Test whether the string contains the given text .
6651	Check whether a function has printout .
6652	Check if the console has no error .
6653	Tests if the student has a given choice .
6654	Check a function for correctness .
6655	Get the result from a process .
6656	Overrides the student s state .
6657	Tests whether an instance is an instance of the system .
6658	Return a list of all defined items .
6659	Return a child representation of this node .
6660	Extracts xml from the tree .
6661	Check whether a context loop exists .
6662	Check whether the context contains a context with the given state .
6663	Check if the student part is part of the answer .
6664	Check if a student part has a part .
6665	Check arguments for arguments .
6666	Build a function call .
6667	Get the true anomaly .
6668	Initialize Flask app .
6669	Initialize the configuration .
6670	Add a ldap3 server to the pool .
6671	Decrement a connection .
6672	Teardown a connection .
6673	Authenticate username and password .
6674	Attempt to authenticate a user .
6675	Authenticate a LDAP search method .
6676	Get LDAP groups for a user .
6677	Retrieve user information .
6678	Get user info for a given username .
6679	Get an LDAP object
6680	Return the LDAP connection .
6681	Create a connection .
6682	Create an LDAP connection .
6683	Destroy a connection .
6684	Search for containers .
6685	Search for labels .
6686	Search for repositories .
6687	Search for artifacts .
6688	Speak the client .
6689	Sends a command to the server .
6690	Update the secrets
6691	Update the headers
6692	Require client secrets .
6693	Download a file from a URL .
6694	Stream a file from a url
6695	Update authorization token .
6696	Get or create a folder .
6697	Read the response from the response .
6698	Get bucket .
6699	Update the client secrets .
6700	Initialize the clients .
6701	Load the credentials .
6702	Return a list of log logs for the specified name .
6703	List all logs for the extension .
6704	Create folder at endpoint_id .
6705	Initialize transfer client .
6706	Search for all available containers
6707	Print the status of the backend .
6708	Add a value to the backend .
6709	Remove client secrets from backend .
6710	Activate backend
6711	Delete backend
6712	Update the GCR base .
6713	Generate basic auth header .
6714	Generate HMAC signature .
6715	Generate a header signature .
6716	HTTP DELETE operation .
6717	Send a HEAD request .
6718	Paginate a GET request .
6719	Verify the certificate .
6720	Remove an image
6721	Get the lookup for the version file .
6722	Get a list of requirements for a given lookup .
6723	Get the singularity version .
6724	Check if package is installed .
6725	Returns the path to the installd dir .
6726	Determines the thumbnail of the site .
6727	Run a command .
6728	Extract the metadata from an image file .
6729	Update the secrets .
6730	Prints out an output file .
6731	Kill commands .
6732	List logs .
6733	Get all collections
6734	Update the user s secrets .
6735	Update Google Storage settings .
6736	Return an instance of the client .
6737	Send an IPython embed .
6738	Get manifests for a given repo .
6739	Get manifest .
6740	Get download cache .
6741	Extract the Docker container environment .
6742	Update the base .
6743	Update the secret .
6744	Get the metadata for the job .
6745	Get client settings .
6746	Get a setting and update it .
6747	Update a setting .
6748	Generate an authorize request with the given names .
6749	List builders .
6750	Load templates .
6751	Get an IP address .
6752	Build web server
6753	List all the containers in the bucket .
6754	Search for all available containers
6755	Main entry point .
6756	Print out images .
6757	Initialize the database .
6758	Get the template for the given template .
6759	Search for shared endpoints .
6760	List endpoints .
6761	List an endpoint .
6762	Retrieve a share URL .
6763	Read client secrets .
6764	Get the application services .
6765	Delete an object from a bucket .
6766	Delete an object .
6767	Destroy an instance .
6768	Get subparsers for the given parser .
6769	Generate a list of tokens .
6770	Returns a temporary directory .
6771	Extract a tar archive .
6772	Extract a tar archive .
6773	Calculate the SHA256 hash of a file .
6774	Read a file .
6775	Read a JSON file into a dictionary .
6776	Clean up a list of files .
6777	Upload an image
6778	Get or create a new collection .
6779	Get a collection by name .
6780	Get a container .
6781	List images .
6782	Inspect the metadata for a container
6783	Rename an image
6784	Move an image .
6785	Remove an image
6786	Add an image to registry .
6787	Push an image .
6788	Parse the header of a recipe .
6789	Find a single recipe .
6790	Create a build package .
6791	Run a build .
6792	Update the metadata for a given blob .
6793	Format a container name .
6794	Determines if the stream should be colored .
6795	Emit an error .
6796	Write a message to the stream .
6797	Display a table .
6798	Pushes an image
6799	Get a specific template
6800	Get the manifest for a given tag .
6801	Get the template for the given name .
6802	Update the client credentials .
6803	Return a repr for the given arguments .
6804	Context manager for s3 errors .
6805	Create a temporary file proxy .
6806	Get the gravatar URL .
6807	Generate the Gravatar URL .
6808	Check if a user has a Gravatar .
6809	Generate Gravatar profile url .
6810	Generate blocks of chimera blocks .
6811	Compute chimera block quantient .
6812	Enumerate the residue smiles .
6813	Iterate over a molecule .
6814	Normalizes a molecule .
6815	Apply transformations to a molecule .
6816	Convert a molecule into its canonical form .
6817	Validate smiles .
6818	Disconnect a metal .
6819	Standardize smiles .
6820	Enumerate the TautomerSmiles .
6821	Convert Tautomer to mol .
6822	Normalize mol .
6823	Return the parent of a Tautomer .
6824	Get the parent of a molecule .
6825	Return the stereo parent of a molecule .
6826	Set the isotope parent of a molecule .
6827	Compute the parent of a fragment .
6828	Return the parent of mol .
6829	Main entry point for Molvs .
6830	Remove a fragment .
6831	Choose the closest fragment for a mol .
6832	Integrate the model .
6833	Get statistics about the user .
6834	get mem of org
6835	Get team information .
6836	Get repos .
6837	Get the total contributors .
6838	Get the list of pull requests .
6839	Get a list of issues for a repository .
6840	Get the readme for a repo .
6841	Get the license .
6842	Get a list of commits .
6843	Write the JSON representation of the organization .
6844	Write the total number of commits to a file .
6845	Write languages to file .
6846	Create a directory if it doesn t exist .
6847	Remove a date .
6848	Get the list of organizations for the user .
6849	Create an enterprise session .
6850	Internal helper to check the rate limit of a Git session .
6851	Connect to GitHub .
6852	Query repositories .
6853	Get an organization .
6854	Write the model to a file .
6855	Create a GitLab instance from a Gitlab repository .
6856	Create a new document from a record .
6857	Return a dict representation of a license .
6858	Get the traffic for this repository .
6859	Get all releases .
6860	Get a list of referrers .
6861	Get data for a given URL .
6862	Write JSON to file .
6863	Write the referrers to a file .
6864	Calculate the number of entries in the csv file .
6865	Write data to file .
6866	Write the referrers to a file .
6867	Convert a JSON file into a JSON object .
6868	Retrieves the metadata for a given URL .
6869	Process a file .
6870	Login to GitHub .
6871	Get the mem of the org .
6872	Write all logins to a file .
6873	Connect to a stashy session .
6874	Connect to Gitlab .
6875	Query for repositories .
6876	Convert a git repository to a sloc file .
6877	Calculate the number of hours per month .
6878	Takes a dictionary and prune a dictionary .
6879	Read GQL query file .
6880	Query GitHub by filePath .
6881	Submit a query to GitQuery .
6882	Waits for the specified UTC time stamp .
6883	Prints the number of seconds of the queue .
6884	Loads the data file .
6885	Writes the data to a file .
6886	Create TFS connection .
6887	Create a TFS project analysis client .
6888	Create TFS core client .
6889	Create TFS Git client .
6890	Create TFS Git Client .
6891	Retrieve Git Repository objects for a given project .
6892	Get Tfvc branches for a project .
6893	Get the number of commits .
6894	Calculate the total number of weeks .
6895	Write the data to a CSV file .
6896	Configure backends .
6897	Returns a MetricsInterface for the given thing .
6898	Set the timing of the backend .
6899	A context manager for the timer .
6900	A decorator to add a function to the timer .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Rollup the gauge .
6905	Return a new enumeration of members .
6906	Convert DB value to enum .
6907	Convert enum to python object
6908	Prepare the value for the enum .
6909	Resolve the given path .
6910	Given a dictionary of dictionaries return a list of dictionaries where each row is a list of dictionaries where each row is a list of dictionaries where each row is a list of dictionaries .
6911	Return the mean value .
6912	Mark the counter .
6913	Return the average rate of the counter .
6914	Mark a value as a value .
6915	Send a metric .
6916	Serialize a metric .
6917	Formats a metric .
6918	Buffered send metric .
6919	Checks if the given option exists in the given section .
6920	safe version of json
6921	Get the value of a setting if it exists .
6922	Converts a list of codes to a GUID map .
6923	Get a list of all possible divisions for the current user .
6924	Map a number to foreign invoice numbers .
6925	Solve a grid .
6926	Add a view to the injector .
6927	Adds a form view to the injector .
6928	Creates a view for the specified injector .
6929	Runs the given injector .
6930	Creates a view for the given injector .
6931	Creates a model view set .
6932	Create a stream from a file descriptor .
6933	Called when the connection is ready to read .
6934	Close the connection .
6935	Called when a connection is lost .
6936	Make a watch request .
6937	Unwatch a watch .
6938	Set up a watch .
6939	Initialize the watch .
6940	Get an event from the file .
6941	Trigger a touch event .
6942	Update the elapsed time .
6943	Updates the timer .
6944	Close all connections .
6945	Return True if all connections are in the queue .
6946	Establish a connection to a host .
6947	Query for lookupd .
6948	Set max_in_flight .
6949	Called when a message is up .
6950	Add a callback .
6951	Remove a callback .
6952	Triggers all listeners .
6953	Publish a message to a topic .
6954	Set the feature transform .
6955	Calculate the prediction .
6956	Calculate theta .
6957	Parse a log file
6958	Remove temporary fastq files .
6959	Merge default adapters .
6960	Main function for trimmomatic .
6961	Reads the depth file .
6962	Main entry point for the plot .
6963	Set the template path .
6964	Set the main channel names .
6965	Get user channel .
6966	Renders a Jinja2 template
6967	Return the template string .
6968	Set the channel definitions .
6969	Update the main forks for a given channel .
6970	Set the secondary channel .
6971	Update the attributes of the template .
6972	Set the status of the compiler .
6973	Set the raw inputs .
6974	Set the secondary inputs .
6975	Set extra inputs .
6976	Parse the coverage header .
6977	Parse assembly contigs .
6978	Calculate the GC content for a given sequence .
6979	Filter the contigs based on the comparisons .
6980	Returns the total length of all contigs .
6981	Write assembly into a file .
6982	Write the assembly report into a file .
6983	Remove inner nodes from a string .
6984	Perform inner - fork checks .
6985	Parse the sanity checks .
6986	Parse a linear pipeline .
6987	Determine the lane for a given pipeline .
6988	Parse a string into a list of lane objects .
6989	Establish a linear connection .
6990	Establish a connection to a source .
6991	Add unique identifiers .
6992	Remove unique identifiers .
6993	Check that the required files are open .
6994	Convert a header string to a dictionary mapping
6995	Calculate HMMS .
6996	Return the size of a string
6997	Get pipeline processes .
6998	Clear inspect information .
6999	Update the barrier status .
7000	Retrieve a log from a file .
7001	Takes a process and returns the cpu_warnings .
7002	Update the process stats .
7003	Parser for the log file .
7004	Update the inspection log .
7005	Display the screen .
7006	Move the screen down .
7007	Right left left right left .
7008	Get the last n lines of the log file .
7009	Prepare the pipeline configuration .
7010	Load the dag file into a dictionary .
7011	Calculate the hash of the pipeline .
7012	Returns the path to the next flow .
7013	Main function for fasta .
7014	Main entry point for the pipeline .
7015	Run innuendo .
7016	Return a recipe class for a given recipe name .
7017	List available recipes .
7018	Validate a pipeline string .
7019	Build upstream task pipeline .
7020	Build a task downstream .
7021	Define pipeline string .
7022	Run automatic pipeline .
7023	Return a string representation of a component .
7024	Write a report to a JSON file .
7025	Parse the trimmomatic log file .
7026	Convert a list of assembly contigs into a file .
7027	Remove temporary files .
7028	Parse a list of files .
7029	Parse the header file .
7030	Iterate over the given filters .
7031	Extract the contig ID from a contig string .
7032	Get the data for the plot .
7033	Write report data to json file .
7034	Main entry point for the assembly .
7035	Parse the assembly file .
7036	Calculate summary stats for each contigs
7037	Return a list of labels for a window
7038	Calculate GCP propagation .
7039	Gets the GC projection for the given contigs .
7040	Main function for skesa .
7041	Write a JSON report to a JSON file .
7042	Get the index of a list of bias values .
7043	Extract the range from a DNA sequence .
7044	Calculate the optimal sample trim .
7045	Extract summary information from a file .
7046	Check the health of a summary .
7047	Parse bowtie log .
7048	Parse a process name .
7049	Add a dependency to the process .
7050	Searches for the tree that matches the given template .
7051	Build the header .
7052	Build the footer .
7053	Set main channels .
7054	Sets up the initial process .
7055	Sets the secondary channels .
7056	Sets the status channels .
7057	Return a string representation of the resource configuration .
7058	Return a string representing the container configuration .
7059	Return a string representation of the parameters .
7060	Return a string representing the merged parameters .
7061	Generate a configuration string .
7062	Set the configuration .
7063	Write the tree to a JSON file .
7064	Render the pipeline .
7065	Write the Docker CLI options to a project .
7066	Export the parameters .
7067	Export the directives .
7068	Fetch tags for each process
7069	Build the process .
7070	Set kmer range .
7071	Run metaAdes .
7072	Get the ID of the report .
7073	Updates the trace size in the trace .
7074	Update the log file .
7075	Send a live report .
7076	Initialize the report .
7077	Closes a connection to the server .
7078	Convert ADQC adapters to fastq format .
7079	Main function for fastqc .
7080	Saves data to a json file
7081	calculate the fastq file
7082	Build the versions of the software .
7083	Generate a dictionary of metadata for a MASH file .
7084	Print a colored message .
7085	Parser for procs_dict .
7086	Processes a pipeline .
7087	Guess file type of file .
7088	Get the minimum value of a qualstr .
7089	Return a list of valid encoding strings .
7090	Parse coverage table .
7091	Filter assembly file based on coverage .
7092	Filter BAM files based on coverage information .
7093	Evaluate minimum coverage .
7094	Calculate the assembly size of the assembly .
7095	Parse assembly mapping file .
7096	Convert camel case to camel case .
7097	Return a dictionary mapping the class name to the process_map .
7098	Process a newick file
7099	fasthull function
7100	Map W to data
7101	Apply median filter to X .
7102	Compute the Gaussian signal .
7103	Compute the squared distance .
7104	Compute the cross - section of the network .
7105	Gaussian filter .
7106	Compute the cross - correlation matrix .
7107	Circular shift .
7108	Compute the embedded space .
7109	Plot a matplotlib plot .
7110	Plots the boundaries for each boundary .
7111	Plots a scatter plot of the GIST events for each time series .
7112	Plot one track .
7113	Plot a tree .
7114	Return a list of feature indices .
7115	Compute the 2D Fourier transform from features .
7116	Compute the similarity between two sets of features .
7117	Fit the scatter plot .
7118	Perform a partial fit on the data .
7119	Read the annotations from the audio file .
7120	Find estimation for an estimation .
7121	Save time intervals to a file .
7122	Returns a list of all bounds for all algorithms .
7123	Get configuration for a feature .
7124	Return a list of audio files .
7125	Read hier labels from jam file .
7126	Return the duration of a feature file .
7127	Write a list of strings to a MAF file .
7128	Return the path to the audio file .
7129	Align the segments that belong to a song .
7130	Estimate the number of beats for the track .
7131	Read the number of beats .
7132	Compute the number of beats sync features .
7133	Read features from file .
7134	Write the features to a JSON file .
7135	Return a list of all parameter names .
7136	Compute the framesync times for each feature .
7137	Computes the frame_times for each feature type .
7138	Extract the features .
7139	Select features from a file .
7140	Preprocessing function .
7141	Postprocessing function .
7142	Entry point for the speficied algorithm .
7143	Print the mean of the results .
7144	Compute the GTF results for a reference file .
7145	Compute the information gain for an interval .
7146	Process a track .
7147	Determines the file name .
7148	Processes a BED file .
7149	Adds a config variable .
7150	Compute features for a file .
7151	Process features in a file .
7152	Calculate the cost of a Gaussian distribution .
7153	Lognormalize F .
7154	Return the minimum value of a function F .
7155	Normalize X .
7156	Calculate the time frames for the given timestamps .
7157	Remove empty segments .
7158	Saves audio to audio .
7159	Synchronize the labels of two_idxs .
7160	Process a segmentation level .
7161	Align the end of the end of two Hierarchy
7162	Compute the distance between the node .
7163	Estimate the knee of the K - knee .
7164	Helper function for clustering .
7165	Run k - means algorithm
7166	Compute the BIC
7167	Return the magnitude of X .
7168	Convert a JSON blob into a numpy array .
7169	Load bounds from JSON file .
7170	Convert a json file to a list of labels .
7171	Convert a json file to a list of beats .
7172	Compute the Fourier transform .
7173	Compute the labels for each label .
7174	filter the activation matrix
7175	Returns the bounds module for the given bounds_id .
7176	Return label module for given labels_id .
7177	Run hierarchical segmentation .
7178	Run a flat file .
7179	Runs estimations on a file .
7180	Processes a track .
7181	Process a single audio file .
7182	Update W matrix .
7183	Main function for spool .
7184	A decorator that converts a function into a coroutine .
7185	Calculate accumulator accumulator .
7186	Sets up a task for the given translator .
7187	Send text to iterable .
7188	Send a source to the target stream .
7189	A decorator that converts a url into an HTTP request .
7190	Translate source to target phrase .
7191	Return the translation table for a given language .
7192	Print the translation table .
7193	Remove nodes from a network .
7194	Convert network to HDF5 format .
7195	Create a network from an HDF5 file .
7196	Set a DataFrame to a DataFrame .
7197	Calculate the aggregate of all nodes .
7198	Get the node ids for a given location .
7199	Plot the data .
7200	Set the Pois category .
7201	Calculate the closest pois for a given category .
7202	Calculate the low connectivity score for each node .
7203	Process a node .
7204	Make OSM query
7205	Build a query for a node .
7206	Build a node query .
7207	Check if value is a regular expression .
7208	Compare the given value against the expectation .
7209	A decorator to make a function callable .
7210	Compare expr to expr
7211	Triggers methods .
7212	Matches the request .
7213	Get a matcher by name .
7214	Return a matcher with the given name .
7215	Set the response body .
7216	Set response data .
7217	Set the value of a key .
7218	Append functions to target .
7219	Triggers a request .
7220	Add a url matcher .
7221	Add headers to request .
7222	Ensure that headers are present .
7223	Ensure headers are present .
7224	Set the Content - Type header .
7225	Add a request .
7226	Set the request body .
7227	Add json matcher .
7228	Set the XML matcher .
7229	Read the file at the given path .
7230	Persist the status of this object .
7231	Set the error .
7232	Create a response object .
7233	Matches the request .
7234	A decorator that activates a function asynchronously .
7235	Set mock engine .
7236	Enables or disables a network .
7237	Add a mock .
7238	Remove a mock .
7239	Activate the engine .
7240	Disable the engine .
7241	Determines if the network should use the network filter .
7242	Matches a request .
7243	Return a copy of this request .
7244	Activate a function .
7245	Context manager to temporarily enable engine .
7246	Add an interceptor .
7247	Remove an interceptor .
7248	Get a setting from the connection .
7249	Returns the decrypted SQL for the target .
7250	Set the value of a model instance .
7251	Get the placeholder for the given database .
7252	Get a column by alias .
7253	Get a placeholder .
7254	Search for multiple YAML entries .
7255	Calculate the base regression .
7256	Return the Cinv of the tree .
7257	Recurse through the tree .
7258	Calculate the variance for each branch .
7259	Propagate the latent variance .
7260	Calculate the explained variance .
7261	Calculate the regression model .
7262	Find the best root of the tree .
7263	Set Tc value .
7264	Calculate branch count .
7265	Calculate the cost of a branch .
7266	Attach branches to this tree .
7267	Optimize the temporal time scale of the model .
7268	Generate a random sequence from a profile .
7269	Normalize profile .
7270	Set GTR property .
7271	Set GTR .
7272	Set the sequence length .
7273	Attach sequences to the tree .
7274	Prepare the tree .
7275	Calculate the number of nodes .
7276	Calculate the distance between the root of the tree .
7277	Reconstructs the Alignment of the tree .
7278	Returns the mutation matrix for a node .
7279	Return the expanded sequence .
7280	Walk the FitchA - Anc algorithm
7281	Calculate the state of a node .
7282	Find the overlap between arrays .
7283	Calculate the LH for a given position .
7284	Compute the ancestral likelihood of the tree .
7285	Convert branch length to branch length .
7286	Optimize the length of branch lengths .
7287	Calculate branch length optimization .
7288	Calculate the optimal length of a node .
7289	Optimize sequence length and branch length .
7290	Reconstruct the alignment
7291	Compute the Q
7292	Creates a custom instance with the given parameters .
7293	Calculate the standard deviation of a model .
7294	Check the diagonal of GTR rate matrix .
7295	Compute the probabilistic log of the probabilistic distribution .
7296	Compute the optimal T .
7297	Compute the minimization of the t - compressed sequence .
7298	Calculate the probability of a profile .
7299	Evaluate a profile .
7300	Calculate the log - likelihood of a sequence .
7301	Set branch length mode .
7302	Filter the clock model based on the frequency domain .
7303	Plot the root tree of the tree .
7304	Resolves Polytomies and merges Polytomies .
7305	Print the log likelihood of the tree .
7306	Add a merger model to the tree .
7307	Find the best root of the tree .
7308	Convenience method to infer the tree .
7309	Create GTR model .
7310	Read VCF file .
7311	Implementation of ancestral reconstruction .
7312	Calculate the FWHM .
7313	Calculate delta function .
7314	Multiply a list of distributions .
7315	Assign dates to the tree .
7316	Setup the tree regression
7317	Calculate the maximum likelihood tree .
7318	Calculate the likelihood of the tree .
7319	Convert the tree to dates .
7320	Calculate the date uncertainty of a node .
7321	Calculate the marginal region of a node .
7322	Return the minimum of the interpolation object .
7323	Calculate the median of an interp object .
7324	Return a numeric date .
7325	Create a DataFrame from a regressor .
7326	Connect to guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the client .
7330	Send an instruction .
7331	Start a Guacamole .
7332	Convert unicode to utf8 .
7333	Load an instruction .
7334	Encode an argument .
7335	Encode this instruction .
7336	Returns the URL for the class .
7337	Return the URL for the instance .
7338	Returns the URL for the class .
7339	Download a file .
7340	Get parent object .
7341	Prompt the user to enter the user .
7342	Login with an interactive login .
7343	Display a user .
7344	Prints a user
7345	Return a new Filter with the given filters .
7346	Return a new QuerySet with only the specified range .
7347	Return a new GenomicFilter with the given position .
7348	Retrieve facets .
7349	Process filters .
7350	Return the next page .
7351	Execute a query .
7352	Migrate a dataset .
7353	Main entry point for Solbio .
7354	Download a folder from a local path .
7355	Construct an instance from a list of values .
7356	Logout the user .
7357	Make a request
7358	Retrieve a child object .
7359	Cancel an existing operation .
7360	Parse snpeff annotation .
7361	Convert a row to a dictionary .
7362	Get credentials file .
7363	Save macros to a file .
7364	Format value as string .
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Helper function to format a table .
7370	Migrate a dataset .
7371	Validate the full path .
7372	Upload a file to a remote folder .
7373	Validate full path .
7374	Validate a SolveBio API host .
7375	Add a manifest .
7376	Annotate records .
7377	Evaluate the expression .
7378	Set the format_name .
7379	Register a new format handler .
7380	Formats the given data .
7381	Convert data to a tabular format .
7382	Returns the path to the user s config directory .
7383	r Returns a list of system configuration directories .
7384	Read the default config file .
7385	Read configuration file .
7386	Path to user config file .
7387	Microsoft system config files .
7388	Returns a list of all additional files .
7389	Write the default config file .
7390	Read config files .
7391	Truncate a string .
7392	Replace a string .
7393	Call a list of commands in a sequence .
7394	Applies the given command to the command .
7395	Apply an option to the command .
7396	Initialize the branch .
7397	Run pep8radius .
7398	Run the docs
7399	Truncate a string
7400	Formats numbers .
7401	Format a row
7402	Create a vertical adapter from data .
7403	Applies a function to a table .
7404	Render template file .
7405	Determines if type is a number .
7406	Check if type is Bool .
7407	Checks if the given type is a binary .
7408	Generate a key for the given template .
7409	Generate a new key pair .
7410	Returns a list of C FindObjects matching the given template .
7411	Insert an image into a QR image .
7412	Exports a gene panel
7413	Return the first weekday of d .
7414	Repeat a given day .
7415	Repeat the start and end times .
7416	Calculate the biweekly distribution .
7417	Process a single chunk .
7418	Returns a list of variants .
7419	Export variants to a CSV file .
7420	Export variants to tgnc file .
7421	Add a user .
7422	Retrieve variant variants .
7423	Retrieve variant information for a particular case .
7424	Retrieve a string representing a variant .
7425	Verify an institute .
7426	View for aclvar .
7427	Retrieve cancer variants .
7428	View a variant .
7429	Redirect an evaluation .
7430	Return the acmg for the given criteria .
7431	Upload a panel .
7432	Download verified certificates .
7433	Return a dict mapping gene names to gene IDs .
7434	Add incomplete penetrance information .
7435	Given a list of lines and a list of lines and a list of gene IDs and a list of gene IDs for each gene .
7436	Make a request to MME .
7437	Return a list of connected nodes .
7438	Get cytoband coordinates for given chromosome .
7439	Return a subcategory based on alt_len .
7440	Determines the length of the gene .
7441	Determines the end of a file .
7442	Parse the coordinates of a variant .
7443	Parse the cytometry output .
7444	View the panel list .
7445	Update a panel .
7446	Export panel .
7447	Edit a gene .
7448	Save a delivery report
7449	Return hpo annotations .
7450	List whitelist users .
7451	Build a phenotype object
7452	Describe a gene .
7453	Convert HGNC gene query to JSON .
7454	List accessible institute .
7455	Show evidence transcripts .
7456	Return a sorted list of day events .
7457	List variants .
7458	Retrieve variants from the database .
7459	Return a string representing a variant .
7460	Creates a variant from a case .
7461	Parse a single variant .
7462	Return an export header for a case .
7463	Get information about variants of a gene .
7464	Convert a list of genes into a dictionary .
7465	Create a variant from a BAM file .
7466	Try to find bai file .
7467	Extract observations from a loqus db
7468	Parse a gene .
7469	Return a string representation of a transcript .
7470	Return the end of a variant .
7471	Returns the frequency of the variant
7472	Return a human - readable version of clinsig_obj .
7473	Generate a link for a given variant .
7474	Returns the URL for the cosmic link .
7475	URL for beacon link .
7476	Return the URI for the ucsc .
7477	Return a human - readable version of the spidex .
7478	Returns the set of inherited genes for a given variant .
7479	Return a set of callers for the given variant object .
7480	Retrieve cancer filters .
7481	Export a clinvar .
7482	Get aclar submission for a case .
7483	Return a dictionary mapping a variant name to a variant .
7484	A variant classification .
7485	Create an evaluation object .
7486	Upload the hgNC symbol table .
7487	Create a verified variant file .
7488	Export all genes to BED format .
7489	Parse a clnsig output .
7490	Parses the compound info .
7491	Show all available genes .
7492	Build an individual .
7493	Run variant load for a case .
7494	The case .
7495	Show list of available search collections .
7496	Institute a device .
7497	Update institute .
7498	Get file handle .
7499	Extract the net from the request
7500	Gets the next and previous value .
7501	Check if the year is valid .
7502	Check if the given date is weekday .
7503	Parse the case data .
7504	Add peddy information .
7505	Parse an individual .
7506	Parse individual samples .
7507	Parse a case .
7508	Parse a ped stream .
7509	Builds an evaluation object .
7510	Generate mt variant for a case .
7511	Determines if a list of terms is pathogenic .
7512	Determines if a word is likely to be pathogenic .
7513	Determines if bp_terms is likely to be abenign .
7514	Parses the acmg term .
7515	Add gene_panels to a variant object
7516	Fetch variants for a case .
7517	Retrieve sanger variants .
7518	Add a variant to the database .
7519	Get gene variants
7520	Returns a list of variants verified against the institute .
7521	Get the causatives for the given institute .
7522	Checks if any of the variants in the institute belong to the institute .
7523	Returns a generator of all the causatives of a variant .
7524	Delete variants for a case .
7525	Returns a list of variants that overlap the given variant_obj .
7526	Return a list of variants for a case .
7527	Retrieve region VCF for a case .
7528	Retrieve variants for a subject
7529	Return a connection to MongoDB .
7530	Returns a dict of objects for the given variant_ids .
7531	Return the custom header for csv_type .
7532	Return a list of csv lines with csv lines .
7533	Load transcripts from an ensembl file .
7534	Create a panel .
7535	Build an Exon object
7536	Delete a panel .
7537	Delete all indexes .
7538	Delete user from database .
7539	Run genes collection .
7540	Run purge exons .
7541	Delete a case .
7542	List individuals .
7543	Parse matches for a patient .
7544	Show all available cases for a given institute .
7545	Load a user from an email address .
7546	Login to Google .
7547	Build institute .
7548	Delete an event .
7549	Create a new event .
7550	Query Asterisk Manager Interface for events .
7551	Return a list of events for the user .
7552	Add a phenotype for a case .
7553	Remove HPO term from a case .
7554	Create a comment on a case .
7555	Parse a list of genotypes .
7556	Checks if the given position is valid .
7557	Retrieve all HPO terms .
7558	Show export transcripts
7559	Drop all exons
7560	Load a region for a case .
7561	Return all events for a specific month .
7562	Returns a queryset of objects that match the given date .
7563	Parse requirements . txt file .
7564	Return an existing gene .
7565	Update a panel .
7566	Create a new gene panel .
7567	Export the panel as a dictionary .
7568	Return information about the archive .
7569	Migrate an archive case .
7570	Migrate an archive .
7571	Run research .
7572	Load HGNC genes .
7573	Search hpo .
7574	Create Flask app .
7575	Configure extensions .
7576	Register the blueprint .
7577	Configure coverage based on app .
7578	Returns a list of aliases for the given symbol
7579	Build a panel object .
7580	Verifies that all variants are verified .
7581	List all available variant variants .
7582	Return the VCF entry for a variant .
7583	Serve a mongod .
7584	Generate a MD5 key .
7585	Initialize the app .
7586	Set up the database .
7587	Run Scout index .
7588	Sets up the database
7589	Run the setup .
7590	Setup the database connection
7591	Show institute information .
7592	Parse the genetic models .
7593	List available panels .
7594	Adds an institute to the database .
7595	Update institute recipients .
7596	Fetch an institute .
7597	Match date .
7598	Convert a date to a datetime object .
7599	Run hpo export on hpo .
7600	Parse the rank score .
7601	Set up a user
7602	Check connection with MongoDB .
7603	Initialize the app .
7604	Load a report from the database .
7605	Add user to database .
7606	Perform a pileup
7607	Load exons from an ensembl file .
7608	Update the compounds for a case .
7609	Add links to a gene .
7610	List gene IDs .
7611	Parse hgnc header line .
7612	Parse hgnc genes .
7613	Retrieves an open clinvar submission for a given user .
7614	Updates a submission id .
7615	Returns the CLINVID associated with the given ID .
7616	Add new variants and case data to the database .
7617	Update the status of a clinvar submission .
7618	Retrieve all clinvar submissions for a user .
7619	Delete a clinvar object .
7620	Convert a case to a dict of CLINVars .
7621	Parse HOPO output .
7622	List all genes .
7623	Retrieve a specific gene .
7624	List all genes .
7625	Check if panels exist .
7626	Load clinical SNV variants .
7627	Load a scout .
7628	Creates a decorator that will be used to render a template .
7629	Return the institute and case .
7630	Return a list of institute instances for the given login user .
7631	Get the gene ID for a gene .
7632	Update a panel .
7633	Load disease terms .
7634	Load the HOMIM disease definitions .
7635	Parse the frequencies from a variant .
7636	Parse the frequency from the info_key .
7637	Parse SV frequencies .
7638	List available users .
7639	Build an hgnc gene .
7640	Load the panel .
7641	Load the genome panel from the database .
7642	Compares the MIM panel and returns a list of genes .
7643	Update mim_version for new genes .
7644	Add a panel to the database .
7645	Get a panel by its Id .
7646	Delete a panel .
7647	Fetch a gene panel from the database .
7648	Retrieve gene panels .
7649	Build gene panel dictionary .
7650	Update a panel .
7651	Add a panel to the panel .
7652	Apply panel_obj to panel_obj .
7653	Get clinical symbols .
7654	Return a list of models .
7655	Emit an email .
7656	Load indexes .
7657	Update indexes .
7658	Drop all indexes .
7659	Build a mongodb query for the given variant
7660	Build mongo query .
7661	Add clinsig filter .
7662	Add coordinates to query
7663	Adds gene_related parameters to the query
7664	Drops the database .
7665	Parse a csv csv file .
7666	Build the clnsig object .
7667	Load gene annotations .
7668	Load transcript bulk .
7669	Load multiple Exon annotations into the database .
7670	Retrieve the gene associated with the hgnc identifier .
7671	Get hgnc_id .
7672	Return a list of genes with hgnc symbol
7673	Fetch all genes
7674	Return the number of genes in the build .
7675	Drop the hgene collection .
7676	Drop the transcripts collection .
7677	Drop exons collection
7678	Get all Ensembl transcripts .
7679	Build hgnc symbol dictionary .
7680	Find gene by alias .
7681	Returns a list of genes matching the given alias .
7682	Get all ensembl genes .
7683	Return hgnc symbol .
7684	Add hgnc id .
7685	Build a dictionary of interval trees .
7686	Update the omim panel .
7687	Get a dict of all the cases .
7688	Get a dictionary of information about a case .
7689	Display MME matches .
7690	Perform MME matchmaker .
7691	Delete MME .
7692	Return a case report .
7693	Generate a PDF for the case .
7694	Domain diagnostics .
7695	Add a phenotype .
7696	List phenotypes .
7697	Delete an incident .
7698	View status .
7699	Assign an institute .
7700	List HOPER terms .
7701	Mark a variant as validation .
7702	Mark a variant as a cause .
7703	Send a delivery report .
7704	Dis share an institute .
7705	Rerun an institute .
7706	Refer to an institute .
7707	Translates a vcf2c2c2c2c2c2c .
7708	Send a multiqc .
7709	Get a list of cases .
7710	Return a report for the case .
7711	Get the contents of the coverage report .
7712	Retrieve the list of submissions for a CPC .
7713	Generate the mx files for a particular case .
7714	Update a case annotation .
7715	Return a list of disease ids .
7716	Convert a VCF to a CFF2C CFF2C .
7717	Return the multiqc for a particular case .
7718	Returns an unevaluated list of unevaluated variants .
7719	Add a mme .
7720	Delete MME .
7721	Get MME matches for a given case object .
7722	MME match maker .
7723	Update genome genes
7724	Parse variant callers .
7725	Build a transcript from an ensembl transcript info .
7726	Load institute into database .
7727	Parse CADD entry .
7728	Load a case .
7729	Update a variant
7730	Update the rank for a variant .
7731	Update compound annotations .
7732	Update compound objects .
7733	Update mongo compound variants
7734	Update the compounds for the case .
7735	Load a variant from the database .
7736	Inserts a variant in the database .
7737	Load multiple variants into the collection .
7738	Create an event for a case .
7739	Share a customer .
7740	Print diagnostic information .
7741	Mark a case as checked .
7742	Creates an order validation for a variant .
7743	Return an ordered list of sanger items .
7744	Validate a variant .
7745	Mark a variant as causative .
7746	Update the dismiss variant for the given variant .
7747	Update an ACmg document .
7748	Parse a list of ids .
7749	Parse a simple id .
7750	Parse a document id .
7751	Print hgnc_id .
7752	Parse a variant from a variant .
7753	Return the number of cases in the institute .
7754	Update dynamic gene list .
7755	Fetch a case .
7756	Delete a case .
7757	Adds a case to the database .
7758	Replace a case by its id .
7759	Update the case ID for a case object .
7760	Submit an evaluation .
7761	Get a list of Evaluations .
7762	Parse transcripts .
7763	Parse ensembl_gene_request .
7764	Parse ensembl transcripts from the request .
7765	Parse ensembl line .
7766	Parse ensembl genes .
7767	Parse ensembl exons .
7768	Parse ensembl exon request .
7769	Initialize a logging object .
7770	Parse the omim line .
7771	Parse the OMIM header .
7772	Extract phenotype information from a genemap file .
7773	Command line tool to identify genes .
7774	Convert a string to a number .
7775	Format the month .
7776	Format the day .
7777	Format the month name .
7778	Process popover events .
7779	Get panel info .
7780	Parse gene info .
7781	Parse gene annotations .
7782	Parse a gene panel .
7783	List diseases .
7784	Update hpo terms .
7785	Return a dict of user events .
7786	Parse the genome conservations .
7787	Extracts the conservations from a variant .
7788	Get general information about the general case .
7789	Get a list of case groups .
7790	Return a HttpResponse with the given context .
7791	Get the month and month .
7792	Check for cancelled events
7793	get hpo term
7794	Search HPO terms .
7795	Get a disease term .
7796	Get all disease terms .
7797	Load a disease term into database .
7798	Generate a list of HPO gene IDs .
7799	Read HDF5 file .
7800	Calculate the frequency series based on f_start and f_stop .
7801	Setup time axis .
7802	Read filterbank .
7803	Compute the LST from the header
7804	blank the DC bin
7805	Print out information about the file .
7806	Calculate the extent of the plot .
7807	Plots the waterfall at the specified location .
7808	Plot the time series .
7809	Write the filterbank to a file .
7810	Calibration for bandpass .
7811	Convert data to coarse .
7812	Calculate the M - Morrison model .
7813	Calibration for GerryMatches .
7814	calculate fracpols
7815	Write a waterfall .
7816	Return the closest value to xarr .
7817	Rebin a dataframe
7818	Unpack a numpy array .
7819	Calculate the difference between waterfall and cross .
7820	Plots Stokes Falls on the given dio cross .
7821	Plots a banded diode .
7822	Plot the gain offsets for a dio_cross .
7823	Open a file .
7824	Set up the selection range .
7825	Calculate the selection size .
7826	Calculate the selection shape .
7827	Sets up the chan channels
7828	Calculate the start and stop frequencies
7829	Populate the timestamps .
7830	Populate the frequency domain frequencies .
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Determines if the selection is heavy .
7834	Read data from the file .
7835	Read all data from the file .
7836	Read a row from the file .
7837	Read data from file .
7838	Update the header .
7839	Print information about the file .
7840	Write the header to a file .
7841	Write to HDF5 file .
7842	Write to HDF5 file .
7843	Determines the size of the blob dimension .
7844	Determines the chunk dimension .
7845	Grab the start and stop data
7846	Create spectra .
7847	Read the first header .
7848	Find the number of blocks in the file .
7849	Prints out the data block .
7850	Plot a histogram .
7851	Generate filter bank header .
7852	Find the file s header size .
7853	Run a command tool .
7854	Command line tool for creating HDF5 files .
7855	Calculate the foldcal for a given time series .
7856	Integrate a waterfall .
7857	Calculate the calflux flux .
7858	Calculate the center frequency for each channel .
7859	Calculate the F - ratio ratio .
7860	Calculate the density of the waterfall .
7861	Get Tsys spec .
7862	Calibration for the fluxes
7863	Return the length of the header .
7864	Check if a file is a filterbank .
7865	Replace header with new value .
7866	Generate a sigproc header .
7867	Convert angle to sigproc
7868	Calculate the number of bits in a file .
7869	Return a dict representation of the frame .
7870	Create a sub - parser for rec_type
7871	Create a parser for a zonefile line .
7872	Remove comments from text .
7873	Add default name .
7874	Parse a line .
7875	Parse a line of text .
7876	Parse zone file .
7877	Quote field .
7878	Parse a schema string .
7879	Create a Python package from a target folder .
7880	Generate the definition for a Python class .
7881	A decorator that allows you to disable automatic auto store .
7882	Dump record in json - encodable object format .
7883	Load a JSON record from a dictionary .
7884	Deserialize a JSON record .
7885	Adds a schema to the schema .
7886	Get the schema for a given record name .
7887	Json - serializable dict representation .
7888	Merge a class into a class .
7889	Create a new record from a metaclasses .
7890	Create a JSON Schema for a given record .
7891	Get the schema for a given record .
7892	Yield lines from mr_stream .
7893	Write output to output stream .
7894	Insert a new dict into the OrderedDict .
7895	Execute a search query .
7896	Retrieves a search result from the API .
7897	Return all include entities .
7898	Extract entity from response result .
7899	Given a q return a quote
7900	Escapes a filter .
7901	Construct an elementary rotation matrix .
7902	Construct the covariance matrix .
7903	Calculate the error of a vrad .
7904	Calculate the parallax error .
7905	calculate GMagnitudeError
7906	calculate gMagnitude error
7907	Make a plot .
7908	Return the average number of transitions in beta .
7909	Returns the angular distance between two points .
7910	Transform coordinates to Cartesian coordinates .
7911	Transform spherical coordinates to spherical coordinates .
7912	Transform the Jacobian matrix to the Jacobian matrix
7913	Calculate the error scaling factor .
7914	Make a matplotlib plot .
7915	Make a plot .
7916	Return True if any of the given functions are equal .
7917	Decorator for help messages .
7918	Converts value to Unicode .
7919	Create a function that takes a list of functions .
7920	Return a subset of the elements that satisfy the filter .
7921	Return a copy of this collection .
7922	Return a copy of this collection .
7923	Return a copy of the collection with all items removed .
7924	Return a copy of this collection with the same length .
7925	Wrapper for _find_find .
7926	Return the path to the path of the current operating system .
7927	Iterate over groups in a group .
7928	Generator for register_options
7929	Return event string .
7930	Given a list of events return a sorted list of scheduled runs .
7931	Print report to stdout .
7932	Print report to stdout .
7933	Print the results to stdout .
7934	Clean code .
7935	Round x to x .
7936	Sort blocks by indices .
7937	Calculate cache access .
7938	Calculate the number of cycles per iteration .
7939	Perform the analysis .
7940	Perform kernel analysis .
7941	Strips and uncomment lines from a string .
7942	Strip unreferenced labels .
7943	Select the best block .
7944	Prompt the user select pointer increment .
7945	Print out block information .
7946	Given a start_line and end_lines insert them into the end .
7947	Perform an instrumentation on the input file .
7948	Main entry point .
7949	Simulate a kernel .
7950	Compute the space between start and end .
7951	Get the last modified time of the file .
7952	Validate arguments .
7953	Entry point for the script .
7954	Entry point for pickle .
7955	Create symbol .
7956	Convert a multidim declaration to 1d decl .
7957	Convert a multidim reference to 1d ref .
7958	Return the node_type of the given node_type .
7959	A decorator to force an iterable .
7960	Check that the kernel is mixing .
7961	Set a constant .
7962	Return the subs of expr .
7963	Return a dictionary of array sizes .
7964	Calculate the relative offset .
7965	Removes duplicate accesses
7966	Calculate the length of the iteration .
7967	Generator for loop stack .
7968	Return the index of the expression .
7969	Compile sympy accesses .
7970	Compiles the relative distances for the given accesses .
7971	Convert global iterator to indices .
7972	Returns the global iterator .
7973	Convert indices to global iterator .
7974	Returns an iterator over the global iteration .
7975	Print kernel info about the kernel .
7976	Prints a table of variables .
7977	Prints information about the constants .
7978	Print the kernel code .
7979	Convert a math expression to an arithmetic symbol .
7980	Return the offset of the array .
7981	Get the name of the basename .
7982	Return the index type of the loop .
7983	Build declarations .
7984	Return array declarations .
7985	Return the kernel loop nest .
7986	Build the array declaration .
7987	Find the inner loop with the given loop nest .
7988	Build kernel for array initialization .
7989	Build dummy call list .
7990	Build a kernel function declaration .
7991	Build scalar declarations .
7992	Get the kernel code for this kernel .
7993	Build kernel call .
7994	Get the main code .
7995	Calculate the iACP analysis .
7996	Build the executable .
7997	Convert a string to a sympy expression .
7998	Return the identifier of the file .
7999	Get the last modified time .
8000	Create a cacheim instance from the cache hierarchy .
8001	Calculate the bandwidth of the kernel .
8002	Get the compiler .
8003	Parse a protobuf event .
8004	Enforce no overlapping data .
8005	Return the path to the header file .
8006	Aligns the iteration number based on the iteration boundary .
8007	Returns the load counts for the machine .
8008	Returns the number of HITs .
8009	Returns the number of misses in the cache .
8010	Get the number of stores for this machine .
8011	Returns the number of evicts for the machine .
8012	Return dictionary of infos .
8013	Temporarily fix the environment variable .
8014	Configure argument group .
8015	Print a report of the results .
8016	Parse the description .
8017	Schedules a handshake .
8018	Build a purchase item .
8019	Record a purchase .
8020	Get the course content for a course
8021	Returns the course content for the given course id .
8022	Update a user s unenroll list .
8023	Send a course refund email
8024	Send an offer assignment notification .
8025	Return the logging configuration .
8026	Retry the order .
8027	Fulfill an order .
8028	Return a SailthruClient for a site .
8029	Get a value from the cache .
8030	Set the cache key .
8031	Get the configuration of a worker .
8032	Returns the filename of the override variable .
8033	Get a value by version .
8034	Version of Eplus .
8035	Retrieve the file refs .
8036	Populate the data from a dictionary .
8037	Return a list of external files .
8038	Set the table s default values .
8039	Prepare extensible info for extensible fields .
8040	Return extensible name for given index .
8041	Get a dictionary of the short_refs for each external file .
8042	Get the value for a given filter criteria .
8043	Update the value in the record .
8044	Update the data .
8045	Set the default values .
8046	Add fields to record .
8047	Pop an item off the queue .
8048	Insert value at index .
8049	Remove the record from the database .
8050	Register a record hook .
8051	Register a link .
8052	Create a regex for an intent .
8053	Return the remaining duration in seconds .
8054	Serialize the event .
8055	Perform a http request .
8056	Get a specific service .
8057	Creates a directory if it doesn t exist .
8058	Configure Opencast service .
8059	Register CA .
8060	Set the recording state .
8061	Update the recording status .
8062	Update agent state .
8063	Return the path to the config file .
8064	Update a configuration file .
8065	Check the server .
8066	Initialize the logger
8067	Home the preview .
8068	Serve an image
8069	Run all the given modules .
8070	Parse a vcal output .
8071	Get schedule information .
8072	The main loop of the scheduler .
8073	Sets up the agent state .
8074	Create an error response
8075	Make a data response
8076	Get the internal state of the service .
8077	List upcoming events .
8078	Return the event associated with the given uid .
8079	Delete a recorded event .
8080	Modify an event .
8081	Parse configuration parameters .
8082	Ingest an event .
8083	Start recording .
8084	Render a fragment to a fragment .
8085	Return a list of all resources that have been added .
8086	Return a dict representation of the response .
8087	Create a FragmentResource from a dict .
8088	Add content .
8089	Add a resource to the fragment .
8090	Adds a URL to the fragment .
8091	Initialize js_func .
8092	Convert a placement to HTML .
8093	Convert a resource to HTML .
8094	Handle GET request .
8095	Render a standalone response .
8096	Render a standalone HTML fragment into a standalone HTML .
8097	Calculate the distribution of pvalues .
8098	Convert values to one dimension array .
8099	Lookup the values for a given error table .
8100	Compute posterior chromatogram hypotheses .
8101	Calculate the median error table .
8102	Calculate summary error table .
8103	Compute the error statistics for each target .
8104	Calculate the cutoff value for a given cutoff .
8105	Compute classification score .
8106	Calculate IPF frequencies for a FASTQ file .
8107	Infer a peptide .
8108	Infer protein information .
8109	Subsample an ow file .
8110	Reduce an ow file .
8111	Backpropagate data from outfile to outfile .
8112	Filter a set of mass files based on a specified frequency .
8113	Get a group by id .
8114	Create a group .
8115	Delete a group .
8116	Get the members of a group .
8117	Update the members of a group .
8118	Get the effective count for a group .
8119	Check if a group is effective .
8120	Modify the conf
8121	Create a new dataset .
8122	Decrypt a key .
8123	Get stdin .
8124	Get the stdout of the process .
8125	Get the stderr output .
8126	Get debug output .
8127	Context manager for subprocess .
8128	Context manager for subprocesses .
8129	Context manager for subprocess .
8130	Context manager to add debug information .
8131	Delete an empty account .
8132	Empty a container .
8133	Decorator to make a function callable .
8134	Decorator to make a function callable .
8135	Logs an error .
8136	Print help .
8137	Print usage .
8138	Print version .
8139	Make a request .
8140	POST an account
8141	Delete an account .
8142	PUT a container
8143	Send a HEAD request .
8144	Get an object from a container .
8145	Sends a PUT request .
8146	Perform a POST request .
8147	Resolve an option .
8148	Return a copy of this object .
8149	Write headers .
8150	Display authentication information .
8151	Generate a temporary URL .
8152	Quote a value .
8153	Fail a given path .
8154	Get a client .
8155	AES256 cipher .
8156	Decrypt an encrypted stream .
8157	Upload a directory structure .
8158	Upload an account .
8159	Put a container into a container .
8160	Generate the body of a manifest .
8161	Create a container .
8162	Retrieve a temp URL .
8163	Print information about a specific transition .
8164	Print help for command .
8165	Check if the buffer is empty .
8166	Encrypt a key .
8167	Get the status for a given repo .
8168	Get pull request .
8169	Get pull requests .
8170	Write our forwards methods .
8171	Return a list of SliderItems .
8172	Render a hero slider .
8173	Acquire a read lock .
8174	Release a reader .
8175	Acquire the writer .
8176	Adds a task to the registry .
8177	Removes a task from the registry .
8178	Get a task .
8179	Return a list of all the tasks in the queue .
8180	Return the configuration as a dictionary .
8181	Create a KWARGS instance from a dictionary .
8182	Execute a PercevalJob .
8183	Initializes the archive manager .
8184	Execute the job .
8185	Execute the backend .
8186	Create an Elasticsearch index .
8187	Create mapping in Elasticsearch .
8188	JSON encoder .
8189	Write the items to the writer .
8190	Adds a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Iterate over the items in the pipeline .
8193	Validate arguments .
8194	Parse the archive command line arguments .
8195	Publish a job .
8196	Schedules a job .
8197	Cancel a task .
8198	Run the main loop .
8199	Listen for messages from pubsub
8200	Schedule the scheduler .
8201	Schedules a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the job arguments .
8206	Returns the value of a secret
8207	Register view .
8208	Register a Django admin view .
8209	Overrides reverse_action .
8210	Get view name .
8211	Get the version string .
8212	Resolve a given key .
8213	Return the engine for the given scheme scheme .
8214	Parse a path .
8215	Parse a database configuration file .
8216	Parse SQLite database URL .
8217	Creates a new user .
8218	Get a list of users .
8219	Create a password change form .
8220	Add the field to the context .
8221	Parse a boolean value .
8222	Parse an int .
8223	Return a parser for the given typ .
8224	Parse Django settings .
8225	Create a model instance from a model .
8226	Encode a base64 string .
8227	Create a field from the given field info .
8228	Create a validator for the given data structure .
8229	Computes the cartesian product of a dictionary .
8230	Return a list of unique points .
8231	Change the logging kwargs .
8232	Decorator to specify a simple logging configuration .
8233	Create directories for given filename .
8234	Return a list of strings .
8235	Rename a log file .
8236	Set the logger for this class .
8237	Extract replacements from a trajectory .
8238	Print a progress bar .
8239	Check if the parser argument matches the options .
8240	Converts a parser to a stringio object .
8241	Find the multiproc options .
8242	Find a multiproc dictionary .
8243	Check the logging configuration .
8244	Handle parsing .
8245	Processes a log file .
8246	Create the logging handlers .
8247	Finalize the tool .
8248	Start the steam .
8249	Write stream to stream .
8250	Compare two results .
8251	Compare two parameters .
8252	Decorate a function to run a function .
8253	Mark a function as deprecated .
8254	Decorator for mutually exclusive arguments .
8255	Decorator to change keyword arguments .
8256	Decorator to retry a function .
8257	Class decorator to add prefix to the namespace of this class .
8258	Add parameters .
8259	Calculate the net of a network .
8260	Calculate euler evolution of a function .
8261	Add parameters to the model .
8262	Calculate the difference between two values .
8263	Create a storage service .
8264	Return a storage object for the given storage service .
8265	Add parameters to the model .
8266	Calculate the difference between two values .
8267	Compress an HDF5 file .
8268	Return list of parameters in a group .
8269	Builds the model_eqs dictionary for the model .
8270	Pre - build model .
8271	Build the model .
8272	Build the Neumann model .
8273	Pre - build connection .
8274	Build the connection .
8275	Add parameters to the model .
8276	Compute the Fano factor for a spike
8277	Compute mean factor for each neuron .
8278	Calculate the mean FAF for a given subrun .
8279	Add Monitors to a network .
8280	Add monitor to the graph .
8281	Create folder for analysis .
8282	Plot the result .
8283	Prints the diagram of the graph .
8284	Run the analysis of the exc_dict .
8285	get batch
8286	Generate an explore batch .
8287	Get node vars .
8288	The node function .
8289	Rename name .
8290	Set the depth of the run .
8291	Convert node to message .
8292	Remove a sub - node .
8293	delete a node
8294	Remove a node or leaf .
8295	Remove nodes from a given node .
8296	Translate a shortcut name .
8297	Add prefix to root node .
8298	Determine the type of a node .
8299	Add a generic node .
8300	Add node to tree .
8301	Create a link pointing to an instance .
8302	Check that the given split_names is valid .
8303	Create a NNGroupGroup .
8304	Creates a new instance with the given name and type .
8305	Sets the details for this node .
8306	Iterate over nodes matching the given node .
8307	Create an iterator for child nodes .
8308	Recursively iterate over a tree of nodes .
8309	Performs a low - level search on a node .
8310	Search for a node .
8311	Backwards search .
8312	The children of this node .
8313	Adds a group from the storage .
8314	Add a new leaf .
8315	Returns a list of f_load data .
8316	Create a debug object .
8317	Get the parent .
8318	Add a group .
8319	Add a link .
8320	Remove a link .
8321	Adds a new leaf .
8322	remove fname from f
8323	Remove a child node .
8324	Determines whether the item contains the given item .
8325	Get a value from the filesystem .
8326	Get the children
8327	Get groups .
8328	Get the list of leaves .
8329	Get links .
8330	Stores the f_name under f_name .
8331	Store the root instance .
8332	Load a child .
8333	Load data from the filesystem .
8334	Adds a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result .
8338	Adds a derived parameter group .
8339	Adds a derived parameter .
8340	Adds a config group .
8341	Add a config group .
8342	Evaluate the fitness for a single individual .
8343	Add commit variables .
8344	Make git commit .
8345	Flatten a nested dictionary .
8346	Parses a nested dictionary into a nested dictionary .
8347	Displays a progress bar .
8348	Returns the argument spec for the given function .
8349	Get kwargs matching function .
8350	Formats a time object
8351	Create a TCP connection from a given port .
8352	Creates a directory .
8353	Reset the index .
8354	Get the remaining time in seconds .
8355	Convert f to dict
8356	Remove a key .
8357	Convert fann to string .
8358	Make an ordinary result
8359	Convert a shared data result to shared data .
8360	Create a shared data object .
8361	Perform data request .
8362	Get the data node .
8363	Returns whether a SharedResult is supported .
8364	Create shared data .
8365	Triggered by multiprocessing .
8366	Receives a lock .
8367	Send a shutdown signal to the server .
8368	Finalize the connection .
8369	Start the client .
8370	Handle a REP request .
8371	Acquire the lock .
8372	Listen for messages .
8373	Put data into the queue .
8374	Detects a new connection .
8375	Handle data .
8376	Main loop .
8377	Receive data from the queue .
8378	Receive data from the queue .
8379	Store the lock .
8380	Store a message .
8381	Store a list of references .
8382	Decorator to parse a configuration .
8383	Return a dictionary mapping section names to values .
8384	Return a dict of configs for this object .
8385	Interpret kwargs .
8386	Add configuration parameters .
8387	Convert a binary rule .
8388	Generate initial state .
8389	function to plot a cell pattern
8390	Generate cellular automaton pattern .
8391	Combine a set of patterns .
8392	This method is called when a node is updated .
8393	Get the view_group of this view .
8394	Same as load_load_from_load except for _load_parts .
8395	Store a message in the store .
8396	Load multiple items .
8397	Check the HDF5 storage properties .
8398	Store multiple items .
8399	Flushes the underlying HDF5 file .
8400	Extract info from kwargs .
8401	Backup a trajectory .
8402	Read a row from a table .
8403	Prepare the merge table .
8404	Load meta data .
8405	Load a sub branch .
8406	Checks whether the given version is correct .
8407	Fills the run table with the given timestamp .
8408	Loads an exploration group .
8409	Stores the exploration parameters into the hdf5 file .
8410	Creates an overview for each table .
8411	Store a trajectory .
8412	Store a sub - branch .
8413	Create a new leaf .
8414	Load nodes from a tree .
8415	Store the nodes in the tree .
8416	Creates an SQLAlchemy SQL table entry .
8417	Creates a table if it doesn t exist .
8418	Get node by name .
8419	Helper function to add all set attributes to the RecallData object .
8420	Recalculate native types for recursion .
8421	Allocate or modify a row .
8422	Write all rows into a table .
8423	Extracts the insert_dict for each column .
8424	converts a string to a string
8425	Create a group if it doesn t exist .
8426	Creates a new group if it doesn t exist .
8427	Store annotation for a node .
8428	Load annotations into a node .
8429	Creates a store group .
8430	Gets a load group .
8431	Loads all annotations from hdf5 node .
8432	Extract missing flags .
8433	Add summary information to the table .
8434	Add meta information about a node .
8435	Initialize a group store from a dictionary .
8436	Store a pypm instance .
8437	Write a shared array into the HDF5 group .
8438	Write a table to the HDF5 file .
8439	Write a Python object to a dictionary .
8440	Write data to a pandas dataframe .
8441	Writes data into an array .
8442	Write an array to a group .
8443	Delete a link .
8444	Perform all delete_parameter_or_group_or_group .
8445	Write a table into the HDF5 file .
8446	Creates a description from a data dictionary .
8447	Get a column from a table .
8448	Return the length of the longest string in a list of strings .
8449	Load a node into a dict
8450	Read a dictionary into a dictionary .
8451	Read shared node from shared node
8452	Read data from a table or group .
8453	Read an array from an array .
8454	Load a single trajectory .
8455	Make a Pypet_SET_NAME .
8456	Set properties .
8457	Adds a function to the list of dynamic imports .
8458	Set the value of a parameter .
8459	Iterate over F runs .
8460	Shrink the trajectory .
8461	Set a parameter .
8462	Write a parameter .
8463	Prepare the experiment .
8464	Retrieve a single node by name .
8465	Check if a run is completed .
8466	Remove an exploration parameter from disk .
8467	Copy a node from a node .
8468	Recursively explore a trajectory .
8469	Update the run information dictionary .
8470	Add information about a single run .
8471	Unlock all the parameters .
8472	This function locks the derived parameters .
8473	Finalize the model .
8474	Loads the skeleton .
8475	Loads a data structure .
8476	Backup file .
8477	Given old wildcards return a new wildcards .
8478	Merge two trajectories .
8479	Merge multiple runs .
8480	Rename full name .
8481	Merge derived parameters .
8482	Merge links between two trajectories .
8483	Merge config from another trajectory .
8484	Merge this one into another .
8485	Merge results from another trajectory .
8486	Migrate this object to another storage .
8487	Store the data for this node .
8488	Restore the default state .
8489	Set the list of parameters to the given index .
8490	Make a single run .
8491	Return a list of run names .
8492	Get information about the run .
8493	Find the index of the function f_list .
8494	Start a single run .
8495	Finalize the run .
8496	Set the start time .
8497	Set the summary of the run .
8498	Helper function to construct an instance .
8499	Convert a dictionary to a dictionary .
8500	Finalize the run .
8501	Get a config dictionary .
8502	Return the results as a dictionary .
8503	Fetch items for a trajectory .
8504	Load items from disk .
8505	remove items from the iterator
8506	Delete links from the iterator .
8507	remove f from f
8508	Delete items from a trajectory .
8509	A wrapper for pool_run .
8510	Frozen pool .
8511	Configure a pool .
8512	Configure frozen pool .
8513	Process a single run .
8514	Configure frozen scoop data .
8515	A single - run operation .
8516	Configure logging system .
8517	Configure niceness .
8518	Handles a single command .
8519	A single run function .
8520	Wrap the logging handler .
8521	Load a class from a string .
8522	Create a class with dynamic imports .
8523	Get the length of this parameter .
8524	Return a string representation of the evaluation .
8525	Compare two values .
8526	Get the range of the parameter .
8527	Performs an exploration step .
8528	Expand the parameter range .
8529	Verify that the data is in the explore_iterable .
8530	Store the object as a dictionary .
8531	Load parameter .
8532	Load an array from a dictionary .
8533	Determines whether two values are equal .
8534	Check if data is supported by data .
8535	Serialize a matrix .
8536	Build a tuple of parameter names .
8537	Reconstruct a sparse matrix .
8538	Load data .
8539	Store the data for this object .
8540	Load data from a pickle file .
8541	Translate a key .
8542	Convert f value to string .
8543	Convert f to dict
8544	Set positional value .
8545	Implements get method .
8546	Set a single result .
8547	Checks if the given item is supported .
8548	Store the data in a dictionary
8549	Load data from a dictionary
8550	Set a single entry .
8551	Store the object as a dictionary .
8552	Load data from a pickle file .
8553	Merge all files .
8554	Upload a file to Sftp
8555	Download file .
8556	Create a session .
8557	Merge Trajob .
8558	Start the jobs .
8559	Multiply two reals .
8560	Run the neuron integration
8561	Postproc postprocessing .
8562	Add parameters to a neuron .
8563	Add an exploration of tau_ref .
8564	Execute pre - run pre - run .
8565	Execute a network run .
8566	Extract all subruns for a given trajectory .
8567	Execute a subrun of a network .
8568	Adds the parameters of the analysis .
8569	Pre - run the network .
8570	Run the given network .
8571	Build a network run .
8572	Generate a filename for the experiment .
8573	Return the next element .
8574	Merge all files in a folder into a folder .
8575	Handle a SIGINT .
8576	Read config from file .
8577	Request PIN code .
8578	Request tokens from ecobee .
8579	Refreshes access tokens
8580	Get the thermostat .
8581	Write access tokens to file .
8582	Set HVAC mode .
8583	Set fan minimum on time .
8584	Set the hold temperature .
8585	Set the hold for a given index .
8586	Delete a vacation
8587	Resume a program .
8588	Send a message
8589	Set humidity .
8590	Generate a random delay .
8591	Generate a timeout .
8592	Generate a timeout for a given lease .
8593	Generate a renewing time
8594	A dictionary of FSM_ATTRs .
8595	Reset attributes .
8596	Get the timeout for a function .
8597	Set the timeout for the given function .
8598	Sends a discovery .
8599	Select an offer
8600	Sends the request .
8601	Set the timeouts for the lease .
8602	Process ack packet .
8603	Process a UDP packet .
8604	Set the current state .
8605	Set the BOUND property .
8606	Reset the lease .
8607	Reset the state .
8608	End the lease .
8609	Set the state of the service .
8610	Called when a response is received .
8611	Called when a request is exceeded .
8612	Reset the request timeout .
8613	Raises a REBINDING if the request is exceeded .
8614	Process an offer .
8615	Process ACK request .
8616	Process a NAK packet .
8617	Receive ACK .
8618	Process a NAK packet .
8619	Process ACK .
8620	Process a NAK message .
8621	Renew the lease .
8622	Set a copy of this QuerySet .
8623	Add a new value to this QuerySet .
8624	Remove a field from the query .
8625	Get server status .
8626	Create the output dictionary .
8627	Main entry point for the script .
8628	Validate a message .
8629	Read a tddms file .
8630	Add deformation data .
8631	Convert TDMS file to FCS file .
8632	Compare two files .
8633	Create a new patch .
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if a file is in the given patch .
8637	Backup a file .
8638	Add a file .
8639	Run a quilt command .
8640	Create the directory if it doesn t exist .
8641	copy a directory
8642	Link a file .
8643	Copy a file or directory .
8644	Get the directory associated with this file .
8645	Backup a file .
8646	Refreshes the quilt .
8647	Unapply a patch .
8648	Unapply a top - patch .
8649	Unapply all patches .
8650	Apply a patch .
8651	Applies the next patch .
8652	Apply all patches .
8653	Read series file .
8654	Save the series to a file .
8655	Add patch to self . patch
8656	Insert patches into the list .
8657	Add a list of patches .
8658	remove a patch
8659	Return the list of patches after the given patch .
8660	Return a list of patches after the given patch .
8661	Return a list of patches after the given patch .
8662	Replace a patch .
8663	Create the version file .
8664	Check the version of the database .
8665	Adds the argument group to the parser .
8666	Adds an argument to the parser .
8667	Adds arguments to the parser .
8668	Set the subparsers .
8669	Add subparsers to the parser .
8670	Ensure that the given patch is in the given patch .
8671	Check if the given patch is in the next patch .
8672	Revert a file
8673	Import a patch .
8674	Import patches from Quilt .
8675	Create a way .
8676	Return a generator of nodes that are not present in the current node .
8677	Create a new node .
8678	Build a route .
8679	Create a long name .
8680	Calculate the agency id .
8681	Process the relations .
8682	Create a relation .
8683	Create dummy data .
8684	Patch a list of agencies .
8685	Create dummy trips for a trip .
8686	Write a zip file to a zip file .
8687	Write the file to the destination .
8688	Build an agency object .
8689	Extract stops from a stop .
8690	Build a Shape from a relation .
8691	Get the supported versions .
8692	Send APDU data .
8693	Authenticate using U2F device .
8694	Register a new app .
8695	Authenticate using U2F
8696	Attempt to register a U2F device .
8697	Convert data to str .
8698	Wrap a function as a function .
8699	Wrap class methods .
8700	Return True if the given filepath matches the given filepath .
8701	Gets the email address for the given email address .
8702	Return the entry corresponding to the given entry .
8703	converts markdown to reST
8704	Serve a file on disk .
8705	Record an error in the stack .
8706	Convert a url to an image
8707	Create an image from a string .
8708	Validate image .
8709	Check if image is big enough .
8710	Check if image is big enough .
8711	Check if the given image is big enough .
8712	Returns Category object for given item .
8713	Returns the value of the item in the given item .
8714	Iterate over all items in the document .
8715	Save an error
8716	Parse the items from the source .
8717	Parse a single item .
8718	Get model instance .
8719	Save an item .
8720	Download file .
8721	Load the source into memory .
8722	Yield items from CSV file
8723	Set the network access setting .
8724	Run a command .
8725	Add one or more files .
8726	Add a file and rename it .
8727	Returns a list of enrollments for the given course .
8728	Get all enrollments for a given course .
8729	Returns a list of enrollments for a given section .
8730	Returns a list of enrollments for the specified section .
8731	Get the enrollment for a given regid
8732	Creates an enrollment for a user .
8733	Get a list of roles in an account .
8734	Get a list of roles associated with an account .
8735	Get course roles in an account .
8736	Get a specific role
8737	Get a role by its Id
8738	Get a course
8739	Get a course by its Id .
8740	Returns a list of courses in an account .
8741	Get courses in an account .
8742	Get the published courses in an account .
8743	Get the published courses in an account .
8744	Returns a list of courses for the given regid
8745	Create a new course
8746	Updates a SIS course
8747	Gets an activity by the given term id .
8748	Gets the list of grades for an account .
8749	Get statistics for an account .
8750	Get activity by sis_id .
8751	Returns a list of assignments matching the given sis_id .
8752	Get student summaries by sis_id .
8753	Get student activity for the given course and sis_user_id .
8754	Gets the student message for the student .
8755	Get external tools in an account .
8756	Get external tools in course .
8757	Creates an external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Check that all required parameters are set .
8761	Get a user s details .
8762	Returns a list of users for the given course .
8763	Get a list of users for a sis_course_id .
8764	Creates a user .
8765	Get a user s logins .
8766	Updates a user login
8767	Parse the next page .
8768	Get resource url .
8769	Get a cached resource .
8770	Get a specific resource .
8771	Sends a PUT request .
8772	POST a resource
8773	Delete a resource .
8774	Get a list of admins for an account .
8775	Creates an admin .
8776	Create an admin by sis_id .
8777	Delete an administrator .
8778	Delete an admin by sis_id .
8779	Create a new grading standard for a course .
8780	Get a specific section .
8781	Get a specific section .
8782	Get a list of sections in a course .
8783	Get all sections in a course .
8784	Returns a list of students in a course .
8785	Get sections with the given course .
8786	Create a new section .
8787	Updates a section
8788	Get a list of Quizzes .
8789	Get a specific account .
8790	Get a list of sub accounts for a given account .
8791	Updates the specified account .
8792	Updates a SIS ID
8793	Get authentication settings .
8794	Update auth settings for an account .
8795	get term by sis term id
8796	Imports data from a CSV file .
8797	Imports a directory .
8798	Get the status of an import
8799	Build the archive .
8800	Get a list of assignments for a course .
8801	Updates an existing assignment .
8802	Get a list of reports for an account .
8803	Returns a list of reports for a given account .
8804	Create a new report .
8805	Create a course provisioning report .
8806	Create a course export report .
8807	Create an unused courses report .
8808	Get data from the report
8809	Get report status .
8810	Delete a report .
8811	Move detections to a label .
8812	Flip detection for a given label .
8813	Get a copy of a model .
8814	Extracts configuration from a request .
8815	Return the edit_empty_value .
8816	Parse keyword arguments .
8817	Create a metric for the given metric configuration .
8818	Setup logging .
8819	Configure the registry .
8820	Create a metric for a list of configs .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handles the metrics request .
8824	Ask Wolfram .
8825	Fixes an HTTPMessage .
8826	Make a web call to Wagramalpha .
8827	Return information about the pod .
8828	Return a list of results .
8829	Encode a request .
8830	Make a call to the API
8831	HTTP GET operation .
8832	Perform a DELETE request .
8833	Perform a PUT request .
8834	Perform a POST request .
8835	Process a disambiguation query .
8836	Group sentences by group length .
8837	Disambiguate a PDF file .
8838	Disambiguate a query .
8839	Segment given text .
8840	Get the translation for a given text .
8841	Get information about a concept .
8842	Fit the classifier to the model .
8843	Calculate the accuracy score for the ensemble .
8844	Fits the MDR for each feature .
8845	Fit the classifier to the given features .
8846	Calculate the accuracy of the MDR model .
8847	Fit the model to the grid .
8848	Transform a list of features .
8849	Compute the score of the given targets .
8850	Calculate the MDR .
8851	Generate n - way models .
8852	Plot the class counts for a mdr instance .
8853	Return a dictionary of configuration values .
8854	Get a configuration value for a key .
8855	Create a Vector instance .
8856	Vector vector .
8857	Evaluate the given file .
8858	Evaluate the given stream .
8859	Evaluate the given string s .
8860	Return a new module that can be used to instantiate a new module .
8861	Run the compiler .
8862	Create a multiprocessing function .
8863	Add a method .
8864	Add a method .
8865	Get a method by key .
8866	Remove a method from a map .
8867	Remove a method from the MultiFunction .
8868	Determines if a v is a valid macro .
8869	Returns the location of the parser .
8870	Decorator to parse a form .
8871	Raises an exception if the node is not recur .
8872	Raises an AssertionError if the node is not recur .
8873	Resolve a bare symbol .
8874	Resolve a host name .
8875	Parse an AST .
8876	True if shadowed_var is False otherwise .
8877	Put a new symbol .
8878	Map a list of entries to lrepr .
8879	Lrepr wrapper
8880	Lrepr .
8881	Fallback function .
8882	Fixes missing locations .
8883	Compile and execute an ast .
8884	Compile a module .
8885	Compile a python module .
8886	Compile bytecode into Python code .
8887	Convert a string into a sequence .
8888	MUNGE
8889	Demunge a string .
8890	Returns a Fraction .
8891	Create a logging handler .
8892	Return a copy of a map .
8893	Split a collection into chunks of n .
8894	Decorator to convert a line to a location .
8895	Read namespaces .
8896	Read a line of text .
8897	Read list .
8898	Read vector .
8899	Read a set .
8900	Read a map .
8901	Read a string .
8902	Parse a Unicode symbol .
8903	Read keyword .
8904	Read meta data .
8905	Return a function from a Python function .
8906	Read quoted comments .
8907	Expand syntax quote .
8908	Process syntax quote .
8909	Read a syntax expression .
8910	Read unquoted form .
8911	Read DEREF .
8912	Parse a character .
8913	Reads a regex pattern .
8914	Return a parser for Macro .
8915	Read next consuming comment .
8916	Return the next line .
8917	Read data from a stream .
8918	Read a string from a string .
8919	Read data from a file .
8920	Add location .
8921	Adds a push back to the index .
8922	Returns the next token .
8923	Create a base64 encoded bytecode .
8924	Get the base bytecode .
8925	Convert a path to a cache file .
8926	Add import imports to sys . path .
8927	Tries to find a module in the cache .
8928	Execute the cached module .
8929	Compile a module .
8930	Execute a module .
8931	Create symbol .
8932	Return a list of documents matching the given text .
8933	Get or create a PMap .
8934	Generate a new keyword .
8935	Chain PyAST stream .
8936	Load an attribute .
8937	Decorator for simple PyAST generation .
8938	Parse the AST into a Python AST .
8939	Return a PyPy AST with the given location .
8940	Convert ast to AST node .
8941	Decorate a function with AST nodes .
8942	Determines if a variable is dynamic .
8943	Determine if a variable is redefable .
8944	Return an AST representation of an AST .
8945	Return a function expression .
8946	Determines if a function should be called on a Defef .
8947	Convert a Py AST to Py AST .
8948	Return the name of a function .
8949	Convert function arguments to python AST .
8950	Convert a single AST node to a pyython function .
8951	Convert a function fn to a pyArrays node .
8952	Convert an AST node into a PyPy AST .
8953	Convert an AST node into a PyPy AST .
8954	Convert a node to a Py AST .
8955	Convert an AST node into a PyPy AST .
8956	Convert an AST node to a PyPy AST .
8957	Transform a recur into a recur .
8958	Converts a recur point to a recur point .
8959	Convert a node to a PyBANG AST .
8960	Convert a Python AST node to a Python AST .
8961	Convert a Python AST to PyY AST .
8962	Convert a local node to a PyPy AST .
8963	Convert a variable name to a python AST .
8964	Convert a variable node to a python AST .
8965	Convert an ast node into a pyop .
8966	Converts a maybeClass node to a PyEAST .
8967	Converts a host form to a PyHost form .
8968	Convert a constant value to a python expression .
8969	Convert a collection literal to a PyAST expression .
8970	Generate a PyPy AST node .
8971	Iterate over module imports .
8972	Convert a Java module into an ast . Module .
8973	Set the named_ns_ variable .
8974	Create a set of members .
8975	Create a set of members .
8976	visit an ExceptHandler node by returning a fresh instance of it
8977	Return node s expression .
8978	visit a FunctionDef node by returning a fresh instance of it
8979	visit a While node by returning a fresh instance of it
8980	visit a Try node by returning a fresh instance of it
8981	Create a new module .
8982	Return the first element of o .
8983	Return the remainder of a sequence .
8984	Return the nthrest of the list .
8985	Return the next element in the sequence .
8986	Concatenate a sequence .
8987	Convert o to seq .
8988	Concatenate seqs .
8989	Return the association of a mapping .
8990	Convert a collection into a collection .
8991	Partial partial decorator .
8992	Dereferenced o .
8993	Determines whether two values are equal .
8994	Return the division of x .
8995	Sort a sequence by f .
8996	Determines whether a node contains a k .
8997	Get the value associated with a key .
8998	Convert o to lisp .
8999	Convert a list of IPers .
9000	Return a LREpr object .
9001	Return a list of positional arguments .
9002	Wrapper for trampoline .
9003	Decorate a function with a set of attributes .
9004	A decorator to convert a function into a function .
9005	Return a function that can be used as a basis function .
9006	Resolve a symbol .
9007	Resolve a variable .
9008	Add a python variable .
9009	Create a new variable with the given name .
9010	Create a new variable .
9011	Create an unbound variable .
9012	Find a variable in namespace .
9013	Find a variable in namespace .
9014	Finds a variable in ns_qualified_symbol .
9015	Add a default import module .
9016	Add an alias .
9017	Create a new namespace .
9018	Associate a new variable .
9019	Find a reference for a symbol .
9020	Add a module .
9021	Return the module corresponding to the given symbol .
9022	Add a reference .
9023	Return the reference for the given symbol .
9024	Return a mapping of all references to another mapping .
9025	Refers all namespaces .
9026	Get or create a namespace .
9027	Get or create a namespace .
9028	Get a namespace .
9029	Remove a namespace .
9030	Matches completion matcher .
9031	Iterate over the given namespace .
9032	Iterate over imports and aliases .
9033	Returns a list of intern names matching the given value .
9034	Returns a list of completion references for the given value .
9035	Iterate over a given string .
9036	Returns a tuple of the parsed arguments .
9037	List members .
9038	Lists members of a list .
9039	Change a representation of a style .
9040	Decrypt JWE token .
9041	Encrypt a JWT .
9042	Delete an item from the cache .
9043	Return a python representation of the comparison .
9044	Close the stream .
9045	Parse a string into an Expression .
9046	Dump an NDB model to a file .
9047	Decode an object .
9048	Decode a date .
9049	Decode a value .
9050	Default JSON encoder .
9051	Validate leicacam version string .
9052	Generate changelog .
9053	Return a list of strongly connected components .
9054	A robust topological sort .
9055	Sets the parent of this query .
9056	Gets the parent of this expression .
9057	Add an operator .
9058	Add an element .
9059	Build an operator and operator .
9060	Build an operator expression .
9061	Decorator for logging a function .
9062	Parse receive message .
9063	Convert tuples to dict .
9064	Check if a given command is valid .
9065	Prepare send message .
9066	Flush incomming socket messages .
9067	Enable a slide .
9068	Save template to file .
9069	Load scan template .
9070	Get information about the device .
9071	r Convert a file into a string .
9072	Locate the path to the package json .
9073	Parse package json .
9074	Raise an error with a JSON error .
9075	Validate the response .
9076	Given two wave vectors make homogenization .
9077	Interpolate a wave vector .
9078	Calculate the distance between two intervals .
9079	Verify the compatibility of two waveforms .
9080	Load the systemjs manifest .
9081	Trace the parameters of a module .
9082	Run a trace for a module .
9083	Shorten a short url .
9084	Expand a short url .
9085	Return the URL statistics for a short .
9086	Returns statistics about the DB .
9087	Return DB stats .
9088	r Perform a command .
9089	Emit a shell command .
9090	Log a message to stdout .
9091	A decorator that adds a method to a method .
9092	Split an iterable into chunksize
9093	Decorator for chunksprocessing .
9094	Flatten an iterable .
9095	Prints a message to stderr .
9096	Print table to stdout .
9097	Create a dummy dummy instance .
9098	Create a new instance from a human readable string .
9099	Create a new SSL client .
9100	Trace a module .
9101	Return a list of links for all requirements .
9102	Make a common entry .
9103	Make a multi - entry .
9104	Convert a list of ops to words .
9105	Chunk noise .
9106	Calculate chunk pars for given data matrix .
9107	r Write a touchstone .
9108	Compute the bounding waveform for a given wavelength .
9109	Helper function to build the given units .
9110	Helper function to construct operation
9111	Calculate the area of a running vector .
9112	Validate min and max .
9113	r Compute the autocorrelation function .
9114	r Compute the acosh .
9115	r Number of arcs in a wave .
9116	r Calculate the arctanh at the given wavelength .
9117	r Calculate the average waveform .
9118	r Calculate the db
9119	r Derivative of the wave function .
9120	r Fourier transform .
9121	r Compute the Fourier transform .
9122	r Compute the Fourier transform .
9123	r Compute the Fourier transform .
9124	r Compute the inverse Fourier transform .
9125	r Fourier transform .
9126	r Compute the inverse Fourier transform .
9127	r Fourier transform .
9128	r Compute the inverse Fourier transform .
9129	r Calculates the integral of a wave .
9130	r Return the group delay .
9131	r Compute the log of the wave .
9132	r Compute the coverage of a given wavelength .
9133	r NIntegral .
9134	r Compute the maximum value of a waveform .
9135	r Returns the minimum value of a waveform .
9136	r Compute the phase of a wave .
9137	r Round a wave .
9138	r Return the square root of the wave .
9139	r Sub - waveform .
9140	r Compute the complex vector .
9141	r Convert a complex wave to a float .
9142	r Convert a wave to an integer .
9143	r Return the value of a wave variable .
9144	Searches for JSPM_OUTP_OUGE_DIR .
9145	Return a short description from a long description .
9146	Build an expression .
9147	Return the next delimiters for a list of items .
9148	Extracts functions from a string expression .
9149	Return a list of delimiter tuples corresponding to the given expr .
9150	Parse an expression .
9151	Removes duplicate delims from a dict
9152	Split text according to sep .
9153	Convert a number to scientific notation .
9154	r Convert a number to a string .
9155	r Convert a number into a peng .
9156	r Calculates Peng float .
9157	r Compute peng ratio .
9158	r Peng Mention .
9159	r Calculates the power of a power .
9160	r Compute peng suffix .
9161	r Remove extra delims from expr .
9162	Convert a number to scientific notation .
9163	Convert a number to scientific notation .
9164	Find a sourcemap comment in a file .
9165	Determines if the given path needs an extension .
9166	Creates a bundle
9167	Trace the app .
9168	Determines if a dep_tree matches the package tree .
9169	Formats a hex dump of the given argument .
9170	Parse a docstring
9171	Return a list of valid identifiers .
9172	Dynamically import a deferred action .
9173	Split a line into parts .
9174	Check the init_commands .
9175	Print help for built - in functions .
9176	Find function by name .
9177	Prints a listing of functions .
9178	Check if argument is a flag .
9179	Process arguments .
9180	Extract an argument value from a keyword argument .
9181	Invoke one function .
9182	Invoke a single line .
9183	Invoke a string .
9184	Parse a param definition .
9185	Parse a return line .
9186	Classify a section .
9187	Classify a line .
9188	Join paragraphs .
9189	Wrap the docstring and format it as a docstring .
9190	Convert value to python type .
9191	Convert binary value to binary .
9192	Get the size of a given type .
9193	Format a value .
9194	Validate type .
9195	Check if the given type is known .
9196	Splits a complex type into its parts .
9197	Instantiate a complex type .
9198	Get the type for the given name .
9199	Check if a given type is known .
9200	Injects a complex type .
9201	Load a type module .
9202	Checks if the given arguments are filled with the spec .
9203	Add a parameter .
9204	Set the return value .
9205	Sets the return info .
9206	Converts a short - name parameter to a short name .
9207	Returns the type of the annotated parameter .
9208	Return a signature for this parameter .
9209	Formats the return value
9210	Convert a positional argument .
9211	Check kwargs for positional arguments .
9212	Convert an argument to a validator .
9213	Format the message as a string .
9214	Convert the message to a dictionary .
9215	Validate and execute a function .
9216	Parse a list of validators .
9217	Find all objects in a given container .
9218	Get the context for a given module .
9219	Return the help text for a function .
9220	Decorator to mark a function as a parameter .
9221	Return a decorator to annotate return values .
9222	Decorator to annotate a return type .
9223	Creates a new context with the given name .
9224	A decorator to annotate a function .
9225	Annotated function .
9226	Return the short description of a function .
9227	Load cron module .
9228	Install crontab .
9229	Print tasks .
9230	Uninstall crontab .
9231	Create a schema .
9232	Load project configs
9233	Save project configuration to file .
9234	Define a singularton attribute .
9235	Returns a list of projects that depend on this project .
9236	Decorator for postprocess methods .
9237	Initialize the project .
9238	Return a copy of the setitem .
9239	Creates a new setattr
9240	Create a new Lens object from an iterable .
9241	Decorator to set a new state .
9242	Return a copy of the state with the given new values .
9243	Modify a function over a given state .
9244	Convert a list of arguments into a tuple .
9245	Implements a lens function .
9246	Apply function f .
9247	Preview the preview .
9248	Apply a list of Fold objects to a list of Fold objects .
9249	Apply a function over a state .
9250	Apply the given state .
9251	Iterate over a state .
9252	Return the kind of optics .
9253	Main game loop .
9254	Return the steps that follow the given other .
9255	Handles player input .
9256	Advance robots .
9257	End the game .
9258	Plays a player .
9259	Play a game of naughts and crosses against the computer .
9260	Make a move .
9261	The winner of this board if one exists .
9262	Yields the number of connections for this board .
9263	Process a single item .
9264	Open a spider .
9265	Upload a file to S3 .
9266	Create a file object .
9267	Get the state of an account .
9268	Get the current state of an asset .
9269	Get information about a block .
9270	Get block hash .
9271	Get the fee for a block .
9272	Get the state of a contract .
9273	Get a raw transaction .
9274	Get a JSON - serializable value for a key .
9275	Get the value of a transaction .
9276	Invoke a contract .
9277	Invoke a function on a contract .
9278	Invoke a JSON - RPC script .
9279	Sends a raw raw transaction .
9280	Validate an address .
9281	Make a call to jsonrpc .
9282	Check if a string is a hash256 hash .
9283	Determines if a string is a hash160 .
9284	Encode invocation parameters .
9285	Decode InvocationResult .
9286	Decorator to specify the first kwonly argument .
9287	Takes an instruction and returns a new datetime . datetime object .
9288	Apply the given timezone to the given timezone .
9289	Save the given file .
9290	Render the barcode .
9291	Calculate the checksum .
9292	Render the given code .
9293	Connect to KVS server .
9294	Main entry point .
9295	Download the S3 configuration
9296	Upload a file to S3 .
9297	Downsyncs an S3 configuration file .
9298	Show diff between S3 and S3 .
9299	Parse environment variable .
9300	Set basic configuration .
9301	Set api_key .
9302	Load json content from a folder .
9303	Return a dict of JSON schemas .
9304	Returns the JSON Schema for this schema .
9305	Returns a RefResolver for this schema .
9306	Validate an object .
9307	Returns a list of valid valid examples .
9308	Return a list of invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of OneDrive user
9313	Get OneDrive object representing list of objects in a folder .
9314	Create a folder .
9315	Add comment message to a specified object
9316	Convert or dump object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag and drop functionality
9319	track default top level top level window for toolbox menu default action action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to guipy style .
9323	Loads HTML page from location and then displays it .
9324	Retrieves a param from a tag .
9325	Process an outgoing communication
9326	Show a tip message
9327	Get the selected object and store start position
9328	Move the selected object .
9329	Called by SelectionTag .
9330	support cursor keys to move components one pixel at a time .
9331	delete all the selected objects
9332	create a copy of each selected object
9333	Capture the new control superficial image after an update .
9334	When dealing with a Top - level window position .
9335	Returns the pyth item data associated with the item .
9336	Set the python item data associated with the wx item .
9337	Do reverse look up for an item containing the requested data .
9338	Remove the item from the list and unset the related data .
9339	Remove all the items from the list and unset the related data .
9340	Remove all items and column headings .
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none .
9343	Associate the given client data with the item at position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object similar to self .
9348	called when adding a control to the window
9349	Re - parent a child control with the new wx_object parent
9350	make several copies of the background bitmap
9351	Draw the image as background .
9352	Custom draws draws the label when transparent background is needed .
9353	Searches for modules in the given path .
9354	Return a list of children sub - components that are column headings .
9355	Update the grid if rows and columns are added or deleted or deleted .
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	col to sort the data based on the column indexed by col .
9359	Remove all rows and reset internal structures
9360	Called to create the control which must derive from wxControl .
9361	Fetch the value from the table and prepare the edit control control .
9362	Complete the editing of the current cell returns True if changed
9363	Return True to allow the given key to start editing editing .
9364	This will be called to let the editor do do something with the first key .
9365	Create a handler for a type .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable all top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding its position .
9371	Process form submission .
9372	Set the tag of an object .
9373	visit an astroid node by returning a list of dictionaries
9374	Get the documentation for the given object .
9375	Mangle a signature .
9376	Import a module by name .
9377	Implements the autolink role .
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string or None .
9380	Show a dialog to select a font
9381	Show a dialog to pick a color to pick a color .
9382	Show a dialog to choose a directory .
9383	Shows a find text dialog .
9384	Force appearance of the button next to the item .
9385	Set the wx object .
9386	Display or hide the window optionally disabling all other windows
9387	Open read and eval and eval the resource from the source file .
9388	Save the resource to the source file .
9389	Create a gui2py window based on the python resource
9390	Create a guipy control based on the python resource
9391	Associate event handlers .
9392	translate guipy attribute name from pythoncard legacy code
9393	Write content to the clipboard data .
9394	Find autosummary in docstring .
9395	Add the object and all its childrens
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Return the representation of the image .
9401	Decorator to register an expression filter .
9402	Decorator to add a node filter .
9403	Raises an AssertionError if the path is not met .
9404	Raises an AssertionError if the path doesn t exist .
9405	Tests whether a path has the current path .
9406	Tests if a path has no current path .
9407	Select option .
9408	Apply a filter to the expression .
9409	Get a web browser .
9410	Return the xpath representation of the expression .
9411	Determines if node matches filters .
9412	Switch to the parent frame .
9413	Context manager to accept an alert .
9414	Context manager to accept a message .
9415	Displays a confirm message .
9416	Context manager for accepting a prompt .
9417	Displays a prompt .
9418	Save html to file .
9419	Save a screenshot .
9420	Raise the server error
9421	Check whether the value matches the filter .
9422	Check if a field has checked .
9423	Check whether a field has no checked .
9424	Check whether a field has unchecked .
9425	Check if a field has no unchecked .
9426	Fail if text is not met .
9427	Fail if there is no text .
9428	Raises an AssertionError if the title is not met .
9429	Fail if the title has no title .
9430	Tests if the given title has a title .
9431	Tests if the title has no title .
9432	Searches for all records matching the given criteria .
9433	Return the first occurrence of the first item in the list .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator to define a setter function .
9438	Decorator for synchronizing a function .
9439	Determines if an error should be caught .
9440	Compare the number of results for this query .
9441	Cache the result at the given size .
9442	Checks if the given options is not None .
9443	Return a failure message
9444	Determines whether the count matches the given options .
9445	Normalize text .
9446	Normalize whitespace .
9447	Return a regular expression .
9448	Returns the resolved URL for the given session .
9449	Resize the window to the given size .
9450	Start the application .
9451	Decorator to set a property .
9452	Separate class method .
9453	Separate class method .
9454	Return a string representation of the traceback .
9455	Returns the object source for the given instance .
9456	Get the logger for the instance .
9457	Set the logger .
9458	Call an API method and return the response .
9459	Access the channels
9460	Access the users
9461	Make a Slack message
9462	Translate a channel .
9463	Sends a Slack message
9464	Read a channel from the server .
9465	Run Slack API .
9466	Run a slack token
9467	Return the diff between two dicts .
9468	Colorize a message .
9469	Start the v2 playbook
9470	Print the result of a command .
9471	Print a v2 playbook on the console .
9472	Print a message to stdout .
9473	Convert prefix to netmask .
9474	Decorator to check if a value is empty .
9475	Add a model .
9476	Get a dictionary of elements .
9477	Load the model from the given data .
9478	Convert this object to a dictionary .
9479	Parse the configuration .
9480	Parse the state .
9481	Translate config to a string .
9482	Load all filters .
9483	Find the YANG file in the given path .
9484	Return a dict representation of a model .
9485	Return the difference between two strings .
9486	HTTP POST operation .
9487	Build the authorization code URI .
9488	Get an access token .
9489	Parse URL query parameters .
9490	Unquery a given URL .
9491	Build URL .
9492	Handle exception .
9493	Create a Response object from the response body .
9494	Build an error response .
9495	Make a json response
9496	Get the authorization code for a given client .
9497	Refreshes a refresh token .
9498	Get an access token .
9499	Get the authorization code from a URI .
9500	Get a token from POST data .
9501	Get the Authorization header .
9502	Open a USB device .
9503	Read a single byte .
9504	Read bytes from a device .
9505	Read a byte from a device .
9506	Write bytes to a buffer .
9507	Write a byte to a device .
9508	Write data to an I2C block .
9509	URL for CDN .
9510	Create a copy of the target .
9511	Create a local copy of the local file .
9512	Create a remote copy .
9513	Construct a File from a file_info .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Return a list of file_cdn_urls .
9518	Construct a Group from a group info .
9519	Create a new group .
9520	Base request method .
9521	Iterate over UUIDs .
9522	List items .
9523	Generate a bar plot
9524	Make an upload request
9525	Retrieve the home mode status .
9526	List all cameras .
9527	Retrieve information about a camera .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Retrieve motion setting for a camera event .
9531	Save a camera event .
9532	Update camera motion settings .
9533	Determines whether or not the last_li is last_li .
9534	Iterate over a list of nodes .
9535	Return the integer value of a variable .
9536	Return the vMerge for the given tc path .
9537	Get the grid span .
9538	Get the td at the given index .
9539	Return True if style is False False otherwise .
9540	Check if a string is bold .
9541	Return True if the given string is italics .
9542	Check if the given r is underlined .
9543	Check if p is a title .
9544	Iterate over text - run data .
9545	Return dictionary of relationships for given media .
9546	Extract metadata from a file .
9547	Determines the order type of a list .
9548	Build a list of nodes .
9549	Builds a Tr object from the given meta data .
9550	Build a table from meta data .
9551	Get the content of a tag .
9552	Remove a tag from the tree .
9553	Searches for a dataset .
9554	Load MNIST dataset .
9555	Loads a CIFAR file .
9556	Plot an image .
9557	Plot layers of weights .
9558	Plot the grayscale .
9559	Generate samples from arrays .
9560	Encodes a string into a list .
9561	Generate a batch of batches .
9562	Predict sequence .
9563	Add convolution weights .
9564	Encodes the given data using the given encoding .
9565	Decode a layer .
9566	Find the output layer .
9567	Return the autoencoder .
9568	Predict the output .
9569	Predict probabilities for x .
9570	Predict logit .
9571	Compute the mean squared error .
9572	Calculate the batch at the given sequences .
9573	Generate batches of given dataset .
9574	Load network from disk .
9575	Generate a random matrix .
9576	Return a random vector .
9577	Yields all outputs matching the given patterns .
9578	Yield all params matching the given patterns .
9579	Create a graph from a graph .
9580	Returns the list of variables .
9581	Compute the accuracy .
9582	Scan the input .
9583	Build an Activation object .
9584	Creates a reservoir .
9585	Add a loss
9586	Creates a training dataset .
9587	Train the model .
9588	Generate a hash for the layers .
9589	Build the graph .
9590	A list of Input objects .
9591	Return a list of variables .
9592	Find a parameter by its name .
9593	Calculate the feed forward function .
9594	Predict the output .
9595	Compute the log - likelihood .
9596	Save model to file .
9597	Load a model from a file .
9598	Calculate the loss .
9599	Return an iterator over the updates .
9600	The size of the output layer .
9601	Create a new TensorVariable instance .
9602	Bind the graph to the graph .
9603	Resolve the input shapes .
9604	Resolve the output shapes .
9605	Log the parameters .
9606	Return the log of the parameters .
9607	Format string .
9608	Resolve a shape name .
9609	Find a key by its name .
9610	Add a bias .
9611	Return a dict representation of this object .
9612	Compute loggabor .
9613	Loggabor image
9614	Add a tier .
9615	Remove a specific tier .
9616	Get a specific tier .
9617	Convert to EAF
9618	Add a point .
9619	Add an interval to the segment .
9620	Remove an interval from this tier .
9621	Remove a point at the given time .
9622	Get all intervals
9623	Returns a list of intervals sorted by tier .
9624	Indent an el .
9625	Add a reference annotation .
9626	Add a cv_id entry .
9627	Adds a descriptive description .
9628	Add an external reference .
9629	Adds a language .
9630	Add a lexicon reference to a Lexicon
9631	Adds a linguistic type .
9632	Add a link to a file .
9633	Add a local locale .
9634	Add a secondary link .
9635	Add a tier .
9636	Remove timeslots from tiers .
9637	Extract annotation data .
9638	Generate a unique identifier for the annotation .
9639	Generate a timestamp for the given time range .
9640	Return child tiers for id_tier
9641	Get the full time interval .
9642	Get the reference annotation data after the given time tier .
9643	Get the data before the given reference annotation .
9644	Return a list of tier IDs for the given language .
9645	Merge tiers .
9646	Removes all annotations from a particular tier .
9647	Remove the CV description for the given lang_id .
9648	Remove a license .
9649	Remove linked files from the media_path .
9650	Remove a property .
9651	Remove a reference annotation .
9652	Remove secondary linked files .
9653	Removes the specified tier .
9654	Remove all tiers
9655	Rename a tier .
9656	Shifts all annotations in the given time range .
9657	Main entry point .
9658	Display debug information for the storage .
9659	Return the base level of the given text .
9660	Get embedding levels .
9661	Performs explicit embedding .
9662	Calculate the number of runs in the storage .
9663	Resolve weak types
9664	Determines the types that can be used in a storage .
9665	Reverse a sequence of characters .
9666	Reorder the resolved levels .
9667	Populate the context .
9668	Convert the given list of lines into a python object .
9669	Add an object .
9670	Parse command line arguments .
9671	Maintain backwards compatibility .
9672	Return the current gui .
9673	Return a PyBlish gui .
9674	Deregister host .
9675	Add a script to the filemenu .
9676	Temporarily restore the selection .
9677	Temporarily restore the current time .
9678	Displays a single GUI .
9679	Setup the Telegram bot s types
9680	get cumulative data
9681	Return the values for a single axis .
9682	Draw a constant line on the y - axis with the label .
9683	Cache the parameters needed to transform x and y coordinates .
9684	Reverse a mapping .
9685	Generate a range of float values .
9686	Add data to the parser .
9687	Add svg definitions
9688	Add data to the conf .
9689	Render the graph .
9690	Calculate the left margin .
9691	Calculate the right margin .
9692	Calculate top margin .
9693	Add a popup .
9694	Calculate bottom margin .
9695	Generate the graph .
9696	Make a data - point text element .
9697	Draw the X axis labels .
9698	Draw the Y axis labels .
9699	Draw the X - axis guidelines .
9700	Draw the Y - axis guidelines .
9701	Draws the graph title and subtitle .
9702	Hard - coded the styles into the SVG XML if not used .
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to a specific message .
9709	Dispatch patterns .
9710	Create a new nick .
9711	Handle a ping .
9712	Handle registered messages .
9713	Initiate receive loop .
9714	Register a node with a boss .
9715	Run the task runner .
9716	Decorator to require a callback for a given nick .
9717	Return a list of command patterns .
9718	Register a success message .
9719	Process a command .
9720	Add a nick .
9721	Send a validation email .
9722	Sends a password reset notification .
9723	Validate password strength .
9724	Verify a user .
9725	Delete a user
9726	Allow a request .
9727	Returns the executor for this thread pool .
9728	Return an instance of the Docker client .
9729	Return the TLS client
9730	The service name .
9731	Wrapper for docker
9732	Executes a given command .
9733	Poll task status .
9734	Stop Docker service .
9735	Filter queryset .
9736	Update password .
9737	Update password .
9738	Validate email address .
9739	Create a new token .
9740	Delete a token .
9741	Raises an exception if the user is not authenticated .
9742	Send an email .
9743	Update expired entries .
9744	Generate a password reset context
9745	Handles an email notification .
9746	Handles the password reset email .
9747	Handles a validation email .
9748	Attempt to authenticate the user
9749	Authenticates the given token .
9750	Display a notebook
9751	Process HV plots .
9752	Get CustomJS callback .
9753	Creates a widget with the given name .
9754	Render a plotting object .
9755	Creates a TextInput
9756	Return a list of named objects .
9757	Return the owner of a method .
9758	Assigns the HTTP AuthCredentials .
9759	Perform a ping .
9760	Gets information about the machine .
9761	Return the cluster health .
9762	Convert a number to a human readable string .
9763	Returns the total load of the system .
9764	Get memory size .
9765	Get the network up .
9766	A list of volumes .
9767	Get a specific volume .
9768	Returns the total size of a volume
9769	Return the percentage of a volume .
9770	Calculate the amount of disk per volume .
9771	Get the maximum disk temp .
9772	Get disk by id .
9773	Logs into the session .
9774	Perform a GET request .
9775	Execute GET request .
9776	Update the entry details .
9777	Retrieves the system utilization .
9778	gets the storage object
9779	Create a context for a given request .
9780	Get the tenant token .
9781	Helper function for building an attribute dictionary
9782	Convenience function to set apps .
9783	Return a copy of apps with apps removed .
9784	Get the global settings .
9785	Handle GET request .
9786	Get the value of a key .
9787	Change a configuration value .
9788	Migrate config file .
9789	Start the webserver .
9790	Waits until the response is ready .
9791	Get new access information .
9792	Check if a token is present .
9793	Set authentication credentials .
9794	Refreshes the OAuth2 token .
9795	Create a manifest table .
9796	Split a full path into a full path .
9797	Determines if a bucket is glacier .
9798	Extracts the run id from the given key .
9799	Return a copy of a dictionary .
9800	Add an item to a manifest .
9801	Check if a given run exists in a manifest .
9802	Extract schema from URI .
9803	Fix schema name .
9804	Parse a list of contexts .
9805	Parse an unstructured event .
9806	Transform a line into JSON .
9807	Convert a Snowplow event into JSON .
9808	Get the requested template name .
9809	Format the context as a string .
9810	Prints the given context variables .
9811	Format SQL into SQL .
9812	Pretty - print Django context .
9813	Formats a dict as html
9814	Converts the given string into HTML .
9815	Return a pretty - printed version of the object .
9816	Format object as string .
9817	Get a token from a string .
9818	Create a LatexWalker object from a string .
9819	Convert latex nodes to text .
9820	Set tex input directory .
9821	Read the input file .
9822	Convert latex to text .
9823	u Converts a LaTeX to LaTeX .
9824	Unascii character .
9825	Get information about the organization .
9826	Get boards .
9827	Get a list of members .
9828	Update an organisation .
9829	Remove a member from a member .
9830	Add a member to a member .
9831	Add a member to a group .
9832	Get list information .
9833	Create a card .
9834	Get label information .
9835	Get check items .
9836	Update label name .
9837	Update label dictionary .
9838	Get the authorization URL .
9839	Get card information .
9840	Get a board .
9841	Get list .
9842	Get a list of checklists .
9843	Add a comment .
9844	Add an attachment .
9845	Create a new checklist .
9846	Add a label to a dictionary .
9847	Add a label from a class .
9848	Add a member to the group .
9849	Get member information .
9850	Get cards .
9851	Get list of organisations .
9852	Create a new board .
9853	Decorator for adding single -ispatch methods .
9854	Get board information .
9855	Get list of lists .
9856	Returns a list of labels .
9857	Get a card .
9858	Returns a list of Checklists .
9859	Get an organisation .
9860	Update a board .
9861	Create a new list .
9862	Create a new label .
9863	Get check list information .
9864	Get card information .
9865	Create a checklist item list .
9866	Update a checklist .
9867	Adds an item to checkItem .
9868	Remove an item from CheckItem .
9869	Update a checklist item .
9870	Updates the checklist item .
9871	Add an authorization request .
9872	Check the response for errors .
9873	Build the URL for the Trello website .
9874	Fetches the given URI from the given path .
9875	Create an organisation .
9876	Create a board .
9877	Create a label .
9878	Create a list .
9879	Create a card .
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organization .
9883	Get a board by id .
9884	Get a list
9885	Get a card .
9886	Get a checklist .
9887	Get a member
9888	Extract a domain from a URL .
9889	Convert text to markdown .
9890	Convert text to text .
9891	Extract text pairs from text .
9892	Set password .
9893	Split text according to locations .
9894	Mark a regex as matched by split_locations .
9895	Mark the beginning of a regex match .
9896	Main entry point .
9897	Create a new encryption cipher .
9898	Get AES mode .
9899	Import the name of the crypto .
9900	Validate the encryption scheme .
9901	Publish a message
9902	Generate a new ID .
9903	A connection to MQTT .
9904	Handle CONNACK packet .
9905	Encode a string .
9906	Decode a string .
9907	Encode a 16 - bit int .
9908	Encode a length string .
9909	Decode encoded length .
9910	Encode the header .
9911	Encode this message .
9912	Decode a packet .
9913	Encodes this result into a binary string .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode this message .
9917	Encodes this message into a string .
9918	Decode a packet .
9919	Encode this message .
9920	Encode this message .
9921	Decode a packet .
9922	Decode a packet .
9923	Return the URL for the vk .
9924	Perform a request .
9925	Refreshes the block .
9926	Formats the given data
9927	Apply fit to data .
9928	Fit k - means clustering .
9929	Calculate the mean shift .
9930	Fit clustering to data .
9931	Predict classifier .
9932	Map a set of clusters to the given size .
9933	Sort clusters by clustering .
9934	Parse a datetime object .
9935	Calculate total number of points .
9936	Get the total time span for d .
9937	Return a tuple of unit pd .
9938	Pretty - print an element .
9939	Convert an analyte s to a string .
9940	Convert an analyte name to its massname .
9941	Collate data into a single CSV file .
9942	Convert a bool array into an numpy array .
9943	convert tuples to bool
9944	Compute the smoothed smooth function .
9945	Compute the gradients of an array .
9946	returns a list of mappings that have no mappings
9947	Calculate the mean shift of data .
9948	Calculate K - Means labels
9949	Cluster data using DBSCAN .
9950	Return the set of unique srms .
9951	Read the configuration file and return it .
9952	Read the latools cfg file .
9953	Print a list of all LATools .
9954	Copy an SRM table to a destination .
9955	Create a config file .
9956	Change the default configuration .
9957	Exclude downholes from a given file .
9958	Defragate a single file .
9959	Compute the pepike .
9960	Create autorange plot .
9961	Determines the initial values for the time series .
9962	Compute the ratio
9963	Calibration for calibrated data .
9964	Generate a sample of data .
9965	A dictionary of Ablation times .
9966	Remove all thresholds from a given threshold .
9967	Filter gradients below threshold below threshold .
9968	Calculate the correlation .
9969	Filter the correlation filter .
9970	add a new file
9971	Generate a dictionary of parameters to be used for filtering .
9972	Plot histograms .
9973	Return a pandas DataFrame with summary statistics .
9974	Load the reference data for a file .
9975	Return the type of the given TC instance .
9976	Return the elements in the pickle file .
9977	Calculate the M for a molecule
9978	Generate namedtuples .
9979	annihilate a predicate .
9980	Remove duplicates from a tuple .
9981	Calculate the Gaussian - weighted average - weighted statistics .
9982	Gaussian function
9983	Calculate the standard deviation of a .
9984	Get the samples .
9985	Pepike method .
9986	Calculate the weighted mean of a Bunch .
9987	Calculate Bunch .
9988	Subtract the background subtraction .
9989	Calculate the ratio of the model .
9990	Make a subset of the analysis .
9991	Filters the gradient threshold for the given threshold
9992	Fits a classifier .
9993	Apply a classifier .
9994	Filters the correlation filter .
9995	Apply filter on samples .
9996	Remove filt from filt
9997	Return the status of the filter
9998	Defragment the filter with the given threshold .
9999	Print out the number of removed samples .
10000	Plot gradient histogram .
10001	Returns a crossplot of the gradient of the gradient .
10002	Plot histograms .
10003	Creates a matplotlib plot
10004	Draw gradient plots
10005	Filter the results of the given analyzer .
10006	Generate sample statistics .
10007	Calculate statistics for the analysis .
10008	Generate a minimal export dataset .
10009	Export the traces .
10010	Write log file .
10011	Creates a minimal export dataset .
10012	Read file by regex .
10013	Perform a fold on a function .
10014	Plot a scatter plot .
10015	Calculate Bayes scale .
10016	Calculate the median value of s .
10017	Calculate noise .
10018	Calculate exprecay decay .
10019	Add a component .
10020	Remove a component from the list .
10021	Clears the object .
10022	Removes unused components .
10023	Determines whether the filter matches the given filters .
10024	Make a binary quadratic model from a key .
10025	Grab a filter from a file .
10026	Returns a string representation of the component .
10027	Decorator to log a function .
10028	Write log file .
10029	Read a log file .
10030	Decorator for autologin .
10031	Get modem information .
10032	Send a message to the modem .
10033	Parse a file or string .
10034	Return a link to the NbViewer viewer .
10035	Divide the thumbnail .
10036	Get code div .
10037	Get the code example .
10038	Get the URL of the notebook .
10039	Get the file extension .
10040	Process a notebook .
10041	Create a python file
10042	Download files .
10043	Create a thumbnail .
10044	Parse the header description .
10045	Scale an image .
10046	Saves the image .
10047	Returns a copy of the thumbnail_figure
10048	Get the URL for a file .
10049	Return a list of languages that have changed .
10050	Returns a default value for the given field .
10051	Process a thumbnail file .
10052	Preprocess the image .
10053	Refreshes the thumbnail .
10054	Return a list of all the images .
10055	Create a new image .
10056	Delete the image .
10057	Create a thumbnail .
10058	Get a Thumbnail object .
10059	Delete a thumbnail .
10060	Handle incoming incoming message .
10061	Subscribe to a number .
10062	Return a list of states that have been accepted .
10063	Add a provider .
10064	Sends a message .
10065	Returns the receiver blueprint for the given name .
10066	Return a dict mapping the receiver blueprints .
10067	Receive a message .
10068	Receive a status from the gateway .
10069	Decorator for jsonex methods
10070	Forward an object to the client .
10071	Sign a web3 transaction .
10072	Estimate gas for a given web3 address .
10073	Estimate the gas estimate of a gas .
10074	Write to the stream .
10075	Read a line from the serial port .
10076	Sends an email .
10077	Return the attachment as a string .
10078	Check if the message has bad headers
10079	Attaches a new attachment .
10080	Registers a service .
10081	Create a Config object from a module .
10082	Registers a service .
10083	Return the value for the given key .
10084	Exit the given object .
10085	Setup the data manager
10086	Return the number of energy in wavelength .
10087	Calculate the Cauchy equation .
10088	Initialize the backend
10089	Login to the Backend server .
10090	Returns a dictionary of domains for this node .
10091	Get all results .
10092	PATCH operation .
10093	HTTP DELETE operation .
10094	Check if two files are identical .
10095	Create a device link .
10096	Initialize the logger .
10097	Raise an exception if message is invalid .
10098	Claim a list of file readers .
10099	Get the column header .
10100	Claim unclaimed readers .
10101	Initialize population stats .
10102	Claim unclaimed vcf readers .
10103	Split text into lines .
10104	Return the prefix of a line .
10105	Return the suffix ending of a string .
10106	Seek to the next line .
10107	Seek to the previous line .
10108	Return the last line of the file .
10109	Return the first line of the file .
10110	Follow the file .
10111	Claim unclaimed readers .
10112	Parse VCF record .
10113	Return a dict of sample tag values .
10114	Format VCF tags .
10115	Joins the info_fields dictionary .
10116	Determines the format of the sample .
10117	Return a string representing the sample field .
10118	Returns tab - delimited newline terminated string of VCFRecord .
10119	Add a new sample tag value .
10120	Add a filter .
10121	Return a sorted list of available categories .
10122	Create a form for a product .
10123	Generate staff products form .
10124	Add a product error .
10125	Cache the result of a function .
10126	Creates a model field form .
10127	Return a list of pending items .
10128	Send email .
10129	Iterate through OpenStreetMap stream .
10130	Parse an osm file .
10131	Iterate over OpenStreetMap notes .
10132	Returns True if the filter passes the filter .
10133	Check if user is met .
10134	Return the remaining quantity of a given user .
10135	Filter queryset .
10136	Filter queryset .
10137	Filter queryset .
10138	Filter queryset .
10139	Pre - filter conditions .
10140	Decorator for functions that modify the cart .
10141	Create a new reservation for a given user .
10142	Auto - extend the reservation .
10143	Apply a voucher to the cart .
10144	Validate a cart .
10145	Replace all vouchers in the cart
10146	Recalculate discounted discounts
10147	Add a discount item .
10148	Decorator for registering a report view .
10149	Iterate over rows of the given content_type .
10150	Get form .
10151	Render the data
10152	List all reports .
10153	Returns a list of the items sold on the invoice .
10154	Summarize the sales summary .
10155	Retrieve all payments .
10156	Return a list of credit note refunds .
10157	Return a list of ProductItems .
10158	Return a list of discounts .
10159	Return a list of line items for the given form .
10160	Filter paid invoices by date .
10161	Retrieve credit notes .
10162	List invoices .
10163	Displays a list of attendees .
10164	Retrieve speaker registrations .
10165	Generate a manifest .
10166	Return a list of missing categories .
10167	Calculate the available credit note
10168	Determine if a user is sold out .
10169	This view is used to redirect the user to the page .
10170	Edit the profile .
10171	Handles the attendees .
10172	View a product category .
10173	Handles products .
10174	Handle a voucher form .
10175	View for checkout .
10176	Redirect invoices to the access_code .
10177	Add an invoice .
10178	View for manual payment .
10179	Refund an invoice
10180	Applies a credit note
10181	Modify the registration form .
10182	Extend a reservation for a user .
10183	View function to send an email .
10184	View for badges .
10185	Render a badge .
10186	Returns a list of available discounts for a given user .
10187	Annotate a queryset with a queryset .
10188	Return a list of available products .
10189	Applies a credit note to an invoice
10190	Creates a cancellation fee for this credit note .
10191	Generate a random access code .
10192	Decorator to make a function callable .
10193	Get object by name .
10194	Creates an invoice for a given cart .
10195	Generate invoice invoice .
10196	Generate a product from a cart .
10197	Apply credit note to invoice .
10198	Return whether the user can view this user .
10199	Refresh cart .
10200	Validate that the invoice can be paid for payment .
10201	Update the status of the invoice
10202	Marks the invoice aspaid .
10203	Checks if the invoice cart matches the cart
10204	Refreshes the invoice
10205	Mark this invoice as invalid .
10206	Refund this invoice .
10207	Send an email .
10208	Update the annotation .
10209	Flatten a field .
10210	Print download information .
10211	Download the given field .
10212	Get project data .
10213	Get a list of available processors .
10214	Print the input fields of a processor .
10215	Retrieves the data from a json string .
10216	Upload a file to a processor .
10217	Upload a file to the remote server .
10218	Download a set of data objects .
10219	Returns a list of subclasses of the given c .
10220	Get repo and project .
10221	Get phenotypes with suggested changes .
10222	Given a list of variants merge them with their corresponding phenotype .
10223	Search for variants by coordinate query .
10224	Bulk search_queries_by_queries
10225	Update this element .
10226	Remove duplicates from seq .
10227	Authenticate asana .
10228	Prompt the user to select a list .
10229	Get the saved data for the given issue .
10230	Move data from other to other .
10231	Get the saved task data .
10232	Get an ASANA task by id .
10233	Save data to disk .
10234	Apply a value to the key .
10235	Wrap a function as a task .
10236	Flush a queue .
10237	Create a task .
10238	Formats a list of task numbers with links
10239	Create a missing task .
10240	Returns the set of data types of the project .
10241	Logs an EKM meter .
10242	Initialize the serial port .
10243	Sets the polling values .
10244	Combine AB values .
10245	Render read reads since given timestamp .
10246	Set request context .
10247	Calculate the pressure for a given pf .
10248	Set the max demand period .
10249	Sets the specified password .
10250	Unpack struct .
10251	Convert a data buffer to a dict .
10252	Render a JSON object as a json object .
10253	Calculate CRC .
10254	split EkmDate object into datetime objects
10255	Get the number of reads for the given direction .
10256	Sets the CTR ratio .
10257	Assign a schedule .
10258	Assigns a new season for the current season .
10259	Set SeasonSchedules .
10260	Assigns a holiday .
10261	Read data from a table set .
10262	Extract a schedule from a given schedule
10263	Reads the number of months .
10264	Extract the month from the month .
10265	Calculate HolidayDates and CRS
10266	Extract a holiday from a holiday .
10267	Read the settings .
10268	Write a command message .
10269	Perform a serial command .
10270	Update all registered observers
10271	Initialize the LCD lookup .
10272	Perform a request .
10273	Request read A .
10274	Respond to the request B .
10275	Set the B for B .
10276	Calculate the pf1 and t2 .
10277	Set the CDD on display list .
10278	Set relay duration .
10279	Called when serial post termination is started
10280	Set pulse input ratio .
10281	Set a zero - resets password .
10282	Set LDD password .
10283	Iterate over the fields .
10284	Iterate over fields in a schema .
10285	Return a list of paragraphs .
10286	Generate a random text .
10287	Return a string representation of the result .
10288	Change text color .
10289	Write text to the stream .
10290	Return a summary of the test results .
10291	Parse arguments .
10292	Set up the configuration .
10293	Run the test suite .
10294	Convenience function to run the given config .
10295	Transform a node describing its description .
10296	Generator that transforms the body of the body .
10297	Transform a node into an example .
10298	Transform an example body .
10299	Return an ast .
10300	Register a file handler .
10301	Convert a byte string to a python code object .
10302	Parse arguments parser .
10303	Load a module by name .
10304	Load source from path .
10305	Search for files in a directory .
10306	Return a function that checks a given location .
10307	Return a list of messages for a given location .
10308	Add a new command .
10309	Remove a file from the filesystem .
10310	Registers a restart .
10311	Parse the results .
10312	Get a MultiService instance .
10313	Create a service object .
10314	Refreshes the session .
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the last update of a node .
10318	Get all nodes .
10319	Refreshes the session .
10320	Increment the number of times modified times .
10321	Deregister this node .
10322	Returns a list of tokens interleaved with the delimiter .
10323	Check if a file is bad
10324	Merge the output .
10325	Query to test if a value exists .
10326	Query to get the value
10327	Return a constant .
10328	Splits a function f into two lists .
10329	Unplat a function .
10330	Run a process and wait for it to finish .
10331	Create a TimerService instance .
10332	Complete the parser with the given parser .
10333	Parse a literal .
10334	Optimize a parser .
10335	Repone a parser .
10336	Repeated parser .
10337	Reparated parser .
10338	Reparated parser .
10339	Check a set of states .
10340	Close the queue .
10341	Check the URL .
10342	Add a new Heart .
10343	Creates a new Heart .
10344	Freeze a graph from a checkpoint .
10345	Freeze model from checkpoint .
10346	Save a graph def to a file .
10347	Save graph only from a checkpoint .
10348	Save weights from a checkpoint .
10349	Restore the model from a checkpoint .
10350	Parse a tag .
10351	Render a tag .
10352	Validate that a tag is valid .
10353	Get the context data for this context .
10354	Parse a tag .
10355	Get context data .
10356	Converts a caffe_def_path to a tensorflow session .
10357	Freeze a TensorFlow .
10358	Save the graph only .
10359	Convert a sequence into a list of rows .
10360	Return nofill string .
10361	Yields every item from iterable .
10362	Remove duplicates from an iterable .
10363	Return the next element of iterable .
10364	A generator that yields tuples from iterable .
10365	Partition a list of items by bin_size
10366	Iterate over the items of an item .
10367	Utility to suppress callables .
10368	Return a list of items that have duplicates .
10369	assert that iterable is ordered
10370	Swap the result of a partition result .
10371	Partitions a dictionary by key .
10372	Get the first n queues
10373	Reset the state .
10374	Parse a token as a variable .
10375	Decorator to create a template tag .
10376	Return the public key chain for the given chain .
10377	Fetch the sqlite master record .
10378	Iterate over an object .
10379	Parse an object .
10380	Parse a selector .
10381	Select the selector production .
10382	Return all parents of a node .
10383	Return the ancestors of a node .
10384	Return the siblings of a node .
10385	Compute the nth child production .
10386	Return a list of nodes matching the given obj .
10387	Send a ping to the ICMP server .
10388	Perform a HTTP request .
10389	Expire the cache for the given age .
10390	Set the value of the time series .
10391	Get the value of a key .
10392	Returns True if k is contained in k .
10393	Check that the given timestamp is valid .
10394	Create a NistBeaconValue object from a json dictionary .
10395	Create a NistaconValue from an XML string .
10396	Return the rendered js template .
10397	Get the file fn .
10398	Return a list of rows .
10399	Validate token
10400	Get the Fernet engine .
10401	Validate a supported token .
10402	Create a token serializer .
10403	Calculate counter32 .
10404	Compute counter64 .
10405	Calculate the average duration in seconds .
10406	Set up the output module .
10407	Setup the sources
10408	Sends an event to a list of events .
10409	Manage sources
10410	Parse format string .
10411	Parse an ApacheLogParser .
10412	Raises an exception if the given field is not a future .
10413	Raises ValidationError if the request is not required .
10414	Validate the token
10415	The name of the browser .
10416	Log a warning message .
10417	Connects receivers .
10418	Create a secret link .
10419	Sends an accept notification .
10420	Sends the notification email .
10421	Send email confirmation email .
10422	Sends a reject notification .
10423	Send a notification .
10424	Create a link .
10425	Validate token
10426	Revoke this link .
10427	Create a new object .
10428	Get receiver by user .
10429	Confirm email confirmation .
10430	Accept a request .
10431	Reject a request .
10432	Create a secret link
10433	Generate a SHA512 hash .
10434	Verify a message .
10435	Determines if a record is already loaded
10436	Create a new access request .
10437	Send email confirmation request .
10438	Get an SSH command client instance .
10439	Reverse the row .
10440	The selected item .
10441	Return the items in the query
10442	Get the version of the file .
10443	Set the new version .
10444	Initialize the SSH configuration .
10445	Start timer .
10446	Picks the queue .
10447	List links .
10448	Creates a new Riemann client .
10449	Stop the reactor .
10450	Empty the queue .
10451	Handle events .
10452	Create RPC client .
10453	Create Elasticsearch client
10454	Encodes a protobuf event .
10455	Encode a message .
10456	Decode a protobuf message .
10457	Sends the current pressure .
10458	Generate a file preview .
10459	Retrieve a file preview .
10460	Sends a message to a dictionary
10461	Receives a message loop .
10462	True if the log time is in seconds .
10463	Respond to a response .
10464	Raise a SASL message exchange .
10465	Perform the SASL prep prepending the given chars .
10466	The admin footer node .
10467	Build payment parameters .
10468	Build payment parameters .
10469	Place a payment with an alias .
10470	Get a version string .
10471	Constructs the widget .
10472	This method is called when the user clicks .
10473	Configure the shortcuts .
10474	Called when an item is activated .
10475	Handle selected item .
10476	Callback called when the user clicks on the selected item .
10477	Finalize the options .
10478	Run pyside - rcc .
10479	Clean up the package .
10480	Fetch the children of this node .
10481	Refetch this object .
10482	Return the icon associated with the given index .
10483	Run a subprocess .
10484	Get the maximum limit .
10485	Close file descriptor .
10486	Close open files .
10487	Redirect a file to a stream .
10488	Set widgets on form .
10489	Import app module .
10490	Import all django project modules .
10491	Implements include node .
10492	Get the gravatar url .
10493	Get the image for a gravatar image .
10494	Checks if a path is a valid filesystem value .
10495	Check if a given URL is valid .
10496	Get the absolute path of a template file .
10497	List the contents of this bucket .
10498	Build the JSON for the worklfow task .
10499	Execute the GDX API request .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Return a new API client .
10505	List the contents of a folder .
10506	Download a file from a path .
10507	Check if a path exists .
10508	Get parent entity by path .
10509	Create a directory .
10510	Upload a file to a local file .
10511	Delete a folder .
10512	Validate the path .
10513	Create a new StorageClient .
10514	Create a new service instance .
10515	Get entity details .
10516	Set the metadata for an entity .
10517	Gets the metadata for a given entity .
10518	Updates the specified entity .
10519	Deletes the specified entity .
10520	List all projects .
10521	Get project details .
10522	Create a project .
10523	Deletes a project .
10524	Creates a folder .
10525	Get the details of a folder .
10526	Deletes a folder .
10527	Upload file content .
10528	Copy content to a file .
10529	Download file content .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Return a copy of the service with the given version .
10533	Return a copy with headers added .
10534	Return a new instance with the given params set .
10535	Returns a copy of the given exception_class .
10536	Return list display .
10537	Apply a function to each partition .
10538	Generate GVCFs for GVCFs .
10539	Run oncotator on VCF .
10540	Sort the list .
10541	Returns a list of timestamps .
10542	Load data from json .
10543	Shift t by t .
10544	Return the sum of all values .
10545	collect rfxcom
10546	Create a new user
10547	Parse vns results
10548	Parse the release results .
10549	Parse prod staff results .
10550	Parse the character results .
10551	Parse tag results .
10552	Parse user results .
10553	Create a tarball from a list of files .
10554	Given a list of file paths for all files .
10555	Copy a file .
10556	Construct the parameters for the hypervisor .
10557	Return a dict of docker - specific docker - specific parameters .
10558	Refreshes the database .
10559	Run MuTect on the DNA bams .
10560	Create a new object
10561	Return a list of streams .
10562	Export the device export directory .
10563	Search for VNDB .
10564	Parse search string .
10565	Add a new stream to the database .
10566	Resets apikey .
10567	Return a list of users .
10568	Run BWA index files
10569	Get a connection to the server .
10570	Add a stream .
10571	Adds a stream force .
10572	Insert a value into the cache .
10573	Synchronize the database .
10574	Start synchronization .
10575	Stop recording .
10576	Download a file from a URL .
10577	Uploads a job to S3 .
10578	Print a list of labels .
10579	Print the tree of the ontology .
10580	Returns the mean size of a BAM file .
10581	Get the current container id .
10582	Run STAR .
10583	Create a new document .
10584	Export the data to json .
10585	Return the device object .
10586	Get labels for an ontology .
10587	Get the hierarchy for an ontology .
10588	Main entry point for this module .
10589	Populate the parser with the given data .
10590	Return empty config file .
10591	Get the path to the mount point .
10592	Add an option to the parser .
10593	Create an argument parser .
10594	Create a pipeline command .
10595	Set authentication for wsgi .
10596	Handle an error response
10597	Perform a ping .
10598	Creates a CRUD .
10599	Update a path .
10600	Delete a path .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return list of devices .
10604	Convenience function to run cutadapt .
10605	Run fasta using samtools fasta
10606	Run samtools index
10607	This module will run sambamba markdup on a bam file .
10608	Run samblaster
10609	Mark duplicate duplicates .
10610	Run PACard sort .
10611	Run baseRecalibrator .
10612	Run kallisto .
10613	Download and run rsem .
10614	Gets the identity of the user .
10615	Send a command .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Synchronously reconnection .
10619	Resubscribe to all subscribed subscriptions .
10620	Called when the connection is opened .
10621	Called when the connection is closed .
10622	Called when a connection error occurs .
10623	Callback called when a message is received .
10624	Ensure the connection is alive .
10625	Run GATK SelectVariants to select variants .
10626	Run GATK VariantFiltration using GATK .
10627	Main VATK recalibrator .
10628	Uses GATK to apply recalibration .
10629	Combine GATK combineVariants .
10630	quickcheck a bam
10631	Load handlers .
10632	Write the configuration to a file .
10633	Reads the configuration file .
10634	Get a specific term .
10635	Search ontology .
10636	Search for suggestions .
10637	Iterate over the descendants of an ontology .
10638	Iterate over the descendant labels .
10639	Iterate over label labels .
10640	Iterate over the ontology .
10641	Convenience function to run fastqc
10642	Adds a stream to the database .
10643	Create a Flask app
10644	Start the Spark master
10645	Start a job .
10646	Start the datanode .
10647	Stops the HDFS process .
10648	Check the status of the Docker container .
10649	Tokenizes tokens stream from text .
10650	Look for a hosted zone .
10651	Fetch configuration from a zone .
10652	Merge a list of cfg chunks into a single XML file .
10653	Validate a change set .
10654	Minimize the best fitness score .
10655	Returns the fitness score .
10656	Calculate cost function .
10657	Return the median cost function for each member .
10658	Return the parameters of the processor .
10659	The list of members .
10660	Add a new parameter .
10661	Generate next generation .
10662	Normalize a dictionary of keys .
10663	Yield all environment variables .
10664	Returns a boolean indicating whether a callable is thrown .
10665	Transform a list of packages into a list of packages .
10666	Transform the result to unicode .
10667	Convert html to XHTML .
10668	Convert XHTML to HTML .
10669	Convert doc to HTML .
10670	Open an HTML document in a browser .
10671	Drop the tree .
10672	Drop a tag .
10673	Get element by id .
10674	Create CSSSelector for CSS selector .
10675	Get the members of the log .
10676	Return a dictionary of counts for the project .
10677	Check if a single class is a single class
10678	Check if a single module is a single module .
10679	Validate params .
10680	Validate id .
10681	Decode a file system path .
10682	Escape an argument spec .
10683	Return the codec name .
10684	Detect BOM encoding .
10685	Return the remote address associated with the given request .
10686	Converts an object to a number .
10687	Parse a string .
10688	Parse a file .
10689	Converts a BeautifulSoup tree into a BeautifulSoup object .
10690	Get the current traceback .
10691	Return an exception string .
10692	Render the traceback as HTML .
10693	Generate plaintext traceback .
10694	Return a list of line numbers .
10695	Render the source .
10696	Determines if the given egginfo matches the given name .
10697	Get the URL for a project .
10698	Find all versions of a project .
10699	Find an installed requirement .
10700	Sort a list of links .
10701	Returns the Content - Type for the given URL .
10702	Iterate through links .
10703	Determines whether this object is verifiable .
10704	Return a list of files that match the given package .
10705	Exclude data files from a package .
10706	Parse a requirements file .
10707	Yield lines from an iterator .
10708	Ignore comments .
10709	Compile a marker .
10710	Visit node .
10711	visit an attribute node by returning a fresh instance of it
10712	Convert a JSON string to a number .
10713	Creates a copy of the current request context .
10714	Push the context .
10715	Pop the app context .
10716	Return a copy of this request .
10717	Matches the request .
10718	Push a new request .
10719	Make relative path relative to given relative path .
10720	Determines whether a distribution is editable .
10721	Add url - value preprocessor .
10722	Add a URL default function .
10723	Registers an error handler .
10724	A decorator that provides a generator that returns a generator that yields each item in the context .
10725	Return a Flask response object .
10726	Create a URL for an endpoint .
10727	Safely join a directory .
10728	Returns the path to the root of a module .
10729	The jinja environment loader .
10730	Print the shell script .
10731	Get the cookie domain from the app .
10732	Generate a cache for a link .
10733	Return True if name is purelib .
10734	Return a list of paths to install .
10735	Check wheel compatibility .
10736	Build a single wheel .
10737	Iterate over the symbols of a code .
10738	Decorator to ensure rate limit refresh rate .
10739	Add egg info to the egg list
10740	Write delete marker file .
10741	Check if virtualenv is running under virtualenv .
10742	Returns the username of the current user
10743	Creates a distribution scheme
10744	Parse Cache - Control header .
10745	Return cached response .
10746	Cache the response
10747	Update a zipimporter cache .
10748	Load template .
10749	Install site - patch . py file .
10750	Save this file to disk .
10751	Convert a value to a dictionary .
10752	Add a list of filters .
10753	Configure a memory handler .
10754	Add handlers .
10755	Common logging configuration .
10756	Compile a script file .
10757	Temporarily override a temporary directory .
10758	Return the URL for the Git repository .
10759	Get an instance of the given argument .
10760	Generate a file based on filename .
10761	Compile templates .
10762	Return the path to the default cache directory .
10763	Find eggs in a zip .
10764	Find distributions on a path .
10765	Declare a namespace .
10766	Get the mro .
10767	Find an adapter by ob .
10768	Ensure directory exists .
10769	Iterate through all entry points in a group .
10770	Determines if a distribution can add to this distribution .
10771	Returns the best match for a given req .
10772	Evaluate a marker expression .
10773	Evaluate markerlib environment .
10774	Format log record .
10775	Formats a currency .
10776	Parse a number pattern .
10777	Converts a number to a decimal .
10778	Return the decimal precision of a number .
10779	Extract scientific annotations .
10780	Calculate total seconds .
10781	Parse a list of requirements .
10782	Return distutils class .
10783	Raises an exception if the value is not a distutils specifier .
10784	Fetches an egg for the given request .
10785	Roll dice dice dice .
10786	Converts an object into a price class .
10787	Validate price .
10788	Validate the request .
10789	Return the method of the app .
10790	Apply a method to the server .
10791	Implement the module .
10792	Determines the url rule
10793	Attach a multidict to a multidict .
10794	Make an abstract dist .
10795	Add an install requirement .
10796	Walk through all requirements to install .
10797	Check if req_to_install is installed .
10798	Create a schedule from the dependencies .
10799	Return a sorted list of namespace packages .
10800	Convert obj to JSON .
10801	Tokenize an annotation .
10802	Merge two annotations .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Serialize a list of tokens into HTML .
10806	Expand a list of tokens .
10807	Find unbalanced end .
10808	Convert a list of chunks to HTML .
10809	Flatten an HTML element .
10810	Split text into words .
10811	Return HTML tag .
10812	Return end tag .
10813	Serialize an HTML fragment into a string .
10814	Replace remove tags in document .
10815	Extract constant from code .
10816	Generate URL for cache .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Decorator to handle the return values of a function .
10821	Return a TreeWalker instance for the given tree type .
10822	Export an svn repository .
10823	Get the revision for a given location .
10824	Decorator to check the setup method .
10825	The name of the module .
10826	Propagate exceptions .
10827	Try to find the path to the instance .
10828	Update the template context .
10829	Handle an HTTP exception .
10830	Returns True if the traceback exception is False otherwise .
10831	Handle an exception .
10832	Raise the appropriate routing exception .
10833	Execute the pre - dispatch request .
10834	Return the default response for this request .
10835	Create URL adapter .
10836	Injects the default values for the given endpoint .
10837	Yields unique values preserving order .
10838	Populate the requirements key .
10839	Convert a requirement specification to a requirement string .
10840	Convert egginfo to metadata
10841	Iterate over modules .
10842	Iterate over the classes .
10843	Returns a list of all method names .
10844	Searches for a given basename .
10845	Check if a path is a module path .
10846	Recursively walk through site packages .
10847	Iterate over the paths of the module .
10848	Set default values for kwargs .
10849	Load default values from kwargs .
10850	Set multiple keys at once .
10851	Increment the value at key .
10852	Serialize object to string .
10853	Build a dict that can be used to render a request .
10854	Populate the link .
10855	Ensure that the source directory exists .
10856	Remove a temporary source .
10857	Return the distribution for this egg .
10858	Get the form data .
10859	Return the WSGI headers .
10860	r Converts a URI to a URI .
10861	r Return the path to the user cache directory .
10862	Returns the path to the user data directory .
10863	Return the path to the user log directory .
10864	Returns the path to the user - config directory .
10865	Return a list of configuration directories for this application .
10866	Iterate over all available python modules .
10867	Restart the process with reloader .
10868	Convert a string to text .
10869	Find a CA bundle .
10870	Parse a doc .
10871	Parse a stream into a DOM tree .
10872	Parse a text stream .
10873	Translate a word .
10874	Convert a dictionary into a list of tokens .
10875	Bind the server to the server .
10876	Print report .
10877	Load bytecode from file .
10878	Return a dict of stylesheet params .
10879	Run a subprocess .
10880	Get the version number for the Python version .
10881	Returns the distribution name for a given location .
10882	Find external links .
10883	Open a local file .
10884	Process a URL .
10885	Return a list of removed paths .
10886	Return a set of path info .
10887	Add a package to sitedir .
10888	Add a package to sitedir .
10889	Check if the user is enabled .
10890	Adds site - packages to the user - packages directory .
10891	Creates a quitter .
10892	Monkey patch ipcs to usembcs .
10893	Set the default encoding .
10894	Enforce global eggs after local site packages .
10895	Fix sys . path to sys . path .
10896	Run a subprocess .
10897	Check if Pyrex is installed .
10898	Convert PyX sources to Python source code .
10899	Debugging for the application .
10900	Retrieve a shared resource .
10901	Return the user agent string .
10902	Return True if name is a URL .
10903	Unpack a file from a link .
10904	Download an HTTP URL .
10905	Check if a file is downloaded .
10906	Format a currency symbol .
10907	Registers an exchange .
10908	Decode a response .
10909	Default template context processor .
10910	Render a template
10911	Render template with context .
10912	Render a Jinja2 template .
10913	Parse version string .
10914	Check if the given name is declared .
10915	Add a name .
10916	Handles an include node .
10917	Visit from import .
10918	Create a WHEL file .
10919	Execute a function f .
10920	Create a service factory .
10921	URL encode a unicode object .
10922	Return a list of wheel names matching the given requirements .
10923	Populate a requirement set .
10924	Export the package to a temporary location .
10925	Lookup an Amazon product .
10926	Iterate over pages .
10927	The ancestor of the browse node .
10928	Children of the browse node .
10929	Get an element from a path .
10930	Get the text of the given path .
10931	Get the element s date .
10932	Get price and currency .
10933	Get the list price .
10934	Sends a request to the cache .
10935	Caches the response to the cache .
10936	Make an attribute getter function .
10937	Return the title of a string .
10938	Sort a value .
10939	Group values by attribute .
10940	Map a function over a sequence .
10941	Create a logger .
10942	Compares two constants .
10943	Verify a signature .
10944	Derives a key derivation from the secret .
10945	Get the signature .
10946	Sign a value .
10947	Verify a signature .
10948	Unign a signed value .
10949	Sign a value .
10950	Validate a signed value .
10951	Returns a string representation of the object .
10952	Return a JSON - RPC error
10953	Find packages in a given location .
10954	Require all parents of given packages .
10955	Yields all files under base_path
10956	Prepare the response body .
10957	Unign a RECORD file .
10958	Unpack a wheel file
10959	Install the distribution scripts .
10960	Sorts the graph
10961	Creates a redraw canvas .
10962	Get a node by ID .
10963	Make sure that the graph has changed .
10964	Add new edges to the graph .
10965	Called when a component has changed .
10966	Handles the left click .
10967	Called when the diagram canvas has changed .
10968	Clears the diagram .
10969	This method is called when a domain model is changed
10970	Map the domain model to a new graph .
10971	Unmap a model .
10972	Map an element to an xdot .
10973	Set node style .
10974	Parse LDOT data .
10975	Process a pen .
10976	Process an ellipse .
10977	Process a Polygon .
10978	Process a Polyline .
10979	Constructs a Text component
10980	Process an image .
10981	Render a GridFS file .
10982	Save the dot file .
10983	Load the dot file .
10984	Determines if a point is within a bounding box .
10985	Draw the bounds .
10986	Execute a new graph
10987	Connect to the SQLAlchemy database .
10988	Parse the dagot_code .
10989	Create a new graph .
10990	Open file dialog
10991	Save the model .
10992	Save the graph as a file .
10993	Configure the model .
10994	Configure nodes .
10995	Configure the edge model .
10996	This function is called when the user wants to edit .
10997	Add a node to the graph .
10998	Add an edge .
10999	Add a subgraph .
11000	Add a cluster .
11001	Request a graph .
11002	Edit options .
11003	Configure the dot code .
11004	Callback called when the user exits .
11005	Moves the polygon to the origin
11006	Save the model to a file - like object .
11007	Load from a file - like object .
11008	Save this object to a file .
11009	Load an instance from a file .
11010	Creates a property .
11011	Parse a given file .
11012	Return start words .
11013	Add a new Markov chain .
11014	Remove a chain from the chain .
11015	Build chain from source .
11016	Generate a sentence
11017	Create a program .
11018	Add a node to the graph .
11019	Removes a node from the graph .
11020	Get node by ID .
11021	Delete an edge .
11022	Add an edge to the graph .
11023	Add a subgraph .
11024	Called when a program is changed
11025	Set the list of nodes in the graph .
11026	Parse a DOT file .
11027	Parse a DOT file .
11028	Build top graph .
11029	Build a graph from a list of tokens .
11030	Get the units and units of a given number of seconds .
11031	Format a duration .
11032	Initialize the editor .
11033	Create the ui .
11034	Splits a sequence into n elements .
11035	Iterate over windows of a given length .
11036	Main application .
11037	Get the children of an object .
11038	Append a child to the graph .
11039	Insert a child .
11040	Remove a child from the graph .
11041	Called when an object is removed .
11042	Triggered when child changes
11043	Get the label for an object .
11044	Set label on object .
11045	Triggered when a label has changed .
11046	Initialize the graph
11047	Update the editor .
11048	Add listeners .
11049	Remove nodes from the tree .
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Replace edges with old .
11053	Called when an edge has changed .
11054	Add edges to the graph .
11055	Parse an xdot directive .
11056	handle drawing
11057	Return a Node instance for the given row_factory .
11058	Create an edge factory .
11059	Prepare the database for the database .
11060	Parse the drawing direction .
11061	Parse the label direction .
11062	Handle drawing changes .
11063	Callback called when a new position changes .
11064	Callback called when the button changes .
11065	Redraw the right button .
11066	Prints highlighted style .
11067	Draw main layer .
11068	Determines if a point is in a polygon .
11069	Draw main layer .
11070	Handles an event .
11071	Run the worker .
11072	Returns full URL for full page .
11073	Renders the next link .
11074	Render seo links .
11075	Determines whether the candidate content type matches the given pattern .
11076	Select a specific content type .
11077	Rewrite a URL .
11078	Remove a URL from a URL .
11079	Create URL identifier .
11080	Normalize host .
11081	Find all modules in a directory .
11082	r Find all modules in a directory .
11083	List all modules in a given path .
11084	List all classes in mname .
11085	list all classes in a module
11086	Ensure directory exists .
11087	Put contents into a blob .
11088	Validate a card number .
11089	Determines the version of the git .
11090	Load a module .
11091	Add a path .
11092	Find a module by path .
11093	Split a line into a list of lines .
11094	Remove all namespace tags .
11095	Determines the consistency of the package .
11096	Create an instance from a YAML specification .
11097	Merge this dict into a new dict .
11098	Execute all actions in the specified directory .
11099	Create an instance from a YAML configuration .
11100	Prints the details of a request .
11101	Emit a record .
11102	Add image rendition context .
11103	Log the number of attempts for a given key .
11104	Add url to queue .
11105	Initialize the workers .
11106	Set the value of a key .
11107	Get a value from KVStore .
11108	Get a list of items from KVStore .
11109	Return the index of a k .
11110	Delete a KVStore .
11111	Plot a heatmap of feature importance .
11112	Adds a number of months to the given timestamp .
11113	Add a number of months to a date .
11114	Checks if the given day is a Christmas period .
11115	Set the music service name .
11116	Use a storage service .
11117	Read data from CSV file .
11118	Load a list from a JSON file .
11119	Write data to a JSON file .
11120	Filter rows by label .
11121	Calculate the mean of a data label .
11122	Calculate the feature importance .
11123	Restore data from DB .
11124	Merge two dictionaries .
11125	Decorator to make a function callable .
11126	Decorator to add a method to a function .
11127	Find all registered blocks .
11128	Verifies that a block is registered .
11129	Registers a block .
11130	Unregisters a block .
11131	Converts a file to MP3 .
11132	Return a reasonable version string .
11133	Handle SSL redirect .
11134	Initialize celery task .
11135	Queues an email .
11136	Parse the Accept header .
11137	Parse the cache control section .
11138	Parse content type .
11139	Parse a forward header value .
11140	Parse comma separated list .
11141	Parse a list of parameters .
11142	Resize an image to fit the given width .
11143	Add a value .
11144	Download a YouTube file .
11145	Connect to Google API .
11146	Upload a file .
11147	Connect to the music .
11148	Write the parameters to a file .
11149	Update the sky filenames .
11150	Read AHI absorption from a file .
11151	Scale a phi .
11152	Read PureWater absorption from a file .
11153	Read Pure water scattering from a file .
11154	Read IOP file .
11155	Write iop to file .
11156	Build the b .
11157	Build the absorption .
11158	Build total attenuation C .
11159	Build all iOPs from IOPs .
11160	Set the parameters for the parameters .
11161	Read a parameter file into a dictionary .
11162	Convert a string to a list of floats .
11163	Read data from a PR report file .
11164	Set the handler for signals .
11165	Process a signal .
11166	Default handler .
11167	Pauses a signal .
11168	Handle an abort request .
11169	Set the status of a signal .
11170	Unregisters an event .
11171	Fetch a single metric
11172	Fetch a metric
11173	Return a list of items from an iterable .
11174	Print an item to stdout .
11175	Pretty print a list of items .
11176	Set the signature from a function .
11177	Set a partial signature from a partial instance .
11178	Return a copy of this argument with extra arguments .
11179	Check for missing metainf files .
11180	Return the key for a file .
11181	Convert vlq to int .
11182	Read table .
11183	Parse the header .
11184	Convert seconds to seconds .
11185	Print the details of the game .
11186	Return a dictionary of data .
11187	Opens the search result .
11188	Write the BatchFile to a file .
11189	Perform the data processing .
11190	Display the graphic connection .
11191	Print the graphic information .
11192	Display error message .
11193	Hide error message .
11194	Run planarrad .
11195	Cancel the planarrad .
11196	Quit the planarRad .
11197	Save the figure .
11198	Open log file .
11199	Open the documentation .
11200	Sets up prior actions .
11201	Handles the click event .
11202	Handle mouse move event .
11203	Display the target .
11204	Create a new lockset .
11205	Sign a private key .
11206	signature not deterministic
11207	Or or one or one of quorum no quorum quorum .
11208	In the IOU fungible the supply is set by Issuer .
11209	highest lock on height
11210	the last block proposal node voted on the block proposal
11211	highest valid lockset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring see utils
11215	Calculate the delay of a packet .
11216	deliver on edge of timeout window
11217	create an object which acts as a proxy for the contract on the chain on the chain on the chain .
11218	returns class on msg unafe use using x . im .
11219	registers NativeContract classes
11220	returns True if unknown
11221	receives rlp decoded serialized serialized
11222	Convert an image from VGG .
11223	Convert an image to VGG .
11224	Returns the F layer for the given layer .
11225	Get the output of a layer .
11226	Get the features for each layer .
11227	Create a key file .
11228	Mark the bulk load as finished .
11229	Read from file .
11230	Put items into the collection .
11231	Release the table .
11232	The tables for this target .
11233	Compile the C compiler .
11234	Find the path to the server home .
11235	Get a value from the configuration .
11236	Set a configuration value .
11237	\ x1b [ 1mNAME \ x1b [ 0m table
11238	Execute a command .
11239	Get a value from a key .
11240	Write the default configuration to a file .
11241	Set the column filter .
11242	Writes the metadata to an archive .
11243	Returns a string representation of the object .
11244	Convert string to float .
11245	Convert a string to a dictionary of strings .
11246	Parse device settings .
11247	Wrap given text into a string .
11248	Detect devices .
11249	Set the center frequency .
11250	Calculate the result of a given state .
11251	Wait for the process to finish .
11252	Update the PSF state .
11253	Read data from file .
11254	Write the header to file .
11255	Submit a request to the queue .
11256	Return the number of times to repeat a given time .
11257	Calculate frequency for a given frequency range
11258	Create a buffer .
11259	Setup the stream .
11260	Stop streaming stream .
11261	Set the PSD state .
11262	Performs a sweep .
11263	Set the address .
11264	Run CMake .
11265	Return a subset of the datetimes that match the given number .
11266	Return a new datetime with the given offset .
11267	Return a new week with the given date .
11268	Converts a list of datetimes to keep only the specified number of seconds .
11269	Convert a list of datetimes to keep only keep records .
11270	Convert a list of dates to keep keeping only the given dates .
11271	Convert dates to delete .
11272	Get the SPI control byte .
11273	Read a single bit value .
11274	Write a single bit value .
11275	Return the bit number of a given bit pattern .
11276	Watch the port events for a given port .
11277	Process function calls .
11278	Create a GPIOInterrupt into the user - agent .
11279	Set the edge of a GPIO edge .
11280	Waits until a file exists .
11281	Register a pin function .
11282	Deregisters a pin function .
11283	Enables or disables the gpio interconnect .
11284	Send a SPI message .
11285	Render a form .
11286	Check if the form has any errors .
11287	Render a link .
11288	Extract version from package .
11289	Generate keyword arguments for the form .
11290	Check the status of a response .
11291	Perform a GET request .
11292	Get a file link .
11293	Upload a link to a folder .
11294	Upload a file to a folder .
11295	Perform a remote upload .
11296	Get remote upload status .
11297	List a folder .
11298	Retrieve a list of running conversions for a folder .
11299	Calculate humidity .
11300	Calculate dewpoint .
11301	Publish a message .
11302	Convert data to CRC .
11303	Verify VPCCRC
11304	Unpack storm date .
11305	Determines if a revision is used to reconstruct the archive .
11306	Wake up the weather station .
11307	Send a command .
11308	send DMPFT command
11309	Get the list of dictionaries that need to be updated .
11310	Parse the archive .
11311	Update weather data .
11312	Initialize logging .
11313	Return a list of public services .
11314	Get the wind speed .
11315	Set weather data .
11316	Set the debug flag .
11317	Publish data to file .
11318	A decorator to indicate whether the user wants a request .
11319	Initialize the application .
11320	Fulfill the specified requirements .
11321	Push the current context .
11322	Remove a context from the stack .
11323	Temporarily override this element .
11324	Push this context onto the stack .
11325	Remove the current context from the stack .
11326	Context manager for adding additional elements .
11327	Unplicate field names .
11328	Interpret the results .
11329	Extract params from query string .
11330	Run a query and return the results .
11331	Returns a pandas DataFrame
11332	Return a NetworkX graph representing the graph .
11333	returns a pie object
11334	Plot the data .
11335	Plot bar chart .
11336	Return a csv representation of the field .
11337	Decorator to check if a user is required for a given permission .
11338	Add the context data to the context .
11339	Return a list of all widgets sorted by position .
11340	Returns a list of all widgets that need to be updated .
11341	Register a widget in the Dashboard .
11342	Unregister a widget .
11343	Get the last update of this dashboard .
11344	Get a setting by name .
11345	Save a setting .
11346	Determines if the update should be updated .
11347	Create an array of xarray objects .
11348	Create a ConstructSpark object .
11349	Concatenate two Spark arrays .
11350	Check if arguments are valid
11351	Helper function to format axes .
11352	Wrap a function into a BoltArraySpark .
11353	Align the given axes .
11354	Convert to Spark array
11355	Return the TordD of this TimeSeries .
11356	Stacks a list of RDDs into a single RDD .
11357	Apply a function to each RDD .
11358	Return a chunk of data .
11359	Apply a function over this RDD .
11360	Return a new BoltArraySpark .
11361	Generate a plan from the data .
11362	Remove padding .
11363	Return the number of chunks in a plan .
11364	Return a list of slices for a given plan .
11365	Convert a list of indices into a numpy array .
11366	Repartitions the RDD .
11367	Return a new RDD with stacked data .
11368	Align the given axis to the given axis .
11369	Return the first item in the array .
11370	Generate statistics for the given axis .
11371	Calculate the mean of an axis .
11372	Calculate the variance .
11373	Return the standard deviation .
11374	Calculate the sum over each axis .
11375	Return the maximum value of the histogram .
11376	Return the minimum value of each axis .
11377	Return a chunked chunk of this array .
11378	Swap a barray .
11379	Transpose the array .
11380	Swap two axes .
11381	Reshape keys and values .
11382	Reshape the given shape .
11383	Remove all elements from the array .
11384	Return a copy of the array with the given dtype casting .
11385	Clip this RDD with the specified bounds .
11386	Convert the RDD to a numpy array .
11387	Convert an argument to a tuple .
11388	Convert a list of arguments into a tuple .
11389	Reshape an ndarray .
11390	Check if two arrays are equal .
11391	Flatten a list of lists .
11392	Slice slice .
11393	Check if two axes are transposeable .
11394	Determine whether new is reshapeable .
11395	Concatenate a list of lists .
11396	Expand an array of dimensions .
11397	Return a new RDD with each element in the RDD .
11398	Return a wrapped function .
11399	Return a ConstructLocal object for the given arguments .
11400	Reshape the array .
11401	Return a new BoltArraySpark .
11402	Reshape a vector .
11403	Return a copy of this BoltArray .
11404	Creates a new Numpy array .
11405	Construct a NumPy array with zeros .
11406	Concatenate multiple arrays .
11407	Calculate discrete likelihood .
11408	Calculate the best - likely alpha for the given data .
11409	Compute the value of discrete alpha .
11410	Calculate the discrete alpha for the given data .
11411	Compute the discrete alpha for the discrete model .
11412	Plot the log - likelihood distribution .
11413	Calculate the log likelihood .
11414	Sanitize HTML .
11415	Configure analytics .
11416	Return a list of tagged tags .
11417	Return the MD5 hash of the key .
11418	Calculate the SHA256 hash .
11419	Generate a SHA512 hash .
11420	Parse a byte string .
11421	Decode a public key .
11422	Parse the options .
11423	Process an RSA public key .
11424	Process an SSH DSS message .
11425	Parse the ECDSA key .
11426	Processed ed25516 data .
11427	Parse an SSH2 public key .
11428	Simulate a step .
11429	Execute a step .
11430	A list of mechs .
11431	Store a GSS - like object .
11432	main entry point for instantiation
11433	Initialize setuptools .
11434	Context manager to create a wave file .
11435	Return HTML for h5bp .
11436	Normalize djFRONTEND .
11437	Return HTML for CSS stylesheet .
11438	Return the HTML for the Django frontend .
11439	Return HTML for django . js . js
11440	Generate the JFRONTEND UI .
11441	Generate Jquery Jquery Jquery Jquery_jquery_jquery_jquery_jquery_jquery_jquery_jeries
11442	Generate CSS for Jquery Jquery Datatables .
11443	Generate the HTML for the JQuery data tables .
11444	Generate the JFRONTEND_JFRONTEND_JINTRY_JINTS .
11445	Returns the js page to scroll to the given version .
11446	Generate jquery_smooth_scroll
11447	Return the CSS for the stylesheet .
11448	Creates a JDFRONTEND G .
11449	u render textarea .
11450	Generate authentication hashes for a given user .
11451	Calculate the time in seconds .
11452	Generate a token for a user .
11453	Serialize the user .
11454	Deserialize profile .
11455	Update a profile .
11456	Called when user login failed
11457	Validate a user .
11458	Check if the request is secure .
11459	Return a user s username
11460	Create a new user
11461	Logs a user .
11462	Logout the user .
11463	Logs a user .
11464	Authenticate with a user .
11465	Logs a user with a resume token .
11466	Change a user s password .
11467	Sends a new password .
11468	Reset a user s password .
11469	Merge two dicts .
11470	Read the contents of a file .
11471	Get the META id for an object or model .
11472	Get a list of objects for a given model .
11473	Get the object_id for a given model .
11474	Get object ids for a given model .
11475	Get an object by the given identifier .
11476	Set the defaultward for the given operation .
11477	Set the reverse of a model .
11478	Truncate all models .
11479	Truncate the database forward .
11480	Truncate the database .
11481	Initialize the build options
11482	Finalize options .
11483	Build the meteor app .
11484	Convert a path to a directory .
11485	Seed the given values .
11486	The state of the machine .
11487	Generate a random string .
11488	Decorator for adding API endpoints .
11489	Iterate over API endpoints .
11490	Clear API path map cache .
11491	Pretty print a value .
11492	Validate keyword arguments .
11493	Called when the connection is opened .
11494	Called when a connection is closed .
11495	Called when a message is received .
11496	Yield DDP frames from a message .
11497	Process a PDP message .
11498	Dispatch a message .
11499	Receive a connection .
11500	Receive a ping .
11501	Receive a sub
11502	Receive a unsub message .
11503	Receive a method .
11504	Yields json response .
11505	Run DDP server .
11506	Main entry point .
11507	Print a message to stdout .
11508	Stop the Postgres server .
11509	Run Postgres greenlet .
11510	Run Postgres greenlet .
11511	Poll for notifications .
11512	Monkey patch the psycopg2
11513	Generate a random ID .
11514	Autodiscover API .
11515	Return a dict representation of the error .
11516	Get a reference to a factory .
11517	Log a record .
11518	Creates a negotiation middleware .
11519	Add a route to the application .
11520	Add a resource object .
11521	Run the application .
11522	Send a gcm message
11523	Sends an apns message .
11524	Fetch inactive_ids from apns .
11525	Send a GCM message
11526	Sends a GCMM message
11527	Send data to GCMPush .
11528	Send a request to the API .
11529	Get a model from a module .
11530	Fast forward selection algorithm .
11531	Search Giphy API .
11532	Translate Giphy Giphy .
11533	Get a listing of trending tweets .
11534	Get a gif .
11535	Creates a screensaver
11536	Upload a file to Giphy .
11537	Normalize data .
11538	Execute a request against the API endpoint .
11539	Translate a GIF .
11540	Get a generator of the trending images .
11541	Get a gif by id .
11542	Upload a gif .
11543	Build an access control element .
11544	Authenticate the user .
11545	Upload a video .
11546	Check the status of a video .
11547	Update a video .
11548	Delete a video .
11549	Check if video is available .
11550	Get a video .
11551	List videos .
11552	Upload a video to zuqqa .
11553	Upload a video .
11554	Redirect to a video .
11555	Remove video from video_id .
11556	Retrieve the video .
11557	Save a video .
11558	Method to delete a video
11559	Update the metadata .
11560	Update a metadata field .
11561	Update this item .
11562	Parse a string .
11563	Return a string representation of a tree .
11564	Load data from a file .
11565	Read a file .
11566	Parse a node .
11567	Create a new node .
11568	Create a newick
11569	Return ASCII art .
11570	Returns the node with the given label .
11571	Prune the tree .
11572	Resolve Polytomies .
11573	Remove internal names .
11574	Remove leaf names .
11575	Decorator to check if user is authenticated .
11576	Tries to dispose a JSON string .
11577	Require a setting for this application .
11578	Get an argument by name .
11579	Return a list of arguments .
11580	Execute a callback .
11581	Get a cookie .
11582	Clear a cookie .
11583	Redirect to the OpenID URL .
11584	Get the authenticated user .
11585	Create OAuth request parameters .
11586	Redirect the user to the OpenID gateway .
11587	Send a Facebook request to Facebook .
11588	Get an authenticated user .
11589	concatenate url
11590	Parse the header .
11591	Add a new HTTP header .
11592	Get a list of HTTP headers .
11593	Parse a line .
11594	Parse headers .
11595	Normalize the HTTP header .
11596	Encode a string as UTF - 8 .
11597	Convert value to unicode .
11598	Converts a value to a basestring .
11599	Recursively convert unicode objects to unicode .
11600	Setup authentication plugin .
11601	Iterate over subclasses of this class .
11602	Based on the matching strategy and the origin and origin and origin .
11603	Calculate the occupancy of a grid
11604	Write a gro file .
11605	Write a PDB file .
11606	Determines the number of molecules in a molecule .
11607	Resize the holes for a given protein .
11608	Write top molecules to a file .
11609	Iterate over the given resource .
11610	Message a user .
11611	Sends a message to users
11612	Get all messages from a user .
11613	Processes a response .
11614	Update config file .
11615	Verify a profile name .
11616	Retrieve data from config .
11617	Extract pwd from config .
11618	Update config data .
11619	Update the user s configuration .
11620	Create a config profile .
11621	Displays required items .
11622	Get data from user .
11623	Convert a message type to a dict .
11624	Configure a profile entry .
11625	Write data to file .
11626	Write an auth message .
11627	Add attachments .
11628	Sends a message .
11629	Send a message .
11630	Create a message type from a message type .
11631	Decorator to add credential property .
11632	Validate a property .
11633	Validate input .
11634	Validate Twilio attribute .
11635	Validate SlackPost .
11636	Validate a whats app .
11637	Sends a coroutine .
11638	Add a message .
11639	Get the body of a file .
11640	Trim keyword arguments from kwds
11641	Send message .
11642	Get the id of a chat .
11643	Send content .
11644	Sends the message .
11645	Returns the SMTP server for the given address .
11646	Generate email .
11647	Add message header .
11648	Add the message body .
11649	Add attachments .
11650	Get an SMTP session .
11651	Get an SMTP SSL object .
11652	Create a SMTP Session object .
11653	Send email .
11654	Save the tag to file .
11655	Unloads the image .
11656	Get a region of the image .
11657	Validate the key .
11658	Clears the internal state .
11659	Write this object to a file .
11660	Read the file .
11661	Delete the chunk .
11662	Resize the data .
11663	Insert a new chunk .
11664	Save ID3 file .
11665	Delete the file .
11666	Parse a file .
11667	Process a normal line .
11668	Add a source block .
11669	Draw a string from a string .
11670	Parse ISO8601 time string .
11671	Convert a list of words into HTML .
11672	Convert a word to an HTML word
11673	Generate html para .
11674	Generate an HTML code block .
11675	Converts a list of items into HTML .
11676	Save the metadata to a file .
11677	Update parent state .
11678	Run the game .
11679	Register a product .
11680	Get the registered controller .
11681	Registers a freeform key .
11682	Calculate the HMAC - SHA1 for a string .
11683	Generate request headers .
11684	Send a request .
11685	Send GET request .
11686	Send a POST request .
11687	Send DELETE request .
11688	Parse a value as a string .
11689	Send a request .
11690	Perform autopaginating request .
11691	List all hosted zones .
11692	Create a new hosted zone .
11693	List resource record sets for a zone .
11694	Change a resource record set .
11695	Draw an image
11696	Draw an image region
11697	The total number of packets in the packet .
11698	Replace old_pages with new_pages .
11699	Find the last page of a given serial .
11700	Set the section .
11701	Add a DocMarkdown instance to the DocMarkup object .
11702	Process markups .
11703	Return the markup for the given tag name .
11704	Create a new hosted zone writer .
11705	Lock a file - like object
11706	Insert bytes into a file .
11707	Delete a file - like object .
11708	Convert data to UTF - 8 .
11709	Adds a change to a record .
11710	Parse a JSON - RPC response .
11711	Measure the width of a string .
11712	Returns True if the model has been modified .
11713	Delete this record .
11714	Creates a new record set .
11715	Parse ID3v1 tag .
11716	Make a v1 v1 v1 v1 tag .
11717	Read data from the file .
11718	Delete all keys matching the given key .
11719	Called when a frame is loaded .
11720	Update common photos .
11721	Update the V24 header .
11722	Unloads the sound .
11723	Play a sound .
11724	Sets the loop points .
11725	Parse glyph values .
11726	Filter Glyph names .
11727	Dump an encoding table to a file .
11728	Dump an array to a string .
11729	NAME postscript . py
11730	Check if a file exists .
11731	Return a list of file names .
11732	Parse a hosted zone .
11733	Parse a delegation set .
11734	Convert a list of blocks into a byte string .
11735	Groups a list of blocks into a single block .
11736	Delete metadata blocks .
11737	Save metadata to file .
11738	Parse an RRSet alias .
11739	Parse a list of rrset record values .
11740	Parse an RRSET tag .
11741	Delete the hosted zone .
11742	Add a record .
11743	Create a new record .
11744	Create a new AAAARESource record .
11745	Create a CNAME record .
11746	Create a new record .
11747	Create a DNS record .
11748	Create a new PTR resource record .
11749	Create a new SPF resource record .
11750	Create a DNS record .
11751	Create a new TXT record .
11752	Registers a TXXX key .
11753	Get initial values for a change .
11754	Writes a change .
11755	Create a change record set .
11756	Initialize logging .
11757	Return an alias for an item .
11758	Freeze a dictionary
11759	Join HTML attributes .
11760	Initialize the app .
11761	Initialize the bars .
11762	Bind a bar to this bar .
11763	A dictionary of arguments to be passed to the constructor .
11764	The URL for this request .
11765	Determines if the request is currently currently currently running .
11766	Validate a metric class .
11767	Get a specific stat by name .
11768	Calculate statistics .
11769	Auto - discover INSTALLED_APPS .
11770	Return a csv representation of a metric .
11771	Reset maintenance information .
11772	Get a GET array from a GET variable .
11773	Get a boolean value from a request .
11774	Gets the next colour .
11775	Get gecko parameters .
11776	Displays the number widget .
11777	Displays a geckoboard widget .
11778	Return a line chart for the gecko .
11779	Calculate geckometer .
11780	Return a list of metrics for a gecko client .
11781	Return the list of active gadgets .
11782	Register a new gadget .
11783	Return context data .
11784	Print error message .
11785	Validate that the given data is valid .
11786	Prompt the user for a long line .
11787	Display list input .
11788	Prompt the user to input a file .
11789	Get the schedule for a particular year .
11790	Returns the winner of the game .
11791	Returns the year .
11792	Returns a pandas DataFrame of the starters .
11793	Returns the surface of the game .
11794	Returns the coinoss .
11795	Get weather information .
11796	Return information about the team .
11797	List the games .
11798	Return a pandas DataFrame containing the league standings .
11799	Returns a table of the team s stats .
11800	Returns the R voting table .
11801	Return a pandas DataFrame containing the line scores .
11802	Returns the year .
11803	Get player stats .
11804	Decorator to switch to given directory path .
11805	Decorator for caching a cache .
11806	Return a key for a class instance .
11807	Memoize a function .
11808	Get the birth date of the family .
11809	Returns a pandas DataFrame containing a stats table .
11810	Get stats per game .
11811	Retrieves the stats table .
11812	Get stats per hour .
11813	Get per - 100 per - 100 per - 100 per - 100 .
11814	Get stats about the advanced stats .
11815	Gets the statistics for a single shot .
11816	Retrieves statistics about the advanced protobuf .
11817	Return a pandas DataFrame representing the game s games .
11818	Get session data .
11819	Given a DataFrame returns a Pandas DataFrame containing the details of the dataframe
11820	Add the team s features to the team .
11821	Add features to a DataFrame .
11822	Calculate initial Win .
11823	Returns a pandas DataFrame of the most recent games .
11824	Displays a simple year .
11825	The name of the team .
11826	Returns a pandas DataFrame of the box scores for the given year .
11827	Return the pq for a given year .
11828	Return a list of head coaches for a given game .
11829	Create a DataFrame representing the schedule .
11830	Return the Off Coordinator .
11831	Return the defensive coordinator .
11832	Retrieve information about a football team .
11833	Returns the effective scheme for the given year .
11834	Returns the DEFignment for the given year
11835	Returns a DataFrame with split splits for the given year .
11836	Return HTML for given URL .
11837	Flatten links in a timeline .
11838	Convert a rel to a string .
11839	Convert a dictionary of kwargs to a query string .
11840	Read data from a stream .
11841	Return a reference to the read queue .
11842	Get a direct copy of the queue .
11843	Close the queue .
11844	Load an example node .
11845	Get a block of keepder data .
11846	Get a queue from the pipeline .
11847	Return a generator for the queue .
11848	Parse a PLY XML file .
11849	Dump objects to a file .
11850	Read a varint .
11851	Generator that yields objects from the file .
11852	Flush the stream .
11853	Write objects to the buffer .
11854	Flush the stream .
11855	Return the path to the game s directory .
11856	Performs keyboard input on the keyboard .
11857	Creates a fake movie .
11858	Eager evaluation of traits .
11859	Waits until a condition is reached .
11860	Waits until an element is present .
11861	Add a set of ignored_exceptions to this object .
11862	Return the main volume .
11863	Return the main source .
11864	Send a message to the connected device .
11865	Return the status of the device .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Select a source
11870	Decrypt a request .
11871	Calculate CRC for plaintext .
11872	Encrypt a value .
11873	Print missing schema .
11874	Return a list of links .
11875	Check if song name exists .
11876	Parse a song .
11877	Generate a Google search URL .
11878	Parses a google page .
11879	Parses a song .
11880	Download the given url and print the response
11881	Download a file using requests .
11882	Download a file using wget
11883	Finds station IDs by city name .
11884	Get location observation .
11885	Parse an observation response .
11886	Get an observation for a given station .
11887	Return a list of search paths .
11888	Returns a list of compiled compiler extensions .
11889	The mimetype .
11890	Returns the compiler mimetype .
11891	Returns the compiler format extension .
11892	Register a mimetype .
11893	Unregister a given mimetype .
11894	Returns a list of paths for the search .
11895	Register default values .
11896	Imports QtCore .
11897	Return the netnode for the meta node .
11898	Add a netnode plugin .
11899	Delete Netnode plugin .
11900	Import QSettings from settings .
11901	Export QSettings to a QSettings object .
11902	The directory for this plugin .
11903	Iterate over the keys in the system .
11904	Simple API error handler .
11905	Get a DynamoDB table
11906	List tables .
11907	Fetch data for a given category .
11908	Generate a metadata identifier for a given item .
11909	Return the timestamp of the metadata for the given item .
11910	Fetch the owner of a crate .
11911	Fetch the owner of a crate .
11912	Fetch version information for a crate .
11913	Fetch the version download for a crate .
11914	Fetch data for a crate .
11915	Return a summary of the report .
11916	Get a list of crates .
11917	Get a crate by its id .
11918	Get a specific crate attribute .
11919	Fetch items from a page .
11920	Fetch data for given category .
11921	Fetch questions at the given URL .
11922	Get questions .
11923	Fetch data for given category
11924	Calculate the updated metadata for a given item .
11925	Determine the metadata category .
11926	Get items from ReMo .
11927	A list of buffer dictionaries .
11928	The priority of the IOCB .
11929	Close the queue .
11930	Submit a list of blocks .
11931	Cancel an event .
11932	Cancel all submissions .
11933	Return the number of events in the queue .
11934	Fetch categories
11935	Retrieve all cells .
11936	Parse the feed .
11937	Returns a list of formats for the given process type .
11938	Get permission factory .
11939	Create blueprint .
11940	Create a URL rule .
11941	Record a record .
11942	r Default view method .
11943	r Export a record .
11944	Calculate time callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment a metric .
11948	Set a timing .
11949	Add a timestamp to the timer .
11950	Set a gauge .
11951	Add a gauge to the gauge .
11952	Set the value of a metric .
11953	Batch request .
11954	Creates a BatchClient for the given size .
11955	Return an instance of the unit client .
11956	Flush the cache .
11957	Create a valid permission checker .
11958	Create a new TCP client .
11959	Flush all messages .
11960	Creates a TCP client .
11961	Create or update a user .
11962	Interpret x as an OpenMath object .
11963	Converts a term into an OpenMath term .
11964	Converts an object into a Python object .
11965	Convert obj to OpenMath .
11966	Register to openmath converter .
11967	Serialize a register to a Python register .
11968	Initialize redis instance
11969	Yields all valid choices .
11970	Split the kwargs into a dictionary of model fields .
11971	Decorator to register a field type .
11972	Create a value from the registry instance .
11973	Create a default form for a form .
11974	Decorator to specify a random attribute .
11975	A decorator that adds a random choice to a field .
11976	Return a string representation of a decimal field .
11977	Return a string representation of an email field .
11978	Generate a random date .
11979	Generate a random datetime .
11980	Return a string representation of a float field .
11981	Return a string representation of an integer field .
11982	Generate a random time .
11983	Generate a random choice field .
11984	Generate a random choice field .
11985	Return a random model field .
11986	Encode an object as XML node .
11987	Publish package .
11988	Tag git .
11989	Decorator to make a random field blank
11990	Load python module .
11991	Build an instance .
11992	Get OMList list .
11993	Creates a Tmtuple object .
11994	Decode bytes .
11995	Encode the given data .
11996	Convert a number to a fixed precision .
11997	Format a number .
11998	Format number as money .
11999	Unpack data into numpy array .
12000	Unpack a blosc array into a compressed array .
12001	Add a workspace .
12002	Remove a workspace .
12003	List workspaces .
12004	Return the widget with the given name .
12005	Check if a repository exists .
12006	Syncs the workspace .
12007	Clone a repository
12008	Check the version of ndio .
12009	Convert a numpy array to voxels .
12010	Convert a list of voxels into a numpy array .
12011	Prints a workflow .
12012	Print an update for a repository .
12013	Set the console handler .
12014	Execute a command .
12015	Load image from file .
12016	Save a numpy array to a file .
12017	Save the collection to a file .
12018	Print a workspace .
12019	Print the status of a repository .
12020	Get the block size .
12021	Post - cut - cut - cut - out cutout .
12022	Load image from file .
12023	Save a tiff image .
12024	Load data from a tiff file .
12025	Write the configuration to a file .
12026	Clone this file .
12027	Get the version of Yoda .
12028	Combine a name and match .
12029	Print an option .
12030	Get reserve ids for a given channel .
12031	Merge multiple ids
12032	Propagate a data channel .
12033	List all projects in a dataset .
12034	Get information about a dataset .
12035	List available datasets .
12036	Parse the subparser .
12037	Execute the workflow .
12038	Display a workspace .
12039	Prints a list of all workspaces
12040	Return the URL for the given endpoint .
12041	Guess the format from a file extension .
12042	Open an image .
12043	Convert input file to output format .
12044	Build a graph from the given site .
12045	Compute invariants for the graph .
12046	Convert a graph to a file .
12047	Convert a list of ramons into a dictionary .
12048	Convert a python type to RAMON type .
12049	Delete a channel .
12050	Add a dataset .
12051	Return a JSON representation of the dataset .
12052	Return a dictionary representation of the dataset .
12053	Return a dictionary of channel data .
12054	Return a dict representation of a project .
12055	Identify image sizes .
12056	Upload data to ndio .
12057	Find the path of a workspace .
12058	Returns a list of public tokens .
12059	Get information about a specific project .
12060	Set the OTP metadata .
12061	Get request URL .
12062	POST a url
12063	Delete a URL .
12064	Load an hdf5 file .
12065	Save an HDF5 file .
12066	Infer gaps in a tree
12067	Recover a Nvim implementation .
12068	Install jingo translation .
12069	A context manager that yields a free state .
12070	Returns the percentage of the given part .
12071	Get stats for a specific server .
12072	Get the number of slices for the server .
12073	Return a dict of context data .
12074	Return the server status .
12075	Displays a Memcache dashboard .
12076	Return stats for a specific server .
12077	Displays the slabs for a given server .
12078	Return a human - readable representation of the given value .
12079	Searches for a ConfigFile .
12080	Add a directory .
12081	Apply config to fpath .
12082	Path of the file .
12083	Read the contents of the file .
12084	Write data to file .
12085	Configure logging .
12086	Create the file .
12087	Applies the config to this path .
12088	Path of the file .
12089	Remove this directory .
12090	Prepares the environment .
12091	Removes all children .
12092	Convert a path to a path .
12093	Returns a list of all the files in the directory .
12094	Write data to a file .
12095	Read the contents of a file .
12096	Add a new file .
12097	Save configuration to file .
12098	Load yaml file .
12099	Removes the file if it exists .
12100	Load plugins from a directory .
12101	Recursively update nested dictionaries .
12102	Create a child node .
12103	Resolve the path of the node
12104	Get the value of the container .
12105	Update this ConfigNode .
12106	Load the configuration .
12107	Converts a config node to a string .
12108	Build the URL for the given request .
12109	Process input .
12110	Send data to the socket .
12111	Sends an RPC request .
12112	Read data from socket .
12113	Write data to a socket .
12114	Wrap a function in a callback .
12115	Get remote settle modes .
12116	Configure the router .
12117	The remote source address .
12118	The target address .
12119	Called when the parent session is closed .
12120	Create a new sender .
12121	Get a Sender Link for the given pn_link .
12122	Create a new receiver .
12123	Create a receiver for a given pn_link .
12124	Called when a connection is destroyed .
12125	Mark the session as close .
12126	Process an Endpoint event .
12127	Adds mark tag to HTML .
12128	Called when a receiver is closed .
12129	Called when a receiver failed .
12130	Determine the host port .
12131	Connect to a socket .
12132	Create a server socket .
12133	Return a list of threads that need processing .
12134	Wrap a function in a callable .
12135	Process the connection .
12136	Get the output data from the connection .
12137	Create a new sender .
12138	Reject a link .
12139	Create a new receiver .
12140	Called when a connection failed .
12141	Activate the connection .
12142	Called when a remote connection is closed .
12143	Called when an error occurs .
12144	Decorator for Twilio views .
12145	Get color string .
12146	Get the font file name .
12147	Sets the compression setting .
12148	Add PDFObject .
12149	Write the given stream .
12150	Put a stream .
12151	Add text to the document .
12152	Set the color scheme
12153	Set the default font
12154	Add a new page .
12155	Set the font size
12156	add PDF text
12157	Add a newline .
12158	Adds a pie chart
12159	Outputs the pages .
12160	Get list of orientation changes .
12161	Output font files .
12162	Output images .
12163	Output the data .
12164	Transform a 2D matrix to a specified point .
12165	Calculate the absolute position of x and y .
12166	Set style .
12167	Rotate a point .
12168	Set information about a specific topic .
12169	Set display mode .
12170	Closes the document .
12171	Write the header .
12172	Put pages .
12173	Put a dictionary into the database .
12174	Put information about the object .
12175	Put catalog .
12176	Write a file to the database .
12177	Floyd function .
12178	A generator that yields values of a sequence .
12179	Goesper function for the given sequence .
12180	Brent extraction .
12181	Tries to fit the test_length
12182	Tries to fit the test_length
12183	Check if x is greater than x .
12184	Return True if y is greater than self .
12185	Return a copy of the current cursor .
12186	Projection .
12187	Increment the y - axis .
12188	Draw the cursor .
12189	Creates a new image .
12190	List all tags .
12191	Get a label by name .
12192	Update a label .
12193	Delete a tag .
12194	Creates a new label .
12195	List all actions .
12196	Return a list of tags .
12197	Creates a new group .
12198	List the hooks .
12199	Update a hook .
12200	Creates an alert .
12201	Get alert list .
12202	Update an alert .
12203	Setup Sphinx extension .
12204	Return the path to the theme .
12205	Perform a POST request .
12206	List logs .
12207	Get a specific log_set
12208	Finds the position of an iterable of dest_bs .
12209	Returns the duration of the wavefunction
12210	Update the limbdark .
12211	Compute the model .
12212	Bin Bin .
12213	Free the memory .
12214	Receive data from the socket .
12215	Generator that yields lines from the stream .
12216	Generator that yields bytes from the stream .
12217	Return the status of the service .
12218	Generate info .
12219	Return an info message
12220	Send a command .
12221	Return a list of capabilities .
12222	Read mode reader .
12223	Quit the connection .
12224	Get the date .
12225	Gets the help message .
12226	Generate newsgroups .
12227	Generate new news .
12228	Return the new news for a given pattern .
12229	List active gen groups .
12230	List active times .
12231	List newsgroups .
12232	Generator for LISTVIEW FMT
12233	List extensions .
12234	Generate list generator .
12235	Returns a list of values .
12236	Return the number of jobs in a group .
12237	Get the next article .
12238	Retrieve an article .
12239	Return the head of the head .
12240	Return the body of the message .
12241	Display the XGTITLE
12242	Send XHDR message .
12243	Send XZHDR message .
12244	Generate XOVER code .
12245	Generate XAT code .
12246	Return a list of xpat identifiers matching the pattern .
12247	Compress GZIP .
12248	Sends a POST request .
12249	Return offset for given value .
12250	Return a timestamp from a string .
12251	Convert a datetime object to a datetime object .
12252	HTTP POST operation .
12253	HTTP DELETE request .
12254	Perform a HTTP GET request .
12255	List all scheduled queries
12256	List tags .
12257	Get tags by name or id .
12258	Create an alert report .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a new alert query .
12262	Delete a tagged tag .
12263	Unparse a range .
12264	Parse a newsgroup line
12265	Parse header line .
12266	Unparse headers .
12267	Handle POST request .
12268	Run tests .
12269	Return a docstring for defaults .
12270	Decorator to add defaults to a function .
12271	Return a docstring for defaults .
12272	Set the value .
12273	Check that the given value is of type dtype .
12274	Get the value of the loader .
12275	Check the type of the parameter .
12276	Compute the symmetric error
12277	Set the errors
12278	Set bounds .
12279	Import metrics from v2 .
12280	Extract metrics from a dictionary
12281	Return a filtered list of metrics .
12282	Calls the API call
12283	Return the terminal expression .
12284	Return the operator for the given string .
12285	Add an op .
12286	Initialize properties .
12287	Return a list of parameters .
12288	Return a numpy array of parameter values .
12289	Return the error for each parameter .
12290	Clear derived values .
12291	Set the method .
12292	Sets up the environment variables .
12293	Get URL parameters .
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Calls the api call
12299	Validate the metadata .
12300	Verify the type product product .
12301	Get the size of a remote file .
12302	Download the image .
12303	Validate a list of bands .
12304	Establish connection to Earthex processor .
12305	Return a new prefix with the given prefix .
12306	r Convert a zone into a timezone .
12307	Normalize the given time .
12308	join an iterable
12309	get newline positions
12310	Convert a point to a source .
12311	Dump the result to a string .
12312	Filter the relay s metrics .
12313	Create a fortune object from a list of files .
12314	Set the chance for a list of files .
12315	Entry point for the script .
12316	Concatenate a rule .
12317	Handle special handling .
12318	Parse the grammar .
12319	The list of rules .
12320	The comments .
12321	Access the directives
12322	Get the output source .
12323	Compile the date and return it .
12324	Get the import string .
12325	Generate the token type .
12326	Get the class definition .
12327	Get the entry point .
12328	Get the definition of a rule .
12329	Generate a rule for a given rule .
12330	Return the transformation for a rule .
12331	Convert an expression to an ASN .
12332	Convert a node to an ASN .
12333	Hoist a list of operands .
12334	Remove grouping groups from an optree .
12335	Convert an AST node to a code object .
12336	Convert AST node to code .
12337	Convert AST to terminal code .
12338	Convert ast_option_group to python code .
12339	Return the code for an ast .
12340	Convert an ast_special_handling to a code string .
12341	Return the alternative code for an AST node .
12342	Convert an AST node into a code object .
12343	Convert an AST to a code block .
12344	Convert an AST to an AST .
12345	Convert an AST to a code repeat .
12346	Find directives that match predicate pred .
12347	Flatten a child .
12348	Extract directives from a comment .
12349	Handles the response .
12350	Return a new id .
12351	Unregisters a specific key .
12352	Add command line options .
12353	Configure logging .
12354	Validate the arguments .
12355	Convert a list of nodes into a postfix .
12356	Convert a list of nodes to an Optree node .
12357	Reduce a list of nodes .
12358	Add arguments to the parser .
12359	Load plugin manifest .
12360	Get a metric definition by name .
12361	Determines the length of each column in fields
12362	Returns the length of each column in the dataframe
12363	Escape metrics .
12364	Prints out the field header .
12365	Output the MetricsMarkdown header .
12366	Generate markdown .
12367	Parse the input .
12368	Attempt to access the given text .
12369	Add CLI arguments .
12370	Parse a time string .
12371	Helper to output csv data .
12372	Helper to output json data .
12373	Helper to output a JSON string .
12374	Output XML to XML .
12375	Determines if the node is a trimmed node .
12376	Pretty print the tree .
12377	Return a partial repetition .
12378	Get terminal node .
12379	Get a repetition .
12380	Extract text from text .
12381	Count leading whitespace .
12382	Extract text from an extractor .
12383	The position of this node .
12384	Return True if this node is empty .
12385	Add an ignored message .
12386	Check whether the value is a node type .
12387	Return a new ParseNode with all children removed .
12388	Return a new ParseNode with all children removed .
12389	Return a new ParseNode with the merged nodes .
12390	Return a copy of this node .
12391	Return a compressed copy of this node .
12392	Return the position of this column .
12393	Return the position of the max readed position .
12394	Go to next character .
12395	Step next line .
12396	Go to next line .
12397	Return the last readed line .
12398	Return the position of the cursor .
12399	Save cursor position .
12400	Restore cursor position .
12401	Return a string representation of the function .
12402	Set name .
12403	Count the number of variables .
12404	Count the number of functions in this object .
12405	Update the count_types attribute .
12406	Update the state scope .
12407	Return a new scope with the given signature .
12408	Update the intersection of the set .
12409	Return the intersection of the current scope .
12410	Update the set with the given oset .
12411	Return a new scope with the given signature .
12412	Update the symmetric difference of a set .
12413	Return a new symmetric difference .
12414	Add this scope to the scope .
12415	Remove this set .
12416	Remove this signature from the scope .
12417	Return a list of the values for this element .
12418	Return the first signature in the cache .
12419	Return the last signature in the cache .
12420	Get the signature for this key .
12421	get a scope by name
12422	Get signature by symbol name .
12423	Return a list of all polymorphic return values .
12424	Translate a Translator injector .
12425	Normalize an AST node .
12426	Set this node from another node .
12427	Iterate over all values in self .
12428	Check if a hit is ok
12429	Compute the signature
12430	Recursively resolve the object .
12431	Returns a list of the names of all evaluated components .
12432	Set the name of the type .
12433	Delete a local file .
12434	Delete an S3 file
12435	Delete a file .
12436	Save a temporary file to a temporary file .
12437	Save an S3 file .
12438	Saves a local file .
12439	Find bucket by path .
12440	Create a new enum .
12441	Decorator to check the types of a function .
12442	Set the name of a callable .
12443	Decorator to add a method to a class .
12444	Decorator to register a hook .
12445	Decorator to define a class rule .
12446	Decorator to register a directive .
12447	Decorator to mark a class as a decorator .
12448	Bind a rule to dst .
12449	Read EOL .
12450	Push rule nodes to the tree .
12451	Removes the rule node from the tree .
12452	Return the node s value .
12453	Add a Stream to the XML document .
12454	Begin a tag .
12455	End tag .
12456	Set the rules for this rule .
12457	Set the registered hooks .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a node .
12461	Tries to read text from the stream .
12462	Return one character .
12463	Read a character from the stream .
12464	Read until EOF .
12465	Validate and ignore whitespace .
12466	Set the datatype for the hit_dtype .
12467	Set the cluster dtype .
12468	Checks that the given HIT_Hits matches the given hits .
12469	Adds a rulecl clause name .
12470	Add rules to bnf
12471	Adds a rule to the tree .
12472	Add sequences to the parser .
12473	Add alternative .
12474	Add a range .
12475	Add a rule to the sequence .
12476	Adds a capture .
12477	Adds a bound to the sequence .
12478	Add a hook .
12479	Return the number of parameter values .
12480	Parse param as string .
12481	Parse param .
12482	Return the id of a parameter .
12483	Set hook name .
12484	Add a hook parameter .
12485	Parse the EBNF rule .
12486	Ignore cxx .
12487	Add a state .
12488	Return a string representation of the state .
12489	Write the graph to a DOT file .
12490	Write the graph to a PNG file .
12491	Return a string representation of the state .
12492	Returns the next state .
12493	Reset the living state .
12494	Infer node .
12495	Infer a sub expr
12496	Infer the scope node .
12497	Infer literal .
12498	Dump node info .
12499	Parser a parser function .
12500	Return the scope .
12501	Parse a statement .
12502	Return node as string .
12503	Visitor for CallTrue node .
12504	Return node as string .
12505	Return node s representation .
12506	Return node s representation .
12507	Return node s scope .
12508	Visit Alt False .
12509	return an astroid . Seq node as string
12510	Return node as expr .
12511	Visitor for Rep0N node .
12512	Visitor for Rep0N node .
12513	Concatenate src to dst .
12514	Set indentable .
12515	Convert list to str .
12516	Prints a list of nodes
12517	Populate the states from a sequence .
12518	Populate the state register .
12519	Build a state tree .
12520	Determines whether n is equal to n .
12521	Create a Grammar object from a string .
12522	Create a Grammar object from a file .
12523	Parse the XML stream .
12524	Parse a file .
12525	Set a node .
12526	Set the value of a node .
12527	Get a subnode .
12528	Default serializer .
12529	Return a list of dictionaries matching query .
12530	Dump a state into a dictionary .
12531	Retrieve a list of ids from the database .
12532	Return a list of ids that belong to a given date .
12533	Import a BibRecDoc file .
12534	Dump a BibRecDoc to a file .
12535	Return the number of rows in the database .
12536	Check a BibRecDoc .
12537	Serialize object to JSON .
12538	Return user accounts
12539	Serialize this object to a JSON string .
12540	Return a list of communities .
12541	Return a list of ids that have been modified .
12542	Return a list of record ids that match the given date .
12543	Get restriction restrictions for a collection .
12544	Return a list of revision revisions for a given record .
12545	Returns a list of dictionaries matching the given record .
12546	Dump a record to JSON .
12547	Get the number of records in a given date range .
12548	Dump a record to bibdoc .
12549	Return a JSON representation of a user .
12550	Load model data into database .
12551	Return a dictionary of Things entry points .
12552	Initialize the app context .
12553	Cache the result of a function .
12554	Returns the SQL query string for the database .
12555	Returns a list of connected roles .
12556	Return the number of actions for a given query .
12557	Return a JSON - serializable representation of the resource .
12558	Load Token from data .
12559	Import a record dump into the database .
12560	Return the default value for a config variable .
12561	Serialize object to JSON .
12562	Return a list of users .
12563	get users
12564	Dump a user s attributes .
12565	Load a deposit into the database .
12566	Create record and pid .
12567	Load a record from a record dump .
12568	Load records from a recid
12569	List records in a given record .
12570	Load data from a json file .
12571	Load communities .
12572	Load users from sources .
12573	Load a deposit from a list of sources .
12574	Return a summary of the profiler .
12575	Main WSGI application .
12576	dump profiling stats
12577	Delete the profiler .
12578	Delete the profiler .
12579	Get the status .
12580	Temporarily disable a timestamp .
12581	Load user from database .
12582	Calculate translation for images .
12583	Given a list of images stitch them together .
12584	Adds a dimensions with ones to array .
12585	Create record .
12586	Create a new record .
12587	Update a record .
12588	Create persistent identifiers .
12589	Delete a record .
12590	Create one or more files .
12591	Create a new file in the bucket .
12592	Delete all buckets in a record .
12593	Return a list of persistent identifiers .
12594	Prepare a list of revisions .
12595	Prepare the list of files
12596	Prepares the PIDs .
12597	Return True if the record is deleted .
12598	Create a community .
12599	Load the featured community .
12600	Dump an object to a file .
12601	Check for a given thing .
12602	Delete the widget .
12603	Calculate the magnitude of a vector .
12604	Normalize a vector .
12605	Transform texcoords .
12606	Ensure that the bones are present .
12607	Set length .
12608	Set parent .
12609	Calculate the pivot point .
12610	Start animation .
12611	Set the state of the object .
12612	Unset state .
12613	Set texture state .
12614	Unset the target state .
12615	Create model data if it doesn t exist .
12616	Redraw the model .
12617	Render a single object .
12618	Set the model .
12619	Write toxml reports to a file .
12620	Format test suite as XML .
12621	add a menu
12622	Redraw label .
12623	Redraw the label .
12624	Draw the current window .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	add the label_main
12630	add wbtn button dialog
12631	Closes the dialog .
12632	add wbtn confirmation dialog
12633	add wbtn cancel button
12634	Update the progress bar .
12635	Render the actors .
12636	Overrides render_3d .
12637	Context manager for executing a step .
12638	Check if a resource exists .
12639	Add a new category .
12640	Get the missingTexture
12641	Load model by name .
12642	Load a model .
12643	Return model data for given name .
12644	Load model data
12645	Add a widget .
12646	Draw the submenu .
12647	Redraw the blraw .
12648	Redraw the scrollbar
12649	Determines whether a mouse is adjacent .
12650	Polar distance .
12651	Add a new layer .
12652	Get the region of a vertex buffer .
12653	Draws the given buffers .
12654	Adds an action to the list .
12655	Apply an action .
12656	Registers a new registry .
12657	Add a layer .
12658	Draw the layers .
12659	Delete all layers .
12660	The border of this widget .
12661	Return the offset of the watched list .
12662	Get the size of the widget .
12663	Read an hdf5 file
12664	Create a connection matrix from a shape .
12665	Set fields .
12666	Add a list of fields .
12667	Check that the elements are in the allowed types .
12668	The space of this element .
12669	Compute the centroids and volumes of each element .
12670	Get the angles of each object .
12671	Calculate the edges
12672	Compute the statistics for the centroids
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Extracts the element sets from a tag .
12676	Return the metadata for each field .
12677	Return the metadata for this step .
12678	Make the working directory .
12679	Run postproc .
12680	Run gmsh file
12681	Read a history report .
12682	Read a field report .
12683	Convert list to string .
12684	Return the EQUATION string .
12685	Create a UNSORTED set .
12686	Parse the response
12687	Make a GET request
12688	Write XY data to a file .
12689	Write a field report .
12690	List available component types .
12691	Return an error message for the given instance .
12692	Return True if the exception was thrown by this descriptor .
12693	Set the data .
12694	will get the axis mode for the current series
12695	sets the graph plot plotting options
12696	Create a class based on the given function .
12697	Process datafeeds
12698	Convert a float to a float .
12699	Convert string to int .
12700	Plot a graph .
12701	Converts a raw string to unicode .
12702	Return a cleaned version of the document .
12703	Determines whether a MIME type is matching the given MIME type .
12704	Clean up a domain name .
12705	Given a domain name return a list of cut cuts .
12706	Make a mmh3 hash .
12707	Collect all keywords .
12708	Index a stream .
12709	Invert all keys in a tok_hash .
12710	Return the number of documents that match the given hashes .
12711	Lookup stream id by key .
12712	Look for tf .
12713	Create a ProtoStreamReader from a file - like object .
12714	Make a stream item from an entry .
12715	Create a ContentItem from a node .
12716	Read a varint from the stream .
12717	Read a block .
12718	Serialize a key .
12719	Convert a stream item to a dictionary .
12720	Temporarily change the working directory .
12721	Strip prefix from string .
12722	Strip suffix from string .
12723	Return True if needle is a subsequence .
12724	Displays a cube
12725	Run the wsgiref server .
12726	Shutdown the server .
12727	Decorator to add a route to a route .
12728	Decorator to register an error .
12729	Retrieve a file from a path .
12730	Get error page callback .
12731	Add a pattern .
12732	Resolve a path .
12733	Resolve a non - literal route .
12734	Normalize pattern .
12735	Return a response body .
12736	Add a new header .
12737	Set a cookie .
12738	Generate a status line
12739	The media type .
12740	Get all values for a given key .
12741	Recursively delete a file .
12742	Return a list of open files .
12743	Display file type statistics .
12744	Run rejester .
12745	Attempt to fetch data from GPG .
12746	Return a list of lines of a file .
12747	Generate a random adjacency pair .
12748	Generate a random adjacency pair .
12749	Morph a sentence
12750	Return the similarity of the app .
12751	Print a hiragana .
12752	List entities .
12753	Get a shortsum for the given app_id .
12754	Get keywords .
12755	Retrieve the chrono history .
12756	Create a stage object
12757	Initialize a list of stages .
12758	Initialize all stages .
12759	Execute the read_str
12760	Run all the writers .
12761	Runs a list of transformators .
12762	Replace a pipeline with a given config .
12763	Create WSGI application .
12764	Given a list of sentences return a list of equiv IDs .
12765	Return a list of all the target mentions .
12766	Check if any of the target mentions in the chain are in the chain .
12767	Look for a mention in the given tokens .
12768	Match a stream item .
12769	Create a tagger file .
12770	Align a chunk to the stream .
12771	Shutdown the child process .
12772	Multiply a list of numbers .
12773	Replace all emails in text .
12774	generate strings identified as sentences
12775	make sortedcollection on body labels
12776	assemble Sentence and Token objects
12777	Converts HTML entities to unicode .
12778	Create a clean file for a given chunk .
12779	Create a file from a tagger .
12780	Clean a span .
12781	Align a single chunk to another file .
12782	Make absolute paths to absolute paths .
12783	Instantiates and instantiate the pipeline configuration
12784	Generate J - Smithch chunk for given path .
12785	Replace invisible HTML .
12786	Converts html to plain text .
12787	Make a clean visible file .
12788	Cleans a span .
12789	Main entry point .
12790	Try to load a stage .
12791	Load the external stages from a file .
12792	Load the stages from a module .
12793	Initialize a stage .
12794	Read the next byte from a byte string .
12795	Return True if the given href is valid .
12796	Return a list of labels .
12797	yield all file paths under input_dir
12798	Iterate over all tasks in the group .
12799	Get a random available range .
12800	Tokenize the sentence .
12801	Get sentences .
12802	Retry a function .
12803	return True if OK raise Exception
12804	Get an S3 bucket .
12805	Decode a protobuf message .
12806	Gets a chunk from a file .
12807	Convert a stream id to a Kvlayer key .
12808	Convert kvlayer key to stream id .
12809	Generate a key for a stream item .
12810	Main entry point for windzeug .
12811	Build an argument parser .
12812	Create xpaths for stream item .
12813	Converts a list of sentences into char tokens .
12814	Convert char tokens to char array .
12815	Yields xpath offsets from a given html string .
12816	Add an element .
12817	Return xpath element
12818	The index of the text element .
12819	Iterate over all descendant nodes .
12820	Select elements from source .
12821	Return select elements matching name .
12822	Return a list of names matching the regex pattern .
12823	Select an attribute from a source .
12824	Return the next sibling of an XML element .
12825	Return a pretty representation of an XML element .
12826	Call inkscape .
12827	Export inkscape file .
12828	Convert SVG to PDF .
12829	Convert SVG file to PNG .
12830	Get the jinja environment for a given file .
12831	Set up the template file .
12832	Fills the template with the given doc_contents .
12833	Save the document to a file .
12834	Retrieve a file type from a template .
12835	Fill SVG code with SVG code .
12836	Render the image to a file .
12837	Render a PDF file .
12838	Parse an XML document .
12839	Parse an HTML document .
12840	Return HTML fragment .
12841	Insert text .
12842	Insert a node before the node .
12843	Return a clone of this node .
12844	Execute makefile
12845	Return the string representation of a node .
12846	Insert a child .
12847	Parse config file .
12848	Get Google credentials .
12849	Create a datetime . datetime object based on the timezone .
12850	Create a google calendar event .
12851	Main entry point .
12852	Get file extension .
12853	Adds an extension if needed .
12854	Get a temporary file .
12855	Remove extension from file .
12856	Convert csv to json .
12857	Replace a file with new content .
12858	Parse the contents of the soup .
12859	Parses the next tag .
12860	Create an italic tag .
12861	Create a strong tag .
12862	Create an underline .
12863	Parse a tag .
12864	Clean line breaks .
12865	Parses a URL .
12866	Parse an HTML tag .
12867	Translate a dict to another key .
12868	Return a string representation of this object .
12869	Find all files matching a regex pattern .
12870	Concatenate strings .
12871	Yield start and end of a string .
12872	Yields a part of a string .
12873	Length of a string .
12874	Yield a boolean expression .
12875	Apply an expression to a sequence .
12876	Lookup a table by its key .
12877	Replace SVG code in SVG code .
12878	Validate svg file .
12879	Merge two svg files .
12880	Merge multiple PDF files into one .
12881	Convert font files to SVG .
12882	Embed font files into SVG files .
12883	Validate Inputs .
12884	Raises RuntimeError if function is not callable .
12885	Recurse through the input .
12886	Create jinja2 template
12887	Recurse through the tree .
12888	Converts an object into a string .
12889	Converts an object into a number .
12890	Converts a Python object into a boolean .
12891	Serialize an AST into a string .
12892	Change the encoding of a file .
12893	Save a QR code into a QR code .
12894	Launch a song .
12895	Call a command with arguments .
12896	Convert a latex file to a pdf file .
12897	Get the set of options for the current invocation .
12898	Transform a geometry to another geometry .
12899	Create a geometry object from a JSON string .
12900	Expand this range to another one .
12901	Return the intersection of two Envelope objects .
12902	Check if two Envelope objects intersect .
12903	Return a polygon representing the current mesh .
12904	Construct a DataFrame from ZNM .
12905	Write data to a CSV file .
12906	Select rows based on condition .
12907	Returns the table at the given nucleotide .
12908	Return the intersection of a table .
12909	Return a new Table with rows removed .
12910	Return the list of odd elements .
12911	Return True if all elements are equal .
12912	Return True if all elements are equal .
12913	Return a DataFrame with the error .
12914	Root Mean Square Error
12915	Calculate binding energy .
12916	Return the spherical harmonic coefficients .
12917	Return the S1N of this parameter .
12918	Returns the derivative of the s2p .
12919	S1P .
12920	Return a DataFrame representing the derived data .
12921	Decorator to make sure session exists .
12922	Derive a key from a master password .
12923	Bootstrap the database .
12924	Search for domains .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract HBS files .
12928	Convert viprefix to path .
12929	Return the id of the entity .
12930	Entry point for the script .
12931	Initialize logging .
12932	Update a file
12933	Return a dict of available drivers .
12934	Return the image driver for a given path .
12935	Convert geom to raster
12936	Raster layer
12937	Opens a raster from a file .
12938	Create an image from bytes .
12939	Creates a copy of the raster .
12940	DMD_CREATION_OPTIONLIST .
12941	Create a raster
12942	Sets the geometry transform .
12943	Read data from the file .
12944	The Envelope object .
12945	Get ImageDriver instance .
12946	Create a new raster
12947	Return masked array .
12948	Get the NOData .
12949	Read a raster .
12950	Resample the image .
12951	Save image to disk
12952	Sets the projection of the dataset .
12953	Warp this object to another location .
12954	Calculate the chunk length given the alph_len .
12955	Look for an alphabet .
12956	Encode a chunk .
12957	Convert a chunk to a long integer .
12958	Return the chunk at index .
12959	Cache the result of a function .
12960	Return regexp for filename .
12961	Normalize a datetime . datetime object .
12962	Detect the timezone .
12963	Convert the SwaggerType to a dictionary .
12964	Activate the pdb hook .
12965	Pretty - print an object .
12966	Handles jobs .
12967	Main worker loop .
12968	Run a worker pool .
12969	Sets the classification .
12970	Sends a message .
12971	Turn on a light .
12972	Turn on a switch .
12973	Turn on a device .
12974	Turn a device .
12975	Send messages to the queue .
12976	Send a message to the peer .
12977	Create a new adapter .
12978	Sets the nature of this Measurement .
12979	Update the conf_dict with the conf_dict .
12980	Reset the configuration .
12981	Set the configuration files .
12982	Iterate over all options .
12983	Return a generator that yields all default values .
12984	Create a config file .
12985	Update a configuration dictionary .
12986	Read a configuration file .
12987	Reads the configuration file .
12988	Return the names of the switch .
12989	Return a list of sections .
12990	Sets up the options for the given cmd_name .
12991	Add options to parser .
12992	Build the argument parser .
12993	Parse command line arguments .
12994	Run zsh compile command
12995	Finalize zsh compile command
12996	Compile a bash command
12997	Finalize a bash command .
12998	Start a new master server .
12999	Called when a connection is made .
13000	Called when a line is received .
13001	Called when a connection is lost .
13002	Called when a job is loaded .
13003	Handle a response .
13004	Close this job .
13005	Adds a job to the queue .
13006	Close all workers .
13007	Change all waitingers .
13008	Add a result .
13009	Ensure that the wait timer has changed .
13010	Load the next active job .
13011	Mark the job as done .
13012	Add a result .
13013	Cancel all active jobs .
13014	Wait for jobs to finish .
13015	Distribute jobs to activejs .
13016	Adds a new job set .
13017	Gets a job for the given callback .
13018	Return the job associated with this job .
13019	Add a result to the job .
13020	Called when a job set is done .
13021	Close the queue .
13022	Uniquify a list .
13023	Match a regex .
13024	Get latest entries .
13025	Get AWS region .
13026	Filter entries by exclude .
13027	Get a specific host by name
13028	Initialize a Entry object from a dictionary .
13029	Convert an attribute to a string .
13030	Sort entries by attribute .
13031	Return a string representation of the table .
13032	Create an instance from a Boto instance .
13033	Determines whether the filter matches the filter .
13034	Return a string representation of this node .
13035	Render a table .
13036	Add a timestamp .
13037	Setup logging .
13038	Create a structlog logger .
13039	Setup Celery app
13040	Get a specific job .
13041	Delete a worker .
13042	Create a configuration option .
13043	Return a section of the config .
13044	Set configuration options .
13045	Create a config file .
13046	Create completion files .
13047	Render a list of columns .
13048	Render a row
13049	Render a table .
13050	Prepare a list of rows .
13051	Return color for given number .
13052	Generate a hash for a given string .
13053	Generate a random color .
13054	Prompt the user for input .
13055	Check user credentials .
13056	Check if a user exists .
13057	Decorator for views that require a user .
13058	Check if a process is running .
13059	Import a module .
13060	Determine the IP address .
13061	Perform a HTTP request .
13062	Prepare post params .
13063	Serve the application .
13064	Render a template .
13065	Stream a subprocess of a command .
13066	Stream a list of commands into a stream .
13067	Iterate over the given commands .
13068	Return a list of workdays for a given date .
13069	Returns the path to the given command .
13070	Build ssh command .
13071	Build a scp command .
13072	Copy entries to a remote location .
13073	Copy files from local_path to remote_path .
13074	Run an ssh command on the given entries .
13075	Connect to an ssh entry .
13076	Load a LsiProfile from a file .
13077	Create a LsiProfile object from arguments .
13078	Create a relationship between this part .
13079	Returns a list of all the dependencies of this package .
13080	Load the relationship .
13081	Add a part .
13082	Load a part .
13083	Find the name for the given name .
13084	given an element parse out the proper ContentType out the proper ContentType
13085	Parse the input string .
13086	Build the JWT .
13087	Assign a force field for the AMPAL object .
13088	Find max NPNP .
13089	Convert force_params to force_params dictionary .
13090	Return the stream as a stream .
13091	Get all matching segments .
13092	Copy a directory .
13093	Open a bucket .
13094	Upload a directory .
13095	Upload a file to a local path .
13096	Upload an object to a bucket .
13097	Returns a list of filenames in the given directory .
13098	Returns a list of all directories in a given directory .
13099	Create a prefix for a directory .
13100	Delete a file .
13101	Ensure that the user is logged in .
13102	Return a string representation of the language .
13103	Delete a directory .
13104	Return the URL for the home namespace .
13105	Silently silence a function .
13106	Return the HTML for a breadcrumb .
13107	Display a breadcrumb .
13108	Calculate the interaction energy of a AMPAL object .
13109	Calculates the internal energy of an AMPAL object .
13110	Return a list of the hotspots for each line .
13111	Get the token for a given host .
13112	Uploads a product .
13113	Determines if a Travis event should skip upload .
13114	Purge a surrogate key .
13115	Register a build .
13116	Publish a build .
13117	Recursively update nested dictionaries .
13118	Main entry point .
13119	Edit a part from an OOXML package without unzipping it .
13120	List the contents of a subdirectory of a zipfile .
13121	Split a path into its parts .
13122	Find a file in a given path .
13123	Get the editor for the given filepath .
13124	Process a module .
13125	Generate an HTML chart
13126	Return HTML for a chart .
13127	Serializes a data object to a chart
13128	patch json data to json
13129	Convert json data to html
13130	Convert a dict to a pandas DataFrame
13131	Write HTML file .
13132	Create a chart class from a dataframe
13133	Encode fields .
13134	Link to a GitHub user .
13135	Infer the tarball url
13136	Build an application .
13137	Delete an app .
13138	Iterate over an iterable .
13139	Convert a number into a binary string .
13140	Generate a random IP address .
13141	Generate random date .
13142	Create a session object .
13143	Make a request to the heroku API .
13144	Create a build .
13145	Check the build status .
13146	Generate a sequence of sequences .
13147	Decorator for memoization .
13148	Decorator for unique objects .
13149	Register sub - commands .
13150	Get the argument parser .
13151	Get the description .
13152	Get help string .
13153	Run a sub - command .
13154	Encode data .
13155	Retrieve a list of players .
13156	Get the last n activities .
13157	Request activity list .
13158	Request activity data .
13159	Generate an endpoint for an athlete .
13160	Return the filename of an activity file .
13161	Get request from Golden Cheetah API .
13162	Create an application .
13163	Creates a new url with the given regex .
13164	Generate a title .
13165	Generate a person .
13166	Generate a random name .
13167	Render the data
13168	Set the dataset .
13169	Render the chart .
13170	Check the type of the chart
13171	Generate the URL for the request .
13172	Open the browser .
13173	Save the image to a file .
13174	Return urlopen .
13175	Opens an image
13176	Write a file .
13177	Generate SHA256 checksum
13178	Calculate the amount .
13179	Decorator for class name methods .
13180	Return a dict of protected claims .
13181	Return the JWKS as a dictionary .
13182	Unpack a ClientMetadataStatement .
13183	Packs a metadata statement .
13184	Evaluate a metadata statement .
13185	Check the federation usage .
13186	Extend the metadata dictionary with the given json dictionary .
13187	Parse command line arguments .
13188	Add command line options .
13189	Apply logging handlers to log levels .
13190	Logs a message .
13191	Map a word to a list of letters .
13192	Generate anagrams in a word .
13193	Return an instance of this class .
13194	Transform data from a timeseries .
13195	Get the last value of a time series .
13196	Validate page number .
13197	Return the page of the iterator .
13198	Change the contents of a file .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request .
13202	Create a new object
13203	Updates a metadata statement .
13204	Update the signature .
13205	Yield bundle contents .
13206	Create a bundle from data .
13207	Returns a list of urls for the given asset type .
13208	Return HTML tags for the given asset type .
13209	Return HTML tags for an asset type .
13210	Convert a URL to a scheme .
13211	Find links in a given URL .
13212	Connect to the AMP server .
13213	Return a list of module names .
13214	Import service modules .
13215	Convert a list of dates into dates .
13216	Return a copy of the field with the given value .
13217	Apply a function to a list of datetime objects .
13218	Prints the cursor .
13219	Print the cursor .
13220	Returns a list of tasks that do_tasks .
13221	Add default dependencies .
13222	Add the default attypes .
13223	Add default sequences .
13224	Add an RND shot for a project .
13225	Called when a post is saved .
13226	This method is called when a sequence is created .
13227	Create all tasks in the project .
13228	Preconnect a peer .
13229	Send data to a peer .
13230	Get a configuration value from a key .
13231	Decorator to add nova .
13232	Decorator to add a cinder function to an openstack event .
13233	Decorator for neutron functions .
13234	Decorator to add a glance .
13235	Decorator for swift_customer .
13236	Decorator for Keystone
13237	Decorator to add a heat to an event .
13238	Add a factory .
13239	Remove a factory .
13240	Connect to a remote factory .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Called when a connection is established .
13245	Called when a connection is made .
13246	Called when data is received .
13247	Send data to the connection .
13248	Called when a connection is lost .
13249	Returns the local protocol for the given connection identifier .
13250	Called when a remote protocol is received .
13251	Disconnect a connection .
13252	Return a new string centered on the given axis .
13253	Print the clock on the right .
13254	Generate a version number string .
13255	Identify a unit for a target unit .
13256	Assert that value is convertible to target_unit .
13257	Pad data_size with padding .
13258	Unpads a block of data .
13259	Sign a request .
13260	Gather metadata statements from a list of files .
13261	Print a pretty - printed representation of a word .
13262	Create argument parser .
13263	Parse arguments and print them .
13264	Process incoming data .
13265	Called when an unregistered type is not registered .
13266	Create a function stub .
13267	Called when a remote call is received .
13268	Regex for commands .
13269	Convert a string proto to an ampList .
13270	Convert to a string .
13271	Verify a metadata statement .
13272	Parse a JWKS response .
13273	Dump a pg_dump to a file .
13274	returns a list of all databases on this server
13275	Get a list of files for a given path .
13276	Syncs a folder from a folder .
13277	Decorator for views that require user_tokens .
13278	View function that handles login .
13279	Build a package .
13280	Return a new Reader instance .
13281	Load JSON from file .
13282	Sign a JWT .
13283	Create a signed JWT .
13284	A decorator to add a function to a library .
13285	Recursively deserializes python files .
13286	Main entry point for the library .
13287	Calculate the letter score .
13288	Calculate the word score .
13289	Yield word list
13290	Determines whether a given word is a valid scoring word .
13291	Main entry point .
13292	Entry point for the CLI .
13293	Called when a string is received .
13294	Retrieve a command and responder for a commandName .
13295	Parse request parameters .
13296	Run a function that returns a response .
13297	Write a response to the transport .
13298	Called when a connection is lost .
13299	Build JSON - RPC protocol .
13300	Convert a JWT to a KeyJar .
13301	Load a KeyJar from a json string .
13302	Process a Nova message .
13303	Process a cinder message .
13304	Process the neutron message .
13305	Process glance .
13306	Process a swift custom message .
13307	Processes a message .
13308	Process a request .
13309	Run the wsgiref server .
13310	Prints a message to stdout .
13311	Print a message to stderr .
13312	Register a new CommandClass .
13313	Registers a CommandClass .
13314	Converts value to string .
13315	Extracts a value from a string .
13316	Update completers in cdict .
13317	Initialize MQ
13318	Initialize the mq connection .
13319	Initialize service modules
13320	Initialize nova consumer .
13321	Initialize cinder consumer .
13322	Initialize neutron consumer .
13323	Initialize the glance consumer .
13324	Initialize the heat consumer .
13325	Enables an openstack component notification .
13326	Get information about a song .
13327	Download a song .
13328	Execute instructions .
13329	Load name from globals .
13330	Call a function .
13331	Dump a MySQL database to a file .
13332	Render Ditaa code .
13333	Called when the application exits .
13334	Run the application .
13335	Change the current working directory .
13336	Copies files from src to dst .
13337	Start debugging .
13338	Get the mtime of a file .
13339	Determines whether a file has changed or not .
13340	Recursively synchronize the file .
13341	Remove all files from the filesystem .
13342	Scrape a feed .
13343	Download the image
13344	Check if the image has changed .
13345	Returns a template node subclass .
13346	Find the name of the function call .
13347	Determines the name of the third party .
13348	Main entry point for ooaa .
13349	Find a symbol by name .
13350	Determines whether a package is contained in a given pe .
13351	Determines whether or not the given pe of a pe .
13352	Return the name of a data type .
13353	Get the related attributes .
13354	Create an Enum object from a string .
13355	Creates a function that will be called on the given metamodel .
13356	Create an external entity .
13357	Create a function from a function call .
13358	Create a constant .
13359	Creates an instance method based on a metaclass .
13360	Create a derived attribute .
13361	Create a class based on o_obj .
13362	Create a simple association .
13363	r Define association .
13364	Create an association .
13365	Create a component from a BPM model .
13366	Work on a socket .
13367	Accept a reply socket .
13368	Reject a message .
13369	Raise an exception .
13370	Blocks until a call is received .
13371	Establish a worker .
13372	Dispatch a reply .
13373	Try to guess the type name .
13374	Deserialize a value .
13375	r Parse a string t .
13376	r RAREN
13377	Retrieve a single document .
13378	Get many documents .
13379	Put items into the index .
13380	Delete a document
13381	Delete all entries in the index .
13382	Delete the index .
13383	Iterate over the FITS file .
13384	Iterate over the IDs of a feature .
13385	Scan for a given prefix .
13386	Scan for prefix ids .
13387	Perform a fulltext scan .
13388	Perform a fulltext scan .
13389	Iterate over the keywords .
13390	Iterate over all keywords .
13391	Iterate over scan ids .
13392	Returns the source of a feature .
13393	Creates ES filters for key ranges used in scanning in scanning .
13394	Create the index .
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan scan queries .
13399	Return the number of bytes in fc_dict .
13400	Count the number of bytes in the filter predicate .
13401	Return a string representation of a feature .
13402	Process the docopt options .
13403	Default formatter .
13404	Convert a link to a link .
13405	Return a pretty - printed version of the identifier .
13406	Check uniqueness constraint .
13407	Check integrity of a link .
13408	Check if a subtype is within a subtype .
13409	Return the index of a feature .
13410	Convert the given value to bytes .
13411	Put items into the cache .
13412	Delete all tables .
13413	Scan a set of key ranges .
13414	Scan a set of key ids .
13415	Scan an index .
13416	Return index scan prefix .
13417	Return index scan prefix .
13418	Return index prefix .
13419	Define an index .
13420	Put an index .
13421	Put raw value at index .
13422	Yield the index keys for the given idx .
13423	Returns the index associated with the given name .
13424	Check pypi_package_name .
13425	Add direction .
13426	Extract the name of a type .
13427	Get the reference of the given attribute .
13428	Build the core type element .
13429	Build an enum element .
13430	Build xml struct .
13431	Build user type .
13432	Determines the type of the type .
13433	Build a class from an object .
13434	Build an XML element .
13435	Build an XML Schema .
13436	Pretty - print an XML string .
13437	Fetches a list of unlocked bikes .
13438	Set position of node .
13439	Decorator to track the production of a function .
13440	r Convert t to text .
13441	r Return a string representing the NOTEQUAL message .
13442	r Build an exponential expression .
13443	r Convert t to text .
13444	r Convert t to text .
13445	r Return text representation of a terminal expression .
13446	r DOT
13447	r Return a LQBR string .
13448	r Return a RQBR string .
13449	r QMARK .
13450	r Converts a string to a TLAN .
13451	r Return a string representation of the terminal .
13452	r Return a string representation of t .
13453	Create a queue .
13454	Delete a queue .
13455	List all queues .
13456	List all exchanges .
13457	Purge a queue .
13458	Create a message .
13459	Read the image
13460	Check if text is visible .
13461	Main entry point for the CLI .
13462	Serialize a value to a python representation .
13463	Serialize an association .
13464	Return a string representation of a class .
13465	Main entry point .
13466	Perform a search on the data .
13467	Partitions a collection by a condition .
13468	Run the app .
13469	Return the context for the request .
13470	Find the link between inst1 and inst2 .
13471	Return a formalized representation of this class .
13472	Computes the lookup key for the given instance .
13473	Computes the index key for the given instance .
13474	Returns the type of the given attribute .
13475	Create a new instance .
13476	Iterate over all metaclasses .
13477	Define a metaclass .
13478	Send an eintr socket to a socket
13479	Receive a zintr socket
13480	Display dead code .
13481	Parse email list .
13482	Decorator to make an RPC callable .
13483	Return a dict with the rpc spec .
13484	Normalize postcode middleware .
13485	Return the next value .
13486	Accepts a child of the given inst .
13487	Accept C C C C .
13488	Accept a PE .
13489	Get the image brightness .
13490	Match pattern .
13491	Find the position of a match .
13492	Get the selection for a character .
13493	Called when the cursor is changed .
13494	Return the exception info .
13495	Create an inputhook with Qt4 .
13496	Get a mapper instance .
13497	Decorator to add a function to a URL .
13498	Decorator to add a function to a URL .
13499	Adds a function to the graph .
13500	Adds a path .
13501	Call a URL and return the results .
13502	Execute the history widget .
13503	Updates the prompt .
13504	Updates the pressed button pressed .
13505	Updates the history with the given substring .
13506	Return the next record in the history .
13507	Handle an execute reply .
13508	True if the history is locked .
13509	Get the edited history .
13510	Set the history .
13511	Stores the history .
13512	Called when a connection is closed .
13513	Build the record collection .
13514	Convert collection to pandas . DataFrame
13515	Generate dataframe with spin frame method .
13516	Set attributes on a dictionary .
13517	Subscribes to all topics .
13518	Log a message
13519	Given a list of lists yield a sorted list of lists .
13520	Iterate over a view .
13521	Convert a notebook to a notebook .
13522	Determines the supported platform .
13523	Return an importer for a path item .
13524	Returns a StringIO object .
13525	Parse version string .
13526	Overrides setuptools .
13527	Add a new distribution .
13528	Return a list of installed packages .
13529	Returns the path to the cache file .
13530	Parse an entry point .
13531	Get package info .
13532	Compile dependencies .
13533	Parse a filename .
13534	Collapse leading ws into a string
13535	Removes the text edit filter .
13536	Update the text edit widget .
13537	Returns the current text cursor .
13538	Update the currently selected text .
13539	Register admin site .
13540	Return a list of disk partitions .
13541	Get CPU CPU time .
13542	Return CPU times per CPU .
13543	Reads stdin .
13544	Reads stdin .
13545	Update tabbar visibility
13546	Create a tab with the current kernel .
13547	Adds a tab with the given frontend .
13548	Add a menu action .
13549	Creates a MagicMagicMagicMagic instance with the active frontend .
13550	Populate the magic menu .
13551	Closes the window .
13552	Generate a password
13553	Return a boolean indicating whether the passed passphrase matches the given password .
13554	Creates a boolean cell
13555	Generate a short short short title .
13556	Return a dict ofeditable booleans .
13557	Toggle boolean for an item .
13558	Overrides django . apply_change_permissions .
13559	If the user has delete permission to delete the tree .
13560	add children to graph
13561	Create a bintree .
13562	Submit a list of jobs .
13563	Validate the tree .
13564	Make a color table .
13565	Return a copy of this ColorScheme .
13566	Adds a new color scheme .
13567	Set active scheme .
13568	Path to site - packages .
13569	Process sub - channel messages .
13570	Handle stdin request .
13571	Wait until kernel is available .
13572	Set the style .
13573	Return the format for the given token .
13574	Get format from given document .
13575	Returns QTextCharFormat object for given token .
13576	Searches for a given command .
13577	Normalize path .
13578	Check that a package namespace package is a package .
13579	Check entry point .
13580	Return True if the last line of src is blank .
13581	Return True if there are two blanks .
13582	Transform the system s system path to the command line .
13583	Transform ipython magic magic magic .
13584	Transform a classic prompt .
13585	Transform an IPy prompt .
13586	Pushes the given lines into the output_mode .
13587	Returns True if the input is at least one of the comments .
13588	Find the indent for the given line .
13589	Store a list of lines .
13590	Reset the source .
13591	Handle cell magic .
13592	Append lines to cell mode
13593	Transform a cell
13594	Pushes lines to the IPython notebook .
13595	Initialize registered observers .
13596	Post a notification .
13597	Returns a set of observers for the given ntype .
13598	Add a callback for callback
13599	Create a new job .
13600	Update the status .
13601	print a summary of a group
13602	Flush a group .
13603	Creates a new status
13604	Update group status
13605	Initialize the background thread .
13606	Insert value at index .
13607	Return a copy of this object .
13608	Declare a special identifier .
13609	Declare a list variable .
13610	Declare a special variable
13611	Set the current working directory .
13612	Move a random state .
13613	Calculate the energy of a given route .
13614	Return a copy of this dictionary with the given keys .
13615	Check the presence of the table .
13616	Convert a line to a dictionary .
13617	Render a check expression .
13618	Print a warning message .
13619	Parse config file .
13620	Print a table of rows .
13621	Create an HTML link .
13622	Render a js file
13623	Return the CSS file for a CSS file .
13624	Generate an HTML image .
13625	Subtract a numeric value .
13626	Multiply a numeric value .
13627	Convert value to div .
13628	Modify a numeric value .
13629	Returns the verbose name for the given object .
13630	Split a line into a list of strings .
13631	Add command line options .
13632	Adds a built - in builtin .
13633	Remove a built - in module .
13634	Deactivate this module .
13635	Find the name of a given index .
13636	Yields all urls that link .
13637	Unhell list .
13638	Main entry point for coverage script .
13639	Add an action .
13640	Append an action to the parser .
13641	Parse command line .
13642	Print help for coverage .
13643	Print help .
13644	Validate command line arguments .
13645	Execute the Python interpreter .
13646	Print debug information .
13647	Unserialize a BSON object .
13648	Set the display hook .
13649	Log the errors of the given exception .
13650	Check if a given URL is a valid URL .
13651	Validate a given URL .
13652	Validate url container .
13653	Pull a list of keys from a dictionary .
13654	Return random number of random ports .
13655	Decorator to mark a function as a RemoteFunction .
13656	Create a parallel function from a view function .
13657	Apply a map operation to each sequence .
13658	Returns the last line of the readline
13659	Set autoindent .
13660	Initialize logstart .
13661	Save the module state .
13662	Restore sys module state .
13663	Register a function as a post_execute .
13664	Return a new main module .
13665	Cache the main namespace
13666	Initialize the user namespace .
13667	Return a list of all global_ns_refs for this module .
13668	Reset the session .
13669	Delete a variable .
13670	Reset all references to default values .
13671	Push variables .
13672	returns a dictionary of all of the given type
13673	Indicate a property .
13674	Find a struct by name .
13675	inspect an object
13676	Initialize the history manager .
13677	Show an excepthook .
13678	Displays traceback .
13679	Print traceback .
13680	Show SyntaxError .
13681	Pre - readline .
13682	Completer for completion .
13683	Sets a custom completer .
13684	Set the completer frame .
13685	Run a cell magic .
13686	Find a magic by name .
13687	Define a macro .
13688	Run a shell command .
13689	This function is called when a command is re - printed .
13690	Return a dict of user variables .
13691	Evaluate user expressions
13692	Evaluate an expression .
13693	Safely execute a file .
13694	Runs the current cell magic .
13695	Run a cell .
13696	Runs each node in the list of nodes .
13697	Enable pylab .
13698	Expand a variable .
13699	Create a temporary file .
13700	Extract lines from a string .
13701	Try to find a user s code .
13702	Sets up the temp files .
13703	Publish a message .
13704	Sends a message to a target .
13705	Skip a test condition .
13706	Decorate a function to be called when a test fails .
13707	A decorator to mark functions as deprecated .
13708	List all profiles in a given path .
13709	List available profiles .
13710	Find a versionConflict by key .
13711	Run a command .
13712	Returns the full path to the given path .
13713	Return the next line .
13714	Send bytes to the stream .
13715	Sends an integer .
13716	Recompile unicode regexes as bytes regexes . Overridden in subclass .
13717	Compile the pattern .
13718	Start a search loop .
13719	Recompile bytes regexes as unicode regexes .
13720	Search the string for the given buffer .
13721	Search the given buffer .
13722	Create a logger for the given log .
13723	Unpack a directory .
13724	Print msg to stdout .
13725	Return the last error
13726	Execute a command and return its output .
13727	Searches for a source file .
13728	Returns a sorted list of the arcs that are executed .
13729	Return the list of arcs that are missing .
13730	Return a list of arcs that can be unpacked .
13731	Return a list of branch lines .
13732	Return the total number of branches .
13733	Return the list of arc lines that are missing .
13734	Return a summary of the branch statistics .
13735	Set precision .
13736	Returns the covered coverage of the graph .
13737	Get the covered pixel .
13738	Highlight a string of needles .
13739	Highlight given string .
13740	Highlight keywords .
13741	Sets up the function to run this function .
13742	Unquote ends of a string .
13743	Indent a string .
13744	Return a marquee .
13745	Format a screen .
13746	Indent a string .
13747	Wrap paragraphs .
13748	Find the optimal width for a list of rows .
13749	Get or set the value of a list .
13750	Compute the item matrix for the given items .
13751	Return a string representation of the fields .
13752	Build kernel argv .
13753	Init the connection to the kernel .
13754	Return a pretty representation of obj .
13755	Pretty print an object .
13756	Get the mro for an object .
13757	Pretty print obj .
13758	Creates a subsequence for a sequence .
13759	Creates a dict - like object .
13760	Pretty - print super class .
13761	Pretty - print a regular expression .
13762	Pretty print object .
13763	Pretty print function .
13764	Pretty print an exception .
13765	Return the function for a given type .
13766	Resolve a function by its name .
13767	Add text to the buffer .
13768	Adds a breakable .
13769	End group .
13770	Flush the buffer .
13771	Return a pretty - printed version of obj .
13772	Add exception colors .
13773	Writes a row to the ods file .
13774	Retrieves the text from the clipboard .
13775	Get clipboard text .
13776	Get text from the clipboard .
13777	Get the path to the temporary folder .
13778	Rekey a dictionary
13779	Extract dates from a dictionary .
13780	Converts a list of dates into datetime objects .
13781	Default JSON serializable representation .
13782	Convert a dictionary into a json object .
13783	Check if site_dir is installed .
13784	Write a script to disk .
13785	Sleep the number of seconds in the engine .
13786	Create an argument parser .
13787	convert pyx extensions to c
13788	Main entry point for zmq .
13789	Build a PackageFinder .
13790	Called when the log level changes .
13791	Return the default log handler .
13792	Validate that flags are changed .
13793	Print help for the given aliases .
13794	Print help for all flags .
13795	Prints the subcommands .
13796	Print help to stdout .
13797	Print examples .
13798	Update the configuration dictionary .
13799	Initialize a subapp .
13800	Flatten flags into a flat dict
13801	Parse the command line .
13802	Load config file .
13803	Generate the configuration file for this class .
13804	Downsample an array of k .
13805	Formats an info message
13806	Write a message .
13807	This method is called when a configuration has changed .
13808	Return a help string for this class .
13809	Return a help string for the given trait .
13810	Generate a section for a class .
13811	Clear all instances of mro .
13812	Create an instance of mro .
13813	Format the traceback as a string .
13814	Exception handler for debugging
13815	Flush the channel .
13816	Initialize the channel manager .
13817	Read a file .
13818	Read and raise an exception .
13819	Handle a subprocess .
13820	Split a string .
13821	Compress a list of dicts
13822	Class decorator for registering Magics class .
13823	Record the magic of a function .
13824	Decorator to mark a method as a magic .
13825	Decorator to mark a function as a function .
13826	Return a dictionary with the lsmagic documentation .
13827	Registers the given magic objects .
13828	Register a function .
13829	Format a LaTeX string .
13830	Parse command line options .
13831	Set the default option .
13832	Create an IPython notebook page
13833	Create a task with a callable .
13834	Returns a task with the given label .
13835	Return the function object from the info .
13836	Calculate next run .
13837	Submit a timestamp .
13838	Run a task .
13839	Calculate and save asap .
13840	Run an iterable of iterations .
13841	Run one iteration .
13842	Find the url_file in the config .
13843	Bind a kernel to an IPython kernel .
13844	Simulate a single test step .
13845	Create an interrupt event .
13846	Run the process .
13847	Filters given ns and returns a dictionary with only the specified keys .
13848	List a namespace .
13849	Raises ValueError if dict is not mutually exclusive .
13850	Draw the active figure if it is active .
13851	Flush all active figures .
13852	Send a matplotlib figure
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate random port .
13856	Initialize the web app .
13857	Handle a SIGINT signal .
13858	Confirm the exit server .
13859	Shutdown the kernel .
13860	Generate stock price options
13861	Replace multiple strings in text .
13862	Renders the shell .
13863	Entry point for launching a kernel .
13864	Create a zip file .
13865	Fix the version of the metadata file .
13866	Determine whether an object is mappable .
13867	Return partition of sequence .
13868	Monkey patch pexpect .
13869	Run the given file .
13870	Run a source .
13871	Generate coverage report .
13872	Generate XML file .
13873	Download a file from the FTP .
13874	Reduce all frequencies in a given frequency list .
13875	Compute the number of digits for a given filename .
13876	Convert a txt file to a list of digits .
13877	Calculate the frequency for one - digit digits .
13878	Compute the frequency of two - digit digits .
13879	Calculate the frequency for a given number of digits .
13880	Plot two digit frequency spectrum .
13881	Plot the number of digits in a single digit .
13882	Print a debug expression .
13883	Reverse urlresolvers .
13884	Check if a prefix is private .
13885	Return a TestSuite test suite .
13886	Print a debug script .
13887	Debug a test script as a string .
13888	Logs a module .
13889	Return a dictionary of hash values for the given hashroot .
13890	Compress the given hashroot .
13891	Returns a list of all files matching the glob pattern .
13892	Determines whether the given record should be allowed .
13893	Check if a record matches any of the matchers .
13894	Format a capture error .
13895	Embed an interactive shell .
13896	Main loop .
13897	Get new writer for trans_csv_path .
13898	Prepare the list of locale directories .
13899	Write POEntry entries .
13900	Write the message header .
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Run python module .
13904	Run python file .
13905	Build python code from a python file .
13906	Load a python code from a file .
13907	Return HTML table for given item_matrix .
13908	Set the current value .
13909	Cancel the completion .
13910	Move the cursor to the given row .
13911	Select the next row .
13912	Selects the next button down .
13913	Selects the left node .
13914	Select right .
13915	Update the list .
13916	Determine the frequency of a given text .
13917	Print the number of words for each row
13918	Return the XML as a string .
13919	Write string to file .
13920	Validate a pin .
13921	Send a pin .
13922	Delete a shared pin .
13923	Send a pin .
13924	Delete a pin .
13925	Subscribe to a user .
13926	List all subscribed subscriptions .
13927	Decorate a function to be monitored .
13928	Initialize the progress bar .
13929	Context manager for executing a task .
13930	Context manager to create a subtask .
13931	Update the progress monitor .
13932	Create a new submonitor .
13933	Log a done message .
13934	Write a page of text .
13935	Make sure that the build directory is correct .
13936	Load config files .
13937	Load configuration from file .
13938	Read the config file and return it as a dict .
13939	Loads a flag .
13940	Decode a list of arguments .
13941	Load a configuration variable .
13942	Load configuration from given arguments .
13943	Parse arguments .
13944	Convert the configuration to a config object .
13945	Find a module by name .
13946	Register a stop callback .
13947	Called when a process starts .
13948	Called when data is stopped
13949	Interrupt the signal .
13950	Return the args for the program .
13951	Start MPILauncher
13952	Send a file to a remote .
13953	Fetch file from remote
13954	Returns the number of engine instances .
13955	Start the engines
13956	Start a new job .
13957	Return a dict representation of the cluster .
13958	Parse the job id .
13959	Write a batch script .
13960	Start a job .
13961	Creates a context menu
13962	Append a PDF to the image .
13963	Append a PNG image .
13964	Append svg .
13965	Add image .
13966	Copy an image
13967	Get image .
13968	Insert an image
13969	Insert SVG data .
13970	Save an image .
13971	Called when a lock is changed .
13972	Initialize the environment
13973	Executor for globus prompt
13974	Exit the shell .
13975	Sets the next input .
13976	Read configuration file .
13977	Return a list of values .
13978	Return a list of values .
13979	Initialize the timer .
13980	Set values from kwargs .
13981	Load configuration from a file .
13982	Set attribute from config file .
13983	Expand the user s tilde .
13984	Set delimiters .
13985	Split a line into two lines .
13986	Returns a list of words matching the given text .
13987	Determines whether the attr matches the given string .
13988	Called when a greedy merge is changed
13989	Return a list of file matches .
13990	Return a list of aliases matching the given text .
13991	Return a list of python matches .
13992	Return the default arguments for the given object .
13993	Completes completion .
13994	Handles completion of line .
13995	Determines whether the given record matches one of the tests .
13996	Matches the given check .
13997	Extract a subdict from a dict
13998	Return True if the prompt is quiet .
13999	Write output prompt .
14000	Writes formatted data to stdout .
14001	Log the output .
14002	Raises an InvalidOperationException if the operation is not free .
14003	Converts a MySQL timestamp into a Timestamp object .
14004	Called when an event loop has changed .
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the shell .
14008	Performs one iteration .
14009	Publish a python code .
14010	Abort a request .
14011	Clears a message .
14012	Return the topic as string .
14013	Send a shutdown message .
14014	Initialize the module stack .
14015	Remove modules from the context .
14016	Return the absolute path of the given path .
14017	Check if a file exists .
14018	Check if an object is a class .
14019	Check if a path is a package .
14020	Get a package name from a file .
14021	Convert label to string .
14022	Return the last key of a regex .
14023	Given a module return a copy of it .
14024	Return a copy of the given class .
14025	Get CPU CPU times .
14026	Get process command line .
14027	Return a list of open files .
14028	Get process connections .
14029	Check if a user has a group .
14030	Resolve a class from a string .
14031	Return the percentage of usage in a given number .
14032	Memoize a function
14033	Mark a function as deprecated .
14034	Login to the Postgres server .
14035	Parse gdocs key .
14036	Ensure the temp path exists .
14037	Remove temporary temp files .
14038	Upload file to GDoc .
14039	Synchronize the CSV file with GODOCS .
14040	Download the GOCS .
14041	Upload the file to GDoc .
14042	Clear the contents of the file .
14043	Create a new Qt console
14044	Check if url is accessible from this machine .
14045	Determines whether or not the given URL exists .
14046	Get response code from URL .
14047	Compare the content type .
14048	Compare the response code for a URL
14049	Validate the given data .
14050	Clear output .
14051	Find the path to a command .
14052	Create a CodeUnit from a list of morfs .
14053	Return the name of the root .
14054	Return the file source .
14055	Determines whether this file should be a python file .
14056	Calculate total seconds .
14057	Wait for the result to complete .
14058	Wait for the job to complete .
14059	Builds a dictionary of search results .
14060	Aborts the message .
14061	Return the total number of messages submitted to this session .
14062	Wait for all tasks to be ready .
14063	Publish a displaypub
14064	Wait for the output to be ready .
14065	Block until all messages are ready .
14066	Return the absolute path of a file .
14067	Prepare a list of patterns .
14068	Return sep .
14069	Find all python files in dirname .
14070	Return the relative filename .
14071	Return the canonical filename .
14072	Extract data from a zip file .
14073	Return True if fpath matches the given fpath .
14074	Return True if fpath matches fpath .
14075	Return a copy of the given path .
14076	Start Qt loop .
14077	A loop to loop through the event loop .
14078	Start a Tkinter loop .
14079	Run GTK kernel
14080	Loop over a kernel .
14081	Enables a GUI event loop .
14082	Calculate the GOE .
14083	Compute the eigenvalue of a center eigenvalue .
14084	Calculate the eigenvalue of each group .
14085	Initialize a new instance .
14086	Parse a YAML file .
14087	Parse step configuration .
14088	Initialize the crash handler .
14089	Load the config file .
14090	Initialize the profile directory .
14091	Generate the default config file .
14092	Write the file .
14093	Erases the file .
14094	Return a dictionary of all line data .
14095	Return dictionary of arc data .
14096	Write data to a pickle file .
14097	Read data from file .
14098	Load data from a pickle file .
14099	Read data from a file .
14100	Combine parallel data into one .
14101	Add line data .
14102	Add arc data .
14103	Add a hash to the file .
14104	Return a summary of the file .
14105	Return a generator yielding lines of a given line .
14106	The main loop .
14107	Replaces the history of one or more history lines .
14108	Prompt the user for raw input .
14109	Edit syntax error .
14110	Determines if a file should be re - compiled .
14111	Exit the user .
14112	Retrieves the version of the URL .
14113	Create a frontend master
14114	Set the default colors for this widget .
14115	Return information about the pub .
14116	Rconverter function .
14117	Find the source code of an object .
14118	Set active colors .
14119	toggle the current color
14120	Return the traceback of a traceback .
14121	Return formatted traceback .
14122	Helper function to format the extracted list .
14123	Format an exception only .
14124	Print exception only .
14125	Initialize the debugger .
14126	Set the mode .
14127	Decorator for views that require a user to be authenticated .
14128	Ensure that a module is from a list .
14129	Add a new line .
14130	Add a new section .
14131	Get the function name .
14132	Return the code for the given expression .
14133	Render the template .
14134	Apply dots to dots .
14135	Render a template .
14136	Return a dict with default formatters .
14137	Return the function for a given type .
14138	Return a deferred for a given function .
14139	This method is called when a float is changed
14140	Return a list of all config files .
14141	Configure the environment .
14142	Configure logging .
14143	Configure the given path .
14144	Dump a page of pages .
14145	Print a formatted page .
14146	Read a page from a file .
14147	Get pager command .
14148	Gets the start of a pager .
14149	Takes a string and prints it
14150	Print a basic Unicode string .
14151	Converts an object into a PNG .
14152	Converts an object to a PNG image .
14153	Determines if a given object can be printed .
14154	Return a string representation of an object .
14155	Add options to the parser .
14156	Validate a list of strings .
14157	Validate a dict .
14158	Run the loop .
14159	Handle a received message .
14160	Execute a request .
14161	Completes a request .
14162	Get information about an object .
14163	Send a history request .
14164	Shutdown the queue .
14165	Flush the queue .
14166	Input message .
14167	Start the channel .
14168	Stop the channel .
14169	Return a boolean indicating whether the channel is running .
14170	Load the connection file .
14171	Write the connection file .
14172	Starts a new kernel .
14173	Shutdown kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	Interrupt a kernel .
14177	Sends a kernel to the kernel .
14178	Check if the host is alive .
14179	Get the shell channel for this session .
14180	Get the sub - channel .
14181	Return the hb channel .
14182	Bind a kernel to an IPEngine instance .
14183	Print a debug message .
14184	Returns a dict mapping the class name to the extension classes .
14185	Implements pre - step .
14186	Perform a post - step .
14187	Finalize the result .
14188	Recursively walk through an egg .
14189	Scan a module .
14190	Launch a new instance .
14191	Save connection information to a file .
14192	Load connection info from JSON file .
14193	Load secondary configuration from JSON .
14194	Execute the given cell .
14195	Enable autopx .
14196	Disable autopx .
14197	Run a cell
14198	Run a heartbeat .
14199	run a task
14200	Remove a task from a message .
14201	Monkey patch the protocol for the given agent .
14202	Patches an object as missing .
14203	Accept a connection .
14204	Reject a connection .
14205	Get a proxy agent instance .
14206	Check if the form is valid .
14207	Method to delete the object
14208	If the user is logged in save the user .
14209	Print a report of the morfs .
14210	Check all modules .
14211	Edit editor .
14212	Fixes an error editor .
14213	Get clipboard .
14214	Add a function to the chain .
14215	Get the metadata for a path or module .
14216	Configure the conf .
14217	Import an item .
14218	Try to authenticate using a passwordless SSH server .
14219	Try to authenticate a passwordless SSH server
14220	Attempt to connect to a paramiko server .
14221	Create a tunnel connection .
14222	Open a tunnel .
14223	Stop scheduling tasks .
14224	Unwrap exception .
14225	Register the engine .
14226	Unregisters an engine .
14227	Handle an ExecuteReply message .
14228	Flush notifications from the server .
14229	Flush messages from a socket .
14230	Flush the control replies .
14231	Flush all ignored control replies .
14232	Flush incoming IO messages .
14233	Rotate every interval .
14234	Stop spin thread .
14235	Flushes the hub .
14236	Wait for jobs to finish .
14237	Send an application request .
14238	Send an execute request .
14239	Get the result from the hub .
14240	Get queue status .
14241	Purge a list of jobs .
14242	Return the hub history .
14243	Send a query to the database .
14244	Return an opcode set .
14245	Get the byte parser .
14246	Return all lines matching the given regexes .
14247	Parse the text .
14248	Return the first line of a multi - line .
14249	Return the first line of a list of lines .
14250	Parse a Python source .
14251	Return a list of arc objects sorted by line .
14252	Calculate the total number of line breaks .
14253	Parse the child parser .
14254	Iterate over byte lines .
14255	Yields a list of INDRA statements .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Validate the given chunks .
14259	Iterate through the arc lines .
14260	Return a list of all child_parsers .
14261	Return a set of all the arcs in this child .
14262	Add coverage options .
14263	Start coverage report .
14264	Generate coverage report .
14265	Determines if a file should be wanted .
14266	Interpret a distribution name .
14267	Open a URL with authentication .
14268	Fetches the distribution for a given requirement .
14269	Get the parent of an object .
14270	The root topic .
14271	Render a template .
14272	Configure the plugin .
14273	Format a capture error .
14274	Split data by num .
14275	Convert a notebook to this one .
14276	Convert hex color to RGB .
14277	Get a dictionary of colors for a given style .
14278	Get Qt font .
14279	Handle an execute reply .
14280	Handle a history reply .
14281	Handler for pyout .
14282	Handle data .
14283	Called when the IPython notebook is started .
14284	Execute a file
14285	Process error message .
14286	Process the execute payload .
14287	Set the default stylesheet .
14288	Edit a file .
14289	Make an in prompt .
14290	Construct a prompt for a prompt .
14291	Update the style sheet .
14292	Called when the syntax style is changed .
14293	Handle a CloudStack response .
14294	Calculate the request signature .
14295	Transform a dictionary into a dictionary .
14296	Get virtual memory usage .
14297	Get CPU CPU times .
14298	Get process UUIDs .
14299	Return the number of process gids .
14300	Return a list of process threads .
14301	Return a list of process open files .
14302	Return the hash of the given package .
14303	Return information about the installed package .
14304	Return system information .
14305	Return number of CPU cores .
14306	Return the number of available TCP connections .
14307	Returns the next set of results .
14308	Fetch one row .
14309	Fetch many rows .
14310	Fetch all rows
14311	Connect to a peer .
14312	Parse a notebook JSON file .
14313	Parse a notebook file .
14314	Return a list of reads .
14315	Write a string to a file .
14316	Write nb to file .
14317	Convert ipynb file to metadata
14318	Load values from a dictionary .
14319	Determines whether the given name matches the given name .
14320	Determines if a class should be added to the class .
14321	Determines if a given directory should be included in the plugin .
14322	Determines whether or not the given file exists .
14323	Determines if the given function should be called .
14324	Returns True if the given method matches the given method name .
14325	Determines if a module wants to be wanted .
14326	Read lines from a file .
14327	Print a list of lines .
14328	Print a list of lines .
14329	Print pdef .
14330	Returns the difference between two currencies .
14331	Convert currency to currency
14332	Compute the return value for a market .
14333	Get stream encoding .
14334	Return the default encoding .
14335	Write the connection file .
14336	Initialize the heartbeat .
14337	Log connection info .
14338	Initialize the session .
14339	Initialize the output stream .
14340	Initialize the kernel .
14341	Init a connection to the SSH server .
14342	Register a controller .
14343	Convert HTML to text .
14344	Convert markdown to text
14345	Convert domain to FQDN .
14346	Add command line options .
14347	Configure Spyder .
14348	Determines if a directory should be excluded .
14349	Determines if an extension is a dynamic library .
14350	Call each function in a list of functions .
14351	Call each function in a list of functions .
14352	Append a function to the wrapped function .
14353	Append a function to the wrapped function .
14354	Format the usage
14355	Initialize the application .
14356	Write the PID file .
14357	Remove the pid file .
14358	Read the PID file .
14359	Construct a parser for a magic function .
14360	Get the real name of a magic function .
14361	Highlight a line .
14362	Rehighlight a block .
14363	Set the format of the frontend .
14364	Copies the clipboard .
14365	Execute a shell command .
14366	Called when the prompt is finished .
14367	Callback when the tab is pressed .
14368	Make the context menu .
14369	Event handler for console key press events
14370	Inserts a prompt for the cursor .
14371	Handle complete reply .
14372	Silently execute a command .
14373	Handle callback .
14374	Handle an execute reply .
14375	Handle an input request .
14376	Handle a kernel alive .
14377	Handle object info reply .
14378	Handle a pyout message .
14379	Handle a stream .
14380	Handle a reply .
14381	Execute given file at path .
14382	Interrupt kernel .
14383	Reset the execution state .
14384	Restart kernel .
14385	Sets the call tip .
14386	Marks the request as complete .
14387	Process an error message .
14388	Print an execute message .
14389	Handle changes in document contents .
14390	Add a plugin .
14391	Chain static plugins .
14392	Generator that yields plugins .
14393	Simplify plugins .
14394	Configure plugins .
14395	Loads the entry points .
14396	Loads the plugins .
14397	Convert latex data to PNG .
14398	Convert latex to HTML .
14399	Convert a math file to an image .
14400	Check if the distribution exists .
14401	Iterate over Process instances .
14402	Return the percentage of CPU cores .
14403	Return a dict representation of this object .
14404	The process name .
14405	Return the path to the executable .
14406	Return the children of this process .
14407	Calculate CPU percentage .
14408	Returns the percentage of memory .
14409	Get memory maps for this platform .
14410	Check if the process is running .
14411	Suspend the process .
14412	Resume the process .
14413	Kill the process .
14414	Wait for the device to complete .
14415	Wires the kernel for a kernel .
14416	Generate a jijack gjack .
14417	Check if an IP is shadowed .
14418	Initialize the transformers
14419	Register a transformer .
14420	Unregisters a given transformer .
14421	Initialize the checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize the handlers
14425	Register a handler .
14426	Unregister a handler .
14427	Handle prefilter .
14428	Finds a handler by line_info .
14429	Transform a line of text into a new line .
14430	Preprocess a prefilter line .
14431	Preprocess prefilter lines .
14432	Instances of IPyAutocall in user_ns .
14433	Allow and echo in multi - line statements if multi - line special .
14434	Check for prefilter .
14435	Check if the initital identifier on the line is an alias .
14436	Handles the prompt .
14437	Handle the given line .
14438	Process a line .
14439	Handle ipython magic .
14440	Handle a command line .
14441	Handle a specific line .
14442	Reimplemented to callTipFilter .
14443	Stop the timer .
14444	Overrides paint_panel_tips .
14445	Show the call info .
14446	Show the tip .
14447	Called when the cursor is changed .
14448	Return a copy of a proxied attribute .
14449	Given a path return the absolute path .
14450	Validate a schema against a schema .
14451	The masked dict .
14452	Determine if a virtualenv is running .
14453	Calculate the frequency of each word in fnames .
14454	Creates a view decorator .
14455	Return a list of default aliases .
14456	Define a new alias .
14457	Define a new alias .
14458	Validate alias command .
14459	Call an alias
14460	Transform an alias .
14461	Expand aliases .
14462	Generate a help directive .
14463	Reset sgr .
14464	Split string into actions .
14465	Get a QColor from the given color map .
14466	Get the QTextCharFormat
14467	Generate a JWT .
14468	Decorator for mutex .
14469	Remove all of the JWT from the tree .
14470	Checks if the given node is already used .
14471	Validate JWT .
14472	Create a new semaphore .
14473	Return the common prefix of a list of files .
14474	Event handler for event handler
14475	Returns QSizeHint .
14476	Return whether the cursor can cut the cursor .
14477	Determines if the clipboard can be copied .
14478	Clear the input buffer .
14479	Cuts the text cursor .
14480	Execute the specified source .
14481	Get input buffer .
14482	Sets the input buffer .
14483	Sets the font
14484	Pastes text into clipboard .
14485	Prints a print dialog .
14486	Move cursor to top .
14487	Reset font .
14488	Append a custom prompt .
14489	Append an HTML page .
14490	Append plain text to plain text .
14491	Appends plain text to the end of the prompt .
14492	Clear a temporary buffer .
14493	Completes the given items .
14494	Fill a temporary buffer .
14495	Returns True if the key is down down .
14496	Create the widget .
14497	Create a custom page control .
14498	Event handler for key press events
14499	Gets the plain text of a block .
14500	Gets the cursor position .
14501	Gets the column of input buffer cursor .
14502	Get input buffer cursor line .
14503	Gets the cursor position .
14504	Get selection cursor .
14505	Insert a prompt .
14506	Insert the given HTML .
14507	Insert plain text into cursor .
14508	Insert text at cursor position .
14509	Keep the cursor in the buffer .
14510	Called when the keyboard is closed .
14511	Displays a text page .
14512	Called when the prompt is started .
14513	Read a line of text .
14514	Set the prompt for the prompt .
14515	Sets the cursor .
14516	Show the prompt .
14517	Adjust the scrollbar .
14518	Main function .
14519	Copy a config file .
14520	Create a profile directory by name .
14521	Find profile directory by name .
14522	Convert a cmp = function into a key = function
14523	Read a file .
14524	Parse multi - line output .
14525	Creates a temporary file .
14526	Close the stream .
14527	Write data to the stream .
14528	Adds a new HeartbeatHandler .
14529	Add a new heart failure handler .
14530	a heart just beat
14531	Return a list of items from a given sequence .
14532	Convert a path to a filename .
14533	Walk a directory tree yielding all subdirectories .
14534	Prints a summary of the elapsed time .
14535	Return a human - readable time unit .
14536	Extracts the Wininst configuration from the given dist_filename .
14537	Uncaches a zipdir .
14538	Quote an argument .
14539	Checks if a dist is installed .
14540	Set fetch options .
14541	Create the home directory .
14542	Check if a file is an archive file .
14543	Temporarily modify a proxy .
14544	Create a readonly proxy for the given object .
14545	Return a new notebook node .
14546	Return a new metadata node .
14547	Return a new author .
14548	Return True if the given path is writable .
14549	Unquote a filename .
14550	Get file name .
14551	Search for a file in a directory .
14552	Returns the path to the home directory .
14553	Returns the path to the xdg_config file .
14554	Determine the IPython directory .
14555	Get IPython package directory .
14556	Returns the path to the python module .
14557	Determines if the target is older than the given target .
14558	Calculate the MD5 hash of a file .
14559	Check if IPython config file exists .
14560	Update the suggestion dictionary .
14561	Return a list of suggestions for the given object .
14562	Return the suggestions for the given object .
14563	Return the relative path of the current working directory .
14564	Return a copy of this pattern with the given pattern .
14565	r Returns a list of lines .
14566	Return the MD5 digest of the file .
14567	Start profiling .
14568	Write a profiler report
14569	Finalize the profiler .
14570	Handles the event loop .
14571	Enables wx wx wx .
14572	Disable GUI WX .
14573	Disable QT4 .
14574	Enables or disables interactive GUI .
14575	Enable Tkinter .
14576	Enable pyglet integration .
14577	Increment the wave s shift .
14578	Initialize the database
14579	Execute SQL statement .
14580	Return all sessions .
14581	Return the last n rows .
14582	Given a string return a list of lines that match the given string .
14583	Returns the path to the history file .
14584	Set a session name .
14585	Reset the session .
14586	Get a range session .
14587	Stores the output .
14588	Write the output cache .
14589	Stop the session .
14590	Return the number of CPU cores .
14591	get system per CPU times
14592	Return a list of disk partitions .
14593	Return a list of PIDs .
14594	Return a nice representation of a pair .
14595	Format a list of statements .
14596	Return a string representation of a short stack .
14597	Decorator for expensive methods .
14598	Join a list of regexes .
14599	Remove file from given path .
14600	Update a dictionary .
14601	Update cluster profiles
14602	Start a cluster
14603	Stop a cluster .
14604	Find the path to a command .
14605	Prints the body of the system .
14606	Find code units for a given morfs .
14607	Report all files in a given directory .
14608	A decorator to make sure a function is raised .
14609	Set the traceback .
14610	Decorator to mark a function as timed out .
14611	Load IPython extensions
14612	Initialize the code .
14613	Run code from IPythonApp .
14614	Run startup files from the profile .
14615	Run executable files in IPython application .
14616	Run code on command line .
14617	Run the module .
14618	Decorator to make a generic function .
14619	Returns the filename of a coverage file .
14620	Return the contents of a data file .
14621	Escape a string .
14622	Run the coverage report
14623	Create a copy of the local static files .
14624	Write HTML to file .
14625	Calculate the hash of a file .
14626	Write HTML file .
14627	Read status file .
14628	Write status to file .
14629	Sort two lists .
14630	Get a slice from a sequence .
14631	Chunk a sequence into chunks .
14632	Read the configuration file .
14633	Read the MANIFEST manifest .
14634	Converts a glob pattern to a regular expression .
14635	Check if filename matches any of the patterns .
14636	Return a list of versioned files .
14637	Start a kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Get a kernel by kernel id .
14641	Get kernel port information .
14642	Return a notebook with the given kernel id .
14643	Start a kernel for a given notebook .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Create an IPub stream .
14648	Create a new kernel stream .
14649	Create the hb stream .
14650	Reset this instance .
14651	Export an HTML file .
14652	Export an xhtml image to a file .
14653	Ensure image tag is utf8 .
14654	Convert html to HTML .
14655	Export the image to file .
14656	Gets a unique or None .
14657	Generate a query based on search terms .
14658	Construct a query string from a query string .
14659	Generate a query for the given number of days .
14660	Generate a query for the given date field .
14661	Gets a null or empty string from a query
14662	Remove case - insensitive fields .
14663	Add command line options .
14664	Validate attribute attribs .
14665	Determines whether the given method should be used for this class .
14666	Rotate the cursor .
14667	Monkey patch zmq
14668	Create an XML parser for a given schema .
14669	URL of websocket .
14670	Reserialize a reply
14671	Inject a cookie .
14672	Starts the loop .
14673	Start the background loop .
14674	Stop the listening loop .
14675	Fload the file .
14676	Get index .
14677	Seek to the given index .
14678	Edit a block .
14679	Print a block .
14680	Prints all available blocks .
14681	Generate a series of subjects
14682	Batch a function .
14683	Run a function in a separate thread .
14684	Run a collection of processes .
14685	Return a wrapped version of the wrapped function .
14686	Decorate a function with the given names .
14687	Find the first line of a tbsource .
14688	Return a list of lines that match pos .
14689	Displays a countdown .
14690	Stop the engine .
14691	Perform a pre - call .
14692	Called after a post call .
14693	Save the message history .
14694	Synchronizes the results of a transaction .
14695	Return the spin after f .
14696	Return a list of all the messages .
14697	Gets a message if there is one one .
14698	Decorator to define a property .
14699	Convert a list of fields into a tuple .
14700	Parse a configuration file .
14701	Return a list of module names for the given path .
14702	Get the list of root modules .
14703	Generate a quick completer for a command .
14704	Returns the completion of a module .
14705	Compute the completions for the given event .
14706	Compute completions for an event .
14707	Quote an attribute .
14708	Configure the plugin .
14709	Write a report to the test suite .
14710	Adds an error
14711	Adds a failure
14712	Record success .
14713	Return a random number of samples .
14714	Return a random sample of weights .
14715	Register an engine .
14716	Unregister an engine .
14717	Handles the status of a task .
14718	Dispatch a submission .
14719	Verify that the task is unreachable .
14720	Mark a message as unreachable .
14721	Determines whether the job should run .
14722	Save the unmeted message for this job .
14723	Submit a job .
14724	Dispatch a result .
14725	Handle a result .
14726	Handles unmetable dependency .
14727	Update the graph based on the dependency graph .
14728	Start the log file .
14729	Print the log state .
14730	Write a log message .
14731	Write data to log .
14732	Stop logging .
14733	Return a new notebook node .
14734	Add an object to the chain .
14735	Add a regular expression .
14736	Dispatches the given key .
14737	Return a list of tuples matching the key .
14738	Creates a directory if it doesn t exist .
14739	List all available notebooks .
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Find the path of a notebook .
14744	Return the path to the notebook .
14745	Get information about a notebook .
14746	Get a notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook
14753	Tokenize a text file .
14754	Generate tokens for a given source .
14755	Load the default configuration .
14756	Default class methods .
14757	Parse command line .
14758	Initialize the app .
14759	Initialize the shell instance .
14760	Initialize the banner
14761	Return the repr of the given object .
14762	Parse a notification name .
14763	Set the default value .
14764	Triggered when a trail change occurs .
14765	Return a dict of trait traits .
14766	Return the metadata for a given trait .
14767	Validate the given value .
14768	Get the default value for this object .
14769	Checks whether the given operation is complete .
14770	Determines whether this operation is unreachable .
14771	Return a dict representation of the model .
14772	Return the depth of the tree .
14773	Prints out a bintree .
14774	Disambiguate a DNS URL .
14775	Reduce f to f .
14776	Validate engine targets .
14777	Dispatch a message to monitor traffic .
14778	Dispatch a query message .
14779	Handle a new heartbeat .
14780	Handles a heart failure
14781	Save a task request .
14782	Save a task result message .
14783	Save IOPub message .
14784	Send a connection request
14785	Register a new engine .
14786	Unregisters an engine .
14787	Callback called when a new connection is completed .
14788	Send a shutdown request .
14789	Remove all records matching the given message .
14790	Extracts a record from a dict
14791	Get the results of a client .
14792	Gets a history message .
14793	Query the database .
14794	Change the current working directory .
14795	Decode a command .
14796	Run a command under the root path .
14797	Execute the Rscript command .
14798	Dispatch a message .
14799	Return True if message is from this session .
14800	Create a report on the given morfs .
14801	Annotate a file .
14802	Get installed version .
14803	Convert unicode objects to unicode .
14804	Extract the headers from a message or dict .
14805	Check for unpackers .
14806	Create a message
14807	Sign a message list .
14808	Serialize a message .
14809	Send message .
14810	Send raw message .
14811	Receive messages from a socket .
14812	Feed identities .
14813	Unserialize a message .
14814	Save SVG document to file .
14815	Convert SVG to clipboard .
14816	Convert SVG data to SVG .
14817	Return dictionary with information about the object .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Returns the argument spec for the given object .
14821	Return the docstring for a call .
14822	Find the file name of an object .
14823	Find the source line of an object .
14824	Get the definition of an object .
14825	Return the header of the header .
14826	Print a message to stdout .
14827	Print the definition of obj .
14828	Pretty - print the docstring .
14829	Print the source of an object .
14830	Print the contents of a file .
14831	Format a list of fields .
14832	Create a protobuf .
14833	Parses a namespace table .
14834	Start a thread to run a thread .
14835	Decorator to mark a function as a Deferred .
14836	Find the best string matching the given query .
14837	Return a string representation of the object .
14838	Return the document as XML .
14839	Import all modules in a package .
14840	Invert dictionary to dictionary
14841	Merge this location into another location .
14842	Convert an object to primitives .
14843	Return a string representation of the output .
14844	Returns a list of available figures .
14845	Print a figure .
14846	Run matplotlib executable .
14847	Select figure format .
14848	Find the gui and return it .
14849	Activate matplotlib .
14850	Configure the inline backend
14851	Activate matplotlib .
14852	Trace a frame .
14853	Start tracing thread .
14854	Stop the trace .
14855	Start the tracer .
14856	Returns a function that prints the trace .
14857	Start the trace .
14858	Stop the collector .
14859	Pauses profiling .
14860	Resume the background thread .
14861	Get line data .
14862	Recursively collect a list of exceptions .
14863	Render a traceback .
14864	Process coverage information .
14865	Returns the canonical directory for a given morf .
14866	Returns the source code for the given file .
14867	Determines if filename should be traceable .
14868	Determines if a file should be traced .
14869	Print warning message .
14870	Check for packages that match source .
14871	Initialize the tree .
14872	If auto_data is True stop it
14873	Exclude a regex
14874	Return a regex that matches the regex .
14875	Save data to disk .
14876	Combine multiple files into one .
14877	Collect data .
14878	Calculate the analysis of a given morf .
14879	Return the analysis for a given morf .
14880	Analyze the code unit .
14881	Produce a report of the given morfs .
14882	Annotate a report .
14883	Create HTML report .
14884	Produce an XML report .
14885	Display an IPython notebook .
14886	Display a list of objects .
14887	Publish the given objs .
14888	Display a list of objs .
14889	Publish a jpeg image
14890	Display a list of objects .
14891	Display a list of objects .
14892	Display a javascript object .
14893	Reload the file .
14894	Find the path to a command .
14895	Run a system command .
14896	Forward read events .
14897	Read data from fd .
14898	Find the launcher class for the given kind .
14899	Start the cluster .
14900	Build the launcher class .
14901	Start the engine .
14902	Start the ZMQ thread .
14903	Get a wx app
14904	Check if an event loop is running .
14905	Start the event loop .
14906	Get QApplication instance
14907	Check if an event loop is running .
14908	Start an event loop .
14909	Create a canvas with the given size .
14910	Draw a cross .
14911	Draw a line between pos1 and pos2 .
14912	Returns text at given position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Generate a UUID .
14915	Generate a unique key from a dictionary .
14916	Get the domain from a URL .
14917	Parse URL query string .
