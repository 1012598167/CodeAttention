0	Create a new instance of Axi .
1	Cancel a request .
2	Determines whether a value is a viewbuffer .
3	Check if the browser is enabled .
4	Iterates over an object .
5	Extend the properties of another object
6	Writes a package . json file .
7	Process the bundle
8	Checks if the page has already been loaded
9	Attempts to attempt to attempt to attempt to reload the page .
10	Format an error message .
11	Pad a string to a decimal number .
12	Parse a string segment .
13	Parses segments of a buffer .
14	Parses the ECDTT string .
15	Calculates the key provider for a given key
16	Generates a random 32 - bit entropy for entropy .
17	Add an integer entropy to the array .
18	Generate entropy for entropy .
19	Decrypts a message .
20	Initialize entropy .
21	Convert the given input to the given value .
22	Verify the given data
23	Recursively recover the given data .
24	Finds a message for the given message .
25	Create a FormGroup .
26	The Loader class .
27	Create an item content .
28	Represents a table .
29	Create an element .
30	Constructs a ButtonGroup .
31	Create a grid row .
32	Create a form field .
33	The content of a card .
34	Representation of an item .
35	Generates a comment for a comment .
36	Generate a stat label
37	Create a meta meta meta .
38	Create a container element .
39	Constructs a step group .
40	Create a divider .
41	Create a Header object .
42	Constructs a grid .
43	Create a breadcrumb breadcrumb
44	Representation of a card .
45	Constructs an item group .
46	Constructs a grid column .
47	Builds an image for an item .
48	Constructs a new CardGroup .
49	Create a table row row row .
50	Create a feed .
51	Creates a tab pane .
52	Create a list of content .
53	Creates a Button Button .
54	Create a table cell .
55	Creates a divider divider .
56	Create a message list .
57	Generates a TableHeader .
58	Create a comment group .
59	Show an alert .
60	Represents a segment .
61	Creates a LineLineLineLineLine .
62	Renders the given props .
63	Create a feed .
64	Create a placeholder element .
65	Creates an Accordion .
66	Constructs a Placeholder element .
67	Construct a DropdownMenu .
68	Create a list of icons .
69	Generate an HTML element .
70	Constructs a StatsGroupGroup .
71	Create a new Stats object .
72	Create a segment group .
73	Generate a table cell header .
74	Create a feed .
75	Constructs a LabelGroup .
76	Create an attribute for a feed .
77	Creates a Dropdownider .
78	Generate a summary for a feed .
79	Generates a step for a step .
80	Initialize a new Image .
81	Calculates the absolute ratio for the given canvas
82	Set background image
83	Create a sprite sprite from a body .
84	Render body
85	Set the body of a body .
86	Create a list of pages
87	Checks if a value is a window object .
88	Normalizes the given options object .
89	Generate a summary for a summary
90	Returns a string representation of a single item .
91	Create a new keyword
92	Checks whether the given AST is in the AST .
93	Convert metadata to metadata
94	Finds a package . json file .
95	Toggle class name
96	Flattens an array of sources into a single array .
97	Parse a json file
98	Remove duplicates from array
99	Generate Markdown file
100	Flatten options .
101	Appends a string to a string
102	Sorts a list of nodes in ascending order
103	Sort a list of nodes
104	Draws the graphics
105	Represents a multi - vertices .
106	Rotates a matrix .
107	Make a matrix for a matrix
108	Calculates the ratio of a frustum .
109	Process a texture
110	Checks the zoom level of the zoom level .
111	Rotates a 4 - 4 rotation matrix .
112	Check to see if a matrix is in a matrix
113	Add event listeners
114	Get the value of a tag
115	Display error message
116	Clear error message
117	Display a message
118	Get mouse position .
119	Handler for mouseup event .
120	Event handler for the document .
121	Convert a mouse event to a mouse event .
122	Event handler for the document .
123	Mouseup event handler
124	Initialize the document .
125	Mousemove event handler
126	Handle mouse wheel events
127	The keypress event handler .
128	Event handler for keydown event .
129	Change key value
130	Animate the animation .
131	Animation function for animation
132	Converts a quaternion to a quaternion
133	Computes the quaternions of a quaternion
134	Event handler for orientation .
135	Render the canvas
136	Render the scene
137	Creates the hot spots of the hot spots .
138	Destroys all hot spots .
139	Render a hotSpot .
140	Merge the configuration from the scene .
141	Toggle fullscreen fullscreen mode
142	Change fullscreen mode
143	Determines the height of a view .
144	Stop the animation
145	Load the screen
146	Load the scene
147	Stop orientation .
148	Trigger an event .
149	Waits until the current state is satisfied
150	Get mouse offset .
151	Parse a float value .
152	Compare two numbers .
153	Compares two numbers .
154	Extract inline content from given string
155	Builds a sass file .
156	Provides the form of a form .
157	Create a new Producer .
158	Represents a context .
159	Creates a new alternative for the given options .
160	Performs a request to the client .
161	Invoked when the request is received
162	Called when the response is successful .
163	Called when the user has finished
164	Generate a list of assets
165	Get the start position of the sidebar
166	Adds a method to the object .
167	Adds a method to the object .
168	Copy a file to another
169	Copy all files in a directory
170	Convert a path name to a string
171	Empty directory
172	Exit process
173	Loads a template
174	Main entry point
175	Create a directory
176	Create a new option .
177	Prints a warning message .
178	Write a string to a file
179	Binds a function to a D3 .
180	Adjusts the options for each package
181	Middleware for middleware
182	The load event handler
183	Prefix substring with prefix
184	Create a canvas
185	Smoothly smooth area
186	Calculates the coordinates of a pixel at a given point .
187	Calculates the diagonal area for a given point
188	Generate a list of patterns
189	Builds a matcher
190	Calculates the delta of the left right right .
191	Computes a linear linear linear linear variance
192	check form form data
193	Reset transfer
194	Check if the button is active
195	Updates the source code for the source code .
196	set target control
197	Updates the target element
198	Updates the position of the scroll positions .
199	Convert a score to a string
200	Calculates the score of a password .
201	Check if a string is repeated
202	Initialize the password
203	Represents an array of levels up to the database .
204	Fixes a raw tx
205	Initialize data for the given data
206	Represents a transaction .
207	Represents a request .
208	Compile sass file
209	Try to load a bundle file .
210	Parse a string .
211	Reads a buffer .
212	Recursively processes a union of rows in a union of rows .
213	Recursive function to handle SELECT rows
214	Convert a column to a column .
215	Convert a column to a column .
216	Strips the query for a query .
217	Split a fragment into a list of fragments .
218	Get a node with the given type
219	Determines the connection to the database .
220	Validate row rows
221	Builds a WHERE clause for a key .
222	Clones an object
223	Builds a string of length strings .
224	Concat an array of strings .
225	Convert an object to a string .
226	Replaces a string with the given text .
227	Create a new Node
228	The Media constructor .
229	Play the media
230	Handles the game .
231	Pause media .
232	Event handler for the game .
233	The Media Manager
234	Respond to the MediaManager .
235	Called when the MediaManager is released .
236	Returns a full URL for the given URI .
237	Convert a CDRI to a CDN
238	Process a local directory
239	Parses a URI to a file .
240	Context constructor .
241	Returns an array of uniqueCapabilities for the given capabilities .
242	Compares two maps .
243	Returns true if the given directory is a directory .
244	Determines the project root
245	Recursively delete svn folders
246	Finds all plugins in a directory
247	Runs the commander runner .
248	Extracts a script file .
249	Check if a hook is disabled
250	Initialize the command
251	Generates all hooks for a hook
252	Get all hooks for a plugin
253	Get all scripts in a directory
254	Get all scripts for a hook
255	Get all plugins for a plugin
256	Get all plugins for a hook
257	Ensure that the capabilities are unique
258	Copy a file to another directory
259	Represents a plugin spec .
260	Get plugin path
261	Check if a command is installed
262	Gets an array of platforms .
263	Get a list of plugins from the project .
264	Finds the dependencies of a plugin .
265	Creates a replacement for the given manifest .
266	Check if the plugin is valid
267	Extracts the platform information from a directory .
268	Extracts the name from a platform name .
269	Processes a message
270	Runs the engine scripts
271	Create a package json file .
272	Prepare platforms for platforms
273	Add an icon to the icon .
274	Generates a map of paths for a given resource
275	Determines if the Android project is enabled .
276	AndroidManifest .
277	Checks the requirements of the provided requirements .
278	Finds the version of the given version
279	List all requirements for a project
280	Validate a folder name
281	Convert a node to a string representation
282	Parses a list of entries in a tree .
283	Transforms a travis file to a travisit .
284	Checks whether a given package is a package .
285	Get the dependency for a git repository
286	Extracts an array of objects from a service .
287	Extracts the values of a single attribute .
288	Recursively recursively
289	Set the value of the given attribute
290	Removes numeric values from the numeric array .
291	Add a relationship to the schema .
292	Add a query constraint to the query .
293	Add a constraint to the query .
294	Adds a constraint to the table .
295	Adds a tag to the tag .
296	Removes a facet from a table .
297	Removes a facet from a table .
298	Removes the schema from the schema .
299	Removes a facet from a facet .
300	Removes a facet from the query .
301	Removes the query constraints for the given facet .
302	Remove a tag .
303	Toggle the value of a facet .
304	Computes the query for the given path .
305	Determines whether the given facet is defined in the schema .
306	Checks whether the given value is in the given facet .
307	Returns an array of facts that are applied to the current facts .
308	Sets the value of a query .
309	Sets the parameters of a search query .
310	Retrieves the path for a given key .
311	Run command line command
312	Compile Sass AST
313	Compile all scripts
314	Compile a JavaScript file .
315	Compile a module
316	Returns the state of the plugin .
317	Helper function to handle helpers
318	Creates a batch event from the store .
319	Initialize a new instance of Firebase config .
320	Set default values
321	Get the id of the payload .
322	Creates an instance of FirebaseScript instance
323	Parse a CSV file .
324	Parse JSON file .
325	Parse a json file .
326	Check whether the given props are valid .
327	Invokes a callback with the given arguments .
328	Gets the closest DOM node from a DOM node .
329	Gets the instance of an instance from the DOM node .
330	Gets the node from the DOM node .
331	Traverses a mouse event .
332	Generates a map of event names .
333	Constructs a warning message .
334	Gets the composition of a composition event type .
335	Returns true if the given key is a keypress event .
336	Gets the value of a given property .
337	Gets the target element for a key .
338	Gets the top level of a given event .
339	Listen for a specific event .
340	Gets the event target object .
341	Construct a synthetic event .
342	Sets the text node .
343	Create a string representation of a style string .
344	Appends a child state to the container .
345	Unmounts a component instance .
346	Computes the expiration of the async async time .
347	Stringify content .
348	Get the options for a given loader
349	Normalize a rule object .
350	Finds the parent of a given node
351	Evaluate a pure node
352	Get offset .
353	Get the offset of the viewport .
354	Gets the last child of the current tree .
355	Appends the current node to the target .
356	Append the current tree
357	Removes a view from a selector
358	Gets the pid of the process command .
359	Kill a regular expression
360	Lists all ports in the given port
361	Removes all websocket handlers .
362	Verifies that the application platform is installed .
363	Checks whether a given URL is a host .
364	Normalizes the version of the given version
365	Updates the project file .
366	Reset the project file
367	Gets the build content for a platform
368	Get the version of the migration file .
369	Parses a container for a given container .
370	Push a remote file to a remote file
371	PURE_IMPORTS_END
372	Pull a remote device from a remote device
373	Create a new emulator
374	Checks if a device is installed .
375	Recursively rebuilds the object hierarchy
376	Determines if the collision is a collision .
377	Returns the position of the game .
378	Constructs a new UrlString .
379	Represents a request queue .
380	The MessageTracker .
381	Connect to the socket .
382	Initializes the socket .
383	Initializes the client .
384	A Graph .
385	Removes the specified node
386	Iterates over an array .
387	Convert an array to a map .
388	Create a watcher for a file set of files
389	Start watching for changes
390	Sets the value of a template .
391	Encode a utf16 string
392	Parses a unicode escape character .
393	Reads a JSX token .
394	Gets the declaration of a declaration .
395	Binds the given node to the container .
396	Convert a string to a string
397	Unescape the given identifier
398	Gets the scope of a given node .
399	Checks whether a declaration is a declaration or not .
400	Check if a given node is a variable name .
401	Convert a string to a string .
402	Determines whether or not the given textspan is a span .
403	Determines whether or not a terminal or not .
404	ECMA - 262 12 . 1
405	Finds the first element in the given position .
406	Determines whether the given entity is a name of a given entity .
407	Resolve a named entity name .
408	Checks whether a name is a reserved name .
409	Checks whether a given export is a symbol or not .
410	Gets the type of a property .
411	Returns the type of the given node .
412	Returns the type of the given variable declaration .
413	Gets the type of a variable .
414	Gets the type of a binding pattern .
415	Gets the type of the given pattern .
416	Gets the parameters of the given type .
417	Determines the base type of a base class .
418	Checks whether a given node is a reference or not .
419	Creates a map for the given symbols .
420	Returns the union signatures of the given type .
421	Gets the property of the given object .
422	Gets the type of the given type .
423	Gets the property of a given type .
424	Gets the flags of a given type .
425	Gets the type of the given class .
426	Returns the type of the given identifier for a given reference .
427	Add a set of types .
428	Determines whether a given property is a known type .
429	Determines whether the type of the given type is a type .
430	Determines whether a given type is a generic type .
431	Checks whether a variable is assigned to a variable .
432	Determines the type of the given expression .
433	Returns the type of the given parameter .
434	Gets the contextual type of a variable expression .
435	Apply a mapping to a type .
436	Checks whether the given index is a contextual type .
437	Gets the contextual type of the given object literal .
438	Gets the contextual type of an expression .
439	Gets the signature of a given type .
440	Gets the contextual type of the given AST .
441	Gets the name of the given attribute .
442	Checks whether a property access is access to a class .
443	Gets the property name for a given index .
444	Gets the call signature for a given type .
445	Gets the arguments of a CallExpression node .
446	Returns the effective decorator for the given argument .
447	Gets the argument type of the argument .
448	Gets the argument of the argument .
449	Checks whether an argument is a valid expression .
450	Gets the diagnostic message for a given operator .
451	Resolve a CallExpression .
452	Finds the signature of a given node .
453	Check if a CallExpression is a call expression .
454	Assigns the elements of a binding pattern .
455	Reports a type parameter .
456	Gets the type of a promise .
457	Checks whether a given parameter is valid .
458	Checks whether a given node is a constant expression .
459	Check whether a node is a type expression .
460	Check the decorators of a decorator .
461	Checks if the given node is a variable .
462	Checks if a parameter is valid .
463	Checks the variable declaration of a variable declaration .
464	Checks if an element is valid .
465	Checks the type of a variable declaration
466	Checks the source for a given source .
467	Copies a symbol .
468	Gets the parent type of a class .
469	Gets all members of a given type .
470	Gets the exports of a given node .
471	Gets the reference declaration of a given node .
472	Gets the value of a given node .
473	Gets the temp variable name for a given file .
474	Emit all files in the given target .
475	Creates a temporary variable name for the given flag .
476	Make a unique name for a base name .
477	Encode sourceMap for sourceMap .
478	Creates a temporary variable for the given name .
479	Indents the given node .
480	Emits an expression for a given node .
481	Emit a variable declaration for a variable declaration
482	Emit an assignment to a module .
483	Emit an assignment to a variable .
484	Ensure that the given expression is emitted .
485	Finds the contents of a file .
486	Read a JSON file .
487	Parses a config file .
488	Removes the named properties of a node
489	Determines whether or not a callExpression or not .
490	Gets the best index of a list of arguments that match the first argument .
491	Finds a token in a given position .
492	Finds the first position of a given file .
493	Returns the JS tag for a given position .
494	Removes the name of the given name .
495	Fixes the given token .
496	Checks whether a node is a list element or not .
497	Finds the closest node in the given range .
498	Checks whether the given range is valid .
499	Checks whether a given position is inside a given position .
500	Gets the semantic declarations of a given file .
501	Gets the name of a given name .
502	Gets the scope of a given token .
503	Determines if object literals are valid .
504	Determines whether or not imports or not .
505	Returns the object literal for the given context .
506	Filters all attributes for the given attribute .
507	Checks whether a node is access to a write access or not .
508	Retrieves the given signature for the given signature .
509	Checks whether a given symbol is a variable or not .
510	Returns the type of a given token .
511	Gets the parameters of a given node .
512	Calculates the score of the given index .
513	Get origin origin for a given request
514	Translate an element to a drag
515	Checks if the given angle is valid .
516	Binds a touch event .
517	Sets the duration of the given type .
518	The touchstart event handler .
519	Gets the style property of an element .
520	Sets the style of an element .
521	Set element transform
522	Convert relative path to path
523	Extract the payload from the given token .
524	Sets the contents of a chapter
525	Gets the hash of a chapter for a chapter
526	Handles the chapters in the page
527	Inserts an element at the specified index .
528	Create a dropdown menu
529	Create a button .
530	Removes a button
531	Remove all buttons
532	Toggle the sidebar .
533	Filter the summary of a path
534	Initializes the dropdown menu .
535	Initializes shortcuts
536	Add a directive
537	Represents a Rule .
538	Snapchat class .
539	Gets the module index of the given file
540	Parse a file .
541	Metadata .
542	Check for utils
543	Represents a prepared query .
544	Error class .
545	Throws an error if not found .
546	Throws an error .
547	Extend the client .
548	Validate policy
549	Validate a protocol .
550	Validate socket options
551	Validate the encoder options .
552	Sets the default options for a protocol .
553	Gets the name of a map .
554	Gets the data type of a data type .
555	Represents a header .
556	Generate a Timed timestamp .
557	Represents a long integer .
558	The aggregate .
559	Represents a connection .
560	Constructs a new TimePolicy .
561	Constructs a new DataTable .
562	Represents a data collection .
563	Simulate a list of promises .
564	Metadata .
565	The schema parser parser .
566	A schema parser .
567	The schema parser parser .
568	Get the schema for a given version
569	Ensures the routing key for the user key
570	Get all js files in a directory
571	Constructs a new Schema .
572	Copy a buffer to a Buffer
573	Convert an error to the stack trace .
574	Logs an event emitter .
575	Convert an object to camelCase
576	Deep extend function
577	Creates an iterator over an array .
578	Convert iterator to array
579	A binary search .
580	Inserts an item in an array .
581	Asserts that a function is valid .
582	Repeats a string .
583	Wraps the given callback function .
584	Represents a child policy policy .
585	Event constructor .
586	Constructs a new FrameReader .
587	Represents a connection .
588	Generates a clock id
589	Get node id
590	Gets the ticks of the ticks .
591	Get the ticks for a given date .
592	Generate a buffer
593	Encoder .
594	Gets the number of leading zeros .
595	Represents an index .
596	Sorts a list of files
597	Loads a mode .
598	Updates the scroll position of the document .
599	Starts the cursor blinking
600	Calculates the coordinates of a given position .
601	Updates a document in the document .
602	Sets the cursor position to the cursor .
603	Highlight a line .
604	Retrieves the value of an object .
605	Represents a Flow .
606	Removes an event .
607	Trigger an event .
608	Called when the data received
609	Generates a unique identifier for the given file .
610	Send all files in the queue
611	Create an input element .
612	Initializes the mouseover .
613	Removes an element from the DOM .
614	Checks if the upload is uploaded
615	Determine if the upload is uploaded
616	Start the next upload .
617	Process a file upload .
618	Cancel a file
619	Return true if file is unique
620	Calculates the size of the file .
621	Updates the size of the animation .
622	Handle progress events
623	Restarts the flow .
624	Initializes the chunks of the flow .
625	Gets the progress of the current stream .
626	Determines whether the chunks are downloaded .
627	Calculates the size of the video .
628	Reads web file .
629	Start the test execution
630	Loads the file into the queue
631	Determines if the upload state should be uploaded
632	Gets the data for a request .
633	Evaluate provided data
634	Iterates over each element in the array
635	Create a json file .
636	Check if user is valid
637	Inserts the table into the table .
638	Counts the number of records .
639	update table row
640	Create a getter for a header .
641	Represents a command .
642	Represents a single parameter .
643	Represents a transformation matrix .
644	Represents a range of parameters .
645	Represents a configuration .
646	Constructs a new Cloud Platform .
647	Gets the mode of the given env .
648	Resolve the given url
649	The base configuration of a file .
650	Finalize resource type
651	Construct a new Drag .
652	Iterates over an object .
653	Iterates over the given object .
654	Checks if value is a plain object .
655	Registers a log type .
656	Create an HTML element
657	Add an element to an element .
658	Toggle a class .
659	Get pointer position .
660	Appends content to an element .
661	Get the data for an element .
662	Checks if an element has a data object .
663	Removes the data from the DOM .
664	Handle multiple events
665	Remove an event handler .
666	Bind events on an event .
667	Initializes all scripts .
668	Set timeout timeout
669	Set text content
670	Creates a throttled throttled function .
671	Checks if an event type is valid .
672	Constructs a new Component .
673	Check if a range is within a range .
674	Gets the value of a function .
675	Create an array of time ranges .
676	Creates an array of time ranges .
677	PUBLIC CONSTRUCTORS
678	Get the file extension for a given path .
679	Load a track
680	Constructs a color object .
681	Detects the player .
682	Parses the given value .
683	Checks the progress of the animation .
684	Finds the first truthiness of the given type .
685	Mark a plugin .
686	Called when the user has changed
687	Create a new plugin instance
688	Create a new plugin instance
689	Create a new video
690	Counts the number of bytes .
691	Sets the colors of the segments .
692	Publish a message to the module
693	Initializes the window resize event .
694	Sets the width of an element .
695	Create a new Handlebars environment .
696	Formats options .
697	Set the message size
698	Redraw a number
699	Initialize index file .
700	Gets the tab data .
701	Gets the value of an object or an object .
702	Calculates the position of the viewport .
703	Checks the version of the latest version of the latest version
704	Parses a version string .
705	Creates a cell accessor .
706	Get all projects
707	Get the configuration for the process .
708	Filter environment variables .
709	Merges the given json into an array of strings .
710	Register a template
711	Get a template for a given name
712	Generate the engine
713	Unregisters a socket .
714	Connect to the connection
715	return status status
716	Prepare a job
717	Kill the given model
718	Sets the body of a request .
719	Create a function that checks the required parameters for a request .
720	Gets the project s project
721	Middleware for middleware
722	Middleware for admins
723	Block for a plugin .
724	Finds nested folders in a directory
725	Resolve absolute paths from a file
726	Finds an array of libraries for the app .
727	Fixes a file .
728	Generate an accessor function
729	Creates an array of accessors for a given environment variable .
730	Parse the AST node .
731	Check if a file exists
732	Initialize the Program
733	Sets the value of a file .
734	Run the runtime
735	Abort a file .
736	Returns a list of registered type names .
737	Removes an event listener .
738	Bind an event .
739	Checks if a given cap can be used to see if any of the specified values are valid .
740	Get the version of the version
741	Removes an Element
742	Determines whether the given url is origin .
743	Module constructor .
744	Finds the index of an array .
745	Determines whether an array of needles are equal .
746	Finds the intersection of two arrays .
747	Parse the size of a string .
748	Add value to field .
749	Iterates over all fields
750	Check if object is a class name
751	Add a class name to an object .
752	Removes a class name from an object .
753	Get the style for the given object .
754	Gets the position of a node .
755	Get the position of a node
756	Gets the size of a node .
757	Remove an event from an object
758	Send data to the server
759	Rotate an image
760	Recursively read directories
761	Create a URL for a given URL .
762	Parses a Header .
763	Extract headers from the header .
764	Sets the mime type .
765	Initialize a new DataFrame .
766	Called when the upload is completed
767	Extend the target object .
768	Destroy the image
769	Defines a getter for a property .
770	Define a property .
771	An error .
772	Calculate the angle of a twist
773	Calculate the inverse of the matrix
774	Checks if two points are equal
775	Checks if two arcs are equal
776	Determine how many ticks should be done
777	Format a date formatter .
778	Validates a chart model .
779	Return an array of ticks
780	Rounds a number to a precision .
781	Merge default values .
782	Tries to find a number of ticks
783	Detects the decimal separator
784	Generates a transformer for a file .
785	Validates a list of references .
786	Handle a resource
787	Logs an error message .
788	Finds the closest reference to the given path .
789	Get hash from uri
790	Get the previous map from the map
791	Middleware for middleware
792	Parse IP address .
793	Resolve a singleton object
794	Retrieves an instance of the given name .
795	Applies a middleware to a container .
796	Add a middleware
797	Create a new Provider instance .
798	Create a new Provider instance
799	Create a new Service
800	Create a Service .
801	Create a service instance
802	Defines a single value for a given name .
803	Sets the value of the given container
804	Define a single value .
805	Define a constant .
806	Decorator for a given name .
807	Create a new instance of a factory
808	Populate the given name .
809	Register a service
810	Reset a list of providers .
811	Throws an error if not .
812	Checks whether a given event is a named event or not .
813	Registers a new event .
814	Inspects a variable declaration .
815	Reports a program .
816	Inspects a variable declaration .
817	Checks if a contract node is a function .
818	Reports a call expression .
819	Checks to see if a statement is valid .
820	Merge source code from source code
821	Inspects the top level declaration of a given node .
822	Detects the block of block .
823	Retrieves the text of a given node .
824	Reports a variable declaration .
825	Represents a rule context for a rule .
826	Resolve the source for the given source
827	Resolve plugin config
828	Writes the given config file .
829	Lint the source code
830	Lint a file
831	Creates a CLI CLI CLI options .
832	Validate a list of options .
833	Reports a node if a node is invalid .
834	Check if a string is a hexadecimal
835	Create a new Sound font .
836	Creates a new player .
837	Simulate instrumentation .
838	Determine if a directory exists
839	Create a promise .
840	Start a git directory
841	Resolve a glob pattern
842	Check if a property exists
843	Converts a property value to an array .
844	Create a Babel for babel .
845	Create an image loader .
846	Create a CSV loader .
847	Create a css file .
848	Prepend the entry to the entry .
849	Builds the webpack build
850	Recursively merge two objects .
851	Set default value for default values
852	Create a validator for the given type
853	Convert a VueType to a VueType .
854	Validate the given value .
855	Create a custom event
856	Initializes a custom event .
857	Cleans up DOM events .
858	Registers the runtime events .
859	Normalize an event .
860	Handle pointer events .
861	Event handler for mouseup event .
862	Add track point
863	Updates the position of the target element .
864	Start the game
865	determine the velocity of the game
866	Check if the bounding box is bounding box
867	Iterates over all components .
868	Appends a new log file to the console .
869	Reads the contents of an EDR .
870	Initialize a new Cronjob
871	Represents a sandbox .
872	Create a new WebSocket instance .
873	Creates a function that wraps the given executor function .
874	Merges the given array with the given values .
875	Wrap a function with a list of listeners
876	Wrap async functions
877	Returns the largest directory of the specified directory
878	Creates a new async function .
879	Creates a function that wraps an async function iterable .
880	Creates a function that will return a function that can be invoked once .
881	Recursively traverses the given object .
882	Convert a stream into a promise .
883	Get the list of files
884	Copy a scoped index to a scoped index .
885	Move the index to the index .
886	Check if index exists
887	Load a module
888	Parses the Accepts language .
889	Parse a language string .
890	Gets the specificity of a language .
891	Parse a language .
892	Return a list of preferred languages .
893	Compares two strings
894	Parses the encoder .
895	Parses a string .
896	Returns the priority for the given charset .
897	Specifies the specified charset .
898	Returns the preferred list of available characters .
899	Parses the given string .
900	Returns the priority for the given index .
901	Gets the preferred encoding of the given options .
902	Parse media .
903	Parse media type .
904	Get the priority for a media type .
905	Parse a media type .
906	Return a list of preferred media types .
907	Counts the number of characters in a string .
908	Parses a pair of key pairs .
909	Splits media types .
910	Split parameters into parameters .
911	Loads webpack config
912	Assigns an object to an object .
913	Parses a filter string into a string .
914	Evaluate a page
915	Waits until a page is finished
916	Constructor for PhantomJS .
917	Get a list of colors
918	Create a cube for a cube
919	Convert colors array to RGB
920	Compress colors .
921	Convert color data to RGB array
922	Start a download .
923	Initialize Action .
924	Create a channel
925	Handle error message
926	Create a new connection
927	Default error handler
928	Create a new Application .
929	Asserts that the given app is a queue .
930	Parse a shard string
931	Check if two nodes are equal
932	dispatch an event
933	helper function to create a new network
934	Returns the type of the given value .
935	Parses event data from event
936	Defines an event descriptor for a given key .
937	Defines a call to a call .
938	Define a custom Event .
939	Get a wrapper for a given event .
940	Wrap an event target .
941	Gets the listeners for a given event .
942	Define an event descriptor
943	Defines a custom EventTarget .
944	Create a new file
945	Called when a file is finished
946	Handler for mouse events
947	Constructs a new team .
948	Convert a integer to an integer .
949	Deserialize a JSON string .
950	Stringify JSON .
951	Serialize a JSON object .
952	Create a function that can be used to create a virtual module .
953	Get the name of a name .
954	Check if the given version is valid
955	Match the given protocol .
956	Compare two arrays
957	Get source rule string
958	Gets the parameters of the source rule .
959	Finds class by method .
960	Dumps all files in a directory
961	Zip a package .
962	Uploads a package .
963	Remove all temporary files
964	Abort an error .
965	Runs the given content with the given content .
966	Add a patcher
967	Sets the content of the given content .
968	Represents a dependency .
969	Handle change event
970	Format a URI .
971	Formats a URI to be rendered
972	Generate HTML URI
973	Registers a global object .
974	Compute a hash of 32 - bit 32 - bit 32 - bit 32 - bit 32 - bit 32 - bit 32 - bit 32 - bit 32 - bit bits
975	Computes the hash of a hash .
976	Binds an object to an object .
977	Get the setter for a property
978	Replace the value of a node
979	Removes the last node from the list .
980	Change the value of a node
981	Get next next node
982	Update a property on a key .
983	Constructs an object representing the top level nodes .
984	Removes a node
985	Finds the nodes of the given node
986	Matches a node in a given node
987	Recursively rehydrate an object
988	Render an Element
989	Check that a feature is defined in the global scope
990	Generates names for entity names .
991	Recursively merge the given configs
992	Loads the configuration from the repository
993	Gets the parameters of a base object .
994	Retrieves the configuration for a given file .
995	Define a property on an object
996	Swap the logger .
997	Inject the manifest into the manifest .
998	Injects the SWAP data into the SWAP .
999	Injects the async loading async page .
1000	React to React React components .
1001	Execute a child process
1002	Spawn a child process
1003	Returns the distance between two points .
1004	Checks whether the given attribute is allowed .
1005	Create HTML markup for a given attribute .
1006	Traps an event bubbling event .
1007	Create a new update queue
1008	Mounts a class instance .
1009	Requests the current state of the root .
1010	Returns true if the last time should be yielded .
1011	Delete a property from a node
1012	Updates the props of the DOM .
1013	Creates a new instance of a source .
1014	Represents a singleton .
1015	The base class .
1016	A CallExpression .
1017	Create a new Channel .
1018	Create a new MongoDB client .
1019	Create a new Draggable instance .
1020	Constructs a new UnionMap .
1021	Sorts the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction with the conjunction with the conjunction of the conjunction with the conjunction with the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction of the conjunction with the conjunction of
1022	Converts the program arguments to a program .
1023	Updates the program .
1024	Process a cycle in the cycle
1025	Selects the targets in the program tree
1026	Finds the next step in the tree
1027	Apply a function to a function .
1028	Define a flow .
1029	Invokes the flow .
1030	Define a flow .
1031	Pads a string .
1032	Creates a new S3 Curve
1033	Represents a SM2 key pair .
1034	Create a gulp file
1035	Add an event listener for an event .
1036	Removes an event listener .
1037	Represents a view .
1038	Represents a product .
1039	Create a new Cart .
1040	Retrieves the next retry of the promises .
1041	fix date date
1042	Unbinds all events
1043	Refresh the current series .
1044	Constructs a Google User .
1045	Generate a polygon for a sphere
1046	Returns the string of the given enum values .
1047	Converts a Long String to a Buffer .
1048	Initialize a new Random .
1049	Returns a string representation of a date .
1050	Create a logger instance
1051	Run the request queue
1052	Send a JSONP request
1053	Validates the given parameter .
1054	Convert a variable to a variable declaration
1055	Convert a variable declaration to an array of arguments .
1056	Constructs a NAML string .
1057	Collects scenarios from an element .
1058	send all servers
1059	Renders the children of the given children .
1060	Unmounts the page
1061	Applies the data to the array .
1062	Create a new table .
1063	Handle action .
1064	Called when the request has been fetched
1065	Create a component instance .
1066	Initialize the store
1067	Unregisters a store event .
1068	Request data .
1069	Filter a row .
1070	Sets the pagination page
1071	Fetches a table .
1072	Handles a row in a row
1073	Extract the value of an attribute
1074	Maps an object to the map .
1075	Filter obj .
1076	Finds all elements in an array
1077	Add an item to the array
1078	Replace array item in array
1079	Finds the intersection of two arrays .
1080	Removes an event listener .
1081	Suspends an action to an action .
1082	Determines if an object has changed .
1083	Set a property on an object .
1084	Sets the value of a key .
1085	Removes a key from the collection .
1086	Iterates over all keys and calls the callback for each key .
1087	Destroys a binding .
1088	Filters the results of a promise .
1089	Represents a container .
1090	Registers a factory .
1091	Unregisters a full name .
1092	Resolve a full name for a full name .
1093	Add a property to the container .
1094	Add a injection to the specified type .
1095	Add a factory .
1096	Get the value for a given key .
1097	Check if a given key exists .
1098	Iterates over all properties of the given object .
1099	Converts string to camel case .
1100	Increment a property by a property .
1101	Increment a property by a property .
1102	Create a new class
1103	Gets the meta property for a given key .
1104	Rejects a key .
1105	Removes the specified value from the given array .
1106	Returns an array of the properties of this object .
1107	This method is called on each element in the iteratee .
1108	Called when an object has changed .
1109	Represents a computed property .
1110	Add an object to this collection .
1111	Removes an object from the collection .
1112	Sends an event to the specified event .
1113	Define a promise .
1114	Sets the value of this promise .
1115	Assigns properties to action .
1116	Define action .
1117	Adds an item to the array .
1118	Removes an array of elements in the array .
1119	Removes an item from the array .
1120	Represents an array operation .
1121	Represents a single operation .
1122	Finds the index of the given index .
1123	Removes an item at index .
1124	Creates a new object with the given content .
1125	Receives an array of objects .
1126	Removes the enumerable properties from this collection .
1127	Removes the last element from the array .
1128	Finds child element by id .
1129	Sets the className of an element .
1130	Get an attribute .
1131	Get the value of an element .
1132	Returns the innerHTML for the current element .
1133	Add event listeners .
1134	Registers an event handler .
1135	Returns the nearest ancestor of the given class .
1136	Finds the parent of a given property .
1137	Finds the parent view of this class .
1138	Render a buffer .
1139	Sets the class name of the element .
1140	Applies the given attribute to the view .
1141	Sets the value of a property .
1142	Parses a property name .
1143	Render a child view .
1144	Destroy a view .
1145	Clear a view .
1146	Destroy a view .
1147	Applies a view to a view .
1148	Removes a childView .
1149	Called when a child view has changed .
1150	Called when a child view is removed .
1151	Add a child view to the collection .
1152	Trigger an action .
1153	Evaluate a helper for a given property
1154	Render a view .
1155	Binds a property on a view .
1156	Add an entity tag .
1157	Terminates the given handler .
1158	Initialize the router
1159	Render a controller .
1160	Finds a model instance .
1161	Gets the properties of a model .
1162	Get a controller instance .
1163	Unbinds a view .
1164	Registers a view .
1165	Event handler for the link .
1166	Replace a route with the given args .
1167	Determines whether a view is a view or not .
1168	Destroys the outlet .
1169	Get the href of the page
1170	Replace history with history
1171	Sets the state of the page
1172	Sets the path to the server .
1173	Resolves a full name of a full name .
1174	Get the name of a template name .
1175	Registers the router .
1176	Initialize the init method
1177	Ensures that the current state is ready .
1178	Setup the event dispatcher
1179	Registers a container .
1180	Sets the record of the given type .
1181	Add a model to the collection .
1182	Get a list of namespaced names .
1183	Add a timer to the queue
1184	Sets the waitWaiter for a given event .
1185	Destroys all methods .
1186	Wrap a callback with the same name
1187	Convert a property descriptor to an object .
1188	Normalizes the properties of an attribute .
1189	Returns true if the given descriptor is valid .
1190	Gets a trap function .
1191	Defines a property on a type .
1192	Try to freeze the object .
1193	Searches an object .
1194	Triggers an interceptor function .
1195	Delete a property
1196	iterate over iterate over iterateeables
1197	Gets all the keys of the given object .
1198	Gets the keys of all keys .
1199	Makes a method that returns a wrapper around a method .
1200	Loads a global object
1201	Serializes the record .
1202	Serializes the given record .
1203	Serializes a relationship to a record .
1204	Convert a record to a record .
1205	Extracts the given payload .
1206	Deletes the given payload .
1207	Save the record to the array .
1208	Sets the record .
1209	Creates a new record .
1210	Get the ID for the given type .
1211	Finds a record by id .
1212	Finds all registered types .
1213	Reloads the given record .
1214	Recursively find all records .
1215	Determine if a given id is a type .
1216	Get a record from a given type .
1217	Finds the given type .
1218	Gets the record for a given type .
1219	Unload a record .
1220	Filters the given type .
1221	Saves all records in the database .
1222	Called when the record changes .
1223	Assigns the record to the given record .
1224	Get the record mapping for the given type .
1225	Loads a record .
1226	Push a payload into the store .
1227	Merges the metadata for a given type .
1228	Creates a new record .
1229	Add a record to the saved record .
1230	Recursively clones the given object .
1231	Sets the value of an attribute .
1232	Called when the attribute has changed .
1233	Sends the data to the record .
1234	This method is called when the server has changed .
1235	Sets the association of this relation .
1236	Saves the model to the server .
1237	Refresh the record .
1238	Sets the value of the given attribute .
1239	Iterates over all attributes
1240	Iterates over all attributes
1241	Registers a property on a property .
1242	Iterates over all relationships
1243	Removes all records from the database .
1244	Add record to the given record .
1245	Recursively update the given array
1246	Creates an array of records .
1247	Creates a new record array .
1248	Creates a new record array
1249	Creates a new RecordCollection .
1250	Add a record to the given array .
1251	Asserts that the given array is loaded .
1252	Serialize a record .
1253	Finds all registered types .
1254	Generates a fixture for a fixture .
1255	Serialize record .
1256	Normalizes the given type .
1257	Normalizes the given payload .
1258	Recursively normalizes the primary payload .
1259	Recursively normalizes the given payload .
1260	Serialize a record .
1261	Serializes a relationship to a record .
1262	Get a type for a specific type
1263	Get a list of types
1264	Create a new record .
1265	Update a record
1266	Delete a record
1267	Get the path for the given type .
1268	Implements ajax request .
1269	Constructor for a Rule .
1270	Convert a key to a key .
1271	Serializes a record .
1272	Serializes a relationship to a record .
1273	Converts a string to camel case .
1274	Convert to camel case
1275	Maps a type to a type .
1276	Serializes the fields of a record .
1277	Update the record for the primary record .
1278	Update the payload .
1279	Converts a type to camel case .
1280	Creates an error object .
1281	Parses a key value into an object .
1282	Sets the value of an attribute .
1283	Compile a list of nodes .
1284	Creates a function that wraps an element in an array
1285	Replace an element with the same name .
1286	Declaration function .
1287	Checks whether the given request is the same .
1288	Recursively traverse all child nodes .
1289	Represents a client .
1290	Create a new Connection
1291	Create a markdown node .
1292	Sends a message to the server
1293	Processes a Bootstrap Bootstrap file .
1294	Fixes the tsconfig file
1295	Checks if a file exists .
1296	Fixes a native script package .
1297	Fixes the package . json file .
1298	fix the main entry point
1299	Fix ignore patterns
1300	Display the output help .
1301	Binds a function to the provided function .
1302	Injects the given object into the given object .
1303	Gets the value of a call .
1304	Sets the value of a given call .
1305	Validate a string .
1306	loop through associations
1307	Handle errors .
1308	Creates a zip file .
1309	Execute command
1310	Convert file to string
1311	Merge YAML files
1312	Loads a plugin with the given settings .
1313	Determines the base class for the given settings .
1314	Logs an error .
1315	Gets the bucket bucket for the given config .
1316	Builds a css file for a given configuration
1317	Builds the configuration for a command
1318	Builds a Lambda command
1319	Send a response to the server
1320	Convert options object to a string
1321	Assigns an object to another .
1322	Opens a popup
1323	Opens a popup using a callback function .
1324	Opens a popup
1325	Opens a popup
1326	Gets the tag range of the editor
1327	Checks whether the given HTML tag contains tags .
1328	Determines whether the given editor is valid .
1329	Get the results of a style sheet .
1330	Gets the contents of a given editor .
1331	Generate CSS snippet for CSS stylesheet
1332	Retrieves a string representation of a string .
1333	Extracts prefix from string
1334	Returns true if the given marker is valid .
1335	Toggles a boolean value .
1336	Determines whether the given attribute has changed .
1337	Gets the event handler for a property .
1338	Defines a derived property for a given model .
1339	Represents an image .
1340	Spawns a Task
1341	Inject template function .
1342	Creates a default check for the given size .
1343	Add two 64 - bit integers .
1344	Constructs a new Stream .
1345	Gets the map of variables from an AST .
1346	Splits a sandbox into a sandbox .
1347	Removes a sandbox from the sandbox
1348	Gets the usage of a given AST .
1349	Recursively wipe events .
1350	Removes items from the array
1351	Check if the block is part of a block .
1352	called when the module is loaded
1353	Rebuilds an object hierarchy
1354	Position the position of a row
1355	Finds the data for a class
1356	Stringify an object .
1357	Counts if block is in condition
1358	Wrap a condition for a condition .
1359	Determines whether or not a single decision or not .
1360	Counts the number of lines
1361	Generates a function for the anonymous function .
1362	Wrap the condition loop
1363	Define a module
1364	Calculates the coverage of a module .
1365	Merge a mixin object into an object .
1366	Recursively merge two objects
1367	Recursively merge the given config .
1368	Gets a list of files in a given directory
1369	Merge the configuration of a config object .
1370	Extracts the configuration from the config .
1371	Convert a module to a module
1372	Wrap a code string into a JSX module .
1373	Gets the type of the given code .
1374	Define a 3D transformation .
1375	The behavior of the drone .
1376	Calculates the direction of the z - axis .
1377	Parses provided config .
1378	Parse the given URL
1379	Convert a buffer to a buffer .
1380	Converts a URL to a URL .
1381	Read a file from a file
1382	Format an error message .
1383	Check if the HTTP response is valid
1384	Ensure a node is call
1385	Prepare output directory
1386	Parse a sitemap xml string .
1387	Runs the given input .
1388	Generate input file
1389	Generate input input
1390	Normalize the given object .
1391	Sets the default value for a given option .
1392	Prepare options
1393	Get the output path for a page
1394	Maps the index to the page .
1395	Generates a generator for the given generator .
1396	Maps options to a page
1397	Check if a path exists
1398	Determines if the phantomjs directory exists .
1399	Create a new PhantomJS instance
1400	Prepare options
1401	Iterates over all files .
1402	Creates a new lock handler for a given lock
1403	Initialize a new Notification .
1404	Start a notification .
1405	Add a file to the filesystem
1406	Check if a file exists
1407	Removes a file
1408	Remove a file
1409	Write the page to the page
1410	Check if a line is allowed .
1411	Get a URL
1412	Read a file .
1413	Bubble up the given values .
1414	Returns an array of elements that are in a range .
1415	Get the last time of the last time
1416	Parses an HTTP server .
1417	Prepare the params for the query string
1418	Strip trailing slash .
1419	Get the properties of an object .
1420	adds the event queue
1421	Prepare a request
1422	Add a request to the queue
1423	Get metrics .
1424	Sends a request to the server
1425	Sets all of the promises .
1426	Returns the first sibling of the given node .
1427	Classify the given value .
1428	Create a factory for a list of strings .
1429	Creates a function that binds cols to the table .
1430	Constructs a new JavaScript instance .
1431	Generates a random corpus
1432	The Backbone class .
1433	Compile css files
1434	Runs all tasks in series
1435	Filters the type of the given type .
1436	Pads the given value .
1437	Resolves collection definitions
1438	Assigns roles to user s roles
1439	Gets the list of all channels for a doc .
1440	Outputs the help of a command .
1441	Return a human readable readable readable string .
1442	Validates the object properties of the given object .
1443	Builds the path path for the given item .
1444	Gets the business ID of a business ID .
1445	Returns a function that can be used to create a sync function for a sync .
1446	Determines whether the given value is valid .
1447	Normalizes an ISO 8601 timezone .
1448	Compares two numbers .
1449	Compare two dates
1450	Takes an ISO ISO 8601 timezone and returns the timezone .
1451	Starts all agents
1452	Stop the process
1453	send message to the entity
1454	Deletes an entity
1455	Save the entity
1456	get file from filename
1457	Get entity context
1458	Get a module
1459	Process source object .
1460	Generate a module catalog catalog
1461	Log a module
1462	Builds an array of Parse instances
1463	Recursively build directory recursively
1464	Generate PID ID
1465	Save the cache
1466	Cache modules cache
1467	Cache modules cache
1468	Stop the broker
1469	Get a module module
1470	Remove a directory
1471	Get mouse position .
1472	Sends a request to another rule
1473	Injects proxy headers for a request .
1474	Parse a config file .
1475	Parse a config object .
1476	Parses a configuration object into an array of objects .
1477	Parse command line arguments .
1478	Parse command line arguments .
1479	Parse a rule rule .
1480	Create an error object .
1481	Updates the current state of a branch .
1482	Fetch all branches from the repository
1483	Initializes the branch of the repository
1484	Ensure that a buffer is a buffer .
1485	Convert a buffer to a buffer
1486	Compare two buffers
1487	Gets the merged files in the tree .
1488	Returns the merged files in the tree
1489	Finds the SHA of a file .
1490	Prepare a commit to a git commit
1491	Flush the current branch to the repository .
1492	Helper function for formatting messages .
1493	Push a remote repository
1494	Pulls a branch from the repository
1495	Compares the tree of a branch .
1496	Resolve conflict conflict conflicts
1497	Builds a commit commit commit
1498	Finds the entries in the tree .
1499	Add a blob to the cache
1500	Get a directory recursively
1501	Normalize a commit .
1502	Normalize a commit object .
1503	Stat a file .
1504	Read a file .
1505	Checks whether a given file exists or not .
1506	Remove a file .
1507	Moves a file from a file path .
1508	Determine if a file is changed
1509	Setup a proxy for a connection
1510	Initialize a new Nocks .
1511	Configures the express server .
1512	Configures a proxy server .
1513	Clean up all rules
1514	Sets changes to a file .
1515	Reverts the current working state
1516	Reverts a file from a given file .
1517	Reverts a given repository
1518	Reverts the given repository
1519	normalize path
1520	Check if path exists
1521	Recursively read directories
1522	Moves files from a directory
1523	Create a new branch
1524	Updates the current branch
1525	Removes a branch
1526	Fetch a blob from the repository
1527	Create a new OAuth2 token .
1528	Todo .
1529	Convert a feature array to a string
1530	Add a feature to the map .
1531	Add a feature .
1532	Converts an array of features to a map .
1533	Converts a hash array into an array of arrays .
1534	Convert an array of features to an array .
1535	Converts an array of arrays to an array .
1536	Takes a list of labels based on the same labels
1537	Convert a dataset to a tree .
1538	Recursively classify the tree .
1539	Constructs a base class .
1540	Constructs a new feature .
1541	Sets the weight of the class .
1542	Constructs a classifier .
1543	Sets the number of columns .
1544	Calculates the labels for the given class .
1545	Checks whether the given class is an array of strings .
1546	returns an array of probabilities for the given type .
1547	Initializes the training dataset
1548	Converts a model string into a map of features .
1549	Generates a string representation of a table .
1550	Represents a linear linear model .
1551	Initialize the training dataset
1552	Convert a model model to a linear model
1553	Sets the labels for a given sample .
1554	Initialize a new Class .
1555	Concatenate data arrays
1556	Preprocess the order of the given node
1557	Filters the relations in the database .
1558	Gets the list of files for a given bundle
1559	Retrieves a bundle from a bundle .
1560	Gets the list of resources for this bundle .
1561	Gets the list of the given filter names .
1562	Get the path of a bundle path .
1563	Create a new seed instance .
1564	Creates a new bundle .
1565	Load a file .
1566	Checks if a path is valid
1567	Process a bundle file .
1568	Registers a bundle .
1569	Determines whether the given filter is valid .
1570	Finds the version of a package .
1571	Recursively find a list of nested folders
1572	Create a new bundle
1573	Removes all properties from src object .
1574	Bundle constructor .
1575	Get base scale scale
1576	Initialize a Buffer .
1577	build gulp task
1578	Split a string into a string .
1579	Prints a command .
1580	Filters an array .
1581	Extract CSS file .
1582	Validates the plural placeholders
1583	Groups items by text .
1584	Traverse the given json object .
1585	Finds all dependencies for a given file .
1586	Parse a query string .
1587	Stringify obj .
1588	Compile a string .
1589	Bind events to DOM elements
1590	Initialize the class
1591	Render an element .
1592	Gets the value of an element .
1593	Decorates a module .
1594	Manages the coverage of the coverage .
1595	Constructs a new Shortline instance .
1596	Finds elements by name
1597	Uploads a coverage report
1598	Constructs a new Task .
1599	Execute git command
1600	Throws an error .
1601	Generates a css string for a given CSS class
1602	Combines a css string into a string .
1603	Represents an error .
1604	Asserts that a build is a commit .
1605	Trims a slash .
1606	Parse options .
1607	Convert obj to obj
1608	Render page pages
1609	Get git path from git repository
1610	Generates a directory for the given directory .
1611	Compile index . html
1612	Sorts an array of phrases .
1613	Finds the name of a given name .
1614	Takes a function and returns a function that wraps a function in the loop
1615	Processes a regular expression .
1616	Convert selector to CSS selector
1617	Create a new index
1618	Creates a new migration table .
1619	Creates a new seed for a given name .
1620	Called when the database is finished
1621	Parse options .
1622	Checks whether a props object is not defined .
1623	Implements a gif file .
1624	Returns true if the log level is enabled
1625	Returns true if the value is valid .
1626	Generates a map of attribute names .
1627	Initialize the model
1628	Initialize the model .
1629	Listen for radio changes
1630	Parse cookies .
1631	Parse a cookie .
1632	Add cookies .
1633	Checks if a cookie is valid
1634	Format a message to the console .
1635	Create a zoom range
1636	Synchronize the zoom level .
1637	Add a selection to the chart
1638	Apply the selection to the chart
1639	Create a select path
1640	Synchronously synchronizes the selected data .
1641	Setup watchers
1642	Setup watchers for data
1643	Add an identifier to the chart
1644	Load a entity .
1645	Generate an action object
1646	Generates an action creator for an action .
1647	Generates a random delay between two times .
1648	Logs an action to the console .
1649	Removes a subscriber from a subscriber .
1650	Removes all listeners for a given event
1651	Subscribes to a specific event .
1652	Get all events for a given channel
1653	Returns an array of subscribers for a given channel
1654	Subscribe to a channel
1655	Unsubscribe from a channel
1656	Subscribes to a subscriber .
1657	Unsubscribe from a channel
1658	Execute the handler
1659	Publish a given event .
1660	Resolve namespace namespace
1661	Returns a function that returns a promise that resolves to the given map .
1662	Creates a callback for the given type .
1663	Resolve a promise
1664	Create a fake instance of a class
1665	Checks if an object is a jQuery object .
1666	Determines whether an event is an Event object .
1667	Add methods to the module .
1668	Wrap a method on an instance of the instance
1669	Register a module
1670	Sets a module instance .
1671	Start a single module
1672	This method is called before the initialization of the constructor .
1673	Start a single module
1674	Start a single module
1675	Create a new instance of the given module
1676	Generates a callback for the given template object .
1677	Start all modules
1678	Stop a module
1679	Stop the module instance
1680	Stop a single instance
1681	Stops all registered modules
1682	Stop a single instance
1683	Removes a module .
1684	Delete a module
1685	Main entry point
1686	Get the value of the picker property .
1687	Set the value of the picker .
1688	Get the value of the input field .
1689	Create a Markdown serializer .
1690	Convert a markdown markdown to markdown .
1691	Try to process a suite .
1692	Entry point for the root node .
1693	Add a snapshot to the current snapshot .
1694	Push the current snapshot into a new snapshot
1695	Transform a suite into a suite .
1696	Transforms a snapshot to a list of files .
1697	Generates a suite for a suite .
1698	Safely escape delimiters
1699	Returns the default path for the given suite .
1700	Formats a list of strings into a list .
1701	Formats a list of snapshots for a given snapshot .
1702	Generates a preprocessor for a snapshot of a snapshot
1703	The plugin plugin plugin plugin .
1704	Replace the given string with the given string .
1705	Creates an array of blocks .
1706	Checks if the entity has the entity list
1707	Convert hex color to hex
1708	rule css rule
1709	Initialize Analytics .
1710	Debug logger .
1711	Check if obj is a Buffer
1712	Encode a number to a string
1713	Decode a string .
1714	Poller constructor .
1715	Updates the transport .
1716	Removes all listeners
1717	The base class
1718	Extract comments from a string .
1719	Binds the widget model to the widget
1720	Creates a new instance of the widget .
1721	Converts a vowel vowel into a vowel .
1722	Add an API call to the API
1723	Get JSON from a remote file .
1724	Splits a method name into a method .
1725	Copy remote client to remote
1726	Parses an error stack trace .
1727	Capture stdout stream
1728	Create a new stream for a stream
1729	Stops a capture .
1730	Wrap interceptor .
1731	Find the closest element closest to the selected option
1732	Check if the input is rounded to a round number
1733	Add a frame .
1734	Generates a transformer .
1735	Creates a function that merges the nodes of a node .
1736	Patches a node for a given node .
1737	Queue all queued items
1738	Generates a setter function for a given node
1739	Patch node .
1740	Trigger an event .
1741	Defines a delegate event .
1742	Get a Module instance
1743	Convert a structure to a structure
1744	Adds a query to the query .
1745	Helper function to handle multi queries .
1746	Create a knex instance .
1747	Closes all instances of the registry
1748	Highlight a JS AST highlighting .
1749	Render source code
1750	Create a marker for a given arrow
1751	Parses the length of a value node .
1752	Creates a slice of bytes .
1753	Collects all results from the outcome
1754	Finds the given key in an array .
1755	Read a buffer .
1756	Reads an ArrayBuffer .
1757	Reads the header .
1758	Reads a keyword summary .
1759	Read a keyword index .
1760	read key block
1761	Reads a keyword table from a table .
1762	Reads a record .
1763	Read a record block .
1764	Read a block .
1765	Read a key from an object .
1766	Finds a word .
1767	reduce a phrase to a phrase
1768	Remove a phrase from a phrase
1769	Finds the first key in a phrase
1770	Match a list of elements in a list
1771	Check if a modifier key is valid
1772	Create a modifier key for a modifier key .
1773	Override default event handler
1774	Override a keypress event .
1775	Execute a list of extensions .
1776	Parses an IMAP message into an AMP message .
1777	Creates a new Group
1778	Reads a new UPT .
1779	Stop the queue
1780	Format the value of the given value .
1781	Format the value for the given type .
1782	Format value for given value .
1783	Format a formatter object .
1784	Format the value of the given value .
1785	Formats input fields
1786	Recursively merge config files
1787	Parses a property node .
1788	Extracts a string literal .
1789	Parse string literals
1790	ECMA - 262 13
1791	Parse AST .
1792	Creates a curry function for a given function .
1793	Matches the given array with the given arguments .
1794	Compile an AST node .
1795	Get the name of a tag name .
1796	Evaluate attribute value .
1797	Checks whether a given character is quoted .
1798	Sets a default value on an object .
1799	Reads XML file .
1800	Append the uri source to the server .
1801	Display error message .
1802	Compile a schema .
1803	Add properties to the table .
1804	Creates a debounce function .
1805	helper for babel
1806	Finds a table for a given model
1807	Log an error .
1808	Call an array of arguments
1809	Finds the input element .
1810	Gets the validation message for the given element .
1811	Registers a class .
1812	Configure the options .
1813	Connect to MongoDB
1814	Start the program
1815	Execute all files
1816	Wrap a function to wrap the command .
1817	Handle errors .
1818	Convert a string to a string
1819	Save the database
1820	Create a new Parser
1821	Recursively recursively
1822	Check if path is included
1823	Check if path is a directory
1824	Process all picker files .
1825	Processes a single file
1826	Initialize http server
1827	Adds an element to the given array .
1828	Creates a function that takes an object and returns a function that will return a function that will return an object that can be used to create a function .
1829	Request a transaction .
1830	Returns the difference between two dates .
1831	Initialize an error handler .
1832	Gets the date of the given date .
1833	Consume a pair of pair .
1834	Consume array
1835	Checks whether or not a string or not .
1836	Called when the pool is finished
1837	Parse a JSON file .
1838	Updates the level of the next level in the level .
1839	Updates the level of the given level
1840	Decrypts encrypted data .
1841	Encrypts encrypted text .
1842	Encrypts the given text .
1843	Unpack content from encrypted content
1844	Derive a key from a password
1845	Derive a key from a password
1846	Create an encoder stream .
1847	Create a decoder stream .
1848	Generate a random variator for a given graph .
1849	Creates a new RDF algorithm .
1850	Generates a single curve
1851	Generates a color for a given path
1852	Generate paths for paths
1853	Update the brush
1854	Checks if the selected image is active
1855	Returns true if the second dimension is identical .
1856	Convert the given key into an object .
1857	Gets the property of a given property .
1858	Represents a Readable file .
1859	Called when the request is finished
1860	Initialize a new Session .
1861	Inspects the given message .
1862	Initialize a new Request .
1863	Process request options
1864	Triggers an event handler .
1865	Called by the HTTP request
1866	Initialize a new Cookie .
1867	Create a new Header object .
1868	Injects a constructor .
1869	Create a new Object .
1870	Create a new object .
1871	Gets the encoding of a file .
1872	Convert a string to a string
1873	Creates a new encoder .
1874	Encode a user for authentication .
1875	Represents a vector .
1876	Create a new Error instance .
1877	Constructs a new matrix .
1878	Represents a vector .
1879	Creates a new quaternion .
1880	Represents a vector .
1881	Creates a new SnipContainer .
1882	Initialize an element .
1883	Merge options .
1884	Create a new Batch instance .
1885	Represents a transform .
1886	Constructs a new Triangle .
1887	Executes a bash command
1888	Run command .
1889	Create an options object based on the glob pattern .
1890	Determines the bash command for a bash command
1891	Memory Manager
1892	Calculates the cost of a list
1893	Recursively walk nodes recursively
1894	Injects the given arguments .
1895	Executes a synchronous function .
1896	Iterates over an array .
1897	Map an array .
1898	Called when the selected date is changed
1899	Starts the server .
1900	Show the server
1901	Logs the request .
1902	Set properties for a given type
1903	Initialize a new Token
1904	Sends a request to the server
1905	Generates a new OAuth token .
1906	Create an error object .
1907	Create a address book
1908	Edit a book
1909	Remove a address
1910	Get a book
1911	Get a list of emails .
1912	Add a email to the email address .
1913	Get the email information for a given account
1914	Get the cost of a campaign
1915	List all activities
1916	Get a wallet info for a specific card
1917	Get a list of countries
1918	Get a score from a playlist
1919	Create a new campaign
1920	Add a new sender .
1921	Activates a user .
1922	Retrieve a user s email address .
1923	Retrieves the global information for a given email address .
1924	Removes an email address from the database .
1925	Get a list of emails
1926	Add a blacklist .
1927	Remove a list from the blacklist .
1928	Get the email info for a given email .
1929	minified html output
1930	Write output to disk
1931	Create a new Cookie .
1932	Set cookie value .
1933	Get a cookie
1934	Delete a cookie .
1935	Remove all keys from the list
1936	Create a curry function .
1937	Clones an item item .
1938	Upload local file to local storage
1939	Deletes the storable storage .
1940	setup middleware functions
1941	Get the next date for the specified schedule
1942	Delete action .
1943	Request a service
1944	Get an identifier for a particular type .
1945	Injects schemas .
1946	Convert a single action to a queue
1947	Fetch a list of items from a service .
1948	Send an API request
1949	Generates a schema for a schema .
1950	Creates a mapping of the given data .
1951	Maps data to a service .
1952	Reads the tail of the tail .
1953	Gets the length of the tail of the tail .
1954	Prepare a pipeline for a pipeline
1955	Convert query parameters to query
1956	Sets up the queue
1957	Get metadata for a service
1958	Sets an action .
1959	Sets the metadata of a service .
1960	Export a JSON schema to the schema .
1961	Generates a reference for a given identifier
1962	Checks if a value is a card .
1963	Finds the aggregate for the given type .
1964	Determines whether the given type is valid .
1965	Expired service .
1966	Translate a range to a range
1967	Transforms a selection to a row .
1968	Match endpoint definitions
1969	Create an action .
1970	Return an object with the given parameters .
1971	Creates a request from a payload .
1972	Returns a service for a given schema .
1973	Synchronously synchronously
1974	Initialize gulp .
1975	Outputs a string with colors .
1976	Constructs a new browser .
1977	Maps data to endpoint .
1978	Processes messages .
1979	Create a new instance of the given app .
1980	Represents a matrix .
1981	Convert a string to a string .
1982	Writes the json to the expected json .
1983	Writes the source to the source folder .
1984	Writes the map to the map
1985	Represents a node .
1986	Represents a text node .
1987	Represents an element .
1988	Initialize the init method
1989	Write a file to a file
1990	Detects the given selectors .
1991	Parse the markdown text .
1992	A base class for a common interface .
1993	Represents a matrix .
1994	Creates an array of arrays .
1995	Builds a match for the given attribute .
1996	Returns true if the container is a container container .
1997	Returns the common ancestor of a node .
1998	Parse style attributes .
1999	Returns the distance between two nodes
2000	Initialize a new Lexer .
2001	Initialize the lexer .
2002	Create an error .
2003	Registers a regular expression .
2004	Add a lexer .
2005	Parse a tag .
2006	Registers a regular expression .
2007	Create a new lexer .
2008	Registers a given type .
2009	Create a node
2010	Parse a string .
2011	Execute all functions
2012	Parse the input string .
2013	Parse a file .
2014	notify the hook
2015	Cancel a request .
2016	Called when the request is paused .
2017	Create a temporary directory
2018	Copy a buffer to a buffer .
2019	Parse a string .
2020	Builds a base config object based on the config
2021	Post a message to the platform
2022	Generates a username .
2023	Links a user to the user .
2024	Link provider .
2025	Default error handler
2026	Middleware for error handler
2027	Register a provider .
2028	Register an OAuthStrategy .
2029	Register a service provider .
2030	Middleware to handle social authentication
2031	Creates a callback for the given provider .
2032	Create a passport token for a passport .
2033	Get the provider for a given path .
2034	Get the provider token for the given path .
2035	Middleware to make sure the user is authenticated
2036	Finds the layer in the map
2037	Returns the map for the specified CRS
2038	Update the group
2039	Process the map layer
2040	Removes layers from the map
2041	Returns the bounds of the bounds .
2042	Recursively call the method on each group
2043	Checks if a layer is a group .
2044	Add a map to the map
2045	Unbinds a map
2046	Removes an array from an array
2047	Add a layer to the map
2048	Returns an array of marked markers .
2049	Updates the bounds of the map
2050	Add a marker to the map
2051	Invoked when the group is drawn .
2052	Fills the markers in the map
2053	Removes a layer .
2054	Add a marker to the map
2055	Interpolate given path
2056	Create an array of pages
2057	Create a new Template
2058	Represents a job .
2059	Represents a new Worker .
2060	Handle drag events
2061	Finds the index of the specified element .
2062	Represents a child process .
2063	Get the included files .
2064	Get the default arguments for the given path
2065	Get the arguments of the package . json .
2066	Parses bower . json .
2067	Determines if the main entry of the main file
2068	Represents a tornet agent .
2069	Runs the specified directory in the given directory .
2070	shutout a device
2071	Sets the scan limit for a device .
2072	Sets the brightness of an image .
2073	Clear the display of an address
2074	Display a decimal number .
2075	Returns a string representation of a comment .
2076	Schema class constructor .
2077	Check if a path exists
2078	Expose a server .
2079	Finds the dependencies of a dependency .
2080	Remove dependencies from a list
2081	Specifies a series of series .
2082	Execute a write action
2083	Finds the given value in an object .
2084	Recursively find all objects in target
2085	Initialize a new Influxlux database
2086	Creates a new handler for a given message .
2087	Creates a report report .
2088	Creates a report with the given options .
2089	Builds an object based on the options .
2090	Builds a list of commands .
2091	Initialize a new Router .
2092	Get a port from a protocol
2093	Recursively remove all child nodes .
2094	Finds the index of an object in an array .
2095	Gets the value of an element in an array .
2096	Gets the static value for a given node
2097	Determine if a variable has changed
2098	Generates a configuration for the given extension .
2099	Check if a string is escaped .
2100	Replace a string in a string
2101	Replace a string in a string
2102	Send a message to the server
2103	Parse message message
2104	JWT token .
2105	Signs the payload .
2106	Redirect request .
2107	Return a JSON representation of the data .
2108	Verifies that a token is valid .
2109	Create a new JWT instance .
2110	Create a new JWT instance
2111	Setup a component
2112	Defines a factory for a module
2113	Middleware for Closure
2114	match server
2115	Respond to the SMART
2116	Event handler for a category
2117	Sets the selected state .
2118	Represents a Service .
2119	Characteristic represents a Characteristic .
2120	Migrate the database to the database .
2121	Migrate the database to the database .
2122	Normalizes the object properties of the object store .
2123	Check if the schema descriptors are valid
2124	Lists a list of records .
2125	Normalizes a compound key path for a key .
2126	Iterates over a given cursor .
2127	Called when the cursor is finished
2128	Fetch all records in the given object store .
2129	Fetch all records in the database .
2130	Write data to disk
2131	Run the specified transaction
2132	Convert a cursor to a native direction .
2133	Create a new index
2134	Fetch the next page
2135	Execute an array of listeners
2136	Resolves the state of an instance .
2137	Runs a single query .
2138	Inserts the given record at the given index .
2139	Finds the index of the given record .
2140	Prepare the query for the given storage .
2141	Helper function to prepare the sort sort algorithm .
2142	Sets the size of the given filter .
2143	Generates a new storage for the given storage .
2144	Prepare a query string for a query .
2145	Opens a database .
2146	Handle connection error .
2147	Executes the migrations on the database .
2148	Takes a field and splits it into a single field .
2149	Generates an array of fields for a given object .
2150	Sets the value of the given field
2151	Gets the value of the given field .
2152	Updates the database .
2153	Create a container element .
2154	Render the main section
2155	Represents a connection .
2156	Represents a color .
2157	Create a plain text node .
2158	Convert an array to an array .
2159	Generates a JSON representation of a JSON error .
2160	Write a stream to the stream .
2161	End the stream
2162	Clean up event listeners
2163	Called when an error occurs .
2164	Remove a git directory
2165	Saves the snapshot of the snapshot
2166	get session data
2167	Generate a new request
2168	Parse a packet .
2169	Constructs a new Time object .
2170	Fetch the page data .
2171	Create a svg file
2172	Generate command line parameters
2173	Generates the parameters of a shape .
2174	Create a watcher
2175	Purge an API API .
2176	Creates a new HashChain .
2177	Create a new mock instance .
2178	Iterates over an array of objects .
2179	Merges two objects together .
2180	Create a new instance of a class
2181	Merges property value into a single property .
2182	Merges properties of a property into another object .
2183	Merge two properties of a source object .
2184	Mixin class .
2185	Make a directory recursively .
2186	Gets the target directory for the given identifier .
2187	Create a new system
2188	link remote system
2189	List containers for a given name
2190	Fetch a container for a container
2191	Finds the targets for the specified target
2192	Loads the targets from the system
2193	Deploys a revision to the target .
2194	Deploy a revision to the repository .
2195	List the revision of the given identifier
2196	Gets the revision of the given identifier .
2197	Compile the system file
2198	Commit the repository to the system
2199	Finalizes the source code
2200	Injects the application .
2201	Fixes all files in the registry
2202	Finds all files in a directory
2203	Loads all files .
2204	Write the registry .
2205	Builds the container for the given container
2206	Finds a container for a given container
2207	Sets the constants for the app .
2208	Generates git repositories for the repository
2209	Registers a git repository .
2210	Unregisters a system
2211	Processes the DOM tree .
2212	Processes the DOM tree .
2213	Add child node
2214	Remove a child
2215	Inserts an element .
2216	Generate a new repository
2217	Loads the repository
2218	Create a new repository
2219	Register a new repository
2220	Unregisters a user .
2221	Write file to repository
2222	Gets the revision of the given system
2223	Get the json file from the repository
2224	Gets the version of the given system .
2225	Finds a git tag .
2226	Gets the targets from the repository
2227	Gets the revision id for a given identifier .
2228	Gets the emoji configuration for a given environment .
2229	Returns a list of all containers that belong to the container
2230	Create a new Model instance .
2231	Sets the sub model for the given model
2232	Add a relation to the relation .
2233	Add a relation to the relation .
2234	Removes the relationships from the relation .
2235	Add a model type .
2236	Get a collection for a given type .
2237	Get type of model name .
2238	Get the id for the given type .
2239	Retrieves a collection from a given type .
2240	Add a model
2241	Checks if a relation exists in a database .
2242	Removes a model from the collection .
2243	Check if a relation has a relation .
2244	Removes all relations from this collection .
2245	Constructs a new KeyStore instance .
2246	Add a key to the collection .
2247	Registers a collection .
2248	Initialize the key for the given key .
2249	Retrieves a list of relations for a given key .
2250	Returns a JSON representation of a model .
2251	Create a new Entity .
2252	A specialized version of XHR .
2253	Represents a bitmap .
2254	Convert a value to an object .
2255	Return an empty string .
2256	Calculates the length of the first word .
2257	Compile module
2258	Provides a function that returns a function that can be invoked when a function is invoked .
2259	Constructs a new timer .
2260	Processes a stream of tokens .
2261	Create a new Template .
2262	Creates a function that allows a function to allow a function to be used to allow a function to allow a function to allow a function to allow a function to be allowed to be invoked .
2263	get data from program
2264	Encapsulates a websocket client .
2265	Post form data
2266	Verifies that the header is valid .
2267	Updates the current refs
2268	Represents a Docker command .
2269	Dynamically create a new object
2270	Prints tasks .
2271	Format a text column .
2272	Injects a gulp task .
2273	Create a logger .
2274	Checks if an item is a Promise .
2275	Determines whether a callback is called .
2276	Represents a race
2277	Define a task
2278	Wait for async functions
2279	Set timeout value .
2280	Handle error message
2281	Run the async function
2282	Runs the given iterable in parallel .
2283	Reset the structure
2284	hooks up hooks
2285	Get the value of a comment .
2286	Check if a string is white .
2287	Constructs a THREE .
2288	Resolve the list of files
2289	This method is called when a node is removed .
2290	Parses a regular expression into a regular expression .
2291	Parses a function call .
2292	Parse curly brackets .
2293	Add references to a variable
2294	Creates a function that executes the next function
2295	Asserts that the first argument is not .
2296	Binds arguments to a function .
2297	Return an array of brace expressions .
2298	Checks whether or not the given operator is a string .
2299	Checks whether the given token is a closing brace or not .
2300	Checks whether the given string is a string or not .
2301	Checks whether the given token is a string or not .
2302	Define an enumerable property
2303	Convert a number to an integer .
2304	Returns the length of the given argument .
2305	Creates an array of arrays .
2306	Create a promise that resolves to a Promise .
2307	Creates a function that will return a function that will return a function that will return a function that will return a function that will return a promise that can be used to create a promise .
2308	Creates a function that accepts a promise and returns a function that will return a promise .
2309	Initialize a new event
2310	Default event handler
2311	Reports a given token .
2312	Reports a given node .
2313	Reports a given node .
2314	Generates the destination location for the given point .
2315	Get the value for a given key .
2316	Gets the user info for a git user .
2317	Lookup a GitHub login in github repository .
2318	Unpack a message into a key .
2319	Calculate the SHA of a public key
2320	Generates a key for the given RSA key .
2321	Check if the command exists
2322	Check if the node exists
2323	Install a package
2324	Prompts for a node .
2325	Install the NPM package .
2326	Sets the current version of the given environment .
2327	Runs npm install command
2328	Represents a set of elements on an element .
2329	Constructs a new eventSubject .
2330	Represents a Promise .
2331	Retrieves a value for a given key .
2332	Resolve references recursively
2333	Format a string .
2334	Format the given value into an object .
2335	Export public key
2336	Gets the primary key for the primary key .
2337	Format a map .
2338	Loads a key .
2339	Merge the default values for a cache .
2340	Generate a cache for the cache
2341	Generates a cache header for the cache .
2342	Determine if a value has expired .
2343	Format a set of sets .
2344	Format an array .
2345	Reset data .
2346	Serialize a JSON object
2347	Recursively explode data
2348	Represents a subject value .
2349	A User .
2350	Builds the configuration for the given configuration
2351	Creates a new directory if it exists
2352	Copy the temporary directory
2353	Recursively update temporary files
2354	Convert a file path to a folder
2355	Convert a directory path to a directory
2356	Replace the content of the input content with the given content
2357	Copy the directory to the destination directory
2358	Reads text from a string .
2359	Constructs a Keystone Client .
2360	Finds all parents of the parent parents
2361	Finds all children of a class class
2362	Generates a list of hierarchical hierarchy .
2363	Create a list of children of a class list .
2364	Parse a class .
2365	A tag .
2366	Check if an option is found .
2367	An error .
2368	A relationship for a relationship .
2369	A metadata .
2370	A feature .
2371	Get a cookie from a cookie .
2372	Register a custom event handler .
2373	A class .
2374	Gets the git repo
2375	Push a branch to a branch
2376	Synchronously synchronously
2377	Run the async function
2378	A comment .
2379	Watch directory recursively
2380	adds a directory
2381	start watcher
2382	check if directory exists
2383	Send a file
2384	Decorate function .
2385	Create a mock object .
2386	Move the time of the given time .
2387	Create a scheduler
2388	Get unschedules
2389	Run all scheduled schedules
2390	Start a cron
2391	Information about a name .
2392	An OAuth2 .
2393	Force the given value to the given value .
2394	Inserts an item into an array .
2395	Validate props
2396	Event constructor .
2397	Create a text node
2398	A feedback .
2399	A reservation .
2400	A search .
2401	Iterates over an array
2402	Calls a callback with the given arguments .
2403	Creates a function that invokes fn once .
2404	Remove duplicates from array
2405	Returns an array with unique values from an array
2406	Base class .
2407	Memoize pattern .
2408	Multiplies the queue
2409	Checks whether the node is a node or not .
2410	Initialize a new string .
2411	Wrap an array into a string .
2412	Format a character .
2413	Checks if a string is a string .
2414	Extends a glob .
2415	Match a list of patterns
2416	Synchronously synchronously synchronously .
2417	Streams the source stream .
2418	Generate a list of source files
2419	Gets all files in a source stream
2420	Generates a list of uniform patterns based on the given patterns .
2421	Convert a list of patterns to a regular expression .
2422	Takes a negative array of patterns and returns an array of negative patterns .
2423	Groups all patterns in a list of patterns .
2424	Convert a pattern to a list of patterns .
2425	Finds all circular patterns that match the given pattern .
2426	Convert a pattern group to a regular expression .
2427	Checks if the given pattern matches a pattern .
2428	Recursively update the cached cache
2429	Loads a file
2430	Writes a JSON file .
2431	Loads an object from the cache
2432	Delete a document
2433	Sets a cache key .
2434	Loop through the parts of a file
2435	Matches a list of files matching the given patterns .
2436	Determines if a file matches a given pattern .
2437	Determines whether a file matches a given pattern .
2438	Determines whether a given file exists or not .
2439	Check if a given pattern matches any patterns .
2440	Matches all keys in an object .
2441	Creates a function that matches the given pattern .
2442	Convert a regular expression to a regular expression .
2443	Wrap a glob pattern into a regular expression .
2444	Generate a regular expression
2445	Collapse a string into a string
2446	Expands a string to a string .
2447	Split a string into a string .
2448	Filters an array of characters from an array .
2449	Extract globals .
2450	Wrap inner text into a string
2451	Convert a regular expression to a regular expression .
2452	Copies the properties of the given object .
2453	Advances a character in the input string .
2454	The base class for the source map .
2455	Compares the position of the given map .
2456	Compares an array of strings based on the given mapping .
2457	Computes the source url for a source map
2458	Represents a request request .
2459	Clear the buffer .
2460	Represents a Node .
2461	Append an array .
2462	Initialize a new Parser .
2463	Report an error .
2464	Registers a compiler .
2465	Constructs a new AST .
2466	Create a new Parser instance .
2467	Add a parser .
2468	Add a new token .
2469	Removes a set of types .
2470	Returns the last node in the stack .
2471	Parse a string .
2472	Creates a new RegExp .
2473	Parse a delimiter .
2474	Parse the input .
2475	Parse the input string .
2476	Mixin module .
2477	End the buffer .
2478	Convert a string to a string .
2479	Registers a custom hook function .
2480	Wrap a plugin .
2481	Memoize function .
2482	Generates a key for a given object .
2483	Create a new class
2484	Register a directory recursively
2485	Create a container for a container .
2486	Stat all files
2487	read directory recursively
2488	Convert attribute name to property name
2489	Generates all commands for the given container
2490	The constructor .
2491	Generate a new Task planner
2492	Stops the given filter
2493	Stops the given pattern
2494	Create a new Definition
2495	Register a library
2496	Creates a function that takes a promise and returns a promise .
2497	Applies the set of arguments to the set .
2498	Call this method .
2499	Initialize the promise
2500	Define a promise .
2501	Represents a promise .
2502	This method is called when the promise is resolved
2503	Constructs a new decoder .
2504	Create a rule
2505	Generate a list of media rules
2506	Destroy the link
2507	Loads the config file
2508	Save a config file
2509	Get server options .
2510	Get all resources for a domain
2511	Format object formatter .
2512	Returns true if the ray is a ray
2513	Get the url for a flight
2514	Fetch the base url
2515	Module constructor .
2516	Get the names of function names .
2517	Gets all properties of this object .
2518	Updates a model
2519	Finds elements by class
2520	Subscribes to a template
2521	Generates a signature for the given parameters .
2522	Finds the darkest color of the given index .
2523	Updates the color for the node .
2524	Update the main section
2525	Returns the center of the graph .
2526	Determines if the list of all nodes have changed
2527	Calculates the links to the graph
2528	Finds an element in a node
2529	Get the coordinates of an element .
2530	Get SVG element
2531	Hide the context menu
2532	Determines whether a node is connected to another .
2533	Event handler for the control
2534	Change the level
2535	Event handler for the control menu
2536	Called when a node is clicked .
2537	Hook for control node
2538	Show the zoom level
2539	Event handler for node
2540	Called when a node is clicked
2541	Event handler for a node .
2542	Triggered when a node is clicked .
2543	Resize the graph .
2544	This function will be called for each node
2545	Recursively recycle all nodes .
2546	Reverse the graph .
2547	Updates the menu of the menu
2548	Updates the UI for the UI element .
2549	Updates the table width of the node .
2550	Returns the zoom level for the given graph .
2551	Gets the width of the window .
2552	Initializes the screen screen
2553	Respond to the success message .
2554	Respond to the HTTP error .
2555	Create a new request .
2556	Create an HTTP server
2557	Setup server server
2558	Bind an event .
2559	Represents a reply .
2560	Respond to a file .
2561	Processes a single file
2562	Package module .
2563	The Ebus class .
2564	Create a new Client
2565	Gets the first index of the given value .
2566	Generates a URL for a given stage .
2567	The Customer constructor .
2568	Creates a copy of obj .
2569	Formats a message with options .
2570	Creates a zip file .
2571	Extract a zip file .
2572	Creates a copy of the source directory .
2573	Decompress a zip file .
2574	Make a directory
2575	Creates a new fabricator .
2576	Reads a file .
2577	Iterates over each entity in obj .
2578	Check if file is a JS file
2579	Checks if value is empty .
2580	click on menu
2581	Represents a command .
2582	Constructs a new Class .
2583	Extend the constructor
2584	Returns a string representation of a file .
2585	Generate a string for the initializer
2586	Generates a JavaScript variable .
2587	Reads the contents of a file .
2588	Reads a readable stream .
2589	Processes a file .
2590	Logs a new ledger .
2591	Logs an event .
2592	Logs the execution of an event .
2593	Report an event .
2594	Generates a scope for a team
2595	Represents an article .
2596	Define Action .
2597	Map an object to another object .
2598	Visits a list of promises .
2599	Tracks an error message .
2600	Returns the index of the given primitive .
2601	Parses XHR .
2602	Add dependencies to the list of files
2603	Generates a list of forms for a given form .
2604	Parse JSON .
2605	Generates a route for a particular type .
2606	Initialize a new connection .
2607	Gets the first index of an array .
2608	Writes data to a directory .
2609	Check if main files exist
2610	Initialize Object .
2611	Add a new Object
2612	Generate a chunk of items
2613	Add a property for a property name .
2614	Appends an object to the stack
2615	Returns a string representation of the object .
2616	Generate a factory
2617	Generate a factory for a factory
2618	Returns a string representation of a class .
2619	Generates a string representation of this object .
2620	Represents a client .
2621	Initialize ImageLoader .
2622	Loads an image
2623	called when an image is loaded
2624	Convert images to images
2625	Sorts images
2626	Builds a function for a given environment .
2627	Validate a valid id
2628	get unique duplicates
2629	Sets the function for the given function
2630	Set callback function
2631	Represents a new Case .
2632	A Resource .
2633	Generates a container for a resource
2634	List directories
2635	Read the contents of a chunk
2636	Create a package . json object .
2637	Opens a container .
2638	Inspect a container container
2639	Represents a user preference .
2640	Determines the updater function for a given comment .
2641	Updates the comment tree .
2642	Finds a comment node .
2643	Generates a location for the given runtime .
2644	The constructor .
2645	Sorts a sorted array in ascending order .
2646	Returns pivot pivot point for a pivot .
2647	Split a pivot into a pivot .
2648	Sorts an index in the array
2649	Search for a page
2650	Create a pipe stream
2651	Wrap the methods of spawn methods
2652	Connect to stdout events
2653	Add event handlers
2654	Resolve a route
2655	Builds a function for a given resource
2656	Get the API key for the app .
2657	Get resource name
2658	Signs a message
2659	Hash a message
2660	Generates a signature for the given body .
2661	Waits until the given variable is satisfied
2662	Wait for an attribute
2663	Render a view
2664	Removes a view .
2665	Recursively merge two objects
2666	Parse a string .
2667	Get the color of a hex color .
2668	Check if a command exists
2669	Execute a command
2670	Initialize the plugin
2671	Change the version of the version of the page
2672	Add the entry settings for a page
2673	Render a page
2674	Reset the article
2675	Loads google fonts
2676	Sorts elements by name
2677	Create an injectable injectable function .
2678	Gets the data model from the data model .
2679	Generates a URL for a person .
2680	Process a node .
2681	Create an application .
2682	Set global assert
2683	Represents a Company .
2684	Include AST AST from AST .
2685	Finds the first node of a given node .
2686	Given a FunctionExpression returns a FunctionExpression .
2687	Shut down the application
2688	Takes a user input and passes the password to the user .
2689	Convert a numeric value to a string .
2690	Draws the table columns .
2691	Determines whether a string is valid .
2692	Checks whether a call is a call expression .
2693	Subscribe to a bus
2694	Create git repository
2695	Recursively recover a key .
2696	Calculates the key of the public key
2697	Add permissions to permissions
2698	Sets the permissions of a role
2699	Creates a new DataModel instance .
2700	Represents a model .
2701	Create a new Model instance .
2702	Create a proxy for a model
2703	Get a model by name
2704	Detect the destination type .
2705	Generates a random color
2706	Iterates over the given color .
2707	Get image coordinates
2708	Gets the color of a color
2709	Draws the size of the canvas
2710	Draw the PNG image
2711	Convert image to PNG
2712	Determines whether the given values are equal .
2713	Asserts that a function is passed to a function .
2714	Get a list of ignored files
2715	Render the input
2716	Calculates the color for the given index
2717	Render errors .
2718	Get a resource from a resource .
2719	Update a resource
2720	Recursively map the given schema .
2721	Create a yaml schema for a given type .
2722	Read a yaml file .
2723	Loads theme .
2724	Get the theme from the given object .
2725	Write data to disk .
2726	Initializes the given options .
2727	Reduce the build config
2728	Writes the given options .
2729	Convert a map to an object .
2730	Convert an object to an object .
2731	Convert value to array
2732	Generates a unique id
2733	Return a string representation of an object .
2734	Generates a string representation of an array .
2735	Represents a REST request .
2736	Returns a copy of the map .
2737	Register a component .
2738	Create a widget instance
2739	Get the env variable
2740	Serialize a Node .
2741	Get an attribute by name .
2742	Initialize the schema .
2743	Sets the list of items in this collection .
2744	Sorts a list of items in ascending order .
2745	Sorts a list of items by ascending order .
2746	Finds the first item in the array .
2747	Sets the value of an attribute .
2748	Get the checkbox .
2749	Sets focus on input .
2750	Blur the input .
2751	Sets the input selection range .
2752	Converts a string to a string .
2753	Adds a date to the specified interval .
2754	Searches the duration of the given unit .
2755	Convert a date to a date .
2756	Gets options for messages
2757	Parse message types .
2758	Outputs a message to the console .
2759	Assigns default values .
2760	Finds all pages .
2761	Write output .
2762	Create a function that calls the given callback function .
2763	Checks if the server is running on the server
2764	Installs the selenium server
2765	Initialize the browser
2766	Run the mocha
2767	End the session
2768	Updates a session with the given name
2769	Finish the grunt task
2770	Render response .
2771	Merge option values
2772	Merge options
2773	Determine if key is a key
2774	Search for source object properties .
2775	Add a reducer to a reducer .
2776	Removes a scope from a scope .
2777	Replace a reducer with the given scope .
2778	Convert value to integer .
2779	Create a new error .
2780	flush messages
2781	Reads a configuration file .
2782	Check if a file is ignored
2783	Extract styles from source code .
2784	Reads a commit file .
2785	Loads all files in a file
2786	Sets a class name .
2787	Sets the class name of this class .
2788	Sets the size of the image .
2789	Get style for the given style
2790	Sets a style property on a DOM element .
2791	Returns the size of the viewport .
2792	Checks if an element is a CSS style .
2793	Prints a number
2794	Encode a string
2795	Decode a string
2796	Generates a random number of non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non -
2797	Convert an array of parameters to a string .
2798	Convert signature signature to signature string
2799	Generate HMAC HMAC
2800	Sets the values of the given slot .
2801	Gets an array of values .
2802	Add translations .
2803	Sets up the first button pressed .
2804	Sets up the pressed button .
2805	Sets the selected picker .
2806	Represents a new RPC RPC .
2807	Represents a message .
2808	Add a function to a sequence
2809	Extracts the description of a comment .
2810	Add a comment .
2811	Represents a keyword .
2812	ECMA - 262 13
2813	ECMA - 262 13 . 2 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 .
2814	ECMA - 262 12
2815	ECMA - 262 13
2816	Replaces the AssignmentPatternPatternPattern with the given expression .
2817	ECMA - 262 13
2818	ECMA - 262 13
2819	Extend an object with the given properties .
2820	Refreshes the lines of the given width .
2821	Checks if a path is absolute
2822	Repeat a string in a string
2823	Removing duplicates from an array
2824	Log error message
2825	Wrap a shell command .
2826	Write a directory to a directory
2827	Create a directory recursively
2828	Split path into a path
2829	update stdout
2830	Format arguments for console .
2831	Represents a GNTP packet .
2832	Create a new Logger .
2833	Represents a command .
2834	The base implementation of _ .
2835	Get the next token for a given position .
2836	Checks whether or not a variable expression is valid .
2837	Determines whether or not or not .
2838	Asserts that a string ister .
2839	Check if provided value is an object .
2840	Run a command .
2841	Recursively eat an array of arguments
2842	Set command line arguments
2843	Extend aliases .
2844	Check if a key is set of aliases
2845	Guess the type of a flag .
2846	Returns the width of the table .
2847	Normalize aliases .
2848	Returns a string representation of a default value .
2849	Finds the attribute value for the form field
2850	Sets a new passport .
2851	Write a string to a string
2852	Create a directory
2853	Check if a path exists
2854	Constructs a new Database instance .
2855	Redirect to the next action .
2856	Creates a gulp request .
2857	Handles JSON response .
2858	Split the header into the header .
2859	Scrolls to the given position .
2860	Scrolls to the container
2861	Scrolls to the specified position .
2862	Initialize an element .
2863	Add actions to actions
2864	Returns a string of occurrences of a given pattern
2865	Upload a file .
2866	Downloads a file .
2867	Add a filter to this collection .
2868	Iterates over all items .
2869	Iterates over all elements in the collection .
2870	Removes an item from the collection .
2871	Removes all items from the array .
2872	Returns the index of the given item .
2873	Checks if an item exists in an array .
2874	Returns an array of items within this range .
2875	Returns the index of the first item in the array .
2876	Returns a copy of this Collection .
2877	Sets the month title of the month
2878	Sets the title of the Carousel .
2879	Creates a new array of categories .
2880	Generates a name for a month .
2881	Checks if the user is a member of a user
2882	Gets the first text in the stack .
2883	Creates a proxy for an element .
2884	Metalsmith plugin
2885	Default map function
2886	Schedule a new job
2887	Defines a validator for a given type .
2888	Define a primitive type .
2889	Checks if the given value is valid .
2890	Gets the names of all registered types .
2891	Check if a comment is part of a comment .
2892	Get the path for the given path .
2893	Load settings .
2894	Format the size of the specified size .
2895	Convert form data to form input
2896	Returns the width of the document .
2897	Returns the orientation of the viewport .
2898	An observable class .
2899	Initialize the item
2900	Compares two arrays .
2901	Compares two arrays .
2902	Convert a JSON object into an object .
2903	Sorts an array .
2904	Sorts the items in the array .
2905	Apply a function to a function .
2906	Detects the device class .
2907	Detects the width of the window .
2908	Constructs a CSV file .
2909	Replace an array of elements in an array .
2910	Removes a model from the database .
2911	Removes a model from the collection .
2912	Determines whether the current location is relative to the root .
2913	Retrieves data from a view .
2914	Clear the template cache
2915	Recursively clears the cached template .
2916	Clears a view .
2917	Create a copy of a cache entry .
2918	Creates a template cache for the given template .
2919	Updates the data cache for the given data .
2920	Registers a namespace for the given namespace .
2921	Determines whether or not a given error type .
2922	Create a new custom error type
2923	Get a handler for a given name .
2924	Registers a command .
2925	Sets an event on an event .
2926	Iterates over all events for a given entity .
2927	Add a callback to the deferred .
2928	Sets up the current view .
2929	Removes all child views .
2930	Add a region definition to the map
2931	Add a region .
2932	Remove all regions
2933	Remove a region
2934	Load a Template
2935	Loads a template from the cache
2936	Render a template .
2937	Merge object helpers .
2938	Binds all events on the model .
2939	Binds events to the view .
2940	Unbinds all models in the collection
2941	Destroys this instance .
2942	Initialize the UI .
2943	Trigger an event on the parent .
2944	Recursively traverse all child views .
2945	Serializes the collection .
2946	Render the template .
2947	Initializes the collection .
2948	Add a child view .
2949	Sorts the children of this collection .
2950	Render the collection .
2951	Add children to this collection .
2952	Finds the next element in the collection .
2953	Shows a single view
2954	Add a child view .
2955	Render a child view .
2956	Render a view .
2957	Create a new child view
2958	Destroy a view .
2959	Creates a buffer fragment .
2960	Inserts a child view .
2961	Saves a child view .
2962	Destroys the collection .
2963	Remove all children .
2964	Initializes the collection .
2965	Serialize the given model .
2966	Renders all child views .
2967	Render the template
2968	Constructs a new ItemView .
2969	Render the view .
2970	Destroy the view
2971	Sets the regions for the given element .
2972	Sets the regions of the given region .
2973	Initializes the region manager
2974	Returns the class for the given object .
2975	Convert a view to a view .
2976	Sets the handlers for a specific action .
2977	Registers a trigger event .
2978	Handler for the route .
2979	Create a module instance
2980	Sets the regions of the given region .
2981	Initializes the region manager .
2982	Initialize Radio .
2983	Stop this module .
2984	Create a module instance
2985	Add a module
2986	Get the name of a function .
2987	Get absolute path .
2988	Move a new entry to the specified directory .
2989	Get the parent directory for the specified device .
2990	Gets the directory recursively
2991	Create a directory recursively
2992	Write a file .
2993	Sorts an object
2994	Runs all childs
2995	Create a new MultiCacheCache .
2996	Pipe a function into a new function .
2997	Create a raw HTML markup for a given HTML tag .
2998	Create a template for a template
2999	Generates a template for a template
3000	Defines a Model .
3001	Create a new Model .
3002	Represents a point .
3003	Sets the current tab bar .
3004	Constructs two points .
3005	Returns the point of the line segment .
3006	Initialize a new Socket .
3007	Called when the timeout is received
3008	Gets the number of characters .
3009	Write source to source
3010	Copy source to destination directory
3011	Registers a property on an object .
3012	Registers a tracked object .
3013	Extract methods from object
3014	Initialize a new Connection
3015	Sets the content of this container .
3016	Convert the DOM attributes to the DOM .
3017	Clones this node .
3018	Block for initialization
3019	Create a template block
3020	Customizer for accessors
3021	Wrapper for wrapper functions
3022	Creates an iterator for accessors .
3023	Sets the value of an accessor .
3024	Called when the lock is destroyed .
3025	Injects a script tag .
3026	Removes properties from an object
3027	Converts a hash to a hash .
3028	Convert a hash to camelCase
3029	Returns an array of hash keys for a hash
3030	Finds all selectors
3031	Checks if a component is a selector .
3032	Decorator for a single contact
3033	Execute a SQL statement .
3034	Get the item at the given index .
3035	Create a payload
3036	Check if the given type is valid .
3037	Assign key value to target object
3038	Compare two nodes
3039	Finds all nodes in the tree
3040	Request a file system
3041	Sends a request to the server
3042	Check if field exists
3043	Create a package . json file .
3044	Prepare options for watch
3045	Sets the index of the specified filter .
3046	Removes a list of filters
3047	Merges two objects together .
3048	Creates a function that returns a function that invokes fn with the result of obj .
3049	Snapchat class .
3050	Convert double quotes to double quotes .
3051	Object .
3052	Generates a id for a single id
3053	Parse selectors
3054	Check if field exists
3055	Validate field fields
3056	Check if field exists
3057	Checks to see if the given type exists .
3058	Get type of type
3059	Gets the results of a single query .
3060	Determines whether the given object matches the given sequence .
3061	Add content to the contents of the contents .
3062	Add a top level to the top level
3063	Create an action handler for the action .
3064	Callback for event .
3065	Called when the server is received
3066	Get a transaction
3067	Calls a method on an action .
3068	Produces a raw RPC response object .
3069	Send a request to the server
3070	Sends the buffer to the queue
3071	Call a method on a POST request .
3072	Submit the form of the form
3073	Add an inline block to the block .
3074	Stub file contents .
3075	Determines if the webpack directory exists
3076	Initialize a new Route .
3077	Decorate a transport .
3078	Get a random value from an array
3079	Returns an array of random values .
3080	Represents a response .
3081	Default response handler .
3082	Send an HTTP response
3083	Set header value .
3084	Callback for response .
3085	Ensure that the given arguments are valid .
3086	Checks whether the given arguments are valid .
3087	Throws an error if available .
3088	Checks whether the given index is the same .
3089	Finds the index of the given value .
3090	Finds the required index of the given value .
3091	Asserts that the expected values are expected .
3092	Asserts that the given value is a valid type .
3093	Validates the given type .
3094	Returns a string representation of a value .
3095	Returns a string representation of a type .
3096	Generates a URL for a request .
3097	Get the state for a given property
3098	Validate a model
3099	truncate a string
3100	Try to load a file .
3101	Validates array of indexes .
3102	Add routes .
3103	Generates a UUID
3104	Generates a random string
3105	Convert a string to a Uint8Array
3106	Convert a string to a Buffer
3107	Hides Backbone .
3108	Logs a message .
3109	Copy file to destination
3110	Copy all files in a directory
3111	Replace all files in a match .
3112	Deletes all files in the given directory
3113	Checks if a directory exists .
3114	Validate a file .
3115	Recursively finds all subdirectories .
3116	Returns the absolute path of the specified directory
3117	Resolve a directory
3118	Higher order function for sorting
3119	Reduce a list of directories recursively
3120	Hides a menu .
3121	Show the menu
3122	Sets the position of the given menu .
3123	Hides the menu .
3124	Sets the menu to the given menu .
3125	Initialize a new adapter
3126	Get the schema for the given configuration .
3127	Get backend config
3128	Get backend config
3129	Get a file
3130	Save a file
3131	Get the configuration for a given file .
3132	Execute the next function
3133	Logs an error .
3134	Builds the data from the collection .
3135	Returns true if the array contains the given values .
3136	Strips http url .
3137	Parse a query string .
3138	Initialize a new tab .
3139	Convert an object to a string
3140	Gets the position of an anchor element .
3141	Iterates over all items .
3142	Gets the specified file entry .
3143	Checks if an element has a text element .
3144	Initializes the container .
3145	Initializes the container element .
3146	Returns the index of the given index .
3147	Create a script tag
3148	Injects a script element .
3149	Loads a partial file
3150	Convert data to Record
3151	Connects the given provider .
3152	Unregisters a provider .
3153	Initialize the application .
3154	Get an instance of a controller name .
3155	Registers a component .
3156	Removes an item from the list .
3157	Removes all items
3158	Sets the active animation .
3159	Gets all items recursively
3160	Check if the input element exists
3161	Converts a number to an integer .
3162	Converts a value to an integer .
3163	Converts a value to a rounded number .
3164	Logs the logger
3165	Converts an object to a Date .
3166	Middleware for the request .
3167	Define a route
3168	Generates a route .
3169	Create a password hash .
3170	Generates a JSON schema for a column .
3171	Decorates a node for a node
3172	Update the current node
3173	Removes a node .
3174	Destroys this element .
3175	Destroys this node .
3176	Inserts a node into another node .
3177	Removes this node .
3178	Removes all child nodes
3179	Sorts this node s children .
3180	Expands a node
3181	collapse a node
3182	Dispatch the next function
3183	Destroy the mask
3184	Generates a unique id for an element .
3185	Merge properties from source object .
3186	Removes an event listener .
3187	Add an action .
3188	Registers a property .
3189	Create a new Store .
3190	Represents a node .
3191	Convert array to array
3192	Configures a redux store .
3193	Create an observable instance
3194	Enable draggable .
3195	get relative path
3196	Rebuild a root path
3197	Look up a level for logging level .
3198	Logs a message .
3199	Checks if a path is an identifier .
3200	Accepts the key and value of the given key .
3201	Check if a key is required for a key .
3202	Removes an array from an array .
3203	Compile input function .
3204	Reduce a document node to a document .
3205	Create a new Node
3206	Add a promise to the queue
3207	Get the next queue
3208	Flush the queue
3209	Set the current record .
3210	Gets all fields in the collection
3211	Returns the field of the selected field .
3212	Checks if point is in point
3213	Executes a command sequence of all commands
3214	Replace all references in the given AST .
3215	Generates a unique name for a unique variable
3216	Replace class declarations with class names .
3217	Generates a variable declaration .
3218	Item constructor .
3219	Bind on top level
3220	Bind events on an element .
3221	Draws the mask .
3222	Returns a copy of an array with the given values .
3223	Initialize a DOM element .
3224	Set new data
3225	Returns an array of parents .
3226	Returns the parent model for the given index .
3227	Finds the nearest ancestor of the given function .
3228	Get data from a path
3229	Get the data model from the collection .
3230	Generates a random token
3231	Updates the user s username .
3232	Send a message to the user .
3233	Sorts all issues
3234	Duplicate a user .
3235	Extracts the subjectIds from the given subject .
3236	Format an array of issues .
3237	Recursively merge issues
3238	Initialize a new Swagger instance .
3239	Creates a function that returns a promise that will return a function that will return a function that will return a promise that will be called when the callback is called .
3240	List all available files in a directory
3241	Reads an adapter configuration file .
3242	Write a adapter to the adapter
3243	Render files .
3244	Processes a translation file
3245	Gets the context for the given context .
3246	Render a page
3247	Checks whether a node is a Function .
3248	Gets the config for a given function
3249	Reports a given function node .
3250	Applies the configuration to the config .
3251	Binds events to an event .
3252	Sets an interval of an interval .
3253	Process a single operation .
3254	Set an operation on an operation .
3255	Get the URL for the request .
3256	Sets the value of the formatter .
3257	Set the picker
3258	Clones an object
3259	Initialize a new Impoder .
3260	Initialize the component
3261	Removes a class from the class .
3262	Hide the animation .
3263	Show the animation .
3264	Sets the width of the canvas .
3265	Add a component to the viewport .
3266	Calculates the width of an element .
3267	Set the alignment .
3268	Finds the closest parent element in the given selector .
3269	Destroys this instance .
3270	Event handler for a list item .
3271	Backbone .
3272	Go to a node .
3273	Takes a program and returns an array of functions .
3274	Parses the id of the carousel
3275	Formats the details of the report
3276	Retrieves the translations from the database
3277	Checks to see if the card is valid
3278	Called from the Purchase API
3279	Called from the Purchase API
3280	Parse a key
3281	Invokes a function with the given arguments .
3282	Handle change event
3283	Retrieves the values of the field .
3284	Sets the values of the given field .
3285	Refresh the textarea
3286	Process params object .
3287	Save the store
3288	The Collection constructor .
3289	Finds an item in a collection .
3290	The main class
